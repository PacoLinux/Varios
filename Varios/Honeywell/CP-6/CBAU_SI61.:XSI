/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CBAU: PROC MAIN;
 
%EQU CHANS=40;
%EQU CHANSLOTS=40;
%EQU XCVRS=100;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE CB_C61;
 
DCL M$CBCG DCB;
DCL M$LM DCB;
%F$DCB;
%EQU_CG;
 
DCL EVENT_HANDLER ENTRY ASYNC;
DCL XCON_HANDLER ENTRY ASYNC;
 
%FPT_EVENT (FPTN=FPT_EVENT,UENTRY=EVENT_HANDLER);
%FPT_XCON (FPTN=FPT_XCON,UENTRY=XCON_HANDLER);
 
%FPT_OPEN (FPTN=FPT_OPENCG,DCB=M$CBCG,ASN=COMGROUP,NAME=CGNAME,
           ACCT=RUACCT,FUN=CREATE,EXIST=NEWFILE,AU=YES,CTG=YES,
           IXTNSIZE=30,SCRUB=YES,EVENT=2,SETSTA=AUSTA,ACCESS=ACCESS,ACSVEH=VEHICLE);
%VLP_SETSTA (FPTN=AUSTA,MYSTATION='CBAU');
%VLP_NAME (FPTN=CGNAME,NAME='CBCG');
%VLP_ACCT (FPTN=RUACCT);
%VLP_ATTR (FPTN=ACCESS);
      %VLP_ACCESS(FPTN=ACC1,EXEC=YES,ACCT='?',LAST=";");
%VLP_ATTR (FPTN=VEHICLE);
      %VLP_ACSVEH(FPTN=VEH1,DELR=YES,READ=YES,UPD=YES,WNEW=YES,VEHICLE='CB.JTA     ',LAST=";");
%FPT_CLOSE (FPTN=FPT_CLOSECG,DCB=M$CBCG,DISP=RELEASE);
%FPT_READ (FPTN=FPT_READCG,DCB=M$CBCG,WAIT=NO,EVENT=1);
%FPT_WRITE (FPTN=FPT_WRITECG,DCB=M$CBCG,STATION=WRTSTA);
%VLP_STATION (FPTN=WRTSTA);
%FPT_ACTIVATE (FPTN=FPT_DEACTIVATE,DCB=M$CBCG,STATION=ALLSTA,
               ABTET=YES,ABTREAD=%TYC_DACT);
%VLP_STATION (FPTN=ALLSTA,STATION='&&?',ALLDCBS=YES,ALLTRMS=YES);
%FPT_WAIT (FPTN=FPT_WAIT,UNITS=1000);
 
DCL CHANNELS(0:%(CHANS*CHANSLOTS)) UBIN BYTE CALIGNED;
DCL CHANNEL UBIN;
DCL 1 TRANSCEIVER(0:%XCVRS),
      2 STATION CHAR(8),
      2 NAME CHAR(20),
      2 HANDLE CHAR(20),
      2 CHANNEL UBIN;
DCL STATIONS UBIN;
DCL XCVRX UBIN;
DCL NULLST BIT(72) DALIGNED CONSTANT INIT('0'B);
DCL NULLSTATION REDEF NULLST CHAR(8);
 
DCL RDBUF$ PTR;
DCL RDBUF CHAR(80);
DCL 1 URDBUF REDEF RDBUF,
      2 MSGTYP UBIN BYTE CALIGNED,
      2 XCVRX UBIN BYTE CALIGNED,
      2 MSG CHAR(78),
      2 MSGU(0:77) REDEF MSG UBIN BYTE CALIGNED;
DCL CBMSG(0:79) REDEF RDBUF UBIN BYTE CALIGNED;
%B$CGAURD (FPTN=AURD,STCLASS="BASED(RDBUF$)",LAST=",");
%B$CGAUCI (FPTN=AUCI,STCLASS=BASED,LVL=2);
DCL LSTA$ PTR;
%VLP_STATION (FPTN=LSTA,STCLASS="BASED(LSTA$)");
DCL CBCG$ PTR;
DCL 1 WRTBUF ALIGNED,
      2 TYP UBIN BYTE CALIGNED,
      2 MSG CHAR(79),
      2 MSGU(0:78) REDEF MSG UBIN BYTE CALIGNED;
 
DCL CGEVENT(0:35) BIT(1) STATIC SYMDEF;
DCL SIMULATING BIT(1) STATIC SYMDEF;
DCL XCONCNT UBIN STATIC SYMDEF INIT(0);
 
        CALL INITIALIZE;
        CALL OPENCG;
        SIMULATING='1'B;
 
        CALL M$READ(FPT_READCG);
 
        DO WHILE(SIMULATING);
           CALL WAIT;
           CALL PROCESS_MESSAGE;
           END;
        CALL CLOSECG;
 
        FPT_XCON.V.UENTRY#=ENTADDR(NIL);
        CALL M$XCON(FPT_XCON);
        RETURN;
 
INITIALIZE: PROC;
 
        RUACCT.ACCT#=DCBADDR(DCBNUM(M$LM))->F$DCB.ACCT#;
        CALL CONCAT(VEHICLE.Q.VEH1.VEHICLE#,'CB.',RUACCT.ACCT#);
 
        CHANNELS='0'B;
        TRANSCEIVER='0'B;
        STATIONS=0;
 
        RDBUF$=ADDR(RDBUF);
        FPT_READCG.BUF_=VECTOR(RDBUF);
        FPT_WRITECG.BUF_=VECTOR(WRTBUF);
        CBCG$=DCBADDR(DCBNUM(M$CBCG));
 
        CGEVENT='0'B;
        CALL M$EVENT(FPT_EVENT);
        CALL M$XCON(FPT_XCON);
 
        RETURN;
 
END INITIALIZE;
 
OPENCG: PROC;
 
        CALL M$OPEN(FPT_OPENCG);
 
        RETURN;
 
END OPENCG;
 
WAIT: PROC;
 
        DO INHIBIT;
           DO WHILE(NOT CGEVENT);
              CALL M$WAIT(FPT_WAIT);
              END;
           END;
 
        RETURN;
 
END WAIT;
 
PROCESS_MESSAGE: PROC;
 
DCL I UBIN;
 
        LSTA$=CBCG$->F$DCB.LASTSTA$;
 
        DO I=0 TO 2;
           IF CGEVENT(I) THEN DO INHIBIT;
              CGEVENT(I)='0'B;
              DO CASE(I);
               CASE(0);
                 SIMULATING='0'B;
               CASE(1);
                 IF LSTA.MSGTYP#='*AUEV' THEN
                    CALL AU_MESSAGE;
                 ELSE
                    CALL USER_MESSAGE;
                 CALL M$READ(FPT_READCG);
               CASE(2);
               END;
              END;
           END;
 
        RETURN;
 
END PROCESS_MESSAGE;
 
AU_MESSAGE: PROC;
 
DCL I SBIN;
 
        DO CASE(AURD.EVENT);
         CASE(%CG_DOPN#);
           CALL FINDSTATION(NULLSTATION) WHENRETURN DO;
              TRANSCEIVER.STATION(XCVRX)=AURD.STATION;
              TRANSCEIVER.NAME(XCVRX)=AURD.AUCI.WHO.ACCT;
              TRANSCEIVER.HANDLE(XCVRX)=' ';
              TRANSCEIVER.CHANNEL(XCVRX)=19;
              STATIONS=STATIONS+1;
              CALL TUNE(19);
              WRTBUF.TYP=%CB_CONNECT;
              WRTBUF.MSGU(0)=XCVRX;
              WRTBUF.MSGU(1)=19;
              CALL SENDMSG(AURD.STATION);
              WRTBUF.MSG='Welcome to CB.  You are tuned to channel 19.';
              CALL SENDTEXT(AURD.STATION);
              END;
           WHENALTRETURN DO;
              WRTBUF.TYP=%CB_NOXCVR;
              CALL SENDMSG(AURD.STATION);
              END;
         CASE(%CG_DCLS#);
           CALL FINDSTATION(AURD.STATION) WHENRETURN DO;
              TRANSCEIVER.STATION(XCVRX)=NULLSTATION;
              DO I=0 TO SIZEC(CHANNELS)-1;
                 IF CHANNELS(I)=XCVRX THEN CHANNELS(I)=0;
                 END;
              STATIONS=STATIONS-1;
              END;
         END;
 
        RETURN;
 
END AU_MESSAGE;
 
USER_MESSAGE: PROC;
 
DCL MSGTYP UBIN;
DCL I UBIN;
DCL CHN UBIN;
 
        MSGTYP=URDBUF.MSGTYP;
        XCVRX=URDBUF.XCVRX;
        CHANNEL=TRANSCEIVER.CHANNEL(XCVRX);
        DO CASE(MSGTYP);
         CASE(%CB_TEXT);
           IF TRANSCEIVER.HANDLE(XCVRX)=' ' THEN
              CALL CONCAT(WRTBUF.MSG,TRANSCEIVER.NAME(XCVRX),': ',URDBUF.MSG);
           ELSE
              CALL CONCAT(WRTBUF.MSG,TRANSCEIVER.HANDLE(XCVRX),': ',URDBUF.MSG);
           CALL BROADCAST(CHANNEL);
         CASE(%CB_TUNE);
           CALL UNTUNE(CHANNEL);
           TRANSCEIVER.CHANNEL(XCVRX)=CBMSG(2);
           CALL TUNE(TRANSCEIVER.CHANNEL(XCVRX));
         CASE(%CB_MONITOR);
           I=0;
           DO WHILE(I<40 AND URDBUF.MSGU(I)~=0);
              CHN=URDBUF.MSGU(I);
              CALL TUNE(CHN);
              I=I+1;
              END;
         CASE(%CB_UNMONITOR);
           I=0;
           DO WHILE(I<40 AND URDBUF.MSGU(I)~=0);
              CHN=URDBUF.MSGU(I);
              CALL UNTUNE(CHN);
              I=I+1;
              END;
          CASE(%CB_LIST);
           IF URDBUF.MSGU(0)=0 THEN DO;
              DO I=1 TO 40;
                 CALL LIST_CHANNEL(I);
                 END;
              END;
           ELSE DO;
              I=0;
              DO WHILE(I<40 AND URDBUF.MSGU(I)~=0);
                 CHN=URDBUF.MSGU(I);
                 CALL LIST_CHANNEL(CHN);
                 I=I+1;
                 END;
              END;
         CASE(%CB_HANDLE);
           TRANSCEIVER.HANDLE(XCVRX)=URDBUF.MSG;
         END;
 
        RETURN;
 
END USER_MESSAGE;
 
TUNE: PROC(CHN) ALTRET;
 
DCL CHN UBIN;
DCL CHNBASE UBIN;
DCL I UBIN;
DCL X SBIN;
 
        CHNBASE=(CHN-1)*%CHANSLOTS;
        X=-1;
        DO I=CHNBASE TO CHNBASE+%CHANSLOTS-1;
           IF CHANNELS(I)=0 THEN DO;
              IF X=-1 THEN X=I;
              END;
           ELSE IF CHANNELS(I)=XCVRX THEN DO;
              RETURN;
              END;
           END;
        IF X~=-1 THEN DO;
           CHANNELS(X)=XCVRX;
           RETURN;
           END;
        ELSE DO;
           ALTRETURN;
           END;
 
END TUNE;
 
UNTUNE: PROC(CHN);
 
DCL CHN UBIN;
DCL CHNBASE UBIN;
DCL I UBIN;
 
        CHNBASE=(CHN-1)*%CHANSLOTS;
        DO I=CHNBASE TO CHNBASE+%CHANSLOTS-1;
           IF CHANNELS(I)=XCVRX THEN DO;
              CHANNELS(I)=0;
              END;
           END;
        RETURN;
 
END UNTUNE;
 
FINDSTATION: PROC(STA) ALTRET;
 
DCL STA CHAR(8);
DCL I UBIN;
 
        DO XCVRX=1 TO %XCVRS;
           IF TRANSCEIVER.STATION(XCVRX)=STA THEN RETURN;
           END;
        ALTRETURN;
 
END FINDSTATION;
 
LIST_CHANNEL: PROC(CHN);
 
DCL CHN UBIN;
DCL CHNBASE UBIN;
DCL I UBIN;
DCL TRX UBIN;
DCL CH CHAR(0) STATIC INIT('ch XX: ');
DCL MON CHAR(6);
 
        CALL BINCHAR(SUBSTR(CH,3,2),CHN);
        IF SUBSTR(CH,3,1)='0' THEN SUBSTR(CH,3,1)=' ';
        CHNBASE=(CHN-1)*%CHANSLOTS;
        DO I=CHNBASE TO CHNBASE+%CHANSLOTS-1;
           IF CHANNELS(I)~=0 THEN DO;
              TRX=CHANNELS(I);
              IF CHN=TRANSCEIVER.CHANNEL(TRX) THEN
                 MON=' ';
              ELSE
                 MON='(mon)';
              CALL CONCAT(WRTBUF.MSG,CH,MON,TRANSCEIVER.NAME(TRX),' ',TRANSCEIVER.HANDLE(TRX));
              CALL SENDTEXT(TRANSCEIVER.STATION(XCVRX));
              END;
           END;
 
        RETURN;
 
END LIST_CHANNEL;
 
SENDMSG: PROC(STA);
 
DCL STA CHAR(8);
 
        WRTSTA.STATION#=STA;
        CALL M$WRITE(FPT_WRITECG) WHENALTRETURN DO; END;
        RETURN;
 
END SENDMSG;
 
SENDTEXT: PROC(STA);
 
DCL STA CHAR(8);
 
        WRTBUF.TYP=%CB_TEXT;
        CALL SENDMSG(STA);
        RETURN;
 
END SENDTEXT;
 
BROADCAST: PROC(CHN);
 
DCL CHN UBIN;
DCL CHNBASE UBIN;
DCL I UBIN;
 
        CHNBASE=(CHN-1)*%CHANSLOTS;
        DO I=CHNBASE TO CHNBASE+%CHANSLOTS-1;
           IF CHANNELS(I)~=0 AND CHANNELS(I)~=XCVRX THEN DO;
              CALL SENDTEXT(TRANSCEIVER.STATION(CHANNELS(I)));
              END;
           END;
        RETURN;
 
END BROADCAST;
 
CLOSECG: PROC;
 
        CALL M$DEACTIVATE(FPT_DEACTIVATE) WHENALTRETURN DO; END;
 
        DO WHILE(STATIONS>0 AND XCONCNT<2);
           CALL WAIT;
           CALL PROCESS_MESSAGE;
           END;
 
        CALL M$CLOSE(FPT_CLOSECG) WHENALTRETURN DO; END;
 
        RETURN;
 
END CLOSECG;
 
 
END CBAU;
 
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
EVENT_HANDLER: PROC ASYNC;
 
%INCLUDE CP_6;
 
%B$EXCFR;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
 
DCL CGEVENT(0:35) BIT(1) SYMREF;
 
        CGEVENT(B$TCB$->B$TCB.STK$->B$EXCFR.EVID)='1'B;
        RETURN;
 
END EVENT_HANDLER;
 
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
XCON_HANDLER: PROC ASYNC;
 
DCL CGEVENT(0:35) BIT(1) SYMREF;
DCL XCONCNT UBIN SYMREF;
 
        CGEVENT(0)='1'B;
        XCONCNT=XCONCNT+1;
        RETURN;
 
END XCON_HANDLER;
