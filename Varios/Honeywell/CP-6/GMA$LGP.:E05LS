VERSION E05

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:1    
        1        1        /*M* GMA$LGP - Routines to manage physical memory */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ECU=0,ENU=0,CRM=80  */
        8        8        /*P*
        9        9             NAME: GMA$LGP
       10       10             PURPOSE:
       11       11                   To manage physical memory for LCP-6.
       12       12             DESCRIPTION:
       13       13                   This module contains the low level routines that manage all of
       14       14                   the allocable physical memory for LCP-6.
       15       15             REFERENCE:
       16       16                   "Memory Management for LCP-6" AF Section 26.2 #0708A-0.
       17       17        */
       18       18        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:2    
       19       19        GMA$LGP: PROC (PAGENO,PAGES,RP,WP,EP) ALTRET;
       20       20
       21       21        /* Includes */
       22       22
       23       23        %INCLUDE GH_GATE_M;
       24       64 S      %INCLUDE GH_LCP6_M;
       25       65 S      %INCLUDE GF_LCP6_M;
       26       66        %INCLUDE GM_MACRO_M;
       27      548        %INCLUDE G_HJIT_M;
       28      693        %INCLUDE G_ROS_M;
       29      775        %INCLUDE GM_VIRTUAL_E;
       30      985 S      %INCLUDE GU_LCP6_M;
       31      986 S      %INCLUDE G_LCP6_E;
       32      987        %INCLUDE G_JIT_M;
       33     1252        %INCLUDE GH_SCHD_E;
       34     1348        %INCLUDE GH_SCHD_M;
       35     1492        %INCLUDE G_SFILE_M;
       36     1552        %INCLUDE MM_SCODE_C;
       37     1599        %INCLUDE G$BOBCAT_M;
       38     1619        %INCLUDE KNH_MACRO_C;
       39     1902        %INCLUDE KN_DATA_M;
       40     3688
       41     3689        /* Parameters */
       42     3690
       43     3691    1   DCL PAGENO UBIN;
       44     3692    1   DCL SEGX REDEF PAGENO UBIN;
       45     3693
       46     3694    1   DCL PAGES UBIN;
       47     3695    1   DCL USERNO REDEF PAGES UBIN;
       48     3696
       49     3697    1   DCL RP BIT(2) ALIGNED;
       50     3698    1   DCL WP BIT(2) ALIGNED;
       51     3699    1   DCL EP BIT(2) ALIGNED;
       52     3700
       53     3701        /* EQUs and SUBs */
       54     3702
       55     3703        %GM_EQUS;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:3    
       56     3706        %G$JIT_E;
       57     3768
       58     3769        /* Based */
       59     3770
       60     3771        %G$MHJIT (FPTN=G$MHJIT,STCLASS="BASED (G$MHJIT$)");
       61    10645        %G$JIT (STCLASS="BASED(G$JIT$)");
       62    11059        %G$ROS (FULL=YES);
       63    12010        %G$SEGDESC (FPTN="G$SEGDESCA (0:0)",STCLASS=BASED);
       64    12032        %G$UHJIT (FPTN=G$UHJIT,STCLASS="BASED (G$UHJIT$)");
       65    15006        %GM$EXTENT (FPTN=GM$EXTENT,STCLASS="BASED (G$WINDOW1$)");
       66    15033        %GM_MEAT (FPTN=GM$MEAT,STCLASS="BASED (MEAT$)");
       67    15065        %GM_MEAT (FPTN=GM$MEATA,ARRAY=YES,STCLASS=BASED);
       68    15097        %GM$PPUT (FPTN=GM$PPUT,STCLASS=BASED);
       69    15157        %GM$PPUT (FPTN=GM$PPUTA,ARRAY=YES,STCLASS="BASED (G$PPUT$)");
       70    15217        %G$USER (FPTN="G$USER(0:0)",STCLASS="BASED(G$USRT$)");
       71    15228        %G$HHJIT (FPTN=W_HHJIT,STCLASS="BASED(G$WINDOW1$)");
       72    17372        %G$HHJIT (FPTN=B_HHJIT,STCLASS="BASED(G$BPAR2$)");
       73    19516        %G$SEGDESC (FPTN="USRMAP(0:31)",STCLASS="BASED(U$)");
       74    19538        %G$SEGDESC (FPTN="MCLMAP(0:31)",STCLASS="BASED(M$)");
       75    19560        %G$SEGDESC (FPTN=USEGDESC,STCLASS="BASED(U$)");
       76    19582        %G$SFILE (FPTN=G$SFILE,ARRAYED=NO,STCLASS="BASED(M$)");
       77    19619        %G$BOBCAT;
       78    19632        %KNH$HMI;
       79    19639        %KN$IOP (STCLASS="BASED(M$)");
       80    19812    1   DCL G$AWORD(0:7) UBIN BASED;
       81    19813    1   DCL BIT2ALGN BIT(2) ALIGNED BASED;
       82    19814
       83    19815
       84    19816        /* Auto */
       85    19817
       86    19818    1   DCL CURR UBIN;
       87    19819    1   DCL CURR$ PTR;
       88    19820    1   DCL NEXT UBIN;
       89    19821    1   DCL NEXT$ PTR;
       90    19822    1   DCL PREV UBIN;
       91    19823    1   DCL PREV$ PTR;
       92    19824    1   DCL CURR_LAST UBIN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:4    
       93    19825    1   DCL CURR_LAST$ PTR;
       94    19826    1   DCL CURR_MEAT$ PTR;
       95    19827    1   DCL MEAT$ PTR;
       96    19828    1   DCL BLINK UBIN;
       97    19829    1   DCL FLINK UBIN;
       98    19830        %G$SEGDESC (FPTN=G$SEGDESC,STCLASS=" ");
       99    19852    1   DCL I UBIN;
      100    19853    1   DCL L UBIN;
      101    19854    1   DCL LOG UBIN;
      102    19855    1   DCL PPUT$ PTR;
      103    19856    1   DCL SIZE UBIN;
      104    19857    1   DCL REL_SHF_SZ UBIN;
      105    19858    1   DCL REL_SHF_PG UBIN;
      106    19859    1   DCL LIM UBIN;
      107    19860    1   DCL U$ PTR;
      108    19861    1   DCL M$ PTR;
      109    19862    1   DCL B$ PTR;
      110    19863    1   DCL SHUF_START UBIN(32);
      111    19864    1   DCL SHUF_STOP UBIN(32);
      112    19865    1   DCL 1 FLG,
      113    19866    1         2 SHUFFLED BIT(1) UNAL,
      114    19867    1         2 SPLIT_SHUF_SEG BIT(1) UNAL,
      115    19868    1         2 SFILE_RLSD BIT(1) UNAL,
      116    19869    1         2 LOCATE_IO_FRAGMENT BIT(1) UNAL,
      117    19870    1         2 INT_LVL BIT(1) UNAL,
      118    19871    1         2 BASE_LVL BIT(1) UNAL,
      119    19872    1         2 RE_EXTENDED BIT(1) UNAL,        /* for debugging                      */
      120    19873    1         2 SHUF_UP BIT(1) UNAL,
      121    19874    1         2 * BIT(8) UNAL;
      122    19875
      123    19876                                           /* GET_TYPE is only useful for debugging   */
      124    19877    1   DCL GET_TYPE UBIN;                 /* 0-alloc initial seg   1-extend current  */
      125    19878                                           /* 2-move to prev seg    3-move to new seg */
      126    19879                                                /* 4-get physical                     */
      127    19880
      128    19881
      129    19882        /* Symrefs */
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:5    
      130    19883
      131    19884    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      132    19885    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      133    19886    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
      134    19887    1   DCL G$BPAR2$ PTR SYMREF READONLY;
      135    19888    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      136    19889    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      137    19890    1   DCL G$WINDOW1$ PTR SYMREF READONLY;
      138    19891    1   DCL G$ROS$ PTR SYMREF READONLY;
      139    19892    1   DCL G$TSTACKU$ PTR SYMREF READONLY;
      140    19893    1   DCL G$JIT$ PTR SYMREF READONLY;
      141    19894    1   DCL G$USRT$ PTR SYMREF READONLY;
      142    19895        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      143    19914        %GM_MEAT (FPTN=GM_MEAT_SHUF,ARRAY=YES,STCLASS=SYMREF);
      144    19946        %GM_MEAT (FPTN=GM_MEAT_NSHF,ARRAY=YES,STCLASS=SYMREF);
      145    19978    1   DCL GM_MEM_HI UBIN SYMREF;
      146    19979    1   DCL GM_MEM_LOW UBIN SYMREF;
      147    19980    1   DCL GM_SHUF UBIN SYMREF;
      148    19981    1   DCL GM_NSHF UBIN SYMREF;
      149    19982    1   DCL GM_SHUF_HI UBIN SYMREF;
      150    19983    1   DCL GM_SHUF_COUNT UBIN SYMREF;
      151    19984    1   DCL GM_SHUF_SEGS# UBIN SYMREF;
      152    19985    1   DCL GM_SHUF_MIN UBIN SYMREF;
      153    19986    1   DCL GM_NSHF_PEAK UBIN SYMREF;
      154    19987    1   DCL GM_NSHF_CURR UBIN SYMREF;
      155    19988    1   DCL GM_SHUF_TIME UBIN(32) SYMREF;
      156    19989    1   DCL G$PPUT$ PTR SYMREF READONLY;
      157    19990    1   DCL GM_XSHUF UBIN SYMREF;
      158    19991    1   DCL GM_ASHUF UBIN SYMREF;
      159    19992    1   DCL GM_HSHUF UBIN SYMREF;
      160    19993    1   DCL GM_STEP UBIN SYMREF;
      161    19994    1   DCL GM_CHK_PPUT UBIN SYMREF;
      162    19995    1   DCL GH_HQ(0:0) UBIN SYMREF;
      163    19996    1   DCL GJ_SFILE_CURR# UBIN SYMREF;
      164    19997    1   DCL KN_IOP_START$ PTR SYMREF;
      165    19998    1   DCL KN_IOP_END$ PTR SYMREF;
      166    19999    1   DCL G_MUAIS UBIN SYMREF;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:6    
      167    20000
      168    20001        /* Entrefs */
      169    20002
      170    20003    1   DCL GHH$ASD ENTRY (2) ALTRET;
      171    20004    1   DCL GHI$UTS ENTRY(1);
      172    20005    1   DCL GHS$RUE ENTRY(4) ALTRET;
      173    20006    1   DCL GUD$ASD ENTRY(1) ALTRET;
      174    20007    1   DCL GMV$MOVESEG ENTRY(2);
      175    20008    1   DCL GMV$MOVEUP ENTRY(1);
      176    20009    1   DCL SCREECH ENTRY(1);
      177    20010    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
      178    20011
      179    20012        /*  constants  */
      180    20013
      181    20014        %G$SEGDESC (FPTN=SHUF_DSCR,V=YES,SIZE=255,STCLASS=CONSTANT,
      182    20015                      RP=G_R_MON#,WP=G_R_MON#,EP=G_R_MON#);
      183    20037
      184    20038        %VLP_SCODE (FPTN=SHFLERR,ERR#=%S$MM49,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      185    20039                    FCG=GM,MID=A,MON='1'B);
      186    20100        %VLP_SCODE (FPTN=PARMERR,ERR#=%S$MM48,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      187    20101                    FCG=GM,MID=A,MON='1'B);
      188    20162        %VLP_SCODE (FPTN=PPUTERR,ERR#=%S$MM10,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      189    20163                    FCG=GM,MID=A,MON='1'B);
      190    20224        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:7    
      191    20225        /*D* NAME: GMA$GETPS
      192    20226
      193    20227            CALL: CALL GMA$GETPS (page number,pages) ALTRET (no memory);
      194    20228             ENVIRONMENT:
      195    20229                   Called on behalf of the monitor.
      196    20230             INPUT:
      197    20231                   PAGES - Size of request, in pages.
      198    20232             OUTPUT:
      199    20233                   PAGENO - The physical page number of the first page of the
      200    20234                            allocated segment.
      201    20235             DESCRIPTION:
      202    20236                   This routine is called to get a physical segment from the
      203    20237                   shufflable memory pool. The segment thus allocated will be
      204    20238                   marked as non-shufflable and owned by the monitor. The routine
      205    20239                   GMA$PS2USR must be called to mark the segment as shufflable
      206    20240                   and owned by some user. RETURNs if the request can be satisfied,
      207    20241                   else ALTRETURNs.
      208    20242        */
      209    20243    1   GMA$GETPS: ENTRY (PAGENO,PAGES) ALTRET;
      210    20244
      211    20245    1      FLG = '0'B;
      212    20246    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);
      213    20247    1      SIZE = PAGES;
      214    20248
      215    20249    1      IF G$USER.UHJITPP(G$JIT.USR#) ~= G$UHJIT.ASDT_MCL.UHJIT.BASE
      216    20250    1      THEN FLG.INT_LVL = '1'B;
      217    20251
      218    20252    1   TRY_AGAIN: ;
      219    20253    1      CALL LOCK_GATE;
      220    20254
      221    20255    1      IF GM_SHUF > GM_STEP
      222    20256    1      THEN I = GM_SHUF - GM_STEP;
      223    20257    1      ELSE I = 0;
      224    20258
      225    20259    1      IF SIZE > I
      226    20260    2      THEN DO;
      227    20261    2           IF FLG.INT_LVL OR FLG.SFILE_RLSD
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:8    
      228    20262    3           THEN DO;
      229    20263    3   NOGETPS:     ;
      230    20264    3                CALL UNLOCK_GATE;
      231    20265    3   NO_GETPS:    ;
      232    20266    3                ALTRETURN;
      233    20267    3                END;
      234    20268
      235    20269    2           CALL UNLOCK_GATE;
      236    20270    2           I = SIZE - I;
      237    20271    2           FLG.SFILE_RLSD = '1'B;
      238    20272    2           CALL GJS$REL_ALL(I) ALTRET(NO_GETPS);
      239    20273    2           GOTO TRY_AGAIN;
      240    20274    2           END;
      241    20275
      242    20276    1      GET_TYPE = 4;
      243    20277    1      CALL ALLOCATE
      244    20278    2      WHENALTRETURN DO;
      245    20279    2           IF FLG.INT_LVL THEN GOTO NO_GETPS;
      246    20280
      247    20281    2           FLG.SHUFFLED='1'B;
      248    20282    2           LIM = GM_SHUF_HI;
      249    20283    2           CALL SHUF_DOWN;
      250    20284
      251    20285    2           SIZE = PAGES;
      252    20286    2           CALL ALLOCATE ALTRET(NOGETPS);
      253    20287    2           END;
      254    20288
      255    20289    1      GM_XSHUF = GM_XSHUF + 1;
      256    20290    1      CURR$->GM$PPUT.OWNER = 0;
      257    20291    1      CURR$->GM$PPUT.C.SHUFFLABLE = '0'B;
      258    20292    1      CURR$->GM$PPUT.C.PP = '0'B;
      259    20293    1      CURR_LAST$ = ADDR(GM$PPUTA(CURR + CURR$->GM$PPUT.SIZE -1));
      260    20294    1      CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '0'B;
      261    20295    1      PAGENO = CURR;
      262    20296
      263    20297    1      GOTO FINISH_GETPS;
      264    20298
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:9    
      265    20299        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:10   
      266    20300
      267    20301        /*D* NAME: GMA$GET
      268    20302
      269    20303             CALL: CALL GMA$GET (segment_index,pages,
      270    20304                                 read,write,execute) ALTRET(limit_exceeded);
      271    20305             PARAMETERS:
      272    20306                   segment_index is an index to the segment descriptor in the
      273    20307                   user's ASDT for which memory is to be allocated.
      274    20308                   pages is the number of pages requested.
      275    20309                   read is the read protection Ring number.
      276    20310                   write is the write protection Ring number.
      277    20311                   execute is the execution protection ring number.
      278    20312             ENVIRONMENT:
      279    20313                   Called on behalf of the monitor.
      280    20314             DESCRIPTION:
      281    20315                   This routine is called to get or extend a segment from the
      282    20316                   shufflable memory pool on behalf of the current user.
      283    20317                   All user accounting, limit checking, etc., is performed by
      284    20318                   the calling routine.  If the requested segment is empty,
      285    20319                   the requested pages are allocated.  If the requested
      286    20320                   segment is not empty, an attempt is made to extend the
      287    20321                   the segment forward or backward the required amount.
      288    20322                   If the segment cannot be extended, yet another attempt is
      289    20323                   made to obtain a segment large enough to contain the entire
      290    20324                   segment.  If the segment is extended or a new one obtained,
      291    20325                   the data from the old segment is moved.
      292    20326
      293    20327                   If its not possible to obtain a segment in any of these
      294    20328                   ways then the dread SHUFFLE occurs which is supposed to
      295    20329                   crunch everything down in memory so we can get what we need.
      296    20330                   (Look for bugs here).
      297    20331        */
      298    20332
      299    20333        /*D* NAME: GMA$GETIO
      300    20334             DESCRIPTION:
      301    20335                   Same as GMA$GET, except that memory is allocated from the
      302    20336                   non-shufflable memory pool.
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:11   
      303    20337        */
      304    20338
      305    20339
      306    20340    1   GMA$GET: ENTRY (PAGENO,PAGES,RP,WP,EP) ALTRET;
      307    20341
      308    20342    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);
      309    20343    1      GOTO GET0;
      310    20344
      311    20345
      312    20346    1   GMA$GETIO: ENTRY (PAGENO,PAGES,RP,WP,EP) ALTRET;
      313    20347
      314    20348    1      CURR_MEAT$ = ADDR (GM_MEAT_NSHF);
      315    20349    1   GET0:
      316    20350    1      SIZE = PAGES;
      317    20351    1      IF SIZE = 0 THEN ALTRETURN;
      318    20352
      319    20353    1      FLG = '0'B;
      320    20354    1      REL_SHF_SZ = 0;
      321    20355
      322    20356    1      CALL LOCK_GATE;
      323    20357    1      G$SEGDESC = G$ASDT_USR$->G$SEGDESCA (SEGX);
      324    20358
      325    20359        /* Allocate initial segment.
      326    20360        */
      327    20361    1      IF NOT G$SEGDESC.V
      328    20362    2      THEN DO;
      329    20363    2           CALL ALLOCATE
      330    20364    3           WHENALTRETURN DO;
      331    20365    3                IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)
      332    20366    4                THEN DO;
      333    20367    4                     FLG.SHUFFLED='1'B;
      334    20368    4                     LIM = GM_SHUF_HI;
      335    20369    4                     CALL SHUF_DOWN;
      336    20370    4                     SIZE = PAGES;
      337    20371    4                     CALL ALLOCATE
      338    20372    5                     WHENALTRETURN DO; CALL SHFL_FAILED; END;
      339    20373    4                     END;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:12   
      340    20374    4                ELSE DO;
      341    20375    4                     CURR_MEAT$ = ADDR(GM_MEAT_SHUF);
      342    20376    4   GET_PREV_4NSHF:   ;
      343    20377    4                     CURR$=ADDR(GM$PPUTA(GM_SHUF_HI));
      344    20378    4                     IF CURR$->GM$PPUT.C.INUSE ~= '0'B OR
      345    20379    4                       CURR$->GM$PPUT.SIZE < PAGES
      346    20380    5                     THEN DO;
      347    20381    5                          IF FLG.SHUFFLED THEN CALL SHFL_FAILED;
      348    20382    5                          FLG.SHUFFLED = '1'B;
      349    20383    5                          LIM = GM_SHUF_HI;
      350    20384    5                          CALL SHUF_DOWN;
      351    20385    5                          GOTO GET_PREV_4NSHF;
      352    20386    5                          END/*do if last shuf extent is not free*/;
      353    20387
      354    20388    4                     SIZE = CURR$->GM$PPUT.SIZE;
      355    20389
      356    20390    4                     CURR = (GM_SHUF_HI+1) - SIZE;
      357    20391    4                     CURR$ = ADDR(GM$PPUTA(CURR));
      358    20392
      359    20393    4                     IF SIZE ~= PAGES
      360    20394    5                     THEN DO;
      361    20395    5                          IF FLG.SPLIT_SHUF_SEG THEN CALL SHFL_FAILED;
      362    20396    5                          FLG.SPLIT_SHUF_SEG = '1'B;
      363    20397    5                          SIZE = SIZE - PAGES;
      364    20398    5                          REL_SHF_SZ = SIZE;
      365    20399    5                          REL_SHF_PG = CURR;
      366    20400    5                          CALL GETIT;      /*get first part of the segment*/
      367    20401    5                          GOTO GET_PREV_4NSHF;
      368    20402    5                          END;
      369    20403
      370    20404    4                     CALL GETIT;      /*get it as shuf to keep meat tables ok*/
      371    20405
      372    20406    4                     GM_SHUF_HI = GM_SHUF_HI - SIZE;
      373    20407    4                     GM_NSHF_CURR = GM_NSHF_CURR + SIZE;
      374    20408
      375    20409    4                     CURR_MEAT$ = ADDR(GM_MEAT_NSHF);
      376    20410    4                     END/*do if nshuf*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:13   
      377    20411    3                END/*altret from initial allocate*/;
      378    20412
      379    20413
      380    20414    2           CALL GUD$ASD (G$ASDT_MCL$->USEGDESC);
      381    20415    2           G$SEGDESC.V = '1'B;
      382    20416    2           G$SEGDESC.BASE = CURR;
      383    20417    2           G$SEGDESC.SIZE = SIZE - 1;
      384    20418    2           G$SEGDESC.RP=RP;
      385    20419    2           G$SEGDESC.WP=WP;
      386    20420    2           G$SEGDESC.EP=EP;
      387    20421    2           CURR$ = ADDR(GM$PPUTA(CURR));
      388    20422    2           CURR$->GM$PPUT.OWNER=G$JIT.USR#;
      389    20423    2           GET_TYPE = 0;
      390    20424
      391    20425    2           END/*allocate initial segment*/;
      392    20426        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:14   
      393    20427        /* Extend currently allocated segment.
      394    20428        */
      395    20429    2      ELSE DO;
      396    20430    2           IF CURR_MEAT$ = ADDR (GM_MEAT_NSHF)
      397    20431    2           THEN CALL MMSCREECH;            /* Can't extend non-shufflable memory */
      398    20432
      399    20433    2   RE_XTND:
      400    20434    2           CURR = G$SEGDESC.BASE;
      401    20435    2           NEXT = CURR + G$SEGDESC.SIZE +1;
      402    20436    2           NEXT$=ADDR(GM$PPUTA(NEXT));
      403    20437
      404    20438    2           IF NEXT$->GM$PPUT.C.INUSE = '0'B AND
      405    20439    2             NEXT$->GM$PPUT.SIZE >= SIZE AND
      406    20440    2             NEXT <= GM_SHUF_HI
      407    20441    3           THEN DO;
      408    20442    3                CURR=NEXT;
      409    20443    3                SIZE=PAGES;
      410    20444    3                CALL GETIT;
      411    20445
      412    20446                                                /*now combine them into one extent    */
      413    20447    3                CURR=G$SEGDESC.BASE;
      414    20448    3                L=G$SEGDESC.SIZE+SIZE;
      415    20449    3                G$SEGDESC.SIZE=L;
      416    20450    3                CURR$ = ADDR(GM$PPUTA(CURR));
      417    20451    3                PPUT$ = ADDR(GM$PPUTA(CURR+L));
      418    20452    3                L=L+1;
      419    20453    3                CURR$->GM$PPUT.SIZE = L;
      420    20454    3                PPUT$->GM$PPUT.SIZE = L;
      421    20455    3                CURR$->GM$PPUT.C.LASTP='0'B;
      422    20456    3                PPUT$->GM$PPUT.C.FIRSTP='0'B;
      423    20457    3                GET_TYPE = 1;
      424    20458    3                END/*extend current segment*/;
      425    20459
      426    20460        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:15   
      427    20461
      428    20462        /*      Check if previous segment will do.
      429    20463        */
      430    20464    3           ELSE DO;
      431    20465    3                PREV=CURR-1;
      432    20466    3                PREV$=ADDR(GM$PPUTA(CURR-GM$PPUTA.SIZE(PREV)));
      433    20467    3                IF PREV$->GM$PPUT.C.INUSE = '0'B AND
      434    20468    3                  PREV$->GM$PPUT.SIZE >= SIZE
      435    20469    4                THEN DO;
      436    20470    4                     SIZE=PREV$->GM$PPUT.SIZE;
      437    20471    4                     CURR=CURR-SIZE;
      438    20472    4                     CALL GETIT;           /* get the entire segment             */
      439    20473
      440    20474    4                     GM$PPUTA.SIZE(CURR)=G$SEGDESC.SIZE+1;
      441    20475    4                     L=GM$PPUTA.SIZE(CURR);
      442    20476    4                     CALL MAP (CURR);
      443    20477    4                     CALL GMV$MOVESEG (L,G$SEGDESC);
      444    20478
      445    20479    4                     SIZE=G$SEGDESC.SIZE+1 + PAGES;
      446    20480    4                     CURR_LAST=NEXT-1;
      447    20481    4                     NEXT=G$SEGDESC.BASE;
      448    20482    4                     CALL ADJ_PP;
      449    20483                                                /*fix pput for the extent we moved to*/
      450    20484    4                     GM$PPUTA(CURR)=GM$PPUTA(PREV+1);
      451    20485    4                     CURR$=ADDR(GM$PPUTA(CURR));
      452    20486    4                     CURR$->GM$PPUT.C.LASTP='0'B;
      453    20487    4                     PREV=CURR+SIZE-1;
      454    20488    4                     GM$PPUTA(PREV)=GM$PPUTA(CURR_LAST);
      455    20489    4                     CURR$=ADDR(GM$PPUTA(PREV));
      456    20490    4                     CURR$->GM$PPUT.C.FIRSTP='0'B;
      457    20491    4                     GM$PPUTA.SIZE(CURR)=SIZE;
      458    20492    4                     GM$PPUTA.SIZE(PREV)=SIZE;
      459    20493    4                     G$SEGDESC.BASE=CURR;
      460    20494    4                     G$SEGDESC.SIZE=SIZE-1;
      461    20495                                 /*fix pput for unallocated pgs at end of the extent*/
      462    20496    4                     CURR=PREV+1;
      463    20497    4                     CURR$=ADDR(GM$PPUTA(CURR));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:16   
      464    20498    4                     PPUT$=ADDR(GM$PPUTA(CURR_LAST));
      465    20499    4                     IF CURR_LAST-CURR+1 ~= 0
      466    20500    5                     THEN DO;
      467    20501    5                          GM$PPUTA.SIZE(CURR)=CURR_LAST-CURR+1;
      468    20502    5                          GM$PPUTA.SIZE(CURR_LAST)=CURR_LAST-CURR+1;
      469    20503    5                          CURR$->GM$PPUT.C.LASTP = '0'B;
      470    20504    5                          PPUT$->GM$PPUT.C.FIRSTP = '0'B;
      471    20505    5                          CURR$->GM$PPUT.C.FIRSTP = '1'B;
      472    20506    5                          PPUT$->GM$PPUT.C.LASTP = '1'B;
      473    20507    5                          CALL DEALLOCATE; /* return the extra pages             */
      474    20508    5                          END;
      475    20509    4                     GET_TYPE = 2;
      476    20510    4                     END/*use prev segment*/;
      477    20511
      478    20512        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:17   
      479    20513        /*      Move to a segment large enough
      480    20514        */
      481    20515    4                ELSE DO;
      482    20516    4                     CURR = G$SEGDESC.BASE;
      483    20517    4                     SIZE=GM$PPUTA.SIZE(CURR)+SIZE;
      484    20518
      485    20519    4                     CALL ALLOCATE
      486    20520    5                     WHENALTRETURN DO;
      487    20521    5                          IF FLG.SHUFFLED THEN CALL SHFL_FAILED;
      488    20522
      489    20523    5                          FLG.SHUFFLED = '1'B;
      490    20524    5                          LIM = G$SEGDESC.BASE+G$SEGDESC.SIZE;
      491    20525    5                          CALL SHUF_DOWN;
      492    20526    5                          CALL CHKPPT;
      493    20527    5                          CALL SHUF_UP;
      494    20528    5                          CALL GUD$ASD (G$ASDT_MCL$->USEGDESC);
      495    20529    5                          SIZE = PAGES;
      496    20530    5                          G$SEGDESC = G$ASDT_USR$->G$SEGDESCA(SEGX);
      497    20531    5                          FLG.RE_EXTENDED = '1'B;
      498    20532    5                          GOTO RE_XTND;
      499    20533    5                          END;
      500    20534
      501    20535    4                     CALL MAP(CURR);
      502    20536    4                     L=G$SEGDESC.SIZE+1;
      503    20537    4                     CALL GMV$MOVESEG (L,G$SEGDESC);
      504    20538    4                     NEXT=G$SEGDESC.BASE;
      505    20539    4                     CALL ADJ_PP;
      506    20540    4                     NEXT=CURR;
      507    20541    4                     CURR=G$SEGDESC.BASE;
      508    20542    4                     CURR$=ADDR(GM$PPUTA(CURR));
      509    20543    4                     NEXT$ = ADDR(GM$PPUTA(NEXT));
      510    20544    4                     NEXT$->GM$PPUT.OWNER=CURR$->GM$PPUT.OWNER;
      511    20545    4                     G$SEGDESC.BASE = NEXT;
      512    20546    4                     G$SEGDESC.SIZE=SIZE-1;
      513    20547
      514    20548    4                     CALL DEALLOCATE;      /* for the old segment                */
      515    20549    4                     CURR=NEXT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:18   
      516    20550
      517    20551    4                     GET_TYPE = 3;
      518    20552    4                     END/*move to seg lrg enough*/;
      519    20553    3                END;
      520    20554    2           END;
      521    20555
      522    20556        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:19   
      523    20557        /*      Finish up the get logic
      524    20558        */
      525    20559    1      CURR$ = ADDR(GM$PPUTA(G$SEGDESC.BASE));
      526    20560    1      SIZE = G$SEGDESC.SIZE;
      527    20561    1      CURR_LAST$ = PINCRW (CURR$, SIZE*SIZEW (GM$PPUT));
      528    20562
      529    20563    1      IF EP = %G_R_USR#
      530    20564    2      THEN DO;
      531    20565    2           CURR$->GM$PPUT.C.PP = '1'B;
      532    20566    2           CURR_LAST$->GM$PPUT.C.PP = '1'B;
      533    20567    2           END;
      534    20568    2      ELSE DO;
      535    20569    2           CURR$->GM$PPUT.C.PP = '0'B;
      536    20570    2           CURR_LAST$->GM$PPUT.C.PP = '0'B;
      537    20571    2           END;
      538    20572
      539    20573    1      IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)
      540    20574    2      THEN DO;
      541    20575    2           CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;
      542    20576    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;
      543    20577    2           END;
      544    20578    2      ELSE DO;
      545    20579    2           CURR$->GM$PPUT.C.SHUFFLABLE = '0'B;
      546    20580    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '0'B;
      547    20581    2           END;
      548    20582
      549    20583    1      CALL SET_ASDTS;
      550    20584
      551    20585    1      IF REL_SHF_SZ ~= 0
      552    20586    2      THEN DO;
      553    20587    2           CURR_MEAT$ = ADDR(GM_MEAT_SHUF);
      554    20588    2           CURR = REL_SHF_PG;
      555    20589    2           CURR$ = ADDR(GM$PPUTA(CURR));
      556    20590    2           CALL DEALLOCATE;                /*return first part of the segment*/
      557    20591    2           END;
      558    20592
      559    20593    1   FINISH_GETPS: ;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:20   
      560    20594    1      IF GM_SHUF < GM_SHUF_MIN
      561    20595    1      THEN GM_SHUF_MIN = GM_SHUF;
      562    20596
      563    20597    1      IF GM_NSHF_CURR > GM_NSHF_PEAK
      564    20598    1      THEN GM_NSHF_PEAK = GM_NSHF_CURR;
      565    20599
      566    20600    1   CHKPPT_EXIT:
      567    20601    1      CALL UNLOCK_GATE;
      568    20602    1      CALL LOCK_GATE;
      569    20603    1      CALL CHKPPT;
      570    20604
      571    20605    1      CALL UNLOCK_GATE;
      572    20606    1      RETURN;
      573    20607
      574    20608        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:21   
      575    20609        /*I*   NAME: SHFL_FAILED
      576    20610              PURPOSE:
      577    20611              Provide a common routine to screech from MM for shuffle failures.
      578    20612        */
      579    20613
      580    20614    1   SHFL_FAILED: PROC;
      581    20615    2      CALL SCREECH (SHFLERR);
      582    20616    2   END;
      583    20617
      584    20618        /*S*     SCREECH_CODE: GMA-S$MM49
      585    20619                 TYPE: SCREECH
      586    20620                 MESSAGE: Memory shuffle failed to provide promised space
      587    20621                                                                           */
      588    20622
      589    20623
      590    20624        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:22   
      591    20625        /*D* NAME: GMA$LOCATE
      592    20626
      593    20627             CALL: CALL GMA$LOCATE (size) ALTRET(not_found);
      594    20628
      595    20629             INPUT:
      596    20630                   PAGENO - Size of segment, in pages.
      597    20631             DESCRIPTION:
      598    20632                   This routine calls ALLOCATE to determine if there are
      599    20633                   currently any unallocated segments in the I/O memory meat
      600    20634                   table.  This can happen only when there is fragmented
      601    20635                   nshuf memory.  The alternate return is taken in there
      602    20636                   aren't any, or if there isn't one as large as the requested
      603    20637                   size.
      604    20638        */
      605    20639    1   GMA$LOCATE: ENTRY (PAGENO) ALTRET;
      606    20640
      607    20641    1      CURR_MEAT$ = ADDR(GM_MEAT_NSHF);
      608    20642    1      SIZE = PAGENO;
      609    20643
      610    20644    1      CALL LOCATE
      611    20645    2      WHENALTRETURN DO; ALTRETURN; END;
      612    20646
      613    20647    1      RETURN;
      614    20648
      615    20649        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:23   
      616    20650        /*I* NAME: ALLOCATE
      617    20651             PURPOSE:
      618    20652                   To allocate a free extent from available physical memory.
      619    20653
      620    20654             CALL: CALL ALLOCATE ALTRET (no can do);
      621    20655
      622    20656             ENVIRONMENT:
      623    20657                   GM_MEATLOCK gate is locked.
      624    20658             INPUT:
      625    20659                   CURR_MEAT$ - Pointer to appropriate MEAT.
      626    20660                   SIZE - Number of pages to allocate.
      627    20661             OUTPUT:
      628    20662                   CURR - Page number of allocated segment.
      629    20663                   CURR$ - Pointer to PPUT entry for CURR.
      630    20664             SCRATCH:
      631    20665                   None.
      632    20666             DESCRIPTION:
      633    20667                   The MEAT is searched for a free extent. The search begins at the
      634    20668                   log-base-2 of the specified size MEAT list entry. The first free
      635    20669                   extent that is greater than or equal to the specified size is
      636    20670                   unlinked from its MEAT list. If the extent is larger than the
      637    20671                   specified size, then the first n pages of the specified size are
      638    20672                   allocated, the remainder is returned to the head of the appropriate
      639    20673                   MEAT list.
      640    20674        */
      641    20675    1   ALLOCATE: PROC ALTRET;
      642    20676
      643    20677    2   DCL IX UBIN WORD;
      644    20678    2   DCL P$ PTR;
      645    20679
      646    20680    2      FLG.LOCATE_IO_FRAGMENT = '0'B;
      647    20681    2      GOTO ALLOCATE_CMN;
      648    20682
      649    20683    2   LOCATE: ENTRY ALTRET;
      650    20684    2      FLG.LOCATE_IO_FRAGMENT = '1'B;
      651    20685
      652    20686    2   ALLOCATE_CMN: ;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:24   
      653    20687    2      CALL LOGBASE2;                       /* Where to begin searching           */
      654    20688    3      DO IX = LOG TO %GM_MEATSIZE;
      655    20689    3           CURR = MEAT$->GM$MEAT.HEAD;
      656    20690    3           BLINK = 0;
      657    20691    4           DO WHILE (CURR ~= 0);
      658    20692    4                CALL MAP (CURR);
      659    20693    4                FLINK = GM$EXTENT.FLINK;
      660    20694    4                CURR$ = ADDR (GM$PPUTA (CURR));
      661    20695
      662    20696    4                IF CURR$->GM$PPUT.SIZE >= SIZE
      663    20697    5                THEN DO;
      664    20698    5                     IF FLG.LOCATE_IO_FRAGMENT THEN RETURN;
      665    20699
      666    20700    5                     CALL GETIT_MAPPED;
      667    20701    5                     RETURN;
      668    20702    5                     END;
      669    20703
      670    20704    4                BLINK = CURR;
      671    20705    4                CURR = FLINK;
      672    20706    4                END;
      673    20707    3           MEAT$ = PINCRW (MEAT$,SIZEW (GM$MEAT));
      674    20708    3           END;
      675    20709
      676    20710        /* Cannot find an extent of the requested size */
      677    20711
      678    20712    2      ALTRETURN;
      679    20713
      680    20714    2   END ALLOCATE;
      681    20715
      682    20716
      683    20717        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:25   
      684    20718        /*I* NAME: GETIT
      685    20719
      686    20720             PURPOSE: To perform the actual 'get' of a requested segment.
      687    20721
      688    20722             CALL: CALL GETIT;
      689    20723
      690    20724             INPUT:
      691    20725                   CURR - page number of extent to allocate
      692    20726                   SIZE - number of pages to be allocated from the extent
      693    20727
      694    20728             DESCRIPTION:
      695    20729                   The segment extent is unlinked from the Meat tables.
      696    20730
      697    20731                   The appropriate PPUT parameters are set to show its
      698    20732                   size and usage.
      699    20733
      700    20734                   If the segment does not completly fill the extent, the
      701    20735                   unused portion is placed on the appropriate Meat Table.
      702    20736        */
      703    20737
      704    20738    1   GETIT: PROC;
      705    20739
      706    20740    2   DCL CURRENT UBIN WORD;
      707    20741    2   DCL CURR_LAST UBIN WORD;
      708    20742    2   DCL LAST UBIN WORD;
      709    20743    2   DCL LEFT UBIN WORD;
      710    20744    2   DCL P$ PTR;
      711    20745    2   DCL SIZE_A UBIN;
      712    20746
      713    20747    2      CALL UNLINK;
      714    20748    2      GOTO GETIT_COMM;
      715    20749
      716    20750    2   GETIT_MAPPED: ENTRY;
      717    20751    2      CALL UNLINK_MAPPED;
      718    20752
      719    20753    2   GETIT_COMM: ;
      720    20754    2      SIZE_A=SIZE;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:26   
      721    20755    2      CURR_LAST = CURR + SIZE - 1;
      722    20756    2      PPUT$ = ADDR (GM$PPUTA (CURR_LAST));
      723    20757    2      LEFT = CURR$->GM$PPUT.SIZE - SIZE;
      724    20758    2      CURR$->GM$PPUT.C.INUSE = '1'B;
      725    20759    2      PPUT$->GM$PPUT.C.INUSE = '1'B;
      726    20760    2      CURR$->GM$PPUT.SIZE = SIZE;
      727    20761    2      PPUT$->GM$PPUT.SIZE = SIZE;
      728    20762    2      CURR$->GM$PPUT.C.LASTP = '0'B;
      729    20763    2      PPUT$->GM$PPUT.C.FIRSTP = '0'B;
      730    20764    2      CURR$->GM$PPUT.C.FIRSTP = '1'B;
      731    20765    2      PPUT$->GM$PPUT.C.LASTP = '1'B;
      732    20766
      733    20767                                                /* Put remainder on meat list         */
      734    20768    2      IF LEFT > 0
      735    20769    3      THEN DO;
      736    20770    3           SIZE = LEFT;
      737    20771    3           CURRENT = CURR;
      738    20772    3           CURR = CURR_LAST + 1;
      739    20773    3           P$ = ADDR (GM$PPUTA (CURR));
      740    20774    3           PPUT$ = ADDR (GM$PPUTA (CURR + SIZE - 1));
      741    20775    3           P$->GM$PPUT.C.LASTP = '0'B;
      742    20776    3           PPUT$->GM$PPUT.C.FIRSTP = '0'B;
      743    20777    3           P$->GM$PPUT.C.FIRSTP = '1'B;
      744    20778    3           PPUT$->GM$PPUT.C.LASTP = '1'B;
      745    20779    3           P$->GM$PPUT.C.INUSE = '0'B;
      746    20780    3           PPUT$->GM$PPUT.C.INUSE = '0'B;
      747    20781    3           P$->GM$PPUT.SIZE = SIZE;
      748    20782    3           PPUT$->GM$PPUT.SIZE = SIZE;
      749    20783
      750    20784    3           IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)
      751    20785    4           THEN DO;
      752    20786    4                P$->GM$PPUT.C.SHUFFLABLE = '1'B;
      753    20787    4                PPUT$->GM$PPUT.C.SHUFFLABLE = '1'B;
      754    20788    4                END;
      755    20789    4           ELSE DO;
      756    20790    4                P$->GM$PPUT.C.SHUFFLABLE = '0'B;
      757    20791    4                PPUT$->GM$PPUT.C.SHUFFLABLE = '0'B;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:27   
      758    20792    4                END;
      759    20793    3           CALL LOGBASE2;
      760    20794    3           CALL LINK2HEAD;
      761    20795    3           CURR = CURRENT;
      762    20796    3           SIZE = SIZE_A;
      763    20797    3           END;
      764    20798
      765    20799    2      IF CURR_MEAT$ = ADDR (GM_MEAT_SHUF)
      766    20800    3      THEN DO;
      767    20801    3           GM_SHUF = GM_SHUF - SIZE;
      768    20802
      769    20803    3           IF G$JIT.MODE = %G_M_HANDLER#
      770    20804    4           THEN DO;
      771    20805    4                GM_ASHUF = GM_ASHUF - SIZE;
      772    20806    4                GM_HSHUF = GM_HSHUF + SIZE;
      773    20807    4                END;
      774    20808    3           END;
      775    20809
      776    20810    3      ELSE DO;
      777    20811    3           GM_NSHF_CURR = GM_NSHF_CURR + SIZE;
      778    20812
      779    20813    3           GM_NSHF = GM_NSHF - SIZE;
      780    20814    3           END;
      781    20815
      782    20816    2      RETURN;
      783    20817
      784    20818    2   END GETIT;
      785    20819
      786    20820        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:28   
      787    20821        /*I*   NAME: SHUF_DOWN
      788    20822              PURPOSE:
      789    20823                    To compact segments downward in memory.
      790    20824
      791    20825             CALL: CALL SHUF_DOWN;
      792    20826
      793    20827              INPUT:
      794    20828                    LIM is the page number of the upper limit of
      795    20829                    memory to shuffle.
      796    20830              DESCRIPTION:
      797    20831                    Beginning at GM_MEM_LOW, each segment is inspected.
      798    20832                    If it is in use, it is moved downward in memory to be
      799    20833                    adjacent to the previous inuse segment so as to collect
      800    20834                    all unused memory into one extent.  The process stops
      801    20835                    at the specified upper limit and the unused extent is
      802    20836                    added to the Meat Tables.
      803    20837                    Note that the Meat Tables are initialized to zero, no
      804    20838                    available extents, at the beginning of this procedure.
      805    20839                    If the upper limit is not GM_SHUF_HI there may be some
      806    20840                    available extents lost.  A call to SHUF_UP will find
      807    20841                    them, as SHUF_UP does not initialize the Meat Tables.
      808    20842                                                                           */
      809    20843
      810    20844    1   SHUF_DOWN: PROC;
      811    20845
      812    20846        %G$SEGDESC (FPTN=DESC,STCLASS=" ");
      813    20868
      814    20869    2      GM_SHUF_COUNT = GM_SHUF_COUNT +1;
      815    20870    2      CALL GHI$UTS(SHUF_START);
      816    20871
      817    20872    3      DO I = 0 TO 15;
      818    20873    3           GM_MEAT_SHUF(I) = '0'B;
      819    20874    3           END;
      820    20875
      821    20876    2      NEXT=GM_MEM_LOW;
      822    20877    3      DO WHILE (NEXT <= LIM);
      823    20878    3           NEXT$=ADDR(GM$PPUTA(NEXT));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:29   
      824    20879
      825    20880    3           IF NEXT$->GM$PPUT.C.INUSE
      826    20881    3           THEN NEXT=NEXT+NEXT$->GM$PPUT.SIZE;
      827    20882
      828    20883    4           ELSE DO;
      829    20884    4                CURR=NEXT;
      830    20885    5                DO WHILE ( NEXT<=LIM  AND  NEXT$->GM$PPUT.C.SHUFFLABLE );
      831    20886    5                     IF NEXT$->GM$PPUT.C.INUSE
      832    20887    6                     THEN DO;
      833    20888    6                          G$UHJIT.ASDT_MCL.WINDOW1=SHUF_DSCR;
      834    20889    6                          G$UHJIT.ASDT_MCL.WINDOW1.BASE=CURR;
      835    20890    6                          DESC=SHUF_DSCR;
      836    20891    6                          DESC.BASE=NEXT;
      837    20892    6                          CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);
      838    20893    6                          L=NEXT$->GM$PPUT.SIZE;
      839    20894    6                          CALL GMV$MOVESEG (L,DESC);
      840    20895    6                          GM_SHUF_SEGS# = GM_SHUF_SEGS# +1;
      841    20896    6                          CALL ADJ_PP;
      842    20897    6                          GM$PPUTA(CURR)=NEXT$->GM$PPUT;
      843    20898    6                          NEXT=NEXT+GM$PPUTA.SIZE(CURR);
      844    20899    6                          CURR=CURR+GM$PPUTA.SIZE(CURR);
      845    20900    6                          GM$PPUTA(CURR-1)=GM$PPUTA(NEXT-1);
      846    20901    6                          END;
      847    20902
      848    20903    5                     ELSE NEXT=NEXT+NEXT$->GM$PPUT.SIZE;
      849    20904
      850    20905    5                     NEXT$=ADDR(GM$PPUTA(NEXT));
      851    20906    5                     END/*do while*/;
      852    20907
      853    20908    4                SIZE=NEXT-CURR;
      854    20909
      855    20910    4                IF SIZE ~= 0
      856    20911    5                THEN DO;
      857    20912    5                     IF NEXT< LIM THEN CALL MMSCREECH;
      858    20913
      859    20914    5                     NEXT$=ADDR(GM$PPUTA(NEXT-1));
      860    20915    5                     CURR$=ADDR(GM$PPUTA(CURR));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:30   
      861    20916    5                     NEXT$->GM$PPUT.C.FIRSTP='0'B;
      862    20917    5                     CURR$->GM$PPUT.C.LASTP='0'B;
      863    20918    5                     NEXT$->GM$PPUT.C.LASTP='1'B;
      864    20919    5                     CURR$->GM$PPUT.C.FIRSTP='1'B;
      865    20920    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;
      866    20921    5                     NEXT$->GM$PPUT.C.SHUFFLABLE='1'B;
      867    20922    5                     CURR$->GM$PPUT.SIZE = SIZE;
      868    20923    5                     NEXT$->GM$PPUT.SIZE = SIZE;
      869    20924    5                     CALL DEALLOCATE_SHUF;
      870    20925    5                     END/*do if size >0*/;
      871    20926                            /*  If right hand compaction occured, up LIM for SHUF_UP  */
      872    20927    4                IF PREV > LIM
      873    20928    5                THEN DO;
      874    20929    5                     LIM=PREV;
      875    20930    5                     GOTO STOP_SHUF_TIME;
      876    20931    5                     END;
      877    20932    4                END/*do if extent not in use*/;
      878    20933    3           END/*do while next<=lim*/;
      879    20934
      880    20935    2   STOP_SHUF_TIME:
      881    20936    2      CALL GHI$UTS(SHUF_STOP);
      882    20937    2      GM_SHUF_TIME = GM_SHUF_TIME + (SHUF_STOP - SHUF_START);
      883    20938
      884    20939    2      RETURN;
      885    20940
      886    20941    2   END SHUF_DOWN;
      887    20942
      888    20943        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:31   
      889    20944        /*I*   NAME: SHUF_UP
      890    20945              PURPOSE:
      891    20946                    To compact segments upward in memory.
      892    20947
      893    20948             CALL: CALL SHUF_UP ;
      894    20949
      895    20950              INPUT:
      896    20951                    LIM is the page number of the lowest segment
      897    20952                    to be shuffled.
      898    20953                    This procedure uses several auto variables defined at
      899    20954                    higher levels, as do some of the routines it calls.
      900    20955              DESCRIPTION:
      901    20956                    Beginning at GM_SHUF_HI, each segment is inspected.
      902    20957                    If it is in use, it is moved upward in memory to be
      903    20958                    adjacent to the previous inuse segment so as to collect
      904    20959                    all unused memory into one extent.  The process stops
      905    20960                    at the specified lower limit and the unused extent is
      906    20961                    added to the Meat Tables.
      907    20962                                                                           */
      908    20963
      909    20964    1   SHUF_UP: PROC;
      910    20965
      911    20966        %G$SEGDESC (FPTN=DESC,STCLASS=" ");
      912    20988    2   DCL SOURCE_SIZE UBIN;
      913    20989    2   DCL DEST_SIZE UBIN;
      914    20990    2   DCL IL UBIN;
      915    20991
      916    20992    2      CALL GHI$UTS(SHUF_START);
      917    20993    2      NEXT=GM_SHUF_HI;
      918    20994    3      DO WHILE (NEXT > LIM);
      919    20995    3           NEXT$=ADDR(GM$PPUTA(NEXT));
      920    20996
      921    20997    3           IF NEXT$->GM$PPUT.SIZE=0 THEN CALL MMSCREECH;
      922    20998
      923    20999    3           IF NEXT$->GM$PPUT.C.INUSE
      924    21000    3           THEN NEXT=NEXT-NEXT$->GM$PPUT.SIZE;
      925    21001    4           ELSE DO/*if extent not in use*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:32   
      926    21002    4                CURR=NEXT;
      927    21003    5                DO WHILE (NEXT>LIM  AND  NEXT$->GM$PPUT.C.SHUFFLABLE);
      928    21004    5                     IF NEXT$->GM$PPUT.C.INUSE
      929    21005    6                     THEN DO;
      930    21006    6                          IF NEXT=CURR THEN CALL MMSCREECH;
      931    21007
      932    21008    6                          SOURCE_SIZE=NEXT$->GM$PPUT.SIZE;
      933    21009    6                          GM$PPUTA(CURR)=NEXT$->GM$PPUT;
      934    21010    6                          G$UHJIT.ASDT_MCL.BPAR2=SHUF_DSCR;
      935    21011    6                          G$UHJIT.ASDT_MCL.BPAR2.BASE=NEXT;/*source*/
      936    21012    6                          G$UHJIT.ASDT_MCL.WINDOW1=SHUF_DSCR;
      937    21013    6                          G$UHJIT.ASDT_MCL.WINDOW1.BASE=CURR;/*destination*/
      938    21014    6                          CALL GMV$MOVEUP (SOURCE_SIZE);
      939    21015    6                          GM_SHUF_SEGS# = GM_SHUF_SEGS# +1;
      940    21016
      941    21017    6                          CURR=G$UHJIT.ASDT_MCL.WINDOW1.BASE;/*1st dest pg ->CURR*/
      942    21018    6                          NEXT=G$UHJIT.ASDT_MCL.BPAR2.BASE;/*1st source pg->NEXT*/
      943    21019    6                          CALL ADJ_PP;
      944    21020
      945    21021    6                          GM$PPUTA(CURR)=GM$PPUTA(NEXT);
      946    21022    6                          NEXT=NEXT-1;
      947    21023    6                          CURR=CURR-1;
      948    21024    6                          END;
      949    21025
      950    21026    6                     ELSE DO;
      951    21027    6                          IF NEXT$->GM$PPUT.SIZE=0 THEN CALL MMSCREECH;
      952    21028
      953    21029    6                          NEXT=NEXT-NEXT$->GM$PPUT.SIZE;
      954    21030    6                          END;
      955    21031
      956    21032    5                     NEXT$=ADDR(GM$PPUTA(NEXT));
      957    21033    5                     END;
      958    21034
      959    21035    4                SIZE=CURR-NEXT;
      960    21036
      961    21037    4                IF SIZE ~= 0
      962    21038    5                THEN DO;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:33   
      963    21039    5                     NEXT$=ADDR(GM$PPUTA(CURR)); /* Last page                    */
      964    21040    5                     CURR$=ADDR(GM$PPUTA(NEXT+1)); /* First page                 */
      965    21041    5                     CURR=NEXT+1;
      966    21042    5                     CURR$->GM$PPUT.SIZE=SIZE;
      967    21043    5                     NEXT$->GM$PPUT.SIZE=SIZE;
      968    21044    5                     NEXT$->GM$PPUT.C.FIRSTP='0'B;
      969    21045    5                     CURR$->GM$PPUT.C.LASTP='0'B;
      970    21046    5                     NEXT$->GM$PPUT.C.LASTP='1'B;
      971    21047    5                     CURR$->GM$PPUT.C.FIRSTP='1'B;
      972    21048    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;
      973    21049    5                     NEXT$->GM$PPUT.C.SHUFFLABLE='1'B;
      974    21050    5                     CALL DEALLOCATE_SHUF;
      975    21051    5                     END/*do if size >0*/;
      976    21052    4                END;
      977    21053    3           END;
      978    21054
      979    21055    2      CALL GHI$UTS(SHUF_STOP);
      980    21056    2      GM_SHUF_TIME = GM_SHUF_TIME + (SHUF_STOP - SHUF_START);
      981    21057
      982    21058    2      RETURN;
      983    21059    2   END SHUF_UP;
      984    21060
      985    21061        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:34   
      986    21062        /*I* NAME: ADJ_PP
      987    21063             PURPOSE:
      988    21064                   To adjust physical page numbers after moving a segment.
      989    21065
      990    21066             CALL: CALL ADJ_PP
      991    21067             INPUT:
      992    21068                   NEXT is the number of the old source page.
      993    21069                   CURR is the number of the new destination page.
      994    21070                   ASDT_MCL.WINDOW contains a descriptor with the base set to CURR
      995    21071             DESCRIPTION:
      996    21072                   All references to the old page in the IOPs, Sfile Table, and
      997    21073                   the HMI table are updated with the new page number.
      998    21074                   If the segment is a UHJIT the user table entry is adjusted.
      999    21075                   If it is the current users UHJIT, the ASDT is adjusted and
     1000    21076                   remapped.
     1001    21077                   Where ever the source page appears in the ASDTs of the
     1002    21078                   owner of the segment, it is changed to the destination
     1003    21079                   page.
     1004    21080        */
     1005    21081    1   ADJ_PP: PROC;
     1006    21082
     1007    21083    2   DCL USR UBIN;
     1008    21084    2   DCL NXTUSR UBIN;
     1009    21085    2   DCL I UBIN;
     1010    21086    2   DCL ENDPAGE UBIN;
     1011    21087    2   DCL USE_COUNT UBIN;
     1012    21088
     1013    21089    2      U$ = ADDR(GM$PPUTA(NEXT));
     1014    21090    2      ENDPAGE = NEXT + U$->GM$PPUT.SIZE;
     1015    21091    2      USR=U$->GM$PPUT.OWNER;
     1016    21092    2      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);
     1017    21093
     1018    21094        /* Check the Shared File Tables first; if its found in here, we
     1019    21095            may be able to get out of this routine fairly fast.
     1020    21096        */
     1021    21097    2      M$=G$BOBCAT$->G$BOBCAT.SFILE$;
     1022    21098    2      USE_COUNT = 0;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:35   
     1023    21099    3      DO I = 1 TO G$BOBCAT$->G$BOBCAT.SFILE#;
     1024    21100    3           M$=PINCRW(M$,SIZEW(G$SFILE));
     1025    21101    3           IF G$SFILE.INSTTIME ~= 0
     1026    21102    4           THEN DO;
     1027    21103    4                USE_COUNT = USE_COUNT +1;
     1028    21104    5                DO L = 0 TO 7;
     1029    21105    5                     IF ADDR(G$SFILE.PP_ROS)->G$AWORD(L) = NEXT
     1030    21106    6                     THEN DO;
     1031    21107    6                          ADDR(G$SFILE.PP_ROS)->G$AWORD(L)=CURR;
     1032    21108
     1033    21109    6                          IF L <= G$SFILE.SEG_1ST_PROC
     1034    21110    6                          THEN RETURN/*its data*/;
     1035    21111                                 /*L=1st proc is ok because we index differently here*/
     1036    21112
     1037    21113    6                          IF G$SFILE.UC = 0
     1038    21114    6                          THEN RETURN/*cant be in anybody's map*/;
     1039    21115
     1040    21116    6                          IF (G$SFILE.LCP6_FLGS & %LCP6_INST#)
     1041    21117    6                          THEN GOTO CHECK_IOPS/*cant be HJIT or HMI*/;
     1042    21118    6                          ELSE GOTO CHECK_USRS/*cant be HJIT, HMI or IOP*/;
     1043    21119    6                          END;
     1044    21120    5                     END/*do l=0 to 7*/;
     1045    21121    4                END/*do if insttime ~0*/;
     1046    21122    3           IF USE_COUNT = GJ_SFILE_CURR#
     1047    21123    3           THEN GOTO CHECK_HJITS/*found all used entries*/;
     1048    21124    3           END/*di i=1 to sfile#*/;
     1049    21125
     1050    21126        /* Next see if we must update the HJIT page in the user tables
     1051    21127           or the physical page number in the HMI table.
     1052    21128        */
     1053    21129    2   CHECK_HJITS: ;
     1054    21130    2      M$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_MCL);
     1055    21131
     1056    21132    3      DO I = 1 TO G_MUAIS;
     1057    21133    3           IF G$USER.US(I) ~= %GH_NULL
     1058    21134    4           THEN DO;
     1059    21135    4                IF G$USER.UHJITPP(I) = NEXT
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:36   
     1060    21136    5                THEN DO;
     1061    21137    5                     IF G$USER.UHJITPP(USR)=G$UHJIT.ASDT_MCL.UHJIT.BASE
     1062    21138    6                     THEN DO/* if current user*/;
     1063    21139    6                          G$MHJIT.ASDT_MON.UMHJIT.BASE = CURR;
     1064    21140    6                          CALL GHH$ASD (G$UHJIT$, G$MHJIT.ASDT_MON.UMHJIT);
     1065    21141    6                          END/*do if current user*/;
     1066    21142    5                     G$USER.UHJITPP(I) = CURR;
     1067    21143    5                     GOTO CHECK_USRS/*cant be in HMI or IOP*/;
     1068    21144    5                     END/*do if its an HJIT page*/;
     1069    21145
     1070    21146    4                IF G$USER.HMI$(I) ~= ADDR(NIL) AND
     1071    21147    4                  G$USER.HMI$(I)->KNH$HMI.PP# = NEXT
     1072    21148    5                THEN DO;
     1073    21149    5                     G$USER.HMI$(I)->KNH$HMI.PP# = CURR;
     1074    21150    5                     GOTO CHECK_IOPS;
     1075    21151    5                     END/*do if hmi.pp#*/;
     1076    21152    4                END/*do if not null*/;
     1077    21153    3           END/*do I=1 to max_users*/;
     1078    21154
     1079    21155        /* Run through all the IOPs looking for the physical page.  It may
     1080    21156           appear in more than one IOP.
     1081    21157        */
     1082    21158    2   CHECK_IOPS: ;
     1083    21159    2      M$ = KN_IOP_START$;
     1084    21160
     1085    21161    3      DO WHILE(M$ <= KN_IOP_END$);
     1086    21162    3           IF KN$IOP.FLAGS.INUSE
     1087    21163    4           THEN DO;
     1088    21164    4                IF KN$IOP.BUFSEGDES.BASE >= NEXT
     1089    21165    4                  AND KN$IOP.BUFSEGDES.BASE < ENDPAGE
     1090    21166    4                THEN KN$IOP.BUFSEGDES.BASE = CURR + KN$IOP.BUFSEGDES.BASE - NEXT;
     1091    21167
     1092    21168    4                IF KN$IOP.KEYSEGDES.BASE >= NEXT
     1093    21169    4                  AND KN$IOP.KEYSEGDES.BASE < ENDPAGE
     1094    21170    4                THEN KN$IOP.KEYSEGDES.BASE = CURR + KN$IOP.KEYSEGDES.BASE - NEXT;
     1095    21171
     1096    21172    4                IF KN$IOP.DCBSEGDES.BASE >= NEXT
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:37   
     1097    21173    4                  AND KN$IOP.DCBSEGDES.BASE < ENDPAGE
     1098    21174    4                THEN KN$IOP.DCBSEGDES.BASE = CURR + KN$IOP.DCBSEGDES.BASE - NEXT;
     1099    21175    4                END/*do if iop is in use*/;
     1100    21176    3           M$ = PINCRW(M$,SIZEW(KN$IOP));
     1101    21177    3           END/*do while*/;
     1102    21178
     1103    21179        /* Run through the owners ASDT_USR and adjust all descriptors for
     1104    21180           this page.  Then do the same for ASDT_MCL to catch pages mapped
     1105    21181           in LPARs, BPARs and WINDOW.
     1106    21182           If the user has connected interrupt levels, do the same for
     1107    21183           each HHJIT.
     1108    21184           If other user's are CVMed on to this one or using the same
     1109    21185           shared file (UHJIT.SHRD_SEG) do all of the above for them too.
     1110    21186        */
     1111    21187    2   CHECK_USRS:
     1112    21188    2      NXTUSR=0;
     1113    21189    2      M$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_MCL);
     1114    21190
     1115    21191    3      DO WHILE (USR ~= 0);
     1116    21192    3           FLG.BASE_LVL = '1'B;
     1117    21193    3           LOG=G$USER.UHJITPP(USR);
     1118    21194    3   MAP_HHJIT: ;
     1119    21195    3           CALL MAP (LOG);
     1120    21196    4           DO I = 1 TO 30;
     1121    21197    4                IF USRMAP.BASE(I) = NEXT
     1122    21198    5                THEN DO;
     1123    21199    5                     USRMAP.BASE(I) = CURR;
     1124    21200    5                     IF FLG.BASE_LVL THEN NXTUSR = G$WINDOW1$->G$UHJIT.SHRD_SEG(I);
     1125    21201    5                     END;
     1126    21202    4                IF MCLMAP.BASE(I) >= NEXT AND
     1127    21203    4                  MCLMAP.BASE(I) < ENDPAGE
     1128    21204    4                THEN MCLMAP.BASE(I) = CURR+MCLMAP.BASE(I)-NEXT;
     1129    21205    4                END/*di i=1 to 30*/;
     1130    21206
     1131    21207    3           FLG.BASE_LVL = '0'B;
     1132    21208    4           DO I = 12 TO 60;
     1133    21209    4                IF G$WINDOW1$->G$UHJIT.CNCTD_LVLS(I)
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:38   
     1134    21210    4                  AND G$MHJIT.INTCON.HJIT_PG.BASE(I-12)~= 0
     1135    21211    5                THEN DO;
     1136    21212    5                     IF G$MHJIT.INTCON.HJIT_PG.BASE(I-12)=NEXT
     1137    21213    5                     THEN G$MHJIT.INTCON.HJIT_PG.BASE(I-12) = CURR;
     1138    21214
     1139    21215    5                     G$UHJIT.ASDT_MCL.BPAR2 = SHUF_DSCR;
     1140    21216    5                     G$UHJIT.ASDT_MCL.BPAR2.BASE=G$MHJIT.INTCON.HHJIT(I-12);
     1141    21217    5                     CALL GHH$ASD (G$BPAR2$,G$UHJIT.ASDT_MCL.BPAR2);
     1142    21218    6                     DO L = 1 TO 30;
     1143    21219    6                          B$ = ADDR(B_HHJIT.ASDT_USR);
     1144    21220    6                          IF B$->G$SEGDESCA.BASE(L) = NEXT
     1145    21221    6                          THEN B$->G$SEGDESCA.BASE(L) = CURR;
     1146    21222    6                          B$ = ADDR(B_HHJIT.ASDT_MCL);
     1147    21223    6                          IF B$->G$SEGDESCA.BASE(L) = NEXT
     1148    21224    6                          THEN B$->G$SEGDESCA.BASE(L) = CURR;
     1149    21225    6                          END/*do l=1 t0 30*/;
     1150    21226    5                     END/*do if uhjit.cnctd_lvls*/;
     1151    21227    3                END;/*do i=12 to 60*/;
     1152    21228
     1153    21229    3           IF NXTUSR = USR
     1154    21230    3           THEN USR=0;
     1155    21231    3           ELSE USR=NXTUSR;
     1156    21232
     1157    21233    3           END/*do while usr~=0*/;
     1158    21234
     1159    21235    2      RETURN;
     1160    21236
     1161    21237    2   END ADJ_PP;
     1162    21238        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:39   
     1163    21239        /*D* NAME: GMA$RELPS
     1164    21240
     1165    21241             CALL: CALL GMA$RELPS (page number,page size); !! Doesn't ALTRET !!
     1166    21242
     1167    21243             INPUT:
     1168    21244                   PAGENO - The physical page number of the first page of the
     1169    21245                   segment to be released.
     1170    21246                   PAGES - Size of segment to be released, in pages.
     1171    21247             OUTPUT:
     1172    21248                   The specified segment is de-allocated.
     1173    21249             DESCRIPTION:
     1174    21250                   The segment beginning at PAGENO is de-allocated.
     1175    21251        */
     1176    21252    1   GMA$RELPS: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                     */
     1177    21253
     1178    21254    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);
     1179    21255    1      SIZE = PAGES;
     1180    21256    1      CURR = PAGENO;
     1181    21257    1      CURR$ = ADDR (GM$PPUTA (PAGENO));
     1182    21258    1      CURR_LAST = PAGENO + CURR$->GM$PPUT.SIZE -1;
     1183    21259    1      CURR_LAST$ = ADDR(GM$PPUTA (CURR_LAST));
     1184    21260    1      CALL LOCK_GATE;
     1185    21261
     1186    21262    1      IF (CURR > GM_SHUF_HI) OR (CURR < GM_MEM_LOW)
     1187    21263    1      THEN CALL MMSCREECH;
     1188    21264
     1189    21265    1      IF (NOT CURR$->GM$PPUT.C.FIRSTP) OR (CURR$->GM$PPUT.SIZE ~= SIZE ) OR
     1190    21266    1        (NOT CURR$->GM$PPUT.C.INUSE)
     1191    21267    1      THEN CALL MMSCREECH;
     1192    21268
     1193    21269    1      IF CURR$->GM$PPUT.C.SHUFFLABLE = '0'B
     1194    21270    2      THEN DO;
     1195    21271    2           GM_XSHUF = GM_XSHUF - 1;
     1196    21272    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;
     1197    21273    2           END;
     1198    21274    1      CALL RELCVM;
     1199    21275    1      CALL DEALLOCATE;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:40   
     1200    21276    1      CALL CHKPPT;                         /* Check PPUT                         */
     1201    21277    1      GOTO RELPGS_EXIT;
     1202    21278
     1203    21279        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:41   
     1204    21280        /*D* NAME: GMA$REL
     1205    21281
     1206    21282            CALL: CALL GMA$REL (segment_index,pages);
     1207    21283
     1208    21284             PARAMETERS:
     1209    21285                   segment-index is an index to the segment descriptor in the
     1210    21286                   user's ASDT for which memory is to be released.
     1211    21287                   pages is the number of pages to be released.
     1212    21288             DESCRIPTION:
     1213    21289                   This routine is called to release pages from a segment of
     1214    21290                   user memory. The segment descriptor in the users ASDT
     1215    21291                   is set to reflect the outcome, (empty or size adjusted).
     1216    21292                                                                           */
     1217    21293
     1218    21294    1   GMA$REL: ENTRY (PAGENO,PAGES) ALTRET;
     1219    21295    1      G$SEGDESC=G$ASDT_USR$->G$SEGDESCA(SEGX);
     1220    21296    1      IF (G$SEGDESC.V ='0'B) OR (PAGES > G$SEGDESC.SIZE+1)
     1221    21297    1      THEN CALL MMSCREECH;
     1222    21298
     1223    21299    1      CALL LOCK_GATE;
     1224    21300
     1225    21301    1      CURR=G$SEGDESC.BASE;
     1226    21302    1      IF (CURR > GM_MEM_HI) OR (CURR < GM_MEM_LOW)
     1227    21303    1      THEN CALL MMSCREECH;
     1228    21304
     1229    21305    1      IF CURR > GM_SHUF_HI
     1230    21306    1      THEN CURR_MEAT$=ADDR(GM_MEAT_NSHF);
     1231    21307    1      ELSE CURR_MEAT$=ADDR(GM_MEAT_SHUF);
     1232    21308
     1233    21309    1      CURR$=ADDR(GM$PPUTA(CURR));
     1234    21310
     1235    21311    1      IF PAGES ~= G$SEGDESC.SIZE+1
     1236    21312    2      THEN DO;
     1237    21313    2           SIZE=G$SEGDESC.SIZE +1 - PAGES;
     1238    21314    2           CURR$->GM$PPUT.SIZE=SIZE;
     1239    21315    2           CURR=CURR+SIZE-1;
     1240    21316    2           CURR$=ADDR(GM$PPUTA(CURR));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:42   
     1241    21317    2           CURR$->GM$PPUT.C.INUSE='1'B;
     1242    21318    2           CURR$->GM$PPUT.C.LASTP='1'B;
     1243    21319    2           CURR$->GM$PPUT.SIZE=SIZE;
     1244    21320
     1245    21321    2           IF CURR <= GM_SHUF_HI
     1246    21322    2           THEN CURR$->GM$PPUT.C.SHUFFLABLE='1'B;
     1247    21323    2           ELSE CURR$->GM$PPUT.C.SHUFFLABLE='0'B;
     1248    21324
     1249    21325    2           IF SIZE ~= 1
     1250    21326    2           THEN CURR$->GM$PPUT.C.FIRSTP = '0'B;
     1251    21327
     1252    21328    2           CURR=CURR+1;
     1253    21329    2           CURR$=PINCRW(CURR$,SIZEW(GM$PPUT));
     1254    21330    2           CURR$->GM$PPUT.C.FIRSTP='1'B;
     1255    21331    2           CURR$->GM$PPUT.SIZE=PAGES;
     1256    21332    2           IF PAGES = 1
     1257    21333    2           THEN CURR$->GM$PPUT.C.LASTP = '1'B;
     1258    21334    2           ELSE CURR$->GM$PPUT.C.LASTP = '0'B;
     1259    21335    2           CURR_LAST=CURR+PAGES-1;
     1260    21336    2           GM$PPUTA.SIZE(CURR_LAST)=PAGES;
     1261    21337    2           G$SEGDESC.SIZE = G$SEGDESC.SIZE - PAGES;
     1262    21338    2           END;
     1263    21339    2      ELSE DO;
     1264    21340    2           CALL RELCVM;
     1265    21341    2           G$SEGDESC ='0'B;
     1266    21342    2           END;
     1267    21343
     1268    21344    1      CALL DEALLOCATE;
     1269    21345    1      CALL SET_ASDTS;
     1270    21346
     1271    21347    1   RELPGS_EXIT: ;
     1272    21348    1      CALL UNLOCK_GATE;
     1273    21349    1      CALL LOCK_GATE;
     1274    21350    1      CALL CHKPPT;
     1275    21351    1      CALL UNLOCK_GATE;
     1276    21352
     1277    21353    1      IF GM_SHUF-GM_STEP > 0
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:43   
     1278    21354    2      THEN DO;
     1279    21355    2           IF GH_HQ(%GH_MEM)~= 0
     1280    21356    2           THEN CALL GHS$RUE(%GH_EVMA);
     1281    21357    2           END;
     1282    21358
     1283    21359    1      RETURN;
     1284    21360        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:44   
     1285    21361        /*I* NAME: DEALLOCATE
     1286    21362             PURPOSE:
     1287    21363                   To de-allocate an extent.
     1288    21364
     1289    21365             CALL: CALL DEALLOCATE;
     1290    21366
     1291    21367             ENVIRONMENT:
     1292    21368                   GM_MEATLOCK gate is locked.
     1293    21369             INPUT:
     1294    21370                   CURR - Page number of the extent to be de-allocated.
     1295    21371                   CURR$ - Pointer to PPUT entry for CURR.
     1296    21372                   CURR_MEAT$ - Pointer to appropriate MEAT.
     1297    21373             OUTPUT:
     1298    21374                   PREV - page number of the last page of the extent which
     1299    21375                          will reflect any right hand compaction.
     1300    21376             SCRATCH:
     1301    21377                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1302    21378             DESCRIPTION:
     1303    21379                   The specified extent is de-allocated. If either its left neighbor
     1304    21380                   or right neighbor are unallocated, then they are compacted into
     1305    21381                   one larger extent. The resultant unallocated extent is then put
     1306    21382                   onto the head of its MEAT list.
     1307    21383        */
     1308    21384        /*I* NAME: DEALLOCATE_SHUF
     1309    21385
     1310    21386             DESCRIPTION:
     1311    21387                   Same as DEALLOCATE, except that the memory counters are
     1312    21388                   not messed with.
     1313    21389        */
     1314    21390    1   DEALLOCATE: PROC;
     1315    21391
     1316    21392    2   DCL CURRENT UBIN;
     1317    21393    2   DCL CURRENT$ PTR;
     1318    21394    2   DCL CURR_LAST UBIN;
     1319    21395    2   DCL CURR_SIZE UBIN;
     1320    21396    2   DCL LEFT_LAST$ PTR;
     1321    21397    2   DCL NEW_SIZE UBIN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:45   
     1322    21398    2   DCL RIGHT$ PTR;
     1323    21399
     1324    21400    2      CURR_SIZE = CURR$->GM$PPUT.SIZE;
     1325    21401
     1326    21402    2      IF G$JIT.MODE = %G_M_HANDLER#
     1327    21403    3      THEN DO;
     1328    21404    3           GM_ASHUF = GM_ASHUF + CURR_SIZE;
     1329    21405    3           GM_HSHUF = GM_HSHUF - CURR_SIZE;
     1330    21406    3           END;
     1331    21407
     1332    21408    2      IF CURR_MEAT$ = ADDR (GM_MEAT_SHUF)
     1333    21409    3      THEN DO;
     1334    21410    3           GM_SHUF = GM_SHUF + CURR_SIZE;
     1335    21411    3           END;
     1336    21412    3      ELSE DO;
     1337    21413    3           GM_NSHF_CURR = GM_NSHF_CURR - CURR_SIZE;
     1338    21414
     1339    21415    3           IF CURR ~= GM_SHUF_HI +1
     1340    21416    4           THEN DO;
     1341    21417    4                GM_NSHF = GM_NSHF + CURR_SIZE;
     1342    21418    4                END;
     1343    21419
     1344    21420    4           ELSE DO;                   /*return this memory to te shuf mem pool*/
     1345    21421    4                NEW_SIZE = CURR_SIZE;
     1346    21422    4                RIGHT$ = PINCRW(CURR$, CURR_SIZE*SIZEW(GM$PPUT));
     1347    21423
     1348    21424    4                IF NOT(RIGHT$->GM$PPUT.C.INUSE)
     1349    21425    5                THEN DO;
     1350    21426    5                     NEW_SIZE = NEW_SIZE + RIGHT$->GM$PPUT.SIZE;
     1351    21427    5                     GM_NSHF = GM_NSHF - RIGHT$->GM$PPUT.SIZE;
     1352    21428
     1353    21429    5                     CURRENT = CURR;
     1354    21430    5                     CURRENT$ = CURR$;
     1355    21431    5                     CURR = CURR + CURR_SIZE;
     1356    21432    5                     CALL UNLINK;          /*get it out of the nshf table*/
     1357    21433
     1358    21434    5                     MEAT$ = ADDR(GM_MEAT_SHUF);
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:46   
     1359    21435    5                     MEAT$ = ADDR(MEAT$->GM$MEATA(LOG));
     1360    21436    5                     CALL LINK2HEAD;       /*get it on the shuf table*/
     1361    21437
     1362    21438    5                     CURR=CURRENT;
     1363    21439    5                     CURR$ = CURRENT$;
     1364    21440    5                     CURR_LAST$ = PINCRW(CURR$, (CURR_SIZE-1)*SIZEW(GM$PPUT));
     1365    21441
     1366    21442    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;
     1367    21443    5                     CURR_LAST$->GM$PPUT.C.SHUFFLABLE='1'B;
     1368    21444    5                     END;
     1369    21445
     1370    21446    4                CURR_MEAT$ = ADDR(GM_MEAT_SHUF);
     1371    21447    4                GM_SHUF = GM_SHUF + NEW_SIZE;
     1372    21448    4                GM_SHUF_HI = GM_SHUF_HI + NEW_SIZE;
     1373    21449
     1374    21450    4                CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;
     1375    21451    4                NEW_SIZE = NEW_SIZE -1;
     1376    21452    4                CURR_LAST$ = PINCRW(CURR$, NEW_SIZE*SIZEW(GM$PPUT));
     1377    21453    4                CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;
     1378    21454    4                END/*do if releasing lowest nshf*/;
     1379    21455    3           END/*do if releasing nshf*/;
     1380    21456
     1381    21457    2   DEALLOCATE_SHUF: ENTRY;
     1382    21458    2      CURRENT = CURR;
     1383    21459    2      CURRENT$ = CURR$;
     1384    21460    2      CURR_SIZE = CURRENT$->GM$PPUT.SIZE;
     1385    21461
     1386    21462    2      NEW_SIZE = CURR_SIZE;
     1387    21463    2      CURR_LAST = CURR + CURR_SIZE - 1;    /*last pg to deallocate*/
     1388    21464    2      CURR_LAST$ = ADDR (GM$PPUTA (CURR_LAST));
     1389    21465    2      CURRENT$->GM$PPUT.C.INUSE = '0'B;
     1390    21466    2      CURR_LAST$->GM$PPUT.C.INUSE = '0'B;
     1391    21467
     1392    21468        /* Attempt left-hand compaction */
     1393    21469
     1394    21470    2      IF (CURR ~= GM_MEM_LOW ) AND (CURR ~= GM_SHUF_HI + 1)
     1395    21471    3      THEN DO;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:47   
     1396    21472    3           LEFT_LAST$ = PINCRW (CURRENT$,-SIZEW (GM$PPUT));
     1397    21473    3           IF NOT LEFT_LAST$->GM$PPUT.C.INUSE
     1398    21474    4           THEN DO;              /* Left-hand extent is unallocated - compact it */
     1399    21475    4                SIZE = LEFT_LAST$->GM$PPUT.SIZE;
     1400    21476    4                NEW_SIZE = NEW_SIZE + SIZE;
     1401    21477    4                CURR = CURRENT - SIZE;
     1402    21478    4                CALL LOGBASE2;
     1403    21479    4                CALL UNLINK;
     1404    21480    4                CURRENT$->GM$PPUT.C.FIRSTP = '0'B;
     1405    21481    4                LEFT_LAST$->GM$PPUT.C.LASTP = '0'B;
     1406    21482    4                CURRENT$ = ADDR (GM$PPUTA (CURR));
     1407    21483    4                CURRENT = CURR;
     1408    21484    4                END;
     1409    21485    3           END;
     1410    21486
     1411    21487        /* Attempt right-hand compaction */
     1412    21488
     1413    21489    2      IF (CURR_LAST ~= GM_MEM_HI) AND (CURR_LAST ~= GM_SHUF_HI)
     1414    21490    3      THEN DO;
     1415    21491    3           RIGHT$ = PINCRW (CURR_LAST$,SIZEW (GM$PPUT));
     1416    21492    3           IF NOT RIGHT$->GM$PPUT.C.INUSE
     1417    21493    4           THEN DO;         /* Right-hand extent is unallocated - compact it     */
     1418    21494    4                SIZE = RIGHT$->GM$PPUT.SIZE;
     1419    21495    4                NEW_SIZE = NEW_SIZE + SIZE;
     1420    21496    4                CALL LOGBASE2;
     1421    21497    4                CURR = CURR_LAST + 1;
     1422    21498
     1423    21499                       /* If meat head is null we are returning a segment
     1424    21500                          during shuffling that followed the upper limit of
     1425    21501                          the shuffle down area.                             */
     1426    21502
     1427    21503    4                IF GM$MEAT.HEAD ~= 0
     1428    21504    4                THEN CALL UNLINK;
     1429    21505
     1430    21506    4                CURR_LAST$->GM$PPUT.C.LASTP = '0'B;
     1431    21507    4                RIGHT$->GM$PPUT.C.FIRSTP = '0'B;
     1432    21508    4                CURR_LAST$ = PINCRW (CURR_LAST$,SIZE*SIZEW (GM$PPUT));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:48   
     1433    21509    4                END;
     1434    21510    3           END;
     1435    21511
     1436    21512    2      PREV = POFFW(CURR_LAST$,G$PPUT$)/SIZEW(GM$PPUT);
     1437    21513
     1438    21514    2      IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)
     1439    21515    3      THEN DO;
     1440    21516    3           CURRENT$->GM$PPUT.C.SHUFFLABLE='1'B;
     1441    21517    3           CURR_LAST$->GM$PPUT.C.SHUFFLABLE='1'B;
     1442    21518    3           END;
     1443    21519    3      ELSE DO;
     1444    21520    3           CURRENT$->GM$PPUT.C.SHUFFLABLE='0'B;
     1445    21521    3           CURR_LAST$->GM$PPUT.C.SHUFFLABLE='0'B;
     1446    21522    3           END;
     1447    21523    2      IF NEW_SIZE ~= CURR_SIZE
     1448    21524    3      THEN DO;
     1449    21525    3           CURRENT$->GM$PPUT.SIZE = NEW_SIZE;
     1450    21526    3           CURR_LAST$->GM$PPUT.SIZE = NEW_SIZE;
     1451    21527    3           END;
     1452    21528        /* Put on head of free extent chain for this size.
     1453    21529        */
     1454    21530    2      SIZE = NEW_SIZE;
     1455    21531    2      CALL LOGBASE2;
     1456    21532    2      CURR = CURRENT;
     1457    21533    2      CALL LINK2HEAD;
     1458    21534
     1459    21535    2      RETURN;
     1460    21536
     1461    21537    2   END DEALLOCATE;
     1462    21538
     1463    21539        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:49   
     1464    21540        /*I* NAME: LINK2HEAD
     1465    21541             PURPOSE:
     1466    21542                   To re-link a free extent as the head of its MEAT list.
     1467    21543
     1468    21544             CALL: CALL LINK2HEAD;
     1469    21545
     1470    21546             ENVIRONMENT:
     1471    21547                   GM_MEATLOCK gate is locked.
     1472    21548             INPUT:
     1473    21549                   CURR - Page number of extent to be re-linked.
     1474    21550                   MEAT$ - Pointer to MEAT list entry.
     1475    21551             OUTPUT:
     1476    21552                   None.
     1477    21553             SCRATCH:
     1478    21554                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1479    21555             DESCRIPTION:
     1480    21556                   The free extent identified by CURR will be re-linked as the
     1481    21557                   head of the MEAT list identified by MEAT$.
     1482    21558        */
     1483    21559    1   LINK2HEAD: PROC;
     1484    21560
     1485    21561    2      CALL MAP (CURR);
     1486    21562    2      GM$EXTENT.BLINK = 0;
     1487    21563    2      IF GM$MEAT.HEAD = 0
     1488    21564    3      THEN DO;                             /* List was empty                     */
     1489    21565    3           GM$MEAT.TAIL = CURR;
     1490    21566    3           GM$EXTENT.FLINK = 0;
     1491    21567    3           END;
     1492    21568
     1493    21569    3      ELSE DO;                             /* List was not empty                 */
     1494    21570    3           GM$EXTENT.FLINK = GM$MEAT.HEAD;
     1495    21571    3           CALL MAP (GM$MEAT.HEAD);        /* Map onto old-head                  */
     1496    21572    3           GM$EXTENT.BLINK = CURR;         /* Let old-head.blink -> curr         */
     1497    21573    3           END;
     1498    21574    2      GM$MEAT.HEAD = CURR;
     1499    21575    2      GM$MEAT.COUNT = GM$MEAT.COUNT + 1;
     1500    21576
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:50   
     1501    21577    2      RETURN;
     1502    21578
     1503    21579    2   END LINK2HEAD;
     1504    21580
     1505    21581        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:51   
     1506    21582        /*I* NAME: UNLINK
     1507    21583             PURPOSE:
     1508    21584                   To remove an unallocated segment from its MEAT list.
     1509    21585
     1510    21586             CALL: CALL UNLINK;
     1511    21587
     1512    21588             INPUT:
     1513    21589                   CURR - Page number of extent to be unlinked.
     1514    21590                   CURR_MEAT$ - Pointer to the appropriate MEAT list.
     1515    21591             OUTPUT:
     1516    21592                   MEAT$ - Pointer to appropriate MEAT list entry.
     1517    21593                   FLINK - Forward link in extent list.
     1518    21594                   BLINK - Backward link in extent list.
     1519    21595             SCRATCH:
     1520    21596                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1521    21597             DESCRIPTION:
     1522    21598                   The extent beginning at page CURR is unlinked from its MEAT
     1523    21599                   list.
     1524    21600        */
     1525    21601        /*I* NAME: UNLINK_MAPPED
     1526    21602              DESCRIPTION:
     1527    21603                    Same as UNLINK, except that we are already mapped onto the
     1528    21604                    current extent, and BLINK, FLINK and MEAT$ have been setup.
     1529    21605        */
     1530    21606    1   UNLINK: PROC;
     1531    21607
     1532    21608    2   DCL SAVE_SZ UBIN;
     1533    21609
     1534    21610    2      CURR$ = ADDR(GM$PPUTA(CURR));
     1535    21611
     1536    21612    2      SAVE_SZ = SIZE;
     1537    21613    2      SIZE = CURR$->GM$PPUT.SIZE;
     1538    21614    2      CALL LOGBASE2;                       /*set up meat$*/
     1539    21615    2      SIZE = SAVE_SZ;
     1540    21616
     1541    21617    2      CALL MAP (CURR);
     1542    21618    2      BLINK = GM$EXTENT.BLINK;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:52   
     1543    21619    2      FLINK = GM$EXTENT.FLINK;
     1544    21620
     1545    21621    2   UNLINK_MAPPED: ENTRY;
     1546    21622
     1547    21623    2      IF FLG.SHUFFLED = '0'B
     1548    21624    2      THEN IF GM$MEAT.COUNT = 0 THEN CALL MMSCREECH;
     1549    21625
     1550    21626        /*N* Remove these checks later.
     1551    21627        */
     1552    21628    2      IF BLINK ~= 0
     1553    21629    3      THEN DO;
     1554    21630    3           IF (BLINK < GM_MEM_LOW) OR (BLINK > GM_MEM_HI)
     1555    21631    3           THEN CALL MMSCREECH;
     1556    21632    3           END;
     1557    21633    2      IF FLINK ~= 0
     1558    21634    3      THEN DO;
     1559    21635    3           IF (FLINK < GM_MEM_LOW) OR (FLINK > GM_MEM_HI)
     1560    21636    3           THEN CALL MMSCREECH;
     1561    21637    3           END;
     1562    21638        /*N*/
     1563    21639
     1564    21640    2      IF BLINK = 0
     1565    21641    2      THEN GM$MEAT.HEAD = FLINK;
     1566    21642    3      ELSE DO;
     1567    21643    3           CALL MAP (BLINK);
     1568    21644    3           GM$EXTENT.FLINK = FLINK;
     1569    21645    3           END;
     1570    21646
     1571    21647    2      IF FLINK = 0
     1572    21648    2      THEN GM$MEAT.TAIL = BLINK;
     1573    21649    3      ELSE DO;
     1574    21650    3           CALL MAP (FLINK);
     1575    21651    3           GM$EXTENT.BLINK = BLINK;
     1576    21652    3           END;
     1577    21653
     1578    21654    2      IF FLG.SHUFFLED = '0'B
     1579    21655    2      THEN GM$MEAT.COUNT = GM$MEAT.COUNT - 1;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:53   
     1580    21656
     1581    21657    2      RETURN;
     1582    21658
     1583    21659    2   END UNLINK;
     1584    21660
     1585    21661        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:54   
     1586    21662        /*D* NAME: GMA$PS2USR
     1587    21663
     1588    21664             CALL: CALL GMA$PS2USR (page number,user number); !! Doesn't ALTRET !!
     1589    21665
     1590    21666             INPUT:
     1591    21667                   PAGENO - The physical page number of the first page of the
     1592    21668                   segment.
     1593    21669                   USERNO - The user number to allocate the page to.
     1594    21670             OUTPUT:
     1595    21671                   None.
     1596    21672             DESCRIPTION:
     1597    21673                   The specified physical segment is marked as shufflable, and as
     1598    21674                   owned by the specified user.
     1599    21675        */
     1600    21676    1   GMA$PS2USR: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                    */
     1601    21677
     1602    21678    1      CURR$ = ADDR (GM$PPUTA (PAGENO));
     1603    21679    1      CURR_LAST = PAGENO + CURR$->GM$PPUT.SIZE -1;
     1604    21680    1      CURR_LAST$ = ADDR(GM$PPUTA (CURR_LAST));
     1605    21681    1      CALL LOCK_GATE;
     1606    21682    1      IF CURR$->GM$PPUT.OWNER ~= 0
     1607    21683    1      THEN CALL MMSCREECH;
     1608    21684
     1609    21685    1      CURR$->GM$PPUT.OWNER = USERNO;
     1610    21686    1      CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;
     1611    21687    1      CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;
     1612    21688    1      GM_XSHUF = GM_XSHUF - 1;
     1613    21689    1      GOTO CHKPPT_EXIT;
     1614    21690
     1615    21691        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:55   
     1616    21692        /*D* NAME: GMA$RELCVM
     1617    21693            CALL: CALL GMA$RELCVM (page_number);
     1618    21694              PARAMETERS:
     1619    21695                 page_number is the physical page number of the first page of
     1620    21696                a segment for which all shared references are to be removed.
     1621    21697              DESCRIPTION:
     1622    21698                 This routine locates all shared references to the segment and
     1623    21699                 converts them to real memory references.  Correct usage is to
     1624    21700                 unshare CVMed segments.  It would be incorrect to use this on
     1625    21701                 shared program segments.  It is provided to allow unsharing
     1626    21702                 UHJIT, ROSEG and TSTACKU before releasing them during DELU.
     1627    21703        */
     1628    21704
     1629    21705    1   GMA$RELCVM: ENTRY (PAGENO) ALTRET;
     1630    21706    1      CURR=PAGENO;
     1631    21707    1      CURR$ = ADDR(GM$PPUTA(CURR));
     1632    21708    1      CALL LOCK_GATE;
     1633    21709    1      CALL RELCVM;
     1634    21710    1      GOTO CHKPPT_EXIT;
     1635    21711        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:56   
     1636    21712        /*I* NAME: RELCVM
     1637    21713             PURPOSE:
     1638    21714                 To locate all shared usage of a segment and change the ASDT
     1639    21715                 as though it had CVMed onto a real memory page.
     1640    21716             DESCRIPTION:
     1641    21717                 Search down the list of shared users, starting at PPUT.OWNER,
     1642    21718                 and unlink SHRD_SEG and set CVM_REAL each place the segment
     1643    21719                 is used.  CURR and CURR$ indicate the pageno being released.
     1644    21720        */
     1645    21721
     1646    21722    1   RELCVM: PROC;
     1647    21723    2      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);
     1648    21724    2      L=CURR$->GM$PPUT.OWNER;
     1649    21725    3      DO WHILE L ~= 0;
     1650    21726    3           LOG=G$USER.UHJITPP(L);
     1651    21727    3           CALL MAP (LOG);
     1652    21728    3           L=0;
     1653    21729    4           DO I = 1 TO 30;
     1654    21730    4                IF USRMAP.BASE(I) = CURR AND
     1655    21731    4                  G$WINDOW1$->G$UHJIT.SHRD_SEG(I) ~= 0
     1656    21732    5                THEN DO;
     1657    21733    5                     L=G$WINDOW1$->G$UHJIT.SHRD_SEG(I);
     1658    21734    5                     G$WINDOW1$->G$UHJIT.SHRD_SEG(I)=0;
     1659    21735    5                     G$UHJIT.ASDT_MCL.BPAR2=SHUF_DSCR;
     1660    21736    5                     G$UHJIT.ASDT_MCL.BPAR2.BASE=USRMAP.BASE(%GM_ROS#);
     1661    21737    5                     CALL GHH$ASD (G$BPAR2$,G$UHJIT.ASDT_MCL.BPAR2);
     1662    21738    5                     G$BPAR2$->G$ROS.JIT.CVM_REAL(I)='1'B;
     1663    21739    5                     END;
     1664    21740    4                END;
     1665    21741    3           END;
     1666    21742    2      RETURN;
     1667    21743
     1668    21744    2   END RELCVM;
     1669    21745        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:57   
     1670    21746        /*D* NAME: GMA$CVM
     1671    21747
     1672    21748             CALL: CALL GMA$CVM (segment_index,size,physical_page);
     1673    21749
     1674    21750              PARAMETERS:
     1675    21751                    segment_index is an index to the segment descriptor in
     1676    21752                    the user' ASDT for which memory is to be mapped.
     1677    21753
     1678    21754                    size is the number of pages requested to be mapped.
     1679    21755
     1680    21756                    physical_page is the physical page number of the first
     1681    21757                    page to be mapped into the segment.
     1682    21758              DESCRIPTION:
     1683    21759                    The specified segment in the user's memory is mapped onto
     1684    21760                    the specified physical memory by setting ASDT_USR in the
     1685    21761                    user's UHJIT.  The protection is set accroding to the
     1686    21762                    users privileges, Write if he has SPCLMM and read only if he
     1687    21763                    has EXMM.
     1688    21764
     1689    21765                    Usage of shared segments, CVMed or Shared Procedure, is
     1690    21766                    done by maintaining a linked list of users of each segment
     1691    21767                    with a head in GM$PPUT.OWNER.  This is normally the owner
     1692    21768                    of the physical segment until the segment is shared by a
     1693    21769                    CVM request or Shared Procedure allocation. Each time a
     1694    21770                    new user requests to share a segment he is added to the
     1695    21771                    head of the list, if it is the sole occurance of the CVM
     1696    21772                    in that user.  If there are other occurances of CVMs to
     1697    21773                    the same segment in the user, the link is set the same as
     1698    21774                    the link for the others.  Thus all users sharing a segment
     1699    21775                    are linked together with the last user on the list, whose
     1700    21776                    link is zero, being the owner of the physical segment.
     1701    21777                    If the owner of the physical segment makes a CVM request
     1702    21778                    for that segment, he is linked to himself.  We recognize
     1703    21779                    this and act appropriatly.
     1704    21780
     1705    21781                    If the owner of the physical segment releases the segment,
     1706    21782                    others users sharing the segment are modified as though
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:58   
     1707    21783                    they had requested to be CVMed onto the real memory the
     1708    21784                    segment had occupied.                                 */
     1709    21785
     1710    21786    1   GMA$CVM: ENTRY (PAGENO,PAGES,RP) ALTRET;
     1711    21787
     1712    21788    1      G$SEGDESC = '0'B;
     1713    21789    1      G$SEGDESC.V = '1'B;
     1714    21790    1      CURR=ADDR(RP)->G$AWORD(0);
     1715    21791    1      G$SEGDESC.BASE=CURR;
     1716    21792    1      G$SEGDESC.SIZE=PAGES-1;
     1717    21793    1      G$SEGDESC.RP=%G_R_USR#;
     1718    21794    1      G$SEGDESC.EP=%G_R_MON#;
     1719    21795    1      IF G$JIT.PRIV.ACTIVE & %G_PR_EXMM#
     1720    21796    1      THEN G$SEGDESC.WP=%G_R_USR#;
     1721    21797    1      ELSE G$SEGDESC.WP=%G_R_MON#;
     1722    21798
     1723    21799        /* If there is no owner it must be a monitor segment
     1724    21800           so turn it into a real segment request.
     1725    21801        */
     1726    21802    1      CALL LOCK_GATE;
     1727    21803    1      CURR$ = ADDR(GM$PPUTA(CURR));
     1728    21804    1      IF (CURR < GM_MEM_LOW) OR (CURR$->GM$PPUT.OWNER = 0)
     1729    21805    2      THEN DO;
     1730    21806    2           G$JIT.CVM_REAL(SEGX)='1'B;
     1731    21807    2           END;
     1732    21808
     1733    21809        /* If this is not a real or unowned segment,
     1734    21810           link CVM segment to same user as any previous CVM to same
     1735    21811           segment in this user or himself if he is the owner of phys.
     1736    21812        */
     1737    21813    2      ELSE DO;
     1738    21814    2           G$JIT.CVM_REAL(SEGX)='0'B;
     1739    21815    3           DO I = 1 TO 30;
     1740    21816    3                IF G$ASDT_USR$->G$SEGDESCA.BASE(I) = CURR
     1741    21817    4                THEN DO;
     1742    21818    4                     IF G$UHJIT.SHRD_SEG(I) ~= 0
     1743    21819    4                     THEN G$UHJIT.SHRD_SEG(SEGX)=G$UHJIT.SHRD_SEG(I);
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:59   
     1744    21820    4                     ELSE G$UHJIT.SHRD_SEG(SEGX)=G$JIT.USR#;
     1745    21821    4                     GOTO CVM1;
     1746    21822    4                     END;
     1747    21823    3                END;
     1748    21824
     1749    21825        /* Link user onto list of users of this segment
     1750    21826        */
     1751    21827    2           G$UHJIT.SHRD_SEG(SEGX)=CURR$->GM$PPUT.OWNER;
     1752    21828    2           CURR$->GM$PPUT.OWNER=G$JIT.USR#;
     1753    21829    2   CVM1:   ;
     1754    21830    2           END;
     1755    21831
     1756    21832    1      CALL SET_ASDTS;
     1757    21833
     1758    21834    1      GOTO CHKPPT_EXIT;
     1759    21835        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:60   
     1760    21836        /*D* NAME: GMA$PROT
     1761    21837
     1762    21838             CALL: CALL GMA$PROT (segment_index,read_prot,write_prot) ALTRET(label);
     1763    21839
     1764    21840              PARAMETERS:
     1765    21841                    segment_index is an index to the segment descriptor in
     1766    21842                    the user' ASDT for which the protection is to be set.
     1767    21843                    read_prot is the read protection code for the segment.
     1768    21844                    write_prot is the write protection code for the segment.
     1769    21845              DESCRIPTION:
     1770    21846                    The read and write access codes in the specified segment
     1771    21847                    are set.  The execution access is unchanged.
     1772    21848                                                                           */
     1773    21849    1   GMA$PROT: ENTRY (PAGENO,PAGES,RP) ALTRET;
     1774    21850    1      G$SEGDESC=G$ASDT_USR$->G$SEGDESCA(SEGX);
     1775    21851    1      G$SEGDESC.RP=ADDR(PAGES)->BIT2ALGN;
     1776    21852    1      G$SEGDESC.WP=RP;
     1777    21853    1      CALL LOCK_GATE;
     1778    21854    1      CALL SET_ASDTS;
     1779    21855    1      GOTO CHKPPT_EXIT;
     1780    21856        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:61   
     1781    21857        /*I* NAME: SET_ASDTS
     1782    21858             PURPOSE:
     1783    21859                   To set the Segment descriptor in the users ASDT with
     1784    21860                   the results of the current operation.
     1785    21861
     1786    21862             CALL: CALL SET_ASDT;
     1787    21863
     1788    21864             INPUT:
     1789    21865                   G$SEGDESC contains the segment descriptor.
     1790    21866                   SEGX contains the index into G$ASDT_USR.
     1791    21867             OUTPUT:
     1792    21868                   G$ASDT_USER(SEGX) is set.
     1793    21869                                                                        */
     1794    21870
     1795    21871    1   SET_ASDTS: PROC;
     1796    21872
     1797    21873    2      G$ASDT_USR$->G$SEGDESCA(SEGX) = G$SEGDESC;
     1798    21874        /* Check if it is the ROS that is being updated and update the
     1799    21875            ASDT_MCL.ROS if it is.
     1800    21876         */
     1801    21877    2      IF SEGX = %GM_ROS#
     1802    21878    3      THEN DO;
     1803    21879    3           G$ASDT_MCL$->G$SEGDESCA(SEGX) = G$SEGDESC;
     1804    21880    3           CALL GHH$ASD (G$ROS$,G$UHJIT.ASDT_MCL.ROS);
     1805    21881    3           END;
     1806    21882    2      U$=ADDR(ADDR(W_HHJIT.ASDT_USR)->G$SEGDESCA(SEGX));
     1807    21883    3      DO I = 12 TO 60;
     1808    21884    3           IF G$UHJIT.CNCTD_LVLS(I) AND G$MHJIT.INTCON.HHJIT(I-12)~= 0
     1809    21885    4           THEN DO;
     1810    21886    4                LOG = G$MHJIT.INTCON.HJIT_PG.BASE(I-12);
     1811    21887    4                CALL MAP (LOG);
     1812    21888    4                USEGDESC = G$SEGDESC;
     1813    21889    4                IF SEGX = %GM_ROS#
     1814    21890    4                THEN W_HHJIT.ASDT_MCL.ROS=G$SEGDESC;
     1815    21891    4                END;
     1816    21892    3           END;
     1817    21893
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:62   
     1818    21894    2      RETURN;
     1819    21895    2   END SET_ASDTS;
     1820    21896        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:63   
     1821    21897        /*D* NAME: GMA$SHARED
     1822    21898
     1823    21899             CALL: CALL GMA$SHARED (sfile) ALTRET(label);
     1824    21900
     1825    21901              PARAMETERS:
     1826    21902                    sfile is a Shared File Table entry defined in G_SFILE_M.
     1827    21903              DESCRIPTION:
     1828    21904                    This routine looks at the segment information in the sfile
     1829    21905                    table.  If a segment exists, (has non zero size), it links
     1830    21906                    the user onto the list of users connected to this physical
     1831    21907                    segment.
     1832    21908
     1833    21909                                                                           */
     1834    21910    1   GMA$SHARED: ENTRY (PAGENO) ALTRET;
     1835    21911
     1836    21912    1      M$ = ADDR(PAGENO);                   /*now M$ = addr(sfile entry)*/
     1837    21913
     1838    21914    1      CALL LOCK_GATE;
     1839    21915    2      DO I = 0 TO 6;
     1840    21916    2           IF ADDR(G$SFILE.PP_SEG1)->G$AWORD(I) ~= 0
     1841    21917    3           THEN DO;
     1842    21918    3                CURR=ADDR(G$SFILE.PP_SEG1)->G$AWORD(I);
     1843    21919    4                DO L = 1 TO 30;
     1844    21920    4                     IF G$ASDT_USR$->G$SEGDESCA.BASE(L) = CURR
     1845    21921    5                     THEN DO;
     1846    21922    5                          IF CURR < GM_MEM_LOW /*if delta_f*/
     1847    21923    5                          THEN G$JIT.CVM_REAL(L) = '1'B;
     1848    21924
     1849    21925    6                          ELSE DO;
     1850    21926    6                               G$UHJIT.SHRD_FLAG(L) = '1'B;
     1851    21927    6                               CURR$ = ADDR(GM$PPUTA(CURR));
     1852    21928    6                               IF CURR$->GM$PPUT.OWNER = G$JIT.USR#
     1853    21929    6                               THEN CURR$->GM$PPUT.OWNER = 1; /* Make NODEADMNs  */
     1854    21930    6                               G$UHJIT.SHRD_SEG(L) = CURR$->GM$PPUT.OWNER;
     1855    21931    6                               CURR$->GM$PPUT.OWNER = G$JIT.USR#;
     1856    21932    6                               END/*do if not delta_f*/;
     1857    21933    5                          END/*do if user has this seg shared*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:64   
     1858    21934    4                     END/*do L=0 to 30*/;
     1859    21935    3                END/*do if segment is allocated*/;
     1860    21936    2           END/*do I=0 to 6*/;
     1861    21937    1      GOTO CHKPPT_EXIT;
     1862    21938        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:65   
     1863    21939        /*D* NAME: GMA$UNSHARE
     1864    21940
     1865    21941             CALL: CALL GMA$UNSHARE (segment_index);
     1866    21942
     1867    21943              PARAMETERS:
     1868    21944                 Segment_index is an index to the segment descriptor in the
     1869    21945                 users ASDT which is to be released from shared usage.
     1870    21946              DESCRIPTION:
     1871    21947
     1872    21948                 This procedure assumes that said segment is shared, either
     1873    21949                 by CVM or as a shared procedure segment.
     1874    21950
     1875    21951                 If the segment occurs more than once in ASDT with a link to
     1876    21952                 another user, it is simply cleared from the ASDT.
     1877    21953
     1878    21954                 If the segment occurs only once, with a link to another user,
     1879    21955                 it is unlinked from the list of sharors of that segment.
     1880    21956                 If it doesn't have a link to another user, it is assumed to
     1881    21957                 be the last user on the list and is unlinked also.
     1882    21958                                                                           */
     1883    21959
     1884    21960    1   GMA$UNSHARE: ENTRY(PAGENO) ALTRET;
     1885    21961
     1886    21962    1      CALL LOCK_GATE;
     1887    21963    1      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);
     1888    21964    1      CURR=G$ASDT_USR$->G$SEGDESCA.BASE(SEGX);
     1889    21965    1      CURR$ = ADDR(GM$PPUTA(CURR));
     1890    21966    1      L=CURR$->GM$PPUT.OWNER;
     1891    21967    1      NEXT=G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX);
     1892    21968
     1893    21969    2      DO I = 1 TO 30;
     1894    21970    2           IF G$ASDT_USR$->G$SEGDESCA.BASE(I) = CURR AND
     1895    21971    2             G$UHJIT$->G$UHJIT.SHRD_SEG(I) ~= 0
     1896    21972    2             AND I ~= SEGX
     1897    21973    2           THEN EXIT;
     1898    21974    2           END;
     1899    21975
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:66   
     1900    21976    1      IF I > 30
     1901    21977    2      THEN DO;
     1902    21978    2           IF L = G$JIT.USR#
     1903    21979    2           THEN CURR$->GM$PPUT.OWNER=NEXT; /* Unlink from head                   */
     1904    21980
     1905    21981    3           ELSE DO UNTIL L = G$JIT.USR#;
     1906    21982    3                LOG=G$USER.UHJITPP(L);
     1907    21983    3                CALL MAP (LOG);
     1908    21984    4                DO I = 1 TO 30;
     1909    21985    4                     IF USRMAP.BASE(I) = CURR
     1910    21986    5                     THEN DO;
     1911    21987    5                          L=G$WINDOW1$->G$UHJIT.SHRD_SEG(I);
     1912    21988    5                          IF L = G$JIT.USR#
     1913    21989    5                          THEN G$WINDOW1$->G$UHJIT.SHRD_SEG(I)=NEXT; /* Unlink   */
     1914    21990    5                          END;
     1915    21991    4                     END;
     1916    21992    3                END;
     1917    21993    2           END;
     1918    21994
     1919    21995    1      G$ASDT_USR$->G$SEGDESCA(SEGX)='0'B;
     1920    21996    1      G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) = 0;
     1921    21997    1      G$UHJIT$->G$UHJIT.SHRD_FLAG(SEGX) = '0'B;
     1922    21998    1      GOTO CHKPPT_EXIT;
     1923    21999        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:67   
     1924    22000        /*D* NAME: GMA$LOGBASE2
     1925    22001
     1926    22002             CALL: CALL GMA$LOGBASE2 (log,page size); !! Doesn't ALTRET !!
     1927    22003
     1928    22004             INPUT:
     1929    22005                   PAGES - Size of segment, in pages.
     1930    22006             OUTPUT:
     1931    22007                   PAGENO - The log-base-2 of PAGES.
     1932    22008             DESCRIPTION:
     1933    22009                   This routine simply calculates the log-base-2 of the segment
     1934    22010                   whose size is specified by PAGES. A call is made to LOGBASE2,
     1935    22011                   which does the actual calculation.
     1936    22012        */
     1937    22013    1   GMA$LOGBASE2: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                  */
     1938    22014
     1939    22015    1      CURR_MEAT$ = ADDR(NIL);
     1940    22016    1      SIZE = PAGES;
     1941    22017    1      CALL LOGBASE2;
     1942    22018    1      PAGENO = LOG;
     1943    22019
     1944    22020    1      RETURN;
     1945    22021
     1946    22022        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:68   
     1947    22023        /*I* NAME: LOGBASE2
     1948    22024             PURPOSE:
     1949    22025                   To find the MEAT list index for a segment of the specified size.
     1950    22026             CALL: CALL LOGBASE2;
     1951    22027             INPUT:
     1952    22028                   SIZE - Size in pages of the segment.
     1953    22029                   CURR_MEAT$ - Pointer to the appropriate MEAT list.
     1954    22030             OUTPUT:
     1955    22031                   LOG - MEAT list index.
     1956    22032                   MEAT$ - addr(curr_meat$ -> gm$meat_array(log)
     1957    22033             DESCRIPTION:
     1958    22034                   A hardcoded binary search is used to find the log-base-2 of
     1959    22035                   SIZE. The search takes 4 comparisons to terminate. The resultant
     1960    22036                   MEAT list index is returned in LOG.
     1961    22037        */
     1962    22038    1   LOGBASE2: PROC;
     1963    22039
     1964    22040    2      IF SIZE <= 128
     1965    22041    2      THEN IF SIZE <= 8
     1966    22042    2           THEN IF SIZE <= 2
     1967    22043    2                THEN IF SIZE <= 1
     1968    22044    2                     THEN LOG = 0;         /* Extents of size 1                  */
     1969    22045    2                     ELSE LOG = 1;         /* Extents of size 2                  */
     1970    22046    2                ELSE IF SIZE <= 4
     1971    22047    2                     THEN LOG = 2;         /* Extents of size 3 - 4              */
     1972    22048    2                     ELSE LOG = 3;         /* Extents of size 5 - 8              */
     1973    22049    2           ELSE IF SIZE <= 32
     1974    22050    2                THEN IF SIZE <= 16
     1975    22051    2                     THEN LOG = 4;         /* Extents of size 9 - 16             */
     1976    22052    2                     ELSE LOG = 5;         /* Extents of size 17 - 32            */
     1977    22053    2                ELSE IF SIZE <= 64
     1978    22054    2                     THEN LOG = 6;         /* Extents of size 33 - 64            */
     1979    22055    2                     ELSE LOG = 7;         /* Extents of size 65 - 128           */
     1980    22056    2      ELSE IF SIZE <= 2048
     1981    22057    2           THEN IF SIZE <= 512
     1982    22058    2                THEN IF SIZE <= 256
     1983    22059    2                     THEN LOG = 8;         /* Extents of size 129 - 256          */
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:69   
     1984    22060    2                     ELSE LOG = 9;         /* Extents of size 257 - 512          */
     1985    22061    2                ELSE IF SIZE <= 1024
     1986    22062    2                     THEN LOG = 10;        /* Extents of size 513 - 1024         */
     1987    22063    2                     ELSE LOG = 11;        /* Extents of size 1025 - 2048        */
     1988    22064    2           ELSE IF SIZE <= 8192
     1989    22065    2                THEN IF SIZE <= 4096
     1990    22066    2                     THEN LOG = 12;        /* Extents of size 2049 - 4096        */
     1991    22067    2                     ELSE LOG = 13;        /* Extents of size 4097 - 8192        */
     1992    22068    2                ELSE IF SIZE <= 16384
     1993    22069    2                     THEN LOG = 14;        /* Extents of size 8193 - 16384       */
     1994    22070    2                     ELSE LOG = 15;        /* Extents of size 16385 - 32768      */
     1995    22071
     1996    22072    2      MEAT$ = ADDR(CURR_MEAT$->GM$MEATA (LOG));
     1997    22073    2      RETURN;
     1998    22074
     1999    22075    2   END LOGBASE2;
     2000    22076
     2001    22077        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:70   
     2002    22078        /*D* NAME: GMA$MAP
     2003    22079
     2004    22080             CALL: CALL GMA$MAP (page number,page size); !! Doesn't ALTRET !!
     2005    22081
     2006    22082             INPUT:
     2007    22083                   PAGENO - Page number of first page of segment to map onto.
     2008    22084                   PAGES - Size of segment, in pages.
     2009    22085             OUTPUT:
     2010    22086                   G$WINDOW1$ - mapped onto PAGENO.
     2011    22087             ENVIRONMENT:
     2012    22088                   Should be called disabled.
     2013    22089             DESCRIPTION:
     2014    22090                   This routine maps onto the page specified by PAGENO, simply
     2015    22091                   by calling MAP.
     2016    22092        */
     2017    22093    1   GMA$MAP: ENTRY (PAGENO,PAGES) ALTRET;   /* Doesn't ALTRET                     */
     2018    22094
     2019    22095    1      SIZE = PAGES;
     2020    22096    1      CALL MAP (PAGENO);
     2021    22097
     2022    22098    1      RETURN;
     2023    22099
     2024    22100        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:71   
     2025    22101        /*I* NAME: MAP
     2026    22102             PURPOSE:
     2027    22103                  To map an extent into the window area.
     2028    22104
     2029    22105             CALL: CALL MAP (page number);
     2030    22106
     2031    22107             INPUT:
     2032    22108                  PAGENUM - Page number of the extent to be mapped into the window area.
     2033    22109             DESCRIPTION:
     2034    22110                  The extent specified by PAGENUM is mapped into the window area.
     2035    22111                  The base and size are obtained from the PPUT entry, stuffed into
     2036    22112                  the window descriptor in the current ASDT, and then GHH$ASD is
     2037    22113                  called to update the MMU image.
     2038    22114        */
     2039    22115    1   MAP: PROC (PAGENUM);
     2040    22116
     2041    22117    2   DCL PAGENUM UBIN WORD;
     2042    22118
     2043    22119    2      IF (PAGENUM < GM_MEM_LOW) OR (PAGENUM > GM_MEM_HI)
     2044    22120    2      THEN CALL MMSCREECH;
     2045    22121
     2046    22122    2      G$UHJIT.ASDT_MCL.WINDOW1.V = '1'B;
     2047    22123    2      G$UHJIT.ASDT_MCL.WINDOW1.SIZE = 511;
     2048    22124    2      G$UHJIT.ASDT_MCL.WINDOW1.BASE = PAGENUM;
     2049    22125    2      CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);
     2050    22126
     2051    22127    2      RETURN;
     2052    22128
     2053    22129    2   END MAP;
     2054    22130
     2055    22131        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:72   
     2056    22132        /*I* NAME: LOCK_GATE
     2057    22133
     2058    22134             PURPOSE: To save lots of memory by only using the %LOCK macro once.
     2059    22135        */
     2060    22136
     2061    22137    1   LOCK_GATE: PROC;
     2062    22138             %LOCK (G=GM_MEATLOCK);
     2063    22145    2      RETURN;
     2064    22146
     2065    22147    2   UNLOCK_GATE: ENTRY;
     2066    22148           %UNLOCK (G=GM_MEATLOCK);
     2067    22155    2      RETURN;
     2068    22156
     2069    22157    2   END LOCK_GATE;
     2070    22158
     2071    22159        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:73   
     2072    22160        /*I* NAME: CHKPPT
     2073    22161              PURPOSE:
     2074    22162                 To do consistency checks on GM_PPUT and screech if error.
     2075    22163              DESCRIPTION:
     2076    22164                 Start at lowest extent in PPUT and check the first, last and
     2077    22165                 size fields of each extent.
     2078    22166
     2079    22167        */
     2080    22168
     2081    22169    1   CHKPPT: PROC;
     2082    22170
     2083    22171    2   DCL I UBIN;
     2084    22172    2   DCL J UBIN;
     2085    22173    2   DCL INUSE UBIN;
     2086    22174    2   DCL FREE UBIN;
     2087    22175    2   DCL USEFLG BIT(1) ALIGNED;
     2088    22176    2   DCL SHUF_FLG BIT(1) ALIGNED;
     2089    22177    2   DCL CURR$ PTR;
     2090    22178
     2091    22179    2      IF GM_CHK_PPUT ~= 0
     2092    22180    3      THEN DO;
     2093    22181    3           INUSE = 0;
     2094    22182    3           FREE  = 0;
     2095    22183    3           USEFLG  = '1'B;
     2096    22184
     2097    22185    3           I = GM_MEM_LOW;
     2098    22186    4           DO WHILE I <= GM_MEM_HI;
     2099    22187    4                CURR$=ADDR(GM$PPUTA(I));
     2100    22188    4                IF NOT CURR$->GM$PPUT.C.FIRSTP
     2101    22189    4                THEN CALL PPUT_SCREECH;
     2102    22190
     2103    22191    4                J=CURR$->GM$PPUT.SIZE;
     2104    22192    4                IF J=0 THEN CALL PPUT_SCREECH;
     2105    22193
     2106    22194    4                IF J=1 AND NOT(CURR$->GM$PPUT.C.LASTP)
     2107    22195    4                THEN CALL PPUT_SCREECH;
     2108    22196
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:74   
     2109    22197    4                IF CURR$->GM$PPUT.C.LASTP AND J~=1
     2110    22198    4                THEN CALL PPUT_SCREECH;
     2111    22199
     2112    22200    4                IF NOT USEFLG AND NOT(CURR$->GM$PPUT.C.INUSE)
     2113    22201    4                THEN CALL PPUT_SCREECH;    /*should have been compacted*/
     2114    22202
     2115    22203    4                SHUF_FLG = CURR$->GM$PPUT.C.SHUFFLABLE;
     2116    22204    4                USEFLG = CURR$->GM$PPUT.C.INUSE;
     2117    22205    4                IF USEFLG
     2118    22206    5                THEN DO;
     2119    22207    5                     IF CURR$->GM$PPUT.OWNER > G_MUAIS
     2120    22208    5                     THEN CALL PPUT_SCREECH;
     2121    22209    5                     END;
     2122    22210
     2123    22211    4                I=I+J-1;
     2124    22212    4                CURR$=ADDR(GM$PPUTA(I));
     2125    22213
     2126    22214    4                IF NOT CURR$->GM$PPUT.C.LASTP
     2127    22215    4                  OR CURR$->GM$PPUT.SIZE ~= J
     2128    22216    4                THEN CALL PPUT_SCREECH;
     2129    22217
     2130    22218    4                IF (CURR$->GM$PPUT.C.INUSE AND ~USEFLG)
     2131    22219    4                THEN CALL PPUT_SCREECH;
     2132    22220
     2133    22221    4                IF (USEFLG AND ~(CURR$->GM$PPUT.C.INUSE) )
     2134    22222    4                THEN CALL PPUT_SCREECH;
     2135    22223
     2136    22224    4                IF (CURR$->GM$PPUT.C.SHUFFLABLE AND ~SHUF_FLG)
     2137    22225    4                THEN CALL PPUT_SCREECH;
     2138    22226
     2139    22227    4                IF (SHUF_FLG AND ~(CURR$->GM$PPUT.C.SHUFFLABLE) )
     2140    22228    4                THEN CALL PPUT_SCREECH;
     2141    22229
     2142    22230    4                IF USEFLG THEN INUSE = INUSE+J;
     2143    22231    4                ELSE FREE = FREE+J;
     2144    22232    4                I=I+1;
     2145    22233    4                END/*do while*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:75   
     2146    22234
     2147    22235    3           IF (FREE ~= GM_SHUF + GM_NSHF)
     2148    22236    3             OR (INUSE+FREE ~= (GM_MEM_HI - GM_MEM_LOW +1) )
     2149    22237    3           THEN CALL PPUT_SCREECH;
     2150    22238    3           END/*do if check pput*/;
     2151    22239
     2152    22240    2      RETURN;
     2153    22241    2   END CHKPPT;
     2154    22242        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:76   
     2155    22243        /*I* NAME: PPUT_SCREECH
     2156    22244             PURPOSE:
     2157    22245                 Provide a common routine to screech from MM for PPUT errors.
     2158    22246        */
     2159    22247
     2160    22248    1   PPUT_SCREECH: PROC;
     2161    22249
     2162    22250    2      CALL SCREECH (PPUTERR);
     2163    22251    2   END;
     2164    22252
     2165    22253        /*S*
     2166    22254                 SCREECH_CODE: GMA-S$MM10
     2167    22255                 TYPE: SCREECH
     2168    22256                 MESSAGE: Errors detected in PPUT.
     2169    22257        */
     2170    22258        /*I* NAME: MMSCREECH
     2171    22259             PURPOSE:
     2172    22260                 Provide a common routine to screech from MM when called with
     2173    22261                 bad parameters.
     2174    22262        */
     2175    22263
     2176    22264    1   MMSCREECH: PROC;
     2177    22265
     2178    22266    2      CALL SCREECH (PARMERR);
     2179    22267    2   END;
     2180    22268
     2181    22269        /*S*
     2182    22270                 SCREECH_CODE: GMA-S$MM48
     2183    22271                 TYPE: SCREECH
     2184    22272                 MESSAGE: An internal monitor call passed bad parameters.
     2185    22273        */
     2186    22274
     2187    22275    1   END GMA$LGP;
     2188    22276        %EOD;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:77   
--  Include file information  --

   KN_DATA_M.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   MM_SCODE_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GMA$LGP.

   Procedure GMA$LGP requires 4917 words for executable code.
   Procedure GMA$LGP requires 90 words of local(AUTO) storage.

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:78   

 Object Unit name= GMA$LGP                                    File name= GMA$LGP.:E05TOU
 UTS= JUL 29 '97 22:05:27.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     15      F  GMA$LGP
    1   Proc  even  none  4917   1335  GMA$LGP
    2  RoData even  none    12      C  GMA$LGP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  GMA$LGP
     1      7          yes     yes      Std        2  GMA$GETPS
     1     B8          yes     yes      Std        5  GMA$GET
     1     C4          yes     yes      Std        5  GMA$GETIO
     1    42F          yes     yes      Std        1  GMA$LOCATE
     1    9D7          yes     yes      Std        2  GMA$RELPS
     1    A3B          yes     yes      Std        2  GMA$REL
     1    D8F          yes     yes      Std        2  GMA$PS2USR
     1    DC5          yes     yes      Std        1  GMA$RELCVM
     1    E56          yes     yes      Std        3  GMA$CVM
     1    F18          yes     yes      Std        3  GMA$PROT
     1    FAF          yes     yes      Std        1  GMA$SHARED
     1   1021          yes     yes      Std        1  GMA$UNSHARE
     1   10F0          yes     yes      Std        2  GMA$LOGBASE2
     1   119C          yes     yes      Std        2  GMA$MAP
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:79   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 GMV$MOVESEG
 yes     yes           Std       4 GHS$RUE
 yes     yes           Std       1 GJS$REL_ALL
 yes     yes           Std       1 GUD$ASD
         yes           Std       1 SCREECH
         yes           Std       1 GHI$UTS
 yes     yes           Std       2 GHH$ASD
         yes           Std       1 GMV$MOVEUP
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       1 GHH$UNLOCK
                       nStd      0 X6A_AUTO_N
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ASDT_USR$                      r    G$ASDT_MCL$                      r    G$BOBCAT$
r    G$BPAR2$                         r    G$MHJIT$                         r    G$UHJIT$
r    G$WINDOW1$                       r    G$ROS$                           r    G$JIT$
r    G$USRT$                               GM_MEATLOCK                           GM_MEAT_SHUF
     GM_MEAT_NSHF                          GM_MEM_HI                             GM_MEM_LOW
     GM_SHUF                               GM_NSHF                               GM_SHUF_HI
     GM_SHUF_COUNT                         GM_SHUF_SEGS#                         GM_SHUF_MIN
     GM_NSHF_PEAK                          GM_NSHF_CURR                          GM_SHUF_TIME
r    G$PPUT$                               GM_XSHUF                              GM_ASHUF
     GM_HSHUF                              GM_STEP                               GM_CHK_PPUT
     GH_HQ                                 GJ_SFILE_CURR#                        KN_IOP_START$
     KN_IOP_END$                           G_MUAIS                          r    G$ROS$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:80   


        1        1        /*M* GMA$LGP - Routines to manage physical memory */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ECU=0,ENU=0,CRM=80  */
        8        8        /*P*
        9        9             NAME: GMA$LGP
       10       10             PURPOSE:
       11       11                   To manage physical memory for LCP-6.
       12       12             DESCRIPTION:
       13       13                   This module contains the low level routines that manage all of
       14       14                   the allocable physical memory for LCP-6.
       15       15             REFERENCE:
       16       16                   "Memory Management for LCP-6" AF Section 26.2 #0708A-0.
       17       17        */
       18       18        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:81   
       19       19        GMA$LGP: PROC (PAGENO,PAGES,RP,WP,EP) ALTRET;

     19   1 000000  D380 0000 0000  xent GMA$LGP         LNJ,B5   X6A_AUTO_N
          1 000003       005A 0005                       DC       90,5
          1 000005  0F81 0006                            B        s:20245,PREL

       20       20
       21       21        /* Includes */
       22       22
       23       23        %INCLUDE GH_GATE_M;
       24       64 S      %INCLUDE GH_LCP6_M;
       25       65 S      %INCLUDE GF_LCP6_M;
       26       66        %INCLUDE GM_MACRO_M;
       27      548        %INCLUDE G_HJIT_M;
       28      693        %INCLUDE G_ROS_M;
       29      775        %INCLUDE GM_VIRTUAL_E;
       30      985 S      %INCLUDE GU_LCP6_M;
       31      986 S      %INCLUDE G_LCP6_E;
       32      987        %INCLUDE G_JIT_M;
       33     1252        %INCLUDE GH_SCHD_E;
       34     1348        %INCLUDE GH_SCHD_M;
       35     1492        %INCLUDE G_SFILE_M;
       36     1552        %INCLUDE MM_SCODE_C;
       37     1599        %INCLUDE G$BOBCAT_M;
       38     1619        %INCLUDE KNH_MACRO_C;
       39     1902        %INCLUDE KN_DATA_M;
       40     3688
       41     3689        /* Parameters */
       42     3690
       43     3691    1   DCL PAGENO UBIN;
       44     3692    1   DCL SEGX REDEF PAGENO UBIN;
       45     3693
       46     3694    1   DCL PAGES UBIN;
       47     3695    1   DCL USERNO REDEF PAGES UBIN;
       48     3696
       49     3697    1   DCL RP BIT(2) ALIGNED;
       50     3698    1   DCL WP BIT(2) ALIGNED;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:82   
       51     3699    1   DCL EP BIT(2) ALIGNED;
       52     3700
       53     3701        /* EQUs and SUBs */
       54     3702
       55     3703        %GM_EQUS;
       56     3706        %G$JIT_E;
       57     3768
       58     3769        /* Based */
       59     3770
       60     3771        %G$MHJIT (FPTN=G$MHJIT,STCLASS="BASED (G$MHJIT$)");
       61    10645        %G$JIT (STCLASS="BASED(G$JIT$)");
       62    11059        %G$ROS (FULL=YES);
       63    12010        %G$SEGDESC (FPTN="G$SEGDESCA (0:0)",STCLASS=BASED);
       64    12032        %G$UHJIT (FPTN=G$UHJIT,STCLASS="BASED (G$UHJIT$)");
       65    15006        %GM$EXTENT (FPTN=GM$EXTENT,STCLASS="BASED (G$WINDOW1$)");
       66    15033        %GM_MEAT (FPTN=GM$MEAT,STCLASS="BASED (MEAT$)");
       67    15065        %GM_MEAT (FPTN=GM$MEATA,ARRAY=YES,STCLASS=BASED);
       68    15097        %GM$PPUT (FPTN=GM$PPUT,STCLASS=BASED);
       69    15157        %GM$PPUT (FPTN=GM$PPUTA,ARRAY=YES,STCLASS="BASED (G$PPUT$)");
       70    15217        %G$USER (FPTN="G$USER(0:0)",STCLASS="BASED(G$USRT$)");
       71    15228        %G$HHJIT (FPTN=W_HHJIT,STCLASS="BASED(G$WINDOW1$)");
       72    17372        %G$HHJIT (FPTN=B_HHJIT,STCLASS="BASED(G$BPAR2$)");
       73    19516        %G$SEGDESC (FPTN="USRMAP(0:31)",STCLASS="BASED(U$)");
       74    19538        %G$SEGDESC (FPTN="MCLMAP(0:31)",STCLASS="BASED(M$)");
       75    19560        %G$SEGDESC (FPTN=USEGDESC,STCLASS="BASED(U$)");
       76    19582        %G$SFILE (FPTN=G$SFILE,ARRAYED=NO,STCLASS="BASED(M$)");
       77    19619        %G$BOBCAT;
       78    19632        %KNH$HMI;
       79    19639        %KN$IOP (STCLASS="BASED(M$)");
       80    19812    1   DCL G$AWORD(0:7) UBIN BASED;
       81    19813    1   DCL BIT2ALGN BIT(2) ALIGNED BASED;
       82    19814
       83    19815
       84    19816        /* Auto */
       85    19817
       86    19818    1   DCL CURR UBIN;
       87    19819    1   DCL CURR$ PTR;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:83   
       88    19820    1   DCL NEXT UBIN;
       89    19821    1   DCL NEXT$ PTR;
       90    19822    1   DCL PREV UBIN;
       91    19823    1   DCL PREV$ PTR;
       92    19824    1   DCL CURR_LAST UBIN;
       93    19825    1   DCL CURR_LAST$ PTR;
       94    19826    1   DCL CURR_MEAT$ PTR;
       95    19827    1   DCL MEAT$ PTR;
       96    19828    1   DCL BLINK UBIN;
       97    19829    1   DCL FLINK UBIN;
       98    19830        %G$SEGDESC (FPTN=G$SEGDESC,STCLASS=" ");
       99    19852    1   DCL I UBIN;
      100    19853    1   DCL L UBIN;
      101    19854    1   DCL LOG UBIN;
      102    19855    1   DCL PPUT$ PTR;
      103    19856    1   DCL SIZE UBIN;
      104    19857    1   DCL REL_SHF_SZ UBIN;
      105    19858    1   DCL REL_SHF_PG UBIN;
      106    19859    1   DCL LIM UBIN;
      107    19860    1   DCL U$ PTR;
      108    19861    1   DCL M$ PTR;
      109    19862    1   DCL B$ PTR;
      110    19863    1   DCL SHUF_START UBIN(32);
      111    19864    1   DCL SHUF_STOP UBIN(32);
      112    19865    1   DCL 1 FLG,
      113    19866    1         2 SHUFFLED BIT(1) UNAL,
      114    19867    1         2 SPLIT_SHUF_SEG BIT(1) UNAL,
      115    19868    1         2 SFILE_RLSD BIT(1) UNAL,
      116    19869    1         2 LOCATE_IO_FRAGMENT BIT(1) UNAL,
      117    19870    1         2 INT_LVL BIT(1) UNAL,
      118    19871    1         2 BASE_LVL BIT(1) UNAL,
      119    19872    1         2 RE_EXTENDED BIT(1) UNAL,        /* for debugging                      */
      120    19873    1         2 SHUF_UP BIT(1) UNAL,
      121    19874    1         2 * BIT(8) UNAL;
      122    19875
      123    19876                                           /* GET_TYPE is only useful for debugging   */
      124    19877    1   DCL GET_TYPE UBIN;                 /* 0-alloc initial seg   1-extend current  */
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:84   
      125    19878                                           /* 2-move to prev seg    3-move to new seg */
      126    19879                                                /* 4-get physical                     */
      127    19880
      128    19881
      129    19882        /* Symrefs */
      130    19883
      131    19884    1   DCL G$ASDT_USR$ PTR SYMREF READONLY;
      132    19885    1   DCL G$ASDT_MCL$ PTR SYMREF READONLY;
      133    19886    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
      134    19887    1   DCL G$BPAR2$ PTR SYMREF READONLY;
      135    19888    1   DCL G$MHJIT$ PTR SYMREF READONLY;
      136    19889    1   DCL G$UHJIT$ PTR SYMREF READONLY;
      137    19890    1   DCL G$WINDOW1$ PTR SYMREF READONLY;
      138    19891    1   DCL G$ROS$ PTR SYMREF READONLY;
      139    19892    1   DCL G$TSTACKU$ PTR SYMREF READONLY;
      140    19893    1   DCL G$JIT$ PTR SYMREF READONLY;
      141    19894    1   DCL G$USRT$ PTR SYMREF READONLY;
      142    19895        %GATE (FPTN=GM_MEATLOCK,STCLASS=SYMREF);
      143    19914        %GM_MEAT (FPTN=GM_MEAT_SHUF,ARRAY=YES,STCLASS=SYMREF);
      144    19946        %GM_MEAT (FPTN=GM_MEAT_NSHF,ARRAY=YES,STCLASS=SYMREF);
      145    19978    1   DCL GM_MEM_HI UBIN SYMREF;
      146    19979    1   DCL GM_MEM_LOW UBIN SYMREF;
      147    19980    1   DCL GM_SHUF UBIN SYMREF;
      148    19981    1   DCL GM_NSHF UBIN SYMREF;
      149    19982    1   DCL GM_SHUF_HI UBIN SYMREF;
      150    19983    1   DCL GM_SHUF_COUNT UBIN SYMREF;
      151    19984    1   DCL GM_SHUF_SEGS# UBIN SYMREF;
      152    19985    1   DCL GM_SHUF_MIN UBIN SYMREF;
      153    19986    1   DCL GM_NSHF_PEAK UBIN SYMREF;
      154    19987    1   DCL GM_NSHF_CURR UBIN SYMREF;
      155    19988    1   DCL GM_SHUF_TIME UBIN(32) SYMREF;
      156    19989    1   DCL G$PPUT$ PTR SYMREF READONLY;
      157    19990    1   DCL GM_XSHUF UBIN SYMREF;
      158    19991    1   DCL GM_ASHUF UBIN SYMREF;
      159    19992    1   DCL GM_HSHUF UBIN SYMREF;
      160    19993    1   DCL GM_STEP UBIN SYMREF;
      161    19994    1   DCL GM_CHK_PPUT UBIN SYMREF;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:85   
      162    19995    1   DCL GH_HQ(0:0) UBIN SYMREF;
      163    19996    1   DCL GJ_SFILE_CURR# UBIN SYMREF;
      164    19997    1   DCL KN_IOP_START$ PTR SYMREF;
      165    19998    1   DCL KN_IOP_END$ PTR SYMREF;
      166    19999    1   DCL G_MUAIS UBIN SYMREF;
      167    20000
      168    20001        /* Entrefs */
      169    20002
      170    20003    1   DCL GHH$ASD ENTRY (2) ALTRET;
      171    20004    1   DCL GHI$UTS ENTRY(1);
      172    20005    1   DCL GHS$RUE ENTRY(4) ALTRET;
      173    20006    1   DCL GUD$ASD ENTRY(1) ALTRET;
      174    20007    1   DCL GMV$MOVESEG ENTRY(2);
      175    20008    1   DCL GMV$MOVEUP ENTRY(1);
      176    20009    1   DCL SCREECH ENTRY(1);
      177    20010    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
      178    20011
      179    20012        /*  constants  */
      180    20013
      181    20014        %G$SEGDESC (FPTN=SHUF_DSCR,V=YES,SIZE=255,STCLASS=CONSTANT,
      182    20015                      RP=G_R_MON#,WP=G_R_MON#,EP=G_R_MON#);
      183    20037
      184    20038        %VLP_SCODE (FPTN=SHFLERR,ERR#=%S$MM49,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      185    20039                    FCG=GM,MID=A,MON='1'B);
      186    20100        %VLP_SCODE (FPTN=PARMERR,ERR#=%S$MM48,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      187    20101                    FCG=GM,MID=A,MON='1'B);
      188    20162        %VLP_SCODE (FPTN=PPUTERR,ERR#=%S$MM10,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
      189    20163                    FCG=GM,MID=A,MON='1'B);
      190    20224        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:86   
      191    20225        /*D* NAME: GMA$GETPS
      192    20226
      193    20227            CALL: CALL GMA$GETPS (page number,pages) ALTRET (no memory);
      194    20228             ENVIRONMENT:
      195    20229                   Called on behalf of the monitor.
      196    20230             INPUT:
      197    20231                   PAGES - Size of request, in pages.
      198    20232             OUTPUT:
      199    20233                   PAGENO - The physical page number of the first page of the
      200    20234                            allocated segment.
      201    20235             DESCRIPTION:
      202    20236                   This routine is called to get a physical segment from the
      203    20237                   shufflable memory pool. The segment thus allocated will be
      204    20238                   marked as non-shufflable and owned by the monitor. The routine
      205    20239                   GMA$PS2USR must be called to mark the segment as shufflable
      206    20240                   and owned by some user. RETURNs if the request can be satisfied,
      207    20241                   else ALTRETURNs.
      208    20242        */
      209    20243    1   GMA$GETPS: ENTRY (PAGENO,PAGES) ALTRET;

  20243   1 000007  D380 0000 0000  xent GMA$GETPS       LNJ,B5   X6A_AUTO_N
          1 00000A       005A 0005                       DC       90,5

      210    20244
      211    20245    1      FLG = '0'B;

  20245   1 00000C  8747 0035                            CL       FLG,AUTO

      212    20246    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);

  20246   1 00000E  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000011  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      213    20247    1      SIZE = PAGES;

  20247   1 000013  DCC7 0006                            LDB,B5   @PAGES,AUTO
          1 000015  E805                                 LDR,R6   ,B5
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:87   
          1 000016  EF47 0027                            STR,R6   SIZE,AUTO

      214    20248
      215    20249    1      IF G$USER.UHJITPP(G$JIT.USR#) ~= G$UHJIT.ASDT_MCL.UHJIT.BASE

  20249   1 000018  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 00001B  B844 0004                            LDR,R3   4,B4
          1 00001D  B570 00FF                            AND,R3   255,IMO
          1 00001F  BC80 0000 0000  xsym                 LDB,B3   G$USRT$
          1 000022  ABC3 0011                            LAB,B2   17,B3
          1 000024  3F0C                                 MLV,R3   12
          1 000025  9C80 0000 0000  xsym                 LDB,B1   G$UHJIT$
          1 000028  F841 0048                            LDR,R7   72,B1
          1 00002A  F570 7FFF                            AND,R7   32767,IMO
          1 00002C  6C00                                 LDV,R6   0
          1 00002D  84B2                                 SID      ,B2,R3
          1 00002E  6981 0003                            BNEZ,R6  s:20250,PREL
          1 000030  7901 0004                            BEZ,R7   s:20249,PREL

      216    20250    1      THEN FLG.INT_LVL = '1'B;

  20250   1 000032  8947 0035                            LBT,'0800'X       FLG,AUTO
  20250   1 000034       0800

  20249   1                              TRY_AGAIN       null
      217    20251
      218    20252    1   TRY_AGAIN: ;
      219    20253    1      CALL LOCK_GATE;

  20253   1 000035  E3C0 11B0            TRY_AGAIN       LNJ,B6   s:0,PREL
          1 000037       0001                            DC       s:20255,PREL

      220    20254
      221    20255    1      IF GM_SHUF > GM_STEP

  20255   1 000038  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 00003B  E900 0000 0000  xsym                 CMR,R6   GM_STEP
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:88   
          1 00003E  0381 0008                            BLE      s:20257,PREL

      222    20256    1      THEN I = GM_SHUF - GM_STEP;

  20256   1 000040  E200 0000 0000  xsym                 SUB,R6   GM_STEP
          1 000043  EF47 0022                            STR,R6   I,AUTO
          1 000045  0F81 0003                            B        s:20259,PREL

      223    20257    1      ELSE I = 0;

  20257   1 000047  8747 0022                            CL       I,AUTO

      224    20258
      225    20259    1      IF SIZE > I

  20259   1 000049  E847 0027                            LDR,R6   SIZE,AUTO
          1 00004B  E947 0022                            CMR,R6   I,AUTO
          1 00004D  0381 002B                            BLE      s:20276,PREL

      226    20260    2      THEN DO;

      227    20261    2           IF FLG.INT_LVL OR FLG.SFILE_RLSD

  20261   1 00004F  82C7 0035                            LB,'0800'X        FLG,AUTO
  20261   1 000051       0800
          1 000052  0501 0006                            BBT      s:20262,PREL
          1 000054  82C7 0035                            LB,'2000'X        FLG,AUTO
          1 000056       2000
          1 000057  0581 0007                            BBF      s:20269,PREL

      228    20262    3           THEN DO;

      229    20263    3   NOGETPS:     ;

  20263   1                              NOGETPS         null
      230    20264    3                CALL UNLOCK_GATE;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:89   
  20264   1 000059  E3C0 119B            NOGETPS         LNJ,B6   s:0,PREL
          1 00005B       0001                            DC       s:20265,PREL

      231    20265    3   NO_GETPS:    ;

  20265   1                              NO_GETPS        null
      232    20266    3                ALTRETURN;

  20266   1 00005C  C380 0000 0000  xent NO_GETPS        LNJ,B4   X6A_AALT

      233    20267    3                END;
      234    20268
      235    20269    2           CALL UNLOCK_GATE;

  20269   1 00005F  E3C0 1195                            LNJ,B6   s:0,PREL
          1 000061       0001                            DC       s:20270,PREL

      236    20270    2           I = SIZE - I;

  20270   1 000062  E847 0027                            LDR,R6   SIZE,AUTO
          1 000064  E247 0022                            SUB,R6   I,AUTO
          1 000066  EF47 0022                            STR,R6   I,AUTO

      237    20271    2           FLG.SFILE_RLSD = '1'B;

  20271   1 000068  8947 0035                            LBT,'2000'X       FLG,AUTO
  20271   1 00006A       2000

      238    20272    2           CALL GJS$REL_ALL(I) ALTRET(NO_GETPS);

  20272   1 00006B  EBC7 0022                            LAB,B6   I,AUTO
          1 00006D  EFC7 0056                            STB,B6   @PAGENUM+4,AUTO
          1 00006F  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000071  CBF0 0100                            LAB,B4   256,IMO
          1 000073  E380 0000 0000  xent                 LNJ,B6   GJS$REL_ALL
          1 000076       FFE6                            DC       s:20265,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:90   
      239    20273    2           GOTO TRY_AGAIN;

  20273   1 000077  0F81 FFBD                            B        s:20249,PREL

      240    20274    2           END;
      241    20275
      242    20276    1      GET_TYPE = 4;

  20276   1 000079  5C04                                 LDV,R5   4
          1 00007A  DF47 0036                            STR,R5   GET_TYPE,AUTO

      243    20277    1      CALL ALLOCATE

  20277   1 00007C  E3C0 03CC                            LNJ,B6   s:0,PREL
          1 00007E       0003                            DC       s:20279,PREL
          1 00007F  0F81 0018                            B        s:20289,PREL

      244    20278    2      WHENALTRETURN DO;

      245    20279    2           IF FLG.INT_LVL THEN GOTO NO_GETPS;

  20279   1 000081  82C7 0035                            LB,'0800'X        FLG,AUTO
  20279   1 000083       0800
          1 000084  0558                                 BBT      s:20265,SPREL

      246    20280
      247    20281    2           FLG.SHUFFLED='1'B;

  20281   1 000085  8947 0035                            LBT,'8000'X       FLG,AUTO
  20281   1 000087       8000

      248    20282    2           LIM = GM_SHUF_HI;

  20282   1 000088  E800 0000 0000  xsym                 LDR,R6   GM_SHUF_HI
          1 00008B  EF47 002A                            STR,R6   LIM,AUTO

      249    20283    2           CALL SHUF_DOWN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:91   

  20283   1 00008D  E3C0 04DC                            LNJ,B6   s:0,PREL
          1 00008F       0001                            DC       s:20285,PREL

      250    20284
      251    20285    2           SIZE = PAGES;

  20285   1 000090  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 000092  E806                                 LDR,R6   ,B6
          1 000093  EF47 0027                            STR,R6   SIZE,AUTO

      252    20286    2           CALL ALLOCATE ALTRET(NOGETPS);

  20286   1 000095  E3C0 03B3                            LNJ,B6   s:0,PREL
          1 000097       FFC2                            DC       s:20262,PREL

      253    20287    2           END;

      254    20288
      255    20289    1      GM_XSHUF = GM_XSHUF + 1;

  20289   1 000098  8A80 0000 0000  xsym                 INC      GM_XSHUF

      256    20290    1      CURR$->GM$PPUT.OWNER = 0;

  20290   1 00009B  ECC7 000F                            LDB,B6   CURR$,AUTO
          1 00009D  8786                                 CLH      ,B6

      257    20291    1      CURR$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20291   1 00009E  8806                                 LBF,'0008'X       ,B6
  20291   1 00009F       0008

      258    20292    1      CURR$->GM$PPUT.C.PP = '0'B;

  20292   1 0000A0  8806                                 LBF,'0004'X       ,B6
  20292   1 0000A1       0004
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:92   

      259    20293    1      CURR_LAST$ = ADDR(GM$PPUTA(CURR + CURR$->GM$PPUT.SIZE -1));

  20293   1 0000A2  E847 000E                            LDR,R6   CURR,AUTO
          1 0000A4  EA46 0001                            ADD,R6   1,B6
          1 0000A6  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 0000A9  B856                                 LDR,R3   R6
          1 0000AA  3001                                 SOL,R3   1
          1 0000AB  3EFE                                 ADV,R3   -2
          1 0000AC  CBB5                                 LAB,B4   ,B5,R3
          1 0000AD  CFC7 0018                            STB,B4   CURR_LAST$,AUTO

      260    20294    1      CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20294   1 0000AF  8804                                 LBF,'0008'X       ,B4
  20294   1 0000B0       0008

      261    20295    1      PAGENO = CURR;

  20295   1 0000B1  BCC7 0004                            LDB,B3   @PAGENO,AUTO
          1 0000B3  E847 000E                            LDR,R6   CURR,AUTO
          1 0000B5  EF03                                 STR,R6   ,B3

      262    20296
      263    20297    1      GOTO FINISH_GETPS;

  20297   1 0000B6  0F81 0344                            B        s:20591,PREL

      264    20298
      265    20299        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:93   
      266    20300
      267    20301        /*D* NAME: GMA$GET
      268    20302
      269    20303             CALL: CALL GMA$GET (segment_index,pages,
      270    20304                                 read,write,execute) ALTRET(limit_exceeded);
      271    20305             PARAMETERS:
      272    20306                   segment_index is an index to the segment descriptor in the
      273    20307                   user's ASDT for which memory is to be allocated.
      274    20308                   pages is the number of pages requested.
      275    20309                   read is the read protection Ring number.
      276    20310                   write is the write protection Ring number.
      277    20311                   execute is the execution protection ring number.
      278    20312             ENVIRONMENT:
      279    20313                   Called on behalf of the monitor.
      280    20314             DESCRIPTION:
      281    20315                   This routine is called to get or extend a segment from the
      282    20316                   shufflable memory pool on behalf of the current user.
      283    20317                   All user accounting, limit checking, etc., is performed by
      284    20318                   the calling routine.  If the requested segment is empty,
      285    20319                   the requested pages are allocated.  If the requested
      286    20320                   segment is not empty, an attempt is made to extend the
      287    20321                   the segment forward or backward the required amount.
      288    20322                   If the segment cannot be extended, yet another attempt is
      289    20323                   made to obtain a segment large enough to contain the entire
      290    20324                   segment.  If the segment is extended or a new one obtained,
      291    20325                   the data from the old segment is moved.
      292    20326
      293    20327                   If its not possible to obtain a segment in any of these
      294    20328                   ways then the dread SHUFFLE occurs which is supposed to
      295    20329                   crunch everything down in memory so we can get what we need.
      296    20330                   (Look for bugs here).
      297    20331        */
      298    20332
      299    20333        /*D* NAME: GMA$GETIO
      300    20334             DESCRIPTION:
      301    20335                   Same as GMA$GET, except that memory is allocated from the
      302    20336                   non-shufflable memory pool.
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:94   
      303    20337        */
      304    20338
      305    20339
      306    20340    1   GMA$GET: ENTRY (PAGENO,PAGES,RP,WP,EP) ALTRET;

  20340   1 0000B8  D380 0000 0000  xent GMA$GET         LNJ,B5   X6A_AUTO_N
          1 0000BB       005A 0005                       DC       90,5

      307    20341
      308    20342    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);

  20342   1 0000BD  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 0000C0  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      309    20343    1      GOTO GET0;

  20343   1 0000C2  0F81 000B                            B        s:20350,PREL

      310    20344
      311    20345
      312    20346    1   GMA$GETIO: ENTRY (PAGENO,PAGES,RP,WP,EP) ALTRET;

  20346   1 0000C4  D380 0000 0000  xent GMA$GETIO       LNJ,B5   X6A_AUTO_N
          1 0000C7       005A 0005                       DC       90,5

      313    20347
      314    20348    1      CURR_MEAT$ = ADDR (GM_MEAT_NSHF);

  20348   1 0000C9  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_NSHF
          1 0000CC  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      315    20349    1   GET0:
      316    20350    1      SIZE = PAGES;

  20350   1 0000CE  DCC7 0006            GET0            LDB,B5   @PAGES,AUTO
          1 0000D0  E805                                 LDR,R6   ,B5
          1 0000D1  EF47 0027                            STR,R6   SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:95   

      317    20351    1      IF SIZE = 0 THEN ALTRETURN;

  20351   1 0000D3  6981 0004                            BNEZ,R6  s:20353,PREL

  20351   1 0000D5  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      318    20352
      319    20353    1      FLG = '0'B;

  20353   1 0000D8  8747 0035                            CL       FLG,AUTO

      320    20354    1      REL_SHF_SZ = 0;

  20354   1 0000DA  8747 0028                            CL       REL_SHF_SZ,AUTO

      321    20355
      322    20356    1      CALL LOCK_GATE;

  20356   1 0000DC  E3C0 1109                            LNJ,B6   s:0,PREL
          1 0000DE       0001                            DC       s:20357,PREL

      323    20357    1      G$SEGDESC = G$ASDT_USR$->G$SEGDESCA (SEGX);

  20357   1 0000DF  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 0000E1  B806                                 LDR,R3   ,B6
          1 0000E2  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 0000E5  8CB5                                 LDI      ,B5,R3
          1 0000E6  8D47 0020                            SDI      G$SEGDESC,AUTO

      324    20358
      325    20359        /* Allocate initial segment.
      326    20360        */
      327    20361    1      IF NOT G$SEGDESC.V

  20361   1 0000E8  89C7 0020                            CMZ      G$SEGDESC,AUTO
          1 0000EA  0801 00DB                            BAL      s:20430,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:96   

      328    20362    2      THEN DO;

      329    20363    2           CALL ALLOCATE

  20363   1 0000EC  E3C0 035C                            LNJ,B6   s:0,PREL
          1 0000EE       0003                            DC       s:20365,PREL
          1 0000EF  0F81 0097                            B        s:20414,PREL

      330    20364    3           WHENALTRETURN DO;

      331    20365    3                IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)

  20365   1 0000F1  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 0000F4  EDC7 001A                            CMB,B6   CURR_MEAT$,AUTO
          1 0000F6  0981 001B                            BNE      s:20375,PREL

      332    20366    4                THEN DO;

      333    20367    4                     FLG.SHUFFLED='1'B;

  20367   1 0000F8  8947 0035                            LBT,'8000'X       FLG,AUTO
  20367   1 0000FA       8000

      334    20368    4                     LIM = GM_SHUF_HI;

  20368   1 0000FB  E800 0000 0000  xsym                 LDR,R6   GM_SHUF_HI
          1 0000FE  EF47 002A                            STR,R6   LIM,AUTO

      335    20369    4                     CALL SHUF_DOWN;

  20369   1 000100  E3C0 0469                            LNJ,B6   s:0,PREL
          1 000102       0001                            DC       s:20370,PREL

      336    20370    4                     SIZE = PAGES;

  20370   1 000103  ECC7 0006                            LDB,B6   @PAGES,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:97   
          1 000105  E806                                 LDR,R6   ,B6
          1 000106  EF47 0027                            STR,R6   SIZE,AUTO

      337    20371    4                     CALL ALLOCATE

  20371   1 000108  E3C0 0340                            LNJ,B6   s:0,PREL
          1 00010A       0003                            DC       s:20372,PREL
          1 00010B  0F81 0004                            B        s:20373,PREL

      338    20372    5                     WHENALTRETURN DO; CALL SHFL_FAILED; END;

  20372   1 00010D  E3C0 0312                            LNJ,B6   s:0,PREL
          1 00010F       0001                            DC       s:20373,PREL

      339    20373    4                     END;

  20373   1 000110  0F81 0076                            B        s:20414,PREL

      340    20374    4                ELSE DO;

      341    20375    4                     CURR_MEAT$ = ADDR(GM_MEAT_SHUF);

  20375   1 000112  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000115  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

  20375   1                              GET_PREV_4NSHF  null
      342    20376    4   GET_PREV_4NSHF:   ;
      343    20377    4                     CURR$=ADDR(GM$PPUTA(GM_SHUF_HI));

  20377   1 000117  EC80 0000 0000  xsym GET_PREV_4NSHF  LDB,B6   G$PPUT$
          1 00011A  B800 0000 0000  xsym                 LDR,R3   GM_SHUF_HI
          1 00011D  3001                                 SOL,R3   1
          1 00011E  DBB6                                 LAB,B5   ,B6,R3
          1 00011F  DFC7 000F                            STB,B5   CURR$,AUTO

      344    20378    4                     IF CURR$->GM$PPUT.C.INUSE ~= '0'B OR

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:98   
  20378   1 000121  8285                                 LB,'0020'X        ,B5
  20378   1 000122       0020
          1 000123  0501 0008                            BBT      s:20381,PREL
          1 000125  CCC7 0006                            LDB,B4   @PAGES,AUTO
          1 000127  E845 0001                            LDR,R6   1,B5
          1 000129  E904                                 CMR,R6   ,B4
          1 00012A  0281 0014                            BGE      s:20388,PREL

      345    20379    4                       CURR$->GM$PPUT.SIZE < PAGES
      346    20380    5                     THEN DO;

      347    20381    5                          IF FLG.SHUFFLED THEN CALL SHFL_FAILED;

  20381   1 00012C  89C7 0035                            CMZ      FLG,AUTO
          1 00012E  0881 0004                            BAGE     s:20382,PREL

  20381   1 000130  E3C0 02EF                            LNJ,B6   s:0,PREL
          1 000132       0001                            DC       s:20382,PREL

      348    20382    5                          FLG.SHUFFLED = '1'B;

  20382   1 000133  8947 0035                            LBT,'8000'X       FLG,AUTO
  20382   1 000135       8000

      349    20383    5                          LIM = GM_SHUF_HI;

  20383   1 000136  E800 0000 0000  xsym                 LDR,R6   GM_SHUF_HI
          1 000139  EF47 002A                            STR,R6   LIM,AUTO

      350    20384    5                          CALL SHUF_DOWN;

  20384   1 00013B  E3C0 042E                            LNJ,B6   s:0,PREL
          1 00013D       0001                            DC       s:20385,PREL

      351    20385    5                          GOTO GET_PREV_4NSHF;

  20385   1 00013E  0FD9                                 B        s:20375,SPREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:99   

      352    20386    5                          END/*do if last shuf extent is not free*/;
      353    20387
      354    20388    4                     SIZE = CURR$->GM$PPUT.SIZE;

  20388   1 00013F  EF47 0027                            STR,R6   SIZE,AUTO

      355    20389
      356    20390    4                     CURR = (GM_SHUF_HI+1) - SIZE;

  20390   1 000141  E200 0000 0000  xsym                 SUB,R6   GM_SHUF_HI
          1 000144  8256                                 NEG      R6
          1 000145  6E01                                 ADV,R6   1
          1 000146  EF47 000E                            STR,R6   CURR,AUTO

      357    20391    4                     CURR$ = ADDR(GM$PPUTA(CURR));

  20391   1 000148  A856                                 LDR,R2   R6
          1 000149  2001                                 SOL,R2   1
          1 00014A  BBA6                                 LAB,B3   ,B6,R2
          1 00014B  BFC7 000F                            STB,B3   CURR$,AUTO

      358    20392
      359    20393    4                     IF SIZE ~= PAGES

  20393   1 00014D  D847 0027                            LDR,R5   SIZE,AUTO
          1 00014F  D904                                 CMR,R5   ,B4
          1 000150  0901 001E                            BE       s:20404,PREL

      360    20394    5                     THEN DO;

      361    20395    5                          IF FLG.SPLIT_SHUF_SEG THEN CALL SHFL_FAILED;

  20395   1 000152  82C7 0035                            LB,'4000'X        FLG,AUTO
  20395   1 000154       4000
          1 000155  0581 0004                            BBF      s:20396,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:100  
  20395   1 000157  E3C0 02C8                            LNJ,B6   s:0,PREL
          1 000159       0001                            DC       s:20396,PREL

      362    20396    5                          FLG.SPLIT_SHUF_SEG = '1'B;

  20396   1 00015A  8947 0035                            LBT,'4000'X       FLG,AUTO
  20396   1 00015C       4000

      363    20397    5                          SIZE = SIZE - PAGES;

  20397   1 00015D  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 00015F  E847 0027                            LDR,R6   SIZE,AUTO
          1 000161  E206                                 SUB,R6   ,B6
          1 000162  EF47 0027                            STR,R6   SIZE,AUTO

      364    20398    5                          REL_SHF_SZ = SIZE;

  20398   1 000164  EF47 0028                            STR,R6   REL_SHF_SZ,AUTO

      365    20399    5                          REL_SHF_PG = CURR;

  20399   1 000166  D847 000E                            LDR,R5   CURR,AUTO
          1 000168  DF47 0029                            STR,R5   REL_SHF_PG,AUTO

      366    20400    5                          CALL GETIT;      /*get first part of the segment*/

  20400   1 00016A  E3C0 0341                            LNJ,B6   s:0,PREL
          1 00016C       0001                            DC       s:20401,PREL

      367    20401    5                          GOTO GET_PREV_4NSHF;

  20401   1 00016D  0F81 FFA9                            B        s:20375,PREL

      368    20402    5                          END;
      369    20403
      370    20404    4                     CALL GETIT;      /*get it as shuf to keep meat tables ok*/

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:101  
  20404   1 00016F  E3C0 033C                            LNJ,B6   s:0,PREL
          1 000171       0001                            DC       s:20406,PREL

      371    20405
      372    20406    4                     GM_SHUF_HI = GM_SHUF_HI - SIZE;

  20406   1 000172  E800 0000 0000  xsym                 LDR,R6   GM_SHUF_HI
          1 000175  E247 0027                            SUB,R6   SIZE,AUTO
          1 000177  EF00 0000 0000  xsym                 STR,R6   GM_SHUF_HI

      373    20407    4                     GM_NSHF_CURR = GM_NSHF_CURR + SIZE;

  20407   1 00017A  D800 0000 0000  xsym                 LDR,R5   GM_NSHF_CURR
          1 00017D  DA47 0027                            ADD,R5   SIZE,AUTO
          1 00017F  DF00 0000 0000  xsym                 STR,R5   GM_NSHF_CURR

      374    20408
      375    20409    4                     CURR_MEAT$ = ADDR(GM_MEAT_NSHF);

  20409   1 000182  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_NSHF
          1 000185  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      376    20410    4                     END/*do if nshuf*/;

      377    20411    3                END/*altret from initial allocate*/;

      378    20412
      379    20413
      380    20414    2           CALL GUD$ASD (G$ASDT_MCL$->USEGDESC);

  20414   1 000187  BB80 0000 0000  xsym                 LAB,B3   G$ASDT_MCL$
          1 00018A  CBF0 0100                            LAB,B4   256,IMO
          1 00018C  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 00018F       0001                            DC       s:20415,PREL

      381    20415    2           G$SEGDESC.V = '1'B;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:102  
  20415   1 000190  8947 0020                            LBT,'8000'X       G$SEGDESC,AUTO
  20415   1 000192       8000

      382    20416    2           G$SEGDESC.BASE = CURR;

  20416   1 000193  E847 000E                            LDR,R6   CURR,AUTO
          1 000195  EAC7 0020                            SRM,R6,'7FFF'X    G$SEGDESC,AUTO
          1 000197       7FFF

      383    20417    2           G$SEGDESC.SIZE = SIZE - 1;

  20417   1 000198  D847 0027                            LDR,R5   SIZE,AUTO
          1 00019A  5EFF                                 ADV,R5   -1
          1 00019B  DAC7 0021                            SRM,R5,'01FF'X    G$SEGDESC+1,AUTO
          1 00019D       01FF

      384    20418    2           G$SEGDESC.RP=RP;

  20418   1 00019E  ECC7 0008                            LDB,B6   @RP,AUTO
          1 0001A0  C806                                 LDR,R4   ,B6
          1 0001A1  CAC7 0021                            SRM,R4,'C000'X    G$SEGDESC+1,AUTO
          1 0001A3       C000

      385    20419    2           G$SEGDESC.WP=WP;

  20419   1 0001A4  DCC7 000A                            LDB,B5   @WP,AUTO
          1 0001A6  C805                                 LDR,R4   ,B5
          1 0001A7  4042                                 SOR,R4   2
          1 0001A8  CAC7 0021                            SRM,R4,'3000'X    G$SEGDESC+1,AUTO
          1 0001AA       3000

      386    20420    2           G$SEGDESC.EP=EP;

  20420   1 0001AB  CCC7 000C                            LDB,B4   @EP,AUTO
          1 0001AD  C804                                 LDR,R4   ,B4
          1 0001AE  4044                                 SOR,R4   4
          1 0001AF  CAC7 0021                            SRM,R4,'0C00'X    G$SEGDESC+1,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:103  
          1 0001B1       0C00

      387    20421    2           CURR$ = ADDR(GM$PPUTA(CURR));

  20421   1 0001B2  BC80 0000 0000  xsym                 LDB,B3   G$PPUT$
          1 0001B5  B856                                 LDR,R3   R6
          1 0001B6  3001                                 SOL,R3   1
          1 0001B7  ABB3                                 LAB,B2   ,B3,R3
          1 0001B8  AFC7 000F                            STB,B2   CURR$,AUTO

      388    20422    2           CURR$->GM$PPUT.OWNER=G$JIT.USR#;

  20422   1 0001BA  9C80 0000 0000  xsym                 LDB,B1   G$JIT$
          1 0001BD  C841 0004                            LDR,R4   4,B1
          1 0001BF  C570 00FF                            AND,R4   255,IMO
          1 0001C1  C782                                 STH,R4   ,B2

      389    20423    2           GET_TYPE = 0;

  20423   1 0001C2  8747 0036                            CL       GET_TYPE,AUTO

      390    20424
      391    20425    2           END/*allocate initial segment*/;

  20425   1 0001C4  0F81 01DE                            B        s:20559,PREL

      392    20426        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:104  
      393    20427        /* Extend currently allocated segment.
      394    20428        */
      395    20429    2      ELSE DO;

      396    20430    2           IF CURR_MEAT$ = ADDR (GM_MEAT_NSHF)

  20430   1 0001C6  CB80 0000 0000  xsym                 LAB,B4   GM_MEAT_NSHF
          1 0001C9  CDC7 001A                            CMB,B4   CURR_MEAT$,AUTO
          1 0001CB  0981 0004                            BNE      s:20434,PREL

      397    20431    2           THEN CALL MMSCREECH;            /* Can't extend non-shufflable memory */

  20431   1 0001CD  E3C0 1158                            LNJ,B6   s:0,PREL
          1 0001CF       0001                            DC       s:20434,PREL

      398    20432
      399    20433    2   RE_XTND:
      400    20434    2           CURR = G$SEGDESC.BASE;

  20434   1 0001D0  E847 0020            RE_XTND         LDR,R6   G$SEGDESC,AUTO
          1 0001D2  E570 7FFF                            AND,R6   32767,IMO
          1 0001D4  EF47 000E                            STR,R6   CURR,AUTO

      401    20435    2           NEXT = CURR + G$SEGDESC.SIZE +1;

  20435   1 0001D6  D847 0021                            LDR,R5   G$SEGDESC+1,AUTO
          1 0001D8  D570 01FF                            AND,R5   511,IMO
          1 0001DA  DA56                                 ADD,R5   R6
          1 0001DB  5E01                                 ADV,R5   1
          1 0001DC  DF47 0011                            STR,R5   NEXT,AUTO

      402    20436    2           NEXT$=ADDR(GM$PPUTA(NEXT));

  20436   1 0001DE  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 0001E1  B855                                 LDR,R3   R5
          1 0001E2  3001                                 SOL,R3   1
          1 0001E3  DBB6                                 LAB,B5   ,B6,R3
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:105  
          1 0001E4  DFC7 0012                            STB,B5   NEXT$,AUTO

      403    20437
      404    20438    2           IF NEXT$->GM$PPUT.C.INUSE = '0'B AND

  20438   1 0001E6  8285                                 LB,'0020'X        ,B5
  20438   1 0001E7       0020
          1 0001E8  0501 0049                            BBT      s:20465,PREL
          1 0001EA  C845 0001                            LDR,R4   1,B5
          1 0001EC  C947 0027                            CMR,R4   SIZE,AUTO
          1 0001EE  0201 0043                            BL       s:20465,PREL
          1 0001F0  D900 0000 0000  xsym                 CMR,R5   GM_SHUF_HI
          1 0001F3  0301 003E                            BG       s:20465,PREL

      405    20439    2             NEXT$->GM$PPUT.SIZE >= SIZE AND
      406    20440    2             NEXT <= GM_SHUF_HI
      407    20441    3           THEN DO;

      408    20442    3                CURR=NEXT;

  20442   1 0001F5  E855                                 LDR,R6   R5
          1 0001F6  EF47 000E                            STR,R6   CURR,AUTO

      409    20443    3                SIZE=PAGES;

  20443   1 0001F8  CCC7 0006                            LDB,B4   @PAGES,AUTO
          1 0001FA  C804                                 LDR,R4   ,B4
          1 0001FB  CF47 0027                            STR,R4   SIZE,AUTO

      410    20444    3                CALL GETIT;

  20444   1 0001FD  E3C0 02AE                            LNJ,B6   s:0,PREL
          1 0001FF       0001                            DC       s:20447,PREL

      411    20445
      412    20446                                                /*now combine them into one extent    */
      413    20447    3                CURR=G$SEGDESC.BASE;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:106  

  20447   1 000200  E847 0020                            LDR,R6   G$SEGDESC,AUTO
          1 000202  E570 7FFF                            AND,R6   32767,IMO
          1 000204  EF47 000E                            STR,R6   CURR,AUTO

      414    20448    3                L=G$SEGDESC.SIZE+SIZE;

  20448   1 000206  D847 0021                            LDR,R5   G$SEGDESC+1,AUTO
          1 000208  D570 01FF                            AND,R5   511,IMO
          1 00020A  DA47 0027                            ADD,R5   SIZE,AUTO
          1 00020C  DF47 0023                            STR,R5   L,AUTO

      415    20449    3                G$SEGDESC.SIZE=L;

  20449   1 00020E  DAC7 0021                            SRM,R5,'01FF'X    G$SEGDESC+1,AUTO
  20449   1 000210       01FF

      416    20450    3                CURR$ = ADDR(GM$PPUTA(CURR));

  20450   1 000211  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000214  B856                                 LDR,R3   R6
          1 000215  3001                                 SOL,R3   1
          1 000216  DBB6                                 LAB,B5   ,B6,R3
          1 000217  DFC7 000F                            STB,B5   CURR$,AUTO

      417    20451    3                PPUT$ = ADDR(GM$PPUTA(CURR+L));

  20451   1 000219  EA55                                 ADD,R6   R5
          1 00021A  A856                                 LDR,R2   R6
          1 00021B  2001                                 SOL,R2   1
          1 00021C  CBA6                                 LAB,B4   ,B6,R2
          1 00021D  CFC7 0025                            STB,B4   PPUT$,AUTO

      418    20452    3                L=L+1;

  20452   1 00021F  8AC7 0023                            INC      L,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:107  
      419    20453    3                CURR$->GM$PPUT.SIZE = L;

  20453   1 000221  E847 0023                            LDR,R6   L,AUTO
          1 000223  EF45 0001                            STR,R6   1,B5

      420    20454    3                PPUT$->GM$PPUT.SIZE = L;

  20454   1 000225  D847 0023                            LDR,R5   L,AUTO
          1 000227  DF44 0001                            STR,R5   1,B4

      421    20455    3                CURR$->GM$PPUT.C.LASTP='0'B;

  20455   1 000229  8805                                 LBF,'0040'X       ,B5
  20455   1 00022A       0040

      422    20456    3                PPUT$->GM$PPUT.C.FIRSTP='0'B;

  20456   1 00022B  8804                                 LBF,'0080'X       ,B4
  20456   1 00022C       0080

      423    20457    3                GET_TYPE = 1;

  20457   1 00022D  6C01                                 LDV,R6   1
          1 00022E  EF47 0036                            STR,R6   GET_TYPE,AUTO

      424    20458    3                END/*extend current segment*/;

  20458   1 000230  0F81 0172                            B        s:20559,PREL

      425    20459
      426    20460        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:108  
      427    20461
      428    20462        /*      Check if previous segment will do.
      429    20463        */
      430    20464    3           ELSE DO;

      431    20465    3                PREV=CURR-1;

  20465   1 000232  6EFF                                 ADV,R6   -1
          1 000233  EF47 0014                            STR,R6   PREV,AUTO

      432    20466    3                PREV$=ADDR(GM$PPUTA(CURR-GM$PPUTA.SIZE(PREV)));

  20466   1 000235  A856                                 LDR,R2   R6
          1 000236  2001                                 SOL,R2   1
          1 000237  2E01                                 ADV,R2   1
          1 000238  C847 000E                            LDR,R4   CURR,AUTO
          1 00023A  C226                                 SUB,R4   ,B6,R2
          1 00023B  9854                                 LDR,R1   R4
          1 00023C  1001                                 SOL,R1   1
          1 00023D  CB96                                 LAB,B4   ,B6,R1
          1 00023E  CFC7 0015                            STB,B4   PREV$,AUTO

      433    20467    3                IF PREV$->GM$PPUT.C.INUSE = '0'B AND

  20467   1 000240  8284                                 LB,'0020'X        ,B4
  20467   1 000241       0020
          1 000242  0501 00BD                            BBT      s:20516,PREL
          1 000244  C844 0001                            LDR,R4   1,B4
          1 000246  C947 0027                            CMR,R4   SIZE,AUTO
          1 000248  0201 00B7                            BL       s:20516,PREL

      434    20468    3                  PREV$->GM$PPUT.SIZE >= SIZE
      435    20469    4                THEN DO;

      436    20470    4                     SIZE=PREV$->GM$PPUT.SIZE;

  20470   1 00024A  CF47 0027                            STR,R4   SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:109  

      437    20471    4                     CURR=CURR-SIZE;

  20471   1 00024C  C247 000E                            SUB,R4   CURR,AUTO
          1 00024E  8254                                 NEG      R4
          1 00024F  CF47 000E                            STR,R4   CURR,AUTO

      438    20472    4                     CALL GETIT;           /* get the entire segment             */

  20472   1 000251  E3C0 025A                            LNJ,B6   s:0,PREL
          1 000253       0001                            DC       s:20474,PREL

      439    20473
      440    20474    4                     GM$PPUTA.SIZE(CURR)=G$SEGDESC.SIZE+1;

  20474   1 000254  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000257  B847 000E                            LDR,R3   CURR,AUTO
          1 000259  3001                                 SOL,R3   1
          1 00025A  3E01                                 ADV,R3   1
          1 00025B  E847 0021                            LDR,R6   G$SEGDESC+1,AUTO
          1 00025D  E570 01FF                            AND,R6   511,IMO
          1 00025F  6E01                                 ADV,R6   1
          1 000260  EF36                                 STR,R6   ,B6,R3

      441    20475    4                     L=GM$PPUTA.SIZE(CURR);

  20475   1 000261  B847 000E                            LDR,R3   CURR,AUTO
          1 000263  3001                                 SOL,R3   1
          1 000264  3E01                                 ADV,R3   1
          1 000265  E836                                 LDR,R6   ,B6,R3
          1 000266  EF47 0023                            STR,R6   L,AUTO

      442    20476    4                     CALL MAP (CURR);

  20476   1 000268  DBC7 000E                            LAB,B5   CURR,AUTO
          1 00026A  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 00026C  E3C0 0F43                            LNJ,B6   s:0,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:110  
          1 00026E       0001                            DC       s:20477,PREL

      443    20477    4                     CALL GMV$MOVESEG (L,G$SEGDESC);

  20477   1 00026F  EBC7 0020                            LAB,B6   G$SEGDESC,AUTO
          1 000271  EFC7 0058                            STB,B6   @PAGENUM+6,AUTO
          1 000273  DBC7 0023                            LAB,B5   L,AUTO
          1 000275  DFC7 0056                            STB,B5   @PAGENUM+4,AUTO
          1 000277  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000279  CBF0 0200                            LAB,B4   512,IMO
          1 00027B  E380 0000 0000  xent                 LNJ,B6   GMV$MOVESEG
          1 00027E       0001                            DC       s:20479,PREL

      444    20478
      445    20479    4                     SIZE=G$SEGDESC.SIZE+1 + PAGES;

  20479   1 00027F  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 000281  E847 0021                            LDR,R6   G$SEGDESC+1,AUTO
          1 000283  E570 01FF                            AND,R6   511,IMO
          1 000285  EA06                                 ADD,R6   ,B6
          1 000286  6E01                                 ADV,R6   1
          1 000287  EF47 0027                            STR,R6   SIZE,AUTO

      446    20480    4                     CURR_LAST=NEXT-1;

  20480   1 000289  D847 0011                            LDR,R5   NEXT,AUTO
          1 00028B  5EFF                                 ADV,R5   -1
          1 00028C  DF47 0017                            STR,R5   CURR_LAST,AUTO

      447    20481    4                     NEXT=G$SEGDESC.BASE;

  20481   1 00028E  C847 0020                            LDR,R4   G$SEGDESC,AUTO
          1 000290  C570 7FFF                            AND,R4   32767,IMO
          1 000292  CF47 0011                            STR,R4   NEXT,AUTO

      448    20482    4                     CALL ADJ_PP;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:111  
  20482   1 000294  E3C0 050C                            LNJ,B6   s:0,PREL
          1 000296       0001                            DC       s:20484,PREL

      449    20483                                                /*fix pput for the extent we moved to*/
      450    20484    4                     GM$PPUTA(CURR)=GM$PPUTA(PREV+1);

  20484   1 000297  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 00029A  B847 0014                            LDR,R3   PREV,AUTO
          1 00029C  3E01                                 ADV,R3   1
          1 00029D  8CB6                                 LDI      ,B6,R3
          1 00029E  A847 000E                            LDR,R2   CURR,AUTO
          1 0002A0  8D26                                 SDI      ,B6,R2

      451    20485    4                     CURR$=ADDR(GM$PPUTA(CURR));

  20485   1 0002A1  A847 000E                            LDR,R2   CURR,AUTO
          1 0002A3  2001                                 SOL,R2   1
          1 0002A4  DBA6                                 LAB,B5   ,B6,R2
          1 0002A5  DFC7 000F                            STB,B5   CURR$,AUTO

      452    20486    4                     CURR$->GM$PPUT.C.LASTP='0'B;

  20486   1 0002A7  8805                                 LBF,'0040'X       ,B5
  20486   1 0002A8       0040

      453    20487    4                     PREV=CURR+SIZE-1;

  20487   1 0002A9  E847 000E                            LDR,R6   CURR,AUTO
          1 0002AB  EA47 0027                            ADD,R6   SIZE,AUTO
          1 0002AD  6EFF                                 ADV,R6   -1
          1 0002AE  EF47 0014                            STR,R6   PREV,AUTO

      454    20488    4                     GM$PPUTA(PREV)=GM$PPUTA(CURR_LAST);

  20488   1 0002B0  B847 0017                            LDR,R3   CURR_LAST,AUTO
          1 0002B2  8CB6                                 LDI      ,B6,R3
          1 0002B3  A847 0014                            LDR,R2   PREV,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:112  
          1 0002B5  8D26                                 SDI      ,B6,R2

      455    20489    4                     CURR$=ADDR(GM$PPUTA(PREV));

  20489   1 0002B6  2001                                 SOL,R2   1
          1 0002B7  CBA6                                 LAB,B4   ,B6,R2
          1 0002B8  CFC7 000F                            STB,B4   CURR$,AUTO

      456    20490    4                     CURR$->GM$PPUT.C.FIRSTP='0'B;

  20490   1 0002BA  8804                                 LBF,'0080'X       ,B4
  20490   1 0002BB       0080

      457    20491    4                     GM$PPUTA.SIZE(CURR)=SIZE;

  20491   1 0002BC  9847 000E                            LDR,R1   CURR,AUTO
          1 0002BE  1001                                 SOL,R1   1
          1 0002BF  1E01                                 ADV,R1   1
          1 0002C0  E847 0027                            LDR,R6   SIZE,AUTO
          1 0002C2  EF16                                 STR,R6   ,B6,R1

      458    20492    4                     GM$PPUTA.SIZE(PREV)=SIZE;

  20492   1 0002C3  2E01                                 ADV,R2   1
          1 0002C4  EF26                                 STR,R6   ,B6,R2

      459    20493    4                     G$SEGDESC.BASE=CURR;

  20493   1 0002C5  D847 000E                            LDR,R5   CURR,AUTO
          1 0002C7  DAC7 0020                            SRM,R5,'7FFF'X    G$SEGDESC,AUTO
          1 0002C9       7FFF

      460    20494    4                     G$SEGDESC.SIZE=SIZE-1;

  20494   1 0002CA  6EFF                                 ADV,R6   -1
          1 0002CB  EAC7 0021                            SRM,R6,'01FF'X    G$SEGDESC+1,AUTO
          1 0002CD       01FF
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:113  

      461    20495                                 /*fix pput for unallocated pgs at end of the extent*/
      462    20496    4                     CURR=PREV+1;

  20496   1 0002CE  D847 0014                            LDR,R5   PREV,AUTO
          1 0002D0  5E01                                 ADV,R5   1
          1 0002D1  DF47 000E                            STR,R5   CURR,AUTO

      463    20497    4                     CURR$=ADDR(GM$PPUTA(CURR));

  20497   1 0002D3  9855                                 LDR,R1   R5
          1 0002D4  1001                                 SOL,R1   1
          1 0002D5  DB96                                 LAB,B5   ,B6,R1
          1 0002D6  DFC7 000F                            STB,B5   CURR$,AUTO

      464    20498    4                     PPUT$=ADDR(GM$PPUTA(CURR_LAST));

  20498   1 0002D8  3001                                 SOL,R3   1
          1 0002D9  CBB6                                 LAB,B4   ,B6,R3
          1 0002DA  CFC7 0025                            STB,B4   PPUT$,AUTO

      465    20499    4                     IF CURR_LAST-CURR+1 ~= 0

  20499   1 0002DC  D247 0017                            SUB,R5   CURR_LAST,AUTO
          1 0002DE  8255                                 NEG      R5
          1 0002DF  5E01                                 ADV,R5   1
          1 0002E0  5901 001A                            BEZ,R5   s:20509,PREL

      466    20500    5                     THEN DO;

      467    20501    5                          GM$PPUTA.SIZE(CURR)=CURR_LAST-CURR+1;

  20501   1 0002E2  D847 0017                            LDR,R5   CURR_LAST,AUTO
          1 0002E4  D247 000E                            SUB,R5   CURR,AUTO
          1 0002E6  1E01                                 ADV,R1   1
          1 0002E7  5E01                                 ADV,R5   1
          1 0002E8  DF16                                 STR,R5   ,B6,R1
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:114  

      468    20502    5                          GM$PPUTA.SIZE(CURR_LAST)=CURR_LAST-CURR+1;

  20502   1 0002E9  D847 0017                            LDR,R5   CURR_LAST,AUTO
          1 0002EB  D247 000E                            SUB,R5   CURR,AUTO
          1 0002ED  3E01                                 ADV,R3   1
          1 0002EE  5E01                                 ADV,R5   1
          1 0002EF  DF36                                 STR,R5   ,B6,R3

      469    20503    5                          CURR$->GM$PPUT.C.LASTP = '0'B;

  20503   1 0002F0  8805                                 LBF,'0040'X       ,B5
  20503   1 0002F1       0040

      470    20504    5                          PPUT$->GM$PPUT.C.FIRSTP = '0'B;

  20504   1 0002F2  8804                                 LBF,'0080'X       ,B4
  20504   1 0002F3       0080

      471    20505    5                          CURR$->GM$PPUT.C.FIRSTP = '1'B;

  20505   1 0002F4  8905                                 LBT,'0080'X       ,B5
  20505   1 0002F5       0080

      472    20506    5                          PPUT$->GM$PPUT.C.LASTP = '1'B;

  20506   1 0002F6  8904                                 LBT,'0040'X       ,B4
  20506   1 0002F7       0040

      473    20507    5                          CALL DEALLOCATE; /* return the extra pages             */

  20507   1 0002F8  E3C0 0826                            LNJ,B6   s:0,PREL
          1 0002FA       0001                            DC       s:20509,PREL

      474    20508    5                          END;

      475    20509    4                     GET_TYPE = 2;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:115  

  20509   1 0002FB  6C02                                 LDV,R6   2
          1 0002FC  EF47 0036                            STR,R6   GET_TYPE,AUTO

      476    20510    4                     END/*use prev segment*/;

  20510   1 0002FE  0F81 00A4                            B        s:20559,PREL

      477    20511
      478    20512        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:116  
      479    20513        /*      Move to a segment large enough
      480    20514        */
      481    20515    4                ELSE DO;

      482    20516    4                     CURR = G$SEGDESC.BASE;

  20516   1 000300  C847 0020                            LDR,R4   G$SEGDESC,AUTO
          1 000302  C570 7FFF                            AND,R4   32767,IMO
          1 000304  CF47 000E                            STR,R4   CURR,AUTO

      483    20517    4                     SIZE=GM$PPUTA.SIZE(CURR)+SIZE;

  20517   1 000306  9854                                 LDR,R1   R4
          1 000307  1001                                 SOL,R1   1
          1 000308  1E01                                 ADV,R1   1
          1 000309  E816                                 LDR,R6   ,B6,R1
          1 00030A  EA47 0027                            ADD,R6   SIZE,AUTO
          1 00030C  EF47 0027                            STR,R6   SIZE,AUTO

      484    20518
      485    20519    4                     CALL ALLOCATE

  20519   1 00030E  E3C0 013A                            LNJ,B6   s:0,PREL
          1 000310       0003                            DC       s:20521,PREL
          1 000311  0F81 003B                            B        s:20535,PREL

      486    20520    5                     WHENALTRETURN DO;

      487    20521    5                          IF FLG.SHUFFLED THEN CALL SHFL_FAILED;

  20521   1 000313  89C7 0035                            CMZ      FLG,AUTO
          1 000315  0881 0004                            BAGE     s:20523,PREL

  20521   1 000317  E3C0 0108                            LNJ,B6   s:0,PREL
          1 000319       0001                            DC       s:20523,PREL

      488    20522
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:117  
      489    20523    5                          FLG.SHUFFLED = '1'B;

  20523   1 00031A  8947 0035                            LBT,'8000'X       FLG,AUTO
  20523   1 00031C       8000

      490    20524    5                          LIM = G$SEGDESC.BASE+G$SEGDESC.SIZE;

  20524   1 00031D  E847 0020                            LDR,R6   G$SEGDESC,AUTO
          1 00031F  E570 7FFF                            AND,R6   32767,IMO
          1 000321  D847 0021                            LDR,R5   G$SEGDESC+1,AUTO
          1 000323  D570 01FF                            AND,R5   511,IMO
          1 000325  EA55                                 ADD,R6   R5
          1 000326  EF47 002A                            STR,R6   LIM,AUTO

      491    20525    5                          CALL SHUF_DOWN;

  20525   1 000328  E3C0 0241                            LNJ,B6   s:0,PREL
          1 00032A       0001                            DC       s:20526,PREL

      492    20526    5                          CALL CHKPPT;

  20526   1 00032B  E3C0 0ED8                            LNJ,B6   s:0,PREL
          1 00032D       0001                            DC       s:20527,PREL

      493    20527    5                          CALL SHUF_UP;

  20527   1 00032E  E3C0 0364                            LNJ,B6   s:0,PREL
          1 000330       0001                            DC       s:20528,PREL

      494    20528    5                          CALL GUD$ASD (G$ASDT_MCL$->USEGDESC);

  20528   1 000331  BB80 0000 0000  xsym                 LAB,B3   G$ASDT_MCL$
          1 000334  CBF0 0100                            LAB,B4   256,IMO
          1 000336  E380 0000 0000  xent                 LNJ,B6   GUD$ASD
          1 000339       0001                            DC       s:20529,PREL

      495    20529    5                          SIZE = PAGES;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:118  

  20529   1 00033A  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 00033C  E806                                 LDR,R6   ,B6
          1 00033D  EF47 0027                            STR,R6   SIZE,AUTO

      496    20530    5                          G$SEGDESC = G$ASDT_USR$->G$SEGDESCA(SEGX);

  20530   1 00033F  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 000341  B805                                 LDR,R3   ,B5
          1 000342  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          1 000345  8CB4                                 LDI      ,B4,R3
          1 000346  8D47 0020                            SDI      G$SEGDESC,AUTO

      497    20531    5                          FLG.RE_EXTENDED = '1'B;

  20531   1 000348  8947 0035                            LBT,'0200'X       FLG,AUTO
  20531   1 00034A       0200

      498    20532    5                          GOTO RE_XTND;

  20532   1 00034B  0F81 FE84                            B        s:20434,PREL

      499    20533    5                          END;
      500    20534
      501    20535    4                     CALL MAP(CURR);

  20535   1 00034D  EBC7 000E                            LAB,B6   CURR,AUTO
          1 00034F  EFC7 0052                            STB,B6   SAVE_SZ+4,AUTO
          1 000351  E3C0 0E5E                            LNJ,B6   s:0,PREL
          1 000353       0001                            DC       s:20536,PREL

      502    20536    4                     L=G$SEGDESC.SIZE+1;

  20536   1 000354  E847 0021                            LDR,R6   G$SEGDESC+1,AUTO
          1 000356  E570 01FF                            AND,R6   511,IMO
          1 000358  6E01                                 ADV,R6   1
          1 000359  EF47 0023                            STR,R6   L,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:119  

      503    20537    4                     CALL GMV$MOVESEG (L,G$SEGDESC);

  20537   1 00035B  EBC7 0020                            LAB,B6   G$SEGDESC,AUTO
          1 00035D  EFC7 0058                            STB,B6   @PAGENUM+6,AUTO
          1 00035F  DBC7 0023                            LAB,B5   L,AUTO
          1 000361  DFC7 0056                            STB,B5   @PAGENUM+4,AUTO
          1 000363  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000365  CBF0 0200                            LAB,B4   512,IMO
          1 000367  E380 0000 0000  xent                 LNJ,B6   GMV$MOVESEG
          1 00036A       0001                            DC       s:20538,PREL

      504    20538    4                     NEXT=G$SEGDESC.BASE;

  20538   1 00036B  E847 0020                            LDR,R6   G$SEGDESC,AUTO
          1 00036D  E570 7FFF                            AND,R6   32767,IMO
          1 00036F  EF47 0011                            STR,R6   NEXT,AUTO

      505    20539    4                     CALL ADJ_PP;

  20539   1 000371  E3C0 042F                            LNJ,B6   s:0,PREL
          1 000373       0001                            DC       s:20540,PREL

      506    20540    4                     NEXT=CURR;

  20540   1 000374  E847 000E                            LDR,R6   CURR,AUTO
          1 000376  EF47 0011                            STR,R6   NEXT,AUTO

      507    20541    4                     CURR=G$SEGDESC.BASE;

  20541   1 000378  E847 0020                            LDR,R6   G$SEGDESC,AUTO
          1 00037A  E570 7FFF                            AND,R6   32767,IMO
          1 00037C  EF47 000E                            STR,R6   CURR,AUTO

      508    20542    4                     CURR$=ADDR(GM$PPUTA(CURR));

  20542   1 00037E  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:120  
          1 000381  B856                                 LDR,R3   R6
          1 000382  3001                                 SOL,R3   1
          1 000383  DBB6                                 LAB,B5   ,B6,R3
          1 000384  DFC7 000F                            STB,B5   CURR$,AUTO

      509    20543    4                     NEXT$ = ADDR(GM$PPUTA(NEXT));

  20543   1 000386  A847 0011                            LDR,R2   NEXT,AUTO
          1 000388  2001                                 SOL,R2   1
          1 000389  CBA6                                 LAB,B4   ,B6,R2
          1 00038A  CFC7 0012                            STB,B4   NEXT$,AUTO

      510    20544    4                     NEXT$->GM$PPUT.OWNER=CURR$->GM$PPUT.OWNER;

  20544   1 00038C  D285                                 LLH,R5   ,B5
          1 00038D  D784                                 STH,R5   ,B4

      511    20545    4                     G$SEGDESC.BASE = NEXT;

  20545   1 00038E  D847 0011                            LDR,R5   NEXT,AUTO
          1 000390  DAC7 0020                            SRM,R5,'7FFF'X    G$SEGDESC,AUTO
          1 000392       7FFF

      512    20546    4                     G$SEGDESC.SIZE=SIZE-1;

  20546   1 000393  C847 0027                            LDR,R4   SIZE,AUTO
          1 000395  4EFF                                 ADV,R4   -1
          1 000396  CAC7 0021                            SRM,R4,'01FF'X    G$SEGDESC+1,AUTO
          1 000398       01FF

      513    20547
      514    20548    4                     CALL DEALLOCATE;      /* for the old segment                */

  20548   1 000399  E3C0 0785                            LNJ,B6   s:0,PREL
          1 00039B       0001                            DC       s:20549,PREL

      515    20549    4                     CURR=NEXT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:121  

  20549   1 00039C  E847 0011                            LDR,R6   NEXT,AUTO
          1 00039E  EF47 000E                            STR,R6   CURR,AUTO

      516    20550
      517    20551    4                     GET_TYPE = 3;

  20551   1 0003A0  5C03                                 LDV,R5   3
          1 0003A1  DF47 0036                            STR,R5   GET_TYPE,AUTO

      518    20552    4                     END/*move to seg lrg enough*/;

      519    20553    3                END;

      520    20554    2           END;

      521    20555
      522    20556        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:122  
      523    20557        /*      Finish up the get logic
      524    20558        */
      525    20559    1      CURR$ = ADDR(GM$PPUTA(G$SEGDESC.BASE));

  20559   1 0003A3  B847 0020                            LDR,R3   G$SEGDESC,AUTO
          1 0003A5  B570 7FFF                            AND,R3   32767,IMO
          1 0003A7  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 0003AA  3001                                 SOL,R3   1
          1 0003AB  DBB6                                 LAB,B5   ,B6,R3
          1 0003AC  DFC7 000F                            STB,B5   CURR$,AUTO

      526    20560    1      SIZE = G$SEGDESC.SIZE;

  20560   1 0003AE  E847 0021                            LDR,R6   G$SEGDESC+1,AUTO
          1 0003B0  E570 01FF                            AND,R6   511,IMO
          1 0003B2  EF47 0027                            STR,R6   SIZE,AUTO

      527    20561    1      CURR_LAST$ = PINCRW (CURR$, SIZE*SIZEW (GM$PPUT));

  20561   1 0003B4  F856                                 LDR,R7   R6
          1 0003B5  6C00                                 LDV,R6   0
          1 0003B6  7081                                 DOL,R7   1
          1 0003B7  8447 000F                            AID      CURR$,AUTO
          1 0003B9  8D47 0018                            SDI      CURR_LAST$,AUTO

      528    20562
      529    20563    1      IF EP = %G_R_USR#

  20563   1 0003BB  CCC7 000C                            LDB,B4   @EP,AUTO
          1 0003BD  8284                                 LB,'C000'X        ,B4
          1 0003BE       C000
          1 0003BF  0501 0009                            BBT      s:20569,PREL

      530    20564    2      THEN DO;

      531    20565    2           CURR$->GM$PPUT.C.PP = '1'B;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:123  
  20565   1 0003C1  8905                                 LBT,'0004'X       ,B5
  20565   1 0003C2       0004

      532    20566    2           CURR_LAST$->GM$PPUT.C.PP = '1'B;

  20566   1 0003C3  BCC7 0018                            LDB,B3   CURR_LAST$,AUTO
          1 0003C5  8903                                 LBT,'0004'X       ,B3
          1 0003C6       0004

      533    20567    2           END;

  20567   1 0003C7  0F81 0007                            B        s:20573,PREL

      534    20568    2      ELSE DO;

      535    20569    2           CURR$->GM$PPUT.C.PP = '0'B;

  20569   1 0003C9  8805                                 LBF,'0004'X       ,B5
  20569   1 0003CA       0004

      536    20570    2           CURR_LAST$->GM$PPUT.C.PP = '0'B;

  20570   1 0003CB  BCC7 0018                            LDB,B3   CURR_LAST$,AUTO
          1 0003CD  8803                                 LBF,'0004'X       ,B3
          1 0003CE       0004

      537    20571    2           END;

      538    20572
      539    20573    1      IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)

  20573   1 0003CF  AB80 0000 0000  xsym                 LAB,B2   GM_MEAT_SHUF
          1 0003D2  ADC7 001A                            CMB,B2   CURR_MEAT$,AUTO
          1 0003D4  0981 0007                            BNE      s:20579,PREL

      540    20574    2      THEN DO;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:124  
      541    20575    2           CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;

  20575   1 0003D6  8905                                 LBT,'0008'X       ,B5
  20575   1 0003D7       0008

      542    20576    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;

  20576   1 0003D8  8903                                 LBT,'0008'X       ,B3
  20576   1 0003D9       0008

      543    20577    2           END;

  20577   1 0003DA  0F81 0005                            B        s:20583,PREL

      544    20578    2      ELSE DO;

      545    20579    2           CURR$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20579   1 0003DC  8805                                 LBF,'0008'X       ,B5
  20579   1 0003DD       0008

      546    20580    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20580   1 0003DE  8803                                 LBF,'0008'X       ,B3
  20580   1 0003DF       0008

      547    20581    2           END;

      548    20582
      549    20583    1      CALL SET_ASDTS;

  20583   1 0003E0  E3C0 0B5A                            LNJ,B6   s:0,PREL
          1 0003E2       0001                            DC       s:20585,PREL

      550    20584
      551    20585    1      IF REL_SHF_SZ ~= 0

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:125  
  20585   1 0003E3  E847 0028                            LDR,R6   REL_SHF_SZ,AUTO
          1 0003E5  6901 0015                            BEZ,R6   s:20591,PREL

      552    20586    2      THEN DO;

      553    20587    2           CURR_MEAT$ = ADDR(GM_MEAT_SHUF);

  20587   1 0003E7  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 0003EA  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      554    20588    2           CURR = REL_SHF_PG;

  20588   1 0003EC  D847 0029                            LDR,R5   REL_SHF_PG,AUTO
          1 0003EE  DF47 000E                            STR,R5   CURR,AUTO

      555    20589    2           CURR$ = ADDR(GM$PPUTA(CURR));

  20589   1 0003F0  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 0003F3  B855                                 LDR,R3   R5
          1 0003F4  3001                                 SOL,R3   1
          1 0003F5  CBB5                                 LAB,B4   ,B5,R3
          1 0003F6  CFC7 000F                            STB,B4   CURR$,AUTO

      556    20590    2           CALL DEALLOCATE;                /*return first part of the segment*/

  20590   1 0003F8  E3C0 0726                            LNJ,B6   s:0,PREL
          1 0003FA       0001                            DC       s:20591,PREL

      557    20591    2           END;

  20585   1                              FINISH_GETPS    null
      558    20592
      559    20593    1   FINISH_GETPS: ;
      560    20594    1      IF GM_SHUF < GM_SHUF_MIN

  20594   1 0003FB  E800 0000 0000  xsym FINISH_GETPS    LDR,R6   GM_SHUF
          1 0003FE  E900 0000 0000  xsym                 CMR,R6   GM_SHUF_MIN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:126  
          1 000401  0281 0004                            BGE      s:20597,PREL

      561    20595    1      THEN GM_SHUF_MIN = GM_SHUF;

  20595   1 000403  EF00 0000 0000  xsym                 STR,R6   GM_SHUF_MIN

      562    20596
      563    20597    1      IF GM_NSHF_CURR > GM_NSHF_PEAK

  20597   1 000406  D800 0000 0000  xsym                 LDR,R5   GM_NSHF_CURR
          1 000409  D900 0000 0000  xsym                 CMR,R5   GM_NSHF_PEAK
          1 00040C  0381 0004                            BLE      s:20601,PREL

      564    20598    1      THEN GM_NSHF_PEAK = GM_NSHF_CURR;

  20598   1 00040E  DF00 0000 0000  xsym                 STR,R5   GM_NSHF_PEAK

      565    20599
      566    20600    1   CHKPPT_EXIT:
      567    20601    1      CALL UNLOCK_GATE;

  20601   1 000411  E3C0 0DE3            CHKPPT_EXIT     LNJ,B6   s:0,PREL
          1 000413       0001                            DC       s:20602,PREL

      568    20602    1      CALL LOCK_GATE;

  20602   1 000414  E3C0 0DD1                            LNJ,B6   s:0,PREL
          1 000416       0001                            DC       s:20603,PREL

      569    20603    1      CALL CHKPPT;

  20603   1 000417  E3C0 0DEC                            LNJ,B6   s:0,PREL
          1 000419       0001                            DC       s:20605,PREL

      570    20604
      571    20605    1      CALL UNLOCK_GATE;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:127  
  20605   1 00041A  E3C0 0DDA                            LNJ,B6   s:0,PREL
          1 00041C       0001                            DC       s:20606,PREL

      572    20606    1      RETURN;

  20606   1 00041D  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      573    20607
      574    20608        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:128  
      575    20609        /*I*   NAME: SHFL_FAILED
      576    20610              PURPOSE:
      577    20611              Provide a common routine to screech from MM for shuffle failures.
      578    20612        */
      579    20613
      580    20614    1   SHFL_FAILED: PROC;

  20614   1 000420  EFC7 0038            SHFL_FAILED     STB,B6   GET_TYPE+2,AUTO

      581    20615    2      CALL SCREECH (SHFLERR);

  20615   1 000422  BB80 0000 0000  02                   LAB,B3   0
          1 000425  CBF0 0100                            LAB,B4   256,IMO
          1 000427  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 00042A       0001                            DC       s:20616,PREL

      582    20616    2   END;

  20616   1 00042B  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 00042D  C3C6 0001                            LNJ,B4   1,B6

      583    20617
      584    20618        /*S*     SCREECH_CODE: GMA-S$MM49
      585    20619                 TYPE: SCREECH
      586    20620                 MESSAGE: Memory shuffle failed to provide promised space
      587    20621                                                                           */
      588    20622
      589    20623
      590    20624        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:129  
      591    20625        /*D* NAME: GMA$LOCATE
      592    20626
      593    20627             CALL: CALL GMA$LOCATE (size) ALTRET(not_found);
      594    20628
      595    20629             INPUT:
      596    20630                   PAGENO - Size of segment, in pages.
      597    20631             DESCRIPTION:
      598    20632                   This routine calls ALLOCATE to determine if there are
      599    20633                   currently any unallocated segments in the I/O memory meat
      600    20634                   table.  This can happen only when there is fragmented
      601    20635                   nshuf memory.  The alternate return is taken in there
      602    20636                   aren't any, or if there isn't one as large as the requested
      603    20637                   size.
      604    20638        */
      605    20639    1   GMA$LOCATE: ENTRY (PAGENO) ALTRET;

  20639   1 00042F  D380 0000 0000  xent GMA$LOCATE      LNJ,B5   X6A_AUTO_N
          1 000432       005A 0005                       DC       90,5

      606    20640
      607    20641    1      CURR_MEAT$ = ADDR(GM_MEAT_NSHF);

  20641   1 000434  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_NSHF
          1 000437  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

      608    20642    1      SIZE = PAGENO;

  20642   1 000439  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 00043B  E805                                 LDR,R6   ,B5
          1 00043C  EF47 0027                            STR,R6   SIZE,AUTO

      609    20643
      610    20644    1      CALL LOCATE

  20644   1 00043E  E3C0 0011                            LNJ,B6   s:0,PREL
          1 000440       0003                            DC       s:20645,PREL
          1 000441  0F81 0004                            B        s:20647,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:130  

      611    20645    2      WHENALTRETURN DO; ALTRETURN; END;

  20645   1 000443  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      612    20646
      613    20647    1      RETURN;

  20647   1 000446  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      614    20648
      615    20649        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:131  
      616    20650        /*I* NAME: ALLOCATE
      617    20651             PURPOSE:
      618    20652                   To allocate a free extent from available physical memory.
      619    20653
      620    20654             CALL: CALL ALLOCATE ALTRET (no can do);
      621    20655
      622    20656             ENVIRONMENT:
      623    20657                   GM_MEATLOCK gate is locked.
      624    20658             INPUT:
      625    20659                   CURR_MEAT$ - Pointer to appropriate MEAT.
      626    20660                   SIZE - Number of pages to allocate.
      627    20661             OUTPUT:
      628    20662                   CURR - Page number of allocated segment.
      629    20663                   CURR$ - Pointer to PPUT entry for CURR.
      630    20664             SCRATCH:
      631    20665                   None.
      632    20666             DESCRIPTION:
      633    20667                   The MEAT is searched for a free extent. The search begins at the
      634    20668                   log-base-2 of the specified size MEAT list entry. The first free
      635    20669                   extent that is greater than or equal to the specified size is
      636    20670                   unlinked from its MEAT list. If the extent is larger than the
      637    20671                   specified size, then the first n pages of the specified size are
      638    20672                   allocated, the remainder is returned to the head of the appropriate
      639    20673                   MEAT list.
      640    20674        */
      641    20675    1   ALLOCATE: PROC ALTRET;

  20675   1 000449  EFC7 0038            ALLOCATE        STB,B6   GET_TYPE+2,AUTO

      642    20676
      643    20677    2   DCL IX UBIN WORD;
      644    20678    2   DCL P$ PTR;
      645    20679
      646    20680    2      FLG.LOCATE_IO_FRAGMENT = '0'B;

  20680   1 00044B  8847 0035                            LBF,'1000'X       FLG,AUTO
  20680   1 00044D       1000
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:132  

      647    20681    2      GOTO ALLOCATE_CMN;

  20681   1 00044E  0F81 0006                            B        s:20684,PREL

      648    20682
      649    20683    2   LOCATE: ENTRY ALTRET;

  20683   1 000450  EFC7 0038            LOCATE          STB,B6   GET_TYPE+2,AUTO

      650    20684    2      FLG.LOCATE_IO_FRAGMENT = '1'B;

  20684   1 000452  8947 0035                            LBT,'1000'X       FLG,AUTO
  20684   1 000454       1000

  20684   1                              ALLOCATE_CMN    null
      651    20685
      652    20686    2   ALLOCATE_CMN: ;
      653    20687    2      CALL LOGBASE2;                       /* Where to begin searching           */

  20687   1 000455  E3C0 0CB4            ALLOCATE_CMN    LNJ,B6   s:0,PREL
          1 000457       0001                            DC       s:20688,PREL

      654    20688    3      DO IX = LOG TO %GM_MEATSIZE;

  20688   1 000458  E847 0024                            LDR,R6   LOG,AUTO
          1 00045A  EF47 003A                            STR,R6   IX,AUTO
          1 00045C  0F81 0046                            B        s:20708+2,PREL

      655    20689    3           CURR = MEAT$->GM$MEAT.HEAD;

  20689   1 00045E  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 000460  E806                                 LDR,R6   ,B6
          1 000461  EF47 000E                            STR,R6   CURR,AUTO

      656    20690    3           BLINK = 0;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:133  
  20690   1 000463  8747 001E                            CL       BLINK,AUTO

      657    20691    4           DO WHILE (CURR ~= 0);

  20691   1 000465  6901 0035                            BEZ,R6   s:20707,PREL

      658    20692    4                CALL MAP (CURR);

  20692   1 000467  EBC7 000E                            LAB,B6   CURR,AUTO
          1 000469  EFC7 0052                            STB,B6   SAVE_SZ+4,AUTO
          1 00046B  E3C0 0D44                            LNJ,B6   s:0,PREL
          1 00046D       0001                            DC       s:20693,PREL

      659    20693    4                FLINK = GM$EXTENT.FLINK;

  20693   1 00046E  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000471  E806                                 LDR,R6   ,B6
          1 000472  EF47 001F                            STR,R6   FLINK,AUTO

      660    20694    4                CURR$ = ADDR (GM$PPUTA (CURR));

  20694   1 000474  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000477  B847 000E                            LDR,R3   CURR,AUTO
          1 000479  3001                                 SOL,R3   1
          1 00047A  CBB5                                 LAB,B4   ,B5,R3
          1 00047B  CFC7 000F                            STB,B4   CURR$,AUTO

      661    20695
      662    20696    4                IF CURR$->GM$PPUT.SIZE >= SIZE

  20696   1 00047D  D844 0001                            LDR,R5   1,B4
          1 00047F  D947 0027                            CMR,R5   SIZE,AUTO
          1 000481  0201 0011                            BL       s:20704,PREL

      663    20697    5                THEN DO;

      664    20698    5                     IF FLG.LOCATE_IO_FRAGMENT THEN RETURN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:134  

  20698   1 000483  82C7 0035                            LB,'1000'X        FLG,AUTO
  20698   1 000485       1000
          1 000486  0581 0005                            BBF      s:20700,PREL

  20698   1 000488  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 00048A  C3C6 0001                            LNJ,B4   1,B6

      665    20699
      666    20700    5                     CALL GETIT_MAPPED;

  20700   1 00048C  E3C0 0026                            LNJ,B6   s:0,PREL
          1 00048E       0001                            DC       s:20701,PREL

      667    20701    5                     RETURN;

  20701   1 00048F  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 000491  C3C6 0001                            LNJ,B4   1,B6

      668    20702    5                     END;
      669    20703
      670    20704    4                BLINK = CURR;

  20704   1 000493  C847 000E                            LDR,R4   CURR,AUTO
          1 000495  CF47 001E                            STR,R4   BLINK,AUTO

      671    20705    4                CURR = FLINK;

  20705   1 000497  C856                                 LDR,R4   R6
          1 000498  CF47 000E                            STR,R4   CURR,AUTO

      672    20706    4                END;

  20706   1 00049A  49CD                                 BNEZ,R4  s:20692,SPREL

      673    20707    3           MEAT$ = PINCRW (MEAT$,SIZEW (GM$MEAT));

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:135  
  20707   1 00049B  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 00049D  DBC6 0003                            LAB,B5   3,B6
          1 00049F  DFC7 001C                            STB,B5   MEAT$,AUTO

      674    20708    3           END;

  20708   1 0004A1  8AC7 003A                            INC      IX,AUTO
          1 0004A3  E847 003A                            LDR,R6   IX,AUTO
          1 0004A5  6D0F                                 CMV,R6   15
          1 0004A6  0381 FFB7                            BLE      s:20689,PREL

      675    20709
      676    20710        /* Cannot find an extent of the requested size */
      677    20711
      678    20712    2      ALTRETURN;

  20712   1 0004A8  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 0004AA  B806                                 LDR,R3   ,B6
          1 0004AB  C3B6                                 LNJ,B4   ,B6,R3

      679    20713
      680    20714    2   END ALLOCATE;
      681    20715
      682    20716
      683    20717        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:136  
      684    20718        /*I* NAME: GETIT
      685    20719
      686    20720             PURPOSE: To perform the actual 'get' of a requested segment.
      687    20721
      688    20722             CALL: CALL GETIT;
      689    20723
      690    20724             INPUT:
      691    20725                   CURR - page number of extent to allocate
      692    20726                   SIZE - number of pages to be allocated from the extent
      693    20727
      694    20728             DESCRIPTION:
      695    20729                   The segment extent is unlinked from the Meat tables.
      696    20730
      697    20731                   The appropriate PPUT parameters are set to show its
      698    20732                   size and usage.
      699    20733
      700    20734                   If the segment does not completly fill the extent, the
      701    20735                   unused portion is placed on the appropriate Meat Table.
      702    20736        */
      703    20737
      704    20738    1   GETIT: PROC;

  20738   1 0004AC  EFC7 003E            GETIT           STB,B6   FREE+1,AUTO

      705    20739
      706    20740    2   DCL CURRENT UBIN WORD;
      707    20741    2   DCL CURR_LAST UBIN WORD;
      708    20742    2   DCL LAST UBIN WORD;
      709    20743    2   DCL LEFT UBIN WORD;
      710    20744    2   DCL P$ PTR;
      711    20745    2   DCL SIZE_A UBIN;
      712    20746
      713    20747    2      CALL UNLINK;

  20747   1 0004AE  E3C0 0844                            LNJ,B6   s:0,PREL
          1 0004B0       0001                            DC       s:20748,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:137  
      714    20748    2      GOTO GETIT_COMM;

  20748   1 0004B1  0F81 0006                            B        s:20747,PREL

      715    20749
      716    20750    2   GETIT_MAPPED: ENTRY;

  20750   1 0004B3  EFC7 003E            GETIT_MAPPED    STB,B6   FREE+1,AUTO

      717    20751    2      CALL UNLINK_MAPPED;

  20751   1 0004B5  E3C0 086A                            LNJ,B6   s:0,PREL
          1 0004B7       0001                            DC       s:20747,PREL

  20747   1                              GETIT_COMM      null
      718    20752
      719    20753    2   GETIT_COMM: ;
      720    20754    2      SIZE_A=SIZE;

  20754   1 0004B8  E847 0027            GETIT_COMM      LDR,R6   SIZE,AUTO
          1 0004BA  EF47 0046                            STR,R6   SIZE_A,AUTO

      721    20755    2      CURR_LAST = CURR + SIZE - 1;

  20755   1 0004BC  EA47 000E                            ADD,R6   CURR,AUTO
          1 0004BE  6EFF                                 ADV,R6   -1
          1 0004BF  EF47 0041                            STR,R6   CURR_LAST,AUTO

      722    20756    2      PPUT$ = ADDR (GM$PPUTA (CURR_LAST));

  20756   1 0004C1  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 0004C4  B856                                 LDR,R3   R6
          1 0004C5  3001                                 SOL,R3   1
          1 0004C6  DBB6                                 LAB,B5   ,B6,R3
          1 0004C7  DFC7 0025                            STB,B5   PPUT$,AUTO

      723    20757    2      LEFT = CURR$->GM$PPUT.SIZE - SIZE;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:138  

  20757   1 0004C9  CCC7 000F                            LDB,B4   CURR$,AUTO
          1 0004CB  D844 0001                            LDR,R5   1,B4
          1 0004CD  D247 0027                            SUB,R5   SIZE,AUTO
          1 0004CF  DF47 0043                            STR,R5   LEFT,AUTO

      724    20758    2      CURR$->GM$PPUT.C.INUSE = '1'B;

  20758   1 0004D1  8904                                 LBT,'0020'X       ,B4
  20758   1 0004D2       0020

      725    20759    2      PPUT$->GM$PPUT.C.INUSE = '1'B;

  20759   1 0004D3  8905                                 LBT,'0020'X       ,B5
  20759   1 0004D4       0020

      726    20760    2      CURR$->GM$PPUT.SIZE = SIZE;

  20760   1 0004D5  C847 0027                            LDR,R4   SIZE,AUTO
          1 0004D7  CF44 0001                            STR,R4   1,B4

      727    20761    2      PPUT$->GM$PPUT.SIZE = SIZE;

  20761   1 0004D9  CF45 0001                            STR,R4   1,B5

      728    20762    2      CURR$->GM$PPUT.C.LASTP = '0'B;

  20762   1 0004DB  8804                                 LBF,'0040'X       ,B4
  20762   1 0004DC       0040

      729    20763    2      PPUT$->GM$PPUT.C.FIRSTP = '0'B;

  20763   1 0004DD  8805                                 LBF,'0080'X       ,B5
  20763   1 0004DE       0080

      730    20764    2      CURR$->GM$PPUT.C.FIRSTP = '1'B;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:139  
  20764   1 0004DF  8904                                 LBT,'0080'X       ,B4
  20764   1 0004E0       0080

      731    20765    2      PPUT$->GM$PPUT.C.LASTP = '1'B;

  20765   1 0004E1  8905                                 LBT,'0040'X       ,B5
  20765   1 0004E2       0040

      732    20766
      733    20767                                                /* Put remainder on meat list         */
      734    20768    2      IF LEFT > 0

  20768   1 0004E3  5901 0049                            BEZ,R5   s:20799,PREL

      735    20769    3      THEN DO;

      736    20770    3           SIZE = LEFT;

  20770   1 0004E5  C855                                 LDR,R4   R5
          1 0004E6  CF47 0027                            STR,R4   SIZE,AUTO

      737    20771    3           CURRENT = CURR;

  20771   1 0004E8  A847 000E                            LDR,R2   CURR,AUTO
          1 0004EA  AF47 0040                            STR,R2   CURRENT,AUTO

      738    20772    3           CURR = CURR_LAST + 1;

  20772   1 0004EC  A856                                 LDR,R2   R6
          1 0004ED  2E01                                 ADV,R2   1
          1 0004EE  AF47 000E                            STR,R2   CURR,AUTO

      739    20773    3           P$ = ADDR (GM$PPUTA (CURR));

  20773   1 0004F0  2001                                 SOL,R2   1
          1 0004F1  BBA6                                 LAB,B3   ,B6,R2
          1 0004F2  BFC7 0044                            STB,B3   P$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:140  

      740    20774    3           PPUT$ = ADDR (GM$PPUTA (CURR + SIZE - 1));

  20774   1 0004F4  CA47 000E                            ADD,R4   CURR,AUTO
          1 0004F6  9854                                 LDR,R1   R4
          1 0004F7  1001                                 SOL,R1   1
          1 0004F8  1EFE                                 ADV,R1   -2
          1 0004F9  AB96                                 LAB,B2   ,B6,R1
          1 0004FA  AFC7 0025                            STB,B2   PPUT$,AUTO

      741    20775    3           P$->GM$PPUT.C.LASTP = '0'B;

  20775   1 0004FC  8803                                 LBF,'0040'X       ,B3
  20775   1 0004FD       0040

      742    20776    3           PPUT$->GM$PPUT.C.FIRSTP = '0'B;

  20776   1 0004FE  8802                                 LBF,'0080'X       ,B2
  20776   1 0004FF       0080

      743    20777    3           P$->GM$PPUT.C.FIRSTP = '1'B;

  20777   1 000500  8903                                 LBT,'0080'X       ,B3
  20777   1 000501       0080

      744    20778    3           PPUT$->GM$PPUT.C.LASTP = '1'B;

  20778   1 000502  8902                                 LBT,'0040'X       ,B2
  20778   1 000503       0040

      745    20779    3           P$->GM$PPUT.C.INUSE = '0'B;

  20779   1 000504  8803                                 LBF,'0020'X       ,B3
  20779   1 000505       0020

      746    20780    3           PPUT$->GM$PPUT.C.INUSE = '0'B;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:141  
  20780   1 000506  8802                                 LBF,'0020'X       ,B2
  20780   1 000507       0020

      747    20781    3           P$->GM$PPUT.SIZE = SIZE;

  20781   1 000508  C847 0027                            LDR,R4   SIZE,AUTO
          1 00050A  CF43 0001                            STR,R4   1,B3

      748    20782    3           PPUT$->GM$PPUT.SIZE = SIZE;

  20782   1 00050C  CF42 0001                            STR,R4   1,B2

      749    20783
      750    20784    3           IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)

  20784   1 00050E  DB80 0000 0000  xsym                 LAB,B5   GM_MEAT_SHUF
          1 000511  DDC7 001A                            CMB,B5   CURR_MEAT$,AUTO
          1 000513  0981 0007                            BNE      s:20790,PREL

      751    20785    4           THEN DO;

      752    20786    4                P$->GM$PPUT.C.SHUFFLABLE = '1'B;

  20786   1 000515  8903                                 LBT,'0008'X       ,B3
  20786   1 000516       0008

      753    20787    4                PPUT$->GM$PPUT.C.SHUFFLABLE = '1'B;

  20787   1 000517  8902                                 LBT,'0008'X       ,B2
  20787   1 000518       0008

      754    20788    4                END;

  20788   1 000519  0F81 0005                            B        s:20793,PREL

      755    20789    4           ELSE DO;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:142  
      756    20790    4                P$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20790   1 00051B  8803                                 LBF,'0008'X       ,B3
  20790   1 00051C       0008

      757    20791    4                PPUT$->GM$PPUT.C.SHUFFLABLE = '0'B;

  20791   1 00051D  8802                                 LBF,'0008'X       ,B2
  20791   1 00051E       0008

      758    20792    4                END;

      759    20793    3           CALL LOGBASE2;

  20793   1 00051F  E3C0 0BEA                            LNJ,B6   s:0,PREL
          1 000521       0001                            DC       s:20794,PREL

      760    20794    3           CALL LINK2HEAD;

  20794   1 000522  E3C0 079E                            LNJ,B6   s:0,PREL
          1 000524       0001                            DC       s:20795,PREL

      761    20795    3           CURR = CURRENT;

  20795   1 000525  E847 0040                            LDR,R6   CURRENT,AUTO
          1 000527  EF47 000E                            STR,R6   CURR,AUTO

      762    20796    3           SIZE = SIZE_A;

  20796   1 000529  D847 0046                            LDR,R5   SIZE_A,AUTO
          1 00052B  DF47 0027                            STR,R5   SIZE,AUTO

      763    20797    3           END;

      764    20798
      765    20799    2      IF CURR_MEAT$ = ADDR (GM_MEAT_SHUF)

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:143  
  20799   1 00052D  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000530  EDC7 001A                            CMB,B6   CURR_MEAT$,AUTO
          1 000532  0981 0023                            BNE      s:20811,PREL

      766    20800    3      THEN DO;

      767    20801    3           GM_SHUF = GM_SHUF - SIZE;

  20801   1 000534  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 000537  E247 0027                            SUB,R6   SIZE,AUTO
          1 000539  EF00 0000 0000  xsym                 STR,R6   GM_SHUF

      768    20802
      769    20803    3           IF G$JIT.MODE = %G_M_HANDLER#

  20803   1 00053C  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          1 00053F  D2C6 0004                            LLH,R5   4,B6
          1 000541  5D03                                 CMV,R5   3
          1 000542  0981 0023                            BNE      s:20816,PREL

      770    20804    4           THEN DO;

      771    20805    4                GM_ASHUF = GM_ASHUF - SIZE;

  20805   1 000544  C800 0000 0000  xsym                 LDR,R4   GM_ASHUF
          1 000547  C247 0027                            SUB,R4   SIZE,AUTO
          1 000549  CF00 0000 0000  xsym                 STR,R4   GM_ASHUF

      772    20806    4                GM_HSHUF = GM_HSHUF + SIZE;

  20806   1 00054C  B800 0000 0000  xsym                 LDR,R3   GM_HSHUF
          1 00054F  BA47 0027                            ADD,R3   SIZE,AUTO
          1 000551  BF00 0000 0000  xsym                 STR,R3   GM_HSHUF

      773    20807    4                END;

      774    20808    3           END;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:144  

  20808   1 000554  0F81 0011                            B        s:20816,PREL

      775    20809
      776    20810    3      ELSE DO;

      777    20811    3           GM_NSHF_CURR = GM_NSHF_CURR + SIZE;

  20811   1 000556  E800 0000 0000  xsym                 LDR,R6   GM_NSHF_CURR
          1 000559  EA47 0027                            ADD,R6   SIZE,AUTO
          1 00055B  EF00 0000 0000  xsym                 STR,R6   GM_NSHF_CURR

      778    20812
      779    20813    3           GM_NSHF = GM_NSHF - SIZE;

  20813   1 00055E  D800 0000 0000  xsym                 LDR,R5   GM_NSHF
          1 000561  D247 0027                            SUB,R5   SIZE,AUTO
          1 000563  DF00 0000 0000  xsym                 STR,R5   GM_NSHF

      780    20814    3           END;

      781    20815
      782    20816    2      RETURN;

  20816   1 000566  ECC7 003E                            LDB,B6   FREE+1,AUTO
          1 000568  C3C6 0001                            LNJ,B4   1,B6

      783    20817
      784    20818    2   END GETIT;
      785    20819
      786    20820        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:145  
      787    20821        /*I*   NAME: SHUF_DOWN
      788    20822              PURPOSE:
      789    20823                    To compact segments downward in memory.
      790    20824
      791    20825             CALL: CALL SHUF_DOWN;
      792    20826
      793    20827              INPUT:
      794    20828                    LIM is the page number of the upper limit of
      795    20829                    memory to shuffle.
      796    20830              DESCRIPTION:
      797    20831                    Beginning at GM_MEM_LOW, each segment is inspected.
      798    20832                    If it is in use, it is moved downward in memory to be
      799    20833                    adjacent to the previous inuse segment so as to collect
      800    20834                    all unused memory into one extent.  The process stops
      801    20835                    at the specified upper limit and the unused extent is
      802    20836                    added to the Meat Tables.
      803    20837                    Note that the Meat Tables are initialized to zero, no
      804    20838                    available extents, at the beginning of this procedure.
      805    20839                    If the upper limit is not GM_SHUF_HI there may be some
      806    20840                    available extents lost.  A call to SHUF_UP will find
      807    20841                    them, as SHUF_UP does not initialize the Meat Tables.
      808    20842                                                                           */
      809    20843
      810    20844    1   SHUF_DOWN: PROC;

  20844   1 00056A  EFC7 0038            SHUF_DOWN       STB,B6   GET_TYPE+2,AUTO

      811    20845
      812    20846        %G$SEGDESC (FPTN=DESC,STCLASS=" ");
      813    20868
      814    20869    2      GM_SHUF_COUNT = GM_SHUF_COUNT +1;

  20869   1 00056C  8A80 0000 0000  xsym                 INC      GM_SHUF_COUNT

      815    20870    2      CALL GHI$UTS(SHUF_START);

  20870   1 00056F  DBC7 0031                            LAB,B5   SHUF_START,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:146  
          1 000571  DFC7 0056                            STB,B5   @PAGENUM+4,AUTO
          1 000573  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000575  CBF0 0100                            LAB,B4   256,IMO
          1 000577  E380 0000 0000  xent                 LNJ,B6   GHI$UTS
          1 00057A       0001                            DC       s:20872,PREL

      816    20871
      817    20872    3      DO I = 0 TO 15;

  20872   1 00057B  8747 0022                            CL       I,AUTO

      818    20873    3           GM_MEAT_SHUF(I) = '0'B;

  20873   1 00057D  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000580  B847 0022                            LDR,R3   I,AUTO
          1 000582  3F06                                 MLV,R3   6
          1 000583  5C06                                 LDV,R5   6
          1 000584  0021                                 ALR      ;
          1 000585       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 000587       4036 0000                                ALPHANUM(0,B6,R3,,R5,FILL)

      819    20874    3           END;

  20874   1 000589  437F                                 CSYNC    s:20873+11,SPREL
          1 00058A  8AC7 0022                            INC      I,AUTO
          1 00058C  E847 0022                            LDR,R6   I,AUTO
          1 00058E  6D0F                                 CMV,R6   15
          1 00058F  03EE                                 BLE      s:20873,SPREL

      820    20875
      821    20876    2      NEXT=GM_MEM_LOW;

  20876   1 000590  C800 0000 0000  xsym                 LDR,R4   GM_MEM_LOW
          1 000593  CF47 0011                            STR,R4   NEXT,AUTO

      822    20877    3      DO WHILE (NEXT <= LIM);

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:147  
  20877   1 000595  C947 002A                            CMR,R4   LIM,AUTO
          1 000597  0301 00E1                            BG       s:20936,PREL

      823    20878    3           NEXT$=ADDR(GM$PPUTA(NEXT));

  20878   1 000599  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 00059C  B847 0011                            LDR,R3   NEXT,AUTO
          1 00059E  3001                                 SOL,R3   1
          1 00059F  DBB6                                 LAB,B5   ,B6,R3
          1 0005A0  DFC7 0012                            STB,B5   NEXT$,AUTO

      824    20879
      825    20880    3           IF NEXT$->GM$PPUT.C.INUSE

  20880   1 0005A2  8285                                 LB,'0020'X        ,B5
  20880   1 0005A3       0020
          1 0005A4  0581 0009                            BBF      s:20884,PREL

      826    20881    3           THEN NEXT=NEXT+NEXT$->GM$PPUT.SIZE;

  20881   1 0005A6  E847 0011                            LDR,R6   NEXT,AUTO
          1 0005A8  EA45 0001                            ADD,R6   1,B5
          1 0005AA  EF47 0011                            STR,R6   NEXT,AUTO
          1 0005AC  0F81 00C6                            B        s:20933,PREL

      827    20882
      828    20883    4           ELSE DO;

      829    20884    4                CURR=NEXT;

  20884   1 0005AE  E847 0011                            LDR,R6   NEXT,AUTO
          1 0005B0  EF47 000E                            STR,R6   CURR,AUTO

      830    20885    5                DO WHILE ( NEXT<=LIM  AND  NEXT$->GM$PPUT.C.SHUFFLABLE );

  20885   1 0005B2  0F81 0076                            B        s:20906,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:148  
      831    20886    5                     IF NEXT$->GM$PPUT.C.INUSE

  20886   1 0005B4  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0005B6  8286                                 LB,'0020'X        ,B6
          1 0005B7       0020
          1 0005B8  0581 0061                            BBF      s:20903,PREL

      832    20887    6                     THEN DO;

      833    20888    6                          G$UHJIT.ASDT_MCL.WINDOW1=SHUF_DSCR;

  20888   1 0005BA  8C80 0000 0000  00                   LDI      SHUF_DSCR
          1 0005BD  DC80 0000 0000  xsym                 LDB,B5   G$UHJIT$
          1 0005C0  8D45 006E                            SDI      110,B5

      834    20889    6                          G$UHJIT.ASDT_MCL.WINDOW1.BASE=CURR;

  20889   1 0005C2  D847 000E                            LDR,R5   CURR,AUTO
          1 0005C4  DAC5 006E                            SRM,R5,'7FFF'X    110,B5
          1 0005C6       7FFF

      835    20890    6                          DESC=SHUF_DSCR;

  20890   1 0005C7  8D47 003A                            SDI      DESC,AUTO

      836    20891    6                          DESC.BASE=NEXT;

  20891   1 0005C9  C847 0011                            LDR,R4   NEXT,AUTO
          1 0005CB  CAC7 003A                            SRM,R4,'7FFF'X    DESC,AUTO
          1 0005CD       7FFF

      837    20892    6                          CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);

  20892   1 0005CE  CBC5 006E                            LAB,B4   110,B5
          1 0005D0  CFC7 0058                            STB,B4   @PAGENUM+6,AUTO
          1 0005D2  BB80 0000 0000  xsym                 LAB,B3   G$WINDOW1$
          1 0005D5  BFC7 0056                            STB,B3   @PAGENUM+4,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:149  
          1 0005D7  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 0005D9  CBF0 0200                            LAB,B4   512,IMO
          1 0005DB  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 0005DE       0001                            DC       s:20893,PREL

      838    20893    6                          L=NEXT$->GM$PPUT.SIZE;

  20893   1 0005DF  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0005E1  E846 0001                            LDR,R6   1,B6
          1 0005E3  EF47 0023                            STR,R6   L,AUTO

      839    20894    6                          CALL GMV$MOVESEG (L,DESC);

  20894   1 0005E5  DBC7 003A                            LAB,B5   DESC,AUTO
          1 0005E7  DFC7 0058                            STB,B5   @PAGENUM+6,AUTO
          1 0005E9  CBC7 0023                            LAB,B4   L,AUTO
          1 0005EB  CFC7 0056                            STB,B4   @PAGENUM+4,AUTO
          1 0005ED  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 0005EF  CBF0 0200                            LAB,B4   512,IMO
          1 0005F1  E380 0000 0000  xent                 LNJ,B6   GMV$MOVESEG
          1 0005F4       0001                            DC       s:20895,PREL

      840    20895    6                          GM_SHUF_SEGS# = GM_SHUF_SEGS# +1;

  20895   1 0005F5  8A80 0000 0000  xsym                 INC      GM_SHUF_SEGS#

      841    20896    6                          CALL ADJ_PP;

  20896   1 0005F8  E3C0 01A8                            LNJ,B6   s:0,PREL
          1 0005FA       0001                            DC       s:20897,PREL

      842    20897    6                          GM$PPUTA(CURR)=NEXT$->GM$PPUT;

  20897   1 0005FB  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0005FD  8C86                                 LDI      ,B6
          1 0005FE  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000601  B847 000E                            LDR,R3   CURR,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:150  
          1 000603  8D35                                 SDI      ,B5,R3

      843    20898    6                          NEXT=NEXT+GM$PPUTA.SIZE(CURR);

  20898   1 000604  B847 000E                            LDR,R3   CURR,AUTO
          1 000606  3001                                 SOL,R3   1
          1 000607  3E01                                 ADV,R3   1
          1 000608  E847 0011                            LDR,R6   NEXT,AUTO
          1 00060A  EA35                                 ADD,R6   ,B5,R3
          1 00060B  EF47 0011                            STR,R6   NEXT,AUTO

      844    20899    6                          CURR=CURR+GM$PPUTA.SIZE(CURR);

  20899   1 00060D  D847 000E                            LDR,R5   CURR,AUTO
          1 00060F  DA35                                 ADD,R5   ,B5,R3
          1 000610  DF47 000E                            STR,R5   CURR,AUTO

      845    20900    6                          GM$PPUTA(CURR-1)=GM$PPUTA(NEXT-1);

  20900   1 000612  B856                                 LDR,R3   R6
          1 000613  3EFF                                 ADV,R3   -1
          1 000614  8CB5                                 LDI      ,B5,R3
          1 000615  A855                                 LDR,R2   R5
          1 000616  2EFF                                 ADV,R2   -1
          1 000617  8D25                                 SDI      ,B5,R2

      846    20901    6                          END;

  20901   1 000618  0F81 0007                            B        s:20905,PREL

      847    20902
      848    20903    5                     ELSE NEXT=NEXT+NEXT$->GM$PPUT.SIZE;

  20903   1 00061A  E847 0011                            LDR,R6   NEXT,AUTO
          1 00061C  EA46 0001                            ADD,R6   1,B6
          1 00061E  EF47 0011                            STR,R6   NEXT,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:151  
      849    20904
      850    20905    5                     NEXT$=ADDR(GM$PPUTA(NEXT));

  20905   1 000620  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000623  B847 0011                            LDR,R3   NEXT,AUTO
          1 000625  3001                                 SOL,R3   1
          1 000626  CBB5                                 LAB,B4   ,B5,R3
          1 000627  CFC7 0012                            STB,B4   NEXT$,AUTO

      851    20906    5                     END/*do while*/;

  20906   1 000629  E847 0011                            LDR,R6   NEXT,AUTO
          1 00062B  E947 002A                            CMR,R6   LIM,AUTO
          1 00062D  0301 0007                            BG       s:20908,PREL
          1 00062F  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 000631  8286                                 LB,'0008'X        ,B6
          1 000632       0008
          1 000633  0501 FF80                            BBT      s:20886,PREL

      852    20907
      853    20908    4                SIZE=NEXT-CURR;

  20908   1 000635  E247 000E                            SUB,R6   CURR,AUTO
          1 000637  EF47 0027                            STR,R6   SIZE,AUTO

      854    20909
      855    20910    4                IF SIZE ~= 0

  20910   1 000639  6901 002F                            BEZ,R6   s:20927,PREL

      856    20911    5                THEN DO;

      857    20912    5                     IF NEXT< LIM THEN CALL MMSCREECH;

  20912   1 00063B  D847 0011                            LDR,R5   NEXT,AUTO
          1 00063D  D947 002A                            CMR,R5   LIM,AUTO
          1 00063F  0281 0004                            BGE      s:20914,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:152  

  20912   1 000641  E3C0 0CE4                            LNJ,B6   s:0,PREL
          1 000643       0001                            DC       s:20914,PREL

      858    20913
      859    20914    5                     NEXT$=ADDR(GM$PPUTA(NEXT-1));

  20914   1 000644  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000647  B847 0011                            LDR,R3   NEXT,AUTO
          1 000649  3001                                 SOL,R3   1
          1 00064A  3EFE                                 ADV,R3   -2
          1 00064B  DBB6                                 LAB,B5   ,B6,R3
          1 00064C  DFC7 0012                            STB,B5   NEXT$,AUTO

      860    20915    5                     CURR$=ADDR(GM$PPUTA(CURR));

  20915   1 00064E  A847 000E                            LDR,R2   CURR,AUTO
          1 000650  2001                                 SOL,R2   1
          1 000651  CBA6                                 LAB,B4   ,B6,R2
          1 000652  CFC7 000F                            STB,B4   CURR$,AUTO

      861    20916    5                     NEXT$->GM$PPUT.C.FIRSTP='0'B;

  20916   1 000654  8805                                 LBF,'0080'X       ,B5
  20916   1 000655       0080

      862    20917    5                     CURR$->GM$PPUT.C.LASTP='0'B;

  20917   1 000656  8804                                 LBF,'0040'X       ,B4
  20917   1 000657       0040

      863    20918    5                     NEXT$->GM$PPUT.C.LASTP='1'B;

  20918   1 000658  8905                                 LBT,'0040'X       ,B5
  20918   1 000659       0040

      864    20919    5                     CURR$->GM$PPUT.C.FIRSTP='1'B;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:153  

  20919   1 00065A  8904                                 LBT,'0080'X       ,B4
  20919   1 00065B       0080

      865    20920    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;

  20920   1 00065C  8904                                 LBT,'0008'X       ,B4
  20920   1 00065D       0008

      866    20921    5                     NEXT$->GM$PPUT.C.SHUFFLABLE='1'B;

  20921   1 00065E  8905                                 LBT,'0008'X       ,B5
  20921   1 00065F       0008

      867    20922    5                     CURR$->GM$PPUT.SIZE = SIZE;

  20922   1 000660  E847 0027                            LDR,R6   SIZE,AUTO
          1 000662  EF44 0001                            STR,R6   1,B4

      868    20923    5                     NEXT$->GM$PPUT.SIZE = SIZE;

  20923   1 000664  EF45 0001                            STR,R6   1,B5

      869    20924    5                     CALL DEALLOCATE_SHUF;

  20924   1 000666  E3C0 057B                            LNJ,B6   s:0,PREL
          1 000668       0001                            DC       s:20927,PREL

      870    20925    5                     END/*do if size >0*/;

      871    20926                            /*  If right hand compaction occured, up LIM for SHUF_UP  */
      872    20927    4                IF PREV > LIM

  20927   1 000669  E847 0014                            LDR,R6   PREV,AUTO
          1 00066B  E947 002A                            CMR,R6   LIM,AUTO
          1 00066D  0381 0005                            BLE      s:20933,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:154  
      873    20928    5                THEN DO;

      874    20929    5                     LIM=PREV;

  20929   1 00066F  EF47 002A                            STR,R6   LIM,AUTO

      875    20930    5                     GOTO STOP_SHUF_TIME;

  20930   1 000671  0F81 0007                            B        s:20936,PREL

      876    20931    5                     END;
      877    20932    4                END/*do if extent not in use*/;
      878    20933    3           END/*do while next<=lim*/;

  20933   1 000673  E847 0011                            LDR,R6   NEXT,AUTO
          1 000675  E947 002A                            CMR,R6   LIM,AUTO
          1 000677  0381 FF21                            BLE      s:20878,PREL

      879    20934
      880    20935    2   STOP_SHUF_TIME:
      881    20936    2      CALL GHI$UTS(SHUF_STOP);

  20936   1 000679  EBC7 0033            STOP_SHUF_TIME  LAB,B6   SHUF_STOP,AUTO
          1 00067B  EFC7 0056                            STB,B6   @PAGENUM+4,AUTO
          1 00067D  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 00067F  CBF0 0100                            LAB,B4   256,IMO
          1 000681  E380 0000 0000  xent                 LNJ,B6   GHI$UTS
          1 000684       0001                            DC       s:20937,PREL

      882    20937    2      GM_SHUF_TIME = GM_SHUF_TIME + (SHUF_STOP - SHUF_START);

  20937   1 000685  8CC7 0033                            LDI      SHUF_STOP,AUTO
          1 000687  84C7 0031                            SID      SHUF_START,AUTO
          1 000689  8400 0000 0000  xsym                 AID      GM_SHUF_TIME
          1 00068C  8D00 0000 0000  xsym                 SDI      GM_SHUF_TIME

      883    20938
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:155  
      884    20939    2      RETURN;

  20939   1 00068F  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 000691  C3C6 0001                            LNJ,B4   1,B6

      885    20940
      886    20941    2   END SHUF_DOWN;
      887    20942
      888    20943        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:156  
      889    20944        /*I*   NAME: SHUF_UP
      890    20945              PURPOSE:
      891    20946                    To compact segments upward in memory.
      892    20947
      893    20948             CALL: CALL SHUF_UP ;
      894    20949
      895    20950              INPUT:
      896    20951                    LIM is the page number of the lowest segment
      897    20952                    to be shuffled.
      898    20953                    This procedure uses several auto variables defined at
      899    20954                    higher levels, as do some of the routines it calls.
      900    20955              DESCRIPTION:
      901    20956                    Beginning at GM_SHUF_HI, each segment is inspected.
      902    20957                    If it is in use, it is moved upward in memory to be
      903    20958                    adjacent to the previous inuse segment so as to collect
      904    20959                    all unused memory into one extent.  The process stops
      905    20960                    at the specified lower limit and the unused extent is
      906    20961                    added to the Meat Tables.
      907    20962                                                                           */
      908    20963
      909    20964    1   SHUF_UP: PROC;

  20964   1 000693  EFC7 0038            SHUF_UP         STB,B6   GET_TYPE+2,AUTO

      910    20965
      911    20966        %G$SEGDESC (FPTN=DESC,STCLASS=" ");
      912    20988    2   DCL SOURCE_SIZE UBIN;
      913    20989    2   DCL DEST_SIZE UBIN;
      914    20990    2   DCL IL UBIN;
      915    20991
      916    20992    2      CALL GHI$UTS(SHUF_START);

  20992   1 000695  DBC7 0031                            LAB,B5   SHUF_START,AUTO
          1 000697  DFC7 0056                            STB,B5   @PAGENUM+4,AUTO
          1 000699  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 00069B  CBF0 0100                            LAB,B4   256,IMO
          1 00069D  E380 0000 0000  xent                 LNJ,B6   GHI$UTS
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:157  
          1 0006A0       0001                            DC       s:20993,PREL

      917    20993    2      NEXT=GM_SHUF_HI;

  20993   1 0006A1  E800 0000 0000  xsym                 LDR,R6   GM_SHUF_HI
          1 0006A4  EF47 0011                            STR,R6   NEXT,AUTO

      918    20994    3      DO WHILE (NEXT > LIM);

  20994   1 0006A6  E947 002A                            CMR,R6   LIM,AUTO
          1 0006A8  0381 00DE                            BLE      s:21055,PREL

      919    20995    3           NEXT$=ADDR(GM$PPUTA(NEXT));

  20995   1 0006AA  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 0006AD  B847 0011                            LDR,R3   NEXT,AUTO
          1 0006AF  3001                                 SOL,R3   1
          1 0006B0  DBB6                                 LAB,B5   ,B6,R3
          1 0006B1  DFC7 0012                            STB,B5   NEXT$,AUTO

      920    20996
      921    20997    3           IF NEXT$->GM$PPUT.SIZE=0 THEN CALL MMSCREECH;

  20997   1 0006B3  E845 0001                            LDR,R6   1,B5
          1 0006B5  6981 0004                            BNEZ,R6  s:20999,PREL

  20997   1 0006B7  E3C0 0C6E                            LNJ,B6   s:0,PREL
          1 0006B9       0001                            DC       s:20999,PREL

      922    20998
      923    20999    3           IF NEXT$->GM$PPUT.C.INUSE

  20999   1 0006BA  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0006BC  8286                                 LB,'0020'X        ,B6
          1 0006BD       0020
          1 0006BE  0581 0009                            BBF      s:21002,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:158  
      924    21000    3           THEN NEXT=NEXT-NEXT$->GM$PPUT.SIZE;

  21000   1 0006C0  E847 0011                            LDR,R6   NEXT,AUTO
          1 0006C2  E246 0001                            SUB,R6   1,B6
          1 0006C4  EF47 0011                            STR,R6   NEXT,AUTO
          1 0006C6  0F81 00BA                            B        s:21053,PREL

      925    21001    4           ELSE DO/*if extent not in use*/;

      926    21002    4                CURR=NEXT;

  21002   1 0006C8  E847 0011                            LDR,R6   NEXT,AUTO
          1 0006CA  EF47 000E                            STR,R6   CURR,AUTO

      927    21003    5                DO WHILE (NEXT>LIM  AND  NEXT$->GM$PPUT.C.SHUFFLABLE);

  21003   1 0006CC  0F81 0079                            B        s:21033,PREL

      928    21004    5                     IF NEXT$->GM$PPUT.C.INUSE

  21004   1 0006CE  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0006D0  8286                                 LB,'0020'X        ,B6
          1 0006D1       0020
          1 0006D2  0581 005B                            BBF      s:21027,PREL

      929    21005    6                     THEN DO;

      930    21006    6                          IF NEXT=CURR THEN CALL MMSCREECH;

  21006   1 0006D4  E847 0011                            LDR,R6   NEXT,AUTO
          1 0006D6  E947 000E                            CMR,R6   CURR,AUTO
          1 0006D8  0981 0004                            BNE      s:21008,PREL

  21006   1 0006DA  E3C0 0C4B                            LNJ,B6   s:0,PREL
          1 0006DC       0001                            DC       s:21008,PREL

      931    21007
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:159  
      932    21008    6                          SOURCE_SIZE=NEXT$->GM$PPUT.SIZE;

  21008   1 0006DD  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 0006DF  E846 0001                            LDR,R6   1,B6
          1 0006E1  EF47 003C                            STR,R6   SOURCE_SIZE,AUTO

      933    21009    6                          GM$PPUTA(CURR)=NEXT$->GM$PPUT;

  21009   1 0006E3  8C86                                 LDI      ,B6
          1 0006E4  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 0006E7  B847 000E                            LDR,R3   CURR,AUTO
          1 0006E9  8D35                                 SDI      ,B5,R3

      934    21010    6                          G$UHJIT.ASDT_MCL.BPAR2=SHUF_DSCR;

  21010   1 0006EA  8C80 0000 0000  00                   LDI      SHUF_DSCR
          1 0006ED  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 0006F0  8D44 006A                            SDI      106,B4

      935    21011    6                          G$UHJIT.ASDT_MCL.BPAR2.BASE=NEXT;/*source*/

  21011   1 0006F2  D847 0011                            LDR,R5   NEXT,AUTO
          1 0006F4  DAC4 006A                            SRM,R5,'7FFF'X    106,B4
          1 0006F6       7FFF

      936    21012    6                          G$UHJIT.ASDT_MCL.WINDOW1=SHUF_DSCR;

  21012   1 0006F7  8D44 006E                            SDI      110,B4

      937    21013    6                          G$UHJIT.ASDT_MCL.WINDOW1.BASE=CURR;/*destination*/

  21013   1 0006F9  C847 000E                            LDR,R4   CURR,AUTO
          1 0006FB  CAC4 006E                            SRM,R4,'7FFF'X    110,B4
          1 0006FD       7FFF

      938    21014    6                          CALL GMV$MOVEUP (SOURCE_SIZE);

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:160  
  21014   1 0006FE  BBC7 003C                            LAB,B3   SOURCE_SIZE,AUTO
          1 000700  BFC7 0056                            STB,B3   @PAGENUM+4,AUTO
          1 000702  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000704  CBF0 0100                            LAB,B4   256,IMO
          1 000706  E380 0000 0000  xent                 LNJ,B6   GMV$MOVEUP
          1 000709       0001                            DC       s:21015,PREL

      939    21015    6                          GM_SHUF_SEGS# = GM_SHUF_SEGS# +1;

  21015   1 00070A  8A80 0000 0000  xsym                 INC      GM_SHUF_SEGS#

      940    21016
      941    21017    6                          CURR=G$UHJIT.ASDT_MCL.WINDOW1.BASE;/*1st dest pg ->CURR*/

  21017   1 00070D  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 000710  E846 006E                            LDR,R6   110,B6
          1 000712  E570 7FFF                            AND,R6   32767,IMO
          1 000714  EF47 000E                            STR,R6   CURR,AUTO

      942    21018    6                          NEXT=G$UHJIT.ASDT_MCL.BPAR2.BASE;/*1st source pg->NEXT*/

  21018   1 000716  D846 006A                            LDR,R5   106,B6
          1 000718  D570 7FFF                            AND,R5   32767,IMO
          1 00071A  DF47 0011                            STR,R5   NEXT,AUTO

      943    21019    6                          CALL ADJ_PP;

  21019   1 00071C  E3C0 0084                            LNJ,B6   s:0,PREL
          1 00071E       0001                            DC       s:21021,PREL

      944    21020
      945    21021    6                          GM$PPUTA(CURR)=GM$PPUTA(NEXT);

  21021   1 00071F  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000722  B847 0011                            LDR,R3   NEXT,AUTO
          1 000724  8CB6                                 LDI      ,B6,R3
          1 000725  A847 000E                            LDR,R2   CURR,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:161  
          1 000727  8D26                                 SDI      ,B6,R2

      946    21022    6                          NEXT=NEXT-1;

  21022   1 000728  88C7 0011                            DEC      NEXT,AUTO

      947    21023    6                          CURR=CURR-1;

  21023   1 00072A  88C7 000E                            DEC      CURR,AUTO

      948    21024    6                          END;

  21024   1 00072C  0F81 0010                            B        s:21032,PREL

      949    21025
      950    21026    6                     ELSE DO;

      951    21027    6                          IF NEXT$->GM$PPUT.SIZE=0 THEN CALL MMSCREECH;

  21027   1 00072E  E846 0001                            LDR,R6   1,B6
          1 000730  6981 0004                            BNEZ,R6  s:21029,PREL

  21027   1 000732  E3C0 0BF3                            LNJ,B6   s:0,PREL
          1 000734       0001                            DC       s:21029,PREL

      952    21028
      953    21029    6                          NEXT=NEXT-NEXT$->GM$PPUT.SIZE;

  21029   1 000735  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 000737  E847 0011                            LDR,R6   NEXT,AUTO
          1 000739  E246 0001                            SUB,R6   1,B6
          1 00073B  EF47 0011                            STR,R6   NEXT,AUTO

      954    21030    6                          END;

      955    21031
      956    21032    5                     NEXT$=ADDR(GM$PPUTA(NEXT));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:162  

  21032   1 00073D  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000740  B847 0011                            LDR,R3   NEXT,AUTO
          1 000742  3001                                 SOL,R3   1
          1 000743  DBB6                                 LAB,B5   ,B6,R3
          1 000744  DFC7 0012                            STB,B5   NEXT$,AUTO

      957    21033    5                     END;

  21033   1 000746  E847 0011                            LDR,R6   NEXT,AUTO
          1 000748  E947 002A                            CMR,R6   LIM,AUTO
          1 00074A  0381 0007                            BLE      s:21035,PREL
          1 00074C  ECC7 0012                            LDB,B6   NEXT$,AUTO
          1 00074E  8286                                 LB,'0008'X        ,B6
          1 00074F       0008
          1 000750  0501 FF7D                            BBT      s:21004,PREL

      958    21034
      959    21035    4                SIZE=CURR-NEXT;

  21035   1 000752  E247 000E                            SUB,R6   CURR,AUTO
          1 000754  8256                                 NEG      R6
          1 000755  EF47 0027                            STR,R6   SIZE,AUTO

      960    21036
      961    21037    4                IF SIZE ~= 0

  21037   1 000757  6901 0029                            BEZ,R6   s:21053,PREL

      962    21038    5                THEN DO;

      963    21039    5                     NEXT$=ADDR(GM$PPUTA(CURR)); /* Last page                    */

  21039   1 000759  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 00075C  B847 000E                            LDR,R3   CURR,AUTO
          1 00075E  3001                                 SOL,R3   1
          1 00075F  DBB6                                 LAB,B5   ,B6,R3
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:163  
          1 000760  DFC7 0012                            STB,B5   NEXT$,AUTO

      964    21040    5                     CURR$=ADDR(GM$PPUTA(NEXT+1)); /* First page                 */

  21040   1 000762  A847 0011                            LDR,R2   NEXT,AUTO
          1 000764  2001                                 SOL,R2   1
          1 000765  2E02                                 ADV,R2   2
          1 000766  CBA6                                 LAB,B4   ,B6,R2
          1 000767  CFC7 000F                            STB,B4   CURR$,AUTO

      965    21041    5                     CURR=NEXT+1;

  21041   1 000769  D847 0011                            LDR,R5   NEXT,AUTO
          1 00076B  5E01                                 ADV,R5   1
          1 00076C  DF47 000E                            STR,R5   CURR,AUTO

      966    21042    5                     CURR$->GM$PPUT.SIZE=SIZE;

  21042   1 00076E  EF44 0001                            STR,R6   1,B4

      967    21043    5                     NEXT$->GM$PPUT.SIZE=SIZE;

  21043   1 000770  EF45 0001                            STR,R6   1,B5

      968    21044    5                     NEXT$->GM$PPUT.C.FIRSTP='0'B;

  21044   1 000772  8805                                 LBF,'0080'X       ,B5
  21044   1 000773       0080

      969    21045    5                     CURR$->GM$PPUT.C.LASTP='0'B;

  21045   1 000774  8804                                 LBF,'0040'X       ,B4
  21045   1 000775       0040

      970    21046    5                     NEXT$->GM$PPUT.C.LASTP='1'B;

  21046   1 000776  8905                                 LBT,'0040'X       ,B5
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:164  
  21046   1 000777       0040

      971    21047    5                     CURR$->GM$PPUT.C.FIRSTP='1'B;

  21047   1 000778  8904                                 LBT,'0080'X       ,B4
  21047   1 000779       0080

      972    21048    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;

  21048   1 00077A  8904                                 LBT,'0008'X       ,B4
  21048   1 00077B       0008

      973    21049    5                     NEXT$->GM$PPUT.C.SHUFFLABLE='1'B;

  21049   1 00077C  8905                                 LBT,'0008'X       ,B5
  21049   1 00077D       0008

      974    21050    5                     CALL DEALLOCATE_SHUF;

  21050   1 00077E  E3C0 0463                            LNJ,B6   s:0,PREL
          1 000780       0001                            DC       s:21053,PREL

      975    21051    5                     END/*do if size >0*/;

      976    21052    4                END;

      977    21053    3           END;

  21053   1 000781  E847 0011                            LDR,R6   NEXT,AUTO
          1 000783  E947 002A                            CMR,R6   LIM,AUTO
          1 000785  0301 FF24                            BG       s:20995,PREL

      978    21054
      979    21055    2      CALL GHI$UTS(SHUF_STOP);

  21055   1 000787  EBC7 0033                            LAB,B6   SHUF_STOP,AUTO
          1 000789  EFC7 0056                            STB,B6   @PAGENUM+4,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:165  
          1 00078B  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 00078D  CBF0 0100                            LAB,B4   256,IMO
          1 00078F  E380 0000 0000  xent                 LNJ,B6   GHI$UTS
          1 000792       0001                            DC       s:21056,PREL

      980    21056    2      GM_SHUF_TIME = GM_SHUF_TIME + (SHUF_STOP - SHUF_START);

  21056   1 000793  8CC7 0033                            LDI      SHUF_STOP,AUTO
          1 000795  84C7 0031                            SID      SHUF_START,AUTO
          1 000797  8400 0000 0000  xsym                 AID      GM_SHUF_TIME
          1 00079A  8D00 0000 0000  xsym                 SDI      GM_SHUF_TIME

      981    21057
      982    21058    2      RETURN;

  21058   1 00079D  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 00079F  C3C6 0001                            LNJ,B4   1,B6

      983    21059    2   END SHUF_UP;
      984    21060
      985    21061        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:166  
      986    21062        /*I* NAME: ADJ_PP
      987    21063             PURPOSE:
      988    21064                   To adjust physical page numbers after moving a segment.
      989    21065
      990    21066             CALL: CALL ADJ_PP
      991    21067             INPUT:
      992    21068                   NEXT is the number of the old source page.
      993    21069                   CURR is the number of the new destination page.
      994    21070                   ASDT_MCL.WINDOW contains a descriptor with the base set to CURR
      995    21071             DESCRIPTION:
      996    21072                   All references to the old page in the IOPs, Sfile Table, and
      997    21073                   the HMI table are updated with the new page number.
      998    21074                   If the segment is a UHJIT the user table entry is adjusted.
      999    21075                   If it is the current users UHJIT, the ASDT is adjusted and
     1000    21076                   remapped.
     1001    21077                   Where ever the source page appears in the ASDTs of the
     1002    21078                   owner of the segment, it is changed to the destination
     1003    21079                   page.
     1004    21080        */
     1005    21081    1   ADJ_PP: PROC;

  21081   1 0007A1  EFC7 0040            ADJ_PP          STB,B6   CURRENT,AUTO

     1006    21082
     1007    21083    2   DCL USR UBIN;
     1008    21084    2   DCL NXTUSR UBIN;
     1009    21085    2   DCL I UBIN;
     1010    21086    2   DCL ENDPAGE UBIN;
     1011    21087    2   DCL USE_COUNT UBIN;
     1012    21088
     1013    21089    2      U$ = ADDR(GM$PPUTA(NEXT));

  21089   1 0007A3  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 0007A6  B847 0011                            LDR,R3   NEXT,AUTO
          1 0007A8  3001                                 SOL,R3   1
          1 0007A9  CBB5                                 LAB,B4   ,B5,R3
          1 0007AA  CFC7 002B                            STB,B4   U$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:167  

     1014    21090    2      ENDPAGE = NEXT + U$->GM$PPUT.SIZE;

  21090   1 0007AC  E847 0011                            LDR,R6   NEXT,AUTO
          1 0007AE  EA44 0001                            ADD,R6   1,B4
          1 0007B0  EF47 0045                            STR,R6   ENDPAGE,AUTO

     1015    21091    2      USR=U$->GM$PPUT.OWNER;

  21091   1 0007B2  D284                                 LLH,R5   ,B4
          1 0007B3  DF47 0042                            STR,R5   USR,AUTO

     1016    21092    2      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);

  21092   1 0007B5  BC80 0000 0000  xsym                 LDB,B3   G$WINDOW1$
          1 0007B8  BFC7 002B                            STB,B3   U$,AUTO

     1017    21093
     1018    21094        /* Check the Shared File Tables first; if its found in here, we
     1019    21095            may be able to get out of this routine fairly fast.
     1020    21096        */
     1021    21097    2      M$=G$BOBCAT$->G$BOBCAT.SFILE$;

  21097   1 0007BA  CC80 0000 0000  xsym                 LDB,B4   G$BOBCAT$
          1 0007BD  ACC4 001E                            LDB,B2   30,B4
          1 0007BF  AFC7 002D                            STB,B2   M$,AUTO

     1022    21098    2      USE_COUNT = 0;

  21098   1 0007C1  8747 0046                            CL       USE_COUNT,AUTO

     1023    21099    3      DO I = 1 TO G$BOBCAT$->G$BOBCAT.SFILE#;

  21099   1 0007C3  4C01                                 LDV,R4   1
          1 0007C4  CF47 0044                            STR,R4   I,AUTO
          1 0007C6  0F81 004B                            B        s:21124+2,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:168  
     1024    21100    3           M$=PINCRW(M$,SIZEW(G$SFILE));

  21100   1 0007C8  ECC7 002D                            LDB,B6   M$,AUTO
          1 0007CA  DBC6 0030                            LAB,B5   48,B6
          1 0007CC  DFC7 002D                            STB,B5   M$,AUTO

     1025    21101    3           IF G$SFILE.INSTTIME ~= 0

  21101   1 0007CE  8CC5 0020                            LDI      32,B5
          1 0007D0  84F0 0000 0000                       SID      0,IMO
          1 0007D3  6981 0003                            BNEZ,R6  s:21103,PREL
          1 0007D5  7901 0033                            BEZ,R7   s:21122,PREL

     1026    21102    4           THEN DO;

     1027    21103    4                USE_COUNT = USE_COUNT +1;

  21103   1 0007D7  8AC7 0046                            INC      USE_COUNT,AUTO

     1028    21104    5                DO L = 0 TO 7;

  21104   1 0007D9  8747 0023                            CL       L,AUTO

     1029    21105    5                     IF ADDR(G$SFILE.PP_ROS)->G$AWORD(L) = NEXT

  21105   1 0007DB  ECC7 002D                            LDB,B6   M$,AUTO
          1 0007DD  B847 0023                            LDR,R3   L,AUTO
          1 0007DF  3E28                                 ADV,R3   40
          1 0007E0  E836                                 LDR,R6   ,B6,R3
          1 0007E1  E947 0011                            CMR,R6   NEXT,AUTO
          1 0007E3  0981 001F                            BNE      s:21120,PREL

     1030    21106    6                     THEN DO;

     1031    21107    6                          ADDR(G$SFILE.PP_ROS)->G$AWORD(L)=CURR;

  21107   1 0007E5  E847 000E                            LDR,R6   CURR,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:169  
          1 0007E7  EF36                                 STR,R6   ,B6,R3

     1032    21108
     1033    21109    6                          IF L <= G$SFILE.SEG_1ST_PROC

  21109   1 0007E8  E847 0023                            LDR,R6   L,AUTO
          1 0007EA  E946 0023                            CMR,R6   35,B6
          1 0007EC  0301 0005                            BG       s:21113,PREL

     1034    21110    6                          THEN RETURN/*its data*/;

  21110   1 0007EE  ECC7 0040                            LDB,B6   CURRENT,AUTO
          1 0007F0  C3C6 0001                            LNJ,B4   1,B6

     1035    21111                                 /*L=1st proc is ok because we index differently here*/
     1036    21112
     1037    21113    6                          IF G$SFILE.UC = 0

  21113   1 0007F2  D2C6 001F                            LLH,R5   31,B6
          1 0007F4  5981 0005                            BNEZ,R5  s:21116,PREL

     1038    21114    6                          THEN RETURN/*cant be in anybody's map*/;

  21114   1 0007F6  ECC7 0040                            LDB,B6   CURRENT,AUTO
          1 0007F8  C3C6 0001                            LNJ,B4   1,B6

     1039    21115
     1040    21116    6                          IF (G$SFILE.LCP6_FLGS & %LCP6_INST#)

  21116   1 0007FA  C2C6 001E                            LLH,R4   30,B6
          1 0007FC  4008                                 SOL,R4   8
          1 0007FD  C570 0200                            AND,R4   512,IMO
          1 0007FF  4981 0096                            BNEZ,R4  s:21147,PREL

     1041    21117    6                          THEN GOTO CHECK_IOPS/*cant be HJIT or HMI*/;
     1042    21118    6                          ELSE GOTO CHECK_USRS/*cant be HJIT, HMI or IOP*/;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:170  
  21118   1 000801  0F81 00E7                            B        s:21188,PREL

     1043    21119    6                          END;
     1044    21120    5                     END/*do l=0 to 7*/;

  21120   1 000803  8AC7 0023                            INC      L,AUTO
          1 000805  E847 0023                            LDR,R6   L,AUTO
          1 000807  6D07                                 CMV,R6   7
          1 000808  03D3                                 BLE      s:21105,SPREL

     1045    21121    4                END/*do if insttime ~0*/;

     1046    21122    3           IF USE_COUNT = GJ_SFILE_CURR#

  21122   1 000809  E847 0046                            LDR,R6   USE_COUNT,AUTO
          1 00080B  E900 0000 0000  xsym                 CMR,R6   GJ_SFILE_CURR#
          1 00080E  0901 000C                            BE       s:21120,PREL

     1047    21123    3           THEN GOTO CHECK_HJITS/*found all used entries*/;
     1048    21124    3           END/*di i=1 to sfile#*/;

  21124   1 000810  8AC7 0044                            INC      I,AUTO
          1 000812  EC80 0000 0000  xsym                 LDB,B6   G$BOBCAT$
          1 000815  E847 0044                            LDR,R6   I,AUTO
          1 000817  E946 000B                            CMR,R6   11,B6
          1 000819  0381 FFAE                            BLE      s:21100,PREL

  21120   1                              CHECK_HJITS     null
     1049    21125
     1050    21126        /* Next see if we must update the HJIT page in the user tables
     1051    21127           or the physical page number in the HMI table.
     1052    21128        */
     1053    21129    2   CHECK_HJITS: ;
     1054    21130    2      M$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_MCL);

  21130   1 00081B  EC80 0000 0000  xsym CHECK_HJITS     LDB,B6   G$WINDOW1$
          1 00081E  DBC6 003E                            LAB,B5   62,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:171  
          1 000820  DFC7 002D                            STB,B5   M$,AUTO

     1055    21131
     1056    21132    3      DO I = 1 TO G_MUAIS;

  21132   1 000822  6C01                                 LDV,R6   1
          1 000823  EF47 0044                            STR,R6   I,AUTO
          1 000825  0F81 0069                            B        s:21153+2,PREL

     1057    21133    3           IF G$USER.US(I) ~= %GH_NULL

  21133   1 000827  EC80 0000 0000  xsym                 LDB,B6   G$USRT$
          1 00082A  B847 0044                            LDR,R3   I,AUTO
          1 00082C  3F18                                 MLV,R3   24
          1 00082D  3E02                                 ADV,R3   2
          1 00082E  E836                                 LDR,R6   ,B6,R3
          1 00082F  6D1F                                 CMV,R6   31
          1 000830  0901 005C                            BE       s:21153,PREL

     1058    21134    4           THEN DO;

     1059    21135    4                IF G$USER.UHJITPP(I) = NEXT

  21135   1 000832  DBC6 0011                            LAB,B5   17,B6
          1 000834  A847 0044                            LDR,R2   I,AUTO
          1 000836  2F0C                                 MLV,R2   12
          1 000837  F847 0011                            LDR,R7   NEXT,AUTO
          1 000839  6C00                                 LDV,R6   0
          1 00083A  84A5                                 SID      ,B5,R2
          1 00083B  6981 003C                            BNEZ,R6  s:21146,PREL
          1 00083D  7981 003A                            BNEZ,R7  s:21146,PREL

     1060    21136    5                THEN DO;

     1061    21137    5                     IF G$USER.UHJITPP(USR)=G$UHJIT.ASDT_MCL.UHJIT.BASE

  21137   1 00083F  DBC6 0011                            LAB,B5   17,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:172  
          1 000841  9847 0042                            LDR,R1   USR,AUTO
          1 000843  1F0C                                 MLV,R1   12
          1 000844  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 000847  F844 0048                            LDR,R7   72,B4
          1 000849  F570 7FFF                            AND,R7   32767,IMO
          1 00084B  6C00                                 LDV,R6   0
          1 00084C  8495                                 SID      ,B5,R1
          1 00084D  6981 001C                            BNEZ,R6  s:21142,PREL
          1 00084F  7981 001A                            BNEZ,R7  s:21142,PREL

     1062    21138    6                     THEN DO/* if current user*/;

     1063    21139    6                          G$MHJIT.ASDT_MON.UMHJIT.BASE = CURR;

  21139   1 000851  E847 000E                            LDR,R6   CURR,AUTO
          1 000853  DC80 0000 0000  xsym                 LDB,B5   G$MHJIT$
          1 000856  EAC5 000A                            SRM,R6,'7FFF'X    10,B5
          1 000858       7FFF

     1064    21140    6                          CALL GHH$ASD (G$UHJIT$, G$MHJIT.ASDT_MON.UMHJIT);

  21140   1 000859  BBC5 000A                            LAB,B3   10,B5
          1 00085B  BFC7 0058                            STB,B3   @PAGENUM+6,AUTO
          1 00085D  AB80 0000 0000  xsym                 LAB,B2   G$UHJIT$
          1 000860  AFC7 0056                            STB,B2   @PAGENUM+4,AUTO
          1 000862  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000864  CBF0 0200                            LAB,B4   512,IMO
          1 000866  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000869       0001                            DC       s:21142,PREL

     1065    21141    6                          END/*do if current user*/;

     1066    21142    5                     G$USER.UHJITPP(I) = CURR;

  21142   1 00086A  F847 000E                            LDR,R7   CURR,AUTO
          1 00086C  6C00                                 LDV,R6   0
          1 00086D  EC80 0000 0000  xsym                 LDB,B6   G$USRT$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:173  
          1 000870  DBC6 0011                            LAB,B5   17,B6
          1 000872  B847 0044                            LDR,R3   I,AUTO
          1 000874  3F0C                                 MLV,R3   12
          1 000875  8D35                                 SDI      ,B5,R3

     1067    21143    5                     GOTO CHECK_USRS/*cant be in HMI or IOP*/;

  21143   1 000876  0F81 0072                            B        s:21188,PREL

     1068    21144    5                     END/*do if its an HJIT page*/;
     1069    21145
     1070    21146    4                IF G$USER.HMI$(I) ~= ADDR(NIL) AND

  21146   1 000878  2E0A                                 ADV,R2   10
          1 000879  8DA6                                 CMN      ,B6,R2
          1 00087A  0901 0012                            BE       s:21153,PREL
          1 00087C  DCA6                                 LDB,B5   ,B6,R2
          1 00087D  F847 0011                            LDR,R7   NEXT,AUTO
          1 00087F  6C00                                 LDV,R6   0
          1 000880  84C5 0015                            SID      21,B5
          1 000882  6981 000A                            BNEZ,R6  s:21153,PREL
          1 000884  7981 0008                            BNEZ,R7  s:21153,PREL

     1071    21147    4                  G$USER.HMI$(I)->KNH$HMI.PP# = NEXT
     1072    21148    5                THEN DO;

     1073    21149    5                     G$USER.HMI$(I)->KNH$HMI.PP# = CURR;

  21149   1 000886  F847 000E                            LDR,R7   CURR,AUTO
          1 000888  6C00                                 LDV,R6   0
          1 000889  8D45 0015                            SDI      21,B5

     1074    21150    5                     GOTO CHECK_IOPS;

  21150   1 00088B  0F81 000A                            B        s:21147,PREL

     1075    21151    5                     END/*do if hmi.pp#*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:174  
     1076    21152    4                END/*do if not null*/;
     1077    21153    3           END/*do I=1 to max_users*/;

  21153   1 00088D  8AC7 0044                            INC      I,AUTO
          1 00088F  E847 0044                            LDR,R6   I,AUTO
          1 000891  E900 0000 0000  xsym                 CMR,R6   G_MUAIS
          1 000894  0381 FF92                            BLE      s:21133,PREL

  21147   1                              CHECK_IOPS      null
     1078    21154
     1079    21155        /* Run through all the IOPs looking for the physical page.  It may
     1080    21156           appear in more than one IOP.
     1081    21157        */
     1082    21158    2   CHECK_IOPS: ;
     1083    21159    2      M$ = KN_IOP_START$;

  21159   1 000896  EC80 0000 0000  xsym CHECK_IOPS      LDB,B6   KN_IOP_START$
          1 000899  EFC7 002D                            STB,B6   M$,AUTO

     1084    21160
     1085    21161    3      DO WHILE(M$ <= KN_IOP_END$);

  21161   1 00089B  ED80 0000 0000  xsym                 CMB,B6   KN_IOP_END$
          1 00089E  0301 004A                            BG       s:21188,PREL

     1086    21162    3           IF KN$IOP.FLAGS.INUSE

  21162   1 0008A0  ECC7 002D                            LDB,B6   M$,AUTO
          1 0008A2  82C6 0003                            LB,'1000'X        3,B6
          1 0008A4       1000
          1 0008A5  0581 003A                            BBF      s:21176,PREL

     1087    21163    4           THEN DO;

     1088    21164    4                IF KN$IOP.BUFSEGDES.BASE >= NEXT

  21164   1 0008A7  E846 0010                            LDR,R6   16,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:175  
          1 0008A9  E570 7FFF                            AND,R6   32767,IMO
          1 0008AB  E947 0011                            CMR,R6   NEXT,AUTO
          1 0008AD  0201 000C                            BL       s:21168,PREL
          1 0008AF  E947 0045                            CMR,R6   ENDPAGE,AUTO
          1 0008B1  0281 0008                            BGE      s:21168,PREL

     1089    21165    4                  AND KN$IOP.BUFSEGDES.BASE < ENDPAGE
     1090    21166    4                THEN KN$IOP.BUFSEGDES.BASE = CURR + KN$IOP.BUFSEGDES.BASE - NEXT;

  21166   1 0008B3  EA47 000E                            ADD,R6   CURR,AUTO
          1 0008B5  E247 0011                            SUB,R6   NEXT,AUTO
          1 0008B7  EAC6 0010                            SRM,R6,'7FFF'X    16,B6
          1 0008B9       7FFF

     1091    21167
     1092    21168    4                IF KN$IOP.KEYSEGDES.BASE >= NEXT

  21168   1 0008BA  E846 0012                            LDR,R6   18,B6
          1 0008BC  E570 7FFF                            AND,R6   32767,IMO
          1 0008BE  E947 0011                            CMR,R6   NEXT,AUTO
          1 0008C0  0201 000C                            BL       s:21172,PREL
          1 0008C2  E947 0045                            CMR,R6   ENDPAGE,AUTO
          1 0008C4  0281 0008                            BGE      s:21172,PREL

     1093    21169    4                  AND KN$IOP.KEYSEGDES.BASE < ENDPAGE
     1094    21170    4                THEN KN$IOP.KEYSEGDES.BASE = CURR + KN$IOP.KEYSEGDES.BASE - NEXT;

  21170   1 0008C6  EA47 000E                            ADD,R6   CURR,AUTO
          1 0008C8  E247 0011                            SUB,R6   NEXT,AUTO
          1 0008CA  EAC6 0012                            SRM,R6,'7FFF'X    18,B6
          1 0008CC       7FFF

     1095    21171
     1096    21172    4                IF KN$IOP.DCBSEGDES.BASE >= NEXT

  21172   1 0008CD  E846 0014                            LDR,R6   20,B6
          1 0008CF  E570 7FFF                            AND,R6   32767,IMO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:176  
          1 0008D1  E947 0011                            CMR,R6   NEXT,AUTO
          1 0008D3  0201 000C                            BL       s:21176,PREL
          1 0008D5  E947 0045                            CMR,R6   ENDPAGE,AUTO
          1 0008D7  0281 0008                            BGE      s:21176,PREL

     1097    21173    4                  AND KN$IOP.DCBSEGDES.BASE < ENDPAGE
     1098    21174    4                THEN KN$IOP.DCBSEGDES.BASE = CURR + KN$IOP.DCBSEGDES.BASE - NEXT;

  21174   1 0008D9  EA47 000E                            ADD,R6   CURR,AUTO
          1 0008DB  E247 0011                            SUB,R6   NEXT,AUTO
          1 0008DD  EAC6 0014                            SRM,R6,'7FFF'X    20,B6
          1 0008DF       7FFF

     1099    21175    4                END/*do if iop is in use*/;

     1100    21176    3           M$ = PINCRW(M$,SIZEW(KN$IOP));

  21176   1 0008E0  DBC6 001B                            LAB,B5   27,B6
          1 0008E2  DFC7 002D                            STB,B5   M$,AUTO

     1101    21177    3           END/*do while*/;

  21177   1 0008E4  DD80 0000 0000  xsym                 CMB,B5   KN_IOP_END$
          1 0008E7  0381 FFB8                            BLE      s:21162,PREL

     1102    21178
     1103    21179        /* Run through the owners ASDT_USR and adjust all descriptors for
     1104    21180           this page.  Then do the same for ASDT_MCL to catch pages mapped
     1105    21181           in LPARs, BPARs and WINDOW.
     1106    21182           If the user has connected interrupt levels, do the same for
     1107    21183           each HHJIT.
     1108    21184           If other user's are CVMed on to this one or using the same
     1109    21185           shared file (UHJIT.SHRD_SEG) do all of the above for them too.
     1110    21186        */
     1111    21187    2   CHECK_USRS:
     1112    21188    2      NXTUSR=0;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:177  
  21188   1 0008E9  8747 0043            CHECK_USRS      CL       NXTUSR,AUTO

     1113    21189    2      M$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_MCL);

  21189   1 0008EB  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 0008EE  DBC6 003E                            LAB,B5   62,B6
          1 0008F0  DFC7 002D                            STB,B5   M$,AUTO

     1114    21190
     1115    21191    3      DO WHILE (USR ~= 0);

  21191   1 0008F2  E847 0042                            LDR,R6   USR,AUTO
          1 0008F4  6901 00DE                            BEZ,R6   s:21235,PREL

     1116    21192    3           FLG.BASE_LVL = '1'B;

  21192   1 0008F6  8947 0035                            LBT,'0400'X       FLG,AUTO
  21192   1 0008F8       0400

     1117    21193    3           LOG=G$USER.UHJITPP(USR);

  21193   1 0008F9  EC80 0000 0000  xsym                 LDB,B6   G$USRT$
          1 0008FC  B847 0042                            LDR,R3   USR,AUTO
          1 0008FE  3F18                                 MLV,R3   24
          1 0008FF  3E12                                 ADV,R3   18
          1 000900  E836                                 LDR,R6   ,B6,R3
          1 000901  EF47 0024                            STR,R6   LOG,AUTO

  21193   1                              MAP_HHJIT       null
     1118    21194    3   MAP_HHJIT: ;
     1119    21195    3           CALL MAP (LOG);

  21195   1 000903  DBC7 0024            MAP_HHJIT       LAB,B5   LOG,AUTO
          1 000905  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 000907  E3C0 08A8                            LNJ,B6   s:0,PREL
          1 000909       0001                            DC       s:21196,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:178  
     1120    21196    4           DO I = 1 TO 30;

  21196   1 00090A  6C01                                 LDV,R6   1
          1 00090B  EF47 0044                            STR,R6   I,AUTO

     1121    21197    4                IF USRMAP.BASE(I) = NEXT

  21197   1 00090D  ECC7 002B                            LDB,B6   U$,AUTO
          1 00090F  B847 0044                            LDR,R3   I,AUTO
          1 000911  3001                                 SOL,R3   1
          1 000912  E836                                 LDR,R6   ,B6,R3
          1 000913  E570 7FFF                            AND,R6   32767,IMO
          1 000915  E947 0011                            CMR,R6   NEXT,AUTO
          1 000917  0981 0014                            BNE      s:21202,PREL

     1122    21198    5                THEN DO;

     1123    21199    5                     USRMAP.BASE(I) = CURR;

  21199   1 000919  D847 000E                            LDR,R5   CURR,AUTO
          1 00091B  DAB6                                 SRM,R5,'7FFF'X    ,B6,R3
          1 00091C       7FFF

     1124    21200    5                     IF FLG.BASE_LVL THEN NXTUSR = G$WINDOW1$->G$UHJIT.SHRD_SEG(I);

  21200   1 00091D  82C7 0035                            LB,'0400'X        FLG,AUTO
  21200   1 00091F       0400
          1 000920  0581 000B                            BBF      s:21202,PREL

  21200   1 000922  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 000925  CBC5 0183                            LAB,B4   387,B5
          1 000927  A847 0044                            LDR,R2   I,AUTO
          1 000929  E2A4                                 LLH,R6   ,B4,R2
          1 00092A  EF47 0043                            STR,R6   NXTUSR,AUTO

     1125    21201    5                     END;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:179  
     1126    21202    4                IF MCLMAP.BASE(I) >= NEXT AND

  21202   1 00092C  DCC7 002D                            LDB,B5   M$,AUTO
          1 00092E  E835                                 LDR,R6   ,B5,R3
          1 00092F  E570 7FFF                            AND,R6   32767,IMO
          1 000931  E947 0011                            CMR,R6   NEXT,AUTO
          1 000933  0201 000B                            BL       s:21205,PREL
          1 000935  E947 0045                            CMR,R6   ENDPAGE,AUTO
          1 000937  0281 0007                            BGE      s:21205,PREL

     1127    21203    4                  MCLMAP.BASE(I) < ENDPAGE
     1128    21204    4                THEN MCLMAP.BASE(I) = CURR+MCLMAP.BASE(I)-NEXT;

  21204   1 000939  EA47 000E                            ADD,R6   CURR,AUTO
          1 00093B  E247 0011                            SUB,R6   NEXT,AUTO
          1 00093D  EAB5                                 SRM,R6,'7FFF'X    ,B5,R3
          1 00093E       7FFF

     1129    21205    4                END/*di i=1 to 30*/;

  21205   1 00093F  8AC7 0044                            INC      I,AUTO
          1 000941  E847 0044                            LDR,R6   I,AUTO
          1 000943  6D1E                                 CMV,R6   30
          1 000944  03C9                                 BLE      s:21197,SPREL

     1130    21206
     1131    21207    3           FLG.BASE_LVL = '0'B;

  21207   1 000945  8847 0035                            LBF,'0400'X       FLG,AUTO
  21207   1 000947       0400

     1132    21208    4           DO I = 12 TO 60;

  21208   1 000948  6C0C                                 LDV,R6   12
          1 000949  EF47 0044                            STR,R6   I,AUTO

     1133    21209    4                IF G$WINDOW1$->G$UHJIT.CNCTD_LVLS(I)
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:180  

  21209   1 00094B  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 00094E  DBC6 017F                            LAB,B5   383,B6
          1 000950  B847 0044                            LDR,R3   I,AUTO
          1 000952  82B5                                 LB       ,B5,R3
          1 000953  0581 0068                            BBF      s:21227,PREL
          1 000955  DC80 0000 0000  xsym                 LDB,B5   G$MHJIT$
          1 000958  CBC5 02A7                            LAB,B4   679,B5
          1 00095A  3004                                 SOL,R3   4
          1 00095B  E834                                 LDR,R6   ,B4,R3
          1 00095C  E570 0FFF                            AND,R6   4095,IMO
          1 00095E  6901 005D                            BEZ,R6   s:21227,PREL

     1134    21210    4                  AND G$MHJIT.INTCON.HJIT_PG.BASE(I-12)~= 0
     1135    21211    5                THEN DO;

     1136    21212    5                     IF G$MHJIT.INTCON.HJIT_PG.BASE(I-12)=NEXT

  21212   1 000960  CBC5 02A7                            LAB,B4   679,B5
          1 000962  E834                                 LDR,R6   ,B4,R3
          1 000963  E570 0FFF                            AND,R6   4095,IMO
          1 000965  E947 0011                            CMR,R6   NEXT,AUTO
          1 000967  0981 0007                            BNE      s:21215,PREL

     1137    21213    5                     THEN G$MHJIT.INTCON.HJIT_PG.BASE(I-12) = CURR;

  21213   1 000969  E847 000E                            LDR,R6   CURR,AUTO
          1 00096B  CBC5 02A7                            LAB,B4   679,B5
          1 00096D  EAB4                                 SRM,R6,'0FFF'X    ,B4,R3
          1 00096E       0FFF

     1138    21214
     1139    21215    5                     G$UHJIT.ASDT_MCL.BPAR2 = SHUF_DSCR;

  21215   1 00096F  8C80 0000 0000  00                   LDI      SHUF_DSCR
          1 000972  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 000975  8D44 006A                            SDI      106,B4
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:181  

     1140    21216    5                     G$UHJIT.ASDT_MCL.BPAR2.BASE=G$MHJIT.INTCON.HHJIT(I-12);

  21216   1 000977  BBC5 02A7                            LAB,B3   679,B5
          1 000979  D833                                 LDR,R5   ,B3,R3
          1 00097A  DAC4 006A                            SRM,R5,'7FFF'X    106,B4
          1 00097C       7FFF

     1141    21217    5                     CALL GHH$ASD (G$BPAR2$,G$UHJIT.ASDT_MCL.BPAR2);

  21217   1 00097D  BBC4 006A                            LAB,B3   106,B4
          1 00097F  BFC7 0058                            STB,B3   @PAGENUM+6,AUTO
          1 000981  AB80 0000 0000  xsym                 LAB,B2   G$BPAR2$
          1 000984  AFC7 0056                            STB,B2   @PAGENUM+4,AUTO
          1 000986  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000988  CBF0 0200                            LAB,B4   512,IMO
          1 00098A  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 00098D       0001                            DC       s:21218,PREL

     1142    21218    6                     DO L = 1 TO 30;

  21218   1 00098E  6C01                                 LDV,R6   1
          1 00098F  EF47 0023                            STR,R6   L,AUTO

     1143    21219    6                          B$ = ADDR(B_HHJIT.ASDT_USR);

  21219   1 000991  EC80 0000 0000  xsym                 LDB,B6   G$BPAR2$
          1 000994  EFC7 002F                            STB,B6   B$,AUTO

     1144    21220    6                          IF B$->G$SEGDESCA.BASE(L) = NEXT

  21220   1 000996  B847 0023                            LDR,R3   L,AUTO
          1 000998  3001                                 SOL,R3   1
          1 000999  E836                                 LDR,R6   ,B6,R3
          1 00099A  E570 7FFF                            AND,R6   32767,IMO
          1 00099C  E947 0011                            CMR,R6   NEXT,AUTO
          1 00099E  0981 0005                            BNE      s:21222,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:182  

     1145    21221    6                          THEN B$->G$SEGDESCA.BASE(L) = CURR;

  21221   1 0009A0  D847 000E                            LDR,R5   CURR,AUTO
          1 0009A2  DAB6                                 SRM,R5,'7FFF'X    ,B6,R3
          1 0009A3       7FFF

     1146    21222    6                          B$ = ADDR(B_HHJIT.ASDT_MCL);

  21222   1 0009A4  DBC6 003E                            LAB,B5   62,B6
          1 0009A6  DFC7 002F                            STB,B5   B$,AUTO

     1147    21223    6                          IF B$->G$SEGDESCA.BASE(L) = NEXT

  21223   1 0009A8  B847 0023                            LDR,R3   L,AUTO
          1 0009AA  3001                                 SOL,R3   1
          1 0009AB  E835                                 LDR,R6   ,B5,R3
          1 0009AC  E570 7FFF                            AND,R6   32767,IMO
          1 0009AE  E947 0011                            CMR,R6   NEXT,AUTO
          1 0009B0  0981 0005                            BNE      s:21225,PREL

     1148    21224    6                          THEN B$->G$SEGDESCA.BASE(L) = CURR;

  21224   1 0009B2  D847 000E                            LDR,R5   CURR,AUTO
          1 0009B4  DAB5                                 SRM,R5,'7FFF'X    ,B5,R3
          1 0009B5       7FFF

     1149    21225    6                          END/*do l=1 t0 30*/;

  21225   1 0009B6  8AC7 0023                            INC      L,AUTO
          1 0009B8  E847 0023                            LDR,R6   L,AUTO
          1 0009BA  6D1E                                 CMV,R6   30
          1 0009BB  03D6                                 BLE      s:21219,SPREL

     1150    21226    5                     END/*do if uhjit.cnctd_lvls*/;

     1151    21227    3                END;/*do i=12 to 60*/;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:183  

  21227   1 0009BC  8AC7 0044                            INC      I,AUTO
          1 0009BE  E847 0044                            LDR,R6   I,AUTO
          1 0009C0  6D3C                                 CMV,R6   60
          1 0009C1  0381 FF89                            BLE      s:21209,PREL

     1152    21228
     1153    21229    3           IF NXTUSR = USR

  21229   1 0009C3  D847 0043                            LDR,R5   NXTUSR,AUTO
          1 0009C5  D947 0042                            CMR,R5   USR,AUTO
          1 0009C7  0981 0005                            BNE      s:21231,PREL

     1154    21230    3           THEN USR=0;

  21230   1 0009C9  8747 0042                            CL       USR,AUTO
          1 0009CB  0F81 0003                            B        s:21233,PREL

     1155    21231    3           ELSE USR=NXTUSR;

  21231   1 0009CD  DF47 0042                            STR,R5   USR,AUTO

     1156    21232
     1157    21233    3           END/*do while usr~=0*/;

  21233   1 0009CF  C847 0042                            LDR,R4   USR,AUTO
          1 0009D1  4981 FF24                            BNEZ,R4  s:21192,PREL

     1158    21234
     1159    21235    2      RETURN;

  21235   1 0009D3  ECC7 0040                            LDB,B6   CURRENT,AUTO
          1 0009D5  C3C6 0001                            LNJ,B4   1,B6

     1160    21236
     1161    21237    2   END ADJ_PP;
     1162    21238        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:184  
     1163    21239        /*D* NAME: GMA$RELPS
     1164    21240
     1165    21241             CALL: CALL GMA$RELPS (page number,page size); !! Doesn't ALTRET !!
     1166    21242
     1167    21243             INPUT:
     1168    21244                   PAGENO - The physical page number of the first page of the
     1169    21245                   segment to be released.
     1170    21246                   PAGES - Size of segment to be released, in pages.
     1171    21247             OUTPUT:
     1172    21248                   The specified segment is de-allocated.
     1173    21249             DESCRIPTION:
     1174    21250                   The segment beginning at PAGENO is de-allocated.
     1175    21251        */
     1176    21252    1   GMA$RELPS: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                     */

  21252   1 0009D7  D380 0000 0000  xent GMA$RELPS       LNJ,B5   X6A_AUTO_N
          1 0009DA       005A 0005                       DC       90,5

     1177    21253
     1178    21254    1      CURR_MEAT$ = ADDR (GM_MEAT_SHUF);

  21254   1 0009DC  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 0009DF  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

     1179    21255    1      SIZE = PAGES;

  21255   1 0009E1  DCC7 0006                            LDB,B5   @PAGES,AUTO
          1 0009E3  E805                                 LDR,R6   ,B5
          1 0009E4  EF47 0027                            STR,R6   SIZE,AUTO

     1180    21256    1      CURR = PAGENO;

  21256   1 0009E6  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 0009E8  D804                                 LDR,R5   ,B4
          1 0009E9  DF47 000E                            STR,R5   CURR,AUTO

     1181    21257    1      CURR$ = ADDR (GM$PPUTA (PAGENO));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:185  

  21257   1 0009EB  B804                                 LDR,R3   ,B4
          1 0009EC  BC80 0000 0000  xsym                 LDB,B3   G$PPUT$
          1 0009EF  3001                                 SOL,R3   1
          1 0009F0  ABB3                                 LAB,B2   ,B3,R3
          1 0009F1  AFC7 000F                            STB,B2   CURR$,AUTO

     1182    21258    1      CURR_LAST = PAGENO + CURR$->GM$PPUT.SIZE -1;

  21258   1 0009F3  C804                                 LDR,R4   ,B4
          1 0009F4  CA42 0001                            ADD,R4   1,B2
          1 0009F6  4EFF                                 ADV,R4   -1
          1 0009F7  CF47 0017                            STR,R4   CURR_LAST,AUTO

     1183    21259    1      CURR_LAST$ = ADDR(GM$PPUTA (CURR_LAST));

  21259   1 0009F9  B854                                 LDR,R3   R4
          1 0009FA  3001                                 SOL,R3   1
          1 0009FB  9BB3                                 LAB,B1   ,B3,R3
          1 0009FC  9FC7 0018                            STB,B1   CURR_LAST$,AUTO

     1184    21260    1      CALL LOCK_GATE;

  21260   1 0009FE  E3C0 07E7                            LNJ,B6   s:0,PREL
          1 000A00       0001                            DC       s:21262,PREL

     1185    21261
     1186    21262    1      IF (CURR > GM_SHUF_HI) OR (CURR < GM_MEM_LOW)

  21262   1 000A01  E847 000E                            LDR,R6   CURR,AUTO
          1 000A03  E900 0000 0000  xsym                 CMR,R6   GM_SHUF_HI
          1 000A06  0301 0006                            BG       s:21263,PREL
          1 000A08  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 000A0B  0281 0004                            BGE      s:21265,PREL

     1187    21263    1      THEN CALL MMSCREECH;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:186  
  21263   1 000A0D  E3C0 0918                            LNJ,B6   s:0,PREL
          1 000A0F       0001                            DC       s:21265,PREL

     1188    21264
     1189    21265    1      IF (NOT CURR$->GM$PPUT.C.FIRSTP) OR (CURR$->GM$PPUT.SIZE ~= SIZE ) OR

  21265   1 000A10  ECC7 000F                            LDB,B6   CURR$,AUTO
          1 000A12  8286                                 LB,'0080'X        ,B6
          1 000A13       0080
          1 000A14  0581 000B                            BBF      s:21267,PREL
          1 000A16  E846 0001                            LDR,R6   1,B6
          1 000A18  E947 0027                            CMR,R6   SIZE,AUTO
          1 000A1A  0981 0005                            BNE      s:21267,PREL
          1 000A1C  8286                                 LB,'0020'X        ,B6
          1 000A1D       0020
          1 000A1E  0501 0004                            BBT      s:21269,PREL

     1190    21266    1        (NOT CURR$->GM$PPUT.C.INUSE)
     1191    21267    1      THEN CALL MMSCREECH;

  21267   1 000A20  E3C0 0905                            LNJ,B6   s:0,PREL
          1 000A22       0001                            DC       s:21269,PREL

     1192    21268
     1193    21269    1      IF CURR$->GM$PPUT.C.SHUFFLABLE = '0'B

  21269   1 000A23  ECC7 000F                            LDB,B6   CURR$,AUTO
          1 000A25  8286                                 LB,'0008'X        ,B6
          1 000A26       0008
          1 000A27  0501 0008                            BBT      s:21274,PREL

     1194    21270    2      THEN DO;

     1195    21271    2           GM_XSHUF = GM_XSHUF - 1;

  21271   1 000A29  8880 0000 0000  xsym                 DEC      GM_XSHUF

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:187  
     1196    21272    2           CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;

  21272   1 000A2C  DCC7 0018                            LDB,B5   CURR_LAST$,AUTO
          1 000A2E  8905                                 LBT,'0008'X       ,B5
          1 000A2F       0008

     1197    21273    2           END;

     1198    21274    1      CALL RELCVM;

  21274   1 000A30  E3C0 03AE                            LNJ,B6   s:0,PREL
          1 000A32       0001                            DC       s:21275,PREL

     1199    21275    1      CALL DEALLOCATE;

  21275   1 000A33  E3C0 00EB                            LNJ,B6   s:0,PREL
          1 000A35       0001                            DC       s:21276,PREL

     1200    21276    1      CALL CHKPPT;                         /* Check PPUT                         */

  21276   1 000A36  E3C0 07CD                            LNJ,B6   s:0,PREL
          1 000A38       0001                            DC       s:21277,PREL

     1201    21277    1      GOTO RELPGS_EXIT;

  21277   1 000A39  0F81 00C0                            B        s:21338,PREL

     1202    21278
     1203    21279        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:188  
     1204    21280        /*D* NAME: GMA$REL
     1205    21281
     1206    21282            CALL: CALL GMA$REL (segment_index,pages);
     1207    21283
     1208    21284             PARAMETERS:
     1209    21285                   segment-index is an index to the segment descriptor in the
     1210    21286                   user's ASDT for which memory is to be released.
     1211    21287                   pages is the number of pages to be released.
     1212    21288             DESCRIPTION:
     1213    21289                   This routine is called to release pages from a segment of
     1214    21290                   user memory. The segment descriptor in the users ASDT
     1215    21291                   is set to reflect the outcome, (empty or size adjusted).
     1216    21292                                                                           */
     1217    21293
     1218    21294    1   GMA$REL: ENTRY (PAGENO,PAGES) ALTRET;

  21294   1 000A3B  D380 0000 0000  xent GMA$REL         LNJ,B5   X6A_AUTO_N
          1 000A3E       005A 0005                       DC       90,5

     1219    21295    1      G$SEGDESC=G$ASDT_USR$->G$SEGDESCA(SEGX);

  21295   1 000A40  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000A42  B806                                 LDR,R3   ,B6
          1 000A43  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 000A46  8CB5                                 LDI      ,B5,R3
          1 000A47  8D47 0020                            SDI      G$SEGDESC,AUTO

     1220    21296    1      IF (G$SEGDESC.V ='0'B) OR (PAGES > G$SEGDESC.SIZE+1)

  21296   1 000A49  89C7 0020                            CMZ      G$SEGDESC,AUTO
          1 000A4B  0881 000B                            BAGE     s:21297,PREL
          1 000A4D  CCC7 0006                            LDB,B4   @PAGES,AUTO
          1 000A4F  D847 0021                            LDR,R5   G$SEGDESC+1,AUTO
          1 000A51  D570 01FF                            AND,R5   511,IMO
          1 000A53  5E01                                 ADV,R5   1
          1 000A54  D904                                 CMR,R5   ,B4
          1 000A55  0281 0004                            BGE      s:21299,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:189  

     1221    21297    1      THEN CALL MMSCREECH;

  21297   1 000A57  E3C0 08CE                            LNJ,B6   s:0,PREL
          1 000A59       0001                            DC       s:21299,PREL

     1222    21298
     1223    21299    1      CALL LOCK_GATE;

  21299   1 000A5A  E3C0 078B                            LNJ,B6   s:0,PREL
          1 000A5C       0001                            DC       s:21301,PREL

     1224    21300
     1225    21301    1      CURR=G$SEGDESC.BASE;

  21301   1 000A5D  E847 0020                            LDR,R6   G$SEGDESC,AUTO
          1 000A5F  E570 7FFF                            AND,R6   32767,IMO
          1 000A61  EF47 000E                            STR,R6   CURR,AUTO

     1226    21302    1      IF (CURR > GM_MEM_HI) OR (CURR < GM_MEM_LOW)

  21302   1 000A63  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 000A66  0301 0006                            BG       s:21303,PREL
          1 000A68  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 000A6B  0281 0004                            BGE      s:21305,PREL

     1227    21303    1      THEN CALL MMSCREECH;

  21303   1 000A6D  E3C0 08B8                            LNJ,B6   s:0,PREL
          1 000A6F       0001                            DC       s:21305,PREL

     1228    21304
     1229    21305    1      IF CURR > GM_SHUF_HI

  21305   1 000A70  E847 000E                            LDR,R6   CURR,AUTO
          1 000A72  E900 0000 0000  xsym                 CMR,R6   GM_SHUF_HI
          1 000A75  0381 0008                            BLE      s:21307,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:190  

     1230    21306    1      THEN CURR_MEAT$=ADDR(GM_MEAT_NSHF);

  21306   1 000A77  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_NSHF
          1 000A7A  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO
          1 000A7C  0F81 0006                            B        s:21309,PREL

     1231    21307    1      ELSE CURR_MEAT$=ADDR(GM_MEAT_SHUF);

  21307   1 000A7E  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000A81  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

     1232    21308
     1233    21309    1      CURR$=ADDR(GM$PPUTA(CURR));

  21309   1 000A83  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000A86  B856                                 LDR,R3   R6
          1 000A87  3001                                 SOL,R3   1
          1 000A88  CBB5                                 LAB,B4   ,B5,R3
          1 000A89  CFC7 000F                            STB,B4   CURR$,AUTO

     1234    21310
     1235    21311    1      IF PAGES ~= G$SEGDESC.SIZE+1

  21311   1 000A8B  BCC7 0006                            LDB,B3   @PAGES,AUTO
          1 000A8D  D847 0021                            LDR,R5   G$SEGDESC+1,AUTO
          1 000A8F  D570 01FF                            AND,R5   511,IMO
          1 000A91  5E01                                 ADV,R5   1
          1 000A92  D903                                 CMR,R5   ,B3
          1 000A93  0901 0059                            BE       s:21340,PREL

     1236    21312    2      THEN DO;

     1237    21313    2           SIZE=G$SEGDESC.SIZE +1 - PAGES;

  21313   1 000A95  C847 0021                            LDR,R4   G$SEGDESC+1,AUTO
          1 000A97  C570 01FF                            AND,R4   511,IMO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:191  
          1 000A99  C203                                 SUB,R4   ,B3
          1 000A9A  4E01                                 ADV,R4   1
          1 000A9B  CF47 0027                            STR,R4   SIZE,AUTO

     1238    21314    2           CURR$->GM$PPUT.SIZE=SIZE;

  21314   1 000A9D  CF44 0001                            STR,R4   1,B4

     1239    21315    2           CURR=CURR+SIZE-1;

  21315   1 000A9F  CA47 000E                            ADD,R4   CURR,AUTO
          1 000AA1  4EFF                                 ADV,R4   -1
          1 000AA2  CF47 000E                            STR,R4   CURR,AUTO

     1240    21316    2           CURR$=ADDR(GM$PPUTA(CURR));

  21316   1 000AA4  A854                                 LDR,R2   R4
          1 000AA5  2001                                 SOL,R2   1
          1 000AA6  ABA5                                 LAB,B2   ,B5,R2
          1 000AA7  AFC7 000F                            STB,B2   CURR$,AUTO

     1241    21317    2           CURR$->GM$PPUT.C.INUSE='1'B;

  21317   1 000AA9  8902                                 LBT,'0020'X       ,B2
  21317   1 000AAA       0020

     1242    21318    2           CURR$->GM$PPUT.C.LASTP='1'B;

  21318   1 000AAB  8902                                 LBT,'0040'X       ,B2
  21318   1 000AAC       0040

     1243    21319    2           CURR$->GM$PPUT.SIZE=SIZE;

  21319   1 000AAD  D847 0027                            LDR,R5   SIZE,AUTO
          1 000AAF  DF42 0001                            STR,R5   1,B2

     1244    21320
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:192  
     1245    21321    2           IF CURR <= GM_SHUF_HI

  21321   1 000AB1  9847 000E                            LDR,R1   CURR,AUTO
          1 000AB3  9900 0000 0000  xsym                 CMR,R1   GM_SHUF_HI
          1 000AB6  0301 0005                            BG       s:21323,PREL

     1246    21322    2           THEN CURR$->GM$PPUT.C.SHUFFLABLE='1'B;

  21322   1 000AB8  8902                                 LBT,'0008'X       ,B2
  21322   1 000AB9       0008
          1 000ABA  0F81 0003                            B        s:21325,PREL

     1247    21323    2           ELSE CURR$->GM$PPUT.C.SHUFFLABLE='0'B;

  21323   1 000ABC  8802                                 LBF,'0008'X       ,B2
  21323   1 000ABD       0008

     1248    21324
     1249    21325    2           IF SIZE ~= 1

  21325   1 000ABE  5D01                                 CMV,R5   1
          1 000ABF  0901 0003                            BE       s:21328,PREL

     1250    21326    2           THEN CURR$->GM$PPUT.C.FIRSTP = '0'B;

  21326   1 000AC1  8802                                 LBF,'0080'X       ,B2
  21326   1 000AC2       0080

     1251    21327
     1252    21328    2           CURR=CURR+1;

  21328   1 000AC3  8AC7 000E                            INC      CURR,AUTO

     1253    21329    2           CURR$=PINCRW(CURR$,SIZEW(GM$PPUT));

  21329   1 000AC5  CBC2 0002                            LAB,B4   2,B2
          1 000AC7  CFC7 000F                            STB,B4   CURR$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:193  

     1254    21330    2           CURR$->GM$PPUT.C.FIRSTP='1'B;

  21330   1 000AC9  8904                                 LBT,'0080'X       ,B4
  21330   1 000ACA       0080

     1255    21331    2           CURR$->GM$PPUT.SIZE=PAGES;

  21331   1 000ACB  9803                                 LDR,R1   ,B3
          1 000ACC  9F44 0001                            STR,R1   1,B4

     1256    21332    2           IF PAGES = 1

  21332   1 000ACE  E803                                 LDR,R6   ,B3
          1 000ACF  6D01                                 CMV,R6   1
          1 000AD0  0981 0005                            BNE      s:21334,PREL

     1257    21333    2           THEN CURR$->GM$PPUT.C.LASTP = '1'B;

  21333   1 000AD2  8904                                 LBT,'0040'X       ,B4
  21333   1 000AD3       0040
          1 000AD4  0F81 0003                            B        s:21335,PREL

     1258    21334    2           ELSE CURR$->GM$PPUT.C.LASTP = '0'B;

  21334   1 000AD6  8804                                 LBF,'0040'X       ,B4
  21334   1 000AD7       0040

     1259    21335    2           CURR_LAST=CURR+PAGES-1;

  21335   1 000AD8  E847 000E                            LDR,R6   CURR,AUTO
          1 000ADA  EA03                                 ADD,R6   ,B3
          1 000ADB  6EFF                                 ADV,R6   -1
          1 000ADC  EF47 0017                            STR,R6   CURR_LAST,AUTO

     1260    21336    2           GM$PPUTA.SIZE(CURR_LAST)=PAGES;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:194  
  21336   1 000ADE  B856                                 LDR,R3   R6
          1 000ADF  3001                                 SOL,R3   1
          1 000AE0  3E01                                 ADV,R3   1
          1 000AE1  E803                                 LDR,R6   ,B3
          1 000AE2  EF35                                 STR,R6   ,B5,R3

     1261    21337    2           G$SEGDESC.SIZE = G$SEGDESC.SIZE - PAGES;

  21337   1 000AE3  9847 0021                            LDR,R1   G$SEGDESC+1,AUTO
          1 000AE5  9570 01FF                            AND,R1   511,IMO
          1 000AE7  9203                                 SUB,R1   ,B3
          1 000AE8  9AC7 0021                            SRM,R1,'01FF'X    G$SEGDESC+1,AUTO
          1 000AEA       01FF

     1262    21338    2           END;

  21338   1 000AEB  0F81 0008                            B        s:21344,PREL

     1263    21339    2      ELSE DO;

     1264    21340    2           CALL RELCVM;

  21340   1 000AED  E3C0 02F1                            LNJ,B6   s:0,PREL
          1 000AEF       0001                            DC       s:21341,PREL

     1265    21341    2           G$SEGDESC ='0'B;

  21341   1 000AF0  8747 0020                            CL       G$SEGDESC,AUTO
          1 000AF2  8747 0021                            CL       G$SEGDESC+1,AUTO

     1266    21342    2           END;

     1267    21343
     1268    21344    1      CALL DEALLOCATE;

  21344   1 000AF4  E3C0 002A                            LNJ,B6   s:0,PREL
          1 000AF6       0001                            DC       s:21345,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:195  

     1269    21345    1      CALL SET_ASDTS;

  21345   1 000AF7  E3C0 0443                            LNJ,B6   s:0,PREL
          1 000AF9       0001                            DC       s:21338,PREL

  21338   1                              RELPGS_EXIT     null
     1270    21346
     1271    21347    1   RELPGS_EXIT: ;
     1272    21348    1      CALL UNLOCK_GATE;

  21348   1 000AFA  E3C0 06FA            RELPGS_EXIT     LNJ,B6   s:0,PREL
          1 000AFC       0001                            DC       s:21349,PREL

     1273    21349    1      CALL LOCK_GATE;

  21349   1 000AFD  E3C0 06E8                            LNJ,B6   s:0,PREL
          1 000AFF       0001                            DC       s:21350,PREL

     1274    21350    1      CALL CHKPPT;

  21350   1 000B00  E3C0 0703                            LNJ,B6   s:0,PREL
          1 000B02       0001                            DC       s:21351,PREL

     1275    21351    1      CALL UNLOCK_GATE;

  21351   1 000B03  E3C0 06F1                            LNJ,B6   s:0,PREL
          1 000B05       0001                            DC       s:21353,PREL

     1276    21352
     1277    21353    1      IF GM_SHUF-GM_STEP > 0

  21353   1 000B06  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 000B09  E200 0000 0000  xsym                 SUB,R6   GM_STEP
          1 000B0C  6A81 000F                            BLEZ,R6  s:21359,PREL

     1278    21354    2      THEN DO;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:196  

     1279    21355    2           IF GH_HQ(%GH_MEM)~= 0

  21355   1 000B0E  E800 0000 0010  xsym                 LDR,R6   GH_HQ+16
          1 000B11  6901 000A                            BEZ,R6   s:21359,PREL

     1280    21356    2           THEN CALL GHS$RUE(%GH_EVMA);

  21356   1 000B13  BB80 0000 0003  02                   LAB,B3   +3
          1 000B16  CBF0 0100                            LAB,B4   256,IMO
          1 000B18  E380 0000 0000  xent                 LNJ,B6   GHS$RUE
          1 000B1B       0001                            DC       s:21359,PREL

     1281    21357    2           END;

     1282    21358
     1283    21359    1      RETURN;

  21359   1 000B1C  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1284    21360        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:197  
     1285    21361        /*I* NAME: DEALLOCATE
     1286    21362             PURPOSE:
     1287    21363                   To de-allocate an extent.
     1288    21364
     1289    21365             CALL: CALL DEALLOCATE;
     1290    21366
     1291    21367             ENVIRONMENT:
     1292    21368                   GM_MEATLOCK gate is locked.
     1293    21369             INPUT:
     1294    21370                   CURR - Page number of the extent to be de-allocated.
     1295    21371                   CURR$ - Pointer to PPUT entry for CURR.
     1296    21372                   CURR_MEAT$ - Pointer to appropriate MEAT.
     1297    21373             OUTPUT:
     1298    21374                   PREV - page number of the last page of the extent which
     1299    21375                          will reflect any right hand compaction.
     1300    21376             SCRATCH:
     1301    21377                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1302    21378             DESCRIPTION:
     1303    21379                   The specified extent is de-allocated. If either its left neighbor
     1304    21380                   or right neighbor are unallocated, then they are compacted into
     1305    21381                   one larger extent. The resultant unallocated extent is then put
     1306    21382                   onto the head of its MEAT list.
     1307    21383        */
     1308    21384        /*I* NAME: DEALLOCATE_SHUF
     1309    21385
     1310    21386             DESCRIPTION:
     1311    21387                   Same as DEALLOCATE, except that the memory counters are
     1312    21388                   not messed with.
     1313    21389        */
     1314    21390    1   DEALLOCATE: PROC;

  21390   1 000B1F  EFC7 0040            DEALLOCATE      STB,B6   CURRENT,AUTO

     1315    21391
     1316    21392    2   DCL CURRENT UBIN;
     1317    21393    2   DCL CURRENT$ PTR;
     1318    21394    2   DCL CURR_LAST UBIN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:198  
     1319    21395    2   DCL CURR_SIZE UBIN;
     1320    21396    2   DCL LEFT_LAST$ PTR;
     1321    21397    2   DCL NEW_SIZE UBIN;
     1322    21398    2   DCL RIGHT$ PTR;
     1323    21399
     1324    21400    2      CURR_SIZE = CURR$->GM$PPUT.SIZE;

  21400   1 000B21  DCC7 000F                            LDB,B5   CURR$,AUTO
          1 000B23  E845 0001                            LDR,R6   1,B5
          1 000B25  EF47 0046                            STR,R6   CURR_SIZE,AUTO

     1325    21401
     1326    21402    2      IF G$JIT.MODE = %G_M_HANDLER#

  21402   1 000B27  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 000B2A  D2C4 0004                            LLH,R5   4,B4
          1 000B2C  5D03                                 CMV,R5   3
          1 000B2D  0981 000F                            BNE      s:21408,PREL

     1327    21403    3      THEN DO;

     1328    21404    3           GM_ASHUF = GM_ASHUF + CURR_SIZE;

  21404   1 000B2F  EA00 0000 0000  xsym                 ADD,R6   GM_ASHUF
          1 000B32  EF00 0000 0000  xsym                 STR,R6   GM_ASHUF

     1329    21405    3           GM_HSHUF = GM_HSHUF - CURR_SIZE;

  21405   1 000B35  C800 0000 0000  xsym                 LDR,R4   GM_HSHUF
          1 000B38  C247 0046                            SUB,R4   CURR_SIZE,AUTO
          1 000B3A  CF00 0000 0000  xsym                 STR,R4   GM_HSHUF

     1330    21406    3           END;

     1331    21407
     1332    21408    2      IF CURR_MEAT$ = ADDR (GM_MEAT_SHUF)

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:199  
  21408   1 000B3D  BB80 0000 0000  xsym                 LAB,B3   GM_MEAT_SHUF
          1 000B40  BDC7 001A                            CMB,B3   CURR_MEAT$,AUTO
          1 000B42  0981 000B                            BNE      s:21413,PREL

     1333    21409    3      THEN DO;

     1334    21410    3           GM_SHUF = GM_SHUF + CURR_SIZE;

  21410   1 000B44  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 000B47  EA47 0046                            ADD,R6   CURR_SIZE,AUTO
          1 000B49  EF00 0000 0000  xsym                 STR,R6   GM_SHUF

     1335    21411    3           END;

  21411   1 000B4C  0F81 0093                            B        s:21455,PREL

     1336    21412    3      ELSE DO;

     1337    21413    3           GM_NSHF_CURR = GM_NSHF_CURR - CURR_SIZE;

  21413   1 000B4E  E800 0000 0000  xsym                 LDR,R6   GM_NSHF_CURR
          1 000B51  E247 0046                            SUB,R6   CURR_SIZE,AUTO
          1 000B53  EF00 0000 0000  xsym                 STR,R6   GM_NSHF_CURR

     1338    21414
     1339    21415    3           IF CURR ~= GM_SHUF_HI +1

  21415   1 000B56  C800 0000 0000  xsym                 LDR,R4   GM_SHUF_HI
          1 000B59  4E01                                 ADV,R4   1
          1 000B5A  C947 000E                            CMR,R4   CURR,AUTO
          1 000B5C  0901 000B                            BE       s:21421,PREL

     1340    21416    4           THEN DO;

     1341    21417    4                GM_NSHF = GM_NSHF + CURR_SIZE;

  21417   1 000B5E  B800 0000 0000  xsym                 LDR,R3   GM_NSHF
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:200  
          1 000B61  BA47 0046                            ADD,R3   CURR_SIZE,AUTO
          1 000B63  BF00 0000 0000  xsym                 STR,R3   GM_NSHF

     1342    21418    4                END;

  21418   1 000B66  0F81 0079                            B        s:21455,PREL

     1343    21419
     1344    21420    4           ELSE DO;                   /*return this memory to te shuf mem pool*/

     1345    21421    4                NEW_SIZE = CURR_SIZE;

  21421   1 000B68  B847 0046                            LDR,R3   CURR_SIZE,AUTO
          1 000B6A  BF47 0049                            STR,R3   NEW_SIZE,AUTO

     1346    21422    4                RIGHT$ = PINCRW(CURR$, CURR_SIZE*SIZEW(GM$PPUT));

  21422   1 000B6C  F853                                 LDR,R7   R3
          1 000B6D  6C00                                 LDV,R6   0
          1 000B6E  7081                                 DOL,R7   1
          1 000B6F  8447 000F                            AID      CURR$,AUTO
          1 000B71  8D47 004A                            SDI      RIGHT$,AUTO

     1347    21423
     1348    21424    4                IF NOT(RIGHT$->GM$PPUT.C.INUSE)

  21424   1 000B73  BCC7 004A                            LDB,B3   RIGHT$,AUTO
          1 000B75  8283                                 LB,'0020'X        ,B3
          1 000B76       0020
          1 000B77  0501 0041                            BBT      s:21446,PREL

     1349    21425    5                THEN DO;

     1350    21426    5                     NEW_SIZE = NEW_SIZE + RIGHT$->GM$PPUT.SIZE;

  21426   1 000B79  BA43 0001                            ADD,R3   1,B3
          1 000B7B  BF47 0049                            STR,R3   NEW_SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:201  

     1351    21427    5                     GM_NSHF = GM_NSHF - RIGHT$->GM$PPUT.SIZE;

  21427   1 000B7D  A800 0000 0000  xsym                 LDR,R2   GM_NSHF
          1 000B80  A243 0001                            SUB,R2   1,B3
          1 000B82  AF00 0000 0000  xsym                 STR,R2   GM_NSHF

     1352    21428
     1353    21429    5                     CURRENT = CURR;

  21429   1 000B85  9847 000E                            LDR,R1   CURR,AUTO
          1 000B87  9F47 0042                            STR,R1   CURRENT,AUTO

     1354    21430    5                     CURRENT$ = CURR$;

  21430   1 000B89  DFC7 0043                            STB,B5   CURRENT$,AUTO

     1355    21431    5                     CURR = CURR + CURR_SIZE;

  21431   1 000B8B  9A47 0046                            ADD,R1   CURR_SIZE,AUTO
          1 000B8D  9F47 000E                            STR,R1   CURR,AUTO

     1356    21432    5                     CALL UNLINK;          /*get it out of the nshf table*/

  21432   1 000B8F  E3C0 0163                            LNJ,B6   s:0,PREL
          1 000B91       0001                            DC       s:21434,PREL

     1357    21433
     1358    21434    5                     MEAT$ = ADDR(GM_MEAT_SHUF);

  21434   1 000B92  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000B95  EFC7 001C                            STB,B6   MEAT$,AUTO

     1359    21435    5                     MEAT$ = ADDR(MEAT$->GM$MEATA(LOG));

  21435   1 000B97  B847 0024                            LDR,R3   LOG,AUTO
          1 000B99  3F03                                 MLV,R3   3
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:202  
          1 000B9A  DBB6                                 LAB,B5   ,B6,R3
          1 000B9B  DFC7 001C                            STB,B5   MEAT$,AUTO

     1360    21436    5                     CALL LINK2HEAD;       /*get it on the shuf table*/

  21436   1 000B9D  E3C0 0123                            LNJ,B6   s:0,PREL
          1 000B9F       0001                            DC       s:21438,PREL

     1361    21437
     1362    21438    5                     CURR=CURRENT;

  21438   1 000BA0  E847 0042                            LDR,R6   CURRENT,AUTO
          1 000BA2  EF47 000E                            STR,R6   CURR,AUTO

     1363    21439    5                     CURR$ = CURRENT$;

  21439   1 000BA4  ECC7 0043                            LDB,B6   CURRENT$,AUTO
          1 000BA6  EFC7 000F                            STB,B6   CURR$,AUTO

     1364    21440    5                     CURR_LAST$ = PINCRW(CURR$, (CURR_SIZE-1)*SIZEW(GM$PPUT));

  21440   1 000BA8  F847 0046                            LDR,R7   CURR_SIZE,AUTO
          1 000BAA  6C00                                 LDV,R6   0
          1 000BAB  7081                                 DOL,R7   1
          1 000BAC  8447 000F                            AID      CURR$,AUTO
          1 000BAE  8470 FFFF FFFE                       AID      -2,IMO
          1 000BB1  8D47 0018                            SDI      CURR_LAST$,AUTO

     1365    21441
     1366    21442    5                     CURR$->GM$PPUT.C.SHUFFLABLE='1'B;

  21442   1 000BB3  8906                                 LBT,'0008'X       ,B6
  21442   1 000BB4       0008

     1367    21443    5                     CURR_LAST$->GM$PPUT.C.SHUFFLABLE='1'B;

  21443   1 000BB5  DCC7 0018                            LDB,B5   CURR_LAST$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:203  
          1 000BB7  8905                                 LBT,'0008'X       ,B5
          1 000BB8       0008

     1368    21444    5                     END;

     1369    21445
     1370    21446    4                CURR_MEAT$ = ADDR(GM_MEAT_SHUF);

  21446   1 000BB9  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000BBC  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

     1371    21447    4                GM_SHUF = GM_SHUF + NEW_SIZE;

  21447   1 000BBE  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 000BC1  EA47 0049                            ADD,R6   NEW_SIZE,AUTO
          1 000BC3  EF00 0000 0000  xsym                 STR,R6   GM_SHUF

     1372    21448    4                GM_SHUF_HI = GM_SHUF_HI + NEW_SIZE;

  21448   1 000BC6  D800 0000 0000  xsym                 LDR,R5   GM_SHUF_HI
          1 000BC9  DA47 0049                            ADD,R5   NEW_SIZE,AUTO
          1 000BCB  DF00 0000 0000  xsym                 STR,R5   GM_SHUF_HI

     1373    21449
     1374    21450    4                CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;

  21450   1 000BCE  DCC7 000F                            LDB,B5   CURR$,AUTO
          1 000BD0  8905                                 LBT,'0008'X       ,B5
          1 000BD1       0008

     1375    21451    4                NEW_SIZE = NEW_SIZE -1;

  21451   1 000BD2  88C7 0049                            DEC      NEW_SIZE,AUTO

     1376    21452    4                CURR_LAST$ = PINCRW(CURR$, NEW_SIZE*SIZEW(GM$PPUT));

  21452   1 000BD4  F847 0049                            LDR,R7   NEW_SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:204  
          1 000BD6  6C00                                 LDV,R6   0
          1 000BD7  7081                                 DOL,R7   1
          1 000BD8  8447 000F                            AID      CURR$,AUTO
          1 000BDA  8D47 0018                            SDI      CURR_LAST$,AUTO

     1377    21453    4                CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;

  21453   1 000BDC  CCC7 0018                            LDB,B4   CURR_LAST$,AUTO
          1 000BDE  8904                                 LBT,'0008'X       ,B4
          1 000BDF       0008

     1378    21454    4                END/*do if releasing lowest nshf*/;

     1379    21455    3           END/*do if releasing nshf*/;

  21455   1 000BE0  0F81 0003                            B        s:21458,PREL

     1380    21456
     1381    21457    2   DEALLOCATE_SHUF: ENTRY;

  21457   1 000BE2  EFC7 0040            DEALLOCATE_SHUF STB,B6   CURRENT,AUTO

     1382    21458    2      CURRENT = CURR;

  21458   1 000BE4  E847 000E                            LDR,R6   CURR,AUTO
          1 000BE6  EF47 0042                            STR,R6   CURRENT,AUTO

     1383    21459    2      CURRENT$ = CURR$;

  21459   1 000BE8  ECC7 000F                            LDB,B6   CURR$,AUTO
          1 000BEA  EFC7 0043                            STB,B6   CURRENT$,AUTO

     1384    21460    2      CURR_SIZE = CURRENT$->GM$PPUT.SIZE;

  21460   1 000BEC  D846 0001                            LDR,R5   1,B6
          1 000BEE  DF47 0046                            STR,R5   CURR_SIZE,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:205  
     1385    21461
     1386    21462    2      NEW_SIZE = CURR_SIZE;

  21462   1 000BF0  DF47 0049                            STR,R5   NEW_SIZE,AUTO

     1387    21463    2      CURR_LAST = CURR + CURR_SIZE - 1;    /*last pg to deallocate*/

  21463   1 000BF2  EA55                                 ADD,R6   R5
          1 000BF3  6EFF                                 ADV,R6   -1
          1 000BF4  EF47 0045                            STR,R6   CURR_LAST,AUTO

     1388    21464    2      CURR_LAST$ = ADDR (GM$PPUTA (CURR_LAST));

  21464   1 000BF6  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000BF9  B856                                 LDR,R3   R6
          1 000BFA  3001                                 SOL,R3   1
          1 000BFB  CBB5                                 LAB,B4   ,B5,R3
          1 000BFC  CFC7 0018                            STB,B4   CURR_LAST$,AUTO

     1389    21465    2      CURRENT$->GM$PPUT.C.INUSE = '0'B;

  21465   1 000BFE  8806                                 LBF,'0020'X       ,B6
  21465   1 000BFF       0020

     1390    21466    2      CURR_LAST$->GM$PPUT.C.INUSE = '0'B;

  21466   1 000C00  8804                                 LBF,'0020'X       ,B4
  21466   1 000C01       0020

     1391    21467
     1392    21468        /* Attempt left-hand compaction */
     1393    21469
     1394    21470    2      IF (CURR ~= GM_MEM_LOW ) AND (CURR ~= GM_SHUF_HI + 1)

  21470   1 000C02  C847 000E                            LDR,R4   CURR,AUTO
          1 000C04  C900 0000 0000  xsym                 CMR,R4   GM_MEM_LOW
          1 000C07  0901 0038                            BE       s:21489,PREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:206  
          1 000C09  A800 0000 0000  xsym                 LDR,R2   GM_SHUF_HI
          1 000C0C  2E01                                 ADV,R2   1
          1 000C0D  A954                                 CMR,R2   R4
          1 000C0E  0901 0031                            BE       s:21489,PREL

     1395    21471    3      THEN DO;

     1396    21472    3           LEFT_LAST$ = PINCRW (CURRENT$,-SIZEW (GM$PPUT));

  21472   1 000C10  BBC6 FFFE                            LAB,B3   -2,B6
          1 000C12  BFC7 0047                            STB,B3   LEFT_LAST$,AUTO

     1397    21473    3           IF NOT LEFT_LAST$->GM$PPUT.C.INUSE

  21473   1 000C14  8283                                 LB,'0020'X        ,B3
  21473   1 000C15       0020
          1 000C16  0501 0029                            BBT      s:21489,PREL

     1398    21474    4           THEN DO;              /* Left-hand extent is unallocated - compact it */

     1399    21475    4                SIZE = LEFT_LAST$->GM$PPUT.SIZE;

  21475   1 000C18  9843 0001                            LDR,R1   1,B3
          1 000C1A  9F47 0027                            STR,R1   SIZE,AUTO

     1400    21476    4                NEW_SIZE = NEW_SIZE + SIZE;

  21476   1 000C1C  DA51                                 ADD,R5   R1
          1 000C1D  DF47 0049                            STR,R5   NEW_SIZE,AUTO

     1401    21477    4                CURR = CURRENT - SIZE;

  21477   1 000C1F  9247 0042                            SUB,R1   CURRENT,AUTO
          1 000C21  C851                                 LDR,R4   R1
          1 000C22  8254                                 NEG      R4
          1 000C23  CF47 000E                            STR,R4   CURR,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:207  
     1402    21478    4                CALL LOGBASE2;

  21478   1 000C25  E3C0 04E4                            LNJ,B6   s:0,PREL
          1 000C27       0001                            DC       s:21479,PREL

     1403    21479    4                CALL UNLINK;

  21479   1 000C28  E3C0 00CA                            LNJ,B6   s:0,PREL
          1 000C2A       0001                            DC       s:21480,PREL

     1404    21480    4                CURRENT$->GM$PPUT.C.FIRSTP = '0'B;

  21480   1 000C2B  ECC7 0043                            LDB,B6   CURRENT$,AUTO
          1 000C2D  8806                                 LBF,'0080'X       ,B6
          1 000C2E       0080

     1405    21481    4                LEFT_LAST$->GM$PPUT.C.LASTP = '0'B;

  21481   1 000C2F  DCC7 0047                            LDB,B5   LEFT_LAST$,AUTO
          1 000C31  8805                                 LBF,'0040'X       ,B5
          1 000C32       0040

     1406    21482    4                CURRENT$ = ADDR (GM$PPUTA (CURR));

  21482   1 000C33  CC80 0000 0000  xsym                 LDB,B4   G$PPUT$
          1 000C36  B847 000E                            LDR,R3   CURR,AUTO
          1 000C38  3001                                 SOL,R3   1
          1 000C39  BBB4                                 LAB,B3   ,B4,R3
          1 000C3A  BFC7 0043                            STB,B3   CURRENT$,AUTO

     1407    21483    4                CURRENT = CURR;

  21483   1 000C3C  E847 000E                            LDR,R6   CURR,AUTO
          1 000C3E  EF47 0042                            STR,R6   CURRENT,AUTO

     1408    21484    4                END;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:208  
     1409    21485    3           END;

     1410    21486
     1411    21487        /* Attempt right-hand compaction */
     1412    21488
     1413    21489    2      IF (CURR_LAST ~= GM_MEM_HI) AND (CURR_LAST ~= GM_SHUF_HI)

  21489   1 000C40  E847 0045                            LDR,R6   CURR_LAST,AUTO
          1 000C42  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 000C45  0901 0038                            BE       s:21512,PREL
          1 000C47  E900 0000 0000  xsym                 CMR,R6   GM_SHUF_HI
          1 000C4A  0901 0033                            BE       s:21512,PREL

     1414    21490    3      THEN DO;

     1415    21491    3           RIGHT$ = PINCRW (CURR_LAST$,SIZEW (GM$PPUT));

  21491   1 000C4C  ECC7 0018                            LDB,B6   CURR_LAST$,AUTO
          1 000C4E  DBC6 0002                            LAB,B5   2,B6
          1 000C50  DFC7 004A                            STB,B5   RIGHT$,AUTO

     1416    21492    3           IF NOT RIGHT$->GM$PPUT.C.INUSE

  21492   1 000C52  8285                                 LB,'0020'X        ,B5
  21492   1 000C53       0020
          1 000C54  0501 0029                            BBT      s:21512,PREL

     1417    21493    4           THEN DO;         /* Right-hand extent is unallocated - compact it     */

     1418    21494    4                SIZE = RIGHT$->GM$PPUT.SIZE;

  21494   1 000C56  D845 0001                            LDR,R5   1,B5
          1 000C58  DF47 0027                            STR,R5   SIZE,AUTO

     1419    21495    4                NEW_SIZE = NEW_SIZE + SIZE;

  21495   1 000C5A  DA47 0049                            ADD,R5   NEW_SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:209  
          1 000C5C  DF47 0049                            STR,R5   NEW_SIZE,AUTO

     1420    21496    4                CALL LOGBASE2;

  21496   1 000C5E  E3C0 04AB                            LNJ,B6   s:0,PREL
          1 000C60       0001                            DC       s:21497,PREL

     1421    21497    4                CURR = CURR_LAST + 1;

  21497   1 000C61  E847 0045                            LDR,R6   CURR_LAST,AUTO
          1 000C63  6E01                                 ADV,R6   1
          1 000C64  EF47 000E                            STR,R6   CURR,AUTO

     1422    21498
     1423    21499                       /* If meat head is null we are returning a segment
     1424    21500                          during shuffling that followed the upper limit of
     1425    21501                          the shuffle down area.                             */
     1426    21502
     1427    21503    4                IF GM$MEAT.HEAD ~= 0

  21503   1 000C66  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 000C68  D806                                 LDR,R5   ,B6
          1 000C69  5901 0004                            BEZ,R5   s:21506,PREL

     1428    21504    4                THEN CALL UNLINK;

  21504   1 000C6B  E3C0 0087                            LNJ,B6   s:0,PREL
          1 000C6D       0001                            DC       s:21506,PREL

     1429    21505
     1430    21506    4                CURR_LAST$->GM$PPUT.C.LASTP = '0'B;

  21506   1 000C6E  ECC7 0018                            LDB,B6   CURR_LAST$,AUTO
          1 000C70  8806                                 LBF,'0040'X       ,B6
          1 000C71       0040

     1431    21507    4                RIGHT$->GM$PPUT.C.FIRSTP = '0'B;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:210  

  21507   1 000C72  DCC7 004A                            LDB,B5   RIGHT$,AUTO
          1 000C74  8805                                 LBF,'0080'X       ,B5
          1 000C75       0080

     1432    21508    4                CURR_LAST$ = PINCRW (CURR_LAST$,SIZE*SIZEW (GM$PPUT));

  21508   1 000C76  F847 0027                            LDR,R7   SIZE,AUTO
          1 000C78  6C00                                 LDV,R6   0
          1 000C79  7081                                 DOL,R7   1
          1 000C7A  8447 0018                            AID      CURR_LAST$,AUTO
          1 000C7C  8D47 0018                            SDI      CURR_LAST$,AUTO

     1433    21509    4                END;

     1434    21510    3           END;

     1435    21511
     1436    21512    2      PREV = POFFW(CURR_LAST$,G$PPUT$)/SIZEW(GM$PPUT);

  21512   1 000C7E  8CC7 0018                            LDI      CURR_LAST$,AUTO
          1 000C80  8480 0000 0000  xsym                 SID      G$PPUT$
          1 000C83  70E1                                 DAR,R7   1
          1 000C84  6881 0006                            BGEZ,R6  s:21512+13,PREL
          1 000C86  0681 0004                            BCF      s:21512+13,PREL
          1 000C88  8470 0000 0001                       AID      1,IMO
          1 000C8B  E857                                 LDR,R6   R7
          1 000C8C  EF47 0014                            STR,R6   PREV,AUTO

     1437    21513
     1438    21514    2      IF CURR_MEAT$ = ADDR(GM_MEAT_SHUF)

  21514   1 000C8E  EB80 0000 0000  xsym                 LAB,B6   GM_MEAT_SHUF
          1 000C91  EDC7 001A                            CMB,B6   CURR_MEAT$,AUTO
          1 000C93  0981 000B                            BNE      s:21520,PREL

     1439    21515    3      THEN DO;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:211  

     1440    21516    3           CURRENT$->GM$PPUT.C.SHUFFLABLE='1'B;

  21516   1 000C95  ECC7 0043                            LDB,B6   CURRENT$,AUTO
          1 000C97  8906                                 LBT,'0008'X       ,B6
          1 000C98       0008

     1441    21517    3           CURR_LAST$->GM$PPUT.C.SHUFFLABLE='1'B;

  21517   1 000C99  DCC7 0018                            LDB,B5   CURR_LAST$,AUTO
          1 000C9B  8905                                 LBT,'0008'X       ,B5
          1 000C9C       0008

     1442    21518    3           END;

  21518   1 000C9D  0F81 0009                            B        s:21523,PREL

     1443    21519    3      ELSE DO;

     1444    21520    3           CURRENT$->GM$PPUT.C.SHUFFLABLE='0'B;

  21520   1 000C9F  ECC7 0043                            LDB,B6   CURRENT$,AUTO
          1 000CA1  8806                                 LBF,'0008'X       ,B6
          1 000CA2       0008

     1445    21521    3           CURR_LAST$->GM$PPUT.C.SHUFFLABLE='0'B;

  21521   1 000CA3  DCC7 0018                            LDB,B5   CURR_LAST$,AUTO
          1 000CA5  8805                                 LBF,'0008'X       ,B5
          1 000CA6       0008

     1446    21522    3           END;

     1447    21523    2      IF NEW_SIZE ~= CURR_SIZE

  21523   1 000CA7  D847 0049                            LDR,R5   NEW_SIZE,AUTO
          1 000CA9  D947 0046                            CMR,R5   CURR_SIZE,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:212  
          1 000CAB  0901 0005                            BE       s:21530,PREL

     1448    21524    3      THEN DO;

     1449    21525    3           CURRENT$->GM$PPUT.SIZE = NEW_SIZE;

  21525   1 000CAD  DF46 0001                            STR,R5   1,B6

     1450    21526    3           CURR_LAST$->GM$PPUT.SIZE = NEW_SIZE;

  21526   1 000CAF  DF45 0001                            STR,R5   1,B5

     1451    21527    3           END;

     1452    21528        /* Put on head of free extent chain for this size.
     1453    21529        */
     1454    21530    2      SIZE = NEW_SIZE;

  21530   1 000CB1  DF47 0027                            STR,R5   SIZE,AUTO

     1455    21531    2      CALL LOGBASE2;

  21531   1 000CB3  E3C0 0456                            LNJ,B6   s:0,PREL
          1 000CB5       0001                            DC       s:21532,PREL

     1456    21532    2      CURR = CURRENT;

  21532   1 000CB6  E847 0042                            LDR,R6   CURRENT,AUTO
          1 000CB8  EF47 000E                            STR,R6   CURR,AUTO

     1457    21533    2      CALL LINK2HEAD;

  21533   1 000CBA  E3C0 0006                            LNJ,B6   s:0,PREL
          1 000CBC       0001                            DC       s:21535,PREL

     1458    21534
     1459    21535    2      RETURN;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:213  

  21535   1 000CBD  ECC7 0040                            LDB,B6   CURRENT,AUTO
          1 000CBF  C3C6 0001                            LNJ,B4   1,B6

     1460    21536
     1461    21537    2   END DEALLOCATE;
     1462    21538
     1463    21539        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:214  
     1464    21540        /*I* NAME: LINK2HEAD
     1465    21541             PURPOSE:
     1466    21542                   To re-link a free extent as the head of its MEAT list.
     1467    21543
     1468    21544             CALL: CALL LINK2HEAD;
     1469    21545
     1470    21546             ENVIRONMENT:
     1471    21547                   GM_MEATLOCK gate is locked.
     1472    21548             INPUT:
     1473    21549                   CURR - Page number of extent to be re-linked.
     1474    21550                   MEAT$ - Pointer to MEAT list entry.
     1475    21551             OUTPUT:
     1476    21552                   None.
     1477    21553             SCRATCH:
     1478    21554                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1479    21555             DESCRIPTION:
     1480    21556                   The free extent identified by CURR will be re-linked as the
     1481    21557                   head of the MEAT list identified by MEAT$.
     1482    21558        */
     1483    21559    1   LINK2HEAD: PROC;

  21559   1 000CC1  EFC7 004C            LINK2HEAD       STB,B6   RIGHT$+2,AUTO

     1484    21560
     1485    21561    2      CALL MAP (CURR);

  21561   1 000CC3  DBC7 000E                            LAB,B5   CURR,AUTO
          1 000CC5  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 000CC7  E3C0 04E8                            LNJ,B6   s:0,PREL
          1 000CC9       0001                            DC       s:21562,PREL

     1486    21562    2      GM$EXTENT.BLINK = 0;

  21562   1 000CCA  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000CCD  8746 0001                            CL       1,B6

     1487    21563    2      IF GM$MEAT.HEAD = 0
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:215  

  21563   1 000CCF  DCC7 001C                            LDB,B5   MEAT$,AUTO
          1 000CD1  E805                                 LDR,R6   ,B5
          1 000CD2  6981 0008                            BNEZ,R6  s:21570,PREL

     1488    21564    3      THEN DO;                             /* List was empty                     */

     1489    21565    3           GM$MEAT.TAIL = CURR;

  21565   1 000CD4  D847 000E                            LDR,R5   CURR,AUTO
          1 000CD6  DF45 0001                            STR,R5   1,B5

     1490    21566    3           GM$EXTENT.FLINK = 0;

  21566   1 000CD8  8706                                 CL       ,B6

     1491    21567    3           END;

  21567   1 000CD9  0F81 000E                            B        s:21574,PREL

     1492    21568
     1493    21569    3      ELSE DO;                             /* List was not empty                 */

     1494    21570    3           GM$EXTENT.FLINK = GM$MEAT.HEAD;

  21570   1 000CDB  EF06                                 STR,R6   ,B6

     1495    21571    3           CALL MAP (GM$MEAT.HEAD);        /* Map onto old-head                  */

  21571   1 000CDC  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 000CDE  E3C0 04D1                            LNJ,B6   s:0,PREL
          1 000CE0       0001                            DC       s:21572,PREL

     1496    21572    3           GM$EXTENT.BLINK = CURR;         /* Let old-head.blink -> curr         */

  21572   1 000CE1  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000CE4  E847 000E                            LDR,R6   CURR,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:216  
          1 000CE6  EF46 0001                            STR,R6   1,B6

     1497    21573    3           END;

     1498    21574    2      GM$MEAT.HEAD = CURR;

  21574   1 000CE8  DCC7 001C                            LDB,B5   MEAT$,AUTO
          1 000CEA  E847 000E                            LDR,R6   CURR,AUTO
          1 000CEC  EF05                                 STR,R6   ,B5

     1499    21575    2      GM$MEAT.COUNT = GM$MEAT.COUNT + 1;

  21575   1 000CED  8AC5 0002                            INC      2,B5

     1500    21576
     1501    21577    2      RETURN;

  21577   1 000CEF  ECC7 004C                            LDB,B6   RIGHT$+2,AUTO
          1 000CF1  C3C6 0001                            LNJ,B4   1,B6

     1502    21578
     1503    21579    2   END LINK2HEAD;
     1504    21580
     1505    21581        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:217  
     1506    21582        /*I* NAME: UNLINK
     1507    21583             PURPOSE:
     1508    21584                   To remove an unallocated segment from its MEAT list.
     1509    21585
     1510    21586             CALL: CALL UNLINK;
     1511    21587
     1512    21588             INPUT:
     1513    21589                   CURR - Page number of extent to be unlinked.
     1514    21590                   CURR_MEAT$ - Pointer to the appropriate MEAT list.
     1515    21591             OUTPUT:
     1516    21592                   MEAT$ - Pointer to appropriate MEAT list entry.
     1517    21593                   FLINK - Forward link in extent list.
     1518    21594                   BLINK - Backward link in extent list.
     1519    21595             SCRATCH:
     1520    21596                   G$UHJIT.ASDT_MCL.WINDOW1 .
     1521    21597             DESCRIPTION:
     1522    21598                   The extent beginning at page CURR is unlinked from its MEAT
     1523    21599                   list.
     1524    21600        */
     1525    21601        /*I* NAME: UNLINK_MAPPED
     1526    21602              DESCRIPTION:
     1527    21603                    Same as UNLINK, except that we are already mapped onto the
     1528    21604                    current extent, and BLINK, FLINK and MEAT$ have been setup.
     1529    21605        */
     1530    21606    1   UNLINK: PROC;

  21606   1 000CF3  EFC7 004C            UNLINK          STB,B6   RIGHT$+2,AUTO

     1531    21607
     1532    21608    2   DCL SAVE_SZ UBIN;
     1533    21609
     1534    21610    2      CURR$ = ADDR(GM$PPUTA(CURR));

  21610   1 000CF5  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000CF8  B847 000E                            LDR,R3   CURR,AUTO
          1 000CFA  3001                                 SOL,R3   1
          1 000CFB  CBB5                                 LAB,B4   ,B5,R3
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:218  
          1 000CFC  CFC7 000F                            STB,B4   CURR$,AUTO

     1535    21611
     1536    21612    2      SAVE_SZ = SIZE;

  21612   1 000CFE  E847 0027                            LDR,R6   SIZE,AUTO
          1 000D00  EF47 004E                            STR,R6   SAVE_SZ,AUTO

     1537    21613    2      SIZE = CURR$->GM$PPUT.SIZE;

  21613   1 000D02  E844 0001                            LDR,R6   1,B4
          1 000D04  EF47 0027                            STR,R6   SIZE,AUTO

     1538    21614    2      CALL LOGBASE2;                       /*set up meat$*/

  21614   1 000D06  E3C0 0403                            LNJ,B6   s:0,PREL
          1 000D08       0001                            DC       s:21615,PREL

     1539    21615    2      SIZE = SAVE_SZ;

  21615   1 000D09  E847 004E                            LDR,R6   SAVE_SZ,AUTO
          1 000D0B  EF47 0027                            STR,R6   SIZE,AUTO

     1540    21616
     1541    21617    2      CALL MAP (CURR);

  21617   1 000D0D  EBC7 000E                            LAB,B6   CURR,AUTO
          1 000D0F  EFC7 0052                            STB,B6   SAVE_SZ+4,AUTO
          1 000D11  E3C0 049E                            LNJ,B6   s:0,PREL
          1 000D13       0001                            DC       s:21618,PREL

     1542    21618    2      BLINK = GM$EXTENT.BLINK;

  21618   1 000D14  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000D17  E846 0001                            LDR,R6   1,B6
          1 000D19  EF47 001E                            STR,R6   BLINK,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:219  
     1543    21619    2      FLINK = GM$EXTENT.FLINK;

  21619   1 000D1B  D806                                 LDR,R5   ,B6
          1 000D1C  DF47 001F                            STR,R5   FLINK,AUTO
          1 000D1E  0F81 0003                            B        s:21623,PREL

     1544    21620
     1545    21621    2   UNLINK_MAPPED: ENTRY;

  21621   1 000D20  EFC7 004C            UNLINK_MAPPED   STB,B6   RIGHT$+2,AUTO

     1546    21622
     1547    21623    2      IF FLG.SHUFFLED = '0'B

  21623   1 000D22  89C7 0035                            CMZ      FLG,AUTO
          1 000D24  0801 000A                            BAL      s:21628,PREL

     1548    21624    2      THEN IF GM$MEAT.COUNT = 0 THEN CALL MMSCREECH;

  21624   1 000D26  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 000D28  E846 0002                            LDR,R6   2,B6
          1 000D2A  6981 0004                            BNEZ,R6  s:21628,PREL

  21624   1 000D2C  E3C0 05F9                            LNJ,B6   s:0,PREL
          1 000D2E       0001                            DC       s:21628,PREL

     1549    21625
     1550    21626        /*N* Remove these checks later.
     1551    21627        */
     1552    21628    2      IF BLINK ~= 0

  21628   1 000D2F  E847 001E                            LDR,R6   BLINK,AUTO
          1 000D31  6901 000E                            BEZ,R6   s:21633,PREL

     1553    21629    3      THEN DO;

     1554    21630    3           IF (BLINK < GM_MEM_LOW) OR (BLINK > GM_MEM_HI)
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:220  

  21630   1 000D33  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 000D36  0201 0006                            BL       s:21631,PREL
          1 000D38  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 000D3B  0381 0004                            BLE      s:21633,PREL

     1555    21631    3           THEN CALL MMSCREECH;

  21631   1 000D3D  E3C0 05E8                            LNJ,B6   s:0,PREL
          1 000D3F       0001                            DC       s:21633,PREL

     1556    21632    3           END;

     1557    21633    2      IF FLINK ~= 0

  21633   1 000D40  E847 001F                            LDR,R6   FLINK,AUTO
          1 000D42  6901 000E                            BEZ,R6   s:21640,PREL

     1558    21634    3      THEN DO;

     1559    21635    3           IF (FLINK < GM_MEM_LOW) OR (FLINK > GM_MEM_HI)

  21635   1 000D44  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 000D47  0201 0006                            BL       s:21636,PREL
          1 000D49  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 000D4C  0381 0004                            BLE      s:21640,PREL

     1560    21636    3           THEN CALL MMSCREECH;

  21636   1 000D4E  E3C0 05D7                            LNJ,B6   s:0,PREL
          1 000D50       0001                            DC       s:21640,PREL

     1561    21637    3           END;

     1562    21638        /*N*/
     1563    21639
     1564    21640    2      IF BLINK = 0
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:221  

  21640   1 000D51  E847 001E                            LDR,R6   BLINK,AUTO
          1 000D53  6981 0008                            BNEZ,R6  s:21643,PREL

     1565    21641    2      THEN GM$MEAT.HEAD = FLINK;

  21641   1 000D55  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 000D57  D847 001F                            LDR,R5   FLINK,AUTO
          1 000D59  DF06                                 STR,R5   ,B6
          1 000D5A  0F81 000E                            B        s:21647,PREL

     1566    21642    3      ELSE DO;

     1567    21643    3           CALL MAP (BLINK);

  21643   1 000D5C  EBC7 001E                            LAB,B6   BLINK,AUTO
          1 000D5E  EFC7 0052                            STB,B6   SAVE_SZ+4,AUTO
          1 000D60  E3C0 044F                            LNJ,B6   s:0,PREL
          1 000D62       0001                            DC       s:21644,PREL

     1568    21644    3           GM$EXTENT.FLINK = FLINK;

  21644   1 000D63  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000D66  E847 001F                            LDR,R6   FLINK,AUTO
          1 000D68  EF06                                 STR,R6   ,B6

     1569    21645    3           END;

     1570    21646
     1571    21647    2      IF FLINK = 0

  21647   1 000D69  E847 001F                            LDR,R6   FLINK,AUTO
          1 000D6B  6981 0009                            BNEZ,R6  s:21650,PREL

     1572    21648    2      THEN GM$MEAT.TAIL = BLINK;

  21648   1 000D6D  ECC7 001C                            LDB,B6   MEAT$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:222  
          1 000D6F  D847 001E                            LDR,R5   BLINK,AUTO
          1 000D71  DF46 0001                            STR,R5   1,B6
          1 000D73  0F81 000F                            B        s:21654,PREL

     1573    21649    3      ELSE DO;

     1574    21650    3           CALL MAP (FLINK);

  21650   1 000D75  EBC7 001F                            LAB,B6   FLINK,AUTO
          1 000D77  EFC7 0052                            STB,B6   SAVE_SZ+4,AUTO
          1 000D79  E3C0 0436                            LNJ,B6   s:0,PREL
          1 000D7B       0001                            DC       s:21651,PREL

     1575    21651    3           GM$EXTENT.BLINK = BLINK;

  21651   1 000D7C  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 000D7F  E847 001E                            LDR,R6   BLINK,AUTO
          1 000D81  EF46 0001                            STR,R6   1,B6

     1576    21652    3           END;

     1577    21653
     1578    21654    2      IF FLG.SHUFFLED = '0'B

  21654   1 000D83  89C7 0035                            CMZ      FLG,AUTO
          1 000D85  0801 0005                            BAL      s:21657,PREL

     1579    21655    2      THEN GM$MEAT.COUNT = GM$MEAT.COUNT - 1;

  21655   1 000D87  ECC7 001C                            LDB,B6   MEAT$,AUTO
          1 000D89  88C6 0002                            DEC      2,B6

     1580    21656
     1581    21657    2      RETURN;

  21657   1 000D8B  ECC7 004C                            LDB,B6   RIGHT$+2,AUTO
          1 000D8D  C3C6 0001                            LNJ,B4   1,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:223  

     1582    21658
     1583    21659    2   END UNLINK;
     1584    21660
     1585    21661        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:224  
     1586    21662        /*D* NAME: GMA$PS2USR
     1587    21663
     1588    21664             CALL: CALL GMA$PS2USR (page number,user number); !! Doesn't ALTRET !!
     1589    21665
     1590    21666             INPUT:
     1591    21667                   PAGENO - The physical page number of the first page of the
     1592    21668                   segment.
     1593    21669                   USERNO - The user number to allocate the page to.
     1594    21670             OUTPUT:
     1595    21671                   None.
     1596    21672             DESCRIPTION:
     1597    21673                   The specified physical segment is marked as shufflable, and as
     1598    21674                   owned by the specified user.
     1599    21675        */
     1600    21676    1   GMA$PS2USR: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                    */

  21676   1 000D8F  D380 0000 0000  xent GMA$PS2USR      LNJ,B5   X6A_AUTO_N
          1 000D92       005A 0005                       DC       90,5

     1601    21677
     1602    21678    1      CURR$ = ADDR (GM$PPUTA (PAGENO));

  21678   1 000D94  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000D96  B806                                 LDR,R3   ,B6
          1 000D97  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000D9A  3001                                 SOL,R3   1
          1 000D9B  CBB5                                 LAB,B4   ,B5,R3
          1 000D9C  CFC7 000F                            STB,B4   CURR$,AUTO

     1603    21679    1      CURR_LAST = PAGENO + CURR$->GM$PPUT.SIZE -1;

  21679   1 000D9E  E806                                 LDR,R6   ,B6
          1 000D9F  EA44 0001                            ADD,R6   1,B4
          1 000DA1  6EFF                                 ADV,R6   -1
          1 000DA2  EF47 0017                            STR,R6   CURR_LAST,AUTO

     1604    21680    1      CURR_LAST$ = ADDR(GM$PPUTA (CURR_LAST));
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:225  

  21680   1 000DA4  B856                                 LDR,R3   R6
          1 000DA5  3001                                 SOL,R3   1
          1 000DA6  BBB5                                 LAB,B3   ,B5,R3
          1 000DA7  BFC7 0018                            STB,B3   CURR_LAST$,AUTO

     1605    21681    1      CALL LOCK_GATE;

  21681   1 000DA9  E3C0 043C                            LNJ,B6   s:0,PREL
          1 000DAB       0001                            DC       s:21682,PREL

     1606    21682    1      IF CURR$->GM$PPUT.OWNER ~= 0

  21682   1 000DAC  ECC7 000F                            LDB,B6   CURR$,AUTO
          1 000DAE  E286                                 LLH,R6   ,B6
          1 000DAF  6901 0004                            BEZ,R6   s:21685,PREL

     1607    21683    1      THEN CALL MMSCREECH;

  21683   1 000DB1  E3C0 0574                            LNJ,B6   s:0,PREL
          1 000DB3       0001                            DC       s:21685,PREL

     1608    21684
     1609    21685    1      CURR$->GM$PPUT.OWNER = USERNO;

  21685   1 000DB4  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 000DB6  E806                                 LDR,R6   ,B6
          1 000DB7  DCC7 000F                            LDB,B5   CURR$,AUTO
          1 000DB9  E785                                 STH,R6   ,B5

     1610    21686    1      CURR$->GM$PPUT.C.SHUFFLABLE = '1'B;

  21686   1 000DBA  8905                                 LBT,'0008'X       ,B5
  21686   1 000DBB       0008

     1611    21687    1      CURR_LAST$->GM$PPUT.C.SHUFFLABLE = '1'B;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:226  
  21687   1 000DBC  CCC7 0018                            LDB,B4   CURR_LAST$,AUTO
          1 000DBE  8904                                 LBT,'0008'X       ,B4
          1 000DBF       0008

     1612    21688    1      GM_XSHUF = GM_XSHUF - 1;

  21688   1 000DC0  8880 0000 0000  xsym                 DEC      GM_XSHUF

     1613    21689    1      GOTO CHKPPT_EXIT;

  21689   1 000DC3  0F81 F64D                            B        s:20601,PREL

     1614    21690
     1615    21691        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:227  
     1616    21692        /*D* NAME: GMA$RELCVM
     1617    21693            CALL: CALL GMA$RELCVM (page_number);
     1618    21694              PARAMETERS:
     1619    21695                 page_number is the physical page number of the first page of
     1620    21696                a segment for which all shared references are to be removed.
     1621    21697              DESCRIPTION:
     1622    21698                 This routine locates all shared references to the segment and
     1623    21699                 converts them to real memory references.  Correct usage is to
     1624    21700                 unshare CVMed segments.  It would be incorrect to use this on
     1625    21701                 shared program segments.  It is provided to allow unsharing
     1626    21702                 UHJIT, ROSEG and TSTACKU before releasing them during DELU.
     1627    21703        */
     1628    21704
     1629    21705    1   GMA$RELCVM: ENTRY (PAGENO) ALTRET;

  21705   1 000DC5  D380 0000 0000  xent GMA$RELCVM      LNJ,B5   X6A_AUTO_N
          1 000DC8       005A 0005                       DC       90,5

     1630    21706    1      CURR=PAGENO;

  21706   1 000DCA  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000DCC  E806                                 LDR,R6   ,B6
          1 000DCD  EF47 000E                            STR,R6   CURR,AUTO

     1631    21707    1      CURR$ = ADDR(GM$PPUTA(CURR));

  21707   1 000DCF  DC80 0000 0000  xsym                 LDB,B5   G$PPUT$
          1 000DD2  B856                                 LDR,R3   R6
          1 000DD3  3001                                 SOL,R3   1
          1 000DD4  CBB5                                 LAB,B4   ,B5,R3
          1 000DD5  CFC7 000F                            STB,B4   CURR$,AUTO

     1632    21708    1      CALL LOCK_GATE;

  21708   1 000DD7  E3C0 040E                            LNJ,B6   s:0,PREL
          1 000DD9       0001                            DC       s:21709,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:228  
     1633    21709    1      CALL RELCVM;

  21709   1 000DDA  E3C0 0004                            LNJ,B6   s:0,PREL
          1 000DDC       0001                            DC       s:21710,PREL

     1634    21710    1      GOTO CHKPPT_EXIT;

  21710   1 000DDD  0F81 F633                            B        s:20601,PREL

     1635    21711        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:229  
     1636    21712        /*I* NAME: RELCVM
     1637    21713             PURPOSE:
     1638    21714                 To locate all shared usage of a segment and change the ASDT
     1639    21715                 as though it had CVMed onto a real memory page.
     1640    21716             DESCRIPTION:
     1641    21717                 Search down the list of shared users, starting at PPUT.OWNER,
     1642    21718                 and unlink SHRD_SEG and set CVM_REAL each place the segment
     1643    21719                 is used.  CURR and CURR$ indicate the pageno being released.
     1644    21720        */
     1645    21721
     1646    21722    1   RELCVM: PROC;

  21722   1 000DDF  EFC7 0038            RELCVM          STB,B6   GET_TYPE+2,AUTO

     1647    21723    2      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);

  21723   1 000DE1  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 000DE4  DFC7 002B                            STB,B5   U$,AUTO

     1648    21724    2      L=CURR$->GM$PPUT.OWNER;

  21724   1 000DE6  CCC7 000F                            LDB,B4   CURR$,AUTO
          1 000DE8  E284                                 LLH,R6   ,B4
          1 000DE9  EF47 0023                            STR,R6   L,AUTO

     1649    21725    3      DO WHILE L ~= 0;

  21725   1 000DEB  6901 0066                            BEZ,R6   s:21742,PREL

     1650    21726    3           LOG=G$USER.UHJITPP(L);

  21726   1 000DED  EC80 0000 0000  xsym                 LDB,B6   G$USRT$
          1 000DF0  B847 0023                            LDR,R3   L,AUTO
          1 000DF2  3F18                                 MLV,R3   24
          1 000DF3  3E12                                 ADV,R3   18
          1 000DF4  E836                                 LDR,R6   ,B6,R3
          1 000DF5  EF47 0024                            STR,R6   LOG,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:230  

     1651    21727    3           CALL MAP (LOG);

  21727   1 000DF7  DBC7 0024                            LAB,B5   LOG,AUTO
          1 000DF9  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 000DFB  E3C0 03B4                            LNJ,B6   s:0,PREL
          1 000DFD       0001                            DC       s:21728,PREL

     1652    21728    3           L=0;

  21728   1 000DFE  8747 0023                            CL       L,AUTO

     1653    21729    4           DO I = 1 TO 30;

  21729   1 000E00  6C01                                 LDV,R6   1
          1 000E01  EF47 0022                            STR,R6   I,AUTO

     1654    21730    4                IF USRMAP.BASE(I) = CURR AND

  21730   1 000E03  ECC7 002B                            LDB,B6   U$,AUTO
          1 000E05  B847 0022                            LDR,R3   I,AUTO
          1 000E07  3001                                 SOL,R3   1
          1 000E08  E836                                 LDR,R6   ,B6,R3
          1 000E09  E570 7FFF                            AND,R6   32767,IMO
          1 000E0B  E947 000E                            CMR,R6   CURR,AUTO
          1 000E0D  0981 0039                            BNE      s:21740,PREL
          1 000E0F  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 000E12  CBC5 0183                            LAB,B4   387,B5
          1 000E14  A847 0022                            LDR,R2   I,AUTO
          1 000E16  D2A4                                 LLH,R5   ,B4,R2
          1 000E17  5901 002F                            BEZ,R5   s:21740,PREL

     1655    21731    4                  G$WINDOW1$->G$UHJIT.SHRD_SEG(I) ~= 0
     1656    21732    5                THEN DO;

     1657    21733    5                     L=G$WINDOW1$->G$UHJIT.SHRD_SEG(I);

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:231  
  21733   1 000E19  CBC5 0183                            LAB,B4   387,B5
          1 000E1B  D2A4                                 LLH,R5   ,B4,R2
          1 000E1C  DF47 0023                            STR,R5   L,AUTO

     1658    21734    5                     G$WINDOW1$->G$UHJIT.SHRD_SEG(I)=0;

  21734   1 000E1E  CBC5 0183                            LAB,B4   387,B5
          1 000E20  87A4                                 CLH      ,B4,R2

     1659    21735    5                     G$UHJIT.ASDT_MCL.BPAR2=SHUF_DSCR;

  21735   1 000E21  8C80 0000 0000  00                   LDI      SHUF_DSCR
          1 000E24  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 000E27  8D44 006A                            SDI      106,B4

     1660    21736    5                     G$UHJIT.ASDT_MCL.BPAR2.BASE=USRMAP.BASE(%GM_ROS#);

  21736   1 000E29  D846 0002                            LDR,R5   2,B6
          1 000E2B  DAC4 006A                            SRM,R5,'7FFF'X    106,B4
          1 000E2D       7FFF

     1661    21737    5                     CALL GHH$ASD (G$BPAR2$,G$UHJIT.ASDT_MCL.BPAR2);

  21737   1 000E2E  BBC4 006A                            LAB,B3   106,B4
          1 000E30  BFC7 0058                            STB,B3   @PAGENUM+6,AUTO
          1 000E32  AB80 0000 0000  xsym                 LAB,B2   G$BPAR2$
          1 000E35  AFC7 0056                            STB,B2   @PAGENUM+4,AUTO
          1 000E37  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000E39  CBF0 0200                            LAB,B4   512,IMO
          1 000E3B  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000E3E       0001                            DC       s:21738,PREL

     1662    21738    5                     G$BPAR2$->G$ROS.JIT.CVM_REAL(I)='1'B;

  21738   1 000E3F  EC80 0000 0000  xsym                 LDB,B6   G$BPAR2$
          1 000E42  DBC6 00F0                            LAB,B5   240,B6
          1 000E44  B847 0022                            LDR,R3   I,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:232  
          1 000E46  8935                                 LBT      ,B5,R3

     1663    21739    5                     END;

     1664    21740    4                END;

  21740   1 000E47  8AC7 0022                            INC      I,AUTO
          1 000E49  E847 0022                            LDR,R6   I,AUTO
          1 000E4B  6D1E                                 CMV,R6   30
          1 000E4C  0381 FFB6                            BLE      s:21730,PREL

     1665    21741    3           END;

  21741   1 000E4E  D847 0023                            LDR,R5   L,AUTO
          1 000E50  5981 FF9C                            BNEZ,R5  s:21726,PREL

     1666    21742    2      RETURN;

  21742   1 000E52  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 000E54  C3C6 0001                            LNJ,B4   1,B6

     1667    21743
     1668    21744    2   END RELCVM;
     1669    21745        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:233  
     1670    21746        /*D* NAME: GMA$CVM
     1671    21747
     1672    21748             CALL: CALL GMA$CVM (segment_index,size,physical_page);
     1673    21749
     1674    21750              PARAMETERS:
     1675    21751                    segment_index is an index to the segment descriptor in
     1676    21752                    the user' ASDT for which memory is to be mapped.
     1677    21753
     1678    21754                    size is the number of pages requested to be mapped.
     1679    21755
     1680    21756                    physical_page is the physical page number of the first
     1681    21757                    page to be mapped into the segment.
     1682    21758              DESCRIPTION:
     1683    21759                    The specified segment in the user's memory is mapped onto
     1684    21760                    the specified physical memory by setting ASDT_USR in the
     1685    21761                    user's UHJIT.  The protection is set accroding to the
     1686    21762                    users privileges, Write if he has SPCLMM and read only if he
     1687    21763                    has EXMM.
     1688    21764
     1689    21765                    Usage of shared segments, CVMed or Shared Procedure, is
     1690    21766                    done by maintaining a linked list of users of each segment
     1691    21767                    with a head in GM$PPUT.OWNER.  This is normally the owner
     1692    21768                    of the physical segment until the segment is shared by a
     1693    21769                    CVM request or Shared Procedure allocation. Each time a
     1694    21770                    new user requests to share a segment he is added to the
     1695    21771                    head of the list, if it is the sole occurance of the CVM
     1696    21772                    in that user.  If there are other occurances of CVMs to
     1697    21773                    the same segment in the user, the link is set the same as
     1698    21774                    the link for the others.  Thus all users sharing a segment
     1699    21775                    are linked together with the last user on the list, whose
     1700    21776                    link is zero, being the owner of the physical segment.
     1701    21777                    If the owner of the physical segment makes a CVM request
     1702    21778                    for that segment, he is linked to himself.  We recognize
     1703    21779                    this and act appropriatly.
     1704    21780
     1705    21781                    If the owner of the physical segment releases the segment,
     1706    21782                    others users sharing the segment are modified as though
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:234  
     1707    21783                    they had requested to be CVMed onto the real memory the
     1708    21784                    segment had occupied.                                 */
     1709    21785
     1710    21786    1   GMA$CVM: ENTRY (PAGENO,PAGES,RP) ALTRET;

  21786   1 000E56  D380 0000 0000  xent GMA$CVM         LNJ,B5   X6A_AUTO_N
          1 000E59       005A 0005                       DC       90,5

     1711    21787
     1712    21788    1      G$SEGDESC = '0'B;

  21788   1 000E5B  8747 0020                            CL       G$SEGDESC,AUTO
          1 000E5D  8747 0021                            CL       G$SEGDESC+1,AUTO

     1713    21789    1      G$SEGDESC.V = '1'B;

  21789   1 000E5F  8947 0020                            LBT,'8000'X       G$SEGDESC,AUTO
  21789   1 000E61       8000

     1714    21790    1      CURR=ADDR(RP)->G$AWORD(0);

  21790   1 000E62  ECC7 0008                            LDB,B6   @RP,AUTO
          1 000E64  E806                                 LDR,R6   ,B6
          1 000E65  EF47 000E                            STR,R6   CURR,AUTO

     1715    21791    1      G$SEGDESC.BASE=CURR;

  21791   1 000E67  EAC7 0020                            SRM,R6,'7FFF'X    G$SEGDESC,AUTO
  21791   1 000E69       7FFF

     1716    21792    1      G$SEGDESC.SIZE=PAGES-1;

  21792   1 000E6A  DCC7 0006                            LDB,B5   @PAGES,AUTO
          1 000E6C  D805                                 LDR,R5   ,B5
          1 000E6D  5EFF                                 ADV,R5   -1
          1 000E6E  DAC7 0021                            SRM,R5,'01FF'X    G$SEGDESC+1,AUTO
          1 000E70       01FF
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:235  

     1717    21793    1      G$SEGDESC.RP=%G_R_USR#;

  21793   1 000E71  8847 0021                            LBF,'C000'X       G$SEGDESC+1,AUTO
  21793   1 000E73       C000

     1718    21794    1      G$SEGDESC.EP=%G_R_MON#;

  21794   1 000E74  D870 0800                            LDR,R5   2048,IMO
          1 000E76  DAC7 0021                            SRM,R5,'0C00'X    G$SEGDESC+1,AUTO
          1 000E78       0C00

     1719    21795    1      IF G$JIT.PRIV.ACTIVE & %G_PR_EXMM#

  21795   1 000E79  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 000E7C  8CC4 008E                            LDI      142,B4
          1 000E7E  E500 0000 000B  00                   AND,R6   PPUTERR+3
          1 000E81  F500 0000 000C  00                   AND,R7   PPUTERR+4
          1 000E84  8D47 0056                            SDI      @PAGENUM+4,AUTO
          1 000E86  BB80 0000 0000  02                   LAB,B3   0
          1 000E89  5C01                                 LDV,R5   1
          1 000E8A  0022                                 ACM      ;
          1 000E8B       4407 0056                                ALPHANUM(@PAGENUM+4,AUTO,,4,FILL),;
          1 000E8D       4003 0005                                ALPHANUM(5,B3,,R5,FILL)
          1 000E8F  5381 0006                            CBE      s:21797,PREL

     1720    21796    1      THEN G$SEGDESC.WP=%G_R_USR#;

  21796   1 000E91  8847 0021                            LBF,'3000'X       G$SEGDESC+1,AUTO
  21796   1 000E93       3000
          1 000E94  0F81 0006                            B        s:21802,PREL

     1721    21797    1      ELSE G$SEGDESC.WP=%G_R_MON#;

  21797   1 000E96  C870 2000                            LDR,R4   8192,IMO
          1 000E98  CAC7 0021                            SRM,R4,'3000'X    G$SEGDESC+1,AUTO
          1 000E9A       3000
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:236  

     1722    21798
     1723    21799        /* If there is no owner it must be a monitor segment
     1724    21800           so turn it into a real segment request.
     1725    21801        */
     1726    21802    1      CALL LOCK_GATE;

  21802   1 000E9B  E3C0 034A                            LNJ,B6   s:0,PREL
          1 000E9D       0001                            DC       s:21803,PREL

     1727    21803    1      CURR$ = ADDR(GM$PPUTA(CURR));

  21803   1 000E9E  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 000EA1  B847 000E                            LDR,R3   CURR,AUTO
          1 000EA3  3001                                 SOL,R3   1
          1 000EA4  DBB6                                 LAB,B5   ,B6,R3
          1 000EA5  DFC7 000F                            STB,B5   CURR$,AUTO

     1728    21804    1      IF (CURR < GM_MEM_LOW) OR (CURR$->GM$PPUT.OWNER = 0)

  21804   1 000EA7  E847 000E                            LDR,R6   CURR,AUTO
          1 000EA9  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 000EAC  0201 0004                            BL       s:21806,PREL
          1 000EAE  D285                                 LLH,R5   ,B5
          1 000EAF  5981 000C                            BNEZ,R5  s:21814,PREL

     1729    21805    2      THEN DO;

     1730    21806    2           G$JIT.CVM_REAL(SEGX)='1'B;

  21806   1 000EB1  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 000EB3  A804                                 LDR,R2   ,B4
          1 000EB4  BC80 0000 0000  xsym                 LDB,B3   G$JIT$
          1 000EB7  ABC3 00B6                            LAB,B2   182,B3
          1 000EB9  8922                                 LBT      ,B2,R2

     1731    21807    2           END;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:237  

  21807   1 000EBA  0F81 0058                            B        s:21828,PREL

     1732    21808
     1733    21809        /* If this is not a real or unowned segment,
     1734    21810           link CVM segment to same user as any previous CVM to same
     1735    21811           segment in this user or himself if he is the owner of phys.
     1736    21812        */
     1737    21813    2      ELSE DO;

     1738    21814    2           G$JIT.CVM_REAL(SEGX)='0'B;

  21814   1 000EBC  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 000EBE  A804                                 LDR,R2   ,B4
          1 000EBF  BC80 0000 0000  xsym                 LDB,B3   G$JIT$
          1 000EC2  ABC3 00B6                            LAB,B2   182,B3
          1 000EC4  8822                                 LBF      ,B2,R2

     1739    21815    3           DO I = 1 TO 30;

  21815   1 000EC5  6C01                                 LDV,R6   1
          1 000EC6  EF47 0022                            STR,R6   I,AUTO

     1740    21816    3                IF G$ASDT_USR$->G$SEGDESCA.BASE(I) = CURR

  21816   1 000EC8  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000ECB  B847 0022                            LDR,R3   I,AUTO
          1 000ECD  3001                                 SOL,R3   1
          1 000ECE  E836                                 LDR,R6   ,B6,R3
          1 000ECF  E570 7FFF                            AND,R6   32767,IMO
          1 000ED1  E947 000E                            CMR,R6   CURR,AUTO
          1 000ED3  0981 0025                            BNE      s:21823,PREL

     1741    21817    4                THEN DO;

     1742    21818    4                     IF G$UHJIT.SHRD_SEG(I) ~= 0

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:238  
  21818   1 000ED5  DC80 0000 0000  xsym                 LDB,B5   G$UHJIT$
          1 000ED8  CBC5 0183                            LAB,B4   387,B5
          1 000EDA  A847 0022                            LDR,R2   I,AUTO
          1 000EDC  D2A4                                 LLH,R5   ,B4,R2
          1 000EDD  5901 000C                            BEZ,R5   s:21820,PREL

     1743    21819    4                     THEN G$UHJIT.SHRD_SEG(SEGX)=G$UHJIT.SHRD_SEG(I);

  21819   1 000EDF  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 000EE1  9804                                 LDR,R1   ,B4
          1 000EE2  BBC5 0183                            LAB,B3   387,B5
          1 000EE4  D2A3                                 LLH,R5   ,B3,R2
          1 000EE5  BBC5 0183                            LAB,B3   387,B5
          1 000EE7  D793                                 STH,R5   ,B3,R1
          1 000EE8  0F81 000E                            B        s:21821,PREL

     1744    21820    4                     ELSE G$UHJIT.SHRD_SEG(SEGX)=G$JIT.USR#;

  21820   1 000EEA  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 000EEC  9804                                 LDR,R1   ,B4
          1 000EED  BC80 0000 0000  xsym                 LDB,B3   G$JIT$
          1 000EF0  D843 0004                            LDR,R5   4,B3
          1 000EF2  D570 00FF                            AND,R5   255,IMO
          1 000EF4  ABC5 0183                            LAB,B2   387,B5
          1 000EF6  D792                                 STH,R5   ,B2,R1

     1745    21821    4                     GOTO CVM1;

  21821   1 000EF7  0F81 001B                            B        s:21828,PREL

     1746    21822    4                     END;
     1747    21823    3                END;

  21823   1 000EF9  8AC7 0022                            INC      I,AUTO
          1 000EFB  E847 0022                            LDR,R6   I,AUTO
          1 000EFD  6D1E                                 CMV,R6   30
          1 000EFE  03CA                                 BLE      s:21816,SPREL
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:239  

     1748    21824
     1749    21825        /* Link user onto list of users of this segment
     1750    21826        */
     1751    21827    2           G$UHJIT.SHRD_SEG(SEGX)=CURR$->GM$PPUT.OWNER;

  21827   1 000EFF  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 000F01  B805                                 LDR,R3   ,B5
          1 000F02  CCC7 000F                            LDB,B4   CURR$,AUTO
          1 000F04  D284                                 LLH,R5   ,B4
          1 000F05  BC80 0000 0000  xsym                 LDB,B3   G$UHJIT$
          1 000F08  ABC3 0183                            LAB,B2   387,B3
          1 000F0A  D7B2                                 STH,R5   ,B2,R3

     1752    21828    2           CURR$->GM$PPUT.OWNER=G$JIT.USR#;

  21828   1 000F0B  AC80 0000 0000  xsym                 LDB,B2   G$JIT$
          1 000F0E  E842 0004                            LDR,R6   4,B2
          1 000F10  E570 00FF                            AND,R6   255,IMO
          1 000F12  E784                                 STH,R6   ,B4

  21828   1                              CVM1            null
     1753    21829    2   CVM1:   ;
     1754    21830    2           END;

     1755    21831
     1756    21832    1      CALL SET_ASDTS;

  21832   1 000F13  E3C0 0027            CVM1            LNJ,B6   s:0,PREL
          1 000F15       0001                            DC       s:21834,PREL

     1757    21833
     1758    21834    1      GOTO CHKPPT_EXIT;

  21834   1 000F16  0F81 F4FA                            B        s:20601,PREL

     1759    21835        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:240  
     1760    21836        /*D* NAME: GMA$PROT
     1761    21837
     1762    21838             CALL: CALL GMA$PROT (segment_index,read_prot,write_prot) ALTRET(label);
     1763    21839
     1764    21840              PARAMETERS:
     1765    21841                    segment_index is an index to the segment descriptor in
     1766    21842                    the user' ASDT for which the protection is to be set.
     1767    21843                    read_prot is the read protection code for the segment.
     1768    21844                    write_prot is the write protection code for the segment.
     1769    21845              DESCRIPTION:
     1770    21846                    The read and write access codes in the specified segment
     1771    21847                    are set.  The execution access is unchanged.
     1772    21848                                                                           */
     1773    21849    1   GMA$PROT: ENTRY (PAGENO,PAGES,RP) ALTRET;

  21849   1 000F18  D380 0000 0000  xent GMA$PROT        LNJ,B5   X6A_AUTO_N
          1 000F1B       005A 0005                       DC       90,5

     1774    21850    1      G$SEGDESC=G$ASDT_USR$->G$SEGDESCA(SEGX);

  21850   1 000F1D  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000F1F  B806                                 LDR,R3   ,B6
          1 000F20  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 000F23  8CB5                                 LDI      ,B5,R3
          1 000F24  8D47 0020                            SDI      G$SEGDESC,AUTO

     1775    21851    1      G$SEGDESC.RP=ADDR(PAGES)->BIT2ALGN;

  21851   1 000F26  CCC7 0006                            LDB,B4   @PAGES,AUTO
          1 000F28  D804                                 LDR,R5   ,B4
          1 000F29  DAC7 0021                            SRM,R5,'C000'X    G$SEGDESC+1,AUTO
          1 000F2B       C000

     1776    21852    1      G$SEGDESC.WP=RP;

  21852   1 000F2C  BCC7 0008                            LDB,B3   @RP,AUTO
          1 000F2E  D803                                 LDR,R5   ,B3
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:241  
          1 000F2F  5042                                 SOR,R5   2
          1 000F30  DAC7 0021                            SRM,R5,'3000'X    G$SEGDESC+1,AUTO
          1 000F32       3000

     1777    21853    1      CALL LOCK_GATE;

  21853   1 000F33  E3C0 02B2                            LNJ,B6   s:0,PREL
          1 000F35       0001                            DC       s:21854,PREL

     1778    21854    1      CALL SET_ASDTS;

  21854   1 000F36  E3C0 0004                            LNJ,B6   s:0,PREL
          1 000F38       0001                            DC       s:21855,PREL

     1779    21855    1      GOTO CHKPPT_EXIT;

  21855   1 000F39  0F81 F4D7                            B        s:20601,PREL

     1780    21856        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:242  
     1781    21857        /*I* NAME: SET_ASDTS
     1782    21858             PURPOSE:
     1783    21859                   To set the Segment descriptor in the users ASDT with
     1784    21860                   the results of the current operation.
     1785    21861
     1786    21862             CALL: CALL SET_ASDT;
     1787    21863
     1788    21864             INPUT:
     1789    21865                   G$SEGDESC contains the segment descriptor.
     1790    21866                   SEGX contains the index into G$ASDT_USR.
     1791    21867             OUTPUT:
     1792    21868                   G$ASDT_USER(SEGX) is set.
     1793    21869                                                                        */
     1794    21870
     1795    21871    1   SET_ASDTS: PROC;

  21871   1 000F3B  EFC7 0038            SET_ASDTS       STB,B6   GET_TYPE+2,AUTO

     1796    21872
     1797    21873    2      G$ASDT_USR$->G$SEGDESCA(SEGX) = G$SEGDESC;

  21873   1 000F3D  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 000F3F  B805                                 LDR,R3   ,B5
          1 000F40  8CC7 0020                            LDI      G$SEGDESC,AUTO
          1 000F42  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          1 000F45  8D34                                 SDI      ,B4,R3

     1798    21874        /* Check if it is the ROS that is being updated and update the
     1799    21875            ASDT_MCL.ROS if it is.
     1800    21876         */
     1801    21877    2      IF SEGX = %GM_ROS#

  21877   1 000F46  E805                                 LDR,R6   ,B5
          1 000F47  6D01                                 CMV,R6   1
          1 000F48  0981 001C                            BNE      s:21882,PREL

     1802    21878    3      THEN DO;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:243  

     1803    21879    3           G$ASDT_MCL$->G$SEGDESCA(SEGX) = G$SEGDESC;

  21879   1 000F4A  B856                                 LDR,R3   R6
          1 000F4B  8CC7 0020                            LDI      G$SEGDESC,AUTO
          1 000F4D  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_MCL$
          1 000F50  8D36                                 SDI      ,B6,R3

     1804    21880    3           CALL GHH$ASD (G$ROS$,G$UHJIT.ASDT_MCL.ROS);

  21880   1 000F51  BC80 0000 0000  xsym                 LDB,B3   G$UHJIT$
          1 000F54  ABC3 0040                            LAB,B2   64,B3
          1 000F56  AFC7 0058                            STB,B2   @PAGENUM+6,AUTO
          1 000F58  9B80 0000 0000  xsym                 LAB,B1   G$ROS$
          1 000F5B  9FC7 0056                            STB,B1   @PAGENUM+4,AUTO
          1 000F5D  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 000F5F  CBF0 0200                            LAB,B4   512,IMO
          1 000F61  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 000F64       0001                            DC       s:21882,PREL

     1805    21881    3           END;

     1806    21882    2      U$=ADDR(ADDR(W_HHJIT.ASDT_USR)->G$SEGDESCA(SEGX));

  21882   1 000F65  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000F67  B806                                 LDR,R3   ,B6
          1 000F68  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 000F6B  3001                                 SOL,R3   1
          1 000F6C  CBB5                                 LAB,B4   ,B5,R3
          1 000F6D  CFC7 002B                            STB,B4   U$,AUTO

     1807    21883    3      DO I = 12 TO 60;

  21883   1 000F6F  6C0C                                 LDV,R6   12
          1 000F70  EF47 0022                            STR,R6   I,AUTO

     1808    21884    3           IF G$UHJIT.CNCTD_LVLS(I) AND G$MHJIT.INTCON.HHJIT(I-12)~= 0
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:244  

  21884   1 000F72  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 000F75  DBC6 017F                            LAB,B5   383,B6
          1 000F77  B847 0022                            LDR,R3   I,AUTO
          1 000F79  82B5                                 LB       ,B5,R3
          1 000F7A  0581 002A                            BBF      s:21892,PREL
          1 000F7C  DC80 0000 0000  xsym                 LDB,B5   G$MHJIT$
          1 000F7F  CBC5 02A7                            LAB,B4   679,B5
          1 000F81  3004                                 SOL,R3   4
          1 000F82  E834                                 LDR,R6   ,B4,R3
          1 000F83  6901 0021                            BEZ,R6   s:21892,PREL

     1809    21885    4           THEN DO;

     1810    21886    4                LOG = G$MHJIT.INTCON.HJIT_PG.BASE(I-12);

  21886   1 000F85  CBC5 02A7                            LAB,B4   679,B5
          1 000F87  E834                                 LDR,R6   ,B4,R3
          1 000F88  E570 0FFF                            AND,R6   4095,IMO
          1 000F8A  EF47 0024                            STR,R6   LOG,AUTO

     1811    21887    4                CALL MAP (LOG);

  21887   1 000F8C  CBC7 0024                            LAB,B4   LOG,AUTO
          1 000F8E  CFC7 0052                            STB,B4   SAVE_SZ+4,AUTO
          1 000F90  E3C0 021F                            LNJ,B6   s:0,PREL
          1 000F92       0001                            DC       s:21888,PREL

     1812    21888    4                USEGDESC = G$SEGDESC;

  21888   1 000F93  8CC7 0020                            LDI      G$SEGDESC,AUTO
          1 000F95  ECC7 002B                            LDB,B6   U$,AUTO
          1 000F97  8D06                                 SDI      ,B6

     1813    21889    4                IF SEGX = %GM_ROS#

  21889   1 000F98  DCC7 0004                            LDB,B5   @PAGENO,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:245  
          1 000F9A  D805                                 LDR,R5   ,B5
          1 000F9B  5D01                                 CMV,R5   1
          1 000F9C  0981 0008                            BNE      s:21892,PREL

     1814    21890    4                THEN W_HHJIT.ASDT_MCL.ROS=G$SEGDESC;

  21890   1 000F9E  8CC7 0020                            LDI      G$SEGDESC,AUTO
          1 000FA0  CC80 0000 0000  xsym                 LDB,B4   G$WINDOW1$
          1 000FA3  8D44 0040                            SDI      64,B4

     1815    21891    4                END;

     1816    21892    3           END;

  21892   1 000FA5  8AC7 0022                            INC      I,AUTO
          1 000FA7  E847 0022                            LDR,R6   I,AUTO
          1 000FA9  6D3C                                 CMV,R6   60
          1 000FAA  03C8                                 BLE      s:21884,SPREL

     1817    21893
     1818    21894    2      RETURN;

  21894   1 000FAB  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 000FAD  C3C6 0001                            LNJ,B4   1,B6

     1819    21895    2   END SET_ASDTS;
     1820    21896        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:246  
     1821    21897        /*D* NAME: GMA$SHARED
     1822    21898
     1823    21899             CALL: CALL GMA$SHARED (sfile) ALTRET(label);
     1824    21900
     1825    21901              PARAMETERS:
     1826    21902                    sfile is a Shared File Table entry defined in G_SFILE_M.
     1827    21903              DESCRIPTION:
     1828    21904                    This routine looks at the segment information in the sfile
     1829    21905                    table.  If a segment exists, (has non zero size), it links
     1830    21906                    the user onto the list of users connected to this physical
     1831    21907                    segment.
     1832    21908
     1833    21909                                                                           */
     1834    21910    1   GMA$SHARED: ENTRY (PAGENO) ALTRET;

  21910   1 000FAF  D380 0000 0000  xent GMA$SHARED      LNJ,B5   X6A_AUTO_N
          1 000FB2       005A 0005                       DC       90,5

     1835    21911
     1836    21912    1      M$ = ADDR(PAGENO);                   /*now M$ = addr(sfile entry)*/

  21912   1 000FB4  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 000FB6  EFC7 002D                            STB,B6   M$,AUTO

     1837    21913
     1838    21914    1      CALL LOCK_GATE;

  21914   1 000FB8  E3C0 022D                            LNJ,B6   s:0,PREL
          1 000FBA       0001                            DC       s:21915,PREL

     1839    21915    2      DO I = 0 TO 6;

  21915   1 000FBB  8747 0022                            CL       I,AUTO

     1840    21916    2           IF ADDR(G$SFILE.PP_SEG1)->G$AWORD(I) ~= 0

  21916   1 000FBD  ECC7 002D                            LDB,B6   M$,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:247  
          1 000FBF  B847 0022                            LDR,R3   I,AUTO
          1 000FC1  3E29                                 ADV,R3   41
          1 000FC2  E836                                 LDR,R6   ,B6,R3
          1 000FC3  6901 0054                            BEZ,R6   s:21936,PREL

     1841    21917    3           THEN DO;

     1842    21918    3                CURR=ADDR(G$SFILE.PP_SEG1)->G$AWORD(I);

  21918   1 000FC5  EF47 000E                            STR,R6   CURR,AUTO

     1843    21919    4                DO L = 1 TO 30;

  21919   1 000FC7  5C01                                 LDV,R5   1
          1 000FC8  DF47 0023                            STR,R5   L,AUTO

     1844    21920    4                     IF G$ASDT_USR$->G$SEGDESCA.BASE(L) = CURR

  21920   1 000FCA  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 000FCD  B847 0023                            LDR,R3   L,AUTO
          1 000FCF  3001                                 SOL,R3   1
          1 000FD0  E836                                 LDR,R6   ,B6,R3
          1 000FD1  E570 7FFF                            AND,R6   32767,IMO
          1 000FD3  E947 000E                            CMR,R6   CURR,AUTO
          1 000FD5  0981 003B                            BNE      s:21934,PREL

     1845    21921    5                     THEN DO;

     1846    21922    5                          IF CURR < GM_MEM_LOW /*if delta_f*/

  21922   1 000FD7  D847 000E                            LDR,R5   CURR,AUTO
          1 000FD9  D900 0000 0000  xsym                 CMR,R5   GM_MEM_LOW
          1 000FDC  0281 000B                            BGE      s:21926,PREL

     1847    21923    5                          THEN G$JIT.CVM_REAL(L) = '1'B;

  21923   1 000FDE  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:248  
          1 000FE1  CBC5 00B6                            LAB,B4   182,B5
          1 000FE3  A847 0023                            LDR,R2   L,AUTO
          1 000FE5  8924                                 LBT      ,B4,R2
          1 000FE6  0F81 002A                            B        s:21934,PREL

     1848    21924
     1849    21925    6                          ELSE DO;

     1850    21926    6                               G$UHJIT.SHRD_FLAG(L) = '1'B;

  21926   1 000FE8  DC80 0000 0000  xsym                 LDB,B5   G$UHJIT$
          1 000FEB  CBC5 0193                            LAB,B4   403,B5
          1 000FED  A847 0023                            LDR,R2   L,AUTO
          1 000FEF  8924                                 LBT      ,B4,R2

     1851    21927    6                               CURR$ = ADDR(GM$PPUTA(CURR));

  21927   1 000FF0  CC80 0000 0000  xsym                 LDB,B4   G$PPUT$
          1 000FF3  B847 000E                            LDR,R3   CURR,AUTO
          1 000FF5  3001                                 SOL,R3   1
          1 000FF6  BBB4                                 LAB,B3   ,B4,R3
          1 000FF7  BFC7 000F                            STB,B3   CURR$,AUTO

     1852    21928    6                               IF CURR$->GM$PPUT.OWNER = G$JIT.USR#

  21928   1 000FF9  E283                                 LLH,R6   ,B3
          1 000FFA  AC80 0000 0000  xsym                 LDB,B2   G$JIT$
          1 000FFD  D842 0004                            LDR,R5   4,B2
          1 000FFF  D570 00FF                            AND,R5   255,IMO
          1 001001  E955                                 CMR,R6   R5
          1 001002  0981 0003                            BNE      s:21930,PREL

     1853    21929    6                               THEN CURR$->GM$PPUT.OWNER = 1; /* Make NODEADMNs  */

  21929   1 001004  4C01                                 LDV,R4   1
          1 001005  C783                                 STH,R4   ,B3

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:249  
     1854    21930    6                               G$UHJIT.SHRD_SEG(L) = CURR$->GM$PPUT.OWNER;

  21930   1 001006  E283                                 LLH,R6   ,B3
          1 001007  9BC5 0183                            LAB,B1   387,B5
          1 001009  B847 0023                            LDR,R3   L,AUTO
          1 00100B  E7B1                                 STH,R6   ,B1,R3

     1855    21931    6                               CURR$->GM$PPUT.OWNER = G$JIT.USR#;

  21931   1 00100C  E842 0004                            LDR,R6   4,B2
          1 00100E  E570 00FF                            AND,R6   255,IMO
          1 001010  E783                                 STH,R6   ,B3

     1856    21932    6                               END/*do if not delta_f*/;

     1857    21933    5                          END/*do if user has this seg shared*/;

     1858    21934    4                     END/*do L=0 to 30*/;

  21934   1 001011  8AC7 0023                            INC      L,AUTO
          1 001013  E847 0023                            LDR,R6   L,AUTO
          1 001015  6D1E                                 CMV,R6   30
          1 001016  0381 FFB3                            BLE      s:21920,PREL

     1859    21935    3                END/*do if segment is allocated*/;

     1860    21936    2           END/*do I=0 to 6*/;

  21936   1 001018  8AC7 0022                            INC      I,AUTO
          1 00101A  E847 0022                            LDR,R6   I,AUTO
          1 00101C  6D06                                 CMV,R6   6
          1 00101D  0381 FF9F                            BLE      s:21916,PREL

     1861    21937    1      GOTO CHKPPT_EXIT;

  21937   1 00101F  0F81 F3F1                            B        s:20601,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:250  
     1862    21938        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:251  
     1863    21939        /*D* NAME: GMA$UNSHARE
     1864    21940
     1865    21941             CALL: CALL GMA$UNSHARE (segment_index);
     1866    21942
     1867    21943              PARAMETERS:
     1868    21944                 Segment_index is an index to the segment descriptor in the
     1869    21945                 users ASDT which is to be released from shared usage.
     1870    21946              DESCRIPTION:
     1871    21947
     1872    21948                 This procedure assumes that said segment is shared, either
     1873    21949                 by CVM or as a shared procedure segment.
     1874    21950
     1875    21951                 If the segment occurs more than once in ASDT with a link to
     1876    21952                 another user, it is simply cleared from the ASDT.
     1877    21953
     1878    21954                 If the segment occurs only once, with a link to another user,
     1879    21955                 it is unlinked from the list of sharors of that segment.
     1880    21956                 If it doesn't have a link to another user, it is assumed to
     1881    21957                 be the last user on the list and is unlinked also.
     1882    21958                                                                           */
     1883    21959
     1884    21960    1   GMA$UNSHARE: ENTRY(PAGENO) ALTRET;

  21960   1 001021  D380 0000 0000  xent GMA$UNSHARE     LNJ,B5   X6A_AUTO_N
          1 001024       005A 0005                       DC       90,5

     1885    21961
     1886    21962    1      CALL LOCK_GATE;

  21962   1 001026  E3C0 01BF                            LNJ,B6   s:0,PREL
          1 001028       0001                            DC       s:21963,PREL

     1887    21963    1      U$=ADDR(G$WINDOW1$->G$UHJIT.ASDT_USR);

  21963   1 001029  EC80 0000 0000  xsym                 LDB,B6   G$WINDOW1$
          1 00102C  EFC7 002B                            STB,B6   U$,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:252  
     1888    21964    1      CURR=G$ASDT_USR$->G$SEGDESCA.BASE(SEGX);

  21964   1 00102E  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 001030  B805                                 LDR,R3   ,B5
          1 001031  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_USR$
          1 001034  3001                                 SOL,R3   1
          1 001035  E834                                 LDR,R6   ,B4,R3
          1 001036  E570 7FFF                            AND,R6   32767,IMO
          1 001038  EF47 000E                            STR,R6   CURR,AUTO

     1889    21965    1      CURR$ = ADDR(GM$PPUTA(CURR));

  21965   1 00103A  BC80 0000 0000  xsym                 LDB,B3   G$PPUT$
          1 00103D  B856                                 LDR,R3   R6
          1 00103E  3001                                 SOL,R3   1
          1 00103F  ABB3                                 LAB,B2   ,B3,R3
          1 001040  AFC7 000F                            STB,B2   CURR$,AUTO

     1890    21966    1      L=CURR$->GM$PPUT.OWNER;

  21966   1 001042  D282                                 LLH,R5   ,B2
          1 001043  DF47 0023                            STR,R5   L,AUTO

     1891    21967    1      NEXT=G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX);

  21967   1 001045  A805                                 LDR,R2   ,B5
          1 001046  9C80 0000 0000  xsym                 LDB,B1   G$UHJIT$
          1 001049  EBC1 0183                            LAB,B6   387,B1
          1 00104B  C2A6                                 LLH,R4   ,B6,R2
          1 00104C  CF47 0011                            STR,R4   NEXT,AUTO

     1892    21968
     1893    21969    2      DO I = 1 TO 30;

  21969   1 00104E  1C01                                 LDV,R1   1
          1 00104F  9F47 0022                            STR,R1   I,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:253  
     1894    21970    2           IF G$ASDT_USR$->G$SEGDESCA.BASE(I) = CURR AND

  21970   1 001051  EC80 0000 0000  xsym                 LDB,B6   G$ASDT_USR$
          1 001054  B847 0022                            LDR,R3   I,AUTO
          1 001056  3001                                 SOL,R3   1
          1 001057  E836                                 LDR,R6   ,B6,R3
          1 001058  E570 7FFF                            AND,R6   32767,IMO
          1 00105A  E947 000E                            CMR,R6   CURR,AUTO
          1 00105C  0981 0010                            BNE      s:21974,PREL
          1 00105E  DC80 0000 0000  xsym                 LDB,B5   G$UHJIT$
          1 001061  CBC5 0183                            LAB,B4   387,B5
          1 001063  A847 0022                            LDR,R2   I,AUTO
          1 001065  D2A4                                 LLH,R5   ,B4,R2
          1 001066  5901 0006                            BEZ,R5   s:21974,PREL
          1 001068  CCC7 0004                            LDB,B4   @PAGENO,AUTO
          1 00106A  A904                                 CMR,R2   ,B4
          1 00106B  0981 0007                            BNE      s:21976,PREL

     1895    21971    2             G$UHJIT$->G$UHJIT.SHRD_SEG(I) ~= 0
     1896    21972    2             AND I ~= SEGX
     1897    21973    2           THEN EXIT;
     1898    21974    2           END;

  21974   1 00106D  8AC7 0022                            INC      I,AUTO
          1 00106F  E847 0022                            LDR,R6   I,AUTO
          1 001071  6D1E                                 CMV,R6   30
          1 001072  03DF                                 BLE      s:21970,SPREL

     1899    21975
     1900    21976    1      IF I > 30

  21976   1 001073  E847 0022                            LDR,R6   I,AUTO
          1 001075  6D1E                                 CMV,R6   30
          1 001076  0381 005D                            BLE      s:21995,PREL

     1901    21977    2      THEN DO;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:254  
     1902    21978    2           IF L = G$JIT.USR#

  21978   1 001078  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 00107B  D845 0004                            LDR,R5   4,B5
          1 00107D  D570 00FF                            AND,R5   255,IMO
          1 00107F  D947 0023                            CMR,R5   L,AUTO
          1 001081  0981 0008                            BNE      s:21982,PREL

     1903    21979    2           THEN CURR$->GM$PPUT.OWNER=NEXT; /* Unlink from head                   */

  21979   1 001083  C847 0011                            LDR,R4   NEXT,AUTO
          1 001085  CCC7 000F                            LDB,B4   CURR$,AUTO
          1 001087  C784                                 STH,R4   ,B4
          1 001088  0F81 004B                            B        s:21995,PREL

     1904    21980
     1905    21981    3           ELSE DO UNTIL L = G$JIT.USR#;

     1906    21982    3                LOG=G$USER.UHJITPP(L);

  21982   1 00108A  EC80 0000 0000  xsym                 LDB,B6   G$USRT$
          1 00108D  B847 0023                            LDR,R3   L,AUTO
          1 00108F  3F18                                 MLV,R3   24
          1 001090  3E12                                 ADV,R3   18
          1 001091  E836                                 LDR,R6   ,B6,R3
          1 001092  EF47 0024                            STR,R6   LOG,AUTO

     1907    21983    3                CALL MAP (LOG);

  21983   1 001094  DBC7 0024                            LAB,B5   LOG,AUTO
          1 001096  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 001098  E3C0 0117                            LNJ,B6   s:0,PREL
          1 00109A       0001                            DC       s:21984,PREL

     1908    21984    4                DO I = 1 TO 30;

  21984   1 00109B  6C01                                 LDV,R6   1
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:255  
          1 00109C  EF47 0022                            STR,R6   I,AUTO

     1909    21985    4                     IF USRMAP.BASE(I) = CURR

  21985   1 00109E  ECC7 002B                            LDB,B6   U$,AUTO
          1 0010A0  B847 0022                            LDR,R3   I,AUTO
          1 0010A2  3001                                 SOL,R3   1
          1 0010A3  E836                                 LDR,R6   ,B6,R3
          1 0010A4  E570 7FFF                            AND,R6   32767,IMO
          1 0010A6  E947 000E                            CMR,R6   CURR,AUTO
          1 0010A8  0981 001A                            BNE      s:21991,PREL

     1910    21986    5                     THEN DO;

     1911    21987    5                          L=G$WINDOW1$->G$UHJIT.SHRD_SEG(I);

  21987   1 0010AA  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 0010AD  CBC5 0183                            LAB,B4   387,B5
          1 0010AF  A847 0022                            LDR,R2   I,AUTO
          1 0010B1  D2A4                                 LLH,R5   ,B4,R2
          1 0010B2  DF47 0023                            STR,R5   L,AUTO

     1912    21988    5                          IF L = G$JIT.USR#

  21988   1 0010B4  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 0010B7  E844 0004                            LDR,R6   4,B4
          1 0010B9  E570 00FF                            AND,R6   255,IMO
          1 0010BB  E955                                 CMR,R6   R5
          1 0010BC  0981 0006                            BNE      s:21991,PREL

     1913    21989    5                          THEN G$WINDOW1$->G$UHJIT.SHRD_SEG(I)=NEXT; /* Unlink   */

  21989   1 0010BE  C847 0011                            LDR,R4   NEXT,AUTO
          1 0010C0  BBC5 0183                            LAB,B3   387,B5
          1 0010C2  C7A3                                 STH,R4   ,B3,R2

     1914    21990    5                          END;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:256  

     1915    21991    4                     END;

  21991   1 0010C3  8AC7 0022                            INC      I,AUTO
          1 0010C5  E847 0022                            LDR,R6   I,AUTO
          1 0010C7  6D1E                                 CMV,R6   30
          1 0010C8  03D6                                 BLE      s:21985,SPREL

     1916    21992    3                END;

  21992   1 0010C9  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 0010CC  D845 0004                            LDR,R5   4,B5
          1 0010CE  D570 00FF                            AND,R5   255,IMO
          1 0010D0  D947 0023                            CMR,R5   L,AUTO
          1 0010D2  0981 FFB7                            BNE      s:21982,PREL

     1917    21993    2           END;

     1918    21994
     1919    21995    1      G$ASDT_USR$->G$SEGDESCA(SEGX)='0'B;

  21995   1 0010D4  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 0010D6  B806                                 LDR,R3   ,B6
          1 0010D7  DC80 0000 0000  xsym                 LDB,B5   G$ASDT_USR$
          1 0010DA  BF47 0056                            STR,R3   @PAGENUM+4,AUTO
          1 0010DC  3001                                 SOL,R3   1
          1 0010DD  8735                                 CL       ,B5,R3
          1 0010DE  B847 0056                            LDR,R3   @PAGENUM+4,AUTO
          1 0010E0  3001                                 SOL,R3   1
          1 0010E1  3E01                                 ADV,R3   1
          1 0010E2  8735                                 CL       ,B5,R3

     1920    21996    1      G$UHJIT$->G$UHJIT.SHRD_SEG(SEGX) = 0;

  21996   1 0010E3  A806                                 LDR,R2   ,B6
          1 0010E4  CC80 0000 0000  xsym                 LDB,B4   G$UHJIT$
          1 0010E7  BBC4 0183                            LAB,B3   387,B4
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:257  
          1 0010E9  87A3                                 CLH      ,B3,R2

     1921    21997    1      G$UHJIT$->G$UHJIT.SHRD_FLAG(SEGX) = '0'B;

  21997   1 0010EA  A806                                 LDR,R2   ,B6
          1 0010EB  BBC4 0193                            LAB,B3   403,B4
          1 0010ED  8823                                 LBF      ,B3,R2

     1922    21998    1      GOTO CHKPPT_EXIT;

  21998   1 0010EE  0F81 F322                            B        s:20601,PREL

     1923    21999        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:258  
     1924    22000        /*D* NAME: GMA$LOGBASE2
     1925    22001
     1926    22002             CALL: CALL GMA$LOGBASE2 (log,page size); !! Doesn't ALTRET !!
     1927    22003
     1928    22004             INPUT:
     1929    22005                   PAGES - Size of segment, in pages.
     1930    22006             OUTPUT:
     1931    22007                   PAGENO - The log-base-2 of PAGES.
     1932    22008             DESCRIPTION:
     1933    22009                   This routine simply calculates the log-base-2 of the segment
     1934    22010                   whose size is specified by PAGES. A call is made to LOGBASE2,
     1935    22011                   which does the actual calculation.
     1936    22012        */
     1937    22013    1   GMA$LOGBASE2: ENTRY (PAGENO,PAGES) ALTRET; /* Doesn't ALTRET                  */

  22013   1 0010F0  D380 0000 0000  xent GMA$LOGBASE2    LNJ,B5   X6A_AUTO_N
          1 0010F3       005A 0005                       DC       90,5

     1938    22014
     1939    22015    1      CURR_MEAT$ = ADDR(NIL);

  22015   1 0010F5  EB80 0000 0000                       LAB,B6   0
          1 0010F8  EFC7 001A                            STB,B6   CURR_MEAT$,AUTO

     1940    22016    1      SIZE = PAGES;

  22016   1 0010FA  DCC7 0006                            LDB,B5   @PAGES,AUTO
          1 0010FC  E805                                 LDR,R6   ,B5
          1 0010FD  EF47 0027                            STR,R6   SIZE,AUTO

     1941    22017    1      CALL LOGBASE2;

  22017   1 0010FF  E3C0 000A                            LNJ,B6   s:0,PREL
          1 001101       0001                            DC       s:22018,PREL

     1942    22018    1      PAGENO = LOG;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:259  
  22018   1 001102  ECC7 0004                            LDB,B6   @PAGENO,AUTO
          1 001104  E847 0024                            LDR,R6   LOG,AUTO
          1 001106  EF06                                 STR,R6   ,B6

     1943    22019
     1944    22020    1      RETURN;

  22020   1 001107  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1945    22021
     1946    22022        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:260  
     1947    22023        /*I* NAME: LOGBASE2
     1948    22024             PURPOSE:
     1949    22025                   To find the MEAT list index for a segment of the specified size.
     1950    22026             CALL: CALL LOGBASE2;
     1951    22027             INPUT:
     1952    22028                   SIZE - Size in pages of the segment.
     1953    22029                   CURR_MEAT$ - Pointer to the appropriate MEAT list.
     1954    22030             OUTPUT:
     1955    22031                   LOG - MEAT list index.
     1956    22032                   MEAT$ - addr(curr_meat$ -> gm$meat_array(log)
     1957    22033             DESCRIPTION:
     1958    22034                   A hardcoded binary search is used to find the log-base-2 of
     1959    22035                   SIZE. The search takes 4 comparisons to terminate. The resultant
     1960    22036                   MEAT list index is returned in LOG.
     1961    22037        */
     1962    22038    1   LOGBASE2: PROC;

  22038   1 00110A  EFC7 0050            LOGBASE2        STB,B6   SAVE_SZ+2,AUTO

     1963    22039
     1964    22040    2      IF SIZE <= 128

  22040   1 00110C  E847 0027                            LDR,R6   SIZE,AUTO
          1 00110E  E970 0080                            CMR,R6   128,IMO
          1 001110  0301 003D                            BG       s:22056,PREL

     1965    22041    2      THEN IF SIZE <= 8

  22041   1 001112  6D08                                 CMV,R6   8
          1 001113  0301 001D                            BG       s:22049,PREL

     1966    22042    2           THEN IF SIZE <= 2

  22042   1 001115  6D02                                 CMV,R6   2
          1 001116  0301 000D                            BG       s:22046,PREL

     1967    22043    2                THEN IF SIZE <= 1
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:261  

  22043   1 001118  6D01                                 CMV,R6   1
          1 001119  0301 0005                            BG       s:22045,PREL

     1968    22044    2                     THEN LOG = 0;         /* Extents of size 1                  */

  22044   1 00111B  8747 0024                            CL       LOG,AUTO
          1 00111D  0F81 0072                            B        s:22072,PREL

     1969    22045    2                     ELSE LOG = 1;         /* Extents of size 2                  */

  22045   1 00111F  5C01                                 LDV,R5   1
          1 001120  DF47 0024                            STR,R5   LOG,AUTO
          1 001122  0F81 006D                            B        s:22072,PREL

     1970    22046    2                ELSE IF SIZE <= 4

  22046   1 001124  6D04                                 CMV,R6   4
          1 001125  0301 0006                            BG       s:22048,PREL

     1971    22047    2                     THEN LOG = 2;         /* Extents of size 3 - 4              */

  22047   1 001127  5C02                                 LDV,R5   2
          1 001128  DF47 0024                            STR,R5   LOG,AUTO
          1 00112A  0F81 0065                            B        s:22072,PREL

     1972    22048    2                     ELSE LOG = 3;         /* Extents of size 5 - 8              */

  22048   1 00112C  5C03                                 LDV,R5   3
          1 00112D  DF47 0024                            STR,R5   LOG,AUTO
          1 00112F  0F81 0060                            B        s:22072,PREL

     1973    22049    2           ELSE IF SIZE <= 32

  22049   1 001131  6D20                                 CMV,R6   32
          1 001132  0301 000E                            BG       s:22053,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:262  
     1974    22050    2                THEN IF SIZE <= 16

  22050   1 001134  6D10                                 CMV,R6   16
          1 001135  0301 0006                            BG       s:22052,PREL

     1975    22051    2                     THEN LOG = 4;         /* Extents of size 9 - 16             */

  22051   1 001137  5C04                                 LDV,R5   4
          1 001138  DF47 0024                            STR,R5   LOG,AUTO
          1 00113A  0F81 0055                            B        s:22072,PREL

     1976    22052    2                     ELSE LOG = 5;         /* Extents of size 17 - 32            */

  22052   1 00113C  5C05                                 LDV,R5   5
          1 00113D  DF47 0024                            STR,R5   LOG,AUTO
          1 00113F  0F81 0050                            B        s:22072,PREL

     1977    22053    2                ELSE IF SIZE <= 64

  22053   1 001141  6D40                                 CMV,R6   64
          1 001142  0301 0006                            BG       s:22055,PREL

     1978    22054    2                     THEN LOG = 6;         /* Extents of size 33 - 64            */

  22054   1 001144  5C06                                 LDV,R5   6
          1 001145  DF47 0024                            STR,R5   LOG,AUTO
          1 001147  0F81 0048                            B        s:22072,PREL

     1979    22055    2                     ELSE LOG = 7;         /* Extents of size 65 - 128           */

  22055   1 001149  5C07                                 LDV,R5   7
          1 00114A  DF47 0024                            STR,R5   LOG,AUTO
          1 00114C  0F81 0043                            B        s:22072,PREL

     1980    22056    2      ELSE IF SIZE <= 2048

  22056   1 00114E  E970 0800                            CMR,R6   2048,IMO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:263  
          1 001150  0301 0021                            BG       s:22064,PREL

     1981    22057    2           THEN IF SIZE <= 512

  22057   1 001152  E970 0200                            CMR,R6   512,IMO
          1 001154  0301 000F                            BG       s:22061,PREL

     1982    22058    2                THEN IF SIZE <= 256

  22058   1 001156  E970 0100                            CMR,R6   256,IMO
          1 001158  0301 0006                            BG       s:22060,PREL

     1983    22059    2                     THEN LOG = 8;         /* Extents of size 129 - 256          */

  22059   1 00115A  5C08                                 LDV,R5   8
          1 00115B  DF47 0024                            STR,R5   LOG,AUTO
          1 00115D  0F81 0032                            B        s:22072,PREL

     1984    22060    2                     ELSE LOG = 9;         /* Extents of size 257 - 512          */

  22060   1 00115F  5C09                                 LDV,R5   9
          1 001160  DF47 0024                            STR,R5   LOG,AUTO
          1 001162  0F81 002D                            B        s:22072,PREL

     1985    22061    2                ELSE IF SIZE <= 1024

  22061   1 001164  E970 0400                            CMR,R6   1024,IMO
          1 001166  0301 0006                            BG       s:22063,PREL

     1986    22062    2                     THEN LOG = 10;        /* Extents of size 513 - 1024         */

  22062   1 001168  5C0A                                 LDV,R5   10
          1 001169  DF47 0024                            STR,R5   LOG,AUTO
          1 00116B  0F81 0024                            B        s:22072,PREL

     1987    22063    2                     ELSE LOG = 11;        /* Extents of size 1025 - 2048        */

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:264  
  22063   1 00116D  5C0B                                 LDV,R5   11
          1 00116E  DF47 0024                            STR,R5   LOG,AUTO
          1 001170  0F81 001F                            B        s:22072,PREL

     1988    22064    2           ELSE IF SIZE <= 8192

  22064   1 001172  E970 2000                            CMR,R6   8192,IMO
          1 001174  0301 000F                            BG       s:22068,PREL

     1989    22065    2                THEN IF SIZE <= 4096

  22065   1 001176  E970 1000                            CMR,R6   4096,IMO
          1 001178  0301 0006                            BG       s:22067,PREL

     1990    22066    2                     THEN LOG = 12;        /* Extents of size 2049 - 4096        */

  22066   1 00117A  5C0C                                 LDV,R5   12
          1 00117B  DF47 0024                            STR,R5   LOG,AUTO
          1 00117D  0F81 0012                            B        s:22072,PREL

     1991    22067    2                     ELSE LOG = 13;        /* Extents of size 4097 - 8192        */

  22067   1 00117F  5C0D                                 LDV,R5   13
          1 001180  DF47 0024                            STR,R5   LOG,AUTO
          1 001182  0F81 000D                            B        s:22072,PREL

     1992    22068    2                ELSE IF SIZE <= 16384

  22068   1 001184  E970 4000                            CMR,R6   16384,IMO
          1 001186  0301 0006                            BG       s:22070,PREL

     1993    22069    2                     THEN LOG = 14;        /* Extents of size 8193 - 16384       */

  22069   1 001188  5C0E                                 LDV,R5   14
          1 001189  DF47 0024                            STR,R5   LOG,AUTO
          1 00118B  0F81 0004                            B        s:22072,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:265  
     1994    22070    2                     ELSE LOG = 15;        /* Extents of size 16385 - 32768      */

  22070   1 00118D  5C0F                                 LDV,R5   15
          1 00118E  DF47 0024                            STR,R5   LOG,AUTO

     1995    22071
     1996    22072    2      MEAT$ = ADDR(CURR_MEAT$->GM$MEATA (LOG));

  22072   1 001190  DCC7 001A                            LDB,B5   CURR_MEAT$,AUTO
          1 001192  B847 0024                            LDR,R3   LOG,AUTO
          1 001194  3F03                                 MLV,R3   3
          1 001195  CBB5                                 LAB,B4   ,B5,R3
          1 001196  CFC7 001C                            STB,B4   MEAT$,AUTO

     1997    22073    2      RETURN;

  22073   1 001198  ECC7 0050                            LDB,B6   SAVE_SZ+2,AUTO
          1 00119A  C3C6 0001                            LNJ,B4   1,B6

     1998    22074
     1999    22075    2   END LOGBASE2;
     2000    22076
     2001    22077        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:266  
     2002    22078        /*D* NAME: GMA$MAP
     2003    22079
     2004    22080             CALL: CALL GMA$MAP (page number,page size); !! Doesn't ALTRET !!
     2005    22081
     2006    22082             INPUT:
     2007    22083                   PAGENO - Page number of first page of segment to map onto.
     2008    22084                   PAGES - Size of segment, in pages.
     2009    22085             OUTPUT:
     2010    22086                   G$WINDOW1$ - mapped onto PAGENO.
     2011    22087             ENVIRONMENT:
     2012    22088                   Should be called disabled.
     2013    22089             DESCRIPTION:
     2014    22090                   This routine maps onto the page specified by PAGENO, simply
     2015    22091                   by calling MAP.
     2016    22092        */
     2017    22093    1   GMA$MAP: ENTRY (PAGENO,PAGES) ALTRET;   /* Doesn't ALTRET                     */

  22093   1 00119C  D380 0000 0000  xent GMA$MAP         LNJ,B5   X6A_AUTO_N
          1 00119F       005A 0005                       DC       90,5

     2018    22094
     2019    22095    1      SIZE = PAGES;

  22095   1 0011A1  ECC7 0006                            LDB,B6   @PAGES,AUTO
          1 0011A3  E806                                 LDR,R6   ,B6
          1 0011A4  EF47 0027                            STR,R6   SIZE,AUTO

     2020    22096    1      CALL MAP (PAGENO);

  22096   1 0011A6  DCC7 0004                            LDB,B5   @PAGENO,AUTO
          1 0011A8  DFC7 0052                            STB,B5   SAVE_SZ+4,AUTO
          1 0011AA  E3C0 0005                            LNJ,B6   s:0,PREL
          1 0011AC       0001                            DC       s:22098,PREL

     2021    22097
     2022    22098    1      RETURN;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:267  
  22098   1 0011AD  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     2023    22099
     2024    22100        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:268  
     2025    22101        /*I* NAME: MAP
     2026    22102             PURPOSE:
     2027    22103                  To map an extent into the window area.
     2028    22104
     2029    22105             CALL: CALL MAP (page number);
     2030    22106
     2031    22107             INPUT:
     2032    22108                  PAGENUM - Page number of the extent to be mapped into the window area.
     2033    22109             DESCRIPTION:
     2034    22110                  The extent specified by PAGENUM is mapped into the window area.
     2035    22111                  The base and size are obtained from the PPUT entry, stuffed into
     2036    22112                  the window descriptor in the current ASDT, and then GHH$ASD is
     2037    22113                  called to update the MMU image.
     2038    22114        */
     2039    22115    1   MAP: PROC (PAGENUM);

  22115   1 0011B0  EFC7 0050            MAP             STB,B6   SAVE_SZ+2,AUTO

     2040    22116
     2041    22117    2   DCL PAGENUM UBIN WORD;
     2042    22118
     2043    22119    2      IF (PAGENUM < GM_MEM_LOW) OR (PAGENUM > GM_MEM_HI)

  22119   1 0011B2  DCC7 0052                            LDB,B5   @PAGENUM,AUTO
          1 0011B4  E805                                 LDR,R6   ,B5
          1 0011B5  E900 0000 0000  xsym                 CMR,R6   GM_MEM_LOW
          1 0011B8  0201 0006                            BL       s:22120,PREL
          1 0011BA  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 0011BD  0381 0004                            BLE      s:22122,PREL

     2044    22120    2      THEN CALL MMSCREECH;

  22120   1 0011BF  E3C0 0166                            LNJ,B6   s:0,PREL
          1 0011C1       0001                            DC       s:22122,PREL

     2045    22121
     2046    22122    2      G$UHJIT.ASDT_MCL.WINDOW1.V = '1'B;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:269  

  22122   1 0011C2  EC80 0000 0000  xsym                 LDB,B6   G$UHJIT$
          1 0011C5  8946 006E                            LBT,'8000'X       110,B6
          1 0011C7       8000

     2047    22123    2      G$UHJIT.ASDT_MCL.WINDOW1.SIZE = 511;

  22123   1 0011C8  8946 006F                            LBT,'01FF'X       111,B6
  22123   1 0011CA       01FF

     2048    22124    2      G$UHJIT.ASDT_MCL.WINDOW1.BASE = PAGENUM;

  22124   1 0011CB  DCC7 0052                            LDB,B5   @PAGENUM,AUTO
          1 0011CD  E805                                 LDR,R6   ,B5
          1 0011CE  EAC6 006E                            SRM,R6,'7FFF'X    110,B6
          1 0011D0       7FFF

     2049    22125    2      CALL GHH$ASD (G$WINDOW1$,G$UHJIT.ASDT_MCL.WINDOW1);

  22125   1 0011D1  CBC6 006E                            LAB,B4   110,B6
          1 0011D3  CFC7 0058                            STB,B4   @PAGENUM+6,AUTO
          1 0011D5  BB80 0000 0000  xsym                 LAB,B3   G$WINDOW1$
          1 0011D8  BFC7 0056                            STB,B3   @PAGENUM+4,AUTO
          1 0011DA  BBC7 0056                            LAB,B3   @PAGENUM+4,AUTO
          1 0011DC  CBF0 0200                            LAB,B4   512,IMO
          1 0011DE  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 0011E1       0001                            DC       s:22127,PREL

     2050    22126
     2051    22127    2      RETURN;

  22127   1 0011E2  ECC7 0050                            LDB,B6   SAVE_SZ+2,AUTO
          1 0011E4  C3C6 0001                            LNJ,B4   1,B6

     2052    22128
     2053    22129    2   END MAP;
     2054    22130
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:270  
     2055    22131        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:271  
     2056    22132        /*I* NAME: LOCK_GATE
     2057    22133
     2058    22134             PURPOSE: To save lots of memory by only using the %LOCK macro once.
     2059    22135        */
     2060    22136
     2061    22137    1   LOCK_GATE: PROC;

  22137   1 0011E6  EFC7 0038            LOCK_GATE       STB,B6   GET_TYPE+2,AUTO

     2062    22138             %LOCK (G=GM_MEATLOCK);

  22143   1 0011E8  BB80 0000 0006  02                   LAB,B3   +6
          1 0011EB  CBF0 0100                            LAB,B4   256,IMO
          1 0011ED  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 0011F0       0001                            DC       s:22145,PREL

     2063    22145    2      RETURN;

  22145   1 0011F1  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 0011F3  C3C6 0001                            LNJ,B4   1,B6

     2064    22146
     2065    22147    2   UNLOCK_GATE: ENTRY;

  22147   1 0011F5  EFC7 0038            UNLOCK_GATE     STB,B6   GET_TYPE+2,AUTO

     2066    22148           %UNLOCK (G=GM_MEATLOCK);

  22153   1 0011F7  BB80 0000 0006  02                   LAB,B3   +6
          1 0011FA  CBF0 0100                            LAB,B4   256,IMO
          1 0011FC  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0011FF       0001                            DC       s:22155,PREL

     2067    22155    2      RETURN;

  22155   1 001200  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 001202  C3C6 0001                            LNJ,B4   1,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:272  

     2068    22156
     2069    22157    2   END LOCK_GATE;
     2070    22158
     2071    22159        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:273  
     2072    22160        /*I* NAME: CHKPPT
     2073    22161              PURPOSE:
     2074    22162                 To do consistency checks on GM_PPUT and screech if error.
     2075    22163              DESCRIPTION:
     2076    22164                 Start at lowest extent in PPUT and check the first, last and
     2077    22165                 size fields of each extent.
     2078    22166
     2079    22167        */
     2080    22168
     2081    22169    1   CHKPPT: PROC;

  22169   1 001204  EFC7 0038            CHKPPT          STB,B6   GET_TYPE+2,AUTO

     2082    22170
     2083    22171    2   DCL I UBIN;
     2084    22172    2   DCL J UBIN;
     2085    22173    2   DCL INUSE UBIN;
     2086    22174    2   DCL FREE UBIN;
     2087    22175    2   DCL USEFLG BIT(1) ALIGNED;
     2088    22176    2   DCL SHUF_FLG BIT(1) ALIGNED;
     2089    22177    2   DCL CURR$ PTR;
     2090    22178
     2091    22179    2      IF GM_CHK_PPUT ~= 0

  22179   1 001206  E800 0000 0000  xsym                 LDR,R6   GM_CHK_PPUT
          1 001209  6901 0109                            BEZ,R6   s:22240,PREL

     2092    22180    3      THEN DO;

     2093    22181    3           INUSE = 0;

  22181   1 00120B  8747 003C                            CL       INUSE,AUTO

     2094    22182    3           FREE  = 0;

  22182   1 00120D  8747 003D                            CL       FREE,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:274  
     2095    22183    3           USEFLG  = '1'B;

  22183   1 00120F  8947 003E                            LBT,'8000'X       USEFLG,AUTO
  22183   1 001211       8000

     2096    22184
     2097    22185    3           I = GM_MEM_LOW;

  22185   1 001212  D800 0000 0000  xsym                 LDR,R5   GM_MEM_LOW
          1 001215  DF47 003A                            STR,R5   I,AUTO

     2098    22186    4           DO WHILE I <= GM_MEM_HI;

  22186   1 001217  D900 0000 0000  xsym                 CMR,R5   GM_MEM_HI
          1 00121A  0301 00DB                            BG       s:22235,PREL

     2099    22187    4                CURR$=ADDR(GM$PPUTA(I));

  22187   1 00121C  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 00121F  B847 003A                            LDR,R3   I,AUTO
          1 001221  3001                                 SOL,R3   1
          1 001222  DBB6                                 LAB,B5   ,B6,R3
          1 001223  DFC7 0040                            STB,B5   CURR$,AUTO

     2100    22188    4                IF NOT CURR$->GM$PPUT.C.FIRSTP

  22188   1 001225  8285                                 LB,'0080'X        ,B5
  22188   1 001226       0080
          1 001227  0501 0004                            BBT      s:22191,PREL

     2101    22189    4                THEN CALL PPUT_SCREECH;

  22189   1 001229  E3C0 00ED                            LNJ,B6   s:0,PREL
          1 00122B       0001                            DC       s:22191,PREL

     2102    22190
     2103    22191    4                J=CURR$->GM$PPUT.SIZE;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:275  

  22191   1 00122C  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 00122E  E846 0001                            LDR,R6   1,B6
          1 001230  EF47 003B                            STR,R6   J,AUTO

     2104    22192    4                IF J=0 THEN CALL PPUT_SCREECH;

  22192   1 001232  6981 0004                            BNEZ,R6  s:22194,PREL

  22192   1 001234  E3C0 00E2                            LNJ,B6   s:0,PREL
          1 001236       0001                            DC       s:22194,PREL

     2105    22193
     2106    22194    4                IF J=1 AND NOT(CURR$->GM$PPUT.C.LASTP)

  22194   1 001237  E847 003B                            LDR,R6   J,AUTO
          1 001239  6D01                                 CMV,R6   1
          1 00123A  0981 000A                            BNE      s:22197,PREL
          1 00123C  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 00123E  8286                                 LB,'0040'X        ,B6
          1 00123F       0040
          1 001240  0501 0004                            BBT      s:22197,PREL

     2107    22195    4                THEN CALL PPUT_SCREECH;

  22195   1 001242  E3C0 00D4                            LNJ,B6   s:0,PREL
          1 001244       0001                            DC       s:22197,PREL

     2108    22196
     2109    22197    4                IF CURR$->GM$PPUT.C.LASTP AND J~=1

  22197   1 001245  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 001247  8286                                 LB,'0040'X        ,B6
          1 001248       0040
          1 001249  0581 0009                            BBF      s:22200,PREL
          1 00124B  E847 003B                            LDR,R6   J,AUTO
          1 00124D  6D01                                 CMV,R6   1
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:276  
          1 00124E  0901 0004                            BE       s:22200,PREL

     2110    22198    4                THEN CALL PPUT_SCREECH;

  22198   1 001250  E3C0 00C6                            LNJ,B6   s:0,PREL
          1 001252       0001                            DC       s:22200,PREL

     2111    22199
     2112    22200    4                IF NOT USEFLG AND NOT(CURR$->GM$PPUT.C.INUSE)

  22200   1 001253  89C7 003E                            CMZ      USEFLG,AUTO
          1 001255  0801 000A                            BAL      s:22203,PREL
          1 001257  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 001259  8286                                 LB,'0020'X        ,B6
          1 00125A       0020
          1 00125B  0501 0004                            BBT      s:22203,PREL

     2113    22201    4                THEN CALL PPUT_SCREECH;    /*should have been compacted*/

  22201   1 00125D  E3C0 00B9                            LNJ,B6   s:0,PREL
          1 00125F       0001                            DC       s:22203,PREL

     2114    22202
     2115    22203    4                SHUF_FLG = CURR$->GM$PPUT.C.SHUFFLABLE;

  22203   1 001260  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 001262  E806                                 LDR,R6   ,B6
          1 001263  600C                                 SOL,R6   12
          1 001264  E570 8000                            AND,R6   -32768,IMO
          1 001266  EF47 003F                            STR,R6   SHUF_FLG,AUTO

     2116    22204    4                USEFLG = CURR$->GM$PPUT.C.INUSE;

  22204   1 001268  D806                                 LDR,R5   ,B6
          1 001269  500A                                 SOL,R5   10
          1 00126A  D570 8000                            AND,R5   -32768,IMO
          1 00126C  DF47 003E                            STR,R5   USEFLG,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:277  

     2117    22205    4                IF USEFLG

  22205   1 00126E  89C7 003E                            CMZ      USEFLG,AUTO
          1 001270  0881 000A                            BAGE     s:22211,PREL

     2118    22206    5                THEN DO;

     2119    22207    5                     IF CURR$->GM$PPUT.OWNER > G_MUAIS

  22207   1 001272  C286                                 LLH,R4   ,B6
          1 001273  C900 0000 0000  xsym                 CMR,R4   G_MUAIS
          1 001276  0381 0004                            BLE      s:22211,PREL

     2120    22208    5                     THEN CALL PPUT_SCREECH;

  22208   1 001278  E3C0 009E                            LNJ,B6   s:0,PREL
          1 00127A       0001                            DC       s:22211,PREL

     2121    22209    5                     END;

     2122    22210
     2123    22211    4                I=I+J-1;

  22211   1 00127B  E847 003A                            LDR,R6   I,AUTO
          1 00127D  EA47 003B                            ADD,R6   J,AUTO
          1 00127F  6EFF                                 ADV,R6   -1
          1 001280  EF47 003A                            STR,R6   I,AUTO

     2124    22212    4                CURR$=ADDR(GM$PPUTA(I));

  22212   1 001282  EC80 0000 0000  xsym                 LDB,B6   G$PPUT$
          1 001285  B856                                 LDR,R3   R6
          1 001286  3001                                 SOL,R3   1
          1 001287  DBB6                                 LAB,B5   ,B6,R3
          1 001288  DFC7 0040                            STB,B5   CURR$,AUTO

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:278  
     2125    22213
     2126    22214    4                IF NOT CURR$->GM$PPUT.C.LASTP

  22214   1 00128A  8285                                 LB,'0040'X        ,B5
  22214   1 00128B       0040
          1 00128C  0581 0007                            BBF      s:22216,PREL
          1 00128E  D845 0001                            LDR,R5   1,B5
          1 001290  D947 003B                            CMR,R5   J,AUTO
          1 001292  0901 0004                            BE       s:22218,PREL

     2127    22215    4                  OR CURR$->GM$PPUT.SIZE ~= J
     2128    22216    4                THEN CALL PPUT_SCREECH;

  22216   1 001294  E3C0 0082                            LNJ,B6   s:0,PREL
          1 001296       0001                            DC       s:22218,PREL

     2129    22217
     2130    22218    4                IF (CURR$->GM$PPUT.C.INUSE AND ~USEFLG)

  22218   1 001297  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 001299  8286                                 LB,'0020'X        ,B6
          1 00129A       0020
          1 00129B  0581 000C                            BBF      s:22221,PREL
          1 00129D  E847 003E                            LDR,R6   USEFLG,AUTO
          1 00129F  E570 8000                            AND,R6   -32768,IMO
          1 0012A1  E670 8000                            XOR,R6   -32768,IMO
          1 0012A3  6901 0004                            BEZ,R6   s:22221,PREL

     2131    22219    4                THEN CALL PPUT_SCREECH;

  22219   1 0012A5  E3C0 0071                            LNJ,B6   s:0,PREL
          1 0012A7       0001                            DC       s:22221,PREL

     2132    22220
     2133    22221    4                IF (USEFLG AND ~(CURR$->GM$PPUT.C.INUSE) )

  22221   1 0012A8  89C7 003E                            CMZ      USEFLG,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:279  
          1 0012AA  0881 000E                            BAGE     s:22224,PREL
          1 0012AC  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 0012AE  E806                                 LDR,R6   ,B6
          1 0012AF  600A                                 SOL,R6   10
          1 0012B0  E570 8000                            AND,R6   -32768,IMO
          1 0012B2  E670 8000                            XOR,R6   -32768,IMO
          1 0012B4  6901 0004                            BEZ,R6   s:22224,PREL

     2134    22222    4                THEN CALL PPUT_SCREECH;

  22222   1 0012B6  E3C0 0060                            LNJ,B6   s:0,PREL
          1 0012B8       0001                            DC       s:22224,PREL

     2135    22223
     2136    22224    4                IF (CURR$->GM$PPUT.C.SHUFFLABLE AND ~SHUF_FLG)

  22224   1 0012B9  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 0012BB  8286                                 LB,'0008'X        ,B6
          1 0012BC       0008
          1 0012BD  0581 000C                            BBF      s:22227,PREL
          1 0012BF  E847 003F                            LDR,R6   SHUF_FLG,AUTO
          1 0012C1  E570 8000                            AND,R6   -32768,IMO
          1 0012C3  E670 8000                            XOR,R6   -32768,IMO
          1 0012C5  6901 0004                            BEZ,R6   s:22227,PREL

     2137    22225    4                THEN CALL PPUT_SCREECH;

  22225   1 0012C7  E3C0 004F                            LNJ,B6   s:0,PREL
          1 0012C9       0001                            DC       s:22227,PREL

     2138    22226
     2139    22227    4                IF (SHUF_FLG AND ~(CURR$->GM$PPUT.C.SHUFFLABLE) )

  22227   1 0012CA  89C7 003F                            CMZ      SHUF_FLG,AUTO
          1 0012CC  0881 000E                            BAGE     s:22230,PREL
          1 0012CE  ECC7 0040                            LDB,B6   CURR$,AUTO
          1 0012D0  E806                                 LDR,R6   ,B6
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:280  
          1 0012D1  600C                                 SOL,R6   12
          1 0012D2  E570 8000                            AND,R6   -32768,IMO
          1 0012D4  E670 8000                            XOR,R6   -32768,IMO
          1 0012D6  6901 0004                            BEZ,R6   s:22230,PREL

     2140    22228    4                THEN CALL PPUT_SCREECH;

  22228   1 0012D8  E3C0 003E                            LNJ,B6   s:0,PREL
          1 0012DA       0001                            DC       s:22230,PREL

     2141    22229
     2142    22230    4                IF USEFLG THEN INUSE = INUSE+J;

  22230   1 0012DB  89C7 003E                            CMZ      USEFLG,AUTO
          1 0012DD  0881 0009                            BAGE     s:22231,PREL

  22230   1 0012DF  E847 003C                            LDR,R6   INUSE,AUTO
          1 0012E1  EA47 003B                            ADD,R6   J,AUTO
          1 0012E3  EF47 003C                            STR,R6   INUSE,AUTO
          1 0012E5  0F81 0007                            B        s:22232,PREL

     2143    22231    4                ELSE FREE = FREE+J;

  22231   1 0012E7  E847 003D                            LDR,R6   FREE,AUTO
          1 0012E9  EA47 003B                            ADD,R6   J,AUTO
          1 0012EB  EF47 003D                            STR,R6   FREE,AUTO

     2144    22232    4                I=I+1;

  22232   1 0012ED  8AC7 003A                            INC      I,AUTO

     2145    22233    4                END/*do while*/;

  22233   1 0012EF  E847 003A                            LDR,R6   I,AUTO
          1 0012F1  E900 0000 0000  xsym                 CMR,R6   GM_MEM_HI
          1 0012F4  0381 FF27                            BLE      s:22187,PREL

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:281  
     2146    22234
     2147    22235    3           IF (FREE ~= GM_SHUF + GM_NSHF)

  22235   1 0012F6  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          1 0012F9  EA00 0000 0000  xsym                 ADD,R6   GM_NSHF
          1 0012FC  E947 003D                            CMR,R6   FREE,AUTO
          1 0012FE  0981 0011                            BNE      s:22237,PREL
          1 001300  E847 003C                            LDR,R6   INUSE,AUTO
          1 001302  EA47 003D                            ADD,R6   FREE,AUTO
          1 001304  D800 0000 0000  xsym                 LDR,R5   GM_MEM_HI
          1 001307  D200 0000 0000  xsym                 SUB,R5   GM_MEM_LOW
          1 00130A  5E01                                 ADV,R5   1
          1 00130B  5801 0004                            BLZ,R5   s:22237,PREL
          1 00130D  D956                                 CMR,R5   R6
          1 00130E  0901 0004                            BE       s:22240,PREL

     2148    22236    3             OR (INUSE+FREE ~= (GM_MEM_HI - GM_MEM_LOW +1) )
     2149    22237    3           THEN CALL PPUT_SCREECH;

  22237   1 001310  E3C0 0006                            LNJ,B6   s:0,PREL
          1 001312       0001                            DC       s:22240,PREL

     2150    22238    3           END/*do if check pput*/;

     2151    22239
     2152    22240    2      RETURN;

  22240   1 001313  ECC7 0038                            LDB,B6   GET_TYPE+2,AUTO
          1 001315  C3C6 0001                            LNJ,B4   1,B6

     2153    22241    2   END CHKPPT;
     2154    22242        %EJECT;
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:282  
     2155    22243        /*I* NAME: PPUT_SCREECH
     2156    22244             PURPOSE:
     2157    22245                 Provide a common routine to screech from MM for PPUT errors.
     2158    22246        */
     2159    22247
     2160    22248    1   PPUT_SCREECH: PROC;

  22248   1 001317  EFC7 0042            PPUT_SCREECH    STB,B6   CURRENT,AUTO

     2161    22249
     2162    22250    2      CALL SCREECH (PPUTERR);

  22250   1 001319  BB80 0000 0008  02                   LAB,B3   +8
          1 00131C  CBF0 0100                            LAB,B4   256,IMO
          1 00131E  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 001321       0001                            DC       s:22251,PREL

     2163    22251    2   END;

  22251   1 001322  ECC7 0042                            LDB,B6   CURRENT,AUTO
          1 001324  C3C6 0001                            LNJ,B4   1,B6

     2164    22252
     2165    22253        /*S*
     2166    22254                 SCREECH_CODE: GMA-S$MM10
     2167    22255                 TYPE: SCREECH
     2168    22256                 MESSAGE: Errors detected in PPUT.
     2169    22257        */
     2170    22258        /*I* NAME: MMSCREECH
     2171    22259             PURPOSE:
     2172    22260                 Provide a common routine to screech from MM when called with
     2173    22261                 bad parameters.
     2174    22262        */
     2175    22263
     2176    22264    1   MMSCREECH: PROC;

  22264   1 001326  EFC7 0054            MMSCREECH       STB,B6   @PAGENUM+2,AUTO
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:283  

     2177    22265
     2178    22266    2      CALL SCREECH (PARMERR);

  22266   1 001328  BB80 0000 000A  02                   LAB,B3   +10
          1 00132B  CBF0 0100                            LAB,B4   256,IMO
          1 00132D  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 001330       0001                            DC       s:22267,PREL

     2179    22267    2   END;

  22267   1 001331  ECC7 0054                            LDB,B6   @PAGENUM+2,AUTO
          1 001333  C3C6 0001                            LNJ,B4   1,B6
     2180    22268
     2181    22269        /*S*
     2182    22270                 SCREECH_CODE: GMA-S$MM48
     2183    22271                 TYPE: SCREECH
     2184    22272                 MESSAGE: An internal monitor call passed bad parameters.
     2185    22273        */
     2186    22274
     2187    22275    1   END GMA$LGP;
     2188    22276        %EOD;

PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:284  
--  Include file information  --

   KN_DATA_M.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   MM_SCODE_C.:E05TOU  is referenced.
   G_SFILE_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GMA$LGP.
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:285  

 **** Variables and constants ****

  ****  Section 000 RoData GMA$LGP

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w STRC(48)    r     1 PARMERR                    8-0-0/w STRC(48)    r     1 PPUTERR
     2-0-0/w STRC(48)    r     1 SHFLERR                    0-0-0/w STRC(32)    r     1 SHUF_DSCR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     C-0-0/w PTR         r     1 @EP                        4-0-0/w PTR         r     1 @PAGENO
    52-0-0/w PTR         r     1 @PAGENUM                   6-0-0/w PTR         r     1 @PAGES
     8-0-0/w PTR         r     1 @RP                        A-0-0/w PTR         r     1 @WP
    2F-0-0/w PTR         r     1 B$                        1E-0-0/w UBIN(16)    r     1 BLINK
     E-0-0/w UBIN(16)    r     1 CURR                       F-0-0/w PTR         r     1 CURR$
    40-0-0/w PTR         r     1 CURR$                     40-0-0/w UBIN(16)    r     1 CURRENT
    42-0-0/w UBIN(16)    r     1 CURRENT                   43-0-0/w PTR         r     1 CURRENT$
    17-0-0/w UBIN(16)    r     1 CURR_LAST                 41-0-0/w UBIN(16)    r     1 CURR_LAST
    45-0-0/w UBIN(16)    r     1 CURR_LAST                 18-0-0/w PTR         r     1 CURR_LAST$
    1A-0-0/w PTR         r     1 CURR_MEAT$                46-0-0/w UBIN(16)    r     1 CURR_SIZE
    3A-0-0/w STRC(32)    r     1 DESC                      45-0-0/w UBIN(16)    r     1 ENDPAGE
    *0-0-0/w BIT (2)     r     1 EP                        35-0-0/b STRC(16)    r     1 FLG
    1F-0-0/w UBIN(16)    r     1 FLINK                     3D-0-0/w UBIN(16)    r     1 FREE
    20-0-0/w STRC(32)    r     1 G$SEGDESC                 36-0-0/w UBIN(16)    r     1 GET_TYPE
    22-0-0/w UBIN(16)    r     1 I                         44-0-0/w UBIN(16)    r     1 I
    3A-0-0/w UBIN(16)    r     1 I                         3C-0-0/w UBIN(16)    r     1 INUSE
    3A-0-0/w UBIN(16)    r     1 IX                        3B-0-0/w UBIN(16)    r     1 J
    23-0-0/w UBIN(16)    r     1 L                         43-0-0/w UBIN(16)    r     1 LEFT
    47-0-0/w PTR         r     1 LEFT_LAST$                2A-0-0/w UBIN(16)    r     1 LIM
    24-0-0/w UBIN(16)    r     1 LOG                       2D-0-0/w PTR         r     1 M$
    1C-0-0/w PTR         r     1 MEAT$                     49-0-0/w UBIN(16)    r     1 NEW_SIZE
    11-0-0/w UBIN(16)    r     1 NEXT                      12-0-0/w PTR         r     1 NEXT$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:286  
    43-0-0/w UBIN(16)    r     1 NXTUSR                    44-0-0/w PTR         r     1 P$
    *0-0-0/w UBIN(16)    r     1 PAGENO                    *0-0-0/w UBIN(16)    r     1 PAGENUM
    *0-0-0/w UBIN(16)    r     1 PAGES                     25-0-0/w PTR         r     1 PPUT$
    14-0-0/w UBIN(16)    r     1 PREV                      15-0-0/w PTR         r     1 PREV$
    29-0-0/w UBIN(16)    r     1 REL_SHF_PG                28-0-0/w UBIN(16)    r     1 REL_SHF_SZ
    4A-0-0/w PTR         r     1 RIGHT$                    *0-0-0/w BIT (2)     r     1 RP
    4E-0-0/w UBIN(16)    r     1 SAVE_SZ                   *0-0-0/w UBIN(16)    r     1 SEGX
    3F-0-0/w BIT         r     1 SHUF_FLG                  31-0-0/w UBIN(32)    r     1 SHUF_START
    33-0-0/w UBIN(32)    r     1 SHUF_STOP                 27-0-0/w UBIN(16)    r     1 SIZE
    46-0-0/w UBIN(16)    r     1 SIZE_A                    3C-0-0/w UBIN(16)    r     1 SOURCE_SIZE
    2B-0-0/w PTR         r     1 U$                        3E-0-0/w BIT         r     1 USEFLG
    *0-0-0/w UBIN(16)    r     1 USERNO                    46-0-0/w UBIN(16)    r     1 USE_COUNT
    42-0-0/w UBIN(16)    r     1 USR                       *0-0-0/w BIT (2)     r     1 WP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$ASDT_USR$
     0-0-0/w PTR         r     1 G$BOBCAT$                  0-0-0/w PTR         r     1 G$BPAR2$
     0-0-0/w PTR         r     1 G$JIT$                     0-0-0/w PTR         r     1 G$MHJIT$
     0-0-0/w PTR         r     1 G$PPUT$                    0-0-0/w PTR         r     1 G$ROS$
     0-0-0/w PTR         r     1 G$UHJIT$                   0-0-0/w PTR         r     1 G$USRT$
     0-0-0/w PTR         r     1 G$WINDOW1$                 0-0-0/w UBIN(16)    r     1 GH_HQ(0:0)
     0-0-0/w UBIN(16)    r     1 GJ_SFILE_CURR#             0-0-0/w UBIN(16)    r     1 GM_ASHUF
     0-0-0/w UBIN(16)    r     1 GM_CHK_PPUT                0-0-0/w UBIN(16)    r     1 GM_HSHUF
     0-0-0/w STRC(48)    r     1 GM_MEATLOCK
     0-0-0/w STRC(48)    r     1 GM_MEAT_NSHF(0:15)
     0-0-0/w STRC(48)    r     1 GM_MEAT_SHUF(0:15)
     0-0-0/w UBIN(16)    r     1 GM_MEM_HI                  0-0-0/w UBIN(16)    r     1 GM_MEM_LOW
     0-0-0/w UBIN(16)    r     1 GM_NSHF                    0-0-0/w UBIN(16)    r     1 GM_NSHF_CURR
     0-0-0/w UBIN(16)    r     1 GM_NSHF_PEAK               0-0-0/w UBIN(16)    r     1 GM_SHUF
     0-0-0/w UBIN(16)    r     1 GM_SHUF_COUNT              0-0-0/w UBIN(16)    r     1 GM_SHUF_HI
     0-0-0/w UBIN(16)    r     1 GM_SHUF_MIN                0-0-0/w UBIN(16)    r     1 GM_SHUF_SEGS#
     0-0-0/w UBIN(32)    r     1 GM_SHUF_TIME               0-0-0/w UBIN(16)    r     1 GM_STEP
     0-0-0/w UBIN(16)    r     1 GM_XSHUF                   0-0-0/w UBIN(16)    r     1 G_MUAIS
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:287  
     0-0-0/w PTR         r     1 KN_IOP_END$                0-0-0/w PTR         r     1 KN_IOP_START$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT (2)     r     1 BIT2ALGN                   0-0-0/w STRC(4096)  r     1 B_HHJIT
     0-0-0/w UBIN(16)    r     1 G$AWORD(0:7)
     0-0-0/w STRC(1696)  r     1 G$BOBCAT                   0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(27232) r     1 G$MHJIT                    0-0-0/w STRC(12000) r     1 G$ROS
     0-0-0/w STRC(32)    r     1 G$SEGDESCA(0:0)
     0-0-0/w STRC(768)   r     1 G$SFILE                    0-0-0/w STRC(6480)  r     1 G$UHJIT
     0-0-0/w STRC(384)   r     1 G$USER(0:0)                0-0-0/w STRC(32)    r     1 GM$EXTENT
     0-0-0/w STRC(48)    r     1 GM$MEAT
     0-0-0/w STRC(48)    r     1 GM$MEATA(0:15)
     0-0-0/w STRC(32)    r     1 GM$PPUT                    0-0-0/w STRC(32)    r     1 GM$PPUTA(0:32767)
     0-0-0/w STRC(432)   r     1 KN$IOP                     0-0-0/c STRC(400)   r     1 KNH$HMI
     0-0-0/w STRC(32)    r     1 MCLMAP(0:31)               0-0-0/w STRC(32)    r     1 USEGDESC
     0-0-0/w STRC(32)    r     1 USRMAP(0:31)               0-0-0/w STRC(4096)  r     1 W_HHJIT


   Procedure GMA$LGP requires 4917 words for executable code.
   Procedure GMA$LGP requires 90 words of local(AUTO) storage.
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:288  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:289  
          MINI XREF LISTING

ADJ_PP
     21081**PROC    20482--CALL    20539--CALL    20896--CALL    21019--CALL
ALLOCATE
     20675**PROC    20277--CALL    20286--CALL    20363--CALL    20371--CALL    20519--CALL
ALLOCATE_CMN IN PROCEDURE ALLOCATE
     20684**LABEL   20681--GOTO
B$
     19862**DCL     21219<<ASSIGN  21220>>IF      21221>>ASSIGN  21222<<ASSIGN  21223>>IF      21224>>ASSIGN
BIT2ALGN
     19813**DCL     21851>>ASSIGN
BLINK
     19828**DCL     20690<<ASSIGN  20704<<ASSIGN  21618<<ASSIGN  21628>>IF      21630>>IF      21630>>IF
     21640>>IF      21643<>CALL    21648>>ASSIGN  21651>>ASSIGN
B_HHJIT.ASDT_MCL
     18094**DCL     21222--ASSIGN
B_HHJIT.ASDT_USR
     17400**DCL     21219--ASSIGN
B_HHJIT.ISA_HND
     18809**DCL     19104--REDEF
B_HHJIT.ISA_HND.P$$
     18884**DCL     18884--REDEF
B_HHJIT.TSA_HND.ISA.P$$
     19293**DCL     19293--REDEF
B_HHJIT.TSA_HND.P$$
     19164**DCL     19164--REDEF   19165--REDEF
CHECK_HJITS IN PROCEDURE ADJ_PP
     21120**LABEL   21123--GOTO
CHECK_IOPS IN PROCEDURE ADJ_PP
     21147**LABEL   21117--GOTO    21150--GOTO
CHECK_USRS IN PROCEDURE ADJ_PP
     21188**LABEL   21118--GOTO    21143--GOTO
CHKPPT
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:290  
     22169**PROC    20526--CALL    20603--CALL    21276--CALL    21350--CALL
CHKPPT_EXIT
     20601**LABEL   21689--GOTO    21710--GOTO    21834--GOTO    21855--GOTO    21937--GOTO    21998--GOTO
CURR
     19818**DCL     20293>>ASSIGN  20295>>ASSIGN  20390<<ASSIGN  20391>>ASSIGN  20399>>ASSIGN  20416>>ASSIGN
     20421>>ASSIGN  20434<<ASSIGN  20435>>ASSIGN  20442<<ASSIGN  20447<<ASSIGN  20450>>ASSIGN  20451>>ASSIGN
     20465>>ASSIGN  20466>>ASSIGN  20471<<ASSIGN  20471>>ASSIGN  20474>>ASSIGN  20475>>ASSIGN  20476<>CALL
     20484>>ASSIGN  20485>>ASSIGN  20487>>ASSIGN  20491>>ASSIGN  20493>>ASSIGN  20496<<ASSIGN  20497>>ASSIGN
     20499>>IF      20501>>ASSIGN  20501>>ASSIGN  20502>>ASSIGN  20516<<ASSIGN  20517>>ASSIGN  20535<>CALL
     20540>>ASSIGN  20541<<ASSIGN  20542>>ASSIGN  20549<<ASSIGN  20588<<ASSIGN  20589>>ASSIGN  20689<<ASSIGN
     20691>>DOWHILE 20692<>CALL    20694>>ASSIGN  20704>>ASSIGN  20705<<ASSIGN  20755>>ASSIGN  20771>>ASSIGN
     20772<<ASSIGN  20773>>ASSIGN  20774>>ASSIGN  20795<<ASSIGN  20884<<ASSIGN  20889>>ASSIGN  20897>>ASSIGN
     20898>>ASSIGN  20899<<ASSIGN  20899>>ASSIGN  20899>>ASSIGN  20900>>ASSIGN  20908>>ASSIGN  20915>>ASSIGN
     21002<<ASSIGN  21006>>IF      21009>>ASSIGN  21013>>ASSIGN  21017<<ASSIGN  21021>>ASSIGN  21023<<ASSIGN
     21023>>ASSIGN  21035>>ASSIGN  21039>>ASSIGN  21041<<ASSIGN  21107>>ASSIGN  21139>>ASSIGN  21142>>ASSIGN
     21149>>ASSIGN  21166>>ASSIGN  21170>>ASSIGN  21174>>ASSIGN  21199>>ASSIGN  21204>>ASSIGN  21213>>ASSIGN
     21221>>ASSIGN  21224>>ASSIGN  21256<<ASSIGN  21262>>IF      21262>>IF      21301<<ASSIGN  21302>>IF
     21302>>IF      21305>>IF      21309>>ASSIGN  21315<<ASSIGN  21315>>ASSIGN  21316>>ASSIGN  21321>>IF
     21328<<ASSIGN  21328>>ASSIGN  21335>>ASSIGN  21415>>IF      21429>>ASSIGN  21431<<ASSIGN  21431>>ASSIGN
     21438<<ASSIGN  21458>>ASSIGN  21463>>ASSIGN  21470>>IF      21470>>IF      21477<<ASSIGN  21482>>ASSIGN
     21483>>ASSIGN  21497<<ASSIGN  21532<<ASSIGN  21561<>CALL    21565>>ASSIGN  21572>>ASSIGN  21574>>ASSIGN
     21610>>ASSIGN  21617<>CALL    21706<<ASSIGN  21707>>ASSIGN  21730>>IF      21790<<ASSIGN  21791>>ASSIGN
     21803>>ASSIGN  21804>>IF      21816>>IF      21918<<ASSIGN  21920>>IF      21922>>IF      21927>>ASSIGN
     21964<<ASSIGN  21965>>ASSIGN  21970>>IF      21985>>IF
CURR$
     19819**DCL     20290>>ASSIGN  20291>>ASSIGN  20292>>ASSIGN  20293>>ASSIGN  20377<<ASSIGN  20378>>IF
     20378>>IF      20388>>ASSIGN  20391<<ASSIGN  20421<<ASSIGN  20422>>ASSIGN  20450<<ASSIGN  20453>>ASSIGN
     20455>>ASSIGN  20485<<ASSIGN  20486>>ASSIGN  20489<<ASSIGN  20490>>ASSIGN  20497<<ASSIGN  20503>>ASSIGN
     20505>>ASSIGN  20542<<ASSIGN  20544>>ASSIGN  20559<<ASSIGN  20561>>ASSIGN  20565>>ASSIGN  20569>>ASSIGN
     20575>>ASSIGN  20579>>ASSIGN  20589<<ASSIGN  20694<<ASSIGN  20696>>IF      20757>>ASSIGN  20758>>ASSIGN
     20760>>ASSIGN  20762>>ASSIGN  20764>>ASSIGN  20915<<ASSIGN  20917>>ASSIGN  20919>>ASSIGN  20920>>ASSIGN
     20922>>ASSIGN  21040<<ASSIGN  21042>>ASSIGN  21045>>ASSIGN  21047>>ASSIGN  21048>>ASSIGN  21257<<ASSIGN
     21258>>ASSIGN  21265>>IF      21265>>IF      21265>>IF      21269>>IF      21309<<ASSIGN  21314>>ASSIGN
     21316<<ASSIGN  21317>>ASSIGN  21318>>ASSIGN  21319>>ASSIGN  21322>>ASSIGN  21323>>ASSIGN  21326>>ASSIGN
     21329<<ASSIGN  21329>>ASSIGN  21330>>ASSIGN  21331>>ASSIGN  21333>>ASSIGN  21334>>ASSIGN  21400>>ASSIGN
     21422>>ASSIGN  21430>>ASSIGN  21439<<ASSIGN  21440>>ASSIGN  21442>>ASSIGN  21450>>ASSIGN  21452>>ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:291  
     21459>>ASSIGN  21610<<ASSIGN  21613>>ASSIGN  21678<<ASSIGN  21679>>ASSIGN  21682>>IF      21685>>ASSIGN
     21686>>ASSIGN  21707<<ASSIGN  21724>>ASSIGN  21803<<ASSIGN  21804>>IF      21827>>ASSIGN  21828>>ASSIGN
     21927<<ASSIGN  21928>>IF      21929>>ASSIGN  21930>>ASSIGN  21931>>ASSIGN  21965<<ASSIGN  21966>>ASSIGN
     21979>>ASSIGN
CURR$ IN PROCEDURE CHKPPT
     22177**DCL     22187<<ASSIGN  22188>>IF      22191>>ASSIGN  22194>>IF      22197>>IF      22200>>IF
     22203>>ASSIGN  22204>>ASSIGN  22207>>IF      22212<<ASSIGN  22214>>IF      22214>>IF      22218>>IF
     22221>>IF      22224>>IF      22227>>IF
CURRENT IN PROCEDURE DEALLOCATE
     21392**DCL     21429<<ASSIGN  21438>>ASSIGN  21458<<ASSIGN  21477>>ASSIGN  21483<<ASSIGN  21532>>ASSIGN
CURRENT IN PROCEDURE GETIT
     20740**DCL     20771<<ASSIGN  20795>>ASSIGN
CURRENT$ IN PROCEDURE DEALLOCATE
     21393**DCL     21430<<ASSIGN  21439>>ASSIGN  21459<<ASSIGN  21460>>ASSIGN  21465>>ASSIGN  21472>>ASSIGN
     21480>>ASSIGN  21482<<ASSIGN  21516>>ASSIGN  21520>>ASSIGN  21525>>ASSIGN
CURR_LAST
     19824**DCL     20480<<ASSIGN  20488>>ASSIGN  20498>>ASSIGN  20499>>IF      20501>>ASSIGN  20502>>ASSIGN
     20502>>ASSIGN  21258<<ASSIGN  21259>>ASSIGN  21335<<ASSIGN  21336>>ASSIGN  21679<<ASSIGN  21680>>ASSIGN
CURR_LAST IN PROCEDURE DEALLOCATE
     21394**DCL     21463<<ASSIGN  21464>>ASSIGN  21489>>IF      21489>>IF      21497>>ASSIGN
CURR_LAST IN PROCEDURE GETIT
     20741**DCL     20755<<ASSIGN  20756>>ASSIGN  20772>>ASSIGN
CURR_LAST$
     19825**DCL     20293<<ASSIGN  20294>>ASSIGN  20561<<ASSIGN  20566>>ASSIGN  20570>>ASSIGN  20576>>ASSIGN
     20580>>ASSIGN  21259<<ASSIGN  21272>>ASSIGN  21440<<ASSIGN  21443>>ASSIGN  21452<<ASSIGN  21453>>ASSIGN
     21464<<ASSIGN  21466>>ASSIGN  21491>>ASSIGN  21506>>ASSIGN  21508<<ASSIGN  21508>>ASSIGN  21512>>ASSIGN
     21517>>ASSIGN  21521>>ASSIGN  21526>>ASSIGN  21680<<ASSIGN  21687>>ASSIGN
CURR_MEAT$
     19826**DCL     20246<<ASSIGN  20342<<ASSIGN  20348<<ASSIGN  20365>>IF      20375<<ASSIGN  20409<<ASSIGN
     20430>>IF      20573>>IF      20587<<ASSIGN  20641<<ASSIGN  20784>>IF      20799>>IF      21254<<ASSIGN
     21306<<ASSIGN  21307<<ASSIGN  21408>>IF      21446<<ASSIGN  21514>>IF      22015<<ASSIGN  22072>>ASSIGN
CURR_SIZE IN PROCEDURE DEALLOCATE
     21395**DCL     21400<<ASSIGN  21404>>ASSIGN  21405>>ASSIGN  21410>>ASSIGN  21413>>ASSIGN  21417>>ASSIGN
     21421>>ASSIGN  21422>>ASSIGN  21431>>ASSIGN  21440>>ASSIGN  21460<<ASSIGN  21462>>ASSIGN  21463>>ASSIGN
     21523>>IF
CVM1
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:292  
     21828**LABEL   21821--GOTO
DEALLOCATE
     21390**PROC    20507--CALL    20548--CALL    20590--CALL    21275--CALL    21344--CALL
DEALLOCATE_SHUF IN PROCEDURE DEALLOCATE
     21457**ENTRY   20924--CALL    21050--CALL
DESC IN PROCEDURE SHUF_DOWN
     20860**DCL     20890<<ASSIGN  20894<>CALL
DESC.BASE IN PROCEDURE SHUF_DOWN
     20864**DCL     20891<<ASSIGN
ENDPAGE IN PROCEDURE ADJ_PP
     21086**DCL     21090<<ASSIGN  21164>>IF      21168>>IF      21172>>IF      21202>>IF
EP
      3699**DCL        19--PROC    20340--ENTRY   20346--ENTRY   20420>>ASSIGN  20563>>IF
FINISH_GETPS
     20585**LABEL   20297--GOTO
FLG
     19865**DCL     20245<<ASSIGN  20353<<ASSIGN
FLG.BASE_LVL
     19871**DCL     21192<<ASSIGN  21200>>IF      21207<<ASSIGN
FLG.INT_LVL
     19870**DCL     20250<<ASSIGN  20261>>IF      20279>>IF
FLG.LOCATE_IO_FRAGMENT
     19869**DCL     20680<<ASSIGN  20684<<ASSIGN  20698>>IF
FLG.RE_EXTENDED
     19872**DCL     20531<<ASSIGN
FLG.SFILE_RLSD
     19868**DCL     20261>>IF      20271<<ASSIGN
FLG.SHUFFLED
     19866**DCL     20281<<ASSIGN  20367<<ASSIGN  20381>>IF      20382<<ASSIGN  20521>>IF      20523<<ASSIGN
     21623>>IF      21654>>IF
FLG.SPLIT_SHUF_SEG
     19867**DCL     20395>>IF      20396<<ASSIGN
FLINK
     19829**DCL     20693<<ASSIGN  20705>>ASSIGN  21619<<ASSIGN  21633>>IF      21635>>IF      21635>>IF
     21641>>ASSIGN  21644>>ASSIGN  21647>>IF      21650<>CALL
FREE IN PROCEDURE CHKPPT
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:293  
     22174**DCL     22182<<ASSIGN  22231<<ASSIGN  22231>>ASSIGN  22235>>IF      22235>>IF
G$ASDT_MCL$
     19885**DCL     20414>>CALL    20528>>CALL    21879>>ASSIGN
G$ASDT_USR$
     19884**DCL     20357>>ASSIGN  20530>>ASSIGN  21295>>ASSIGN  21816>>IF      21850>>ASSIGN  21873>>ASSIGN
     21920>>IF      21964>>ASSIGN  21970>>IF      21995>>ASSIGN
G$AWORD
     19812**DCL     21105>>IF      21107<<ASSIGN  21790>>ASSIGN  21916>>IF      21918>>ASSIGN
G$BOBCAT.SFILE#
     19621**DCL     21099>>DOINDEX
G$BOBCAT.SFILE$
     19624**DCL     21097>>ASSIGN
G$BOBCAT$
     19886**DCL     21097>>ASSIGN  21099>>DOINDEX
G$BPAR2$
     19887**DCL     17386--IMP-PTR 21217<>CALL    21219>>ASSIGN  21222>>ASSIGN  21737<>CALL    21738>>ASSIGN
G$JIT.CVM_REAL
     11049**DCL     21806<<ASSIGN  21814<<ASSIGN  21923<<ASSIGN
G$JIT.ERRLOG
     10989**DCL     10992--REDEF
G$JIT.JSUNIT
     10728**DCL     10729--REDEF
G$JIT.MCLS
     10727**DCL     10727--REDEF
G$JIT.MODE
     10716**DCL     20803>>IF      21402>>IF
G$JIT.PRIV.ACTIVE
     10859**DCL     21795>>IF
G$JIT.TMRZ
     10996**DCL     10997--REDEF
G$JIT.USER_EXTIME
     10720**DCL     10721--REDEF
G$JIT.USER_MEMTIME
     10723**DCL     10723--REDEF
G$JIT.USER_SVTIME
     10722**DCL     10722--REDEF
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:294  
G$JIT.USR#
     10717**DCL     20249>>IF      20422>>ASSIGN  21820>>ASSIGN  21828>>ASSIGN  21928>>IF      21931>>ASSIGN
     21978>>IF      21981>>DOUNTIL 21988>>IF
G$JIT$
     19893**DCL     10659--IMP-PTR 20249>>IF      20422>>ASSIGN  20803>>IF      21402>>IF      21795>>IF
     21806>>ASSIGN  21814>>ASSIGN  21820>>ASSIGN  21828>>ASSIGN  21923>>ASSIGN  21928>>IF      21931>>ASSIGN
     21978>>IF      21981>>DOUNTIL 21988>>IF
G$MHJIT.ASDT_MON.UMHJIT
      3930**DCL     21140<>CALL
G$MHJIT.ASDT_MON.UMHJIT.BASE
      3932**DCL     21139<<ASSIGN
G$MHJIT.INTCON.HHJIT
     10250**DCL     10250--REDEF   21216>>ASSIGN  21884>>IF
G$MHJIT.INTCON.HJIT_PG.BASE
     10250**DCL     21209>>IF      21212>>IF      21213<<ASSIGN  21886>>ASSIGN
G$MHJIT.INTCON.P$$
     10223**DCL     10223--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
      7168**DCL      7168--REDEF
G$MHJIT.ISA_DBINH.P$$
      8382**DCL      8382--REDEF
G$MHJIT.ISA_IDLE.P$$
      5263**DCL      5263--REDEF
G$MHJIT.ISA_LVL10.P$$
      8685**DCL      8685--REDEF
G$MHJIT.ISA_LVL11.P$$
      8988**DCL      8988--REDEF
G$MHJIT.ISA_LVL12.P$$
      9291**DCL      9291--REDEF
G$MHJIT.ISA_LVL5.P$$
      7471**DCL      7471--REDEF
G$MHJIT.ISA_OV.P$$
      6865**DCL      6865--REDEF
G$MHJIT.ISA_PFS.P$$
      6536**DCL      6536--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:295  
      9898**DCL      9898--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
      7775**DCL      7775--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
      8079**DCL      8079--REDEF
G$MHJIT.ISA_SCHD.P$$
      9594**DCL      9594--REDEF
G$MHJIT.ISA_WDOG.P$$
      6644**DCL      6644--REDEF
G$MHJIT.TSA_DB.ISA.P$$
      5866**DCL      5866--REDEF
G$MHJIT.TSA_DB.P$$
      5737**DCL      5737--REDEF    5738--REDEF
G$MHJIT.TSA_HND.ISA.P$$
     10444**DCL     10444--REDEF
G$MHJIT.TSA_HND.P$$
     10315**DCL     10315--REDEF   10316--REDEF
G$MHJIT.TSA_MON.ISA.P$$
      5478**DCL      5478--REDEF
G$MHJIT.TSA_MON.P$$
      5349**DCL      5349--REDEF    5350--REDEF
G$MHJIT.TSA_OV.ISA.P$$
      6254**DCL      6254--REDEF
G$MHJIT.TSA_OV.P$$
      6125**DCL      6125--REDEF    6126--REDEF
G$MHJIT$
     19888**DCL      3788--IMP-PTR 21139>>ASSIGN  21140>>CALL    21209>>IF      21212>>IF      21213>>ASSIGN
     21216>>ASSIGN  21884>>IF      21886>>ASSIGN
G$PPUT$
     19989**DCL     15171--IMP-PTR 20293>>ASSIGN  20377>>ASSIGN  20391>>ASSIGN  20421>>ASSIGN  20436>>ASSIGN
     20450>>ASSIGN  20451>>ASSIGN  20466>>ASSIGN  20466>>ASSIGN  20474>>ASSIGN  20475>>ASSIGN  20484>>ASSIGN
     20484>>ASSIGN  20485>>ASSIGN  20488>>ASSIGN  20488>>ASSIGN  20489>>ASSIGN  20491>>ASSIGN  20492>>ASSIGN
     20497>>ASSIGN  20498>>ASSIGN  20501>>ASSIGN  20502>>ASSIGN  20517>>ASSIGN  20542>>ASSIGN  20543>>ASSIGN
     20559>>ASSIGN  20589>>ASSIGN  20694>>ASSIGN  20756>>ASSIGN  20773>>ASSIGN  20774>>ASSIGN  20878>>ASSIGN
     20897>>ASSIGN  20898>>ASSIGN  20899>>ASSIGN  20900>>ASSIGN  20900>>ASSIGN  20905>>ASSIGN  20914>>ASSIGN
     20915>>ASSIGN  20995>>ASSIGN  21009>>ASSIGN  21021>>ASSIGN  21021>>ASSIGN  21032>>ASSIGN  21039>>ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:296  
     21040>>ASSIGN  21089>>ASSIGN  21257>>ASSIGN  21259>>ASSIGN  21309>>ASSIGN  21316>>ASSIGN  21336>>ASSIGN
     21464>>ASSIGN  21482>>ASSIGN  21512>>ASSIGN  21610>>ASSIGN  21678>>ASSIGN  21680>>ASSIGN  21707>>ASSIGN
     21803>>ASSIGN  21927>>ASSIGN  21965>>ASSIGN  22187>>ASSIGN  22212>>ASSIGN
G$ROS.AUTO_DS$
     11082**DCL     11083--REDEF
G$ROS.AUTO_T$
     11083**DCL     11083--REDEF
G$ROS.CP_ECCB.FLTFLG
     11697**DCL     11728--REDEF
G$ROS.DB_ECCB.FLTFLG
     11621**DCL     11652--REDEF
G$ROS.JIT.CVM_REAL
     11492**DCL     21738<<ASSIGN
G$ROS.JIT.ERRLOG
     11432**DCL     11435--REDEF
G$ROS.JIT.JSUNIT
     11171**DCL     11172--REDEF
G$ROS.JIT.MCLS
     11170**DCL     11170--REDEF
G$ROS.JIT.TMRZ
     11439**DCL     11440--REDEF
G$ROS.JIT.USER_EXTIME
     11163**DCL     11164--REDEF
G$ROS.JIT.USER_MEMTIME
     11166**DCL     11166--REDEF
G$ROS.JIT.USER_SVTIME
     11165**DCL     11165--REDEF
G$ROS.M$DEBUG.EOMCHAR
     11768**DCL     11768--REDEF   11769--REDEF
G$ROS.M$DEBUG.FLDID
     11767**DCL     11767--REDEF
G$ROS.M$DEBUG.RES
     11762**DCL     11763--REDEF
G$ROS.M$DO.EOMCHAR
     11973**DCL     11973--REDEF   11974--REDEF
G$ROS.M$DO.FLDID
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:297  
     11972**DCL     11972--REDEF
G$ROS.M$DO.RES
     11967**DCL     11968--REDEF
G$ROS.M$HOST.EOMCHAR
     11922**DCL     11922--REDEF   11923--REDEF
G$ROS.M$HOST.FLDID
     11921**DCL     11921--REDEF
G$ROS.M$HOST.RES
     11916**DCL     11917--REDEF
G$ROS.M$LM.EOMCHAR
     11819**DCL     11819--REDEF   11820--REDEF
G$ROS.M$LM.FLDID
     11818**DCL     11818--REDEF
G$ROS.M$LM.RES
     11813**DCL     11814--REDEF
G$ROS.M$ME.EOMCHAR
     11871**DCL     11871--REDEF   11872--REDEF
G$ROS.M$ME.FLDID
     11870**DCL     11870--REDEF
G$ROS.M$ME.RES
     11865**DCL     11866--REDEF
G$ROS.U_ECCB.FLTFLG
     11545**DCL     11576--REDEF
G$ROS$
     19891**DCL     21880<>CALL
G$SEGDESC
     19844**DCL     20357<<ASSIGN  20477<>CALL    20530<<ASSIGN  20537<>CALL    21295<<ASSIGN  21341<<ASSIGN
     21788<<ASSIGN  21850<<ASSIGN  21873>>ASSIGN  21879>>ASSIGN  21888>>ASSIGN  21890>>ASSIGN
G$SEGDESC.BASE
     19848**DCL     20416<<ASSIGN  20434>>ASSIGN  20447>>ASSIGN  20481>>ASSIGN  20493<<ASSIGN  20516>>ASSIGN
     20524>>ASSIGN  20538>>ASSIGN  20541>>ASSIGN  20545<<ASSIGN  20559>>ASSIGN  21301>>ASSIGN  21791<<ASSIGN
G$SEGDESC.EP
     19849**DCL     20420<<ASSIGN  21794<<ASSIGN
G$SEGDESC.RP
     19848**DCL     20418<<ASSIGN  21793<<ASSIGN  21851<<ASSIGN
G$SEGDESC.SIZE
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:298  
     19850**DCL     20417<<ASSIGN  20435>>ASSIGN  20448>>ASSIGN  20449<<ASSIGN  20474>>ASSIGN  20479>>ASSIGN
     20494<<ASSIGN  20524>>ASSIGN  20536>>ASSIGN  20546<<ASSIGN  20560>>ASSIGN  21296>>IF      21311>>IF
     21313>>ASSIGN  21337<<ASSIGN  21337>>ASSIGN  21792<<ASSIGN
G$SEGDESC.V
     19848**DCL     20361>>IF      20415<<ASSIGN  21296>>IF      21789<<ASSIGN
G$SEGDESC.WP
     19849**DCL     20419<<ASSIGN  21796<<ASSIGN  21797<<ASSIGN  21852<<ASSIGN
G$SEGDESCA
     12024**DCL     20357>>ASSIGN  20530>>ASSIGN  21295>>ASSIGN  21850>>ASSIGN  21873<<ASSIGN  21879<<ASSIGN
     21882--ASSIGN  21995<<ASSIGN
G$SEGDESCA.BASE
     12028**DCL     21220>>IF      21221<<ASSIGN  21223>>IF      21224<<ASSIGN  21816>>IF      21920>>IF
     21964>>ASSIGN  21970>>IF
G$SFILE
     19598**DCL     21100--ASSIGN
G$SFILE.INSTTIME
     19614**DCL     21101>>IF
G$SFILE.LCP6_FLGS
     19609**DCL     21116>>IF
G$SFILE.LIB_WDSZ_DATA
     19614**DCL     19615--REDEF
G$SFILE.PP_ROS
     19616**DCL     21105--IF      21107--ASSIGN
G$SFILE.PP_SEG1
     19616**DCL     21916--IF      21918--ASSIGN
G$SFILE.SEG_1ST_PROC
     19614**DCL     21109>>IF
G$SFILE.UC
     19613**DCL     21113>>IF
G$UHJIT.ASDT_MCL
     12756**DCL     21130--ASSIGN  21189--ASSIGN
G$UHJIT.ASDT_MCL.BPAR2
     13259**DCL     21010<<ASSIGN  21215<<ASSIGN  21217<>CALL    21735<<ASSIGN  21737<>CALL
G$UHJIT.ASDT_MCL.BPAR2.BASE
     13261**DCL     21011<<ASSIGN  21018>>ASSIGN  21216<<ASSIGN  21736<<ASSIGN
G$UHJIT.ASDT_MCL.ROS
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:299  
     12797**DCL     21880<>CALL
G$UHJIT.ASDT_MCL.UHJIT.BASE
     12887**DCL     20249>>IF      21137>>IF
G$UHJIT.ASDT_MCL.WINDOW1
     13303**DCL     20888<<ASSIGN  20892<>CALL    21012<<ASSIGN  22125<>CALL
G$UHJIT.ASDT_MCL.WINDOW1.BASE
     13305**DCL     20889<<ASSIGN  21013<<ASSIGN  21017>>ASSIGN  22124<<ASSIGN
G$UHJIT.ASDT_MCL.WINDOW1.SIZE
     13307**DCL     22123<<ASSIGN
G$UHJIT.ASDT_MCL.WINDOW1.V
     13305**DCL     22122<<ASSIGN
G$UHJIT.ASDT_USR
     12062**DCL     21092--ASSIGN  21723--ASSIGN  21963--ASSIGN
G$UHJIT.CNCTD_LVLS
     15003**DCL     21209>>IF      21884>>IF
G$UHJIT.ISA_USR
     13472**DCL     13767--REDEF
G$UHJIT.ISA_USR.P$$
     13547**DCL     13547--REDEF
G$UHJIT.SHRD_FLAG
     15003**DCL     21926<<ASSIGN  21997<<ASSIGN
G$UHJIT.SHRD_SEG
     15003**DCL     21200>>ASSIGN  21730>>IF      21733>>ASSIGN  21734<<ASSIGN  21818>>IF      21819<<ASSIGN
     21819>>ASSIGN  21820<<ASSIGN  21827<<ASSIGN  21930<<ASSIGN  21967>>ASSIGN  21970>>IF      21987>>ASSIGN
     21989<<ASSIGN  21996<<ASSIGN
G$UHJIT.TSA_CP.ISA.P$$
     14754**DCL     14754--REDEF
G$UHJIT.TSA_CP.P$$
     14625**DCL     14625--REDEF   14626--REDEF
G$UHJIT.TSA_DB.ISA.P$$
     14366**DCL     14366--REDEF
G$UHJIT.TSA_DB.P$$
     14237**DCL     14237--REDEF   14238--REDEF
G$UHJIT.TSA_RTT.P$$
     15000**DCL     15000--REDEF   15001--REDEF
G$UHJIT.TSA_USR.ISA.P$$
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:300  
     13956**DCL     13956--REDEF
G$UHJIT.TSA_USR.P$$
     13827**DCL     13827--REDEF   13828--REDEF
G$UHJIT$
     19889**DCL     12049--IMP-PTR 20249>>IF      20888>>ASSIGN  20889>>ASSIGN  20892>>CALL    21010>>ASSIGN
     21011>>ASSIGN  21012>>ASSIGN  21013>>ASSIGN  21017>>ASSIGN  21018>>ASSIGN  21137>>IF      21140<>CALL
     21215>>ASSIGN  21216>>ASSIGN  21217>>CALL    21735>>ASSIGN  21736>>ASSIGN  21737>>CALL    21818>>IF
     21819>>ASSIGN  21819>>ASSIGN  21820>>ASSIGN  21827>>ASSIGN  21880>>CALL    21884>>IF      21926>>ASSIGN
     21930>>ASSIGN  21967>>ASSIGN  21970>>IF      21996>>ASSIGN  21997>>ASSIGN  22122>>ASSIGN  22123>>ASSIGN
     22124>>ASSIGN  22125>>CALL
G$USER.HMI$
     15226**DCL     21146>>IF      21146>>IF      21149>>ASSIGN
G$USER.MISC
     15223**DCL     15223--REDEF
G$USER.UHJITPP
     15225**DCL     20249>>IF      21135>>IF      21137>>IF      21142<<ASSIGN  21193>>ASSIGN  21726>>ASSIGN
     21982>>ASSIGN
G$USER.US
     15223**DCL     21133>>IF
G$USRT$
     19894**DCL     15222--IMP-PTR 20249>>IF      21133>>IF      21135>>IF      21137>>IF      21142>>ASSIGN
     21146>>IF      21146>>IF      21149>>ASSIGN  21193>>ASSIGN  21726>>ASSIGN  21982>>ASSIGN
G$WINDOW1$
     19890**DCL     15020--IMP-PTR 15242--IMP-PTR 20693>>ASSIGN  20892<>CALL    21092>>ASSIGN  21130>>ASSIGN
     21189>>ASSIGN  21200>>ASSIGN  21209>>IF      21562>>ASSIGN  21566>>ASSIGN  21570>>ASSIGN  21572>>ASSIGN
     21618>>ASSIGN  21619>>ASSIGN  21644>>ASSIGN  21651>>ASSIGN  21723>>ASSIGN  21730>>IF      21733>>ASSIGN
     21734>>ASSIGN  21882>>ASSIGN  21890>>ASSIGN  21963>>ASSIGN  21987>>ASSIGN  21989>>ASSIGN  22125<>CALL
GET0
     20350**LABEL   20343--GOTO
GETIT
     20738**PROC    20400--CALL    20404--CALL    20444--CALL    20472--CALL
GETIT_COMM IN PROCEDURE GETIT
     20747**LABEL   20748--GOTO
GETIT_MAPPED IN PROCEDURE GETIT
     20750**ENTRY   20700--CALL
GET_PREV_4NSHF
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:301  
     20375**LABEL   20385--GOTO    20401--GOTO
GET_TYPE
     19877**DCL     20276<<ASSIGN  20423<<ASSIGN  20457<<ASSIGN  20509<<ASSIGN  20551<<ASSIGN
GHH$ASD
     20003**DCL-ENT 20892--CALL    21140--CALL    21217--CALL    21737--CALL    21880--CALL    22125--CALL
GHH$LOCK
        63**DCL-ENT 22143--CALL
GHH$UNLOCK
        63**DCL-ENT 22153--CALL
GHI$UTS
     20004**DCL-ENT 20870--CALL    20936--CALL    20992--CALL    21055--CALL
GHS$RUE
     20005**DCL-ENT 21356--CALL
GH_HQ
     19995**DCL     21355>>IF
GJS$REL_ALL
     20010**DCL-ENT 20272--CALL
GJ_SFILE_CURR#
     19996**DCL     21122>>IF
GM$EXTENT.BLINK
     15028**DCL     21562<<ASSIGN  21572<<ASSIGN  21618>>ASSIGN  21651<<ASSIGN
GM$EXTENT.FLINK
     15024**DCL     20693>>ASSIGN  21566<<ASSIGN  21570<<ASSIGN  21619>>ASSIGN  21644<<ASSIGN
GM$MEAT
     15047**DCL     20707--ASSIGN
GM$MEAT.COUNT
     15059**DCL     21575<<ASSIGN  21575>>ASSIGN  21624>>IF      21655<<ASSIGN  21655>>ASSIGN
GM$MEAT.HEAD
     15051**DCL     20689>>ASSIGN  21503>>IF      21563>>IF      21570>>ASSIGN  21571<>CALL    21574<<ASSIGN
     21641<<ASSIGN
GM$MEAT.TAIL
     15055**DCL     21565<<ASSIGN  21648<<ASSIGN
GM$MEATA
     15079**DCL     21435--ASSIGN  22072--ASSIGN
GM$PPUT
     15111**DCL     20561--ASSIGN  20897>>ASSIGN  21009>>ASSIGN  21329--ASSIGN  21422--ASSIGN  21440--ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:302  
     21452--ASSIGN  21472--ASSIGN  21491--ASSIGN  21508--ASSIGN  21512--ASSIGN
GM$PPUT.C.FIRSTP
     15127**DCL     20456<<ASSIGN  20490<<ASSIGN  20504<<ASSIGN  20505<<ASSIGN  20763<<ASSIGN  20764<<ASSIGN
     20776<<ASSIGN  20777<<ASSIGN  20916<<ASSIGN  20919<<ASSIGN  21044<<ASSIGN  21047<<ASSIGN  21265>>IF
     21326<<ASSIGN  21330<<ASSIGN  21480<<ASSIGN  21507<<ASSIGN  22188>>IF
GM$PPUT.C.INUSE
     15135**DCL     20378>>IF      20438>>IF      20467>>IF      20758<<ASSIGN  20759<<ASSIGN  20779<<ASSIGN
     20780<<ASSIGN  20880>>IF      20886>>IF      20999>>IF      21004>>IF      21265>>IF      21317<<ASSIGN
     21424>>IF      21465<<ASSIGN  21466<<ASSIGN  21473>>IF      21492>>IF      22200>>IF      22204>>ASSIGN
     22218>>IF      22221>>IF
GM$PPUT.C.LASTP
     15131**DCL     20455<<ASSIGN  20486<<ASSIGN  20503<<ASSIGN  20506<<ASSIGN  20762<<ASSIGN  20765<<ASSIGN
     20775<<ASSIGN  20778<<ASSIGN  20917<<ASSIGN  20918<<ASSIGN  21045<<ASSIGN  21046<<ASSIGN  21318<<ASSIGN
     21333<<ASSIGN  21334<<ASSIGN  21481<<ASSIGN  21506<<ASSIGN  22194>>IF      22197>>IF      22214>>IF
GM$PPUT.C.PP
     15147**DCL     20292<<ASSIGN  20565<<ASSIGN  20566<<ASSIGN  20569<<ASSIGN  20570<<ASSIGN
GM$PPUT.C.SHUFFLABLE
     15143**DCL     20291<<ASSIGN  20294<<ASSIGN  20575<<ASSIGN  20576<<ASSIGN  20579<<ASSIGN  20580<<ASSIGN
     20786<<ASSIGN  20787<<ASSIGN  20790<<ASSIGN  20791<<ASSIGN  20885>>DOWHILE 20920<<ASSIGN  20921<<ASSIGN
     21003>>DOWHILE 21048<<ASSIGN  21049<<ASSIGN  21269>>IF      21272<<ASSIGN  21322<<ASSIGN  21323<<ASSIGN
     21442<<ASSIGN  21443<<ASSIGN  21450<<ASSIGN  21453<<ASSIGN  21516<<ASSIGN  21517<<ASSIGN  21520<<ASSIGN
     21521<<ASSIGN  21686<<ASSIGN  21687<<ASSIGN  22203>>ASSIGN  22224>>IF      22227>>IF
GM$PPUT.OWNER
     15115**DCL     20290<<ASSIGN  20422<<ASSIGN  20544<<ASSIGN  20544>>ASSIGN  21091>>ASSIGN  21682>>IF
     21685<<ASSIGN  21724>>ASSIGN  21804>>IF      21827>>ASSIGN  21828<<ASSIGN  21928>>IF      21929<<ASSIGN
     21930>>ASSIGN  21931<<ASSIGN  21966>>ASSIGN  21979<<ASSIGN  22207>>IF
GM$PPUT.SIZE
     15152**DCL     20293>>ASSIGN  20378>>IF      20388>>ASSIGN  20438>>IF      20453<<ASSIGN  20454<<ASSIGN
     20467>>IF      20470>>ASSIGN  20696>>IF      20757>>ASSIGN  20760<<ASSIGN  20761<<ASSIGN  20781<<ASSIGN
     20782<<ASSIGN  20881>>ASSIGN  20893>>ASSIGN  20903>>ASSIGN  20922<<ASSIGN  20923<<ASSIGN  20997>>IF
     21000>>ASSIGN  21008>>ASSIGN  21027>>IF      21029>>ASSIGN  21042<<ASSIGN  21043<<ASSIGN  21090>>ASSIGN
     21258>>ASSIGN  21265>>IF      21314<<ASSIGN  21319<<ASSIGN  21331<<ASSIGN  21400>>ASSIGN  21426>>ASSIGN
     21427>>ASSIGN  21460>>ASSIGN  21475>>ASSIGN  21494>>ASSIGN  21525<<ASSIGN  21526<<ASSIGN  21613>>ASSIGN
     21679>>ASSIGN  22191>>ASSIGN  22214>>IF
GM$PPUTA
     15171**DCL     20293--ASSIGN  20377--ASSIGN  20391--ASSIGN  20421--ASSIGN  20436--ASSIGN  20450--ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:303  
     20451--ASSIGN  20466--ASSIGN  20484<<ASSIGN  20484>>ASSIGN  20485--ASSIGN  20488<<ASSIGN  20488>>ASSIGN
     20489--ASSIGN  20497--ASSIGN  20498--ASSIGN  20542--ASSIGN  20543--ASSIGN  20559--ASSIGN  20589--ASSIGN
     20694--ASSIGN  20756--ASSIGN  20773--ASSIGN  20774--ASSIGN  20878--ASSIGN  20897<<ASSIGN  20900<<ASSIGN
     20900>>ASSIGN  20905--ASSIGN  20914--ASSIGN  20915--ASSIGN  20995--ASSIGN  21009<<ASSIGN  21021<<ASSIGN
     21021>>ASSIGN  21032--ASSIGN  21039--ASSIGN  21040--ASSIGN  21089--ASSIGN  21257--ASSIGN  21259--ASSIGN
     21309--ASSIGN  21316--ASSIGN  21464--ASSIGN  21482--ASSIGN  21610--ASSIGN  21678--ASSIGN  21680--ASSIGN
     21707--ASSIGN  21803--ASSIGN  21927--ASSIGN  21965--ASSIGN  22187--ASSIGN  22212--ASSIGN
GM$PPUTA.SIZE
     15212**DCL     20466>>ASSIGN  20474<<ASSIGN  20475>>ASSIGN  20491<<ASSIGN  20492<<ASSIGN  20501<<ASSIGN
     20502<<ASSIGN  20517>>ASSIGN  20898>>ASSIGN  20899>>ASSIGN  21336<<ASSIGN
GMV$MOVESEG
     20007**DCL-ENT 20477--CALL    20537--CALL    20894--CALL
GMV$MOVEUP
     20008**DCL-ENT 21014--CALL
GM_ASHUF
     19991**DCL     20805<<ASSIGN  20805>>ASSIGN  21404<<ASSIGN  21404>>ASSIGN
GM_CHK_PPUT
     19994**DCL     22179>>IF
GM_HSHUF
     19992**DCL     20806<<ASSIGN  20806>>ASSIGN  21405<<ASSIGN  21405>>ASSIGN
GM_MEATLOCK
     19907**DCL     22143<>CALL    22153<>CALL
GM_MEAT_NSHF
     19960**DCL     20348--ASSIGN  20409--ASSIGN  20430--IF      20641--ASSIGN  21306--ASSIGN
GM_MEAT_SHUF
     19928**DCL     20246--ASSIGN  20342--ASSIGN  20365--IF      20375--ASSIGN  20573--IF      20587--ASSIGN
     20784--IF      20799--IF      20873<<ASSIGN  21254--ASSIGN  21307--ASSIGN  21408--IF      21434--ASSIGN
     21446--ASSIGN  21514--IF
GM_MEM_HI
     19978**DCL     21302>>IF      21489>>IF      21630>>IF      21635>>IF      22119>>IF      22186>>DOWHILE
     22235>>IF
GM_MEM_LOW
     19979**DCL     20876>>ASSIGN  21262>>IF      21302>>IF      21470>>IF      21630>>IF      21635>>IF
     21804>>IF      21922>>IF      22119>>IF      22185>>ASSIGN  22235>>IF
GM_NSHF
     19981**DCL     20813<<ASSIGN  20813>>ASSIGN  21417<<ASSIGN  21417>>ASSIGN  21427<<ASSIGN  21427>>ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:304  
     22235>>IF
GM_NSHF_CURR
     19987**DCL     20407<<ASSIGN  20407>>ASSIGN  20597>>IF      20598>>ASSIGN  20811<<ASSIGN  20811>>ASSIGN
     21413<<ASSIGN  21413>>ASSIGN
GM_NSHF_PEAK
     19986**DCL     20597>>IF      20598<<ASSIGN
GM_SHUF
     19980**DCL     20255>>IF      20256>>ASSIGN  20594>>IF      20595>>ASSIGN  20801<<ASSIGN  20801>>ASSIGN
     21353>>IF      21410<<ASSIGN  21410>>ASSIGN  21447<<ASSIGN  21447>>ASSIGN  22235>>IF
GM_SHUF_COUNT
     19983**DCL     20869<<ASSIGN  20869>>ASSIGN
GM_SHUF_HI
     19982**DCL     20282>>ASSIGN  20368>>ASSIGN  20377>>ASSIGN  20383>>ASSIGN  20390>>ASSIGN  20406<<ASSIGN
     20406>>ASSIGN  20438>>IF      20993>>ASSIGN  21262>>IF      21305>>IF      21321>>IF      21415>>IF
     21448<<ASSIGN  21448>>ASSIGN  21470>>IF      21489>>IF
GM_SHUF_MIN
     19985**DCL     20594>>IF      20595<<ASSIGN
GM_SHUF_SEGS#
     19984**DCL     20895<<ASSIGN  20895>>ASSIGN  21015<<ASSIGN  21015>>ASSIGN
GM_SHUF_TIME
     19988**DCL     20937<<ASSIGN  20937>>ASSIGN  21056<<ASSIGN  21056>>ASSIGN
GM_STEP
     19993**DCL     20255>>IF      20256>>ASSIGN  21353>>IF
GM_XSHUF
     19990**DCL     20289<<ASSIGN  20289>>ASSIGN  21271<<ASSIGN  21271>>ASSIGN  21688<<ASSIGN  21688>>ASSIGN
GUD$ASD
     20006**DCL-ENT 20414--CALL    20528--CALL
G_MUAIS
     19999**DCL     21132>>DOINDEX 22207>>IF
I
     19852**DCL     20256<<ASSIGN  20257<<ASSIGN  20259>>IF      20270<<ASSIGN  20270>>ASSIGN  20272<>CALL
     20872<<DOINDEX 20873>>ASSIGN  21729<<DOINDEX 21730>>IF      21730>>IF      21733>>ASSIGN  21734>>ASSIGN
     21738>>ASSIGN  21815<<DOINDEX 21816>>IF      21818>>IF      21819>>ASSIGN  21883<<DOINDEX 21884>>IF
     21884>>IF      21886>>ASSIGN  21915<<DOINDEX 21916>>IF      21918>>ASSIGN  21969<<DOINDEX 21970>>IF
     21970>>IF      21970>>IF      21976>>IF      21984<<DOINDEX 21985>>IF      21987>>ASSIGN  21989>>ASSIGN
I IN PROCEDURE ADJ_PP
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:305  
     21085**DCL     21099<<DOINDEX 21132<<DOINDEX 21133>>IF      21135>>IF      21142>>ASSIGN  21146>>IF
     21146>>IF      21149>>ASSIGN  21196<<DOINDEX 21197>>IF      21199>>ASSIGN  21200>>ASSIGN  21202>>IF
     21202>>IF      21204>>ASSIGN  21204>>ASSIGN  21208<<DOINDEX 21209>>IF      21209>>IF      21212>>IF
     21213>>ASSIGN  21216>>ASSIGN
I IN PROCEDURE CHKPPT
     22171**DCL     22185<<ASSIGN  22186>>DOWHILE 22187>>ASSIGN  22211<<ASSIGN  22211>>ASSIGN  22212>>ASSIGN
     22232<<ASSIGN  22232>>ASSIGN
INUSE IN PROCEDURE CHKPPT
     22173**DCL     22181<<ASSIGN  22230<<ASSIGN  22230>>ASSIGN  22235>>IF
IX IN PROCEDURE ALLOCATE
     20677**DCL     20688<<DOINDEX
J IN PROCEDURE CHKPPT
     22172**DCL     22191<<ASSIGN  22192>>IF      22194>>IF      22197>>IF      22211>>ASSIGN  22214>>IF
     22230>>ASSIGN  22231>>ASSIGN
KN$IOP
     19640**DCL     21176--ASSIGN
KN$IOP.ARS
     19696**DCL     19697--REDEF   19698--REDEF
KN$IOP.BUFSEGDES.BASE
     19750**DCL     21164>>IF      21164>>IF      21166<<ASSIGN  21166>>ASSIGN
KN$IOP.DCBSEGDES.BASE
     19794**DCL     21172>>IF      21172>>IF      21174<<ASSIGN  21174>>ASSIGN
KN$IOP.FLAGS.INUSE
     19706**DCL     21162>>IF
KN$IOP.KEYSEGDES.BASE
     19772**DCL     21168>>IF      21168>>IF      21170<<ASSIGN  21170>>ASSIGN
KN$IOP.LNK$
     19726**DCL     19727--REDEF
KNH$HMI.PP#
     19636**DCL     21146>>IF      21149<<ASSIGN
KN_IOP_END$
     19998**DCL     21161>>DOWHILE
KN_IOP_START$
     19997**DCL     21159>>ASSIGN
L
     19853**DCL     20448<<ASSIGN  20449>>ASSIGN  20451>>ASSIGN  20452<<ASSIGN  20452>>ASSIGN  20453>>ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:306  
     20454>>ASSIGN  20475<<ASSIGN  20477<>CALL    20536<<ASSIGN  20537<>CALL    20893<<ASSIGN  20894<>CALL
     21104<<DOINDEX 21105>>IF      21107>>ASSIGN  21109>>IF      21218<<DOINDEX 21220>>IF      21221>>ASSIGN
     21223>>IF      21224>>ASSIGN  21724<<ASSIGN  21725>>DOWHILE 21726>>ASSIGN  21728<<ASSIGN  21733<<ASSIGN
     21919<<DOINDEX 21920>>IF      21923>>ASSIGN  21926>>ASSIGN  21930>>ASSIGN  21966<<ASSIGN  21978>>IF
     21981>>DOUNTIL 21982>>ASSIGN  21987<<ASSIGN  21988>>IF
LEFT IN PROCEDURE GETIT
     20743**DCL     20757<<ASSIGN  20768>>IF      20770>>ASSIGN
LEFT_LAST$ IN PROCEDURE DEALLOCATE
     21396**DCL     21472<<ASSIGN  21473>>IF      21475>>ASSIGN  21481>>ASSIGN
LIM
     19859**DCL     20282<<ASSIGN  20368<<ASSIGN  20383<<ASSIGN  20524<<ASSIGN  20877>>DOWHILE 20885>>DOWHILE
     20912>>IF      20927>>IF      20929<<ASSIGN  20994>>DOWHILE 21003>>DOWHILE
LINK2HEAD
     21559**PROC    20794--CALL    21436--CALL    21533--CALL
LOCATE IN PROCEDURE ALLOCATE
     20683**ENTRY   20644--CALL
LOCK_GATE
     22137**PROC    20253--CALL    20356--CALL    20602--CALL    21260--CALL    21299--CALL    21349--CALL
     21681--CALL    21708--CALL    21802--CALL    21853--CALL    21914--CALL    21962--CALL
LOG
     19854**DCL     20688>>DOINDEX 21193<<ASSIGN  21195<>CALL    21435>>ASSIGN  21726<<ASSIGN  21727<>CALL
     21886<<ASSIGN  21887<>CALL    21982<<ASSIGN  21983<>CALL    22018>>ASSIGN  22044<<ASSIGN  22045<<ASSIGN
     22047<<ASSIGN  22048<<ASSIGN  22051<<ASSIGN  22052<<ASSIGN  22054<<ASSIGN  22055<<ASSIGN  22059<<ASSIGN
     22060<<ASSIGN  22062<<ASSIGN  22063<<ASSIGN  22066<<ASSIGN  22067<<ASSIGN  22069<<ASSIGN  22070<<ASSIGN
     22072>>ASSIGN
LOGBASE2
     22038**PROC    20687--CALL    20793--CALL    21478--CALL    21496--CALL    21531--CALL    21614--CALL
     22017--CALL
M$
     19861**DCL     19552--IMP-PTR 19598--IMP-PTR 19640--IMP-PTR 21097<<ASSIGN  21100<<ASSIGN  21100>>ASSIGN
     21101>>IF      21105>>IF      21107>>ASSIGN  21109>>IF      21113>>IF      21116>>IF      21130<<ASSIGN
     21159<<ASSIGN  21161>>DOWHILE 21162>>IF      21164>>IF      21164>>IF      21166>>ASSIGN  21166>>ASSIGN
     21168>>IF      21168>>IF      21170>>ASSIGN  21170>>ASSIGN  21172>>IF      21172>>IF      21174>>ASSIGN
     21174>>ASSIGN  21176<<ASSIGN  21176>>ASSIGN  21189<<ASSIGN  21202>>IF      21202>>IF      21204>>ASSIGN
     21204>>ASSIGN  21912<<ASSIGN  21916>>IF      21918>>ASSIGN
MAP
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:307  
     22115**PROC    20476--CALL    20535--CALL    20692--CALL    21195--CALL    21561--CALL    21571--CALL
     21617--CALL    21643--CALL    21650--CALL    21727--CALL    21887--CALL    21983--CALL    22096--CALL
MCLMAP.BASE
     19556**DCL     21202>>IF      21202>>IF      21204<<ASSIGN  21204>>ASSIGN
MEAT$
     19827**DCL     15047--IMP-PTR 20689>>ASSIGN  20707<<ASSIGN  20707>>ASSIGN  21434<<ASSIGN  21435<<ASSIGN
     21435>>ASSIGN  21503>>IF      21563>>IF      21565>>ASSIGN  21570>>ASSIGN  21571>>CALL    21574>>ASSIGN
     21575>>ASSIGN  21575>>ASSIGN  21624>>IF      21641>>ASSIGN  21648>>ASSIGN  21655>>ASSIGN  21655>>ASSIGN
     22072<<ASSIGN
MMSCREECH
     22264**PROC    20431--CALL    20912--CALL    20997--CALL    21006--CALL    21027--CALL    21263--CALL
     21267--CALL    21297--CALL    21303--CALL    21624--CALL    21631--CALL    21636--CALL    21683--CALL
     22120--CALL
NEW_SIZE IN PROCEDURE DEALLOCATE
     21397**DCL     21421<<ASSIGN  21426<<ASSIGN  21426>>ASSIGN  21447>>ASSIGN  21448>>ASSIGN  21451<<ASSIGN
     21451>>ASSIGN  21452>>ASSIGN  21462<<ASSIGN  21476<<ASSIGN  21476>>ASSIGN  21495<<ASSIGN  21495>>ASSIGN
     21523>>IF      21525>>ASSIGN  21526>>ASSIGN  21530>>ASSIGN
NEXT
     19820**DCL     20435<<ASSIGN  20436>>ASSIGN  20438>>IF      20442>>ASSIGN  20480>>ASSIGN  20481<<ASSIGN
     20538<<ASSIGN  20540<<ASSIGN  20543>>ASSIGN  20545>>ASSIGN  20549>>ASSIGN  20876<<ASSIGN  20877>>DOWHILE
     20878>>ASSIGN  20881<<ASSIGN  20881>>ASSIGN  20884>>ASSIGN  20885>>DOWHILE 20891>>ASSIGN  20898<<ASSIGN
     20898>>ASSIGN  20900>>ASSIGN  20903<<ASSIGN  20903>>ASSIGN  20905>>ASSIGN  20908>>ASSIGN  20912>>IF
     20914>>ASSIGN  20993<<ASSIGN  20994>>DOWHILE 20995>>ASSIGN  21000<<ASSIGN  21000>>ASSIGN  21002>>ASSIGN
     21003>>DOWHILE 21006>>IF      21011>>ASSIGN  21018<<ASSIGN  21021>>ASSIGN  21022<<ASSIGN  21022>>ASSIGN
     21029<<ASSIGN  21029>>ASSIGN  21032>>ASSIGN  21035>>ASSIGN  21040>>ASSIGN  21041>>ASSIGN  21089>>ASSIGN
     21090>>ASSIGN  21105>>IF      21135>>IF      21146>>IF      21164>>IF      21166>>ASSIGN  21168>>IF
     21170>>ASSIGN  21172>>IF      21174>>ASSIGN  21197>>IF      21202>>IF      21204>>ASSIGN  21212>>IF
     21220>>IF      21223>>IF      21967<<ASSIGN  21979>>ASSIGN  21989>>ASSIGN
NEXT$
     19821**DCL     20436<<ASSIGN  20438>>IF      20438>>IF      20543<<ASSIGN  20544>>ASSIGN  20878<<ASSIGN
     20880>>IF      20881>>ASSIGN  20885>>DOWHILE 20886>>IF      20893>>ASSIGN  20897>>ASSIGN  20903>>ASSIGN
     20905<<ASSIGN  20914<<ASSIGN  20916>>ASSIGN  20918>>ASSIGN  20921>>ASSIGN  20923>>ASSIGN  20995<<ASSIGN
     20997>>IF      20999>>IF      21000>>ASSIGN  21003>>DOWHILE 21004>>IF      21008>>ASSIGN  21009>>ASSIGN
     21027>>IF      21029>>ASSIGN  21032<<ASSIGN  21039<<ASSIGN  21043>>ASSIGN  21044>>ASSIGN  21046>>ASSIGN
     21049>>ASSIGN
NOGETPS
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:308  
     20263**LABEL   20286--CALLALT
NO_GETPS
     20265**LABEL   20272--CALLALT 20279--GOTO
NXTUSR IN PROCEDURE ADJ_PP
     21084**DCL     21188<<ASSIGN  21200<<ASSIGN  21229>>IF      21231>>ASSIGN
P$ IN PROCEDURE GETIT
     20744**DCL     20773<<ASSIGN  20775>>ASSIGN  20777>>ASSIGN  20779>>ASSIGN  20781>>ASSIGN  20786>>ASSIGN
     20790>>ASSIGN
PAGENO
      3691**DCL        19--PROC     3692--REDEF   20243--ENTRY   20295<<ASSIGN  20340--ENTRY   20346--ENTRY
     20639--ENTRY   20642>>ASSIGN  21252--ENTRY   21256>>ASSIGN  21257>>ASSIGN  21258>>ASSIGN  21294--ENTRY
     21676--ENTRY   21678>>ASSIGN  21679>>ASSIGN  21705--ENTRY   21706>>ASSIGN  21786--ENTRY   21849--ENTRY
     21910--ENTRY   21912--ASSIGN  21960--ENTRY   22013--ENTRY   22018<<ASSIGN  22093--ENTRY   22096<>CALL
PAGENUM IN PROCEDURE MAP
     22117**DCL     22115--PROC    22119>>IF      22119>>IF      22124>>ASSIGN
PAGES
      3694**DCL        19--PROC     3695--REDEF   20243--ENTRY   20247>>ASSIGN  20285>>ASSIGN  20340--ENTRY
     20346--ENTRY   20350>>ASSIGN  20370>>ASSIGN  20378>>IF      20393>>IF      20397>>ASSIGN  20443>>ASSIGN
     20479>>ASSIGN  20529>>ASSIGN  21252--ENTRY   21255>>ASSIGN  21294--ENTRY   21296>>IF      21311>>IF
     21313>>ASSIGN  21331>>ASSIGN  21332>>IF      21335>>ASSIGN  21336>>ASSIGN  21337>>ASSIGN  21676--ENTRY
     21786--ENTRY   21792>>ASSIGN  21849--ENTRY   21851--ASSIGN  22013--ENTRY   22016>>ASSIGN  22093--ENTRY
     22095>>ASSIGN
PARMERR
     20128**DCL     22266<>CALL
PPUT$
     19855**DCL     20451<<ASSIGN  20454>>ASSIGN  20456>>ASSIGN  20498<<ASSIGN  20504>>ASSIGN  20506>>ASSIGN
     20756<<ASSIGN  20759>>ASSIGN  20761>>ASSIGN  20763>>ASSIGN  20765>>ASSIGN  20774<<ASSIGN  20776>>ASSIGN
     20778>>ASSIGN  20780>>ASSIGN  20782>>ASSIGN  20787>>ASSIGN  20791>>ASSIGN
PPUTERR
     20190**DCL     22250<>CALL
PPUT_SCREECH
     22248**PROC    22189--CALL    22192--CALL    22195--CALL    22198--CALL    22201--CALL    22208--CALL
     22216--CALL    22219--CALL    22222--CALL    22225--CALL    22228--CALL    22237--CALL
PREV
     19822**DCL     20465<<ASSIGN  20466>>ASSIGN  20484>>ASSIGN  20487<<ASSIGN  20488>>ASSIGN  20489>>ASSIGN
     20492>>ASSIGN  20496>>ASSIGN  20927>>IF      20929>>ASSIGN  21512<<ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:309  
PREV$
     19823**DCL     20466<<ASSIGN  20467>>IF      20467>>IF      20470>>ASSIGN
RELCVM
     21722**PROC    21274--CALL    21340--CALL    21709--CALL
RELPGS_EXIT
     21338**LABEL   21277--GOTO
REL_SHF_PG
     19858**DCL     20399<<ASSIGN  20588>>ASSIGN
REL_SHF_SZ
     19857**DCL     20354<<ASSIGN  20398<<ASSIGN  20585>>IF
RE_XTND
     20434**LABEL   20532--GOTO
RIGHT$ IN PROCEDURE DEALLOCATE
     21398**DCL     21422<<ASSIGN  21424>>IF      21426>>ASSIGN  21427>>ASSIGN  21491<<ASSIGN  21492>>IF
     21494>>ASSIGN  21507>>ASSIGN
RP
      3697**DCL        19--PROC    20340--ENTRY   20346--ENTRY   20418>>ASSIGN  21786--ENTRY   21790--ASSIGN
     21849--ENTRY   21852>>ASSIGN
SAVE_SZ IN PROCEDURE UNLINK
     21608**DCL     21612<<ASSIGN  21615>>ASSIGN
SCREECH
     20009**DCL-ENT 20615--CALL    22250--CALL    22266--CALL
SEGX
      3692**DCL     20357>>ASSIGN  20530>>ASSIGN  21295>>ASSIGN  21806>>ASSIGN  21814>>ASSIGN  21819>>ASSIGN
     21820>>ASSIGN  21827>>ASSIGN  21850>>ASSIGN  21873>>ASSIGN  21877>>IF      21879>>ASSIGN  21882>>ASSIGN
     21889>>IF      21964>>ASSIGN  21967>>ASSIGN  21970>>IF      21995>>ASSIGN  21996>>ASSIGN  21997>>ASSIGN
SET_ASDTS
     21871**PROC    20583--CALL    21345--CALL    21832--CALL    21854--CALL
SHFLERR
     20066**DCL     20615<>CALL
SHFL_FAILED
     20614**PROC    20372--CALL    20381--CALL    20395--CALL    20521--CALL
SHUF_DOWN
     20844**PROC    20283--CALL    20369--CALL    20384--CALL    20525--CALL
SHUF_DSCR
     20029**DCL     20888>>ASSIGN  20890>>ASSIGN  21010>>ASSIGN  21012>>ASSIGN  21215>>ASSIGN  21735>>ASSIGN
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:310  
SHUF_FLG IN PROCEDURE CHKPPT
     22176**DCL     22203<<ASSIGN  22224>>IF      22227>>IF
SHUF_START
     19863**DCL     20870<>CALL    20937>>ASSIGN  20992<>CALL    21056>>ASSIGN
SHUF_STOP
     19864**DCL     20936<>CALL    20937>>ASSIGN  21055<>CALL    21056>>ASSIGN
SHUF_UP
     20964**PROC    20527--CALL
SIZE
     19856**DCL     20247<<ASSIGN  20259>>IF      20270>>ASSIGN  20285<<ASSIGN  20350<<ASSIGN  20351>>IF
     20370<<ASSIGN  20388<<ASSIGN  20390>>ASSIGN  20393>>IF      20397<<ASSIGN  20397>>ASSIGN  20398>>ASSIGN
     20406>>ASSIGN  20407>>ASSIGN  20417>>ASSIGN  20438>>IF      20443<<ASSIGN  20448>>ASSIGN  20467>>IF
     20470<<ASSIGN  20471>>ASSIGN  20479<<ASSIGN  20487>>ASSIGN  20491>>ASSIGN  20492>>ASSIGN  20494>>ASSIGN
     20517<<ASSIGN  20517>>ASSIGN  20529<<ASSIGN  20546>>ASSIGN  20560<<ASSIGN  20561>>ASSIGN  20642<<ASSIGN
     20696>>IF      20754>>ASSIGN  20755>>ASSIGN  20757>>ASSIGN  20760>>ASSIGN  20761>>ASSIGN  20770<<ASSIGN
     20774>>ASSIGN  20781>>ASSIGN  20782>>ASSIGN  20796<<ASSIGN  20801>>ASSIGN  20805>>ASSIGN  20806>>ASSIGN
     20811>>ASSIGN  20813>>ASSIGN  20908<<ASSIGN  20910>>IF      20922>>ASSIGN  20923>>ASSIGN  21035<<ASSIGN
     21037>>IF      21042>>ASSIGN  21043>>ASSIGN  21255<<ASSIGN  21265>>IF      21313<<ASSIGN  21314>>ASSIGN
     21315>>ASSIGN  21319>>ASSIGN  21325>>IF      21475<<ASSIGN  21476>>ASSIGN  21477>>ASSIGN  21494<<ASSIGN
     21495>>ASSIGN  21508>>ASSIGN  21530<<ASSIGN  21612>>ASSIGN  21613<<ASSIGN  21615<<ASSIGN  22016<<ASSIGN
     22040>>IF      22041>>IF      22042>>IF      22043>>IF      22046>>IF      22049>>IF      22050>>IF
     22053>>IF      22056>>IF      22057>>IF      22058>>IF      22061>>IF      22064>>IF      22065>>IF
     22068>>IF      22095<<ASSIGN
SIZE_A IN PROCEDURE GETIT
     20745**DCL     20754<<ASSIGN  20796>>ASSIGN
SOURCE_SIZE IN PROCEDURE SHUF_UP
     20988**DCL     21008<<ASSIGN  21014<>CALL
STOP_SHUF_TIME IN PROCEDURE SHUF_DOWN
     20936**LABEL   20930--GOTO
TRY_AGAIN
     20249**LABEL   20273--GOTO
U$
     19860**DCL     19530--IMP-PTR 19574--IMP-PTR 21089<<ASSIGN  21090>>ASSIGN  21091>>ASSIGN  21092<<ASSIGN
     21197>>IF      21199>>ASSIGN  21723<<ASSIGN  21730>>IF      21736>>ASSIGN  21882<<ASSIGN  21888>>ASSIGN
     21963<<ASSIGN  21985>>IF
UNLINK
PL6.E3A0      #001=GMA$LGP File=GMA$LGP.:E05TSI                                  TUE 07/29/97 22:05 Page:311  
     21606**PROC    20747--CALL    21432--CALL    21479--CALL    21504--CALL
UNLINK_MAPPED IN PROCEDURE UNLINK
     21621**ENTRY   20751--CALL
UNLOCK_GATE IN PROCEDURE LOCK_GATE
     22147**ENTRY   20264--CALL    20269--CALL    20601--CALL    20605--CALL    21348--CALL    21351--CALL
USEFLG IN PROCEDURE CHKPPT
     22175**DCL     22183<<ASSIGN  22200>>IF      22204<<ASSIGN  22205>>IF      22218>>IF      22221>>IF
     22230>>IF
USEGDESC
     19574**DCL     20414<>CALL    20528<>CALL    21888<<ASSIGN
USERNO
      3695**DCL     21685>>ASSIGN
USE_COUNT IN PROCEDURE ADJ_PP
     21087**DCL     21098<<ASSIGN  21103<<ASSIGN  21103>>ASSIGN  21122>>IF
USR IN PROCEDURE ADJ_PP
     21083**DCL     21091<<ASSIGN  21137>>IF      21191>>DOWHILE 21193>>ASSIGN  21229>>IF      21230<<ASSIGN
     21231<<ASSIGN
USRMAP.BASE
     19534**DCL     21197>>IF      21199<<ASSIGN  21730>>IF      21736>>ASSIGN  21985>>IF
WP
      3698**DCL        19--PROC    20340--ENTRY   20346--ENTRY   20419>>ASSIGN
W_HHJIT.ASDT_MCL.ROS
     15991**DCL     21890<<ASSIGN
W_HHJIT.ASDT_USR
     15256**DCL     21882--ASSIGN
W_HHJIT.ISA_HND
     16665**DCL     16960--REDEF
W_HHJIT.ISA_HND.P$$
     16740**DCL     16740--REDEF
W_HHJIT.TSA_HND.ISA.P$$
     17149**DCL     17149--REDEF
W_HHJIT.TSA_HND.P$$
     17020**DCL     17020--REDEF   17021--REDEF

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:312  
     2189        1        /*M* GMA$CHKSIZE - Check memory allocation against authorized limits */
     2190        2        /*T***********************************************************/
     2191        3        /*T*                                                         */
     2192        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2193        5        /*T*                                                         */
     2194        6        /*T***********************************************************/
     2195        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
     2196        8        /*D* NAME: GMA$CHKSIZE
     2197        9              CALL: CALL GMA$CHKSIZE (gm_chksz_params) ALTRET(label);
     2198       10              PARAMETERS:
     2199       11                      gm_chksz_params, from the macro in file GM_MACRO_M:
     2200       12
     2201       13                      size is the number pages to be added to the users
     2202       14                      current size.
     2203       15
     2204       16                      err is in VLP_ERRCODE format and will be set by CHKSIZE.
     2205       17
     2206       18                      chk is to be set if this is a call to check the user
     2207       19                      size; the pages will not be deducted for the account
     2208       20                      resource table.
     2209       21
     2210       22                      req_all is to be set if all requested pages must be
     2211       23                      available if any are to be allocated.  Ignored if
     2212       24                      chk is set.
     2213       25
     2214       26                      park is to be set if it is OK to reg the user for lack
     2215       27                      of memory.
     2216       28
     2217       29                      nshuf indicates if the number of pages is to be
     2218       30                      shufflable or not (I/O).  If nshuf is not present
     2219       31                      or is zero, type shufflable is assumed.  If nshuf
     2220       32                      is present and is not zero, non shufflable I/O type is
     2221       33                      assumed.
     2222       34              DESCRIPTION:
     2223       35                      The current size of the user is computed from data
     2224       36                      in the JIT and added to the size parameter to compare
     2225       37                      with the users maximum memory resource size.  If the
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:313  
     2226       38                      maximum size is exceeded, size is adjusted and an ALTRET
     2227       39                      return is taken.
     2228       40
     2229       41                      The ALTRET is taken if the user cannot fit into physical
     2230       42                      memory.
     2231       43                                                                           */
     2232       44
     2233       45
     2234       46        GMA$CHKSIZE: PROC (CHKSZ)  ALTRET;
     2235       47
     2236       48        %INCLUDE G_JIT_M;
     2237      313 S      %INCLUDE GU_LCP6_M;
     2238      314        %INCLUDE GM_MACRO_M;
     2239      796        %INCLUDE G$BOBCAT_M;
     2240      816        %INCLUDE GFR_DATA_M;
     2241      836        %INCLUDE GH_GATE_M;
     2242      877        %INCLUDE GH_SCHD_E;
     2243      973        %INCLUDE M_ERRORS_C;
     2244     1037        %INCLUDE MM_SCODE_C;
     2245     1084 S      %INCLUDE G_LCP6_E;
     2246     1085
     2247     1086        %GM_CHKSZ_PARAMS (FPTN=CHKSZ, STCLASS=);
     2248     1180
     2249     1181    1   DCL SIZE UBIN;                          /* request from CHKSZ.SIZE            */
     2250     1182    1   DCL USIZE UBIN;                         /* User accountable memory size       */
     2251     1183    1   DCL PSIZE UBIN;                         /* User real physical size            */
     2252     1184    1   DCL RSIZE UBIN;                         /* Requested additional pages         */
     2253     1185    1   DCL GM@SHUF UBIN;                       /* GM_SHUF - GM_STEP                  */
     2254     1186    1   DCL ACC UBIN;
     2255     1187    1   DCL MODE UBIN;
     2256     1188    1   DCL TABLE_UPDATED UBIN;
     2257     1189    1   DCL T$ PTR;
     2258     1190
     2259     1191    1   DCL GM_REG_4_MEM UBIN STATIC SYMDEF INIT(0);
     2260     1192
     2261     1193        %G$BOBCAT (STCLASS="BASED(G$BOBCAT$)");
     2262     1206        %GFR$ACCT (STCLASS="BASED(T$)");
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:314  
     2263     1219        %G$JIT (STCLASS="BASED(G$JIT$)");
     2264     1633        %G$JIT_E;
     2265     1695
     2266     1696    1   DCL G$JIT$ PTR SYMREF READONLY;
     2267     1697    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
     2268     1698    1   DCL GFR_CUR_MEM(0:4) UBIN SYMREF;
     2269     1699    1   DCL GFR_MAX_MEM(0:4) UBIN SYMREF;
     2270     1700    1   DCL GM_SHUF UBIN SYMREF;
     2271     1701    1   DCL GM_ASHUF UBIN SYMREF;
     2272     1702    1   DCL GM_STEP UBIN SYMREF;
     2273     1703
     2274     1704        %GATE (FPTN=GFR_RES_LOCK,STCLASS=SYMREF);
     2275     1723
     2276     1724    1   DCL GHS$REG ENTRY(2) ALTRET;
     2277     1725    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
     2278     1726    1   DCL GMA$LOCATE ENTRY(1) ALTRET;
     2279     1727    1   DCL SCREECH ENTRY(1);
     2280     1728
     2281     1729        %VLP_ERRCODE (FPTN=E$MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2282     1730              STCLASS=CONSTANT,ERR#=%E$MEMLIMIT);
     2283     1776        %VLP_ERRCODE (FPTN=E$BRKCTY,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2284     1777              STCLASS=CONSTANT,ERR#=%E$BRKCTY);
     2285     1823        %VLP_ERRCODE (FPTN=E$ACCT_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2286     1824              STCLASS=CONSTANT,ERR#=%E$ACCT_MEMLIMIT);
     2287     1870        %VLP_ERRCODE (FPTN=E$MODE_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2288     1871              STCLASS=CONSTANT,ERR#=%E$MODE_MEMLIMIT);
     2289     1917        %VLP_ERRCODE (FPTN=E$PHYS_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2290     1918              STCLASS=CONSTANT,ERR#=%E$PHYS_MEMLIMIT);
     2291     1964
     2292     1965        %VLP_SCODE (FPTN=GONE_NEGATIVE,ERR#=%S$MM39,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
     2293     1966                    FCG=GM,MID=A,MON='1'B);
     2294     2027        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:315  
     2295     2028
     2296     2029    1      SIZE = CHKSZ.SIZE;
     2297     2030    1      RSIZE = SIZE;                        /* remember requested size            */
     2298     2031    1      CHKSZ.ERR = '0'B;
     2299     2032    1      TABLE_UPDATED = 0;
     2300     2033
     2301     2034    1      IF GM_SHUF > GM_STEP
     2302     2035    1      THEN GM@SHUF = GM_SHUF - GM_STEP;
     2303     2036    1      ELSE GM@SHUF = 0;
     2304     2037
     2305     2038        /* Compute the user's current size.
     2306     2039           USIZE for logical limit checks.
     2307     2040           PSIZE for physical limit checks.
     2308     2041        */
     2309     2042    1      USIZE=G$JIT.PCD                      /* Static data                        */
     2310     2043    1        +G$JIT.PCDS                        /* Shuffable Data Segments            */
     2311     2044    1        +G$JIT.NSPC                        /* Non-shuffable Data Segments        */
     2312     2045    1        +G$JIT.PCL                         /* Unshared Library procedure*/
     2313     2046    1        +G$JIT.PCDDS                       /* Debugger data segment              */
     2314     2047    1        +G$JIT.PCC                         /* Context                            */
     2315     2048    1        +G$JIT.CQPC                        /* Circular Queue                     */
     2316     2049    1        +G$JIT.PSEUDOPGS                   /* HHJITs                             */
     2317     2050    1        +G$JIT.PCROS;                      /* Read Only Segment                  */
     2318     2051
     2319     2052        /*  First, make sure there is enough physical memory, if this is not step.
     2320     2053        */
     2321     2054    1      IF CHKSZ.FLGS.STEP = '1'B
     2322     2055    1      THEN GOTO SKIP_PSIZE_CHK;
     2323     2056
     2324     2057        /*  Handler pages are already taken out of GM_ASHUF.
     2325     2058        */
     2326     2059    1      IF G$JIT.MODE = %G_M_HANDLER#
     2327     2060    2      THEN DO;
     2328     2061    2           PSIZE = 0;
     2329     2062    2           END;
     2330     2063    2      ELSE DO;
     2331     2064    2           PSIZE = USIZE+G$JIT.PCP;        /* Procedure pages                    */
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:316  
     2332     2065    2           END;
     2333     2066
     2334     2067    1      IF CHKSZ.FLGS.NSHUF
     2335     2068    2      THEN DO;
     2336     2069    2           CALL GMA$LOCATE(SIZE) ALTRET(PSIZE_CHK);
     2337     2070    2           GOTO SKIP_PSIZE_CHK;
     2338     2071    2           END;
     2339     2072
     2340     2073    1   PSIZE_CHK: ;
     2341     2074    1      IF PSIZE + SIZE  > GM_ASHUF
     2342     2075    2      THEN DO;
     2343     2076    2           SIZE = GM_ASHUF - PSIZE;
     2344     2077    2           CHKSZ.ERR = E$PHYS_MEMLIMIT;
     2345     2078    2           END;
     2346     2079
     2347     2080        /*E* ERROR: GMA-E$PHYS_MEMLIMIT-0
     2348     2081              MESSAGE: Physical memory limit exceeded.
     2349     2082        */
     2350     2083
     2351     2084        /*  Check if there is currently enough around.  If not, try to
     2352     2085            free the memory by releasing pages from the shared file table.
     2353     2086        */
     2354     2087    1      IF SIZE > GM@SHUF
     2355     2088    2      THEN DO;
     2356     2089    2           PSIZE = SIZE - GM@SHUF;
     2357     2090    2           CALL GJS$REL_ALL(PSIZE);
     2358     2091
     2359     2092    2           IF GM_SHUF > GM_STEP
     2360     2093    2           THEN GM@SHUF = GM_SHUF - GM_STEP;
     2361     2094    2           ELSE GM@SHUF = 0;
     2362     2095    2           END;
     2363     2096
     2364     2097        /*  If not currently enough, but the user specified we are to get
     2365     2098            what we can without REGing him (REQ_ALL=NO and PARK=NO), give what
     2366     2099            we can.
     2367     2100        */
     2368     2101    1      IF SIZE > GM@SHUF
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:317  
     2369     2102    2      THEN DO;
     2370     2103    2           IF NOT CHKSZ.FLGS.REQ_ALL
     2371     2104    3           THEN DO;
     2372     2105    3                IF NOT CHKSZ.FLGS.PARK OR GM_REG_4_MEM=0
     2373     2106    4                THEN DO;
     2374     2107    4                     SIZE = GM@SHUF;
     2375     2108    4                     CHKSZ.ERR = E$PHYS_MEMLIMIT;
     2376     2109    4                     END;
     2377     2110    3                END;
     2378     2111    2           END;
     2379     2112
     2380     2113
     2381     2114        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:318  
     2382     2115        /*  Now, the system logical limit checks.
     2383     2116            If the user doesn't have MAXMEM priv on, check against the
     2384     2117            limit in the JIT.
     2385     2118        */
     2386     2119    1   SKIP_PSIZE_CHK: ;
     2387     2120    1      IF NOT G$JIT.MMFLGS.FREE_PPGS
     2388     2121    1      THEN USIZE=USIZE+G$JIT.PCP;
     2389     2122
     2390     2123    1      IF NOT (G$JIT.PRIV.ACTIVE & %G_PR_MAXMEM#)
     2391     2124    2      THEN DO;
     2392     2125    2           IF USIZE + SIZE > G$JIT.MAXMEM
     2393     2126    3           THEN DO;
     2394     2127    3                SIZE = G$JIT.MAXMEM - USIZE;
     2395     2128    3                CHKSZ.ERR = E$MEMLIMIT;
     2396     2129    3                END;
     2397     2130    2           END;
     2398     2131
     2399     2132        /*E* ERROR: GMA-E$MEMLIMIT-0
     2400     2133             MESSAGE: User memory limit exceeded.
     2401     2134        */
     2402     2135
     2403     2136        /*  Also check against the memory limit for this account,uname and
     2404     2137            the memory limit for this user mode.
     2405     2138        */
     2406     2139    1      IF G$JIT.GFR_ACCT ~= 0
     2407     2140    2      THEN DO;
     2408     2141    2           T$ = G$BOBCAT.ACCT_RES$;
     2409     2142    2           ACC = G$JIT.GFR_ACCT;
     2410     2143    2           MODE = G$JIT.MODE;
     2411     2144                %LOCK (G=GFR_RES_LOCK);
     2412     2151
     2413     2152    2           IF GFR$ACCT.CUR_MEM(ACC) + SIZE > GFR$ACCT.MAX_MEM(ACC)
     2414     2153    3           THEN DO;
     2415     2154    3                SIZE = GFR$ACCT.MAX_MEM(ACC) - GFR$ACCT.CUR_MEM(ACC);
     2416     2155    3                CHKSZ.ERR = E$ACCT_MEMLIMIT;
     2417     2156    3                END;
     2418     2157
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:319  
     2419     2158        /*E* ERROR: GMA-E$ACCT_MEMLIMIT-0
     2420     2159             MESSAGE: Account memory limit exceeded.
     2421     2160        */
     2422     2161
     2423     2162    2           IF GFR_CUR_MEM(MODE) + SIZE > GFR_MAX_MEM(MODE)
     2424     2163    3           THEN DO;
     2425     2164    3                SIZE = GFR_MAX_MEM(MODE) - GFR_CUR_MEM(MODE);
     2426     2165    3                CHKSZ.ERR = E$MODE_MEMLIMIT;
     2427     2166    3                END;
     2428     2167
     2429     2168        /*E* ERROR: GMA-E$MODE_MEMLIMIT-0
     2430     2169             MESSAGE: User Mode memory limit exceeded.
     2431     2170        */
     2432     2171
     2433     2172        /* If this is not a check_only call, the memory is removed from
     2434     2173           the account resource table.
     2435     2174        */
     2436     2175    2           IF NOT CHKSZ.FLGS.CHK_ONLY
     2437     2176    3           THEN DO;
     2438     2177    3                IF NOT(CHKSZ.FLGS.REQ_ALL AND (SIZE ~= RSIZE) )
     2439     2178    4                THEN DO;
     2440     2179    4                     GFR$ACCT.CUR_MEM(ACC) = GFR$ACCT.CUR_MEM(ACC) + SIZE;
     2441     2180    4                     GFR_CUR_MEM(MODE) = GFR_CUR_MEM(MODE) + SIZE;
     2442     2181    4                     TABLE_UPDATED = 1;
     2443     2182    4                     END;
     2444     2183    3                END/*do if not chk_only*/;
     2445     2184                %UNLOCK (G=GFR_RES_LOCK);
     2446     2191
     2447     2192    2           END/*do if JIT.GFR_ACCR ~=0*/;
     2448     2193
     2449     2194        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:320  
     2450     2195    1      IF NOT CHKSZ.FLGS.CHK_ONLY
     2451     2196    2      THEN DO;
     2452     2197    2           IF NOT CHKSZ.FLGS.STEP
     2453     2198    3           THEN DO;
     2454     2199    3                IF NOT(CHKSZ.FLGS.REQ_ALL AND (SIZE ~= RSIZE) )
     2455     2200    4                THEN DO;
     2456     2201
     2457     2202        /*  Check if there are enough free pages around.  If not, REG this
     2458     2203            guy until some become available.
     2459     2204        */
     2460     2205    5                     DO WHILE ( SIZE > GM@SHUF );
     2461     2206
     2462     2207    5                          IF NOT CHKSZ.FLGS.PARK
     2463     2208    6                          THEN DO;
     2464     2209    6   ERR_FOR_NOW:                ;
     2465     2210    6                               CHKSZ.ERR=E$PHYS_MEMLIMIT;
     2466     2211    6                               GOTO REMOVE;
     2467     2212    6                               END;
     2468     2213
     2469     2214    5                          IF GM_REG_4_MEM = 0 THEN GOTO ERR_FOR_NOW;
     2470     2215
     2471     2216    5                          CALL GHS$REG (%GH_EVMEM)
     2472     2217    6                          WHENALTRETURN DO;
     2473     2218    6                               CHKSZ.ERR=E$BRKCTY;
     2474     2219    6   REMOVE:                     ;
     2475     2220    6                               IF TABLE_UPDATED ~= 0
     2476     2221    7                               THEN DO;
     2477     2222                                         %LOCK (G=GFR_RES_LOCK);
     2478     2229    7                                    GFR$ACCT.CUR_MEM(ACC) = GFR$ACCT.CUR_MEM(ACC) -
              2229                                             SIZE;
     2479     2230    7                                    GFR_CUR_MEM(MODE) = GFR_CUR_MEM(MODE) - SIZE;
     2480     2231                                         %UNLOCK (G=GFR_RES_LOCK);
     2481     2238    7                                    CHKSZ.SIZE = 0;
     2482     2239    7                                    END;
     2483     2240    6                               ALTRETURN;
     2484     2241    6                               END/*Altret from GHS$REG*/;
     2485     2242
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:321  
     2486     2243    5                          IF GM_SHUF > GM_STEP
     2487     2244    5                          THEN GM@SHUF = GM_SHUF - GM_STEP;
     2488     2245    5                          ELSE GM@SHUF = 0;
     2489     2246    5                          END/*do while*/;
     2490     2247    4                     END/*do if not step*/;
     2491     2248
     2492     2249        /* If the memory we got for this user should bump his memory
     2493     2250           peak count, do so.
     2494     2251        */
     2495     2252    3                IF USIZE + SIZE > G$JIT.PEAK_MEM
     2496     2253    3                THEN G$JIT.PEAK_MEM = USIZE + SIZE;
     2497     2254    3                END/*if not req_all failure*/;
     2498     2255    2           END/*if not chk_only*/;
     2499     2256
     2500     2257    1      CHKSZ.SIZE = SIZE;
     2501     2258    1      IF SIZE ~= RSIZE THEN ALTRETURN;
     2502     2259    1      ELSE RETURN;
     2503     2260
     2504     2261        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:322  
     2505     2262
     2506     2263    1   GMA$REL_ACCTMEM: ENTRY(CHKSZ) ALTRET;
     2507     2264
     2508     2265        /*  Remove the pages from the account recource table.   */
     2509     2266
     2510     2267    1      IF G$JIT.GFR_ACCT ~= 0
     2511     2268    2      THEN DO;
     2512     2269    2           SIZE = CHKSZ.SIZE;
     2513     2270    2           T$ = G$BOBCAT.ACCT_RES$;
     2514     2271                %LOCK (G=GFR_RES_LOCK);
     2515     2278
     2516     2279    2           IF SIZE > GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT)
     2517     2280    2           THEN GOTO ACCTMEM_SCREECH;
     2518     2281    2           GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT) = GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT) - SIZE;
     2519     2282
     2520     2283    2           IF SIZE > GFR_CUR_MEM(G$JIT.MODE)
     2521     2284    3           THEN DO;
     2522     2285    3   ACCTMEM_SCREECH: ;
     2523     2286    3                CALL SCREECH(GONE_NEGATIVE);
     2524     2287    3                END;
     2525     2288    2           GFR_CUR_MEM(G$JIT.MODE) = GFR_CUR_MEM(G$JIT.MODE) - SIZE;
     2526     2289                %UNLOCK (G=GFR_RES_LOCK);
     2527     2296    2           END;
     2528     2297        /*S* SCREECH_CODE: GMA-S$MM39
     2529     2298             TYPE: SCREECH
     2530     2299             MESSAGE: Mode Memory or Account Memory count has gone negative.
     2531     2300        */
     2532     2301
     2533     2302    1   END GMA$CHKSIZE;

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:323  
--  Include file information  --

   MM_SCODE_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GFR_DATA_M.:E05TOU  is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GMA$CHKSIZE.

   Procedure GMA$CHKSIZE requires 643 words for executable code.
   Procedure GMA$CHKSIZE requires 18 words of local(AUTO) storage.

    No errors detected in file GMA$LGP.:E05TSI    .

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:324  

 Object Unit name= GMA$CHKSIZE                                File name= GMA$LGP.:E05TOU
 UTS= JUL 29 '97 22:12:52.44 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none     1      1  GMA$CHKSIZE
    1  RoData even  UTS     17     11  GMA$CHKSIZE
    2   Proc  even  none   643    283  GMA$CHKSIZE
    3  RoData even  none     8      8  GMA$CHKSIZE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  GMA$CHKSIZE
     2    216          yes     yes      Std        1  GMA$REL_ACCTMEM

  ****  Data defs  ****

 Sect HexLoc  Name                           Sect HexLoc  Name
    0      0  GM_REG_4_MEM
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:325  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GMA$LOCATE
 yes     yes           Std       1 GJS$REL_ALL
 yes     yes           Std       1 GHH$LOCK
 yes     yes           Std       1 GHH$UNLOCK
         yes           Std       1 SCREECH
 yes     yes           Std       2 GHS$REG
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$JIT$                           r    G$BOBCAT$                             GFR_CUR_MEM
     GFR_MAX_MEM                           GM_SHUF                               GM_ASHUF
     GM_STEP                               GFR_RES_LOCK                     r    G$ROS$
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:326  


     2189        1        /*M* GMA$CHKSIZE - Check memory allocation against authorized limits */
     2190        2        /*T***********************************************************/
     2191        3        /*T*                                                         */
     2192        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2193        5        /*T*                                                         */
     2194        6        /*T***********************************************************/
     2195        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
     2196        8        /*D* NAME: GMA$CHKSIZE
     2197        9              CALL: CALL GMA$CHKSIZE (gm_chksz_params) ALTRET(label);
     2198       10              PARAMETERS:
     2199       11                      gm_chksz_params, from the macro in file GM_MACRO_M:
     2200       12
     2201       13                      size is the number pages to be added to the users
     2202       14                      current size.
     2203       15
     2204       16                      err is in VLP_ERRCODE format and will be set by CHKSIZE.
     2205       17
     2206       18                      chk is to be set if this is a call to check the user
     2207       19                      size; the pages will not be deducted for the account
     2208       20                      resource table.
     2209       21
     2210       22                      req_all is to be set if all requested pages must be
     2211       23                      available if any are to be allocated.  Ignored if
     2212       24                      chk is set.
     2213       25
     2214       26                      park is to be set if it is OK to reg the user for lack
     2215       27                      of memory.
     2216       28
     2217       29                      nshuf indicates if the number of pages is to be
     2218       30                      shufflable or not (I/O).  If nshuf is not present
     2219       31                      or is zero, type shufflable is assumed.  If nshuf
     2220       32                      is present and is not zero, non shufflable I/O type is
     2221       33                      assumed.
     2222       34              DESCRIPTION:
     2223       35                      The current size of the user is computed from data
     2224       36                      in the JIT and added to the size parameter to compare
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:327  
     2225       37                      with the users maximum memory resource size.  If the
     2226       38                      maximum size is exceeded, size is adjusted and an ALTRET
     2227       39                      return is taken.
     2228       40
     2229       41                      The ALTRET is taken if the user cannot fit into physical
     2230       42                      memory.
     2231       43                                                                           */
     2232       44
     2233       45
     2234       46        GMA$CHKSIZE: PROC (CHKSZ)  ALTRET;

     46   2 000000  D380 0000 0000  xent GMA$CHKSIZE     LNJ,B5   X6A_AUTO_1
          2 000003       0012 0001                       DC       18,1

     2235       47
     2236       48        %INCLUDE G_JIT_M;
     2237      313 S      %INCLUDE GU_LCP6_M;
     2238      314        %INCLUDE GM_MACRO_M;
     2239      796        %INCLUDE G$BOBCAT_M;
     2240      816        %INCLUDE GFR_DATA_M;
     2241      836        %INCLUDE GH_GATE_M;
     2242      877        %INCLUDE GH_SCHD_E;
     2243      973        %INCLUDE M_ERRORS_C;
     2244     1037        %INCLUDE MM_SCODE_C;
     2245     1084 S      %INCLUDE G_LCP6_E;
     2246     1085
     2247     1086        %GM_CHKSZ_PARAMS (FPTN=CHKSZ, STCLASS=);
     2248     1180
     2249     1181    1   DCL SIZE UBIN;                          /* request from CHKSZ.SIZE            */
     2250     1182    1   DCL USIZE UBIN;                         /* User accountable memory size       */
     2251     1183    1   DCL PSIZE UBIN;                         /* User real physical size            */
     2252     1184    1   DCL RSIZE UBIN;                         /* Requested additional pages         */
     2253     1185    1   DCL GM@SHUF UBIN;                       /* GM_SHUF - GM_STEP                  */
     2254     1186    1   DCL ACC UBIN;
     2255     1187    1   DCL MODE UBIN;
     2256     1188    1   DCL TABLE_UPDATED UBIN;
     2257     1189    1   DCL T$ PTR;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:328  
     2258     1190
     2259     1191    1   DCL GM_REG_4_MEM UBIN STATIC SYMDEF INIT(0);
     2260     1192
     2261     1193        %G$BOBCAT (STCLASS="BASED(G$BOBCAT$)");
     2262     1206        %GFR$ACCT (STCLASS="BASED(T$)");
     2263     1219        %G$JIT (STCLASS="BASED(G$JIT$)");
     2264     1633        %G$JIT_E;
     2265     1695
     2266     1696    1   DCL G$JIT$ PTR SYMREF READONLY;
     2267     1697    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
     2268     1698    1   DCL GFR_CUR_MEM(0:4) UBIN SYMREF;
     2269     1699    1   DCL GFR_MAX_MEM(0:4) UBIN SYMREF;
     2270     1700    1   DCL GM_SHUF UBIN SYMREF;
     2271     1701    1   DCL GM_ASHUF UBIN SYMREF;
     2272     1702    1   DCL GM_STEP UBIN SYMREF;
     2273     1703
     2274     1704        %GATE (FPTN=GFR_RES_LOCK,STCLASS=SYMREF);
     2275     1723
     2276     1724    1   DCL GHS$REG ENTRY(2) ALTRET;
     2277     1725    1   DCL GJS$REL_ALL ENTRY(1) ALTRET;
     2278     1726    1   DCL GMA$LOCATE ENTRY(1) ALTRET;
     2279     1727    1   DCL SCREECH ENTRY(1);
     2280     1728
     2281     1729        %VLP_ERRCODE (FPTN=E$MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2282     1730              STCLASS=CONSTANT,ERR#=%E$MEMLIMIT);
     2283     1776        %VLP_ERRCODE (FPTN=E$BRKCTY,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2284     1777              STCLASS=CONSTANT,ERR#=%E$BRKCTY);
     2285     1823        %VLP_ERRCODE (FPTN=E$ACCT_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2286     1824              STCLASS=CONSTANT,ERR#=%E$ACCT_MEMLIMIT);
     2287     1870        %VLP_ERRCODE (FPTN=E$MODE_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2288     1871              STCLASS=CONSTANT,ERR#=%E$MODE_MEMLIMIT);
     2289     1917        %VLP_ERRCODE (FPTN=E$PHYS_MEMLIMIT,FCG='GM',MID='A',MON='1'B,SEV=%G_SEV_CONT#,
     2290     1918              STCLASS=CONSTANT,ERR#=%E$PHYS_MEMLIMIT);
     2291     1964
     2292     1965        %VLP_SCODE (FPTN=GONE_NEGATIVE,ERR#=%S$MM39,SEV=G_SEV_SCREECH#,STCLASS=CONSTANT,
     2293     1966                    FCG=GM,MID=A,MON='1'B);
     2294     2027        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:329  
     2295     2028
     2296     2029    1      SIZE = CHKSZ.SIZE;

   2029   2 000005  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 000007  E806                                 LDR,R6   ,B6
          2 000008  EF47 0006                            STR,R6   SIZE,AUTO

     2297     2030    1      RSIZE = SIZE;                        /* remember requested size            */

   2030   2 00000A  EF47 0009                            STR,R6   RSIZE,AUTO

     2298     2031    1      CHKSZ.ERR = '0'B;

   2031   2 00000C  8746 0001                            CL       1,B6
          2 00000E  8746 0002                            CL       2,B6

     2299     2032    1      TABLE_UPDATED = 0;

   2032   2 000010  8747 000D                            CL       TABLE_UPDATED,AUTO

     2300     2033
     2301     2034    1      IF GM_SHUF > GM_STEP

   2034   2 000012  D800 0000 0000  xsym                 LDR,R5   GM_SHUF
          2 000015  D900 0000 0000  xsym                 CMR,R5   GM_STEP
          2 000018  0381 0008                            BLE      s:2036,PREL

     2302     2035    1      THEN GM@SHUF = GM_SHUF - GM_STEP;

   2035   2 00001A  D200 0000 0000  xsym                 SUB,R5   GM_STEP
          2 00001D  DF47 000A                            STR,R5   GM@SHUF,AUTO
          2 00001F  0F81 0003                            B        s:2042,PREL

     2303     2036    1      ELSE GM@SHUF = 0;

   2036   2 000021  8747 000A                            CL       GM@SHUF,AUTO

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:330  
     2304     2037
     2305     2038        /* Compute the user's current size.
     2306     2039           USIZE for logical limit checks.
     2307     2040           PSIZE for physical limit checks.
     2308     2041        */
     2309     2042    1      USIZE=G$JIT.PCD                      /* Static data                        */

   2042   2 000023  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          2 000026  D845 0080                            LDR,R5   128,B5
          2 000028  DA45 0083                            ADD,R5   131,B5
          2 00002A  DA45 0087                            ADD,R5   135,B5
          2 00002C  DA45 0082                            ADD,R5   130,B5
          2 00002E  DA45 0084                            ADD,R5   132,B5
          2 000030  DA45 0085                            ADD,R5   133,B5
          2 000032  DA45 008B                            ADD,R5   139,B5
          2 000034  DA45 008A                            ADD,R5   138,B5
          2 000036  DA45 0086                            ADD,R5   134,B5
          2 000038  DF47 0007                            STR,R5   USIZE,AUTO

     2310     2043    1        +G$JIT.PCDS                        /* Shuffable Data Segments            */
     2311     2044    1        +G$JIT.NSPC                        /* Non-shuffable Data Segments        */
     2312     2045    1        +G$JIT.PCL                         /* Unshared Library procedure*/
     2313     2046    1        +G$JIT.PCDDS                       /* Debugger data segment              */
     2314     2047    1        +G$JIT.PCC                         /* Context                            */
     2315     2048    1        +G$JIT.CQPC                        /* Circular Queue                     */
     2316     2049    1        +G$JIT.PSEUDOPGS                   /* HHJITs                             */
     2317     2050    1        +G$JIT.PCROS;                      /* Read Only Segment                  */
     2318     2051
     2319     2052        /*  First, make sure there is enough physical memory, if this is not step.
     2320     2053        */
     2321     2054    1      IF CHKSZ.FLGS.STEP = '1'B

   2054   2 00003A  82C6 0003                            LB,'0800'X        3,B6
   2054   2 00003C       0800
          2 00003D  0501 007F                            BBT      s:2111,PREL

     2322     2055    1      THEN GOTO SKIP_PSIZE_CHK;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:331  
     2323     2056
     2324     2057        /*  Handler pages are already taken out of GM_ASHUF.
     2325     2058        */
     2326     2059    1      IF G$JIT.MODE = %G_M_HANDLER#

   2059   2 00003F  C2C5 0004                            LLH,R4   4,B5
          2 000041  4D03                                 CMV,R4   3
          2 000042  0981 0005                            BNE      s:2064,PREL

     2327     2060    2      THEN DO;

     2328     2061    2           PSIZE = 0;

   2061   2 000044  8747 0008                            CL       PSIZE,AUTO

     2329     2062    2           END;

   2062   2 000046  0F81 0005                            B        s:2067,PREL

     2330     2063    2      ELSE DO;

     2331     2064    2           PSIZE = USIZE+G$JIT.PCP;        /* Procedure pages                    */

   2064   2 000048  DA45 0081                            ADD,R5   129,B5
          2 00004A  DF47 0008                            STR,R5   PSIZE,AUTO

     2332     2065    2           END;

     2333     2066
     2334     2067    1      IF CHKSZ.FLGS.NSHUF

   2067   2 00004C  82C6 0003                            LB,'1000'X        3,B6
   2067   2 00004E       1000
          2 00004F  0581 000F                            BBF      s:2067,PREL

     2335     2068    2      THEN DO;

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:332  
     2336     2069    2           CALL GMA$LOCATE(SIZE) ALTRET(PSIZE_CHK);

   2069   2 000051  CBC7 0006                            LAB,B4   SIZE,AUTO
          2 000053  CFC7 0010                            STB,B4   T$+2,AUTO
          2 000055  BBC7 0010                            LAB,B3   T$+2,AUTO
          2 000057  CBF0 0100                            LAB,B4   256,IMO
          2 000059  E380 0000 0000  xent                 LNJ,B6   GMA$LOCATE
          2 00005C       0003                            DC       s:2067,PREL

     2337     2070    2           GOTO SKIP_PSIZE_CHK;

   2070   2 00005D  0F81 005F                            B        s:2111,PREL

   2067   2                              PSIZE_CHK       null
     2338     2071    2           END;
     2339     2072
     2340     2073    1   PSIZE_CHK: ;
     2341     2074    1      IF PSIZE + SIZE  > GM_ASHUF

   2074   2 00005F  E847 0008            PSIZE_CHK       LDR,R6   PSIZE,AUTO
          2 000061  EA47 0006                            ADD,R6   SIZE,AUTO
          2 000063  E900 0000 0000  xsym                 CMR,R6   GM_ASHUF
          2 000066  0381 000F                            BLE      s:2087,PREL

     2342     2075    2      THEN DO;

     2343     2076    2           SIZE = GM_ASHUF - PSIZE;

   2076   2 000068  E800 0000 0000  xsym                 LDR,R6   GM_ASHUF
          2 00006B  E247 0008                            SUB,R6   PSIZE,AUTO
          2 00006D  EF47 0006                            STR,R6   SIZE,AUTO

     2344     2077    2           CHKSZ.ERR = E$PHYS_MEMLIMIT;

   2077   2 00006F  8C80 0000 0008  01                   LDI      E$PHYS_MEMLIMIT
          2 000072  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 000074  8D46 0001                            SDI      1,B6
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:333  

     2345     2078    2           END;

     2346     2079
     2347     2080        /*E* ERROR: GMA-E$PHYS_MEMLIMIT-0
     2348     2081              MESSAGE: Physical memory limit exceeded.
     2349     2082        */
     2350     2083
     2351     2084        /*  Check if there is currently enough around.  If not, try to
     2352     2085            free the memory by releasing pages from the shared file table.
     2353     2086        */
     2354     2087    1      IF SIZE > GM@SHUF

   2087   2 000076  E847 0006                            LDR,R6   SIZE,AUTO
          2 000078  E947 000A                            CMR,R6   GM@SHUF,AUTO
          2 00007A  0381 0022                            BLE      s:2101,PREL

     2355     2088    2      THEN DO;

     2356     2089    2           PSIZE = SIZE - GM@SHUF;

   2089   2 00007C  E247 000A                            SUB,R6   GM@SHUF,AUTO
          2 00007E  EF47 0008                            STR,R6   PSIZE,AUTO

     2357     2090    2           CALL GJS$REL_ALL(PSIZE);

   2090   2 000080  EBC7 0008                            LAB,B6   PSIZE,AUTO
          2 000082  EFC7 0010                            STB,B6   T$+2,AUTO
          2 000084  BBC7 0010                            LAB,B3   T$+2,AUTO
          2 000086  CBF0 0100                            LAB,B4   256,IMO
          2 000088  E380 0000 0000  xent                 LNJ,B6   GJS$REL_ALL
          2 00008B       0001                            DC       s:2092,PREL

     2358     2091
     2359     2092    2           IF GM_SHUF > GM_STEP

   2092   2 00008C  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:334  
          2 00008F  E900 0000 0000  xsym                 CMR,R6   GM_STEP
          2 000092  0381 0008                            BLE      s:2094,PREL

     2360     2093    2           THEN GM@SHUF = GM_SHUF - GM_STEP;

   2093   2 000094  E200 0000 0000  xsym                 SUB,R6   GM_STEP
          2 000097  EF47 000A                            STR,R6   GM@SHUF,AUTO
          2 000099  0F81 0003                            B        s:2101,PREL

     2361     2094    2           ELSE GM@SHUF = 0;

   2094   2 00009B  8747 000A                            CL       GM@SHUF,AUTO

     2362     2095    2           END;

     2363     2096
     2364     2097        /*  If not currently enough, but the user specified we are to get
     2365     2098            what we can without REGing him (REQ_ALL=NO and PARK=NO), give what
     2366     2099            we can.
     2367     2100        */
     2368     2101    1      IF SIZE > GM@SHUF

   2101   2 00009D  E847 0006                            LDR,R6   SIZE,AUTO
          2 00009F  E947 000A                            CMR,R6   GM@SHUF,AUTO
          2 0000A1  0381 001B                            BLE      s:2111,PREL

     2369     2102    2      THEN DO;

     2370     2103    2           IF NOT CHKSZ.FLGS.REQ_ALL

   2103   2 0000A3  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 0000A5  82C6 0003                            LB,'4000'X        3,B6
          2 0000A7       4000
          2 0000A8  0501 0014                            BBT      s:2111,PREL

     2371     2104    3           THEN DO;

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:335  
     2372     2105    3                IF NOT CHKSZ.FLGS.PARK OR GM_REG_4_MEM=0

   2105   2 0000AA  82C6 0003                            LB,'2000'X        3,B6
   2105   2 0000AC       2000
          2 0000AD  0581 0006                            BBF      s:2107,PREL
          2 0000AF  D800 0000 0000  00                   LDR,R5   GM_REG_4_MEM
          2 0000B2  5981 000A                            BNEZ,R5  s:2111,PREL

     2373     2106    4                THEN DO;

     2374     2107    4                     SIZE = GM@SHUF;

   2107   2 0000B4  E847 000A                            LDR,R6   GM@SHUF,AUTO
          2 0000B6  EF47 0006                            STR,R6   SIZE,AUTO

     2375     2108    4                     CHKSZ.ERR = E$PHYS_MEMLIMIT;

   2108   2 0000B8  8C80 0000 0008  01                   LDI      E$PHYS_MEMLIMIT
          2 0000BB  8D46 0001                            SDI      1,B6

     2376     2109    4                     END;

     2377     2110    3                END;

     2378     2111    2           END;

   2101   2                              SKIP_PSIZE_CHK  null
     2379     2112
     2380     2113
     2381     2114        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:336  
     2382     2115        /*  Now, the system logical limit checks.
     2383     2116            If the user doesn't have MAXMEM priv on, check against the
     2384     2117            limit in the JIT.
     2385     2118        */
     2386     2119    1   SKIP_PSIZE_CHK: ;
     2387     2120    1      IF NOT G$JIT.MMFLGS.FREE_PPGS

   2120   2 0000BD  EC80 0000 0000  xsym SKIP_PSIZE_CHK  LDB,B6   G$JIT$
          2 0000C0  89C6 0088                            CMZ      136,B6
          2 0000C2  0801 0007                            BAL      s:2123,PREL

     2388     2121    1      THEN USIZE=USIZE+G$JIT.PCP;

   2121   2 0000C4  E847 0007                            LDR,R6   USIZE,AUTO
          2 0000C6  EA46 0081                            ADD,R6   129,B6
          2 0000C8  EF47 0007                            STR,R6   USIZE,AUTO

     2389     2122
     2390     2123    1      IF NOT (G$JIT.PRIV.ACTIVE & %G_PR_MAXMEM#)

   2123   2 0000CA  8CC6 008E                            LDI      142,B6
          2 0000CC  E500 0000 000D  01                   AND,R6   GONE_NEGATIVE+3
          2 0000CF  F500 0000 000E  01                   AND,R7   GONE_NEGATIVE+4
          2 0000D2  8D47 0010                            SDI      T$+2,AUTO
          2 0000D4  DB80 0000 0000  03                   LAB,B5   0
          2 0000D7  5C01                                 LDV,R5   1
          2 0000D8  0022                                 ACM      ;
          2 0000D9       4407 0010                                ALPHANUM(T$+2,AUTO,,4,FILL),;
          2 0000DB       4005 0000                                ALPHANUM(0,B5,,R5,FILL)
          2 0000DD  5301 0016                            CBNE     s:2139,PREL

     2391     2124    2      THEN DO;

     2392     2125    2           IF USIZE + SIZE > G$JIT.MAXMEM

   2125   2 0000DF  C847 0007                            LDR,R4   USIZE,AUTO
          2 0000E1  CA47 0006                            ADD,R4   SIZE,AUTO
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:337  
          2 0000E3  C946 0089                            CMR,R4   137,B6
          2 0000E5  0381 000E                            BLE      s:2139,PREL

     2393     2126    3           THEN DO;

     2394     2127    3                SIZE = G$JIT.MAXMEM - USIZE;

   2127   2 0000E7  C846 0089                            LDR,R4   137,B6
          2 0000E9  C247 0007                            SUB,R4   USIZE,AUTO
          2 0000EB  CF47 0006                            STR,R4   SIZE,AUTO

     2395     2128    3                CHKSZ.ERR = E$MEMLIMIT;

   2128   2 0000ED  8C80 0000 0000  01                   LDI      E$MEMLIMIT
          2 0000F0  DCC7 0004                            LDB,B5   @CHKSZ,AUTO
          2 0000F2  8D45 0001                            SDI      1,B5

     2396     2129    3                END;

     2397     2130    2           END;

     2398     2131
     2399     2132        /*E* ERROR: GMA-E$MEMLIMIT-0
     2400     2133             MESSAGE: User memory limit exceeded.
     2401     2134        */
     2402     2135
     2403     2136        /*  Also check against the memory limit for this account,uname and
     2404     2137            the memory limit for this user mode.
     2405     2138        */
     2406     2139    1      IF G$JIT.GFR_ACCT ~= 0

   2139   2 0000F4  E2C6 00A7                            LLH,R6   167,B6
          2 0000F6  6901 0076                            BEZ,R6   s:2195,PREL

     2407     2140    2      THEN DO;

     2408     2141    2           T$ = G$BOBCAT.ACCT_RES$;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:338  

   2141   2 0000F8  DC80 0000 0000  xsym                 LDB,B5   G$BOBCAT$
          2 0000FB  CCC5 0020                            LDB,B4   32,B5
          2 0000FD  CFC7 000E                            STB,B4   T$,AUTO

     2409     2142    2           ACC = G$JIT.GFR_ACCT;

   2142   2 0000FF  EF47 000B                            STR,R6   ACC,AUTO

     2410     2143    2           MODE = G$JIT.MODE;

   2143   2 000101  C2C6 0004                            LLH,R4   4,B6
          2 000103  CF47 000C                            STR,R4   MODE,AUTO

     2411     2144                %LOCK (G=GFR_RES_LOCK);

   2149   2 000105  BB80 0000 0001  03                   LAB,B3   +1
          2 000108  CBF0 0100                            LAB,B4   256,IMO
          2 00010A  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 00010D       0001                            DC       s:2152,PREL

     2412     2151
     2413     2152    2           IF GFR$ACCT.CUR_MEM(ACC) + SIZE > GFR$ACCT.MAX_MEM(ACC)

   2152   2 00010E  ECC7 000E                            LDB,B6   T$,AUTO
          2 000110  B847 000B                            LDR,R3   ACC,AUTO
          2 000112  3F0E                                 MLV,R3   14
          2 000113  3E0B                                 ADV,R3   11
          2 000114  E836                                 LDR,R6   ,B6,R3
          2 000115  EA47 0006                            ADD,R6   SIZE,AUTO
          2 000117  A847 000B                            LDR,R2   ACC,AUTO
          2 000119  2F0E                                 MLV,R2   14
          2 00011A  2E0A                                 ADV,R2   10
          2 00011B  E926                                 CMR,R6   ,B6,R2
          2 00011C  0381 000C                            BLE      s:2162,PREL

     2414     2153    3           THEN DO;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:339  

     2415     2154    3                SIZE = GFR$ACCT.MAX_MEM(ACC) - GFR$ACCT.CUR_MEM(ACC);

   2154   2 00011E  E826                                 LDR,R6   ,B6,R2
          2 00011F  E236                                 SUB,R6   ,B6,R3
          2 000120  EF47 0006                            STR,R6   SIZE,AUTO

     2416     2155    3                CHKSZ.ERR = E$ACCT_MEMLIMIT;

   2155   2 000122  8C80 0000 0004  01                   LDI      E$ACCT_MEMLIMIT
          2 000125  DCC7 0004                            LDB,B5   @CHKSZ,AUTO
          2 000127  8D45 0001                            SDI      1,B5

     2417     2156    3                END;

     2418     2157
     2419     2158        /*E* ERROR: GMA-E$ACCT_MEMLIMIT-0
     2420     2159             MESSAGE: Account memory limit exceeded.
     2421     2160        */
     2422     2161
     2423     2162    2           IF GFR_CUR_MEM(MODE) + SIZE > GFR_MAX_MEM(MODE)

   2162   2 000129  9847 000C                            LDR,R1   MODE,AUTO
          2 00012B  E810 0000 0000  xsym                 LDR,R6   GFR_CUR_MEM,R1
          2 00012E  EA47 0006                            ADD,R6   SIZE,AUTO
          2 000130  E910 0000 0000  xsym                 CMR,R6   GFR_MAX_MEM,R1
          2 000133  0381 0010                            BLE      s:2175,PREL

     2424     2163    3           THEN DO;

     2425     2164    3                SIZE = GFR_MAX_MEM(MODE) - GFR_CUR_MEM(MODE);

   2164   2 000135  E810 0000 0000  xsym                 LDR,R6   GFR_MAX_MEM,R1
          2 000138  E210 0000 0000  xsym                 SUB,R6   GFR_CUR_MEM,R1
          2 00013B  EF47 0006                            STR,R6   SIZE,AUTO

     2426     2165    3                CHKSZ.ERR = E$MODE_MEMLIMIT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:340  

   2165   2 00013D  8C80 0000 0006  01                   LDI      E$MODE_MEMLIMIT
          2 000140  DCC7 0004                            LDB,B5   @CHKSZ,AUTO
          2 000142  8D45 0001                            SDI      1,B5

     2427     2166    3                END;

     2428     2167
     2429     2168        /*E* ERROR: GMA-E$MODE_MEMLIMIT-0
     2430     2169             MESSAGE: User Mode memory limit exceeded.
     2431     2170        */
     2432     2171
     2433     2172        /* If this is not a check_only call, the memory is removed from
     2434     2173           the account resource table.
     2435     2174        */
     2436     2175    2           IF NOT CHKSZ.FLGS.CHK_ONLY

   2175   2 000144  DCC7 0004                            LDB,B5   @CHKSZ,AUTO
          2 000146  89C5 0003                            CMZ      3,B5
          2 000148  0801 001B                            BAL      s:2189,PREL

     2437     2176    3           THEN DO;

     2438     2177    3                IF NOT(CHKSZ.FLGS.REQ_ALL AND (SIZE ~= RSIZE) )

   2177   2 00014A  82C5 0003                            LB,'4000'X        3,B5
   2177   2 00014C       4000
          2 00014D  0581 0007                            BBF      s:2179,PREL
          2 00014F  E847 0006                            LDR,R6   SIZE,AUTO
          2 000151  E947 0009                            CMR,R6   RSIZE,AUTO
          2 000153  0981 0010                            BNE      s:2189,PREL

     2439     2178    4                THEN DO;

     2440     2179    4                     GFR$ACCT.CUR_MEM(ACC) = GFR$ACCT.CUR_MEM(ACC) + SIZE;

   2179   2 000155  E836                                 LDR,R6   ,B6,R3
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:341  
          2 000156  EA47 0006                            ADD,R6   SIZE,AUTO
          2 000158  EF36                                 STR,R6   ,B6,R3

     2441     2180    4                     GFR_CUR_MEM(MODE) = GFR_CUR_MEM(MODE) + SIZE;

   2180   2 000159  D810 0000 0000  xsym                 LDR,R5   GFR_CUR_MEM,R1
          2 00015C  DA47 0006                            ADD,R5   SIZE,AUTO
          2 00015E  DF10 0000 0000  xsym                 STR,R5   GFR_CUR_MEM,R1

     2442     2181    4                     TABLE_UPDATED = 1;

   2181   2 000161  6C01                                 LDV,R6   1
          2 000162  EF47 000D                            STR,R6   TABLE_UPDATED,AUTO

     2443     2182    4                     END;

     2444     2183    3                END/*do if not chk_only*/;

     2445     2184                %UNLOCK (G=GFR_RES_LOCK);

   2189   2 000164  BB80 0000 0001  03                   LAB,B3   +1
          2 000167  CBF0 0100                            LAB,B4   256,IMO
          2 000169  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 00016C       0001                            DC       s:2195,PREL

     2446     2191
     2447     2192    2           END/*do if JIT.GFR_ACCR ~=0*/;

     2448     2193
     2449     2194        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:342  
     2450     2195    1      IF NOT CHKSZ.FLGS.CHK_ONLY

   2195   2 00016D  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 00016F  89C6 0003                            CMZ      3,B6
          2 000171  0801 0093                            BAL      s:2257,PREL

     2451     2196    2      THEN DO;

     2452     2197    2           IF NOT CHKSZ.FLGS.STEP

   2197   2 000173  82C6 0003                            LB,'0800'X        3,B6
   2197   2 000175       0800
          2 000176  0501 008E                            BBT      s:2257,PREL

     2453     2198    3           THEN DO;

     2454     2199    3                IF NOT(CHKSZ.FLGS.REQ_ALL AND (SIZE ~= RSIZE) )

   2199   2 000178  82C6 0003                            LB,'4000'X        3,B6
   2199   2 00017A       4000
          2 00017B  0581 0007                            BBF      s:2205,PREL
          2 00017D  E847 0006                            LDR,R6   SIZE,AUTO
          2 00017F  E947 0009                            CMR,R6   RSIZE,AUTO
          2 000181  0981 0074                            BNE      s:2252,PREL

     2455     2200    4                THEN DO;

     2456     2201
     2457     2202        /*  Check if there are enough free pages around.  If not, REG this
     2458     2203            guy until some become available.
     2459     2204        */
     2460     2205    5                     DO WHILE ( SIZE > GM@SHUF );

   2205   2 000183  E847 0006                            LDR,R6   SIZE,AUTO
          2 000185  E947 000A                            CMR,R6   GM@SHUF,AUTO
          2 000187  0381 006E                            BLE      s:2252,PREL

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:343  
     2461     2206
     2462     2207    5                          IF NOT CHKSZ.FLGS.PARK

   2207   2 000189  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 00018B  82C6 0003                            LB,'2000'X        3,B6
          2 00018D       2000
          2 00018E  0501 000A                            BBT      s:2214,PREL

     2463     2208    6                          THEN DO;

     2464     2209    6   ERR_FOR_NOW:                ;

   2209   2                              ERR_FOR_NOW     null
     2465     2210    6                               CHKSZ.ERR=E$PHYS_MEMLIMIT;

   2210   2 000190  8C80 0000 0008  01   ERR_FOR_NOW     LDI      E$PHYS_MEMLIMIT
          2 000193  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 000195  8D46 0001                            SDI      1,B6

     2466     2211    6                               GOTO REMOVE;

   2211   2 000197  0F81 0017                            B        s:2218,PREL

     2467     2212    6                               END;
     2468     2213
     2469     2214    5                          IF GM_REG_4_MEM = 0 THEN GOTO ERR_FOR_NOW;

   2214   2 000199  E800 0000 0000  00                   LDR,R6   GM_REG_4_MEM
          2 00019C  6974                                 BEZ,R6   s:2208,SPREL

     2470     2215
     2471     2216    5                          CALL GHS$REG (%GH_EVMEM)

   2216   2 00019D  BB80 0000 0004  03                   LAB,B3   +4
          2 0001A0  CBF0 0100                            LAB,B4   256,IMO
          2 0001A2  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          2 0001A5       0003                            DC       s:2218,PREL
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:344  
          2 0001A6  0F81 0038                            B        s:2243,PREL

     2472     2217    6                          WHENALTRETURN DO;

     2473     2218    6                               CHKSZ.ERR=E$BRKCTY;

   2218   2 0001A8  8C80 0000 0002  01                   LDI      E$BRKCTY
          2 0001AB  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 0001AD  8D46 0001                            SDI      1,B6

   2218   2                              REMOVE          null
     2474     2219    6   REMOVE:                     ;
     2475     2220    6                               IF TABLE_UPDATED ~= 0

   2220   2 0001AF  D847 000D            REMOVE          LDR,R5   TABLE_UPDATED,AUTO
          2 0001B1  5901 002A                            BEZ,R5   s:2240,PREL

     2476     2221    7                               THEN DO;

     2477     2222                                         %LOCK (G=GFR_RES_LOCK);

   2227   2 0001B3  BB80 0000 0001  03                   LAB,B3   +1
          2 0001B6  CBF0 0100                            LAB,B4   256,IMO
          2 0001B8  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 0001BB       0001                            DC       s:2229,PREL

     2478     2229    7                                    GFR$ACCT.CUR_MEM(ACC) = GFR$ACCT.CUR_MEM(ACC) -
              2229                                             SIZE;

   2229   2 0001BC  ECC7 000E                            LDB,B6   T$,AUTO
          2 0001BE  B847 000B                            LDR,R3   ACC,AUTO
          2 0001C0  3F0E                                 MLV,R3   14
          2 0001C1  3E0B                                 ADV,R3   11
          2 0001C2  E836                                 LDR,R6   ,B6,R3
          2 0001C3  E247 0006                            SUB,R6   SIZE,AUTO
          2 0001C5  EF36                                 STR,R6   ,B6,R3

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:345  
     2479     2230    7                                    GFR_CUR_MEM(MODE) = GFR_CUR_MEM(MODE) - SIZE;

   2230   2 0001C6  A847 000C                            LDR,R2   MODE,AUTO
          2 0001C8  D820 0000 0000  xsym                 LDR,R5   GFR_CUR_MEM,R2
          2 0001CB  D247 0006                            SUB,R5   SIZE,AUTO
          2 0001CD  DF20 0000 0000  xsym                 STR,R5   GFR_CUR_MEM,R2

     2480     2231                                         %UNLOCK (G=GFR_RES_LOCK);

   2236   2 0001D0  BB80 0000 0001  03                   LAB,B3   +1
          2 0001D3  CBF0 0100                            LAB,B4   256,IMO
          2 0001D5  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 0001D8       0001                            DC       s:2238,PREL

     2481     2238    7                                    CHKSZ.SIZE = 0;

   2238   2 0001D9  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 0001DB  8706                                 CL       ,B6

     2482     2239    7                                    END;

     2483     2240    6                               ALTRETURN;

   2240   2 0001DC  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     2484     2241    6                               END/*Altret from GHS$REG*/;
     2485     2242
     2486     2243    5                          IF GM_SHUF > GM_STEP

   2243   2 0001DF  E800 0000 0000  xsym                 LDR,R6   GM_SHUF
          2 0001E2  E900 0000 0000  xsym                 CMR,R6   GM_STEP
          2 0001E5  0381 0008                            BLE      s:2245,PREL

     2487     2244    5                          THEN GM@SHUF = GM_SHUF - GM_STEP;

   2244   2 0001E7  E200 0000 0000  xsym                 SUB,R6   GM_STEP
          2 0001EA  EF47 000A                            STR,R6   GM@SHUF,AUTO
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:346  
          2 0001EC  0F81 0003                            B        s:2246,PREL

     2488     2245    5                          ELSE GM@SHUF = 0;

   2245   2 0001EE  8747 000A                            CL       GM@SHUF,AUTO

     2489     2246    5                          END/*do while*/;

   2246   2 0001F0  E847 0006                            LDR,R6   SIZE,AUTO
          2 0001F2  E947 000A                            CMR,R6   GM@SHUF,AUTO
          2 0001F4  0301 FF94                            BG       s:2207,PREL

     2490     2247    4                     END/*do if not step*/;

     2491     2248
     2492     2249        /* If the memory we got for this user should bump his memory
     2493     2250           peak count, do so.
     2494     2251        */
     2495     2252    3                IF USIZE + SIZE > G$JIT.PEAK_MEM

   2252   2 0001F6  EA47 0007                            ADD,R6   USIZE,AUTO
          2 0001F8  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 0001FB  E946 0034                            CMR,R6   52,B6
          2 0001FD  0381 0007                            BLE      s:2257,PREL

     2496     2253    3                THEN G$JIT.PEAK_MEM = USIZE + SIZE;

   2253   2 0001FF  E847 0007                            LDR,R6   USIZE,AUTO
          2 000201  EA47 0006                            ADD,R6   SIZE,AUTO
          2 000203  EF46 0034                            STR,R6   52,B6

     2497     2254    3                END/*if not req_all failure*/;

     2498     2255    2           END/*if not chk_only*/;

     2499     2256
     2500     2257    1      CHKSZ.SIZE = SIZE;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:347  

   2257   2 000205  ECC7 0004                            LDB,B6   @CHKSZ,AUTO
          2 000207  E847 0006                            LDR,R6   SIZE,AUTO
          2 000209  EF06                                 STR,R6   ,B6

     2501     2258    1      IF SIZE ~= RSIZE THEN ALTRETURN;

   2258   2 00020A  D847 0006                            LDR,R5   SIZE,AUTO
          2 00020C  D947 0009                            CMR,R5   RSIZE,AUTO
          2 00020E  0901 0004                            BE       s:2259,PREL

   2258   2 000210  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     2502     2259    1      ELSE RETURN;

   2259   2 000213  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     2503     2260
     2504     2261        %EJECT;
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:348  
     2505     2262
     2506     2263    1   GMA$REL_ACCTMEM: ENTRY(CHKSZ) ALTRET;

   2263   2 000216  D380 0000 0000  xent GMA$REL_ACCTMEM LNJ,B5   X6A_AUTO_1
          2 000219       0012 0001                       DC       18,1

     2507     2264
     2508     2265        /*  Remove the pages from the account recource table.   */
     2509     2266
     2510     2267    1      IF G$JIT.GFR_ACCT ~= 0

   2267   2 00021B  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00021E  E2C6 00A7                            LLH,R6   167,B6
          2 000220  6901 005F                            BEZ,R6   s:2302,PREL

     2511     2268    2      THEN DO;

     2512     2269    2           SIZE = CHKSZ.SIZE;

   2269   2 000222  DCC7 0004                            LDB,B5   @CHKSZ,AUTO
          2 000224  D805                                 LDR,R5   ,B5
          2 000225  DF47 0006                            STR,R5   SIZE,AUTO

     2513     2270    2           T$ = G$BOBCAT.ACCT_RES$;

   2270   2 000227  CC80 0000 0000  xsym                 LDB,B4   G$BOBCAT$
          2 00022A  BCC4 0020                            LDB,B3   32,B4
          2 00022C  BFC7 000E                            STB,B3   T$,AUTO

     2514     2271                %LOCK (G=GFR_RES_LOCK);

   2276   2 00022E  BB80 0000 0001  03                   LAB,B3   +1
          2 000231  CBF0 0100                            LAB,B4   256,IMO
          2 000233  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          2 000236       0001                            DC       s:2279,PREL

     2515     2278
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:349  
     2516     2279    2           IF SIZE > GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT)

   2279   2 000237  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00023A  B2C6 00A7                            LLH,R3   167,B6
          2 00023C  DCC7 000E                            LDB,B5   T$,AUTO
          2 00023E  BF47 0010                            STR,R3   T$+2,AUTO
          2 000240  3F0E                                 MLV,R3   14
          2 000241  3E0B                                 ADV,R3   11
          2 000242  B847 0010                            LDR,R3   T$+2,AUTO
          2 000244  3F0E                                 MLV,R3   14
          2 000245  3E0B                                 ADV,R3   11
          2 000246  E847 0006                            LDR,R6   SIZE,AUTO
          2 000248  E935                                 CMR,R6   ,B5,R3
          2 000249  0301 0017                            BG       s:2284,PREL

     2517     2280    2           THEN GOTO ACCTMEM_SCREECH;
     2518     2281    2           GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT) = GFR$ACCT.CUR_MEM(G$JIT.GFR_ACCT) - SIZE;

   2281   2 00024B  A2C6 00A7                            LLH,R2   167,B6
          2 00024D  AF47 0010                            STR,R2   T$+2,AUTO
          2 00024F  2F0E                                 MLV,R2   14
          2 000250  2E0B                                 ADV,R2   11
          2 000251  B847 0010                            LDR,R3   T$+2,AUTO
          2 000253  3F0E                                 MLV,R3   14
          2 000254  3E0B                                 ADV,R3   11
          2 000255  E235                                 SUB,R6   ,B5,R3
          2 000256  8256                                 NEG      R6
          2 000257  EF35                                 STR,R6   ,B5,R3

     2519     2282
     2520     2283    2           IF SIZE > GFR_CUR_MEM(G$JIT.MODE)

   2283   2 000258  A2C6 0004                            LLH,R2   4,B6
          2 00025A  D847 0006                            LDR,R5   SIZE,AUTO
          2 00025C  D920 0000 0000  xsym                 CMR,R5   GFR_CUR_MEM,R2
          2 00025F  0381 000A                            BLE      s:2288,PREL

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:350  
     2521     2284    3           THEN DO;

   2281   2                              ACCTMEM_SCREECH null
     2522     2285    3   ACCTMEM_SCREECH: ;
     2523     2286    3                CALL SCREECH(GONE_NEGATIVE);

   2286   2 000261  BB80 0000 0006  03   ACCTMEM_SCREECH LAB,B3   +6
          2 000264  CBF0 0100                            LAB,B4   256,IMO
          2 000266  E380 0000 0000  xent                 LNJ,B6   SCREECH
          2 000269       0001                            DC       s:2288,PREL

     2524     2287    3                END;

     2525     2288    2           GFR_CUR_MEM(G$JIT.MODE) = GFR_CUR_MEM(G$JIT.MODE) - SIZE;

   2288   2 00026A  EC80 0000 0000  xsym                 LDB,B6   G$JIT$
          2 00026D  B2C6 0004                            LLH,R3   4,B6
          2 00026F  E830 0000 0000  xsym                 LDR,R6   GFR_CUR_MEM,R3
          2 000272  E247 0006                            SUB,R6   SIZE,AUTO
          2 000274  EF30 0000 0000  xsym                 STR,R6   GFR_CUR_MEM,R3

     2526     2289                %UNLOCK (G=GFR_RES_LOCK);

   2294   2 000277  BB80 0000 0001  03                   LAB,B3   +1
          2 00027A  CBF0 0100                            LAB,B4   256,IMO
          2 00027C  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          2 00027F       0001                            DC       s:2302,PREL

     2527     2296    2           END;

     2528     2297        /*S* SCREECH_CODE: GMA-S$MM39
     2529     2298             TYPE: SCREECH
     2530     2299             MESSAGE: Mode Memory or Account Memory count has gone negative.
     2531     2300        */
     2532     2301
     2533     2302    1   END GMA$CHKSIZE;

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:351  
   2302   2 000280  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:352  
--  Include file information  --

   MM_SCODE_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   GH_SCHD_E.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GFR_DATA_M.:E05TOU  is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   GM_MACRO_M.:E05TOU  is referenced.
   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure GMA$CHKSIZE.
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:353  

 **** Variables and constants ****

  ****  Section 000  Data  GMA$CHKSIZE

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN(16)    r     1 GM_REG_4_MEM

  ****  Section 001 RoData GMA$CHKSIZE

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w STRC(32)    r     1 E$ACCT_MEMLIMIT            2-0-0/w STRC(32)    r     1 E$BRKCTY
     0-0-0/w STRC(32)    r     1 E$MEMLIMIT                 6-0-0/w STRC(32)    r     1 E$MODE_MEMLIMIT
     8-0-0/w STRC(32)    r     1 E$PHYS_MEMLIMIT            A-0-0/w STRC(48)    r     1 GONE_NEGATIVE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CHKSZ                     B-0-0/w UBIN(16)    r     1 ACC
    *0-0-0/w STRC(64)    r     1 CHKSZ                      A-0-0/w UBIN(16)    r     1 GM@SHUF
     C-0-0/w UBIN(16)    r     1 MODE                       8-0-0/w UBIN(16)    r     1 PSIZE
     9-0-0/w UBIN(16)    r     1 RSIZE                      6-0-0/w UBIN(16)    r     1 SIZE
     E-0-0/w PTR         r     1 T$                         D-0-0/w UBIN(16)    r     1 TABLE_UPDATED
     7-0-0/w UBIN(16)    r     1 USIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$BOBCAT$                  0-0-0/w PTR         r     1 G$JIT$
     0-0-0/w UBIN(16)    r     1 GFR_CUR_MEM(0:4)
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:354  
     0-0-0/w UBIN(16)    r     1 GFR_MAX_MEM(0:4)
     0-0-0/w STRC(48)    r     1 GFR_RES_LOCK               0-0-0/w UBIN(16)    r     1 GM_ASHUF
     0-0-0/w UBIN(16)    r     1 GM_SHUF                    0-0-0/w UBIN(16)    r     1 GM_STEP

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1696)  r     1 G$BOBCAT                   0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(224)   r     1 GFR$ACCT(0:0)


   Procedure GMA$CHKSIZE requires 643 words for executable code.
   Procedure GMA$CHKSIZE requires 18 words of local(AUTO) storage.

    No errors detected in file GMA$LGP.:E05TSI    .
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:355  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:356  
          MINI XREF LISTING

ACC
      1186**DCL      2142<<ASSIGN   2152>>IF       2152>>IF       2154>>ASSIGN   2154>>ASSIGN   2179>>ASSIGN
      2179>>ASSIGN   2229>>ASSIGN   2229>>ASSIGN
ACCTMEM_SCREECH
      2281**LABEL    2280--GOTO
CHKSZ
      1092**DCL        46--PROC     2263--ENTRY
CHKSZ.ERR
      1113**DCL      2031<<ASSIGN   2077<<ASSIGN   2108<<ASSIGN   2128<<ASSIGN   2155<<ASSIGN   2165<<ASSIGN
      2210<<ASSIGN   2218<<ASSIGN
CHKSZ.FLGS.CHK_ONLY
      1147**DCL      2175>>IF       2195>>IF
CHKSZ.FLGS.NSHUF
      1166**DCL      2067>>IF
CHKSZ.FLGS.PARK
      1160**DCL      2105>>IF       2207>>IF
CHKSZ.FLGS.REQ_ALL
      1154**DCL      2103>>IF       2177>>IF       2199>>IF
CHKSZ.FLGS.STEP
      1172**DCL      2054>>IF       2197>>IF
CHKSZ.SIZE
      1093**DCL      2029>>ASSIGN   2238<<ASSIGN   2257<<ASSIGN   2269>>ASSIGN
E$ACCT_MEMLIMIT
      1838**DCL      2155>>ASSIGN
E$BRKCTY
      1791**DCL      2218>>ASSIGN
E$MEMLIMIT
      1744**DCL      2128>>ASSIGN
E$MODE_MEMLIMIT
      1885**DCL      2165>>ASSIGN
E$PHYS_MEMLIMIT
      1932**DCL      2077>>ASSIGN   2108>>ASSIGN   2210>>ASSIGN
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:357  
ERR_FOR_NOW
      2209**LABEL    2214--GOTO
G$BOBCAT.ACCT_RES$
      1198**DCL      2141>>ASSIGN   2270>>ASSIGN
G$BOBCAT$
      1697**DCL      1194--IMP-PTR  2141>>ASSIGN   2270>>ASSIGN
G$JIT.CQPC
      1413**DCL      2042>>ASSIGN
G$JIT.ERRLOG
      1563**DCL      1566--REDEF
G$JIT.GFR_ACCT
      1569**DCL      2139>>IF       2142>>ASSIGN   2267>>IF       2279>>IF       2281>>ASSIGN   2281>>ASSIGN
G$JIT.JSUNIT
      1302**DCL      1303--REDEF
G$JIT.MAXMEM
      1412**DCL      2125>>IF       2127>>ASSIGN
G$JIT.MCLS
      1301**DCL      1301--REDEF
G$JIT.MMFLGS.FREE_PPGS
      1411**DCL      2120>>IF
G$JIT.MODE
      1290**DCL      2059>>IF       2143>>ASSIGN   2283>>IF       2288>>ASSIGN   2288>>ASSIGN
G$JIT.NSPC
      1410**DCL      2042>>ASSIGN
G$JIT.PCC
      1409**DCL      2042>>ASSIGN
G$JIT.PCD
      1407**DCL      2042>>ASSIGN
G$JIT.PCDDS
      1409**DCL      2042>>ASSIGN
G$JIT.PCDS
      1409**DCL      2042>>ASSIGN
G$JIT.PCL
      1408**DCL      2042>>ASSIGN
G$JIT.PCP
      1408**DCL      2064>>ASSIGN   2121>>ASSIGN
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:358  
G$JIT.PCROS
      1410**DCL      2042>>ASSIGN
G$JIT.PEAK_MEM
      1300**DCL      2252>>IF       2253<<ASSIGN
G$JIT.PRIV.ACTIVE
      1433**DCL      2123>>IF
G$JIT.PSEUDOPGS
      1412**DCL      2042>>ASSIGN
G$JIT.TMRZ
      1570**DCL      1571--REDEF
G$JIT.USER_EXTIME
      1294**DCL      1295--REDEF
G$JIT.USER_MEMTIME
      1297**DCL      1297--REDEF
G$JIT.USER_SVTIME
      1296**DCL      1296--REDEF
G$JIT$
      1696**DCL      1233--IMP-PTR  2042>>ASSIGN   2042>>ASSIGN   2042>>ASSIGN   2042>>ASSIGN   2042>>ASSIGN
      2042>>ASSIGN   2042>>ASSIGN   2042>>ASSIGN   2042>>ASSIGN   2059>>IF       2064>>ASSIGN   2120>>IF
      2121>>ASSIGN   2123>>IF       2125>>IF       2127>>ASSIGN   2139>>IF       2142>>ASSIGN   2143>>ASSIGN
      2252>>IF       2253>>ASSIGN   2267>>IF       2279>>IF       2281>>ASSIGN   2281>>ASSIGN   2283>>IF
      2288>>ASSIGN   2288>>ASSIGN
GFR$ACCT.CUR_MEM
      1216**DCL      2152>>IF       2154>>ASSIGN   2179<<ASSIGN   2179>>ASSIGN   2229<<ASSIGN   2229>>ASSIGN
      2279>>IF       2281<<ASSIGN   2281>>ASSIGN
GFR$ACCT.MAX_MEM
      1216**DCL      2152>>IF       2154>>ASSIGN
GFR_CUR_MEM
      1698**DCL      2162>>IF       2164>>ASSIGN   2180<<ASSIGN   2180>>ASSIGN   2230<<ASSIGN   2230>>ASSIGN
      2283>>IF       2288<<ASSIGN   2288>>ASSIGN
GFR_MAX_MEM
      1699**DCL      2162>>IF       2164>>ASSIGN
GFR_RES_LOCK
      1716**DCL      2149<>CALL     2189<>CALL     2227<>CALL     2236<>CALL     2276<>CALL     2294<>CALL
GHH$LOCK
       876**DCL-ENT  2149--CALL     2227--CALL     2276--CALL
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:359  
GHH$UNLOCK
       876**DCL-ENT  2189--CALL     2236--CALL     2294--CALL
GHS$REG
      1724**DCL-ENT  2216--CALL
GJS$REL_ALL
      1725**DCL-ENT  2090--CALL
GM@SHUF
      1185**DCL      2035<<ASSIGN   2036<<ASSIGN   2087>>IF       2089>>ASSIGN   2093<<ASSIGN   2094<<ASSIGN
      2101>>IF       2107>>ASSIGN   2205>>DOWHILE  2244<<ASSIGN   2245<<ASSIGN
GMA$LOCATE
      1726**DCL-ENT  2069--CALL
GM_ASHUF
      1701**DCL      2074>>IF       2076>>ASSIGN
GM_REG_4_MEM
      1191**DCL      2105>>IF       2214>>IF
GM_SHUF
      1700**DCL      2034>>IF       2035>>ASSIGN   2092>>IF       2093>>ASSIGN   2243>>IF       2244>>ASSIGN
GM_STEP
      1702**DCL      2034>>IF       2035>>ASSIGN   2092>>IF       2093>>ASSIGN   2243>>IF       2244>>ASSIGN
GONE_NEGATIVE
      1993**DCL      2286<>CALL
MODE
      1187**DCL      2143<<ASSIGN   2162>>IF       2162>>IF       2164>>ASSIGN   2164>>ASSIGN   2180>>ASSIGN
      2180>>ASSIGN   2230>>ASSIGN   2230>>ASSIGN
PSIZE
      1183**DCL      2061<<ASSIGN   2064<<ASSIGN   2074>>IF       2076>>ASSIGN   2089<<ASSIGN   2090<>CALL
PSIZE_CHK
      2067**LABEL    2069--CALLALT
REMOVE
      2218**LABEL    2211--GOTO
RSIZE
      1184**DCL      2030<<ASSIGN   2177>>IF       2199>>IF       2258>>IF
SCREECH
      1727**DCL-ENT  2286--CALL
SIZE
      1181**DCL      2029<<ASSIGN   2030>>ASSIGN   2069<>CALL     2074>>IF       2076<<ASSIGN   2087>>IF
PL6.E3A0      #002=GMA$CHKSIZE File=GMA$LGP.:E05TSI                              TUE 07/29/97 22:12 Page:360  
      2089>>ASSIGN   2101>>IF       2107<<ASSIGN   2125>>IF       2127<<ASSIGN   2152>>IF       2154<<ASSIGN
      2162>>IF       2164<<ASSIGN   2177>>IF       2179>>ASSIGN   2180>>ASSIGN   2199>>IF       2205>>DOWHILE
      2229>>ASSIGN   2230>>ASSIGN   2252>>IF       2253>>ASSIGN   2257>>ASSIGN   2258>>IF       2269<<ASSIGN
      2279>>IF       2281>>ASSIGN   2283>>IF       2288>>ASSIGN
SKIP_PSIZE_CHK
      2101**LABEL    2055--GOTO     2070--GOTO
T$
      1189**DCL      1212--IMP-PTR  2141<<ASSIGN   2152>>IF       2152>>IF       2154>>ASSIGN   2154>>ASSIGN
      2179>>ASSIGN   2179>>ASSIGN   2229>>ASSIGN   2229>>ASSIGN   2270<<ASSIGN   2279>>IF       2281>>ASSIGN
      2281>>ASSIGN
TABLE_UPDATED
      1188**DCL      2032<<ASSIGN   2181<<ASSIGN   2220>>IF
USIZE
      1182**DCL      2042<<ASSIGN   2064>>ASSIGN   2121<<ASSIGN   2121>>ASSIGN   2125>>IF       2127>>ASSIGN
      2252>>IF       2253>>ASSIGN
