/*M* ZW4$CTL_CARD - Options parser for the PL6 compiler */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*X* PLM=4,STI=2,IND=2,CTI=4,DCI=5,PRB=YES,ECI=3,CSI=3,THI=2,DTI=2,
     DIN=2,ENI=2,CLM=0,CCC,SQB,MCI,NTB,MOC,CCI=3,MCR=NO,NLB,MCL=0,EDMC  */
 
/*P*
     NAME: ZW4$CTL_CARD
     PURPOSE:
          Parse and interpret options from the command line
     DESCRIPTION:
          Using XUX$COMMON_OPTIONS, parse the options from the
          command line(s) and set appropriate fields in ZWI$OPTION
          accordingly.
*/
/*F*
     NAME: ZW4$CTL_CARD
     PURPOSE:
          Parse and interpret options from the command line
     DESCRIPTION:
          XUX$COMMON_OPTIONS is used to parse the options (if any)
          specified by the user on the !PL6 command line and any
          subsequent continuation lines. XUX$COMMON_OPTIONS detects
          and reports any syntax and semantic errors through the
          DCBs supplied. The non-standard nodes are handled with
          ZW4$USER_ROUTINE.
*/
/*D*
     NAME: ZW4$CTL_CARD
     CALL:
          CALL ZW4$CTL_CARD;
     INTERFACE:
          XUX$COMMON_OPTIONS
          ZWH$ERR$PRINT
     INPUT:
          Users command line (via B$JIT.CCBUF and/or *CONTINUATION_COMMANDS)
          via XUX$COMMON_OPTIONS in the form of a structure. (XUX$STD_OPTIONS).
     OUTPUT:
          Structures:   ZWI$OPTIONS
                        ZWI$ALT_FID
                        ZWI$BC_NBRS
     DESCRIPTION:
          XUX$COMMON_OPTIONS is called and returns a structure with
          bits set corresponding to options found and default conditions.
          ZW4$USER_ROUTINE is used to handle non-standard options.
*/
/*E*
    ERROR: ZW4-E$LPSWITHSO-1
    MESSAGE: Options LPS and SO are mutually exclusive. LPS ignored.
*/
%EJECT;
ZW4$CTL_CARD: PROC ALTRET;
 
%INCLUDE PREPPY_C61;
 
%PAGE(ARG=Includes);
%INCLUDE XUX$INTERFACE_M;
%INCLUDE PREPPY_C65;
%INCLUDE PREPPY_C64;
%INCLUDE ZWI$OPTION_C;
%INCLUDE PREPPY_C62;
 
%PAGE(ARG=Global Data);
%OPTION;
 
  DCL PREPPY_OPTION_EOD BIT(1) SYMREF;
  DCL PREPPY_OPTION_USC BIT(1) SYMREF;
 
%XUX$SRCH_LIST(NAME=ZWI$SRCH_LIST,STCLASS=SYMREF);
%BC;
  DCL ZWI$M$LO$ PTR SYMREF;
  DCL ZW4$OPT_NODES UBIN SYMREF;
%PAGE(ARG=Entries);
%ZWH$ERR_ENTRIES;
  DCL XUX$COMMON_OPTIONS ENTRY(1) ALTRET;
  DCL ZW4$USER_ROUTINE ENTRY(2) ALTRET;
 
%PAGE(ARG=Local Data);
  DCL ZW4$MARGIN UBIN STATIC SYMDEF;
  DCL OUT$ PTR;
  DCL I UBIN WORD;
  DCL DO_LO_SAME_SAVE BIT(1);
  DCL AN_ERROR_OCCURRED BIT(1) ALIGNED;
 
%PAGE(ARG=Common Options Parser Interface Data);
 %XUX$PARAM(DCB1=M$LO,
 DCB2=M$DO,
 USER_ROUTINE=ZW4$USER_ROUTINE,
 USER_NODES=ZW4$OPT_NODES,
 STCLASS=STATIC SYMDEF);
 %XUX$BC_UNIT;
 %XUX$LEGAL_OPTIONS(BC=YES, DCB_LS=YES, DCB_OU=YES, DCB_UI=YES,
 DMAP=NO, LO=NO, LS=YES, NSTD=YES, OU=NO,
 PMAP=NO, SCHEMA=NO, SO=YES, SRCH=YES, UI=YES,
 UREF=NO,WARN=YES,XREF=NO);
 %XUX$SRCH_LIST;
 %XUX$STD_OPTIONS;
%PAGE(ARG=System Interface Data);
%F$DCB;
  DCL M$LO DCB;
  DCL M$DO DCB;
%PAGE(ARG=ZW4$CTL_CARD,PAGE=YES);
    AN_ERROR_OCCURRED = '0'B;
 
    DO_LO_SAME_SAVE = ZWI$OPTION.DO_LO_SAME;
    ZWI$OPTION = '0'B;
    ZWI$OPTION.DO_LO_SAME = DO_LO_SAME_SAVE;
 
    ZWI$OPTION.LEVEL = '1'B;
    ZWI$OPTION.BC = '1'B;
    ZWI$OPTION.SEVERITY = 16;
    ZWI$OPTION.START = 1;
    ZWI$OPTION.SYSTEM = %$CP6;
    ZWI$OPTION.WIDTH = ZWI$M$LO$ -> F$DCB.WIDTH#;
    IF ZWI$OPTION.WIDTH ~= 0
      THEN DO;
        IF ZWI$OPTION.WIDTH < 60
          THEN DO;
            ZWI$OPTION.WIDTH = 60;
            END;
          ELSE IF ZWI$OPTION.WIDTH > 132
              THEN DO;
                ZWI$OPTION.WIDTH = 132;
                END;
        END;
      ELSE DO; /* Take care of assignment to files, no, etc. */
        ZWI$OPTION.WIDTH = 106;
        END;
 
 
    ZW4$MARGIN = 0;
    CALL XUX$COMMON_OPTIONS(XUX$PARAM)
      WHENALTRETURN DO;
      ALTRETURN;
      END;
 
 /*
    Assign the options from XUX$COMMON_OPTIONS into ZWI$OPTION
 */
 
    ZWI$BC_CNT = XUX$STD_OPTIONS.BC;
    DO I = 1 TO ZWI$BC_CNT;
      ZWI$BC_NBRS(I) = XUX$BC_UNIT(I);
      END;
    ZWI$OPTION.DM = XUX$STD_OPTIONS.DMAP;
    ZWI$OPTION.MDM = XUX$STD_OPTIONS.MDMAP;
 
    ZWI$OPTION.LO = XUX$STD_OPTIONS.LO;
    ZWI$OPTION.LS = XUX$STD_OPTIONS.LS;
 /* Force the ou option on because the preprocessed source is */
 /* written thru M$OU. */
    ZWI$OPTION.OU = '1'B;
    ZWI$OPTION.PM = XUX$STD_OPTIONS.PMAP;
 
    ZWI$OPTION.SCHEMA = '0'B;
    DO CASE(XUX$STD_OPTIONS.SCHEMA);
       CASE(%XUX$NONE); /* Full and mini are both 0 */
       CASE(%XUX$FULL);
         ZWI$OPTION.SCHEMA.FULL = '1'B;
       CASE(%XUX$MINI);
         ZWI$OPTION.SCHEMA.MINI = '1'B;
       END;
 
    ZWI$OPTION.SO = XUX$STD_OPTIONS.SO;
 
    ZWI$SRCH_LIST.NUM = XUX$SRCH_LIST.NUM;
    DO I = 0 TO ZWI$SRCH_LIST.NUM - 1;
      ZWI$SRCH_LIST.ACCT_LIST(I) = XUX$SRCH_LIST.ACCT_LIST(I);
      END;
 
    ZWI$OPTION.UI = XUX$STD_OPTIONS.UI;
    ZWI$OPTION.OPTUI = XUX$STD_OPTIONS.OPTUI;
    ZWI$OPTION.UREF = '0'B;
    DO CASE(XUX$STD_OPTIONS.UREF);
       CASE(%XUX$NONE);
       CASE(%XUX$FULL);
         ZWI$OPTION.UREF.FULL = '1'B;
       CASE(%XUX$MINI);
         ZWI$OPTION.UREF.MINI = '1'B;
       END;
 
    ZWI$OPTION.WARNING = XUX$STD_OPTIONS.WARN;
    ZWI$OPTION.XREF = '0'B;
    DO CASE(XUX$STD_OPTIONS.XREF);
       CASE(%XUX$NONE);
       CASE(%XUX$FULL);
         ZWI$OPTION.XREF.FULL = '1'B;
       CASE(%XUX$MINI);
         ZWI$OPTION.XREF.MINI = '1'B;
       END;
 
 /*
    All options have been set, now fixup any special conditions
 */
 
    IF ZWI$OPTION.SO AND ZWI$OPTION.LPS
      THEN DO;
        CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$LPSWITHSO,1);
        ZWI$OPTION.LPS = '0'B;
        END;
 
 
    IF NOT ZWI$OPTION.UI
      THEN DO;
        ZWI$OPTION.LU = '0'B;
        END;
 
    IF ZWI$OPTION.NSYS
      THEN DO;
 /*
    We want to remove :LIBRARY from the search list, but only if
    it was not specified by the user. If this is the case, then
    XUX$SRCH_LIST.NUM will be greater than XUX$SRCH_LIST.RCVD and
    the last item in the list will be :LIBRARY.
 */
        IF XUX$SRCH_LIST.NUM > XUX$SRCH_LIST.RCVD
          THEN DO;
            IF XUX$SRCH_LIST.ACCT_LIST.ACCT(XUX$SRCH_LIST.NUM) = ':LIBRARY'
              THEN DO;
                ZWI$SRCH_LIST.NUM = XUX$SRCH_LIST.NUM - 1;
                END;
            END;
        END;
END ZW4$CTL_CARD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ZW4$USER_ROUTINE: PROC(P_PCB$,P_ALTRET_NOW) ALTRET;
/*F*
     NAME: ZW4$USER_ROUTINE
     PURPOSE:
          Handles non-standard options on the command line
     DESCRIPTION:
          This routine is called by XUX$COMMON_OPTIONS to handle
          the non-standard (i.e. PL6-specific) options that are present
          on the command line.
*/
/*D*
     NAME: ZW4$USER_ROUTINE
     CALL:
          Not called directly, only through XUX$COMMON_OPTIONS
     PARAMETERS:
          P_PCB$ - Pointer to head of the non-standard nodes found
          P_ALTRET_NOW - if set on ALTRETURN, then XUX$COMMON_OPTIONS
                         will cease processing options immediately
     INPUT:
          P_PCB$
     OUTPUT:
          Structures:   ZWI$OPTIONS
                        ZWI$DEBUG_FLAGS
                        ZWI$SHARED_LIBRARY_NAME
                        ZWI$ALT_SHARED_LIBRARY_NAME
     DESCRIPTION:
          This module is called by XUX$COMMON_OPTIONS when one of the
          non-standard (PL6 specific) options is encountered. The action
          taken here is to go through the parse nodes returned and
          setup the globals (the ZWI stuff) correctly.
*/
/*E*
    ERROR: ZW4-E$PRSERR-3
    MESSAGE: Internal error: Invalid node %U1 returned.
    DESCRIPTION: This error seems to be an "impossible condition,"
                 assuming that X$PARSE will return only blocks
                 with OUT$BLK.CODE having legal values and that
                 any other case results in an altreturn.
*/
/*E*
    ERROR: ZW4-E$BAD_DBG-1
    MESSAGE: Invalid debug number %U1 ignored.
*/
/*E*
    ERROR: ZW4-E$START_ERROR-1
    MESSAGE: Legal values for START are 1, 2, 4 or 8 .
             %U1 was specified, 1 was assumed.
*/
/*E*
     ERROR:ZW4-E$DUPE_OPTION-1
     MESSAGE:%U2 was found but %U1 was already specified. %U2 will be ignored.
*/
%EJECT;
%INCLUDE PREPPY_C61;
 
%PAGE(ARG=Includes);
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE PREPPY_C65;
%INCLUDE PREPPY_C64;
%INCLUDE ZWI$OPTION_C;
%INCLUDE PREPPY_C62;
%INCLUDE PREPPY_C63;
 
%PAGE(ARG=Global Data);
%OPTION;
 
  DCL PREPPY_OPTION_EOD BIT(1) SYMREF;
  DCL PREPPY_OPTION_USC BIT(1) SYMREF;
 
%DEBUG;
%ZWI$SHARED_LIBRARY_NAME;
%ZWI$ALT_SHARED_LIBRARY_NAME;
 
%PAGE(ARG=Parameters);
  DCL P_PCB$ PTR;
  DCL P_ALTRET_NOW BIT(1);
 
%PAGE(ARG=Entries);
%ZWH$ERR_ENTRIES;
  DCL ZQW$STARXOPTIONS ENTRY(1);
  DCL ZQW$SET_REAL_DEFAULT_OPTIONS ENTRY;
  DCL ZQW$REMEMBER_DEFAULT_OPTIONS ENTRY;
 
%PAGE(ARG=Local Data);
  DCL I SBIN;
  DCL J SBIN;
  DCL TEMP UBIN;
  DCL TEMP_LEN UBIN;
  DCL TEMP_OPT CHAR(20);
  DCL OUT$ PTR;
  DCL 1 GOT STATIC,
        2 SYS UBIN HALF INIT(0),
        2 MACHINE UBIN HALF INIT(0),
        2 LPS UBIN HALF INIT(0),
        2 DEBUG UBIN HALF INIT(0),
        2 LU UBIN HALF INIT(0),
        2 FORMAT UBIN HALF INIT(0),
        2 START UBIN HALF INIT(0),
        2 LEVEL UBIN HALF INIT(0),
        2 SEVERITY UBIN HALF INIT(0),
        2 AUTOTEMP UBIN HALF INIT(0),
        2 SYNTAX UBIN HALF INIT(0),
        2 SHARED_LIB UBIN HALF INIT(0),
        2 ASL UBIN HALF INIT(0),
        2 EOD UBIN HALF INIT(0),
        2 USC UBIN HALF INIT(0);
 
  DCL 1 OPT_MSG BASED(T$),
        2 LEN UBIN BYTE CALIGNED,
        2 TEXT CHAR(OPT_MSG.LEN);
  DCL T$ PTR;
 
  DCL 1 T ALIGNED CONSTANT,
%SET NEXT = 1;
 %EQU OFF_CSYS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR (4) CALIGNED INIT('CSYS'),
 %SET NEXT = NEXT + 5;
 %EQU OFF_SYS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR (3) CALIGNED INIT('SYS'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_NSYS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR (4) CALIGNED INIT('NSYS'),
 %SET NEXT = NEXT + 5;
 %EQU OFF_FEP = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR (3) CALIGNED INIT('FEP'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_CP6 = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR (3) CALIGNED INIT('CP6'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_GCOS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR (4) CALIGNED INIT('GCOS'),
 %SET NEXT = NEXT + 5;
 %EQU OFF_LPS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR (3) CALIGNED INIT('LPS'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_NLPS = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR (4) CALIGNED INIT('NLPS'),
 %SET NEXT = NEXT + 5;
 %EQU OFF_DEBUG = NEXT;
        2 * UBIN BYTE CALIGNED INIT(7),
        2 * CHAR (7) CALIGNED INIT('$DEBUG$'),
 %SET NEXT = NEXT + 8;
 %EQU OFF_LU = NEXT;
        2 * UBIN BYTE CALIGNED INIT(2),
        2 * CHAR (2) CALIGNED INIT('LU'),
 %SET NEXT = NEXT + 3;
 %EQU OFF_NLU = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR (3) CALIGNED INIT('NLU'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_FORMAT = NEXT;
        2 * UBIN BYTE CALIGNED INIT(6),
        2 * CHAR (6) CALIGNED INIT('FORMAT'),
 %SET NEXT = NEXT + 7;
 %EQU OFF_NFORMAT = NEXT;
        2 * UBIN BYTE CALIGNED INIT(7),
        2 * CHAR (7) CALIGNED INIT('NFORMAT'),
 %SET NEXT = NEXT + 8;
 %EQU OFF_LEVEL = NEXT;
        2 * UBIN BYTE CALIGNED INIT(5),
        2 * CHAR (5) CALIGNED INIT('LEVEL'),
 %SET NEXT = NEXT + 6;
 %EQU OFF_NLEVEL = NEXT;
        2 * UBIN BYTE CALIGNED INIT(6),
        2 * CHAR (6) CALIGNED INIT('NLEVEL'),
 %SET NEXT = NEXT + 7;
 %EQU OFF_SEVERITY = NEXT;
        2 * UBIN BYTE CALIGNED INIT(8),
        2 * CHAR (8) CALIGNED INIT('SEVERITY'),
 %SET NEXT = NEXT + 9;
 %EQU OFF_AUTOTEMP = NEXT;
        2 * UBIN BYTE CALIGNED INIT(8),
        2 * CHAR (8) CALIGNED INIT('AUTOTEMP'),
 %SET NEXT = NEXT + 9;
 %EQU OFF_SYNTAX = NEXT;
        2 * UBIN BYTE CALIGNED INIT(6),
        2 * CHAR (6) CALIGNED INIT('SYNTAX'),
 %SET NEXT = NEXT + 7;
 %EQU OFF_START = NEXT;
        2 * UBIN BYTE CALIGNED INIT(5),
        2 * CHAR (5) CALIGNED INIT('START'),
 %SET NEXT = NEXT + 6;
 %EQU OFF_ASL = NEXT;
        2 * UBIN BYTE CALIGNED INIT(11),
        2 * CHAR(11) CALIGNED INIT('ALTSHARELIB'),
 %SET NEXT = NEXT + 12;
 %EQU OFF_SHARELIB = NEXT;
        2 * UBIN BYTE CALIGNED INIT(8),
        2 * CHAR(8) CALIGNED INIT('SHARELIB'),
 %SET NEXT = NEXT + 9;
 %SET OFF_NOSH = NEXT;
        2 * UBIN BYTE CALIGNED INIT(10),
        2 * CHAR(10) CALIGNED INIT('NOSHARELIB'),
 %SET NEXT = NEXT + 11;
 %EQU OFF_EOD = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR(3) CALIGNED INIT('EOD'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_NEOD = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR(4) CALIGNED INIT('NEOD'),
 %SET NEXT = NEXT + 5;
 %EQU OFF_USC = NEXT;
        2 * UBIN BYTE CALIGNED INIT(3),
        2 * CHAR(3) CALIGNED INIT('USC'),
 %SET NEXT = NEXT + 4;
 %EQU OFF_NUSC = NEXT;
        2 * UBIN BYTE CALIGNED INIT(4),
        2 * CHAR(4) CALIGNED INIT('NUSC');
 
%PAGE(ARG=Parser Interface Data);
%PARSE$OUT(NAME=OUT$BLK,STCLASS="BASED(OUT$)");
%PARSE$SYM(NAME=OUT$SYM,STCLASS="BASED(OUT$)");
%PAGE(ARG=ZW4$USER_ROUTINE,PAGE=YES);
    OUT$ = P_PCB$;
    DO CASE(OUT$BLK.CODE);
%PAGE(ARG=DEBUG);
       CASE(%#DEBUG);
         IF GOT.DEBUG ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.DEBUG-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,7,'$DEBUG$',2);
             END;
           ELSE DO;
             DO I = 0 TO OUT$BLK.NSUBLKS - 1;
               CALL CHARBIN(J, OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT);
               IF J > 35
                 THEN DO;
                   CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$BAD_DBG,1,J);
                   END;
                 ELSE DO;
                   ZWI$DEBUG_FLAGS(J) = '1'B;
                   GOT.DEBUG = %OFF_DEBUG;
                   END;
               END; /* Do i */
             END;
%PAGE(ARG=SYS options);
       CASE(%#CSYS,%#SYS,%#NSYS);
         IF GOT.SYS ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#CSYS);
                  TEMP_OPT = 'CSYS';
                  TEMP_LEN = 4;
                CASE(%#SYS);
                  TEMP_OPT = 'SYS';
                  TEMP_LEN = 3;
                CASE(%#NSYS);
                  TEMP_OPT = 'NSYS';
                  TEMP_LEN = 4;
                END;
             T$ = PINCRC(ADDR(T),GOT.SYS-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#CSYS);
                  ZWI$OPTION.CSYS = '1'B;
                  GOT.SYS = %OFF_CSYS;
                CASE(%#SYS);
                  GOT.SYS = %OFF_SYS;
                CASE(%#NSYS);
                  ZWI$OPTION.NSYS = '1'B;
                  GOT.SYS = %OFF_NSYS;
                END;
             END;
 
%PAGE(ARG=MACHINE options);
       CASE(%#FEP,%#CP6);
         IF GOT.MACHINE ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#FEP);
                  TEMP_OPT = 'FEP';
                  TEMP_LEN = 3;
                CASE(%#CP6);
                  TEMP_OPT = 'CP6';
                  TEMP_LEN = 3;
                END;
             T$ = PINCRC(ADDR(T),GOT.MACHINE-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#CP6);
                  ZWI$OPTION.SYSTEM = %$CP6;
                  GOT.MACHINE = %OFF_CP6;
                CASE(%#FEP);
                  ZWI$OPTION.SYSTEM = %$L6;
                  GOT.MACHINE = %OFF_FEP;
                END;
             END;
%PAGE(ARG=LEVEL options);
       CASE(%#LEV,%#NLEVEL);
         IF GOT.LEVEL ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LEV);
                  TEMP_OPT = 'LEVEL';
                  TEMP_LEN = 5;
                CASE(%#NLEVEL);
                  TEMP_OPT = 'NLEVEL';
                  TEMP_LEN = 6;
                END;
             T$ = PINCRC(ADDR(T),GOT.LEVEL-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LEV);
                  ZWI$OPTION.LEVEL = '1'B;
                  GOT.LEVEL = %OFF_LEVEL;
                CASE(%#NLEVEL);
                  ZWI$OPTION.LEVEL = '0'B;
                  GOT.LEVEL = %OFF_NLEVEL;
                END;
             END;
%PAGE(ARG=SEVERITY);
       CASE(%#SEV);
         IF GOT.SEVERITY ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.SEVERITY-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,8,'SEVERITY',2);
             END;
           ELSE DO;
             CALL CHARBIN(ZWI$OPTION.SEVERITY, OUT$SYM.TEXT);
             GOT.SEVERITY = %OFF_SEVERITY;
             END;
%PAGE(ARG=AUTOTEMP);
       CASE(%#AUTO_VAL);
         IF GOT.AUTOTEMP ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.AUTOTEMP-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,8,'SEVERITY',2);
             END;
           ELSE DO;
             CALL CHARBIN(ZWI$OPTION.AUTO_TEMP, OUT$SYM.TEXT);
             GOT.AUTOTEMP = %OFF_AUTOTEMP;
             END;
%PAGE(ARG=SYNTAX);
       CASE(%#SYN);
         IF GOT.SYNTAX ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.SYNTAX-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,8,'SEVERITY',2);
             END;
           ELSE DO;
             ZWI$OPTION.SYN = '1'B;
             GOT.SYNTAX = %OFF_SYNTAX;
             END;
%PAGE(ARG=LU options);
       CASE(%#LU,%#NLU);
         IF GOT.LU ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LU);
                  TEMP_OPT = 'LU';
                  TEMP_LEN = 2;
                CASE(%#NLU);
                  TEMP_OPT = 'NLU';
                  TEMP_LEN = 3;
                END;
             T$ = PINCRC(ADDR(T),GOT.LU-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LU);
                  ZWI$OPTION.LU = '1'B;
                  GOT.LEVEL = %OFF_LU;
                CASE(%#NLU);
                  ZWI$OPTION.LU = '0'B;
                  GOT.LEVEL = %OFF_NLU;
                END;
             END;
%PAGE(ARG=EOD options);
       CASE(%#EOD,%#NEOD);
         IF GOT.EOD ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#EOD);
                  TEMP_OPT = 'EOD';
                  TEMP_LEN = 3;
                CASE(%#NEOD);
                  TEMP_OPT = 'NEOD';
                  TEMP_LEN = 4;
                END;
             T$ = PINCRC(ADDR(T),GOT.EOD-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#EOD);
                  PREPPY_OPTION_EOD = '1'B;
                  GOT.LEVEL = %OFF_EOD;
                CASE(%#NEOD);
                  PREPPY_OPTION_EOD = '0'B;
                  GOT.LEVEL = %OFF_NEOD;
                END;
             END;
%PAGE(ARG=USC options);
       CASE(%#USC,%#NUSC);
         IF GOT.USC ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#USC);
                  TEMP_OPT = 'USC';
                  TEMP_LEN = 3;
                CASE(%#NUSC);
                  TEMP_OPT = 'NUSC';
                  TEMP_LEN = 4;
                END;
             T$ = PINCRC(ADDR(T),GOT.USC-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#USC);
                  PREPPY_OPTION_USC = '1'B;
                  GOT.LEVEL = %OFF_USC;
                CASE(%#NUSC);
                  PREPPY_OPTION_USC = '0'B;
                  GOT.LEVEL = %OFF_NUSC;
                END;
             END;
%PAGE(ARG=FORMAT options);
       CASE(%#FORMAT,%#NFORMAT);
         IF GOT.FORMAT ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#FORMAT);
                  TEMP_OPT = 'FORMAT';
                  TEMP_LEN = 6;
                CASE(%#NFORMAT);
                  TEMP_OPT = 'NFORMAT';
                  TEMP_LEN = 7;
                END;
             T$ = PINCRC(ADDR(T),GOT.FORMAT-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#FORMAT);
                  ZWI$OPTION.FORMAT = '1'B;
                  GOT.FORMAT = %OFF_FORMAT;
                  CALL ZQW$SET_REAL_DEFAULT_OPTIONS;
                  IF OUT$BLK.NSUBLKS > 0
                    THEN CALL ZQW$STARXOPTIONS (OUT$BLK.SUBLK$(0));
                  CALL ZQW$REMEMBER_DEFAULT_OPTIONS;
                CASE(%#NFORMAT);
                  ZWI$OPTION.FORMAT = '0'B;
                  GOT.FORMAT = %OFF_NFORMAT;
                END;
             END;
%PAGE(ARG=START);
       CASE(%#START);
         IF GOT.START ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.START-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,5,'START',2);
             END;
           ELSE DO;
             CALL CHARBIN(J, OUT$SYM.TEXT);
             IF NOT (J=1 OR J=2 OR J=4 OR J=8)
               THEN DO;
                 CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID, %E$START_ERROR,1,J);
                 J = 1;
                 END;
 
             ZWI$OPTION.START = J;
             GOT.START = %OFF_START;
             END;
%PAGE(ARG=LPS options);
       CASE(%#LPS,%#NLPS);
         IF GOT.LPS ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LPS);
                  TEMP_OPT = 'LPS';
                  TEMP_LEN = 3;
                CASE(%#NLPS);
                  TEMP_OPT = 'NLPS';
                  TEMP_LEN = 4;
                END;
             T$ = PINCRC(ADDR(T),GOT.LPS-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#LPS);
                  ZWI$OPTION.LPS = '1'B;
                  GOT.LPS = %OFF_LPS;
                CASE(%#NLPS);
                  ZWI$OPTION.LPS = '0'B;
                  GOT.LPS = %OFF_NLPS;
                END;
             END;
%PAGE(ARG=SHARELIB & NOSH);
       CASE(%#SHARED_LIB,%#NOSH);
         IF GOT.SHARED_LIB ~= 0
           THEN DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#SHARED_LIB);
                  TEMP_OPT = 'SHARELIB';
                  TEMP_LEN = 8;
                CASE(%#NOSH);
                  TEMP_OPT = 'NOSHARELIB';
                  TEMP_LEN = 10;
                END;
             T$ = PINCRC(ADDR(T),GOT.SHARED_LIB-1);
             TEMP = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,TEMP,OPT_MSG.TEXT,TEMP_LEN,TEMP_OPT);
             END;
           ELSE DO;
             DO CASE(OUT$BLK.CODE);
                CASE(%#SHARED_LIB);
                  ZWI$OPTION.SHARED_LIB = '1'B;
                  GOT.SHARED_LIB = %OFF_SHARELIB;
                  ZWI$SHARED_LIBRARY_NAME.TEXT = OUT$SYM.TEXT;
                  ZWI$SHARED_LIBRARY_NAME.LENGTH = OUT$SYM.COUNT;
                CASE(%#NOSH);
                  ZWI$OPTION.SHARED_LIB = '0'B;
                  GOT.SHARED_LIB = %OFF_NOSH;
                  ZWI$SHARED_LIBRARY_NAME.TEXT = ' ';
                  ZWI$SHARED_LIBRARY_NAME.LENGTH = 0;
                END;
             END;
%PAGE(ARG=ALTSHARELIB);
       CASE(%#ASL);
         IF GOT.ASL ~= 0
           THEN DO;
             T$ = PINCRC(ADDR(T),GOT.ASL-1);
             I = OPT_MSG.LEN;
             CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$DUPE_OPTION,1,I,OPT_MSG.TEXT,11,'ALTSHARELIB',2);
             END;
           ELSE DO;
             ZWI$OPTION.ALT_SHARED_LIB = '1'B;
             GOT.ASL = %OFF_ASL;
             ZWI$ALT_SHARED_LIBRARY_NAME.TEXT = OUT$SYM.TEXT;
             ZWI$ALT_SHARED_LIBRARY_NAME.LENGTH = OUT$SYM.COUNT;
             END;
%PAGE(ARG=ELSE);
       CASE(ELSE);
         CALL ZWH$ERR$PRINT(0,0,%ZW4$FCG_MID,%E$PRSERR,4);
         P_ALTRET_NOW = '1'B;
         ALTRETURN;
 
       END; /* Do case */
END ZW4$USER_ROUTINE;
