VERSION B06

PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:1    
        1        1        /*M* VWF$FOOTER - Provide closing boilerplate JCL. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*F**
        9        9        *
       10       10        *   NAME:  VWF$FOOTER
       11       11        *
       12       12        *   PURPOSE:
       13       13        *       To provide closing JCL for a transfer packet.
       14       14        *
       15       15        *   DESCRIPTION:
       16       16        *       Provide end-of-packet JCL based on the target system type.
       17       17        *
       18       18        *   REFERENCE:
       19       19        *       For a description of the transfer packet formats, see the
       20       20        *       appropriate Architecture File document.
       21       21        *
       22       22        ****/
       23       23
       24       24        /*D**
       25       25        *
       26       26        *   NAME:  VWF$FOOTER
       27       27        *
       28       28        *   CALL:
       29       29        *       CALL VWF$FOOTER(dcbno,buf,pathtype) ALTRET...
       30       30        *
       31       31        *   PARAMETERS:
       32       32        *       dcbno - is the DCB through which data are to be written.  buf -
       33       33        *       is the buffer (80 bytes) in which all output is to be placed.
       34       34        *       pathtype - is the type of node from the :NODES file.
       35       35        *
       36       36        *   INTERFACE:
       37       37        *       None.
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:2    
       38       38        *
       39       39        *   ENVIRONMENT:
       40       40        *       The DCB passed must be open for writing.
       41       41        *
       42       42        *   INPUT:
       43       43        *       dcbno and pathtype are input parameters.
       44       44        *
       45       45        *   OUTPUT:
       46       46        *       buf is modified with closing JCL.
       47       47        *
       48       48        *   SCRATCH:
       49       49        *       None.
       50       50        *
       51       51        *   DESCRIPTION:
       52       52        *       FOOTER builds the footer "cards" in back of any transmission
       53       53        *       packet.  DCBNO is the DCB to which the packet information is to
       54       54        *       be sent, BUF is the I/O buffer to use, and PATHTYPE is an SBIN
       55       55        *       WORD value which indicates the path type of the (first) node.
       56       56        *
       57       57        ****/
       58       58
       59       59        VWF$FOOTER: PROC(DCBNO,BUF,PATHTYPE) ALTRET;
       60       60
       61       61        /****
       62       62        *
       63       63        *   %INCLUDEs
       64       64        *
       65       65        ****/
       66       66
       67       67        %INCLUDE CP_6;
       68     5626        %INCLUDE VW_NODEATER_E;
       69     5682
       70     5683        /****
       71     5684        *
       72     5685        *   FPTs
       73     5686        *
       74     5687        ****/
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:3    
       75     5688
       76     5689        %FPT_WRITE;
       77     5720
       78     5721        %F$DCB(DCBN=DUMMY);
       79     5778
       80     5779        /****
       81     5780        *
       82     5781        *   Parameters
       83     5782        *
       84     5783        ****/
       85     5784
       86     5785    1   DCL DCBNO                          SBIN;
       87     5786    1   DCL BUF                            CHAR(80);
       88     5787    1   DCL PATHTYPE                       SBIN;
       89     5788
       90     5789        /****
       91     5790        *
       92     5791        *   Local variables
       93     5792        *
       94     5793        ****/
       95     5794
       96     5795    1   DCL I                              SBIN;
       97     5796
       98     5797        /****
       99     5798        *
      100     5799        *   Initialize the write FPT with the data passed.
      101     5800        *
      102     5801        ****/
      103     5802
      104     5803    1           FPT_WRITE.BUF_.BOUND=79;
      105     5804    1           FPT_WRITE.BUF_.BUF$=ADDR(BUF);
      106     5805    1           FPT_WRITE.V.DCB#=DCBNO;
      107     5806
      108     5807        /****
      109     5808        *
      110     5809        *   If the DCB is opened, supply the "positive EOF" record, which
      111     5810        *   consists of 20 repetitions of " EOF" (note leading blank).  The
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:4    
      112     5811        *   blank in column one is an illegal length byte, which causes the
      113     5812        *   EVOM routine to examine the record contents for a message.  The
      114     5813        *   EOF code marks end-of-file.  If this record is not found before
      115     5814        *   physical end-of-file in a transmission packet, the packet is
      116     5815        *   considered incomplete and EVOM will not save the output, if that
      117     5816        *   is possible (transmission INTO an existing file will have already
      118     5817        *   taken place).
      119     5818        *
      120     5819        *   This module may also perform additional tasks based upon the type
      121     5820        *   of the node specified.
      122     5821        *
      123     5822        ****/
      124     5823
      125     5824    2           IF DCBADDR(DCBNO)->DUMMY.FCD# THEN DO;
      126     5825    3              DO I=0 TO 76 BY 4;
      127     5826    3                 CALL INSERT(BUF,I,4,' EOF');
      128     5827    3                 END;
      129     5828    3              CALL M$WRITE(FPT_WRITE) WHENALTRETURN DO;
      130     5829    3                 ALTRETURN;
      131     5830    3                 END;
      132     5831    2              END;
      133     5832
      134     5833        /****
      135     5834        *
      136     5835        *   Additional JCL, if required, may be generated here, based upon
      137     5836        *   the node type specified in PATHTYPE.
      138     5837        *
      139     5838        ****/
      140     5839
      141     5840    2           DO SELECT(PATHTYPE);
      142     5841
      143     5842        /****
      144     5843        *
      145     5844        *   For GCOS-6 using PF/3271 as a transport vehicle, we must generate
      146     5845        *   a screenful of EOF records to force a new screen page.  We've
      147     5846        *   already written one (above); now do 23 more to ensure that we get
      148     5847        *   an ENTER TO GO on the screen.
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:5    
      149     5848        *
      150     5849        ****/
      151     5850
      152     5851    2              SELECT(%N_GCOS6PF#);
      153     5852    3              IF DCBADDR(DCBNO)->DUMMY.FCD# THEN DO;
      154     5853    4                 DO I=1 TO 23;
      155     5854    5                    CALL M$WRITE(FPT_WRITE) WHENALTRETURN DO;
      156     5855    5                       ALTRETURN;
      157     5856    5                       END;
      158     5857    4                    END;
      159     5858    3                 END;
      160     5859
      161     5860        /****
      162     5861        *
      163     5862        *   All other systems do nothing.
      164     5863        *
      165     5864        ****/
      166     5865
      167     5866    2              SELECT(ELSE);
      168     5867    2           ;
      169     5868
      170     5869    2              END /* DO SELECT */;
      171     5870
      172     5871    1           RETURN;
      173     5872
      174     5873    1   END;

PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:6    
--  Include file information  --

   VW_NODEATER_E.:VMB6TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VWF$FOOTER.

   Procedure VWF$FOOTER requires 62 words for executable code.
   Procedure VWF$FOOTER requires 8 words of local(AUTO) storage.

    No errors detected in file VWF$FOOTER.:VMB6TSI    .

PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:7    

 Object Unit name= VWF$FOOTER                                 File name= VWF$FOOTER.:VMB6TOU
 UTS= AUG 20 '97 15:39:43.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    12     14  VWF$FOOTER
    2  RoData even  UTS      1      1  VWF$FOOTER
    3   Proc  even  none    62     76  VWF$FOOTER
    4  RoData even  none     2      2  VWF$FOOTER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  VWF$FOOTER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:8    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:9    


        1        1        /*M* VWF$FOOTER - Provide closing boilerplate JCL. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*F**
        9        9        *
       10       10        *   NAME:  VWF$FOOTER
       11       11        *
       12       12        *   PURPOSE:
       13       13        *       To provide closing JCL for a transfer packet.
       14       14        *
       15       15        *   DESCRIPTION:
       16       16        *       Provide end-of-packet JCL based on the target system type.
       17       17        *
       18       18        *   REFERENCE:
       19       19        *       For a description of the transfer packet formats, see the
       20       20        *       appropriate Architecture File document.
       21       21        *
       22       22        ****/
       23       23
       24       24        /*D**
       25       25        *
       26       26        *   NAME:  VWF$FOOTER
       27       27        *
       28       28        *   CALL:
       29       29        *       CALL VWF$FOOTER(dcbno,buf,pathtype) ALTRET...
       30       30        *
       31       31        *   PARAMETERS:
       32       32        *       dcbno - is the DCB through which data are to be written.  buf -
       33       33        *       is the buffer (80 bytes) in which all output is to be placed.
       34       34        *       pathtype - is the type of node from the :NODES file.
       35       35        *
       36       36        *   INTERFACE:
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:10   
       37       37        *       None.
       38       38        *
       39       39        *   ENVIRONMENT:
       40       40        *       The DCB passed must be open for writing.
       41       41        *
       42       42        *   INPUT:
       43       43        *       dcbno and pathtype are input parameters.
       44       44        *
       45       45        *   OUTPUT:
       46       46        *       buf is modified with closing JCL.
       47       47        *
       48       48        *   SCRATCH:
       49       49        *       None.
       50       50        *
       51       51        *   DESCRIPTION:
       52       52        *       FOOTER builds the footer "cards" in back of any transmission
       53       53        *       packet.  DCBNO is the DCB to which the packet information is to
       54       54        *       be sent, BUF is the I/O buffer to use, and PATHTYPE is an SBIN
       55       55        *       WORD value which indicates the path type of the (first) node.
       56       56        *
       57       57        ****/
       58       58
       59       59        VWF$FOOTER: PROC(DCBNO,BUF,PATHTYPE) ALTRET;

     59  3 000000   000000 700200 xent  VWF$FOOTER   TSX0  ! X66_AUTO_3
         3 000001   000010 000003                    ZERO    8,3

       60       60
       61       61        /****
       62       62        *
       63       63        *   %INCLUDEs
       64       64        *
       65       65        ****/
       66       66
       67       67        %INCLUDE CP_6;
       68     5626        %INCLUDE VW_NODEATER_E;
       69     5682
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:11   
       70     5683        /****
       71     5684        *
       72     5685        *   FPTs
       73     5686        *
       74     5687        ****/
       75     5688
       76     5689        %FPT_WRITE;
       77     5720
       78     5721        %F$DCB(DCBN=DUMMY);
       79     5778
       80     5779        /****
       81     5780        *
       82     5781        *   Parameters
       83     5782        *
       84     5783        ****/
       85     5784
       86     5785    1   DCL DCBNO                          SBIN;
       87     5786    1   DCL BUF                            CHAR(80);
       88     5787    1   DCL PATHTYPE                       SBIN;
       89     5788
       90     5789        /****
       91     5790        *
       92     5791        *   Local variables
       93     5792        *
       94     5793        ****/
       95     5794
       96     5795    1   DCL I                              SBIN;
       97     5796
       98     5797        /****
       99     5798        *
      100     5799        *   Initialize the write FPT with the data passed.
      101     5800        *
      102     5801        ****/
      103     5802
      104     5803    1           FPT_WRITE.BUF_.BOUND=79;

   5803  3 000002   000004 236000 1                  LDQ     FPT_WRITE+4
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:12   
         3 000003   177777 376007                    ANQ     65535,DL
         3 000004   000000 276000 4                  ORQ     0
         3 000005   000004 756000 1                  STQ     FPT_WRITE+4

      105     5804    1           FPT_WRITE.BUF_.BUF$=ADDR(BUF);

   5804  3 000006   200004 236100                    LDQ     @BUF,,AUTO
         3 000007   000005 756000 1                  STQ     FPT_WRITE+5

      106     5805    1           FPT_WRITE.V.DCB#=DCBNO;

   5805  3 000010   200003 470500                    LDP0    @DCBNO,,AUTO
         3 000011   000000 720100                    LXL0    0,,PR0
         3 000012   000010 740000 1                  STX0    FPT_WRITE+8

      107     5806
      108     5807        /****
      109     5808        *
      110     5809        *   If the DCB is opened, supply the "positive EOF" record, which
      111     5810        *   consists of 20 repetitions of " EOF" (note leading blank).  The
      112     5811        *   blank in column one is an illegal length byte, which causes the
      113     5812        *   EVOM routine to examine the record contents for a message.  The
      114     5813        *   EOF code marks end-of-file.  If this record is not found before
      115     5814        *   physical end-of-file in a transmission packet, the packet is
      116     5815        *   considered incomplete and EVOM will not save the output, if that
      117     5816        *   is possible (transmission INTO an existing file will have already
      118     5817        *   taken place).
      119     5818        *
      120     5819        *   This module may also perform additional tasks based upon the type
      121     5820        *   of the node specified.
      122     5821        *
      123     5822        ****/
      124     5823
      125     5824    2           IF DCBADDR(DCBNO)->DUMMY.FCD# THEN DO;

   5824  3 000013   000001 471400 4                  LDP1    1
         3 000014   100000 473500                    LDP3    0,,PR1
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:13   
         3 000015   000000 721100                    LXL1    0,,PR0
         3 000016   300000 474511                    LDP4    0,X1,PR3
         3 000017   400031 236100                    LDQ     25,,PR4
         3 000020   020000 316007                    CANQ    8192,DL
         3 000021   000043 600000 3                  TZE     s:5840

      126     5825    3              DO I=0 TO 76 BY 4;

   5825  3 000022   200006 450100                    STZ     I,,AUTO

      127     5826    3                 CALL INSERT(BUF,I,4,' EOF');

   5826  3 000023   200004 470500                    LDP0    @BUF,,AUTO
         3 000024   200006 235100                    LDA     I,,AUTO
         3 000025   040105 100400                    MLR     fill='040'O
         3 000026   000000 000004 2                  ADSC9   0                        cn=0,n=4
         3 000027   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

      128     5827    3                 END;

   5827  3 000030   000004 236007                    LDQ     4,DL
         3 000031   200006 056100                    ASQ     I,,AUTO
         3 000032   200006 235100                    LDA     I,,AUTO
         3 000033   000114 115007                    CMPA    76,DL
         3 000034   000023 604400 3                  TMOZ    s:5826

      129     5828    3              CALL M$WRITE(FPT_WRITE) WHENALTRETURN DO;

   5828  3 000035   000000 630400 1                  EPPR0   FPT_WRITE
         3 000036   440001 713400                    CLIMB   alt,write
         3 000037   401400 401760                    pmme    nvectors=4
         3 000040   000042 702000 3                  TSX2    s:5829
         3 000041   000043 710000 3                  TRA     s:5840

      130     5829    3                 ALTRETURN;

   5829  3 000042   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:14   

      131     5830    3                 END;
      132     5831    2              END;

      133     5832
      134     5833        /****
      135     5834        *
      136     5835        *   Additional JCL, if required, may be generated here, based upon
      137     5836        *   the node type specified in PATHTYPE.
      138     5837        *
      139     5838        ****/
      140     5839
      141     5840    2           DO SELECT(PATHTYPE);

   5840  3 000043   200005 470500                    LDP0    @PATHTYPE,,AUTO
         3 000044   000000 235100                    LDA     0,,PR0
         3 000045   000155 115007                    CMPA    109,DL
         3 000046   000075 601000 3                  TNZ     s:5871
         3 000047   000050 710000 3                  TRA     s:5852

      142     5841
      143     5842        /****
      144     5843        *
      145     5844        *   For GCOS-6 using PF/3271 as a transport vehicle, we must generate
      146     5845        *   a screenful of EOF records to force a new screen page.  We've
      147     5846        *   already written one (above); now do 23 more to ensure that we get
      148     5847        *   an ENTER TO GO on the screen.
      149     5848        *
      150     5849        ****/
      151     5850
      152     5851    2              SELECT(%N_GCOS6PF#);

      153     5852    3              IF DCBADDR(DCBNO)->DUMMY.FCD# THEN DO;

   5852  3 000050   000001 471400 4                  LDP1    1
         3 000051   100000 473500                    LDP3    0,,PR1
         3 000052   200003 474500                    LDP4    @DCBNO,,AUTO
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:15   
         3 000053   400000 720100                    LXL0    0,,PR4
         3 000054   300000 475510                    LDP5    0,X0,PR3
         3 000055   500031 236100                    LDQ     25,,PR5
         3 000056   020000 316007                    CANQ    8192,DL
         3 000057   000075 600000 3                  TZE     s:5871

      154     5853    4                 DO I=1 TO 23;

   5853  3 000060   000001 235007                    LDA     1,DL
         3 000061   200006 755100                    STA     I,,AUTO

      155     5854    5                    CALL M$WRITE(FPT_WRITE) WHENALTRETURN DO;

   5854  3 000062   000000 630400 1                  EPPR0   FPT_WRITE
         3 000063   440001 713400                    CLIMB   alt,write
         3 000064   401400 401760                    pmme    nvectors=4
         3 000065   000067 702000 3                  TSX2    s:5855
         3 000066   000070 710000 3                  TRA     s:5857

      156     5855    5                       ALTRETURN;

   5855  3 000067   000000 702200 xent               TSX2  ! X66_AALT

      157     5856    5                       END;
      158     5857    4                    END;

   5857  3 000070   200006 054100                    AOS     I,,AUTO
         3 000071   200006 235100                    LDA     I,,AUTO
         3 000072   000027 115007                    CMPA    23,DL
         3 000073   000062 604400 3                  TMOZ    s:5854

      159     5858    3                 END;

   5858  3 000074   000075 710000 3                  TRA     s:5871

      160     5859
      161     5860        /****
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:16   
      162     5861        *
      163     5862        *   All other systems do nothing.
      164     5863        *
      165     5864        ****/
      166     5865
      167     5866    2              SELECT(ELSE);

      168     5867    2           ;
      169     5868
      170     5869    2              END /* DO SELECT */;

      171     5870
      172     5871    1           RETURN;

   5871  3 000075   000000 702200 xent               TSX2  ! X66_ARET

FPT_WRITE
 Sect OctLoc
   1     000   000003 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 400400   000000 000000   000000 000000   000000 000000    ................

(unnamed)
 Sect OctLoc
   2     000   040105 117106                                                     EOF

(unnamed)
 Sect OctLoc
   4     000   000023 600000   000000 006003                                    ........
      173     5872
      174     5873    1   END;

PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:17   
--  Include file information  --

   VW_NODEATER_E.:VMB6TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VWF$FOOTER.
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:18   

 **** Variables and constants ****

  ****  Section 001  Data  VWF$FOOTER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 FPT_WRITE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF                       3-0-0/w PTR         r     1 @DCBNO
     5-0-0/w PTR         r     1 @PATHTYPE                 *0-0-0/c CHAR(80)    r     1 BUF
    *0-0-0/w SBIN        r     1 DCBNO                      6-0-0/w SBIN        r     1 I
    *0-0-0/w SBIN        r     1 PATHTYPE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 DUMMY                      0-0-0N  NULL        r     1 M$UC


   Procedure VWF$FOOTER requires 62 words for executable code.
   Procedure VWF$FOOTER requires 8 words of local(AUTO) storage.

    No errors detected in file VWF$FOOTER.:VMB6TSI    .
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:19   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:20   
          MINI XREF LISTING

BUF
      5786**DCL        59--PROC     5804--ASSIGN   5826<<CALLBLT
DCBNO
      5785**DCL        59--PROC     5805>>ASSIGN   5824--IF       5852--IF
DUMMY.ACTPOS
      5754**DCL      5754--REDEF
DUMMY.ARS#
      5728**DCL      5728--REDEF
DUMMY.ATTR
      5747**DCL      5748--REDEF
DUMMY.BORROW
      5762**DCL      5762--REDEF    5762--REDEF    5762--REDEF
DUMMY.DCBNAME.L
      5776**DCL      5776--IMP-SIZ
DUMMY.EOMCHAR#
      5732**DCL      5732--REDEF
DUMMY.FCD#
      5741**DCL      5824>>IF       5852>>IF
DUMMY.FLDID
      5757**DCL      5757--REDEF
DUMMY.FORM$
      5751**DCL      5751--REDEF
DUMMY.FSECT
      5767**DCL      5767--REDEF
DUMMY.FSN#
      5744**DCL      5744--REDEF    5744--REDEF    5745--REDEF
DUMMY.HEADER$
      5750**DCL      5750--REDEF
DUMMY.IXTNSIZE#
      5748**DCL      5748--REDEF
DUMMY.LASTSTA$
      5737**DCL      5737--REDEF
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:21   
DUMMY.LVL
      5763**DCL      5763--REDEF
DUMMY.NAME#.C
      5738**DCL      5738--REDEF
DUMMY.NOEOF
      5760**DCL      5760--REDEF
DUMMY.NRECS#
      5749**DCL      5749--REDEF
DUMMY.NRECX
      5768**DCL      5768--REDEF
DUMMY.OHDR
      5760**DCL      5760--REDEF
DUMMY.ORG#
      5743**DCL      5743--REDEF
DUMMY.PRECNO
      5766**DCL      5766--REDEF
DUMMY.RCSZ
      5772**DCL      5772--REDEF
DUMMY.RES#
      5739**DCL      5739--REDEF
DUMMY.SETX
      5751**DCL      5751--REDEF
DUMMY.TAB$
      5751**DCL      5751--REDEF
DUMMY.TDA
      5765**DCL      5766--REDEF
DUMMY.WSN#
      5739**DCL      5739--REDEF
FPT_WRITE
      5706**DCL      5828<>CALL     5854<>CALL
FPT_WRITE.BUF_.BOUND
      5706**DCL      5803<<ASSIGN
FPT_WRITE.BUF_.BUF$
      5708**DCL      5804<<ASSIGN
FPT_WRITE.STATION_
      5708**DCL      5708--REDEF
PL6.E3A0      #001=VWF$FOOTER File=VWF$FOOTER.:VMB6TSI                           WED 08/20/97 15:39 Page:22   
FPT_WRITE.V
      5709**DCL      5706--DCLINIT
FPT_WRITE.V.DCB#
      5709**DCL      5805<<ASSIGN
FPT_WRITE.V.DVBYTE.VFC#
      5715**DCL      5715--REDEF
I
      5795**DCL      5825<<DOINDEX  5826>>CALLBLT  5853<<DOINDEX
M$WRITE
      5555**DCL-ENT  5828--CALL     5854--CALL
PATHTYPE
      5787**DCL        59--PROC     5840>>DOSELCT
