MIDGET (MAKE Include Dependency Generation Tool)  is a tool to automatically
build a list of dependencies to be used with MAKE.
 
Full command line syntax:
 
MAKE STD mode:   !MIDGET.X  -g make_std  [-o out_fid]  [-opts]
STD FILE mode:   !MIDGET.X  -s std_fid   [-o out_fid]  [-opts]
WILDCARD mode:   !MIDGET.X  -w string    [-o out_fid]  [-opts]  [-s std_fid]
 
     where:
        make_std is a MAKE STD file, generated with the "-g" option of MAKE
        std_fid  is a STD file name (exists with -s, is built with -w)
        string   is the WILDCARDed string of source files to search
        out_fid  is the generated MAKE include file
        opts     is one, or more, of the allowed MIDGET options
 
    !Help (MIDGET.X) OPTIONS       for more information on opts
    !Help (MIDGET.X) Options MODES for more information on operating modes
    !Help (MIDGET.X) Options MISC  for more information on out_fid
 
MIDGET is meant to make using MAKE even easier, and faster!  When building a
CP-6 MAKE file, you can use the :include directive in the file, instead of
typing in ALL the dependencies yourself.  Then, you use MIDGET to generate the
include file with the dependencies in it.
 
MIDGET can only be used from the command line.
 
Using MIDGET with the MAKE standard file mode is highly recommended.  This
method will give the most reliable results.  The main requirement of this mode
is that *all* files are listed in the Makefile, and have a rule to produce
them.  Include files are often not listed, except as a dependency, so be sure
they are listed properly.
 
The Wildcard or Standard file modes will give you some quick and probably dirty
results.  Handy to save typing time, but not very reliable.  This mode
certainly can not be used in an controlled environment at LADC.
 
HELP file for: MIDGET.X
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
Fix so that the -4 (FORTRAN) option works.
900725
Added embedded comments with time stamps, to reduce work done to generate
dependencies each time.  (eg. re-generated if SI or UI file is modified)
900717
Submitted to the E02 X account.
CHANGES
!"This is the MAKE standard mode...
!MIDGET.X -g MIDGET:makeg -o MIDGET:dep -cvx srch( .GNACCT)
 
   where:
   -  MIDGET:makeg is a file created with the "-g" option of MAKE
      (eg. !MAKE.X -f MakeMIDGET -g MIDGET:makeg)
   -  MIDGET:dep is the generated output file.  It will contain the header
      comments, and all the dependencies found.
   -  The options given are recommended for control account purposes.
      Compressed output mode, Verbose messages, X don't care about
      warnings (this also removes file names with no dependencies).
   -  The search path is given via the common options looking "srch".
 
!"This is the regular standard file mode...
!MIDGET.X -s MIDGET:std -o MIDGET:dep  -i.GNACCT -l:LIB_E02 -tv
 
   where:
   -  MIDGET:std is a regular CP-6 style standard file.  It should contain
      all files needed to produce a given target.
   -  MIDGET:dep is, again, the generated output.
   -  The search path is specified this time with a "-i" option.
   -  The "-l" option gives us the library path to search.
   -  Test include files, and Verbose messages are the remaining options.
 
!"This is the wildcard mode...
!MIDGET.X -w MIDGET_?.:XSI -s MIDGET:std -o MIDGET:dep SR(.GNACCT)
 
   where:
   - MIDGET_?.:XSI specifies the wildcard string to use to build our file
     list with.
   - MIDGET:std is given with the "-s" option here to tell us where to put
     the files we find with the wildcard procedure.
   - MIDGET:dep is the output fid.
   - And finally, another search account is given.
 
 
MIDGET can be used in a variety of useful modes, but it really was meant to be
used with MAKE.  The best way to achieve our goal, "automatic" dependency
generation, is to use MIDGET within MAKE files.
 
Every MAKE file should contain a target called DEPENDS, or DEPENDENCIES, which
will be the "rule" to build the dependency include file(s).  This rule, at the
very least, amounts to JCL that involks MIDGET with the correct options to
generate the programs dependency files.
 
The following elements are examples of what is needed in a Makefile, where the
name TARGET is used as a generic product name.  These are built into MAKE as
default rules and macros, but may be changed as desired.
 
MIDGET      =  MIDGET.X
MIDGOPTS    =  -cvx
# The following is the default value for MIDGSRCH
MIDGSRCH    =
  .
  .
  .
CSRCHLIST   =  srch( fcg?.:TOUACCT, fcg?.:OUACCT)
# The user would probably want to do the following though...
MIDGSRCH    =  $(CSRCHLIST)
 
.depends    =  :depends
.makefile   =  Make?.
 
#---------------------------------------------------------------------
#     Implicit rule = takes "-g" output from MAKE and creates dependencies
#---------------------------------------------------------------------
.makefile.depends  :
      $(MAKE)  -f $<  -g *$(@F)
      $(MIDGET)  -g *$(@F)  -o $@  $(MIDGOPTS)  $(MIDGSRCH)
 
 
# at the end of MAKE file, put the dependencies in with :include directive
:include TARGET:depends
 
Now we are all set to roll!  Here is how we make use of everything:
 
      !MAKE.X  TARGET.depends
      !MAKE.X -f MakeTARGET  ALL        (or TARGET.r, etc.)
 
On the first invocation, we specify the target "TARGET.depends".  This will
automatically create the dependency file for us; as long as the Makefile
contains the information listed in the above example.
 
The second running of MAKE is to actually build our main target.  Or, any other
target you may have in the MAKE file that you wish to MAKE.
 
MIDGET has the following options:
 
    Option                Description                                 Default
    -c         Compressed output mode (single space/litte indentation   {Not}
    -dN        Debug mode; set md_debug variable to N
    -f         Forget writing targets with 0 dependencies         {write 'em}
    -g fid     MAKE STD file for input (fid built by -g opt of MAKE)
    -h         Header comments in out_fid                            {Header}
    -i acct    INCLUDE file search account
    -k         Keep old dependency file around                       {Delete}
    -l acct    Specify :LIB_xxx account to search for includes         {none}
    -n?        NO operator, ? = option (i.e. -nh => No Header)
    -o fid     OUTPUT file                                     {*:h-hh:mm:ss}
    -s fid     STD file of Source files to search             {*std-hh:mm:ss}
    -t         Test includes for existence                          {No test}
    -u acct    Update account (UI) for source update searching
    -v         Verbose (-vv == VERY verbose)
    -w string  WILDCARD string of fid's to search
    -x         Don't care => No Warning messages output to you         {Warn}
    -yNN       Indentation of continued lines, NN=number              {NN=20}
    -zNN       Column position of colon after source name             {NN=17}
    -4         Fortran syntax used when running tool (useed for -s & -w)  {C}
    -6         PL-6 syntax used when running tool    (ditto here)
    -8         BMAP syntax used when running tool    (and here)
    srch( ?.acct1, ..., fcg?.acctN)
               common options type search path specification, used to look
               for include files.  Similar to -p & -i options above.
 
   -g fid
      MAKE STD file is used as MIDGETs input file; this file is built with
      the "-g" option of MAKE.  It gives more robust information upfront,
      than that available from a regular standard file.  This is by far
      the most reliable way to use MIDGET, and is the only way allowed in
      a controlled environment.
 
   -s fid
      Standard file mode option is used to point MIDGET at the STD file of
      source files to search.  This file will be opened as the input file,
      each file within it will be parsed for include files, and the output
      file is created from this information.
 
   -w string
      Wildcard option is used to specify a wildcarded string to MIDGET, from
      which it will build a STD file of source files, and then proceed as if
      it were Standard file mode.
      ** string  can be:   file_name?, or file_name?.account
 
   -c
      Compressed output option.  The normal output is double spaced,
      and has nice, readable indentation.  This option will single
      space everything, and indent continued lines only 4 spaces.
 
   -dN
      Debug mode option.  This option sets the global debug variable,
      md_debug, to the value given.  Or, to one (1) if no value is
      specified.
 
   -f
      Forget about writing targets to the output file if they have zero (0)
      dependencies.  The default is to write all targets out.  This is also
      recommended for control account purposes; more effecient conditional
      generation possible when all targets have a time-stamp associated with
      them (even if they don't have dependencies).
 
   -h
      Header comments option puts nice comments into the output file for you.
      The default is Header = YES, so  a "-nh" would turn it off.
 
   -k
      Keep the temporary file that we renamed the old dependency file to for
      creating new dependencies.  The default is to delete this file.
 
   -n
      NO operator.  This is NOT an option by itself!  It is used in front of
      another option to turn it off.  For example:  -nk => No Keep
      The NO operator only has affect on the options:  h,k,t,x
 
   -t
      Test option is used to verify that the given include files actually
      exist "somewhere" out there.  (This option is used in conjunction with
      the -i and -p options, and the srch() option.)
 
   -v
      Verbose option gives extra information to the user as MIDGET is
      running.  (-vv will be VERY verbose)
 
   -x
      Don't care option is used to turn off Warning messages from MIDGET.
      The default is WARN, so -nx has no real affect.
 
   -i acct
      INCLUDE file search path option is used to give MIDGET accounts to search
      when the Test option is on.  The accounts given with this option are
      searched to validate the existence of a given include file.
 
   -o fid
      Output file option is used to specify the desired destination of MIDGET's
      generated include file.  For example:  -o MIDGET_depends:hmake
      The default is:  *:h-hh:mm:ss   (the time is appended to *:h-)
 
   -u acct
      Update account path is set to acct.  Dependencies are then determined
      from the SI account, along with the UI account (if the file exists).
 
   -yNN
      Indentation option is used to change the default indentation of the
      continued lines in the output file.  (default is 20 spaces)
      ** NN    is a number 0 - 40
 
   -zNN
      Column position of "colon after source name" option is used to change the
      default position of the colon.  (default is 17th column)
      ** NN    is a number 0 - 35
 
   srch(?.acct1, ?.acct2, ..., fcg?.acctN)
      This is a common option looking way to specify the search path for
      include files.  It is very useful in MAKE files (ie. can use $(SRPATH)
      type substitution, and use same path as compiler will use.)
      The last path specified above is an example of a C search path.  It
      will preceed include file names with the given prefix (fcg).
      The syntax is very particular also (without X$PARSE), so be sure that
      all parens, commas are there; and close-paren has no preceeded blanks.
 
   (default)
      C syntax will be used when parsing the input file (default).  MIDGET will
      look for:   #include "?h"  or  #include <?h>
 
   -6
      PL-6 syntax is to be used when parsing the input file.  For example, it
      will look for:   %INCLUDE  file
      And, it won't look for "file:h" or <file.h>, just:  file.
 
   -4
      Fortran syntax will be used when parsing the input file, for example:
      MIDGET will look for:   INCLUDE  file
 
   -8
      BMAP syntax will be used when parsing the input file.  For example:
      MIDGET will look for:   LODM file
 
00004
00002
00004
00001
00005
Jordan Boucher, LADC
MIDGET.X
AID=PROGRAMMING
AID=UTILITY
AID=INTEGRATION
AID=PROJECT_MANAGEMENT
SOFTWARE_MAINTENENCE
TOOL=MIDGET
MIDGET is a Dependency Generator, to be used with MAKE.
CHANGES
