

10:46 JUL 04 '97 VDP_MACRO_C.:VDA5SI                                       1    
    1      /*M* XUI_MACRO_C:  MACRO for XUI$IMP.  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %MACRO XUI_IMP ( FPTN=XUI_IMP,
    8                       STCLASS=STATIC,
    9                       IMP_BUFFER=NIL,
   10                       IMP_BUFFER_OFFSET=0,
   11                       KEY_NAME=NIL,
   12                       KEY_VALUE=NIL,
   13                       PRIMARY(YES='1'B,NO='0'B,ANY)='0'B,
   14                       SECONDARY(YES='1'B,NO='0'B,ANY)='0'B,
   15                       INPUT_OPTION(YES='1'B,NO='0'B,ANY)='0'B,
   16                       FLUSH(YES='1'B,NO='0'B,ANY)='0'B,
   17                       CTRSTR(YES='1'B,NO='0'B,ANY)='0'B,
   18                       FNCKEY(YES='1'B,NO='0'B,ANY)='0'B,
   19                       IMPDCB=M$UC );
   20
   21       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   22       %IF (SUBSTR(STR,0,6)='STATIC') OR
   23       (SUBSTR(STR,0,8)='CONSTANT') OR
   24       (SUBSTR(STR,0,3)='EXT');
   25       %LSET INIT=CHARTEXT('INIT');
   26       %LSET EINIT=CHARTEXT('');
   27       %ELSE;
   28       %LSET INIT=CHARTEXT('/*');
   29       %LSET EINIT=CHARTEXT('*/');
   30       %ENDIF;
   31
   32      DCL 1 FPTN STCLASS,
   33            2 IMP_BUFFER_ VECTOR %INIT(VECTOR(IMP_BUFFER))%EINIT,
   34                  /*K* IMP_BUFFER = VARIABLE specifies a variable which
   35                  will be used to buffer the IMP records to be sent to
   36                  the FEP.  If a call to XUI$IMP would cause overflow
   37                  of the buffer, or if XUI$IMP.FLUSH# is set, the record
10:46 JUL 04 '97 VDP_MACRO_C.:VDA5SI                                       2    
   38                  is written.
   39                  */
   40            2 %CHARTEXT('IMP_BUFFER_OFFSET') SBIN %INIT(IMP_BUFFER_OFFSET)%EINIT,
   41                  /*K* IMP_BUFFER_OFFSET = VALUE(0-n) is a returned value
   42                  of the current number of bytes currently buffered into
   43                  XUI_IMP.IMP_BUFFER_.  This value should be INIT'ed to
   44                  zero before the first call to XUI$IMP.
   45                  */
   46            2 KEY_NAME$ PTR %INIT(ADDR(KEY_NAME))%EINIT,
   47                  /*K* KEY_NAME = VARIABLE specifies a variable containing
   48                  a TEXTC-format of the key sequence to be IMPed.  It may
   49                  or may not contain an introducer as the first character
   50                  of its text.
   51                  */
   52            2 KEY_VALUE$ PTR %INIT(ADDR(KEY_VALUE))%EINIT,
   53                  /*K* KEY_VALUE = VARIABLE specifies a variable containing
   54                  a TEXTH-format of the key sequence which KEY_NAME is to
   55                  be IMPed to.
   56                  */
   57            2 PRIMARY# BIT(1) %INIT(PRIMARY)%EINIT,
   58                  /*K* PRIMARY = VALUE-BIT(1) specifies whether or not
   59                  the key to be defined is to be associated with the
   60                  primary introducer.  The default is NO.
   61                  */
   62            2 SECONDARY# BIT(1) %INIT(SECONDARY)%EINIT,
   63                  /*K* SECONDARY = VALUE-BIT(1) specifies whether or not
   64                  the key to be defined is to be associated with the
   65                  secondary introducer.  The default is NO.
   66                  */
   67            2 INPUT_OPTION# BIT(1) %INIT(INPUT_OPTION)%EINIT,
   68                  /*K* INPUT_OPTION = VALUE-BIT(1) specifies whether or
   69                  not the key is to be defined with the INPUT option.
   70                  the default is NO.
   71                  */
   72            2 FLUSH# BIT(1) %INIT(FLUSH)%EINIT,
   73                  /*K* FLUSH = VALUE-BIT(1) specifies whether or
   74                  not XUI_IMP.IMP_BUFFER_ is to be flushed after buffering
10:46 JUL 04 '97 VDP_MACRO_C.:VDA5SI                                       3    
   75                  the current KEY_NAME.
   76                  */
   77            2 CTRSTR# BIT(1) %INIT(CTRSTR)%EINIT,
   78                  /*K* CTRSTR = {YES|NO} specifies whether the first byte of
   79                  KEY_NAME is a control-string identifier.
   80                  */
   81            2 FNCKEY# BIT(1) %INIT(FNCKEY)%EINIT,
   82                  /*K* FNCKEY = {YES|NO} specifies that the first byte of
   83                  KEY_NAME is a function-key identifier.
   84                  */
   85            2 * BIT(12) %INIT('0'B)%EINIT,
   86            2 IMPDCBNUM# UBIN HALF HALIGNED %INIT(DCBNUM(IMPDCB))%EINIT,
   87                  /*K* IMPDCB = VALUE-DCBNAME specifies the DCBNAME
   88                  to write the IMP record through.  The default is
   89                  M$UC.
   90                  */
   91              %VLP_ERRCODE ( LVL=2, FPTN=ERRCODE, STCLASS=" " );
   92                  /*K* ERRCODE = VALUE-BIT(36) is a standard VLP_ERRCODE
   93                  specifying the error condition upon ALTRET from
   94                  XUI$IMP.
   95                  */
   96      DCL 1 FPTN%CHARTEXT('_FLG ')REDEF FPTN,
   97            2 *(0:4) SBIN,
   98            2 F BIT(18),
   99                  /*K* FPTN_FLG.F = VALUE-BIT(18) redefed for convenient
  100                  initialization at runtime of all {YES|NO} items.
  101                  */
  102            2 *(0:9) CHAR(1);
  103      %MEND;

