/*M* CP6-EXTRACT_SI64 - Miscellaneous subroutines                 */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AND  */
/***
***/
/******************************************************************/
/***/
/*F*     NAME: CHANG
         PURPOSE: To change a number into a text string without
                   leading zeros.
                                                                  */
CHANG : PROC (NUMBR, TEXT, LEN#);
 
 
DCL TEXT CHAR(LEN#);
DCL NUMBR UBIN;
DCL LEN# UBIN;
 
        CALL BINCHAR(TEXT,NUMBR);
        CALL EDITSTR(TEXT,0,LEN#-1,BINBIT(LEN#+63,9),TEXT);
        RETURN;
END CHANG;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: EXTRTN
         PURPOSE: Control comes here when EXTRACT exits.
                                                                  */
EXTRTN : PROC ASYNC;
 
%INCLUDE EXTRACT_C2;
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%B$EXCFR;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
DCL BRKFLG BIT(1)SYMREF;
 
DCL TELLER ENTRY(1);
DCL X66_TRTN ENTRY(1) ALTRET;
DCL ALL_DONE ENTRY;
 
%B$XCON;
%FPT_TRTN;
 
/*******/
        IF B$TCB$->B$TCB.STK$->B$XCON.RNST ~= '0'B
        THEN DO;
           CALL TELLER(%AB_NORM_EXIT);
        END;
        CALL ALL_DONE;
        CALL M$MERCS;
        RETURN;
%EJECT;
/*F*     NAME: BRKRTN
         PURPOSE: Control comes here when the user hits the break
                   key.
                                                                  */
BRKRTN : ENTRY ASYNC;
/*******/
 
/***   BRKFLG IS SET TRUE ***/
 
        BRKFLG = '1'B;
        CALL TELLER(%BREAK);
        FPT_TRTN.V.IC# = B$TCB$->B$TCB.STK$->B$EXCFR.IC+2;
        IF B$TCB$->B$TCB.STK$->B$XCON.ERR.CODE = %E$BREAK
        THEN CALL X66_TRTN(FPT_TRTN);
        RETURN;
END EXTRTN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: GETFID
         PURPOSE: Will get a file name and an account from
                   the input record.
                                                                  */
GETFID : PROC;
 
%INCLUDE EXTRACT_C1;
 
DCL TELLER ENTRY(1);
DCL NXTTKN ENTRY;
 
 
DCL SPL BIT(36) SYMREF;
DCL RECCHR CHAR(1) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL FNAME CHAR(31) SYMREF;
DCL FACCT CHAR(8) SYMREF;
DCL FPASS CHAR(8) SYMREF;
DCL FNLN  UBIN SYMREF;
DCL TITEM(0:139) CHAR(1) SYMREF;
DCL LITEM UBIN BYTE SYMREF;
 
 
/*******/
 
        SPL = '702'O;                   /* OK FOR '-_:' TO BE IN NAME         */
NEXT:
        OK = FALSE;
        CALL NXTTKN;
        IF EOFFLG
        THEN DO;
           LSTFIL = FALSE;
           RETURN;
        END;
        IF ADDR(TOKEN.CHR)->TCHAR = '*'
        THEN DO;
           CALL NXTTKN;
           FNAME = TOKEN.CHR; CALL CONCAT(TOKEN.CHR,'*',FNAME);
           TOKEN.LEN = TOKEN.LEN + 1;
        END;
        IF EORFLG OR TOKEN.ID = 0
        THEN DO;
           IF LSTFIL THEN GOTO NEXT;
           ELSE DO;
              CALL TELLER(%EX_FIL_NAME);
              RETURN;
           END;
        END;
        FNAME = TOKEN.CHR;
        FNLN  = TOKEN.LEN;
        OK = TRUE;
        FACCT = BINASC(0);
        FPASS = BINASC(0);
        DO I = 0 TO 1;                  /* GET ACCOUNT AND PASSWORD           */
           IF RECORD(RECPOS) ~= '.' THEN RETURN;
           IF I=0 THEN FACCT = ' ';
           ELSE FPASS = ' ';
           CALL NXTTKN;
           IF RECORD(RECPOS) = ' ' THEN RETURN;
           IF RECORD(RECPOS) ~= '.' OR I ~= 0 THEN DO;
              CALL NXTTKN;
              IF TOKEN.ID = 0
              THEN DO;
                 RECPOS = RECPOS - 1;
                 RETURN;
              END;
              IF TOKEN.LEN > 8
              THEN DO;
                 CALL TELLER(%ACT_TO_LONG);
                 OK = FALSE;
              END;
              IF I = 0 THEN FACCT = ADDR(TOKEN.CHR)->TCHAR;
              ELSE FPASS = ADDR(TOKEN.CHR)->TCHAR;
           END;
        END;
        RETURN;
END GETFID;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: INITIAL
         PURPOSE: INITIAL initializes all DCBS and ASYNC routines
                   and sets the I/O prompt to the ME device.
                                                                  */
INITIAL : PROC;
 
%INCLUDE EXTRACT_C1;
 
%FPT_INT ( FPTN=BRK_CONTROL, UENTRY=BRKRTN  );
%FPT_XCON (FPTN=EXIT_CONTROL, UENTRY=EXTRTN );
 
DCL BRKRTN ENTRY ASYNC;
DCL EXTRTN ENTRY ASYNC;
 
DCL TELLER ENTRY(1);
 
%FPT_PROMPT( FPTN=PROMP,PROMPT=PIMP.RPROMP,VFC=YES);
DCL 1 PIMP STATIC ALIGNED,
      2 RPROMP,
        3 C1 CHAR(2) INIT('@*') UNAL,
      2 * CHAR(2) INIT(' ') UNAL;
 
DCL UIACCT CHAR(8) SYMREF;
 
/*******/
        CALL M$INT( BRK_CONTROL );
        CALL M$XCON(EXIT_CONTROL);
        CALL M$PROMPT(PROMP);
        IF DCBADDR(UIUNIT)->F$DCB.ASN# = %FILE#
        THEN UIACCT = DCBADDR(UIUNIT)->F$DCB.ACCT#;
        ELSE UIACCT = '        ';
        CALL TELLER(%HELLO);
        RETURN;
END INITIAL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/***/
/*F*     NAME: NXTCHR
         PURPOSE: To get the next character from the input line.
                   If the input line is exausted the call READ_FILE
                   and get the next one.
                                                                 */
NXTCHR : PROC ALTRET NOAUTO;
 
%INCLUDE CP_6;
%F$DCB;
 
 
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL RECORDC REDEF RECORD CHAR(140);
DCL RECPOS SBIN SYMREF;
DCL RECNBR UBIN SYMREF;
DCL RECLEN SBIN SYMREF;
DCL RECCHR CHAR(1) SYMREF;
 
DCL FILNAM CHAR(31) SYMREF;
DCL FILNLN UBIN SYMREF;
DCL FILACT CHAR(8) SYMREF;
 
DCL SCRTYP UBIN SYMREF;
DCL BASIC UBIN SYMREF;
DCL PL6 UBIN SYMREF;
DCL NONPL6 UBIN SYMREF;
 
DCL INUNIT UBIN SYMREF;
%SUB TRUE='1'B;
%SUB FALSE='0'B;
DCL EORFLG BIT(1)SYMREF;
DCL EOFFLG BIT(1)SYMREF;
DCL EXUNIT UBIN SYMREF;
 
DCL READ_FILE ENTRY ALTRET;
 
DCL I UBIN;
 
/*******/
 
        IF RECPOS <= RECLEN
        THEN IF RECPOS = RECLEN
           THEN DO;
              EORFLG = TRUE;
              RECCHR = ' ';
              ALTRETURN;
           END;
           ELSE DO;
              RECCHR = RECORD(RECPOS);
              RECPOS = RECPOS + 1;
NXCHR:        IF RECCHR = ' '
              THEN DO WHILE(RECORD(RECPOS)=' ' AND RECPOS < RECLEN);
                 RECPOS = RECPOS + 1;
              END;
              RETURN;
           END;
NXTREC: ENTRY ALTRET;
 
READ_AGAIN:
        CALL READ_FILE ALTRET(POS_EOF);
        RECNBR = RECNBR + 1;
        IF SCRTYP = BASIC
        THEN DO;
           I = 0;
           DO WHILE( I < RECLEN
             AND (RECORD(I) = ' ' OR RECORD(I)>='0' AND RECORD(I)<='9'));
              I = I + 1;
           END;
           RECORDC = SUBSTR(RECORDC,I);
           RECLEN = RECLEN-I;
        END;
        DO WHILE(RECORD(RECLEN - 1) <= ' ' AND RECLEN > 0);
           RECLEN = RECLEN - 1;
        END;
        RECCHR = RECORD(0);
        RECPOS = 1;
        EORFLG = FALSE;
        IF SCRTYP ~= 0 OR RECLEN = 0 OR INUNIT ~= EXUNIT THEN GOTO NXCHR;
        FILNAM = DCBADDR(INUNIT)->F$DCB.NAME#.C;
        IF SUBSTR(FILNAM,0,1) = '*'
        THEN FILNAM = SUBSTR(FILNAM,1,30);
        CALL INDEX1(FILNLN,' ',FILNAM);
        FILACT = DCBADDR(INUNIT)->F$DCB.ACCT#;
/* DETERMINE SOURCE TYPE */
        SCRTYP = PL6;
        IF RECORD(RECLEN-1) ~= ';'
        THEN IF RECORD(0) = '!' OR SUBSTR(RECORDC,0,3)='REM'/* BASIC          */
           THEN SCRTYP = BASIC;
           ELSE IF RECORD(0) = 'C' OR   /* FORTRAN                            */
                RECORD(0) = '.' OR      /* TEXT                               */
                RECORD(0) = '*' OR      /* FORTRAN OR GMAP*/
                RECORD(0) = '"' OR      /* IBEX, ETC.                         */
                RECORD(6) = '*' AND RECORD(0) ~= '/' OR /* COBOL OR FPL       */
                SUBSTR(RECORDC,0,3) = '--*' OR /* IDL                         */
                SUBSTR(RECORDC,0,4) = '$COM' THEN /* APL                      */
NOTPL6:          SCRTYP = NONPL6;
              ELSE DO;
                 CALL INDEX1(I,'/',SUBSTR(RECORDC,0,RECLEN))ALTRET(NOTSLH);
                 GOTO NXCHR;
NOTSLH:          CALL INDEX1(I,';',SUBSTR(RECORDC,0,RECLEN))ALTRET(NOTPL6);
              END;
        GOTO NXCHR;
POS_EOF:
        EOFFLG = TRUE;
        RECCHR = ' ';
        ALTRETURN;
%EJECT;
/******************************************************************/
/***/
/*F*     NAME: FLINT
         PURPOSE: This routine will initialize the file for input.
                                                                  */
FLINT:  ENTRY ALTRET;
 
        RECNBR = 0;
        SCRTYP = 0;
        RECPOS = RECLEN + 1;
        EOFFLG = '0'B;
        RETURN;
END NXTCHR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/***/
/*F*     NAME: NXTTKN
         PURPOSE: To get the next token from the input line and
                   evaluate what it is (TOKEN.ID and TOKEN.VAL)
                                                                 */
NXTTKN : PROC;
 
%INCLUDE EXTRACT_C1;
 
DCL NXTCHR ENTRY ALTRET;
 
DCL RECCHR CHAR(1) SYMREF;
DCL RECLEN SBIN SYMREF;
DCL SPL BIT(36) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECORD(0:139) CHAR(1)UNAL SYMREF;
DCL RECORDC REDEF RECORD CHAR(140);
DCL CMD_TBL(0:23) CHAR(9) SYMREF;
DCL CMD_MAX UBIN SYMREF;
%EQU QU = 50;
DCL TAB(0:127)CONSTANT BIT(36)INIT(
'0'B*8,'004000000020'O,'002000000001'O, /* BL, #, $, '*/
'0'B,'000400040'O,'003003003003'O*2,    /* -, .,  0-7                         */
'003003100'O,'000000000002'O,'010002002002'O,/*8,9,:,?,@,A-C*/
'002002002002'O*5,'002002002'O,'000000000200'O,/*D-Z,_*/
'000002002002'O,'002002002002'O*5,'002002002'O,/*a-z*/
'0'B*9,'002'O,'0'B*0);                  /* 160                                */
DCL TABL(0:511)REDEF TAB CHAR(1)UNAL;
DCL 1 FLAG,
      2 TYP UBIN(9)UNAL,
      2 C REDEF TYP CHAR(1)UNAL,
      2 * BIT(27);
 
/*******/
 
        TOKEN = '0'B;
 
L1:
        CALL NXTCHR ALTRET(RETRET);
        I = RECPOS-1;
        FLAG.C = TABL(ASCBIN(RECCHR));
        DO CASE(FLAG.TYP);
         CASE(1);                       /*QUOTE*/
           CALL INDEX1R(I,'''',RECORDC,RECPOS);
           I = I + 1;
           DO WHILE(RECORD(I) ~= '''' AND I < RECLEN);
MORE_QUOTES:  IF TOKEN.LEN < 35 THEN DO;
                 CALL INSERT(TOKEN.CHR,TOKEN.LEN,1,RECORD(I));
                 TOKEN.LEN = TOKEN.LEN + 1;
              END;
              I = I + 1;
           END;
           I = I + 1;
           IF RECORD(I) = '''' THEN GOTO MORE_QUOTES;
           TOKEN.ID = 1;
           IF I > RECLEN THEN I = RECLEN;
           RECPOS = I - 1;
           CALL NXTCHR;
         CASE(4);                       /*BLANK*/
           GOTO L1;
         CASE(0);
SPECIL:    TOKEN.CHR  = RECCHR;
           TOKEN.LEN   = 1;
           TOKEN.VAL   = -1;
RETRET:    RETURN;
 
         CASE(3);                       /** DIGIT                             */
           TOKEN.ID = 2;
DIGIT:
           TOKEN.LEN = TOKEN.LEN + 1;
           CALL NXTCHR ALTRET(ALP_DON);
           FLAG.C = TABL(ASCBIN(RECCHR));
           IF FLAG.TYP = 3 THEN GOTO DIGIT;
           IF FLAG & SPL THEN GOTO ALPHA;
           GOTO ALP_DON;
 
         CASE(ELSE);                    /** ALPHA                             */
 
ALPHA:
           IF FLAG & SPL THEN DO;
              TOKEN.LEN=TOKEN.LEN+1;
              TOKEN.ID = 1;
              CALL NXTCHR ALTRET(ALP_DON);
              FLAG.C = TABL(ASCBIN(RECCHR));
              GOTO ALPHA;
           END;
ALP_DON:
           EORFLG = FALSE; EOFFLG = FALSE;
           IF TOKEN.LEN = 0 THEN GOTO SPECIL;
           TOKEN.CHR = SUBSTR(RECORDC,I,TOKEN.LEN);
           TOKEN.VAL = -1;
           IF RECCHR ~= ' ' THEN RECPOS = RECPOS - 1;
           IF TOKEN.ID ~= 1 OR INUNIT ~= SIUNIT THEN RETURN;
           DO I = 0 TO CMD_MAX;
              IF ADDR(TOKEN.CHR)->TCHAR = ADDR(CMD_TBL(I))->TCHAR
              THEN TOKEN.VAL = I;
           END;
           IF TOKEN.VAL > %QU THEN TOKEN.VAL = %QU;
           IF (TOKEN.VAL = 9 OR
             TOKEN.VAL = %QU )
             AND RECLEN > RECPOS THEN TOKEN.VAL = -1;
           RETURN;
        END;
END NXTTKN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: TELLER
         PURPOSE: This reports all messages to the terminal using
                   the M$ERRMSG routine or just writing to the
                   LOUNIT (F$103)
                                                                  */
TELLER : PROC (ERROR#);
 
DCL ERROR# UBIN;
 
%INCLUDE EXTRACT_C1;
 
DCL NUMRECS SBIN SYMREF;
DCL RECNBR UBIN SYMREF;
DCL RECORD(0:139) CHAR(1) SYMREF;
 
DCL 1 RECKEY SYMREF,
      2 DEC CHAR(5) UNAL,
      2 PT CHAR(1) UNAL,
      2 FRC CHAR(3) UNAL;
 
DCL TEMKEY REDEF RECKEY CHAR(9);
 
DCL KOUNT UBIN SYMREF;
DCL F$6 DCB;
DCL M$DO DCB;
 
DCL TEXT5 CHAR(5);
 
DCL 1 ERRCODE STATIC,
      2 FCG BIT(18) UNAL,
      2 MON BIT(1) UNAL,
      2 ERR# UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
 
DCL 1 YOU1 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(36) UNAL;
 
DCL 1 YOU2 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
 
DCL 1 YOU3 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
DCL 1 DBRNAM SYMREF,
      2 * CHAR(40);
 
%FPT_WRITE(FPTN=WR_LO,VFC=YES);
%FPT_ERRMSG(FPTN=WR_ER,BUF=OUT_BUFFER,CODE=ERRCODE,VFC='A',
                   INCLCODE=NO,OUTDCB1=F$6,SUBMESS=YES,
                   FILENAME=ERR_FILE,FILEACCT=ERR_ACCT,RESULTS=ERR_RSLT,
                   FIELD1=YOU1,FIELD2=YOU2,FIELD3=YOU3);
 
%VLP_NAME(FPTN=ERR_FILE,NAME='EXTRACT');
%VLP_ACCT(FPTN=ERR_ACCT,ACCT='X       ');
%VLR_ERRMSG(FPTN=ERR_RSLT);
%FPT_CORRES(DCB1=F$6,DCB2=M$DO,STCLASS=CONSTANT);
 
DCL CHANG ENTRY(3);
 
DCL B2 BIT(2) BASED UNAL;
/*******/
 
        ERR_ACCT.ACCT# = DCBADDR(2)->F$DCB.ACCT#;
        IF ERROR# ~= BITBIN('777777777776'O) THEN DO; /* M$CORRES ZAPS B$ALT  */
           ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
           WR_ER.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
        END;
        WR_ER.V.OUTDCB2# = 0;
        CALL M$CORRES(FPT_CORRES) ALTRET(THE_SAME);
        WR_ER.V.OUTDCB2# = DCBNUM(M$DO);
THE_SAME:;
        IF ERROR# > 10000 THEN IF ERROR# ~= BITBIN('777777777776'O)
           THEN DO;
              IF ERROR# ~= BITBIN('777777777777'O)
              THEN ERRCODE = BINBIT(ERROR#,36);
              WR_ER.V.FLAGLEV# = 4;
              ERRCODE.SEV = 0;
              WR_ER.V.SUBMESS# = %YES#;
              CALL M$ERRMSG(WR_ER);
              ERRCODE = ERR_RSLT.CODEUSED;
           END;
           ELSE DO;
              ERRCODE.SEV = ERRCODE.SEV+1;
              CALL M$ERRMSG(WR_ER)ALTRET(NO_ERROR);
           END;
        ELSE IF ERROR# > 0
           THEN DO;
              IF ERROR#<1000 THEN ERRCODE = '053024'O; /* EXT                 */
              ELSE ERRCODE = '053010'O; /* EXH                                */
              ERRCODE.ERR# = ERROR#;
              WR_ER.V.DCB# = INUNIT;
              DO CASE(ERROR#/100);
               CASE(2);
                 CALL CHANG(RECNBR,YOU1.DATA,5);
                 YOU2.DATA = TEMKEY;
                 YOU2.LEN = 9;
                 YOU1.LEN = 5;
               CASE(1);
                 CALL CHANG(KOUNT,YOU2.DATA,5);
                 YOU2.LEN = 5;
               CASE(ELSE);
                 CALL CHANG(NUMRECS,YOU2.DATA,5);
                 YOU2.LEN = 5;
                 YOU1 = DBRNAM;
              END;
              IF TOKEN.LEN = 0 THEN WR_ER.FIELD3_ = VECTOR(NIL);
              ELSE DO;
                 YOU3.LEN = TOKEN.LEN;
                 YOU3.DATA = TOKEN.CHR;
                 WR_ER.FIELD3_ = VECTOR(YOU3);
              END;
              WR_ER.V.FLAGLEV# = 0; WR_ER.V.SUBMESS# = %NO#;
              CALL M$ERRMSG(WR_ER) ALTRET(NO_ERROR);
           END;
        IF ERROR# = 0
        THEN DO;
           WR_LO.BUF_.BUF$ = ADDR(OUT_BUFFER);
           I = 139;
           DO WHILE(PINCRC(ADDR(OUT_BUFFER),I)->C1 <= ' ' AND I >= 0 );
              I = I - 1;
           END;
           WR_LO.BUF_.BOUND = I;
           IF SUBFLG THEN WR_LO.V.DCB# = LOUNIT;
           ELSE WR_LO.V.DCB# = R1UNIT;
           CALL M$WRITE(WR_LO);
        END;
        RETURN;
NO_ERROR:
        IF ERROR# < 1000 THEN RETURN;
        CALL TELLER(%NO_MORE_HELP);
        RETURN;
END TELLER;
