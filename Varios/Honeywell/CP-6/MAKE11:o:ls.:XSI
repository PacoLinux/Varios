

rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_sym:c  --    symbol table management          */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #include   <stdlib.h>
A        9         9             #include   "MAKE_Cc13"
A       10        10             #include   "MAKE_Cc14"
A       11        11
A       12        12
A       13        13             struct  sym_macro   *sym_macro_head  = 0;
A       14        14             struct  sym_target  *sym_target_head = 0;
A       15        15             struct  sym_ftype   *sym_ftype_head  = 0;
A       16        16             struct  sym_owner   *sym_owner_head  = 0;
A       17        17
A       18        18             char                *sym_text_block   = 0;
A       19        19             int                  sym_text_size    = 0;
A       20        20             #define              ALLOC_TEXT 1024
A       21        21
A       22        22             /* ALLOC_NUM  --  number of sym entries to malloc at a time   */
A       23        23             #define ALLOC_NUM   50
A       24        24
A       25        25             CONST struct  {
A       26        26    1          char *CONST text;
A       27        27    1          int   spec;
A       28        28    1          int   sz;
A       29        29    1          char *CONST repl;
A       30        30    1          int   rsz;
A       31        31    1          }  spec_macros[] = {
A       32        32    1
A       33        33    1        /*   Special Symbolic Macro Names      */
A       34        34    1
A       35        35    1         {  "?", 2,1,    "$?",2}, {  "!", 3,1,    "$!",2},
A       36        36    1         {  "%", 4,1,    "$%",2}, {  "$", 5,1,    "\200",1},
A       37        37    1         {  "*", 6,1,    "$*",2}, {  "<", 7,1,    "$<",2},
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38    1         {  "@", 8,1,    "$@",2}, {  "&", 9,1,    "$&",2},
A       39        39    1         {  "+",10,1,    "$+",2}, { "*F",11,2, "$(*F)",5},
A       40        40    1         { "<F",12,2, "$(<F)",5}, { "@F",13,2, "$(@F)",5},
A       41        41    1         { "&F",14,2, "$(&F)",5}, { "+F",15,2, "$(+F)",5},
A       42        42    1         { "*D",16,2, "$(*D)",5}, { "<D",17,2, "$(<D)",5},
A       43        43    1         { "@D",18,2, "$(@D)",5}, { "&D",19,2, "$(&D)",5},
A       44        44    1         { "+D",20,2, "$(+D)",5}, { "$@",21,2, "$($@)",5},
A       45        45    1         {"$@F",22,3,"$($@F)",6}, {"$@D",23,3,"$($@D)",6},
A       46        46    1         {  "^",24,1,    "$^",2},
A       47        47    1
A       48        48    1        /*   Compiler Name Macros    */
A       49        49    1
A       50        50    1          {       "CC",1,2,        "CC",2},  {     "PL6",1,3,      "PL6",3},
A       51        51    1          {     "BMAP",1,4,      "BMAP",4},
A       52        52    1          {     "YACC",1,4,   "BISON.X",7},  {     "LEX",1,3,   "FLEX.X",6},
A       53        53    1          {  "FORTRAN",1,7,   "FORTRAN",7},  { "PARTRGE",1,7,  "PARTRGE",7},
A       54        54    1          {   "FORMAT",1,6,  "FORMAT.X",8},  {  "HERMAN",1,6, "HERMAN.X",8},
A       55        55    1          {      "TEX",1,3,       "TEX",3},  {  "PASCAL",1,6,   "PASCAL",6},
A       56        56    1          {     "LINK",1,4,      "LINK",4},  {     "CAP",1,3,      "CAP",3},
A       57        57    1          {   "TANGLE",1,6,    "TANGLE",6},  {   "WEAVE",1,5,    "WEAVE",5},
A       58        58    1          {   "MIDGET",1,6,  "MIDGET.X",8}, {    "MAKE",1,4,   "MAKE.X",6},
A       59        59    1
A       60        60    1        /*   Default Compiler Options   */
A       61        61    1
A       62        62    1          {   "COPTS",1,5,           "", 0}, { "PL6OPTS",1,7,    "(SCH)",5},
A       63        63    1          {"BMAPOPTS",1,8,           "",0 },
A       64        64    1          {"YACCOPTS",1,8,    "-d -o $@",8}, { "LEXOPTS",1,7,   "-t >$@",6},
A       65        65    1          {"FORTOPTS",1,8,            "",0}, {"PARTOPTS",1,8,         "",0},
A       66        66    1          { "FMTOPTS",1,7,      "(NFMT)",6}, {"HERMOPTS",1,8,"(NLS,NWA)",9},
A       67        67    1          { "TEXOPTS",1,7,            "",0}, {"PASCOPTS",1,8,"(SC,NWARN)",10},
A       68        68    1          {"LINKOPTS",1,8,            "",0}, {"MAKEFLGS",1,8,          "",0 },
A       69        69    1          {"MIDGOPTS",1,8,        "-cvx",4}, {"MIDGSRCH",1,8,          "",0},
A       70        70    1
A       71        71    1          { "JOBOPTS", 1,7,"Name=$(*F),ReRun",16},
A       72        72    1          { "RESOPTS", 1,7,"Mem=128,Time=2",  14},
A       73        73    1
A       74        74    1
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75    1        /*   Default Compiler non-serious severities */
A       76        76    1
A       77        77    1          {    "CSEV",1,4,          "2", 1}, {  "PL6SEV",1,6,        "2",1},
A       78        78    1          { "BMAPSEV",1,7,          "2", 1},
A       79        79    1          { "YACCSEV",1,7,          "0", 1}, {  "LEXSEV",1,6,        "0",1},
A       80        80    1          { "FORTSEV",1,7,          "2", 1}, { "PARTSEV",1,7,        "2",1},
A       81        81    1          {  "FMTSEV",1,6,          "2", 1}, { "HERMSEV",1,7,        "2",1},
A       82        82    1          {  "TEXSEV",1,6,          "2", 1}, { "PASCSEV",1,7,        "2",10},
A       83        83    1          { "LINKSEV",1,7,          "2", 0},
A       84        84    1
A       85        85    1        /*   Paths for files:           */
A       86        86    1
A       87        87    1          {      ".c", 1,2,         ":c",2 }, {      ".6", 1,2,      ":6",2},
A       88        88    1          {      ".a", 1,2,         ":a",2 }, {      ".p", 1,2,      ":p",2},
A       89        89    1          {      ".y", 1,2,         ":y",2 }, {      ".l", 1,2,      ":l",2},
A       90        90    1          {      ".f", 1,2,         ":f",2 }, {      ".n", 1,2,      ":n",2},
A       91        91    1          {      ".h", 1,2,         ":h",2 }, {      ".o", 1,2,      ":o",2},
A       92        92    1          {      ".r", 1,2,           "",0 }, { ".herman", 1,7,  ":herman",7},
A       93        93    1          {   ".help", 1,5,    "HELP:?:",7 }, {    ".tex", 1,4,     ":tex",4},
A       94        94    1          {    ".dvi", 1,4,       ":dvi",4 }, {    ".cap", 1,4,     ":cap",4},
A       95        95    1          {    ".web", 1,4,       ":web",4 },
A       96        96    1          {    ".web", 1,4,       ":web",4 },{".makefile", 1,9,    "Make?",5},
A       97        97    1          {".depends", 1,8,   ":depends",8 },
A       98        98    1
A       99        99    1        /*   Names of compilers:        */
A      100       100    1
A      101       101    1          {     "..c", 1,3,         "CC",2 }, {     "..6", 1,3,     "PL6",3},
A      102       102    1          {     "..a", 1,3,       "BMAP",4 }, {     "..p", 1,3,  "PASCAL",6},
A      103       103    1          {     "..y", 1,3,       "YACC",4 }, {     "..l", 1,3,     "LEX",3},
A      104       104    1          {     "..f", 1,3,    "FORTRAN",7 }, {     "..n", 1,3, "PARTRGE",7},
A      105       105    1          {     "..h", 1,3,     "HEADER",6 }, {     "..o", 1,3,  "OBJECT",6},
A      106       106    1          {     "..r", 1,3,   "RUN-UNIT",8 }, {"..herman", 1,8,  "HERMAN",6},
A      107       107    1          {  "..help", 1,6,       "HELP",4 }, {   "..tex", 1,5,     "TEX",3},
A      108       108    1          {   "..dvi", 1,5,        "DVI",3 }, {   "..cap", 1,5,     "CAP",3},
A      109       109    1          {   "..web", 1,5,        "WEB",3 },
A      110       110    1
A      111       111    1          {    "PATH", 1,4,     ".$(@D)",6 },
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112    1
A      113       113    1        /*   Names of CP-6 accounts (directories) to search for files:   */
A      114       114    1
A      115       115    1          {  "SIPATH",37,6,           "",0 }, {  "OUPATH",38,6,        "",0},
A      116       116    1          {  "GNPATH",39,6,           "",0 }, {  "UIPATH",40,6,        "",0},
A      117       117    1          {  "LOPATH",41,6,         "NO",2 }, {  "DOPATH",42,6,     ":do",3},
A      118       118    1          {  "SPATHS",43,6,           "",0 },
A      119       119    1
A      120       120    1        /*   Electronic MAIL fields:                                     */
A      121       121    1
A      122       122    1          {  "MAIL_SUBJECT", 45, 12,      "Integration Failures!", 21},
A      123       123    1          {     "MAIL_COPY", 46,  9,                           "",  0},
A      124       124    1          {     "MAIL_BODY", 47,  9,              " has failed! ", 12},
A      125       125    1          {  "MAIL_SUMMARY", 48 ,12,"The following have failed: ", 27},
A      126       126    1
A      127       127    1
A      128       128    1             };
A      129       129
A      130       130
A      131       131             /*D*    NAME:       lookup_sym
A      132       132                     PURPOSE:    To lookup a name in a symbol table.
A      133       133                     DESCRIPTION:
A      134       134                        This is a special generic symbol table manager that
A      135       135                        is used to manage different symbol tables.  The only
A      136       136                        difference in the handling of the symbol tables is the
A      137       137                        function used to allocate a new symbol table entry.
A      138       138                        The function is passed as an argument to this function
A      139       139                        so that when a name being looked up is not found and the
A      140       140                        enter option is specified then the name will be added
A      141       141                        to the symbol table (or not).
A      142       142
A      143       143                        When a name cannot be added to the symbol table or when
A      144       144                        enter is not specified and the name is not in the symbol
A      145       145                        table this function returns a NULL pointer.
A      146       146             */
A      147       147             struct sym_ *
A      148       148             lookup_sym(ht, name, nm_len, enter, sym_alloc)
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=5  
A      149       149               struct hash_table *ht;
A      150       150               char              *name;
A      151       151               int               nm_len;
A      152       152               int               enter;
A      153       153               struct sym_     *((*sym_alloc)());
A      154       154             {
A      155       155    1          int   cmprs = 0;
A      156       156    1          int   h = sym_hash(name, nm_len) % ht->hash_size;
A      157       157    1          struct sym_ **s = & ht->table[h];
A      158       158    1          struct sym_ *rs;
A      159       159    1
A      160       160    1          ht->hash_looks++;
A      161       161    1          while (rs = *s)  {
A      162       162    2             cmprs++;
A      163       163    2             if (rs->sym_len == nm_len && memcmp(rs->sym_text,name,nm_len)==0)
A      164       164    2                break;
A      165       165    2             s = &rs->next;
A      166       166    2             }
A      167       167    1
A      168       168    1          ht->hash_cmprs += cmprs;
A      169       169    1          if (rs) {
A      170       170    2             ht->hash_hits++;
A      171       171    2             return rs;
A      172       172    2             }
A      173       173    1
A      174       174    1          if (!enter) return 0;
A      175       175    1
A      176       176    1          if(!(rs = sym_alloc(name,nm_len,enter))) return 0;
A      177       177    1          ht->hash_syms++;
A      178       178    1          rs->next = 0;
A      179       179    1          *s = rs;
A      180       180    1          return rs;
A      181       181    1        }
A      182       182
A      183       183             int sym_hash(name,len)
A      184       184               char  *name;
A      185       185               int   len;
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=6  
A      186       186             {
A      187       187    1          int   rs = 0;
A      188       188    1          int   c  = 0;
A      189       189    1
A      190       190    1          while(len > 0)
A      191       191    1             if ( (c = *name++) == 128 )
A      192       192    1                rs = rs + '$', len--, *(name-1) = '$';
A      193       193    1             else rs = rs + c, len--;
A      194       194    1
A      195       195    1          return rs;
A      196       196    1        }
A      197       197
A      198       198             /*D*    NAME:    alloc_sym_target
A      199       199                     PURPOSE: To allocate a target symbol table entry.
A      200       200             */
A      201       201
A      202       202             struct sym_ *
A      203       203             alloc_sym_target(name, nm_len, flag)
A      204       204               char     *name;
A      205       205               int      nm_len;
A      206       206               int      flag;
A      207       207             {
A      208       208    1          char     *alloc_text();
A      209       209    1          struct   sym_target *rs;
A      210       210    1          char     *s, *c;
A      211       211    1          int      i;
A      212       212    1
A      213       213    1          if (!sym_target_head)   {
A      214       214    2             int   sz = sizeof(struct sym_target) * ALLOC_NUM;
A      215       215    2             i = ALLOC_NUM;
A      216       216    2             rs = (struct sym_target *)malloc(sz);
A      217       217    2             if (!(sym_target_head = rs)) return 0;
A      218       218    2             mem_targets[0] += sz;
A      219       219    2             while (--i) rs->next = rs+1, rs++;
A      220       220    2             rs->next = 0;
A      221       221    2             }
A      222       222    1          rs = sym_target_head;
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=7  
A      223       223    1          sym_target_head = rs->next;
A      224       224    1          *rs = init_sym_target;
A      225       225    1          rs->tg_len = nm_len;
A      226       226    1          rs->tg_status = STATUS_UNUSED;
A      227       227    1          TargetListHead->tg_list = rs;
A      228       228    1          TargetListHead = rs;
A      229       229    1          mem_targets[1] += sizeof(struct sym_target);
A      230       230    1
A      231       231    1          if (flag & 1)  {  /* need to allocate a permanent block of mem */
A      232       232    2             c = s = rs->tg_text = alloc_text(nm_len+1,name);
A      233       233    2             if (!s) return 0;
A      234       234    2             s[nm_len] = 0;
A      235       235    2             }
A      236       236    1          else c = s = rs->tg_text = name;
A      237       237    1
A      238       238    1          i = 0;
A      239       239    1          s = s + nm_len-1;
A      240       240    1          while (nm_len && *s != '.') s--, i++, nm_len--;
A      241       241    1          if (nm_len && *s == '.') rs->tg_suffix_len = i+1;
A      242       242    1          if (rs->tg_suffix_len)
A      243       243    1             rs->tg_ftype = lookup_sym_ftype(s+1, i, 2);
A      244       244    1          else rs->tg_ftype = lookup_sym_ftype("r", 1, 2);
A      245       245    1
A      246       246    1          if (*c == '.'  &&  rs->tg_suffix_len < rs->tg_len) { /*input type*/
A      247       247    2             s = c+1, i=0;
A      248       248    2             while (s[i] != 0 && s[i] != '.') i++;
A      249       249    2             if (i)   /*  An input file type is present...   */
A      250       250    2                rs->tg_inftype = lookup_sym_ftype(c+1, i, 1);
A      251       251    2             else rs->tg_inftype = lookup_sym_ftype("r", 1, 1);
A      252       252    2             }
A      253       253    1
A      254       254    1          if (*c == '.') {     /*  Build commands   */
A      255       255    2             *JclRulesHead = rs;
A      256       256    2             JclRulesHead = &rs->tg_tgrule;
A      257       257    2             rs->tg_ftype->ft_out++;
A      258       258    2             if (rs->tg_inftype && rs->tg_inftype != rs->tg_ftype)
A      259       259    2                rs->tg_inftype->ft_in++;
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=8  
A      260       260    2             }
A      261       261    1
A      262       262    1          return (struct sym_ *) rs;
A      263       263    1        }
A      264       264
A      265       265             /*D*    NAME:    alloc_sym_macro
A      266       266                     PURPOSE: To allocate a macro symbol table entry.
A      267       267             */
A      268       268
A      269       269             struct sym_ *
A      270       270             alloc_sym_macro(name, nm_len, flag)
A      271       271               char     *name;
A      272       272               int      nm_len;
A      273       273               int      flag;
A      274       274             {
A      275       275    1          char     *alloc_text();
A      276       276    1          struct   sym_macro *rs;
A      277       277    1          char     *s, *v, *defval = 0;
A      278       278    1          int      deflen = 0;
A      279       279    1          int      i;
A      280       280    1
A      281       281    1          if (flag & 4)  {     /*  Setup value from environment */
A      282       282    2             char  sname = name[nm_len];
A      283       283    2             char  *namev = name;
A      284       284    2             char buf[88];
A      285       285    2             if (sname) name[nm_len] = 0;
A      286       286    2             if (*name == '.') {
A      287       287    3                memcpy(buf,"f#",3);
A      288       288    3                memcpy(buf+2,name+1,nm_len);
A      289       289    3                namev = buf;
A      290       290    3                }
A      291       291    2             if (v = getenv(namev))   {
A      292       292    3                flag |= (flag & 2)? 0 : 1;
A      293       293    3                deflen = strlen(v);
A      294       294    3                defval = alloc_text(1+deflen, v);
A      295       295    3                }
A      296       296    2             if (sname) name[nm_len] = sname;
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=9  
A      297       297    2             if (! (flag & 3) ) return 0;
A      298       298    2             }
A      299       299    1          if (!sym_macro_head)   {
A      300       300    2             int sz = sizeof(struct sym_macro) * ALLOC_NUM;
A      301       301    2             i = ALLOC_NUM;
A      302       302    2             rs = (struct sym_macro *)malloc(sz);
A      303       303    2             if (!(sym_macro_head = rs)) return 0;
A      304       304    2             mem_macros[0] += sz;
A      305       305    2             while (--i) rs->next = rs+1, rs++;
A      306       306    2             rs->next = 0;
A      307       307    2             }
A      308       308    1          rs = sym_macro_head;
A      309       309    1          sym_macro_head = rs->next;
A      310       310    1          rs->next       = 0;
A      311       311    1          rs->mc_len     = nm_len;
A      312       312    1          rs->mc_deflen  = deflen;
A      313       313    1          rs->mc_def     = defval;
A      314       314    1          rs->mc_used    = 0;
A      315       315    1          rs->mc_cmdline = 0;
A      316       316    1          rs->mc_default = 0;
A      317       317    1          rs->mc_level   = 0;
A      318       318    1          mem_macros[1] += sizeof(struct sym_macro);
A      319       319    1
A      320       320    1          if (flag & 1)  {  /* need to allocate a permanent block of mem */
A      321       321    2             s = rs->mc_sym = alloc_text(nm_len+1,name);
A      322       322    2             if (!s) return 0;
A      323       323    2             s[nm_len] = 0;
A      324       324    2             }
A      325       325    1          else s = rs->mc_sym = name;
A      326       326    1
A      327       327    1          return (struct sym_ *) rs;
A      328       328    1        }
A      329       329
A      330       330
A      331       331             /*D*    NAME:          alloc_sym_ftype(name, nm_len, flag)
A      332       332                     PURPOSE:       To allocate a file type symbol table entry.
A      333       333             */
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=10 
A      334       334             struct sym_ *
A      335       335             alloc_sym_ftype(name, nm_len, flag)
A      336       336               char     *name;
A      337       337               unsigned  nm_len;
A      338       338               unsigned  flag;
A      339       339             {
A      340       340    1          char                 *alloc_text();
A      341       341    1          struct   sym_ftype   *rs, **t;
A      342       342    1          char                 *s;
A      343       343    1          int                   i;
A      344       344    1
A      345       345    1          if (!sym_ftype_head) {  /* need to allocate more file types */
A      346       346    2             int   sz = sizeof(struct sym_ftype) * ALLOC_NUM + sizeof(int*);
A      347       347    2             t = (struct sym_ftype **)malloc(sz);
A      348       348    2             if (!t) return 0;
A      349       349    2             mem_ftypes[0] += sz;
A      350       350    2             mem_ftypes[1] += sizeof(int *);
A      351       351    2             *t = (struct sym_ftype *) Filetypes;
A      352       352    2             Filetypes = t;
A      353       353    2             rs = sym_ftype_head = (struct sym_ftype *) (1+t);
A      354       354    2             i = ALLOC_NUM;
A      355       355    2             while (--i) rs->next = rs+1, rs++;
A      356       356    2             rs->next = 0;
A      357       357    2             }
A      358       358    1          rs = sym_ftype_head;
A      359       359    1          sym_ftype_head = rs->next;
A      360       360    1          rs->next = 0;
A      361       361    1          rs->ft_rules = 0;
A      362       362    1          rs->ft_len = nm_len;
A      363       363    1          rs->ft_num = i = Nfiletypes++;
A      364       364    1          rs->ft_in    = 0;
A      365       365    1          rs->ft_out   = 0;
A      366       366    1          mem_ftypes[1] += sizeof(struct sym_ftype);
A      367       367    1
A      368       368    1          if (flag & 1)  {  /*  need to alloc block to hold text      */
A      369       369    2             s = rs->ft_text = alloc_text(nm_len+1,name);
A      370       370    2             if (!s) return 0;
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=11 
A      371       371    2             s[nm_len] = 0;
A      372       372    2             }
A      373       373    1          else rs->ft_text = name;
A      374       374    1
A      375       375    1          return (struct sym_ *) rs;
A      376       376    1        }
A      377       377
A      378       378
A      379       379             /*D*    NAME:          alloc_sym_owner(name, nm_len, flag)
A      380       380                     PURPOSE:       To allocate a file owner symbol table entry.
A      381       381             */
A      382       382             struct sym_ *
A      383       383             alloc_sym_owner(name, nm_len, flag)
A      384       384               char     *name;
A      385       385               unsigned  nm_len;
A      386       386               unsigned  flag;
A      387       387             {
A      388       388    1          char                 *alloc_text();
A      389       389    1          struct   sym_owner   *rs;
A      390       390    1          char                 *s;
A      391       391    1          int                   i;
A      392       392    1
A      393       393    1          if (!sym_owner_head) {  /* need to allocate more file owners */
A      394       394    2             int   sz = sizeof(struct sym_ftype) * ALLOC_NUM;
A      395       395    2             rs = (struct sym_owner *)malloc(sz);
A      396       396    2             if (!(sym_owner_head = rs)) return 0;
A      397       397    2             mem_owners[0] += sz;
A      398       398    2             i = ALLOC_NUM;
A      399       399    2             while (--i) rs->next = rs+1, rs++;
A      400       400    2             rs->next = 0;
A      401       401    2             }
A      402       402    1          rs = sym_owner_head;
A      403       403    1          sym_owner_head = rs->next;
A      404       404    1          *rs = init_sym_owner;
A      405       405    1          rs->ow_len = nm_len;
A      406       406    1          mem_owners[1] += sizeof(struct sym_owner);
A      407       407    1
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=12 
A      408       408    1          if (flag & 1)  {  /*  need to alloc block to hold text      */
A      409       409    2             s = rs->ow_text = alloc_text(nm_len+1,name);
A      410       410    2             if (!s) return 0;
A      411       411    2             s[nm_len] = 0;
A      412       412    2             }
A      413       413    1          else rs->ow_text = name;
A      414       414    1
A      415       415    1          return (struct sym_ *) rs;
A      416       416    1        }
A      417       417
A      418       418
A      419       419             /*D*    NAME:       alloc_text(n)
A      420       420                     PURPOSE:    To return a pointer to some text that will never
A      421       421                                 be freed.
A      422       422             */
A      423       423             char *
A      424       424             alloc_text(n,s)
A      425       425               int      n;
A      426       426               char    *s;
A      427       427             {
A      428       428    1          char     *rs;
A      429       429    1
A      430       430    1          if (sym_text_size < n)  {
A      431       431    2             int alloc = (n > 100) ? ALLOC_TEXT+100*((n+100)/n) : ALLOC_TEXT;
A      432       432    2             sym_text_block = (char *) malloc(alloc);
A      433       433    2             if (!sym_text_block) return 0;
A      434       434    2             sym_text_size  = alloc;
A      435       435    2             mem_strings[0] += alloc;
A      436       436    2             mem_strings[2] += sym_text_size;
A      437       437    2             }
A      438       438    1          rs = sym_text_block;
A      439       439    1          mem_strings[1] += n;
A      440       440    1          sym_text_block += n;
A      441       441    1          sym_text_size  -= n;
A      442       442    1          if (s) memcpy(rs,s,n);
A      443       443    1          return rs;
A      444       444    1        }
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=13 
A      445       445
A      446       446
A      447       447             /*D*    NAME:          init_macros
A      448       448                     PURPOSE:       To seed the symbol table with the special
A      449       449                                    macro names.
A      450       450             */
A      451       451
A      452       452             init_macros() {
A      453       453    1
A      454       454    1        int  i  = sizeof(spec_macros)/20;
A      455       455    1        int  j;
A      456       456    1        struct sym_macro *s;
A      457       457    1        struct sym_ *alloc_sym_macro();
A      458       458    1
A      459       459    1          for (j=0; j<i ; j++) {
A      460       460    2             s = lookup_sym_macro(spec_macros[j].text, spec_macros[j].sz, 6);
A      461       461    2             if (!s) crash("Unable to get memory to initialize");
A      462       462    2             sym_macro_specials[spec_macros[j].spec] = s;
A      463       463    2             if (!s->mc_cmdline && !s->mc_def)  {
A      464       464    3                s->mc_def    = spec_macros[j].repl;
A      465       465    3                s->mc_deflen = spec_macros[j].rsz;
A      466       466    3                s->mc_default = 1;
A      467       467    3                }
A      468       468    2             }
A      469       469    1
A      470       470    1          return;
A      471       471    1        }
A      472       472
A      473       473             print_hash_stats()  {
A      474       474    1          printf("\n *** Hash Table Statistics ***\n");
A      475       475    1          print_hashtable_statistics(&macro_hash_table,"Macros");
A      476       476    1          print_hashtable_statistics(&target_hash_table,"Target Names");
A      477       477    1          print_hashtable_statistics(&ftype_hash_table,"File Types");
A      478       478    1          print_hashtable_statistics(&owner_hash_table,"Target Owners");
A      479       479    1          printf("\n");
A      480       480    1        }
A      481       481
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=14 
A      482       482             print_hashtable_statistics(ht,name)
A      483       483               struct hash_table    *ht;
A      484       484               char                 *name;
A      485       485             {
A      486       486    1          printf("%14s Size=%d, Entries=%d,",name,ht->hash_size,ht->hash_syms);
A      487       487    1          printf(" Compares=%d, Lookups=%d,",ht->hash_cmprs, ht->hash_looks);
A      488       488    1          printf(" Hits=%d\n",ht->hash_hits);
A      489       489    1        }
A      490       490
A      491       491
A      492       492
A      493       493             dump_hash_table(ht,name)
A      494       494               struct hash_table *ht;
A      495       495               char              *name;
A      496       496             {
A      497       497    1          int   i;
A      498       498    1          int   i_printed = 0;
A      499       499    1          int   n_printed = 0;
A      500       500    1          int   w_printed = 0;
A      501       501    1
A      502       502    1          printf("\n\n");
A      503       503    1          print_hashtable_statistics(ht,name);
A      504       504    1          for ( i=0 ; i<ht->hash_size ; i++ ) {
A      505       505    2             struct sym_ *s = ht->table[i];
A      506       506    2             int fw;
A      507       507    2             while (s) {
A      508       508    3                if (!i_printed) {
A      509       509    4                   printf("\n**** Hash Value = %3d ** ",i);
A      510       510    4                   i_printed++;
A      511       511    4                   w_printed = 25;
A      512       512    4                   }
A      513       513    3                fw = 5 * ((s->sym_len+5) / 5);
A      514       514    3                w_printed += fw;
A      515       515    3                if (w_printed > 78) {
A      516       516    4                   printf("\n");
A      517       517    4                   w_printed = fw;
A      518       518    4                   }
rCC.C03    File=MAKE_SIc11.:XSI                                                      Thu Nov 20 1997  Page=15 
A      519       519    3                printf("%-*s",fw,s->sym_text), n_printed++;
A      520       520    3                s = s->next;
A      521       521    3                }
A      522       522    2             i_printed = 0;
A      523       523    2             }
A      524       524    1          printf("\n **** End of Hash Table: \"%s\"\n",name);
A      525       525    1          printf(  "      Entries found=%d, Indicated Entries=%d\n",
A      526       526    1                   n_printed, ht->hash_syms);
A      527       527    1        }
A      528       528
A      529       529
A---  Include file information  ---
A
A   stdlib:h.:LIBRARY. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   MAKE_Cc14.:XSI. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc11.:XSI
