*
C*T***********************************************************  
C*T*                                                         *  
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *  
C*T*                                                         *  
C*T***********************************************************  
*     FOREST is a product of
*
*           John Stewart
*           Computing Services
*           Language and Technical Support Group
*           Carleton University
*           Ottawa, Canada, K1S 5B6
*
*     FOREST is the property of Carleton University.  However we
*  really don't care what you do with it just as long as you don't
*  try selling it to someone!
*
      SUBROUTINE ABORT (STEPCC)
**************
*            *
*  ABORT     *
*            *
**************
      INTEGER STEPCC
      CLOSE (UNIT=3, STATUS='KEEP')
      CLOSE (UNIT=6, STATUS='KEEP')
      CALL EXIT (STEPCC)
      END 
      SUBROUTINE DDEFED (ONODE)
**************
*            *
*  DDEFED    *
*            *
**************
 
      INCLUDE FOREST_CF1
 
      INTEGER I, ONODE($TABLESIZE)
 
      CALL PAGE
      DO 1000 , I=1, NAMENUM
         IF (DEFED (I) .EQ. DOUBLE) THEN
            WRITE (6,9000) NAME(I)
         ELSE IF (DEFED(I).EQ.TRUE .AND. ONODE(I).LE.0) THEN
            WRITE (6,9010) NAME(I)
         ELSE IF (DEFED(I).EQ.ENTRY .AND. ONODE(I).GT.0) THEN
            CALL OUT ('*** TRAP *** Entry points not expected here.')
            CALL ABORT (7)
         ELSE IF (DEFED(I).EQ.FALSE) THEN
         ENDIF 
1000  CONTINUE 
 
9000  FORMAT (1X,A31,' is doubly defined.')
9010  FORMAT (1X,A31,' is defined but not used.')
      END 
      SUBROUTINE COVERLAY (OLEVEL, ONODE, NEXTNODE, CALLS)
**************
*            *
*  POVERLAY  *
*            *
**************
 
      INCLUDE FOREST_CF1
 
      INTEGER I, J, OLEVEL($MAXNODE), NEXTNODE, ONODE($TABLESIZE),
     *   CALLS(0:$MAXNODE), N
 
      N = 10
      DO 1010 , I=1, NEXTNODE - 1
 
*  Make sure that there is something in this overlay
 
         IF (CALLS (I) .LE. 0)GOTO 1010 
 
*  There is something here, print it out
 
         N = N + 1
         DO 1000 , J=1, NAMENUM
            IF (DEFED (J) .NE. TRUE)GOTO 1000 
            IF (ONODE (J) .EQ. I) THEN
               WRITE (3,9000) NAME (J), N
            ENDIF 
1000     CONTINUE 
1010  CONTINUE 
9000  FORMAT (' EXTRACT *G(', A, ') INTO *', I)
      END 
      SUBROUTINE POVERLAY (OLEVEL, ONODE, NEXTNODE, CALLS)
**************
*            *
*  POVERLAY  *
*            *
**************
 
      INCLUDE FOREST_CF1
 
      INTEGER I, J, OLEVEL($MAXNODE), NEXTNODE, ONODE($TABLESIZE),
     *   CALLS(0:$MAXNODE)
 
      CALL PAGE
      DO 1010 , I=1, NEXTNODE - 1
 
*  Make sure that there is something in this overlay
 
         IF (CALLS (I) .LE. 0)GOTO 1010 
 
*  There is something here, print it out
 
         CALL OUT(' ')
         WRITE (6,9000) OLEVEL(I)*3, I, OLEVEL(I)
         DO 1000 , J=1, NAMENUM
            IF (DEFED (J) .NE. TRUE)GOTO 1000 
            IF (ONODE (J) .EQ. I) THEN
               WRITE (6,9010) OLEVEL(I)*3, NAME (J)
            ENDIF 
1000     CONTINUE 
1010  CONTINUE 
9000     FORMAT (NX,' Node ', I, ', Level ', I)
9010  FORMAT (NX,3X, A)
      END 
      SUBROUTINE REDUCE(OLEVEL, ONODE, NEXTNODE, CALLS)
*************
*           *
*  REDUCE   *
*           *
*************
 
      INCLUDE FOREST_CF1
 
      INTEGER OLEVEL($MAXNODE), ONODE($TABLESIZE), NEXTNODE, I, J,
     *   CALLS (0:$MAXNODE), NODE
 
*  Find the first level 1 overlay
 
      DO 1000 , I=1, NEXTNODE - 1
         IF (OLEVEL (I) .EQ. 1)GOTO 1010 
1000  CONTINUE 
      RETURN
 
*  Move all routines in following lowerlevel overlays into this one
 
1010  CONTINUE 
      NODE = I
      I = I + 1
      DO 1030 , I=I, NEXTNODE - 1
 
*  If this is an empty overlay, nothing to do
 
         IF (CALLS (I) .LE. 0)GOTO 1030 
 
*  This might be another level 1 overlay
 
         IF (OLEVEL (I) .EQ. 1)GOTO 1010 
 
*  Here is an overlay to be merged
 
         DO 1020 , J=1, NAMENUM
            IF (ONODE (J) .EQ. I) ONODE(J) = NODE
1020     CONTINUE 
         CALLS (NODE) = CALLS (NODE) + CALLS(I)
         CALLS (I) = 0
1030  CONTINUE 
      END 
      SUBROUTINE OPTIMIZE (OLEVEL, ONODE, CALLS, NEXTNODE, NODE,
     *   NEWNODE, BASENODE, ROPTIMIZE)
****************
*              *
*  OPTIMIZE    *
*              *
****************
 
      INCLUDE FOREST_CF1
 
      EXTERNAL ROPTIMIZE
      INTEGER OLEVEL($MAXNODE), ONODE($TABLESIZE), CALLS(0:$MAXNODE),
     *   NEXTNODE, NODE, NEWNODE, I, LEVEL, COUNT, J, LNODE,
     *   BASENODE, NEWBASE
 
*  NODE might not point to an overlay that is in use
 
      DO 1000 , LNODE=NODE, NEXTNODE-1
         IF (CALLS (LNODE) .GT. 0)GOTO 1010 
1000  CONTINUE 
      NEWNODE = NEXTNODE
      RETURN
 
1010  CONTINUE 
      LEVEL = OLEVEL (LNODE)
      COUNT = 1
      NEWBASE = LNODE
      I = LNODE + 1
      REPEAT 1030, WHILE I .LE. NEXTNODE-1
         IF (CALLS (I) .EQ. 0)GOTO 1020 
         IF (OLEVEL (I) .GT. LEVEL) THEN
            CALL ROPTIMIZE (OLEVEL, ONODE, CALLS, NEXTNODE, I, I,
     1            NEWBASE, ROPTIMIZE)
            GOTO 1030 
         ENDIF 
         IF (OLEVEL (I) .LT. LEVEL)GOTO 1040 
         IF (OLEVEL (I) .NE. LEVEL) THEN
            CALL OUT ('**ERROR** Forest made a bad assumption.')
            CALL ABORT (7)
         ENDIF 
         COUNT = COUNT + 1
         NEWBASE = I
1020     CONTINUE 
         I = I + 1
1030  CONTINUE 
1040  CONTINUE 
      NEWNODE = I
      IF (COUNT .EQ. 1) THEN
         DO 1050 , J=1, NAMENUM
            IF (ONODE (J) .EQ. LNODE) THEN
               ONODE (J) = BASENODE
               CALLS (BASENODE) = CALLS (BASENODE) + 1
            ENDIF 
1050     CONTINUE 
         DO 1060 , J=LNODE+1, NEWNODE-1
            OLEVEL (J) = OLEVEL(J) - 1
1060     CONTINUE 
         CALLS (LNODE) = 0
      ENDIF 
      END 
      SUBROUTINE OLAY (MAIN)
*************
*           *
*  OLAY     *
*           *
*************
 
      INCLUDE FOREST_CF1
 
      EXTERNAL FOLAY, OPTIMIZE
      INTEGER OLEVEL ($MAXNODE), PROMOTETO ($TABLESIZE), NEXTNODE, I,
     *   ONODE($TABLESIZE), J, MAIN, THISNODE, CALLS(0:$MAXNODE), JUNK
 
      DO 1000 , I=1, NAMENUM
         ONODE (I) = 0
         PROMOTETO (I) = 0
1000  CONTINUE 
      THISNODE = 1
      NEXTNODE = 2
      OLEVEL (THISNODE) = 0
      ONODE (MAIN) = THISNODE
 
      DO 1010 , I=1, NREF (MAIN)
         CALL FOLAY (1, REF (SREF(MAIN)+I-1), OLEVEL, PROMOTETO,
     1      NEXTNODE,THISNODE, ONODE, .TRUE., 0, FOLAY)
1010  CONTINUE 
 
*  If the user wants to see this info give it to him
 
      IF ($OVERLAY) THEN
 
*  Find number of routines in each overlay
 
         DO 1020 , I=1, NEXTNODE - 1
            CALLS (I) = 0
1020     CONTINUE 
         DO 1030 , I=1, NAMENUM
            J = ONODE (I)
            CALLS (J) = CALLS (J) + 1
1030     CONTINUE 
 
*  Optimize overlay structure to eliminate redundant overlays.
 
         CALL OPTIMIZE (OLEVEL, ONODE, CALLS, NEXTNODE, 2, JUNK, 1,
     1      OPTIMIZE)
 
*  Print out overlays
 
         CALL POVERLAY (OLEVEL, ONODE, NEXTNODE, CALLS)
 
*  Reduce to a 1 level overlay
 
         CALL REDUCE (OLEVEL, ONODE, NEXTNODE, CALLS)
 
*  Print out overlays
 
         CALL POVERLAY (OLEVEL, ONODE, NEXTNODE, CALLS)
 
*  Print out LEMUR copy commands
 
         CALL COVERLAY (OLEVEL, ONODE, NEXTNODE, CALLS)
      ENDIF 
 
*  tell user about routines that are doubly defined or that are
*  defined but not used.
 
      CALL DDEFED (ONODE)
      END 
      SUBROUTINE FOLAY (DEPTH, ROUTINE, OLEVEL, PROMOTETO, NEXTNODE,
     *      PREVNODE, ONODE, NEWOLAY, ODEPTH, RFOLAY)
****************
*              *
*   FOLAY      *
*              *
****************
 
      INCLUDE FOREST_CF1
 
      EXTERNAL RFOLAY
      INTEGER DEPTH, ROUTINE, OLEVEL($MAXNODE), PROMOTETO($TABLESIZE),
     *   NEXTNODE, PREVNODE, ONODE($TABLESIZE), I, THISNODE, J,
     *   ODEPTH, LODEPTH, K
      LOGICAL NEWOLAY, NEWNODE
 
*  Ignore undefed routines
 
      IF (DEFED (ROUTINE) .NE. TRUE) RETURN
 
*  Bugger off if this is a recursive call
 
      CALLPATH (DEPTH) = ROUTINE
      DO 1000 , I=1, DEPTH - 1
         IF (CALLPATH (I) .EQ. ROUTINE) RETURN
1000  CONTINUE 
 
*  Allocate a new node if previous routine said to.
 
      IF (NEWOLAY) THEN
         IF (NEXTNODE .GT. $MAXNODE) THEN
            CALL OUT ('**ERROR** Too many nodes!')
            CALL ABORT (7)
         ENDIF 
         THISNODE = NEXTNODE
         LODEPTH = ODEPTH + 1
         OLEVEL (THISNODE) = LODEPTH
         NEXTNODE = NEXTNODE + 1
      ELSE 
         THISNODE = PREVNODE
         LODEPTH = ODEPTH
      ENDIF 
 
*  If the routine has already been called promote it, else just
*  put it into the THISNODE.
 
      IF (ONODE (ROUTINE) .LE. 0) THEN
         ONODE (ROUTINE) = THISNODE
         PROMOTETO (ROUTINE) = THISNODE
      ELSE 
 
*  if it has already been promoted to here we can just return
 
         IF (ONODE (ROUTINE) .EQ. PROMOTETO (ROUTINE)) RETURN
         ONODE (ROUTINE) = PROMOTETO (ROUTINE)
      ENDIF 
 
*  Handle routines that are called
*  If there is only one routine called that has not been allocated
*  yet than don't allocate an overlay node for it.
 
      J = 0
      DO 1010 , I=1, NREF (ROUTINE)
         K = REF (SREF(ROUTINE)+I-1)
         IF (ONODE (K) .GT. 0)GOTO 1010 
         IF (DEFED (K) .EQ. TRUE) J = J + 1
1010  CONTINUE 
      NEWNODE = .FALSE.
      IF (J .GT. 1) NEWNODE = .TRUE.
      DO 1020 , I=1, NREF (ROUTINE)
         J = REF (SREF(ROUTINE)+I-1)
         IF (DEFED(J) .EQ. TRUE) CALL RFOLAY (DEPTH + 1, J, OLEVEL,
     1      PROMOTETO, NEXTNODE, THISNODE, ONODE, NEWNODE, LODEPTH,
     2      RFOLAY)
1020  CONTINUE 
 
*  Change every node with PROMOTETO field of THISNODE to PREVNODE
 
      IF (THISNODE .EQ. PREVNODE) RETURN
      DO 1030 , I=1, NAMENUM
         IF (PROMOTETO (I) .EQ. THISNODE) THEN
            PROMOTETO (I) = PREVNODE
         ENDIF 
1030  CONTINUE 
      END 
      INTEGER FUNCTION ORD (CHAR)
***********
*         *
*  ORD    *
*         *
***********
      CHARACTER
     1   CHAR*1
      INTEGER
     1   I
*
      READ (CHAR,9000) I
      ORD = I
9000  FORMAT (R1)
      END 
      SUBROUTINE NULLIT (STRING)
************
*          *
*  NULLIT  *
*          *
************
      CHARACTER
     1   STRING*(*)
      INTEGER
     1   I
*
      DO 1000 , I=1, LEN (STRING)
         STRING (I:I) = CHAR (0)
1000  CONTINUE 
      END 
      INTEGER FUNCTION TOPHALF (WORD)
************
*          *
*  TOPHALF *
*          *
************
      INTEGER
     1   WORD
*
      TOPHALF = ISL (WORD, -18)
      END 
      INTEGER FUNCTION BOTHALF (WORD)
************
*          *
*  BOTHALF *
*          *
************
      INTEGER
     1   WORD
*
      BOTHALF = IAND (WORD, 12 O000000777777)
      END 
      INTEGER FUNCTION HASH (STRING)
************
*          *
*  HASH    *
*          *
************
      CHARACTER
     1   STRING* (*)
      INTEGER
     1   I, STRLEN
*
      INCLUDE FOREST_CF1
*
*  Find actual length of string
      STRLEN = INDEX (STRING, ' ') - 1
      IF (STRLEN .EQ. 0) STRLEN = LEN (STRING)
 
*  Search table for string
      DO 1000 , I=1, NAMENUM
         IF (NAMESIZE (I) .EQ. STRLEN) THEN
            IF (NAME (I) .EQ. STRING) THEN
               HASH = I
               RETURN
            ENDIF 
         ENDIF 
1000  CONTINUE 
 
*  Not in table we'll have to add it
      IF (NAMENUM .GE. $TABLESIZE) THEN
         CALL OUT ('**ABORT** symbol table overflow')
         CALL ABORT (7)
      ENDIF 
      NAMENUM = NAMENUM + 1
      NAME (NAMENUM) = STRING
      NAMESIZE (NAMENUM) = STRLEN
      HASH = NAMENUM
      END 
      INTEGER FUNCTION TESTHASH (STRING)
************
*          *
* TESTHASH *
*          *
************
*
*  Return namepointer to STRING in symbol table.  If it is not
*  in the table return 0 and don't add it to the table.
*
      CHARACTER
     1   STRING* (*)
      INTEGER
     1   HASH, I, J
      EXTERNAL
     1   HASH
*
      INCLUDE FOREST_CF1
*
      I = NAMENUM
      J = HASH (STRING)
      IF (I .NE. NAMENUM) THEN
         NAMENUM = I
         TESTHASH = 0
      ELSE 
         TESTHASH = J
      ENDIF 
      END 
      PROGRAM FOREST
*************
*           *
*  FOREST   *
*           *
*************
      INCLUDE FOREST_CF1
*
      EXTERNAL PRINTTREE, INSPECTTREE
      LOGICAL
     1   MAINFOUND
      CONSTANT NULL = -1
      CONSTANT $RECORDSIZE = 10000
      INTEGER
     1   ENTDEFPSIZE($MAXOBJ), ENTDEFSIZE($MAXOBJ),
     2   ENTREFPSIZE($MAXOBJ), ENTREFSIZE($MAXOBJ), I, IOERROR, J, K,
     3   KEYSIZE, L, M, MAIN, N, NAMEPTR($MAXOBJ), OBJNUM,
     4   RECORD($RECORDSIZE), SECTYPE, SIZE($TABLESIZE), UTS($MAXOBJ)
      CHARACTER
     1   GETNAME*31
      CHARACTER
     1   ACTUALKEY*255, NAMEREC*(10000), NULLKEY*1,
     2   REFNAME*31, UNITNAME*32
      INTEGER
     1   BOTHALF, HASH, ORD, TOPHALF, JUNK, LINES
      EXTERNAL
     1   BOTHALF, GETNAME, HASH, ORD, TESTHASH, TOPHALF
*
*  Initialization
      DO 1000 , I=1, $TABLESIZE
*  NREF (?) contains the number of routines def'ed by ?
         NREF (I) = 0
         DEFED (I) = FALSE
         SIZE (I) = NULL
         PRIME (I) = 0
1000  CONTINUE 
      MAINFOUND = .FALSE.
      NAMENUM = 0
      NEXTREF = 0
      $CALL TREE = .FALSE.
      $SIZES = .FALSE.
      $WHO CALLS WHO = .TRUE.
      $WHO WHO CALLS = .TRUE.
      $NAMES = .TRUE.
      $NOAUTO = .FALSE.
      $OVERLAY = .FALSE.
      CALL OPTIONS (NACCT, ACCT, $CALL TREE, $SIZES,$WHO CALLS WHO,
     1$WHO WHO CALLS, $NAMES, $NOAUTO, $OVERLAY)
*  Open file containing all object unit records
      CALL GETFILE
*  Locate all head records
      OBJNUM = 0
      NULLKEY = CHAR (0)
*
*  Write out the size of each object unit as we go along
      IF ($SIZES) THEN
         CALL PAGE
         CALL OUT ('Routine                   Size of routine')
         CALL OUT ('                          (decimal words)')
         CALL OUT (' ')
      ENDIF 
      REPEAT 1010, WHILE .TRUE.
         ACTUALKEY = ' '
         CALL R$SKEYED (1, RECORD, K, ACTUALKEY, KEYSIZE,$RECORDSIZE *
     1      4, IOERROR)
         IF (IOERROR .NE. 0) THEN
            CALL OUT ('**ABORT** This is not an ou.')
            CALL ABORT (7)
         ENDIF 
         IF (ORD (ACTUALKEY (1:1)) .EQ. 2 O42) THEN
            IF (OBJNUM .GE. $MAXOBJ) THEN
               CALL OUT ('**ABORT** Too many object units in one file')
               CALL ABORT (7)
            ENDIF 
            OBJNUM = OBJNUM + 1
            UTS (OBJNUM) = RECORD (0+1)
            ENTDEFSIZE (OBJNUM) = TOPHALF (RECORD (7+1))
            ENTDEFPSIZE (OBJNUM) = BOTHALF (RECORD (7+1))
            ENTREFSIZE (OBJNUM) = TOPHALF (RECORD (8+1))
            ENTREFPSIZE (OBJNUM) = BOTHALF (RECORD (8+1))
            NAMEPTR (OBJNUM) = HASH (ACTUALKEY (2:))
            DEFED (NAMEPTR (OBJNUM)) = TRUE
         ELSE 
            GOTO 1020 
         ENDIF 
1010  CONTINUE 
1020  CONTINUE 
      DO 1110 , I=1, OBJNUM
         L = NAMEPTR (I)
         PRIME (L) = L
         SREF (L) = NEXTREF
*  What routines are ref'ed?
         CALL GETVREC (NAMEREC, UTS (I), 2, LEN (NAMEREC), K)
         CALL GETREC (RECORD, UTS (I), 5, ENTREFSIZE (I),ENTREFPSIZE (I)
     1      , $RECORDSIZE)
         DO 1030 , J = 1, ENTREFSIZE (I)
            REFNAME = GETNAME (NAMEREC, TOPHALF (RECORD (J)))
            K = HASH (REFNAME)
            NREF (L) = NREF (L) + 1
            IF (NEXTREF .GT. $MAXREF) THEN
               CALL OUT ('**ABORT** Too many refs.  Increase $MAXREF.')
               CALL ABORT (7)
            ENDIF 
            REF (NEXTREF) = K
            NEXTREF = NEXTREF + 1
1030     CONTINUE 
*  What routines are def'ed?
         CALL GETVREC (NAMEREC, UTS (I), 1, LEN (NAMEREC), K)
         CALL GETREC (RECORD, UTS (I), 4, ENTDEFSIZE (I),ENTDEFPSIZE (I)
     1      , $RECORDSIZE)
         DO 1040 , J=2, ENTDEFSIZE (I), 2
            REFNAME = GETNAME (NAMEREC, TOPHALF (RECORD (J)))
            K = HASH (REFNAME)
*  Is this the main program?
            IF (IAND (RECORD (J), 12 O000000074000) .EQ. 5 O10000)THEN
               IF (MAINFOUND) THEN
                  CALL OUT(
     1                  '**ABORT** There is more than one main program')
                  CALL ABORT (7)
               ENDIF 
               MAIN = K
               MAINFOUND = .TRUE.
            ENDIF 
            IF (IAND (RECORD(J),12O000000400000) .EQ. 0) THEN
               IF (DEFED (K) .EQ. FALSE) THEN
                  DEFED (K) = ENTRY
                  PRIME (K) = L
               ELSE 
                  DEFED (K) = DOUBLE
               ENDIF 
            ENDIF 
1040     CONTINUE 
*  Now calculate the size
         IF ($SIZES) THEN
            CALL GETVREC (RECORD, UTS (I), 3, $RECORDSIZE*4, K)
            K = K / 4
            M = 0
            DO 1060 , J=1, K, 2
               REFNAME = GETNAME (NAMEREC, TOPHALF (RECORD (J+1)))
               UNITNAME = NAME (L)
               N = LENGTH (UNITNAME) + 1
               UNITNAME (N:N) = ':'
               IF (UNITNAME (1:N) .EQ. REFNAME (1:N))GOTO 1050 
*  The next line of code is REALLY klugy!
               SECTYPE = ORD (RECORD (J))
               GOTO (1050,1050,1060,1060,1060,1060,1050), SECTYPE + 1
               CALL OUT ('**ABORT** BAD SECTION TYPE')
               CALL ABORT (7)
1050           CONTINUE 
               M = M + BOTHALF (RECORD (J))
1060        CONTINUE 
            SIZE (L) = M
            WRITE (UNIT=6, FMT='(1X,A31,I8)') NAME (L), SIZE (L)
*  Check for references to common blocks
            DO 1100 , J=1, K, 2
               REFNAME = GETNAME (NAMEREC, TOPHALF (RECORD (J+1)))
               UNITNAME = NAME (L)
               N = LENGTH (UNITNAME) + 1
               UNITNAME (N:N) = ':'
               IF (UNITNAME (1:N) .EQ. REFNAME (1:N))GOTO 1100 
               N = LENGTH (REFNAME)
               M = BOTHALF (RECORD (J))
*  The next line of code is REALLY klugy!
               SECTYPE = ORD (RECORD (J))
               GOTO (1100,1100,1070,1080,1090,1100,1100), SECTYPE + 1
               CALL OUT ('**ABORT** BAD SECTION TYPE')
               CALL ABORT (7)
1070           CONTINUE 
               WRITE (UNIT=6, FMT=9000) M
               GOTO 1100 
1080           WRITE (UNIT=6, FMT=9010) REFNAME (1:N), M
               GOTO 1100 
1090           WRITE (UNIT=6, FMT=9020) REFNAME (1:N), M
1100        CONTINUE 
         ENDIF 
1110  CONTINUE 
      CLOSE (UNIT=1)
 
*  Sort entries in REF table
 
      DO 1120 , I=1, NAMENUM
         CALL SORT (REF (SREF(I)), NREF (I))
1120  CONTINUE 
*
*  Output table of who calls each routine
      IF ($WHO CALLS WHO) THEN
         CALL PAGE
         CALL OUT ('Routine   Routines that call it')
         CALL OUT ('-------   ---------------------')
         DO 1150 , I=1, NAMENUM
            IF (DEFED(I).EQ.TRUE .OR. DEFED(I).EQ.ENTRY) THEN
               CALL PRINTNAME (I, 0, JUNK)
               DO 1140 , J=1, NAMENUM
                  IF (DEFED(J).EQ.TRUE) THEN
                     L = J
                  ELSE IF (DEFED(J) .EQ. ENTRY) THEN
                     L = PRIME(J)
                  ELSE 
                     GOTO 1140 
                  ENDIF 
                  DO 1130 , K=1, NREF (L)
                     IF (REF (SREF(L)+K-1) .EQ. I) THEN
                        CALL PRINTNAME (J, 8, JUNK)
                     ENDIF 
1130              CONTINUE 
1140           CONTINUE 
            ENDIF 
1150     CONTINUE 
      ENDIF 
*
*  Output table of who each routine calls
      IF ($WHO WHO CALLS) THEN
         CALL PAGE
         CALL OUT ('Routine   Routines it calls')
         CALL OUT ('-------   -----------------')
         DO 1170 , I=1, NAMENUM
            IF (DEFED(I).EQ.TRUE .OR. DEFED(I).EQ.ENTRY) THEN
               CALL PRINTNAME (I, 0, L)
               DO 1160 , J=1, NREF (L)
                  M = REF (SREF(L)+J-1)
                  IF (DEFED(M).EQ.TRUE .OR. DEFED(M).EQ.ENTRY) THEN
                     CALL PRINTNAME (M, 8, JUNK)
                  ENDIF 
1160           CONTINUE 
            ENDIF 
1170     CONTINUE 
      ENDIF 
 
*  Replace references to entry points with the actual routine
 
      DO 1210 , I=1, NAMENUM
         IF (DEFED (I) .EQ. ENTRY) THEN
            DO 1200 , J=1, NAMENUM
               K = 1
               L = NREF (J)
               REPEAT 1190, WHILE K .LE. L
                  IF (REF (SREF(J)+K-1) .EQ. I) THEN
 
*  Might already ref the actual routine
 
                     N = PRIME (I)
                     DO 1180 , M=1, L
                        IF (REF (SREF(J)+M-1) .EQ. N) THEN
                          REF (SREF(J)+K-1) = REF (SREF(J)+L-1)
                          L = L - 1
                          GOTO 1190 
                        ENDIF 
1180                 CONTINUE 
                     REF (SREF(J)+K-1) = N
                  ENDIF 
                  K = K + 1
1190           CONTINUE 
               NREF (J) = L
1200        CONTINUE 
         ENDIF 
1210  CONTINUE 
 
*  Print out overlay information
 
      IF ($OVERLAY .AND. .NOT.MAINFOUND) THEN
         CALL OUT (
     1      '**ABORT** OVERLAY option needs main program to work.')
         CALL ABORT (7)
      ENDIF 
      IF (MAINFOUND) CALL OLAY (MAIN)
 
*  Inspect call tree, (if necessary)
 
      IF ($CALL TREE .OR. $NOAUTO) THEN
         DO 1220 , I=1, NAMENUM
            RECURSE (I) = .FALSE.
1220     CONTINUE 
         LINES = 0
         CALL INSPECTTREE (0, LINES, MAIN, INSPECTTREE)
      ENDIF 
 
*  Print out call tree
 
      IF ($CALL TREE) THEN
         IF (MAINFOUND) THEN
            CALL PAGE
            CALL OUT ('Call Tree')
            CALL OUT ('____ ____')
            CALL OUT (' ')
            MAXDEPTH = 0
*  Find longest name to print out
            J = 0
            DO 1230 , I=1, NAMENUM
               IF (DEFED (I) .EQ. TRUE) J = MAX0 (J, NAMESIZE (I))
1230        CONTINUE 
            INDENTMULTIPLE = MIN0 (8, (130-J) / (MAXDEPTH+1))
            IF (INDENTMULTIPLE .LE. 0) THEN
               CALL OUT ('**ABORT** CALLS TOO DEEP TO PRINT CALL TREE')
               CALL ABORT (7)
            ENDIF 
*  Now we can actually print out the call tree
            CALL PRINTTREE (0, MAIN, PRINTTREE)
         ELSE 
            CALL OUT (
     1         '**ABORT** CANT PRINT CALL TREE... NO MAIN PROGRAM HERE')
            CALL ABORT (7)
         ENDIF 
      ENDIF 
 
*  Print NOAUTO information
 
      IF ($NOAUTO) THEN
         IF (MAINFOUND) THEN
            CALL PAGE
            CALL OUT (
     1            'The following routines are not directly recursive')
            CALL OUT (
     1            '___ _________ ________ ___ ___ ________ _________')
            CALL OUT (' ')
            DO 1240 , I=1, NAMENUM
               IF (.NOT. RECURSE (I) .AND. DEFED(I) .EQ. TRUE) THEN
                  CALL PRINTNAME (I, 0, JUNK)
               ENDIF 
1240        CONTINUE 
            CALL PAGE
            CALL OUT ('The following routines are called recursively.')
            CALL OUT ('___ _________ ________ ___ ______ ____________')
            CALL OUT (' ')
            DO 1250 , I=1, NAMENUM
               IF (RECURSE (I) .AND. DEFED (I) .EQ. TRUE) THEN
                  CALL PRINTNAME (I, 0, JUNK)
               ENDIF 
1250        CONTINUE 
         ELSE 
            CALL OUT (
     1            '**ABORT** Main program must be present for NOAUTO')
            CALL ABORT (7)
         ENDIF 
      ENDIF 
 
      CALL ABORT (0)
 
9000  FORMAT (1X,'.',39X,'Used unlabeled common of size ',
     1   T110, I6, ' words.')
9010  FORMAT (1X,'.',39X,'Uses root common block ',T70,A, ' of size ',
     1   T110, I6, ' words.')
9020  FORMAT (1X,'.',39X,'Uses non-root common block ',T70, A,
     1   ' of size ', T110, I6, ' words.')
      END 
      SUBROUTINE GETREC (RECORD, UTS, TYPE, SIZE, PSIZE, MAXSIZE)
************
*          *
*  GETREC  *
*          *
************
      INTEGER
     1   I, K, MAXSIZE, ORD, PSIZE, RECORD(MAXSIZE), SIZE,
     2   START, TYPE, UTS
      CHARACTER
     1   KEY*7
      CHARACTER
     1   GETKEY*7
      EXTERNAL
     1   GETKEY
*
      IF (SIZE .LE. 0) RETURN
      IF (SIZE .GT. MAXSIZE) THEN
         CALL OUT ('**ABORT** Record in object file is too big')
         CALL ABORT (7)
      ENDIF 
      KEY = GETKEY (UTS, TYPE)
      START = 1
      REPEAT 1000, WHILE START .LE. SIZE
         CALL R$KEYNE (1, RECORD (START), K, KEY, LEN (KEY),
     1      (10000 - START + 1) * 4)
         IF (K/4 .GT. PSIZE) THEN
            CALL OUT ('**ABORT** Record too big. (GETREC)')
            CALL ABORT (7)
         ENDIF 
         START = START + PSIZE
         I = ORD (KEY (7:7))
         KEY (7:7) = CHAR (I+1)
1000  CONTINUE 
      END 
      SUBROUTINE GETVREC (RECORD, UTS, TYPE, MAXSIZE, SIZE)
**************
*            *
*  GETVREC   *
*            *
**************
      INTEGER
     1   IOERROR, K, MAXSIZE, PAGE, SIZE, TYPE, UTS
      CHARACTER
     1   KEY*7, RECORD* (10000)
      CHARACTER
     1   GETKEY*7
      EXTERNAL
     1   GETKEY
*
      KEY = GETKEY (UTS, TYPE)
      PAGE = 0
      SIZE = 0
1000  CONTINUE 
      CALL R$KEYED (1, RECORD (SIZE+1:SIZE+1), K, KEY, LEN (KEY),
     1MAXSIZE - SIZE, IOERROR)
      IF (IOERROR .NE. 0) RETURN
      SIZE = SIZE + K
      IF (SIZE .GT. MAXSIZE) THEN
         CALL OUT ('**ABORT** Name record is too big to read in')
         CALL ABORT (7)
      ENDIF 
      PAGE = PAGE + 1
      KEY (7:7) = CHAR (PAGE)
      GOTO 1000 
      END 
      CHARACTER * 7
     1   FUNCTIONGETKEY(UTS, TYPE)
*************
*           *
*  GETKEY   *
*           *
*************
      CHARACTER
     1   UTS*4
      INTEGERO777/3O777/, TYPE
      CHARACTER
     1   A*7
*
      CALL NULLIT (A)
      WRITE (A(1:1),9000) O777
      A (2:5) = UTS
      A (6:6) = CHAR (TYPE)
      GETKEY = A
9000  FORMAT (R1)
      END 
      CHARACTER * 31
     1   FUNCTIONGETNAME(RECORD, PTR)
**************
*            *
*  GETNAME   *
*            *
**************
      CHARACTER
     1   RECORD* (*)
      INTEGER
     1   I, J, K, ORD, PTR
*
      I = PTR * 4 + 1
      K = I + 1
*  First byte should be null
      IF (ORD (RECORD (I:I)) .NE. 0) THEN
         CALL OUT ('**ABORT** Bad assumption made by FOREST')
         CALL ABORT (7)
      ENDIF 
      J = ORD (RECORD (K:K))
      GETNAME = RECORD (K+1:K+J)
      END 
      SUBROUTINE PAGE
**********
*        *
*  PAGE  *
*        *
**********
      WRITE (UNIT=6, FMT='(1H1)')
      END 
      SUBROUTINE GETFILE
***********
*         *
* GETFILE *
*         *
***********
      LOGICAL
     1   EOFILE, ERROR
      CONSTANT $RECORDSIZE = 10000, $NFILES=100
      INTEGER
     1   FILENUM, HASH, I, IOERROR, K, KEYSIZE, ORD, M,
     2   RECORD($RECORDSIZE)
      CHARACTER
     1   ACTUALKEY*255, FILENAME*80, FILES($NFILES)*80
      EXTERNAL
     1   HASH, ORD
*
      INCLUDE FOREST_CF1
      INCLUDE FOREST_CF2
*
      EOFILE = .FALSE.
      FILENUM = 0
      REPEAT 1010, WHILE .NOT. EOFILE
         READ (UNIT=5, FMT='(A)', END=1000) FILENAME
         IF (FILENAME .EQ. ' ')GOTO 1000 
         FILENUM = FILENUM + 1
         IF (FILENUM .GT. $NFILES) THEN
            CALL OUT ('**ABORT** Too many files.')
            CALL ABORT (7)
         ENDIF 
         FILES (FILENUM) = FILENAME
         GOTO 1010 
1000     CONTINUE 
         EOFILE = .TRUE.
1010  CONTINUE 
      IF (FILENUM .EQ. 0) THEN
         CALL OUT ('**ABORT** No files to process')
         CALL ABORT (7)
      ENDIF 
      IF ($NAMES) THEN
         CALL PAGE
         CALL OUT (' Object files used ')
         CALL OUT (' ------ ----- ---- ')
         CALL OUT (' ')
         DO 1020 , I=1, FILENUM
            WRITE (UNIT=6, FMT='(1X,A)') FILES (I)
1020     CONTINUE 
      ENDIF 
      IF (FILENUM .EQ. 1) THEN
         CALL OPENFILE (FILES (1))
         RETURN
      ENDIF 
      OPEN (UNIT=2, ACCESS='KEYED', USAGE='CREATE',NAME='*FOREST_JUNK',
     1RECL=1)
      DO 1050 , M=1, FILENUM
         FILENAME = FILES (M)
         CALL OPENFILE (FILENAME)
         ERROR = .FALSE.
         REPEAT 1040, WHILE .NOT. ERROR
            ACTUALKEY = ' '
            CALL R$SKEYED (1, RECORD, K, ACTUALKEY, KEYSIZE,
     1            $RECORDSIZE * 4, IOERROR)
            IF (IOERROR .NE. 0)GOTO 1030 
            IF (ORD (ACTUALKEY (1:1)) .EQ. 2 O42) THEN
               I = HASH (ACTUALKEY (2:))
               IF (DEFED (I) .EQ. FALSE) THEN
                  DEFED (I) = TRUE
               ELSE 
                  WRITE (UNIT=6, FMT=9000) ACTUALKEY(2:KEYSIZE)
                  GOTO 1040 
               ENDIF 
            ENDIF 
            IF (ORD (ACTUALKEY (1:1)).EQ. 2 O42 .OR.(ORD (ACTUALKEY (
     1            1:1)).EQ. 3 O777 .AND.ORD (ACTUALKEY (6:6)) .LE. 5))
     2            THEN
               CALL W$KEYNE (2, RECORD, K, ACTUALKEY, KEYSIZE,NEW$KEY)
            ENDIF 
            GOTO 1040 
1030        CONTINUE 
            CLOSE (UNIT=1)
            ERROR = .TRUE.
1040     CONTINUE 
1050  CONTINUE 
      CLOSE (UNIT=2)
      OPEN (UNIT=1, ACCESS='KEYED', USAGE='INPUT', RECL=$RECORDSIZE*4,
     1NAME='*FOREST_JUNK')
      REWIND 1
 
*  Empty symbol table so it will be recreated with names sorted.
      DO 1060 , I=1, NAMENUM
         DEFED (I) = FALSE
1060  CONTINUE 
      NAMENUM = 0
9000  FORMAT (1X,'**WARNING** ',A,' is doubly defined.')
      END 
      INTEGER FUNCTION LENGTH (STRING)
*************
*           *
*  LENGTH   *
*           *
*************
      CHARACTER STRING*(*)
      LENGTH = INDEX (STRING, ' ') - 1
      END 
      SUBROUTINE SORT (A, N)
*************
*           *
*  SORT     *
*           *
*************
      INTEGER A(1),N,I,J,T
      LOGICAL C
 
      I = 2
      REPEAT 1010, WHILE I.LT.N
         C = .FALSE.
         DO 1000 , J=N, I, -1
            IF (A (J-1) .GT. A(J)) THEN
               C = .TRUE.
               T = A (J-1)
               A (J-1) = A(J)
               A (J) = T
            ENDIF 
1000     CONTINUE 
         I = I + 1
         IF (.NOT. C) I = N
1010  CONTINUE 
      END 
      SUBROUTINE PRINTNAME (ROUTINE, INDENT, INDEX)
***************
*             *
*  PRINTNAME  *
*             *
***************
 
      INCLUDE FOREST_CF1
 
      INTEGER ROUTINE, INDENT, INDEX, I, J
 
      IF (DEFED(ROUTINE) .EQ. TRUE) THEN
         INDEX = ROUTINE
         I = NAMESIZE (ROUTINE)
         WRITE (UNIT=6, FMT=9000) INDENT, NAME(ROUTINE)(1:I)
      ELSE IF (DEFED(ROUTINE) .EQ. ENTRY) THEN
         INDEX = PRIME (ROUTINE)
         I = NAMESIZE (ROUTINE)
         J = NAMESIZE (INDEX)
         WRITE (UNIT=6, FMT=9010) INDENT, NAME(ROUTINE)(1:I),NAME(I
     1      NDEX)(1:J)
      ELSE 
         CALL OUT ('**TRAP** Lost in PRINTNAME')
         CALL ABORT (7)
      ENDIF 
9000  FORMAT (X, NX, A)
9010  FORMAT (X, NX, A, ' Entry in ', A)
      END 
      SUBROUTINE INSPECTTREE (DEPTH, LINES, ROUTINE, RINSPECTTREE)
************
*          *
* INSPECTTREE *
*           *
*************
 
*  Inspect the call tree to determine the following
 
*     1) maximum depth of the tree
*     2) size of the tree tree
*     3) which routines are indirectly recursive
 
      EXTERNAL RINSPECTTREE
      INTEGER
     1   DEPTH, I, J, ROUTINE, LINES
 
      INCLUDE FOREST_CF1
 
      LINES = LINES + 1
      CALLPATH (DEPTH) = ROUTINE
      MAXDEPTH = MAX0 (MAXDEPTH, DEPTH)
 
*  Does this guy call anyone?
 
      DO 1000 , I=1, NREF (ROUTINE)
         IF (DEFED (REF (SREF(ROUTINE)+I-1)) .EQ. TRUE) THEN
            GOTO 1010 
         ENDIF 
1000  CONTINUE 
      RETURN
 
*  Is this a recursive call?
 
1010  CONTINUE 
      DO 1030 , I=0, DEPTH-1
         IF (CALLPATH (I) .EQ. ROUTINE) THEN
 
*  Flag this routine and the rest along the call path as recursive
 
            DO 1020 , J=I, DEPTH-1
               RECURSE (CALLPATH (J)) = .TRUE.
1020        CONTINUE 
            RETURN
         ENDIF 
1030  CONTINUE 
 
*  Draw tree for routines called by this routine
 
      DO 1040 , I=1, NREF (ROUTINE)
         J = REF (SREF(ROUTINE)+I-1)
         IF (DEFED (J) .EQ. TRUE) THEN
            CALL RINSPECTTREE (DEPTH + 1, LINES, J, RINSPECTTREE)
         ENDIF 
1040  CONTINUE 
      END 
      SUBROUTINE PRINTTREE (DEPTH, ROUTINE, RPRINTTREE)
************
*          *
* PRINTTREE *
*           *
*************
 
*  Print the call tree, presumably INSPECTTREE has already been
*  called.
 
      EXTERNAL RPRINTTREE
      INTEGER
     1   DEPTH, I, IN, J, NAMSIZE, ROUTINE
      CHARACTER
     1   NAM*31
 
      INCLUDE FOREST_CF1
 
      CALLPATH (DEPTH) = ROUTINE
      IN = DEPTH * INDENTMULTIPLE
      NAM = NAME (ROUTINE)
      NAMSIZE = NAMESIZE (ROUTINE)
 
*  Does this guy call anyone?
 
      DO 1000 , I=1, NREF (ROUTINE)
         IF (DEFED (REF (SREF(ROUTINE)+I-1)) .EQ. TRUE) THEN
            GOTO 1010 
         ENDIF 
1000  CONTINUE 
      WRITE (UNIT=6, FMT=9000) IN, NAM (1:NAMSIZE), '|'
      RETURN
 
*  Is this a recursive call?
 
1010  CONTINUE 
      DO 1020 , I=0, DEPTH-1
         IF (CALLPATH (I) .EQ. ROUTINE) THEN
            WRITE (UNIT=6, FMT=9000) IN, NAM(1:NAMSIZE), '*'
            RETURN
         ENDIF 
1020  CONTINUE 
      WRITE (UNIT=6, FMT=9000) IN, NAM (1:NAMSIZE), ' '
 
*  Draw tree for routines called by this routine
 
      DO 1030 , I=1, NREF (ROUTINE)
         J = REF (SREF(ROUTINE)+I-1)
         IF (DEFED (J) .EQ. TRUE) THEN
            CALL RPRINTTREE (DEPTH + 1, J, RPRINTTREE)
         ENDIF 
1030  CONTINUE 
9000  FORMAT (1X, '.', NX, A, ' ', A)
      END 
      SUBROUTINE OUT (STRING)
*************
*           *
*  OUT      *
*           *
*************
      CHARACTER STRING*(*)
 
      WRITE (UNIT=6,FMT='(1X,A)') STRING
      END 
      SUBROUTINE OPENFILE (FILENAME)
**************
*            *
* OPENFILE   *
*            *
**************
      INCLUDE FOREST_CF1
 
      INTEGER I
      CHARACTER FILENAME*(*)
 
      IF (NACCT .EQ. 0) THEN
         OPEN (UNIT=1, USAGE='INPUT', ACCESS='KEYED',RECL=1,NAME=
     1      FILENAME, STATUS='OLD', ERR=1010)
         RETURN
      ELSE 
         DO 1000 , I=0, NACCT-1
            OPEN (UNIT=1, USAGE='INPUT', ACCESS='KEYED',RECL=1,NAME=
     1            FILENAME, STATUS='OLD',ACCOUNT=ACCT(I),ERR=1000)
            RETURN
1000     CONTINUE 
      ENDIF 
1010  CONTINUE 
      CALL IO$ABORT
      END 
