/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*     PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IND=0,IAD=3,MOC=Y   */
WASP_TYPE: PROC;
 
%SUB GLOBAL = SYMREF;
%INCLUDE WASP_C61;
 
DCL TABLE$ STATIC PTR;
DCL TABLE(0:17) SBIN ALIGNED BASED(TABLE$);
DCL PREVIOUS(0:17) SBIN STATIC INIT(0*0);
DCL INITIAL(0:17) SBIN STATIC INIT(0*0);
 
DCL 1 TOP_LINE CONSTANT CHAR(0)
INIT('   %9..4.4U  CPU type scheduling data since  %14..3U');
 
DCL TITLE(0:14) CHAR(64) CONSTANT INIT(
 'EIS instructions interrupted by I/O interrupt on L66',
 'EIS instructions interrupted by timer runout on L66',
 'EIS instructions interrupted by other faults on L66',
 'EIS instructions interrupted by I/O interrupt on DPSE',
 'EIS instructions interrupted by timer runout on DPSE',
 'EIS instructions interrupted by other faults on DPSE',
 'EIS instructions interrupted by I/O interrupt on ELS',
 'EIS instructions interrupted by timer runout on ELS',
 'EIS instructions interrupted by other faults on ELS',
 'Don''t schedule a user who needs an L66 or DPSE (SSX$XSCHD)',
 'Don''t schedule a user who needs an ELS (SSX$XSCHD)',
 'Park user who needs an L66 or DPSE on monitor return (SSS$SEXIT)',
 'Park user who needs an ELS on monitor return (SSS$SEXIT)',
 'Reset EIS multi-word interrupt bit in L66 or DPSE frame',
 'Reset EIS multi-word interrupt bit in ELS frame');
 
DCL SKIP_1 CONSTANT VECTOR INIT(VECTOR(SKIP1));
DCL SKIP1 CONSTANT CHAR(0) INIT(' ');
 
DCL H_MIXED_INT UBIN SYMREF;
DCL P_STARTUP UBIN SYMREF;
 
   IF BREAK_COUNT > 0 THEN DO;
      IF DOUBLE_BREAK OR BREAK_COUNT > 1 THEN EXITING='1'B;
      ELSE DO;
         CALL M$TIME(GET_INITIAL_UTS);
         INITIAL = TABLE;
         BREAK_COUNT = 0;
         DOUBLE_BREAK = '1'B;
      END;
   END;
   ELSE DOUBLE_BREAK = '0'B;
 
   CALL X$WRITE(F_FDS,VECTOR(TOP_LINE),VECTOR(INITIAL_UTS));
 
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 0, TITLE(0));
   CALL DISP( 3, TITLE(1));
   CALL DISP( 6, TITLE(2));
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 1, TITLE(3));
   CALL DISP( 4, TITLE(4));
   CALL DISP( 7, TITLE(5));
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 2, TITLE(6));
   CALL DISP( 5, TITLE(7));
   CALL DISP( 8, TITLE(8));
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 9, TITLE(9));
   CALL DISP( 11, TITLE(10));
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 12, TITLE(11));
   CALL DISP( 14, TITLE(12));
   CALL X$WRITE(F_FDS, SKIP_1);
   CALL DISP( 15, TITLE(13));
   CALL DISP( 17, TITLE(14));
   RETURN;
 
DISP: PROC(V,TITLE);
DCL V SBIN;
DCL TITLE CHAR(64);
DCL DELTA SBIN STATIC;
DCL CURRENT SBIN STATIC;
DCL DELTA_FMT CHAR(0) STATIC INIT('%4*D %8D %A');
DCL BLANK_FMT CHAR(0) STATIC INIT('     %8D %A');
 
   CURRENT = TABLE(V) - INITIAL(V);
   DELTA = CURRENT - PREVIOUS(V);
   PREVIOUS(V) = CURRENT;
   IF DELTA > 0 AND NOT FIRST_PASS
   THEN CALL X$WRITE(F_FDS,VECTOR(DELTA_FMT),VECTOR(DELTA),
     VECTOR(CURRENT),VECTOR(TITLE));
   ELSE CALL X$WRITE(F_FDS,VECTOR(BLANK_FMT),VECTOR(CURRENT),VECTOR(TITLE));
   RETURN;
END DISP;
 
WASP_TYPE_INIT: ENTRY;
   CALL DAM$INIT;
   CALL DAM$MAP(ADDR(P_STARTUP),TABLE$,0,0);
   INITIAL_UTS = TABLE$->UBIN_;
   CALL DAM$MAP(ADDR(H_MIXED_INT),TABLE$,0,0);
   RETURN;
END WASP_TYPE;
