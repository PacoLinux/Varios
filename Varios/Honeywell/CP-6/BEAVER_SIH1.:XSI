.*M*
HELP file for: BEAVER
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                                           
BEAVER is a subroutine (callable from any language) that can be used
to handle all those dam BREAKs.
.*B*
BEAVER (Beaumont's Elementary Asynchronous Vanilla-flavored Exception
Routine) can be called from any user program (FORTRAN, COBOL, PL-6,
etc.) to provide BREAK key handling.  The user calls BEAVER from
his program to set up the BREAK key linkage; when BREAK is hit,
BEAVER handles the BREAK and performs one of two actions:  Either
the "C to continue" message is output, or a user-supplied BREAK
counter is incremented.  In the former case, a response other than
C or c terminates the program; in the latter case, if the break
count exceeds a user-specified maximum, the program is terminated.
.*B*
Calling sequence:
 
    CALL BEAVER [(arg)] [ALTRET ...]
.*B*
The action depends on the presence of the argument and/or its
contents:
 
Case I:  No "arg" specified
 
    The BREAK linkage is reset to system standard.  ALTRET cannot
    occur.
 
Case II:  arg<0
 
    If the contents of "arg" are less than zero, BEAVER will
    prompt the user with "C to continue" when BREAK is hit and
    read a reply (via M$UC).  If the reply isn't C or c, the
    program is terminated (M$EXIT with STEPCC=6).  The user's
    exit routine (if any) may be entered.
 
Case III:  arg=0
 
    If the contents of "arg" are equal to zero, the argument
    must be a variable located in static memory (not a constant).
    When BREAK is hit, BEAVER will increment the contents of arg
    by one each time.  The user program should examine the
    contents of arg periodically to determine if BREAK was hit.
    There is no limit on the number of BREAKs tallied in arg in
    this case.
 
Case IV:  arg>0
 
    If the contents of "arg" are greater than zero, the argument
    must be a variable located in static memory (not a constant).
    BEAVER will reset arg to zero.  When BREAK is hit, BEAVER
    will increment the contents of arg by one each time; if the
    resulting count exceeds the original value, the user program
    is terminated (M$EXIT with STEPCC=6).  The user's exit
    routine (if any) may be entered.  The user program should
    examine the contents of arg periodically to determine if
    BREAK was hit.
 
In cases III and IV, BEAVER will ALTRET if arg is not in static
memory (ISR only).  It will attempt to set the value of arg to
-1 before returning; if this is unsuccessful, the user program
is likely to abort.
.*K* USAGE
It is the responsibility of the user program to examine the
contents of arg periodically to determine if BREAK has been hit.
This should be done at "clean points", where it is appropriate
(and possible) to handle the break "event".  Since BEAVER fields
the breaks and effectively buffers them, this is usually less of
a problem than it might seem.  Just before resuming normal
processing, the user routine handling the BREAK should set the
contents of arg back to zero.
.*X*
.*K* XINDEX
BEAVER.X
.*R*
AID=PROGRAMMING
.*R*
AID=SYSTEM_PROGRAMMING
.*R*
BREAK_HANDLER
.*R*
.*K* XINDEX_ABSTRACT
TOOL=BEAVER
.*R*
A subroutine (which can be called from any language) to field BREAKs
from user terminals.
.*K* CHANGES Changes changes
10/23/84 Submitted to the X account.
.*R*
.*K* OWNER
Dave Wagner, LADC
