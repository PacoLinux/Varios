

CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: replace.c,v 3.12 87/03/10 17:41:31 ceriel Exp $ */
        6         6             /* PREPROCESSOR: MACRO-TEXT REPLACEMENT ROUTINES */
        7         7
        8         8             #include "nopp:h"
        9         9
       10        10             #ifndef NOPP
       11        11             #include "debug:h" /* UF */
       12        12             #include "pathlength:h"  /* UF */
       13        13             #include "strsize:h"  /* UF */
       14        14             #include <alloc:h>
       15        15             #include "idf:h"
       16        16             #include "input:h"
       17        17             #include "macro:h"
       18        18             #include "arith:h"
       19        19             #include "LLlex:h"
       20        20             #include "class:h"
       21        21             #include "assert:h"
       22        22             #include "interface:h"
       23        23             #include "static:h"
       24        24             #include "idfsize:h"
       25        25
       26        26             char *strcpy(), *strcat();
       27        27             extern   int idfsize;
       28        28             char *maxpos;
       29        29             char *DefinedParams[1];
       30        30             char *DefinedPtr =0;
       31        31             char DefinedBuf[IDFSIZE+1];
       32        32             extern char options[255];
       33        33             char *long2str();
       34        34             char *strindex();
       35        35
       36        36             PRIVATE struct mlist  *ReplaceList = 0; /* list of currently active macros */
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37             PRIVATE struct mlist init_mlist_val = {0, 0, 0};
       38        38
       39        39             EXPORT int
       40        40             replace(idef)
       41        41              register struct idf *idef;
       42        42             {
       43        43    1         /* replace() is called by the lexical analyzer to perform
       44        44    1            macro replacement.  "idef" is the description of the
       45        45    1            identifier which leads to the replacement.  If the
       46        46    1            optional actual parameters of the macro are OK, the text
       47        47    1            of the macro is prepared to serve as an input buffer,
       48        48    1            which is pushed onto the input stack.
       49        49    1            replace() returns 1 if the replacement succeeded and 0 if
       50        50    1            some error has occurred.
       51        51    1         */
       52        52    1         register struct macro *mac = idef->id_macro;
       53        53    1         register struct mlist *repl;
       54        54    1         register int c;
       55        55    1         char **actpars, **getactuals();
       56        56    1         char *reptext, *macro2buffer();
       57        57    1         int size;
       58        58    1
       59        59    1         if (mac->mc_flag & NOREPLACE) {
       60        60    2            lexwarning("macro %s is recursive", idef->id_text);
       61        61    2            return 0;
       62        62    2         }
       63        63    1         if (mac->mc_nps != -1) {   /* with parameter list  */
       64        64    2            if (mac->mc_flag & FUNC) {
       65        65    3                     /* must be "defined".
       66        66    3                        Unfortunately, the next assertion
       67        67    3                        will not compile ...
       68        68    3               ASSERT( ! strcmp("defined", idef->id_text));
       69        69    3                     */
       70        70    3               if (! AccDefined)
       71        71    3                  return 0;
       72        72    3            }
       73        73    2            if (++mac->mc_count > 100) {
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    3               /* 100 must be some number in Parameters */
       75        75    3               lexwarning("macro %s is assumed recursive",
       76        76    3                      idef->id_text);
       77        77    3               return 0;
       78        78    3            }
       79        79    2        again:
       80        80    2            LoadChar(c);
       81        81    2            c = skipspaces(c);
       82        82    2          /* new line character is allowed between macro name and
       83        83    2             open parenthesis
       84        84    2          */
       85        85    2          if (class(c) == STNL) {
       86        86    3             AdjustLineNumber;
       87        87    3             goto again;
       88        88    3          }
       89        89    2          /* Special marker EOR is used to suspend expanding
       90        90    2             a macro which is the last token of a replacement
       91        91    2             list and rest of the source begins with parentheses
       92        92    2             and parameters.
       93        93    2          */
       94        94    2          if (c == EOR) { /* end of replacement list */
       95        95    3            if (same_name(idef->id_text))
       96        96    3             return 0;
       97        97    3            else
       98        98    3             goto again;
       99        99    3          }
      100       100    2          else
      101       101    2          if (c == FORMAL_OPEN) {
      102       102    3           if (same_name(idef->id_text))
      103       103    3            return 0;
      104       104    3           else
      105       105    3            goto again;
      106       106    3          }
      107       107    2          if (c != '(') {
      108       108    3              if (AccDefined && mac->mc_flag & FUNC) { /* #if defined Name */
      109       109    4                 if (class(c) != STIDF) {
      110       110    5                    lexerror("identifier required after \"defined\"");
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    5                    PushBack();
      112       112    5                    return 0;
      113       113    5                 }
      114       114    4                 else {    /* catch the identifier name */
      115       115    5                    maxpos = &DefinedBuf[idfsize];
      116       116    5                    DefinedParams[0] = DefinedPtr = &DefinedBuf[0];
      117       117    5
      118       118    5                    for (;;) {
      119       119    6                       if (DefinedPtr < maxpos) *DefinedPtr++ = c;
      120       120    6                       LoadChar(c);
      121       121    6                       if (!in_idf(c)) goto endif;
      122       122    6                    }
      123       123    5        endif:
      124       124    5                    PushBack();
      125       125    5                    *DefinedPtr = '\0';
      126       126    5                    actpars = DefinedParams;
      127       127    5                 }
      128       128    4              }
      129       129    3              else { /* no replacement if no () */
      130       130    4                 if (!options['A']) {
      131       131    5                    warning("macro %s needs arguments", idef->id_text);
      132       132    5                    PushBack();
      133       133    5                    return 0;
      134       134    5                 }
      135       135    4                 else {
      136       136    5                    PushBack();
      137       137    5                    return 0;
      138       138    5                 }
      139       139    4              }
      140       140    3          }
      141       141    2          else { /* get actual parameters */
      142       142    3              actpars = getactuals(idef);
      143       143    3          }
      144       144    2
      145       145    2            if (mac->mc_flag & FUNC) {
      146       146    3               struct idf *param = str2idf(*actpars);
      147       147    3
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    3           if (class(**actpars) != STIDF)
      149       149    3              lexerror("identifier required after \"defined\"");
      150       150    3               repl = new_mlist();
      151       151    3               *repl = init_mlist_val;
      152       152    3               if (param->id_macro)
      153       153    3                  reptext = "1";
      154       154    3               else
      155       155    3                  reptext = "0";
      156       156    3               InsertText(reptext, 1);
      157       157    3               repl->next = ReplaceList;
      158       158    3               ReplaceList = repl;
      159       159    3               repl->m_mac = mac;
      160       160    3               return 1;
      161       161    3            }
      162       162    2         }
      163       163    1         repl = new_mlist();
      164       164    1         *repl = init_mlist_val;
      165       165    1         repl->m_mac = mac;
      166       166    1         if (mac->mc_flag & FUNC) /* this macro leads to special action */
      167       167    1            macro_func(idef);
      168       168    1         if (mac->mc_nps <= 0) {
      169       169    2            reptext = mac->mc_text;
      170       170    2            size = mac->mc_length;
      171       171    2            mac->mc_flag |= NOREPLACE;
      172       172    2         }
      173       173    1         else {
      174       174    2            reptext = macro2buffer(idef, actpars, &size); /* create input buffer */
      175       175    2            repl->m_repl = reptext;
      176       176    2         }
      177       177    1          if (Unstacked) EnableMacros();
      178       178    1         InsertText(reptext, size);
      179       179    1         repl->next = ReplaceList;
      180       180    1         ReplaceList = repl;
      181       181    1         return 1;
      182       182    1        }
      183       183
      184       184             GSTATIC char FilNamBuf[PATHLENGTH];
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185
      186       186             PRIVATE
      187       187             macro_func(idef)
      188       188              register struct idf *idef;
      189       189             {
      190       190    1         /* macro_func() performs the special actions needed with some
      191       191    1            macros.  These macros are __FILE__ and __LINE__ which
      192       192    1            replacement texts must be evaluated at the time they are
      193       193    1            used.
      194       194    1         */
      195       195    1        #define DATE_LENGTH  14
      196       196    1        #define TIME_LENGTH  11
      197       197    1         char date_time [30],
"zbc$replace:c.:ZBC3TSI", line 197: (warning) identifier "date_time" is not used
      198       198    1              date[DATE_LENGTH],
"zbc$replace:c.:ZBC3TSI", line 198: (warning) identifier "date" is not used
      199       199    1              time[TIME_LENGTH];
"zbc$replace:c.:ZBC3TSI", line 199: (warning) identifier "time" is not used
      200       200    1         char *ctime();
      201       201    1         long clock, sys_time();
"zbc$replace:c.:ZBC3TSI", line 201: (warning) identifier "clock" is not used
      202       202    1         int  i;
"zbc$replace:c.:ZBC3TSI", line 202: (warning) identifier "i" is not used
      203       203    1         register struct macro *mac = idef->id_macro;
      204       204    1
      205       205    1         switch (idef->id_text[2]) { /* This switch is very blunt... */
      206       206    2         case 'F' :        /* __FILE__ */
      207       207    2            FilNamBuf[0] = '"';
      208       208    2            strcpy(&FilNamBuf[1], FileName);
      209       209    2            strcat(FilNamBuf, "\"");
      210       210    2            mac->mc_text = FilNamBuf;
      211       211    2            mac->mc_length = strlen(FilNamBuf);
      212       212    2            break;
      213       213    2         case 'L' :        /* __LINE__ */
      214       214    2            mac->mc_text = long2str((long)LineNumber, 10);
      215       215    2            mac->mc_length = 1;
      216       216    2            break;
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      217       217    2        #if 0
      218       218   *S*        case 'D' :   /* __DATE__ */
      219       219   *S*        {
      220       220   *S*         for (i=0; i<DATE_LENGTH; i++) date[i] = ' ';
      221       221   *S*         clock = sys_time();
      222       222   *S*         strcpy (&date_time[1], ctime(&clock));
      223       223   *S*         strncpy(&date[1], &date_time[5], 8);
      224       224   *S*         strncpy(&date[8], &date_time[21], 4);
      225       225   *S*         date[0] = date[12] = '"';
      226       226   *S*         date[13] = '\0';
      227       227   *S*         strcpy (&(mac->mc_text[0]), date);
      228       228   *S*         mac->mc_length = strlen (mac->mc_text);
      229       229   *S*         break;
      230       230   *S*        }
      231       231   *S*        case 'T' :   /* __TIME__ */
      232       232   *S*        {
      233       233   *S*         for (i=0; i<TIME_LENGTH; i++) time[i] = ' ';
      234       234   *S*         clock = sys_time();
      235       235   *S*         strcpy (&date_time[1], ctime(&clock));
      236       236   *S*         strncpy(&time[1], &date_time[12], 8);
      237       237   *S*         time[0] = time[9] = '"';
      238       238   *S*         time[10] = '\0';
      239       239   *S*         strcpy (&(mac->mc_text[0]), time);
      240       240   *S*         mac->mc_length = strlen (mac->mc_text);
      241       241   *S*         break;
      242       242   *S*        }
      243       243   *S*       #endif
      244       244    2         default :
      245       245    2            crash("(macro_func)");
      246       246    2         }
      247       247    1        }
      248       248
      249       249             PRIVATE char *
      250       250             macro2buffer(idef, actpars, siztext)
      251       251              struct idf *idef;
      252       252              char **actpars;
      253       253              int *siztext;
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      254       254             {
      255       255    1         /* Macro2buffer() turns the macro replacement text, as it is
      256       256    1            stored, into an input buffer, while each occurrence of the
      257       257    1            non-ascii formal parameter mark is replaced by its
      258       258    1            corresponding actual parameter specified in the actual
      259       259    1            parameter list actpars.  A pointer to the beginning of the
      260       260    1            constructed text is returned, while *siztext is filled
      261       261    1            with its length.
      262       262    1            If there are no parameters, this function behaves
      263       263    1            the same as strcpy().
      264       264    1         */
      265       265    1        #define push(ch) text[pos++]=ch;if(pos==size)text=Srealloc(text,size<<=1);
      266       266    1         register int stringization = 0;
      267       267    1         register int char_constant = 0;
      268       268    1         register int string_literal = 0;
      269       269    1         register int beginning_of_param = 0;
      270       270    1         register int single_pound_position = 0;
      271       271    1         register int need_formals = 0;
      272       272    1         register int size = 8;
      273       273    1         register char *text = Malloc(size);
      274       274    1         register int pos = 0;
      275       275    1         register char *ptr = idef->id_macro->mc_text;
      276       276    1
      277       277    1         while (*ptr) {
      278       278    2         if (*ptr >= EOR) {
      279       279    3          if (need_formals) { /* just processed a '#' operator */
      280       280    4           warning("formal parameter expected after # operator");
      281       281    4           text[single_pound_position] = 040;
      282       282    4           need_formals = 0;
      283       283    4           stringization = 0;
      284       284    4          }
      285       285    3          switch (*ptr) {
      286       286    4           case DBL_POUND :
      287       287    4               ptr++;
      288       288    4               push(DBL_POUND); /* in preprocess:c simply throw it away */
      289       289    4            break;
      290       290    4           case SGL_POUND :
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      291       291    4            ptr++;
      292       292    4            single_pound_position = pos;
      293       293    4            push(SGL_POUND);
      294       294    4            stringization = 1;
      295       295    4            need_formals = 1;
      296       296    4            break;
      297       297    4           case RECURSION: case EXPAND_PARAM :
      298       298    4            push(*ptr++);
      299       299    4            break;
      300       300    4           case EOR : case FORMAL_OPEN :
      301       301    4            push(*ptr++);
      302       302    4            break;
      303       303    4           default :
      304       304    4            /* impossible case */
      305       305    4            crash("(macro2buffer)");
      306       306    4          }
      307       307    3         }
      308       308    2         else
      309       309    2            if (*ptr & FORMALP) {   /* non-asc formal param. mark */
      310       310    3               register int n = *ptr++ & 0177;
      311       311    3               register char *p;
      312       312    3
      313       313    3               ASSERT(n != 0);
      314       314    3               /* copy the text of the actual parameter
      315       315    3                  into the replacement text
      316       316    3           */
      317       317    3           beginning_of_param = 1;
      318       318    3           /* procedure getactuals() in scan:c will copy whatever appears
      319       319    3              in parameter list, including leading blanks. For example,
      320       320    3              glue (HIGH, LOW) will have a blank precede "LOW" as the
      321       321    3              second parameter.
      322       322    3              In stringization, unnecessary blanks must be deleted.
      323       323    3           */
      324       324    3           p = actpars[n-1];
      325       325    3           /* In stringization, strip white spaces before the first
      326       326    3              pp-token and after the last pp-token. */
      327       327    3           if (stringization) {
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      328       328    4              char *lastchar = p;
      329       329    4              lastchar += strlen(p) - 1;
      330       330    4              while (lastchar && (class(*lastchar) == STSKIP || *lastchar == '\n')) *l
                               astchar-- = '\0';
      331       331    4           }
      332       332    3           while (*p)  {
      333       333    4            int cc;
      334       334    4            while(beginning_of_param && (class(*p) == STSKIP ||*p == '\n'))
      335       335    4              p++;
      336       336    4            beginning_of_param = 0;
      337       337    4            if (*p == '\'')
      338       338    4             char_constant = !char_constant;
      339       339    4            else
      340       340    4            if (*p == '\"')
      341       341    4             string_literal = !string_literal;
      342       342    4            if (class(*p) == STIDF && '\'' != p[1] && '\"' != p[1]) {
      343       343    5
      344       344    5                  extern int idfsize;     /* ??? */
      345       345    5                  char buf[IDFSIZE + 1];
      346       346    5                  register char *tg = &buf[0];
      347       347    5                  register char *maxpos = &buf[idfsize];
      348       348    5                  register struct idf *idef;
      349       349    5            register int c = *p++;
      350       350    5
      351       351    5        #define cpy  *tg++ = c
      352       352    5        #define load    c = *p++; if (!in_idf(c)) goto endidf
      353       353    5
      354       354    5
      355       355    5                     for(;;) {
      356       356    6                        if (tg < maxpos) {
      357       357    7                           cpy;
      358       358    7                        }
      359       359    6                        load;
      360       360    6                     }
      361       361    5                  endidf:
      362       362    5              p--;
      363       363    5                     *tg = '\0'; /* mark the end of the identifier */
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      364       364    5                     idef = str2idf(buf);
      365       365    5                     if (idef && idef->id_macro ) {
      366       366    6                        push(EXPAND_PARAM);
      367       367    6                     }
      368       368    5                     *tg = 0;
      369       369    5                     tg = buf;
      370       370    5                     while (*tg) {
      371       371    6                        push(*tg++);
      372       372    6                     }
      373       373    5            }
      374       374    4            else if (class(*p) == STNUM)   {
      375       375    5               int chx = *p;
      376       376    5               do  {
      377       377    6                   p++, text[pos++] = chx;
      378       378    6                   if (pos == size)
      379       379    6                      text = Srealloc(text, size += RSTRSIZE);
      380       380    6                   chx = *p;
      381       381    6                   } while (in_idf(chx));
      382       382    5               }
      383       383    4            else
      384       384    4            text[pos++] = (class((cc = *p++)) != STNL) ? cc : ' ';
      385       385    4            if (pos == size)
      386       386    4               text = Srealloc(text, size += RSTRSIZE);
      387       387    4               }
      388       388    3           if (need_formals) need_formals = 0;
      389       389    3           if (stringization) {
      390       390    4            stringization = 0;
      391       391    4            push(0371);
      392       392    4           }
      393       393    3            }
      394       394    2            else {
      395       395    3           if (need_formals) {
      396       396    4            if (class(*ptr) != STSKIP && *ptr != '\n') {
      397       397    5               warning("formal parameter expected after # operator");
      398       398    5               text[single_pound_position] = 040;
      399       399    5               stringization = 0;
      400       400    5               need_formals = 0;
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      401       401    5            }
      402       402    4           }
      403       403    3               text[pos++] = *ptr++;
      404       404    3               if (pos == size)
      405       405    3                  text = Srealloc(text, size += RSTRSIZE);
      406       406    3            }
      407       407    2         }
      408       408    1         text[pos] = '\0';
      409       409    1         *siztext = pos;
      410       410    1         return text;
      411       411    1        }
      412       412
      413       413             EXPORT
      414       414             DoUnstack()
      415       415             {
      416       416    1         Unstacked++;
      417       417    1        }
      418       418
      419       419             EXPORT
      420       420             EnableMacros()
      421       421             {
      422       422    1         register struct mlist *p = ReplaceList;
      423       423    1
      424       424    1         ASSERT(Unstacked > 0);
      425       425    1         while (Unstacked > 0) {
      426       426    2            struct mlist *nxt = p->next;
      427       427    2
      428       428    2            ASSERT(p != 0);
      429       429    2            p->m_mac->mc_flag &= ~NOREPLACE;
      430       430    2            if (p->m_mac->mc_count) p->m_mac->mc_count--;
      431       431    2            if (p->m_repl) vfree(p->m_repl);
      432       432    2            free_mlist(p);
      433       433    2            p = nxt;
      434       434    2            Unstacked--;
      435       435    2         }
      436       436    1         ReplaceList = p;
      437       437    1        }
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      438       438             void Fake_ReplaceList()
      439       439             {
      440       440    1         register struct mlist *repl;
      441       441    1
      442       442    1         repl = new_mlist();
      443       443    1         repl->m_mac = new_macro();
      444       444    1         repl->m_mac->mc_flag = 0;
      445       445    1         repl->m_mac->mc_count = 0;
      446       446    1         repl->m_repl = 0;
      447       447    1         repl->next = ReplaceList;
      448       448    1         ReplaceList = repl;
      449       449    1
      450       450    1        }
      451       451
      452       452
      453       453             int
      454       454             same_name(id_name)
      455       455              char * id_name;
      456       456             {
      457       457    1         register struct mlist * p = ReplaceList;
      458       458    1
      459       459    1         while(p) {
      460       460    2          struct mlist *nxt = p->next;
      461       461    2
      462       462    2          if (!strcmp(p->m_mac->mc_name, id_name))
      463       463    2           return 1;
      464       464    2          p = nxt;
      465       465    2         }
      466       466    1         return 0;
      467       467    1        }
      468       468
      469       469             #else
      470       470   *S*
      471       471   *S*       const int zbc_replace_dummy = 0;
      472       472   *S*
      473       473   *S*       #endif NOPP
      474       474
CC.C03    File=zbc$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
---  Include file information  ---

   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$pathlength:h.:ZBC3TOU. is referenced
   zbc$strsize:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$input:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbc$macro:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$class:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$interface:h.:ZBC3TOU. is referenced
   zbc$static:h.:ZBC3TOU. is referenced
   zbc$idfsize:h.:ZBC3TOU. is referenced

5 warnings were detected in the file zbc$replace:c.:ZBC3TSI
