

CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il1_aux.c,v 1.3 87/03/10 11:12:24 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N L I N E   S U B S T I T U T I O N
        7         7              *
        8         8              *  I L 1 _ A U X . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "il:h"
       13        13             #include "debug:h"
       14        14             #include "alloc:h"
       15        15             #include "global:h"
       16        16             #include "lset:h"
       17        17             #include "em_spec:h"
       18        18             #include "em_pseu:h"
       19        19             #include "il_aux:h"
       20        20             #include "il1_aux:h"
       21        21
       22        22             #define CHANGE_INDIR(p)  (p->p_change->c_flags & CF_INDIR)
       23        23             #define USE_INDIR(p)  (p->p_use->u_flags & UF_INDIR)
       24        24
       25        25             #define IS_INSTR(c)   (c >= sp_fmnem && c <= sp_lmnem)
       26        26
       27        27
       28        28             bool same_size(t1,t2)
       29        29              int t1, t2;
       30        30             {
       31        31    1         /* See if the two types have the same size */
       32        32    1
       33        33    1         return tsize(t1) == tsize(t2);
       34        34    1        }
       35        35
       36        36
CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37
       38        38             STATIC bool is_reg(off,s)
       39        39              offset off;
       40        40              int    s;
       41        41             {
       42        42    1         /* See if there is a register message
       43        43    1          * for the local or parameter at offset off
       44        44    1          * and size s.
       45        45    1          */
       46        46    1
       47        47    1         Lindex i;
       48        48    1         arg_p arg;
       49        49    1
       50        50    1         for (i = Lfirst(mesregs); i != (Lindex) 0; i = Lnext(i,mesregs)) {
       51        51    2            arg = ((line_p) Lelem(i))->l_a.la_arg->a_next;
       52        52    2            if (arg->a_a.a_offset == off &&
       53        53    2                arg->a_next->a_a.a_offset == s) {
       54        54    3               return TRUE;
       55        55    3            }
       56        56    2         }
       57        57    1         return FALSE;
       58        58    1        }
       59        59
       60        60
       61        61             rem_actuals(acts)
       62        62              actual_p acts;
       63        63             {
       64        64    1         /* remove the actual-list */
       65        65    1
       66        66    1         actual_p a,next;
       67        67    1
       68        68    1         for (a = acts; a != (actual_p) 0; a = next) {
       69        69    2            next = a->ac_next;
       70        70    2            /* REMOVE CODE OF a->ac_exp HERE */
       71        71    2            oldactual(a);
       72        72    2         }
       73        73    1        }
CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74
       75        75
       76        76
       77        77             remov_formals(p)
       78        78              proc_p p;
       79        79             {
       80        80    1         /* Remove the list of formals of p */
       81        81    1
       82        82    1         formal_p f, next;
       83        83    1
       84        84    1         for (f = p->P_FORMALS; f != (formal_p) 0; f = next) {
       85        85    2            next = f->f_next;
       86        86    2            oldformal(f);
       87        87    2         }
       88        88    1         p->P_FORMALS = (formal_p) 0;
       89        89    1        }
       90        90
       91        91
       92        92
       93        93             rem_indir_acc(p)
       94        94              proc_p p;
       95        95             {
       96        96    1         /* Formals that may be accessed indirectly
       97        97    1          * cannot be expanded in line, so they are
       98        98    1          * removed from the formals list.
       99        99    1          */
      100       100    1
      101       101    1         formal_p prev, f, next;
      102       102    1
      103       103    1         if (!USE_INDIR(p) && !CHANGE_INDIR(p)) return;
      104       104    1         /* Any formal for which we don't have
      105       105    1          * a register message is now doomed.
      106       106    1          */
      107       107    1         prev = (formal_p) 0;
      108       108    1         for (f = p->P_FORMALS; f != (formal_p) 0; f = next) {
      109       109    2            next = f->f_next;
      110       110    2            if (!is_reg(f->f_offset,tsize(f->f_type))) {
CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    3               if (prev == (formal_p) 0) {
      112       112    4                  p->P_FORMALS = next;
      113       113    4               } else {
      114       114    4                  prev->f_next = next;
      115       115    4               }
      116       116    3               oldformal(f);
      117       117    3            }
      118       118    2         }
      119       119    1        }
      120       120
      121       121
      122       122
      123       123             bool par_overlap(off1,t1,off2,t2)
      124       124              offset off1,off2;
      125       125              int    t1,t2;
      126       126             {
      127       127    1         /* See if the parameter at offset off1 and type t1
      128       128    1          * overlaps the paramete at offset off2 and type t2.
      129       129    1          */
      130       130    1
      131       131    1         if (off1 > off2) {
      132       132    2            return off2 + tsize(t2) > off1;
      133       133    2         } else {
      134       134    2            if (off2 > off1) {
      135       135    3               return off1 + tsize(t1) > off2;
      136       136    3            } else {
      137       137    3               return TRUE;
      138       138    3            }
      139       139    2         }
      140       140    1        }
      141       141
      142       142
      143       143
      144       144             short looplevel(b)
      145       145              bblock_p b;
      146       146             {
      147       147    1         /* determine the loop nesting level of basic block b;
CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    1          * this is the highest nesting level of all blocks
      149       149    1          * that b is part of.
      150       150    1          * Note that the level of a loop is 0 for outer loops,
      151       151    1          * so a block inside a loop with nesting level N has
      152       152    1          * looplevel N+1.
      153       153    1          */
      154       154    1
      155       155    1         Lindex i;
      156       156    1         short max = 0;
      157       157    1
      158       158    1         for (i = Lfirst(b->b_loops); i != (Lindex)0; i = Lnext(i,b->b_loops)) {
      159       159    2            if (((loop_p) Lelem(i))->lp_level >= max) {
      160       160    3               max = ((loop_p) Lelem(i))->lp_level + 1;
      161       161    3            }
      162       162    2         }
      163       163    1         return max;
      164       164    1        }
      165       165
      166       166
      167       167
      168       168             short proclength(p)
      169       169              proc_p p;
      170       170             {
      171       171    1         /* count the number of EM instructions of p */
      172       172    1
      173       173    1         register short cnt;
      174       174    1         register bblock_p b;
      175       175    1         register line_p l;
      176       176    1
      177       177    1         cnt = 0;
      178       178    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      179       179    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      180       180    3               if (IS_INSTR(INSTR(l))) {
      181       181    4                  /* skip pseudo instructions */
      182       182    4                  cnt++;
      183       183    4               }
      184       184    3            }
CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    2         }
      186       186    1         return cnt;
      187       187    1        }
      188       188
      189       189
      190       190
      191       191
      192       192
      193       193             line_p copy_code(l1,l2)
      194       194              line_p l1,l2;
      195       195             {
      196       196    1         /* copy the code between l1 and l2 */
      197       197    1
      198       198    1         line_p head, tail, l, lnp;
      199       199    1
      200       200    1         head = (line_p) 0;
      201       201    1         for (lnp = l1; ; lnp = lnp->l_next) {
      202       202    2          while (INSTR(lnp) == ps_mes) {
      203       203    3            if (lnp == l2) { return head; }
      204       204    3            lnp = lnp->l_next; }
      205       205    2            l = duplicate(lnp);
      206       206    2            if (head == (line_p) 0) {
      207       207    3               head = tail = l;
      208       208    3               PREV(l) = (line_p) 0;
      209       209    3            } else {
      210       210    3               tail->l_next = l;
      211       211    3               PREV(l) = tail;
      212       212    3               tail = l;
      213       213    3           tail->l_next = (line_p) 0;
      214       214    3            }
      215       215    2            if (lnp == l2) break;
      216       216    2         }
      217       217    1         return head;
      218       218    1        }
      219       219
---  Include file information  ---

CC.C03    File=zbe$il1_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$il_aux:h.:ZBC3TOU. is referenced
   zbe$il1_aux:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$il1_aux:c.:ZBC3TSI
