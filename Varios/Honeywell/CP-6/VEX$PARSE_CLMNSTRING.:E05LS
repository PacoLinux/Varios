VERSION E05

PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:1    
        1        1        /*M*    VEX$PARSE_CLMNSTRING - TURN PARSE INPUT INTO EDIT INTRA_RECORD CLMN/STRING
                 1        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
        8        8        VEX$PARSE_CLMNSTRING: PROC(P$,STR$,J0FLAG) ALTRET;
        9        9        /**/
       10       10        /*F*     NAME:     VEX$PARSE_CLMNSTRING
       11       11                 PURPOSE:  TO TAKE THE PARSE BLOCKS DESCRIBING EITHER A COLUMN
       12       12                           POSITION OR A STRING OPTIONALLY PRECEDED BY AN OCCURANCE
       13       13                           NUMBER AND RETURN AN SSE_PARAM DESCRIBING THE COLUMN
       14       14                           NUMBER OR THE STRING.                   */
       15       15        /**/
       16       16        /*D*     NAME:     VEX$PARSE_CLMNSTRING
       17       17                 PARAMETERS: P$ - POINTER TO THE FIRST PARSE BLOCK DESCRIBING
       18       18                                EITHER THE COLUMN NUMBER OR STRING
       19       19                           STR$ - POINTER TO THE SSE_PARAM TO BE FILLED IN
       20       20                           J0FLAG - A VALUE TO INICATE WHETHER ZERO IS A LEGAL
       21       21                                VALUE FOR J.
       22       22                                J0OK = 1 = ZERO IS A LEGAL VALUE
       23       23                                J0NOTOK = 2 = ZERO IS ILLEGAL
       24       24                 DESCRIPTION: IF THE PARSE BLOCK POINTED TO BY THE FIRST SUB-
       25       25                           POINTER IN THE INITIAL PARSE BLOCK DESCRIBES
       26       26                           A COLUMN NUMBER THEN THE CLMNFLAG IS SET IN THE
       27       27                           SSE_PARAM AND CHARBIN IS CALLED TO CONVERT THE TEXT
       28       28                           COLUMN NUMBER TO BINARY. IF COLUMN NUMBER ZERO IS
       29       29                           SPECIFIED THEN THE RETURNED NUMBER IS SET OUT OF RANGE
       30       30                           AS AN INDICATION THAT THE LAST COLUMN OR THE RECORD
       31       31                           IS TO BE SELECTED INSTEAD. IF IT IS AN ILLEGAL COLUMN
       32       32                           NUMBER THEN AN ERROR MESSAGE IS GIVEN TO THE USER
       33       33                           AND AN ALTRETURN IS PERFORMED, ELSE THE VALUE IS
       34       34                           PLACED IN THE SSE_PARAM AND A NORMAL RETURN IS MADE.
       35       35                           IF THE PARSE BLOCKS DESCRIBE A JSTRING THEN
       36       36                           VEX$PARSE_JSTRING IS CALLED TO FILL IN THE SSE_PARAM
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:2    
       37       37                           AND VEX$PARSE_CLMNSTRING RETURNS WITH THE TYPE OF RETURN
       38       38                           THAT VEX$PARSE_JSTRING MAKES TO IT.     */
       39       39        /**/
       40       40        /**********************************************************************/
       41       41        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       42       42        /**********************************************************************/
       43       43    1   DCL P$ PTR;                             /* POINTER TO PARSEBLOCK              */
       44       44    1   DCL STR$ PTR;                           /* POINTER TO SSE$PARAM               */
       45       45    1   DCL J0FLAG UBIN(36);                    /* IS J=0 OK ??                       */
       46       46        /**/
       47       47        /*****************************************************************/
       48       48        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       49       49        /*****************************************************************/
       50       50    1   DCL CLMN_NUM UBIN(36);
       51       51        /**********************************************************************/
       52       52        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       53       53        /**********************************************************************/
       54       54        %PLIST;
       55       55        %INCLUDE XU_MACRO_C;
       56     3161        %INCLUDE VE_SUBS_C;
       57     3355        %INCLUDE VE_PERR_C;
       58     3572        %PARSE$OUT (STCLASS = BASED);
       59     3617    1   DCL 1 SSE$PARAM BASED ALIGNED,          /*SSE TABLE ENTRY                     */
       60     3618    1          2 FLAGS,
       61     3619    1             3 CLMNFLAG BIT(1) UNAL,                    /* IF TRUE NEXT WORD IS CLMN#
       62     3620                                                                   ELSE PTR$ */
       63     3621    1             3 NOTFLAG BIT(1) UNAL,        /* LOG. OP. IS NOT                    */
       64     3622    1             3 ANDFLAG BIT(1) UNAL,        /* LOG. OP. IS AND                    */
       65     3623    1             3 ORFLAG BIT(1) UNAL,         /* LOG. OP. IS OR                     */
       66     3624    1             3 EORFLAG BIT(1) UNAL,        /* LOG. OP. IS EOR*/
       67     3625    1             3 * BIT(13) UNAL,
       68     3626    1          2 J SBIN HALF UNAL,              /* OCCURANCE NUMBER                   */
       69     3627    1          2 PTR$ PTR UNAL,                 /* POINTER TO STRING                  */
       70     3628    1          2 CLMN# REDEF PTR$ UBIN(36) UNAL;
       71     3629    1   DCL 1 STR$BUF BASED ALIGNED,
       72     3630    1          2 COUNT UBIN(9) UNAL,
       73     3631    1          2 TEXT CHAR(255) UNAL;
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:3    
       74     3632        /*****************************************************************/
       75     3633        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       76     3634        /*****************************************************************/
       77     3635    1   DCL VEX$PARSE_JSTRING ENTRY(3) ALTRET;
       78     3636    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       79     3637    1   DCL MAX_CLMN UBIN(36) SYMREF;
       80     3638    1   DCL HI_EXEC_CLMN UBIN WORD SYMREF;
       81     3639    1   DCL LO_EXEC_CLMN UBIN WORD SYMREF;
       82     3640    1   DCL 1 STR_BUF SYMREF,
       83     3641    1          2 COUNT UBIN HALF HALIGNED,
       84     3642    1          2 TEXT CHAR(PC_RECSIZE#) CALIGNED;
       85     3643        /**/
       86     3644        /*****************************************************************************/
       87     3645        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       88     3646        /*****************************************************************************/
       89     3647        /**/
       90     3648    2        IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_CLMNNUM) THEN DO;
       91     3649    2           STR$ -> SSE$PARAM.FLAGS.CLMNFLAG = TRUE;
       92     3650    2           STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3650                    COUNT;
       93     3651    2           STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.TEXT;
       94     3652    2           CALL CHARBIN  (CLMN_NUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));
       95     3653        /**/
       96     3654    2           IF (CLMN_NUM ~= 0)AND
       97     3655    3              ((CLMN_NUM-1 > HI_EXEC_CLMN)OR(CLMN_NUM-1 < LO_EXEC_CLMN)) THEN DO;
       98     3656    3              CALL VEX$ERROR(E$E_CLMNOUTRANGE,3);
       99     3657    3              ALTRETURN;
      100     3658    3              END;
      101     3659        /**/
      102     3660        /*E*     ERROR:    VEE-E$E_CLMNOUTRANGE-0
      103     3661                 MESSAGE:  Column number is outside of selected range
      104     3662                 MESSAGE1: The column number specified is outside of the
      105     3663                           range set by the last SE,SS or ST command.
      106     3664                 DESCRIPTION: CLMN OUT OF RANGE          */
      107     3665        /**/
      108     3666    3           IF (CLMN_NUM > MAX_CLMN) THEN DO; /* ILLEGAL CLMN NUM              */
      109     3667    3              CALL VEX$ERROR(E$E_BADCLMN,3);
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:4    
      110     3668    3   PARSE_CLMNSTRING_ALT:
      111     3669    3              ALTRETURN;
      112     3670    3              END;
      113     3671        /**/
      114     3672        /*E*     ERROR:    VEE-E$E_BADCLMN-0
      115     3673                 DESCRIPTION: A column number not in the range 1-1024
      116     3674                           has been input.
      117     3675        */
      118     3676    2           IF (CLMN_NUM = 0) THEN CLMN_NUM = MAX_CLMN + 1;
              3676                    /* SPECIAL - USE LAST CLMN */
      119     3677    2           ELSE CLMN_NUM = CLMN_NUM - 1;
      120     3678    2           STR$ -> SSE$PARAM.CLMN# = CLMN_NUM;
      121     3679    2           END;
      122     3680    1        ELSE CALL VEX$PARSE_JSTRING(P$ -> OUT$BLK.SUBLK$(0),STR$,J0FLAG)
      123     3681    1              ALTRET (PARSE_CLMNSTRING_ALT);
      124     3682    1        RETURN;
      125     3683    1   END;

PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:5    
--  Include file information  --

   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$PARSE_CLMNSTRING.

   Procedure VEX$PARSE_CLMNSTRING requires 75 words for executable code.
   Procedure VEX$PARSE_CLMNSTRING requires 12 words of local(AUTO) storage.

    No errors detected in file VEX$PARSE_CLMNSTRING.:E05TSI    .

PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:6    

 Object Unit name= VEX$PARSE_CLMNSTRING                       File name= VEX$PARSE_CLMNSTRING.:E05TOU
 UTS= JUL 30 '97 07:14:08.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    75    113  VEX$PARSE_CLMNSTRING
    1  RoData even  none     6      6  VEX$PARSE_CLMNSTRING

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VEX$PARSE_CLMNSTRING

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VEX$ERROR
 yes     yes           Std       3 VEX$PARSE_JSTRING
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     MAX_CLMN                              HI_EXEC_CLMN                          LO_EXEC_CLMN
     STR_BUF                               B_VECTNIL
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:7    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:8    


        1        1        /*M*    VEX$PARSE_CLMNSTRING - TURN PARSE INPUT INTO EDIT INTRA_RECORD CLMN/STRING
                 1        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
        8        8        VEX$PARSE_CLMNSTRING: PROC(P$,STR$,J0FLAG) ALTRET;

      8  0 000000   000000 700200 xent  VEX$PARSE_C* TSX0  ! X66_AUTO_3
         0 000001   000014 000003                    ZERO    12,3

        9        9        /**/
       10       10        /*F*     NAME:     VEX$PARSE_CLMNSTRING
       11       11                 PURPOSE:  TO TAKE THE PARSE BLOCKS DESCRIBING EITHER A COLUMN
       12       12                           POSITION OR A STRING OPTIONALLY PRECEDED BY AN OCCURANCE
       13       13                           NUMBER AND RETURN AN SSE_PARAM DESCRIBING THE COLUMN
       14       14                           NUMBER OR THE STRING.                   */
       15       15        /**/
       16       16        /*D*     NAME:     VEX$PARSE_CLMNSTRING
       17       17                 PARAMETERS: P$ - POINTER TO THE FIRST PARSE BLOCK DESCRIBING
       18       18                                EITHER THE COLUMN NUMBER OR STRING
       19       19                           STR$ - POINTER TO THE SSE_PARAM TO BE FILLED IN
       20       20                           J0FLAG - A VALUE TO INICATE WHETHER ZERO IS A LEGAL
       21       21                                VALUE FOR J.
       22       22                                J0OK = 1 = ZERO IS A LEGAL VALUE
       23       23                                J0NOTOK = 2 = ZERO IS ILLEGAL
       24       24                 DESCRIPTION: IF THE PARSE BLOCK POINTED TO BY THE FIRST SUB-
       25       25                           POINTER IN THE INITIAL PARSE BLOCK DESCRIBES
       26       26                           A COLUMN NUMBER THEN THE CLMNFLAG IS SET IN THE
       27       27                           SSE_PARAM AND CHARBIN IS CALLED TO CONVERT THE TEXT
       28       28                           COLUMN NUMBER TO BINARY. IF COLUMN NUMBER ZERO IS
       29       29                           SPECIFIED THEN THE RETURNED NUMBER IS SET OUT OF RANGE
       30       30                           AS AN INDICATION THAT THE LAST COLUMN OR THE RECORD
       31       31                           IS TO BE SELECTED INSTEAD. IF IT IS AN ILLEGAL COLUMN
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:9    
       32       32                           NUMBER THEN AN ERROR MESSAGE IS GIVEN TO THE USER
       33       33                           AND AN ALTRETURN IS PERFORMED, ELSE THE VALUE IS
       34       34                           PLACED IN THE SSE_PARAM AND A NORMAL RETURN IS MADE.
       35       35                           IF THE PARSE BLOCKS DESCRIBE A JSTRING THEN
       36       36                           VEX$PARSE_JSTRING IS CALLED TO FILL IN THE SSE_PARAM
       37       37                           AND VEX$PARSE_CLMNSTRING RETURNS WITH THE TYPE OF RETURN
       38       38                           THAT VEX$PARSE_JSTRING MAKES TO IT.     */
       39       39        /**/
       40       40        /**********************************************************************/
       41       41        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       42       42        /**********************************************************************/
       43       43    1   DCL P$ PTR;                             /* POINTER TO PARSEBLOCK              */
       44       44    1   DCL STR$ PTR;                           /* POINTER TO SSE$PARAM               */
       45       45    1   DCL J0FLAG UBIN(36);                    /* IS J=0 OK ??                       */
       46       46        /**/
       47       47        /*****************************************************************/
       48       48        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       49       49        /*****************************************************************/
       50       50    1   DCL CLMN_NUM UBIN(36);
       51       51        /**********************************************************************/
       52       52        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       53       53        /**********************************************************************/
       54       54        %PLIST;
       55       55        %INCLUDE XU_MACRO_C;
       56     3161        %INCLUDE VE_SUBS_C;
       57     3355        %INCLUDE VE_PERR_C;
       58     3572        %PARSE$OUT (STCLASS = BASED);
       59     3617    1   DCL 1 SSE$PARAM BASED ALIGNED,          /*SSE TABLE ENTRY                     */
       60     3618    1          2 FLAGS,
       61     3619    1             3 CLMNFLAG BIT(1) UNAL,                    /* IF TRUE NEXT WORD IS CLMN#
       62     3620                                                                   ELSE PTR$ */
       63     3621    1             3 NOTFLAG BIT(1) UNAL,        /* LOG. OP. IS NOT                    */
       64     3622    1             3 ANDFLAG BIT(1) UNAL,        /* LOG. OP. IS AND                    */
       65     3623    1             3 ORFLAG BIT(1) UNAL,         /* LOG. OP. IS OR                     */
       66     3624    1             3 EORFLAG BIT(1) UNAL,        /* LOG. OP. IS EOR*/
       67     3625    1             3 * BIT(13) UNAL,
       68     3626    1          2 J SBIN HALF UNAL,              /* OCCURANCE NUMBER                   */
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:10   
       69     3627    1          2 PTR$ PTR UNAL,                 /* POINTER TO STRING                  */
       70     3628    1          2 CLMN# REDEF PTR$ UBIN(36) UNAL;
       71     3629    1   DCL 1 STR$BUF BASED ALIGNED,
       72     3630    1          2 COUNT UBIN(9) UNAL,
       73     3631    1          2 TEXT CHAR(255) UNAL;
       74     3632        /*****************************************************************/
       75     3633        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       76     3634        /*****************************************************************/
       77     3635    1   DCL VEX$PARSE_JSTRING ENTRY(3) ALTRET;
       78     3636    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       79     3637    1   DCL MAX_CLMN UBIN(36) SYMREF;
       80     3638    1   DCL HI_EXEC_CLMN UBIN WORD SYMREF;
       81     3639    1   DCL LO_EXEC_CLMN UBIN WORD SYMREF;
       82     3640    1   DCL 1 STR_BUF SYMREF,
       83     3641    1          2 COUNT UBIN HALF HALIGNED,
       84     3642    1          2 TEXT CHAR(PC_RECSIZE#) CALIGNED;
       85     3643        /**/
       86     3644        /*****************************************************************************/
       87     3645        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       88     3646        /*****************************************************************************/
       89     3647        /**/
       90     3648    2        IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_CLMNNUM) THEN DO;

   3648  0 000002   200003 470500                    LDP0    @P$,,AUTO
         0 000003   000000 471500                    LDP1    0,,PR0
         0 000004   100003 473500                    LDP3    3,,PR1
         0 000005   300000 720100                    LXL0    0,,PR3
         0 000006   000165 100003                    CMPX0   117,DU
         0 000007   000100 601000 0                  TNZ     s:3680

       91     3649    2           STR$ -> SSE$PARAM.FLAGS.CLMNFLAG = TRUE;

   3649  0 000010   200004 474500                    LDP4    @STR$,,AUTO
         0 000011   400000 475500                    LDP5    0,,PR4
         0 000012   400000 236003                    LDQ     -131072,DU
         0 000013   500000 256100                    ORSQ    0,,PR5

PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:11   
       92     3650    2           STR_BUF.COUNT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.
              3650                    COUNT;

   3650  0 000014   000000 471500                    LDP1    0,,PR0
         0 000015   100003 473500                    LDP3    3,,PR1
         0 000016   300003 475500                    LDP5    3,,PR3
         0 000017   500000 236100                    LDQ     0,,PR5
         0 000020   000033 772000                    QRL     27
         0 000021   000000 620006                    EAX0    0,QL
         0 000022   000000 740000 xsym               STX0    STR_BUF

       93     3651    2          STR_BUF.TEXT = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF.TEXT;

   3651  0 000023   000000 471500                    LDP1    0,,PR0
         0 000024   100003 473500                    LDP3    3,,PR1
         0 000025   300003 475500                    LDP5    3,,PR3
         0 000026   040000 100500                    MLR     fill='040'O
         0 000027   500000 200377                    ADSC9   0,,PR5                   cn=1,n=255
         0 000030   000000 402000 xsym               ADSC9   STR_BUF                  cn=2,n=1024

       94     3652    2           CALL CHARBIN  (CLMN_NUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));

   3652  0 000031   000100 305440                    DTB
         0 000032   000000 430010 xsym               NDSC9   STR_BUF                  cn=2,s=nosgn,sf=0,n=*X0
         0 000033   200010 000010                    NDSC9   CLMN_NUM+2,,AUTO         cn=0,s=lsgnf,sf=0,n=8
         0 000034   200011 235100                    LDA     CLMN_NUM+3,,AUTO
         0 000035   200006 755100                    STA     CLMN_NUM,,AUTO

       95     3653        /**/
       96     3654    2           IF (CLMN_NUM ~= 0)AND

   3654  0 000036   000055 600000 0                  TZE     s:3666
         0 000037   200006 236100                    LDQ     CLMN_NUM,,AUTO
         0 000040   000001 136007                    SBLQ    1,DL
         0 000041   000045 604000 0                  TMI     s:3654+7
         0 000042   000000 116000 xsym               CMPQ    HI_EXEC_CLMN
         0 000043   000045 600000 0                  TZE     s:3654+7
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:12   
         0 000044   000050 603000 0                  TRC     s:3656
         0 000045   000000 236000 xsym               LDQ     LO_EXEC_CLMN
         0 000046   200006 116100                    CMPQ    CLMN_NUM,,AUTO
         0 000047   000055 602000 0                  TNC     s:3666

       97     3655    3              ((CLMN_NUM-1 > HI_EXEC_CLMN)OR(CLMN_NUM-1 < LO_EXEC_CLMN)) THEN DO;

       98     3656    3              CALL VEX$ERROR(E$E_CLMNOUTRANGE,3);

   3656  0 000050   000001 630400 1                  EPPR0   1
         0 000051   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000052   000000 701000 xent               TSX1    VEX$ERROR
         0 000053   000000 011000                    NOP     0

       99     3657    3              ALTRETURN;

   3657  0 000054   000000 702200 xent               TSX2  ! X66_AALT

      100     3658    3              END;
      101     3659        /**/
      102     3660        /*E*     ERROR:    VEE-E$E_CLMNOUTRANGE-0
      103     3661                 MESSAGE:  Column number is outside of selected range
      104     3662                 MESSAGE1: The column number specified is outside of the
      105     3663                           range set by the last SE,SS or ST command.
      106     3664                 DESCRIPTION: CLMN OUT OF RANGE          */
      107     3665        /**/
      108     3666    3           IF (CLMN_NUM > MAX_CLMN) THEN DO; /* ILLEGAL CLMN NUM              */

   3666  0 000055   000000 236000 xsym               LDQ     MAX_CLMN
         0 000056   200006 116100                    CMPQ    CLMN_NUM,,AUTO
         0 000057   000065 603000 0                  TRC     s:3676

      109     3667    3              CALL VEX$ERROR(E$E_BADCLMN,3);

   3667  0 000060   000004 630400 1                  EPPR0   4
         0 000061   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000062   000000 701000 xent               TSX1    VEX$ERROR
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:13   
         0 000063   000000 011000                    NOP     0

      110     3668    3   PARSE_CLMNSTRING_ALT:
      111     3669    3              ALTRETURN;

   3669  0 000064   000000 702200 xent  PARSE_CLMNS* TSX2  ! X66_AALT

      112     3670    3              END;
      113     3671        /**/
      114     3672        /*E*     ERROR:    VEE-E$E_BADCLMN-0
      115     3673                 DESCRIPTION: A column number not in the range 1-1024
      116     3674                           has been input.
      117     3675        */
      118     3676    2           IF (CLMN_NUM = 0) THEN CLMN_NUM = MAX_CLMN + 1;
              3676                    /* SPECIAL - USE LAST CLMN */

   3676  0 000065   000000 115003                    CMPA    0,DU
         0 000066   000072 601000 0                  TNZ     s:3677

   3676  0 000067   000001 036007                    ADLQ    1,DL
         0 000070   200006 756100                    STQ     CLMN_NUM,,AUTO
         0 000071   000074 710000 0                  TRA     s:3678

      119     3677    2           ELSE CLMN_NUM = CLMN_NUM - 1;

   3677  0 000072   000001 135007                    SBLA    1,DL
         0 000073   200006 755100                    STA     CLMN_NUM,,AUTO

      120     3678    2           STR$ -> SSE$PARAM.CLMN# = CLMN_NUM;

   3678  0 000074   400000 471500                    LDP1    0,,PR4
         0 000075   200006 235100                    LDA     CLMN_NUM,,AUTO
         0 000076   100001 755100                    STA     1,,PR1

      121     3679    2           END;

   3679  0 000077   000112 710000 0                  TRA     s:3682
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:14   

      122     3680    1        ELSE CALL VEX$PARSE_JSTRING(P$ -> OUT$BLK.SUBLK$(0),STR$,J0FLAG)

   3680  0 000100   200005 236100                    LDQ     @J0FLAG,,AUTO
         0 000101   200012 756100                    STQ     CLMN_NUM+4,,AUTO
         0 000102   200004 236100                    LDQ     @STR$,,AUTO
         0 000103   200011 756100                    STQ     CLMN_NUM+3,,AUTO
         0 000104   100003 633500                    EPPR3   3,,PR1
         0 000105   200010 453500                    STP3    CLMN_NUM+2,,AUTO
         0 000106   200010 630500                    EPPR0   CLMN_NUM+2,,AUTO
         0 000107   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000110   000000 701000 xent               TSX1    VEX$PARSE_JSTRING
         0 000111   000064 702000 0                  TSX2    PARSE_CLMNSTRING_ALT

      123     3681    1              ALTRET (PARSE_CLMNSTRING_ALT);
      124     3682    1        RETURN;

   3682  0 000112   000000 702200 xent               TSX2  ! X66_ARET
      125     3683    1   END;

PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:15   
--  Include file information  --

   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$PARSE_CLMNSTRING.
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:16   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @J0FLAG                    3-0-0/w PTR         r     1 @P$
     4-0-0/w PTR         r     1 @STR$                      6-0-0/w UBIN        r     1 CLMN_NUM
    *0-0-0/w UBIN        r     1 J0FLAG                    *0-0-0/w PTR         r     1 P$
    *0-0-0/w PTR         r     1 STR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 HI_EXEC_CLMN               0-0-0/w UBIN        r     1 LO_EXEC_CLMN
     0-0-0/w UBIN        r     1 MAX_CLMN                   0-0-0/h STRC(9234)  r     1 STR_BUF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w STRC(72)    r     1 SSE$PARAM
     0-0-0/w STRC(2304)  r     1 STR$BUF


   Procedure VEX$PARSE_CLMNSTRING requires 75 words for executable code.
   Procedure VEX$PARSE_CLMNSTRING requires 12 words of local(AUTO) storage.

    No errors detected in file VEX$PARSE_CLMNSTRING.:E05TSI    .
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:17   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:18   
          MINI XREF LISTING

CLMN_NUM
        50**DCL      3652<<CALLBLT  3654>>IF       3654>>IF       3654>>IF       3666>>IF       3676>>IF
      3676<<ASSIGN   3677<<ASSIGN   3677>>ASSIGN   3678>>ASSIGN
HI_EXEC_CLMN
      3638**DCL      3654>>IF
J0FLAG
        45**DCL         8--PROC     3680<>CALL
LO_EXEC_CLMN
      3639**DCL      3654>>IF
MAX_CLMN
      3637**DCL      3666>>IF       3676>>ASSIGN
OUT$BLK.CODE
      3586**DCL      3648>>IF
OUT$BLK.SUBLK$
      3611**DCL      3648>>IF       3650>>ASSIGN   3650>>ASSIGN   3651>>ASSIGN   3651>>ASSIGN   3680<>CALL
P$
        43**DCL         8--PROC     3648>>IF       3650>>ASSIGN   3651>>ASSIGN   3680>>CALL
PARSE_CLMNSTRING_ALT
      3669**LABEL    3680--CALLALT
SSE$PARAM.CLMN#
      3628**DCL      3678<<ASSIGN
SSE$PARAM.FLAGS.CLMNFLAG
      3619**DCL      3649<<ASSIGN
SSE$PARAM.PTR$
      3627**DCL      3628--REDEF
STR$
        44**DCL         8--PROC     3649>>ASSIGN   3678>>ASSIGN   3680<>CALL
STR$BUF.COUNT
      3630**DCL      3650>>ASSIGN
STR$BUF.TEXT
      3631**DCL      3651>>ASSIGN
STR_BUF.COUNT
PL6.E3A0      #001=VEX$PARSE_CLMNSTRING File=VEX$PARSE_CLMNSTRING.:E05TSI        WED 07/30/97 07:14 Page:19   
      3641**DCL      3650<<ASSIGN   3652>>CALLBLT
STR_BUF.TEXT
      3642**DCL      3651<<ASSIGN   3652>>CALLBLT
VEX$ERROR
      3636**DCL-ENT  3656--CALL     3667--CALL
VEX$PARSE_JSTRING
      3635**DCL-ENT  3680--CALL
