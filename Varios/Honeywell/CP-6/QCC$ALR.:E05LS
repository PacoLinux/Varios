VERSION E05

CALF.D00   OU Name=QCC$ALR                 File=QCC$ALR.:E05TSI                 WED JUL 30 '97 05:02 Page:2
                                     1  *M*  QCC$ALR:  Alphanumeric move.
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *
                                     8  *********************************************************************
                                     9  *                                                                   *
                                    10  *              A L P H A N U M E R I C     M O V E                  *
                                    11  *                                                                   *
                                    12  *********************************************************************
                                    13  *
                                    14  *P*  NAME:         QCC$ALR
                                    15  *P*  PURPOSE:      To perform alphanumeric move operation.
                                    16  *P*  DESCRIPTION:  This routine moves an alphanumeric string of
                                    17  *P*                characters to prespecified destination.  It
                                    18  *P*                currently never altreturns.  No result is
                                    19  *P*                returned.
                                    20        LISTINC
                                    21        INCLUDE   QCC_ASMEQU_E
                                     1+ *M*  QCC_ASMEQU_E:  Common EQUates for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
         00000000                    7+ ZERO              EQU 0
         00000001                    8+ ONE               EQU 1
         00000002                    9+ TWO               EQU 2
         00000000                   10+ CIP_DESC_STRUC    EQU 0
         00000000                   11+ SOURCE_DESC       EQU 0
         00000006                   12+ SOURCE_PTR        EQU 6
         00000002                   13+ TARGET_DESC       EQU 2
         00000008                   14+ TARGET_PTR        EQU 8
         00000004                   15+ AUX_DESC          EQU 4
CALF.D00   OU Name=QCC$ALR                 File=QCC$ALR.:E05TSI                 WED JUL 30 '97 05:02 Page:3
         0000000A                   16+ AUX_PTR           EQU 10
         0000000C                   17+ SOURCE_LEN        EQU 12
         0000000D                   18+ TARGET_LEN        EQU 13
         0000000E                   19+ AUX_LEN           EQU 14
         0000000C                   20+ ARG_LEN           EQU SOURCE_LEN
         0000000D                   21+ ARG_LIST_LEN      EQU TARGET_LEN
         0000000C                   22+ SOURCE_SHIFT_CNT  EQU SOURCE_LEN
         0000000D                   23+ TARGET_SHIFT_CNT  EQU TARGET_LEN
         0000000E                   24+ AUX_SHIFT_CNT     EQU AUX_LEN
         0000000E                   25+ MOP_LEN           EQU AUX_LEN
         0000000F                   26+ SOURCE_DEC        EQU 15
         00000010                   27+ TARGET_DEC        EQU 16
         00000011                   28+ AUX_DEC           EQU 17
         0000000F                   29+ SOURCE_INX        EQU SOURCE_DEC
         00000010                   30+ TARGET_INX        EQU TARGET_DEC
         00000011                   31+ AUX_INX           EQU AUX_DEC
         00000011                   32+ RESULT_DEC        EQU AUX_DEC
         00000012                   33+ ELEM_LEN          EQU 18
         00000013                   34+ ELEM_LIST_LEN     EQU 19
         00000014                   35+ INT_RESULT_LEN    EQU 20
         00000015                   36+ PIC_STRING_DEC    EQU 21
         00000014                   37+ SRCH_RESULT_NUM   EQU INT_RESULT_LEN
         00000015                   38+ SRCH_RESULT_DISP  EQU PIC_STRING_DEC
         00000014                   39+ VRFY_RESULT_DISP  EQU INT_RESULT_LEN
         00000016                   40+ SIZE_ERROR        EQU 22
         00000016                   41+ FILL              EQU SIZE_ERROR
         00000017                   42+ ROUND             EQU 23
         00000017                   43+ COMP_RESULT       EQU ROUND
         00000017                   44+ TARGET_SIZE       EQU ROUND
                                    22        OUNAME    QCC$ALR
                                    23        ENTDEF    QCC$ALR
                                    24  *D*  NAME:         QCC$ALR
                                    25  *D*  CALL:         CALL QCC$ALR ( cip-desc-struc )
                                    26  *D*  PARAMETERS:   cip-desc-struc contains:
                                    27  *D*                 1. source descriptor
                                    28  *D*                 2. target descriptor
CALF.D00   OU Name=QCC$ALR                 File=QCC$ALR.:E05TSI                 WED JUL 30 '97 05:02 Page:4
                                    29  *D*                 3. source length
                                    30  *D*                 4. target length
                                    31  *D*                 5. source index
                                    32  *D*                 6. target index
                                    33  *D*                 7. fill
                                    34  *D*  INTERFACE:
                                    35  *D*  ENVIRONMENT:  Called by the interpreter on behalf of an FPL
                                    36  *D*                routine;  may be called by any language which
                                    37  *D*                adheres to the standard calling sequences.
                                    38  *D*  INPUT:        cip-desc-struc
                                    39  *D*  OUTPUT:       None
                                    40  *D*  SCRATCH:
                                    41  *D*  DESCRIPTION:  This routine moves an alphanumeric string to a
                                    42  *D*                target.  If the length of the sending field is
                                    43  *D*                0, the receiving field will contain the fill
                                    44  *D*                character.  If the length of the receiving field
                                    45  *D*                is 0, the CIP will trap.  R1 containd the index
                                    46  *D*                of the sending field (or starting position in
                                    47  *D*                the starting field). R2 contains the index
                                    48  *D*                (starting position) in the receiving field. R4
                                    49  *D*                contains the sending length.  R5 contains the
                                    50  *D*                fill character and the receiving length.  This
                                    51  *D*                routine loops to completion if the operation
                                    52  *D*                requires movement of more than 255 characters.
                                    53  *D*                As always, B3 points to the list of parameters
                                    54  *D*                until we do the LRDB, then it points to the
                                    55  *D*                cip-desc-struc.
                                    56  *
         000000(0)                  57             SECT      PROC,ZERO
         000000(0)                  58  QCC$ALR    ALIGN     WORD
                                    59  *
 00000   BCC3 0000                  60             LDB,B3    CIP_DESC_STRUC,B3
 00002   E843 000C                  61             LDR,R6    SOURCE_LEN,B3
 00004   F843 000D                  62             LDR,R7    TARGET_LEN,B3
 00006   D843 0016                  63             LDR,R5    FILL,B3
 00008   D570 FF00                  64             AND,R5    ='FF00'X
CALF.D00   OU Name=QCC$ALR                 File=QCC$ALR.:E05TSI                 WED JUL 30 '97 05:02 Page:5
 0000A   9843 000F                  65             LDR,R1    SOURCE_INX,B3
 0000C   A843 0010                  66             LDR,R2    TARGET_INX,B3
 0000E   000C                       67             LRDB          /* LOAD REMOTE BASE DESCRIPTOR REGISTER */
         00000F(0)                  68  LOOP       ALIGN     WORD
                                    69  *
 0000F   E970 00FF                  70             CMR,R6    =255           /* CHECK IF LESS THAN MAX */
 00011   0301 0004                  71             BG        OPR0_LARGE,PREL /* REM LEN OF 1ST OPR > 255 */
                                    72  *
                                    73  * HERE -> (R6) <= 255
                                    74  *
 00013   C856                       75             LDR,R4    R6             /* SET 1ST OPR LEN FOR THIS PASS*
                                      ::/
 00014   83C0 0003                  76             JMP       CHECK_OPR1,PREL /* GO CHECK 2ND OPR LEN */
                                    77  *
         000016(0)                  78  OPR0_LARGE ALIGN     WORD           /* (R6)=LEN OF 1ST OPR > 255 */
                                    79  *
 00016   C870 00FF                  80             LDR,R4    =255
                                    81  *
                                    82  *
         000018(0)                  83  CHECK_OPR1 ALIGN     WORD           /* CHECK REM LEN OF 2ND OPR */
                                    84  *
 00018   F970 00FF                  85             CMR,R7    =255           /* (R7) : 255 ? */
 0001A   0300 000020(0)             86             BG        OPR1_LARGE     /* (R7)=LEN OF 2ND OPR > 255 */
                                    87  *
                                    88  * HERE -> (R7) <= 255
                                    89  *
 0001D   DA57                       90             ADD,R5    R7           /* R5(0:7)=FILL,R5(8:15)=COUNT */
 0001E   83C0 0003                  91             JMP       DO_OPERATION,PREL /* GO DO COMPARE */
                                    92  *
         000020(0)                  93  OPR1_LARGE ALIGN     WORD
                                    94  *
 00020   DA70 00FF                  95             ADD,R5    =255      /* R5(0:7)=FILL,R5(8:15)=COUNT=255 */
                                    96  *
                                    97  *
                                    98  *
         000022(0)                  99  DO_OPERATION ALIGN   WORD
CALF.D00   OU Name=QCC$ALR                 File=QCC$ALR.:E05TSI                 WED JUL 30 '97 05:02 Page:6
                                   100  *
 00022   0021 0000 0010            101             ALR       REMOTE(ZERO),REMOTE(ONE) /* DO (PARTIAL) COMP */
                                   102  *
 00025   9A54                      103             ADD,R1    R4        /* UPDATE INDEX REG FOR 1ST OPR */
 00026   E254                      104             SUB,R6    R4        /* UPDATE REM LENGTH FOR 1ST OPR */
 00027   B855                      105             LDR,R3    R5        /* GET A COPY OF R5 */
 00028   D570 FF00                 106             AND,R5    ='FF00'X  /* LEAVE ONLY FILL INFO IN R5 */
 0002A   B570 00FF                 107             AND,R3    ='00FF'X    /* STRIP FILL INFO FROM R3 */
 0002C   AA53                      108             ADD,R2    R3        /* UPDATE INDEX REG FOR 2ND OPR */
 0002D   F253                      109             SUB,R7    R3        /* UPDATE REM LENGTH FOR 1ST OPR */
                                   110  *
                                   111  *
                                   112  *
 0002E   437F                      113             CSYNC
 0002F   6981 FFDF                 114             BNEZ,R6   LOOP,PREL /* 1ST OPR REMAINING LEN ~= 0 */
 00031   7981 FFDD                 115             BNEZ,R7   LOOP,PREL /* 2ND OPR REMAINING LEN ~= 0 */
                                   116  *
                                   117  *
                                   118  *
                                   119             INCLUDE   QCC_ASMRET_C       /* INCLUDE FOR NORMAL RET */
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 00033   437F                        7+            CSYNC
 00034   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                   120  *
                                   121             END
      No Errors in this assembly.
