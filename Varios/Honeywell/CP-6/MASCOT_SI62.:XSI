/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*  MASCOT -- This file contains the routines to FILL a SCRN
    with the data from the users source file. */
 
 
FILLSCRN: PROC (FILE,FPT_R);
/*
   This routine places all of the characters in the file
   onto the screen.  If the character is an ESCape, this
   routine calls PROCESSESC to handle it.  If the character
   is a LF the SCRN is "scrolled".  If the character is a CR the
   cursor is returned to the left of the screen.  Any other
   characters are ignored.
*/
 
/* INCLUDES */
%INCLUDE MASCOT_C61;    /* INCLUDES AND MACROS */
 
/* PARAMETERS */
%SCRN(FPTN=FILE,STCLASS=PARAM);
%FPT_READ(FPTN=FPT_R,STCLASS=PARAM);
 
/* BASED */
%F$DCB;
 
/* AUTO */
DCL CH SBIN;
DCL ROW SBIN;
DCL NUMLINES SBIN;
 
    IF (FILE.CLRSCR) THEN
      DO ;
        FILE.ROW=0;
        FILE.COL=0;
        CALL CLRSCRN;
        FILE.ROW=-1;
        FILE.CLRSCR='0'B;
      END;
 
    NUMLINES = 0;
    DO WHILE ('1'B);  /* LOOP UNTIL SOMETHING HAPPENS */
       CALL GETCHAR ALTRET(GETOUT);
       IF CH >= %SPACE /* VALID CHARACTER */
          THEN DO ;
          IF (FILE.COL = 80) THEN
            DO;
             FILE.COL = 0;
             CALL SCROLLSCRN;
            END;
          SUBSTR(FILE.LINE(FILE.ROW),FILE.COL,1)=BINASC(CH);
          FILE.COL = FILE.COL + 1;
      END ;
      ELSE IF CH = %ESC THEN DO ;
          CALL PROCESSESC ALTRET(GETOUT);
      END ;
      ELSE IF CH = %CR THEN
          FILE.COL = 0;
      ELSE IF CH = %LF
         THEN DO ;
            CALL SCROLLSCRN;
            NUMLINES = NUMLINES + 1;
            IF NUMLINES = 23
               THEN DO;
                  NUMLINES = 0;
                  GOTO GETOUT;
               END;
         END;
   END ;
GETOUT:;
   RETURN ;
 
SCROLLSCRN: PROC;
/*
   This routine moves all of the lines on the SCRN up one line,
   by replacing the line with the line below it.  The top line
   is lost and the bottom line is blanked.  Just like a dumb
   terminal.
*/
 
    FILE.ROW = FILE.ROW + 1;
    IF FILE.ROW > 23 THEN
       DO;
         FILE.ROW = 23;
         DO ROW = 0 TO 22;
            FILE.LINE(ROW) = FILE.LINE(ROW+1);
         END ;
         FILE.LINE(23) = ' ';
       END ;
END SCROLLSCRN;
 
PROCESSESC: PROC ALTRET;
/*
    This routine handles the various ESC sequences that could
    possibly alter the way data is placed on the screen.  At
    present screen attributes such as intensity, underline,
    inverse video, and justification are ignored.  At present
    only VIP7801 profile is handled.
*/
 
%FPT_WRITE(FPTN=NOESC,
           DCB=M$LO,
           BUF=OUTLINE);
 
DCL M$LO DCB;
 
DCL 1 OUTLINE STATIC,
      2 * CHAR(0) INIT ('UNIMPLEMENTED ESCAPE SEQUENCE '),
      2 CH1 CHAR(1),
      2 * CHAR(2) INIT ('  '),
      2 CH2 CHAR(1) ;
 
 
    CALL GETCHAR ALTRET(DONEESC);
    DO SELECT (BINASC(CH));
       SELECT ('A');    /* UP A ROW */
DECROW:   FILE.ROW=FILE.ROW - 1;
          IF FILE.ROW < 0 THEN FILE.ROW = 23;
       SELECT ('B');    /* DOWN A ROW */
INCROW:   FILE.ROW = FILE.ROW - 1;
          IF FILE.ROW > 23 THEN FILE.ROW = 0;
       SELECT('C');     /* RIGHT A SPACE */
          FILE.COL = FILE.COL + 1;
          IF FILE.COL = 80 THEN DO;
             FILE.COL = 0;
             GOTO INCROW;
          END;
       SELECT('D');     /* LEFT A SPACE */
          FILE.COL = FILE.COL - 1;
          IF FILE.COL < 0 THEN DO;
             FILE.COL = 79;
             GOTO DECROW;
          END ;
       SELECT('H');     /* HOME THE CURSOR */
          FILE.ROW = 0;
          FILE.COL = 0;
       SELECT('J');    /* CLRSCRN TO END OF PAGE */
          CALL CLRSCRN;
       SELECT('K');    /* CLRSCRN TO END OF LINE */
          IF FILE.LINE(FILE.ROW) = '(CR TO GO)'
             THEN DO;
                CALL CLRLINE;
                GOTO DONEESC;
             END;
             ELSE
                CALL CLRLINE;
       SELECT('`');
          FILE.CLRSCR = '1'B;
          GOTO DONEESC;
        SELECT('f');
          CALL GETCHAR ALTRET(DONEESC);
          FILE.COL = CH - %SPACE;
          CALL GETCHAR ALTRET(DONEESC);
          FILE.ROW = CH - %SPACE;
        SELECT ('s');
          CALL GETCHAR ALTRET(DONEESC);
          IF ( CH > 96) THEN CH=CH-32 ;
              /* MAKE IT UPPER CASE */
          DO SELECT (BINASC(CH)) ;
             SELECT ('R','L','I','U');
             SELECT (ELSE);
                OUTLINE.CH1 = 's';
                OUTLINE.CH2 = BINASC(CH);
                CALL M$WRITE(NOESC);
          END ;
        SELECT ('[');
          CALL GETCHAR ALTRET(DONEESC);
          IF (CH=%ASCBIN('M'))  THEN      /* DELETE LINE */
             DO;
              DO ROW = FILE.ROW TO 22;
                 FILE.LINE(ROW) = FILE.LINE(ROW+1);
              END ;
              FILE.LINE(23) = ' ';
            END;
          ELSE IF (CH=%ASCBIN('L')) THEN      /* INSERT LINE */
             DO;
               IF FILE.LINE(23) ~= ' ' THEN
                  GOTO DONEESC;
               DO ROW = 23 DOWNTO FILE.ROW+1;
                 FILE.LINE(ROW) = FILE.LINE(ROW-1);
               END ;
               FILE.LINE(FILE.ROW) = ' ';    /* CLEAR CURRENT LINE */
             END;
          ELSE DO;
             OUTLINE.CH1 = '[';
             OUTLINE.CH2 = BINASC(CH) ;
             CALL M$WRITE(NOESC);
          END ;
        SELECT(ELSE);
          OUTLINE.CH1 = BINASC(CH);
          OUTLINE.CH2 = ' ';
          CALL M$WRITE(NOESC);
    END ;
    RETURN;
DONEESC:;
    ALTRETURN;
END PROCESSESC;
 
GETREC: PROC ALTRET;
/*
   This routine reads the next record from the file.  If
   we are at EOF it sets the appropriate flag and ALTRETs.
   If it finds a VFC character of '037'O, it also ALTRETs.
   This VFC character means COMPARE the SCRNs NOW.  If a VFC
   character of @ is found it does not increment the line
   number.  In any other case, the line number is incremented.
   and the column set back to 1.
*/
 
 
   FILE.BUF = ' ';
  CALL M$READ(FPT_R)
     WHENALTRETURN DO;
        FILE.EOF = '1'B;
        GOTO ALT;
     END ;
 
    FILE.BUFPOS=0;
  IF (DCBADDR(FPT_R.V.DCB#)->F$DCB.DVBYTE.VFC#) THEN
    DO;
    FILE.BUFPOS=1;
     DO CASE(ASCBIN(SUBSTR(FILE.BUF,0,1)));
        CASE (64);
        CASE (30);   /* START OF A NEW RECORD */
        CASE (31);   /* TERN COMMAND */
           FILE.BUFPOS = DCBADDR(FPT_R.V.DCB#)->F$DCB.ARS# + 1;
           GOTO ALT;
        CASE (65);
           FILE.ROW = FILE.ROW + 1;
           FILE.COL = 0;
        CASE (ELSE );
      END ;
    END;
    ELSE DO ;
       FILE.ROW = FILE.ROW + 1;
       FILE.COL = 0;
    END ;
RET:
    IF FILE.ROW > 23 THEN
       DO;
         FILE.CLRSCR='1'B;
         GOTO ALT;
       END;
    RETURN ;
ALT:
    ALTRETURN ;
END GETREC;
 
GETCHAR: PROC ALTRET;
/*
   This routine obtains the next printable character, ESC, LF,or CR).
   if it is at the end of the buffer, it calls GETREC to obtain
   the next record, and then obtains the next legal character.
   This routine ALTRETS if EOF is found.
*/
 
     DO UNTIL (CH >= %SPACE) /* PRINTABLE CHARACTER */
         OR   (CH = %LF)
         OR   (CH = %CR)
         OR   (CH = %ESC);
        IF (FILE.BUFPOS >= DCBADDR(FPT_R.V.DCB#)->F$DCB.ARS#)
           THEN
              CALL GETREC ALTRET(ALT);
        CH = ASCBIN(SUBSTR(FILE.BUF,FILE.BUFPOS,1));
        FILE.BUFPOS = FILE.BUFPOS + 1;
        CH = MOD(CH,128); /* make the character ASCII */
     END;
     IF FILE.ROW < 0 THEN FILE.ROW = 0;
 
     RETURN;
ALT:;
       CH = %SPACE;
       ALTRETURN ;
END GETCHAR;
 
CLRSCRN: PROC;
/*
    This routine blanks out the SCRN from FILE.ROW,FILE.COL to
    the end of the page(24,80).
*/
 
/* AUTO */
DCL LOOP SBIN ;
 
    CALL CLRLINE;               /* CLEAR CURRENT LINE */
    DO LOOP = FILE.ROW+1 TO 23 ;
       FILE.LINE(LOOP) = ' ';
    END;
END  CLRSCRN ;
 
CLRLINE: PROC;
/*
   This routine blanks out the line FILE.ROW of the screen,
   starting at FILE.COL on the line to col 80.
*/
 
/* AUTO */
DCL LOOP SBIN;
 
      DO LOOP = FILE.COL TO 79;
         SUBSTR(FILE.LINE(FILE.ROW),LOOP,1) = ' ';
      END;
END CLRLINE;
 END FILLSCRN;
