

09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* Include file Z8E_MACROS */
    7
    8      /* Macros for Reserving ILS items have been deleted.
    9         If you use %NEW_ILL, the associated ILS and LINOI
   10         items will be automatically created.
   11
   12         Note: Phase 1 links the ILS items in a forward direction;
   13               Phase 2 reverses the links for Phase 3;
   14               Phase 3 reverses the links again for Phase 4.
   15               Phase 4 traverses the ILS in a forward direction.
   16      */
   17
   18      %MACRO CREATE_STOP_ITEM ;
   19             DO ;
   20               COMCOM.PREV_END$ = O1COM.PREV_ILS$ ;
   21               O1COM.LINOI_REQ = TRUE ;
   22               CALL Z8EU$RESERVE_OPN(%LINOI_REQUIRED);
   23               %RESERVE_ILL (ITEM=%STOP, POINTER=ILL$);
   24               ILS$->ILS.ILL$ = ILL$;
   25               %SEARCH_SYSSM (SYSSM_OFFSET=%OP_STOP, SYSSM_NAME="'C8STOP'");
   26             END ;
   27      %MEND ;
   28      %EJECT ;

09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        2    
   29      %MACRO CONDITIONAL_ERROR (@LX_ITEM$ = ,
   30                                @ERROR#    = ,
   31                                @LINE      = COMCOM.CURRENT.LINE,
   32                                @COLUMN    = COMCOM.CURRENT.COLUMN,
   33                                @PLUG1     = ,
   34                                @PLUG2     = ,
   35                                @PLUG3     = );
   36
   37         DO;
   38           %LSET NO_LX_ITEM = (TEXTCHAR(@LX_ITEM$) = '');
   39           %LSET NO_ERROR#   = (TEXTCHAR(@ERROR#)    = '');
   40
   41           %IF NO_LX_ITEM ;
   42             %ERROR (NO_LX_ITEM,'Missing @LX_ITEM$ parameter.',2);
   43           %ENDIF;
   44
   45           %IF NO_ERROR# ;
   46             %ERROR (NO_ERROR#,'Missing @ERROR# parameter.',2);
   47           %ENDIF;
   48
   49           IF NOT @LX_ITEM$ -> LX_ITEM.B.ERROR THEN
   50             DO;
   51               CALL Z8AE$ERROR (@ERROR#,
   52                                @LINE,
   53                                @COLUMN,
   54                                @PLUG1,
   55                                @PLUG2,
   56                                @PLUG3);
   57               %LSET PREPROC_VAR = (SUBSTR (TEXTCHAR (@ERROR#), 0, 2) = 'E$');
   58               %IF PREPROC_VAR;
   59                 %IF @ERROR# >= FIRST_ANSI;
   60                 @LX_ITEM$ -> LX_ITEM.B.ERROR = TRUE;
   61                 %ENDIF;
   62               %ELSE;
   63               IF @ERROR# >= %FIRST_ANSI
   64                 THEN @LX_ITEM$ -> LX_ITEM.B.ERROR = TRUE;
   65               %ENDIF;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        3    
   66
   67             END;
   68         END;
   69
   70      %MEND;
   71      %EJECT;

09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        4    
   72      /* Declarations needed to use NEW_ILL */
   73
   74      DCL   Z8AN$NEW_ILL  ENTRY (4) ;
   75      DCL   Z8AN$NEW_ILL1 ENTRY (5) ;
   76      DCL   Z8AN$NEW_ILL2 ENTRY (6) ;
   77
   78      /* EQU's needed by NEW_ILL */
   79
   80      %INCLUDE Z8E_NEW_ILL;
   81
   82      %MACRO NEW_ILL (@ID = , @ILL$ = ILL$,
   83                      @LIST$ = "ADDR(O1COM.ILS_LIST)",
   84                      @LOP = , @ROP = , @ROPCON = ,
   85                      @TO = , @REMAINDER = , @N = ,
   86                      @CODE = , @LABEL$ = , @EXPR$ =,
   87                      @PFORM_LIST$ = ,
   88                      @WHEN$ = , @SUB = , @LEVEL = ,
   89                      @END$ = , @ETT$ = ,
   90                      @TIMES$ = ,
   91                      @END_ILS$ = "ADDR(NIL)", @BRANCH$ = "ADDR(NIL)", @PROC$ = ,
   92                      @VARYING$ = , @FROM$ = , @BY$ = ,
   93                      @MOP = , @FROM = , @TABLE = ,
   94                      @FILL = , @TABLEVAL = , @ALTRET = , @RETURN = ,
   95                      @DESTINATION$ = , @DESCRIPTOR$ = , @OFFSET = ) ;
   96
   97      /*D*   NAME: NEW_ILL
   98
   99             CALL: %NEW_ILL (@ID = id-of-ILL-item
  100                           [,@ILL$ = ptr-to-ILL-created]
  101                           [,@LIST$ = ptr-to-ILS_LIST-structure]
  102                           [,fields to be filled in] ) ;
  103
  104        INTERFACE: Z8AN$NEW_ILL
  105                     -- Creates LINOI and associated OPN if needed.
  106                     -- Creates OPN, OPV, or OPA ILS item.
  107                     -- Reserves the ILL item, @ID.
  108                     -- Fills in all ILS item fields.
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        5    
  109                   Z8AN$NEW_ILL1 -- alternate entry -- 1 redefinition.
  110                   Z8AN$NEW_ILL2 -- alternate entry -- 2 redefinitions.
  111
  112            INPUT: @ID -- ID of ILL item to be created.
  113                   fields -- ILL field values (eg, @LOP).
  114
  115           OUTPUT: @ILL$ -- Pointer to the ILL item created.
  116                         -- default is ILL$.
  117
  118           IN/OUT: @LIST$ -- A pointer to a structure:
  119                             01  ILS_LIST    BASED (@LIST$),
  120                                 ...
  121                              02 HEAD$       PTR,
  122                              02 TAIL$       PTR,
  123                                 ...
  124                          -- Default is ADDR (O1COM.ILS_LIST).
  125
  126          SCRATCH: ILL$, ILS$.
  127
  128      DESCRIPTION: Calls Z8AN$NEW_ILL, then fills in the ILL fields.
  129                   The first argument to Z8AN$NEW_ILL is a redefinition
  130                   code used to determine what kind of ILS item to
  131                   generate (OPN, OPV, or OPA).  The last arguments
  132                   are the variables that are redefined.
  133
  134      */
  135
  136           DO ;
  137
  138             %IF TEXTCHAR (@ID) = 'LINOI' ;      /* LINOI */
  139
  140               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  141
  142             %ELSEIF TEXTCHAR (@ID) = 'SCOPE';
  143
  144               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$);
  145               %IF TEXTCHAR(@CODE) = '';
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        6    
  146                 @ILL$ -> SCOPE.CODE = %PROGRAM_SCOPE;
  147               %ELSE;
  148                 @ILL$ -> SCOPE.CODE = @CODE;
  149               %ENDIF;
  150
  151               %IF TEXTCHAR(@PROC$) = '';
  152                 %ERROR ('The field SCOPE.PROC$ must be specified!');
  153               %ELSE;
  154                 @ILL$ -> SCOPE.PROC$ = @PROC$;
  155               %ENDIF;
  156
  157               @ILL$ -> SCOPE.BRANCH$ = @BRANCH$;
  158               @ILL$ -> SCOPE.END_ILS$ = @END_ILS$;
  159
  160             %ELSEIF TEXTCHAR (@MOP) ~= '' ;       /* MVEDD (alternate) */
  161
  162               %IF TEXTCHAR (@ID) ~= 'MVEDD' AND TEXTCHAR(@ID) ~= 'MVEAN' ;
  163                 %ERROR ('The fields provided looked like an MVEDD or an MVEAN item, but the @ID was not.') ;
  164               %ENDIF ;
  165
  166               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  167                                  @TO) ;
  168               @ILL$->TRINARY_ILL.LOP = @FROM ;
  169               @ILL$->TRINARY_ILL.ROP = @MOP ;
  170               @ILL$->TRINARY_ILL.TO_ = @TO ;
  171
  172             %ELSEIF TEXTCHAR (@ID) = 'PFORM' ;       /* PFORM */
  173
  174               CALL Z8AN$NEW_ILL (%PFORM_OR_CALL, @ID, @ILL$, @LIST$) ;
  175               %IF TEXTCHAR (@CODE) ~= '' ;
  176               @ILL$->PFORM.CODE = @CODE ;
  177               %ENDIF ;
  178               @ILL$->PFORM.LOP = @LOP ;
  179               @ILL$->PFORM.ROP = @ROP ;
  180               %IF TEXTCHAR (@PFORM_LIST$) ~= '' ;
  181                 @ILL$->PFORM.PFORM_LIST$ = @PFORM_LIST$ ;
  182               %ENDIF ;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        7    
  183
  184             %ELSEIF TEXTCHAR (@ID) = 'VAL' ;     /* VAL */
  185
  186               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  187               @ILL$ -> VAL.ETT$ = @ETT$ ;
  188
  189             %ELSEIF TEXTCHAR (@ID) = 'VAL_END' ;  /* VAL_END */
  190
  191               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  192               @ILL$ -> VAL_END.VAL$ = ADDR(NIL) ; /* Filled by Phase 2 */
  193
  194             %ELSEIF TEXTCHAR (@ID) = 'DOEND' ;   /* DOEND */
  195
  196               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  197               /* All fields filled in by Phase2_PrePass */
  198
  199             %ELSEIF TEXTCHAR (@ID) = 'DO2' ;  /* DO2 */
  200
  201               CALL Z8AN$NEW_ILL (%LABEL_REDEF, @ID, @ILL$, @LIST$) ;
  202               @ILL$->DO_N.TIMES$ = @TIMES$ ;
  203
  204             %ELSEIF TEXTCHAR (@ID) = 'DO3' ;  /* DO3 */
  205
  206               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  207
  208             %ELSEIF TEXTCHAR (@ID) = 'DO4'
  209                  OR TEXTCHAR (@ID) = 'DO5' ; /* DO4 or DO5 */
  210
  211               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  212
  213               %IF TEXTCHAR (@VARYING$) ~= '' ;
  214                 @ILL$->DO_N.VARYING$ = @VARYING$ ;
  215                 @ILL$->DO_N.FROM$    = @FROM$ ;
  216                 @ILL$->DO_N.BY$      = @BY$ ;
  217               %ENDIF ;
  218
  219             %ELSEIF TEXTCHAR (@ID) = 'OS_CALL' ;  /* OS_CALL */
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        8    
  220
  221               CALL Z8AN$NEW_ILL (%PFORM_OR_CALL, @ID, @ILL$, @LIST$) ;
  222               @ILL$->OS_CALL.CODE = @CODE ;
  223               @ILL$->OS_CALL.LOP  = @LOP ;
  224               @ILL$->OS_CALL.ROP  = @ROP ;
  225
  226               %IF EASEE;
  227                  @ILL$->OS_CALL.ARG_NUMBER = O1COM.CURRENT_PROC$ ->
  228                                               PROC_.B.ARG_COUNT;
  229               %ENDIF;
  230
  231               %IF TEXTCHAR (@ALTRET) = '' ;
  232                  %IF TEXTCHAR (@RETURN) = '' ;
  233                     @ILL$->OS_CALL.ALTRET$ = ADDR(NIL) ;
  234                  %ELSE ;
  235                     @ILL$->OS_CALL.RETURN$ = @RETURN ;
  236                  %ENDIF ;
  237               %ELSE ;
  238                  @ILL$->OS_CALL.ALTRET$ = @ALTRET ;
  239               %ENDIF ;
  240
  241
  242             %ELSEIF TEXTCHAR (@ID) = 'USER_CALL' ; /* USER_CALL */
  243
  244               CALL Z8AN$NEW_ILL (%PFORM_OR_CALL, @ID, @ILL$, @LIST$) ;
  245               @ILL$->USER_CALL.LOP  = @LOP ;
  246               @ILL$->USER_CALL.ROP  = @ROP ;
  247               @ILL$->USER_CALL.DESTINATION$ = @DESTINATION$ ;
  248               @ILL$->USER_CALL.BRANCH$ = @BRANCH$;
  249
  250               %IF TEXTCHAR (@ALTRET) = '' ;
  251                  @ILL$->USER_CALL.ALTRET$ = ADDR(NIL) ;
  252               %ELSE ;
  253                  @ILL$->USER_CALL.ALTRET$ = @ALTRET ;
  254               %ENDIF ;
  255
  256             %ELSEIF TEXTCHAR (@ID) = 'COBOL74_CALL';
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        9    
  257                CALL Z8AN$NEW_ILL (%PFORM_OR_CALL, @ID, @ILL$, @LIST$);
  258                @ILL$ -> COBOL74_CALL.LOP = @LOP;
  259                @ILL$ -> COBOL74_CALL.ROP = @ROP;
  260
  261             %ELSEIF TEXTCHAR (@SUB) ~= '' ;   /* EVALU */
  262
  263               %IF TEXTCHAR (@ID) ~= 'EVALU' ;
  264                 %ERROR ('The fields provided looked like a EVALU item, but the @ID was not %EVALU.') ;
  265               %ENDIF ;
  266
  267               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  268               @ILL$->EVALU.CODE = @CODE ;
  269               @ILL$->EVALU.WHEN$ = @WHEN$ ;
  270               @ILL$->EVALU.SUB  = @SUB ;
  271
  272             %ELSEIF TEXTCHAR (@WHEN$) ~= '' ; /* WHEN */
  273
  274               %IF TEXTCHAR (@ID) ~= 'WHEN' ;
  275                 %ERROR ('The fields provided looked like a WHEN item, but the @ID was not %WHEN.') ;
  276               %ENDIF ;
  277
  278               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  279               @ILL$->WHEN.CODE  = @CODE ;
  280               @ILL$->WHEN.WHEN$ = @WHEN$ ;
  281
  282             %ELSEIF TEXTCHAR (@REMAINDER) ~= '' ; /* DV4I */
  283
  284               %IF TEXTCHAR (@ID) ~= 'DV4I' ;
  285                 %ERROR ('The fields provided looked like a DV4I item, but the @ID was not %DV4I.') ;
  286               %ENDIF ;
  287
  288               CALL Z8AN$NEW_ILL2 (%TWO_REDEFS, @ID, @ILL$, @LIST$,
  289                                   @TO, @REMAINDER) ;
  290               @ILL$->DV4I.LOP = @LOP ;
  291               @ILL$->DV4I.ROP = @ROP ;
  292               @ILL$->DV4I.TO_ = @TO  ;
  293               @ILL$->DV4I.REMAINDER = @REMAINDER ;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        10   
  294
  295             %ELSEIF TEXTCHAR (@DESCRIPTOR$) ~= '' ; /* MVEAL */
  296
  297               %IF TEXTCHAR (@ID) ~= 'MVEAL' ;
  298                 %ERROR ('The fields provided looked like a MVEAL item, but the @ID was not %MVEAL.') ;
  299               %ENDIF ;
  300
  301               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  302                                   @TO) ;
  303               @ILL$->MVEAL.LOP = @LOP ;
  304               @ILL$->MVEAL.ROP = @ROP ;
  305               @ILL$->MVEAL.TO_ = @TO  ;
  306               @ILL$->MVEAL.DESCRIPTOR$ = @DESCRIPTOR$ ;
  307
  308             %ELSEIF TEXTCHAR (@EXPR$) ~= '' ;      /* GO (Alternative) */
  309
  310               %IF TEXTCHAR (@ID) ~= 'GO' ;
  311                 %ERROR ('The fields provided looked like a GO item, but the @ID was not %GO.') ;
  312               %ENDIF ;
  313
  314               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  315               @ILL$->GO.CODE = @CODE ;
  316               @ILL$->GO.LOP  = @LABEL$ ;
  317               @ILL$->GO.ROP  = @EXPR$ ;
  318
  319             %ELSEIF TEXTCHAR (@ID) = 'ENTRY' ;    /* ENTRY */
  320
  321               CALL Z8AN$NEW_ILL (%LABEL_REDEF, @ID, @ILL$, @LIST$) ;
  322               @ILL$->ENTRY_ILL.LOP = @LOP ;
  323               %IF TEXTCHAR( @ROP ) = '';
  324                  @ILL$ -> ENTRY_ILL.ROP = ADDR(NIL);
  325               %ELSE;
  326                  @ILL$ -> ENTRY_ILL.ROP = @ROP;
  327               %ENDIF;
  328
  329               %IF TEXTCHAR (@CODE) = '' ;
  330                  @ILL$->ENTRY_ILL.CODE = %MAIN_PROGRAM ;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        11   
  331               %ELSE ;
  332                  @ILL$->ENTRY_ILL.CODE = @CODE ;
  333               %ENDIF ;
  334
  335             %ELSEIF TEXTCHAR (@CODE) ~= '' ;      /* MVANO, MVIH, MVIJ, GO, ACCEP, DISPL, USE_END, USE_ENTRY */
  336
  337               %IF TEXTCHAR (@ID) = 'MVANO'
  338                OR TEXTCHAR (@ID) = 'MVRD'
  339                OR TEXTCHAR (@ID) = 'MVQD'
  340                OR TEXTCHAR (@ID) = 'MVIH'
  341                OR TEXTCHAR (@ID) = 'MVIJ' ;
  342
  343                 CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  344                                     @LOP) ;
  345                 @ILL$->CODED_MOVE.CODE = @CODE ;
  346                 @ILL$->CODED_MOVE.LOP = @LOP ;
  347                 @ILL$->CODED_MOVE.ROP = @ROP ;
  348
  349               %ELSEIF TEXTCHAR (@ID) = 'GO' ;
  350
  351                 CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  352                 @ILL$->GO.CODE = @CODE ;
  353                 @ILL$->GO.LOP = @LOP ;
  354                 @ILL$->GO.ROP = @ROP ;
  355
  356               %ELSEIF TEXTCHAR (@ID) = 'ACCEP' ;
  357
  358                 CALL Z8AN$NEW_ILL1 (%PFORM_OR_CALL, @ID, @ILL$, @LIST$,
  359                                    @ROP -> ARGLIST.ARG$ (0)) ;
  360                 @ILL$->ACCEPT_DISPLAY.CODE = @CODE ;
  361                 @ILL$->ACCEPT_DISPLAY.LOP = @LOP ;
  362                 @ILL$->ACCEPT_DISPLAY.ROP = @ROP ;
  363
  364               %ELSEIF TEXTCHAR (@ID) = 'DISPL' ;
  365
  366                 CALL Z8AN$NEW_ILL (%PFORM_OR_CALL, @ID, @ILL$, @LIST$) ;
  367                 @ILL$->ACCEPT_DISPLAY.CODE = @CODE ;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        12   
  368                 @ILL$->ACCEPT_DISPLAY.LOP = @LOP ;
  369                 @ILL$->ACCEPT_DISPLAY.ROP = @ROP ;
  370
  371
  372
  373               %ELSEIF TEXTCHAR (@ID) = 'USE_ENTRY'  /* USE_ENTRY */
  374                    OR TEXTCHAR (@ID) = 'USE_END';  /* USE_END */
  375
  376                 CALL Z8AN$NEW_ILL(%NO_REDEF, @ID, @ILL$, @LIST$);
  377
  378                 @ILL$ -> ENTRY_ILL.CODE = @CODE;
  379
  380                 %IF TEXTCHAR (@LOP) ~= '';
  381                    @ILL$ -> ENTRY_ILL.LOP = @LOP;
  382                 %ELSE;
  383                    @ILL$ -> ENTRY_ILL.LOP = O1COM.CURRENT_PROC$
  384                                          -> PROC_.PROC_DEF$ ;
  385                 %ENDIF;
  386
  387               %ELSE ; /* Not GO, MVANO, ACCEP, USE_ENTRY, USE_END, or DISPL */
  388                 %ERROR ('The fields provided looked like a GO, MVANO, USE_ENTRY_END, ACCEP, or DISPL, but the @ID did not match.') ;
  389               %ENDIF ;
  390
  391
  392             %ELSEIF TEXTCHAR (@ID) = 'PRESET'  /* PRESET, PTR_SET */
  393                  OR TEXTCHAR (@ID) = 'PTR_SET';
  394
  395               CALL Z8AN$NEW_ILL(%NO_REDEF, @ID, @ILL$, @LIST$) ;
  396
  397               %IF TEXTCHAR (@OFFSET) = '';
  398                 @ILL$->PRESET.OFFSET = 0;
  399               %ELSE;
  400                 @ILL$->PRESET.OFFSET = @OFFSET;
  401               %ENDIF;
  402
  403               @ILL$->PRESET.LOP = @LOP;
  404               @ILL$->PRESET.ROP = @ROP;
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        13   
  405
  406             %ELSEIF TEXTCHAR (@ID) = 'PREOFF'; /* PREOFF */
  407
  408               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$);
  409
  410               %IF TEXTCHAR (@OFFSET) = '';
  411                 @ILL$ -> PREOFF.OFFSET = 0;
  412               %ELSE;
  413                 @ILL$ -> PREOFF.OFFSET = @OFFSET;
  414               %ENDIF;
  415
  416               %IF TEXTCHAR (@N) = '';
  417                 @ILL$ -> PREOFF.N = 0;
  418               %ELSE;
  419                 @ILL$ -> PREOFF.N = @N;
  420               %ENDIF;
  421
  422               @ILL$ -> PREOFF.LOP = @LOP;
  423               @ILL$ -> PREOFF.ROP = @ROP;
  424
  425             %ELSEIF TEXTCHAR (@ID) = 'REMEM';    /* REMEMBER   */
  426
  427                  CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$);
  428
  429                  @ILL$ -> REMEM.LOP = @LOP;
  430                  @ILL$ -> REMEM.ROP = @ROP;
  431
  432             %ELSEIF TEXTCHAR(@ID) = 'P_P_PRESET';   /* P_P_PRESET */
  433
  434                CALL Z8AN$NEW_ILL( %NO_REDEF, @ID, @ILL$, @LIST$ );
  435
  436                %IF TEXTCHAR( @OFFSET ) = '';
  437                   @ILL$ -> P_P_PRESET.OFFSET = 0;
  438                %ELSE;
  439                   @ILL$ -> P_P_PRESET.OFFSET = @OFFSET;
  440                %ENDIF;
  441
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        14   
  442                @ILL$ -> P_P_PRESET.ROP = @ROP;
  443                @ILL$ -> P_P_PRESET.LOP = @LOP;
  444                @ILL$ -> P_P_PRESET.TO_ = @TO;
  445             %ELSEIF TEXTCHAR (@ID) = 'P_A_PRESET';  /* P_A_PRESET */
  446
  447               CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$);
  448
  449               %IF TEXTCHAR (@OFFSET) = '';
  450                 @ILL$ -> P_A_PRESET.OFFSET = 0;
  451               %ELSE;
  452                 @ILL$ -> P_A_PRESET.OFFSET = @OFFSET;
  453               %ENDIF;
  454
  455               @ILL$ -> P_A_PRESET.ROPCON = @ROPCON;
  456               @ILL$ -> P_A_PRESET.LOP    = @LOP;
  457               @ILL$ -> P_A_PRESET.TO_    = @TO;
  458             %ELSEIF TEXTCHAR (@ID) = 'MFILL' ; /* MFILL */
  459
  460               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  461                                   @LOP) ;
  462               @ILL$->MFILL.LOP = @LOP ;
  463               @ILL$->MFILL.FILL = @FILL ;
  464
  465             %ELSEIF TEXTCHAR (@ID) = 'MVT' ;    /* MVT    */
  466
  467               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$, @TO) ;
  468               @ILL$ -> TRINARY_ILL.LOP = @FROM ;
  469               @ILL$ -> TRINARY_ILL.ROP = @TABLE ;
  470               @ILL$ -> TRINARY_ILL.TO_ = @TO ;
  471
  472             %ELSEIF TEXTCHAR (@ID) = 'PINC'   ; /* PINC   */
  473
  474               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$, @LOP );
  475               @ILL$ -> PINC.LOP = @LOP;
  476               @ILL$ -> PINC.ROP = @ROP;
  477               @ILL$ -> PINC.ROPCON = @ROPCON;
  478
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        15   
  479             %ELSEIF TEXTCHAR (@ID) = 'SEARCH' ; /* SEARCH */
  480
  481               %IF TEXTCHAR (@TABLEVAL) = ''
  482                OR TEXTCHAR (@TABLEVAL) = 'ADDR(NIL)' ;
  483                 CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  484                          @TO) ;
  485               %ELSE ;
  486                 CALL Z8AN$NEW_ILL2 (%TWO_REDEFS, @ID, @ILL$, @LIST$,
  487                                     @TO, @TABLEVAL) ;
  488               %ENDIF ;
  489
  490               @ILL$->SEARCH_.LOP = @LOP ;
  491               @ILL$->SEARCH_.ROP = @ROP ;
  492               @ILL$->SEARCH_.TO_ = @TO ;
  493
  494               %IF TEXTCHAR (@TABLEVAL) = '' ;
  495                 @ILL$->SEARCH_.TABLEVAL = ADDR(NIL) ;
  496               %ELSE ;
  497                 @ILL$->SEARCH_.TABLEVAL = @TABLEVAL ;
  498               %ENDIF ;
  499
  500               %IF TEXTCHAR (@ALTRET) = '' ;
  501                 @ILL$->SEARCH_.ALTRET_ = ADDR(NIL) ;
  502               %ELSE ;
  503                 @ILL$->SEARCH_.ALTRET_ = @ALTRET ;
  504               %ENDIF ;
  505
  506             %ELSEIF TEXTCHAR (@TO) ~= '' ; /* MVEAN thru DV3DR, MVDDD */
  507
  508               CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  509                                  @TO) ;
  510               @ILL$->TRINARY_ILL.LOP = @LOP ;
  511               @ILL$->TRINARY_ILL.ROP = @ROP ;
  512               @ILL$->TRINARY_ILL.TO_ = @TO  ;
  513
  514             %ELSEIF TEXTCHAR (@ROP) ~= '' ; /* AD2D thru MVDI, MVIK, ALTER  */
  515
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        16   
  516               %IF TEXTCHAR (@ID) = 'ALTER' ;
  517                 CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  518               %ELSE ; /* @LOP is redefined */
  519                 CALL Z8AN$NEW_ILL1 (%ONE_REDEF, @ID, @ILL$, @LIST$,
  520                                     @LOP) ;
  521               %ENDIF ;
  522
  523               @ILL$->BINARY_ILL.LOP = @LOP ;
  524               @ILL$->BINARY_ILL.ROP = @ROP ;
  525
  526             %ELSEIF TEXTCHAR (@LOP) ~= '' ; /* GO_SUB, DEFLB, Ox_SWITCH, STP2 */
  527
  528               %IF @ID = %DEFLB
  529                OR @ID = %GO_SUB ;
  530                 CALL Z8AN$NEW_ILL (%LABEL_REDEF, @ID, @ILL$, @LIST$) ;
  531               %ELSEIF @ID = %ON_SWITCH
  532                    OR @ID = %OFF_SWITCH ;
  533                 CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  534               %ELSEIF @ID = %STP2;
  535                  CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$);
  536               %ELSE ;
  537                 %ERROR ('Unary ILL item is not GO_SUB, Ox_SWITCH, or DEFLB.') ;
  538               %ENDIF ;
  539
  540               @ILL$->UNARY_ILL.LOP = @LOP ;
  541
  542             %ELSEIF TEXTCHAR (@LABEL$) ~= '' ;  /* DEFLB (Alternative) */
  543
  544               CALL Z8AN$NEW_ILL (%LABEL_REDEF, @ID, @ILL$, @LIST$) ;
  545               @ILL$->DEFLB.LOP = @LABEL$ ; /* or @LOP */
  546
  547             %ELSE ; /* STOP, END, PEND, STOPL, SUB_ENTRY, SUB_END,
  548                        END_PROG */
  549
  550               %IF @ID = %STOP
  551                OR @ID = %STOPL
  552                OR @ID = %END
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        17   
  553                OR @ID = %SUB_ENTRY
  554                OR @ID = %SUB_END
  555                OR @ID = %EXIT_PROG
  556                OR @ID = %END_PROG
  557                OR @ID = %PEND ;
  558                 CALL Z8AN$NEW_ILL (%NO_REDEF, @ID, @ILL$, @LIST$) ;
  559               %ELSE ;
  560                 %ERROR ('@ID incorrect or inconsistent with fields passed.') ;
  561               %ENDIF ;
  562
  563             %ENDIF ;
  564
  565           END ;
  566
  567             /* The following is to avoid multitudinous error messages */
  568
  569             %IF TEXTCHAR (@LOP) ~= ''
  570             AND TEXTCHAR (@ROP) ~= ''
  571             AND TEXTCHAR (@TO)  ~= ''
  572             AND TEXTCHAR (@REMAINDER) ~= ''
  573             AND TEXTCHAR (@CODE) ~= ''
  574             AND TEXTCHAR (@LABEL$) ~= ''
  575             AND TEXTCHAR (@EXPR$) ~= ''
  576             AND TEXTCHAR (@PFORM_LIST) ~= ''
  577             AND TEXTCHAR (@WHEN$) ~= ''
  578             AND TEXTCHAR (@SUB) ~= ''
  579             AND TEXTCHAR (@LEVEL) ~= ''
  580             AND TEXTCHAR (@END$) ~= ''
  581             AND TEXTCHAR (@TIMES$) ~= ''
  582             AND TEXTCHAR (@VARYING$) ~= ''
  583             AND TEXTCHAR (@FROM$) ~= ''
  584             AND TEXTCHAR (@BY$) ~= ''
  585             AND TEXTCHAR (@FROM) ~= ''
  586             AND TEXTCHAR (@MOP) ~= ''
  587             AND TEXTCHAR (@ETT$) ~= ''
  588             AND TEXTCHAR (@FILL) ~= ''
  589             AND TEXTCHAR (@TABLE) ~= ''
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        18   
  590             AND TEXTCHAR (@TABLEVAL) ~= ''
  591             AND TEXTCHAR (@ALTRET) ~= ''
  592             AND TEXTCHAR (@RETURN) ~= ''
  593             AND TEXTCHAR (@DESTINATION$) ~= ''
  594             AND TEXTCHAR (@DESCRIPTOR$) ~= '' ;
  595
  596             %ENDIF ;
  597
  598      %MEND ; /* NEW_ILL */
  599
  600      %EJECT;

09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        19   
  601
  602
  603      %MACRO SET_PHASE_1_POSITION (@LINE = COMCOM.CURRENT.LINE,
  604                                   @COLUMN = COMCOM.CURRENT.COLUMN,
  605                                   @TYPE = %NO_STATEMENT_TYPE);
  606        DO;
  607          O1COM.LINE_NO = @LINE;
  608          O1COM.COLUMN_NO = @COLUMN;
  609
  610          IF O1COM.STATEMENT_TYPE ~= %NO_STATEMENT_TYPE THEN
  611            DO;
  612              %NEW_ILL (@ID = %LINOI);
  613            END;
  614
  615          O1COM.STATEMENT_TYPE = @TYPE;
  616        END;
  617      %MEND;
  618
  619
  620
  621      %MACRO EXTRACT_SWITCH_CHANNEL (@DNT$ = DNT$,
  622                                     @NUMBER = 0);
  623
  624         DO;
  625           IF SUBSTR (@DNT$ -> DNT.TEXT.NAME,
  626                      @DNT$ -> DNT.TEXT.LENGTH - 2, 1) >= '0'
  627           AND SUBSTR (@DNT$ -> DNT.TEXT.NAME,
  628                       @DNT$ -> DNT.TEXT.LENGTH - 2, 1) <= '9' THEN
  629             CALL CHARBIN (@NUMBER,
  630                           SUBSTR (@DNT$ -> DNT.TEXT.NAME,
  631                                   @DNT$ -> DNT.TEXT.LENGTH - 2));
  632           ELSE
  633             CALL CHARBIN (@NUMBER,
  634                           SUBSTR (@DNT$ -> DNT.TEXT.NAME,
  635                                   @DNT$ -> DNT.TEXT.LENGTH - 1));
  636         END;
  637
09:15 AUG 09 '97 Z8E_MACROS.:Z8A6SI                                        20   
  638      %MEND;
  639
  640      %MACRO STATEMENT_START_FROM_LX_TERM ( @POINTER = ,
  641                                            @TYPE = %NO_STATEMENT_TYPE);
  642        DO;
  643          %LSET @TEMP_LINE = CHARTEXT(CONCAT(TEXTCHAR(@POINTER), '-> LX_TERMINAL.LINE'));
  644          %LSET @TEMP_COLUMN = CHARTEXT(CONCAT(TEXTCHAR(@POINTER), '-> LX_TERMINAL.COLUMN'));
  645
  646          %SET_PHASE_1_POSITION (@LINE = "%@TEMP_LINE",
  647                                 @COLUMN = "%@TEMP_COLUMN",
  648                                 @TYPE = @TYPE);
  649          %NEW_ILL(@ID = %LINOI);
  650        END;
  651      %MEND;
  652
  653
  654       %MACRO TP_OPT_CHECK (@KEY_WORD$ = );
  655         DO;
  656           IF COMCOM.OB.TP THEN
  657             CALL Z8AE$ERROR (%E$NOT_ALLOWED_IN_DM4_TP,
  658                              @KEY_WORD$ -> LX_ITEM.LINE,
  659                              @KEY_WORD$ -> LX_ITEM.COLUMN);
  660         END;
  661       %MEND;

