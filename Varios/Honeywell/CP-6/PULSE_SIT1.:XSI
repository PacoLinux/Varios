..:FMT "D"
.*******************************************************************************
.*                                                                             *
.*            Copyright, (c) Gregory J. Smith, 1986 - 1990                     *
.*                     Bucknell Computer Services                              *
.*                                                                             *
.*******************************************************************************
.*                                                                             *
.*  To prepare this manual, issue the following command:                       *
.*     !TEXT PULSE_SIT1.account {ON|OVER} fid (IN=7,FORM=LONG)                 *
.*                                                                             *
.*******************************************************************************
.*
.SRV MANUAL_NUMBER "PULSE"
.spb 4
.fif
.alc
P_U_L_S_E__S_c_r_e_e_n__E_d_i_t_o_r__U_s_e_r_'_s__M_a_n_u_a_l_
 
Release B09
 
August 15, 1990
 
Bucknell Computer Services
Bucknell University
.brp
.SRV SECTION "m"
.spb 50
Copyright (c) Gregory J. Smith, Bucknell University, 1986-1990.
.brp
.all
.htd TOC 2,67" ."
.htn ` TOC
.brp
.srv C_HEAD1 "Table of Contents"
.fif
.srm rl PageNo
.spb 7
.BBE
||CONTENTS||
.SPF 2
|||Page|
.SPF 1
.BEE
.HBB
||CONTENTS (cont)||
.SPF 2
|||Page|
.SPF 2
.HBE
.spb 1
.brn 3
 Section 1  Using PULSE`   1-1
`     Blocks`   1-2
`     Active Files`   1-3
.spb 1
.brn 3
 Section 2  PULSE Options`   2-1
`     Read Only Syntax`   2-1
`     Update Syntax`   2-1
`     Work file syntax`   2-2
`     No Work File syntax`   2-2
`     Encryption syntax`   2-3
`     WordWrapClm syntax`   2-3
`     InsertMode syntax`   2-4
`     OverStrikeMode syntax`   2-4
`     HScroll syntax`   2-4
`     StripBlanks syntax`   2-4
`     TextEdit syntax`   2-5
`     EasyAppend syntax`   2-5
`     RcrWrap syntax`   2-5
`     KeepNewEmpty syntax`   2-5
`     UseWorkFiles syntax`   2-6
`     KeyFile syntax`   2-6
.spb 1
.brn 3
 Section 3  Context Files`   3-1
.spb 1
.brn 3
 Section 4  Command Summary`   4-1
.spb 1
.brn 3
 Section 5  Entering the Command Window`   5-1
`     Commands allowed in the Command Window`   5-1
`     linenumber`   5-1
`     EDIT | PULSE`   5-2
`     Next`   5-3
`     Previous`   5-3
`     Close`   5-3
`     Delete`   5-4
`     List`   5-4
`     Save`   5-5
`     Restore`   5-5
`     Transform`   5-5
`     Tabs`   5-6
`     Type`   5-6
`     Directory`   5-6
`     Do Command`   5-7
`     Print Command`   5-7
`     Erase Command`   5-7
`     Time Command`   5-7
`     Help Command`   5-7
`     End Command`   5-8
.spb 1
.brn 3
 Section 6  Command Descriptions`   6-1
`     Marking the Beginning of a Block`   6-1
`     Marking the End of a Block`   6-1
`     Unmarking a Block`   6-2
`     Copying a Block`   6-2
`     Deleting a Block`   6-2
`     Moving a Block`   6-3
`     Saving a Block to the Temporary Buffer`   6-3
`     Merging a Block from the Temporary Buffer`   6-3
`     Writing a Selected Block to Disk`   6-4
`     Reading Blocks from Disk`   6-4
`     Saving a Copy of the Current File`   6-4
`     Marking a Spot in the File`   6-5
`     Exiting the Editor`   6-5
`     Finding a Word`   6-5
`     Replacing a String`   6-6
`     Repeating the Last Find or Replace Operation`   6-7
`     Toggling the Search Direction`   6-7
`     Going to the Beginning of the File`   6-8
`     Going to the End of the File`   6-8
`     Going to a Remembered Spot in the File`   6-8
`     Going to the Beginning of a Currently Marked Block`   6-8
`     Going to the End of a Currently Marked Block`   6-9
`     Determining the Current Line Number`   6-9
`     Displaying the Current Status`   6-9
`     Going to the Next File in the Active File List`   6-9
`     Going to the Previous File in the Active File List`   6-10
`     Toggling Strip Blanks Mode`   6-10
`     Setting Word Wrap`   6-10
`     Setting Horizontal Scrolling`   6-11
`     Setting Insertion Mode`   6-11
`     Setting Overstrike Mode`   6-11
`     Toggling Text Edit Mode`   6-12
`     Toggling EasyAppend Mode`   6-12
`     Toggling Record Wrap Mode`   6-12
`     Joining Lines`   6-13
`     Deleting Lines`   6-13
`     Restoring a Changed Line`   6-13
`     Splitting Lines / Inserting Blank Lines`   6-14
.spb 1
.brn 3
 Section 7  Arrow Keys and Useful Escape Sequences`   7-1
..:L0H "ABOUT THIS MANUAL"
.alb
.fin
This manual describes how to use the PULSE screen editor.  PULSE is
designed to be terminal independent and fairly flexible.  The manual
contains information on starting the editor and using the various commands
and features available in a screen editor.  The manual is broken down into
sections summarizing and describing the commands and explaining the
functionality of PULSE.
 
This manual was prepared using the PULSE screen editor.
.fif
..:L0H "NOTATION CONVENTIONS"
.alb
.fin
The following table gives notation conventions used in this and other CP-6
manuals for describing syntax of commands.
 
.alc
Notation Conventions Table
.all
 
Notation     Description
 
Lowercase Letters
 
             Lowercase letters indicate that the element is a
             variable, to be replaced with the desired value from
             an accompanying list.
 
 
CAPITAL LETTERS
 
             Capital letters indicate a literal, to be entered as
             shown.
 
 
Brackets
 
             An element inside brackets is optional.  When used to
             enclose portions of keywords, brackets signify that the
             bracketed portion may be omitted, or truncated at any
             point.
 
 
Braces
 
             Elements placed within braces signify a required
             choice.  For instance,  {ON|TO|INTO|OVER}  indicates
             that a choice must be made from one of the four
             keywords separated by  OR  bars.
.brp
OR Bar
 
             The OR bar separates elements in a list from which one
             element may be or must be chosen.
 
 
Letters preceded by a carat
 
             Letters preceded by a carat indicate that the control
             key should be held down at the same time as the key
             denoted by the letter.  i.e.  ^K indicates that the
             control and K keys be held down at the same time.
.SRV SECTION 1
..:L0H "Using PULSE"
.trf ^^
.brb
.ALB
.fin
PULSE is a Pretty Useful Little Screen Editor.
In order to use the screen editor, the user must be logged onto a
correctly profiled video terminal (CRT).  The terminal must also have the
proper screen editing attributes defined in its profile.  PULSE, and any
other screen editor for that matter, cannot function on a hardcopy device.
For information on using CP-6 terminal profiles, see the CP-6 Programmer
Reference Manual (CE40).
 
.fif
 
To start the PULSE editor from IBEX, type:
 
      !PULSE [fid  [( options [)]]]
 
Parameters:
    fid      is the CP-6 file identifier of the file you wish to
             edit.
 
    options  are a list of one or more PULSE command options.
             Available options can be seen in the OPTIONS section.
 
 
.fin
When PULSE starts up, it will clear the display window and place a status
bar at the top of the window.  The status bar contains the name of the
file being edited and will be used to prompt for user responses in
conjunction with certain commands.  If fid  is not specified, the status bar
will contain the string 'No file open.'  In this case, the user will be
placed in a command window where a file may be selected.
 
If fid exists, then PULSE will open the file and display the first several
lines of text for you.  If fid does not exist, PULSE will create a new
file for you with the name fid.  PULSE will only create keyed files, but it
can perform limited modifications on consecutive files, as well as examine
them in READ ONLY mode.
 
If the user specifies a file that cannot be updated, PULSE will automatically
open the file READ ONLY and inform the user of this, whether that option was
specified or not.  The minimum access attributes necessary for a file to be
open for update are DelR, WNew, Upd and Read.  DelF access is not necessary,
but if it is present on the file, PULSE will perform several of its functions
in a much more efficient manner.
 
The commands are based on control codes issued by the user.  The screen
editor allows you to insert and delete lines in a file, as well as modify
them, while the screen displays the context of the surrounding lines in
the file.  Positioning of the cursor is done either with the arrow keys,
or by issuing the appropriate commands.  For a summary of the available
commands, see the COMMAND SUMMARY section.  In order to gain online help,
use the  ^C H command to enter the command window, and then use the HELP
command.  For more details, see the ENTERING THE COMMAND WINDOW section.
 
PULSE maintains EDIT compatible keys for the file being edited.
Periodically, if there is no room to insert a record, PULSE will tell you
to wait while it makes more room for your new records.  The amount of time
you must wait depends, partially, on the size of the file and the current
fragmentation of keys within the file.
 
PULSE also makes use of context files to describe the type of terminal
being used for screen editing.  See the CONTEXT FILES section for a
description of how these work.
 
..:L2H "Blocks"
.trf ^^
.alb
In addition to working with individual lines and sections of lines, PULSE
can also perform several commands on blocks.  A block is a section of the
document currently being edited.  A block may be part of a line, several
lines, or the entire file.  The limits of the block are defined by a
beginning marker and an end marker.  Blocks allow the user to manipulate a
large section of a document all at once, without having to repeat several
simple operations on a line by line basis.  The block commands include
marking and unmarking a block, copying a block, moving a block, deleting a
block, and transferring a block to and from disk.  Once marked, a block is
defined until the user specifically unmarks it, deletes the block, moves it,
closes the file, or exits the editor.
 
..:L2H "Active Files"
.trf ^^
.alb
PULSE maintains a list of active files during an editing session.
When you use the command window to select
another file to edit, PULSE will store the context of your current file (i.e.
the position you last had in the file, your block and spot marks, and the
settings of the various PULSE flags and output controls).  PULSE will then
open the new file.  At any time, you can use the NEXT or PREVIOUS commands in
the command window to go back to your place in one of the files you had been
editing.  For more information on how the commands in the command window
affect the active file list, see the ENTERING THE COMMAND WINDOW section in
this manual.
 
.SRV SECTION 2
..:L0H "PULSE Options"
.trf ^^
.ALB
Valid PULSE options are:
 
    CRPT                   EASYAPPEND
    HSCROLL                INSERT
    KEEPNEWEMPTY           KEYFILE
    NWORK                  OVERSTRIKE
    RCRWRAP                READONLY
    STRIPBLANKS            TEXTEDIT
    UPDATE                 USEWORKFILES
    WORDWRAPCLM            WORK
..:L2H "Read Only Syntax"
.trf ^^
.alb
    { R[EADONLY] | EX[AMINE] | I[NPUT] }
 
.inl +5
.fin
The READONLY option causes the specified file to be opened in the read
only mode; updates to the file are not allowed.  Synonyms for this command
are INPUT and EXAMINE.
.inl -5
.fif
..:L2H "Update Syntax"
.trf ^^
.alb
    U[PDATE]
 
.inl +5
.fin
The UPDATE option causes the specified file to be opened for updates.  This is
the default when first opening a file.
.inl -5
.fif
..:L2H "Work file syntax"
.trf ^^
.alb
    W[ORK]
 
.fin
.inl +5
The WORK file option causes PULSE to open a temporary work file for you to
edit; any changes made do not affect your original file.  When you finish
with a work file by exiting PULSE or closing the file, you will be asked if
you wish to save your file and its new changes.  The file will be saved
unless you hit N or n in response to the question.  If the work file is to be
saved, PULSE will prompt for a file name.  Hit the <CR> key if you want to
overwrite the original.  If you wish to create a new file, enter the name of
the file you wish to create.  If the file does not exist, PULSE will create
it for you.  If the file does exist, PULSE will ask if you wish to overwrite
the existing file.  Respond Y, N, or Q.  A Y response will overwrite the
existing file; N will cause PULSE to prompt you for an alternate file name; Q
will cause PULSE to continue closing the work file without saving the
changes.  If PULSE is attempting to open a work copy for a file that does not
exist, PULSE will create an empty work file and tell you that it has created a
new file.  When closing the work file, a <CR> response will tell PULSE to save
the work file with the name you specified on the edit command.  Also, <ESC>
<D> will recall the original file name at the prompt.
 
The shortest form of the WORK command is W.
 
NOTE:  Saving your context with the SAVE command when work files are present
is not a very good idea.  If you do SAVE and subsequently log off the system,
a RESTORE command will be unable to locate the work copies of your file.  For
this reason, it is recommended that you save your work files with the
TRANSFORM command prior to saving your context.
 
.inl -5
.fif
..:L2H "No Work File syntax"
.trf ^^
.alb
    NW[ORK]
 
.INL 5
.FIN
The NWORK option tells PULSE not to use a Work File copy when editing a file.
Ordinarily, this is the default for PULSE, but it can be overridden by using
the USEWORKFILES command in your context file.  The NWORK option is a good way
of getting around that context file command for a specific file.
 
.inl -5
.fif
..:L2H "Encryption syntax"
.trf ^^
.alb
.fif
    CR[PT] [=] seed      where seed is an octal encryption code in the
                         range 1 to 777777777777.
 
.fin
.inl +5
The CRPT option tells PULSE to open the specified file and use the specified
seed for all I/O to that file.  Any work file created from an encrypted file
and saved over a new file will inherit the encryption seed from the original
file.  Also, if you specify an incorrect encryption seed, PULSE may be unable
to handle your file.  In that case, PULSE will report the error, close the
file, and place the cursor in the command window.  The seed will remain in
effect throughout the file.
 
NOTE:  While you can use different seeds in your file by changing the
seed with an option on the EDIT command in the command window, it is not a
good idea to do so.  Different seeds for different records within the file
does not generally make sense in a screen editing environment.  Consequently,
if your file already utilizes multiple seeds, you should use a different
editor.
 
NOTE:  A SAVEd context does not contain the seed used for an encrypted
file.  Instead, when restoring a context with encrypted files in it, PULSE
will prompt for the seed to use on that file.  If you have since removed
the encryption from the file, a seed of zero (0) tells PULSE not to use
encryption on that file.
 
.inl -5
.fif
..:L2H "WordWrapClm syntax"
.trf ^^
.alb
    Word[WrapClm]  [=] width
 
.inl 5
.fin
The WordWrapClm option will set automatic line wrapping at the column
specified by  width.
 
.inl -5
.fif
..:L2H "InsertMode syntax"
.trf ^^
.alb
    Ins[ertMode]
 
.inl 5
.fin
The InsertMode option causes new characters to appear before old ones, moving
the old ones to the right, as letters are typed by the user.
 
.inl -5
.fif
..:L2H "OverStrikeMode syntax"
.trf ^^
.alb
    Over[StrikeMode]
 
.inl 5
.fin
The OverStrike option causes new characters to replace old ones as letters are
typed by the user.  This is the opposite of InsertMode.  OverStrikeMode is
PULSE's default.
 
.inl -5
.fif
..:L2H "HScroll syntax"
.trf ^^
.alb
    HSc[roll] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The HScroll option, when activated, will cause long lines to move left and
right on the screen according to the cursor position.  When HScroll is off,
lines which are longer than the screen width will wrap to multiple lines on
the screen.  The default is ON.
 
.inl -5
.fif
..:L2H "StripBlanks syntax"
.trf ^^
.alb
    Str[ipBlanks] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The StripBlanks option, when activated, will strip trailing blanks from lines.
The default is ON.
 
.inl -5
.fif
..:L2H "TextEdit syntax"
.trf ^^
.alb
    Tex[tEdit] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The TextEdit option, when activated, will preserve a space between words when
adjacent lines are joined.  The default is ON.
 
.inl -5
.fif
..:L2H "EasyAppend syntax"
.trf ^^
.alb
    Easy[Append] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The EasyAppend option, when activated, will allow the file to be extended
by simply striking the carriage return or using the down arrow key.  When
EasyAppend is off, the file can only be extended by typing <space><CR>.
The default is ON.
 
.inl -5
.fif
..:L2H "RcrWrap syntax"
.trf ^^
.alb
    Rcr[Wrap] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The RcrWrap option, when activated, will allow the cursor keys to continue to
the next or previous line when they reach the end or beginning of a line.  The
default is ON.
 
.inl -5
.fif
..:L2H "KeepNewEmpty syntax"
.trf ^^
.alb
    Keep[NewEmpty] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The KeepNewEmpty option is used to change PULSE's default treatment of empty
files.  This option is not file specific like the other options.  When
KeepNewEmpty is activated (the default), empty files are preserved.  When this
option is turned off, empty files are thrown away as soon as the user leaves
PULSE or accesses a different file.
 
.inl -5
.fif
..:L2H "UseWorkFiles syntax"
.trf ^^
.alb
    UseWork[Files] [[=] { Y[ES] | ON | N[O] | OFF }]
 
.inl 5
.fin
The UseWorkFiles option is used to change PULSE's default treatment of files.
When this option is activated, any file accessed by PULSE will be handled in a
Work File Copy instead of using the original.  This option is not file
specific, and defaults to NO.
 
.inl -5
.fif
..:L2H "KeyFile syntax"
.trf ^^
.alb
    K[eyFile]
 
.inl 5
.fin
The KeyFile option is used to tell PULSE to make the selected file into a
keyed file, if it is not already keyed with EDIT keys, and if it is not in
ReadOnly or WorkFile mode.  Files keyed with a key different from EDIT keys
will be left alone.
 
.inl -5
.fif
.SRV SECTION 3
..:L0H "Context Files"
.trf ^^
.ALB
.fin
In order  for PULSE to be  terminal independent, it needs  to know about
the terminal that is being  used.  Information for the various terminals
available  on  the  system  is  stored  in  context  files.  These files
actually have two parts; an IMP object unit and a set of PULSE commands.
The IMP object unit can be  created with the IMP processor on CP-6.  For
information  on  using  IMP  to  define  keys,  see  the CP-6 Programmer
Reference  Manual (CE40).   The second  part of  the file can be created
using any  text editor on CP-6.   There  are  currently 16 special PULSE
commands.  They are:
.fif
.inl +5
 
WordWrapClm, OverStrike, Insert, HScroll, StripBlanks, TextEdit
EasyAppend, RcrWrap, KeepNewEmpty, UseWorkFiles, Tabs, Type,
Start, Finish, CmdOpen and CmdClose
.inl -5
.fin
 
These commands, with the exception of KeepNewEmpty,  UseWorkFiles, Tabs,
Type,  Start,  Finish,  CmdOpen  and  CmdClose  are  normally done as ^O
commands, so for descriptions of what these commands do, see the command
summary.  The KeepNewEmpty command is only available within  the context
file.  KeepNewEmpty normally defaults to YES.   When KeepNewEmpty is NO,
files newly created with PULSE that are empty (zero records) at the time
you   exit,   close  the  file,   or   switch  files  will  be  deleted,
automatically.   YES   causes   these   files  to  be  preserved.    The
UseWorkFiles command  is  also  only  available  in  the  context  file.
UseWorkFiles,  when YES,  tells PULSE that  it  should always use a work
file  when  editing  a file.   The default is NO.   Tabs  and  Type  are
normally used in the COMMAND_WINDOW, so see that topic for more details.
It should be noted, however, that specifying TABS without any parameters
in the context file will have no effect.
 
The Start, Finish, CmdOpen and CmdClose commands are all used to specify
strings that should be sent to the terminal at various times.  The Start
string is sent when  PULSE  is first entered.  The Finish string is sent
when PULSE exits.  CmdOpen is sent when any window aside from the Screen
Edit  window  is accessed,  and  CmdClose  is sent when returning to the
Screen Edit window.   One  use  for  these last two commands is toggling
application keypad mode on terminals which provide this feature. Nothing
will be sent to the terminal for an undefined string.
 
The syntax for specifying these commands in a context file is:
 
.fif
.inl +5
Word[WrapClm]  [=] width
Ins[ertMode]
Over[StrikeMode]
HSc[roll]       [[=] { Y[ES] | ON | N[O] | OFF }]
Str[ipBlanks]   [[=] { Y[ES] | ON | N[O] | OFF }]
Tex[tEdit]      [[=] { Y[ES] | ON | N[O] | OFF }]
Easy[Append]    [[=] { Y[ES] | ON | N[O] | OFF }]
Rcr[Wrap]       [[=] { Y[ES] | ON | N[O] | OFF }]
Keep[NewEmpty]  [[=] { Y[ES] | ON | N[O] | OFF }]
UseWork[Files]  [[=] { Y[ES] | ON | N[O] | OFF }]
Ta[bs] {NONE | A[SSEMBLER] | C[OBOL] | F[ORTRAN] | numlist }
Type [']code[']
Start = stringlist
Finish = stringlist
CmdOpen = stringlist
CmdClose = stringlist
.fin
 
If the optional setting for the above commands is not specified,
YES is the default.  (i.e.  HScroll, HScroll=YES, and HScroll=ON
are equivalent)  numlist is a list of numeric tabstops separated
by commas.  stringlist  is a list of items, separated by commas.
The items may be mnemonics for non-printables (ESC,SOH,etc.)  or
character strings enclosed in single quotes.  For example:
.fif
 
Start=ESC,'[?5h'
Finish=ESC,'[?5l'
 
.fin
would send the sequence telling a VT200 to use  black characters
on a white background.  The  accompanying  Finish  string  would
return the terminal to white on black when PULSE exits.
 
.inl -5
Users may create their own context files using the following set of
commands:
.fif
 
!IMP impsource {ON|OVER|TO|INTO} impou
!COPY impou,pulsesource {ON|OVER|TO|INTO} :PULSE_profile
 
.fin
where impsource is a file containing IMP key definitions, impou is
the resulting file from IMP, pulsesource is a file containing PULSE
commands, and profile is the profile name for which this context file is
being made.
 
When PULSE first starts up, it loads a standard context file containing the
key definitions for delete line (^Y) and the BREAK key (to go to the
commandwindow).  This file is called :PULSE_STANDARD.  After loading the
STANDARD context file, PULSE looks for a context file matching the user's
current profile.  This file should contain key definitions for the arrow keys,
the restore-line key, and any special PULSE commands the user desires.  It
should be noted, however, that the ^Y command (Delete Line) is already
accomplished with an IMP sequence equivalent to ESC ^L (Escape Formfeed).  So,
if the user wishes to use a different sequence to delete lines, that sequence
should be IMPed to ESC ^L.
 
A user defined context file for a profile should contain the sequences sent by
the arrow keys and define them such that the up arrow sends 'ESC A', down
arrow sends 'ESC B', right arrow sends ^R, and left arrow sends ^H
(backspace).  The restore-line key is obtained by IMPing a keystroke to be
'ESC P'.  The context file may also contain any other key definitions that the
user may desire for special, personalized functionality.
 
PULSE will look for files starting with :PULSE_ and ending in a profile name.
i.e. if the user's profile is DECVT100, the editor will look for
:PULSE_DECVT100.  If it cannot find that context file, it will look for
:PULSE_IMP as a standard, profile independent context file.
 
For both the STANDARD and profile context files, PULSE will search a certain
set of accounts for these files.  First, for the STANDARD file, PULSE will
check for a 'PULSE_Standard' command variable.  This command variable may
contain the name of the account that the user wants to contain the
:PULSE_STANDARD context file.  The specified account may be any account listed
in the Master Account Directory, or on the same disk pack as the user's
default directory.  The user may use the following command in his SETUP file
to tell PULSE to always look for the STANDARD context file in the USER
directory first:
 
   !Let PULSE_Standard='USER'
 
If there is no command variable, or PULSE cannot find the STANDARD context
file in the specified account, it will look in the user's logon directory.  If
it still cannot find the context file, PULSE will look in the .:LIBRARY
account, and then in the account where PULSE is installed.
 
Likewise, for the profile search account, there may be a 'PULSE_Profile'
command variable.  PULSE will look for the :PULSE_profile and the :PULSE_IMP
files in the account specified in the command variable.  Failing to find
either of those files, PULSE will look for the same two file names in the
user's logon directory, and then in the :LIBRARY account.  Finally, if PULSE
still cannot find the context files necessary, it will search the account
where PULSE is installed.  The following command may be placed in the user's
SETUP file to tell PULSE to look in the USER directory for the profile context
files first:
 
   !Let PULSE_Profile='USER'
 
There is also a third context file that PULSE can use.  If the user has
defined a command variable named PULSE_Name, PULSE will use the file
:PULSE_ combined with the contents of that variable to produce an
additional context file.  For example, if a user has defined his
variable as follows:
 
   !Let PULSE_Name='BLIP'
 
PULSE will search for the context file named :PULSE_BLIP in the search
directories described above.
 
Finally, if the context file introducer :PULSE_ is unsuitable for any
reason, the command variable PULSE_Prefix can substitute a new one, up
to 20 characters long.  This substitution will take place for all
context files.  For example:
 
   !Let PULSE_Prefix=':LADC_'
 
PULSE will look for context files such as :LADC_STANDARD,
:LADC_profile, and :LADC_IMP.
 
NOTE:  The arrow keys on some terminals may send a special control
character that is normally used by PULSE.  For instance, Televideo
terminals use the ^K and ^L characters for two of their arrow keys.  The
system context file for these terminals defines these as being arrow keys,
and subsequently re-defines two other keys, ^D and ^F as being the ^K and
^L command keys, respectively.  The user may set up his context file in
any manner he so desires as far as which keystrokes will provide which
function.
 
NOTE:  If the user decides to use his own :PULSE_STANDARD file in place of the
system defined file, the following points should be kept in mind.  The system
STANDARD file defines ^Y to be ESC FF (^L or Form Feed), which is the CP-6
method of deleting a line in a screen editor.  Also, the system STANDARD file
defines the BREAK key to be the ^C H command to get to the command window.
Finally, the system STANDARD file deletes all inherited IMPs that came from
the IBEX window.
 
.fif
.SRV SECTION 4
..:L0H "Command Summary"
.trf ^^
.ALB
.fin
The following is a list of commands available for use in PULSE.  The ^
symbol before a key denotes that this key is a control key.  For instance,
^K refers to holding down both the CONTROL and K keys at the same time.
.fif
.inl +5
 
^K B    Mark block beginning.
 
^K K    Mark block ending.
 
^K H    Unmark block.
 
^K C    Copy selected block here.
 
^K V    Move selected block here.
 
^K S    Save selected block in PULSE's internal temporary buffer.
 
^K M    Merge PULSE's internal temporary buffer here.
 
^K Y    Delete selected block.
 
^K W    Write selected block to a CP-6 disk file.
 
^K R    Read a disk file as a block at the current location.
 
^K Z    Save a copy of the current file.
 
^K D    Exit editor.  If you are  working on a work  file,  PULSE
        will ask you if you wish to  save  it.  Respond  N  or  n
        if you do not wish to save the file.
 
^K .    Remember current location.
 
^K 0-9  Ten more spot savers like ^K .  See Marking a Spot
 
^C F    Find word.  PULSE  will prompt  for the  word you want to
        find, then prompt you for options.  Options are:
            U  for caseblind search
            B  for backwards search
            G  for a global search, starting at the  beginning of
               the file, (or the end if B is specified)
            K  to limit the search only to the current block
            Q  to  abort  the  find  operation;  in  other words,
               saying "Never mind"
 
^C A    Replace word.  PULSE will prompt you for both the word to
        find and the replacement word, then for options.  Options
        are:
            U  for caseblind search
            B  for backwards search
            G  for search starting at beginning of file (or start
               at end of file if B is specified)
            K  to limit the search only to the current block
            Nx for replace next x occurrences of the word where
               x is an integer
            A  for replace all occurrences of the word
            V  for a verified replacement of each word found
            Q  to abort  the  replace  operation; in other words,
               saying "Never mind"
 
^L      Repeat last find or replace operation.
 
^Z      Switch current search direction for ^L command.
 
^C R    Goto beginning of file.
 
^C C    Goto end of file.
 
^C H    Enter command window.  In the command window, you may ask
        for help, switch files, change your directory, or enter a
        line number  for  positioning  of  the  cursor.   To exit
        command mode, just hit the carriage return in response to
        the > prompt.
 
^C ?    Displays key of line the cursor is currently on.
 
^C S    Displays WordWrap Column, and status of PULSE's flags.
 
^C .    Goto remembered location.
 
^C 0-9  Goto one of the extra spot savers.  See Going to a Remembered
        Spot
 
^C B    Goto beginning of currently marked block.
 
^C K    Goto end of currently marked block.
 
^C +    Goto the next file in the active file list.
 
^C -    Goto the previous file in the active file list.
 
^O E    Toggle EasyAppend mode.  Defaults to ON.
 
^O H    Toggle horizontal scroll mode.   (wrap long lines, or
        scroll them left and right on demand)
 
^O I    Activate insertion mode.  The default.
 
^O O    Activate overstrike mode.
 
^O R    Activate word wrap.  PULSE will prompt you  for  a column
        number in which to perform word wrap so you do  not  need
        to constantly hit the carriage return.
 
^O S    Toggle strip blanks mode.  Defaults to ON.
 
^O T    Toggle TextEdit mode.  Defaults to ON.
 
^O W    Toggle Record Wrap mode.  Defaults to ON.
 
^Y      Delete current line.
 
ESC BS  Escape BackSpace entered  at  the end of a line will join
        the next line to the current one.
 
ESC LF  Escape LineFeed will split the current line at the cursor
        position.
 
ESC P   Restores the  current line to the form it was in when the
        cursor was positioned to the line.
 
.inl -5
.SRV SECTION 5
..:L0H "Entering the Command Window"
.trf ^^
.ALB
Syntax:
 
    ^C H or BREAK
 
.fin
The COMMAND_WINDOW command will place the user in a window at the bottom
of the screen.  Here, the user may enter various commands directly.  The
commands you may issue while in the command window are:
.fif
..:L2H "Commands allowed in the Command Window"
.trf ^^
.inl +5
linenumber, EDIT, PULSE, NEXT, PREVIOUS, +, -, CLOSE,
DELETE, SAVE, RESTORE, LIST, DIRECTORY, DO, PRINT,
ERASE, TIME, DATE, HELP, END, QUIT, EXIT, TRANSFORM, TABS, TYPE
and OUTPUT
.inl -5
 
A description of each of these commands follows:
..:L2H "linenumber"
.trf ^^
.alb
.fin
.inl +5
The  linenumber  command will position the cursor to the specified line
number in the file.  The syntax is:
.fif
 
    >1.000
 
.fin
where the > symbol is PULSE's prompt, and the number entered is in the same
format as the edit keys used throughout the CP-6 operating environment.
.fif
.inl -5
..:L2H "EDIT | PULSE"
.trf ^^
.inl +5
.fif
{PU[LSE]+ [num]}
{PU[LSE]- [num]}
{PU[LSE]       }
{PU[LSE] fid   } [(options[)]]
{ED[IT]+  [num]}
{ED[IT]-  [num]}
{ED[IT]        }
{ED[IT]  fid   }
 
Parameters:
fid      is the CP-6 file identifier of the file you wish
         to edit.
 
num      is the optional offset from the currently open
         file.
 
options  are a list of one or more PULSE command options.
         Available options can be seen under the OPTIONS
         section.
 
.fin
.alb
The EDIT command will select a new file for PULSE to edit.  The available
options can be seen under the OPTIONS section.  The context of the current
file will be saved to the active file list, and the new file will be opened.
 
If the specified fid is already in the active file list, the context from
the active file list will be restored.
 
If the specified fid exists, but is not in the active list, PULSE will open
the file.  If the specified fid does not already exist, PULSE will create a
new one.  If the user is not allowed to change the file, or specifies the
EXAMINE option, the file will be opened as READ ONLY.  The context for the
new file will be placed in the active list immediately after the context of
the current file and before the context of any file that may have already
been in the list following the current file.
 
If the + and - variations of the EDIT command are used, then the file relative
to the current one is open.  If the EDIT command is issued alone, then it just
returns to the current file.
 
If new options are specified along with the EDIT command for an already open
file, then those options will take effect immediately.  However, it is not
a good idea to fool around with changing the CRPT option with a file that is
already open.
 
.fif
.inl -5
..:L2H "Next"
.trf ^^
.inl +5
{NEXT|+} [num]
 
.fin
.alb
The NEXT command will save the context for the current file in the active
list, and then open the subsequent file in the active list.  If the current
file is the last one in the list, the first active in the list will be
opened.   num  tells PULSE to open the specified file relative to the
current one in the active list.
 
.fif
.inl -5
..:L2H "Previous"
.trf ^^
.inl +5
{PREV[IOUS]|-} [num]
 
.fin
.alb
The PREVIOUS command will save the context for the current file in the active
list, and then open the previous file in the active list.  If the current
file is the first one in the list, the last file in the list will be
opened.   num  tells PULSE to open the specified active relative to the
current one in the active list.
 
.fif
.inl -5
..:L2H "Close"
.trf ^^
.inl +5
.fif
{CL[OSE]+ [num]}
{CL[OSE]- [num]}
{CL[OSE]       }
{CL[OSE] fid   }
 
Parameters:  num  is the relative number of the file you wish
             to close, based from the current file.  + and -
             tell PULSE which direction from the current file
             to use, and may not be separated from the CL[OSE].
             fid  is the name of one of the files in the active
             file list.
 
.FIN
.alb
The CLOSE command is used to close the current file, a file offset by
+ or -  num , or a file specified by fid.  The CLOSE command removes the
specified file from the active file list.  If the specified file is a work
file, the user will then be prompted to save the changes to that file.
.inl -5
..:L2H "Delete"
.trf ^^
.inl +5
.fif
{DEL[ETE]+ [num]}
{DEL[ETE]- [num]}
{DEL[ETE]       }
{DEL[ETE] fid   }
 
Parameters:  num  is the relative number of the file you wish
             to delete, based from the current file.  + and -
             tell PULSE which direction from the current file
             to use, and may not be separated from the DEL[ETE].
             fid  is the name of one of the files in the active
             file list.
 
.FIN
.alb
The DELETE command is used to close the currently active file and delete it.
Like the close command, the user may also close
and delete a file offset by + or -  num , or delete it by name.
Verification is required, so the
user must type "YES" in order to have the deletion take place.  Nothing will
happen if the user does not type "YES".  If the specified file is
associated with a work file, only the work copy of the file will be
destroyed.  If the file is associated with any other kind of file
(including READ ONLY), the deletion may still occur if the user confirms and
also has access permission to delete the file.  The DELETE command also
removes the specified file from the active file list.
.inl -5
..:L2H "List"
.trf ^^
.inl +5
L[IST]
 
.FIN
.ALB
The LIST command will list all currently open files.  Before the name of
each file, PULSE will put a + or - sign, along with a number to indicate
the relative offset from the currently open file.  PULSE places only a plus or
minus sign next to the files immediately adjacent to the current file, and an =>
sign next to the current file.  The user may type in whatever symbol appears
next to a filename to go immediately to that file (with the exception of
the => sign, which is not a valid command).  In addition, PULSE will place an
access type identifier next to the filename to describe the file.  A "c"
indicates that the listed file is a consecutive file, an "r" indicates that
file is opened in Read Only mode, and a "w" indicates that the file is being
accessed as a work file.
.inl -5
..:L2H "Save"
.trf ^^
.inl +5
SAVE {ON|TO|OVER} filename
 
.fin
.alb
The SAVE command will save the complete current context of all your currently
open files,
including your current search parameters and internal temporary buffer, in
the specified filename.  ON and TO specify file creation and will report an
error if the specified file already exists.  OVER specifies file replacement,
and will always create a new save file.
 
If there are any work files in the current context, PULSE will print a warning
and the names of all currently open work files.  The warning states that if
the user logs off before restoring a context with work files, the work files
will not be able to be restored with the rest of the context.  It is strongly
recommended that the user use the TRANSFORM command before saving a context
with work files in it.  A context with STAR (*) files can never be restored
completely accurately after the user has logged off.
.inl -5
..:L2H "Restore"
.trf ^^
.inl +5
RES[TORE] filename
 
.fin
.alb
The RESTORE command will close all currently open files and then read in
the specified filename to restore a previously saved context.  If there had
been work files in the restored context and the user had subsequently logged
off, PULSE will be unable to restore those work files.  If there were any
encrypted files among the files in the context, PULSE will prompt for the seed
to use for each encrypted file.
.inl -5
..:L2H "Transform"
.trf ^^
.inl +5
TRA[NSFORM]
 
.FIN
.ALB
The TRANSFORM command is used to go through the active file list and convert
all currently open work files to non-work files.  The entries are then
maintained for those files and any subsequently SAVEd context will be
RESTOREable, even if the user might have logged off.
..:L2H "Tabs"
.trf ^^
.inl +5
.fif
       [{ NONE         }]
       [{ numlist      }]
TA[BS] [{ A[SSEMBLER]  }]
       [{ C[OBOL]      }]
       [{ F[ORTRAN]    }]
 
.fin
.alb
where numlist is a list of one or more column numbers where tab
stops are desired.
 
The TABS command will set tab stops at a list of column numbers, or
at a pre-defined set of tab stops for ASSEMBLER (columns 8, 16  and
32), COBOL (columns 8, 12 and 36),  or  FORTRAN  (columns 7, 16 and
34).  The NONE option to the TABS command removes all tab stops for
the editing window, as will a TABS 0  command.   The  TABS  command
alone will display the current tab settings.
.fif
.inl -5
..:L2H "Type"
.trf ^^
.inl +5
.fif
TYPE [']code[']
 
.fin
.alb
where code is a two-character file type or two-character quoted string
denoting file type.
 
The TYPE command will set the default file type for new files created with
PULSE.  Note, however, that this only applies to files created with the PULSE
and EDIT commands, and not to files created as blocks with the WRITE_BLOCK
command.
.fif
.inl -5
..:L2H "Directory"
.trf ^^
.inl +5
{DIR|DIRECTORY} [[DP#packset].account]
 
.FIN
.alb
The DIRECTORY command is used to change the default working directory.
packset and account  are used to select a new working directory.
.FIF
.inl -5
..:L2H "Do Command"
.trf ^^
.inl +5
{DO|!} ibexcommand
 
.fin
.alb
The DO command is used to execute any IBEX command.
.fif
.inl -5
..:L2H "Print Command"
.trf ^^
.inl +5
PRINT
 
.fin
.alb
The PRINT command is used cause any pending output to be printed.
.fif
.inl -5
..:L2H "Erase Command"
.trf ^^
.inl +5
ERASE
 
The ERASE command cancels any pending output.
.inl -5
..:L2H "Time Command"
.trf ^^
.inl +5
{TIME|DATE}
 
.fin
.alb
The TIME and DATE commands are used to display the current time and date.
.fif
.inl -5
..:L2H "Help Command"
.trf ^^
.inl +5
.fif
H[ELP] [( processor )] [topic]
 
Parameters:
processor  specifies an optional processor name for
           which help is to be obtained.
 
topic      specifies the subject the user wants help for.
 
.fin
.alb
The HELP command provides online documentation and instructions for using
various processors and commands on the system.
.fif
.inl -5
..:L2H "End Command"
.trf ^^
.inl +5
{END|QUIT|EXIT|XIT}
 
.fin
.alb
The END command is used to leave PULSE and return control to IBEX.
.fif
.SRV SECTION 6
..:L0H "Command Descriptions"
.trf ^^
.ALB
..:L2H "Marking the Beginning of a Block"
.trf ^^
Syntax:
 
    ^K B
 
.INL +5
.FIN
The MARK_BLOCK_BEGIN command marks the beginning of a block.  The
beginning of the block is defined as the line and position of the cursor
at the time the command is issued.
.FIF
.INL -5
..:L2H "Marking the End of a Block"
.trf ^^
Syntax:
 
    ^K K
 
.INL +5
.FIN
The MARK_BLOCK_END command marks the end of a block.  The end of the block
is defined as the position before the cursor position at the time the
command is issued.
.FIF
.INL -5
..:L2H "Unmarking a Block"
.trf ^^
Syntax:
 
    ^K H
 
.INL +5
.FIN
The UNMARK_BLOCK command removes the marks defining a block.  The copy,
move, delete, and save block commands will have no effect until a block is
explicitly defined again by the BEGIN and END commands.
.FIF
.INL -5
..:L2H "Copying a Block"
.trf ^^
Syntax:
 
    ^K C
 
.INL +5
.FIN
The COPY_BLOCK command will copy the currently marked block before the
current cursor position.  The original block remains marked and in its
current location.
.FIF
.INL -5
..:L2H "Deleting a Block"
.trf ^^
Syntax:
 
    ^K Y
 
.INL +5
.FIN
The DELETE_BLOCK command will delete the selected block from the source
file.  Once this command has been issued, no block will be marked until
the user explicitly does so.
.FIF
.INL -5
..:L2H "Moving a Block"
.trf ^^
Syntax:
 
    ^K V
 
.INL +5
.FIN
The MOVE_BLOCK command will copy the currently marked block before the
current cursor position and delete the block from its previous position.
After this command has been issued, no block will be marked until the user
explicitly does so.
.FIF
.INL -5
..:L2H "Saving a Block to the Temporary Buffer"
.trf ^^
Syntax:
 
    ^K S
 
.INL +5
.FIN
PULSE will transfer a copy of the currently selected block to a temporary
buffer.  No changes are made to the currently active file.  No subsequent
changes to the file will affect the contents of the save buffer.  If a block
had already been saved in the temporary buffer, it will be replaced with the
new block.  This command (along with the ^K M command) is especially useful
for moving a block between files.
.FIF
.INL -5
..:L2H "Merging a Block from the Temporary Buffer"
.trf ^^
Syntax:
 
    ^K M
 
.INL +5
.FIN
PULSE will transfer a copy of the currently saved block from the temporary
buffer to the current cursor position.  This command (along with the ^K S
command) is especially useful for moving a block between files.
.FIF
.INL -5
..:L2H "Writing a Selected Block to Disk"
.trf ^^
Syntax:
 
    ^K W
 
.INL +5
.FIN
PULSE will prompt for a file name and then transfer a copy of the
currently selected block to disk.  No changes are made to the currently
active file.  If the file does not exist, PULSE will create it for you.
If the file does exist, PULSE will ask if you wish to overwrite the
existing file.  Respond Y, N, or Q.  A Y response will overwrite the
existing file; N will cause PULSE to prompt you for an alternate file
name; Q will cause PULSE to continue without writing the block.
.FIF
.INL -5
..:L2H "Reading Blocks from Disk"
.trf ^^
Syntax:
 
    ^K R
 
.INL +5
.FIN
PULSE will prompt for a file name and then transfer a copy of that file's
contents as a block into the current file at the cursor position.
.FIF
.INL -5
..:L2H "Saving a Copy of the Current File"
.trf ^^
Syntax:
 
    ^K Z
 
.INL +5
.FIN
PULSE will prompt for a file name and then save a copy of the current
file.  Responding with a Carriage Return alone to the file name prompt
will save over the original file.  This is especially useful when using
workfiles, since it provides a simple way to periodically save changes.
Responding with a file name at the prompt will save a copy of the
current file to a new file.
 
NOTE:  If the current file is NOT a work file, and the user simply
presses a Carriage Return in response to the file name prompt, any
changes that have not yet been written to disk will also be saved.
.FIF
.INL -5
..:L2H "Marking a Spot in the File"
.trf ^^
Syntax:
 
    ^K .
    ^K n   where  n  is a number in the range 0 through 9.
 
.inl +5
.fin
The MARK_SPOT command will cause PULSE to remember the current location
so that the user may re-position to the marked spot at a later time.  In
addition, there are 10 extra spots available to the user, numbered 0 through
9.  Issuing the appropriate "^K n" command will mark one of these spots.
.fif
.inl -5
..:L2H "Exiting the Editor"
.trf ^^
Syntax:
 
    ^K D
 
.INL +5
.FIN
This command will exit the editor and return control to
IBEX.  PULSE will first check all open files for any work files.  If there
are open work files, PULSE will ask if you want to save them, one at a time.
Respond  n  or  N  if the changes are to be ignored.  If you respond with
other than  n  or  N, PULSE will prompt for a file name.  Hit the <CR> to
save over the original file, or enter a new file name.  After closing all the
files, the editor will exit to IBEX.
.FIF
.INL -5
..:L2H "Finding a Word"
.trf ^^
Syntax:
 
    ^C F
 
.INL +5
.FIN
The FIND_WORD command will prompt for the word you wish to find, and then
prompt for options.  Then, PULSE will search from the current cursor
position towards the end of the file for the specified string.  If the user
just strikes the carriage return in response to the Find: prompt, the previous
search string will be used.  The previous string can also be recovered by
using the <ESC> <D> sequence.  Likewise, <ESC> <D> will bring back the
previous set of options, although a carriage return means to use "No options."
.FIF
 
    The options are:
 
      U  for a caseblind search.
 
      B  to search backwards through the file.  (default
         is to search forward)
 
      G  to search from the beginning of the file instead
         of the current cursor position, or from the end
         of file if B was also specified.  If the K option
         is specified, the search will be from beginning
         of block, or end of block, again depending on
         the B option.
 
      K  to limit the search to the currently marked block.
 
      Q  to say "Never mind" and not go through with
         the search.
.inl -5
..:L2H "Replacing a String"
.trf ^^
Syntax:
 
    ^C A
 
.inl +5
.fin
The REPLACE_WORD command will prompt for the word to find, the word to
replace it with, and options.  Then, PULSE will go through the file
and replace the appropriate words according to the options.  If the user just
strikes the carriage return in response to the Replace: or With: prompts, the
previous strings for each of those prompts will be used.  For both these
prompts and the options prompt, <ESC> <D> will recall the last string for each
of those prompts, although carriage return alone at the Options: prompt tells
PULSE to use "No options."
.fif
 
    The options are:
      U  for a caseblind search for the word to be
         replaced.
 
      B  for a backwards search through the file.
         (default is to search forward)
 
      G  to start the search at the beginning of the
         file, rather than the current cursor position,
         or at the end of file if B was also specified.
         If the K option is also specified, the search
         will be from the beginning of the current
         block, or from the end of the current block if
         the B option is also specified.
 
      K  to limit the search to the currently marked
         block.
 
      A  to replace all subsequent occurrences of the
         search string.
 
      V  for a  Y, N or Q  verification of each string
         substitution.  Y causes the replacement, N
         causes the word to be skipped, Q causes the
         replacement operation to be ended.
 
      Nx to replace the next x occurrences of the
         search string.  This option will be overridden
         by the  A  option.
 
      Q  to say "Never mind" and not go through with the
         search and replace.
.inl -5
..:L2H "Repeating the Last Find or Replace Operation"
.trf ^^
Syntax:
 
    ^L
 
.inl +5
.fin
The REPEAT_LAST_FIND_REPLACE command will repeat the last find or replace
command, with out re-prompting for strings and options.  The Q and G
options will be ignored from the previous invocation of these commands,
allowing easy continuation of the last find or replace operation.
.fif
.inl -5
..:L2H "Toggling the Search Direction"
.trf ^^
Syntax:
 
    ^Z
 
.inl +5
.fin
The TOGGLE_SEARCH_DIRECTION command will switch the default search direction
for all subsequent ^L commands from Backward to Forward, or Forward to
Backward.  Whenever a new Find or Replace command is issued, however, the
search direction will revert to forward unless B is specified as an option.
.fif
.inl -5
..:L2H "Going to the Beginning of the File"
.trf ^^
Syntax:
 
    ^C R
 
.inl +5
.fin
The GOTO_BEGINNING command will position the screen and cursor to the very
top of the file currently being edited.
.fif
.inl -5
..:L2H "Going to the End of the File"
.trf ^^
Syntax:
 
    ^C C
 
.inl +5
.fin
The GOTO_END command will position the screen and cursor to the very end
.fif
.inl -5
..:L2H "Going to a Remembered Spot in the File"
.trf ^^
Syntax:
 
    ^C .
    ^C n   where  n  is a number in the range 0 through 9.
 
.INL +5
.FIN
The GOTO_SPOT command will cause PULSE to re-position the cursor to the
stored spot.  In addition, there are 10 extra spots, numbered 0 through 9.
Issuing the appropriate "^C n" command will position the file to one of these
spots.
.INL -5
.FIF
..:L2H "Going to the Beginning of a Currently Marked Block"
.trf ^^
Syntax:
 
    ^C B
 
.INL +5
.FIN
The GOTO_BEGINNING_OF_BLOCK command will cause PULSE to re-position the
cursor to the beginning of the currently marked block.
.INL -5
.FIF
..:L2H "Going to the End of a Currently Marked Block"
.trf ^^
Syntax:
 
    ^C K
 
.INL +5
.FIN
The GOTO_END_OF_BLOCK command will cause PULSE to re-position the
cursor to the end of the currently marked block.
.INL -5
.FIF
..:L2H "Determining the Current Line Number"
.trf ^^
Syntax:
 
    ^C ?
 
.inl +5
.fin
The WHERE_AM_I command will display the edit key of the current line along
with the current column number at the top of the screen.
.fif
.inl -5
..:L2H "Displaying the Current Status"
.trf ^^
Syntax:
 
    ^C S
 
.inl +5
.fin
The DISPLAY_STATUS command will cause PULSE to display the current value
for WordWrap, as well as the status of the various toggles available.
i.e. Overstrike, Insert, Horizontal Scrolling (HScroll),
Strip_blanks, ReadOnly, TextEdit, EasyAppend and RecordWrap.
.fif
.inl -5
..:L2H "Going to the Next File in the Active File List"
.trf ^^
Syntax:
 
    ^C +
 
.inl +5
.fin
The GOTO_NEXT_FILE command will save the settings for the currently open file
and restore the settings for the next file in the active list.  The results of
this command are identical to saying NEXT in the command window.
.fif
.inl -5
..:L2H "Going to the Previous File in the Active File List"
.trf ^^
Syntax:
 
    ^C -
 
.inl +5
.fin
The GOTO_PREVIOUS_FILE command will save the settings for the currently open
file and restore the settings for the previous file in the active list.  The
results of this command are identical to saying PREVIOUS in the command
window.
.fif
.inl -5
..:L2H "Toggling Strip Blanks Mode"
.trf ^^
Syntax:
 
    ^O S
 
.inl +5
.fin
The STRIP_BLANKS command will toggle the strip blanks mode.
ON indicates that PULSE is to strip trailing blanks from lines.
OFF indicates that lines are stored as they are typed, including trailing
blanks.  The default is ON.
.fif
.inl -5
..:L2H "Setting Word Wrap"
.trf ^^
Syntax:
 
    ^O R
 
.inl +5
.fin
PULSE will prompt for a column number.  After entering this number, all
subsequent lines will be wrapped at that column, inserting a new line
after the current one.  To reset WordWrap, respond with a column number
of less than 10.
.fif
.inl -5
..:L2H "Setting Horizontal Scrolling"
.trf ^^
Syntax:
 
    ^O H
 
.inl +5
.fin
The HORIZONTAL_SCROLLING command will toggle the horizontal scrolling (HS)
feature of PULSE.  HS causes long lines to move left and right on the screen
according to the cursor position, rather than wrapping long lines to multiple
lines on the screen.  HS defaults to being turned ON initially.
.fif
.inl -5
..:L2H "Setting Insertion Mode"
.trf ^^
Syntax:
 
    ^O I
 
.inl +5
.fin
The INSERT_MODE command causes new characters to appear before old ones, moving
the old ones to the right, as letters are typed by the user.  Unlike ESC J
insertion, this insertion will continue for subsequent lines.
.fif
.inl -5
..:L2H "Setting Overstrike Mode"
.trf ^^
Syntax:
 
    ^O O
 
.inl +5
.fin
The OVERSTRIKE_MODE command causes new characters to replace old ones as
letters are typed by the user.  This is PULSE's default.
.fif
.inl -5
..:L2H "Toggling Text Edit Mode"
.trf ^^
Syntax:
 
    ^O T
 
.inl +5
.fin
The TEXT_EDIT command will toggle TextEdit mode.  In TextEdit mode, when
records are joined, a space is also inserted to preserve word separation
boundaries.  The default is ON.
.fif
.inl -5
..:L2H "Toggling EasyAppend Mode"
.trf ^^
Syntax:
 
    ^O E
 
.inl +5
.fin
The EASYAPPEND command will toggle EasyAppend mode.  EasyAppend mode will
allow the file to be extended by simply striking the carriage return or using
the down arrow key.  When EasyAppend is off, the file can only be extended by
typing <space><CR>.  The default is ON.
.fif
.inl -5
..:L2H "Toggling Record Wrap Mode"
.trf ^^
Syntax:
 
    ^O W
 
.inl +5
.fin
The RECORD_WRAP command will toggle RecordWrap mode.  In RecordWrap mode,
the arrow keys and other intraline positioning functions are not halted by
line boundaries.  When the end or beginning of a line is reached, the
cursor will continue on the next or previous line.  The default is ON.
.fif
.inl -5
..:L2H "Joining Lines"
.trf ^^
Syntax:
 
    ESC BS
 
.inl +5
.fin
The Escape Backspace command, when given at the end of a line, will join
the current line with the following line.  This command has no effect
within a line.
.fif
.inl -5
..:L2H "Deleting Lines"
.trf ^^
Syntax:
 
    ^Y
 
.inl +5
.fin
The DELETE_LINE command causes the current line to be deleted from the
source file, and the screen.  Once deleted, it cannot be recovered, so
be careful.
.fif
.inl -5
..:L2H "Restoring a Changed Line"
.trf ^^
Syntax:
 
    ESC P
 
.inl +5
.fin
The Escape P command will restore a line to its original form, provided
that the cursor has not left that line.  The command can be done with a
different keystroke sequence if so desired by specifying so in your
context file.  Once the cursor has left a line, or a line has been
deleted, it cannot be restored.
.fif
.inl -5
..:L2H "Splitting Lines / Inserting Blank Lines"
.trf ^^
Syntax:
 
    ESC LF
 
.inl +5
.fin
The Escape Linefeed command will split a line in two at the current cursor
position.  If the cursor is at the beginning of the line, a blank line
will be inserted before the current line.  If the cursor is at the end
of the line, then a blank line will be inserted after the current line.
.fif
.inl -5
.SRV SECTION 7
..:L0H "Arrow Keys and Useful Escape Sequences"
.trf ^^
.ALB
.FIN
This section shows the escape sequences which are standard on the CP-6
system and are also useful in a screen editing environment.  There are
additional escape sequences available and information on these can be
obtained from the CP-6 Programmer Reference Manual (CE40).
.fif
 
The information is ordered into two columns as shown below:
 
  Sequence   Function
 
<UpArrow>
.inl +13
.fin
Causes the cursor to move up one line on the screen.  A
context file for a specific terminal should define the up
arrow key to send an <ESC> <A>.
.fif
.inl -13
 
<DownArrow>
.inl +13
.fin
Causes the cursor to move down one line on the screen.  A
context file for a specific terminal should define the down
arrow key to send an <ESC> <B>.
.fif
.inl -13
 
<RightArrow>
.inl +13
.fin
Causes the cursor to move one column to the right on the
screen.  A context file for a specific terminal should define
the right arrow key to send <^R>.
.fif
.inl -13
 
<LeftArrow>
.inl +13
.fin
Causes the cursor to move one column to the left on the
screen.  A context file for a specific terminal should define
the left arrow key to send <BS>.
.fif
.inl -13
 
<ESC> <A>
.inl +13
.fin
Causes the cursor to move up one line on the screen.  A
context file for a specific terminal should define the up
arrow key to send an <ESC> <A>.
.fif
.inl -13
 
<ESC> <B>
.inl +13
.fin
Causes the cursor to move down one line on the screen.  A
context file for a specific terminal should define the down
arrow key to send an <ESC> <B>.
.fif
.inl -13
 
<ESC> <I>
.inl +13
.fin
Simulates a horizontal tab moving the cursor to the next input
tab stop.  If the stop is outside of the insertion window, the
insertion window is reset.
.fif
.inl -13
 
<ESC> <J>
.inl +13
.fin
Toggles setting or activation of the insertion window.  Sets the
left and right limit of the insertion window.  Note:  <ESC> <J>
is equivalent to <ESC> <<> <ESC> <>> or <ESC> <R>, whichever
toggles the insertion window.
.fif
.inl -13
 
<ESC> <K>
.inl +13
.fin
Deletes from the current edit point to the right end of the
insertion window.
.fif
.inl -13
 
<ESC><CNTL-K>
.inl +13
.fin
Deletes to the left end of the insertion window.
.fif
.inl -13
 
<ESC> <M>
.inl +13
.fin
Resets overstrike and insertion modes, disabling overstriking.
See <ESC> <O> and <ESC> <'>.
.fif
.inl -13
 
<ESC> <N>
.inl +13
.fin
Positions to the right limit of the insertion window unless the
edit point is already there.  In this case, <ESC> <N> resets the
insertion window first.
.fif
.inl -13
 
<ESC> <O>
.inl +13
.fin
Sets overstrike (as opposed to replacement or insertion) mode for
input.  When on, typing on top of an existing character creates
an input record that contains both characters, separated by a
backspace character.
.fif
.inl -13
 
<ESC> <R>
.inl +13
.fin
Retypes the current input record.  Resets both the left and right
limits of the insertion window to frame the entire record.
.fif
.inl -13
 
<ESC><CNTL-R>
.inl +13
.fin
Same as <ESC><R>, except no retype occurs.
.fif
.inl -13
 
<ESC> <V>
.inl +13
.fin
<ESC> <V> are the first two characters of a three character
sequence in which the third character is to act as a criterion
for a search of the input record within the insertion window.  If
the character is located in the window, the edit point is moved
to that column,.  The direction of the search is set by the
last-received <ESC> <V>, <BS>, or <CNTL-R>.  <ESC> <V> sets the
direction to the direction moved during the last successful
search.
.fif
.inl -13
 
<ESC> <X>
.inl +13
.fin
Deletes the current input record.
.fif
.inl -13
 
<ESC> <'>
.inl +13
.fin
(single quote) Sets insertion mode, resetting overstrike mode, if
active.
.fif
.inl -13
 
<ESC> <*>
.inl +13
.fin
(asterisk)  Saves insertion window in the FEP.
.fif
.inl -13
 
<ESC> <:>
.inl +13
.fin
(colon) Recalls the characters last saved with <ESC> <*> for this
terminal.
.fif
.inl -13
 
<ESC> <^>
.inl +13
.fin
(caret) Sets wordwrap column.  If cursor is at the beginning of
the input record (up to column 12), disables wordwrap mode.  For
more information, insert HELP TERMINAL_OPS WORDWRPCLM.
.fif
.inl -13
 
<ESC> <->
.inl +13
.fin
Clears the screen and repaints any borders, forms, or
screen-editing windows.
.fif
.inl -13
 
<ESC> <<>
.inl +13
.fin
Sets (not toggles) the left limit of the insertion window.
.fif
.inl -13
 
<ESC> <>>
.inl +13
.fin
Sets (not toggles) the right limit of the insertion window.
.fif
.inl -13
 
<ESC> <CR>
.inl +13
.fin
Moves the edit point to the left limit of the insertion window,
unless the edit point is already there.  In this case, <ESC><CR>
resets the insertion window first.
.fif
.inl -13
 
<ESC> <DEL>
.inl +13
.fin
Delete the character to the left of the cursor.  If the cursor is
at the beginning of the insertion window, <ESC> <DEL> does
nothing.
.fif
.inl -13
 
<ESC> <^W>
.inl +13
.fin
Deletes the word which is under and to the right of the cursor.
A 'word' in this sense is any sequence of non-blank characters
followed by any number of blanks; the word and the blanks
following it are deleted.
.fif
.inl -13
 
<ESC> <HT>
.inl +13
.fin
Sets autotab column mode.  If the cursor is at the beginning of
the record, disables autotab column mode.  Insert HELP
TERMINAL_OPS AUTOTABCLM for more information.
.fif
.inl -13
 
<ESC> <LF>
.inl +13
.fin
Split record.  If the cursor is at the beginning of a line, a
blank line is inserted before the current line.  If the
cursor is at the end of the line, a blank line is inserted
after the current line.  If the cursor is in the middle of a
record, the record is split at the cursor position.
.fif
.inl -13
.trf ^
.brb
.srv SECTION "i"
..:L0H "Index"
..:HTP "Note: Index references indicate the page on which the paragraph containing the index term"
..:HTP "actually ends.  Should the paragraph straddle two pages, the actual indexed term might"
be on the first page, while the index reference is to the second page.
..:L1H ";HELP_INDEX HIND"
..:HTP ";Enter^^^^HELP HELP_INDEX letter^^^^to obtain HELP index references."
.ur .ur .srv PRAM_PARSE "%%[translate "%PRAM_PARSE%" " " "S"]%%"
..:L4H "A"
.INL 5
.BRF  
.UNL 5
  Active Files -
1-3         
..:L4H "B;^B"
.INL 5
.BRF  
.UNL 5
  Blocks -
1-2         
..:L4H "C"
.INL 5
.BRF  
.UNL 5
  Close -
5-3         
.BRF  
.UNL 5
  Commands allowed in the Command Window -
5-1         
.BRF  
.UNL 5
  Copying a Block -
6-2         
..:L4H "D"
.INL 5
.BRF  
.UNL 5
  Delete -
5-4         
.BRF  
.UNL 5
  Deleting a Block -
6-2         
.BRF  
.UNL 5
  Deleting Lines -
6-13         
.BRF  
.UNL 5
  Determining the Current Line Number -
6-9         
.BRF  
.UNL 5
  Directory -
5-6         
.BRF  
.UNL 5
  Displaying the Current Status -
6-9         
.BRF  
.UNL 5
  Do Command -
5-7         
..:L4H "E"
.INL 5
.BRF  
.UNL 5
  EasyAppend syntax -
2-5         
.BRF  
.UNL 5
  EDIT | PULSE -
5-2         
.BRF  
.UNL 5
  Encryption syntax -
2-3         
.BRF  
.UNL 5
  End Command -
5-8         
.BRF  
.UNL 5
  Erase Command -
5-7         
.BRF  
.UNL 5
  Exiting the Editor -
6-5         
..:L4H "F"
.INL 5
.BRF  
.UNL 5
  Finding a Word -
6-5         
..:L4H "G"
.INL 5
.BRF  
.UNL 5
  Going to a Remembered Spot in the File -
6-8         
.BRF  
.UNL 5
  Going to the Beginning of a Currently Marked Block -
6-8         
.BRF  
.UNL 5
  Going to the Beginning of the File -
6-8         
.BRF  
.UNL 5
  Going to the End of a Currently Marked Block -
6-9         
.BRF  
.UNL 5
  Going to the End of the File -
6-8         
.BRF  
.UNL 5
  Going to the Next File in the Active File List -
6-9         
.BRF  
.UNL 5
  Going to the Previous File in the Active File List -
6-10         
..:L4H "H;^H"
.INL 5
.BRF  
.UNL 5
  Help Command -
5-7         
.BRF  
.UNL 5
  HScroll syntax -
2-4         
..:L4H "I"
.INL 5
.BRF  
.UNL 5
  InsertMode syntax -
2-4         
..:L4H "J"
.INL 5
.BRF  
.UNL 5
  Joining Lines -
6-13         
..:L4H "K"
.INL 5
.BRF  
.UNL 5
  KeepNewEmpty syntax -
2-5         
.BRF  
.UNL 5
  KeyFile syntax -
2-6         
..:L4H "L"
.INL 5
.BRF  
.UNL 5
  linenumber -
5-1         
.BRF  
.UNL 5
  List -
5-4         
..:L4H "M"
.INL 5
.BRF  
.UNL 5
  Marking a Spot in the File -
6-5         
.BRF  
.UNL 5
  Marking the Beginning of a Block -
6-1         
.BRF  
.UNL 5
  Marking the End of a Block -
6-1         
.BRF  
.UNL 5
  Merging a Block from the Temporary Buffer -
6-3         
.BRF  
.UNL 5
  Moving a Block -
6-3         
..:L4H "N;^N"
.INL 5
.BRF  
.UNL 5
  Next -
5-3         
.BRF  
.UNL 5
  No Work File syntax -
2-2         
..:L4H "O"
.INL 5
.BRF  
.UNL 5
  OverStrikeMode syntax -
2-4         
..:L4H "P"
.INL 5
.BRF  
.UNL 5
  Previous -
5-3         
.BRF  
.UNL 5
  Print Command -
5-7         
..:L4H "R;^R"
.INL 5
.BRF  
.UNL 5
  RcrWrap syntax -
2-5         
.BRF  
.UNL 5
  Read Only Syntax -
2-1         
.BRF  
.UNL 5
  Reading Blocks from Disk -
6-4         
.BRF  
.UNL 5
  Repeating the Last Find or Replace Operation -
6-7         
.BRF  
.UNL 5
  Replacing a String -
6-6         
.BRF  
.UNL 5
  Restore -
5-5         
.BRF  
.UNL 5
  Restoring a Changed Line -
6-13         
..:L4H "S"
.INL 5
.BRF  
.UNL 5
  Save -
5-5         
.BRF  
.UNL 5
  Saving a Block to the Temporary Buffer -
6-3         
.BRF  
.UNL 5
  Saving a Copy of the Current File -
6-4         
.BRF  
.UNL 5
  Setting Horizontal Scrolling -
6-11         
.BRF  
.UNL 5
  Setting Insertion Mode -
6-11         
.BRF  
.UNL 5
  Setting Overstrike Mode -
6-11         
.BRF  
.UNL 5
  Setting Word Wrap -
6-10         
.BRF  
.UNL 5
  Splitting Lines / Inserting Blank Lines -
6-14         
.BRF  
.UNL 5
  StripBlanks syntax -
2-4         
..:L4H "T"
.INL 5
.BRF  
.UNL 5
  Tabs -
5-6         
.BRF  
.UNL 5
  TextEdit syntax -
2-5         
.BRF  
.UNL 5
  Time Command -
5-7         
.BRF  
.UNL 5
  Toggling EasyAppend Mode -
6-12         
.BRF  
.UNL 5
  Toggling Record Wrap Mode -
6-12         
.BRF  
.UNL 5
  Toggling Strip Blanks Mode -
6-10         
.BRF  
.UNL 5
  Toggling Text Edit Mode -
6-12         
.BRF  
.UNL 5
  Toggling the Search Direction -
6-7         
.BRF  
.UNL 5
  Transform -
5-5         
.BRF  
.UNL 5
  Type -
5-6         
..:L4H "U"
.INL 5
.BRF  
.UNL 5
  Unmarking a Block -
6-2         
.BRF  
.UNL 5
  Update Syntax -
2-1         
.BRF  
.UNL 5
  UseWorkFiles syntax -
2-6         
..:L4H "W"
.INL 5
.BRF  
.UNL 5
  WordWrapClm syntax -
2-3         
.BRF  
.UNL 5
  Work file syntax -
2-2         
.BRF  
.UNL 5
  Writing a Selected Block to Disk -
6-4         
..:L4H "^"
.INL 5
..:L1H ";X"
