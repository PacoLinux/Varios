 % This procedure draws a banner for CP-6 output.  It is assumed to live in
 % the printer (i.e. it should be installed outside the server loop).
 % Our version prints a Zenith "flash" (the classic Zenith logo); this version
 % does not.  You can modify it to print your own logo; see the line below
 % that invokes 'Print_Logo'.
 
 /bannerargs2                 %check for dictionary existance and grab args
 {
 %             This routine creates the banner dictionary (if necessary)
 %             and saves all the arguments.  It is used by the routine  banner,
 %             but may also be called in a standalone fashion (e.g. for VAX
 %             forms).  See the def. of  banner2  for a description of the
 %             arguments, and their order.
 %
    userdict /bannerdict2 known not
    {  userdict begin
          /bannerdict2 18 dict def
       end %userdict
    } if
 
    userdict /bannerdict2 get begin
 
       /bannertext 10 1 roll [ 10 1 roll ] def       %save bannertext 1-9
       /jobname exch def
       /source exch def
       /sysidstr exch 6 string cvs def
       /subfilestr exch 6 string cvs def
       /formname exch def
       /datetime exch def
       /wod exch def
       /woo exch def
       /username exch def
       /account exch def
    end
 } bind def %bannerargs2
 
 /banner2    %print a banner
 {
 %     Usage:
 %        (acct) (uname) (woo) (wod) (date time) (form) subfile sysid (source)
 %        (job name) (bannertext1) . . . (bannertext9) true banner2
 %      or
 %        false banner2
 %
 %     Notes:
 %        banner assumes the coordinate system is in inches, with the origin
 %        at the lower left corner of the (portrait) page.  banner does not do
 %        a showpage at the end; this is left to the user.
 %
 %        (source) should be either (CP-6) or (VAX).
 %
 %        In the second form, banner uses the parameters passed to it last
 %        (usually, these will be those provided by the system for this user's
 %        output file).  The parameters are kept in a dictionary called
 %        bannerdict2, which in turn is an entry in userdict; these may be
 %        interrogated by users, but should not be changed.
 %
 
 % Top thing on stack tells whether args precede it on stack; if not, we
 % assume that everything has already been set up for us.
 
    {  bannerargs2  } if %stack top is true
 
    userdict /bannerdict2 get begin  %use our dictionary
 
 %  (*** Drawing borders) print flush
 
    0.5  0.5 moveto            %draw a border 1/2" from edges
    0.5 10.5 lineto
    8.0 10.5 lineto
    8.0  0.5 lineto
    closepath
 
    0.5 10.0 moveto            %draw line 1/2" from top line
    8.0 10.0 lineto
 
    .02 setlinewidth stroke
 
 %  (*** Drawing logo) print flush
 
 %%% Print_Logo  %draw a logo
 
 % Do the stuff in 36-point type -- WOO, Jobname, then Account
 
 %  (*** 36-point stuff) print flush
 
    /Times-Bold findfont 36 72 div scalefont setfont  %bold font for headings
 
%     Bin number is determined from:
%        If  wod = LASER or LOCAL
%           If  bannertext8 = ' '
%               use woo
%           Else
%               use bannertext8
%        Else
%           use wod
 
    wod rtrim dup (LOCAL) eq exch (LASER) eq or
    {  bannertext 8 get dup rtrim () eq
       {  pop woo  } if
     }
    {  wod  } ifelse
 
    rtrim                          %trim the WOO or WOD
    (Bin) search                   %check for BinNNN wsns
    {  pop pop  } if                 %get rid of pre and match if found
 
    dup (LOCAL) eq                 %change 'LOCAL' to 'Any'
    {  pop (Any)  } if
 
    dup                            %copy the Wsn
    7.925 10.075 moveto rshow        %do the Bin
    stringwidth pop                  %get width of what we just wrote
    7.925 exch sub 10.075 moveto       %back up to beginning of text
    (Bin: ) rshow
 
    jobname trim                   %trim the JobName
    {  dup stringwidth pop 7.4 le    %check width of jobname
       {  exit                         %it fits; exit loop
       }
       {  dup length 1 sub 0 exch      %it's too long; ==> jobname 0 length-1
          getinterval
       } ifelse %x width 7.4 le
    } loop %check jobname length
 
    4.25 6.50 moveto cshow         %draw the JobName, centered
 
    0.575 10.075 moveto account show  %do the Account
 
 % Starting at bottom, draw the SCS box, then the mailing addr, then notes
 
    /yinc 1 6 div def
    /yloc .5 yinc 2 div add def
    /yinit yloc def
 
 % Do the SCS italic logo in 36-point type
 
    /Times-BoldItalic findfont 36 72 div scalefont setfont  %bold italic for SCS
 
    4.25 yloc yinc add moveto (S C S) cshow
 
 % Do the stuff in 12-point type -- first, the rest of the bottom box
 
    /Times-Bold findfont 12 72 div scalefont setfont  %font for text
 
 %  (*** misc stuff) print flush
 
    4.25 yloc moveto  %what sort of gadget are we on?
    statusdict begin
       product cshow
    end
 
    /yloc yloc yinc .5 mul add def
 
    7.25 yloc moveto (Source: ) rshow   %do the source computer name
    7.25 yloc moveto source show
 
    1.25 yloc moveto (Sysid: ) rshow    %do the sysid-subfile
    sysidstr show                  %sysid
    subfilestr () ne
    {  (-) show subfilestr show  } if   %-subfile
 
    /yloc yloc yinc add def
 
    7.25 yloc moveto (Form: ) rshow     %do the Form name
    7.25 yloc moveto formname show
 
    1.25 yloc moveto (Date: ) rshow     %do the Date and time
    1.25 yloc moveto datetime show
 
    /yloc yloc yinc 2 mul add def     %where does the top line go?
 
    .5 yloc moveto                      %draw the top line
    7.5 0 rlineto .02 setlinewidth stroke
 
    /yloc yloc yinc .5 mul add def
    /yinit yloc def
 
 % Now do the variable stuff -- mailing addr, then notes
 
    /showif                        %utility routine for showing non-blank text
    {  %(*** showif: ) pstack
       dup ltrim () ne               %is it all blanks?
       {  1.10 yloc moveto show        %if not, show it
          /yloc yloc yinc add def      %then update the position
       }
       {  pop
       } ifelse
    } def %showif
 
 %  put the bannertext back on the stack
 
    bannertext {} forall
 
    pop                            %bannertext 9 -- used elsewhere for bin #
 
 %  (*** Mailing address) print flush
 
    1 1 3
    {  pop showif  } for           %bannertext 6-8 -- mailing address
 
 %  (*** Draw line) print flush
 
    yloc yinit ne                  %did we print anything?
    {  1.25 yloc moveto              %yes, print heading, draw line
       (Mail to: ) rshow
       .5 yloc yinc 1.5 mul add moveto
       7.5 0 rlineto .02 setlinewidth stroke
       /yloc yloc yinc 2.0 mul add def  %update the current text loc
       /yinit yloc def
    } if
 
 %  (*** Notes) print flush
 
    1 1 4
    {  pop showif  } for           %bannertext 2-5 -- misc comments
 
    yloc yinit ne                  %did we print anything?
    {  1.25 yloc moveto              %yes, print heading, draw line
       (Notes: ) rshow
       .5 yloc yinc 1.5 mul add moveto
       7.5 0 rlineto .02 setlinewidth stroke
       /yloc yloc yinc 2.0 mul add def  %update the current text loc
       /yinit yloc def
    } if
 
    pop                            %bannertext 1 doesn't get used.
 
    end %bannerdict2
 } bind def %banner2
