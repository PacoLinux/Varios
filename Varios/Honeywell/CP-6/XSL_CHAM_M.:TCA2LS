

14:00 NOV 16 '97 XSL_CHAM_M.:TCA2SI                                        1    
    1      /*M* XSL_CHAM_M - calling sequence definitions for XSL$CHAM. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F* NAME: XSL$CHAM
    8           DESCRIPTION: The XSL$CHAM library routine is an adaptation of the code in
    9           CP-6 LOGIN that provides user verification and environment establishment.
   10           It is useful to programs like communications servers that need to appear to
   11           be running on behalf of a different user authorization than that with which
   12      they were started.  MEMORY resources are not affected by this service.
   13      It is called with two parameters, as follows:
   14
   15           CALL SET_USER_ID (or XSL$CHAM) (XSL_CHAM, buffer) ALTRET(location);
   16
   17           where "XSL_CHAM" is an FPT described by the XSL_CHAM macro, and "buffer" is
   18           a buffer large enough to contain a :USERS record (one page is recommended).
   19           The ALTRETURN is taken unless the indicated user id is authorized to use
   20           the system.
   21
   22           The parameters for XSL_CHAM except NAME and STCLASS are described below:
   23
   24      */
   25
   26
   27      %MACRO XSL_CHAM (NAME=XSL_CHAM, STCLASS=STATIC, ACCN=' ', USER=' ', PASS=' ',
   28                       DO_ACCOUNTING(YES='1'B, NO='0'B)='0'B,
   29                       BADPW(YES='1'B, NO='0'B)='0'B,
   30                       STUFF_JIT(YES='1'B, NO='0'B)='1'B,
   31                       CHECKPW(YES='1'B, NO='0'B)='1'B,
   32                       SCRAMBLED(YES='1'B, NO='0'B)='0'B,
   33                       FULL_STUFF(YES='1'B, NO='0'B)='0'B);
   34      %LSET LISTDIR='0'B;
   35      %LSET LISTEXP='1'B;
   36      %LSET LISTCOM='0'B;
   37      %LSET LISTSUB='1'B;
14:00 NOV 16 '97 XSL_CHAM_M.:TCA2SI                                        2    
   38      %LSET STC=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   39      %LSET STC=2*BITBIN(STC='STA' OR STC='CON' OR STC='EXT');
   40      %LSET INIT=CHARTEXT(SUBSTR('/*INIT',STC,2+STC));
   41      %LSET ENIT=CHARTEXT(SUBSTR('*/',STC));
   42
   43      DCL 1 NAME STCLASS ALIGNED,
   44            2 L UBIN BYTE CALIGNED %INIT(%(BITBIN(USER>' ')*(8+LENGTHC(USER))))%ENIT,
   45
   46            /*K* L = VALUE-DEC(1-20) must be set at runtime to eight plus the number
   47            of significant characters in USER. */
   48
   49            2 %CHARTEXT('ACCN') CHAR(8)%INIT(ACCN)%ENIT,
   50
   51            /*K* ACCN = VALUE-CHAR(8) specifies the account portion of the desired
   52            user id.*/
   53
   54            2 %CHARTEXT('USER') CHAR(12)%INIT(USER)%ENIT,
   55
   56            /*K* USER = VALUE-CHAR(12) specifies the username portion of the desired
   57            user id.*/
   58
   59            2 FLAGS,
   60              3 %CHARTEXT('DO_ACCOUNTING') BIT(1)%INIT(DO_ACCOUNTING)%ENIT,
   61
   62            /*K* DO_ACCOUNTING = {YES|NO} specifies that accounting for the current
   63            environment is to be done before reinitializing the accounting parameters
   64            in B$JIT from the :USERS record for the new user id.  This option is not
   65            currently implemented. */
   66
   67              3 %CHARTEXT('STUFF_JIT') BIT(1)%INIT(STUFF_JIT)%ENIT,
   68
   69            /*K* STUFF_JIT = {YES|NO} specifies whether the environment for the new
   70            user id is to be set up in B$JIT from the :USERS record.  The default is
   71            YES.  All JIT items currently set up by CP-6 LOGON are also set up by
   72            XSL$CHAM, using the :USERS information for the mode of the running
   73            running program, except CL resources and CPROC.  Note that the mode used
   74            is likely to be ghost.  The user must be a time-sharing one, but access
14:00 NOV 16 '97 XSL_CHAM_M.:TCA2SI                                        3    
   75            for the current mode is not required. */
   76
   77              3 %CHARTEXT('SCRAMBLED') BIT(1)%INIT(SCRAMBLED)%ENIT,
   78
   79            /*K* SCRAMBLED = {YES|NO} specifies whether the PASS parameter is already
   80            scrambled.  It is set by XSL$CHAM after scrambling FPT.PSWB if it wasn't
   81            set and FPT.PSWB is nonzero. */
   82
   83              3 %CHARTEXT('FULL_STUFF') BIT(1)%INIT(FULL_STUFF)%ENIT,
   84
   85            /*K* FULL_STUFF = {YES|NO} specifies whether *S is to be updated with
   86            default LIMIT information.  Since this is impossible to do from a user
   87            program, it is not currently implemented.  Perhaps this option might have
   88            other uses. */
   89
   90              3 %CHARTEXT('BADPW') BIT(1)%INIT(BADPW)%ENIT,
   91
   92            /*K* BADPW = {YES|NO} specifies that after a missing password response
   93            (RESPONSE=1), no password will be supplied.  XSL$CHAM should log the
   94            logon failure if required and possibly update :USERS in the failed logon
   95            count. */
   96
   97              3 %CHARTEXT('CHECKPW') BIT(1)%INIT(CHECKPW)%ENIT,
   98
   99            /*K* CHECKPW = {YES|NO} specifies whether password checking should
  100            be done by XSL$CHAM.  This is intended to be used in cases where
  101            the password in not provided by the application-level protocol,
  102            as is the case with some UNIX network applications.  The default is YES. */
  103
  104              3 * BIT(3)%INIT('0'B)%ENIT,
  105            2 RESPONSE UBIN HALF CALIGNED %INIT(0)%ENIT,
  106
  107            /*K* RESPONSE = VALUE-DEC(0-2) indicates the level of success of the call
  108            to XSL$CHAM.  Zero indicates full success and the call returns normally.
  109            Otherwise, the call altreturns and makes no change to the environment.
  110            One indicates that an attempt to access a passworded authorization was
  111            made without specifying one.  Two indicates failure, either because the
14:00 NOV 16 '97 XSL_CHAM_M.:TCA2SI                                        4    
  112            user ID was not authorized or because XSL$CHAM couldn't do its job.  It
  113            needs read access to :HLP and :USERS in :SYS, and the rununit in which it
  114            is running must have JIT privilege. */
  115
  116            2 %CHARTEXT('PASS') CHAR(8)%INIT(PASS)%ENIT,
  117
  118            /*K* PASS = VALUE-CHAR(8) specifies the password portion of the desired
  119            user ID.  This parameter is REDEFed as PSWB, an array of nine BIT-8 items
  120            which should be cleared to zero to indicate that no password is specified.
  121            */
  122            2 PSWB(0:8) REDEF %CHARTEXT('PASS') BIT(8);
  123      %MEND;
  124      /*F* NAME: D_XSL_CHAM
  125      .* Put structure DRAW into manual
  126      .IBL D:XSL_CHAM
  127      */

