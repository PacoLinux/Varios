/*M*     PAGE - Create banner pages from blockletters and
                 user supplied files(logo and news).  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*DMR,THI=0,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,DCI=5,CSU=5,ECU=5,DTI=2*/
/*
          PPPPPP    AAAAA    GGGGG   EEEEEEE
          PP   PP  AA   AA  GG   GG  EE
          PP   PP  AA   AA  GG       EE
          PPPPPP   AAAAAAA  GG       EEEEE
          PP       AA   AA  GG GGGG  EE
          PP       AA   AA  GG   GG  EE
          PP       AA   AA   GGGGGG  EEEEEEE
 */
/*P*     Purpose-
              To print Banner pages using the fonts of blockletters
         supplied by ID$CREATE and user supplied data files(logo and news)     */
/**/
/**/
/*F*     Function -
 
              DCBS used:
                   M$SI      Command input
                   M$DO      Comments and diagnostic output
                   M$LO      Banner pages out
                   M$EI      Blockletter descriptions in(ID_ID)
                   M$UI      User files in
 
              Files used
                   ID_ID
                                                                */
         %EJECT;
PAGER: PROC MAIN;                       /* CREATE BANNER PRINT PAGES          */
         %SET CRT_FID='0'B;
         %INCLUDE ID_C1;
         %SUB ERR_MSG#=9;
         %F$DCB;
         %FPT_OPEN(
              FPTN=REA,
              REASSIGN=YES,
              DCB=M$EI
                   );
         %FPT_OPEN(
              FPTN=REAS,
              REASSIGN=YES,
              DCB=M$LO
                   );
         %FPT_OPEN(
              FPTN=SDCBS,
              DCB=M$LO,
              RES='LO',
              ASN=DEVICE,
              SETDCB=YES
                   );
         %FPT_OPEN(
              FPTN=NO,
              ASN=DEVICE,
              RES='NO',
              SETDCB=YES,
              DCB=M$SI
                   );
         %FPT_CLOSE(
              FPTN=SAVE,
              DCB=M$LO,
              DISP=SAVE
                   );
    %EJECT;
         %FPT_READ(
              FPTN=FILE_RD,
              WAIT=YES,
              DCB=M$EI,
              BIN=YES,
              KEYS=YES,
              KEY=NKEY
                   );
         %FPT_WRITE(
              FPTN=LET_WT,
              WAIT=YES,
              DCB=M$LO,
              VFC=YES
                   );
DCL M$LM DCB;
DCL M$LO DCB;
DCL M$LM$ PTR;
DCL M$SI$ PTR;
DCL M$UI$ PTR;
DCL 1 NBREAK STATIC,
         2 COUNT UBIN BYTE UNAL INIT(KEYLEN),
         2 KEYS (0:23) UBIN BYTE UNAL INIT(1*0);
DCL NKEY REDEF NBREAK CHAR(25);
         %EJECT;
         %FPT_GDS(
              FPTN=GBLK,
              COMMON=YES,
              FREE=YES,
              RESULTS=PRT_BLK
                   );
         %FPT_FDS(
              FPTN=FBLK,
              COMMON=YES,
              RESULTS=PRT_BLK
                   );
         %FPT_GDS(
              FPTN=GPAGE,
              COMMON=YES,
              FREE=YES,
              RESULTS=PTR_PAGE
                   );
         %FPT_FDS(
              FPTN=FPAGE,
              COMMON=YES,
              RESULTS=PTR_PAGE
                   );
         %VLP_VECTOR(FPTN=PRT_BLK);
         %VLP_VECTOR(FPTN=PTR_PAGE);
DCL B$JIT$ PTR SYMREF;
         %INCLUDE B$JIT_C;
         %B$JIT0;
         %U$JIT1;
         %A$JIT6X;
         %EJECT;
DCL BA$PRAM BASED SBIN;
DCL I SBIN STATIC ALIGNED;
DCL COL SBIN STATIC ALIGNED;
DCL NN SBIN STATIC ALIGNED;
DCL OUTBUFF CHAR(80) STATIC ALIGNED;
DCL INBUFF(0:139) CHAR(1) STATIC UNAL;
DCL IN_REC REDEF INBUFF CHAR(140);
DCL INJUNK(0:139) REDEF INBUFF UBIN(9) UNAL;
DCL NUM SBIN STATIC ALIGNED;
DCL STR_COL SBIN STATIC ALIGNED;
DCL END_COL SBIN STATIC ALIGNED;
DCL BLANK BASED CHAR(4);
DCL ROW$ PTR STATIC;
DCL ST_PTR$ PTR STATIC;
DCL CHARS(0:0) BASED CHAR(1) UNAL;
DCL POS SBIN STATIC ALIGNED;
DCL J SBIN STATIC ALIGNED;
DCL L SBIN STATIC ALIGNED;
DCL PRT_POS SBIN STATIC ALIGNED;
DCL LINE(0:139) CHAR(1) STATIC;
DCL LETTER CHAR(1) STATIC;
DCL TEST BIT(1) STATIC;
DCL FIRST BIT(1) STATIC;
DCL FIRSTBLK BIT(1);
DCL ST_COL SBIN STATIC ALIGNED;
DCL INTEXT SBIN STATIC ALIGNED;
DCL PAGE_LINE SBIN STATIC ALIGNED INIT(0);
DCL VALUE SBIN STATIC ALIGNED;
DCL VFC CHAR(1) BASED;
DCL TOF CHAR(1) CONSTANT INIT('0');
DCL OVR CHAR(1) CONSTANT INIT('`');
DCL ST CHAR(1) CONSTANT INIT ('A');
    %EJECT;
DCL 1 PAGE,
         2 PAGE$ PTR,
         2 WIDTH SBIN,
         2 DEPTH SBIN,
         2 STRIKES SBIN;
DCL 1 PRINT_,
         2 PTR$ PTR,
         2 WIDTH SBIN,
         2 DEPTH SBIN,
         2 INC SBIN;
DCL PFIRST BIT(1);
DCL MODE CHAR(4);
DCL GPOS SBIN STATIC ALIGNED;
DCL BPOS SBIN STATIC ALIGNED;
DCL FIELDPTR$ PTR STATIC;
DCL FIELDSIZE(0:5) SBIN STATIC ALIGNED INIT(
              8,
              5,
              8,
              8,
              12,
              5
                   );
DCL INSIZE(0:5) SBIN STATIC ALIGNED INIT(
              4,
              4,
              4,
              3,
              5,
              5
              );
         %EJECT;
                                        /*   THIS STARTS MAIN PROGRAM CODE    */
/**/
     M$SI$=DCBADDR(DCBNUM(M$SI));
     M$LM$=DCBADDR(DCBNUM(M$LM));
     FACCT.ACCT#=M$LM$->F$DCB.ACCT#;
     CALL M$OPEN(SDCB);
     CALL M$OPEN(REA);
     CALL M$OPEN(SDCBS);
     CALL M$OPEN(REAS);
     PFIRST='1'B;
     FIRST='1'B;
     DO WHILE('1'B);
          CALL FIND_CMS;
          DO COL=STR_COL TO END_COL;
               IF SUBSTR(IN_REC,COL,4)='PAGE'
               THEN
                 DO;
                      IF PFIRST
                      THEN
                           CALL INPAGE;
                      ELSE
                        DO;
                             CALL PRT_PAGE;
                             CALL INPAGE;
                           END;
                      GOTO AGAIN;
                    END;
    %EJECT;
               IF SUBSTR(IN_REC,COL,5)='FILE='
               THEN
                    IF ~PFIRST
                    THEN
                      DO;
                           MODE='FILE';
                           CALL PAGEIN;
                           GOTO AGAIN;
                         END;
                    ELSE
                         GOTO NOPAGE;
             END;
          IF ~PFIRST
          THEN
            DO;
                 MODE='BKLT';
                 CALL PAGEIN;
               END;
          ELSE
            DO;
NOPAGE:          OUTBUFF='ERROR(NO PAGE DEFED)...';
                 CALL M$WRITE(USER_WT);
               END;
AGAIN:  END;
    %EJECT;
FIND_CMS: PROC;                    /* FIND OUT WHERE THE COMMANDS ARE FROM    */
DCL BEG SBIN STATIC INIT(0);
     IF ~FIRST
     THEN
          GOTO OK;
     DO WHILE (FIRST);
          FIRST='0'B;
          IF SUBSTR(B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCDISP,1)='('
          THEN
            DO;
                 CALL CCBUFF;
                 CALL CHK_PAIRS ALTRET(FIN);
                 GOTO OK;
               END;
        END;
     DO WHILE ('1'B);
          IN_REC=' ';
          BEG=0;
RD:       CALL M$READ(USER_RD) ALTRET(FIN);
          CALL CHK_PAIRS ALTRET(RD);
          DO WHILE('0'B);
FIN:           CALL PRT_PAGE;
               CALL FINN;
             END;
    %EJECT;
OK:       INTEXT=-1;
          DO STR_COL=BEG TO 139;
               IF INBUFF(STR_COL)=''''
               THEN
                    INTEXT=-INTEXT;
               IF INTEXT=-1
               THEN
                 DO;
                      IF INBUFF(STR_COL)='('
                      THEN
                           GOTO LEFT_PARN;
                    END;
             END;
          GOTO AGAIN;
LEFT_PARN: DO END_COL=STR_COL+1 TO 139;
               IF INBUFF(END_COL)=''''
               THEN
                    INTEXT=-INTEXT;
               IF INTEXT=-1
               THEN
                 DO;
                      IF INBUFF(END_COL)=')'
                      THEN
                        DO;
                             BEG=END_COL+1;
                             RETURN;
                           END;
                    END;
             END;
AGAIN:  END;
END FIND_CMS;
    %EJECT;
CHK_PAIRS: PROC ALTRET;       /* CHECK FOR MATCHING PAIRS OF QUOTES AND PARNS */
DCL PQUOTES SBIN ALIGNED;
DCL PPARNS SBIN ALIGNED;
     PQUOTES=1;
     PPARNS=1;
     DO I=0 TO 139;
          IF INBUFF(I)=''''
          THEN
               PQUOTES=-PQUOTES;
          IF INBUFF(I)='('
          THEN
               PPARNS=PPARNS-1;
          IF INBUFF(I)=')'
          THEN
               PPARNS=PPARNS+1;
          IF PPARNS>1
          THEN
               GOTO BADD;
        END;
     IF PQUOTES=1
     THEN
          IF PPARNS=1
          THEN
               RETURN;
BADD: OUTBUFF='MISPAIRED QUOTE OR PAREN...';
     CALL M$WRITE(USER_WT);
     ALTRETURN;
END CHK_PAIRS;
    %EJECT;
CCBUFF: PROC;                           /* SET DCB TO NO AND MOVE CCBUFF      */
     CALL M$OPEN(NO);
     IN_REC=B$JIT$->B$JIT.CCBUF;
     RETURN;
END CCBUFF;
FINN: PROC;                             /* LETS GET OUT OF HERE               */
     LET_WT.BUF_=VECTOR(TOF);
     CALL M$WRITE(LET_WT);
     CALL M$CLOSE(CLOSE);
     CALL M$CLOSE(SCLOSE);
     CALL M$CLOSE(SAVE);
     CALL M$EXIT;
END FINN;
    %EJECT;
INPAGE: PROC;                           /* GET MEMORY TO BUILD A PRINT PAGE   */
     PAGE.WIDTH=0;
     PAGE.DEPTH=0;
     PAGE.STRIKES=1;
     PFIRST='0'B;
     I=-1;
     DO COL=STR_COL TO END_COL;
          IF SUBSTR(IN_REC,COL,6)='DEPTH='
          THEN
            DO;
                 COL=COL+6;
                 CALL NUMS;
                 PAGE.DEPTH=VALUE;
               END;
          IF SUBSTR(IN_REC,COL,6)='WIDTH='
          THEN
            DO;
                 COL=COL+6;
                 CALL NUMS;
                 PAGE.WIDTH=VALUE;
               END;
          IF SUBSTR(IN_REC,COL,8)='STRIKES='
          THEN
            DO;
                 COL=COL+8;
                 CALL NUMS;
                 PAGE.STRIKES=VALUE;
               END;
        END;
    %EJECT;
     GPAGE.V.SEGSIZE#=((PAGE.WIDTH*PAGE.DEPTH*PAGE.STRIKES)/4)+1;
     CALL M$GDS(GPAGE) ALTRET(NOMEM);
     DO WHILE('0'B);
NOMEM:    OUTBUFF='NO MEMORY AVALIBLE...';
          CALL M$WRITE(USER_WT);
          CALL FINN;
        END;
     PAGE.PAGE$=PTR_PAGE.PTR$;
     DO I=1 TO GPAGE.V.SEGSIZE#;
          PAGE.PAGE$->BLANK=' ';
          PAGE.PAGE$=PINCRW(PAGE.PAGE$,1);
        END;
     PAGE.PAGE$=PTR_PAGE.PTR$;
     FIRSTBLK='1'B;
     RETURN;
END INPAGE;
    %EJECT;
PAGEIN: PROC;                           /* SET UP PTR AND CALL ID OR FILE     */
DCL DISP SBIN;
DCL ROW SBIN;
DCL COLL SBIN;
     I=-1;
     DO COL=STR_COL TO END_COL;
          IF SUBSTR(IN_REC,COL,4)='ROW='
          THEN
            DO;
                 COL=COL+4;
                 CALL NUMS;
                 ROW=VALUE;
               END;
          IF SUBSTR(IN_REC,COL,4)='COL='
          THEN
            DO;
                 COL=COL+4;
                 CALL NUMS;
                 COLL=VALUE;
               END;
        END;
     IF ROW>PAGE.DEPTH
     THEN
          RETURN;
     IF COL>PAGE.WIDTH
     THEN
          RETURN;
    %EJECT;
     DISP=(ROW*PAGE.WIDTH*PAGE.STRIKES)+COLL;
     PRINT_.PTR$=PINCRC(PAGE.PAGE$,DISP);
     PRINT_.INC=PAGE.WIDTH*PAGE.STRIKES;
     PRINT_.WIDTH=PAGE.WIDTH-COLL;
     PRINT_.DEPTH=PAGE.DEPTH-ROW;
     IF MODE='FILE'
     THEN
          CALL FILE;
     ELSE
          CALL ID;
     RETURN;
END PAGEIN;
    %EJECT;
ID:  PROC;                              /* CREATE BLOCKLETTERS FOR PAGER */
     DO I=0 TO COMMAND#;
          INTEXT=-1;
          DO COL=STR_COL TO END_COL;
               IF SUBSTR(IN_REC,COL,1)=''''
               THEN
                    INTEXT=-INTEXT;
               IF INTEXT=-1
               THEN
                 DO;
                      IF SUBSTR(IN_REC,COL,SIZE(I))=COMTAB(I)
                      THEN
                           CALL CHK_DEF;
                    END;
             END;
OK:     END;
     PRAM_FLG(0)=1;
     PRAM_FLG(1)=1;
     PRAMS.PWIDTH=PAGE.WIDTH;
     PRAMS.PDEPTH=PAGE.DEPTH;
     CALL FIXAWT;
     DO I=0 TO 13;
          PRAM_FLG(I)=0;
        END;
     RETURN;
END ID;
    %EJECT;
CHK_DEF: PROC;                          /* FIND OUT WHAT KIND OF PRAM THIS IS */
     ST_COL=COL;
     COL=COL+SIZE(I);
     IF PRAM_FLG(I)=1
     THEN
       DO;
            CALL CONCAT(OUTBUFF,COMTAB(I),
                 'IS ALREADY DEFINED, LAST DEF USED...');
            CALL M$WRITE(USER_WT);
          END;
     IF PRAM_MAX(I)<0
     THEN
          CALL STRING;
     ELSE IF PRAM_MAX(I)=0
          THEN
               CALL FLAG;
          ELSE
               CALL NUMS;
               DO COL=ST_COL TO END_COL;
                    IF INBUFF(COL)~=')'
                    THEN
                         IF INBUFF(COL)~=','
                         THEN
                              INJUNK(COL)=0;
                         ELSE
                              RETURN;
                    ELSE
                         RETURN;
                  END;
     RETURN;
END CHK_DEF;
    %EJECT;
STRING: PROC;                           /* THIS IS FOR STRING PRAMS           */
DCL STRING$ PTR STATIC ALIGNED;
DCL BA$RING BASED CHAR(LEN);
DCL LEN SBIN STATIC ALIGNED;
     PRAM_MAX(I)=-PRAM_MAX(I);
     DO NN=0 TO PRAM_MAX(I);
          IF INJUNK(COL+NN)=44
          THEN
               GOTO BOT;
          IF INJUNK(COL+NN)=41
          THEN
               GOTO BOT;
          IF INJUNK(COL+NN)<33
          THEN
               GOTO BOT;
        END;
     CALL WRITE_ERR(5);
BOT: LEN=PRAM_MAX(I);
     PRAM_MAX(I)=-PRAM_MAX(I);
     STRING$=ADDR(INBUFF(COL));
     PRAM_ADDR$(I)->BA$RING=' ';
     LEN=NN;
     PRAM_ADDR$(I)->BA$RING=STRING$->BA$RING;
     PRAM_FLG(I)=1;
     RETURN;
END STRING;
    %EJECT;
FLAG: PROC;                             /* THIS IS FOR FLAG PRAMS             */
     IF SUBSTR(IN_REC,COL,3)='YES'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=1;
            RETURN;
          END;
     IF SUBSTR(IN_REC,COL,2)='NO'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=0;
            RETURN;
          END;
     CALL WRITE_ERR(6);
     RETURN;
END FLAG;
    %EJECT;
WRITE_ERR: PROC(NUMBER);                /* THIS HANDLES THE ERROR MESSAGES    */
DCL ERROR SBIN STATIC ALIGNED INIT(0);
DCL NUMBER SBIN;
DCL ERROR_MSG(0:ERR_MSG#) CHAR(80) STATIC INIT(
              'THIS IS JUST TOO MANY ERRORS...',
              'INVALID OPTION...',
              'VALUE EXCEEDES MAX...',
              'VALUE MUST BE NUMERIC...',
              'VALUE MISSING OR ZERO...',
              'PRAM TOO LONG RIGHTMOST CHARACTERS TRUNCATED...',
              'INVALID VALUE FOR FLAG PRAM...',
              'ALL PRAMS NOT PRESENT...',
              'NEEDED MEMORY NOT AVALIBLE...',
              'ERROR IN ASCII/OCAL DEF...');
     OUTBUFF=ERROR_MSG(NUMBER);
     CALL M$WRITE(USER_WT);
     ERROR=ERROR+1;
     IF ERROR>20
     THEN
       DO;
            OUTBUFF=ERROR_MSG(0);
            CALL M$WRITE(USER_WT);
            CALL FINN;
          END;
     RETURN;
END WRITE_ERR;
    %EJECT;
FIXAWT: PROC;                           /* FIX THE OUTPUT LINE AND WRITE IF   */
     GPOS=0;
     INTEXT=-1;
     DO BPOS=STR_COL TO END_COL;
          IF INJUNK(BPOS)~=0
          THEN
               IF INJUNK(BPOS)~=39
               THEN
                    IF INTEXT=1
                    THEN
                      DO;
                           LINE(GPOS)=INBUFF(BPOS);
                           GPOS=GPOS+1;
                         END;
                    ELSE
                         IF INBUFF(BPOS)='%'
                         THEN
                              CALL CHK_IN;
                         ELSE
                              IF INBUFF(BPOS)='/'
                              THEN
                                   CALL NEXL;
                              ELSE ;
               ELSE
    %EJECT;
                    IF INTEXT=1
                    THEN
                         IF INJUNK(BPOS+1)=39
                         THEN
                           DO;
                                LINE(GPOS)=INBUFF(BPOS);
                                GPOS=GPOS+1;
                                BPOS=BPOS+1;
                              END;
                         ELSE
                              INTEXT=-INTEXT;
                    ELSE
                         INTEXT=-INTEXT;
        END;
     DO BPOS=GPOS TO 139;
          LINE(BPOS)=' ';
        END;
     CALL PRINT;
     RETURN;
END FIXAWT;
    %EJECT;
NEXL: PROC;                             /* PRINT A NEW LINE                   */
     DO COL=GPOS TO 139;
          LINE(COL)=' ';
        END;
     CALL PRINT;
     GPOS=0;
     RETURN;
END NEXL;
    %EJECT;
PRINT: PROC ;                           /* PRINTS LINES USING ID_ID FILE      */
DCL MAX SBIN;
DCL STRK SBIN;
     IF KEY~=NKEY
     THEN
          CALL GETREC;
          DO I=0 TO 10;
               IF PRAM_FLG(I)=1
               THEN
                 DO CASE(I);
                 CASE(0);
                      REC_VEC.PTR$->REC.PDEPTH=PRAMS.PDEPTH;
                 CASE(1);
                      REC_VEC.PTR$->REC.PWIDTH=PRAMS.PWIDTH;
                 CASE(2);
                      REC_VEC.PTR$->REC.ICSH=PRAMS.ICSH;
                 CASE(3);
                      REC_VEC.PTR$->REC.ICSV=PRAMS.ICSV;
                 CASE(4,5);
                      OUTBUFF='OOPS...';
                      CALL M$WRITE(USER_WT);
                      CALL FINN;
                 CASE(6);
                      REC_VEC.PTR$->REC.STRIKES=PRAMS.STRIKES;
                 CASE(7);
                      REC_VEC.PTR$->REC.BS=PRAMS.BS;
                 CASE(8);
                      REC_VEC.PTR$->REC.LPI=PRAMS.LPI;
                 CASE(9);
                      REC_VEC.PTR$->REC.USECHAR=PRAMS.USECHAR;
                 CASE(10);
                      REC_VEC.PTR$->REC.CSET=PRAMS.CSET;
                 END;
             END;
    %EJECT;
     IF PRINT_.DEPTH<(REC_VEC.PTR$->REC.HEIGHT+REC_VEC.PTR$->REC.ICSV)
     THEN
          RETURN;
     IF PAGE.STRIKES<REC_VEC.PTR$->REC.STRIKES
     THEN
          MAX=PAGE.STRIKES;
     ELSE
          MAX=REC_VEC.PTR$->REC.STRIKES;
     DO STRK=1 TO MAX;
          ROW$=PINCRC(PRINT_.PTR$,(STRK-1)*PAGE.WIDTH);
          DO J=0 TO REC_VEC.PTR$->REC.HEIGHT-1;
               PRT_POS=1;
               I=0;
               DO WHILE (PRT_POS<PRINT_.WIDTH-REC_VEC.PTR$->REC.WIDTH);
                    DO NN=I TO 139;
                         IF LINE(NN)~=' '
                         THEN
                              GOTO NOTDONE;
                       END;
                    GOTO NEX;
NOTDONE:            LETTER=LINE(I);
                    IF REC_VEC.PTR$->REC.USECHAR=0
                    THEN
                         LETTER=SUBSTR(REC_VEC.PTR$->REC.CSET,STRK-1,1);
                    INDX=ASCBIN(LINE(I));
                    IF INDX=8
                    THEN
                         IF REC_VEC.PTR$->REC.BS=1
                         THEN
                           DO;
                                PRT_POS=PRT_POS-(REC_VEC.PTR$->REC.WIDTH
                                     +REC_VEC.PTR$->REC.ICSH);
                                GOTO BACKSPACE;
                              END;
    %EJECT;
                    LET$=PINCRB(REC_VEC.PTR$,INDX*LLEN);
                    LET$=PINCRW(LET$,22);
                    POS=J*REC_VEC.PTR$->REC.WIDTH;
                    DO L=0 TO REC_VEC.PTR$->REC.WIDTH-1;
                         IF LET$->MAT$LET(POS)='1'B
                         THEN
                              ROW$->CHARS(PRT_POS)=LETTER;
                         POS=POS+1;
                         PRT_POS=PRT_POS+1;
                       END;
                    DO L=1 TO REC_VEC.PTR$->REC.ICSH;
                         ROW$->CHARS(PRT_POS)=' ';
                         PRT_POS=PRT_POS+1;
                       END;
BACKSPACE:          I=I+1;
                  END;
NEX:           ROW$=PINCRC(ROW$,PRINT_.INC);
             END;
        END;
     PRINT_.PTR$=PINCRC(PRINT_.PTR$,PRINT_.INC*(
          REC_VEC.PTR$->REC.HEIGHT+REC_VEC.PTR$->REC.ICSV));
     PRINT_.DEPTH=PRINT_.DEPTH-(REC_VEC.PTR$->REC.HEIGHT+REC_VEC.PTR$->REC.ICSV);
     RETURN;
END PRINT;
    %EJECT;
GETREC: PROC;                           /* GET THE RECORD                     */
     IF ~FIRSTBLK
     THEN
       DO;
            FBLK.V.SEGSIZE#=GMEM.V.SEGSIZE#+24;
            CALL M$FDS(FBLK);
          END;
     ELSE
          FIRSTBLK='0'B;
     GMEM.V.SEGSIZE#=23;
     CALL M$GDS(GMEM) ALTRET(NOMEM);
     NKEY=KEY;
     FILE_RD.BUF_.BUF$=PINCRW(PAGE.PAGE$,GPAGE.V.SEGSIZE#);
     FILE_RD.BUF_.BOUND=23;
     TEST='0'B;
     CALL M$READ(FILE_RD) ALTRET(NOKEY);
     DO WHILE('0'B);
NOMEM:    CALL WRITE_ERR(8);
          CALL FINN;
NOKEY:    DO WHILE (TEST);
               OUTBUFF='NO RECORD FOR THAT KEY...';
               CALL M$WRITE(USER_WT);
               CALL FINN;
             END;
        END;
     TEST='1'B;
     LLEN=FILE_RD.BUF_.BUF$->REC.HEIGHT*FILE_RD.BUF_.BUF$->REC.WIDTH;
     TLEN=(LLEN*127/9);
     GMEM.V.SEGSIZE#=((TLEN/4)+2);
     CALL M$GDS(GMEM) ALTRET(NOMEM);
     FILE_RD.BUF_.BOUND=(GMEM.V.SEGSIZE#+23)*4;
     CALL M$READ(FILE_RD) ALTRET(NOKEY);
     REC_VEC.PTR$=FILE_RD.BUF_.BUF$;
     RETURN;
END GETREC;
    %EJECT;
CHK_IN: PROC;                           /* FILL INTRINSIC FUNCTIONS INTO LINE */
DCL INTAB(0:5) CHAR(8) STATIC INIT(
              'DATE',
              'TIME',
              'ACCN',
              'WOO',
              'UNAME',
              'SYSID'
                   );
    %EJECT;
     BPOS=BPOS+1;
     DO I=0 TO 5;
          IF SUBSTR(IN_REC,BPOS,INSIZE(I))=INTAB(I)
          THEN
               GOTO FOUND;
        END;
     RETURN;
FOUND: IF I<2
     THEN
          CALL DTIME;
     ELSE
          CALL JITINFO;
     RETURN;
END CHK_IN;
    %EJECT;
DTIME: PROC;                            /* GET DATE AND TIME                  */
DCL DATE CHAR(8) STATIC;
DCL TIME CHAR(5) STATIC;
         %FPT_TIME(
              FPTN=TIM,
              DATE=DATE,
              TIME=TIME,
              DEST=LOCAL
                   );
     CALL M$TIME(TIM);
     IF I=0
     THEN
          FIELDPTR$=ADDR(DATE);
     ELSE
          FIELDPTR$=ADDR(TIME);
     DO NN=0 TO FIELDSIZE(I)-1;
          LINE(GPOS)=FIELDPTR$->CHARS(NN);
          GPOS=GPOS+1;
        END;
     BPOS=BPOS+INSIZE(I)-1;
     RETURN;
END DTIME;
    %EJECT;
JITINFO: PROC;                          /* GET INFOMATION FROM THE JIT        */
DCL SYSID CHAR(5) STATIC;
     DO CASE(I);
     CASE(2);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.ACCN);
     CASE(3);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.WOO);
     CASE(4);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.UNAME);
     CASE(5);
          FIELDPTR$=ADDR(SYSID);
          CALL BINCHAR(SYSID,B$JIT$->B$JIT.SYSID);
     END;
     DO NN=0 TO FIELDSIZE(I)-1;
          LINE(GPOS)=FIELDPTR$->CHARS(NN);
          GPOS=GPOS+1;
        END;
     BPOS=BPOS+INSIZE(I)-1;
     RETURN;
END JITINFO;
    %EJECT;
FILE: PROC;                             /* THIS IS WHERE WE DO OUR FILE STUFF */
    %VLP_NAME(FPTN=FILN);
    %VLP_ACCT(FPTN=FILA);
    %VLP_PASS(FPTN=FILP);
    %FPT_OPEN(
         FPTN=FILE_OP,
         DCB=M$UI,
         SHARE=ALL,
         FUN=IN,
         EXIST=OLDFILE,
         SETDCB=YES,
         NAME=FILN,
         ACCT=FILA,
         PASS=FILP,
         ASN=FILE
              );
    %FPT_CLOSE(
         FPTN=FILE_CL,
         DCB=M$UI,
         DISP=SAVE
              );
    %FPT_READ(
         FPTN=UFILE_RD,
         DCB=M$UI,
         WAIT=YES,
         BUF=REC_FILE
              );
DCL M$UI DCB;
    %EJECT;
DCL 1 FILE_REC STATIC,
         2 VFC CHAR(1),
         2 REST CHAR(139);
DCL 1 REC_FILE REDEF FILE_REC CHAR(140);
DCL CURR$ PTR;
DCL NEX$ PTR;
DCL REC CHAR(LEN) BASED;
DCL LEN SBIN;
DCL STRIKES SBIN;
DCL GFID_ASN UBIN(9) STATIC;
    %VLR_FID(FPTN=RESL);
    %FPT_FID(FPTN=GFID,
         ACCT=FILA,
         NAME=FILN,
         PASS=FILP,
         ASN=GFID_ASN,
         RESULTS=RESL
              );
    %EJECT;
     M$UI$=DCBADDR(DCBNUM(M$UI));
     DO COL=STR_COL TO END_COL;
          IF SUBSTR(IN_REC,COL,5)='FILE='
          THEN
               GOTO OK;
        END;
ERR: OUTBUFF='ERROR IN FILE DEF...';
     CALL M$WRITE(USER_WT);
     RETURN;
OK:  LEN=0;
     COL=COL+5;
     DO I=COL TO END_COL;
          IF INBUFF(I)=',' OR INBUFF(I)=')'
          THEN
               GOTO END_OF_NAME;
          LEN=LEN+1;
        END;
     GOTO ERR;
END_OF_NAME:
     GFID.TEXTFID_=VECTOR(SUBSTR(IN_REC,COL,LEN));
     CALL M$FID(GFID) ALTRET(ERR);
     CALL M$OPEN(FILE_OP);
     CURR$=PRINT_.PTR$;
     NEX$=PINCRC(PRINT_.PTR$,PRINT_.INC);
     STRIKES=1;
     DO WHILE(PRINT_.DEPTH>0);
          REC_FILE=' ';
          CALL M$READ(UFILE_RD) ALTRET(DONE);
          IF M$UI$->F$DCB.ARS#<PRINT_.WIDTH
          THEN
               LEN=M$UI$->F$DCB.ARS#;
          ELSE
               LEN=PRINT_.WIDTH;
          CURR$->REC=FILE_REC.REST;
    %EJECT;
          IF FILE_REC.VFC='A'
          THEN
            DO;
NEXLINE:         CURR$=NEX$;
                 NEX$=PINCRC(NEX$,PRINT_.INC);
                 PRINT_.DEPTH=PRINT_.DEPTH-1;
                 STRIKES=1;
               END;
          ELSE
            DO;
                 CURR$=PINCRC(CURR$,PAGE.WIDTH);
                 STRIKES=STRIKES+1;
                 IF STRIKES>PAGE.STRIKES
                 THEN
                   DO WHILE('1'B);
                        CALL M$READ(UFILE_RD) ALTRET(DONE);
                        IF FILE_REC.VFC='A'
                        THEN
                             GOTO NEXLINE;
                      END;
               END;
        END;
DONE: CALL M$CLOSE(FILE_CL);
     RETURN;
END FILE;
    %EJECT;
PRT_PAGE: PROC;                         /* LETS PRINT THE PAGE WE JUST MADE   */
     IF PFIRST
     THEN
          RETURN;
     LET_WT.BUF_=VECTOR(TOF);
     CALL M$WRITE(LET_WT);
     LET_WT.BUF_.BUF$=PAGE.PAGE$;
     LET_WT.BUF_.BOUND=PAGE.WIDTH;
     DO I=1 TO PAGE.DEPTH;
          NN=1;
          DO WHILE (NN<PAGE.STRIKES);
               NN=NN+1;
               LET_WT.BUF_.BUF$->VFC=OVR;
               CALL M$WRITE(LET_WT);
               LET_WT.BUF_.BUF$=PINCRC(LET_WT.BUF_.BUF$,PAGE.WIDTH);
             END;
          LET_WT.BUF_.BUF$->VFC=ST;
          CALL M$WRITE(LET_WT);
          LET_WT.BUF_.BUF$=PINCRC(LET_WT.BUF_.BUF$,PAGE.WIDTH);
        END;
     FPAGE.V.SEGSIZE#=GPAGE.V.SEGSIZE#+GMEM.V.SEGSIZE#+23;
     CALL M$FDS(FPAGE);
     NBREAK.KEYS(0)=1;
     RETURN;
END PRT_PAGE;
    %EJECT;
NUMS: PROC;                             /* THIS IS FOR NUMERIC PRAMS          */
     VALUE=0;
     DO NN=0 TO 4;
          IF INJUNK(COL)<47
          THEN
            DO;
                 CALL DONE;
                 RETURN;
               END;
          IF INJUNK(COL)<58
          THEN
            DO;
                 CALL CHARBIN(NUM,INBUFF(COL));
                 VALUE=(VALUE*10)+NUM;
                 COL=COL+1;
               END;
          ELSE
            DO;
                 CALL WRITE_ERR(3);
                 RETURN;
               END;
        END;
     CALL WRITE_ERR(2);
     RETURN;
END NUMS;
    %EJECT;
DONE: PROC;                        /* CHECK AND SEE IF PRAM VALUE IS VALID    */
     IF I=-1
     THEN
          RETURN;
     IF PRAM_MAX(I)<VALUE
     THEN
       DO;
            CALL WRITE_ERR(2);
            RETURN;
          END;
     PRAM_ADDR$(I)->BA$PRAM=VALUE;
     PRAM_FLG(I)=1;
     RETURN;
END DONE;
END PAGER;
