VERSION E05

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:1    
        1        1        /*M* DFS$INSTR .. Forward assembly routine for Fep modes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,AND,IND=5 */
        8        8        DFS$INSTR : PROC( ASSMBLD_INSTR, CURRENT_ADDRESS, TEST_OP, TEST_PTR$ ) ALTRET;
        9        9
       10       10        /*D* NAME: DFS$INSTR
       11       11             INPUT:  ASSMBLD_INSTR - 17 words space to receive assembled instruction
       12       12                                     and instruction size
       13       13                     CURRENT_ADDRESS - The address being modified
       14       14                     TEST_OP - If set, tells this module to simply verify the  opcode
       15       15                     TEST_PTR$ - a pointer to the to-be-parsed instruction; this
       16       16                                 pointer should be passed only when TEST_OP is
       17       17                                 set.  For normal operation, pointer to the
       18       18                                 instruction is in the global structure pointed
       19       19                                 at by S_D.DESC$.
       20       20             OUTPUT: ASSMBLD_INSTR - 17 words; the 1st word is the size of the
       21       21                                     assembled instruction in words; the rest
       22       22                                     16 words contains the assembled L6 instruction
       23       23                                     right justified
       24       24             DESCRIPTION:
       25       25                          This module serves two purposes; one is to assemble
       26       26                          an L6 instruction; the other one is to verify whether
       27       27                          the SYM node is actually a valid L6 opcode.  TEST_OP
       28       28                          tells this module which one to perform. */
       29       29                                                /**/
       30       30        %INCLUDE XU_MACRO_C;
       31     3136        %PARSE$OUT( NAME = OUT$BLK, STCLASS = BASED );
       32     3181        %PARSE$SYM( NAME = OUT$SYM, STCLASS = BASED );
       33     3219        %INCLUDE DD_ERR_C;
       34     3616        %INCLUDE XUH_MACRO_C;
       35     3700        %INCLUDE DD_SD_M;
       36     5036        %S_D;
       37     6354        %INCLUDE DD_PSUBS_C;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:2    
       38     6829                                                /**/
       39     6830        %SUB PREL_LOWER_LIMIT = -32768;
       40     6831        %SUB PREL_UPPER_LIMIT = 32767;
       41     6832        %SUB SPREL_LOWER_LIMIT = -64;
       42     6833        %SUB SPREL_UPPER_LIMIT = 63;
       43     6834        %SUB SV_LOWER_LIMIT    = -128;
       44     6835        %SUB SV_UPPER_LIMIT    = 127;
       45     6836        %SUB SHIFT_SINGLE_LIMIT = 15;
       46     6837        %SUB SHIFT_DOUBLE_LIMIT = 31;
       47     6838                                                /**/
       48     6839                                                /**/
       49     6840        /*M*     INITIALIZED DATA REQUIRED FOR L6 INSTRUCTION BREAK-OUT*/
       50     6841    1   DCL NIL$ PTR CONSTANT INIT(ADDR(NIL));
       51     6842    1   DCL INSTRUCTIONS(0:511) CHAR(8) SYMREF READONLY;
       52     6843    1   DCL INSTRUCTION_TYPE(0:511) UBIN SYMREF READONLY;
       53     6844    1   DCL GENERIC_INSTRUCTIONS(0:127) CHAR(4) CONSTANT INIT(
       54     6845    1      'HLT ','MCL ','BRK ','RTT ','RTCN','RTCF','WDTN','WDTF',
       55     6846    1      'MMM ','DC  ','ASD ','VLD ','LRDB','SRDB','DC  ','DC  ',
       56     6847    1      '--- ','RSC ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       57     6848    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       58     6849    1      'VRF ','ALR ','ACM ','MAT ','AME ','DMC ','DME ','CBD ',
       59     6850    1      'SRH ','DML ','CDB ','DDV ','DAD ','DSB ','DSH ','DCM ',
       60     6851    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       61     6852    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       62     6853    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       63     6854    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       64     6855    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       65     6856    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       66     6857    1      'DQA ','QOT ','DQH ','QOH ','DC  ','DC  ','DC  ','DC  ',
       67     6858    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       68     6859    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       69     6860    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ');
       70     6861    1   DCL GENERIC_TYPE(0:127) UBIN SYMREF READONLY;
       71     6862    1   DCL SHIFT_INSTRUCTIONS(0:55) CHAR(6) SYMREF READONLY;
       72     6863    1   DCL SHIFT_D_INSTRUCTIONS(0:55) CHAR(6) SYMREF READONLY;
       73     6864    1   DCL SPECIAL_INSTRUCTIONS(0:3) CHAR(4) CONSTANT INIT(
       74     6865    1      'ACQ ','LDT ','RLQ ','STT ');
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:3    
       75     6866    1   DCL REGISTERS(0:20) CHAR(3) CONSTANT INIT(
       76     6867    1       'X', ',B1', ',B2', ',B3', ',B4', ',B5', ',B6', ',B7',
       77     6868    1            ',R1', ',R2', ',R3', ',R4', ',R5', ',R6', ',R7',
       78     6869    1            ',M1', ',M2', ',M3', ',S1', ',S2', ',S3' );
       79     6870    1   DCL INSTR UBIN(16) UNAL;
       80     6871    1   DCL 1 INSTRUCTION REDEF INSTR,
       81     6872    1         2 INDEXX UBIN(9) UNAL,            /* opcode register etc.               */
       82     6873    1         2 FUNCTION UBIN(7) UNAL;          /* function for generics              */
       83     6874                                                /**/
       84     6875    1   DCL 1 SV REDEF INSTR,                   /* short value instrctions            */
       85     6876    1         2 * UBIN(8) UNAL,                 /* short value opcode                 */
       86     6877    1         2 VALUE SBIN(8) UNAL;             /* immediate value                    */
       87     6878                                                /**/
       88     6879    1   DCL 1 ADDR_SYL REDEF INSTR,             /* address syllable                   */
       89     6880    1         2 * UBIN(9) UNAL,
       90     6881    1         2 PHRASE UBIN(7) UNAL,            /* address sysllable                  */
       91     6882    1         2 FRAME REDEF PHRASE UNAL,
       92     6883    1           3 M_FIELD UBIN(3) UNAL,         /* M field in addr syl                */
       93     6884    1           3 INDIRECT_FIELD UBIN(1) UNAL,  /* @ field in addr syl                */
       94     6885    1           3 N_FIELD UBIN(3) UNAL;         /* N field in addr syl                */
       95     6886                                                /**/
       96     6887    1   DCL 1 SHIFT_SINGLE REDEF INSTR,         /* single word shift                  */
       97     6888    1         2 SHIFT_OP UBIN(12) UNAL,
       98     6889    1         2 VALUE UBIN(4) UNAL;             /* shift count & direction            */
       99     6890                                                /**/
      100     6891    1   DCL 1 SHIFT_DOUBLE REDEF INSTR,         /* double word shift                  */
      101     6892    1         2 SHIFT_OP UBIN(11) UNAL,
      102     6893    1         2 VALUE UBIN(5) UNAL;             /* shift count and direction          */
      103     6894                                                /**/
      104     6895    1   DCL 1 BRANCH_FRAME REDEF INSTR,         /* branch instruction                 */
      105     6896    1         2 * UBIN(9) UNAL,
      106     6897    1         2 VALUE SBIN(7) UNAL;             /* displacement                       */
      107     6898                                                /**/
      108     6899    1   DCL 1 FORM REDEF INSTR,
      109     6900    1         2 HEX1 UBIN(4) UNAL,         /* structure useful for shift and others   */
      110     6901    1         2 HEX2 UBIN(4) UNAL,
      111     6902    1         2 HEX3 UBIN(4) UNAL,
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:4    
      112     6903    1         2 HEX3R REDEF HEX3 UNAL,
      113     6904    1           3 B1 UBIN(1) UNAL,
      114     6905    1           3 * UBIN(3) UNAL,
      115     6906    1         2 HEX3S REDEF HEX3 UNAL,
      116     6907    1           3 TYPE UBIN(3) UNAL,            /* shift type                         */
      117     6908    1           3 * UBIN(1) UNAL,
      118     6909    1         2 HEX4 UBIN(4) UNAL;
      119     6910                                                /**/
      120     6911    1   DCL 1 RLQ_INSTR REDEF INSTR,
      121     6912    1         2 RLQ_INDICATOR UBIN(13) UNAL,    /* Rlq indicator must = 0             */
      122     6913    1         2 REGISTER UBIN(3) UNAL;          /* B reg rlq affects                  */
      123     6914                                                /**/
      124     6915    1   DCL 1 LDT_INSTR REDEF INSTR,
      125     6916    1         2 LDT_INDICATOR1 UBIN(9) UNAL,    /* Ldt INDICATOR1 must = 0            */
      126     6917    1         2 REGISTER UBIN(3) UNAL,          /* B reg ldt affects                  */
      127     6918    1         2 LDT_INDICATOR2 UBIN(4) UNAL;    /* Also must = 0                      */
      128     6919                                                /**/
      129     6920    1   DCL 1 ACQ_INSTR REDEF INSTR,
      130     6921    1         2 ACQ_INDICATOR1 UBIN(9) UNAL,    /* Must = 0                           */
      131     6922    1         2 ACQ_R_REG UBIN(3) UNAL,         /* R reg acq affects                  */
      132     6923    1         2 ACQ_INDICATOR2 UBIN(1) UNAL,    /* Also must = 0                      */
      133     6924    1         2 ACQ_B_REG UBIN(3) UNAL;         /* B reg acq affects                  */
      134     6925    1   DCL 1 STT_INSTR REDEF INSTR,
      135     6926    1         2 STT_INDICATOR UBIN(16) UNAL;    /* STT indicator must = 0             */
      136     6927                                                /**/
      137     6928    1   DCL INDEX_FLAG BIT(1);
      138     6929    1   DCL I_O_INSTR_FLAG BIT(1);
      139     6930    1   DCL IOLD_INSTR_FLAG BIT(1);
      140     6931    1   DCL ADDR_MODE UBIN WORD;
      141     6932    1   DCL BASED_PTR PTR BASED;
      142     6933    1   DCL NODE$ PTR;                          /* Ptr to things of interest          */
      143     6934    1   DCL 1 ASSMBLD_INSTR,
      144     6935    1         2 SIZE UBIN WORD,                 /* Number of words assembled          */
      145     6936    1         2 OPS(0:15) UBIN WORD;            /* Those words assembled              */
      146     6937    1   DCL 1 TASSMBLD_INSTR,
      147     6938    1         2 SIZE UBIN WORD,
      148     6939    1         2 OPS(0:15) UBIN WORD;            /* Those words assembled              */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:5    
      149     6940                                                /**/
      150     6941    1   DCL MNEMONIC_PTR$ PTR;                  /* Pointer to mnemonic field          */
      151     6942    1   DCL MASK_PTR$ PTR;                      /* Pointer to optional mask           */
      152     6943    1   DCL REGISTER_CODE UBIN WORD;            /* The register number                */
      153     6944    1   DCL I UBIN WORD;                        /* Counter                            */
      154     6945    1   DCL J UBIN WORD;                        /* Counter                            */
      155     6946    1   DCL SUBLK_NUMBER UBIN WORD;             /* Current sub block operating on     */
      156     6947    1   DCL ODD_INST_CODE BIT(1); /* Flag for any instruction of non standard type    */
      157     6948    1   DCL TRUE BIT(1) CONSTANT INIT('1'B);
      158     6949    1   DCL FALSE BIT(1) CONSTANT INIT('0'B); /* True and false (positive true logic ) */
      159     6950    1   DCL SCR_BUFFER CHAR(16);                /* Scratch buffer                     */
      160     6951    1   DCL INSTR_TYPE UBIN WORD;               /* General instruction type           */
      161     6952    1   DCL NUMBER_SUBLKS UBIN WORD;            /* Number of sublks parser found      */
      162     6953    1   DCL MNEMONIC_LENGTH UBIN WORD;     /* Length of mnemonic length + register    */
      163     6954    1   DCL GENERIC_CODE UBIN WORD;             /* Type of generic instr              */
      164     6955    1   DCL SPECIAL_CODE UBIN WORD;             /* Type of special case instr         */
      165     6956    1   DCL OPCODE UBIN WORD;                   /* The opcode for instr               */
      166     6957    1   DCL MASK_VALUE UBIN WORD;               /* Value of themask for instructions  */
      167     6958    1   DCL MASK_THERE BIT(1);                  /* Flag indicating presence of mask   */
      168     6959                                                /**/
      169     6960    1   DCL FCG UBIN WORD CONSTANT INIT( BITBIN('041432'O ) );
              6960            /* Functional code group constant I.E. -dlz- */
      170     6961    1   DCL DDE$ERROR ENTRY;
      171     6962
      172     6963    1   DCL CURRENT_ADDRESS UBIN WORD;     /* Machine address of cell operated  on    */
      173     6964    1   DCL TEST_OP BIT(1) ALIGNED;
      174     6965    1   DCL TEST_PTR$ PTR;
      175     6966    1   DCL BRANCH_FLAG BIT(1);  /* Indicator for branch instr addr syl formation     */
      176     6967        /**/
      177     6968        /*  Clear/initialize the world  */
      178     6969        /**/
      179     6970    1           IF TEST_OP
      180     6971    1           THEN NODE$ = TEST_PTR$;
      181     6972    2           ELSE DO;
      182     6973    2                NODE$ = S_D.DESC$ -> BASED_PTR;
      183     6974    2                S_D.DESC$ = PINCRW ( S_D.DESC$ , 1 );
      184     6975    2           END;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:6    
      185     6976    1           SUBLK_NUMBER = 0;
      186     6977    1           MASK_THERE = FALSE;
      187     6978    1           INDEX_FLAG = FALSE;
      188     6979    1           ASSMBLD_INSTR = '0'B;
      189     6980    1           INSTR = 0;
      190     6981    1           BRANCH_FLAG = FALSE;
      191     6982    1           NUMBER_SUBLKS = NODE$ -> OUT$BLK.NSUBLKS;
      192     6983    1           MNEMONIC_PTR$ = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER);
      193     6984    1           MNEMONIC_LENGTH = MNEMONIC_PTR$ -> OUT$SYM.COUNT;
      194     6985    1           SCR_BUFFER = MNEMONIC_PTR$ -> OUT$SYM.TEXT;
      195     6986    1           SUBLK_NUMBER = SUBLK_NUMBER + 1;
      196     6987        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:7    
      197     6988        /**/
      198     6989        /*  If the instruction mnemonic was followed by ',reg'  glue the              */
      199     6990        /*  ',reg' back onto the mnemonic and eat the parse block for 'reg'.          */
      200     6991        /**/
      201     6992    2           IF NODE$ -> OUT$BLK.CODE = C@INST THEN DO;
              6992                    /* C@INST  Standard instruction         */
      202     6993    2                REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;
      203     6994    2                CALL INSERT( SCR_BUFFER, MNEMONIC_LENGTH,, REGISTERS( REGISTER_CODE) );
      204     6995    2                MNEMONIC_LENGTH = MNEMONIC_LENGTH + 3;
      205     6996    2                SUBLK_NUMBER = SUBLK_NUMBER + 1;
      206     6997    2           END;
      207     6998    1           CALL SEARCH_OP_TABLE;
      208     6999    1           IF TEST_OP AND INSTR_TYPE ~= 0 THEN RETURN;
      209     7000    1           INSTRUCTION.INDEXX = OPCODE;
      210     7001    1           ADDR_MODE = 999;
      211     7002        /**/
      212     7003        /*  If a mask exists, munge the mask and eat the parse block for mask.        */
      213     7004        /**/
      214     7005    1           IF SUBLK_NUMBER < NUMBER_SUBLKS THEN
      215     7006    1                IF NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE = C@MASK THEN
              7006                         /* C@MASK */
      216     7007    1                     CALL MASK_ENCODE ALTRET (BAD_INST);
      217     7008                                           /* There's something there and it's a mask */
      218     7009    2   TYPE_ENCODE : DO CASE( INSTR_TYPE );
      219     7010                                                /**/
      220     7011    2            CASE( 0 );                     /* Undefined opcode                   */
      221     7012    2              S_D.ERROR = E@NO_INST;
      222     7013    2              ASSMBLD_INSTR.SIZE = 0;
      223     7014    2              ALTRETURN;
      224     7015                                                /**/
      225     7016    2            CASE(1);                       /* Generic or commercial instr        */
      226     7017    2              CALL GENERIC_ENCODE ALTRET (BAD_INST);
      227     7018                                                /**/
      228     7019                                                /**/
      229     7020                                                /**/
      230     7021    2            CASE(2,                        /* branch on indicators except  b     */
      231     7022    2                3,                         /* B instruction                      */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:8    
      232     7023    2                4,                         /* branch on register                 */
      233     7024    2                6,                         /* commercial set branch              */
      234     7025    2                7,                         /* branch on scientific register      */
      235     7026    2                22);                       /* scientific branch on indicators    */
      236     7027    2              CALL BRANCH_ENCODE ALTRET (BAD_INST);
      237     7028                                                /**/
      238     7029    2            CASE(5);                       /* short value immediate              */
      239     7030    2              CALL SHORT_VALUE_ENCODE ALTRET ( BAD_INST );
      240     7031                                                /**/
      241     7032    2            CASE(8, 10, 12, 14, 16, 18, 20); /* shift R1-R7                   */
      242     7033    2              CALL SHIFT_SINGLE_ENCODE ALTRET ( BAD_INST );
      243     7034                                                /**/
      244     7035    2            CASE(9, 11, 13, 15, 17, 19, 21); /* double shift R1-R7            */
      245     7036    2              CALL SHIFT_DOUBLE_ENCODE ALTRET (BAD_INST);
      246     7037                                                /**/
      247     7038    2            CASE(23);                      /* Io or ioh                          */
      248     7039    2              I_O_INSTR_FLAG = '1'B;
      249     7040    2              CALL I_O_ENCODE ALTRET(BAD_INST);
      250     7041    2              I_O_INSTR_FLAG = '0'B;
      251     7042                                                /**/
      252     7043    2            CASE(24);                      /* Iold                               */
      253     7044    2              IOLD_INSTR_FLAG = '1'B;
      254     7045    2              I_O_INSTR_FLAG = '1'B;
      255     7046    2              CALL I_O_ENCODE ALTRET(BAD_INST);
      256     7047    2              IOLD_INSTR_FLAG = '0'B;
      257     7048    2              I_O_INSTR_FLAG = '0'B;
      258     7049                                                /**/
      259     7050    2            CASE(25, 26 ,37);         /* standard single operand instruction     */
      260     7051    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      261     7052                                                /**/
      262     7053    2            CASE(27);                      /* 32 bit imo single operand          */
      263     7054    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      264     7055                                                /**/
      265     7056    2            CASE(28);                      /* bit type operation                 */
      266     7057    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      267     7058    3              IF INDEX_FLAG THEN DO;       /* check to see if mask present       */
      268     7059    3                   CALL MASK_PRESENT ALTRET (BAD_INST);
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:9    
              7059                            /* mask there                     */
      269     7060    3              END;
      270     7061    3              ELSE DO;
      271     7062    3                   IF MASK_THERE
      272     7063    4                   THEN DO;
      273     7064    4                        S_D.ERROR = E@MASKNOTALLOWED; /* MASKNOTALLOWED */
      274     7065    4                        ALTRETURN;
      275     7066    4                   END;
      276     7067    3              END;                         /* no mask                            */
      277     7068                                                /**/
      278     7069    2            CASE(29);                      /* save and restore, mask required    */
      279     7070    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      280     7071    2              CALL MASK_PRESENT ALTRET (BAD_INST);
      281     7072                                                /**/
      282     7073    2            CASE(30);                      /* M register double operand          */
      283     7074    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      284     7075                                                /**/
      285     7076    2            CASE(31);                      /* standard double operand            */
      286     7077    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      287     7078                                                /**/
      288     7079    2            CASE(32);                      /* Lnj instruction                    */
      289     7080    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      290     7081                                                /**/
      291     7082    2            CASE(33);                      /* base register double operand       */
      292     7083    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      293     7084                                                /**/
      294     7085    2            CASE(34);                      /* scientific double operand          */
      295     7086    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      296     7087                                                /**/
      297     7088    2            CASE(35);                      /* scientific double operand          */
      298     7089    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      299     7090                                                /**/
      300     7091    2            CASE(36);                      /* double operand with required mask  */
      301     7092    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);
      302     7093    2              CALL MASK_PRESENT ALTRET (BAD_INST);
      303     7094                                                /**/
      304     7095    2            CASE(38);                      /* SPECIAL CASE instructions          */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:10   
      305     7096    2              CALL SPECIAL_ENCODE ALTRET(BAD_INST);
      306     7097    2           END TYPE_ENCODE;
      307     7098    1   A_OK:   ;
      308     7099    2           DO I = 0 TO ASSMBLD_INSTR.SIZE - 1;
      309     7100    2                ASSMBLD_INSTR.OPS ( I ) = MOD ( ASSMBLD_INSTR.OPS ( I ), 65536 );
      310     7101    2           END;
      311     7102    1           RETURN;
      312     7103                                                /**/
      313     7104    1   BAD_INST : ASSMBLD_INSTR.SIZE = 0;
      314     7105    1           ALTRETURN;
      315     7106        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:11   
      316     7107    1   BRANCH_ENCODE: PROC ALTRET;
      317     7108                                                /**/
      318     7109    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT);
      319     7110    3           ELSE DO;
      320     7111    3                ADDR_MODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;
      321     7112    3                BRANCH_FLAG = TRUE;
      322     7113                                                /* Is addr mode valid ???             */
      323     7114    3                IF ADDR_MODE = 22          /* Direct addresssing                 */
      324     7115    3                  OR ADDR_MODE = 18        /* Short program relative           */
      325     7116    3                  OR ADDR_MODE = 17        /* Program relative                 */
      326     7117    3                THEN CALL ENCODE_ADDR_SYL ALTRET ( ALT );
      327     7118                                                /**/
      328     7119    4                ELSE DO;                   /* Addressing mode was not valid      */
      329     7120    4                     S_D.ERROR = E@BAD_ADDR_MODE;
      330     7121    4                     ALTRETURN;
      331     7122    4                END;
      332     7123                                                /**/
      333     7124    3           END;
      334     7125    2           RETURN;
      335     7126    2   ALT:    ALTRETURN;
      336     7127    2   END BRANCH_ENCODE;
      337     7128        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:12   
      338     7129    1   SHORT_VALUE_ENCODE: PROC ALTRET;
      339     7130    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      340     7131    2   DCL BIN_VAL SBIN WORD;
      341     7132    2   DCL 1 TXT_VAL REDEF BIN_VAL,
      342     7133    2         2 HI SBIN(12) UNAL,
      343     7134    2         2 LO BIT(24);
      344     7135                                                /**/
      345     7136    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT2);
      346     7137    3           ELSE DO;
      347     7138    3                ADDR_MODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;
      348     7139    3                IF ADDR_MODE = C@ARG_BR
      349     7140    4                THEN DO;
      350     7141    4                     S_D.ERROR = E@BAD_ADDR_MODE;
      351     7142    4                     ALTRETURN;
      352     7143    4                END;
      353     7144    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      354     7145    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      355     7146    3                IF S_D.SDOT AND TXT_VAL.LO = '202020'X
      356     7147    3                THEN BIN_VAL = TXT_VAL.HI;
      357     7148    3                SV.VALUE = BIN_VAL;
      358     7149    3                IF SV.VALUE ~= BIN_VAL
      359     7150    4                THEN DO; /* Value in operand field exdeeds range for
      360     7151                                            this instruction */
      361     7152    4                     S_D.ERROR = E@BAD_VALUE;
      362     7153    4                     SV.VALUE = 0;
      363     7154    4                     ALTRETURN;
      364     7155    4                END;
      365     7156    3                ASSMBLD_INSTR.OPS(0) = INSTR;
      366     7157    3                ASSMBLD_INSTR.SIZE = 1;
      367     7158    3           END;
      368     7159    2           RETURN;
      369     7160                                                /**/
      370     7161    2   BAD_VALUE : SV.VALUE = 0;
      371     7162    2   ALT2:   ALTRETURN;
      372     7163    2   END SHORT_VALUE_ENCODE;
      373     7164        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:13   
      374     7165    1   SHIFT_SINGLE_ENCODE: PROC ALTRET;
      375     7166    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      376     7167    2   DCL BIN_VAL SBIN WORD;
      377     7168                                                /**/
      378     7169    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT3);
      379     7170    3           ELSE DO;
      380     7171    3                SHIFT_SINGLE.SHIFT_OP = OPCODE;
      381     7172    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      382     7173    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      383     7174    3                SHIFT_SINGLE.VALUE = BIN_VAL;
      384     7175    4                IF SHIFT_SINGLE.VALUE ~= BIN_VAL THEN DO;
      385     7176    4                     S_D.ERROR = E@BAD_VALUE;
      386     7177    4                     SHIFT_SINGLE.VALUE = 0;
      387     7178    4                     ALTRETURN;
      388     7179    4                END;
      389     7180                                                /**/
      390     7181    3                ASSMBLD_INSTR.OPS(0) = INSTR;
      391     7182    3                ASSMBLD_INSTR.SIZE = 1;
      392     7183    3           END;
      393     7184    2           RETURN;
      394     7185                                                /**/
      395     7186    2   BAD_VALUE : SHIFT_SINGLE.VALUE = 0;     /* Bogus shift count                  */
      396     7187    2           ASSMBLD_INSTR.OPS(0) = INSTR;
      397     7188    2   ALT3:   ALTRETURN;
      398     7189    2   END SHIFT_SINGLE_ENCODE;
      399     7190        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:14   
      400     7191    1   SHIFT_DOUBLE_ENCODE : PROC ALTRET;
      401     7192    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      402     7193    2   DCL BIN_VAL SBIN WORD;
      403     7194                                                /**/
      404     7195    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT4);
      405     7196    3           ELSE DO;
      406     7197    3                SHIFT_SINGLE.SHIFT_OP = OPCODE;
      407     7198    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      408     7199    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      409     7200    3                SHIFT_DOUBLE.VALUE = BIN_VAL;
      410     7201    4                IF SHIFT_DOUBLE.VALUE ~= BIN_VAL THEN DO;
      411     7202    4                     S_D.ERROR = E@BAD_VALUE;
      412     7203    4                     SHIFT_DOUBLE.VALUE = 0;
      413     7204    4                     ALTRETURN;
      414     7205    4                END;
      415     7206                                                /**/
      416     7207    3                ASSMBLD_INSTR.OPS(0) = INSTR;
      417     7208    3                ASSMBLD_INSTR.SIZE = 1;
      418     7209    3           END;
      419     7210    2           RETURN;
      420     7211                                                /**/
      421     7212    2   BAD_VALUE : SHIFT_DOUBLE.VALUE = 0;     /* Bogus shift count                  */
      422     7213    2   ALT4:   ALTRETURN;
      423     7214    2   END SHIFT_DOUBLE_ENCODE;
      424     7215        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:15   
      425     7216    1   I_O_ENCODE: PROC ALTRET;
      426     7217    2           IF IOLD_INSTR_FLAG AND
      427     7218    2             NUMBER_SUBLKS ~= 4
      428     7219    2           THEN ALTRETURN;
      429     7220    2           IF NOT IOLD_INSTR_FLAG AND
      430     7221    2             NUMBER_SUBLKS ~= 3
      431     7222    2           THEN ALTRETURN;
      432     7223    2           TASSMBLD_INSTR.SIZE = 0;
      433     7224    3           DO I = 0 TO NUMBER_SUBLKS - 2;
      434     7225    3                CALL ENCODE_ADDR_SYL ALTRET(ARET);
      435     7226    3                TASSMBLD_INSTR.OPS(I) = INSTR;
      436     7227    3                TASSMBLD_INSTR.SIZE = TASSMBLD_INSTR.SIZE + 1;
      437     7228    3                INSTR = 0;
      438     7229    3                SUBLK_NUMBER = SUBLK_NUMBER + 1;
      439     7230    3           END;
      440     7231    2           ASSMBLD_INSTR.SIZE = TASSMBLD_INSTR.SIZE;
      441     7232    3           DO I = 0 TO ASSMBLD_INSTR.SIZE-1;
      442     7233    3                ASSMBLD_INSTR.OPS(I) = TASSMBLD_INSTR.OPS(I);
      443     7234    3           END;
      444     7235    2           RETURN;
      445     7236    2   ARET:   ALTRETURN;
      446     7237    2   END I_O_ENCODE;
      447     7238        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:16   
      448     7239    1   ENCODE_ADDR_SYL: PROC ALTRET;
      449     7240                                                /**/
      450     7241    2   DCL OPERAND_CODE UBIN WORD;
      451     7242    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      452     7243    2   DCL BIN_VAL SBIN WORD;
      453     7244    2   DCL 1 HEX_STRING,
      454     7245    2         2 LEN UBIN BYTE UNAL,
      455     7246    2         2 TEXT CHAR(16) UNAL;
      456     7247                                                /**/
      457     7248    2   DCL VALUE UBIN WORD;
      458     7249    2   DCL ADDRESS UBIN WORD;
      459     7250    2   DCL SADDRESS REDEF ADDRESS SBIN;
      460     7251    2   DCL 1 R_ADDRESS REDEF ADDRESS,
      461     7252    2         2 * UBIN(16) UNAL,
      462     7253    2         2 HIGH_ORDER_BITS UBIN(4) UNAL,
      463     7254    2         2 LOW_ORDER_BITS UBIN(16) UNAL;
      464     7255                                                /**/
      465     7256    2   DCL 1 R_ADDRESS_32BITS REDEF ADDRESS,
      466     7257    2         2 * UBIN(4) UNAL,
      467     7258    2         2 HIGH_ORDER_BITS UBIN(16) UNAL,
      468     7259    2         2 LOW_ORDER_BITS UBIN(16) UNAL;
      469     7260                                                /**/
      470     7261    2   DCL SAVED_NODE$ PTR;
      471     7262    2   DCL DISPLACEMENT SBIN WORD;
      472     7263                                                /**/
      473     7264    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT5);
      474     7265    2           OPERAND_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;
      475     7266    2           SAVED_NODE$ = NODE$;
      476     7267    3   ENCODE : DO CASE( OPERAND_CODE );
      477     7268                                                /**/
      478     7269    3            CASE(3);             /* Based indexed autodec or ,B_REG,R_REG,push */
      479     7270    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      480     7271    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      481     7272    4              IF REGISTER_CODE <= 3 THEN DO; /* Must be <= 3 for it to be a push */
      482     7273    4                   ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      483     7274    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      484     7275    4                   REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:17   
      485     7276    4                     -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
              7276                              /* R reg of the instruction */
      486     7277    4                   REGISTER_CODE = REGISTER_CODE - 3;
      487     7278    5                   IF REGISTER_CODE <=7 THEN DO;
      488     7279    5                        ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;
      489     7280    5                        ASSMBLD_INSTR.SIZE = 1;
      490     7281    5                        ASSMBLD_INSTR.OPS(0) = INSTR;
      491     7282    5                   END;
      492     7283    4                   ELSE ALTRETURN;
      493     7284    4              END;
      494     7285    3              ELSE ALTRETURN;
      495     7286                                                /**/
      496     7287                                                /**/
      497     7288                                                /**/
      498     7289    3            CASE(4);                  /* Based indexed autoinc or ,bn,rn,pull    */
      499     7290    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      500     7291    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      501     7292    4              IF REGISTER_CODE <= 3 THEN DO; /* Also must be <= 3 */
      502     7293    4                   ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE + 4;
              7293                            /* N field > 4 makes it pull */
      503     7294    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      504     7295    4                   REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      505     7296    4                     -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
              7296                              /* R reg of the instruction */
      506     7297    4                   REGISTER_CODE = REGISTER_CODE - 3;
      507     7298    5                   IF REGISTER_CODE <=7 THEN DO;
      508     7299    5                        ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;
      509     7300    5                        ASSMBLD_INSTR.SIZE = 1;
      510     7301    5                        ASSMBLD_INSTR.OPS(0) = INSTR;
      511     7302    5                   END;
      512     7303    4                   ELSE ALTRETURN;
      513     7304    4              END;
      514     7305    3              ELSE ALTRETURN;
      515     7306                                                /**/
      516     7307    3            CASE(5);                       /* Indirect indexed or *EXP,R_REG     */
      517     7308    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      518     7309    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:18   
      519     7310    3              ADDRESS = BIN_VAL;
      520     7311    3              ADDR_SYL.FRAME.N_FIELD = 0;
      521     7312    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      522     7313    3              ADDR_SYL.FRAME.M_FIELD = SAVED_NODE$
      523     7314    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -
              7314                         7;
      524     7315    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      525     7316    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;
      526     7317    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;
      527     7318    3              ASSMBLD_INSTR.SIZE = 3;
      528     7319                                                /**/
      529     7320    3            CASE(6);                       /* Based indexed or ,B_REG,R_REG      */
      530     7321    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      531     7322    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      532     7323    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      533     7324    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      534     7325    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      535     7326    3                -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE; /* R reg of the instruction */
      536     7327    3              REGISTER_CODE = REGISTER_CODE - 7;
      537     7328    4              IF REGISTER_CODE <=3 THEN DO;
      538     7329    4                   ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;
      539     7330    4                   ASSMBLD_INSTR.SIZE = 1;
      540     7331    4                   ASSMBLD_INSTR.OPS(0) = INSTR;
      541     7332    4              END;
      542     7333    3              ELSE ALTRETURN;
      543     7334                                                /**/
      544     7335    3            CASE(7);             /* Based indirect indexed or *,B_REG,_R_REG */
      545     7336    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      546     7337    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      547     7338    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      548     7339    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      549     7340    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      550     7341    3                -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE; /* R reg of the instruction */
      551     7342    3              REGISTER_CODE = REGISTER_CODE - 7;
      552     7343    4              IF REGISTER_CODE <= 3 THEN DO;
      553     7344    4                   ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;
      554     7345    4                   ASSMBLD_INSTR.SIZE = 1;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:19   
      555     7346    4                   ASSMBLD_INSTR.OPS(0) = INSTR;
      556     7347    4              END;
      557     7348    3              ELSE ALTRETURN;
      558     7349                                                /**/
      559     7350    3            CASE(8);                  /* Base relative indirect or *EXP,B_REG    */
      560     7351    3              INDEX_FLAG = TRUE;
      561     7352    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      562     7353    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      563     7354    3              ADDRESS = BIN_VAL;
      564     7355    3              ADDR_SYL.FRAME.M_FIELD = 4;
      565     7356    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      566     7357    3              ADDR_SYL.FRAME.N_FIELD = SAVED_NODE$
      567     7358    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
      568     7359    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      569     7360    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;
      570     7361    3              ASSMBLD_INSTR.SIZE = 2;
      571     7362                                                /**/
      572     7363    3            CASE(9);                       /* Indexed or exp, or EXP,R_REG       */
      573     7364    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      574     7365    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      575     7366    3              ADDRESS = BIN_VAL;
      576     7367    3              ADDR_SYL.FRAME.N_FIELD = 0;
      577     7368    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      578     7369    3              ADDR_SYL.FRAME.M_FIELD = SAVED_NODE$
      579     7370    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -
              7370                         7;
      580     7371    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      581     7372    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;
      582     7373    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;
      583     7374    3              ASSMBLD_INSTR.SIZE = 3;
      584     7375                                                /**/
      585     7376    3            CASE(10);                      /* Based autodec, or ,B_REG,PUSH      */
      586     7377    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      587     7378    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      588     7379    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      589     7380    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      590     7381    3              ADDR_SYL.FRAME.M_FIELD = 6;  /* 6 makes it a push  */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:20   
      591     7382    3              ASSMBLD_INSTR.SIZE = 1;
      592     7383    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      593     7384                                                /**/
      594     7385    3            CASE(11);                      /* Based autoinc or ,B_REG,PULL       */
      595     7386    3              INDEX_FLAG = TRUE;
      596     7387    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      597     7388    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      598     7389    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      599     7390    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      600     7391    3              ADDR_SYL.FRAME.M_FIELD = 7;  /* 7 makes it a pull  */
      601     7392    3              ASSMBLD_INSTR.SIZE = 1;
      602     7393    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      603     7394                                                /**/
      604     7395    3            CASE(12);                      /* Rel indirect or *Exp,prel          */
      605     7396    3              INDEX_FLAG = TRUE;
      606     7397    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      607     7398    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      608     7399    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS - 1;
      609     7400    4              IF DISPLACEMENT < PREL_LOWER_LIMIT OR DISPLACEMENT > PREL_UPPER_LIMIT
              7400                       THEN DO;
      610     7401    4   BAD_VALUE:      ;
      611     7402    4                   S_D.ERROR = E@BAD_VALUE;
      612     7403    4                   ALTRETURN;
      613     7404    4              END;
      614     7405    3              ADDR_SYL.FRAME.M_FIELD = 4;
      615     7406    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      616     7407    3              ADDR_SYL.FRAME.N_FIELD = 0;
      617     7408    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      618     7409    3              ASSMBLD_INSTR.OPS(1) = DISPLACEMENT;
      619     7410    3              ASSMBLD_INSTR.SIZE = 2;
      620     7411                                                /**/
      621     7412    3            CASE(13);                      /* Base relative or EXP,B_REG         */
      622     7413    3              INDEX_FLAG = TRUE;
      623     7414    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      624     7415    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      625     7416    3              ADDRESS = BIN_VAL;
      626     7417    3              ADDR_SYL.FRAME.M_FIELD = 4;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:21   
      627     7418    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      628     7419    3              ADDR_SYL.FRAME.N_FIELD = SAVED_NODE$
      629     7420    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
      630     7421    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      631     7422    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;
      632     7423    3              ASSMBLD_INSTR.SIZE = 2;
      633     7424                                                /**/
      634     7425    3            CASE(14);                      /* Imo value or hex,imo               */
      635     7426    3              INDEX_FLAG = TRUE;
      636     7427    3              ADDR_SYL.FRAME.M_FIELD = 7;
      637     7428    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      638     7429    3              ADDR_SYL.FRAME.N_FIELD = 0;
      639     7430    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      640     7431    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      641     7432    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      642     7433    3              ADDRESS = BIN_VAL;
      643     7434    4              DO CASE( INSTR_TYPE );
      644     7435                                                /**/
      645     7436    4               CASE ( 27 );                /* 32 bit imo                    */
      646     7437    4                 ASSMBLD_INSTR.OPS(1) = R_ADDRESS_32BITS.HIGH_ORDER_BITS;
      647     7438    4                 ASSMBLD_INSTR.OPS(2) = R_ADDRESS_32BITS.LOW_ORDER_BITS;
      648     7439    4                 ASSMBLD_INSTR.SIZE = 3;
      649     7440                                                /**/
      650     7441    4               CASE( 33 );                 /* 20 bit imo                     */
      651     7442    4                 IF I = 439 OR I = 311 OR I = 343 OR I = 375 OR
      652     7443    4                   I = 407 OR I = 471 OR I = 503
      653     7444    4                 THEN GOTO SINGLE_OPERAND; /* LAB,Bn hex,IMO - single operand */
      654     7445    4                 ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;
      655     7446    4                 ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;
      656     7447    4                 ASSMBLD_INSTR.SIZE = 3;
      657     7448                                                /**/
      658     7449    4               CASE ( ELSE );              /* 16 bit imo                  */
      659     7450    4   SINGLE_OPERAND:
      660     7451    4                 IF S_D.SDOT AND R_ADDRESS.LOW_ORDER_BITS =
      661     7452    4                   %BITBIN('2020'X)
      662     7453    4                 THEN ADDRESS = ADDRESS / 65536;
      663     7454    4                 IF SADDRESS < -32768
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:22   
      664     7455    4                   OR SADDRESS > 65535 THEN GOTO BAD_VALUE;
      665     7456    4                 ASSMBLD_INSTR.OPS(1) = MOD ( ADDRESS, 65536);
      666     7457    4                 ASSMBLD_INSTR.SIZE = 2;
      667     7458    4              END;
      668     7459                                                /**/
      669     7460    3            CASE(15);                      /* Based or ,B_REG                    */
      670     7461    3              INDEX_FLAG = TRUE;
      671     7462    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      672     7463    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      673     7464    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      674     7465    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      675     7466    3              ADDR_SYL.FRAME.M_FIELD = 0;  /* 0 makes it a based */
      676     7467    3              ASSMBLD_INSTR.SIZE = 1;
      677     7468    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      678     7469                                                /**/
      679     7470    3            CASE(16);                      /* Indirect based or *,B_REG          */
      680     7471    3              INDEX_FLAG = TRUE;
      681     7472    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      682     7473    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      683     7474    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      684     7475    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      685     7476    3              ADDR_SYL.FRAME.M_FIELD = 0;  /* 0 makes it a based */
      686     7477    3              ASSMBLD_INSTR.SIZE = 1;
      687     7478    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      688     7479                                                /**/
      689     7480    3            CASE(17);                      /* Rel direct or exp,prel             */
      690     7481    3              INDEX_FLAG = TRUE;
      691     7482    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      692     7483    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      693     7484    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS - 1;
      694     7485    4              IF DISPLACEMENT < PREL_LOWER_LIMIT OR DISPLACEMENT > PREL_UPPER_LIMIT
              7485                       THEN DO;
      695     7486    4                   S_D.ERROR = E@BAD_VALUE;
      696     7487    4                   ALTRETURN;
      697     7488    4              END;
      698     7489    3              IF BRANCH_FLAG THEN BRANCH_FRAME.VALUE = 1;
      699     7490    4              ELSE DO;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:23   
      700     7491    4                   ADDR_SYL.FRAME.M_FIELD = 4;
      701     7492    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      702     7493    4                   ADDR_SYL.FRAME.N_FIELD = 0;
      703     7494    4              END;
      704     7495    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      705     7496    3              ASSMBLD_INSTR.OPS(1) = DISPLACEMENT;
      706     7497    3              ASSMBLD_INSTR.SIZE = 2;
      707     7498                                                /**/
      708     7499    3            CASE(18);                      /* Short prel or exp,sprel            */
      709     7500    3              IF NOT BRANCH_FLAG
      710     7501    4              THEN DO;
      711     7502    4                   S_D.ERROR = E@SPREL_NOT_VALID; /* E@SPREL_NOT_VALID */
      712     7503    4                   ALTRETURN;
      713     7504    4              END;
      714     7505    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      715     7506    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      716     7507    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS;
      717     7508    3              IF ( DISPLACEMENT < SPREL_LOWER_LIMIT OR DISPLACEMENT  >
              7508                       SPREL_UPPER_LIMIT )
      718     7509    3                OR ( BRANCH_FLAG AND
      719     7510    4                (DISPLACEMENT = 0 OR DISPLACEMENT = 1)) THEN DO;
      720     7511
      721     7512                                      /* Displacement underflow / overflow detected */
      722     7513
      723     7514    4                   S_D.ERROR = E@SHORT_PREL_ERROR;
      724     7515    4                   ALTRETURN;
      725     7516    4              END;
      726     7517    3              BRANCH_FRAME.VALUE = DISPLACEMENT;
      727     7518    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      728     7519    3              ASSMBLD_INSTR.SIZE = 1;
      729     7520                                                /**/
      730     7521    3            CASE(19);                      /* Int vector or EXP,$IV              */
      731     7522    3              INDEX_FLAG = TRUE;
      732     7523    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      733     7524    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      734     7525    3              ADDRESS = BIN_VAL;
      735     7526    3              ADDR_SYL.FRAME.M_FIELD = 7;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:24   
      736     7527    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      737     7528    3              ADDR_SYL.FRAME.N_FIELD = 0;
      738     7529    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      739     7530    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;
      740     7531    3              ASSMBLD_INSTR.SIZE = 2;
      741     7532                                                /**/
      742     7533    3            CASE(20);                      /* Indirect or *Exp                   */
      743     7534    3              INDEX_FLAG = TRUE;
      744     7535    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      745     7536    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      746     7537    3              ADDRESS = BIN_VAL;
      747     7538    3              ADDR_SYL.FRAME.M_FIELD = 0;
      748     7539    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
      749     7540    3              ADDR_SYL.FRAME.N_FIELD = 0;
      750     7541    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      751     7542    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;
      752     7543    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;
      753     7544    3              ASSMBLD_INSTR.SIZE = 3;
      754     7545                                                /**/
      755     7546    3            CASE(21);                      /* Register or B_REG | R_REG          */
      756     7547    3              INDEX_FLAG = TRUE;
      757     7548    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)
      758     7549    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* Reg of the instruction */
      759     7550    4   UNFOLD :   DO CASE( REGISTER_CODE );
      760     7551                                                /**/
      761     7552    4               CASE( 1, 2, 3, 4, 5, 6, 7 ); /* B_REG         */
      762     7553    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;
      763     7554                                                /**/
      764     7555    4               CASE( 8, 9, 10, 11, 12, 13, 14 ); /* R_REG    */
      765     7556    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE - 7;
      766     7557                                                /**/
      767     7558    4               CASE( 18, 19, 20 );         /* S_REG                  */
      768     7559    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE - 17;
      769     7560                                                /**/
      770     7561    4               CASE( ELSE );               /* Bad register                 */
      771     7562    4                 S_D.ERROR = E@BAD_REG;
      772     7563    4                 ALTRETURN;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:25   
      773     7564                                                /**/
      774     7565    4              END UNFOLD;
      775     7566    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      776     7567    3              ADDR_SYL.FRAME.M_FIELD = 5;  /* 5 makes it a register */
      777     7568    3              ASSMBLD_INSTR.SIZE = 1;
      778     7569    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      779     7570                                                /**/
      780     7571    3            CASE(22);                      /* Direct or exp                      */
      781     7572    3              INDEX_FLAG =TRUE;
      782     7573    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      783     7574    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      784     7575    3              ADDRESS = BIN_VAL;
      785     7576    3              ADDR_SYL.FRAME.M_FIELD = 0;
      786     7577    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;
      787     7578    3              ADDR_SYL.FRAME.N_FIELD = 0;
      788     7579    3              ASSMBLD_INSTR.OPS(0) = INSTR;
      789     7580    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;
      790     7581    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;
      791     7582    3              ASSMBLD_INSTR.SIZE = 3;
      792     7583                                                /**/
      793     7584    3            CASE( ELSE );                  /* Bogus code                         */
      794     7585    3   ALT5:      ALTRETURN;
      795     7586                                                /**/
      796     7587    3           END ENCODE;
      797     7588    2           RETURN;
      798     7589                                                /**/
      799     7590                                                /**/
      800     7591    2   END  ENCODE_ADDR_SYL;
      801     7592        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:26   
      802     7593    1   MASK_PRESENT: PROC ALTRET;
      803     7594                                                /**/
      804     7595    3           IF MASK_THERE THEN DO;          /* Mask was found earlier, put it in  */
      805     7596    3                ASSMBLD_INSTR.OPS(ASSMBLD_INSTR.SIZE) = MASK_VALUE;
      806     7597    3                ASSMBLD_INSTR.SIZE = ASSMBLD_INSTR.SIZE + 1;
      807     7598    3           END;
      808     7599                                                /**/
      809     7600    3           ELSE DO;
      810     7601    3                S_D.ERROR = E@NO_MASK;     /* Expected mask not found */
      811     7602    3                ALTRETURN;
      812     7603    3           END;
      813     7604    2           RETURN;
      814     7605    2   END MASK_PRESENT;
      815     7606        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:27   
      816     7607    1   SEARCH_OP_TABLE : PROC;
      817     7608        /**/
      818     7609        /*  Enter with only the mnemonic, left-justified in SCR_BUFFER.               */
      819     7610        /*  On exit, INSTR_TYPE, OPCODE, and (perhaps) GENERIC_CODE are set up.       */
      820     7611        /*  An un-recognizable op-code is indicated by setting INSTR_TYPE to 0.       */
      821     7612        /**/
      822     7613                                                /**/
      823     7614    3   REGULAR : DO I = 0 TO 511;              /* Try regular instructions      */
      824     7615    4                IF INSTRUCTIONS(I) = SCR_BUFFER THEN DO;
      825     7616    4                     INSTR_TYPE = INSTRUCTION_TYPE(I);
      826     7617    4                     OPCODE = I;
      827     7618    4                     RETURN;
      828     7619    4                END;
      829     7620    3           END REGULAR;
      830     7621                                                /**/
      831     7622                                           /* Failed regular set; try single shift    */
      832     7623    3   SHIFT_S : DO I = 0 TO 55;
      833     7624    4                IF SHIFT_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;
      834     7625    4                     INSTR_TYPE = 8;
      835     7626    4                     OPCODE = ( (I/8) + 1 ) * 256 + MOD(I,8);
      836     7627    4                     RETURN;
      837     7628    4                END;
      838     7629    3           END SHIFT_S;
      839     7630                                                /**/
      840     7631                                                /* Failed short shifts; try double    */
      841     7632    3   SHIFT_D : DO I = 0 TO 55;
      842     7633    4                IF SHIFT_D_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;
      843     7634    4                     INSTR_TYPE = 9;
      844     7635    4                     OPCODE = ( (I/4) - 6 )*256 + MOD(I,4) * 2 + 8;
      845     7636    4                     RETURN;
      846     7637    4                END;
      847     7638    3           END SHIFT_D;
      848     7639                                                /**/
      849     7640                                                /* Maybe it's a generic?              */
      850     7641    3   GENERIC : DO I = 0 TO 127;
      851     7642    4                IF GENERIC_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;
      852     7643    4                     INSTR_TYPE = 1;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:28   
      853     7644    4                     GENERIC_CODE = GENERIC_TYPE(I);
      854     7645    4                     OPCODE = I;
      855     7646    4                     RETURN;
      856     7647    4                END;
      857     7648    3           END GENERIC;
      858     7649                                                /**/
      859     7650                                                /* Last ditch effort:  special cases  */
      860     7651    2           SCR_BUFFER = MNEMONIC_PTR$ -> OUT$SYM.TEXT; /* Just look*/
      861     7652                                                /* at the raw mnemonic (not ',reg')   */
      862     7653    3   SPECIAL_CS: DO I = 0 TO SIZEC(SPECIAL_INSTRUCTIONS)/4-1;
      863     7654    4                IF SPECIAL_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;
      864     7655    4                     INSTR_TYPE = 38;
      865     7656    4                     SPECIAL_CODE = I;
      866     7657    4                     RETURN;
      867     7658    4                END;
      868     7659    3           END SPECIAL_CS;
      869     7660                                                /**/
      870     7661                                           /* Tried to pawn off a bogus instruction   */
      871     7662    2           ASSMBLD_INSTR.SIZE = 0;         /* Let anlz know it was bogus   */
      872     7663    2           INSTR_TYPE = 0;                 /* By returning zero size             */
      873     7664    2           RETURN;
      874     7665    2   END SEARCH_OP_TABLE;
      875     7666        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:29   
      876     7667    1   GENERIC_ENCODE : PROC ALTRET;
      877     7668                                                /**/
      878     7669    3           DO CASE( GENERIC_CODE);
      879     7670                                                /**/
      880     7671    3            CASE(0);                       /* Unknown generic                    */
      881     7672    3              ASSMBLD_INSTR.SIZE = 0;
      882     7673                                                /**/
      883     7674    3            CASE(1);                       /* Standard generic                   */
      884     7675    3              ASSMBLD_INSTR.OPS(0) = OPCODE;
      885     7676    3              ASSMBLD_INSTR.SIZE = 1;
      886     7677                                                /**/
      887     7678    3            CASE(3);                       /* Commercial instructions            */
      888     7679    3              S_D.ERROR = E@UN_IM_INST;    /* Unimplemented instruction */
      889     7680    3              ALTRETURN;
      890     7681    3           END;
      891     7682    2           RETURN;
      892     7683    2   END GENERIC_ENCODE;
      893     7684        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:30   
      894     7685    1   SPECIAL_ENCODE: PROC ALTRET;
      895     7686        /**/
      896     7687        /*  This routine is used for the special case instructions.  This             */
      897     7688        /*  includes those instructions that (although they are considered            */
      898     7689        /*  part of another set) do not map into existing tables.                     */
      899     7690        /*  This code is ugly.                                                        */
      900     7691        /**/
      901     7692    3           DO CASE (SPECIAL_CODE);
      902     7693                                                /**/
      903     7694    3            CASE(0);                       /* ACQ instruction                    */
      904     7695    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 3
      905     7696    3              THEN
      906     7697    3                   GOTO MALFORMED_SPECIAL;
      907     7698    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE < 8
      908     7699    3                OR NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE >14
      909     7700    3              THEN                         /* Not Rn                             */
      910     7701    3                   GOTO BAD_REG_SPECIAL;
      911     7702    3              IF NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.CODE ~= 21
      912     7703    3              THEN                         /* Wrong argument mode                */
      913     7704    3                   GOTO MALFORMED_SPECIAL;
      914     7705    3              IF NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7
      915     7706    3              THEN                         /* Not Bn                             */
      916     7707    3                   GOTO BAD_REG_SPECIAL;
      917     7708    3              ASSMBLD_INSTR.SIZE = 2;
      918     7709    3              ASSMBLD_INSTR.OPS(0) = 16;
      919     7710    3              ACQ_INSTR.ACQ_INDICATOR1 = 0;
      920     7711    3              ACQ_INSTR.ACQ_INDICATOR2 = 0;
      921     7712    3              ACQ_INSTR.ACQ_R_REG = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -7;
      922     7713    3              ACQ_INSTR.ACQ_B_REG = NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.SUBLK$(0) ->
              7713                       OUT$BLK.CODE;
      923     7714    3              ASSMBLD_INSTR.OPS(1) = INSTR;
      924     7715                                                /**/
      925     7716    3            CASE(1);                       /* LDT instruction                    */
      926     7717    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 2
      927     7718    3              THEN
      928     7719    3                   GOTO MALFORMED_SPECIAL;
      929     7720    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE ~= 21
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:31   
      930     7721    3              THEN                         /* Wrong argument mode                */
      931     7722    3                   GOTO MALFORMED_SPECIAL;
      932     7723    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7
      933     7724    3              THEN                         /* Not Bn                             */
      934     7725    3                   GOTO BAD_REG_SPECIAL;
      935     7726    3              ASSMBLD_INSTR.SIZE = 2;
      936     7727    3              ASSMBLD_INSTR.OPS(0) = 16;
      937     7728    3              LDT_INSTR.LDT_INDICATOR1 = 0;
      938     7729    3              LDT_INSTR.LDT_INDICATOR2 = 0;
      939     7730    3              LDT_INSTR.REGISTER = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) ->
              7730                       OUT$BLK.CODE;
      940     7731    3              ASSMBLD_INSTR.OPS(1) = INSTR;
      941     7732                                                /**/
      942     7733    3            CASE(2);                       /* RLQ instruction                    */
      943     7734    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 2
      944     7735    3              THEN
      945     7736    3                   GOTO MALFORMED_SPECIAL;
      946     7737    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE ~= 21
      947     7738    3              THEN                         /* Wrong argument mode                */
      948     7739    3                   GOTO MALFORMED_SPECIAL;
      949     7740    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7
      950     7741    3              THEN                         /* Not Bn                             */
      951     7742    3                   GOTO BAD_REG_SPECIAL;
      952     7743    3              ASSMBLD_INSTR.SIZE = 2;
      953     7744    3              ASSMBLD_INSTR.OPS(0) = 16;
      954     7745    3              RLQ_INSTR.RLQ_INDICATOR = 0;
      955     7746    3              RLQ_INSTR.REGISTER = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) ->
              7746                       OUT$BLK.CODE;
      956     7747    3              ASSMBLD_INSTR.OPS(1) = INSTR;
      957     7748                                                /**/
      958     7749    3            CASE(3);                       /* STT instruction                    */
      959     7750    3              ASSMBLD_INSTR.SIZE = 2;
      960     7751    3              ASSMBLD_INSTR.OPS(0) = 16;
      961     7752    3              STT_INSTR.STT_INDICATOR = 0;
      962     7753    3              ASSMBLD_INSTR.OPS(1) = INSTR;
      963     7754    3           END;                            /* End CASE                           */
      964     7755    2           RETURN;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:32   
      965     7756        /**/
      966     7757    2   BAD_REG_SPECIAL: ;
      967     7758    2   MALFORMED_SPECIAL: ;
      968     7759    2           S_D.ERROR = E@NO_INST;
      969     7760    2           ASSMBLD_INSTR.SIZE = 0;
      970     7761    2           ALTRETURN;
      971     7762        /**/
      972     7763    2   END SPECIAL_ENCODE;
      973     7764        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:33   
      974     7765    1   MASK_ENCODE : PROC ALTRET;
      975     7766    2   DCL 1 MASK,
      976     7767    2         2 COUNT UBIN,
      977     7768    2         2 TEXT CHAR(16),
      978     7769    2         2 CHR(0:15) REDEF TEXT CHAR(1);
      979     7770                                                /**/
      980     7771                                                /**/
      981     7772    2           IF NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) -> OUT$BLK.SUBLK$ (0)
      982     7773    2             -> OUT$BLK.CODE = HEX_CODE    /* HEX_CODE */
      983     7774    3           THEN DO;
      984     7775    3                MASK.TEXT = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      985     7776    3                  OUT$BLK.SUBLK$ (0) -> OUT$BLK.SUBLK$ (0) ->
      986     7777    3                  OUT$SYM.TEXT;
      987     7778    3                MASK.COUNT = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->
      988     7779    3                  OUT$BLK.SUBLK$ (0) -> OUT$BLK.SUBLK$(0)->
      989     7780    3                  OUT$SYM.COUNT;
      990     7781    3           END;
      991     7782    3           ELSE DO;
      992     7783    3                MASK.TEXT = NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) ->
      993     7784    3                  OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXT;
      994     7785    3                MASK.COUNT = NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) ->
      995     7786    3                  OUT$BLK.SUBLK$ (0) -> OUT$SYM.COUNT;
      996     7787    3           END;
      997     7788    2           MASK_VALUE = 0;
      998     7789    3           DO WHILE MASK.COUNT ~= 0;
      999     7790    3                IF MASK.CHR(0) <= '9' AND MASK.CHR(0) >= '0'
     1000     7791    3                THEN MASK_VALUE = MASK_VALUE*16 + ASCBIN(MASK.CHR(0)) - 48;
     1001     7792    3                ELSE IF MASK.CHR(0) <= 'F' AND MASK.CHR(0) >= 'A'
     1002     7793    3                     THEN MASK_VALUE = MASK_VALUE*16 + ASCBIN(MASK.CHR(0)) - 55;
     1003     7794    3                     ELSE GOTO BAD_MASK;
     1004     7795    3                MASK.TEXT = SUBSTR(MASK.TEXT,1);
     1005     7796    3                MASK.COUNT = MASK.COUNT - 1;
     1006     7797    3           END;
     1007     7798    2           MASK_THERE = TRUE;
     1008     7799    2           SUBLK_NUMBER = SUBLK_NUMBER + 1;
     1009     7800    2           RETURN;
     1010     7801                                                /**/
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:34   
     1011     7802    2   BAD_MASK : MASK_VALUE = 0;    /* Mask field not evaluatable; zero substituted */
     1012     7803    2           S_D.ERROR = E@BAD_MASK;
     1013     7804    2           MASK_THERE = TRUE;
     1014     7805    2           SUBLK_NUMBER = SUBLK_NUMBER + 1;
     1015     7806    2           ALTRETURN;
     1016     7807    2   END MASK_ENCODE;
     1017     7808        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:35   
     1018     7809    1   MISSING_OPERAND : PROC ALTRET;
     1019     7810                                                /**/
     1020     7811    2           S_D.ERROR = E@MISSING_OPERAND;
     1021     7812    2           ASSMBLD_INSTR.SIZE = 0;
     1022     7813    2           ALTRETURN;
     1023     7814    2   END MISSING_OPERAND;
     1024     7815    1   END DFS$INSTR;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:36   
--  Include file information  --

   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DFS$INSTR.

   Procedure DFS$INSTR requires 1714 words for executable code.
   Procedure DFS$INSTR requires 68 words of local(AUTO) storage.

    No errors detected in file DFS$INSTR.:E05TSI    .

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:37   

 Object Unit name= DFS$INSTR                                  File name= DFS$INSTR.:E05TOU
 UTS= JUL 29 '97 14:43:41.40 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS    153    231  DFS$INSTR
    1   Proc  even  none  1714   3262  DFS$INSTR
    2  RoData even  none    11     13  DFS$INSTR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  DFS$INSTR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 DFR$CONVERT
 yes     yes           Std       2 DFR$CONVERT
 yes     yes           Std       2 DFR$CONVERT
 yes     yes           Std       2 DFR$CONVERT
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:38   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                             r    INSTRUCTIONS                     r    INSTRUCTION_TYPE
r    GENERIC_TYPE                     r    SHIFT_INSTRUCTIONS               r    SHIFT_D_INSTRUCTIONS
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:39   


        1        1        /*M* DFS$INSTR .. Forward assembly routine for Fep modes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,AND,IND=5 */
        8        8        DFS$INSTR : PROC( ASSMBLD_INSTR, CURRENT_ADDRESS, TEST_OP, TEST_PTR$ ) ALTRET;

      8  1 000000   000000 700200 xent  DFS$INSTR    TSX0  ! X66_AUTO_4
         1 000001   000104 000004                    ZERO    68,4

        9        9
       10       10        /*D* NAME: DFS$INSTR
       11       11             INPUT:  ASSMBLD_INSTR - 17 words space to receive assembled instruction
       12       12                                     and instruction size
       13       13                     CURRENT_ADDRESS - The address being modified
       14       14                     TEST_OP - If set, tells this module to simply verify the  opcode
       15       15                     TEST_PTR$ - a pointer to the to-be-parsed instruction; this
       16       16                                 pointer should be passed only when TEST_OP is
       17       17                                 set.  For normal operation, pointer to the
       18       18                                 instruction is in the global structure pointed
       19       19                                 at by S_D.DESC$.
       20       20             OUTPUT: ASSMBLD_INSTR - 17 words; the 1st word is the size of the
       21       21                                     assembled instruction in words; the rest
       22       22                                     16 words contains the assembled L6 instruction
       23       23                                     right justified
       24       24             DESCRIPTION:
       25       25                          This module serves two purposes; one is to assemble
       26       26                          an L6 instruction; the other one is to verify whether
       27       27                          the SYM node is actually a valid L6 opcode.  TEST_OP
       28       28                          tells this module which one to perform. */
       29       29                                                /**/
       30       30        %INCLUDE XU_MACRO_C;
       31     3136        %PARSE$OUT( NAME = OUT$BLK, STCLASS = BASED );
       32     3181        %PARSE$SYM( NAME = OUT$SYM, STCLASS = BASED );
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:40   
       33     3219        %INCLUDE DD_ERR_C;
       34     3616        %INCLUDE XUH_MACRO_C;
       35     3700        %INCLUDE DD_SD_M;
       36     5036        %S_D;
       37     6354        %INCLUDE DD_PSUBS_C;
       38     6829                                                /**/
       39     6830        %SUB PREL_LOWER_LIMIT = -32768;
       40     6831        %SUB PREL_UPPER_LIMIT = 32767;
       41     6832        %SUB SPREL_LOWER_LIMIT = -64;
       42     6833        %SUB SPREL_UPPER_LIMIT = 63;
       43     6834        %SUB SV_LOWER_LIMIT    = -128;
       44     6835        %SUB SV_UPPER_LIMIT    = 127;
       45     6836        %SUB SHIFT_SINGLE_LIMIT = 15;
       46     6837        %SUB SHIFT_DOUBLE_LIMIT = 31;
       47     6838                                                /**/
       48     6839                                                /**/
       49     6840        /*M*     INITIALIZED DATA REQUIRED FOR L6 INSTRUCTION BREAK-OUT*/
       50     6841    1   DCL NIL$ PTR CONSTANT INIT(ADDR(NIL));
       51     6842    1   DCL INSTRUCTIONS(0:511) CHAR(8) SYMREF READONLY;
       52     6843    1   DCL INSTRUCTION_TYPE(0:511) UBIN SYMREF READONLY;
       53     6844    1   DCL GENERIC_INSTRUCTIONS(0:127) CHAR(4) CONSTANT INIT(
       54     6845    1      'HLT ','MCL ','BRK ','RTT ','RTCN','RTCF','WDTN','WDTF',
       55     6846    1      'MMM ','DC  ','ASD ','VLD ','LRDB','SRDB','DC  ','DC  ',
       56     6847    1      '--- ','RSC ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       57     6848    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       58     6849    1      'VRF ','ALR ','ACM ','MAT ','AME ','DMC ','DME ','CBD ',
       59     6850    1      'SRH ','DML ','CDB ','DDV ','DAD ','DSB ','DSH ','DCM ',
       60     6851    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       61     6852    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       62     6853    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       63     6854    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       64     6855    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       65     6856    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       66     6857    1      'DQA ','QOT ','DQH ','QOH ','DC  ','DC  ','DC  ','DC  ',
       67     6858    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       68     6859    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ',
       69     6860    1      'DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ','DC  ');
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:41   
       70     6861    1   DCL GENERIC_TYPE(0:127) UBIN SYMREF READONLY;
       71     6862    1   DCL SHIFT_INSTRUCTIONS(0:55) CHAR(6) SYMREF READONLY;
       72     6863    1   DCL SHIFT_D_INSTRUCTIONS(0:55) CHAR(6) SYMREF READONLY;
       73     6864    1   DCL SPECIAL_INSTRUCTIONS(0:3) CHAR(4) CONSTANT INIT(
       74     6865    1      'ACQ ','LDT ','RLQ ','STT ');
       75     6866    1   DCL REGISTERS(0:20) CHAR(3) CONSTANT INIT(
       76     6867    1       'X', ',B1', ',B2', ',B3', ',B4', ',B5', ',B6', ',B7',
       77     6868    1            ',R1', ',R2', ',R3', ',R4', ',R5', ',R6', ',R7',
       78     6869    1            ',M1', ',M2', ',M3', ',S1', ',S2', ',S3' );
       79     6870    1   DCL INSTR UBIN(16) UNAL;
       80     6871    1   DCL 1 INSTRUCTION REDEF INSTR,
       81     6872    1         2 INDEXX UBIN(9) UNAL,            /* opcode register etc.               */
       82     6873    1         2 FUNCTION UBIN(7) UNAL;          /* function for generics              */
       83     6874                                                /**/
       84     6875    1   DCL 1 SV REDEF INSTR,                   /* short value instrctions            */
       85     6876    1         2 * UBIN(8) UNAL,                 /* short value opcode                 */
       86     6877    1         2 VALUE SBIN(8) UNAL;             /* immediate value                    */
       87     6878                                                /**/
       88     6879    1   DCL 1 ADDR_SYL REDEF INSTR,             /* address syllable                   */
       89     6880    1         2 * UBIN(9) UNAL,
       90     6881    1         2 PHRASE UBIN(7) UNAL,            /* address sysllable                  */
       91     6882    1         2 FRAME REDEF PHRASE UNAL,
       92     6883    1           3 M_FIELD UBIN(3) UNAL,         /* M field in addr syl                */
       93     6884    1           3 INDIRECT_FIELD UBIN(1) UNAL,  /* @ field in addr syl                */
       94     6885    1           3 N_FIELD UBIN(3) UNAL;         /* N field in addr syl                */
       95     6886                                                /**/
       96     6887    1   DCL 1 SHIFT_SINGLE REDEF INSTR,         /* single word shift                  */
       97     6888    1         2 SHIFT_OP UBIN(12) UNAL,
       98     6889    1         2 VALUE UBIN(4) UNAL;             /* shift count & direction            */
       99     6890                                                /**/
      100     6891    1   DCL 1 SHIFT_DOUBLE REDEF INSTR,         /* double word shift                  */
      101     6892    1         2 SHIFT_OP UBIN(11) UNAL,
      102     6893    1         2 VALUE UBIN(5) UNAL;             /* shift count and direction          */
      103     6894                                                /**/
      104     6895    1   DCL 1 BRANCH_FRAME REDEF INSTR,         /* branch instruction                 */
      105     6896    1         2 * UBIN(9) UNAL,
      106     6897    1         2 VALUE SBIN(7) UNAL;             /* displacement                       */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:42   
      107     6898                                                /**/
      108     6899    1   DCL 1 FORM REDEF INSTR,
      109     6900    1         2 HEX1 UBIN(4) UNAL,         /* structure useful for shift and others   */
      110     6901    1         2 HEX2 UBIN(4) UNAL,
      111     6902    1         2 HEX3 UBIN(4) UNAL,
      112     6903    1         2 HEX3R REDEF HEX3 UNAL,
      113     6904    1           3 B1 UBIN(1) UNAL,
      114     6905    1           3 * UBIN(3) UNAL,
      115     6906    1         2 HEX3S REDEF HEX3 UNAL,
      116     6907    1           3 TYPE UBIN(3) UNAL,            /* shift type                         */
      117     6908    1           3 * UBIN(1) UNAL,
      118     6909    1         2 HEX4 UBIN(4) UNAL;
      119     6910                                                /**/
      120     6911    1   DCL 1 RLQ_INSTR REDEF INSTR,
      121     6912    1         2 RLQ_INDICATOR UBIN(13) UNAL,    /* Rlq indicator must = 0             */
      122     6913    1         2 REGISTER UBIN(3) UNAL;          /* B reg rlq affects                  */
      123     6914                                                /**/
      124     6915    1   DCL 1 LDT_INSTR REDEF INSTR,
      125     6916    1         2 LDT_INDICATOR1 UBIN(9) UNAL,    /* Ldt INDICATOR1 must = 0            */
      126     6917    1         2 REGISTER UBIN(3) UNAL,          /* B reg ldt affects                  */
      127     6918    1         2 LDT_INDICATOR2 UBIN(4) UNAL;    /* Also must = 0                      */
      128     6919                                                /**/
      129     6920    1   DCL 1 ACQ_INSTR REDEF INSTR,
      130     6921    1         2 ACQ_INDICATOR1 UBIN(9) UNAL,    /* Must = 0                           */
      131     6922    1         2 ACQ_R_REG UBIN(3) UNAL,         /* R reg acq affects                  */
      132     6923    1         2 ACQ_INDICATOR2 UBIN(1) UNAL,    /* Also must = 0                      */
      133     6924    1         2 ACQ_B_REG UBIN(3) UNAL;         /* B reg acq affects                  */
      134     6925    1   DCL 1 STT_INSTR REDEF INSTR,
      135     6926    1         2 STT_INDICATOR UBIN(16) UNAL;    /* STT indicator must = 0             */
      136     6927                                                /**/
      137     6928    1   DCL INDEX_FLAG BIT(1);
      138     6929    1   DCL I_O_INSTR_FLAG BIT(1);
      139     6930    1   DCL IOLD_INSTR_FLAG BIT(1);
      140     6931    1   DCL ADDR_MODE UBIN WORD;
      141     6932    1   DCL BASED_PTR PTR BASED;
      142     6933    1   DCL NODE$ PTR;                          /* Ptr to things of interest          */
      143     6934    1   DCL 1 ASSMBLD_INSTR,
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:43   
      144     6935    1         2 SIZE UBIN WORD,                 /* Number of words assembled          */
      145     6936    1         2 OPS(0:15) UBIN WORD;            /* Those words assembled              */
      146     6937    1   DCL 1 TASSMBLD_INSTR,
      147     6938    1         2 SIZE UBIN WORD,
      148     6939    1         2 OPS(0:15) UBIN WORD;            /* Those words assembled              */
      149     6940                                                /**/
      150     6941    1   DCL MNEMONIC_PTR$ PTR;                  /* Pointer to mnemonic field          */
      151     6942    1   DCL MASK_PTR$ PTR;                      /* Pointer to optional mask           */
      152     6943    1   DCL REGISTER_CODE UBIN WORD;            /* The register number                */
      153     6944    1   DCL I UBIN WORD;                        /* Counter                            */
      154     6945    1   DCL J UBIN WORD;                        /* Counter                            */
      155     6946    1   DCL SUBLK_NUMBER UBIN WORD;             /* Current sub block operating on     */
      156     6947    1   DCL ODD_INST_CODE BIT(1); /* Flag for any instruction of non standard type    */
      157     6948    1   DCL TRUE BIT(1) CONSTANT INIT('1'B);
      158     6949    1   DCL FALSE BIT(1) CONSTANT INIT('0'B); /* True and false (positive true logic ) */
      159     6950    1   DCL SCR_BUFFER CHAR(16);                /* Scratch buffer                     */
      160     6951    1   DCL INSTR_TYPE UBIN WORD;               /* General instruction type           */
      161     6952    1   DCL NUMBER_SUBLKS UBIN WORD;            /* Number of sublks parser found      */
      162     6953    1   DCL MNEMONIC_LENGTH UBIN WORD;     /* Length of mnemonic length + register    */
      163     6954    1   DCL GENERIC_CODE UBIN WORD;             /* Type of generic instr              */
      164     6955    1   DCL SPECIAL_CODE UBIN WORD;             /* Type of special case instr         */
      165     6956    1   DCL OPCODE UBIN WORD;                   /* The opcode for instr               */
      166     6957    1   DCL MASK_VALUE UBIN WORD;               /* Value of themask for instructions  */
      167     6958    1   DCL MASK_THERE BIT(1);                  /* Flag indicating presence of mask   */
      168     6959                                                /**/
      169     6960    1   DCL FCG UBIN WORD CONSTANT INIT( BITBIN('041432'O ) );
              6960            /* Functional code group constant I.E. -dlz- */
      170     6961    1   DCL DDE$ERROR ENTRY;
      171     6962
      172     6963    1   DCL CURRENT_ADDRESS UBIN WORD;     /* Machine address of cell operated  on    */
      173     6964    1   DCL TEST_OP BIT(1) ALIGNED;
      174     6965    1   DCL TEST_PTR$ PTR;
      175     6966    1   DCL BRANCH_FLAG BIT(1);  /* Indicator for branch instr addr syl formation     */
      176     6967        /**/
      177     6968        /*  Clear/initialize the world  */
      178     6969        /**/
      179     6970    1           IF TEST_OP
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:44   

   6970  1 000002   200005 470500                    LDP0    @TEST_OP,,AUTO
         1 000003   000000 234100                    SZN     0,,PR0
         1 000004   000011 605000 1                  TPL     s:6973

      180     6971    1           THEN NODE$ = TEST_PTR$;

   6971  1 000005   200006 471500                    LDP1    @TEST_PTR$,,AUTO
         1 000006   100000 236100                    LDQ     0,,PR1
         1 000007   200014 756100                    STQ     NODE$,,AUTO
         1 000010   000020 710000 1                  TRA     s:6976

      181     6972    2           ELSE DO;

      182     6973    2                NODE$ = S_D.DESC$ -> BASED_PTR;

   6973  1 000011   000000 471400 xsym               LDP1    S_D$
         1 000012   100041 473500                    LDP3    33,,PR1
         1 000013   300000 236100                    LDQ     0,,PR3
         1 000014   200014 756100                    STQ     NODE$,,AUTO

      183     6974    2                S_D.DESC$ = PINCRW ( S_D.DESC$ , 1 );

   6974  1 000015   100041 236100                    LDQ     33,,PR1
         1 000016   000001 036003                    ADLQ    1,DU
         1 000017   100041 756100                    STQ     33,,PR1

      184     6975    2           END;

      185     6976    1           SUBLK_NUMBER = 0;

   6976  1 000020   200043 450100                    STZ     SUBLK_NUMBER,,AUTO

      186     6977    1           MASK_THERE = FALSE;

   6977  1 000021   000226 236000 0                  LDQ     FALSE
         1 000022   400000 376003                    ANQ     -131072,DU
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:45   
         1 000023   200060 756100                    STQ     MASK_THERE,,AUTO

      187     6978    1           INDEX_FLAG = FALSE;

   6978  1 000024   200010 756100                    STQ     INDEX_FLAG,,AUTO

      188     6979    1           ASSMBLD_INSTR = '0'B;

   6979  1 000025   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 000026   000100 100400                    MLR     fill='000'O
         1 000027   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000030   100000 000104                    ADSC9   0,,PR1                   cn=0,n=68

      189     6980    1           INSTR = 0;

   6980  1 000031   000000 236000 2                  LDQ     0
         1 000032   200007 356100                    ANSQ    INSTR,,AUTO

      190     6981    1           BRANCH_FLAG = FALSE;

   6981  1 000033   000226 236000 0                  LDQ     FALSE
         1 000034   400000 376003                    ANQ     -131072,DU
         1 000035   200061 756100                    STQ     BRANCH_FLAG,,AUTO

      191     6982    1           NUMBER_SUBLKS = NODE$ -> OUT$BLK.NSUBLKS;

   6982  1 000036   200014 473500                    LDP3    NODE$,,AUTO
         1 000037   300001 236100                    LDQ     1,,PR3
         1 000040   000022 772000                    QRL     18
         1 000041   200052 756100                    STQ     NUMBER_SUBLKS,,AUTO

      192     6983    1           MNEMONIC_PTR$ = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER);

   6983  1 000042   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 000043   300003 236110                    LDQ     3,X0,PR3
         1 000044   200036 756100                    STQ     MNEMONIC_PTR$,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:46   
      193     6984    1           MNEMONIC_LENGTH = MNEMONIC_PTR$ -> OUT$SYM.COUNT;

   6984  1 000045   200036 474500                    LDP4    MNEMONIC_PTR$,,AUTO
         1 000046   400004 236100                    LDQ     4,,PR4
         1 000047   000033 772000                    QRL     27
         1 000050   200053 756100                    STQ     MNEMONIC_LENGTH,,AUTO

      194     6985    1           SCR_BUFFER = MNEMONIC_PTR$ -> OUT$SYM.TEXT;

   6985  1 000051   000000 621006                    EAX1    0,QL
         1 000052   040100 100540                    MLR     fill='040'O
         1 000053   400004 200011                    ADSC9   4,,PR4                   cn=1,n=*X1
         1 000054   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16

      195     6986    1           SUBLK_NUMBER = SUBLK_NUMBER + 1;

   6986  1 000055   200043 235100                    LDA     SUBLK_NUMBER,,AUTO
         1 000056   000001 035007                    ADLA    1,DL
         1 000057   200043 755100                    STA     SUBLK_NUMBER,,AUTO

      196     6987        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:47   
      197     6988        /**/
      198     6989        /*  If the instruction mnemonic was followed by ',reg'  glue the              */
      199     6990        /*  ',reg' back onto the mnemonic and eat the parse block for 'reg'.          */
      200     6991        /**/
      201     6992    2           IF NODE$ -> OUT$BLK.CODE = C@INST THEN DO;
              6992                    /* C@INST  Standard instruction         */

   6992  1 000060   300000 720100                    LXL0    0,,PR3
         1 000061   001154 100003                    CMPX0   620,DU
         1 000062   000104 601000 1                  TNZ     s:6998

      202     6993    2                REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;

   6993  1 000063   300003 475505                    LDP5    3,AL,PR3
         1 000064   500000 236100                    LDQ     0,,PR5
         1 000065   777777 376007                    ANQ     -1,DL
         1 000066   200040 756100                    STQ     REGISTER_CODE,,AUTO

      203     6994    2               CALL INSERT( SCR_BUFFER, MNEMONIC_LENGTH,, REGISTERS( REGISTER_CODE) );

   6994  1 000067   000003 402007                    MPY     3,DL
         1 000070   200053 722100                    LXL2    MNEMONIC_LENGTH,,AUTO
         1 000071   777757 622012                    EAX2    -17,X2
         1 000072   777777 662003                    ERX2    -1,DU
         1 000073   200053 235100                    LDA     MNEMONIC_LENGTH,,AUTO
         1 000074   040145 100406                    MLR     fill='040'O
         1 000075   000205 000003 0                  ADSC9   REGISTERS,Q              cn=0,n=3
         1 000076   200045 000012                    ADSC9   SCR_BUFFER,A,AUTO        cn=0,n=*X2

      204     6995    2                MNEMONIC_LENGTH = MNEMONIC_LENGTH + 3;

   6995  1 000077   000003 035007                    ADLA    3,DL
         1 000100   200053 755100                    STA     MNEMONIC_LENGTH,,AUTO

      205     6996    2                SUBLK_NUMBER = SUBLK_NUMBER + 1;

   6996  1 000101   200043 235100                    LDA     SUBLK_NUMBER,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:48   
         1 000102   000001 035007                    ADLA    1,DL
         1 000103   200043 755100                    STA     SUBLK_NUMBER,,AUTO

      206     6997    2           END;

      207     6998    1           CALL SEARCH_OP_TABLE;

   6998  1 000104   002457 701000 1                  TSX1    SEARCH_OP_TABLE
         1 000105   000000 011000                    NOP     0

      208     6999    1           IF TEST_OP AND INSTR_TYPE ~= 0 THEN RETURN;

   6999  1 000106   200005 470500                    LDP0    @TEST_OP,,AUTO
         1 000107   000000 234100                    SZN     0,,PR0
         1 000110   000114 605000 1                  TPL     s:7000
         1 000111   200051 235100                    LDA     INSTR_TYPE,,AUTO
         1 000112   000114 600000 1                  TZE     s:7000

   6999  1 000113   000000 702200 xent               TSX2  ! X66_ARET

      209     7000    1           INSTRUCTION.INDEXX = OPCODE;

   7000  1 000114   200056 236100                    LDQ     OPCODE,,AUTO
         1 000115   000033 736000                    QLS     27
         1 000116   200007 552140                    STBQ    INSTR,'40'O,AUTO

      210     7001    1           ADDR_MODE = 999;

   7001  1 000117   001747 235007                    LDA     999,DL
         1 000120   200013 755100                    STA     ADDR_MODE,,AUTO

      211     7002        /**/
      212     7003        /*  If a mask exists, munge the mask and eat the parse block for mask.        */
      213     7004        /**/
      214     7005    1           IF SUBLK_NUMBER < NUMBER_SUBLKS THEN

   7005  1 000121   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:49   
         1 000122   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000123   000133 603000 1                  TRC     TYPE_ENCODE

      215     7006    1                IF NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE = C@MASK THEN
              7006                         /* C@MASK */

   7006  1 000124   200014 471500                    LDP1    NODE$,,AUTO
         1 000125   100003 473506                    LDP3    3,QL,PR1
         1 000126   300000 720100                    LXL0    0,,PR3
         1 000127   001156 100003                    CMPX0   622,DU
         1 000130   000133 601000 1                  TNZ     TYPE_ENCODE

      216     7007    1                     CALL MASK_ENCODE ALTRET (BAD_INST);

   7007  1 000131   003120 701000 1                  TSX1    MASK_ENCODE
         1 000132   000351 702000 1                  TSX2    BAD_INST

      217     7008                                           /* There's something there and it's a mask */
      218     7009    2   TYPE_ENCODE : DO CASE( INSTR_TYPE );

   7009  1 000133   200051 235100       TYPE_ENCODE  LDA     INSTR_TYPE,,AUTO
         1 000134   000047 115007                    CMPA    39,DL
         1 000135   000137 602005 1                  TNC     TYPE_ENCODE+4,AL
         1 000136   000332 710000 1                  TRA     A_OK
         1 000137   000206 710000 1                  TRA     s:7012
         1 000140   000214 710000 1                  TRA     s:7017
         1 000141   000217 710000 1                  TRA     s:7027
         1 000142   000217 710000 1                  TRA     s:7027
         1 000143   000217 710000 1                  TRA     s:7027
         1 000144   000222 710000 1                  TRA     s:7030
         1 000145   000217 710000 1                  TRA     s:7027
         1 000146   000217 710000 1                  TRA     s:7027
         1 000147   000225 710000 1                  TRA     s:7033
         1 000150   000230 710000 1                  TRA     s:7036
         1 000151   000225 710000 1                  TRA     s:7033
         1 000152   000230 710000 1                  TRA     s:7036
         1 000153   000225 710000 1                  TRA     s:7033
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:50   
         1 000154   000230 710000 1                  TRA     s:7036
         1 000155   000225 710000 1                  TRA     s:7033
         1 000156   000230 710000 1                  TRA     s:7036
         1 000157   000225 710000 1                  TRA     s:7033
         1 000160   000230 710000 1                  TRA     s:7036
         1 000161   000225 710000 1                  TRA     s:7033
         1 000162   000230 710000 1                  TRA     s:7036
         1 000163   000225 710000 1                  TRA     s:7033
         1 000164   000230 710000 1                  TRA     s:7036
         1 000165   000217 710000 1                  TRA     s:7027
         1 000166   000233 710000 1                  TRA     s:7039
         1 000167   000241 710000 1                  TRA     s:7044
         1 000170   000251 710000 1                  TRA     s:7051
         1 000171   000251 710000 1                  TRA     s:7051
         1 000172   000254 710000 1                  TRA     s:7054
         1 000173   000257 710000 1                  TRA     s:7057
         1 000174   000274 710000 1                  TRA     s:7070
         1 000175   000301 710000 1                  TRA     s:7074
         1 000176   000304 710000 1                  TRA     s:7077
         1 000177   000307 710000 1                  TRA     s:7080
         1 000200   000312 710000 1                  TRA     s:7083
         1 000201   000315 710000 1                  TRA     s:7086
         1 000202   000320 710000 1                  TRA     s:7089
         1 000203   000323 710000 1                  TRA     s:7092
         1 000204   000251 710000 1                  TRA     s:7051
         1 000205   000330 710000 1                  TRA     s:7096

      219     7010                                                /**/
      220     7011    2            CASE( 0 );                     /* Undefined opcode                   */

      221     7012    2              S_D.ERROR = E@NO_INST;

   7012  1 000206   000447 236007                    LDQ     295,DL
         1 000207   000000 470400 xsym               LDP0    S_D$
         1 000210   000013 756100                    STQ     11,,PR0

      222     7013    2              ASSMBLD_INSTR.SIZE = 0;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:51   

   7013  1 000211   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 000212   100000 450100                    STZ     0,,PR1

      223     7014    2              ALTRETURN;

   7014  1 000213   000000 702200 xent               TSX2  ! X66_AALT

      224     7015                                                /**/
      225     7016    2            CASE(1);                       /* Generic or commercial instr        */

      226     7017    2              CALL GENERIC_ENCODE ALTRET (BAD_INST);

   7017  1 000214   002657 701000 1                  TSX1    GENERIC_ENCODE
         1 000215   000351 702000 1                  TSX2    BAD_INST
         1 000216   000332 710000 1                  TRA     A_OK

      227     7018                                                /**/
      228     7019                                                /**/
      229     7020                                                /**/
      230     7021    2            CASE(2,                        /* branch on indicators except  b     */

      231     7022    2                3,                         /* B instruction                      */
      232     7023    2                4,                         /* branch on register                 */
      233     7024    2                6,                         /* commercial set branch              */
      234     7025    2                7,                         /* branch on scientific register      */
      235     7026    2                22);                       /* scientific branch on indicators    */
      236     7027    2              CALL BRANCH_ENCODE ALTRET (BAD_INST);

   7027  1 000217   000354 701000 1                  TSX1    BRANCH_ENCODE
         1 000220   000351 702000 1                  TSX2    BAD_INST
         1 000221   000332 710000 1                  TRA     A_OK

      237     7028                                                /**/
      238     7029    2            CASE(5);                       /* short value immediate              */

      239     7030    2              CALL SHORT_VALUE_ENCODE ALTRET ( BAD_INST );
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:52   

   7030  1 000222   000416 701000 1                  TSX1    SHORT_VALUE_ENCODE
         1 000223   000351 702000 1                  TSX2    BAD_INST
         1 000224   000332 710000 1                  TRA     A_OK

      240     7031                                                /**/
      241     7032    2            CASE(8, 10, 12, 14, 16, 18, 20); /* shift R1-R7                   */

      242     7033    2              CALL SHIFT_SINGLE_ENCODE ALTRET ( BAD_INST );

   7033  1 000225   000521 701000 1                  TSX1    SHIFT_SINGLE_ENCODE
         1 000226   000351 702000 1                  TSX2    BAD_INST
         1 000227   000332 710000 1                  TRA     A_OK

      243     7034                                                /**/
      244     7035    2            CASE(9, 11, 13, 15, 17, 19, 21); /* double shift R1-R7            */

      245     7036    2              CALL SHIFT_DOUBLE_ENCODE ALTRET (BAD_INST);

   7036  1 000230   000607 701000 1                  TSX1    SHIFT_DOUBLE_ENCODE
         1 000231   000351 702000 1                  TSX2    BAD_INST
         1 000232   000332 710000 1                  TRA     A_OK

      246     7037                                                /**/
      247     7038    2            CASE(23);                      /* Io or ioh                          */

      248     7039    2              I_O_INSTR_FLAG = '1'B;

   7039  1 000233   400000 236003                    LDQ     -131072,DU
         1 000234   200011 756100                    STQ     I_O_INSTR_FLAG,,AUTO

      249     7040    2              CALL I_O_ENCODE ALTRET(BAD_INST);

   7040  1 000235   000671 701000 1                  TSX1    I_O_ENCODE
         1 000236   000351 702000 1                  TSX2    BAD_INST

      250     7041    2              I_O_INSTR_FLAG = '0'B;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:53   

   7041  1 000237   200011 450100                    STZ     I_O_INSTR_FLAG,,AUTO
         1 000240   000332 710000 1                  TRA     A_OK

      251     7042                                                /**/
      252     7043    2            CASE(24);                      /* Iold                               */

      253     7044    2              IOLD_INSTR_FLAG = '1'B;

   7044  1 000241   400000 236003                    LDQ     -131072,DU
         1 000242   200012 756100                    STQ     IOLD_INSTR_FLAG,,AUTO

      254     7045    2              I_O_INSTR_FLAG = '1'B;

   7045  1 000243   200011 756100                    STQ     I_O_INSTR_FLAG,,AUTO

      255     7046    2              CALL I_O_ENCODE ALTRET(BAD_INST);

   7046  1 000244   000671 701000 1                  TSX1    I_O_ENCODE
         1 000245   000351 702000 1                  TSX2    BAD_INST

      256     7047    2              IOLD_INSTR_FLAG = '0'B;

   7047  1 000246   200012 450100                    STZ     IOLD_INSTR_FLAG,,AUTO

      257     7048    2              I_O_INSTR_FLAG = '0'B;

   7048  1 000247   200011 450100                    STZ     I_O_INSTR_FLAG,,AUTO
         1 000250   000332 710000 1                  TRA     A_OK

      258     7049                                                /**/
      259     7050    2            CASE(25, 26 ,37);         /* standard single operand instruction     */

      260     7051    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7051  1 000251   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000252   000351 702000 1                  TSX2    BAD_INST
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:54   
         1 000253   000332 710000 1                  TRA     A_OK

      261     7052                                                /**/
      262     7053    2            CASE(27);                      /* 32 bit imo single operand          */

      263     7054    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7054  1 000254   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000255   000351 702000 1                  TSX2    BAD_INST
         1 000256   000332 710000 1                  TRA     A_OK

      264     7055                                                /**/
      265     7056    2            CASE(28);                      /* bit type operation                 */

      266     7057    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7057  1 000257   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000260   000351 702000 1                  TSX2    BAD_INST

      267     7058    3              IF INDEX_FLAG THEN DO;       /* check to see if mask present       */

   7058  1 000261   200010 234100                    SZN     INDEX_FLAG,,AUTO
         1 000262   000266 605000 1                  TPL     s:7062

      268     7059    3                   CALL MASK_PRESENT ALTRET (BAD_INST);
              7059                            /* mask there                     */

   7059  1 000263   002435 701000 1                  TSX1    MASK_PRESENT
         1 000264   000351 702000 1                  TSX2    BAD_INST

      269     7060    3              END;

   7060  1 000265   000332 710000 1                  TRA     A_OK

      270     7061    3              ELSE DO;

      271     7062    3                   IF MASK_THERE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:55   

   7062  1 000266   200060 234100                    SZN     MASK_THERE,,AUTO
         1 000267   000332 605000 1                  TPL     A_OK

      272     7063    4                   THEN DO;

      273     7064    4                        S_D.ERROR = E@MASKNOTALLOWED; /* MASKNOTALLOWED */

   7064  1 000270   000526 235007                    LDA     342,DL
         1 000271   000000 470400 xsym               LDP0    S_D$
         1 000272   000013 755100                    STA     11,,PR0

      274     7065    4                        ALTRETURN;

   7065  1 000273   000000 702200 xent               TSX2  ! X66_AALT

      275     7066    4                   END;
      276     7067    3              END;                         /* no mask                            */
      277     7068                                                /**/
      278     7069    2            CASE(29);                      /* save and restore, mask required    */

      279     7070    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7070  1 000274   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000275   000351 702000 1                  TSX2    BAD_INST

      280     7071    2              CALL MASK_PRESENT ALTRET (BAD_INST);

   7071  1 000276   002435 701000 1                  TSX1    MASK_PRESENT
         1 000277   000351 702000 1                  TSX2    BAD_INST
         1 000300   000332 710000 1                  TRA     A_OK

      281     7072                                                /**/
      282     7073    2            CASE(30);                      /* M register double operand          */

      283     7074    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:56   
   7074  1 000301   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000302   000351 702000 1                  TSX2    BAD_INST
         1 000303   000332 710000 1                  TRA     A_OK

      284     7075                                                /**/
      285     7076    2            CASE(31);                      /* standard double operand            */

      286     7077    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7077  1 000304   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000305   000351 702000 1                  TSX2    BAD_INST
         1 000306   000332 710000 1                  TRA     A_OK

      287     7078                                                /**/
      288     7079    2            CASE(32);                      /* Lnj instruction                    */

      289     7080    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7080  1 000307   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000310   000351 702000 1                  TSX2    BAD_INST
         1 000311   000332 710000 1                  TRA     A_OK

      290     7081                                                /**/
      291     7082    2            CASE(33);                      /* base register double operand       */

      292     7083    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7083  1 000312   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000313   000351 702000 1                  TSX2    BAD_INST
         1 000314   000332 710000 1                  TRA     A_OK

      293     7084                                                /**/
      294     7085    2            CASE(34);                      /* scientific double operand          */

      295     7086    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7086  1 000315   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:57   
         1 000316   000351 702000 1                  TSX2    BAD_INST
         1 000317   000332 710000 1                  TRA     A_OK

      296     7087                                                /**/
      297     7088    2            CASE(35);                      /* scientific double operand          */

      298     7089    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7089  1 000320   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000321   000351 702000 1                  TSX2    BAD_INST
         1 000322   000332 710000 1                  TRA     A_OK

      299     7090                                                /**/
      300     7091    2            CASE(36);                      /* double operand with required mask  */

      301     7092    2              CALL ENCODE_ADDR_SYL ALTRET(BAD_INST);

   7092  1 000323   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000324   000351 702000 1                  TSX2    BAD_INST

      302     7093    2              CALL MASK_PRESENT ALTRET (BAD_INST);

   7093  1 000325   002435 701000 1                  TSX1    MASK_PRESENT
         1 000326   000351 702000 1                  TSX2    BAD_INST
         1 000327   000332 710000 1                  TRA     A_OK

      303     7094                                                /**/
      304     7095    2            CASE(38);                      /* SPECIAL CASE instructions          */

      305     7096    2              CALL SPECIAL_ENCODE ALTRET(BAD_INST);

   7096  1 000330   002710 701000 1                  TSX1    SPECIAL_ENCODE
         1 000331   000351 702000 1                  TSX2    BAD_INST

      306     7097    2           END TYPE_ENCODE;

   7089  1 000332                       A_OK         null
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:58   
      307     7098    1   A_OK:   ;
      308     7099    2           DO I = 0 TO ASSMBLD_INSTR.SIZE - 1;

   7099  1 000332   200041 450100                    STZ     I,,AUTO
         1 000333   000344 710000 1                  TRA     s:7101+3

      309     7100    2                ASSMBLD_INSTR.OPS ( I ) = MOD ( ASSMBLD_INSTR.OPS ( I ), 65536 );

   7100  1 000334   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000335   200041 720100                    LXL0    I,,AUTO
         1 000336   000001 236110                    LDQ     1,X0,PR0
         1 000337   177777 376007                    ANQ     65535,DL
         1 000340   000001 756110                    STQ     1,X0,PR0

      310     7101    2           END;

   7101  1 000341   200041 235100                    LDA     I,,AUTO
         1 000342   000001 035007                    ADLA    1,DL
         1 000343   200041 755100                    STA     I,,AUTO
         1 000344   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000345   200041 236100                    LDQ     I,,AUTO
         1 000346   000000 116100                    CMPQ    0,,PR0
         1 000347   000334 602000 1                  TNC     s:7100

      311     7102    1           RETURN;

   7102  1 000350   000000 702200 xent               TSX2  ! X66_ARET

      312     7103                                                /**/
      313     7104    1   BAD_INST : ASSMBLD_INSTR.SIZE = 0;

   7104  1 000351   200003 470500       BAD_INST     LDP0    @ASSMBLD_INSTR,,AUTO
         1 000352   000000 450100                    STZ     0,,PR0

      314     7105    1           ALTRETURN;

   7105  1 000353   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:59   

      315     7106        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:60   
      316     7107    1   BRANCH_ENCODE: PROC ALTRET;

   7107  1 000354   200062 741300       BRANCH_ENCO* STX1  ! BRANCH_FLAG+1,,AUTO

      317     7108                                                /**/
      318     7109    2           IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT);

   7109  1 000355   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
         1 000356   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000357   000363 602000 1                  TNC     s:7111

   7109  1 000360   003252 701000 1                  TSX1    MISSING_OPERAND
         1 000361   000414 702000 1                  TSX2    ALT
         1 000362   000412 710000 1                  TRA     s:7125

      319     7110    3           ELSE DO;

      320     7111    3                ADDR_MODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;

   7111  1 000363   200014 470500                    LDP0    NODE$,,AUTO
         1 000364   000003 471506                    LDP1    3,QL,PR0
         1 000365   100000 236100                    LDQ     0,,PR1
         1 000366   777777 376007                    ANQ     -1,DL
         1 000367   200013 756100                    STQ     ADDR_MODE,,AUTO

      321     7112    3                BRANCH_FLAG = TRUE;

   7112  1 000370   000225 236000 0                  LDQ     TRUE
         1 000371   400000 376003                    ANQ     -131072,DU
         1 000372   200061 756100                    STQ     BRANCH_FLAG,,AUTO

      322     7113                                                /* Is addr mode valid ???             */
      323     7114    3                IF ADDR_MODE = 22          /* Direct addresssing                 */

   7114  1 000373   200013 235100                    LDA     ADDR_MODE,,AUTO
         1 000374   000026 115007                    CMPA    22,DL
         1 000375   000402 600000 1                  TZE     s:7117
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:61   
         1 000376   000022 115007                    CMPA    18,DL
         1 000377   000402 600000 1                  TZE     s:7117
         1 000400   000021 115007                    CMPA    17,DL
         1 000401   000405 601000 1                  TNZ     s:7120

      324     7115    3                  OR ADDR_MODE = 18        /* Short program relative           */
      325     7116    3                  OR ADDR_MODE = 17        /* Program relative                 */
      326     7117    3                THEN CALL ENCODE_ADDR_SYL ALTRET ( ALT );

   7117  1 000402   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000403   000414 702000 1                  TSX2    ALT
         1 000404   000412 710000 1                  TRA     s:7125

      327     7118                                                /**/
      328     7119    4                ELSE DO;                   /* Addressing mode was not valid      */

      329     7120    4                     S_D.ERROR = E@BAD_ADDR_MODE;

   7120  1 000405   000450 235007                    LDA     296,DL
         1 000406   000000 471400 xsym               LDP1    S_D$
         1 000407   100013 755100                    STA     11,,PR1

      330     7121    4                     ALTRETURN;

   7121  1 000410   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000411   000000 702211                    TSX2  ! 0,X1

      331     7122    4                END;
      332     7123                                                /**/
      333     7124    3           END;
      334     7125    2           RETURN;

   7125  1 000412   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000413   000001 702211                    TSX2  ! 1,X1

      335     7126    2   ALT:    ALTRETURN;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:62   
   7126  1 000414   200062 221300       ALT          LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000415   000000 702211                    TSX2  ! 0,X1

      336     7127    2   END BRANCH_ENCODE;
      337     7128        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:63   
      338     7129    1   SHORT_VALUE_ENCODE: PROC ALTRET;

   7129  1 000416   200062 741300       SHORT_VALUE* STX1  ! BRANCH_FLAG+1,,AUTO

      339     7130    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      340     7131    2   DCL BIN_VAL SBIN WORD;
      341     7132    2   DCL 1 TXT_VAL REDEF BIN_VAL,
      342     7133    2         2 HI SBIN(12) UNAL,
      343     7134    2         2 LO BIT(24);
      344     7135                                                /**/
      345     7136    2          IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT2);

   7136  1 000417   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
         1 000420   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000421   000425 602000 1                  TNC     s:7138

   7136  1 000422   003252 701000 1                  TSX1    MISSING_OPERAND
         1 000423   000517 702000 1                  TSX2    ALT2
         1 000424   000513 710000 1                  TRA     s:7159

      346     7137    3           ELSE DO;

      347     7138    3                ADDR_MODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;

   7138  1 000425   200014 470500                    LDP0    NODE$,,AUTO
         1 000426   000003 471506                    LDP1    3,QL,PR0
         1 000427   100000 236100                    LDQ     0,,PR1
         1 000430   777777 376007                    ANQ     -1,DL
         1 000431   200013 756100                    STQ     ADDR_MODE,,AUTO

      348     7139    3                IF ADDR_MODE = C@ARG_BR

   7139  1 000432   000015 116007                    CMPQ    13,DL
         1 000433   000441 601000 1                  TNZ     s:7144

      349     7140    4                THEN DO;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:64   
      350     7141    4                     S_D.ERROR = E@BAD_ADDR_MODE;

   7141  1 000434   000450 235007                    LDA     296,DL
         1 000435   000000 471400 xsym               LDP1    S_D$
         1 000436   100013 755100                    STA     11,,PR1

      351     7142    4                     ALTRETURN;

   7142  1 000437   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000440   000000 702211                    TSX2  ! 0,X1

      352     7143    4                END;
      353     7144    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7144  1 000441   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 000442   000003 471510                    LDP1    3,X0,PR0
         1 000443   200063 633500                    EPPR3   BIN_VAL,,AUTO
         1 000444   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 000445   100003 634500                    EPPR4   3,,PR1
         1 000446   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 000447   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 000450   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000451   000000 701000 xent               TSX1    DFR$CONVERT
         1 000452   000515 702000 1                  TSX2    BAD_VALUE

      354     7145    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      355     7146    3                IF S_D.SDOT AND TXT_VAL.LO = '202020'X

   7146  1 000453   000000 470400 xsym               LDP0    S_D$
         1 000454   004741 234100                    SZN     2529,,PR0
         1 000455   000465 605000 1                  TPL     s:7148
         1 000456   000000 106500                    CMPC    fill='000'O
         1 000457   200063 220004                    ADSC6   BIN_VAL,,AUTO            cn=2,n=4
         1 000460   000230 020004 0                  ADSC6   FALSE+2                  cn=0,n=4
         1 000461   000465 601000 1                  TNZ     s:7148

      356     7147    3                THEN BIN_VAL = TXT_VAL.HI;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:65   

   7147  1 000462   200063 236100                    LDQ     BIN_VAL,,AUTO
         1 000463   000030 732000                    QRS     24
         1 000464   200063 756100                    STQ     BIN_VAL,,AUTO

      357     7148    3                SV.VALUE = BIN_VAL;

   7148  1 000465   200063 236100                    LDQ     BIN_VAL,,AUTO
         1 000466   000024 736000                    QLS     20
         1 000467   200007 676100                    ERQ     INSTR,,AUTO
         1 000470   001774 376003                    ANQ     1020,DU
         1 000471   200007 656100                    ERSQ    INSTR,,AUTO

      358     7149    3                IF SV.VALUE ~= BIN_VAL

   7149  1 000472   200007 236100                    LDQ     INSTR,,AUTO
         1 000473   000010 736000                    QLS     8
         1 000474   000034 732000                    QRS     28
         1 000475   200063 116100                    CMPQ    BIN_VAL,,AUTO
         1 000476   000505 600000 1                  TZE     s:7156

      359     7150    4                THEN DO; /* Value in operand field exdeeds range for

      360     7151                                            this instruction */
      361     7152    4                     S_D.ERROR = E@BAD_VALUE;

   7152  1 000477   000451 235007                    LDA     297,DL
         1 000500   000013 755100                    STA     11,,PR0

      362     7153    4                     SV.VALUE = 0;

   7153  1 000501   000001 236000 2                  LDQ     1
         1 000502   200007 356100                    ANSQ    INSTR,,AUTO

      363     7154    4                     ALTRETURN;

   7154  1 000503   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:66   
         1 000504   000000 702211                    TSX2  ! 0,X1

      364     7155    4                END;
      365     7156    3                ASSMBLD_INSTR.OPS(0) = INSTR;

   7156  1 000505   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 000506   200007 236100                    LDQ     INSTR,,AUTO
         1 000507   000024 772000                    QRL     20
         1 000510   100001 756100                    STQ     1,,PR1

      366     7157    3                ASSMBLD_INSTR.SIZE = 1;

   7157  1 000511   000001 235007                    LDA     1,DL
         1 000512   100000 755100                    STA     0,,PR1

      367     7158    3           END;

      368     7159    2           RETURN;

   7159  1 000513   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000514   000001 702211                    TSX2  ! 1,X1

      369     7160                                                /**/
      370     7161    2   BAD_VALUE : SV.VALUE = 0;

   7161  1 000515   000001 236000 2     BAD_VALUE    LDQ     1
         1 000516   200007 356100                    ANSQ    INSTR,,AUTO

      371     7162    2   ALT2:   ALTRETURN;

   7162  1 000517   200062 221300       ALT2         LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000520   000000 702211                    TSX2  ! 0,X1

      372     7163    2   END SHORT_VALUE_ENCODE;
      373     7164        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:67   
      374     7165    1   SHIFT_SINGLE_ENCODE: PROC ALTRET;

   7165  1 000521   200062 741300       SHIFT_SINGL* STX1  ! BRANCH_FLAG+1,,AUTO

      375     7166    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      376     7167    2   DCL BIN_VAL SBIN WORD;
      377     7168                                                /**/
      378     7169    2          IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT3);

   7169  1 000522   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
         1 000523   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000524   000530 602000 1                  TNC     s:7171

   7169  1 000525   003252 701000 1                  TSX1    MISSING_OPERAND
         1 000526   000605 702000 1                  TSX2    ALT3
         1 000527   000575 710000 1                  TRA     s:7184

      379     7170    3           ELSE DO;

      380     7171    3                SHIFT_SINGLE.SHIFT_OP = OPCODE;

   7171  1 000530   200056 236100                    LDQ     OPCODE,,AUTO
         1 000531   000030 736000                    QLS     24
         1 000532   200007 752160                    STCQ    INSTR,'60'O,AUTO

      381     7172    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7172  1 000533   200014 470500                    LDP0    NODE$,,AUTO
         1 000534   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 000535   000003 471510                    LDP1    3,X0,PR0
         1 000536   200063 633500                    EPPR3   BIN_VAL,,AUTO
         1 000537   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 000540   100003 634500                    EPPR4   3,,PR1
         1 000541   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 000542   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 000543   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000544   000000 701000 xent               TSX1    DFR$CONVERT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:68   
         1 000545   000577 702000 1                  TSX2    BAD_VALUE

      382     7173    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      383     7174    3                SHIFT_SINGLE.VALUE = BIN_VAL;

   7174  1 000546   200063 236100                    LDQ     BIN_VAL,,AUTO
         1 000547   000024 736000                    QLS     20
         1 000550   200007 676100                    ERQ     INSTR,,AUTO
         1 000551   000074 376003                    ANQ     60,DU
         1 000552   200007 656100                    ERSQ    INSTR,,AUTO

      384     7175    4                IF SHIFT_SINGLE.VALUE ~= BIN_VAL THEN DO;

   7175  1 000553   200007 236100                    LDQ     INSTR,,AUTO
         1 000554   000024 772000                    QRL     20
         1 000555   000017 376007                    ANQ     15,DL
         1 000556   200063 116100                    CMPQ    BIN_VAL,,AUTO
         1 000557   000567 600000 1                  TZE     s:7181

      385     7176    4                     S_D.ERROR = E@BAD_VALUE;

   7176  1 000560   000451 235007                    LDA     297,DL
         1 000561   000000 470400 xsym               LDP0    S_D$
         1 000562   000013 755100                    STA     11,,PR0

      386     7177    4                     SHIFT_SINGLE.VALUE = 0;

   7177  1 000563   000002 236000 2                  LDQ     2
         1 000564   200007 356100                    ANSQ    INSTR,,AUTO

      387     7178    4                     ALTRETURN;

   7178  1 000565   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000566   000000 702211                    TSX2  ! 0,X1

      388     7179    4                END;
      389     7180                                                /**/
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:69   
      390     7181    3                ASSMBLD_INSTR.OPS(0) = INSTR;

   7181  1 000567   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000570   200007 236100                    LDQ     INSTR,,AUTO
         1 000571   000024 772000                    QRL     20
         1 000572   000001 756100                    STQ     1,,PR0

      391     7182    3                ASSMBLD_INSTR.SIZE = 1;

   7182  1 000573   000001 235007                    LDA     1,DL
         1 000574   000000 755100                    STA     0,,PR0

      392     7183    3           END;

      393     7184    2           RETURN;

   7184  1 000575   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000576   000001 702211                    TSX2  ! 1,X1

      394     7185                                                /**/
      395     7186    2   BAD_VALUE : SHIFT_SINGLE.VALUE = 0;     /* Bogus shift count                  */

   7186  1 000577   000002 236000 2     BAD_VALUE    LDQ     2
         1 000600   200007 356100                    ANSQ    INSTR,,AUTO

      396     7187    2           ASSMBLD_INSTR.OPS(0) = INSTR;

   7187  1 000601   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000602   200007 236100                    LDQ     INSTR,,AUTO
         1 000603   000024 772000                    QRL     20
         1 000604   000001 756100                    STQ     1,,PR0

      397     7188    2   ALT3:   ALTRETURN;

   7188  1 000605   200062 221300       ALT3         LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000606   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:70   
      398     7189    2   END SHIFT_SINGLE_ENCODE;
      399     7190        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:71   
      400     7191    1   SHIFT_DOUBLE_ENCODE : PROC ALTRET;

   7191  1 000607   200062 741300       SHIFT_DOUBL* STX1  ! BRANCH_FLAG+1,,AUTO

      401     7192    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      402     7193    2   DCL BIN_VAL SBIN WORD;
      403     7194                                                /**/
      404     7195    2          IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT4);

   7195  1 000610   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
         1 000611   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000612   000616 602000 1                  TNC     s:7197

   7195  1 000613   003252 701000 1                  TSX1    MISSING_OPERAND
         1 000614   000667 702000 1                  TSX2    ALT4
         1 000615   000663 710000 1                  TRA     s:7210

      405     7196    3           ELSE DO;

      406     7197    3                SHIFT_SINGLE.SHIFT_OP = OPCODE;

   7197  1 000616   200056 236100                    LDQ     OPCODE,,AUTO
         1 000617   000030 736000                    QLS     24
         1 000620   200007 752160                    STCQ    INSTR,'60'O,AUTO

      407     7198    3                CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7198  1 000621   200014 470500                    LDP0    NODE$,,AUTO
         1 000622   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 000623   000003 471510                    LDP1    3,X0,PR0
         1 000624   200063 633500                    EPPR3   BIN_VAL,,AUTO
         1 000625   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 000626   100003 634500                    EPPR4   3,,PR1
         1 000627   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 000630   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 000631   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000632   000000 701000 xent               TSX1    DFR$CONVERT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:72   
         1 000633   000665 702000 1                  TSX2    BAD_VALUE

      408     7199    3                  OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( BAD_VALUE );
      409     7200    3                SHIFT_DOUBLE.VALUE = BIN_VAL;

   7200  1 000634   200063 236100                    LDQ     BIN_VAL,,AUTO
         1 000635   000024 736000                    QLS     20
         1 000636   200007 676100                    ERQ     INSTR,,AUTO
         1 000637   000174 376003                    ANQ     124,DU
         1 000640   200007 656100                    ERSQ    INSTR,,AUTO

      410     7201    4                IF SHIFT_DOUBLE.VALUE ~= BIN_VAL THEN DO;

   7201  1 000641   200007 236100                    LDQ     INSTR,,AUTO
         1 000642   000024 772000                    QRL     20
         1 000643   000037 376007                    ANQ     31,DL
         1 000644   200063 116100                    CMPQ    BIN_VAL,,AUTO
         1 000645   000655 600000 1                  TZE     s:7207

      411     7202    4                     S_D.ERROR = E@BAD_VALUE;

   7202  1 000646   000451 235007                    LDA     297,DL
         1 000647   000000 470400 xsym               LDP0    S_D$
         1 000650   000013 755100                    STA     11,,PR0

      412     7203    4                     SHIFT_DOUBLE.VALUE = 0;

   7203  1 000651   000003 236000 2                  LDQ     3
         1 000652   200007 356100                    ANSQ    INSTR,,AUTO

      413     7204    4                     ALTRETURN;

   7204  1 000653   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000654   000000 702211                    TSX2  ! 0,X1

      414     7205    4                END;
      415     7206                                                /**/
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:73   
      416     7207    3                ASSMBLD_INSTR.OPS(0) = INSTR;

   7207  1 000655   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000656   200007 236100                    LDQ     INSTR,,AUTO
         1 000657   000024 772000                    QRL     20
         1 000660   000001 756100                    STQ     1,,PR0

      417     7208    3                ASSMBLD_INSTR.SIZE = 1;

   7208  1 000661   000001 235007                    LDA     1,DL
         1 000662   000000 755100                    STA     0,,PR0

      418     7209    3           END;

      419     7210    2           RETURN;

   7210  1 000663   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000664   000001 702211                    TSX2  ! 1,X1

      420     7211                                                /**/
      421     7212    2   BAD_VALUE : SHIFT_DOUBLE.VALUE = 0;     /* Bogus shift count                  */

   7212  1 000665   000003 236000 2     BAD_VALUE    LDQ     3
         1 000666   200007 356100                    ANSQ    INSTR,,AUTO

      422     7213    2   ALT4:   ALTRETURN;

   7213  1 000667   200062 221300       ALT4         LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000670   000000 702211                    TSX2  ! 0,X1

      423     7214    2   END SHIFT_DOUBLE_ENCODE;
      424     7215        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:74   
      425     7216    1   I_O_ENCODE: PROC ALTRET;

   7216  1 000671   200062 741300       I_O_ENCODE   STX1  ! BRANCH_FLAG+1,,AUTO

      426     7217    2           IF IOLD_INSTR_FLAG AND

   7217  1 000672   200012 234100                    SZN     IOLD_INSTR_FLAG,,AUTO
         1 000673   000700 605000 1                  TPL     s:7220
         1 000674   200052 235100                    LDA     NUMBER_SUBLKS,,AUTO
         1 000675   000004 115007                    CMPA    4,DL
         1 000676   000700 600000 1                  TZE     s:7220

      427     7218    2             NUMBER_SUBLKS ~= 4
      428     7219    2           THEN ALTRETURN;

   7219  1 000677   000000 702211                    TSX2  ! 0,X1

      429     7220    2           IF NOT IOLD_INSTR_FLAG AND

   7220  1 000700   200012 234100                    SZN     IOLD_INSTR_FLAG,,AUTO
         1 000701   000706 604000 1                  TMI     s:7223
         1 000702   200052 235100                    LDA     NUMBER_SUBLKS,,AUTO
         1 000703   000003 115007                    CMPA    3,DL
         1 000704   000706 600000 1                  TZE     s:7223

      430     7221    2             NUMBER_SUBLKS ~= 3
      431     7222    2           THEN ALTRETURN;

   7222  1 000705   000000 702211                    TSX2  ! 0,X1

      432     7223    2           TASSMBLD_INSTR.SIZE = 0;

   7223  1 000706   200015 450100                    STZ     TASSMBLD_INSTR,,AUTO

      433     7224    3           DO I = 0 TO NUMBER_SUBLKS - 2;

   7224  1 000707   200041 450100                    STZ     I,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:75   
         1 000710   000732 710000 1                  TRA     s:7230+3

      434     7225    3                CALL ENCODE_ADDR_SYL ALTRET(ARET);

   7225  1 000711   000762 701000 1                  TSX1    ENCODE_ADDR_SYL
         1 000712   000760 702000 1                  TSX2    ARET

      435     7226    3                TASSMBLD_INSTR.OPS(I) = INSTR;

   7226  1 000713   200041 720100                    LXL0    I,,AUTO
         1 000714   200007 236100                    LDQ     INSTR,,AUTO
         1 000715   000024 772000                    QRL     20
         1 000716   200016 756110                    STQ     TASSMBLD_INSTR+1,X0,AUTO

      436     7227    3                TASSMBLD_INSTR.SIZE = TASSMBLD_INSTR.SIZE + 1;

   7227  1 000717   200015 235100                    LDA     TASSMBLD_INSTR,,AUTO
         1 000720   000001 035007                    ADLA    1,DL
         1 000721   200015 755100                    STA     TASSMBLD_INSTR,,AUTO

      437     7228    3                INSTR = 0;

   7228  1 000722   000000 236000 2                  LDQ     0
         1 000723   200007 356100                    ANSQ    INSTR,,AUTO

      438     7229    3                SUBLK_NUMBER = SUBLK_NUMBER + 1;

   7229  1 000724   200043 235100                    LDA     SUBLK_NUMBER,,AUTO
         1 000725   000001 035007                    ADLA    1,DL
         1 000726   200043 755100                    STA     SUBLK_NUMBER,,AUTO

      439     7230    3           END;

   7230  1 000727   200041 235100                    LDA     I,,AUTO
         1 000730   000001 035007                    ADLA    1,DL
         1 000731   200041 755100                    STA     I,,AUTO
         1 000732   200052 236100                    LDQ     NUMBER_SUBLKS,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:76   
         1 000733   000002 136007                    SBLQ    2,DL
         1 000734   000737 604000 1                  TMI     s:7231
         1 000735   200041 116100                    CMPQ    I,,AUTO
         1 000736   000711 603000 1                  TRC     s:7225

      440     7231    2           ASSMBLD_INSTR.SIZE = TASSMBLD_INSTR.SIZE;

   7231  1 000737   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000740   200015 235100                    LDA     TASSMBLD_INSTR,,AUTO
         1 000741   000000 755100                    STA     0,,PR0

      441     7232    3           DO I = 0 TO ASSMBLD_INSTR.SIZE-1;

   7232  1 000742   200041 450100                    STZ     I,,AUTO
         1 000743   000753 710000 1                  TRA     s:7234+3

      442     7233    3                ASSMBLD_INSTR.OPS(I) = TASSMBLD_INSTR.OPS(I);

   7233  1 000744   200041 720100                    LXL0    I,,AUTO
         1 000745   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 000746   200016 235110                    LDA     TASSMBLD_INSTR+1,X0,AUTO
         1 000747   000001 755110                    STA     1,X0,PR0

      443     7234    3           END;

   7234  1 000750   200041 236100                    LDQ     I,,AUTO
         1 000751   000001 036007                    ADLQ    1,DL
         1 000752   200041 756100                    STQ     I,,AUTO
         1 000753   200041 236100                    LDQ     I,,AUTO
         1 000754   000000 116100                    CMPQ    0,,PR0
         1 000755   000744 602000 1                  TNC     s:7233

      444     7235    2           RETURN;

   7235  1 000756   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000757   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:77   
      445     7236    2   ARET:   ALTRETURN;

   7236  1 000760   200062 221300       ARET         LDX1  ! BRANCH_FLAG+1,,AUTO
         1 000761   000000 702211                    TSX2  ! 0,X1

      446     7237    2   END I_O_ENCODE;
      447     7238        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:78   
      448     7239    1   ENCODE_ADDR_SYL: PROC ALTRET;

   7239  1 000762   200064 741300       ENCODE_ADDR* STX1  ! MASK+1,,AUTO

      449     7240                                                /**/
      450     7241    2   DCL OPERAND_CODE UBIN WORD;
      451     7242    2   DCL DFR$CONVERT ENTRY(2) ALTRET;
      452     7243    2   DCL BIN_VAL SBIN WORD;
      453     7244    2   DCL 1 HEX_STRING,
      454     7245    2         2 LEN UBIN BYTE UNAL,
      455     7246    2         2 TEXT CHAR(16) UNAL;
      456     7247                                                /**/
      457     7248    2   DCL VALUE UBIN WORD;
      458     7249    2   DCL ADDRESS UBIN WORD;
      459     7250    2   DCL SADDRESS REDEF ADDRESS SBIN;
      460     7251    2   DCL 1 R_ADDRESS REDEF ADDRESS,
      461     7252    2         2 * UBIN(16) UNAL,
      462     7253    2         2 HIGH_ORDER_BITS UBIN(4) UNAL,
      463     7254    2         2 LOW_ORDER_BITS UBIN(16) UNAL;
      464     7255                                                /**/
      465     7256    2   DCL 1 R_ADDRESS_32BITS REDEF ADDRESS,
      466     7257    2         2 * UBIN(4) UNAL,
      467     7258    2         2 HIGH_ORDER_BITS UBIN(16) UNAL,
      468     7259    2         2 LOW_ORDER_BITS UBIN(16) UNAL;
      469     7260                                                /**/
      470     7261    2   DCL SAVED_NODE$ PTR;
      471     7262    2   DCL DISPLACEMENT SBIN WORD;
      472     7263                                                /**/
      473     7264    2          IF SUBLK_NUMBER + 1 > NUMBER_SUBLKS THEN CALL MISSING_OPERAND ALTRET (ALT5);

   7264  1 000763   200043 236100                    LDQ     SUBLK_NUMBER,,AUTO
         1 000764   200052 116100                    CMPQ    NUMBER_SUBLKS,,AUTO
         1 000765   000770 602000 1                  TNC     s:7265

   7264  1 000766   003252 701000 1                  TSX1    MISSING_OPERAND
         1 000767   002431 702000 1                  TSX2    ALT5

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:79   
      474     7265    2           OPERAND_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.CODE;

   7265  1 000770   200014 470500                    LDP0    NODE$,,AUTO
         1 000771   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 000772   000003 471510                    LDP1    3,X0,PR0
         1 000773   100000 236100                    LDQ     0,,PR1
         1 000774   777777 376007                    ANQ     -1,DL
         1 000775   200065 756100                    STQ     OPERAND_CODE,,AUTO

      475     7266    2           SAVED_NODE$ = NODE$;

   7266  1 000776   200014 236100                    LDQ     NODE$,,AUTO
         1 000777   200076 756100                    STQ     SAVED_NODE$,,AUTO

      476     7267    3   ENCODE : DO CASE( OPERAND_CODE );

   7267  1 001000   200065 235100       ENCODE       LDA     OPERAND_CODE,,AUTO
         1 001001   000027 115007                    CMPA    23,DL
         1 001002   001004 602005 1                  TNC     ENCODE+4,AL
         1 001003   002431 710000 1                  TRA     ALT5
         1 001004   002431 710000 1                  TRA     ALT5
         1 001005   002431 710000 1                  TRA     ALT5
         1 001006   002431 710000 1                  TRA     ALT5
         1 001007   001033 710000 1                  TRA     s:7270
         1 001010   001076 710000 1                  TRA     s:7290
         1 001011   001142 710000 1                  TRA     s:7308
         1 001012   001211 710000 1                  TRA     s:7321
         1 001013   001250 710000 1                  TRA     s:7336
         1 001014   001307 710000 1                  TRA     s:7351
         1 001015   001355 710000 1                  TRA     s:7364
         1 001016   001424 710000 1                  TRA     s:7377
         1 001017   001451 710000 1                  TRA     s:7386
         1 001020   001477 710000 1                  TRA     s:7396
         1 001021   001551 710000 1                  TRA     s:7413
         1 001022   001617 710000 1                  TRA     s:7426
         1 001023   001756 710000 1                  TRA     s:7461
         1 001024   002004 710000 1                  TRA     s:7471
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:80   
         1 001025   002032 710000 1                  TRA     s:7481
         1 001026   002113 710000 1                  TRA     s:7500
         1 001027   002170 710000 1                  TRA     s:7522
         1 001030   002225 710000 1                  TRA     s:7534
         1 001031   002266 710000 1                  TRA     s:7547
         1 001032   002370 710000 1                  TRA     s:7572

      477     7268                                                /**/
      478     7269    3            CASE(3);             /* Based indexed autodec or ,B_REG,R_REG,push */

      479     7270    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7270  1 001033   100003 473500                    LDP3    3,,PR1
         1 001034   300000 236100                    LDQ     0,,PR3
         1 001035   777777 376007                    ANQ     -1,DL
         1 001036   200040 756100                    STQ     REGISTER_CODE,,AUTO

      480     7271    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      481     7272    4              IF REGISTER_CODE <= 3 THEN DO; /* Must be <= 3 for it to be a push */

   7272  1 001037   000004 116007                    CMPQ    4,DL
         1 001040   001074 603000 1                  TRC     s:7285

      482     7273    4                   ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7273  1 001041   000024 736000                    QLS     20
         1 001042   200007 676100                    ERQ     INSTR,,AUTO
         1 001043   000034 376003                    ANQ     28,DU
         1 001044   200007 656100                    ERSQ    INSTR,,AUTO

      483     7274    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7274  1 001045   000040 236003                    LDQ     32,DU
         1 001046   200007 256100                    ORSQ    INSTR,,AUTO

      484     7275    4                   REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:81   
   7275  1 001047   100004 474500                    LDP4    4,,PR1
         1 001050   400000 236100                    LDQ     0,,PR4
         1 001051   777777 376007                    ANQ     -1,DL
         1 001052   200040 756100                    STQ     REGISTER_CODE,,AUTO

      485     7276    4                     -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
              7276                              /* R reg of the instruction */
      486     7277    4                   REGISTER_CODE = REGISTER_CODE - 3;

   7277  1 001053   000003 136007                    SBLQ    3,DL
         1 001054   200040 756100                    STQ     REGISTER_CODE,,AUTO

      487     7278    5                   IF REGISTER_CODE <=7 THEN DO;

   7278  1 001055   000010 116007                    CMPQ    8,DL
         1 001056   001072 603000 1                  TRC     s:7283

      488     7279    5                        ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;

   7279  1 001057   000030 736000                    QLS     24
         1 001060   200007 676100                    ERQ     INSTR,,AUTO
         1 001061   000700 376003                    ANQ     448,DU
         1 001062   200007 656100                    ERSQ    INSTR,,AUTO

      489     7280    5                        ASSMBLD_INSTR.SIZE = 1;

   7280  1 001063   000001 236007                    LDQ     1,DL
         1 001064   200003 475500                    LDP5    @ASSMBLD_INSTR,,AUTO
         1 001065   500000 756100                    STQ     0,,PR5

      490     7281    5                        ASSMBLD_INSTR.OPS(0) = INSTR;

   7281  1 001066   200007 236100                    LDQ     INSTR,,AUTO
         1 001067   000024 772000                    QRL     20
         1 001070   500001 756100                    STQ     1,,PR5

      491     7282    5                   END;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:82   

   7282  1 001071   002433 710000 1                  TRA     s:7588

      492     7283    4                   ELSE ALTRETURN;

   7283  1 001072   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001073   000000 702211                    TSX2  ! 0,X1

      493     7284    4              END;
      494     7285    3              ELSE ALTRETURN;

   7285  1 001074   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001075   000000 702211                    TSX2  ! 0,X1

      495     7286                                                /**/
      496     7287                                                /**/
      497     7288                                                /**/
      498     7289    3            CASE(4);                  /* Based indexed autoinc or ,bn,rn,pull    */

      499     7290    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7290  1 001076   100003 473500                    LDP3    3,,PR1
         1 001077   300000 236100                    LDQ     0,,PR3
         1 001100   777777 376007                    ANQ     -1,DL
         1 001101   200040 756100                    STQ     REGISTER_CODE,,AUTO

      500     7291    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      501     7292    4              IF REGISTER_CODE <= 3 THEN DO; /* Also must be <= 3 */

   7292  1 001102   000004 116007                    CMPQ    4,DL
         1 001103   001140 603000 1                  TRC     s:7305

      502     7293    4                   ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE + 4;
              7293                            /* N field > 4 makes it pull */

   7293  1 001104   000004 036007                    ADLQ    4,DL
         1 001105   000024 736000                    QLS     20
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:83   
         1 001106   200007 676100                    ERQ     INSTR,,AUTO
         1 001107   000034 376003                    ANQ     28,DU
         1 001110   200007 656100                    ERSQ    INSTR,,AUTO

      503     7294    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7294  1 001111   000040 236003                    LDQ     32,DU
         1 001112   200007 256100                    ORSQ    INSTR,,AUTO

      504     7295    4                   REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7295  1 001113   100004 474500                    LDP4    4,,PR1
         1 001114   400000 236100                    LDQ     0,,PR4
         1 001115   777777 376007                    ANQ     -1,DL
         1 001116   200040 756100                    STQ     REGISTER_CODE,,AUTO

      505     7296    4                     -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
              7296                              /* R reg of the instruction */
      506     7297    4                   REGISTER_CODE = REGISTER_CODE - 3;

   7297  1 001117   000003 136007                    SBLQ    3,DL
         1 001120   200040 756100                    STQ     REGISTER_CODE,,AUTO

      507     7298    5                   IF REGISTER_CODE <=7 THEN DO;

   7298  1 001121   000010 116007                    CMPQ    8,DL
         1 001122   001136 603000 1                  TRC     s:7303

      508     7299    5                        ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;

   7299  1 001123   000030 736000                    QLS     24
         1 001124   200007 676100                    ERQ     INSTR,,AUTO
         1 001125   000700 376003                    ANQ     448,DU
         1 001126   200007 656100                    ERSQ    INSTR,,AUTO

      509     7300    5                        ASSMBLD_INSTR.SIZE = 1;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:84   
   7300  1 001127   000001 236007                    LDQ     1,DL
         1 001130   200003 475500                    LDP5    @ASSMBLD_INSTR,,AUTO
         1 001131   500000 756100                    STQ     0,,PR5

      510     7301    5                        ASSMBLD_INSTR.OPS(0) = INSTR;

   7301  1 001132   200007 236100                    LDQ     INSTR,,AUTO
         1 001133   000024 772000                    QRL     20
         1 001134   500001 756100                    STQ     1,,PR5

      511     7302    5                   END;

   7302  1 001135   002433 710000 1                  TRA     s:7588

      512     7303    4                   ELSE ALTRETURN;

   7303  1 001136   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001137   000000 702211                    TSX2  ! 0,X1

      513     7304    4              END;
      514     7305    3              ELSE ALTRETURN;

   7305  1 001140   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001141   000000 702211                    TSX2  ! 0,X1

      515     7306                                                /**/
      516     7307    3            CASE(5);                       /* Indirect indexed or *EXP,R_REG     */

      517     7308    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7308  1 001142   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 001143   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 001144   100003 634500                    EPPR4   3,,PR1
         1 001145   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 001146   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001147   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001150   000000 701000 xent               TSX1    DFR$CONVERT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:85   
         1 001151   002431 702000 1                  TSX2    ALT5

      518     7309    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      519     7310    3              ADDRESS = BIN_VAL;

   7310  1 001152   200066 235100                    LDA     BIN_VAL,,AUTO
         1 001153   200075 755100                    STA     ADDRESS,,AUTO

      520     7311    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7311  1 001154   000004 236000 2                  LDQ     4
         1 001155   200007 356100                    ANSQ    INSTR,,AUTO

      521     7312    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7312  1 001156   000040 236003                    LDQ     32,DU
         1 001157   200007 256100                    ORSQ    INSTR,,AUTO

      522     7313    3              ADDR_SYL.FRAME.M_FIELD = SAVED_NODE$

   7313  1 001160   200076 470500                    LDP0    SAVED_NODE$,,AUTO
         1 001161   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 001162   000003 471510                    LDP1    3,X0,PR0
         1 001163   100004 473500                    LDP3    4,,PR1
         1 001164   300000 236100                    LDQ     0,,PR3
         1 001165   777777 376007                    ANQ     -1,DL
         1 001166   000007 136007                    SBLQ    7,DL
         1 001167   000030 736000                    QLS     24
         1 001170   200007 676100                    ERQ     INSTR,,AUTO
         1 001171   000700 376003                    ANQ     448,DU
         1 001172   200007 656100                    ERSQ    INSTR,,AUTO

      523     7314    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -
              7314                         7;
      524     7315    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7315  1 001173   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:86   
         1 001174   200007 236100                    LDQ     INSTR,,AUTO
         1 001175   000024 772000                    QRL     20
         1 001176   400001 756100                    STQ     1,,PR4

      525     7316    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;

   7316  1 001177   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001200   000020 772000                    QRL     16
         1 001201   000017 376007                    ANQ     15,DL
         1 001202   400002 756100                    STQ     2,,PR4

      526     7317    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;

   7317  1 001203   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001204   177777 376007                    ANQ     65535,DL
         1 001205   400003 756100                    STQ     3,,PR4

      527     7318    3              ASSMBLD_INSTR.SIZE = 3;

   7318  1 001206   000003 235007                    LDA     3,DL
         1 001207   400000 755100                    STA     0,,PR4
         1 001210   002433 710000 1                  TRA     s:7588

      528     7319                                                /**/
      529     7320    3            CASE(6);                       /* Based indexed or ,B_REG,R_REG      */

      530     7321    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7321  1 001211   100003 473500                    LDP3    3,,PR1
         1 001212   300000 236100                    LDQ     0,,PR3
         1 001213   777777 376007                    ANQ     -1,DL
         1 001214   200040 756100                    STQ     REGISTER_CODE,,AUTO

      531     7322    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      532     7323    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7323  1 001215   000024 736000                    QLS     20
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:87   
         1 001216   200007 676100                    ERQ     INSTR,,AUTO
         1 001217   000034 376003                    ANQ     28,DU
         1 001220   200007 656100                    ERSQ    INSTR,,AUTO

      533     7324    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7324  1 001221   000005 236000 2                  LDQ     5
         1 001222   200007 356100                    ANSQ    INSTR,,AUTO

      534     7325    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7325  1 001223   100004 474500                    LDP4    4,,PR1
         1 001224   400000 236100                    LDQ     0,,PR4
         1 001225   777777 376007                    ANQ     -1,DL
         1 001226   200040 756100                    STQ     REGISTER_CODE,,AUTO

      535     7326    3                -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE; /* R reg of the instruction */
      536     7327    3              REGISTER_CODE = REGISTER_CODE - 7;

   7327  1 001227   000007 136007                    SBLQ    7,DL
         1 001230   200040 756100                    STQ     REGISTER_CODE,,AUTO

      537     7328    4              IF REGISTER_CODE <=3 THEN DO;

   7328  1 001231   000004 116007                    CMPQ    4,DL
         1 001232   001246 603000 1                  TRC     s:7333

      538     7329    4                   ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;

   7329  1 001233   000030 736000                    QLS     24
         1 001234   200007 676100                    ERQ     INSTR,,AUTO
         1 001235   000700 376003                    ANQ     448,DU
         1 001236   200007 656100                    ERSQ    INSTR,,AUTO

      539     7330    4                   ASSMBLD_INSTR.SIZE = 1;

   7330  1 001237   000001 236007                    LDQ     1,DL
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:88   
         1 001240   200003 475500                    LDP5    @ASSMBLD_INSTR,,AUTO
         1 001241   500000 756100                    STQ     0,,PR5

      540     7331    4                   ASSMBLD_INSTR.OPS(0) = INSTR;

   7331  1 001242   200007 236100                    LDQ     INSTR,,AUTO
         1 001243   000024 772000                    QRL     20
         1 001244   500001 756100                    STQ     1,,PR5

      541     7332    4              END;

   7332  1 001245   002433 710000 1                  TRA     s:7588

      542     7333    3              ELSE ALTRETURN;

   7333  1 001246   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001247   000000 702211                    TSX2  ! 0,X1

      543     7334                                                /**/
      544     7335    3            CASE(7);             /* Based indirect indexed or *,B_REG,_R_REG */

      545     7336    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7336  1 001250   100003 473500                    LDP3    3,,PR1
         1 001251   300000 236100                    LDQ     0,,PR3
         1 001252   777777 376007                    ANQ     -1,DL
         1 001253   200040 756100                    STQ     REGISTER_CODE,,AUTO

      546     7337    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      547     7338    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7338  1 001254   000024 736000                    QLS     20
         1 001255   200007 676100                    ERQ     INSTR,,AUTO
         1 001256   000034 376003                    ANQ     28,DU
         1 001257   200007 656100                    ERSQ    INSTR,,AUTO

      548     7339    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:89   

   7339  1 001260   000040 236003                    LDQ     32,DU
         1 001261   200007 256100                    ORSQ    INSTR,,AUTO

      549     7340    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7340  1 001262   100004 474500                    LDP4    4,,PR1
         1 001263   400000 236100                    LDQ     0,,PR4
         1 001264   777777 376007                    ANQ     -1,DL
         1 001265   200040 756100                    STQ     REGISTER_CODE,,AUTO

      550     7341    3                -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE; /* R reg of the instruction */
      551     7342    3              REGISTER_CODE = REGISTER_CODE - 7;

   7342  1 001266   000007 136007                    SBLQ    7,DL
         1 001267   200040 756100                    STQ     REGISTER_CODE,,AUTO

      552     7343    4              IF REGISTER_CODE <= 3 THEN DO;

   7343  1 001270   000004 116007                    CMPQ    4,DL
         1 001271   001305 603000 1                  TRC     s:7348

      553     7344    4                   ADDR_SYL.FRAME.M_FIELD = REGISTER_CODE;

   7344  1 001272   000030 736000                    QLS     24
         1 001273   200007 676100                    ERQ     INSTR,,AUTO
         1 001274   000700 376003                    ANQ     448,DU
         1 001275   200007 656100                    ERSQ    INSTR,,AUTO

      554     7345    4                   ASSMBLD_INSTR.SIZE = 1;

   7345  1 001276   000001 236007                    LDQ     1,DL
         1 001277   200003 475500                    LDP5    @ASSMBLD_INSTR,,AUTO
         1 001300   500000 756100                    STQ     0,,PR5

      555     7346    4                   ASSMBLD_INSTR.OPS(0) = INSTR;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:90   
   7346  1 001301   200007 236100                    LDQ     INSTR,,AUTO
         1 001302   000024 772000                    QRL     20
         1 001303   500001 756100                    STQ     1,,PR5

      556     7347    4              END;

   7347  1 001304   002433 710000 1                  TRA     s:7588

      557     7348    3              ELSE ALTRETURN;

   7348  1 001305   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001306   000000 702211                    TSX2  ! 0,X1

      558     7349                                                /**/
      559     7350    3            CASE(8);                  /* Base relative indirect or *EXP,B_REG    */

      560     7351    3              INDEX_FLAG = TRUE;

   7351  1 001307   000225 236000 0                  LDQ     TRUE
         1 001310   400000 376003                    ANQ     -131072,DU
         1 001311   200010 756100                    STQ     INDEX_FLAG,,AUTO

      561     7352    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7352  1 001312   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 001313   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 001314   100003 634500                    EPPR4   3,,PR1
         1 001315   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 001316   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001317   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001320   000000 701000 xent               TSX1    DFR$CONVERT
         1 001321   002431 702000 1                  TSX2    ALT5

      562     7353    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      563     7354    3              ADDRESS = BIN_VAL;

   7354  1 001322   200066 235100                    LDA     BIN_VAL,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:91   
         1 001323   200075 755100                    STA     ADDRESS,,AUTO

      564     7355    3              ADDR_SYL.FRAME.M_FIELD = 4;

   7355  1 001324   200007 236100                    LDQ     INSTR,,AUTO
         1 001325   000006 376000 2                  ANQ     6
         1 001326   000400 276003                    ORQ     256,DU
         1 001327   200007 756100                    STQ     INSTR,,AUTO

      565     7356    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7356  1 001330   000040 236003                    LDQ     32,DU
         1 001331   200007 256100                    ORSQ    INSTR,,AUTO

      566     7357    3              ADDR_SYL.FRAME.N_FIELD = SAVED_NODE$

   7357  1 001332   200076 470500                    LDP0    SAVED_NODE$,,AUTO
         1 001333   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 001334   000003 471510                    LDP1    3,X0,PR0
         1 001335   100004 473500                    LDP3    4,,PR1
         1 001336   300000 236100                    LDQ     0,,PR3
         1 001337   000024 736000                    QLS     20
         1 001340   200007 676100                    ERQ     INSTR,,AUTO
         1 001341   000034 376003                    ANQ     28,DU
         1 001342   200007 656100                    ERSQ    INSTR,,AUTO

      567     7358    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
      568     7359    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7359  1 001343   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001344   200007 236100                    LDQ     INSTR,,AUTO
         1 001345   000024 772000                    QRL     20
         1 001346   400001 756100                    STQ     1,,PR4

      569     7360    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;

   7360  1 001347   200075 236100                    LDQ     ADDRESS,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:92   
         1 001350   177777 376007                    ANQ     65535,DL
         1 001351   400002 756100                    STQ     2,,PR4

      570     7361    3              ASSMBLD_INSTR.SIZE = 2;

   7361  1 001352   000002 235007                    LDA     2,DL
         1 001353   400000 755100                    STA     0,,PR4
         1 001354   002433 710000 1                  TRA     s:7588

      571     7362                                                /**/
      572     7363    3            CASE(9);                       /* Indexed or exp, or EXP,R_REG       */

      573     7364    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7364  1 001355   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 001356   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 001357   100003 634500                    EPPR4   3,,PR1
         1 001360   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 001361   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001362   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001363   000000 701000 xent               TSX1    DFR$CONVERT
         1 001364   002431 702000 1                  TSX2    ALT5

      574     7365    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      575     7366    3              ADDRESS = BIN_VAL;

   7366  1 001365   200066 235100                    LDA     BIN_VAL,,AUTO
         1 001366   200075 755100                    STA     ADDRESS,,AUTO

      576     7367    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7367  1 001367   000004 236000 2                  LDQ     4
         1 001370   200007 356100                    ANSQ    INSTR,,AUTO

      577     7368    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7368  1 001371   000005 236000 2                  LDQ     5
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:93   
         1 001372   200007 356100                    ANSQ    INSTR,,AUTO

      578     7369    3              ADDR_SYL.FRAME.M_FIELD = SAVED_NODE$

   7369  1 001373   200076 470500                    LDP0    SAVED_NODE$,,AUTO
         1 001374   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 001375   000003 471510                    LDP1    3,X0,PR0
         1 001376   100004 473500                    LDP3    4,,PR1
         1 001377   300000 236100                    LDQ     0,,PR3
         1 001400   777777 376007                    ANQ     -1,DL
         1 001401   000007 136007                    SBLQ    7,DL
         1 001402   000030 736000                    QLS     24
         1 001403   200007 676100                    ERQ     INSTR,,AUTO
         1 001404   000700 376003                    ANQ     448,DU
         1 001405   200007 656100                    ERSQ    INSTR,,AUTO

      579     7370    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -
              7370                         7;
      580     7371    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7371  1 001406   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001407   200007 236100                    LDQ     INSTR,,AUTO
         1 001410   000024 772000                    QRL     20
         1 001411   400001 756100                    STQ     1,,PR4

      581     7372    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;

   7372  1 001412   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001413   000020 772000                    QRL     16
         1 001414   000017 376007                    ANQ     15,DL
         1 001415   400002 756100                    STQ     2,,PR4

      582     7373    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;

   7373  1 001416   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001417   177777 376007                    ANQ     65535,DL
         1 001420   400003 756100                    STQ     3,,PR4
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:94   

      583     7374    3              ASSMBLD_INSTR.SIZE = 3;

   7374  1 001421   000003 235007                    LDA     3,DL
         1 001422   400000 755100                    STA     0,,PR4
         1 001423   002433 710000 1                  TRA     s:7588

      584     7375                                                /**/
      585     7376    3            CASE(10);                      /* Based autodec, or ,B_REG,PUSH      */

      586     7377    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7377  1 001424   100003 473500                    LDP3    3,,PR1
         1 001425   300000 236100                    LDQ     0,,PR3
         1 001426   777777 376007                    ANQ     -1,DL
         1 001427   200040 756100                    STQ     REGISTER_CODE,,AUTO

      587     7378    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      588     7379    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7379  1 001430   000024 736000                    QLS     20
         1 001431   200007 676100                    ERQ     INSTR,,AUTO
         1 001432   000034 376003                    ANQ     28,DU
         1 001433   200007 656100                    ERSQ    INSTR,,AUTO

      589     7380    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7380  1 001434   000005 236000 2                  LDQ     5
         1 001435   200007 356100                    ANSQ    INSTR,,AUTO

      590     7381    3              ADDR_SYL.FRAME.M_FIELD = 6;  /* 6 makes it a push  */

   7381  1 001436   200007 236100                    LDQ     INSTR,,AUTO
         1 001437   000006 376000 2                  ANQ     6
         1 001440   000600 276003                    ORQ     384,DU
         1 001441   200007 756100                    STQ     INSTR,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:95   
      591     7382    3              ASSMBLD_INSTR.SIZE = 1;

   7382  1 001442   000001 235007                    LDA     1,DL
         1 001443   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001444   400000 755100                    STA     0,,PR4

      592     7383    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7383  1 001445   200007 236100                    LDQ     INSTR,,AUTO
         1 001446   000024 772000                    QRL     20
         1 001447   400001 756100                    STQ     1,,PR4
         1 001450   002433 710000 1                  TRA     s:7588

      593     7384                                                /**/
      594     7385    3            CASE(11);                      /* Based autoinc or ,B_REG,PULL       */

      595     7386    3              INDEX_FLAG = TRUE;

   7386  1 001451   000225 236000 0                  LDQ     TRUE
         1 001452   400000 376003                    ANQ     -131072,DU
         1 001453   200010 756100                    STQ     INDEX_FLAG,,AUTO

      596     7387    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7387  1 001454   100003 473500                    LDP3    3,,PR1
         1 001455   300000 236100                    LDQ     0,,PR3
         1 001456   777777 376007                    ANQ     -1,DL
         1 001457   200040 756100                    STQ     REGISTER_CODE,,AUTO

      597     7388    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      598     7389    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7389  1 001460   000024 736000                    QLS     20
         1 001461   200007 676100                    ERQ     INSTR,,AUTO
         1 001462   000034 376003                    ANQ     28,DU
         1 001463   200007 656100                    ERSQ    INSTR,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:96   
      599     7390    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7390  1 001464   000005 236000 2                  LDQ     5
         1 001465   200007 356100                    ANSQ    INSTR,,AUTO

      600     7391    3              ADDR_SYL.FRAME.M_FIELD = 7;  /* 7 makes it a pull  */

   7391  1 001466   000700 236003                    LDQ     448,DU
         1 001467   200007 256100                    ORSQ    INSTR,,AUTO

      601     7392    3              ASSMBLD_INSTR.SIZE = 1;

   7392  1 001470   000001 235007                    LDA     1,DL
         1 001471   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001472   400000 755100                    STA     0,,PR4

      602     7393    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7393  1 001473   200007 236100                    LDQ     INSTR,,AUTO
         1 001474   000024 772000                    QRL     20
         1 001475   400001 756100                    STQ     1,,PR4
         1 001476   002433 710000 1                  TRA     s:7588

      603     7394                                                /**/
      604     7395    3            CASE(12);                      /* Rel indirect or *Exp,prel          */

      605     7396    3              INDEX_FLAG = TRUE;

   7396  1 001477   000225 236000 0                  LDQ     TRUE
         1 001500   400000 376003                    ANQ     -131072,DU
         1 001501   200010 756100                    STQ     INDEX_FLAG,,AUTO

      606     7397    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7397  1 001502   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 001503   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 001504   100003 634500                    EPPR4   3,,PR1
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:97   
         1 001505   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 001506   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001507   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001510   000000 701000 xent               TSX1    DFR$CONVERT
         1 001511   002431 702000 1                  TSX2    ALT5

      607     7398    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      608     7399    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS - 1;

   7399  1 001512   200004 470500                    LDP0    @CURRENT_ADDRESS,,AUTO
         1 001513   200066 236100                    LDQ     BIN_VAL,,AUTO
         1 001514   000000 136100                    SBLQ    0,,PR0
         1 001515   000001 136007                    SBLQ    1,DL
         1 001516   200077 756100                    STQ     DISPLACEMENT,,AUTO

      609     7400    4              IF DISPLACEMENT < PREL_LOWER_LIMIT OR DISPLACEMENT > PREL_UPPER_LIMIT
              7400                       THEN DO;

   7400  1 001517   000007 116000 2                  CMPQ    7
         1 001520   001523 604000 1                  TMI     BAD_VALUE
         1 001521   077777 116007                    CMPQ    32767,DL
         1 001522   001530 604400 1                  TMOZ    s:7405

   7398  1 001523                       BAD_VALUE    null
      610     7401    4   BAD_VALUE:      ;
      611     7402    4                   S_D.ERROR = E@BAD_VALUE;

   7402  1 001523   000451 235007                    LDA     297,DL
         1 001524   000000 470400 xsym               LDP0    S_D$
         1 001525   000013 755100                    STA     11,,PR0

      612     7403    4                   ALTRETURN;

   7403  1 001526   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 001527   000000 702211                    TSX2  ! 0,X1

      613     7404    4              END;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:98   
      614     7405    3              ADDR_SYL.FRAME.M_FIELD = 4;

   7405  1 001530   200007 236100                    LDQ     INSTR,,AUTO
         1 001531   000006 376000 2                  ANQ     6
         1 001532   000400 276003                    ORQ     256,DU
         1 001533   200007 756100                    STQ     INSTR,,AUTO

      615     7406    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7406  1 001534   000040 236003                    LDQ     32,DU
         1 001535   200007 256100                    ORSQ    INSTR,,AUTO

      616     7407    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7407  1 001536   000004 236000 2                  LDQ     4
         1 001537   200007 356100                    ANSQ    INSTR,,AUTO

      617     7408    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7408  1 001540   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 001541   200007 236100                    LDQ     INSTR,,AUTO
         1 001542   000024 772000                    QRL     20
         1 001543   100001 756100                    STQ     1,,PR1

      618     7409    3              ASSMBLD_INSTR.OPS(1) = DISPLACEMENT;

   7409  1 001544   200077 235100                    LDA     DISPLACEMENT,,AUTO
         1 001545   100002 755100                    STA     2,,PR1

      619     7410    3              ASSMBLD_INSTR.SIZE = 2;

   7410  1 001546   000002 235007                    LDA     2,DL
         1 001547   100000 755100                    STA     0,,PR1
         1 001550   002433 710000 1                  TRA     s:7588

      620     7411                                                /**/
      621     7412    3            CASE(13);                      /* Base relative or EXP,B_REG         */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:99   

      622     7413    3              INDEX_FLAG = TRUE;

   7413  1 001551   000225 236000 0                  LDQ     TRUE
         1 001552   400000 376003                    ANQ     -131072,DU
         1 001553   200010 756100                    STQ     INDEX_FLAG,,AUTO

      623     7414    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7414  1 001554   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 001555   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 001556   100003 634500                    EPPR4   3,,PR1
         1 001557   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 001560   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001561   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001562   000000 701000 xent               TSX1    DFR$CONVERT
         1 001563   002431 702000 1                  TSX2    ALT5

      624     7415    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      625     7416    3              ADDRESS = BIN_VAL;

   7416  1 001564   200066 235100                    LDA     BIN_VAL,,AUTO
         1 001565   200075 755100                    STA     ADDRESS,,AUTO

      626     7417    3              ADDR_SYL.FRAME.M_FIELD = 4;

   7417  1 001566   200007 236100                    LDQ     INSTR,,AUTO
         1 001567   000006 376000 2                  ANQ     6
         1 001570   000400 276003                    ORQ     256,DU
         1 001571   200007 756100                    STQ     INSTR,,AUTO

      627     7418    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7418  1 001572   000005 236000 2                  LDQ     5
         1 001573   200007 356100                    ANSQ    INSTR,,AUTO

      628     7419    3              ADDR_SYL.FRAME.N_FIELD = SAVED_NODE$
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:100  

   7419  1 001574   200076 470500                    LDP0    SAVED_NODE$,,AUTO
         1 001575   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 001576   000003 471510                    LDP1    3,X0,PR0
         1 001577   100004 473500                    LDP3    4,,PR1
         1 001600   300000 236100                    LDQ     0,,PR3
         1 001601   000024 736000                    QLS     20
         1 001602   200007 676100                    ERQ     INSTR,,AUTO
         1 001603   000034 376003                    ANQ     28,DU
         1 001604   200007 656100                    ERSQ    INSTR,,AUTO

      629     7420    3                -> OUT$BLK.SUBLK$(SUBLK_NUMBER) -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE;
      630     7421    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7421  1 001605   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001606   200007 236100                    LDQ     INSTR,,AUTO
         1 001607   000024 772000                    QRL     20
         1 001610   400001 756100                    STQ     1,,PR4

      631     7422    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;

   7422  1 001611   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001612   177777 376007                    ANQ     65535,DL
         1 001613   400002 756100                    STQ     2,,PR4

      632     7423    3              ASSMBLD_INSTR.SIZE = 2;

   7423  1 001614   000002 235007                    LDA     2,DL
         1 001615   400000 755100                    STA     0,,PR4
         1 001616   002433 710000 1                  TRA     s:7588

      633     7424                                                /**/
      634     7425    3            CASE(14);                      /* Imo value or hex,imo               */

      635     7426    3              INDEX_FLAG = TRUE;

   7426  1 001617   000225 236000 0                  LDQ     TRUE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:101  
         1 001620   400000 376003                    ANQ     -131072,DU
         1 001621   200010 756100                    STQ     INDEX_FLAG,,AUTO

      636     7427    3              ADDR_SYL.FRAME.M_FIELD = 7;

   7427  1 001622   000700 236003                    LDQ     448,DU
         1 001623   200007 256100                    ORSQ    INSTR,,AUTO

      637     7428    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7428  1 001624   000005 236000 2                  LDQ     5
         1 001625   200007 356100                    ANSQ    INSTR,,AUTO

      638     7429    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7429  1 001626   000004 236000 2                  LDQ     4
         1 001627   200007 356100                    ANSQ    INSTR,,AUTO

      639     7430    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7430  1 001630   200003 473500                    LDP3    @ASSMBLD_INSTR,,AUTO
         1 001631   200007 236100                    LDQ     INSTR,,AUTO
         1 001632   000024 772000                    QRL     20
         1 001633   300001 756100                    STQ     1,,PR3

      640     7431    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7431  1 001634   000003 471510                    LDP1    3,X0,PR0
         1 001635   200066 634500                    EPPR4   BIN_VAL,,AUTO
         1 001636   200103 454500                    STP4    DISPLACEMENT+4,,AUTO
         1 001637   100003 635500                    EPPR5   3,,PR1
         1 001640   200102 455500                    STP5    DISPLACEMENT+3,,AUTO
         1 001641   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 001642   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001643   000000 701000 xent               TSX1    DFR$CONVERT
         1 001644   002431 702000 1                  TSX2    ALT5

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:102  
      641     7432    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      642     7433    3              ADDRESS = BIN_VAL;

   7433  1 001645   200066 235100                    LDA     BIN_VAL,,AUTO
         1 001646   200075 755100                    STA     ADDRESS,,AUTO

      643     7434    4              DO CASE( INSTR_TYPE );

   7434  1 001647   200051 236100                    LDQ     INSTR_TYPE,,AUTO
         1 001650   000033 136007                    SBLQ    27,DL
         1 001651   000007 116007                    CMPQ    7,DL
         1 001652   001654 602006 1                  TNC     s:7434+5,QL
         1 001653   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001654   001663 710000 1                  TRA     s:7437
         1 001655   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001656   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001657   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001660   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001661   001730 710000 1                  TRA     SINGLE_OPERAND
         1 001662   001676 710000 1                  TRA     s:7442

      644     7435                                                /**/
      645     7436    4               CASE ( 27 );                /* 32 bit imo                    */

      646     7437    4                 ASSMBLD_INSTR.OPS(1) = R_ADDRESS_32BITS.HIGH_ORDER_BITS;

   7437  1 001663   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 001664   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001665   000020 772000                    QRL     16
         1 001666   177777 376007                    ANQ     65535,DL
         1 001667   000002 756100                    STQ     2,,PR0

      647     7438    4                 ASSMBLD_INSTR.OPS(2) = R_ADDRESS_32BITS.LOW_ORDER_BITS;

   7438  1 001670   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001671   177777 376007                    ANQ     65535,DL
         1 001672   000003 756100                    STQ     3,,PR0
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:103  

      648     7439    4                 ASSMBLD_INSTR.SIZE = 3;

   7439  1 001673   000003 235007                    LDA     3,DL
         1 001674   000000 755100                    STA     0,,PR0
         1 001675   002433 710000 1                  TRA     s:7588

      649     7440                                                /**/
      650     7441    4               CASE( 33 );                 /* 20 bit imo                     */

      651     7442    4                 IF I = 439 OR I = 311 OR I = 343 OR I = 375 OR

   7442  1 001676   200041 235100                    LDA     I,,AUTO
         1 001677   000667 115007                    CMPA    439,DL
         1 001700   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001701   000467 115007                    CMPA    311,DL
         1 001702   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001703   000527 115007                    CMPA    343,DL
         1 001704   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001705   000567 115007                    CMPA    375,DL
         1 001706   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001707   000627 115007                    CMPA    407,DL
         1 001710   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001711   000727 115007                    CMPA    471,DL
         1 001712   001730 600000 1                  TZE     SINGLE_OPERAND
         1 001713   000767 115007                    CMPA    503,DL
         1 001714   001730 600000 1                  TZE     SINGLE_OPERAND

      652     7443    4                   I = 407 OR I = 471 OR I = 503
      653     7444    4                 THEN GOTO SINGLE_OPERAND; /* LAB,Bn hex,IMO - single operand */
      654     7445    4                 ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;

   7445  1 001715   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 001716   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001717   000020 772000                    QRL     16
         1 001720   000017 376007                    ANQ     15,DL
         1 001721   000002 756100                    STQ     2,,PR0
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:104  

      655     7446    4                 ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;

   7446  1 001722   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001723   177777 376007                    ANQ     65535,DL
         1 001724   000003 756100                    STQ     3,,PR0

      656     7447    4                 ASSMBLD_INSTR.SIZE = 3;

   7447  1 001725   000003 235007                    LDA     3,DL
         1 001726   000000 755100                    STA     0,,PR0
         1 001727   002433 710000 1                  TRA     s:7588

      657     7448                                                /**/
      658     7449    4               CASE ( ELSE );              /* 16 bit imo                  */

      659     7450    4   SINGLE_OPERAND:
      660     7451    4                 IF S_D.SDOT AND R_ADDRESS.LOW_ORDER_BITS =

   7451  1 001730   000000 470400 xsym  SINGLE_OPER* LDP0    S_D$
         1 001731   004741 234100                    SZN     2529,,PR0
         1 001732   001742 605000 1                  TPL     s:7454
         1 001733   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001734   177777 376007                    ANQ     65535,DL
         1 001735   020040 116007                    CMPQ    8224,DL
         1 001736   001742 601000 1                  TNZ     s:7454

      661     7452    4                   %BITBIN('2020'X)
      662     7453    4                 THEN ADDRESS = ADDRESS / 65536;

   7453  1 001737   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001740   000020 772000                    QRL     16
         1 001741   200075 756100                    STQ     ADDRESS,,AUTO

      663     7454    4                 IF SADDRESS < -32768

   7454  1 001742   200075 235100                    LDA     ADDRESS,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:105  
         1 001743   000007 115000 2                  CMPA    7
         1 001744   001523 604000 1                  TMI     BAD_VALUE
         1 001745   177777 115007                    CMPA    65535,DL
         1 001746   001523 605400 1                  TPNZ    BAD_VALUE

      664     7455    4                   OR SADDRESS > 65535 THEN GOTO BAD_VALUE;
      665     7456    4                 ASSMBLD_INSTR.OPS(1) = MOD ( ADDRESS, 65536);

   7456  1 001747   200075 236100                    LDQ     ADDRESS,,AUTO
         1 001750   177777 376007                    ANQ     65535,DL
         1 001751   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 001752   100002 756100                    STQ     2,,PR1

      666     7457    4                 ASSMBLD_INSTR.SIZE = 2;

   7457  1 001753   000002 235007                    LDA     2,DL
         1 001754   100000 755100                    STA     0,,PR1

      667     7458    4              END;

   7458  1 001755   002433 710000 1                  TRA     s:7588

      668     7459                                                /**/
      669     7460    3            CASE(15);                      /* Based or ,B_REG                    */

      670     7461    3              INDEX_FLAG = TRUE;

   7461  1 001756   000225 236000 0                  LDQ     TRUE
         1 001757   400000 376003                    ANQ     -131072,DU
         1 001760   200010 756100                    STQ     INDEX_FLAG,,AUTO

      671     7462    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7462  1 001761   100003 473500                    LDP3    3,,PR1
         1 001762   300000 236100                    LDQ     0,,PR3
         1 001763   777777 376007                    ANQ     -1,DL
         1 001764   200040 756100                    STQ     REGISTER_CODE,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:106  

      672     7463    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      673     7464    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7464  1 001765   000024 736000                    QLS     20
         1 001766   200007 676100                    ERQ     INSTR,,AUTO
         1 001767   000034 376003                    ANQ     28,DU
         1 001770   200007 656100                    ERSQ    INSTR,,AUTO

      674     7465    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7465  1 001771   000005 236000 2                  LDQ     5
         1 001772   200007 356100                    ANSQ    INSTR,,AUTO

      675     7466    3              ADDR_SYL.FRAME.M_FIELD = 0;  /* 0 makes it a based */

   7466  1 001773   000006 236000 2                  LDQ     6
         1 001774   200007 356100                    ANSQ    INSTR,,AUTO

      676     7467    3              ASSMBLD_INSTR.SIZE = 1;

   7467  1 001775   000001 235007                    LDA     1,DL
         1 001776   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 001777   400000 755100                    STA     0,,PR4

      677     7468    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7468  1 002000   200007 236100                    LDQ     INSTR,,AUTO
         1 002001   000024 772000                    QRL     20
         1 002002   400001 756100                    STQ     1,,PR4
         1 002003   002433 710000 1                  TRA     s:7588

      678     7469                                                /**/
      679     7470    3            CASE(16);                      /* Indirect based or *,B_REG          */

      680     7471    3              INDEX_FLAG = TRUE;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:107  
   7471  1 002004   000225 236000 0                  LDQ     TRUE
         1 002005   400000 376003                    ANQ     -131072,DU
         1 002006   200010 756100                    STQ     INDEX_FLAG,,AUTO

      681     7472    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7472  1 002007   100003 473500                    LDP3    3,,PR1
         1 002010   300000 236100                    LDQ     0,,PR3
         1 002011   777777 376007                    ANQ     -1,DL
         1 002012   200040 756100                    STQ     REGISTER_CODE,,AUTO

      682     7473    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* B reg of the instruction */
      683     7474    3              ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7474  1 002013   000024 736000                    QLS     20
         1 002014   200007 676100                    ERQ     INSTR,,AUTO
         1 002015   000034 376003                    ANQ     28,DU
         1 002016   200007 656100                    ERSQ    INSTR,,AUTO

      684     7475    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7475  1 002017   000040 236003                    LDQ     32,DU
         1 002020   200007 256100                    ORSQ    INSTR,,AUTO

      685     7476    3              ADDR_SYL.FRAME.M_FIELD = 0;  /* 0 makes it a based */

   7476  1 002021   000006 236000 2                  LDQ     6
         1 002022   200007 356100                    ANSQ    INSTR,,AUTO

      686     7477    3              ASSMBLD_INSTR.SIZE = 1;

   7477  1 002023   000001 235007                    LDA     1,DL
         1 002024   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 002025   400000 755100                    STA     0,,PR4

      687     7478    3              ASSMBLD_INSTR.OPS(0) = INSTR;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:108  
   7478  1 002026   200007 236100                    LDQ     INSTR,,AUTO
         1 002027   000024 772000                    QRL     20
         1 002030   400001 756100                    STQ     1,,PR4
         1 002031   002433 710000 1                  TRA     s:7588

      688     7479                                                /**/
      689     7480    3            CASE(17);                      /* Rel direct or exp,prel             */

      690     7481    3              INDEX_FLAG = TRUE;

   7481  1 002032   000225 236000 0                  LDQ     TRUE
         1 002033   400000 376003                    ANQ     -131072,DU
         1 002034   200010 756100                    STQ     INDEX_FLAG,,AUTO

      691     7482    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7482  1 002035   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 002036   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 002037   100003 634500                    EPPR4   3,,PR1
         1 002040   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 002041   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 002042   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002043   000000 701000 xent               TSX1    DFR$CONVERT
         1 002044   002431 702000 1                  TSX2    ALT5

      692     7483    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      693     7484    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS - 1;

   7484  1 002045   200004 470500                    LDP0    @CURRENT_ADDRESS,,AUTO
         1 002046   200066 236100                    LDQ     BIN_VAL,,AUTO
         1 002047   000000 136100                    SBLQ    0,,PR0
         1 002050   000001 136007                    SBLQ    1,DL
         1 002051   200077 756100                    STQ     DISPLACEMENT,,AUTO

      694     7485    4              IF DISPLACEMENT < PREL_LOWER_LIMIT OR DISPLACEMENT > PREL_UPPER_LIMIT
              7485                       THEN DO;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:109  
   7485  1 002052   000007 116000 2                  CMPQ    7
         1 002053   002056 604000 1                  TMI     s:7486
         1 002054   077777 116007                    CMPQ    32767,DL
         1 002055   002063 604400 1                  TMOZ    s:7489

      695     7486    4                   S_D.ERROR = E@BAD_VALUE;

   7486  1 002056   000451 235007                    LDA     297,DL
         1 002057   000000 471400 xsym               LDP1    S_D$
         1 002060   100013 755100                    STA     11,,PR1

      696     7487    4                   ALTRETURN;

   7487  1 002061   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 002062   000000 702211                    TSX2  ! 0,X1

      697     7488    4              END;
      698     7489    3              IF BRANCH_FLAG THEN BRANCH_FRAME.VALUE = 1;

   7489  1 002063   200061 234100                    SZN     BRANCH_FLAG,,AUTO
         1 002064   002072 605000 1                  TPL     s:7491

   7489  1 002065   200007 236100                    LDQ     INSTR,,AUTO
         1 002066   000010 376000 2                  ANQ     8
         1 002067   000004 276003                    ORQ     4,DU
         1 002070   200007 756100                    STQ     INSTR,,AUTO
         1 002071   002102 710000 1                  TRA     s:7495

      699     7490    4              ELSE DO;

      700     7491    4                   ADDR_SYL.FRAME.M_FIELD = 4;

   7491  1 002072   200007 236100                    LDQ     INSTR,,AUTO
         1 002073   000006 376000 2                  ANQ     6
         1 002074   000400 276003                    ORQ     256,DU
         1 002075   200007 756100                    STQ     INSTR,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:110  
      701     7492    4                   ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7492  1 002076   000005 236000 2                  LDQ     5
         1 002077   200007 356100                    ANSQ    INSTR,,AUTO

      702     7493    4                   ADDR_SYL.FRAME.N_FIELD = 0;

   7493  1 002100   000004 236000 2                  LDQ     4
         1 002101   200007 356100                    ANSQ    INSTR,,AUTO

      703     7494    4              END;

      704     7495    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7495  1 002102   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 002103   200007 236100                    LDQ     INSTR,,AUTO
         1 002104   000024 772000                    QRL     20
         1 002105   100001 756100                    STQ     1,,PR1

      705     7496    3              ASSMBLD_INSTR.OPS(1) = DISPLACEMENT;

   7496  1 002106   200077 235100                    LDA     DISPLACEMENT,,AUTO
         1 002107   100002 755100                    STA     2,,PR1

      706     7497    3              ASSMBLD_INSTR.SIZE = 2;

   7497  1 002110   000002 235007                    LDA     2,DL
         1 002111   100000 755100                    STA     0,,PR1
         1 002112   002433 710000 1                  TRA     s:7588

      707     7498                                                /**/
      708     7499    3            CASE(18);                      /* Short prel or exp,sprel            */

      709     7500    3              IF NOT BRANCH_FLAG

   7500  1 002113   200061 234100                    SZN     BRANCH_FLAG,,AUTO
         1 002114   002122 604000 1                  TMI     s:7505
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:111  

      710     7501    4              THEN DO;

      711     7502    4                   S_D.ERROR = E@SPREL_NOT_VALID; /* E@SPREL_NOT_VALID */

   7502  1 002115   000515 235007                    LDA     333,DL
         1 002116   000000 473400 xsym               LDP3    S_D$
         1 002117   300013 755100                    STA     11,,PR3

      712     7503    4                   ALTRETURN;

   7503  1 002120   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 002121   000000 702211                    TSX2  ! 0,X1

      713     7504    4              END;
      714     7505    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7505  1 002122   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 002123   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 002124   100003 634500                    EPPR4   3,,PR1
         1 002125   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 002126   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 002127   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002130   000000 701000 xent               TSX1    DFR$CONVERT
         1 002131   002431 702000 1                  TSX2    ALT5

      715     7506    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      716     7507    3              DISPLACEMENT = BIN_VAL - CURRENT_ADDRESS;

   7507  1 002132   200004 470500                    LDP0    @CURRENT_ADDRESS,,AUTO
         1 002133   200066 236100                    LDQ     BIN_VAL,,AUTO
         1 002134   000000 136100                    SBLQ    0,,PR0
         1 002135   200077 756100                    STQ     DISPLACEMENT,,AUTO

      717     7508    3              IF ( DISPLACEMENT < SPREL_LOWER_LIMIT OR DISPLACEMENT  >
              7508                       SPREL_UPPER_LIMIT )

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:112  
   7508  1 002136   000011 116000 2                  CMPQ    9
         1 002137   002150 604000 1                  TMI     s:7514
         1 002140   000077 116007                    CMPQ    63,DL
         1 002141   002150 605400 1                  TPNZ    s:7514
         1 002142   200061 234100                    SZN     BRANCH_FLAG,,AUTO
         1 002143   002155 605000 1                  TPL     s:7517
         1 002144   000000 116003                    CMPQ    0,DU
         1 002145   002150 600000 1                  TZE     s:7514
         1 002146   000001 116007                    CMPQ    1,DL
         1 002147   002155 601000 1                  TNZ     s:7517

      718     7509    3                OR ( BRANCH_FLAG AND
      719     7510    4                (DISPLACEMENT = 0 OR DISPLACEMENT = 1)) THEN DO;

      720     7511
      721     7512                                      /* Displacement underflow / overflow detected */
      722     7513
      723     7514    4                   S_D.ERROR = E@SHORT_PREL_ERROR;

   7514  1 002150   000453 235007                    LDA     299,DL
         1 002151   000000 471400 xsym               LDP1    S_D$
         1 002152   100013 755100                    STA     11,,PR1

      724     7515    4                   ALTRETURN;

   7515  1 002153   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 002154   000000 702211                    TSX2  ! 0,X1

      725     7516    4              END;
      726     7517    3              BRANCH_FRAME.VALUE = DISPLACEMENT;

   7517  1 002155   000024 736000                    QLS     20
         1 002156   200007 676100                    ERQ     INSTR,,AUTO
         1 002157   000774 376003                    ANQ     508,DU
         1 002160   200007 656100                    ERSQ    INSTR,,AUTO

      727     7518    3              ASSMBLD_INSTR.OPS(0) = INSTR;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:113  

   7518  1 002161   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 002162   200007 236100                    LDQ     INSTR,,AUTO
         1 002163   000024 772000                    QRL     20
         1 002164   100001 756100                    STQ     1,,PR1

      728     7519    3              ASSMBLD_INSTR.SIZE = 1;

   7519  1 002165   000001 235007                    LDA     1,DL
         1 002166   100000 755100                    STA     0,,PR1
         1 002167   002433 710000 1                  TRA     s:7588

      729     7520                                                /**/
      730     7521    3            CASE(19);                      /* Int vector or EXP,$IV              */

      731     7522    3              INDEX_FLAG = TRUE;

   7522  1 002170   000225 236000 0                  LDQ     TRUE
         1 002171   400000 376003                    ANQ     -131072,DU
         1 002172   200010 756100                    STQ     INDEX_FLAG,,AUTO

      732     7523    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7523  1 002173   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 002174   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 002175   100003 634500                    EPPR4   3,,PR1
         1 002176   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 002177   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 002200   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002201   000000 701000 xent               TSX1    DFR$CONVERT
         1 002202   002431 702000 1                  TSX2    ALT5

      733     7524    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      734     7525    3              ADDRESS = BIN_VAL;

   7525  1 002203   200066 235100                    LDA     BIN_VAL,,AUTO
         1 002204   200075 755100                    STA     ADDRESS,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:114  

      735     7526    3              ADDR_SYL.FRAME.M_FIELD = 7;

   7526  1 002205   000700 236003                    LDQ     448,DU
         1 002206   200007 256100                    ORSQ    INSTR,,AUTO

      736     7527    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7527  1 002207   000040 236003                    LDQ     32,DU
         1 002210   200007 256100                    ORSQ    INSTR,,AUTO

      737     7528    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7528  1 002211   000004 236000 2                  LDQ     4
         1 002212   200007 356100                    ANSQ    INSTR,,AUTO

      738     7529    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7529  1 002213   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002214   200007 236100                    LDQ     INSTR,,AUTO
         1 002215   000024 772000                    QRL     20
         1 002216   000001 756100                    STQ     1,,PR0

      739     7530    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.LOW_ORDER_BITS;

   7530  1 002217   200075 236100                    LDQ     ADDRESS,,AUTO
         1 002220   177777 376007                    ANQ     65535,DL
         1 002221   000002 756100                    STQ     2,,PR0

      740     7531    3              ASSMBLD_INSTR.SIZE = 2;

   7531  1 002222   000002 235007                    LDA     2,DL
         1 002223   000000 755100                    STA     0,,PR0
         1 002224   002433 710000 1                  TRA     s:7588

      741     7532                                                /**/
      742     7533    3            CASE(20);                      /* Indirect or *Exp                   */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:115  

      743     7534    3              INDEX_FLAG = TRUE;

   7534  1 002225   000225 236000 0                  LDQ     TRUE
         1 002226   400000 376003                    ANQ     -131072,DU
         1 002227   200010 756100                    STQ     INDEX_FLAG,,AUTO

      744     7535    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7535  1 002230   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 002231   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 002232   100003 634500                    EPPR4   3,,PR1
         1 002233   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 002234   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 002235   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002236   000000 701000 xent               TSX1    DFR$CONVERT
         1 002237   002431 702000 1                  TSX2    ALT5

      745     7536    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      746     7537    3              ADDRESS = BIN_VAL;

   7537  1 002240   200066 235100                    LDA     BIN_VAL,,AUTO
         1 002241   200075 755100                    STA     ADDRESS,,AUTO

      747     7538    3              ADDR_SYL.FRAME.M_FIELD = 0;

   7538  1 002242   000006 236000 2                  LDQ     6
         1 002243   200007 356100                    ANSQ    INSTR,,AUTO

      748     7539    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 1;

   7539  1 002244   000040 236003                    LDQ     32,DU
         1 002245   200007 256100                    ORSQ    INSTR,,AUTO

      749     7540    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7540  1 002246   000004 236000 2                  LDQ     4
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:116  
         1 002247   200007 356100                    ANSQ    INSTR,,AUTO

      750     7541    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7541  1 002250   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002251   200007 236100                    LDQ     INSTR,,AUTO
         1 002252   000024 772000                    QRL     20
         1 002253   000001 756100                    STQ     1,,PR0

      751     7542    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;

   7542  1 002254   200075 236100                    LDQ     ADDRESS,,AUTO
         1 002255   000020 772000                    QRL     16
         1 002256   000017 376007                    ANQ     15,DL
         1 002257   000002 756100                    STQ     2,,PR0

      752     7543    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;

   7543  1 002260   200075 236100                    LDQ     ADDRESS,,AUTO
         1 002261   177777 376007                    ANQ     65535,DL
         1 002262   000003 756100                    STQ     3,,PR0

      753     7544    3              ASSMBLD_INSTR.SIZE = 3;

   7544  1 002263   000003 235007                    LDA     3,DL
         1 002264   000000 755100                    STA     0,,PR0
         1 002265   002433 710000 1                  TRA     s:7588

      754     7545                                                /**/
      755     7546    3            CASE(21);                      /* Register or B_REG | R_REG          */

      756     7547    3              INDEX_FLAG = TRUE;

   7547  1 002266   000225 236000 0                  LDQ     TRUE
         1 002267   400000 376003                    ANQ     -131072,DU
         1 002270   200010 756100                    STQ     INDEX_FLAG,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:117  
      757     7548    3              REGISTER_CODE = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER)

   7548  1 002271   100003 473500                    LDP3    3,,PR1
         1 002272   300000 236100                    LDQ     0,,PR3
         1 002273   777777 376007                    ANQ     -1,DL
         1 002274   200040 756100                    STQ     REGISTER_CODE,,AUTO

      758     7549    3                -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE; /* Reg of the instruction */
      759     7550    4   UNFOLD :   DO CASE( REGISTER_CODE );

   7550  1 002275   000025 116007       UNFOLD       CMPQ    21,DL
         1 002276   002300 602006 1                  TNC     UNFOLD+3,QL
         1 002277   002346 710000 1                  TRA     s:7562
         1 002300   002346 710000 1                  TRA     s:7562
         1 002301   002325 710000 1                  TRA     s:7553
         1 002302   002325 710000 1                  TRA     s:7553
         1 002303   002325 710000 1                  TRA     s:7553
         1 002304   002325 710000 1                  TRA     s:7553
         1 002305   002325 710000 1                  TRA     s:7553
         1 002306   002325 710000 1                  TRA     s:7553
         1 002307   002325 710000 1                  TRA     s:7553
         1 002310   002332 710000 1                  TRA     s:7556
         1 002311   002332 710000 1                  TRA     s:7556
         1 002312   002332 710000 1                  TRA     s:7556
         1 002313   002332 710000 1                  TRA     s:7556
         1 002314   002332 710000 1                  TRA     s:7556
         1 002315   002332 710000 1                  TRA     s:7556
         1 002316   002332 710000 1                  TRA     s:7556
         1 002317   002346 710000 1                  TRA     s:7562
         1 002320   002346 710000 1                  TRA     s:7562
         1 002321   002346 710000 1                  TRA     s:7562
         1 002322   002340 710000 1                  TRA     s:7559
         1 002323   002340 710000 1                  TRA     s:7559
         1 002324   002340 710000 1                  TRA     s:7559

      760     7551                                                /**/
      761     7552    4               CASE( 1, 2, 3, 4, 5, 6, 7 ); /* B_REG         */
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:118  

      762     7553    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE;

   7553  1 002325   000024 736000                    QLS     20
         1 002326   200007 676100                    ERQ     INSTR,,AUTO
         1 002327   000034 376003                    ANQ     28,DU
         1 002330   200007 656100                    ERSQ    INSTR,,AUTO
         1 002331   002353 710000 1                  TRA     s:7566

      763     7554                                                /**/
      764     7555    4               CASE( 8, 9, 10, 11, 12, 13, 14 ); /* R_REG    */

      765     7556    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE - 7;

   7556  1 002332   000007 136007                    SBLQ    7,DL
         1 002333   000024 736000                    QLS     20
         1 002334   200007 676100                    ERQ     INSTR,,AUTO
         1 002335   000034 376003                    ANQ     28,DU
         1 002336   200007 656100                    ERSQ    INSTR,,AUTO
         1 002337   002353 710000 1                  TRA     s:7566

      766     7557                                                /**/
      767     7558    4               CASE( 18, 19, 20 );         /* S_REG                  */

      768     7559    4                 ADDR_SYL.FRAME.N_FIELD = REGISTER_CODE - 17;

   7559  1 002340   000021 136007                    SBLQ    17,DL
         1 002341   000024 736000                    QLS     20
         1 002342   200007 676100                    ERQ     INSTR,,AUTO
         1 002343   000034 376003                    ANQ     28,DU
         1 002344   200007 656100                    ERSQ    INSTR,,AUTO
         1 002345   002353 710000 1                  TRA     s:7566

      769     7560                                                /**/
      770     7561    4               CASE( ELSE );               /* Bad register                 */

      771     7562    4                 S_D.ERROR = E@BAD_REG;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:119  

   7562  1 002346   000454 235007                    LDA     300,DL
         1 002347   000000 474400 xsym               LDP4    S_D$
         1 002350   400013 755100                    STA     11,,PR4

      772     7563    4                 ALTRETURN;

   7563  1 002351   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 002352   000000 702211                    TSX2  ! 0,X1

      773     7564                                                /**/
      774     7565    4              END UNFOLD;

      775     7566    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7566  1 002353   000005 236000 2                  LDQ     5
         1 002354   200007 356100                    ANSQ    INSTR,,AUTO

      776     7567    3              ADDR_SYL.FRAME.M_FIELD = 5;  /* 5 makes it a register */

   7567  1 002355   200007 236100                    LDQ     INSTR,,AUTO
         1 002356   000006 376000 2                  ANQ     6
         1 002357   000500 276003                    ORQ     320,DU
         1 002360   200007 756100                    STQ     INSTR,,AUTO

      777     7568    3              ASSMBLD_INSTR.SIZE = 1;

   7568  1 002361   000001 235007                    LDA     1,DL
         1 002362   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 002363   400000 755100                    STA     0,,PR4

      778     7569    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7569  1 002364   200007 236100                    LDQ     INSTR,,AUTO
         1 002365   000024 772000                    QRL     20
         1 002366   400001 756100                    STQ     1,,PR4
         1 002367   002433 710000 1                  TRA     s:7588
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:120  

      779     7570                                                /**/
      780     7571    3            CASE(22);                      /* Direct or exp                      */

      781     7572    3              INDEX_FLAG =TRUE;

   7572  1 002370   000225 236000 0                  LDQ     TRUE
         1 002371   400000 376003                    ANQ     -131072,DU
         1 002372   200010 756100                    STQ     INDEX_FLAG,,AUTO

      782     7573    3              CALL DFR$CONVERT( NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7573  1 002373   200066 633500                    EPPR3   BIN_VAL,,AUTO
         1 002374   200103 453500                    STP3    DISPLACEMENT+4,,AUTO
         1 002375   100003 634500                    EPPR4   3,,PR1
         1 002376   200102 454500                    STP4    DISPLACEMENT+3,,AUTO
         1 002377   200102 630500                    EPPR0   DISPLACEMENT+3,,AUTO
         1 002400   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002401   000000 701000 xent               TSX1    DFR$CONVERT
         1 002402   002431 702000 1                  TSX2    ALT5

      783     7574    3                OUT$BLK.SUBLK$(0), BIN_VAL ) ALTRET( ALT5 );
      784     7575    3              ADDRESS = BIN_VAL;

   7575  1 002403   200066 235100                    LDA     BIN_VAL,,AUTO
         1 002404   200075 755100                    STA     ADDRESS,,AUTO

      785     7576    3              ADDR_SYL.FRAME.M_FIELD = 0;

   7576  1 002405   000006 236000 2                  LDQ     6
         1 002406   200007 356100                    ANSQ    INSTR,,AUTO

      786     7577    3              ADDR_SYL.FRAME.INDIRECT_FIELD = 0;

   7577  1 002407   000005 236000 2                  LDQ     5
         1 002410   200007 356100                    ANSQ    INSTR,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:121  
      787     7578    3              ADDR_SYL.FRAME.N_FIELD = 0;

   7578  1 002411   000004 236000 2                  LDQ     4
         1 002412   200007 356100                    ANSQ    INSTR,,AUTO

      788     7579    3              ASSMBLD_INSTR.OPS(0) = INSTR;

   7579  1 002413   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002414   200007 236100                    LDQ     INSTR,,AUTO
         1 002415   000024 772000                    QRL     20
         1 002416   000001 756100                    STQ     1,,PR0

      789     7580    3              ASSMBLD_INSTR.OPS(1) = R_ADDRESS.HIGH_ORDER_BITS;

   7580  1 002417   200075 236100                    LDQ     ADDRESS,,AUTO
         1 002420   000020 772000                    QRL     16
         1 002421   000017 376007                    ANQ     15,DL
         1 002422   000002 756100                    STQ     2,,PR0

      790     7581    3              ASSMBLD_INSTR.OPS(2) = R_ADDRESS.LOW_ORDER_BITS;

   7581  1 002423   200075 236100                    LDQ     ADDRESS,,AUTO
         1 002424   177777 376007                    ANQ     65535,DL
         1 002425   000003 756100                    STQ     3,,PR0

      791     7582    3              ASSMBLD_INSTR.SIZE = 3;

   7582  1 002426   000003 235007                    LDA     3,DL
         1 002427   000000 755100                    STA     0,,PR0
         1 002430   002433 710000 1                  TRA     s:7588

      792     7583                                                /**/
      793     7584    3            CASE( ELSE );                  /* Bogus code                         */

      794     7585    3   ALT5:      ALTRETURN;

   7585  1 002431   200064 221300       ALT5         LDX1  ! MASK+1,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:122  
         1 002432   000000 702211                    TSX2  ! 0,X1

      795     7586                                                /**/
      796     7587    3           END ENCODE;

      797     7588    2           RETURN;

   7588  1 002433   200064 221300                    LDX1  ! MASK+1,,AUTO
         1 002434   000001 702211                    TSX2  ! 1,X1

      798     7589                                                /**/
      799     7590                                                /**/
      800     7591    2   END  ENCODE_ADDR_SYL;
      801     7592        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:123  
      802     7593    1   MASK_PRESENT: PROC ALTRET;

   7593  1 002435   200062 741300       MASK_PRESENT STX1  ! BRANCH_FLAG+1,,AUTO

      803     7594                                                /**/
      804     7595    3           IF MASK_THERE THEN DO;          /* Mask was found earlier, put it in  */

   7595  1 002436   200060 234100                    SZN     MASK_THERE,,AUTO
         1 002437   002450 605000 1                  TPL     s:7601

      805     7596    3                ASSMBLD_INSTR.OPS(ASSMBLD_INSTR.SIZE) = MASK_VALUE;

   7596  1 002440   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002441   000000 720100                    LXL0    0,,PR0
         1 002442   200057 235100                    LDA     MASK_VALUE,,AUTO
         1 002443   000001 755110                    STA     1,X0,PR0

      806     7597    3                ASSMBLD_INSTR.SIZE = ASSMBLD_INSTR.SIZE + 1;

   7597  1 002444   000000 235100                    LDA     0,,PR0
         1 002445   000001 035007                    ADLA    1,DL
         1 002446   000000 755100                    STA     0,,PR0

      807     7598    3           END;

   7598  1 002447   002455 710000 1                  TRA     s:7604

      808     7599                                                /**/
      809     7600    3           ELSE DO;

      810     7601    3                S_D.ERROR = E@NO_MASK;     /* Expected mask not found */

   7601  1 002450   000455 235007                    LDA     301,DL
         1 002451   000000 470400 xsym               LDP0    S_D$
         1 002452   000013 755100                    STA     11,,PR0

      811     7602    3                ALTRETURN;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:124  

   7602  1 002453   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002454   000000 702211                    TSX2  ! 0,X1

      812     7603    3           END;
      813     7604    2           RETURN;

   7604  1 002455   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002456   000001 702211                    TSX2  ! 1,X1

      814     7605    2   END MASK_PRESENT;
      815     7606        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:125  
      816     7607    1   SEARCH_OP_TABLE : PROC;

   7607  1 002457   200062 741300       SEARCH_OP_T* STX1  ! BRANCH_FLAG+1,,AUTO

      817     7608        /**/
      818     7609        /*  Enter with only the mnemonic, left-justified in SCR_BUFFER.               */
      819     7610        /*  On exit, INSTR_TYPE, OPCODE, and (perhaps) GENERIC_CODE are set up.       */
      820     7611        /*  An un-recognizable op-code is indicated by setting INSTR_TYPE to 0.       */
      821     7612        /**/
      822     7613                                                /**/
      823     7614    3   REGULAR : DO I = 0 TO 511;              /* Try regular instructions      */

   7614  1 002460   200041 450100       REGULAR      STZ     I,,AUTO

      824     7615    4                IF INSTRUCTIONS(I) = SCR_BUFFER THEN DO;

   7615  1 002461   200041 235100                    LDA     I,,AUTO
         1 002462   000003 735000                    ALS     3
         1 002463   040100 106405                    CMPC    fill='040'O
         1 002464   000000 000010 xsym               ADSC9   INSTRUCTIONS,A           cn=0,n=8
         1 002465   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16
         1 002466   002476 601000 1                  TNZ     s:7620

      825     7616    4                     INSTR_TYPE = INSTRUCTION_TYPE(I);

   7616  1 002467   200041 720100                    LXL0    I,,AUTO
         1 002470   000000 235010 xsym               LDA     INSTRUCTION_TYPE,X0
         1 002471   200051 755100                    STA     INSTR_TYPE,,AUTO

      826     7617    4                     OPCODE = I;

   7617  1 002472   200041 236100                    LDQ     I,,AUTO
         1 002473   200056 756100                    STQ     OPCODE,,AUTO

      827     7618    4                     RETURN;

   7618  1 002474   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:126  
         1 002475   000001 702211                    TSX2  ! 1,X1

      828     7619    4                END;
      829     7620    3           END REGULAR;

   7620  1 002476   200041 236100                    LDQ     I,,AUTO
         1 002477   000001 036007                    ADLQ    1,DL
         1 002500   200041 756100                    STQ     I,,AUTO
         1 002501   001000 116007                    CMPQ    512,DL
         1 002502   002461 602000 1                  TNC     s:7615

      830     7621                                                /**/
      831     7622                                           /* Failed regular set; try single shift    */
      832     7623    3   SHIFT_S : DO I = 0 TO 55;

   7623  1 002503   200041 450100       SHIFT_S      STZ     I,,AUTO

      833     7624    4                IF SHIFT_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;

   7624  1 002504   200041 236100                    LDQ     I,,AUTO
         1 002505   000006 402007                    MPY     6,DL
         1 002506   040100 106406                    CMPC    fill='040'O
         1 002507   000000 000006 xsym               ADSC9   SHIFT_INSTRUCTIONS,Q     cn=0,n=6
         1 002510   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16
         1 002511   002531 601000 1                  TNZ     s:7629

      834     7625    4                     INSTR_TYPE = 8;

   7625  1 002512   000010 235007                    LDA     8,DL
         1 002513   200051 755100                    STA     INSTR_TYPE,,AUTO

      835     7626    4                     OPCODE = ( (I/8) + 1 ) * 256 + MOD(I,8);

   7626  1 002514   200041 236100                    LDQ     I,,AUTO
         1 002515   000003 772000                    QRL     3
         1 002516   200102 756100                    STQ     DISPLACEMENT+3,,AUTO
         1 002517   200041 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:127  
         1 002520   000007 376007                    ANQ     7,DL
         1 002521   200103 756100                    STQ     DISPLACEMENT+4,,AUTO
         1 002522   200102 236100                    LDQ     DISPLACEMENT+3,,AUTO
         1 002523   000010 736000                    QLS     8
         1 002524   200103 036100                    ADLQ    DISPLACEMENT+4,,AUTO
         1 002525   000400 036007                    ADLQ    256,DL
         1 002526   200056 756100                    STQ     OPCODE,,AUTO

      836     7627    4                     RETURN;

   7627  1 002527   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002530   000001 702211                    TSX2  ! 1,X1

      837     7628    4                END;
      838     7629    3           END SHIFT_S;

   7629  1 002531   200041 235100                    LDA     I,,AUTO
         1 002532   000001 035007                    ADLA    1,DL
         1 002533   200041 755100                    STA     I,,AUTO
         1 002534   000070 115007                    CMPA    56,DL
         1 002535   002504 602000 1                  TNC     s:7624

      839     7630                                                /**/
      840     7631                                                /* Failed short shifts; try double    */
      841     7632    3   SHIFT_D : DO I = 0 TO 55;

   7632  1 002536   200041 450100       SHIFT_D      STZ     I,,AUTO

      842     7633    4                IF SHIFT_D_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;

   7633  1 002537   200041 236100                    LDQ     I,,AUTO
         1 002540   000006 402007                    MPY     6,DL
         1 002541   040100 106406                    CMPC    fill='040'O
         1 002542   000000 000006 xsym               ADSC9   SHIFT_D_INSTRUCTIONS,Q   cn=0,n=6
         1 002543   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16
         1 002544   002565 601000 1                  TNZ     s:7638

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:128  
      843     7634    4                     INSTR_TYPE = 9;

   7634  1 002545   000011 235007                    LDA     9,DL
         1 002546   200051 755100                    STA     INSTR_TYPE,,AUTO

      844     7635    4                     OPCODE = ( (I/4) - 6 )*256 + MOD(I,4) * 2 + 8;

   7635  1 002547   200041 236100                    LDQ     I,,AUTO
         1 002550   000002 772000                    QRL     2
         1 002551   200102 756100                    STQ     DISPLACEMENT+3,,AUTO
         1 002552   200041 236100                    LDQ     I,,AUTO
         1 002553   000003 376007                    ANQ     3,DL
         1 002554   200103 756100                    STQ     DISPLACEMENT+4,,AUTO
         1 002555   200102 236100                    LDQ     DISPLACEMENT+3,,AUTO
         1 002556   000007 736000                    QLS     7
         1 002557   200103 036100                    ADLQ    DISPLACEMENT+4,,AUTO
         1 002560   000001 736000                    QLS     1
         1 002561   002770 136007                    SBLQ    1528,DL
         1 002562   200056 756100                    STQ     OPCODE,,AUTO

      845     7636    4                     RETURN;

   7636  1 002563   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002564   000001 702211                    TSX2  ! 1,X1

      846     7637    4                END;
      847     7638    3           END SHIFT_D;

   7638  1 002565   200041 235100                    LDA     I,,AUTO
         1 002566   000001 035007                    ADLA    1,DL
         1 002567   200041 755100                    STA     I,,AUTO
         1 002570   000070 115007                    CMPA    56,DL
         1 002571   002537 602000 1                  TNC     s:7633

      848     7639                                                /**/
      849     7640                                                /* Maybe it's a generic?              */
      850     7641    3   GENERIC : DO I = 0 TO 127;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:129  

   7641  1 002572   200041 450100       GENERIC      STZ     I,,AUTO

      851     7642    4                IF GENERIC_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;

   7642  1 002573   200041 235100                    LDA     I,,AUTO
         1 002574   000002 735000                    ALS     2
         1 002575   040100 106405                    CMPC    fill='040'O
         1 002576   000001 000004 0                  ADSC9   GENERIC_INSTRUCTIONS,A   cn=0,n=4
         1 002577   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16
         1 002600   002612 601000 1                  TNZ     s:7648

      852     7643    4                     INSTR_TYPE = 1;

   7643  1 002601   000001 236007                    LDQ     1,DL
         1 002602   200051 756100                    STQ     INSTR_TYPE,,AUTO

      853     7644    4                     GENERIC_CODE = GENERIC_TYPE(I);

   7644  1 002603   200041 720100                    LXL0    I,,AUTO
         1 002604   000000 235010 xsym               LDA     GENERIC_TYPE,X0
         1 002605   200054 755100                    STA     GENERIC_CODE,,AUTO

      854     7645    4                     OPCODE = I;

   7645  1 002606   200041 235100                    LDA     I,,AUTO
         1 002607   200056 755100                    STA     OPCODE,,AUTO

      855     7646    4                     RETURN;

   7646  1 002610   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002611   000001 702211                    TSX2  ! 1,X1

      856     7647    4                END;
      857     7648    3           END GENERIC;

   7648  1 002612   200041 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:130  
         1 002613   000001 036007                    ADLQ    1,DL
         1 002614   200041 756100                    STQ     I,,AUTO
         1 002615   000200 116007                    CMPQ    128,DL
         1 002616   002573 602000 1                  TNC     s:7642

      858     7649                                                /**/
      859     7650                                                /* Last ditch effort:  special cases  */
      860     7651    2           SCR_BUFFER = MNEMONIC_PTR$ -> OUT$SYM.TEXT; /* Just look*/

   7651  1 002617   200036 470500                    LDP0    MNEMONIC_PTR$,,AUTO
         1 002620   000004 236100                    LDQ     4,,PR0
         1 002621   000033 772000                    QRL     27
         1 002622   000000 620006                    EAX0    0,QL
         1 002623   040100 100540                    MLR     fill='040'O
         1 002624   000004 200010                    ADSC9   4,,PR0                   cn=1,n=*X0
         1 002625   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16

      861     7652                                                /* at the raw mnemonic (not ',reg')   */
      862     7653    3   SPECIAL_CS: DO I = 0 TO SIZEC(SPECIAL_INSTRUCTIONS)/4-1;

   7653  1 002626   200041 450100       SPECIAL_CS   STZ     I,,AUTO
         1 002627   002647 710000 1                  TRA     s:7659+3

      863     7654    4                IF SPECIAL_INSTRUCTIONS(I) = SCR_BUFFER THEN DO;

   7654  1 002630   200041 235100                    LDA     I,,AUTO
         1 002631   000002 735000                    ALS     2
         1 002632   040100 106405                    CMPC    fill='040'O
         1 002633   000201 000004 0                  ADSC9   SPECIAL_INSTRUCTIONS,A   cn=0,n=4
         1 002634   200045 000020                    ADSC9   SCR_BUFFER,,AUTO         cn=0,n=16
         1 002635   002644 601000 1                  TNZ     s:7659

      864     7655    4                     INSTR_TYPE = 38;

   7655  1 002636   000046 236007                    LDQ     38,DL
         1 002637   200051 756100                    STQ     INSTR_TYPE,,AUTO

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:131  
      865     7656    4                     SPECIAL_CODE = I;

   7656  1 002640   200041 235100                    LDA     I,,AUTO
         1 002641   200055 755100                    STA     SPECIAL_CODE,,AUTO

      866     7657    4                     RETURN;

   7657  1 002642   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002643   000001 702211                    TSX2  ! 1,X1

      867     7658    4                END;
      868     7659    3           END SPECIAL_CS;

   7659  1 002644   200041 236100                    LDQ     I,,AUTO
         1 002645   000001 036007                    ADLQ    1,DL
         1 002646   200041 756100                    STQ     I,,AUTO
         1 002647   200041 235100                    LDA     I,,AUTO
         1 002650   000004 115007                    CMPA    4,DL
         1 002651   002630 602000 1                  TNC     s:7654

      869     7660                                                /**/
      870     7661                                           /* Tried to pawn off a bogus instruction   */
      871     7662    2           ASSMBLD_INSTR.SIZE = 0;         /* Let anlz know it was bogus   */

   7662  1 002652   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002653   000000 450100                    STZ     0,,PR0

      872     7663    2           INSTR_TYPE = 0;                 /* By returning zero size             */

   7663  1 002654   200051 450100                    STZ     INSTR_TYPE,,AUTO

      873     7664    2           RETURN;

   7664  1 002655   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002656   000001 702211                    TSX2  ! 1,X1

      874     7665    2   END SEARCH_OP_TABLE;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:132  
      875     7666        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:133  
      876     7667    1   GENERIC_ENCODE : PROC ALTRET;

   7667  1 002657   200062 741300       GENERIC_ENC* STX1  ! BRANCH_FLAG+1,,AUTO

      877     7668                                                /**/
      878     7669    3           DO CASE( GENERIC_CODE);

   7669  1 002660   200054 235100                    LDA     GENERIC_CODE,,AUTO
         1 002661   000004 115007                    CMPA    4,DL
         1 002662   002664 602005 1                  TNC     s:7669+4,AL
         1 002663   002706 710000 1                  TRA     s:7682
         1 002664   002670 710000 1                  TRA     s:7672
         1 002665   002673 710000 1                  TRA     s:7675
         1 002666   002706 710000 1                  TRA     s:7682
         1 002667   002701 710000 1                  TRA     s:7679

      879     7670                                                /**/
      880     7671    3            CASE(0);                       /* Unknown generic                    */

      881     7672    3              ASSMBLD_INSTR.SIZE = 0;

   7672  1 002670   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002671   000000 450100                    STZ     0,,PR0
         1 002672   002706 710000 1                  TRA     s:7682

      882     7673                                                /**/
      883     7674    3            CASE(1);                       /* Standard generic                   */

      884     7675    3              ASSMBLD_INSTR.OPS(0) = OPCODE;

   7675  1 002673   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 002674   200056 236100                    LDQ     OPCODE,,AUTO
         1 002675   000001 756100                    STQ     1,,PR0

      885     7676    3              ASSMBLD_INSTR.SIZE = 1;

   7676  1 002676   000001 235007                    LDA     1,DL
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:134  
         1 002677   000000 755100                    STA     0,,PR0
         1 002700   002706 710000 1                  TRA     s:7682

      886     7677                                                /**/
      887     7678    3            CASE(3);                       /* Commercial instructions            */

      888     7679    3              S_D.ERROR = E@UN_IM_INST;    /* Unimplemented instruction */

   7679  1 002701   000452 236007                    LDQ     298,DL
         1 002702   000000 470400 xsym               LDP0    S_D$
         1 002703   000013 756100                    STQ     11,,PR0

      889     7680    3              ALTRETURN;

   7680  1 002704   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002705   000000 702211                    TSX2  ! 0,X1

      890     7681    3           END;

      891     7682    2           RETURN;

   7682  1 002706   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 002707   000001 702211                    TSX2  ! 1,X1

      892     7683    2   END GENERIC_ENCODE;
      893     7684        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:135  
      894     7685    1   SPECIAL_ENCODE: PROC ALTRET;

   7685  1 002710   200062 741300       SPECIAL_ENC* STX1  ! BRANCH_FLAG+1,,AUTO

      895     7686        /**/
      896     7687        /*  This routine is used for the special case instructions.  This             */
      897     7688        /*  includes those instructions that (although they are considered            */
      898     7689        /*  part of another set) do not map into existing tables.                     */
      899     7690        /*  This code is ugly.                                                        */
      900     7691        /**/
      901     7692    3           DO CASE (SPECIAL_CODE);

   7692  1 002711   200055 235100                    LDA     SPECIAL_CODE,,AUTO
         1 002712   000004 115007                    CMPA    4,DL
         1 002713   002715 602005 1                  TNC     s:7692+4,AL
         1 002714   003107 710000 1                  TRA     s:7755
         1 002715   002721 710000 1                  TRA     s:7695
         1 002716   002777 710000 1                  TRA     s:7717
         1 002717   003037 710000 1                  TRA     s:7734
         1 002720   003075 710000 1                  TRA     s:7750

      902     7693                                                /**/
      903     7694    3            CASE(0);                       /* ACQ instruction                    */

      904     7695    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 3

   7695  1 002721   200014 470500                    LDP0    NODE$,,AUTO
         1 002722   000001 220100                    LDX0    1,,PR0
         1 002723   000003 100003                    CMPX0   3,DU
         1 002724   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      905     7696    3              THEN
      906     7697    3                   GOTO MALFORMED_SPECIAL;
      907     7698    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE < 8

   7698  1 002725   000004 471500                    LDP1    4,,PR0
         1 002726   100000 722100                    LXL2    0,,PR1
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:136  
         1 002727   000010 102003                    CMPX2   8,DU
         1 002730   003111 602000 1                  TNC     BAD_REG_SPECIAL
         1 002731   000017 102003                    CMPX2   15,DU
         1 002732   003111 603000 1                  TRC     BAD_REG_SPECIAL

      908     7699    3                OR NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE >14
      909     7700    3              THEN                         /* Not Rn                             */
      910     7701    3                   GOTO BAD_REG_SPECIAL;
      911     7702    3              IF NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.CODE ~= 21

   7702  1 002733   000005 473500                    LDP3    5,,PR0
         1 002734   300000 723100                    LXL3    0,,PR3
         1 002735   000025 103003                    CMPX3   21,DU
         1 002736   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      912     7703    3              THEN                         /* Wrong argument mode                */
      913     7704    3                   GOTO MALFORMED_SPECIAL;
      914     7705    3              IF NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7

   7705  1 002737   300003 474500                    LDP4    3,,PR3
         1 002740   400000 724100                    LXL4    0,,PR4
         1 002741   000010 104003                    CMPX4   8,DU
         1 002742   003111 603000 1                  TRC     BAD_REG_SPECIAL

      915     7706    3              THEN                         /* Not Bn                             */
      916     7707    3                   GOTO BAD_REG_SPECIAL;
      917     7708    3              ASSMBLD_INSTR.SIZE = 2;

   7708  1 002743   000002 236007                    LDQ     2,DL
         1 002744   200003 475500                    LDP5    @ASSMBLD_INSTR,,AUTO
         1 002745   500000 756100                    STQ     0,,PR5

      918     7709    3              ASSMBLD_INSTR.OPS(0) = 16;

   7709  1 002746   000020 235007                    LDA     16,DL
         1 002747   500001 755100                    STA     1,,PR5

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:137  
      919     7710    3              ACQ_INSTR.ACQ_INDICATOR1 = 0;

   7710  1 002750   000000 236003                    LDQ     0,DU
         1 002751   200007 552140                    STBQ    INSTR,'40'O,AUTO

      920     7711    3              ACQ_INSTR.ACQ_INDICATOR2 = 0;

   7711  1 002752   000005 236000 2                  LDQ     5
         1 002753   200007 356100                    ANSQ    INSTR,,AUTO

      921     7712    3              ACQ_INSTR.ACQ_R_REG = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE -7;

   7712  1 002754   000004 471500                    LDP1    4,,PR0
         1 002755   100000 236100                    LDQ     0,,PR1
         1 002756   777777 376007                    ANQ     -1,DL
         1 002757   000007 136007                    SBLQ    7,DL
         1 002760   000030 736000                    QLS     24
         1 002761   200007 676100                    ERQ     INSTR,,AUTO
         1 002762   000700 376003                    ANQ     448,DU
         1 002763   200007 656100                    ERSQ    INSTR,,AUTO

      922     7713    3              ACQ_INSTR.ACQ_B_REG = NODE$ -> OUT$BLK.SUBLK$(2) -> OUT$BLK.SUBLK$(0) ->
              7713                       OUT$BLK.CODE;

   7713  1 002764   000005 473500                    LDP3    5,,PR0
         1 002765   300003 474500                    LDP4    3,,PR3
         1 002766   400000 236100                    LDQ     0,,PR4
         1 002767   000024 736000                    QLS     20
         1 002770   200007 676100                    ERQ     INSTR,,AUTO
         1 002771   000034 376003                    ANQ     28,DU
         1 002772   200007 656100                    ERSQ    INSTR,,AUTO

      923     7714    3              ASSMBLD_INSTR.OPS(1) = INSTR;

   7714  1 002773   200007 236100                    LDQ     INSTR,,AUTO
         1 002774   000024 772000                    QRL     20
         1 002775   500002 756100                    STQ     2,,PR5
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:138  
         1 002776   003107 710000 1                  TRA     s:7755

      924     7715                                                /**/
      925     7716    3            CASE(1);                       /* LDT instruction                    */

      926     7717    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 2

   7717  1 002777   200014 470500                    LDP0    NODE$,,AUTO
         1 003000   000001 220100                    LDX0    1,,PR0
         1 003001   000002 100003                    CMPX0   2,DU
         1 003002   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      927     7718    3              THEN
      928     7719    3                   GOTO MALFORMED_SPECIAL;
      929     7720    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE ~= 21

   7720  1 003003   000004 471500                    LDP1    4,,PR0
         1 003004   100000 722100                    LXL2    0,,PR1
         1 003005   000025 102003                    CMPX2   21,DU
         1 003006   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      930     7721    3              THEN                         /* Wrong argument mode                */
      931     7722    3                   GOTO MALFORMED_SPECIAL;
      932     7723    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7

   7723  1 003007   100003 473500                    LDP3    3,,PR1
         1 003010   300000 723100                    LXL3    0,,PR3
         1 003011   000010 103003                    CMPX3   8,DU
         1 003012   003111 603000 1                  TRC     BAD_REG_SPECIAL

      933     7724    3              THEN                         /* Not Bn                             */
      934     7725    3                   GOTO BAD_REG_SPECIAL;
      935     7726    3              ASSMBLD_INSTR.SIZE = 2;

   7726  1 003013   000002 236007                    LDQ     2,DL
         1 003014   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 003015   400000 756100                    STQ     0,,PR4
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:139  

      936     7727    3              ASSMBLD_INSTR.OPS(0) = 16;

   7727  1 003016   000020 235007                    LDA     16,DL
         1 003017   400001 755100                    STA     1,,PR4

      937     7728    3              LDT_INSTR.LDT_INDICATOR1 = 0;

   7728  1 003020   000000 236003                    LDQ     0,DU
         1 003021   200007 552140                    STBQ    INSTR,'40'O,AUTO

      938     7729    3              LDT_INSTR.LDT_INDICATOR2 = 0;

   7729  1 003022   000002 236000 2                  LDQ     2
         1 003023   200007 356100                    ANSQ    INSTR,,AUTO

      939     7730    3              LDT_INSTR.REGISTER = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) ->
              7730                       OUT$BLK.CODE;

   7730  1 003024   000004 471500                    LDP1    4,,PR0
         1 003025   100003 473500                    LDP3    3,,PR1
         1 003026   300000 236100                    LDQ     0,,PR3
         1 003027   000030 736000                    QLS     24
         1 003030   200007 676100                    ERQ     INSTR,,AUTO
         1 003031   000700 376003                    ANQ     448,DU
         1 003032   200007 656100                    ERSQ    INSTR,,AUTO

      940     7731    3              ASSMBLD_INSTR.OPS(1) = INSTR;

   7731  1 003033   200007 236100                    LDQ     INSTR,,AUTO
         1 003034   000024 772000                    QRL     20
         1 003035   400002 756100                    STQ     2,,PR4
         1 003036   003107 710000 1                  TRA     s:7755

      941     7732                                                /**/
      942     7733    3            CASE(2);                       /* RLQ instruction                    */

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:140  
      943     7734    3              IF NODE$ -> OUT$BLK.NSUBLKS ~= 2

   7734  1 003037   200014 470500                    LDP0    NODE$,,AUTO
         1 003040   000001 220100                    LDX0    1,,PR0
         1 003041   000002 100003                    CMPX0   2,DU
         1 003042   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      944     7735    3              THEN
      945     7736    3                   GOTO MALFORMED_SPECIAL;
      946     7737    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.CODE ~= 21

   7737  1 003043   000004 471500                    LDP1    4,,PR0
         1 003044   100000 722100                    LXL2    0,,PR1
         1 003045   000025 102003                    CMPX2   21,DU
         1 003046   003111 601000 1                  TNZ     BAD_REG_SPECIAL

      947     7738    3              THEN                         /* Wrong argument mode                */
      948     7739    3                   GOTO MALFORMED_SPECIAL;
      949     7740    3              IF NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE > 7

   7740  1 003047   100003 473500                    LDP3    3,,PR1
         1 003050   300000 723100                    LXL3    0,,PR3
         1 003051   000010 103003                    CMPX3   8,DU
         1 003052   003111 603000 1                  TRC     BAD_REG_SPECIAL

      950     7741    3              THEN                         /* Not Bn                             */
      951     7742    3                   GOTO BAD_REG_SPECIAL;
      952     7743    3              ASSMBLD_INSTR.SIZE = 2;

   7743  1 003053   000002 236007                    LDQ     2,DL
         1 003054   200003 474500                    LDP4    @ASSMBLD_INSTR,,AUTO
         1 003055   400000 756100                    STQ     0,,PR4

      953     7744    3              ASSMBLD_INSTR.OPS(0) = 16;

   7744  1 003056   000020 235007                    LDA     16,DL
         1 003057   400001 755100                    STA     1,,PR4
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:141  

      954     7745    3              RLQ_INSTR.RLQ_INDICATOR = 0;

   7745  1 003060   000012 236000 2                  LDQ     10
         1 003061   200007 356100                    ANSQ    INSTR,,AUTO

      955     7746    3              RLQ_INSTR.REGISTER = NODE$ -> OUT$BLK.SUBLK$(1) -> OUT$BLK.SUBLK$(0) ->
              7746                       OUT$BLK.CODE;

   7746  1 003062   000004 471500                    LDP1    4,,PR0
         1 003063   100003 473500                    LDP3    3,,PR1
         1 003064   300000 236100                    LDQ     0,,PR3
         1 003065   000024 736000                    QLS     20
         1 003066   200007 676100                    ERQ     INSTR,,AUTO
         1 003067   000034 376003                    ANQ     28,DU
         1 003070   200007 656100                    ERSQ    INSTR,,AUTO

      956     7747    3              ASSMBLD_INSTR.OPS(1) = INSTR;

   7747  1 003071   200007 236100                    LDQ     INSTR,,AUTO
         1 003072   000024 772000                    QRL     20
         1 003073   400002 756100                    STQ     2,,PR4
         1 003074   003107 710000 1                  TRA     s:7755

      957     7748                                                /**/
      958     7749    3            CASE(3);                       /* STT instruction                    */

      959     7750    3              ASSMBLD_INSTR.SIZE = 2;

   7750  1 003075   000002 236007                    LDQ     2,DL
         1 003076   200003 470500                    LDP0    @ASSMBLD_INSTR,,AUTO
         1 003077   000000 756100                    STQ     0,,PR0

      960     7751    3              ASSMBLD_INSTR.OPS(0) = 16;

   7751  1 003100   000020 235007                    LDA     16,DL
         1 003101   000001 755100                    STA     1,,PR0
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:142  

      961     7752    3              STT_INSTR.STT_INDICATOR = 0;

   7752  1 003102   000000 236000 2                  LDQ     0
         1 003103   200007 356100                    ANSQ    INSTR,,AUTO

      962     7753    3              ASSMBLD_INSTR.OPS(1) = INSTR;

   7753  1 003104   200007 236100                    LDQ     INSTR,,AUTO
         1 003105   000024 772000                    QRL     20
         1 003106   000002 756100                    STQ     2,,PR0

      963     7754    3           END;                            /* End CASE                           */

      964     7755    2           RETURN;

   7755  1 003107   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 003110   000001 702211                    TSX2  ! 1,X1

   7747  1 003111                       BAD_REG_SPE* null
      965     7756        /**/
      966     7757    2   BAD_REG_SPECIAL: ;
      967     7758    2   MALFORMED_SPECIAL: ;

   7758  1 003111                       MALFORMED_S* null
      968     7759    2           S_D.ERROR = E@NO_INST;

   7759  1 003111   000447 236007                    LDQ     295,DL
         1 003112   000000 471400 xsym               LDP1    S_D$
         1 003113   100013 756100                    STQ     11,,PR1

      969     7760    2           ASSMBLD_INSTR.SIZE = 0;

   7760  1 003114   200003 473500                    LDP3    @ASSMBLD_INSTR,,AUTO
         1 003115   300000 450100                    STZ     0,,PR3

      970     7761    2           ALTRETURN;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:143  

   7761  1 003116   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 003117   000000 702211                    TSX2  ! 0,X1

      971     7762        /**/
      972     7763    2   END SPECIAL_ENCODE;
      973     7764        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:144  
      974     7765    1   MASK_ENCODE : PROC ALTRET;

   7765  1 003120   200062 741300       MASK_ENCODE  STX1  ! BRANCH_FLAG+1,,AUTO

      975     7766    2   DCL 1 MASK,
      976     7767    2         2 COUNT UBIN,
      977     7768    2         2 TEXT CHAR(16),
      978     7769    2         2 CHR(0:15) REDEF TEXT CHAR(1);
      979     7770                                                /**/
      980     7771                                                /**/
      981     7772    2           IF NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) -> OUT$BLK.SUBLK$ (0)

   7772  1 003121   200014 470500                    LDP0    NODE$,,AUTO
         1 003122   200043 720100                    LXL0    SUBLK_NUMBER,,AUTO
         1 003123   000003 471510                    LDP1    3,X0,PR0
         1 003124   100003 473500                    LDP3    3,,PR1
         1 003125   300000 722100                    LXL2    0,,PR3
         1 003126   000150 102003                    CMPX2   104,DU
         1 003127   003141 601000 1                  TNZ     s:7783

      982     7773    2             -> OUT$BLK.CODE = HEX_CODE    /* HEX_CODE */
      983     7774    3           THEN DO;

      984     7775    3                MASK.TEXT = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

   7775  1 003130   300003 474500                    LDP4    3,,PR3
         1 003131   400004 236100                    LDQ     4,,PR4
         1 003132   000033 772000                    QRL     27
         1 003133   000000 623006                    EAX3    0,QL
         1 003134   040100 100540                    MLR     fill='040'O
         1 003135   400004 200013                    ADSC9   4,,PR4                   cn=1,n=*X3
         1 003136   200064 000020                    ADSC9   MASK+1,,AUTO             cn=0,n=16

      985     7776    3                  OUT$BLK.SUBLK$ (0) -> OUT$BLK.SUBLK$ (0) ->
      986     7777    3                  OUT$SYM.TEXT;
      987     7778    3                MASK.COUNT = NODE$ -> OUT$BLK.SUBLK$(SUBLK_NUMBER) ->

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:145  
   7778  1 003137   200063 756100                    STQ     MASK,,AUTO

      988     7779    3                  OUT$BLK.SUBLK$ (0) -> OUT$BLK.SUBLK$(0)->
      989     7780    3                  OUT$SYM.COUNT;
      990     7781    3           END;

   7781  1 003140   003150 710000 1                  TRA     s:7788

      991     7782    3           ELSE DO;

      992     7783    3                MASK.TEXT = NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) ->

   7783  1 003141   300004 236100                    LDQ     4,,PR3
         1 003142   000033 772000                    QRL     27
         1 003143   000000 623006                    EAX3    0,QL
         1 003144   040100 100540                    MLR     fill='040'O
         1 003145   300004 200013                    ADSC9   4,,PR3                   cn=1,n=*X3
         1 003146   200064 000020                    ADSC9   MASK+1,,AUTO             cn=0,n=16

      993     7784    3                  OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXT;
      994     7785    3                MASK.COUNT = NODE$ -> OUT$BLK.SUBLK$ ( SUBLK_NUMBER ) ->

   7785  1 003147   200063 756100                    STQ     MASK,,AUTO

      995     7786    3                  OUT$BLK.SUBLK$ (0) -> OUT$SYM.COUNT;
      996     7787    3           END;

      997     7788    2           MASK_VALUE = 0;

   7788  1 003150   200057 450100                    STZ     MASK_VALUE,,AUTO

      998     7789    3           DO WHILE MASK.COUNT ~= 0;

   7789  1 003151   000000 116003                    CMPQ    0,DU
         1 003152   003226 600000 1                  TZE     s:7798

      999     7790    3                IF MASK.CHR(0) <= '9' AND MASK.CHR(0) >= '0'
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:146  

   7790  1 003153   200064 236100                    LDQ     MASK+1,,AUTO
         1 003154   777000 376003                    ANQ     -512,DU
         1 003155   071000 116003                    CMPQ    29184,DU
         1 003156   003160 600000 1                  TZE     s:7790+5
         1 003157   003175 603000 1                  TRC     s:7792
         1 003160   200064 236100                    LDQ     MASK+1,,AUTO
         1 003161   777000 376003                    ANQ     -512,DU
         1 003162   060000 116003                    CMPQ    24576,DU
         1 003163   003175 602000 1                  TNC     s:7792

     1000     7791    3                THEN MASK_VALUE = MASK_VALUE*16 + ASCBIN(MASK.CHR(0)) - 48;

   7791  1 003164   200064 236100                    LDQ     MASK+1,,AUTO
         1 003165   000033 772000                    QRL     27
         1 003166   200102 756100                    STQ     DISPLACEMENT+3,,AUTO
         1 003167   200057 236100                    LDQ     MASK_VALUE,,AUTO
         1 003170   000004 736000                    QLS     4
         1 003171   200102 036100                    ADLQ    DISPLACEMENT+3,,AUTO
         1 003172   000060 136007                    SBLQ    48,DL
         1 003173   200057 756100                    STQ     MASK_VALUE,,AUTO
         1 003174   003217 710000 1                  TRA     s:7795

     1001     7792    3                ELSE IF MASK.CHR(0) <= 'F' AND MASK.CHR(0) >= 'A'

   7792  1 003175   200064 236100                    LDQ     MASK+1,,AUTO
         1 003176   777000 376003                    ANQ     -512,DU
         1 003177   106000 116003                    CMPQ    35840,DU
         1 003200   003202 600000 1                  TZE     s:7792+5
         1 003201   003236 603000 1                  TRC     BAD_MASK
         1 003202   200064 236100                    LDQ     MASK+1,,AUTO
         1 003203   777000 376003                    ANQ     -512,DU
         1 003204   101000 116003                    CMPQ    33280,DU
         1 003205   003236 602000 1                  TNC     BAD_MASK

     1002     7793    3                     THEN MASK_VALUE = MASK_VALUE*16 + ASCBIN(MASK.CHR(0)) - 55;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:147  
   7793  1 003206   200064 236100                    LDQ     MASK+1,,AUTO
         1 003207   000033 772000                    QRL     27
         1 003210   200102 756100                    STQ     DISPLACEMENT+3,,AUTO
         1 003211   200057 236100                    LDQ     MASK_VALUE,,AUTO
         1 003212   000004 736000                    QLS     4
         1 003213   200102 036100                    ADLQ    DISPLACEMENT+3,,AUTO
         1 003214   000067 136007                    SBLQ    55,DL
         1 003215   200057 756100                    STQ     MASK_VALUE,,AUTO
         1 003216   003217 710000 1                  TRA     s:7795

     1003     7794    3                     ELSE GOTO BAD_MASK;
     1004     7795    3                MASK.TEXT = SUBSTR(MASK.TEXT,1);

   7795  1 003217   040100 100500                    MLR     fill='040'O
         1 003220   200064 200017                    ADSC9   MASK+1,,AUTO             cn=1,n=15
         1 003221   200064 000020                    ADSC9   MASK+1,,AUTO             cn=0,n=16

     1005     7796    3                MASK.COUNT = MASK.COUNT - 1;

   7796  1 003222   200063 235100                    LDA     MASK,,AUTO
         1 003223   000001 135007                    SBLA    1,DL
         1 003224   200063 755100                    STA     MASK,,AUTO

     1006     7797    3           END;

   7797  1 003225   003153 601000 1                  TNZ     s:7790

     1007     7798    2           MASK_THERE = TRUE;

   7798  1 003226   000225 236000 0                  LDQ     TRUE
         1 003227   400000 376003                    ANQ     -131072,DU
         1 003230   200060 756100                    STQ     MASK_THERE,,AUTO

     1008     7799    2           SUBLK_NUMBER = SUBLK_NUMBER + 1;

   7799  1 003231   200043 235100                    LDA     SUBLK_NUMBER,,AUTO
         1 003232   000001 035007                    ADLA    1,DL
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:148  
         1 003233   200043 755100                    STA     SUBLK_NUMBER,,AUTO

     1009     7800    2           RETURN;

   7800  1 003234   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 003235   000001 702211                    TSX2  ! 1,X1

     1010     7801                                                /**/
     1011     7802    2   BAD_MASK : MASK_VALUE = 0;    /* Mask field not evaluatable; zero substituted */

   7802  1 003236   200057 450100       BAD_MASK     STZ     MASK_VALUE,,AUTO

     1012     7803    2           S_D.ERROR = E@BAD_MASK;

   7803  1 003237   000456 235007                    LDA     302,DL
         1 003240   000000 470400 xsym               LDP0    S_D$
         1 003241   000013 755100                    STA     11,,PR0

     1013     7804    2           MASK_THERE = TRUE;

   7804  1 003242   000225 236000 0                  LDQ     TRUE
         1 003243   400000 376003                    ANQ     -131072,DU
         1 003244   200060 756100                    STQ     MASK_THERE,,AUTO

     1014     7805    2           SUBLK_NUMBER = SUBLK_NUMBER + 1;

   7805  1 003245   200043 235100                    LDA     SUBLK_NUMBER,,AUTO
         1 003246   000001 035007                    ADLA    1,DL
         1 003247   200043 755100                    STA     SUBLK_NUMBER,,AUTO

     1015     7806    2           ALTRETURN;

   7806  1 003250   200062 221300                    LDX1  ! BRANCH_FLAG+1,,AUTO
         1 003251   000000 702211                    TSX2  ! 0,X1

     1016     7807    2   END MASK_ENCODE;
     1017     7808        %EJECT;
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:149  
     1018     7809    1   MISSING_OPERAND : PROC ALTRET;

   7809  1 003252   200100 741300       MISSING_OPE* STX1  ! DISPLACEMENT+1,,AUTO

     1019     7810                                                /**/
     1020     7811    2           S_D.ERROR = E@MISSING_OPERAND;

   7811  1 003253   000457 235007                    LDA     303,DL
         1 003254   000000 470400 xsym               LDP0    S_D$
         1 003255   000013 755100                    STA     11,,PR0

     1021     7812    2           ASSMBLD_INSTR.SIZE = 0;

   7812  1 003256   200003 471500                    LDP1    @ASSMBLD_INSTR,,AUTO
         1 003257   100000 450100                    STZ     0,,PR1

     1022     7813    2           ALTRETURN;

   7813  1 003260   200100 221300                    LDX1  ! DISPLACEMENT+1,,AUTO
         1 003261   000000 702211                    TSX2  ! 0,X1

(unnamed)
 Sect OctLoc
   0     000   000000 006014                                                    ....

GENERIC_INSTRUCTIONS
 Sect OctLoc
   0     001   110114 124040   115103 114040   102122 113040   122124 124040    HLT MCL BRK RTT
   0     005   122124 103116   122124 103106   127104 124116   127104 124106    RTCNRTCFWDTNWDTF
   0     011   115115 115040   104103 040040   101123 104040   126114 104040    MMM DC  ASD VLD
   0     015   114122 104102   123122 104102   104103 040040   104103 040040    LRDBSRDBDC  DC
   0     021   055055 055040   122123 103040   104103 040040   104103 040040    --- RSC DC  DC
   0     025   104103 040040   104103 040040   104103 040040   104103 040040    DC  DC  DC  DC
   0     041*  126122 106040   101114 122040   101103 115040   115101 124040    VRF ALR ACM MAT
   0     045   101115 105040   104115 103040   104115 105040   103102 104040    AME DMC DME CBD
   0     051   123122 110040   104115 114040   103104 102040   104104 126040    SRH DML CDB DDV
   0     055   104101 104040   104123 102040   104123 110040   104103 115040    DAD DSB DSH DCM
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:150  
   0     061   104103 040040   104103 040040   104103 040040   104103 040040    DC  DC  DC  DC
   0     141*  104121 101040   121117 124040   104121 110040   121117 110040    DQA QOT DQH QOH
   0     145   104103 040040   104103 040040   104103 040040   104103 040040    DC  DC  DC  DC
   0     175*  104103 040040   104103 040040   104103 040040   104103 040040    DC  DC  DC  DC

SPECIAL_INSTRUCTIONS
 Sect OctLoc
   0     201   101103 121040   114104 124040   122114 121040   123124 124040    ACQ LDT RLQ STT

REGISTERS
 Sect OctLoc
   0     205   130040 040054   102061 054102   062054 102063   054102 064054    X  ,B1,B2,B3,B4,
   0     211   102065 054102   066054 102067   054122 061054   122062 054122    B5,B6,B7,R1,R2,R
   0     215   063054 122064   054122 065054   122066 054122   067054 115061    3,R4,R5,R6,R7,M1
   0     221   054115 062054   115063 054123   061054 123062   054123 063***    ,M2,M3,S1,S2,S3.

TRUE
 Sect OctLoc
   0     225   4***** ******                                                    ....

FALSE
 Sect OctLoc
   0     226   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
   0     227   000000 041432   100200 400000                                    ..!.@...

(unnamed)
 Sect OctLoc
   2     000   000003 777777   776003 777777   777703 777777   777603 777777    ................
   2     004   777743 777777   777737 777777   777077 777777   777777 700000    .........?......
   2     010   777003 777777   777777 777700   000037 777777                    ............
     1023     7814    2   END MISSING_OPERAND;
     1024     7815    1   END DFS$INSTR;

PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:151  
--  Include file information  --

   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DFS$INSTR.

   Procedure DFS$INSTR requires 1714 words for executable code.
   Procedure DFS$INSTR requires 68 words of local(AUTO) storage.

    No errors detected in file DFS$INSTR.:E05TSI    .
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:152  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:153  
          MINI XREF LISTING

ACQ_INSTR.ACQ_B_REG
      6924**DCL      7713<<ASSIGN
ACQ_INSTR.ACQ_INDICATOR1
      6921**DCL      7710<<ASSIGN
ACQ_INSTR.ACQ_INDICATOR2
      6923**DCL      7711<<ASSIGN
ACQ_INSTR.ACQ_R_REG
      6922**DCL      7712<<ASSIGN
ADDRESS IN PROCEDURE ENCODE_ADDR_SYL
      7249**DCL      7250--REDEF    7251--REDEF    7256--REDEF    7310<<ASSIGN   7354<<ASSIGN   7366<<ASSIGN
      7416<<ASSIGN   7433<<ASSIGN   7453<<ASSIGN   7453>>ASSIGN   7456>>ASSIGN   7525<<ASSIGN   7537<<ASSIGN
      7575<<ASSIGN
ADDR_MODE
      6931**DCL      7001<<ASSIGN   7111<<ASSIGN   7114>>IF       7114>>IF       7114>>IF       7138<<ASSIGN
      7139>>IF
ADDR_SYL.FRAME.INDIRECT_FIELD
      6884**DCL      7274<<ASSIGN   7294<<ASSIGN   7312<<ASSIGN   7324<<ASSIGN   7339<<ASSIGN   7356<<ASSIGN
      7368<<ASSIGN   7380<<ASSIGN   7390<<ASSIGN   7406<<ASSIGN   7418<<ASSIGN   7428<<ASSIGN   7465<<ASSIGN
      7475<<ASSIGN   7492<<ASSIGN   7527<<ASSIGN   7539<<ASSIGN   7566<<ASSIGN   7577<<ASSIGN
ADDR_SYL.FRAME.M_FIELD
      6883**DCL      7279<<ASSIGN   7299<<ASSIGN   7313<<ASSIGN   7329<<ASSIGN   7344<<ASSIGN   7355<<ASSIGN
      7369<<ASSIGN   7381<<ASSIGN   7391<<ASSIGN   7405<<ASSIGN   7417<<ASSIGN   7427<<ASSIGN   7466<<ASSIGN
      7476<<ASSIGN   7491<<ASSIGN   7526<<ASSIGN   7538<<ASSIGN   7567<<ASSIGN   7576<<ASSIGN
ADDR_SYL.FRAME.N_FIELD
      6885**DCL      7273<<ASSIGN   7293<<ASSIGN   7311<<ASSIGN   7323<<ASSIGN   7338<<ASSIGN   7357<<ASSIGN
      7367<<ASSIGN   7379<<ASSIGN   7389<<ASSIGN   7407<<ASSIGN   7419<<ASSIGN   7429<<ASSIGN   7464<<ASSIGN
      7474<<ASSIGN   7493<<ASSIGN   7528<<ASSIGN   7540<<ASSIGN   7553<<ASSIGN   7556<<ASSIGN   7559<<ASSIGN
      7578<<ASSIGN
ADDR_SYL.PHRASE
      6881**DCL      6882--REDEF
ALT IN PROCEDURE BRANCH_ENCODE
      7126**LABEL    7109--CALLALT  7117--CALLALT
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:154  
ALT2 IN PROCEDURE SHORT_VALUE_ENCODE
      7162**LABEL    7136--CALLALT
ALT3 IN PROCEDURE SHIFT_SINGLE_ENCODE
      7188**LABEL    7169--CALLALT
ALT4 IN PROCEDURE SHIFT_DOUBLE_ENCODE
      7213**LABEL    7195--CALLALT
ALT5 IN PROCEDURE ENCODE_ADDR_SYL
      7585**LABEL    7264--CALLALT  7308--CALLALT  7352--CALLALT  7364--CALLALT  7397--CALLALT  7414--CALLALT
      7431--CALLALT  7482--CALLALT  7505--CALLALT  7523--CALLALT  7535--CALLALT  7573--CALLALT
ARET IN PROCEDURE I_O_ENCODE
      7236**LABEL    7225--CALLALT
ASSMBLD_INSTR
      6934**DCL         8--PROC     6979<<ASSIGN
ASSMBLD_INSTR.OPS
      6936**DCL      7100<<ASSIGN   7100>>ASSIGN   7156<<ASSIGN   7181<<ASSIGN   7187<<ASSIGN   7207<<ASSIGN
      7233<<ASSIGN   7281<<ASSIGN   7301<<ASSIGN   7315<<ASSIGN   7316<<ASSIGN   7317<<ASSIGN   7331<<ASSIGN
      7346<<ASSIGN   7359<<ASSIGN   7360<<ASSIGN   7371<<ASSIGN   7372<<ASSIGN   7373<<ASSIGN   7383<<ASSIGN
      7393<<ASSIGN   7408<<ASSIGN   7409<<ASSIGN   7421<<ASSIGN   7422<<ASSIGN   7430<<ASSIGN   7437<<ASSIGN
      7438<<ASSIGN   7445<<ASSIGN   7446<<ASSIGN   7456<<ASSIGN   7468<<ASSIGN   7478<<ASSIGN   7495<<ASSIGN
      7496<<ASSIGN   7518<<ASSIGN   7529<<ASSIGN   7530<<ASSIGN   7541<<ASSIGN   7542<<ASSIGN   7543<<ASSIGN
      7569<<ASSIGN   7579<<ASSIGN   7580<<ASSIGN   7581<<ASSIGN   7596<<ASSIGN   7675<<ASSIGN   7709<<ASSIGN
      7714<<ASSIGN   7727<<ASSIGN   7731<<ASSIGN   7744<<ASSIGN   7747<<ASSIGN   7751<<ASSIGN   7753<<ASSIGN
ASSMBLD_INSTR.SIZE
      6935**DCL      7013<<ASSIGN   7099>>DOINDEX  7104<<ASSIGN   7157<<ASSIGN   7182<<ASSIGN   7208<<ASSIGN
      7231<<ASSIGN   7232>>DOINDEX  7280<<ASSIGN   7300<<ASSIGN   7318<<ASSIGN   7330<<ASSIGN   7345<<ASSIGN
      7361<<ASSIGN   7374<<ASSIGN   7382<<ASSIGN   7392<<ASSIGN   7410<<ASSIGN   7423<<ASSIGN   7439<<ASSIGN
      7447<<ASSIGN   7457<<ASSIGN   7467<<ASSIGN   7477<<ASSIGN   7497<<ASSIGN   7519<<ASSIGN   7531<<ASSIGN
      7544<<ASSIGN   7568<<ASSIGN   7582<<ASSIGN   7596>>ASSIGN   7597<<ASSIGN   7597>>ASSIGN   7662<<ASSIGN
      7672<<ASSIGN   7676<<ASSIGN   7708<<ASSIGN   7726<<ASSIGN   7743<<ASSIGN   7750<<ASSIGN   7760<<ASSIGN
      7812<<ASSIGN
BAD_INST
      7104**LABEL    7007--CALLALT  7017--CALLALT  7027--CALLALT  7030--CALLALT  7033--CALLALT  7036--CALLALT
      7040--CALLALT  7046--CALLALT  7051--CALLALT  7054--CALLALT  7057--CALLALT  7059--CALLALT  7070--CALLALT
      7071--CALLALT  7074--CALLALT  7077--CALLALT  7080--CALLALT  7083--CALLALT  7086--CALLALT  7089--CALLALT
      7092--CALLALT  7093--CALLALT  7096--CALLALT
BAD_MASK IN PROCEDURE MASK_ENCODE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:155  
      7802**LABEL    7794--GOTO
BAD_REG_SPECIAL IN PROCEDURE SPECIAL_ENCODE
      7747**LABEL    7701--GOTO     7707--GOTO     7725--GOTO     7742--GOTO
BAD_VALUE IN PROCEDURE ENCODE_ADDR_SYL
      7398**LABEL    7455--GOTO
BAD_VALUE IN PROCEDURE SHIFT_DOUBLE_ENCODE
      7212**LABEL    7198--CALLALT
BAD_VALUE IN PROCEDURE SHIFT_SINGLE_ENCODE
      7186**LABEL    7172--CALLALT
BAD_VALUE IN PROCEDURE SHORT_VALUE_ENCODE
      7161**LABEL    7144--CALLALT
BASED_PTR
      6932**DCL      6973>>ASSIGN
BIN_VAL IN PROCEDURE ENCODE_ADDR_SYL
      7243**DCL      7308<>CALL     7310>>ASSIGN   7352<>CALL     7354>>ASSIGN   7364<>CALL     7366>>ASSIGN
      7397<>CALL     7399>>ASSIGN   7414<>CALL     7416>>ASSIGN   7431<>CALL     7433>>ASSIGN   7482<>CALL
      7484>>ASSIGN   7505<>CALL     7507>>ASSIGN   7523<>CALL     7525>>ASSIGN   7535<>CALL     7537>>ASSIGN
      7573<>CALL     7575>>ASSIGN
BIN_VAL IN PROCEDURE SHIFT_DOUBLE_ENCODE
      7193**DCL      7198<>CALL     7200>>ASSIGN   7201>>IF
BIN_VAL IN PROCEDURE SHIFT_SINGLE_ENCODE
      7167**DCL      7172<>CALL     7174>>ASSIGN   7175>>IF
BIN_VAL IN PROCEDURE SHORT_VALUE_ENCODE
      7131**DCL      7132--REDEF    7144<>CALL     7147<<ASSIGN   7148>>ASSIGN   7149>>IF
BRANCH_ENCODE
      7107**PROC     7027--CALL
BRANCH_FLAG
      6966**DCL      6981<<ASSIGN   7112<<ASSIGN   7489>>IF       7500>>IF       7508>>IF
BRANCH_FRAME.VALUE
      6897**DCL      7489<<ASSIGN   7517<<ASSIGN
CURRENT_ADDRESS
      6963**DCL         8--PROC     7399>>ASSIGN   7484>>ASSIGN   7507>>ASSIGN
DFR$CONVERT IN PROCEDURE ENCODE_ADDR_SYL
      7242**DCL-ENT  7308--CALL     7352--CALL     7364--CALL     7397--CALL     7414--CALL     7431--CALL
      7482--CALL     7505--CALL     7523--CALL     7535--CALL     7573--CALL
DFR$CONVERT IN PROCEDURE SHIFT_DOUBLE_ENCODE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:156  
      7192**DCL-ENT  7198--CALL
DFR$CONVERT IN PROCEDURE SHIFT_SINGLE_ENCODE
      7166**DCL-ENT  7172--CALL
DFR$CONVERT IN PROCEDURE SHORT_VALUE_ENCODE
      7130**DCL-ENT  7144--CALL
DISPLACEMENT IN PROCEDURE ENCODE_ADDR_SYL
      7262**DCL      7399<<ASSIGN   7400>>IF       7400>>IF       7409>>ASSIGN   7484<<ASSIGN   7485>>IF
      7485>>IF       7496>>ASSIGN   7507<<ASSIGN   7508>>IF       7508>>IF       7508>>IF       7508>>IF
      7517>>ASSIGN
ENCODE_ADDR_SYL
      7239**PROC     7051--CALL     7054--CALL     7057--CALL     7070--CALL     7074--CALL     7077--CALL
      7080--CALL     7083--CALL     7086--CALL     7089--CALL     7092--CALL     7117--CALL     7225--CALL
FALSE
      6949**DCL      6977>>ASSIGN   6978>>ASSIGN   6981>>ASSIGN
FORM.HEX3
      6902**DCL      6903--REDEF    6906--REDEF
GENERIC_CODE
      6954**DCL      7644<<ASSIGN   7669>>DOCASE
GENERIC_ENCODE
      7667**PROC     7017--CALL
GENERIC_INSTRUCTIONS
      6844**DCL      7642>>IF
GENERIC_TYPE
      6861**DCL      7644>>ASSIGN
I
      6944**DCL      7099<<DOINDEX  7100>>ASSIGN   7100>>ASSIGN   7224<<DOINDEX  7226>>ASSIGN   7232<<DOINDEX
      7233>>ASSIGN   7233>>ASSIGN   7442>>IF       7442>>IF       7442>>IF       7442>>IF       7442>>IF
      7442>>IF       7442>>IF       7614<<DOINDEX  7615>>IF       7616>>ASSIGN   7617>>ASSIGN   7623<<DOINDEX
      7624>>IF       7626>>ASSIGN   7626>>ASSIGN   7632<<DOINDEX  7633>>IF       7635>>ASSIGN   7635>>ASSIGN
      7641<<DOINDEX  7642>>IF       7644>>ASSIGN   7645>>ASSIGN   7653<<DOINDEX  7654>>IF       7656>>ASSIGN
INDEX_FLAG
      6928**DCL      6978<<ASSIGN   7058>>IF       7351<<ASSIGN   7386<<ASSIGN   7396<<ASSIGN   7413<<ASSIGN
      7426<<ASSIGN   7461<<ASSIGN   7471<<ASSIGN   7481<<ASSIGN   7522<<ASSIGN   7534<<ASSIGN   7547<<ASSIGN
      7572<<ASSIGN
INSTR
      6870**DCL      6871--REDEF    6875--REDEF    6879--REDEF    6887--REDEF    6891--REDEF    6895--REDEF
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:157  
      6899--REDEF    6911--REDEF    6915--REDEF    6920--REDEF    6925--REDEF    6980<<ASSIGN   7156>>ASSIGN
      7181>>ASSIGN   7187>>ASSIGN   7207>>ASSIGN   7226>>ASSIGN   7228<<ASSIGN   7281>>ASSIGN   7301>>ASSIGN
      7315>>ASSIGN   7331>>ASSIGN   7346>>ASSIGN   7359>>ASSIGN   7371>>ASSIGN   7383>>ASSIGN   7393>>ASSIGN
      7408>>ASSIGN   7421>>ASSIGN   7430>>ASSIGN   7468>>ASSIGN   7478>>ASSIGN   7495>>ASSIGN   7518>>ASSIGN
      7529>>ASSIGN   7541>>ASSIGN   7569>>ASSIGN   7579>>ASSIGN   7714>>ASSIGN   7731>>ASSIGN   7747>>ASSIGN
      7753>>ASSIGN
INSTRUCTION.INDEXX
      6872**DCL      7000<<ASSIGN
INSTRUCTIONS
      6842**DCL      7615>>IF
INSTRUCTION_TYPE
      6843**DCL      7616>>ASSIGN
INSTR_TYPE
      6951**DCL      6999>>IF       7009>>DOCASE   7434>>DOCASE   7616<<ASSIGN   7625<<ASSIGN   7634<<ASSIGN
      7643<<ASSIGN   7655<<ASSIGN   7663<<ASSIGN
IOLD_INSTR_FLAG
      6930**DCL      7044<<ASSIGN   7047<<ASSIGN   7217>>IF       7220>>IF
I_O_ENCODE
      7216**PROC     7040--CALL     7046--CALL
I_O_INSTR_FLAG
      6929**DCL      7039<<ASSIGN   7041<<ASSIGN   7045<<ASSIGN   7048<<ASSIGN
LDT_INSTR.LDT_INDICATOR1
      6916**DCL      7728<<ASSIGN
LDT_INSTR.LDT_INDICATOR2
      6918**DCL      7729<<ASSIGN
LDT_INSTR.REGISTER
      6917**DCL      7730<<ASSIGN
MALFORMED_SPECIAL IN PROCEDURE SPECIAL_ENCODE
      7758**LABEL    7697--GOTO     7704--GOTO     7719--GOTO     7722--GOTO     7736--GOTO     7739--GOTO
MASK.CHR IN PROCEDURE MASK_ENCODE
      7769**DCL      7790>>IF       7790>>IF       7791>>ASSIGN   7792>>IF       7792>>IF       7793>>ASSIGN
MASK.COUNT IN PROCEDURE MASK_ENCODE
      7767**DCL      7778<<ASSIGN   7785<<ASSIGN   7789>>DOWHILE  7796<<ASSIGN   7796>>ASSIGN
MASK.TEXT IN PROCEDURE MASK_ENCODE
      7768**DCL      7769--REDEF    7775<<ASSIGN   7783<<ASSIGN   7795<<ASSIGN   7795>>ASSIGN
MASK_ENCODE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:158  
      7765**PROC     7007--CALL
MASK_PRESENT
      7593**PROC     7059--CALL     7071--CALL     7093--CALL
MASK_THERE
      6958**DCL      6977<<ASSIGN   7062>>IF       7595>>IF       7798<<ASSIGN   7804<<ASSIGN
MASK_VALUE
      6957**DCL      7596>>ASSIGN   7788<<ASSIGN   7791<<ASSIGN   7791>>ASSIGN   7793<<ASSIGN   7793>>ASSIGN
      7802<<ASSIGN
MISSING_OPERAND
      7809**PROC     7109--CALL     7136--CALL     7169--CALL     7195--CALL     7264--CALL
MNEMONIC_LENGTH
      6953**DCL      6984<<ASSIGN   6994>>CALLBLT  6995<<ASSIGN   6995>>ASSIGN
MNEMONIC_PTR$
      6941**DCL      6983<<ASSIGN   6984>>ASSIGN   6985>>ASSIGN   6985>>ASSIGN   7651>>ASSIGN   7651>>ASSIGN
NODE$
      6933**DCL      6971<<ASSIGN   6973<<ASSIGN   6982>>ASSIGN   6983>>ASSIGN   6992>>IF       6993>>ASSIGN
      7006>>IF       7111>>ASSIGN   7138>>ASSIGN   7144>>CALL     7172>>CALL     7198>>CALL     7265>>ASSIGN
      7266>>ASSIGN   7270>>ASSIGN   7275>>ASSIGN   7290>>ASSIGN   7295>>ASSIGN   7308>>CALL     7321>>ASSIGN
      7325>>ASSIGN   7336>>ASSIGN   7340>>ASSIGN   7352>>CALL     7364>>CALL     7377>>ASSIGN   7387>>ASSIGN
      7397>>CALL     7414>>CALL     7431>>CALL     7462>>ASSIGN   7472>>ASSIGN   7482>>CALL     7505>>CALL
      7523>>CALL     7535>>CALL     7548>>ASSIGN   7573>>CALL     7695>>IF       7698>>IF       7698>>IF
      7702>>IF       7705>>IF       7712>>ASSIGN   7713>>ASSIGN   7717>>IF       7720>>IF       7723>>IF
      7730>>ASSIGN   7734>>IF       7737>>IF       7740>>IF       7746>>ASSIGN   7772>>IF       7775>>ASSIGN
      7775>>ASSIGN   7778>>ASSIGN   7783>>ASSIGN   7783>>ASSIGN   7785>>ASSIGN
NUMBER_SUBLKS
      6952**DCL      6982<<ASSIGN   7005>>IF       7109>>IF       7136>>IF       7169>>IF       7195>>IF
      7217>>IF       7220>>IF       7224>>DOINDEX  7264>>IF
OPCODE
      6956**DCL      7000>>ASSIGN   7171>>ASSIGN   7197>>ASSIGN   7617<<ASSIGN   7626<<ASSIGN   7635<<ASSIGN
      7645<<ASSIGN   7675>>ASSIGN
OPERAND_CODE IN PROCEDURE ENCODE_ADDR_SYL
      7241**DCL      7265<<ASSIGN   7267>>DOCASE
OUT$BLK.CODE
      3150**DCL      6992>>IF       6993>>ASSIGN   7006>>IF       7111>>ASSIGN   7138>>ASSIGN   7265>>ASSIGN
      7270>>ASSIGN   7275>>ASSIGN   7290>>ASSIGN   7295>>ASSIGN   7313>>ASSIGN   7321>>ASSIGN   7325>>ASSIGN
      7336>>ASSIGN   7340>>ASSIGN   7357>>ASSIGN   7369>>ASSIGN   7377>>ASSIGN   7387>>ASSIGN   7419>>ASSIGN
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:159  
      7462>>ASSIGN   7472>>ASSIGN   7548>>ASSIGN   7698>>IF       7698>>IF       7702>>IF       7705>>IF
      7712>>ASSIGN   7713>>ASSIGN   7720>>IF       7723>>IF       7730>>ASSIGN   7737>>IF       7740>>IF
      7746>>ASSIGN   7772>>IF
OUT$BLK.NSUBLKS
      3154**DCL      6982>>ASSIGN   7695>>IF       7717>>IF       7734>>IF
OUT$BLK.SUBLK$
      3175**DCL      6983>>ASSIGN   6993>>ASSIGN   7006>>IF       7111>>ASSIGN   7138>>ASSIGN   7144>>CALL
      7144<>CALL     7172>>CALL     7172<>CALL     7198>>CALL     7198<>CALL     7265>>ASSIGN   7270>>ASSIGN
      7270>>ASSIGN   7275>>ASSIGN   7275>>ASSIGN   7290>>ASSIGN   7290>>ASSIGN   7295>>ASSIGN   7295>>ASSIGN
      7308>>CALL     7308<>CALL     7313>>ASSIGN   7313>>ASSIGN   7321>>ASSIGN   7321>>ASSIGN   7325>>ASSIGN
      7325>>ASSIGN   7336>>ASSIGN   7336>>ASSIGN   7340>>ASSIGN   7340>>ASSIGN   7352>>CALL     7352<>CALL
      7357>>ASSIGN   7357>>ASSIGN   7364>>CALL     7364<>CALL     7369>>ASSIGN   7369>>ASSIGN   7377>>ASSIGN
      7377>>ASSIGN   7387>>ASSIGN   7387>>ASSIGN   7397>>CALL     7397<>CALL     7414>>CALL     7414<>CALL
      7419>>ASSIGN   7419>>ASSIGN   7431>>CALL     7431<>CALL     7462>>ASSIGN   7462>>ASSIGN   7472>>ASSIGN
      7472>>ASSIGN   7482>>CALL     7482<>CALL     7505>>CALL     7505<>CALL     7523>>CALL     7523<>CALL
      7535>>CALL     7535<>CALL     7548>>ASSIGN   7548>>ASSIGN   7573>>CALL     7573<>CALL     7698>>IF
      7698>>IF       7702>>IF       7705>>IF       7705>>IF       7712>>ASSIGN   7713>>ASSIGN   7713>>ASSIGN
      7720>>IF       7723>>IF       7723>>IF       7730>>ASSIGN   7730>>ASSIGN   7737>>IF       7740>>IF
      7740>>IF       7746>>ASSIGN   7746>>ASSIGN   7772>>IF       7772>>IF       7775>>ASSIGN   7775>>ASSIGN
      7775>>ASSIGN   7775>>ASSIGN   7775>>ASSIGN   7775>>ASSIGN   7778>>ASSIGN   7778>>ASSIGN   7778>>ASSIGN
      7783>>ASSIGN   7783>>ASSIGN   7783>>ASSIGN   7783>>ASSIGN   7785>>ASSIGN   7785>>ASSIGN
OUT$SYM.COUNT
      3211**DCL      3214--IMP-SIZ  6984>>ASSIGN   6985>>ASSIGN   7651>>ASSIGN   7775>>ASSIGN   7778>>ASSIGN
      7783>>ASSIGN   7785>>ASSIGN
OUT$SYM.TEXT
      3214**DCL      6985>>ASSIGN   7651>>ASSIGN   7775>>ASSIGN   7783>>ASSIGN
REGISTERS
      6866**DCL      6994>>CALLBLT
REGISTER_CODE
      6943**DCL      6993<<ASSIGN   6994>>CALLBLT  7270<<ASSIGN   7272>>IF       7273>>ASSIGN   7275<<ASSIGN
      7277<<ASSIGN   7277>>ASSIGN   7278>>IF       7279>>ASSIGN   7290<<ASSIGN   7292>>IF       7293>>ASSIGN
      7295<<ASSIGN   7297<<ASSIGN   7297>>ASSIGN   7298>>IF       7299>>ASSIGN   7321<<ASSIGN   7323>>ASSIGN
      7325<<ASSIGN   7327<<ASSIGN   7327>>ASSIGN   7328>>IF       7329>>ASSIGN   7336<<ASSIGN   7338>>ASSIGN
      7340<<ASSIGN   7342<<ASSIGN   7342>>ASSIGN   7343>>IF       7344>>ASSIGN   7377<<ASSIGN   7379>>ASSIGN
      7387<<ASSIGN   7389>>ASSIGN   7462<<ASSIGN   7464>>ASSIGN   7472<<ASSIGN   7474>>ASSIGN   7548<<ASSIGN
      7550>>DOCASE   7553>>ASSIGN   7556>>ASSIGN   7559>>ASSIGN
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:160  
RLQ_INSTR.REGISTER
      6913**DCL      7746<<ASSIGN
RLQ_INSTR.RLQ_INDICATOR
      6912**DCL      7745<<ASSIGN
R_ADDRESS.HIGH_ORDER_BITS IN PROCEDURE ENCODE_ADDR_SYL
      7253**DCL      7316>>ASSIGN   7372>>ASSIGN   7445>>ASSIGN   7542>>ASSIGN   7580>>ASSIGN
R_ADDRESS.LOW_ORDER_BITS IN PROCEDURE ENCODE_ADDR_SYL
      7254**DCL      7317>>ASSIGN   7360>>ASSIGN   7373>>ASSIGN   7422>>ASSIGN   7446>>ASSIGN   7451>>IF
      7530>>ASSIGN   7543>>ASSIGN   7581>>ASSIGN
R_ADDRESS_32BITS.HIGH_ORDER_BITS IN PROCEDURE ENCODE_ADDR_SYL
      7258**DCL      7437>>ASSIGN
R_ADDRESS_32BITS.LOW_ORDER_BITS IN PROCEDURE ENCODE_ADDR_SYL
      7259**DCL      7438>>ASSIGN
SADDRESS IN PROCEDURE ENCODE_ADDR_SYL
      7250**DCL      7454>>IF       7454>>IF
SAVED_NODE$ IN PROCEDURE ENCODE_ADDR_SYL
      7261**DCL      7266<<ASSIGN   7313>>ASSIGN   7357>>ASSIGN   7369>>ASSIGN   7419>>ASSIGN
SCR_BUFFER
      6950**DCL      6985<<ASSIGN   6994<<CALLBLT  7615>>IF       7624>>IF       7633>>IF       7642>>IF
      7651<<ASSIGN   7654>>IF
SEARCH_OP_TABLE
      7607**PROC     6998--CALL
SHIFT_DOUBLE.VALUE
      6893**DCL      7200<<ASSIGN   7201>>IF       7203<<ASSIGN   7212<<ASSIGN
SHIFT_DOUBLE_ENCODE
      7191**PROC     7036--CALL
SHIFT_D_INSTRUCTIONS
      6863**DCL      7633>>IF
SHIFT_INSTRUCTIONS
      6862**DCL      7624>>IF
SHIFT_SINGLE.SHIFT_OP
      6888**DCL      7171<<ASSIGN   7197<<ASSIGN
SHIFT_SINGLE.VALUE
      6889**DCL      7174<<ASSIGN   7175>>IF       7177<<ASSIGN   7186<<ASSIGN
SHIFT_SINGLE_ENCODE
      7165**PROC     7033--CALL
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:161  
SHORT_VALUE_ENCODE
      7129**PROC     7030--CALL
SINGLE_OPERAND IN PROCEDURE ENCODE_ADDR_SYL
      7451**LABEL    7444--GOTO
SPECIAL_CODE
      6955**DCL      7656<<ASSIGN   7692>>DOCASE
SPECIAL_ENCODE
      7685**PROC     7096--CALL
SPECIAL_INSTRUCTIONS
      6864**DCL      7653--DOINDEX  7654>>IF
STT_INSTR.STT_INDICATOR
      6926**DCL      7752<<ASSIGN
SUBLK_NUMBER
      6946**DCL      6976<<ASSIGN   6983>>ASSIGN   6986<<ASSIGN   6986>>ASSIGN   6993>>ASSIGN   6996<<ASSIGN
      6996>>ASSIGN   7005>>IF       7006>>IF       7109>>IF       7111>>ASSIGN   7136>>IF       7138>>ASSIGN
      7144>>CALL     7169>>IF       7172>>CALL     7195>>IF       7198>>CALL     7229<<ASSIGN   7229>>ASSIGN
      7264>>IF       7265>>ASSIGN   7270>>ASSIGN   7275>>ASSIGN   7290>>ASSIGN   7295>>ASSIGN   7308>>CALL
      7313>>ASSIGN   7321>>ASSIGN   7325>>ASSIGN   7336>>ASSIGN   7340>>ASSIGN   7352>>CALL     7357>>ASSIGN
      7364>>CALL     7369>>ASSIGN   7377>>ASSIGN   7387>>ASSIGN   7397>>CALL     7414>>CALL     7419>>ASSIGN
      7431>>CALL     7462>>ASSIGN   7472>>ASSIGN   7482>>CALL     7505>>CALL     7523>>CALL     7535>>CALL
      7548>>ASSIGN   7573>>CALL     7772>>IF       7775>>ASSIGN   7775>>ASSIGN   7778>>ASSIGN   7783>>ASSIGN
      7783>>ASSIGN   7785>>ASSIGN   7799<<ASSIGN   7799>>ASSIGN   7805<<ASSIGN   7805>>ASSIGN
SV.VALUE
      6877**DCL      7148<<ASSIGN   7149>>IF       7153<<ASSIGN   7161<<ASSIGN
S_D.CURRENT_CHANNEL
      5988**DCL      5990--REDEF
S_D.DEBUGA
      5140**DCL      5142--REDEF
S_D.DESC$
      5120**DCL      6973>>ASSIGN   6974<<ASSIGN   6974>>ASSIGN
S_D.EIS
      6098**DCL      6127--REDEF
S_D.ERROR
      5069**DCL      7012<<ASSIGN   7064<<ASSIGN   7120<<ASSIGN   7141<<ASSIGN   7152<<ASSIGN   7176<<ASSIGN
      7202<<ASSIGN   7402<<ASSIGN   7486<<ASSIGN   7502<<ASSIGN   7514<<ASSIGN   7562<<ASSIGN   7601<<ASSIGN
      7679<<ASSIGN   7759<<ASSIGN   7803<<ASSIGN   7811<<ASSIGN
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:162  
S_D.HOST_MESSAGE_BUF_REMOTE
      6031**DCL      6032--REDEF    6046--REDEF
S_D.JDE
      5645**DCL      5646--REDEF
S_D.L$.VALUE
      5198**DCL      5204--REDEF    5212--REDEF    5215--REDEF    5218--REDEF    5221--REDEF
S_D.L$.VALUE.L
      5199**DCL      5200--REDEF    5201--REDEF
S_D.L6_MESSAGE_BUF
      6052**DCL      6054--REDEF
S_D.OUTPUT
      6018**DCL      6020--REDEF
S_D.REMOTE_MSG.FNCC
      6037**DCL      6038--REDEF
S_D.REMOTE_MSG.STXC
      6033**DCL      6034--REDEF
S_D.REMOTE_MSG.SUBFNCC
      6041**DCL      6042--REDEF
S_D.SDOT
      5662**DCL      7146>>IF       7451>>IF
S_D.SV
      5097**DCL      5118--REDEF
S_D$
      6349**DCL      5045--IMP-PTR  6973>>ASSIGN   6974>>ASSIGN   6974>>ASSIGN   7012>>ASSIGN   7064>>ASSIGN
      7120>>ASSIGN   7141>>ASSIGN   7146>>IF       7152>>ASSIGN   7176>>ASSIGN   7202>>ASSIGN   7402>>ASSIGN
      7451>>IF       7486>>ASSIGN   7502>>ASSIGN   7514>>ASSIGN   7562>>ASSIGN   7601>>ASSIGN   7679>>ASSIGN
      7759>>ASSIGN   7803>>ASSIGN   7811>>ASSIGN
TASSMBLD_INSTR.OPS
      6939**DCL      7226<<ASSIGN   7233>>ASSIGN
TASSMBLD_INSTR.SIZE
      6938**DCL      7223<<ASSIGN   7227<<ASSIGN   7227>>ASSIGN   7231>>ASSIGN
TEST_OP
      6964**DCL         8--PROC     6970>>IF       6999>>IF
TEST_PTR$
      6965**DCL         8--PROC     6971>>ASSIGN
TRUE
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:163  
      6948**DCL      7112>>ASSIGN   7351>>ASSIGN   7386>>ASSIGN   7396>>ASSIGN   7413>>ASSIGN   7426>>ASSIGN
      7461>>ASSIGN   7471>>ASSIGN   7481>>ASSIGN   7522>>ASSIGN   7534>>ASSIGN   7547>>ASSIGN   7572>>ASSIGN
      7798>>ASSIGN   7804>>ASSIGN
TXT_VAL.HI IN PROCEDURE SHORT_VALUE_ENCODE
      7133**DCL      7147>>ASSIGN
TXT_VAL.LO IN PROCEDURE SHORT_VALUE_ENCODE
      7134**DCL      7146>>IF
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:164  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DFS$INSTR File=DFS$INSTR.:E05TSI                              TUE 07/29/97 14:43 Page:165  
              MINI UREF LISTING

A_OK    7089**LABEL
DDE$ERROR    6961**DCL-ENT
DFS$INSTR       8**PROC
ENCODE IN PROCEDURE ENCODE_ADDR_SYL   7267**LABEL
FCG    6960**DCL
GENERIC IN PROCEDURE SEARCH_OP_TABLE   7641**LABEL
HEX_STRING IN PROCEDURE ENCODE_ADDR_SYL   7244**DCL
J    6945**DCL
MASK_PTR$    6942**DCL
NIL$    6841**DCL
ODD_INST_CODE    6947**DCL
REGULAR IN PROCEDURE SEARCH_OP_TABLE   7614**LABEL
SHIFT_D IN PROCEDURE SEARCH_OP_TABLE   7632**LABEL
SHIFT_S IN PROCEDURE SEARCH_OP_TABLE   7623**LABEL
SPECIAL_CS IN PROCEDURE SEARCH_OP_TABLE   7653**LABEL
TYPE_ENCODE    7009**LABEL
UNFOLD IN PROCEDURE ENCODE_ADDR_SYL   7550**LABEL
VALUE IN PROCEDURE ENCODE_ADDR_SYL   7248**DCL
