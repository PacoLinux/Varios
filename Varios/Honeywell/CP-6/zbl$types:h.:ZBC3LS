

11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       *
    5       */
    6
    7      /*
    8       *  L L G E N
    9       *
   10       *  An Extended LL(1) Parser Generator
   11       *
   12       *  Author : Ceriel J.H. Jacobs
   13       */
   14
   15      /*
   16       * types.h $Header: types.h,v 2.2 87/03/10 01:17:10 ceriel Exp $
   17       * Type and structure definitions
   18       */
   19
   20      typedef   int   *p_set;     /* pointer to bitset */
   21      typedef char *p_mem;     /* pointer to some core */
   22      typedef char *string;
   23
   24      /*
   25       * structure for a token
   26       */
   27      typedef struct token {
   28       int   t_tokno; /* Lexical token number */
   29       union {
   30          string   t_s;  /* Attribute is either a string or */
   31          int   t_v;  /* an integer */
   32       } t_x;
   33      # define t_string t_x.t_s
   34      # define t_num t_x.t_v
   35      } t_token, *p_token;
   36
   37      /*
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      2    
   38       * structure for the grammar elements
   39       */
   40      typedef struct gram {
   41       short x;    /* for lay-out see comment below */
   42       short g_lineno;   /* element found on this line number */
   43      } t_gram,*p_gram;
   44
   45      /*
   46       * Layout of the field x:
   47       *
   48       * 15     13 12         9 8                 0
   49       * ------------------------------------------
   50       * | type   | nparams    | index            |
   51       * ------------------------------------------
   52       * of
   53       * 15     13 12                             0
   54       * ------------------------------------------
   55       * | type   | index                         |
   56       * ------------------------------------------
   57       * dependant on type
   58       */
   59      # define UNDEFINED 000777
   60      # define EORULE    00 /* End of (sub)rule */
   61      # define ACTION    01 /* Imbedded action */
   62      # define NONTERM   02 /* A nonterminal */
   63      # define TERMINAL  03 /* A terminal */
   64      # define TERM      04 /* Something between square brackets */
   65      # define ALTERNATION  05 /* Alternation (|) */
   66      # define LITERAL   06 /* Also a terminal */
   67
   68      /*
   69       * Access macros for the x-field of a grammar element
   70       */
   71      # define g_gettype(p) (((p)->x>>13)&07)
   72      # define g_getcont(p) ((p)->x&017777)
   73      # define g_getnont(p) ((p)->x&0777)
   74      # define g_getnpar(p) (((p)->x>>9)&017)
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      3    
   75      # define g_settype(p,s)  { assert(((unsigned)(s))<=07);(p)->x=((p)->x&017777)|((s)<<13);}
   76      # define g_setcont(p,s) { assert(((unsigned)(s))<=017777);(p)->x=((p)->x&0160000)|(s);}
   77      # define g_setnont(p,s) { assert(((unsigned)(s))<=0777);(p)->x=((p)->x&0177000)|(s);}
   78      # define g_setnpar(p,s) { assert(((unsigned)(s))<=017);(p)->x=((p)->x&0160777)|((s)<<9);}
   79
   80      /*
   81       * Some constants to communicate with the symbol table search routine
   82       */
   83      # define UNKNOWN   00 /* Not equal to NONTERM, TERMINAL or LITERAL */
   84
   85      /*
   86       * Some constants for safety
   87       */
   88      # define SAFE      0  /* Indicates that a scan is done, and that the
   89                 * token is correct
   90                 */
   91      # define SAFESCANDONE 1  /* Indicates that a scan is done, and that the
   92                 * token will not be skipped
   93                 */
   94      # define SCANDONE  2  /* Indicates that a scan is done */
   95      # define NOSCANDONE   3  /* Indicates that no scan is done */
   96      # define NOSAFETY  4  /* Safety not yet computed */
   97
   98      /*
   99       * nonterminal structure
  100       */
  101      typedef   struct {
  102       short n_flags; /* low order four bits are reserved
  103                 * the parameter count
  104                 */
  105      # define getntparams(p)  ((p)->n_flags&017)
  106      # define setntparams(p,i)   {assert(((unsigned)(i))<=017);(p)->n_flags&=~017;(p)->n_flags|=(i);}
  107      # define RECURSIVE 02000 /* Set if the default rule is recursive */
  108      # define PARAMS    04000 /* tells if a nonterminal has parameters */
  109      # define EMPTY     010000   /* tells if a nonterminal produces empty */
  110      # define LOCALS    020000  /* local declarations ? */
  111      # define REACHABLE 040000   /* can this nonterminal be reached ? */
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      4    
  112      # define VERBOSE   0100000  /* Set if in LL.output file */
  113       char  n_insafety;
  114       char  n_outsafety;
  115      # define getntsafe(p) ((p)->n_insafety)
  116      # define setntsafe(p,i)  {assert(((unsigned)(i))<=NOSAFETY);(p)->n_insafety=(i);}
  117      # define getntout(p)  ((p)->n_outsafety)
  118      # define setntout(p,i)   {assert(((unsigned)(i))<=NOSAFETY);(p)->n_outsafety=(i);}
  119       short n_count; /* pieces of code before this rule */
  120       short n_lineno;   /* declared on line ... */
  121       p_gram   n_rule;     /* pointer to right hand side of rule */
  122       union {
  123          p_set n_f;  /* ptr to "first" set */
  124          string   n_s;  /* If this nonterminal is not declared,
  125                 * This field indicates the filename in
  126                 * which it occurred
  127                 */
  128       } n_x;
  129      # define n_first  n_x.n_f
  130      # define n_string n_x.n_s
  131       p_set n_follow;   /* pointer to the "follow" set   */
  132       p_set n_contains; /* pointer to symbols that can be produced */
  133       string   n_name;     /* name of nonterminal */
  134      } t_nont, *p_nont;
  135
  136      /*
  137       * hash table structure
  138       */
  139      typedef struct h_entry {
  140       string      h_name;     /* pointer to name */
  141       t_gram      h_type;     /* Type and index */
  142       struct h_entry *h_next; /* next in hash chain */
  143      } t_entry, *p_entry;
  144
  145      /*
  146       * link   structure to link alternations
  147       */
  148      typedef struct link {
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      5    
  149       unsigned int   l_flag;
  150      # define COND      01    /* Set if this alternative has a %if */
  151      # define DEF    02    /* This alternative is default */
  152      # define PREFERING 010      /* %prefer */
  153      # define AVOIDING  020      /* %avoid */
  154      # define NOCONF    01000    /* Set if there is a resolver without
  155                    * conflict
  156                    */
  157       p_gram      l_rule;     /* pointer to this rule */
  158       p_set    l_symbs; /* set,  when to take this rule */
  159       p_set    l_others;   /* set, when to take another rule */
  160      } t_link, *p_link;
  161
  162      /*
  163       * Structure for a repitition specification
  164       */
  165      typedef short t_reps,*p_reps;
  166
  167      # define FIXED     00 /* a fixed number */
  168      # define STAR      01 /* 0 or more times */
  169      # define PLUS      02 /* 1 or more times */
  170      # define OPT    03 /* 0 or 1 times */
  171
  172      /*
  173       * Access macros for repitition in term
  174       */
  175      # define r_getkind(q) ((q)->t_reps&03)
  176      # define r_getnum(q)  (((q)->t_reps>>2)&037777)
  177      # define r_setkind(q,s)  { assert(((unsigned)(s))<=03);(q)->t_reps=((q)->t_reps&0177774)|(s);}
  178      # define r_setnum(q,s)   { assert(((unsigned)(s))<=037777);(q)->t_reps=((q)->t_reps&03)|((s)<<2);}
  179
  180      /*
  181       * header structure for  a term
  182       */
  183      typedef struct term {
  184       t_reps   t_reps;     /* repeats ? */
  185       short t_flags; /* Low order three bits for safety */
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      6    
  186      # define gettout(q)   ((q)->t_flags&07)
  187      # define settout(q,i) {assert(((unsigned)(i))<=NOSAFETY);(q)->t_flags&=~07;(q)->t_flags|=i;}
  188      # define PERSISTENT   010   /* Set if this term has %persistent */
  189      # define RESOLVER  020   /* Set if this term has %while */
  190      # define EMPTYFIRST   0100  /* Error, empty first */
  191      # define EMPTYTERM 0200  /* Error, term can produce empty */
  192      /* # define NOCONF 01000 see link structure */
  193
  194       p_gram   t_rule;     /* pointer to this term */
  195       p_set t_follow;   /* set of followers */
  196       p_set t_first; /* set of firsts */
  197       p_set t_contains; /* contains set */
  198      } t_term, *p_term;
  199
  200      /*
  201       * structure for firstmacros list
  202       */
  203      typedef struct ff_firsts {
  204       string   ff_name; /* Name of the macro */
  205       int   ff_nont; /* for this nonterminal */
  206       struct ff_firsts *ff_next;
  207      } t_first, *p_first;
  208
  209      /*
  210       * structure for start symbol list
  211       */
  212      typedef t_first t_start;
  213      typedef p_first p_start;
  214
  215      typedef struct order {
  216       int   o_index; /* index in nonterminal array */
  217       struct order *o_next;
  218      } t_order, *p_order;
  219
  220      /*
  221       * structure for file names and info
  222       */
11:02 AUG 20 '97 zbl$types:h.:ZBC3TSI                                      7    
  223      typedef struct f_file {
  224       string   f_name;     /* File name */
  225       p_first f_firsts; /* ptr to list of firstmacros that must be
  226                 * generated in the target file for this
  227                 * grammar file
  228                 */
  229       struct order *f_list;   /* list of nonterminals in this file  */
  230      } t_file, *p_file;
  231
  232      typedef struct info_alloc {
  233       /*
  234        * Structure used for dynamically growing arrays
  235        */
  236       unsigned i_size;  /* Size of the array */
  237       unsigned i_esize; /* Size of an element */
  238       unsigned i_incr;  /* When filled, add room for i_incr elements */
  239       p_mem i_ptr;      /* ptr to base of array */
  240       p_mem i_max;      /* ptr to first free */
  241       p_mem i_top;      /* ptr to top of array */
  242      } t_info, *p_info;
  243
  244      # ifdef NDEBUG
  245      # define STATIC extern
  246      # else not NDEBUG
  247      # define STATIC extern
  248      # endif not NDEBUG
  249

