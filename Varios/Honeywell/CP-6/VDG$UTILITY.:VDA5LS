VERSION A05

PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:1    
        1        1        /*M* VDG$UTILITY - General utility routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDG$UTILITY
       12       12            PURPOSE:  General utility routines, subroutinized to avoid code
       13       13                duplication.
       14       14            DESCRIPTION:
       15       15                This module contains several external routines:
       16       16
       17       17                VDG$TEST_1_RANGE
       18       18                Given an InTree, will determine if the InTree evaluates
       19       19                to a single range or to multiple ranges.  This is used
       20       20                by certain commands (EDIT, LOCATION) which can only be
       21       21                used with single-range block expressions.
       22       22                Multiple ranges are indicated only by a SELECT-repeat
       23       23                count which is greater than one.
       24       24
       25       25                VDG$RESIZE_COMMAND_WINDOW
       26       26                Changes the height of the command window.  There are two
       27       27                entry-points to this routine:  VDG$EXPAND_COMMAND_WINDOW will
       28       28                expand the command window if it's not already at least a given
       29       29                height; VDG$SHRINK_COMMAND_WINDOW will shrink it if it's not already
       30       30                at most a given height.  Also mucks with pagehalt appropriately.
       31       31
       32       32                VDG$ERASE_COMMAND_WINDOW
       33       33                If the command window is open in 2Dim form, erases it.
       34       34
       35       35                VDG$COMPARE_LOCS
       36       36                Given two VD$LOCATIONs, compares them.  Returns a return-code
       37       37                indicating less than, greater than, or equal to.
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:2    
       38       38
       39       39                VDG$COMPARE_PTRS_W_RANGE
       40       40                Given a VD$LOCATION_PTRS and a VD$RANGE, see if the location
       41       41                is within the range.
       42       42
       43       43                VDG$COMPARE_LOC_W_PTRS
       44       44                Given a VD$LOCATION and a range represented by two
       45       45                VD$LOCATION_PTRS, see if the location is within the range.
       46       46
       47       47                VDG$LOCATION_TO_PTRS
       48       48                Builds a VD$LOCATION_PTRS from a VD$LOCATION.
       49       49
       50       50                VDG$BUILD_NEW_REC
       51       51                VDG$BUILD_NEW_REC is passed two VD$NODE_DESC structure, two positional
       52       52                values, and a BNR_xxx EQU that inidcates to VDG$BUILD_NEW_REC how to
       53       53                build the new record. If the VD$BUFFER.LENGTH# is zero
       54       54                and the VD$NODE_DESC.EOR is reset, VDG$BUILD_NEW_REC
       55       55                will treat that VD$NODE_DESC as having no record contents.
       56       56                The value of the BNR_xxx code will determine whether VDG$BUILD_NEW_REC
       57       57                has one or two records to work with, and whether the S_POS and E_POS
       58       58                are on one or the other record. When VDG$BUILD_NEW_REC has built the
       59       59                new record, VDG$BUILD_NEW_REC will release the second VD$NODE_DESC
       60       60                structure's allocated area. VDG$BUILD_NEW_REC will also release the
       61       61                allocated area for the first VD$NODE_DESC structure, and move the
       62       62                newly built record into the first VD$NODE_DESC structure.
       63       63                Please note: An empty record is represented by the LENGTH# = 0
       64       64                              and EOR being set.
       65       65
       66       66                             A null record, i.e. there is no record. is represented
       67       67                              by LENGTH# = 0 and EOR being reset.
       68       68
       69       69                VDG$BUILD_LOCATION
       70       70                Given the results of a KEYR=YES monitor call (M$PRECORD or
       71       71                M$READ), will build a VD$LOCATION structure corresponding
       72       72                to the returned key or EOF condition.
       73       73
       74       74                VDG$BUILD_KEY
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:3    
       75       75                Given a string of bytes representing a record key, store
       76       76                them (or a reference to them) in a VD$KEY structure.
       77       77                This is done differently for short keys than for long
       78       78                keys: short keys are stored locally, ie, in the VD$KEY
       79       79                structure itself; long keys are stored remotely, ie, in a
       80       80                separately-allocated VD$REMOTE_TEXTC object.
       81       81
       82       82                VDG$FORMAT_NUMBER
       83       83                Given an object class and a binary word, will format the
       84       84                appropriate string.  Handles numbers, booleans, and enumerated
       85       85                values.  For numbers, leading zeros will be suppressed.
       86       86                Booleans will be translated to ON or OFF keywords, and
       87       87                enumerated values will be translated into the appropriate
       88       88                value.
       89       89
       90       90                VDG$FORMAT_KEY
       91       91                Given a VD$KEY structure, will return a string of the
       92       92                appropriate form:
       93       93                    99999.999   for KT_NUMBER keys.
       94       94                                Will truncate leading and trailing zeros.
       95       95                                (For KT_NUMBER, ORG_CONSEC keys, use
       96       96                                VDG$FORMAT_NUMBER.)
       97       97                    XX...XX     for KT_STRING keys.
       98       98                                Will translate non-displayable characters
       99       99                                to %CHR_NON_DISPLAYABLE.
      100      100
      101      101                VDG$FORMAT_LOCATION
      102      102
      103      103                VDG$FORMAT_BLOCK_DESC
      104      104
      105      105                VDG$EXEC_CONTROL
      106      106                Given a text string (which could be a command line, input
      107      107                data from the command stream, or a literal string) and an
      108      108                index into the text string of a $CONTROL-function invokation,
      109      109                VDG$EXEC_CONTROL will execute the $CONTROL function
      110      110                which appears at the specified index.
      111      111
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:4    
      112      112                Some functions can only partially be executed on the given
      113      113                string alone.  Therefore, a "return code" (and optional
      114      114                $CONTROL-function arguments) is returned by
      115      115                VDG$EXEC_CONTROL, telling the caller if the function has been
      116      116                completely executed, or if not, what function it was that was
      117      117                only partially executed.
      118      118
      119      119                VDG$XLATE_LOCATIONS
      120      120                Given a VD$XLATE_LOCATIONS table, will walk the Locations file,
      121      121                the Windows file, and the source operand, examining all
      122      122                VD$LOCATIONs in each of them, and either build entries in
      123      123                the table for VD$LOCATIONS from a specified file, or will
      124      124                translate the VD$LOCATIONS from a specified file using the
      125      125                table to direct the translation.
      126      126        */
      127      127
      128      128        /*D* NAME: VDG$TEST_1_RANGE
      129      129            PARAMETERS:
      130      130                IT_BLOCK_EXPR - VD$IT_BLOCK_EXPR node which is the root of
      131      131                    the InTree.
      132      132                SINGLE_RANGE - An uninitialized BIT(1) ALIGNED flag.
      133      133            INPUT:
      134      134            OUTPUT:
      135      135                SINGLE_RANGE will be set %TRUE if IT_BLOCK_EXPR specifies
      136      136                    a single range; %FALSE otherwise.
      137      137            DESCRIPTION:
      138      138                Check all the IT_SELECT nodes in the InTree:  if any have
      139      139                a repeat count which is > 1, set SINGLE_RANGE to %FALSE
      140      140                and return.
      141      141        */
      142      142
      143      143        VDG$TEST_1_RANGE: PROC (IT_BLOCK_EXPR, SINGLE_RANGE) ALTRET;
      144      144
      145      145
      146      146        %INCLUDE VD_MACROS_M;
      147     2361
      148     2362
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:5    
      149     2363        %VD$IT_BLOCK_EXPR (NAME=IT_BLOCK_EXPR, STCLASS=PARAM);
      150     2513    1   DCL SINGLE_RANGE BIT(1) ALIGNED;
      151     2514
      152     2515
      153     2516
      154     2517    1   DCL IT_SELECT$ PTR;
      155     2518
      156     2519
      157     2520        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
      158     2557
      159     2558
      160     2559
      161     2560    1           SINGLE_RANGE = %FALSE;      /* Assume it's multi-range */
      162     2561
      163     2562    1           IT_SELECT$ = IT_BLOCK_EXPR.SELECTS$;
      164     2563    2           DO WHILE IT_SELECT$ ~= ADDR(NIL);
      165     2564    2              IF IT$SELECT.RPT_ALL
      166     2565    2                OR IT$SELECT.RPT_COUNT# > 1 THEN
      167     2566    2                 RETURN;       /* It's multi-range */
      168     2567    2              IT_SELECT$ = IT$SELECT.FLINK$;
      169     2568    2              END;
      170     2569
      171     2570    1           SINGLE_RANGE = %TRUE;
      172     2571    1           RETURN;
      173     2572
      174     2573    1   END VDG$TEST_1_RANGE;
      175     2574        %EOD;

PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:6    
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$TEST_1_RANGE.

   Procedure VDG$TEST_1_RANGE requires 23 words for executable code.
   Procedure VDG$TEST_1_RANGE requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:7    

 Object Unit name= VDG$TEST_1_RANGE                           File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:02.12 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    23     27  VDG$TEST_1_RANGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  VDG$TEST_1_RANGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:8    


        1        1        /*M* VDG$UTILITY - General utility routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDG$UTILITY
       12       12            PURPOSE:  General utility routines, subroutinized to avoid code
       13       13                duplication.
       14       14            DESCRIPTION:
       15       15                This module contains several external routines:
       16       16
       17       17                VDG$TEST_1_RANGE
       18       18                Given an InTree, will determine if the InTree evaluates
       19       19                to a single range or to multiple ranges.  This is used
       20       20                by certain commands (EDIT, LOCATION) which can only be
       21       21                used with single-range block expressions.
       22       22                Multiple ranges are indicated only by a SELECT-repeat
       23       23                count which is greater than one.
       24       24
       25       25                VDG$RESIZE_COMMAND_WINDOW
       26       26                Changes the height of the command window.  There are two
       27       27                entry-points to this routine:  VDG$EXPAND_COMMAND_WINDOW will
       28       28                expand the command window if it's not already at least a given
       29       29                height; VDG$SHRINK_COMMAND_WINDOW will shrink it if it's not already
       30       30                at most a given height.  Also mucks with pagehalt appropriately.
       31       31
       32       32                VDG$ERASE_COMMAND_WINDOW
       33       33                If the command window is open in 2Dim form, erases it.
       34       34
       35       35                VDG$COMPARE_LOCS
       36       36                Given two VD$LOCATIONs, compares them.  Returns a return-code
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:9    
       37       37                indicating less than, greater than, or equal to.
       38       38
       39       39                VDG$COMPARE_PTRS_W_RANGE
       40       40                Given a VD$LOCATION_PTRS and a VD$RANGE, see if the location
       41       41                is within the range.
       42       42
       43       43                VDG$COMPARE_LOC_W_PTRS
       44       44                Given a VD$LOCATION and a range represented by two
       45       45                VD$LOCATION_PTRS, see if the location is within the range.
       46       46
       47       47                VDG$LOCATION_TO_PTRS
       48       48                Builds a VD$LOCATION_PTRS from a VD$LOCATION.
       49       49
       50       50                VDG$BUILD_NEW_REC
       51       51                VDG$BUILD_NEW_REC is passed two VD$NODE_DESC structure, two positional
       52       52                values, and a BNR_xxx EQU that inidcates to VDG$BUILD_NEW_REC how to
       53       53                build the new record. If the VD$BUFFER.LENGTH# is zero
       54       54                and the VD$NODE_DESC.EOR is reset, VDG$BUILD_NEW_REC
       55       55                will treat that VD$NODE_DESC as having no record contents.
       56       56                The value of the BNR_xxx code will determine whether VDG$BUILD_NEW_REC
       57       57                has one or two records to work with, and whether the S_POS and E_POS
       58       58                are on one or the other record. When VDG$BUILD_NEW_REC has built the
       59       59                new record, VDG$BUILD_NEW_REC will release the second VD$NODE_DESC
       60       60                structure's allocated area. VDG$BUILD_NEW_REC will also release the
       61       61                allocated area for the first VD$NODE_DESC structure, and move the
       62       62                newly built record into the first VD$NODE_DESC structure.
       63       63                Please note: An empty record is represented by the LENGTH# = 0
       64       64                              and EOR being set.
       65       65
       66       66                             A null record, i.e. there is no record. is represented
       67       67                              by LENGTH# = 0 and EOR being reset.
       68       68
       69       69                VDG$BUILD_LOCATION
       70       70                Given the results of a KEYR=YES monitor call (M$PRECORD or
       71       71                M$READ), will build a VD$LOCATION structure corresponding
       72       72                to the returned key or EOF condition.
       73       73
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:10   
       74       74                VDG$BUILD_KEY
       75       75                Given a string of bytes representing a record key, store
       76       76                them (or a reference to them) in a VD$KEY structure.
       77       77                This is done differently for short keys than for long
       78       78                keys: short keys are stored locally, ie, in the VD$KEY
       79       79                structure itself; long keys are stored remotely, ie, in a
       80       80                separately-allocated VD$REMOTE_TEXTC object.
       81       81
       82       82                VDG$FORMAT_NUMBER
       83       83                Given an object class and a binary word, will format the
       84       84                appropriate string.  Handles numbers, booleans, and enumerated
       85       85                values.  For numbers, leading zeros will be suppressed.
       86       86                Booleans will be translated to ON or OFF keywords, and
       87       87                enumerated values will be translated into the appropriate
       88       88                value.
       89       89
       90       90                VDG$FORMAT_KEY
       91       91                Given a VD$KEY structure, will return a string of the
       92       92                appropriate form:
       93       93                    99999.999   for KT_NUMBER keys.
       94       94                                Will truncate leading and trailing zeros.
       95       95                                (For KT_NUMBER, ORG_CONSEC keys, use
       96       96                                VDG$FORMAT_NUMBER.)
       97       97                    XX...XX     for KT_STRING keys.
       98       98                                Will translate non-displayable characters
       99       99                                to %CHR_NON_DISPLAYABLE.
      100      100
      101      101                VDG$FORMAT_LOCATION
      102      102
      103      103                VDG$FORMAT_BLOCK_DESC
      104      104
      105      105                VDG$EXEC_CONTROL
      106      106                Given a text string (which could be a command line, input
      107      107                data from the command stream, or a literal string) and an
      108      108                index into the text string of a $CONTROL-function invokation,
      109      109                VDG$EXEC_CONTROL will execute the $CONTROL function
      110      110                which appears at the specified index.
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:11   
      111      111
      112      112                Some functions can only partially be executed on the given
      113      113                string alone.  Therefore, a "return code" (and optional
      114      114                $CONTROL-function arguments) is returned by
      115      115                VDG$EXEC_CONTROL, telling the caller if the function has been
      116      116                completely executed, or if not, what function it was that was
      117      117                only partially executed.
      118      118
      119      119                VDG$XLATE_LOCATIONS
      120      120                Given a VD$XLATE_LOCATIONS table, will walk the Locations file,
      121      121                the Windows file, and the source operand, examining all
      122      122                VD$LOCATIONs in each of them, and either build entries in
      123      123                the table for VD$LOCATIONS from a specified file, or will
      124      124                translate the VD$LOCATIONS from a specified file using the
      125      125                table to direct the translation.
      126      126        */
      127      127
      128      128        /*D* NAME: VDG$TEST_1_RANGE
      129      129            PARAMETERS:
      130      130                IT_BLOCK_EXPR - VD$IT_BLOCK_EXPR node which is the root of
      131      131                    the InTree.
      132      132                SINGLE_RANGE - An uninitialized BIT(1) ALIGNED flag.
      133      133            INPUT:
      134      134            OUTPUT:
      135      135                SINGLE_RANGE will be set %TRUE if IT_BLOCK_EXPR specifies
      136      136                    a single range; %FALSE otherwise.
      137      137            DESCRIPTION:
      138      138                Check all the IT_SELECT nodes in the InTree:  if any have
      139      139                a repeat count which is > 1, set SINGLE_RANGE to %FALSE
      140      140                and return.
      141      141        */
      142      142
      143      143        VDG$TEST_1_RANGE: PROC (IT_BLOCK_EXPR, SINGLE_RANGE) ALTRET;

    143  0 000000   000000 700200 xent  VDG$TEST_1_* TSX0  ! X66_AUTO_2
         0 000001   000006 000002                    ZERO    6,2

PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:12   
      144      144
      145      145
      146      146        %INCLUDE VD_MACROS_M;
      147     2361
      148     2362
      149     2363        %VD$IT_BLOCK_EXPR (NAME=IT_BLOCK_EXPR, STCLASS=PARAM);
      150     2513    1   DCL SINGLE_RANGE BIT(1) ALIGNED;
      151     2514
      152     2515
      153     2516
      154     2517    1   DCL IT_SELECT$ PTR;
      155     2518
      156     2519
      157     2520        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
      158     2557
      159     2558
      160     2559
      161     2560    1           SINGLE_RANGE = %FALSE;      /* Assume it's multi-range */

   2560  0 000002   200004 470500                    LDP0    @SINGLE_RANGE,,AUTO
         0 000003   000000 450100                    STZ     0,,PR0

      162     2561
      163     2562    1           IT_SELECT$ = IT_BLOCK_EXPR.SELECTS$;

   2562  0 000004   200003 471500                    LDP1    @IT_BLOCK_EXPR,,AUTO
         0 000005   100035 236100                    LDQ     29,,PR1
         0 000006   200005 756100                    STQ     IT_SELECT$,,AUTO

      164     2563    2           DO WHILE IT_SELECT$ ~= ADDR(NIL);

   2563  0 000007   000021 710000 0                  TRA     s:2568

      165     2564    2              IF IT$SELECT.RPT_ALL

   2564  0 000010   200005 470500                    LDP0    IT_SELECT$,,AUTO
         0 000011   000003 234100                    SZN     3,,PR0
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:13   
         0 000012   000016 604000 0                  TMI     s:2566
         0 000013   000003 720100                    LXL0    3,,PR0
         0 000014   000001 100003                    CMPX0   1,DU
         0 000015   000017 604400 0                  TMOZ    s:2567

      166     2565    2                OR IT$SELECT.RPT_COUNT# > 1 THEN
      167     2566    2                 RETURN;       /* It's multi-range */

   2566  0 000016   000000 702200 xent               TSX2  ! X66_ARET

      168     2567    2              IT_SELECT$ = IT$SELECT.FLINK$;

   2567  0 000017   000002 236100                    LDQ     2,,PR0
         0 000020   200005 756100                    STQ     IT_SELECT$,,AUTO

      169     2568    2              END;

   2568  0 000021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000022   000010 601000 0                  TNZ     s:2564

      170     2569
      171     2570    1           SINGLE_RANGE = %TRUE;

   2570  0 000023   400000 236003                    LDQ     -131072,DU
         0 000024   200004 470500                    LDP0    @SINGLE_RANGE,,AUTO
         0 000025   000000 756100                    STQ     0,,PR0

      172     2571    1           RETURN;

   2571  0 000026   000000 702200 xent               TSX2  ! X66_ARET
      173     2572
      174     2573    1   END VDG$TEST_1_RANGE;
      175     2574        %EOD;

PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:14   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$TEST_1_RANGE.
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:15   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IT_BLOCK_EXPR             4-0-0/w PTR         r     1 @SINGLE_RANGE
    *0-0-0/w STRC(1116)  r     1 IT_BLOCK_EXPR              5-0-0/w PTR         r     1 IT_SELECT$
    *0-0-0/w BIT         r     1 SINGLE_RANGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(216)   r     1 IT$SELECT


   Procedure VDG$TEST_1_RANGE requires 23 words for executable code.
   Procedure VDG$TEST_1_RANGE requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDG$TEST_1_RANGE File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:17   
          MINI XREF LISTING

IT$SELECT.FLINK$
      2554**DCL      2567>>ASSIGN
IT$SELECT.RPT_ALL
      2554**DCL      2564>>IF
IT$SELECT.RPT_COUNT#
      2554**DCL      2564>>IF
IT_BLOCK_EXPR
      2371**DCL       143--PROC
IT_BLOCK_EXPR.SELECTS$
      2511**DCL      2562>>ASSIGN
IT_SELECT$
      2517**DCL      2528--IMP-PTR  2562<<ASSIGN   2563>>DOWHILE  2564>>IF       2564>>IF       2567<<ASSIGN
      2567>>ASSIGN
SINGLE_RANGE
      2513**DCL       143--PROC     2560<<ASSIGN   2570<<ASSIGN

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:18   
      176        1        /*T***********************************************************/
      177        2        /*T*                                                         */
      178        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      179        4        /*T*                                                         */
      180        5        /*T***********************************************************/
      181        6
      182        7        /*D* NAME: VDG$RESIZE_COMMAND_WINDOW
      183        8            PARAMETERS:
      184        9                HEIGHT - # lines command window is to be changed to.
      185       10            INPUT:
      186       11                VD_COMMAND_WINDOW$ - Ptr to the level-1 VD$FILE_NODE for the command
      187       12                    window in the Windows file.  May be NIL if not yet fully
      188       13                    initialized.
      189       14                VD_$SCREEN - VD$NUMBER for the $SCREEN predefined name.  If
      190       15                    VD_$SCREEN.V# < %MN_SCREEN_EDITING_HEIGHT, then we're not
      191       16                    screen editing, and this routine will simply return.
      192       17                VD_$MAX_COMMAND - VD$NUMBER for the $MAX_COMMAND predefined name.
      193       18                    The value of this name is the largest size the command window
      194       19                    is ever to be expanded to.
      195       20            OUTPUT:
      196       21                The command window's height may be changed.
      197       22            DESCRIPTION:
      198       23                If not screen editing, return.
      199       24                If the command window is already at the requested size, return.
      200       25                Call the Accessor to change the command window's Spec component.
      201       26                    The Accessor will call the Presenter to actually change the
      202       27                    window height.
      203       28                If the Accessor rejects the update of the command window due to
      204       29                    %E$PORT_BUSY, then free the PORT_BUSY VD$ERR, and call VDP$WCHANGE
      205       30                    to effect the change directly.  We do this because we sometimes
      206       31                    call the Accessor recursively to expand the command window in
      207       32                    order to report an error on a previous Accessor operation.  Using
      208       33                    the Accessor to change the command window height just makes sure
      209       34                    any Windows-file records on display in a window get updated with
      210       35                    the new window info; if the Windows-file port is busy, we won't
      211       36                    bother updating any Windows-file records which may be on display,
      212       37                    but will effect the height change anyway.
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:19   
      213       38                    (The test case for this logic is editing a consecutive file
      214       39                    via the IBEX command line:
      215       40                        !6EDIT consec_file
      216       41                    .)
      217       42                If expand requests removing the ediitng windows completely, just
      218       43                    temporarily set $SCREEN to 0, saving the previous value, so that
      219       44                    the next shrink will restore it to its proper value.
      220       45        */
      221       46
      222       47        VDG$RESIZE_COMMAND_WINDOW: PROC (HEIGHT) ALTRET;
      223       48
      224       49
      225       50        %INCLUDE VD_MACROS_M;
      226     2265        %INCLUDE VD_PERR_C;
      227     2413
      228     2414
      229     2415    1   DCL HEIGHT SBIN;
      230     2416
      231     2417
      232     2418    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      233     2419    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      234     2420    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      235     2421    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
      236     2422    1   DCL VDI$CSET_COUNT      ENTRY (2) ALTRET;
      237     2423
      238     2424
      239     2425    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      240     2426        %VD_6E (STCLASS=SYMREF);
      241     2462        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      242     2507        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      243     2552        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      244     2597    1   DCL VD_OLD_$SCREEN SYMREF SBIN;
      245     2598        %VD$LOCATION (NAME=VD_LOC_$SCREEN, STCLASS=SYMREF);
      246     2626
      247     2627
      248     2628    1   DCL EXPAND BIT(1) ALIGNED;
      249     2629    1   DCL OLD_WSPEC$ PTR;
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:20   
      250     2630        %VD$SPEC (NAME=SPEC, STCLASS=AUTO);
      251     2644        %VD$LOCATION (NAME=WINDOW_LOC, STCLASS=AUTO);
      252     2672    1   DCL NEW_TAIL$ PTR;
      253     2673
      254     2674
      255     2675
      256     2676        %VD$FILE_NODE (NAME=CWIN$NODE, STCLASS="BASED(VD_COMMAND_WINDOW$)");
      257     2769        %VD$WINDOW_SPEC (NAME=OLD$WSPEC, STCLASS="BASED(OLD_WSPEC$)");
      258     2835        %VD$WINDOW_SPEC (NAME=NEW$WSPEC, STCLASS="BASED(SPEC.V$)");
      259     2901        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      260     3007        %VD$ERR (NAME=ERR$HEAD, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      261     3060        %VD$ERR (NAME=ERR$TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      262     3113        %VD$ERR (NAME=NEW$TAIL, STCLASS="BASED(NEW_TAIL$)");
      263     3166
      264     3167
      265     3168
      266     3169    2           IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;
      267     3170    2              OLD_WSPEC$ = CWIN$NODE.DESC.SPEC.V$;
      268     3171    2              IF OLD$WSPEC.COORDS.HEIGHT# = HEIGHT THEN
      269     3172    2                 RETURN;
      270     3173    2              ELSE IF OLD$WSPEC.COORDS.HEIGHT# > HEIGHT THEN
      271     3174    2                    EXPAND = %FALSE;
      272     3175    2                 ELSE
      273     3176    2                    EXPAND = %TRUE;
      274     3177    2              END;
      275     3178    1           GOTO RESIZE_COMMAND_WINDOW;
      276     3179
      277     3180
      278     3181
      279     3182        /*D* NAME: VDG$EXPAND_COMMAND_WINDOW
      280     3183            PARAMETERS:
      281     3184                HEIGHT - Size command window is to be expanded to.
      282     3185            INPUT, OUTPUT:
      283     3186                Same as for main routine.
      284     3187            DESCRIPTION:
      285     3188                If the command window isn't at least HEIGHT lines, expand it.
      286     3189        */
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:21   
      287     3190
      288     3191    1   VDG$EXPAND_COMMAND_WINDOW: ENTRY (HEIGHT) ALTRET;
      289     3192
      290     3193    1           EXPAND = %TRUE;
      291     3194    1           GOTO RESIZE_COMMAND_WINDOW;
      292     3195
      293     3196
      294     3197        /*D* NAME: VDG$SHRINK_COMMAND_WINDOW
      295     3198            PARAMETERS:
      296     3199                HEIGHT - Size command window is to be shrunk to.
      297     3200            INPUT, OUTPUT:
      298     3201                Same as for main routine.
      299     3202            DESCRIPTION:
      300     3203                If the command window isn't at most HEIGHT lines, shrink it.
      301     3204        */
      302     3205
      303     3206    1   VDG$SHRINK_COMMAND_WINDOW: ENTRY (HEIGHT) ALTRET;
      304     3207
      305     3208    1           EXPAND = %FALSE;
      306     3209
      307     3210
      308     3211    1   RESIZE_COMMAND_WINDOW:
      309     3212    1           IF VD_$SCREEN.V# = 0 AND (VD_OLD_$SCREEN = 0 OR EXPAND)
      310     3213    1             OR VD_COMMAND_WINDOW$ = ADDR(NIL) THEN
      311     3214    1              RETURN;
      312     3215
      313     3216    2           IF VD_OLD_$SCREEN > 0 THEN DO;
      314     3217    2              IF VD_$SCREEN.V# = 0 THEN
      315     3218    2                 CALL VDI$CSET_COUNT (VD_LOC_$SCREEN, VD_OLD_$SCREEN);
      316     3219    2              VD_OLD_$SCREEN = 0;
      317     3220    2              END;
      318     3221
      319     3222    2           IF EXPAND AND HEIGHT = VD_$SCREEN.V# THEN DO;
      320     3223    2              VD_OLD_$SCREEN = VD_$SCREEN.V#;
      321     3224    2              CALL VDI$CSET_COUNT (VD_LOC_$SCREEN, 2);
      322     3225    2              IF VD_$COMMAND.V# = 2 THEN
      323     3226    2                 VD_$COMMAND.V# = 0; /* Only force one read from command */
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:22   
      324     3227    2              RETURN;
      325     3228    2              END;
      326     3229
      327     3230    1           OLD_WSPEC$ = CWIN$NODE.DESC.SPEC.V$;
      328     3231    2           IF EXPAND THEN DO;
      329     3232    2              IF OLD$WSPEC.COORDS.HEIGHT# >= HEIGHT THEN
      330     3233    2                 RETURN;
      331     3234    2              END;
      332     3235    2           ELSE DO;
      333     3236    2              IF OLD$WSPEC.COORDS.HEIGHT# <= HEIGHT THEN
      334     3237    2                 RETURN;
      335     3238    2              END;
      336     3239
      337     3240    1           SPEC = %CLEAR;
      338     3241    1           SPEC.TYPE# = %SPT_WINDOW_SPEC;
      339     3242    1           SPEC.REP# = %REP_REMOTE;
      340     3243    1           CALL VDG$OALLOC (%CLS_WINDOW_SPEC, SPEC.V$)
      341     3244    1             ALTRET (OALLOC_FAILED);
      342     3245    1           WINDOW_LOC = %CLEAR;
      343     3246
      344     3247    1           NEW$WSPEC.COMMAND = %TRUE;
      345     3248    1           NEW$WSPEC.COORDS.HEIGHT# = HEIGHT;
      346     3249    1           WINDOW_LOC.KEY (%LVL_LOWER-1) = CWIN$NODE.DESC.KEY;
      347     3250
      348     3251    1           CALL VDA$LWRITE (WINDOWS$STREAM, WINDOW_LOC, SPEC)
      349     3252    2           WHENALTRETURN DO;
      350     3253    2              IF ERR$TAIL.ERR.CODE# ~= %E$PORT_BUSY THEN
      351     3254    2                 GOTO LWRITE_FAILED;
      352     3255                   /*
      353     3256                   *   VDA$LWRITE failed only because it would have been
      354     3257                   *     a recursive operation to the Accessor.
      355     3258                   *   Get rid of the error and call the Presenter directly
      356     3259                   *     to change the window height.
      357     3260                   */
      358     3261    2              NEW_TAIL$ = ERR$HEAD.FLINK$;
      359     3262    3              DO WHILE NEW$TAIL.FLINK$ ~= ADDR(ERR$TAIL);
      360     3263    3                 NEW_TAIL$ = NEW$TAIL.FLINK$;
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:23   
      361     3264    3                 END;
      362     3265    2              CALL VDG$OFREE (ERR$TAIL)
      363     3266    2                ALTRET (OFREE_FAILED);
      364     3267    2              VD_6E.ERR_TAIL$ = NEW_TAIL$;
      365     3268    2              NEW$TAIL.FLINK$ = ADDR(NIL);
      366     3269    2              CALL VDP$WCHANGE (CWIN$NODE, NEW$WSPEC)
      367     3270    2                ALTRET (WCHANGE_FAILED);
      368     3271    2              CALL VDG$OFREE (NEW$WSPEC)
      369     3272    2                ALTRET (OFREE_FAILED);
      370     3273    2              SPEC = %CLEAR;
      371     3274    2              END;
      372     3275
      373     3276    1           RETURN;
      374     3277
      375     3278
      376     3279
      377     3280    1   LWRITE_FAILED: ;
      378     3281    1   WCHANGE_FAILED: ;
      379     3282    1           CALL VDG$OFREE (NEW$WSPEC)
      380     3283    1             ALTRET (OFREE_FAILED);
      381     3284
      382     3285
      383     3286    1   OALLOC_FAILED: ;
      384     3287    1   OFREE_FAILED: ;
      385     3288    1           ALTRETURN;
      386     3289
      387     3290    1   END VDG$RESIZE_COMMAND_WINDOW;
      388     3291        %EOD;

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:24   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$RESIZE_COMMAND_WINDOW.

   Procedure VDG$RESIZE_COMMAND_WINDOW requires 166 words for executable code.
   Procedure VDG$RESIZE_COMMAND_WINDOW requires 22 words of local(AUTO) storage.

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:25   

 Object Unit name= VDG$RESIZE_COMMAND_WINDOW                  File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:07.88 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   166    246  VDG$RESIZE_COMMAND_WINDOW
    1  RoData even  none     6      6  VDG$RESIZE_COMMAND_WINDOW

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  VDG$RESIZE_COMMAND_WINDOW
     0     24          yes     yes      Std        1  VDG$EXPAND_COMMAND_WINDOW
     0     31          yes     yes      Std        1  VDG$SHRINK_COMMAND_WINDOW

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VDI$CSET_COUNT
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDP$WCHANGE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:26   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_COMMAND_WINDOW$                    VD_6E                                 VD_$SCREEN
     VD_$COMMAND                           VD_OLD_$SCREEN                        VD_LOC_$SCREEN
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:27   


      176        1        /*T***********************************************************/
      177        2        /*T*                                                         */
      178        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      179        4        /*T*                                                         */
      180        5        /*T***********************************************************/
      181        6
      182        7        /*D* NAME: VDG$RESIZE_COMMAND_WINDOW
      183        8            PARAMETERS:
      184        9                HEIGHT - # lines command window is to be changed to.
      185       10            INPUT:
      186       11                VD_COMMAND_WINDOW$ - Ptr to the level-1 VD$FILE_NODE for the command
      187       12                    window in the Windows file.  May be NIL if not yet fully
      188       13                    initialized.
      189       14                VD_$SCREEN - VD$NUMBER for the $SCREEN predefined name.  If
      190       15                    VD_$SCREEN.V# < %MN_SCREEN_EDITING_HEIGHT, then we're not
      191       16                    screen editing, and this routine will simply return.
      192       17                VD_$MAX_COMMAND - VD$NUMBER for the $MAX_COMMAND predefined name.
      193       18                    The value of this name is the largest size the command window
      194       19                    is ever to be expanded to.
      195       20            OUTPUT:
      196       21                The command window's height may be changed.
      197       22            DESCRIPTION:
      198       23                If not screen editing, return.
      199       24                If the command window is already at the requested size, return.
      200       25                Call the Accessor to change the command window's Spec component.
      201       26                    The Accessor will call the Presenter to actually change the
      202       27                    window height.
      203       28                If the Accessor rejects the update of the command window due to
      204       29                    %E$PORT_BUSY, then free the PORT_BUSY VD$ERR, and call VDP$WCHANGE
      205       30                    to effect the change directly.  We do this because we sometimes
      206       31                    call the Accessor recursively to expand the command window in
      207       32                    order to report an error on a previous Accessor operation.  Using
      208       33                    the Accessor to change the command window height just makes sure
      209       34                    any Windows-file records on display in a window get updated with
      210       35                    the new window info; if the Windows-file port is busy, we won't
      211       36                    bother updating any Windows-file records which may be on display,
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:28   
      212       37                    but will effect the height change anyway.
      213       38                    (The test case for this logic is editing a consecutive file
      214       39                    via the IBEX command line:
      215       40                        !6EDIT consec_file
      216       41                    .)
      217       42                If expand requests removing the ediitng windows completely, just
      218       43                    temporarily set $SCREEN to 0, saving the previous value, so that
      219       44                    the next shrink will restore it to its proper value.
      220       45        */
      221       46
      222       47        VDG$RESIZE_COMMAND_WINDOW: PROC (HEIGHT) ALTRET;

     47  0 000000   000000 700200 xent  VDG$RESIZE_* TSX0  ! X66_AUTO_1
         0 000001   000026 000001                    ZERO    22,1

      223       48
      224       49
      225       50        %INCLUDE VD_MACROS_M;
      226     2265        %INCLUDE VD_PERR_C;
      227     2413
      228     2414
      229     2415    1   DCL HEIGHT SBIN;
      230     2416
      231     2417
      232     2418    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      233     2419    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      234     2420    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      235     2421    1   DCL VDP$WCHANGE         ENTRY (2) ALTRET;
      236     2422    1   DCL VDI$CSET_COUNT      ENTRY (2) ALTRET;
      237     2423
      238     2424
      239     2425    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      240     2426        %VD_6E (STCLASS=SYMREF);
      241     2462        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      242     2507        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      243     2552        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      244     2597    1   DCL VD_OLD_$SCREEN SYMREF SBIN;
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:29   
      245     2598        %VD$LOCATION (NAME=VD_LOC_$SCREEN, STCLASS=SYMREF);
      246     2626
      247     2627
      248     2628    1   DCL EXPAND BIT(1) ALIGNED;
      249     2629    1   DCL OLD_WSPEC$ PTR;
      250     2630        %VD$SPEC (NAME=SPEC, STCLASS=AUTO);
      251     2644        %VD$LOCATION (NAME=WINDOW_LOC, STCLASS=AUTO);
      252     2672    1   DCL NEW_TAIL$ PTR;
      253     2673
      254     2674
      255     2675
      256     2676        %VD$FILE_NODE (NAME=CWIN$NODE, STCLASS="BASED(VD_COMMAND_WINDOW$)");
      257     2769        %VD$WINDOW_SPEC (NAME=OLD$WSPEC, STCLASS="BASED(OLD_WSPEC$)");
      258     2835        %VD$WINDOW_SPEC (NAME=NEW$WSPEC, STCLASS="BASED(SPEC.V$)");
      259     2901        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      260     3007        %VD$ERR (NAME=ERR$HEAD, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      261     3060        %VD$ERR (NAME=ERR$TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      262     3113        %VD$ERR (NAME=NEW$TAIL, STCLASS="BASED(NEW_TAIL$)");
      263     3166
      264     3167
      265     3168
      266     3169    2           IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;

   3169  0 000002   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         0 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000004   000023 600000 0                  TZE     s:3178

      267     3170    2              OLD_WSPEC$ = CWIN$NODE.DESC.SPEC.V$;

   3170  0 000005   000000 470400 xsym               LDP0    VD_COMMAND_WINDOW$
         0 000006   000007 236100                    LDQ     7,,PR0
         0 000007   200005 756100                    STQ     OLD_WSPEC$,,AUTO

      268     3171    2              IF OLD$WSPEC.COORDS.HEIGHT# = HEIGHT THEN

   3171  0 000010   200005 471500                    LDP1    OLD_WSPEC$,,AUTO
         0 000011   200003 473500                    LDP3    @HEIGHT,,AUTO
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:30   
         0 000012   100005 236100                    LDQ     5,,PR1
         0 000013   300000 116100                    CMPQ    0,,PR3
         0 000014   000016 601000 0                  TNZ     s:3173

      269     3172    2                 RETURN;

   3172  0 000015   000000 702200 xent               TSX2  ! X66_ARET

      270     3173    2              ELSE IF OLD$WSPEC.COORDS.HEIGHT# > HEIGHT THEN

   3173  0 000016   000021 604400 0                  TMOZ    s:3176

      271     3174    2                    EXPAND = %FALSE;

   3174  0 000017   200004 450100                    STZ     EXPAND,,AUTO
         0 000020   000023 710000 0                  TRA     s:3178

      272     3175    2                 ELSE
      273     3176    2                    EXPAND = %TRUE;

   3176  0 000021   400000 236003                    LDQ     -131072,DU
         0 000022   200004 756100                    STQ     EXPAND,,AUTO

      274     3177    2              END;

      275     3178    1           GOTO RESIZE_COMMAND_WINDOW;

   3178  0 000023   000034 710000 0                  TRA     RESIZE_COMMAND_WINDOW

      276     3179
      277     3180
      278     3181
      279     3182        /*D* NAME: VDG$EXPAND_COMMAND_WINDOW
      280     3183            PARAMETERS:
      281     3184                HEIGHT - Size command window is to be expanded to.
      282     3185            INPUT, OUTPUT:
      283     3186                Same as for main routine.
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:31   
      284     3187            DESCRIPTION:
      285     3188                If the command window isn't at least HEIGHT lines, expand it.
      286     3189        */
      287     3190
      288     3191    1   VDG$EXPAND_COMMAND_WINDOW: ENTRY (HEIGHT) ALTRET;

   3191  0 000024   000000 700200 xent  VDG$EXPAND_* TSX0  ! X66_AUTO_1
         0 000025   000026 000001                    ZERO    22,1

      289     3192
      290     3193    1           EXPAND = %TRUE;

   3193  0 000026   400000 236003                    LDQ     -131072,DU
         0 000027   200004 756100                    STQ     EXPAND,,AUTO

      291     3194    1           GOTO RESIZE_COMMAND_WINDOW;

   3194  0 000030   000034 710000 0                  TRA     RESIZE_COMMAND_WINDOW

      292     3195
      293     3196
      294     3197        /*D* NAME: VDG$SHRINK_COMMAND_WINDOW
      295     3198            PARAMETERS:
      296     3199                HEIGHT - Size command window is to be shrunk to.
      297     3200            INPUT, OUTPUT:
      298     3201                Same as for main routine.
      299     3202            DESCRIPTION:
      300     3203                If the command window isn't at most HEIGHT lines, shrink it.
      301     3204        */
      302     3205
      303     3206    1   VDG$SHRINK_COMMAND_WINDOW: ENTRY (HEIGHT) ALTRET;

   3206  0 000031   000000 700200 xent  VDG$SHRINK_* TSX0  ! X66_AUTO_1
         0 000032   000026 000001                    ZERO    22,1

      304     3207
      305     3208    1           EXPAND = %FALSE;
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:32   

   3208  0 000033   200004 450100                    STZ     EXPAND,,AUTO

      306     3209
      307     3210
      308     3211    1   RESIZE_COMMAND_WINDOW:
      309     3212    1           IF VD_$SCREEN.V# = 0 AND (VD_OLD_$SCREEN = 0 OR EXPAND)

   3212  0 000034   000003 235000 xsym  RESIZE_COMM* LDA     VD_$SCREEN+3
         0 000035   000042 601000 0                  TNZ     RESIZE_COMMAND_WINDOW+6
         0 000036   000000 236000 xsym               LDQ     VD_OLD_$SCREEN
         0 000037   000045 600000 0                  TZE     s:3214
         0 000040   200004 234100                    SZN     EXPAND,,AUTO
         0 000041   000045 604000 0                  TMI     s:3214
         0 000042   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         0 000043   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000044   000046 601000 0                  TNZ     s:3216

      310     3213    1             OR VD_COMMAND_WINDOW$ = ADDR(NIL) THEN
      311     3214    1              RETURN;

   3214  0 000045   000000 702200 xent               TSX2  ! X66_ARET

      312     3215
      313     3216    2           IF VD_OLD_$SCREEN > 0 THEN DO;

   3216  0 000046   000000 235000 xsym               LDA     VD_OLD_$SCREEN
         0 000047   000057 604400 0                  TMOZ    s:3222

      314     3217    2              IF VD_$SCREEN.V# = 0 THEN

   3217  0 000050   000003 235000 xsym               LDA     VD_$SCREEN+3
         0 000051   000056 601000 0                  TNZ     s:3219

      315     3218    2                 CALL VDI$CSET_COUNT (VD_LOC_$SCREEN, VD_OLD_$SCREEN);

   3218  0 000052   000000 630400 1                  EPPR0   0
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:33   
         0 000053   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000054   000000 701000 xent               TSX1    VDI$CSET_COUNT
         0 000055   000000 011000                    NOP     0

      316     3219    2              VD_OLD_$SCREEN = 0;

   3219  0 000056   000000 450000 xsym               STZ     VD_OLD_$SCREEN

      317     3220    2              END;

      318     3221
      319     3222    2           IF EXPAND AND HEIGHT = VD_$SCREEN.V# THEN DO;

   3222  0 000057   200004 234100                    SZN     EXPAND,,AUTO
         0 000060   000100 605000 0                  TPL     s:3230
         0 000061   200003 470500                    LDP0    @HEIGHT,,AUTO
         0 000062   000000 236100                    LDQ     0,,PR0
         0 000063   000003 116000 xsym               CMPQ    VD_$SCREEN+3
         0 000064   000100 601000 0                  TNZ     s:3230

      320     3223    2              VD_OLD_$SCREEN = VD_$SCREEN.V#;

   3223  0 000065   000003 235000 xsym               LDA     VD_$SCREEN+3
         0 000066   000000 755000 xsym               STA     VD_OLD_$SCREEN

      321     3224    2              CALL VDI$CSET_COUNT (VD_LOC_$SCREEN, 2);

   3224  0 000067   000002 630400 1                  EPPR0   2
         0 000070   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000071   000000 701000 xent               TSX1    VDI$CSET_COUNT
         0 000072   000000 011000                    NOP     0

      322     3225    2              IF VD_$COMMAND.V# = 2 THEN

   3225  0 000073   000003 235000 xsym               LDA     VD_$COMMAND+3
         0 000074   000002 115007                    CMPA    2,DL
         0 000075   000077 601000 0                  TNZ     s:3227
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:34   

      323     3226    2                 VD_$COMMAND.V# = 0; /* Only force one read from command */

   3226  0 000076   000003 450000 xsym               STZ     VD_$COMMAND+3

      324     3227    2              RETURN;

   3227  0 000077   000000 702200 xent               TSX2  ! X66_ARET

      325     3228    2              END;
      326     3229
      327     3230    1           OLD_WSPEC$ = CWIN$NODE.DESC.SPEC.V$;

   3230  0 000100   000000 470400 xsym               LDP0    VD_COMMAND_WINDOW$
         0 000101   000007 236100                    LDQ     7,,PR0
         0 000102   200005 756100                    STQ     OLD_WSPEC$,,AUTO

      328     3231    2           IF EXPAND THEN DO;

   3231  0 000103   200004 234100                    SZN     EXPAND,,AUTO
         0 000104   000113 605000 0                  TPL     s:3236

      329     3232    2              IF OLD$WSPEC.COORDS.HEIGHT# >= HEIGHT THEN

   3232  0 000105   200005 471500                    LDP1    OLD_WSPEC$,,AUTO
         0 000106   200003 473500                    LDP3    @HEIGHT,,AUTO
         0 000107   100005 236100                    LDQ     5,,PR1
         0 000110   300000 116100                    CMPQ    0,,PR3
         0 000111   000121 604000 0                  TMI     s:3240

      330     3233    2                 RETURN;

   3233  0 000112   000000 702200 xent               TSX2  ! X66_ARET

      331     3234    2              END;
      332     3235    2           ELSE DO;

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:35   
      333     3236    2              IF OLD$WSPEC.COORDS.HEIGHT# <= HEIGHT THEN

   3236  0 000113   200005 471500                    LDP1    OLD_WSPEC$,,AUTO
         0 000114   200003 473500                    LDP3    @HEIGHT,,AUTO
         0 000115   100005 236100                    LDQ     5,,PR1
         0 000116   300000 116100                    CMPQ    0,,PR3
         0 000117   000121 605400 0                  TPNZ    s:3240

      334     3237    2                 RETURN;

   3237  0 000120   000000 702200 xent               TSX2  ! X66_ARET

      335     3238    2              END;
      336     3239
      337     3240    1           SPEC = %CLEAR;

   3240  0 000121   000000 235003                    LDA     0,DU
         0 000122   000000 236003                    LDQ     0,DU
         0 000123   200006 757100                    STAQ    SPEC,,AUTO

      338     3241    1           SPEC.TYPE# = %SPT_WINDOW_SPEC;

   3241  0 000124   000006 220003                    LDX0    6,DU
         0 000125   200006 740100                    STX0    SPEC,,AUTO

      339     3242    1           SPEC.REP# = %REP_REMOTE;

   3242  0 000126   000002 221003                    LDX1    2,DU
         0 000127   200006 441100                    SXL1    SPEC,,AUTO

      340     3243    1           CALL VDG$OALLOC (%CLS_WINDOW_SPEC, SPEC.V$)

   3243  0 000130   200007 634500                    EPPR4   SPEC+1,,AUTO
         0 000131   200023 454500                    STP4    NEW_TAIL$+2,,AUTO
         0 000132   000005 236000 1                  LDQ     5
         0 000133   200022 756100                    STQ     NEW_TAIL$+1,,AUTO
         0 000134   200022 630500                    EPPR0   NEW_TAIL$+1,,AUTO
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:36   
         0 000135   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000136   000000 701000 xent               TSX1    VDG$OALLOC
         0 000137   000245 702000 0                  TSX2    OALLOC_FAILED

      341     3244    1             ALTRET (OALLOC_FAILED);
      342     3245    1           WINDOW_LOC = %CLEAR;

   3245  0 000140   000100 100400                    MLR     fill='000'O
         0 000141   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000142   200010 000044                    ADSC9   WINDOW_LOC,,AUTO         cn=0,n=36

      343     3246
      344     3247    1           NEW$WSPEC.COMMAND = %TRUE;

   3247  0 000143   200007 470500                    LDP0    SPEC+1,,AUTO
         0 000144   000400 236003                    LDQ     256,DU
         0 000145   000002 256100                    ORSQ    2,,PR0

      345     3248    1           NEW$WSPEC.COORDS.HEIGHT# = HEIGHT;

   3248  0 000146   200003 470500                    LDP0    @HEIGHT,,AUTO
         0 000147   200007 471500                    LDP1    SPEC+1,,AUTO
         0 000150   000000 235100                    LDA     0,,PR0
         0 000151   100005 755100                    STA     5,,PR1

      346     3249    1           WINDOW_LOC.KEY (%LVL_LOWER-1) = CWIN$NODE.DESC.KEY;

   3249  0 000152   000000 471400 xsym               LDP1    VD_COMMAND_WINDOW$
         0 000153   000100 100500                    MLR     fill='000'O
         0 000154   100004 000010                    ADSC9   4,,PR1                   cn=0,n=8
         0 000155   200010 000010                    ADSC9   WINDOW_LOC,,AUTO         cn=0,n=8

      347     3250
      348     3251    1           CALL VDA$LWRITE (WINDOWS$STREAM, WINDOW_LOC, SPEC)

   3251  0 000156   200006 633500                    EPPR3   SPEC,,AUTO
         0 000157   200024 453500                    STP3    NEW_TAIL$+3,,AUTO
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:37   
         0 000160   200010 634500                    EPPR4   WINDOW_LOC,,AUTO
         0 000161   200023 454500                    STP4    NEW_TAIL$+2,,AUTO
         0 000162   000006 236000 xsym               LDQ     VD_6E+6
         0 000163   200022 756100                    STQ     NEW_TAIL$+1,,AUTO
         0 000164   200022 630500                    EPPR0   NEW_TAIL$+1,,AUTO
         0 000165   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000166   000000 701000 xent               TSX1    VDA$LWRITE
         0 000167   000171 702000 0                  TSX2    s:3253
         0 000170   000240 710000 0                  TRA     s:3276

      349     3252    2           WHENALTRETURN DO;

      350     3253    2              IF ERR$TAIL.ERR.CODE# ~= %E$PORT_BUSY THEN

   3253  0 000171   000032 470400 xsym               LDP0    VD_6E+26
         0 000172   000002 236100                    LDQ     2,,PR0
         0 000173   377770 376007                    ANQ     131064,DL
         0 000174   004200 116007                    CMPQ    2176,DL
         0 000175   000241 601000 0                  TNZ     LWRITE_FAILED

      351     3254    2                 GOTO LWRITE_FAILED;
      352     3255                   /*
      353     3256                   *   VDA$LWRITE failed only because it would have been
      354     3257                   *     a recursive operation to the Accessor.
      355     3258                   *   Get rid of the error and call the Presenter directly
      356     3259                   *     to change the window height.
      357     3260                   */
      358     3261    2              NEW_TAIL$ = ERR$HEAD.FLINK$;

   3261  0 000176   000031 471400 xsym               LDP1    VD_6E+25
         0 000177   100001 236100                    LDQ     1,,PR1
         0 000200   200021 756100                    STQ     NEW_TAIL$,,AUTO

      359     3262    3              DO WHILE NEW$TAIL.FLINK$ ~= ADDR(ERR$TAIL);

   3262  0 000201   000205 710000 0                  TRA     s:3264

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:38   
      360     3263    3                 NEW_TAIL$ = NEW$TAIL.FLINK$;

   3263  0 000202   200021 470500                    LDP0    NEW_TAIL$,,AUTO
         0 000203   000001 236100                    LDQ     1,,PR0
         0 000204   200021 756100                    STQ     NEW_TAIL$,,AUTO

      361     3264    3                 END;

   3264  0 000205   200021 470500                    LDP0    NEW_TAIL$,,AUTO
         0 000206   000001 236100                    LDQ     1,,PR0
         0 000207   000032 116000 xsym               CMPQ    VD_6E+26
         0 000210   000202 601000 0                  TNZ     s:3263

      362     3265    2              CALL VDG$OFREE (ERR$TAIL)

   3265  0 000211   000032 630400 xsym               EPPR0   VD_6E+26
         0 000212   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000213   000000 701000 xent               TSX1    VDG$OFREE
         0 000214   000245 702000 0                  TSX2    OALLOC_FAILED

      363     3266    2                ALTRET (OFREE_FAILED);
      364     3267    2              VD_6E.ERR_TAIL$ = NEW_TAIL$;

   3267  0 000215   200021 236100                    LDQ     NEW_TAIL$,,AUTO
         0 000216   000032 756000 xsym               STQ     VD_6E+26

      365     3268    2              NEW$TAIL.FLINK$ = ADDR(NIL);

   3268  0 000217   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000220   200021 470500                    LDP0    NEW_TAIL$,,AUTO
         0 000221   000001 756100                    STQ     1,,PR0

      366     3269    2              CALL VDP$WCHANGE (CWIN$NODE, NEW$WSPEC)

   3269  0 000222   200007 236100                    LDQ     SPEC+1,,AUTO
         0 000223   000000 235000 xsym               LDA     VD_COMMAND_WINDOW$
         0 000224   200022 757100                    STAQ    NEW_TAIL$+1,,AUTO
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:39   
         0 000225   200022 630500                    EPPR0   NEW_TAIL$+1,,AUTO
         0 000226   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000227   000000 701000 xent               TSX1    VDP$WCHANGE
         0 000230   000241 702000 0                  TSX2    LWRITE_FAILED

      367     3270    2                ALTRET (WCHANGE_FAILED);
      368     3271    2              CALL VDG$OFREE (NEW$WSPEC)

   3271  0 000231   200007 630500                    EPPR0   SPEC+1,,AUTO
         0 000232   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000233   000000 701000 xent               TSX1    VDG$OFREE
         0 000234   000245 702000 0                  TSX2    OALLOC_FAILED

      369     3272    2                ALTRET (OFREE_FAILED);
      370     3273    2              SPEC = %CLEAR;

   3273  0 000235   000000 235003                    LDA     0,DU
         0 000236   000000 236003                    LDQ     0,DU
         0 000237   200006 757100                    STAQ    SPEC,,AUTO

      371     3274    2              END;

      372     3275
      373     3276    1           RETURN;

   3276  0 000240   000000 702200 xent               TSX2  ! X66_ARET

   3273  0 000241                       LWRITE_FAIL* null
   3273  0 000241                       WCHANGE_FAI* null
      374     3277
      375     3278
      376     3279
      377     3280    1   LWRITE_FAILED: ;
      378     3281    1   WCHANGE_FAILED: ;
      379     3282    1           CALL VDG$OFREE (NEW$WSPEC)

   3282  0 000241   200007 630500                    EPPR0   SPEC+1,,AUTO
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:40   
         0 000242   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000243   000000 701000 xent               TSX1    VDG$OFREE
         0 000244   000245 702000 0                  TSX2    OALLOC_FAILED

   3273  0 000245                       OALLOC_FAIL* null
   3273  0 000245                       OFREE_FAILED null
      380     3283    1             ALTRET (OFREE_FAILED);
      381     3284
      382     3285
      383     3286    1   OALLOC_FAILED: ;
      384     3287    1   OFREE_FAILED: ;
      385     3288    1           ALTRETURN;

   3288  0 000245   000000 702200 xent               TSX2  ! X66_AALT
      386     3289
      387     3290    1   END VDG$RESIZE_COMMAND_WINDOW;
      388     3291        %EOD;

PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:41   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$RESIZE_COMMAND_WINDOW.
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:42   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @HEIGHT                    4-0-0/w BIT         r     1 EXPAND
    *0-0-0/w SBIN        r     1 HEIGHT                    21-0-0/w PTR         r     1 NEW_TAIL$
     5-0-0/w PTR         r     1 OLD_WSPEC$                 6-0-0/w STRC(72)    r     1 SPEC
    10-0-0/w STRC(324)   r     1 WINDOW_LOC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$COMMAND                0-0-0/w STRC(144)   r     1 VD_$SCREEN
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$
     0-0-0/w STRC(324)   r     1 VD_LOC_$SCREEN             0-0-0/w SBIN        r     1 VD_OLD_$SCREEN

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(468)   r     1 CWIN$NODE                  0-0-0/w STRC(180)   r     1 ERR$HEAD
     0-0-0/w STRC(180)   r     1 ERR$TAIL                   0-0-0/w STRC(180)   r     1 NEW$TAIL
     0-0-0/w STRC(900)   r     1 NEW$WSPEC                  0-0-0/w STRC(900)   r     1 OLD$WSPEC
     0-0-0/w STRC(864)   r     1 WINDOWS$STREAM


   Procedure VDG$RESIZE_COMMAND_WINDOW requires 166 words for executable code.
   Procedure VDG$RESIZE_COMMAND_WINDOW requires 22 words of local(AUTO) storage.
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:43   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:44   
          MINI XREF LISTING

CWIN$NODE
      2684**DCL      3269<>CALL
CWIN$NODE.DESC.KEY
      2747**DCL      3249>>ASSIGN
CWIN$NODE.DESC.SPEC.V$
      2763**DCL      3170>>ASSIGN   3230>>ASSIGN
ERR$HEAD.FLINK$
      3041**DCL      3261>>ASSIGN
ERR$TAIL
      3068**DCL      3262--DOWHILE  3265<>CALL
ERR$TAIL.ERR.CODE#
      3107**DCL      3253>>IF
EXPAND
      2628**DCL      3174<<ASSIGN   3176<<ASSIGN   3193<<ASSIGN   3208<<ASSIGN   3212>>IF       3222>>IF
      3231>>IF
HEIGHT
      2415**DCL        47--PROC     3171>>IF       3173>>IF       3191--ENTRY    3206--ENTRY    3222>>IF
      3232>>IF       3236>>IF       3248>>ASSIGN
LWRITE_FAILED
      3273**LABEL    3254--GOTO
NEW$TAIL.FLINK$
      3147**DCL      3262>>DOWHILE  3263>>ASSIGN   3268<<ASSIGN
NEW$WSPEC
      2843**DCL      3269<>CALL     3271<>CALL     3282<>CALL
NEW$WSPEC.COMMAND
      2869**DCL      3247<<ASSIGN
NEW$WSPEC.COORDS.HEIGHT#
      2870**DCL      3248<<ASSIGN
NEW_TAIL$
      2672**DCL      3121--IMP-PTR  3261<<ASSIGN   3262>>DOWHILE  3263<<ASSIGN   3263>>ASSIGN   3267>>ASSIGN
      3268>>ASSIGN
OALLOC_FAILED
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:45   
      3273**LABEL    3243--CALLALT
OFREE_FAILED
      3273**LABEL    3265--CALLALT  3271--CALLALT  3282--CALLALT
OLD$WSPEC.COORDS.HEIGHT#
      2804**DCL      3171>>IF       3173>>IF       3232>>IF       3236>>IF
OLD_WSPEC$
      2629**DCL      2777--IMP-PTR  3170<<ASSIGN   3171>>IF       3173>>IF       3230<<ASSIGN   3232>>IF
      3236>>IF
RESIZE_COMMAND_WINDOW
      3212**LABEL    3178--GOTO     3194--GOTO
SPEC
      2638**DCL      3240<<ASSIGN   3251<>CALL     3273<<ASSIGN
SPEC.REP#
      2642**DCL      3242<<ASSIGN
SPEC.TYPE#
      2642**DCL      3241<<ASSIGN
SPEC.V$
      2642**DCL      2843--IMP-PTR  3243<>CALL     3247>>ASSIGN   3248>>ASSIGN   3269>>CALL     3271>>CALL
      3282>>CALL
VDA$LWRITE
      2420**DCL-ENT  3251--CALL
VDG$OALLOC
      2418**DCL-ENT  3243--CALL
VDG$OFREE
      2419**DCL-ENT  3265--CALL     3271--CALL     3282--CALL
VDI$CSET_COUNT
      2422**DCL-ENT  3218--CALL     3224--CALL
VDP$WCHANGE
      2421**DCL-ENT  3269--CALL
VD_$COMMAND.V#
      2594**DCL      3225>>IF       3226<<ASSIGN
VD_$SCREEN.V#
      2504**DCL      3212>>IF       3217>>IF       3222>>IF       3223>>ASSIGN
VD_6E.ERR_HEAD$
      2458**DCL      3015--IMP-PTR  3261>>ASSIGN
VD_6E.ERR_TAIL$
PL6.E3A0      #002=VDG$RESIZE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI           FRI 07/04/97 11:23 Page:46   
      2458**DCL      3068--IMP-PTR  3253>>IF       3262>>DOWHILE  3265>>CALL     3267<<ASSIGN
VD_6E.WINDOWS$
      2440**DCL      2909--IMP-PTR  3251>>CALL
VD_COMMAND_WINDOW$
      2425**DCL      2684--IMP-PTR  3169>>IF       3170>>ASSIGN   3212>>IF       3230>>ASSIGN   3249>>ASSIGN
      3269>>CALL
VD_LOC_$SCREEN
      2606**DCL      3218<>CALL     3224<>CALL
VD_OLD_$SCREEN
      2597**DCL      3212>>IF       3216>>IF       3218<>CALL     3219<<ASSIGN   3223<<ASSIGN
WCHANGE_FAILED
      3273**LABEL    3269--CALLALT
WINDOWS$STREAM
      2909**DCL      3251<>CALL
WINDOW_LOC
      2652**DCL      3245<<ASSIGN   3251<>CALL
WINDOW_LOC.KEY
      2666**DCL      3249<<ASSIGN

PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:47   
      389        1        /*T***********************************************************/
      390        2        /*T*                                                         */
      391        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      392        4        /*T*                                                         */
      393        5        /*T***********************************************************/
      394        6
      395        7        /*D* NAME: VDG$ERASE_COMMAND_WINDOW
      396        8            PARAMETERS:
      397        9                None.
      398       10            INPUT:
      399       11                VD_COMMAND_WINDOW$ must point to a VD$FILE_NODE for the command
      400       12                    window.  This file node must have a VD$WINDOW_SPEC attached,
      401       13                    whose .DCB# refers to the DCB open to the command window.
      402       14                    If the DCB is open in 2Dim form, the DCB's UOPT0 bit must be set.
      403       15            OUTPUT:
      404       16                If the command window is open in 2Dim form, it will be erased.
      405       17            DESCRIPTION:
      406       18                If the command window is open in 2Dim form, erase it:
      407       19                M$DEVICE CLEAR=YES to clear the window.
      408       20                If the window is a scrolling one:
      409       21                    M$DEVICE PAGE=YES to home the cursor.
      410       22        */
      411       23
      412       24        VDG$ERASE_COMMAND_WINDOW: PROC ALTRET;
      413       25
      414       26        %INCLUDE VD_MACROS_M;
      415     2241        %INCLUDE CP_6;
      416     2322        %INCLUDE CP_6_SUBS;
      417     2862
      418     2863
      419     2864    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      420     2865
      421     2866
      422     2867    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      423     2868    1   DCL B$TCB$ PTR SYMREF;
      424     2869
      425     2870
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:48   
      426     2871    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
      427     2872        %FPT_DEVICE (CLEAR=YES);
      428     2890
      429     2891
      430     2892
      431     2893    1   DCL CWIN_SPEC$ PTR;
      432     2894        %VD$NUMBER (NAME = VD_$SCROLL, STCLASS = SYMREF);
      433     2939    1   DCL VD_ERR$ PTR;
      434     2940
      435     2941
      436     2942        %VD$WINDOW_SPEC (NAME=CWIN$SPEC, STCLASS="BASED(CWIN_SPEC$)");
      437     3008        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      438     3061        %VD$FILE_NODE;
      439     3154        %B$TCB (STCLASS="BASED(B$TCB$)");
      440     3157        %B$ALT;
      441     3165
      442     3166
      443     3167
      444     3168    2           IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;
      445     3169    2              CWIN_SPEC$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      446     3170    2              IF VD_SCREEN_HEIGHT = 0 THEN
      447     3171    2                 RETURN;   /* Command window is in 1Dim form */
      448     3172
      449     3173    2              FPT_DEVICE.V.DCB# = CWIN$SPEC.DCB#;
      450     3174    2              END;
      451     3175    1           ELSE FPT_DEVICE.V.DCB# = DCBNUM(M$UC);
      452     3176
      453     3177    1           CALL M$DEVICE (FPT_DEVICE)
      454     3178    1             ALTRET (MDEVICE_FAILED);
      455     3179    2           IF VD_$SCROLL.V#>0 THEN DO;
      456     3180    2              FPT_DEVICE.V.PAGE# = %YES#;
      457     3181    2              CALL M$DEVICE (FPT_DEVICE)
      458     3182    2                ALTRET (MDEVICE_FAILED);
      459     3183    2              FPT_DEVICE.V.PAGE# = %NO#;
      460     3184    2              END;
      461     3185
      462     3186    1           RETURN;
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:49   
      463     3187
      464     3188
      465     3189
      466     3190    1   VDG$MONERR: ENTRY ALTRET;
      467     3191    1   MDEVICE_FAILED: ;
      468     3192    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      469     3193    2           WHENALTRETURN DO; ALTRETURN; END;
      470     3194    1           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
      471     3195    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
      472     3196    1           VD$ERR.DCB# = B$TCB.ALT$->B$ALT.DCB#;
      473     3197    1           ALTRETURN;
      474     3198
      475     3199    1   END VDG$ERASE_COMMAND_WINDOW;
      476     3200        %EOD;

PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:50   
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$ERASE_COMMAND_WINDOW.

   Procedure VDG$ERASE_COMMAND_WINDOW requires 58 words for executable code.
   Procedure VDG$ERASE_COMMAND_WINDOW requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:51   

 Object Unit name= VDG$ERASE_COMMAND_WINDOW                   File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:17.68 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    10     12  VDG$ERASE_COMMAND_WINDOW
    2   Proc  even  none    58     72  VDG$ERASE_COMMAND_WINDOW
    3  RoData even  none     2      2  VDG$ERASE_COMMAND_WINDOW

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        0  VDG$ERASE_COMMAND_WINDOW
     2     41          yes     yes      Std        0  VDG$MONERR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:52   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_COMMAND_WINDOW$                    B$TCB$
     VD_SCREEN_HEIGHT                      VD_$SCROLL                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:53   


      389        1        /*T***********************************************************/
      390        2        /*T*                                                         */
      391        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      392        4        /*T*                                                         */
      393        5        /*T***********************************************************/
      394        6
      395        7        /*D* NAME: VDG$ERASE_COMMAND_WINDOW
      396        8            PARAMETERS:
      397        9                None.
      398       10            INPUT:
      399       11                VD_COMMAND_WINDOW$ must point to a VD$FILE_NODE for the command
      400       12                    window.  This file node must have a VD$WINDOW_SPEC attached,
      401       13                    whose .DCB# refers to the DCB open to the command window.
      402       14                    If the DCB is open in 2Dim form, the DCB's UOPT0 bit must be set.
      403       15            OUTPUT:
      404       16                If the command window is open in 2Dim form, it will be erased.
      405       17            DESCRIPTION:
      406       18                If the command window is open in 2Dim form, erase it:
      407       19                M$DEVICE CLEAR=YES to clear the window.
      408       20                If the window is a scrolling one:
      409       21                    M$DEVICE PAGE=YES to home the cursor.
      410       22        */
      411       23
      412       24        VDG$ERASE_COMMAND_WINDOW: PROC ALTRET;

     24  2 000000   000000 700200 xent  VDG$ERASE_C* TSX0  ! X66_AUTO_0
         2 000001   000010 000000                    ZERO    8,0

      413       25
      414       26        %INCLUDE VD_MACROS_M;
      415     2241        %INCLUDE CP_6;
      416     2322        %INCLUDE CP_6_SUBS;
      417     2862
      418     2863
      419     2864    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      420     2865
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:54   
      421     2866
      422     2867    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      423     2868    1   DCL B$TCB$ PTR SYMREF;
      424     2869
      425     2870
      426     2871    1   DCL VD_SCREEN_HEIGHT SBIN SYMREF;
      427     2872        %FPT_DEVICE (CLEAR=YES);
      428     2890
      429     2891
      430     2892
      431     2893    1   DCL CWIN_SPEC$ PTR;
      432     2894        %VD$NUMBER (NAME = VD_$SCROLL, STCLASS = SYMREF);
      433     2939    1   DCL VD_ERR$ PTR;
      434     2940
      435     2941
      436     2942        %VD$WINDOW_SPEC (NAME=CWIN$SPEC, STCLASS="BASED(CWIN_SPEC$)");
      437     3008        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      438     3061        %VD$FILE_NODE;
      439     3154        %B$TCB (STCLASS="BASED(B$TCB$)");
      440     3157        %B$ALT;
      441     3165
      442     3166
      443     3167
      444     3168    2           IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;

   3168  2 000002   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         2 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000004   000017 600000 2                  TZE     s:3175

      445     3169    2              CWIN_SPEC$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   3169  2 000005   000000 470400 xsym               LDP0    VD_COMMAND_WINDOW$
         2 000006   000007 236100                    LDQ     7,,PR0
         2 000007   200003 756100                    STQ     CWIN_SPEC$,,AUTO

      446     3170    2              IF VD_SCREEN_HEIGHT = 0 THEN

PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:55   
   3170  2 000010   000000 235000 xsym               LDA     VD_SCREEN_HEIGHT
         2 000011   000013 601000 2                  TNZ     s:3173

      447     3171    2                 RETURN;   /* Command window is in 1Dim form */

   3171  2 000012   000000 702200 xent               TSX2  ! X66_ARET

      448     3172
      449     3173    2              FPT_DEVICE.V.DCB# = CWIN$SPEC.DCB#;

   3173  2 000013   200003 471500                    LDP1    CWIN_SPEC$,,AUTO
         2 000014   100014 720100                    LXL0    12,,PR1
         2 000015   000006 740000 1                  STX0    FPT_DEVICE+6

      450     3174    2              END;

   3174  2 000016   000022 710000 2                  TRA     s:3177

      451     3175    1           ELSE FPT_DEVICE.V.DCB# = DCBNUM(M$UC);

   3175  2 000017   000000 236007 xsym               LDQ     M$UC,DL
         2 000020   000000 620006                    EAX0    0,QL
         2 000021   000006 740000 1                  STX0    FPT_DEVICE+6

      452     3176
      453     3177    1           CALL M$DEVICE (FPT_DEVICE)

   3177  2 000022   000000 630400 1                  EPPR0   FPT_DEVICE
         2 000023   450006 713400                    CLIMB   alt,+20486
         2 000024   401000 401760                    pmme    nvectors=3
         2 000025   000043 702000 2                  TSX2    MDEVICE_FAILED

      454     3178    1             ALTRET (MDEVICE_FAILED);
      455     3179    2           IF VD_$SCROLL.V#>0 THEN DO;

   3179  2 000026   000003 235000 xsym               LDA     VD_$SCROLL+3
         2 000027   000040 604400 2                  TMOZ    s:3186
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:56   

      456     3180    2              FPT_DEVICE.V.PAGE# = %YES#;

   3180  2 000030   100000 236007                    LDQ     32768,DL
         2 000031   000006 256000 1                  ORSQ    FPT_DEVICE+6

      457     3181    2              CALL M$DEVICE (FPT_DEVICE)

   3181  2 000032   000000 630400 1                  EPPR0   FPT_DEVICE
         2 000033   450006 713400                    CLIMB   alt,+20486
         2 000034   401000 401760                    pmme    nvectors=3
         2 000035   000043 702000 2                  TSX2    MDEVICE_FAILED

      458     3182    2                ALTRET (MDEVICE_FAILED);
      459     3183    2              FPT_DEVICE.V.PAGE# = %NO#;

   3183  2 000036   000000 236000 3                  LDQ     0
         2 000037   000006 356000 1                  ANSQ    FPT_DEVICE+6

      460     3184    2              END;

      461     3185
      462     3186    1           RETURN;

   3186  2 000040   000000 702200 xent               TSX2  ! X66_ARET

      463     3187
      464     3188
      465     3189
      466     3190    1   VDG$MONERR: ENTRY ALTRET;

   3190  2 000041   000000 700200 xent  VDG$MONERR   TSX0  ! X66_AUTO_0
         2 000042   000010 000000                    ZERO    8,0

   3179  2 000043                       MDEVICE_FAI* null
      467     3191    1   MDEVICE_FAILED: ;
      468     3192    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:57   

   3192  2 000043   200004 630500                    EPPR0   VD_ERR$,,AUTO
         2 000044   200007 450500                    STP0    VD_ERR$+3,,AUTO
         2 000045   000001 236000 3                  LDQ     1
         2 000046   200006 756100                    STQ     VD_ERR$+2,,AUTO
         2 000047   200006 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000050   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000051   000000 701000 xent               TSX1    VDG$OALLOC
         2 000052   000054 702000 2                  TSX2    s:3193
         2 000053   000055 710000 2                  TRA     s:3194

      469     3193    2           WHENALTRETURN DO; ALTRETURN; END;

   3193  2 000054   000000 702200 xent               TSX2  ! X66_AALT

      470     3194    1           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

   3194  2 000055   000000 470400 xsym               LDP0    B$TCB$
         2 000056   000000 471500                    LDP1    0,,PR0
         2 000057   100102 236100                    LDQ     66,,PR1
         2 000060   200004 473500                    LDP3    VD_ERR$,,AUTO
         2 000061   300002 756100                    STQ     2,,PR3

      471     3195    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   3195  2 000062   000003 220003                    LDX0    3,DU
         2 000063   200004 471500                    LDP1    VD_ERR$,,AUTO
         2 000064   100003 740100                    STX0    3,,PR1

      472     3196    1           VD$ERR.DCB# = B$TCB.ALT$->B$ALT.DCB#;

   3196  2 000065   000000 471500                    LDP1    0,,PR0
         2 000066   100101 721100                    LXL1    65,,PR1
         2 000067   200004 473500                    LDP3    VD_ERR$,,AUTO
         2 000070   300004 741100                    STX1    4,,PR3

      473     3197    1           ALTRETURN;
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:58   

   3197  2 000071   000000 702200 xent               TSX2  ! X66_AALT
      474     3198
      475     3199    1   END VDG$ERASE_COMMAND_WINDOW;
      476     3200        %EOD;

PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:59   
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$ERASE_COMMAND_WINDOW.
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:60   

 **** Variables and constants ****

  ****  Section 001  Data  VDG$ERASE_COMMAND_WINDOW

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 FPT_DEVICE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 CWIN_SPEC$                 4-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(144)   r     1 VD_$SCROLL
     0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$         0-0-0/w SBIN        r     1 VD_SCREEN_HEIGHT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(900)   r     1 CWIN$SPEC                  0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(468)   r     1 VD$FILE_NODE


   Procedure VDG$ERASE_COMMAND_WINDOW requires 58 words for executable code.
   Procedure VDG$ERASE_COMMAND_WINDOW requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:61   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:62   
          MINI XREF LISTING

B$ALT.CODE
      3159**DCL      3159--REDEF    3160--REDEF    3160--REDEF
B$ALT.DCB#
      3160**DCL      3196>>ASSIGN
B$ALT.ERR
      3160**DCL      3194>>ASSIGN
B$ALT.ERR.ERR#
      3161**DCL      3161--REDEF
B$ALT.EVID
      3160**DCL      3160--REDEF    3160--REDEF
B$TCB.ALT$
      3155**DCL      3194>>ASSIGN   3196>>ASSIGN
B$TCB$
      2868**DCL      3155--IMP-PTR  3194>>ASSIGN   3196>>ASSIGN
CWIN$SPEC.DCB#
      2993**DCL      3173>>ASSIGN
CWIN_SPEC$
      2893**DCL      2950--IMP-PTR  3169<<ASSIGN   3173>>ASSIGN
FPT_DEVICE
      2883**DCL      3177<>CALL     3181<>CALL
FPT_DEVICE.V
      2884**DCL      2883--DCLINIT
FPT_DEVICE.V.DCB#
      2884**DCL      3173<<ASSIGN   3175<<ASSIGN
FPT_DEVICE.V.PAGE#
      2885**DCL      3180<<ASSIGN   3183<<ASSIGN
M$DEVICE
      2254**DCL-ENT  3177--CALL     3181--CALL
M$UC
      2274**DCL      3175>>ASSIGN
MDEVICE_FAILED
      3179**LABEL    3177--CALLALT  3181--CALLALT
PL6.E3A0      #003=VDG$ERASE_COMMAND_WINDOW File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:63   
VD$ERR.DCB#
      3058**DCL      3196<<ASSIGN
VD$ERR.ERR
      3053**DCL      3194<<ASSIGN
VD$ERR.FLAGLEV#
      3058**DCL      3195<<ASSIGN
VD$FILE_NODE.DESC.SPEC.V$
      3148**DCL      3169>>ASSIGN
VDG$OALLOC
      2864**DCL-ENT  3192--CALL
VD_$SCROLL.V#
      2936**DCL      3179>>IF
VD_COMMAND_WINDOW$
      2867**DCL      3168>>IF       3169>>ASSIGN
VD_ERR$
      2939**DCL      3016--IMP-PTR  3192<>CALL     3194>>ASSIGN   3195>>ASSIGN   3196>>ASSIGN
VD_SCREEN_HEIGHT
      2871**DCL      3170>>IF

PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:64   
      477        1        /*T***********************************************************/
      478        2        /*T*                                                         */
      479        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      480        4        /*T*                                                         */
      481        5        /*T***********************************************************/
      482        6        /*D* NAME: VDG$ERRMSG, VDG$WARNMSG, VDG$INFOMSG
      483        7            PARAMETERS:
      484        8              ERR# - An error code needing 6EDIT's errormessage file (VD)
      485        9              SUBST_1 - An optional textc or number for %U1 substitution.
      486       10              SUBST_2 - An optional textc or number for %U2 substitution.
      487       11              SUBST_3 - An optional textc or number for %U3 substitution.
      488       12            INPUT:
      489       13              None.
      490       14            OUTPUT:
      491       15              Allocates a VD$ERR and stores the parameters in it.
      492       16        */
      493       17
      494       18        VDG$ERRMSG: PROC (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;
      495       19
      496       20        %INCLUDE VD_MACROS_M;
      497     2235
      498     2236    1   DCL ERR# SBIN;
      499     2237    1   DCL SUBST_1 UBIN;
      500     2238    1   DCL SUBST_2 UBIN;
      501     2239    1   DCL SUBST_3 UBIN;
      502     2240
      503     2241        %VD_6E (STCLASS=SYMREF);
      504     2277        %VD$ERR (STCLASS="BASED(VD_6E.ERR_TAIL$)");
      505     2330        %VD$NUMBER (STCLASS="BASED(SUBST$)");
      506     2375        %VD$POINTER (STCLASS="BASED(SUBST$)");
      507     2420
      508     2421    1   DCL SUBST$ PTR;
      509     2422    1   DCL SINK SBIN;
      510     2423    1   DCL FLAGLEV UBIN;
      511     2424
      512     2425    1   DCL VDG$OALLOC ENTRY (3) ALTRET;
      513     2426
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:65   
      514     2427    1           FLAGLEV = %FLV_SERIOUS;
      515     2428    1           GOTO COMMON;
      516     2429
      517     2430    1   VDG$INFOMSG: ENTRY (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;
      518     2431
      519     2432    1           FLAGLEV = %FLV_INFO;
      520     2433    1           GOTO COMMON;
      521     2434
      522     2435    1   VDG$WARNMSG: ENTRY (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;
      523     2436
      524     2437    1           FLAGLEV = %FLV_WARN;
      525     2438    1   COMMON: ;
      526     2439    1           CALL VDG$OALLOC (%CLS_ERR, SINK)
      527     2440    2           WHENALTRETURN DO; ALTRETURN; END;
      528     2441    1           VD$ERR.ERR.CODE# = ERR#;
      529     2442    1           VD$ERR.FLAGLEV# = FLAGLEV;
      530     2443    1           SUBST$ = PINCRW(ADDR(VD$ERR), SIZEW(VD$ERR));
      531     2444    1           CALL DOSUBST (SUBST_1);
      532     2445    1           SUBST$ = PINCRW(SUBST$, SIZEW(VD$POINTER));
      533     2446    1           CALL DOSUBST (SUBST_2);
      534     2447    1           SUBST$ = PINCRW(SUBST$, SIZEW(VD$POINTER));
      535     2448    1           CALL DOSUBST (SUBST_3);
      536     2449    1           RETURN;
      537     2450
      538     2451    1   DOSUBST: PROC (PARM);
      539     2452
      540     2453    2   DCL PARM ALIGNED CHAR(FLAGLEV);
      541     2454        %VD$TEXTC (NAME=TEXTC, STCLASS=REDEF PARM);
      542     2477    2   DCL NUMBER REDEF PARM SBIN ALIGNED;
      543     2478        %VD$OBJECT_HEADER (NAME=OBJECT REDEF PARM, STCLASS=);
      544     2500
      545     2501    3           IF ADDR(PARM) ~= ADDR(NIL) THEN DO;
      546     2502    4              IF OBJECT.CLASS# <= 0 OR OBJECT.CLASS# >= 32*512 THEN DO;
      547     2503    4                 VD$POINTER.OBJECT.CLASS# = %CLS_NUMBER;
      548     2504    4                 VD$NUMBER.V# = NUMBER;
      549     2505    4                 END; ELSE IF TEXTC.LENGTH# ~= 0 THEN DO;
      550     2506    4                    VD$POINTER.OBJECT.CLASS# = %CLS_PTR_TEXTC;
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:66   
      551     2507    4                    VD$POINTER.V$ = ADDR(TEXTC);
      552     2508    4                    END;
      553     2509    3              END;
      554     2510    2           RETURN;
      555     2511    2   END;
      556     2512    1   END VDG$ERRMSG;
      557     2513        %EOD;

PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:67   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ERRMSG.

   Procedure VDG$ERRMSG requires 81 words for executable code.
   Procedure VDG$ERRMSG requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:68   

 Object Unit name= VDG$ERRMSG                                 File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:25.96 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    81    121  VDG$ERRMSG
    1  RoData even  none     1      1  VDG$ERRMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDG$ERRMSG
     0      5          yes     yes      Std        4  VDG$INFOMSG
     0     12          yes     yes      Std        4  VDG$WARNMSG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:69   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:70   


      477        1        /*T***********************************************************/
      478        2        /*T*                                                         */
      479        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      480        4        /*T*                                                         */
      481        5        /*T***********************************************************/
      482        6        /*D* NAME: VDG$ERRMSG, VDG$WARNMSG, VDG$INFOMSG
      483        7            PARAMETERS:
      484        8              ERR# - An error code needing 6EDIT's errormessage file (VD)
      485        9              SUBST_1 - An optional textc or number for %U1 substitution.
      486       10              SUBST_2 - An optional textc or number for %U2 substitution.
      487       11              SUBST_3 - An optional textc or number for %U3 substitution.
      488       12            INPUT:
      489       13              None.
      490       14            OUTPUT:
      491       15              Allocates a VD$ERR and stores the parameters in it.
      492       16        */
      493       17
      494       18        VDG$ERRMSG: PROC (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;

     18  0 000000   000000 700200 xent  VDG$ERRMSG   TSX0  ! X66_AUTO_4
         0 000001   000016 000004                    ZERO    14,4

      495       19
      496       20        %INCLUDE VD_MACROS_M;
      497     2235
      498     2236    1   DCL ERR# SBIN;
      499     2237    1   DCL SUBST_1 UBIN;
      500     2238    1   DCL SUBST_2 UBIN;
      501     2239    1   DCL SUBST_3 UBIN;
      502     2240
      503     2241        %VD_6E (STCLASS=SYMREF);
      504     2277        %VD$ERR (STCLASS="BASED(VD_6E.ERR_TAIL$)");
      505     2330        %VD$NUMBER (STCLASS="BASED(SUBST$)");
      506     2375        %VD$POINTER (STCLASS="BASED(SUBST$)");
      507     2420
      508     2421    1   DCL SUBST$ PTR;
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:71   
      509     2422    1   DCL SINK SBIN;
      510     2423    1   DCL FLAGLEV UBIN;
      511     2424
      512     2425    1   DCL VDG$OALLOC ENTRY (3) ALTRET;
      513     2426
      514     2427    1           FLAGLEV = %FLV_SERIOUS;

   2427  0 000002   000003 235007                    LDA     3,DL
         0 000003   200011 755100                    STA     FLAGLEV,,AUTO

      515     2428    1           GOTO COMMON;

   2428  0 000004   000016 710000 0                  TRA     COMMON

      516     2429
      517     2430    1   VDG$INFOMSG: ENTRY (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;

   2430  0 000005   000000 700200 xent  VDG$INFOMSG  TSX0  ! X66_AUTO_4
         0 000006   000016 000004                    ZERO    14,4

      518     2431
      519     2432    1           FLAGLEV = %FLV_INFO;

   2432  0 000007   000001 235007                    LDA     1,DL
         0 000010   200011 755100                    STA     FLAGLEV,,AUTO

      520     2433    1           GOTO COMMON;

   2433  0 000011   000016 710000 0                  TRA     COMMON

      521     2434
      522     2435    1   VDG$WARNMSG: ENTRY (ERR#, SUBST_1, SUBST_2, SUBST_3) ALTRET;

   2435  0 000012   000000 700200 xent  VDG$WARNMSG  TSX0  ! X66_AUTO_4
         0 000013   000016 000004                    ZERO    14,4

      523     2436
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:72   
      524     2437    1           FLAGLEV = %FLV_WARN;

   2437  0 000014   000002 235007                    LDA     2,DL
         0 000015   200011 755100                    STA     FLAGLEV,,AUTO

   2437  0 000016                       COMMON       null
      525     2438    1   COMMON: ;
      526     2439    1           CALL VDG$OALLOC (%CLS_ERR, SINK)

   2439  0 000016   200010 630500                    EPPR0   SINK,,AUTO
         0 000017   200015 450500                    STP0    @PARM+2,,AUTO
         0 000020   000000 236000 1                  LDQ     0
         0 000021   200014 756100                    STQ     @PARM+1,,AUTO
         0 000022   200014 630500                    EPPR0   @PARM+1,,AUTO
         0 000023   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000024   000000 701000 xent               TSX1    VDG$OALLOC
         0 000025   000027 702000 0                  TSX2    s:2440
         0 000026   000030 710000 0                  TRA     s:2441

      527     2440    2           WHENALTRETURN DO; ALTRETURN; END;

   2440  0 000027   000000 702200 xent               TSX2  ! X66_AALT

      528     2441    1           VD$ERR.ERR.CODE# = ERR#;

   2441  0 000030   000032 470400 xsym               LDP0    VD_6E+26
         0 000031   200003 471500                    LDP1    @ERR#,,AUTO
         0 000032   100000 236100                    LDQ     0,,PR1
         0 000033   000003 736000                    QLS     3
         0 000034   000002 676100                    ERQ     2,,PR0
         0 000035   377770 376007                    ANQ     131064,DL
         0 000036   000002 656100                    ERSQ    2,,PR0

      529     2442    1           VD$ERR.FLAGLEV# = FLAGLEV;

   2442  0 000037   200011 720100                    LXL0    FLAGLEV,,AUTO
         0 000040   000032 470400 xsym               LDP0    VD_6E+26
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:73   
         0 000041   000003 740100                    STX0    3,,PR0

      530     2443    1           SUBST$ = PINCRW(ADDR(VD$ERR), SIZEW(VD$ERR));

   2443  0 000042   000032 236000 xsym               LDQ     VD_6E+26
         0 000043   000005 036003                    ADLQ    5,DU
         0 000044   200007 756100                    STQ     SUBST$,,AUTO

      531     2444    1           CALL DOSUBST (SUBST_1);

   2444  0 000045   200004 236100                    LDQ     @SUBST_1,,AUTO
         0 000046   200013 756100                    STQ     FLAGLEV+2,,AUTO
         0 000047   000070 701000 0                  TSX1    DOSUBST
         0 000050   000000 011000                    NOP     0

      532     2445    1           SUBST$ = PINCRW(SUBST$, SIZEW(VD$POINTER));

   2445  0 000051   200007 236100                    LDQ     SUBST$,,AUTO
         0 000052   000004 036003                    ADLQ    4,DU
         0 000053   200007 756100                    STQ     SUBST$,,AUTO

      533     2446    1           CALL DOSUBST (SUBST_2);

   2446  0 000054   200005 236100                    LDQ     @SUBST_2,,AUTO
         0 000055   200013 756100                    STQ     FLAGLEV+2,,AUTO
         0 000056   000070 701000 0                  TSX1    DOSUBST
         0 000057   000000 011000                    NOP     0

      534     2447    1           SUBST$ = PINCRW(SUBST$, SIZEW(VD$POINTER));

   2447  0 000060   200007 236100                    LDQ     SUBST$,,AUTO
         0 000061   000004 036003                    ADLQ    4,DU
         0 000062   200007 756100                    STQ     SUBST$,,AUTO

      535     2448    1           CALL DOSUBST (SUBST_3);

   2448  0 000063   200006 236100                    LDQ     @SUBST_3,,AUTO
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:74   
         0 000064   200013 756100                    STQ     FLAGLEV+2,,AUTO
         0 000065   000070 701000 0                  TSX1    DOSUBST
         0 000066   000000 011000                    NOP     0

      536     2449    1           RETURN;

   2449  0 000067   000000 702200 xent               TSX2  ! X66_ARET

      537     2450
      538     2451    1   DOSUBST: PROC (PARM);

   2451  0 000070   200012 741300       DOSUBST      STX1  ! FLAGLEV+1,,AUTO

      539     2452
      540     2453    2   DCL PARM ALIGNED CHAR(FLAGLEV);
      541     2454        %VD$TEXTC (NAME=TEXTC, STCLASS=REDEF PARM);
      542     2477    2   DCL NUMBER REDEF PARM SBIN ALIGNED;
      543     2478        %VD$OBJECT_HEADER (NAME=OBJECT REDEF PARM, STCLASS=);
      544     2500
      545     2501    3           IF ADDR(PARM) ~= ADDR(NIL) THEN DO;

   2501  0 000071   200013 236100                    LDQ     @PARM,,AUTO
         0 000072   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000073   000117 600000 0                  TZE     s:2510

      546     2502    4              IF OBJECT.CLASS# <= 0 OR OBJECT.CLASS# >= 32*512 THEN DO;

   2502  0 000074   200013 470500                    LDP0    @PARM,,AUTO
         0 000075   000000 220100                    LDX0    0,,PR0
         0 000076   000101 600000 0                  TZE     s:2503
         0 000077   040000 100003                    CMPX0   16384,DU
         0 000100   000107 602000 0                  TNC     s:2505+1

      547     2503    4                 VD$POINTER.OBJECT.CLASS# = %CLS_NUMBER;

   2503  0 000101   000033 222003                    LDX2    27,DU
         0 000102   200007 471500                    LDP1    SUBST$,,AUTO
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:75   
         0 000103   100000 742100                    STX2    0,,PR1

      548     2504    4                 VD$NUMBER.V# = NUMBER;

   2504  0 000104   000000 235100                    LDA     0,,PR0
         0 000105   100003 755100                    STA     3,,PR1

      549     2505    4                 END; ELSE IF TEXTC.LENGTH# ~= 0 THEN DO;

   2505  0 000106   000117 710000 0                  TRA     s:2510

   2505  0 000107   000000 236100                    LDQ     0,,PR0
         0 000110   777000 316003                    CANQ    -512,DU
         0 000111   000117 600000 0                  TZE     s:2510

      550     2506    4                    VD$POINTER.OBJECT.CLASS# = %CLS_PTR_TEXTC;

   2506  0 000112   000045 222003                    LDX2    37,DU
         0 000113   200007 471500                    LDP1    SUBST$,,AUTO
         0 000114   100000 742100                    STX2    0,,PR1

      551     2507    4                    VD$POINTER.V$ = ADDR(TEXTC);

   2507  0 000115   200013 236100                    LDQ     @PARM,,AUTO
         0 000116   100003 756100                    STQ     3,,PR1

      552     2508    4                    END;

      553     2509    3              END;

      554     2510    2           RETURN;

   2510  0 000117   200012 221300                    LDX1  ! FLAGLEV+1,,AUTO
         0 000120   000001 702211                    TSX2  ! 1,X1
      555     2511    2   END;
      556     2512    1   END VDG$ERRMSG;
      557     2513        %EOD;
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:76   

PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:77   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ERRMSG.
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:78   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR#                     13-0-0/w PTR         r     1 @PARM
     4-0-0/w PTR         r     1 @SUBST_1                   5-0-0/w PTR         r     1 @SUBST_2
     6-0-0/w PTR         r     1 @SUBST_3                  *0-0-0/w SBIN        r     1 ERR#
    11-0-0/w UBIN        r     1 FLAGLEV                   *0-0-0/w SBIN        r     1 NUMBER
    *0-0-0/w STRC        r     1 OBJECT                    *0-0-0/w ACHR        r     1 PARM
    10-0-0/w SBIN        r     1 SINK                       7-0-0/w PTR         r     1 SUBST$
    *0-0-0/w UBIN        r     1 SUBST_1                   *0-0-0/w UBIN        r     1 SUBST_2
    *0-0-0/w UBIN        r     1 SUBST_3                   *0-0-0/w ASTR(9)     r     1 TEXTC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(144)   r     1 VD$NUMBER
     0-0-0/w STRC(144)   r     1 VD$POINTER


   Procedure VDG$ERRMSG requires 81 words for executable code.
   Procedure VDG$ERRMSG requires 14 words of local(AUTO) storage.
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:79   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:80   
          MINI XREF LISTING

COMMON
      2437**LABEL    2428--GOTO     2433--GOTO
DOSUBST
      2451**PROC     2444--CALL     2446--CALL     2448--CALL
ERR#
      2236**DCL        18--PROC     2430--ENTRY    2435--ENTRY    2441>>ASSIGN
FLAGLEV
      2423**DCL      2427<<ASSIGN   2432<<ASSIGN   2437<<ASSIGN   2442>>ASSIGN   2453--IMP-SIZ
NUMBER IN PROCEDURE DOSUBST
      2477**DCL      2504>>ASSIGN
OBJECT.CLASS# IN PROCEDURE DOSUBST
      2498**DCL      2502>>IF       2502>>IF
PARM IN PROCEDURE DOSUBST
      2453**DCL      2451--PROC     2462--REDEF    2477--REDEF    2494--REDEF    2501--IF
SINK
      2422**DCL      2439<>CALL
SUBST$
      2421**DCL      2338--IMP-PTR  2391--IMP-PTR  2443<<ASSIGN   2445<<ASSIGN   2445>>ASSIGN   2447<<ASSIGN
      2447>>ASSIGN   2503>>ASSIGN   2504>>ASSIGN   2506>>ASSIGN   2507>>ASSIGN
SUBST_1
      2237**DCL        18--PROC     2430--ENTRY    2435--ENTRY    2444<>CALL
SUBST_2
      2238**DCL        18--PROC     2430--ENTRY    2435--ENTRY    2446<>CALL
SUBST_3
      2239**DCL        18--PROC     2430--ENTRY    2435--ENTRY    2448<>CALL
TEXTC IN PROCEDURE DOSUBST
      2462**DCL      2507--ASSIGN
TEXTC.LENGTH# IN PROCEDURE DOSUBST
      2470**DCL      2472--IMP-SIZ  2505>>IF
VD$ERR
      2285**DCL      2443--ASSIGN   2443--ASSIGN
VD$ERR.ERR.CODE#
PL6.E3A0      #004=VDG$ERRMSG File=VDG$UTILITY.:VDA5TSI                          FRI 07/04/97 11:23 Page:81   
      2324**DCL      2441<<ASSIGN
VD$ERR.FLAGLEV#
      2327**DCL      2442<<ASSIGN
VD$NUMBER.V#
      2372**DCL      2504<<ASSIGN
VD$POINTER
      2391**DCL      2445--ASSIGN   2447--ASSIGN
VD$POINTER.OBJECT.CLASS#
      2415**DCL      2503<<ASSIGN   2506<<ASSIGN
VD$POINTER.V$
      2417**DCL      2507<<ASSIGN
VDG$OALLOC
      2425**DCL-ENT  2439--CALL
VD_6E.ERR_TAIL$
      2273**DCL      2285--IMP-PTR  2441>>ASSIGN   2442>>ASSIGN   2443>>ASSIGN

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:82   
      558        1        /*T***********************************************************/
      559        2        /*T*                                                         */
      560        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      561        4        /*T*                                                         */
      562        5        /*T***********************************************************/
      563        6
      564        7        /*D* NAME:  VDG$COMPARE_LOCS
      565        8            PARAMETERS:
      566        9                LOC_1 - A VD$LOCATION to compare.
      567       10                LOC_2 - A VD$LOCATION to compare.
      568       11                RET_CODE - An uninitialized SBIN.
      569       12            INPUT:
      570       13                None.
      571       14            OUTPUT:
      572       15                RET_CODE will contain a %RCCL_ value.  It will contain:
      573       16                    %RCCL_EQUAL if LOC_1 = LOC_2;
      574       17                    %RCCL_LESS if LOC_1 < LOC_2;
      575       18                    %RCCL_GREATER if LOC_1 > LOC_2.
      576       19        */
      577       20
      578       21        VDG$COMPARE_LOCS: PROC (LOC_1, LOC_2, RET_CODE) ALTRET;
      579       22
      580       23
      581       24        %INCLUDE VD_MACROS_M;
      582     2239
      583     2240
      584     2241        %VD$LOCATION (NAME=LOC_1, STCLASS="");
      585     2269        %VD$LOCATION (NAME=LOC_2, STCLASS="");
      586     2297    1   DCL RET_CODE SBIN;
      587     2298
      588     2299
      589     2300
      590     2301    1   DCL LEVEL SBIN;
      591     2302    1   DCL LOC_1_KEY$ PTR;
      592     2303    1   DCL LOC_2_KEY$ PTR;
      593     2304
      594     2305
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:83   
      595     2306        %VD$TEXTC (NAME=LOC$1_KEY, STCLASS="BASED(LOC_1_KEY$)");
      596     2329        %VD$TEXTC (NAME=LOC$2_KEY, STCLASS="BASED(LOC_2_KEY$)");
      597     2352        %VD$TEXTC_REMOTE;
      598     2413
      599     2414
      600     2415
      601     2416    1           RET_CODE = %RCCL_EQUAL;
      602     2417
      603     2418    2           IF LOC_1.EOF THEN DO;
      604     2419    2              IF LOC_2.EOF THEN
      605     2420    2                 RETURN;
      606     2421    3              ELSE DO;
      607     2422    3                 RET_CODE = %RCCL_GREATER;
      608     2423    3                 RETURN;
      609     2424    3                 END;
      610     2425    2              END;
      611     2426
      612     2427    2           IF LOC_2.EOF THEN DO;
      613     2428    2              RET_CODE = %RCCL_LESS;
      614     2429    2              RETURN;
      615     2430    2              END;
      616     2431
      617     2432    1           LEVEL = 0;
      618     2433
      619     2434    1   EACH_LEVEL:
      620     2435    2           DO WHILE LEVEL < %MX_LOCATION_LEVELS;
      621     2436    3              IF LOC_1.KEY (LEVEL) = %CLEAR THEN DO;
      622     2437    3                 IF LOC_2.KEY (LEVEL) = %CLEAR THEN
      623     2438    3                    EXIT EACH_LEVEL;   /* All keys present are equal */
      624     2439                      /* LOC_2 keys go deeper in file structure than LOC_1 */
      625     2440    3                 RET_CODE = %RCCL_LESS;
      626     2441    3                 RETURN;
      627     2442    3                 END;
      628     2443    3              IF LOC_2.KEY (LEVEL) = %CLEAR THEN DO;
      629     2444                      /* LOC_1 keys go deeper in file structure than LOC_2 */
      630     2445    3                 RET_CODE = %RCCL_GREATER;
      631     2446    3                 RETURN;
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:84   
      632     2447    3                 END;
      633     2448                   %GETKEY (KEY=LOC_1.KEY, INDX=LEVEL, PTR=LOC_1_KEY$);
      634     2458                   %GETKEY (KEY=LOC_2.KEY, INDX=LEVEL, PTR=LOC_2_KEY$);
      635     2468    2              IF LOC_1.KEY (LEVEL) = %CLEAR
      636     2469    3                OR LOC$1_KEY.BYTES < LOC$2_KEY.BYTES THEN DO;
      637     2470    3                 RET_CODE = %RCCL_LESS;
      638     2471    3                 RETURN;
      639     2472    3                 END;
      640     2473    2              IF LOC_2.KEY (LEVEL) = %CLEAR
      641     2474    3                OR LOC$1_KEY.BYTES > LOC$2_KEY.BYTES THEN DO;
      642     2475    3                 RET_CODE = %RCCL_GREATER;
      643     2476    3                 RETURN;
      644     2477    3                 END;
      645     2478    2              LEVEL = LEVEL + 1;
      646     2479    2              END EACH_LEVEL;
      647     2480
      648     2481                /* Keys are equal */
      649     2482    2           IF LOC_1.POSITION# < LOC_2.POSITION# THEN DO;
      650     2483    2              RET_CODE = %RCCL_LESS;
      651     2484    2              RETURN;
      652     2485    2              END;
      653     2486    2           IF LOC_1.POSITION# > LOC_2.POSITION# THEN DO;
      654     2487    2              RET_CODE = %RCCL_GREATER;
      655     2488    2              RETURN;
      656     2489    2              END;
      657     2490
      658     2491    1           RETURN;
      659     2492
      660     2493    1   END VDG$COMPARE_LOCS;
      661     2494        %EOD;

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:85   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_LOCS.

   Procedure VDG$COMPARE_LOCS requires 131 words for executable code.
   Procedure VDG$COMPARE_LOCS requires 10 words of local(AUTO) storage.

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:86   

 Object Unit name= VDG$COMPARE_LOCS                           File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:31.68 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   131    203  VDG$COMPARE_LOCS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VDG$COMPARE_LOCS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:87   


      558        1        /*T***********************************************************/
      559        2        /*T*                                                         */
      560        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      561        4        /*T*                                                         */
      562        5        /*T***********************************************************/
      563        6
      564        7        /*D* NAME:  VDG$COMPARE_LOCS
      565        8            PARAMETERS:
      566        9                LOC_1 - A VD$LOCATION to compare.
      567       10                LOC_2 - A VD$LOCATION to compare.
      568       11                RET_CODE - An uninitialized SBIN.
      569       12            INPUT:
      570       13                None.
      571       14            OUTPUT:
      572       15                RET_CODE will contain a %RCCL_ value.  It will contain:
      573       16                    %RCCL_EQUAL if LOC_1 = LOC_2;
      574       17                    %RCCL_LESS if LOC_1 < LOC_2;
      575       18                    %RCCL_GREATER if LOC_1 > LOC_2.
      576       19        */
      577       20
      578       21        VDG$COMPARE_LOCS: PROC (LOC_1, LOC_2, RET_CODE) ALTRET;

     21  0 000000   000000 700200 xent  VDG$COMPARE* TSX0  ! X66_AUTO_3
         0 000001   000012 000003                    ZERO    10,3

      579       22
      580       23
      581       24        %INCLUDE VD_MACROS_M;
      582     2239
      583     2240
      584     2241        %VD$LOCATION (NAME=LOC_1, STCLASS="");
      585     2269        %VD$LOCATION (NAME=LOC_2, STCLASS="");
      586     2297    1   DCL RET_CODE SBIN;
      587     2298
      588     2299
      589     2300
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:88   
      590     2301    1   DCL LEVEL SBIN;
      591     2302    1   DCL LOC_1_KEY$ PTR;
      592     2303    1   DCL LOC_2_KEY$ PTR;
      593     2304
      594     2305
      595     2306        %VD$TEXTC (NAME=LOC$1_KEY, STCLASS="BASED(LOC_1_KEY$)");
      596     2329        %VD$TEXTC (NAME=LOC$2_KEY, STCLASS="BASED(LOC_2_KEY$)");
      597     2352        %VD$TEXTC_REMOTE;
      598     2413
      599     2414
      600     2415
      601     2416    1           RET_CODE = %RCCL_EQUAL;

   2416  0 000002   200005 470500                    LDP0    @RET_CODE,,AUTO
         0 000003   000000 450100                    STZ     0,,PR0

      602     2417
      603     2418    2           IF LOC_1.EOF THEN DO;

   2418  0 000004   200003 471500                    LDP1    @LOC_1,,AUTO
         0 000005   100010 236100                    LDQ     8,,PR1
         0 000006   400000 316007                    CANQ    -131072,DL
         0 000007   000020 600000 0                  TZE     s:2427

      604     2419    2              IF LOC_2.EOF THEN

   2419  0 000010   200004 473500                    LDP3    @LOC_2,,AUTO
         0 000011   300010 236100                    LDQ     8,,PR3
         0 000012   400000 316007                    CANQ    -131072,DL
         0 000013   000015 600000 0                  TZE     s:2422

      605     2420    2                 RETURN;

   2420  0 000014   000000 702200 xent               TSX2  ! X66_ARET

      606     2421    3              ELSE DO;

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:89   
      607     2422    3                 RET_CODE = %RCCL_GREATER;

   2422  0 000015   000001 235007                    LDA     1,DL
         0 000016   000000 755100                    STA     0,,PR0

      608     2423    3                 RETURN;

   2423  0 000017   000000 702200 xent               TSX2  ! X66_ARET

      609     2424    3                 END;
      610     2425    2              END;
      611     2426
      612     2427    2           IF LOC_2.EOF THEN DO;

   2427  0 000020   200004 473500                    LDP3    @LOC_2,,AUTO
         0 000021   300010 236100                    LDQ     8,,PR3
         0 000022   400000 316007                    CANQ    -131072,DL
         0 000023   000027 600000 0                  TZE     s:2432

      613     2428    2              RET_CODE = %RCCL_LESS;

   2428  0 000024   000001 335007                    LCA     1,DL
         0 000025   000000 755100                    STA     0,,PR0

      614     2429    2              RETURN;

   2429  0 000026   000000 702200 xent               TSX2  ! X66_ARET

      615     2430    2              END;
      616     2431
      617     2432    1           LEVEL = 0;

   2432  0 000027   200006 450100                    STZ     LEVEL,,AUTO

      618     2433
      619     2434    1   EACH_LEVEL:
      620     2435    2           DO WHILE LEVEL < %MX_LOCATION_LEVELS;
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:90   

   2435  0 000030   200006 235100       EACH_LEVEL   LDA     LEVEL,,AUTO
         0 000031   000004 115007                    CMPA    4,DL
         0 000032   000164 605000 0                  TPL     s:2482

      621     2436    3              IF LOC_1.KEY (LEVEL) = %CLEAR THEN DO;

   2436  0 000033   200006 235100                    LDA     LEVEL,,AUTO
         0 000034   000003 735000                    ALS     3
         0 000035   200003 470500                    LDP0    @LOC_1,,AUTO
         0 000036   000000 106505                    CMPC    fill='000'O
         0 000037   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000040   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000041   000053 601000 0                  TNZ     s:2443

      622     2437    3                 IF LOC_2.KEY (LEVEL) = %CLEAR THEN

   2437  0 000042   200004 471500                    LDP1    @LOC_2,,AUTO
         0 000043   000000 106505                    CMPC    fill='000'O
         0 000044   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=8
         0 000045   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000046   000164 600000 0                  TZE     s:2482

      623     2438    3                    EXIT EACH_LEVEL;   /* All keys present are equal */
      624     2439                      /* LOC_2 keys go deeper in file structure than LOC_1 */
      625     2440    3                 RET_CODE = %RCCL_LESS;

   2440  0 000047   000001 336007                    LCQ     1,DL
         0 000050   200005 473500                    LDP3    @RET_CODE,,AUTO
         0 000051   300000 756100                    STQ     0,,PR3

      626     2441    3                 RETURN;

   2441  0 000052   000000 702200 xent               TSX2  ! X66_ARET

      627     2442    3                 END;
      628     2443    3              IF LOC_2.KEY (LEVEL) = %CLEAR THEN DO;
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:91   

   2443  0 000053   200004 471500                    LDP1    @LOC_2,,AUTO
         0 000054   000000 106505                    CMPC    fill='000'O
         0 000055   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=8
         0 000056   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000057   000064 601000 0                  TNZ     s:2455

      629     2444                      /* LOC_1 keys go deeper in file structure than LOC_2 */
      630     2445    3                 RET_CODE = %RCCL_GREATER;

   2445  0 000060   000001 236007                    LDQ     1,DL
         0 000061   200005 473500                    LDP3    @RET_CODE,,AUTO
         0 000062   300000 756100                    STQ     0,,PR3

      631     2446    3                 RETURN;

   2446  0 000063   000000 702200 xent               TSX2  ! X66_ARET

      632     2447    3                 END;
      633     2448                   %GETKEY (KEY=LOC_1.KEY, INDX=LEVEL, PTR=LOC_1_KEY$);

   2455  0 000064   200006 236100                    LDQ     LEVEL,,AUTO
         0 000065   000001 736000                    QLS     1
         0 000066   000000 720106                    LXL0    0,QL,PR0
         0 000067   000002 100003                    CMPX0   2,DU
         0 000070   000075 601000 0                  TNZ     s:2455+9

   2455  0 000071   000001 473506                    LDP3    1,QL,PR0
         0 000072   300002 634500                    EPPR4   2,,PR3
         0 000073   200007 454500                    STP4    LOC_1_KEY$,,AUTO
         0 000074   000102 710000 0                  TRA     s:2465

   2455  0 000075   200006 236100                    LDQ     LEVEL,,AUTO
         0 000076   000023 736000                    QLS     19
         0 000077   000001 036003                    ADLQ    1,DU
         0 000100   200003 036100                    ADLQ    @LOC_1,,AUTO
         0 000101   200007 756100                    STQ     LOC_1_KEY$,,AUTO
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:92   

      634     2458                   %GETKEY (KEY=LOC_2.KEY, INDX=LEVEL, PTR=LOC_2_KEY$);

   2465  0 000102   200006 236100                    LDQ     LEVEL,,AUTO
         0 000103   000001 736000                    QLS     1
         0 000104   100000 720106                    LXL0    0,QL,PR1
         0 000105   000002 100003                    CMPX0   2,DU
         0 000106   000113 601000 0                  TNZ     s:2465+9

   2465  0 000107   100001 473506                    LDP3    1,QL,PR1
         0 000110   300002 634500                    EPPR4   2,,PR3
         0 000111   200010 454500                    STP4    LOC_2_KEY$,,AUTO
         0 000112   000120 710000 0                  TRA     s:2468

   2465  0 000113   200006 236100                    LDQ     LEVEL,,AUTO
         0 000114   000023 736000                    QLS     19
         0 000115   000001 036003                    ADLQ    1,DU
         0 000116   200004 036100                    ADLQ    @LOC_2,,AUTO
         0 000117   200010 756100                    STQ     LOC_2_KEY$,,AUTO

      635     2468    2              IF LOC_1.KEY (LEVEL) = %CLEAR

   2468  0 000120   000000 106505                    CMPC    fill='000'O
         0 000121   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000122   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000123   000140 600000 0                  TZE     s:2470
         0 000124   200007 473500                    LDP3    LOC_1_KEY$,,AUTO
         0 000125   300000 236100                    LDQ     0,,PR3
         0 000126   000033 772000                    QRL     27
         0 000127   200010 474500                    LDP4    LOC_2_KEY$,,AUTO
         0 000130   000000 620006                    EAX0    0,QL
         0 000131   400000 236100                    LDQ     0,,PR4
         0 000132   000033 772000                    QRL     27
         0 000133   000000 621006                    EAX1    0,QL
         0 000134   040140 106540                    CMPC    fill='040'O
         0 000135   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         0 000136   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:93   
         0 000137   000144 603000 0                  TRC     s:2473

      636     2469    3                OR LOC$1_KEY.BYTES < LOC$2_KEY.BYTES THEN DO;

      637     2470    3                 RET_CODE = %RCCL_LESS;

   2470  0 000140   000001 336007                    LCQ     1,DL
         0 000141   200005 473500                    LDP3    @RET_CODE,,AUTO
         0 000142   300000 756100                    STQ     0,,PR3

      638     2471    3                 RETURN;

   2471  0 000143   000000 702200 xent               TSX2  ! X66_ARET

      639     2472    3                 END;
      640     2473    2              IF LOC_2.KEY (LEVEL) = %CLEAR

   2473  0 000144   000000 106505                    CMPC    fill='000'O
         0 000145   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=8
         0 000146   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000147   000154 600000 0                  TZE     s:2475
         0 000150   040140 106540                    CMPC    fill='040'O
         0 000151   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
         0 000152   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         0 000153   000160 603000 0                  TRC     s:2478

      641     2474    3                OR LOC$1_KEY.BYTES > LOC$2_KEY.BYTES THEN DO;

      642     2475    3                 RET_CODE = %RCCL_GREATER;

   2475  0 000154   000001 235007                    LDA     1,DL
         0 000155   200005 475500                    LDP5    @RET_CODE,,AUTO
         0 000156   500000 755100                    STA     0,,PR5

      643     2476    3                 RETURN;

   2476  0 000157   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:94   

      644     2477    3                 END;
      645     2478    2              LEVEL = LEVEL + 1;

   2478  0 000160   200006 054100                    AOS     LEVEL,,AUTO

      646     2479    2              END EACH_LEVEL;

   2479  0 000161   200006 235100                    LDA     LEVEL,,AUTO
         0 000162   000004 115007                    CMPA    4,DL
         0 000163   000033 604000 0                  TMI     s:2436

      647     2480
      648     2481                /* Keys are equal */
      649     2482    2           IF LOC_1.POSITION# < LOC_2.POSITION# THEN DO;

   2482  0 000164   200003 470500                    LDP0    @LOC_1,,AUTO
         0 000165   000010 220100                    LDX0    8,,PR0
         0 000166   200004 471500                    LDP1    @LOC_2,,AUTO
         0 000167   100010 100100                    CMPX0   8,,PR1
         0 000170   000175 605000 0                  TPL     s:2486

      650     2483    2              RET_CODE = %RCCL_LESS;

   2483  0 000171   000001 335007                    LCA     1,DL
         0 000172   200005 473500                    LDP3    @RET_CODE,,AUTO
         0 000173   300000 755100                    STA     0,,PR3

      651     2484    2              RETURN;

   2484  0 000174   000000 702200 xent               TSX2  ! X66_ARET

      652     2485    2              END;
      653     2486    2           IF LOC_1.POSITION# > LOC_2.POSITION# THEN DO;

   2486  0 000175   000202 604400 0                  TMOZ    s:2491

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:95   
      654     2487    2              RET_CODE = %RCCL_GREATER;

   2487  0 000176   000001 235007                    LDA     1,DL
         0 000177   200005 473500                    LDP3    @RET_CODE,,AUTO
         0 000200   300000 755100                    STA     0,,PR3

      655     2488    2              RETURN;

   2488  0 000201   000000 702200 xent               TSX2  ! X66_ARET

      656     2489    2              END;
      657     2490
      658     2491    1           RETURN;

   2491  0 000202   000000 702200 xent               TSX2  ! X66_ARET
      659     2492
      660     2493    1   END VDG$COMPARE_LOCS;
      661     2494        %EOD;

PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:96   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_LOCS.
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:97   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @LOC_1                     4-0-0/w PTR         r     1 @LOC_2
     5-0-0/w PTR         r     1 @RET_CODE                  6-0-0/w SBIN        r     1 LEVEL
    *0-0-0/w STRC(324)   r     1 LOC_1                      7-0-0/w PTR         r     1 LOC_1_KEY$
    *0-0-0/w STRC(324)   r     1 LOC_2                     10-0-0/w PTR         r     1 LOC_2_KEY$
    *0-0-0/w SBIN        r     1 RET_CODE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 LOC$1_KEY                  0-0-0/w ASTR(9)     r     1 LOC$2_KEY
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$COMPARE_LOCS requires 131 words for executable code.
   Procedure VDG$COMPARE_LOCS requires 10 words of local(AUTO) storage.
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:98   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:99   
          MINI XREF LISTING

EACH_LEVEL
      2435**LABEL    2438--EXIT
LEVEL
      2301**DCL      2432<<ASSIGN   2435>>DOWHILE  2436>>IF       2437>>IF       2443>>IF       2455>>IF
      2455>>ASSIGN   2455>>ASSIGN   2465>>IF       2465>>ASSIGN   2465>>ASSIGN   2468>>IF       2473>>IF
      2478<<ASSIGN   2478>>ASSIGN
LOC$1_KEY.BYTES
      2324**DCL      2468>>IF       2473>>IF
LOC$1_KEY.LENGTH#
      2322**DCL      2324--IMP-SIZ  2468>>IF       2473>>IF
LOC$2_KEY.BYTES
      2347**DCL      2468>>IF       2473>>IF
LOC$2_KEY.LENGTH#
      2345**DCL      2347--IMP-SIZ  2468>>IF       2473>>IF
LOC_1
      2249**DCL        21--PROC
LOC_1.EOF
      2267**DCL      2418>>IF
LOC_1.KEY
      2263**DCL      2436>>IF       2468>>IF
LOC_1.KEY.REP#
      2265**DCL      2455>>IF
LOC_1.KEY.V$
      2265**DCL      2455>>ASSIGN   2455--ASSIGN
LOC_1.POSITION#
      2267**DCL      2482>>IF       2486>>IF
LOC_1_KEY$
      2302**DCL      2314--IMP-PTR  2455<<ASSIGN   2455<<ASSIGN   2468>>IF       2468>>IF       2473>>IF
      2473>>IF
LOC_2
      2277**DCL        21--PROC
LOC_2.EOF
PL6.E3A0      #005=VDG$COMPARE_LOCS File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:23 Page:100  
      2295**DCL      2419>>IF       2427>>IF
LOC_2.KEY
      2291**DCL      2437>>IF       2443>>IF       2473>>IF
LOC_2.KEY.REP#
      2293**DCL      2465>>IF
LOC_2.KEY.V$
      2293**DCL      2465>>ASSIGN   2465--ASSIGN
LOC_2.POSITION#
      2295**DCL      2482>>IF       2486>>IF
LOC_2_KEY$
      2303**DCL      2337--IMP-PTR  2465<<ASSIGN   2465<<ASSIGN   2468>>IF       2468>>IF       2473>>IF
      2473>>IF
RET_CODE
      2297**DCL        21--PROC     2416<<ASSIGN   2422<<ASSIGN   2428<<ASSIGN   2440<<ASSIGN   2445<<ASSIGN
      2470<<ASSIGN   2475<<ASSIGN   2483<<ASSIGN   2487<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      2406**DCL      2408--IMP-SIZ  2455--ASSIGN   2465--ASSIGN

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:101  
      662        1        /*T***********************************************************/
      663        2        /*T*                                                         */
      664        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      665        4        /*T*                                                         */
      666        5        /*T***********************************************************/
      667        6
      668        7        /*D* NAME: VDG$COMPARE_PTRS_W_RANGE
      669        8            PARAMETERS:
      670        9                LOCATION_PTRS - A LOCATION_PTRS structure which is
      671       10                    to be checked against the RANGE.
      672       11                    NOTE!!  .POSITION and .EOF are ignored!!
      673       12                RANGE - RANGE to be checked against.
      674       13                    NOTE!!  Both .POSITIONs and .EOFs are ignored!!
      675       14                WITHIN_RANGE - Optional uninitialized SBIN ALIGNED.
      676       15            INPUT:
      677       16                None.
      678       17            OUTPUT:
      679       18                WITHIN_RANGE set based on the comparison:
      680       19                    %RCCL_EQUAL if LOCATION_PTRS is within RANGE;
      681       20                    %RCCL_LESS if LOCATION_PTRS is below RANGE.
      682       21                    %RCCL_GREATER if LOCATION_PTRS is above RANGE.
      683       22                The ALTRETURN is taken if LOCATION_PTRS is not within RANGE.
      684       23            DESCRIPTION:
      685       24                Just a routine to avoid code duplication in a few
      686       25                modules.  Checks all the significant levels of a
      687       26                LOCATION_PTRS structure (which may have been filled
      688       27                in by VDG$LOCATION_TO_PTRS) to see if they're within
      689       28                the RANGE.
      690       29        */
      691       30
      692       31        VDG$COMPARE_PTRS_W_RANGE: PROC (LOCATION_PTRS, RANGE, WITHIN_RANGE)
      693       32                  ALTRET;
      694       33
      695       34        %INCLUDE VD_MACROS_M;
      696     2249
      697     2250        %VD$LOCATION_PTRS (NAME=LOCATION_PTRS, STCLASS=PARAM);
      698     2265        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:102  
      699     2334    1   DCL WITHIN_RANGE SBIN ALIGNED PARAM;
      700     2335
      701     2336
      702     2337
      703     2338    1   DCL INDX UBIN;
      704     2339    1   DCL END_KEY$ PTR;
      705     2340    1   DCL START_KEY$ PTR;
      706     2341    1   DCL RCCL SBIN;
      707     2342
      708     2343
      709     2344        %VD$TEXTC (NAME=START$KEY, STCLASS="BASED(START_KEY$)");
      710     2367        %VD$TEXTC (NAME=END$KEY, STCLASS="BASED(END_KEY$)");
      711     2390        %VD$TEXTC;
      712     2413        %VD$TEXTC_REMOTE;
      713     2474
      714     2475
      715     2476
      716     2477    1           RCCL = %RCCL_EQUAL;
      717     2478
      718     2479    1   CHECK_THE_PTR_ARRAY:
      719     2480    2           DO INDX = 0 TO LOCATION_PTRS.COUNT# - 1;
      720     2481    2              IF RANGE.START.KEY (INDX) = %CLEAR THEN
      721     2482    2                 EXIT CHECK_THE_PTR_ARRAY;
      722     2483                   %GETKEY (KEY=RANGE.START.KEY, INDX=INDX,
      723     2484                   PTR = START_KEY$ );
      724     2494                   %GETKEY ( KEY = "RANGE.ENDD.KEY",
      725     2495                   INDX = INDX,
      726     2496                   PTR = END_KEY$ );
      727     2506
      728     2507    2              IF LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.LENGTH# = 0
      729     2508    2                OR LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.BYTES <
      730     2509    2                START_KEY$ -> VD$TEXTC.BYTES
      731     2510    2              THEN
      732     2511    3              DO;
      733     2512    3                 RCCL = %RCCL_LESS;
      734     2513    3                 EXIT CHECK_THE_PTR_ARRAY;
      735     2514    3                 END;
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:103  
      736     2515    2              IF LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.BYTES >
      737     2516    2                END_KEY$ -> VD$TEXTC.BYTES
      738     2517    2              THEN
      739     2518    3              DO;
      740     2519    3                 RCCL = %RCCL_GREATER;
      741     2520    3                 EXIT CHECK_THE_PTR_ARRAY;
      742     2521    3                 END;
      743     2522
      744     2523    2              END CHECK_THE_PTR_ARRAY;
      745     2524
      746     2525    1           IF ADDR(WITHIN_RANGE) ~= ADDR(NIL) THEN
      747     2526    1              WITHIN_RANGE = RCCL;
      748     2527    1           IF RCCL ~= %RCCL_EQUAL THEN
      749     2528    1              ALTRETURN;
      750     2529    1           RETURN;
      751     2530
      752     2531    1   END VDG$COMPARE_PTRS_W_RANGE;
      753     2532        %EOD;

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:104  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_PTRS_W_RANGE.

   Procedure VDG$COMPARE_PTRS_W_RANGE requires 90 words for executable code.
   Procedure VDG$COMPARE_PTRS_W_RANGE requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:105  

 Object Unit name= VDG$COMPARE_PTRS_W_RANGE                   File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:37.80 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    90    132  VDG$COMPARE_PTRS_W_RANGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VDG$COMPARE_PTRS_W_RANGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:106  


      662        1        /*T***********************************************************/
      663        2        /*T*                                                         */
      664        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      665        4        /*T*                                                         */
      666        5        /*T***********************************************************/
      667        6
      668        7        /*D* NAME: VDG$COMPARE_PTRS_W_RANGE
      669        8            PARAMETERS:
      670        9                LOCATION_PTRS - A LOCATION_PTRS structure which is
      671       10                    to be checked against the RANGE.
      672       11                    NOTE!!  .POSITION and .EOF are ignored!!
      673       12                RANGE - RANGE to be checked against.
      674       13                    NOTE!!  Both .POSITIONs and .EOFs are ignored!!
      675       14                WITHIN_RANGE - Optional uninitialized SBIN ALIGNED.
      676       15            INPUT:
      677       16                None.
      678       17            OUTPUT:
      679       18                WITHIN_RANGE set based on the comparison:
      680       19                    %RCCL_EQUAL if LOCATION_PTRS is within RANGE;
      681       20                    %RCCL_LESS if LOCATION_PTRS is below RANGE.
      682       21                    %RCCL_GREATER if LOCATION_PTRS is above RANGE.
      683       22                The ALTRETURN is taken if LOCATION_PTRS is not within RANGE.
      684       23            DESCRIPTION:
      685       24                Just a routine to avoid code duplication in a few
      686       25                modules.  Checks all the significant levels of a
      687       26                LOCATION_PTRS structure (which may have been filled
      688       27                in by VDG$LOCATION_TO_PTRS) to see if they're within
      689       28                the RANGE.
      690       29        */
      691       30
      692       31        VDG$COMPARE_PTRS_W_RANGE: PROC (LOCATION_PTRS, RANGE, WITHIN_RANGE)

     31  0 000000   000000 700200 xent  VDG$COMPARE* TSX0  ! X66_AUTO_3
         0 000001   000012 000003                    ZERO    10,3

      693       32                  ALTRET;
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:107  
      694       33
      695       34        %INCLUDE VD_MACROS_M;
      696     2249
      697     2250        %VD$LOCATION_PTRS (NAME=LOCATION_PTRS, STCLASS=PARAM);
      698     2265        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
      699     2334    1   DCL WITHIN_RANGE SBIN ALIGNED PARAM;
      700     2335
      701     2336
      702     2337
      703     2338    1   DCL INDX UBIN;
      704     2339    1   DCL END_KEY$ PTR;
      705     2340    1   DCL START_KEY$ PTR;
      706     2341    1   DCL RCCL SBIN;
      707     2342
      708     2343
      709     2344        %VD$TEXTC (NAME=START$KEY, STCLASS="BASED(START_KEY$)");
      710     2367        %VD$TEXTC (NAME=END$KEY, STCLASS="BASED(END_KEY$)");
      711     2390        %VD$TEXTC;
      712     2413        %VD$TEXTC_REMOTE;
      713     2474
      714     2475
      715     2476
      716     2477    1           RCCL = %RCCL_EQUAL;

   2477  0 000002   200011 450100                    STZ     RCCL,,AUTO

      717     2478
      718     2479    1   CHECK_THE_PTR_ARRAY:
      719     2480    2           DO INDX = 0 TO LOCATION_PTRS.COUNT# - 1;

   2480  0 000003   200006 450100       CHECK_THE_P* STZ     INDX,,AUTO
         0 000004   000112 710000 0                  TRA     s:2523+3

      720     2481    2              IF RANGE.START.KEY (INDX) = %CLEAR THEN

   2481  0 000005   200006 235100                    LDA     INDX,,AUTO
         0 000006   000003 735000                    ALS     3
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:108  
         0 000007   200004 470500                    LDP0    @RANGE,,AUTO
         0 000010   000000 106505                    CMPC    fill='000'O
         0 000011   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000012   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000013   000120 600000 0                  TZE     s:2525

      721     2482    2                 EXIT CHECK_THE_PTR_ARRAY;
      722     2483                   %GETKEY (KEY=RANGE.START.KEY, INDX=INDX,
      723     2484                   PTR = START_KEY$ );

   2491  0 000014   200006 236100                    LDQ     INDX,,AUTO
         0 000015   000001 736000                    QLS     1
         0 000016   000000 720106                    LXL0    0,QL,PR0
         0 000017   000002 100003                    CMPX0   2,DU
         0 000020   000025 601000 0                  TNZ     s:2491+9

   2491  0 000021   000001 471506                    LDP1    1,QL,PR0
         0 000022   100002 633500                    EPPR3   2,,PR1
         0 000023   200010 453500                    STP3    START_KEY$,,AUTO
         0 000024   000032 710000 0                  TRA     s:2503

   2491  0 000025   200006 236100                    LDQ     INDX,,AUTO
         0 000026   000023 736000                    QLS     19
         0 000027   000001 036003                    ADLQ    1,DU
         0 000030   200004 036100                    ADLQ    @RANGE,,AUTO
         0 000031   200010 756100                    STQ     START_KEY$,,AUTO

      724     2494                   %GETKEY ( KEY = "RANGE.ENDD.KEY",
      725     2495                   INDX = INDX,
      726     2496                   PTR = END_KEY$ );

   2503  0 000032   200006 236100                    LDQ     INDX,,AUTO
         0 000033   000001 736000                    QLS     1
         0 000034   000011 720106                    LXL0    9,QL,PR0
         0 000035   000002 100003                    CMPX0   2,DU
         0 000036   000043 601000 0                  TNZ     s:2503+9

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:109  
   2503  0 000037   000012 471506                    LDP1    10,QL,PR0
         0 000040   100002 633500                    EPPR3   2,,PR1
         0 000041   200007 453500                    STP3    END_KEY$,,AUTO
         0 000042   000050 710000 0                  TRA     s:2507

   2503  0 000043   200006 236100                    LDQ     INDX,,AUTO
         0 000044   000023 736000                    QLS     19
         0 000045   000012 036003                    ADLQ    10,DU
         0 000046   200004 036100                    ADLQ    @RANGE,,AUTO
         0 000047   200007 756100                    STQ     END_KEY$,,AUTO

      727     2506
      728     2507    2              IF LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.LENGTH# = 0

   2507  0 000050   200003 471500                    LDP1    @LOCATION_PTRS,,AUTO
         0 000051   200006 720100                    LXL0    INDX,,AUTO
         0 000052   100001 473510                    LDP3    1,X0,PR1
         0 000053   300000 236100                    LDQ     0,,PR3
         0 000054   777000 316003                    CANQ    -512,DU
         0 000055   000071 600000 0                  TZE     s:2512
         0 000056   300000 236100                    LDQ     0,,PR3
         0 000057   000033 772000                    QRL     27
         0 000060   200010 474500                    LDP4    START_KEY$,,AUTO
         0 000061   000000 621006                    EAX1    0,QL
         0 000062   400000 236100                    LDQ     0,,PR4
         0 000063   000033 772000                    QRL     27
         0 000064   000000 622006                    EAX2    0,QL
         0 000065   040140 106540                    CMPC    fill='040'O
         0 000066   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         0 000067   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         0 000070   000074 603000 0                  TRC     s:2515

      729     2508    2                OR LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.BYTES <
      730     2509    2                START_KEY$ -> VD$TEXTC.BYTES
      731     2510    2              THEN
      732     2511    3              DO;

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:110  
      733     2512    3                 RCCL = %RCCL_LESS;

   2512  0 000071   000001 336007                    LCQ     1,DL
         0 000072   200011 756100                    STQ     RCCL,,AUTO

      734     2513    3                 EXIT CHECK_THE_PTR_ARRAY;

   2513  0 000073   000120 710000 0                  TRA     s:2525

      735     2514    3                 END;
      736     2515    2              IF LOCATION_PTRS.KEY$ ( INDX ) -> VD$TEXTC.BYTES >

   2515  0 000074   200007 475500                    LDP5    END_KEY$,,AUTO
         0 000075   500000 236100                    LDQ     0,,PR5
         0 000076   000033 772000                    QRL     27
         0 000077   000000 623006                    EAX3    0,QL
         0 000100   040140 106540                    CMPC    fill='040'O
         0 000101   500000 200013                    ADSC9   0,,PR5                   cn=1,n=*X3
         0 000102   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         0 000103   000107 603000 0                  TRC     s:2523

      737     2516    2                END_KEY$ -> VD$TEXTC.BYTES
      738     2517    2              THEN
      739     2518    3              DO;

      740     2519    3                 RCCL = %RCCL_GREATER;

   2519  0 000104   000001 235007                    LDA     1,DL
         0 000105   200011 755100                    STA     RCCL,,AUTO

      741     2520    3                 EXIT CHECK_THE_PTR_ARRAY;

   2520  0 000106   000120 710000 0                  TRA     s:2525

      742     2521    3                 END;
      743     2522
      744     2523    2              END CHECK_THE_PTR_ARRAY;
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:111  

   2523  0 000107   200006 235100                    LDA     INDX,,AUTO
         0 000110   000001 035007                    ADLA    1,DL
         0 000111   200006 755100                    STA     INDX,,AUTO
         0 000112   200003 470500                    LDP0    @LOCATION_PTRS,,AUTO
         0 000113   000000 236100                    LDQ     0,,PR0
         0 000114   000777 376007                    ANQ     511,DL
         0 000115   200006 116100                    CMPQ    INDX,,AUTO
         0 000116   000120 600000 0                  TZE     s:2525
         0 000117   000005 603000 0                  TRC     s:2481

      745     2524
      746     2525    1           IF ADDR(WITHIN_RANGE) ~= ADDR(NIL) THEN

   2525  0 000120   200005 236100                    LDQ     @WITHIN_RANGE,,AUTO
         0 000121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000122   000126 600000 0                  TZE     s:2527

      747     2526    1              WITHIN_RANGE = RCCL;

   2526  0 000123   200005 470500                    LDP0    @WITHIN_RANGE,,AUTO
         0 000124   200011 235100                    LDA     RCCL,,AUTO
         0 000125   000000 755100                    STA     0,,PR0

      748     2527    1           IF RCCL ~= %RCCL_EQUAL THEN

   2527  0 000126   200011 235100                    LDA     RCCL,,AUTO
         0 000127   000131 600000 0                  TZE     s:2529

      749     2528    1              ALTRETURN;

   2528  0 000130   000000 702200 xent               TSX2  ! X66_AALT

      750     2529    1           RETURN;

   2529  0 000131   000000 702200 xent               TSX2  ! X66_ARET
      751     2530
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:112  
      752     2531    1   END VDG$COMPARE_PTRS_W_RANGE;
      753     2532        %EOD;

PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:113  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_PTRS_W_RANGE.
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:114  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @LOCATION_PTRS             4-0-0/w PTR         r     1 @RANGE
     5-0-0/w PTR         r     1 @WITHIN_RANGE              7-0-0/w PTR         r     1 END_KEY$
     6-0-0/w UBIN        r     1 INDX                      *0-0-0/w STRC(180)   r     1 LOCATION_PTRS
    *0-0-0/w STRC(648)   r     1 RANGE                     11-0-0/w SBIN        r     1 RCCL
    10-0-0/w PTR         r     1 START_KEY$                *0-0-0/w SBIN        r     1 WITHIN_RANGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 END$KEY                    0-0-0/w ASTR(9)     r     1 START$KEY
     0-0-0/w ASTR(9)     r     1 VD$TEXTC                   0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$COMPARE_PTRS_W_RANGE requires 90 words for executable code.
   Procedure VDG$COMPARE_PTRS_W_RANGE requires 10 words of local(AUTO) storage.
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:115  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:116  
          MINI XREF LISTING

CHECK_THE_PTR_ARRAY
      2480**LABEL    2482--EXIT     2513--EXIT     2520--EXIT
END$KEY.LENGTH#
      2383**DCL      2385--IMP-SIZ
END_KEY$
      2339**DCL      2375--IMP-PTR  2503<<ASSIGN   2503<<ASSIGN   2515>>IF       2515>>IF
INDX
      2338**DCL      2480<<DOINDEX  2481>>IF       2491>>IF       2491>>ASSIGN   2491>>ASSIGN   2503>>IF
      2503>>ASSIGN   2503>>ASSIGN   2507>>IF       2507>>IF       2507>>IF       2515>>IF       2515>>IF
LOCATION_PTRS
      2258**DCL        31--PROC
LOCATION_PTRS.COUNT#
      2262**DCL      2480>>DOINDEX
LOCATION_PTRS.KEY$
      2262**DCL      2507>>IF       2507>>IF       2507>>IF       2515>>IF       2515>>IF
RANGE
      2273**DCL        31--PROC
RANGE.ENDD.KEY.REP#
      2329**DCL      2503>>IF
RANGE.ENDD.KEY.V$
      2329**DCL      2503>>ASSIGN   2503--ASSIGN
RANGE.START.KEY
      2299**DCL      2481>>IF
RANGE.START.KEY.REP#
      2301**DCL      2491>>IF
RANGE.START.KEY.V$
      2301**DCL      2491>>ASSIGN   2491--ASSIGN
RCCL
      2341**DCL      2477<<ASSIGN   2512<<ASSIGN   2519<<ASSIGN   2526>>ASSIGN   2527>>IF
START$KEY.LENGTH#
      2360**DCL      2362--IMP-SIZ
START_KEY$
PL6.E3A0      #006=VDG$COMPARE_PTRS_W_RANGE File=VDG$UTILITY.:VDA5TSI            FRI 07/04/97 11:23 Page:117  
      2340**DCL      2352--IMP-PTR  2491<<ASSIGN   2491<<ASSIGN   2507>>IF       2507>>IF
VD$TEXTC.BYTES
      2408**DCL      2507>>IF       2507>>IF       2515>>IF       2515>>IF
VD$TEXTC.LENGTH#
      2406**DCL      2408--IMP-SIZ  2507>>IF       2507>>IF       2507>>IF       2515>>IF       2515>>IF
VD$TEXTC_REMOTE.LENGTH#
      2467**DCL      2469--IMP-SIZ  2491--ASSIGN   2503--ASSIGN
WITHIN_RANGE
      2334**DCL        31--PROC     2525--IF       2526<<ASSIGN

PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:118  
      754        1        /*T***********************************************************/
      755        2        /*T*                                                         */
      756        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      757        4        /*T*                                                         */
      758        5        /*T***********************************************************/
      759        6
      760        7        /*D* NAME: VDG$COMPARE_LOC_W_PTRS
      761        8            PARAMETERS:
      762        9                LOCATION - VD$LOCATION which is to be checked against a range.
      763       10                    .POSITION and .EOF are used in the comparison.
      764       11                START_PTRS - VD$LOCATION_PTRS specifying the start location
      765       12                    of the range.  .POSITION and .EOF are used in the
      766       13                    comparison.
      767       14                END_PTRS - VD$LOCATION_PTRS specifying the end location
      768       15                    of the range.  .POSITION and .EOF are used in the
      769       16                    comparison.
      770       17                WITHIN_RANGE - Uninitialized SBIN ALIGNED.
      771       18            INPUT:
      772       19                None.
      773       20            OUTPUT:
      774       21                WITHIN_RANGE set based on the comparison:
      775       22                    %RCCL_EQUAL if LOCATION is between START_PTRS and END_PTRS.
      776       23                    %RCCL_LESS if LOCATION is less than START_PTRS and END_PTRS.
      777       24                    %RCCL_GREATER if LOCATION is greater than START_PTRS and END_PTRS.
      778       25                The ALTRETURN is taken if LOCATION is outside the range.
      779       26            DESCRIPTION:
      780       27                Just a routine to avoid code duplication in a few
      781       28                modules.  Checks all the significant levels of a
      782       29                VD$LOCATION to see if they're within the range specified by
      783       30                START_PTRS and END_PTRS (which may have been filled
      784       31                in by VDG$LOCATION_TO_PTRS).
      785       32        */
      786       33
      787       34        VDG$COMPARE_LOC_W_PTRS: PROC (LOCATION, START_PTRS, END_PTRS,
      788       35                  WITHIN_RANGE) ALTRET;
      789       36
      790       37        %INCLUDE VD_MACROS_M;
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:119  
      791     2252
      792     2253        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
      793     2281        %VD$LOCATION_PTRS (NAME=START_PTRS, STCLASS=PARAM);
      794     2296        %VD$LOCATION_PTRS (NAME=END_PTRS, STCLASS=PARAM);
      795     2311    1   DCL WITHIN_RANGE SBIN ALIGNED PARAM;
      796     2312
      797     2313
      798     2314
      799     2315    1   DCL LOC_EQ_START BIT(1) ALIGNED;
      800     2316    1   DCL LOC_EQ_END BIT(1) ALIGNED;
      801     2317    1   DCL INDX SBIN;
      802     2318    1   DCL LOC_KEY$ PTR;
      803     2319    1   DCL RCCL SBIN;
      804     2320
      805     2321
      806     2322        %VD$TEXTC (NAME=LOC$KEY, STCLASS="BASED(LOC_KEY$)");
      807     2345        %VD$TEXTC;
      808     2368        %VD$TEXTC_REMOTE;
      809     2429
      810     2430
      811     2431
      812     2432    1           RCCL = %RCCL_EQUAL;
      813     2433
      814     2434    2           IF LOCATION.EOF THEN DO;
      815     2435    2              IF NOT END_PTRS.EOF THEN
      816     2436    2                 WITHIN_RANGE = %RCCL_GREATER;
      817     2437    2              END;
      818     2438
      819     2439    1           ELSE IF START_PTRS.EOF THEN
      820     2440    1                 RCCL = %RCCL_LESS;
      821     2441
      822     2442                /*
      823     2443                *   Now we know LOCATION and START_PTRS have keys.
      824     2444                *   Note, however, that END_PTRS may not have keys:  it
      825     2445                *       could be EOF.
      826     2446                */
      827     2447
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:120  
      828     2448    1           LOC_EQ_START = %TRUE;   /* Temporary assumption */
      829     2449    1           LOC_EQ_END = ~ END_PTRS.EOF;    /* Temp assumption */
      830     2450
      831     2451    1           INDX = 0;
      832     2452    2           DO WHILE RCCL = %RCCL_EQUAL AND INDX < START_PTRS.COUNT#
      833     2453    2             AND (END_PTRS.EOF OR (INDX < END_PTRS.COUNT#));
      834     2454                   %GETKEY (KEY=LOCATION.KEY, INDX=INDX, PTR=LOC_KEY$);
      835     2464    2              IF LOC$KEY.BYTES <
      836     2465    2                START_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      837     2466    2                 RCCL = %RCCL_LESS;       /* Not within range */
      838     2467    2              IF LOC$KEY.BYTES ~=
      839     2468    2                START_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      840     2469    2                 LOC_EQ_START = %FALSE;
      841     2470
      842     2471    3              IF NOT END_PTRS.EOF THEN DO;
      843     2472    3                 IF LOC$KEY.BYTES >
      844     2473    3                   END_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      845     2474    3                    RCCL = %RCCL_GREATER;       /* Not within range */
      846     2475    3                 IF LOC$KEY.BYTES ~=
      847     2476    3                   END_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      848     2477    3                    LOC_EQ_END = %FALSE;
      849     2478    3                 END;
      850     2479    2              INDX = INDX + 1;
      851     2480    2              END;
      852     2481
      853     2482                /*
      854     2483                *   Key-wise, LOCATION seems to be within range.
      855     2484                *   However, if LOCATION's keys match exactly all of
      856     2485                *       either START_PTRS or END_PTRS keys, then
      857     2486                *       we need to check the positions, too.
      858     2487                */
      859     2488
      860     2489    1           IF (LOC_EQ_START
      861     2490    1             AND LOCATION.POSITION# < START_PTRS.POSITION#) THEN
      862     2491    1              RCCL = %RCCL_LESS;
      863     2492    1           IF (LOC_EQ_END
      864     2493    1             AND LOCATION.POSITION# > END_PTRS.POSITION#) THEN
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:121  
      865     2494    1              RCCL = %RCCL_GREATER;      /* Not within range */
      866     2495
      867     2496    1           IF ADDR(WITHIN_RANGE) ~= ADDR(NIL) THEN
      868     2497    1              WITHIN_RANGE = RCCL;
      869     2498    1           IF RCCL ~= %RCCL_EQUAL THEN
      870     2499    1              ALTRETURN;
      871     2500    1           RETURN;
      872     2501
      873     2502    1   END VDG$COMPARE_LOC_W_PTRS;
      874     2503        %EOD;

PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:122  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_LOC_W_PTRS.

   Procedure VDG$COMPARE_LOC_W_PTRS requires 128 words for executable code.
   Procedure VDG$COMPARE_LOC_W_PTRS requires 12 words of local(AUTO) storage.

PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:123  

 Object Unit name= VDG$COMPARE_LOC_W_PTRS                     File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:43.56 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   128    200  VDG$COMPARE_LOC_W_PTRS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDG$COMPARE_LOC_W_PTRS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:124  


      754        1        /*T***********************************************************/
      755        2        /*T*                                                         */
      756        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      757        4        /*T*                                                         */
      758        5        /*T***********************************************************/
      759        6
      760        7        /*D* NAME: VDG$COMPARE_LOC_W_PTRS
      761        8            PARAMETERS:
      762        9                LOCATION - VD$LOCATION which is to be checked against a range.
      763       10                    .POSITION and .EOF are used in the comparison.
      764       11                START_PTRS - VD$LOCATION_PTRS specifying the start location
      765       12                    of the range.  .POSITION and .EOF are used in the
      766       13                    comparison.
      767       14                END_PTRS - VD$LOCATION_PTRS specifying the end location
      768       15                    of the range.  .POSITION and .EOF are used in the
      769       16                    comparison.
      770       17                WITHIN_RANGE - Uninitialized SBIN ALIGNED.
      771       18            INPUT:
      772       19                None.
      773       20            OUTPUT:
      774       21                WITHIN_RANGE set based on the comparison:
      775       22                    %RCCL_EQUAL if LOCATION is between START_PTRS and END_PTRS.
      776       23                    %RCCL_LESS if LOCATION is less than START_PTRS and END_PTRS.
      777       24                    %RCCL_GREATER if LOCATION is greater than START_PTRS and END_PTRS.
      778       25                The ALTRETURN is taken if LOCATION is outside the range.
      779       26            DESCRIPTION:
      780       27                Just a routine to avoid code duplication in a few
      781       28                modules.  Checks all the significant levels of a
      782       29                VD$LOCATION to see if they're within the range specified by
      783       30                START_PTRS and END_PTRS (which may have been filled
      784       31                in by VDG$LOCATION_TO_PTRS).
      785       32        */
      786       33
      787       34        VDG$COMPARE_LOC_W_PTRS: PROC (LOCATION, START_PTRS, END_PTRS,

     34  0 000000   000000 700200 xent  VDG$COMPARE* TSX0  ! X66_AUTO_4
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:125  
         0 000001   000014 000004                    ZERO    12,4

      788       35                  WITHIN_RANGE) ALTRET;
      789       36
      790       37        %INCLUDE VD_MACROS_M;
      791     2252
      792     2253        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
      793     2281        %VD$LOCATION_PTRS (NAME=START_PTRS, STCLASS=PARAM);
      794     2296        %VD$LOCATION_PTRS (NAME=END_PTRS, STCLASS=PARAM);
      795     2311    1   DCL WITHIN_RANGE SBIN ALIGNED PARAM;
      796     2312
      797     2313
      798     2314
      799     2315    1   DCL LOC_EQ_START BIT(1) ALIGNED;
      800     2316    1   DCL LOC_EQ_END BIT(1) ALIGNED;
      801     2317    1   DCL INDX SBIN;
      802     2318    1   DCL LOC_KEY$ PTR;
      803     2319    1   DCL RCCL SBIN;
      804     2320
      805     2321
      806     2322        %VD$TEXTC (NAME=LOC$KEY, STCLASS="BASED(LOC_KEY$)");
      807     2345        %VD$TEXTC;
      808     2368        %VD$TEXTC_REMOTE;
      809     2429
      810     2430
      811     2431
      812     2432    1           RCCL = %RCCL_EQUAL;

   2432  0 000002   200013 450100                    STZ     RCCL,,AUTO

      813     2433
      814     2434    2           IF LOCATION.EOF THEN DO;

   2434  0 000003   200003 470500                    LDP0    @LOCATION,,AUTO
         0 000004   000010 236100                    LDQ     8,,PR0
         0 000005   400000 316007                    CANQ    -131072,DL
         0 000006   000017 600000 0                  TZE     s:2439
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:126  

      815     2435    2              IF NOT END_PTRS.EOF THEN

   2435  0 000007   200005 471500                    LDP1    @END_PTRS,,AUTO
         0 000010   100000 236100                    LDQ     0,,PR1
         0 000011   400000 316007                    CANQ    -131072,DL
         0 000012   000025 601000 0                  TNZ     s:2448

      816     2436    2                 WITHIN_RANGE = %RCCL_GREATER;

   2436  0 000013   000001 235007                    LDA     1,DL
         0 000014   200006 473500                    LDP3    @WITHIN_RANGE,,AUTO
         0 000015   300000 755100                    STA     0,,PR3

      817     2437    2              END;

   2437  0 000016   000025 710000 0                  TRA     s:2448

      818     2438
      819     2439    1           ELSE IF START_PTRS.EOF THEN

   2439  0 000017   200004 471500                    LDP1    @START_PTRS,,AUTO
         0 000020   100000 236100                    LDQ     0,,PR1
         0 000021   400000 316007                    CANQ    -131072,DL
         0 000022   000025 600000 0                  TZE     s:2448

      820     2440    1                 RCCL = %RCCL_LESS;

   2440  0 000023   000001 335007                    LCA     1,DL
         0 000024   200013 755100                    STA     RCCL,,AUTO

      821     2441
      822     2442                /*
      823     2443                *   Now we know LOCATION and START_PTRS have keys.
      824     2444                *   Note, however, that END_PTRS may not have keys:  it
      825     2445                *       could be EOF.
      826     2446                */
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:127  
      827     2447
      828     2448    1           LOC_EQ_START = %TRUE;   /* Temporary assumption */

   2448  0 000025   400000 236003                    LDQ     -131072,DU
         0 000026   200007 756100                    STQ     LOC_EQ_START,,AUTO

      829     2449    1           LOC_EQ_END = ~ END_PTRS.EOF;    /* Temp assumption */

   2449  0 000027   200005 471500                    LDP1    @END_PTRS,,AUTO
         0 000030   100000 236100                    LDQ     0,,PR1
         0 000031   000022 736000                    QLS     18
         0 000032   400000 376003                    ANQ     -131072,DU
         0 000033   400000 676003                    ERQ     -131072,DU
         0 000034   200010 756100                    STQ     LOC_EQ_END,,AUTO

      830     2450
      831     2451    1           INDX = 0;

   2451  0 000035   200011 450100                    STZ     INDX,,AUTO

      832     2452    2           DO WHILE RCCL = %RCCL_EQUAL AND INDX < START_PTRS.COUNT#

   2452  0 000036   000127 710000 0                  TRA     s:2480

      833     2453    2             AND (END_PTRS.EOF OR (INDX < END_PTRS.COUNT#));
      834     2454                   %GETKEY (KEY=LOCATION.KEY, INDX=INDX, PTR=LOC_KEY$);

   2461  0 000037   200011 235100                    LDA     INDX,,AUTO
         0 000040   000001 735000                    ALS     1
         0 000041   200003 470500                    LDP0    @LOCATION,,AUTO
         0 000042   000000 720105                    LXL0    0,AL,PR0
         0 000043   000002 100003                    CMPX0   2,DU
         0 000044   000051 601000 0                  TNZ     s:2461+10

   2461  0 000045   000001 471505                    LDP1    1,AL,PR0
         0 000046   100002 633500                    EPPR3   2,,PR1
         0 000047   200012 453500                    STP3    LOC_KEY$,,AUTO
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:128  
         0 000050   000056 710000 0                  TRA     s:2464

   2461  0 000051   200011 236100                    LDQ     INDX,,AUTO
         0 000052   000023 736000                    QLS     19
         0 000053   000001 036003                    ADLQ    1,DU
         0 000054   200003 036100                    ADLQ    @LOCATION,,AUTO
         0 000055   200012 756100                    STQ     LOC_KEY$,,AUTO

      835     2464    2              IF LOC$KEY.BYTES <

   2464  0 000056   200012 471500                    LDP1    LOC_KEY$,,AUTO
         0 000057   100000 236100                    LDQ     0,,PR1
         0 000060   000033 772000                    QRL     27
         0 000061   200004 473500                    LDP3    @START_PTRS,,AUTO
         0 000062   200011 721100                    LXL1    INDX,,AUTO
         0 000063   300001 474511                    LDP4    1,X1,PR3
         0 000064   000000 622006                    EAX2    0,QL
         0 000065   400000 236100                    LDQ     0,,PR4
         0 000066   000033 772000                    QRL     27
         0 000067   000000 623006                    EAX3    0,QL
         0 000070   040140 106540                    CMPC    fill='040'O
         0 000071   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         0 000072   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         0 000073   000076 603000 0                  TRC     s:2467

      836     2465    2                START_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      837     2466    2                 RCCL = %RCCL_LESS;       /* Not within range */

   2466  0 000074   000001 335007                    LCA     1,DL
         0 000075   200013 755100                    STA     RCCL,,AUTO

      838     2467    2              IF LOC$KEY.BYTES ~=

   2467  0 000076   040140 106540                    CMPC    fill='040'O
         0 000077   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         0 000100   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         0 000101   000103 600000 0                  TZE     s:2471
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:129  

      839     2468    2                START_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      840     2469    2                 LOC_EQ_START = %FALSE;

   2469  0 000102   200007 450100                    STZ     LOC_EQ_START,,AUTO

      841     2470
      842     2471    3              IF NOT END_PTRS.EOF THEN DO;

   2471  0 000103   200005 475500                    LDP5    @END_PTRS,,AUTO
         0 000104   500000 236100                    LDQ     0,,PR5
         0 000105   400000 316007                    CANQ    -131072,DL
         0 000106   000126 601000 0                  TNZ     s:2479

      843     2472    3                 IF LOC$KEY.BYTES >

   2472  0 000107   500001 476511                    LDP6    1,X1,PR5
         0 000110   600000 236100                    LDQ     0,,PR6
         0 000111   000033 772000                    QRL     27
         0 000112   000000 620006                    EAX0    0,QL
         0 000113   040140 106540                    CMPC    fill='040'O
         0 000114   600000 200010                    ADSC9   0,,PR6                   cn=1,n=*X0
         0 000115   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         0 000116   000121 603000 0                  TRC     s:2475

      844     2473    3                   END_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      845     2474    3                    RCCL = %RCCL_GREATER;       /* Not within range */

   2474  0 000117   000001 235007                    LDA     1,DL
         0 000120   200013 755100                    STA     RCCL,,AUTO

      846     2475    3                 IF LOC$KEY.BYTES ~=

   2475  0 000121   040140 106540                    CMPC    fill='040'O
         0 000122   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         0 000123   600000 200010                    ADSC9   0,,PR6                   cn=1,n=*X0
         0 000124   000126 600000 0                  TZE     s:2479
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:130  

      847     2476    3                   END_PTRS.KEY$ (INDX) -> VD$TEXTC.BYTES THEN
      848     2477    3                    LOC_EQ_END = %FALSE;

   2477  0 000125   200010 450100                    STZ     LOC_EQ_END,,AUTO

      849     2478    3                 END;

      850     2479    2              INDX = INDX + 1;

   2479  0 000126   200011 054100                    AOS     INDX,,AUTO

      851     2480    2              END;

   2480  0 000127   200013 235100                    LDA     RCCL,,AUTO
         0 000130   000146 601000 0                  TNZ     s:2489
         0 000131   200004 471500                    LDP1    @START_PTRS,,AUTO
         0 000132   100000 236100                    LDQ     0,,PR1
         0 000133   000777 376007                    ANQ     511,DL
         0 000134   200011 116100                    CMPQ    INDX,,AUTO
         0 000135   000146 604400 0                  TMOZ    s:2489
         0 000136   200005 473500                    LDP3    @END_PTRS,,AUTO
         0 000137   300000 236100                    LDQ     0,,PR3
         0 000140   400000 316007                    CANQ    -131072,DL
         0 000141   000037 601000 0                  TNZ     s:2461
         0 000142   300000 236100                    LDQ     0,,PR3
         0 000143   000777 376007                    ANQ     511,DL
         0 000144   200011 116100                    CMPQ    INDX,,AUTO
         0 000145   000037 605400 0                  TPNZ    s:2461

      852     2481
      853     2482                /*
      854     2483                *   Key-wise, LOCATION seems to be within range.
      855     2484                *   However, if LOCATION's keys match exactly all of
      856     2485                *       either START_PTRS or END_PTRS keys, then
      857     2486                *       we need to check the positions, too.
      858     2487                */
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:131  
      859     2488
      860     2489    1           IF (LOC_EQ_START

   2489  0 000146   200007 234100                    SZN     LOC_EQ_START,,AUTO
         0 000147   000156 605000 0                  TPL     s:2492
         0 000150   000010 220100                    LDX0    8,,PR0
         0 000151   200004 471500                    LDP1    @START_PTRS,,AUTO
         0 000152   100000 100100                    CMPX0   0,,PR1
         0 000153   000156 605000 0                  TPL     s:2492

      861     2490    1             AND LOCATION.POSITION# < START_PTRS.POSITION#) THEN
      862     2491    1              RCCL = %RCCL_LESS;

   2491  0 000154   000001 336007                    LCQ     1,DL
         0 000155   200013 756100                    STQ     RCCL,,AUTO

      863     2492    1           IF (LOC_EQ_END

   2492  0 000156   200010 234100                    SZN     LOC_EQ_END,,AUTO
         0 000157   000166 605000 0                  TPL     s:2496
         0 000160   000010 220100                    LDX0    8,,PR0
         0 000161   200005 471500                    LDP1    @END_PTRS,,AUTO
         0 000162   100000 100100                    CMPX0   0,,PR1
         0 000163   000166 604400 0                  TMOZ    s:2496

      864     2493    1             AND LOCATION.POSITION# > END_PTRS.POSITION#) THEN
      865     2494    1              RCCL = %RCCL_GREATER;      /* Not within range */

   2494  0 000164   000001 235007                    LDA     1,DL
         0 000165   200013 755100                    STA     RCCL,,AUTO

      866     2495
      867     2496    1           IF ADDR(WITHIN_RANGE) ~= ADDR(NIL) THEN

   2496  0 000166   200006 236100                    LDQ     @WITHIN_RANGE,,AUTO
         0 000167   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000170   000174 600000 0                  TZE     s:2498
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:132  

      868     2497    1              WITHIN_RANGE = RCCL;

   2497  0 000171   200006 471500                    LDP1    @WITHIN_RANGE,,AUTO
         0 000172   200013 235100                    LDA     RCCL,,AUTO
         0 000173   100000 755100                    STA     0,,PR1

      869     2498    1           IF RCCL ~= %RCCL_EQUAL THEN

   2498  0 000174   200013 235100                    LDA     RCCL,,AUTO
         0 000175   000177 600000 0                  TZE     s:2500

      870     2499    1              ALTRETURN;

   2499  0 000176   000000 702200 xent               TSX2  ! X66_AALT

      871     2500    1           RETURN;

   2500  0 000177   000000 702200 xent               TSX2  ! X66_ARET
      872     2501
      873     2502    1   END VDG$COMPARE_LOC_W_PTRS;
      874     2503        %EOD;

PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:133  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$COMPARE_LOC_W_PTRS.
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:134  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @END_PTRS                  3-0-0/w PTR         r     1 @LOCATION
     4-0-0/w PTR         r     1 @START_PTRS                6-0-0/w PTR         r     1 @WITHIN_RANGE
    *0-0-0/w STRC(180)   r     1 END_PTRS                  11-0-0/w SBIN        r     1 INDX
    *0-0-0/w STRC(324)   r     1 LOCATION                  10-0-0/w BIT         r     1 LOC_EQ_END
     7-0-0/w BIT         r     1 LOC_EQ_START              12-0-0/w PTR         r     1 LOC_KEY$
    13-0-0/w SBIN        r     1 RCCL                      *0-0-0/w STRC(180)   r     1 START_PTRS
    *0-0-0/w SBIN        r     1 WITHIN_RANGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 LOC$KEY                    0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$COMPARE_LOC_W_PTRS requires 128 words for executable code.
   Procedure VDG$COMPARE_LOC_W_PTRS requires 12 words of local(AUTO) storage.
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:135  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:136  
          MINI XREF LISTING

END_PTRS
      2304**DCL        34--PROC
END_PTRS.COUNT#
      2308**DCL      2452>>DOWHILE
END_PTRS.EOF
      2308**DCL      2435>>IF       2449>>ASSIGN   2452>>DOWHILE  2471>>IF
END_PTRS.KEY$
      2308**DCL      2472>>IF       2472>>IF       2475>>IF       2475>>IF
END_PTRS.POSITION#
      2308**DCL      2492>>IF
INDX
      2317**DCL      2451<<ASSIGN   2452>>DOWHILE  2452>>DOWHILE  2461>>IF       2461>>ASSIGN   2461>>ASSIGN
      2464>>IF       2464>>IF       2467>>IF       2467>>IF       2472>>IF       2472>>IF       2475>>IF
      2475>>IF       2479<<ASSIGN   2479>>ASSIGN
LOC$KEY.BYTES
      2340**DCL      2464>>IF       2467>>IF       2472>>IF       2475>>IF
LOC$KEY.LENGTH#
      2338**DCL      2340--IMP-SIZ  2464>>IF       2467>>IF       2472>>IF       2475>>IF
LOCATION
      2261**DCL        34--PROC
LOCATION.EOF
      2279**DCL      2434>>IF
LOCATION.KEY.REP#
      2277**DCL      2461>>IF
LOCATION.KEY.V$
      2277**DCL      2461>>ASSIGN   2461--ASSIGN
LOCATION.POSITION#
      2279**DCL      2489>>IF       2492>>IF
LOC_EQ_END
      2316**DCL      2449<<ASSIGN   2477<<ASSIGN   2492>>IF
LOC_EQ_START
      2315**DCL      2448<<ASSIGN   2469<<ASSIGN   2489>>IF
PL6.E3A0      #007=VDG$COMPARE_LOC_W_PTRS File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:23 Page:137  
LOC_KEY$
      2318**DCL      2330--IMP-PTR  2461<<ASSIGN   2461<<ASSIGN   2464>>IF       2464>>IF       2467>>IF
      2467>>IF       2472>>IF       2472>>IF       2475>>IF       2475>>IF
RCCL
      2319**DCL      2432<<ASSIGN   2440<<ASSIGN   2452>>DOWHILE  2466<<ASSIGN   2474<<ASSIGN   2491<<ASSIGN
      2494<<ASSIGN   2497>>ASSIGN   2498>>IF
START_PTRS
      2289**DCL        34--PROC
START_PTRS.COUNT#
      2293**DCL      2452>>DOWHILE
START_PTRS.EOF
      2293**DCL      2439>>IF
START_PTRS.KEY$
      2293**DCL      2464>>IF       2464>>IF       2467>>IF       2467>>IF
START_PTRS.POSITION#
      2293**DCL      2489>>IF
VD$TEXTC.BYTES
      2363**DCL      2464>>IF       2467>>IF       2472>>IF       2475>>IF
VD$TEXTC.LENGTH#
      2361**DCL      2363--IMP-SIZ  2464>>IF       2467>>IF       2472>>IF       2475>>IF
VD$TEXTC_REMOTE.LENGTH#
      2422**DCL      2424--IMP-SIZ  2461--ASSIGN
WITHIN_RANGE
      2311**DCL        34--PROC     2436<<ASSIGN   2496--IF       2497<<ASSIGN

PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:138  
      875        1        /*T***********************************************************/
      876        2        /*T*                                                         */
      877        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      878        4        /*T*                                                         */
      879        5        /*T***********************************************************/
      880        6
      881        7        /*D*  NAME:  VDG$LOCATION_TO_PTRS
      882        8              PARAMETERS:
      883        9                  FROM_LOCATION - Typical VD$LOCATION.
      884       10                  VD$LOCATION_PTRS - Uninitialized VD$LOCATION_PTRS structure
      885       11                      which is to be filled in with stuff from the FROM_LOCATION.
      886       12              INPUT:
      887       13                  None.
      888       14              OUTPUT:
      889       15                  VD$LOCATION_PTRS is filled in.
      890       16              DESCRIPTION:
      891       17                  Just a routine to avoid code duplication in a few
      892       18                  modules.  Fills in a VD$LOCATION_PTRS structure with
      893       19                  all the significant levels of a VD$LOCATION by doing
      894       20                  a %GETKEY to ferret out the actual text.  A count at
      895       21                  the top of the VD$LOCATION_PTRS indicates how many
      896       22                  levels of pointers are contained within it.
      897       23        */
      898       24
      899       25        VDG$LOCATION_TO_PTRS: PROC ( FROM_LOCATION,
      900       26                  VD$LOCATION_PTRS )
      901       27                  ALTRET;
      902       28
      903       29          %INCLUDE VD_MACROS_M;
      904     2244
      905     2245                %VD$LOCATION ( NAME = FROM_LOCATION,
      906     2246                STCLASS = PARAM );
      907     2274                %VD$LOCATION_PTRS ( STCLASS = PARAM );
      908     2289
      909     2290    1   DCL PTR_ARRAY_INDEX UBIN;
      910     2291    1   DCL PARAMETER_KEY$ PTR;
      911     2292
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:139  
      912     2293          %VD$TEXTC_REMOTE;
      913     2354
      914     2355
      915     2356
      916     2357    1           VD$LOCATION_PTRS = %CLEAR;
      917     2358    1           VD$LOCATION_PTRS.POSITION# = FROM_LOCATION.POSITION#;
      918     2359    1           VD$LOCATION_PTRS.EOF = FROM_LOCATION.EOF;
      919     2360
      920     2361    1           IF FROM_LOCATION.EOF THEN
      921     2362    1              RETURN;
      922     2363
      923     2364    1   LOAD_THE_PTR_ARRAY:
      924     2365    2           DO PTR_ARRAY_INDEX = 0 TO %MX_LOCATION_LEVELS - 1;
      925     2366
      926     2367    2              IF FROM_LOCATION.KEY ( PTR_ARRAY_INDEX ) = %CLEAR
      927     2368    2              THEN
      928     2369    3              DO;
      929     2370    3                 VD$LOCATION_PTRS.COUNT# = PTR_ARRAY_INDEX;
      930     2371    3                 RETURN;
      931     2372    3                 END;
      932     2373
      933     2374                   %GETKEY ( KEY = "FROM_LOCATION.KEY",
      934     2375                   INDX = PTR_ARRAY_INDEX,
      935     2376                   PTR = PARAMETER_KEY$ );
      936     2386
      937     2387    2              VD$LOCATION_PTRS.KEY$ ( PTR_ARRAY_INDEX ) =
      938     2388    2                PARAMETER_KEY$;
      939     2389
      940     2390    2              END LOAD_THE_PTR_ARRAY;
      941     2391
      942     2392    1           VD$LOCATION_PTRS.COUNT# = %MX_LOCATION_LEVELS - 1;
      943     2393
      944     2394    1           RETURN;
      945     2395
      946     2396    1   END VDG$LOCATION_TO_PTRS;
      947     2397        %EOD;

PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:140  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$LOCATION_TO_PTRS.

   Procedure VDG$LOCATION_TO_PTRS requires 58 words for executable code.
   Procedure VDG$LOCATION_TO_PTRS requires 8 words of local(AUTO) storage.

PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:141  

 Object Unit name= VDG$LOCATION_TO_PTRS                       File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:50.08 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    58     72  VDG$LOCATION_TO_PTRS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  VDG$LOCATION_TO_PTRS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:142  


      875        1        /*T***********************************************************/
      876        2        /*T*                                                         */
      877        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      878        4        /*T*                                                         */
      879        5        /*T***********************************************************/
      880        6
      881        7        /*D*  NAME:  VDG$LOCATION_TO_PTRS
      882        8              PARAMETERS:
      883        9                  FROM_LOCATION - Typical VD$LOCATION.
      884       10                  VD$LOCATION_PTRS - Uninitialized VD$LOCATION_PTRS structure
      885       11                      which is to be filled in with stuff from the FROM_LOCATION.
      886       12              INPUT:
      887       13                  None.
      888       14              OUTPUT:
      889       15                  VD$LOCATION_PTRS is filled in.
      890       16              DESCRIPTION:
      891       17                  Just a routine to avoid code duplication in a few
      892       18                  modules.  Fills in a VD$LOCATION_PTRS structure with
      893       19                  all the significant levels of a VD$LOCATION by doing
      894       20                  a %GETKEY to ferret out the actual text.  A count at
      895       21                  the top of the VD$LOCATION_PTRS indicates how many
      896       22                  levels of pointers are contained within it.
      897       23        */
      898       24
      899       25        VDG$LOCATION_TO_PTRS: PROC ( FROM_LOCATION,

     25  0 000000   000000 700200 xent  VDG$LOCATIO* TSX0  ! X66_AUTO_2
         0 000001   000010 000002                    ZERO    8,2

      900       26                  VD$LOCATION_PTRS )
      901       27                  ALTRET;
      902       28
      903       29          %INCLUDE VD_MACROS_M;
      904     2244
      905     2245                %VD$LOCATION ( NAME = FROM_LOCATION,
      906     2246                STCLASS = PARAM );
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:143  
      907     2274                %VD$LOCATION_PTRS ( STCLASS = PARAM );
      908     2289
      909     2290    1   DCL PTR_ARRAY_INDEX UBIN;
      910     2291    1   DCL PARAMETER_KEY$ PTR;
      911     2292
      912     2293          %VD$TEXTC_REMOTE;
      913     2354
      914     2355
      915     2356
      916     2357    1           VD$LOCATION_PTRS = %CLEAR;

   2357  0 000002   200004 470500                    LDP0    @VD$LOCATION_PTRS,,AUTO
         0 000003   000100 100400                    MLR     fill='000'O
         0 000004   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000005   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

      917     2358    1           VD$LOCATION_PTRS.POSITION# = FROM_LOCATION.POSITION#;

   2358  0 000006   200003 471500                    LDP1    @FROM_LOCATION,,AUTO
         0 000007   100010 220100                    LDX0    8,,PR1
         0 000010   000000 740100                    STX0    0,,PR0

      918     2359    1           VD$LOCATION_PTRS.EOF = FROM_LOCATION.EOF;

   2359  0 000011   100010 236100                    LDQ     8,,PR1
         0 000012   000000 676100                    ERQ     0,,PR0
         0 000013   400000 376007                    ANQ     -131072,DL
         0 000014   000000 656100                    ERSQ    0,,PR0

      919     2360
      920     2361    1           IF FROM_LOCATION.EOF THEN

   2361  0 000015   100010 236100                    LDQ     8,,PR1
         0 000016   400000 316007                    CANQ    -131072,DL
         0 000017   000021 600000 0                  TZE     LOAD_THE_PTR_ARRAY

      921     2362    1              RETURN;
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:144  

   2362  0 000020   000000 702200 xent               TSX2  ! X66_ARET

      922     2363
      923     2364    1   LOAD_THE_PTR_ARRAY:
      924     2365    2           DO PTR_ARRAY_INDEX = 0 TO %MX_LOCATION_LEVELS - 1;

   2365  0 000021   200005 450100       LOAD_THE_PT* STZ     PTR_ARRAY_INDEX,,AUTO
         0 000022   000063 710000 0                  TRA     s:2390+3

      925     2366
      926     2367    2              IF FROM_LOCATION.KEY ( PTR_ARRAY_INDEX ) = %CLEAR

   2367  0 000023   200005 235100                    LDA     PTR_ARRAY_INDEX,,AUTO
         0 000024   000003 735000                    ALS     3
         0 000025   200003 470500                    LDP0    @FROM_LOCATION,,AUTO
         0 000026   000000 106505                    CMPC    fill='000'O
         0 000027   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000030   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000031   000036 601000 0                  TNZ     s:2383

      927     2368    2              THEN
      928     2369    3              DO;

      929     2370    3                 VD$LOCATION_PTRS.COUNT# = PTR_ARRAY_INDEX;

   2370  0 000032   200004 471500                    LDP1    @VD$LOCATION_PTRS,,AUTO
         0 000033   200005 236100                    LDQ     PTR_ARRAY_INDEX,,AUTO
         0 000034   100000 552104                    STBQ    0,'04'O,PR1

      930     2371    3                 RETURN;

   2371  0 000035   000000 702200 xent               TSX2  ! X66_ARET

      931     2372    3                 END;
      932     2373
      933     2374                   %GETKEY ( KEY = "FROM_LOCATION.KEY",
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:145  
      934     2375                   INDX = PTR_ARRAY_INDEX,
      935     2376                   PTR = PARAMETER_KEY$ );

   2383  0 000036   200005 236100                    LDQ     PTR_ARRAY_INDEX,,AUTO
         0 000037   000001 736000                    QLS     1
         0 000040   000000 720106                    LXL0    0,QL,PR0
         0 000041   000002 100003                    CMPX0   2,DU
         0 000042   000047 601000 0                  TNZ     s:2383+9

   2383  0 000043   000001 471506                    LDP1    1,QL,PR0
         0 000044   100002 633500                    EPPR3   2,,PR1
         0 000045   200006 453500                    STP3    PARAMETER_KEY$,,AUTO
         0 000046   000054 710000 0                  TRA     s:2387

   2383  0 000047   200005 236100                    LDQ     PTR_ARRAY_INDEX,,AUTO
         0 000050   000023 736000                    QLS     19
         0 000051   000001 036003                    ADLQ    1,DU
         0 000052   200003 036100                    ADLQ    @FROM_LOCATION,,AUTO
         0 000053   200006 756100                    STQ     PARAMETER_KEY$,,AUTO

      936     2386
      937     2387    2              VD$LOCATION_PTRS.KEY$ ( PTR_ARRAY_INDEX ) =

   2387  0 000054   200006 236100                    LDQ     PARAMETER_KEY$,,AUTO
         0 000055   200004 471500                    LDP1    @VD$LOCATION_PTRS,,AUTO
         0 000056   200005 720100                    LXL0    PTR_ARRAY_INDEX,,AUTO
         0 000057   100001 756110                    STQ     1,X0,PR1

      938     2388    2                PARAMETER_KEY$;
      939     2389
      940     2390    2              END LOAD_THE_PTR_ARRAY;

   2390  0 000060   200005 235100                    LDA     PTR_ARRAY_INDEX,,AUTO
         0 000061   000001 035007                    ADLA    1,DL
         0 000062   200005 755100                    STA     PTR_ARRAY_INDEX,,AUTO
         0 000063   200005 235100                    LDA     PTR_ARRAY_INDEX,,AUTO
         0 000064   000004 115007                    CMPA    4,DL
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:146  
         0 000065   000023 602000 0                  TNC     s:2367

      941     2391
      942     2392    1           VD$LOCATION_PTRS.COUNT# = %MX_LOCATION_LEVELS - 1;

   2392  0 000066   200004 470500                    LDP0    @VD$LOCATION_PTRS,,AUTO
         0 000067   000003 236007                    LDQ     3,DL
         0 000070   000000 552104                    STBQ    0,'04'O,PR0

      943     2393
      944     2394    1           RETURN;

   2394  0 000071   000000 702200 xent               TSX2  ! X66_ARET
      945     2395
      946     2396    1   END VDG$LOCATION_TO_PTRS;
      947     2397        %EOD;

PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:147  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$LOCATION_TO_PTRS.
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:148  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FROM_LOCATION             4-0-0/w PTR         r     1 @VD$LOCATION_PTRS
    *0-0-0/w STRC(324)   r     1 FROM_LOCATION              6-0-0/w PTR         r     1 PARAMETER_KEY$
     5-0-0/w UBIN        r     1 PTR_ARRAY_INDEX           *0-0-0/w STRC(180)   r     1 VD$LOCATION_PTRS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$LOCATION_TO_PTRS requires 58 words for executable code.
   Procedure VDG$LOCATION_TO_PTRS requires 8 words of local(AUTO) storage.
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:149  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=VDG$LOCATION_TO_PTRS File=VDG$UTILITY.:VDA5TSI                FRI 07/04/97 11:23 Page:150  
          MINI XREF LISTING

FROM_LOCATION
      2254**DCL        25--PROC
FROM_LOCATION.EOF
      2272**DCL      2359>>ASSIGN   2361>>IF
FROM_LOCATION.KEY
      2268**DCL      2367>>IF
FROM_LOCATION.KEY.REP#
      2270**DCL      2383>>IF
FROM_LOCATION.KEY.V$
      2270**DCL      2383>>ASSIGN   2383--ASSIGN
FROM_LOCATION.POSITION#
      2272**DCL      2358>>ASSIGN
PARAMETER_KEY$
      2291**DCL      2383<<ASSIGN   2383<<ASSIGN   2387>>ASSIGN
PTR_ARRAY_INDEX
      2290**DCL      2365<<DOINDEX  2367>>IF       2370>>ASSIGN   2383>>IF       2383>>ASSIGN   2383>>ASSIGN
      2387>>ASSIGN
VD$LOCATION_PTRS
      2282**DCL        25--PROC     2357<<ASSIGN
VD$LOCATION_PTRS.COUNT#
      2286**DCL      2370<<ASSIGN   2392<<ASSIGN
VD$LOCATION_PTRS.EOF
      2286**DCL      2359<<ASSIGN
VD$LOCATION_PTRS.KEY$
      2286**DCL      2387<<ASSIGN
VD$LOCATION_PTRS.POSITION#
      2286**DCL      2358<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      2347**DCL      2349--IMP-SIZ  2383--ASSIGN

PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:151  
      948        1        /*T***********************************************************/
      949        2        /*T*                                                         */
      950        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      951        4        /*T*                                                         */
      952        5        /*T***********************************************************/
      953        6
      954        7        /*D* NAME:  VDG$BUILD_NEW_REC
      955        8            PARAMETERS:
      956        9                TYPE_CODE - is the code to determine whether one or two records
      957       10                            are being passed to VDG$BUILD_NEW_REC. Refer to the
      958       11                            BNR_xxx EQUs for the values of the codes.
      959       12
      960       13                REC1 - is the first VD$NODE_DESC structure.
      961       14                S_POS - is the Start position of the area to be removed.
      962       15                REC2 - is the second VD$NODE_DESC structure.
      963       16                E_POS - is the end position of the area to be removed.
      964       17            INPUT:
      965       18                None.
      966       19            OUTPUT:
      967       20                REC1 - will contain the new record created.
      968       21            DESCRIPTION:
      969       22                Determine what type of operation to be done, i.e. Start record
      970       23                only, End record only, or both records. By using the SIZE#
      971       24                in the VD$BUFFER structure determine whether new dynamic area needs
      972       25                to be allocated. Create the new area, and set REC1 to describe
      973       26                the new record.
      974       27        */
      975       28
      976       29        VDG$BUILD_NEW_REC: PROC (TYPE_CODE, REC1, S_POS, REC2, E_POS) ALTRET;
      977       30
      978       31
      979       32        %INCLUDE VD_MACROS_M;
      980     2247        %INCLUDE VD_PERR_C;
      981     2395
      982     2396
      983     2397    1   DCL TYPE_CODE SBIN;
      984     2398        %VD$NODE_DESC (NAME=REC1, STCLASS=PARAM);
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:152  
      985     2440    1   DCL S_POS SBIN;
      986     2441        %VD$NODE_DESC (NAME=REC2, STCLASS=PARAM);
      987     2483    1   DCL E_POS SBIN;
      988     2484
      989     2485
      990     2486    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      991     2487    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      992     2488    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      993     2489    1   DCL VDG$ESCREECH        ENTRY (3);
      994     2490
      995     2491
      996     2492
      997     2493    1   DCL NEW_BUF$ PTR;
      998     2494    1   DCL NW_NEW_BUF SBIN;
      999     2495    1   DCL NB_NEW_REC_DATA SBIN;
     1000     2496    1   DCL NB_REC1_REC_DATA SBIN;
     1001     2497    1   DCL NB_REC2_REC_DATA SBIN;
     1002     2498    1   DCL POS SBIN;
     1003     2499
     1004     2500
     1005     2501        %VD$BUFFER (NAME=REC1$DATA, STCLASS="BASED(REC1.DATA$)");
     1006     2559        %VD$BUFFER (NAME=REC2$DATA, STCLASS="BASED(REC2.DATA$)");
     1007     2617        %VD$BUFFER (NAME=NEW$BUF, STCLASS="BASED(NEW_BUF$)");
     1008     2675        %VD$BUFFER_HEADER;
     1009     2711        %VD$TEXTC_REMOTE;
     1010     2772
     1011     2773
     1012     2774
     1013     2775    1           NEW_BUF$ = ADDR(NIL);
     1014     2776    1           NB_REC1_REC_DATA = 0;
     1015     2777    1           NB_REC2_REC_DATA = 0;
     1016     2778    1           IF REC1.DATA$ ~= ADDR(NIL) THEN
     1017     2779    1              NB_REC1_REC_DATA = REC1$DATA.LENGTH#;
     1018     2780    1           IF REC2.DATA$ ~= ADDR(NIL) THEN
     1019     2781    1              NB_REC2_REC_DATA = REC2$DATA.LENGTH#;
     1020     2782
     1021     2783    2           DO CASE (TYPE_CODE) ;
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:153  
     1022     2784
     1023     2785    2            CASE (%BNR_ON_1_REC) ;
     1024     2786    2              NB_NEW_REC_DATA = NB_REC1_REC_DATA - (E_POS - S_POS);
     1025     2787
     1026     2788    2            CASE (%BNR_ON_2_RECS) ;
     1027     2789    2              NB_NEW_REC_DATA = NB_REC2_REC_DATA - E_POS + S_POS;
     1028     2790
     1029     2791    2            END;
     1030     2792
     1031     2793    1           NW_NEW_BUF = (LENGTHC(VD$BUFFER_HEADER) + NB_NEW_REC_DATA +
     1032     2794    1             %NB_PER_WORD-1) / %NB_PER_WORD;
     1033     2795
     1034     2796    1           NEW_BUF$ = ADDR(NIL);
     1035     2797    1           IF REC1.DATA$ ~= ADDR(NIL) THEN
     1036     2798    1              IF NW_NEW_BUF <= REC1$DATA.OBJECT.SIZE#
     1037     2799    1                AND TYPE_CODE ~= %BNR_ON_1_REC THEN
     1038     2800    1                 NEW_BUF$ = REC1.DATA$;
     1039     2801
     1040     2802    2           IF NEW_BUF$ = ADDR(NIL) THEN DO;
     1041     2803    2              CALL VDG$OALLOC (%CLS_BUFFER, NEW_BUF$, NW_NEW_BUF)
     1042     2804    2                ALTRET (OALLOC_FAILED);
     1043     2805    2              END;
     1044     2806
     1045     2807    2           IF NW_NEW_BUF > 0 THEN DO;
     1046     2808    2   TYPE_CODE_CASES:
     1047     2809    3              DO CASE (TYPE_CODE);
     1048     2810
     1049     2811    3               CASE (%BNR_ON_2_RECS);
     1050     2812    3                 POS = 0;
     1051     2813    3                 NEW$BUF.LENGTH# = NB_NEW_REC_DATA;
     1052     2814    4                 IF NB_REC1_REC_DATA > 0 THEN DO;
     1053     2815    4                    NEW$BUF.BYTES = SUBSTR(REC1$DATA.BYTES, 0, S_POS);
     1054     2816    4                    POS = S_POS;
     1055     2817    4                    END;
     1056     2818    4                 IF NB_REC2_REC_DATA > 0 THEN DO;
     1057     2819    4                    CALL INSERT (NEW$BUF.BYTES, POS, ,
     1058     2820    4                      SUBSTR(REC2$DATA.BYTES, E_POS))
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:154  
     1059     2821    5                    WHENALTRETURN DO;
     1060     2822    5                       CALL VDG$ESCREECH;
     1061     2823    5                       END;
     1062     2824    4                    END;
     1063     2825
     1064     2826    3               CASE (%BNR_ON_1_REC);
     1065     2827    3                 NEW$BUF.BYTES = SUBSTR(REC1$DATA.BYTES, 0, S_POS);
     1066     2828    3                 CALL INSERT (NEW$BUF.BYTES, S_POS, ,
     1067     2829    3                   SUBSTR(REC1$DATA.BYTES, E_POS));
     1068     2830    3                 NEW$BUF.LENGTH# = S_POS + (REC1$DATA.LENGTH# - E_POS);
     1069     2831
     1070     2832    3               END TYPE_CODE_CASES;
     1071     2833    2              END;
     1072     2834
     1073     2835    2           IF NEW_BUF$ ~= REC1.DATA$ THEN DO;
     1074     2836                   /* Free the old REC1 data buffer */
     1075     2837    3              IF REC1.DATA$ ~= ADDR(NIL) THEN DO;
     1076     2838    3                 CALL VDG$OFREE (REC1$DATA)
     1077     2839    3                   ALTRET (OFREE_FAILED);
     1078     2840    3                 END;
     1079     2841    2              REC1.DATA$ = NEW_BUF$;
     1080     2842    2              END;
     1081     2843
     1082     2844    2           IF REC1.KEY = %CLEAR THEN DO;
     1083     2845                   %COPYKEY (FKEY=REC2.KEY, TKEY=REC1.KEY);
     1084     2861    2              END;
     1085     2862    1           IF ((TYPE_CODE = %BNR_ON_2_RECS) AND (REC2.DATA$ ~= ADDR(NIL))) THEN
     1086     2863    1              REC1.EOR = REC2.EOR;
     1087     2864
     1088     2865    2           IF REC2.DATA$ ~= ADDR(NIL) THEN DO;
     1089     2866    2              CALL VDG$OFREE (REC2$DATA)
     1090     2867    2                ALTRET (OFREE_FAILED);
     1091     2868    2              REC2.DATA$ = ADDR(NIL);
     1092     2869    2              END;
     1093     2870
     1094     2871    1           RETURN;
     1095     2872
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:155  
     1096     2873    1   OALLOC_FAILED: ;
     1097     2874    1   OFREE_FAILED: ;
     1098     2875    1   BUILD_NEW_REC_ALTRET: ;
     1099     2876    1           ALTRETURN;
     1100     2877
     1101     2878
     1102     2879    1   END VDG$BUILD_NEW_REC;
     1103     2880        %EOD;

PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:156  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$BUILD_NEW_REC.

   Procedure VDG$BUILD_NEW_REC requires 248 words for executable code.
   Procedure VDG$BUILD_NEW_REC requires 18 words of local(AUTO) storage.

PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:157  

 Object Unit name= VDG$BUILD_NEW_REC                          File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:23:55.00 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   248    370  VDG$BUILD_NEW_REC
    1  RoData even  none     1      1  VDG$BUILD_NEW_REC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        5  VDG$BUILD_NEW_REC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:158  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:159  


      948        1        /*T***********************************************************/
      949        2        /*T*                                                         */
      950        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      951        4        /*T*                                                         */
      952        5        /*T***********************************************************/
      953        6
      954        7        /*D* NAME:  VDG$BUILD_NEW_REC
      955        8            PARAMETERS:
      956        9                TYPE_CODE - is the code to determine whether one or two records
      957       10                            are being passed to VDG$BUILD_NEW_REC. Refer to the
      958       11                            BNR_xxx EQUs for the values of the codes.
      959       12
      960       13                REC1 - is the first VD$NODE_DESC structure.
      961       14                S_POS - is the Start position of the area to be removed.
      962       15                REC2 - is the second VD$NODE_DESC structure.
      963       16                E_POS - is the end position of the area to be removed.
      964       17            INPUT:
      965       18                None.
      966       19            OUTPUT:
      967       20                REC1 - will contain the new record created.
      968       21            DESCRIPTION:
      969       22                Determine what type of operation to be done, i.e. Start record
      970       23                only, End record only, or both records. By using the SIZE#
      971       24                in the VD$BUFFER structure determine whether new dynamic area needs
      972       25                to be allocated. Create the new area, and set REC1 to describe
      973       26                the new record.
      974       27        */
      975       28
      976       29        VDG$BUILD_NEW_REC: PROC (TYPE_CODE, REC1, S_POS, REC2, E_POS) ALTRET;

     29  0 000000   000000 700200 xent  VDG$BUILD_N* TSX0  ! X66_AUTO_5
         0 000001   000022 000005                    ZERO    18,5

      977       30
      978       31
      979       32        %INCLUDE VD_MACROS_M;
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:160  
      980     2247        %INCLUDE VD_PERR_C;
      981     2395
      982     2396
      983     2397    1   DCL TYPE_CODE SBIN;
      984     2398        %VD$NODE_DESC (NAME=REC1, STCLASS=PARAM);
      985     2440    1   DCL S_POS SBIN;
      986     2441        %VD$NODE_DESC (NAME=REC2, STCLASS=PARAM);
      987     2483    1   DCL E_POS SBIN;
      988     2484
      989     2485
      990     2486    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      991     2487    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      992     2488    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      993     2489    1   DCL VDG$ESCREECH        ENTRY (3);
      994     2490
      995     2491
      996     2492
      997     2493    1   DCL NEW_BUF$ PTR;
      998     2494    1   DCL NW_NEW_BUF SBIN;
      999     2495    1   DCL NB_NEW_REC_DATA SBIN;
     1000     2496    1   DCL NB_REC1_REC_DATA SBIN;
     1001     2497    1   DCL NB_REC2_REC_DATA SBIN;
     1002     2498    1   DCL POS SBIN;
     1003     2499
     1004     2500
     1005     2501        %VD$BUFFER (NAME=REC1$DATA, STCLASS="BASED(REC1.DATA$)");
     1006     2559        %VD$BUFFER (NAME=REC2$DATA, STCLASS="BASED(REC2.DATA$)");
     1007     2617        %VD$BUFFER (NAME=NEW$BUF, STCLASS="BASED(NEW_BUF$)");
     1008     2675        %VD$BUFFER_HEADER;
     1009     2711        %VD$TEXTC_REMOTE;
     1010     2772
     1011     2773
     1012     2774
     1013     2775    1           NEW_BUF$ = ADDR(NIL);

   2775  0 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000003   200010 756100                    STQ     NEW_BUF$,,AUTO
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:161  

     1014     2776    1           NB_REC1_REC_DATA = 0;

   2776  0 000004   200013 450100                    STZ     NB_REC1_REC_DATA,,AUTO

     1015     2777    1           NB_REC2_REC_DATA = 0;

   2777  0 000005   200014 450100                    STZ     NB_REC2_REC_DATA,,AUTO

     1016     2778    1           IF REC1.DATA$ ~= ADDR(NIL) THEN

   2778  0 000006   200004 470500                    LDP0    @REC1,,AUTO
         0 000007   000004 236100                    LDQ     4,,PR0
         0 000010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000011   000016 600000 0                  TZE     s:2780

     1017     2779    1              NB_REC1_REC_DATA = REC1$DATA.LENGTH#;

   2779  0 000012   000004 471500                    LDP1    4,,PR0
         0 000013   100002 236100                    LDQ     2,,PR1
         0 000014   000022 732000                    QRS     18
         0 000015   200013 756100                    STQ     NB_REC1_REC_DATA,,AUTO

     1018     2780    1           IF REC2.DATA$ ~= ADDR(NIL) THEN

   2780  0 000016   200006 471500                    LDP1    @REC2,,AUTO
         0 000017   100004 236100                    LDQ     4,,PR1
         0 000020   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000021   000026 600000 0                  TZE     s:2783

     1019     2781    1              NB_REC2_REC_DATA = REC2$DATA.LENGTH#;

   2781  0 000022   100004 473500                    LDP3    4,,PR1
         0 000023   300002 236100                    LDQ     2,,PR3
         0 000024   000022 732000                    QRS     18
         0 000025   200014 756100                    STQ     NB_REC2_REC_DATA,,AUTO

PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:162  
     1020     2782
     1021     2783    2           DO CASE (TYPE_CODE) ;

   2783  0 000026   200003 473500                    LDP3    @TYPE_CODE,,AUTO
         0 000027   300000 235100                    LDA     0,,PR3
         0 000030   000003 115007                    CMPA    3,DL
         0 000031   000033 602005 0                  TNC     s:2783+5,AL
         0 000032   000055 710000 0                  TRA     s:2793
         0 000033   000055 710000 0                  TRA     s:2793
         0 000034   000036 710000 0                  TRA     s:2786
         0 000035   000047 710000 0                  TRA     s:2789

     1022     2784
     1023     2785    2            CASE (%BNR_ON_1_REC) ;

     1024     2786    2              NB_NEW_REC_DATA = NB_REC1_REC_DATA - (E_POS - S_POS);

   2786  0 000036   200005 474500                    LDP4    @S_POS,,AUTO
         0 000037   200007 475500                    LDP5    @E_POS,,AUTO
         0 000040   500000 236100                    LDQ     0,,PR5
         0 000041   400000 136100                    SBLQ    0,,PR4
         0 000042   200016 756100                    STQ     POS+1,,AUTO
         0 000043   200013 236100                    LDQ     NB_REC1_REC_DATA,,AUTO
         0 000044   200016 136100                    SBLQ    POS+1,,AUTO
         0 000045   200012 756100                    STQ     NB_NEW_REC_DATA,,AUTO
         0 000046   000055 710000 0                  TRA     s:2793

     1025     2787
     1026     2788    2            CASE (%BNR_ON_2_RECS) ;

     1027     2789    2              NB_NEW_REC_DATA = NB_REC2_REC_DATA - E_POS + S_POS;

   2789  0 000047   200007 474500                    LDP4    @E_POS,,AUTO
         0 000050   200014 236100                    LDQ     NB_REC2_REC_DATA,,AUTO
         0 000051   400000 136100                    SBLQ    0,,PR4
         0 000052   200005 475500                    LDP5    @S_POS,,AUTO
         0 000053   500000 036100                    ADLQ    0,,PR5
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:163  
         0 000054   200012 756100                    STQ     NB_NEW_REC_DATA,,AUTO

     1028     2790
     1029     2791    2            END;

     1030     2792
     1031     2793    1           NW_NEW_BUF = (LENGTHC(VD$BUFFER_HEADER) + NB_NEW_REC_DATA +

   2793  0 000055   200012 236100                    LDQ     NB_NEW_REC_DATA,,AUTO
         0 000056   000015 036007                    ADLQ    13,DL
         0 000057   000004 506007                    DIV     4,DL
         0 000060   200011 756100                    STQ     NW_NEW_BUF,,AUTO

     1032     2794    1             %NB_PER_WORD-1) / %NB_PER_WORD;
     1033     2795
     1034     2796    1           NEW_BUF$ = ADDR(NIL);

   2796  0 000061   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000062   200010 756100                    STQ     NEW_BUF$,,AUTO

     1035     2797    1           IF REC1.DATA$ ~= ADDR(NIL) THEN

   2797  0 000063   000004 236100                    LDQ     4,,PR0
         0 000064   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000065   000101 600000 0                  TZE     s:2802

     1036     2798    1              IF NW_NEW_BUF <= REC1$DATA.OBJECT.SIZE#

   2798  0 000066   000004 474500                    LDP4    4,,PR0
         0 000067   400000 236100                    LDQ     0,,PR4
         0 000070   000022 736000                    QLS     18
         0 000071   000022 732000                    QRS     18
         0 000072   200011 116100                    CMPQ    NW_NEW_BUF,,AUTO
         0 000073   000101 604000 0                  TMI     s:2802
         0 000074   300000 235100                    LDA     0,,PR3
         0 000075   000001 115007                    CMPA    1,DL
         0 000076   000101 600000 0                  TZE     s:2802
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:164  

     1037     2799    1                AND TYPE_CODE ~= %BNR_ON_1_REC THEN
     1038     2800    1                 NEW_BUF$ = REC1.DATA$;

   2800  0 000077   000004 236100                    LDQ     4,,PR0
         0 000100   200010 756100                    STQ     NEW_BUF$,,AUTO

     1039     2801
     1040     2802    2           IF NEW_BUF$ = ADDR(NIL) THEN DO;

   2802  0 000101   200010 236100                    LDQ     NEW_BUF$,,AUTO
         0 000102   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000103   000116 601000 0                  TNZ     s:2807

     1041     2803    2              CALL VDG$OALLOC (%CLS_BUFFER, NEW_BUF$, NW_NEW_BUF)

   2803  0 000104   200011 634500                    EPPR4   NW_NEW_BUF,,AUTO
         0 000105   200020 454500                    STP4    POS+3,,AUTO
         0 000106   200010 635500                    EPPR5   NEW_BUF$,,AUTO
         0 000107   200017 455500                    STP5    POS+2,,AUTO
         0 000110   000000 236000 1                  LDQ     0
         0 000111   200016 756100                    STQ     POS+1,,AUTO
         0 000112   200016 630500                    EPPR0   POS+1,,AUTO
         0 000113   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000114   000000 701000 xent               TSX1    VDG$OALLOC
         0 000115   000367 702000 0                  TSX2    OALLOC_FAILED

     1042     2804    2                ALTRET (OALLOC_FAILED);
     1043     2805    2              END;

     1044     2806
     1045     2807    2           IF NW_NEW_BUF > 0 THEN DO;

   2807  0 000116   200011 235100                    LDA     NW_NEW_BUF,,AUTO
         0 000117   000266 604400 0                  TMOZ    s:2835

     1046     2808    2   TYPE_CODE_CASES:
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:165  
     1047     2809    3              DO CASE (TYPE_CODE);

   2809  0 000120   200003 470500       TYPE_CODE_C* LDP0    @TYPE_CODE,,AUTO
         0 000121   000000 235100                    LDA     0,,PR0
         0 000122   000003 115007                    CMPA    3,DL
         0 000123   000125 602005 0                  TNC     TYPE_CODE_CASES+5,AL
         0 000124   000266 710000 0                  TRA     s:2835
         0 000125   000266 710000 0                  TRA     s:2835
         0 000126   000215 710000 0                  TRA     s:2827
         0 000127   000130 710000 0                  TRA     s:2812

     1048     2810
     1049     2811    3               CASE (%BNR_ON_2_RECS);

     1050     2812    3                 POS = 0;

   2812  0 000130   200015 450100                    STZ     POS,,AUTO

     1051     2813    3                 NEW$BUF.LENGTH# = NB_NEW_REC_DATA;

   2813  0 000131   200012 720100                    LXL0    NB_NEW_REC_DATA,,AUTO
         0 000132   200010 471500                    LDP1    NEW_BUF$,,AUTO
         0 000133   100002 740100                    STX0    2,,PR1

     1052     2814    4                 IF NB_REC1_REC_DATA > 0 THEN DO;

   2814  0 000134   200013 235100                    LDA     NB_REC1_REC_DATA,,AUTO
         0 000135   000152 604400 0                  TMOZ    s:2818

     1053     2815    4                    NEW$BUF.BYTES = SUBSTR(REC1$DATA.BYTES, 0, S_POS);

   2815  0 000136   200010 471500                    LDP1    NEW_BUF$,,AUTO
         0 000137   100002 221100                    LDX1    2,,PR1
         0 000140   200004 473500                    LDP3    @REC1,,AUTO
         0 000141   300004 474500                    LDP4    4,,PR3
         0 000142   400002 222100                    LDX2    2,,PR4
         0 000143   200005 475500                    LDP5    @S_POS,,AUTO
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:166  
         0 000144   500000 723100                    LXL3    0,,PR5
         0 000145   040140 100540                    MLR     fill='040'O
         0 000146   400002 400013                    ADSC9   2,,PR4                   cn=2,n=*X3
         0 000147   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1

     1054     2816    4                    POS = S_POS;

   2816  0 000150   500000 235100                    LDA     0,,PR5
         0 000151   200015 755100                    STA     POS,,AUTO

     1055     2817    4                    END;

     1056     2818    4                 IF NB_REC2_REC_DATA > 0 THEN DO;

   2818  0 000152   200014 235100                    LDA     NB_REC2_REC_DATA,,AUTO
         0 000153   000266 604400 0                  TMOZ    s:2835

     1057     2819    4                    CALL INSERT (NEW$BUF.BYTES, POS, ,

   2819  0 000154   200010 471500                    LDP1    NEW_BUF$,,AUTO
         0 000155   100002 221100                    LDX1    2,,PR1
         0 000156   200006 473500                    LDP3    @REC2,,AUTO
         0 000157   300004 474500                    LDP4    4,,PR3
         0 000160   400002 222100                    LDX2    2,,PR4
         0 000161   200007 475500                    LDP5    @E_POS,,AUTO
         0 000162   000000 636012                    EAQ     0,X2
         0 000163   000022 732000                    QRS     18
         0 000164   500000 136100                    SBLQ    0,,PR5
         0 000165   500000 235100                    LDA     0,,PR5
         0 000166   200016 756100                    STQ     POS+1,,AUTO
         0 000167   000000 636011                    EAQ     0,X1
         0 000170   000022 732000                    QRS     18
         0 000171   200015 136100                    SBLQ    POS,,AUTO
         0 000172   200016 721100                    LXL1    POS+1,,AUTO
         0 000173   000000 622006                    EAX2    0,QL
         0 000174   200017 756100                    STQ     POS+2,,AUTO
         0 000175   200015 236100                    LDQ     POS,,AUTO
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:167  
         0 000176   040146 100545                    MLR     fill='040'O
         0 000177   400002 400011                    ADSC9   2,A,PR4                  cn=2,n=*X1
         0 000200   100002 400012                    ADSC9   2,Q,PR1                  cn=2,n=*X2
         0 000201   200016 236100                    LDQ     POS+1,,AUTO
         0 000202   000011 402007                    MPY     9,DL
         0 000203   200020 756100                    STQ     POS+3,,AUTO
         0 000204   200017 236100                    LDQ     POS+2,,AUTO
         0 000205   000011 402007                    MPY     9,DL
         0 000206   200020 116100                    CMPQ    POS+3,,AUTO
         0 000207   000211 604000 0                  TMI     s:2822
         0 000210   000214 710000 0                  TRA     s:2824

     1058     2820    4                      SUBSTR(REC2$DATA.BYTES, E_POS))
     1059     2821    5                    WHENALTRETURN DO;

     1060     2822    5                       CALL VDG$ESCREECH;

   2822  0 000211   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000212   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000213   000000 011000                    NOP     0

     1061     2823    5                       END;

     1062     2824    4                    END;

   2824  0 000214   000266 710000 0                  TRA     s:2835

     1063     2825
     1064     2826    3               CASE (%BNR_ON_1_REC);

     1065     2827    3                 NEW$BUF.BYTES = SUBSTR(REC1$DATA.BYTES, 0, S_POS);

   2827  0 000215   200010 471500                    LDP1    NEW_BUF$,,AUTO
         0 000216   100002 220100                    LDX0    2,,PR1
         0 000217   200004 473500                    LDP3    @REC1,,AUTO
         0 000220   300004 474500                    LDP4    4,,PR3
         0 000221   400002 221100                    LDX1    2,,PR4
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:168  
         0 000222   200005 475500                    LDP5    @S_POS,,AUTO
         0 000223   500000 722100                    LXL2    0,,PR5
         0 000224   040140 100540                    MLR     fill='040'O
         0 000225   400002 400012                    ADSC9   2,,PR4                   cn=2,n=*X2
         0 000226   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0

     1066     2828    3                 CALL INSERT (NEW$BUF.BYTES, S_POS, ,

   2828  0 000227   200010 471500                    LDP1    NEW_BUF$,,AUTO
         0 000230   100002 220100                    LDX0    2,,PR1
         0 000231   300004 474500                    LDP4    4,,PR3
         0 000232   400002 221100                    LDX1    2,,PR4
         0 000233   200007 476500                    LDP6    @E_POS,,AUTO
         0 000234   000000 636011                    EAQ     0,X1
         0 000235   000022 732000                    QRS     18
         0 000236   600000 136100                    SBLQ    0,,PR6
         0 000237   600000 235100                    LDA     0,,PR6
         0 000240   200016 756100                    STQ     POS+1,,AUTO
         0 000241   000000 636010                    EAQ     0,X0
         0 000242   000022 732000                    QRS     18
         0 000243   500000 136100                    SBLQ    0,,PR5
         0 000244   200017 755100                    STA     POS+2,,AUTO
         0 000245   500000 235100                    LDA     0,,PR5
         0 000246   200016 720100                    LXL0    POS+1,,AUTO
         0 000247   200020 755100                    STA     POS+3,,AUTO
         0 000250   200017 235100                    LDA     POS+2,,AUTO
         0 000251   000000 621006                    EAX1    0,QL
         0 000252   200020 236100                    LDQ     POS+3,,AUTO
         0 000253   040146 100545                    MLR     fill='040'O
         0 000254   400002 400010                    ADSC9   2,A,PR4                  cn=2,n=*X0
         0 000255   100002 400011                    ADSC9   2,Q,PR1                  cn=2,n=*X1

     1067     2829    3                   SUBSTR(REC1$DATA.BYTES, E_POS));
     1068     2830    3                 NEW$BUF.LENGTH# = S_POS + (REC1$DATA.LENGTH# - E_POS);

   2830  0 000256   300004 471500                    LDP1    4,,PR3
         0 000257   100002 236100                    LDQ     2,,PR1
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:169  
         0 000260   000022 732000                    QRS     18
         0 000261   600000 136100                    SBLQ    0,,PR6
         0 000262   500000 036100                    ADLQ    0,,PR5
         0 000263   000000 620006                    EAX0    0,QL
         0 000264   200010 474500                    LDP4    NEW_BUF$,,AUTO
         0 000265   400002 740100                    STX0    2,,PR4

     1069     2831
     1070     2832    3               END TYPE_CODE_CASES;

     1071     2833    2              END;

     1072     2834
     1073     2835    2           IF NEW_BUF$ ~= REC1.DATA$ THEN DO;

   2835  0 000266   200004 470500                    LDP0    @REC1,,AUTO
         0 000267   200010 236100                    LDQ     NEW_BUF$,,AUTO
         0 000270   000004 116100                    CMPQ    4,,PR0
         0 000271   000306 600000 0                  TZE     s:2844

     1074     2836                   /* Free the old REC1 data buffer */
     1075     2837    3              IF REC1.DATA$ ~= ADDR(NIL) THEN DO;

   2837  0 000272   000004 236100                    LDQ     4,,PR0
         0 000273   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000274   000303 600000 0                  TZE     s:2841

     1076     2838    3                 CALL VDG$OFREE (REC1$DATA)

   2838  0 000275   000004 471500                    LDP1    4,,PR0
         0 000276   200016 451500                    STP1    POS+1,,AUTO
         0 000277   200016 630500                    EPPR0   POS+1,,AUTO
         0 000300   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000301   000000 701000 xent               TSX1    VDG$OFREE
         0 000302   000367 702000 0                  TSX2    OALLOC_FAILED

     1077     2839    3                   ALTRET (OFREE_FAILED);
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:170  
     1078     2840    3                 END;

     1079     2841    2              REC1.DATA$ = NEW_BUF$;

   2841  0 000303   200010 236100                    LDQ     NEW_BUF$,,AUTO
         0 000304   200004 470500                    LDP0    @REC1,,AUTO
         0 000305   000004 756100                    STQ     4,,PR0

     1080     2842    2              END;

     1081     2843
     1082     2844    2           IF REC1.KEY = %CLEAR THEN DO;

   2844  0 000306   000000 106500                    CMPC    fill='000'O
         0 000307   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         0 000310   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000311   000334 601000 0                  TNZ     s:2862

     1083     2845                   %COPYKEY (FKEY=REC2.KEY, TKEY=REC1.KEY);

   2858  0 000312   200006 471500                    LDP1    @REC2,,AUTO
         0 000313   000100 100500                    MLR     fill='000'O
         0 000314   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         0 000315   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

   2858  0 000316   100000 720100                    LXL0    0,,PR1
         0 000317   000002 100003                    CMPX0   2,DU
         0 000320   000334 601000 0                  TNZ     s:2862

   2858  0 000321   100001 473500                    LDP3    1,,PR1
         0 000322   200004 236100                    LDQ     @REC1,,AUTO
         0 000323   000001 036003                    ADLQ    1,DU
         0 000324   200017 756100                    STQ     POS+2,,AUTO
         0 000325   200016 453500                    STP3    POS+1,,AUTO
         0 000326   200016 630500                    EPPR0   POS+1,,AUTO
         0 000327   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000330   000000 701000 xent               TSX1    VDG$OCOPY
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:171  
         0 000331   000333 702000 0                  TSX2    s:2859
         0 000332   000334 710000 0                  TRA     s:2862

   2859  0 000333   000000 702200 xent               TSX2  ! X66_AALT

     1084     2861    2              END;

     1085     2862    1           IF ((TYPE_CODE = %BNR_ON_2_RECS) AND (REC2.DATA$ ~= ADDR(NIL))) THEN

   2862  0 000334   200003 470500                    LDP0    @TYPE_CODE,,AUTO
         0 000335   000000 235100                    LDA     0,,PR0
         0 000336   000002 115007                    CMPA    2,DL
         0 000337   000351 601000 0                  TNZ     s:2865
         0 000340   200006 471500                    LDP1    @REC2,,AUTO
         0 000341   100004 236100                    LDQ     4,,PR1
         0 000342   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000343   000351 600000 0                  TZE     s:2865

     1086     2863    1              REC1.EOR = REC2.EOR;

   2863  0 000344   200004 473500                    LDP3    @REC1,,AUTO
         0 000345   100005 236100                    LDQ     5,,PR1
         0 000346   300005 676100                    ERQ     5,,PR3
         0 000347   400000 376003                    ANQ     -131072,DU
         0 000350   300005 656100                    ERSQ    5,,PR3

     1087     2864
     1088     2865    2           IF REC2.DATA$ ~= ADDR(NIL) THEN DO;

   2865  0 000351   200006 471500                    LDP1    @REC2,,AUTO
         0 000352   100004 236100                    LDQ     4,,PR1
         0 000353   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000354   000366 600000 0                  TZE     s:2871

     1089     2866    2              CALL VDG$OFREE (REC2$DATA)

   2866  0 000355   100004 473500                    LDP3    4,,PR1
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:172  
         0 000356   200016 453500                    STP3    POS+1,,AUTO
         0 000357   200016 630500                    EPPR0   POS+1,,AUTO
         0 000360   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000361   000000 701000 xent               TSX1    VDG$OFREE
         0 000362   000367 702000 0                  TSX2    OALLOC_FAILED

     1090     2867    2                ALTRET (OFREE_FAILED);
     1091     2868    2              REC2.DATA$ = ADDR(NIL);

   2868  0 000363   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000364   200006 470500                    LDP0    @REC2,,AUTO
         0 000365   000004 756100                    STQ     4,,PR0

     1092     2869    2              END;

     1093     2870
     1094     2871    1           RETURN;

   2871  0 000366   000000 702200 xent               TSX2  ! X66_ARET

   2865  0 000367                       OALLOC_FAIL* null
   2865  0 000367                       OFREE_FAILED null
   2865  0 000367                       BUILD_NEW_R* null
     1095     2872
     1096     2873    1   OALLOC_FAILED: ;
     1097     2874    1   OFREE_FAILED: ;
     1098     2875    1   BUILD_NEW_REC_ALTRET: ;
     1099     2876    1           ALTRETURN;

   2876  0 000367   000000 702200 xent               TSX2  ! X66_AALT
     1100     2877
     1101     2878
     1102     2879    1   END VDG$BUILD_NEW_REC;
     1103     2880        %EOD;

PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:173  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$BUILD_NEW_REC.
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:174  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @E_POS                     4-0-0/w PTR         r     1 @REC1
     6-0-0/w PTR         r     1 @REC2                      5-0-0/w PTR         r     1 @S_POS
     3-0-0/w PTR         r     1 @TYPE_CODE                *0-0-0/w SBIN        r     1 E_POS
    12-0-0/w SBIN        r     1 NB_NEW_REC_DATA           13-0-0/w SBIN        r     1 NB_REC1_REC_DATA
    14-0-0/w SBIN        r     1 NB_REC2_REC_DATA          10-0-0/w PTR         r     1 NEW_BUF$
    11-0-0/w SBIN        r     1 NW_NEW_BUF                15-0-0/w SBIN        r     1 POS
    *0-0-0/w STRC(216)   r     1 REC1                      *0-0-0/w STRC(216)   r     1 REC2
    *0-0-0/w SBIN        r     1 S_POS                     *0-0-0/w SBIN        r     1 TYPE_CODE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 NEW$BUF                    0-0-0/w ASTR(90)    r     1 REC1$DATA
     0-0-0/w ASTR(90)    r     1 REC2$DATA                  0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$BUILD_NEW_REC requires 248 words for executable code.
   Procedure VDG$BUILD_NEW_REC requires 18 words of local(AUTO) storage.
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:175  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:176  
          MINI XREF LISTING

E_POS
      2483**DCL        29--PROC     2786>>ASSIGN   2789>>ASSIGN   2819>>CALLBLT  2828>>CALLBLT  2830>>ASSIGN
NB_NEW_REC_DATA
      2495**DCL      2786<<ASSIGN   2789<<ASSIGN   2793>>ASSIGN   2813>>ASSIGN
NB_REC1_REC_DATA
      2496**DCL      2776<<ASSIGN   2779<<ASSIGN   2786>>ASSIGN   2814>>IF
NB_REC2_REC_DATA
      2497**DCL      2777<<ASSIGN   2781<<ASSIGN   2789>>ASSIGN   2818>>IF
NEW$BUF.BYTES
      2670**DCL      2815<<ASSIGN   2819<<CALLBLT  2827<<ASSIGN   2828<<CALLBLT
NEW$BUF.LENGTH#
      2668**DCL      2670--IMP-SIZ  2813<<ASSIGN   2815>>ASSIGN   2819>>CALLBLT  2827>>ASSIGN   2828>>CALLBLT
      2830<<ASSIGN
NEW_BUF$
      2493**DCL      2642--IMP-PTR  2775<<ASSIGN   2796<<ASSIGN   2800<<ASSIGN   2802>>IF       2803<>CALL
      2813>>ASSIGN   2815>>ASSIGN   2815>>ASSIGN   2819>>CALLBLT  2819>>CALLBLT  2827>>ASSIGN   2827>>ASSIGN
      2828>>CALLBLT  2828>>CALLBLT  2830>>ASSIGN   2835>>IF       2841>>ASSIGN
NW_NEW_BUF
      2494**DCL      2793<<ASSIGN   2798>>IF       2803<>CALL     2807>>IF
OALLOC_FAILED
      2865**LABEL    2803--CALLALT
OFREE_FAILED
      2865**LABEL    2838--CALLALT  2866--CALLALT
POS
      2498**DCL      2812<<ASSIGN   2816<<ASSIGN   2819>>CALLBLT
REC1
      2406**DCL        29--PROC
REC1.DATA$
      2438**DCL      2526--IMP-PTR  2778>>IF       2779>>ASSIGN   2797>>IF       2798>>IF       2800>>ASSIGN
      2815>>ASSIGN   2815>>ASSIGN   2827>>ASSIGN   2827>>ASSIGN   2828>>CALLBLT  2828>>CALLBLT  2830>>ASSIGN
      2835>>IF       2837>>IF       2838>>CALL     2838>>CALL     2841<<ASSIGN
REC1.EOR
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:177  
      2438**DCL      2863<<ASSIGN
REC1.KEY
      2420**DCL      2844>>IF       2858<<ASSIGN
REC1.KEY.V$
      2422**DCL      2858<>CALL
REC1$DATA
      2526**DCL      2838<>CALL
REC1$DATA.BYTES
      2554**DCL      2815>>ASSIGN   2827>>ASSIGN   2828>>CALLBLT
REC1$DATA.LENGTH#
      2552**DCL      2554--IMP-SIZ  2779>>ASSIGN   2815>>ASSIGN   2827>>ASSIGN   2828>>CALLBLT  2830>>ASSIGN
      2838>>CALL
REC1$DATA.OBJECT.SIZE#
      2550**DCL      2798>>IF
REC2
      2449**DCL        29--PROC
REC2.DATA$
      2481**DCL      2584--IMP-PTR  2780>>IF       2781>>ASSIGN   2819>>CALLBLT  2819>>CALLBLT  2862>>IF
      2865>>IF       2866>>CALL     2866>>CALL     2868<<ASSIGN
REC2.EOR
      2481**DCL      2863>>ASSIGN
REC2.KEY
      2463**DCL      2858>>ASSIGN
REC2.KEY.REP#
      2465**DCL      2858>>IF
REC2.KEY.V$
      2465**DCL      2858>>CALL     2858>>CALL
REC2$DATA
      2584**DCL      2866<>CALL
REC2$DATA.BYTES
      2612**DCL      2819>>CALLBLT
REC2$DATA.LENGTH#
      2610**DCL      2612--IMP-SIZ  2781>>ASSIGN   2819>>CALLBLT  2866>>CALL
S_POS
      2440**DCL        29--PROC     2786>>ASSIGN   2789>>ASSIGN   2815>>ASSIGN   2816>>ASSIGN   2827>>ASSIGN
      2828>>CALLBLT  2830>>ASSIGN
PL6.E3A0      #009=VDG$BUILD_NEW_REC File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:23 Page:178  
TYPE_CODE
      2397**DCL        29--PROC     2783>>DOCASE   2798>>IF       2809>>DOCASE   2862>>IF
VD$BUFFER_HEADER
      2683**DCL      2793--ASSIGN
VD$TEXTC_REMOTE
      2736**DCL      2858<>CALL
VD$TEXTC_REMOTE.LENGTH#
      2765**DCL      2767--IMP-SIZ  2858>>CALL
VDG$ESCREECH
      2489**DCL-ENT  2822--CALL
VDG$OALLOC
      2486**DCL-ENT  2803--CALL
VDG$OCOPY
      2488**DCL-ENT  2858--CALL
VDG$OFREE
      2487**DCL-ENT  2838--CALL     2866--CALL

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:179  
     1104        1        /*T***********************************************************/
     1105        2        /*T*                                                         */
     1106        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1107        4        /*T*                                                         */
     1108        5        /*T***********************************************************/
     1109        6
     1110        7        /*D* NAME: VDG$BUILD_LOCATION
     1111        8            PARAMETERS:
     1112        9                ERR_CODE must either be clear, or contain the monitor error
     1113       10                    code returned from an M$PRECORD or M$READ call.
     1114       11                KEY_BUF must contain the key returned by this (or a
     1115       12                    previous) monitor call.  It must be ALIGNED.
     1116       13                    For keyed files, this is a VD$TEXTC string.
     1117       14                    For consec files, this is a UBIN word.
     1118       15                    For indexed files, this is a CHAR buffer, of length
     1119       16                        FIXED_KEY_LEN.
     1120       17                EXT_RECORD_ORG - An SBIN HALF HALIGNED (!) containing the %ORG_
     1121       18                    for the file's record level.
     1122       19                KEY_TYPE - As SBIN HALF HALIGNED (!) containing the %KT_
     1123       20                    for the file's record level.
     1124       21                FIXED_KEY_LEN - If file organization is indexed, then FIXED_KEY_LEN
     1125       22                    must contain the length of the key.
     1126       23                LOCATION - An uninitialized VD$LOCATION.
     1127       24            INPUT:
     1128       25                None.
     1129       26            OUTPUT:
     1130       27                LOCATION.KEY will get the key from KEY_BUF, unless eof
     1131       28                    was hit, in which case LOCATION.EOF will be set.
     1132       29            DESCRIPTION:
     1133       30                Based on the error code and the file org, build a record
     1134       31                key in LOCATION.KEY/.EOF from the info in KEY_BUF.
     1135       32
     1136       33                           CP-6 Secrets, Installment # 98426308
     1137       34                   What PRECORD/PREAD Return In Various Circumstances
     1138       35
     1139       36                If file at BOF, REL<=0:  we'll get altret with errcode=E$BOF,
     1140       37                                    and returned key containing key of first
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:180  
     1141       38                                    record in file (if no first record,
     1142       39                                    returned key will be zeroed).
     1143       40                                    *N* C00 caveat:  for consec files only, the key
     1144       41                                    returned is 0, when it should be 1.  Detect the
     1145       42                                    BOF error and assume a key of 1.
     1146       43                If file at EOF, REL>=0:  we'll get altret with errcode=E$EOF.
     1147       44                If key given, REL=0, and key not in file:
     1148       45                                    we'll get altret with errcode=E$NOKEY,
     1149       46                                    and returned key containing key of next
     1150       47                                    record after given key (if no next
     1151       48                                    record, returned key will be zeroed).
     1152       49                If REL<0, and tried to move to or beyond BOF:
     1153       50                                    we'll get altret with errcode=E$BOF,
     1154       51                                    and returned key containing key of first
     1155       52                                    record in file (if no first record,
     1156       53                                    returned key will be zeroed).
     1157       54                                    *N* C00 caveat:  for consec files only, the key
     1158       55                                    returned is 0, when it should be 1.  Detect the
     1159       56                                    BOF error and assume a key of 1.
     1160       57                If REL>0, and tried to move just to EOF (for example,
     1161       58                    if file at last rec in file and REL=1):
     1162       59                                    we'll get no error, but returned key
     1163       60                                    will be zeroed.
     1164       61                If REL>0, and tried to move beyond EOF:
     1165       62                                    we'll get altret with errcode=E$EOF.
     1166       63                By "zeroing a key", we mean:
     1167       64                    for KEYED files, the textc's length byte gets 0;
     1168       65                    for INDEXED files, the entire key buf gets binary 0's;
     1169       66                    for CONSEC files, the first word of the key buffer gets the
     1170       67                        number of records in the file (ie, one larger than valid
     1171       68                        record # for file).
     1172       69        */
     1173       70
     1174       71        VDG$BUILD_LOCATION: PROC (ERR_CODE, KEY_BUF, EXT_RECORD_ORG,
     1175       72                  KEY_TYPE, FIXED_KEY_LEN, LOCATION) ALTRET;
     1176       73
     1177       74
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:181  
     1178       75        %INCLUDE VD_MACROS_M;
     1179     2290        %INCLUDE VD_PERR_C;
     1180     2438        %INCLUDE CP_6;
     1181     2519        %INCLUDE B_ERRORS_C;
     1182     3645
     1183     3646
     1184     3647                %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=PARAM);
     1185     3662    1   DCL KEY_BUF CHAR(%MXNB_KEY) ALIGNED;
     1186     3663    1   DCL EXT_RECORD_ORG SBIN HALF HALIGNED;
     1187     3664    1   DCL KEY_TYPE SBIN HALF HALIGNED;
     1188     3665    1   DCL FIXED_KEY_LEN SBIN;
     1189     3666        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
     1190     3694
     1191     3695
     1192     3696    1   DCL VDG$BUILD_KEY           ENTRY (3) ALTRET;
     1193     3697    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
     1194     3698    1   DCL VDG$ESCREECH            ENTRY (3);
     1195     3699
     1196     3700
     1197     3701
     1198     3702    1   DCL KEY_BUF$ PTR;
     1199     3703    1   DCL GOT_ERROR BIT(1) ALIGNED;
     1200     3704    1   DCL NB_KEY SBIN;
     1201     3705    1   DCL VD_ERR$ PTR;
     1202     3706    1   DCL SUBST_FIELD$ PTR;
     1203     3707
     1204     3708
     1205     3709        %VD$KEY_NUMBER (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1206     3724        %VD$KEY_NUMBER (NAME=VD_KEY_FIRST_CONSEC_REC, STCLASS=SYMREF);
     1207     3739
     1208     3740
     1209     3741        %VD$TEXTC (NAME=KEY$TEXTC, STCLASS="BASED(KEY_BUF$)");
     1210     3764    1   DCL 1 KEY$FIXED BASED(KEY_BUF$),
     1211     3765    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1212     3766    1   DCL KEY$WORD SBIN BASED(KEY_BUF$);
     1213     3767        %VD$KEY_NUMBER;
     1214     3782        %VD$TEXTC_REMOTE;
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:182  
     1215     3843        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1216     3896        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:0)", STCLASS="BASED(SUBST_FIELD$)");
     1217     3941        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:0)", STCLASS="BASED(SUBST_FIELD$)");
     1218     3986
     1219     3987
     1220     3988
     1221     3989    1           KEY_BUF$ = ADDR(KEY_BUF);
     1222     3990    1           LOCATION = %CLEAR;
     1223     3991    1           GOT_ERROR = %FALSE;
     1224     3992
     1225     3993    1           IF ERR_CODE.CODE# = %E$EOF THEN
     1226     3994    1              LOCATION.EOF = %TRUE;
     1227     3995    2           ELSE DO;
     1228     3996    3              DO CASE (EXT_RECORD_ORG);
     1229     3997    3               CASE (%ORG_KEYED);
     1230     3998    3                 IF KEY$TEXTC.LENGTH# = 0 THEN
     1231     3999    3                    LOCATION.EOF = %TRUE;
     1232     4000    4                 ELSE DO;
     1233     4001    4                    NB_KEY = KEY$TEXTC.LENGTH#;
     1234     4002    4                    CALL VDG$BUILD_KEY (LOCATION.KEY (%(LVL_EXT_REC-1)), NB_KEY,
     1235     4003    4                      KEY$TEXTC.BYTES)
     1236     4004    4                      ALTRET (BUILD_KEY_FAILED);
     1237     4005    4                    IF KEY_TYPE ~= %KT_STRING AND NB_KEY ~= %NB_NUMERIC_KEY THEN
     1238     4006    4                       KEY_TYPE = %KT_STRING;
     1239     4007    4                    LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;
     1240     4008    4                    END;
     1241     4009
     1242     4010    3               CASE (%ORG_INDEXED);
     1243     4011    3                 IF KEY$FIXED = %CLEAR THEN
     1244     4012    3                    LOCATION.EOF = %TRUE;
     1245     4013    4                 ELSE DO;
     1246     4014    4                    CALL VDG$BUILD_KEY (LOCATION.KEY (%(LVL_EXT_REC-1)),
     1247     4015    4                      FIXED_KEY_LEN, KEY$FIXED.BYTES)
     1248     4016    4                      ALTRET (BUILD_KEY_FAILED);
     1249     4017    4                    LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;
     1250     4018    4                    END;
     1251     4019
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:183  
     1252     4020    3               CASE (%ORG_CONSEC);
     1253     4021    4                 IF ERR_CODE.CODE# = %E$BOF THEN DO;
     1254     4022                         /*
     1255     4023                         *  Build key of first record in file.
     1256     4024                         *  Note that this is different from the abstract "BOF"
     1257     4025                         *      location, which is represented by VD_KEY_NUMERIC_BOF.
     1258     4026                         */
     1259     4027    4                    LOCATION.KEY (%(LVL_EXT_REC-1)) = VD_KEY_FIRST_CONSEC_REC;
     1260     4028    4                    END;
     1261     4029    4                 ELSE IF KEY$WORD <= %MX_CONSEC_RECORDS THEN DO;
     1262     4030    4                       LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;
     1263     4031    4                       LOCATION.KEY.REP# (%(LVL_EXT_REC-1)) = %REP_LOCAL;
     1264     4032    4                       ADDR(LOCATION.KEY (%(LVL_EXT_REC-1))) ->
     1265     4033    4                         VD$KEY_NUMBER.LENGTH# = %NB_NUMERIC_KEY;
     1266     4034    4                       ADDR(LOCATION.KEY (%(LVL_EXT_REC-1))) ->
     1267     4035    4                         VD$KEY_NUMBER.BYTES# = KEY$WORD;
     1268     4036    4                       END;
     1269     4037    4                    ELSE DO;
     1270     4038    4                       GOT_ERROR = %TRUE;
     1271     4039    4                       CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1272     4040    4                         ALTRET (OALLOC_FAILED);
     1273     4041    4                       VD$ERR.ERR.CODE# = %E$CONSEC_KEY_TOO_BIG;
     1274     4042    4                       VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1275     4043    4                       SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     1276     4044    4                       SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;
     1277     4045    4                       SUBST$NUMBER.V# (0) = KEY$WORD;
     1278     4046    4                       LOCATION.EOF = %TRUE;
     1279     4047    4                       END;
     1280     4048
     1281     4049    3               CASE (ELSE);
     1282     4050    3                 CALL VDG$ESCREECH (EXT_RECORD_ORG);
     1283     4051    3               END;
     1284     4052    2              END;
     1285     4053
     1286     4054    2           DO SELECT (ERR_CODE.CODE#);
     1287     4055    2              SELECT (0, %E$BOF, %E$EOF, %E$NOKEY);
     1288     4056    2              IF GOT_ERROR THEN
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:184  
     1289     4057    2                 ALTRETURN;
     1290     4058    2              RETURN;
     1291     4059    2              SELECT (ELSE);
     1292     4060    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1293     4061    2             ALTRET (OALLOC_FAILED);
     1294     4062    2           VD$ERR.ERR = ERR_CODE;
     1295     4063    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1296     4064    3           IF NOT LOCATION.EOF THEN DO;
     1297     4065    3              SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     1298     4066    3              SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
     1299     4067    3              SUBST$POINTER.V$ (0) = ADDR(LOCATION.KEY (%LVL_EXT_REC-1));
     1300     4068    3              END;
     1301     4069    2           ALTRETURN;
     1302     4070    2              END;
     1303     4071
     1304     4072
     1305     4073
     1306     4074    1   BUILD_KEY_FAILED: ;
     1307     4075    1   OALLOC_FAILED: ;
     1308     4076    1           ALTRETURN;
     1309     4077
     1310     4078    1   END VDG$BUILD_LOCATION;
     1311     4079        %EOD;

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:185  
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$BUILD_LOCATION.

   Procedure VDG$BUILD_LOCATION requires 204 words for executable code.
   Procedure VDG$BUILD_LOCATION requires 18 words of local(AUTO) storage.

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:186  

 Object Unit name= VDG$BUILD_LOCATION                         File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:03.24 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   204    314  VDG$BUILD_LOCATION
    2  RoData even  none     2      2  VDG$BUILD_LOCATION

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        6  VDG$BUILD_LOCATION

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$BUILD_KEY
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:187  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_KEY_FIRST_CONSEC_REC               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:188  


     1104        1        /*T***********************************************************/
     1105        2        /*T*                                                         */
     1106        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1107        4        /*T*                                                         */
     1108        5        /*T***********************************************************/
     1109        6
     1110        7        /*D* NAME: VDG$BUILD_LOCATION
     1111        8            PARAMETERS:
     1112        9                ERR_CODE must either be clear, or contain the monitor error
     1113       10                    code returned from an M$PRECORD or M$READ call.
     1114       11                KEY_BUF must contain the key returned by this (or a
     1115       12                    previous) monitor call.  It must be ALIGNED.
     1116       13                    For keyed files, this is a VD$TEXTC string.
     1117       14                    For consec files, this is a UBIN word.
     1118       15                    For indexed files, this is a CHAR buffer, of length
     1119       16                        FIXED_KEY_LEN.
     1120       17                EXT_RECORD_ORG - An SBIN HALF HALIGNED (!) containing the %ORG_
     1121       18                    for the file's record level.
     1122       19                KEY_TYPE - As SBIN HALF HALIGNED (!) containing the %KT_
     1123       20                    for the file's record level.
     1124       21                FIXED_KEY_LEN - If file organization is indexed, then FIXED_KEY_LEN
     1125       22                    must contain the length of the key.
     1126       23                LOCATION - An uninitialized VD$LOCATION.
     1127       24            INPUT:
     1128       25                None.
     1129       26            OUTPUT:
     1130       27                LOCATION.KEY will get the key from KEY_BUF, unless eof
     1131       28                    was hit, in which case LOCATION.EOF will be set.
     1132       29            DESCRIPTION:
     1133       30                Based on the error code and the file org, build a record
     1134       31                key in LOCATION.KEY/.EOF from the info in KEY_BUF.
     1135       32
     1136       33                           CP-6 Secrets, Installment # 98426308
     1137       34                   What PRECORD/PREAD Return In Various Circumstances
     1138       35
     1139       36                If file at BOF, REL<=0:  we'll get altret with errcode=E$BOF,
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:189  
     1140       37                                    and returned key containing key of first
     1141       38                                    record in file (if no first record,
     1142       39                                    returned key will be zeroed).
     1143       40                                    *N* C00 caveat:  for consec files only, the key
     1144       41                                    returned is 0, when it should be 1.  Detect the
     1145       42                                    BOF error and assume a key of 1.
     1146       43                If file at EOF, REL>=0:  we'll get altret with errcode=E$EOF.
     1147       44                If key given, REL=0, and key not in file:
     1148       45                                    we'll get altret with errcode=E$NOKEY,
     1149       46                                    and returned key containing key of next
     1150       47                                    record after given key (if no next
     1151       48                                    record, returned key will be zeroed).
     1152       49                If REL<0, and tried to move to or beyond BOF:
     1153       50                                    we'll get altret with errcode=E$BOF,
     1154       51                                    and returned key containing key of first
     1155       52                                    record in file (if no first record,
     1156       53                                    returned key will be zeroed).
     1157       54                                    *N* C00 caveat:  for consec files only, the key
     1158       55                                    returned is 0, when it should be 1.  Detect the
     1159       56                                    BOF error and assume a key of 1.
     1160       57                If REL>0, and tried to move just to EOF (for example,
     1161       58                    if file at last rec in file and REL=1):
     1162       59                                    we'll get no error, but returned key
     1163       60                                    will be zeroed.
     1164       61                If REL>0, and tried to move beyond EOF:
     1165       62                                    we'll get altret with errcode=E$EOF.
     1166       63                By "zeroing a key", we mean:
     1167       64                    for KEYED files, the textc's length byte gets 0;
     1168       65                    for INDEXED files, the entire key buf gets binary 0's;
     1169       66                    for CONSEC files, the first word of the key buffer gets the
     1170       67                        number of records in the file (ie, one larger than valid
     1171       68                        record # for file).
     1172       69        */
     1173       70
     1174       71        VDG$BUILD_LOCATION: PROC (ERR_CODE, KEY_BUF, EXT_RECORD_ORG,

     71  1 000000   000000 700200 xent  VDG$BUILD_L* TSX0  ! X66_AUTO_N
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:190  
         1 000001   000022 000006                    ZERO    18,6

     1175       72                  KEY_TYPE, FIXED_KEY_LEN, LOCATION) ALTRET;
     1176       73
     1177       74
     1178       75        %INCLUDE VD_MACROS_M;
     1179     2290        %INCLUDE VD_PERR_C;
     1180     2438        %INCLUDE CP_6;
     1181     2519        %INCLUDE B_ERRORS_C;
     1182     3645
     1183     3646
     1184     3647                %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=PARAM);
     1185     3662    1   DCL KEY_BUF CHAR(%MXNB_KEY) ALIGNED;
     1186     3663    1   DCL EXT_RECORD_ORG SBIN HALF HALIGNED;
     1187     3664    1   DCL KEY_TYPE SBIN HALF HALIGNED;
     1188     3665    1   DCL FIXED_KEY_LEN SBIN;
     1189     3666        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
     1190     3694
     1191     3695
     1192     3696    1   DCL VDG$BUILD_KEY           ENTRY (3) ALTRET;
     1193     3697    1   DCL VDG$OALLOC              ENTRY (3) ALTRET;
     1194     3698    1   DCL VDG$ESCREECH            ENTRY (3);
     1195     3699
     1196     3700
     1197     3701
     1198     3702    1   DCL KEY_BUF$ PTR;
     1199     3703    1   DCL GOT_ERROR BIT(1) ALIGNED;
     1200     3704    1   DCL NB_KEY SBIN;
     1201     3705    1   DCL VD_ERR$ PTR;
     1202     3706    1   DCL SUBST_FIELD$ PTR;
     1203     3707
     1204     3708
     1205     3709        %VD$KEY_NUMBER (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1206     3724        %VD$KEY_NUMBER (NAME=VD_KEY_FIRST_CONSEC_REC, STCLASS=SYMREF);
     1207     3739
     1208     3740
     1209     3741        %VD$TEXTC (NAME=KEY$TEXTC, STCLASS="BASED(KEY_BUF$)");
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:191  
     1210     3764    1   DCL 1 KEY$FIXED BASED(KEY_BUF$),
     1211     3765    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1212     3766    1   DCL KEY$WORD SBIN BASED(KEY_BUF$);
     1213     3767        %VD$KEY_NUMBER;
     1214     3782        %VD$TEXTC_REMOTE;
     1215     3843        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1216     3896        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:0)", STCLASS="BASED(SUBST_FIELD$)");
     1217     3941        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:0)", STCLASS="BASED(SUBST_FIELD$)");
     1218     3986
     1219     3987
     1220     3988
     1221     3989    1           KEY_BUF$ = ADDR(KEY_BUF);

   3989  1 000002   200004 236100                    LDQ     @KEY_BUF,,AUTO
         1 000003   200011 756100                    STQ     KEY_BUF$,,AUTO

     1222     3990    1           LOCATION = %CLEAR;

   3990  1 000004   200010 470500                    LDP0    @LOCATION,,AUTO
         1 000005   000100 100400                    MLR     fill='000'O
         1 000006   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000007   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36

     1223     3991    1           GOT_ERROR = %FALSE;

   3991  1 000010   200012 450100                    STZ     GOT_ERROR,,AUTO

     1224     3992
     1225     3993    1           IF ERR_CODE.CODE# = %E$EOF THEN

   3993  1 000011   200003 471500                    LDP1    @ERR_CODE,,AUTO
         1 000012   100000 236100                    LDQ     0,,PR1
         1 000013   377770 376007                    ANQ     131064,DL
         1 000014   000060 116007                    CMPQ    48,DL
         1 000015   000021 601000 1                  TNZ     s:3996

     1226     3994    1              LOCATION.EOF = %TRUE;
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:192  

   3994  1 000016   400000 236007                    LDQ     -131072,DL
         1 000017   000010 256100                    ORSQ    8,,PR0
         1 000020   000231 710000 1                  TRA     s:4054

     1227     3995    2           ELSE DO;

     1228     3996    3              DO CASE (EXT_RECORD_ORG);

   3996  1 000021   200005 473500                    LDP3    @EXT_RECORD_ORG,,AUTO
         1 000022   000100 100500                    MLR     fill='000'O
         1 000023   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         1 000024   200016 000004                    ADSC9   SUBST_FIELD$+1,,AUTO     cn=0,n=4
         1 000025   200016 236100                    LDQ     SUBST_FIELD$+1,,AUTO
         1 000026   000022 732000                    QRS     18
         1 000027   000004 116007                    CMPQ    4,DL
         1 000030   000032 602006 1                  TNC     s:3996+9,QL
         1 000031   000225 710000 1                  TRA     s:4050
         1 000032   000225 710000 1                  TRA     s:4050
         1 000033   000137 710000 1                  TRA     s:4021
         1 000034   000036 710000 1                  TRA     s:3998
         1 000035   000106 710000 1                  TRA     s:4011

     1229     3997    3               CASE (%ORG_KEYED);

     1230     3998    3                 IF KEY$TEXTC.LENGTH# = 0 THEN

   3998  1 000036   200011 474500                    LDP4    KEY_BUF$,,AUTO
         1 000037   400000 236100                    LDQ     0,,PR4
         1 000040   777000 316003                    CANQ    -512,DU
         1 000041   000045 601000 1                  TNZ     s:4001

     1231     3999    3                    LOCATION.EOF = %TRUE;

   3999  1 000042   400000 236007                    LDQ     -131072,DL
         1 000043   000010 256100                    ORSQ    8,,PR0
         1 000044   000231 710000 1                  TRA     s:4054
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:193  

     1232     4000    4                 ELSE DO;

     1233     4001    4                    NB_KEY = KEY$TEXTC.LENGTH#;

   4001  1 000045   400000 236100                    LDQ     0,,PR4
         1 000046   000033 772000                    QRL     27
         1 000047   200013 756100                    STQ     NB_KEY,,AUTO

     1234     4002    4                    CALL VDG$BUILD_KEY (LOCATION.KEY (%(LVL_EXT_REC-1)), NB_KEY,

   4002  1 000050   200011 236100                    LDQ     KEY_BUF$,,AUTO
         1 000051   200000 036007                    ADLQ    65536,DL
         1 000052   200020 756100                    STQ     SUBST_FIELD$+3,,AUTO
         1 000053   200013 635500                    EPPR5   NB_KEY,,AUTO
         1 000054   200017 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000055   200010 236100                    LDQ     @LOCATION,,AUTO
         1 000056   200016 756100                    STQ     SUBST_FIELD$+1,,AUTO
         1 000057   200016 630500                    EPPR0   SUBST_FIELD$+1,,AUTO
         1 000060   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000061   000000 701000 xent               TSX1    VDG$BUILD_KEY
         1 000062   000313 702000 1                  TSX2    BUILD_KEY_FAILED

     1235     4003    4                      KEY$TEXTC.BYTES)
     1236     4004    4                      ALTRET (BUILD_KEY_FAILED);
     1237     4005    4                    IF KEY_TYPE ~= %KT_STRING AND NB_KEY ~= %NB_NUMERIC_KEY THEN

   4005  1 000063   200006 470500                    LDP0    @KEY_TYPE,,AUTO
         1 000064   000100 100500                    MLR     fill='000'O
         1 000065   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         1 000066   200016 000004                    ADSC9   SUBST_FIELD$+1,,AUTO     cn=0,n=4
         1 000067   200016 236100                    LDQ     SUBST_FIELD$+1,,AUTO
         1 000070   000022 732000                    QRS     18
         1 000071   000002 116007                    CMPQ    2,DL
         1 000072   000101 600000 1                  TZE     s:4007
         1 000073   200013 235100                    LDA     NB_KEY,,AUTO
         1 000074   000003 115007                    CMPA    3,DL
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:194  
         1 000075   000101 600000 1                  TZE     s:4007

     1238     4006    4                       KEY_TYPE = %KT_STRING;

   4006  1 000076   000100 101400                    MRL     fill='000'O
         1 000077   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         1 000100   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     1239     4007    4                    LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;

   4007  1 000101   200010 471500                    LDP1    @LOCATION,,AUTO
         1 000102   000100 100500                    MLR     fill='000'O
         1 000103   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         1 000104   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1240     4008    4                    END;

   4008  1 000105   000231 710000 1                  TRA     s:4054

     1241     4009
     1242     4010    3               CASE (%ORG_INDEXED);

     1243     4011    3                 IF KEY$FIXED = %CLEAR THEN

   4011  1 000106   200007 474500                    LDP4    @FIXED_KEY_LEN,,AUTO
         1 000107   400000 720100                    LXL0    0,,PR4
         1 000110   200011 475500                    LDP5    KEY_BUF$,,AUTO
         1 000111   000000 106540                    CMPC    fill='000'O
         1 000112   500000 000010                    ADSC9   0,,PR5                   cn=0,n=*X0
         1 000113   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000114   000120 601000 1                  TNZ     s:4014

     1244     4012    3                    LOCATION.EOF = %TRUE;

   4012  1 000115   400000 236007                    LDQ     -131072,DL
         1 000116   000010 256100                    ORSQ    8,,PR0
         1 000117   000231 710000 1                  TRA     s:4054
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:195  

     1245     4013    4                 ELSE DO;

     1246     4014    4                    CALL VDG$BUILD_KEY (LOCATION.KEY (%(LVL_EXT_REC-1)),

   4014  1 000120   200011 236100                    LDQ     KEY_BUF$,,AUTO
         1 000121   200020 756100                    STQ     SUBST_FIELD$+3,,AUTO
         1 000122   200007 236100                    LDQ     @FIXED_KEY_LEN,,AUTO
         1 000123   200010 235100                    LDA     @LOCATION,,AUTO
         1 000124   200016 757100                    STAQ    SUBST_FIELD$+1,,AUTO
         1 000125   200016 630500                    EPPR0   SUBST_FIELD$+1,,AUTO
         1 000126   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000127   000000 701000 xent               TSX1    VDG$BUILD_KEY
         1 000130   000313 702000 1                  TSX2    BUILD_KEY_FAILED

     1247     4015    4                      FIXED_KEY_LEN, KEY$FIXED.BYTES)
     1248     4016    4                      ALTRET (BUILD_KEY_FAILED);
     1249     4017    4                    LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;

   4017  1 000131   200006 470500                    LDP0    @KEY_TYPE,,AUTO
         1 000132   200010 471500                    LDP1    @LOCATION,,AUTO
         1 000133   000100 100500                    MLR     fill='000'O
         1 000134   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         1 000135   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1250     4018    4                    END;

   4018  1 000136   000231 710000 1                  TRA     s:4054

     1251     4019
     1252     4020    3               CASE (%ORG_CONSEC);

     1253     4021    4                 IF ERR_CODE.CODE# = %E$BOF THEN DO;

   4021  1 000137   100000 236100                    LDQ     0,,PR1
         1 000140   377770 376007                    ANQ     131064,DL
         1 000141   000040 116007                    CMPQ    32,DL
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:196  
         1 000142   000147 601000 1                  TNZ     s:4029

     1254     4022                         /*
     1255     4023                         *  Build key of first record in file.
     1256     4024                         *  Note that this is different from the abstract "BOF"
     1257     4025                         *      location, which is represented by VD_KEY_NUMERIC_BOF.
     1258     4026                         */
     1259     4027    4                    LOCATION.KEY (%(LVL_EXT_REC-1)) = VD_KEY_FIRST_CONSEC_REC;

   4027  1 000143   000100 100400                    MLR     fill='000'O
         1 000144   000000 000010 xsym               ADSC9   VD_KEY_FIRST_CONSEC_REC  cn=0,n=8
         1 000145   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

     1260     4028    4                    END;

   4028  1 000146   000231 710000 1                  TRA     s:4054

     1261     4029    4                 ELSE IF KEY$WORD <= %MX_CONSEC_RECORDS THEN DO;

   4029  1 000147   200011 474500                    LDP4    KEY_BUF$,,AUTO
         1 000150   400000 235100                    LDA     0,,PR4
         1 000151   000032 115000 xsym               CMPA    B_VECTNIL+26
         1 000152   000166 605400 1                  TPNZ    s:4038

     1262     4030    4                       LOCATION.KEY.TYPE# (%(LVL_EXT_REC-1)) = KEY_TYPE;

   4030  1 000153   200006 475500                    LDP5    @KEY_TYPE,,AUTO
         1 000154   000100 100500                    MLR     fill='000'O
         1 000155   500000 000002                    ADSC9   0,,PR5                   cn=0,n=2
         1 000156   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     1263     4031    4                       LOCATION.KEY.REP# (%(LVL_EXT_REC-1)) = %REP_LOCAL;

   4031  1 000157   000001 220003                    LDX0    1,DU
         1 000160   000000 440100                    SXL0    0,,PR0

     1264     4032    4                       ADDR(LOCATION.KEY (%(LVL_EXT_REC-1))) ->
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:197  

   4032  1 000161   003000 236003                    LDQ     1536,DU
         1 000162   000001 552140                    STBQ    1,'40'O,PR0

     1265     4033    4                         VD$KEY_NUMBER.LENGTH# = %NB_NUMERIC_KEY;
     1266     4034    4                       ADDR(LOCATION.KEY (%(LVL_EXT_REC-1))) ->

   4034  1 000163   400000 236100                    LDQ     0,,PR4
         1 000164   000001 552134                    STBQ    1,'34'O,PR0

     1267     4035    4                         VD$KEY_NUMBER.BYTES# = KEY$WORD;
     1268     4036    4                       END;

   4036  1 000165   000231 710000 1                  TRA     s:4054

     1269     4037    4                    ELSE DO;

     1270     4038    4                       GOT_ERROR = %TRUE;

   4038  1 000166   400000 236003                    LDQ     -131072,DU
         1 000167   200012 756100                    STQ     GOT_ERROR,,AUTO

     1271     4039    4                       CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   4039  1 000170   200014 635500                    EPPR5   VD_ERR$,,AUTO
         1 000171   200017 455500                    STP5    SUBST_FIELD$+2,,AUTO
         1 000172   000000 236000 2                  LDQ     0
         1 000173   200016 756100                    STQ     SUBST_FIELD$+1,,AUTO
         1 000174   200016 630500                    EPPR0   SUBST_FIELD$+1,,AUTO
         1 000175   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000176   000000 701000 xent               TSX1    VDG$OALLOC
         1 000177   000313 702000 1                  TSX2    BUILD_KEY_FAILED

     1272     4040    4                         ALTRET (OALLOC_FAILED);
     1273     4041    4                       VD$ERR.ERR.CODE# = %E$CONSEC_KEY_TOO_BIG;

   4041  1 000200   200014 470500                    LDP0    VD_ERR$,,AUTO
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:198  
         1 000201   000002 236100                    LDQ     2,,PR0
         1 000202   000001 376000 2                  ANQ     1
         1 000203   004250 276007                    ORQ     2216,DL
         1 000204   000002 756100                    STQ     2,,PR0

     1274     4042    4                       VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4042  1 000205   000003 220003                    LDX0    3,DU
         1 000206   200014 470500                    LDP0    VD_ERR$,,AUTO
         1 000207   000003 740100                    STX0    3,,PR0

     1275     4043    4                       SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   4043  1 000210   200014 236100                    LDQ     VD_ERR$,,AUTO
         1 000211   000005 036003                    ADLQ    5,DU
         1 000212   200015 756100                    STQ     SUBST_FIELD$,,AUTO

     1276     4044    4                       SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;

   4044  1 000213   000033 221003                    LDX1    27,DU
         1 000214   200015 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000215   000000 741100                    STX1    0,,PR0

     1277     4045    4                       SUBST$NUMBER.V# (0) = KEY$WORD;

   4045  1 000216   200011 471500                    LDP1    KEY_BUF$,,AUTO
         1 000217   100000 235100                    LDA     0,,PR1
         1 000220   000003 755100                    STA     3,,PR0

     1278     4046    4                       LOCATION.EOF = %TRUE;

   4046  1 000221   200010 473500                    LDP3    @LOCATION,,AUTO
         1 000222   400000 236007                    LDQ     -131072,DL
         1 000223   300010 256100                    ORSQ    8,,PR3

     1279     4047    4                       END;

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:199  
   4047  1 000224   000231 710000 1                  TRA     s:4054

     1280     4048
     1281     4049    3               CASE (ELSE);

     1282     4050    3                 CALL VDG$ESCREECH (EXT_RECORD_ORG);

   4050  1 000225   200005 630500                    EPPR0   @EXT_RECORD_ORG,,AUTO
         1 000226   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000227   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000230   000000 011000                    NOP     0

     1283     4051    3               END;

     1284     4052    2              END;

     1285     4053
     1286     4054    2           DO SELECT (ERR_CODE.CODE#);

   4054  1 000231   200003 470500                    LDP0    @ERR_CODE,,AUTO
         1 000232   000000 236100                    LDQ     0,,PR0
         1 000233   000003 772000                    QRL     3
         1 000234   037777 376007                    ANQ     16383,DL
         1 000235   000004 116007                    CMPQ    4,DL
         1 000236   000247 602000 1                  TNC     s:4054+14
         1 000237   000253 600000 1                  TZE     s:4056
         1 000240   000006 116007                    CMPQ    6,DL
         1 000241   000257 602000 1                  TNC     s:4060
         1 000242   000253 600000 1                  TZE     s:4056
         1 000243   000003 736000                    QLS     3
         1 000244   001020 116007                    CMPQ    528,DL
         1 000245   000257 601000 1                  TNZ     s:4060
         1 000246   000253 710000 1                  TRA     s:4056
         1 000247   000000 236100                    LDQ     0,,PR0
         1 000250   377770 316007                    CANQ    131064,DL
         1 000251   000253 600000 1                  TZE     s:4056
         1 000252   000257 710000 1                  TRA     s:4060
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:200  

     1287     4055    2              SELECT (0, %E$BOF, %E$EOF, %E$NOKEY);

     1288     4056    2              IF GOT_ERROR THEN

   4056  1 000253   200012 234100                    SZN     GOT_ERROR,,AUTO
         1 000254   000256 605000 1                  TPL     s:4058

     1289     4057    2                 ALTRETURN;

   4057  1 000255   000000 702200 xent               TSX2  ! X66_AALT

     1290     4058    2              RETURN;

   4058  1 000256   000000 702200 xent               TSX2  ! X66_ARET

     1291     4059    2              SELECT (ELSE);

     1292     4060    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   4060  1 000257   200014 631500                    EPPR1   VD_ERR$,,AUTO
         1 000260   200017 451500                    STP1    SUBST_FIELD$+2,,AUTO
         1 000261   000000 236000 2                  LDQ     0
         1 000262   200016 756100                    STQ     SUBST_FIELD$+1,,AUTO
         1 000263   200016 630500                    EPPR0   SUBST_FIELD$+1,,AUTO
         1 000264   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000265   000000 701000 xent               TSX1    VDG$OALLOC
         1 000266   000313 702000 1                  TSX2    BUILD_KEY_FAILED

     1293     4061    2             ALTRET (OALLOC_FAILED);
     1294     4062    2           VD$ERR.ERR = ERR_CODE;

   4062  1 000267   200003 470500                    LDP0    @ERR_CODE,,AUTO
         1 000270   000000 236100                    LDQ     0,,PR0
         1 000271   200014 471500                    LDP1    VD_ERR$,,AUTO
         1 000272   100002 756100                    STQ     2,,PR1

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:201  
     1295     4063    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4063  1 000273   000003 220003                    LDX0    3,DU
         1 000274   200014 471500                    LDP1    VD_ERR$,,AUTO
         1 000275   100003 740100                    STX0    3,,PR1

     1296     4064    3           IF NOT LOCATION.EOF THEN DO;

   4064  1 000276   200010 471500                    LDP1    @LOCATION,,AUTO
         1 000277   100010 236100                    LDQ     8,,PR1
         1 000300   400000 316007                    CANQ    -131072,DL
         1 000301   000312 601000 1                  TNZ     s:4069

     1297     4065    3              SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   4065  1 000302   200014 236100                    LDQ     VD_ERR$,,AUTO
         1 000303   000005 036003                    ADLQ    5,DU
         1 000304   200015 756100                    STQ     SUBST_FIELD$,,AUTO

     1298     4066    3              SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   4066  1 000305   000043 221003                    LDX1    35,DU
         1 000306   200015 473500                    LDP3    SUBST_FIELD$,,AUTO
         1 000307   300000 741100                    STX1    0,,PR3

     1299     4067    3              SUBST$POINTER.V$ (0) = ADDR(LOCATION.KEY (%LVL_EXT_REC-1));

   4067  1 000310   200010 236100                    LDQ     @LOCATION,,AUTO
         1 000311   300003 756100                    STQ     3,,PR3

     1300     4068    3              END;

     1301     4069    2           ALTRETURN;

   4069  1 000312   000000 702200 xent               TSX2  ! X66_AALT

     1302     4070    2              END;
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:202  

   4067  1 000313                       BUILD_KEY_F* null
   4067  1 000313                       OALLOC_FAIL* null
     1303     4071
     1304     4072
     1305     4073
     1306     4074    1   BUILD_KEY_FAILED: ;
     1307     4075    1   OALLOC_FAILED: ;
     1308     4076    1           ALTRETURN;

   4076  1 000313   000000 702200 xent               TSX2  ! X66_AALT
     1309     4077
     1310     4078    1   END VDG$BUILD_LOCATION;
     1311     4079        %EOD;

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:203  
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$BUILD_LOCATION.
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:204  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR_CODE                  5-0-0/w PTR         r     1 @EXT_RECORD_ORG
     7-0-0/w PTR         r     1 @FIXED_KEY_LEN             4-0-0/w PTR         r     1 @KEY_BUF
     6-0-0/w PTR         r     1 @KEY_TYPE                 10-0-0/w PTR         r     1 @LOCATION
    *0-0-0/w STRC        r     1 ERR_CODE                  *0-0-0/h SBIN(18)    r     1 EXT_RECORD_ORG
    *0-0-0/w SBIN        r     1 FIXED_KEY_LEN             12-0-0/w BIT         r     1 GOT_ERROR
    *0-0-0/w CHAR(255)   r     1 KEY_BUF                   11-0-0/w PTR         r     1 KEY_BUF$
    *0-0-0/h SBIN(18)    r     1 KEY_TYPE                  *0-0-0/w STRC(324)   r     1 LOCATION
    13-0-0/w SBIN        r     1 NB_KEY                    15-0-0/w PTR         r     1 SUBST_FIELD$
    14-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 VD_KEY_FIRST_CONSEC_REC

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ASTR(0)     r     1 KEY$FIXED                  0-0-0/w ASTR(9)     r     1 KEY$TEXTC
     0-0-0/w SBIN        r     1 KEY$WORD
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:0)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:0)
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE

PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:205  

   Procedure VDG$BUILD_LOCATION requires 204 words for executable code.
   Procedure VDG$BUILD_LOCATION requires 18 words of local(AUTO) storage.
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:206  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:207  
          MINI XREF LISTING

BUILD_KEY_FAILED
      4067**LABEL    4002--CALLALT  4014--CALLALT
ERR_CODE
      3655**DCL        71--PROC     4062>>ASSIGN
ERR_CODE.CODE#
      3659**DCL      3993>>IF       4021>>IF       4054>>DOSELCT
EXT_RECORD_ORG
      3663**DCL        71--PROC     3996>>DOCASE   4050<>CALL
FIXED_KEY_LEN
      3665**DCL        71--PROC     3765--IMP-SIZ  4011>>IF       4014<>CALL     4014>>CALL
GOT_ERROR
      3703**DCL      3991<<ASSIGN   4038<<ASSIGN   4056>>IF
KEY$FIXED
      3764**DCL      4011>>IF
KEY$FIXED.BYTES
      3765**DCL      4014<>CALL
KEY$TEXTC.BYTES
      3759**DCL      4002<>CALL
KEY$TEXTC.LENGTH#
      3757**DCL      3759--IMP-SIZ  3998>>IF       4001>>ASSIGN   4002>>CALL
KEY$WORD
      3766**DCL      4029>>IF       4034>>ASSIGN   4045>>ASSIGN
KEY_BUF
      3662**DCL        71--PROC     3989--ASSIGN
KEY_BUF$
      3702**DCL      3749--IMP-PTR  3764--IMP-PTR  3766--IMP-PTR  3989<<ASSIGN   3998>>IF       4001>>ASSIGN
      4002>>CALL     4002>>CALL     4011>>IF       4014>>CALL     4029>>IF       4034>>ASSIGN   4045>>ASSIGN
KEY_TYPE
      3664**DCL        71--PROC     4005>>IF       4006<<ASSIGN   4007>>ASSIGN   4017>>ASSIGN   4030>>ASSIGN
LOCATION
      3674**DCL        71--PROC     3990<<ASSIGN
LOCATION.EOF
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:208  
      3692**DCL      3994<<ASSIGN   3999<<ASSIGN   4012<<ASSIGN   4046<<ASSIGN   4064>>IF
LOCATION.KEY
      3688**DCL      4002<>CALL     4014<>CALL     4027<<ASSIGN   4032--ASSIGN   4034--ASSIGN   4067--ASSIGN
LOCATION.KEY.REP#
      3690**DCL      4031<<ASSIGN
LOCATION.KEY.TYPE#
      3690**DCL      4007<<ASSIGN   4017<<ASSIGN   4030<<ASSIGN
NB_KEY
      3704**DCL      4001<<ASSIGN   4002<>CALL     4005>>IF
OALLOC_FAILED
      4067**LABEL    4039--CALLALT  4060--CALLALT
SUBST$NUMBER.OBJECT.CLASS#
      3936**DCL      4044<<ASSIGN
SUBST$NUMBER.V#
      3938**DCL      4045<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      3981**DCL      4066<<ASSIGN
SUBST$POINTER.V$
      3983**DCL      4067<<ASSIGN
SUBST_FIELD$
      3706**DCL      3904--IMP-PTR  3957--IMP-PTR  4043<<ASSIGN   4044>>ASSIGN   4045>>ASSIGN   4065<<ASSIGN
      4066>>ASSIGN   4067>>ASSIGN
VD$ERR
      3851**DCL      4043--ASSIGN   4065--ASSIGN
VD$ERR.ERR
      3888**DCL      4062<<ASSIGN
VD$ERR.ERR.CODE#
      3890**DCL      4041<<ASSIGN
VD$ERR.FLAGLEV#
      3893**DCL      4042<<ASSIGN   4063<<ASSIGN
VD$KEY_NUMBER.BYTES#
      3779**DCL      4034<<ASSIGN
VD$KEY_NUMBER.LENGTH#
      3779**DCL      4032<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      3836**DCL      3838--IMP-SIZ
PL6.E3A0      #010=VDG$BUILD_LOCATION File=VDG$UTILITY.:VDA5TSI                  FRI 07/04/97 11:24 Page:209  
VDG$BUILD_KEY
      3696**DCL-ENT  4002--CALL     4014--CALL
VDG$ESCREECH
      3698**DCL-ENT  4050--CALL
VDG$OALLOC
      3697**DCL-ENT  4039--CALL     4060--CALL
VD_ERR$
      3705**DCL      3851--IMP-PTR  4039<>CALL     4041>>ASSIGN   4042>>ASSIGN   4043>>ASSIGN   4060<>CALL
      4062>>ASSIGN   4063>>ASSIGN   4065>>ASSIGN
VD_KEY_FIRST_CONSEC_REC
      3732**DCL      4027>>ASSIGN

PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:210  
     1312        1        /*T***********************************************************/
     1313        2        /*T*                                                         */
     1314        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1315        4        /*T*                                                         */
     1316        5        /*T***********************************************************/
     1317        6
     1318        7        /*D* NAME: VDG$BUILD_KEY
     1319        8            PARAMETERS:
     1320        9                KEY - A VD$KEY whose .REP# and .V$ are to be filled in.
     1321       10                NB_KEY - An SBIN word containing the number of bytes in the
     1322       11                    record key to build.
     1323       12                BYTES - A Caligned string of bytes.
     1324       13            INPUT:
     1325       14                None.
     1326       15            OUTPUT:
     1327       16                KEY.REP# and KEY.V$ will be filled in appropriately.
     1328       17
     1329       18                                    !!! NOTE !!!
     1330       19                      KEY.TYPE# will not be filled in!! Caller
     1331       20                      must do this when VDG$BUILD_KEY returns!!
     1332       21            DESCRIPTION:
     1333       22                If the key is too long to be local, allocate a VD$REMOTE_TEXTC
     1334       23                object and copy BYTES to it; else copy BYTES to the KEY
     1335       24                structure itself.
     1336       25
     1337       26                Note that no other fields in KEY (ie, .TYPE#) are set
     1338       27                by this routine.
     1339       28        */
     1340       29
     1341       30        VDG$BUILD_KEY: PROC (KEY, NB_KEY, BYTES) ALTRET;
     1342       31
     1343       32        %INCLUDE VD_MACROS_M;
     1344     2247        %INCLUDE VD_PERR_C;
     1345     2395
     1346     2396
     1347     2397        %VD$KEY (NAME=KEY, STCLASS=PARAM);
     1348     2411    1   DCL NB_KEY SBIN;
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:211  
     1349     2412    1   DCL BYTES CHAR(NB_KEY) CALIGNED;
     1350     2413
     1351     2414
     1352     2415    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1353     2416
     1354     2417
     1355     2418
     1356     2419        %VD$TEXTC (NAME=TEXTC, STCLASS=BASED);
     1357     2442        %VD$TEXTC_REMOTE;
     1358     2503        %VD$STRING_HEADER;
     1359     2539
     1360     2540
     1361     2541
     1362     2542    2           IF NB_KEY > %MXNB_STRING_LOCAL THEN DO;
     1363     2543    2              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, KEY.V$,
     1364     2544    2                (LENGTHC(VD$STRING_HEADER) + NB_KEY + %NB_PER_WORD-1) /
     1365     2545    2                %NB_PER_WORD)
     1366     2546    2                ALTRET (OALLOC_FAILED);
     1367     2547    2              KEY.REP# = %REP_REMOTE;
     1368     2548    2              KEY.V$->VD$TEXTC_REMOTE.LENGTH# = NB_KEY;
     1369     2549    2              KEY.V$->VD$TEXTC_REMOTE.BYTES = BYTES;
     1370     2550    2              END;
     1371     2551    2           ELSE DO;
     1372     2552    2              KEY.REP# = %REP_LOCAL;
     1373     2553    2              ADDR(KEY.V$)->TEXTC.LENGTH# = NB_KEY;
     1374     2554    2              ADDR(KEY.V$)->TEXTC.BYTES = BYTES;
     1375     2555    2              END;
     1376     2556
     1377     2557    1           RETURN;
     1378     2558
     1379     2559
     1380     2560    1   OALLOC_FAILED: ;
     1381     2561    1           ALTRETURN;
     1382     2562
     1383     2563    1   END VDG$BUILD_KEY;
     1384     2564        %EOD;

PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:212  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$BUILD_KEY.

   Procedure VDG$BUILD_KEY requires 55 words for executable code.
   Procedure VDG$BUILD_KEY requires 10 words of local(AUTO) storage.

PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:213  

 Object Unit name= VDG$BUILD_KEY                              File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:14.36 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    55     67  VDG$BUILD_KEY
    1  RoData even  none     2      2  VDG$BUILD_KEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VDG$BUILD_KEY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:214  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:215  


     1312        1        /*T***********************************************************/
     1313        2        /*T*                                                         */
     1314        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1315        4        /*T*                                                         */
     1316        5        /*T***********************************************************/
     1317        6
     1318        7        /*D* NAME: VDG$BUILD_KEY
     1319        8            PARAMETERS:
     1320        9                KEY - A VD$KEY whose .REP# and .V$ are to be filled in.
     1321       10                NB_KEY - An SBIN word containing the number of bytes in the
     1322       11                    record key to build.
     1323       12                BYTES - A Caligned string of bytes.
     1324       13            INPUT:
     1325       14                None.
     1326       15            OUTPUT:
     1327       16                KEY.REP# and KEY.V$ will be filled in appropriately.
     1328       17
     1329       18                                    !!! NOTE !!!
     1330       19                      KEY.TYPE# will not be filled in!! Caller
     1331       20                      must do this when VDG$BUILD_KEY returns!!
     1332       21            DESCRIPTION:
     1333       22                If the key is too long to be local, allocate a VD$REMOTE_TEXTC
     1334       23                object and copy BYTES to it; else copy BYTES to the KEY
     1335       24                structure itself.
     1336       25
     1337       26                Note that no other fields in KEY (ie, .TYPE#) are set
     1338       27                by this routine.
     1339       28        */
     1340       29
     1341       30        VDG$BUILD_KEY: PROC (KEY, NB_KEY, BYTES) ALTRET;

     30  0 000000   000000 700200 xent  VDG$BUILD_K* TSX0  ! X66_AUTO_3
         0 000001   000012 000003                    ZERO    10,3

     1342       31
     1343       32        %INCLUDE VD_MACROS_M;
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:216  
     1344     2247        %INCLUDE VD_PERR_C;
     1345     2395
     1346     2396
     1347     2397        %VD$KEY (NAME=KEY, STCLASS=PARAM);
     1348     2411    1   DCL NB_KEY SBIN;
     1349     2412    1   DCL BYTES CHAR(NB_KEY) CALIGNED;
     1350     2413
     1351     2414
     1352     2415    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1353     2416
     1354     2417
     1355     2418
     1356     2419        %VD$TEXTC (NAME=TEXTC, STCLASS=BASED);
     1357     2442        %VD$TEXTC_REMOTE;
     1358     2503        %VD$STRING_HEADER;
     1359     2539
     1360     2540
     1361     2541
     1362     2542    2           IF NB_KEY > %MXNB_STRING_LOCAL THEN DO;

   2542  0 000002   200004 470500                    LDP0    @NB_KEY,,AUTO
         0 000003   000000 235100                    LDA     0,,PR0
         0 000004   000003 115007                    CMPA    3,DL
         0 000005   000047 604400 0                  TMOZ    s:2552

     1363     2543    2              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, KEY.V$,

   2543  0 000006   000000 236100                    LDQ     0,,PR0
         0 000007   000014 036007                    ADLQ    12,DL
         0 000010   000004 506007                    DIV     4,DL
         0 000011   200006 756100                    STQ     @BYTES+1,,AUTO
         0 000012   200006 631500                    EPPR1   @BYTES+1,,AUTO
         0 000013   200011 451500                    STP1    @BYTES+4,,AUTO
         0 000014   200003 236100                    LDQ     @KEY,,AUTO
         0 000015   000001 036003                    ADLQ    1,DU
         0 000016   200010 756100                    STQ     @BYTES+3,,AUTO
         0 000017   000001 236000 1                  LDQ     1
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:217  
         0 000020   200007 756100                    STQ     @BYTES+2,,AUTO
         0 000021   200007 630500                    EPPR0   @BYTES+2,,AUTO
         0 000022   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000023   000000 701000 xent               TSX1    VDG$OALLOC
         0 000024   000066 702000 0                  TSX2    OALLOC_FAILED

     1364     2544    2                (LENGTHC(VD$STRING_HEADER) + NB_KEY + %NB_PER_WORD-1) /
     1365     2545    2                %NB_PER_WORD)
     1366     2546    2                ALTRET (OALLOC_FAILED);
     1367     2547    2              KEY.REP# = %REP_REMOTE;

   2547  0 000025   000002 220003                    LDX0    2,DU
         0 000026   200003 470500                    LDP0    @KEY,,AUTO
         0 000027   000000 440100                    SXL0    0,,PR0

     1368     2548    2              KEY.V$->VD$TEXTC_REMOTE.LENGTH# = NB_KEY;

   2548  0 000030   000001 471500                    LDP1    1,,PR0
         0 000031   200004 473500                    LDP3    @NB_KEY,,AUTO
         0 000032   300000 236100                    LDQ     0,,PR3
         0 000033   000033 736000                    QLS     27
         0 000034   100002 552140                    STBQ    2,'40'O,PR1

     1369     2549    2              KEY.V$->VD$TEXTC_REMOTE.BYTES = BYTES;

   2549  0 000035   000001 471500                    LDP1    1,,PR0
         0 000036   100002 236100                    LDQ     2,,PR1
         0 000037   000033 772000                    QRL     27
         0 000040   300000 721100                    LXL1    0,,PR3
         0 000041   200005 474500                    LDP4    @BYTES,,AUTO
         0 000042   000000 622006                    EAX2    0,QL
         0 000043   040140 100540                    MLR     fill='040'O
         0 000044   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1
         0 000045   100002 200012                    ADSC9   2,,PR1                   cn=1,n=*X2

     1370     2550    2              END;

PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:218  
   2550  0 000046   000065 710000 0                  TRA     s:2557

     1371     2551    2           ELSE DO;

     1372     2552    2              KEY.REP# = %REP_LOCAL;

   2552  0 000047   000001 220003                    LDX0    1,DU
         0 000050   200003 471500                    LDP1    @KEY,,AUTO
         0 000051   100000 440100                    SXL0    0,,PR1

     1373     2553    2              ADDR(KEY.V$)->TEXTC.LENGTH# = NB_KEY;

   2553  0 000052   000000 236100                    LDQ     0,,PR0
         0 000053   000033 736000                    QLS     27
         0 000054   100001 552140                    STBQ    1,'40'O,PR1

     1374     2554    2              ADDR(KEY.V$)->TEXTC.BYTES = BYTES;

   2554  0 000055   100001 236100                    LDQ     1,,PR1
         0 000056   000033 772000                    QRL     27
         0 000057   000000 721100                    LXL1    0,,PR0
         0 000060   200005 473500                    LDP3    @BYTES,,AUTO
         0 000061   000000 622006                    EAX2    0,QL
         0 000062   040140 100540                    MLR     fill='040'O
         0 000063   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1
         0 000064   100001 200012                    ADSC9   1,,PR1                   cn=1,n=*X2

     1375     2555    2              END;

     1376     2556
     1377     2557    1           RETURN;

   2557  0 000065   000000 702200 xent               TSX2  ! X66_ARET

   2549  0 000066                       OALLOC_FAIL* null
     1378     2558
     1379     2559
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:219  
     1380     2560    1   OALLOC_FAILED: ;
     1381     2561    1           ALTRETURN;

   2561  0 000066   000000 702200 xent               TSX2  ! X66_AALT
     1382     2562
     1383     2563    1   END VDG$BUILD_KEY;
     1384     2564        %EOD;

PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:220  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$BUILD_KEY.
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:221  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BYTES                     3-0-0/w PTR         r     1 @KEY
     4-0-0/w PTR         r     1 @NB_KEY                   *0-0-0/c ACHR        r     1 BYTES
    *0-0-0/w STRC(72)    r     1 KEY                       *0-0-0/w SBIN        r     1 NB_KEY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 TEXTC                      0-0-0/w STRC(81)    r     1 VD$STRING_HEADER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$BUILD_KEY requires 55 words for executable code.
   Procedure VDG$BUILD_KEY requires 10 words of local(AUTO) storage.
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:222  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=VDG$BUILD_KEY File=VDG$UTILITY.:VDA5TSI                       FRI 07/04/97 11:24 Page:223  
          MINI XREF LISTING

BYTES
      2412**DCL        30--PROC     2549>>ASSIGN   2554>>ASSIGN
KEY
      2405**DCL        30--PROC
KEY.REP#
      2409**DCL      2547<<ASSIGN   2552<<ASSIGN
KEY.V$
      2409**DCL      2543<>CALL     2548>>ASSIGN   2549>>ASSIGN   2549>>ASSIGN   2553--ASSIGN   2554--ASSIGN
      2554--ASSIGN
NB_KEY
      2411**DCL        30--PROC     2412--IMP-SIZ  2542>>IF       2543>>CALL     2548>>ASSIGN   2549>>ASSIGN
      2553>>ASSIGN   2554>>ASSIGN
OALLOC_FAILED
      2549**LABEL    2543--CALLALT
TEXTC.BYTES
      2437**DCL      2554<<ASSIGN
TEXTC.LENGTH#
      2435**DCL      2437--IMP-SIZ  2553<<ASSIGN   2554>>ASSIGN
VD$STRING_HEADER
      2511**DCL      2543--CALL
VD$TEXTC_REMOTE.BYTES
      2498**DCL      2549<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      2496**DCL      2498--IMP-SIZ  2548<<ASSIGN   2549>>ASSIGN
VDG$OALLOC
      2415**DCL-ENT  2543--CALL

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:224  
     1385        1        /*T***********************************************************/
     1386        2        /*T*                                                         */
     1387        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1388        4        /*T*                                                         */
     1389        5        /*T***********************************************************/
     1390        6
     1391        7        /*D* NAME: VDG$FORMAT_NUMBER
     1392        8            PARAMETERS:
     1393        9                CLASS - A %CLS_ value.
     1394       10                NUMBER - An SBIN WORD.
     1395       11                NB_BUFFER - # bytes in BUFFER below.
     1396       12                BUFFER - Character buffer, uninitialized at entry.
     1397       13                START_INDEX - Index into BUFFER at which to start formating.
     1398       14                END_INDEX - Uninitialized word.
     1399       15            INPUT:
     1400       16            OUTPUT:
     1401       17                BUFFER will be modified.  Characters from START_INDEX thru
     1402       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1403       19                    NUMBER.
     1404       20                END_INDEX will contain the index into BUFFER of the byte
     1405       21                    after the last one occupied by the displayable form
     1406       22                    of NUMBER.
     1407       23            DESCRIPTION:
     1408       24                For %CLS_NUMBER, BINXCHAR into an auto buffer, then strip zeros
     1409       25                    and move to BUFFER.
     1410       26                For booleans and enumerated types, find the appropriate
     1411       27                    keyword based on the value of NUMBER, and copy the
     1412       28                    keyword into BUFFER.
     1413       29        */
     1414       30
     1415       31        VDG$FORMAT_NUMBER: PROC (CLASS, NUMBER, NB_BUFFER, BUFFER, START_INDEX,
     1416       32                  END_INDEX);
     1417       33
     1418       34    1   DCL CLASS SBIN;
     1419       35    1   DCL NUMBER SBIN;
     1420       36    1   DCL NB_BUFFER SBIN;
     1421       37    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:225  
     1422       38    1   DCL START_INDEX SBIN;
     1423       39    1   DCL END_INDEX SBIN;
     1424       40
     1425       41
     1426       42        %INCLUDE VD_MACROS_M;
     1427     2257        %INCLUDE B$TABLES_C;
     1428     2365
     1429     2366
     1430     2367        %B$SR_NON_ZERO;
     1431     2371        %VD_OBJECTS (STCLASS=SYMREF);
     1432     2411
     1433     2412
     1434     2413        %VD_TEXTC (NAME=BAD_VALUE_TEXTC, STCLASS=CONSTANT, IBYTES="%CHR_BAD_VALUE");
     1435     2554
     1436     2555
     1437     2556
     1438     2557    1   DCL BINBUF CHAR(%MXNB_NUM_DISPLAY);
     1439     2558    1   DCL MSD_INDEX SBIN;
     1440     2559    1   DCL TABLE_INDEX SBIN;
     1441     2560    1   DCL TABLE$ PTR;
     1442     2561    1   DCL TABLE_ENTRY$ PTR;
     1443     2562
     1444     2563
     1445     2564    1   DCL 1 TABLE BASED(TABLE$),
     1446     2565    1         2 N_ENTRIES# SBIN,
     1447     2566              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=BASED, MXNB=%MXNB_DW);
     1448     2707        %VD_TEXTC (NAME=TABLE$ENTRY, STCLASS="BASED(TABLE_ENTRY$)");
     1449     2848
     1450     2849
     1451     2850
     1452     2851    1           IF CLASS = %CLS_NUMBER THEN
     1453     2852    2   NUMBER_CLASS: DO;
     1454     2853    2              CALL BINXCHAR (BINBUF, NUMBER);
     1455     2854    2              CALL SEARCH (MSD_INDEX, TABLE_INDEX, B$SR_NON_ZERO,
     1456     2855    2                BINBUF, 1);    /* Skip leading sign */
     1457     2856    2              IF TABLE_INDEX = 0 THEN
     1458     2857    2                 MSD_INDEX = MSD_INDEX - 1;
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:226  
     1459     2858    3              IF SUBSTR(BINBUF, 0, 1) = %CHR_MINUS THEN DO;
     1460     2859    3                 CALL INSERT (BUFFER, START_INDEX, , %CHR_MINUS);
     1461     2860    3                 END_INDEX = START_INDEX + %LENGTHC(CHR_MINUS);
     1462     2861    3                 END;
     1463     2862    2              ELSE
     1464     2863    2                 END_INDEX = START_INDEX;
     1465     2864    2              CALL INSERT (BUFFER, END_INDEX, , SUBSTR(BINBUF, MSD_INDEX));
     1466     2865    2              END_INDEX = END_INDEX + (LENGTHC(BINBUF) - MSD_INDEX);
     1467     2866    2              END NUMBER_CLASS;
     1468     2867    1           ELSE
     1469     2868    2   ENUMERATED_CLASS: DO;
     1470     2869    2              TABLE_INDEX = NUMBER;     /* So we can change it */
     1471     2870    3              IF CLASS = %CLS_BOOLEAN THEN DO;
     1472     2871    3                 IF TABLE_INDEX > 0 THEN
     1473     2872    3                    TABLE_INDEX = %BITBIN(TRUE);
     1474     2873    3                 ELSE
     1475     2874    3                    TABLE_INDEX = %BITBIN(FALSE);
     1476     2875    3                 END;
     1477     2876
     1478     2877    2              IF CLASS >= %CLS_MX
     1479     2878    2                OR VD_OBJECTS.FMT$ (CLASS) = ADDR(NIL) THEN
     1480     2879    2                 TABLE_ENTRY$ = ADDR(BAD_VALUE_TEXTC);
     1481     2880    3              ELSE DO;
     1482     2881    3                 TABLE$ = VD_OBJECTS.FMT$ (CLASS);
     1483     2882    3                 IF TABLE_INDEX >= TABLE.N_ENTRIES# THEN
     1484     2883    3                    TABLE_ENTRY$ = ADDR(BAD_VALUE_TEXTC);
     1485     2884    3                 ELSE
     1486     2885    3                    TABLE_ENTRY$ = ADDR(TABLE.DW (TABLE_INDEX));
     1487     2886    3                 END;
     1488     2887
     1489     2888    2              CALL INSERT (BUFFER, START_INDEX, , TABLE$ENTRY.BYTES);
     1490     2889    2              END_INDEX = START_INDEX + TABLE$ENTRY.LENGTH#;
     1491     2890    2              END ENUMERATED_CLASS;
     1492     2891
     1493     2892    1           RETURN;
     1494     2893
     1495     2894    1   END VDG$FORMAT_NUMBER;
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:227  
     1496     2895        %EOD;

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:228  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_NUMBER.

   Procedure VDG$FORMAT_NUMBER requires 136 words for executable code.
   Procedure VDG$FORMAT_NUMBER requires 20 words of local(AUTO) storage.

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:229  

 Object Unit name= VDG$FORMAT_NUMBER                          File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:19.80 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  VDG$FORMAT_NUMBER
    1   Proc  even  none   136    210  VDG$FORMAT_NUMBER
    2  RoData even  none     2      2  VDG$FORMAT_NUMBER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        6  VDG$FORMAT_NUMBER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$SR_NON_ZERO$                        VD_OBJECTS                            B_VECTNIL
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:230  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:231  


     1385        1        /*T***********************************************************/
     1386        2        /*T*                                                         */
     1387        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1388        4        /*T*                                                         */
     1389        5        /*T***********************************************************/
     1390        6
     1391        7        /*D* NAME: VDG$FORMAT_NUMBER
     1392        8            PARAMETERS:
     1393        9                CLASS - A %CLS_ value.
     1394       10                NUMBER - An SBIN WORD.
     1395       11                NB_BUFFER - # bytes in BUFFER below.
     1396       12                BUFFER - Character buffer, uninitialized at entry.
     1397       13                START_INDEX - Index into BUFFER at which to start formating.
     1398       14                END_INDEX - Uninitialized word.
     1399       15            INPUT:
     1400       16            OUTPUT:
     1401       17                BUFFER will be modified.  Characters from START_INDEX thru
     1402       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1403       19                    NUMBER.
     1404       20                END_INDEX will contain the index into BUFFER of the byte
     1405       21                    after the last one occupied by the displayable form
     1406       22                    of NUMBER.
     1407       23            DESCRIPTION:
     1408       24                For %CLS_NUMBER, BINXCHAR into an auto buffer, then strip zeros
     1409       25                    and move to BUFFER.
     1410       26                For booleans and enumerated types, find the appropriate
     1411       27                    keyword based on the value of NUMBER, and copy the
     1412       28                    keyword into BUFFER.
     1413       29        */
     1414       30
     1415       31        VDG$FORMAT_NUMBER: PROC (CLASS, NUMBER, NB_BUFFER, BUFFER, START_INDEX,

     31  1 000000   000000 700200 xent  VDG$FORMAT_* TSX0  ! X66_AUTO_N
         1 000001   000024 000006                    ZERO    20,6

     1416       32                  END_INDEX);
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:232  
     1417       33
     1418       34    1   DCL CLASS SBIN;
     1419       35    1   DCL NUMBER SBIN;
     1420       36    1   DCL NB_BUFFER SBIN;
     1421       37    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1422       38    1   DCL START_INDEX SBIN;
     1423       39    1   DCL END_INDEX SBIN;
     1424       40
     1425       41
     1426       42        %INCLUDE VD_MACROS_M;
     1427     2257        %INCLUDE B$TABLES_C;
     1428     2365
     1429     2366
     1430     2367        %B$SR_NON_ZERO;
     1431     2371        %VD_OBJECTS (STCLASS=SYMREF);
     1432     2411
     1433     2412
     1434     2413        %VD_TEXTC (NAME=BAD_VALUE_TEXTC, STCLASS=CONSTANT, IBYTES="%CHR_BAD_VALUE");
     1435     2554
     1436     2555
     1437     2556
     1438     2557    1   DCL BINBUF CHAR(%MXNB_NUM_DISPLAY);
     1439     2558    1   DCL MSD_INDEX SBIN;
     1440     2559    1   DCL TABLE_INDEX SBIN;
     1441     2560    1   DCL TABLE$ PTR;
     1442     2561    1   DCL TABLE_ENTRY$ PTR;
     1443     2562
     1444     2563
     1445     2564    1   DCL 1 TABLE BASED(TABLE$),
     1446     2565    1         2 N_ENTRIES# SBIN,
     1447     2566              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=BASED, MXNB=%MXNB_DW);
     1448     2707        %VD_TEXTC (NAME=TABLE$ENTRY, STCLASS="BASED(TABLE_ENTRY$)");
     1449     2848
     1450     2849
     1451     2850
     1452     2851    1           IF CLASS = %CLS_NUMBER THEN

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:233  
   2851  1 000002   200003 470500                    LDP0    @CLASS,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   000033 115007                    CMPA    27,DL
         1 000005   000111 601000 1                  TNZ     ENUMERATED_CLASS

     1453     2852    2   NUMBER_CLASS: DO;

   2852  1 000006                       NUMBER_CLASS null
     1454     2853    2              CALL BINXCHAR (BINBUF, NUMBER);

   2853  1 000006   200004 471500                    LDP1    @NUMBER,,AUTO
         1 000007   000100 301500                    BTD
         1 000010   100000 000004                    NDSC9   0,,PR1                   cn=0,s=lsgnf,sf=0,n=4
         1 000011   200011 010015                    NDSC9   BINBUF,,AUTO             cn=0,s=lsgns,sf=0,n=13

     1455     2854    2              CALL SEARCH (MSD_INDEX, TABLE_INDEX, B$SR_NON_ZERO,

   2854  1 000012   000000 473400 xsym               LDP3    B$SR_NON_ZERO$
         1 000013   000000 164500                    TCT
         1 000014   200011 200014                    ADSC9   BINBUF,,AUTO             cn=1,n=12
         1 000015   300000 000100                    ARG     0,,PR3
         1 000016   200015 000100                    ARG     MSD_INDEX,,AUTO
         1 000017   200015 236100                    LDQ     MSD_INDEX,,AUTO
         1 000020   000044 737000                    LLS     36
         1 000021   000033 771000                    ARL     27
         1 000022   200016 755100                    STA     TABLE_INDEX,,AUTO
         1 000023   200015 551140                    STBA    MSD_INDEX,'40'O,AUTO
         1 000024   200015 054100                    AOS     MSD_INDEX,,AUTO

     1456     2855    2                BINBUF, 1);    /* Skip leading sign */
     1457     2856    2              IF TABLE_INDEX = 0 THEN

   2856  1 000025   000000 115003                    CMPA    0,DU
         1 000026   000031 601000 1                  TNZ     s:2858

     1458     2857    2                 MSD_INDEX = MSD_INDEX - 1;

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:234  
   2857  1 000027   000001 336007                    LCQ     1,DL
         1 000030   200015 056100                    ASQ     MSD_INDEX,,AUTO

     1459     2858    3              IF SUBSTR(BINBUF, 0, 1) = %CHR_MINUS THEN DO;

   2858  1 000031   200011 236100                    LDQ     BINBUF,,AUTO
         1 000032   777000 376003                    ANQ     -512,DU
         1 000033   055000 116003                    CMPQ    23040,DU
         1 000034   000056 601000 1                  TNZ     s:2863

     1460     2859    3                 CALL INSERT (BUFFER, START_INDEX, , %CHR_MINUS);

   2859  1 000035   200005 474500                    LDP4    @NB_BUFFER,,AUTO
         1 000036   400000 720100                    LXL0    0,,PR4
         1 000037   200007 475500                    LDP5    @START_INDEX,,AUTO
         1 000040   000000 636010                    EAQ     0,X0
         1 000041   000022 732000                    QRS     18
         1 000042   500000 136100                    SBLQ    0,,PR5
         1 000043   500000 235100                    LDA     0,,PR5
         1 000044   200006 476500                    LDP6    @BUFFER,,AUTO
         1 000045   000000 621006                    EAX1    0,QL
         1 000046   040145 100400                    MLR     fill='040'O
         1 000047   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000050   600000 000011                    ADSC9   0,A,PR6                  cn=0,n=*X1

     1461     2860    3                 END_INDEX = START_INDEX + %LENGTHC(CHR_MINUS);

   2860  1 000051   200010 477500                    LDP7    @END_INDEX,,AUTO
         1 000052   500000 235100                    LDA     0,,PR5
         1 000053   000001 035007                    ADLA    1,DL
         1 000054   700000 755100                    STA     0,,PR7

     1462     2861    3                 END;

   2861  1 000055   000062 710000 1                  TRA     s:2864

     1463     2862    2              ELSE
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:235  
     1464     2863    2                 END_INDEX = START_INDEX;

   2863  1 000056   200007 474500                    LDP4    @START_INDEX,,AUTO
         1 000057   200010 475500                    LDP5    @END_INDEX,,AUTO
         1 000060   400000 235100                    LDA     0,,PR4
         1 000061   500000 755100                    STA     0,,PR5

     1465     2864    2              CALL INSERT (BUFFER, END_INDEX, , SUBSTR(BINBUF, MSD_INDEX));

   2864  1 000062   200005 474500                    LDP4    @NB_BUFFER,,AUTO
         1 000063   400000 720100                    LXL0    0,,PR4
         1 000064   200010 475500                    LDP5    @END_INDEX,,AUTO
         1 000065   000000 636010                    EAQ     0,X0
         1 000066   000022 732000                    QRS     18
         1 000067   500000 136100                    SBLQ    0,,PR5
         1 000070   500000 235100                    LDA     0,,PR5
         1 000071   200015 721100                    LXL1    MSD_INDEX,,AUTO
         1 000072   777762 621011                    EAX1    -14,X1
         1 000073   777777 661003                    ERX1    -1,DU
         1 000074   200022 755100                    STA     TABLE_ENTRY$+2,,AUTO
         1 000075   200015 235100                    LDA     MSD_INDEX,,AUTO
         1 000076   200006 476500                    LDP6    @BUFFER,,AUTO
         1 000077   000000 620006                    EAX0    0,QL
         1 000100   200022 236100                    LDQ     TABLE_ENTRY$+2,,AUTO
         1 000101   040146 100545                    MLR     fill='040'O
         1 000102   200011 000011                    ADSC9   BINBUF,A,AUTO            cn=0,n=*X1
         1 000103   600000 000010                    ADSC9   0,Q,PR6                  cn=0,n=*X0

     1466     2865    2              END_INDEX = END_INDEX + (LENGTHC(BINBUF) - MSD_INDEX);

   2865  1 000104   500000 236100                    LDQ     0,,PR5
         1 000105   200015 136100                    SBLQ    MSD_INDEX,,AUTO
         1 000106   000015 036007                    ADLQ    13,DL
         1 000107   500000 756100                    STQ     0,,PR5

     1467     2866    2              END NUMBER_CLASS;

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:236  
   2866  1 000110   000207 710000 1                  TRA     s:2892

     1468     2867    1           ELSE
     1469     2868    2   ENUMERATED_CLASS: DO;

   2868  1 000111                       ENUMERATED_* null
     1470     2869    2              TABLE_INDEX = NUMBER;     /* So we can change it */

   2869  1 000111   200004 471500                    LDP1    @NUMBER,,AUTO
         1 000112   100000 235100                    LDA     0,,PR1
         1 000113   200016 755100                    STA     TABLE_INDEX,,AUTO

     1471     2870    3              IF CLASS = %CLS_BOOLEAN THEN DO;

   2870  1 000114   000000 235100                    LDA     0,,PR0
         1 000115   000003 115007                    CMPA    3,DL
         1 000116   000125 601000 1                  TNZ     s:2877

     1472     2871    3                 IF TABLE_INDEX > 0 THEN

   2871  1 000117   200016 236100                    LDQ     TABLE_INDEX,,AUTO
         1 000120   000124 604400 1                  TMOZ    s:2874

     1473     2872    3                    TABLE_INDEX = %BITBIN(TRUE);

   2872  1 000121   000001 235007                    LDA     1,DL
         1 000122   200016 755100                    STA     TABLE_INDEX,,AUTO
         1 000123   000125 710000 1                  TRA     s:2877

     1474     2873    3                 ELSE
     1475     2874    3                    TABLE_INDEX = %BITBIN(FALSE);

   2874  1 000124   200016 450100                    STZ     TABLE_INDEX,,AUTO

     1476     2875    3                 END;

     1477     2876
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:237  
     1478     2877    2              IF CLASS >= %CLS_MX

   2877  1 000125   000000 235100                    LDA     0,,PR0
         1 000126   000143 115007                    CMPA    99,DL
         1 000127   000135 605000 1                  TPL     s:2879
         1 000130   000000 235100                    LDA     0,,PR0
         1 000131   000001 735000                    ALS     1
         1 000132   000001 236005 xsym               LDQ     VD_OBJECTS+1,AL
         1 000133   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000134   000140 601000 1                  TNZ     s:2881

     1479     2878    2                OR VD_OBJECTS.FMT$ (CLASS) = ADDR(NIL) THEN
     1480     2879    2                 TABLE_ENTRY$ = ADDR(BAD_VALUE_TEXTC);

   2879  1 000135   000001 236000 2                  LDQ     1
         1 000136   200020 756100                    STQ     TABLE_ENTRY$,,AUTO
         1 000137   000157 710000 1                  TRA     s:2888

     1481     2880    3              ELSE DO;

     1482     2881    3                 TABLE$ = VD_OBJECTS.FMT$ (CLASS);

   2881  1 000140   000000 235100                    LDA     0,,PR0
         1 000141   000001 735000                    ALS     1
         1 000142   000001 236005 xsym               LDQ     VD_OBJECTS+1,AL
         1 000143   200017 756100                    STQ     TABLE$,,AUTO

     1483     2882    3                 IF TABLE_INDEX >= TABLE.N_ENTRIES# THEN

   2882  1 000144   200017 473500                    LDP3    TABLE$,,AUTO
         1 000145   200016 236100                    LDQ     TABLE_INDEX,,AUTO
         1 000146   300000 116100                    CMPQ    0,,PR3
         1 000147   000153 604000 1                  TMI     s:2885

     1484     2883    3                    TABLE_ENTRY$ = ADDR(BAD_VALUE_TEXTC);

   2883  1 000150   000001 236000 2                  LDQ     1
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:238  
         1 000151   200020 756100                    STQ     TABLE_ENTRY$,,AUTO
         1 000152   000157 710000 1                  TRA     s:2888

     1485     2884    3                 ELSE
     1486     2885    3                    TABLE_ENTRY$ = ADDR(TABLE.DW (TABLE_INDEX));

   2885  1 000153   000025 736000                    QLS     21
         1 000154   000001 036003                    ADLQ    1,DU
         1 000155   200017 036100                    ADLQ    TABLE$,,AUTO
         1 000156   200020 756100                    STQ     TABLE_ENTRY$,,AUTO

     1487     2886    3                 END;

     1488     2887
     1489     2888    2              CALL INSERT (BUFFER, START_INDEX, , TABLE$ENTRY.BYTES);

   2888  1 000157   200005 473500                    LDP3    @NB_BUFFER,,AUTO
         1 000160   300000 720100                    LXL0    0,,PR3
         1 000161   200020 474500                    LDP4    TABLE_ENTRY$,,AUTO
         1 000162   000100 101500                    MRL     fill='000'O
         1 000163   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
         1 000164   200022 000002                    ADSC9   TABLE_ENTRY$+2,,AUTO     cn=0,n=2
         1 000165   200022 221100                    LDX1    TABLE_ENTRY$+2,,AUTO
         1 000166   200007 475500                    LDP5    @START_INDEX,,AUTO
         1 000167   000000 636010                    EAQ     0,X0
         1 000170   000022 732000                    QRS     18
         1 000171   500000 136100                    SBLQ    0,,PR5
         1 000172   500000 235100                    LDA     0,,PR5
         1 000173   200006 476500                    LDP6    @BUFFER,,AUTO
         1 000174   000000 620006                    EAX0    0,QL
         1 000175   040145 100540                    MLR     fill='040'O
         1 000176   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
         1 000177   600000 000010                    ADSC9   0,A,PR6                  cn=0,n=*X0

     1490     2889    2              END_INDEX = START_INDEX + TABLE$ENTRY.LENGTH#;

   2889  1 000200   000100 101500                    MRL     fill='000'O
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:239  
         1 000201   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
         1 000202   200022 000004                    ADSC9   TABLE_ENTRY$+2,,AUTO     cn=0,n=4
         1 000203   200022 236100                    LDQ     TABLE_ENTRY$+2,,AUTO
         1 000204   500000 036100                    ADLQ    0,,PR5
         1 000205   200010 477500                    LDP7    @END_INDEX,,AUTO
         1 000206   700000 756100                    STQ     0,,PR7

     1491     2890    2              END ENUMERATED_CLASS;

     1492     2891
     1493     2892    1           RETURN;

   2892  1 000207   000000 702200 xent               TSX2  ! X66_ARET
     1494     2893
     1495     2894    1   END VDG$FORMAT_NUMBER;
     1496     2895        %EOD;

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:240  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_NUMBER.
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:241  

 **** Variables and constants ****

  ****  Section 000 RoData VDG$FORMAT_NUMBER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(27)    r     1 BAD_VALUE_TEXTC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @BUFFER                    3-0-0/w PTR         r     1 @CLASS
    10-0-0/w PTR         r     1 @END_INDEX                 5-0-0/w PTR         r     1 @NB_BUFFER
     4-0-0/w PTR         r     1 @NUMBER                    7-0-0/w PTR         r     1 @START_INDEX
    11-0-0/c CHAR(13)    r     1 BINBUF                    *0-0-0/c ACHR        r     1 BUFFER
    *0-0-0/w SBIN        r     1 CLASS                     *0-0-0/w SBIN        r     1 END_INDEX
    15-0-0/w SBIN        r     1 MSD_INDEX                 *0-0-0/w SBIN        r     1 NB_BUFFER
    *0-0-0/w SBIN        r     1 NUMBER                    *0-0-0/w SBIN        r     1 START_INDEX
    17-0-0/w PTR         r     1 TABLE$                    20-0-0/w PTR         r     1 TABLE_ENTRY$
    16-0-0/w SBIN        r     1 TABLE_INDEX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_ZERO$
     0-0-0/w STRC(72)    r     1 VD_OBJECTS(0:98)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:242  
     0-0-0/d STRC(4608)  r     1 B$SR_NON_ZERO              0-0-0/w STRC(324)   r     1 TABLE
     0-0-0/c ASTR(9)     r     1 TABLE$ENTRY


   Procedure VDG$FORMAT_NUMBER requires 136 words for executable code.
   Procedure VDG$FORMAT_NUMBER requires 20 words of local(AUTO) storage.
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:243  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:244  
          MINI XREF LISTING

B$SR_NON_ZERO
      2369**DCL      2854>>CALLBLT
B$SR_NON_ZERO$
      2368**DCL      2369--IMP-PTR  2854>>CALLBLT
BAD_VALUE_TEXTC
      2547**DCL      2879--ASSIGN   2883--ASSIGN
BINBUF
      2557**DCL      2853<<CALLBLT  2854>>CALLBLT  2858>>IF       2864>>CALLBLT  2865--ASSIGN
BUFFER
        37**DCL        31--PROC     2859<<CALLBLT  2864<<CALLBLT  2888<<CALLBLT
CLASS
        34**DCL        31--PROC     2851>>IF       2870>>IF       2877>>IF       2877>>IF       2881>>ASSIGN
END_INDEX
        39**DCL        31--PROC     2860<<ASSIGN   2863<<ASSIGN   2864>>CALLBLT  2865<<ASSIGN   2865>>ASSIGN
      2889<<ASSIGN
MSD_INDEX
      2558**DCL      2854<<CALLBLT  2857<<ASSIGN   2857>>ASSIGN   2864>>CALLBLT  2865>>ASSIGN
NB_BUFFER
        36**DCL        31--PROC       37--IMP-SIZ  2859>>CALLBLT  2864>>CALLBLT  2888>>CALLBLT
NUMBER
        35**DCL        31--PROC     2853>>CALLBLT  2869>>ASSIGN
START_INDEX
        38**DCL        31--PROC     2859>>CALLBLT  2860>>ASSIGN   2863>>ASSIGN   2888>>CALLBLT  2889>>ASSIGN
TABLE.DW
      2702**DCL      2885--ASSIGN
TABLE.N_ENTRIES#
      2565**DCL      2882>>IF
TABLE$
      2560**DCL      2564--IMP-PTR  2881<<ASSIGN   2882>>IF       2885>>ASSIGN
TABLE$ENTRY.BYTES
      2845**DCL      2888>>CALLBLT
TABLE$ENTRY.LENGTH#
PL6.E3A0      #012=VDG$FORMAT_NUMBER File=VDG$UTILITY.:VDA5TSI                   FRI 07/04/97 11:24 Page:245  
      2845**DCL      2845--IMP-SIZ  2888>>CALLBLT  2889>>ASSIGN
TABLE_ENTRY$
      2561**DCL      2841--IMP-PTR  2879<<ASSIGN   2883<<ASSIGN   2885<<ASSIGN   2888>>CALLBLT  2888>>CALLBLT
      2889>>ASSIGN
TABLE_INDEX
      2559**DCL      2854<<CALLBLT  2856>>IF       2869<<ASSIGN   2871>>IF       2872<<ASSIGN   2874<<ASSIGN
      2882>>IF       2885>>ASSIGN
VD_OBJECTS.FMT$
      2403**DCL      2877>>IF       2881>>ASSIGN

PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:246  
     1497        1        /*T***********************************************************/
     1498        2        /*T*                                                         */
     1499        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1500        4        /*T*                                                         */
     1501        5        /*T***********************************************************/
     1502        6
     1503        7        /*D* NAME: VDG$FORMAT_KEY
     1504        8            PARAMETERS:
     1505        9                KEY - A VD$KEY structure containing the key to format.
     1506       10                    If KEY.TYPE# is %KT_NUMBER, then KEY.REP# must
     1507       11                    be %REP_LOCAL and the key must be an edit key.
     1508       12                NB_BUFFER - # bytes in BUFFER below.
     1509       13                BUFFER - Character buffer, uninitialized at entry.
     1510       14                START_INDEX - Index into BUFFER at which to start formating.
     1511       15                END_INDEX - Uninitialized word.
     1512       16            INPUT:
     1513       17            OUTPUT:
     1514       18                BUFFER will be modified.  Characters from START_INDEX thru
     1515       19                    (new value of END_INDEX) - 1, will be the displayable form of
     1516       20                    KEY.V.
     1517       21                END_INDEX will contain the index into BUFFER of the byte
     1518       22                    after the last one occupied by the displayable form
     1519       23                    of KEY.V.
     1520       24            DESCRIPTION:
     1521       25                If KEY is a number:
     1522       26                    Format 99999.999.  Truncate insignificant zeros, both
     1523       27                        leading and trailing.
     1524       28                If KEY is a string:
     1525       29                    Copy it to BUFFER.  Translate non-displayable chars
     1526       30                        to %CHR_NON_DISPLAYABLE.
     1527       31        */
     1528       32
     1529       33        VDG$FORMAT_KEY: PROC (KEY, NB_BUFFER, BUFFER, START_INDEX, END_INDEX);
     1530       34
     1531       35
     1532       36        %INCLUDE VD_MACROS_M;
     1533     2251        %INCLUDE B$TABLES_C;
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:247  
     1534     2359
     1535     2360
     1536     2361        %VD$KEY (NAME=KEY, STCLASS=PARAM);
     1537     2375    1   DCL NB_BUFFER SBIN;
     1538     2376    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1539     2377    1   DCL START_INDEX SBIN;
     1540     2378    1   DCL END_INDEX SBIN;
     1541     2379
     1542     2380
     1543     2381        %B$SR_NON_ZERO;
     1544     2385        %B$XL_ASC_DUMP;
     1545     2389
     1546     2390
     1547     2391
     1548     2392    1   DCL KEY$ PTR;
     1549     2393    1   DCL KEY_FIELD CHAR(%(MXNB_EDITKEY_INTEGER+1+MXNB_EDITKEY_FRACT));
     1550     2394    1   DCL TABLE_VAL UBIN;
     1551     2395    1   DCL LSD_INDEX UBIN;
     1552     2396    1   DCL MSD_INDEX UBIN;
     1553     2397
     1554     2398
     1555     2399        %VD$TEXTC_NUMBER (NAME=KEY$NUMBER, STCLASS="BASED(KEY$)");
     1556     2413        %VD$TEXTC (NAME=KEY$TEXTC, STCLASS="BASED(KEY$)");
     1557     2436        %VD$TEXTC_REMOTE;
     1558     2497
     1559     2498
     1560     2499
     1561     2500    1           END_INDEX = START_INDEX;    /* Just in case */
     1562     2501                %GETKEY (KEY=KEY, PTR=KEY$);
     1563     2511
     1564     2512    1           IF KEY.TYPE# = %KT_NUMBER THEN
     1565     2513    2   KT_NUMBER: DO;
     1566     2514    2              CALL BINCHAR (KEY_FIELD, KEY$NUMBER.BYTES#);
     1567     2515    2              CALL SEARCH (MSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,
     1568     2516    2                SUBSTR (KEY_FIELD, 0, SIZEC(KEY_FIELD)-1));
     1569     2517    2              LSD_INDEX = SIZEC(KEY_FIELD) - MSD_INDEX;
     1570     2518    2              SUBSTR (BUFFER, START_INDEX, LSD_INDEX) =
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:248  
     1571     2519    2                SUBSTR (KEY_FIELD, MSD_INDEX, LSD_INDEX);
     1572     2520    2              END_INDEX = START_INDEX + LSD_INDEX;
     1573     2521    2              END KT_NUMBER;
     1574     2522    1           ELSE IF KEY.TYPE# = %KT_EDITKEY THEN
     1575     2523    2   KT_EDITKEY: DO;
     1576     2524    2                 CALL BINCHAR (KEY_FIELD, KEY$NUMBER.BYTES#);
     1577     2525    2                 CALL SEARCH (MSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,
     1578     2526    2                   SUBSTR(KEY_FIELD, 0, %MXNB_EDITKEY_INTEGER));
     1579     2527    2                 CALL SEARCHR (LSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,
     1580     2528    2                   SUBSTR(KEY_FIELD, %MXNB_EDITKEY_INTEGER));
     1581     2529    2                 IF TABLE_VAL = 0 THEN
     1582     2530    2                    LSD_INDEX = 0;
     1583     2531                   /* Always format at least 1 fraction digit */
     1584     2532    2                 LSD_INDEX = MAXIMUM (LSD_INDEX, 1);
     1585     2533    2                 CALL INSERT (BUFFER, START_INDEX, , SUBSTR(KEY_FIELD,
     1586     2534    2                   MSD_INDEX, %(MXNB_EDITKEY_INTEGER+1) - MSD_INDEX),
     1587     2535    2                   %CHR_PERIOD,
     1588     2536    2                   SUBSTR(KEY_FIELD, %(MXNB_EDITKEY_INTEGER+1), LSD_INDEX));
     1589     2537    2                 END_INDEX = START_INDEX +
     1590     2538    2                   (%(MXNB_EDITKEY_INTEGER+1) - MSD_INDEX) + 1 + LSD_INDEX;
     1591     2539    2                 END KT_EDITKEY;
     1592     2540    1              ELSE
     1593     2541    2   KT_STRING: DO;
     1594     2542    2                 CALL XLATE (SUBSTR(BUFFER, START_INDEX),
     1595     2543    2                   B$XL_ASC_DUMP, KEY$TEXTC.BYTES);
     1596     2544    2                 END_INDEX = START_INDEX + KEY$TEXTC.LENGTH#;
     1597     2545    2                 END KT_STRING;
     1598     2546
     1599     2547    1           RETURN;
     1600     2548
     1601     2549    1   END VDG$FORMAT_KEY;
     1602     2550        %EOD;

PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:249  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_KEY.

   Procedure VDG$FORMAT_KEY requires 164 words for executable code.
   Procedure VDG$FORMAT_KEY requires 20 words of local(AUTO) storage.

PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:250  

 Object Unit name= VDG$FORMAT_KEY                             File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:27.92 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   164    244  VDG$FORMAT_KEY
    1  RoData even  none     1      1  VDG$FORMAT_KEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        5  VDG$FORMAT_KEY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$SR_NON_ZERO$                   r    B$XL_ASC_DUMP$                        B_VECTNIL
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:251  


     1497        1        /*T***********************************************************/
     1498        2        /*T*                                                         */
     1499        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1500        4        /*T*                                                         */
     1501        5        /*T***********************************************************/
     1502        6
     1503        7        /*D* NAME: VDG$FORMAT_KEY
     1504        8            PARAMETERS:
     1505        9                KEY - A VD$KEY structure containing the key to format.
     1506       10                    If KEY.TYPE# is %KT_NUMBER, then KEY.REP# must
     1507       11                    be %REP_LOCAL and the key must be an edit key.
     1508       12                NB_BUFFER - # bytes in BUFFER below.
     1509       13                BUFFER - Character buffer, uninitialized at entry.
     1510       14                START_INDEX - Index into BUFFER at which to start formating.
     1511       15                END_INDEX - Uninitialized word.
     1512       16            INPUT:
     1513       17            OUTPUT:
     1514       18                BUFFER will be modified.  Characters from START_INDEX thru
     1515       19                    (new value of END_INDEX) - 1, will be the displayable form of
     1516       20                    KEY.V.
     1517       21                END_INDEX will contain the index into BUFFER of the byte
     1518       22                    after the last one occupied by the displayable form
     1519       23                    of KEY.V.
     1520       24            DESCRIPTION:
     1521       25                If KEY is a number:
     1522       26                    Format 99999.999.  Truncate insignificant zeros, both
     1523       27                        leading and trailing.
     1524       28                If KEY is a string:
     1525       29                    Copy it to BUFFER.  Translate non-displayable chars
     1526       30                        to %CHR_NON_DISPLAYABLE.
     1527       31        */
     1528       32
     1529       33        VDG$FORMAT_KEY: PROC (KEY, NB_BUFFER, BUFFER, START_INDEX, END_INDEX);

     33  0 000000   000000 700200 xent  VDG$FORMAT_* TSX0  ! X66_AUTO_5
         0 000001   000024 000005                    ZERO    20,5
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:252  

     1530       34
     1531       35
     1532       36        %INCLUDE VD_MACROS_M;
     1533     2251        %INCLUDE B$TABLES_C;
     1534     2359
     1535     2360
     1536     2361        %VD$KEY (NAME=KEY, STCLASS=PARAM);
     1537     2375    1   DCL NB_BUFFER SBIN;
     1538     2376    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1539     2377    1   DCL START_INDEX SBIN;
     1540     2378    1   DCL END_INDEX SBIN;
     1541     2379
     1542     2380
     1543     2381        %B$SR_NON_ZERO;
     1544     2385        %B$XL_ASC_DUMP;
     1545     2389
     1546     2390
     1547     2391
     1548     2392    1   DCL KEY$ PTR;
     1549     2393    1   DCL KEY_FIELD CHAR(%(MXNB_EDITKEY_INTEGER+1+MXNB_EDITKEY_FRACT));
     1550     2394    1   DCL TABLE_VAL UBIN;
     1551     2395    1   DCL LSD_INDEX UBIN;
     1552     2396    1   DCL MSD_INDEX UBIN;
     1553     2397
     1554     2398
     1555     2399        %VD$TEXTC_NUMBER (NAME=KEY$NUMBER, STCLASS="BASED(KEY$)");
     1556     2413        %VD$TEXTC (NAME=KEY$TEXTC, STCLASS="BASED(KEY$)");
     1557     2436        %VD$TEXTC_REMOTE;
     1558     2497
     1559     2498
     1560     2499
     1561     2500    1           END_INDEX = START_INDEX;    /* Just in case */

   2500  0 000002   200006 470500                    LDP0    @START_INDEX,,AUTO
         0 000003   200007 471500                    LDP1    @END_INDEX,,AUTO
         0 000004   000000 235100                    LDA     0,,PR0
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:253  
         0 000005   100000 755100                    STA     0,,PR1

     1562     2501                %GETKEY (KEY=KEY, PTR=KEY$);

   2508  0 000006   200003 473500                    LDP3    @KEY,,AUTO
         0 000007   300000 720100                    LXL0    0,,PR3
         0 000010   000002 100003                    CMPX0   2,DU
         0 000011   000016 601000 0                  TNZ     s:2508+8

   2508  0 000012   300001 474500                    LDP4    1,,PR3
         0 000013   400002 635500                    EPPR5   2,,PR4
         0 000014   200010 455500                    STP5    KEY$,,AUTO
         0 000015   000021 710000 0                  TRA     s:2512

   2508  0 000016   200003 236100                    LDQ     @KEY,,AUTO
         0 000017   000001 036003                    ADLQ    1,DU
         0 000020   200010 756100                    STQ     KEY$,,AUTO

     1563     2511
     1564     2512    1           IF KEY.TYPE# = %KT_NUMBER THEN

   2512  0 000021   300000 221100                    LDX1    0,,PR3
         0 000022   000001 101003                    CMPX1   1,DU
         0 000023   000067 601000 0                  TNZ     s:2522

     1565     2513    2   KT_NUMBER: DO;

   2513  0 000024                       KT_NUMBER    null
     1566     2514    2              CALL BINCHAR (KEY_FIELD, KEY$NUMBER.BYTES#);

   2514  0 000024   200010 474500                    LDP4    KEY$,,AUTO
         0 000025   400000 236100                    LDQ     0,,PR4
         0 000026   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000027   000000 235003                    LDA     0,DU
         0 000030   200020 757100                    STAQ    MSD_INDEX+2,,AUTO
         0 000031   000100 301500                    BTD
         0 000032   200020 000010                    NDSC9   MSD_INDEX+2,,AUTO        cn=0,s=lsgnf,sf=0,n=8
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:254  
         0 000033   200011 030011                    NDSC9   KEY_FIELD,,AUTO          cn=0,s=nosgn,sf=0,n=9

     1567     2515    2              CALL SEARCH (MSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,

   2515  0 000034   000000 475400 xsym               LDP5    B$SR_NON_ZERO$
         0 000035   000000 164500                    TCT
         0 000036   200011 000010                    ADSC9   KEY_FIELD,,AUTO          cn=0,n=8
         0 000037   500000 000100                    ARG     0,,PR5
         0 000040   200016 000100                    ARG     MSD_INDEX,,AUTO
         0 000041   200016 236100                    LDQ     MSD_INDEX,,AUTO
         0 000042   000044 737000                    LLS     36
         0 000043   000033 771000                    ARL     27
         0 000044   200014 755100                    STA     TABLE_VAL,,AUTO
         0 000045   200016 551140                    STBA    MSD_INDEX,'40'O,AUTO

     1568     2516    2                SUBSTR (KEY_FIELD, 0, SIZEC(KEY_FIELD)-1));
     1569     2517    2              LSD_INDEX = SIZEC(KEY_FIELD) - MSD_INDEX;

   2517  0 000046   000011 236007                    LDQ     9,DL
         0 000047   200016 136100                    SBLQ    MSD_INDEX,,AUTO
         0 000050   200015 756100                    STQ     LSD_INDEX,,AUTO

     1570     2518    2              SUBSTR (BUFFER, START_INDEX, LSD_INDEX) =

   2518  0 000051   200004 476500                    LDP6    @NB_BUFFER,,AUTO
         0 000052   600000 720100                    LXL0    0,,PR6
         0 000053   000000 235100                    LDA     0,,PR0
         0 000054   000000 621006                    EAX1    0,QL
         0 000055   200016 236100                    LDQ     MSD_INDEX,,AUTO
         0 000056   200005 477500                    LDP7    @BUFFER,,AUTO
         0 000057   200015 722100                    LXL2    LSD_INDEX,,AUTO
         0 000060   040145 100546                    MLR     fill='040'O
         0 000061   200011 000011                    ADSC9   KEY_FIELD,Q,AUTO         cn=0,n=*X1
         0 000062   700000 000012                    ADSC9   0,A,PR7                  cn=0,n=*X2

     1571     2519    2                SUBSTR (KEY_FIELD, MSD_INDEX, LSD_INDEX);
     1572     2520    2              END_INDEX = START_INDEX + LSD_INDEX;
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:255  

   2520  0 000063   000000 236100                    LDQ     0,,PR0
         0 000064   200015 036100                    ADLQ    LSD_INDEX,,AUTO
         0 000065   100000 756100                    STQ     0,,PR1

     1573     2521    2              END KT_NUMBER;

   2521  0 000066   000243 710000 0                  TRA     s:2547

     1574     2522    1           ELSE IF KEY.TYPE# = %KT_EDITKEY THEN

   2522  0 000067   000003 101003                    CMPX1   3,DU
         0 000070   000215 601000 0                  TNZ     KT_STRING

     1575     2523    2   KT_EDITKEY: DO;

   2523  0 000071                       KT_EDITKEY   null
     1576     2524    2                 CALL BINCHAR (KEY_FIELD, KEY$NUMBER.BYTES#);

   2524  0 000071   200010 474500                    LDP4    KEY$,,AUTO
         0 000072   400000 236100                    LDQ     0,,PR4
         0 000073   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000074   000000 235003                    LDA     0,DU
         0 000075   200020 757100                    STAQ    MSD_INDEX+2,,AUTO
         0 000076   000100 301500                    BTD
         0 000077   200020 000010                    NDSC9   MSD_INDEX+2,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         0 000100   200011 030011                    NDSC9   KEY_FIELD,,AUTO          cn=0,s=nosgn,sf=0,n=9

     1577     2525    2                 CALL SEARCH (MSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,

   2525  0 000101   000000 475400 xsym               LDP5    B$SR_NON_ZERO$
         0 000102   000000 164500                    TCT
         0 000103   200011 000005                    ADSC9   KEY_FIELD,,AUTO          cn=0,n=5
         0 000104   500000 000100                    ARG     0,,PR5
         0 000105   200016 000100                    ARG     MSD_INDEX,,AUTO
         0 000106   200016 236100                    LDQ     MSD_INDEX,,AUTO
         0 000107   000044 737000                    LLS     36
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:256  
         0 000110   000033 771000                    ARL     27
         0 000111   200014 755100                    STA     TABLE_VAL,,AUTO
         0 000112   200016 551140                    STBA    MSD_INDEX,'40'O,AUTO

     1578     2526    2                   SUBSTR(KEY_FIELD, 0, %MXNB_EDITKEY_INTEGER));
     1579     2527    2                 CALL SEARCHR (LSD_INDEX, TABLE_VAL, B$SR_NON_ZERO,

   2527  0 000113   000000 165500                    TCTR
         0 000114   200012 200004                    ADSC9   KEY_FIELD+1,,AUTO        cn=1,n=4
         0 000115   500000 000100                    ARG     0,,PR5
         0 000116   200015 000100                    ARG     LSD_INDEX,,AUTO
         0 000117   200015 236100                    LDQ     LSD_INDEX,,AUTO
         0 000120   000044 737000                    LLS     36
         0 000121   000033 771000                    ARL     27
         0 000122   200014 755100                    STA     TABLE_VAL,,AUTO
         0 000123   200015 551140                    STBA    LSD_INDEX,'40'O,AUTO
         0 000124   000127 606400 0                  TTN     s:2529
         0 000125   000003 236007                    LDQ     3,DL
         0 000126   200015 156100                    SSQ     LSD_INDEX,,AUTO

     1580     2528    2                   SUBSTR(KEY_FIELD, %MXNB_EDITKEY_INTEGER));
     1581     2529    2                 IF TABLE_VAL = 0 THEN

   2529  0 000127   000000 115003                    CMPA    0,DU
         0 000130   000132 601000 0                  TNZ     s:2532

     1582     2530    2                    LSD_INDEX = 0;

   2530  0 000131   200015 450100                    STZ     LSD_INDEX,,AUTO

     1583     2531                   /* Always format at least 1 fraction digit */
     1584     2532    2                 LSD_INDEX = MAXIMUM (LSD_INDEX, 1);

   2532  0 000132   000001 236007                    LDQ     1,DL
         0 000133   200015 116100                    CMPQ    LSD_INDEX,,AUTO
         0 000134   000136 603000 0                  TRC     s:2532+4
         0 000135   200015 236100                    LDQ     LSD_INDEX,,AUTO
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:257  
         0 000136   200015 756100                    STQ     LSD_INDEX,,AUTO

     1585     2533    2                 CALL INSERT (BUFFER, START_INDEX, , SUBSTR(KEY_FIELD,

   2533  0 000137   200004 476500                    LDP6    @NB_BUFFER,,AUTO
         0 000140   600000 720100                    LXL0    0,,PR6
         0 000141   000000 636010                    EAQ     0,X0
         0 000142   000022 732000                    QRS     18
         0 000143   000000 136100                    SBLQ    0,,PR0
         0 000144   000000 235100                    LDA     0,,PR0
         0 000145   200016 721100                    LXL1    MSD_INDEX,,AUTO
         0 000146   777771 621011                    EAX1    -7,X1
         0 000147   777777 661003                    ERX1    -1,DU
         0 000150   200020 755100                    STA     MSD_INDEX+2,,AUTO
         0 000151   200016 235100                    LDA     MSD_INDEX,,AUTO
         0 000152   200005 477500                    LDP7    @BUFFER,,AUTO
         0 000153   000000 620006                    EAX0    0,QL
         0 000154   200021 756100                    STQ     MSD_INDEX+3,,AUTO
         0 000155   200020 236100                    LDQ     MSD_INDEX+2,,AUTO
         0 000156   040146 100545                    MLR     fill='040'O
         0 000157   200011 000011                    ADSC9   KEY_FIELD,A,AUTO         cn=0,n=*X1
         0 000160   700000 000010                    ADSC9   0,Q,PR7                  cn=0,n=*X0
         0 000161   200021 236100                    LDQ     MSD_INDEX+3,,AUTO
         0 000162   200016 036100                    ADLQ    MSD_INDEX,,AUTO
         0 000163   000006 116007                    CMPQ    6,DL
         0 000164   000207 604400 0                  TMOZ    s:2537
         0 000165   200022 756100                    STQ     MSD_INDEX+4,,AUTO
         0 000166   200020 236100                    LDQ     MSD_INDEX+2,,AUTO
         0 000167   200016 136100                    SBLQ    MSD_INDEX,,AUTO
         0 000170   200022 720100                    LXL0    MSD_INDEX+4,,AUTO
         0 000171   777772 622010                    EAX2    -6,X0
         0 000172   040146 100400                    MLR     fill='040'O
         0 000173   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000174   700001 400012                    ADSC9   1,Q,PR7                  cn=2,n=*X2
         0 000175   200023 756100                    STQ     MSD_INDEX+5,,AUTO
         0 000176   200022 236100                    LDQ     MSD_INDEX+4,,AUTO
         0 000177   000007 116007                    CMPQ    7,DL
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:258  
         0 000200   000207 604400 0                  TMOZ    s:2537
         0 000201   777771 623006                    EAX3    -7,QL
         0 000202   200015 724100                    LXL4    LSD_INDEX,,AUTO
         0 000203   200023 235100                    LDA     MSD_INDEX+5,,AUTO
         0 000204   040145 100540                    MLR     fill='040'O
         0 000205   200012 400014                    ADSC9   KEY_FIELD+1,,AUTO        cn=2,n=*X4
         0 000206   700001 600013                    ADSC9   1,A,PR7                  cn=3,n=*X3

     1586     2534    2                   MSD_INDEX, %(MXNB_EDITKEY_INTEGER+1) - MSD_INDEX),
     1587     2535    2                   %CHR_PERIOD,
     1588     2536    2                   SUBSTR(KEY_FIELD, %(MXNB_EDITKEY_INTEGER+1), LSD_INDEX));
     1589     2537    2                 END_INDEX = START_INDEX +

   2537  0 000207   000000 236100                    LDQ     0,,PR0
         0 000210   200016 136100                    SBLQ    MSD_INDEX,,AUTO
         0 000211   200015 036100                    ADLQ    LSD_INDEX,,AUTO
         0 000212   000007 036007                    ADLQ    7,DL
         0 000213   100000 756100                    STQ     0,,PR1

     1590     2538    2                   (%(MXNB_EDITKEY_INTEGER+1) - MSD_INDEX) + 1 + LSD_INDEX;
     1591     2539    2                 END KT_EDITKEY;

   2539  0 000214   000243 710000 0                  TRA     s:2547

     1592     2540    1              ELSE
     1593     2541    2   KT_STRING: DO;

   2541  0 000215                       KT_STRING    null
     1594     2542    2                 CALL XLATE (SUBSTR(BUFFER, START_INDEX),

   2542  0 000215   200004 474500                    LDP4    @NB_BUFFER,,AUTO
         0 000216   400000 722100                    LXL2    0,,PR4
         0 000217   000000 636012                    EAQ     0,X2
         0 000220   000022 732000                    QRS     18
         0 000221   000000 136100                    SBLQ    0,,PR0
         0 000222   000000 235100                    LDA     0,,PR0
         0 000223   200010 475500                    LDP5    KEY$,,AUTO
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:259  
         0 000224   200020 756100                    STQ     MSD_INDEX+2,,AUTO
         0 000225   500000 236100                    LDQ     0,,PR5
         0 000226   000033 772000                    QRL     27
         0 000227   000000 620006                    EAX0    0,QL
         0 000230   000000 476400 xsym               LDP6    B$XL_ASC_DUMP$
         0 000231   200005 477500                    LDP7    @BUFFER,,AUTO
         0 000232   200020 721100                    LXL1    MSD_INDEX+2,,AUTO
         0 000233   040145 160540                    MVT     fill='040'O
         0 000234   500000 200010                    ADSC9   0,,PR5                   cn=1,n=*X0
         0 000235   700000 000011                    ADSC9   0,A,PR7                  cn=0,n=*X1
         0 000236   600000 000100                    ARG     0,,PR6

     1595     2543    2                   B$XL_ASC_DUMP, KEY$TEXTC.BYTES);
     1596     2544    2                 END_INDEX = START_INDEX + KEY$TEXTC.LENGTH#;

   2544  0 000237   500000 236100                    LDQ     0,,PR5
         0 000240   000033 772000                    QRL     27
         0 000241   000000 036100                    ADLQ    0,,PR0
         0 000242   100000 756100                    STQ     0,,PR1

     1597     2545    2                 END KT_STRING;

     1598     2546
     1599     2547    1           RETURN;

   2547  0 000243   000000 702200 xent               TSX2  ! X66_ARET
     1600     2548
     1601     2549    1   END VDG$FORMAT_KEY;
     1602     2550        %EOD;

PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:260  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_KEY.
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:261  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUFFER                    7-0-0/w PTR         r     1 @END_INDEX
     3-0-0/w PTR         r     1 @KEY                       4-0-0/w PTR         r     1 @NB_BUFFER
     6-0-0/w PTR         r     1 @START_INDEX              *0-0-0/c ACHR        r     1 BUFFER
    *0-0-0/w SBIN        r     1 END_INDEX                 *0-0-0/w STRC(72)    r     1 KEY
    10-0-0/w PTR         r     1 KEY$                      11-0-0/c CHAR(9)     r     1 KEY_FIELD
    15-0-0/w UBIN        r     1 LSD_INDEX                 16-0-0/w UBIN        r     1 MSD_INDEX
    *0-0-0/w SBIN        r     1 NB_BUFFER                 *0-0-0/w SBIN        r     1 START_INDEX
    14-0-0/w UBIN        r     1 TABLE_VAL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_ZERO$             0-0-0/w PTR         r     1 B$XL_ASC_DUMP$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$SR_NON_ZERO              0-0-0/d STRC(4608)  r     1 B$XL_ASC_DUMP
     0-0-0/w STRC        r     1 KEY$NUMBER                 0-0-0/w ASTR(9)     r     1 KEY$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDG$FORMAT_KEY requires 164 words for executable code.
   Procedure VDG$FORMAT_KEY requires 20 words of local(AUTO) storage.
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:262  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:263  
          MINI XREF LISTING

B$SR_NON_ZERO
      2383**DCL      2515>>CALLBLT  2525>>CALLBLT  2527>>CALLBLT
B$SR_NON_ZERO$
      2382**DCL      2383--IMP-PTR  2515>>CALLBLT  2525>>CALLBLT  2527>>CALLBLT
B$XL_ASC_DUMP
      2387**DCL      2542>>CALLBLT
B$XL_ASC_DUMP$
      2386**DCL      2387--IMP-PTR  2542>>CALLBLT
BUFFER
      2376**DCL        33--PROC     2518<<ASSIGN   2533<<CALLBLT  2542<<CALLBLT
END_INDEX
      2378**DCL        33--PROC     2500<<ASSIGN   2520<<ASSIGN   2537<<ASSIGN   2544<<ASSIGN
KEY
      2369**DCL        33--PROC
KEY.REP#
      2373**DCL      2508>>IF
KEY.TYPE#
      2373**DCL      2512>>IF       2522>>IF
KEY.V$
      2373**DCL      2508>>ASSIGN   2508--ASSIGN
KEY$
      2392**DCL      2407--IMP-PTR  2421--IMP-PTR  2508<<ASSIGN   2508<<ASSIGN   2514>>CALLBLT  2524>>CALLBLT
      2542>>CALLBLT  2542>>CALLBLT  2544>>ASSIGN
KEY$NUMBER.BYTES#
      2411**DCL      2514>>CALLBLT  2524>>CALLBLT
KEY$TEXTC.BYTES
      2431**DCL      2542>>CALLBLT
KEY$TEXTC.LENGTH#
      2429**DCL      2431--IMP-SIZ  2542>>CALLBLT  2544>>ASSIGN
KEY_FIELD
      2393**DCL      2514<<CALLBLT  2515>>CALLBLT  2515--CALLBLT  2517--ASSIGN   2518>>ASSIGN   2524<<CALLBLT
      2525>>CALLBLT  2527>>CALLBLT  2533>>CALLBLT  2533>>CALLBLT
PL6.E3A0      #013=VDG$FORMAT_KEY File=VDG$UTILITY.:VDA5TSI                      FRI 07/04/97 11:24 Page:264  
LSD_INDEX
      2395**DCL      2517<<ASSIGN   2518>>ASSIGN   2518>>ASSIGN   2520>>ASSIGN   2527<<CALLBLT  2530<<ASSIGN
      2532<<ASSIGN   2532>>ASSIGN   2533>>CALLBLT  2537>>ASSIGN
MSD_INDEX
      2396**DCL      2515<<CALLBLT  2517>>ASSIGN   2518>>ASSIGN   2525<<CALLBLT  2533>>CALLBLT  2533>>CALLBLT
      2537>>ASSIGN
NB_BUFFER
      2375**DCL        33--PROC     2376--IMP-SIZ  2518>>ASSIGN   2533>>CALLBLT  2542>>CALLBLT
START_INDEX
      2377**DCL        33--PROC     2500>>ASSIGN   2518>>ASSIGN   2520>>ASSIGN   2533>>CALLBLT  2537>>ASSIGN
      2542>>CALLBLT  2544>>ASSIGN
TABLE_VAL
      2394**DCL      2515<<CALLBLT  2525<<CALLBLT  2527<<CALLBLT  2529>>IF
VD$TEXTC_REMOTE.LENGTH#
      2490**DCL      2492--IMP-SIZ  2508--ASSIGN

PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:265  
     1603        1        /*T***********************************************************/
     1604        2        /*T*                                                         */
     1605        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1606        4        /*T*                                                         */
     1607        5        /*T***********************************************************/
     1608        6
     1609        7        /*D* NAME: VDG$FORMAT_LOCATION
     1610        8            PARAMETERS:
     1611        9                LOCATION - A VD$LOCATION structure containing the location to format.
     1612       10                NB_BUFFER - # bytes in BUFFER below.
     1613       11                BUFFER - Character buffer, uninitialized at entry.
     1614       12                START_INDEX - Index into BUFFER at which to start formating.
     1615       13                END_INDEX - Uninitialized word.
     1616       14            INPUT:
     1617       15            OUTPUT:
     1618       16                BUFFER will be modified.  Characters from START_INDEX thru
     1619       17                    (new value of END_INDEX) - 1, will be the displayable form of
     1620       18                    the location's keys, position, and EOF bit.
     1621       19                END_INDEX will contain the index into BUFFER of the byte
     1622       20                    after the last one occupied by the displayable form the location.
     1623       21            DESCRIPTION:
     1624       22                If LOCATION.EOF is set, just format the string "EO CURR".
     1625       23                Otherwise, format each non-%CLEAR key, then the position #, as below:
     1626       24                        <key1> <key2> <key3> position <position>
     1627       25        */
     1628       26
     1629       27        VDG$FORMAT_LOCATION: PROC (LOCATION, NB_BUFFER, BUFFER, START_INDEX, END_INDEX);
     1630       28
     1631       29
     1632       30        %INCLUDE VD_MACROS_M;
     1633     2245
     1634     2246
     1635     2247        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
     1636     2275    1   DCL NB_BUFFER SBIN;
     1637     2276    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1638     2277    1   DCL START_INDEX SBIN;
     1639     2278    1   DCL END_INDEX SBIN;
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:266  
     1640     2279
     1641     2280
     1642     2281    1   DCL VDG$FORMAT_KEY      ENTRY (5);
     1643     2282    1   DCL VDG$FORMAT_NUMBER   ENTRY (6);
     1644     2283
     1645     2284
     1646     2285
     1647     2286    1   DCL START SBIN;
     1648     2287    1   DCL LOC_INDEX SBIN;
     1649     2288    1   DCL POSITION SBIN;
     1650     2289
     1651     2290
     1652     2291
     1653     2292    1           START = START_INDEX;   /* My own copy so I can change it */
     1654     2293
     1655     2294    2           IF LOCATION.EOF THEN DO;
     1656     2295    2              END_INDEX = MINIMUM (START +
     1657     2296    2                %LENGTHC(CONCAT(DW_EO,CHR_SPACE,DWLC_CURR)), NB_BUFFER);
     1658     2297    2              CALL INSERT (BUFFER, START, END_INDEX - START,
     1659     2298    2                %CONCAT(DW_EO,CHR_SPACE,DWLC_CURR));
     1660     2299    2              END;
     1661     2300    1           ELSE
     1662     2301    2   FORMAT_KEYS_AND_POSITION: DO;
     1663     2302    2              LOC_INDEX = 0;
     1664     2303    2   EACH_LOCATION_LEVEL:
     1665     2304    3              DO WHILE LOC_INDEX < %MX_LOCATION_LEVELS
     1666     2305    3                AND LOCATION.KEY (LOC_INDEX) ~= %CLEAR
     1667     2306    3                AND END_INDEX < NB_BUFFER;
     1668     2307    3                 CALL VDG$FORMAT_KEY (LOCATION.KEY (LOC_INDEX), NB_BUFFER, BUFFER,
     1669     2308    3                   START, END_INDEX);
     1670     2309    3                 START = END_INDEX;
     1671     2310    3                 LOC_INDEX = LOC_INDEX + 1;
     1672     2311    3                 IF LOC_INDEX < %MX_LOCATION_LEVELS
     1673     2312    4                   AND LOCATION.KEY (LOC_INDEX) ~= %CLEAR THEN DO;
     1674     2313    4                    END_INDEX = MINIMUM (START + LENGTHC(%CHR_SPACE), NB_BUFFER);
     1675     2314    5                    IF END_INDEX < NB_BUFFER THEN DO;
     1676     2315    5                       CALL INSERT (BUFFER, START, END_INDEX - START,
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:267  
     1677     2316    5                         %CHR_SPACE);
     1678     2317    5                       START = END_INDEX;
     1679     2318    5                       END;
     1680     2319    4                    END;
     1681     2320    3                 END EACH_LOCATION_LEVEL;
     1682     2321
     1683     2322    2              END_INDEX = MINIMUM (START + %LENGTHC(CONCAT(' ',DWLC_POSITION,' ')),
     1684     2323    2                NB_BUFFER);
     1685     2324    3              IF END_INDEX < NB_BUFFER THEN DO;
     1686     2325    3                 CALL INSERT (BUFFER, START, END_INDEX - START,
     1687     2326    3                   %CONCAT(' ',DWLC_POSITION,' '));
     1688     2327    3                 START = END_INDEX;
     1689     2328    3                 POSITION = LOCATION.POSITION# + 1;
     1690     2329    3                 CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, POSITION, NB_BUFFER, BUFFER,
     1691     2330    3                   START, END_INDEX);
     1692     2331    3                 END;
     1693     2332    2              END FORMAT_KEYS_AND_POSITION;
     1694     2333
     1695     2334    1           RETURN;
     1696     2335
     1697     2336    1   END VDG$FORMAT_LOCATION;
     1698     2337        %EOD;

PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:268  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_LOCATION.

   Procedure VDG$FORMAT_LOCATION requires 131 words for executable code.
   Procedure VDG$FORMAT_LOCATION requires 18 words of local(AUTO) storage.

PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:269  

 Object Unit name= VDG$FORMAT_LOCATION                        File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:34.36 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      5      5  VDG$FORMAT_LOCATION
    1   Proc  even  none   131    203  VDG$FORMAT_LOCATION
    2  RoData even  none     2      2  VDG$FORMAT_LOCATION

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        5  VDG$FORMAT_LOCATION

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 VDG$FORMAT_KEY
         yes           Std       6 VDG$FORMAT_NUMBER
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:270  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:271  


     1603        1        /*T***********************************************************/
     1604        2        /*T*                                                         */
     1605        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1606        4        /*T*                                                         */
     1607        5        /*T***********************************************************/
     1608        6
     1609        7        /*D* NAME: VDG$FORMAT_LOCATION
     1610        8            PARAMETERS:
     1611        9                LOCATION - A VD$LOCATION structure containing the location to format.
     1612       10                NB_BUFFER - # bytes in BUFFER below.
     1613       11                BUFFER - Character buffer, uninitialized at entry.
     1614       12                START_INDEX - Index into BUFFER at which to start formating.
     1615       13                END_INDEX - Uninitialized word.
     1616       14            INPUT:
     1617       15            OUTPUT:
     1618       16                BUFFER will be modified.  Characters from START_INDEX thru
     1619       17                    (new value of END_INDEX) - 1, will be the displayable form of
     1620       18                    the location's keys, position, and EOF bit.
     1621       19                END_INDEX will contain the index into BUFFER of the byte
     1622       20                    after the last one occupied by the displayable form the location.
     1623       21            DESCRIPTION:
     1624       22                If LOCATION.EOF is set, just format the string "EO CURR".
     1625       23                Otherwise, format each non-%CLEAR key, then the position #, as below:
     1626       24                        <key1> <key2> <key3> position <position>
     1627       25        */
     1628       26
     1629       27        VDG$FORMAT_LOCATION: PROC (LOCATION, NB_BUFFER, BUFFER, START_INDEX, END_INDEX);

     27  1 000000   000000 700200 xent  VDG$FORMAT_* TSX0  ! X66_AUTO_5
         1 000001   000022 000005                    ZERO    18,5

     1630       28
     1631       29
     1632       30        %INCLUDE VD_MACROS_M;
     1633     2245
     1634     2246
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:272  
     1635     2247        %VD$LOCATION (NAME=LOCATION, STCLASS=PARAM);
     1636     2275    1   DCL NB_BUFFER SBIN;
     1637     2276    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1638     2277    1   DCL START_INDEX SBIN;
     1639     2278    1   DCL END_INDEX SBIN;
     1640     2279
     1641     2280
     1642     2281    1   DCL VDG$FORMAT_KEY      ENTRY (5);
     1643     2282    1   DCL VDG$FORMAT_NUMBER   ENTRY (6);
     1644     2283
     1645     2284
     1646     2285
     1647     2286    1   DCL START SBIN;
     1648     2287    1   DCL LOC_INDEX SBIN;
     1649     2288    1   DCL POSITION SBIN;
     1650     2289
     1651     2290
     1652     2291
     1653     2292    1           START = START_INDEX;   /* My own copy so I can change it */

   2292  1 000002   200006 470500                    LDP0    @START_INDEX,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   200010 755100                    STA     START,,AUTO

     1654     2293
     1655     2294    2           IF LOCATION.EOF THEN DO;

   2294  1 000005   200003 471500                    LDP1    @LOCATION,,AUTO
         1 000006   100010 236100                    LDQ     8,,PR1
         1 000007   400000 316007                    CANQ    -131072,DL
         1 000010   000032 600000 1                  TZE     FORMAT_KEYS_AND_POSITION

     1656     2295    2              END_INDEX = MINIMUM (START +

   2295  1 000011   200010 236100                    LDQ     START,,AUTO
         1 000012   000007 036007                    ADLQ    7,DL
         1 000013   200004 473500                    LDP3    @NB_BUFFER,,AUTO
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:273  
         1 000014   300000 116100                    CMPQ    0,,PR3
         1 000015   000017 604400 1                  TMOZ    s:2295+6
         1 000016   300000 236100                    LDQ     0,,PR3
         1 000017   200007 474500                    LDP4    @END_INDEX,,AUTO
         1 000020   400000 756100                    STQ     0,,PR4

     1657     2296    2                %LENGTHC(CONCAT(DW_EO,CHR_SPACE,DWLC_CURR)), NB_BUFFER);
     1658     2297    2              CALL INSERT (BUFFER, START, END_INDEX - START,

   2297  1 000021   300000 720100                    LXL0    0,,PR3
         1 000022   200010 136100                    SBLQ    START,,AUTO
         1 000023   200005 475500                    LDP5    @BUFFER,,AUTO
         1 000024   000000 621006                    EAX1    0,QL
         1 000025   200010 235100                    LDA     START,,AUTO
         1 000026   040145 100400                    MLR     fill='040'O
         1 000027   000000 000007 0                  ADSC9   0                        cn=0,n=7
         1 000030   500000 000011                    ADSC9   0,A,PR5                  cn=0,n=*X1

     1659     2298    2                %CONCAT(DW_EO,CHR_SPACE,DWLC_CURR));
     1660     2299    2              END;

   2299  1 000031   000202 710000 1                  TRA     s:2334

     1661     2300    1           ELSE
     1662     2301    2   FORMAT_KEYS_AND_POSITION: DO;

   2301  1 000032                       FORMAT_KEYS* null
     1663     2302    2              LOC_INDEX = 0;

   2302  1 000032   200011 450100                    STZ     LOC_INDEX,,AUTO

     1664     2303    2   EACH_LOCATION_LEVEL:
     1665     2304    3              DO WHILE LOC_INDEX < %MX_LOCATION_LEVELS

   2304  1 000033   000115 710000 1     EACH_LOCATI* TRA     s:2320

     1666     2305    3                AND LOCATION.KEY (LOC_INDEX) ~= %CLEAR
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:274  
     1667     2306    3                AND END_INDEX < NB_BUFFER;
     1668     2307    3                 CALL VDG$FORMAT_KEY (LOCATION.KEY (LOC_INDEX), NB_BUFFER, BUFFER,

   2307  1 000034   200007 236100                    LDQ     @END_INDEX,,AUTO
         1 000035   200020 756100                    STQ     POSITION+6,,AUTO
         1 000036   200010 630500                    EPPR0   START,,AUTO
         1 000037   200017 450500                    STP0    POSITION+5,,AUTO
         1 000040   200005 236100                    LDQ     @BUFFER,,AUTO
         1 000041   200016 756100                    STQ     POSITION+4,,AUTO
         1 000042   200004 236100                    LDQ     @NB_BUFFER,,AUTO
         1 000043   200015 756100                    STQ     POSITION+3,,AUTO
         1 000044   200011 236100                    LDQ     LOC_INDEX,,AUTO
         1 000045   000023 736000                    QLS     19
         1 000046   200003 036100                    ADLQ    @LOCATION,,AUTO
         1 000047   200014 756100                    STQ     POSITION+2,,AUTO
         1 000050   200014 630500                    EPPR0   POSITION+2,,AUTO
         1 000051   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000052   000000 701000 xent               TSX1    VDG$FORMAT_KEY
         1 000053   000000 011000                    NOP     0

     1669     2308    3                   START, END_INDEX);
     1670     2309    3                 START = END_INDEX;

   2309  1 000054   200007 470500                    LDP0    @END_INDEX,,AUTO
         1 000055   000000 235100                    LDA     0,,PR0
         1 000056   200010 755100                    STA     START,,AUTO

     1671     2310    3                 LOC_INDEX = LOC_INDEX + 1;

   2310  1 000057   200011 054100                    AOS     LOC_INDEX,,AUTO

     1672     2311    3                 IF LOC_INDEX < %MX_LOCATION_LEVELS

   2311  1 000060   200011 236100                    LDQ     LOC_INDEX,,AUTO
         1 000061   000004 116007                    CMPQ    4,DL
         1 000062   000115 605000 1                  TPL     s:2320
         1 000063   200011 235100                    LDA     LOC_INDEX,,AUTO
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:275  
         1 000064   000003 735000                    ALS     3
         1 000065   200003 471500                    LDP1    @LOCATION,,AUTO
         1 000066   000000 106505                    CMPC    fill='000'O
         1 000067   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=8
         1 000070   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000071   000115 600000 1                  TZE     s:2320

     1673     2312    4                   AND LOCATION.KEY (LOC_INDEX) ~= %CLEAR THEN DO;

     1674     2313    4                    END_INDEX = MINIMUM (START + LENGTHC(%CHR_SPACE), NB_BUFFER);

   2313  1 000072   200010 236100                    LDQ     START,,AUTO
         1 000073   000001 036007                    ADLQ    1,DL
         1 000074   200004 473500                    LDP3    @NB_BUFFER,,AUTO
         1 000075   300000 116100                    CMPQ    0,,PR3
         1 000076   000100 604400 1                  TMOZ    s:2313+6
         1 000077   300000 236100                    LDQ     0,,PR3
         1 000100   000000 756100                    STQ     0,,PR0

     1675     2314    5                    IF END_INDEX < NB_BUFFER THEN DO;

   2314  1 000101   300000 116100                    CMPQ    0,,PR3
         1 000102   000115 605000 1                  TPL     s:2320

     1676     2315    5                       CALL INSERT (BUFFER, START, END_INDEX - START,

   2315  1 000103   300000 720100                    LXL0    0,,PR3
         1 000104   200010 136100                    SBLQ    START,,AUTO
         1 000105   200005 474500                    LDP4    @BUFFER,,AUTO
         1 000106   000000 621006                    EAX1    0,QL
         1 000107   200010 236100                    LDQ     START,,AUTO
         1 000110   040146 100400                    MLR     fill='040'O
         1 000111   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000112   400000 000011                    ADSC9   0,Q,PR4                  cn=0,n=*X1

     1677     2316    5                         %CHR_SPACE);
     1678     2317    5                       START = END_INDEX;
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:276  

   2317  1 000113   000000 235100                    LDA     0,,PR0
         1 000114   200010 755100                    STA     START,,AUTO

     1679     2318    5                       END;

     1680     2319    4                    END;

     1681     2320    3                 END EACH_LOCATION_LEVEL;

   2320  1 000115   200011 235100                    LDA     LOC_INDEX,,AUTO
         1 000116   000004 115007                    CMPA    4,DL
         1 000117   000133 605000 1                  TPL     s:2322
         1 000120   000003 735000                    ALS     3
         1 000121   200003 470500                    LDP0    @LOCATION,,AUTO
         1 000122   000000 106505                    CMPC    fill='000'O
         1 000123   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         1 000124   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000125   000133 600000 1                  TZE     s:2322
         1 000126   200007 471500                    LDP1    @END_INDEX,,AUTO
         1 000127   200004 473500                    LDP3    @NB_BUFFER,,AUTO
         1 000130   100000 236100                    LDQ     0,,PR1
         1 000131   300000 116100                    CMPQ    0,,PR3
         1 000132   000034 604000 1                  TMI     s:2307

     1682     2321
     1683     2322    2              END_INDEX = MINIMUM (START + %LENGTHC(CONCAT(' ',DWLC_POSITION,' ')),

   2322  1 000133   200010 236100                    LDQ     START,,AUTO
         1 000134   000012 036007                    ADLQ    10,DL
         1 000135   200004 470500                    LDP0    @NB_BUFFER,,AUTO
         1 000136   000000 116100                    CMPQ    0,,PR0
         1 000137   000141 604400 1                  TMOZ    s:2322+6
         1 000140   000000 236100                    LDQ     0,,PR0
         1 000141   200007 471500                    LDP1    @END_INDEX,,AUTO
         1 000142   100000 756100                    STQ     0,,PR1

PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:277  
     1684     2323    2                NB_BUFFER);
     1685     2324    3              IF END_INDEX < NB_BUFFER THEN DO;

   2324  1 000143   000000 116100                    CMPQ    0,,PR0
         1 000144   000202 605000 1                  TPL     s:2334

     1686     2325    3                 CALL INSERT (BUFFER, START, END_INDEX - START,

   2325  1 000145   000000 720100                    LXL0    0,,PR0
         1 000146   200010 136100                    SBLQ    START,,AUTO
         1 000147   200005 473500                    LDP3    @BUFFER,,AUTO
         1 000150   000000 621006                    EAX1    0,QL
         1 000151   200010 235100                    LDA     START,,AUTO
         1 000152   040145 100400                    MLR     fill='040'O
         1 000153   000002 000012 0                  ADSC9   2                        cn=0,n=10
         1 000154   300000 000011                    ADSC9   0,A,PR3                  cn=0,n=*X1

     1687     2326    3                   %CONCAT(' ',DWLC_POSITION,' '));
     1688     2327    3                 START = END_INDEX;

   2327  1 000155   100000 235100                    LDA     0,,PR1
         1 000156   200010 755100                    STA     START,,AUTO

     1689     2328    3                 POSITION = LOCATION.POSITION# + 1;

   2328  1 000157   200003 474500                    LDP4    @LOCATION,,AUTO
         1 000160   400010 236100                    LDQ     8,,PR4
         1 000161   000022 732000                    QRS     18
         1 000162   000001 036007                    ADLQ    1,DL
         1 000163   200012 756100                    STQ     POSITION,,AUTO

     1690     2329    3                 CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, POSITION, NB_BUFFER, BUFFER,

   2329  1 000164   200007 236100                    LDQ     @END_INDEX,,AUTO
         1 000165   200021 756100                    STQ     POSITION+7,,AUTO
         1 000166   200010 635500                    EPPR5   START,,AUTO
         1 000167   200020 455500                    STP5    POSITION+6,,AUTO
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:278  
         1 000170   200004 237100                    LDAQ    @NB_BUFFER,,AUTO
         1 000171   200016 757100                    STAQ    POSITION+4,,AUTO
         1 000172   200012 636500                    EPPR6   POSITION,,AUTO
         1 000173   200015 456500                    STP6    POSITION+3,,AUTO
         1 000174   000001 236000 2                  LDQ     1
         1 000175   200014 756100                    STQ     POSITION+2,,AUTO
         1 000176   200014 630500                    EPPR0   POSITION+2,,AUTO
         1 000177   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000200   000000 701000 xent               TSX1    VDG$FORMAT_NUMBER
         1 000201   000000 011000                    NOP     0

     1691     2330    3                   START, END_INDEX);
     1692     2331    3                 END;

     1693     2332    2              END FORMAT_KEYS_AND_POSITION;

     1694     2333
     1695     2334    1           RETURN;

   2334  1 000202   000000 702200 xent               TSX2  ! X66_ARET
     1696     2335
     1697     2336    1   END VDG$FORMAT_LOCATION;
     1698     2337        %EOD;

PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:279  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_LOCATION.
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:280  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUFFER                    7-0-0/w PTR         r     1 @END_INDEX
     3-0-0/w PTR         r     1 @LOCATION                  4-0-0/w PTR         r     1 @NB_BUFFER
     6-0-0/w PTR         r     1 @START_INDEX              *0-0-0/c ACHR        r     1 BUFFER
    *0-0-0/w SBIN        r     1 END_INDEX                 *0-0-0/w STRC(324)   r     1 LOCATION
    11-0-0/w SBIN        r     1 LOC_INDEX                 *0-0-0/w SBIN        r     1 NB_BUFFER
    12-0-0/w SBIN        r     1 POSITION                  10-0-0/w SBIN        r     1 START
    *0-0-0/w SBIN        r     1 START_INDEX


   Procedure VDG$FORMAT_LOCATION requires 131 words for executable code.
   Procedure VDG$FORMAT_LOCATION requires 18 words of local(AUTO) storage.
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:281  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:282  
          MINI XREF LISTING

BUFFER
      2276**DCL        27--PROC     2297<<CALLBLT  2307<>CALL     2315<<CALLBLT  2325<<CALLBLT  2329<>CALL
END_INDEX
      2278**DCL        27--PROC     2295<<ASSIGN   2297>>CALLBLT  2304>>DOWHILE  2307<>CALL     2309>>ASSIGN
      2313<<ASSIGN   2314>>IF       2315>>CALLBLT  2317>>ASSIGN   2322<<ASSIGN   2324>>IF       2325>>CALLBLT
      2327>>ASSIGN   2329<>CALL
LOCATION
      2255**DCL        27--PROC
LOCATION.EOF
      2273**DCL      2294>>IF
LOCATION.KEY
      2269**DCL      2304>>DOWHILE  2307<>CALL     2311>>IF
LOCATION.POSITION#
      2273**DCL      2328>>ASSIGN
LOC_INDEX
      2287**DCL      2302<<ASSIGN   2304>>DOWHILE  2304>>DOWHILE  2307>>CALL     2310<<ASSIGN   2310>>ASSIGN
      2311>>IF       2311>>IF
NB_BUFFER
      2275**DCL        27--PROC     2276--IMP-SIZ  2295>>ASSIGN   2297>>CALLBLT  2304>>DOWHILE  2307<>CALL
      2307>>CALL     2313>>ASSIGN   2314>>IF       2315>>CALLBLT  2322>>ASSIGN   2324>>IF       2325>>CALLBLT
      2329<>CALL     2329>>CALL
POSITION
      2288**DCL      2328<<ASSIGN   2329<>CALL
START
      2286**DCL      2292<<ASSIGN   2295>>ASSIGN   2297>>CALLBLT  2297>>CALLBLT  2307<>CALL     2309<<ASSIGN
      2313>>ASSIGN   2315>>CALLBLT  2315>>CALLBLT  2317<<ASSIGN   2322>>ASSIGN   2325>>CALLBLT  2325>>CALLBLT
      2327<<ASSIGN   2329<>CALL
START_INDEX
      2277**DCL        27--PROC     2292>>ASSIGN
VDG$FORMAT_KEY
      2281**DCL-ENT  2307--CALL
VDG$FORMAT_NUMBER
PL6.E3A0      #014=VDG$FORMAT_LOCATION File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:24 Page:283  
      2282**DCL-ENT  2329--CALL

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:284  
     1699        1        /*T***********************************************************/
     1700        2        /*T*                                                         */
     1701        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1702        4        /*T*                                                         */
     1703        5        /*T***********************************************************/
     1704        6
     1705        7        /*D* NAME: VDG$FORMAT_WINDOW_SPEC
     1706        8            PARAMETERS:
     1707        9                WINDOW_SPEC - A VD$WINDOW_SPEC structure specifying the windowwhose
     1708       10                    parameters are to be formatted.
     1709       11                NB_BUFFER - # bytes in BUFFER below.
     1710       12                BUFFER - Character buffer, uninitialized at entry.
     1711       13                START_INDEX - Index into BUFFER at which to start formating.
     1712       14                END_INDEX - Uninitialized word.
     1713       15            INPUT:
     1714       16            OUTPUT:
     1715       17                BUFFER will be modified.  Characters from START_INDEX thru
     1716       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1717       19                    WINDOW_SPEC.
     1718       20                END_INDEX will contain the index into BUFFER of the byte
     1719       21                    after the last one occupied by the displayable form
     1720       22                    of WINDOW_SPEC.
     1721       23            DESCRIPTION:
     1722       24                Format the window coordinates as shown below:
     1723       25
     1724       26                    LINE <line> LENGTH <length>
     1725       27
     1726       28                The basic idea of the display format is to display WINDOW_SPEC in a
     1727       29                    form in which it could be entered in the 6Edit command language.
     1728       30        */
     1729       31
     1730       32        VDG$FORMAT_WINDOW_SPEC: PROC (WINDOW_SPEC, NB_BUFFER, BUFFER, START_INDEX,
     1731       33                  END_INDEX);
     1732       34
     1733       35
     1734       36        %INCLUDE VD_MACROS_M;
     1735     2251
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:285  
     1736     2252
     1737     2253        %VD$WINDOW_SPEC (NAME=WINDOW_SPEC, STCLASS=PARAM);
     1738     2319    1   DCL NB_BUFFER SBIN;
     1739     2320    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1740     2321    1   DCL START_INDEX SBIN;
     1741     2322    1   DCL END_INDEX SBIN;
     1742     2323
     1743     2324
     1744     2325    1   DCL VDG$FORMAT_NUMBER       ENTRY (6);
     1745     2326
     1746     2327
     1747     2328    1   DCL START SBIN;
     1748     2329    1   DCL LEVEL SBIN;
     1749     2330
     1750     2331
     1751     2332    1           START = START_INDEX;
     1752     2333    1           END_INDEX = MINIMUM (START + %LENGTHC('LINE '), NB_BUFFER);
     1753     2334    1           SUBSTR (BUFFER, START, END_INDEX-START) = 'LINE ';
     1754     2335    1           CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, WINDOW_SPEC.COORDS.LINE#,
     1755     2336    1             NB_BUFFER, BUFFER, END_INDEX, END_INDEX);
     1756     2337    1           START = END_INDEX;
     1757     2338    1           END_INDEX = MINIMUM (START + %LENGTHC(' LENGTH '), NB_BUFFER);
     1758     2339    1           SUBSTR (BUFFER, START, END_INDEX-START) = ' LENGTH ';
     1759     2340    1           CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, WINDOW_SPEC.COORDS.HEIGHT#,
     1760     2341    1             NB_BUFFER, BUFFER, END_INDEX, END_INDEX);
     1761     2342    1           RETURN;
     1762     2343    1   END VDG$FORMAT_WINDOW_SPEC;
     1763     2344        %EOD;

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:286  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_WINDOW_SPEC.

   Procedure VDG$FORMAT_WINDOW_SPEC requires 64 words for executable code.
   Procedure VDG$FORMAT_WINDOW_SPEC requires 16 words of local(AUTO) storage.

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:287  

 Object Unit name= VDG$FORMAT_WINDOW_SPEC                     File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:40.16 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      4      4  VDG$FORMAT_WINDOW_SPEC
    1   Proc  even  none    64    100  VDG$FORMAT_WINDOW_SPEC
    2  RoData even  none     2      2  VDG$FORMAT_WINDOW_SPEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        5  VDG$FORMAT_WINDOW_SPEC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 VDG$FORMAT_NUMBER
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:288  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:289  


     1699        1        /*T***********************************************************/
     1700        2        /*T*                                                         */
     1701        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1702        4        /*T*                                                         */
     1703        5        /*T***********************************************************/
     1704        6
     1705        7        /*D* NAME: VDG$FORMAT_WINDOW_SPEC
     1706        8            PARAMETERS:
     1707        9                WINDOW_SPEC - A VD$WINDOW_SPEC structure specifying the windowwhose
     1708       10                    parameters are to be formatted.
     1709       11                NB_BUFFER - # bytes in BUFFER below.
     1710       12                BUFFER - Character buffer, uninitialized at entry.
     1711       13                START_INDEX - Index into BUFFER at which to start formating.
     1712       14                END_INDEX - Uninitialized word.
     1713       15            INPUT:
     1714       16            OUTPUT:
     1715       17                BUFFER will be modified.  Characters from START_INDEX thru
     1716       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1717       19                    WINDOW_SPEC.
     1718       20                END_INDEX will contain the index into BUFFER of the byte
     1719       21                    after the last one occupied by the displayable form
     1720       22                    of WINDOW_SPEC.
     1721       23            DESCRIPTION:
     1722       24                Format the window coordinates as shown below:
     1723       25
     1724       26                    LINE <line> LENGTH <length>
     1725       27
     1726       28                The basic idea of the display format is to display WINDOW_SPEC in a
     1727       29                    form in which it could be entered in the 6Edit command language.
     1728       30        */
     1729       31
     1730       32        VDG$FORMAT_WINDOW_SPEC: PROC (WINDOW_SPEC, NB_BUFFER, BUFFER, START_INDEX,

     32  1 000000   000000 700200 xent  VDG$FORMAT_* TSX0  ! X66_AUTO_5
         1 000001   000020 000005                    ZERO    16,5

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:290  
     1731       33                  END_INDEX);
     1732       34
     1733       35
     1734       36        %INCLUDE VD_MACROS_M;
     1735     2251
     1736     2252
     1737     2253        %VD$WINDOW_SPEC (NAME=WINDOW_SPEC, STCLASS=PARAM);
     1738     2319    1   DCL NB_BUFFER SBIN;
     1739     2320    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1740     2321    1   DCL START_INDEX SBIN;
     1741     2322    1   DCL END_INDEX SBIN;
     1742     2323
     1743     2324
     1744     2325    1   DCL VDG$FORMAT_NUMBER       ENTRY (6);
     1745     2326
     1746     2327
     1747     2328    1   DCL START SBIN;
     1748     2329    1   DCL LEVEL SBIN;
     1749     2330
     1750     2331
     1751     2332    1           START = START_INDEX;

   2332  1 000002   200006 470500                    LDP0    @START_INDEX,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   200010 755100                    STA     START,,AUTO

     1752     2333    1           END_INDEX = MINIMUM (START + %LENGTHC('LINE '), NB_BUFFER);

   2333  1 000005   200010 236100                    LDQ     START,,AUTO
         1 000006   000005 036007                    ADLQ    5,DL
         1 000007   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         1 000010   100000 116100                    CMPQ    0,,PR1
         1 000011   000013 604400 1                  TMOZ    s:2333+6
         1 000012   100000 236100                    LDQ     0,,PR1
         1 000013   200007 473500                    LDP3    @END_INDEX,,AUTO
         1 000014   300000 756100                    STQ     0,,PR3

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:291  
     1753     2334    1           SUBSTR (BUFFER, START, END_INDEX-START) = 'LINE ';

   2334  1 000015   100000 720100                    LXL0    0,,PR1
         1 000016   200010 136100                    SBLQ    START,,AUTO
         1 000017   200005 474500                    LDP4    @BUFFER,,AUTO
         1 000020   000000 621006                    EAX1    0,QL
         1 000021   040145 100400                    MLR     fill='040'O
         1 000022   000000 000005 0                  ADSC9   0                        cn=0,n=5
         1 000023   400000 000011                    ADSC9   0,A,PR4                  cn=0,n=*X1

     1754     2335    1           CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, WINDOW_SPEC.COORDS.LINE#,

   2335  1 000024   200007 236100                    LDQ     @END_INDEX,,AUTO
         1 000025   200007 235100                    LDA     @END_INDEX,,AUTO
         1 000026   200016 757100                    STAQ    START+6,,AUTO
         1 000027   200004 237100                    LDAQ    @NB_BUFFER,,AUTO
         1 000030   200014 757100                    STAQ    START+4,,AUTO
         1 000031   200003 236100                    LDQ     @WINDOW_SPEC,,AUTO
         1 000032   000003 036003                    ADLQ    3,DU
         1 000033   000001 235000 2                  LDA     1
         1 000034   200012 757100                    STAQ    START+2,,AUTO
         1 000035   200012 630500                    EPPR0   START+2,,AUTO
         1 000036   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000037   000000 701000 xent               TSX1    VDG$FORMAT_NUMBER
         1 000040   000000 011000                    NOP     0

     1755     2336    1             NB_BUFFER, BUFFER, END_INDEX, END_INDEX);
     1756     2337    1           START = END_INDEX;

   2337  1 000041   200007 470500                    LDP0    @END_INDEX,,AUTO
         1 000042   000000 235100                    LDA     0,,PR0
         1 000043   200010 755100                    STA     START,,AUTO

     1757     2338    1           END_INDEX = MINIMUM (START + %LENGTHC(' LENGTH '), NB_BUFFER);

   2338  1 000044   200010 236100                    LDQ     START,,AUTO
         1 000045   000010 036007                    ADLQ    8,DL
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:292  
         1 000046   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         1 000047   100000 116100                    CMPQ    0,,PR1
         1 000050   000052 604400 1                  TMOZ    s:2338+6
         1 000051   100000 236100                    LDQ     0,,PR1
         1 000052   000000 756100                    STQ     0,,PR0

     1758     2339    1           SUBSTR (BUFFER, START, END_INDEX-START) = ' LENGTH ';

   2339  1 000053   100000 720100                    LXL0    0,,PR1
         1 000054   200010 136100                    SBLQ    START,,AUTO
         1 000055   200005 473500                    LDP3    @BUFFER,,AUTO
         1 000056   000000 621006                    EAX1    0,QL
         1 000057   040145 100400                    MLR     fill='040'O
         1 000060   000002 000010 0                  ADSC9   2                        cn=0,n=8
         1 000061   300000 000011                    ADSC9   0,A,PR3                  cn=0,n=*X1

     1759     2340    1           CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, WINDOW_SPEC.COORDS.HEIGHT#,

   2340  1 000062   200007 236100                    LDQ     @END_INDEX,,AUTO
         1 000063   200007 235100                    LDA     @END_INDEX,,AUTO
         1 000064   200016 757100                    STAQ    START+6,,AUTO
         1 000065   200004 237100                    LDAQ    @NB_BUFFER,,AUTO
         1 000066   200014 757100                    STAQ    START+4,,AUTO
         1 000067   200003 236100                    LDQ     @WINDOW_SPEC,,AUTO
         1 000070   000005 036003                    ADLQ    5,DU
         1 000071   000001 235000 2                  LDA     1
         1 000072   200012 757100                    STAQ    START+2,,AUTO
         1 000073   200012 630500                    EPPR0   START+2,,AUTO
         1 000074   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000075   000000 701000 xent               TSX1    VDG$FORMAT_NUMBER
         1 000076   000000 011000                    NOP     0

     1760     2341    1             NB_BUFFER, BUFFER, END_INDEX, END_INDEX);
     1761     2342    1           RETURN;

   2342  1 000077   000000 702200 xent               TSX2  ! X66_ARET
     1762     2343    1   END VDG$FORMAT_WINDOW_SPEC;
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:293  
     1763     2344        %EOD;

PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:294  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$FORMAT_WINDOW_SPEC.
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:295  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUFFER                    7-0-0/w PTR         r     1 @END_INDEX
     4-0-0/w PTR         r     1 @NB_BUFFER                 6-0-0/w PTR         r     1 @START_INDEX
     3-0-0/w PTR         r     1 @WINDOW_SPEC              *0-0-0/c ACHR        r     1 BUFFER
    *0-0-0/w SBIN        r     1 END_INDEX                 *0-0-0/w SBIN        r     1 NB_BUFFER
    10-0-0/w SBIN        r     1 START                     *0-0-0/w SBIN        r     1 START_INDEX
    *0-0-0/w STRC(900)   r     1 WINDOW_SPEC


   Procedure VDG$FORMAT_WINDOW_SPEC requires 64 words for executable code.
   Procedure VDG$FORMAT_WINDOW_SPEC requires 16 words of local(AUTO) storage.
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:296  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #015=VDG$FORMAT_WINDOW_SPEC File=VDG$UTILITY.:VDA5TSI              FRI 07/04/97 11:24 Page:297  
          MINI XREF LISTING

BUFFER
      2320**DCL        32--PROC     2334<<ASSIGN   2335<>CALL     2339<<ASSIGN   2340<>CALL
END_INDEX
      2322**DCL        32--PROC     2333<<ASSIGN   2334>>ASSIGN   2335<>CALL     2335<>CALL     2337>>ASSIGN
      2338<<ASSIGN   2339>>ASSIGN   2340<>CALL     2340<>CALL
NB_BUFFER
      2319**DCL        32--PROC     2320--IMP-SIZ  2333>>ASSIGN   2334>>ASSIGN   2335<>CALL     2335>>CALL
      2338>>ASSIGN   2339>>ASSIGN   2340<>CALL     2340>>CALL
START
      2328**DCL      2332<<ASSIGN   2333>>ASSIGN   2334>>ASSIGN   2334>>ASSIGN   2337<<ASSIGN   2338>>ASSIGN
      2339>>ASSIGN   2339>>ASSIGN
START_INDEX
      2321**DCL        32--PROC     2332>>ASSIGN
VDG$FORMAT_NUMBER
      2325**DCL-ENT  2335--CALL     2340--CALL
WINDOW_SPEC
      2261**DCL        32--PROC
WINDOW_SPEC.COORDS.HEIGHT#
      2288**DCL      2340<>CALL
WINDOW_SPEC.COORDS.LINE#
      2287**DCL      2335<>CALL

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:298  
     1764        1        /*T***********************************************************/
     1765        2        /*T*                                                         */
     1766        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1767        4        /*T*                                                         */
     1768        5        /*T***********************************************************/
     1769        6
     1770        7        /*D* NAME: VDG$FORMAT_BLOCK_DESC
     1771        8            PARAMETERS:
     1772        9                BLOCK_DESC - A VD$BLOCK_DESC structure specifying the block whose
     1773       10                    location is to be formatted.
     1774       11                NB_BUFFER - # bytes in BUFFER below.
     1775       12                BUFFER - Character buffer, uninitialized at entry.
     1776       13                START_INDEX - Index into BUFFER at which to start formating.
     1777       14                END_INDEX - Uninitialized word.
     1778       15            INPUT:
     1779       16            OUTPUT:
     1780       17                BUFFER will be modified.  Characters from START_INDEX thru
     1781       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1782       19                    BLOCK_DESC.
     1783       20                END_INDEX will contain the index into BUFFER of the byte
     1784       21                    after the last one occupied by the displayable form
     1785       22                    of BLOCK_DESC.
     1786       23            DESCRIPTION:
     1787       24                Format the file key, range, and options as shown below:
     1788       25
     1789       26                    <org> <protect> <exist> FILE <fid> <start_loc> THRU <end_loc>
     1790       27
     1791       28                The basic idea of the display format is to display BLOCK_DESC in a
     1792       29                    form in which it could be entered in the 6Edit command language.
     1793       30                Caveats:
     1794       31                    If BLOCK_DESC.OPTIONS.STRUCTURE's VD$STRUCTURE_LEVEL doesn't give a
     1795       32                        specific file org, then don't display any org info.
     1796       33                    Display <protect> only if it's different from the current value of
     1797       34                        the $PROTECT predefined name.
     1798       35                    Display <exist> only if it's different from the current value of
     1799       36                        the $EXIST predefined name.
     1800       37                    If BLOCK_DESC.FILE_KEY is a DCB, we obtain the fid from the DCB and
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:299  
     1801       38                        format it, not the DCB name.  The user probably wants to know
     1802       39                        what file s/he's editing, even if specified via a DCB operand.
     1803       40                    Dislplay THRU <end_loc> only if end_loc ~= start_loc.
     1804       41        *N**N*  Note that some options are omitted.  Options which aren't yet supported
     1805       42        *N**N*      in the input command language (LEVEL, COMPONENT, KEY_INCR) are not
     1806       43        *N**N*      displayed to the user.
     1807       44        */
     1808       45
     1809       46        VDG$FORMAT_BLOCK_DESC: PROC (BLOCK_DESC, NB_BUFFER, BUFFER, START_INDEX,
     1810       47                  END_INDEX);
     1811       48
     1812       49
     1813       50        %INCLUDE VD_MACROS_M;
     1814     2265        %INCLUDE CP_6;
     1815     2346
     1816     2347
     1817     2348        %VD$BLOCK_DESC (NAME=BLOCK_DESC, STCLASS=PARAM);
     1818     2495    1   DCL NB_BUFFER SBIN;
     1819     2496    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1820     2497    1   DCL START_INDEX SBIN;
     1821     2498    1   DCL END_INDEX SBIN;
     1822     2499
     1823     2500
     1824     2501    1   DCL VDG$FORMAT_LOCATION     ENTRY (5);
     1825     2502    1   DCL VDG$COMPARE_LOCS        ENTRY (3) ALTRET;
     1826     2503
     1827     2504
     1828     2505        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
     1829     2550        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
     1830     2595    1   DCL 1 VD_DW_ORG SYMREF,
     1831     2596    1         2 N_ENTRIES# SBIN,
     1832     2597              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
     1833     2738    1   DCL 1 VD_DW_PROTECT SYMREF,
     1834     2739    1         2 N_ENTRIES# SBIN,
     1835     2740              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
     1836     2881    1   DCL 1 VD_DW_EXIST SYMREF,
     1837     2882    1         2 N_ENTRIES# SBIN,
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:300  
     1838     2883              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
     1839     3024
     1840     3025
     1841     3026        %FPT_UNFID (FPTN=CONST_FPT_UNFID, STCLASS=CONSTANT);
     1842     3044
     1843     3045
     1844     3046
     1845     3047    1   DCL START SBIN;
     1846     3048    1   DCL LEVEL SBIN;
     1847     3049    1   DCL STRUCTURE_LEVEL_NODE$ PTR;
     1848     3050    1   DCL STRUCTURE_LEVEL$ PTR;
     1849     3051    1   DCL ENUM SBIN;
     1850     3052    1   DCL RCCL SBIN;
     1851     3053    1   DCL FILE_KEY$ PTR;
     1852     3054        %FPT_UNFID (STCLASS=AUTO);
     1853     3072        %VLP_SN (STCLASS=AUTO);
     1854     3085
     1855     3086
     1856     3087        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
     1857     3088            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
     1858     3181        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL, STCLASS="BASED(STRUCTURE_LEVEL$)");
     1859     3228        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     1860     3277        %VD$FILE_NODE;
     1861     3370
     1862     3371
     1863     3372
     1864     3373    1           START = START_INDEX;   /* My own copy so I can change it */
     1865     3374
     1866     3375    2           IF ADDR(BLOCK_DESC) = ADDR(NIL) THEN DO;
     1867     3376        /*
     1868     3377           Nothing there, just return some indication.
     1869     3378        */
     1870     3379    2              CALL INSERT (BUFFER, START, %LENGTHC(CHR_BAD_VALUE), %CHR_BAD_VALUE);
     1871     3380    2              END_INDEX = START + %LENGTHC(CHR_BAD_VALUE);
     1872     3381    2              RETURN;
     1873     3382    2              END;
     1874     3383                /*
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:301  
     1875     3384                *   Format the block options:  <org> <protect> <exist>
     1876     3385                */
     1877     3386
     1878     3387    1           STRUCTURE_LEVEL_NODE$ = BLOCK_DESC.OPTIONS.STRUCTURE$ ->
     1879     3388    1             VD$FILE_NODE.HEAD$;
     1880     3389    1           LEVEL = BLOCK_DESC.OPTIONS.LEVEL#;
     1881     3390    2           DO WHILE STRUCTURE_LEVEL_NODE$ ~= ADDR(NIL)
     1882     3391    2             AND LEVEL > 0;
     1883     3392    2              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;
     1884     3393    2              LEVEL = LEVEL - 1;
     1885     3394    2              END;
     1886     3395    2           IF STRUCTURE_LEVEL_NODE$ ~= ADDR(NIL) THEN DO;
     1887     3396    2              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;
     1888     3397    2              ENUM = STRUCTURE$LEVEL.ORG#;
     1889     3398    2              IF ENUM > 0
     1890     3399    3                AND ENUM <= VD_DW_ORG.N_ENTRIES# THEN DO;
     1891     3400                      /* Specific file-org given in Structure:  display it */
     1892     3401    3                 END_INDEX = MINIMUM (START + VD_DW_ORG.DW.LENGTH# (ENUM) + 1,
     1893     3402    3                   NB_BUFFER);
     1894     3403    3                 CALL INSERT (BUFFER, START, END_INDEX - START,
     1895     3404    3                   VD_DW_ORG.DW.BYTES (ENUM));
     1896     3405    3                 START = END_INDEX;
     1897     3406    3                 END;
     1898     3407    2              END;
     1899     3408
     1900     3409    1           ENUM = BLOCK_DESC.OPTIONS.PROTECT#;
     1901     3410    1           IF ENUM ~= VD_$PROTECT.V#
     1902     3411    1             AND ENUM > 0
     1903     3412    2             AND ENUM <= VD_DW_PROTECT.N_ENTRIES# THEN DO;
     1904     3413    2              END_INDEX = MINIMUM (START + VD_DW_PROTECT.DW.LENGTH# (ENUM) + 1,
     1905     3414    2                NB_BUFFER);
     1906     3415    3              IF END_INDEX < NB_BUFFER THEN DO;
     1907     3416    3                 CALL INSERT (BUFFER, START, END_INDEX - START,
     1908     3417    3                   VD_DW_PROTECT.DW.BYTES (ENUM));
     1909     3418    3                 START = END_INDEX;
     1910     3419    3                 END;
     1911     3420    2              END;
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:302  
     1912     3421
     1913     3422    1           ENUM = BLOCK_DESC.OPTIONS.EXIST#;
     1914     3423    1           IF ENUM ~= VD_$EXIST.V#
     1915     3424    1             AND ENUM > 0
     1916     3425    2             AND ENUM <= VD_DW_EXIST.N_ENTRIES# THEN DO;
     1917     3426    2              END_INDEX = MINIMUM (START + VD_DW_EXIST.DW.LENGTH# (ENUM) + 1,
     1918     3427    2                NB_BUFFER);
     1919     3428    2              CALL INSERT (BUFFER, START, END_INDEX - START,
     1920     3429    2                VD_DW_EXIST.DW.BYTES (ENUM));
     1921     3430    2              START = END_INDEX;
     1922     3431    2              END;
     1923     3432
     1924     3433
     1925     3434                /*
     1926     3435                *   Format the file key.
     1927     3436                */
     1928     3437
     1929     3438    1           END_INDEX = MINIMUM (START + LENGTHC(%CONCAT(DWLC_FILE,CHR_SPACE)),
     1930     3439    1             NB_BUFFER);
     1931     3440    2           IF END_INDEX < NB_BUFFER THEN DO;
     1932     3441    2              CALL INSERT (BUFFER, START, END_INDEX - START,
     1933     3442    2                %CONCAT(DWLC_FILE,CHR_SPACE));
     1934     3443    2              START = END_INDEX;
     1935     3444    2              END;
     1936     3445
     1937     3446    1           FPT_UNFID = CONST_FPT_UNFID;
     1938     3447    1           FPT_UNFID.V_ = VECTOR(FPT_UNFID.V);
     1939     3448
     1940     3449    1           FILE_KEY$ = BLOCK_DESC.FILE_KEY.V$;
     1941     3450    2           IF FILE$KEY.LENGTH# = 0 THEN DO;
     1942     3451                   /* File specified via DCB only */
     1943     3452    2              FPT_UNFID.V.DCB# = FILE$KEY.DCB#;
     1944     3453    2              END;
     1945     3454    2           ELSE DO;
     1946     3455    2              FPT_UNFID.ACCT_ = VECTOR(FILE$KEY.UNIQUE.ACCT);
     1947     3456    2              FPT_UNFID.ASN_ = VECTOR(FILE$KEY.ASN#);
     1948     3457    2              FPT_UNFID.NAME_ = VECTOR(FILE$KEY.UNIQUE.FNAME);
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:303  
     1949     3458    2              FPT_UNFID.RES_ = VECTOR(FILE$KEY.RES);
     1950     3459    2              FPT_UNFID.SN_ = VECTOR(VLP_SN);
     1951     3460    2              VLP_SN.NUM# = 1;
     1952     3461    2              VLP_SN.SN# (0) = FILE$KEY.PSN;
     1953     3462    2              END;
     1954     3463    1           FPT_UNFID.TEXTFID_ = VECTOR(SUBSTR(BUFFER, START));
     1955     3464    1           FPT_UNFID.LEN_ = VECTOR(END_INDEX);
     1956     3465    1           CALL M$UNFID (FPT_UNFID)
     1957     3466    2           WHENALTRETURN DO;
     1958     3467    2              END_INDEX = 0;
     1959     3468    2              END;
     1960     3469    1           END_INDEX = START + END_INDEX;
     1961     3470
     1962     3471
     1963     3472                /*
     1964     3473                *   Format the range:  <start_loc> [THRU <end_loc>]
     1965     3474                */
     1966     3475
     1967     3476    2           IF END_INDEX + LENGTHC(%CHR_SPACE) < NB_BUFFER THEN DO;
     1968     3477    2              CALL INSERT (BUFFER, END_INDEX, %LENGTHC(CHR_SPACE), %CHR_SPACE);
     1969     3478    2              END_INDEX = END_INDEX + %LENGTHC(CHR_SPACE);
     1970     3479    2              END;
     1971     3480    1           CALL VDG$FORMAT_LOCATION (BLOCK_DESC.RANGE.START, NB_BUFFER, BUFFER,
     1972     3481    1             END_INDEX, END_INDEX);
     1973     3482
     1974     3483    1           CALL VDG$COMPARE_LOCS (BLOCK_DESC.RANGE.START, BLOCK_DESC.RANGE.ENDD,
     1975     3484    1             RCCL);    /* Ignore altreturn */
     1976     3485    2           IF RCCL ~= %RCCL_EQUAL THEN DO;
     1977     3486    2              IF END_INDEX + %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE))
     1978     3487    3                < NB_BUFFER THEN DO;
     1979     3488    3                 CALL INSERT (BUFFER, END_INDEX,
     1980     3489    3                   %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE)),
     1981     3490    3                   %CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE));
     1982     3491    3                 END_INDEX =
     1983     3492    3                   END_INDEX + %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE));
     1984     3493    3                 END;
     1985     3494    2              CALL VDG$FORMAT_LOCATION (BLOCK_DESC.RANGE.ENDD, NB_BUFFER, BUFFER,
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:304  
     1986     3495    2                END_INDEX, END_INDEX);
     1987     3496    2              END;
     1988     3497
     1989     3498    1           RETURN;
     1990     3499
     1991     3500    1   END VDG$FORMAT_BLOCK_DESC;
     1992     3501        %EOD;

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:305  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$FORMAT_BLOCK_DESC.

   Procedure VDG$FORMAT_BLOCK_DESC requires 294 words for executable code.
   Procedure VDG$FORMAT_BLOCK_DESC requires 48 words of local(AUTO) storage.

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:306  

 Object Unit name= VDG$FORMAT_BLOCK_DESC                      File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:45.28 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     27     33  VDG$FORMAT_BLOCK_DESC
    2   Proc  even  none   294    446  VDG$FORMAT_BLOCK_DESC
    3  RoData even  none     7      7  VDG$FORMAT_BLOCK_DESC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        5  VDG$FORMAT_BLOCK_DESC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 VDG$FORMAT_LOCATION
 yes     yes           Std       3 VDG$COMPARE_LOCS
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:307  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_$PROTECT                           VD_$EXIST
     VD_DW_ORG                             VD_DW_PROTECT                         VD_DW_EXIST
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:308  


     1764        1        /*T***********************************************************/
     1765        2        /*T*                                                         */
     1766        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1767        4        /*T*                                                         */
     1768        5        /*T***********************************************************/
     1769        6
     1770        7        /*D* NAME: VDG$FORMAT_BLOCK_DESC
     1771        8            PARAMETERS:
     1772        9                BLOCK_DESC - A VD$BLOCK_DESC structure specifying the block whose
     1773       10                    location is to be formatted.
     1774       11                NB_BUFFER - # bytes in BUFFER below.
     1775       12                BUFFER - Character buffer, uninitialized at entry.
     1776       13                START_INDEX - Index into BUFFER at which to start formating.
     1777       14                END_INDEX - Uninitialized word.
     1778       15            INPUT:
     1779       16            OUTPUT:
     1780       17                BUFFER will be modified.  Characters from START_INDEX thru
     1781       18                    (new value of END_INDEX) - 1, will be the displayable form of
     1782       19                    BLOCK_DESC.
     1783       20                END_INDEX will contain the index into BUFFER of the byte
     1784       21                    after the last one occupied by the displayable form
     1785       22                    of BLOCK_DESC.
     1786       23            DESCRIPTION:
     1787       24                Format the file key, range, and options as shown below:
     1788       25
     1789       26                    <org> <protect> <exist> FILE <fid> <start_loc> THRU <end_loc>
     1790       27
     1791       28                The basic idea of the display format is to display BLOCK_DESC in a
     1792       29                    form in which it could be entered in the 6Edit command language.
     1793       30                Caveats:
     1794       31                    If BLOCK_DESC.OPTIONS.STRUCTURE's VD$STRUCTURE_LEVEL doesn't give a
     1795       32                        specific file org, then don't display any org info.
     1796       33                    Display <protect> only if it's different from the current value of
     1797       34                        the $PROTECT predefined name.
     1798       35                    Display <exist> only if it's different from the current value of
     1799       36                        the $EXIST predefined name.
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:309  
     1800       37                    If BLOCK_DESC.FILE_KEY is a DCB, we obtain the fid from the DCB and
     1801       38                        format it, not the DCB name.  The user probably wants to know
     1802       39                        what file s/he's editing, even if specified via a DCB operand.
     1803       40                    Dislplay THRU <end_loc> only if end_loc ~= start_loc.
     1804       41        *N**N*  Note that some options are omitted.  Options which aren't yet supported
     1805       42        *N**N*      in the input command language (LEVEL, COMPONENT, KEY_INCR) are not
     1806       43        *N**N*      displayed to the user.
     1807       44        */
     1808       45
     1809       46        VDG$FORMAT_BLOCK_DESC: PROC (BLOCK_DESC, NB_BUFFER, BUFFER, START_INDEX,

     46  2 000000   000000 700200 xent  VDG$FORMAT_* TSX0  ! X66_AUTO_5
         2 000001   000060 000005                    ZERO    48,5

     1810       47                  END_INDEX);
     1811       48
     1812       49
     1813       50        %INCLUDE VD_MACROS_M;
     1814     2265        %INCLUDE CP_6;
     1815     2346
     1816     2347
     1817     2348        %VD$BLOCK_DESC (NAME=BLOCK_DESC, STCLASS=PARAM);
     1818     2495    1   DCL NB_BUFFER SBIN;
     1819     2496    1   DCL BUFFER CHAR(NB_BUFFER) CALIGNED;
     1820     2497    1   DCL START_INDEX SBIN;
     1821     2498    1   DCL END_INDEX SBIN;
     1822     2499
     1823     2500
     1824     2501    1   DCL VDG$FORMAT_LOCATION     ENTRY (5);
     1825     2502    1   DCL VDG$COMPARE_LOCS        ENTRY (3) ALTRET;
     1826     2503
     1827     2504
     1828     2505        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
     1829     2550        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
     1830     2595    1   DCL 1 VD_DW_ORG SYMREF,
     1831     2596    1         2 N_ENTRIES# SBIN,
     1832     2597              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:310  
     1833     2738    1   DCL 1 VD_DW_PROTECT SYMREF,
     1834     2739    1         2 N_ENTRIES# SBIN,
     1835     2740              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
     1836     2881    1   DCL 1 VD_DW_EXIST SYMREF,
     1837     2882    1         2 N_ENTRIES# SBIN,
     1838     2883              %VD_TEXTC (NAME=DW, DIM="(0:0)", LEVEL=2, STCLASS=SYMREF, MXNB=%MXNB_DW);
     1839     3024
     1840     3025
     1841     3026        %FPT_UNFID (FPTN=CONST_FPT_UNFID, STCLASS=CONSTANT);
     1842     3044
     1843     3045
     1844     3046
     1845     3047    1   DCL START SBIN;
     1846     3048    1   DCL LEVEL SBIN;
     1847     3049    1   DCL STRUCTURE_LEVEL_NODE$ PTR;
     1848     3050    1   DCL STRUCTURE_LEVEL$ PTR;
     1849     3051    1   DCL ENUM SBIN;
     1850     3052    1   DCL RCCL SBIN;
     1851     3053    1   DCL FILE_KEY$ PTR;
     1852     3054        %FPT_UNFID (STCLASS=AUTO);
     1853     3072        %VLP_SN (STCLASS=AUTO);
     1854     3085
     1855     3086
     1856     3087        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
     1857     3088            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
     1858     3181        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL, STCLASS="BASED(STRUCTURE_LEVEL$)");
     1859     3228        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     1860     3277        %VD$FILE_NODE;
     1861     3370
     1862     3371
     1863     3372
     1864     3373    1           START = START_INDEX;   /* My own copy so I can change it */

   3373  2 000002   200006 470500                    LDP0    @START_INDEX,,AUTO
         2 000003   000000 235100                    LDA     0,,PR0
         2 000004   200010 755100                    STA     START,,AUTO

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:311  
     1865     3374
     1866     3375    2           IF ADDR(BLOCK_DESC) = ADDR(NIL) THEN DO;

   3375  2 000005   200003 236100                    LDQ     @BLOCK_DESC,,AUTO
         2 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000007   000022 601000 2                  TNZ     s:3387

     1867     3376        /*
     1868     3377           Nothing there, just return some indication.
     1869     3378        */
     1870     3379    2              CALL INSERT (BUFFER, START, %LENGTHC(CHR_BAD_VALUE), %CHR_BAD_VALUE);

   3379  2 000010   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         2 000011   100000 720100                    LXL0    0,,PR1
         2 000012   200005 473500                    LDP3    @BUFFER,,AUTO
         2 000013   040105 100400                    MLR     fill='040'O
         2 000014   000026 000002 1                  ADSC9   CONST_FPT_UNFID+22       cn=0,n=2
         2 000015   300000 000002                    ADSC9   0,A,PR3                  cn=0,n=2

     1871     3380    2              END_INDEX = START + %LENGTHC(CHR_BAD_VALUE);

   3380  2 000016   200007 474500                    LDP4    @END_INDEX,,AUTO
         2 000017   000002 035007                    ADLA    2,DL
         2 000020   400000 755100                    STA     0,,PR4

     1872     3381    2              RETURN;

   3381  2 000021   000000 702200 xent               TSX2  ! X66_ARET

     1873     3382    2              END;
     1874     3383                /*
     1875     3384                *   Format the block options:  <org> <protect> <exist>
     1876     3385                */
     1877     3386
     1878     3387    1           STRUCTURE_LEVEL_NODE$ = BLOCK_DESC.OPTIONS.STRUCTURE$ ->

   3387  2 000022   200003 471500                    LDP1    @BLOCK_DESC,,AUTO
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:312  
         2 000023   100025 473500                    LDP3    21,,PR1
         2 000024   300012 236100                    LDQ     10,,PR3
         2 000025   200012 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1879     3388    1             VD$FILE_NODE.HEAD$;
     1880     3389    1           LEVEL = BLOCK_DESC.OPTIONS.LEVEL#;

   3389  2 000026   100026 236100                    LDQ     22,,PR1
         2 000027   000022 732000                    QRS     18
         2 000030   200011 756100                    STQ     LEVEL,,AUTO

     1881     3390    2           DO WHILE STRUCTURE_LEVEL_NODE$ ~= ADDR(NIL)

   3390  2 000031   000037 710000 2                  TRA     s:3394

     1882     3391    2             AND LEVEL > 0;
     1883     3392    2              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;

   3392  2 000032   200012 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
         2 000033   000002 236100                    LDQ     2,,PR0
         2 000034   200012 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1884     3393    2              LEVEL = LEVEL - 1;

   3393  2 000035   000001 336007                    LCQ     1,DL
         2 000036   200011 056100                    ASQ     LEVEL,,AUTO

     1885     3394    2              END;

   3394  2 000037   200012 236100                    LDQ     STRUCTURE_LEVEL_NODE$,,AUTO
         2 000040   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000041   000044 600000 2                  TZE     s:3395
         2 000042   200011 235100                    LDA     LEVEL,,AUTO
         2 000043   000032 605400 2                  TPNZ    s:3392

     1886     3395    2           IF STRUCTURE_LEVEL_NODE$ ~= ADDR(NIL) THEN DO;

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:313  
   3395  2 000044   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000045   000110 600000 2                  TZE     s:3409

     1887     3396    2              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;

   3396  2 000046   200012 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
         2 000047   000007 236100                    LDQ     7,,PR0
         2 000050   200013 756100                    STQ     STRUCTURE_LEVEL$,,AUTO

     1888     3397    2              ENUM = STRUCTURE$LEVEL.ORG#;

   3397  2 000051   200013 471500                    LDP1    STRUCTURE_LEVEL$,,AUTO
         2 000052   100002 236100                    LDQ     2,,PR1
         2 000053   777777 376007                    ANQ     -1,DL
         2 000054   200014 756100                    STQ     ENUM,,AUTO

     1889     3398    2              IF ENUM > 0

   3398  2 000055   000110 604400 2                  TMOZ    s:3409
         2 000056   000000 116000 xsym               CMPQ    VD_DW_ORG
         2 000057   000110 605400 2                  TPNZ    s:3409

     1890     3399    3                AND ENUM <= VD_DW_ORG.N_ENTRIES# THEN DO;

     1891     3400                      /* Specific file-org given in Structure:  display it */
     1892     3401    3                 END_INDEX = MINIMUM (START + VD_DW_ORG.DW.LENGTH# (ENUM) + 1,

   3401  2 000060   200014 235100                    LDA     ENUM,,AUTO
         2 000061   000003 735000                    ALS     3
         2 000062   000001 236005 xsym               LDQ     VD_DW_ORG+1,AL
         2 000063   000033 772000                    QRL     27
         2 000064   200010 036100                    ADLQ    START,,AUTO
         2 000065   000001 036007                    ADLQ    1,DL
         2 000066   200004 473500                    LDP3    @NB_BUFFER,,AUTO
         2 000067   300000 116100                    CMPQ    0,,PR3
         2 000070   000072 604400 2                  TMOZ    s:3401+10
         2 000071   300000 236100                    LDQ     0,,PR3
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:314  
         2 000072   200007 474500                    LDP4    @END_INDEX,,AUTO
         2 000073   400000 756100                    STQ     0,,PR4

     1893     3402    3                   NB_BUFFER);
     1894     3403    3                 CALL INSERT (BUFFER, START, END_INDEX - START,

   3403  2 000074   300000 720100                    LXL0    0,,PR3
         2 000075   200010 136100                    SBLQ    START,,AUTO
         2 000076   200014 235100                    LDA     ENUM,,AUTO
         2 000077   000005 735000                    ALS     5
         2 000100   200005 475500                    LDP5    @BUFFER,,AUTO
         2 000101   000000 621006                    EAX1    0,QL
         2 000102   200010 236100                    LDQ     START,,AUTO
         2 000103   040146 100405                    MLR     fill='040'O
         2 000104   000001 200037 xsym               ADSC9   VD_DW_ORG+1,A            cn=1,n=31
         2 000105   500000 000011                    ADSC9   0,Q,PR5                  cn=0,n=*X1

     1895     3404    3                   VD_DW_ORG.DW.BYTES (ENUM));
     1896     3405    3                 START = END_INDEX;

   3405  2 000106   400000 235100                    LDA     0,,PR4
         2 000107   200010 755100                    STA     START,,AUTO

     1897     3406    3                 END;

     1898     3407    2              END;

     1899     3408
     1900     3409    1           ENUM = BLOCK_DESC.OPTIONS.PROTECT#;

   3409  2 000110   200003 470500                    LDP0    @BLOCK_DESC,,AUTO
         2 000111   000027 236100                    LDQ     23,,PR0
         2 000112   000022 772000                    QRL     18
         2 000113   200014 756100                    STQ     ENUM,,AUTO

     1901     3410    1           IF ENUM ~= VD_$PROTECT.V#

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:315  
   3410  2 000114   000003 116000 xsym               CMPQ    VD_$PROTECT+3
         2 000115   000154 600000 2                  TZE     s:3422
         2 000116   000000 116003                    CMPQ    0,DU
         2 000117   000154 604400 2                  TMOZ    s:3422
         2 000120   000000 116000 xsym               CMPQ    VD_DW_PROTECT
         2 000121   000154 605400 2                  TPNZ    s:3422

     1902     3411    1             AND ENUM > 0
     1903     3412    2             AND ENUM <= VD_DW_PROTECT.N_ENTRIES# THEN DO;

     1904     3413    2              END_INDEX = MINIMUM (START + VD_DW_PROTECT.DW.LENGTH# (ENUM) + 1,

   3413  2 000122   200014 235100                    LDA     ENUM,,AUTO
         2 000123   000003 735000                    ALS     3
         2 000124   000001 236005 xsym               LDQ     VD_DW_PROTECT+1,AL
         2 000125   000033 772000                    QRL     27
         2 000126   200010 036100                    ADLQ    START,,AUTO
         2 000127   000001 036007                    ADLQ    1,DL
         2 000130   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         2 000131   100000 116100                    CMPQ    0,,PR1
         2 000132   000134 604400 2                  TMOZ    s:3413+10
         2 000133   100000 236100                    LDQ     0,,PR1
         2 000134   200007 473500                    LDP3    @END_INDEX,,AUTO
         2 000135   300000 756100                    STQ     0,,PR3

     1905     3414    2                NB_BUFFER);
     1906     3415    3              IF END_INDEX < NB_BUFFER THEN DO;

   3415  2 000136   100000 116100                    CMPQ    0,,PR1
         2 000137   000154 605000 2                  TPL     s:3422

     1907     3416    3                 CALL INSERT (BUFFER, START, END_INDEX - START,

   3416  2 000140   100000 720100                    LXL0    0,,PR1
         2 000141   200010 136100                    SBLQ    START,,AUTO
         2 000142   200014 235100                    LDA     ENUM,,AUTO
         2 000143   000005 735000                    ALS     5
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:316  
         2 000144   200005 474500                    LDP4    @BUFFER,,AUTO
         2 000145   000000 621006                    EAX1    0,QL
         2 000146   200010 236100                    LDQ     START,,AUTO
         2 000147   040146 100405                    MLR     fill='040'O
         2 000150   000001 200037 xsym               ADSC9   VD_DW_PROTECT+1,A        cn=1,n=31
         2 000151   400000 000011                    ADSC9   0,Q,PR4                  cn=0,n=*X1

     1908     3417    3                   VD_DW_PROTECT.DW.BYTES (ENUM));
     1909     3418    3                 START = END_INDEX;

   3418  2 000152   300000 235100                    LDA     0,,PR3
         2 000153   200010 755100                    STA     START,,AUTO

     1910     3419    3                 END;

     1911     3420    2              END;

     1912     3421
     1913     3422    1           ENUM = BLOCK_DESC.OPTIONS.EXIST#;

   3422  2 000154   000027 236100                    LDQ     23,,PR0
         2 000155   777777 376007                    ANQ     -1,DL
         2 000156   200014 756100                    STQ     ENUM,,AUTO

     1914     3423    1           IF ENUM ~= VD_$EXIST.V#

   3423  2 000157   000003 116000 xsym               CMPQ    VD_$EXIST+3
         2 000160   000215 600000 2                  TZE     s:3438
         2 000161   000000 116003                    CMPQ    0,DU
         2 000162   000215 604400 2                  TMOZ    s:3438
         2 000163   000000 116000 xsym               CMPQ    VD_DW_EXIST
         2 000164   000215 605400 2                  TPNZ    s:3438

     1915     3424    1             AND ENUM > 0
     1916     3425    2             AND ENUM <= VD_DW_EXIST.N_ENTRIES# THEN DO;

     1917     3426    2              END_INDEX = MINIMUM (START + VD_DW_EXIST.DW.LENGTH# (ENUM) + 1,
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:317  

   3426  2 000165   200014 235100                    LDA     ENUM,,AUTO
         2 000166   000003 735000                    ALS     3
         2 000167   000001 236005 xsym               LDQ     VD_DW_EXIST+1,AL
         2 000170   000033 772000                    QRL     27
         2 000171   200010 036100                    ADLQ    START,,AUTO
         2 000172   000001 036007                    ADLQ    1,DL
         2 000173   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         2 000174   100000 116100                    CMPQ    0,,PR1
         2 000175   000177 604400 2                  TMOZ    s:3426+10
         2 000176   100000 236100                    LDQ     0,,PR1
         2 000177   200007 473500                    LDP3    @END_INDEX,,AUTO
         2 000200   300000 756100                    STQ     0,,PR3

     1918     3427    2                NB_BUFFER);
     1919     3428    2              CALL INSERT (BUFFER, START, END_INDEX - START,

   3428  2 000201   100000 720100                    LXL0    0,,PR1
         2 000202   200010 136100                    SBLQ    START,,AUTO
         2 000203   200014 235100                    LDA     ENUM,,AUTO
         2 000204   000005 735000                    ALS     5
         2 000205   200005 474500                    LDP4    @BUFFER,,AUTO
         2 000206   000000 621006                    EAX1    0,QL
         2 000207   200010 236100                    LDQ     START,,AUTO
         2 000210   040146 100405                    MLR     fill='040'O
         2 000211   000001 200037 xsym               ADSC9   VD_DW_EXIST+1,A          cn=1,n=31
         2 000212   400000 000011                    ADSC9   0,Q,PR4                  cn=0,n=*X1

     1920     3429    2                VD_DW_EXIST.DW.BYTES (ENUM));
     1921     3430    2              START = END_INDEX;

   3430  2 000213   300000 235100                    LDA     0,,PR3
         2 000214   200010 755100                    STA     START,,AUTO

     1922     3431    2              END;

     1923     3432
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:318  
     1924     3433
     1925     3434                /*
     1926     3435                *   Format the file key.
     1927     3436                */
     1928     3437
     1929     3438    1           END_INDEX = MINIMUM (START + LENGTHC(%CONCAT(DWLC_FILE,CHR_SPACE)),

   3438  2 000215   200010 236100                    LDQ     START,,AUTO
         2 000216   000005 036007                    ADLQ    5,DL
         2 000217   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         2 000220   100000 116100                    CMPQ    0,,PR1
         2 000221   000223 604400 2                  TMOZ    s:3438+6
         2 000222   100000 236100                    LDQ     0,,PR1
         2 000223   200007 473500                    LDP3    @END_INDEX,,AUTO
         2 000224   300000 756100                    STQ     0,,PR3

     1930     3439    1             NB_BUFFER);
     1931     3440    2           IF END_INDEX < NB_BUFFER THEN DO;

   3440  2 000225   100000 116100                    CMPQ    0,,PR1
         2 000226   000241 605000 2                  TPL     s:3446

     1932     3441    2              CALL INSERT (BUFFER, START, END_INDEX - START,

   3441  2 000227   100000 720100                    LXL0    0,,PR1
         2 000230   200010 136100                    SBLQ    START,,AUTO
         2 000231   200005 474500                    LDP4    @BUFFER,,AUTO
         2 000232   000000 621006                    EAX1    0,QL
         2 000233   200010 235100                    LDA     START,,AUTO
         2 000234   040145 100400                    MLR     fill='040'O
         2 000235   000027 000005 1                  ADSC9   CONST_FPT_UNFID+23       cn=0,n=5
         2 000236   400000 000011                    ADSC9   0,A,PR4                  cn=0,n=*X1

     1933     3442    2                %CONCAT(DWLC_FILE,CHR_SPACE));
     1934     3443    2              START = END_INDEX;

   3443  2 000237   300000 235100                    LDA     0,,PR3
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:319  
         2 000240   200010 755100                    STA     START,,AUTO

     1935     3444    2              END;

     1936     3445
     1937     3446    1           FPT_UNFID = CONST_FPT_UNFID;

   3446  2 000241   000100 100400                    MLR     fill='000'O
         2 000242   000000 000130 1                  ADSC9   CONST_FPT_UNFID          cn=0,n=88
         2 000243   200020 000130                    ADSC9   FPT_UNFID,,AUTO          cn=0,n=88

     1938     3447    1           FPT_UNFID.V_ = VECTOR(FPT_UNFID.V);

   3447  2 000244   000000 235000 3                  LDA     0
         2 000245   200052 452500                    STP2    VLP_SN+4,,AUTO
         2 000246   200052 236100                    LDQ     VLP_SN+4,,AUTO
         2 000247   000044 036003                    ADLQ    36,DU
         2 000250   200020 757100                    STAQ    FPT_UNFID,,AUTO

     1939     3448
     1940     3449    1           FILE_KEY$ = BLOCK_DESC.FILE_KEY.V$;

   3449  2 000251   000002 236100                    LDQ     2,,PR0
         2 000252   200016 756100                    STQ     FILE_KEY$,,AUTO

     1941     3450    2           IF FILE$KEY.LENGTH# = 0 THEN DO;

   3450  2 000253   200016 474500                    LDP4    FILE_KEY$,,AUTO
         2 000254   400002 236100                    LDQ     2,,PR4
         2 000255   777000 316003                    CANQ    -512,DU
         2 000256   000262 601000 2                  TNZ     s:3455

     1942     3451                   /* File specified via DCB only */
     1943     3452    2              FPT_UNFID.V.DCB# = FILE$KEY.DCB#;

   3452  2 000257   400021 220100                    LDX0    17,,PR4
         2 000260   200044 740100                    STX0    FPT_UNFID+20,,AUTO
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:320  

     1944     3453    2              END;

   3453  2 000261   000314 710000 2                  TRA     s:3463

     1945     3454    2           ELSE DO;

     1946     3455    2              FPT_UNFID.ACCT_ = VECTOR(FILE$KEY.UNIQUE.ACCT);

   3455  2 000262   000000 235000 3                  LDA     0
         2 000263   200016 236100                    LDQ     FILE_KEY$,,AUTO
         2 000264   000001 036000 3                  ADLQ    1
         2 000265   200026 757100                    STAQ    FPT_UNFID+6,,AUTO

     1947     3456    2              FPT_UNFID.ASN_ = VECTOR(FILE$KEY.ASN#);

   3456  2 000266   177640 235007                    LDA     65440,DL
         2 000267   200016 236100                    LDQ     FILE_KEY$,,AUTO
         2 000270   000002 036000 3                  ADLQ    2
         2 000271   200036 757100                    STAQ    FPT_UNFID+14,,AUTO

     1948     3457    2              FPT_UNFID.NAME_ = VECTOR(FILE$KEY.UNIQUE.FNAME);

   3457  2 000272   000003 235000 3                  LDA     3
         2 000273   200016 236100                    LDQ     FILE_KEY$,,AUTO
         2 000274   000004 036000 3                  ADLQ    4
         2 000275   200024 757100                    STAQ    FPT_UNFID+4,,AUTO

     1949     3458    2              FPT_UNFID.RES_ = VECTOR(FILE$KEY.RES);

   3458  2 000276   777640 235007                    LDA     -96,DL
         2 000277   200016 236100                    LDQ     FILE_KEY$,,AUTO
         2 000300   000005 036000 3                  ADLQ    5
         2 000301   200040 757100                    STAQ    FPT_UNFID+16,,AUTO

     1950     3459    2              FPT_UNFID.SN_ = VECTOR(VLP_SN);

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:321  
   3459  2 000302   000006 235000 3                  LDA     6
         2 000303   200052 452500                    STP2    VLP_SN+4,,AUTO
         2 000304   200052 236100                    LDQ     VLP_SN+4,,AUTO
         2 000305   000046 036003                    ADLQ    38,DU
         2 000306   200032 757100                    STAQ    FPT_UNFID+10,,AUTO

     1951     3460    2              VLP_SN.NUM# = 1;

   3460  2 000307   000001 235007                    LDA     1,DL
         2 000310   200046 755100                    STA     VLP_SN,,AUTO

     1952     3461    2              VLP_SN.SN# (0) = FILE$KEY.PSN;

   3461  2 000311   040100 100500                    MLR     fill='040'O
         2 000312   400015 400006                    ADSC9   13,,PR4                  cn=2,n=6
         2 000313   200047 000006                    ADSC9   VLP_SN+1,,AUTO           cn=0,n=6

     1953     3462    2              END;

     1954     3463    1           FPT_UNFID.TEXTFID_ = VECTOR(SUBSTR(BUFFER, START));

   3463  2 000314   100000 720100                    LXL0    0,,PR1
         2 000315   000000 636010                    EAQ     0,X0
         2 000316   000022 732000                    QRS     18
         2 000317   200010 136100                    SBLQ    START,,AUTO
         2 000320   000064 737000                    LLS     52
         2 000321   000140 135007                    SBLA    96,DL
         2 000322   200010 236100                    LDQ     START,,AUTO
         2 000323   000020 736000                    QLS     16
         2 000324   200005 036100                    ADLQ    @BUFFER,,AUTO
         2 000325   200022 757100                    STAQ    FPT_UNFID+2,,AUTO

     1955     3464    1           FPT_UNFID.LEN_ = VECTOR(END_INDEX);

   3464  2 000326   777640 235007                    LDA     -96,DL
         2 000327   200007 236100                    LDQ     @END_INDEX,,AUTO
         2 000330   200042 757100                    STAQ    FPT_UNFID+18,,AUTO
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:322  

     1956     3465    1           CALL M$UNFID (FPT_UNFID)

   3465  2 000331   200020 630500                    EPPR0   FPT_UNFID,,AUTO
         2 000332   420021 713400                    CLIMB   alt,+8209
         2 000333   404400 401760                    pmme    nvectors=10
         2 000334   000336 702000 2                  TSX2    s:3467
         2 000335   000340 710000 2                  TRA     s:3469

     1957     3466    2           WHENALTRETURN DO;

     1958     3467    2              END_INDEX = 0;

   3467  2 000336   200007 470500                    LDP0    @END_INDEX,,AUTO
         2 000337   000000 450100                    STZ     0,,PR0

     1959     3468    2              END;

     1960     3469    1           END_INDEX = START + END_INDEX;

   3469  2 000340   200007 470500                    LDP0    @END_INDEX,,AUTO
         2 000341   200010 236100                    LDQ     START,,AUTO
         2 000342   000000 036100                    ADLQ    0,,PR0
         2 000343   000000 756100                    STQ     0,,PR0

     1961     3470
     1962     3471
     1963     3472                /*
     1964     3473                *   Format the range:  <start_loc> [THRU <end_loc>]
     1965     3474                */
     1966     3475
     1967     3476    2           IF END_INDEX + LENGTHC(%CHR_SPACE) < NB_BUFFER THEN DO;

   3476  2 000344   200004 471500                    LDP1    @NB_BUFFER,,AUTO
         2 000345   000001 036007                    ADLQ    1,DL
         2 000346   100000 116100                    CMPQ    0,,PR1
         2 000347   000357 605000 2                  TPL     s:3480
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:323  

     1968     3477    2              CALL INSERT (BUFFER, END_INDEX, %LENGTHC(CHR_SPACE), %CHR_SPACE);

   3477  2 000350   100000 720100                    LXL0    0,,PR1
         2 000351   000000 235100                    LDA     0,,PR0
         2 000352   200005 473500                    LDP3    @BUFFER,,AUTO
         2 000353   040105 100400                    MLR     fill='040'O
         2 000354   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000355   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1

     1969     3478    2              END_INDEX = END_INDEX + %LENGTHC(CHR_SPACE);

   3478  2 000356   000000 054100                    AOS     0,,PR0

     1970     3479    2              END;

     1971     3480    1           CALL VDG$FORMAT_LOCATION (BLOCK_DESC.RANGE.START, NB_BUFFER, BUFFER,

   3480  2 000357   200007 236100                    LDQ     @END_INDEX,,AUTO
         2 000360   200056 756100                    STQ     VLP_SN+8,,AUTO
         2 000361   200005 235100                    LDA     @BUFFER,,AUTO
         2 000362   200054 757100                    STAQ    VLP_SN+6,,AUTO
         2 000363   200004 236100                    LDQ     @NB_BUFFER,,AUTO
         2 000364   200053 756100                    STQ     VLP_SN+5,,AUTO
         2 000365   200003 236100                    LDQ     @BLOCK_DESC,,AUTO
         2 000366   000003 036003                    ADLQ    3,DU
         2 000367   200052 756100                    STQ     VLP_SN+4,,AUTO
         2 000370   200052 630500                    EPPR0   VLP_SN+4,,AUTO
         2 000371   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000372   000000 701000 xent               TSX1    VDG$FORMAT_LOCATION
         2 000373   000000 011000                    NOP     0

     1972     3481    1             END_INDEX, END_INDEX);
     1973     3482
     1974     3483    1           CALL VDG$COMPARE_LOCS (BLOCK_DESC.RANGE.START, BLOCK_DESC.RANGE.ENDD,

   3483  2 000374   200015 630500                    EPPR0   RCCL,,AUTO
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:324  
         2 000375   200054 450500                    STP0    VLP_SN+6,,AUTO
         2 000376   200003 236100                    LDQ     @BLOCK_DESC,,AUTO
         2 000377   000014 036003                    ADLQ    12,DU
         2 000400   200053 756100                    STQ     VLP_SN+5,,AUTO
         2 000401   200003 236100                    LDQ     @BLOCK_DESC,,AUTO
         2 000402   000003 036003                    ADLQ    3,DU
         2 000403   200052 756100                    STQ     VLP_SN+4,,AUTO
         2 000404   200052 630500                    EPPR0   VLP_SN+4,,AUTO
         2 000405   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000406   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         2 000407   000000 011000                    NOP     0

     1975     3484    1             RCCL);    /* Ignore altreturn */
     1976     3485    2           IF RCCL ~= %RCCL_EQUAL THEN DO;

   3485  2 000410   200015 235100                    LDA     RCCL,,AUTO
         2 000411   000445 600000 2                  TZE     s:3498

     1977     3486    2              IF END_INDEX + %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE))

   3486  2 000412   200004 470500                    LDP0    @NB_BUFFER,,AUTO
         2 000413   200007 471500                    LDP1    @END_INDEX,,AUTO
         2 000414   100000 236100                    LDQ     0,,PR1
         2 000415   000006 036007                    ADLQ    6,DL
         2 000416   000000 116100                    CMPQ    0,,PR0
         2 000417   000430 605000 2                  TPL     s:3494

     1978     3487    3                < NB_BUFFER THEN DO;

     1979     3488    3                 CALL INSERT (BUFFER, END_INDEX,

   3488  2 000420   000000 720100                    LXL0    0,,PR0
         2 000421   100000 235100                    LDA     0,,PR1
         2 000422   200005 473500                    LDP3    @BUFFER,,AUTO
         2 000423   040105 100400                    MLR     fill='040'O
         2 000424   000031 000006 1                  ADSC9   CONST_FPT_UNFID+25       cn=0,n=6
         2 000425   300000 000006                    ADSC9   0,A,PR3                  cn=0,n=6
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:325  

     1980     3489    3                   %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE)),
     1981     3490    3                   %CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE));
     1982     3491    3                 END_INDEX =

   3491  2 000426   000006 236007                    LDQ     6,DL
         2 000427   100000 056100                    ASQ     0,,PR1

     1983     3492    3                   END_INDEX + %LENGTHC(CONCAT(CHR_SPACE,DWLC_THRU,CHR_SPACE));
     1984     3493    3                 END;

     1985     3494    2              CALL VDG$FORMAT_LOCATION (BLOCK_DESC.RANGE.ENDD, NB_BUFFER, BUFFER,

   3494  2 000430   200007 236100                    LDQ     @END_INDEX,,AUTO
         2 000431   200056 756100                    STQ     VLP_SN+8,,AUTO
         2 000432   200005 235100                    LDA     @BUFFER,,AUTO
         2 000433   200054 757100                    STAQ    VLP_SN+6,,AUTO
         2 000434   200004 236100                    LDQ     @NB_BUFFER,,AUTO
         2 000435   200053 756100                    STQ     VLP_SN+5,,AUTO
         2 000436   200003 236100                    LDQ     @BLOCK_DESC,,AUTO
         2 000437   000014 036003                    ADLQ    12,DU
         2 000440   200052 756100                    STQ     VLP_SN+4,,AUTO
         2 000441   200052 630500                    EPPR0   VLP_SN+4,,AUTO
         2 000442   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000443   000000 701000 xent               TSX1    VDG$FORMAT_LOCATION
         2 000444   000000 011000                    NOP     0

     1986     3495    2                END_INDEX, END_INDEX);
     1987     3496    2              END;

     1988     3497
     1989     3498    1           RETURN;

   3498  2 000445   000000 702200 xent               TSX2  ! X66_ARET
     1990     3499
     1991     3500    1   END VDG$FORMAT_BLOCK_DESC;
     1992     3501        %EOD;
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:326  

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:327  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$FORMAT_BLOCK_DESC.
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:328  

 **** Variables and constants ****

  ****  Section 001 RoData VDG$FORMAT_BLOCK_DESC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(792)   r     1 CONST_FPT_UNFID

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BLOCK_DESC                5-0-0/w PTR         r     1 @BUFFER
     7-0-0/w PTR         r     1 @END_INDEX                 4-0-0/w PTR         r     1 @NB_BUFFER
     6-0-0/w PTR         r     1 @START_INDEX              *0-0-0/w STRC(936)   r     1 BLOCK_DESC
    *0-0-0/c ACHR        r     1 BUFFER                    *0-0-0/w SBIN        r     1 END_INDEX
    14-0-0/w SBIN        r     1 ENUM                      16-0-0/w PTR         r     1 FILE_KEY$
    20-0-0/d STRC(792)   r     1 FPT_UNFID                 11-0-0/w SBIN        r     1 LEVEL
    *0-0-0/w SBIN        r     1 NB_BUFFER                 15-0-0/w SBIN        r     1 RCCL
    10-0-0/w SBIN        r     1 START                     *0-0-0/w SBIN        r     1 START_INDEX
    13-0-0/w PTR         r     1 STRUCTURE_LEVEL$
    12-0-0/w PTR         r     1 STRUCTURE_LEVEL_NODE$
    46-0-0/d STRC(90)    r     1 VLP_SN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$EXIST                  0-0-0/w STRC(144)   r     1 VD_$PROTECT
     0-0-0/w STRC(324)   r     1 VD_DW_EXIST                0-0-0/w STRC(324)   r     1 VD_DW_ORG
     0-0-0/w STRC(324)   r     1 VD_DW_PROTECT

  ****  BASED and DCB variables  ****

PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:329  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(648)   r     1 FILE$KEY                   0-0-0/w STRC(324)   r     1 STRUCTURE$LEVEL
     0-0-0/w STRC(468)   r     1 STRUCTURE$LEVEL_NODE       0-0-0/w STRC(468)   r     1 VD$FILE_NODE


   Procedure VDG$FORMAT_BLOCK_DESC requires 294 words for executable code.
   Procedure VDG$FORMAT_BLOCK_DESC requires 48 words of local(AUTO) storage.
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:330  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:331  
          MINI XREF LISTING

BLOCK_DESC
      2356**DCL        46--PROC     3375--IF
BLOCK_DESC.FILE_KEY.V$
      2394**DCL      3449>>ASSIGN
BLOCK_DESC.OPTIONS.EXIST#
      2478**DCL      3422>>ASSIGN
BLOCK_DESC.OPTIONS.LEVEL#
      2477**DCL      3389>>ASSIGN
BLOCK_DESC.OPTIONS.PROTECT#
      2477**DCL      3409>>ASSIGN
BLOCK_DESC.OPTIONS.STRUCTURE$
      2477**DCL      3387>>ASSIGN
BLOCK_DESC.RANGE.ENDD
      2446**DCL      3483<>CALL     3494<>CALL
BLOCK_DESC.RANGE.START
      2418**DCL      3480<>CALL     3483<>CALL
BUFFER
      2496**DCL        46--PROC     3379<<CALLBLT  3403<<CALLBLT  3416<<CALLBLT  3428<<CALLBLT  3441<<CALLBLT
      3463--ASSIGN   3477<<CALLBLT  3480<>CALL     3488<<CALLBLT  3494<>CALL
CONST_FPT_UNFID
      3037**DCL      3446>>ASSIGN
CONST_FPT_UNFID.V
      3041**DCL      3037--DCLINIT
END_INDEX
      2498**DCL        46--PROC     3380<<ASSIGN   3401<<ASSIGN   3403>>CALLBLT  3405>>ASSIGN   3413<<ASSIGN
      3415>>IF       3416>>CALLBLT  3418>>ASSIGN   3426<<ASSIGN   3428>>CALLBLT  3430>>ASSIGN   3438<<ASSIGN
      3440>>IF       3441>>CALLBLT  3443>>ASSIGN   3464--ASSIGN   3467<<ASSIGN   3469<<ASSIGN   3469>>ASSIGN
      3476>>IF       3477>>CALLBLT  3478<<ASSIGN   3478>>ASSIGN   3480<>CALL     3480<>CALL     3486>>IF
      3488>>CALLBLT  3491<<ASSIGN   3491>>ASSIGN   3494<>CALL     3494<>CALL
ENUM
      3051**DCL      3397<<ASSIGN   3398>>IF       3398>>IF       3401>>ASSIGN   3403>>CALLBLT  3409<<ASSIGN
      3410>>IF       3410>>IF       3410>>IF       3413>>ASSIGN   3416>>CALLBLT  3422<<ASSIGN   3423>>IF
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:332  
      3423>>IF       3423>>IF       3426>>ASSIGN   3428>>CALLBLT
FILE$KEY.ASN#
      3273**DCL      3456--ASSIGN
FILE$KEY.DCB#
      3274**DCL      3452>>ASSIGN
FILE$KEY.LENGTH#
      3271**DCL      3450>>IF
FILE$KEY.PSN
      3274**DCL      3461>>ASSIGN
FILE$KEY.RES
      3273**DCL      3458--ASSIGN
FILE$KEY.UNIQUE.ACCT
      3272**DCL      3455--ASSIGN
FILE$KEY.UNIQUE.FNAME
      3272**DCL      3457--ASSIGN
FILE_KEY$
      3053**DCL      3244--IMP-PTR  3449<<ASSIGN   3450>>IF       3452>>ASSIGN   3455>>ASSIGN   3456>>ASSIGN
      3457>>ASSIGN   3458>>ASSIGN   3461>>ASSIGN
FPT_UNFID
      3065**DCL      3446<<ASSIGN   3465<>CALL
FPT_UNFID.ACCT_
      3066**DCL      3455<<ASSIGN
FPT_UNFID.ASN_
      3068**DCL      3456<<ASSIGN
FPT_UNFID.LEN_
      3068**DCL      3464<<ASSIGN
FPT_UNFID.NAME_
      3066**DCL      3457<<ASSIGN
FPT_UNFID.RES_
      3068**DCL      3458<<ASSIGN
FPT_UNFID.SN_
      3067**DCL      3459<<ASSIGN
FPT_UNFID.TEXTFID_
      3065**DCL      3463<<ASSIGN
FPT_UNFID.V
      3069**DCL      3447--ASSIGN
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:333  
FPT_UNFID.V.DCB#
      3069**DCL      3452<<ASSIGN
FPT_UNFID.V_
      3065**DCL      3447<<ASSIGN
LEVEL
      3048**DCL      3389<<ASSIGN   3390>>DOWHILE  3393<<ASSIGN   3393>>ASSIGN
M$UNFID
      2337**DCL-ENT  3465--CALL
NB_BUFFER
      2495**DCL        46--PROC     2496--IMP-SIZ  3379>>CALLBLT  3401>>ASSIGN   3403>>CALLBLT  3413>>ASSIGN
      3415>>IF       3416>>CALLBLT  3426>>ASSIGN   3428>>CALLBLT  3438>>ASSIGN   3440>>IF       3441>>CALLBLT
      3463>>ASSIGN   3476>>IF       3477>>CALLBLT  3480<>CALL     3480>>CALL     3486>>IF       3488>>CALLBLT
      3494<>CALL     3494>>CALL
RCCL
      3052**DCL      3483<>CALL     3485>>IF
START
      3047**DCL      3373<<ASSIGN   3379>>CALLBLT  3380>>ASSIGN   3401>>ASSIGN   3403>>CALLBLT  3403>>CALLBLT
      3405<<ASSIGN   3413>>ASSIGN   3416>>CALLBLT  3416>>CALLBLT  3418<<ASSIGN   3426>>ASSIGN   3428>>CALLBLT
      3428>>CALLBLT  3430<<ASSIGN   3438>>ASSIGN   3441>>CALLBLT  3441>>CALLBLT  3443<<ASSIGN   3463>>ASSIGN
      3469>>ASSIGN
START_INDEX
      2497**DCL        46--PROC     3373>>ASSIGN
STRUCTURE$LEVEL.ORG#
      3224**DCL      3397>>ASSIGN
STRUCTURE$LEVEL_NODE.DESC.SPEC.V$
      3175**DCL      3396>>ASSIGN
STRUCTURE$LEVEL_NODE.FLINK$
      3122**DCL      3392>>ASSIGN
STRUCTURE_LEVEL$
      3050**DCL      3197--IMP-PTR  3396<<ASSIGN   3397>>ASSIGN
STRUCTURE_LEVEL_NODE$
      3049**DCL      3096--IMP-PTR  3387<<ASSIGN   3390>>DOWHILE  3392<<ASSIGN   3392>>ASSIGN   3395>>IF
      3396>>ASSIGN
VD$FILE_NODE.HEAD$
      3368**DCL      3387>>ASSIGN
VDG$COMPARE_LOCS
PL6.E3A0      #016=VDG$FORMAT_BLOCK_DESC File=VDG$UTILITY.:VDA5TSI               FRI 07/04/97 11:24 Page:334  
      2502**DCL-ENT  3483--CALL
VDG$FORMAT_LOCATION
      2501**DCL-ENT  3480--CALL     3494--CALL
VD_$EXIST.V#
      2592**DCL      3423>>IF
VD_$PROTECT.V#
      2547**DCL      3410>>IF
VD_DW_EXIST.DW.BYTES
      3021**DCL      3428>>CALLBLT
VD_DW_EXIST.DW.LENGTH#
      3021**DCL      3426>>ASSIGN
VD_DW_EXIST.N_ENTRIES#
      2882**DCL      3423>>IF
VD_DW_ORG.DW.BYTES
      2735**DCL      3403>>CALLBLT
VD_DW_ORG.DW.LENGTH#
      2735**DCL      3401>>ASSIGN
VD_DW_ORG.N_ENTRIES#
      2596**DCL      3398>>IF
VD_DW_PROTECT.DW.BYTES
      2878**DCL      3416>>CALLBLT
VD_DW_PROTECT.DW.LENGTH#
      2878**DCL      3413>>ASSIGN
VD_DW_PROTECT.N_ENTRIES#
      2739**DCL      3410>>IF
VLP_SN
      3083**DCL      3459--ASSIGN
VLP_SN.NUM#
      3083**DCL      3460<<ASSIGN
VLP_SN.SN#
      3083**DCL      3461<<ASSIGN

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:335  
     1993        1        /*T***********************************************************/
     1994        2        /*T*                                                         */
     1995        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1996        4        /*T*                                                         */
     1997        5        /*T***********************************************************/
     1998        6
     1999        7        /*D* NAME:  VDG$EXEC_CONTROL
     2000        8            PARAMETERS:
     2001        9                LN_TEXT:  # bytes in text string.
     2002       10                TEXT:  Text string.
     2003       11                CONTROL_INDEX:  Index into TEXT of the $CONTROL character.
     2004       12                RET_CODE:  An uninitialized CHAR(1) CALIGNED.
     2005       13                CTRL_ARGS:  An optional, uninitialized array of SBIN words.
     2006       14                    If given, there must be %MX_CTRL_FN_ARGS entries in the array.
     2007       15            INPUT:
     2008       16                VD_$CONTROL:  VD_BUFFER for the predefined name $CONTROL.
     2009       17                    Value's length must not be 0.
     2010       18            SCRATCH:
     2011       19                VD_STATIC_TEMP
     2012       20            OUTPUT:
     2013       21                LN_TEXT may be decreased if the $CONTROL function causes
     2014       22                    removal of text from TEXT.
     2015       23                TEXT will be modified, based on the $CONTROL function
     2016       24                    executed.
     2017       25                CONTROL_INDEX will contain the index into TEXT of the next
     2018       26                    char to scan for $CONTROL functions.
     2019       27                RET_CODE will contain either:
     2020       28                    o a space character, indicating that all processing was
     2021       29                        performed; or
     2022       30                    o a $CONTROL-function id character (%FNID_xxx),
     2023       31                        indicating some additional processing is necessary,
     2024       32                        and specifying which function was found.
     2025       33                CTRL_ARGS (if supplied) will be cleared.
     2026       34                        For the following $CONTROL-Functions, CTRL_ARGS will
     2027       35                        contain the specified or default values for arguments
     2028       36                        of the function:
     2029       37                    %FNID_WILD_CHAR:  CTRL_ARGS (0) = minimum # chars to match,
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:336  
     2030       38                        CTRL_ARGS (1) = maximum # chars to match.
     2031       39        *N*         %FNID_SET_OF_SEQUENCES:  CTRL_ARGS(0) = length of sequence
     2032       40        *N*             to match.
     2033       41            DESCRIPTION:
     2034       42                Delimit the entire $CONTROL-function.  This will be in one
     2035       43                of two forms:
     2036       44                For Literal, %FNID_RECORD, _CURRENT, _WILD_STRING,
     2037       45                    _BO_MATCH, and _EO_MATCH:
     2038       46                                %f
     2039       47                For %FNID_VALUE, _WILD_CHAR, and _SET_OF_SEQUENCES:
     2040       48                                %f(ppp...)
     2041       49                where:
     2042       50                    "%" represents the current value of $CONTROL name.
     2043       51                    "f" is the function identifier.
     2044       52                    "ppp..." is a mandatory list of numeric parameters,
     2045       53                            separated by commas.
     2046       54
     2047       55                Execute the function.  All function executions involve at
     2048       56                least removing the function invokation from the text string.
     2049       57                Some function executions are partial; return the appropriate
     2050       58                return code and optional arguments.
     2051       59        */
     2052       60
     2053       61        VDG$EXEC_CONTROL: PROC (LN_TEXT, TEXT, CONTROL_INDEX, RET_CODE, CTRL_ARGS)
     2054       62                  ALTRET;
     2055       63
     2056       64
     2057       65        %INCLUDE VD_MACROS_M;
     2058     2280        %INCLUDE VD_PERR_C;
     2059     2428        %INCLUDE B$TABLES_C;
     2060     2536
     2061     2537
     2062     2538    1   DCL LN_TEXT UBIN;
     2063     2539    1   DCL TEXT CHAR(LN_TEXT) CALIGNED;
     2064     2540    1   DCL CONTROL_INDEX UBIN;
     2065     2541    1   DCL RET_CODE CHAR(1) CALIGNED;
     2066     2542    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:337  
     2067     2543
     2068     2544
     2069     2545    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     2070     2546    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2071     2547    1   DCL VDG$ESCREECH        ENTRY (3);
     2072     2548
     2073     2549
     2074     2550        %VD_6E (STCLASS=SYMREF);
     2075     2586        %B$XL_UPPER;
     2076     2590        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2077     2650
     2078     2651
     2079     2652    1   DCL PTR_$CONTROL$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2080     2653
     2081     2654
     2082     2655
     2083     2656    1   DCL FUNC_ID CHAR(1) ALIGNED;
     2084     2657    1   DCL POST_INDEX SBIN;
     2085     2658    1   DCL PARAM_INDEX (0:%MX_CTRL_FN_ARGS) SBIN;
     2086     2659    1   DCL PARAM_LN (0:%MX_CTRL_FN_ARGS) SBIN;
     2087     2660    1   DCL NUM_PARAMS SBIN;
     2088     2661    1   DCL I SBIN;
     2089     2662        %VD_TEXTC (NAME=DEC, STCLASS="", MXNB=%MXNB_NUM_LITERAL);
     2090     2803    1   DCL ARG_VALUES (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2091     2804    1   DCL ERR_CODE SBIN;
     2092     2805    1   DCL VD_ERR$ PTR;
     2093     2806    1   DCL SUBST_FIELD$ PTR;
     2094     2807    1   DCL ERR_MIN_VALUE SBIN;
     2095     2808    1   DCL ERR_MAX_VALUE SBIN;
     2096     2809
     2097     2810
     2098     2811        %VD$BUFFER (NAME=VD$CONTROL, STCLASS="BASED(PTR_$CONTROL$)");
     2099     2869        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2100     2922        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2101     2967
     2102     2968
     2103     2969    1           RET_CODE = %CHR_SPACE;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:338  
     2104     2970    1           IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN
     2105     2971    1              CTRL_ARGS = %CLEAR;
     2106     2972    1           PARAM_INDEX = %CLEAR;
     2107     2973    1           PARAM_LN = %CLEAR;
     2108     2974    1           NUM_PARAMS = 0;
     2109     2975    1           ARG_VALUES = %CLEAR;
     2110     2976
     2111     2977                /* Delimit the function invokation */
     2112     2978
     2113     2979    1           FUNC_ID =
     2114     2980    1             SUBSTR(TEXT, CONTROL_INDEX + VD_$CONTROL.LENGTH#, 1);
     2115     2981    1           CALL XLATE (FUNC_ID, B$XL_UPPER, FUNC_ID);
     2116     2982    1           POST_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH# + 1;
     2117     2983
     2118     2984    2           DO SELECT (FUNC_ID);
     2119     2985    2              SELECT (%FNID_VALUE, %FNID_WILD_CHAR
     2120     2986    2             /*N* , %FNID_SET_OF_SEQUENCES *N*/ );
     2121     2987                   /*
     2122     2988                   *    These $CONTROL-Functions require numeric parameters.
     2123     2989                   */
     2124     2990    2              IF SUBSTR(TEXT, POST_INDEX, 1) ~= %CHR_LPAREN THEN
     2125     2991    2                 GOTO NO_CTRLFN_LEFT_PAREN;
     2126     2992    2              PARAM_INDEX (0) = POST_INDEX + 1;
     2127     2993    2              CALL INDEX (POST_INDEX, %CHR_RPAREN, TEXT, PARAM_INDEX (0))
     2128     2994    2                ALTRET (NO_CTRLFN_RIGHT_PAREN);
     2129     2995    2              POST_INDEX = POST_INDEX + 1;
     2130     2996
     2131     2997    3              DO WHILE PARAM_INDEX (NUM_PARAMS) < POST_INDEX;
     2132     2998    3                 NUM_PARAMS = NUM_PARAMS + 1;
     2133     2999    3                 CALL INDEX (PARAM_INDEX (NUM_PARAMS), %CHR_COMMA, TEXT,
     2134     3000    3                   PARAM_INDEX (NUM_PARAMS - 1));
     2135     3001    3                 PARAM_INDEX (NUM_PARAMS) = MINIMUM (POST_INDEX,
     2136     3002    3                   PARAM_INDEX (NUM_PARAMS) + %LENGTHC(CHR_COMMA));
     2137     3003    3                 END;
     2138     3004    3              DO I = 0 TO (NUM_PARAMS - 1);
     2139     3005    3                 PARAM_LN (I) = PARAM_INDEX (I+1) - PARAM_INDEX (I) -
     2140     3006    3                   %LENGTHC(CHR_COMMA);
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:339  
     2141     3007    3                 END;
     2142     3008
     2143     3009    3              DO SELECT (FUNC_ID); /* Initialize default values */
     2144     3010    3                 SELECT (%FNID_VALUE);
     2145     3011    3                 ARG_VALUES (0) = 0;
     2146     3012    3                 ARG_VALUES (1) = %MX_BYTE_VALUE;
     2147     3013    3                 SELECT (%FNID_WILD_CHAR);
     2148     3014    3                 ARG_VALUES (0) = 0;
     2149     3015    3                 ARG_VALUES (1) = %INFINITY;
     2150     3016                    /*N* SELECT (%FNID_SET_OF_SEQUENCES);   *N*/
     2151     3017                    /*N*   ARG_VALUES (0) = 1;              *N*/
     2152     3018                    /*N*   ARG_VALUES (1) = 0;              *N*/
     2153     3019    3                 END;
     2154     3020                   /*
     2155     3021                   *  If we have:            ARG_VALUES should get:
     2156     3022                   *     ()                      dflt, dflt
     2157     3023                   *     (,)                     dflt, dflt
     2158     3024                   *     (m)                     m, m
     2159     3025                   *     (m,)                    m, dflt
     2160     3026                   *     (,n)                    dflt, n
     2161     3027                   *     (m,n)                   m, n
     2162     3028                   */
     2163     3029    2              IF PARAM_LN (0) > 0
     2164     3030    2                AND SUBSTR(TEXT, PARAM_INDEX (0), PARAM_LN (0)) ~=
     2165     3031    3                %CHR_SPACE THEN DO;
     2166     3032                      /* Got "m" */
     2167     3033    3                 IF PARAM_LN (0) > %MXNB_NUM_LITERAL THEN
     2168     3034    3                    GOTO CTRLFN_NUM_PARAM_NOT_LEGAL;
     2169     3035    3                 DEC.LENGTH# = PARAM_LN (0);
     2170     3036    3                 DEC.BYTES = SUBSTR(TEXT, PARAM_INDEX (0), PARAM_LN (0));
     2171     3037    3                 CALL X$DEC_CONVERT (ADDR(DEC), ARG_VALUES (0))
     2172     3038    3                   ALTRET (DEC_CONVERT_FAILED);
     2173     3039    3                 IF NUM_PARAMS = 1
     2174     3040    4   /*N* AND FUNC_ID ~= %FNID_SET_OF_SEQUENCES *N*/ THEN DO;
     2175     3041                         /* Got "m" alone:  no comma, no "n" */
     2176     3042    4                    ARG_VALUES (1) = ARG_VALUES (0);
     2177     3043    4                    END;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:340  
     2178     3044    3                 END;
     2179     3045    2              IF NUM_PARAMS > 1
     2180     3046    2                AND PARAM_LN (1) > 0
     2181     3047    2                AND SUBSTR(TEXT, PARAM_INDEX (1), PARAM_LN (1)) ~=
     2182     3048    3                %CHR_SPACE THEN DO;
     2183     3049                      /* Got "n" */
     2184     3050    3                 DEC.LENGTH# = PARAM_LN (1);
     2185     3051    3                 DEC.BYTES = SUBSTR (TEXT, PARAM_INDEX (1), PARAM_LN (1));
     2186     3052    3                 CALL X$DEC_CONVERT (ADDR(DEC), ARG_VALUES (1))
     2187     3053    3                   ALTRET (DEC_CONVERT_FAILED);
     2188     3054    3                 END;
     2189     3055
     2190     3056    2              END;
     2191     3057
     2192     3058
     2193     3059                %BOX (TITLE="Execute the function");

              3071    2   /***************************************************************************
              3073    2    *                                                                         *
              3077    2            *                            Execute the function                         *
              3079    2            *                                                                         *
              3081    2           ***************************************************************************/

     2194     3085
     2195     3086    1           IF VD$CONTROL.BYTES = SUBSTR (TEXT, POST_INDEX-1, VD_$CONTROL.LENGTH#)
     2196     3087    2           THEN DO;
     2197     3088                   /*
     2198     3089                   *    $CONTROL-Literal function.
     2199     3090                   */
     2200     3091                   %INCREMENT (INDX=%STG_CTRL_LITERAL);
     2201     3094    2              CONTROL_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH#;
     2202     3095    2              POST_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH#;
     2203     3096    2              SUBSTR (TEXT, CONTROL_INDEX) = SUBSTR (TEXT, POST_INDEX);
     2204     3097    2              LN_TEXT = LN_TEXT + CONTROL_INDEX - POST_INDEX;
     2205     3098    2              RETURN;
     2206     3099    2              END;
     2207     3100    1           ELSE
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:341  
     2208     3101    1   FUNC_ID_CASES:
     2209     3102    2           DO SELECT ASCBIN(FUNC_ID);
     2210     3103    2              SELECT (%ASCBIN(FNID_VALUE));
     2211     3104                   %INCREMENT (INDX=%STG_CTRL_VALUE);
     2212     3107    2              IF NUM_PARAMS > 2 THEN
     2213     3108    2                 GOTO TOO_MANY_CTRLFN_VALUE_PARAMS;
     2214     3109    2              IF ARG_VALUES (0) < 0 OR ARG_VALUES (0) > %MX_BYTE_VALUE
     2215     3110    3                OR ARG_VALUES (1) < 0 OR ARG_VALUES (1) > %MX_BYTE_VALUE THEN DO;
     2216     3111    3                 ERR_MIN_VALUE = 0;
     2217     3112    3                 ERR_MAX_VALUE = %MX_BYTE_VALUE;
     2218     3113    3                 GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;
     2219     3114    3                 END;
     2220     3115    2              CALL INSERT (TEXT, CONTROL_INDEX, 1, BINASC(ARG_VALUES(0)));
     2221     3116    2              CONTROL_INDEX = CONTROL_INDEX + 1;
     2222     3117    2              SUBSTR (TEXT, CONTROL_INDEX) = SUBSTR (TEXT, POST_INDEX);
     2223     3118    2              LN_TEXT = LN_TEXT + CONTROL_INDEX - POST_INDEX;
     2224     3119    3              IF NUM_PARAMS > 1 THEN DO;
     2225     3120    3                 IF ADDR(CTRL_ARGS) = ADDR(NIL) THEN
     2226     3121    3                    GOTO TOO_MANY_CTRLFN_VALUE_PARAMS;
     2227     3122    3                 CTRL_ARGS = ARG_VALUES;
     2228     3123    3                 RET_CODE = FUNC_ID;
     2229     3124    3                 END;
     2230     3125    2              ELSE
     2231     3126    2                 RET_CODE = %CHR_SPACE;
     2232     3127
     2233     3128
     2234     3129    2              SELECT (%ASCBIN(FNID_RECORD));
     2235     3130                   %INCREMENT (INDX=%STG_CTRL_RECORD);
     2236     3133    2              CONTROL_INDEX = POST_INDEX;
     2237     3134    2              RET_CODE = FUNC_ID;
     2238     3135
     2239     3136
     2240     3137        /*N*
     2241     3138        *N*      SELECT (%ASCBIN(FNID_CURRENT));
     2242     3139        *N*        %INCREMENT (INDX=%STG_CTRL_CURRENT);
     2243     3140        *N*        CONTROL_INDEX = POST_INDEX;
     2244     3141        *N*        RET_CODE = FUNC_ID;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:342  
     2245     3142        *N*/
     2246     3143
     2247     3144
     2248     3145    2              SELECT (%ASCBIN(FNID_WILD_CHAR));
     2249     3146                   %INCREMENT (INDX=%STG_CTRL_WILD_CHAR);
     2250     3149    2              IF NUM_PARAMS > 2 THEN
     2251     3150    2                 GOTO TOO_MANY_CTRLFN_WILDC_PARAMS;
     2252     3151    2              IF ARG_VALUES (0) < 0
     2253     3152    3                OR ARG_VALUES (1) < 0 THEN DO;
     2254     3153    3                 ERR_MIN_VALUE = 0;
     2255     3154    3                 ERR_MAX_VALUE = %INFINITY;
     2256     3155    3                 GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;
     2257     3156    3                 END;
     2258     3157    2              CONTROL_INDEX = POST_INDEX;
     2259     3158    2              IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN
     2260     3159    2                 CTRL_ARGS = ARG_VALUES;
     2261     3160    2              RET_CODE = FUNC_ID;
     2262     3161
     2263     3162
     2264     3163    2              SELECT (%ASCBIN(FNID_WILD_STRING));
     2265     3164                   %INCREMENT (INDX=%STG_CTRL_WILD_STRING);
     2266     3167    2              CONTROL_INDEX = POST_INDEX;
     2267     3168    2              RET_CODE = FUNC_ID;
     2268     3169
     2269     3170
     2270     3171        /*N*
     2271     3172        *N*      SELECT (%ASCBIN(FNID_SET_OF_SEQUENCES));
     2272     3173        *N*        %INCREMENT (INDX=%STG_CTRL_SET_OF_SEQUENCES);
     2273     3174        *N*        IF NUM_PARAMS > 1 THEN
     2274     3175        *N*           GOTO TOO_MANY_CTRLFN_SETSQ_PARAMS;
     2275     3176        *N*        ERR_MIN_VALUE = 0;
     2276     3177        *N*        ERR_MAX_VALUE = LENGTHC(TEXT) - POST_INDEX -
     2277     3178        *N*          VD_$CONTROL.LENGTH# - %LENGTHC(FNID_SET_OF_SEQUENCES);
     2278     3179        *N*        IF ARG_VALUES (0) < ERR_MIN_VALUE
     2279     3180        *N*          OR ARG_VALUES (0) > ERR_MAX_VALUE THEN
     2280     3181        *N*           GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;
     2281     3182        *N*        CONTROL_INDEX = POST_INDEX;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:343  
     2282     3183        *N*        IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN
     2283     3184        *N*           CTRL_ARGS = ARG_VALUES;
     2284     3185        *N*        RET_CODE = FUNC_ID;
     2285     3186        *N*/
     2286     3187
     2287     3188
     2288     3189    2              SELECT (%ASCBIN(FNID_BO_MATCH));
     2289     3190                   %INCREMENT (INDX=%STG_CTRL_BO_MATCH);
     2290     3193    2              CONTROL_INDEX = POST_INDEX;
     2291     3194    2              RET_CODE = FUNC_ID;
     2292     3195
     2293     3196
     2294     3197    2              SELECT (%ASCBIN(FNID_EO_MATCH));
     2295     3198                   %INCREMENT (INDX=%STG_CTRL_EO_MATCH);
     2296     3201    2              CONTROL_INDEX = POST_INDEX;
     2297     3202    2              RET_CODE = FUNC_ID;
     2298     3203
     2299     3204
     2300     3205    2              SELECT (ELSE);
     2301     3206    2           GOTO CTRLFN_ID_NOT_LEGAL;
     2302     3207
     2303     3208    2              END FUNC_ID_CASES;
     2304     3209
     2305     3210    1           RETURN;
     2306     3211
     2307     3212
     2308     3213
     2309     3214                %BOX (TITLE="Error Handlers");

              3226    1   /***************************************************************************
              3228    1    *                                                                         *
              3232    1            *                               Error Handlers                            *
              3234    1            *                                                                         *
              3236    1           ***************************************************************************/

     2310     3240
     2311     3241    1   NO_CTRLFN_LEFT_PAREN:
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:344  
     2312     3242    1           ERR_CODE = %E$NO_CTRLFN_LEFT_PAREN;
     2313     3243    1           GOTO SERIOUS_ALTRETURN;
     2314     3244
     2315     3245    1   NO_CTRLFN_RIGHT_PAREN:
     2316     3246    1           ERR_CODE = %E$NO_CTRLFN_RIGHT_PAREN;
     2317     3247    1           GOTO SERIOUS_ALTRETURN;
     2318     3248
     2319     3249    1   CTRLFN_NUM_PARAM_NOT_LEGAL: ;
     2320     3250    1   DEC_CONVERT_FAILED: ;
     2321     3251    1           ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_LEGAL;
     2322     3252    1           GOTO SERIOUS_ALTRETURN;
     2323     3253
     2324     3254    1   CTRLFN_NUM_PARAM_NOT_INRANGE:
     2325     3255    1           ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_INRANGE;
     2326     3256    1           GOTO SERIOUS_ALTRETURN;
     2327     3257
     2328     3258    1   TOO_MANY_CTRLFN_VALUE_PARAMS:
     2329     3259    1           ERR_CODE = %E$TOO_MANY_CTRLFN_VALUE_PARAMS;
     2330     3260    1           GOTO SERIOUS_ALTRETURN;
     2331     3261
     2332     3262    1   TOO_MANY_CTRLFN_WILDC_PARAMS:
     2333     3263    1           ERR_CODE = %E$TOO_MANY_CTRLFN_WILDC_PARAMS;
     2334     3264    1           GOTO SERIOUS_ALTRETURN;
     2335     3265
     2336     3266    1   MOVE_TEXT_DOWN_FAILED: ;
     2337     3267    1   CTRLFN_ID_NOT_LEGAL:
     2338     3268    1           ERR_CODE = %E$CTRLFN_ID_NOT_LEGAL;
     2339     3269    1           GOTO SERIOUS_ALTRETURN;
     2340     3270
     2341     3271
     2342     3272    1   SERIOUS_ALTRETURN:
     2343     3273    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2344     3274    1             ALTRET (OALLOC_FAILED);
     2345     3275    1           VD$ERR.ERR.CODE# = ERR_CODE;
     2346     3276    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2347     3277    2           IF ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_INRANGE THEN DO;
     2348     3278    2              SUBST_FIELD$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:345  
     2349     3279    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;
     2350     3280    2              SUBST$NUMBER.V# (0) = ERR_MIN_VALUE;
     2351     3281    2              SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;
     2352     3282    2              SUBST$NUMBER.V# (1) = ERR_MAX_VALUE;
     2353     3283    2              END;
     2354     3284    1           ALTRETURN;
     2355     3285
     2356     3286
     2357     3287
     2358     3288    1   OALLOC_FAILED: ;
     2359     3289    1           ALTRETURN;
     2360     3290
     2361     3291    1   END VDG$EXEC_CONTROL;
     2362     3292        %EOD;

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:346  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$EXEC_CONTROL.

   Procedure VDG$EXEC_CONTROL requires 448 words for executable code.
   Procedure VDG$EXEC_CONTROL requires 46 words of local(AUTO) storage.

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:347  

 Object Unit name= VDG$EXEC_CONTROL                           File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:24:57.08 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  VDG$EXEC_CONTROL
    1   Proc  even  none   448    700  VDG$EXEC_CONTROL
    2  RoData even  none     5      5  VDG$EXEC_CONTROL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  VDG$EXEC_CONTROL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       2 X$DEC_CONVERT
 yes     yes           Std       3 VDG$OALLOC
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:348  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                            r    B$XL_UPPER$                           VD_$CONTROL
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:349  


     1993        1        /*T***********************************************************/
     1994        2        /*T*                                                         */
     1995        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1996        4        /*T*                                                         */
     1997        5        /*T***********************************************************/
     1998        6
     1999        7        /*D* NAME:  VDG$EXEC_CONTROL
     2000        8            PARAMETERS:
     2001        9                LN_TEXT:  # bytes in text string.
     2002       10                TEXT:  Text string.
     2003       11                CONTROL_INDEX:  Index into TEXT of the $CONTROL character.
     2004       12                RET_CODE:  An uninitialized CHAR(1) CALIGNED.
     2005       13                CTRL_ARGS:  An optional, uninitialized array of SBIN words.
     2006       14                    If given, there must be %MX_CTRL_FN_ARGS entries in the array.
     2007       15            INPUT:
     2008       16                VD_$CONTROL:  VD_BUFFER for the predefined name $CONTROL.
     2009       17                    Value's length must not be 0.
     2010       18            SCRATCH:
     2011       19                VD_STATIC_TEMP
     2012       20            OUTPUT:
     2013       21                LN_TEXT may be decreased if the $CONTROL function causes
     2014       22                    removal of text from TEXT.
     2015       23                TEXT will be modified, based on the $CONTROL function
     2016       24                    executed.
     2017       25                CONTROL_INDEX will contain the index into TEXT of the next
     2018       26                    char to scan for $CONTROL functions.
     2019       27                RET_CODE will contain either:
     2020       28                    o a space character, indicating that all processing was
     2021       29                        performed; or
     2022       30                    o a $CONTROL-function id character (%FNID_xxx),
     2023       31                        indicating some additional processing is necessary,
     2024       32                        and specifying which function was found.
     2025       33                CTRL_ARGS (if supplied) will be cleared.
     2026       34                        For the following $CONTROL-Functions, CTRL_ARGS will
     2027       35                        contain the specified or default values for arguments
     2028       36                        of the function:
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:350  
     2029       37                    %FNID_WILD_CHAR:  CTRL_ARGS (0) = minimum # chars to match,
     2030       38                        CTRL_ARGS (1) = maximum # chars to match.
     2031       39        *N*         %FNID_SET_OF_SEQUENCES:  CTRL_ARGS(0) = length of sequence
     2032       40        *N*             to match.
     2033       41            DESCRIPTION:
     2034       42                Delimit the entire $CONTROL-function.  This will be in one
     2035       43                of two forms:
     2036       44                For Literal, %FNID_RECORD, _CURRENT, _WILD_STRING,
     2037       45                    _BO_MATCH, and _EO_MATCH:
     2038       46                                %f
     2039       47                For %FNID_VALUE, _WILD_CHAR, and _SET_OF_SEQUENCES:
     2040       48                                %f(ppp...)
     2041       49                where:
     2042       50                    "%" represents the current value of $CONTROL name.
     2043       51                    "f" is the function identifier.
     2044       52                    "ppp..." is a mandatory list of numeric parameters,
     2045       53                            separated by commas.
     2046       54
     2047       55                Execute the function.  All function executions involve at
     2048       56                least removing the function invokation from the text string.
     2049       57                Some function executions are partial; return the appropriate
     2050       58                return code and optional arguments.
     2051       59        */
     2052       60
     2053       61        VDG$EXEC_CONTROL: PROC (LN_TEXT, TEXT, CONTROL_INDEX, RET_CODE, CTRL_ARGS)

     61  1 000000   000000 700200 xent  VDG$EXEC_CO* TSX0  ! X66_AUTO_5
         1 000001   000056 000005                    ZERO    46,5

     2054       62                  ALTRET;
     2055       63
     2056       64
     2057       65        %INCLUDE VD_MACROS_M;
     2058     2280        %INCLUDE VD_PERR_C;
     2059     2428        %INCLUDE B$TABLES_C;
     2060     2536
     2061     2537
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:351  
     2062     2538    1   DCL LN_TEXT UBIN;
     2063     2539    1   DCL TEXT CHAR(LN_TEXT) CALIGNED;
     2064     2540    1   DCL CONTROL_INDEX UBIN;
     2065     2541    1   DCL RET_CODE CHAR(1) CALIGNED;
     2066     2542    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2067     2543
     2068     2544
     2069     2545    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     2070     2546    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2071     2547    1   DCL VDG$ESCREECH        ENTRY (3);
     2072     2548
     2073     2549
     2074     2550        %VD_6E (STCLASS=SYMREF);
     2075     2586        %B$XL_UPPER;
     2076     2590        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2077     2650
     2078     2651
     2079     2652    1   DCL PTR_$CONTROL$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2080     2653
     2081     2654
     2082     2655
     2083     2656    1   DCL FUNC_ID CHAR(1) ALIGNED;
     2084     2657    1   DCL POST_INDEX SBIN;
     2085     2658    1   DCL PARAM_INDEX (0:%MX_CTRL_FN_ARGS) SBIN;
     2086     2659    1   DCL PARAM_LN (0:%MX_CTRL_FN_ARGS) SBIN;
     2087     2660    1   DCL NUM_PARAMS SBIN;
     2088     2661    1   DCL I SBIN;
     2089     2662        %VD_TEXTC (NAME=DEC, STCLASS="", MXNB=%MXNB_NUM_LITERAL);
     2090     2803    1   DCL ARG_VALUES (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2091     2804    1   DCL ERR_CODE SBIN;
     2092     2805    1   DCL VD_ERR$ PTR;
     2093     2806    1   DCL SUBST_FIELD$ PTR;
     2094     2807    1   DCL ERR_MIN_VALUE SBIN;
     2095     2808    1   DCL ERR_MAX_VALUE SBIN;
     2096     2809
     2097     2810
     2098     2811        %VD$BUFFER (NAME=VD$CONTROL, STCLASS="BASED(PTR_$CONTROL$)");
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:352  
     2099     2869        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2100     2922        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2101     2967
     2102     2968
     2103     2969    1           RET_CODE = %CHR_SPACE;

   2969  1 000002   200006 470500                    LDP0    @RET_CODE,,AUTO
         1 000003   040100 100400                    MLR     fill='040'O
         1 000004   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000005   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     2104     2970    1           IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN

   2970  1 000006   200007 236100                    LDQ     @CTRL_ARGS,,AUTO
         1 000007   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000010   000014 600000 1                  TZE     s:2972

     2105     2971    1              CTRL_ARGS = %CLEAR;

   2971  1 000011   200007 471500                    LDP1    @CTRL_ARGS,,AUTO
         1 000012   100000 450100                    STZ     0,,PR1
         1 000013   100001 450100                    STZ     1,,PR1

     2106     2972    1           PARAM_INDEX = %CLEAR;

   2972  1 000014   000100 100400                    MLR     fill='000'O
         1 000015   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000016   200012 000014                    ADSC9   PARAM_INDEX,,AUTO        cn=0,n=12

     2107     2973    1           PARAM_LN = %CLEAR;

   2973  1 000017   000100 100400                    MLR     fill='000'O
         1 000020   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000021   200015 000014                    ADSC9   PARAM_LN,,AUTO           cn=0,n=12

     2108     2974    1           NUM_PARAMS = 0;

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:353  
   2974  1 000022   200020 450100                    STZ     NUM_PARAMS,,AUTO

     2109     2975    1           ARG_VALUES = %CLEAR;

   2975  1 000023   000000 235003                    LDA     0,DU
         1 000024   000000 236003                    LDQ     0,DU
         1 000025   200042 757100                    STAQ    ARG_VALUES,,AUTO

     2110     2976
     2111     2977                /* Delimit the function invokation */
     2112     2978
     2113     2979    1           FUNC_ID =

   2979  1 000026   200003 471500                    LDP1    @LN_TEXT,,AUTO
         1 000027   100000 720100                    LXL0    0,,PR1
         1 000030   200005 473500                    LDP3    @CONTROL_INDEX,,AUTO
         1 000031   000002 236000 xsym               LDQ     VD_$CONTROL+2
         1 000032   000022 732000                    QRS     18
         1 000033   300000 036100                    ADLQ    0,,PR3
         1 000034   200004 474500                    LDP4    @TEXT,,AUTO
         1 000035   040100 100506                    MLR     fill='040'O
         1 000036   400000 000001                    ADSC9   0,Q,PR4                  cn=0,n=1
         1 000037   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1

     2114     2980    1             SUBSTR(TEXT, CONTROL_INDEX + VD_$CONTROL.LENGTH#, 1);
     2115     2981    1           CALL XLATE (FUNC_ID, B$XL_UPPER, FUNC_ID);

   2981  1 000040   000000 475400 xsym               LDP5    B$XL_UPPER$
         1 000041   040100 160500                    MVT     fill='040'O
         1 000042   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000043   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000044   500000 000100                    ARG     0,,PR5

     2116     2982    1           POST_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH# + 1;

   2982  1 000045   000002 236000 xsym               LDQ     VD_$CONTROL+2
         1 000046   000022 732000                    QRS     18
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:354  
         1 000047   300000 036100                    ADLQ    0,,PR3
         1 000050   000001 036007                    ADLQ    1,DL
         1 000051   200011 756100                    STQ     POST_INDEX,,AUTO

     2117     2983
     2118     2984    2           DO SELECT (FUNC_ID);

   2984  1 000052   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000053   777000 376003                    ANQ     -512,DU
         1 000054   126000 116003                    CMPQ    44032,DU
         1 000055   000315 602000 1                  TNC     s:3086
         1 000056   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000057   777000 376003                    ANQ     -512,DU
         1 000060   126000 116003                    CMPQ    44032,DU
         1 000061   000067 600000 1                  TZE     s:2990
         1 000062   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000063   777000 376003                    ANQ     -512,DU
         1 000064   127000 116003                    CMPQ    44544,DU
         1 000065   000315 601000 1                  TNZ     s:3086
         1 000066   000067 710000 1                  TRA     s:2990

     2119     2985    2              SELECT (%FNID_VALUE, %FNID_WILD_CHAR

     2120     2986    2             /*N* , %FNID_SET_OF_SEQUENCES *N*/ );
     2121     2987                   /*
     2122     2988                   *    These $CONTROL-Functions require numeric parameters.
     2123     2989                   */
     2124     2990    2              IF SUBSTR(TEXT, POST_INDEX, 1) ~= %CHR_LPAREN THEN

   2990  1 000067   200011 236100                    LDQ     POST_INDEX,,AUTO
         1 000070   040000 106506                    CMPC    fill='040'O
         1 000071   400000 000001                    ADSC9   0,Q,PR4                  cn=0,n=1
         1 000072   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000073   000612 601000 1                  TNZ     NO_CTRLFN_LEFT_PAREN

     2125     2991    2                 GOTO NO_CTRLFN_LEFT_PAREN;
     2126     2992    2              PARAM_INDEX (0) = POST_INDEX + 1;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:355  

   2992  1 000074   000001 036007                    ADLQ    1,DL
         1 000075   200012 756100                    STQ     PARAM_INDEX,,AUTO

     2127     2993    2              CALL INDEX (POST_INDEX, %CHR_RPAREN, TEXT, PARAM_INDEX (0))

   2993  1 000076   000000 636010                    EAQ     0,X0
         1 000077   000022 772000                    QRL     18
         1 000100   200012 136100                    SBLQ    PARAM_INDEX,,AUTO
         1 000101   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000102   200012 236100                    LDQ     PARAM_INDEX,,AUTO
         1 000103   200052 720100                    LXL0    ERR_MAX_VALUE+2,,AUTO
         1 000104   200012 235100                    LDA     PARAM_INDEX,,AUTO
         1 000105   000000 124545                    SCM     mask='000'O
         1 000106   400000 000010                    ADSC9   0,A,PR4                  cn=0,n=*X0
         1 000107   000001 000001 2                  ADSC9   1                        cn=0,n=1
         1 000110   200011 000100                    ARG     POST_INDEX,,AUTO
         1 000111   200011 056100                    ASQ     POST_INDEX,,AUTO
         1 000112   000615 606400 1                  TTN     NO_CTRLFN_RIGHT_PAREN

     2128     2994    2                ALTRET (NO_CTRLFN_RIGHT_PAREN);
     2129     2995    2              POST_INDEX = POST_INDEX + 1;

   2995  1 000113   200011 054100                    AOS     POST_INDEX,,AUTO

     2130     2996
     2131     2997    3              DO WHILE PARAM_INDEX (NUM_PARAMS) < POST_INDEX;

   2997  1 000114   200020 720100                    LXL0    NUM_PARAMS,,AUTO
         1 000115   200012 236110                    LDQ     PARAM_INDEX,X0,AUTO
         1 000116   200011 116100                    CMPQ    POST_INDEX,,AUTO
         1 000117   000151 605000 1                  TPL     s:3004

     2132     2998    3                 NUM_PARAMS = NUM_PARAMS + 1;

   2998  1 000120   200020 054100                    AOS     NUM_PARAMS,,AUTO

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:356  
     2133     2999    3                 CALL INDEX (PARAM_INDEX (NUM_PARAMS), %CHR_COMMA, TEXT,

   2999  1 000121   200003 470500                    LDP0    @LN_TEXT,,AUTO
         1 000122   000000 720100                    LXL0    0,,PR0
         1 000123   200020 721100                    LXL1    NUM_PARAMS,,AUTO
         1 000124   000000 636010                    EAQ     0,X0
         1 000125   000022 772000                    QRL     18
         1 000126   200011 136111                    SBLQ    POST_INDEX,X1,AUTO
         1 000127   200011 235111                    LDA     POST_INDEX,X1,AUTO
         1 000130   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000131   200011 236111                    LDQ     POST_INDEX,X1,AUTO
         1 000132   200004 471500                    LDP1    @TEXT,,AUTO
         1 000133   200052 720100                    LXL0    ERR_MAX_VALUE+2,,AUTO
         1 000134   000000 124545                    SCM     mask='000'O
         1 000135   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         1 000136   000002 000001 2                  ADSC9   2                        cn=0,n=1
         1 000137   200012 000111                    ARG     PARAM_INDEX,X1,AUTO
         1 000140   200012 056111                    ASQ     PARAM_INDEX,X1,AUTO

     2134     3000    3                   PARAM_INDEX (NUM_PARAMS - 1));
     2135     3001    3                 PARAM_INDEX (NUM_PARAMS) = MINIMUM (POST_INDEX,

   3001  1 000141   200012 236111                    LDQ     PARAM_INDEX,X1,AUTO
         1 000142   000001 036007                    ADLQ    1,DL
         1 000143   200011 116100                    CMPQ    POST_INDEX,,AUTO
         1 000144   000146 604400 1                  TMOZ    s:3001+5
         1 000145   200011 236100                    LDQ     POST_INDEX,,AUTO
         1 000146   200012 756111                    STQ     PARAM_INDEX,X1,AUTO

     2136     3002    3                   PARAM_INDEX (NUM_PARAMS) + %LENGTHC(CHR_COMMA));
     2137     3003    3                 END;

   3003  1 000147   200011 116100                    CMPQ    POST_INDEX,,AUTO
         1 000150   000120 604000 1                  TMI     s:2998

     2138     3004    3              DO I = 0 TO (NUM_PARAMS - 1);

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:357  
   3004  1 000151   200021 450100                    STZ     I,,AUTO
         1 000152   000161 710000 1                  TRA     s:3007+1

     2139     3005    3                 PARAM_LN (I) = PARAM_INDEX (I+1) - PARAM_INDEX (I) -

   3005  1 000153   200021 720100                    LXL0    I,,AUTO
         1 000154   200013 236110                    LDQ     PARAM_INDEX+1,X0,AUTO
         1 000155   200012 136110                    SBLQ    PARAM_INDEX,X0,AUTO
         1 000156   000001 136007                    SBLQ    1,DL
         1 000157   200015 756110                    STQ     PARAM_LN,X0,AUTO

     2140     3006    3                   %LENGTHC(CHR_COMMA);
     2141     3007    3                 END;

   3007  1 000160   200021 054100                    AOS     I,,AUTO
         1 000161   200021 236100                    LDQ     I,,AUTO
         1 000162   200020 116100                    CMPQ    NUM_PARAMS,,AUTO
         1 000163   000153 604000 1                  TMI     s:3005

     2142     3008
     2143     3009    3              DO SELECT (FUNC_ID); /* Initialize default values */

   3009  1 000164   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000165   777000 376003                    ANQ     -512,DU
         1 000166   126000 116003                    CMPQ    44032,DU
         1 000167   000210 602000 1                  TNC     s:3029
         1 000170   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000171   777000 376003                    ANQ     -512,DU
         1 000172   126000 116003                    CMPQ    44032,DU
         1 000173   000201 600000 1                  TZE     s:3011
         1 000174   200010 236100                    LDQ     FUNC_ID,,AUTO
         1 000175   777000 376003                    ANQ     -512,DU
         1 000176   127000 116003                    CMPQ    44544,DU
         1 000177   000210 601000 1                  TNZ     s:3029
         1 000200   000205 710000 1                  TRA     s:3014

     2144     3010    3                 SELECT (%FNID_VALUE);
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:358  

     2145     3011    3                 ARG_VALUES (0) = 0;

   3011  1 000201   200042 450100                    STZ     ARG_VALUES,,AUTO

     2146     3012    3                 ARG_VALUES (1) = %MX_BYTE_VALUE;

   3012  1 000202   000777 235007                    LDA     511,DL
         1 000203   200043 755100                    STA     ARG_VALUES+1,,AUTO
         1 000204   000210 710000 1                  TRA     s:3029

     2147     3013    3                 SELECT (%FNID_WILD_CHAR);

     2148     3014    3                 ARG_VALUES (0) = 0;

   3014  1 000205   200042 450100                    STZ     ARG_VALUES,,AUTO

     2149     3015    3                 ARG_VALUES (1) = %INFINITY;

   3015  1 000206   000031 235000 xsym               LDA     B_VECTNIL+25
         1 000207   200043 755100                    STA     ARG_VALUES+1,,AUTO

     2150     3016                    /*N* SELECT (%FNID_SET_OF_SEQUENCES);   *N*/
     2151     3017                    /*N*   ARG_VALUES (0) = 1;              *N*/
     2152     3018                    /*N*   ARG_VALUES (1) = 0;              *N*/
     2153     3019    3                 END;

     2154     3020                   /*
     2155     3021                   *  If we have:            ARG_VALUES should get:
     2156     3022                   *     ()                      dflt, dflt
     2157     3023                   *     (,)                     dflt, dflt
     2158     3024                   *     (m)                     m, m
     2159     3025                   *     (m,)                    m, dflt
     2160     3026                   *     (,n)                    dflt, n
     2161     3027                   *     (m,n)                   m, n
     2162     3028                   */
     2163     3029    2              IF PARAM_LN (0) > 0
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:359  

   3029  1 000210   200015 235100                    LDA     PARAM_LN,,AUTO
         1 000211   000254 604400 1                  TMOZ    s:3045
         1 000212   200003 470500                    LDP0    @LN_TEXT,,AUTO
         1 000213   000000 720100                    LXL0    0,,PR0
         1 000214   200004 471500                    LDP1    @TEXT,,AUTO
         1 000215   000000 621005                    EAX1    0,AL
         1 000216   200012 235100                    LDA     PARAM_INDEX,,AUTO
         1 000217   040000 106545                    CMPC    fill='040'O
         1 000220   100000 000011                    ADSC9   0,A,PR1                  cn=0,n=*X1
         1 000221   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000222   000254 600000 1                  TZE     s:3045

     2164     3030    2                AND SUBSTR(TEXT, PARAM_INDEX (0), PARAM_LN (0)) ~=
     2165     3031    3                %CHR_SPACE THEN DO;

     2166     3032                      /* Got "m" */
     2167     3033    3                 IF PARAM_LN (0) > %MXNB_NUM_LITERAL THEN

   3033  1 000223   200015 236100                    LDQ     PARAM_LN,,AUTO
         1 000224   000077 116007                    CMPQ    63,DL
         1 000225   000620 605400 1                  TPNZ    CTRLFN_NUM_PARAM_NOT_LEGAL

     2168     3034    3                    GOTO CTRLFN_NUM_PARAM_NOT_LEGAL;
     2169     3035    3                 DEC.LENGTH# = PARAM_LN (0);

   3035  1 000226   000033 736000                    QLS     27
         1 000227   200022 552140                    STBQ    DEC,'40'O,AUTO

     2170     3036    3                 DEC.BYTES = SUBSTR(TEXT, PARAM_INDEX (0), PARAM_LN (0));

   3036  1 000230   000000 720100                    LXL0    0,,PR0
         1 000231   200015 721100                    LXL1    PARAM_LN,,AUTO
         1 000232   040100 100545                    MLR     fill='040'O
         1 000233   100000 000011                    ADSC9   0,A,PR1                  cn=0,n=*X1
         1 000234   200022 200077                    ADSC9   DEC,,AUTO                cn=1,n=63

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:360  
     2171     3037    3                 CALL X$DEC_CONVERT (ADDR(DEC), ARG_VALUES (0))

   3037  1 000235   200022 633500                    EPPR3   DEC,,AUTO
         1 000236   200052 453500                    STP3    ERR_MAX_VALUE+2,,AUTO
         1 000237   200042 634500                    EPPR4   ARG_VALUES,,AUTO
         1 000240   200055 454500                    STP4    ERR_MAX_VALUE+5,,AUTO
         1 000241   200052 635500                    EPPR5   ERR_MAX_VALUE+2,,AUTO
         1 000242   200054 455500                    STP5    ERR_MAX_VALUE+4,,AUTO
         1 000243   200054 630500                    EPPR0   ERR_MAX_VALUE+4,,AUTO
         1 000244   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000245   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 000246   000620 702000 1                  TSX2    CTRLFN_NUM_PARAM_NOT_LEGAL

     2172     3038    3                   ALTRET (DEC_CONVERT_FAILED);
     2173     3039    3                 IF NUM_PARAMS = 1

   3039  1 000247   200020 235100                    LDA     NUM_PARAMS,,AUTO
         1 000250   000001 115007                    CMPA    1,DL
         1 000251   000254 601000 1                  TNZ     s:3045

     2174     3040    4   /*N* AND FUNC_ID ~= %FNID_SET_OF_SEQUENCES *N*/ THEN DO;

     2175     3041                         /* Got "m" alone:  no comma, no "n" */
     2176     3042    4                    ARG_VALUES (1) = ARG_VALUES (0);

   3042  1 000252   200042 236100                    LDQ     ARG_VALUES,,AUTO
         1 000253   200043 756100                    STQ     ARG_VALUES+1,,AUTO

     2177     3043    4                    END;

     2178     3044    3                 END;

     2179     3045    2              IF NUM_PARAMS > 1

   3045  1 000254   200020 235100                    LDA     NUM_PARAMS,,AUTO
         1 000255   000001 115007                    CMPA    1,DL
         1 000256   000315 604400 1                  TMOZ    s:3086
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:361  
         1 000257   200016 236100                    LDQ     PARAM_LN+1,,AUTO
         1 000260   000315 604400 1                  TMOZ    s:3086
         1 000261   200003 470500                    LDP0    @LN_TEXT,,AUTO
         1 000262   000000 720100                    LXL0    0,,PR0
         1 000263   200004 471500                    LDP1    @TEXT,,AUTO
         1 000264   000000 621006                    EAX1    0,QL
         1 000265   200013 236100                    LDQ     PARAM_INDEX+1,,AUTO
         1 000266   040000 106546                    CMPC    fill='040'O
         1 000267   100000 000011                    ADSC9   0,Q,PR1                  cn=0,n=*X1
         1 000270   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000271   000315 600000 1                  TZE     s:3086

     2180     3046    2                AND PARAM_LN (1) > 0
     2181     3047    2                AND SUBSTR(TEXT, PARAM_INDEX (1), PARAM_LN (1)) ~=
     2182     3048    3                %CHR_SPACE THEN DO;

     2183     3049                      /* Got "n" */
     2184     3050    3                 DEC.LENGTH# = PARAM_LN (1);

   3050  1 000272   200016 236100                    LDQ     PARAM_LN+1,,AUTO
         1 000273   000033 736000                    QLS     27
         1 000274   200022 552140                    STBQ    DEC,'40'O,AUTO

     2185     3051    3                 DEC.BYTES = SUBSTR (TEXT, PARAM_INDEX (1), PARAM_LN (1));

   3051  1 000275   000000 720100                    LXL0    0,,PR0
         1 000276   200016 721100                    LXL1    PARAM_LN+1,,AUTO
         1 000277   200013 236100                    LDQ     PARAM_INDEX+1,,AUTO
         1 000300   040100 100546                    MLR     fill='040'O
         1 000301   100000 000011                    ADSC9   0,Q,PR1                  cn=0,n=*X1
         1 000302   200022 200077                    ADSC9   DEC,,AUTO                cn=1,n=63

     2186     3052    3                 CALL X$DEC_CONVERT (ADDR(DEC), ARG_VALUES (1))

   3052  1 000303   200022 633500                    EPPR3   DEC,,AUTO
         1 000304   200052 453500                    STP3    ERR_MAX_VALUE+2,,AUTO
         1 000305   200043 634500                    EPPR4   ARG_VALUES+1,,AUTO
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:362  
         1 000306   200055 454500                    STP4    ERR_MAX_VALUE+5,,AUTO
         1 000307   200052 635500                    EPPR5   ERR_MAX_VALUE+2,,AUTO
         1 000310   200054 455500                    STP5    ERR_MAX_VALUE+4,,AUTO
         1 000311   200054 630500                    EPPR0   ERR_MAX_VALUE+4,,AUTO
         1 000312   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000313   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 000314   000620 702000 1                  TSX2    CTRLFN_NUM_PARAM_NOT_LEGAL

     2187     3053    3                   ALTRET (DEC_CONVERT_FAILED);
     2188     3054    3                 END;

     2189     3055
     2190     3056    2              END;

     2191     3057
     2192     3058
     2193     3059                %BOX (TITLE="Execute the function");

              3071    2   /***************************************************************************
              3073    2    *                                                                         *
              3077    2            *                            Execute the function                        *
              3079    2            *                                                                        *
              3081    2          ***************************************************************************/

     2194     3085
     2195     3086    1           IF VD$CONTROL.BYTES = SUBSTR (TEXT, POST_INDEX-1, VD_$CONTROL.LENGTH#)

   3086  1 000315   000000 470400 0                  LDP0    PTR_$CONTROL$
         1 000316   000002 220100                    LDX0    2,,PR0
         1 000317   200003 471500                    LDP1    @LN_TEXT,,AUTO
         1 000320   100000 721100                    LXL1    0,,PR1
         1 000321   200004 473500                    LDP3    @TEXT,,AUTO
         1 000322   000002 222000 xsym               LDX2    VD_$CONTROL+2
         1 000323   200011 235100                    LDA     POST_INDEX,,AUTO
         1 000324   040145 106540                    CMPC    fill='040'O
         1 000325   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         1 000326   377777 600012                    ADSC9   -1,A,PR3                 cn=3,n=*X2
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:363  
         1 000327   000366 601000 1                  TNZ     FUNC_ID_CASES

     2196     3087    2           THEN DO;

     2197     3088                   /*
     2198     3089                   *    $CONTROL-Literal function.
     2199     3090                   */
     2200     3091                   %INCREMENT (INDX=%STG_CTRL_LITERAL);

   3092  1 000330   000054 054000 xsym               AOS     VD_6E+44

     2201     3094    2              CONTROL_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH#;

   3094  1 000331   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000332   000002 236000 xsym               LDQ     VD_$CONTROL+2
         1 000333   000022 732000                    QRS     18
         1 000334   400000 036100                    ADLQ    0,,PR4
         1 000335   400000 756100                    STQ     0,,PR4

     2202     3095    2              POST_INDEX = CONTROL_INDEX + VD_$CONTROL.LENGTH#;

   3095  1 000336   000002 236000 xsym               LDQ     VD_$CONTROL+2
         1 000337   000022 732000                    QRS     18
         1 000340   400000 036100                    ADLQ    0,,PR4
         1 000341   200011 756100                    STQ     POST_INDEX,,AUTO

     2203     3096    2              SUBSTR (TEXT, CONTROL_INDEX) = SUBSTR (TEXT, POST_INDEX);

   3096  1 000342   100000 720100                    LXL0    0,,PR1
         1 000343   000000 636010                    EAQ     0,X0
         1 000344   000022 772000                    QRL     18
         1 000345   400000 136100                    SBLQ    0,,PR4
         1 000346   400000 235100                    LDA     0,,PR4
         1 000347   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000350   000000 636010                    EAQ     0,X0
         1 000351   000022 772000                    QRL     18
         1 000352   200011 136100                    SBLQ    POST_INDEX,,AUTO
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:364  
         1 000353   000000 620006                    EAX0    0,QL
         1 000354   200011 236100                    LDQ     POST_INDEX,,AUTO
         1 000355   200052 721100                    LXL1    ERR_MAX_VALUE+2,,AUTO
         1 000356   040145 100546                    MLR     fill='040'O
         1 000357   300000 000010                    ADSC9   0,Q,PR3                  cn=0,n=*X0
         1 000360   300000 000011                    ADSC9   0,A,PR3                  cn=0,n=*X1

     2204     3097    2              LN_TEXT = LN_TEXT + CONTROL_INDEX - POST_INDEX;

   3097  1 000361   100000 236100                    LDQ     0,,PR1
         1 000362   400000 036100                    ADLQ    0,,PR4
         1 000363   200011 136100                    SBLQ    POST_INDEX,,AUTO
         1 000364   100000 756100                    STQ     0,,PR1

     2205     3098    2              RETURN;

   3098  1 000365   000000 702200 xent               TSX2  ! X66_ARET

     2206     3099    2              END;
     2207     3100    1           ELSE
     2208     3101    1   FUNC_ID_CASES:
     2209     3102    2           DO SELECT ASCBIN(FUNC_ID);

   3102  1 000366   200010 236100       FUNC_ID_CAS* LDQ     FUNC_ID,,AUTO
         1 000367   000033 772000                    QRL     27
         1 000370   000122 116007                    CMPQ    82,DL
         1 000371   000401 602000 1                  TNC     FUNC_ID_CASES+11
         1 000372   000515 600000 1                  TZE     s:3131
         1 000373   000126 116007                    CMPQ    86,DL
         1 000374   000610 602000 1                  TNC     s:3206
         1 000375   000412 600000 1                  TZE     s:3105
         1 000376   000127 116007                    CMPQ    87,DL
         1 000377   000610 601000 1                  TNZ     s:3206
         1 000400   000525 710000 1                  TRA     s:3147
         1 000401   000102 116007                    CMPQ    66,DL
         1 000402   000407 602000 1                  TNC     FUNC_ID_CASES+17
         1 000403   000570 600000 1                  TZE     s:3191
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:365  
         1 000404   000105 116007                    CMPQ    69,DL
         1 000405   000610 601000 1                  TNZ     s:3206
         1 000406   000600 710000 1                  TRA     s:3199
         1 000407   000077 116007                    CMPQ    63,DL
         1 000410   000610 601000 1                  TNZ     s:3206
         1 000411   000560 710000 1                  TRA     s:3165

     2210     3103    2              SELECT (%ASCBIN(FNID_VALUE));

     2211     3104                   %INCREMENT (INDX=%STG_CTRL_VALUE);

   3105  1 000412   000055 054000 xsym               AOS     VD_6E+45

     2212     3107    2              IF NUM_PARAMS > 2 THEN

   3107  1 000413   200020 235100                    LDA     NUM_PARAMS,,AUTO
         1 000414   000002 115007                    CMPA    2,DL
         1 000415   000626 605400 1                  TPNZ    TOO_MANY_CTRLFN_VALUE_PARAMS

     2213     3108    2                 GOTO TOO_MANY_CTRLFN_VALUE_PARAMS;
     2214     3109    2              IF ARG_VALUES (0) < 0 OR ARG_VALUES (0) > %MX_BYTE_VALUE

   3109  1 000416   200042 235100                    LDA     ARG_VALUES,,AUTO
         1 000417   000426 604000 1                  TMI     s:3111
         1 000420   000777 115007                    CMPA    511,DL
         1 000421   000426 605400 1                  TPNZ    s:3111
         1 000422   200043 235100                    LDA     ARG_VALUES+1,,AUTO
         1 000423   000426 604000 1                  TMI     s:3111
         1 000424   000777 115007                    CMPA    511,DL
         1 000425   000432 604400 1                  TMOZ    s:3115

     2215     3110    3                OR ARG_VALUES (1) < 0 OR ARG_VALUES (1) > %MX_BYTE_VALUE THEN DO;

     2216     3111    3                 ERR_MIN_VALUE = 0;

   3111  1 000426   200047 450100                    STZ     ERR_MIN_VALUE,,AUTO

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:366  
     2217     3112    3                 ERR_MAX_VALUE = %MX_BYTE_VALUE;

   3112  1 000427   000777 235007                    LDA     511,DL
         1 000430   200050 755100                    STA     ERR_MAX_VALUE,,AUTO

     2218     3113    3                 GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;

   3113  1 000431   000623 710000 1                  TRA     CTRLFN_NUM_PARAM_NOT_INRANGE

     2219     3114    3                 END;
     2220     3115    2              CALL INSERT (TEXT, CONTROL_INDEX, 1, BINASC(ARG_VALUES(0)));

   3115  1 000432   100000 720100                    LXL0    0,,PR1
         1 000433   200042 236100                    LDQ     ARG_VALUES,,AUTO
         1 000434   000033 736000                    QLS     27
         1 000435   000003 276000 2                  ORQ     3
         1 000436   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000437   400000 235100                    LDA     0,,PR4
         1 000440   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000441   040105 100500                    MLR     fill='040'O
         1 000442   200052 000004                    ADSC9   ERR_MAX_VALUE+2,,AUTO    cn=0,n=4
         1 000443   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1

     2221     3116    2              CONTROL_INDEX = CONTROL_INDEX + 1;

   3116  1 000444   400000 235100                    LDA     0,,PR4
         1 000445   000001 035007                    ADLA    1,DL
         1 000446   400000 755100                    STA     0,,PR4

     2222     3117    2              SUBSTR (TEXT, CONTROL_INDEX) = SUBSTR (TEXT, POST_INDEX);

   3117  1 000447   100000 720100                    LXL0    0,,PR1
         1 000450   000000 636010                    EAQ     0,X0
         1 000451   000022 772000                    QRL     18
         1 000452   400000 136100                    SBLQ    0,,PR4
         1 000453   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000454   000000 636010                    EAQ     0,X0
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:367  
         1 000455   000022 772000                    QRL     18
         1 000456   200011 136100                    SBLQ    POST_INDEX,,AUTO
         1 000457   000000 620006                    EAX0    0,QL
         1 000460   200011 236100                    LDQ     POST_INDEX,,AUTO
         1 000461   200052 721100                    LXL1    ERR_MAX_VALUE+2,,AUTO
         1 000462   040145 100546                    MLR     fill='040'O
         1 000463   300000 000010                    ADSC9   0,Q,PR3                  cn=0,n=*X0
         1 000464   300000 000011                    ADSC9   0,A,PR3                  cn=0,n=*X1

     2223     3118    2              LN_TEXT = LN_TEXT + CONTROL_INDEX - POST_INDEX;

   3118  1 000465   100000 236100                    LDQ     0,,PR1
         1 000466   400000 036100                    ADLQ    0,,PR4
         1 000467   200011 136100                    SBLQ    POST_INDEX,,AUTO
         1 000470   100000 756100                    STQ     0,,PR1

     2224     3119    3              IF NUM_PARAMS > 1 THEN DO;

   3119  1 000471   200020 235100                    LDA     NUM_PARAMS,,AUTO
         1 000472   000001 115007                    CMPA    1,DL
         1 000473   000510 604400 1                  TMOZ    s:3126

     2225     3120    3                 IF ADDR(CTRL_ARGS) = ADDR(NIL) THEN

   3120  1 000474   200007 236100                    LDQ     @CTRL_ARGS,,AUTO
         1 000475   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000476   000626 600000 1                  TZE     TOO_MANY_CTRLFN_VALUE_PARAMS

     2226     3121    3                    GOTO TOO_MANY_CTRLFN_VALUE_PARAMS;
     2227     3122    3                 CTRL_ARGS = ARG_VALUES;

   3122  1 000477   200007 475500                    LDP5    @CTRL_ARGS,,AUTO
         1 000500   200042 237100                    LDAQ    ARG_VALUES,,AUTO
         1 000501   500000 755100                    STA     0,,PR5
         1 000502   500001 756100                    STQ     1,,PR5

     2228     3123    3                 RET_CODE = FUNC_ID;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:368  

   3123  1 000503   200006 476500                    LDP6    @RET_CODE,,AUTO
         1 000504   040100 100500                    MLR     fill='040'O
         1 000505   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000506   600000 000001                    ADSC9   0,,PR6                   cn=0,n=1

     2229     3124    3                 END;

   3124  1 000507   000611 710000 1                  TRA     s:3210

     2230     3125    2              ELSE
     2231     3126    2                 RET_CODE = %CHR_SPACE;

   3126  1 000510   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000511   040100 100400                    MLR     fill='040'O
         1 000512   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000513   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
         1 000514   000611 710000 1                  TRA     s:3210

     2232     3127
     2233     3128
     2234     3129    2              SELECT (%ASCBIN(FNID_RECORD));

     2235     3130                   %INCREMENT (INDX=%STG_CTRL_RECORD);

   3131  1 000515   000056 054000 xsym               AOS     VD_6E+46

     2236     3133    2              CONTROL_INDEX = POST_INDEX;

   3133  1 000516   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000517   400000 755100                    STA     0,,PR4

     2237     3134    2              RET_CODE = FUNC_ID;

   3134  1 000520   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000521   040100 100500                    MLR     fill='040'O
         1 000522   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:369  
         1 000523   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
         1 000524   000611 710000 1                  TRA     s:3210

     2238     3135
     2239     3136
     2240     3137        /*N*
     2241     3138        *N*      SELECT (%ASCBIN(FNID_CURRENT));
     2242     3139        *N*        %INCREMENT (INDX=%STG_CTRL_CURRENT);
     2243     3140        *N*        CONTROL_INDEX = POST_INDEX;
     2244     3141        *N*        RET_CODE = FUNC_ID;
     2245     3142        *N*/
     2246     3143
     2247     3144
     2248     3145    2              SELECT (%ASCBIN(FNID_WILD_CHAR));

     2249     3146                   %INCREMENT (INDX=%STG_CTRL_WILD_CHAR);

   3147  1 000525   000060 054000 xsym               AOS     VD_6E+48

     2250     3149    2              IF NUM_PARAMS > 2 THEN

   3149  1 000526   200020 235100                    LDA     NUM_PARAMS,,AUTO
         1 000527   000002 115007                    CMPA    2,DL
         1 000530   000631 605400 1                  TPNZ    TOO_MANY_CTRLFN_WILDC_PARAMS

     2251     3150    2                 GOTO TOO_MANY_CTRLFN_WILDC_PARAMS;
     2252     3151    2              IF ARG_VALUES (0) < 0

   3151  1 000531   200042 235100                    LDA     ARG_VALUES,,AUTO
         1 000532   000535 604000 1                  TMI     s:3153
         1 000533   200043 235100                    LDA     ARG_VALUES+1,,AUTO
         1 000534   000541 605000 1                  TPL     s:3157

     2253     3152    3                OR ARG_VALUES (1) < 0 THEN DO;

     2254     3153    3                 ERR_MIN_VALUE = 0;

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:370  
   3153  1 000535   200047 450100                    STZ     ERR_MIN_VALUE,,AUTO

     2255     3154    3                 ERR_MAX_VALUE = %INFINITY;

   3154  1 000536   000031 235000 xsym               LDA     B_VECTNIL+25
         1 000537   200050 755100                    STA     ERR_MAX_VALUE,,AUTO

     2256     3155    3                 GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;

   3155  1 000540   000623 710000 1                  TRA     CTRLFN_NUM_PARAM_NOT_INRANGE

     2257     3156    3                 END;
     2258     3157    2              CONTROL_INDEX = POST_INDEX;

   3157  1 000541   200011 235100                    LDA     POST_INDEX,,AUTO
         1 000542   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000543   400000 755100                    STA     0,,PR4

     2259     3158    2              IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN

   3158  1 000544   200007 236100                    LDQ     @CTRL_ARGS,,AUTO
         1 000545   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000546   000553 600000 1                  TZE     s:3160

     2260     3159    2                 CTRL_ARGS = ARG_VALUES;

   3159  1 000547   200007 475500                    LDP5    @CTRL_ARGS,,AUTO
         1 000550   200042 237100                    LDAQ    ARG_VALUES,,AUTO
         1 000551   500000 755100                    STA     0,,PR5
         1 000552   500001 756100                    STQ     1,,PR5

     2261     3160    2              RET_CODE = FUNC_ID;

   3160  1 000553   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000554   040100 100500                    MLR     fill='040'O
         1 000555   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000556   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:371  
         1 000557   000611 710000 1                  TRA     s:3210

     2262     3161
     2263     3162
     2264     3163    2              SELECT (%ASCBIN(FNID_WILD_STRING));

     2265     3164                   %INCREMENT (INDX=%STG_CTRL_WILD_STRING);

   3165  1 000560   000061 054000 xsym               AOS     VD_6E+49

     2266     3167    2              CONTROL_INDEX = POST_INDEX;

   3167  1 000561   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000562   400000 755100                    STA     0,,PR4

     2267     3168    2              RET_CODE = FUNC_ID;

   3168  1 000563   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000564   040100 100500                    MLR     fill='040'O
         1 000565   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000566   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
         1 000567   000611 710000 1                  TRA     s:3210

     2268     3169
     2269     3170
     2270     3171        /*N*
     2271     3172        *N*      SELECT (%ASCBIN(FNID_SET_OF_SEQUENCES));
     2272     3173        *N*        %INCREMENT (INDX=%STG_CTRL_SET_OF_SEQUENCES);
     2273     3174        *N*        IF NUM_PARAMS > 1 THEN
     2274     3175        *N*           GOTO TOO_MANY_CTRLFN_SETSQ_PARAMS;
     2275     3176        *N*        ERR_MIN_VALUE = 0;
     2276     3177        *N*        ERR_MAX_VALUE = LENGTHC(TEXT) - POST_INDEX -
     2277     3178        *N*          VD_$CONTROL.LENGTH# - %LENGTHC(FNID_SET_OF_SEQUENCES);
     2278     3179        *N*        IF ARG_VALUES (0) < ERR_MIN_VALUE
     2279     3180        *N*          OR ARG_VALUES (0) > ERR_MAX_VALUE THEN
     2280     3181        *N*           GOTO CTRLFN_NUM_PARAM_NOT_INRANGE;
     2281     3182        *N*        CONTROL_INDEX = POST_INDEX;
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:372  
     2282     3183        *N*        IF ADDR(CTRL_ARGS) ~= ADDR(NIL) THEN
     2283     3184        *N*           CTRL_ARGS = ARG_VALUES;
     2284     3185        *N*        RET_CODE = FUNC_ID;
     2285     3186        *N*/
     2286     3187
     2287     3188
     2288     3189    2              SELECT (%ASCBIN(FNID_BO_MATCH));

     2289     3190                   %INCREMENT (INDX=%STG_CTRL_BO_MATCH);

   3191  1 000570   000063 054000 xsym               AOS     VD_6E+51

     2290     3193    2              CONTROL_INDEX = POST_INDEX;

   3193  1 000571   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000572   400000 755100                    STA     0,,PR4

     2291     3194    2              RET_CODE = FUNC_ID;

   3194  1 000573   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000574   040100 100500                    MLR     fill='040'O
         1 000575   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000576   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
         1 000577   000611 710000 1                  TRA     s:3210

     2292     3195
     2293     3196
     2294     3197    2              SELECT (%ASCBIN(FNID_EO_MATCH));

     2295     3198                   %INCREMENT (INDX=%STG_CTRL_EO_MATCH);

   3199  1 000600   000064 054000 xsym               AOS     VD_6E+52

     2296     3201    2              CONTROL_INDEX = POST_INDEX;

   3201  1 000601   200005 474500                    LDP4    @CONTROL_INDEX,,AUTO
         1 000602   400000 755100                    STA     0,,PR4
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:373  

     2297     3202    2              RET_CODE = FUNC_ID;

   3202  1 000603   200006 475500                    LDP5    @RET_CODE,,AUTO
         1 000604   040100 100500                    MLR     fill='040'O
         1 000605   200010 000001                    ADSC9   FUNC_ID,,AUTO            cn=0,n=1
         1 000606   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
         1 000607   000611 710000 1                  TRA     s:3210

     2298     3203
     2299     3204
     2300     3205    2              SELECT (ELSE);

     2301     3206    2           GOTO CTRLFN_ID_NOT_LEGAL;

   3206  1 000610   000634 710000 1                  TRA     MOVE_TEXT_DOWN_FAILED

     2302     3207
     2303     3208    2              END FUNC_ID_CASES;

     2304     3209
     2305     3210    1           RETURN;

   3210  1 000611   000000 702200 xent               TSX2  ! X66_ARET

     2306     3211
     2307     3212
     2308     3213
     2309     3214                %BOX (TITLE="Error Handlers");

              3226    1   /***************************************************************************
              3228    1    *                                                                         *
              3232    1            *                               Error Handlers                           *
              3234    1            *                                                                        *
              3236    1          ***************************************************************************/

     2310     3240
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:374  
     2311     3241    1   NO_CTRLFN_LEFT_PAREN:
     2312     3242    1           ERR_CODE = %E$NO_CTRLFN_LEFT_PAREN;

   3242  1 000612   000065 235007       NO_CTRLFN_L* LDA     53,DL
         1 000613   200044 755100                    STA     ERR_CODE,,AUTO

     2313     3243    1           GOTO SERIOUS_ALTRETURN;

   3243  1 000614   000637 710000 1                  TRA     SERIOUS_ALTRETURN

     2314     3244
     2315     3245    1   NO_CTRLFN_RIGHT_PAREN:
     2316     3246    1           ERR_CODE = %E$NO_CTRLFN_RIGHT_PAREN;

   3246  1 000615   000066 235007       NO_CTRLFN_R* LDA     54,DL
         1 000616   200044 755100                    STA     ERR_CODE,,AUTO

     2317     3247    1           GOTO SERIOUS_ALTRETURN;

   3247  1 000617   000637 710000 1                  TRA     SERIOUS_ALTRETURN

   3243  1 000620                       CTRLFN_NUM_* null
   3243  1 000620                       DEC_CONVERT* null
     2318     3248
     2319     3249    1   CTRLFN_NUM_PARAM_NOT_LEGAL: ;
     2320     3250    1   DEC_CONVERT_FAILED: ;
     2321     3251    1           ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_LEGAL;

   3251  1 000620   000067 235007                    LDA     55,DL
         1 000621   200044 755100                    STA     ERR_CODE,,AUTO

     2322     3252    1           GOTO SERIOUS_ALTRETURN;

   3252  1 000622   000637 710000 1                  TRA     SERIOUS_ALTRETURN

     2323     3253
     2324     3254    1   CTRLFN_NUM_PARAM_NOT_INRANGE:
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:375  
     2325     3255    1           ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_INRANGE;

   3255  1 000623   000070 235007       CTRLFN_NUM_* LDA     56,DL
         1 000624   200044 755100                    STA     ERR_CODE,,AUTO

     2326     3256    1           GOTO SERIOUS_ALTRETURN;

   3256  1 000625   000637 710000 1                  TRA     SERIOUS_ALTRETURN

     2327     3257
     2328     3258    1   TOO_MANY_CTRLFN_VALUE_PARAMS:
     2329     3259    1           ERR_CODE = %E$TOO_MANY_CTRLFN_VALUE_PARAMS;

   3259  1 000626   000077 236007       TOO_MANY_CT* LDQ     63,DL
         1 000627   200044 756100                    STQ     ERR_CODE,,AUTO

     2330     3260    1           GOTO SERIOUS_ALTRETURN;

   3260  1 000630   000637 710000 1                  TRA     SERIOUS_ALTRETURN

     2331     3261
     2332     3262    1   TOO_MANY_CTRLFN_WILDC_PARAMS:
     2333     3263    1           ERR_CODE = %E$TOO_MANY_CTRLFN_WILDC_PARAMS;

   3263  1 000631   000100 235007       TOO_MANY_CT* LDA     64,DL
         1 000632   200044 755100                    STA     ERR_CODE,,AUTO

     2334     3264    1           GOTO SERIOUS_ALTRETURN;

   3264  1 000633   000637 710000 1                  TRA     SERIOUS_ALTRETURN

   3251  1 000634                       MOVE_TEXT_D* null
     2335     3265
     2336     3266    1   MOVE_TEXT_DOWN_FAILED: ;
     2337     3267    1   CTRLFN_ID_NOT_LEGAL:
     2338     3268    1           ERR_CODE = %E$CTRLFN_ID_NOT_LEGAL;

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:376  
   3268  1 000634   000071 235007       CTRLFN_ID_N* LDA     57,DL
         1 000635   200044 755100                    STA     ERR_CODE,,AUTO

     2339     3269    1           GOTO SERIOUS_ALTRETURN;

   3269  1 000636   000637 710000 1                  TRA     SERIOUS_ALTRETURN

     2340     3270
     2341     3271
     2342     3272    1   SERIOUS_ALTRETURN:
     2343     3273    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   3273  1 000637   200045 630500       SERIOUS_ALT* EPPR0   VD_ERR$,,AUTO
         1 000640   200053 450500                    STP0    ERR_MAX_VALUE+3,,AUTO
         1 000641   000004 236000 2                  LDQ     4
         1 000642   200052 756100                    STQ     ERR_MAX_VALUE+2,,AUTO
         1 000643   200052 630500                    EPPR0   ERR_MAX_VALUE+2,,AUTO
         1 000644   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000645   000000 701000 xent               TSX1    VDG$OALLOC
         1 000646   000677 702000 1                  TSX2    OALLOC_FAILED

     2344     3274    1             ALTRET (OALLOC_FAILED);
     2345     3275    1           VD$ERR.ERR.CODE# = ERR_CODE;

   3275  1 000647   200045 470500                    LDP0    VD_ERR$,,AUTO
         1 000650   200044 236100                    LDQ     ERR_CODE,,AUTO
         1 000651   000003 736000                    QLS     3
         1 000652   000002 676100                    ERQ     2,,PR0
         1 000653   377770 376007                    ANQ     131064,DL
         1 000654   000002 656100                    ERSQ    2,,PR0

     2346     3276    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   3276  1 000655   000003 220003                    LDX0    3,DU
         1 000656   200045 470500                    LDP0    VD_ERR$,,AUTO
         1 000657   000003 740100                    STX0    3,,PR0

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:377  
     2347     3277    2           IF ERR_CODE = %E$CTRLFN_NUM_PARAM_NOT_INRANGE THEN DO;

   3277  1 000660   200044 235100                    LDA     ERR_CODE,,AUTO
         1 000661   000070 115007                    CMPA    56,DL
         1 000662   000676 601000 1                  TNZ     s:3284

     2348     3278    2              SUBST_FIELD$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));

   3278  1 000663   200045 236100                    LDQ     VD_ERR$,,AUTO
         1 000664   000005 036003                    ADLQ    5,DU
         1 000665   200046 756100                    STQ     SUBST_FIELD$,,AUTO

     2349     3279    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;

   3279  1 000666   000033 221003                    LDX1    27,DU
         1 000667   200046 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000670   000000 741100                    STX1    0,,PR0

     2350     3280    2              SUBST$NUMBER.V# (0) = ERR_MIN_VALUE;

   3280  1 000671   200047 235100                    LDA     ERR_MIN_VALUE,,AUTO
         1 000672   000003 755100                    STA     3,,PR0

     2351     3281    2              SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;

   3281  1 000673   000004 741100                    STX1    4,,PR0

     2352     3282    2              SUBST$NUMBER.V# (1) = ERR_MAX_VALUE;

   3282  1 000674   200050 235100                    LDA     ERR_MAX_VALUE,,AUTO
         1 000675   000007 755100                    STA     7,,PR0

     2353     3283    2              END;

     2354     3284    1           ALTRETURN;

   3284  1 000676   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:378  

   3282  1 000677                       OALLOC_FAIL* null
     2355     3285
     2356     3286
     2357     3287
     2358     3288    1   OALLOC_FAILED: ;
     2359     3289    1           ALTRETURN;

   3289  1 000677   000000 702200 xent               TSX2  ! X66_AALT
     2360     3290
     2361     3291    1   END VDG$EXEC_CONTROL;
     2362     3292        %EOD;

PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:379  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$EXEC_CONTROL.
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:380  

 **** Variables and constants ****

  ****  Section 000 RoData VDG$EXEC_CONTROL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 PTR_$CONTROL$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @CONTROL_INDEX             7-0-0/w PTR         r     1 @CTRL_ARGS
     3-0-0/w PTR         r     1 @LN_TEXT                   6-0-0/w PTR         r     1 @RET_CODE
     4-0-0/w PTR         r     1 @TEXT
    42-0-0/w SBIN        r     1 ARG_VALUES(0:1)
    *0-0-0/w UBIN        r     1 CONTROL_INDEX
    *0-0-0/w SBIN        r     1 CTRL_ARGS(0:1)
    22-0-0/c STRC(576)   r     1 DEC                       44-0-0/w SBIN        r     1 ERR_CODE
    50-0-0/w SBIN        r     1 ERR_MAX_VALUE             47-0-0/w SBIN        r     1 ERR_MIN_VALUE
    10-0-0/w CHAR        r     1 FUNC_ID                   21-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 LN_TEXT                   20-0-0/w SBIN        r     1 NUM_PARAMS
    12-0-0/w SBIN        r     1 PARAM_INDEX(0:2)
    15-0-0/w SBIN        r     1 PARAM_LN(0:2)
    11-0-0/w SBIN        r     1 POST_INDEX                *0-0-0/c CHAR        r     1 RET_CODE
    46-0-0/w PTR         r     1 SUBST_FIELD$              *0-0-0/c ACHR        r     1 TEXT
    45-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w ASTR(90)    r     1 VD_$CONTROL
     0-0-0/w STRC(22644) r     1 VD_6E
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:381  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$XL_UPPER
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w ASTR(90)    r     1 VD$CONTROL                 0-0-0/w STRC(180)   r     1 VD$ERR


   Procedure VDG$EXEC_CONTROL requires 448 words for executable code.
   Procedure VDG$EXEC_CONTROL requires 46 words of local(AUTO) storage.
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:382  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:383  
          MINI XREF LISTING

ARG_VALUES
      2803**DCL      2975<<ASSIGN   3011<<ASSIGN   3012<<ASSIGN   3014<<ASSIGN   3015<<ASSIGN   3037<>CALL
      3042<<ASSIGN   3042>>ASSIGN   3052<>CALL     3109>>IF       3109>>IF       3109>>IF       3109>>IF
      3115>>CALLBLT  3122>>ASSIGN   3151>>IF       3151>>IF       3159>>ASSIGN
B$XL_UPPER
      2588**DCL      2981>>CALLBLT
B$XL_UPPER$
      2587**DCL      2588--IMP-PTR  2981>>CALLBLT
CONTROL_INDEX
      2540**DCL        61--PROC     2979>>ASSIGN   2982>>ASSIGN   3094<<ASSIGN   3094>>ASSIGN   3095>>ASSIGN
      3096>>ASSIGN   3097>>ASSIGN   3115>>CALLBLT  3116<<ASSIGN   3116>>ASSIGN   3117>>ASSIGN   3118>>ASSIGN
      3133<<ASSIGN   3157<<ASSIGN   3167<<ASSIGN   3193<<ASSIGN   3201<<ASSIGN
CTRLFN_ID_NOT_LEGAL
      3268**LABEL    3206--GOTO
CTRLFN_NUM_PARAM_NOT_INRANGE
      3255**LABEL    3113--GOTO     3155--GOTO
CTRLFN_NUM_PARAM_NOT_LEGAL
      3243**LABEL    3034--GOTO
CTRL_ARGS
      2542**DCL        61--PROC     2970--IF       2971<<ASSIGN   3120--IF       3122<<ASSIGN   3158--IF
      3159<<ASSIGN
DEC
      2796**DCL      3037--CALL     3052--CALL
DEC.BYTES
      2800**DCL      3036<<ASSIGN   3051<<ASSIGN
DEC.LENGTH#
      2800**DCL      3035<<ASSIGN   3050<<ASSIGN
DEC_CONVERT_FAILED
      3243**LABEL    3037--CALLALT  3052--CALLALT
ERR_CODE
      2804**DCL      3242<<ASSIGN   3246<<ASSIGN   3251<<ASSIGN   3255<<ASSIGN   3259<<ASSIGN   3263<<ASSIGN
      3268<<ASSIGN   3275>>ASSIGN   3277>>IF
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:384  
ERR_MAX_VALUE
      2808**DCL      3112<<ASSIGN   3154<<ASSIGN   3282>>ASSIGN
ERR_MIN_VALUE
      2807**DCL      3111<<ASSIGN   3153<<ASSIGN   3280>>ASSIGN
FUNC_ID
      2656**DCL      2979<<ASSIGN   2981<<CALLBLT  2981>>CALLBLT  2984>>DOSELCT  3009>>DOSELCT  3102>>DOSELCT
      3123>>ASSIGN   3134>>ASSIGN   3160>>ASSIGN   3168>>ASSIGN   3194>>ASSIGN   3202>>ASSIGN
I
      2661**DCL      3004<<DOINDEX  3005>>ASSIGN   3005>>ASSIGN   3005>>ASSIGN
LN_TEXT
      2538**DCL        61--PROC     2539--IMP-SIZ  2979>>ASSIGN   2990>>IF       2993>>CALLBLT  2999>>CALLBLT
      3029>>IF       3036>>ASSIGN   3045>>IF       3051>>ASSIGN   3086>>IF       3096>>ASSIGN   3096>>ASSIGN
      3097<<ASSIGN   3097>>ASSIGN   3115>>CALLBLT  3117>>ASSIGN   3117>>ASSIGN   3118<<ASSIGN   3118>>ASSIGN
NO_CTRLFN_LEFT_PAREN
      3242**LABEL    2991--GOTO
NO_CTRLFN_RIGHT_PAREN
      3246**LABEL    2993--CALLALT
NUM_PARAMS
      2660**DCL      2974<<ASSIGN   2997>>DOWHILE  2998<<ASSIGN   2998>>ASSIGN   2999>>CALLBLT  2999>>CALLBLT
      3001>>ASSIGN   3001>>ASSIGN   3004>>DOINDEX  3039>>IF       3045>>IF       3107>>IF       3119>>IF
      3149>>IF
OALLOC_FAILED
      3282**LABEL    3273--CALLALT
PARAM_INDEX
      2658**DCL      2972<<ASSIGN   2992<<ASSIGN   2993>>CALLBLT  2997>>DOWHILE  2999<<CALLBLT  2999>>CALLBLT
      3001<<ASSIGN   3001>>ASSIGN   3005>>ASSIGN   3005>>ASSIGN   3029>>IF       3036>>ASSIGN   3045>>IF
      3051>>ASSIGN
PARAM_LN
      2659**DCL      2973<<ASSIGN   3005<<ASSIGN   3029>>IF       3029>>IF       3033>>IF       3035>>ASSIGN
      3036>>ASSIGN   3045>>IF       3045>>IF       3050>>ASSIGN   3051>>ASSIGN
POST_INDEX
      2657**DCL      2982<<ASSIGN   2990>>IF       2992>>ASSIGN   2993<<CALLBLT  2995<<ASSIGN   2995>>ASSIGN
      2997>>DOWHILE  3001>>ASSIGN   3086>>IF       3095<<ASSIGN   3096>>ASSIGN   3097>>ASSIGN   3117>>ASSIGN
      3118>>ASSIGN   3133>>ASSIGN   3157>>ASSIGN   3167>>ASSIGN   3193>>ASSIGN   3201>>ASSIGN
PTR_$CONTROL$
      2652**DCL      2836--IMP-PTR  3086>>IF       3086>>IF
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:385  
RET_CODE
      2541**DCL        61--PROC     2969<<ASSIGN   3123<<ASSIGN   3126<<ASSIGN   3134<<ASSIGN   3160<<ASSIGN
      3168<<ASSIGN   3194<<ASSIGN   3202<<ASSIGN
SERIOUS_ALTRETURN
      3273**LABEL    3243--GOTO     3247--GOTO     3252--GOTO     3256--GOTO     3260--GOTO     3264--GOTO
      3269--GOTO
SUBST$NUMBER.OBJECT.CLASS#
      2962**DCL      3279<<ASSIGN   3281<<ASSIGN
SUBST$NUMBER.V#
      2964**DCL      3280<<ASSIGN   3282<<ASSIGN
SUBST_FIELD$
      2806**DCL      2930--IMP-PTR  3278<<ASSIGN   3279>>ASSIGN   3280>>ASSIGN   3281>>ASSIGN   3282>>ASSIGN
TEXT
      2539**DCL        61--PROC     2979>>ASSIGN   2990>>IF       2993>>CALLBLT  2999>>CALLBLT  3029>>IF
      3036>>ASSIGN   3045>>IF       3051>>ASSIGN   3086>>IF       3096<<ASSIGN   3096>>ASSIGN   3115<<CALLBLT
      3117<<ASSIGN   3117>>ASSIGN
TOO_MANY_CTRLFN_VALUE_PARAMS
      3259**LABEL    3108--GOTO     3121--GOTO
TOO_MANY_CTRLFN_WILDC_PARAMS
      3263**LABEL    3150--GOTO
VD$CONTROL.BYTES
      2864**DCL      3086>>IF
VD$CONTROL.LENGTH#
      2862**DCL      2864--IMP-SIZ  3086>>IF
VD$ERR
      2877**DCL      3278--ASSIGN
VD$ERR.ERR.CODE#
      2916**DCL      3275<<ASSIGN
VD$ERR.FLAGLEV#
      2919**DCL      3276<<ASSIGN
VDG$OALLOC
      2546**DCL-ENT  3273--CALL
VD_$CONTROL
      2616**DCL      2652--DCLINIT
VD_$CONTROL.LENGTH#
      2642**DCL      2644--IMP-SIZ  2979>>ASSIGN   2982>>ASSIGN   3086>>IF       3094>>ASSIGN   3095>>ASSIGN
PL6.E3A0      #017=VDG$EXEC_CONTROL File=VDG$UTILITY.:VDA5TSI                    FRI 07/04/97 11:24 Page:386  
VD_6E.STATS#
      2583**DCL      3092<<ASSIGN   3092>>ASSIGN   3105<<ASSIGN   3105>>ASSIGN   3131<<ASSIGN   3131>>ASSIGN
      3147<<ASSIGN   3147>>ASSIGN   3165<<ASSIGN   3165>>ASSIGN   3191<<ASSIGN   3191>>ASSIGN   3199<<ASSIGN
      3199>>ASSIGN
VD_ERR$
      2805**DCL      2877--IMP-PTR  3273<>CALL     3275>>ASSIGN   3276>>ASSIGN   3278>>ASSIGN
X$DEC_CONVERT
      2545**DCL-ENT  3037--CALL     3052--CALL

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:387  
     2363        1        /*T***********************************************************/
     2364        2        /*T*                                                         */
     2365        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2366        4        /*T*                                                         */
     2367        5        /*T***********************************************************/
     2368        6
     2369        7        /*D* NAME: VDG$XLATE_LOCATIONS
     2370        8            PARAMETERS:
     2371        9                XLATE_LOCATIONS - Root VD$XLATE_LOCATIONS specifying the
     2372       10                    translations to build or make.  XLATE_LOCATIONS may be the
     2373       11                    "root" or first entry in a .FLINK$d chain of VD$XLATE_LOCATIONS.
     2374       12                    XLATE_LOCATIONS (first entry in chain) must contain:
     2375       13                        .FLINK$, .N_ENTRIES, .MX_ENTRIES - As documented.
     2376       14                        .FILE_KEY - Fid of file whose locations are locations are
     2377       15                            to be translated.
     2378       16                        .PREFIX - Keys at levels 1 thru .LEVEL specifying which
     2379       17                            locations are to be translated.
     2380       18                        .LEVEL - Level of file structure at which translation
     2381       19                            is to occur.
     2382       20                    In successive VD$XLATE_LOCATIONS in the chain, only
     2383       21                    .FLINK$, .N_ENTRIES, .MX_ENTRIES, and .XLATES must appear.
     2384       22                    If ACTION = %XLATE_LOCATION, then XLATE_LOCATIONS.XLATES
     2385       23                        must specify the translations to perform.
     2386       24                    If ACTION = %XLATE_BUILD, then XLATE_LOCATIONS.N_ENTRIES
     2387       25                        must be 0.  (.MX_ENTRIES should be some reasonable number.)
     2388       26                        Also, there should be no other VD$XLATE_LOCATIONSs in the
     2389       27                        chain.
     2390       28                ACTION - An %XLATE_ def, specifying what action to take with
     2391       29                    each location found which matches the XLATE_LOCATIONS.FILE_KEY
     2392       30                    and .PREFIX.
     2393       31            INPUT:
     2394       32                VD_6E.LOCATIONS$ - Ptr to VD$STREAM open to the Locations
     2395       33                    internal file.
     2396       34                VD_6E.WINDOWS$ - Ptr to VD$STREAM open to the Windows internal
     2397       35                    file.
     2398       36                VD_6E.SOURCE.OPERAND - VD$OPERAND for the source operand.
     2399       37            OUTPUT:
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:388  
     2400       38                If ACTION = %XLATE_BUILD:
     2401       39                    XLATE_LOCATIONS will have .XLATES added for each VD$LOCATION
     2402       40                        in the Locations and Windows files and the source operand
     2403       41                        which matches the specified file key and prefix.
     2404       42                        The added .XLATES will be sorted in .OLD_KEY_LO order.
     2405       43                        They will have:
     2406       44                            .OLD_KEY_LO - Key from the candidate VD$LOCATION
     2407       45                                at level XLATE_LOCATIONS.LEVEL.
     2408       46                            .OLD_KEY_HI - Same key as in .OLD_KEY_LO.
     2409       47                            .OLD_POS_LO - 0.
     2410       48                            .OLD_POS_HI - %MXNB_DATA.
     2411       49                            .NEW_KEY, .NEW_POS, .NEW_POS_INCR - %CLEAR.
     2412       50                If ACTION = %XLATE_LOCATION:
     2413       51                    Each VD$LOCATIONS in the Locations and Windows files and
     2414       52                        the source operand will be translated according to
     2415       53                        XLATE_LOCATIONS.XLATES.
     2416       54            DESCRIPTION:
     2417       55                First, position the Locations-file to EOF.  We do this so that
     2418       56                    if we do "xlate" a Location-name's value, we can be sure
     2419       57                    there aren't any other copies of that name's value lying
     2420       58                    around anywhere (like in PORT.LEVEL.DATA$).  Positioning
     2421       59                    to EOF will force the VD$PORT to be cleared.
     2422       60                    (Test case:
     2423       61                        LO L IS 3 PO 10
     2424       62                        DE 3
     2425       63                        L           "Should put cursor at BO 4
     2426       64                    .)
     2427       65
     2428       66                Examine the source operand, and walk the Locations and Windows files,
     2429       67                looking for VD$LOCATIONs which fit the criteria specified
     2430       68                by XLATE_LOCATIONS.FILE_KEY and .PREFIX.
     2431       69                In each VD$WINDOW_SPEC.OPERAND and in VD_6E.SOURCE.OPERAND,
     2432       70                the following VD$LOCATIONs are examined:
     2433       71                    .EDIT_BLOCK$->VD$BLOCK_DESC.RANGE.START and .ENDD
     2434       72                    .EVAL$->VD$EVAL.ENCLOSING.START and .ENDD
     2435       73                    .EVAL$->VD$EVAL.RANGE.START and .ENDD
     2436       74                    .EVAL$->VD$EVAL.BLINK$->VD$EVAL.ENCLOSING and .RANGE, ad infinitum
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:389  
     2437       75                In VD$WINDOW_BLOCK, the following VD$LOCATIONs are examined:
     2438       76                    .EDIT_BLOCK$->VD$BLOCK_DESC.RANGE.START and .ENDD
     2439       77                    .EVAL$->VD$EVAL.ENCLOSING.START and .ENDD
     2440       78                    .EVAL$->VD$EVAL.RANGE.START and .ENDD
     2441       79                    .EVAL$->VD$EVAL.BLINK$->VD$EVAL.ENCLOSING and .RANGE, ad infinitum
     2442       80                The Data components of entries in the Locations file are
     2443       81                either VD$BLOCK_BUFFERs containing VD$BLOCK_DESCs or VD$POINTERs
     2444       82                pointing to VD$BLOCK_DESCs.  In these VD$BLOCK_DESCs, the
     2445       83                following VD$LOCATIONs are examined:
     2446       84                    .RANGE.START
     2447       85                    .RANGE.ENDD
     2448       86
     2449       87                When examining a VD$LOCATION:
     2450       88                    If the file key for the location matches XLATE_LOCATIONS.FILE_KEY,
     2451       89                    and all keys at levels 1 thru XLATE_LOCATIONS.LEVEL match
     2452       90                    XLATE_LOCATIONS.PREFIX, then this is a "candidate":
     2453       91                        Search for a matching entry in XLATE_LOCATIONS.XLATES
     2454       92                            for this candidate:  candidate key between .OLD_KEY_LO
     2455       93                            and .OLD_KEY_HI, candidate position >= .OLD_POS_LO.
     2456       94                        If ACTION = %XLATE_BUILD:
     2457       95                            If we don't find a matching entry, build a new entry for
     2458       96                            the candidate location, inserting into the xlate tables in
     2459       97                            ascending order sorted by .OLD_KEY_LO.
     2460       98                        If ACTION = %XLATE_LOCATION:
     2461       99                            If we do find a matching entry, translate the
     2462      100                            candidate location according to the entry.
     2463      101        */
     2464      102
     2465      103        VDG$XLATE_LOCATIONS: PROC (XLATE_LOCATIONS, ACTION) ALTRET;
     2466      104
     2467      105        %INCLUDE VD_MACROS_M;
     2468     2320
     2469     2321
     2470     2322        %VD$XLATE_LOCATIONS (NAME=XLATE_LOCATIONS, STCLASS=PARAM);
     2471     2458    1   DCL ACTION SBIN;
     2472     2459
     2473     2460
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:390  
     2474     2461    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     2475     2462    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2476     2463    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2477     2464    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2478     2465    1   DCL VDG$ESCREECH        ENTRY (3);
     2479     2466
     2480     2467
     2481     2468        %VD_6E (STCLASS=SYMREF);
     2482     2504
     2483     2505
     2484     2506        %VD_LOCATION (NAME=ABSOLUTE_EOF, STCLASS=CONSTANT, IEOF=%TRUE);
     2485     2546
     2486     2547
     2487     2548    1   DCL PREFIX_KEY$ (0:%MX_ACCESS_LEVELS) PTR;
     2488     2549    1   DCL LEVEL SBIN;
     2489     2550    1   DCL L0_NODE$ PTR;
     2490     2551    1   DCL L1_NODE$ PTR;
     2491     2552    1   DCL L2_NODE$ PTR;
     2492     2553    1   DCL NAME_DATA$ PTR;
     2493     2554    1   DCL NAME_DESC$ PTR;
     2494     2555    1   DCL WINDOW_SPEC$ PTR;
     2495     2556    1   DCL WINDOW_BLOCK$ PTR;
     2496     2557    1   DCL THIS_EVAL$ PTR;
     2497     2558    1   DCL BLOCK_IS_CANDIDATE BIT(1) ALIGNED;
     2498     2559    1   DCL SOURCE_STRING_OPERAND BIT(1) ALIGNED;
     2499     2560
     2500     2561
     2501     2562        %VD$FILE_NODE (NAME=L0$NODE, STCLASS="BASED(L0_NODE$)");
     2502     2655        %VD$FILE_NODE (NAME=L1$NODE, STCLASS="BASED(L1_NODE$)");
     2503     2748        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
     2504     2841        %VD$OBJECT_HEADER (NAME=NAME$DATA, STCLASS="BASED(NAME_DATA$)");
     2505     2863        %VD$POINTER (NAME=NAME$DATA_POINTER, STCLASS="BASED(NAME_DATA$)");
     2506     2908        %VD$BUFFER (NAME=NAME$DATA_BUFFER, STCLASS="BASED(NAME_DATA$)");
     2507     2966        %VD$BLOCK_DESC (NAME=NAME$DESC, STCLASS="BASED(NAME_DESC$)");
     2508     3113        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     2509     3179        %VD$WINDOW_BLOCK (NAME=WINDOW$BLOCK, STCLASS="BASED(WINDOW_BLOCK$)");
     2510     3216        %VD$EVAL (NAME=THIS$EVAL, STCLASS="BASED(THIS_EVAL$)");
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:391  
     2511     3461        %VD$STREAM;
     2512     3567        %VD$PORT;
     2513     3665        %VD$BLOCK_DESC;
     2514     3812        %VD$TEXTC;
     2515     3835        %VD$TEXTC_REMOTE;
     2516     3896
     2517     3897
     2518     3898
     2519     3899    1           IF ACTION = %XLATE_LOCATION
     2520     3900    1             AND XLATE_LOCATIONS.N_ENTRIES# <= 0 THEN
     2521     3901    1              RETURN;
     2522     3902
     2523     3903    1           CALL VDA$LREAD (VD_6E.LOCATIONS$->VD$STREAM, ABSOLUTE_EOF,
     2524     3904    1             0, %FALSE)
     2525     3905    1             ALTRET (LREAD_FAILED);
     2526     3906
     2527     3907                %GETKEY (KEY=XLATE_LOCATIONS.FILE_KEY,
     2528     3908                PTR="PREFIX_KEY$ (%LVL_FILE)");
     2529     3918    2           DO LEVEL = 1 TO (XLATE_LOCATIONS.LEVEL# - 1);
     2530     3919                   %GETKEY (KEY=XLATE_LOCATIONS.PREFIX.KEY, INDX=LEVEL-1,
     2531     3920                   PTR="PREFIX_KEY$ (LEVEL)");
     2532     3930    2              END;
     2533     3931
     2534     3932    1           CALL EXAMINE_OPERAND (VD_6E.SOURCE.OPERAND)
     2535     3933    1             ALTRET (EXAMINE_OPERAND_FAILED);
     2536     3934
     2537     3935    1           L0_NODE$ = VD_6E.LOCATIONS$->VD$STREAM.PORT$ ->
     2538     3936    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     2539     3937    1           L1_NODE$ = ADDR(NIL);
     2540     3938    1           IF L0_NODE$ ~= ADDR(NIL) THEN
     2541     3939    1              L1_NODE$ = L0$NODE.HEAD$;
     2542     3940
     2543     3941    1   EACH_LOCATIONS_NODE:
     2544     3942    2           DO WHILE L1_NODE$ ~= ADDR(NIL);
     2545     3943    2              NAME_DATA$ = L1$NODE.DESC.DATA$;
     2546     3944    3              IF NAME_DATA$ ~= ADDR(NIL) THEN DO;
     2547     3945    4                 DO CASE (NAME$DATA.CLASS#);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:392  
     2548     3946    4                  CASE (%CLS_PTR_BLOCK_DESC);
     2549     3947    4                    NAME_DESC$ = NAME$DATA_POINTER.V$;
     2550     3948    4                  CASE (%CLS_BLOCK_BUFFER);
     2551     3949    4                    NAME_DESC$ = PALIGNW(ADDR(NAME$DATA_BUFFER.BYTES));
     2552     3950    4                  CASE (ELSE);
     2553     3951    4                    CALL VDG$ESCREECH (NAME$DATA.CLASS#);
     2554     3952    4                  END;
     2555     3953    4                 IF NAME_DESC$ ~= ADDR(NIL) THEN DO;
     2556     3954    4                    CALL EXAMINE_BLOCK_DESC (NAME$DESC)
     2557     3955    4                      ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2558     3956    4                    END;
     2559     3957    3                 END;
     2560     3958    2              L1_NODE$ = L1$NODE.FLINK$;
     2561     3959    2              END EACH_LOCATIONS_NODE;
     2562     3960
     2563     3961
     2564     3962    1           L0_NODE$ = VD_6E.WINDOWS$->VD$STREAM.PORT$ ->
     2565     3963    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     2566     3964    1           L1_NODE$ = ADDR(NIL);
     2567     3965    1           IF L0_NODE$ ~= ADDR(NIL) THEN
     2568     3966    1              L1_NODE$ = L0$NODE.HEAD$;
     2569     3967
     2570     3968    1   EACH_WINDOWS_L1_NODE:
     2571     3969    2           DO WHILE L1_NODE$ ~= ADDR(NIL);
     2572     3970    2              WINDOW_SPEC$ = L1$NODE.DESC.SPEC.V$;
     2573     3971    3              IF WINDOW_SPEC$ ~= ADDR(NIL) THEN DO;
     2574     3972    3                 CALL EXAMINE_OPERAND (WINDOW$SPEC.OPERAND)
     2575     3973    3                   ALTRET (EXAMINE_OPERAND_FAILED);
     2576     3974    3                 END;
     2577     3975
     2578     3976    2              L2_NODE$ = L1$NODE.HEAD$;
     2579     3977    2   EACH_WINDOWS_L2_NODE:
     2580     3978    3              DO WHILE L2_NODE$ ~= ADDR(NIL);
     2581     3979    3                 WINDOW_BLOCK$ = L2$NODE.DESC.SPEC.V$;
     2582     3980    3                 IF WINDOW_BLOCK$ ~= ADDR(NIL) THEN
     2583     3981    4                    IF WINDOW$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
     2584     3982    4                       CALL EXAMINE_BLOCK_DESC (WINDOW$BLOCK.EDIT_BLOCK$ ->
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:393  
     2585     3983    4                         VD$BLOCK_DESC)
     2586     3984    4                         ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2587     3985
     2588     3986    4                       THIS_EVAL$ = WINDOW$BLOCK.EVAL$;
     2589     3987    4                       IF BLOCK_IS_CANDIDATE THEN
     2590     3988    5                       DO WHILE THIS_EVAL$ ~= ADDR(NIL);
     2591     3989    5                          CALL EXAMINE_EVAL (THIS$EVAL)
     2592     3990    5                            ALTRET (EXAMINE_EVAL_FAILED);
     2593     3991    5                          THIS_EVAL$ = THIS$EVAL.BLINK$;
     2594     3992    5                          END;
     2595     3993    4                       END;
     2596     3994
     2597     3995    3                 L2_NODE$ = L2$NODE.FLINK$;
     2598     3996    3                 END EACH_WINDOWS_L2_NODE;
     2599     3997
     2600     3998    2              L1_NODE$ = L1$NODE.FLINK$;
     2601     3999    2              END EACH_WINDOWS_L1_NODE;
     2602     4000
     2603     4001    1           RETURN;
     2604     4002
     2605     4003
     2606     4004
     2607     4005    1   LREAD_FAILED: ;
     2608     4006    1   EXAMINE_OPERAND_FAILED: ;
     2609     4007    1   EXAMINE_BLOCK_DESC_FAILED: ;
     2610     4008    1   EXAMINE_EVAL_FAILED: ;
     2611     4009    1           ALTRETURN;
     2612     4010
     2613     4011        %BOX (TITLE=EXAMINE_OPERAND, PAGE=YES);
              4019    1
              4023    1   /***************************************************************************
              4025    1    *                                                                         *
              4029    1            *                              EXAMINE_OPERAND                            *
              4031    1            *                                                                         *
              4033    1           ***************************************************************************/

     2614     4037
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:394  
     2615     4038        /*I* NAME: EXAMINE_OPERAND
     2616     4039            PARAMETERS:
     2617     4040                OPERAND - VD$OPERAND to examine, looking for candidate locations.
     2618     4041            INPUT:
     2619     4042                XLATE_LOCATIONS - Same as main routine.
     2620     4043                ACTION - Same as main routine.
     2621     4044                PREFIX_KEY$ - Array of ptrs to VD$TEXTCs for prefix keys at
     2622     4045                    levels 0 thru (XLATE_LOCATIONS.LEVEL-1).
     2623     4046            OUTPUT:
     2624     4047                Same as main routine, but just for OPERAND's VD$LOCATIONS.
     2625     4048            DESCRIPTION:
     2626     4049                Examine each of the VD$LOCATIONs in OPERAND.
     2627     4050        */
     2628     4051
     2629     4052    1   EXAMINE_OPERAND: PROC (OPERAND) ALTRET;
     2630     4053
     2631     4054        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     2632     4068        %VD$WILD_STRINGS (STCLASS="BASED(VD_6E.WILD_STRINGS$)");
     2633     4183        %VD$WILD_STRINGS (NAME=WILD, STCLASS="BASED(THIS_WILD$)");
     2634     4298
     2635     4299
     2636     4300
     2637     4301    2   DCL THIS_WILD$ PTR;
     2638     4302    2   DCL THIS_EVAL$ PTR;
     2639     4303
     2640     4304
     2641     4305        %VD$EVAL (NAME=THIS$EVAL, STCLASS="BASED(THIS_EVAL$)");
     2642     4550
     2643     4551
     2644     4552    2           SOURCE_STRING_OPERAND = '0'B;
     2645     4553    3           IF OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
     2646     4554    3              CALL EXAMINE_BLOCK_DESC (OPERAND.EDIT_BLOCK$ -> VD$BLOCK_DESC)
     2647     4555    3                ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2648     4556
     2649     4557    3              IF NOT BLOCK_IS_CANDIDATE THEN EXIT;
     2650     4558    3              IF ADDR(OPERAND) = ADDR(VD_6E.SOURCE.OPERAND)
     2651     4559    3                AND OPERAND.EDIT_BLOCK$ -> VD$BLOCK_DESC.OPTIONS.STRUCTURE$ =
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:395  
     2652     4560    3                VD_6E.STRUCTURE_SCRATCH$ THEN SOURCE_STRING_OPERAND = '1'B;
     2653     4561
     2654     4562                   /*
     2655     4563                   *   This must be inserting or deleting the wildcard matches
     2656     4564                   *   for a literal string.  Adjust EVAL backwards.
     2657     4565                   */
     2658     4566
     2659     4567    3              THIS_EVAL$ = OPERAND.EVAL$;
     2660     4568    4              DO WHILE THIS_EVAL$ ~= ADDR(NIL);
     2661     4569    4                 CALL EXAMINE_EVAL (THIS$EVAL)
     2662     4570    4                   ALTRET (EXAMINE_EVAL_FAILED);
     2663     4571    4                 THIS_EVAL$ = THIS$EVAL.BLINK$;
     2664     4572    4                 END;
     2665     4573    3              IF NOT SOURCE_STRING_OPERAND THEN EXIT;
     2666     4574    3              SOURCE_STRING_OPERAND = '0'B;
     2667     4575                   /*
     2668     4576                   *   Adjust the rest of the wildcard matches for a literal string.
     2669     4577                   */
     2670     4578
     2671     4579    3              THIS_WILD$ = PINCRW (VD_6E.WILD_STRINGS$,
     2672     4580    3                VD$WILD_STRINGS.N_WILDCARDS# * SIZEW(WILD.W));
     2673     4581
     2674     4582    4              DO UNTIL THIS_WILD$ = VD_6E.WILD_STRINGS$;
     2675     4583    4                 THIS_WILD$ = PINCRW (THIS_WILD$, -SIZEW(WILD.W));
     2676     4584                      /*
     2677     4585                      * On an insert, VDI$BINSERT sets EOF in the insertion
     2678     4586                      * range.  These ranges are sorted by position, so stop
     2679     4587                      * adjusting when we get to the insertion one, so that
     2680     4588                      * lower adjacent ones don't get moved.
     2681     4589                      */
     2682     4590    4                 IF WILD.W.RANGE.START.EOF THEN EXIT;
     2683     4591
     2684     4592    4                 CALL CANDIDATE_LOCATION (WILD.W.RANGE.START)
     2685     4593    4                   ALTRET (CANDIDATE_LOCATION_FAILED);
     2686     4594    4                 CALL CANDIDATE_LOCATION_END (WILD.W.RANGE.ENDD)
     2687     4595    4                   ALTRET (CANDIDATE_LOCATION_FAILED);
     2688     4596    4                 END;
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:396  
     2689     4597
     2690     4598    3              END;
     2691     4599
     2692     4600    2           RETURN;
     2693     4601
     2694     4602
     2695     4603    2   CANDIDATE_LOCATION_FAILED: ;
     2696     4604    2   EXAMINE_BLOCK_DESC_FAILED: ;
     2697     4605    2   EXAMINE_EVAL_FAILED: ;
     2698     4606    2           ALTRETURN;
     2699     4607
     2700     4608    2   END EXAMINE_OPERAND;
     2701     4609
     2702     4610        %BOX (TITLE=EXAMINE_BLOCK_DESC, PAGE=YES);
              4618    2
              4622    2   /***************************************************************************
              4624    2    *                                                                         *
              4628    2            *                             EXAMINE_BLOCK_DESC                          *
              4630    2            *                                                                         *
              4632    2           ***************************************************************************/

     2703     4636
     2704     4637        /*I* NAME: EXAMINE_BLOCK_DESC
     2705     4638            PARAMETERS:
     2706     4639                BLOCK_DESC - VD$BLOCK_DESC to examine, looking for candidate
     2707     4640                    locations.
     2708     4641            INPUT:
     2709     4642                XLATE_LOCATIONS - Same as main routine.
     2710     4643                ACTION - Same as main routine.
     2711     4644                PREFIX_KEY$ - Array of ptrs to VD$TEXTCs for prefix keys at
     2712     4645                    levels 0 thru (XLATE_LOCATIONS.LEVEL-1).
     2713     4646            OUTPUT:
     2714     4647                BLOCK_IS_CANDIDATE will be set %TRUE if BLOCK_DESC's .FILE_KEY
     2715     4648                    matches XLATE_LOCATIONS.FILE_KEY, and if BLOCK_DESC.RANGE's
     2716     4649                    locations have the same prefix as XLATE_LOCATIONS.PREFIX.
     2717     4650                    Otherwise, BLOCK_IS_CANDIDATE will be set %FALSE.
     2718     4651                Same as main routine, but just for BLOCK_DESC's VD$LOCATIONS.
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:397  
     2719     4652            DESCRIPTION:
     2720     4653                First, see if this block has the same prefix (levels 0 thru
     2721     4654                    XLATE_LOCATIONS.LEVEL - 1) as the one specified in
     2722     4655                    XLATE_LOCATIONS.FILE_KEY and .PREFIX.  If not, set
     2723     4656                    BLOCK_IS_CANDIDATE to false and return.
     2724     4657                    If BLOCK_DESC.RANGE.START is EOF, then this block is not
     2725     4658                    a candidate (note .RANGE.ENDD could only legally be EOF
     2726     4659                    also).  If BLOCK_DESC.RANGE.START has no keys, then this
     2727     4660                    block could only be a candidate if the translation level
     2728     4661                    is level 1, and so there are no prefix keys to be matched
     2729     4662                    below the file level (level 0).
     2730     4663                If this block is a candidate for translation, examine each of
     2731     4664                    the candidate VD$LOCATIONs in BLOCK_DESC and process them
     2732     4665                    according to ACTION.
     2733     4666        */
     2734     4667
     2735     4668    1   EXAMINE_BLOCK_DESC: PROC (BLOCK_DESC) ALTRET;
     2736     4669
     2737     4670        %VD$BLOCK_DESC (NAME=BLOCK_DESC, STCLASS=PARAM);
     2738     4817
     2739     4818
     2740     4819    2   DCL LEVEL SBIN;
     2741     4820    2   DCL BLOCK_KEY$ PTR;
     2742     4821
     2743     4822
     2744     4823        %VD$TEXTC (NAME=BLOCK$KEY, STCLASS="BASED(BLOCK_KEY$)");
     2745     4846
     2746     4847
     2747     4848
     2748     4849    2           BLOCK_IS_CANDIDATE = %FALSE;
     2749     4850
     2750     4851                %GETKEY (KEY=BLOCK_DESC.FILE_KEY, PTR=BLOCK_KEY$);
     2751     4861    2           IF BLOCK$KEY.BYTES ~= PREFIX_KEY$ (%LVL_FILE) -> VD$TEXTC.BYTES
     2752     4862    2             OR BLOCK_DESC.RANGE.START.EOF
     2753     4863    2             OR (BLOCK_DESC.RANGE.START.KEY = %CLEAR
     2754     4864    2             AND XLATE_LOCATIONS.LEVEL# > %LVL_LOWER) THEN
     2755     4865    2              RETURN;
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:398  
     2756     4866
     2757     4867    3           DO LEVEL = 1 TO (XLATE_LOCATIONS.LEVEL# - 1);
     2758     4868    3              IF BLOCK_DESC.RANGE.START.KEY (LEVEL - 1) = %CLEAR THEN
     2759     4869    3                 RETURN;
     2760     4870                   %GETKEY (KEY=BLOCK_DESC.RANGE.START.KEY, INDX=LEVEL-1,
     2761     4871                   PTR=BLOCK_KEY$);
     2762     4881    3              IF BLOCK$KEY.BYTES ~= PREFIX_KEY$ (LEVEL) -> VD$TEXTC.BYTES THEN
     2763     4882    3                 RETURN;
     2764     4883    3              END;
     2765     4884
     2766     4885    2           BLOCK_IS_CANDIDATE = %TRUE;
     2767     4886
     2768     4887    2           CALL CANDIDATE_LOCATION (BLOCK_DESC.RANGE.START)
     2769     4888    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2770     4889    2           CALL CANDIDATE_LOCATION_END (BLOCK_DESC.RANGE.ENDD)
     2771     4890    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2772     4891
     2773     4892    2           RETURN;
     2774     4893
     2775     4894
     2776     4895    2   CANDIDATE_LOCATION_FAILED: ;
     2777     4896    2           ALTRETURN;
     2778     4897
     2779     4898    2   END EXAMINE_BLOCK_DESC;
     2780     4899
     2781     4900        %BOX (TITLE=EXAMINE_EVAL, PAGE=YES);
              4908    2
              4912    2   /***************************************************************************
              4914    2    *                                                                         *
              4918    2            *                                EXAMINE_EVAL                             *
              4920    2            *                                                                         *
              4922    2           ***************************************************************************/

     2782     4926
     2783     4927        /*I* NAME: EXAMINE_EVAL
     2784     4928            PARAMETERS:
     2785     4929                EVAL - VD$EVAL to examine.  The EDIT_BLOCK$ for the VD$OPERAND
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:399  
     2786     4930                    to which EVAL belongs must already have been verified to
     2787     4931                    match XLATE_LOCATIONS.FILE_KEY and .PREFIX at levels
     2788     4932                    0 thru (XLATE_LOCATIONS.LEVEL - 1).
     2789     4933            INPUT:
     2790     4934                XLATE_LOCATIONS - Same as for main routine.
     2791     4935                ACTION - Same as for main routine.
     2792     4936            OUTPUT:
     2793     4937                CANDIDATE, XLATE_LOCATIONS - Same as for main routine, based
     2794     4938                    on ACTION.
     2795     4939            DESCRIPTION:
     2796     4940                Process each VD$LOCATION in EVAL.
     2797     4941        */
     2798     4942
     2799     4943    1   EXAMINE_EVAL: PROC (EVAL) ALTRET;
     2800     4944
     2801     4945        %VD$EVAL (NAME=EVAL, STCLASS=PARAM);
     2802     5190
     2803     5191
     2804     5192
     2805     5193    2           CALL CANDIDATE_LOCATION (EVAL.ENCLOSING.START)
     2806     5194    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2807     5195    2           CALL CANDIDATE_LOCATION_END (EVAL.ENCLOSING.ENDD)
     2808     5196    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2809     5197    2           CALL CANDIDATE_LOCATION (EVAL.RANGE.START)
     2810     5198    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2811     5199    2           CALL CANDIDATE_LOCATION_END (EVAL.RANGE.ENDD)
     2812     5200    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2813     5201
     2814     5202    2           RETURN;
     2815     5203
     2816     5204
     2817     5205    2   CANDIDATE_LOCATION_FAILED: ;
     2818     5206    2           ALTRETURN;
     2819     5207
     2820     5208    2   END EXAMINE_EVAL;
     2821     5209
     2822     5210        %BOX (TITLE=CANDIDATE_LOCATION, PAGE=YES);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:400  
              5218    2
              5222    2   /***************************************************************************
              5224    2    *                                                                         *
              5228    2            *                             CANDIDATE_LOCATION                          *
              5230    2            *                                                                         *
              5232    2           ***************************************************************************/

     2823     5236
     2824     5237        /*I* NAME: CANDIDATE_LOCATION
     2825     5238            PARAMETERS:
     2826     5239                CANDIDATE - VD$LOCATION which has already been verified to match
     2827     5240                    XLATE_LOCATIONS.FILE_KEY and .PREFIX at levels 0 thru
     2828     5241                    (XLATE_LOCATIONS.LEVEL - 1).
     2829     5242            INPUT:
     2830     5243                XLATE_LOCATIONS - Same as for main routine.
     2831     5244                ACTION - Same as for main routine.
     2832     5245            OUTPUT:
     2833     5246                CANDIDATE, XLATE_LOCATIONS - Same as for main routine, based on ACTION.
     2834     5247            DESCRIPTION:
     2835     5248                Search XLATE_LOCATIONS.XLATES to see if CANDIDATE matches any entry.
     2836     5249                We assume it matches only one entry.  Then look at ACTION:
     2837     5250                    %XLATE_BUILD - If CANDIDATE matches an entry, just return.
     2838     5251                        If it doesn't, add an entry to .XLATES for CANDIDATE, inserting
     2839     5252                        it into the tables in ascending order sorted by .OLD_KEY_LO.
     2840     5253                    %XLATE_LOCATION - If CANDIDATE doesn't match an entry,
     2841     5254                        just return.  If it does, translate CANDIDATE according
     2842     5255                        to the entry in .XLATES.
     2843     5256        */
     2844     5257
     2845     5258    1   CANDIDATE_LOCATION: PROC (CANDIDATE) ALTRET;
     2846     5259
     2847     5260        %VD$LOCATION (NAME=CANDIDATE, STCLASS=PARAM);
     2848     5288
     2849     5289
     2850     5290    2   DCL CURR_TABLE$ PTR;
     2851     5291    2   DCL PREV_TABLE$ PTR;
     2852     5292    2   DCL CAND_KEY$ PTR;
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:401  
     2853     5293    2   DCL INDX SBIN;
     2854     5294    2   DCL INSERT_BEFORE SBIN;
     2855     5295    2   DCL XLATE_ENTRY$ PTR;
     2856     5296    2   DCL XLATE_KEY_LO$ PTR;
     2857     5297    2   DCL XLATE_KEY_HI$ PTR;
     2858     5298    2   DCL SPLIT_TABLE$ PTR;
     2859     5299    2   DCL VAR_LEN SBIN;
     2860     5300    2   DCL RANGE_END BIT(1);
     2861     5301
     2862     5302
     2863     5303        %VD$XLATE_LOCATIONS (NAME=CURR$TABLE, STCLASS="BASED(CURR_TABLE$)");
     2864     5439        %VD$XLATE_LOCATIONS (NAME=PREV$TABLE, STCLASS="BASED(PREV_TABLE$)");
     2865     5575        %VD$XLATE_ENTRY (NAME=XLATE$ENTRY, STCLASS="BASED(XLATE_ENTRY$)");
     2866     5632        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
     2867     5655        %VD$TEXTC (NAME=XLATE$KEY_LO, STCLASS="BASED(XLATE_KEY_LO$)");
     2868     5678        %VD$TEXTC (NAME=XLATE$KEY_HI, STCLASS="BASED(XLATE_KEY_HI$)");
     2869     5701        %VD$XLATE_LOCATIONS (NAME=SPLIT$TABLE, STCLASS="BASED(SPLIT_TABLE$)");
     2870     5837    2   DCL VAR$LEN CHAR(VAR_LEN) BASED;
     2871     5838
     2872     5839
     2873     5840    2           RANGE_END = SOURCE_STRING_OPERAND;
     2874     5841    2           GOTO BEGIN;
     2875     5842
     2876     5843    2   CANDIDATE_LOCATION_END: ENTRY (CANDIDATE) ALTRET;
     2877     5844
     2878     5845    2           RANGE_END = ~ RANGE_END;
     2879     5846    2   BEGIN:  ;
     2880     5847
     2881     5848    2           IF CANDIDATE.EOF THEN
     2882     5849    2              RETURN;      /* Nothing to XLATE */
     2883     5850    2           PREV_TABLE$ = ADDR(NIL);
     2884     5851    2           CURR_TABLE$ = ADDR(XLATE_LOCATIONS);
     2885     5852    2           INSERT_BEFORE = -1;
     2886     5853                %GETKEY (KEY=CANDIDATE.KEY, INDX=LEVEL-1, PTR=CAND_KEY$);
     2887     5863
     2888     5864    2   EACH_TABLE_IN_CHAIN:
     2889     5865    3           DO WHILE CURR_TABLE$ ~= ADDR(NIL);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:402  
     2890     5866
     2891     5867    3   EACH_XLATE_ENTRY:
     2892     5868    4              DO INDX = 0 TO (CURR$TABLE.N_ENTRIES# - 1);
     2893     5869    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (INDX));
     2894     5870                      %GETKEY (KEY=XLATE$ENTRY.OLD_KEY_LO, PTR=XLATE_KEY_LO$);
     2895     5880                      %GETKEY (KEY=XLATE$ENTRY.OLD_KEY_HI, PTR=XLATE_KEY_HI$);
     2896     5890    4                 IF CAND$KEY.BYTES >= XLATE$KEY_LO.BYTES
     2897     5891    4                   AND CAND$KEY.BYTES <= XLATE$KEY_HI.BYTES THEN
     2898     5892    4                    EXIT EACH_TABLE_IN_CHAIN;
     2899     5893    4                 IF ACTION = %XLATE_BUILD
     2900     5894    5                   AND CAND$KEY.BYTES < XLATE$KEY_LO.BYTES THEN DO;
     2901     5895                         /* Insert new entry before this one */
     2902     5896    5                    INSERT_BEFORE = INDX;
     2903     5897    5                    EXIT EACH_TABLE_IN_CHAIN;
     2904     5898    5                    END;
     2905     5899    4                 END EACH_XLATE_ENTRY;
     2906     5900
     2907     5901    3              PREV_TABLE$ = CURR_TABLE$;
     2908     5902    3              CURR_TABLE$ = CURR$TABLE.FLINK$;
     2909     5903    3              END EACH_TABLE_IN_CHAIN;
     2910     5904
     2911     5905
     2912     5906    3           DO CASE (ACTION);
     2913     5907    3            CASE (%XLATE_BUILD);
     2914     5908    3              IF CURR_TABLE$ ~= ADDR(NIL) AND INSERT_BEFORE < 0 THEN
     2915     5909    3                 RETURN;   /* Found matching entry:  do nothing */
     2916     5910                   /*
     2917     5911                   *  Build new entry for CANDIDATE.
     2918     5912                   *  If CURR_TABLE$ = ADDR(NIL), append the new entry to the end of
     2919     5913                   *    PREV_TABLE$.
     2920     5914                   *  Else insert the new entry in front of
     2921     5915                   *    CURR$TABLE.XLATES (INSERT_BEFORE).
     2922     5916                   */
     2923     5917    4              IF CURR_TABLE$ = ADDR(NIL) THEN DO;
     2924     5918    4                 CURR_TABLE$ = PREV_TABLE$;
     2925     5919    4                 IF CURR_TABLE$ = ADDR(NIL) THEN
     2926     5920    4                    CURR_TABLE$ = ADDR(XLATE_LOCATIONS);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:403  
     2927     5921    4                 IF CURR$TABLE.N_ENTRIES# >=
     2928     5922    5                   (CURR$TABLE.MX_ENTRIES# / 4) * 3 THEN DO;
     2929     5923                         /* CURR table is > 75% occupied:  allocate a new table */
     2930     5924    5                    PREV_TABLE$ = CURR_TABLE$;
     2931     5925    5                    CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, CURR_TABLE$,
     2932     5926    5                      SIZEW(CURR$TABLE) +
     2933     5927    5                      (SIZEW(CURR$TABLE.XLATES) * %N_LOCATION_XLATES))
     2934     5928    5                      ALTRET (OALLOC_FAILED);
     2935     5929    5                    CURR$TABLE.FLINK$ = PREV$TABLE.FLINK$;
     2936     5930    5                    PREV$TABLE.FLINK$ = CURR_TABLE$;
     2937     5931    5                    END;
     2938     5932    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (CURR$TABLE.N_ENTRIES#));
     2939     5933    4                 CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# + 1;
     2940     5934    4                 END;
     2941     5935    4              ELSE DO;
     2942     5936    5                 IF CURR$TABLE.N_ENTRIES# >= CURR$TABLE.MX_ENTRIES# THEN DO;
     2943     5937                         /* Split this table into two tables */
     2944     5938    5                    CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, SPLIT_TABLE$,
     2945     5939    5                      SIZEW(CURR$TABLE) +
     2946     5940    5                      (SIZEW(CURR$TABLE.XLATES) * %N_LOCATION_XLATES))
     2947     5941    5                      ALTRET (OALLOC_FAILED);
     2948     5942    5                    SPLIT$TABLE.FLINK$ = CURR$TABLE.FLINK$;
     2949     5943    5                    CURR$TABLE.FLINK$ = SPLIT_TABLE$;
     2950     5944    5                    SPLIT$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# / 2;
     2951     5945    5                    VAR_LEN = SIZEC(CURR$TABLE.XLATES) * SPLIT$TABLE.N_ENTRIES#;
     2952     5946    5                    ADDR(SPLIT$TABLE.XLATES)->VAR$LEN =
     2953     5947    5                      ADDR(CURR$TABLE.XLATES (INSERT_BEFORE))->VAR$LEN;
     2954     5948    5                    CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# -
     2955     5949    5                      SPLIT$TABLE.N_ENTRIES#;
     2956     5950    6                    IF INSERT_BEFORE > CURR$TABLE.N_ENTRIES# THEN DO;
     2957     5951    6                       INSERT_BEFORE = INSERT_BEFORE - CURR$TABLE.N_ENTRIES#;
     2958     5952    6                       CURR_TABLE$ = CURR$TABLE.FLINK$;
     2959     5953    6                       END;
     2960     5954    5                    END;
     2961     5955                      /* Slide the rest of this table up 1 entry */
     2962     5956    5                 DO INDX = CURR$TABLE.N_ENTRIES# - 1 DOWNTO INSERT_BEFORE;
     2963     5957    5                    CURR$TABLE.XLATES (INDX + 1) = CURR$TABLE.XLATES (INDX);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:404  
     2964     5958    5                    END;
     2965     5959    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (INSERT_BEFORE));
     2966     5960    4                 CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# + 1;
     2967     5961    4                 END;
     2968     5962
     2969     5963                   %COPYKEY (FKEY=CANDIDATE.KEY, FINDX=LEVEL-1,
     2970     5964                   TKEY=XLATE$ENTRY.OLD_KEY_LO);
     2971     5980                   %COPYKEY (FKEY=XLATE$ENTRY.OLD_KEY_LO,
     2972     5981                   TKEY=XLATE$ENTRY.OLD_KEY_HI);
     2973     5997                   %COPYKEY (FKEY=XLATE$ENTRY.OLD_KEY_LO,
     2974     5998                   TKEY=XLATE$ENTRY.NEW_KEY);
     2975     6014    3              XLATE$ENTRY.OLD_POS_HI# = -1; /* Indicate rekey operation */
     2976     6015
     2977     6016
     2978     6017
     2979     6018    3            CASE (%XLATE_LOCATION);
     2980     6019    3              IF CURR_TABLE$ = ADDR(NIL) THEN
     2981     6020    3                 RETURN;   /* No matching entry:  do nothing */
     2982     6021                   /*
     2983     6022                   * Locations before the affected area are unchanged.
     2984     6023                   */
     2985     6024    3              IF CAND$KEY.BYTES = XLATE$KEY_LO.BYTES
     2986     6025    3                AND (CANDIDATE.POSITION# < XLATE$ENTRY.OLD_POS_LO#
     2987     6026                   /*
     2988     6027                   * As are range end points at the point of an insertion.
     2989     6028                   */
     2990     6029    3                OR CANDIDATE.POSITION# = XLATE$ENTRY.OLD_POS_LO#
     2991     6030    3                AND CANDIDATE.POSITION# = XLATE$ENTRY.OLD_POS_HI#
     2992     6031    3                AND CAND$KEY.BYTES = XLATE$KEY_HI.BYTES AND RANGE_END) THEN
     2993     6032    3                 RETURN;  /* Don't do any translation */
     2994     6033                   /*
     2995     6034                   * If we moved the start of a range, make sure we move the
     2996     6035                   * the end using the same rules.
     2997     6036                   */
     2998     6037    3              RANGE_END = '1'B;
     2999     6038
     3000     6039                   /*
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:405  
     3001     6040                   * Interior locations should all collapse to the new location.
     3002     6041                   */
     3003     6042    3              IF CAND$KEY.BYTES < XLATE$KEY_HI.BYTES THEN
     3004     6043    3                 CANDIDATE.POSITION# = 0;
     3005     6044                   %CLEARKEY (KEY=CANDIDATE.KEY, INDX=LEVEL-1);
     3006     6054                   %COPYKEY (FKEY=XLATE$ENTRY.NEW_KEY, TKEY=CANDIDATE.KEY,
     3007     6055                   TINDX=LEVEL-1);
     3008     6071
     3009     6072    3              IF CANDIDATE.POSITION# <= XLATE$ENTRY.OLD_POS_HI# THEN
     3010     6073    3                 CANDIDATE.POSITION# = XLATE$ENTRY.NEW_POS#;
     3011     6074    3              ELSE
     3012     6075    3                 CANDIDATE.POSITION# = CANDIDATE.POSITION# +
     3013     6076    3                   XLATE$ENTRY.NEW_POS_INCR#;
     3014     6077
     3015     6078
     3016     6079
     3017     6080    3            CASE (ELSE);
     3018     6081    3              CALL VDG$ESCREECH (ACTION);
     3019     6082    3            END;
     3020     6083
     3021     6084
     3022     6085    2           RETURN;
     3023     6086
     3024     6087
     3025     6088
     3026     6089    2   OALLOC_FAILED: ;
     3027     6090    2           ALTRETURN;
     3028     6091
     3029     6092    2   END CANDIDATE_LOCATION;
     3030     6093
     3031     6094    1   END VDG$XLATE_LOCATIONS;

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:406  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$XLATE_LOCATIONS.

   Procedure VDG$XLATE_LOCATIONS requires 842 words for executable code.
   Procedure VDG$XLATE_LOCATIONS requires 48 words of local(AUTO) storage.

    No errors detected in file VDG$UTILITY.:VDA5TSI    .

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:407  

 Object Unit name= VDG$XLATE_LOCATIONS                        File name= VDG$UTILITY.:VDA5TOU
 UTS= JUL 04 '97 11:25:11.92 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     11     13  VDG$XLATE_LOCATIONS
    1   Proc  even  none   842   1512  VDG$XLATE_LOCATIONS
    2  RoData even  none    12     14  VDG$XLATE_LOCATIONS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  VDG$XLATE_LOCATIONS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VDA$LREAD
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       1 VDG$OFREE
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:408  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:409  


     2363        1        /*T***********************************************************/
     2364        2        /*T*                                                         */
     2365        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2366        4        /*T*                                                         */
     2367        5        /*T***********************************************************/
     2368        6
     2369        7        /*D* NAME: VDG$XLATE_LOCATIONS
     2370        8            PARAMETERS:
     2371        9                XLATE_LOCATIONS - Root VD$XLATE_LOCATIONS specifying the
     2372       10                    translations to build or make.  XLATE_LOCATIONS may be the
     2373       11                    "root" or first entry in a .FLINK$d chain of VD$XLATE_LOCATIONS.
     2374       12                    XLATE_LOCATIONS (first entry in chain) must contain:
     2375       13                        .FLINK$, .N_ENTRIES, .MX_ENTRIES - As documented.
     2376       14                        .FILE_KEY - Fid of file whose locations are locations are
     2377       15                            to be translated.
     2378       16                        .PREFIX - Keys at levels 1 thru .LEVEL specifying which
     2379       17                            locations are to be translated.
     2380       18                        .LEVEL - Level of file structure at which translation
     2381       19                            is to occur.
     2382       20                    In successive VD$XLATE_LOCATIONS in the chain, only
     2383       21                    .FLINK$, .N_ENTRIES, .MX_ENTRIES, and .XLATES must appear.
     2384       22                    If ACTION = %XLATE_LOCATION, then XLATE_LOCATIONS.XLATES
     2385       23                        must specify the translations to perform.
     2386       24                    If ACTION = %XLATE_BUILD, then XLATE_LOCATIONS.N_ENTRIES
     2387       25                        must be 0.  (.MX_ENTRIES should be some reasonable number.)
     2388       26                        Also, there should be no other VD$XLATE_LOCATIONSs in the
     2389       27                        chain.
     2390       28                ACTION - An %XLATE_ def, specifying what action to take with
     2391       29                    each location found which matches the XLATE_LOCATIONS.FILE_KEY
     2392       30                    and .PREFIX.
     2393       31            INPUT:
     2394       32                VD_6E.LOCATIONS$ - Ptr to VD$STREAM open to the Locations
     2395       33                    internal file.
     2396       34                VD_6E.WINDOWS$ - Ptr to VD$STREAM open to the Windows internal
     2397       35                    file.
     2398       36                VD_6E.SOURCE.OPERAND - VD$OPERAND for the source operand.
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:410  
     2399       37            OUTPUT:
     2400       38                If ACTION = %XLATE_BUILD:
     2401       39                    XLATE_LOCATIONS will have .XLATES added for each VD$LOCATION
     2402       40                        in the Locations and Windows files and the source operand
     2403       41                        which matches the specified file key and prefix.
     2404       42                        The added .XLATES will be sorted in .OLD_KEY_LO order.
     2405       43                        They will have:
     2406       44                            .OLD_KEY_LO - Key from the candidate VD$LOCATION
     2407       45                                at level XLATE_LOCATIONS.LEVEL.
     2408       46                            .OLD_KEY_HI - Same key as in .OLD_KEY_LO.
     2409       47                            .OLD_POS_LO - 0.
     2410       48                            .OLD_POS_HI - %MXNB_DATA.
     2411       49                            .NEW_KEY, .NEW_POS, .NEW_POS_INCR - %CLEAR.
     2412       50                If ACTION = %XLATE_LOCATION:
     2413       51                    Each VD$LOCATIONS in the Locations and Windows files and
     2414       52                        the source operand will be translated according to
     2415       53                        XLATE_LOCATIONS.XLATES.
     2416       54            DESCRIPTION:
     2417       55                First, position the Locations-file to EOF.  We do this so that
     2418       56                    if we do "xlate" a Location-name's value, we can be sure
     2419       57                    there aren't any other copies of that name's value lying
     2420       58                    around anywhere (like in PORT.LEVEL.DATA$).  Positioning
     2421       59                    to EOF will force the VD$PORT to be cleared.
     2422       60                    (Test case:
     2423       61                        LO L IS 3 PO 10
     2424       62                        DE 3
     2425       63                        L           "Should put cursor at BO 4
     2426       64                    .)
     2427       65
     2428       66                Examine the source operand, and walk the Locations and Windows files,
     2429       67                looking for VD$LOCATIONs which fit the criteria specified
     2430       68                by XLATE_LOCATIONS.FILE_KEY and .PREFIX.
     2431       69                In each VD$WINDOW_SPEC.OPERAND and in VD_6E.SOURCE.OPERAND,
     2432       70                the following VD$LOCATIONs are examined:
     2433       71                    .EDIT_BLOCK$->VD$BLOCK_DESC.RANGE.START and .ENDD
     2434       72                    .EVAL$->VD$EVAL.ENCLOSING.START and .ENDD
     2435       73                    .EVAL$->VD$EVAL.RANGE.START and .ENDD
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:411  
     2436       74                    .EVAL$->VD$EVAL.BLINK$->VD$EVAL.ENCLOSING and .RANGE, ad infinitum
     2437       75                In VD$WINDOW_BLOCK, the following VD$LOCATIONs are examined:
     2438       76                    .EDIT_BLOCK$->VD$BLOCK_DESC.RANGE.START and .ENDD
     2439       77                    .EVAL$->VD$EVAL.ENCLOSING.START and .ENDD
     2440       78                    .EVAL$->VD$EVAL.RANGE.START and .ENDD
     2441       79                    .EVAL$->VD$EVAL.BLINK$->VD$EVAL.ENCLOSING and .RANGE, ad infinitum
     2442       80                The Data components of entries in the Locations file are
     2443       81                either VD$BLOCK_BUFFERs containing VD$BLOCK_DESCs or VD$POINTERs
     2444       82                pointing to VD$BLOCK_DESCs.  In these VD$BLOCK_DESCs, the
     2445       83                following VD$LOCATIONs are examined:
     2446       84                    .RANGE.START
     2447       85                    .RANGE.ENDD
     2448       86
     2449       87                When examining a VD$LOCATION:
     2450       88                    If the file key for the location matches XLATE_LOCATIONS.FILE_KEY,
     2451       89                    and all keys at levels 1 thru XLATE_LOCATIONS.LEVEL match
     2452       90                    XLATE_LOCATIONS.PREFIX, then this is a "candidate":
     2453       91                        Search for a matching entry in XLATE_LOCATIONS.XLATES
     2454       92                            for this candidate:  candidate key between .OLD_KEY_LO
     2455       93                            and .OLD_KEY_HI, candidate position >= .OLD_POS_LO.
     2456       94                        If ACTION = %XLATE_BUILD:
     2457       95                            If we don't find a matching entry, build a new entry for
     2458       96                            the candidate location, inserting into the xlate tables in
     2459       97                            ascending order sorted by .OLD_KEY_LO.
     2460       98                        If ACTION = %XLATE_LOCATION:
     2461       99                            If we do find a matching entry, translate the
     2462      100                            candidate location according to the entry.
     2463      101        */
     2464      102
     2465      103        VDG$XLATE_LOCATIONS: PROC (XLATE_LOCATIONS, ACTION) ALTRET;

    103  1 000000   000000 700200 xent  VDG$XLATE_L* TSX0  ! X66_AUTO_2
         1 000001   000060 000002                    ZERO    48,2

     2466      104
     2467      105        %INCLUDE VD_MACROS_M;
     2468     2320
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:412  
     2469     2321
     2470     2322        %VD$XLATE_LOCATIONS (NAME=XLATE_LOCATIONS, STCLASS=PARAM);
     2471     2458    1   DCL ACTION SBIN;
     2472     2459
     2473     2460
     2474     2461    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     2475     2462    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2476     2463    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2477     2464    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2478     2465    1   DCL VDG$ESCREECH        ENTRY (3);
     2479     2466
     2480     2467
     2481     2468        %VD_6E (STCLASS=SYMREF);
     2482     2504
     2483     2505
     2484     2506        %VD_LOCATION (NAME=ABSOLUTE_EOF, STCLASS=CONSTANT, IEOF=%TRUE);
     2485     2546
     2486     2547
     2487     2548    1   DCL PREFIX_KEY$ (0:%MX_ACCESS_LEVELS) PTR;
     2488     2549    1   DCL LEVEL SBIN;
     2489     2550    1   DCL L0_NODE$ PTR;
     2490     2551    1   DCL L1_NODE$ PTR;
     2491     2552    1   DCL L2_NODE$ PTR;
     2492     2553    1   DCL NAME_DATA$ PTR;
     2493     2554    1   DCL NAME_DESC$ PTR;
     2494     2555    1   DCL WINDOW_SPEC$ PTR;
     2495     2556    1   DCL WINDOW_BLOCK$ PTR;
     2496     2557    1   DCL THIS_EVAL$ PTR;
     2497     2558    1   DCL BLOCK_IS_CANDIDATE BIT(1) ALIGNED;
     2498     2559    1   DCL SOURCE_STRING_OPERAND BIT(1) ALIGNED;
     2499     2560
     2500     2561
     2501     2562        %VD$FILE_NODE (NAME=L0$NODE, STCLASS="BASED(L0_NODE$)");
     2502     2655        %VD$FILE_NODE (NAME=L1$NODE, STCLASS="BASED(L1_NODE$)");
     2503     2748        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
     2504     2841        %VD$OBJECT_HEADER (NAME=NAME$DATA, STCLASS="BASED(NAME_DATA$)");
     2505     2863        %VD$POINTER (NAME=NAME$DATA_POINTER, STCLASS="BASED(NAME_DATA$)");
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:413  
     2506     2908        %VD$BUFFER (NAME=NAME$DATA_BUFFER, STCLASS="BASED(NAME_DATA$)");
     2507     2966        %VD$BLOCK_DESC (NAME=NAME$DESC, STCLASS="BASED(NAME_DESC$)");
     2508     3113        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     2509     3179        %VD$WINDOW_BLOCK (NAME=WINDOW$BLOCK, STCLASS="BASED(WINDOW_BLOCK$)");
     2510     3216        %VD$EVAL (NAME=THIS$EVAL, STCLASS="BASED(THIS_EVAL$)");
     2511     3461        %VD$STREAM;
     2512     3567        %VD$PORT;
     2513     3665        %VD$BLOCK_DESC;
     2514     3812        %VD$TEXTC;
     2515     3835        %VD$TEXTC_REMOTE;
     2516     3896
     2517     3897
     2518     3898
     2519     3899    1           IF ACTION = %XLATE_LOCATION

   3899  1 000002   200004 470500                    LDP0    @ACTION,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   000002 115007                    CMPA    2,DL
         1 000005   000012 601000 1                  TNZ     s:3903
         1 000006   200003 471500                    LDP1    @XLATE_LOCATIONS,,AUTO
         1 000007   100001 220100                    LDX0    1,,PR1
         1 000010   000012 605400 1                  TPNZ    s:3903

     2520     3900    1             AND XLATE_LOCATIONS.N_ENTRIES# <= 0 THEN
     2521     3901    1              RETURN;

   3901  1 000011   000000 702200 xent               TSX2  ! X66_ARET

     2522     3902
     2523     3903    1           CALL VDA$LREAD (VD_6E.LOCATIONS$->VD$STREAM, ABSOLUTE_EOF,

   3903  1 000012   000000 237000 2                  LDAQ    0
         1 000013   200056 757100                    STAQ    RANGE_END+4,,AUTO
         1 000014   000002 236000 2                  LDQ     2
         1 000015   000002 235000 xsym               LDA     VD_6E+2
         1 000016   200054 757100                    STAQ    RANGE_END+2,,AUTO
         1 000017   200054 630500                    EPPR0   RANGE_END+2,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:414  
         1 000020   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000021   000000 701000 xent               TSX1    VDA$LREAD
         1 000022   000315 702000 1                  TSX2    LREAD_FAILED

     2524     3904    1             0, %FALSE)
     2525     3905    1             ALTRET (LREAD_FAILED);
     2526     3906
     2527     3907                %GETKEY (KEY=XLATE_LOCATIONS.FILE_KEY,
     2528     3908                PTR="PREFIX_KEY$ (%LVL_FILE)");

   3915  1 000023   200003 470500                    LDP0    @XLATE_LOCATIONS,,AUTO
         1 000024   000003 720100                    LXL0    3,,PR0
         1 000025   000002 100003                    CMPX0   2,DU
         1 000026   000033 601000 1                  TNZ     s:3915+8

   3915  1 000027   000004 471500                    LDP1    4,,PR0
         1 000030   100002 633500                    EPPR3   2,,PR1
         1 000031   200005 453500                    STP3    PREFIX_KEY$,,AUTO
         1 000032   000036 710000 1                  TRA     s:3918

   3915  1 000033   200003 236100                    LDQ     @XLATE_LOCATIONS,,AUTO
         1 000034   000004 036003                    ADLQ    4,DU
         1 000035   200005 756100                    STQ     PREFIX_KEY$,,AUTO

     2529     3918    2           DO LEVEL = 1 TO (XLATE_LOCATIONS.LEVEL# - 1);

   3918  1 000036   000001 235007                    LDA     1,DL
         1 000037   200013 755100                    STA     LEVEL,,AUTO
         1 000040   000063 710000 1                  TRA     s:3930+1

     2530     3919                   %GETKEY (KEY=XLATE_LOCATIONS.PREFIX.KEY, INDX=LEVEL-1,
     2531     3920                   PTR="PREFIX_KEY$ (LEVEL)");

   3927  1 000041   200013 235100                    LDA     LEVEL,,AUTO
         1 000042   000001 735000                    ALS     1
         1 000043   200003 470500                    LDP0    @XLATE_LOCATIONS,,AUTO
         1 000044   000004 720105                    LXL0    4,AL,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:415  
         1 000045   000002 100003                    CMPX0   2,DU
         1 000046   000054 601000 1                  TNZ     s:3927+11

   3927  1 000047   000005 471505                    LDP1    5,AL,PR0
         1 000050   100002 633500                    EPPR3   2,,PR1
         1 000051   200013 721100                    LXL1    LEVEL,,AUTO
         1 000052   200005 453511                    STP3    PREFIX_KEY$,X1,AUTO
         1 000053   000062 710000 1                  TRA     s:3930

   3927  1 000054   200013 236100                    LDQ     LEVEL,,AUTO
         1 000055   000023 736000                    QLS     19
         1 000056   000005 036003                    ADLQ    5,DU
         1 000057   200003 036100                    ADLQ    @XLATE_LOCATIONS,,AUTO
         1 000060   200013 721100                    LXL1    LEVEL,,AUTO
         1 000061   200005 756111                    STQ     PREFIX_KEY$,X1,AUTO

     2532     3930    2              END;

   3930  1 000062   200013 054100                    AOS     LEVEL,,AUTO
         1 000063   000005 236100                    LDQ     5,,PR0
         1 000064   000022 732000                    QRS     18
         1 000065   200013 116100                    CMPQ    LEVEL,,AUTO
         1 000066   000041 605400 1                  TPNZ    s:3927

     2533     3931
     2534     3932    1           CALL EXAMINE_OPERAND (VD_6E.SOURCE.OPERAND)

   3932  1 000067   000003 236000 2                  LDQ     3
         1 000070   200027 756100                    STQ     SOURCE_STRING_OPERAND+2,,AUTO
         1 000071   000316 701000 1                  TSX1    EXAMINE_OPERAND
         1 000072   000315 702000 1                  TSX2    LREAD_FAILED

     2535     3933    1             ALTRET (EXAMINE_OPERAND_FAILED);
     2536     3934
     2537     3935    1           L0_NODE$ = VD_6E.LOCATIONS$->VD$STREAM.PORT$ ->

   3935  1 000073   000002 470400 xsym               LDP0    VD_6E+2
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:416  
         1 000074   000001 471500                    LDP1    1,,PR0
         1 000075   100031 236100                    LDQ     25,,PR1
         1 000076   200014 756100                    STQ     L0_NODE$,,AUTO

     2538     3936    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     2539     3937    1           L1_NODE$ = ADDR(NIL);

   3937  1 000077   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000100   200015 756100                    STQ     L1_NODE$,,AUTO

     2540     3938    1           IF L0_NODE$ ~= ADDR(NIL) THEN

   3938  1 000101   200014 236100                    LDQ     L0_NODE$,,AUTO
         1 000102   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000103   000107 600000 1                  TZE     EACH_LOCATIONS_NODE

     2541     3939    1              L1_NODE$ = L0$NODE.HEAD$;

   3939  1 000104   200014 473500                    LDP3    L0_NODE$,,AUTO
         1 000105   300012 236100                    LDQ     10,,PR3
         1 000106   200015 756100                    STQ     L1_NODE$,,AUTO

     2542     3940
     2543     3941    1   EACH_LOCATIONS_NODE:
     2544     3942    2           DO WHILE L1_NODE$ ~= ADDR(NIL);

   3942  1 000107   000210 710000 1     EACH_LOCATI* TRA     s:3959

     2545     3943    2              NAME_DATA$ = L1$NODE.DESC.DATA$;

   3943  1 000110   200015 470500                    LDP0    L1_NODE$,,AUTO
         1 000111   000010 236100                    LDQ     8,,PR0
         1 000112   200017 756100                    STQ     NAME_DATA$,,AUTO

     2546     3944    3              IF NAME_DATA$ ~= ADDR(NIL) THEN DO;

   3944  1 000113   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:417  
         1 000114   000205 600000 1                  TZE     s:3958

     2547     3945    4                 DO CASE (NAME$DATA.CLASS#);

   3945  1 000115   200017 471500                    LDP1    NAME_DATA$,,AUTO
         1 000116   100000 220100                    LDX0    0,,PR1
         1 000117   000041 100003                    CMPX0   33,DU
         1 000120   000122 602010 1                  TNC     s:3945+5,X0
         1 000121   000173 710000 1                  TRA     s:3951
         1 000122   000173 710000 1                  TRA     s:3951
         1 000123   000166 710000 1                  TRA     s:3949
         1 000124   000173 710000 1                  TRA     s:3951
         1 000125   000173 710000 1                  TRA     s:3951
         1 000126   000173 710000 1                  TRA     s:3951
         1 000127   000173 710000 1                  TRA     s:3951
         1 000130   000173 710000 1                  TRA     s:3951
         1 000131   000173 710000 1                  TRA     s:3951
         1 000132   000173 710000 1                  TRA     s:3951
         1 000133   000173 710000 1                  TRA     s:3951
         1 000134   000173 710000 1                  TRA     s:3951
         1 000135   000173 710000 1                  TRA     s:3951
         1 000136   000173 710000 1                  TRA     s:3951
         1 000137   000173 710000 1                  TRA     s:3951
         1 000140   000173 710000 1                  TRA     s:3951
         1 000141   000173 710000 1                  TRA     s:3951
         1 000142   000173 710000 1                  TRA     s:3951
         1 000143   000173 710000 1                  TRA     s:3951
         1 000144   000173 710000 1                  TRA     s:3951
         1 000145   000173 710000 1                  TRA     s:3951
         1 000146   000173 710000 1                  TRA     s:3951
         1 000147   000173 710000 1                  TRA     s:3951
         1 000150   000173 710000 1                  TRA     s:3951
         1 000151   000173 710000 1                  TRA     s:3951
         1 000152   000173 710000 1                  TRA     s:3951
         1 000153   000173 710000 1                  TRA     s:3951
         1 000154   000173 710000 1                  TRA     s:3951
         1 000155   000173 710000 1                  TRA     s:3951
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:418  
         1 000156   000173 710000 1                  TRA     s:3951
         1 000157   000173 710000 1                  TRA     s:3951
         1 000160   000173 710000 1                  TRA     s:3951
         1 000161   000173 710000 1                  TRA     s:3951
         1 000162   000163 710000 1                  TRA     s:3947

     2548     3946    4                  CASE (%CLS_PTR_BLOCK_DESC);

     2549     3947    4                    NAME_DESC$ = NAME$DATA_POINTER.V$;

   3947  1 000163   100003 236100                    LDQ     3,,PR1
         1 000164   200020 756100                    STQ     NAME_DESC$,,AUTO
         1 000165   000177 710000 1                  TRA     s:3953

     2550     3948    4                  CASE (%CLS_BLOCK_BUFFER);

     2551     3949    4                    NAME_DESC$ = PALIGNW(ADDR(NAME$DATA_BUFFER.BYTES));

   3949  1 000166   000004 036000 2                  ADLQ    4
         1 000167   770000 036007                    ADLQ    -4096,DL
         1 000170   000005 376000 2                  ANQ     5
         1 000171   200020 756100                    STQ     NAME_DESC$,,AUTO
         1 000172   000177 710000 1                  TRA     s:3953

     2552     3950    4                  CASE (ELSE);

     2553     3951    4                    CALL VDG$ESCREECH (NAME$DATA.CLASS#);

   3951  1 000173   200017 630500                    EPPR0   NAME_DATA$,,AUTO
         1 000174   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000175   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000176   000000 011000                    NOP     0

     2554     3952    4                  END;

     2555     3953    4                 IF NAME_DESC$ ~= ADDR(NIL) THEN DO;

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:419  
   3953  1 000177   200020 236100                    LDQ     NAME_DESC$,,AUTO
         1 000200   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000201   000205 600000 1                  TZE     s:3958

     2556     3954    4                    CALL EXAMINE_BLOCK_DESC (NAME$DESC)

   3954  1 000202   200033 756100                    STQ     THIS_EVAL$+2,,AUTO
         1 000203   000422 701000 1                  TSX1    EXAMINE_BLOCK_DESC
         1 000204   000315 702000 1                  TSX2    LREAD_FAILED

     2557     3955    4                      ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2558     3956    4                    END;

     2559     3957    3                 END;

     2560     3958    2              L1_NODE$ = L1$NODE.FLINK$;

   3958  1 000205   200015 470500                    LDP0    L1_NODE$,,AUTO
         1 000206   000002 236100                    LDQ     2,,PR0
         1 000207   200015 756100                    STQ     L1_NODE$,,AUTO

     2561     3959    2              END EACH_LOCATIONS_NODE;

   3959  1 000210   200015 236100                    LDQ     L1_NODE$,,AUTO
         1 000211   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000212   000110 601000 1                  TNZ     s:3943

     2562     3960
     2563     3961
     2564     3962    1           L0_NODE$ = VD_6E.WINDOWS$->VD$STREAM.PORT$ ->

   3962  1 000213   000006 470400 xsym               LDP0    VD_6E+6
         1 000214   000001 471500                    LDP1    1,,PR0
         1 000215   100031 236100                    LDQ     25,,PR1
         1 000216   200014 756100                    STQ     L0_NODE$,,AUTO

     2565     3963    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:420  
     2566     3964    1           L1_NODE$ = ADDR(NIL);

   3964  1 000217   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000220   200015 756100                    STQ     L1_NODE$,,AUTO

     2567     3965    1           IF L0_NODE$ ~= ADDR(NIL) THEN

   3965  1 000221   200014 236100                    LDQ     L0_NODE$,,AUTO
         1 000222   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000223   000227 600000 1                  TZE     EACH_WINDOWS_L1_NODE

     2568     3966    1              L1_NODE$ = L0$NODE.HEAD$;

   3966  1 000224   200014 473500                    LDP3    L0_NODE$,,AUTO
         1 000225   300012 236100                    LDQ     10,,PR3
         1 000226   200015 756100                    STQ     L1_NODE$,,AUTO

     2569     3967
     2570     3968    1   EACH_WINDOWS_L1_NODE:
     2571     3969    2           DO WHILE L1_NODE$ ~= ADDR(NIL);

   3969  1 000227   000311 710000 1     EACH_WINDOW* TRA     s:3999

     2572     3970    2              WINDOW_SPEC$ = L1$NODE.DESC.SPEC.V$;

   3970  1 000230   200015 470500                    LDP0    L1_NODE$,,AUTO
         1 000231   000007 236100                    LDQ     7,,PR0
         1 000232   200021 756100                    STQ     WINDOW_SPEC$,,AUTO

     2573     3971    3              IF WINDOW_SPEC$ ~= ADDR(NIL) THEN DO;

   3971  1 000233   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000234   000241 600000 1                  TZE     s:3976

     2574     3972    3                 CALL EXAMINE_OPERAND (WINDOW$SPEC.OPERAND)

   3972  1 000235   000010 036003                    ADLQ    8,DU
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:421  
         1 000236   200027 756100                    STQ     SOURCE_STRING_OPERAND+2,,AUTO
         1 000237   000316 701000 1                  TSX1    EXAMINE_OPERAND
         1 000240   000315 702000 1                  TSX2    LREAD_FAILED

     2575     3973    3                   ALTRET (EXAMINE_OPERAND_FAILED);
     2576     3974    3                 END;

     2577     3975
     2578     3976    2              L2_NODE$ = L1$NODE.HEAD$;

   3976  1 000241   200015 470500                    LDP0    L1_NODE$,,AUTO
         1 000242   000012 236100                    LDQ     10,,PR0
         1 000243   200016 756100                    STQ     L2_NODE$,,AUTO

     2579     3977    2   EACH_WINDOWS_L2_NODE:
     2580     3978    3              DO WHILE L2_NODE$ ~= ADDR(NIL);

   3978  1 000244   000304 710000 1     EACH_WINDOW* TRA     s:3996

     2581     3979    3                 WINDOW_BLOCK$ = L2$NODE.DESC.SPEC.V$;

   3979  1 000245   200016 470500                    LDP0    L2_NODE$,,AUTO
         1 000246   000007 236100                    LDQ     7,,PR0
         1 000247   200022 756100                    STQ     WINDOW_BLOCK$,,AUTO

     2582     3980    3                 IF WINDOW_BLOCK$ ~= ADDR(NIL) THEN

   3980  1 000250   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000251   000301 600000 1                  TZE     s:3995

     2583     3981    4                    IF WINDOW$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   3981  1 000252   200022 471500                    LDP1    WINDOW_BLOCK$,,AUTO
         1 000253   100003 236100                    LDQ     3,,PR1
         1 000254   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000255   000301 600000 1                  TZE     s:3995

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:422  
     2584     3982    4                       CALL EXAMINE_BLOCK_DESC (WINDOW$BLOCK.EDIT_BLOCK$ ->

   3982  1 000256   100003 473500                    LDP3    3,,PR1
         1 000257   200033 453500                    STP3    THIS_EVAL$+2,,AUTO
         1 000260   000422 701000 1                  TSX1    EXAMINE_BLOCK_DESC
         1 000261   000315 702000 1                  TSX2    LREAD_FAILED

     2585     3983    4                         VD$BLOCK_DESC)
     2586     3984    4                         ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2587     3985
     2588     3986    4                       THIS_EVAL$ = WINDOW$BLOCK.EVAL$;

   3986  1 000262   200022 470500                    LDP0    WINDOW_BLOCK$,,AUTO
         1 000263   000004 236100                    LDQ     4,,PR0
         1 000264   200023 756100                    STQ     THIS_EVAL$,,AUTO

     2589     3987    4                       IF BLOCK_IS_CANDIDATE THEN

   3987  1 000265   200024 234100                    SZN     BLOCK_IS_CANDIDATE,,AUTO
         1 000266   000301 605000 1                  TPL     s:3995

     2590     3988    5                       DO WHILE THIS_EVAL$ ~= ADDR(NIL);

   3988  1 000267   000277 710000 1                  TRA     s:3992

     2591     3989    5                          CALL EXAMINE_EVAL (THIS$EVAL)

   3989  1 000270   200023 236100                    LDQ     THIS_EVAL$,,AUTO
         1 000271   200033 756100                    STQ     THIS_EVAL$+2,,AUTO
         1 000272   000566 701000 1                  TSX1    EXAMINE_EVAL
         1 000273   000315 702000 1                  TSX2    LREAD_FAILED

     2592     3990    5                            ALTRET (EXAMINE_EVAL_FAILED);
     2593     3991    5                          THIS_EVAL$ = THIS$EVAL.BLINK$;

   3991  1 000274   200023 470500                    LDP0    THIS_EVAL$,,AUTO
         1 000275   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:423  
         1 000276   200023 756100                    STQ     THIS_EVAL$,,AUTO

     2594     3992    5                          END;

   3992  1 000277   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000300   000270 601000 1                  TNZ     s:3989

     2595     3993    4                       END;

     2596     3994
     2597     3995    3                 L2_NODE$ = L2$NODE.FLINK$;

   3995  1 000301   200016 470500                    LDP0    L2_NODE$,,AUTO
         1 000302   000002 236100                    LDQ     2,,PR0
         1 000303   200016 756100                    STQ     L2_NODE$,,AUTO

     2598     3996    3                 END EACH_WINDOWS_L2_NODE;

   3996  1 000304   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000305   000245 601000 1                  TNZ     s:3979

     2599     3997
     2600     3998    2              L1_NODE$ = L1$NODE.FLINK$;

   3998  1 000306   200015 470500                    LDP0    L1_NODE$,,AUTO
         1 000307   000002 236100                    LDQ     2,,PR0
         1 000310   200015 756100                    STQ     L1_NODE$,,AUTO

     2601     3999    2              END EACH_WINDOWS_L1_NODE;

   3999  1 000311   200015 236100                    LDQ     L1_NODE$,,AUTO
         1 000312   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000313   000230 601000 1                  TNZ     s:3970

     2602     4000
     2603     4001    1           RETURN;

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:424  
   4001  1 000314   000000 702200 xent               TSX2  ! X66_ARET

   3992  1 000315                       LREAD_FAILED null
   3992  1 000315                       EXAMINE_OPE* null
   3992  1 000315                       EXAMINE_BLO* null
   3992  1 000315                       EXAMINE_EVA* null
     2604     4002
     2605     4003
     2606     4004
     2607     4005    1   LREAD_FAILED: ;
     2608     4006    1   EXAMINE_OPERAND_FAILED: ;
     2609     4007    1   EXAMINE_BLOCK_DESC_FAILED: ;
     2610     4008    1   EXAMINE_EVAL_FAILED: ;
     2611     4009    1           ALTRETURN;

   4009  1 000315   000000 702200 xent               TSX2  ! X66_AALT

     2612     4010
     2613     4011        %BOX (TITLE=EXAMINE_OPERAND, PAGE=YES);
              4019    1
              4023    1   /***************************************************************************
              4025    1    *                                                                         *
              4029    1            *                              EXAMINE_OPERAND                           *
              4031    1            *                                                                        *
              4033    1          ***************************************************************************/

     2614     4037
     2615     4038        /*I* NAME: EXAMINE_OPERAND
     2616     4039            PARAMETERS:
     2617     4040                OPERAND - VD$OPERAND to examine, looking for candidate locations.
     2618     4041            INPUT:
     2619     4042                XLATE_LOCATIONS - Same as main routine.
     2620     4043                ACTION - Same as main routine.
     2621     4044                PREFIX_KEY$ - Array of ptrs to VD$TEXTCs for prefix keys at
     2622     4045                    levels 0 thru (XLATE_LOCATIONS.LEVEL-1).
     2623     4046            OUTPUT:
     2624     4047                Same as main routine, but just for OPERAND's VD$LOCATIONS.
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:425  
     2625     4048            DESCRIPTION:
     2626     4049                Examine each of the VD$LOCATIONs in OPERAND.
     2627     4050        */
     2628     4051
     2629     4052    1   EXAMINE_OPERAND: PROC (OPERAND) ALTRET;

   4052  1 000316   200026 741300       EXAMINE_OPE* STX1  ! SOURCE_STRING_OPERAND+1,,AUTO

     2630     4053
     2631     4054        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     2632     4068        %VD$WILD_STRINGS (STCLASS="BASED(VD_6E.WILD_STRINGS$)");
     2633     4183        %VD$WILD_STRINGS (NAME=WILD, STCLASS="BASED(THIS_WILD$)");
     2634     4298
     2635     4299
     2636     4300
     2637     4301    2   DCL THIS_WILD$ PTR;
     2638     4302    2   DCL THIS_EVAL$ PTR;
     2639     4303
     2640     4304
     2641     4305        %VD$EVAL (NAME=THIS$EVAL, STCLASS="BASED(THIS_EVAL$)");
     2642     4550
     2643     4551
     2644     4552    2           SOURCE_STRING_OPERAND = '0'B;

   4552  1 000317   200025 450100                    STZ     SOURCE_STRING_OPERAND,,AUTO

     2645     4553    3           IF OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   4553  1 000320   200027 470500                    LDP0    @OPERAND,,AUTO
         1 000321   000002 236100                    LDQ     2,,PR0
         1 000322   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000323   000416 600000 1                  TZE     s:4600

     2646     4554    3              CALL EXAMINE_BLOCK_DESC (OPERAND.EDIT_BLOCK$ -> VD$BLOCK_DESC)

   4554  1 000324   000002 471500                    LDP1    2,,PR0
         1 000325   200033 451500                    STP1    THIS_EVAL$+2,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:426  
         1 000326   000422 701000 1                  TSX1    EXAMINE_BLOCK_DESC
         1 000327   000420 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2647     4555    3                ALTRET (EXAMINE_BLOCK_DESC_FAILED);
     2648     4556
     2649     4557    3              IF NOT BLOCK_IS_CANDIDATE THEN EXIT;

   4557  1 000330   200024 234100                    SZN     BLOCK_IS_CANDIDATE,,AUTO
         1 000331   000416 605000 1                  TPL     s:4600

     2650     4558    3              IF ADDR(OPERAND) = ADDR(VD_6E.SOURCE.OPERAND)

   4558  1 000332   000003 236000 2                  LDQ     3
         1 000333   200027 116100                    CMPQ    @OPERAND,,AUTO
         1 000334   000344 601000 1                  TNZ     s:4567
         1 000335   200027 470500                    LDP0    @OPERAND,,AUTO
         1 000336   000002 471500                    LDP1    2,,PR0
         1 000337   100025 236100                    LDQ     21,,PR1
         1 000340   000012 116000 xsym               CMPQ    VD_6E+10
         1 000341   000344 601000 1                  TNZ     s:4567

     2651     4559    3                AND OPERAND.EDIT_BLOCK$ -> VD$BLOCK_DESC.OPTIONS.STRUCTURE$ =
     2652     4560    3                VD_6E.STRUCTURE_SCRATCH$ THEN SOURCE_STRING_OPERAND = '1'B;

   4560  1 000342   400000 236003                    LDQ     -131072,DU
         1 000343   200025 756100                    STQ     SOURCE_STRING_OPERAND,,AUTO

     2653     4561
     2654     4562                   /*
     2655     4563                   *   This must be inserting or deleting the wildcard matches
     2656     4564                   *   for a literal string.  Adjust EVAL backwards.
     2657     4565                   */
     2658     4566
     2659     4567    3              THIS_EVAL$ = OPERAND.EVAL$;

   4567  1 000344   200027 470500                    LDP0    @OPERAND,,AUTO
         1 000345   000003 236100                    LDQ     3,,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:427  
         1 000346   200031 756100                    STQ     THIS_EVAL$,,AUTO

     2660     4568    4              DO WHILE THIS_EVAL$ ~= ADDR(NIL);

   4568  1 000347   000357 710000 1                  TRA     s:4572

     2661     4569    4                 CALL EXAMINE_EVAL (THIS$EVAL)

   4569  1 000350   200031 236100                    LDQ     THIS_EVAL$,,AUTO
         1 000351   200033 756100                    STQ     THIS_EVAL$+2,,AUTO
         1 000352   000566 701000 1                  TSX1    EXAMINE_EVAL
         1 000353   000420 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2662     4570    4                   ALTRET (EXAMINE_EVAL_FAILED);
     2663     4571    4                 THIS_EVAL$ = THIS$EVAL.BLINK$;

   4571  1 000354   200031 470500                    LDP0    THIS_EVAL$,,AUTO
         1 000355   000001 236100                    LDQ     1,,PR0
         1 000356   200031 756100                    STQ     THIS_EVAL$,,AUTO

     2664     4572    4                 END;

   4572  1 000357   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000360   000350 601000 1                  TNZ     s:4569

     2665     4573    3              IF NOT SOURCE_STRING_OPERAND THEN EXIT;

   4573  1 000361   200025 234100                    SZN     SOURCE_STRING_OPERAND,,AUTO
         1 000362   000416 605000 1                  TPL     s:4600

     2666     4574    3              SOURCE_STRING_OPERAND = '0'B;

   4574  1 000363   200025 450100                    STZ     SOURCE_STRING_OPERAND,,AUTO

     2667     4575                   /*
     2668     4576                   *   Adjust the rest of the wildcard matches for a literal string.
     2669     4577                   */
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:428  
     2670     4578
     2671     4579    3              THIS_WILD$ = PINCRW (VD_6E.WILD_STRINGS$,

   4579  1 000364   000025 470400 xsym               LDP0    VD_6E+21
         1 000365   000002 720100                    LXL0    2,,PR0
         1 000366   000000 636010                    EAQ     0,X0
         1 000367   000023 402007                    MPY     19,DL
         1 000370   000025 036000 xsym               ADLQ    VD_6E+21
         1 000371   200030 756100                    STQ     THIS_WILD$,,AUTO

     2672     4580    3                VD$WILD_STRINGS.N_WILDCARDS# * SIZEW(WILD.W));
     2673     4581
     2674     4582    4              DO UNTIL THIS_WILD$ = VD_6E.WILD_STRINGS$;

     2675     4583    4                 THIS_WILD$ = PINCRW (THIS_WILD$, -SIZEW(WILD.W));

   4583  1 000372   200030 236100                    LDQ     THIS_WILD$,,AUTO
         1 000373   777755 036003                    ADLQ    -19,DU
         1 000374   200030 756100                    STQ     THIS_WILD$,,AUTO

     2676     4584                      /*
     2677     4585                      * On an insert, VDI$BINSERT sets EOF in the insertion
     2678     4586                      * range.  These ranges are sorted by position, so stop
     2679     4587                      * adjusting when we get to the insertion one, so that
     2680     4588                      * lower adjacent ones don't get moved.
     2681     4589                      */
     2682     4590    4                 IF WILD.W.RANGE.START.EOF THEN EXIT;

   4590  1 000375   200030 470500                    LDP0    THIS_WILD$,,AUTO
         1 000376   000014 236100                    LDQ     12,,PR0
         1 000377   400000 316007                    CANQ    -131072,DL
         1 000400   000416 601000 1                  TNZ     s:4600

     2683     4591
     2684     4592    4                 CALL CANDIDATE_LOCATION (WILD.W.RANGE.START)

   4592  1 000401   200030 236100                    LDQ     THIS_WILD$,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:429  
         1 000402   000004 036003                    ADLQ    4,DU
         1 000403   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000404   000617 701000 1                  TSX1    CANDIDATE_LOCATION
         1 000405   000420 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2685     4593    4                   ALTRET (CANDIDATE_LOCATION_FAILED);
     2686     4594    4                 CALL CANDIDATE_LOCATION_END (WILD.W.RANGE.ENDD)

   4594  1 000406   200030 236100                    LDQ     THIS_WILD$,,AUTO
         1 000407   000015 036003                    ADLQ    13,DU
         1 000410   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000411   000624 701000 1                  TSX1    CANDIDATE_LOCATION_END
         1 000412   000420 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2687     4595    4                   ALTRET (CANDIDATE_LOCATION_FAILED);
     2688     4596    4                 END;

   4596  1 000413   200030 236100                    LDQ     THIS_WILD$,,AUTO
         1 000414   000025 116000 xsym               CMPQ    VD_6E+21
         1 000415   000372 601000 1                  TNZ     s:4583

     2689     4597
     2690     4598    3              END;

     2691     4599
     2692     4600    2           RETURN;

   4600  1 000416   200026 221300                    LDX1  ! SOURCE_STRING_OPERAND+1,,AUTO
         1 000417   000001 702211                    TSX2  ! 1,X1

   4590  1 000420                       CANDIDATE_L* null
     2693     4601
     2694     4602
     2695     4603    2   CANDIDATE_LOCATION_FAILED: ;
     2696     4604    2   EXAMINE_BLOCK_DESC_FAILED: ;

   4604  1 000420                       EXAMINE_BLO* null
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:430  
   4604  1 000420                       EXAMINE_EVA* null
     2697     4605    2   EXAMINE_EVAL_FAILED: ;
     2698     4606    2           ALTRETURN;

   4606  1 000420   200026 221300                    LDX1  ! SOURCE_STRING_OPERAND+1,,AUTO
         1 000421   000000 702211                    TSX2  ! 0,X1

     2699     4607
     2700     4608    2   END EXAMINE_OPERAND;
     2701     4609
     2702     4610        %BOX (TITLE=EXAMINE_BLOCK_DESC, PAGE=YES);
              4618    2
              4622    2   /***************************************************************************
              4624    2    *                                                                         *
              4628    2            *                             EXAMINE_BLOCK_DESC                         *
              4630    2            *                                                                        *
              4632    2          ***************************************************************************/

     2703     4636
     2704     4637        /*I* NAME: EXAMINE_BLOCK_DESC
     2705     4638            PARAMETERS:
     2706     4639                BLOCK_DESC - VD$BLOCK_DESC to examine, looking for candidate
     2707     4640                    locations.
     2708     4641            INPUT:
     2709     4642                XLATE_LOCATIONS - Same as main routine.
     2710     4643                ACTION - Same as main routine.
     2711     4644                PREFIX_KEY$ - Array of ptrs to VD$TEXTCs for prefix keys at
     2712     4645                    levels 0 thru (XLATE_LOCATIONS.LEVEL-1).
     2713     4646            OUTPUT:
     2714     4647                BLOCK_IS_CANDIDATE will be set %TRUE if BLOCK_DESC's .FILE_KEY
     2715     4648                    matches XLATE_LOCATIONS.FILE_KEY, and if BLOCK_DESC.RANGE's
     2716     4649                    locations have the same prefix as XLATE_LOCATIONS.PREFIX.
     2717     4650                    Otherwise, BLOCK_IS_CANDIDATE will be set %FALSE.
     2718     4651                Same as main routine, but just for BLOCK_DESC's VD$LOCATIONS.
     2719     4652            DESCRIPTION:
     2720     4653                First, see if this block has the same prefix (levels 0 thru
     2721     4654                    XLATE_LOCATIONS.LEVEL - 1) as the one specified in
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:431  
     2722     4655                    XLATE_LOCATIONS.FILE_KEY and .PREFIX.  If not, set
     2723     4656                    BLOCK_IS_CANDIDATE to false and return.
     2724     4657                    If BLOCK_DESC.RANGE.START is EOF, then this block is not
     2725     4658                    a candidate (note .RANGE.ENDD could only legally be EOF
     2726     4659                    also).  If BLOCK_DESC.RANGE.START has no keys, then this
     2727     4660                    block could only be a candidate if the translation level
     2728     4661                    is level 1, and so there are no prefix keys to be matched
     2729     4662                    below the file level (level 0).
     2730     4663                If this block is a candidate for translation, examine each of
     2731     4664                    the candidate VD$LOCATIONs in BLOCK_DESC and process them
     2732     4665                    according to ACTION.
     2733     4666        */
     2734     4667
     2735     4668    1   EXAMINE_BLOCK_DESC: PROC (BLOCK_DESC) ALTRET;

   4668  1 000422   200032 741300       EXAMINE_BLO* STX1  ! THIS_EVAL$+1,,AUTO

     2736     4669
     2737     4670        %VD$BLOCK_DESC (NAME=BLOCK_DESC, STCLASS=PARAM);
     2738     4817
     2739     4818
     2740     4819    2   DCL LEVEL SBIN;
     2741     4820    2   DCL BLOCK_KEY$ PTR;
     2742     4821
     2743     4822
     2744     4823        %VD$TEXTC (NAME=BLOCK$KEY, STCLASS="BASED(BLOCK_KEY$)");
     2745     4846
     2746     4847
     2747     4848
     2748     4849    2           BLOCK_IS_CANDIDATE = %FALSE;

   4849  1 000423   200024 450100                    STZ     BLOCK_IS_CANDIDATE,,AUTO

     2749     4850
     2750     4851                %GETKEY (KEY=BLOCK_DESC.FILE_KEY, PTR=BLOCK_KEY$);

   4858  1 000424   200033 470500                    LDP0    @BLOCK_DESC,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:432  
         1 000425   000001 720100                    LXL0    1,,PR0
         1 000426   000002 100003                    CMPX0   2,DU
         1 000427   000434 601000 1                  TNZ     s:4858+8

   4858  1 000430   000002 471500                    LDP1    2,,PR0
         1 000431   100002 633500                    EPPR3   2,,PR1
         1 000432   200035 453500                    STP3    BLOCK_KEY$,,AUTO
         1 000433   000437 710000 1                  TRA     s:4861

   4858  1 000434   200033 236100                    LDQ     @BLOCK_DESC,,AUTO
         1 000435   000002 036003                    ADLQ    2,DU
         1 000436   200035 756100                    STQ     BLOCK_KEY$,,AUTO

     2751     4861    2           IF BLOCK$KEY.BYTES ~= PREFIX_KEY$ (%LVL_FILE) -> VD$TEXTC.BYTES

   4861  1 000437   200035 471500                    LDP1    BLOCK_KEY$,,AUTO
         1 000440   100000 236100                    LDQ     0,,PR1
         1 000441   000033 772000                    QRL     27
         1 000442   200005 473500                    LDP3    PREFIX_KEY$,,AUTO
         1 000443   000000 622006                    EAX2    0,QL
         1 000444   300000 236100                    LDQ     0,,PR3
         1 000445   000033 772000                    QRL     27
         1 000446   000000 623006                    EAX3    0,QL
         1 000447   040140 106540                    CMPC    fill='040'O
         1 000450   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000451   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         1 000452   000466 601000 1                  TNZ     s:4865
         1 000453   000013 236100                    LDQ     11,,PR0
         1 000454   400000 316007                    CANQ    -131072,DL
         1 000455   000466 601000 1                  TNZ     s:4865
         1 000456   000000 106500                    CMPC    fill='000'O
         1 000457   000003 000040                    ADSC9   3,,PR0                   cn=0,n=32
         1 000460   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000461   000467 601000 1                  TNZ     s:4867
         1 000462   200003 474500                    LDP4    @XLATE_LOCATIONS,,AUTO
         1 000463   400005 224100                    LDX4    5,,PR4
         1 000464   000001 104003                    CMPX4   1,DU
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:433  
         1 000465   000467 604400 1                  TMOZ    s:4867

     2752     4862    2             OR BLOCK_DESC.RANGE.START.EOF
     2753     4863    2             OR (BLOCK_DESC.RANGE.START.KEY = %CLEAR
     2754     4864    2             AND XLATE_LOCATIONS.LEVEL# > %LVL_LOWER) THEN
     2755     4865    2              RETURN;

   4865  1 000466   000001 702211                    TSX2  ! 1,X1

     2756     4866
     2757     4867    3           DO LEVEL = 1 TO (XLATE_LOCATIONS.LEVEL# - 1);

   4867  1 000467   000001 235007                    LDA     1,DL
         1 000470   200034 755100                    STA     LEVEL,,AUTO
         1 000471   000541 710000 1                  TRA     s:4883+1

     2758     4868    3              IF BLOCK_DESC.RANGE.START.KEY (LEVEL - 1) = %CLEAR THEN

   4868  1 000472   200034 235100                    LDA     LEVEL,,AUTO
         1 000473   000003 735000                    ALS     3
         1 000474   200033 470500                    LDP0    @BLOCK_DESC,,AUTO
         1 000475   000000 106505                    CMPC    fill='000'O
         1 000476   000001 000010                    ADSC9   1,A,PR0                  cn=0,n=8
         1 000477   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000500   000503 601000 1                  TNZ     s:4878

     2759     4869    3                 RETURN;

   4869  1 000501   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000502   000001 702211                    TSX2  ! 1,X1

     2760     4870                   %GETKEY (KEY=BLOCK_DESC.RANGE.START.KEY, INDX=LEVEL-1,
     2761     4871                   PTR=BLOCK_KEY$);

   4878  1 000503   200034 236100                    LDQ     LEVEL,,AUTO
         1 000504   000001 736000                    QLS     1
         1 000505   000001 720106                    LXL0    1,QL,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:434  
         1 000506   000002 100003                    CMPX0   2,DU
         1 000507   000514 601000 1                  TNZ     s:4878+9

   4878  1 000510   000002 471506                    LDP1    2,QL,PR0
         1 000511   100002 633500                    EPPR3   2,,PR1
         1 000512   200035 453500                    STP3    BLOCK_KEY$,,AUTO
         1 000513   000521 710000 1                  TRA     s:4881

   4878  1 000514   200034 236100                    LDQ     LEVEL,,AUTO
         1 000515   000023 736000                    QLS     19
         1 000516   000002 036003                    ADLQ    2,DU
         1 000517   200033 036100                    ADLQ    @BLOCK_DESC,,AUTO
         1 000520   200035 756100                    STQ     BLOCK_KEY$,,AUTO

     2762     4881    3              IF BLOCK$KEY.BYTES ~= PREFIX_KEY$ (LEVEL) -> VD$TEXTC.BYTES THEN

   4881  1 000521   200035 471500                    LDP1    BLOCK_KEY$,,AUTO
         1 000522   100000 236100                    LDQ     0,,PR1
         1 000523   000033 772000                    QRL     27
         1 000524   200034 720100                    LXL0    LEVEL,,AUTO
         1 000525   200005 473510                    LDP3    PREFIX_KEY$,X0,AUTO
         1 000526   000000 621006                    EAX1    0,QL
         1 000527   300000 236100                    LDQ     0,,PR3
         1 000530   000033 772000                    QRL     27
         1 000531   000000 622006                    EAX2    0,QL
         1 000532   040140 106540                    CMPC    fill='040'O
         1 000533   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         1 000534   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 000535   000540 600000 1                  TZE     s:4883

     2763     4882    3                 RETURN;

   4882  1 000536   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000537   000001 702211                    TSX2  ! 1,X1

     2764     4883    3              END;

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:435  
   4883  1 000540   200034 054100                    AOS     LEVEL,,AUTO
         1 000541   200003 473500                    LDP3    @XLATE_LOCATIONS,,AUTO
         1 000542   300005 236100                    LDQ     5,,PR3
         1 000543   000022 732000                    QRS     18
         1 000544   200034 116100                    CMPQ    LEVEL,,AUTO
         1 000545   000472 605400 1                  TPNZ    s:4868

     2765     4884
     2766     4885    2           BLOCK_IS_CANDIDATE = %TRUE;

   4885  1 000546   400000 236003                    LDQ     -131072,DU
         1 000547   200024 756100                    STQ     BLOCK_IS_CANDIDATE,,AUTO

     2767     4886
     2768     4887    2           CALL CANDIDATE_LOCATION (BLOCK_DESC.RANGE.START)

   4887  1 000550   200033 236100                    LDQ     @BLOCK_DESC,,AUTO
         1 000551   000003 036003                    ADLQ    3,DU
         1 000552   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000553   000617 701000 1                  TSX1    CANDIDATE_LOCATION
         1 000554   000564 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2769     4888    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2770     4889    2           CALL CANDIDATE_LOCATION_END (BLOCK_DESC.RANGE.ENDD)

   4889  1 000555   200033 236100                    LDQ     @BLOCK_DESC,,AUTO
         1 000556   000014 036003                    ADLQ    12,DU
         1 000557   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000560   000624 701000 1                  TSX1    CANDIDATE_LOCATION_END
         1 000561   000564 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2771     4890    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2772     4891
     2773     4892    2           RETURN;

   4892  1 000562   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000563   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:436  

   4885  1 000564                       CANDIDATE_L* null
     2774     4893
     2775     4894
     2776     4895    2   CANDIDATE_LOCATION_FAILED: ;
     2777     4896    2           ALTRETURN;

   4896  1 000564   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000565   000000 702211                    TSX2  ! 0,X1

     2778     4897
     2779     4898    2   END EXAMINE_BLOCK_DESC;
     2780     4899
     2781     4900        %BOX (TITLE=EXAMINE_EVAL, PAGE=YES);
              4908    2
              4912    2   /***************************************************************************
              4914    2    *                                                                         *
              4918    2            *                                EXAMINE_EVAL                            *
              4920    2            *                                                                        *
              4922    2          ***************************************************************************/

     2782     4926
     2783     4927        /*I* NAME: EXAMINE_EVAL
     2784     4928            PARAMETERS:
     2785     4929                EVAL - VD$EVAL to examine.  The EDIT_BLOCK$ for the VD$OPERAND
     2786     4930                    to which EVAL belongs must already have been verified to
     2787     4931                    match XLATE_LOCATIONS.FILE_KEY and .PREFIX at levels
     2788     4932                    0 thru (XLATE_LOCATIONS.LEVEL - 1).
     2789     4933            INPUT:
     2790     4934                XLATE_LOCATIONS - Same as for main routine.
     2791     4935                ACTION - Same as for main routine.
     2792     4936            OUTPUT:
     2793     4937                CANDIDATE, XLATE_LOCATIONS - Same as for main routine, based
     2794     4938                    on ACTION.
     2795     4939            DESCRIPTION:
     2796     4940                Process each VD$LOCATION in EVAL.
     2797     4941        */
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:437  
     2798     4942
     2799     4943    1   EXAMINE_EVAL: PROC (EVAL) ALTRET;

   4943  1 000566   200032 741300       EXAMINE_EVAL STX1  ! THIS_EVAL$+1,,AUTO

     2800     4944
     2801     4945        %VD$EVAL (NAME=EVAL, STCLASS=PARAM);
     2802     5190
     2803     5191
     2804     5192
     2805     5193    2           CALL CANDIDATE_LOCATION (EVAL.ENCLOSING.START)

   5193  1 000567   200033 236100                    LDQ     @EVAL,,AUTO
         1 000570   000002 036003                    ADLQ    2,DU
         1 000571   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000572   000617 701000 1                  TSX1    CANDIDATE_LOCATION
         1 000573   000615 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2806     5194    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2807     5195    2           CALL CANDIDATE_LOCATION_END (EVAL.ENCLOSING.ENDD)

   5195  1 000574   200033 236100                    LDQ     @EVAL,,AUTO
         1 000575   000013 036003                    ADLQ    11,DU
         1 000576   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000577   000624 701000 1                  TSX1    CANDIDATE_LOCATION_END
         1 000600   000615 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2808     5196    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2809     5197    2           CALL CANDIDATE_LOCATION (EVAL.RANGE.START)

   5197  1 000601   200033 236100                    LDQ     @EVAL,,AUTO
         1 000602   000024 036003                    ADLQ    20,DU
         1 000603   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000604   000617 701000 1                  TSX1    CANDIDATE_LOCATION
         1 000605   000615 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2810     5198    2             ALTRET (CANDIDATE_LOCATION_FAILED);
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:438  
     2811     5199    2           CALL CANDIDATE_LOCATION_END (EVAL.RANGE.ENDD)

   5199  1 000606   200033 236100                    LDQ     @EVAL,,AUTO
         1 000607   000035 036003                    ADLQ    29,DU
         1 000610   200037 756100                    STQ     BLOCK_KEY$+2,,AUTO
         1 000611   000624 701000 1                  TSX1    CANDIDATE_LOCATION_END
         1 000612   000615 702000 1                  TSX2    CANDIDATE_LOCATION_FAILED

     2812     5200    2             ALTRET (CANDIDATE_LOCATION_FAILED);
     2813     5201
     2814     5202    2           RETURN;

   5202  1 000613   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000614   000001 702211                    TSX2  ! 1,X1

     2815     5203
     2816     5204
     2817     5205    2   CANDIDATE_LOCATION_FAILED: ;

   5205  1 000615                       CANDIDATE_L* null
     2818     5206    2           ALTRETURN;

   5206  1 000615   200032 221300                    LDX1  ! THIS_EVAL$+1,,AUTO
         1 000616   000000 702211                    TSX2  ! 0,X1

     2819     5207
     2820     5208    2   END EXAMINE_EVAL;
     2821     5209
     2822     5210        %BOX (TITLE=CANDIDATE_LOCATION, PAGE=YES);
              5218    2
              5222    2   /***************************************************************************
              5224    2    *                                                                         *
              5228    2            *                             CANDIDATE_LOCATION                         *
              5230    2            *                                                                        *
              5232    2          ***************************************************************************/

     2823     5236
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:439  
     2824     5237        /*I* NAME: CANDIDATE_LOCATION
     2825     5238            PARAMETERS:
     2826     5239                CANDIDATE - VD$LOCATION which has already been verified to match
     2827     5240                    XLATE_LOCATIONS.FILE_KEY and .PREFIX at levels 0 thru
     2828     5241                    (XLATE_LOCATIONS.LEVEL - 1).
     2829     5242            INPUT:
     2830     5243                XLATE_LOCATIONS - Same as for main routine.
     2831     5244                ACTION - Same as for main routine.
     2832     5245            OUTPUT:
     2833     5246                CANDIDATE, XLATE_LOCATIONS - Same as for main routine, based on ACTION.
     2834     5247            DESCRIPTION:
     2835     5248                Search XLATE_LOCATIONS.XLATES to see if CANDIDATE matches any entry.
     2836     5249                We assume it matches only one entry.  Then look at ACTION:
     2837     5250                    %XLATE_BUILD - If CANDIDATE matches an entry, just return.
     2838     5251                        If it doesn't, add an entry to .XLATES for CANDIDATE, inserting
     2839     5252                        it into the tables in ascending order sorted by .OLD_KEY_LO.
     2840     5253                    %XLATE_LOCATION - If CANDIDATE doesn't match an entry,
     2841     5254                        just return.  If it does, translate CANDIDATE according
     2842     5255                        to the entry in .XLATES.
     2843     5256        */
     2844     5257
     2845     5258    1   CANDIDATE_LOCATION: PROC (CANDIDATE) ALTRET;

   5258  1 000617   200036 741300       CANDIDATE_L* STX1  ! BLOCK_KEY$+1,,AUTO

     2846     5259
     2847     5260        %VD$LOCATION (NAME=CANDIDATE, STCLASS=PARAM);
     2848     5288
     2849     5289
     2850     5290    2   DCL CURR_TABLE$ PTR;
     2851     5291    2   DCL PREV_TABLE$ PTR;
     2852     5292    2   DCL CAND_KEY$ PTR;
     2853     5293    2   DCL INDX SBIN;
     2854     5294    2   DCL INSERT_BEFORE SBIN;
     2855     5295    2   DCL XLATE_ENTRY$ PTR;
     2856     5296    2   DCL XLATE_KEY_LO$ PTR;
     2857     5297    2   DCL XLATE_KEY_HI$ PTR;
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:440  
     2858     5298    2   DCL SPLIT_TABLE$ PTR;
     2859     5299    2   DCL VAR_LEN SBIN;
     2860     5300    2   DCL RANGE_END BIT(1);
     2861     5301
     2862     5302
     2863     5303        %VD$XLATE_LOCATIONS (NAME=CURR$TABLE, STCLASS="BASED(CURR_TABLE$)");
     2864     5439        %VD$XLATE_LOCATIONS (NAME=PREV$TABLE, STCLASS="BASED(PREV_TABLE$)");
     2865     5575        %VD$XLATE_ENTRY (NAME=XLATE$ENTRY, STCLASS="BASED(XLATE_ENTRY$)");
     2866     5632        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
     2867     5655        %VD$TEXTC (NAME=XLATE$KEY_LO, STCLASS="BASED(XLATE_KEY_LO$)");
     2868     5678        %VD$TEXTC (NAME=XLATE$KEY_HI, STCLASS="BASED(XLATE_KEY_HI$)");
     2869     5701        %VD$XLATE_LOCATIONS (NAME=SPLIT$TABLE, STCLASS="BASED(SPLIT_TABLE$)");
     2870     5837    2   DCL VAR$LEN CHAR(VAR_LEN) BASED;
     2871     5838
     2872     5839
     2873     5840    2           RANGE_END = SOURCE_STRING_OPERAND;

   5840  1 000620   200025 236100                    LDQ     SOURCE_STRING_OPERAND,,AUTO
         1 000621   400000 376003                    ANQ     -131072,DU
         1 000622   200052 756100                    STQ     RANGE_END,,AUTO

     2874     5841    2           GOTO BEGIN;

   5841  1 000623   000631 710000 1                  TRA     BEGIN

     2875     5842
     2876     5843    2   CANDIDATE_LOCATION_END: ENTRY (CANDIDATE) ALTRET;

   5843  1 000624   200036 741300       CANDIDATE_L* STX1  ! BLOCK_KEY$+1,,AUTO

     2877     5844
     2878     5845    2           RANGE_END = ~ RANGE_END;

   5845  1 000625   200052 236100                    LDQ     RANGE_END,,AUTO
         1 000626   400000 376003                    ANQ     -131072,DU
         1 000627   400000 676003                    ERQ     -131072,DU
         1 000630   200052 756100                    STQ     RANGE_END,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:441  

   5845  1 000631                       BEGIN        null
     2879     5846    2   BEGIN:  ;
     2880     5847
     2881     5848    2           IF CANDIDATE.EOF THEN

   5848  1 000631   200037 470500                    LDP0    @CANDIDATE,,AUTO
         1 000632   000010 236100                    LDQ     8,,PR0
         1 000633   400000 316007                    CANQ    -131072,DL
         1 000634   000636 600000 1                  TZE     s:5850

     2882     5849    2              RETURN;      /* Nothing to XLATE */

   5849  1 000635   000001 702211                    TSX2  ! 1,X1

     2883     5850    2           PREV_TABLE$ = ADDR(NIL);

   5850  1 000636   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000637   200041 756100                    STQ     PREV_TABLE$,,AUTO

     2884     5851    2           CURR_TABLE$ = ADDR(XLATE_LOCATIONS);

   5851  1 000640   200003 236100                    LDQ     @XLATE_LOCATIONS,,AUTO
         1 000641   200040 756100                    STQ     CURR_TABLE$,,AUTO

     2885     5852    2           INSERT_BEFORE = -1;

   5852  1 000642   000001 335007                    LCA     1,DL
         1 000643   200044 755100                    STA     INSERT_BEFORE,,AUTO

     2886     5853                %GETKEY (KEY=CANDIDATE.KEY, INDX=LEVEL-1, PTR=CAND_KEY$);

   5860  1 000644   200013 235100                    LDA     LEVEL,,AUTO
         1 000645   000001 735000                    ALS     1
         1 000646   077776 720105                    LXL0    -2,AL,PR0
         1 000647   000002 100003                    CMPX0   2,DU
         1 000650   000655 601000 1                  TNZ     s:5860+9
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:442  

   5860  1 000651   077777 471505                    LDP1    -1,AL,PR0
         1 000652   100002 633500                    EPPR3   2,,PR1
         1 000653   200042 453500                    STP3    CAND_KEY$,,AUTO
         1 000654   000662 710000 1                  TRA     EACH_TABLE_IN_CHAIN

   5860  1 000655   200013 236100                    LDQ     LEVEL,,AUTO
         1 000656   000023 736000                    QLS     19
         1 000657   000001 136003                    SBLQ    1,DU
         1 000660   200037 036100                    ADLQ    @CANDIDATE,,AUTO
         1 000661   200042 756100                    STQ     CAND_KEY$,,AUTO

     2887     5863
     2888     5864    2   EACH_TABLE_IN_CHAIN:
     2889     5865    3           DO WHILE CURR_TABLE$ ~= ADDR(NIL);

   5865  1 000662   000767 710000 1     EACH_TABLE_* TRA     s:5903

     2890     5866
     2891     5867    3   EACH_XLATE_ENTRY:
     2892     5868    4              DO INDX = 0 TO (CURR$TABLE.N_ENTRIES# - 1);

   5868  1 000663   200043 450100       EACH_XLATE_* STZ     INDX,,AUTO
         1 000664   000756 710000 1                  TRA     s:5899+1

     2893     5869    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (INDX));

   5869  1 000665   200043 236100                    LDQ     INDX,,AUTO
         1 000666   000025 736000                    QLS     21
         1 000667   000017 036003                    ADLQ    15,DU
         1 000670   200040 036100                    ADLQ    CURR_TABLE$,,AUTO
         1 000671   200045 756100                    STQ     XLATE_ENTRY$,,AUTO

     2894     5870                      %GETKEY (KEY=XLATE$ENTRY.OLD_KEY_LO, PTR=XLATE_KEY_LO$);

   5877  1 000672   200045 470500                    LDP0    XLATE_ENTRY$,,AUTO
         1 000673   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:443  
         1 000674   000002 100003                    CMPX0   2,DU
         1 000675   000702 601000 1                  TNZ     s:5877+8

   5877  1 000676   000001 471500                    LDP1    1,,PR0
         1 000677   100002 633500                    EPPR3   2,,PR1
         1 000700   200046 453500                    STP3    XLATE_KEY_LO$,,AUTO
         1 000701   000704 710000 1                  TRA     s:5887

   5877  1 000702   000001 036003                    ADLQ    1,DU
         1 000703   200046 756100                    STQ     XLATE_KEY_LO$,,AUTO

     2895     5880                      %GETKEY (KEY=XLATE$ENTRY.OLD_KEY_HI, PTR=XLATE_KEY_HI$);

   5887  1 000704   000002 721100                    LXL1    2,,PR0
         1 000705   000002 101003                    CMPX1   2,DU
         1 000706   000713 601000 1                  TNZ     s:5887+7

   5887  1 000707   000003 471500                    LDP1    3,,PR0
         1 000710   100002 633500                    EPPR3   2,,PR1
         1 000711   200047 453500                    STP3    XLATE_KEY_HI$,,AUTO
         1 000712   000716 710000 1                  TRA     s:5890

   5887  1 000713   200045 236100                    LDQ     XLATE_ENTRY$,,AUTO
         1 000714   000003 036003                    ADLQ    3,DU
         1 000715   200047 756100                    STQ     XLATE_KEY_HI$,,AUTO

     2896     5890    4                 IF CAND$KEY.BYTES >= XLATE$KEY_LO.BYTES

   5890  1 000716   200042 471500                    LDP1    CAND_KEY$,,AUTO
         1 000717   100000 236100                    LDQ     0,,PR1
         1 000720   000033 772000                    QRL     27
         1 000721   200046 473500                    LDP3    XLATE_KEY_LO$,,AUTO
         1 000722   000000 622006                    EAX2    0,QL
         1 000723   300000 236100                    LDQ     0,,PR3
         1 000724   000033 772000                    QRL     27
         1 000725   000000 623006                    EAX3    0,QL
         1 000726   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:444  
         1 000727   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000730   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         1 000731   000742 602000 1                  TNC     s:5893
         1 000732   200047 474500                    LDP4    XLATE_KEY_HI$,,AUTO
         1 000733   400000 236100                    LDQ     0,,PR4
         1 000734   000033 772000                    QRL     27
         1 000735   000000 624006                    EAX4    0,QL
         1 000736   040140 106540                    CMPC    fill='040'O
         1 000737   400000 200014                    ADSC9   0,,PR4                   cn=1,n=*X4
         1 000740   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000741   000772 603000 1                  TRC     s:5906

     2897     5891    4                   AND CAND$KEY.BYTES <= XLATE$KEY_HI.BYTES THEN
     2898     5892    4                    EXIT EACH_TABLE_IN_CHAIN;
     2899     5893    4                 IF ACTION = %XLATE_BUILD

   5893  1 000742   200004 474500                    LDP4    @ACTION,,AUTO
         1 000743   400000 235100                    LDA     0,,PR4
         1 000744   000001 115007                    CMPA    1,DL
         1 000745   000755 601000 1                  TNZ     s:5899
         1 000746   040140 106540                    CMPC    fill='040'O
         1 000747   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000750   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         1 000751   000755 603000 1                  TRC     s:5899

     2900     5894    5                   AND CAND$KEY.BYTES < XLATE$KEY_LO.BYTES THEN DO;

     2901     5895                         /* Insert new entry before this one */
     2902     5896    5                    INSERT_BEFORE = INDX;

   5896  1 000752   200043 236100                    LDQ     INDX,,AUTO
         1 000753   200044 756100                    STQ     INSERT_BEFORE,,AUTO

     2903     5897    5                    EXIT EACH_TABLE_IN_CHAIN;

   5897  1 000754   000772 710000 1                  TRA     s:5906

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:445  
     2904     5898    5                    END;
     2905     5899    4                 END EACH_XLATE_ENTRY;

   5899  1 000755   200043 054100                    AOS     INDX,,AUTO
         1 000756   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 000757   000001 236100                    LDQ     1,,PR0
         1 000760   000022 732000                    QRS     18
         1 000761   200043 116100                    CMPQ    INDX,,AUTO
         1 000762   000665 605400 1                  TPNZ    s:5869

     2906     5900
     2907     5901    3              PREV_TABLE$ = CURR_TABLE$;

   5901  1 000763   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 000764   200041 756100                    STQ     PREV_TABLE$,,AUTO

     2908     5902    3              CURR_TABLE$ = CURR$TABLE.FLINK$;

   5902  1 000765   000002 236100                    LDQ     2,,PR0
         1 000766   200040 756100                    STQ     CURR_TABLE$,,AUTO

     2909     5903    3              END EACH_TABLE_IN_CHAIN;

   5903  1 000767   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 000770   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000771   000663 601000 1                  TNZ     EACH_XLATE_ENTRY

     2910     5904
     2911     5905
     2912     5906    3           DO CASE (ACTION);

   5906  1 000772   200004 470500                    LDP0    @ACTION,,AUTO
         1 000773   000000 235100                    LDA     0,,PR0
         1 000774   000003 115007                    CMPA    3,DL
         1 000775   000777 602005 1                  TNC     s:5906+5,AL
         1 000776   001502 710000 1                  TRA     s:6081
         1 000777   001502 710000 1                  TRA     s:6081
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:446  
         1 001000   001002 710000 1                  TRA     s:5908
         1 001001   001323 710000 1                  TRA     s:6019

     2913     5907    3            CASE (%XLATE_BUILD);

     2914     5908    3              IF CURR_TABLE$ ~= ADDR(NIL) AND INSERT_BEFORE < 0 THEN

   5908  1 001002   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 001003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001004   001011 600000 1                  TZE     s:5917
         1 001005   200044 235100                    LDA     INSERT_BEFORE,,AUTO
         1 001006   001011 605000 1                  TPL     s:5917

     2915     5909    3                 RETURN;   /* Found matching entry:  do nothing */

   5909  1 001007   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001010   000001 702211                    TSX2  ! 1,X1

     2916     5910                   /*
     2917     5911                   *  Build new entry for CANDIDATE.
     2918     5912                   *  If CURR_TABLE$ = ADDR(NIL), append the new entry to the end of
     2919     5913                   *    PREV_TABLE$.
     2920     5914                   *  Else insert the new entry in front of
     2921     5915                   *    CURR$TABLE.XLATES (INSERT_BEFORE).
     2922     5916                   */
     2923     5917    4              IF CURR_TABLE$ = ADDR(NIL) THEN DO;

   5917  1 001011   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001012   001072 601000 1                  TNZ     s:5936

     2924     5918    4                 CURR_TABLE$ = PREV_TABLE$;

   5918  1 001013   200041 236100                    LDQ     PREV_TABLE$,,AUTO
         1 001014   200040 756100                    STQ     CURR_TABLE$,,AUTO

     2925     5919    4                 IF CURR_TABLE$ = ADDR(NIL) THEN

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:447  
   5919  1 001015   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001016   001021 601000 1                  TNZ     s:5921

     2926     5920    4                    CURR_TABLE$ = ADDR(XLATE_LOCATIONS);

   5920  1 001017   200003 236100                    LDQ     @XLATE_LOCATIONS,,AUTO
         1 001020   200040 756100                    STQ     CURR_TABLE$,,AUTO

     2927     5921    4                 IF CURR$TABLE.N_ENTRIES# >=

   5921  1 001021   200040 471500                    LDP1    CURR_TABLE$,,AUTO
         1 001022   100001 236100                    LDQ     1,,PR1
         1 001023   000022 736000                    QLS     18
         1 001024   000022 732000                    QRS     18
         1 001025   000004 506007                    DIV     4,DL
         1 001026   000003 402007                    MPY     3,DL
         1 001027   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001030   100001 236100                    LDQ     1,,PR1
         1 001031   000022 732000                    QRS     18
         1 001032   200054 116100                    CMPQ    RANGE_END+2,,AUTO
         1 001033   001056 604000 1                  TMI     s:5932

     2928     5922    5                   (CURR$TABLE.MX_ENTRIES# / 4) * 3 THEN DO;

     2929     5923                         /* CURR table is > 75% occupied:  allocate a new table */
     2930     5924    5                    PREV_TABLE$ = CURR_TABLE$;

   5924  1 001034   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 001035   200041 756100                    STQ     PREV_TABLE$,,AUTO

     2931     5925    5                    CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, CURR_TABLE$,

   5925  1 001036   000010 236000 2                  LDQ     8
         1 001037   200056 756100                    STQ     RANGE_END+4,,AUTO
         1 001040   200040 633500                    EPPR3   CURR_TABLE$,,AUTO
         1 001041   200055 453500                    STP3    RANGE_END+3,,AUTO
         1 001042   000011 236000 2                  LDQ     9
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:448  
         1 001043   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001044   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001045   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001046   000000 701000 xent               TSX1    VDG$OALLOC
         1 001047   001510 702000 1                  TSX2    OALLOC_FAILED

     2932     5926    5                      SIZEW(CURR$TABLE) +
     2933     5927    5                      (SIZEW(CURR$TABLE.XLATES) * %N_LOCATION_XLATES))
     2934     5928    5                      ALTRET (OALLOC_FAILED);
     2935     5929    5                    CURR$TABLE.FLINK$ = PREV$TABLE.FLINK$;

   5929  1 001050   200041 470500                    LDP0    PREV_TABLE$,,AUTO
         1 001051   000002 236100                    LDQ     2,,PR0
         1 001052   200040 471500                    LDP1    CURR_TABLE$,,AUTO
         1 001053   100002 756100                    STQ     2,,PR1

     2936     5930    5                    PREV$TABLE.FLINK$ = CURR_TABLE$;

   5930  1 001054   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 001055   000002 756100                    STQ     2,,PR0

     2937     5931    5                    END;

     2938     5932    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (CURR$TABLE.N_ENTRIES#));

   5932  1 001056   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001057   000001 236100                    LDQ     1,,PR0
         1 001060   000017 732000                    QRS     15
         1 001061   000012 376000 2                  ANQ     10
         1 001062   000022 736000                    QLS     18
         1 001063   000017 036003                    ADLQ    15,DU
         1 001064   200040 036100                    ADLQ    CURR_TABLE$,,AUTO
         1 001065   200045 756100                    STQ     XLATE_ENTRY$,,AUTO

     2939     5933    4                 CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# + 1;

   5933  1 001066   000001 220100                    LDX0    1,,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:449  
         1 001067   000001 621010                    EAX1    1,X0
         1 001070   000001 741100                    STX1    1,,PR0

     2940     5934    4                 END;

   5934  1 001071   001222 710000 1                  TRA     s:5977

     2941     5935    4              ELSE DO;

     2942     5936    5                 IF CURR$TABLE.N_ENTRIES# >= CURR$TABLE.MX_ENTRIES# THEN DO;

   5936  1 001072   200040 471500                    LDP1    CURR_TABLE$,,AUTO
         1 001073   100001 720100                    LXL0    1,,PR1
         1 001074   100001 100100                    CMPX0   1,,PR1
         1 001075   001170 605400 1                  TPNZ    s:5956

     2943     5937                         /* Split this table into two tables */
     2944     5938    5                    CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, SPLIT_TABLE$,

   5938  1 001076   000010 236000 2                  LDQ     8
         1 001077   200056 756100                    STQ     RANGE_END+4,,AUTO
         1 001100   200050 633500                    EPPR3   SPLIT_TABLE$,,AUTO
         1 001101   200055 453500                    STP3    RANGE_END+3,,AUTO
         1 001102   000011 236000 2                  LDQ     9
         1 001103   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001104   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001105   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001106   000000 701000 xent               TSX1    VDG$OALLOC
         1 001107   001510 702000 1                  TSX2    OALLOC_FAILED

     2945     5939    5                      SIZEW(CURR$TABLE) +
     2946     5940    5                      (SIZEW(CURR$TABLE.XLATES) * %N_LOCATION_XLATES))
     2947     5941    5                      ALTRET (OALLOC_FAILED);
     2948     5942    5                    SPLIT$TABLE.FLINK$ = CURR$TABLE.FLINK$;

   5942  1 001110   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001111   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:450  
         1 001112   200050 471500                    LDP1    SPLIT_TABLE$,,AUTO
         1 001113   100002 756100                    STQ     2,,PR1

     2949     5943    5                    CURR$TABLE.FLINK$ = SPLIT_TABLE$;

   5943  1 001114   200050 236100                    LDQ     SPLIT_TABLE$,,AUTO
         1 001115   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001116   000002 756100                    STQ     2,,PR0

     2950     5944    5                    SPLIT$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# / 2;

   5944  1 001117   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001120   000001 236100                    LDQ     1,,PR0
         1 001121   000022 732000                    QRS     18
         1 001122   000002 506007                    DIV     2,DL
         1 001123   000000 620006                    EAX0    0,QL
         1 001124   200050 471500                    LDP1    SPLIT_TABLE$,,AUTO
         1 001125   100001 740100                    STX0    1,,PR1

     2951     5945    5                    VAR_LEN = SIZEC(CURR$TABLE.XLATES) * SPLIT$TABLE.N_ENTRIES#;

   5945  1 001126   200050 470500                    LDP0    SPLIT_TABLE$,,AUTO
         1 001127   000001 236100                    LDQ     1,,PR0
         1 001130   000015 732000                    QRS     13
         1 001131   000013 376000 2                  ANQ     11
         1 001132   200051 756100                    STQ     VAR_LEN,,AUTO

     2952     5946    5                    ADDR(SPLIT$TABLE.XLATES)->VAR$LEN =

   5946  1 001133   200044 235100                    LDA     INSERT_BEFORE,,AUTO
         1 001134   000005 735000                    ALS     5
         1 001135   200040 471500                    LDP1    CURR_TABLE$,,AUTO
         1 001136   000000 620006                    EAX0    0,QL
         1 001137   200051 721100                    LXL1    VAR_LEN,,AUTO
         1 001140   040140 100545                    MLR     fill='040'O
         1 001141   100017 000010                    ADSC9   15,A,PR1                 cn=0,n=*X0
         1 001142   000017 000011                    ADSC9   15,,PR0                  cn=0,n=*X1
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:451  

     2953     5947    5                      ADDR(CURR$TABLE.XLATES (INSERT_BEFORE))->VAR$LEN;
     2954     5948    5                    CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# -

   5948  1 001143   200050 470500                    LDP0    SPLIT_TABLE$,,AUTO
         1 001144   000001 236100                    LDQ     1,,PR0
         1 001145   000022 732000                    QRS     18
         1 001146   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001147   200040 471500                    LDP1    CURR_TABLE$,,AUTO
         1 001150   100001 236100                    LDQ     1,,PR1
         1 001151   000022 732000                    QRS     18
         1 001152   200054 136100                    SBLQ    RANGE_END+2,,AUTO
         1 001153   000000 620006                    EAX0    0,QL
         1 001154   100001 740100                    STX0    1,,PR1

     2955     5949    5                      SPLIT$TABLE.N_ENTRIES#;
     2956     5950    6                    IF INSERT_BEFORE > CURR$TABLE.N_ENTRIES# THEN DO;

   5950  1 001155   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001156   000001 236100                    LDQ     1,,PR0
         1 001157   000022 732000                    QRS     18
         1 001160   200044 116100                    CMPQ    INSERT_BEFORE,,AUTO
         1 001161   001170 605000 1                  TPL     s:5956

     2957     5951    6                       INSERT_BEFORE = INSERT_BEFORE - CURR$TABLE.N_ENTRIES#;

   5951  1 001162   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001163   200044 236100                    LDQ     INSERT_BEFORE,,AUTO
         1 001164   200054 136100                    SBLQ    RANGE_END+2,,AUTO
         1 001165   200044 756100                    STQ     INSERT_BEFORE,,AUTO

     2958     5952    6                       CURR_TABLE$ = CURR$TABLE.FLINK$;

   5952  1 001166   000002 236100                    LDQ     2,,PR0
         1 001167   200040 756100                    STQ     CURR_TABLE$,,AUTO

     2959     5953    6                       END;
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:452  

     2960     5954    5                    END;

     2961     5955                      /* Slide the rest of this table up 1 entry */
     2962     5956    5                 DO INDX = CURR$TABLE.N_ENTRIES# - 1 DOWNTO INSERT_BEFORE;

   5956  1 001170   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001171   000001 236100                    LDQ     1,,PR0
         1 001172   000022 732000                    QRS     18
         1 001173   000001 136007                    SBLQ    1,DL
         1 001174   200043 756100                    STQ     INDX,,AUTO
         1 001175   001206 710000 1                  TRA     s:5958+2

     2963     5957    5                    CURR$TABLE.XLATES (INDX + 1) = CURR$TABLE.XLATES (INDX);

   5957  1 001176   200043 235100                    LDA     INDX,,AUTO
         1 001177   000005 735000                    ALS     5
         1 001200   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001201   000105 100505                    MLR     fill='000'O
         1 001202   000017 000040                    ADSC9   15,A,PR0                 cn=0,n=32
         1 001203   000027 000040                    ADSC9   23,A,PR0                 cn=0,n=32

     2964     5958    5                    END;

   5958  1 001204   000001 336007                    LCQ     1,DL
         1 001205   200043 056100                    ASQ     INDX,,AUTO
         1 001206   200043 236100                    LDQ     INDX,,AUTO
         1 001207   200044 116100                    CMPQ    INSERT_BEFORE,,AUTO
         1 001210   001176 605000 1                  TPL     s:5957

     2965     5959    4                 XLATE_ENTRY$ = ADDR(CURR$TABLE.XLATES (INSERT_BEFORE));

   5959  1 001211   200044 236100                    LDQ     INSERT_BEFORE,,AUTO
         1 001212   000025 736000                    QLS     21
         1 001213   000017 036003                    ADLQ    15,DU
         1 001214   200040 036100                    ADLQ    CURR_TABLE$,,AUTO
         1 001215   200045 756100                    STQ     XLATE_ENTRY$,,AUTO
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:453  

     2966     5960    4                 CURR$TABLE.N_ENTRIES# = CURR$TABLE.N_ENTRIES# + 1;

   5960  1 001216   200040 470500                    LDP0    CURR_TABLE$,,AUTO
         1 001217   000001 220100                    LDX0    1,,PR0
         1 001220   000001 621010                    EAX1    1,X0
         1 001221   000001 741100                    STX1    1,,PR0

     2967     5961    4                 END;

     2968     5962
     2969     5963                   %COPYKEY (FKEY=CANDIDATE.KEY, FINDX=LEVEL-1,
     2970     5964                   TKEY=XLATE$ENTRY.OLD_KEY_LO);

   5977  1 001222   200013 235100                    LDA     LEVEL,,AUTO
         1 001223   000003 735000                    ALS     3
         1 001224   200037 470500                    LDP0    @CANDIDATE,,AUTO
         1 001225   200045 471500                    LDP1    XLATE_ENTRY$,,AUTO
         1 001226   000100 100505                    MLR     fill='000'O
         1 001227   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8
         1 001230   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

   5977  1 001231   200013 235100                    LDA     LEVEL,,AUTO
         1 001232   000001 735000                    ALS     1
         1 001233   077776 720105                    LXL0    -2,AL,PR0
         1 001234   000002 100003                    CMPX0   2,DU
         1 001235   001251 601000 1                  TNZ     s:5994

   5977  1 001236   077777 473505                    LDP3    -1,AL,PR0
         1 001237   000001 036003                    ADLQ    1,DU
         1 001240   200055 756100                    STQ     RANGE_END+3,,AUTO
         1 001241   200054 453500                    STP3    RANGE_END+2,,AUTO
         1 001242   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001243   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001244   000000 701000 xent               TSX1    VDG$OCOPY
         1 001245   001247 702000 1                  TSX2    s:5978
         1 001246   001251 710000 1                  TRA     s:5994
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:454  

   5978  1 001247   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001250   000000 702211                    TSX2  ! 0,X1

     2971     5980                   %COPYKEY (FKEY=XLATE$ENTRY.OLD_KEY_LO,
     2972     5981                   TKEY=XLATE$ENTRY.OLD_KEY_HI);

   5994  1 001251   200045 470500                    LDP0    XLATE_ENTRY$,,AUTO
         1 001252   000100 100500                    MLR     fill='000'O
         1 001253   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 001254   000002 000010                    ADSC9   2,,PR0                   cn=0,n=8

   5994  1 001255   000000 720100                    LXL0    0,,PR0
         1 001256   000002 100003                    CMPX0   2,DU
         1 001257   001274 601000 1                  TNZ     s:6011

   5994  1 001260   000001 471500                    LDP1    1,,PR0
         1 001261   200045 236100                    LDQ     XLATE_ENTRY$,,AUTO
         1 001262   000003 036003                    ADLQ    3,DU
         1 001263   200055 756100                    STQ     RANGE_END+3,,AUTO
         1 001264   200054 451500                    STP1    RANGE_END+2,,AUTO
         1 001265   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001266   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001267   000000 701000 xent               TSX1    VDG$OCOPY
         1 001270   001272 702000 1                  TSX2    s:5995
         1 001271   001274 710000 1                  TRA     s:6011

   5995  1 001272   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001273   000000 702211                    TSX2  ! 0,X1

     2973     5997                   %COPYKEY (FKEY=XLATE$ENTRY.OLD_KEY_LO,
     2974     5998                   TKEY=XLATE$ENTRY.NEW_KEY);

   6011  1 001274   200045 470500                    LDP0    XLATE_ENTRY$,,AUTO
         1 001275   000100 100500                    MLR     fill='000'O
         1 001276   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 001277   000005 000010                    ADSC9   5,,PR0                   cn=0,n=8
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:455  

   6011  1 001300   000000 720100                    LXL0    0,,PR0
         1 001301   000002 100003                    CMPX0   2,DU
         1 001302   001317 601000 1                  TNZ     s:6014

   6011  1 001303   000001 471500                    LDP1    1,,PR0
         1 001304   200045 236100                    LDQ     XLATE_ENTRY$,,AUTO
         1 001305   000006 036003                    ADLQ    6,DU
         1 001306   200055 756100                    STQ     RANGE_END+3,,AUTO
         1 001307   200054 451500                    STP1    RANGE_END+2,,AUTO
         1 001310   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001311   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001312   000000 701000 xent               TSX1    VDG$OCOPY
         1 001313   001315 702000 1                  TSX2    s:6012
         1 001314   001317 710000 1                  TRA     s:6014

   6012  1 001315   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001316   000000 702211                    TSX2  ! 0,X1

     2975     6014    3              XLATE$ENTRY.OLD_POS_HI# = -1; /* Indicate rekey operation */

   6014  1 001317   777777 220003                    LDX0    -1,DU
         1 001320   200045 470500                    LDP0    XLATE_ENTRY$,,AUTO
         1 001321   000004 440100                    SXL0    4,,PR0
         1 001322   001506 710000 1                  TRA     s:6085

     2976     6015
     2977     6016
     2978     6017
     2979     6018    3            CASE (%XLATE_LOCATION);

     2980     6019    3              IF CURR_TABLE$ = ADDR(NIL) THEN

   6019  1 001323   200040 236100                    LDQ     CURR_TABLE$,,AUTO
         1 001324   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001325   001330 601000 1                  TNZ     s:6024

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:456  
     2981     6020    3                 RETURN;   /* No matching entry:  do nothing */

   6020  1 001326   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001327   000001 702211                    TSX2  ! 1,X1

     2982     6021                   /*
     2983     6022                   * Locations before the affected area are unchanged.
     2984     6023                   */
     2985     6024    3              IF CAND$KEY.BYTES = XLATE$KEY_LO.BYTES

   6024  1 001330   200042 471500                    LDP1    CAND_KEY$,,AUTO
         1 001331   100000 236100                    LDQ     0,,PR1
         1 001332   000033 772000                    QRL     27
         1 001333   200046 473500                    LDP3    XLATE_KEY_LO$,,AUTO
         1 001334   000000 620006                    EAX0    0,QL
         1 001335   300000 236100                    LDQ     0,,PR3
         1 001336   000033 772000                    QRL     27
         1 001337   000000 621006                    EAX1    0,QL
         1 001340   040140 106540                    CMPC    fill='040'O
         1 001341   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         1 001342   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 001343   001371 601000 1                  TNZ     s:6037
         1 001344   200037 474500                    LDP4    @CANDIDATE,,AUTO
         1 001345   400010 222100                    LDX2    8,,PR4
         1 001346   200045 475500                    LDP5    XLATE_ENTRY$,,AUTO
         1 001347   500004 102100                    CMPX2   4,,PR5
         1 001350   001367 604000 1                  TMI     s:6032
         1 001351   001371 601000 1                  TNZ     s:6037
         1 001352   500004 723100                    LXL3    4,,PR5
         1 001353   400010 103100                    CMPX3   8,,PR4
         1 001354   001371 601000 1                  TNZ     s:6037
         1 001355   200047 476500                    LDP6    XLATE_KEY_HI$,,AUTO
         1 001356   600000 236100                    LDQ     0,,PR6
         1 001357   000033 772000                    QRL     27
         1 001360   000000 624006                    EAX4    0,QL
         1 001361   040140 106540                    CMPC    fill='040'O
         1 001362   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:457  
         1 001363   600000 200014                    ADSC9   0,,PR6                   cn=1,n=*X4
         1 001364   001371 601000 1                  TNZ     s:6037
         1 001365   200052 234100                    SZN     RANGE_END,,AUTO
         1 001366   001371 605000 1                  TPL     s:6037

     2986     6025    3                AND (CANDIDATE.POSITION# < XLATE$ENTRY.OLD_POS_LO#
     2987     6026                   /*
     2988     6027                   * As are range end points at the point of an insertion.
     2989     6028                   */
     2990     6029    3                OR CANDIDATE.POSITION# = XLATE$ENTRY.OLD_POS_LO#
     2991     6030    3                AND CANDIDATE.POSITION# = XLATE$ENTRY.OLD_POS_HI#
     2992     6031    3                AND CAND$KEY.BYTES = XLATE$KEY_HI.BYTES AND RANGE_END) THEN
     2993     6032    3                 RETURN;  /* Don't do any translation */

   6032  1 001367   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001370   000001 702211                    TSX2  ! 1,X1

     2994     6033                   /*
     2995     6034                   * If we moved the start of a range, make sure we move the
     2996     6035                   * the end using the same rules.
     2997     6036                   */
     2998     6037    3              RANGE_END = '1'B;

   6037  1 001371   400000 236003                    LDQ     -131072,DU
         1 001372   200052 756100                    STQ     RANGE_END,,AUTO

     2999     6038
     3000     6039                   /*
     3001     6040                   * Interior locations should all collapse to the new location.
     3002     6041                   */
     3003     6042    3              IF CAND$KEY.BYTES < XLATE$KEY_HI.BYTES THEN

   6042  1 001373   200047 474500                    LDP4    XLATE_KEY_HI$,,AUTO
         1 001374   400000 236100                    LDQ     0,,PR4
         1 001375   000033 772000                    QRL     27
         1 001376   000000 622006                    EAX2    0,QL
         1 001377   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:458  
         1 001400   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         1 001401   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         1 001402   001406 603000 1                  TRC     s:6051

     3004     6043    3                 CANDIDATE.POSITION# = 0;

   6043  1 001403   000000 223003                    LDX3    0,DU
         1 001404   200037 475500                    LDP5    @CANDIDATE,,AUTO
         1 001405   500010 743100                    STX3    8,,PR5

     3005     6044                   %CLEARKEY (KEY=CANDIDATE.KEY, INDX=LEVEL-1);

   6051  1 001406   200013 235100                    LDA     LEVEL,,AUTO
         1 001407   000001 735000                    ALS     1
         1 001410   200037 475500                    LDP5    @CANDIDATE,,AUTO
         1 001411   577776 720105                    LXL0    -2,AL,PR5
         1 001412   000002 100003                    CMPX0   2,DU
         1 001413   001425 601000 1                  TNZ     s:6052+2

   6051  1 001414   577777 476505                    LDP6    -1,AL,PR5
         1 001415   200054 456500                    STP6    RANGE_END+2,,AUTO
         1 001416   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001417   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001420   000000 701000 xent               TSX1    VDG$OFREE
         1 001421   001423 702000 1                  TSX2    s:6052
         1 001422   001425 710000 1                  TRA     s:6052+2

   6052  1 001423   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001424   000000 702211                    TSX2  ! 0,X1

   6052  1 001425   200013 235100                    LDA     LEVEL,,AUTO
         1 001426   000001 735000                    ALS     1
         1 001427   200037 470500                    LDP0    @CANDIDATE,,AUTO
         1 001430   077776 450105                    STZ     -2,AL,PR0
         1 001431   077777 450105                    STZ     -1,AL,PR0

     3006     6054                   %COPYKEY (FKEY=XLATE$ENTRY.NEW_KEY, TKEY=CANDIDATE.KEY,
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:459  
     3007     6055                   TINDX=LEVEL-1);

   6068  1 001432   000002 735000                    ALS     2
         1 001433   200045 471500                    LDP1    XLATE_ENTRY$,,AUTO
         1 001434   000105 100500                    MLR     fill='000'O
         1 001435   100005 000010                    ADSC9   5,,PR1                   cn=0,n=8
         1 001436   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8

   6068  1 001437   100005 720100                    LXL0    5,,PR1
         1 001440   000002 100003                    CMPX0   2,DU
         1 001441   001460 601000 1                  TNZ     s:6072

   6068  1 001442   100006 473500                    LDP3    6,,PR1
         1 001443   200013 236100                    LDQ     LEVEL,,AUTO
         1 001444   000023 736000                    QLS     19
         1 001445   000001 136003                    SBLQ    1,DU
         1 001446   200037 036100                    ADLQ    @CANDIDATE,,AUTO
         1 001447   200055 756100                    STQ     RANGE_END+3,,AUTO
         1 001450   200054 453500                    STP3    RANGE_END+2,,AUTO
         1 001451   200054 630500                    EPPR0   RANGE_END+2,,AUTO
         1 001452   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001453   000000 701000 xent               TSX1    VDG$OCOPY
         1 001454   001456 702000 1                  TSX2    s:6069
         1 001455   001460 710000 1                  TRA     s:6072

   6069  1 001456   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001457   000000 702211                    TSX2  ! 0,X1

     3008     6071
     3009     6072    3              IF CANDIDATE.POSITION# <= XLATE$ENTRY.OLD_POS_HI# THEN

   6072  1 001460   200045 470500                    LDP0    XLATE_ENTRY$,,AUTO
         1 001461   000004 720100                    LXL0    4,,PR0
         1 001462   200037 471500                    LDP1    @CANDIDATE,,AUTO
         1 001463   100010 100100                    CMPX0   8,,PR1
         1 001464   001470 604000 1                  TMI     s:6075

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:460  
     3010     6073    3                 CANDIDATE.POSITION# = XLATE$ENTRY.NEW_POS#;

   6073  1 001465   000007 221100                    LDX1    7,,PR0
         1 001466   100010 741100                    STX1    8,,PR1
         1 001467   001506 710000 1                  TRA     s:6085

     3011     6074    3              ELSE
     3012     6075    3                 CANDIDATE.POSITION# = CANDIDATE.POSITION# +

   6075  1 001470   000007 236100                    LDQ     7,,PR0
         1 001471   000022 736000                    QLS     18
         1 001472   000022 732000                    QRS     18
         1 001473   200054 756100                    STQ     RANGE_END+2,,AUTO
         1 001474   100010 236100                    LDQ     8,,PR1
         1 001475   000022 732000                    QRS     18
         1 001476   200054 036100                    ADLQ    RANGE_END+2,,AUTO
         1 001477   000000 620006                    EAX0    0,QL
         1 001500   100010 740100                    STX0    8,,PR1
         1 001501   001506 710000 1                  TRA     s:6085

     3013     6076    3                   XLATE$ENTRY.NEW_POS_INCR#;
     3014     6077
     3015     6078
     3016     6079
     3017     6080    3            CASE (ELSE);

     3018     6081    3              CALL VDG$ESCREECH (ACTION);

   6081  1 001502   200004 630500                    EPPR0   @ACTION,,AUTO
         1 001503   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001504   000000 701000 xent               TSX1    VDG$ESCREECH
         1 001505   000000 011000                    NOP     0

     3019     6082    3            END;

     3020     6083
     3021     6084
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:461  
     3022     6085    2           RETURN;

   6085  1 001506   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001507   000001 702211                    TSX2  ! 1,X1

   6080  1 001510                       OALLOC_FAIL* null
     3023     6086
     3024     6087
     3025     6088
     3026     6089    2   OALLOC_FAILED: ;
     3027     6090    2           ALTRETURN;

   6090  1 001510   200036 221300                    LDX1  ! BLOCK_KEY$+1,,AUTO
         1 001511   000000 702211                    TSX2  ! 0,X1
     3028     6091
     3029     6092    2   END CANDIDATE_LOCATION;
     3030     6093
     3031     6094    1   END VDG$XLATE_LOCATIONS;

PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:462  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$XLATE_LOCATIONS.
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:463  

 **** Variables and constants ****

  ****  Section 000 RoData VDG$XLATE_LOCATIONS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)   r     1 ABSOLUTE_EOF

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ACTION                   33-0-0/w PTR         r     1 @BLOCK_DESC
    37-0-0/w PTR         r     1 @CANDIDATE                33-0-0/w PTR         r     1 @EVAL
    27-0-0/w PTR         r     1 @OPERAND                   3-0-0/w PTR         r     1 @XLATE_LOCATIONS
    *0-0-0/w SBIN        r     1 ACTION                    *0-0-0/w STRC(936)   r     1 BLOCK_DESC
    24-0-0/w BIT         r     1 BLOCK_IS_CANDIDATE        35-0-0/w PTR         r     1 BLOCK_KEY$
    *0-0-0/w STRC(324)   r     1 CANDIDATE                 42-0-0/w PTR         r     1 CAND_KEY$
    40-0-0/w PTR         r     1 CURR_TABLE$               *0-0-0/w STRC(2124)  r     1 EVAL
    43-0-0/w SBIN        r     1 INDX                      44-0-0/w SBIN        r     1 INSERT_BEFORE
    14-0-0/w PTR         r     1 L0_NODE$                  15-0-0/w PTR         r     1 L1_NODE$
    16-0-0/w PTR         r     1 L2_NODE$                  13-0-0/w SBIN        r     1 LEVEL
    34-0-0/w SBIN        r     1 LEVEL                     17-0-0/w PTR         r     1 NAME_DATA$
    20-0-0/w PTR         r     1 NAME_DESC$                *0-0-0/w STRC(144)   r     1 OPERAND
     5-0-0/w PTR         r     1 PREFIX_KEY$(0:5)
    41-0-0/w PTR         r     1 PREV_TABLE$               52-0-0/b BIT         r     1 RANGE_END
    25-0-0/w BIT         r     1 SOURCE_STRING_OPERAND
    50-0-0/w PTR         r     1 SPLIT_TABLE$              23-0-0/w PTR         r     1 THIS_EVAL$
    31-0-0/w PTR         r     1 THIS_EVAL$                30-0-0/w PTR         r     1 THIS_WILD$
    51-0-0/w SBIN        r     1 VAR_LEN                   22-0-0/w PTR         r     1 WINDOW_BLOCK$
    21-0-0/w PTR         r     1 WINDOW_SPEC$              45-0-0/w PTR         r     1 XLATE_ENTRY$
    47-0-0/w PTR         r     1 XLATE_KEY_HI$             46-0-0/w PTR         r     1 XLATE_KEY_LO$
    *0-0-0/w STRC(828)   r     1 XLATE_LOCATIONS

  ****  SYMREF variables  ****
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:464  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 BLOCK$KEY                  0-0-0/w ASTR(9)     r     1 CAND$KEY
     0-0-0/w STRC(828)   r     1 CURR$TABLE                 0-0-0/w STRC(468)   r     1 L0$NODE
     0-0-0/w STRC(468)   r     1 L1$NODE                    0-0-0/w STRC(468)   r     1 L2$NODE
     0-0-0/w STRC        r     1 NAME$DATA                  0-0-0/w ASTR(90)    r     1 NAME$DATA_BUFFER
     0-0-0/w STRC(144)   r     1 NAME$DATA_POINTER          0-0-0/w STRC(936)   r     1 NAME$DESC
     0-0-0/w STRC(828)   r     1 PREV$TABLE                 0-0-0/w STRC(828)   r     1 SPLIT$TABLE
     0-0-0/w STRC(2124)  r     1 THIS$EVAL                  0-0-0/w STRC(2124)  r     1 THIS$EVAL
     0-0-0/c ACHR        r     1 VAR$LEN                    0-0-0/w STRC(936)   r     1 VD$BLOCK_DESC
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w STRC(864)   r     1 VD$STREAM
     0-0-0/w ASTR(9)     r     1 VD$TEXTC                   0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w STRC(792)   r     1 VD$WILD_STRINGS            0-0-0/w STRC(792)   r     1 WILD
     0-0-0/w STRC(180)   r     1 WINDOW$BLOCK               0-0-0/w STRC(900)   r     1 WINDOW$SPEC
     0-0-0/w STRC(288)   r     1 XLATE$ENTRY                0-0-0/w ASTR(9)     r     1 XLATE$KEY_HI
     0-0-0/w ASTR(9)     r     1 XLATE$KEY_LO


   Procedure VDG$XLATE_LOCATIONS requires 842 words for executable code.
   Procedure VDG$XLATE_LOCATIONS requires 48 words of local(AUTO) storage.

    No errors detected in file VDG$UTILITY.:VDA5TSI    .
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:465  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:466  
          MINI XREF LISTING

ABSOLUTE_EOF
      2517**DCL      3903<>CALL
ACTION
      2458**DCL       103--PROC     3899>>IF       5893>>IF       5906>>DOCASE   6081<>CALL
BEGIN IN PROCEDURE CANDIDATE_LOCATION
      5845**LABEL    5841--GOTO
BLOCK$KEY.BYTES IN PROCEDURE EXAMINE_BLOCK_DESC
      4841**DCL      4861>>IF       4881>>IF
BLOCK$KEY.LENGTH# IN PROCEDURE EXAMINE_BLOCK_DESC
      4839**DCL      4841--IMP-SIZ  4861>>IF       4881>>IF
BLOCK_DESC IN PROCEDURE EXAMINE_BLOCK_DESC
      4678**DCL      4668--PROC
BLOCK_DESC.FILE_KEY.REP# IN PROCEDURE EXAMINE_BLOCK_DESC
      4716**DCL      4858>>IF
BLOCK_DESC.FILE_KEY.V$ IN PROCEDURE EXAMINE_BLOCK_DESC
      4716**DCL      4858>>ASSIGN   4858--ASSIGN
BLOCK_DESC.RANGE.ENDD IN PROCEDURE EXAMINE_BLOCK_DESC
      4768**DCL      4889<>CALL
BLOCK_DESC.RANGE.START IN PROCEDURE EXAMINE_BLOCK_DESC
      4740**DCL      4887<>CALL
BLOCK_DESC.RANGE.START.EOF IN PROCEDURE EXAMINE_BLOCK_DESC
      4756**DCL      4861>>IF
BLOCK_DESC.RANGE.START.KEY IN PROCEDURE EXAMINE_BLOCK_DESC
      4752**DCL      4861>>IF       4868>>IF
BLOCK_DESC.RANGE.START.KEY.REP# IN PROCEDURE EXAMINE_BLOCK_DESC
      4754**DCL      4878>>IF
BLOCK_DESC.RANGE.START.KEY.V$ IN PROCEDURE EXAMINE_BLOCK_DESC
      4754**DCL      4878>>ASSIGN   4878--ASSIGN
BLOCK_IS_CANDIDATE
      2558**DCL      3987>>IF       4557>>IF       4849<<ASSIGN   4885<<ASSIGN
BLOCK_KEY$ IN PROCEDURE EXAMINE_BLOCK_DESC
      4820**DCL      4831--IMP-PTR  4858<<ASSIGN   4858<<ASSIGN   4861>>IF       4861>>IF       4878<<ASSIGN
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:467  
      4878<<ASSIGN   4881>>IF       4881>>IF
CAND$KEY.BYTES IN PROCEDURE CANDIDATE_LOCATION
      5650**DCL      5890>>IF       5890>>IF       5893>>IF       6024>>IF       6024>>IF       6042>>IF
CAND$KEY.LENGTH# IN PROCEDURE CANDIDATE_LOCATION
      5648**DCL      5650--IMP-SIZ  5890>>IF       5890>>IF       5893>>IF       6024>>IF       6024>>IF
      6042>>IF
CANDIDATE IN PROCEDURE CANDIDATE_LOCATION
      5268**DCL      5258--PROC     5843--ENTRY
CANDIDATE.EOF IN PROCEDURE CANDIDATE_LOCATION
      5286**DCL      5848>>IF
CANDIDATE.KEY IN PROCEDURE CANDIDATE_LOCATION
      5282**DCL      5977>>ASSIGN   6052<<ASSIGN   6068<<ASSIGN
CANDIDATE.KEY.REP# IN PROCEDURE CANDIDATE_LOCATION
      5284**DCL      5860>>IF       5977>>IF       6051>>IF
CANDIDATE.KEY.V$ IN PROCEDURE CANDIDATE_LOCATION
      5284**DCL      5860>>ASSIGN   5860--ASSIGN   5977>>CALL     5977>>CALL     6051>>CALL     6051>>CALL
      6068<>CALL
CANDIDATE.POSITION# IN PROCEDURE CANDIDATE_LOCATION
      5286**DCL      6024>>IF       6024>>IF       6024>>IF       6043<<ASSIGN   6072>>IF       6073<<ASSIGN
      6075<<ASSIGN   6075>>ASSIGN
CANDIDATE_LOCATION
      5258**PROC     4592--CALL     4887--CALL     5193--CALL     5197--CALL
CANDIDATE_LOCATION_END IN PROCEDURE CANDIDATE_LOCATION
      5843**ENTRY    4594--CALL     4889--CALL     5195--CALL     5199--CALL
CANDIDATE_LOCATION_FAILED IN PROCEDURE EXAMINE_BLOCK_DESC
      4885**LABEL    4887--CALLALT  4889--CALLALT
CANDIDATE_LOCATION_FAILED IN PROCEDURE EXAMINE_EVAL
      5205**LABEL    5193--CALLALT  5195--CALLALT  5197--CALLALT  5199--CALLALT
CANDIDATE_LOCATION_FAILED IN PROCEDURE EXAMINE_OPERAND
      4590**LABEL    4592--CALLALT  4594--CALLALT
CAND_KEY$ IN PROCEDURE CANDIDATE_LOCATION
      5292**DCL      5640--IMP-PTR  5860<<ASSIGN   5860<<ASSIGN   5890>>IF       5890>>IF       5890>>IF
      5890>>IF       5893>>IF       5893>>IF       6024>>IF       6024>>IF       6024>>IF       6024>>IF
      6042>>IF       6042>>IF
CURR$TABLE IN PROCEDURE CANDIDATE_LOCATION
      5310**DCL      5925--CALL     5938--CALL
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:468  
CURR$TABLE.FLINK$ IN PROCEDURE CANDIDATE_LOCATION
      5336**DCL      5902>>ASSIGN   5929<<ASSIGN   5942>>ASSIGN   5943<<ASSIGN   5952>>ASSIGN
CURR$TABLE.MX_ENTRIES# IN PROCEDURE CANDIDATE_LOCATION
      5336**DCL      5921>>IF       5936>>IF
CURR$TABLE.N_ENTRIES# IN PROCEDURE CANDIDATE_LOCATION
      5336**DCL      5868>>DOINDEX  5921>>IF       5932>>ASSIGN   5933<<ASSIGN   5933>>ASSIGN   5936>>IF
      5944>>ASSIGN   5948<<ASSIGN   5948>>ASSIGN   5950>>IF       5951>>ASSIGN   5956>>DOINDEX  5960<<ASSIGN
      5960>>ASSIGN
CURR$TABLE.XLATES IN PROCEDURE CANDIDATE_LOCATION
      5391**DCL      5869--ASSIGN   5925--CALL     5932--ASSIGN   5938--CALL     5945--ASSIGN   5946--ASSIGN
      5957<<ASSIGN   5957>>ASSIGN   5959--ASSIGN
CURR_TABLE$ IN PROCEDURE CANDIDATE_LOCATION
      5290**DCL      5310--IMP-PTR  5851<<ASSIGN   5865>>DOWHILE  5868>>DOINDEX  5869>>ASSIGN   5901>>ASSIGN
      5902<<ASSIGN   5902>>ASSIGN   5908>>IF       5917>>IF       5918<<ASSIGN   5919>>IF       5920<<ASSIGN
      5921>>IF       5921>>IF       5924>>ASSIGN   5925<>CALL     5929>>ASSIGN   5930>>ASSIGN   5932>>ASSIGN
      5932>>ASSIGN   5933>>ASSIGN   5933>>ASSIGN   5936>>IF       5936>>IF       5942>>ASSIGN   5943>>ASSIGN
      5944>>ASSIGN   5946>>ASSIGN   5948>>ASSIGN   5948>>ASSIGN   5950>>IF       5951>>ASSIGN   5952<<ASSIGN
      5952>>ASSIGN   5956>>DOINDEX  5957>>ASSIGN   5957>>ASSIGN   5959>>ASSIGN   5960>>ASSIGN   5960>>ASSIGN
      6019>>IF
EACH_TABLE_IN_CHAIN IN PROCEDURE CANDIDATE_LOCATION
      5865**LABEL    5892--EXIT     5897--EXIT
EVAL IN PROCEDURE EXAMINE_EVAL
      4953**DCL      4943--PROC
EVAL.ENCLOSING.ENDD IN PROCEDURE EXAMINE_EVAL
      5030**DCL      5195<>CALL
EVAL.ENCLOSING.START IN PROCEDURE EXAMINE_EVAL
      5002**DCL      5193<>CALL
EVAL.RANGE.ENDD IN PROCEDURE EXAMINE_EVAL
      5099**DCL      5199<>CALL
EVAL.RANGE.START IN PROCEDURE EXAMINE_EVAL
      5071**DCL      5197<>CALL
EXAMINE_BLOCK_DESC
      4668**PROC     3954--CALL     3982--CALL     4554--CALL
EXAMINE_BLOCK_DESC_FAILED
      3992**LABEL    3954--CALLALT  3982--CALLALT
EXAMINE_BLOCK_DESC_FAILED IN PROCEDURE EXAMINE_OPERAND
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:469  
      4604**LABEL    4554--CALLALT
EXAMINE_EVAL
      4943**PROC     3989--CALL     4569--CALL
EXAMINE_EVAL_FAILED
      3992**LABEL    3989--CALLALT
EXAMINE_EVAL_FAILED IN PROCEDURE EXAMINE_OPERAND
      4604**LABEL    4569--CALLALT
EXAMINE_OPERAND
      4052**PROC     3932--CALL     3972--CALL
EXAMINE_OPERAND_FAILED
      3992**LABEL    3932--CALLALT  3972--CALLALT
INDX IN PROCEDURE CANDIDATE_LOCATION
      5293**DCL      5868<<DOINDEX  5869>>ASSIGN   5896>>ASSIGN   5956<<DOINDEX  5957>>ASSIGN   5957>>ASSIGN
INSERT_BEFORE IN PROCEDURE CANDIDATE_LOCATION
      5294**DCL      5852<<ASSIGN   5896<<ASSIGN   5908>>IF       5946>>ASSIGN   5950>>IF       5951<<ASSIGN
      5951>>ASSIGN   5956>>DOINDEX  5959>>ASSIGN
L0$NODE.HEAD$
      2653**DCL      3939>>ASSIGN   3966>>ASSIGN
L0_NODE$
      2550**DCL      2570--IMP-PTR  3935<<ASSIGN   3938>>IF       3939>>ASSIGN   3962<<ASSIGN   3965>>IF
      3966>>ASSIGN
L1$NODE.DESC.DATA$
      2744**DCL      3943>>ASSIGN
L1$NODE.DESC.SPEC.V$
      2742**DCL      3970>>ASSIGN
L1$NODE.FLINK$
      2689**DCL      3958>>ASSIGN   3998>>ASSIGN
L1$NODE.HEAD$
      2746**DCL      3976>>ASSIGN
L1_NODE$
      2551**DCL      2663--IMP-PTR  3937<<ASSIGN   3939<<ASSIGN   3942>>DOWHILE  3943>>ASSIGN   3958<<ASSIGN
      3958>>ASSIGN   3964<<ASSIGN   3966<<ASSIGN   3969>>DOWHILE  3970>>ASSIGN   3976>>ASSIGN   3998<<ASSIGN
      3998>>ASSIGN
L2$NODE.DESC.SPEC.V$
      2835**DCL      3979>>ASSIGN
L2$NODE.FLINK$
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:470  
      2782**DCL      3995>>ASSIGN
L2_NODE$
      2552**DCL      2756--IMP-PTR  3976<<ASSIGN   3978>>DOWHILE  3979>>ASSIGN   3995<<ASSIGN   3995>>ASSIGN
LEVEL
      2549**DCL      3918<<DOINDEX  3927>>IF       3927>>ASSIGN   3927>>ASSIGN   3927>>ASSIGN   3927>>ASSIGN
      5860>>IF       5860>>ASSIGN   5860>>ASSIGN   5977>>ASSIGN   5977>>IF       5977>>CALL     5977>>CALL
      6051>>IF       6051>>CALL     6051>>CALL     6052>>ASSIGN   6068>>ASSIGN   6068>>CALL
LEVEL IN PROCEDURE EXAMINE_BLOCK_DESC
      4819**DCL      4867<<DOINDEX  4868>>IF       4878>>IF       4878>>ASSIGN   4878>>ASSIGN   4881>>IF
      4881>>IF
LREAD_FAILED
      3992**LABEL    3903--CALLALT
NAME$DATA.CLASS#
      2861**DCL      3945>>DOCASE   3951<>CALL
NAME$DATA_BUFFER.BYTES
      2961**DCL      3949--ASSIGN
NAME$DATA_BUFFER.LENGTH#
      2959**DCL      2961--IMP-SIZ
NAME$DATA_POINTER.V$
      2905**DCL      3947>>ASSIGN
NAME$DESC
      2974**DCL      3954<>CALL
NAME_DATA$
      2553**DCL      2857--IMP-PTR  2879--IMP-PTR  2933--IMP-PTR  3943<<ASSIGN   3944>>IF       3945>>DOCASE
      3947>>ASSIGN   3949>>ASSIGN   3951>>CALL
NAME_DESC$
      2554**DCL      2974--IMP-PTR  3947<<ASSIGN   3949<<ASSIGN   3953>>IF       3954>>CALL
OALLOC_FAILED IN PROCEDURE CANDIDATE_LOCATION
      6080**LABEL    5925--CALLALT  5938--CALLALT
OPERAND IN PROCEDURE EXAMINE_OPERAND
      4062**DCL      4052--PROC     4558--IF
OPERAND.EDIT_BLOCK$ IN PROCEDURE EXAMINE_OPERAND
      4066**DCL      4553>>IF       4554>>CALL     4558>>IF
OPERAND.EVAL$ IN PROCEDURE EXAMINE_OPERAND
      4066**DCL      4567>>ASSIGN
PREFIX_KEY$
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:471  
      2548**DCL      3915<<ASSIGN   3915<<ASSIGN   3927<<ASSIGN   3927<<ASSIGN   4861>>IF       4861>>IF
      4881>>IF       4881>>IF
PREV$TABLE.FLINK$ IN PROCEDURE CANDIDATE_LOCATION
      5472**DCL      5929>>ASSIGN   5930<<ASSIGN
PREV_TABLE$ IN PROCEDURE CANDIDATE_LOCATION
      5291**DCL      5446--IMP-PTR  5850<<ASSIGN   5901<<ASSIGN   5918>>ASSIGN   5924<<ASSIGN   5929>>ASSIGN
      5930>>ASSIGN
RANGE_END IN PROCEDURE CANDIDATE_LOCATION
      5300**DCL      5840<<ASSIGN   5845<<ASSIGN   5845>>ASSIGN   6024>>IF       6037<<ASSIGN
SOURCE_STRING_OPERAND
      2559**DCL      4552<<ASSIGN   4560<<ASSIGN   4573>>IF       4574<<ASSIGN   5840>>ASSIGN
SPLIT$TABLE.FLINK$ IN PROCEDURE CANDIDATE_LOCATION
      5734**DCL      5942<<ASSIGN
SPLIT$TABLE.N_ENTRIES# IN PROCEDURE CANDIDATE_LOCATION
      5734**DCL      5944<<ASSIGN   5945>>ASSIGN   5948>>ASSIGN
SPLIT$TABLE.XLATES IN PROCEDURE CANDIDATE_LOCATION
      5789**DCL      5946--ASSIGN
SPLIT_TABLE$ IN PROCEDURE CANDIDATE_LOCATION
      5298**DCL      5708--IMP-PTR  5938<>CALL     5942>>ASSIGN   5943>>ASSIGN   5944>>ASSIGN   5945>>ASSIGN
      5946>>ASSIGN   5948>>ASSIGN
THIS$EVAL
      3224**DCL      3989<>CALL
THIS$EVAL.BLINK$
      3250**DCL      3991>>ASSIGN
THIS$EVAL IN PROCEDURE EXAMINE_OPERAND
      4313**DCL      4569<>CALL
THIS$EVAL.BLINK$ IN PROCEDURE EXAMINE_OPERAND
      4339**DCL      4571>>ASSIGN
THIS_EVAL$
      2557**DCL      3224--IMP-PTR  3986<<ASSIGN   3988>>DOWHILE  3989>>CALL     3991<<ASSIGN   3991>>ASSIGN
THIS_EVAL$ IN PROCEDURE EXAMINE_OPERAND
      4302**DCL      4313--IMP-PTR  4567<<ASSIGN   4568>>DOWHILE  4569>>CALL     4571<<ASSIGN   4571>>ASSIGN
THIS_WILD$ IN PROCEDURE EXAMINE_OPERAND
      4301**DCL      4198--IMP-PTR  4579<<ASSIGN   4582>>DOUNTIL  4583<<ASSIGN   4583>>ASSIGN   4590>>IF
      4592>>CALL     4594>>CALL
VAR$LEN IN PROCEDURE CANDIDATE_LOCATION
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:472  
      5837**DCL      5946<<ASSIGN   5946>>ASSIGN
VAR_LEN IN PROCEDURE CANDIDATE_LOCATION
      5299**DCL      5837--IMP-SIZ  5945<<ASSIGN   5946>>ASSIGN   5946>>ASSIGN
VD$BLOCK_DESC
      3673**DCL      3982<>CALL     4554<>CALL
VD$BLOCK_DESC.OPTIONS.STRUCTURE$
      3794**DCL      4558>>IF
VD$PORT.LEVEL.INTERNAL$
      3662**DCL      3935>>ASSIGN   3962>>ASSIGN
VD$STREAM
      3469**DCL      3903<>CALL
VD$STREAM.PORT$
      3495**DCL      3935>>ASSIGN   3962>>ASSIGN
VD$TEXTC.BYTES
      3830**DCL      4861>>IF       4881>>IF
VD$TEXTC.LENGTH#
      3828**DCL      3830--IMP-SIZ  4861>>IF       4881>>IF
VD$TEXTC_REMOTE
      3860**DCL      5977<>CALL     5994<>CALL     6011<>CALL     6051<>CALL     6068<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3889**DCL      3891--IMP-SIZ  3915--ASSIGN   3927--ASSIGN   4858--ASSIGN   4878--ASSIGN   5860--ASSIGN
      5877--ASSIGN   5887--ASSIGN   5977>>CALL     5994>>CALL     6011>>CALL     6051>>CALL     6068>>CALL
VD$WILD_STRINGS.N_WILDCARDS# IN PROCEDURE EXAMINE_OPERAND
      4111**DCL      4579>>ASSIGN
VDA$LREAD
      2461**DCL-ENT  3903--CALL
VDG$ESCREECH
      2465**DCL-ENT  3951--CALL     6081--CALL
VDG$OALLOC
      2462**DCL-ENT  5925--CALL     5938--CALL
VDG$OCOPY
      2463**DCL-ENT  5977--CALL     5994--CALL     6011--CALL     6068--CALL
VDG$OFREE
      2464**DCL-ENT  6051--CALL
VD_6E.LOCATIONS$
      2481**DCL      3903>>CALL     3935>>ASSIGN
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:473  
VD_6E.SOURCE.OPERAND
      2495**DCL      3932<>CALL     4558--IF
VD_6E.STRUCTURE_SCRATCH$
      2483**DCL      4558>>IF
VD_6E.WILD_STRINGS$
      2499**DCL      4083--IMP-PTR  4579>>ASSIGN   4579>>ASSIGN   4582>>DOUNTIL
VD_6E.WINDOWS$
      2482**DCL      3962>>ASSIGN
WILD.W IN PROCEDURE EXAMINE_OPERAND
      4226**DCL      4579--ASSIGN   4583--ASSIGN
WILD.W.RANGE.ENDD IN PROCEDURE EXAMINE_OPERAND
      4278**DCL      4594<>CALL
WILD.W.RANGE.START IN PROCEDURE EXAMINE_OPERAND
      4250**DCL      4592<>CALL
WILD.W.RANGE.START.EOF IN PROCEDURE EXAMINE_OPERAND
      4266**DCL      4590>>IF
WINDOW$BLOCK.EDIT_BLOCK$
      3213**DCL      3981>>IF       3982>>CALL
WINDOW$BLOCK.EVAL$
      3213**DCL      3986>>ASSIGN
WINDOW$SPEC.OPERAND
      3160**DCL      3972<>CALL
WINDOW_BLOCK$
      2556**DCL      3187--IMP-PTR  3979<<ASSIGN   3980>>IF       3981>>IF       3982>>CALL     3986>>ASSIGN
WINDOW_SPEC$
      2555**DCL      3121--IMP-PTR  3970<<ASSIGN   3971>>IF       3972>>CALL
XLATE$ENTRY.NEW_KEY IN PROCEDURE CANDIDATE_LOCATION
      5626**DCL      6011<<ASSIGN   6068>>ASSIGN
XLATE$ENTRY.NEW_KEY.REP# IN PROCEDURE CANDIDATE_LOCATION
      5628**DCL      6068>>IF
XLATE$ENTRY.NEW_KEY.V$ IN PROCEDURE CANDIDATE_LOCATION
      5628**DCL      6011<>CALL     6068>>CALL     6068>>CALL
XLATE$ENTRY.NEW_POS# IN PROCEDURE CANDIDATE_LOCATION
      5630**DCL      6073>>ASSIGN
XLATE$ENTRY.NEW_POS_INCR# IN PROCEDURE CANDIDATE_LOCATION
      5630**DCL      6075>>ASSIGN
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:474  
XLATE$ENTRY.OLD_KEY_HI IN PROCEDURE CANDIDATE_LOCATION
      5611**DCL      5994<<ASSIGN
XLATE$ENTRY.OLD_KEY_HI.REP# IN PROCEDURE CANDIDATE_LOCATION
      5613**DCL      5887>>IF
XLATE$ENTRY.OLD_KEY_HI.V$ IN PROCEDURE CANDIDATE_LOCATION
      5613**DCL      5887>>ASSIGN   5887--ASSIGN   5994<>CALL
XLATE$ENTRY.OLD_KEY_LO IN PROCEDURE CANDIDATE_LOCATION
      5597**DCL      5977<<ASSIGN   5994>>ASSIGN   6011>>ASSIGN
XLATE$ENTRY.OLD_KEY_LO.REP# IN PROCEDURE CANDIDATE_LOCATION
      5599**DCL      5877>>IF       5994>>IF       6011>>IF
XLATE$ENTRY.OLD_KEY_LO.V$ IN PROCEDURE CANDIDATE_LOCATION
      5599**DCL      5877>>ASSIGN   5877--ASSIGN   5977<>CALL     5994>>CALL     5994>>CALL     6011>>CALL
      6011>>CALL
XLATE$ENTRY.OLD_POS_HI# IN PROCEDURE CANDIDATE_LOCATION
      5615**DCL      6014<<ASSIGN   6024>>IF       6072>>IF
XLATE$ENTRY.OLD_POS_LO# IN PROCEDURE CANDIDATE_LOCATION
      5615**DCL      6024>>IF       6024>>IF
XLATE$KEY_HI.BYTES IN PROCEDURE CANDIDATE_LOCATION
      5696**DCL      5890>>IF       6024>>IF       6042>>IF
XLATE$KEY_HI.LENGTH# IN PROCEDURE CANDIDATE_LOCATION
      5694**DCL      5696--IMP-SIZ  5890>>IF       6024>>IF       6042>>IF
XLATE$KEY_LO.BYTES IN PROCEDURE CANDIDATE_LOCATION
      5673**DCL      5890>>IF       5893>>IF       6024>>IF
XLATE$KEY_LO.LENGTH# IN PROCEDURE CANDIDATE_LOCATION
      5671**DCL      5673--IMP-SIZ  5890>>IF       5893>>IF       6024>>IF
XLATE_ENTRY$ IN PROCEDURE CANDIDATE_LOCATION
      5295**DCL      5583--IMP-PTR  5869<<ASSIGN   5877>>IF       5877>>ASSIGN   5877>>ASSIGN   5887>>IF
      5887>>ASSIGN   5887>>ASSIGN   5932<<ASSIGN   5959<<ASSIGN   5977>>ASSIGN   5977>>CALL     5994>>ASSIGN
      5994>>ASSIGN   5994>>IF       5994>>CALL     5994>>CALL     5994>>CALL     6011>>ASSIGN   6011>>ASSIGN
      6011>>IF       6011>>CALL     6011>>CALL     6011>>CALL     6014>>ASSIGN   6024>>IF       6024>>IF
      6024>>IF       6068>>ASSIGN   6068>>IF       6068>>CALL     6068>>CALL     6072>>IF       6073>>ASSIGN
      6075>>ASSIGN
XLATE_KEY_HI$ IN PROCEDURE CANDIDATE_LOCATION
      5297**DCL      5686--IMP-PTR  5887<<ASSIGN   5887<<ASSIGN   5890>>IF       5890>>IF       6024>>IF
      6024>>IF       6042>>IF       6042>>IF
XLATE_KEY_LO$ IN PROCEDURE CANDIDATE_LOCATION
PL6.E3A0      #018=VDG$XLATE_LOCATIONS File=VDG$UTILITY.:VDA5TSI                 FRI 07/04/97 11:25 Page:475  
      5296**DCL      5663--IMP-PTR  5877<<ASSIGN   5877<<ASSIGN   5890>>IF       5890>>IF       5893>>IF
      5893>>IF       6024>>IF       6024>>IF
XLATE_LOCATIONS
      2329**DCL       103--PROC     5851--ASSIGN   5920--ASSIGN
XLATE_LOCATIONS.FILE_KEY.REP#
      2368**DCL      3915>>IF
XLATE_LOCATIONS.FILE_KEY.V$
      2368**DCL      3915>>ASSIGN   3915--ASSIGN
XLATE_LOCATIONS.LEVEL#
      2370**DCL      3918>>DOINDEX  4861>>IF       4867>>DOINDEX
XLATE_LOCATIONS.N_ENTRIES#
      2355**DCL      3899>>IF
XLATE_LOCATIONS.PREFIX.KEY.REP#
      2395**DCL      3927>>IF
XLATE_LOCATIONS.PREFIX.KEY.V$
      2395**DCL      3927>>ASSIGN   3927--ASSIGN
