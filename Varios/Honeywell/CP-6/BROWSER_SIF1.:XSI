        PROGRAM BROWSER
        CHARACTER MODEL*31, CHAR2*2, COL_TXT*500
!       CHARACTER Q_CHECK*40, ULIST*50, OLD_VAL*60, NEW_VAL*60
!       INTEGER QNUM, COL
        CHARACTER*512 APIREC, APIDESC, HDR0, HDR1, HDR2, REC
        CHARACTER ACTION, CMD*800, CR, TYPE*9, MODE*6
        CHARACTER SAVMOD*31, COND*300, INFO(20)*80
        CHARACTER BGN1*18, BGN2*11, BGN_TEXT*100
        INTEGER W, H, TNUM, TLAST, LINE, CNUM, PLUS
        INTEGER  Q, DESC_N, DESC(32,3), I, J, START, LCV
        INTEGER DESC_DFLT(32,3)
        LOGICAL ALL_COLS, FIRST, NORMAL
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        COMMON/INFO/INFO
        INTEGER ALINE, RNUM, ANUM
        INFO(1)  = 'The BROWSER was first written as a demonstration'//
     &      ' tool for the newly extended'
        INFO(2)  = 'Application Program Interface (API) for ARES.  It'//
     &      ' has grown to be quite'
        INFO(3)  = 'useful, as we hope you will find out yourself.  '//
     &      'Below are some hints'
        INFO(4)  = 'and the known shortcoming of BROWSER''s '//
     &      'operation.  Have fun!'
        INFO(5)  = ' '
        INFO(6)  = 'A ''0'' or <CR> entered at any prompt will exit '//
     &      'out of that screen and'
        INFO(7)  = 'place you at the previous level''s screen.  A '//
     &      '''0'' entered at the '
        INFO(8)  = '''Enter <CR> for more...'' prompt will cancel '//
     &      'all pending output.'
        INFO(9)  = ' '
        INFO(10) = 'The maximun number of tables that can be listed '//
     &      'is 37.  For'
        INFO(11) = 'columns, the maximum is 36.  We believe these '//
     &      'limits to be generous.'
        INFO(12) = ' '
        INFO(13) = 'When querying a table, the selection of columns '//
     &      'whose widths total more than'
        INFO(14) = 'the width of the screen will cause the ouput to '//
     &      'run off the right side of'
        INFO(15) = 'the screen.  Select columns accordingly.'
        INFO(16) = ' '
        INFO(17) = 'Constraints take the form of ''WHERE col_name = '//
     &      'something AND/OR...'' and'
        INFO(18) = '''ORDER BY col_name/col_num'' simply.  See your '//
     &      'ARES manual for a more'
        INFO(19) = 'complete description of constraint expressions '//
     &      'under the SELECT command.'
        INFO(20) = ' '
        CALL INITCRT(W,H)
        CALL ARES_INIT(ERRCODE)
        CALL COPTON
        CALL CRT(2)
        CALL CURSOR(20,8)
        CALL WRITE('Welcome to the database BROWSER!',33)
        CALL CURSOR(20,10)
5       CALL PROMPT('$The model name to browse==> ')
        CALL KEYIN(MODEL,31)
        IF ((MODEL(1:1).EQ.'0').OR.(MODEL(1:4).EQ.'    ')) THEN
            CALL CRT(2)
            CALL CRTFLSHX
            CALL CURSOR(1,22)
            CALL CRTFLSHX
            CALL WRITE('Thank you for using the database BROWSER!',41)
            GO TO 999
        ENDIF
        SAVMOD = MODEL
        CALL CURSOR(1,15)
        CALL CRT(5)
        CALL ARES_INVOKE(MODEL)
        IF (ERRCODE .NE. 0) THEN
            CALL CURSOR(1,15)
            CALL WRITE('',1)
            CALL CRTFLSHX
            CALL ARES_ERRMSG
            CALL CURSOR(20,10)
            CALL CRT(5)
            GOTO 5
        ENDIF
 
        FIRST = .TRUE.
        ALINE = 15
10      CALL CRT(2)
        CALL CURSOR(23,7)
        CALL WRITE('Action Menu',11)
        CALL CURSOR(20,9)
        CALL WRITE('0.  Exit the database BROWSER',29)
        CALL CURSOR(20,10)
        CALL WRITE('1.  Print BROWSER information',29)
        CALL CURSOR(20,11)
        CALL WRITE('2.  List items in the database description',42)
        CALL CURSOR(20,12)
        CALL WRITE('3.  Display items in the database description',45)
        CALL CURSOR(20,13)
        CALL WRITE('4.  Query data in the database',30)
!       CALL WRITE('4.  Manipulate data in the database',35)
        IF (.NOT.FIRST) THEN
            ALINE = 16
            CALL CURSOR(20,14)
            CALL WRITE('5.  Change the model',20)
        ENDIF
        CALL CURSOR(20,ALINE)
15      CALL PROMPT('$Enter the Action number==> ')
        CALL KEYIN(ACTION,2)
 
        GO TO (600,100,200,300,401) (ICHAR(ACTION)-48)
        IF ((ACTION.EQ.'0').OR.(ACTION(1:2).EQ.'  ')) THEN
            CALL CRT(2)
            CALL CRTFLSHX
            CALL CURSOR(1,22)
            CALL CRTFLSHX
            CALL WRITE('Thank you for using the database BROWSER!',41)
            GO TO 999
        ENDIF
19      CALL CURSOR(20,20)
        CALL WRITE('INVALID Action number!  Try again!',36)
        CALL CURSOR(20,ALINE)
        CALL CRT(5)
        GO TO 15
 
100     CONTINUE
        FIRST = .FALSE.
 
20      CALL CRT(2)
        CALL CURSOR(30,6)
        CALL WRITE('List Menu',9)
        CALL CURSOR(27,8)
        CALL WRITE('0.  Exit to the Action Menu',27)
        CALL CURSOR(27,9)
        CALL WRITE('1.  Privs',9)
        CALL CURSOR(27,10)
        CALL WRITE('2.  Tables',10)
        CALL CURSOR(27,11)
        CALL WRITE('3.  Bulkfiles',13)
        CALL CURSOR(27,12)
        CALL WRITE('4.  Functions',13)
        CALL CURSOR(27,13)
        CALL WRITE('5.  Stored DMLs',15)
        CALL CURSOR(27,14)
        CALL WRITE('6.  Stored DML owners',21)
        CALL CURSOR(27,15)
        CALL WRITE('7.  Columns in a table',22)
        CALL CURSOR(27,17)
25      CALL PROMPT('$Enter the List number==> ')
        CALL KEYIN(ACTION,2)
 
        GO TO (101,120,140,105,110,103,160) (ICHAR(ACTION)-48)
        IF ((ACTION.EQ.'0').OR.(ACTION(1:2).EQ.'  ')) GOTO 10
        CALL CURSOR(20,20)
        CALL WRITE('INVALID List number!  Try again!',33)
        CALL CURSOR(27,17)
        CALL CRT(5)
        GO TO 25
 
101     CONTINUE
        TYPE = 'Priv'
        GOTO 150
 
103     CONTINUE
        TYPE = 'DML Owners'
        GOTO 150
 
105     CONTINUE
        TYPE = 'Function'
        GOTO 150
 
110     CONTINUE
        TYPE = 'DML'
        GOTO 150
 
120     CONTINUE
        TYPE = 'Table'
        GOTO 150
 
140     CONTINUE
        TYPE = 'Bulkfile'
 
150     CONTINUE
        CMD = 'LIST '//TYPE
        CALL ARES_DISPLAY(CMD)
        IF (ERRCODE .NE. 0) THEN
            CALL REPORT_ERR(20,27,17)
            GOTO 25
        ENDIF
        NORMAL = .TRUE.
        CALL CRT(2)
        CALL OUTPUT_DISPLAY(NORMAL)
        IF (NORMAL) THEN
            CALL CURSOR(25,22)
            CALL PROMPT('$Enter <CR> to continue.')
            CALL KEYIN(CR,2)
        ENDIF
        GOTO 20
160     CONTINUE
        CALL CRT(2)
        TYPE = 'Table'
        CALL ITEM_MENU(TYPE,TNUM,'List ')
        IF (TNUM .EQ. 0) GOTO 20
        CALL ARES_NAMELIST('COLUMN',BUFFER,
     &      TAB_ARY(TNUM)(:TAB_LENS(TNUM)))
        IF (ERRCODE.NE.0) GOTO 666
        CALL EXTRACT_NAMES(COL_ARY,COL_LENS,NUM_COLS)
        CALL CRT(2)
        CALL CRTFLSHX
        TLAST = INDEX(TYPE,' ')
        CALL CURSOR(20,1)
        CALL WRITE('Columns in ',11)
        CALL CURSOR(31,1)
        CALL WRITE(TYPE,TLAST)
        CALL CURSOR(31+TLAST,1)
        CALL WRITE(TAB_ARY(TNUM),TAB_LENS(TNUM))
        CALL CURSOR(31+TLAST+TAB_LENS(TNUM),1)
        CALL WRITE(':',1)
        LCV2 = 1
        DO 210,LCV=1,NUM_COLS
            CALL CURSOR(23,LCV2+1)
            CALL WRITE(COL_ARY(LCV),COL_LENS(LCV))
            LCV2 = LCV2 + 1
            IF (LCV2.EQ.20) THEN
                LCV2 = 1
                CALL CURSOR(25,22)
                CALL PROMPT('$Enter <CR> for more....')
                CALL KEYIN(CR,2)
                IF (CR.EQ.'0') GOTO 160
                CALL CRT(2)
                CALL CRTFLSHX
            ENDIF
210     CONTINUE
        CALL CURSOR(25,22)
        CALL PROMPT('$Enter <CR> to continue.')
        CALL KEYIN(CR,2)
        GOTO 160
 
200     CONTINUE
        FIRST = .FALSE.
30      CALL CRT(2)
        CALL CURSOR(30,7)
        CALL WRITE('Display Menu',12)
        CALL CURSOR(27,9)
        CALL WRITE('0.  Exit to the Action Menu',27)
        CALL CURSOR(27,10)
        CALL WRITE('1.  Model',9)
        CALL CURSOR(27,11)
        CALL WRITE('2.  Privs',9)
        CALL CURSOR(27,12)
        CALL WRITE('3.  Table',9)
        CALL CURSOR(27,13)
        CALL WRITE('4.  Bulkfile',12)
        CALL CURSOR(27,14)
        CALL WRITE('5.  Function',12)
        CALL CURSOR(27,15)
        CALL WRITE('6.  Stored DML',14)
        CALL CURSOR(27,17)
35      CALL PROMPT('$Enter the Display number==> ')
        CALL KEYIN(ACTION,2)
 
        GO TO (201,203,225,230,205,220) (ICHAR(ACTION)-48)
        IF ((ACTION.EQ.'0').OR.(ACTION(1:2).EQ.'  ')) GOTO 10
        CALL CURSOR(20,20)
        CALL WRITE('INVALID Display number!  Try again!',36)
        CALL CURSOR(27,17)
        CALL CRT(5)
        GO TO 35
 
201     CONTINUE
        CMD = 'DISPLAY Model'
        GOTO 241
 
203     CONTINUE
        CMD = 'DISPLAY Privs'
        GOTO 241
 
205     CONTINUE
        TYPE = 'Function'
        GOTO 240
 
220     CONTINUE
        TYPE = 'DML'
        GOTO 240
 
225     CONTINUE
        TYPE = 'Table'
        GOTO 240
 
230     CONTINUE
        TYPE = 'Bulkfile'
 
240     CONTINUE
        CALL CRT(2)
        CALL CRTFLSHX
        CALL ITEM_MENU(TYPE,TNUM,'Display ')
        IF (TNUM.EQ.0) GOTO 30
        CMD = 'DISPLAY '//TYPE//' '//TAB_ARY(TNUM)(:TAB_LENS(TNUM))
241     CALL ARES_DISPLAY(CMD)
        IF (ERRCODE.NE.0) THEN
            CALL REPORT_ERR(22,27,17)
            GOTO 35
        ENDIF
        CALL CRT(2)
        CALL CRTFLSHX
        NORMAL = .TRUE.
        CALL OUTPUT_DISPLAY(NORMAL)
        IF (NORMAL) THEN
            CALL CURSOR(25,22)
            CALL PROMPT('$Enter <CR> to continue.')
            CALL KEYIN(CR,2)
        ENDIF
        IF ((CMD(9:9).EQ.'M').OR.(CMD(9:9).EQ.'P')) GOTO 30
        GOTO 240
 
300     CONTINUE
        FIRST = .FALSE.
40      CALL CRT(2)
        CALL CURSOR(27,8)
        CALL WRITE('Manipulation Menu',17)
        CALL CURSOR(24,10)
        CALL WRITE('0.  Exit to the Action Menu',27)
        CALL CURSOR(24,11)
        CALL WRITE('1.  Query table',15)
!       CALL CURSOR(24,12)
!       CALL WRITE('2.  Query and update table',26)
        CALL CURSOR(24,14)
45      CALL PROMPT('$Enter the Manipulation number==> ')
        CALL KEYIN(ACTION,2)
 
        GO TO (325) (ICHAR(ACTION)-48)
        IF ((ACTION.EQ.'0').OR.(ACTION(1:2).EQ.'  ')) GOTO 10
        CALL CURSOR(20,20)
        CALL WRITE('INVALID Manipulation number!  Try again!',42)
        CALL CURSOR(24,14)
        CALL CRT(5)
        GO TO 45
 
325     CONTINUE
        MODE = 'Input'
!       GOTO 335
 
!330     CONTINUE
!        MODE = 'Update'
335     CONTINUE
        CALL CRT(2)
        CALL CRTFLSHX
        CALL ITEM_MENU('Table ',TNUM,'Manipulation ')
        IF (TNUM.EQ.0) GOTO 40
336     CALL COL_MENU(TNUM,PLUS,ALL_COLS)
        IF ((BUF2(1:1).EQ.'0').OR.(BUF2(1:2).EQ.'  ')) GOTO 335
        BGN1 = 'MODE=IN,SHARE=ANY,'
        BGN2 = '(SHARE=ANY)'
        BGN_TEXT = BGN1//TAB_ARY(TNUM)(:TAB_LENS(TNUM))//BGN2
        CALL ARES_BEGIN( BGN_TEXT )
        IF (ERRCODE.NE.0) THEN
            GOTO 666
        ENDIF
380     COND = ' '
        IF (PLUS .NE. 0) CALL GET_CONSTRAINT(COND)
        CMD = ' '
        IF (ALL_COLS) THEN
            CMD = 'SELECT * FROM '//TAB_ARY(TNUM)(:TAB_LENS(TNUM))//
     &            ' '//COND
        ELSE
            CNUM = 1
            DO 383, J=1, NUM_Q_COLS
                COL_TXT(CNUM:) = COL_ARY(Q_COLS_NUMS(J))
     &              (:COL_LENS(Q_COLS_NUMS(J)))
                CNUM = CNUM + COL_LENS(Q_COLS_NUMS(J)) + 1
                COL_TXT(CNUM-1:CNUM-1) = ','
383         CONTINUE
            CMD = 'SELECT '//COL_TXT(:CNUM-2)//
     &          ' FROM '//TAB_ARY(TNUM)(:TAB_LENS(TNUM))//' '//COND
        ENDIF
        CALL ARES_STARTEXT( CMD, Q, MODE )
        IF (ERRCODE.NE.0) THEN
            CALL REPORT_ERR(19,0,0)
            IF (COND(1:2).EQ.'  ') THEN
                CALL ARES_COMMIT
                GOTO 40
            ENDIF
            GOTO 380
        ENDIF
        CALL ARES_GETDESC( Q, APIDESC)
        IF (ERRCODE.NE.0) GOTO 666
        DECODE(256,'(64A4)',APIDESC)DESC_N,
     &      ((DESC_DFLT(I,J),J=1,3),I=1,DESC_N)
        CALL ARES_GETDESC( Q, APIDESC, 'CHAR')
        IF (ERRCODE.NE.0) GOTO 666
        DECODE(256,'(64A4)',APIDESC)DESC_N,
     &      ((DESC(I,J),J=1,3),I=1,DESC_N)
        DO 390,I=1,DESC_N
            IF ((DESC_DFLT(I,1).EQ.54).OR.
     &         (DESC_DFLT(I,1).EQ.57)) DESC(I,2) = 12
            IF(COL_LENS(Q_COLS_NUMS(I)).GT.ABS(DESC(I,2)))
     &          DESC(I,2) = COL_LENS(Q_COLS_NUMS(I))
390     CONTINUE
        ENCODE(256,'(64A4)',APIDESC)DESC_N,
     &      ((DESC(I,J),J=1,3),I=1,DESC_N)
        CALL ARES_PUTDESC( Q, APIDESC )
        IF (ERRCODE.NE.0) GOTO 666
        DECODE(256,'(64A4)',APIDESC)DESC_N,
     &      ((DESC(I,J),J=1,3),I=1,DESC_N)
        HDR0 = ' '
        HDR1 = ' '
        HDR2 = ' '
        START = 1
        DO 395, I=1, DESC_N
            WRITE(CHAR2,'(I)')I
            HDR0(START:) = CHAR2
            IF (DESC(I,2).LT.0) THEN
                IF (HDR0(START+1:).EQ.' ') THEN
                    HDR0(START+1:) = '*'
                ELSE
                    HDR0(START+2:) = '*'
                ENDIF
            ENDIF
            IF (ALL_COLS) THEN
                HDR1(START:) = COL_ARY(I)
            ELSE
                HDR1(START:) = COL_ARY(Q_COLS_NUMS(I))
            ENDIF
            START = START + ABS(DESC(I,2)) + 2
395     CONTINUE
        DO 396, I=1, START-1
            HDR2(I:I) = '-'
396     CONTINUE
        RNUM = 1
        DO 499, I=1, DESC_N
            RNUM = RNUM + ABS(DESC(I,2)) + 2
            HDR2(RNUM-2:RNUM-1) = '  '
499     CONTINUE
        IF (MODE .EQ. 'Input') THEN
            CALL CRT(2)
            CALL CRTFLSHX
            CALL CURSOR(1,0)
            CALL WRITE('(Columns marked with a * are non-updatable)',44)
            CALL CURSOR(1,1)
            CALL WRITE(HDR0,START-1)
            CALL CURSOR(1,2)
            CALL WRITE(HDR1,START-1)
            CALL CURSOR(1,3)
            CALL WRITE(HDR2,RNUM)
        ENDIF
        LINE = 3
        REPEAT 398, WHILE (ERRCODE.EQ.0)
397         CALL ARES_FETCHR( Q, APIREC)
            IF (ERRCODE.EQ.1) GOTO 399
            IF (ERRCODE.NE.0) GOTO 666
            RNUM = 1
            ANUM = 1
            REC = ' '
            IF (MODE.EQ.'Input') THEN
                LINE = LINE + 1
                DO 500, I=1, DESC_N
                    REC(RNUM:) = APIREC(ANUM:ANUM+ABS(DESC(I,2)))
                    RNUM = RNUM + ABS(DESC(I,2)) + 2
                    ANUM = ANUM + ABS(DESC(I,2))
                    REC(RNUM-2:RNUM-1) = '  '
500             CONTINUE
                CALL CURSOR(1,LINE)
                CALL WRITE(REC,RNUM)
                CALL CRTFLSHX
                IF (LINE .EQ. 20) THEN
                    LINE = 3
                    CALL CURSOR(25,22)
                    CALL PROMPT('$Enter <CR> for more....')
                    CALL KEYIN(CR,2)
                    CALL CRT(2)
                    CALL CRTFLSHX
                    IF (CR(1:1).EQ.'0') THEN
                        CALL ARES_COMMIT
                        GOTO 336
                    ENDIF
                    CALL CURSOR(1,1)
                    CALL WRITE(HDR0,START-1)
                    CALL CURSOR(1,2)
                    CALL WRITE(HDR1,START-1)
                    CALL CURSOR(1,3)
                    CALL WRITE(HDR2,RNUM)
                ENDIF
!            ELSE
!                CALL CRT(2)
!            CALL CURSOR(1,0)
!            CALL WRITE('(Columns marked with a * are non-updatable)',44)
!                CALL CURSOR(1,1)
!                CALL WRITE(HDR0,START-1)
!                CALL CURSOR(1,2)
!                CALL WRITE(HDR1,START-1)
!                CALL CURSOR(1,3)
!                CALL WRITE(HDR2,START-1)
!                DO 501, I=1, DESC_N
!                    REC(RNUM:) = APIREC(ANUM:ANUM+ABS(DESC(I,2)))
!                    RNUM = RNUM + ABS(DESC(I,2)) + 2
!                    ANUM = ANUM + ABS(DESC(I,2))
!                    REC(RNUM-2:RNUM-1) = '  '
!501             CONTINUE
!                CALL CURSOR(1,4)
!                CALL WRITE(REC,RNUM)
!                CALL CURSOR(1,7)
!                CALL WRITE('(Enter a - to skip to next record,',34)
!                CALL CURSOR(36,7)
!                CALL WRITE('0 exits)',8)
!                CALL CURSOR(1,6)
!400             CALL PROMPT('$Enter Column Number(s) to update==> ')
!                CALL KEYIN(BUF2,30)
!                IF (BUF2(1:1).EQ.'-') GOTO 397
!                IF ((BUF2(1:1).EQ.'0').OR.(BUF2(1:2).EQ.'  ')) GOTO 336
!                IF ((BUF2(1:1).LT.'1').OR.(BUF2(1:1).GT.'9')) GOTO 491
!                CALL EXTRACT_NUMS(UPD_COLS_ARY,NUM_UPD_COLS)
!                CALL CONVERT_NUM_ARRAY(UPD_COLS_ARY,
!     &              UPD_COLS_NUMS, NUM_UPD_COLS)
!                Q_CHECK = ' '
!                ALL_COLS = .FALSE.
!                DO 490, I=1,NUM_UPD_COLS
!                    IF ((UPD_COLS_NUMS(I) .LT. 1) .OR.
!     &                  (UPD_COLS_NUMS(I) .GT. NUM_Q_COLS+1)) GOTO 491
!                    IF (UPD_COLS_NUMS(I) .EQ. NUM_Q_COLS+1)
!     &                  ALL_COLS = .TRUE.
!                    IF (DESC(UPD_COLS_NUMS(I),2).LT.0) GOTO 491
!                    Q_CHECK(UPD_COLS_NUMS(I):UPD_COLS_NUMS(I)) = 'X'
!490                 CONTINUE
!                QNUM = INDEX(Q_CHECK(:NUM_Q_COLS), ' ')
!                IF (ALL_COLS) QNUM = 0
!                CALL CURSOR(20,20)
!                CALL CRT(5)
!                GOTO 492
!491             CONTINUE
!                CALL CURSOR(20,20)
!                CALL WRITE('INVALID Column Number(s)!  Try again!',39)
!                IF (DESC(UPD_COLS_NUMS(I),2).LT.0) THEN
!                    CALL CURSOR(22,21)
!                    CALL WRITE('Non-updatable column',20)
!                    CALL CURSOR(43,21)
!                    CALL WRITE(UPD_COLS_ARY(I),2)
!                    CALL CURSOR(45,21)
!                    CALL WRITE('selected!',9)
!                ENDIF
!                CALL CURSOR(1,6)
!                CALL CRT(5)
!                GOTO 400
!492             CONTINUE
!                LINE = 7
!                IF (QNUM.EQ.0) NUM_UPD_COLS = NUM_Q_COLS
!                DO 495, I=1,NUM_UPD_COLS
!                    OLD_VAL = ' '
!                    NEW_VAL = ' '
!                    IF (ALL_COLS) THEN
!                        COL = I
!                    ELSE
!                        COL = UPD_COLS_NUMS(I)
!                    END IF
!                    CALL ARES_GETFIELD(APIREC,APIDESC,COL,OLD_VAL)
!                    IF (ERRCODE.NE.0) GOTO 666
!                    LINE = LINE + 1
!                    CALL CURSOR(2,LINE)
!                    CALL WRITE(COL_ARY(Q_COLS_NUMS(COL)),
!     &                  COL_LENS(Q_COLS_NUMS(COL)))
!                    CALL CURSOR(2+COL_LENS(Q_COLS_NUMS(COL)),LINE)
!                    CALL WRITE('=',1)
!                    CALL CURSOR(3+COL_LENS(Q_COLS_NUMS(COL)),LINE)
!                    CALL WRITE(OLD_VAL,32+COL_LENS(Q_COLS_NUMS(COL)))
!                    LINE = LINE + 1
!                    CALL CURSOR(2,LINE+1)
!                    CALL WRITE('(Use an = to preserve value)',28)
!                    CALL CURSOR(2,LINE)
!                    CALL PROMPT('$Enter new value==> ')
!                    CALL KEYIN(NEW_VAL,30)
!                    IF (NEW_VAL(1:1) .EQ. '=') THEN
!                        NEW_VAL = OLD_VAL
!                        CALL CURSOR(21,LINE)
!                        CALL WRITE(OLD_VAL,
!     &                      32+COL_LENS(Q_COLS_NUMS(COL)))
!                    ELSE
!                        CALL ARES_PUTFIELD(APIREC,APIDESC,COL,NEW_VAL)
!                        IF (ERRCODE.NE.0) GOTO 666
!                    ENDIF
!495                 CONTINUE
!                IF (QNUM.EQ.0) THEN
!                    CALL ARES_UPDATER(Q,APIREC)
!                    IF (ERRCODE.NE.0) GOTO 666
!                ELSE
!                    ENCODE (116,'(29A4)',ULIST) NUM_UPD_COLS,
!     &                  (UPD_COLS_NUMS(I),I=1,NUM_UPD_COLS)
!                    CALL ARES_UPDATER(Q,APIREC,ULIST)
!                    IF (ERRCODE.NE.0) GOTO 666
!                END IF
            ENDIF
398     CONTINUE
        CALL ARES_COMMIT
        GOTO 336
399     CONTINUE
        CALL ARES_COMMIT
        CALL CURSOR(25,22)
        CALL PROMPT('$Enter <CR> to continue.')
        CALL KEYIN(CR,2)
        GOTO 336
 
401     CONTINUE
        IF (FIRST) GOTO 19
        CALL CRT(2)
        CALL CRTFLSHX
        CALL CURSOR(20,8)
        CALL WRITE('The current model is:  ',23)
        CALL CURSOR(43,8)
        CALL WRITE(SAVMOD,31)
        CALL CURSOR(20,10)
405     CALL PROMPT('$New model name to browse==> ')
        CALL KEYIN(MODEL,31)
        IF ((MODEL(1:1).EQ.'0').OR.(MODEL(1:2).EQ.'  ')) GOTO 10
        CALL CURSOR(1,15)
        CALL CRT(5)
        CALL ARES_INVOKE(MODEL)
        IF (ERRCODE .NE. 0) THEN
            CALL CURSOR(1,15)
            CALL WRITE('',1)
            CALL CRTFLSHX
            CALL ARES_ERRMSG
            CALL CURSOR(20,10)
            CALL CRT(5)
            GOTO 405
        ENDIF
        SAVMOD = MODEL
        FIRST = .TRUE.
        ALINE = 15
        GOTO 10
 
600     CONTINUE
        CALL CRT(2)
        CALL CRTFLSHX
        NORMAL = .FALSE.
        CALL OUTPUT_DISPLAY(NORMAL)
        CALL CURSOR(25,22)
        CALL PROMPT('$Enter <CR> to continue.')
        CALL KEYIN(CR,2)
        GOTO 10
 
666     CALL CRT(2)
        CALL CURSOR(1,15)
        CALL WRITE('',1)
        CALL CRTFLSHX
        CALL ARES_ERRMSG
999     CALL CRTFLSHX
        END
 
 
        SUBROUTINE EXTRACT_NAMES( LIST, LENGTHS, COUNT )
        CHARACTER LIST(28)*31
        INTEGER LORIG, LSUB, LENGTHS(28), COUNT
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        LORIG = 0
        DO 10, COUNT=1, 40
            LIST(COUNT) = ' '
            LSUB = INDEX( BUFFER(LORIG+1:), ',')
            IF (LSUB .EQ. 0) GOTO 15
            LIST(COUNT) = BUFFER(LORIG+1:LSUB+LORIG-1)
            LENGTHS(COUNT) = LSUB - 1
            LORIG = LORIG + LSUB
10      CONTINUE
15      LSUB = INDEX( BUFFER(LORIG+1:), ' ')
        IF (LSUB .EQ. 0) GOTO 20
        LIST(COUNT) = BUFFER(LORIG+1:LSUB+LORIG-1)
        LENGTHS(COUNT) = LSUB-1
20      CONTINUE
        RETURN
        END
 
 
        SUBROUTINE EXTRACT_NUMS( NLIST, COUNT )
        INTEGER LORIG, LSUB, COUNT
        CHARACTER NLIST(28)*2
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        LORIG = 0
        DO 10, COUNT=1, 40
            NLIST(COUNT) = '  '
            LSUB = INDEX( BUF2(LORIG+1:), ',')
            IF (LSUB .EQ. 0) GOTO 15
            NLIST(COUNT) = BUF2(LORIG+1:LSUB+LORIG-1)
            LORIG = LORIG + LSUB
10      CONTINUE
15      LSUB = INDEX( BUF2(LORIG+1:), ' ')
        IF (LSUB .EQ. 0) GOTO 20
        NLIST(COUNT) = BUF2(LORIG+1:LSUB+LORIG-1)
20      CONTINUE
        RETURN
        END
 
 
        SUBROUTINE OUTPUT_DISPLAY(NORM)
        CHARACTER BUF*200, CR, INFO(20)*80
        INTEGER LCV, LCV2
        LOGICAL NORM
        COMMON/INFO/INFO
        IF (NORM) THEN
            OPEN(UNIT=10,NAME='***ARES_DISPLAY',STATUS='OLD',RECL=200)
            LCV = 0
            NORM = .TRUE.
            REPEAT 10, WHILE .TRUE.
                READ(10,'(A200)',END=15)BUF
5               LCV=LCV+1
                CALL CURSOR(0,LCV)
                CALL WRITE(BUF,80)
                DO 8, LCV2=199,80,-1
                    IF (BUF(LCV2:LCV2).NE.' ') THEN
                        BUF(1:) = BUF(81:)
                        GOTO 5
                    ENDIF
8               CONTINUE
                IF (LCV .EQ. 20) THEN
                    LCV = 0
                    CALL CURSOR(25,22)
                    CALL PROMPT('$Enter <CR> for more....')
                    CALL KEYIN(CR,2)
                    IF (CR.EQ.'0') THEN
                        NORM = .FALSE.
                        GOTO 15
                    ENDIF
                    CALL CRT(2)
                    CALL CRTFLSHX
                ENDIF
10          CONTINUE
15          CLOSE(10)
        ELSE
            DO 20, LCV=1,20
                CALL CURSOR(0,LCV)
                CALL WRITE(INFO(LCV),80)
20          CONTINUE
            NORM = .TRUE.
        ENDIF
        RETURN
        END
 
 
        SUBROUTINE CONVERT_NUM_ARRAY( CHAR_ARY, INT_ARY, NUM)
        CHARACTER CHAR_ARY(28)*2
        INTEGER NUM, LCV, INT_ARY(28)
        DO 10, LCV=1, NUM
            READ(CHAR_ARY(LCV),'(BN,I)') INT_ARY(LCV)
10      CONTINUE
        RETURN
        END
 
 
        SUBROUTINE ITEM_MENU(TYPE,TINT,MENU)
        INTEGER TLAST, LCV, TINT, MNUM, ADJ, LCV2, ONE, STRT
        CHARACTER CLCV*4, TNUM*2, TYPE*9, MENU*13
        LOGICAL OKAY
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        TINT = 0
        ONE = 0
        CALL ARES_NAMELIST(TYPE, BUFFER)
        IF (ERRCODE .NE. 0) THEN
            CALL REPORT_ERR(15,0,0)
            RETURN
        ENDIF
        MNUM = INDEX(MENU,' ')
        CALL EXTRACT_NAMES( TAB_ARY, TAB_LENS, NUM_TABS)
        STRT = 8 - (NUM_TABS/2)
        IF (NUM_TABS.GT.17) STRT = 8 - ((MIN(37,NUM_TABS)+1)/4)
        CALL CURSOR (28,STRT+1)
        TLAST = INDEX(TYPE,' ')
        CALL WRITE(TYPE,TLAST)
        CALL CURSOR(28+TLAST,STRT+1)
        CALL WRITE('Menu',4)
        TAB_ARY(0) = 'Exit to the '//MENU(:MNUM)//'Menu'
        TAB_LENS(0) = 17 + MNUM
        IF (NUM_TABS .LE. 17) THEN
            DO 10, LCV=0,NUM_TABS
                WRITE(CLCV,'(I)')LCV
                CALL CURSOR(24,STRT+LCV+3)
                IF (CLCV(2:2) .EQ. ' ') THEN
                    CLCV(2:2) = CLCV(1:1)
                    CLCV(1:1) = ' '
                ENDIF
                CALL WRITE(CLCV(1:2),2)
                CALL CURSOR(26,STRT+LCV+3)
                CALL WRITE('.',1)
                CALL CURSOR(29,STRT+LCV+3)
                CALL WRITE(TAB_ARY(LCV),TAB_LENS(LCV))
10          CONTINUE
        ELSE
            LCV2 = 0
            DO 11, LCV=0,MIN(37,NUM_TABS)/2
                ADJ = 19
5               WRITE(CLCV,'(I)')LCV2
                IF (CLCV(2:2) .EQ. ' ') THEN
                    CLCV(2:2) = CLCV(1:1)
                    CLCV(1:1) = ' '
                ENDIF
                CALL CURSOR(24-ADJ,STRT+LCV+3)
                CALL WRITE(CLCV(1:2),2)
                CALL CURSOR(26-ADJ,STRT+LCV+3)
                CALL WRITE('.',1)
                CALL CURSOR(29-ADJ,STRT+LCV+3)
                CALL WRITE(TAB_ARY(LCV2),TAB_LENS(LCV2))
                IF (ADJ .EQ. 19) THEN
                    IF (LCV2.EQ.NUM_TABS) THEN
                        ONE = 1
                        GOTO 13
                    ENDIF
                    LCV2 = LCV2 + 1
                    ADJ = -19
                    GOTO 5
                ENDIF
                LCV2 = LCV2 + 1
                IF (LCV2.EQ.38) THEN
                    CALL CURSOR(23,23)
                    CALL WRITE('Menu truncated to 37 items!',28)
                    ONE = 1
                    NUM_TABS = 37
                    GOTO 13
                ENDIF
11          CONTINUE
        ENDIF
13      CALL CURSOR(25,STRT+LCV+4+ONE)
15      CALL WRITE('Enter ',6)
        CALL CURSOR(31,STRT+LCV+4+ONE)
        CALL WRITE(TYPE,TLAST)
        CALL CURSOR(31+TLAST,STRT+LCV+4+ONE)
        CALL PROMPT('$number==> ')
        CALL KEYIN(TNUM,3)
        IF ((TNUM(1:1).EQ.'0').OR.(TNUM(1:2).EQ.'  ')) THEN
            TINT = 0
            RETURN
        ENDIF
        CALL CHECKIT(TNUM,2,OKAY)
        IF (.NOT.OKAY) THEN
            TINT = 0
            GOTO 25
        ENDIF
        READ(TNUM,'(BN,I)')TINT
25      IF ((TINT.LT.1).OR.(TINT.GT.NUM_TABS)) THEN
            CALL CURSOR(22,23)
            CALL WRITE('INVALID ',8)
            CALL CURSOR(30,23)
            CALL WRITE(TYPE,TLAST)
            CALL CURSOR(30+TLAST,23)
            CALL WRITE('number!  Try again!',20)
            CALL CURSOR(25,STRT+LCV+4+ONE)
            CALL CRT(5)
            CALL CRTFLSHX
            GOTO 15
        ENDIF
        RETURN
        END
 
 
        SUBROUTINE GET_CONSTRAINT(COND)
        INTEGER LCV, LINE, CNUM, SEMI, NMAX
        CHARACTER COND*300, CLCV*4
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        COND = ' '
        CNUM = 1
        NMAX = 0
        DO 5, LCV=1, NUM_Q_COLS
            IF (COL_LENS(Q_COLS_NUMS(LCV)).GT.NMAX)
     &          NMAX = COL_LENS(Q_COLS_NUMS(LCV))
5       CONTINUE
        NMAX = MAX(4,NMAX)
        CALL CRT(2)
        CALL CRTFLSHX
        CALL CURSOR(1,1)
        CALL WRITE('Col   Col',9)
        CALL CURSOR(1,2)
        CALL WRITE('num   name',10)
        CALL CURSOR(1,3)
        CALL WRITE('---   -------------------------------',6+NMAX)
        DO 10, LCV=1, NUM_Q_COLS
            WRITE(CLCV,'(I)')LCV
            IF (CLCV(2:2).EQ.' ') THEN
                CALL CURSOR(3,LCV+3)
            ELSE
                CALL CURSOR(2,LCV+3)
            ENDIF
            CALL WRITE(CLCV,2)
            CALL CURSOR(5,LCV+3)
            CALL WRITE('=',1)
            CALL CURSOR(7,LCV+3)
            CALL WRITE(COL_ARY(Q_COLS_NUMS(LCV)),
     &          COL_LENS(Q_COLS_NUMS(LCV)))
10      CONTINUE
        CALL CURSOR(9+NMAX,1)
        CALL WRITE('Use the Column numbers from the list or names',46)
        CALL CURSOR(9+NMAX,2)
        CALL WRITE('(Use a ; to continue the constraint)',36)
        LINE = 4
        CNUM = 1
        CALL PROMPT('$==> ')
        REPEAT 20, WHILE (SEMI.NE.0)
            CALL CURSOR(9+NMAX,LINE)
            CALL KEYIN(COND(CNUM:),70)
            IF (COND(1:1).EQ.'0') THEN
                COND = ' '
                RETURN
            ENDIF
            SEMI = INDEX(COND(CNUM:),';')
            IF (SEMI .NE. 0) COND(CNUM+SEMI-1:CNUM+SEMI-1) = ' '
            CNUM = CNUM + SEMI
            LINE = LINE + 1
20      CONTINUE
        RETURN
        END
 
 
        SUBROUTINE REPORT_ERR(LINE,PCOL,PLIN)
        INTEGER LINE, PCOL, PLIN
        CHARACTER CR
        CALL CURSOR(1,LINE)
        CALL WRITE('',1)
        CALL CRTFLSHX
        CALL ARES_ERRMSG
        IF (PCOL.NE.0) THEN
            CALL CURSOR(PCOL,PLIN)
            CALL CRT(5)
        ELSE
            CALL CURSOR(25,22)
            CALL PROMPT('$Enter <CR> to continue.')
            CALL KEYIN(CR,2)
        ENDIF
        RETURN
        END
 
 
        SUBROUTINE COL_MENU( TNUM, PLUS, ALL_COLS )
        INTEGER LCV, ADJ, LCV2, ONE, STRT, TNUM, PLUS
        CHARACTER CLCV*4
        LOGICAL ALL_COLS
        CHARACTER*31 TAB_ARY(40), COL_ARY(40)
        CHARACTER BUFFER*1024, BUF2*128
        CHARACTER Q_COLS_ARY(40)*2, UPD_COLS_ARY(40)*2
        INTEGER TAB_LENS(40), COL_LENS(40), NUM_TABS, NUM_COLS
        INTEGER ERRCODE, Q_COLS_NUMS(40), NUM_Q_COLS
        INTEGER UPD_COLS_NUMS(40), NUM_UPD_COLS
        COMMON/CHARS/TAB_ARY, COL_ARY, Q_COLS_ARY, UPD_COLS_ARY
        COMMON/NUMS/TAB_LENS, COL_LENS, NUM_TABS, NUM_COLS, ERRCODE,
     &      Q_COLS_NUMS, NUM_Q_COLS, UPD_COLS_NUMS, NUM_UPD_COLS
        COMMON/DATA/BUFFER, BUF2
        ONE = 0
        CALL ARES_NAMELIST('COLUMN', BUFFER, TAB_ARY(TNUM))
        IF (ERRCODE .NE. 0) THEN
            CALL REPORT_ERR(15,0,0)
            RETURN
        ENDIF
        CALL CRT(2)
        CALL CRTFLSHX
        CALL EXTRACT_NAMES( COL_ARY, COL_LENS, NUM_COLS)
        STRT = 8 - ((NUM_COLS+1)/2)
        IF (NUM_COLS.GT.16) STRT = 8 - (((MIN(36,NUM_COLS))+1)/4)
        CALL CURSOR (24,STRT+1)
        CALL WRITE('Column Menu for table ',22)
        CALL CURSOR(46,STRT+1)
        CALL WRITE(TAB_ARY(TNUM),TAB_LENS(TNUM))
        CALL CURSOR(46+TAB_LENS(TNUM),STRT+1)
        CALL WRITE(':',1)
        COL_ARY(0) = 'Exit to the Table Menu'
        COL_LENS(0) = 22
        COL_ARY(MIN(36,NUM_COLS)+1) = 'All columns'
        COL_LENS(MIN(36,NUM_COLS)+1) = 11
        IF (NUM_COLS .LE. 16) THEN
            DO 360, LCV=0,NUM_COLS+1
                WRITE(CLCV,'(I)')LCV
                CALL CURSOR(20,STRT+LCV+3)
                IF (CLCV(2:2) .EQ. ' ') THEN
                    CLCV(2:2) = CLCV(1:1)
                    CLCV(1:1) = ' '
                ENDIF
                CALL WRITE(CLCV(1:2),2)
                CALL CURSOR(22,STRT+LCV+3)
                CALL WRITE('.',1)
                CALL CURSOR(25,STRT+LCV+3)
                CALL WRITE(COL_ARY(LCV),COL_LENS(LCV))
360         CONTINUE
        ELSE
            LCV2 = 0
            DO 11, LCV=0,((MIN(36,NUM_COLS))+1)/2
                ADJ = 19
5               WRITE(CLCV,'(I)')LCV2
                IF (CLCV(2:2) .EQ. ' ') THEN
                    CLCV(2:2) = CLCV(1:1)
                    CLCV(1:1) = ' '
                ENDIF
                CALL CURSOR(24-ADJ,STRT+LCV+3)
                CALL WRITE(CLCV(1:2),2)
                CALL CURSOR(26-ADJ,STRT+LCV+3)
                CALL WRITE('.',1)
                CALL CURSOR(29-ADJ,STRT+LCV+3)
                CALL WRITE(COL_ARY(LCV2),COL_LENS(LCV2))
                IF (ADJ .EQ. 19) THEN
                    IF (LCV2.EQ.(MIN(36,NUM_COLS)+1)) THEN
                        ONE = 1
                        GOTO 13
                    ENDIF
                    LCV2 = LCV2 + 1
                    ADJ = -19
                    GOTO 5
                ENDIF
                LCV2 = LCV2 + 1
                IF ((LCV2.EQ.38).AND.(NUM_COLS.NE.36)) THEN
                    CALL CURSOR(24,21)
                    CALL WRITE('Menu truncated to 36 items!',28)
                    ONE = 1
                    NUM_COLS = 36
                    GOTO 13
                ENDIF
11          CONTINUE
        ENDIF
13      CALL CURSOR(16,STRT+LCV+5+ONE)
        CALL WRITE('(Append a + to the list to enter a constraint)',46)
        CALL CURSOR(21,STRT+LCV+4+ONE)
15      CALL PROMPT('$Enter Column Number(s) to query==> ')
        CALL KEYIN(BUF2,48)
        IF ((BUF2(1:1).EQ.'0').OR.(BUF2(1:2).EQ.'  ')) RETURN
        PLUS = INDEX(BUF2,'+')
        IF (PLUS .NE. 0) BUF2(PLUS:PLUS) = ' '
        IF ((BUF2(1:1).LT.'1').OR.(BUF2(1:1).GT.'9')) GOTO 25
        IF ((BUF2(1:2).EQ.CLCV(1:2)) .OR.
     &      ((CLCV(1:1).EQ.' ').AND.(BUF2(1:1).EQ.CLCV(2:2)))) THEN
            BUF2 = ' '
            I = 1
            DO 366, LCV2=1,NUM_COLS
                WRITE(CLCV,'(I)')LCV2
                IF (CLCV(2:2) .EQ. ' ') THEN
                    BUF2(I:I) = CLCV(1:1)
                    BUF2(I+1:I+1) = ','
                    I = I + 2
                ELSE
                    BUF2(I:I+1) = CLCV(1:2)
                    BUF2(I+2:I+2) = ','
                    I = I + 3
                ENDIF
366         CONTINUE
            BUF2(I-1:I-1) = ' '
        ENDIF
        CALL EXTRACT_NUMS(Q_COLS_ARY, NUM_Q_COLS )
        CALL CONVERT_NUM_ARRAY( Q_COLS_ARY, Q_COLS_NUMS, NUM_Q_COLS )
        ALL_COLS = .FALSE.
        DO 370, LCV2=1,NUM_Q_COLS
            IF ((Q_COLS_NUMS(LCV2).LT.1) .OR.
     &          (Q_COLS_NUMS(LCV2).GT.NUM_COLS+1)) GOTO 25
            IF (Q_COLS_NUMS(LCV2).EQ.NUM_COLS+1) ALL_COLS = .TRUE.
370     CONTINUE
        RETURN
25      CONTINUE
        CALL CURSOR(1,23)
        CALL CRT(5)
        CALL CURSOR(20,23)
        CALL WRITE('INVALID Column Number(s)!  Try again!',39)
        CALL CURSOR(21,STRT+LCV+4+ONE)
        CALL CRT(5)
        CALL CRTFLSHX
        GOTO 15
        END
 
 
        SUBROUTINE CHECKIT(STRING,LENGTH,OKAY)
        CHARACTER STRING*80
        INTEGER LENGTH,LCV
        LOGICAL OKAY
        OKAY = .FALSE.
        DO 10, LCV=1, LENGTH
            IF ((STRING(LCV:LCV).LT.'0').OR.
     &          (STRING(LCV:LCV).GT.'9')) THEN
                IF ((STRING(LCV:LCV).NE.',').AND.
     &              (STRING(LCV:LCV).NE.' ')) RETURN
            ENDIF
10      CONTINUE
        OKAY = .TRUE.
        RETURN
        END
