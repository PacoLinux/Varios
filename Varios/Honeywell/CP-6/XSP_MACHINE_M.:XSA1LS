

10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     1    
    1      /*M*    XSP_MACHINE_M   Actions and Predicates for ISO Presentation     */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*P*
    9              NAME:   XSP_MACHINE_M
   10              PURPOSE:
   11                  This file contains PL-6 MACROs which define the various actions
   12                  and predicates for the ISO Presentation layer.  The contents of
   13                  the MACROs were determined by slavishly following the ISO
   14                  Presentation protocol standard, ISO 8823.
   15      */
   16      /*F*
   17              NAME:   XSP_MACHINE_M
   18              PURPOSE:
   19                  This file contains PL-6 MACROs which define the various actions
   20                  and predicates for the ISO Presentation layer.  These things are
   21                  defined as MACROs to help avoid the mistakes that could result
   22                  from manually transcribing from the Presentation document to code.
   23                  Note: The appropriate compilation flags should be set to cause
   24                  expansion of this stuff on the listing output, otherwise it'll be
   25                  difficult to figure out what's going on when debugging.
   26              DESCRIPTION:
   27                  Each of the actions called out in the Presentation protocol
   28                  standard is implemented as a PL-6 MACRO.  Each of the predicates
   29                  called out is implemented as one clause of another MACRO.  It is
   30                  assumed that XSP_PRESENTATION_E has been included previously, to
   31                  define necessary preprocessor variables and other stuff.
   32      */
   33
   34      %MACRO ACTION01;
   35          CALL ACTION01;
   36      %MEND;
   37
10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     2    
   38      %MACRO ACTION02;
   39          CALL ACTION02;
   40      %MEND;
   41
   42      %MACRO ACTION03;
   43          CALL ACTION03;
   44      %MEND;
   45
   46      %MACRO ACTION04;
   47          CALL ACTION04;
   48      %MEND;
   49
   50      %MACRO ACTION05;
   51          CALL ACTION05;
   52      %MEND;
   53
   54      %MACRO ACTION06;
   55          CALL ACTION06;
   56      %MEND;
   57
   58      %MACRO ACTION07;
   59          CALL ACTION07;
   60      %MEND;
   61
   62      %MACRO ACTION08;
   63          CALL ACTION08;
   64      %MEND;
   65
   66      %MACRO ACTION09;
   67          CALL ACTION09;
   68      %MEND;
   69
   70      %MACRO ACTION10;
   71          CALL ACTION10;
   72      %MEND;
   73
   74      %MACRO ACTION11;
10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     3    
   75          CALL ACTION11;
   76      %MEND;
   77
   78      %MACRO ACTION12;
   79          CALL ACTION12;
   80      %MEND;
   81
   82      %MACRO ACTION13;
   83          CALL ACTION13;
   84      %MEND;
   85
   86      %MACRO ACTION14;
   87          CALL ACTION14;
   88      %MEND;
   89
   90      %MACRO ACTION15;
   91          CALL ACTION15;
   92      %MEND;
   93
   94      %MACRO ACTION16;
   95          CALL ACTION16;
   96      %MEND;
   97
   98      %MACRO ACTION17;
   99          CALL ACTION17;
  100      %MEND;
  101
  102      %MACRO ACTION18;
  103          CALL ACTION18;
  104      %MEND;
  105
  106      %MACRO ACTION19;
  107          CALL ACTION19;
  108      %MEND;
  109
  110      %MACRO ACTION20;
  111          CALL ACTION20;
10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     4    
  112      %MEND;
  113
  114      %MACRO ACTION21;
  115          CALL ACTION21;
  116      %MEND;
  117
  118      %MACRO ACTION22;
  119          CALL ACTION22;
  120      %MEND;
  121
  122      /* the following macro generates a BIT(1) value indicating whether there
  123         is exactly one bit set in the integer value passed as parameter M    */
  124      %MACRO ONE_BIT_SET_IN( M=);
  125      %LSET X = TEXTCHAR(M);
  126          %CHARTEXT( CONCAT( '(', X, '=(', X, '&BINBIT(-BITBIN(', X, '),36)))'))
  127      %MEND;
  128
  129      %MACRO EMIT_AND;
  130      %IF LENGTHC( PRED) > 0;
  131          %CHARTEXT( %CONCAT( 'IF PINV(', %PRED, ') THEN CALL PRED', %PRED));
  132          %SET IFCMD = %CONCAT( %IFCMD, %MINUS, 'PRED(', %PRED, ') ');
  133          %SET PRED = '';
  134          %SET MINUS = 'NOT ';
  135      %ENDIF;
  136      %MEND;
  137
  138      %MACRO EMIT_OR;
  139      %IF LENGTHC( PRED) > 0;
  140          %CHARTEXT( %CONCAT( 'IF PINV(', %PRED, ') THEN CALL PRED', %PRED));
  141          %SET IFCMD = %CONCAT( %IFCMD, %AND, %MINUS, 'PRED(', %PRED, ') ');
  142          %SET AND = 'AND ';
  143          %SET PRED = '';
  144          %SET MINUS = 'NOT ';
  145      %ENDIF;
  146      %MEND;
  147
  148      %MACRO EMIT_IFCMD;
10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     5    
  149      %IF LENGTHC( IFCMD) > 3;
  150          %SET IFCMD = %CONCAT( %IFCMD, 'THEN EXIT');
  151          %CHARTEXT( %IFCMD);
  152          %SET IFCMD = 'IF ';
  153          %SET AND = '';
  154          %SET PRED = '';
  155          %SET MINUS = 'NOT ';
  156      %ENDIF;
  157      %MEND;
  158
  159      %MACRO EVALARG;
  160      %IF LENGTHC( ARG) > 0;
  161          %LSET CHR = SUBSTR( ARG, 0, 1);
  162          %IF %CHR = '-';
  163              %SET MINUS = '';
  164          %ELSEIF %CHR = '&';
  165              %EMIT_AND;
  166              %EMIT_IFCMD;
  167          %ELSEIF %CHR = '|';
  168              %EMIT_OR;
  169          %ELSEIF %CHR = '(';
  170          %ELSEIF %CHR = ')';
  171              %EMIT_OR;
  172              %EMIT_IFCMD;
  173          %ELSE;
  174              %SET PRED = CONCAT( %PRED, %CHR);
  175          %ENDIF;
  176          %SET ARG = SUBSTR( ARG, 1);
  177          %EVALARG;
  178      %ELSE;
  179          %EMIT_OR;
  180          %EMIT_IFCMD;
  181      %ENDIF;
  182      %MEND;
  183
  184      %MACRO IFPREDDO( P=);
  185      %ERROR( INPRED='1'B, 'This IFPREDDO is nested; previous ENDPREDDO missing');
10:40 OCT 01 '97 XSP_MACHINE_M.:XSA1SI                                     6    
  186      %SET INPRED = '1'B;
  187      %SET ARG = TEXTCHAR(P);
  188      %SET IFCMD = 'IF ';
  189      %SET AND = '';
  190      %SET PRED = '';
  191      %SET MINUS = 'NOT ';
  192          CONTINUING = '1'B;
  193          DO;
  194              %EVALARG;
  195              CONTINUING = '0'B;
  196      %MEND;
  197
  198      %MACRO ELSEPREDDO( P=);
  199      %ERROR( INPRED='0'B, 'This ELSEPREDDO doesn''t follow an IF/ELSEPREDDO');
  200      %SET ARG = TEXTCHAR(P);
  201      %SET IFCMD = 'IF ';
  202      %SET AND = '';
  203      %SET PRED = '';
  204      %SET MINUS = 'NOT ';
  205          IF CONTINUING THEN DO;
  206              %EVALARG;
  207              CONTINUING = '0'B;
  208      %MEND;
  209
  210      %MACRO ENDPREDDO;
  211      %ERROR( INPRED='0'B, 'This ENDPREDDO doesn''t terminate an IFPREDDO');
  212      %SET INPRED = '0'B;
  213          IF CONTINUING THEN CALL OOPS;
  214      %MEND;

