

CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_items.c,v 1.5 87/03/10 11:24:17 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ I T E M S . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "def:h"
       14        14             #include "global:h"
       15        15             #include "lset:h"
       16        16             #include "aux:h"
       17        17             #include "alloc:h"
       18        18             #include "em_mnem:h"
       19        19             #include "em_spec:h"
       20        20             #include "em_pseu:h"
       21        21             #include "em_reg:h"
       22        22             #include "ra:h"
       23        23             #include "ra_aux:h"
       24        24             #include "ra_items:h"
       25        25
       26        26
       27        27             #include "itemtab:h"
       28        28             /* Maps EM mnemonics onto item types, e.g. op_lol -> LOCALVAR, op_ldc->DCONST,

       29        29              * generated from em_mmen.h and itemtab.src files.
       30        30              */
       31        31
       32        32             #define SMALL_CONSTANT(c)   (c >= 0 && c <= 8)
       33        33             /* prevent small constants from being put in a register */
       34        34
       35        35
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       36        36             clean_tab(items)
       37        37              item_p items[];
       38        38             {
       39        39    1         int t;
       40        40    1
       41        41    1         for (t = 0; t < NRITEMTYPES;t++) {
       42        42    2            items[t] = (item_p) 0;
       43        43    2         }
       44        44    1        }
       45        45
       46        46
       47        47
       48        48
       49        49             short item_type(l)
       50        50              line_p l;
       51        51             {
       52        52    1         int instr = INSTR(l);
       53        53    1         int t;
       54        54    1
       55        55    1         if (instr < sp_fmnem || instr > sp_lmnem) return NO_ITEM;
       56        56    1         if (instr == op_loc) {
       57        57    2            if (INSTR(l->l_next) == op_cal) return NO_ITEM;
       58        58    2           if (INSTR(l->l_next) == op_stl && (l->l_next->l_next != (line_p *) 0) &&
"zbe$ra_items:c.:ZBC3TSI", line 58: (warning) incompatible pointers in !=
       59        59    2              INSTR(l->l_next->l_next) == op_lal) return NO_ITEM;
       60        60    2         }
       61        61    1         if (INSTR(l) == op_stl && (l->l_next != (line_p *) 0) &&
"zbe$ra_items:c.:ZBC3TSI", line 61: (warning) incompatible pointers in !=
       62        62    1            INSTR(l->l_next) == op_lal) return NO_ITEM;
       63        63    1         if ((instr == op_zrl || instr == op_stl) && l->l_next != (line_p) 0) {
       64        64    2           if (INSTR(l->l_next) == op_lal && l->l_a.la_offset == l->l_next->l_a.la_off
                               set) {
       65        65    3              return NO_ITEM; }
       66        66    2         }
       67        67    1         t =  itemtab[instr - sp_fmnem].id_type;
       68        68    1         if (t == CONST && SMALL_CONSTANT(off_set(l))) return NO_ITEM;
       69        69    1         return t;
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       70        70    1        }
       71        71
       72        72
       73        73
       74        74             bool is_item(l)
       75        75              line_p l;
       76        76             {
       77        77    1         return item_type(l) != NO_ITEM;
       78        78    1        }
       79        79
       80        80
       81        81             item_p item_of(off,items)
       82        82              offset off;
       83        83              item_p items[];
       84        84             {
       85        85    1         register item_p x;
       86        86    1
       87        87    1         for (x = items[LOCALVAR]; x != (item_p) 0; x = x->it_next) {
       88        88    2            if (off == x->i_t.it_off) {
       89        89    3               if (!x->it_desirable) break;
       90        90    3                     /* don't put this item in reg */
       91        91    3               return x;
       92        92    3            }
       93        93    2         }
       94        94    1         return (item_p) 0;
       95        95    1        }
       96        96
       97        97
       98        98
       99        99             fill_item(item,l)
      100       100              item_p item;
      101       101              line_p l;
      102       102             {
      103       103    1         item->it_type = item_type(l);
      104       104    1         item->it_desirable = TRUE;
      105       105    1         switch(item->it_type) {
      106       106    2            case GLOBL_ADDR:
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      107       107    2               item->i_t.it_obj = OBJ(l);
      108       108    2               break;
      109       109    2            case PROC_ADDR:
      110       110    2               item->i_t.it_proc = PROC(l);
      111       111    2               break;
      112       112    2            default:
      113       113    2               item->i_t.it_off = off_set(l);
      114       114    2         }
      115       115    1        }
      116       116
      117       117
      118       118
      119       119             STATIC bool ra_desirable(l)
      120       120              line_p l;
      121       121             {
      122       122    1         /* See if it is really desirable to put the item of line l
      123       123    1          * in a register. We do not put an item in a register if it
      124       124    1          * is used as 'address of array descriptor' of an array
      125       125    1          * instruction.
      126       126    1         */
      127       127    1
      128       128    1         if (l->l_next != (line_p) 0) {
      129       129    2            switch(INSTR(l->l_next)) {
      130       130    3               case op_aar:
      131       131    3               case op_lar:
      132       132    3               case op_sar:
      133       133    3                  return FALSE;
      134       134    3            }
      135       135    2         }
      136       136    1         return TRUE;
      137       137    1        }
      138       138
      139       139
      140       140
      141       141             STATIC int cmp_items(a,b)
      142       142              item_p a,b;
      143       143             {
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      144       144    1         /* This routine defines the <, = and > relations between items,
      145       145    1          * used to sort them for fast lookup.
      146       146    1          */
      147       147    1
      148       148    1         offset n1,n2;
      149       149    1
      150       150    1         switch(a->it_type) {
      151       151    2            case GLOBL_ADDR:
      152       152    2               assert(b->it_type == GLOBL_ADDR);
      153       153    2               n1 = (offset) a->i_t.it_obj->o_id;
      154       154    2               n2 = (offset) b->i_t.it_obj->o_id;
      155       155    2               break;
      156       156    2            case PROC_ADDR:
      157       157    2               assert(b->it_type == PROC_ADDR);
      158       158    2               n1 = (offset) a->i_t.it_proc->p_id;
      159       159    2               n2 = (offset) b->i_t.it_proc->p_id;
      160       160    2               break;
      161       161    2            default:
      162       162    2               n1 = a->i_t.it_off;
      163       163    2               n2 = b->i_t.it_off;
      164       164    2         }
      165       165    1         return (n1 == n2 ? 0 : (n1 > n2 ? 1 : -1));
      166       166    1        }
      167       167
      168       168
      169       169
      170       170             bool same_item(a,b)
      171       171              item_p a,b;
      172       172             {
      173       173    1         return cmp_items(a,b) == 0;
      174       174    1        }
      175       175
      176       176
      177       177             STATIC bool lt_item(a,b)
      178       178              item_p a,b;
      179       179             {
      180       180    1         return cmp_items(a,b) == -1;
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      181       181    1        }
      182       182
      183       183
      184       184
      185       185             /* build_itemlist()
      186       186              *
      187       187              * Build a list of all items used in the current procedure. An item
      188       188              * is anything that can be put in a register (a local variable, a constant,
      189       189              * the address of a local or global variable).
      190       190              * For each type of item we use a sorted list containing all items of
      191       191              * that type found so far.
      192       192              * A local variable is only considered to be an item if there is a
      193       193              * register message for it (indicating it is never accessed indirectly).
      194       194              * For each item, we keep track of all places where it is used
      195       195              * (either fetched or stored into). The usage of a local variable is also
      196       196              * considered to be a usage of its address.
      197       197              */
      198       198
      199       199
      200       200
      201       201             static item_p items[NRITEMTYPES];  /* items[i] points to the list of type i */

      202       202
      203       203
      204       204
      205       205             STATIC short reg_type(item)
      206       206              item_p item;
      207       207             {
      208       208    1         /* See which type of register the item should best be assigned to */
      209       209    1
      210       210    1         switch(item->it_type) {
      211       211    2            case LOCALVAR:
      212       212    2               return regv_type(item->i_t.it_off);
      213       213    2               /* use type mentioned in reg. message for local */
      214       214    2            case LOCAL_ADDR:
      215       215    2            case GLOBL_ADDR:
      216       216    2            case PROC_ADDR:
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=7  
      217       217    2               return reg_pointer;
      218       218    2            case CONST:
      219       219    2            case DCONST:
      220       220    2               return reg_any;
      221       221    2            default: assert(FALSE);
      222       222    2         }
      223       223    1         /* NOTREACHED */
      224       224    1        }
      225       225
      226       226
      227       227
      228       228             STATIC short item_size(item)
      229       229              item_p item;
      230       230             {
      231       231    1         /* Determine the size of the item (in bytes) */
      232       232    1
      233       233    1         switch(item->it_type) {
      234       234    2            case LOCALVAR:
      235       235    2               return regv_size(item->i_t.it_off);
      236       236    2               /* use size mentioned in reg. message for local */
      237       237    2            case LOCAL_ADDR:
      238       238    2            case GLOBL_ADDR:
      239       239    2            case PROC_ADDR:
      240       240    2               return ps; /* pointer size */
      241       241    2            case CONST:
      242       242    2               return ws; /* word size */
      243       243    2            case DCONST:
      244       244    2               return 2 * ws; /* 2 * word size */
      245       245    2            default: assert(FALSE);
      246       246    2         }
      247       247    1         /* NOTREACHED */
      248       248    1        }
      249       249
      250       250
      251       251
      252       252             STATIC init_item(a,b)
      253       253              item_p a,b;
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=8  
      254       254             {
      255       255    1         a->it_type = b->it_type;
      256       256    1         switch(a->it_type) {
      257       257    2            case GLOBL_ADDR:
      258       258    2               a->i_t.it_obj = b->i_t.it_obj;
      259       259    2               break;
      260       260    2            case PROC_ADDR:
      261       261    2               a->i_t.it_proc = b->i_t.it_proc;
      262       262    2               break;
      263       263    2            default:
      264       264    2               a->i_t.it_off = b->i_t.it_off;
      265       265    2         }
      266       266    1         a->it_usage = Lempty_set();
      267       267    1         a->it_regtype = reg_type(b);
      268       268    1         a->it_size = item_size(b);
      269       269    1         a->it_desirable = b->it_desirable;
      270       270    1         a->it_lives = (item_p) 0;
"zbe$ra_items:c.:ZBC3TSI", line 270: (warning) incompatible pointers in =
      271       271    1        }
      272       272
      273       273
      274       274
      275       275             STATIC add_item(item,t,items)
      276       276              item_p item;
      277       277              time_p t;
      278       278              item_p items[];
      279       279             {
      280       280    1         /* See if there was already a list element for item. In any
      281       281    1          * case record the fact that item is used at 't'.
      282       282    1          */
      283       283    1
      284       284    1         register item_p x, *q;
      285       285    1
      286       286    1         q = &items[item->it_type]; /* each type has its own list */
      287       287    1         for (x = *q; x != (item_p) 0; x = *q) {
      288       288    2            if (same_item(x,item)) {
      289       289    3               /* found */
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=9  
      290       290    3               if (!item->it_desirable) {
      291       291    4                  x->it_desirable = FALSE;
      292       292    4               }
      293       293    3               Ladd(t,&x->it_usage);
      294       294    3               return; /* done */
      295       295    3            }
      296       296    2            if (lt_item(item,x)) break;
      297       297    2            q = &x->it_next;
      298       298    2         }
      299       299    1         /* not found, allocate new item; q points to it_next field of
      300       300    1          * the item after which the new item should be put.
      301       301    1          */
      302       302    1         x = newitem();
      303       303    1         x->it_next = *q;
      304       304    1         *q = x;
      305       305    1         init_item(x,item);
      306       306    1         Ladd(t,&x->it_usage);
      307       307    1        }
      308       308
      309       309
      310       310
      311       311             STATIC add_usage(l,b,items)
      312       312              line_p l;
      313       313              bblock_p b;
      314       314              item_p items[];
      315       315             {
      316       316    1         /* An item is used at line l. Add it to the list of items.
      317       317    1          * A local variable is only considered to be an item, if
      318       318    1          * there is a register message for it; else its address
      319       319    1          * is also considered to be an item.
      320       320    1          */
      321       321    1
      322       322    1         struct item thisitem;
      323       323    1
      324       324    1         fill_item(&thisitem,l); /* fill in some fields */
      325       325    1         if (!ra_desirable(l)) {
      326       326    2            thisitem.it_desirable = FALSE; /* don't put item in reg. */
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=10 
      327       327    2         }
      328       328    1         if (thisitem.it_type == LOCALVAR && !is_regvar(thisitem.i_t.it_off)) {
      329       329    2            /* Use address of local instead of local itself */
      330       330    2            thisitem.it_type = LOCAL_ADDR;
      331       331    2            thisitem.it_regtype = reg_pointer;
      332       332    2         }
      333       333    1         add_item(&thisitem,cons_time(l,b),items);
      334       334    1        }
      335       335
      336       336
      337       337
      338       338             build_itemlist(p,items,nrinstr_out)
      339       339              proc_p p;
      340       340              item_p items[];
      341       341              int    *nrinstr_out;
      342       342             {
      343       343    1         /* Make a list of all items used in procedure p.
      344       344    1          * An item is anything that can be put in a register,
      345       345    1          * such as a local variable, a constant etc.
      346       346    1          * As a side effect, determine the number of instructions of p.
      347       347    1          */
      348       348    1
      349       349    1         register line_p l;
      350       350    1         register bblock_p b;
      351       351    1         register cnt= 0;
      352       352    1
      353       353    1         clean_tab(items);
      354       354    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      355       355    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      356       356    3               if (is_item(l)) {
      357       357    4                  add_usage(l,b,items);
      358       358    4               }
      359       359    3               cnt++;
      360       360    3            }
      361       361    2         }
      362       362    1         *nrinstr_out = cnt;
      363       363    1        }
CC.C03    File=zbe$ra_items:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=11 
      364       364
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_aux:h.:ZBC3TOU. is referenced
   zbe$ra_items:h.:ZBC3TOU. is referenced
   zbe$itemtab:h.:ZBC3TOU. is referenced

3 warnings were detected in the file zbe$ra_items:c.:ZBC3TSI
