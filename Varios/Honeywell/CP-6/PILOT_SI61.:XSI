/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*                   Written By: Ben Faul @LADC                     */
 
PILOT:  PROC MAIN;
  /*A* PILOT: A simple Turtle graphics system for CP6 */
 
  /* **** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****
 
     This implementation of PILOT is a very simple one that
     was written for expediency purposes and not for elegance
     of compiler style.
 
     None the less, this implementation of PILOT contains all
     the functionality of PILOT needed to do some pretty sophisticated
     graphics with the turtle.
 
     This implementation was written by: Ben Faul at LADC.
 
  **** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****/
 
DCL INPUT CHAR(256) STATIC SYMDEF;      /* INPUT BUFFER                       */
DCL OUTPUT CHAR(256) STATIC SYMDEF;     /* OUTPUT BUFFER                      */
DCL NUMBER_C CHAR(4);                   /* NUMBER, IN CHARACTER FORM          */
DCL NUMBER_U UBIN;                      /* NUMBER IN UBIN FORM                */
DCL 1 SYMBOL_TABLE(0:25) STATIC SYMDEF, /* symbol table for PILOT             */
      2 NUM UBIN  INIT(0*26),           /* variable                           */
      2 TEXT CHAR(256) INIT(' '*26);    /* interpreter text                   */
DCL ACCUMULATOR UBIN STATIC SYMDEF INIT(0) UNAL; /* pilot accumulator         */
DCL ERROR_BIT BIT(1) STATIC SYMDEF;     /* error detection flag               */
DCL IDENTITY BIT(1) STATIC SYMDEF;      /* loop halt mechanism                */
DCL BITMAP(0:9999) BIT(1) STATIC SYMDEF INIT('0'B*10000) UNAL;
DCL DIRECTION UBIN STATIC SYMDEF INIT(0); /* point north                      */
DCL CURRENT(0:1) UBIN STATIC SYMDEF INIT(50,50); /* current cursor position   */
DCL LAST(0:1) UBIN STATIC SYMDEF INIT(50,50); /* last cursor position         */
DCL SEED UBIN STATIC SYMDEF;
DCL GRAPHICS_MODE BIT(1) STATIC SYMDEF;
DCL PEN BIT(1) STATIC SYMDEF INIT('0'B); /* pen down by default               */
DCL SCREEN_MODE UBIN STATIC SYMDEF INIT(3); /* clipping, default              */
DCL BUFFER_OLD CHAR(25) STATIC SYMDEF INIT(' '); /* turtle status area        */
DCL REMVAR REMEMBER STATIC SYMDEF;
DCL MAX_LENGTH UBIN STATIC SYMDEF INIT(100); /* screen size 0-100 default     */
                                        /* 2= reflect                         */
                                        /* 1= wrap                            */
 
DCL USERS(0:25) CHAR(1) STATIC SYMDEF INIT('A','B','C','D','E','F','G','H','I','J','K','L',
'M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');
 
DCL TYPE CHAR(1) STATIC INIT(' ');
DCL ZERO UBIN STATIC INIT(0);
DCL ONE UBIN STATIC INIT(1);
DCL TRUE BIT(1) STATIC INIT('1'B);
DCL MODE BIT(1);
DCL WHERE UBIN;
DCL SIZE UBIN;
 
  /************************************
      SYSTEM MACROS FOUND BELOW
  ************************************/
 
  %INCLUDE CP_6;
  %F$DCB;
  %FPT_READ(FPTN=READ_SI,BUF=INPUT,DCB=M$SI);
  %FPT_WRITE(FPTN=WRITE_LO,BUF=OUTPUT,DCB=M$LO);
  %FPT_PROMPT(FPTN=PROMPT,PROMPT=PROMPT_BUF);
  %FPT_INT(FPTN=BREAK,UENTRY=INT);
 
DCL PROMPT_BUF CHAR(1) STATIC INIT('}');
DCL M$SI DCB;
DCL M$LO DCB;
 
  /*************************************************
       entry definitions found below
  **************************************************/
 
DCL ERROR ENTRY(4);
DCL FTX_RPTERR ENTRY;                   /* report error, system type          */
DCL LEX_INPUT ENTRY(5) ALTRET;          /* lexically analyze input string     */
DCL INT ENTRY ASYNC;
DCL COMPRESS ENTRY(2);
DCL RANDSS ENTRY(1);
DCL GESCAPE ENTRY(1);
DCL GMOVA2 ENTRY(2);
DCL XG$TEXT_COUNT ENTRY(2);
  %INCLUDE PILOT_C1;
  %EJECT;
        SEED=1234567;
        CALL RANDSS(SEED);
        CALL M$PROMPT(PROMPT) ALTRET(ERROR);
        OUTPUT=' ';
        CALL M$WRITE(WRITE_LO) ALTRET(ERROR);
        OUTPUT=' PILOT C00 Here ';
        CALL M$WRITE(WRITE_LO) ALTRET(ERROR);
        OUTPUT=' ';
        CALL M$WRITE(WRITE_LO) ALTRET(ERROR);
        CALL M$INT(BREAK);
        OUTPUT='Attempting to load $PILOT_ROM';
        ONE=1;
        ZERO=0;
        TRUE='1'B;
        TYPE=' ';
        ERROR_BIT='0'B;
        SIZE=20;
        INPUT='''LOAD''''$PILOT_ROM.X''';
        CALL LEX_INPUT(TRUE,ZERO,INPUT,SIZE,TYPE);
 
        REMEMBER TOP IN REMVAR;         /* if unwind then come back here      */
TOP:    DO WHILE('1'B);                 /* do forever, read input commands    */
           ONE=1;
           ZERO=0;
           TRUE='1'B;
           INPUT=' ';
           TYPE=' ';
           ERROR_BIT='0'B;              /* no error                           */
/*       CALL GESCAPE ('0')  */
           CALL M$READ(READ_SI)
           WHENALTRETURN DO;       /* if altret find out  why, then abort     */
              CALL FTX_RPTERR;
              CALL M$EXIT;
              END;
           SIZE=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
           IF INPUT~=' ' THEN
           CALL LEX_INPUT(TRUE,ZERO,INPUT,SIZE,TYPE)
             ALTRET(DOWN);
DOWN:      END;
ERROR:  CALL FTX_RPTERR;
END;
  %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
LEX_INPUT: PROC(TF,E_EXTENT,CHARN,SIZE,TYPE) ALTRET;
  /*A* LEX_INPUT: Lexically analyze the input of the interpreter */
 
DCL TF BIT(1);                          /* true or false                      */
DCL IT UBIN;                            /* iteration counter                  */
DCL EXTENT UBIN;                        /* deepest character encountered      */
DCL E_EXTENT UBIN;
DCL CHARN CHAR(SIZE);                   /* string to parse                    */
DCL SIZE UBIN;                          /* size of string                     */
DCL TYPE CHAR(1);             /* ' '=normal,')'= expect same, ']'=expect same */
DCL OLD_TYPE CHAR(1);
DCL SAVE_ACCUM UBIN;
DCL I UBIN;                             /* where the current token pointer is */
DCL J UBIN;
DCL K UBIN;
DCL TEMP CHAR(20);
DCL TEST BIT(1);
DCL QUEST_SAVE UBIN;                    /* save accumulator on random command */
DCL PARSE_B ENTRY(4) ALTRET;
DCL PARSE_C ENTRY(1);
DCL PARSE_D ENTRY(1);
DCL PARSE_E ENTRY(2);
DCL PARSE_F ENTRY(1);
DCL PARSE_H ENTRY(1);
DCL PARSE_S ENTRY(1);
DCL PARSE_T ENTRY(4);
DCL PARSE_U ENTRY(1);
DCL PARSE_W ENTRY(4) ALTRET;
DCL PARSE_INPUT ENTRY;
DCL PARSE_OUTPUT ENTRY(3);
DCL PARSE_READ ENTRY(4);
DCL PARSE_BOX ENTRY;
DCL PARSE_PIXELS ENTRY(3);
DCL INCREMENT_ACCUM ENTRY ALTRET;
DCL DECREMENT_ACCUM ENTRY ALTRET;
DCL DEFINES ENTRY(2) ALTRET;
DCL ZERO_ACCUM ENTRY;
DCL QUIT ENTRY(4) ALTRET;
DCL LOAD ENTRY(4) ALTRET;
DCL SAVE ENTRY(4) ALTRET;
DCL DEBUG ENTRY ALTRET;
DCL STIMER ENTRY(3);
DCL TTIMER ENTRY(3);
DCL USER_COMMAND ENTRY(2) ALTRET;
DCL RANDOM ENTRY(1);
DCL GINIT ENTRY(4);
DCL GSCORTP ENTRY(1);
DCL GCLRSEG ENTRY;
DCL GDELSRF ENTRY(1);
DCL GTRMSRF ENTRY(1);
DCL GTERM ENTRY;
DCL GMOVA2 ENTRY(2);
DCL GSET_WINDOW ENTRY(4);
  DCL GNITSRF  ENTRY (2);
DCL GSCLIPW ENTRY(1);
DCL GCRRSEG ENTRY(1);
DCL GSELSRF ENTRY(1);
DCL UPDATE_DEBUG ENTRY(1);
  %INCLUDE PILOT_C2;
 
DCL COMPRESS ENTRY(2);
DCL ERROR ENTRY(4);           /* prints error messages pertinant to PILOT     */
 
%INCLUDE CP_6;
%FPT_CLRSTK(FPTN=CLEAR,FRAMES=256);
  %INCLUDE PILOT_C1;
 
  %EJECT;
        IDENTITY='0'B;                  /* dont stop iterations               */
        CALL COMPRESS(CHARN,SIZE);      /* squeeze input                      */
        IF SUBSTR(CHARN,0,1)='"' THEN RETURN; /* comment, no action           */
        EXTENT=511;                     /* undefined                          */
        IT=1;
        DO I=E_EXTENT TO SIZE;          /* lexically analyze input string     */
TOP:       IF IT~=0 THEN
           DO SELECT(SUBSTR(CHARN,I,1));
  %EJECT;
            SELECT('A');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,0);
              ELSE IF TF THEN DO;
                    IT=ACCUMULATOR;
                    I=I+1;
                    GOTO TOP;
                    END;
            SELECT('B');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,1);
              ELSE
              CALL PARSE_B(TF,CHARN,SIZE,I) ALTRET(SKIP);
            SELECT('C');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,2);
              ELSE CALL PARSE_C(TF);
            SELECT('D');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,3);
              ELSE CALL PARSE_D(TF);    /* command goes here                  */
            SELECT('E');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,4);
              ELSE DO;
                 CALL PARSE_E(TF,TEST); /* are we at edge of screen           */
                 CALL PARSE_T(TEST,CHARN,SIZE,I);
                 END;
            SELECT('F');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,5);
              ELSE CALL PARSE_F(TF);
            SELECT('H');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,7);
              ELSE CALL PARSE_H(TF);
            SELECT('L');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,11);
              ELSE IF TF THEN DO;
                    IF DIRECTION=7 THEN DIRECTION=0;
                    ELSE DIRECTION=DIRECTION+1;
                    END;
            SELECT('N');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,13);
              ELSE IF TF THEN
                    DIRECTION=0;        /* point north                        */
            SELECT('R');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,17);
              ELSE IF TF THEN DO;
                    IF DIRECTION=0 THEN DIRECTION=7;
                    ELSE DIRECTION=DIRECTION-1;
                    END;
            SELECT('S');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,18);
              ELSE CALL PARSE_S(TF);    /* command goes here                  */
            SELECT('T');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,19);
              ELSE DO;
                 TEST=TF;
                 CALL PARSE_T(TEST,CHARN,SIZE,I);
                 END;
            SELECT('U');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,20);
              ELSE CALL PARSE_U(TF);    /* command goes here                  */
            SELECT('W');
              IF SUBSTR(CHARN,I-1,1)='*' THEN
              CALL USER_COMMAND(TF,22);
              IF ~TF THEN TEST='0'B;
              ELSE
              CALL PARSE_W(TF,CHARN,SIZE,I) ALTRET(SKIP);
            SELECT('G','I','J','K','M','O','P','Q','V','X','Y','Z');
              IF TF THEN DO K=0 TO 25;
                 IF USERS(K)=SUBSTR(CHARN,I,1) THEN DO;
                    CALL USER_COMMAND(TF,K);
                    GOTO NEXT;
                    END;
                 END;
NEXT:         I=I;                      /* dont do anything                   */
  %EJECT;
            SELECT('0','1','2','3','4','5','6','7','8','9'); /* numerics      */
 
              DO J=I TO SIZE;
                 IF SUBSTR(CHARN,J,1)<'0' OR
                   SUBSTR(CHARN,J,1)>'9' THEN GOTO FOUND_D;
                 END;
FOUND_D:      TEMP=SUBSTR(CHARN,I,J-I);
              IF J-I>4 THEN DO;         /* greater than 9999, not allowed     */
                 CALL CHARBIN(IT,SUBSTR(TEMP,0,4));
                 CALL ERROR('LARGER THAN 9999 (TRUNCATED)',TEMP,27,J-I);
                 END;
              ELSE CALL CHARBIN(IT,SUBSTR(CHARN,I,J-I));
              I=J-1;
              GOTO SKIP;
  %EJECT;
            SELECT('#');
              I=I+1;
              IF SUBSTR(CHARN,I,1)>='A' AND
                SUBSTR(CHARN,I,1)<='Z' THEN DO;
                 IF TF THEN DO K=0 TO 25;
                    IF SUBSTR(CHARN,I,1)=USERS(K) THEN DO;
                       IT=SYMBOL_TABLE.NUM(K);
                       I=I+1;
                       K=25;
                       END;
                    END;
                 END;
              ELSE CALL ERROR('CANT USE AS A VARIABLE: ',SUBSTR(CHARN,I,1),24,1)
                ;
              GOTO TOP;
            SELECT('&');
  %EJECT;
            SELECT('''');               /* system commands                    */
 
  /* System commands are handled in the lexical phase by converting the
     commands and targets (if any) into theur codes and placing on the
     stack. In this manner PILOT variables can contain system commands
     in the compiled instead of text form. Since the variables can contain
     only 256 characters this implementation saves space. */
 
              I=I+1;                    /* advance character pointer          */
              DO J=I TO SIZE;           /* find the next ' delimiter          */
                 IF SUBSTR(CHARN,J,1)='''' THEN GOTO FOUND_Q;
                 END;
FOUND_Q:      TEMP=SUBSTR(CHARN,I,J-I);
              IF SUBSTR(CHARN,J,1)~='''' THEN DO; /* not terminated           */
                 CALL ERROR('SYSTEM CALL NOT TERMINATED',TEMP,26,20);
                 ALTRETURN;
                 END;
              DO SELECT (SUBSTR(CHARN,I,J-I));
               SELECT('WRAP');          /* wrap around mode                   */
                 IF TF THEN SCREEN_MODE=1; /* wrap around                     */
               SELECT('REFLECT');       /* reflect on the edge                */
                 IF TF THEN SCREEN_MODE=2;
               SELECT('CLIP');
                 IF TF THEN SCREEN_MODE=3;
                                   /* clip off offending vectors, default     */
               SELECT('HALT');          /* stop execution, return to user     */
                 IF TF THEN DO;
                    CALL M$CLRSTK(CLEAR);
                    UNWIND TO REMVAR;
                    END;
               SELECT('CLEAR');         /* clear some or all function(s)      */
                 IF TF THEN DO K=0 TO 25;
                    SYMBOL_TABLE.TEXT(K)=' ';
                    SYMBOL_TABLE.NUM(K)=0;
                    END;
               SELECT('LOAD');          /* copy a pilot run unit (fid)        */
                 CALL LOAD(TF,CHARN,SIZE,J);
               SELECT('SAVE');          /* save functions to file name        */
                 CALL SAVE(TF,CHARN,SIZE,J);
               SELECT('QUIT','STOP','END','ABORT'); /* stop execution         */
                 CALL QUIT(TF,CHARN,SIZE,J);
               SELECT('DEBUG','TEXT');  /* enter debug mode                   */
                 IF TF THEN DO;
                    IF ~GRAPHICS_MODE AND
                      SUBSTR(CHARN,I,J-I)~='TEXT' THEN CALL DEBUG;
                                        /* already in debug mode              */
                    ELSE IF GRAPHICS_MODE AND
                         SUBSTR(CHARN,I,J-I)~='TEXT' THEN DO;
                          GRAPHICS_MODE='0'B; /* debug mode                   */
                          CALL GCLRSEG;
                          CALL GDELSRF(0);
                          CALL GTRMSRF(0);
                          CALL GTERM;
                          CALL DEBUG;   /* build debug file                   */
                          END;
                       ELSE IF GRAPHICS_MODE AND
                            SUBSTR(CHARN,I,J-1)='TEXT' THEN DO;
                             GRAPHICS_MODE='0'B;
                             CALL GCLRSEG;
                             CALL GDELSRF(0);
                             CALL GTRMSRF(0);
                             CALL GTERM;
                             END;
                    END;
               SELECT('GRAPHICS','GRAPH');
                 IF GRAPHICS_MODE THEN; /* already in graphics mode           */
                 ELSE IF TF THEN DO;
                       CALL GINIT('BUFFERED','NONE','2D','NONE');
                       GRAPHICS_MODE='1'B; /* graphics commands apply         */
                       CALL GSCORTP('LEFT');
                       CALL GNITSRF(0,'INTENSITY');
                       CALL GSELSRF(0);
                       CALL GSCLIPW('ON');
                       CALL GSET_WINDOW(0,MAX_LENGTH,0,MAX_LENGTH);
                       CALL GCRRSEG(1);
                       CURRENT(0)=MAX_LENGTH/2;
                       CURRENT(1)=MAX_LENGTH/2;
                       CALL GMOVA2(50,50);
                       PEN='0'B;        /* DOWN                               */
                       END;
               SELECT('INPUT');         /* read from user, execute            */
                 IF TF THEN CALL PARSE_INPUT;
               SELECT('OUTPUT');        /* output some message                */
                 IF TF THEN CALL PARSE_OUTPUT(CHARN,SIZE,J);
               SELECT('READ');          /* read a number from the user        */
                 CALL PARSE_READ(TF,CHARN,SIZE,J);
               SELECT('ROTATE');        /* rotational angle, 45 by default    */
               SELECT('BOX');           /* outline drawing surface            */
                 IF TF THEN CALL PARSE_BOX;
               SELECT('PIXEL','PIXELS','SURFACE'); /* modify surface size     */
                 IF TF THEN CALL PARSE_PIXELS(CHARN,SIZE,J);
               SELECT('STIMER');        /* set interval timer                 */
                 IF TF THEN CALL STIMER(CHARN,SIZE,J);
               SELECT('TTIMER');        /* test (or reset) interval timer     */
                 IF TF THEN CALL TTIMER(CHARN,SIZE,J);
               SELECT(ELSE);            /* undefined                          */
                 IF TF THEN CALL ERROR(SUBSTR(CHARN,I,J-I),' ',J-I,1);
                 IF TF THEN ERROR_BIT='0'B;
               END;
              I=J;
  %EJECT;
            SELECT('(');
              I=I+1;                    /* advance                            */
              OLD_TYPE=TYPE;
              EXTENT=I;
              CALL LEX_INPUT(TF,EXTENT,CHARN,SIZE,TYPE) ALTRET(SKIP);
              IF TYPE~=')' THEN CALL ERROR('NESTING ERROR, EXPECTED',')',23,1);
              TYPE=OLD_TYPE;
              I=I-1;
            SELECT(')');
              E_EXTENT=I;               /* last executed position             */
              TYPE=')';
              RETURN;
            SELECT('=');
              I=I+1;
              CALL DEFINES(CHARN,SIZE) ALTRET(SKIP);
              I=SIZE;IT=0;
            SELECT('?');
              CALL RANDOM(SEED);
              CALL BINCHAR(TEMP,SEED);
              CALL CHARBIN(QUEST_SAVE,SUBSTR(TEMP,12,1));
              IF QUEST_SAVE<5 THEN TEST='0'B;
              ELSE TEST='1'B;
              CALL PARSE_T(TEST,CHARN,SIZE,I);
            SELECT('[');
              I=I+1;                    /* advance                            */
              SAVE_ACCUM=ACCUMULATOR;   /* save the accumulator               */
              EXTENT=I;
              OLD_TYPE=TYPE;
              CALL LEX_INPUT(TF,EXTENT,CHARN,SIZE,TYPE) ALTRET(SKIP);
              ACCUMULATOR=SAVE_ACCUM;
              I=I-1;                    /* retreat                            */
              IF TYPE~=']' THEN CALL ERROR('NESTING ERROR, EXPECTED',']',23,1);
              TYPE=OLD_TYPE;
            SELECT(']');
              E_EXTENT=I;               /* last executed position             */
              TYPE=']';
              RETURN;
            SELECT('*');
              I=I+1;
 
              GOTO TOP;
            SELECT('$');                /* accum -> varible                   */
              I=I+1;
              IF SUBSTR(CHARN,I,1)>='A' AND
                SUBSTR(CHARN,I,1)<='Z' THEN DO;
                 IF TF THEN DO K=0 TO 25;
                    IF SUBSTR(CHARN,I,1)=USERS(K) THEN DO;
                       SYMBOL_TABLE.NUM(K)=ACCUMULATOR;
                       K=25;
                       END;
                    END;
                 END;
              ELSE CALL ERROR('CANT USE AS A VARIABLE: ',SUBSTR(CHARN,I,1),24,1)
                ;
            SELECT('+');
              IF TF THEN CALL INCREMENT_ACCUM ALTRET(SKIP);
            SELECT('-');
              IF TF THEN CALL DECREMENT_ACCUM ALTRET(SKIP);
            SELECT('!');
              IF TF THEN IDENTITY='1'B; /* halt inner iteration               */
            SELECT('^');
              IF TF THEN IT=IT-1;
            SELECT(';');
              IF TF THEN ACCUMULATOR=DIRECTION; /* 0=N,1=E,2=S,3=W            */
            SELECT('@');
              IF TF THEN ACCUMULATOR=0;
            SELECT('%');
              I=I+1;
              IF SUBSTR(CHARN,I,1)>='A' AND
                SUBSTR(CHARN,I,1)<='Z' THEN DO;
                 IF TF THEN DO K=0 TO 25;
                    IF SUBSTR(CHARN,I,1)=USERS(K) THEN DO;
                       ACCUMULATOR=SYMBOL_TABLE.NUM(K);
                       K=25;
                       END;
                    END;
                 END;
              ELSE CALL ERROR('CANT USE AS A VARIABLE: ',SUBSTR(CHARN,I,1),24,1)
                ;
            SELECT('{');                /* open comment                       */
              DO J=I TO SIZE;           /* gobble up the comment              */
                 IF SUBSTR(CHARN,J,1)='}' THEN GOTO CLOSE_COMMENT;
                 ELSE ;
                 END;
CLOSE_COMMENT: I=J;
            SELECT(ELSE);               /* no matches found                   */
              GOTO SKIP;                /* dont increment stack pointer       */
            END;
           IF IT=0 OR IDENTITY='1'B THEN DO;
              IDENTITY='0'B;
              IT=1;
              IF EXTENT~=511 THEN DO;
                 I=EXTENT;
                 EXTENT=511;
                 END;
              END;
           ELSE DO;
              I=I-1;                    /* REDO                               */
              IT=IT-1;
              END;
SKIP:      IF GRAPHICS_MODE THEN;
           END;
END;
  %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
FTX_RPTERR: PROC;
 
  %INCLUDE CP_6;
  %F$DCB;
 
  %B$ALT;
 
  %B$TCB;
 
DCL B$TCB$ PTR SYMREF;
  %FPT_ERRMSG(FPTN=ERRBUFFERMSG,
     OUTDCB1=M$DO,
     BUF=ERRBUFFER,
     CODE=ERRCODE,
     INCLCODE=NO);
 
  %VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STATIC SYMDEF);
DCL ERRBUFFER CHAR(120) STATIC;
DCL M$DO DCB;
  %INCLUDE PILOT_C2;
DCL GCLRSEG ENTRY;
DCL GDELSRF ENTRY(1);
DCL GTRMSRF ENTRY(1);
DCL GTERM ENTRY;
  /*F*     NAME: FTX_RPTERR
           PURPOSE: Report ALTRET frame error.
   ***/
 
                                        /********************/
 
        ERRBUFFERMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
        ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        ERRCODE.SEV = 4;
        IF GRAPHICS_MODE THEN DO;       /* get out of graphics mode           */
           CALL GCLRSEG;
           CALL GDELSRF(0);
           CALL GTRMSRF(0);
           CALL GTERM;
           END;
        CALL M$ERRMSG(ERRBUFFERMSG);
        ERROR_BIT='1'B;
 
END FTX_RPTERR;
  %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
 
 
 
 
ERROR:  PROC(MESSAGE,TARGET,M,N);
  /*A* ERROR: Prints PILOT error messages */
 
DCL MESSAGE CHAR(80);
DCL TARGET CHAR(20);
DCL M UBIN;
DCL N UBIN;
 
DCL FTX_RPTERR ENTRY;
 
  %INCLUDE CP_6;
  %FPT_WRITE(FPTN=WRITE,BUF=OUTPUT,DCB=M$LO);
DCL GMOVA2 ENTRY(2);
DCL XG$TEXT_COUNT ENTRY(2);
  %INCLUDE PILOT_C2;
 
        IF ERROR_BIT THEN RETURN;       /* one error message per line         */
        CALL CONCAT(OUTPUT,SUBSTR(MESSAGE,0,M),' ',SUBSTR(TARGET,0,N));
        IF GRAPHICS_MODE THEN DO;       /* write to graphics window           */
           CALL GMOVA2(3,MAX_LENGTH-1); /* 0-25 are debug areas               */
           CALL XG$TEXT_COUNT(OUTPUT,M+N);
           CALL GMOVA2(CURRENT(0),CURRENT(1));
           END;
        ELSE
        CALL M$WRITE(WRITE)
        WHENALTRETURN DO;
           CALL FTX_RPTERR;
           RETURN;
           END;
        ERROR_BIT='1'B;
 
END;
  %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
 
 
 
 
UPDATE_DEBUG: PROC(IT);
  /*A* UPDATE_DEBUG: Display turtle status */
DCL IT UBIN;
DCL I UBIN;
  %INCLUDE PILOT_C2;
DCL GMOVA2 ENTRY(2);
DCL XG$TEXT_COUNT ENTRY(2);
DCL TURTLE_BUF CHAR(9);                 /* turtle status                      */
DCL ACCUMULATOR_BUF CHAR(6);            /* accumulator value                  */
DCL IT_BUF CHAR(7);                     /* iteration value                    */
DCL BUFFER CHAR(25);                    /* output buffer                      */
 
        CALL BINCHAR(SUBSTR(TURTLE_BUF,2,3),CURRENT(0));
        CALL BINCHAR(SUBSTR(TURTLE_BUF,6,3),CURRENT(1));
        SUBSTR(TURTLE_BUF,0,2)='T:';
        SUBSTR(TURTLE_BUF,5,1)=',';
        CALL BINCHAR(ACCUMULATOR_BUF,ACCUMULATOR);
        SUBSTR(ACCUMULATOR_BUF,0,2)='A:';
        CALL BINCHAR(IT_BUF,IT);
        SUBSTR(IT_BUF,0,3)='IT:';
        BUFFER=' ';
        CALL XG$TEXT_COUNT(BUFFER,25);
        CALL CONCAT(BUFFER,TURTLE_BUF,' ',ACCUMULATOR_BUF,' ',IT_BUF);
        IF BUFFER=BUFFER_OLD THEN GOTO DONE; /* no change                     */
        CALL GMOVA2(0,0);
        CALL XG$TEXT_COUNT(TURTLE_BUF,9);
DONE:   CALL GMOVA2(CURRENT(0),CURRENT(1));
END;
 
