/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/****
*
*   BEAVER - Beaumont's Elementary Asynchronous Vanilla-flavored
*            Exception Routine
*
*   BEAVER can be called from any user program (FORTRAN, COBOL, PL-6,
*   etc.) to provide BREAK key handling.  The user calls BEAVER from
*   his program to set up the BREAK key linkage; when BREAK is hit,
*   BEAVER handles the BREAK and performs one of two actions:  Either
*   the "C to continue" message is output, or a user-supplied BREAK
*   counter is incremented.  In the former case, a response other than
*   C or c terminates the program; in the latter case, if the break
*   count exceeds a user-specified maximum, the program is terminated.
*
*   Calling sequence:
*
*       CALL BEAVER [(arg)] [ALTRET ...]
*
*   The action depends on the presence of the argument and/or its
*   contents:
*
*   Case I:  No "arg" specified
*
*       The BREAK linkage is reset to system standard.  ALTRET cannot
*       occur.
*
*   Case II:  arg<0
*
*       If the contents of "arg" are less than zero, BEAVER will
*       prompt the user with "C to continue" when BREAK is hit and
*       read a reply (via M$UC).  If the reply isn't C or c, the
*       program is terminated (M$EXIT with STEPCC=6).  The user's
*       exit routine (if any) may be entered.
*
*   Case III:  arg=0
*
*       If the contents of "arg" are equal to zero, the argument
*       must be a variable located in static memory (not a constant).
*       When BREAK is hit, BEAVER will increment the contents of arg
*       by one each time.  The user program should examine the
*       contents of arg periodically to determine if BREAK was hit.
*       There is no limit on the number of BREAKs tallied in arg in
*       this case.
*
*   Case IV:  arg>0
*
*       If the contents of "arg" are greater than zero, the argument
*       must be a variable located in static memory (not a constant).
*       BEAVER will reset arg to zero.  When BREAK is hit, BEAVER
*       will increment the contents of arg by one each time; if the
*       resulting count exceeds the original value, the user program
*       is terminated (M$EXIT with STEPCC=6).  The user's exit
*       routine (if any) may be entered.  The user program should
*       examine the contents of arg periodically to determine if
*       BREAK was hit.
*
*   In cases III and IV, BEAVER will ALTRET if arg is not in static
*   memory (ISR only).  It will attempt to set the value of arg to
*   -1 before returning; if this is unsuccessful, the user program
*   is likely to abort.
*
*   It is the responsibility of the user program to examine the
*   contents of arg periodically to determine if BREAK has been hit.
*   This should be done at "clean points", where it is appropriate
*   (and possible) to handle the break "event".  Since BEAVER fields
*   the breaks and effectively buffers them, this is usually less of
*   a problem than it might seem.  Just before resuming normal
*   processing, the user routine handling the BREAK should set the
*   contents of arg back to zero.
*
****/
 
BEAVER: PROC(ARG) ALTRET;
 
/****
*
*   %INCLUDEs
*
****/
 
%INCLUDE CP_6;
 
/****
*
*   FPTs
*
****/
 
%FPT_INT;
 
/****
*
*   Parameter definitions
*
****/
 
    DCL ARG ALIGNED                    SBIN;
 
/****
*
*   Global variables
*
****/
 
    DCL BEAVER_ARG$ STATIC SYMDEF      PTR INIT(ADDR(NIL));
 
    DCL BEAVER_MAX# STATIC SYMDEF      SBIN INIT(0);
 
/****
*
*   External routines
*
****/
 
    DCL BEAVER$DAM                     ENTRY ASYNC;
 
/****
*
*   Local variables
*
****/
 
    DCL LOCAL$                         PTR;
    DCL 1 LOCAL REDEF LOCAL$,
          2 * UNAL                     BIT(24),
          2 SEGID UNAL                 BIT(12);
 
/****
*
*   Set the interrupt linkage based on the value (and presence) of arg.
*
****/
 
    IF ADDR(ARG)=ADDR(NIL) THEN DO;
 
/****
*
*   No arg specified, reset linkage.
*
****/
 
        FPT_INT.V.UENTRY#=ENTADDR(NIL);
        CALL M$INT(FPT_INT);
    END;
    ELSE DO;
 
/****
*
*   arg is specified.  If it is <0, we're to output "C to continue".
*
****/
 
        IF ARG<0 THEN DO;
            FPT_INT.V.UENTRY#=ENTADDR(BEAVER$DAM);
            BEAVER_ARG$=ADDR(NIL);
            CALL M$INT(FPT_INT);
        END;
        ELSE DO;
 
/****
*
*   If arg isn't in the ISR, try to return an error (and ALTRET).
*   This may not be successful.  This also doesn't work if the
*   argument is in the data portion of the overlay, but that's not
*   easy to check for.
*
****/
 
            LOCAL$=ADDR(ARG);
            IF LOCAL.SEGID~='6000'O THEN DO;
                ARG=-1;
                ALTRETURN;
            END;
 
/****
*
*   So far, so good.  Now set the arg to zero (this may abort the
*   program if the arg isn't in data), then set up the interrupt
*   linkage and remember the maximum break count.
*
****/
 
            BEAVER_MAX#=ARG;
            ARG=0;
            BEAVER_ARG$=ADDR(ARG);
            FPT_INT.V.UENTRY#=ENTADDR(BEAVER$DAM);
            CALL M$INT(FPT_INT);
        END;
    END;
 
/****
*
*   Return to caller.
*
****/
 
    RETURN;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/****
*
*   BEAVER$DAM - Routine to field BREAKs.
*
*   BEAVER$DAM is entered when the user hits the BREAK key.  The
*   action taken depends on the settings of the global variables
*   BEAVER_ARG$ and BEAVER_MAX#:
*
*   If BEAVER_ARG$ is ADDR(NIL), we output "C to continue", read
*   a reply (via M$UC), and check it for C or c.  If it is either,
*   the program is resumed; otherwise, M$EXIT with STEPCC of 6 is
*   issued.
*
*   If BEAVER_ARG$ is not ADDR(NIL), we increment BEAVER_ARG$->0
*   by one.  If BEAVER_MAX# is zero, we simply return to the user
*   program thereafter.  If BEAVER_MAX# is non-zero and BEAVER_ARG$
*   ->0 exceeds the BEAVER_MAX# value, the program is terminated
*   via M$EXIT with STEPCC of 6; otherwise, the program resumes.
*
*   In any event, the break counter is reset.
*
****/
 
BEAVER$DAM: PROC ASYNC;
 
/****
*
*   %INCLUDEs
*
****/
 
%INCLUDE CP_6;
 
/****
*
*   FPTs
*
****/
 
%FPT_EXIT(STEPCC=ABORT);
 
%FPT_TRMPRG(RSTBRK=YES);
 
%FPT_WRITE(DCB=M$UC,
           BUF=PROMPT,
           VFC=YES);
 
%FPT_READ(DCB=M$UC,
          BUF=REPLY);
 
/****
*
*   Global variables
*
****/
 
    DCL BEAVER_ARG$ SYMREF             PTR;
 
    DCL BEAVER_MAX# SYMREF             SBIN;
 
/****
*
*   Local variables
*
****/
 
    DCL ARG BASED(BEAVER_ARG$) ALIGNED SBIN;
 
    DCL PROMPT CONSTANT CHAR(0) INIT('aEnter C to continue: ');
 
    DCL REPLY STATIC                   CHAR(4);
 
/****
*
*   Reset the break count.
*
****/
 
    CALL M$TRMPRG(FPT_TRMPRG);
 
/****
*
*   If there's no arg, prompt for C to continue.
*
****/
 
    IF BEAVER_ARG$=ADDR(NIL) THEN DO;
        CALL M$WRITE(FPT_WRITE);
        REPLY=' ';
        CALL M$READ(FPT_READ) WHENALTRETURN DO;
            CALL M$EXIT(FPT_EXIT);
        END;
 
/****
*
*   If C or c isn't the first character, give up.
*
****/
 
        IF SUBSTR(REPLY,0,1)~='C' AND SUBSTR(REPLY,0,1)~='c' THEN
            CALL M$EXIT(FPT_EXIT);
 
    END;
 
/****
*
*   If there is an arg, tally one in it.
*
****/
 
    ELSE DO;
        ARG=ARG+1;
 
/****
*
*   If we have a user-specified maximum in BEAVER_MAX# and if we
*   have exceeded that count, terminate the program.
*
****/
 
        IF BEAVER_MAX#>0 AND ARG>BEAVER_MAX# THEN
            CALL M$EXIT(FPT_EXIT);
 
    END;
 
/****
*
*   Otherwise, just return to the interrupted program.
*
****/
 
    RETURN;
 
END;
