/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
FIND:   PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE B_MICROPS_C;
%INCLUDE B$JIT;
%INCLUDE FM$FIT;
%CODE03;
%CODE04;
%CODE09;
%FM$FIT;
 
%FPT_OPEN(FPTN = FPT_OPEN,
        ASN = FILE,
        TEST = YES,
        FUN = IN,
         FPARAM=FIT_BLOCK,
        NXTA = YES,
        NAME = VLP_NAME,
        THISF = YES,
        SN = VLP_SN,
        DCB = M$SI);
DCL FIT_BLOCK CHAR(1024) STATIC;
%VLP_NAME;
%VLP_NAME(FPTN=SAVE_NAME);
%FPT_OPEN(FPTN = FPT_OPEN2,
        DCB = M$SI,
        FPARAM=FIT_BLOCK,
        TEST = YES,
        THISF = YES,
        FUN = IN);
%FPT_WRITE(FPTN=FILE_WRITE,STCLASS=STATIC,DCB=M$LO);
DCL 1 AC_DENIED STATIC,
      2 MES  CHAR(21) INIT('*** Access denied ***'),
      2 *    CHAR(24) INIT(' '),
      2 NAME CHAR(31);
DCL HEADING CHAR(80) STATIC INIT('ORG TY  GRAN  NGAV     REC   LAST MODIFIED   NAME');
/* These are the buffers for the file attribute info */
DCL 1 FILE_ATTRS STATIC,
      2 ORG CHAR(3),
      2 *   CHAR(1) INIT(' '),
      2 TY  CHAR(2),
      2 *   CHAR(2) INIT(' '),
      2 GRAN CHAR(4),
      2 *   CHAR(2) INIT(' '),
      2 NGAV CHAR(4),
      2 *   CHAR(2) INIT(' '),
      2 REC  CHAR(6),
      2 *   CHAR(1) INIT(' '),
      2 LMOD,
        3 TIME CHAR(5),
        3 *    CHAR(1) INIT(' '),
        3 DATE CHAR(10),
      2 *   CHAR(2) INIT(' '),
      2 NAME CHAR(31);
DCL ACCTLLST CHAR(80) STATIC INIT(' ');
DCL ACINDEX UBIN;
%FPT_TIME(DATE=DATE,
          SOURCE=UTS,
          TIME=TIME,
          TSTAMP=TSTAMP);
DCL DATE CHAR(10) STATIC;
DCL TIME CHAR(11) STATIC;
DCL TSTAMP UBIN(36) STATIC;
DCL MOP_4_DIGITS(0:1) BIT(9) UNAL CONSTANT INIT(%MVZB3,%MVC1);
DCL MOP_6_DIGITS(0:1) BIT(9) UNAL CONSTANT INIT(%MVZB5,%MVC1);
DCL ERR CHAR(22) STATIC INIT('*** Invalid Option ***');
%FPT_OPEN (FPTN=SETSI,
           DCB=M$SI,
           SETDCB=YES,
           ASN=FILE,
           ACCT=CUR_ACCT);
%FPT_CLOSE(FPTN = FPT_CLOSE,STCLASS = CONSTANT,
        DCB = M$LO,
        DISP = SAVE);
%FPT_OPEN (FPTN=OPEN_UI,
           DCB=M$UI,
           NAME=LISTFILE,
           ASN=FILE,
           FUN=IN);
%VLP_NAME (FPTN=LISTFILE,NAME='$$DEVELOPMENT_ACCOUNTS');
%FPT_READ (FPTN=READ_UI,
           DCB=M$UI,
           BUF=CUR_ACCT);
 
%FPT_RESCTL  (FPTN                     = FPT_RESCTL
             );
 
%VLP_RPSN    (FPTN                     = RPSN,
              STCLASS="BASED(RPSN_.PTR$)"
             );
 
%VLP_RPSN    (FPTN                     = OLD_RPSN,
              STCLASS="BASED(OLD_RPSN$)"
             );
 
%FPT_GDS     (FPTN                     = GET_RPSN_BUF,
              RESULTS=RPSN_,
              SEGSIZE=1024
             );
 
%VLP_VECTOR  (FPTN                     = RPSN_ );
 
DCL CDCT UBIN STATIC;
DCL NUM_OF_CODE09s UBIN STATIC;
DCL CT UBIN STATIC;
DCL FMSEC BIT(1) ALIGNED;
DCL ACCESS_DENIED BIT(1) ALIGNED STATIC INIT('0'B);
DCL REPORT BIT(1) ALIGNED;
DCL WILD BIT(1) ALIGNED;
DCL ACLIST BIT(1);
DCL ATFLAG BIT(1) STATIC INIT('0'B);
DCL CODE SBIN;
DCL I SBIN;
DCL J                        UBIN;
DCL OLD_RPSN_SIZEW           UBIN;
DCL R                        UBIN;
DCL RPSN_HDR_SIZEW           UBIN;
DCL ERR_ACCT CHAR(8);
DCL END_ACCT CHAR(8);
DCL CUR_ACCT CHAR(8) STATIC;
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$UI DCB;
DCL M$FILE DCB;
DCL M$SI$ PTR;
DCL M$UI$ PTR;
DCL M$FILE$ PTR;
DCL P$ PTR;
DCL FIT$ PTR;
DCL FM$FIT$ PTR;
DCL OLD_RPSN$                PTR;
DCL RPSN$                    PTR;
%F$DCB;
%FPT_INT(FPTN = FPT_INT,STCLASS = CONSTANT,
        UENTRY = FIND_BRK);
DCL FIND_BRK ENTRY ASYNC;
DCL XSF$LOCCODP ENTRY(2) ALTRET;
%FPT_WRITE(FPTN = FPT_WRITE,STCLASS = STATIC,
        DCB = M$LO);
%FPT_PRIV(FPTN = FPT_PRIV,STCLASS = STATIC,
        AUTH = NO,
        PRIV = %PR_FMSEC#);
DCL B$JIT$ PTR SYMREF;
%FPT_ERRMSG(FPTN = FPT_ERRMSG,STCLASS = STATIC,
        CODE = ERRCODE,
        BUF = ERRBUF,
        RESULTS = VLR_ERRMSG,
        DCB = M$SI,
        OUTDCB1 = M$LO);
DCL 1 ERRCODE STATIC,
      2 FCG BIT(12) UNAL,
      2 MID BIT(6) UNAL,
      2 MON BIT(1) UNAL,
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL ERRBUF CHAR(120) STATIC;
%VLR_ERRMSG(FPTN = VLR_ERRMSG,STCLASS = STATIC);
%VLP_SN(FPTN = VLP_SN,STCLASS = STATIC,
        N = 1);
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
%EJECT;
        M$SI$=DCBADDR(DCBNUM(M$SI));
        M$UI$=DCBADDR(DCBNUM(M$UI));
        M$FILE$=DCBADDR(DCBNUM(M$FILE));
        FIT$=ADDR(FIT_BLOCK);
        FM$FIT$=ADDR(FIT_BLOCK);
 
        RPSN_HDR_SIZEW = SIZEW(RPSN) - SIZEW(RPSN.RPLIST);
 
        CALL M$GDS(GET_RPSN_BUF)  ALTRET(OOPS);
 
        FPT_RESCTL.RPSN_= RPSN_;
        RPSN.NN# = (((RPSN_.W1.VSIZE# + 1) / 4) - RPSN_HDR_SIZEW)
                   / SIZEW(RPSN.RPLIST(0));
        CALL M$DISPRES(FPT_RESCTL)  ALTRET(OOPS);
        OLD_RPSN$= RPSN_.PTR$;
        OLD_RPSN_SIZEW = RPSN_HDR_SIZEW + (RPSN.NN# * SIZEW(RPSN.RPLIST(0)));
        RPSN_.PTR$= PINCRW(OLD_RPSN$,OLD_RPSN_SIZEW);
        RPSN_.W1.VSIZE#= RPSN_.W1.VSIZE# - (OLD_RPSN_SIZEW * 4);
        FPT_RESCTL.RPSN_= RPSN_;
        RPSN.NN# = (((RPSN_.W1.VSIZE# + 1) / 4) - RPSN_HDR_SIZEW)
                   / SIZEW(RPSN.RPLIST(0));
 
        END_ACCT=BINASC(511);           /* ALL ACCOUNTS                       */
        CUR_ACCT=M$SI$->F$DCB.ACCT#;
        CALL INDEX(I,'?',CUR_ACCT) WHENRETURN DO;
           IF I>0 THEN DO;
              CALL CONCAT(END_ACCT,SUBSTR(CUR_ACCT,0,I),BINASC(511));
              END;
           END;
        WHENALTRETURN DO;
           CALL INDEX(I,' ',CUR_ACCT) WHENALTRETURN DO;
              I=7;
              END;
           END;
        SUBSTR(CUR_ACCT,I,1)=BINASC(0);
        CALL M$OPEN(SETSI) WHENALTRETURN DO; END;
 
        IF B$JIT.PRFLAGS.UI THEN DO;
           ACLIST='1'B;
           IF M$UI$->F$DCB.NAME#.C='?' THEN DO;
              IF M$UI$->F$DCB.ACCT#=' ' THEN DO;
                 CUR_ACCT=':C00MSC';
                 OPEN_UI.ACCT_=VECTOR(CUR_ACCT);
                 END;
              CALL M$OPEN(OPEN_UI) WHENALTRETURN DO; END;
              END;
           FPT_OPEN.ACCT_=VECTOR(CUR_ACCT);
           FPT_OPEN.V.OPER.NXTA#='0'B;
           END;
        ELSE DO;
           ACLIST='0'B;
           END;
 
        ERR_ACCT = BINASC(0);           /* An impossible account              */
        IF B$JIT.PRIV.JOB & %PR_FMSEC#
        THEN
           FMSEC = '1'B;                /* This user has FMSEC                */
        ELSE
           FMSEC = '0'B;
        CALL M$INT(FPT_INT);
        FPT_WRITE.BUF_ = VECTOR(M$SI$->F$DCB.ACCT#);
        VLP_SN.SN#(0) = M$SI$->F$DCB.PSN#;
        VLP_NAME = M$SI$->F$DCB.NAME#;
        IF SUBSTR(VLP_NAME.NAME#,VLP_NAME.L#-1,1) = '?'
        THEN DO;
           WILD = '1'B;
           VLP_NAME.L# = VLP_NAME.L# - 1;
           FPT_OPEN.V.OPER.NXTF# = '1'B;
           FPT_OPEN2.V.OPER.NXTF# = '1'B;
           END;
        ELSE
           WILD = '0'B;
        SAVE_NAME = VLP_NAME;
 
        IF B$JIT$->B$JIT.CCDISP ~= B$JIT$->B$JIT.CCARS THEN
                                             /* A '(' was entered */
            IF (SUBSTR(B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCDISP+1,2)='A)') THEN
                  ATFLAG='1'B;
            ELSE DO;
               FILE_WRITE.BUF_=VECTOR(ERR);
               CALL M$WRITE(FILE_WRITE);
               CALL M$ERR;
               END;
 
LOOP:   DO WHILE(M$SI$->F$DCB.ACCT# < END_ACCT);
 
           IF ACLIST THEN DO;
              CUR_ACCT=' ';
              CALL M$READ(READ_UI) WHENALTRETURN DO;
                 IF B$ALT.ERR.CODE=%E$EOF THEN EXIT LOOP;
                 IF B$ALT.ERR.CODE~=%E$LD THEN DO;
                    CALL ERRMSG;
                    EXIT LOOP;
                    END;
                 END;
              END;
 
           CALL M$OPEN(FPT_OPEN) WHENRETURN DO;
           IF M$SI$->F$DCB.ACCT# > END_ACCT THEN EXIT LOOP;
              IF ~FMSEC
              THEN DO;        /* Validate that this user could see the file   */
                         /* without FMSEC since he really doesn't have it     */
                 CALL M$RPRIV(FPT_PRIV);
                 CALL M$OPEN(FPT_OPEN2) WHENRETURN DO;
                    REPORT = '1'B;
                    END;
                 WHENALTRETURN DO;
                    IF M$SI$->F$DCB.FFLG.NOLIST# THEN
                    REPORT = '0'B;
                    ELSE DO;
                       ACCESS_DENIED = '1'B;
                       REPORT = '1'B;
                       END;
                    END;
                 CALL M$SPRIV(FPT_PRIV);
                 END;
              ELSE
                 REPORT = '1'B;
              IF WILD AND SUBSTR(M$SI$->F$DCB.NAME#.C,0,
                VLP_NAME.L#) ~= SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#)
              THEN DO;
                 REPORT = '0'B;
                 ACCESS_DENIED = '0'B;
                 END;
              IF REPORT
               THEN DO;
                 CALL M$WRITE(FPT_WRITE);
                 IF ATFLAG THEN DO;
                     FILE_WRITE.BUF_ = VECTOR(HEADING);
                     CALL M$WRITE(FILE_WRITE);
                     IF ACCESS_DENIED THEN DO;
                        FILE_WRITE.BUF_=VECTOR(AC_DENIED);
                        AC_DENIED.NAME=M$SI$->F$DCB.NAME#.C;
                        CALL M$WRITE(FILE_WRITE);
                        END; /* IF */
                     ELSE
                        CALL GET_ATTRS;
                     FPT_OPEN.V.OPER.NXTA#='0'B;
                     FPT_OPEN.NAME_=VECTOR(NIL);
                     FPT_OPEN.V.OPER.THISF#='0'B;
                     IF WILD THEN DO;
                        FPT_OPEN2.V.OPER.THISF#='1'B;
LOOP2:                  DO WHILE (SUBSTR(M$SI$->F$DCB.NAME#.C,0,VLP_NAME.L#) =
                                 SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#));
                           CALL M$OPEN(FPT_OPEN) ALTRET(NOOPEN);
                           IF (SUBSTR(M$SI$->F$DCB.NAME#.C,0,VLP_NAME.L#) ~=
                              SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#))
                              THEN EXIT LOOP2;
                           IF ~FMSEC THEN DO;
                              CALL M$RPRIV(FPT_PRIV);
                              CALL M$OPEN(FPT_OPEN2) WHENRETURN DO;
                                 IF (SUBSTR(M$SI$->F$DCB.NAME#.C,0,VLP_NAME.L#) ~=
                                 SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#)) THEN DO;
                                    CALL M$SPRIV(FPT_PRIV);
                                    EXIT LOOP2;  END;
                                 CALL GET_ATTRS;
                                 END; /* WHENRETURN */
                              WHENALTRETURN DO;
                                 IF ~(M$SI$->F$DCB.FFLG.NOLIST#) THEN DO;
                                    FILE_WRITE.BUF_=VECTOR(AC_DENIED);
                                    AC_DENIED.NAME=M$SI$->F$DCB.NAME#.C;
                                    CALL M$WRITE(FILE_WRITE);
                                    END; /*IF*/
                                 END; /*WHEN ALTRET*/
                              CALL M$SPRIV(FPT_PRIV);
                              END; /* IF ~FMSEC */
                           ELSE
                              CALL GET_ATTRS;
                           FPT_OPEN2.V.OPER.NXTF#='0'B;
                           END LOOP2;
                        END;
NOOPEN:              FPT_OPEN2.V.OPER.THISF#='1'B;
                     FPT_OPEN.V.OPER.THISF#='1'B;
                     FPT_OPEN.V.OPER.NXTA#='1'B;
                     FPT_OPEN.NAME_=VECTOR(SAVE_NAME);
                     FILE_WRITE.BUF_=VECTOR(M$SI$->F$DCB.NAME#.C);
                     ACCESS_DENIED = '0'B;
                     END; /* IF ATFLAG */
                 END; /* IF REPORT */
              END;
           WHENALTRETURN DO;
              CODE = B$ALT.ERR.CODE;
              IF CODE=%E$ADEOF
              THEN
                 END_ACCT=M$SI$->F$DCB.ACCT#;
              ELSE
                 IF CODE=%E$NOFILE OR CODE=%E$NOKEY OR CODE=%E$FDEOF
                   OR (VLP_SN.SN#(0)=' '
                   AND (CODE=%E$SETDOWN OR CODE=%E$XCLSET))
                 THEN
                    ;
                 ELSE
                    IF ERR_ACCT=M$SI$->F$DCB.ACCT#  AND
                       SUBSTR(ERR_ACCT,0,1)~=%BINASC(0)
                    THEN
                       END_ACCT=M$SI$->F$DCB.ACCT#;
                    ELSE DO;
                       ERR_ACCT = M$SI$->F$DCB.ACCT#;
                       CALL ERRMSG;
                       END;
              END;
           END LOOP;
 
        CALL M$DISPRES(FPT_RESCTL)  ALTRET(OOPS);
 
        I= 0;
        J= 0;
        DO WHILE( I < RPSN.NN# );
           R= 0;
           DO WHILE( R < OLD_RPSN.NN#  AND
                     OLD_RPSN.RPLIST.PSN#(R) ~= RPSN.RPLIST.PSN#(I) );
              R= R + 1;
              END;
           IF R >= OLD_RPSN.NN# THEN DO;
              RPSN.RPLIST.DISP#(I)= 2; /* RELEASE */
              I= I + 1;
              END;
           ELSE DO;
              RPSN.NN#= RPSN.NN# - 1;
              RPSN.RPLIST(I) = RPSN.RPLIST(RPSN.NN#);
              IF OLD_RPSN.NN# > 0 THEN DO;
                 OLD_RPSN.NN#= OLD_RPSN.NN# - 1;
                 OLD_RPSN.RPLIST(R)= OLD_RPSN.RPLIST(OLD_RPSN.NN#);
                 END;
              END;
           END; /* DO */
        IF RPSN.NN#>0 THEN
           CALL M$RELRES(FPT_RESCTL) ALTRET(OOPS);
 
        IF DCBADDR(DCBNUM(M$LO))->F$DCB.FCD#
        THEN
           CALL M$CLOSE(FPT_CLOSE);
 
        DO WHILE('0'B);
OOPS:
           CALL ERRMSG;
           END;
 
        RETURN;
 
GET_ATTRS:PROC;
 
      FILE_WRITE.BUF_ = VECTOR(FILE_ATTRS);
      P$ = FIT$;  /* Point to beginning of FIT */
      IF M$SI$->F$DCB.ORG# = %RESTRICT# THEN
         P$=PINCRW(P$,5);
      CALL XSF$LOCCODP(P$,3);
      FILE_ATTRS.TY = P$->CODE03.TYPE;
      FILE_ATTRS.NAME = M$SI$->F$DCB.NAME#.C;
      CALL BINCHAR(FILE_ATTRS.GRAN,P$->CODE03.UGRANS);
      CALL EDITCHAR(FILE_ATTRS.GRAN,0,4,MOP_4_DIGITS,FILE_ATTRS.GRAN);
      CALL BINCHAR(FILE_ATTRS.NGAV,P$->CODE03.NGAVAL);
      CALL EDITCHAR(FILE_ATTRS.NGAV,0,4,MOP_4_DIGITS,FILE_ATTRS.NGAV);
      CALL BINCHAR(FILE_ATTRS.REC,P$->CODE03.NRECS);
      CALL EDITCHAR(FILE_ATTRS.REC,0,5,MOP_6_DIGITS,FILE_ATTRS.REC);
 
      DO CASE (P$->CODE03.ORG);
         CASE (%CONSEC#);
            FILE_ATTRS.ORG = 'CON';
         CASE (%KEYED#);
            FILE_ATTRS.ORG = 'KEY';
         CASE (%RANDOM#);
            FILE_ATTRS.ORG = 'RAN';
         CASE (%UR#);
            FILE_ATTRS.ORG = 'UR ';
         CASE (%RELATIVE#);
            FILE_ATTRS.ORG = 'REL';
         CASE (%INDEXED#);
            FILE_ATTRS.ORG = 'IND';
         CASE (%IDS#);
            FILE_ATTRS.ORG = 'IDS';
         CASE (%TERMINAL#);
            FILE_ATTRS.ORG = 'TER';
         CASE (%SYMB#);
            FILE_ATTRS.ORG = 'SYM';
         CASE (%FPRG#);
            FILE_ATTRS.ORG = 'FPR';
         CASE (%CG#);
            FILE_ATTRS.ORG = 'CG ';
         CASE (%HANDLER#);
            FILE_ATTRS.ORG = 'HAN';
         CASE (%IREL#);
            FILE_ATTRS.ORG = 'IRL';
         CASE (%RESTRICT#);
            FILE_ATTRS.ORG = 'RES';
         CASE (%FIXED#);
            FILE_ATTRS.ORG = 'FIX';
         CASE (%VARIABLE#);
            FILE_ATTRS.ORG = 'VAR';
         CASE (%UNDEF#);
            FILE_ATTRS.ORG = 'UND';
         CASE (%FREE#);
            FILE_ATTRS.ORG = 'FRE';
         CASE (%DBGDCB#);
            FILE_ATTRS.ORG = 'DCB';
         CASE (%DBGCG#);
            FILE_ATTRS.ORG = 'DCG';
         CASE (%DBGSYSID#);
            FILE_ATTRS.ORG = 'SYS';
         CASE (%SE#);
            FILE_ATTRS.ORG = 'SE ';
         CASE (%X364#);
            FILE_ATTRS.ORG = '364';
         CASE (%FORM#);
            FILE_ATTRS.ORG = 'FOR';
         END;
 
      P$=FIT$;
      CALL XSF$LOCCODP(P$,4);
      TSTAMP=P$->CODE04.MODIFY.TIME;
      CALL M$TIME(FPT_TIME);
      FILE_ATTRS.LMOD.TIME=SUBSTR(TIME,0,5);
      FILE_ATTRS.LMOD.DATE=DATE;
      CALL M$WRITE(FILE_WRITE);
 
      ACCTLLST = '           <A>=';
      FILE_WRITE.BUF_=VECTOR(ACCTLLST);
      P$ = FIT$;
      CALL XSF$LOCCODP(P$,9);
      CDCT = 0;
      DO UNTIL (FM$FIT$->FM$FIT.CODES.CODE(CDCT)=9) OR (CDCT>FM$FIT$->FM$FIT.CODES.CODE(0));
         CDCT = CDCT + 1;
         END;
      IF FM$FIT$->FM$FIT.CODES.CODE(CDCT) = 9 THEN
         NUM_OF_CODE09s = (FM$FIT$->FM$FIT.CODES.NDW(CDCT)+1)/SIZEW(CODE09);
      ELSE
         NUM_OF_CODE09s = 0;
      DO CT = 1 TO NUM_OF_CODE09s;
         SUBSTR(ACCTLLST,3,8)=P$->CODE09.ACCT;
         ACINDEX = 15;
         IF P$->CODE09.FFLG.READ THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'read,';
            ACINDEX = ACINDEX + LENGTHC('read,');
            END;
         IF P$->CODE09.FFLG.WNEW THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'wnew,';
            ACINDEX = ACINDEX + LENGTHC('wnew,');
            END;
         IF P$->CODE09.FFLG.UPD THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,4) = 'upd,';
            ACINDEX = ACINDEX + LENGTHC('upd,');
            END;
         IF P$->CODE09.FFLG.DELR THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'delr,';
            ACINDEX = ACINDEX + LENGTHC('delr,');
            END;
         IF P$->CODE09.FFLG.DELF THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'delf,';
            ACINDEX = ACINDEX + LENGTHC('delf,');
            END;
         IF P$->CODE09.FFLG.CREATE THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,7) = 'create,';
            ACINDEX = ACINDEX + LENGTHC('create,');
            END;
         IF P$->CODE09.FFLG.EXEC THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'exec,';
            ACINDEX = ACINDEX + LENGTHC('exec,');
            END;
         IF P$->CODE09.FFLG.REATTR THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,7) = 'reattr,';
            ACINDEX = ACINDEX + LENGTHC('reattr,');
            END;
         IF P$->CODE09.FFLG.TCTL THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,5) = 'tctl,';
            ACINDEX = ACINDEX + LENGTHC('tctl,');
            END;
         IF P$->CODE09.FFLG.NOLIST THEN DO;
            SUBSTR(ACCTLLST,ACINDEX,7) = 'nolist,';
            ACINDEX = ACINDEX + LENGTHC('nolist,');
            END;
         FILE_WRITE.BUF_.BOUND = ACINDEX - 2;
         CALL M$WRITE(FILE_WRITE);
         P$=PINCRW(P$,SIZEW(CODE09)-1);
         P$=PINCRC(P$,2);
         END;
      RETURN;
END GET_ATTRS;
 
ERRMSG: PROC;
        ERRCODE=B$ALT.ERR;
        FPT_ERRMSG.V.DCB#=B$ALT.DCB#;
        ERRCODE.SEV=0;
        CALL M$ERRMSG(FPT_ERRMSG);
        RETURN;
END ERRMSG;
 
END FIND;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
FIND_BRK: PROC ASYNC;
%INCLUDE CP_6;
%F$DCB;
DCL M$LO DCB;
DCL M$SI DCB;
%FPT_TRMPRG(FPTN = FPT_TRMPRG,STCLASS = CONSTANT,
        RSTBRK = YES);
%FPT_WRITE(FPTN = FPT_WRITE,STCLASS = CONSTANT,
        DCB = M$LO,
        BUF = WR_BRK);
DCL 1 WR_BRK STATIC,
      2 * CHAR(0) INIT('   Break at '),
      2 ACCT CHAR(8);
/**/
        WR_BRK.ACCT = DCBADDR(DCBNUM(M$SI))->F$DCB.ACCT#;
        CALL M$WRITE(FPT_WRITE);
        CALL M$TRMPRG(FPT_TRMPRG);
        RETURN;
END FIND_BRK;
