
 11:16 01/06/95  FILE=xbi_runtime_support:a                                                              1    BMAP - B00     
                                         1  *T***********************************************************
                                         2  *T*                                                         *
                                         3  *T* Copyright (c) Bull HN Information Systems Inc., 1989    *
                                         4  *T*                                                         *
                                         5  *T***********************************************************
                                         6                LODM           xbi_std_ig
                                         7
                                         8                ENTDEF         XB_RETURN_ORDINAL_RESULT
                                         9                ENTDEF         XB_RETURN_REAL_RESULT
                                        10                ENTDEF         XBI$CLEAR_OVERFLOW_MASK
                                        11                ENTDEF         XBI$CALL_USER_HANDLER
                                        12  *
                                        13                ENTREF         X66_FARET
                                        14                ENTREF         X66_ARET
                                        15                ENTREF         X66_AUTO_2
                                        16
                                        17  *F* NAME: XB_RETURN_ORDINAL_RESULT
                                        18  *,* PURPOSE: To return an ordinal or pointer result from a PL6 routine.
                                        19  *,*          It is assumed that the caller has a
                                        20  *,*          stack frame, as this routine also exits by calling
                                        21  *,*          X66_FARET.
                                        22  *,* CALL: CALL XB_RETURN_ORDINAL_RESULT (VALUE);
                                        23  *,* INPUT: VALUE -value to be returned.
                                        24  */
          (0)000000000000               25  XB_RETURN_ORDINAL_RESULT     EQU            *
 0 000000    0 00000 4735 00            26                LDP3           0,,PR0
   000001    3 00000 2361 00            27                LDQ            0,,PR3
   000002  X 000000 7100 00             28                TRA            X66_FARET
                                        29
                                        30
                                        31  *F* NAME: XB_RETURN_REAL_RESULT
                                        32  *,* PURPOSE: To return a double precision result from a PL6 routine.
                                        33  *,*          It is assumed that the caller has a
                                        34  *,*          stack frame, as this routine also exits by calling
                                        35  *,*          X66_FARET.
                                        36  *,* CALL: CALL XB_RETURN_REAL_RESULT (VALUE);
                                        37  *,* INPUT: VALUE -value to be returned.
 11:16 01/06/95  FILE=xbi_runtime_support:a                                                              2    BMAP - B00     
                                        38  */
          (0)000000000003               39  XB_RETURN_REAL_RESULT     EQU            *
   000003    0 00000 4735 00            40                LDP3           0,,PR0
   000004    3 00000 4331 00            41                DFLD           0,,PR3
   000005  X 000000 7100 00             42                TRA            X66_FARET
                                        43
                                        44  *D* NAME:  XBI$CLEAR_OVERFLOW_MASK
                                        45  *,* PURPOSE: Sets the hex floating point and clears the overflow mask bit
                                        46  *,*           in the indicator register.
                                        47  *,* CALL:  CALL XBI$CLEAR_OVERFLOW_MASK;
          (0)000000000006               48  XBI$CLEAR_OVERFLOW_MASK EQU              *
   000006    000010 6340 07             49                LDI            8,DL
   000007    000001 7100 11             50                TRA            1,X1
                                        51
                                        52  *D* NAME: XBI$CALL_USER_HANDLER
                                        53  *,* PURPOSE: Calls a user supplied signal handler.  The C "pass by value"
                                        54  *,*          calling sequence makes it impossible to code this directly in
                                        55  *,*          PL6.
                                        56  *,* CALL: CALL XBI$CALL_USER_HANDLER (HANDLER, SIGNAL_TYPE);
                                        57  *,* INPUT: HANDLER EPTR;
                                        58  *,*        SIGNAL_TYPE UBIN;
                                        59  */
          (0)000000000010               60  XBI$CALL_USER_HANDLER EQU    *
   000010  X 000000 7000 00             61                TSX0           X66_AUTO_2
   000011    000012 000002              62                ZERO           10,2
   000012    2 00003 4715 00            63                LDP1           3,,PR2         -load pointer to HANDLER
   000013    2 00004 4735 00            64                LDP3           4,,PR2         -load pointer to SIGNAL_TYPE
   000014    1 00000 2201 00            65                LDX0           0,,PR1         -load HANDLER
   000015    3 00000 2361 00            66                LDQ            0,,PR3         -load SIGNAL_TYPE
   000016    2 00005 7561 00            67                STQ            5,,PR2
   000017    2 00005 6305 00            68                EPPR0          5,,PR2
   000020 (0)000024 6314 00             69                EPPR1          descriptor
   000021    000000 7010 10             70                TSX1           0,X0
   000022    000000 0110 07             71                NOP            0,DL
   000023  X 000000 7020 00             72                TSX2           X66_ARET
   000024    000001 000000              73  descriptor    ZERO           1,0
                                        74
 11:16 01/06/95  FILE=xbi_runtime_support:a                                                              3    BMAP - B00     
                                        75                END

  CONTROL SECTION TABLE

   0 CODE   EVEN  000025
   1 RODATA EVEN  000000 LITERALS

 11:16 01/06/95  FILE=xbi_runtime_support:a   SYMBOL TABLE                                               4    BMAP - B00     
 00101000 000000000000 /*T*            *6
 00101000 000000000000 /*T***************************      *6
 40000000 000000000102 AUTO            *6
 01101000 000000000024 DESCRIPTOR      69       *73
 41000000 000000000100 PR0             *6        26        40
 41000000 000000000101 PR1             *6        65
 41000000 000000000102 PR2             *6        63        64        67        68
 41000000 000000000103 PR3             *6        27        41        66
 41000000 000000000104 PR4             *6
 41000000 000000000105 PR5             *6
 41000000 000000000106 PR6             *6
 40000000 000000000107 PR7             *6
 03201001 000000000000 X66_ARET       *14        72
 03201002 000000000000 X66_AUTO_2     *15        61
 03201000 000000000000 X66_FARET      *13        28        42
 52101000 000000000010 XBI$CALL_USER_HANDLER     11       *60
 52101000 000000000006 XBI$CLEAR_OVERFLOW_MASK   10       *48
 52101000 000000000000 XB_RETURN_ORDINAL_RESULT             8       *25
 52101000 000000000003 XB_RETURN_REAL_RESULT      9       *39

      19 SYMBOLS

       0 MACROS

    SYMBOL SPACE USED   229 WORDS
     MACRO SPACE USED     0 WORDS
   INPUT RECORDS READ   166
 STATEMENTS PROCESSED    53
         ELAPSED TIME  0:00.80
             CPU TIME     0.42 SEC.
        ASSEMBLY RATE  7571 STATEMENTS/CPU MIN.

      NO ERRORS

