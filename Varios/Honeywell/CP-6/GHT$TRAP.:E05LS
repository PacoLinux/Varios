VERSION E05

CALF.D00   OU Name=GHT$TRAP                File=GHT$TRAP.:E05TSI                TUE JUL 29 '97 21:39 Page:2
                                     1  *M* GHT$TRAP  LCP-6 System Trap Handler   *
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *
                                     8  *P*    NAME:   GHT$TRAP
                                     9  *P*    PURPOSE:  GHT$TRAP is the L6ASM routine that is connected
                                    10  *P*              to most entries in the system trap vector.
                                    11  *
                                    12  *      OUNAME  GHT$TRAP
                                    13  *
                                    14         ENTDEF  GHT$TRAP
                                    15         ENTDEF  GHT$MCL
                                    16         SYMDEF  G_KEEP_USER
                                    17         SYMDEF   GH_KEEPDELTA
                                    18         SYMDEF  GH_IGNORE_TRAP
                                    19         SYMDEF  GHT_L6_9X       Flag indicating 9X machine ('2000'X=YE
                                      ::S)
                                    20  *
                                    21         ENTREF  GDB$TRAP_HND
                                    22         ENTREF  GHB$TRAP1
                                    23         ENTREF  GHI$INTRET
                                    24         ENTREF  GIR$SCREECH
                                    25         ENTREF  GJU$GET_DB
                                    26         ENTREF  GUD$ASD
                                    27         ENTREF  GUD$RING0
                                    28         ENTREF  GUD$RING1
                                    29         ENTREF  GUD$MCLENT
                                    30  *
                                    31         SYMREF  G$ASDT_MCL$
                                    32         SYMREF  G$ASDT_USR$
                                    33         SYMREF  G$JIT$
                                    34         SYMREF  G$ISA_DBINH$
                                    35         SYMREF  G$SEG$
CALF.D00   OU Name=GHT$TRAP                File=GHT$TRAP.:E05TSI                TUE JUL 29 '97 21:39 Page:3
                                    36         SYMREF  G$TSTACKU$
                                    37         SYMREF  G$TSTACKM$
                                    38         SYMREF  G$TSTACK$
                                    39  *

CALF.D00   GHT$TRAP - EQUs and EQU Include files                                TUE JUL 29 '97 21:39 Page:4
                                    41  *
                                    42         INCLUDE GHT_TRAP_E,LIST
         00000000                    1+ G_TSA#                EQU     0
         00000002                    2+ G_TSA_I#              EQU     2
         0000FFFF                    3+ G_TSA_I#M#            EQU 65535
         00000002                    4+ G_TSA_I_TRAP##        EQU     2
         0000FF00                    5+ G_TSA_I_TRAP##M#      EQU 65280
         00000004                    6+ G_TSA_INST#           EQU     4
         0000FFFF                    7+ G_TSA_INST#M#         EQU 65535
         00000005                    8+ G_TSA_Z#              EQU     5
         0000FFFF                    9+ G_TSA_Z#M#            EQU 65535
         00000006                   10+ G_TSA_A$#             EQU     6
         00000008                   11+ G_TSA_P$#             EQU     8
         0000000A                   12+ G_TSA_B3$#            EQU    10
         0000000C                   13+ G_TSA_S#              EQU    12
         0000FFFF                   14+ G_TSA_S#M#            EQU 65535
         0000000D                   15+ G_TSA_ISA#            EQU    13
         0000000D                   16+ G_TSA_ISA_ASV$#       EQU    13
         00000010                   17+ G_TSA_ISA_TSAP$#      EQU    16
         00000012                   18+ G_TSA_ISA_DEV#        EQU    18
         0000FFFF                   19+ G_TSA_ISA_DEV#M#      EQU 65535
         00000014                   20+ G_TSA_ISA_ISM2#       EQU    20
         0000FFFF                   21+ G_TSA_ISA_ISM2#M#     EQU 65535
         00000000                   22+ G_ISA#                EQU     0
         00000001                   23+ G_ISA_ISM1#           EQU     1
         0000FFFF                   24+ G_ISA_ISM1#M#         EQU 65535
         00000002                   25+ G_ISA_ISM2#           EQU     2
         0000FFFF                   26+ G_ISA_ISM2#M#         EQU 65535
         00000003                   27+ G_ISA_P$#             EQU     3
         00000005                   28+ G_ISA_S#              EQU     5
         0000FFFF                   29+ G_ISA_S#M#            EQU 65535
         00000006                   30+ G_ISA_REGS#           EQU     6
         00000006                   31+ G_ISA_REGS_B7$#       EQU     6
         0000000E                   32+ G_ISA_REGS_B3$#       EQU    14
         00000015                   33+ G_ISA_REGS_R7#        EQU    21
         0000FFFF                   34+ G_ISA_REGS_R7#M#      EQU 65535
CALF.D00   GHT$TRAP - EQUs and EQU Include files                                TUE JUL 29 '97 21:39 Page:5
         0000001C                   35+ G_ISA_REGS_M1#        EQU    28
         0000FFFF                   36+ G_ISA_REGS_M1#M#      EQU 65535
         00000023                   37+ G_ISA_REGS_T$#        EQU    35
         00000000                   38+ G_JIT#                EQU     0
         0000007F                   39+ G_JIT_DB_WRTSEGS#     EQU   127
         00008000                   40+ G_JIT_DB_WRTSEGS#M#   EQU 32768
         00000098                   41+ G_JIT_JUNK#           EQU   152
         0000FFFF                   42+ G_JIT_JUNK#M#         EQU 65535
         00000098                   43+ G_JIT_JUNK_ALIBFD#    EQU   152
         00000020                   44+ G_JIT_JUNK_ALIBFD#M#  EQU    32
         00000000                   45+ G_ASDT#               EQU     0
         00000000                   46+ G_ASDT_MON#           EQU     0
         00000004                   47+ G_ASDT_MON_RDB_DS#    EQU     4
         0000002E                   48+ G_ASDT_MON_DB_PROC#   EQU    46
         00000000                   49+ GM#                   EQU     0
         00000020                   50+ GM_DB_DS#             EQU    32
         0000FFFF                   51+ GM_DB_DS#M#           EQU 65535
         00000800                   52+ GM_DB_PROC#           EQU  2048
         00000000                   53+ G#                    EQU     0
         00000001                   54+ G_MCL#                EQU     1
         0000FFFF                   55+ G_MCL#M#              EQU 65535
         00000002                   56+ G_TRACE#              EQU     2
         0000FFFF                   57+ G_TRACE#M#            EQU 65535
         00000004                   58+ G_IL_INHIBIT#         EQU     4
         0000FFFF                   59+ G_IL_INHIBIT#M#       EQU 65535
         00000005                   60+ G_DMN_DB#             EQU     5
         0000FFFF                   61+ G_DMN_DB#M#           EQU 65535
         00000005                   62+ G_IL_INHIBIT1#        EQU     5
         0000FFFF                   63+ G_IL_INHIBIT1#M#      EQU 65535
         00000006                   64+ G_DMN_INT#            EQU     6
         0000FFFF                   65+ G_DMN_INT#M#          EQU 65535
         0000000A                   66+ G_IL_DBINH#           EQU    10
         0000FFFF                   67+ G_IL_DBINH#M#         EQU 65535
         0000000A                   68+ G_ASD_INST#           EQU    10
         0000FFFF                   69+ G_ASD_INST#M#         EQU 65535
         0000000D                   70+ G_PRIV#               EQU    13
CALF.D00   GHT$TRAP - EQUs and EQU Include files                                TUE JUL 29 '97 21:39 Page:6
         0000FFFF                   71+ G_PRIV#M#             EQU 65535
         0000000F                   72+ G_INT_UR#             EQU    15
         0000FFFF                   73+ G_INT_UR#M#           EQU 65535
         00000034                   74+ G_FPRG_SCREECH#       EQU    52
         0000FFFF                   75+ G_FPRG_SCREECH#M#     EQU 65535
         00005000                   76+ G_UHJIT#              EQU 20480
         00005000                   77+ G_UHJIT_ASDT_USR#     EQU 20480
         00005004                   78+ G_UHJIT_ASDT_USR_DB_DS# EQU 20484
         0000500A                   79+ G_UHJIT_ASDT_USR_UHJIT# EQU 20490
         0000500B                   80+ G_UHJIT_ASDT_USR_UHJIT_SIZE# EQU 20491
         000001FF                   81+ G_UHJIT_ASDT_USR_UHJIT_SIZE#M# EQU   511
         0000507C                   82+ G_UHJIT_DMN#          EQU 20604
         0000507E                   83+ G_UHJIT_DMN_ID#       EQU 20606
         0000FFFF                   84+ G_UHJIT_DMN_ID#M#     EQU 65535
         000050B6                   85+ G_UHJIT_TSA_USR#      EQU 20662
         000050FF                   86+ G_UHJIT_TSA_DB#       EQU 20735
         00000000                   87+ G_ROS#                EQU     0
         00001199                   88+ G_ROS_U_ECCB#         EQU  4505
         000011A4                   89+ G_ROS_U_ECCB_FLTFLG#  EQU  4516
         000011A4                   90+ G_ROS_U_ECCB_FLTFLG_IGN_IO# EQU  4516
         00008000                   91+ G_ROS_U_ECCB_FLTFLG_IGN_IO#M# EQU 32768
         00000000                   92+ G_MHJIT#              EQU     0
         0000607C                   93+ G_MHJIT_ISA_IDLE#     EQU 24700
         00006083                   94+ G_MHJIT_ISA_IDLE_ISM2# EQU 24707
         0000FFFF                   95+ G_MHJIT_ISA_IDLE_ISM2#M# EQU 65535
         00000000                   96+ G_LM#                 EQU     0
         00003080                   97+ G_LM_IV#              EQU 12416
                                    43  *
                                    44  *
                                    45  *              Define offsets into TSA for B3->TSA.A
         00000006                   46  G_TSAI_S# EQU     G_TSA_S#-G_TSA_A$# Offset to Status Reg
                                    47  *
                                    48  *              Define offsets into ISA for B3->ISA.DEV
         FFFFFFFB                   49  G_ISA_ASV$# EQU   G_TSA_ISA_ASV$#-G_TSA_ISA_DEV#
         FFFFFFFE                   50  G_ISA_TSAP$# EQU  G_TSA_ISA_TSAP$#-G_TSA_ISA_DEV#
                                    51  *
CALF.D00   GHT$TRAP - EQUs and EQU Include files                                TUE JUL 29 '97 21:39 Page:7
                                    52  *              Define offsets into low real memory
         00003088                   53  G_LM_IV_INH#  EQU  2*G_IL_INHIBIT#+G_LM_IV#
         0000308A                   54  G_LM_IV_INH1# EQU  2*G_IL_INHIBIT1#+G_LM_IV#
         00003094                   55  G_LM_IV_DBINH# EQU 2*G_IL_DBINH#+G_LM_IV#
                                    56  *
                                    57  *

CALF.D00   GHT$TRAP - AUTO Storage                                              TUE JUL 29 '97 21:39 Page:8
                                    59  *
         00000000                   60  AUTO_RET_ADD   EQU     0      Return address
         00000002                   61  AUTO_TYPE      EQU     2      Frame type
         00000004                   62  AUTO_TSA$      EQU     4      Address of current TSA
         00000006                   63  AUTO_SIZE      EQU     6
                                    64  *

CALF.D00   GHT$TRAP - LCP6 Trap Hnadler                                         TUE JUL 29 '97 21:39 Page:9
                                    66  *
         000000(0)                  67         ALIGN   DOUBLE          Force odd word entry address
         000000(0)                  68  GHT_L6_9X ALIGN
 00000   2000                       69         DATA    '2000'X         Cleared by BIGFOOT if not a 9X CPU
         000001(0)                  70  GHT$TRAP ALIGN WORD            Force odd word entry address
                                    71  *
                                    72  *                Save Status Register in ISA for later retrieval
                                    73  *
 00001   8C78 0005                  74         STS     G_ISA_S#,$IV
                                    75  *
                                    76  *                Begin processing at the common inhibit level
                                    77  *
 00003   8C53                       78         STS     R3              If we were below INH, we won't make it
 00004   82D3 003C                  79         LB,'003C'X R3           (This code is so weird because
 00006   3C00                       80         LDV,R3  0               we can't branch yet)
 00007   8A53 8000                  81         LBS,'8000'X R3          Do 8080-type only if needed.
 00009   B670 8084                  82         XOR,R3  '8080'X+G_IL_INHIBIT#,IMO
 0000B   8E53                       83         LEV     R3
                                    84  *
                                    85  *                Set return address for the context save LEV below
                                    86  *
 0000C   BBC0 0022                  87         LAB,B3  SAVLEV,PREL
 0000E   BFF8 0003                  88         STB,B3  G_ISA_P$#,$IV
                                    89  *
                                    90  *                Also set RING1 for LCP6
                                    91  *
 00010   B870 4000                  92         LDR,R3  '4000'X,IMO
 00012   B440 FFED                  93         OR,R3   GHT_L6_9X,PREL  Ring0 if 9X.
 00014   BE78 0005                  94         SWR,R3  G_ISA_S#,$IV    Get back the trapping status register.
                                    95  *
                                    96  *                Restore B3 as the TSA pointer.
                                    97  *
 00016   BCF8 FFFE                  98         LDB,B3  G_ISA_TSAP$#,$IV
 00018   BF43 000C                  99         STR,R3  G_TSA_S#,B3
                                   100  *
                                   101  *                Now we'll use the TSA work area as an ISA and LEV
CALF.D00   GHT$TRAP - LCP6 Trap Hnadler                                         TUE JUL 29 '97 21:39 Page:10
                                   102  *                from it back to the one we are in now to save all th
                                      ::e
                                   103  *                context.
                                   104  *
                                   105  *                Setup the IV pointers appropriately
                                   106  *
 0001A   BBC3 0012                 107         LAB,B3  G_TSA_ISA_DEV#,B3
 0001C   BE80 003088               108         SWB,B3  G_LM_IV_INH#
 0001F   BF80 00308A               109         STB,B3  G_LM_IV_INH1#
 00022   3C00                      110         LDV,R3  0
 00023   BE43 0001                 111         SWR,R3  G_ISA_ISM1#,B3
 00025   BF78 0000                 112         STR,R3  0,$IV              Save in DEV word of TSA_ISA
 00027   3C00                      113         LDV,R3  0
 00028   BE43 0002                 114         SWR,R3  G_ISA_ISM2#,B3
 0002A   BAC3 0002 7000            115         SRM,R3,'7000'X G_ISA_ISM2#,B3 Keep the same NATSAP.
                                   116  *
                                   117  *                Now do the context switch.
                                   118  *
 0002D   8E70 8005                 119         LEV     '8000'X+G_IL_INHIBIT1#,IMO
         00002F(0)                 120  SAVLEV ALIGN
                                   121  *
                                   122  *                Now reload a TSA pointer thru the ISA.
                                   123  *
 0002F   ACC3 FFFE                 124         LDB,B2  G_ISA_TSAP$#,B3
                                   125  *
                                   126  *                Restore the ISMs in the ISA.
                                   127  *
 00031   A842 0012                 128         LDR,R2  G_TSA_ISA_DEV#,B2
 00033   8CD3                      129         LDI     R3
 00034   8D43 0001                 130         SDI     G_ISA_ISM1#,B3
                                   131  *
                                   132  *                Copy ASV$ to the TSA ISA.
                                   133  *
 00036   8CC3 FFFB                 134         LDI     G_ISA_ASV$#,B3
 00038   8D42 000D                 135         SDI     G_TSA_ISA_ASV$#,B2
                                   136  *
CALF.D00   GHT$TRAP - LCP6 Trap Hnadler                                         TUE JUL 29 '97 21:39 Page:11
                                   137  *                Make sure we keep the same NATSAP and MMU.
                                   138  *
 0003A   BAC2 0014 F000            139         SRM,R3,'F000'X G_TSA_ISA_ISM2#,B2
                                   140  *
                                   141  *                Put the trap ISA back in INHIBIT level in case the
                                   142  *                trap was at that level (So things look right)
                                   143  *
 0003D   BF80 003088               144         STB,B3  G_LM_IV_INH#
                                   145  *
                                   146  *                Clear the Mode Control Register; especially the
                                   147  *                Trace Trap Control bit.  Now we can use branch inst.
                                   148  *
 00040   9070 FF00                 149         MTM,M1  'FF00'X,IMO
                                   150  *
                                   151  *                Move the trapping Ring# from TSA.Z to TSA.S
                                   152  *
 00042   A842 0005                 153         LDR,R2  G_TSA_Z#,B2
 00044   2017                      154         SCL,R2  7
 00045   AAC2 000C 6000            155         SRM,R2,'6000'X   G_TSA_S#,B2
                                   156  *
                                   157  *                Put the real TRAP# in TSA.I
                                   158  *
 00048   2C40                      159         LDV,R2  =64
 00049   D2C2 0002                 160         LLH,R5  G_TSA_I#,B2
 0004B   A255                      161         SUB,R2  R5
 0004C   A7C2 0002                 162         STH,R2  G_TSA_I#,B2

CALF.D00   GHT$TRAP - See if we should ignore it.                               TUE JUL 29 '97 21:39 Page:12
                                   164  *
                                   165  *      Ignore a privilege trap in ring 1 for an ASD instruction (sill
                                      ::y 6X).
                                   166  *
 0004E   2D0D                      167         CMV,R2  G_PRIV#
 0004F   098E                      168         BNE     NOT_ASD,SPREL
 00050   82C2 000C 4000            169         LB,'4000'X G_TSA_S#,B2
 00053   058A                      170         BBF     NOT_ASD,SPREL
 00054   D842 0004                 171         LDR,R5  G_TSA_INST#,B2
 00056   5D0A                      172         CMV,R5  G_ASD_INST#
 00057   0986                      173         BNE     NOT_ASD,SPREL
                                   174  *FORCE CR41E AND 9X BACK TO RING 0?
 00058   8942 000C 2000            175         LBT,'2000'X G_TSA_S#,B2
 0005B   0F81 00E9                 176         B       GHT$EXIT1,PREL
         00005D(0)                 177  NOT_ASD ALIGN

CALF.D00   GHT$TRAP - See if we should ignore it.                               TUE JUL 29 '97 21:39 Page:13
                                   178         EJECT
                                   179  *
                                   180  *                Check for Unavailable Resource Trap
                                   181  *
 0005D   2D0F                      182         CMV,R2  G_INT_UR#
 0005E   0981 0049                 183         BNE     NOTUR,PREL
                                   184  *
                                   185  *                If so, was it on an IO instruction
                                   186  *
                                   187  *
 00060   D2C2 0004                 188         LLH,R5  G_TSA_INST#,B2
 00062   D670 0080                 189         XOR,R5  ='80'X
 00064   5D01                      190         CMV,R5  '01'X
 00065   0301 0042                 191         BG      NOTUR,PREL
                                   192  *
                                   193  *                Did the user request that we do this for him.
                                   194  *
 00067   8280 0011A4 8000          195         LB,G_ROS_U_ECCB_FLTFLG_IGN_IO#M# G_ROS_U_ECCB_FLTFLG_IGN_IO#
 0006B   0581 003C                 196         BBF     NOTUR,PREL
                                   197  *
                                   198  *                If IO instruction, set overflow in the Indicator Reg
                                   199  *
 0006D   8942 0002 0080            200         LBT,'0080'X  G_TSA_I#,B2
                                   201  *
                                   202  *                See if it was an IOLD instruction
                                   203  *
 00070   5901 00D4                 204         BEZ,R5  GHT$EXIT1,PREL
                                   205  *
                                   206  *                And bump the TSA.P$ if so
                                   207  *
 00072   8AC2 0009                 208         INC     G_TSA_P$#+1,B2
 00074   8EC2 0008                 209         CAD     G_TSA_P$#,B2
 00076   0F81 00CE                 210         B       GHT$EXIT1,PREL

CALF.D00   GHT$TRAP - ALTRET from LCP6 - check for ALIB_FD                      TUE JUL 29 '97 21:39 Page:14
         000078(0)                 212  ALIB_ALTRET ALIGN
 00078   8900 00507E 0004          213         LBT,4   G_UHJIT_DMN_ID# Back in user now.
 0007C   BBF8 0000                 214         LAB,B3  0,$IV           Make sure the TSA has ISA in it.
 0007E   ACC3 FFFE                 215         LDB,B2  -2,B3
 00080   AFC7 0004                 216         STB,B2  AUTO_TSA$,B7
 00082   BFC2 0020                 217         STB,B3  G_ISA_REGS_B3$#+G_TSA_ISA_DEV#,B2
 00084   8CC3 FFFB                 218         LDI     G_ISA_ASV$#,B3  And a good MMU ptr.
 00086   8D42 000D                 219         SDI     G_TSA_ISA_ASV$#,B2
 00088   B843 0002                 220         LDR,R3  G_ISA_ISM2#,B3  And the right NATSAP_SEL.
 0008A   BAC2 0014 7000            221         SRM,R3,'7000'X G_TSA_ISA_ISM2#,B2
 0008D   A2C2 0002                 222         LLH,R2  G_TSA_I_TRAP##,B2
 0008F   2901 00B1                 223         BEZ,R2  GHT$EXIT,PREL   Trtn exit if trap=0.
 00091   0010 0007                 224         RLQ     B7
 00093   2D01                      225         CMV,R2  G_MCL#          Delta didn't want this MCL, go do it.
 00094   0901 01A1                 226         BE      DO_MCL,PREL
 00096   8E70 0085                 227         LEV     '80'X+G_IL_INHIBIT1#,IMO   This code must run at INH1
 00098   2D34                      228         CMV,R2  G_FPRG_SCREECH#
 00099   098F                      229         BNE     NOTUR,SPREL
 0009A   ECC2 000A                 230         LDB,B6  G_TSA_B3$#,B2   Move the screech vlp
 0009C   8F86 0700                 231         RSTR,'0700'X ,B6        To somewhere
 0009E   EBC2 0027                 232         LAB,B6  G_ISA_REGS_R7#+G_TSA_ISA_DEV#,B2
 000A0   8F06 0700                 233         SAVE,'0700'X ,B6        Visible to GIR$SCREECH
 000A2   EFC2 0006                 234         STB,B6  G_TSA_A$#,B2
 000A4   2C00                      235         LDV,R2  0
 000A5   A7C2 0002                 236         STH,R2 G_TSA_I_TRAP##,B2
 000A7   0FA6                      237         B       NOT_USER,SPREL

CALF.D00   GHT$TRAP - Check for ALIB_FD.                                        TUE JUL 29 '97 21:39 Page:15
                                   239  *
                                   240  *                If there is a debugger go to it now
                                   241  *
         0000A8(0)                 242  NOTUR  ALIGN
                                   243  *
                                   244  *                If this is a user trap, find out who wants it.
                                   245  *
 000A8   C800 00507E               246         LDR,R4  G_UHJIT_DMN_ID#
 000AB   4EFB                      247         ADV,R4  -G_DMN_DB#
 000AC   4821                      248         BLZ,R4  NOT_USER,SPREL
 000AD   4905                      249         BEZ,R4  DB_OK,SPREL
 000AE   ADF0 000050B6             250         CMB,B2  G_UHJIT_TSA_USR#,IMO         User traps must be TSA_US
                                      ::R
 000B1   099C                      251         BNE     NOT_USER,SPREL
         0000B2(0)                 252  DB_OK  ALIGN
 000B2   8742 0017                 253         CL      G_TSA_ISA_DEV#+G_ISA_S#,B2  User trap flag to XDELTA
 000B4   4919                      254         BEZ,R4  NOT_USER,SPREL              User Delta trap.
                                   255  *
                                   256  *                If this is the "GET DB" trace trap, do so.
                                   257  *
 000B5   2D02                      258         CMV,R2  G_TRACE#
 000B6   0993                      259         BNE     USER_TRAP,SPREL
 000B7   EC80 000000(2)s           260         LDB,B6  G$JIT$
 000BA   82C6 0098 0020            261         LB,G_JIT_JUNK_ALIBFD#M# G_JIT_JUNK#,B6
 000BD   058C                      262         BBF     USER_TRAP,SPREL
 000BE   E3C0 0127                 263         LNJ,B6  CALL_LCP6,PREL
 000C0   00000000(4)e              264         DATA,4  GJU$GET_DB
 000C2   0001                      265         DATA    1
 000C3   ACC7 0004                 266         LDB,B2  AUTO_TSA$,B7
 000C5   0010 0007                 267         RLQ     B7
 000C7   A2C2 0002                 268         LLH,R2  G_TSA_I_TRAP##,B2
                                   269  *
                                   270  *                This is a user trap. Does XDELTA want it?
                                   271  *
         0000C9(0)                 272  USER_TRAP ALIGN
 000C9   82A0 000270(0)            273         LB      G_KEEP_USER,R2
CALF.D00   GHT$TRAP - Check for ALIB_FD.                                        TUE JUL 29 '97 21:39 Page:16
 000CC   05A4                      274         BBF     NO_MAP,SPREL

CALF.D00   GHT$TRAP - Check for XDELTA control.                                 TUE JUL 29 '97 21:39 Page:17
         0000CD(0)                 276  NOT_USER ALIGN
                                   277  *
                                   278  *                   If trap number is ignore trap then ignore it
                                   279  *
 000CD   A900 000006(1)            280         CMR,R2  GH_IGNORE_TRAP
 000D0   0901 0074                 281         BE      GHT$EXIT1,PREL
 000D2   8980 000007(1)            282         CMZ     GH_KEEPDELTA
 000D5   089B                      283         BAGE    NO_MAP,SPREL
 000D6   E3C0 009A                 284         LNJ,B6  ENTER_XDELTA,PREL
 000D8   E380 000000(0)e           285         LNJ,B6  GDB$TRAP_HND
 000DB   0066                      286  HERE2  DATA    GHT$EXIT-HERE2
                                   287  *                If XDELTA ALTRETs Somebody said GO.
                                   288  *
                                   289  *                Check what XDELTA wants to do:
                                   290  *                   TSA_ISA_S = 0   -> Continue trap processing
                                   291  *                   TSA_ISA_S > 0   -> SCREECH
                                   292  *
                                   293  *
                                   294  *                Get back to the trap ISA
                                   295  *
 000DC   ACC7 0004                 296         LDB,B2  AUTO_TSA$,B7
 000DE   BCC2 0020                 297         LDB,B3  G_ISA_REGS_B3$#+G_TSA_ISA_DEV#,B2
 000E0   BF80 003094               298         STB,B3  G_LM_IV_DBINH#
 000E3   0010 0007                 299         RLQ     B7
 000E5   89C2 0014                 300         CMZ     G_TSA_ISA_ISM2#,B2
                                   301  *
                                   302  *                Restore the map if there is one.
                                   303  *
 000E7   0889                      304         BAGE    NO_MAP,SPREL
 000E8   BBC2 000D                 305         LAB,B3  G_TSA_ISA_ASV$#,B2
 000EA   E380 000000(5)e           306         LNJ,B6  GUD$ASD
 000ED   0001                      307         DATA    1
 000EE   ACF8 FFFE                 308         LDB,B2  G_ISA_TSAP$#,$IV Get TSA addr back (TSTACKD is gone).
         0000F0(0)                 309  NO_MAP ALIGN
 000F0   A2C2 0002                 310         LLH,R2  G_TSA_I_TRAP##,B2
                                   311  *
CALF.D00   GHT$TRAP - Check for XDELTA control.                                 TUE JUL 29 '97 21:39 Page:18
                                   312  *                If the trap# is 0 or the gotrap flag is set,
                                   313  *                We want to screech.
                                   314  *
 000F2   E852                      315         LDR,R6  R2
 000F3   82C2 0017 FFFF            316         LB,'FFFF'X G_TSA_ISA_DEV#+G_ISA_S#,B2
 000F6   8A56 8000                 317         LBS,'8000'X R6      SO, R6<=0 SCREECHES
                                   318  *
                                   319  *                Get back to ring 1.
                                   320  *
 000F8   E380 000000(7)e           321         LNJ,B6  GUD$RING1
 000FB   0001                      322         DATA    1
 000FC   6A0A                      323         BGZ,R6  NO_XDEL,SPREL
                                   324  *
 000FD   8A80 006083               325         INC     G_MHJIT_ISA_IDLE_ISM2#  Set recovery-in-progress.
 00100   E3C0 00E5                 326         LNJ,B6  CALL_LCP6,PREL
 00102   00000000(3)e              327         DATA,4  GIR$SCREECH
 00104   0001                      328         DATA    1
 00105   0FBC                      329         B       GHT$EXIT,SPREL
                                   330  *
                                   331  *
                                   332  *

CALF.D00   GHT$TRAP - Check for user debug or user handler                      TUE JUL 29 '97 21:39 Page:19
         000106(0)                 334  NO_XDEL ALIGN
                                   335  *
                                   336  *                Check for debugger wanting the trap.
                                   337  *
 00106   8980 005004               338         CMZ     G_UHJIT_ASDT_USR_DB_DS#  Is the segment valid?
 00109   08B3                      339         BAGE    NO_UDEL,SPREL
 0010A   ADF0 000050FF             340         CMB,B2  G_UHJIT_TSA_DB#,IMO
 0010D   032F                      341         BG      NO_UDEL,SPREL      Only one trap in delta please
 0010E   0905                      342         BE      DB_TRAP,SPREL      But always report that one
 0010F   82A0 002002               343         LB      GM_DB_DS#*256+2,R2  Does the DB want this trap
 00112   05AA                      344         BBF     NO_UDEL,SPREL
         000113(0)                 345  DB_TRAP ALIGN
 00113   E3C0 0080                 346         LNJ,B6  ENTER_DB,PREL
 00115   E385                      347         LNJ,B6  ,B5
 00116   0004                      348         DATA    4
 00117   8947 0004 8000            349         LBT,'8000'X AUTO_TSA$,B7 Set the "gotrap" flag
                                   350  *
                                   351  *                Restore the map.
                                   352  *
 0011A   CC80 000000(2)s           353         LDB,B4  G$JIT$
 0011D   CBC4 007E                 354         LAB,B4  G_JIT_DB_WRTSEGS#-1,B4
 0011F   3C10                      355         LDV,R3  16
 00120   EC80 000000(1)s           356         LDB,B6  G$ASDT_USR$
         000123(0)                 357  DB_PROT ALIGN
 00123   82B4                      358         LB      ,B4,R3
 00124   0585                      359         BBF     NO_DB_PROT,SPREL
 00125   8CB6                      360         LDI     ,B6,R3
 00126   8957 3000                 361         LBT,'3000'X R7
 00128   8D36                      362         SDI     ,B6,R3
         000129(0)                 363  NO_DB_PROT ALIGN
 00129   3E01                      364         ADV,R3  1
 0012A   3D1E                      365         CMV,R3  30
 0012B   03F8                      366         BLE     DB_PROT,SPREL
 0012C   B800 00500B               367         LDR,R3  G_UHJIT_ASDT_USR_UHJIT_SIZE#
 0012F   B2D3                      368         LLH,R3  R3              Compute what was running
 00130   3E06                      369         ADV,R3  G_DMN_INT#      (HHJITs are only one page, not 2).
CALF.D00   GHT$TRAP - Check for user debug or user handler                      TUE JUL 29 '97 21:39 Page:20
 00131   BF00 00507E               370         STR,R3  G_UHJIT_DMN_ID#
 00134   8847 0004 8000            371         LBF,'8000'X AUTO_TSA$,B7
 00137   058A                      372         BBF     GHT$EXIT,SPREL
 00138   ACC7 0004                 373         LDB,B2  AUTO_TSA$,B7
 0013A   0010 0007                 374         RLQ     B7
         00013C(0)                 375  NO_UDEL ALIGN

CALF.D00   GHT$TRAP - Call user handler (GHB$TRAP1)                             TUE JUL 29 '97 21:39 Page:21
 0013C   E3C0 00A9                 377         LNJ,B6  CALL_LCP6,PREL
 0013E   00000000(1)e              378         DATA,4  GHB$TRAP1
 00140   FF38                      379  HERE4  DATA    ALIB_ALTRET-HERE4

CALF.D00   GHT$TRAP - GHT$EXIT - common exit point.                             TUE JUL 29 '97 21:39 Page:22
                                   381  *
                                   382  *
                                   383  *                Common exit point
                                   384  *
         000141(0)                 385  GHT$EXIT ALIGN
                                   386  *
                                   387  *                Flush auto, restore regs, lev, etc.
                                   388  *
 00141   ACC7 0004                 389         LDB,B2  AUTO_TSA$,B7
 00143   0010 0007                 390         RLQ     B7
         000145(0)                 391  GHT$EXIT1 ALIGN
                                   392  *
                                   393  *                Move ring back to Z-reg, in case it was changed.
                                   394  *
 00145   B842 000C                 395         LDR,R3  G_TSA_S#,B2
 00147   3057                      396         SCR,R3  7
 00148   BAC2 0005 00C0            397         SRM,R3,'C0'X G_TSA_Z#,B2
 0014B   8E70 8084                 398         LEV     '8080'X+G_IL_INHIBIT#,IMO
 0014D   BBC2 0012                 399         LAB,B3  G_TSA_ISA_DEV#,B2
 0014F   BF80 00308A               400         STB,B3  G_LM_IV_INH1#
 00152   DBC0 000F                 401         LAB,B5  RSTLEV,PREL
 00154   DFC3 0003                 402         STB,B5  G_ISA_P$#,B3
 00156   B870 4000                 403         LDR,R3  '4000'X,IMO
 00158   BF43 0005                 404         STR,R3  G_ISA_S#,B3
 0015A   BB80 000000(1)            405         LAB,B3  G_STORE_ISA
 0015D   BF80 003088               406         STB,B3  G_LM_IV_INH#
 00160   8E70 8005                 407         LEV     '8001'X+G_IL_INHIBIT#,IMO
         000162(0)                 408  RSTLEV ALIGN
 00162   BF80 00308A               409         STB,B3  G_LM_IV_INH1#
 00165   BF80 003088               410         STB,B3  G_LM_IV_INH#
 00168   3C3F                      411         LDV,R3  '3F'X
 00169   BCC3 FFFE                 412         LDB,B3  G_ISA_TSAP$#,B3
 0016B   B543 000C                 413         AND,R3  G_TSA_S#,B3
 0016D   B470 8000                 414         OR,R3   '8000'X,IMO
 0016F   8E53                      415         LEV     R3
 00170   0003                      416         RTT
CALF.D00   GHT$TRAP - GHT$EXIT - common exit point.                             TUE JUL 29 '97 21:39 Page:23
                                   417  *
                                   418  *

CALF.D00   ENTER_DELTA - keep Xdelta from trashing stuff                        TUE JUL 29 '97 21:39 Page:24
                                   420  *
                                   421  *
         000171(0)                 422  ENTER_XDELTA ALIGN
                                   423  *
                                   424  *                Begin processing at the debug inhibit level
                                   425  *
                                   426  *                Use DELTA's ISA and stack
                                   427  *
 00171   B878 0002                 428         LDR,R3  2,$IV              Keep the same NATSAP for GUD$RING1
 00173   9C80 000000(3)s           429         LDB,B1  G$ISA_DBINH$
 00176   8E70 0085                 430         LEV     '0080'X+G_IL_INHIBIT1#,IMO  Make sure were at INH1
 00178   9F80 00308A               431         STB,B1  G_LM_IV_INH1#
 0017B   BAC1 0002 7000            432         SRM,R3,'7000'X 2,B1
                                   433  *
                                   434  *                Begin processing at the debug level
                                   435  *
 0017E   8E70 808A                 436         LEV     '8080'X+G_IL_DBINH#,IMO
                                   437  *
                                   438  *                First map in XDELTA
                                   439  *
 00180   CCC1 FFFB                 440         LDB,B4  G_ISA_ASV$#,B1
 00182   8CC4 002E                 441         LDI     G_ASDT_MON_DB_PROC#,B4
 00184   DB80 080000               442         LAB,B5  GM_DB_PROC#*256
 00187   000A                      443         ASD
                                   444  *
                                   445  *                Data too.
                                   446  *
 00188   8CC4 0004                 447         LDI     G_ASDT_MON_RDB_DS#,B4
 0018A   DB80 002000               448         LAB,B5  GM_DB_DS#*256
 0018D   000A                      449         ASD
                                   450  *
                                   451  *                Load B7 to use TSTACKD
                                   452  *
 0018E   FCD5                      453         LDB,B7  B5
                                   454  *
                                   455  *                Set to get to ring zero
CALF.D00   ENTER_DELTA - keep Xdelta from trashing stuff                        TUE JUL 29 '97 21:39 Page:25
                                   456  *
 0018F   8C53                      457         STS     R3              But only if we're not already there
 00190   B570 2000                 458         AND,R3  '2000'X,IMO
                                   459  *
                                   460  *                EXIT ENTER_TRAP (through ENTER_LCP6)
                                   461  *
 00192   0F81 00AE                 462         B       ENTER_EXIT,PREL
                                   463  *
                                   464  *

CALF.D00   ENTER_DB                                                             TUE JUL 29 '97 21:39 Page:26
                                   466  *
                                   467  *
         000194(0)                 468  ENTER_DB ALIGN
                                   469  *
                                   470  *                First, unprotect user procedure so DB can modify it.
                                   471  *
 00194   FC80 000000(2)s           472         LDB,B7  G$JIT$
 00197   FBC7 007E                 473         LAB,B7  G_JIT_DB_WRTSEGS#-1,B7
 00199   3C10                      474         LDV,R3  16
 0019A   CC80 000000(1)s           475         LDB,B4  G$ASDT_USR$
         00019D(0)                 476  UNPROT ALIGN
 0019D   82B7                      477         LB      ,B7,R3
 0019E   0589                      478         BBF     NO_UNPROT,SPREL
 0019F   8CB4                      479         LDI     ,B4,R3          Get the segdesc.
 001A0   8857 3000                 480         LBF,'3000'X R7          Make ring-3 writable.
 001A2   8D34                      481         SDI     ,B4,R3
 001A3   DCB0 000000(4)s           482         LDB,B5  G$SEG$,R3
 001A6   000A                      483         ASD
         0001A7(0)                 484  NO_UNPROT ALIGN
 001A7   3E01                      485         ADV,R3  1
 001A8   3D1E                      486         CMV,R3  30
 001A9   03F4                      487         BLE     UNPROT,SPREL
 001AA   3C05                      488         LDV,R3  G_DMN_DB#
 001AB   BF00 00507E               489         STR,R3  G_UHJIT_DMN_ID#
                                   490  *
                                   491  *                Initializez if this is the first time.
                                   492  *
 001AE   DC80 080002               493         LDB,B5  GM_DB_PROC#*256+2  Normal entry address
 001B1   FB80 002000               494         LAB,B7  GM_DB_DS#*256
 001B4   8D87                      495         CMN     ,B7
 001B5   09A9                      496         BNE     ENTER_USER,SPREL
                                   497  *
                                   498  *                No stack, must be first time.
                                   499  *
 001B6   8C80 080004               500         LDI     GM_DB_PROC#*256+4       R6=Data sz, R7=Stack sz
 001B9   B856                      501         LDR,R3  R6
CALF.D00   ENTER_DB                                                             TUE JUL 29 '97 21:39 Page:27
 001BA   BBB7                      502         LAB,B3  ,B7,R3                  BASE of Stack
 001BB   BA57                      503         ADD,R3  R7
 001BC   DBB7                      504         LAB,B5  ,B7,R3                  Stack Head
 001BD   DF87                      505         STB,B5  ,B7                     Save in Debug DS
 001BE   6C05                      506         LDV,R6  5                       Init the Head
 001BF   8D05                      507         SDI     ,B5                     Set CW, MW
 001C0   84D7                      508         SID     R7                      Clear the RFU
 001C1   8D45 0002                 509         SDI     2,B5
 001C3   8D45 0004                 510         SDI     4,B5
 001C5   CBC5 FFFC                 511         LAB,B4  -4,B5                   Init MAIN Frame
 001C7   EF84                      512         STB,B6  ,B4                     Some Ret Addr
 001C8   3CFF                      513         LDV,R3  -1                      Mark it MAIN
 001C9   BF44 0002                 514         STR,R3  2,B4
 001CB   3C04                      515         LDV,R3  4                       CUR_FR_SIZ
 001CC   BF44 FFFF                 516         STR,R3  -1,B4
 001CE   DF83                      517         STB,B5  ,B3                     Base -> Head
 001CF   CFC3 0002                 518         STB,B4  2,B3                    Base+2 -> BOT_FR
 001D1   8743 0004                 519         CL      4,B3                    It grows down
                                   520  *
                                   521  *                All done, enter at init point.
                                   522  *
 001D3   DC80 080000               523         LDB,B5  GM_DB_PROC#*256
 001D6   0F88                      524         B       ENTER_USER,SPREL

CALF.D00   ENTER_LCP6                                                           TUE JUL 29 '97 21:39 Page:28
                                   526  *
                                   527  *
         0001D7(0)                 528  ENTER_LCP6 ALIGN
                                   529  *
                                   530  *                Point B7 at base of TSTACK, the right thing is
                                   531  *                there for user or monitor.
                                   532  *
 001D7   FC80 000000(7)s           533         LDB,B7  G$TSTACK$
                                   534  *
                                   535  *                And call this the monitor.
                                   536  *
 001DA   8800 00507E 0004          537         LBF,4   G_UHJIT_DMN_ID#
         0001DE(0)                 538  ENTER_USER ALIGN
                                   539  *
                                   540  *                GET BACK TO THE USER'S LEVEL
                                   541  *
 001DE   3C3F                      542         LDV,R3  '3F'X
 001DF   B542 000C                 543         AND,R3  G_TSA_S#,B2
 001E1   B470 8000                 544         OR,R3   '8000'X,IMO
 001E3   8E53                      545         LEV     R3
 001E4   0F81 005C                 546         B       ENTER_EXIT,PREL

CALF.D00   CALL_LCP6 - Map to ASDT_MCL, call *,B6, and remap                    TUE JUL 29 '97 21:39 Page:29
                                   548  *
                                   549  *
         0001E6(0)                 550  CALL_LCP6 ALIGN
                                   551  *
 001E6   DCD6                      552         LDB,B5  B6              Save entry address.
 001E7   E3C0 FFEF                 553         LNJ,B6  ENTER_LCP6,PREL
 001E9   DF87                      554         STB,B5  ,B7             Ditto.
 001EA   B2F8 FFFC                 555         LLH,R3  -4,$IV        No need to map if not in a user.
 001EC   3D50                      556         CMV,R3  G_UHJIT#/256
 001ED   098A                      557         BNE     NO_USR,SPREL
 001EE   BB80 000000(0)s           558         LAB,B3  G$ASDT_MCL$
 001F1   E380 000000(5)e           559         LNJ,B6  GUD$ASD
 001F4   0001                      560         DATA    1
 001F5   E3C0 005C                 561         LNJ,B6  NO_RING0,PREL
 001F7   DC8F                      562  NO_USR LDB,B5  *,B7
 001F8   E385                      563         LNJ,B6  ,B5
 001F9   0002                      564         DATA    2
 001FA   8A87                      565         INC     ,B7             Set normal return flag.
 001FB   8887                      566         DEC     ,B7             0=normal, -1=altret.
 001FC   B2F8 FFFC                 567         LLH,R3  -4,$IV        No remap if no user
 001FE   3D50                      568         CMV,R3  G_UHJIT#/256
 001FF   098C                      569         BNE     NO_REMAP,SPREL
 00200   BB80 000000(1)s           570         LAB,B3  G$ASDT_USR$
 00203   E380 000000(5)e           571         LNJ,B6  GUD$ASD
 00206   0001                      572         DATA    1
 00207   8900 00507E 0004          573         LBT,4   G_UHJIT_DMN_ID# Set user running again.
 0020B   3C00                      574  NO_REMAP LDV,R3  0
 0020C   BE07                      575         SWR,R3  ,B7
 0020D   EC87                      576         LDB,B6  ,B7
 0020E   EBC6 0002                 577         LAB,B6  2,B6            Skip the entry address
 00210   3782                      578         BINC,R3 NO_ALTRET,SPREL R3 is -1 for altreturn.
 00211   B806                      579         LDR,R3  ,B6
         000212(0)                 580  NO_ALTRET ALIGN
 00212   C3B6                      581         LNJ,B4  ,B6,R3

CALF.D00   GHT$MCL - Fast entry for MCLs - no register save                     TUE JUL 29 '97 21:39 Page:30
                                   583  *F*    NAME:   GHT$MCL
                                   584  *F*    PURPOSE:GHT$MCL is GHT$TRAP for MCLs. No context save or resto
                                      ::re
                                   585  *F*            is done except $T and B7 (and P$ and S$, of course.)
         000214(0)                 586         ALIGN   DOUBLE          Force odd word entry address
 00214   0000                      587         DATA    0               Force odd word entry address
         000215(0)                 588  GHT$MCL  ALIGN WORD            Force odd word entry address
                                   589  *
                                   590  *                Save Status Register in TSA
                                   591  *
 00215   ABC3 FFFA                 592         LAB,B2  -G_TSA_A$#,B3   Point to start of TSA.
 00217   9742 002E                 593         STM,M1  G_TSA_ISA_DEV#+G_ISA_REGS_M1#,B2
 00219   9070 FF00                 594         MTM,M1  'FF00'X,IMO     We need to be able to branch.
 0021B   3D40                      595         CMV,R3  64              FPTless M$INTRET is faaaaaast
 0021C   0988                      596         BNE     NOT_INTRET,SPREL
 0021D   C800 00507E               597         LDR,R4  G_UHJIT_DMN_ID#
 00220   4D06                      598         CMV,R4  G_DMN_INT#
 00221   0900 000000(2)e           599         BE      GHI$INTRET
         000224(0)                 600  NOT_INTRET     ALIGN
 00224   8C42 000C                 601         STS     G_TSA_S#,B2
                                   602  *
                                   603  *                Move the trapping Ring# from TSA.Z to TSA.S
                                   604  *
 00226   A842 0005                 605         LDR,R2  G_TSA_Z#,B2
 00228   2017                      606         SCL,R2  7
 00229   AAC2 000C 6000            607         SRM,R2,'6000'X   G_TSA_S#,B2
 0022C   FFC2 0018                 608         STB,B7  G_TSA_ISA_DEV#+G_ISA_REGS_B7$#,B2
 0022E   0010 0000                 609         STT
 00230   FFC2 0035                 610         STB,B7  G_TSA_ISA_DEV#+G_ISA_REGS_T$#,B2
                                   611  *
                                   612  *                Enter ring 1.
                                   613  *
 00232   E380 000000(7)e           614         LNJ,B6  GUD$RING1
 00235   0001                      615         DATA    1
         000236(0)                 616  DO_MCL ALIGN
                                   617  *
CALF.D00   GHT$MCL - Fast entry for MCLs - no register save                     TUE JUL 29 '97 21:39 Page:31
                                   618  *                Use TSTACKU, allocate auto, and process the MCL.
                                   619  *
 00236   EB80 000000(8)e           620         LAB,B6  GUD$MCLENT
 00239   FB80 000000(5)s           621         LAB,B7  G$TSTACKU$
 0023C   8800 00507E 0004          622         LBF,4   G_UHJIT_DMN_ID#
 00240   3C01                      623         LDV,R3  1               Dont call RING0.
                                   624  *
                                   625  *                Code for GHT$MCL resumes after LNJ,B6 ,B6 below.
                                   626  *
         000241(0)                 627  ENTER_EXIT ALIGN
 00241   FC87                      628         LDB,B7  ,B7
 00242   0010 0070                 629         LDT     B7
                                   630  *
                                   631  *                Get auto storage
                                   632  *
 00244   7C06                      633         LDV,R7  AUTO_SIZE
 00245   0010 0077                 634         ACQ,R7  B7
                                   635  *
                                   636  *                Initialize auto for MCL processing or XDELTA
                                   637  *
 00247   AFC7 0004                 638         STB,B2  AUTO_TSA$,B7
 00249   EF87                      639         STB,B6  ,B7
 0024A   8747 0002                 640         CL      AUTO_TYPE,B7
                                   641  *
                                   642  *                Get to ring 0 for XDELTA
                                   643  *
 0024C   3986                      644         BNEZ,R3 NO_RING0,SPREL
 0024D   E380 000000(6)e           645         LNJ,B6  GUD$RING0
 00250   0001                      646         DATA    1
 00251   EC87                      647         LDB,B6  ,B7
         000252(0)                 648  NO_RING0 ALIGN
                                   649  *
                                   650  *                Set up a calling sequence
                                   651  *
 00252   BBC7 0004                 652         LAB,B3  AUTO_TSA$,B7
 00254   CBC0 001A                 653         LAB,B4  ONE_PARM,PREL
CALF.D00   GHT$MCL - Fast entry for MCLs - no register save                     TUE JUL 29 '97 21:39 Page:32
                                   654  *
                                   655  *                Return
                                   656  *
 00256   E386                      657         LNJ,B6  ,B6
                                   658  *
                                   659  *               GHT$MCL code resumes here as though LNJ,B6 ,B6 were
                                   660  *               LNJ,B6 GUD$MCLENT
                                   661  *
 00257   FE21                      662  HERE1  DATA   ALIB_ALTRET-HERE1
 00258   BCC7 0004                 663         LDB,B3  AUTO_TSA$,B7
 0025A   0010 0007                 664         RLQ     B7
                                   665  *
                                   666  *                Update Z-reg for M$SYS, e.g.
                                   667  *
 0025C   B843 000C                 668         LDR,R3  G_TSA_S#,B3
 0025E   3057                      669         SCR,R3  7
 0025F   BAC3 0005 00C0            670         SRM,R3,'C0'X G_TSA_Z#,B3
                                   671  *
                                   672  *                Restore stack pointers
                                   673  *
 00262   FCC3 0035                 674         LDB,B7  G_TSA_ISA_DEV#+G_ISA_REGS_T$#,B3
 00264   0010 0070                 675         LDT     B7
 00266   FCC3 0018                 676         LDB,B7  G_TSA_ISA_DEV#+G_ISA_REGS_B7$#,B3
 00268   9043 002E                 677         MTM,M1  G_TSA_ISA_DEV#+G_ISA_REGS_M1#,B3
 0026A   8900 00507E 0004          678         LBT,4   G_UHJIT_DMN_ID#
 0026E   0003                      679         RTT
                                   680  *
                                   681  *                All done.
                                   682  *
                                   683  *
                                   684  *                1-parm descriptor
                                   685  *
 0026F   01 00                     686  ONE_PARM DATA,1 1,0
 00270   0000 0000 0000 0000       687  G_KEEP_USER DATA 0,0,0,0
                                   688  *
         000000(1)                 689         SECT    DATA
CALF.D00   GHT$MCL - Fast entry for MCLs - no register save                     TUE JUL 29 '97 21:39 Page:33
 00000   0000 0000 0000 0000       690  G_STORE_ISA DATA 0,0,0,0,0,0
 00004   0000 0000
 00006   FFFF                      691  GH_IGNORE_TRAP DATA -1
 00007   FFFF                      692  GH_KEEPDELTA DATA -1
                                   693         END
      No Errors in this assembly.
