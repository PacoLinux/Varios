

10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     1    
    1      /*M*    XSS_SESSION_M   User-visible macros for ISO Session layer.      */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      %EQU XSS_RDONLYFPT# = '302323000200'O;  /* hardwired E$RDONLYFPT errcode */
    9      /*F*    NAME:   XSS$$QVEC
   10              FUNCTION: XSS$$QVEC generates a structure describing a byte-string
   11                  buffer by its length and address.  It is similar to the VECTOR
   12                  construct of PL6, but is more efficient since the length is
   13                  right-justified in a full word.
   14                  The "down" side is, only byte resolution.
   15
   16                  XSS$$QVEC is quite similar to the internal macro XSS$QVEC, but
   17                  they reside in different INCLUDE files.
   18      */
   19      %MACRO XSS$$QVEC( NAME=XSS$$QVEC, LVL=1, LAST=";", STCLASS=BASED,
   20                        PTR$="ADDR( NIL)",
   21                        SIZE=0);
   22      %LSET LISTDIR = '0'B;
   23      %LSET LISTEXP = '1'B;
   24      %LSET LISTCOM = '0'B;
   25      %LSET LISTSUB = '1'B;
   26      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   27      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   28          %LSET INIT = CHARTEXT( ' INIT');
   29          %LSET ENIT = CHARTEXT( '');
   30      %ELSE;
   31          %LSET INIT = CHARTEXT( '/*');
   32          %LSET ENIT = CHARTEXT( '*/');
   33      %ENDIF;
   34      %IF LENGTHC( 'NAME') = 0;
   35          %LSET LVL = LVL - 1;
   36      %ELSE;
   37          %IF LVL = 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     2    
   38              DCL 1 NAME STCLASS DALIGNED,
   39          %ELSE;
   40              %LVL NAME DALIGNED,
   41          %ENDIF;
   42      %ENDIF;
   43      %LSET LVL1 = LVL + 1;
   44      %IF MODE_FEP;
   45          %LSET LONG = CHARTEXT( '(32)');
   46          %LSET HALF = CHARTEXT( 'WORD');
   47      %ELSE;
   48          %LSET LONG = CHARTEXT( 'WORD');
   49          %LSET HALF = CHARTEXT( 'HALF');
   50      %ENDIF;
   51
   52      /*K*    PTR$ - PTR
   53
   54              PTR$ is the address of the buffer.
   55
   56              The default is ADDR( NIL).
   57      */
   58          %LVL1 %CHARTEXT( 'PTR$') PTR %INIT( PTR$)%ENIT CALIGNED,
   59
   60      /*K*    SIZE - SBIN %LONG
   61
   62              SIZE is the size of the buffer, in bytes.  (SIZE is a four-byte
   63              integer on both Host and FEP.)
   64
   65              The default is zero.
   66      */
   67          %LVL1 %CHARTEXT( 'SIZE') SBIN %LONG %INIT( SIZE)%ENIT ALIGNED LAST
   68
   69      %MEND;
   70
   71      /*F*    NAME:   XSS$$TOKENS
   72              DESCRIPTION:
   73                  This macro defines an area as a bit list which is used
   74                  by the ISO Session protocol state machine (PSM).  There
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     3    
   75                  are several uses of this macro in the XSS$SCTX structure.
   76      */
   77      %MACRO XSS$$TOKENS( NAME=XSS$$TOKENS, LVL=1, LAST=";", STCLASS=BASED, ALGN=CALIGNED,
   78              TRTOKEN( NO='0'B, YES='1'B)='0'B,
   79              MATOKEN( NO='0'B, YES='1'B)='0'B,
   80              MITOKEN( NO='0'B, YES='1'B)='0'B,
   81              DKTOKEN( NO='0'B, YES='1'B)='0'B);
   82      %LSET LISTDIR = '0'B;
   83      %LSET LISTEXP = '1'B;
   84      %LSET LISTCOM = '0'B;
   85      %LSET LISTSUB = '1'B;
   86      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   87      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   88          %LSET INIT = CHARTEXT( ' INIT');
   89          %LSET ENIT = CHARTEXT( '');
   90      %ELSE;
   91          %LSET INIT = CHARTEXT( '/*');
   92          %LSET ENIT = CHARTEXT( '*/');
   93      %ENDIF;
   94      %IF LENGTHC( 'NAME') = 0;
   95          %LSET LVL = LVL-1;
   96      %ELSE;
   97          %IF LVL = 1;
   98              DCL 1 NAME STCLASS ALGN,
   99          %ELSE;
  100              %LVL NAME ALGN,
  101          %ENDIF;
  102      %ENDIF;
  103      %LSET LVL1 = LVL+1;
  104      %LSET LVL2 = LVL1+1;
  105
  106          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  107          %LVL1 %CHARTEXT( 'TR') BIT(1) %INIT( TRTOKEN)%ENIT UNAL,
  108          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  109          %LVL1 %CHARTEXT( 'MA') BIT(1) %INIT( MATOKEN)%ENIT UNAL,
  110          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  111          %LVL1 %CHARTEXT( 'MI') BIT(1) %INIT( MITOKEN)%ENIT UNAL,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     4    
  112          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  113          %LVL1 %CHARTEXT( 'DK') BIT(1) %INIT( DKTOKEN)%ENIT UNAL
  114      %IF NOT MODE_FEP;
  115          , %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL
  116      %ENDIF;
  117          LAST
  118      %MEND;
  119
  120      /*F*    NAME:   XSS$$ERRCODE
  121
  122              XSS$$ERRCODE is an internal copy of VLP_ERRCODE with more reasonable
  123              initialization possibilities.
  124      */
  125      %MACRO XSS$$ERRCODE( NAME=XSS$$ERRCODE, LVL=1, LAST=";", STCLASS=BASED,
  126              FCG='0'B, MID='0'B, MON='0'B, ERR#=0, SEV=0);
  127      %LSET LISTDIR = '0'B;
  128      %LSET LISTEXP = '1'B;
  129      %LSET LISTCOM = '0'B;
  130      %LSET LISTSUB = '1'B;
  131      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  132      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  133          %LSET INIT = CHARTEXT( ' INIT');
  134          %LSET ENIT = CHARTEXT( '');
  135      %ELSE;
  136          %LSET INIT = CHARTEXT( '/*');
  137          %LSET ENIT = CHARTEXT( '*/');
  138      %ENDIF;
  139      %IF LENGTHC( 'NAME') = 0;
  140          %LSET LVL = LVL - 1;
  141      %ELSE;
  142          %IF LVL = 1;
  143              DCL 1 NAME STCLASS ALIGNED,
  144          %ELSE;
  145              %LVL NAME STCLASS ALIGNED,
  146          %ENDIF;
  147      %ENDIF;
  148      %LSET LVL1 = LVL + 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     5    
  149
  150          %LVL1 %CHARTEXT( 'FCG') BIT(12) %INIT( FCG)%ENIT UNAL,
  151          %LVL1 %CHARTEXT( 'MID') BIT(6) %INIT( MID)%ENIT UNAL,
  152          %LVL1 %CHARTEXT( 'MON') BIT(1) %INIT( MON)%ENIT UNAL,
  153          %LVL1 %CHARTEXT( 'ERR#') UBIN(14) %INIT( ERR#)%ENIT UNAL,
  154          %LVL1 %CHARTEXT( 'SEV') UBIN(3) %INIT( SEV)%ENIT UNAL LAST
  155      %MEND;
  156
  157      /*F*    NAME:   XSS$PRIMITIVES
  158
  159              XSS$PRIMITIVES defines all of the XSS primitive service FPTs.
  160              This is useful in situations where the type of incoming FPT is not
  161              known in advance and they all need to be defined as BASED on some
  162              pointer filled in at run time.
  163      */
  164      %MACRO XSS$PRIMITIVES( STCLASS=BASED);
  165          %XSS$GENERIC( STCLASS=STCLASS);
  166          %XSS$ACTIVITY_DISCARD( STCLASS=STCLASS);
  167          %XSS$ACTIVITY_END( STCLASS=STCLASS);
  168          %XSS$ACTIVITY_INTERRUPT( STCLASS=STCLASS);
  169          %XSS$ACTIVITY_RESUME( STCLASS=STCLASS);
  170          %XSS$ACTIVITY_START( STCLASS=STCLASS);
  171          %XSS$CAPABILITY_DATA( STCLASS=STCLASS);
  172          %XSS$CONNECT( STCLASS=STCLASS);
  173          %XSS$CONTROL_GIVE( STCLASS=STCLASS);
  174          %XSS$DATA( STCLASS=STCLASS);
  175          %XSS$EXPEDITED_DATA( STCLASS=STCLASS);
  176          %XSS$P_ABORT( STCLASS=STCLASS);
  177          %XSS$P_EXCEPTION_REPORT( STCLASS=STCLASS);
  178          %XSS$RELEASE( STCLASS=STCLASS);
  179          %XSS$RESYNCHRONIZE( STCLASS=STCLASS);
  180          %XSS$SYNC_MAJOR( STCLASS=STCLASS);
  181          %XSS$SYNC_MINOR( STCLASS=STCLASS);
  182          %XSS$TOKEN_GIVE( STCLASS=STCLASS);
  183          %XSS$TOKEN_PLEASE( STCLASS=STCLASS);
  184          %XSS$TYPED_DATA( STCLASS=STCLASS);
  185          %XSS$U_ABORT( STCLASS=STCLASS);
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     6    
  186          %XSS$U_EXCEPTION_REPORT( STCLASS=STCLASS);
  187      %MEND;
  188
  189      /*F*    NAME:   XSS_PRIMITIVES
  190
  191              XSS_PRIMITIVES defines all of the XSS primitive service FPTs.
  192              This macro is similar to XSS$PRIMITIVES, but uses '_' in each of the
  193              resulting structure names to indicate STATIC storage class.
  194      */
  195      %MACRO XSS_PRIMITIVES( STCLASS=STATIC);
  196          %XSS$GENERIC( FPTN=XSS_GENERIC, STCLASS=STCLASS);
  197          %XSS$ACTIVITY_DISCARD( FPTN=XSS_ACTIVITY_DISCARD, STCLASS=STCLASS);
  198          %XSS$ACTIVITY_END( FPTN=XSS_ACTIVITY_END, STCLASS=STCLASS);
  199          %XSS$ACTIVITY_INTERRUPT( FPTN=XSS_ACTIVITY_INTERRUPT, STCLASS=STCLASS);
  200          %XSS$ACTIVITY_RESUME( FPTN=XSS_ACTIVITY_RESUME, STCLASS=STCLASS);
  201          %XSS$ACTIVITY_START( FPTN=XSS_ACTIVITY_START, STCLASS=STCLASS);
  202          %XSS$CAPABILITY_DATA( FPTN=XSS_CAPABILITY_DATA, STCLASS=STCLASS);
  203          %XSS$CONNECT( FPTN=XSS_CONNECT, STCLASS=STCLASS);
  204          %XSS$CONTROL_GIVE( FPTN=XSS_CONTROL_GIVE, STCLASS=STCLASS);
  205          %XSS$DATA( FPTN=XSS_DATA, STCLASS=STCLASS);
  206          %XSS$EXPEDITED_DATA( FPTN=XSS_EXPEDITED_DATA, STCLASS=STCLASS);
  207          %XSS$P_ABORT( FPTN=XSS_P_ABORT, STCLASS=STCLASS);
  208          %XSS$P_EXCEPTION_REPORT( FPTN=XSS_P_EXCEPTION_REPORT, STCLASS=STCLASS);
  209          %XSS$RELEASE( FPTN=XSS_RELEASE, STCLASS=STCLASS);
  210          %XSS$RESYNCHRONIZE( FPTN=XSS_RESYNCHRONIZE, STCLASS=STCLASS);
  211          %XSS$SYNC_MAJOR( FPTN=XSS_SYNC_MAJOR, STCLASS=STCLASS);
  212          %XSS$SYNC_MINOR( FPTN=XSS_SYNC_MINOR, STCLASS=STCLASS);
  213          %XSS$TOKEN_GIVE( FPTN=XSS_TOKEN_GIVE, STCLASS=STCLASS);
  214          %XSS$TOKEN_PLEASE( FPTN=XSS_TOKEN_PLEASE, STCLASS=STCLASS);
  215          %XSS$TYPED_DATA( FPTN=XSS_TYPED_DATA, STCLASS=STCLASS);
  216          %XSS$U_ABORT( FPTN=XSS_U_ABORT, STCLASS=STCLASS);
  217          %XSS$U_EXCEPTION_REPORT( FPTN=XSS_U_EXCEPTION_REPORT, STCLASS=STCLASS);
  218      %MEND;
  219
  220      /*F*    NAME:   XSS$GENERIC
  221              DESCRIPTION:
  222                  The XSS$GENERIC macro defines a structure large enough to contain
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     7    
  223                  any of the XSS primitive service FPTs.  It is used in those
  224                  contexts where the particular FPT type is not known in advance.
  225      */
  226      %MACRO XSS$GENERIC(
  227              FPTN=XSS$GENERIC, LVL=1, LAST=";", STCLASS=BASED);
  228      %LSET LISTDIR = '0'B;
  229      %LSET LISTEXP = '1'B;
  230      %LSET LISTCOM = '0'B;
  231      %LSET LISTSUB = '1'B;
  232      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  233      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  234          %LSET INIT = CHARTEXT( ' INIT');
  235          %LSET ENIT = CHARTEXT( '');
  236      %ELSE;
  237          %LSET INIT = CHARTEXT( '/*');
  238          %LSET ENIT = CHARTEXT( '*/');
  239      %ENDIF;
  240      %IF LENGTHC( 'FPTN') = 0;
  241          %LSET LVL = LVL - 1;
  242      %ELSE;
  243          %IF LVL = 1;
  244              DCL 1 FPTN STCLASS ALIGNED,
  245          %ELSE;
  246              %LVL FPTN,
  247          %ENDIF;
  248      %ENDIF;
  249      %LSET LVL1 = LVL + 1;
  250      %LSET LVL2 = LVL1 + 1;
  251      %IF MODE_FEP;
  252          %LSET LONG = CHARTEXT( '(32)');
  253          %LSET L6 = 1;
  254      %ELSE;
  255          %LSET LONG = CHARTEXT( 'WORD');
  256          %LSET L6 = 0;
  257      %ENDIF;
  258
  259          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( %XSS_FNC_NONE#)%ENIT CALIGNED,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     8    
  260          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  261          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  262          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  263          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  264          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  265          %XSS$$QVEC( NAME=DATA, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  266          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  267          %LVL1 %CHARTEXT( '*(0:8)') UBIN %INIT( 0*0)%ENIT ALIGNED LAST
  268      %MEND;
  269
  270      /*F*    NAME:   XSS$ACTIVITY_DISCARD
  271              DESCRIPTION:
  272                  The XSS$ACTIVITY_DISCARD macro defines the structure that an
  273                  SS-User uses to issue an S-ACTIVITY-DISCARD Request or
  274                  Response, and that the Session layer uses to report an
  275                  S-ACTIVITY-DISCARD Indication or Confirm.
  276      */
  277      %MACRO XSS$ACTIVITY_DISCARD(
  278              FPTN=XSS$ACTIVITY_DISCARD, LVL=1, LAST=";", STCLASS=BASED,
  279              FNC( REQ=%XSS_FNC_SACDREQ#,
  280                   IND=%XSS_FNC_SACDIND#,
  281                   RSP=%XSS_FNC_SACDRSP#,
  282                   CNF=%XSS_FNC_SACDCNF#)=%XSS_FNC_NONE#,
  283              SCID=0,
  284              REASON=%XSS_RC_NONE#);
  285      %LSET LISTDIR = '0'B;
  286      %LSET LISTEXP = '1'B;
  287      %LSET LISTCOM = '0'B;
  288      %LSET LISTSUB = '1'B;
  289      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  290      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  291          %LSET INIT = CHARTEXT( ' INIT');
  292          %LSET ENIT = CHARTEXT( '');
  293      %ELSE;
  294          %LSET INIT = CHARTEXT( '/*');
  295          %LSET ENIT = CHARTEXT( '*/');
  296      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     9    
  297      %IF LENGTHC( 'FPTN') = 0;
  298          %LSET LVL = LVL - 1;
  299      %ELSE;
  300          %IF LVL = 1;
  301              DCL 1 FPTN STCLASS ALIGNED,
  302          %ELSE;
  303              %LVL FPTN,
  304          %ENDIF;
  305      %ENDIF;
  306      %LSET LVL1 = LVL + 1;
  307      %LSET LVL2 = LVL1 + 1;
  308      %IF MODE_FEP;
  309          %LSET LONG = CHARTEXT( '(32)');
  310          %LSET L6 = 1;
  311      %ELSE;
  312          %LSET LONG = CHARTEXT( 'WORD');
  313          %LSET L6 = 0;
  314      %ENDIF;
  315
  316      /*K*    FNC - UBIN BYTE
  317
  318              FNC specifies the primitive being issued or reported.
  319              Valid values are:
  320                  %XSS_FNC_SACDREQ#           S-ACTIVITY-DISCARD Request
  321                  %XSS_FNC_SACDIND#           S-ACTIVITY-DISCARD Indication
  322                  %XSS_FNC_SACDRSP#           S-ACTIVITY-DISCARD Response
  323                  %XSS_FNC_SACDCNF#           S-ACTIVITY-DISCARD Confirm
  324              The default is %XSS_FNC_NONE#.
  325      */
  326          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  327      /*K*    SCID - UBIN BYTE
  328
  329              SCID specifies the connection for which this primitive is being
  330              issued or reported.  The default is 0.
  331      */
  332          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  333      /*K*    REASON - UBIN BYTE
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     10   
  334
  335              REASON corresponds to Session ReasonCode, which specifies the
  336              reason this primitive is being issued or reported.
  337              Valid values are:
  338                  %XSS_RC_NONE#
  339                  %XSS_RC_ABILITY#
  340                  %XSS_RC_REJECTED#
  341                  %XSS_RC_SEQUENCE#
  342                  %XSS_RC_LOCALERR#
  343                  %XSS_RC_PROCEDURE#
  344                  %XSS_RC_DATATOKEN#
  345              The default is %XSS_RC_NONE#.
  346      */
  347          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
  348          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  349          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  350      /*K*    ERROR - VLP_ERRCODE
  351
  352              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  353              error that occurred while processing the issued primitive.  If no
  354              error occurred, this item is zeroed.
  355              The default is %XSS_RDONLYFPT#.
  356      */
  357          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
  358      %MEND;
  359
  360      /*F*    NAME:   XSS$ACTIVITY_END
  361              DESCRIPTION:
  362                  The XSS$ACTIVITY_END macro defines the structure that an
  363                  SS-User uses to issue an S-ACTIVITY-END Request or
  364                  Response, and that the Session layer uses to report an
  365                  S-ACTIVITY-END Indication or Confirm.
  366      */
  367      %MACRO XSS$ACTIVITY_END(
  368              FPTN=XSS$ACTIVITY_END, LVL=1, LAST=";", STCLASS=BASED,
  369              FNC( REQ=%XSS_FNC_SACEREQ#,
  370                   IND=%XSS_FNC_SACEIND#,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     11   
  371                   RSP=%XSS_FNC_SACERSP#,
  372                   CNF=%XSS_FNC_SACECNF#)=%XSS_FNC_NONE#,
  373              SCID=0,
  374              DATA=,
  375              DATAPTR$="ADDR( NIL)",
  376              DATASIZE=0,
  377              SERNUM=0);
  378      %LSET LISTDIR = '0'B;
  379      %LSET LISTEXP = '1'B;
  380      %LSET LISTCOM = '0'B;
  381      %LSET LISTSUB = '1'B;
  382      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  383      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  384          %LSET INIT = CHARTEXT( ' INIT');
  385          %LSET ENIT = CHARTEXT( '');
  386      %ELSE;
  387          %LSET INIT = CHARTEXT( '/*');
  388          %LSET ENIT = CHARTEXT( '*/');
  389      %ENDIF;
  390      %IF LENGTHC( 'FPTN') = 0;
  391          %LSET LVL = LVL - 1;
  392      %ELSE;
  393          %IF LVL = 1;
  394              DCL 1 FPTN STCLASS ALIGNED,
  395          %ELSE;
  396              %LVL FPTN,
  397          %ENDIF;
  398      %ENDIF;
  399      %LSET LVL1 = LVL + 1;
  400      %LSET LVL2 = LVL1 + 1;
  401      %IF MODE_FEP;
  402          %LSET LONG = CHARTEXT( '(32)');
  403          %LSET L6 = 1;
  404      %ELSE;
  405          %LSET LONG = CHARTEXT( 'WORD');
  406          %LSET L6 = 0;
  407      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     12   
  408
  409      /*K*    FNC - UBIN BYTE
  410
  411              FNC specifies the primitive being issued or reported.
  412              Valid values are:
  413                  %XSS_FNC_SACEREQ#           S-ACTIVITY-END Request
  414                  %XSS_FNC_SACEIND#           S-ACTIVITY-END Indication
  415                  %XSS_FNC_SACERSP#           S-ACTIVITY-END Response
  416                  %XSS_FNC_SACECNF#           S-ACTIVITY-END Confirm
  417              The default is %XSS_FNC_NONE#.
  418      */
  419          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  420      /*K*    SCID - UBIN BYTE
  421
  422              SCID specifies the connection for which this primitive is being
  423              issued or reported.  The default is 0.
  424      */
  425          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  426          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
  427      /*K*    ERROR - VLP_ERRCODE
  428
  429              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  430              error that occurred while processing the issued primitive.  If no
  431              error occurred, this item is zeroed.
  432              The default is %XSS_RDONLYFPT#.
  433      */
  434          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  435          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  436      /*K*    DATA.PTR$ - PTR
  437
  438              DATA.PTR$ specifies the address of a buffer containing Session
  439              UserData.  On a primitive Request or Response, the buffer is provided
  440              by the SS-User.  On a primitive Indication or Confirm, the buffer
  441              is provided by Session, and will be discarded on return to Session.
  442              The default is ADDR( NIL).
  443      */
  444      /*K*    DATA.SIZE - UBIN
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     13   
  445
  446              DATA.SIZE specifies the number of significant bytes in the buffer
  447              containing Session UserData.  The default is 0.
  448      */
  449      %LSET ITEM = CHARTEXT( 'DATA');
  450      %IF 0 = LENGTHC( TEXTCHAR(DATA));
  451          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
  452                      PTR$=DATAPTR$, SIZE=DATASIZE);
  453      %ELSE;
  454          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
  455          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
  456          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
  457                      PTR$=%XPTR, SIZE=%XSIZ);
  458      %ENDIF;
  459      /*K*    SERNUM - UBIN
  460
  461              SERNUM specifies the Session SerialNumber associated with the
  462              primitive being issued or reported.  The default is 0.
  463      */
  464          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED LAST
  465      %MEND;
  466
  467      /*F*    NAME:   XSS$ACTIVITY_INTERRUPT
  468              DESCRIPTION:
  469                  The XSS$ACTIVITY_INTERRUPT macro defines the structure that an
  470                  SS-User uses to issue an S-ACTIVITY-INTERRUPT Request or
  471                  Response, and that the Session layer uses to report an
  472                  S-ACTIVITY-INTERRUPT Indication or Confirm.
  473      */
  474      %MACRO XSS$ACTIVITY_INTERRUPT(
  475              FPTN=XSS$ACTIVITY_INTERRUPT, LVL=1, LAST=";", STCLASS=BASED,
  476              FNC( REQ=%XSS_FNC_SACIREQ#,
  477                   IND=%XSS_FNC_SACIIND#,
  478                   RSP=%XSS_FNC_SACIRSP#,
  479                   CNF=%XSS_FNC_SACICNF#)=%XSS_FNC_NONE#,
  480              SCID=0,
  481              REASON=%XSS_RC_NONE#);
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     14   
  482      %LSET LISTDIR = '0'B;
  483      %LSET LISTEXP = '1'B;
  484      %LSET LISTCOM = '0'B;
  485      %LSET LISTSUB = '1'B;
  486      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  487      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  488          %LSET INIT = CHARTEXT( ' INIT');
  489          %LSET ENIT = CHARTEXT( '');
  490      %ELSE;
  491          %LSET INIT = CHARTEXT( '/*');
  492          %LSET ENIT = CHARTEXT( '*/');
  493      %ENDIF;
  494      %IF LENGTHC( 'FPTN') = 0;
  495          %LSET LVL = LVL - 1;
  496      %ELSE;
  497          %IF LVL = 1;
  498              DCL 1 FPTN STCLASS ALIGNED,
  499          %ELSE;
  500              %LVL FPTN,
  501          %ENDIF;
  502      %ENDIF;
  503      %LSET LVL1 = LVL + 1;
  504      %LSET LVL2 = LVL1 + 1;
  505      %IF MODE_FEP;
  506          %LSET LONG = CHARTEXT( '(32)');
  507          %LSET L6 = 1;
  508      %ELSE;
  509          %LSET LONG = CHARTEXT( 'WORD');
  510          %LSET L6 = 0;
  511      %ENDIF;
  512
  513      /*K*    FNC - UBIN BYTE
  514
  515              FNC specifies the primitive being issued or reported.
  516              Valid values are:
  517                  %XSS_FNC_SACIREQ#           S-ACTIVITY-INTERRUPT Request
  518                  %XSS_FNC_SACIIND#           S-ACTIVITY-INTERRUPT Indication
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     15   
  519                  %XSS_FNC_SACIRSP#           S-ACTIVITY-INTERRUPT Response
  520                  %XSS_FNC_SACICNF#           S-ACTIVITY-INTERRUPT Confirm
  521              The default is %XSS_FNC_NONE#.
  522      */
  523          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  524      /*K*    SCID - UBIN BYTE
  525
  526              SCID specifies the connection for which this primitive is being
  527              issued or reported.  The default is 0.
  528      */
  529          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  530      /*K*    REASON - UBIN BYTE
  531
  532              REASON corresponds to Session ReasonCode, which specifies the
  533              reason this primitive is being issued or reported.
  534              Valid values are:
  535                  %XSS_RC_NONE#
  536                  %XSS_RC_ABILITY#
  537                  %XSS_RC_REJECTED#
  538                  %XSS_RC_SEQUENCE#
  539                  %XSS_RC_LOCALERR#
  540                  %XSS_RC_PROCEDURE#
  541                  %XSS_RC_DATATOKEN#
  542              The default is %XSS_RC_NONE#.
  543      */
  544          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
  545          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  546      /*K*    ERROR - VLP_ERRCODE
  547
  548              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  549              error that occurred while processing the issued primitive.  If no
  550              error occurred, this item is zeroed.
  551              The default is %XSS_RDONLYFPT#.
  552      */
  553          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  554          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
  555      %MEND;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     16   
  556
  557      /*F*    NAME:   XSS$ACTIVITY_RESUME
  558              DESCRIPTION:
  559                  The XSS$ACTIVITY_RESUME macro defines the structure that an
  560                  SS-User uses to issue an S-ACTIVITY-RESUME Request, and that
  561                  the Session layer uses to report an S-ACTIVITY-RESUME Indication.
  562      */
  563      %MACRO XSS$ACTIVITY_RESUME(
  564              FPTN=XSS$ACTIVITY_RESUME, LVL=1, LAST=";", STCLASS=BASED,
  565              FNC( REQ=%XSS_FNC_SACRREQ#,
  566                   IND=%XSS_FNC_SACRIND#)=%XSS_FNC_SACRREQ#,
  567              SCID=0,
  568              OSCID=0,
  569              DATA=,
  570              DATAPTR$="ADDR( NIL)",
  571              DATASIZE=0,
  572              SERNUM=0,
  573              COMMON=NIL,
  574              CALLING=NIL,
  575              CALLED=NIL,
  576              ACTID=,
  577              OACTID=,
  578              ARI=%XSS_ARI_NONE#);
  579      %LSET LISTDIR = '0'B;
  580      %LSET LISTEXP = '1'B;
  581      %LSET LISTCOM = '0'B;
  582      %LSET LISTSUB = '1'B;
  583      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  584      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  585          %LSET INIT = CHARTEXT( ' INIT');
  586          %LSET ENIT = CHARTEXT( '');
  587      %ELSE;
  588          %LSET INIT = CHARTEXT( '/*');
  589          %LSET ENIT = CHARTEXT( '*/');
  590      %ENDIF;
  591      %IF LENGTHC( 'FPTN') = 0;
  592          %LSET LVL = LVL - 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     17   
  593      %ELSE;
  594          %IF LVL = 1;
  595              DCL 1 FPTN STCLASS ALIGNED,
  596          %ELSE;
  597              %LVL FPTN,
  598          %ENDIF;
  599      %ENDIF;
  600      %LSET LVL1 = LVL + 1;
  601      %LSET LVL2 = LVL1 + 1;
  602      %IF MODE_FEP;
  603          %LSET LONG = CHARTEXT( '(32)');
  604          %LSET L6 = 1;
  605      %ELSE;
  606          %LSET LONG = CHARTEXT( 'WORD');
  607          %LSET L6 = 0;
  608      %ENDIF;
  609
  610      /*K*    FNC - UBIN BYTE
  611
  612              FNC specifies the primitive being issued or reported.
  613              Valid values are:
  614                  %XSS_FNC_SACRREQ#           S-ACTIVITY-RESUME Request
  615                  %XSS_FNC_SACRIND#           S-ACTIVITY-RESUME Indication
  616              The default is %XSS_FNC_SACRREQ#.
  617      */
  618          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  619      /*K*    SCID - UBIN BYTE
  620
  621              SCID specifies the connection for which this primitive is being
  622              issued or reported.  The default is 0.
  623      */
  624          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  625      /*K*    OSCID - UBIN BYTE
  626
  627              OSCID specifies or indicates ??? associated with the primitive
  628              being issued or reported.  The default is 0.
  629      */
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     18   
  630          %LVL1 %CHARTEXT( 'OSCID') UBIN BYTE %INIT( OSCID)%ENIT CALIGNED,
  631          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  632      /*K*    ERROR - VLP_ERRCODE
  633
  634              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  635              error that occurred while processing the issued primitive.  If no
  636              error occurred, this item is zeroed.
  637              The default is %XSS_RDONLYFPT#.
  638      */
  639          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  640          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  641      /*K*    DATA.PTR$ - PTR
  642
  643              DATA.PTR$ specifies the address of a buffer containing Session
  644              UserData.  On a primitive Request, the buffer is provided
  645              by the SS-User.  On a primitive Indication, the buffer
  646              is provided by Session, and will be discarded on return to Session.
  647              The default is ADDR( NIL).
  648      */
  649      /*K*    DATA.SIZE - UBIN
  650
  651              DATA.SIZE specifies the number of significant bytes in the buffer
  652              containing Session UserData.  The default is 0.
  653      */
  654      %LSET ITEM = CHARTEXT( 'DATA');
  655      %IF 0 = LENGTHC( TEXTCHAR(DATA));
  656          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
  657                      PTR$=DATAPTR$, SIZE=DATASIZE);
  658      %ELSE;
  659          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
  660          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
  661          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
  662                      PTR$=%XPTR, SIZE=%XSIZ);
  663      %ENDIF;
  664      /*K*    SERNUM - UBIN
  665
  666              SERNUM specifies the Session SerialNumber associated with the
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     19   
  667              primitive being issued or reported.  The default is 0.
  668      */
  669          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED,
  670      /*K*    COMMON$ - PTR
  671
  672              COMMON$ specifies the address of a buffer containing Session
  673              CommonReference.  On a primitive Request, the buffer is provided
  674              by the SS-User.  On a primitive Indication, the buffer
  675              is provided by Session, and will be discarded on return to Session.
  676              The buffer is treated as a TEXTC structure (first byte contains the
  677              number of significant bytes of data, remaining bytes contain data).
  678              The default is ADDR( NIL).
  679      */
  680          %LVL1 %CHARTEXT( 'COMMON$') PTR %INIT( ADDR( COMMON))%ENIT ALIGNED,
  681      /*K*    CALLING$ - PTR
  682
  683              CALLING$ specifies the address of a buffer containing Session
  684              CallingSSUserReference.  On a primitive Request, the buffer is
  685              provided by the SS-User.  On a primitive Indication, the buffer
  686              is provided by Session, and will be discarded on return to Session.
  687              The buffer is treated as an XSC$ADDRESS structure.
  688              The default is ADDR( NIL).
  689      */
  690          %LVL1 %CHARTEXT( 'CALLING$') PTR %INIT( ADDR( CALLING))%ENIT ALIGNED,
  691      /*K*    CALLED$ - PTR
  692
  693              CALLED$ specifies the address of a buffer containing Session
  694              CalledSSUserReference.  On a primitive Request, the buffer is
  695              provided by the SS-User.  On a primitive Indication, the buffer
  696              is provided by Session, and will be discarded on return to Session.
  697              The buffer is treated as an XSC$ADDRESS structure.
  698              The default is ADDR( NIL).
  699      */
  700          %LVL1 %CHARTEXT( 'CALLED$') PTR %INIT( ADDR( CALLED))%ENIT ALIGNED,
  701      /*K*    ACTID.LEN - UBIN BYTE
  702
  703              ACTID.LEN specifies the number of significant bytes in ACTID.TXT.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     20   
  704              The default is 0.
  705      */
  706      /*K*    ACTID.TXT - CHAR(6)
  707
  708              ACTID.TXT specifies the Session NewActivityIdentifier associated
  709              with the primitive being issued or reported.  Only the low order
  710              8 bits of each byte are significant.  The default is "      ".
  711      */
  712      /*K*    OACTID.LEN - UBIN BYTE
  713
  714              OACTID.LEN specifies the number of significant bytes in OACTID.TXT.
  715              The default is 0.
  716      */
  717      /*K*    OACTID.TXT - CHAR(6)
  718
  719              OACTID.TXT specifies the Session OldActivityIdentifier associated
  720              with the primitive being issued or reported.  Only the low order
  721              8 bits of each byte are significant.  The default is "      ".
  722      */
  723      %IF 0 = LENGTHC( TEXTCHAR(ACTID));
  724          %LSET LEN = CHARTEXT( '0');
  725          %LSET TXT = CHARTEXT( '''      ''');
  726      %ELSE;
  727          %LSET LEN = CHARTEXT( LENGTHC( TEXTCHAR(ACTID)));
  728          %LSET TXT = CHARTEXT( TEXTCHAR(ACTID));
  729      %ENDIF;
  730          %LVL1 %CHARTEXT( 'ACTID') ALIGNED,
  731              %LVL2 %CHARTEXT( 'LEN') UBIN BYTE %INIT( %LEN)%ENIT UNAL,
  732              %LVL2 %CHARTEXT( 'TXT') CHAR(6) %INIT( %TXT)%ENIT UNAL,
  733      %IF 0 = LENGTHC( TEXTCHAR(OACTID));
  734          %LSET LEN = CHARTEXT( '0');
  735          %LSET TXT = CHARTEXT( '''      ''');
  736      %ELSE;
  737          %LSET LEN = CHARTEXT( LENGTHC( TEXTCHAR(OACTID)));
  738          %LSET TXT = CHARTEXT( TEXTCHAR(OACTID));
  739      %ENDIF;
  740          %LVL1 %CHARTEXT( 'OACTID') ALIGNED,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     21   
  741              %LVL2 %CHARTEXT( 'LEN') UBIN BYTE %INIT( %LEN)%ENIT UNAL,
  742              %LVL2 %CHARTEXT( 'TXT') CHAR(6) %INIT( %TXT)%ENIT UNAL,
  743      /*K*    ARI - UBIN
  744
  745              ARI specifies the Session AdditionalReferenceInformation associated
  746              with the primitive being issued or reported.
  747              The default is %XSS_ARI_NONE#.
  748      */
  749          %LVL1 %CHARTEXT( 'ARI') UBIN %LONG %INIT( ARI)%ENIT ALIGNED LAST
  750      %MEND;
  751
  752      /*F*    NAME:   XSS$ACTIVITY_START
  753              DESCRIPTION:
  754                  The XSS$ACTIVITY_START macro defines the structure that an
  755                  SS-User uses to issue an S-ACTIVITY-START Request, and that
  756                  the Session layer uses to report an S-ACTIVITY-START Indication.
  757      */
  758      %MACRO XSS$ACTIVITY_START(
  759              FPTN=XSS$ACTIVITY_START, LVL=1, LAST=";", STCLASS=BASED,
  760              FNC( REQ=%XSS_FNC_SACSREQ#,
  761                   IND=%XSS_FNC_SACSIND#)=%XSS_FNC_SACSREQ#,
  762              SCID=0,
  763              DATA=,
  764              DATAPTR$="ADDR( NIL)",
  765              DATASIZE=0,
  766              ACTID=);
  767      %LSET LISTDIR = '0'B;
  768      %LSET LISTEXP = '1'B;
  769      %LSET LISTCOM = '0'B;
  770      %LSET LISTSUB = '1'B;
  771      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  772      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  773          %LSET INIT = CHARTEXT( ' INIT');
  774          %LSET ENIT = CHARTEXT( '');
  775      %ELSE;
  776          %LSET INIT = CHARTEXT( '/*');
  777          %LSET ENIT = CHARTEXT( '*/');
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     22   
  778      %ENDIF;
  779      %IF LENGTHC( 'FPTN') = 0;
  780          %LSET LVL = LVL - 1;
  781      %ELSE;
  782          %IF LVL = 1;
  783              DCL 1 FPTN STCLASS ALIGNED,
  784          %ELSE;
  785              %LVL FPTN,
  786          %ENDIF;
  787      %ENDIF;
  788      %LSET LVL1 = LVL + 1;
  789      %LSET LVL2 = LVL1 + 1;
  790      %IF MODE_FEP;
  791          %LSET LONG = CHARTEXT( '(32)');
  792          %LSET L6 = 1;
  793      %ELSE;
  794          %LSET LONG = CHARTEXT( 'WORD');
  795          %LSET L6 = 0;
  796      %ENDIF;
  797
  798      /*K*    FNC - UBIN BYTE
  799
  800              FNC specifies the primitive being issued or reported.
  801              Valid values are:
  802                  %XSS_FNC_SACSREQ#           S-ACTIVITY-START Request
  803                  %XSS_FNC_SACSIND#           S-ACTIVITY-START Indication
  804              The default is %XSS_FNC_SACSREQ#.
  805      */
  806          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  807      /*K*    SCID - UBIN BYTE
  808
  809              SCID specifies the connection for which this primitive is being
  810              issued or reported.  The default is 0.
  811      */
  812          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  813          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
  814      /*K*    ERROR - VLP_ERRCODE
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     23   
  815
  816              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  817              error that occurred while processing the issued primitive.  If no
  818              error occurred, this item is zeroed.
  819              The default is %XSS_RDONLYFPT#.
  820      */
  821          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  822          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  823      /*K*    DATA.PTR$ - PTR
  824
  825              DATA.PTR$ specifies the address of a buffer containing Session
  826              UserData.  On a primitive Request, the buffer is provided
  827              by the SS-User.  On a primitive Indication, the buffer
  828              is provided by Session, and will be discarded on return to Session.
  829              The default is ADDR( NIL).
  830      */
  831      /*K*    DATA.SIZE - UBIN
  832
  833              DATA.SIZE specifies the number of significant bytes in the buffer
  834              containing Session UserData.  The default is 0.
  835      */
  836      %LSET ITEM = CHARTEXT( 'DATA');
  837      %IF 0 = LENGTHC( TEXTCHAR(DATA));
  838          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
  839                      PTR$=DATAPTR$, SIZE=DATASIZE);
  840      %ELSE;
  841          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
  842          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
  843          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
  844                      PTR$=%XPTR, SIZE=%XSIZ);
  845      %ENDIF;
  846      /*K*    ACTID.LEN - UBIN BYTE
  847
  848              ACTID.LEN specifies the number of significant bytes in ACTID.TXT.
  849              The default is 0.
  850      */
  851      /*K*    ACTID.TXT - CHAR(6)
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     24   
  852
  853              ACTID.TXT specifies the Session ActivityIdentifier associated
  854              with the primitive being issued or reported.  Only the low order
  855              8 bits of each byte are significant.  The default is "      ".
  856      */
  857      %IF 0 = LENGTHC( TEXTCHAR(ACTID));
  858          %LSET LEN = CHARTEXT( '0');
  859          %LSET TXT = CHARTEXT( '''      ''');
  860      %ELSE;
  861          %LSET LEN = CHARTEXT( LENGTHC( TEXTCHAR(ACTID)));
  862          %LSET TXT = CHARTEXT( TEXTCHAR(ACTID));
  863      %ENDIF;
  864          %LVL1 %CHARTEXT( 'ACTID') ALIGNED,
  865              %LVL2 %CHARTEXT( 'LEN') UBIN BYTE %INIT( %LEN)%ENIT UNAL,
  866              %LVL2 %CHARTEXT( 'TXT') CHAR(6) %INIT( %TXT)%ENIT UNAL LAST
  867      %MEND;
  868
  869      /*F*    NAME:   XSS$CAPABILITY_DATA
  870              DESCRIPTION:
  871                  The XSS$CAPABILITY_DATA macro defines the structure that an
  872                  SS-User uses to issue an S-CAPABILITY-DATA Request or
  873                  Response, and that the Session layer uses to report an
  874                  S-CAPABILITY-DATA Indication or Confirm.
  875      */
  876      %MACRO XSS$CAPABILITY_DATA(
  877              FPTN=XSS$CAPABILITY_DATA, LVL=1, LAST=";", STCLASS=BASED,
  878              FNC( REQ=%XSS_FNC_SCADREQ#,
  879                   IND=%XSS_FNC_SCADIND#,
  880                   RSP=%XSS_FNC_SCADRSP#,
  881                   CNF=%XSS_FNC_SCADCNF#)=%XSS_FNC_NONE#,
  882              SCID=0,
  883              DATA=,
  884              DATAPTR$="ADDR( NIL)",
  885              DATASIZE=0);
  886      %LSET LISTDIR = '0'B;
  887      %LSET LISTEXP = '1'B;
  888      %LSET LISTCOM = '0'B;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     25   
  889      %LSET LISTSUB = '1'B;
  890      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  891      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  892          %LSET INIT = CHARTEXT( ' INIT');
  893          %LSET ENIT = CHARTEXT( '');
  894      %ELSE;
  895          %LSET INIT = CHARTEXT( '/*');
  896          %LSET ENIT = CHARTEXT( '*/');
  897      %ENDIF;
  898      %IF LENGTHC( 'FPTN') = 0;
  899          %LSET LVL = LVL - 1;
  900      %ELSE;
  901          %IF LVL = 1;
  902              DCL 1 FPTN STCLASS ALIGNED,
  903          %ELSE;
  904              %LVL FPTN,
  905          %ENDIF;
  906      %ENDIF;
  907      %LSET LVL1 = LVL + 1;
  908      %LSET LVL2 = LVL1 + 1;
  909      %IF MODE_FEP;
  910          %LSET LONG = CHARTEXT( '(32)');
  911          %LSET L6 = 1;
  912      %ELSE;
  913          %LSET LONG = CHARTEXT( 'WORD');
  914          %LSET L6 = 0;
  915      %ENDIF;
  916
  917      /*K*    FNC - UBIN BYTE
  918
  919              FNC specifies the primitive being issued or reported.
  920              Valid values are:
  921                  %XSS_FNC_SCADREQ#           S-CAPABILITY-DATA Request
  922                  %XSS_FNC_SCADIND#           S-CAPABILITY-DATA Indication
  923                  %XSS_FNC_SCADRSP#           S-CAPABILITY-DATA Response
  924                  %XSS_FNC_SCADCNF#           S-CAPABILITY-DATA Confirm
  925              The default is %XSS_FNC_NONE#.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     26   
  926      */
  927          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
  928      /*K*    SCID - UBIN BYTE
  929
  930              SCID specifies the connection for which this primitive is being
  931              issued or reported.  The default is 0.
  932      */
  933          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
  934          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
  935      /*K*    ERROR - VLP_ERRCODE
  936
  937              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
  938              error that occurred while processing the issued primitive.  If no
  939              error occurred, this item is zeroed.
  940              The default is %XSS_RDONLYFPT#.
  941      */
  942          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
  943          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  944      /*K*    DATA.PTR$ - PTR
  945
  946              DATA.PTR$ specifies the address of a buffer containing Session
  947              UserData.  On a primitive Request or Response, the buffer is provided
  948              by the SS-User.  On a primitive Indication or Confirm, the buffer
  949              is provided by Session, and will be discarded on return to Session.
  950              The default is ADDR( NIL).
  951      */
  952      /*K*    DATA.SIZE - UBIN
  953
  954              DATA.SIZE specifies the number of significant bytes in the buffer
  955              containing Session UserData.  The default is 0.
  956      */
  957      %LSET ITEM = CHARTEXT( 'DATA');
  958      %IF 0 = LENGTHC( TEXTCHAR(DATA));
  959          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
  960                      PTR$=DATAPTR$, SIZE=DATASIZE);
  961      %ELSE;
  962          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     27   
  963          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
  964          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
  965                      PTR$=%XPTR, SIZE=%XSIZ);
  966      %ENDIF;
  967      %MEND;
  968
  969      /*F*    NAME:   XSS$CONNECT
  970              DESCRIPTION:
  971                  The XSS$CONNECT macro defines the structure that an
  972                  SS-User uses to issue an S-CONNECT Request or
  973                  Response, and that the Session layer uses to report an
  974                  S-CONNECT Indication or Confirm.
  975      */
  976      %MACRO XSS$CONNECT(
  977              FPTN=XSS$CONNECT, LVL=1, LAST=";", STCLASS=BASED,
  978              FNC( REQ=%XSS_FNC_SCONREQ#,
  979                   IND=%XSS_FNC_SCONIND#,
  980                   RSP=%XSS_FNC_SCONRSP#,
  981                   CNF=%XSS_FNC_SCONCNF#)=%XSS_FNC_NONE#,
  982              SCID=0,
  983              REASON=%XSS_RC_NONE#,
  984              DATA=,
  985              DATAPTR$="ADDR( NIL)",
  986              DATASIZE=0,
  987              SERNUM=0,
  988              COMMON=NIL,
  989              CALLING=NIL,
  990              CALLED=NIL,
  991              RESPONDING=NIL,
  992              INITTR( ISIDE=%XSS_TSI_ISIDE#,
  993                      ASIDE=%XSS_TSI_ASIDE#,
  994                      ACHOICE=%XSS_TSI_ACHOICE,
  995                      NONE=%XSS_TSI_NONE#)=%XSS_TSI_NONE#,
  996              INITMA( ISIDE=%XSS_TSI_ISIDE#,
  997                      ASIDE=%XSS_TSI_ASIDE#,
  998                      ACHOICE=%XSS_TSI_ACHOICE,
  999                      NONE=%XSS_TSI_NONE#)=%XSS_TSI_NONE#,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     28   
 1000              INITMI( ISIDE=%XSS_TSI_ISIDE#,
 1001                      ASIDE=%XSS_TSI_ASIDE#,
 1002                      ACHOICE=%XSS_TSI_ACHOICE,
 1003                      NONE=%XSS_TSI_NONE#)=%XSS_TSI_NONE#,
 1004              INITDK( ISIDE=%XSS_TSI_ISIDE#,
 1005                      ASIDE=%XSS_TSI_ASIDE#,
 1006                      ACHOICE=%XSS_TSI_ACHOICE,
 1007                      NONE=%XSS_TSI_NONE#)=%XSS_TSI_NONE#,
 1008              RESULT=%XSS_RSLT_SUCCESS#,
 1009              SFUTD( NO='0'B, YES='1'B)='0'B,
 1010              SFUEXCEP( NO='0'B, YES='1'B)='0'B,
 1011              SFUCD( NO='0'B, YES='1'B)='0'B,
 1012              SFUNR( NO='0'B, YES='1'B)='0'B,
 1013              SFUTD( NO='0'B, YES='1'B)='0'B,
 1014              SFUACT( NO='0'B, YES='1'B)='0'B,
 1015              SFURESYN( NO='0'B, YES='1'B)='0'B,
 1016              SFUMA( NO='0'B, YES='1'B)='0'B,
 1017              SFUSY( NO='0'B, YES='1'B)='0'B,
 1018              SFUEX( NO='0'B, YES='1'B)='0'B,
 1019              SFUFD( NO='0'B, YES='1'B)='0'B,
 1020              SFUHD( NO='0'B, YES='1'B)='0'B,
 1021              QOS=0,
 1022              ARI=%XSS_ARI_NONE#);
 1023      %LSET LISTDIR = '0'B;
 1024      %LSET LISTEXP = '1'B;
 1025      %LSET LISTCOM = '0'B;
 1026      %LSET LISTSUB = '1'B;
 1027      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1028      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1029          %LSET INIT = CHARTEXT( ' INIT');
 1030          %LSET ENIT = CHARTEXT( '');
 1031      %ELSE;
 1032          %LSET INIT = CHARTEXT( '/*');
 1033          %LSET ENIT = CHARTEXT( '*/');
 1034      %ENDIF;
 1035      %IF LENGTHC( 'FPTN') = 0;
 1036          %LSET LVL = LVL - 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     29   
 1037      %ELSE;
 1038          %IF LVL = 1;
 1039              DCL 1 FPTN STCLASS ALIGNED,
 1040          %ELSE;
 1041              %LVL FPTN,
 1042          %ENDIF;
 1043      %ENDIF;
 1044      %LSET LVL1 = LVL + 1;
 1045      %LSET LVL2 = LVL1 + 1;
 1046      %IF MODE_FEP;
 1047          %LSET LONG = CHARTEXT( '(32)');
 1048          %LSET L6 = 1;
 1049      %ELSE;
 1050          %LSET LONG = CHARTEXT( 'WORD');
 1051          %LSET L6 = 0;
 1052      %ENDIF;
 1053
 1054      /*K*    FNC - UBIN BYTE
 1055
 1056              FNC specifies the primitive being issued or reported.
 1057              Valid values are:
 1058                  %XSS_FNC_SCONREQ#           S-CONNECT Request
 1059                  %XSS_FNC_SCONIND#           S-CONNECT Indication
 1060                  %XSS_FNC_SCONRSP#           S-CONNECT Response
 1061                  %XSS_FNC_SCONCNF#           S-CONNECT Confirm
 1062              The default is %XSS_FNC_NONE#.
 1063      */
 1064          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1065      /*K*    SCID - UBIN BYTE
 1066
 1067              SCID specifies the connection for which this primitive is being
 1068              issued or reported.  The default is 0.
 1069      */
 1070          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1071      /*K*    REASON - UBIN BYTE
 1072
 1073              REASON corresponds to Session ReasonCode, which specifies the
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     30   
 1074              reason this primitive is being issued or reported.
 1075              Valid values are:
 1076                  %XSS_RC_NONE#
 1077                  %XSS_RC_ABILITY#
 1078                  %XSS_RC_REJECTED#
 1079                  %XSS_RC_SEQUENCE#
 1080                  %XSS_RC_LOCALERR#
 1081                  %XSS_RC_PROCEDURE#
 1082                  %XSS_RC_DATATOKEN#
 1083              The default is %XSS_RC_NONE#.
 1084      */
 1085          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
 1086      /*K*    TOKENS - XSS$$TOKENS
 1087
 1088              TOKENS specifies, on a primitive Request, which of the Session Tokens
 1089              are requested for use on this connection.  TOKENS is constructed by
 1090              Session using the SS-User's requested Session Functional Units (see
 1091              SFU).  Since the Functional Units can be negotiated downward by either
 1092              Session endpoint or the remote SS-User, the resulting Session Tokens
 1093              are made known on the primitive Confirm.
 1094      */
 1095          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
 1096      /*K*    ERROR - VLP_ERRCODE
 1097
 1098              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1099              error that occurred while processing the issued primitive.  If no
 1100              error occurred, this item is zeroed.
 1101              The default is %XSS_RDONLYFPT#.
 1102      */
 1103          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1104          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 1105      /*K*    DATA.PTR$ - PTR
 1106
 1107              DATA.PTR$ specifies the address of a buffer containing Session
 1108              UserData.  On a primitive Request or Response, the buffer is provided
 1109              by the SS-User.  On a primitive Indication or Confirm, the buffer
 1110              is provided by Session, and will be discarded on return to Session.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     31   
 1111              The default is ADDR( NIL).
 1112      */
 1113      /*K*    DATA.SIZE - UBIN
 1114
 1115              DATA.SIZE specifies the number of significant bytes in the buffer
 1116              containing Session UserData.  The default is 0.
 1117      */
 1118      %LSET ITEM = CHARTEXT( 'DATA');
 1119      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 1120          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 1121                      PTR$=DATAPTR$, SIZE=DATASIZE);
 1122      %ELSE;
 1123          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 1124          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 1125          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1126                      PTR$=%XPTR, SIZE=%XSIZ);
 1127      %ENDIF;
 1128      /*K*    SERNUM - UBIN
 1129
 1130              SERNUM specifies the Session SerialNumber associated with the
 1131              primitive being issued or reported.  The default is 0.
 1132      */
 1133          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED,
 1134      /*K*    COMMON$ - PTR
 1135
 1136              COMMON$ specifies the address of a buffer containing Session
 1137              CommonReference.  On a primitive Request, the buffer is provided
 1138              by the SS-User.  On a primitive Indication, the buffer
 1139              is provided by Session, and will be discarded on return to Session.
 1140              The buffer is treated as a TEXTC structure (first byte contains the
 1141              number of significant bytes of data, remaining bytes contain data).
 1142              The default is ADDR( NIL).
 1143      */
 1144          %LVL1 %CHARTEXT( 'COMMON$') PTR %INIT( ADDR( COMMON))%ENIT ALIGNED,
 1145      /*K*    CALLING$ - PTR
 1146
 1147              CALLING$ specifies the address of a buffer containing Session
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     32   
 1148              CallingSSUserReference.  On a primitive Request, the buffer is
 1149              provided by the SS-User.  On a primitive Indication, the buffer
 1150              is provided by Session, and will be discarded on return to Session.
 1151              The buffer is treated as an XSC$ADDRESS structure.
 1152              The default is ADDR( NIL).
 1153      */
 1154          %LVL1 %CHARTEXT( 'CALLING$') PTR %INIT( ADDR( CALLING))%ENIT ALIGNED,
 1155      %IF FNC = %XSS_FNC_SCONRSP# OR FNC = %XSS_FNC_SCONCNF#;
 1156          %LSET DST = TEXTCHAR(RESPONDING);
 1157      %ELSE;
 1158          %LSET DST = TEXTCHAR(CALLED);
 1159      %ENDIF;
 1160      /*K*    CALLED$ - PTR
 1161
 1162              CALLED$ specifies the address of a buffer containing Session
 1163              CalledSSUserReference.  On a primitive Request, the buffer is
 1164              provided by the SS-User.  On a primitive Indication, the buffer
 1165              is provided by Session, and will be discarded on return to Session.
 1166              The buffer is treated as an XSC$ADDRESS structure.
 1167              The default is ADDR( NIL).
 1168      */
 1169      /*K*    RESPONDING$ - PTR
 1170
 1171              RESPONDING$ is a REDEF of CALLED$ provided for aesthetic reasons.
 1172      */
 1173          %LVL1 %CHARTEXT( 'CALLED$') PTR %INIT( ADDR( %CHARTEXT( %DST)))%ENIT ALIGNED,
 1174          %LVL1 %CHARTEXT( 'RESPONDING$') REDEF %CHARTEXT( 'CALLED$') PTR ALIGNED,
 1175      /*K*    ITOKENS - XSS$$TOKENS
 1176
 1177              ITOKENS specifies, on a primitive Request or Response, the initial
 1178              positions of the tokens associated with this connection.  Each token
 1179              may be positioned at one of the following endpoints of the connection:
 1180                      %XSS_TSI_ISIDE#         Initiator's side
 1181                      %XSS_TSI_ASIDE#         Acceptor's side
 1182                      %XSS_TSI_ACHOICE#       Acceptor-chosen side
 1183                      %XSS_TSI_NONE#          Token not relevant
 1184              The items of ITOKENS, and their corresponding Tokens, are as follows:
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     33   
 1185                      TR              Release Token
 1186                      MA              Major/Activity Token
 1187                      MI              Synchronize-Minor Token
 1188                      DK              Data Token
 1189              The default for each item of ITOKENS is %XSS_TSI_NONE#.
 1190      */
 1191          %LVL1 %CHARTEXT( 'ITOKENS'),
 1192              %LVL2 %CHARTEXT( 'TR') UBIN(2) %INIT( INITTR)%ENIT UNAL,
 1193              %LVL2 %CHARTEXT( 'MA') UBIN(2) %INIT( INITMA)%ENIT UNAL,
 1194              %LVL2 %CHARTEXT( 'MI') UBIN(2) %INIT( INITMI)%ENIT UNAL,
 1195              %LVL2 %CHARTEXT( 'DK') UBIN(2) %INIT( INITDK)%ENIT UNAL,
 1196      %IF NOT MODE_FEP;
 1197              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
 1198      %ENDIF;
 1199      /*K*    RESULT - UBIN BYTE
 1200
 1201              RESULT indicates whether the associated Session primitive was
 1202              successful.  A zero value indicates success; a nonzero value indicates
 1203              failure.  The default is %XSS_RSLT_SUCCESS#.
 1204      */
 1205          %LVL1 %CHARTEXT( 'RESULT') UBIN BYTE %INIT( RESULT)%ENIT CALIGNED,
 1206      /*K*    SFU - STRUCTURE
 1207
 1208              SFU specifies, on a primitive Request, which Session Functional Units
 1209              are requested for use on this connection.  Both Session endpoints, as
 1210              well as the remote SS-User, have the opportunity to negotiate
 1211              downward.  The resulting Session Functional Units are made known in
 1212              the primitive Response and Confirm.  The use of a particular
 1213              Functional Unit is specified or indicated by a '1'B value in the
 1214              corresponding bit of the SFU item.  The items of SFU and their
 1215              corresponding Functional Units are listed below:
 1216                      TD              Typed Data Functional Unit
 1217                      EXCEP           Exceptions Functional Unit
 1218                      CD              Capability Data Exchange Functional Unit
 1219                      NR              Negotiated Release Functional Unit
 1220                      ACT             Activity Management Functional Unit
 1221                      RESYN           Resynchronize Functional Unit
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     34   
 1222                      MA              Major Synchronize Functional Unit
 1223                      SY              Minor Synchronize Functional Unit
 1224                      EX              Expedited Data Functional Unit
 1225                      FD              Duplex Functional Unit
 1226                      HD              Half-Duplex Functional Unit
 1227              The default for each item of SFU is '0'B.
 1228      */
 1229          %LVL1 %CHARTEXT( 'SFU'),
 1230              %LVL2 %CHARTEXT( '*') BIT(5) %INIT( '00000'B)%ENIT UNAL,
 1231              %LVL2 %CHARTEXT( 'TD') BIT(1) %INIT( SFUTD)%ENIT UNAL,
 1232              %LVL2 %CHARTEXT( 'EXCEP') BIT(1) %INIT( SFUEXCEP)%ENIT UNAL,
 1233              %LVL2 %CHARTEXT( 'CD') BIT(1) %INIT( SFUCD)%ENIT UNAL,
 1234              %LVL2 %CHARTEXT( 'NR') BIT(1) %INIT( SFUNR)%ENIT UNAL,
 1235              %LVL2 %CHARTEXT( 'ACT') BIT(1) %INIT( SFUACT)%ENIT UNAL,
 1236              %LVL2 %CHARTEXT( 'RESYN') BIT(1) %INIT( SFURESYN)%ENIT UNAL,
 1237              %LVL2 %CHARTEXT( 'MA') BIT(1) %INIT( SFUMA)%ENIT UNAL,
 1238              %LVL2 %CHARTEXT( 'SY') BIT(1) %INIT( SFUSY)%ENIT UNAL,
 1239              %LVL2 %CHARTEXT( 'EX') BIT(1) %INIT( SFUEX)%ENIT UNAL,
 1240              %LVL2 %CHARTEXT( 'FD') BIT(1) %INIT( SFUFD)%ENIT UNAL,
 1241              %LVL2 %CHARTEXT( 'HD') BIT(1) %INIT( SFUHD)%ENIT UNAL,
 1242      %IF NOT MODE_FEP;
 1243              %LVL2 %CHARTEXT( '*') BIT(2) %INIT( '00'B)%ENIT UNAL,
 1244      %ENDIF;
 1245      /*K*    QOS - UBIN
 1246
 1247              QOS is reserved for future use.
 1248      */
 1249          %LVL1 %CHARTEXT( 'QOS') UBIN %LONG %INIT( QOS)%ENIT ALIGNED,
 1250      /*K*    ARI - UBIN
 1251
 1252              ARI specifies the Session AdditionalReferenceInformation associated
 1253              with the primitive being issued or reported.
 1254              The default is %XSS_ARI_NONE#.
 1255      */
 1256          %LVL1 %CHARTEXT( 'ARI') UBIN %LONG %INIT( ARI)%ENIT ALIGNED LAST
 1257      %MEND;
 1258
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     35   
 1259      /*F*    NAME:   XSS$CONTROL_GIVE
 1260              DESCRIPTION:
 1261                  The XSS$CONTROL_GIVE macro defines the structure that an
 1262                  SS-User uses to issue an S-CONTROL-GIVE Request, and that
 1263                  the Session layer uses to report an S-CONTROL-GIVE Indication.
 1264      */
 1265      %MACRO XSS$CONTROL_GIVE(
 1266              FPTN=XSS$CONTROL_GIVE, LVL=1, LAST=";", STCLASS=BASED,
 1267              FNC( REQ=%XSS_FNC_SCTGREQ#,
 1268                   IND=%XSS_FNC_SCTGIND#)=%XSS_FNC_SCTGREQ#,
 1269              SCID=0);
 1270      %LSET LISTDIR = '0'B;
 1271      %LSET LISTEXP = '1'B;
 1272      %LSET LISTCOM = '0'B;
 1273      %LSET LISTSUB = '1'B;
 1274      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1275      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1276          %LSET INIT = CHARTEXT( ' INIT');
 1277          %LSET ENIT = CHARTEXT( '');
 1278      %ELSE;
 1279          %LSET INIT = CHARTEXT( '/*');
 1280          %LSET ENIT = CHARTEXT( '*/');
 1281      %ENDIF;
 1282      %IF LENGTHC( 'FPTN') = 0;
 1283          %LSET LVL = LVL - 1;
 1284      %ELSE;
 1285          %IF LVL = 1;
 1286              DCL 1 FPTN STCLASS ALIGNED,
 1287          %ELSE;
 1288              %LVL FPTN,
 1289          %ENDIF;
 1290      %ENDIF;
 1291      %LSET LVL1 = LVL + 1;
 1292      %LSET LVL2 = LVL1 + 1;
 1293      %IF MODE_FEP;
 1294          %LSET LONG = CHARTEXT( '(32)');
 1295          %LSET L6 = 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     36   
 1296      %ELSE;
 1297          %LSET LONG = CHARTEXT( 'WORD');
 1298          %LSET L6 = 0;
 1299      %ENDIF;
 1300
 1301      /*K*    FNC - UBIN BYTE
 1302
 1303              FNC specifies the primitive being issued or reported.
 1304              Valid values are:
 1305                  %XSS_FNC_SCTGREQ#           S-CONTROL-GIVE Request
 1306                  %XSS_FNC_SCTGIND#           S-CONTROL-GIVE Indication
 1307              The default is %XSS_FNC_SCTGREQ#.
 1308      */
 1309          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1310      /*K*    SCID - UBIN BYTE
 1311
 1312              SCID specifies the connection for which this primitive is being
 1313              issued or reported.  The default is 0.
 1314      */
 1315          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1316          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 1317      /*K*    TOKENS - XSS$$TOKENS
 1318
 1319              TOKENS specifies, on a primitive Request, which of the Session Tokens
 1320              are to be given to the other endpoint.  TOKENS is constructed by
 1321              Session, which sets each item of TOKENS to '1'B.
 1322      */
 1323          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
 1324      /*K*    ERROR - VLP_ERRCODE
 1325
 1326              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1327              error that occurred while processing the issued primitive.  If no
 1328              error occurred, this item is zeroed.
 1329              The default is %XSS_RDONLYFPT#.
 1330      */
 1331          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1332          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     37   
 1333      %MEND;
 1334
 1335      /*F*    NAME:   XSS$DATA
 1336              DESCRIPTION:
 1337                  The XSS$DATA macro defines the structure that an
 1338                  SS-User uses to issue an S-DATA Request, and that the
 1339                  Session layer uses to report an S-DATA Indication.
 1340      */
 1341      %MACRO XSS$DATA(
 1342              FPTN=XSS$DATA, LVL=1, LAST=";", STCLASS=BASED,
 1343              FNC( REQ=%XSS_FNC_SDATREQ#,
 1344                   IND=%XSS_FNC_SDATIND#)=%XSS_FNC_SDATREQ#,
 1345              SCID=0,
 1346              DATA=,
 1347              DATAPTR$="ADDR( NIL)",
 1348              DATASIZE=0);
 1349      %LSET LISTDIR = '0'B;
 1350      %LSET LISTEXP = '1'B;
 1351      %LSET LISTCOM = '0'B;
 1352      %LSET LISTSUB = '1'B;
 1353      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1354      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1355          %LSET INIT = CHARTEXT( ' INIT');
 1356          %LSET ENIT = CHARTEXT( '');
 1357      %ELSE;
 1358          %LSET INIT = CHARTEXT( '/*');
 1359          %LSET ENIT = CHARTEXT( '*/');
 1360      %ENDIF;
 1361      %IF LENGTHC( 'FPTN') = 0;
 1362          %LSET LVL = LVL - 1;
 1363      %ELSE;
 1364          %IF LVL = 1;
 1365              DCL 1 FPTN STCLASS ALIGNED,
 1366          %ELSE;
 1367              %LVL FPTN,
 1368          %ENDIF;
 1369      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     38   
 1370      %LSET LVL1 = LVL + 1;
 1371      %LSET LVL2 = LVL1 + 1;
 1372      %IF MODE_FEP;
 1373          %LSET LONG = CHARTEXT( '(32)');
 1374          %LSET L6 = 1;
 1375      %ELSE;
 1376          %LSET LONG = CHARTEXT( 'WORD');
 1377          %LSET L6 = 0;
 1378      %ENDIF;
 1379
 1380      /*K*    FNC - UBIN BYTE
 1381
 1382              FNC specifies the primitive being issued or reported.
 1383              Valid values are:
 1384                  %XSS_FNC_SDATREQ#           S-DATA Request
 1385                  %XSS_FNC_SDATIND#           S-DATA Indication
 1386              The default is %XSS_FNC_SDATREQ#.
 1387      */
 1388          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1389      /*K*    SCID - UBIN BYTE
 1390
 1391              SCID specifies the connection for which this primitive is being
 1392              issued or reported.  The default is 0.
 1393      */
 1394          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1395          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
 1396      /*K*    ERROR - VLP_ERRCODE
 1397
 1398              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1399              error that occurred while processing the issued primitive.  If no
 1400              error occurred, this item is zeroed.
 1401              The default is %XSS_RDONLYFPT#.
 1402      */
 1403          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1404          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 1405      /*K*    DATA.PTR$ - PTR
 1406
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     39   
 1407              DATA.PTR$ specifies the address of a buffer containing Session
 1408              UserInformationField.  On a primitive Request, the buffer is provided
 1409              by the SS-User.  On a primitive Indication, the buffer is provided by
 1410              Session, and will be discarded on return to Session.
 1411              The default is ADDR( NIL).
 1412      */
 1413      /*K*    DATA.SIZE - UBIN
 1414
 1415              DATA.SIZE specifies the number of significant bytes in the buffer
 1416              containing Session UserInformationField.  The default is 0.
 1417      */
 1418      %LSET ITEM = CHARTEXT( 'DATA');
 1419      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 1420          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1421                      PTR$=DATAPTR$, SIZE=DATASIZE);
 1422      %ELSE;
 1423          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 1424          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 1425          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1426                      PTR$=%XPTR, SIZE=%XSIZ);
 1427      %ENDIF;
 1428      %MEND;
 1429
 1430      /*F*    NAME:   XSS$EXPEDITED_DATA
 1431              DESCRIPTION:
 1432                  The XSS$EXPEDITED_DATA macro defines the structure that an
 1433                  SS-User uses to issue an S-EXPEDITED-DATA Request, and that
 1434                  the Session layer uses to report an S-EXPEDITED-DATA Indication.
 1435      */
 1436      %MACRO XSS$EXPEDITED_DATA(
 1437              FPTN=XSS$EXPEDITED_DATA, LVL=1, LAST=";", STCLASS=BASED,
 1438              FNC( REQ=%XSS_FNC_SEXPREQ#,
 1439                   IND=%XSS_FNC_SEXPIND#)=%XSS_FNC_SEXPREQ#,
 1440              SCID=0,
 1441              DATA=,
 1442              DATAPTR$="ADDR( NIL)",
 1443              DATASIZE=0);
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     40   
 1444      %LSET LISTDIR = '0'B;
 1445      %LSET LISTEXP = '1'B;
 1446      %LSET LISTCOM = '0'B;
 1447      %LSET LISTSUB = '1'B;
 1448      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1449      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1450          %LSET INIT = CHARTEXT( ' INIT');
 1451          %LSET ENIT = CHARTEXT( '');
 1452      %ELSE;
 1453          %LSET INIT = CHARTEXT( '/*');
 1454          %LSET ENIT = CHARTEXT( '*/');
 1455      %ENDIF;
 1456      %IF LENGTHC( 'FPTN') = 0;
 1457          %LSET LVL = LVL - 1;
 1458      %ELSE;
 1459          %IF LVL = 1;
 1460              DCL 1 FPTN STCLASS ALIGNED,
 1461          %ELSE;
 1462              %LVL FPTN,
 1463          %ENDIF;
 1464      %ENDIF;
 1465      %LSET LVL1 = LVL + 1;
 1466      %LSET LVL2 = LVL1 + 1;
 1467      %IF MODE_FEP;
 1468          %LSET LONG = CHARTEXT( '(32)');
 1469          %LSET L6 = 1;
 1470      %ELSE;
 1471          %LSET LONG = CHARTEXT( 'WORD');
 1472          %LSET L6 = 0;
 1473      %ENDIF;
 1474
 1475      /*K*    FNC - UBIN BYTE
 1476
 1477              FNC specifies the primitive being issued or reported.
 1478              Valid values are:
 1479                  %XSS_FNC_SEXPREQ#           S-EXPEDITED-DATA Request
 1480                  %XSS_FNC_SEXPIND#           S-EXPEDITED-DATA Indication
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     41   
 1481              The default is %XSS_FNC_SEXPREQ#.
 1482      */
 1483          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1484      /*K*    SCID - UBIN BYTE
 1485
 1486              SCID specifies the connection for which this primitive is being
 1487              issued or reported.  The default is 0.
 1488      */
 1489          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1490          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
 1491      /*K*    ERROR - VLP_ERRCODE
 1492
 1493              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1494              error that occurred while processing the issued primitive.  If no
 1495              error occurred, this item is zeroed.
 1496              The default is %XSS_RDONLYFPT#.
 1497      */
 1498          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1499          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 1500      /*K*    DATA.PTR$ - PTR
 1501
 1502              DATA.PTR$ specifies the address of a buffer containing Session
 1503              UserInformationField.  On a primitive Request, the buffer is provided
 1504              by the SS-User.  On a primitive Indication, the buffer is provided by
 1505              Session, and will be discarded on return to Session.
 1506              The default is ADDR( NIL).
 1507      */
 1508      /*K*    DATA.SIZE - UBIN
 1509
 1510              DATA.SIZE specifies the number of significant bytes in the buffer
 1511              containing Session UserInformationField.  The default is 0.
 1512      */
 1513      %LSET ITEM = CHARTEXT( 'DATA');
 1514      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 1515          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1516                      PTR$=DATAPTR$, SIZE=DATASIZE);
 1517      %ELSE;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     42   
 1518          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 1519          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 1520          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1521                      PTR$=%XPTR, SIZE=%XSIZ);
 1522      %ENDIF;
 1523      %MEND;
 1524
 1525      /*F*    NAME:   XSS$P_ABORT
 1526              DESCRIPTION:
 1527                  The XSS$P_ABORT macro defines the structure that the Session
 1528                  layer uses to report an S-P-ABORT Indication.
 1529      */
 1530      %MACRO XSS$P_ABORT(
 1531              FPTN=XSS$P_ABORT, LVL=1, LAST=";", STCLASS=BASED,
 1532              FNC( IND=%XSS_FNC_SPABIND#)=%XSS_FNC_SPABIND#,
 1533              SCID=0,
 1534              REASON=%XSS_RC_NONE#);
 1535      %LSET LISTDIR = '0'B;
 1536      %LSET LISTEXP = '1'B;
 1537      %LSET LISTCOM = '0'B;
 1538      %LSET LISTSUB = '1'B;
 1539      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1540      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1541          %LSET INIT = CHARTEXT( ' INIT');
 1542          %LSET ENIT = CHARTEXT( '');
 1543      %ELSE;
 1544          %LSET INIT = CHARTEXT( '/*');
 1545          %LSET ENIT = CHARTEXT( '*/');
 1546      %ENDIF;
 1547      %IF LENGTHC( 'FPTN') = 0;
 1548          %LSET LVL = LVL - 1;
 1549      %ELSE;
 1550          %IF LVL = 1;
 1551              DCL 1 FPTN STCLASS ALIGNED,
 1552          %ELSE;
 1553              %LVL FPTN,
 1554          %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     43   
 1555      %ENDIF;
 1556      %LSET LVL1 = LVL + 1;
 1557      %LSET LVL2 = LVL1 + 1;
 1558      %IF MODE_FEP;
 1559          %LSET LONG = CHARTEXT( '(32)');
 1560          %LSET L6 = 1;
 1561      %ELSE;
 1562          %LSET LONG = CHARTEXT( 'WORD');
 1563          %LSET L6 = 0;
 1564      %ENDIF;
 1565
 1566      /*K*    FNC - UBIN BYTE
 1567
 1568              FNC specifies the primitive being reported.
 1569              Valid values are:
 1570                  %XSS_FNC_SPABIND#           S-P-ABORT Indication
 1571              The default is %XSS_FNC_SPABIND#.
 1572      */
 1573          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1574      /*K*    SCID - UBIN BYTE
 1575
 1576              SCID specifies the connection for which this primitive is being
 1577              reported.  The default is 0.
 1578      */
 1579          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1580      /*K*    REASON - UBIN BYTE
 1581
 1582              REASON indicates ??? associated with the primitive being reported.
 1583              The default is 0.
 1584      */
 1585          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
 1586          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 1587      /*K*    ERROR - VLP_ERRCODE
 1588
 1589              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1590              error that occurred while processing the issued primitive.  If no
 1591              error occurred, this item is zeroed.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     44   
 1592              The default is %XSS_RDONLYFPT#.
 1593      */
 1594          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1595          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
 1596      %MEND;
 1597
 1598      /*F*    NAME:   XSS$P_EXCEPTION_REPORT
 1599              DESCRIPTION:
 1600                  The XSS$P_EXCEPTION_REPORT macro defines the structure that the
 1601                  Session layer uses to report an S-P-EXCEPTION-REPORT Indication.
 1602      */
 1603      %MACRO XSS$P_EXCEPTION_REPORT(
 1604              FPTN=XSS$P_EXCEPTION_REPORT, LVL=1, LAST=";", STCLASS=BASED,
 1605              FNC( IND=%XSS_FNC_SPERIND#)=%XSS_FNC_SPERIND#,
 1606              SCID=0,
 1607              REASON=%XSS_RC_NONE#);
 1608      %LSET LISTDIR = '0'B;
 1609      %LSET LISTEXP = '1'B;
 1610      %LSET LISTCOM = '0'B;
 1611      %LSET LISTSUB = '1'B;
 1612      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1613      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1614          %LSET INIT = CHARTEXT( ' INIT');
 1615          %LSET ENIT = CHARTEXT( '');
 1616      %ELSE;
 1617          %LSET INIT = CHARTEXT( '/*');
 1618          %LSET ENIT = CHARTEXT( '*/');
 1619      %ENDIF;
 1620      %IF LENGTHC( 'FPTN') = 0;
 1621          %LSET LVL = LVL - 1;
 1622      %ELSE;
 1623          %IF LVL = 1;
 1624              DCL 1 FPTN STCLASS ALIGNED,
 1625          %ELSE;
 1626              %LVL FPTN,
 1627          %ENDIF;
 1628      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     45   
 1629      %LSET LVL1 = LVL + 1;
 1630      %LSET LVL2 = LVL1 + 1;
 1631      %IF MODE_FEP;
 1632          %LSET LONG = CHARTEXT( '(32)');
 1633          %LSET L6 = 1;
 1634      %ELSE;
 1635          %LSET LONG = CHARTEXT( 'WORD');
 1636          %LSET L6 = 0;
 1637      %ENDIF;
 1638
 1639      /*K*    FNC - UBIN BYTE
 1640
 1641              FNC specifies the primitive being reported.
 1642              Valid values are:
 1643                  %XSS_FNC_SPERIND#           S-P-EXCEPTION-REPORT Indication
 1644              The default is %XSS_FNC_SPERIND#.
 1645      */
 1646          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1647      /*K*    SCID - UBIN BYTE
 1648
 1649              SCID specifies the connection for which this primitive is being
 1650              reported.  The default is 0.
 1651      */
 1652          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1653      /*K*    REASON - UBIN BYTE
 1654
 1655              REASON indicates ??? associated with the primitive being reported.
 1656              The default is 0.
 1657      */
 1658          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
 1659          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 1660      /*K*    ERROR - VLP_ERRCODE
 1661
 1662              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1663              error that occurred while processing the issued primitive.  If no
 1664              error occurred, this item is zeroed.
 1665              The default is %XSS_RDONLYFPT#.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     46   
 1666      */
 1667          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1668          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
 1669      %MEND;
 1670
 1671      /*F*    NAME:   XSS$RELEASE
 1672              DESCRIPTION:
 1673                  The XSS$RELEASE macro defines the structure that an
 1674                  SS-User uses to issue an S-RELEASE Request or
 1675                  Response, and that the Session layer uses to report an
 1676                  S-RELEASE Indication or Confirm.
 1677      */
 1678      %MACRO XSS$RELEASE(
 1679              FPTN=XSS$RELEASE, LVL=1, LAST=";", STCLASS=BASED,
 1680              FNC( REQ=%XSS_FNC_SRELREQ#,
 1681                   IND=%XSS_FNC_SRELIND#,
 1682                   RSP=%XSS_FNC_SRELRSP#,
 1683                   CNF=%XSS_FNC_SRELCNF#)=%XSS_FNC_NONE#,
 1684              SCID=0,
 1685                RESULT=%XSS_RSLT_SUCCESS#,
 1686              DATA=,
 1687              DATAPTR$="ADDR( NIL)",
 1688              DATASIZE=0);
 1689      %LSET LISTDIR = '0'B;
 1690      %LSET LISTEXP = '1'B;
 1691      %LSET LISTCOM = '0'B;
 1692      %LSET LISTSUB = '1'B;
 1693      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1694      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1695          %LSET INIT = CHARTEXT( ' INIT');
 1696          %LSET ENIT = CHARTEXT( '');
 1697      %ELSE;
 1698          %LSET INIT = CHARTEXT( '/*');
 1699          %LSET ENIT = CHARTEXT( '*/');
 1700      %ENDIF;
 1701      %IF LENGTHC( 'FPTN') = 0;
 1702          %LSET LVL = LVL - 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     47   
 1703      %ELSE;
 1704          %IF LVL = 1;
 1705              DCL 1 FPTN STCLASS ALIGNED,
 1706          %ELSE;
 1707              %LVL FPTN,
 1708          %ENDIF;
 1709      %ENDIF;
 1710      %LSET LVL1 = LVL + 1;
 1711      %LSET LVL2 = LVL1 + 1;
 1712      %IF MODE_FEP;
 1713          %LSET LONG = CHARTEXT( '(32)');
 1714          %LSET L6 = 1;
 1715      %ELSE;
 1716          %LSET LONG = CHARTEXT( 'WORD');
 1717          %LSET L6 = 0;
 1718      %ENDIF;
 1719
 1720      /*K*    FNC - UBIN BYTE
 1721
 1722              FNC specifies the primitive being issued or reported.
 1723              Valid values are:
 1724                  %XSS_FNC_SRELREQ#           S-RELEASE Request
 1725                  %XSS_FNC_SRELIND#           S-RELEASE Indication
 1726                  %XSS_FNC_SRELRSP#           S-RELEASE Response
 1727                  %XSS_FNC_SRELCNF#           S-RELEASE Confirm
 1728              The default is %XSS_FNC_NONE#.
 1729      */
 1730          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1731      /*K*    SCID - UBIN BYTE
 1732
 1733              SCID specifies the connection for which this primitive is being
 1734              issued or reported.  The default is 0.
 1735      */
 1736          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1737          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 1738      /*K*    RESULT - UBIN BYTE
 1739
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     48   
 1740              RESULT indicates whether the associated Session primitive was
 1741              successful.  A zero value indicates success; a nonzero value indicates
 1742              failure.  The default is %XSS_RSLT_SUCCESS#.
 1743      */
 1744          %LVL1 %CHARTEXT( 'RESULT') UBIN BYTE %INIT( RESULT)%ENIT CALIGNED,
 1745      /*K*    ERROR - VLP_ERRCODE
 1746
 1747              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1748              error that occurred while processing the issued primitive.  If no
 1749              error occurred, this item is zeroed.
 1750              The default is %XSS_RDONLYFPT#.
 1751      */
 1752          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1753          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 1754      /*K*    DATA.PTR$ - PTR
 1755
 1756              DATA.PTR$ specifies the address of a buffer containing Session
 1757              UserData.  On a primitive Request or Response, the buffer is provided
 1758              by the SS-User.  On a primitive Indication or Confirm, the buffer
 1759              is provided by Session, and will be discarded on return to Session.
 1760              The default is ADDR( NIL).
 1761      */
 1762      /*K*    DATA.SIZE - UBIN
 1763
 1764              DATA.SIZE specifies the number of significant bytes in the buffer
 1765              containing Session UserData.  The default is 0.
 1766      */
 1767      %LSET ITEM = CHARTEXT( 'DATA');
 1768      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 1769          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1770                      PTR$=DATAPTR$, SIZE=DATASIZE);
 1771      %ELSE;
 1772          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 1773          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 1774          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1775                      PTR$=%XPTR, SIZE=%XSIZ);
 1776      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     49   
 1777      %MEND;
 1778
 1779      /*F*    NAME:   XSS$RESYNCHRONIZE
 1780              DESCRIPTION:
 1781                  The XSS$RESYNCHRONIZE macro defines the structure that an
 1782                  SS-User uses to issue an S-RESYNCHRONIZE Request or
 1783                  Response, and that the Session layer uses to report an
 1784                  S-RESYNCHRONIZE Indication or Confirm.
 1785      */
 1786      %MACRO XSS$RESYNCHRONIZE(
 1787              FPTN=XSS$RESYNCHRONIZE, LVL=1, LAST=";", STCLASS=BASED,
 1788              FNC( REQ=%XSS_FNC_SRSXREQ#,
 1789                   IND=%XSS_FNC_SRSXIND#,
 1790                   RSP=%XSS_FNC_SRSXRSP#,
 1791                   CNF=%XSS_FNC_SRSXCNF#)=%XSS_FNC_NONE#,
 1792              SCID=0,
 1793              TYPE=%XSS_RT_NONE#,
 1794              TRTOKEN( NO='0'B, YES='1'B)='0'B,
 1795              MATOKEN( NO='0'B, YES='1'B)='0'B,
 1796              MITOKEN( NO='0'B, YES='1'B)='0'B,
 1797              DKTOKEN( NO='0'B, YES='1'B)='0'B,
 1798              DATA=,
 1799              DATAPTR$="ADDR( NIL)",
 1800              DATASIZE=0,
 1801              SERNUM=0);
 1802      %LSET LISTDIR = '0'B;
 1803      %LSET LISTEXP = '1'B;
 1804      %LSET LISTCOM = '0'B;
 1805      %LSET LISTSUB = '1'B;
 1806      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1807      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1808          %LSET INIT = CHARTEXT( ' INIT');
 1809          %LSET ENIT = CHARTEXT( '');
 1810      %ELSE;
 1811          %LSET INIT = CHARTEXT( '/*');
 1812          %LSET ENIT = CHARTEXT( '*/');
 1813      %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     50   
 1814      %IF LENGTHC( 'FPTN') = 0;
 1815          %LSET LVL = LVL - 1;
 1816      %ELSE;
 1817          %IF LVL = 1;
 1818              DCL 1 FPTN STCLASS ALIGNED,
 1819          %ELSE;
 1820              %LVL FPTN,
 1821          %ENDIF;
 1822      %ENDIF;
 1823      %LSET LVL1 = LVL + 1;
 1824      %LSET LVL2 = LVL1 + 1;
 1825      %IF MODE_FEP;
 1826          %LSET LONG = CHARTEXT( '(32)');
 1827          %LSET L6 = 1;
 1828      %ELSE;
 1829          %LSET LONG = CHARTEXT( 'WORD');
 1830          %LSET L6 = 0;
 1831      %ENDIF;
 1832
 1833      /*K*    FNC - UBIN BYTE
 1834
 1835              FNC specifies the primitive being issued or reported.
 1836              Valid values are:
 1837                  %XSS_FNC_SRSXREQ#           S-RESYNCHRONIZE Request
 1838                  %XSS_FNC_SRSXIND#           S-RESYNCHRONIZE Indication
 1839                  %XSS_FNC_SRSXRSP#           S-RESYNCHRONIZE Response
 1840                  %XSS_FNC_SRSXCNF#           S-RESYNCHRONIZE Confirm
 1841              The default is %XSS_FNC_NONE#.
 1842      */
 1843          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1844      /*K*    SCID - UBIN BYTE
 1845
 1846              SCID specifies the connection for which this primitive is being
 1847              issued or reported.  The default is 0.
 1848      */
 1849          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1850      /*K*    TYPE - UBIN BYTE
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     51   
 1851
 1852              TYPE specifies or indicates the Session ResynchronizeType associated
 1853              with the primitive being issued or reported.
 1854              Valid values are:
 1855                      %XSS_RT_ABANDON#        Abandon
 1856                      %XSS_RT_RESTART#        Restart
 1857                      %XSS_RT_SET#            Set
 1858              The default is %XSS_RT_NONE#.
 1859      */
 1860          %LVL1 %CHARTEXT( 'TYPE') UBIN BYTE %INIT( TYPE)%ENIT CALIGNED,
 1861      /*K*    TOKENS - XSS$$TOKENS
 1862
 1863              TOKENS specifies or indicates the Session TokenSettingItem associated
 1864              with the primitive being issued or reported.  Each token may be
 1865              positioned at one of the following endpoints of the connection:
 1866                      %XSS_TSI_ISIDE#         Initiator's side
 1867                      %XSS_TSI_ASIDE#         Acceptor's side
 1868                      %XSS_TSI_ACHOICE#       Acceptor-chosen side
 1869                      %XSS_TSI_NONE#          Token not relevant
 1870              The items of TOKENS, and their corresponding Tokens, are as follows:
 1871                      TR              Release Token
 1872                      MA              Major/Activity Token
 1873                      MI              Synchronize-Minor Token
 1874                      DK              Data Token
 1875              The default for each item of TOKENS is %XSS_TSI_NONE#.
 1876      */
 1877          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 1878              TRTOKEN=TRTOKEN, MATOKEN=MATOKEN, MITOKEN=MITOKEN, DKTOKEN=DKTOKEN);
 1879      /*K*    ERROR - VLP_ERRCODE
 1880
 1881              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 1882              error that occurred while processing the issued primitive.  If no
 1883              error occurred, this item is zeroed.
 1884              The default is %XSS_RDONLYFPT#.
 1885      */
 1886          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 1887          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     52   
 1888      /*K*    DATA.PTR$ - PTR
 1889
 1890              DATA.PTR$ specifies the address of a buffer containing Session
 1891              UserData.  On a primitive Request or Response, the buffer is provided
 1892              by the SS-User.  On a primitive Indication or Confirm, the buffer
 1893              is provided by Session, and will be discarded on return to Session.
 1894              The default is ADDR( NIL).
 1895      */
 1896      /*K*    DATA.SIZE - UBIN
 1897
 1898              DATA.SIZE specifies the number of significant bytes in the buffer
 1899              containing Session UserData.  The default is 0.
 1900      */
 1901      %LSET ITEM = CHARTEXT( 'DATA');
 1902      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 1903          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 1904                      PTR$=DATAPTR$, SIZE=DATASIZE);
 1905      %ELSE;
 1906          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 1907          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 1908          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 1909                      PTR$=%XPTR, SIZE=%XSIZ);
 1910      %ENDIF;
 1911      /*K*    SERNUM - UBIN
 1912
 1913              SERNUM specifies the Session SerialNumber associated with the
 1914              primitive being issued or reported.  The default is 0.
 1915      */
 1916          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED LAST
 1917      %MEND;
 1918
 1919      /*F*    NAME:   XSS$SYNC_MAJOR
 1920              DESCRIPTION:
 1921                  The XSS$SYNC_MAJOR macro defines the structure that an
 1922                  SS-User uses to issue an S-SYNC-MAJOR Request or
 1923                  Response, and that the Session layer uses to report an
 1924                  S-SYNC-MAJOR Indication or Confirm.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     53   
 1925      */
 1926      %MACRO XSS$SYNC_MAJOR(
 1927              FPTN=XSS$SYNC_MAJOR, LVL=1, LAST=";", STCLASS=BASED,
 1928              FNC( REQ=%XSS_FNC_SSMAREQ#,
 1929                   IND=%XSS_FNC_SSMAIND#,
 1930                   RSP=%XSS_FNC_SSMARSP#,
 1931                   CNF=%XSS_FNC_SSMACNF#)=%XSS_FNC_NONE#,
 1932              SCID=0,
 1933              TYPE=%XSS_STYP_NOTENDACT#,
 1934              DATA=,
 1935              DATAPTR$="ADDR( NIL)",
 1936              DATASIZE=0,
 1937              SERNUM=0);
 1938      %LSET LISTDIR = '0'B;
 1939      %LSET LISTEXP = '1'B;
 1940      %LSET LISTCOM = '0'B;
 1941      %LSET LISTSUB = '1'B;
 1942      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 1943      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 1944          %LSET INIT = CHARTEXT( ' INIT');
 1945          %LSET ENIT = CHARTEXT( '');
 1946      %ELSE;
 1947          %LSET INIT = CHARTEXT( '/*');
 1948          %LSET ENIT = CHARTEXT( '*/');
 1949      %ENDIF;
 1950      %IF LENGTHC( 'FPTN') = 0;
 1951          %LSET LVL = LVL - 1;
 1952      %ELSE;
 1953          %IF LVL = 1;
 1954              DCL 1 FPTN STCLASS ALIGNED,
 1955          %ELSE;
 1956              %LVL FPTN,
 1957          %ENDIF;
 1958      %ENDIF;
 1959      %LSET LVL1 = LVL + 1;
 1960      %LSET LVL2 = LVL1 + 1;
 1961      %IF MODE_FEP;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     54   
 1962          %LSET LONG = CHARTEXT( '(32)');
 1963          %LSET L6 = 1;
 1964      %ELSE;
 1965          %LSET LONG = CHARTEXT( 'WORD');
 1966          %LSET L6 = 0;
 1967      %ENDIF;
 1968
 1969      /*K*    FNC - UBIN BYTE
 1970
 1971              FNC specifies the primitive being issued or reported.
 1972              Valid values are:
 1973                  %XSS_FNC_SSMAREQ#           S-SYNC-MAJOR Request
 1974                  %XSS_FNC_SSMAIND#           S-SYNC-MAJOR Indication
 1975                  %XSS_FNC_SSMARSP#           S-SYNC-MAJOR Response
 1976                  %XSS_FNC_SSMACNF#           S-SYNC-MAJOR Confirm
 1977              The default is %XSS_FNC_NONE#.
 1978      */
 1979          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 1980      /*K*    SCID - UBIN BYTE
 1981
 1982              SCID specifies the connection for which this primitive is being
 1983              issued or reported.  The default is 0.
 1984      */
 1985          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 1986      /*K*    TYPE - UBIN BYTE
 1987
 1988              TYPE specifies or indicates the Session SyncTypeItem associated with
 1989              the primitive being issued or reported.
 1990              Valid values are:
 1991                      %XSS_STYP_NOTENDACT#    Not at end of activity
 1992              The default is %XSS_STYP_NOTENDACT#.
 1993      */
 1994          %LVL1 %CHARTEXT( 'TYPE') UBIN BYTE %INIT( TYPE)%ENIT CALIGNED,
 1995          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 1996      /*K*    ERROR - VLP_ERRCODE
 1997
 1998              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     55   
 1999              error that occurred while processing the issued primitive.  If no
 2000              error occurred, this item is zeroed.
 2001              The default is %XSS_RDONLYFPT#.
 2002      */
 2003          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2004          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2005      /*K*    DATA.PTR$ - PTR
 2006
 2007              DATA.PTR$ specifies the address of a buffer containing Session
 2008              UserData.  On a primitive Request or Response, the buffer is provided
 2009              by the SS-User.  On a primitive Indication or Confirm, the buffer
 2010              is provided by Session, and will be discarded on return to Session.
 2011              The default is ADDR( NIL).
 2012      */
 2013      /*K*    DATA.SIZE - UBIN
 2014
 2015              DATA.SIZE specifies the number of significant bytes in the buffer
 2016              containing Session UserData.  The default is 0.
 2017      */
 2018      %LSET ITEM = CHARTEXT( 'DATA');
 2019      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2020          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 2021                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2022      %ELSE;
 2023          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2024          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2025          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2026                      PTR$=%XPTR, SIZE=%XSIZ);
 2027      %ENDIF;
 2028      /*K*    SERNUM - UBIN
 2029
 2030              SERNUM specifies the Session SerialNumber associated with the
 2031              primitive being issued or reported.  The default is 0.
 2032      */
 2033          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED LAST
 2034      %MEND;
 2035
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     56   
 2036      /*F*    NAME:   XSS$SYNC_MINOR
 2037              DESCRIPTION:
 2038                  The XSS$SYNC_MINOR macro defines the structure that an
 2039                  SS-User uses to issue an S-SYNC-MINOR Request or
 2040                  Response, and that the Session layer uses to report an
 2041                  S-SYNC-MINOR Indication or Confirm.
 2042      */
 2043      %MACRO XSS$SYNC_MINOR(
 2044              FPTN=XSS$SYNC_MINOR, LVL=1, LAST=";", STCLASS=BASED,
 2045              FNC( REQ=%XSS_FNC_SSMIREQ#,
 2046                   IND=%XSS_FNC_SSMIIND#,
 2047                   RSP=%XSS_FNC_SSMIRSP#,
 2048                   CNF=%XSS_FNC_SSMICNF#)=%XSS_FNC_NONE#,
 2049              SCID=0,
 2050              TYPE=%XSS_STYP_NOEXPCONF#,
 2051              DATA=,
 2052              DATAPTR$="ADDR( NIL)",
 2053              DATASIZE=0,
 2054              SERNUM=0);
 2055      %LSET LISTDIR = '0'B;
 2056      %LSET LISTEXP = '1'B;
 2057      %LSET LISTCOM = '0'B;
 2058      %LSET LISTSUB = '1'B;
 2059      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2060      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2061          %LSET INIT = CHARTEXT( ' INIT');
 2062          %LSET ENIT = CHARTEXT( '');
 2063      %ELSE;
 2064          %LSET INIT = CHARTEXT( '/*');
 2065          %LSET ENIT = CHARTEXT( '*/');
 2066      %ENDIF;
 2067      %IF LENGTHC( 'FPTN') = 0;
 2068          %LSET LVL = LVL - 1;
 2069      %ELSE;
 2070          %IF LVL = 1;
 2071              DCL 1 FPTN STCLASS ALIGNED,
 2072          %ELSE;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     57   
 2073              %LVL FPTN,
 2074          %ENDIF;
 2075      %ENDIF;
 2076      %LSET LVL1 = LVL + 1;
 2077      %LSET LVL2 = LVL1 + 1;
 2078      %IF MODE_FEP;
 2079          %LSET LONG = CHARTEXT( '(32)');
 2080          %LSET L6 = 1;
 2081      %ELSE;
 2082          %LSET LONG = CHARTEXT( 'WORD');
 2083          %LSET L6 = 0;
 2084      %ENDIF;
 2085
 2086      /*K*    FNC - UBIN BYTE
 2087
 2088              FNC specifies the primitive being issued or reported.
 2089              Valid values are:
 2090                  %XSS_FNC_SSMIREQ#           S-SYNC-MINOR Request
 2091                  %XSS_FNC_SSMIIND#           S-SYNC-MINOR Indication
 2092                  %XSS_FNC_SSMIRSP#           S-SYNC-MINOR Response
 2093                  %XSS_FNC_SSMICNF#           S-SYNC-MINOR Confirm
 2094              The default is %XSS_FNC_NONE#.
 2095      */
 2096          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2097      /*K*    SCID - UBIN BYTE
 2098
 2099              SCID specifies the connection for which this primitive is being
 2100              issued or reported.  The default is 0.
 2101      */
 2102          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2103      /*K*    TYPE - UBIN BYTE
 2104
 2105              TYPE specifies or indicates the Session SyncTypeItem associated with
 2106              the primitive being issued or reported.
 2107              Valid values are:
 2108                      %XSS_STYP_NOEXPCONF#    No explicit confirmation required
 2109              The default is %XSS_STYP_NOEXPCONF#.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     58   
 2110      */
 2111          %LVL1 %CHARTEXT( 'TYPE') UBIN BYTE %INIT( TYPE)%ENIT CALIGNED,
 2112          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 2113      /*K*    ERROR - VLP_ERRCODE
 2114
 2115              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2116              error that occurred while processing the issued primitive.  If no
 2117              error occurred, this item is zeroed.
 2118              The default is %XSS_RDONLYFPT#.
 2119      */
 2120          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2121          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2122      /*K*    DATA.PTR$ - PTR
 2123
 2124              DATA.PTR$ specifies the address of a buffer containing Session
 2125              UserData.  On a primitive Request or Response, the buffer is provided
 2126              by the SS-User.  On a primitive Indication or Confirm, the buffer
 2127              is provided by Session, and will be discarded on return to Session.
 2128              The default is ADDR( NIL).
 2129      */
 2130      /*K*    DATA.SIZE - UBIN
 2131
 2132              DATA.SIZE specifies the number of significant bytes in the buffer
 2133              containing Session UserData.  The default is 0.
 2134      */
 2135      %LSET ITEM = CHARTEXT( 'DATA');
 2136      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2137          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 2138                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2139      %ELSE;
 2140          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2141          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2142          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2143                      PTR$=%XPTR, SIZE=%XSIZ);
 2144      %ENDIF;
 2145      /*K*    SERNUM - UBIN
 2146
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     59   
 2147              SERNUM specifies the Session SerialNumber associated with the
 2148              primitive being issued or reported.  The default is 0.
 2149      */
 2150          %LVL1 %CHARTEXT( 'SERNUM') UBIN %LONG %INIT( SERNUM)%ENIT ALIGNED LAST
 2151      %MEND;
 2152
 2153      /*F*    NAME:   XSS$TOKEN_GIVE
 2154              DESCRIPTION:
 2155                  The XSS$TOKEN_GIVE macro defines the structure that an
 2156                  SS-User uses to issue an S-TOKEN-GIVE Request, and that
 2157                  the Session layer uses to report an S-TOKEN-GIVE Indication.
 2158      */
 2159      %MACRO XSS$TOKEN_GIVE(
 2160              FPTN=XSS$TOKEN_GIVE, LVL=1, LAST=";", STCLASS=BASED,
 2161              FNC( REQ=%XSS_FNC_STKGREQ#,
 2162                   IND=%XSS_FNC_STKGIND#)=%XSS_FNC_STKGREQ#,
 2163              SCID=0,
 2164              TRTOKEN( NO='0'B, YES='1'B)='0'B,
 2165              MATOKEN( NO='0'B, YES='1'B)='0'B,
 2166              MITOKEN( NO='0'B, YES='1'B)='0'B,
 2167              DKTOKEN( NO='0'B, YES='1'B)='0'B);
 2168      %LSET LISTDIR = '0'B;
 2169      %LSET LISTEXP = '1'B;
 2170      %LSET LISTCOM = '0'B;
 2171      %LSET LISTSUB = '1'B;
 2172      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2173      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2174          %LSET INIT = CHARTEXT( ' INIT');
 2175          %LSET ENIT = CHARTEXT( '');
 2176      %ELSE;
 2177          %LSET INIT = CHARTEXT( '/*');
 2178          %LSET ENIT = CHARTEXT( '*/');
 2179      %ENDIF;
 2180      %IF LENGTHC( 'FPTN') = 0;
 2181          %LSET LVL = LVL - 1;
 2182      %ELSE;
 2183          %IF LVL = 1;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     60   
 2184              DCL 1 FPTN STCLASS ALIGNED,
 2185          %ELSE;
 2186              %LVL FPTN,
 2187          %ENDIF;
 2188      %ENDIF;
 2189      %LSET LVL1 = LVL + 1;
 2190      %LSET LVL2 = LVL1 + 1;
 2191      %IF MODE_FEP;
 2192          %LSET LONG = CHARTEXT( '(32)');
 2193          %LSET L6 = 1;
 2194      %ELSE;
 2195          %LSET LONG = CHARTEXT( 'WORD');
 2196          %LSET L6 = 0;
 2197      %ENDIF;
 2198
 2199      /*K*    FNC - UBIN BYTE
 2200
 2201              FNC specifies the primitive being issued or reported.
 2202              Valid values are:
 2203                  %XSS_FNC_STKGREQ#           S-TOKEN-GIVE Request
 2204                  %XSS_FNC_STKGIND#           S-TOKEN-GIVE Indication
 2205              The default is %XSS_FNC_STKGREQ#.
 2206      */
 2207          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2208      /*K*    SCID - UBIN BYTE
 2209
 2210              SCID specifies the connection for which this primitive is being
 2211              issued or reported.  The default is 0.
 2212      */
 2213          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2214          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 2215      /*K*    TOKENS - XSS$$TOKENS
 2216
 2217              TOKENS specifies or indicates the Session TokenItem associated with
 2218              the primitive being issued or reported.  The items of TOKENS, and
 2219              their corresponding Tokens, are as follows:
 2220                      TR              Release Token
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     61   
 2221                      MA              Major/Activity Token
 2222                      MI              Synchronize-Minor Token
 2223                      DK              Data Token
 2224              The default for each item of TOKENS is '0'B.
 2225      */
 2226          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 2227              TRTOKEN=TRTOKEN, MATOKEN=MATOKEN, MITOKEN=MITOKEN, DKTOKEN=DKTOKEN);
 2228      /*K*    ERROR - VLP_ERRCODE
 2229
 2230              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2231              error that occurred while processing the issued primitive.  If no
 2232              error occurred, this item is zeroed.
 2233              The default is %XSS_RDONLYFPT#.
 2234      */
 2235          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2236          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=LAST, STCLASS="REDEF ERRDEF");
 2237      %MEND;
 2238
 2239      /*F*    NAME:   XSS$TOKEN_PLEASE
 2240              DESCRIPTION:
 2241                  The XSS$TOKEN_PLEASE macro defines the structure that an
 2242                  SS-User uses to issue an S-TOKEN-PLEASE Request, and that
 2243                  the Session layer uses to report an S-TOKEN-PLEASE Indication.
 2244      */
 2245      %MACRO XSS$TOKEN_PLEASE(
 2246              FPTN=XSS$TOKEN_PLEASE, LVL=1, LAST=";", STCLASS=BASED,
 2247              FNC( REQ=%XSS_FNC_STKPREQ#,
 2248                   IND=%XSS_FNC_STKPIND#)=%XSS_FNC_STKPREQ#,
 2249              SCID=0,
 2250              TRTOKEN( NO='0'B, YES='1'B)='0'B,
 2251              MATOKEN( NO='0'B, YES='1'B)='0'B,
 2252              MITOKEN( NO='0'B, YES='1'B)='0'B,
 2253              DKTOKEN( NO='0'B, YES='1'B)='0'B,
 2254              DATA=,
 2255              DATAPTR$="ADDR( NIL)",
 2256              DATASIZE=0);
 2257      %LSET LISTDIR = '0'B;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     62   
 2258      %LSET LISTEXP = '1'B;
 2259      %LSET LISTCOM = '0'B;
 2260      %LSET LISTSUB = '1'B;
 2261      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2262      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2263          %LSET INIT = CHARTEXT( ' INIT');
 2264          %LSET ENIT = CHARTEXT( '');
 2265      %ELSE;
 2266          %LSET INIT = CHARTEXT( '/*');
 2267          %LSET ENIT = CHARTEXT( '*/');
 2268      %ENDIF;
 2269      %IF LENGTHC( 'FPTN') = 0;
 2270          %LSET LVL = LVL - 1;
 2271      %ELSE;
 2272          %IF LVL = 1;
 2273              DCL 1 FPTN STCLASS ALIGNED,
 2274          %ELSE;
 2275              %LVL FPTN,
 2276          %ENDIF;
 2277      %ENDIF;
 2278      %LSET LVL1 = LVL + 1;
 2279      %LSET LVL2 = LVL1 + 1;
 2280      %IF MODE_FEP;
 2281          %LSET LONG = CHARTEXT( '(32)');
 2282          %LSET L6 = 1;
 2283      %ELSE;
 2284          %LSET LONG = CHARTEXT( 'WORD');
 2285          %LSET L6 = 0;
 2286      %ENDIF;
 2287
 2288      /*K*    FNC - UBIN BYTE
 2289
 2290              FNC specifies the primitive being issued or reported.
 2291              Valid values are:
 2292                  %XSS_FNC_STKPREQ#           S-TOKEN-PLEASE Request
 2293                  %XSS_FNC_STKPIND#           S-TOKEN-PLEASE Indication
 2294              The default is %XSS_FNC_STKPREQ#.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     63   
 2295      */
 2296          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2297      /*K*    SCID - UBIN BYTE
 2298
 2299              SCID specifies the connection for which this primitive is being
 2300              issued or reported.  The default is 0.
 2301      */
 2302          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2303          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 2304      /*K*    TOKENS - XSS$$TOKENS
 2305
 2306              TOKENS specifies or indicates the Session TokenItem associated with
 2307              the primitive being issued or reported.  The items of TOKENS, and
 2308              their corresponding Tokens, are as follows:
 2309                      TR              Release Token
 2310                      MA              Major/Activity Token
 2311                      MI              Synchronize-Minor Token
 2312                      DK              Data Token
 2313              The default for each item of TOKENS is '0'B.
 2314      */
 2315          %XSS$$TOKENS( NAME=TOKENS, LVL=%LVL1, LAST=",", STCLASS=STCLASS,
 2316              TRTOKEN=TRTOKEN, MATOKEN=MATOKEN, MITOKEN=MITOKEN, DKTOKEN=DKTOKEN);
 2317      /*K*    ERROR - VLP_ERRCODE
 2318
 2319              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2320              error that occurred while processing the issued primitive.  If no
 2321              error occurred, this item is zeroed.
 2322              The default is %XSS_RDONLYFPT#.
 2323      */
 2324          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2325          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2326      /*K*    DATA.PTR$ - PTR
 2327
 2328              DATA.PTR$ specifies the address of a buffer containing Session
 2329              UserData.  On a primitive Request, the buffer is provided by the
 2330              SS-User.  On a primitive Indication, the buffer is provided by
 2331              Session, and will be discarded on return to Session.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     64   
 2332              The default is ADDR( NIL).
 2333      */
 2334      /*K*    DATA.SIZE - UBIN
 2335
 2336              DATA.SIZE specifies the number of significant bytes in the buffer
 2337              containing Session UserData.  The default is 0.
 2338      */
 2339      %LSET ITEM = CHARTEXT( 'DATA');
 2340      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2341          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2342                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2343      %ELSE;
 2344          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2345          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2346          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2347                      PTR$=%XPTR, SIZE=%XSIZ);
 2348      %ENDIF;
 2349      %MEND;
 2350
 2351      /*F*    NAME:   XSS$TYPED_DATA
 2352              DESCRIPTION:
 2353                  The XSS$TYPED_DATA macro defines the structure that an
 2354                  SS-User uses to issue an S-TYPED-DATA Request, and that
 2355                  the Session layer uses to report an S-TYPED-DATA Indication.
 2356      */
 2357      %MACRO XSS$TYPED_DATA(
 2358              FPTN=XSS$TYPED_DATA, LVL=1, LAST=";", STCLASS=BASED,
 2359              FNC( REQ=%XSS_FNC_STYDREQ#,
 2360                   IND=%XSS_FNC_STYDIND#)=%XSS_FNC_STYDREQ#,
 2361              SCID=0,
 2362              DATA=,
 2363              DATAPTR$="ADDR( NIL)",
 2364              DATASIZE=0);
 2365      %LSET LISTDIR = '0'B;
 2366      %LSET LISTEXP = '1'B;
 2367      %LSET LISTCOM = '0'B;
 2368      %LSET LISTSUB = '1'B;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     65   
 2369      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2370      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2371          %LSET INIT = CHARTEXT( ' INIT');
 2372          %LSET ENIT = CHARTEXT( '');
 2373      %ELSE;
 2374          %LSET INIT = CHARTEXT( '/*');
 2375          %LSET ENIT = CHARTEXT( '*/');
 2376      %ENDIF;
 2377      %IF LENGTHC( 'FPTN') = 0;
 2378          %LSET LVL = LVL - 1;
 2379      %ELSE;
 2380          %IF LVL = 1;
 2381              DCL 1 FPTN STCLASS ALIGNED,
 2382          %ELSE;
 2383              %LVL FPTN,
 2384          %ENDIF;
 2385      %ENDIF;
 2386      %LSET LVL1 = LVL + 1;
 2387      %LSET LVL2 = LVL1 + 1;
 2388      %IF MODE_FEP;
 2389          %LSET LONG = CHARTEXT( '(32)');
 2390          %LSET L6 = 1;
 2391      %ELSE;
 2392          %LSET LONG = CHARTEXT( 'WORD');
 2393          %LSET L6 = 0;
 2394      %ENDIF;
 2395
 2396      /*K*    FNC - UBIN BYTE
 2397
 2398              FNC specifies the primitive being issued or reported.
 2399              Valid values are:
 2400                  %XSS_FNC_STYDREQ#           S-TYPED-DATA Request
 2401                  %XSS_FNC_STYDIND#           S-TYPED-DATA Indication
 2402              The default is %XSS_FNC_STYDREQ#.
 2403      */
 2404          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2405      /*K*    SCID - UBIN BYTE
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     66   
 2406
 2407              SCID specifies the connection for which this primitive is being
 2408              issued or reported.  The default is 0.
 2409      */
 2410          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2411          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
 2412      /*K*    ERROR - VLP_ERRCODE
 2413
 2414              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2415              error that occurred while processing the issued primitive.  If no
 2416              error occurred, this item is zeroed.
 2417              The default is %XSS_RDONLYFPT#.
 2418      */
 2419          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2420          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2421      /*K*    DATA.PTR$ - PTR
 2422
 2423              DATA.PTR$ specifies the address of a buffer containing Session
 2424              UserData.  On a primitive Request, the buffer is provided by the
 2425              SS-User.  On a primitive Indication, the buffer is provided by
 2426              Session, and will be discarded on return to Session.
 2427              The default is ADDR( NIL).
 2428      */
 2429      /*K*    DATA.SIZE - UBIN
 2430
 2431              DATA.SIZE specifies the number of significant bytes in the buffer
 2432              containing Session UserData.  The default is 0.
 2433      */
 2434      %LSET ITEM = CHARTEXT( 'DATA');
 2435      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2436          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2437                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2438      %ELSE;
 2439          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2440          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2441          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2442                      PTR$=%XPTR, SIZE=%XSIZ);
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     67   
 2443      %ENDIF;
 2444      %MEND;
 2445
 2446      /*F*    NAME:   XSS$U_ABORT
 2447              DESCRIPTION:
 2448                  The XSS$U_ABORT macro defines the structure that an
 2449                  SS-User uses to issue an S-U-ABORT Request, and that
 2450                  the Session layer uses to report an S-U-ABORT Indication.
 2451      */
 2452      %MACRO XSS$U_ABORT(
 2453              FPTN=XSS$U_ABORT, LVL=1, LAST=";", STCLASS=BASED,
 2454              FNC( REQ=%XSS_FNC_SUABREQ#,
 2455                   IND=%XSS_FNC_SUABIND#)=%XSS_FNC_SUABREQ#,
 2456              SCID=0,
 2457              DATA=,
 2458              DATAPTR$="ADDR( NIL)",
 2459              DATASIZE=0);
 2460      %LSET LISTDIR = '0'B;
 2461      %LSET LISTEXP = '1'B;
 2462      %LSET LISTCOM = '0'B;
 2463      %LSET LISTSUB = '1'B;
 2464      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2465      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2466          %LSET INIT = CHARTEXT( ' INIT');
 2467          %LSET ENIT = CHARTEXT( '');
 2468      %ELSE;
 2469          %LSET INIT = CHARTEXT( '/*');
 2470          %LSET ENIT = CHARTEXT( '*/');
 2471      %ENDIF;
 2472      %IF LENGTHC( 'FPTN') = 0;
 2473          %LSET LVL = LVL - 1;
 2474      %ELSE;
 2475          %IF LVL = 1;
 2476              DCL 1 FPTN STCLASS ALIGNED,
 2477          %ELSE;
 2478              %LVL FPTN,
 2479          %ENDIF;
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     68   
 2480      %ENDIF;
 2481      %LSET LVL1 = LVL + 1;
 2482      %LSET LVL2 = LVL1 + 1;
 2483      %IF MODE_FEP;
 2484          %LSET LONG = CHARTEXT( '(32)');
 2485          %LSET L6 = 1;
 2486      %ELSE;
 2487          %LSET LONG = CHARTEXT( 'WORD');
 2488          %LSET L6 = 0;
 2489      %ENDIF;
 2490
 2491      /*K*    FNC - UBIN BYTE
 2492
 2493              FNC specifies the primitive being issued or reported.
 2494              Valid values are:
 2495                  %XSS_FNC_SUABREQ#           S-U-ABORT Request
 2496                  %XSS_FNC_SUABIND#           S-U-ABORT Indication
 2497              The default is %XSS_FNC_SUABREQ#.
 2498      */
 2499          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2500      /*K*    SCID - UBIN BYTE
 2501
 2502              SCID specifies the connection for which this primitive is being
 2503              issued or reported.  The default is 0.
 2504      */
 2505          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2506          %LVL1 %CHARTEXT( '*(0:1)') UBIN BYTE %INIT( 0, 0)%ENIT CALIGNED,
 2507      /*K*    ERROR - VLP_ERRCODE
 2508
 2509              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2510              error that occurred while processing the issued primitive.  If no
 2511              error occurred, this item is zeroed.
 2512              The default is %XSS_RDONLYFPT#.
 2513      */
 2514          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2515          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2516      /*K*    DATA.PTR$ - PTR
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     69   
 2517
 2518              DATA.PTR$ specifies the address of a buffer containing Session
 2519              UserData.  On a primitive Request, the buffer is provided by the
 2520              SS-User.  On a primitive Indication, the buffer is provided by
 2521              Session, and will be discarded on return to Session.
 2522              The default is ADDR( NIL).
 2523      */
 2524      /*K*    DATA.SIZE - UBIN
 2525
 2526              DATA.SIZE specifies the number of significant bytes in the buffer
 2527              containing Session UserData.  The default is 0.
 2528      */
 2529      %LSET ITEM = CHARTEXT( 'DATA');
 2530      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2531          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2532                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2533      %ELSE;
 2534          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2535          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2536          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2537                      PTR$=%XPTR, SIZE=%XSIZ);
 2538      %ENDIF;
 2539      %MEND;
 2540
 2541      /*F*    NAME:   XSS$U_EXCEPTION_REPORT
 2542              DESCRIPTION:
 2543                  The XSS$U_EXCEPTION_REPORT macro defines the structure that an
 2544                  SS-User uses to issue an S-U-EXCEPTION-REPORT Request, and
 2545                  that the Session layer uses to report an S-U-EXCEPTION-REPORT
 2546                  Indication.
 2547      */
 2548      %MACRO XSS$U_EXCEPTION_REPORT(
 2549              FPTN=XSS$U_EXCEPTION_REPORT, LVL=1, LAST=";", STCLASS=BASED,
 2550              FNC( REQ=%XSS_FNC_SUERREQ#,
 2551                   IND=%XSS_FNC_SUERIND#)=%XSS_FNC_SUERREQ#,
 2552              SCID=0,
 2553              REASON=%XSS_RC_NONE#,
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     70   
 2554              DATA=,
 2555              DATAPTR$="ADDR( NIL)",
 2556              DATASIZE=0);
 2557      %LSET LISTDIR = '0'B;
 2558      %LSET LISTEXP = '1'B;
 2559      %LSET LISTCOM = '0'B;
 2560      %LSET LISTSUB = '1'B;
 2561      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
 2562      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
 2563          %LSET INIT = CHARTEXT( ' INIT');
 2564          %LSET ENIT = CHARTEXT( '');
 2565      %ELSE;
 2566          %LSET INIT = CHARTEXT( '/*');
 2567          %LSET ENIT = CHARTEXT( '*/');
 2568      %ENDIF;
 2569      %IF LENGTHC( 'FPTN') = 0;
 2570          %LSET LVL = LVL - 1;
 2571      %ELSE;
 2572          %IF LVL = 1;
 2573              DCL 1 FPTN STCLASS ALIGNED,
 2574          %ELSE;
 2575              %LVL FPTN,
 2576          %ENDIF;
 2577      %ENDIF;
 2578      %LSET LVL1 = LVL + 1;
 2579      %LSET LVL2 = LVL1 + 1;
 2580      %IF MODE_FEP;
 2581          %LSET LONG = CHARTEXT( '(32)');
 2582          %LSET L6 = 1;
 2583      %ELSE;
 2584          %LSET LONG = CHARTEXT( 'WORD');
 2585          %LSET L6 = 0;
 2586      %ENDIF;
 2587
 2588      /*K*    FNC - UBIN BYTE
 2589
 2590              FNC specifies the primitive being issued or reported.
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     71   
 2591              Valid values are:
 2592                  %XSS_FNC_SUERREQ#           S-U-EXCEPTION-REPORT Request
 2593                  %XSS_FNC_SUERIND#           S-U-EXCEPTION-REPORT Indication
 2594              The default is %XSS_FNC_SUERREQ#.
 2595      */
 2596          %LVL1 %CHARTEXT( 'FNC') UBIN BYTE %INIT( FNC)%ENIT CALIGNED,
 2597      /*K*    SCID - UBIN BYTE
 2598
 2599              SCID specifies the connection for which this primitive is being
 2600              issued or reported.  The default is 0.
 2601      */
 2602          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( SCID)%ENIT CALIGNED,
 2603      /*K*    REASON - UBIN BYTE
 2604
 2605              REASON specifies or indicates ??? associated with the primitive
 2606              being issued or reported.  The default is 0.
 2607      */
 2608          %LVL1 %CHARTEXT( 'REASON') UBIN BYTE %INIT( REASON)%ENIT CALIGNED,
 2609          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
 2610      /*K*    ERROR - VLP_ERRCODE
 2611
 2612              ERROR indicates, on ALTRETURN from XSS$SESSION, the particular
 2613              error that occurred while processing the issued primitive.  If no
 2614              error occurred, this item is zeroed.
 2615              The default is %XSS_RDONLYFPT#.
 2616      */
 2617          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSS_RDONLYFPT#)%ENIT ALIGNED,
 2618          %XSS$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
 2619      /*K*    DATA.PTR$ - PTR
 2620
 2621              DATA.PTR$ specifies the address of a buffer containing Session
 2622              ReflectParameterValues.  On a primitive Request, the buffer is
 2623              provided by the SS-User.  On a primitive Indication, the buffer is
 2624              provided by Session, and will be discarded on return to Session.
 2625              The default is ADDR( NIL).
 2626      */
 2627      /*K*    DATA.SIZE - UBIN
10:41 OCT 01 '97 XSS_SESSION_M.:XSA1SI                                     72   
 2628
 2629              DATA.SIZE specifies the number of significant bytes in the buffer
 2630              containing Session ReflectParameterValues.  The default is 0.
 2631      */
 2632      %LSET ITEM = CHARTEXT( 'DATA');
 2633      %IF 0 = LENGTHC( TEXTCHAR(DATA));
 2634          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2635                      PTR$=DATAPTR$, SIZE=DATASIZE);
 2636      %ELSE;
 2637          %LSET XPTR = CHARTEXT( CONCAT( 'ADDR(', TEXTCHAR( DATA), ')'));
 2638          %LSET XSIZ = CHARTEXT( CONCAT( 'SIZEC(', TEXTCHAR( DATA), ')'));
 2639          %XSS$$QVEC( NAME=%ITEM, LVL=%LVL1, LAST=LAST, STCLASS=STCLASS,
 2640                      PTR$=%XPTR, SIZE=%XSIZ);
 2641      %ENDIF;
 2642      %MEND;

