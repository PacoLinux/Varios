/*M* WSN - a program to change a user's JIT.WOO */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 7/82
                                                                  */
%SET LISTSUB='1'B;
 
WSN: PROC MAIN;
 
                                        /* Locally needed %SUBS */
%SUB FALSE#='0'B/*FALSE#*/;
%SUB TRUE#='1'B/*TRUE#*/;
 
                                        /* %INCLUDE files */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
     %INCLUDE B$JIT;
     %INCLUDE KL_SUPER_C;
 
                                        /* DCBS */
DCL M$LM DCB;
DCL M$DO DCB;
DCL MFILE_ DCB;
 
                                        /* LOCAL DATA */
DCL M$LM$ PTR STATIC;
DCL SYS_MSG CHAR(0) STATIC INIT
               (' ***** This program must be run from :SYS! ');
DCL WSN_WORKSPACE(0:49) SBIN STATIC;
DCL WSN_RETURNED CHAR(8) STATIC SYMDEF;
DCL WSN_SAVED CHAR(8) STATIC SYMDEF;
DCL 1 WSN_KEY STATIC CALIGNED,
         2 * UBIN BYTE CALIGNED INIT(9),
         2 WSN_ CHAR(8) CALIGNED,
         2 * CHAR(1) CALIGNED INIT('*');
 
                                        /* LOCAL AUTO */
DCL WSN_BUF(0:1023) SBIN WORD ALIGNED;
DCL WSN_PBUF CHAR(80);
DCL WSN_N SBIN;
DCL I SBIN;
DCL J SBIN;
DCL DFORM_LP CHAR(6);
DCL DFORM_CP CHAR(6);
DCL TEMP$ PTR;
DCL WSN_BUF$ PTR;
 
 
                                        /* EXTERNAL references */
DCL B$JIT$ PTR SYMREF;
DCL X$PARSE ENTRY(1) ALTRET;
DCL WSN_NODES SBIN WORD SYMREF;
DCL CPL$DILDEV ENTRY(2) ALTRET;
 
                                        /* MACROS, FPTS, ETC. */
     %F$DCB;
 
     %FPT_WRITE     (FPTN=WRITE_SYS_MSG,
                         BUF=SYS_MSG,
                         DCB=M$DO,
                         WAIT=YES);
 
     %FPT_OPEN      (FPTN=OPEN_WSN_FILE,
                         ASN=FILE,
                         ACS=DIRECT,
                         ACCT=SYS_ACCT,
                         NAME=WSN_NAME,
                         DCB=MFILE_,
                         FUN=IN,
                         SHARE=ALL);
 
          %VLP_NAME (FPTN=WSN_NAME,
                         NAME=':WSN');
 
          %VLP_ACCT (FPTN=SYS_ACCT,
                         ACCT=':SYS    ');
 
     %FPT_READ      (FPTN=READ_WSN_FILE,
                         DCB=MFILE_,
                         KEY=WSN_KEY,
                         KEYS=YES,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_WSN_FILE,
                         DCB=MFILE_,
                         DISP=SAVE);
 
     %FPT_LDEV      (FPTN=DO_AN_LDEV,
                         WSN=LDEV_WSN);
 
          %VLP_WSN  (FPTN=LDEV_WSN);
 
 
     %P_PCB         (NAME=WSN_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=WSN_WORKSPACE,
                         U$=NIL,
                         WSZ=50,
                         N#=0);
 
     %PARSE$SYM     (NAME=WSN$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=WSN$OUTBLK,
                         STCLASS="BASED");
 
     %KL_WSNHDR;
     %KL_WTBLK;
%EJECT;
 
/********************************************************************
 ********************************************************************
 ***                                                              ***
 ***       Begin WSN main program                                 ***
 ***                                                              ***
 ********************************************************************
 ********************************************************************/
 
     M$LM$ = DCBADDR(DCBNUM(M$LM));
 
     IF M$LM$->F$DCB.ACCT# ~= ':SYS'
     THEN
     DO;
          CALL M$WRITE (WRITE_SYS_MSG) ALTRET (MXXX);
          GOTO MXXX;
        END;                            /* DO IF NOT :SYS */
 
 
     WSN_PCB.ROOT$ = ADDR(WSN_NODES);
 
 
     WSN_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
     WSN_PCB.NCHARS = B$JIT.CCARS;
 
     CALL X$PARSE (WSN_PCB) WHENALTRETURN
     DO;
          CALL PARSE_ERROR(1);
          GOTO MXXX;
        END;                            /* DO IF X$PARSE ALTRET */
 
     WSN_RETURNED = WSN_PCB.OUT$ -> WSN$OUTBLK.SUBLK$(1) ->
          WSN$SYM.TEXT;
 
     WSN_KEY.WSN_ = WSN_RETURNED;
 
     CALL M$OPEN (OPEN_WSN_FILE) ALTRET (MXXX);
 
     READ_WSN_FILE.BUF_ = VECTOR (WSN_BUF);
     WSN_BUF$ = ADDR(WSN_BUF);
 
     CALL M$READ (READ_WSN_FILE) WHENALTRETURN
     DO;
 
          CALL PARSE_ERROR(2);
          GOTO MXXX;
        END;                            /* DO IF ALTRETURN */
 
     CALL M$CLOSE (CLOSE_WSN_FILE) ALTRET (MXXX);
 
     DO J=0 TO (WSN_BUF$ -> KL_WSNHDR.NTYP-1);
          IF WSN_BUF$ -> KL_WSNHDR.TYPS.TYP(J) = 'LP'
          THEN
          DO;
               TEMP$ = PINCRW(WSN_BUF$,
                    WSN_BUF$->KL_WSNHDR.TYPS.DISP(J));
               DFORM_LP = TEMP$ -> KL_WTBLK.FNAME;
             END;                       /* DO IF LP FOUND */
          IF WSN_BUF$ -> KL_WSNHDR.TYPS.TYP(J) = 'CP'
          THEN
          DO;
               TEMP$ = PINCRW(WSN_BUF$,
                    WSN_BUF$->KL_WSNHDR.TYPS.DISP(J));
               DFORM_CP = TEMP$ -> KL_WTBLK.FNAME;
             END;                       /* DO IF CP FOUND */
        END;                            /* DO J */
     WSN_SAVED = B$JIT.WOO;
     B$JIT.WOO = WSN_RETURNED;
 
     WSN_N = 0;
 
     DO WHILE (TRUE#);
 
          CALL CPL$DILDEV (WSN_N, WSN_PBUF) ALTRET (GET_OUT);
 
          IF SUBSTR(WSN_PBUF,0,4) = 'LP01'
               OR
               SUBSTR(WSN_PBUF,0,4) = 'CP01'
          THEN
          DO;
               IF SUBSTR(WSN_PBUF,8,8) = WSN_SAVED
               THEN
               DO;
                    DO_AN_LDEV.V.STREAMNAME# = SUBSTR(WSN_PBUF,0,4);
                    LDEV_WSN.WSN# = WSN_RETURNED;
                    IF SUBSTR(WSN_PBUF,0,4) = 'LP01'
                    THEN
                         DO_AN_LDEV.FORM_ = VECTOR(DFORM_LP);
                    IF SUBSTR(WSN_PBUF,0,4) = 'CP01'
                    THEN
                         DO_AN_LDEV.FORM_ = VECTOR(DFORM_CP);
 
                    CALL M$LDEV (DO_AN_LDEV) WHENALTRETURN
                    DO;
                       END;             /* DO IF ALTRETURN */
 
                  END;                  /* DO IF WSN MATCHES */
             END;                       /* DO IF DEVNAME MATCHES */
        END;                            /* DO WHILE SRCHING LDEVS */
 
GET_OUT: ;
     CALL M$EXIT;
 
     DO WHILE (FALSE#);
 
MXXX:     ;
          CALL M$XXX;
        END;                            /* DO IF GETTING THE HECK OUT */
 
%EJECT;
 
PARSE_ERROR: PROC(INDEX_);
 
DCL INDEX_ SBIN WORD;
 
DCL PERR_MSG CHAR(0) STATIC INIT
     (' **** Syntax error in command line');
DCL NONE_MSG CHAR(0) STATIC INIT
     (' **** No such workstation');
 
 
     %FPT_WRITE     (FPTN=WRITE_PERR_MSG,
                         DCB=M$DO,
                         BUF=PERR_MSG,
                         WAIT=YES);
 
     DO CASE (INDEX_);
 
     CASE (1);
        CALL M$WRITE (WRITE_PERR_MSG) ALTRET (NOGO);
 
     CASE (2);
        WRITE_PERR_MSG.BUF_ = VECTOR (NONE_MSG);
        CALL M$WRITE (WRITE_PERR_MSG) ALTRET (NOGO);
 
     END;                               /* DO CASE (INDEX_) */
 
NOGO: ;
 
     RETURN;
 
END PARSE_ERROR;
 
END WSN;
%EOD;
/*M* CPL$DILDEV displays status of Logical Devices. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CPL$DILDEV: PROC(N,PBUF)ALTRET;
DCL N SBIN;         /* N is LDEV index #. Set to 0 by caller on first call.*/
DCL PBUF CHAR(80);                 /* PBUF is where DILDEV puts line to print.*/
                                        /* ALTRET if no more to print.*/
/*****     INCLUDES     *****/
%INCLUDE CP_6;
%F$DCB;
%INCLUDE FM$FIT;
%CODE16;
%INCLUDE B$ROSEG;
/*****     REFERENCES     *****/
DCL B$ROS$ PTR SYMREF;
/*****     AUTOMATIC (NON-FPT)     *****/
DCL DCBSLOT UBIN;
DCL DCB$ PTR;
DCL FORM$ PTR;
DCL COUNTER1 CHAR(12);
DCL COUNTER2 CHAR(12);
/*****     FPT'S     *****/
%FPT_GETDCB(FPTN=GETMYDCB,STCLASS=);
%FPT_GETDCB(FPTN=CONSTDCB,STCLASS=CONSTANT);
%FPT_OPEN(FPTN=OPNMYDCB,STCLASS=);
%FPT_OPEN(FPTN=CONSTOPN,STCLASS=CONSTANT,ASN=DEVICE,FUN=CREATE);
%FPT_CLOSE(FPTN=CLSMYDCB,STCLASS=);
%FPT_CLOSE(FPTN=CONSTCLS,STCLASS=CONSTANT,DISP=SAVE);
%FPT_RELDCB(FPTN=RELMYDCB,STCLASS=);
%FPT_RELDCB(FPTN=CONSTREL,STCLASS=CONSTANT);
/*****     *****     *****     *****     *****     *****     *****/
     IF N<0 OR N>15 THEN ALTRETURN;
     DO WHILE (B$ROS$->B$ROSEG.LDEVNAME(N)=' '
          OR
          B$ROS$->B$ROSEG.STREAMID.FLG(N)=0
          OR
          B$ROS$->B$ROSEG.STREAMID.UC_STR(N));
          N=N+1; IF N>15 THEN ALTRETURN;
        END;
     GETMYDCB=CONSTDCB;
     GETMYDCB.DCBNUM_=VECTOR(DCBSLOT);
     GETMYDCB.V_=VECTOR(GETMYDCB.V);
     CALL M$GETDCB(GETMYDCB)ALTRET(ALTRETUR);
     OPNMYDCB=CONSTOPN;
     OPNMYDCB.V.DCB#=DCBSLOT;
     OPNMYDCB.V.RES#=B$ROS$->B$ROSEG.LDEVNAME(N);
     OPNMYDCB.V_=VECTOR(OPNMYDCB.V);
     CALL M$OPEN(OPNMYDCB)ALTRET(ALTRETUR);
     DCB$=DCBADDR(DCBSLOT)->F$DCB.CFU$;
     FORM$=DCB$->F$DCB.FORM$;
     CALL CONCAT(SUBSTR(PBUF,0,17),B$ROS$->B$ROSEG.LDEVNAME(N),
          ' ',SUBSTR(DCB$->F$DCB.RES#,0,2),'@',DCB$->F$DCB.WSN#);
     CALL BINCHAR(COUNTER1,FORM$->CODE16.PAGENO);
     DO WHILE (SUBSTR(COUNTER1,0,1)='0' AND COUNTER1~='0');
          COUNTER1=SUBSTR(COUNTER1,1); END;
     CALL BINCHAR(COUNTER2,FORM$->CODE16.RECNO);
     DO WHILE(SUBSTR(COUNTER2,0,1)='0' AND COUNTER2~='0');
          COUNTER2=SUBSTR(COUNTER2,1); END;
     CALL CONCAT(SUBSTR(PBUF,17),'FORM=',FORM$->CODE16.FORM,
          ' PAGES=',COUNTER1, ' RECORDS=',COUNTER2);
     CLSMYDCB=CONSTCLS;
     CLSMYDCB.V.DCB#=DCBSLOT;
     CLSMYDCB.V_=VECTOR(CLSMYDCB.V);
     CALL M$CLOSE(CLSMYDCB);
     RELMYDCB=CONSTREL;
     RELMYDCB.V.DCB#=DCBSLOT;
     RELMYDCB.V_=VECTOR(RELMYDCB.V);
     CALL M$RELDCB(RELMYDCB);
     N=N+1;
     RETURN;
ALTRETUR: ALTRETURN;
END CPL$DILDEV;
