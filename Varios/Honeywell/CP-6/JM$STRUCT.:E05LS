

14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          1    
    1      /*M* JM$STRUCT:  Based structures used by Multi-Batch Scheduler.  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,DFC */
    8      /**/
    9      /**/
   10      /**/
   11      /**/
   12      /*D* NAME:         JM_IF
   13           PURPOSE:      To contain job info for MBS
   14           DESCRIPTION:  This structure contains all of the info which
   15                         MBS needs to know about a batch job.  It is
   16                         also passed in the job file FIT from PRESCAN
   17                         to MBS with some of the fields filled in.
   18
   19                         The usual rules apply to INITing the structure,
   20                         controlled by STCLASS.
   21
   22                         The structure can be generated with a COUNT
   23                         word at the front, which is INITed to the
   24                         size of the whole thing (including the COUNT
   25                         word).  FIT=YES turns this on; default is NO.
   26
   27                         The last item is JNAME (jobname).  This can
   28                         be generated as CHAR(31), or as CHAR(FPTN.JNL)
   29                         (JNL is the length of the jobname).
   30                         CHAR(31) will be used if
   31
   32                              o STCLASS = STATIC
   33                         or   o STCLASS = CONSTANT
   34                         or   o STCLASS = EXT
   35                         or   o STCLASS = AUTO
   36                         or   o STCLASS = SYMREF and VARILEN = NO
   37                         or   o STCLASS = ""     and VARILEN = NO
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          2    
   38
   39                         Otherwise CHAR(FPTN.JNL) will be used.
   40                         The default for VARILEN is NO.
   41
   42                         Note that this means you must specify VARILEN=YES
   43                         in order to generate a variable-length PARAMETER.
   44                         Note also that if STCLASS = BASED then there is
   45                         no way to generate a CHAR(31) JNAME.
   46      */
   47      %MACRO JM_IF (FPTN=JM_IF,
   48               FIT       (YES=1,NO=0)=0,
   49               VARILEN   (YES=1,NO=0)=0,
   50               STCLASS   = STATIC);
   51
   52       %LSET LISTDIR='0'B;
   53       %LSET LISTEXP='1'B;
   54       %LSET LISTCOM='0'B;
   55       %LSET LISTSUB='1'B;
   56       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   57       %IF (SUBSTR(STR,0,6)='STATIC') OR
   58       (SUBSTR(STR,0,8)='CONSTANT') OR
   59       (SUBSTR(STR,0,3)='EXT');
   60       %LSET INIT=CHARTEXT('INIT');
   61       %ELSE;
   62       %LSET INIT=CHARTEXT('/*');
   63       %ENDIF;
   64
   65      DCL 1 FPTN STCLASS ALIGNED,
   66          %IF FIT=1;
   67            2 COUNT UBIN %INIT(SIZEW(FPTN))%CHARTEXT('/**/'),
   68          %ENDIF;
   69            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   70                              /* LNK$     : link in prio chain. */
   71
   72            2 NXTJ$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   73                              /* NXTJ$    : link in partition chain. */
   74
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          3    
   75            2 VRLIST$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   76                              /* VRLIST$  : head of virtual res list. */
   77
   78            2 XLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   79                              /* XLNK$    : head of EXCL packset list. */
   80
   81            2 SLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   82                              /* SLNK$    : head of shared packset list. */
   83
   84            2 U UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
   85                              /* U        : user number when running. */
   86
   87            2 * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   88
   89            2 PART BIT(16) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   90                              /* PART     : 1 bit for each eligible partition. */
   91
   92            2 FRS UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
   93                              /* FRS      : final run status. */
   94
   95            2 UNSAT_COUNT UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
   96                              /* UNSAT_COUNT: number of unsatisfied inter-
   97                                              job dependancies. */
   98
   99            2 PNUM UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  100                              /* PNUM     : partition number when running. */
  101
  102            2 PI UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  103                              /* PI       : prio increment to use. */
  104
  105            2 SUBMIT_TIME UBIN(36) %INIT(0)%CHARTEXT('/**/'),
  106                              /* SUBMIT_TIME: time submitted. */
  107
  108            2 START_TIME UBIN(36) %INIT(0)%CHARTEXT('/**/'),
  109                              /* START_TIME : time started running. */
  110
  111            2 OFFIP BIT(36) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          4    
  112                              /* OFFIP    : Set by JSD$DEL in the monitor
  113                                            when it's too late to do the
  114                                            RERUN keyin on this job, due
  115                                            to the input symb file having
  116                                            been deleted. */
  117
  118            2 TIM UBIN(36) %INIT(0)%CHARTEXT('/**/'),
  119                              /* TIM      : max runtime in 1/100 sec units. */
  120
  121            2 NJD UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  122                              /* NJD      : number of job dependancies
  123                                            for 'O3' ordering, i.e.,
  124                                            FOLLOW. */
  125
  126            2 PRIO UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  127                              /* PRIO     : current priority. */
  128
  129            2 FLG,
  130              3 O1 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  131                              /* FLG.O1   : ORDER specified. */
  132
  133              3 O2 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  134                              /* FLG.O2   : dependancy variables - not
  135                                            currently used. */
  136
  137              3 O3 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  138                              /* FLG.O3   : FOLLOW specified. */
  139
  140              3 ACC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  141                              /* FLG.ACC  : ACCOUNT specified. */
  142
  143              3 RR BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
  144                              /* FLG.RR   : RERUN specified. */
  145
  146              3 RR2 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  147                              /* FLG.RR2  : job being rerun. */
  148
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          5    
  149              3 NPI BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  150                              /* NPI      : don't do prio increment. */
  151
  152              3 RA BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  153                              /* RA       : DEFER specified. */
  154
  155              3 KRERUN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  156                              /* KRERUN   : RERUN keyin received. */
  157
  158            2 STATUS UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  159                              /* STATUS   : job status code. */
  160
  161            2 MAXPSN UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  162                              /* MAXPSN   : number of entries in job's
  163                                            packset list. */
  164
  165            2 MAXVR UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  166                              /* MAXVR    : number of entries in virtual
  167                                            resource list. */
  168
  169            2 SYSID UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  170                              /* SYSID    : job's SYSID. */
  171
  172            2 ACCT CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
  173                              /* ACCT     : ACCOUNT. */
  174
  175            2 UNAME CHAR(12) UNAL %INIT(' ')%CHARTEXT('/**/'),
  176                              /* UNAME    : username of job. */
  177
  178            2 WOO CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
  179                              /* WOO      : WSN of origin. */
  180
  181            2 WSN CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
  182                              /* WSN      : WSN to run under. */
  183
  184            2 RATIM UBIN(36) %INIT(0)%CHARTEXT('/**/'),
  185                              /* RATIM    : DEFER time. */
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          6    
  186
  187            2 JDID(0:7),
  188                              /* JDID     : FOLLOW information. */
  189
  190              3 RELATION UBIN(3) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  191                              /* RELATION : required relation of JDSTEPCC
  192                                            with STEPCC of FOLLOWed job.
  193                                            Only for FOLLOW_TYPE = 0. */
  194
  195              3 FOLLOW_TYPE UBIN(3) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  196                              /* FOLLOW_TYPE: for FOLLOW(name(STEPCC...)),
  197                                                FOLLOW_TYPE = 0;
  198                                              for FOLLOW(name(OK)) or
  199                                                FOLLOW_TYPE = 1.
  200                                                  FOLLOW(name(ERROR)) or
  201                                                FOLLOW_TYPE = 2.
  202                                                  FOLLOW(name(ABORT)),
  203                                                FOLLOW_TYPE = 3.
  204                                              for FOLLOW,
  205                                                FOLLOW_TYPE = 4. */
  206
  207              3 * UBIN(11) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  208
  209              3 SATISFIED BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  210                              /* SATISFIED: set if FOLLOW condition
  211                                            has been satisfied. */
  212
  213              3 SYSID UBIN(18) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  214                              /* SYSID    : SYSID of FOLLOWed job. */
  215
  216            2 JDSTEPCC(0:7) UBIN(9) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  217                              /* JDSTEPCC : STEPCC limit value which,
  218                                            together with JDID.RELATION,
  219                                            and the STEPCC of the FOLLOWed
  220                                            job, determines whether the
  221                                            FOLLOWer runs or is deleted.
  222                                            Only for FOLLOW_TYPE = 0. */
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          7    
  223
  224            2 RRT(0:11) UBIN(18) UNAL %INIT(0*12)%CHARTEXT('/**/'),
  225                              /* RRT      : table of requirement counts
  226                                            for resources, indexed by
  227                                            JM$RIT.VNUM. */
  228
  229            2 ORIGINATOR_MODE UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
  230                              /* ORIGINATOR_MODE: from FS$JOBORIG. */
  231
  232            2 ORIGINATOR_PORT,
  233                              /* ORIGINATOR_PORT: from FS$JOBORIG. */
  234              3 * UBIN %INIT(0)%CHARTEXT('/**/'),
  235              3 * UBIN %INIT(0)%CHARTEXT('/**/'),
  236              3 * UBIN %INIT(0)%CHARTEXT('/**/'),
  237
  238            2 * UBIN %INIT(0)%CHARTEXT('/**/'),
  239            2 * UBIN %INIT(0)%CHARTEXT('/**/'),
  240            2 * UBIN %INIT(0)%CHARTEXT('/**/'),
  241
  242            2 JNL UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  243                              /* JNL      : number of significant chars
  244                                            in JNAME. */
  245
  246       %IF ((SUBSTR(STR,0,6)='STATIC') OR
  247       (SUBSTR(STR,0,8)='CONSTANT') OR
  248       (SUBSTR(STR,0,6)='AUTO') OR
  249       (SUBSTR(STR,0,3)='EXT')) OR
  250       (((SUBSTR(STR,0,6)='      ') OR
  251         (SUBSTR(STR,0,6)='SYMREF')) AND VARILEN=0);
  252            2 JNAME CHAR(31) CALIGNED %INIT(' ')%CHARTEXT('/**/');
  253                              /* JNAME    : JOBNAME. */
  254
  255       %ELSE;
  256            2 JNAME CHAR(FPTN.JNL) CALIGNED;
  257       %ENDIF;
  258      %MEND;
  259      /**/
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          8    
  260      /**/
  261      /*D* NAME:         JM_SN
  262           PURPOSE:      To define SN (packset) information for MBS
  263           DESCRIPTION:  This structure contains the information about
  264                         a single packset.  When present in MBS tables,
  265                         it is of type MBS and contains a link; when
  266                         present in a JM_SNLIST, it is of type LIST
  267                         and contains no link. */
  268      %MACRO JM_SN (FPTN=JM_SN,LVL=1,LAST=";",ARRAY="",
  269               TYP       (MBS=1,LIST=2)=1,
  270               STCLASS   = STATIC);
  271
  272       %LSET LISTDIR='0'B;
  273       %LSET LISTEXP='1'B;
  274       %LSET LISTCOM='0'B;
  275       %LSET LISTSUB='1'B;
  276       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  277       %IF (SUBSTR(STR,0,6)='STATIC') OR
  278       (SUBSTR(STR,0,8)='CONSTANT') OR
  279       (SUBSTR(STR,0,3)='EXT');
  280       %LSET INIT=CHARTEXT('INIT');
  281       %ELSE;
  282       %LSET INIT=CHARTEXT('/*');
  283       %ENDIF;
  284
  285           /*!* VP Y */
  286       %IF LVL=1;
  287      DCL 1 FPTN STCLASS ALIGNED,
  288       %ELSE;
  289          %LVL FPTN ARRAY ALIGNED,
  290       %ENDIF;
  291           /*!* VP N */
  292
  293            %(LVL+1) TXT CHAR(6) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  294                              /* TXT      : the packset name.                     */
  295
  296            %(LVL+1) FLGS,
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          9    
  297                              /* FLGS     : attribute flags.                      */
  298
  299              %(LVL+2) PUB BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  300                              /* PUB      : public usage.                         */
  301
  302              %(LVL+2) EXCL BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  303                              /* EXCL     : exclusive usage.                      */
  304
  305          %IF TYP=1; /* MBS */
  306
  307              %(LVL+2) * BIT(7) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  308
  309            %(LVL+1) * UBIN BYTE UNAL %INIT(0*0)%CHARTEXT('/**/'),
  310
  311            %(LVL+1) NXT$ PTR %INIT(ADDR(NIL)*0)%CHARTEXT('/**/') LAST
  312                              /* NXT$     : link in chain.                        */
  313
  314          %ELSE;     /* LIST */
  315
  316            %(LVL+1) * BIT(4) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  317
  318            %(LVL+1) DISP UBIN(3) UNAL %INIT(0*0)%CHARTEXT('/**/') LAST
  319                              /* DISP     : Flag internal to PRESCAN */
  320
  321          %ENDIF;
  322      %MEND;
  323      /**/
  324      /**/
  325      /*D* NAME:         JM_SNLIST
  326           PURPOSE:      To generate a list of JM_SN entries
  327           DESCRIPTION:  This structure is used by PRESCAN to build
  328                         a table of JM_SN entries, to put into the
  329                         job file FIT.  If FIT is specified as YES,
  330                         then a count word COUNT is generated for
  331                         use on the M$CLOSE. */
  332      %MACRO JM_SNLIST (FPTN=JM_SNLIST,
  333               FIT       (YES=1,NO=0)=0,
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          10   
  334               ARRAY     ="",
  335               STCLASS   = STATIC);
  336
  337       %LSET LISTDIR='0'B;
  338       %LSET LISTEXP='1'B;
  339       %LSET LISTCOM='0'B;
  340       %LSET LISTSUB='1'B;
  341       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  342       %IF (SUBSTR(STR,0,6)='STATIC') OR
  343       (SUBSTR(STR,0,8)='CONSTANT') OR
  344       (SUBSTR(STR,0,3)='EXT');
  345       %LSET INIT=CHARTEXT('INIT');
  346       %ELSE;
  347       %LSET INIT=CHARTEXT('/*');
  348       %ENDIF;
  349
  350      DCL 1 FPTN STCLASS ALIGNED,
  351          %IF FIT=1;
  352            2 COUNT UBIN %INIT(SIZEW(FPTN))%CHARTEXT('/**/'),
  353          %ENDIF;
  354
  355            %JM_SN (FPTN=SN,LVL=2,TYP=LIST,ARRAY=ARRAY,STCLASS=STCLASS);
  356      %MEND;
  357      /**/
  358      /**/
  359      /*D* NAME:         JM_RES
  360           PURPOSE:      To define resource information for MBS
  361           DESCRIPTION:  This structure contains the information
  362                         describing a single resource requirement.
  363                         When present in MBS tables, it is of type
  364                         MBS, and contains a link; when present
  365                         in a JM_RESLIST, it is of type LIST
  366                         and contains no link. */
  367      %MACRO JM_RES (FPTN=JM_RES,LVL=1,LAST=";",ARRAY="",
  368               TYP       (MBS=1,LIST=2)=1,
  369               STCLASS   = STATIC);
  370
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          11   
  371       %LSET LISTDIR='0'B;
  372       %LSET LISTEXP='1'B;
  373       %LSET LISTCOM='0'B;
  374       %LSET LISTSUB='1'B;
  375       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  376       %IF (SUBSTR(STR,0,6)='STATIC') OR
  377       (SUBSTR(STR,0,8)='CONSTANT') OR
  378       (SUBSTR(STR,0,3)='EXT');
  379       %LSET INIT=CHARTEXT('INIT');
  380       %ELSE;
  381       %LSET INIT=CHARTEXT('/*');
  382       %ENDIF;
  383
  384           /*!* VP Y */
  385       %IF LVL=1;
  386      DCL 1 FPTN ARRAY STCLASS ALIGNED,
  387       %ELSE;
  388          %LVL FPTN ARRAY ALIGNED,
  389       %ENDIF;
  390           /*!* VP N */
  391
  392            %(LVL+1) TYPE CHAR(2) UNAL %INIT(' '*0)%CHARTEXT('/**/'),
  393                              /* TYPE     : Resource type.                        */
  394
  395            %(LVL+1) VNUM CHAR(2) UNAL %INIT(' '*0)%CHARTEXT('/**/'),
  396                              /* VNUM     : Virtual resource number.              */
  397
  398            %(LVL+1) VNUMB REDEF VNUM UBIN HALF HALIGNED,
  399                              /* VNUMB    : ubin redef of VNUM for PRESCAN.       */
  400
  401            %(LVL+1) ATTRS BIT(18) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  402                              /* ATTRS    : Requested attrs.                      */
  403
  404          %IF TYP = 1; /* MBS */
  405
  406            %(LVL+1) NUM UBIN HALF UNAL %INIT(0*0)%CHARTEXT('/**/'),
  407                              /* NUM      : Number of 'em.                        */
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          12   
  408
  409            %(LVL+1) NXT$ PTR %INIT(ADDR(NIL)*0)%CHARTEXT('/**/') LAST
  410                              /* NXT$     : link in chain.                        */
  411
  412          %ELSE;     /* LIST */
  413
  414            %(LVL+1) NUM UBIN HALF UNAL %INIT(0*0)%CHARTEXT('/**/') LAST
  415
  416          %ENDIF;
  417      %MEND;
  418      /**/
  419      /**/
  420      /*D* NAME:         JM_RESLIST
  421           PURPOSE:      To generate a list of JM_RES entries.
  422           DESCRIPTION:  Bears same relationship to JM_RES as JM_SNLIST
  423                         does to JM_SN. */
  424      %MACRO JM_RESLIST (FPTN=JM_RESLIST,
  425               FIT       (YES=1,NO=0)=0,
  426               ARRAY     ="",
  427               STCLASS   = STATIC);
  428
  429       %LSET LISTDIR='0'B;
  430       %LSET LISTEXP='1'B;
  431       %LSET LISTCOM='0'B;
  432       %LSET LISTSUB='1'B;
  433       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  434       %IF (SUBSTR(STR,0,6)='STATIC') OR
  435       (SUBSTR(STR,0,8)='CONSTANT') OR
  436       (SUBSTR(STR,0,3)='EXT');
  437       %LSET INIT=CHARTEXT('INIT');
  438       %ELSE;
  439       %LSET INIT=CHARTEXT('/*');
  440       %ENDIF;
  441
  442      DCL 1 FPTN STCLASS ALIGNED,
  443          %IF FIT=1;
  444            2 COUNT UBIN %INIT(SIZEW(FPTN))%CHARTEXT('/**/'),
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          13   
  445          %ENDIF;
  446
  447            %JM_RES (FPTN=RES,LVL=2,TYP=LIST,ARRAY=ARRAY,STCLASS=STCLASS);
  448      %MEND;
  449      /**/
  450      /**/
  451      /*D* NAME:         JM_PART
  452           PURPOSE:      To contain partition info for MBS
  453           DESCRIPTION:  Each partition has one of these structures,
  454                         containing the information pertinant to that
  455                         partition. */
  456      %MACRO JM_PART (FPTN=JM_PART,STCLASS=STATIC,LVL=1,LAST=";");
  457
  458       %LSET LISTDIR='0'B;
  459       %LSET LISTEXP='1'B;
  460       %LSET LISTCOM='0'B;
  461       %LSET LISTSUB='1'B;
  462       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  463       %IF (SUBSTR(STR,0,6)='STATIC') OR
  464       (SUBSTR(STR,0,8)='CONSTANT') OR
  465       (SUBSTR(STR,0,3)='EXT');
  466       %LSET INIT=CHARTEXT('INIT');
  467       %ELSE;
  468       %LSET INIT=CHARTEXT('/*');
  469       %ENDIF;
  470
  471           /*!* VP Y */
  472       %IF LVL=1;
  473      DCL 1 FPTN STCLASS ALIGNED,
  474       %ELSE;
  475          %LVL FPTN ALIGNED,
  476       %ENDIF;
  477           /*!* VP N */
  478
  479            %(LVL+1) TL UBIN %INIT(0)%CHARTEXT('/**/'),
  480                              /* TL       : Lower time limit (1/100 sec)          */
  481
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          14   
  482            %(LVL+1) TU UBIN %INIT(9999999999)%CHARTEXT('/**/'),
  483                              /* TU       : Upper time limit                      */
  484
  485            %(LVL+1) QUAN UBIN %INIT(500000)%CHARTEXT('/**/'),
  486                              /* QUAN     : Quantum in microseconds               */
  487
  488            %(LVL+1) MAX UBIN BYTE UNAL %INIT(2)%CHARTEXT('/**/'),
  489                              /* MAX      : Max # jobs allowed in this partition  */
  490
  491            %(LVL+1) CUR UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  492                              /* CUR      : Current # jobs....                    */
  493
  494            %(LVL+1) CPTOT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  495                              /* CPTOT    : Total jobs run in this partition
  496                                            with current partition definitions.   */
  497
  498            %(LVL+1) TOT UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
  499                              /* TOT      : Total jobs run in this part.          */
  500
  501            %(LVL+1) XPRIO UBIN BYTE UNAL %INIT(1)%CHARTEXT('/**/'),
  502                              /* XPRIO    : Base execution prio.                  */
  503
  504            %(LVL+1) FLG,
  505                              /* FLG      : control flags.                        */
  506
  507              %(LVL+2) * BIT(8) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  508
  509              %(LVL+2) LOCK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  510                              /* LOCK     : partition is locked.                  */
  511
  512            %(LVL+1) * UBIN(27) UNAL %INIT(0)%CHARTEXT('/**/'),
  513
  514            %(LVL+1) MAX1ACCT UBIN BYTE UNAL %INIT(511)%CHARTEXT('/**/'),
  515                              /* MAX1ACCT : max # jobs from any single
  516                                            account that can run in this
  517                                            partition.                            */
  518
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          15   
  519            %(LVL+1) JOB$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  520                              /* JOB$     : MBS pointer to job's JM$IF            */
  521
  522            %(LVL+1) RMAX (0:11) UBIN(18) UNAL %INIT(511,4,4,0*0)%CHARTEXT('/**/'),
  523                              /* RMAX     : Maximum resources allowed, indexed
  524                                            as for JM_IF.RRT.                     */
  525
  526            %(LVL+1) RMIN (0:11) UBIN(18) UNAL %INIT(0*0)%CHARTEXT('/**/') LAST
  527                              /* RMIN     : Minimum resources allowed.            */
  528      %MEND;
  529      /**/
  530      /**/
  531      /*D* NAME:         JM_CITE
  532           PURPOSE:      To provide a structure for events passed to
  533                         MBS
  534           DESCRIPTION:  Events passed to MBS from the outside world
  535                         use this structure.  Currently, all of these
  536                         events take the form of an JM_CITE written to
  537                         MBS thru the CSCG.  In particular, any
  538                         message written thru CSCG to MBS is assumed
  539                         to take this form unless it comes from KEYIN
  540                         (in which case it's a keyin).
  541
  542                         Depending on the event being cited, the stucture
  543                         can take the various forms generated according
  544                         to TYP.
  545      */
  546      %MACRO JM_CITE (FPTN=JM_CITE,LVL=1,LAST=";",
  547               TYP       (JOB=1)=1,
  548               COD       = 0,
  549               STCLASS   = STATIC);
  550
  551       %LSET LISTDIR='0'B;
  552       %LSET LISTEXP='1'B;
  553       %LSET LISTCOM='0'B;
  554       %LSET LISTSUB='1'B;
  555       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          16   
  556       %IF (SUBSTR(STR,0,6)='STATIC') OR
  557       (SUBSTR(STR,0,8)='CONSTANT') OR
  558       (SUBSTR(STR,0,3)='EXT');
  559       %LSET INIT=CHARTEXT('INIT');
  560       %ELSE;
  561       %LSET INIT=CHARTEXT('/*');
  562       %ENDIF;
  563
  564           /*!* VP Y */
  565       %IF LVL=1;
  566      DCL 1 FPTN STCLASS ALIGNED,
  567       %ELSE;
  568          %LVL FPTN ALIGNED,
  569       %ENDIF;
  570           /*!* VP N */
  571
  572            %(LVL+1) CODE UBIN HALF HALIGNED %INIT(COD*0)%CHARTEXT('/**/'),
  573                              /* CODE     : JMEV_XXXX#; identifies the event
  574                                            being cited. */
  575
  576          %IF TYP=1; /* General JOB/SYSID structure used for many events */
  577
  578            %(LVL+1) SYSID UBIN HALF HALIGNED %INIT(0*0)%CHARTEXT('/**/'),
  579                              /* SYSID    : the SYSID of the selected job.        */
  580
  581            %(LVL+1) SUBCODE UBIN %INIT(0*0)%CHARTEXT('/**/'),
  582                              /* SUBCODE  : further information.                  */
  583
  584            %(LVL+1) RECOVERED BIT(1) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  585                              /* RECOVERED: set if event generated by
  586                                            MBS recovery.                         */
  587
  588            %(LVL+1) * BIT(27) UNAL %INIT('0'B*0)%CHARTEXT('/**/'),
  589
  590            %(LVL+1) ACCT CHAR(8) UNAL %INIT(' '*0)%CHARTEXT('/**/'),
  591                              /* ACCT     : account involved (e.g. for
  592                                            cancel).                              */
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          17   
  593
  594            %(LVL+1) JOFF_INFO REDEF ACCT,
  595                              /* JOFF_INFO: additional information for
  596                                            the "job off" event.                  */
  597
  598
  599              %(LVL+2) STATUS UBIN,
  600                              /* STATUS   : Status of exiting job.
  601                                            Assumed = %FIN_COMPLETED# for
  602                                            real JOFF events.  Filled in
  603                                            with %MBS_xxxx for internally
  604                                            generated (faked) JOFF events.
  605                                            See JMR$CHECK_JD.                     */
  606
  607              %(LVL+2) FRS UBIN LAST
  608                              /* FRS      : Final-Run-Status
  609                                            of exiting job.                       */
  610
  611          %ENDIF;
  612      %MEND;
  613      /**/
  614      /**/
  615      /*D* NAME:         JM_EVENT
  616           PURPOSE:      To define the structure of an event on the MBS
  617                         event queue.
  618           DESCRIPTION:  Each event on MBS's internal queue has this
  619                         structure. */
  620      %MACRO JM_EVENT (FPTN=JM_EVENT,LVL=1,LAST=";",COD=0,ARRAY="",STCLASS=STATIC);
  621
  622       %LSET LISTDIR='0'B;
  623       %LSET LISTEXP='1'B;
  624       %LSET LISTCOM='0'B;
  625       %LSET LISTSUB='1'B;
  626       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  627       %IF (SUBSTR(STR,0,6)='STATIC') OR
  628       (SUBSTR(STR,0,8)='CONSTANT') OR
  629       (SUBSTR(STR,0,3)='EXT');
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          18   
  630       %LSET INIT=CHARTEXT('INIT');
  631       %ELSE;
  632       %LSET INIT=CHARTEXT('/*');
  633       %ENDIF;
  634
  635           /*!* VP Y */
  636       %IF LVL=1;
  637      DCL 1 FPTN ARRAY STCLASS ALIGNED,
  638       %ELSE;
  639          %LVL FPTN ARRAY ALIGNED,
  640       %ENDIF;
  641      %LSET LVL2=%(LVL+1);
  642           /*!* VP N */
  643
  644            %(LVL+1) LNK$ PTR UNAL %INIT(ADDR(NIL)*0)%CHARTEXT('/**/'),
  645                              /* LNK$     : link in chain.                        */
  646
  647            %(LVL+1) CODE UBIN HALF UNAL %INIT(COD*0)%CHARTEXT('/**/'),
  648                              /* CODE     : event code (JMEV_XXXX#).              */
  649
  650            %(LVL+1) ENDAC UBIN HALF UNAL %INIT(0*0)%CHARTEXT('/**/'),
  651                              /* ENDAC    : code (JMEA_XXXX#) indicating
  652                                            what action to take after
  653                                            processing the event.                 */
  654
  655            %(LVL+1) CITE$ PTR %INIT(ADDR(NIL)*0)%CHARTEXT('/**/'),
  656                              /* CITE$    : points to JM_CITE frame for
  657                                            this event.                           */
  658
  659            %JM_CITE (FPTN=CITE,LVL=LVL2,LAST=LAST,STCLASS=STCLASS);
  660                              /* CITE     : provides a place to put
  661                                            the JM_CITE info directly
  662                                            in the event frame.                   */
  663
  664      %MEND;
  665      /**/
  666      /**/
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          19   
  667      /*D* NAME:         JM_KEYIN
  668           PURPOSE:      To define the structure of KEYINs passed to
  669                         MBS.
  670           DESCRIPTION:  This structure defines the KEYINs received
  671                         by MBS. */
  672      %MACRO JM_KEYIN (FPTN=JM_KEYIN,LVL=1,LAST=";",
  673               TYP       (PRIO=1,RERUN=2,ALL=3)=1,
  674               KIN       = 0,
  675               STCLASS   = STATIC);
  676
  677       %LSET LISTDIR='0'B;
  678       %LSET LISTEXP='1'B;
  679       %LSET LISTCOM='0'B;
  680       %LSET LISTSUB='1'B;
  681       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  682       %IF (SUBSTR(STR,0,6)='STATIC') OR
  683       (SUBSTR(STR,0,8)='CONSTANT') OR
  684       (SUBSTR(STR,0,3)='EXT');
  685       %LSET INIT=CHARTEXT('INIT');
  686       %ELSE;
  687       %LSET INIT=CHARTEXT('/*');
  688       %ENDIF;
  689
  690           /*!* VP Y */
  691       %IF LVL=1;
  692      DCL 1 FPTN STCLASS ALIGNED,
  693       %ELSE;
  694          %LVL FPTN ALIGNED,
  695       %ENDIF;
  696           /*!* VP N */
  697
  698            %(LVL+1) KIN# UBIN HALF UNAL %INIT(KIN)%CHARTEXT('/**/'),
  699                              /* KIN#     : the keyin code (KEY_XXXX#).           */
  700
  701            %(LVL+1) CADDR BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  702                              /* CADDR    : the address of the console
  703                                            which issued the keyin.               */
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          20   
  704
  705            %(LVL+1) SYSID UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  706                              /* SYSID    : SYSID of job involved (if
  707                                            applicable).                          */
  708
  709            %(LVL+1) * UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  710
  711            %(LVL+1) CPRIO UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  712                              /* CPRIO    : max prio that this console
  713                                            can put jobs up to                    */
  714
  715            %(LVL+1) WSN CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
  716                              /* WSN      : WSN of issuing console; used
  717                                            ensure that the console is allowed
  718                                            to muck with the selected job.        */
  719
  720          %IF TYP=1;    /*PRIO*/
  721            %(LVL+1) PRIO UBIN %INIT(0)%CHARTEXT('/**/') LAST
  722                              /* PRIO     : desired new prio for SYSID.           */
  723
  724          %ELSEIF TYP=2;/*RERUN*/
  725            %(LVL+1) SELECTION SBIN %INIT(0)%CHARTEXT('/**/') LAST
  726                              /* SELECTION: = 0 ---> !RERUN SYSID
  727                                            < 0 ---> !RERUN ALL
  728                                            > 0 ---> !ZAP                         */
  729
  730          %ELSEIF TYP=3;/*'ALL' E.G. DELETEIALL, PRIOIALL */
  731            %(LVL+1) ACCT CHAR(8) %INIT(' ')%CHARTEXT('/**/'),
  732                              /* ACCT     : if nonblank, restricts the
  733                                            operation to this account.            */
  734
  735            %(LVL+1) NEWPRIO SBIN %INIT(0)%CHARTEXT('/**/'),
  736                              /* NEWPRIO  : for PRIOALL, the desired prio.        */
  737
  738            %(LVL+1) OLDPRIO SBIN %INIT(0)%CHARTEXT('/**/') LAST
  739                              /* OLDPRIO  : for PRIOALL, -1 means operate
  740                                            on all jobs, else operate only
14:42 JUL 28 '97 JM$STRUCT.:E05SI                                          21   
  741                                            on those at this prio.                */
  742
  743          %ENDIF;
  744      %MEND;

