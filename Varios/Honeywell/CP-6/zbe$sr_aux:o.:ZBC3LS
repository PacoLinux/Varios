

CC.C03    File=zbe$sr_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sr_aux.c,v 1.3 87/03/10 11:41:23 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* S T R E N G T H   R E D U C T I O N
        7         7              *
        8         8              * S R _ A U X . C
        9         9              *
       10        10              */
       11        11
       12        12
       13        13             #include "types:h"
       14        14             #include "sr:h"
       15        15             #include "debug:h"
       16        16             #include "em_mnem:h"
       17        17             #include "em_pseu:h"
       18        18             #include "global:h"
       19        19             #include "lset:h"
       20        20             #include "aux:h"
       21        21             #include "sr_aux:h"
       22        22             #include "sr_xform:h"
       23        23
       24        24             #define INSIDE_LOOP(b,lp)  Lis_elem(b,lp->LP_BLOCKS)
       25        25
       26        26
       27        27             bool is_loopconst(lnp,vars)
       28        28              line_p lnp;
       29        29              lset   vars;
       30        30             {
       31        31    1         Lindex i;
       32        32    1
       33        33    1         assert(TYPE(lnp) == OPSHORT || TYPE(lnp) == OPOFFSET);
       34        34    1         if (!is_regvar(off_set(lnp))) return FALSE;
       35        35    1         for (i = Lfirst(vars); i != (Lindex) 0; i = Lnext(i,vars)) {
       36        36    2            if (same_local(Lelem(i),lnp)) {
CC.C03    File=zbe$sr_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37    3               return FALSE; /* variable was changed */
       38        38    3            }
       39        39    2         }
       40        40    1         return TRUE;
       41        41    1        }
       42        42
       43        43
       44        44             bool is_caddress(lnp,vars)
       45        45              line_p lnp;
       46        46              lset   vars;  /* variables changed in loop */
       47        47             {
       48        48    1         /* See if lnp is a single instruction (i.e. without arguments)
       49        49    1          * that pushes a loop-invariant entity of size pointer-size (ps)
       50        50    1          * on the stack.
       51        51    1          */
       52        52    1
       53        53    1         if (lnp == (line_p) 0) return FALSE;
       54        54    1         switch(INSTR(lnp)) {
       55        55    2            case op_lae:
       56        56    2            case op_lal:
       57        57    2               return TRUE;
       58        58    2            case op_lol:
       59        59    2               return ps == ws && is_loopconst(lnp,vars);
       60        60    2            case op_ldl:
       61        61    2               return ps == 2*ws && is_loopconst(lnp,vars);
       62        62    2            default:
       63        63    2               return FALSE;
       64        64    2         }
       65        65    1         /* NOTREACHED */
       66        66    1        }
       67        67
       68        68
       69        69
       70        70             STATIC arg_p find_arg(n,list)
       71        71              int n;
       72        72              arg_p list;
       73        73             {
CC.C03    File=zbe$sr_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    1         /* Find the n-th element of the list */
       75        75    1
       76        76    1         while (--n) {
       77        77    2            if (list == (arg_p) 0) break;
       78        78    2            list = list->a_next;
       79        79    2         }
       80        80    1         return list;
       81        81    1        }
       82        82
       83        83
       84        84             int elemsize(lnp)
       85        85              line_p lnp;
       86        86             {
       87        87    1         /* lnp is an instruction that loads the address of an array
       88        88    1          * descriptor. Find the size of the elements of the array.
       89        89    1          * If this size cannot be determined (e.g. the descriptor may
       90        90    1          * not be in a rom) then return UNKNOWN_SIZE.
       91        91    1          */
       92        92    1
       93        93    1         dblock_p d;
       94        94    1         arg_p v;
       95        95    1
       96        96    1         assert (lnp != (line_p) 0);
       97        97    1         if (INSTR(lnp) == op_lae) {
       98        98    2            d = OBJ(lnp)->o_dblock; /* datablock */
       99        99    2            if (d->d_pseudo == DROM  &&
      100       100    2                (v = find_arg(3,d->d_values)) != (arg_p) 0 &&
      101       101    2                v->a_type == ARGOFF) {
      102       102    3               return (int) v->a_a.a_offset;
      103       103    3            }
      104       104    2         }
      105       105    1         return UNKNOWN_SIZE;
      106       106    1        }
      107       107
      108       108
      109       109
      110       110             concatenate(list1,list2)
CC.C03    File=zbe$sr_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111              line_p list1,list2;
      112       112             {
      113       113    1         /* Append list2 to the end of list1. list1 may not be empty. */
      114       114    1
      115       115    1         register line_p l;
      116       116    1
      117       117    1         assert(list1 != (line_p) 0);
      118       118    1         for (l =list1; l->l_next != (line_p) 0; l = l->l_next);
      119       119    1         l->l_next = list2;
      120       120    1        }
      121       121
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$sr:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$sr_aux:h.:ZBC3TOU. is referenced
   zbe$sr_xform:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sr_aux:c.:ZBC3TSI
