

15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      1    
    1      /*M* K_TRANSPORT_M - Macros for the OSI Transport Layer             */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*  MEC,MOC,EXM=20,CLM=30,CRM=80                                */
    8
    9
   10
   11
   12
   13
   14
   15
   16                          /*F* NAME: K$TPDU_GENERIC
   17
   18                          The K$TPDU_GENERIC macro in file K_TRANSPORT_M
   19                          generates a generic structure for the fixed part
   20                          of the following Transport Protocol Data Units:
   21                          .fif
   22                          }   Connect Request
   23                          }   Connect Confirm
   24                          }   Disconnect Request
   25                          }   Disconnect Confirm
   26                          .fin
   27
   28                          The fixed part of these TPDUs contains the following:
   29                          */
   30
   31      %MACRO K$TPDU_GENERIC (NAME=K$TPDU_GENERIC,STCLASS=BASED,ALGN=ALIGNED,LEN=1);
   32      %LSET LISTDIR='0'B;
   33      %LSET LISTEXP='1'B;
   34      %LSET LISTCOM='0'B;
   35      %LSET LISTSUB='1'B;
   36      %LSET L6=BITBIN(MODE_FEP);
   37      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      2    
   38      %IF (SUBSTR(STR,0,6)='STATIC') OR
   39      (SUBSTR(STR,0,8)='CONSTANT') OR
   40      (SUBSTR(STR,0,3)='EXT');
   41      %LSET INIT=CHARTEXT('INIT');
   42      %LSET EINIT=CHARTEXT('');
   43      %ELSE;
   44      %LSET INIT=CHARTEXT('/*');
   45      %LSET EINIT=CHARTEXT('*/');
   46      %ENDIF;
   47
   48      DCL 1 NAME STCLASS ALGN,
   49            2 LI UBIN BYTE CALIGNED,
   50                          /*K* LI - UBIN BYTE.
   51                          The Length Indicator contains the byte size of the
   52                          TPDU header, including parameters, but excluding
   53                          the length indicator and user data, if any.
   54                          Maximum value is 254.
   55                          */
   56      %IF NOT(MODE_FEP);
   57            2 * BIT(1) UNAL,
   58      %ENDIF;
   59            2 TYPE UBIN(4) UNAL,
   60                          /*K* TYPE - UBIN(4).
   61                          Contains a code to indicate the structure of the
   62                          remainder of the header:
   63                          .XEQ K_TRANSPORT_E K_TPDU_TYPE_equ VALUES
   64                          */
   65            2 CDT UBIN(4) UNAL,
   66                          /*K* CDT - UBIN(4).
   67                          The Credits field is valid for only the
   68                          the following TPDU.TYPEs:
   69                          .fif
   70                          } CR   Connect Request   Initial credit allocation
   71                          } CC   Connect Confirm   Initial credit allocation
   72                          } AK   Data Acknowledgement
   73                          } RJ   Reject
   74                          .fin
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      3    
   75                          */
   76            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
   77                          /*K* DST_REF - UBIN(16).
   78                          The Destination Reference field identifies the
   79                          transport connection at the remote transport entity.
   80                          .XEQ
   81
   82                          DST_REF is set to zero in TPDU_CR.
   83                          */
   84            2 SRC_REF UBIN(%(18-L6*2)) CALIGNED,
   85                          /*K* SRC_REF - UBIN(16).
   86                          The Source Reference field identifies the transport
   87                          connection of the entity initiating the TPDU.
   88
   89                          This is an index into the Transport Context table,
   90                          K$TCTX.
   91                          */
   92            2 TEXT CHAR(LEN) CALIGNED;
   93      %MEND;
   94
   95                          /*F* NAME: K$TPDU_CR_CC - Connect Request TPDU Structure
   96
   97                          The K$TPDU_CR_CC macro in file K_TRANSPORT_M
   98                          generates the structure for the fixed part of a
   99                          Connect Request or Connect Confirm TPDU.
  100
  101                          The parameters that are allowed in the variable
  102                          part for these TPDU are:
  103                          .fif
  104                          }  K$TPARM_TSAP_ID - TSAP_ID
  105                          }  K$TPARM_TPDUSZ - maximum TPDU size
  106                          }  K$TPARM_VERSION - version number
  107                          }  K$TPARM_CHKSUM - checksum
  108                          }  K$TPARM_OPTION - checksum and expedited data options
  109                          }  K$TPARM_ALT_CLASS - alternate protocol class
  110                          }  ???            - acknowledge time
  111                          }  ???            - residual error rate
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      4    
  112                          .fin
  113
  114                          These parameters are not sent when using NBS
  115                          Implementation Agreements:
  116                          .fif
  117                          }                 - security parameter
  118                          }                 - throughput
  119                          }                 - priority
  120                          }                 - transit delay
  121                          .fin
  122
  123                          The fixed part of a connect request or confirm
  124                          TPDU contains the following:
  125                          */
  126      %MACRO K$TPDU_CR_CC (NAME=K$TPDU_CR_CC,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  127      %LSET LISTDIR='0'B;
  128      %LSET LISTEXP='1'B;
  129      %LSET LISTCOM='0'B;
  130      %LSET LISTSUB='1'B;
  131      %LSET L6=BITBIN(MODE_FEP);
  132      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  133      %IF (SUBSTR(STR,0,6)='STATIC') OR
  134      (SUBSTR(STR,0,8)='CONSTANT') OR
  135      (SUBSTR(STR,0,3)='EXT');
  136      %LSET INIT=CHARTEXT('INIT');
  137      %LSET EINIT=CHARTEXT('');
  138      %ELSE;
  139      %LSET INIT=CHARTEXT('/*');
  140      %LSET EINIT=CHARTEXT('*/');
  141      %ENDIF;
  142
  143      DCL 1 NAME STCLASS ALGN,
  144            2 LI UBIN BYTE CALIGNED,
  145                          /*K* LI - UBIN BYTE.
  146                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  147                          */
  148      %IF NOT(MODE_FEP);
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      5    
  149            2 * BIT(1) UNAL,
  150      %ENDIF;
  151            2 TYPE UBIN(4) UNAL,
  152                          /*K* TYPE - UBIN(4).
  153                          The TYPE field in a connect request TPDU is
  154                          set to TPDU_CR (14).  For a connect confirm
  155                          TPDU, the TYPE field will be TPDU_CC (13).
  156                          */
  157            2 CDT UBIN(4) UNAL,
  158                          /*K* CDT - UBIN(4).
  159                          Contains the value for the initial credit allocation
  160                          */
  161            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  162                          /*K* DST_REF - UBIN(16).
  163                          The DST_REF is set to zero in a connect request TPDU.
  164
  165                          In a connect confirm TPDU, DST_REF contains a value
  166                          identifying the destination transport context.  This is
  167                          the value that was passed in SRC_REF on the connect
  168                          request.
  169                          */
  170            2 SRC_REF UBIN(%(18-L6*2)) CALIGNED,
  171                          /*K* SRC_REF - UBIN(16).
  172                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC SCR_REF
  173                          */
  174      %IF NOT(MODE_FEP);
  175            2 * BIT(1) UNAL,
  176      %ENDIF;
  177            2 CLASS UBIN(4) UNAL,
  178                          /*K* CLASS - UBIN(4).
  179                          Contains a value to indicate the preferred
  180                          transport protocol class to be operated over
  181                          the requested transport connection.
  182                          Permissable values are 0 through 4.
  183                          */
  184            2 MBZ UBIN(2) UNAL /* MBZ */,
  185            2 EXT_FMT_FLAG BIT(1) UNAL,
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      6    
  186                          /*K* EXT_FMT_FLAG - BIT(1).
  187                          If set, indicates that the use of extended
  188                          formats are to be allowed in classes 2, 3, and 4.
  189                          */
  190            2 CLASS_2_FLOW BIT(1) UNAL LAST
  191                          /*K* CLASS_2_FLOW - BIT(1).
  192                          If set, indicates that explicit flow control
  193                          is <not> to be used in class 2.
  194                          This bit has no meaning for other than class 2.
  195                          */
  196      %MEND;
  197
  198                          /*F* NAME: K$TPDU_DR - Disconnect Request TPDU Structure
  199
  200                          The K$TPDU_DR macro in file K_TRANSPORT_M
  201                          generates the structure for the fixed part of a
  202                          Disconnect Request TPDU.
  203
  204                          The parameters that are allowed in the variable
  205                          part for this TPDU are:
  206                          .fif
  207                          }  ???            - clearing information
  208                          }  K$TPARM_CHKSUM - checksum
  209                          .fin
  210
  211                          The NBS Implemtation Agreements disallow the
  212                          use of any parameters in Class 0.
  213
  214                          The fixed part of a disconnect request
  215                          TPDU contains the following:
  216                          */
  217      %MACRO K$TPDU_DR (NAME=K$TPDU_DR,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  218      %LSET LISTDIR='0'B;
  219      %LSET LISTEXP='1'B;
  220      %LSET LISTCOM='0'B;
  221      %LSET LISTSUB='1'B;
  222      %LSET L6=BITBIN(MODE_FEP);
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      7    
  223      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  224      %IF (SUBSTR(STR,0,6)='STATIC') OR
  225      (SUBSTR(STR,0,8)='CONSTANT') OR
  226      (SUBSTR(STR,0,3)='EXT');
  227      %LSET INIT=CHARTEXT('INIT');
  228      %LSET EINIT=CHARTEXT('');
  229      %ELSE;
  230      %LSET INIT=CHARTEXT('/*');
  231      %LSET EINIT=CHARTEXT('*/');
  232      %ENDIF;
  233
  234      DCL 1 NAME STCLASS ALGN,
  235            2 LI UBIN BYTE CALIGNED,
  236                          /*K* LI - UBIN BYTE.
  237                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  238                          */
  239      %IF NOT(MODE_FEP);
  240            2 * BIT(1) UNAL,
  241      %ENDIF;
  242            2 TYPE UBIN(4) UNAL,
  243                          /*K* TYPE - UBIN(4).
  244                          The TYPE field in a disconnect request TPDU is always
  245                          set to TPDU_DR (8).
  246                          */
  247            2 MBZ UBIN(4) UNAL,
  248            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  249                          /*K* DST_REF - UBIN(16).
  250                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  251                          */
  252            2 SRC_REF UBIN(%(18-L6*2)) CALIGNED,
  253                          /*K* SRC_REF - UBIN(16).
  254                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC SCR_REF
  255                          */
  256            2 REASON UBIN BYTE CALIGNED LAST
  257                          /*K* REASON - UBIN BYTE.
  258                          .XEQ K_TRANSPORT_E K$TCTX_REASON_equ VALUES
  259                          */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      8    
  260      %MEND;
  261
  262                          /*F* NAME: K$TPDU_DC - Disconnect Confirm TPDU Structure
  263
  264                          The K$TPDU_DC macro in file K_TRANSPORT_M
  265                          generates the structure for the fixed part of a
  266                          Disconnect Confirm TPDU.
  267
  268                          The only parameter that is allowed in the variable
  269                          part for this TPDU is:
  270                          .fif
  271                          }  K$TPARM_CHKSUM - checksum
  272                          .fin
  273
  274                          The fixed part of a disconnect confirm
  275                          TPDU contains the following:
  276                          */
  277      %MACRO K$TPDU_DC (NAME=K$TPDU_DC,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  278      %LSET LISTDIR='0'B;
  279      %LSET LISTEXP='1'B;
  280      %LSET LISTCOM='0'B;
  281      %LSET LISTSUB='1'B;
  282      %LSET L6=BITBIN(MODE_FEP);
  283      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  284      %IF (SUBSTR(STR,0,6)='STATIC') OR
  285      (SUBSTR(STR,0,8)='CONSTANT') OR
  286      (SUBSTR(STR,0,3)='EXT');
  287      %LSET INIT=CHARTEXT('INIT');
  288      %LSET EINIT=CHARTEXT('');
  289      %ELSE;
  290      %LSET INIT=CHARTEXT('/*');
  291      %LSET EINIT=CHARTEXT('*/');
  292      %ENDIF;
  293
  294      DCL 1 NAME STCLASS ALGN,
  295            2 LI UBIN BYTE CALIGNED,
  296                          /*K* LI - UBIN BYTE.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      9    
  297                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  298                          */
  299      %IF NOT(MODE_FEP);
  300            2 * BIT(1) UNAL,
  301      %ENDIF;
  302            2 TYPE UBIN(4) UNAL,
  303                          /*K* TYPE - UBIN(4).
  304                          The TYPE field in a disconnect confirm TPDU is always
  305                          set to TPDU_DC (12).
  306                          */
  307            2 MBZ UBIN(4) UNAL,
  308            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  309                          /*K* DST_REF - UBIN(16).
  310                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  311                          */
  312            2 SRC_REF UBIN(%(18-L6*2)) CALIGNED LAST
  313                          /*K* SRC_REF - UBIN(16).
  314                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC SCR_REF
  315                          */
  316      %MEND;
  317                          /*F* NAME: K$TPDU_DT - Data TPDU Structure
  318
  319                          The K$TPDU_DT macro in file K_TRANSPORT_M
  320                          generates the structure for the fixed part of a
  321                          normal format Data Transfer TPDU and the normal
  322                          format Expedited Data Transfer TPDU.
  323                          This format may not be used with Classes 0 and 1.
  324
  325                          The only parameter that is allowed in the variable
  326                          part for this TPDU is:
  327                          .fif
  328                          }  K$TPARM_CHKSUM - checksum
  329                          .fin
  330
  331                          The fixed part of a data transfer or expedited
  332                          data transfer TPDU contains the following:
  333                          */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      10   
  334      %MACRO K$TPDU_DT (NAME=K$TPDU_DT,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  335      %LSET LISTDIR='0'B;
  336      %LSET LISTEXP='1'B;
  337      %LSET LISTCOM='0'B;
  338      %LSET LISTSUB='1'B;
  339      %LSET L6=BITBIN(MODE_FEP);
  340      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  341      %IF (SUBSTR(STR,0,6)='STATIC') OR
  342      (SUBSTR(STR,0,8)='CONSTANT') OR
  343      (SUBSTR(STR,0,3)='EXT');
  344      %LSET INIT=CHARTEXT('INIT');
  345      %LSET EINIT=CHARTEXT('');
  346      %ELSE;
  347      %LSET INIT=CHARTEXT('/*');
  348      %LSET EINIT=CHARTEXT('*/');
  349      %ENDIF;
  350
  351      DCL 1 NAME STCLASS ALGN,
  352            2 LI UBIN BYTE CALIGNED,
  353                          /*K* LI - UBIN BYTE.
  354                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  355                          */
  356      %IF NOT(MODE_FEP);
  357            2 * BIT(1) UNAL,
  358      %ENDIF;
  359            2 TYPE UBIN(4) UNAL,
  360                          /*K* TYPE - UBIN(4).
  361                          The TYPE field in a data TPDU is always
  362                          set to TPDU_DT (15).  In an expedited
  363                          data TPDU, TYPE will be set to TPDU_ED (1).
  364                          */
  365            2 MBZ UBIN(4) UNAL,
  366            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  367                          /*K* DST_REF - UBIN(16).
  368                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  369                          */
  370      %IF NOT(MODE_FEP);
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      11   
  371            2 * BIT(1) UNAL,
  372      %ENDIF;
  373            2 EOT BIT(1) UNAL,
  374                          /*K* EOT - BIT(1).
  375                          When set, indicates that the current TPDU_DT
  376                          is the last data unit of a complete TPDU_DT
  377                          sequence (end of TSDU).
  378                          */
  379            2 TPDU_NR UBIN(7) UNAL LAST
  380                          /*K* TPDU_NR - UBIN(7).
  381                          The Next Record field contains the
  382                          send sequence number.
  383                          */
  384      %MEND;
  385
  386                          /*F* NAME: K$TPDU_DT_EXT - Extended Data TPDU Structure
  387
  388                          The K$TPDU_DT_EXT macro in file K_TRANSPORT_M
  389                          generates the structure for the fixed part of a
  390                          extended format Data Transfer TPDU and the extended
  391                          format Expedited Data Transfer TPDU.
  392                          This format may not be used with Classes 0 and 1.
  393
  394                          The only parameter that is allowed in the variable
  395                          part for this TPDU is:
  396                          .fif
  397                          }  K$TPARM_CHKSUM - checksum
  398                          .fin
  399
  400                          The fixed part of a extended format data transfer
  401                          TPDU contains the following:
  402                          */
  403      %MACRO K$TPDU_DT_EXT (NAME=K$TPDU_DT_EXT,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  404      %LSET LISTDIR='0'B;
  405      %LSET LISTEXP='1'B;
  406      %LSET LISTCOM='0'B;
  407      %LSET LISTSUB='1'B;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      12   
  408      %LSET L6=BITBIN(MODE_FEP);
  409      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  410      %IF (SUBSTR(STR,0,6)='STATIC') OR
  411      (SUBSTR(STR,0,8)='CONSTANT') OR
  412      (SUBSTR(STR,0,3)='EXT');
  413      %LSET INIT=CHARTEXT('INIT');
  414      %LSET EINIT=CHARTEXT('');
  415      %ELSE;
  416      %LSET INIT=CHARTEXT('/*');
  417      %LSET EINIT=CHARTEXT('*/');
  418      %ENDIF;
  419
  420      DCL 1 NAME STCLASS ALGN,
  421            2 LI UBIN BYTE CALIGNED,
  422                          /*K* LI - UBIN BYTE.
  423                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  424                          */
  425      %IF NOT(MODE_FEP);
  426            2 * BIT(1) UNAL,
  427      %ENDIF;
  428            2 TYPE UBIN(4) UNAL,
  429                          /*K* TYPE - UBIN(4).
  430                          The TYPE field in a extended fornat data TPDU is always
  431                          set to TPDU_DT (15).  In a extended format expedited
  432                          data TPDU, TYPE will be set to TPDU_ED (1).
  433                          */
  434            2 MBZ UBIN(4) UNAL,
  435            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  436                          /*K* DST_REF - UBIN(16).
  437                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  438                          */
  439      %IF NOT(MODE_FEP);
  440            2 * BIT(1) UNAL,
  441      %ENDIF;
  442            2 EOT BIT(1) UNAL,
  443                          /*K* EOT - BIT(1).
  444                          .XEQ K_TRANSPORT_M K$TPDU_DT EOT
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      13   
  445                          */
  446      %IF NOT(MODE_FEP);
  447            2 TPDU_NR UBIN(%(34-L6*3)) UNAL,
  448      %ELSE;
  449            2 TPDU_NR UBIN(%(34-L6*3)) UNAL LAST
  450      %ENDIF;
  451                          /*K* TPDU_NR - UBIN(31).
  452                          .XEQ K_TRANSPORT_M K$TPDU_DT TPDU_NR
  453                          */
  454      %IF NOT(MODE_FEP);
  455            2 TPDU_NR_UNPK REDEF TPDU_NR,
  456              3 BYTE0 UBIN(7) UNAL,
  457              3 * BIT(1) UNAL,
  458              3 BYTE1 UBIN(8) UNAL,
  459              3 * BIT(1) UNAL,
  460              3 BYTE2 UBIN(8) UNAL,
  461              3 * BIT(1) UNAL,
  462              3 BYTE3 UBIN(8) UNAL,
  463            2 TPDU_NR_PK REDEF TPDU_NR,
  464              3 * BIT(3) UNAL,
  465              3 NR UBIN(31) UNAL LAST
  466      %ENDIF;
  467      %MEND;
  468
  469
  470                          /*F* NAME: K$TPDU_DT_0 - Class 0 Data TPDU Structure
  471
  472                          The K$TPDU_DT_0 macro in file K_TRANSPORT_M
  473                          generates the structure for the Class 0 transport
  474                          Data Transfer TPDU.
  475
  476                          No variable length parameters are allowed with this TPDU.
  477                          A class 0 data transfer TPDU contains the following:
  478                          */
  479      %MACRO K$TPDU_DT_0 (NAME=K$TPDU_DT_0,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  480      %LSET LISTDIR='0'B;
  481      %LSET LISTEXP='1'B;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      14   
  482      %LSET LISTCOM='0'B;
  483      %LSET LISTSUB='1'B;
  484      %LSET L6=BITBIN(MODE_FEP);
  485      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  486      %IF (SUBSTR(STR,0,6)='STATIC') OR
  487      (SUBSTR(STR,0,8)='CONSTANT') OR
  488      (SUBSTR(STR,0,3)='EXT');
  489      %LSET INIT=CHARTEXT('INIT');
  490      %LSET EINIT=CHARTEXT('');
  491      %ELSE;
  492      %LSET INIT=CHARTEXT('/*');
  493      %LSET EINIT=CHARTEXT('*/');
  494      %ENDIF;
  495
  496      DCL 1 NAME STCLASS ALGN,
  497            2 LI UBIN BYTE CALIGNED,
  498                          /*K* LI - UBIN BYTE.
  499                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  500                          */
  501      %IF NOT(MODE_FEP);
  502            2 * BIT(1) UNAL,
  503      %ENDIF;
  504            2 TYPE UBIN(4) UNAL,
  505                          /*K* TYPE - UBIN(4).
  506                          The TYPE field in a data TPDU is always
  507                          set to TPDU_DT (15).
  508                          */
  509            2 MBZ UBIN(4) UNAL,
  510      %IF NOT(MODE_FEP);
  511            2 * BIT(1) UNAL,
  512      %ENDIF;
  513            2 EOT BIT(1) UNAL,
  514                          /*K* EOT - BIT(1).
  515                          When set, indicates that the current TPDU_DT
  516                          is the last data unit of a complete TPDU_DT
  517                          sequence (end of TSDU).
  518                          */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      15   
  519            2 TPDU_NR UBIN(7) UNAL LAST
  520                          /*K* TPDU_NR - UBIN(7).
  521                          The Next Record field has no significance in a
  522                          class 0 data TPDU.
  523                          */
  524      %MEND;
  525
  526                          /*F* NAME: K$TPDU_AK - Data Acknowledgement TPDU Structure
  527
  528                          The K$TPDU_AK macro in file K_TRANSPORT_M
  529                          generates the structure for the fixed part of a
  530                          Data Acknowledgement TPDU and for a Expedited
  531                          Data Acknowledgement TPDU.
  532
  533                          A transport entity may send an AK TPDU at any time
  534                          to authorize transmission of DT TPDUs by its peer.
  535
  536                          The only parameters that are allowed in the variable
  537                          part for this TPDU are:
  538                          .fif
  539                          }  K$TPARM_CHKSUM      - checksum
  540                          }  K$TPARM_SUBSEQ      - subsequence number
  541                          }  ???                 - flow control confirmation
  542                          .fin
  543
  544                          This format may not be used with Class 0 nor with
  545                          class 2 when the no explicit flow control option
  546                          has been selected.
  547
  548                          The fixed part of a data acknowledgement
  549                          TPDU contains the following:
  550                          */
  551      %MACRO K$TPDU_AK (NAME=K$TPDU_AK,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  552      %LSET LISTDIR='0'B;
  553      %LSET LISTEXP='1'B;
  554      %LSET LISTCOM='0'B;
  555      %LSET LISTSUB='1'B;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      16   
  556      %LSET L6=BITBIN(MODE_FEP);
  557      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  558      %IF (SUBSTR(STR,0,6)='STATIC') OR
  559      (SUBSTR(STR,0,8)='CONSTANT') OR
  560      (SUBSTR(STR,0,3)='EXT');
  561      %LSET INIT=CHARTEXT('INIT');
  562      %LSET EINIT=CHARTEXT('');
  563      %ELSE;
  564      %LSET INIT=CHARTEXT('/*');
  565      %LSET EINIT=CHARTEXT('*/');
  566      %ENDIF;
  567
  568      DCL 1 NAME STCLASS ALGN,
  569            2 LI UBIN BYTE CALIGNED,
  570                          /*K* LI - UBIN BYTE.
  571                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  572                          */
  573      %IF NOT(MODE_FEP);
  574            2 * BIT(1) UNAL,
  575      %ENDIF;
  576            2 TYPE UBIN(4) UNAL,
  577                          /*K* TYPE - UBIN(4).
  578                          The TYPE field in a data acknowledgement TPDU is
  579                          always set to TPDU_AK (6).  In an expedited data
  580                          data acknowledgement TPDU, TYPE will be set to
  581                          TPDU_EA (2).
  582                          */
  583            2 CDT UBIN(4) UNAL,
  584                          /*K* CDT - UBIN(4).
  585                          Contains the credit value.
  586                          .XEQ
  587                          If this is an acknowledgement for expedited
  588                          data the CDT field must be zero.
  589                          */
  590            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  591                          /*K* DST_REF - UBIN(16).
  592                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      17   
  593                          */
  594            2 YR_TU_NR UBIN BYTE CALIGNED LAST
  595                          /*K* YR_TU_NR - UBIN BYTE.
  596                          Your TPDU Next Record field contains a sequence
  597                          number indicating the next expected data TPDU.
  598                          */
  599      %MEND;
  600
  601                          /*F* NAME: K$TPDU_AK_EXT - Extended Data Ack TPDU Structure
  602
  603                          The K$TPDU_AK_EXT macro in file K_TRANSPORT_M
  604                          generates the structure for the fixed part of
  605                          the extended format for the Data Acknowledgemnt and
  606                          Expedited Data Acknowledgement TPDUs.
  607
  608                          This format may not be used with Class 0 nor with
  609                          class 2 when the no explicit flow control option
  610                          has been selected.
  611
  612                          The only parameters that are allowed in the variable
  613                          part for this TPDU are:
  614                          .fif
  615                          }  K$TPARM_CHKSUM      - checksum
  616                          }  K$TPARM_SUBSEQ      - subsequence number
  617                          }  ???                 - flow control confirmation
  618                          .fin
  619
  620                          The fixed part of a extended format data
  621                          acknowledgement TPDU contains the following:
  622                          */
  623
  624
  625      %MACRO K$TPDU_AK_EXT (NAME=K$TPDU_AK_EXT,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  626      %LSET LISTDIR='0'B;
  627      %LSET LISTEXP='1'B;
  628      %LSET LISTCOM='0'B;
  629      %LSET LISTSUB='1'B;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      18   
  630      %LSET L6=BITBIN(MODE_FEP);
  631      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  632      %IF (SUBSTR(STR,0,6)='STATIC') OR
  633      (SUBSTR(STR,0,8)='CONSTANT') OR
  634      (SUBSTR(STR,0,3)='EXT');
  635      %LSET INIT=CHARTEXT('INIT');
  636      %LSET EINIT=CHARTEXT('');
  637      %ELSE;
  638      %LSET INIT=CHARTEXT('/*');
  639      %LSET EINIT=CHARTEXT('*/');
  640      %ENDIF;
  641
  642      DCL 1 NAME STCLASS ALGN,
  643            2 LI UBIN BYTE CALIGNED,
  644                          /*K* LI - UBIN BYTE.
  645                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  646                          */
  647      %IF NOT(MODE_FEP);
  648            2 * BIT(1) UNAL,
  649      %ENDIF;
  650            2 TYPE UBIN(4) UNAL,
  651                          /*K* TYPE- UBIN(4).
  652                          .XEQ K_TRANSPORT_M K$TPDU_AK TYPE
  653                          */
  654            2 MBZ UBIN(4) UNAL,
  655            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  656                          /*K* DST_REF - UBIN(16).
  657                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  658                          */
  659            2 YR_TU_NR UBIN(%(36-L6*4)) CALIGNED,
  660                          /*K* YR_TU_NR - UBIN(32)
  661                          .XEQ K_TRANSPORT_M K$TPDU_AK YR_TU_NR
  662                          */
  663            2 CDT UBIN(%(18-L6*2)) CALIGNED LAST
  664                          /*K* CDT - UBIN(16).
  665                          .XEQ K_TRANSPORT_M K$TPDU_AK CDT
  666                          This field is not present if this is an Expedited
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      19   
  667                          Data Acknowledgement.
  668                          */
  669      %MEND;
  670
  671      /*F* NAME: K$TPDU_EA - Expedited Data Ack TPDU Structure
  672      */
  673      %MACRO K$TPDU_EA (NAME=K$TPDU_EA,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  674      %LSET LISTDIR='0'B;
  675      %LSET LISTEXP='1'B;
  676      %LSET LISTCOM='0'B;
  677      %LSET LISTSUB='1'B;
  678      %LSET L6=BITBIN(MODE_FEP);
  679      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  680      %IF (SUBSTR(STR,0,6)='STATIC') OR
  681      (SUBSTR(STR,0,8)='CONSTANT') OR
  682      (SUBSTR(STR,0,3)='EXT');
  683      %LSET INIT=CHARTEXT('INIT');
  684      %LSET EINIT=CHARTEXT('');
  685      %ELSE;
  686      %LSET INIT=CHARTEXT('/*');
  687      %LSET EINIT=CHARTEXT('*/');
  688      %ENDIF;
  689
  690      DCL 1 NAME STCLASS ALGN,
  691            2 LI UBIN BYTE CALIGNED,
  692      %IF NOT(MODE_FEP);
  693            2 * BIT(1) UNAL,
  694      %ENDIF;
  695            2 TYPE UBIN(4) UNAL,
  696            2 MBZ UBIN(4) UNAL,
  697            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  698            2 YR_EDTU_NR UBIN BYTE CALIGNED LAST
  699      %MEND;
  700
  701      /*F* NAME: K$TPDU_EA_EXT - Extended Expedited Data Ack TPDU Structure
  702      */
  703      /*     The extended format is not mentioned in the LSP spec.   */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      20   
  704      %MACRO K$TPDU_EA_EXT (NAME=K$TPDU_EA_EXT,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  705      %LSET LISTDIR='0'B;
  706      %LSET LISTEXP='1'B;
  707      %LSET LISTCOM='0'B;
  708      %LSET LISTSUB='1'B;
  709      %LSET L6=BITBIN(MODE_FEP);
  710      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  711      %IF (SUBSTR(STR,0,6)='STATIC') OR
  712      (SUBSTR(STR,0,8)='CONSTANT') OR
  713      (SUBSTR(STR,0,3)='EXT');
  714      %LSET INIT=CHARTEXT('INIT');
  715      %LSET EINIT=CHARTEXT('');
  716      %ELSE;
  717      %LSET INIT=CHARTEXT('/*');
  718      %LSET EINIT=CHARTEXT('*/');
  719      %ENDIF;
  720
  721      DCL 1 NAME STCLASS ALGN,
  722            2 LI UBIN BYTE CALIGNED,
  723      %IF NOT(MODE_FEP);
  724            2 * BIT(1) UNAL,
  725      %ENDIF;
  726            2 TYPE UBIN(4) UNAL,
  727            2 MBZ UBIN(4) UNAL,
  728            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  729            2 YR_TU_NR UBIN(%(36-L6*4)) CALIGNED LAST
  730      %MEND;
  731
  732                          /*F* NAME: K$TPDU_ER - Error TPDU Structure
  733
  734                          The K$TPDU_ER macro in file K_TRANSPORT_M
  735                          generates the structure for the fixed part of a
  736                          Error TPDU.
  737
  738                          The only parameters that are allowed in the variable
  739                          part for this TPDU are:
  740                          .fif
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      21   
  741                          }  K$TPARM_CHKSUM - checksum
  742                          }  ???            - invalid TPDU
  743                          .fin
  744
  745                          The fixed part of a error TPDU contains the following:
  746                          */
  747      %MACRO K$TPDU_ER (NAME=K$TPDU_ER,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  748      %LSET LISTDIR='0'B;
  749      %LSET LISTEXP='1'B;
  750      %LSET LISTCOM='0'B;
  751      %LSET LISTSUB='1'B;
  752      %LSET L6=BITBIN(MODE_FEP);
  753      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  754      %IF (SUBSTR(STR,0,6)='STATIC') OR
  755      (SUBSTR(STR,0,8)='CONSTANT') OR
  756      (SUBSTR(STR,0,3)='EXT');
  757      %LSET INIT=CHARTEXT('INIT');
  758      %LSET EINIT=CHARTEXT('');
  759      %ELSE;
  760      %LSET INIT=CHARTEXT('/*');
  761      %LSET EINIT=CHARTEXT('*/');
  762      %ENDIF;
  763
  764      DCL 1 NAME STCLASS ALGN,
  765            2 LI UBIN BYTE CALIGNED,
  766                          /*K* LI - UBIN BYTE.
  767                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  768                          */
  769      %IF NOT(MODE_FEP);
  770            2 * BIT(1) UNAL,
  771      %ENDIF;
  772            2 TYPE UBIN(4) UNAL,
  773                          /*K* TYPE - UBIN(4).
  774                          The TYPE field in an error TPDU is always
  775                          set to TPDU_ER (7).
  776                          */
  777            2 MBZ UBIN(4) UNAL,
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      22   
  778            2 DST_REF UBIN(%(18-L6*2)) CALIGNED,
  779                          /*K* DST_REF - UBIN(16).
  780                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  781                          */
  782            2 REJECT_CAUSE UBIN BYTE CALIGNED LAST
  783                          /*K* REJECT_CAUSE - UBIN BYTE.
  784                          .XEQ K_TRANSPORT_E K_TPDU_RJ_equ VALUES
  785                          */
  786      %MEND;
  787
  788                          /*F* NAME: K$TPDU_UN - Use of NW Connection TPDU Structure
  789
  790                          The K$TPDU_UN macro in file K_TRANSPORT_M
  791                          generates the structure for the fixed part of a
  792                          Use of Network Connection TPDU.
  793
  794                          The only parameter allowed in the variable
  795                          part for this TPDU is K$TPARM_PRT_ID_LIST.
  796
  797                          The fixed part of the UN TPDU contains the following:
  798                          */
  799      %MACRO K$TPDU_UN (NAME=K$TPDU_UN,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  800      %LSET LISTDIR='0'B;
  801      %LSET LISTEXP='1'B;
  802      %LSET LISTCOM='0'B;
  803      %LSET LISTSUB='1'B;
  804      %LSET L6=BITBIN(MODE_FEP);
  805      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  806      %IF (SUBSTR(STR,0,6)='STATIC') OR
  807      (SUBSTR(STR,0,8)='CONSTANT') OR
  808      (SUBSTR(STR,0,3)='EXT');
  809      %LSET INIT=CHARTEXT('INIT');
  810      %LSET EINIT=CHARTEXT('');
  811      %ELSE;
  812      %LSET INIT=CHARTEXT('/*');
  813      %LSET EINIT=CHARTEXT('*/');
  814      %ENDIF;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      23   
  815
  816      DCL 1 NAME STCLASS ALGN,
  817            2 LI UBIN BYTE CALIGNED,
  818                          /*K* LI - UBIN BYTE.
  819                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC LI
  820                          */
  821            2 TYPE UBIN BYTE UNAL,
  822                          /*K* TYPE - UBIN(4).
  823                          The TYPE field in an error TPDU is always
  824                          set to TPDU_UN (1).
  825                          */
  826            2 PRT_ID UBIN BYTE CALIGNED,
  827                          /*K* PRT_ID - UBIN BYTE.
  828                          Contains the value to represent the protocol
  829                          identifier.
  830                          .XEQ K_TRANSPORT_E K_UN_PRTID_equ VALUES
  831                          */
  832            2 SHARE UBIN BYTE CALIGNED LAST
  833                          /*K* SHARE - UBIN BYTE.
  834                          If set to 0, no sharing of this network connection
  835                          is allowed.  If non-zero, the variable part will
  836                          define the protocol identifier list.
  837                          */
  838      %MEND;
  839
  840
  841                          /*F* NAME: K$TPDU_CP6 - CP-6 Control TPDU Structure
  842
  843                          The K$TPDU_CP6 macro in file K_TRANSPORT_M
  844                          generates the structure for the fixed part of a
  845                          CP-6 Control TPDU.
  846
  847                          The only parameters that are allowed in the variable
  848                          part for this TPDU are:
  849                          .fif
  850                          }  K$TPARM_SSN_CRDT     - Session credit adjustment
  851                          }  K$TPARM_SSN_CRDT_ACK - Session zero credit ack
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      24   
  852                          }  K$TPARM_CP6_OPTIONS  - Set CP6 transport options
  853                          }
  854                          }  K$TPARM_FLOW_STOP    - Flow stop host session
  855                          }  K$TPARM_FLOW_START   - Flow start host session
  856                          .fin
  857
  858                          The fixed part of a CP-6 Control TPDU contains
  859                          the following:
  860                          */
  861      %MACRO K$TPDU_CP6 (NAME=K$TPDU_CP6,STCLASS=BASED,ALGN=ALIGNED,LAST=";");
  862      %LSET LISTDIR='0'B;
  863      %LSET LISTEXP='1'B;
  864      %LSET LISTCOM='0'B;
  865      %LSET LISTSUB='1'B;
  866      %LSET L6=BITBIN(MODE_FEP);
  867      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  868      %IF (SUBSTR(STR,0,6)='STATIC') OR
  869      (SUBSTR(STR,0,8)='CONSTANT') OR
  870      (SUBSTR(STR,0,3)='EXT');
  871      %LSET INIT=CHARTEXT('INIT');
  872      %LSET EINIT=CHARTEXT('');
  873      %ELSE;
  874      %LSET INIT=CHARTEXT('/*');
  875      %LSET EINIT=CHARTEXT('*/');
  876      %ENDIF;
  877
  878      DCL 1 NAME STCLASS ALGN,
  879            2 LI UBIN BYTE CALIGNED %INIT(LENGTHC(NAME))%EINIT,
  880                          /*K* LI - UBIN BYTE.
  881                          .XEQ K_TRANSPORT_M K$TPDU_GENCP6IC LI
  882                          */
  883      %IF NOT(MODE_FEP);
  884            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
  885      %ENDIF;
  886            2 TYPE UBIN(4) UNAL %INIT(%K_TPDU_TYPE_CP6)%EINIT,
  887                          /*K* TYPE - UBIN(4).
  888                          The TYPE field in an CP-6 Control TPDU is always
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      25   
  889                          set to TPDU_CP6 (0).
  890                          */
  891            2 MBZ UBIN(4) UNAL %INIT(0)%EINIT,
  892            2 DST_REF UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT LAST
  893                          /*K* DST_REF - UBIN(16).
  894                          .XEQ K_TRANSPORT_M K$TPDU_GENERIC DST_REF
  895                          */
  896      %MEND;
  897
  898                          /*F* NAME: K$TPARM_GENERIC
  899
  900                          The K$TPARM_GENERIC macro in file K_TRANSPORT_M
  901                          generates a generic structure for the parameters
  902                          that are permitted in the variable part of a
  903                          Transport Protocol Data Unit.
  904
  905                          Each TPDU parameter contains the following:
  906                          */
  907      %MACRO K$TPARM_GENERIC (NAME=K$TPARM_GENERIC,STCLASS=BASED,ALGN=ALIGNED);
  908      %LSET LISTDIR='0'B;
  909      %LSET LISTEXP='1'B;
  910      %LSET LISTCOM='0'B;
  911      %LSET LISTSUB='1'B;
  912      %LSET L6=BITBIN(MODE_FEP);
  913      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  914      %IF (SUBSTR(STR,0,6)='STATIC') OR
  915      (SUBSTR(STR,0,8)='CONSTANT') OR
  916      (SUBSTR(STR,0,3)='EXT');
  917      %LSET INIT=CHARTEXT('INIT');
  918      %LSET EINIT=CHARTEXT('');
  919      %ELSE;
  920      %LSET INIT=CHARTEXT('/*');
  921      %LSET EINIT=CHARTEXT('*/');
  922      %ENDIF;
  923
  924      DCL 1 NAME STCLASS ALGN,
  925            2 CODE UBIN BYTE CALIGNED,
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      26   
  926                          /*K* CODE - UBIN BYTE.
  927                          Contains a value to indicate the type
  928                          of parameter that follows:
  929                          .XEQ K_TRANSPORT_E K_TPARM_CODE_equ
  930                          */
  931            2 LEN UBIN BYTE CALIGNED,
  932                          /*K* LEN - UBIN BYTE.
  933                          Contains the byte size of the parameter
  934                          value field, K$PARM.PVALUE.
  935                          */
  936            2 PVALUE UBIN BYTE CALIGNED;
  937                          /*K* PVALUE - UBIN BYTE.
  938                          Contains the Parameter Value as identified
  939                          by the CODE field.  The actual length is
  940                          determined by the LEN value.
  941                          */
  942      %MEND;
  943
  944      /*F* NAME: K$TPARM_CHKSUM - Checksum TPDU Parameter Structure
  945
  946      */
  947
  948      %MACRO K$TPARM_CHKSUM (NAME=K$TPARM_CHKSUM,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";",
  949                             CODE=%K_TPARM_CHKSUM,
  950                             X=0,
  951                             Y=0);
  952      %LSET LISTDIR='0'B;
  953      %LSET LISTEXP='1'B;
  954      %LSET LISTCOM='0'B;
  955      %LSET LISTSUB='1'B;
  956      %LSET L6=BITBIN(MODE_FEP);
  957      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  958      %IF (SUBSTR(STR,0,6)='STATIC') OR
  959      (SUBSTR(STR,0,8)='CONSTANT') OR
  960      (SUBSTR(STR,0,3)='EXT');
  961      %LSET INIT=CHARTEXT('INIT');
  962      %LSET EINIT=CHARTEXT('');
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      27   
  963      %ELSE;
  964      %LSET INIT=CHARTEXT('/*');
  965      %LSET EINIT=CHARTEXT('*/');
  966      %ENDIF;
  967
  968      %IF LVL=1;
  969      DCL 1 NAME STCLASS ALGN,
  970      %ELSE;
  971             %(LVL) NAME CALIGNED,
  972      %ENDIF;
  973             %(LVL+1) %CHARTEXT('CODE ') UBIN BYTE CALIGNED %INIT(CODE)%EINIT,
  974                          /*K* CODE - UBIN BYTE.
  975                          Contains the value K_TPARM_CHKSUM (195) that
  976                          indicates that this a a checksum parameter.
  977                          */
  978             %(LVL+1) %CHARTEXT('LEN ') UBIN BYTE CALIGNED %INIT(2)%EINIT,
  979                          /*K* LEN - UBIN BYTE.
  980                          Contains 2, the byte size of the checksum
  981                          parameter data.
  982                          */
  983             %(LVL+1) %CHARTEXT('X ') UBIN BYTE CALIGNED %INIT(X)%EINIT,
  984                          /*K* X - UBIN BYTE.
  985                          Contains the first byte of the checksum.
  986                          */
  987             %(LVL+1) %CHARTEXT('Y ') UBIN BYTE CALIGNED %INIT(Y)%EINIT LAST
  988                          /*K* Y - UBIN BYTE.
  989                          Contains the second byte of the checksum.
  990                          */
  991      %MEND;
  992      /*F* NAME: K$TPARM_VERSION - Version TPDU Parameter Structure
  993      */
  994
  995
  996      %MACRO K$TPARM_VERSION (NAME=K$TPARM_VERSION,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
  997      %LSET LISTDIR='0'B;
  998      %LSET LISTEXP='1'B;
  999      %LSET LISTCOM='0'B;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      28   
 1000      %LSET LISTSUB='1'B;
 1001      %LSET L6=BITBIN(MODE_FEP);
 1002      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1003      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1004      (SUBSTR(STR,0,8)='CONSTANT') OR
 1005      (SUBSTR(STR,0,3)='EXT');
 1006      %LSET INIT=CHARTEXT('INIT');
 1007      %LSET EINIT=CHARTEXT('');
 1008      %ELSE;
 1009      %LSET INIT=CHARTEXT('/*');
 1010      %LSET EINIT=CHARTEXT('*/');
 1011      %ENDIF;
 1012
 1013      %IF LVL=1;
 1014      DCL 1 NAME STCLASS ALGN,
 1015      %ELSE;
 1016             %(LVL) NAME CALIGNED,
 1017      %ENDIF;
 1018             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1019                          /*K* CODE - UBIN BYTE.
 1020                          Contains the value K_TPARM_VERSION (196) that
 1021                          indicates that this a a version parameter.
 1022                          */
 1023             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1024                          /*K* LEN - UBIN BYTE.
 1025                          Contains 1, the byte size of the VERS field.
 1026                          */
 1027             %(LVL+1) VERS UBIN BYTE CALIGNED LAST
 1028                          /*K* VERS - UBIN BYTE.
 1029                          Contains a value to indicate the
 1030                          software version.
 1031                          */
 1032      %MEND;
 1033      /*F* NAME: K$TPARM_TPDUSZ - TPDU_size Parameter Structure
 1034      */
 1035
 1036
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      29   
 1037      %MACRO K$TPARM_TPDUSZ (NAME=K$TPARM_TPDUSZ,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1038      %LSET LISTDIR='0'B;
 1039      %LSET LISTEXP='1'B;
 1040      %LSET LISTCOM='0'B;
 1041      %LSET LISTSUB='1'B;
 1042      %LSET L6=BITBIN(MODE_FEP);
 1043      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1044      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1045      (SUBSTR(STR,0,8)='CONSTANT') OR
 1046      (SUBSTR(STR,0,3)='EXT');
 1047      %LSET INIT=CHARTEXT('INIT');
 1048      %LSET EINIT=CHARTEXT('');
 1049      %ELSE;
 1050      %LSET INIT=CHARTEXT('/*');
 1051      %LSET EINIT=CHARTEXT('*/');
 1052      %ENDIF;
 1053
 1054      %IF LVL=1;
 1055      DCL 1 NAME STCLASS ALGN,
 1056      %ELSE;
 1057             %(LVL) NAME CALIGNED,
 1058      %ENDIF;
 1059             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1060                          /*K* CODE - UBIN BYTE.
 1061                          Contains the value K_TPARM_TPDUSZ (192) that
 1062                          indicates that this a a TPDU size parameter.
 1063                          */
 1064             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1065                          /*K* LEN - UBIN BYTE.
 1066                          Contains 1, the byte size of the SIZE field.
 1067                          */
 1068             %(LVL+1) SIZE UBIN BYTE CALIGNED LAST
 1069                          /*K* SIZE - UBIN BYTE.
 1070                          Contains a value to indicate the proposed
 1071                          maximum TPDU size.  The EQUs in file
 1072                          K_TRANSPORT_E may be used to decode the
 1073                          meaning of this value.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      30   
 1074
 1075                          .xeq K_TRANSPORT_E K_TPDUSIZE_equ
 1076                          */
 1077      %MEND;
 1078      /*F* NAME: K$TPARM_ALT_CLASS - Alternate Protocol Class Parameter Structure
 1079      */
 1080
 1081
 1082      %MACRO K$TPARM_ALT_CLASS (NAME=K$TPARM_ALT_CLASS,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";",NCLASS=0);
 1083      %LSET LISTDIR='0'B;
 1084      %LSET LISTEXP='1'B;
 1085      %LSET LISTCOM='0'B;
 1086      %LSET LISTSUB='1'B;
 1087      %LSET L6=BITBIN(MODE_FEP);
 1088      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1089      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1090      (SUBSTR(STR,0,8)='CONSTANT') OR
 1091      (SUBSTR(STR,0,3)='EXT');
 1092      %LSET INIT=CHARTEXT('INIT');
 1093      %LSET EINIT=CHARTEXT('');
 1094      %ELSE;
 1095      %LSET INIT=CHARTEXT('/*');
 1096      %LSET EINIT=CHARTEXT('*/');
 1097      %ENDIF;
 1098
 1099      %IF LVL=1;
 1100      DCL 1 NAME STCLASS ALGN,
 1101      %ELSE;
 1102             %(LVL) NAME CALIGNED,
 1103      %ENDIF;
 1104             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1105                          /*K* CODE - UBIN BYTE.
 1106                          Contains the value K_TPARM_ALT_CLASS (199) that
 1107                          indicates that this a a alternate protocol class
 1108                          parameter.
 1109                          */
 1110             %(LVL+1) LEN UBIN BYTE CALIGNED,
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      31   
 1111                          /*K* LEN - UBIN BYTE.
 1112                          Contains the size of the CLASS array.
 1113                          */
 1114             %(LVL+1) CLASS(0:NCLASS) UBIN BYTE CALIGNED LAST
 1115                          /*K* CLASS(0:0) - UBIN BYTE.
 1116                          Each entry in the array contains a decimal
 1117                          value to indicate the desired alternate class(es).
 1118                          Permissable values are 0 through 4.
 1119                          */
 1120      %MEND;
 1121      /*F* NAME: K$TPARM_TSAP_ID - TSAP_ID Parameter Structure
 1122      */
 1123
 1124
 1125      %MACRO K$TPARM_TSAP_ID (NAME=K$TPARM_TSAP_ID,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1126      %LSET LISTDIR='0'B;
 1127      %LSET LISTEXP='1'B;
 1128      %LSET LISTCOM='0'B;
 1129      %LSET LISTSUB='1'B;
 1130      %LSET L6=BITBIN(MODE_FEP);
 1131      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1132      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1133      (SUBSTR(STR,0,8)='CONSTANT') OR
 1134      (SUBSTR(STR,0,3)='EXT');
 1135      %LSET INIT=CHARTEXT('INIT');
 1136      %LSET EINIT=CHARTEXT('');
 1137      %ELSE;
 1138      %LSET INIT=CHARTEXT('/*');
 1139      %LSET EINIT=CHARTEXT('*/');
 1140      %ENDIF;
 1141
 1142      %IF LVL=1;
 1143      DCL 1 NAME STCLASS ALGN,
 1144      %ELSE;
 1145             %(LVL) NAME CALIGNED,
 1146      %ENDIF;
 1147             %(LVL+1) CODE UBIN BYTE CALIGNED,
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      32   
 1148                          /*K* CODE - UBIN BYTE.
 1149                          Contains the value K_TPARM_CALLING_TSAP (193) or
 1150                          K_TPARM_CALLED_TSAP (194) that indicates that this is
 1151                          a Transport Service Access Point Identifer parameter.
 1152                          */
 1153             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1154                          /*K* LEN - UBIN BYTE.
 1155                          Contains a value, 1 through 32, that
 1156                          is the byte size of the ID field.
 1157                          */
 1158             %(LVL+1) ID CHAR(32) CALIGNED LAST
 1159                          /*K* ID -CHAR(1-32).
 1160                          Contains the TSAP Identifer.
 1161                          */
 1162      %MEND;
 1163      /*F* NAME: K$TPARM_OPTION - Options TPDU Parameter Structure
 1164      */
 1165
 1166
 1167      %MACRO K$TPARM_OPTION (NAME=K$TPARM_OPTION,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1168      %LSET LISTDIR='0'B;
 1169      %LSET LISTEXP='1'B;
 1170      %LSET LISTCOM='0'B;
 1171      %LSET LISTSUB='1'B;
 1172      %LSET L6=BITBIN(MODE_FEP);
 1173      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1174      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1175      (SUBSTR(STR,0,8)='CONSTANT') OR
 1176      (SUBSTR(STR,0,3)='EXT');
 1177      %LSET INIT=CHARTEXT('INIT');
 1178      %LSET EINIT=CHARTEXT('');
 1179      %ELSE;
 1180      %LSET INIT=CHARTEXT('/*');
 1181      %LSET EINIT=CHARTEXT('*/');
 1182      %ENDIF;
 1183
 1184      %IF LVL=1;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      33   
 1185      DCL 1 NAME STCLASS ALGN,
 1186      %ELSE;
 1187             %(LVL) NAME CALIGNED,
 1188      %ENDIF;
 1189             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1190                          /*K* CODE - UBIN BYTE.
 1191                          Contains the value K_TPARM_OPTION (198) that
 1192                          indicates that this a an options parameter.
 1193                          */
 1194             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1195                          /*K* LEN - UBIN BYTE.
 1196                          Contains 1, the byte size of the options parameter.
 1197                          */
 1198      %IF NOT(MODE_FEP);
 1199             %(LVL+1) * BIT(1) UNAL,
 1200      %ENDIF;
 1201             %(LVL+1) MBZ BIT(6) UNAL,
 1202             %(LVL+1) CHKSUM BIT(1) UNAL,
 1203                          /*K* CHKSUM - BIT(1).
 1204                          If set, indicates that the checksum parameter
 1205                          is NOT to be used with TPDUs on this transport
 1206                          connection.  Checksums are used with Class 4 only.
 1207                          */
 1208             %(LVL+1) EXPD BIT(1) UNAL LAST
 1209                          /*K* EXPD - BIT(1).
 1210                          If set, indicates that the use of transport
 1211                          expedited data transfer service is to be allowed
 1212                          on this transport connection.
 1213                          */
 1214      %MEND;
 1215
 1216
 1217
 1218      /*F* NAME: K$TPARM_ACK_TIME - Acknowledge Time Parameter Structure
 1219
 1220      The Acknowledge Time parameter is optionally used with TPDU_CR and
 1221      TPDU_CC in class 4.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      34   
 1222      */
 1223
 1224
 1225      %MACRO K$TPARM_ACK_TIME (NAME=K$TPARM_ACK_TIME,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1226      %LSET LISTDIR='0'B;
 1227      %LSET LISTEXP='1'B;
 1228      %LSET LISTCOM='0'B;
 1229      %LSET LISTSUB='1'B;
 1230      %LSET L6=BITBIN(MODE_FEP);
 1231      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1232      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1233      (SUBSTR(STR,0,8)='CONSTANT') OR
 1234      (SUBSTR(STR,0,3)='EXT');
 1235      %LSET INIT=CHARTEXT('INIT');
 1236      %LSET EINIT=CHARTEXT('');
 1237      %ELSE;
 1238      %LSET INIT=CHARTEXT('/*');
 1239      %LSET EINIT=CHARTEXT('*/');
 1240      %ENDIF;
 1241
 1242      %IF LVL=1;
 1243      DCL 1 NAME STCLASS ALGN,
 1244      %ELSE;
 1245             %(LVL) NAME CALIGNED,
 1246      %ENDIF;
 1247             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1248                          /*K* CODE - UBIN BYTE.
 1249                          Contains the value K_TPARM_ACK_TIME (133) that
 1250                          indicates that this is a Acknowledge Time parameter.
 1251                          */
 1252             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1253                          /*K* LEN - UBIN BYTE.
 1254                          Contains 2, the byte size of the MILLISEC field.
 1255                          */
 1256             %(LVL+1) MILLISEC UBIN(%(18-L6*2)) CALIGNED LAST
 1257                          /*K* MILLISEC - UBIN(16).
 1258                          Contains the maximum acknowledge time, expressed
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      35   
 1259                          in milliseconds.
 1260                          */
 1261      %MEND;
 1262
 1263
 1264
 1265      /*F* NAME: K$TPARM_CLR_INFO - Clearing Info TPDU Parameter Structure
 1266      */
 1267
 1268
 1269      %MACRO K$TPARM_CLR_INFO (NAME=K$TPARM_CLR_INFO,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1270      %LSET LISTDIR='0'B;
 1271      %LSET LISTEXP='1'B;
 1272      %LSET LISTCOM='0'B;
 1273      %LSET LISTSUB='1'B;
 1274      %LSET L6=BITBIN(MODE_FEP);
 1275      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1276      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1277      (SUBSTR(STR,0,8)='CONSTANT') OR
 1278      (SUBSTR(STR,0,3)='EXT');
 1279      %LSET INIT=CHARTEXT('INIT');
 1280      %LSET EINIT=CHARTEXT('');
 1281      %ELSE;
 1282      %LSET INIT=CHARTEXT('/*');
 1283      %LSET EINIT=CHARTEXT('*/');
 1284      %ENDIF;
 1285
 1286      %IF LVL=1;
 1287      DCL 1 NAME STCLASS ALGN,
 1288      %ELSE;
 1289             %(LVL) NAME CALIGNED,
 1290      %ENDIF;
 1291             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1292                          /*K* CODE - UBIN BYTE.
 1293                          Contains the value K_TPARM_CLR_INFO (224) that
 1294                          indicates that this a clearing Info parameter.
 1295                          */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      36   
 1296             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1297                          /*K* LEN - UBIN BYTE.
 1298                          Contains the length of the PVALUE field.  This
 1299                          may specify any size provided that the length of
 1300                          the TPDU_DR does not exceed the maximum.
 1301
 1302                          If generated by CP-6, the value will be 1, the
 1303                          byte size of the error code that follows.
 1304                          */
 1305             %(LVL+1) PVALUE CHAR(1) CALIGNED,
 1306                          /*K* PVALUE.
 1307                          Contains additional information concerning the
 1308                          disconnect.  The size and contents of this field
 1309                          is defined by the implementation sending the
 1310                          disconnect.  Also see ERR.
 1311                          */
 1312             %(LVL+1) ERR REDEF PVALUE UBIN BYTE CALIGNED LAST
 1313                          /*K* ERR - UBIN BYTE.
 1314                          If generated by CP-6, ERR (a REDEF of PVALUE)
 1315                          contains the error code used to clarify the
 1316                          reason specified in the Disconnect Request TPDU.
 1317                          .xeq K_TRANSPORT_E K$TCTX_ERR_equ VALUES
 1318                          */
 1319      %MEND;
 1320
 1321
 1322      /*F* NAME: K$TPARM_SUBSEQ - Subsequence Parameter Structure
 1323
 1324      The Subsequence parameter is optionally used with TPDU_AK in Class 4.
 1325      This parameter is used to ensure that Acknowledgement TPDUs
 1326      are processed in the correct sequence.  If it is absent,
 1327      this is equivalent to transmitting the parameter with a
 1328      value of zero.
 1329      */
 1330
 1331
 1332      %MACRO K$TPARM_SUBSEQ (NAME=K$TPARM_SUBSEQ,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      37   
 1333      %LSET LISTDIR='0'B;
 1334      %LSET LISTEXP='1'B;
 1335      %LSET LISTCOM='0'B;
 1336      %LSET LISTSUB='1'B;
 1337      %LSET L6=BITBIN(MODE_FEP);
 1338      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1339      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1340      (SUBSTR(STR,0,8)='CONSTANT') OR
 1341      (SUBSTR(STR,0,3)='EXT');
 1342      %LSET INIT=CHARTEXT('INIT');
 1343      %LSET EINIT=CHARTEXT('');
 1344      %ELSE;
 1345      %LSET INIT=CHARTEXT('/*');
 1346      %LSET EINIT=CHARTEXT('*/');
 1347      %ENDIF;
 1348
 1349      %IF LVL=1;
 1350      DCL 1 NAME STCLASS ALGN,
 1351      %ELSE;
 1352             %(LVL) NAME CALIGNED,
 1353      %ENDIF;
 1354             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1355                          /*K* CODE - UBIN BYTE.
 1356                          Contains the value K_TPARM_SUBSEQ (138) that
 1357                          indicates that this is a subsequence parameter.
 1358                          */
 1359             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1360                          /*K* LEN - UBIN BYTE.
 1361                          Contains 2, the byte size of the NUM field.
 1362                          */
 1363             %(LVL+1) NUM UBIN(%(18-L6*2)) CALIGNED LAST
 1364                          /*K* NUM - UBIN(16).
 1365                          Contains the subsequence number.
 1366                          */
 1367      %MEND;
 1368
 1369
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      38   
 1370
 1371      /*F* NAME: K$TPARM_FCC - Flow Control Confirmation Parameter Structure
 1372
 1373      The Flow Control Confirmation parameter is optionally used with TPDU_AK
 1374      in Class 4.  This parameter contains a copy of the information received
 1375      in a TPDU_AK.
 1376      */
 1377
 1378
 1379      %MACRO K$TPARM_FCC (NAME=K$TPARM_FCC,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1380      %LSET LISTDIR='0'B;
 1381      %LSET LISTEXP='1'B;
 1382      %LSET LISTCOM='0'B;
 1383      %LSET LISTSUB='1'B;
 1384      %LSET L6=BITBIN(MODE_FEP);
 1385      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1386      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1387      (SUBSTR(STR,0,8)='CONSTANT') OR
 1388      (SUBSTR(STR,0,3)='EXT');
 1389      %LSET INIT=CHARTEXT('INIT');
 1390      %LSET EINIT=CHARTEXT('');
 1391      %ELSE;
 1392      %LSET INIT=CHARTEXT('/*');
 1393      %LSET EINIT=CHARTEXT('*/');
 1394      %ENDIF;
 1395
 1396      %IF LVL=1;
 1397      DCL 1 NAME STCLASS ALGN,
 1398      %ELSE;
 1399             %(LVL) NAME CALIGNED,
 1400      %ENDIF;
 1401             %(LVL+1) CODE UBIN BYTE CALIGNED %INIT(%K_TPARM_FCC)%EINIT,
 1402                          /*K* CODE - UBIN BYTE.
 1403                          Contains the value K_TPARM_FCC (140) that
 1404                          indicates that this is a flow control confirmation
 1405                          parmeter.
 1406                          */
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      39   
 1407             %(LVL+1) LEN UBIN BYTE CALIGNED %INIT(8)%EINIT,
 1408                          /*K* LEN - UBIN BYTE.
 1409                          Contains 8, the byte size of the FCC field.
 1410                          */
 1411             %(LVL+1) FCC,
 1412               %(LVL+2) LWE UBIN(%(36-L6*4)) CALIGNED %INIT(0)%EINIT,
 1413                          /*K* LWE - UBIN(16).
 1414                          Contains the YR_TU_NR value of the received TPDU_AK.
 1415                          */
 1416               %(LVL+2) YR_SUBSEQ UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
 1417                          /*K* YR_SUBSEQ - UBIN(16).
 1418                          Contains the NUM value of the K$TPARM_SUBSEQ
 1419                          of the received TPDU_AK, or zero if this parmaeter
 1420                          was not present.
 1421                          */
 1422               %(LVL+2) CDT UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT LAST
 1423                          /*K* CDT - UBIN(16).
 1424                          Contains the CDT value of the received TPDU_AK.
 1425                          */
 1426      %MEND;
 1427
 1428
 1429
 1430      /*F* NAME: K$TPARM_SSN_CRDT - Session Credit Parameter Structure
 1431      */
 1432
 1433
 1434      %MACRO K$TPARM_SSN_CRDT (NAME=K$TPARM_SSN_CRDT,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";",
 1435                               CREDIT=0);
 1436      %LSET LISTDIR='0'B;
 1437      %LSET LISTEXP='1'B;
 1438      %LSET LISTCOM='0'B;
 1439      %LSET LISTSUB='1'B;
 1440      %LSET L6=BITBIN(MODE_FEP);
 1441      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1442      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1443      (SUBSTR(STR,0,8)='CONSTANT') OR
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      40   
 1444      (SUBSTR(STR,0,3)='EXT');
 1445      %LSET INIT=CHARTEXT('INIT');
 1446      %LSET EINIT=CHARTEXT('');
 1447      %ELSE;
 1448      %LSET INIT=CHARTEXT('/*');
 1449      %LSET EINIT=CHARTEXT('*/');
 1450      %ENDIF;
 1451
 1452      %IF LVL=1;
 1453      DCL 1 NAME STCLASS ALGN,
 1454      %ELSE;
 1455             %(LVL) NAME CALIGNED,
 1456      %ENDIF;
 1457             %(LVL+1) CODE UBIN BYTE CALIGNED %INIT(%K_TPARM_SSN_CRDT)%EINIT,
 1458                          /*K* CODE - UBIN BYTE.
 1459                          Contains the value K_TPARM_SSN_CRDT (001) that
 1460                          indicates that this a session credit parameter.
 1461                          */
 1462             %(LVL+1) LEN UBIN BYTE CALIGNED %INIT(2)%EINIT,
 1463                          /*K* LEN - UBIN BYTE.
 1464                          Contains 2, the byte size used for the session
 1465                          credit parameter by CP-6.
 1466                          */
 1467             %(LVL+1) %CHARTEXT('CREDIT ') SBIN(%(18-L6*2)) CALIGNED %INIT(CREDIT)%EINIT LAST
 1468                          /*K* CREDIT - SBIN(16).
 1469                          Contains the credit value that session has
 1470                          granted to transport.  Note that this is an
 1471                          increment to previously granted credits,
 1472                          not a new limit.
 1473                          */
 1474      %MEND;
 1475
 1476
 1477
 1478
 1479      /*F* NAME: K$TPARM_CP6_OPTIONS - Set CP6 Options Parameter Structure
 1480
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      41   
 1481      The CP6_OPTIONS parameter is valid with TPDU_CP6 only.
 1482      The options are sent from the Host to the Fep if the TCONNECT_RSP
 1483      from Session has requested transport tracing for the inbound
 1484      OSI connection.
 1485      The CP6_OPTIONS parameter contains the following:
 1486      */
 1487
 1488
 1489      %MACRO K$TPARM_CP6_OPTIONS (NAME=K$TPARM_CP6_OPTIONS,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1490      %LSET LISTDIR='0'B;
 1491      %LSET LISTEXP='1'B;
 1492      %LSET LISTCOM='0'B;
 1493      %LSET LISTSUB='1'B;
 1494      %LSET L6=BITBIN(MODE_FEP);
 1495      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1496      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1497      (SUBSTR(STR,0,8)='CONSTANT') OR
 1498      (SUBSTR(STR,0,3)='EXT');
 1499      %LSET INIT=CHARTEXT('INIT');
 1500      %LSET EINIT=CHARTEXT('');
 1501      %ELSE;
 1502      %LSET INIT=CHARTEXT('/*');
 1503      %LSET EINIT=CHARTEXT('*/');
 1504      %ENDIF;
 1505
 1506      %IF LVL=1;
 1507      DCL 1 NAME STCLASS ALGN,
 1508      %ELSE;
 1509             %(LVL) NAME CALIGNED,
 1510      %ENDIF;
 1511             %(LVL+1) CODE UBIN BYTE CALIGNED,
 1512                          /*K* CODE - UBIN BYTE.
 1513                          Contains the value K_TPARM_CP6_OPTIONS (002) that
 1514                          indicates that this a CP6 options parameter.
 1515                          */
 1516             %(LVL+1) LEN UBIN BYTE CALIGNED,
 1517                          /*K* LEN - UBIN BYTE.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      42   
 1518                          Contains 2, the byte size used for the the CP6
 1519                          options parameter.
 1520                          */
 1521             %(LVL+1) OPTION,
 1522      %IF NOT(MODE_FEP);
 1523             %(LVL+2) * BIT(1) UNAL,
 1524      %ENDIF;
 1525             %(LVL+2) * BIT(8) UNAL,
 1526      %IF NOT(MODE_FEP);
 1527             %(LVL+2) * BIT(1) UNAL,
 1528      %ENDIF;
 1529             %(LVL+2) * BIT(1) UNAL,
 1530             %(LVL+2) TRACE BIT(1) UNAL,
 1531                          /*K* TRACE - BIT(1).
 1532                          */
 1533             %(LVL+2) * BIT(6) UNAL LAST
 1534      %MEND;
 1535
 1536
 1537
 1538      /*F* NAME: K$TPARM_FLOW_CONTROL - Set CP6 Flow Control Parameter Structure
 1539
 1540      The FLOW_CONTROL parameter is valide with TPDU_CP6 only.
 1541      A TPDU_CP6 with the FLOW_CONTROL parameter is sent only from
 1542      the local fep to the host.  This parameter contains the following:
 1543      */
 1544
 1545
 1546      %MACRO K$TPARM_FLOW_CONTROL (NAME=K$TPARM_CP6_FLOW_CONTROL,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1547      %LSET LISTDIR='0'B;
 1548      %LSET LISTEXP='1'B;
 1549      %LSET LISTCOM='0'B;
 1550      %LSET LISTSUB='1'B;
 1551      %LSET L6=BITBIN(MODE_FEP);
 1552      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1553      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1554      (SUBSTR(STR,0,8)='CONSTANT') OR
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      43   
 1555      (SUBSTR(STR,0,3)='EXT');
 1556      %LSET INIT=CHARTEXT('INIT');
 1557      %LSET EINIT=CHARTEXT('');
 1558      %ELSE;
 1559      %LSET INIT=CHARTEXT('/*');
 1560      %LSET EINIT=CHARTEXT('*/');
 1561      %ENDIF;
 1562
 1563      %IF LVL=1;
 1564      DCL 1 NAME STCLASS ALGN,
 1565      %ELSE;
 1566             %(LVL) NAME CALIGNED,
 1567      %ENDIF;
 1568             %(LVL+1) CODE UBIN BYTE CALIGNED %INIT(%K_TPARM_FLOW_STOP)%EINIT,
 1569                          /*K* CODE - UBIN BYTE.
 1570                          Contains the value K_TPARM_FLOW_STOP(27)
 1571                          indicating that the host is to stop sending data,
 1572                          K_TPARM_FLOW_START(28)
 1573                          indicating that the host may begin sending data, or
 1574                          K_TPARM_SSN_CRDT_ACK(29)
 1575                          indicating that the fep has recorded zero credits.
 1576                          */
 1577             %(LVL+1) LEN UBIN BYTE CALIGNED %INIT(0)%EINIT LAST
 1578                          /*K* LEN - UBIN BYTE.
 1579                          Contains 0 as there is no parameter value assocaited
 1580                          with this parameter.
 1581                          */
 1582      %MEND;
 1583
 1584
 1585
 1586
 1587      /*F* NAME: K$FRAG_HDR
 1588
 1589      The memory for transport buffers is allocated at boot time.
 1590      The number of pages reserved for transport buffers is specified
 1591      by the TBUFFER option of NETCON.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      44   
 1592
 1593      Copies of the CR, CC, DR, DT and ED TPDUs are retained in
 1594      the transport buffers to permit their later retransmission,
 1595      except that if a DR is sent in response to a CR there is no
 1596      need to retain a copy of the DR TPDU.
 1597
 1598      The buffers associated with a specific TCTX are chained together
 1599      through the pointer at K$FRAG_HDR.LINK$.  The head of the chain is
 1600      located through a pointer in KN$TCTX.SEND_HEAD$ or KN$TCTX.SEND_EHEAD$.
 1601      After each TPDU is acknowledged the copy may be discarded.
 1602      Copies may also be discarded when the connection is released.
 1603
 1604      The transport buffers are also used to retain a copy of the SPDUs
 1605      that have been received by transport that transport hasn't been
 1606      able to deliver to session, such as when the tpdus arrive out of
 1607      sequence.
 1608      These buffers associated with a specific TCTX are chained together
 1609      through the pointer at K$FRAG_HDR.LINK$.  The head of the chain is
 1610      located through the pointer at KN$TCTX.RECV_HEAD$ or KN$TCTX.RECV_EHEAD$.
 1611
 1612      These buffers may be discarded after the SPDU has successfully been
 1613      delivered to session.
 1614
 1615      Each data in the transport buffers is preceeded by a header
 1616      that is defined by the K$FRAG_HDR macro.  This header contains
 1617      the following:
 1618      */
 1619      %MACRO K$FRAG_HDR (NAME=K$FRAG_HDR,STCLASS=BASED,ALGN=ALIGNED,LVL=1,LAST=";");
 1620      %LSET LISTDIR='0'B;
 1621      %LSET LISTEXP='1'B;
 1622      %LSET LISTCOM='0'B;
 1623      %LSET LISTSUB='1'B;
 1624      %LSET L6=BITBIN(MODE_FEP);
 1625      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1626      %IF (SUBSTR(STR,0,6)='STATIC') OR
 1627      (SUBSTR(STR,0,8)='CONSTANT') OR
 1628      (SUBSTR(STR,0,3)='EXT');
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      45   
 1629      %LSET INIT=CHARTEXT('INIT');
 1630      %LSET EINIT=CHARTEXT('');
 1631      %ELSE;
 1632      %LSET INIT=CHARTEXT('/*');
 1633      %LSET EINIT=CHARTEXT('*/');
 1634      %ENDIF;
 1635
 1636      %IF LVL=1;
 1637      DCL 1 NAME STCLASS ALGN,
 1638      %ELSE;
 1639                %(LVL) NAME ALIGNED,
 1640      %ENDIF;
 1641                   %(LVL+1) BUFF_WSIZE UBIN(%(18-L6*2)) CALIGNED,
 1642                          /*K* BUFF_WSIZE - UBIN(16).
 1643                          Contains the word size of the transport buffer,
 1644                          including this header.
 1645                          */
 1646                   %(LVL+1) DATA_BSIZE UBIN(%(18-L6*2)) CALIGNED,
 1647                          /*K* DATA_BSIZE - UBIN(16).
 1648                          Contains the byte size of the tpdu in this buffer.
 1649                          */
 1650                   %(LVL+1) SEQ UBIN(%(36-L6*4)) CALIGNED,
 1651                   %(LVL+1) SEQ_SBIN REDEF SEQ SBIN(%(36-L6*4)),
 1652                          /*K* SEQ - UBIN(32).
 1653                          Contains the sequence number of the TPDU.  This
 1654                          value is initialized in each sent TPDU from the
 1655                          SEND_NEXT or SEND_EXPD value in the transport
 1656                          context block.
 1657
 1658                          This field is REDEFed as SEQ_SBIN and will
 1659                          contain a -1 if the TPDU in the buffer is
 1660                          a TPDU_CR or TPDU_CC and will contain 0 if
 1661                          if the TPDU is TPDU_DR.
 1662                          */
 1663                   %(LVL+1) LINK$ PTR ALIGNED,
 1664                          /*K* LINK$ - PTR.
 1665                          Contains the address of the next buffer on
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      46   
 1666                          the chain.  The head of the chain will be in
 1667                          either SEND_HEAD$, SEND_EHEAD$, RECV_HEAD$
 1668                          or *N*RECV_EHEAD$ of one of the active Transport
 1669                          Context Blocks.
 1670                          */
 1671                   %(LVL+1) FLAGS,
 1672
 1673      %IF NOT(MODE_FEP);
 1674                     %(LVL+2) * BIT(2) UNAL,
 1675      %ENDIF;
 1676                     %(LVL+2) * BIT(11) UNAL,
 1677                     %(LVL+2) * BIT(1) UNAL,
 1678                     %(LVL+2) ASSEMBLE BIT(1) UNAL,
 1679                          /*K* FLAGS.ASSEMBLE - BIT(1).
 1680                          If set, indicates that this buffer was allocated
 1681                          to assemble received fragments into one SPDU.
 1682                          */
 1683                     %(LVL+2) RECV BIT(1) UNAL,
 1684                          /*K* FLAGS.RECV - BIT(1).
 1685                          If set, indicates that this buffer was allocated
 1686                          to buffer a spdu that cannot be delived to session.
 1687                          */
 1688                     %(LVL+2) SEND BIT(1) UNAL,
 1689                          /*K* FLAGS.SEND - BIT(1).
 1690                          If set, indicates that this buffer was allocated
 1691                          to buffer a tpdu that is to be delivered to network.
 1692                          */
 1693                     %(LVL+2) EOT BIT(1) UNAL,
 1694                          /*K* FLAGS.EOT - BIT(1).
 1695                          If set, indicates that this is the last tpdu
 1696                          in a (possibly chained) spdu.  This bit is
 1697                          used only when the buffer is on the receive
 1698                          chain.
 1699                          */
 1700      %IF NOT(MODE_FEP);
 1701                     %(LVL+2) * BIT(2) UNAL,
 1702      %ENDIF;
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      47   
 1703                     %(LVL+2) * BIT(16) UNAL LAST
 1704      %MEND;
 1705
 1706
 1707
 1708      /*F* NAME: KNT_TRC_BUF
 1709
 1710      The transport trace buffer is allocated at boot time in
 1711      the unused space in PPUT.  The buffer is limited to 100 entries.
 1712
 1713      Tracing of the activity on all intermediate transport
 1714      connections may be selected by setting KNT_TRACE_INTERMEDIATE
 1715      in monitor data non-zero.
 1716      Tracing of the activity on all OSI transport connections
 1717      may be selected by setting KNT_TRACE_OSI in monitor data
 1718      non-zero.
 1719      Tracing of a specific transport connection requires setting
 1720      the KN$TCTX.OPTION.TRACE bit for that connection in the
 1721      running monitor.
 1722
 1723      There is no trace buffer for the host transport.
 1724
 1725      The KNT_TRC_BUF macro generates the structure for
 1726      an entry in the transport trace buffer.  Each entry in
 1727      the trace buffer contains the following:
 1728      */
 1729      %MACRO KNT_TRC_BUF (FPTN=KNT_TRACE_BUF, STCLASS=STATIC);
 1730
 1731      %LSET LISTDIR='0'B;
 1732      %LSET LISTEXP='1'B;
 1733      %LSET LISTCOM='0'B;
 1734      %LSET LISTSUB='1'B;
 1735
 1736      DCL 1 FPTN STCLASS ALIGNED,
 1737            2 WHO UBIN,
 1738                          /*K* WHO - CHAR(2) or UBIN(16).
 1739                          Identifies the activity that is being reported for
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      48   
 1740                          this transport connection.
 1741
 1742                          If this is an error condition, the TPDU has been
 1743                          discarded and WHO will contain an error code to
 1744                          indicate why.  See K$TCTX_ERR_equ in file K_TRANSPORT_E.
 1745
 1746                          Other activity on the transport connection is reported
 1747                          as a 2 character code as follows:
 1748                          }
 1749                          }type 1:
 1750                          }   SE - TPDU is being sent to peer
 1751                          }   RC - TPDU has been received from peer
 1752                          }   RT - TPDU has been retransmitted to peer
 1753                          }   RH - TPDU for intermediate connection has
 1754                          }        been received from host session
 1755                          }   FH - TPDU for intermediate connection has
 1756                          }        been forwarded to host session
 1757                          }   DS - TPDU has been delivered to local or
 1758                          }        host session after being buffered
 1759                          }
 1760                          }type 2:
 1761                          }   TR - Term function recevied
 1762                          }   CR - NCONNECT request sent
 1763                          }   CI - NCONNECT indication recevied
 1764                          }   CC - NCONNECT confirmation recevied
 1765                          }   NR - NRESET indication recevied
 1766                          }   ND - NDISCONNECT indication recevied
 1767                          */
 1768            2 TIME UBIN(32),
 1769                          /*K* TIME - UBIN(32).
 1770                          Contains the UTS at the time the activity
 1771                          was reported.
 1772                          */
 1773            2 TPDU CHAR(10);
 1774                          /*K* TPDU - BYTE(10).
 1775                          Contains the first 10 bytes of the TPDU in question
 1776                          for the first set of codes or WHO = error.
15:04 JUL 28 '97 K_TRANSPORT_M.:E05SI                                      49   
 1777
 1778                          Contains NETPARM.TCTX_ID, Callers address,
 1779                          FUNCTION and NODE for the second set of codes.
 1780                          */
 1781      %MEND;
 1782
 1783

