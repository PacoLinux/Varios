/*M* ENCRYPT_SI61 - Main program for Ben's encryption algorithm */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
ENCRYPT: PROC MAIN;
/*A* ENCRYPT: Encrypt a file using 72 bit keys */
 
DCL 1 INPUT_KEY STATIC,
      2 LEN UBIN BYTE UNAL,
      2 KEY# CHAR(256);
 
DCL INPUT CHAR(4096) STATIC;
DCL OUTPUT CHAR(4096) STATIC;
DCL KEY CHAR(8) STATIC;
DCL 1 KEY_REDEF REDEF KEY,
      2 KEY# BIT(72);
 
DCL KEY_MUNGE BIT(72);
DCL 1 MUNGED REDEF KEY_MUNGE,
      2 LEFT UBIN,
      2 RIGHT UBIN;
DCL M$SI DCB;
DCL M$OU DCB;
DCL SIZE UBIN;
DCL CHARN CHAR(SIZE) BASED;
DCL FIRST BIT(1) STATIC INIT('1'B);
 
DCL DES ENTRY(3);
DCL FTX_RPTERR ENTRY;
 
%INCLUDE CP_6;
%FPT_READ(FPTN=READ_ME,DCB=M$UC,BUF=INPUT);
%FPT_READ(FPTN=READ_SI,BUF=INPUT,KEYR=YES,KEY=INPUT_KEY,DCB=M$SI);
%FPT_WRITE(FPTN=WRITE_OU_SEQ,BUF=OUTPUT,DCB=M$OU);
%FPT_WRITE(FPTN=WRITE_OU_KEY,BUF=OUTPUT,DCB=M$OU,KEY=INPUT_KEY);
%F$DCB;
 
%FPT_OPEN(FPTN=OPEN_KEYED,
          DCB=M$OU,
          CTG=YES,
          ORG=KEYED,
          ACS=DIRECT);
 
%FPT_OPEN(FPTN=OPEN_SEQ,
          DCB=M$OU,
          CTG=YES);
 
%FPT_OPEN(FPTN=OPEN_SI,DCB=M$SI);
 
        CALL M$OPEN(OPEN_SI)
        WHENALTRETURN DO;
           CALL FTX_RPTERR;
           CALL M$ERR;
           END;
 
        KEY=' ';
        INPUT=' ';
        CALL M$READ(READ_ME)
        WHENALTRETURN DO;
           CALL FTX_RPTERR;
           CALL M$ERR;
           END;
        KEY=SUBSTR(INPUT,0,8);
        KEY_MUNGE=KEY_REDEF;
        IF MOD(MUNGED.LEFT,2)=1 THEN MUNGED.LEFT=MUNGED.LEFT+100;
        IF MOD(MUNGED.RIGHT,2)=1 THEN MUNGED.LEFT=MUNGED.RIGHT+100;
        MUNGED.LEFT=MUNGED.LEFT*MUNGED.RIGHT*MOD(MUNGED.LEFT,36);
        MUNGED.RIGHT=MUNGED.RIGHT*MUNGED.LEFT*MOD(MUNGED.RIGHT,36);
        KEY_REDEF=KEY_MUNGE;
        DO WHILE('1'B);
           INPUT=' ';
           OUTPUT=' ';
           CALL M$READ(READ_SI)
           WHENALTRETURN DO;
              CALL M$EXIT;
              END;
           IF FIRST THEN DO;
              IF INPUT_KEY.LEN=0 THEN CALL M$OPEN(OPEN_SEQ) ALTRET(OPEN_ERR);
              ELSE CALL M$OPEN(OPEN_KEYED) ALTRET(OPEN_ERR);
              FIRST='0'B;
              END;
           SIZE=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
           IF SIZE > 0 THEN DO;
              CALL BLOCK;
              WRITE_OU_SEQ.BUF_=VECTOR(ADDR(OUTPUT)->CHARN);
              WRITE_OU_KEY.BUF_=WRITE_OU_SEQ.BUF_;
              IF INPUT_KEY.LEN = 0 THEN CALL M$WRITE(WRITE_OU_SEQ);
              ELSE CALL M$WRITE(WRITE_OU_KEY);
              END;
           ELSE DO;
              WRITE_OU_SEQ.BUF_ = VECTOR(NIL);
              WRITE_OU_KEY.BUF_ = VECTOR(NIL);
              IF INPUT_KEY.LEN = 0 THEN CALL M$WRITE(WRITE_OU_SEQ);
              ELSE CALL M$WRITE(WRITE_OU_KEY);
              END;
           END;
 
OPEN_ERR: CALL FTX_RPTERR;
        CALL M$ERR;
%EJECT;
BLOCK:  PROC;
 
DCL PLAINTEXT CHAR(8);
DCL PLAINBIT  REDEF PLAINTEXT BIT(72);
DCL CIPHERTEXT CHAR(8);
DCL CIPHERBIT  REDEF CIPHERTEXT BIT(72);
DCL I UBIN;
DCL X UBIN;
 
        X=MOD(SIZE,8);
        IF X~=0 THEN SIZE=(SIZE/8)*8+8;
        DO I=0 TO SIZE BY 8;
           PLAINTEXT=SUBSTR(INPUT,I,8);
           CALL DES(PLAINTEXT,KEY_REDEF.KEY#,CIPHERTEXT);
           SUBSTR(OUTPUT,I,8)=CIPHERTEXT;
           END;
END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FTX_RPTERR: PROC;
 
%INCLUDE CP_6;
%F$DCB;
 
%B$ALT;
 
%B$TCB;
 
DCL B$TCB$ PTR SYMREF;
%FPT_ERRMSG(FPTN=ERRBUFFERMSG,
   OUTDCB1=M$DO,
   BUF=ERRBUFFER,
   CODE=ERRCODE,
   INCLCODE=NO);
 
%VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STATIC SYMDEF);
DCL ERRBUFFER CHAR(120) STATIC;
DCL M$DO DCB;
/*F*     NAME: FTX_RPTERR
         PURPOSE: Report ALTRET frame error.
 ***/
 
/********************/
 
        ERRBUFFERMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
        ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        ERRCODE.SEV = 4;
        CALL M$ERRMSG(ERRBUFFERMSG);
 
END FTX_RPTERR;
