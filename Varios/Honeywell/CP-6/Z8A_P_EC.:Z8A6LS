

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      LOCALLY_LEAST_COST_CORRECTION : PROC;
    7
    8      %ERROR_COST_SYMREFS;
    9      %ERROR_PATH_SYMREFS;
   10      %TSTRING_SYMREFS;
   11
   12      %MACRO CORR_BODY;
   13            2 DEL_LEN    SBIN WORD,
   14            2 DEL_COST   SBIN WORD,
   15            2 INS_TO_SYM SBIN WORD,
   16            2 INSRT_LEN  SBIN WORD,
   17            2 INSRT_COST SBIN WORD,
   18            2 INSRT (0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
   19      %MEND;
   20
   21
   22      DCL 1 LC,
   23            %CORR_BODY;
   24
   25      DCL 1 LR,
   26            %CORR_BODY;
   27
   28      DCL LARGE_DELETION BIT(1);
   29      DCL ACCUM_DEL_LEN SBIN WORD;
   30      DCL ACCUM_DEL_COST SBIN WORD;
   31      DCL ACCUM_INS_TO_SYM SBIN WORD;
   32
   33
   34      %MACRO TRIAL_PARSE_STACK_OVERFLOW;
   35
   36             /* The parse stack has overflowed, so abort the compilation.
   37             */
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          2    
   38
   39      DO;
   40        %RESET_ERROR_LOC;
   41        CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
   42        %TERMINATE;
   43      END;
   44
   45      %MEND;
   46
   47
   48      %ERRORPROC;  /* Instantiate the error procedure */
   49
   50
   51      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          3    
   52      CREATE_LARGE_DELETION: PROC;
   53
   54      /* Skip a number of lookahead tokens in the list in
   55         order to make room for more.   We still have not
   56         found a viable correction.
   57         KEEP ONLY THE FIRST SYMBOL WHICH IS THE ORIGINAL ERROR SYMBOL
   58         FOR ERROR MESSAGE TEXT AND LOCATION.
   59      */
   60
   61      DCL OLA_GET SBIN WORD;
   62      DCL OLINK SBIN WORD;
   63
   64      OLA_GET = O1COM.LA_GET;
   65
   66      DO WHILE O1COM.LA_STK.LINK(O1COM.LA_STK.LINK(O1COM.LA_GET)) ~= O1COM.LA_PUT;
   67
   68        O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
   69
   70      END;
   71
   72      OLINK                = O1COM.LA_STK.LINK(O1COM.LA_GET);
   73      O1COM.LA_STK(O1COM.LA_GET)       = O1COM.LA_STK(OLA_GET);
   74      O1COM.LA_STK.LINK(O1COM.LA_GET)  = OLINK;
   75      ACCUM_INS_TO_SYM     = O1COM.LA_STK.LINK(O1COM.LA_GET);
   76      LR.INS_TO_SYM        = ACCUM_INS_TO_SYM;
   77      ACCUM_DEL_LEN        = 2;
   78      ACCUM_DEL_COST       = DEL_COST(O1COM.LA_STK.SYMBOL(O1COM.LA_GET));
   79      LR.DEL_COST          = ACCUM_DEL_COST;
   80      LR.DEL_LEN           = ACCUM_DEL_LEN;
   81      O1COM.LA_CNT               = 2;
   82
   83      LARGE_DELETION       = '1'B;
   84
   85
   86      END;
   87
   88      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          4    
   89
   90      ABORT_CORRECTION : PROC;
   91
   92
   93      /* ABORT THE CORRECTION DUE TO SOME LIMITATION -- PROBABLY SPACE */
   94
   95      %RESET_ERROR_LOC;
   96      CALL ERROR (%E$CORRECTION_FAILURE);
   97      %TERMINATE;
   98
   99
  100      END ABORT_CORRECTION;
  101      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          5    
  102      CALC_CORRECTION : PROC (LRC);
  103
  104      /* Expand the least cost string of symbols to their
  105         least cost terminal equivalent
  106      */
  107
  108      DCL 1 LRC ALIGNED,
  109            %CORR_BODY;
  110
  111      DCL I SBIN WORD;
  112      DCL J SBIN WORD;
  113
  114      O1COM.CORRECTION.LEN  = 0;
  115      O1COM.CORRECTION.INDX = 0;
  116
  117      DO I = 0 TO LRC.INSRT_LEN - 1;
  118        DO J = LCS.INDX(LRC.INSRT(I)) TO
  119                  LCS.INDX(LRC.INSRT(I)) + LCS.LEN(LRC.INSRT(I)) - 1;
  120
  121          IF O1COM.CORRECTION.LEN < %INSRT_LEN_MAX THEN
  122            DO;
  123              O1COM.CORRECTION.SYM(O1COM.CORRECTION.LEN) = LCS_ELEM(J);
  124              O1COM.CORRECTION.LEN = O1COM.CORRECTION.LEN + 1;
  125            END;
  126
  127        END;
  128      END;
  129
  130
  131      END CALC_CORRECTION;
  132      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          6    
  133      GIVE_CORRECTION_MESSAGE : PROC;
  134
  135
  136
  137      DCL DEL_CHAR_OVERFLOW    SBIN WORD;
  138      DCL 1 DEL,
  139            2 TEXT,
  140              3 LENGTH SBIN WORD,
  141              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  142
  143      DCL INS_CHAR_OVERFLOW    SBIN WORD;
  144      DCL 1 INS,
  145            2 TEXT,
  146              3 LENGTH SBIN WORD,
  147              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  148      DCL 1 BEF,
  149            2 TEXT,
  150              3 LENGTH SBIN WORD,
  151              3 NAME CHAR(%DI_CHAR_LEN_MAX);
  152
  153      DCL DEL_DNT$             PTR;  /* TO DELETION STRING */
  154      DCL INS_DNT$             PTR;  /* TO INSERTION STRING */
  155      DCL INS_BEF_DNT$         PTR;  /* TO INSERTION BEFORE SYMBOL STRING */
  156
  157
  158
  159
  160
  161      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          7    
  162      PACK_TERM : PROC ( DI,       /* IN GIVE_CORRECTION_MESSAGE */
  163                         DI_CHAR_OVERFLOW,
  164                         PT_LEN,
  165                         PT_PTR);
  166
  167      DCL 1 DI ALIGNED,
  168            2 TEXT,
  169              3 LENGTH SBIN WORD,
  170                3 NAME CHAR(%DI_CHAR_LEN_MAX);
  171
  172      DCL DI_CHAR_OVERFLOW   SBIN WORD;
  173      DCL PT_LEN             SBIN WORD;
  174      DCL PT_PTR             PTR;
  175      DCL PT_CHAR            CHAR(PT_LEN) UNAL BASED(PT_PTR);
  176
  177
  178      IF (DI.TEXT.LENGTH < %DI_CHAR_LEN_MAX) AND (DI.TEXT.LENGTH > 0) THEN
  179        DO;
  180          SUBSTR(DI.TEXT.NAME, DI.TEXT.LENGTH, 1) = ' ';
  181          DI.TEXT.LENGTH = DI.TEXT.LENGTH + 1;
  182        END;
  183
  184      IF %DI_CHAR_LEN_MAX - DI.TEXT.LENGTH >= PT_LEN THEN
  185        DO;
  186          SUBSTR (DI.TEXT.NAME, DI.TEXT.LENGTH) = PT_CHAR;
  187          DI.TEXT.LENGTH = DI.TEXT.LENGTH + PT_LEN;
  188        END;
  189      ELSE
  190        IF DI_CHAR_OVERFLOW > 0 THEN
  191          DO;
  192            SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  193            DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  194                                 %DI_CHAR_LEN_MAX);
  195          END;
  196        ELSE
  197          IF DI.TEXT.LENGTH > 0 THEN
  198            DO;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          8    
  199              DI_CHAR_OVERFLOW = MINIMUM (%DI_CHAR_LEN_MAX/2 - 2,
  200                                          DI.TEXT.LENGTH);
  201              SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = '... ';
  202              DI_CHAR_OVERFLOW = DI_CHAR_OVERFLOW + 4;
  203              SUBSTR(DI.TEXT.NAME, DI_CHAR_OVERFLOW) = PT_CHAR;
  204              DI.TEXT.LENGTH = MINIMUM(DI_CHAR_OVERFLOW + PT_LEN,
  205                                    %DI_CHAR_LEN_MAX);
  206            END;
  207          ELSE
  208            DO;
  209              DI.TEXT.LENGTH = %DI_CHAR_LEN_MAX;
  210              DI.TEXT.NAME   = PT_CHAR;
  211            END;
  212
  213      END PACK_TERM;
  214
  215
  216
  217      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          9    
  218      CREATE_DEL_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  219
  220      /* Create DNT items for the deletion.
  221      */
  222
  223      DCL CONT_STR CHAR(4) STATIC INIT('... ');
  224
  225      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          10   
  226      PACK_DEL_TERM : PROC;  /* IN CREATE_DEL_DNT */
  227
  228
  229      IF O1COM.LA_STK.DNTPTR(O1COM.LA_GET) = ADDR(NIL) THEN
  230        CALL PACK_TERM(DEL,
  231                       DEL_CHAR_OVERFLOW,
  232                       BINBIT(TERM_STRING.LEN(O1COM.LA_STK.SYMBOL(O1COM.LA_GET)), 36),
  233                       ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(O1COM.LA_STK.SYMBOL(O1COM.LA_GET)))));
  234      ELSE
  235              CALL PACK_TERM ( DEL,
  236                                DEL_CHAR_OVERFLOW,
  237                                BINBIT(O1COM.LA_STK.DNTPTR(O1COM.LA_GET) -> DNT.TEXT.LENGTH,36),
  238                                ADDR(O1COM.LA_STK.DNTPTR(O1COM.LA_GET) -> DNT.TEXT.NAME));
  239
  240
  241      END PACK_DEL_TERM;
  242
  243
  244      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          11   
  245           /* MAIN BODY OF CREATE_DEL_DNT */
  246      DEL_DNT$           = ADDR(NIL);
  247      DEL.TEXT.LENGTH    = 0;
  248      DEL_CHAR_OVERFLOW  = 0;
  249
  250      IF LC.DEL_LEN > 0 THEN
  251        DO;
  252          IF LARGE_DELETION THEN
  253            DO;
  254              CALL PACK_DEL_TERM;
  255              CALL PACK_TERM ( DEL,
  256                               DEL_CHAR_OVERFLOW,
  257                               LENGTHC(CONT_STR),
  258                               ADDR(CONT_STR));
  259              DEL_CHAR_OVERFLOW = DEL.TEXT.LENGTH;
  260              O1COM.LA_GET     = O1COM.LA_STK.LINK(O1COM.LA_GET);
  261              O1COM.LA_CNT     = O1COM.LA_CNT - 1;
  262              LC.DEL_LEN = LC.DEL_LEN - 1;
  263            END;
  264          DO WHILE LC.DEL_LEN > 0;
  265            CALL PACK_DEL_TERM;
  266            O1COM.LA_GET     = O1COM.LA_STK.LINK(O1COM.LA_GET);
  267            O1COM.LA_CNT     = O1COM.LA_CNT - 1;
  268            LC.DEL_LEN = LC.DEL_LEN - 1;
  269          END;
  270
  271          IF DEL.TEXT.LENGTH > 0 THEN
  272            DO;
  273               DEL_DNT$ = ADDR(DEL);
  274            END;
  275        END;
  276
  277      END CREATE_DEL_DNT;
  278
  279
  280      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          12   
  281      CREATE_INS_DNT : PROC;   /* IN GIVE_CORRECTION_MESSAGE */
  282
  283      /* Create INS items for the insertion.
  284      */
  285
  286      DCL I SBIN WORD;
  287
  288      INS_DNT$           = ADDR(NIL);
  289      INS_BEF_DNT$       = ADDR(NIL);
  290      INS.TEXT.LENGTH       = 0;
  291      INS_CHAR_OVERFLOW  = 0;
  292
  293      IF O1COM.CORRECTION.LEN > 0 THEN
  294        DO;
  295          DO I = 0 TO O1COM.CORRECTION.LEN - 1;
  296            CALL PACK_TERM (INS,
  297                            INS_CHAR_OVERFLOW,
  298                            BINBIT(TERM_STRING.LEN(O1COM.CORRECTION.SYM(I)),36),
  299                            ADDR(SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(O1COM.CORRECTION.SYM(I)))));
  300          END;
  301
  302          IF INS.TEXT.LENGTH > 0 THEN
  303            DO;
  304               INS_DNT$ = ADDR(INS);
  305            END;
  306          IF O1COM.LA_STK.DNTPTR(O1COM.LA_GET) = ADDR(NIL) THEN
  307            DO;
  308              BEF.TEXT.LENGTH = MINIMUM(TERM_STRING.LEN(O1COM.LA_STK.SYMBOL(O1COM.LA_GET)),%DI_CHAR_LEN_MAX);
  309              BEF.TEXT.NAME = SUBSTR(TSTRING_SPACE,TERM_STRING.INDX(O1COM.LA_STK.SYMBOL(O1COM.LA_GET)));
  310               INS_BEF_DNT$ = ADDR(BEF);
  311            END;
  312          ELSE
  313            DO;
  314              BEF.TEXT.LENGTH = MINIMUM(O1COM.LA_STK.DNTPTR(O1COM.LA_GET) -> DNT.TEXT.LENGTH,
  315                                        %DI_CHAR_LEN_MAX);
  316              BEF.TEXT.NAME = O1COM.LA_STK.DNTPTR(O1COM.LA_GET) -> DNT.TEXT.NAME;
  317              INS_BEF_DNT$ = ADDR(BEF);
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          13   
  318            END;
  319
  320        END;
  321
  322      END CREATE_INS_DNT;
  323
  324      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          14   
  325      /* MAIN BODY OF GIVE_CORRECTION_MESSAGE */
  326
  327      %RESET_ERROR_LOC;
  328
  329      CALL CALC_CORRECTION (LC);
  330      CALL CREATE_DEL_DNT;
  331      CALL CREATE_INS_DNT;
  332
  333      IF DEL_DNT$ = ADDR(NIL) THEN
  334        CALL ERROR (%E$SYNTAX_INS, INS_DNT$, INS_BEF_DNT$);
  335      ELSE
  336        IF INS_DNT$=ADDR(NIL) THEN
  337          CALL ERROR (%E$SYNTAX_DEL, DEL_DNT$);
  338        ELSE
  339          CALL ERROR (%E$SYNTAX_REP, DEL_DNT$, INS_DNT$);
  340
  341      IF O1COM.CORRECTION.LEN > 0 THEN
  342        DO;
  343          O1COM.ERR_LA_GET = O1COM.LA_GET;
  344          O1COM.ERR_LA_PUT = O1COM.LA_PUT;
  345          O1COM.ERR_LA_CNT = O1COM.LA_CNT;
  346          O1COM.LA_CNT     = 0;
  347          O1COM.LA_GET     = O1COM.LA_PUT;
  348        END;
  349
  350      END GIVE_CORRECTION_MESSAGE;
  351      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          15   
  352      %IF TRAIL_PARSE_LENGTH > 0;
  353      CHECK_CONTEXT: PROC;
  354
  355      DCL PS(0:%PARSE_STACK_MAX) SBIN WORD;
  356      DCL PS_IDX SBIN WORD;
  357      DCL PSTATE SBIN WORD;
  358
  359      DCL INDX SBIN WORD;
  360      DCL ACTION SBIN WORD;
  361      DCL NT SBIN WORD;
  362
  363      %PARSE_SYMREFS;
  364
  365
  366      GET_CONTEXT : PROC;
  367
  368        DO WHILE (LR.DEL_LEN > O1COM.LA_CNT - %TRAIL_PARSE_LENGTH);
  369          %CALL_SCANNER;
  370          O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
  371          IF O1COM.LA_CNT > %LA_MAX THEN
  372            CALL ABORT_CORRECTION;
  373          O1COM.LA_CNT = O1COM.LA_CNT + 1;
  374        END;
  375
  376      END GET_CONTEXT;
  377
  378
  379      SAVE_STATE : PROC;
  380
  381        PS               = O1COM.PARSE_STACK;
  382        PS_IDX           = O1COM.PARSE_STACK_IDX;
  383        PSTATE           = O1COM.STATE;
  384        O1COM.ERR_LA_GET       = O1COM.LA_GET;
  385        O1COM.ERR_LA_PUT       = O1COM.LA_PUT;
  386        O1COM.ERR_LA_CNT       = O1COM.LA_CNT;
  387
  388      END SAVE_STATE;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          16   
  389
  390
  391      RESTORE_STATE : PROC;
  392
  393        O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
  394        O1COM.LA_GET           = O1COM.ERR_LA_GET;
  395        O1COM.LA_PUT           = O1COM.ERR_LA_PUT;
  396        O1COM.PARSE_STACK      = PS;
  397        O1COM.PARSE_STACK_IDX  = PS_IDX;
  398        O1COM.STATE            = PSTATE;
  399        O1COM.CORRECTION.LEN   = 0;
  400        O1COM.CORRECTION.INDX  = 0;
  401
  402      END RESTORE_STATE;
  403
  404
  405      BUILD_LOOKAHEAD : PROC;
  406
  407      DCL I SBIN WORD;
  408      DCL J SBIN WORD;
  409
  410        CALL CALC_CORRECTION (LR);
  411
  412        IF O1COM.CORRECTION.LEN > 0 THEN
  413          DO;
  414            O1COM.LA_CNT = 0;
  415            O1COM.LA_GET = O1COM.LA_PUT;
  416          END;
  417        ELSE
  418          DO;
  419            O1COM.LA_CNT = O1COM.ERR_LA_CNT - LR.DEL_LEN;
  420            O1COM.LA_GET = LR.INS_TO_SYM;
  421          END;
  422
  423      END BUILD_LOOKAHEAD;
  424
  425
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          17   
  426      TRAIL_PARSE : PROC;
  427
  428      DO WHILE '1'B;
  429
  430        IF ACTION_COL.BASE(O1COM.STATE) = 0 THEN
  431          ACTION = ACTION_COL.DEFAULT(O1COM.STATE);
  432        ELSE
  433          DO;
  434            IF O1COM.LA_CNT < 1 THEN
  435              IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN
  436                GOTO CORRECT_PARSE;
  437              ELSE
  438                IF O1COM.CORRECTION.LEN > 0 THEN
  439                  DO;
  440                    O1COM.LA_GET = O1COM.LA_PUT;
  441                    O1COM.LA_CNT = 1;
  442                    O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX);
  443                    O1COM.CORRECTION.LEN        = O1COM.CORRECTION.LEN - 1;
  444                    O1COM.CORRECTION.INDX       = O1COM.CORRECTION.INDX + 1;
  445                  END;
  446                ELSE
  447                  DO;
  448                    O1COM.CORRECTION.INDX = 0;
  449                    O1COM.LA_CNT = O1COM.ERR_LA_CNT - LR.DEL_LEN;
  450                    O1COM.LA_GET = LR.INS_TO_SYM;
  451                  END;
  452            INDX = ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.LA_GET);
  453            IF ACTION_ROW.CHECK(INDX) = O1COM.STATE THEN
  454              DO;
  455                ACTION = ACTION_ROW.NEXT(INDX);
  456                IF ACTION = 0 THEN
  457                  GOTO CORRECT_PARSE;
  458              END;
  459             ELSE
  460               ACTION = ACTION_COL.DEFAULT(O1COM.STATE);
  461          END;
  462
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          18   
  463            IF ACTION > 0 THEN
  464              DO;  /* SHIFT */
  465                O1COM.LA_CNT = O1COM.LA_CNT - 1;
  466                O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
  467                IF O1COM.PARSE_STACK_IDX >= %PARSE_STACK_MAX THEN
  468                  %TRIAL_PARSE_STACK_OVERFLOW;
  469                ELSE
  470                  DO;
  471                    O1COM.STATE                        = ACTION;
  472                    O1COM.PARSE_STACK_IDX              = O1COM.PARSE_STACK_IDX + 1;
  473                    O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX) = O1COM.STATE;
  474                  END;
  475              END;
  476            ELSE
  477              IF ACTION < 0 THEN
  478                DO;
  479                  ACTION           = - ACTION;
  480                  O1COM.PARSE_STACK_IDX  = O1COM.PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
  481                  NT               = PRODR.GOAL(ACTION);
  482                  IF GOTO_COL.BASE(NT) = 0 THEN
  483                    O1COM.STATE = GOTO_COL.DEFAULT(NT);
  484                  ELSE
  485                    DO;
  486                      INDX = GOTO_COL.BASE(NT) + O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX);
  487                      IF GOTO_ROW.CHECK(INDX) = NT THEN
  488                        O1COM.STATE = GOTO_ROW.NEXT(INDX);
  489                      ELSE
  490                        O1COM.STATE = GOTO_COL.DEFAULT(NT);
  491                    END;
  492                  O1COM.PARSE_STACK_IDX              = O1COM.PARSE_STACK_IDX + 1;
  493                  O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX) = O1COM.STATE;
  494                END;
  495              ELSE
  496                GOTO BAD_PARSE;
  497
  498      END;
  499
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          19   
  500      BAD_PARSE:
  501          LR.INSRT_COST = LR.INSRT_COST * 2;
  502
  503      CORRECT_PARSE:
  504
  505      END TRAIL_PARSE;
  506
  507
  508      CALL GET_CONTEXT;
  509      CALL SAVE_STATE;
  510      CALL BUILD_LOOKAHEAD;
  511      CALL TRAIL_PARSE;
  512      CALL RESTORE_STATE;
  513
  514      END CHECK_CONTEXT;
  515      %ENDIF;
  516      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          20   
  517      LR_INSERT : PROC;
  518
  519
  520      DCL I          SBIN WORD;
  521      DCL J          SBIN WORD;
  522      DCL K          SBIN WORD;  /* Current parse stack being considered */
  523      DCL I2         SBIN WORD;
  524      DCL H          UBIN WORD;
  525      DCL L          UBIN WORD;
  526      DCL M          UBIN WORD;
  527
  528      DCL LOWBASIS   SBIN WORD;
  529      DCL HIGHBASIS  SBIN WORD;
  530
  531      DCL MINITEM    SBIN WORD;
  532      DCL MINCOST    SBIN WORD;
  533      DCL MINPOS     SBIN WORD;
  534      DCL MINLCPINDX SBIN WORD;
  535      DCL MINPATH    SBIN WORD;
  536
  537      DCL LCP_ELEM_RET SBIN WORD;
  538
  539      DCL TRYCOST    SBIN WORD;
  540      DCL ACCUM_COST SBIN WORD;
  541
  542      /* THE NEXT DATA STRUCTURE IS A PL6 TWO DIMENSIONAL ARRAY */
  543
  544      DCL CURRSTAGE$ PTR;
  545      DCL NEXTSTAGE$ PTR;
  546
  547      DCL STAGE1$(0:%NR_BASIS_MAX) PTR;
  548      DCL STAGE2$(0:%NR_BASIS_MAX) PTR;
  549
  550      DCL 1 LCC BASED,
  551            2 COST SBIN HALF HALIGNED,
  552            2 LEN  SBIN HALF HALIGNED,
  553            2 STR(0:%INSRT_LEN_MAX) SBIN HALF HALIGNED;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          21   
  554
  555      DCL LCC_SPACE(0:%((INSRT_LEN_MAX/2 + 2)*(NR_BASIS_MAX*2 + 2))) SBIN WORD;
  556
  557      DCL CURRSTAGE(0:%NR_BASIS_MAX) PTR BASED(CURRSTAGE$);
  558      DCL NEXTSTAGE(0:%NR_BASIS_MAX) PTR BASED(NEXTSTAGE$);
  559
  560      /* END OF TWO DIMENSIONAL ARRAY */
  561
  562      DCL PRED_ITEM        SBIN WORD;
  563      DCL PRED_CLOSURE     BIT(1);
  564      DCL WORTHCONTINUING  BIT(1);
  565
  566      DCL CURRLOWBASIS     SBIN WORD;
  567      DCL CURRHIGHBASIS    SBIN WORD;
  568      DCL ITM              SBIN WORD;
  569      DCL NEXTLOWBASIS     SBIN WORD;
  570      DCL NEXTHIGHBASIS    SBIN WORD;
  571      DCL NEXTITEM         SBIN WORD;
  572      DCL P                SBIN WORD;
  573      DCL PE               SBIN WORD;
  574      DCL PATH_COST        SBIN WORD;
  575      DCL PELEM            UBIN HALF;
  576
  577
  578      %MACRO BASIS_ITEM_LIMITS(S=0, LOWB=LOWBASIS, HIGHB = HIGHBASIS);
  579
  580        DO;
  581          LOWB  = STATE_ITEM.CLOSURE(S-1) + 1;
  582          HIGHB = STATE_ITEM.BASIS(S);
  583        END;
  584
  585      %MEND;
  586
  587
  588      %MACRO BINSRCH_LCP(NTS=0);
  589
  590        DO;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          22   
  591          H            = LCP_UBOUND(O1COM.LA_STK.SYMBOL(LR.INS_TO_SYM));
  592          L            = LCP_UBOUND(O1COM.LA_STK.SYMBOL(LR.INS_TO_SYM) - 1) + 1;
  593          LCP_ELEM_RET = -1;
  594
  595          DO WHILE H >= L;
  596
  597            M = (L+H) / 2;
  598            IF NTS = LCP.NT(M) THEN
  599              DO;
  600                LCP_ELEM_RET = M;
  601                H = L - 1;
  602              END;
  603            ELSE
  604              IF NTS < LCP.NT(M) THEN
  605                H = M - 1;
  606              ELSE
  607                L = M + 1;
  608
  609          END; /* WHILE */
  610        END;
  611
  612      %MEND;
  613
  614
  615      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          23   
  616      INITSTAGES : PROC;  /* IN LR_INSERT */
  617
  618      /* INITIALIZE BOTH TWO DIMENSIONAL ARRAYS */
  619
  620      DCL I SBIN WORD;
  621
  622      DO I = 0 TO %NR_BASIS_MAX;
  623
  624        STAGE1$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*I));
  625        STAGE2$(I) = ADDR(LCC_SPACE(SIZEW(LCC)*(I + 1 + %NR_BASIS_MAX)));
  626
  627      END;  /* DO */
  628
  629      CURRSTAGE$ = ADDR(STAGE1$);
  630      NEXTSTAGE$ = ADDR(STAGE2$);
  631      CALL NEWSTAGE;
  632      CALL NEWSTAGE;
  633
  634      END INITSTAGES;
  635
  636      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          24   
  637      NEWSTAGE : PROC;  /* IN LR_INSERT */
  638
  639      /* SWAP TWO DIMENSIONAL ARRAYS FOR LOOKING AT NEXT STACK LEVEL */
  640      DCL I SBIN WORD;
  641      DCL TPTR PTR;
  642
  643      TPTR = NEXTSTAGE$;
  644      NEXTSTAGE$ = CURRSTAGE$;
  645      CURRSTAGE$ = TPTR;
  646
  647      DO I = 0 TO %NR_BASIS_MAX ;
  648
  649        NEXTSTAGE(I) -> LCC.COST = %INFINITE_COST;
  650        NEXTSTAGE(I) -> LCC.LEN = 0;
  651
  652      END;  /* DO */
  653
  654      END NEWSTAGE;
  655
  656
  657      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          25   
  658      FINDPRED : PROC (PREVSTATE, SUCCSTATE, ITM);  /* IN LR_INSERT */
  659
  660      /* FIND THE PREDECESSOR OF THE CURRENT ITEM */
  661
  662      DCL PREVSTATE SBIN WORD;
  663      DCL SUCCSTATE SBIN WORD;
  664      DCL ITM       SBIN WORD;
  665
  666      DCL I         SBIN WORD;
  667
  668      I = STATE_ITEM.CLOSURE(PREVSTATE -1) + 1;
  669
  670      DO WHILE (ITEM.SUCC_STATE(I) ~= SUCCSTATE)
  671            OR (ITEM.SUCC_ITEM(I) ~= ITM);
  672        I = I + 1;
  673      END;
  674
  675      PRED_ITEM = I;
  676      PRED_CLOSURE = I > STATE_ITEM.BASIS(PREVSTATE);
  677
  678      END FINDPRED;
  679
  680
  681
  682
  683      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          26   
  684      /* MAIN BODY OF LR_INSERT */
  685
  686      CALL INITSTAGES;
  687
  688      K = O1COM.PARSE_STACK_IDX;
  689
  690      LR.INSRT_COST = %INFINITE_COST;
  691      LR.INSRT_LEN = 0;
  692
  693      %BASIS_ITEM_LIMITS(S="O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX)",
  694               LOWB=LOWBASIS,HIGHB=HIGHBASIS);
  695      MINCOST = %INFINITE_COST;
  696
  697      DO I = LOWBASIS TO HIGHBASIS;
  698
  699
  700        /* LCC(K,I) = S(B(I)) */
  701
  702        CURRSTAGE(I-LOWBASIS) -> LCC.LEN = ITEM.LEN(I);
  703        I2       = 0;
  704        TRYCOST  = 0;
  705        CURRSTAGE(I-LOWBASIS) -> LCC.COST = 0;
  706
  707        DO J = ITEM.INDX(I) TO ITEM.INDX(I) + ITEM.LEN(I) -1;
  708
  709          %BINSRCH_LCP(NTS = "PATH_ELEM(J)");
  710
  711          IF LCP_ELEM_RET >= 0 THEN
  712            DO;
  713              TRYCOST = CURRSTAGE(I-LOWBASIS) -> LCC.COST + LCP.COST(LCP_ELEM_RET);
  714              IF TRYCOST < MINCOST THEN
  715                DO;
  716                  MINITEM    = I;
  717                  MINPOS     = J;
  718                  MINCOST    = TRYCOST;
  719                  MINLCPINDX = LCP_ELEM_RET;
  720                END;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          27   
  721            END;
  722
  723          CURRSTAGE(I-LOWBASIS) -> LCC.COST = CURRSTAGE(I-LOWBASIS) ->
  724                    LCC.COST + LCS.COST(PATH_ELEM(J));
  725          CURRSTAGE(I-LOWBASIS) -> LCC.STR(I2) = PATH_ELEM(J);
  726
  727          I2 = I2 + 1;
  728        END;  /* DO J */
  729
  730      END;  /* DO I */
  731
  732      /* SET UP THE INITIAL VALUE OF THE INSERT STRING */
  733
  734      IF MINCOST < %INFINITE_COST THEN
  735        DO;
  736          LR.INSRT_COST = MINCOST;
  737          LR.INSRT_LEN  = 0;
  738
  739          DO J = ITEM.INDX(MINITEM) TO MINPOS - 1;
  740
  741            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(J);
  742            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  743
  744          END;
  745
  746          /* INSERT E(B(I), A) */
  747
  748          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  749            CALL ABORT_CORRECTION;
  750
  751          DO J = LCP.INDX(MINLCPINDX) TO
  752                     LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
  753
  754            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(J);
  755            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  756
  757          END;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          28   
  758        END;
  759
  760      WORTHCONTINUING = K > 0;
  761
  762      DO WHILE WORTHCONTINUING;
  763
  764        WORTHCONTINUING = '0'B;
  765
  766        %BASIS_ITEM_LIMITS( S="O1COM.PARSE_STACK(K)",
  767                            LOWB = CURRLOWBASIS,
  768                            HIGHB = CURRHIGHBASIS);
  769
  770        DO ITM = 0 TO CURRHIGHBASIS - CURRLOWBASIS;
  771
  772          IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  773            DO;
  774              WORTHCONTINUING = '1'B;
  775
  776              CALL FINDPRED (O1COM.PARSE_STACK(K-1),
  777                             O1COM.PARSE_STACK(K),
  778                             ITM);
  779
  780              %BASIS_ITEM_LIMITS(S="O1COM.PARSE_STACK(K-1)",
  781                            LOWB = NEXTLOWBASIS,
  782                            HIGHB = NEXTHIGHBASIS);
  783
  784              IF PRED_CLOSURE THEN
  785                DO;
  786
  787                  DO NEXTITEM = 0 TO NEXTHIGHBASIS - NEXTLOWBASIS;
  788
  789                    /* CALC S(LP(S(K-1), PRED_ITEM, NEXTITEM) */
  790
  791                    P = ITEM.INDX(PRED_ITEM) + NEXTITEM;
  792
  793                    IF PATH.INDX(P) < 0 THEN
  794                      PATH_COST = %INFINITE_COST;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          29   
  795                    ELSE
  796                      DO;
  797                        PATH_COST = 0;
  798                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  799                          PATH_COST = PATH_COST + LCS.COST(PATH_ELEM(PE));
  800                        END;
  801                      END;
  802                    IF CURRSTAGE(ITM) -> LCC.COST + PATH_COST
  803                        < NEXTSTAGE(NEXTITEM) -> LCC.COST THEN
  804                      DO;
  805                        NEXTSTAGE(NEXTITEM) -> LCC = CURRSTAGE(ITM) -> LCC;
  806
  807                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) - 1;
  808                          IF NEXTSTAGE(NEXTITEM) -> LCC.LEN >= %INSRT_LEN_MAX THEN
  809                            CALL ABORT_CORRECTION;
  810                          NEXTSTAGE(NEXTITEM) -> LCC.STR(NEXTSTAGE(NEXTITEM) -> LCC.LEN)
  811                                 = PATH_ELEM(PE);
  812                          NEXTSTAGE(NEXTITEM) -> LCC.LEN
  813                                   = NEXTSTAGE(NEXTITEM) -> LCC.LEN + 1;
  814                        END;  /* DO */
  815
  816                        NEXTSTAGE(NEXTITEM) -> LCC.COST = CURRSTAGE(ITM) -> LCC.COST + PATH_COST;
  817                      END;  /* IF */
  818                  END;  /* DO NEXTITEM */
  819
  820                  /* CALC E(LP(S(K-1),PRED_ITEM), A) */
  821
  822                  IF CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  823                    DO;
  824                      MINCOST = %INFINITE_COST;
  825
  826                      DO P = ITEM.INDX(PRED_ITEM)
  827                              TO ITEM.INDX(PRED_ITEM)
  828                                   + ITEM.LEN(PRED_ITEM) -1;
  829
  830                        TRYCOST    = 0;
  831                        ACCUM_COST = 0;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          30   
  832                        IF PATH.INDX(P) >= 0 THEN
  833                        DO PE = PATH.INDX(P) TO PATH.INDX(P) + PATH.LEN(P) -1;
  834                          PELEM = PATH_ELEM(PE);
  835                          %BINSRCH_LCP(NTS=PELEM);
  836
  837                          IF LCP_ELEM_RET >= 0 THEN
  838                            DO;
  839                              TRYCOST = ACCUM_COST + LCP.COST(LCP_ELEM_RET);
  840                              IF TRYCOST < MINCOST THEN
  841                                DO;
  842                                  MINPATH     = P;
  843                                  MINPOS      = PE;
  844                                  MINCOST     = TRYCOST;
  845                                  MINLCPINDX  = LCP_ELEM_RET;
  846                                END;
  847                            END;
  848                          ACCUM_COST = ACCUM_COST + LCS.COST(PATH_ELEM(PE));
  849                        END;
  850                       END;
  851                      IF MINCOST + CURRSTAGE(ITM) -> LCC.COST < LR.INSRT_COST THEN
  852                        DO;
  853                         /* UPDATE INSERT */
  854                          LR.INSRT_LEN        = CURRSTAGE(ITM) -> LCC.LEN;
  855                          LR.INSRT            = CURRSTAGE(ITM) -> LCC.STR;
  856                          LR.INSRT_COST       = MINCOST + CURRSTAGE(ITM) -> LCC.COST;
  857
  858                          DO PE = PATH.INDX(MINPATH) TO MINPOS - 1;
  859                            IF LR.INSRT_LEN >= %INSRT_LEN_MAX THEN
  860                              CALL ABORT_CORRECTION;
  861                            LR.INSRT(LR.INSRT_LEN) = PATH_ELEM(PE);
  862                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  863                          END;
  864                          IF LR.INSRT_LEN + LCP.LEN(MINLCPINDX) > %INSRT_LEN_MAX THEN
  865                            CALL ABORT_CORRECTION;
  866
  867                          DO I = LCP.INDX(MINLCPINDX) TO
  868                                    LCP.INDX(MINLCPINDX) + LCP.LEN(MINLCPINDX) - 1;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          31   
  869
  870                            LR.INSRT(LR.INSRT_LEN) = LCP_ELEM(I);
  871                            LR.INSRT_LEN           = LR.INSRT_LEN + 1;
  872                          END;  /* DO */
  873                        END; /* IF */
  874                   END; /* IF */
  875
  876                END; /* IF */
  877              ELSE
  878                /* BASIS ITEM */
  879                IF CURRSTAGE(ITM) -> LCC.COST < NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC.COST THEN
  880                   NEXTSTAGE(PRED_ITEM - NEXTLOWBASIS) -> LCC = CURRSTAGE(ITM) -> LCC;
  881            END;
  882        END;
  883
  884        IF K <= 1 THEN
  885          WORTHCONTINUING = '0'B;
  886
  887        IF WORTHCONTINUING THEN
  888          DO;
  889            K = K - 1;
  890            CALL NEWSTAGE;
  891          END;
  892
  893      END; /* WHILE */
  894
  895
  896      END LR_INSERT;
  897      %EJECT;

09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          32   
  898
  899
  900
  901      /* MAIN BODY OF LOCALLY_LEAST_COST_CORRECTION */
  902
  903      LR.INSRT_LEN     = 0;
  904      LR.INSRT_COST    = %INFINITE_COST;
  905      ACCUM_DEL_LEN    = 0;
  906      ACCUM_DEL_COST   = 0;
  907      LR.DEL_LEN       = ACCUM_DEL_LEN;
  908      LR.DEL_COST      = ACCUM_DEL_COST;
  909
  910      LARGE_DELETION   = '0'B;
  911
  912      ACCUM_INS_TO_SYM = O1COM.LA_GET;
  913      LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  914
  915
  916      DO UNTIL (LR.INSRT_COST < %INFINITE_COST);
  917
  918        CALL LR_INSERT;
  919
  920        IF LR.INSRT_COST >= %INFINITE_COST THEN
  921          DO;
  922            ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  923               LR.DEL_LEN = ACCUM_DEL_LEN;
  924            IF LR.DEL_LEN >= %LA_MAX THEN
  925              CALL CREATE_LARGE_DELETION;
  926            ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(O1COM.LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  927            LR.DEL_COST = ACCUM_DEL_COST;
  928            IF LR.DEL_COST >= %INFINITE_COST THEN
  929              CALL ABORT_CORRECTION;
  930            IF LR.DEL_LEN >= O1COM.LA_CNT THEN
  931              DO;
  932                %CALL_SCANNER;
  933                O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
  934                O1COM.LA_CNT = O1COM.LA_CNT + 1;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          33   
  935              END;
  936            ACCUM_INS_TO_SYM = O1COM.LA_STK.LINK(ACCUM_INS_TO_SYM);
  937            LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  938          END;
  939      END;
  940
  941      %IF TRAIL_PARSE_LENGTH > 0;
  942      CALL CHECK_CONTEXT;
  943      %ENDIF;
  944      LC = LR;
  945
  946      ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(O1COM.LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  947      LR.DEL_COST    = ACCUM_DEL_COST;
  948
  949      DO WHILE ((ACCUM_DEL_COST < LC.DEL_COST + LC.INSRT_COST)
  950             AND (ACCUM_DEL_LEN < %LA_MAX-1));
  951
  952        /* ENSURE ONE MORE SYMBOL */
  953
  954
  955        ACCUM_DEL_LEN = ACCUM_DEL_LEN + 1;
  956        LR.DEL_LEN    = ACCUM_DEL_LEN;
  957        IF LR.DEL_LEN >= O1COM.LA_CNT THEN
  958          DO;
  959            %CALL_SCANNER;
  960            O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
  961            O1COM.LA_CNT = O1COM.LA_CNT + 1;
  962          END;
  963
  964
  965        ACCUM_INS_TO_SYM = O1COM.LA_STK.LINK(ACCUM_INS_TO_SYM);
  966        LR.INS_TO_SYM    = ACCUM_INS_TO_SYM;
  967
  968
  969            CALL LR_INSERT;
  970
  971            %IF TRAIL_PARSE_LENGTH > 0;
09:12 AUG 09 '97 Z8A_P_EC.:Z8A6SI                                          34   
  972            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  973              CALL CHECK_CONTEXT;
  974            %ENDIF;
  975            IF LR.INSRT_COST + LR.DEL_COST < LC.DEL_COST + LC.INSRT_COST THEN
  976                LC = LR;
  977
  978        ACCUM_DEL_COST = ACCUM_DEL_COST + DEL_COST(O1COM.LA_STK.SYMBOL(ACCUM_INS_TO_SYM));
  979        LR.DEL_COST    = ACCUM_DEL_COST;
  980
  981      END;  /* DO WHILE */
  982
  983      CALL GIVE_CORRECTION_MESSAGE;
  984
  985
  986      END LOCALLY_LEAST_COST_CORRECTION;

