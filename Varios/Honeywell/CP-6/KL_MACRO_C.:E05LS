

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         1    
    1      /*M* KL_MACRO_C Structures for HOST LOGON */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1,IAD=0,PRB */
    8      /**/
    9      /**/
   10
   11
   12
   13      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         2    
   14                  /**********************************************/
   15                  /*F* NAME:      KL_RQSCHN                     */
   16                  /**********************************************/
   17      /**/
   18      /* KL_RQSCHN - Message sent from the Node Administrator to the
   19                     Network Manager, requesting information on a given
   20                     channel.
   21      */
   22      %MACRO KL_RQSCHN (FPTN=KL_RQSCHN,
   23                        STCLASS=STATIC,
   24                        ALGN=WALIGNED,
   25                        FCN=IGA_RQSCHN,
   26                        LINE_PROFILE(YES='1'B,NO='0'B)='0'B,
   27                        CONFIG(YES='1'B,NO='0'B)='0'B,
   28                        DFLTCHN(YES='1'B,NO='0')='0'B,
   29                        DFLTHND(YES='1'B,NO='0'B)='0'B,
   30                        SCNDCNFG(YES='1'B,NO='0'B)='0'B,
   31                        HANDLER=' ',
   32                        SIGNON='');
   33
   34       %LSET LISTDIR='0'B;
   35       %LSET LISTEXP='1'B;
   36       %LSET LISTCOM='0'B;
   37       %LSET LISTSUB='1'B;
   38       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   39       %IF (SUBSTR(STR,0,6)='STATIC') OR
   40       (SUBSTR(STR,0,8)='CONSTANT') OR
   41       (SUBSTR(STR,0,3)='EXT');
   42       %LSET INIT=CHARTEXT('INIT');
   43       %LSET EINIT=CHARTEXT('');
   44       %ELSE;
   45       %LSET INIT=CHARTEXT('/*');
   46       %LSET EINIT=CHARTEXT('*/');
   47       %ENDIF;
   48
   49      DCL 1 FPTN STCLASS ALGN,
   50            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         3    
   51            /*K* FCN  Defines the type of function we are performing
   52            */
   53      %IF NOT(MODE_FEP);
   54            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
   55      %ENDIF;
   56            2 %CHARTEXT('LINE_PROFILE') BIT(1) UNAL %INIT(LINE_PROFILE)%EINIT,
   57            /*K* LINE_PROFILE  If set, this is a request for line profile
   58                               info for the specified terminal ID.
   59            */
   60            2 %CHARTEXT('CONFIG') BIT(1) UNAL %INIT(CONFIG)%EINIT,
   61            /*K* CONFIG  If set, this is a request for config info for
   62                         the specified terminal ID.
   63            */
   64            2 %CHARTEXT('DFLTHND') BIT(1) UNAL %INIT(DFLTHND)%EINIT,
   65            /*K* DFLTHND  If set, this is a request for the default info
   66                          for the handler whoose name is in HANDLER
   67            */
   68            2 %CHARTEXT('DFLTCHN') BIT(1) UNAL %INIT(DFLTCHN)%EINIT,
   69            /*K* DFLTCHN  If set, this specifies that default channel info
   70                          for this channel is to be sent via a CHNRSP
   71                          message
   72            */
   73            2 %CHARTEXT('SCNDCNFG') BIT(1) UNAL %INIT(SCNDCNFG)%EINIT,
   74      /*K* SCNDCNFG - if set indicates that 2 config records exist in
   75           :NETCON for the indicated channel.  The record keyed off of
   76           the terminal name will be super imposed on top of the the
   77           record keyed of the channel number.  This can cause unpredicable
   78           results and should therefore be avoided
   79      */
   80            2 * BIT(3) UNAL %INIT('0'B)%EINIT,
   81            2 %CHARTEXT('HANDLER') CHAR(8) UNAL %INIT(HANDLER)%EINIT,
   82            /*K* HANDLER  Must be set on any but DFLTCHN, and returned in the
   83                          responce.
   84            */
   85            %B$TERMINAL_ID(FPTN=TERMINAL_ID,LVL=2,LAST=",",STCLASS=STCLASS,ALGN=CALIGNED);
   86            2 SGN CALIGNED,
   87      %IF %INIT = %CHARTEXT('INIT');
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         4    
   88      %IF SIGNON = '';
   89              3 L UBIN BYTE UNAL %INIT(0)%EINIT;
   90      %ELSE;
   91              3 L UBIN BYTE UNAL %INIT(LENGTHC(SIGNON))%EINIT,
   92              3 TXT CHAR(0) UNAL %INIT(SIGNON)%EINIT;
   93      %ENDIF;
   94      %ELSE;
   95              3 L UBIN BYTE UNAL %INIT(SIZEC(SIGNON))%EINIT,
   96      %IF SUBSTR(STR,0,4) = 'AUTO' OR SUBSTR(STR,0,4) = '    ';
   97      %IF SIGNON = '';
   98              3 TXT CHAR(1) UNAL;
   99      %ELSE;
  100              3 TXT CHAR(%LENGTHC(SIGNON));
  101      %ENDIF;
  102      %ELSE;
  103              3 TXT CHAR(FPTN.SGN.L) %INIT(SIGNON)%EINIT;
  104      %ENDIF;
  105      %ENDIF;
  106            /*K* SIGNON - If this is a request for LINE_PROFILE, this is optionally
  107                          set to indicate the remote signon string */
  108      %MEND;
  109      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         5    
  110      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         6    
  111                  /**********************************************/
  112                  /*F* NAME:      KL_CHNRSP                  */
  113                  /**********************************************/
  114      /* KL_CHNRSP - This strucutre is passed by the network manager
  115                        to node admin, and by node admin to handler common
  116                        in responce to a KL_RQSCHN message with any but the
  117                        default channel bit set.
  118      */
  119      %MACRO KL_CHNRSP(FPTN=KL_CHNRSP,
  120                          CODE=IGA_CHNRSP,
  121                          STCLASS=STATIC,
  122                          LINE_PROFILE(YES='1'B,NO='0'B)='0'B,
  123                          NAK(YES='1'B,NO='0'B)='0'B,
  124                          CONFIG(YES='1'B,NO='0'B)='0'B,
  125                          DFLTHND(YES='1'B,NO='0'B)='0'B,
  126                          SCNDCNFG(YES='1'B,NO='0'B)='0'B,
  127                          HANDLER=' ',
  128                         MSGSIZE=255,
  129                          ALGN=WALIGNED,
  130                          MSG=' ');
  131
  132
  133       %LSET LISTDIR='0'B;
  134       %LSET LISTEXP='1'B;
  135       %LSET LISTCOM='0'B;
  136       %LSET LISTSUB='1'B;
  137       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  138       %IF (SUBSTR(STR,0,6)='STATIC') OR
  139       (SUBSTR(STR,0,8)='CONSTANT') OR
  140       (SUBSTR(STR,0,3)='EXT');
  141       %LSET INIT=CHARTEXT('INIT');
  142       %LSET EINIT=CHARTEXT(' ');
  143       %ELSE;
  144       %LSET INIT=CHARTEXT('/*');
  145       %LSET EINIT=CHARTEXT('*/');
  146       %ENDIF;
  147
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         7    
  148
  149      DCL 1 FPTN STCLASS ALGN,
  150            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(CODE)%EINIT,
  151            /*K* FCN  Indicates the function being performed
  152            */
  153      %IF NOT(MODE_FEP);
  154            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
  155      %ENDIF;
  156            2 %CHARTEXT('LINE_PROFILE') BIT(1) UNAL %INIT(LINE_PROFILE)%EINIT,
  157            /*K* LINE_PROFILE  If set, this is a responce with line profile
  158                               info for the specified terminal ID.
  159            */
  160            2 %CHARTEXT('CONFIG') BIT(1) UNAL %INIT(CONFIG)%EINIT,
  161            /*K* CONFIG  If set, this is a responce with config info for
  162                         the specified terminal ID.
  163            */
  164            2 %CHARTEXT('DFLTHND') BIT(1) UNAL %INIT(DFLTHND)%EINIT,
  165            /*K* DFLTHND  If set, this is a responce with default info
  166                          for the handler whoose name is in HANDLER
  167            */
  168            2 %CHARTEXT('NAK') BIT(1) UNAL %INIT(NAK)%EINIT,
  169            /*K* NAK  If set, the requested information is not available
  170                      for this terminal I.D.
  171            */
  172            2 %CHARTEXT('SCNDCNFG') BIT(1) UNAL %INIT(SCNDCNFG)%EINIT,
  173      /*K*  SCNDCNFG - If set indicates this channel config is keyed off
  174            of the node,channel and subdevices and not the term name.  Only
  175            applies to channels which have terminal names associated
  176      */
  177            2 * BIT(3) UNAL %INIT('0'B)%EINIT,
  178            2 %CHARTEXT('HANDLER') CHAR(8) UNAL %INIT(HANDLER)%EINIT,
  179            /*K* HANDLER  Must be sent to indicate which handler the responce
  180                          is to be sent to.
  181            */
  182            %B$TERMINAL_ID(FPTN=TERMINAL_ID,LVL=2,LAST=",",STCLASS=STCLASS,ALGN=CALIGNED);
  183           %KL_NA_INFO (FPTN=NA,STCLASS=STCLASS,LVL=2,LAST=",",ALGN=CALIGNED);
  184           %KL_HNDCMN_INFO (FPTN=HNDCMN,STCLASS=STCLASS,LVL=2,LAST=",",ALGN=CALIGNED);
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         8    
  185            2 MESSAGE,
  186      %IF NOT(MODE_FEP);
  187              3 %CHARTEXT('MSGSIZE') (0:1),
  188                4 * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  189                4 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
  190      %ELSE;
  191              3 %CHARTEXT('MSGSIZE') UBIN WORD UNAL %INIT(0)%EINIT,
  192      %ENDIF;
  193              /*K* MSGSIZE  The byte size of the message
  194              */
  195              3 %CHARTEXT('MESSAGE') CHAR(MSGSIZE) CALIGNED %INIT(MSG)%EINIT;
  196              /*K* The data being passed
  197              */
  198
  199
  200      %MEND;
  201      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         9    
  202                  /**********************************************/
  203                  /*F* NAME:      KL_CNFG_MSG                   */
  204                  /**********************************************/
  205      /* KL_CNFG_MSG - This strucutre is passed by the network manager
  206                       to node admin for on-the-fly CONFIG requests from
  207                       NETCON.  Part of the message is handled by Node
  208                       Admin, and the other part is passed on to the
  209                       appropriate handler.
  210      */
  211      %MACRO KL_CNFG_MSG (FPTN=KL_CNFG_MSG,
  212                          CODE=IGA_CNFG_MSG,
  213                          STCLASS=STATIC,
  214                          ALGN=WALIGNED);
  215
  216       %LSET LISTDIR='0'B;
  217       %LSET LISTEXP='1'B;
  218       %LSET LISTCOM='0'B;
  219       %LSET LISTSUB='1'B;
  220       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  221       %IF (SUBSTR(STR,0,6)='STATIC') OR
  222       (SUBSTR(STR,0,8)='CONSTANT') OR
  223       (SUBSTR(STR,0,3)='EXT');
  224       %LSET INIT=CHARTEXT('INIT');
  225       %LSET EINIT=CHARTEXT(' ');
  226       %ELSE;
  227       %LSET INIT=CHARTEXT('/*');
  228       %LSET EINIT=CHARTEXT('*/');
  229       %ENDIF;
  230
  231
  232            %KL_HDR (FPTN=FPTN,CODE=CODE,STCLASS=STCLASS,LAST=",");
  233            %B$TERMINAL_ID (FPTN=TERMID_LO,LVL=2,STCLASS=STCLASS,LAST=",",ALGN=CALIGNED);
  234            %B$TERMINAL_ID (FPTN=TERMID_HI,LVL=2,STCLASS=STCLASS,LAST=",",ALGN=CALIGNED);
  235            %KL_HNDCMN_INFO (FPTN=KHA,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED,LAST=",");
  236            %KL_NA_INFO (FPTN=NA,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED);
  237      %MEND;
  238      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         10   
  239                  /**********************************************/
  240                  /*F* NAME:      KL_HNDCMN_INFO                */
  241                  /**********************************************/
  242      /* KL_HNDCMN_INFO - This structure contains info on the KH$CHN fields that
  243                          are settable via NETCON.  This macro is used to generate
  244                          the KHA portion of the KL$LINCNFG structure that is
  245                          stored in :NETCON.  This structure is also stuffed into
  246                          the MESSAGE portion of the KL_EXTCHNRSP message in
  247                          response to a KL_RQSCHN with DFLTHND or CONFIG set.
  248      */
  249      %MACRO KL_HNDCMN_INFO(FPTN=KL_HNDCMN_INFO,
  250                            STCLASS=BASED,
  251                            ALGN=CALIGNED,
  252                            LVL=1,
  253                            LAST=";");
  254
  255       %LSET LISTDIR='0'B;
  256       %LSET LISTEXP='1'B;
  257       %LSET LISTCOM='0'B;
  258       %LSET LISTSUB='1'B;
  259       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  260       %IF (SUBSTR(STR,0,6)='STATIC') OR
  261       (SUBSTR(STR,0,8)='CONSTANT') OR
  262       (SUBSTR(STR,0,3)='EXT');
  263       %LSET INIT=CHARTEXT('INIT');
  264       %LSET EINIT=CHARTEXT('');
  265       %ELSE;
  266       %LSET INIT=CHARTEXT('/*');
  267       %LSET EINIT=CHARTEXT('*/');
  268       %ENDIF;
  269
  270      %IF LVL=1;
  271      DCL 1 FPTN STCLASS ALGN,
  272      %ELSE;
  273           %(LVL) FPTN ALGN,
  274      %ENDIF;
  275
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         11   
  276      %IF NOT(MODE_FEP);
  277              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  278      %ENDIF;
  279              %(LVL+1) FLWCNTRL BIT(2) UNAL %INIT('01'B)%EINIT,
  280              %(LVL+1) INP BIT(2) UNAL %INIT('01'B)%EINIT,
  281              %(LVL+1) OTP BIT(2) UNAL %INIT('01'B)%EINIT,
  282              %(LVL+1) BRKRQ BIT(2) UNAL %INIT('01'B)%EINIT,
  283      %IF NOT(MODE_FEP);
  284              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  285      %ENDIF;
  286              %(LVL+1) RE_ENB BIT(2) UNAL %INIT('01'B)%EINIT,
  287              %(LVL+1) HARD BIT(2) UNAL %INIT('01'B)%EINIT,
  288              %(LVL+1) CLK BIT(2) UNAL %INIT('01'B)%EINIT,
  289              %(LVL+1) DRPDTR BIT(2) UNAL %INIT('01'B)%EINIT,
  290      %IF NOT(MODE_FEP);
  291              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  292      %ENDIF;
  293              %(LVL+1) DBG BIT(2) UNAL %INIT('01'B)%EINIT,
  294              %(LVL+1) RMTHST BIT(2) UNAL %INIT('01'B)%EINIT,
  295              %(LVL+1) SPEED_AUTO BIT(2) UNAL %INIT('01'B)%EINIT,
  296              %(LVL+1) ENB BIT(2) UNAL %INIT('01'B)%EINIT,
  297      %IF NOT(MODE_FEP);
  298              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  299      %ENDIF;
  300              %(LVL+1) DSBHSTDWN BIT(2) UNAL %INIT('01'B)%EINIT,
  301              %(LVL+1) KLLHSTDWN BIT(2) UNAL %INIT('01'B)%EINIT,
  302              %(LVL+1) * BIT(2) UNAL %INIT('01'B)%EINIT,
  303              %(LVL+1) * BIT(2) UNAL %INIT('01'B)%EINIT,
  304      %IF NOT(MODE_FEP);
  305              %(LVL+1) BUFSIZE(0:1),
  306                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  307                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  308              %(LVL+1) DELAY(0:1),
  309                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  310                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  311              %(LVL+1) REDTIMEOUT(0:1),
  312                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         12   
  313                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  314              %(LVL+1) TPTIMOUT(0:1),
  315                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  316                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  317              %(LVL+1) BLOCK(0:1),
  318                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  319                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  320              %(LVL+1) UNBLOCK(0:1),
  321                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  322                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  323              %(LVL+1) SPEED(0:1),
  324                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  325                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT LAST
  326      %ELSE;
  327              %(LVL+1) BUFSIZE SBIN WORD %INIT(0)%EINIT,
  328              %(LVL+1) DELAY SBIN WORD %INIT(0)%EINIT,
  329              %(LVL+1) REDTIMEOUT SBIN WORD %INIT(0)%EINIT,
  330              %(LVL+1) TPTIMOUT SBIN WORD %INIT(0)%EINIT,
  331              %(LVL+1) BLOCK SBIN WORD %INIT(0)%EINIT,
  332              %(LVL+1) UNBLOCK SBIN WORD %INIT(0)%EINIT,
  333              %(LVL+1) SPEED SBIN WORD %INIT(0)%EINIT LAST
  334      %ENDIF;
  335      %MEND;
  336      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         13   
  337                  /**********************************************/
  338                  /*F* NAME:      KL_NA_INFO                    */
  339                  /**********************************************/
  340      /* KL_NA_INFO - This structure contains the Node Admin info that is settable
  341                      via NETCON.  This macro is used to generate the NA portion
  342                      of the KL$LINCNFG structure that is stored in :NETCON.
  343                      This structure is also stuffed into the NA field of the
  344                      KL_CHNRSP structure that is returned in responce to a
  345                      KL_RQSCHN with DFLTCHN set.
  346      */
  347      %MACRO KL_NA_INFO(FPTN=KL_NA_INFO,
  348                            STCLASS=BASED,
  349                            ALGN=CALIGNED,
  350                            LVL=1,
  351                            LAST=";");
  352
  353       %LSET LISTDIR='0'B;
  354       %LSET LISTEXP='1'B;
  355       %LSET LISTCOM='0'B;
  356       %LSET LISTSUB='1'B;
  357       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  358       %IF (SUBSTR(STR,0,6)='STATIC') OR
  359       (SUBSTR(STR,0,8)='CONSTANT') OR
  360       (SUBSTR(STR,0,3)='EXT');
  361       %LSET INIT=CHARTEXT('INIT');
  362       %LSET EINIT=CHARTEXT('');
  363       %ELSE;
  364       %LSET INIT=CHARTEXT('/*');
  365       %LSET EINIT=CHARTEXT('*/');
  366       %ENDIF;
  367
  368      %IF LVL=1;
  369      DCL 1 FPTN STCLASS ALGN,
  370      %ELSE;
  371           %(LVL) FPTN ALGN,
  372      %ENDIF;
  373
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         14   
  374      %IF NOT(MODE_FEP);
  375              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  376      %ENDIF;
  377              %(LVL+1) SNDSLT BIT(2) UNAL %INIT('01'B)%EINIT,
  378              %(LVL+1) ECHLGN BIT(2) UNAL %INIT('01'B)%EINIT,
  379              %(LVL+1) AUTLGN BIT(2) UNAL %INIT('01'B)%EINIT,
  380              %(LVL+1) RMTDBG BIT(2) UNAL %INIT('01'B)%EINIT,
  381      %IF NOT(MODE_FEP);
  382              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  383      %ENDIF;
  384              %(LVL+1) RESPRES BIT(1) UNAL %INIT('0'B)%EINIT,
  385              %(LVL+1) ATTRPRES BIT(1) UNAL %INIT('0'B)%EINIT,
  386              %(LVL+1) * BIT(2) UNAL %INIT('0'B)%EINIT,
  387              %(LVL+1) PROFILE BIT(2) UNAL %INIT('0'B)%EINIT,
  388              %(LVL+1) CNFG_EXISTS BIT(1) UNAL %INIT('0'B)%EINIT,
  389              %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
  390      %IF NOT(MODE_FEP);
  391              %(LVL+1) LGNTIMOUT(0:1),
  392                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  393                %(LVL+2) BYT SBIN(8) UNAL %INIT(0*0)%EINIT,
  394              %(LVL+1) ATTR(0:1),
  395                %(LVL+2) * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  396                %(LVL+2) BYT BIT(8) UNAL %INIT('0'B*0)%EINIT,
  397      %ELSE;
  398              %(LVL+1) LGNTIMOUT SBIN WORD UNAL %INIT(0)%EINIT,
  399              %(LVL+1) ATTR BIT(16) UNAL %INIT('0'B)%EINIT,
  400      %ENDIF;
  401              %(LVL+1) RES CHAR(2) UNAL %INIT('  ')%EINIT LAST
  402      %MEND;
  403      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         15   
  404                  /**********************************************/
  405                  /*F* NAME:      KL_RQSPROFILE                 */
  406                  /**********************************************/
  407      /* KL_RQSPROFILE is sent to the Network Manager from Node Admin.  This
  408      is a request for the profile that has been established for a line or a
  409      handler via NETCON.                */
  410      %MACRO KL_RQSPROFILE(FPTN=KL_RQSPROFILE,
  411                           STCLASS=STATIC,
  412                           ALGN=WALIGNED,
  413                           FCN=IGA_RQSPRO);
  414
  415       %LSET LISTDIR='0'B;
  416       %LSET LISTEXP='1'B;
  417       %LSET LISTCOM='0'B;
  418       %LSET LISTSUB='1'B;
  419       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  420       %IF (SUBSTR(STR,0,6)='STATIC') OR
  421       (SUBSTR(STR,0,8)='CONSTANT') OR
  422       (SUBSTR(STR,0,3)='EXT');
  423       %LSET INIT=CHARTEXT('INIT');
  424       %LSET EINIT=CHARTEXT('');
  425       %ELSE;
  426       %LSET INIT=CHARTEXT('/*');
  427       %LSET EINIT=CHARTEXT('*/');
  428       %ENDIF;
  429
  430      DCL 1 FPTN STCLASS ALGN,
  431            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  432            /*K* FCN  Indicates the function being performed.
  433            */
  434            2 *(0:2) UBIN BYTE UNAL %INIT(0*0)%EINIT,
  435            %B$TERMINAL_ID (FPTN=TERMID,LVL=2,STCLASS=STCLASS,LAST=",",ALGN=CALIGNED);
  436      %IF NOT(MODE_FEP);
  437            2 NMID(0:3) CALIGNED,
  438              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  439              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  440      %ELSE;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         16   
  441            2 NMID UBIN(32) ALIGNED %INIT(0)%EINIT,
  442      %ENDIF;
  443            2 HANDLER CHAR(8) UNAL %INIT(' ')%EINIT;
  444      %MEND;
  445      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         17   
  446                  /**********************************************/
  447                  /*F* NAME:      KL_SGN                        */
  448                  /**********************************************/
  449      /* KL_SGN is sent by the Node Administrator to the Network Manager
  450         with information about the logon string for a device logging
  451         on.
  452      */
  453      %MACRO KL_SGN(FPTN=KL_SGN,
  454                    STCLASS=STATIC,
  455                    ALGN=WALIGNED,
  456                    FCN=IGA_SGN,
  457                    LGNTXT=' ',
  458                    LGNSIZ=1,
  459                    NODE=0,
  460                    SPEED=0,
  461                    AUTOLGN(YES='1'B,NO='0'B)='0'B,
  462                    PROFILE(YES='1'B,NO='0'B)='0'B,
  463                    SYSID=0);
  464
  465       %LSET LISTDIR='0'B;
  466       %LSET LISTEXP='1'B;
  467       %LSET LISTCOM='0'B;
  468       %LSET LISTSUB='1'B;
  469       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  470       %IF (SUBSTR(STR,0,6)='STATIC') OR
  471       (SUBSTR(STR,0,8)='CONSTANT') OR
  472       (SUBSTR(STR,0,3)='EXT');
  473       %LSET INIT=CHARTEXT('INIT');
  474       %LSET EINIT=CHARTEXT('');
  475       %ELSE;
  476       %LSET INIT=CHARTEXT('/*');
  477       %LSET EINIT=CHARTEXT('*/');
  478       %ENDIF;
  479
  480      DCL 1 FPTN STCLASS ALGN,
  481            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  482            /*K* FCN  Indicates the function being performed.
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         18   
  483            */
  484            2 %CHARTEXT('NODE') UBIN BYTE UNAL %INIT(NODE)%EINIT,
  485            /*K* NODE The node the user is attempting to log on to.
  486            */
  487            2  * UBIN BYTE UNAL %INIT(0*0)%EINIT,
  488            2 DEF_NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  489            %B$TERMINAL_ID(FPTN=TERMINAL_ID,LAST=",",LVL=2,ALGN=CALIGNED);
  490      %IF NOT(MODE_FEP);
  491            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
  492      %ENDIF;
  493            2 %CHARTEXT('AUTOLGN') BIT(1) UNAL %INIT(AUTOLGN)%EINIT,
  494            /*K* AUTOLGN  If set, this is an autologon request and the
  495                          string should be ignored.
  496            */
  497            2 %CHARTEXT('PROFILE') BIT(1) UNAL %INIT(PROFILE)%EINIT,
  498            /*K* PROFILE  If set, a profile was specified on the channel
  499                          so do not send the default profile
  500            */
  501            2 * UBIN(6) UNAL %INIT(0)%EINIT,
  502            2 USER,
  503      %IF NOT(MODE_FEP);
  504              3 %CHARTEXT('SYSID(0:1)'),
  505                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
  506                4 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  507      %ELSE;
  508              3 %CHARTEXT('SYSID') UBIN UNAL %INIT(SYSID)%EINIT,
  509      %ENDIF;
  510      %IF NOT(MODE_FEP);
  511            2 %CHARTEXT('NMID(0:3)'),
  512              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  513              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  514            2 LDCTX REDEF NMID UBIN UNAL,    /* LDCTX for NODE ADMIN connect only  */
  515      %ELSE;
  516            2  %CHARTEXT('NMID') UBIN(32) UNAL %INIT(0)%EINIT,
  517            /*K* NMID  This is passed to the network manager, so that it
  518                       can send it back to node admin to identify NAs context
  519                       for this logon attempt.
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         19   
  520             */
  521      %ENDIF;
  522            2 %CHARTEXT('SPEED') UBIN BYTE UNAL %INIT(SPEED)%EINIT,
  523            /*K* SPEED  The encoded speed of the device attempting logon.
  524            */
  525            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
  526            2 LOGON,
  527              3 %CHARTEXT('LGNSIZ') UBIN BYTE UNAL %INIT(SIZEC(LGNTXT))%EINIT,
  528              3 %CHARTEXT('LGNTXT') CHAR(LGNSIZ) CALIGNED %INIT(LGNTXT)%EINIT;
  529      %MEND;
  530      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         20   
  531                  /**********************************************/
  532                  /*F* NAME:      KL_SGNRSP                     */
  533                  /**********************************************/
  534      /* KL_SGNRSP is sent by the Network Manager to the Node Administrator
  535         with information about the success or failure of a devices logon
  536         attempt.
  537      */
  538      %MACRO KL_SGNRSP(FPTN=KL_SGNRSP,
  539                       STCLASS=STATIC,
  540                       ALGN=WALIGNED,
  541                       FCN=IGA_SGNRSP,
  542                       FAILED(YES='1'B,NO='0'B)='0'B,
  543                       RSPTXT=' ',
  544                       RSPSIZ=1,
  545                       RESOURCE(YES='1'B,NO='0'B)='0'B);
  546
  547       %LSET LISTDIR='0'B;
  548       %LSET LISTEXP='1'B;
  549       %LSET LISTCOM='0'B;
  550       %LSET LISTSUB='1'B;
  551       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  552       %IF (SUBSTR(STR,0,6)='STATIC') OR
  553       (SUBSTR(STR,0,8)='CONSTANT') OR
  554       (SUBSTR(STR,0,3)='EXT');
  555       %LSET INIT=CHARTEXT('INIT');
  556       %LSET EINIT=CHARTEXT('');
  557       %ELSE;
  558       %LSET INIT=CHARTEXT('/*');
  559       %LSET EINIT=CHARTEXT('*/');
  560       %ENDIF;
  561
  562      DCL 1 FPTN STCLASS ALGN,
  563            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  564            /*K* FCN  Indicates the function being performed.
  565            */
  566      %IF NOT(MODE_FEP);
  567            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         21   
  568      %ENDIF;
  569            2 %CHARTEXT('RESOURCE') BIT(1) UNAL %INIT(RESOURCE)%EINIT,
  570            /*K* RESOURCE  If set, indicates that the device attempting
  571                           logon is a network resource.
  572            */
  573            2 * UBIN(7) UNAL %INIT(0)%EINIT,
  574      %IF NOT(MODE_FEP);
  575            2 %CHARTEXT('NMID(0:3)'),
  576              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  577              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  578            2 LDCTX REDEF NMID UBIN UNAL,    /* LDCTX for NODE ADMIN connect only  */
  579      %ELSE;
  580            2 %CHARTEXT('NMID') UBIN(32) %INIT(0)%EINIT,
  581            /*K* NMID  This is passed to the network manager, so that it
  582                       can send it back to node admin to identify NAs context
  583                       for this logon attempt.
  584             */
  585      %ENDIF;
  586            2 RLCID,
  587              3 %CHARTEXT('NODE') UBIN BYTE CALIGNED %INIT(0)%EINIT,
  588              /*K* NODE  The node this device is logging on from
  589              */
  590              3 %CHARTEXT('GENERATION') UBIN BYTE CALIGNED %INIT(0)%EINIT,
  591              /*K* GENERATION  The version of the running software
  592              */
  593      %IF NOT(MODE_FEP);
  594              3 %CHARTEXT('LDCTX(0:1)'),
  595                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
  596                4 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  597      %ELSE;
  598              3 %CHARTEXT('LDCTX') UBIN %INIT(0)%EINIT,
  599              /*K* LDCTX The LDCT index of the LDCT in the host to connect to
  600              */
  601      %ENDIF;
  602           %VLP_ERRCODE (FPTN=ERRCODE,ALGN=CALIGNED,LVL=2,STCLASS=STCLASS,LAST=",");
  603           %B$TERMINAL_ID (FPTN=TERMID,STCLASS=STCLASS,LAST=",",LVL=2);
  604            2 COS UBIN BYTE UNAL %INIT(1)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         22   
  605      /*K* COS - This is the Class of service this connection requires */
  606            2 MESSAGE,
  607              3 %CHARTEXT('RSPSIZ') UBIN BYTE UNAL %INIT(SIZEC(RSPTXT))%EINIT,
  608              3 %CHARTEXT('RSPTXT') CHAR(RSPSIZ) CALIGNED %INIT(RSPTXT)%EINIT;
  609      %MEND;
  610      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         23   
  611                  /**********************************************/
  612                  /*              KL_AUTOFAIL                   */
  613                  /**********************************************/
  614      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         24   
  615                  /**********************************************/
  616                  /*F* NAME:      KL_PRFRSP                     */
  617                  /**********************************************/
  618      /* KL_PRFRSP - Message sent from the Network Manager to the Node Administrator
  619                     with the profile for the user attempting logon
  620      */
  621      %MACRO KL_PRFRSP (FPTN=KL_PRFRSP,
  622                        STCLASS=STATIC,
  623                        ALGN=WALIGNED,
  624                        PRFSIZE=512,
  625                        FCN=IGA_PRFRSP);
  626
  627       %LSET LISTDIR='0'B;
  628       %LSET LISTEXP='1'B;
  629       %LSET LISTCOM='0'B;
  630       %LSET LISTSUB='1'B;
  631       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  632       %IF (SUBSTR(STR,0,6)='STATIC') OR
  633       (SUBSTR(STR,0,8)='CONSTANT') OR
  634       (SUBSTR(STR,0,3)='EXT');
  635       %LSET INIT=CHARTEXT('INIT');
  636       %LSET EINIT=CHARTEXT('');
  637       %ELSE;
  638       %LSET INIT=CHARTEXT('/*');
  639       %LSET EINIT=CHARTEXT('*/');
  640       %ENDIF;
  641
  642      DCL 1 FPTN STCLASS ALGN,
  643            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  644            /*K* FCN  Indicates the function being performed.
  645            */
  646      %IF NOT (MODE_FEP);
  647            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
  648      %ENDIF;
  649            2 IMP BIT(1) UNAL %INIT('0'B)%EINIT,
  650            2 MORE BIT(1) UNAL %INIT('0'B)%EINIT,
  651            2 * BIT(6) UNAL %INIT('0'B)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         25   
  652      %IF NOT(MODE_FEP);
  653            2 %CHARTEXT('NMID(0:3)'),
  654              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  655              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  656      %ELSE;
  657            2 %CHARTEXT('NMID') UBIN(32) %INIT(0)%EINIT,
  658            /*K* NMID  This is passed to the network manager, so that it
  659                       can send it back to node admin to identify NAs context
  660                       for this logon attempt.
  661             */
  662      %ENDIF;
  663            2 PROFILE,
  664      %IF NOT(MODE_FEP);
  665              3 %CHARTEXT('PRFSIZE(0:1)'),
  666                4 * BIT(1) UNAL %INIT('0'B)%EINIT,
  667                4 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  668      %ELSE;
  669              3 %CHARTEXT('PRFSIZE') UBIN(16) UNAL %INIT(PRFSIZE)%EINIT,
  670      %ENDIF;
  671              /*K* PRFSIZE Number of bytes in the passed profile
  672              */
  673              3 PRFTXT CHAR(PRFSIZE) CALIGNED %INIT(' ')%EINIT;
  674              /*K* PRFTXT The profile itself
  675              */
  676
  677      %MEND;
  678      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         26   
  679                  /**********************************************/
  680                  /*F* NAME:      KL_CONFIGRQS                  */
  681                  /**********************************************/
  682      /* KL_CONFIGRQS - Message sent from the Network Manager to the Node Administrator
  683                        requesting the configuration of a given channel and its
  684                        controller.
  685      */
  686      %MACRO KL_CONFIGRQS (FPTN=KL_CONFIGRQS,
  687                           STCLASS=STATIC,
  688                           ALGN=WALIGNED,
  689                           FCN=IGA_CONFIGRQS);
  690
  691       %LSET LISTDIR='0'B;
  692       %LSET LISTEXP='1'B;
  693       %LSET LISTCOM='0'B;
  694       %LSET LISTSUB='1'B;
  695       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  696       %IF (SUBSTR(STR,0,6)='STATIC') OR
  697       (SUBSTR(STR,0,8)='CONSTANT') OR
  698       (SUBSTR(STR,0,3)='EXT');
  699       %LSET INIT=CHARTEXT('INIT');
  700       %LSET EINIT=CHARTEXT('');
  701       %ELSE;
  702       %LSET INIT=CHARTEXT('/*');
  703       %LSET EINIT=CHARTEXT('*/');
  704       %ENDIF;
  705
  706      DCL 1 FPTN STCLASS ALGN,
  707            2  %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  708                  /*K* FCN  Indicates the function being performed. */
  709            2  *(0:2) UBIN BYTE UNAL %INIT(0)%EINIT,
  710      %IF NOT(MODE_FEP);
  711            2  MSGID(0:3),
  712              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  713              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  714      %ELSE;
  715            2  MSGID UBIN(32) UNAL %INIT(0)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         27   
  716                  /*K* MSGID = VALUE-DEC(0-?) specifies a unique value
  717                  associated with this message. */
  718      %ENDIF;
  719            2  NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  720                  /*K* NODE = VALUE-DEC(0-255). Specifies the node number of
  721                  the node this information is being requested of. NODE is
  722                  overridden by non-blank NODENAME. */
  723            2  SRC_NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  724                  /*K* SRC_NODE = VALUE-DEC(0-255). Specifies the node number of
  725                  the node requesting this information. */
  726            2  *(0:1) UBIN BYTE UNAL %INIT(0)%EINIT,
  727            2  NODENAME CHAR(8) %INIT(' ')%EINIT,
  728                  /*K* NODENAME = VALUE-CHAR(8). Specifies the name of the
  729                  node this request is directed to. If this is all blanks,
  730                  this request is directed at node, NODE instead. */
  731      %IF NOT(MODE_FEP);
  732            2  CHANNEL(0:1),
  733              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  734              3 BYT UBIN(8) UNAL %INIT(0)%EINIT;
  735      %ELSE;
  736            2  CHANNEL UBIN UNAL %INIT(0)%EINIT;
  737                  /*K* CHANNEL  The channel the information is being requested for */
  738      %ENDIF;
  739      %MEND;
  740      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         28   
  741                  /**********************************************/
  742                  /*F* NAME:      KL_CONFIGRSP                  */
  743                  /**********************************************/
  744      /* KL_CONFIGRSP - Message sent from the Node Administrator to the Network Manager
  745      */
  746      %MACRO KL_CONFIGRSP (FPTN=KL_CONFIGRSP,
  747                           STCLASS=STATIC,
  748                           ALGN=WALIGNED,
  749                           FCN=IGA_CONFIGRSP);
  750
  751       %LSET LISTDIR='0'B;
  752       %LSET LISTEXP='1'B;
  753       %LSET LISTCOM='0'B;
  754       %LSET LISTSUB='1'B;
  755       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  756       %IF (SUBSTR(STR,0,6)='STATIC') OR
  757       (SUBSTR(STR,0,8)='CONSTANT') OR
  758       (SUBSTR(STR,0,3)='EXT');
  759       %LSET INIT=CHARTEXT('INIT');
  760       %LSET EINIT=CHARTEXT('');
  761       %ELSE;
  762       %LSET INIT=CHARTEXT('/*');
  763       %LSET EINIT=CHARTEXT('*/');
  764       %ENDIF;
  765
  766      DCL 1 FPTN STCLASS ALGN,
  767            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  768                  /*K* FCN  Indicates the function being performed. */
  769            2 *(0:2) UBIN BYTE UNAL %INIT(0)%EINIT,
  770      %IF NOT(MODE_FEP);
  771            2 MSGID(0:3),
  772              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  773              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  774      %ELSE;
  775            2 MSGID UBIN(32) UNAL %INIT(0)%EINIT,
  776                  /*K* MSGID = VALUE-DEC(0-?) specifies a unique value
  777                  associated with this message. */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         29   
  778      %ENDIF;
  779            2 NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  780                  /*K* NODE = VALUE-DEC(0-255)  specifies the node number to
  781                  return this information to. */
  782            2 CTLR_STATUS UBIN BYTE UNAL %INIT(0)%EINIT,
  783                  /*K* CTLR_STATUS = VALUE-DEC(0-?) specifies the current state of
  784                  this channel's controller. */
  785            2 STATUS UBIN BYTE UNAL %INIT(0)%EINIT,
  786                  /*K* STATUS  The current state of this channel. */
  787            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
  788      %IF NOT(MODE_FEP);
  789            2 DVCID(0:1),
  790              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  791              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  792            2 EXTDVCID(0:1),
  793              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  794              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
  795      %ELSE;
  796            2 DVCID BIT(16) UNAL %INIT('0'B)%EINIT,
  797                  /*K* DVCID  The device I.D. (hardware) of the device attached to
  798                  the channel. */
  799            2 EXTDVCID BIT(16) UNAL %INIT('0'B)%EINIT,
  800                  /*K* EXTDVCID The extended device I.D. of the device
  801                  attached to the channel. */
  802      %ENDIF;
  803            2 *(0:1) UBIN BYTE UNAL %INIT(0)%EINIT,
  804            %KL_NETERR (FPTN=NETERR,LVL=2,LAST=";");
  805      %MEND;
  806
  807      /*F* NAME: KL_SETNODE
  808
  809      The KL_SETNODE macro gererates the structure
  810      for the message that is passed between the
  811      Network Manager on the host (SLUG) and BABOON
  812      on the FEP to set the node number and the name.
  813      */
  814
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         30   
  815      %MACRO KL_SETNODE (FPTN=KL_SETNODE,
  816                           STCLASS=STATIC,
  817                           ALGN=WALIGNED,
  818                           FCN=IGA_SETNODE);
  819
  820       %LSET LISTDIR='0'B;
  821       %LSET LISTEXP='1'B;
  822       %LSET LISTCOM='0'B;
  823       %LSET LISTSUB='1'B;
  824       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  825       %IF (SUBSTR(STR,0,6)='STATIC') OR
  826       (SUBSTR(STR,0,8)='CONSTANT') OR
  827       (SUBSTR(STR,0,3)='EXT');
  828       %LSET INIT=CHARTEXT('INIT');
  829       %LSET EINIT=CHARTEXT('');
  830       %ELSE;
  831       %LSET INIT=CHARTEXT('/*');
  832       %LSET EINIT=CHARTEXT('*/');
  833       %ENDIF;
  834
  835      DCL 1 FPTN STCLASS ALGN,
  836            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  837                  /*K* FCN  Indicates the function being performed. */
  838            2 *(0:1) UBIN BYTE UNAL %INIT(0*0)%EINIT,
  839      %IF NOT(MODE_FEP);
  840            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
  841      %ENDIF;
  842            2 MY_NODE BIT(1) UNAL %INIT('0'B)%EINIT,
  843                /*K* MY_NODE = (YES | NO). If this is yes it specifies
  844                          the node name for this node.  If no it specifies
  845                          the node name for some other node.
  846       */
  847            2 HOST_NODE BIT(1) UNAL %INIT('0'B)%EINIT,
  848                /*K* HOST_NODE = {YES | NO}. This specifies of the node
  849                is an host or not.
  850       */
  851            2 INVALID BIT(1) UNAL %INIT('0'B)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         31   
  852           /* bit to indicate to nodeadmn whether the network table from
  853              slug is valid.  If not nodeadmn will use the host slug
  854              to do logon parsing */
  855            2 * BIT(5) UNAL %INIT('0'B)%EINIT,
  856              %IF (MODE_FEP);
  857            2 NODE# UBIN(32) UNAL %INIT(0)%EINIT,
  858           %ELSE;
  859            2 NODE# UBIN(36) UNAL %INIT(0)%EINIT,
  860           %ENDIF;
  861                  /*K* NODE# = VALUE-DEC(0-?) specifies the NODE# of
  862                     this host */
  863            2 NODE_NAME CHAR(8) UNAL %INIT(' ')%EINIT;
  864                /*K* NODE_NAME contains the node name for the host */
  865      %MEND;
  866
  867
  868                 /*F* NAME:      KL_STRTU
  869
  870                 The KL_STRTU macro generates the structure for the
  871                 message that is sent to NA requesting that a FEP
  872                 user be created.
  873
  874                 The fields in the KL_STRTU structure are:
  875                 */
  876
  877      %MACRO KL_STRTU (FPTN=KL_STRTU,FCN=IGA_STRTU,ALGN=WALIGNED,STCLASS=STATIC);
  878
  879       %LSET LISTDIR='0'B;
  880       %LSET LISTEXP='1'B;
  881       %LSET LISTCOM='0'B;
  882       %LSET LISTSUB='1'B;
  883       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  884       %IF (SUBSTR(STR,0,6)='STATIC') OR
  885       (SUBSTR(STR,0,8)='CONSTANT') OR
  886       (SUBSTR(STR,0,3)='EXT');
  887      %LSET INIT=CHARTEXT(' INIT');
  888      %LSET EINIT=CHARTEXT('');
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         32   
  889       %ELSE;
  890      %LSET INIT=CHARTEXT('/*');
  891      %LSET EINIT=CHARTEXT('*/');
  892      %ENDIF;
  893
  894      DCL 1 FPTN STCLASS ALGN,
  895            2 %CHARTEXT('FCN ') UBIN BYTE UNAL %INIT(FCN)%EINIT,
  896                          /*K* FCN - UBIN.
  897                          Contains the function code that indicates that
  898                          the message is a syslog message.  This value is
  899                          %IGA_STRTU (27) from the KL_AFCN_C include file.
  900                          */
  901            2 NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  902                          /*K* NODE - UBIN.
  903                          Contains the destination node number.
  904                          */
  905
  906            2 NETADR_FROM,
  907              3 NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  908              3 GENERATION UBIN BYTE UNAL %INIT(0)%EINIT,
  909      %IF NOT(MODE_FEP);
  910              3 LDX(0:1),
  911                4 * BIT(1) %INIT('0'B*0)%EINIT,
  912                4 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
  913          %ELSE;
  914              3 LDX UBIN(16) UNAL %INIT(0)%EINIT,
  915          %ENDIF;
  916                          /*K* NETADR_FROM.
  917                          .XEQ G_JIT_M G$JIT HOST_NA
  918                          */
  919
  920
  921            2 NETADR_TO,
  922              3 NODE UBIN BYTE UNAL %INIT(0)%EINIT,
  923              3 GENERATION UBIN BYTE UNAL %INIT(0)%EINIT,
  924            %IF NOT(MODE_FEP);
  925              3 LDX(0:1),
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         33   
  926                4 * BIT(1) %INIT('0'B)%EINIT,
  927                4 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
  928            %ELSE;
  929              3 LDX UBIN(16) UNAL %INIT(0)%EINIT,
  930            %ENDIF;
  931                          /*K* NETADR_TO.
  932                          .XEQ G_JIT_M G$JIT FEP_NA
  933                          */
  934
  935            2 UNAME CHAR(12) %INIT(' ')%EINIT,
  936                          /*K* UNAME - CHAR(12).
  937                          .XEQ G_JIT_M G$JIT UNAME
  938                          */
  939            2 ACCT CHAR(8) %INIT(' ')%EINIT,
  940                          /*K* ACCT - CHAR(8).
  941                          .XEQ G_JIT_M G$JIT ACCN
  942                          */
  943            2 DB_ACCT CHAR(8) %INIT(' ')%EINIT,
  944                          /*K* DB_ACCT - CHAR(8).
  945                          .XEQ G_JIT_M G$JIT DB_ACCN
  946                          */
  947
  948            2 MODE UBIN BYTE UNAL %INIT(0)%EINIT,
  949                          /*K* MODE - UBIN.
  950                          .XEQ G_JIT_M G$JIT MODE
  951                          */
  952
  953            2 STR UBIN BYTE UNAL %INIT(0)%EINIT,
  954                          /*K* STR - UBIN.
  955                          ????
  956                          */
  957
  958        %IF NOT(MODE_FEP);
  959            2 MRT(0:3),
  960              3 * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  961              3 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
  962        %ELSE;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         34   
  963            2 MRT UBIN(32) UNAL %INIT(0)%EINIT,
  964
  965        %ENDIF;
  966                          /*K* MRT - UBIN.
  967                          .XEQ G_JIT_M G$JIT MRT
  968                           expressed how?  converted how?
  969                          */
  970
  971        %IF NOT(MODE_FEP);
  972            2 PRIV(0:3),
  973              3 * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  974              3 BYT BIT(8) UNAL %INIT('0'B*0)%EINIT,
  975        %ELSE;
  976            2 PRIV BIT(32) UNAL %INIT('0'B)%EINIT,
  977        %ENDIF;
  978                          /*K* PRIV - UBIN.
  979                          .XEQ G_JIT_M G$JIT PRIV.AUTH
  980                          */
  981
  982        %IF NOT(MODE_FEP);
  983            2 PPRIV(0:3),
  984              3 * BIT(1) UNAL %INIT('0'B*0)%EINIT,
  985              3 BYT BIT(8) UNAL %INIT('0'B*0)%EINIT,
  986        %ELSE;
  987            2 PPRIV BIT(32) UNAL %INIT('0'B)%EINIT,
  988        %ENDIF;
  989                          /*K* PPRIV - UBIN.
  990                          .XEQ G_JIT_M G$JIT PPRIV
  991                          */
  992
  993        %IF NOT(MODE_FEP);
  994            2 MEM(0:1),
  995              3 * BIT(1) %INIT('0'B*0)%EINIT,
  996              3 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
  997        %ELSE;
  998            2 MEM UBIN(16) UNAL %INIT(0)%EINIT,
  999        %ENDIF;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         35   
 1000                          /*K* MEM - UBIN.
 1001                          .XEQ G_JIT_M G$JIT MAXMEM
 1002                          */
 1003            2 INTS UBIN BYTE UNAL %INIT(0)%EINIT,
 1004                          /*K* INTS - UBIN.
 1005                          .XEQ G_JIT_M G$JIT MAXINTS
 1006                          */
 1007            2 MACCTFPRG UBIN BYTE UNAL %INIT(0)%EINIT,
 1008                          /*K* MACCTFPRG - UBIN.
 1009                          .XEQ GFR_DATA_M GFR$ACCT MAX_FPRGS
 1010                          */
 1011
 1012        %IF NOT(MODE_FEP);
 1013            2 MACCTMEM(0:1),
 1014              3 * BIT(1) %INIT('0'B*0)%EINIT,
 1015              3 BYT UBIN(8) UNAL %INIT(0*0)%EINIT,
 1016        %ELSE;
 1017            2 MACCTMEM UBIN(16) UNAL %INIT(0)%EINIT,
 1018        %ENDIF;
 1019                          /*K* MACCTMEM - UBIN.
 1020                          .XEQ GFR_DATA_M GFR$ACCT MAX_MEM
 1021                          */
 1022
 1023            2 PSEUDO_NAME(0:7) CHAR(8) %INIT(' ')%EINIT,
 1024                          /*K* PSEUDO_NAME - ARRAY(0:7) CHAR(8).
 1025                          Contains the name of each pseudo resource that
 1026                          may be allocated by this user.
 1027                          */
 1028
 1029        %IF NOT(MODE_FEP);
 1030            2 MAX(0:7),
 1031              3 * BIT(1) %INIT('0'B*0)%EINIT,
 1032              3 BYT1 UBIN(8) UNAL %INIT(0*0)%EINIT,
 1033              3 * BIT(1) %INIT('0'B*0)%EINIT,
 1034              3 BYT2 UBIN(8) UNAL %INIT(0*0)%EINIT,
 1035        %ELSE;
 1036            2 PSEUDO_MAX(0:7) UBIN(16) UNAL %INIT(0)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         36   
 1037        %ENDIF;
 1038                          /*K* PSEUDO_MAX - ARRAY(0:7) UBIN.
 1039                          .XEQ G_JIT_M G$JIT MAXSUDO
 1040                          */
 1041
 1042            2 BILL CHAR(6) %INIT(' ')%EINIT,
 1043                          /*K* BILL - CHAR(6).
 1044                          .XEQ G_JIT_M G$ACC BILL
 1045                          */
 1046            2 HNAME,
 1047              3 L UBIN BYTE UNAL %INIT(0)%EINIT,
 1048              3 C CHAR(31) %INIT(' ')%EINIT,
 1049                          /*K* HNAME - CHAR(6).
 1050                          ?? where is this suppose to go??
 1051                          */
 1052            2 LANG CHAR(1) UNAL %INIT(' ')%EINIT,
 1053                          /*K* LANG - UBIN.
 1054                          .XEQ G_JIT_M G$JIT LANG
 1055                          */
 1056            2 FLAGS,
 1057      %IF NOT(MODE_FEP);
 1058              3 * BIT(1) %INIT('0'B)%EINIT,
 1059      %ENDIF;
 1060              3 STEPACCT BIT(1) %INIT('0'B)%EINIT,
 1061                          /*K* STEPACCT - BIT(1).
 1062                          .XEQ G_JIT_M G$JIT JUNK.STEPACCT
 1063                          */
 1064              3 * BIT(7) %INIT('0'B*0)%EINIT,
 1065
 1066            2 *(0:1) UBIN BYTE UNAL %INIT(0)%EINIT;
 1067      %MEND;
 1068
 1069
 1070
 1071                  /**********************************************/
 1072                  /*F* NAME:      KL_AFD                        */
 1073                  /**********************************************/
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         37   
 1074      /* KL_AFD - Message sent to Network Manager and then to Node Admin requesting
 1075                  Association of the Front-end Debugger (FD) and connection to
 1076                  the specified host network address.  */
 1077      %MACRO KL_AFD (FPTN=KL_AFD,ALGN=WALIGNED,STCLASS=STATIC);
 1078
 1079       %LSET LISTDIR='0'B;
 1080       %LSET LISTEXP='1'B;
 1081       %LSET LISTCOM='0'B;
 1082       %LSET LISTSUB='1'B;
 1083       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1084       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1085       (SUBSTR(STR,0,8)='CONSTANT') OR
 1086       (SUBSTR(STR,0,3)='EXT');
 1087       %LSET INIT=CHARTEXT('INIT');
 1088       %ELSE;
 1089       %LSET INIT=CHARTEXT('/*');
 1090       %ENDIF;
 1091
 1092      DCL 1 FPTN STCLASS ALGN,
 1093            2 FCN UBIN BYTE UNAL %INIT(IGA_AFD)%CHARTEXT('/**/'),
 1094                           /* Message function code                                */
 1095            2 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1096                           /* Destination node number                              */
 1097            2 NETADR_FROM, /* Source network address */
 1098              3 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1099              3 GENERATION UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1100      %IF NOT(MODE_FEP);
 1101              3 LDX(0:1),   /* LDCTX of this end's LDCT                          */
 1102                4 * BIT(1) %INIT('0'B*0) %CHARTEXT('/**/'),
 1103                4 BYT UBIN(8) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1104              %ELSE;
 1105              3 LDX UBIN(16) UNAL %INIT(0) %CHARTEXT('/**/'),
 1106              %ENDIF;
 1107            %IF NOT(MODE_FEP);
 1108            2 SYSID(0:1),  /* Destination user SYSID to associate debugger to      */
 1109              3 * BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
 1110              3 BYT UBIN(8) UNAL %INIT(0*0) %CHARTEXT('/**/'),
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         38   
 1111            %ELSE;
 1112            2 SYSID UBIN(16) UNAL %INIT(0) %CHARTEXT('/**/'),
 1113            %ENDIF;
 1114            2 ACCT CHAR(8) %INIT(' ') %CHARTEXT('/**/');
 1115                          /* Logon account of the debugging user for access
 1116                             control checking. Blank if debugging user has
 1117                             the MSYS privilege turned on. */
 1118      %MEND;
 1119      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         39   
 1120                  /**********************************************/
 1121                  /*F* NAME:      KL_CWNAK                      */
 1122                  /**********************************************/
 1123      /* KL_CWNAK - Message to Network Manager & BABOON erroring an SS_CW-REGged
 1124                    user. This message is used to error KL_STRTU messages and
 1125                    KL_AFD messages along with others. */
 1126      %MACRO KL_CWNAK (FPTN=KL_CWNAK,ALGN=WALIGNED,STCLASS=STATIC);
 1127
 1128       %LSET LISTDIR='0'B;
 1129       %LSET LISTEXP='1'B;
 1130       %LSET LISTCOM='0'B;
 1131       %LSET LISTSUB='1'B;
 1132       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1133       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1134       (SUBSTR(STR,0,8)='CONSTANT') OR
 1135       (SUBSTR(STR,0,3)='EXT');
 1136       %LSET INIT=CHARTEXT('INIT');
 1137       %ELSE;
 1138       %LSET INIT=CHARTEXT('/*');
 1139       %ENDIF;
 1140
 1141      DCL 1 FPTN STCLASS ALGN,
 1142            2 FCN UBIN BYTE UNAL %INIT(IGA_CWNAK)%CHARTEXT('/**/'),
 1143                           /* Message function code                                */
 1144            2 * UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1145            2 NETADR,      /* Source network address */
 1146              3 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1147              3 GENERATION UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1148      %IF NOT(MODE_FEP);
 1149              3 LDX(0:1),   /* LDCTX of this end's LDCT                          */
 1150                4 * BIT(1) %INIT('0'B*0) %CHARTEXT('/**/'),
 1151                4 BYT UBIN(8) UNAL %INIT(0*0) %CHARTEXT('/**/'),
 1152              %ELSE;
 1153              3 LDX UBIN(16) UNAL %INIT(0) %CHARTEXT('/**/'),
 1154              %ENDIF;
 1155            %KL_NETERR (FPTN=NETERR,LVL=2,LAST=";");
 1156      %MEND;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         40   
 1157
 1158      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         41   
 1159                  /**********************************************/
 1160                  /*F* NAME:      KL_FROG                       */
 1161                  /**********************************************/
 1162      %MACRO KL_FROG (FPTN=KL_FROG,ALGN=WALIGNED,STCLASS=STATIC);
 1163
 1164       %LSET LISTDIR='0'B;
 1165       %LSET LISTEXP='1'B;
 1166       %LSET LISTCOM='0'B;
 1167       %LSET LISTSUB='1'B;
 1168       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1169       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1170       (SUBSTR(STR,0,8)='CONSTANT') OR
 1171       (SUBSTR(STR,0,3)='EXT');
 1172       %LSET INIT=CHARTEXT('INIT');
 1173       %ELSE;
 1174       %LSET INIT=CHARTEXT('/*');
 1175       %ENDIF;
 1176
 1177      DCL 1 FPTN STCLASS ALGN,
 1178            2 ID UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1179            2 FUNCTION UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
 1180            2 FEX UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/');
 1181
 1182      %MEND;
 1183
 1184
 1185      /*F* NAME: KL_FEPST
 1186
 1187      */
 1188
 1189      %MACRO KL_FEPST (FPTN=KL_FEPST,ALGN=WALIGNED,STCLASS=STATIC);
 1190
 1191       %LSET LISTDIR='0'B;
 1192       %LSET LISTEXP='1'B;
 1193       %LSET LISTCOM='0'B;
 1194       %LSET LISTSUB='1'B;
 1195       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         42   
 1196       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1197       (SUBSTR(STR,0,8)='CONSTANT') OR
 1198       (SUBSTR(STR,0,3)='EXT');
 1199       %LSET INIT=CHARTEXT('INIT');
 1200       %ELSE;
 1201       %LSET INIT=CHARTEXT('/*');
 1202       %ENDIF;
 1203
 1204      DCL 1 FPTN STCLASS ALGN,
 1205            2 FCN UBIN BYTE UNAL %INIT(IGA_FEPST)%CHARTEXT('/**/'),
 1206                           /* Message function code                                */
 1207            2 FEP UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1208                           /* FEP#                              */
 1209      %IF MODE_FEP;
 1210            2 PROB UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 1211            2 STATE UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 1212            2 REASON REDEF STATE UBIN,
 1213            2 QOS UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 1214            2 LNK_NODE UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 1215            2 ALT_QOS UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 1216            2 CHAN# UBIN WORD UNAL %INIT(0)%CHARTEXT('/**/');
 1217      %ELSE;
 1218            2 PROB UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
 1219            2 STATE UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
 1220            2 QOS UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
 1221            2 LNK_NODE UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1222            2 ALT_QOS UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 1223            2 CHAN# UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/');
 1224      %ENDIF;
 1225      %MEND;
 1226      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         43   
 1227                  /**********************************************/
 1228                  /*F* NAME:      KL$ADMES                      */
 1229                  /**********************************************/
 1230      %MACRO KL$ADMES (CODE=IGA_REJ,MSG='WOOPS!',NAME=XXX,STCLASS=STATIC);
 1231      DCL 1 NAME STCLASS,
 1232            2 CODE_ UBIN BYTE UNAL INIT(CODE),
 1233            2 TYP UBIN BYTE UNAL INIT(0),
 1234            2 MSG_ CHAR(0) INIT(MSG);
 1235      %MEND;
 1236      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         44   
 1237                  /**********************************************/
 1238                  /*F* NAME:      KL_MES                        */
 1239                  /**********************************************/
 1240      %MACRO KL_MES (FPTN=KL_MES,ALGN=WALIGNED,CODE=0,TYPE=0,LAST=";",STCLASS=STATIC,LVL=1);
 1241
 1242       %LSET LISTDIR='0'B;
 1243       %LSET LISTEXP='1'B;
 1244       %LSET LISTCOM='0'B;
 1245       %LSET LISTSUB='1'B;
 1246       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1247       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1248       (SUBSTR(STR,0,8)='CONSTANT') OR
 1249       (SUBSTR(STR,0,3)='EXT');
 1250       %LSET INIT=CHARTEXT('INIT');
 1251       %LSET EINIT=CHARTEXT('');
 1252       %ELSE;
 1253       %LSET INIT=CHARTEXT('/*');
 1254       %LSET EINIT=CHARTEXT('*/');
 1255       %ENDIF;
 1256
 1257      %IF LVL=1;
 1258      DCL 1 FPTN STCLASS ALGN,
 1259      %ELSE;
 1260           %(LVL) FPTN ALGN,
 1261      %ENDIF;
 1262           %(LVL+1) %CHARTEXT('CODE ') UBIN BYTE UNAL %INIT(CODE)%EINIT,
 1263           %(LVL+1) %CHARTEXT('TYPE ') UBIN BYTE UNAL %INIT(TYPE)%EINIT LAST
 1264      %MEND;
 1265      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         45   
 1266                  /**********************************************/
 1267                  /*F* NAME:      KL_HDR                        */
 1268                  /**********************************************/
 1269      %MACRO KL_HDR (FPTN=KL_HDR,ALGN=WALIGNED,CODE=0,TYPE=0,LAST=";",STCLASS=STATIC,LVL=1,
 1270           ORIGIN=' ',HNDLR=' ',LVL=1);
 1271
 1272       %LSET LISTDIR='0'B;
 1273       %LSET LISTEXP='1'B;
 1274       %LSET LISTCOM='0'B;
 1275       %LSET LISTSUB='1'B;
 1276       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1277       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1278       (SUBSTR(STR,0,8)='CONSTANT') OR
 1279       (SUBSTR(STR,0,3)='EXT');
 1280       %LSET INIT=CHARTEXT('INIT');
 1281       %LSET EINIT=CHARTEXT('');
 1282       %ELSE;
 1283       %LSET INIT=CHARTEXT('/*');
 1284       %LSET EINIT=CHARTEXT('*/');
 1285       %ENDIF;
 1286      %IF (LVL=1);
 1287      DCL 1 FPTN STCLASS ALGN,
 1288      %ELSE;
 1289        %(LVL) FPTN ALGN,
 1290      %ENDIF;
 1291      %LSET NXTLVL = %(LVL+1);
 1292            %(LVL+1) %CHARTEXT('CODE ') UBIN BYTE UNAL %INIT(CODE)%EINIT,
 1293            %(LVL+1) %CHARTEXT('TYPE ') UBIN BYTE UNAL %INIT(TYPE)%EINIT,
 1294            %(LVL+1) SRCE_NODE UBIN BYTE UNAL %INIT(0) %EINIT,
 1295            %(LVL+1)  DEST_NODE UBIN BYTE UNAL %INIT(0) %EINIT,
 1296            %(LVL+1) HANDLER CHAR(8) %INIT(HNDLR)%EINIT,   /* Which handler this is for */
 1297            %(LVL+1) %CHARTEXT('ORIGIN') CHAR(8) %INIT(ORIGIN)%EINIT,    /* NETCON station */
 1298            %(LVL+1) NODE CHAR(8) %INIT(' ')%EINIT,      /* Node that this is for */
 1299      %IF MODE_FEP;
 1300            %VLP_ERRCODE(FPTN=RESULTS,STCLASS=STCLASS,ALGN=CALIGNED,LVL=NXTLVL,LAST=",");
 1301            %(LVL+1) MSG# UBIN(16) %INIT(0)%EINIT LAST   /* Used by NETCON keep in sync */
 1302      %ELSE;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         46   
 1303            %VLP_ERRCODE(FPTN=RESULTS,STCLASS=STCLASS,ALGN=CALIGNED,LVL=NXTLVL,LAST=",");
 1304            %(LVL+1) MSG# UBIN(18) UNAL %INIT(0)%EINIT LAST
 1305      %ENDIF;
 1306      %MEND;
 1307      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         47   
 1308                  /**********************************************/
 1309                  /*F* NAME:      KL_ADMES                      */
 1310                  /**********************************************/
 1311      %MACRO KL_ADMES (CODE=IGA_REJ,MSG=' ',NAME=ZZZ,STCLASS=STATIC,TYP=0);
 1312      DCL 1 NAME STCLASS ALIGNED,
 1313            2 CODE_ UBIN BYTE UNAL INIT(CODE),
 1314            2 TYP_ UBIN BYTE UNAL INIT(TYP),
 1315            2 MSG_ CHAR(122) UNAL INIT(MSG);
 1316      %MEND;
 1317      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         48   
 1318                  /**********************************************/
 1319                  /*F* NAME:      KL_ADMSR                      */
 1320                  /**********************************************/
 1321      %MACRO KL_ADMSR (NAME=YYY,STCLASS=BASED);
 1322      DCL 1 NAME STCLASS ALIGNED,
 1323            2 CODE UBIN BYTE UNAL,
 1324            2 TYP UBIN BYTE UNAL,
 1325            2 MSG_ CHAR(120);
 1326      %MEND;
 1327      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         49   
 1328                  /**********************************************/
 1329                  /*F* NAME:      KL_ADDD                       */
 1330                  /**********************************************/
 1331      /*  Structure used for M$PATHCON and ELF device connect record */
 1332      /**/
 1333      %MACRO KL_ADDD (NAME=KL_ADDD,STCLASS=BASED,LVL=1,LAST=";",DALIGNED=DALIGNED);
 1334
 1335       %LSET LISTDIR='0'B;
 1336       %LSET LISTEXP='1'B;
 1337       %LSET LISTCOM='0'B;
 1338       %LSET LISTSUB='1'B;
 1339       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1340       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1341       (SUBSTR(STR,0,8)='CONSTANT') OR
 1342       (SUBSTR(STR,0,3)='EXT');
 1343       %LSET INIT=CHARTEXT('INIT');
 1344       %LSET EINIT=CHARTEXT('');
 1345       %ELSE;
 1346       %LSET INIT=CHARTEXT('/*');
 1347       %LSET EINIT=CHARTEXT('*/');
 1348       %ENDIF;
 1349
 1350      %IF LVL=1;
 1351      DCL 1 NAME STCLASS DALIGNED,
 1352      %ELSE;
 1353      %(LVL) NAME,
 1354      %ENDIF;
 1355
 1356         %(LVL+1) ACTYP UBIN(9) UNAL,    /* ACCOUNTING TYPE - SEE KL_SUBS_C */
 1357         %(LVL+1) ATYP UBIN(9) UNAL,     /* ATTACHMENT TYPE - SEE KL_SUPER_C */
 1358         %(LVL+1) * UBIN(9) UNAL,
 1359         %(LVL+1) FEX UBIN(9) UNAL,      /* FEP NUMBER */
 1360           %(LVL+1) FEPNAME CHAR(8) UNAL,     /* FEP NAME */
 1361         %(LVL+1) IO UNAL,
 1362           %(LVL+2) INPUT BIT(1),        /* INPUT IS LEGAL */
 1363           %(LVL+2) OUTPUT BIT(1),       /* OUTPUT IS LEGAL */
 1364         %(LVL+1) * BIT(4),
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         50   
 1365         %(LVL+1) USETP BIT(1),            /* USE=TP */
 1366         %(LVL+1) NOCGREJ BIT(1),          /* REJECT IF NOCG */
 1367         %(LVL+1) NOCGINF BIT(1),          /* INFORM IF NOCG */
 1368         %(LVL+1) SPEED UBIN(9) UNAL,    /* LINESPEED - SEE M$GLINEATTR */
 1369           %(LVL+1) TERMID UNAL,
 1370                %(LVL+2) LEV UBIN BYTE UNAL,
 1371                %(LVL+2) TTYP UBIN BYTE UNAL,
 1372                %(LVL+2) CHAN BIT(18) UNAL,
 1373                %(LVL+2) SUB BIT(18) UNAL,
 1374                %(LVL+2) SUBSUB BIT(18) UNAL,
 1375         %(LVL+1) DEVNM CHAR(8),         /* INTERNAL DEVICE NAME */
 1376         %(LVL+1) DTW REDEF DEVNM,
 1377           %(LVL+2) D CHAR(4),          /* DEVICE PART 'LP01' */
 1378           %(LVL+2) TW CHAR(4),         /* TWSN PART '0002'   */
 1379         %(LVL+1) TNAME CHAR(8),
 1380         %(LVL+1) ASSOCTRM CHAR(8),       /* ACCOUNTING NAME OF LOGGED ON ENTITY */
 1381         %(LVL+1) TWSN CHAR(4),         /* TWSN OF STATION GROUP */
 1382         %(LVL+1) CINFO,                 /* PROBABLY USEFUL ONLY FOR M$PATHCON */
 1383           %(LVL+2) USER UBIN(9) UNAL,   /* USER NUMBER IF TS TRM */
 1384           %(LVL+2) * UBIN(9) UNAL,
 1385           %(LVL+2) * UBIN(18) UNAL,
 1386         %(LVL+1) LDINFO REDEF CINFO,     /* TO AZC$ACCTNG */
 1387           %(LVL+2) LDCTX UBIN HALF UNAL,    /* LDCT INDEX */
 1388           %(LVL+2) LDCTKEY UBIN HALF UNAL,  /* UNIQUEIFIER */
 1389         %(LVL+1) NMID BIT(36) UNAL,      /* FEP path identifier */
 1390         %(LVL+1) LDCTX REDEF NMID UBIN UNAL,
 1391                              /* For KLTY_FEP#s only: LDCTX of the LDCT            */
 1392                              /* already obtained by KIS$SESSION.                  */
 1393         %(LVL+1) COS UBIN BYTE UNAL LAST    /* Class of service */
 1394      %MEND;
 1395      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         51   
 1396                  /**********************************************/
 1397                  /*F* NAME:      KL_ACCTNG                     */
 1398                  /**********************************************/
 1399      /* STRUCTURE FOR OTHER ACCOUNTING RECORDS (1ST WD ONLY SENT ON FEP CRASH*/
 1400      /**/
 1401      %MACRO KL_ACCTNG (NAME=KL_ACCTNG,STCLASS=BASED);
 1402      DCL 1 NAME STCLASS,
 1403            2 FEX UBIN(9) UNAL,      /* FEP NUMBER */
 1404            2 REASON UBIN(9) UNAL,   /* DISCONNECT REASON - SEE KL_SUBS_C */
 1405            2 LDCTX UBIN HALF UNAL,    /* LDCT INDEX */
 1406            2 DEVNM CHAR(8),         /*INTERNAL DEVICE NAME */
 1407            2 DTW REDEF DEVNM,
 1408              3 D CHAR(4),            /* DEVICE PART 'LP01' */
 1409              3 TW CHAR(4),           /* TWSN PART '0002'   */
 1410            2 CHARIN UBIN WORD,      /* NUMBER OF CHARS INPUT SINCE LAST */
 1411            2 CHAROUT UBIN WORD,     /*    "   "    "   OUTPUT  "     "  */
 1412            2 RECIN UBIN WORD,       /*    "   "  RECORDS INPUT "     "  */
 1413            2 RECOUT UBIN WORD;      /*    "   "     "   OUTPUT "     "  */
 1414      %MEND;
 1415      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         52   
 1416                  /**********************************************/
 1417                  /*F* NAME:      KL_PCD                        */
 1418                  /**********************************************/
 1419      /* KL_PCD - Info passed to M$PATHCON and to ELF - defines the
 1420                  device connect */
 1421      /**/
 1422      %MACRO KL_PCD (FPTN=KL_PCD,STCLASS=STATIC,CG=1,LVL=1,LAST=";",PCDINFOSZ=31);
 1423
 1424       %LSET LISTDIR='0'B;
 1425       %LSET LISTEXP='1'B;
 1426       %LSET LISTCOM='0'B;
 1427       %LSET LISTSUB='1'B;
 1428       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1429       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1430       (SUBSTR(STR,0,8)='CONSTANT') OR
 1431       (SUBSTR(STR,0,3)='EXT');
 1432       %LSET INIT=CHARTEXT('INIT');
 1433       %ELSE;
 1434       %LSET INIT=CHARTEXT('/*');
 1435       %ENDIF;
 1436      %LSET LVL2=LVL+1;
 1437
 1438      %IF LVL=1;
 1439      DCL 1 FPTN STCLASS,
 1440      %ELSE;
 1441      %(LVL) FPTN,
 1442      %ENDIF;
 1443
 1444      %KL_ADDD (NAME=ADDD,STCLASS=STCLASS,LAST=",",LVL=LVL2);
 1445      %IF CG=1;
 1446      %KC$CGID (FPTN=CGID,STCLASS=STCLASS,LAST=",",LVL=LVL2);
 1447      %B$CGAUCI(FPTN=CGINFO,STCLASS=STCLASS,LAST=",",LVL=LVL2);
 1448              %(LVL+2) XTRAINFO (0:PCDINFOSZ) UBIN WORD,
 1449      %IF PCDINFOSZ > 3;
 1450              %(LVL+2) RESINFO REDEF XTRAINFO,
 1451                 %(LVL+3) MODE UBIN HALF UNAL,
 1452
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         53   
 1453                 /*K*MODE = {INCOMING | OUTGOING | FIXED}.  FIXED describes a single
 1454                 facility like an Async modem, which is entirely controlled by a
 1455                 single Host user at a time.  OUTGOING describes the availability
 1456                  of some number of "lines" that can be created as needed when so
 1457                 requested by Host users.  Outgoing X.28 circuits would be defined
 1458                as OUTGOING.  INCOMING describes the possible appearance of some
 1459                number of incoming "lines" whose existence is to be reported to
 1460               the attached Host user (if any), so that it can then connect to
 1461               them individually.*/
 1462
 1463
 1464                 %(LVL+3) RNAME CHAR(6) CALIGNED,
 1465                      /*K* RNAME = char(6).  Provides a name that a user can use to request
 1466                           a specific resource.  RNAME can be used to distinguish between
 1467                           otherwise identical X.28 facilities on different links, for
 1468                           example.*/
 1469                 %(LVL+3) AUACCT CHAR(8) CALIGNED,
 1470                      /*K* AUACCT - char(8).  Specifies, if nonblank, the account
 1471                           allowed to be the AU of the resource, or to use it
 1472                           without an AU. */
 1473                 %(LVL+3) * CHAR(%(((PCDINFOSZ+1)*4)-16)) UNAL LAST
 1474      %ENDIF;
 1475
 1476      %ELSE;
 1477            %(LVL+1) TSINFO,
 1478              %(LVL+2) UNAME CHAR(12) %INIT(' ') %CHARTEXT('/**/'),
 1479              %(LVL+2) ACCT CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
 1480              %(LVL+2) HPSN CHAR(6) %INIT(' ') %CHARTEXT('/**/'),
 1481              %(LVL+2) NOSETUP BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
 1482              %(LVL+2) NOHEADER BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
 1483              %(LVL+2) * BIT(16) %INIT(' ') %CHARTEXT('/**/'),
 1484              %(LVL+2) WOO CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
 1485              %(LVL+2) LINES UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
 1486              %(LVL+2) WIDTH UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1487              %(LVL+2) ATTR BIT(18) %INIT('0'B) %CHARTEXT('/**/') LAST
 1488      %ENDIF;
 1489      %MEND;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         54   
 1490      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         55   
 1491                  /**********************************************/
 1492                  /*F* NAME:      KL_ACQUIRE                    */
 1493                  /**********************************************/
 1494      /* KL_AQUIRE - This structure is passed back and fourth between the
 1495                     handler and Node Admin to perform an aquire.  NOTE
 1496                     that this structure is both the request and responce
 1497                     structure.
 1498      */
 1499
 1500      %MACRO KL_ACQUIRE(FPTN=KL_ACQUIRE,CODE=IGA_LINE_ACQUIRE,TYPE=0,RES=' ',
 1501                CHAN=0,HIGHCHAN=0,LOWCHAN=0,ATTR='0'B,DVCID='0'B,
 1502                DIAG='0'B,
 1503                CONTROLLER='0'B,STCLASS=STATIC,LVL=1,HIGHLOW='1'B);
 1504
 1505       %LSET LISTDIR='0'B;
 1506       %LSET LISTEXP='1'B;
 1507       %LSET LISTCOM='0'B;
 1508       %LSET LISTSUB='1'B;
 1509       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1510       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1511       (SUBSTR(STR,0,8)='CONSTANT') OR
 1512       (SUBSTR(STR,0,3)='EXT');
 1513       %LSET INIT=CHARTEXT('INIT');
 1514      %LSET EINIT=CHARTEXT(' ');
 1515       %ELSE;
 1516       %LSET INIT=CHARTEXT('/*');
 1517      %LSET EINIT=CHARTEXT('*/');
 1518       %ENDIF;
 1519
 1520           %KL_MES (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=",",STCLASS=STCLASS,LVL=LVL);
 1521           %(LVL+1) %CHARTEXT('CHAN ') UBIN        %INIT(CHAN)%EINIT,
 1522                     /* CHAN :  The channel number of the returned channel.
 1523                     This field will be zero if no channel of the requested
 1524                     RES and ATTR is available.                                    */
 1525           %(LVL+1) %CHARTEXT('HIGHCHAN ') UBIN    %INIT(HIGHCHAN)%EINIT,
 1526                     /* HIGHCHAN :  The highest channel number of the
 1527                     requested RES and ATTR. */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         56   
 1528           %(LVL+1) %CHARTEXT('LOWCHAN ') UBIN     %INIT(LOWCHAN)%EINIT,
 1529                     /* LOWCHAN :  The lowest channel number of the
 1530                     requested RES and ATTR. */
 1531           %(LVL+1) %CHARTEXT('DVCID ') BIT(16)       %INIT(DVCID)%EINIT,
 1532                     /* DVCID :  The hardware device ID of the returned channel.   */
 1533           %(LVL+1) %CHARTEXT('EXTDVCID') BIT(16) %INIT('0'B)%EINIT,
 1534              /*K* EXTDVCID : This is passed back on the aquire responce to
 1535                              indicate the extended device I.D. of the
 1536                              device attached to this channel.
 1537              */
 1538           %(LVL+1) %CHARTEXT('RES ') CHAR(2)      %INIT(RES)%EINIT,
 1539                     /* RES :  The software resource type being requested.         */
 1540           %(LVL+1) %CHARTEXT('ATTR ') BIT(16)     %INIT(ATTR)%EINIT,
 1541                     /* ATTR :  The software attributes being requested.
 1542                     Returned as the ATTRs actually obtained.                      */
 1543           %(LVL+1) %CHARTEXT('DIAG') BIT(1) UNAL %INIT(DIAG)%EINIT,
 1544                     /* DIAG :  If set, this is a request for diagnostic access
 1545                     to a channel. For use by a diagnostic handler only.           */
 1546           %(LVL+1) %CHARTEXT('CONTROLLER') BIT(1) UNAL %INIT(CONTROLLER)%EINIT,
 1547                     /* CONTROLLER : If set, aquire the entire controller.
 1548                        This is only honored if DIAG is also set
 1549                     */
 1550           %(LVL+1) %CHARTEXT('HIGHLOW') BIT(1) UNAL %INIT(HIGHLOW)%EINIT,
 1551                     /* HIGHLOW:  If set, Node Admin will fill in HIGHCHAN
 1552                        and LOWCHAN on this call
 1553                     */
 1554           %(LVL+1) * BIT(13) UNAL %INIT('0'B)%EINIT,
 1555           %(LVL+1) ERRCODE BIT(32) %INIT('0'B)%EINIT,
 1556            /*K* ERRCODE:  This field is passed back on an aquire responce
 1557                           to indicate the success or failure of the operation.
 1558            */
 1559           %(LVL+1) USER# UBIN %INIT(0)%EINIT;
 1560           /*K* USER#.  If this structure is being passed as a reult of
 1561                        a user doing an MCL, this contains the user# of
 1562                        the calling user.
 1563           */
 1564
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         57   
 1565      %MEND;
 1566      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         58   
 1567                  /**********************************************/
 1568                  /*F* NAME:      KL_RELEASE                    */
 1569                  /**********************************************/
 1570      /* KL_RELEASE - This structure is passed back and fourth between the
 1571                     handler and Node Admin to perform a release.  NOTE
 1572                     that this structure is both the request and responce
 1573                     structure.
 1574      */
 1575
 1576      %MACRO KL_RELEASE(FPTN=KL_RELEASE,CODE=IGA_LINE_RELEASE,TYPE=0,
 1577                CHAN=0,CONTROLLER(YES='1'B,NO='0'B)='0'B,LVL=1,STCLASS=STATIC);
 1578
 1579       %LSET LISTDIR='0'B;
 1580       %LSET LISTEXP='1'B;
 1581       %LSET LISTCOM='0'B;
 1582       %LSET LISTSUB='1'B;
 1583       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1584       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1585       (SUBSTR(STR,0,8)='CONSTANT') OR
 1586       (SUBSTR(STR,0,3)='EXT');
 1587       %LSET INIT=CHARTEXT('INIT');
 1588      %LSET EINIT=CHARTEXT(' ');
 1589       %ELSE;
 1590       %LSET INIT=CHARTEXT('/*');
 1591      %LSET EINIT=CHARTEXT('*/');
 1592       %ENDIF;
 1593
 1594           %KL_MES (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=",",STCLASS=STCLASS,LVL=LVL);
 1595            %(LVL+1) %CHARTEXT('CHAN ') UBIN %INIT(CHAN)%EINIT,
 1596                     /* CHAN :  The channel to be released
 1597                     */
 1598            %(LVL+1) %CHARTEXT('CONTROLLER ') BIT(1) UNAL %INIT(CONTROLLER)%EINIT,
 1599                     /* CONTROLLER:  Indicates whether or not to release allchannels
 1600                                     this controller.
 1601                     */
 1602            %(LVL+1) * BIT(15) UNAL %INIT('0'B)%EINIT,
 1603            %(LVL+1) USER# UBIN %INIT(0)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         59   
 1604            /*K* USER#.  If this structure is being passed as a reult of
 1605                        a user doing an MCL, this contains the user# of
 1606                        the calling user.
 1607            */
 1608            %(LVL+1) ERRCODE BIT(32) %INIT('0'B)%EINIT;
 1609                     /*K* ERRCODE:  To be passed back to the user.
 1610                     */
 1611      %MEND;
 1612      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         60   
 1613                  /**********************************************/
 1614                  /*F* NAME:      KL_CONTROL_INIT               */
 1615                  /**********************************************/
 1616      /* Structure for handler to request init control params */
 1617      %MACRO KL_CONTROL_INIT (FPTN=KL_CONTROL_INIT,
 1618                              CODE=IGA_CONTROL_INIT,
 1619                              NUM_FIXED=24,
 1620                              NUM_INDXD=2,
 1621                              LAST(YES=";",NO=",",ANY)=";",
 1622                              HNDLR=' ',
 1623                              HNDLRTYPE=0,
 1624                              TYPE=0,
 1625                              STCLASS=STATIC);
 1626
 1627       %LSET LISTDIR='0'B;
 1628       %LSET LISTEXP='1'B;
 1629       %LSET LISTCOM='0'B;
 1630       %LSET LISTSUB='1'B;
 1631       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1632       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1633       (SUBSTR(STR,0,8)='CONSTANT') OR
 1634       (SUBSTR(STR,0,3)='EXT');
 1635       %LSET INIT=CHARTEXT('INIT');
 1636       %LSET EINIT=CHARTEXT(' ');
 1637       %ELSE;
 1638       %LSET INIT=CHARTEXT('/*');
 1639       %LSET EINIT=CHARTEXT('*/');
 1640       %ENDIF;
 1641      %LSET BOUND_FIXED=NUM_FIXED-1;
 1642      %LSET BOUND_INDXD=NUM_INDXD-1;
 1643
 1644           %KL_HDR (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=",",STCLASS=STCLASS,HNDLR=HNDLR);
 1645      %IF MODE_FEP;
 1646            2 HNDLRTYP UBIN(16) %INIT(%HNDLRTYPE)%EINIT,
 1647      %ELSE;
 1648            2 HNDLRTYP UBIN(18) UNAL %INIT(%HNDLRTYPE)%EINIT,
 1649      %ENDIF;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         61   
 1650      %IF MODE_FEP;
 1651            2 NUM_FPARAM UBIN(16) %INIT(NUM_FIXED)%EINIT,
 1652            2 NUM_IPARAM UBIN(16) %INIT(NUM_INDXD)%EINIT,
 1653      %ELSE;
 1654            2 NUM_FPARAM UBIN(18) UNAL %INIT(NUM_FIXED)%EINIT,
 1655            2 NUM_IPARAM UBIN(18) UNAL %INIT(NUM_INDXD)%EINIT,
 1656      %ENDIF;
 1657      %IF MODE_FEP;
 1658            2 FPARAM(0:%BOUND_FIXED) UBIN(16) %INIT(0*0)%EINIT,
 1659      %ELSE;
 1660            2 FPARAM(0:%BOUND_FIXED) UBIN(18) UNAL %INIT(0*0)%EINIT,
 1661      %ENDIF;
 1662            2 IPARAM(0:%BOUND_INDXD) ALIGNED,
 1663      %IF MODE_FEP;
 1664            3 ARRAY_SZ UBIN(8) UNAL %INIT(0*0)%EINIT,
 1665            3 PARAM_SZ UBIN(8) UNAL %INIT(2*0)%EINIT,
 1666            3 OFFSET UBIN(16) %INIT(0*0)%EINIT LAST
 1667      %ELSE;
 1668            3 ARRAY_SZ UBIN(9) UNAL %INIT(0*0)%EINIT,
 1669            3 PARAM_SZ UBIN(9) UNAL %INIT(2*0)%EINIT,
 1670            3 OFFSET UBIN(18) UNAL %INIT(0*0)%EINIT LAST
 1671      %ENDIF;
 1672      %MEND;
 1673      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         62   
 1674                  /**********************************************/
 1675                  /*F* NAME:      KL_INITDONE                   */
 1676                  /**********************************************/
 1677      /* Stucture for init done message from handler to Node Admin */
 1678      %MACRO KL_INITDONE (FPTN=KL_INITDONE,
 1679                          CODE=IGA_HNDLR_INIT_DONE,
 1680                          TYPE=0,
 1681                          STCLASS=STATIC);
 1682
 1683       %LSET LISTDIR='0'B;
 1684       %LSET LISTEXP='1'B;
 1685       %LSET LISTCOM='0'B;
 1686       %LSET LISTSUB='1'B;
 1687       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1688       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1689       (SUBSTR(STR,0,8)='CONSTANT') OR
 1690       (SUBSTR(STR,0,3)='EXT');
 1691       %LSET INIT=CHARTEXT('INIT');
 1692      %LSET EINIT=CHARTEXT(' ');
 1693       %ELSE;
 1694       %LSET INIT=CHARTEXT('/*');
 1695      %LSET EINIT=CHARTEXT('*/');
 1696       %ENDIF;
 1697
 1698            %KL_MES (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=";",STCLASS=STCLASS);
 1699      %MEND;
 1700      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         63   
 1701                  /**********************************************/
 1702                  /*F* NAME:      KL_CHSCRLVL                   */
 1703                  /**********************************************/
 1704      /* Stucture to cause BABOON to change the host intlvl for FEP screeches */
 1705      %MACRO KL_CHSCRLVL (FPTN=KL_CHSCRLVL,
 1706                          CODE=IGA_CHSCRLVL,
 1707                          TYPE=0,
 1708                          STCLASS=STATIC);
 1709
 1710       %LSET LISTDIR='0'B;
 1711       %LSET LISTEXP='1'B;
 1712       %LSET LISTCOM='0'B;
 1713       %LSET LISTSUB='1'B;
 1714       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1715       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1716       (SUBSTR(STR,0,8)='CONSTANT') OR
 1717       (SUBSTR(STR,0,3)='EXT');
 1718       %LSET INIT=CHARTEXT('INIT');
 1719      %LSET EINIT=CHARTEXT(' ');
 1720       %ELSE;
 1721       %LSET INIT=CHARTEXT('/*');
 1722      %LSET EINIT=CHARTEXT('*/');
 1723       %ENDIF;
 1724
 1725            %KL_MES (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=";",STCLASS=STCLASS);
 1726      %MEND;
 1727      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         64   
 1728                  /**********************************************/
 1729      /*F* NAME: KL_CONTROL__ -  Control Parameter Request Message
 1730
 1731      The KL_CONTROL macro in file KL_MACRO_C generates a structure
 1732      for the message that is passed between
 1733      the NETCON processor on the Host and the Node Administrator on the
 1734      FEP when control parameters are to be displayed or reset.
 1735
 1736      This is the structure that is passed to the handler's
 1737      administrative routine when the value of KH$ADMIN_FPT.FNC
 1738      is %KHA_FNC_CNTRLCHG.
 1739
 1740      The default storage class for this macro is STATIC.
 1741      The STCLASS=storage option may be used to reset the
 1742      storage class to BASED.
 1743
 1744      The KL_CONTROL structure contains the following fields:
 1745      */
 1746      %MACRO KL_CONTROL (FPTN=KL_CONTROL,
 1747                         CODE=IGA_CONTROL,
 1748                         TYPE=0,
 1749                         NOD=0,
 1750                         HNDLR=' ',
 1751                         ORG=' ',
 1752                         STCLASS=STATIC);
 1753
 1754       %LSET LISTDIR='0'B;
 1755       %LSET LISTEXP='1'B;
 1756       %LSET LISTCOM='0'B;
 1757       %LSET LISTSUB='1'B;
 1758       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1759       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1760       (SUBSTR(STR,0,8)='CONSTANT') OR
 1761       (SUBSTR(STR,0,3)='EXT');
 1762       %LSET INIT=CHARTEXT('INIT');
 1763       %LSET EINIT=CHARTEXT(' ');
 1764       %ELSE;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         65   
 1765       %LSET INIT=CHARTEXT('/*');
 1766       %LSET EINIT=CHARTEXT('*/');
 1767       %ENDIF;
 1768
 1769            %KL_HDR (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=",",STCLASS=STCLASS);
 1770      %IF MODE_FEP;
 1771            2 CMD UBIN(16) %INIT(0)%EINIT,        /* SET or DISPLAY   */
 1772            2 PARMX UBIN(16) %INIT(0)%EINIT,      /* param index */
 1773            2 INDX UBIN(16) %INIT(0)%EINIT,      /* index for indexed params */
 1774            2 VALUE UBIN(16) %INIT(0)%EINIT,      /* value of param */
 1775            2 OVALUE UBIN(16) %INIT(0)%EINIT;    /* prev value of param*/
 1776      %ELSE;
 1777            2 CMD UBIN(18) UNAL %INIT(0)%EINIT,
 1778      /*K* CMD - UBIN.
 1779      Contains one of the following EQUated values to indicate the
 1780      function that is to be performed:
 1781
 1782      .fif
 1783        01  KL_CONTROL_SET -     Reset the specified control parameter
 1784        02  KL_CONTROL_DISPLAY - Display the specified control parameter
 1785      .fin
 1786
 1787      The EQUs are in the file KL_CONTROL_C.
 1788      */
 1789
 1790            2 PARMX UBIN(18) UNAL %INIT(0)%EINIT,
 1791      /*K* PARMX - UBIN.
 1792      Contains an index into the control parameter table for the
 1793      parameter that is to be reset or displayed.  See the description
 1794      of KL_HNDLRPARM_equ for the possible values and their meaning.
 1795      */
 1796            2 INDX UBIN(18) UNAL %INIT(0)%EINIT,
 1797      /*K* INDX - UBIN.
 1798      If the control parameter selected by the PARMX field is an
 1799      indexed type of parameter, this field will contain the index
 1800      to the parameter that is to be reset or displayed.
 1801      */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         66   
 1802            2 VALUE UBIN(18) UNAL %INIT(0)%EINIT,
 1803      /*K* VALUE - UBIN(18).
 1804      If the function is reset, this field contains the new value.
 1805      If the function is display, this is where the handler is to
 1806      return the current value.
 1807      */
 1808            2 OVALUE UBIN(18) UNAL %INIT(0)%EINIT;
 1809      /*K* OVALUE - UBIN(18).
 1810      If the function is set, this field contains the value of the parameter
 1811      prior to issuing the SET command.*/
 1812      %ENDIF;
 1813      %MEND;
 1814      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         67   
 1815                  /**********************************************/
 1816                  /*F* NAME:      KL_ADMIN                      */
 1817                  /**********************************************/
 1818      /* Structure for Administrative msgs from the HOST to the handler  */
 1819      %MACRO KL_ADMIN (FPTN=KL_ADMIN,
 1820                       CODE=IGA_ADMIN,
 1821                       TYPE=0,
 1822                       NOD=0,
 1823                       ORIGIN=' ',
 1824                       LAST=";",
 1825                       LVL = 1,
 1826                       HNDLR=' ',
 1827                       STCLASS=STATIC);
 1828
 1829       %LSET LISTDIR='0'B;
 1830       %LSET LISTEXP='1'B;
 1831       %LSET LISTCOM='0'B;
 1832       %LSET LISTSUB='1'B;
 1833       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1834       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1835       (SUBSTR(STR,0,8)='CONSTANT') OR
 1836       (SUBSTR(STR,0,3)='EXT');
 1837       %LSET INIT=CHARTEXT('INIT');
 1838       %LSET EINIT=CHARTEXT(' ');
 1839       %ELSE;
 1840       %LSET INIT=CHARTEXT('/*');
 1841       %LSET EINIT=CHARTEXT('*/');
 1842       %ENDIF;
 1843       %LSET NXTLVL=%(LVL+1);
 1844
 1845            %KL_HDR (FPTN=FPTN,CODE=CODE,TYPE=TYPE,LAST=",",STCLASS=STCLASS,ORIGIN=ORIGIN,LVL=LVL);
 1846      %IF MODE_FEP;
 1847            %(LVL+1) FNC UBIN(16) %INIT(0)%EINIT,        /* ENABLE, DISABLE, etc. */
 1848      %ELSE;
 1849            %(LVL+1) FNC UBIN(18) UNAL %INIT(0)%EINIT,
 1850      %ENDIF;
 1851            %B$TERMINAL_ID(FPTN=TERMID_LO,LVL=NXTLVL,STCLASS=STCLASS,LAST=",",ALGN=CALIGNED);
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         68   
 1852            %B$TERMINAL_ID(FPTN=TERMID_HI,LVL=NXTLVL,STCLASS=STCLASS,LAST=LAST,ALGN=CALIGNED);
 1853      %MEND;
 1854      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         69   
 1855                  /**********************************************/
 1856                  /*F* NAME:      KL_RSPPND                     */
 1857                  /**********************************************/
 1858      /* KL_RSPPND - Block containing information about pending responses
 1859                     to messages coming into CG/HLPCG */
 1860      %MACRO KL_RSPPND (FPTN=KL_RSPPND,ALGN=WALIGNED,STCLASS=STATIC);
 1861
 1862       %LSET LISTDIR='0'B;
 1863       %LSET LISTEXP='1'B;
 1864       %LSET LISTCOM='0'B;
 1865       %LSET LISTSUB='1'B;
 1866       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1867       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1868       (SUBSTR(STR,0,8)='CONSTANT') OR
 1869       (SUBSTR(STR,0,3)='EXT');
 1870       %LSET INIT=CHARTEXT('INIT');
 1871       %ELSE;
 1872       %LSET INIT=CHARTEXT('/*');
 1873       %ENDIF;
 1874
 1875      DCL 1 FPTN STCLASS ALGN,
 1876            2 LNK$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
 1877                           /* Link to next KL_RSPPND block                         */
 1878            2 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1879                           /* Message destination node number                      */
 1880            2 * BIT(27) UNAL %INIT('0'B) %CHARTEXT('/**/'),
 1881            2 STATION CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
 1882                           /* Source STATION name on CG/HLPCG that is
 1883                              waiting on the response.                             */
 1884            2 MSGTYPE CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
 1885                           /* MSGTYPE that this message came in with and
 1886                           that the response should be written back with.          */
 1887            2 MSGID BIT(36) %INIT('0'B) %CHARTEXT('/**/');
 1888                           /* MSGID that this message came in with. This
 1889                           will be carried along in the message and come
 1890                           back in the response so that we may pick out
 1891                           the correct KL_RSPPND block later. */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         70   
 1892      %MEND;
 1893      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         71   
 1894                  /**********************************************/
 1895                  /*F* NAME:      KL_LGNPND                     */
 1896                  /**********************************************/
 1897      /* KL_LGNPND - Block containing information about pending logons
 1898                     for timesharing and comgroup users */
 1899      %MACRO KL_LGNPND (FPTN=KL_LGNPND,ALGN=WALIGNED,STCLASS=STATIC);
 1900
 1901       %LSET LISTDIR='0'B;
 1902       %LSET LISTEXP='1'B;
 1903       %LSET LISTCOM='0'B;
 1904       %LSET LISTSUB='1'B;
 1905       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1906       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1907       (SUBSTR(STR,0,8)='CONSTANT') OR
 1908       (SUBSTR(STR,0,3)='EXT');
 1909       %LSET INIT=CHARTEXT('INIT');
 1910       %ELSE;
 1911       %LSET INIT=CHARTEXT('/*');
 1912       %ENDIF;
 1913
 1914      DCL 1 FPTN STCLASS ALGN,
 1915            2 LNK$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
 1916                           /* Link to next KL_LGNPND block                         */
 1917            2 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1918                           /* Logon destination node number                        */
 1919            2 * BIT(27) UNAL %INIT('0'B) %CHARTEXT('/**/'),
 1920            2 SOURCE,
 1921              3 %CHARTEXT('NMID(0:3)'),
 1922                4 * BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
 1923                4 BYT UBIN(8) UNAL %INIT(0) %CHARTEXT('/**/'),
 1924                           /* Source NMID identifier for later response.           */
 1925              3 NODE UBIN BYTE UNAL %INIT(0) %CHARTEXT('/**/'),
 1926                           /* LOGON source node number                             */
 1927            2 * BIT(27) UNAL %INIT('0'B) %CHARTEXT('/**/'),
 1928            2 STATION CHAR(8) %INIT(' ') %CHARTEXT('/**/');
 1929                           /* Source STATION name on CG/HLPCG that is
 1930                              waiting on the logon response.                       */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         72   
 1931      %MEND;
 1932      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         73   
 1933                  /**********************************************/
 1934                  /*F* NAME:      KL_HSGN                       */
 1935                  /**********************************************/
 1936      /* KL_HSGN is sent to Host Logon from the Network Manager
 1937         passing a KL_PCD so that the correct HOST's host logon may
 1938         process the request. A KL_HSGNRSP is expected as a response.
 1939      */
 1940      %MACRO KL_HSGN(FPTN=KL_HSGN,
 1941                       CG=1,
 1942                       STCLASS=STATIC,
 1943                       ALGN=WALIGNED,
 1944                       FCN=IGA_HSGN);
 1945
 1946       %LSET LISTDIR='0'B;
 1947       %LSET LISTEXP='1'B;
 1948       %LSET LISTCOM='0'B;
 1949       %LSET LISTSUB='1'B;
 1950       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1951       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1952       (SUBSTR(STR,0,8)='CONSTANT') OR
 1953       (SUBSTR(STR,0,3)='EXT');
 1954       %LSET INIT=CHARTEXT('INIT');
 1955       %LSET EINIT=CHARTEXT('');
 1956       %ELSE;
 1957       %LSET INIT=CHARTEXT('/*');
 1958       %LSET EINIT=CHARTEXT('*/');
 1959       %ENDIF;
 1960
 1961      DCL 1 FPTN STCLASS ALGN,
 1962            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 1963            /*K* FCN  Indicates the function being performed.
 1964            */
 1965            2 * BIT(27) UNAL %INIT('0'B) %CHARTEXT('/**/'),
 1966      %KL_PCD (FPTN=PCD,STCLASS=STCLASS,CG=CG,LVL=2);
 1967      %MEND;
 1968      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         74   
 1969                  /**********************************************/
 1970                  /*F* NAME:      KL_WRITE                      */
 1971                  /**********************************************/
 1972      /* KL_WRITE - Message passed from the network
 1973                    manager to the node administrator indicating that
 1974                    the text contained in the message is to be written
 1975                    to the terminal attempting logon.
 1976      */
 1977      %MACRO KL_WRITE (FPTN=KL_WRITE,
 1978                        STCLASS=STATIC,
 1979                        ALGN=WALIGNED,
 1980                        MSGSIZE=255,
 1981                        FCN=IGA_WRITE);
 1982
 1983       %LSET LISTDIR='0'B;
 1984       %LSET LISTEXP='1'B;
 1985       %LSET LISTCOM='0'B;
 1986       %LSET LISTSUB='1'B;
 1987       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1988       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1989       (SUBSTR(STR,0,8)='CONSTANT') OR
 1990       (SUBSTR(STR,0,3)='EXT');
 1991       %LSET INIT=CHARTEXT('INIT');
 1992       %LSET EINIT=CHARTEXT('');
 1993       %ELSE;
 1994       %LSET INIT=CHARTEXT('/*');
 1995       %LSET EINIT=CHARTEXT('*/');
 1996       %ENDIF;
 1997
 1998      DCL 1 FPTN STCLASS ALGN,
 1999            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2000            /*K* FCN  Indicates the function being performed.
 2001            */
 2002            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
 2003      %IF NOT(MODE_FEP);
 2004            2 %CHARTEXT('NMID(0:3)'),
 2005              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         75   
 2006              3 BYT UBIN(8) UNAL %INIT(0)%EINIT,
 2007      %ELSE;
 2008            2 %CHARTEXT('NMID') UBIN(32) %INIT(NMID)%EINIT,
 2009            /*K* NMID  This is passed to the network manager, so that it
 2010                       can send it back to node admin to identify NAs context
 2011                       for this logon attempt.
 2012             */
 2013      %ENDIF;
 2014            2 MESSAGE,
 2015              3 %CHARTEXT('MSGSIZE') UBIN BYTE UNAL %INIT(MSGSIZE)%EINIT,
 2016              /*K* MSGSIZE Number of bytes in the passed message
 2017              */
 2018              3 MSGTXT CHAR(MSGSIZE) CALIGNED %INIT(' ')%EINIT;
 2019              /*K* MSGTXT The message itself
 2020              */
 2021
 2022      %MEND;
 2023      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         76   
 2024                  /**********************************************/
 2025                  /*F* NAME:      KL_RETURN                     */
 2026                  /**********************************************/
 2027      /* KL_RETURN - This message is sent to all handlers when a return is
 2028                     done on a partitioned channel.
 2029      */
 2030      %MACRO KL_RETURN (FPTN=KL_RETURN,
 2031                        STCLASS=STATIC,
 2032                        ALGN=WALIGNED,
 2033                        FCN=IGA_RETURN,
 2034                        RES='  ',
 2035                        ATTR='0'B,
 2036                        LVL=1,
 2037                        CHANNEL=0);
 2038
 2039       %LSET LISTDIR='0'B;
 2040       %LSET LISTEXP='1'B;
 2041       %LSET LISTCOM='0'B;
 2042       %LSET LISTSUB='1'B;
 2043       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2044       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2045       (SUBSTR(STR,0,8)='CONSTANT') OR
 2046       (SUBSTR(STR,0,3)='EXT');
 2047       %LSET INIT=CHARTEXT('INIT');
 2048       %LSET EINIT=CHARTEXT('');
 2049       %ELSE;
 2050       %LSET INIT=CHARTEXT('/*');
 2051       %LSET EINIT=CHARTEXT('*/');
 2052       %ENDIF;
 2053
 2054      %IF LVL=1;
 2055      DCL 1 FPTN STCLASS ALGN,
 2056      %ELSE;
 2057           %(LVL) FPTN ALGN,
 2058      %ENDIF;
 2059            %(LVL+1) %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2060            /*K* FCN  Indicates the function being performed.
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         77   
 2061            */
 2062            %(LVL+1) * UBIN BYTE UNAL %INIT(0)%EINIT,
 2063            %(LVL+1) %CHARTEXT('CHANNEL') UBIN %INIT(CHANNEL)%EINIT,
 2064            /*K* CHANNEL  The channel being returned
 2065            */
 2066            %(LVL+1) %CHARTEXT('RES') CHAR(2) %INIT(RES)%EINIT,
 2067            /*K* RES  The resource type of the channel beig returned
 2068            */
 2069            %(LVL+1) %CHARTEXT('ATTR') BIT(16) %INIT(ATTR)%EINIT;
 2070            /*K* ATTR  The attributes of the channel being returned
 2071            */
 2072      %MEND;
 2073      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         78   
 2074                  /**********************************************/
 2075                  /*F* NAME:      KL_LINPROINFO                 */
 2076                  /**********************************************/
 2077      /* KL_LINPROINFO  This message is passed from handler common to
 2078                        the node administrator with line profile
 2079                        information for a channel that has subdevices
 2080                        and subsubdevices (3270 or HASP).
 2081      */
 2082
 2083
 2084      %MACRO KL_LINPROINFO (FPTN=KL_LINPROINFO,
 2085                            CODE=IGA_LINPROINFO,
 2086                            STCLASS=STATIC,
 2087                            ALGN=WALIGNED);
 2088
 2089
 2090       %LSET LISTDIR='0'B;
 2091       %LSET LISTEXP='1'B;
 2092       %LSET LISTCOM='0'B;
 2093       %LSET LISTSUB='1'B;
 2094       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2095       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2096       (SUBSTR(STR,0,8)='CONSTANT') OR
 2097       (SUBSTR(STR,0,3)='EXT');
 2098       %LSET INIT=CHARTEXT('INIT');
 2099       %LSET EINIT=CHARTEXT(' ');
 2100       %ELSE;
 2101       %LSET INIT=CHARTEXT('/*');
 2102       %LSET EINIT=CHARTEXT('*/');
 2103       %ENDIF;
 2104
 2105
 2106      DCL 1 FPTN STCLASS ALGN,
 2107            2 %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(CODE)%EINIT,
 2108            /*K* FCN  Indicates the function being performed
 2109            */
 2110            %B$TERMINAL_ID(FPTN=TERMID,LVL=2,STCLASS=STCLASS,LAST=";",ALGN=CALIGNED);
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         79   
 2111      %MEND;
 2112      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         80   
 2113                  /**********************************************/
 2114                  /*F* NAME:      KL_KEYMES - Keyin Message
 2115           The KL_KEYMES macro in file KL_MACRO_C generates a structure
 2116           for initiating and responding to messages to system consoles.
 2117           This structure is passes as a parameter to KHA$DVCADM in the
 2118           FEP library with a function of KHA_FNC_DVCERR. */
 2119                  /**********************************************/
 2120      %MACRO KL_KEYMES (FPTN=KL_KEYMES,
 2121                          FNC=IGA_KMSG,
 2122                          MSG#=0,
 2123                          NPARMS=0,
 2124                          CADDR=M_COMM,
 2125                          KEYIN_REQ(YES='1'B,NO='0'B)='0'B,
 2126                          STCLASS=BASED,
 2127                          SIZE_INIT="0*0",
 2128                          TYPE_INIT="0*0",
 2129                          CNSFNC=0,
 2130                          ALGN=ALIGNED,
 2131                          LAST=";");
 2132
 2133      /* Variables for the type field */
 2134      %SET  KL_TYPE_NORM = 0;
 2135      %SET  KL_TYPE_BIN = 1;
 2136      %SET  KL_TYPE_ERR = 2;
 2137
 2138       %LSET LISTDIR='0'B;
 2139       %LSET LISTEXP='1'B;
 2140       %LSET LISTCOM='0'B;
 2141       %LSET LISTSUB='1'B;
 2142       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2143       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2144       (SUBSTR(STR,0,8)='CONSTANT') OR
 2145       (SUBSTR(STR,0,3)='EXT');
 2146       %LSET INIT=CHARTEXT('INIT');
 2147       %LSET EINIT=CHARTEXT('');
 2148       %ELSE;
 2149       %LSET INIT=CHARTEXT('/*');
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         81   
 2150       %LSET EINIT=CHARTEXT('*/');
 2151       %ENDIF;
 2152
 2153      DCL 1 FPTN STCLASS ALGN,
 2154            2 %CHARTEXT('FNC ') UBIN BYTE %INIT(FNC)%EINIT UNAL,
 2155            2 * UBIN BYTE %INIT(0)%EINIT UNAL,
 2156      /*K* FNC - UBIN BYTE.
 2157           Indicates type of message.  Substitution strings for FNC are of
 2158           the form IGA_ and are defined in KL_AFCN_C.:LIBRARY.  For device
 2159           error messages FNC=IGA_KMSG.  The default is IGA_KMSG.
 2160      */
 2161
 2162      %IF (MODE_FEP);
 2163            2 %CHARTEXT('MSG# ') UBIN %INIT(MSG#)%EINIT UNAL,
 2164      %ELSE;
 2165            2 %CHARTEXT('MSG# ') UBIN HALF %INIT(MSG#)%EINIT UNAL,
 2166      %ENDIF;
 2167      /*K* MSG# - UBIN WORD.
 2168           Indicates which "structure" KEYIN should use to generate the
 2169           console message.  Values for MSG#
 2170           are listed in the following table.
 2171           ..::TB "^\Decimal  Meaning\Value\#"
 2172           172      Unit Record Peripheral Status message.
 2173           173      Unit Record Peripheral No Keyin message.
 2174           174      3270 Line Printer message.
 2175           ..::TB
 2176      */
 2177      %IF (MODE_FEP);
 2178            2 %CHARTEXT('CADDR ') BIT(18) %INIT(CADDR)%EINIT UNAL,
 2179            2 %CHARTEXT('KEYIN_REQ') BIT(1) UNAL %INIT(KEYIN_REQ)%EINIT,
 2180            2 * BIT(5) UNAL %INIT('0'B)%EINIT,
 2181      %ELSE;
 2182            2 %CHARTEXT('CADDR'),
 2183              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2184              3 TOP BIT(8) UNAL %INIT('0'B)%EINIT,
 2185              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2186              3 MID BIT(8) UNAL %INIT('0'B)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         82   
 2187              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2188              3 BOT BIT(2) UNAL %INIT('0'B)%EINIT,
 2189            2 %CHARTEXT('KEYIN_REQ') BIT(1) UNAL %INIT(KEYIN_REQ)%EINIT,
 2190            2 * BIT(5) UNAL %INIT('0'B)%EINIT,
 2191      %ENDIF;
 2192      /*K* CADDR - BIT(18).
 2193           Is the console address.  CADDR indicates what type of console should
 2194           receive this message.  Values for CADDR are listed
 2195           in the following table.  The default is '004000'O.
 2196           ..::TB "^\Octal\Value\#4\Meaning\#"
 2197          .xeq OC_SUBS_C M_SUBS_C M_COMM
 2198          .xeq OC_SUBS_C M_SUBS_C M_ADCOM
 2199          .xeq OC_SUBS_C M_SUBS_C M_DEVC
 2200          .xeq OC_SUBS_C M_SUBS_C M_SYS
 2201          .xeq OC_SUBS_C M_SUBS_C M_ADMIN
 2202           ..::TB
 2203           */
 2204      /*K* KEYIN_REQ - BIT(1).
 2205           If set, notifies SLUG/KEYIN that a keyin is required in response to
 2206           to this error.  The default is 0.
 2207      */
 2208            2 %CHARTEXT('CNSFNC') UBIN BYTE CALIGNED %INIT(CNSFNC)%EINIT,
 2209      /*K* CNSFNC - UBIN BYTE.
 2210           Is the function keyin is to perform.  Values for CNSFNC are
 2211           listed in the following table.
 2212           ..::TB "^\Decimal  Meaning\Value\#"
 2213          .xeq OC_SUBS_C OC_SUBS_S OC_STTM
 2214          .xeq OC_SUBS_C OC_SUBS_S OC_WRTM
 2215          .xeq OC_SUBS_C OC_SUBS_S OC_WR
 2216          ..::TB
 2217          */
 2218            %B$TERMINAL_ID (FPTN=TERMID,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED,LAST=",");
 2219      %IF (NPARMS=0);
 2220            2 %CHARTEXT('NPARMS ') UBIN BYTE %INIT(NPARMS)%EINIT CALIGNED LAST
 2221      %ELSE;
 2222            2 %CHARTEXT('NPARMS ') UBIN BYTE %INIT(NPARMS)%EINIT CALIGNED,
 2223            2 PARMS(0:%(NPARMS-1)),
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         83   
 2224              3 TYPE UBIN BYTE UNAL %INIT(TYPE_INIT)%EINIT,
 2225              3 SIZE UBIN BYTE UNAL %INIT(SIZE_INIT)%EINIT LAST
 2226      %ENDIF;
 2227      /*K* NPARMS - UBIN BYTE.
 2228           Indicates how many user parameters follow the KEYMES
 2229           structure.  These parameters indicate to keyin the
 2230           state of the device and the text of the keyin according
 2231           to the templates described in OC_MSG_S.
 2232      */
 2233      /*K* PARM - ARRAY(0:NPARM-1).
 2234           Is an array whose elements correspond one to one with user
 2235           appended data.
 2236           This array has two fields:
 2237          .spf 0
 2238              TYPE - UBIN BYTE.
 2239                 Indicates the data type of the corresponding appended
 2240                 data parameter.  TYPE should always be 1.
 2241          .spf 0
 2242              SIZE - UBIN BYTE.
 2243                 Indicates the size (in bytes) of the corresponding data parameter.
 2244      */
 2245
 2246      %MEND;
 2247      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         84   
 2248                  /**********************************************/
 2249                  /*F* NAME:      KL_DVCERRRSP                  */
 2250                  /**********************************************/
 2251      /* KL_DVCERRRSP This message is sent from the Network Manager
 2252         to Handler Common (via Node Admin) when a Keyin is received
 2253         for a FEP connected device.
 2254      */
 2255
 2256
 2257      %MACRO KL_DVCERRRSP (FPTN=KL_DVCERRRSP,
 2258                           FNC=IGA_DVCERRRSP,
 2259                           STCLASS=BASED,
 2260                           ALGN=WALIGNED,
 2261                           KYN#=0);
 2262
 2263       %LSET LISTDIR='0'B;
 2264       %LSET LISTEXP='1'B;
 2265       %LSET LISTCOM='0'B;
 2266       %LSET LISTSUB='1'B;
 2267       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2268       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2269       (SUBSTR(STR,0,8)='CONSTANT') OR
 2270       (SUBSTR(STR,0,3)='EXT');
 2271       %LSET INIT=CHARTEXT('INIT');
 2272       %LSET EINIT=CHARTEXT('');
 2273       %ELSE;
 2274       %LSET INIT=CHARTEXT('/*');
 2275       %LSET EINIT=CHARTEXT('*/');
 2276       %ENDIF;
 2277
 2278      DCL 1 FPTN STCLASS ALGN,
 2279            2 %CHARTEXT('FNC ') UBIN BYTE %INIT(FNC)%EINIT UNAL,
 2280            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
 2281      %IF NOT(MODE_FEP);
 2282            2 %CHARTEXT('KYN#') UBIN HALF CALIGNED %INIT(KYN#)%EINIT,
 2283      %ELSE;
 2284            2 %CHARTEXT('KYN#') UBIN WORD CALIGNED %INIT(KYN#)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         85   
 2285      %ENDIF;
 2286            %B$TERMINAL_ID (FPTN=TERMID,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED);
 2287      %MEND;
 2288      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         86   
 2289                  /**********************************************/
 2290                  /*F* NAME:      KL_NETERR                     */
 2291                  /**********************************************/
 2292      /* KL_NETERR - A structure used to contain a network error code with
 2293                     enough information in it to distinguish between a HOST
 2294                     error code and a FEP error code. */
 2295      %MACRO KL_NETERR (FPTN=KL_NETERR,ALGN=CALIGNED,LVL=1,STCLASS=STATIC,LAST=";");
 2296
 2297       %LSET LISTDIR='0'B;
 2298       %LSET LISTEXP='1'B;
 2299       %LSET LISTCOM='0'B;
 2300       %LSET LISTSUB='1'B;
 2301       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2302       %IF ((SUBSTR(STR,0,6)='STATIC') OR
 2303       (SUBSTR(STR,0,8)='CONSTANT') OR
 2304       (SUBSTR(STR,0,3)='EXT')) AND (TEXTCHAR(LVL)='1');
 2305       %LSET INIT=CHARTEXT('INIT');
 2306       %ELSE;
 2307       %LSET INIT=CHARTEXT('/*');
 2308       %ENDIF;
 2309
 2310      %IF LVL=1;
 2311      DCL 1 FPTN STCLASS ALGN,
 2312      %ELSE;
 2313      %(LVL) FPTN,
 2314      %ENDIF;
 2315
 2316            %IF NOT(MODE_FEP);
 2317            %(LVL+1) * BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2318            %ENDIF;
 2319            %(LVL+1) HOSTERR BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 2320                  /*K* HOSTERR = {YES|NO}. If set, indicates that ERR
 2321                  contains an errcode in HOST form; if reset, indicates that
 2322                  ERR.L6 contains an errcode in L6 form. */
 2323            %(LVL+1) * BIT(7) %INIT('0'B)%CHARTEXT('/**/'),
 2324            %(LVL+1) ERR,
 2325              %(LVL+2) * UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         87   
 2326            %IF NOT(MODE_FEP);
 2327              %(LVL+2) L6(0:3),
 2328                %(LVL+3) * BIT(1) %INIT('0'B*0) %CHARTEXT('/**/'),
 2329                %(LVL+3) BYT UBIN(8) UNAL %INIT(0*0) %CHARTEXT('/**/') LAST
 2330            %ELSE;
 2331              %(LVL+2) L6 BIT(32) %INIT('0'B) %CHARTEXT('/**/') LAST
 2332                  /*K* L6 = An errcode in L6 form. See HOSTERR. */
 2333            %ENDIF;
 2334      %MEND;
 2335      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         88   
 2336      /*F*     NAME: KL_REQSTATS - Statistical Data Request Message
 2337
 2338                The KL_REQSTATS macro in file KL_MACRO_C generates a structure that
 2339                identifies a particular subset of FEP stats data.  It is the
 2340                structure sent by STATS through SLUG to the FEP to request stats
 2341                and to determine what data is requested, and is included as the header
 2342                of each stats message returned from the FEP to identify what part
 2343                of the FEP it came from.
 2344
 2345                This is the structure that is passed to the handler's
 2346                administrative routine when the value of KH$ADMIN_FPT.FNC
 2347                is %KHA_FNC_REQSTATS.
 2348
 2349
 2350                The fields in the KL_REQSTATS structure are:
 2351      */
 2352
 2353      /*
 2354      The KL_REQSTATS macro generates all possible versions of the structure,
 2355      including all combinations of LVL, STCLASS, and L6 vs. HOST.
 2356      Because of the 32 bit to 36 bit word conversion performed in
 2357      STATS, all character data should be segregated at the beginning
 2358      of the structure.  All non-character data should be restricted
 2359      to the lower 32 bits of the word.
 2360      */
 2361
 2362      %MACRO KL_REQSTATS (NAME=KL_REQSTATS,
 2363                          LVL=1,
 2364                          STCLASS=BASED,
 2365                          FNC=IGA_REQSTATS,
 2366                          NODE_NUM=0,
 2367                          STATSSTA=' ',
 2368                          FEPNAME='?',
 2369                          HANDLER='?',
 2370                          ASYNC(SLCT=1,DISP=2)=0,
 2371                          BSC(SLCT=1,DISP=2)=0,
 2372                          FEI(SLCT=1,DISP=2)=0,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         89   
 2373                          HDLC(SLCT=1,DISP=2)=0,
 2374                          URP(SLCT=1,DISP=2)=0,
 2375                          T3270(SLCT=1,DISP=2)=0,
 2376                          PLDVIP(SLCT=1,DISP=2)=0,
 2377                          RBT(SLCT=1,DISP=2)=0,
 2378                          X25(SLCT=1,DISP=2)=0,
 2379                          VDH(SLCT=1,DISP=2)=0,
 2380                          APE(SLCT=1,DISP=2)=0,
 2381                          NODADM(SLCT=1,DISP=2)=0,
 2382                          IO(SLCT=1,DISP=2)=0,
 2383                          X29(SLCT=1,DISP=2)=0,
 2384                          ML(SLCT=1,DISP=2)=0,
 2385                          MONITOR(SLCT=1,DISP=2)=0,
 2386                          ARYDCL(YES='1'B,NO='0'B)='1'B,
 2387                          LAST=";");
 2388
 2389      %LSET LISTDIR = '0'B;
 2390      %LSET LISTEXP = '1'B;
 2391      %LSET LISTCOM = '0'B;
 2392      %LSET LISTSUB = '1'B;
 2393      %LSET KLVL = LVL+1;
 2394      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
 2395      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
 2396      %LSET INIT = CHARTEXT('INIT');
 2397      %LSET ENIT = CHARTEXT('');
 2398      %LSET STR=1;
 2399      %ELSE;
 2400      %LSET INIT = CHARTEXT('/*');
 2401      %LSET ENIT = CHARTEXT('*/');
 2402      %LSET STR=0;
 2403      %ENDIF;
 2404      %IF MODE_FEP;
 2405      %LSET WORD_SIZE = 32;
 2406      %ELSE;
 2407      %LSET WORD_SIZE = 36;
 2408      %ENDIF;
 2409      %LSET SMSK='00000000000000000000000000000000'B;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         90   
 2410      %LSET DMSK='00000000000000000000000000000000'B;
 2411      %IF STR*ASYNC>0;
 2412      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_ASYNC),'1'B,
 2413                     SUBBIT(SMSK,%KH#ENTID_ASYNC+1));
 2414      %ENDIF;
 2415      %IF STR*ASYNC>1;
 2416      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_ASYNC),'1'B,
 2417                     SUBBIT(DMSK,%KH#ENTID_ASYNC+1));
 2418      %ENDIF;
 2419      %IF STR*BSC>0;
 2420      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_BSC),'1'B,
 2421                     SUBBIT(SMSK,%KH#ENTID_BSC+1));
 2422      %ENDIF;
 2423      %IF STR*BSC>1;
 2424      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_BSC),'1'B,
 2425                     SUBBIT(DMSK,%KH#ENTID_BSC+1));
 2426      %ENDIF;
 2427      %IF STR*FEI>0;
 2428      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_FEI),'1'B,
 2429                     SUBBIT(SMSK,%KH#ENTID_FEI+1));
 2430      %ENDIF;
 2431      %IF STR*FEI>1;
 2432      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_FEI),'1'B,
 2433                     SUBBIT(DMSK,%KH#ENTID_FEI+1));
 2434      %ENDIF;
 2435      %IF STR*HDLC>0;
 2436      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_HDLC),'1'B,
 2437                     SUBBIT(SMSK,%KH#ENTID_HDLC+1));
 2438      %ENDIF;
 2439      %IF STR*HDLC>1;
 2440      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_HDLC),'1'B,
 2441                     SUBBIT(DMSK,%KH#ENTID_HDLC+1));
 2442      %ENDIF;
 2443      %IF STR*URP>0;
 2444      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_URP),'1'B,
 2445                     SUBBIT(SMSK,%KH#ENTID_URP+1));
 2446      %ENDIF;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         91   
 2447      %IF STR*URP>1;
 2448      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_URP),'1'B,
 2449                     SUBBIT(DMSK,%KH#ENTID_URP+1));
 2450      %ENDIF;
 2451      %IF STR*T3270>0;
 2452      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_3270),'1'B,
 2453                     SUBBIT(SMSK,%KH#ENTID_3270+1));
 2454      %ENDIF;
 2455      %IF STR*T3270>1;
 2456      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_3270),'1'B,
 2457                     SUBBIT(DMSK,%KH#ENTID_3270+1));
 2458      %ENDIF;
 2459      %IF STR*PLDVIP>0;
 2460      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_PLDVIP),'1'B,
 2461                     SUBBIT(SMSK,%KH#ENTID_PLDVIP+1));
 2462      %ENDIF;
 2463      %IF STR*PLDVIP>1;
 2464      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_PLDVIP),'1'B,
 2465                     SUBBIT(DMSK,%KH#ENTID_PLDVIP+1));
 2466      %ENDIF;
 2467      %IF STR*RBT>0;
 2468      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_RBT),'1'B,
 2469                     SUBBIT(SMSK,%KH#ENTID_RBT+1));
 2470      %ENDIF;
 2471      %IF STR*RBT>1;
 2472      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_RBT),'1'B,
 2473                     SUBBIT(DMSK,%KH#ENTID_RBT+1));
 2474      %ENDIF;
 2475      %IF STR*X25>0;
 2476      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_X25),'1'B,
 2477                     SUBBIT(SMSK,%KH#ENTID_X25+1));
 2478      %ENDIF;
 2479      %IF STR*X25>1;
 2480      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_X25),'1'B,
 2481                     SUBBIT(DMSK,%KH#ENTID_X25+1));
 2482      %ENDIF;
 2483      %IF STR*VDH>0;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         92   
 2484      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_VDH),'1'B,
 2485                     SUBBIT(SMSK,%KH#ENTID_VDH+1));
 2486      %ENDIF;
 2487      %IF STR*VDH>1;
 2488      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_VDH),'1'B,
 2489                     SUBBIT(DMSK,%KH#ENTID_VDH+1));
 2490      %ENDIF;
 2491      %IF STR*APE>0;
 2492      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_APE),'1'B,
 2493                     SUBBIT(SMSK,%KH#ENTID_APE+1));
 2494      %ENDIF;
 2495      %IF STR*APE>1;
 2496      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_APE),'1'B,
 2497                     SUBBIT(DMSK,%KH#ENTID_APE+1));
 2498      %ENDIF;
 2499      %IF STR*NODADM>0;
 2500      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_NODADM),'1'B,
 2501                     SUBBIT(SMSK,%KH#ENTID_NODADM+1));
 2502      %ENDIF;
 2503      %IF STR*NODADM>1;
 2504      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_NODADM),'1'B,
 2505                     SUBBIT(DMSK,%KH#ENTID_NODADM+1));
 2506      %ENDIF;
 2507      %IF STR*IO>0;
 2508      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_IO),'1'B,
 2509                     SUBBIT(SMSK,%KH#ENTID_IO+1));
 2510      %ENDIF;
 2511      %IF STR*IO>1;
 2512      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_IO),'1'B,
 2513                     SUBBIT(DMSK,%KH#ENTID_IO+1));
 2514      %ENDIF;
 2515      %IF STR*X29>0;
 2516      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_X29),'1'B,
 2517                     SUBBIT(SMSK,%KH#ENTID_X29+1));
 2518      %ENDIF;
 2519      %IF STR*X29>1;
 2520      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_X29),'1'B,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         93   
 2521                     SUBBIT(DMSK,%KH#ENTID_X29+1));
 2522      %ENDIF;
 2523      %IF STR*ML>0;
 2524      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_ML),'1'B,
 2525                     SUBBIT(SMSK,%KH#ENTID_ML+1));
 2526      %ENDIF;
 2527      %IF STR*ML>1;
 2528      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_ML),'1'B,
 2529                     SUBBIT(DMSK,%KH#ENTID_ML+1));
 2530      %ENDIF;
 2531      %IF STR*MONITOR>0;
 2532      %LSET SMSK=CONCAT(SUBBIT(SMSK,0,%KH#ENTID_MONITOR),'1'B,
 2533                     SUBBIT(SMSK,%KH#ENTID_MONITOR+1));
 2534      %ENDIF;
 2535      %IF STR*MONITOR>1;
 2536      %LSET DMSK=CONCAT(SUBBIT(DMSK,0,%KH#ENTID_MONITOR),'1'B,
 2537                     SUBBIT(DMSK,%KH#ENTID_MONITOR+1));
 2538      %ENDIF;
 2539
 2540      %IF LVL = 1;
 2541      DCL 1 NAME STCLASS WALIGNED,
 2542      %ELSE;
 2543            %LVL NAME WALIGNED,
 2544      %ENDIF;
 2545
 2546      /*K* FNC - function code, by which SLUG recognizes the message as a stats
 2547                request.  The mandatory default is %IGA_REQSTATS from the file
 2548                KL_AFCN_C for both the request and the response.
 2549      */
 2550            %KLVL %CHARTEXT('FNC ') UBIN BYTE %INIT(FNC)%ENIT UNAL,
 2551
 2552      /*K* NODE_NUM - The node number of the FEP this message belongs to.
 2553                Used by SLUG to identify the destination of the request.
 2554                Used by STATS to identify the source of the response.
 2555      */
 2556            %KLVL %CHARTEXT('NODE_NUM') UBIN BYTE %INIT(NODE_NUM)%ENIT UNAL,
 2557
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         94   
 2558            %KLVL SRCE_NODE UBIN BYTE UNAL %INIT(0)%ENIT,
 2559            %KLVL * UBIN BYTE UNAL %INIT(0)%ENIT,
 2560
 2561      /*K* ERRCODE - Used by SLUG to indicate to STATS that an error occurred.
 2562      */
 2563            %VLP_ERRCODE(FPTN=ERRCODE,LVL=KLVL,STCLASS=STCLASS,LAST=",");
 2564
 2565      /*K* STATSSTA - The station name on CSCG of the instance of STATS this message
 2566                belongs to.  Used by SLUG to route responses back to STATS.
 2567      */
 2568            %KLVL %CHARTEXT('STATSSTA') CHAR(8) %INIT(STATSSTA)%ENIT,
 2569
 2570      /*K* FEPNAME - The name of the FEP this message belongs to.  Filled in by SLUG
 2571                based on NODE_NUM.  Used by STATS for display purposes.
 2572      */
 2573            %KLVL %CHARTEXT('FEPNAME') CHAR(8) %INIT(FEPNAME)%ENIT,
 2574
 2575      /*K* HANDLER - Handler Name.  In the stats request, used to select a handler for
 2576                which stats are to be returned.  In most cases stats request will
 2577                contain blanks, meaning all handlers.  In the stats response, filled
 2578                in by NODEADMIN to identify the source of this chunk.
 2579      */
 2580            %KLVL %CHARTEXT('HANDLER') CHAR(8) %INIT(HANDLER)%ENIT,
 2581
 2582      /*K* DSPMSK - BIT(32).  Contains display bits, by entity.
 2583                When set in the stats request, each bit requests that any selected
 2584                handlers return statistics for the entity corresponding to the bit.
 2585                In the stats response, one bit should be set to indicate to which
 2586                entity the data belongs.  This bit is used by STATS to select
 2587                the format in which to display the data.  To cause a DSPMSK bit
 2588                to be set, entity-name = DISP may be specified.  See SLCMSK for
 2589                more information.
 2590      */
 2591      %IF NOT MODE_FEP;
 2592            %KLVL * BIT(%(WORD_SIZE-32)) %INIT('0'B)%ENIT,
 2593      %ENDIF;
 2594            %KLVL DSPMSK BIT(32) %INIT( %DMSK )%ENIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         95   
 2595
 2596      /*K* DSPENT.  Is DSPMSK redefined as a bit array indexed by %KH#ENTID_...
 2597              DSPENT is generated only when ARYDCL=YES, so that multi-dimension conflicts
 2598              may be avoided.  The default for ARYDCL is YES.
 2599      */
 2600
 2601      %IF ARYDCL='1'B;
 2602            %KLVL DSPENT(0:31) REDEF DSPMSK BIT(1),
 2603      %ENDIF;
 2604
 2605      /*K* SLCMSK - BIT(32).  Contains select bits, by entity.
 2606                A handler is selected if there is a bit set in the stats request
 2607                for at least one entity belonging to the handler at each level.
 2608                In the stats response, select bits should be set for every entity
 2609                that can contribute activity to this chunk of stats data, i.e.,
 2610                the entity returning the data and everything above and below it.
 2611                Bits may be set in SLCMSK by specifying entity-name = SLCT or
 2612                entity-name = DISP.  A list of entity-names known by STATS and
 2613                by the KL_REQSTATS macro follows:
 2614
 2615                .fif
 2616                name   layer        description
 2617                ----   -----        -----------
 2618                ASYNC  link         Asynchronous handler
 2619                BSC    link         Bisync handler
 2620                FEI    link         Coupler handler
 2621                HDLC   link         HDLC handler
 2622                URP    link         Unit record peripheral handler
 2623                X25    network      X25 protocol machine
 2624                ML     network      Multi-link protocol machine
 2625                VDH    presentation Virtual Device Handler
 2626                APE    presentation Application Protocol Engine
 2627                X29    application  X29 handler
 2628                IO     application  Device IO routines
 2629                NODADM application  Node administration handler
 2630                RBT    application  RBT handler
 2631                PLDVIP application  PLDVIP handler
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         96   
 2632                T3270  application  3270 handler
 2633                MONITOR             LCP-6 operating system
 2634                .fin
 2635      */
 2636      %IF NOT MODE_FEP;
 2637            %KLVL * BIT(%(WORD_SIZE-32)) %INIT('0'B)%ENIT,
 2638      %ENDIF;
 2639            %KLVL SLCMSK BIT(32) %INIT( %SMSK )%ENIT
 2640
 2641      /*K* SLCENT.  Is  SLCMSK redefined as a bit array indexed by %KH#ENTID_...
 2642              SLCENT is generated only when ARYDCL=YES, so that multi-dimension conflicts
 2643              may be avoided.  The default for ARYDCL is YES.
 2644      */
 2645      %IF ARYDCL='1'B;
 2646            ,
 2647            %KLVL SLCENT(0:31) REDEF SLCMSK BIT(1)
 2648      %ENDIF;
 2649            LAST
 2650      %MEND;
 2651                  /**********************************************/
 2652                  /*F* NAME:       KL_SYSLOG                     */
 2653                  /**********************************************/
 2654      /* KL_SYSLOG - Message send from handler to Network manager to put something in syslog
 2655      */
 2656      %MACRO KL_SYSLOG (FPTN=KL_SYSLOG,
 2657                           STCLASS=STATIC,
 2658                           ALGN=WALIGNED,
 2659                           LAST=";",
 2660                           FILENUM(ERRLOG=1,ACCOUNTING=2,SECLOG=3,ANY)=1,
 2661                           FCN=IGA_SYSLOG);
 2662
 2663       %LSET LISTDIR='0'B;
 2664       %LSET LISTEXP='1'B;
 2665       %LSET LISTCOM='0'B;
 2666       %LSET LISTSUB='1'B;
 2667       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2668       %IF (SUBSTR(STR,0,6)='STATIC') OR
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         97   
 2669       (SUBSTR(STR,0,8)='CONSTANT') OR
 2670       (SUBSTR(STR,0,3)='EXT');
 2671       %LSET INIT=CHARTEXT('INIT');
 2672       %LSET EINIT=CHARTEXT('');
 2673       %ELSE;
 2674       %LSET INIT=CHARTEXT('/*');
 2675       %LSET EINIT=CHARTEXT('*/');
 2676       %ENDIF;
 2677
 2678      DCL 1 FPTN STCLASS ALGN,
 2679            2  %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2680                  /*K* FCN  Indicates the function being performed. */
 2681            2  *(0:1) UBIN BYTE UNAL %INIT(0*0)%EINIT,
 2682            2  %CHARTEXT('FILENUM') UBIN BYTE UNAL %INIT(FILENUM)%EINIT LAST
 2683                     /*N* FILENUM = ERRLOG | ACCOUNTING. FILENUM specifies
 2684                     if the message is to go into the error log file or
 2685                     the accounting log file. */
 2686      %MEND;
 2687      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         98   
 2688                  /**********************************************/
 2689                  /*F* NAME:       KL_ERRLOG                     */
 2690                  /**********************************************/
 2691      /* KL_ERRLOG - Format of the errlog buffer from the handler. */
 2692      %MACRO KL_ERRLOG(FPTN=KL_ERRLOG,
 2693                            STCLASS=BASED,
 2694                            ALGN=CALIGNED,
 2695                            FCG='  ',
 2696                            MID=' ',
 2697                            MON='1'B,
 2698                            ERR#=0,
 2699                            LVL=1,
 2700                            LAST=";");
 2701
 2702       %LSET LISTDIR='0'B;
 2703       %LSET LISTEXP='1'B;
 2704       %LSET LISTCOM='0'B;
 2705       %LSET LISTSUB='1'B;
 2706       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2707       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2708       (SUBSTR(STR,0,8)='CONSTANT') OR
 2709       (SUBSTR(STR,0,3)='EXT');
 2710       %LSET INIT=CHARTEXT('INIT');
 2711       %LSET EINIT=CHARTEXT('');
 2712       %ELSE;
 2713       %LSET INIT=CHARTEXT('/*');
 2714       %LSET EINIT=CHARTEXT('*/');
 2715       %ENDIF;
 2716      %LSET K_LVL = LVL+1;
 2717
 2718      %IF LVL=1;
 2719      DCL 1 FPTN STCLASS ALGN,
 2720      %ELSE;
 2721           %(LVL) FPTN ALGN,
 2722      %ENDIF;
 2723
 2724               %VLP_ERRCODE(FPTN=ERRCODE,FCG=FCG,MID=MID,MON=MON,ERR#=ERR#,LVL=K_LVL,LAST=",",STCLASS=STCLASS,ALGN=ALGN);
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         99   
 2725      %IF MODE_FEP;
 2726            %K_LVL UTS UBIN(32) %INIT(0)%EINIT,
 2727      %ELSE;
 2728            %K_LVL UTS UBIN(36) %INIT(0)%EINIT,
 2729      %ENDIF;
 2730            %B$TERMINAL_ID (FPTN=TERMID,STCLASS=STCLASS,LVL="%K_LVL",LAST=",");
 2731      %IF MODE_FEP;
 2732            %K_LVL VALUES (0:3) UBIN %INIT(0*0)%EINIT,
 2733      %ELSE;
 2734            %K_LVL VALUES (0:3) UBIN HALF HALIGNED %INIT(0*0)%EINIT,
 2735      %ENDIF;
 2736            %K_LVL DATA_SIZE UBIN BYTE UNAL %INIT(0)%EINIT LAST
 2737
 2738      %MEND;
 2739      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         100  
 2740
 2741
 2742      /*F* NAME: KL_ERRMSG_RQS
 2743
 2744      The KL_ERRMSG_RQS macro generates the structure
 2745      for the message that is sent by the Node Administrator
 2746      to the Network Manager when a user on the node has
 2747      issued an M$ERRMSG MCL.
 2748      */
 2749
 2750      %MACRO KL_ERRMSG_RQS (FPTN=KL_ERRMSG_RQS,FCN=IGA_ERRMSG_RQS,
 2751           FILE_PARAMS(YES='1'B,NO='0'B)='1'B,ALGN=WALIGNED,STCLASS=STATIC);
 2752
 2753       %LSET LISTDIR='0'B;
 2754       %LSET LISTEXP='1'B;
 2755       %LSET LISTCOM='0'B;
 2756       %LSET LISTSUB='1'B;
 2757       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2758       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2759       (SUBSTR(STR,0,8)='CONSTANT') OR
 2760       (SUBSTR(STR,0,3)='EXT');
 2761      %LSET INIT=CHARTEXT(' INIT');
 2762      %LSET EINIT=CHARTEXT('');
 2763       %ELSE;
 2764      %LSET INIT=CHARTEXT('/*');
 2765      %LSET EINIT=CHARTEXT('*/');
 2766      %ENDIF;
 2767
 2768      DCL 1 FPTN STCLASS ALGN,
 2769            2 %CHARTEXT('FCN ') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2770                          /*K* FCN - UBIN.
 2771                          Contains the function code that indicates that
 2772                          the message is a syslog message.  This value is
 2773                          %IGA_ERRMSG_RQS (45) from the KL_AFCN_C include file.
 2774                          */
 2775            2 USR# UBIN BYTE UNAL %INIT(0)%EINIT,
 2776                          /*K* USR# - UBIN BYTE.
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         101  
 2777                          Contains the user number of the user making
 2778                          the request.
 2779                          */
 2780            2 LANG CHAR(1) UNAL %INIT(' ')%EINIT,
 2781
 2782      %IF NOT(MODE_FEP);
 2783            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2784      %ENDIF;
 2785            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2786
 2787            2 LEAVE_TOKEN BIT(1) UNAL %INIT('0'B)%EINIT,
 2788
 2789            2 SUBLANG BIT(1) UNAL %INIT('0'B)%EINIT,
 2790
 2791            2 SUBFILE BIT(1) UNAL %INIT('0'B)%EINIT,
 2792
 2793            2 SUBMESS BIT(1) UNAL %INIT('0'B)%EINIT,
 2794
 2795            2 INCLCODE BIT(1) UNAL %INIT('0'B)%EINIT,
 2796                            /*K* INCLCODE - BIT(1).
 2797                            If set, indicates that the error code itself, in
 2798                            TEXT, should be included in the error message.
 2799                            */
 2800            2 ALTCODE_EXISTS BIT(1) UNAL %INIT('0'B)%EINIT,
 2801
 2802            2 FID_EXISTS BIT(1) UNAL %INIT('0'B)%EINIT,
 2803                            /*K* FID_EXISTS - BIT(1).
 2804                            If set, indicates that the message contains the
 2805                            parameters that designate the error message file.
 2806                            */
 2807            2 CTX$ PTR %INIT(ADDR(NIL))%EINIT,
 2808                          /*K* CTX$ - PTR.
 2809                          Contains the address of the context buffer for
 2810                          this message in NODEADMIN's data.
 2811                          */
 2812      %IF MODE_FEP;
 2813      %VLP_ERRCODE (FPTN=ERR,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED,LAST=",");
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         102  
 2814      %ELSE;
 2815            2 ERR BIT(36) UNAL %INIT('0'B)%EINIT,
 2816      %ENDIF;
 2817                          /*K* ERR.
 2818                          Contains the error code identifying the message to
 2819                          be read from the specified error message file.
 2820                          */
 2821      %IF NOT(FILE_PARAMS);
 2822      %IF MODE_FEP;
 2823      %VLP_ERRCODE (FPTN=ALTERR,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED,LAST=";");
 2824      %ELSE;
 2825            2 ALTERR BIT(36) UNAL %INIT('0'B)%EINIT;
 2826      %ENDIF;
 2827      %ELSE;
 2828      %IF MODE_FEP;
 2829      %VLP_ERRCODE (FPTN=ALTERR,LVL=2,STCLASS=STCLASS,ALGN=CALIGNED,LAST=",");
 2830      %ELSE;
 2831            2 ALTERR BIT(36) UNAL %INIT('0'B)%EINIT,
 2832      %ENDIF;
 2833                          /*K* ALTERR.
 2834                          Contains the error code identifying the message to
 2835                          be read from the specified error message file, if
 2836                          no message cann be found for ERR.
 2837                          */
 2838            2 FILENAME,
 2839              3 L UBIN BYTE UNAL %INIT(0)%EINIT,
 2840              3 TEXT CHAR(31) UNAL %INIT(' ')%EINIT,
 2841
 2842            2 FILEACCT CHAR(8) UNAL %INIT(' ')%EINIT,
 2843
 2844            2 FILEPASS CHAR(6) UNAL %INIT(' ')%EINIT;
 2845
 2846      %ENDIF;
 2847      %MEND;
 2848
 2849
 2850
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         103  
 2851      /*F* NAME: KL_ERRMSG_RSP
 2852
 2853      The KL_ERRMSG_RSP macro generates the structure
 2854      for the message that is returned to the Node
 2855      Administer by the Network Manager in response to
 2856      a KL_ERRMSG_RQS.
 2857      */
 2858
 2859      %MACRO KL_ERRMSG_RSP (FPTN=KL_ERRMSG_RSP,FCN=IGA_ERRMSG_RSP,
 2860           LONG(YES='1'B,NO='0'B)='1'B,ALGN=WALIGNED,STCLASS=STATIC);
 2861
 2862       %LSET LISTDIR='0'B;
 2863       %LSET LISTEXP='1'B;
 2864       %LSET LISTCOM='0'B;
 2865       %LSET LISTSUB='1'B;
 2866       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2867       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2868       (SUBSTR(STR,0,8)='CONSTANT') OR
 2869       (SUBSTR(STR,0,3)='EXT');
 2870      %LSET INIT=CHARTEXT(' INIT');
 2871      %LSET EINIT=CHARTEXT('');
 2872       %ELSE;
 2873      %LSET INIT=CHARTEXT('/*');
 2874      %LSET EINIT=CHARTEXT('*/');
 2875      %ENDIF;
 2876
 2877      DCL 1 FPTN STCLASS ALGN,
 2878            2 %CHARTEXT('FCN ') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2879                          /*K* FCN - UBIN.
 2880                          Contains the function code that indicates that
 2881                          the message is a syslog message.  This value is
 2882                          %IGA_ERRMSG_RSP (46) from the KL_AFCN_C include file.
 2883                          */
 2884            2 USR# UBIN BYTE UNAL %INIT(0)%EINIT,
 2885                          /*K* USR# - UBIN BYTE.
 2886                          Contains the user number of the user making
 2887                          the request.
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         104  
 2888                          */
 2889            2 MESSAGE_SZ UBIN BYTE UNAL %INIT(0)%EINIT,
 2890                          /* MESSAGE_SZ - UBIN BYTE.
 2891                          Contains the byte size of MESSAGE.
 2892                          */
 2893
 2894
 2895      %IF NOT(MODE_FEP);
 2896            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2897      %ENDIF;
 2898            2 * BIT(1) UNAL %INIT('0'B)%EINIT,
 2899            2 NOFILE BIT(1) UNAL %INIT('0'B)%EINIT,
 2900                          /*K* NOFILE = VALUE-BIT(1)   if set specifies that
 2901                          M$ERRMSG  was unable to open the message file.
 2902                          */
 2903            2 NOMSG BIT(1) UNAL %INIT('0'B)%EINIT,
 2904                          /*K* NOMSG = VALUE-BIT(1)   if set means that
 2905                          M$ERRMSG  was unable to find any message for the
 2906                          error code.
 2907                          */
 2908            2 ALTMSG BIT(1) UNAL %INIT('0'B)%EINIT,
 2909                          /*K* ALTMSG = VALUE-BIT(1)   if set means that
 2910                          M$ERRMSG  stored a substitute message in the user
 2911                          buffer.
 2912                          */
 2913            2 MSGCOMP BIT(1) UNAL %INIT('0'B)%EINIT,
 2914                          /*K* MSGCOMP = VALUE-BIT(1)   if set means that the
 2915                          entire message is stored in the user buffer.
 2916                          */
 2917            2 NNATIVE BIT(1) UNAL %INIT('0'B)%EINIT,
 2918                          /*K* NNATIVE = VALUE-BIT(1)   if set means that the
 2919                          returned message is not in the user's native language.
 2920                          */
 2921            2 NO_NM BIT(1) UNAL %INIT('0'B)%EINIT,
 2922                          /*K* NO_NM = VALUE-BIT(1)   if set specifies
 2923                          that the Network Manager is not active.
 2924                          */
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         105  
 2925            2 INERR BIT(1) UNAL %INIT('0'B)%EINIT,
 2926                          /*K* INERR = VALUE-BIT(1)   if set specifies
 2927                          error on reading the message.
 2928                          */
 2929      %IF NOT(LONG);
 2930            2 CTX$ PTR %INIT(ADDR(NIL))%EINIT;
 2931      %ELSE;
 2932            2 CTX$ PTR %INIT(ADDR(NIL))%EINIT,
 2933                          /*K* CTX$ - PTR.
 2934                          Contains the address of the context buffer for
 2935                          this message in NODEADMIN's data.
 2936                          */
 2937            2 MESSAGE(0:119) CHAR(1) UNAL %INIT(' '*0)%EINIT;
 2938      %ENDIF;
 2939      %MEND;
 2940      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         106  
 2941
 2942                  /*F* NAME:       KL_NODEINFO                   */
 2943                  /**********************************************/
 2944      /* KL_NODINFO - Contains the node information for thisn node
 2945      */
 2946      %MACRO KL_NODEINFO (FPTN=KL_NODEINFO,
 2947                           STCLASS=STATIC,
 2948                           ALGN=WALIGNED,
 2949                           LAST=";",
 2950                           NODETYPE(HOST=1,FEP=2)=1,
 2951                           FCN=IGA_NODEINFO);
 2952
 2953       %LSET LISTDIR='0'B;
 2954       %LSET LISTEXP='1'B;
 2955       %LSET LISTCOM='0'B;
 2956       %LSET LISTSUB='1'B;
 2957       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2958       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2959       (SUBSTR(STR,0,8)='CONSTANT') OR
 2960       (SUBSTR(STR,0,3)='EXT');
 2961       %LSET INIT=CHARTEXT('INIT');
 2962       %LSET EINIT=CHARTEXT('');
 2963       %ELSE;
 2964       %LSET INIT=CHARTEXT('/*');
 2965       %LSET EINIT=CHARTEXT('*/');
 2966       %ENDIF;
 2967
 2968      DCL 1 FPTN STCLASS ALGN,
 2969            2  %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 2970                  /*K* FCN  Indicates the function being performed. */
 2971            2  * UBIN BYTE UNAL %INIT(0)%EINIT,
 2972            2 BOSS UBIN BYTE UNAL %INIT(0)%EINIT,
 2973            2  %CHARTEXT('NODETYPE') UBIN BYTE UNAL %INIT(NODETYPE)%EINIT,
 2974            2 MYNODE UBIN BYTE UNAL %INIT(0)%EINIT,
 2975            2 MYNAME CHAR(8) UNAL %INIT(' ')%EINIT LAST
 2976      %MEND;
 2977
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         107  
 2978
 2979      /*F* NAME: KL_NODECHG
 2980
 2981      Contains a change in state for a node
 2982      */
 2983      %MACRO KL_NODECHG (FPTN=KL_NODECHG,
 2984                           STCLASS=STATIC,
 2985                           ALGN=WALIGNED,
 2986                           LAST=";",
 2987                           FCN=IGA_NODECHG);
 2988
 2989       %LSET LISTDIR='0'B;
 2990       %LSET LISTEXP='1'B;
 2991       %LSET LISTCOM='0'B;
 2992       %LSET LISTSUB='1'B;
 2993       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2994       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2995       (SUBSTR(STR,0,8)='CONSTANT') OR
 2996       (SUBSTR(STR,0,3)='EXT');
 2997       %LSET INIT=CHARTEXT('INIT');
 2998       %LSET EINIT=CHARTEXT('');
 2999       %ELSE;
 3000       %LSET INIT=CHARTEXT('/*');
 3001       %LSET EINIT=CHARTEXT('*/');
 3002       %ENDIF;
 3003
 3004      DCL 1 FPTN STCLASS ALGN,
 3005            2  %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 3006                  /*K* FCN  Indicates the function being performed. */
 3007            2  *(0:1) UBIN BYTE UNAL %INIT(0)%EINIT,
 3008            2 MYNODE UBIN BYTE UNAL %INIT(0)%EINIT,
 3009            2 NODE UBIN BYTE UNAL %INIT(0)%EINIT,
 3010            2 HOSTNODE UBIN BYTE UNAL %INIT(0)%EINIT,
 3011            2 QOS UBIN BYTE UNAL %INIT(0)%EINIT LAST
 3012      %MEND;
 3013                  /**********************************************/
 3014      /*F* NAME: KL_UPDOSI
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         108  
 3015
 3016      The KL_UPDOSI structure in file KL_MACROS_C defines the OSI Route
 3017      Table update information.  This format is used to pass OSI routing
 3018      information from the ROUTECON processor to the node managers in
 3019      order to keep the KNN$OSIROUTE table information current.
 3020
 3021      This is also the format used for the records in the :ROUTE file
 3022      in :SYS.  The keys of this file are 8 bytes of text and are
 3023      built from the name the user supplies as nsap_name to ROUTECON.
 3024      */
 3025      %MACRO KL_UPDOSI  (FPTN=KL_UPDOSI,
 3026                           STCLASS=BASED,
 3027                           ALGN=WALIGNED,
 3028                           LAST=";",
 3029                           LVL=1,
 3030                           ARY=0,
 3031                           ADRTYP(X121=1,FEP=2,LACS=3,NET=4)=4,
 3032                           FCN=IGA_UPDOSI,
 3033                           TYPE=0);
 3034
 3035       %LSET LISTDIR='0'B;
 3036       %LSET LISTEXP='1'B;
 3037       %LSET LISTCOM='0'B;
 3038       %LSET LISTSUB='1'B;
 3039       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3040       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3041       (SUBSTR(STR,0,8)='CONSTANT') OR
 3042       (SUBSTR(STR,0,3)='EXT');
 3043       %LSET INIT=CHARTEXT('INIT');
 3044       %LSET EINIT=CHARTEXT('');
 3045       %ELSE;
 3046       %LSET INIT=CHARTEXT('/*');
 3047       %LSET EINIT=CHARTEXT('*/');
 3048       %ENDIF;
 3049      %IF LVL=1;
 3050        %IF ARY=0;
 3051      DCL 1 FPTN STCLASS ALGN,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         109  
 3052        %ELSE;
 3053      DCL 1 FPTN(0:%ARY) STCLASS ALGN,
 3054        %ENDIF;
 3055      %ELSE;
 3056        %IF ARY=0;
 3057           %(LVL) FPTN,
 3058        %ELSE;
 3059           %(LVL) FPTN(0:%ARY),
 3060        %ENDIF;
 3061      %ENDIF;
 3062
 3063        %(LVL+1) %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 3064                          /*K* FCN - UBIN BYTE.
 3065                          Indicates the function being performed.
 3066                          FCN will contain one of the following values:
 3067
 3068                          .fif
 3069                             IGA_UPDOSI   86   Update table entry
 3070                             IGA_DELOSI   87   Delete table entry
 3071                          .fin
 3072                          */
 3073
 3074
 3075      %IF NOT (MODE_FEP);
 3076      %(LVL+1) * BIT(1) UNAL %INIT('0'B)%EINIT,
 3077      %ENDIF;
 3078
 3079        %(LVL+1) %CHARTEXT('NS_TYPE') UBIN(4) UNAL %INIT(TYPE)%EINIT,
 3080                          /*K* NS_TYPE - UBIN(4).
 3081                          The NSAP Type field indicates if this
 3082                          is a local or remote NSAP.
 3083
 3084                          .XEQ K_ADDRESS_M K_TYPE_equ VALUES
 3085                          */
 3086
 3087      %(LVL+1) NW_TYPE UBIN(4) UNAL %INIT(0)%EINIT,
 3088                          /*K* NW_TYPE - UBIN(4).
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         110  
 3089                          The Network Type field indicates what type
 3090                          of network is used to reach the target NSAP.
 3091
 3092                          .XEQ K_ADDRESS_M K_NWTYPE_equ VALUES
 3093                          */
 3094
 3095        %(LVL+1) MYNODE# UBIN BYTE UNAL %INIT(0)%EINIT,
 3096               /*K* MYNODE# indicates the node# which relayed this message to me*/
 3097
 3098        %(LVL+1) HOST#  REDEF MYNODE# UBIN BYTE UNAL,
 3099
 3100        %(LVL+1) NODE# UBIN BYTE UNAL %INIT(0)%EINIT,
 3101               /*K* NODE#  -- nodenumber of the endpoint to which the address is attached*/
 3102
 3103        %(LVL+1) FEP# REDEF NODE# UBIN BYTE UNAL,
 3104
 3105        %(LVL+1) LINK# UBIN BYTE UNAL %INIT(0)%EINIT,
 3106               /*K* LINK#  -- link# of the physical attachment.  Used only on the endpoint/boundry node*/
 3107
 3108        %(LVL+1) QOS UBIN BYTE UNAL %INIT(0)%EINIT,
 3109               /*K* QOS -- quality of service as given in the FPT_CONNECT.  */
 3110
 3111        %(LVL+1) LIFETIME UBIN BYTE UNAL %INIT(0)%EINIT,
 3112               /*K* LIFETIME -- a value in 500 ms units which details how long this address is valid
 3113                      lifetime = 0 the address is discarded. A value of 255 means never discard.*/
 3114
 3115        %(LVL+1) * UBIN BYTE UNAL %INIT(0)%EINIT,
 3116
 3117      %LSET NXTLVL = %(LVL+1);
 3118        %K$NSAP(FPTN=NSAP,LVL=%NXTLVL,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=",");
 3119              /*K* the Network Entity Title.  This is the address by which the
 3120                   distant network is known.  The SNPA is the x121 address by which
 3121                   this nsap is known.  The link# and node# are used internally to
 3122                   route the message to the node to which the sub network is attached.*/
 3123
 3124        %K$NSAP(FPTN=LNSAP,LVL=%NXTLVL,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=",");
 3125             /*K*  LNSAP is the network entity title by which we are known to the
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         111  
 3126                   network described by NSAP.*/
 3127
 3128       %K$SNPA(FPTN=SNPA,LVL=%NXTLVL,STCLASS=STCLASS,LAST=LAST);
 3129              /*K* subnetwork point of attachment associated with this nsap*/
 3130      %MEND;
 3131                  /**********************************************/
 3132                  /*F* NAME:       KL_OSILINKCHG                */
 3133                  /**********************************************/
 3134
 3135      /* KL_OSILINKCHG - routing information passed between the network nodes
 3136                         to indicate when an osi link has changed state.
 3137      */
 3138      %MACRO KL_OSILINKCHG  (FPTN=KL_OSILINKCHG,
 3139                           STCLASS=BASED,
 3140                           ALGN=WALIGNED,
 3141                           LAST=";",
 3142                           LVL=1,
 3143                           ARY=0,
 3144                           ADRTYP(X121=1,FEP=2,LACS=3,NET=4)=4,
 3145                           FCN=IGA_OSILINKCHG,
 3146                           TYPE=IGA_OSILINKUP);
 3147
 3148       %LSET LISTDIR='0'B;
 3149       %LSET LISTEXP='1'B;
 3150       %LSET LISTCOM='0'B;
 3151       %LSET LISTSUB='1'B;
 3152       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3153       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3154       (SUBSTR(STR,0,8)='CONSTANT') OR
 3155       (SUBSTR(STR,0,3)='EXT');
 3156       %LSET INIT=CHARTEXT('INIT');
 3157       %LSET EINIT=CHARTEXT('');
 3158       %ELSE;
 3159       %LSET INIT=CHARTEXT('/*');
 3160       %LSET EINIT=CHARTEXT('*/');
 3161       %ENDIF;
 3162      %IF LVL=1;
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         112  
 3163        %IF ARY=0;
 3164      DCL 1 FPTN STCLASS ALGN,
 3165        %ELSE;
 3166      DCL 1 FPTN(0:%ARY) STCLASS ALGN,
 3167        %ENDIF;
 3168      %ELSE;
 3169        %IF ARY=0;
 3170           %(LVL) FPTN,
 3171        %ELSE;
 3172           %(LVL) FPTN(0:%ARY),
 3173        %ENDIF;
 3174      %ENDIF;
 3175
 3176        %(LVL+1) %CHARTEXT('FCN') UBIN BYTE UNAL %INIT(FCN)%EINIT,
 3177                          /*K* FCN - UBIN BYTE.
 3178                          Indicates the function being performed.
 3179                          FCN will contain one of the following values:
 3180
 3181                          .fif
 3182                          IGA_OSILINKCHG      90   OSI Link status change
 3183                          IGA_OSILINKCHG_DF   91   OSI Link status change,
 3184                                                   but don't forward info.
 3185                                                   Used when connecting to host.
 3186                          .fin
 3187                          */
 3188
 3189        %(LVL+1) %CHARTEXT('TYPE') UBIN BYTE UNAL %INIT(TYPE)%EINIT,
 3190                          /*K* TYPE - UBIN BYTE.
 3191                          Defines what type of link change this is.
 3192                          This will be one of the following values:
 3193
 3194                          .fif
 3195                          IGA_OSILINKUP     88   OSI Link is now active
 3196                          IGA_OSILINKDOWN   89   OSI Link is no longer active
 3197                          .fin
 3198                          */
 3199
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         113  
 3200        %(LVL+1) MYNODE# UBIN BYTE UNAL %INIT(0)%EINIT,
 3201               /*K* MYNODE# indicates the node# which relayed this message to me*/
 3202
 3203        %(LVL+1) NODE# UBIN BYTE UNAL %INIT(0)%EINIT,
 3204               /*K* NODE#  -- nodenumber of the endpoint to which the address is attached*/
 3205
 3206        %(LVL+1) QOS UBIN BYTE UNAL %INIT(0)%EINIT,
 3207               /*K* QOS -- quality of service as given in the FPT_CONNECT.  */
 3208
 3209        %(LVL+1) LIFETIME UBIN BYTE UNAL %INIT(0)%EINIT,
 3210               /*K* LIFETIME -- a value in 500 ms units which details how long this address is valid
 3211                      lifetime = 0 the address is discarded. A value of 255 means never discard.*/
 3212
 3213        %(LVL+1) * UBIN BYTE UNAL %INIT(0)%EINIT,
 3214        %(LVL+1) * UBIN BYTE UNAL %INIT(0)%EINIT,
 3215
 3216      %LSET NXTLVL = %(LVL+1);
 3217       %K$SNPA(FPTN=SNPA,LVL=%NXTLVL,STCLASS=STCLASS,LAST=",");
 3218              /*K* subnetwork point of attachment associated with this nsap*/
 3219
 3220       %B$TERMINAL_ID(FPTN=TERMID,LVL=%NXTLVL,STCLASS=STCLASS,LAST=LAST);
 3221              /*K* b$terminal_id used only to uniquely identify the snpa in
 3222                   cp6 term.  node#+termid is the key in :network*/
 3223      %MEND;
 3224
 3225      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         114  
 3226      /*F*    NAME: KL_DUMPMSG
 3227              Purpose:
 3228                 The KL_DUMPMSG structure describes the messages passed
 3229              between FROG and NA for RFEP dumps and SNAPs and SUAs on all
 3230              FEPs.                                                      */
 3231      %MACRO KL_DUMPMSG (FPTN=KL_DUMPMSG,
 3232                         STCLASS=STATIC,
 3233                         ALGN=WALIGNED,
 3234                         DSIZE=0);
 3235
 3236       %LSET LISTDIR='0'B;
 3237       %LSET LISTEXP='1'B;
 3238       %LSET LISTCOM='0'B;
 3239       %LSET LISTSUB='1'B;
 3240       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3241       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3242       (SUBSTR(STR,0,8)='CONSTANT') OR
 3243       (SUBSTR(STR,0,3)='EXT');
 3244       %LSET INIT=CHARTEXT('INIT');
 3245       %LSET EINIT=CHARTEXT('');
 3246       %ELSE;
 3247       %LSET INIT=CHARTEXT('/*');
 3248       %LSET EINIT=CHARTEXT('*/');
 3249       %ENDIF;
 3250      %IF (TEXTCHAR(DSIZE)='0');
 3251          %LSET DTASZ=CHARTEXT(CONCAT(TEXTCHAR(FPTN),'.DATASIZE'));
 3252      %ELSE;
 3253          %LSET DTASZ=CHARTEXT(TEXTCHAR(DSIZE));
 3254      %ENDIF;
 3255
 3256
 3257      DCL 1 FPTN STCLASS ALGN,
 3258      %IF (MODE_FEP='0'B);
 3259            2 CSHDR,
 3260              3 KEY# UBIN HALF CALIGNED %INIT(0)%EINIT,
 3261              3 FUNCTION UBIN BYTE CALIGNED %INIT(0)%EINIT,
 3262              3 FEX UBIN BYTE CALIGNED %INIT(0)%EINIT,
14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         115  
 3263      %ELSE;
 3264            2 NAHDR,
 3265              3 CODE UBIN BYTE CALIGNED %INIT(0)%EINIT,
 3266              3 ERRFLAG UBIN BYTE CALIGNED %INIT(0)%EINIT,
 3267              3 * UBIN(16) CALIGNED %INIT(0)%EINIT,
 3268      %ENDIF;
 3269            2 TYPE UBIN BYTE CALIGNED %INIT(0)%EINIT,
 3270              /* Message types are GI_DUMP_? in GI_MACRO_M. */
 3271            2 * UBIN BYTE CALIGNED %INIT(0)%EINIT,
 3272      %LSET FEP=BITBIN(MODE_FEP);
 3273            2 FEX UBIN(%(18-2*FEP)) CALIGNED %INIT(0)%EINIT,
 3274            2 DATASIZE UBIN(%(18-2*FEP)) CALIGNED %INIT(0)%EINIT,
 3275            2 RPN UBIN(%(18-2*FEP)) CALIGNED %INIT(0)%EINIT,     /* Real Page No. */
 3276            2 DATA CHAR(%DTASZ);
 3277
 3278      %MEND;
 3279
 3280      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         116  
 3281      /*F*    NAME: KL_TIME
 3282              Purpose:
 3283                 The KL_TIME is used to set the time to a given node
 3284                                                                    */
 3285      %MACRO KL_TIME (FPTN=KL_TIME,
 3286                         STCLASS=STATIC,
 3287                         ALGN=WALIGNED);
 3288
 3289       %LSET LISTDIR='0'B;
 3290       %LSET LISTEXP='1'B;
 3291       %LSET LISTCOM='0'B;
 3292       %LSET LISTSUB='1'B;
 3293       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3294       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3295       (SUBSTR(STR,0,8)='CONSTANT') OR
 3296       (SUBSTR(STR,0,3)='EXT');
 3297       %LSET INIT=CHARTEXT('INIT');
 3298       %LSET EINIT=CHARTEXT('');
 3299       %ELSE;
 3300       %LSET INIT=CHARTEXT('/*');
 3301       %LSET EINIT=CHARTEXT('*/');
 3302       %ENDIF;
 3303
 3304
 3305      DCL 1 FPTN STCLASS ALGN,
 3306            2 FNC UBIN BYTE CALIGNED %INIT(IGA_TIME)%EINIT,
 3307      %IF(MODE_FEP);
 3308            2 UTS UBIN(32) UNAL %INIT(0)%EINIT;
 3309      %ELSE;
 3310            2 UTS UNAL,
 3311              3 BYTES(0:3) UBIN BYTE UNAL;
 3312      %ENDIF;
 3313
 3314      %MEND;
 3315
 3316      %EJECT;

14:50 JUL 28 '97 KL_MACRO_C.:E05SI                                         117  
 3317      /*F*    NAME: KL_RUE
 3318              Purpose:
 3319                     To record a event on a given user
 3320                                                                    */
 3321      %MACRO KL_RUE (FPTN=KL_RUE,
 3322                         STCLASS=STATIC,
 3323                         EVENT=0,
 3324                         SYSID=0,
 3325                         ALGN=WALIGNED);
 3326
 3327       %LSET LISTDIR='0'B;
 3328       %LSET LISTEXP='1'B;
 3329       %LSET LISTCOM='0'B;
 3330       %LSET LISTSUB='1'B;
 3331       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3332       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3333       (SUBSTR(STR,0,8)='CONSTANT') OR
 3334       (SUBSTR(STR,0,3)='EXT');
 3335       %LSET INIT=CHARTEXT('INIT');
 3336       %LSET EINIT=CHARTEXT('');
 3337       %ELSE;
 3338       %LSET INIT=CHARTEXT('/*');
 3339       %LSET EINIT=CHARTEXT('*/');
 3340       %ENDIF;
 3341
 3342
 3343      %KL_HDR (FPTN=FPTN,STCLASS=STCLASS,CODE=IGA_RUE,LAST=",");
 3344      %IF (MODE_FEP);
 3345            2 %CHARTEXT('SYSID') UBIN WORD CALIGNED %INIT(SYSID)%EINIT,
 3346      %ELSE;
 3347            2 SYSID# UBIN HALF CALIGNED %INIT(SYSID)%EINIT,
 3348      %ENDIF;
 3349            2 EVENT# UBIN BYTE CALIGNED %INIT(EVENT)%EINIT,
 3350            2 * (0:2) UBIN BYTE CALIGNED %INIT(0*0)%EINIT;
 3351      %MEND;

