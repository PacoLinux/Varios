

11:55 AUG 20 '97 zbc$type:str.:ZBC3TSI                                     1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: type.str,v 3.6 87/03/25 23:14:43 ceriel Exp $ */
    6      /* TYPE DESCRIPTOR */
    7
    8      #include "zbc$nofloat:h"
    9      #include "zbc$nobitfield:h"
   10
   11      struct formallist   {
   12        int          fl_num;       /*    Number of formal arguments */
   13        int          fl_fbytes;    /*    Number of bytes of formals */
   14        int          fl_elips;     /*    formals end with ...       */
   15        struct type *fl_type[1];   /*  Types of formal arguments    */
   16        };
   17
   18
   19      struct type  {
   20       struct type *next;   /* used only with ARRAY */
   21       short tp_fund;    /* fundamental type */
   22       char tp_unsigned;
   23       int tp_align;
   24       arith tp_size;    /* -1 if declared but not defined */
   25       short tp_const;         /* 0 or CONST */
   26       short tp_volatile;         /* 0 or VOLATILE */
   27       struct idf *tp_idf;  /* name of STRUCT, UNION or ENUM */
   28       struct sdef *tp_sdef;   /* to first selector */
   29       struct type *tp_up;  /* from FIELD, POINTER, ARRAY
   30                   or FUNCTION to fund. */
   31       struct field *tp_field; /* field descriptor if fund == FIELD */
   32       struct type *tp_pointer;/* to POINTER */
   33       struct type *tp_array;  /* to ARRAY */
   34       struct type *tp_function;/* to FUNCTION */
   35       struct formallist *tp_formal;
   36       struct type *tp_nqualified;  /* to base non-const/non-volatile type*/
   37       int  tp_debmes; /* need schema for based struct */
11:55 AUG 20 '97 zbc$type:str.:ZBC3TSI                                     2    
   38       char *tp_file;         /*   File of struct definition */
   39       int  tp_line;          /*   Line number of definition */
   40       long tp_debline;       /*   Debuggers linenumber      */
   41      };
   42
   43      extern struct type
   44       *create_type(), *standard_type(), *construct_type(), *pointer_to(),
   45       *array_of(), *function_of(), *build_qualified_type(), *compose_types();
   46
   47      #ifndef NOBITFIELD
   48      extern struct type *field_of();
   49      #endif NOBITFIELD
   50
   51      extern struct type
   52       *char_type, *schar_type, *uchar_type,
   53       *short_type, *ushort_type,
   54       *word_type, *uword_type,
   55       *int_type, *sint_type, *uint_type,
   56       *long_type, *ulong_type,
   57      #ifndef NOFLOAT
   58       *float_type, *double_type,
   59      #endif NOFLOAT
   60       *void_type, *voidptr_type, *label_type,
   61       *string_type, *funint_type, *error_type;
   62
   63      extern struct type *pa_type;   /* type.c   */
   64
   65      extern arith size_of_type(), align_of_type(), align();
   66      extern struct type *unqualified_type_of();
   67
   68      extern struct type *ldouble_type;
   69      /* ALLOCDEF "type" 20 */
   70

