
     DIRECTORY AND SEGMENT LIST  (OBJECT UNIT NAME '')

      * SYMDEF *        GLOBAL NAME               SEGMENT  OFFSET      ACCESS ATTRIBUTES
     1  X9RI   'X9RI'                              .X9RI       0          R  W  E  L  U

      * SYMREF *        GLOBAL NAME                                    ACCESS ATTRIBUTES
     2  X9RR   'X9RR'                                                     R  W  E  L  U
     3  X8ER   'X8ER$ERROR'                                               R  W  E  L  U

      * SECTION *          SIZE          KIND
     4  .X9RI               140           CODE
     5  .X9RI.               34           DATA


     PROGRAM BREAK         174

                                      1 *M*
                                      2 *T***********************************************************
                                      3 *T*                                                         *
                                      4 *T* COPYRIGHT (C) BULL HN INFORMATION SYSTEMS INC., 1997    *
                                      5 *T*                                                         *
                                      6 *T***********************************************************
                        000000        7        SECT    .X9RI,CODE
                                      8 *P*
                                      9 *P*
                                     10 *P*     NAME       : X9RI
                                     11 *P*     AUTHOR     : JIM B. BEHM
                                     12 *P*     REVISED BY : CHARLES F. LACASSE III
                                     13 *P*     PURPOSE    : COMPUTES EXPONENTIATION OF A FLOAT BASE TO
                                     14 *P*                  INTEGER EXPONENT IN A HIGHLY OPTIMIZED FASHION.
                                     15 *P*
                                     16 *P*
                                     17 *D*
                                     18 *D*
                                     19 *D*     NAME       : X9RI
                                     20 *D*     CALL       :   . . .
                                     21 *D*                  EPPRO    NEWARG
                                     22 *D*                  EPPR4    RELGUY
                                     23 *D*                  STP4     NEWARG
                                     24 *D*                  EPPR4    INTGUY
                                     25 *D*                  STP4     NEWARG+1
                                     26 *D*                  EPPR4    RELRES
                                     27 *D*                  STP4     NEWARG+2
                                     28 *D*                  EPPR1    NUMARG
                                     29 *D*                  TSX1     X9RI
                                     30 *D*                    . . .
                                     31 *D*           NEWARG BSS      3
                                     32 *D*           NUMARG VFD      18/3,18/0
                                     33 *D*                    . . .
                                     34 *D*     INTERFACE  : 1.) X9RR - FOR EXPONENTS >= 512 X9RR IS
                                     35 *D*                      CALLED FOR THE LOGARITHM METHOD WHICH IS
                                     36 *D*                      QUICKER FOR LARGE NUMBERS.
                                     37 *D*     INPUT      : 1.) SINGLE FLOATING BASE

                                     38 *D*                  2.) INTEGER EXPONENT
                                     39 *D*     OUTPUT     : SINGLE FLOATING RESULT
                                     40 *D*     SCRATCH    : NONE
                                     41 *D*     REFERENCE  : X8LC$DOCUMENT, J. R. WILSON FOR THE ALGORITHM.
                                     42 *D*
                                     43 *D*
                                     44 *V*
                                     45 *V*
                                     46 *V*                    GENERAL_ALGORITHM
                                     47 *V*
                                     48 *V*     THE GENERAL ALGORITHM IS :
                                     49 *V*
                                     50 *V*                1.) TEST FOR SPECIAL CASES.
                                     51 *V*
                                     52 *V*                    A.) EXPONENT OF ZERO
                                     53 *V*                    B.) EXPONENT OF ONE
                                     54 *V*                    C.) NEGATIVE EXPONENTS
                                     55 *V*
                                     56 *V*                2.) IF EXPONENT IS >= 512 THEN CALL X9RR
                                     57 *V*
                                     58 *V*                3.) COMPUTE PARTIAL SUMS:
                                     59 *V*
                                     60 *V*                    BASE, BASE ** 2, BASE ** 4, BASE ** 8 ETC
                                     61 *V*                    UNTIL THE NEXT EXPONENT OF THE PARTIAL SUM
                                     62 *V*                    GREATER THAN THE INPUT EXPONENT.
                                     63 *V*
                                     64 *V*                    NOTE : EACH PARTIAL SUM IS COMPUTED BY SQUARING
                                     65 *V*                           THE PREVIOUS PARTIAL SUM.
                                     66 *V*
                                     67 *V*                4.) TAKE THE LARGEST PARTIAL SUM AND PUT IT IN
                                     68 *V*                    THE ANSWER, SUBTRACT THE EXPONENT USED IN
                                     69 *V*                    COMPUTING THE PARTIAL SUM FROM THE INPUT
                                     70 *V*                    EXPONENT, REPEAT USING THE NEXT SMALLEST
                                     71 *V*                    PARTIAL SUM UNTIL THE EXPONENT IS ZERO,
                                     72 *V*                    AFTER EACH ITERATION MULTIPLYING THE PREVIOUS
                                     73 *V*                    ANSWER BY THE NEXT PARTIAL SUM.
                                     74 *V*

                                     75 *V*
                        000000       76        ENTDEF  X9RI
                        000000       77        ENTREF  X9RR
                        000000       78        ENTREF  (X8ER,X8ER$ERROR)  ERROR MESAGE ROUTINE
                                     79 *
                        000000       80 X9RI   NULL
                                     81 *
      000000 000000 7530 00 010NN    82        SREG    REG
      000001 000026 4574 00 010NN    83        STP7    PR7
      000002 000027 4564 00 010NN    84        STP6    PR6
      000003 000030 4554 00 010NN    85        STP5    PR5
      000004 000031 4544 00 010NN    86        STP4    PR4
      000005 000000 4775 00          87        LDP7    0,,0
      000006 000001 4765 00          88        LDP6    1,,0
      000007 000002 4755 00          89        LDP5    2,,0
      000010 000000 2250 03          90        LDX5    =0,DU          CLEAR X5
      000011 600000 2351 00          91        LDA     0,,6
      000012 000021 6054 00 010NN    92        TPNZ    NXTEST     EXPONENT > 0
      000013 000017 6000 00 010NN    93        TZE     EXZERO     EXPONENT = 0

                                     95 *V*
                                     96 *V*            EXPONENT_IS_NEGATIVE
                                     97 *V*
                                     98 *V*      IT HAS BEEN DETERMINED THAT THE EXPONENT IS NEGATIVE
                                     99 *V*  SO, NEGATE THE EXPONENT AND SET THE NEGATIVE EXPONENT FLAG;
                                    100 *V*  THEN TREAT AS POSITIVE UNTIL EXIT.  AT THE EXIT INVERT THE RESULT.
                                    101 *V*
      000014 000000 5310 00         102        NEG                NEGATE THE NEGATIVE EXPONENT.
      000015 000001 2250 03         103        LDX5    =1,DU      SET NEG EXP FLAG.
      000016 000025 7100 00 010NN   104        TRA     NT1OR0

                        000017      106 EXZERO NULL
                                    107 *V*
                                    108 *V*
                                    109 *V*                    POWER_IS_ZERO
                                    110 *V*
                                    111 *V*     IF THE POWER IS ZERO THEN THE ANSWER WILL BE ONE AND THE
                                    112 *V*     EXPONENTIATION WILL BE DONE.
                                    113 *V*
                                    114 *V*
      000017 002040 4310 03         115        FLD     =1.0EX0,DU
      000020 000103 7100 00 010NN   116        TRA     EXIT
                                    117 *
                        000021      118 NXTEST NULL
                                    119 *
                                    120 *V*
                                    121 *V*
                                    122 *V*                    POWER_IS_ONE
                                    123 *V*
                                    124 *V*     IF THE POWER IS ONE THEN THE ANSWER IS THE BASE.  THE
                                    125 *V*     EXPONENTIATION IS DONE.
                                    126 *V*
                                    127 *V*
      000021 000001 1150 07         128        CMPA    =1,DL          IS EXPONENT ONE
      000022 000025 6010 00 010NN   129        TNZ     NT1OR0         NO, NOT ONE
      000023 700000 4311 00         130        FLD     0,,7
      000024 000103 7100 00 010NN   131        TRA     EXIT

                        000025      133 NT1OR0 NULL
                                    134 *
                                    135 *V*
                                    136 *V*
                                    137 *V*                    POWER_GTR_1_2K
                                    138 *V*
                                    139 *V*     IF THE POWER IS GREATER THAN 1/2K THEN IT WOULD BE JUST
                                    140 *V*     AS EFFICEINT TO CALL X9RR FOR THESE CASES.  THE CALLING
                                    141 *V*     SEQUENCE MUST BE ADJUSTED TO INCLUDE A DESCRIPTOR FOR
                                    142 *V*     THE POWER.
                                    143 *V*
                                    144 *V*
      000025 001000 1150 07         145        CMPA    =512,DL       IS EXPONENT GREATER THAN 1/2 K
      000026 000041 6040 00 010NN   146        TMI     ALLOK
      000027 000000 2360 07         147        LDQ     0,DL
      000030 020000 4110 03         148        LDE     =8192,DU       THIS SEQUENCE OF INSTRUCTIONS CONVERTS
      000031 000003 7370 00         149        LLS     3              AN INTEGER NUMBER TO A REAL NUMBER AND
      000032 000000 5730 00         150        FNO     0              CALLS X9RR.
      000033 000022 4550 00 010NN   151        FST     TMPEXP
      000034 000022 6344 00 010NN   152        EPPR4   TMPEXP
      000035 000001 4545 00         153        STP4    1,,0
      000036 000000 7100 00 020NN   154        TRA     X9RR
      000037 000000 0110 07         155        NOP     0,DL
      000040 000103 7100 00 010NN   156        TRA     EXIT
                                    157 *
                                    158 *
                        000041      159 ALLOK  NULL
                                    160 *
                                    161 *V*
                                    162 *V*
                                    163 *V*                    INITIALIZE
                                    164 *V*
                                    165 *V*     THE INDEXES TO THE PARTIAL RESULTS AND TO THE TABLES
                                    166 *V*     FOR THE BOUNDARIES FOR COMPARISONS.  THE INDEXES FOR
                                    167 *V*     THE PARTIAL RESULTS SHOULD BE INCREMENTED BY 1 AFTER
                                    168 *V*      EACH ADDITION TO IT TO HAVE ENOUGH SPACE FOR A POSSIBLE
                                    169 *V*     1 WORDS.

                                    170 *V*
                                    171 *V*
      000041 000025 7550 00 010NN   172        STA     EXPONT
      000042 000000 2220 03         173        LDX2    0,DU
      000043 700000 4311 00         174        FLD     0,,7           GET THE BASE
      000044 000010 4550 12 010NN   175        FST     PAREXP,2
      000045 000001 0620 03         176        ADX2    1,DU

                                    178 *
                        000046      179 EXPINC NULL
                                    180 *
                                    181 *V*
                                    182 *V*
                                    183 *V*                    COMPUTE_PARTIAL_RESULTS
                                    184 *V*
                                    185 *V*     COMPUTE THE PARTIAL RESULTS FROM THE BASE.  KEEP ON
                                    186 *V*     COMPUTING UNTIL THE EXPONENT IS LESS THAN THE EQUIVALENT
                                    187 *V*     EXPONENT OF THE BOUND TABLE ( EXPBND ), EG.
                                    188 *V*
                                    189 *V*             PARTIAL RESULTS         EXPBND
                                    190 *V*             ---------------         ------
                                    191 *V*
                                    192 *V*   4 ** 7 =   PR(1) = 4                1     = BASE ** EXPBND(1)
                                    193 *V*                      16               2        "         "   2
                                    194 *V*                      256              4        "         "   3
                                    195 *V*                      65536            8         "         "   4
                                    196 *V*
                                    197 *V*     WE WOULD STOP BUILDING THE PR TABLE WHEN THE EXPBND WAS
                                    198 *V*     GREATER THAN THE EXPONENT  =  8  >  7  =.  THE COMPUT-
                                    199 *V*     ATIONS COME LATER TO GET THE ANSWER.
                                    200 *V*
                                    201 *V*
      000046 000007 4310 12 010NN   202        FLD     PAREXP-1,2     GET THE PREVIOUS ITERATION(MULTIPLE)
      000047 000007 4610 12 010NN   203        FMP     PAREXP-1,2     SQUARE IT
      000050 000010 4700 12 010NN   204        FSTR    PAREXP,2       AND STORE IT(THIS ITERATION'S MULTIPLE)
      000051 000001 0620 03         205        ADX2    1,DU
      000052 000011 1020 03         206        CMPX2   =9,DU          IS X2 OUT OF THE RANGE( OUT OF BOUNDS
                                    207 *                             OF EXPBND )
      000053 000057 6000 00 010NN   208        TZE     X2EXIT
      000054 000112 2350 12 010NN   209        LDA     EXPBND,2
      000055 000025 1150 00 010NN   210        CMPA    EXPONT         COMPARE THE EXPONT TO THIS ITERATIONS
                                    211 *                             BOUNDRY - EXPBND <= EXPONT ?
      000056 000046 6044 00 010NN   212        TMOZ    EXPINC
                                    213 *
                                    214 *

                                    215 *                             NOW THE MULTIPLE( PARTIAL RESULTS )
                                    216 *                             TABLE IS BUILT SO JUST DECREMENT X2
                                    217 *                             TEST, AND GO AGAIN.
                                    218 *
                        000057      219 X2EXIT NULL
                                    220 *
                                    221 *V*
                                    222 *V*
                                    223 *V*                    DECREMENT_COUNTERS
                                    224 *V*
                                    225 *V*     THE COUNTERS ARE NOW AT ONE GREATER THAN WE NEED SO WE
                                    226 *V*     SUBTRACT THE NEEDED AMOUNT FOR EACH TABLE.
                                    227 *V*
                                    228 *V*
      000057 000001 1620 03         229        SBX2    1,DU
      000060 002040 4310 03         230        FLD     =1.0EX0,DU
      000061 000024 4550 00 010NN   231        FST     ANSWER

                                    233 *
                        000062      234 COMPUT NULL
                                    235 *
                                    236 *V*
                                    237 *V*
                                    238 *V*                    COMPUTE_ANSWER
                                    239 *V*
                                    240 *V*     THE ANSWER IS COMPUTED BY COMPARING THE EXPONENT TO
                                    241 *V*     THE EXPONENT BOUND CURRENTLY OBTAINED BY THE OFFSET.
                                    242 *V*     IF THE EXPONENT IS LARGER THAN THE EXPONENT BOUND THEN
                                    243 *V*     WE USE THAT CURRENT PARTIAL RESULT AND MULTIPLY IT BY
                                    244 *V*     THE CURRENT ANSWER AND REPLACING IN THE CURRENT ANSWER.
                                    245 *V*     IF THE EXPONENT IS LESS THAN THE EXPONENT BOUND THEN GO
                                    246 *V*     AND SUBTRACT THE INDEXES TO GET ONE LESS ENTRY IN THE
                                    247 *V*     EXPBND TABLE OR THE NEXT LESS.  THEN REPEAT THIS PROCESS
                                    248 *V*     AND SUBTRACT THE EXPBND EXPONENT FROM THE EXPONENT EACH
                                    249 *V*     TIME OR UNTIL THE EXPONENT IS ZERO.
                                    250 *V*
                                    251 *V*
      000062 000025 2350 00 010NN   252        LDA     EXPONT
      000063 000112 1150 12 010NN   253        CMPA    EXPBND,2
      000064 000073 6044 00 010NN   254        TMOZ    SUBX2
      000065 000024 4310 00 010NN   255        FLD     ANSWER
      000066 000010 4610 12 010NN   256        FMP     PAREXP,2
      000067 000024 4550 00 010NN   257        FST     ANSWER
      000070 000025 2350 00 010NN   258        LDA     EXPONT
      000071 000123 1750 12 010NN   259        SBA     EXPSUB,2
      000072 000025 7550 00 010NN   260        STA     EXPONT
                                    261 *
                        000073      262 SUBX2  NULL
                                    263 *
      000073 000001 1620 03         264        SBX2    1,DU
      000074 000000 1020 03         265        CMPX2   =0,DU          WHEN X0 IS LESS THAN ZERO WE ARE DONE
      000075 000062 6050 00 010NN   266        TPL     COMPUT
                                    267 *
                                    268 *
      000076 000024 4310 00 010NN   269        FLD     ANSWER

      000077 000000 1050 03         270        CMPX5   =0,DU          NEGATIVE EXPONENT?
      000100 000103 6000 00 010NN   271        TZE     EXIT
                                    272 *
                                    273 *  WE HAD A NEGATIVE EXPONENT, SO THE REAL ANSWER IS 1/X.
                                    274 *
      000101 002040 4310 03         275        FLD     =1.0EX0,DU
      000102 000024 5650 00 010NN   276        FDV     ANSWER
                                    277 *
                        000103      278 EXIT   NULL
                                    279 *
      000103 500000 4701 00         280        FSTR    0,,5
      000104 000000 0730 00 010NN   281        LREG    REG
      000105 000026 4774 00 010NN   282        LDP7    PR7
      000106 000027 4764 00 010NN   283        LDP6    PR6
      000107 000030 4754 00 010NN   284        LDP5    PR5
      000110 000031 4744 00 010NN   285        LDP4    PR4
      000111 000001 7100 11         286        TRA     1,1            NORMAL RETURN
                                    287 *
                                    288 *
                                    289 *              CONSTANTS AND TABLES
                                    290 *
                                    291 *
                        000112      292        EVEN
      000112 000000000000           293 EXPBND DEC     0,1,3,7,15,31,63,127,255
      000113 000000000001
      000114 000000000003
      000115 000000000007
      000116 000000000017
      000117 000000000037
      000120 000000000077
      000121 000000000177
      000122 000000000377
      000123 000000000000           294 EXPSUB DEC     0,2,4,8,16,32,64,128,256
      000124 000000000002
      000125 000000000004
      000126 000000000010
      000127 000000000020

      000130 000000000040
      000131 000000000100
      000132 000000000200
      000133 000000000400
                        000000      295        SECT    .X9RI.,DATA
                                    296 *
                                    297 *
                                    298 *              TEMPS, ETC...
                                    299 *
                                    300 *
                        000000      301        EIGHT
                        000000      302 REG    BSS     8
                        000010      303        EVEN
                        000010      304 PAREXP BSS     9
                        000022      305        EVEN
                        000022      306 TMPEXP BSS     2
                        000024      307 ANSWER BSS     1
                        000025      308 EXPONT BSS     1
                        000026      309 PR7    BSS     1
                        000027      310 PR6    BSS     1
                        000030      311 PR5    BSS     1
                        000031      312 PR4    BSS     1
                        000032      313 ARGS   BSS     1
      000033 000001000000           314 ARGNO  VFD     18/1,18/0
                                    315 *
                                    316        END
 GMAP6 VERSION/ASSEMBLY DATES  JNPA NO TTL/2(_00]      JNPB NO TTL/2(_00]      JNPC NO TTL/2(_00]
 THERE WERE    NO  WARNING FLAGS IN THE ABOVE ASSEMBLY

                             OCTAL    SYMBOL   * KIND *      REFERENCES BY ALTER NO. AN
    41   ALLOK    REL   .X9RI    159  146T  159
    24   ANSWER   REL   .X9RI.   307  231W  255R  257W  269R  276R  307
    33   ARGNO    REL   .X9RI.   314  314
    32   ARGS     REL   .X9RI.   313  313
    62   COMPUT   REL   .X9RI    234  234   266T
   103   EXIT     REL   .X9RI    278  116T  131T  156T  271T  278
   112   EXPBND   REL   .X9RI    293  209R  253R  293
    46   EXPINC   REL   .X9RI    179  179   212T
    25   EXPONT   REL   .X9RI.   308  172W  210R  252R  258R  260W  308
   123   EXPSUB   REL   .X9RI    294  259R  294
    17   EXZERO   REL   .X9RI    106   93T  106
  6000   .X9RI    SEC   SECT       7    7
  6001   .X9RI.   SEC   SECT     295  295
    25   NT1OR0   REL   .X9RI    133  104T  129T  133
    21   NXTEST   REL   .X9RI    118   92T  118
    10   PAREXP   REL   .X9RI.   304  175W  202R  203R  204W  256R  304
    31   PR4      REL   .X9RI.   312   86W  285R  312
    30   PR5      REL   .X9RI.   311   85W  284R  311
    27   PR6      REL   .X9RI.   310   84W  283R  310
    26   PR7      REL   .X9RI.   309   83W  282R  309
     0   REG      REL   .X9RI.   302   82W  281R  302
    73   SUBX2    REL   .X9RI    262  254T  262
    22   TMPEXP   REL   .X9RI.   306  151W  152   306
    57   X2EXIT   REL   .X9RI    219  208T  219
NO VAL   X8ER     EXT   SYMREF         78
     0   X9RI     REL   .X9RI     80   76    80
NO VAL   X9RR     EXT   SYMREF         77   154T
