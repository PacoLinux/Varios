VERSION E05

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:1    
        1        1        /*M* TOC$COLTS     TOLTS Communications On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOC$COLTS
       12       12             AUTHOR:       Curt Andes
       13       13             PURPOSE:      Interface between Slave Mode COLTS (CCLT)
       14       14                           and the CP-6 operating system
       15       15             DESCRIPTION:  This module, referred to as the COLTS Interface
       16       16                           Module, contains the MME service routines for the
       17       17                           COLTS Subexec and the secondary event handler for
       18       18                           CP-6 TOLTS module.
       19       19             REFERENCE:    CP-6 Release D0C0
       20       20                           TDM-PMD-079 PRU9118 Line Printer Test Page
       21       21                           TDM-SMD-019 COLTS I/O Handlers for the L6 FEP
       22       22             LAST UPDATE:  11/20/85
       23       23        */
       24       24        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:2    
       25       25        /*F* NAME:         TOC$COLTS
       26       26             DESCRIPTION:  Procedure Nesting Hierarchy
       27       27
       28       28                TOC$COLTS: procedure (MME, MREG, INSTR$, RETURN_DELTA)
       29       29
       30       30                   TOC$MME_COINIT: procedure (MME word one)
       31       31                      INIT_FOR_COLTS_ONLY: procedure
       32       32                   TOC$MME_FEPTYP: procedure
       33       33                   TOC$MME_GEROUT: procedure
       34       34                      GEROUT_ICM: procedure
       35       35                         CHECK_CMD_AND_TEST_NUM: procedure
       36       36                         SET_POINTERS: procedure
       37       37                         SETUP_NEW_ENTRY: procedure
       38       38                         BUILD_CONFIG_ICM: procedure
       39       39                         SETUP_TEST_CONNECT: procedure
       40       40                            FIND_HANDLER: procedure
       41       41                            ASSIGN_DCB: procedure
       42       42                               NEW_DCB: procedure
       43       43                            OPEN_DCB: procedure
       44       44                         COPY_ICM: procedure
       45       45                      GEROUT_REMOTE_INQUIRY: procedure
       46       46                      GEROUT_TERMINAL_TYPE_REQUEST: procedure
       47       47                      GEROUT_COLTS_WAKEUP: procedure
       48       48                      GEROUT_DISCONNECT: procedure
       49       49                         DISCONNECT_EXEC_LINE: procedure
       50       50                            INITIATE_HNDLR_WRAPUP: procedure
       51       51                         DISCONNECT_TEST_LINE: procedure
       52       52                      GEROUT_STATUS_REQUEST: procedure
       53       53                      RETURN_GEROUT_STATUS: procedure
       54       54                      GEROUT_WRITE: procedure
       55       55                      GEROUT_READ: procedure
       56       56                      CHECK_READ: procedure
       57       57                         TEST_CONNECT: procedure
       58       58                         TEST_DISCONNECT: procedure
       59       59                      CLOSE_DCB: procedure
       60       60                      RELEASE_DCB: procedure
       61       61                      ANYBODY_USING_THIS_DCB: procedure
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:3    
       62       62                      BUSY_THIS_TEST: procedure
       63       63                      UNBUSY_THIS_TEST: procedure
       64       64                      CLOSE_DCB_IF_UNUSED: procedure
       65       65                      CALCULATE_CHECKSUM: procedure
       66       66                   TOC$MME_LOGFEP: procedure (MME word one, MME word two)
       67       67                   TOC$GEROUT_READ_COMPLETION: procedure
       68       68                   CONNECT_TO_SLAVE: procedure
       69       69        */
       70       70        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:4    
       71       71        TOC$COLTS: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);
       72       72
       73       73        /* Include Files */
       74       74
       75       75           %INCLUDE B$JIT;
       76      678           %INCLUDE B_ERRORS_C ;
       77     1805           %INCLUDE B_SEGIDS_C;
       78     2344           %INCLUDE CP_6;
       79     7903           %INCLUDE CP_6_SUBS;
       80     8443           %INCLUDE F$DCB;
       81     8492           %INCLUDE TOT_TOLTS_M;
       82     9610           %INCLUDE TOT_RQSTS_E ;
       83     9652           %INCLUDE TO_PERR_C ;
       84    10237
       85    10238        /* Parameters */
       86    10239
       87    10240           %MME ;
       88    10261           %MREG ;
       89    10283           %MME_INSTR$ ;
       90    10286           %RETURN_DELTA ;
       91    10289           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:5    
       92    10290        /* Variables */
       93    10291
       94    10292           %B$ALT;
       95    10300           %B$TCB;
       96    10303           %VLP_ERRCODE (FPTN = TOC_ERROR_CODE,
       97    10304                         FCG  = 'TO',
       98    10305                         MID  = 'C',
       99    10306                         SEV  = 0) ;
      100    10351           %IS$ (STCLASS = CONSTANT);
      101    10365        /*  */
      102    10366    1      DCL 1 FEP (0:7) STATIC ALIGNED,
      103    10367    1            2 FEP_STATUS UBIN (18) HALIGNED,
      104    10368    1            2 STATUS REDEF FEP_STATUS,
      105    10369    1              3 ACTIVE BIT (1) UNAL,
      106    10370    1              3 DISCONNECTED BIT (1) UNAL,
      107    10371    1              3 TEST_CONNECTED BIT (1) UNAL,
      108    10372    1              3 CONNECT_QUEUED BIT (1) UNAL,
      109    10373    1              3 EXEC_CONNECTED BIT (1) UNAL,
      110    10374    1              3 AWAITING_WAKEUP BIT (1) UNAL,
      111    10375    1              3 ECONN_WAITING BIT (1) UNAL,
      112    10376    1              3 TCONN_WAITING BIT (1) UNAL,
      113    10377    1              3 TDISCONNECT_ISSUED BIT (1) UNAL,
      114    10378    1              3 BUSY BIT (1) UNAL,
      115    10379    1              3 DCB_OPEN BIT (1) UNAL,
      116    10380    1              3 DVCID_FOUND BIT (1) UNAL,
      117    10381    1              3 * BIT (1) UNAL,
      118    10382    1              3 * BIT (1) UNAL,
      119    10383    1              3 * BIT (1) UNAL,
      120    10384    1              3 * BIT (1) UNAL,
      121    10385    1              3 * BIT (1) UNAL,
      122    10386    1              3 * BIT (1) UNAL,
      123    10387    1            2 DCB_NUM UBIN (18) HALIGNED,
      124    10388    1            2 LOGICAL_NUM UBIN (18) HALIGNED,
      125    10389    1            2 NUM UBIN (18) HALIGNED, /* NODE # */
      126    10390    1            2 DEVICE_TYPE UBIN (18) HALIGNED,
      127    10391    1            2 BUS_ADDR UBIN (18) HALIGNED,
      128    10392    1            2 LINE_ID UBIN (12) CALIGNED,
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:6    
      129    10393    1            2 LINE REDEF LINE_ID,
      130    10394    1              3 T UBIN (6) UNAL, /* BCD 'T' */
      131    10395    1              3 NUM UBIN (6) UNAL,
      132    10396    1              3 * UBIN (6) UNAL,
      133    10397    1            2 EXEC_LINE_ID UBIN (12) CALIGNED,
      134    10398    1            2 EXEC_LINE REDEF EXEC_LINE_ID,
      135    10399    1              3 E UBIN (6) UNAL, /* BCD 'E' */
      136    10400    1              3 NUM UBIN (6) UNAL,
      137    10401    1              3 * UBIN (6) UNAL,
      138    10402    1            2 CONFIG_ID UBIN HALF HALIGNED,
      139    10403    1            2 CONFIG_ID_EXT UBIN (9) CALIGNED,
      140    10404    1            2 TEST_TYPE UBIN (18) HALIGNED, /* IDENTIFIES FEP HANDLER */
      141    10405    1            2 C_CALL$ PTR ALIGNED,
      142    10406    1            2 STATUS$ PTR ALIGNED,
      143    10407    1            2 ICM$ PTR ALIGNED,
      144    10408    1            2 RECEIVE_ICM$ PTR ALIGNED,
      145    10409    1            2 EVENT_ID UBIN HALF HALIGNED,
      146    10410    1            2 ICM_BYTE_CNT UBIN WORD;
      147    10411    1      DCL ICM_BUFFER (0:34) UBIN WORD BASED ALIGNED;
      148    10412    1      DCL 1 ICM BASED,
      149    10413    1            2 MSG_ID UBIN (9) CALIGNED,
      150    10414    1            2 MSG_SUBC UBIN (9) CALIGNED,
      151    10415    1            2 * UBIN (18) CALIGNED,
      152    10416    1            2 CKSM UBIN (18) HALIGNED,
      153    10417    1            2 L6NDX UBIN (9) CALIGNED,
      154    10418    1            2 WDCNT UBIN (9) CALIGNED,
      155    10419    1            2 CMD UBIN (9) CALIGNED,
      156    10420    1            2 REPLY UBIN (9) CALIGNED,
      157    10421    1            2 L6MBA UBIN (18) HALIGNED,
      158    10422    1            2 CONFIG_ID UBIN (18) HALIGNED,
      159    10423    1            2 ID REDEF CONFIG_ID,
      160    10424    1              3 UPPER UBIN (9) CALIGNED,
      161    10425    1              3 LOWER UBIN (9) CALIGNED,
      162    10426    1            2 CONFIG_ID_EXT UBIN (18) HALIGNED,
      163    10427    1            2 EXT_ID REDEF CONFIG_ID_EXT,
      164    10428    1              3 ID UBIN (9) UNAL,
      165    10429    1              3 * UBIN (9) UNAL,
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:7    
      166    10430    1            2 TEST_TYP UBIN (9) CALIGNED,
      167    10431    1            2 FLAGS UBIN (9) CALIGNED,
      168    10432    1            2 * UBIN (12) UNAL,
      169    10433    1            2 TYC UBIN (6) UNAL,
      170    10434    1            2 TEXT (0:122) UBIN WORD ALIGNED;
      171    10435    1      DCL 1 SLAVE_CONNECT STATIC ALIGNED,
      172    10436    1            2 PTR$ PTR ALIGNED,
      173    10437    1            2 STATUS HALIGNED,
      174    10438    1              3 * UBIN (17) UNAL,
      175    10439    1              3 PENDING BIT (1) UNAL;
      176    10440
      177    10441    1      DCL COLTS_DCBS (0:%LAST_FEP) STATIC SBIN WORD ALIGNED ;
      178    10442    1      DCL PHY_FEP_NUM (0:%LAST_FEP) STATIC SBIN (18) HALIGNED ;
      179    10443
      180    10444           %VLR_CONFIG (FPTN = CONFIG);
      181    10459           %FPT_CONFIG (FPTN = GET_CONFIG,
      182    10460                        RESULTS = CONFIG);
      183    10475           %FPT_OPEN (FPTN = OPEN_HNDLR_PATH,
      184    10476                       ORG = FPRG,
      185    10477                       ASN = DEVICE,
      186    10478                       FPRG = START_HNDLR,
      187    10479                       FUN = CREATE);
      188    10588           %VLP_FPRG (FPTN = START_HNDLR,ACCT = ':SYS');
      189    10609           %FPT_CLOSE (FPTN = CLOSE_HNDLR_PATH,
      190    10610                       DISP = RELEASE);
      191    10652           %FPT_WRITE (FPTN = WRITE_TO_FEP,
      192    10653                       BP = YES);
      193    10684           %FPT_READ (FPTN = READ_FROM_FEP);
      194    10723           %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:8    
      195    10724        /* External Variables */
      196    10725
      197    10726    1      DCL B$JIT$                PTR SYMREF ;
      198    10727    1      DCL B$TCB$                PTR SYMREF ;
      199    10728           %TOT$ECP (STCLASS = SYMREF);
      200    10777           %TOT$TOLTS (STCLASS = SYMREF);
      201    10798
      202    10799        /* External Entry Points */
      203    10800
      204    10801    1      DCL TOK$COURTESY_CALL ENTRY (1) ;
      205    10802    1      DCL TOX$ERROR         ENTRY (1) ;
      206    10803    1      DCL TOX$WARN          ENTRY (1);
      207    10804    1      DCL TOX$SCREECH       ENTRY (1) ;
      208    10805           %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:9    
      209    10806        /* Main Code */
      210    10807
      211    10808    1      IF MME.INST.NO > 0
      212    10809    1      THEN CALL TOC$MME_GEROUT (MME.WD_1,
      213    10810    1                 MME.WD_2,
      214    10811    1                 MME.WD_3,
      215    10812    1                 MME.WD_4,
      216    10813    1                 MME.WD_5,
      217    10814    1                 MME.WD_6,
      218    10815    1                 MREG.A);
      219    10816    2      ELSE DO CASE (-MME.INST.NO);
      220    10817    2              CASE (%COINIT) ;
      221    10818    2                 CALL TOC$MME_COINIT (MME.WD_1);
      222    10819    2              CASE (%FEPTYP) ;
      223    10820    2                 CALL TOC$MME_FEPTYP (MREG.X2);
      224    10821    2              CASE (%LOGFEP) ;
      225    10822    2                 CALL TOC$MME_LOGFEP (MME.WD_1, MME.WD_2);
      226    10823    2           END /* ELSE CASE */ ;
      227    10824    1      RETURN ;
      228    10825
      229    10826        /* END TOC$COLTS */
      230    10827        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:10   
      231    10828        /*I*  NAME:        TOC$MME_COINIT
      232    10829              AUTHOR:      Curt Andes
      233    10830              PURPOSE:     MME_COINIT
      234    10831              INTERFACE:   INIT_FOR_COLTS_ONLY
      235    10832                           TOX$ERROR
      236    10833              PARAMETERS:  LIST_COUNT
      237    10834              DATA:        MME_INSTR$
      238    10835                           TOT$ECP.SUBEXEC.CURRENT
      239    10836                           PROCEDURE_ID.TTL
      240    10837                           B$JIT.TDP
      241    10838                           RETURN_DELTA
      242    10839              DESCRIPTION: This procedure does the basic initialization for Common Colts.
      243    10840                           (CCLT or Slave Mode Colts, SMC) This initialization includes
      244    10841                           setting up the FEP table, which controls what's happening
      245    10842                           in COLTS, and the servicing of function designators
      246    10843                           that are part of the MME list.
      247    10844
      248    10845                           * MME calling sequence
      249    10846                           MME        COINIT
      250    10847                           ZERO       # of designators,0
      251    10848                           ZERO       address #1,code #1     *designator #1
      252    10849                             .           .         .
      253    10850                             .           .         .
      254    10851                           ZERO       address #N,code #N     *designator #N
      255    10852                           <return>
      256    10853
      257    10854                           Valid designator function codes for CP-6 are:
      258    10855                             1 - Store .CRFIG image in specifies address
      259    10856                             2 - Store last subexec location in specified address
      260    10857                             5 - Save specified address, it points to CCLT wrapup rtn.
      261    10858                             7 - Store COLTS TTL date in specified address.
      262    10859                             10- Store CP-6 Operating System type code in given addr.
      263    10860                             11- Store .CRD30 image in specified address.
      264    10861                           Any other code will cause COLTS to abort.
      265    10862        */
      266    10863        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:11   
      267    10864    1   TOC$MME_COINIT: PROC (LIST_COUNT);
      268    10865
      269    10866        /* Variables */
      270    10867    2      DCL LIST_COUNT UBIN WORD ALIGNED;
      271    10868    2      DCL 1 LIST REDEF LIST_COUNT,
      272    10869    2            2 LENGTH UBIN HALF UNAL,
      273    10870    2            2 * UBIN HALF UNAL;
      274    10871    2      DCL DESIGNATOR_OFFSET UBIN HALF HALIGNED;
      275    10872    2      DCL TARGET UBIN WORD BASED ALIGNED;
      276    10873    2      DCL TARGET_HALF UBIN HALF BASED ALIGNED;
      277    10874
      278    10875    2      DCL TARGET_BIT BIT (36) BASED ALIGNED;
      279    10876
      280    10877    2      DCL DESP$ PTR ALIGNED;
      281    10878    2      DCL WPNTR$ PTR ALIGNED;
      282    10879
      283    10880    2      DCL 1 DESIGNATOR BASED ALIGNED,
      284    10881    2            2 AD UBIN HALF UNAL,
      285    10882    2            2 CODE UBIN HALF UNAL;
      286    10883    2      DCL 1 CRD30_IMAGE BASED ALIGNED,
      287    10884    2            2 FLG UBIN HALF UNAL,
      288    10885    2            2 FEPCNT UBIN (12) UNAL,
      289    10886    2            2 * UBIN (6) UNAL;
      290    10887           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:12   
      291    10888        /* Code */
      292    10889
      293    10890    2      CALL INIT_FOR_COLTS_ONLY;
      294    10891    3      DO DESIGNATOR_OFFSET = 1 TO LIST.LENGTH;
      295    10892    3         DESP$ = PINCRW (MME_INSTR$,DESIGNATOR_OFFSET+1);
      296    10893    3         WPNTR$ = PINCRW (IS$,DESP$->DESIGNATOR.AD);
      297    10894    4         DO CASE (DESP$->DESIGNATOR.CODE);
      298    10895    4            CASE (%PASS_CRFIG);
      299    10896    4               WPNTR$->TARGET = 0;
      300    10897    4            CASE (%PASS_HI_ADDRESS);
      301    10898    4               WPNTR$->TARGET_HALF = (B$JIT.TDP-64)*1024;
      302    10899    4            CASE (%READ_WRAPUP_ADDRESS);
      303    10900    4               TOT$ECP.SUBEXEC.WRAPUP$ = WPNTR$;
      304    10901    4            CASE (%PASS_TTL_DATE);
      305    10902    4               WPNTR$->TARGET_BIT = TOT$TOLTS.LINK_DATE.BCD ;
      306    10903    4            CASE (%PASS_OS_CODE);
      307    10904    4               WPNTR$->TARGET = 1;
      308    10905    4            CASE (%PASS_CRD30);
      309    10906    4               IF DESP$->DESIGNATOR.AD ~= 0
      310    10907    5               THEN DO;
      311    10908    5                       WPNTR$->CRD30_IMAGE.FEPCNT = 8;
      312    10909    5                       WPNTR$->CRD30_IMAGE.FLG = 1;
      313    10910    5                    END;
      314    10911    4            CASE (ELSE);
      315    10912    4               TOC_ERROR_CODE.ERR# = %E$BADCOINIT;
      316    10913    4               CALL TOX$ERROR (TOC_ERROR_CODE);
      317    10914    4         END;
      318    10915    3      END /* ITERATIVE DO */;
      319    10916    2      RETURN_DELTA = LIST.LENGTH + 2;
      320    10917    2      RETURN /* END TOC$MME_COINIT */;
      321    10918
      322    10919        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:13   
      323    10920        /*I*  NAME:        INIT_FOR_COLTS_ONLY
      324    10921              AUTHOR:      Curt Andes
      325    10922              PURPOSE:     Initilize the COLTS FEP test control table.
      326    10923              INTERFACE:   None called.
      327    10924              PARAMETERS:  none
      328    10925              DATA:        SLAVE_CONNECT
      329    10926                           FEP
      330    10927              DESCRIPTION: This procedure initializes SLAVE_CONNECT and FEP to '0'.
      331    10928                           It then puts into the FEP table all of the exec line IDs
      332    10929                           (E0-E7, in BCD), the test line IDs (T0-T7, in BCD).
      333    10930        */
      334    10931    2   INIT_FOR_COLTS_ONLY: PROC;
      335    10932
      336    10933    3      DCL I UBIN WORD ALIGNED;
      337    10934
      338    10935        /* Code */
      339    10936
      340    10937    3      IF TOT$ECP.SUBEXEC.CURRENT = %COLTS
      341    10938    4      THEN DO;
      342    10939    4              SLAVE_CONNECT = '0'B;
      343    10940    4              FEP = '0'B;
      344    10941    5              DO I = 0 TO %LAST_FEP ;
      345    10942    5                 FEP.LINE.T(I) = 51; /* =48 OCTAL, = 'T' IN BCD */
      346    10943    5                 FEP.LINE.NUM(I) = I;
      347    10944    5                 FEP.EXEC_LINE.E(I) = 21; /* =25 OCTAL, = 'E' IN BCD */
      348    10945    5                 FEP.EXEC_LINE.NUM(I) = I;
      349    10946    5                 COLTS_DCBS (I) = %UNDEFINED ;
      350    10947    5                 PHY_FEP_NUM (I) = %UNDEFINED ;
      351    10948    5              END;
      352    10949    4           END;
      353    10950    3      ELSE;
      354    10951
      355    10952    3      RETURN;
      356    10953        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:14   
      357    10954    3   END INIT_FOR_COLTS_ONLY;
      358    10955    2   END TOC$MME_COINIT ;
      359    10956        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:15   
      360    10957        /*I*  NAME:        TOC$MME_FEPTYP
      361    10958              AUTHOR:      Curt Andes
      362    10959              PURPOSE:     FEPTYP
      363    10960              INTERFACE:   None called.
      364    10961              PARAMETERS:  X2 - input
      365    10962              DATA:        RETURN_DELTA
      366    10963                           FEP.LOGICAL_NUM
      367    10964              DESCRIPTION: This procedure verifies that the logical fep# passed as
      368    10965                           MREG.X2 is within range, and that a physical fep# has been
      369    10966                           assigned this logical number.  If PHY_FEP_NUM (log#) is
      370    10967                           undefined, then X2 will be set to undefined.  Otherwise,
      371    10968                           the type code for an L6 FEP is returned in X2.
      372    10969                           * MME calling sequence
      373    10970                           MME        FEPTYP
      374    10971                           <return>
      375    10972
      376    10973                           Valid returned data is:
      377    10974                             1 = 18X
      378    10975                             2 = 355
      379    10976                             4 = CP-6 L6
      380    10977                            -1 = no such logical FEP
      381    10978                           This procedure always returns 4 if the logical FEP exists.
      382    10979        */
      383    10980        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:16   
      384    10981    1   TOC$MME_FEPTYP: PROC (X2);
      385    10982
      386    10983        /* Variables */
      387    10984
      388    10985    2      DCL X2 SBIN HALF HALIGNED;
      389    10986
      390    10987        /* Code */
      391    10988
      392    10989    2      RETURN_DELTA = 1;
      393    10990    2      IF (X2 <= %LAST_FEP) & (PHY_FEP_NUM (X2) ~= %UNDEFINED)
      394    10991    2      THEN X2 = 4 ;
      395    10992    2      ELSE X2 = %UNDEFINED ;
      396    10993    2      RETURN ;
      397    10994
      398    10995    2   END TOC$MME_FEPTYP ;
      399    10996        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:17   
      400    10997        /*I*  NAME:        TOC$MME_GEROUT
      401    10998              AUTHOR:      Curt Andes
      402    10999              PURPOSE:     GEROUT
      403    11000              INTERFACE:   GEROUT_ICM
      404    11001                           GEROUT_REMOTE_INQUIRY
      405    11002                           GEROUT_TERMINAL_TYPE_REQUEST
      406    11003                           GEROUT_COLTS_WAKEUP
      407    11004                           GEROUT_DISCONNECT
      408    11005                           GEROUT_STATUS_REQUEST
      409    11006                           TOX$ERROR
      410    11007              PARAMETERS:  MME WORD 1 (GEROUT TYPE WORD)
      411    11008                           MME.WD_2
      412    11009                           MME.WD_3
      413    11010                           MME.WD_4
      414    11011                           MME.WD_5
      415    11012                           MME.WD_6
      416    11013                           MREG.A
      417    11014              DATA:        MME_INSTR$
      418    11015                           TOC_ERROR_CODE
      419    11016              DESCRIPTION: This procedure handles the various MME GEROUT types.
      420    11017                           This procedure also plays around with the MME words that
      421    11018                           follow the actual MME. For that reason, the last thing this
      422    11019                           procedure does before it exits, is alter the contents of the
      423    11020                           structure that is used to restore the MME words, to make
      424    11021                           them reflect any changes we may have made.
      425    11022
      426    11023                           * MME calling sequence
      427    11024                           MME        GEROUT
      428    11025                           VFD        18/record pointer,6/x,12/line id
      429    11026                           ZERO       status store addr,courtesy call addr
      430    11027                           <return>
      431    11028
      432    11029                           Where:
      433    11030                             record pointer - is the address of the ICM associated with
      434    11031                                   with this GEROUT (if any)
      435    11032                             x - is the GEROUT type. Valid GEROUT types are:
      436    11033                                   4 - Write/read an ICM
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:18   
      437    11034                                   5 - Remote inquiry
      438    11035                                   6 - Terminal type request
      439    11036                                   7 - COLTS Wakeup
      440    11037                                  15 - Disconnect test or exec line
      441    11038                                  16 - Status request
      442    11039                             line id - Is the exec or test line id for this GEROUT
      443    11040
      444    11041        */
      445    11042
      446    11043    1   TOC$MME_GEROUT: PROC (GEROUT_TYPE_WORD,
      447    11044    1              MME_WD_2,
      448    11045    1              MME_WD_3,
      449    11046    1              MME_WD_4,
      450    11047    1              MME_WD_5,
      451    11048    1              MME_WD_6,
      452    11049    1              MREG_A);
      453    11050
      454    11051        /* Variables */
      455    11052    2      DCL GEROUT_TYPE_WORD UBIN WORD ALIGNED;
      456    11053    2      DCL 1 GEROUT_TYPE REDEF GEROUT_TYPE_WORD,
      457    11054    2            2 * UBIN HALF UNAL,
      458    11055    2            2 CODE UBIN (6) UNAL,
      459    11056    2            2 * UBIN (12) UNAL;
      460    11057    2      DCL MME_WD_2 UBIN WORD ALIGNED;
      461    11058    2      DCL MME_WD_3 UBIN WORD ALIGNED;
      462    11059    2      DCL MME_WD_4 UBIN WORD ALIGNED;
      463    11060    2      DCL MME_WD_5 UBIN WORD ALIGNED;
      464    11061    2      DCL MME_WD_6 UBIN WORD ALIGNED;
      465    11062    2      DCL MREG_A UBIN WORD ALIGNED;
      466    11063    2      DCL GEROUT_WORD UBIN WORD BASED ALIGNED;
      467    11064    2      DCL RESTORE$ PTR ALIGNED;
      468    11065        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:19   
      469    11066        /* Code */
      470    11067
      471    11068    3      DO CASE (GEROUT_TYPE.CODE);
      472    11069    3         CASE(4); /* GEROUT ICM */
      473    11070    3            CALL GEROUT_ICM (GEROUT_TYPE_WORD,MME_WD_2);
      474    11071    3         CASE(5); /* GEROUT REMOTE INQUIRY */
      475    11072    3            CALL GEROUT_REMOTE_INQUIRY;
      476    11073    3         CASE(6); /* GEROUT TERMINAL TYPE REQUEST */
      477    11074    3            CALL GEROUT_TERMINAL_TYPE_REQUEST (GEROUT_TYPE_WORD);
      478    11075    3         CASE(7); /* COLTS WAKEUP */
      479    11076    3            CALL GEROUT_COLTS_WAKEUP (GEROUT_TYPE_WORD);
      480    11077    3         CASE(15); /* DISCONNECT */
      481    11078    3            CALL GEROUT_DISCONNECT (GEROUT_TYPE_WORD,MME_WD_2,MREG_A);
      482    11079    3         CASE(16); /* STATUS REQUEST */
      483    11080    3            CALL GEROUT_STATUS_REQUEST (GEROUT_TYPE_WORD,MME_WD_2);
      484    11081    3         CASE(ELSE);
      485    11082    3            TOC_ERROR_CODE.ERR# = %E$BADGROUTTYP;
      486    11083    3            CALL TOX$ERROR (TOC_ERROR_CODE);
      487    11084    3      END; /* CASE */
      488    11085    2      RESTORE$ = PINCRW (MME_INSTR$,3);
      489    11086    2      MME_WD_3 = RESTORE$->GEROUT_WORD;
      490    11087    2      RESTORE$ = PINCRW (RESTORE$,1);
      491    11088    2      MME_WD_4 = RESTORE$->GEROUT_WORD;
      492    11089    2      RESTORE$ = PINCRW (RESTORE$,1);
      493    11090    2      MME_WD_5 = RESTORE$->GEROUT_WORD;
      494    11091    2      RESTORE$ = PINCRW (RESTORE$,1);
      495    11092    2      MME_WD_6 = RESTORE$->GEROUT_WORD;
      496    11093    2      RETURN ;
      497    11094
      498    11095    2   END TOC$MME_GEROUT;
      499    11096        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:20   
      500    11097        /*I* NAME:         GEROUT_ICM
      501    11098             AUTHOR:       Curt Andes
      502    11099             PURPOSE:      Write then read ICMs to the FEP
      503    11100             INTERFACE:    TOX$ERROR
      504    11101                           CHECK_CMD_AND_TEST_NUM
      505    11102                           SET_POINTERS
      506    11103                           BUILD_CONFIG_ICM
      507    11104                           SETUP_TEST_CONNECT
      508    11105                           GEROUT_WRITE
      509    11106                           GEROUT_READ
      510    11107                           RETURN_GEROUT_STATUS
      511    11108             PARAMETERS:   MME word 1 (ICM ptr, GEROUT type, line id)
      512    11109                           MME word 2 (status & courtesy call ptrs)
      513    11110             DATA:         TOC_ERROR_CODE
      514    11111                           RETURN_DELTA
      515    11112                           FEP
      516    11113             DESCRIPTION:  This procedure sets up the pointers associated
      517    11114                           with  doing  ICMs  then  makes the appropriate
      518    11115                           calls to  have the I/O performed.  The line id
      519    11116                           is  validated before the  I/O is attempted.
      520    11117        */
      521    11118        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:21   
      522    11119    1   GEROUT_ICM: PROC (DATA_WORD,POINTER_WORD);
      523    11120
      524    11121        /* Variables */
      525    11122    2      DCL DATA_WORD UBIN WORD ALIGNED;
      526    11123    2      DCL 1 DATAWD REDEF DATA_WORD,
      527    11124    2            2 RECP UBIN HALF UNAL,
      528    11125    2            2 TP UBIN (6) UNAL,
      529    11126    2            2 LNID UBIN (12) UNAL;
      530    11127    2      DCL POINTER_WORD UBIN WORD ALIGNED;
      531    11128    2      DCL 1 PTRWD REDEF POINTER_WORD,
      532    11129    2            2 ST UBIN HALF UNAL,
      533    11130    2            2 CC UBIN HALF UNAL;
      534    11131    2      DCL I UBIN WORD ALIGNED;
      535    11132    2      DCL 1 HEADER_REC BASED ALIGNED,
      536    11133    2            2 WORD_COUNT UBIN HALF UNAL,
      537    11134    2            2 BUF_AD UBIN HALF UNAL;
      538    11135    2      DCL REC$ PTR ALIGNED;
      539    11136    2      DCL 1 RECORD BASED ALIGNED,
      540    11137    2            2 WORD_COUNT UBIN HALF UNAL,
      541    11138    2            2 RCVP UBIN HALF UNAL;
      542    11139    2      DCL ICM$ PTR ALIGNED ;
      543    11140    2      DCL CMD UBIN (9) CALIGNED ;
      544    11141
      545    11142        /* Code */
      546    11143
      547    11144    2      RETURN_DELTA = 3;
      548    11145    2      I = 0;
      549    11146    3      DO WHILE ((FEP.LINE_ID(I) ~= DATAWD.LNID) &
      550    11147    3              (FEP.EXEC_LINE_ID(I) ~= DATAWD.LNID) &
      551    11148    3              (I <= %LAST_FEP));
      552    11149    3         I = I+1;
      553    11150    3      END;
      554    11151        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:22   
      555    11152    3      DO CASE (I);
      556    11153    3         CASE (8); /* INVALID LINE ID RECEIVED */
      557    11154    3            TOC_ERROR_CODE.ERR# = %E$BADLNID;
      558    11155    3            CALL TOX$ERROR (TOC_ERROR_CODE);
      559    11156    3         CASE (ELSE);
      560    11157    3            REC$ = PINCRW (IS$,DATAWD.RECP);
      561    11158    3            IF REC$->RECORD.RCVP = 0
      562    11159    4            THEN DO;
      563    11160    4                    TOC_ERROR_CODE.ERR# = %E$BADRCVP;
      564    11161    4                    CALL TOX$ERROR (TOC_ERROR_CODE);
      565    11162    4                 END;
      566    11163    4            ELSE DO;
      567    11164    4                    ICM$ = PINCRW (IS$, DATAWD.RECP + 1) ;
      568    11165    4                    CALL CHECK_CMD_AND_TEST_NUM (ICM$, CMD, I) ;
      569    11166    4                    CALL SET_POINTERS (I) ;
      570    11167    4                    FEP.ICM_BYTE_CNT (I) = (REC$ -> RECORD.WORD_COUNT) * 4;
      571    11168    5                    DO CASE (CMD) ;
      572    11169    5                       CASE (1, 2) ;
      573    11170    5                          CALL BUILD_CONFIG_ICM (I) ;
      574    11171    5                          RETURN ;
      575    11172    5                       CASE (3) ;
      576    11173    5                          CALL SETUP_TEST_CONNECT (I) ;
      577    11174    5                       CASE (ELSE) ;
      578    11175    5                    END /* DO CASE */ ;
      579    11176    4                    CALL GEROUT_WRITE (I) WHENRETURN
      580    11177    5                         DO ;
      581    11178    5                            CALL GEROUT_READ (I) ;
      582    11179    5                         END /* WHENRETURN DO */ ;
      583    11180    4                 END /* ELSE DO */ ;
      584    11181    3      END /* DO CASE */ ;
      585    11182    2      RETURN ;
      586    11183        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:23   
      587    11184        /*I* NAME:         CHECK_CMD_AND_TEST_NUM
      588    11185             AUTHOR:       Kathy Larkin
      589    11186             PURPOSE:      Determines command and test number.
      590    11187             INTERFACE:    SETUP_NEW_ENTRY
      591    11188                           TOX$SCREECH
      592    11189             PARAMETERS:   ICM$ - input
      593    11190                           CMD - output
      594    11191                           TEST_NUM - input/output
      595    11192             DATA:         ICM.CMD
      596    11193                           DATAWD.LNID
      597    11194                           FEP.LINE_ID (TEST_NUM)
      598    11195             DESCRIPTION:  This procedure determines the command request,
      599    11196                           and  the test number.   If an exec_line_id was
      600    11197                           passed in the gerout, the test number may need
      601    11198                           adjusting, as  this id will be  passed for all
      602    11199                           tests  to  be  run  on  a given FEP.  A unique
      603    11200                           line_id  will  be  given  to  each test during
      604    11201                           processing of the start_test command.
      605    11202        */
      606    11203
      607    11204    2   CHECK_CMD_AND_TEST_NUM: PROC (ICM$, CMD, TEST_NUM) ;
      608    11205
      609    11206    3      DCL ICM$        PTR ALIGNED ;
      610    11207    3      DCL CMD         UBIN (9) CALIGNED ;
      611    11208    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      612    11209    3      DCL J           SBIN WORD ALIGNED ;
      613    11210        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:24   
      614    11211        /* Code */
      615    11212
      616    11213    3      CMD = ICM$ -> ICM.CMD ;
      617    11214    3      IF DATAWD.LNID = FEP.LINE_ID (TEST_NUM)
      618    11215    3      THEN RETURN ;
      619    11216    4      ELSE DO ;
      620    11217    5              DO CASE (CMD) ;
      621    11218    5                 CASE (1, 2) ;
      622    11219    5                    IF (FEP.STATUS.DVCID_FOUND (TEST_NUM)) | (~FEP.STATUS.ACTIVE (
             11219                             TEST_NUM))
      623    11220    5                    THEN CALL SETUP_NEW_ENTRY (TEST_NUM) ALTRET (ERROR) ;
      624    11221    5                    ELSE /* entry has been set up in Wake-up */ ;
      625    11222    5                    RETURN ;
      626    11223    5                 CASE (3) ;
      627    11224    5                    J = -1 ;
      628    11225    6                    DO UNTIL (J > %LAST_FEP) |
      629    11226    6                            ((FEP.NUM (TEST_NUM) = FEP.NUM (J)) &
      630    11227    6                            (FEP.STATUS.ACTIVE (J)) &
      631    11228    6                            (~FEP.STATUS.DCB_OPEN (J))) ;
      632    11229    6                       J = J + 1 ;
      633    11230    6                    END /* DO UNTIL */ ;
      634    11231    5                    TEST_NUM = J ;
      635    11232    5                    IF TEST_NUM <= %LAST_FEP
      636    11233    5                    THEN RETURN ;
      637    11234    5                    ELSE /* fall through to error */ ;
      638    11235    5                 CASE (ELSE) ;
      639    11236    5                    RETURN ;
      640    11237    5              END /* DO CASE */ ;
      641    11238    4           END /* ELSE DO */ ;
      642    11239
      643    11240    3   ERROR:
      644    11241    3      TOC_ERROR_CODE.ERR# = %E$LTABOVFL ;
      645    11242    3      CALL TOX$SCREECH (TOC_ERROR_CODE) ;
      646    11243    3   END CHECK_CMD_AND_TEST_NUM ;
      647    11244        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:25   
      648    11245        /*I* NAME:         SET_POINTERS
      649    11246             AUTHOR:       Kathy Larkin
      650    11247             PURPOSE:      Set pointers to sub-exec in FEP table.
      651    11248             INTERFACE:    None called.
      652    11249             PARAMETERS:   TEST_NUM - input
      653    11250             DATA:         REC$ - input
      654    11251                           ICM$ - input
      655    11252                           PTRWD.CC - input
      656    11253                           PTRWD.ST - input
      657    11254                           FEP.RECEIVE_ICM$ (TEST_NUM) - output
      658    11255                           FEP.ICM$ (TEST_NUM) - output
      659    11256                           FEP.C_CALL$ (TEST_NUM) - output
      660    11257                           FEP.STATUS$ (TEST_NUM) - output
      661    11258             DESCRIPTION:  This procedure sets  the FEP table pointers to
      662    11259                           the  receive  icm,  icm,  courtesy call return
      663    11260                           location, and the  location for status return,
      664    11261                           respectively.
      665    11262        */
      666    11263
      667    11264    2   SET_POINTERS: PROC (TEST_NUM) ;
      668    11265
      669    11266    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      670    11267
      671    11268        /* Code */
      672    11269
      673    11270    3      FEP.RECEIVE_ICM$ (TEST_NUM) = PINCRW (IS$, REC$ -> HEADER_REC.BUF_AD) ;
      674    11271    3      FEP.ICM$ (TEST_NUM) = ICM$ ;
      675    11272    3      FEP.C_CALL$ (TEST_NUM) = PINCRW (IS$, PTRWD.CC) ;
      676    11273    3      FEP.STATUS$ (TEST_NUM) = PINCRW (IS$, PTRWD.ST) ;
      677    11274
      678    11275    3   END SET_POINTERS ;
      679    11276        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:26   
      680    11277        /*I* NAME:         SETUP_NEW_ENTRY
      681    11278             AUTHOR:       Kathy Larkin
      682    11279             PURPOSE:      Set up FEP table entry for new test.
      683    11280             INTERFACE:    None called.
      684    11281             PARAMETERS:   TEST_NUM - input/output
      685    11282             DATA:         FEP table entry - output
      686    11283             DESCRIPTION:  This procedure will set  up an FEP table entry
      687    11284                           for a new  test.  FEP fields NUM, LOGICAL_NUM,
      688    11285                           and  STATUS.ACTIVE are  set.  If  the table is
      689    11286                           currently full, this procedure will ALTRETurn,
      690    11287                           causing  a TOLTS  abort, as  this should never
      691    11288                           happen.
      692    11289        */
      693    11290
      694    11291    2   SETUP_NEW_ENTRY: PROC (TEST_NUM) ALTRET ;
      695    11292
      696    11293    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      697    11294    3      DCL I           UBIN WORD ALIGNED ;
      698    11295    3      DCL FOUND       BIT (1) CALIGNED ;
      699    11296        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:27   
      700    11297
      701    11298        /* Code */
      702    11299
      703    11300    3      FOUND = %FALSE ;
      704    11301    3      I = 0 ;
      705    11302    4      DO WHILE (I <= %LAST_FEP) & (FEP.STATUS.ACTIVE (I)) & ~FOUND ;
      706    11303    4         IF (FEP.NUM (I) = FEP.NUM (TEST_NUM)) & ~FEP.STATUS.DVCID_FOUND (I)
      707    11304    4         THEN FOUND = %TRUE ;
      708    11305    4         ELSE I = I + 1 ;
      709    11306    4      END /* DO WHILE */ ;
      710    11307    3      IF I <= %LAST_FEP
      711    11308    4      THEN DO ;
      712    11309    4              FEP.FEP_STATUS (I) = 0 ;
      713    11310    4              FEP.STATUS.ACTIVE (I) = %TRUE ;
      714    11311    4              FEP.NUM (I) = FEP.NUM (TEST_NUM) ;
      715    11312    4              FEP.LOGICAL_NUM (I) = FEP.LOGICAL_NUM (TEST_NUM) ;
      716    11313    4              TEST_NUM = I ;
      717    11314    4              RETURN ;
      718    11315    4           END /* THEN DO */ ;
      719    11316    3      ELSE ALTRETURN ;
      720    11317
      721    11318    3   END SETUP_NEW_ENTRY ;
      722    11319        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:28   
      723    11320        /*I* NAME:         BUILD_CONFIG_ICM
      724    11321             AUTHOR:       Curt Andes
      725    11322             PURPOSE:      Create a response to a "READ CONFIG" ICM
      726    11323             INTERFACE:    COPY_ICM
      727    11324                           TOK$COURTESY_CALL
      728    11325                           CALCULATE_CHECKSUM
      729    11326             PARAMETERS:   FEP table entry number we are working with (TEST_NUM)
      730    11327             DATA:         FEP.RECEIVE_ICM$
      731    11328                           FEP.CONFIG_ID
      732    11329                           FEP.CONFIG_ID_EXT
      733    11330                           FEP.BUS_ADDR
      734    11331                           FEP.ICM$
      735    11332                           GET_CONFIG
      736    11333             DESCRIPTION:  This procedure creates a response to the "READ
      737    11334                           CONFIG"  ICM that  is sent  to the  FEP by the
      738    11335                           subexecutive. Since there is no program loaded
      739    11336                           into  the front end  for the ICM  to go to, we
      740    11337                           can't send it down.  Hence, we detect that the
      741    11338                           ICM is being sent,  intercept it, and create a
      742    11339                           response.  We  first copy the ICM  over to the
      743    11340                           receive  buffer, then  an M$CONFIG  is done to
      744    11341                           get the channel configuration. The checksum is
      745    11342                           calculated, and a courtesy call is paid to the
      746    11343                           subexec to return the data. If an ALTRETURN is
      747    11344                           taken from the M$CONFIG,  the config id is set
      748    11345                           to'0',  and the  status flags  are set to '8',
      749    11346                           indicating  that  there  was  no  MLCP  at the
      750    11347                           specified channel.
      751    11348        */
      752    11349
      753    11350    2   BUILD_CONFIG_ICM: PROC (TEST_NUM);
      754    11351        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:29   
      755    11352
      756    11353        /* Variables */
      757    11354
      758    11355    3      DCL TEST_NUM UBIN WORD ALIGNED;
      759    11356    3      DCL WORK UBIN HALF ALIGNED ;
      760    11357    3      DCL 1 WRK REDEF WORK,
      761    11358    3            2 UPPER UBIN (10) UNAL,
      762    11359    3            2 LOWER UBIN ( 8) UNAL,
      763    11360    3            2 *     UBIN HALF UNAL ;
      764    11361    3      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED ;
      765    11362        /* Code */
      766    11363
      767    11364    3      CALL COPY_ICM (TEST_NUM); /* MOVE ICM FROM SEND BUFFER TO RECEIVE*/
      768    11365    3      FEP.RECEIVE_ICM$(TEST_NUM)->ICM.REPLY = 33; /* OP COMPLETE */
      769    11366    3      WORK = FEP.ICM$(TEST_NUM)->ICM.L6MBA;
      770    11367    3      WRK.UPPER = WRK.UPPER/2;
      771    11368    3      GET_CONFIG.V.CHANNEL# = WORK;
      772    11369    3      WORK = FEP.NUM(TEST_NUM);
      773    11370    3      WRK.UPPER = WRK.UPPER/2;
      774    11371    3      GET_CONFIG.V.FEP# = WORK;
      775    11372    3      CALL M$CONFIG (GET_CONFIG) ALTRET (ERROR) ;
      776    11373        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:30   
      777    11374    4      DO CASE (CONFIG.STATUS#);  /* channel status */
      778    11375    4         CASE (%CHNST_NONE#); /* no device on channel */
      779    11376    4            FEP.STATUS.DVCID_FOUND (TEST_NUM) = %FALSE;
      780    11377    4            FEP.RECEIVE_ICM$ (TEST_NUM) -> ICM.CONFIG_ID = 0;
      781    11378    4            FEP.RECEIVE_ICM$ (TEST_NUM) -> ICM.FLAGS = 8;
      782    11379    4         CASE (ELSE);
      783    11380    4            WORK = CONFIG.DVCID#;
      784    11381    4            WRK.UPPER = WRK.UPPER*2;
      785    11382    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CONFIG_ID = WORK;
      786    11383    4            FEP.CONFIG_ID(TEST_NUM) = WORK;
      787    11384    4            WORK = CONFIG.EXDVCID#;
      788    11385    4            FEP.CONFIG_ID_EXT(TEST_NUM) = WRK.UPPER;
      789    11386    4            WRK.UPPER = WRK.UPPER*2;
      790    11387    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CONFIG_ID_EXT = WORK;
      791    11388    4            FEP.BUS_ADDR(TEST_NUM) = FEP.RECEIVE_ICM$(TEST_NUM)->ICM.L6MBA;
      792    11389    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.FLAGS = 0;
      793    11390    4            FEP.STATUS.DVCID_FOUND (TEST_NUM) = %TRUE ;
      794    11391    4      END /* DO CASE */;
      795    11392    3      CALL CALCULATE_CHECKSUM (TEST_NUM);
      796    11393    3      CALL RETURN_GEROUT_STATUS (TEST_NUM);
      797    11394    3      CALL TOK$COURTESY_CALL (FEP.C_CALL$(TEST_NUM));
      798    11395    3      RETURN ;
      799    11396
      800    11397    3   ERROR :
      801    11398    3      TOC_ERROR_CODE.ERR# = %E$NOCONFIG ;
      802    11399    3      CALL TOX$ERROR (TOC_ERROR_CODE) ;
      803    11400    3   END BUILD_CONFIG_ICM;
      804    11401        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:31   
      805    11402        /*I* NAME:         SETUP_TEST_CONNECT
      806    11403             AUTHOR:       Curt Andes
      807    11404             PURPOSE:      Call the routines to open the FEP path and load the handler
      808    11405             INTERFACE:    FIND_HANDLER
      809    11406                           ASSIGN_DCB
      810    11407                           OPEN_DCB
      811    11408             PARAMETERS:   The number of the FEP table entry we are working with
      812    11409             DATA:         FEP.DEVICE_TYPE - output
      813    11410             DESCRIPTION:  This  procedure  simply  calls  the procedures
      814    11411                           that setup the  communication path between the
      815    11412                           subexec and the front end. Part of this setup
      816    11413                           includes determining the correct FEP I/O handler
      817    11414                           to use and loading it down to the FEP.
      818    11415                           In the TEST_XREF table, there is an element called
      819    11416                           TEST_TYPE that is really just a binary representation
      820    11417                           of the HANDLER_NAME. Valid TEST_TYPEs are:
      821    11418                             #   HANDLER        TEST TYPE
      822    11419                            ---  -------        ---------
      823    11420                             1   TND_MLCP_HNDLR    MLCP testing
      824    11421                             2   TND_MDC_HNDLR     MDC testing
      825    11422                             3   TND_MLC16_HNDLR   MLC-16 testing
      826    11423
      827    11424                           Note that the CONFIG_IDs are the IDs as we would
      828    11425                           expect to see them coming up from the FEP.
      829    11426        */
      830    11427        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:32   
      831    11428    2   SETUP_TEST_CONNECT: PROC (TEST_NUM);
      832    11429
      833    11430        /* Variables */
      834    11431    3      DCL TEST_NUM UBIN WORD ALIGNED;
      835    11432    3      DCL 1 TEST_XREF (0:%LAST_XREF_ENTRY) ALIGNED CONSTANT,
      836    11433    3            2 CONFIG_ID UBIN HALF UNAL INIT
      837    11434    3                (%H2158,%H2168,%H2118,%H2108,%H2110,%H2138,%H2140,%H2178,
      838    11435    3                 %H2000,%H2001,%H2002,%H2003,%H2008,%H2031,%H2033,%H20C4,
      839    11436    3                 %H2978),
      840    11437    3            2 TEST_TYPE UBIN HALF UNAL INIT (1*8,2*8,3*1),
      841    11438    3            2 NAME_LENGTH UBIN HALF HALIGNED INIT (14*8,13*8,15*1),
      842    11439    3            2 HANDLER_NAME CHAR (31) CALIGNED INIT
      843    11440    3               ('TND_MLCP_HNDLR'*8,'TND_MDC_HNDLR'*8,'TND_MLC16_HNDLR'*1);
      844    11441    3      DCL J UBIN WORD ALIGNED;
      845    11442
      846    11443        /* Code */
      847    11444
      848    11445    3      FEP.DEVICE_TYPE (TEST_NUM) = FEP.ICM$ (TEST_NUM) -> ICM.TYC ;
      849    11446    3      CALL FIND_HANDLER (J,TEST_NUM);
      850    11447    3      CALL ASSIGN_DCB (J,TEST_NUM);
      851    11448    3      CALL OPEN_DCB (J,TEST_NUM);
      852    11449    3      RETURN;
      853    11450        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:33   
      854    11451        /*I* NAME:         FIND_HANDLER
      855    11452             AUTHOR:       Curt Andes
      856    11453                           Kathy Larkin
      857    11454             PURPOSE:      Determine the FEP handler for the current test
      858    11455             INTERFACE:    TOX$ERROR
      859    11456             PARAMETERS:   The variable to store the TEST_XREF entry in for the handler
      860    11457                           The FEP table entry number we are working with
      861    11458             DATA:         FEP.CONFIG_ID
      862    11459                           FEP.TEST_TYPE
      863    11460             DESCRIPTION:  This  procedure scans the  TEST_XREF table for
      864    11461                           the   CONFIG_ID   that   corresponds   to  the
      865    11462                           CONFIG_ID for the current  test. If a match is
      866    11463                           found, then the  entry number in the TEST_XREF
      867    11464                           table  that corresponds to  the CONFIG_ID will
      868    11465                           be    put    into    the    passed    variable
      869    11466                           TEST_XREF_ENTRY_NUM.  If no match can be  made
      870    11467                           then TOLTS will abort.
      871    11468        */
      872    11469
      873    11470    3   FIND_HANDLER: PROC (TEST_XREF_ENTRY_NUM,TEST_NUM);
      874    11471
      875    11472        /* Variables */
      876    11473    4      DCL TEST_XREF_ENTRY_NUM UBIN WORD ALIGNED;
      877    11474    4      DCL TEST_NUM UBIN WORD ALIGNED;
      878    11475    4      DCL I UBIN WORD ALIGNED;
      879    11476    4      DCL HANDLER_FOUND BIT (1) ALIGNED;
      880    11477        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:34   
      881    11478        /* CODE */
      882    11479    4      I = 0;
      883    11480    4      HANDLER_FOUND = %FALSE;
      884    11481    5      DO WHILE ( ~HANDLER_FOUND & I <= %LAST_XREF_ENTRY);
      885    11482    5         IF (FEP.CONFIG_ID(TEST_NUM) = TEST_XREF.CONFIG_ID(I))
      886    11483    5         THEN HANDLER_FOUND = %TRUE ;
      887    11484    5         ELSE I = I + 1 ;
      888    11485    5      END; /* WHILE */
      889    11486    4      IF ~HANDLER_FOUND
      890    11487    5      THEN DO;
      891    11488    5              TOC_ERROR_CODE.ERR# = %E$BADLINE;
      892    11489    5              CALL TOX$ERROR (TOC_ERROR_CODE);
      893    11490    5           END;
      894    11491    5      ELSE DO;
      895    11492    5              TEST_XREF_ENTRY_NUM = I;
      896    11493    5              FEP.TEST_TYPE(TEST_NUM) = TEST_XREF.TEST_TYPE(I);
      897    11494    5              RETURN;
      898    11495    5           END;
      899    11496    4   END FIND_HANDLER;
      900    11497        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:35   
      901    11498        /*I* NAME:         ASSIGN_DCB
      902    11499             AUTHOR:       Curt Andes
      903    11500             PURPOSE:      Determine the DCB a host test will use
      904    11501             INTERFACE:    NEW_DCB
      905    11502             PARAMETERS:   The entry number in TEST_XREF for the current test
      906    11503                           The entry number in the FEP table for the current test
      907    11504             DATA:         TEST_XREF
      908    11505                           FEP
      909    11506             DESCRIPTION:  When a test gets to the point where it needs a
      910    11507                           DCB assigned to it  so that it can communicate
      911    11508                           with the FEP, this  procedure is the baby that
      912    11509                           will  determine  the  DCB  the  test will use.
      913    11510                           COLTS will  load only one copy  of a given FEP
      914    11511                           I/O handler into a particular FEP at one time.
      915    11512                           This means that if 2 tests for the same device
      916    11513                           type  are being  run on  the same  FEP, but on
      917    11514                           different bus addresses,  both host test pages
      918    11515                           will  communicate to the  same FEP handler via
      919    11516                           the  same   DCB.   This  procedure  determines
      920    11517                           whether or  not a DCB is  already open for the
      921    11518                           FEP and  handler that are required  to run the
      922    11519                           test.  A  DCB  is  considered  'open' if there
      923    11520                           exists  another  FEP  table  entry which has a
      924    11521                           status of 'ACTIVE' and either 'TEST_CONNECTED'
      925    11522                           or  'TCONN_WAITING'  (a  "START  TEST" ICM has
      926    11523                           been  issued, but  the I/O  has not completed)
      927    11524                           which  uses the DCB.   If the DCB  is open, we
      928    11525                           will not try to  open it again, but merely set
      929    11526                           the test status 'DCB_OPEN'.  If the DCB is not
      930    11527                           open,  NEW_DCB  is  called  and  a new DCB  is
      931    11528                           assigned to the test.
      932    11529        */
      933    11530        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:36   
      934    11531    3   ASSIGN_DCB: PROC (XREF_INDEX,FEP_INDEX);
      935    11532
      936    11533        /* Variables */
      937    11534    4      DCL XREF_INDEX UBIN WORD ALIGNED;
      938    11535    4      DCL FEP_INDEX UBIN WORD ALIGNED;
      939    11536    4      DCL K UBIN WORD ALIGNED;
      940    11537    4      DCL DCB_NUM_FOUND BIT (1) CALIGNED;
      941    11538
      942    11539        /* Code */
      943    11540
      944    11541    4      K = 0;
      945    11542    4      DCB_NUM_FOUND = %FALSE;
      946    11543    5      DO WHILE (~DCB_NUM_FOUND & K <= %LAST_FEP);
      947    11544    5         IF (FEP.STATUS.ACTIVE(K)) &
      948    11545    5                 (FEP.STATUS.TEST_CONNECTED(K) |
      949    11546    5                 FEP.STATUS.TCONN_WAITING(K))
      950    11547    5         THEN IF FEP.LOGICAL_NUM(K) = FEP.LOGICAL_NUM(FEP_INDEX)
      951    11548    5            THEN IF FEP.TEST_TYPE(K) = TEST_XREF.TEST_TYPE(XREF_INDEX)
      952    11549    5               THEN DCB_NUM_FOUND = %TRUE;
      953    11550    5               ELSE K = K+1;
      954    11551    5            ELSE K = K+1;
      955    11552    5         ELSE K = K+1;
      956    11553    5      END;
      957    11554    4      IF DCB_NUM_FOUND
      958    11555    5      THEN DO;
      959    11556    5              FEP.DCB_NUM(FEP_INDEX) = FEP.DCB_NUM(K);
      960    11557    5              FEP.STATUS.DCB_OPEN(FEP_INDEX) = %TRUE;
      961    11558    5           END;
      962    11559    4      ELSE CALL NEW_DCB (FEP_INDEX);
      963    11560    4      RETURN;
      964    11561        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:37   
      965    11562        /*I* NAME:         NEW_DCB
      966    11563             AUTHOR:       Curt Andes
      967    11564             PURPOSE:      Find an unused DCB for a host test
      968    11565             INTERFACE:    M$GETDCB Monitor Service
      969    11566                           TOX$ERROR
      970    11567                           TOX$SCREECH
      971    11568             PARAMETERS:   TEST_XREF entry for the current test
      972    11569             DATA:         TOC_ERROR_CODE
      973    11570                           FEP.DCB_NUM
      974    11571                           FEP.STATUS.DCB_OPEN
      975    11572                           COLTS_DCBS
      976    11573             DESCRIPTION:  This procedure will obtain a DCB using M$GETDCB, and
      977    11574                           set the COLTS_DCBS value to the number of the DCB obtained.
      978    11575                           If 8 DCBs have already been obtained, then the COLTS_DCBS
      979    11576                           table will be full, and COLTS will abort as this should
      980    11577                           never happen.
      981    11578        */
      982    11579
      983    11580    4   NEW_DCB: PROC (FEP_INDEX);
      984    11581
      985    11582        /* VARIABLES */
      986    11583
      987    11584    5      DCL FEP_INDEX    UBIN WORD ALIGNED;
      988    11585    5      DCL DCBX         UBIN WORD ALIGNED;
      989    11586    5      DCL NO_DCB_OBTAINED BIT (1) CALIGNED;
      990    11587    5      DCL DCB_NUM     UBIN WORD STATIC ALIGNED ;
      991    11588    5      DCL 1 DCB_NAME  STATIC CALIGNED,
      992    11589    5            2 LGTH    UBIN BYTE CALIGNED INIT (10),
      993    11590    5            2 VALUE   CHAR (9) CALIGNED INIT ('COLTS_DCB'),
      994    11591    5            2 DCBX    CHAR (1) CALIGNED ;
      995    11592           %FPT_GETDCB     (FPTN = GET_COLTS_DCB,
      996    11593                            DCBNAME = DCB_NAME,
      997    11594                            DCBNUM = DCB_NUM) ;
      998    11609        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:38   
      999    11610        /* CODE */
     1000    11611
     1001    11612    5      DCBX = 0 ;
     1002    11613    5      NO_DCB_OBTAINED = %TRUE ;
     1003    11614    6      DO WHILE NO_DCB_OBTAINED & (DCBX <= %LAST_FEP) ;
     1004    11615    6         IF COLTS_DCBS (DCBX) ~= %UNDEFINED
     1005    11616    6         THEN DCBX = DCBX + 1 ;
     1006    11617    7         ELSE DO ;
     1007    11618    7                 CALL BINCHAR (DCB_NAME.DCBX, DCBX) ;
     1008    11619    7                 CALL M$GETDCB (GET_COLTS_DCB) ALTRET (DCBERR) ;
     1009    11620    7                 COLTS_DCBS (DCBX) = DCB_NUM ;
     1010    11621    7                 FEP.DCB_NUM (FEP_INDEX) = DCB_NUM ;
     1011    11622    7                 FEP.STATUS.DCB_OPEN (FEP_INDEX) = %FALSE ;
     1012    11623    7                 NO_DCB_OBTAINED = %FALSE ;
     1013    11624    7              END /* ELSE DO */ ;
     1014    11625    6      END /* WHILE */ ;
     1015    11626
     1016    11627    5      IF NO_DCB_OBTAINED
     1017    11628    6      THEN DO ;
     1018    11629    6              TOC_ERROR_CODE.ERR# = %E$NODCB ;
     1019    11630    6              CALL TOX$SCREECH (TOC_ERROR_CODE) ;
     1020    11631    6           END /* THEN DO */ ;
     1021    11632    5      ELSE RETURN ;
     1022    11633
     1023    11634    5   DCBERR:
     1024    11635    5      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;
     1025    11636    5      RETURN ;
     1026    11637
     1027    11638    5   END NEW_DCB;
     1028    11639    4   END ASSIGN_DCB;
     1029    11640        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:39   
     1030    11641        /*I* NAME:         OPEN_DCB
     1031    11642             AUTHOR:       Curt Andes
     1032    11643             PURPOSE:      Open the communications path to the FEP
     1033    11644             INTERFACE:    M$OPEN
     1034    11645                           TOX$WARN
     1035    11646                           TOX$ERROR
     1036    11647             PARAMETERS:   FEP table entry we are working with
     1037    11648             DATA:         OPEN_HANDLER_PATH
     1038    11649                           FEP
     1039    11650             DESCRIPTION:  This procedure calls M$OPEN to open the DCB to
     1040    11651                           communicate  with  an  FEP.   When  the dcb is
     1041    11652                           opened,  a handler name  is specified that the
     1042    11653                           MONITOR  service  will  down-line  load to the
     1043    11654                           FEP. If the FEP status table has DCB_OPEN set,
     1044    11655                           then  this routine will  return without making
     1045    11656                           the MONITOR service call, the assumption being
     1046    11657                           that  the  correct  handler  is already in the
     1047    11658                           FEP. If an ALTRETURN  is taken by M$OPEN, then
     1048    11659                           COLTS will abort.
     1049    11660        */
     1050    11661
     1051    11662    3   OPEN_DCB: PROC (XREF_INX,TEST_NUM) ALTRET;
     1052    11663
     1053    11664        /* Variables */
     1054    11665
     1055    11666    4      DCL XREF_INX UBIN WORD ALIGNED;
     1056    11667    4      DCL TEST_NUM UBIN WORD ALIGNED;
     1057    11668    4      DCL WORK UBIN HALF HALIGNED;
     1058    11669    4      DCL 1 WRK REDEF WORK,
     1059    11670    4            2 UPPER UBIN (10) UNAL,
     1060    11671    4            2 LOWER UBIN (8) UNAL;
     1061    11672    4      DCL WORK_ASC CHAR (2) CALIGNED;
     1062    11673        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:40   
     1063    11674        /* Code */
     1064    11675
     1065    11676    4      IF FEP.STATUS.DCB_OPEN(TEST_NUM)
     1066    11677    5      THEN DO;
     1067    11678    5              FEP.STATUS.TCONN_WAITING(TEST_NUM) = %TRUE;
     1068    11679    5           END;
     1069    11680    5      ELSE DO;
     1070    11681    5              OPEN_HNDLR_PATH.V.DCB# = FEP.DCB_NUM(TEST_NUM);
     1071    11682    5              WORK = FEP.NUM(TEST_NUM);
     1072    11683    5              WRK.UPPER = WRK.UPPER/2;
     1073    11684    5              CALL BINCHAR (WORK_ASC, WORK);
     1074    11685    5              CALL CONCAT (OPEN_HNDLR_PATH.V.RES#, 'FE', WORK_ASC);
     1075    11686    5              START_HNDLR.NAME.C# = TEST_XREF.HANDLER_NAME(XREF_INX);
     1076    11687    5              START_HNDLR.NAME.L# = TEST_XREF.NAME_LENGTH(XREF_INX);
     1077    11688    5              CALL M$OPEN (OPEN_HNDLR_PATH) WHENRETURN
     1078    11689    6                   DO;
     1079    11690    6                      FEP.STATUS.TCONN_WAITING(TEST_NUM) = %TRUE;
     1080    11691    6                      FEP.STATUS.DCB_OPEN(TEST_NUM) = %TRUE;
     1081    11692    6                   END;
     1082    11693    5              WHENALTRETURN
     1083    11694    6                   DO;
     1084    11695    6                      CALL TOX$WARN (B$TCB$-> B$TCB.ALT$ -> B$ALT.ERR);
     1085    11696    6                      TOC_ERROR_CODE.ERR# = %E$CANTOPENFPRG;
     1086    11697    6                      CALL TOX$ERROR (TOC_ERROR_CODE);
     1087    11698    6                      RETURN;
     1088    11699    6                   END;
     1089    11700    5           END;
     1090    11701    4      RETURN;
     1091    11702
     1092    11703    4   END OPEN_DCB;
     1093    11704    3   END SETUP_TEST_CONNECT;
     1094    11705        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:41   
     1095    11706        /*I* NAME:         COPY_ICM
     1096    11707             AUTHOR:       Curt Andes
     1097    11708             PURPOSE:      Copy an ICM from the write buffer to the receive
     1098    11709             INTERFACE:    None called.
     1099    11710             PARAMETERS:   The FEP table entry number we are working with
     1100    11711             DATA:         FEP
     1101    11712             DESCRIPTION:  Using  the pointers  in the  FEP table for the
     1102    11713                           ICM    (ICM$)    and    the   receive   buffer
     1103    11714                           (RECEIVE_ICM$),  this procedure  copies an ICM
     1104    11715                           from  the write buffer  to the receive buffer.
     1105    11716                           It copies the number of words specified in the
     1106    11717                           ICM. (ICM.WDCNT)
     1107    11718
     1108    11719        */
     1109    11720    2   COPY_ICM: PROC (TEST_NUM);
     1110    11721
     1111    11722        /* Variables */
     1112    11723
     1113    11724    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1114    11725    3      DCL I UBIN WORD ALIGNED;
     1115    11726
     1116    11727        /* Code */
     1117    11728
     1118    11729    4      DO I = 0 TO ((FEP.ICM$(TEST_NUM)->ICM.WDCNT/2) - 1 ) ;
     1119    11730    4         FEP.RECEIVE_ICM$(TEST_NUM)->ICM_BUFFER(I) =
     1120    11731    4                 FEP.ICM$(TEST_NUM)->ICM_BUFFER(I);
     1121    11732    4      END;
     1122    11733    3      RETURN;
     1123    11734    3   END COPY_ICM;
     1124    11735    2   END GEROUT_ICM;
     1125    11736        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:42   
     1126    11737        /*I* NAME:         GEROUT_REMOTE_INQUIRY
     1127    11738             AUTHOR:       Curt Andes
     1128    11739             PURPOSE:      Connect test & exec lines via the GEROUT REMOTE INQUIRY
     1129    11740             INTERFACE:    TOX$ERROR
     1130    11741                           CONNECT_TO_SLAVE
     1131    11742             PARAMETERS:   None passed.
     1132    11743             DATA:         SLAVE_CONNECT - output
     1133    11744                           RETURN_DELTA
     1134    11745                           FEP.STATUS.CONNECT_QUEUED
     1135    11746             DESCRIPTION:  CCLT  does this  MME to  establish a simulated
     1136    11747                           DAC line  between CCLT and the  tests that are
     1137    11748                           running, as well  as the controlling terminal.
     1138    11749                           All of which is  very meaningful in GCOS land,
     1139    11750                           but rather boring in  CP-6.  The line IDs that
     1140    11751                           are returned  to CCLT as a  result of it doing
     1141    11752                           this MME are generated by COLTS during service
     1142    11753                           of the MME COINIT. This MME is used to connect
     1143    11754                           both  the  exec  lines  (via  the  MME  GEROUT
     1144    11755                           COLTS_WAKEUP)  and the  test lines  (via COLTS
     1145    11756                           detection  of a "START  TEST" ICM being issued
     1146    11757                           by the subexec).  This procedure checks to see
     1147    11758                           if   there   is   already   a   REMOTE_INQUIRY
     1148    11759                           outstanding to COLTS.  If there is, COLTS will
     1149    11760                           abort.    Only   one   REMOTE_INQUIRY  can  be
     1150    11761                           outstanding at a time. If no REMOTE_INQUIRY is
     1151    11762                           already outstanding, then SLAVE_CONNECT.STATUS
     1152    11763                           is  set  to  PENDING,  the  connect pointer is
     1153    11764                           saved and a call is made to CONNECT_TO_SLAVE.
     1154    11765
     1155    11766                           *MME calling sequence
     1156    11767                           MME        GEROUT
     1157    11768                           VFD        18/0,6/5,12/ **
     1158    11769                           BCI        1,.MCOLT
     1159    11770                           <return>
     1160    11771
     1161    11772                           Where ** is where COLTS will put the LINE_ID when and if the
     1162    11773                           the slave connection can be made.
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:43   
     1163    11774        */
     1164    11775    1   GEROUT_REMOTE_INQUIRY: PROC ;
     1165    11776
     1166    11777        /* Variables */
     1167    11778    2      DCL I UBIN WORD ALIGNED;
     1168    11779
     1169    11780        /* Code */
     1170    11781
     1171    11782    2      RETURN_DELTA = 3;
     1172    11783    2      I = 0;
     1173    11784    2      IF SLAVE_CONNECT.STATUS.PENDING
     1174    11785    3      THEN DO;
     1175    11786    3              TOC_ERROR_CODE.ERR# = %E$BADINQ;
     1176    11787    3              CALL TOX$ERROR (TOC_ERROR_CODE);
     1177    11788    3           END;
     1178    11789    3      ELSE DO;
     1179    11790    3              SLAVE_CONNECT.STATUS.PENDING = %TRUE;
     1180    11791    3              SLAVE_CONNECT.PTR$ = PINCRW (MME_INSTR$,1);
     1181    11792    4              DO WHILE (~FEP.STATUS.CONNECT_QUEUED(I) & I <= %LAST_FEP);
     1182    11793    4                 I = I+1;
     1183    11794    4              END;
     1184    11795    3              IF I < %LAST_FEP+1
     1185    11796    4              THEN DO;
     1186    11797    4                      CALL CONNECT_TO_SLAVE (I);
     1187    11798    4                   END;
     1188    11799    3              ELSE;
     1189    11800    3           END;
     1190    11801    2      RETURN;
     1191    11802    2   END GEROUT_REMOTE_INQUIRY;
     1192    11803        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:44   
     1193    11804        /*I* NAME:         GEROUT_TERMINAL_TYPE_REQUEST
     1194    11805             AUTHOR:       Curt Andes
     1195    11806             PURPOSE:      Service GEROUT TERMINAL TYPE REQUEST
     1196    11807             INTERFACE:    None called.
     1197    11808             PARAMETERS:   Data word containing the LINE_ID for this request
     1198    11809             DATA:         FEP
     1199    11810                           RETURN_DELTA
     1200    11811             DESCRIPTION:  This  GEROUT type  is used  after CCLT detects
     1201    11812                           that  it has  received a  slave connect from a
     1202    11813                           line  in the form  of a LINE_ID  stored in the
     1203    11814                           GEROUT  REMOTE  INQUIRY  call  sequence.  CCLT
     1204    11815                           picks up  the LINE_ID and sends  it back to us
     1205    11816                           via  this  GEROUT   type.  The  FEP  table  is
     1206    11817                           searched  for  the  line  id,  and if the line
     1207    11818                           status  is ACTIVE,  the T&D  type code for the
     1208    11819                           entry  is  returned  to  the  subexec  in  the
     1209    11820                           calling sequence. Since  the T&D type code was
     1210    11821                           generated by CCLT in the first place, CCLT can
     1211    11822                           now determine which of it's test or exec lines
     1212    11823                           the new LINE_ID corresponds to. If the LINE_ID
     1213    11824                           cannot be found in  the FEP table or the entry
     1214    11825                           is   not  ACTIVE,   or  the   line  status  is
     1215    11826                           DISCONNECTED,  then  the  disconnect return is
     1216    11827                           taken.
     1217    11828
     1218    11829
     1219    11830                           *MME calling sequence
     1220    11831                           MME        GEROUT
     1221    11832                           VFD        6/ **,12/0,6/6,12/ line id
     1222    11833                           <return disconnected>
     1223    11834                           <return normal>
     1224    11835
     1225    11836                           The T&D type code is stored by COLTS in the field marked
     1226    11837                           "**" above.
     1227    11838        */
     1228    11839        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:45   
     1229    11840    1   GEROUT_TERMINAL_TYPE_REQUEST: PROC (DATA_WORD);
     1230    11841
     1231    11842        /* Variables */
     1232    11843
     1233    11844    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1234    11845    2      DCL 1 DATA REDEF DATA_WORD,
     1235    11846    2            2 TYPE UBIN (6) UNAL,
     1236    11847    2            2 * UBIN (18) UNAL,
     1237    11848    2            2 LINE_ID UBIN (12) UNAL;
     1238    11849    2      DCL I UBIN WORD ALIGNED;
     1239    11850
     1240    11851        /* Code */
     1241    11852
     1242    11853    2      I = 0;
     1243    11854    3      DO WHILE (FEP.EXEC_LINE_ID(I) ~= DATA.LINE_ID) &
     1244    11855    3              (FEP.LINE_ID(I) ~= DATA.LINE_ID) &
     1245    11856    3              (I <= %LAST_FEP);
     1246    11857    3         I = I+1;
     1247    11858    3      END;
     1248    11859    2      IF I < %LAST_FEP+1
     1249    11860    3      THEN DO;
     1250    11861    3              DATA.TYPE = FEP.DEVICE_TYPE(I);
     1251    11862    3              IF ~FEP.STATUS.ACTIVE(I) | FEP.STATUS.DISCONNECTED(I)
     1252    11863    3              THEN RETURN_DELTA = 2;
     1253    11864    3              ELSE RETURN_DELTA = 3;
     1254    11865    3           END;
     1255    11866    3      ELSE DO;
     1256    11867    3              RETURN_DELTA = 2;
     1257    11868    3           END;
     1258    11869    2      RETURN;
     1259    11870    2   END GEROUT_TERMINAL_TYPE_REQUEST;
     1260    11871        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:46   
     1261    11872        /*I* NAME:         GEROUT_COLTS_WAKEUP
     1262    11873             AUTHOR:       Curt Andes
     1263    11874             PURPOSE:      Service the GEROUT type: COLTS WAKEUP
     1264    11875             INTERFACE:    CONNECT_TO_SLAVE
     1265    11876                           TOX$ERROR
     1266    11877             PARAMETERS:   Data word with logical FEP # and CCLT test type code
     1267    11878             DATA:         FEP
     1268    11879                           RETURN_DELTA
     1269    11880                           TOC_ERROR_CODE
     1270    11881             DESCRIPTION:  This procedure matches  the logical FEP number
     1271    11882                           passed  in the MME  call with an  entry in the
     1272    11883                           FEP table that has a status of AWAITING_WAKEUP
     1273    11884                           set.  This status  should be  set when the MME
     1274    11885                           LOGFEP is  serviced. If no FEP  table entry is
     1275    11886                           found  that meets the  criteria, COLTS aborts.
     1276    11887                           The  device  type  code  is  saved  in the FEP
     1277    11888                           table.
     1278    11889
     1279    11890                           *MME calling sequence
     1280    11891                           MME        GEROUT
     1281    11892                           VFD        3/logical FEP #,15/0,6/7,6/0,6/type code
     1282    11893                           <return>
     1283    11894
     1284    11895        */
     1285    11896        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:47   
     1286    11897    1   GEROUT_COLTS_WAKEUP: PROC (DATA_WORD);
     1287    11898
     1288    11899        /* Variables */
     1289    11900    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1290    11901    2      DCL 1 DATA REDEF DATA_WORD,
     1291    11902    2            2 LFEP UBIN (3) UNAL,
     1292    11903    2            2 * UBIN (27) UNAL,
     1293    11904    2            2 TYPE_CODE UBIN (6) UNAL;
     1294    11905
     1295    11906    2      DCL I UBIN WORD ALIGNED;
     1296    11907
     1297    11908        /* Code */
     1298    11909
     1299    11910    2      RETURN_DELTA = 2;
     1300    11911    2      I = 0;
     1301    11912    3      DO WHILE (I <= %LAST_FEP) & (FEP.STATUS.ACTIVE (I)) ;
     1302    11913    3         I = I+1;
     1303    11914    3      END;
     1304    11915    2      IF I <= %LAST_FEP
     1305    11916    3      THEN DO;
     1306    11917    3              FEP.FEP_STATUS (I) = 0 ;
     1307    11918    3              FEP.STATUS.ACTIVE (I) = %TRUE ;
     1308    11919    3              FEP.LOGICAL_NUM (I) = DATA.LFEP ;
     1309    11920    3              FEP.NUM (I) = PHY_FEP_NUM (DATA.LFEP) ;
     1310    11921    3              FEP.DEVICE_TYPE(I) = DATA.TYPE_CODE;
     1311    11922    3              FEP.STATUS.ECONN_WAITING(I) = %TRUE;
     1312    11923    3              CALL CONNECT_TO_SLAVE (I);
     1313    11924    3           END;
     1314    11925    3      ELSE DO;
     1315    11926    3              TOC_ERROR_CODE.ERR# = %E$NOLOGFEP;
     1316    11927    3              CALL TOX$ERROR (TOC_ERROR_CODE);
     1317    11928    3           END;
     1318    11929    2      RETURN;
     1319    11930    2   END GEROUT_COLTS_WAKEUP;
     1320    11931        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:48   
     1321    11932        /*I* NAME:         GEROUT_DISCONNECT
     1322    11933             AUTHOR:       Curt Andes
     1323    11934             PURPOSE:      Service the GEROUT type: DISCONNECT
     1324    11935             INTERFACE:    DISCONNECT_EXEC_LINE
     1325    11936                           DISCONNECT_TEST_LINE
     1326    11937             PARAMETERS:   Data word containing LINE_ID to disconnect
     1327    11938                           Data word containing status store addr,courtesy call addr
     1328    11939                           Data word containing an ICM address
     1329    11940             DATA:         RETURN_DELTA
     1330    11941             DESCRIPTION:  This   procedure   determines   what  kind  of
     1331    11942                           disconnect is  to be done (either  a test line
     1332    11943                           or  exec  line),  and  calls  the  appropriate
     1333    11944                           procedure.
     1334    11945
     1335    11946                           *MME calling sequence
     1336    11947                           MME        GEROUT
     1337    11948                           VFD        18/0,6/15,12/line id
     1338    11949                           ZERO       status store address, courtesy call address
     1339    11950                           <return>
     1340    11951                           *** NOTE:
     1341    11952                                   For a test line disconnect, the upper half of the
     1342    11953                                   'A' register contains the ICM record address
     1343    11954        */
     1344    11955        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:49   
     1345    11956    1   GEROUT_DISCONNECT: PROC (DATA_WORD,PTR_WORD,REC_WORD);
     1346    11957
     1347    11958        /* Variables */
     1348    11959
     1349    11960    2      DCL PTR_WORD UBIN WORD ALIGNED;
     1350    11961    2      DCL 1 PTRS$ REDEF PTR_WORD,
     1351    11962    2            2 ST UBIN HALF UNAL,
     1352    11963    2            2 CC UBIN HALF UNAL;
     1353    11964    2      DCL REC_WORD UBIN WORD ALIGNED;
     1354    11965    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1355    11966    2      DCL 1 DATA REDEF DATA_WORD,
     1356    11967    2            2 * UBIN HALF UNAL,
     1357    11968    2            2 * UBIN (6) UNAL,
     1358    11969    2            2 LINE_ID UBIN (12) UNAL,
     1359    11970    2            2 LINE REDEF LINE_ID,
     1360    11971    2              3 TYPE UBIN (6) UNAL,
     1361    11972    2              3 NUM UBIN (6) UNAL;
     1362    11973    2      DCL I UBIN WORD ALIGNED;
     1363    11974
     1364    11975        /* Code */
     1365    11976
     1366    11977    2      I = 0;
     1367    11978    2      RETURN_DELTA = 3;
     1368    11979    2      PTRS$.CC = 0;
     1369    11980    2      IF DATA.LINE.TYPE = 21  /* = BCD 'E' */
     1370    11981    2      THEN CALL DISCONNECT_EXEC_LINE (DATA_WORD);
     1371    11982    2      ELSE CALL DISCONNECT_TEST_LINE (DATA_WORD,PTR_WORD,REC_WORD);
     1372    11983    2      RETURN;
     1373    11984        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:50   
     1374    11985        /*I* NAME:         DISCONNECT_EXEC_LINE
     1375    11986             AUTHOR:       Curt Andes
     1376    11987                           Kathy Larkin
     1377    11988             PURPOSE:      Service GEROUT DISCONNECT when an exec line is specified
     1378    11989             INTERFACE:    INITIATE_HNDLR_WRAPUP
     1379    11990             PARAMETERS:   Data word containing LINE_ID
     1380    11991             DATA:         FEP
     1381    11992             DESCRIPTION:  This procedure will disconnect all running
     1382    11993                           tests.  Each active handler is wrapped up to
     1383    11994                           be sure that all resources will be returned
     1384    11995                           to the system.  FEP entries are cleared as
     1385    11996                           the tests are identified.
     1386    11997        */
     1387    11998    2   DISCONNECT_EXEC_LINE: PROC (DATA_WORD);
     1388    11999
     1389    12000        /* VARIABLES */
     1390    12001
     1391    12002    3      DCL DATA_WORD UBIN WORD ALIGNED;
     1392    12003    3      DCL 1 DATA REDEF DATA_WORD,
     1393    12004    3            2 * UBIN HALF UNAL,
     1394    12005    3            2 * UBIN (6) UNAL,
     1395    12006    3            2 LINE_ID UBIN (12) UNAL,
     1396    12007    3            2 LINE REDEF LINE_ID,
     1397    12008    3              3 TYPE UBIN (6) UNAL,
     1398    12009    3              3 NUM UBIN (6) UNAL;
     1399    12010    3      DCL I UBIN WORD ALIGNED;
     1400    12011    3      DCL J UBIN WORD ALIGNED;
     1401    12012        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:51   
     1402    12013        /* CODE */
     1403    12014
     1404    12015    3      I = 0;
     1405    12016    4      DO WHILE (DATA.LINE_ID ~= FEP.EXEC_LINE_ID(I) & I <= %LAST_FEP);
     1406    12017    4         I = I+1;
     1407    12018    4      END;
     1408    12019    3      IF I < %LAST_FEP+1
     1409    12020    4      THEN DO;
     1410    12021    5              DO I = 0 TO %LAST_FEP;
     1411    12022    5                 IF (FEP.STATUS.ACTIVE (I) AND FEP.STATUS.DCB_OPEN (I))
     1412    12023    6                 THEN DO;
     1413    12024    7                         DO J = 0 TO %LAST_FEP;
     1414    12025    7                            IF ((I ~= J) AND
     1415    12026    7                                    FEP.STATUS.ACTIVE (J) AND
     1416    12027    7                                    FEP.STATUS.DCB_OPEN (J) AND
     1417    12028    7                                    (FEP.DCB_NUM (I) = FEP.DCB_NUM (J)))
     1418    12029    8                            THEN DO;
     1419    12030    8                                    FEP.STATUS.ACTIVE (J) = %FALSE;
     1420    12031    8                                    FEP.STATUS.DCB_OPEN (J) = %FALSE;
     1421    12032    8                                 END /* THEN DO */;
     1422    12033    7                         END /* DO J */;
     1423    12034    6                         CALL INITIATE_HNDLR_WRAPUP (I);
     1424    12035    6                      END /* THEN */;
     1425    12036    5              END /* DO I */;
     1426    12037    4           END;
     1427    12038    3      ELSE;
     1428    12039    3      RETURN;
     1429    12040    3   END DISCONNECT_EXEC_LINE;
     1430    12041        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:52   
     1431    12042        /*I* NAME:         INITIATE_HNDLR_WRAPUP
     1432    12043             AUTHOR:       Kathy Larkin
     1433    12044             PURPOSE:      Initiate wrap-up in an FEP Handler
     1434    12045             INTERFACE:    M$WRITE Monitor Service
     1435    12046                           M$READ Monitor Service
     1436    12047                           CLOSE_DCB
     1437    12048             PARAMETERS:   TEST_NUM - input
     1438    12049             DATA:         FEP.STATUS bits - input/output
     1439    12050             DESCRIPTION:  Causes a handler  to enter its wrap-up routine
     1440    12051                           by  attempting to M$WRITE too much data to it,
     1441    12052                           causing  the  M$READ  call  in  the handler to
     1442    12053                           ALTRET, initiating the wrap-up procedure.  The
     1443    12054                           M$READ is done to  insure that the handler has
     1444    12055                           completed wrapping up  before we close our DCB
     1445    12056                           (which  aborts  the  handler  if  it  is still
     1446    12057                           running).
     1447    12058        */
     1448    12059    2   INITIATE_HNDLR_WRAPUP: PROC (TEST_NUM);
     1449    12060
     1450    12061    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1451    12062    3      DCL DUMMY_BUF CHAR (1) CALIGNED;
     1452    12063
     1453    12064    3      WRITE_TO_FEP.BUF_ = VECTOR (DUMMY_BUF);
     1454    12065    3      WRITE_TO_FEP.BUF_.BOUND = 513; /* Max handler buffer size is 512 */
     1455    12066    3      WRITE_TO_FEP.V.DCB# = FEP.DCB_NUM (TEST_NUM);
     1456    12067    3      CALL M$WRITE (WRITE_TO_FEP) ALTRET (DONT_CARE);
     1457    12068    3   DONT_CARE:
     1458    12069    3      READ_FROM_FEP.BUF_ = VECTOR (DUMMY_BUF);
     1459    12070    3      READ_FROM_FEP.V.DCB# = FEP.DCB_NUM (TEST_NUM);
     1460    12071    3      CALL M$READ (READ_FROM_FEP) ALTRET (HNDLR_GONE);
     1461    12072    3   HNDLR_GONE:
     1462    12073    3      FEP.FEP_STATUS (TEST_NUM) = 0;
     1463    12074    3      FEP.STATUS.DISCONNECTED (TEST_NUM) = %TRUE;
     1464    12075    3      CALL CLOSE_DCB (FEP.DCB_NUM (TEST_NUM));
     1465    12076    3      RETURN;
     1466    12077    3   END INITIATE_HNDLR_WRAPUP;
     1467    12078        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:53   
     1468    12079        /*I* NAME:         DISCONNECT_TEST_LINE
     1469    12080             AUTHOR:       Curt Andes
     1470    12081             PURPOSE:      Service GEROUT DISCONNECT for a test line
     1471    12082             INTERFACE:    TOX$ERROR
     1472    12083                           GEROUT_WRITE
     1473    12084                           GEROUT_READ
     1474    12085                           RETURN_GEROUT_STATUS
     1475    12086                           CLOSE_DCB_IF_UNUSED
     1476    12087             PARAMETERS:   Data word containing the LINE_ID to disconnect
     1477    12088             DATA:         FEP
     1478    12089                           TOC_ERROR_CODE
     1479    12090             DESCRIPTION:  This  procedure issues  the disconnect  ICM to
     1480    12091                           the  FEP. If  the GEROUT_WRITE  ALTRETURNs the
     1481    12092                           following  GEROUT_READ will  not be performed.
     1482    12093                           the  line status will  be set to DISCONNECTED,
     1483    12094                           and if nobody else is using the DCB it will be
     1484    12095                           closed.
     1485    12096        */
     1486    12097        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:54   
     1487    12098    2   DISCONNECT_TEST_LINE: PROC (DATA_WORD,PTR_WORD,REC_WORD);
     1488    12099
     1489    12100        /* VARIABLES */
     1490    12101
     1491    12102    3      DCL PTR_WORD UBIN WORD ALIGNED;
     1492    12103    3      DCL 1 PTRS$ REDEF PTR_WORD,
     1493    12104    3            2 ST UBIN HALF UNAL,
     1494    12105    3            2 CC UBIN HALF UNAL;
     1495    12106    3      DCL REC_WORD UBIN WORD ALIGNED;
     1496    12107    3      DCL 1 REC REDEF REC_WORD,
     1497    12108    3            2 AD UBIN (18) UNAL,
     1498    12109    3            2 * UBIN (18) UNAL;
     1499    12110    3      DCL DATA_WORD UBIN WORD ALIGNED;
     1500    12111    3      DCL 1 DATA REDEF DATA_WORD,
     1501    12112    3            2 * UBIN HALF UNAL,
     1502    12113    3            2 * UBIN (6) UNAL,
     1503    12114    3            2 LINE_ID UBIN (12) UNAL,
     1504    12115    3            2 LINE REDEF LINE_ID,
     1505    12116    3              3 TYPE UBIN (6) UNAL,
     1506    12117    3              3 NUM UBIN (6) UNAL;
     1507    12118    3      DCL I UBIN WORD ALIGNED;
     1508    12119        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:55   
     1509    12120    3      I = 0 ;
     1510    12121    4      DO WHILE (DATA.LINE_ID ~= FEP.LINE_ID(I) & I <= %LAST_FEP);
     1511    12122    4         I = I+1;
     1512    12123    4      END;
     1513    12124    3      IF I <= %LAST_FEP
     1514    12125    4      THEN DO;
     1515    12126    4              IF REC.AD = 0
     1516    12127    5              THEN DO;
     1517    12128    5                      TOC_ERROR_CODE.ERR# = %E$BADDISC;
     1518    12129    5                      CALL TOX$ERROR (TOC_ERROR_CODE);
     1519    12130    5                   END;
     1520    12131    5              ELSE DO;
     1521    12132    5                      IF FEP.STATUS.TEST_CONNECTED(I)
     1522    12133    6                      THEN DO;
     1523    12134    6                              FEP.ICM$(I) = PINCRW (IS$,REC.AD+1);
     1524    12135    6                              FEP.STATUS$(I) = PINCRW (IS$,PTRS$.ST);
     1525    12136    6                              CALL GEROUT_WRITE (I) WHENRETURN
     1526    12137    7                                   DO;
     1527    12138    7                                      FEP.STATUS.TDISCONNECT_ISSUED(I)= %TRUE;
     1528    12139    7                                      FEP.C_CALL$(I) = ADDR(NIL) ;
     1529    12140    7                                      CALL GEROUT_READ (I);
     1530    12141    7                                   END;
     1531    12142    6                              WHENALTRETURN
     1532    12143    7                                   DO;
     1533    12144    7                                      FEP.FEP_STATUS(I) = 0;
     1534    12145    7                                      FEP.STATUS.DISCONNECTED(I) = %TRUE;
     1535    12146    7                                      CALL CLOSE_DCB_IF_UNUSED (I);
     1536    12147    7                                   END;
     1537    12148    6                              CALL RETURN_GEROUT_STATUS (I);
     1538    12149    6                           END;
     1539    12150    5                      ELSE;
     1540    12151    5                   END;
     1541    12152    4           END;
     1542    12153    3      ELSE;
     1543    12154    3      RETURN;
     1544    12155    3   END DISCONNECT_TEST_LINE;
     1545    12156    2   END GEROUT_DISCONNECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:56   
     1546    12157        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:57   
     1547    12158        /*I* NAME:         GEROUT_STATUS_REQUEST
     1548    12159             AUTHOR:       Curt Andes
     1549    12160             PURPOSE:      To service the GEROUT type: STATUS REQUEST
     1550    12161             INTERFACE:    TOX$ERROR
     1551    12162                           RETURN_GEROUT_STATUS
     1552    12163             PARAMETERS:   A data word containing the LINE_ID to return status for
     1553    12164                           A data word containing the status store address
     1554    12165             DATA:         TOC_ERROR_CODE
     1555    12166                           FEP
     1556    12167             DESCRIPTION:  This  procedure validates the  LINE_ID. If the
     1557    12168                           LINE_ID is  valid then RETURN_GEROUT_STATUS is
     1558    12169                           called  to determine the  line status and pass
     1559    12170                           it to the subexec.  If the LINE_ID is invalid,
     1560    12171                           COLTS aborts.
     1561    12172        */
     1562    12173    1   GEROUT_STATUS_REQUEST: PROC (DATA_WORD,PTRS);
     1563    12174
     1564    12175        /* Variables */
     1565    12176
     1566    12177    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1567    12178    2      DCL 1 DATA REDEF DATA_WORD,
     1568    12179    2            2 * UBIN HALF UNAL,
     1569    12180    2            2 * UBIN (6) UNAL,
     1570    12181    2            2 LINE_ID UBIN (12) UNAL;
     1571    12182    2      DCL PTRS UBIN WORD ALIGNED;
     1572    12183    2      DCL 1 PTRWD REDEF PTRS,
     1573    12184    2            2 STATUS UBIN HALF UNAL,
     1574    12185    2            2 * UBIN HALF UNAL;
     1575    12186    2      DCL I UBIN WORD ALIGNED;
     1576    12187           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:58   
     1577    12188        /* Code */
     1578    12189
     1579    12190    2      RETURN_DELTA = 3;
     1580    12191    2      I = 0;
     1581    12192    2      IF PTRWD.STATUS ~= 0
     1582    12193    3      THEN DO;
     1583    12194    4              DO WHILE (DATA.LINE_ID ~= FEP.EXEC_LINE_ID(I)) &
     1584    12195    4                      (DATA.LINE_ID ~= FEP.LINE_ID(I)) &
     1585    12196    4                      (I <= %LAST_FEP);
     1586    12197    4                 I = I+1;
     1587    12198    4              END;
     1588    12199    3              IF I < %LAST_FEP+1
     1589    12200    4              THEN DO;
     1590    12201    4                      FEP.STATUS$(I) = PINCRW (IS$,PTRWD.STATUS);
     1591    12202    4                      CALL RETURN_GEROUT_STATUS (I);
     1592    12203    4                   END;
     1593    12204    4              ELSE DO;
     1594    12205    4                      TOC_ERROR_CODE.ERR# = %E$BADLOGID;
     1595    12206    4                      CALL TOX$ERROR (TOC_ERROR_CODE);
     1596    12207    4                   END;
     1597    12208    3           END;
     1598    12209    2      ELSE;
     1599    12210
     1600    12211    2      RETURN;
     1601    12212    2   END GEROUT_STATUS_REQUEST;
     1602    12213        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:59   
     1603    12214        /*I* NAME:         RETURN_GEROUT_STATUS
     1604    12215             AUTHOR:       Curt Andes
     1605    12216             PURPOSE:      Return a CCLT ICM status
     1606    12217             INTERFACE:    None called.
     1607    12218             PARAMETERS:   The FEP table entry we are working with
     1608    12219             DATA:         FEP
     1609    12220             DESCRIPTION:  This  procedure  uses  the  status  in the FEP
     1610    12221                           table  to  create  a  status  that  CCLT  will
     1611    12222                           recognize.  The status is  returned to CCLT at
     1612    12223                           the location pointed  to by FEP.STATUS$, which
     1613    12224                           should  be  set  up  by  the  routine  that is
     1614    12225                           servicing the ICM.
     1615    12226        */
     1616    12227
     1617    12228    1   RETURN_GEROUT_STATUS: PROC (TEST_NUM);
     1618    12229
     1619    12230        /* Variables */
     1620    12231
     1621    12232    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1622    12233    2      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED;
     1623    12234
     1624    12235        /* Code */
     1625    12236
     1626    12237    2      IF (~FEP.STATUS.ACTIVE(TEST_NUM)) |
     1627    12238    2              (FEP.STATUS.TDISCONNECT_ISSUED(TEST_NUM)) |
     1628    12239    2              (FEP.STATUS.DISCONNECTED(TEST_NUM))
     1629    12240    2      THEN FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 2;
     1630    12241    2      ELSE IF FEP.STATUS.BUSY(TEST_NUM)
     1631    12242    2         THEN FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 8;
     1632    12243    2         ELSE FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 4; /* OP COMPLETE */
     1633    12244    2      RETURN;
     1634    12245
     1635    12246    2   END RETURN_GEROUT_STATUS;
     1636    12247        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:60   
     1637    12248        /*I* NAME:         GEROUT_WRITE
     1638    12249             AUTHOR:       Curt Andes
     1639    12250             PURPOSE:      Write an ICM to an FEP
     1640    12251             INTERFACE:    M$WRITE
     1641    12252                           CLOSE_DCB_IF_UNUSED
     1642    12253                           BUSY_THIS_TEST
     1643    12254                           TOX$WARN
     1644    12255                           TOX$ERROR
     1645    12256             PARAMETERS:   The number of the FEP table entry we are working with
     1646    12257             DATA:         WRITE_TO_FEP
     1647    12258                           FEP
     1648    12259                           TOC_ERROR_CODE
     1649    12260             DESCRIPTION:  This procedure sets up the FPT for an M$WRITE.
     1650    12261                           If the write is successful, then all FEP table
     1651    12262                           entries  using that  DCB are  marked busy.  If
     1652    12263                           the  write ALTRETURNS, then  the exec and test
     1653    12264                           line status is set to DISCONNECTED, the DCB is
     1654    12265                           closed if no other  tests are using it, and an
     1655    12266                           ALTRETURN  is taken.  If the  DCB is busy when
     1656    12267                           this  routine  is  called,  then COLTS aborts,
     1657    12268                           since the subexec has screwed up.
     1658    12269        */
     1659    12270
     1660    12271    1   GEROUT_WRITE: PROC (TEST_NUM) ALTRET;
     1661    12272
     1662    12273        /* Variables */
     1663    12274
     1664    12275    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1665    12276    2      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED;
     1666    12277        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:61   
     1667    12278        /* Code */
     1668    12279
     1669    12280    2      WRITE_TO_FEP.BUF_ = VECTOR(FEP.ICM$(TEST_NUM)->ICM);
     1670    12281    2      WRITE_TO_FEP.BUF_.BOUND = FEP.ICM_BYTE_CNT (TEST_NUM) - 1;
     1671    12282    2      WRITE_TO_FEP.V.DCB# = FEP.DCB_NUM(TEST_NUM);
     1672    12283    2      IF FEP.STATUS.ACTIVE(TEST_NUM) & FEP.STATUS.DCB_OPEN(TEST_NUM)
     1673    12284    3      THEN DO;
     1674    12285    3              IF FEP.STATUS.BUSY(TEST_NUM)
     1675    12286    4              THEN DO;
     1676    12287    4                      FEP.STATUS$ (TEST_NUM) -> GEROUT_STATUS = 8 ;
     1677    12288    4                      IF FEP.C_CALL$ (TEST_NUM) ~= ADDR (NIL)
     1678    12289    4                      THEN CALL TOK$COURTESY_CALL (FEP.C_CALL$ (TEST_NUM));
     1679    12290    4                      ELSE ;
     1680    12291    4                      ALTRETURN;
     1681    12292    4                   END /* THEN */ ;
     1682    12293    4              ELSE DO;
     1683    12294    4                      CALL M$WRITE (WRITE_TO_FEP) WHENRETURN
     1684    12295    5                           DO;
     1685    12296    5                              CALL BUSY_THIS_TEST (TEST_NUM);
     1686    12297    5                           END;
     1687    12298    4                      WHENALTRETURN
     1688    12299    5                           DO;
     1689    12300    5                              CALL TOX$WARN (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR);
     1690    12301    5                              TOC_ERROR_CODE.ERR# = %E$NOHNDLR;
     1691    12302    5                              CALL TOX$WARN (TOC_ERROR_CODE);
     1692    12303    5                              FEP.FEP_STATUS(TEST_NUM) = 0;
     1693    12304    5                              FEP.STATUS.DISCONNECTED(TEST_NUM) = %TRUE;
     1694    12305    5                              CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);
     1695    12306    5                              CALL RETURN_GEROUT_STATUS (TEST_NUM) ;
     1696    12307    5                              CALL TOK$COURTESY_CALL (FEP.C_CALL$ (TEST_NUM)) ;
     1697    12308    5                              ALTRETURN;
     1698    12309    5                           END;
     1699    12310    4                      RETURN;
     1700    12311    4                   END;
     1701    12312    3           END;
     1702    12313    3      ELSE DO;
     1703    12314    3              TOC_ERROR_CODE.ERR# = %E$BADLNST;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:62   
     1704    12315    3              CALL TOX$ERROR (TOC_ERROR_CODE);
     1705    12316    3           END;
     1706    12317
     1707    12318    2   END GEROUT_WRITE;
     1708    12319        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:63   
     1709    12320        /*I* NAME:         GEROUT_READ
     1710    12321             AUTHOR:       Curt Andes
     1711    12322             PURPOSE:      Perform a read of an ICM from an FEP
     1712    12323             INTERFACE:    M$READ
     1713    12324                           UNBUSY_THIS_TEST
     1714    12325                           CHECK_READ
     1715    12326                           TOK$COURTESY_CALL
     1716    12327                           CLOSE_DCB_IF_UNUSED;
     1717    12328             PARAMETERS:   The number of the FEP table entry we are working with
     1718    12329             DATA:         READ_FROM_FEP
     1719    12330                           FEP
     1720    12331             DESCRIPTION:  This  procedure reads  an ICM  that the FEP is
     1721    12332                           sending  in response to  a prior GEROUT_WRITE.
     1722    12333                           If the M$READ  returns normally, then all DCBs
     1723    12334                           that  were  marked  busy  when the originating
     1724    12335                           write was done  will have that status cleared.
     1725    12336                           Check_read  will then  be called  to make sure
     1726    12337                           that   certain   ICMs   that   require   post-
     1727    12338                           processing  (such as  the START  TEST) get the
     1728    12339                           necessary  attention. A courtesy  call is then
     1729    12340                           paid  to  inform   the  subexec  of  the  read
     1730    12341                           completion.  If the M$READ  takes an ALTRETURN
     1731    12342                           then the DCB will 'unbusied' in all tests that
     1732    12343                           are  using it,  the current  test line will be
     1733    12344                           set  DISCONNECTED  and  an  ALTRETURN  will be
     1734    12345                           taken.
     1735    12346        */
     1736    12347        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:64   
     1737    12348    1   GEROUT_READ: PROC (TEST_NUM) ALTRET;
     1738    12349
     1739    12350        /* Variables */
     1740    12351
     1741    12352    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1742    12353
     1743    12354        /* Code */
     1744    12355
     1745    12356    2      READ_FROM_FEP.BUF_ = VECTOR (FEP.RECEIVE_ICM$(TEST_NUM)->ICM);
     1746    12357    2      READ_FROM_FEP.V.DCB# = FEP.DCB_NUM(TEST_NUM);
     1747    12358    2      READ_FROM_FEP.BUF_.BOUND = FEP.ICM_BYTE_CNT (TEST_NUM) - 1 ;
     1748    12359    2      CALL M$READ (READ_FROM_FEP) WHENRETURN
     1749    12360    3           DO;
     1750    12361    3              CALL TOC$GEROUT_READ_COMPLETION (TEST_NUM);
     1751    12362    3              RETURN;
     1752    12363    3           END;
     1753    12364    2      WHENALTRETURN
     1754    12365    3           DO;
     1755    12366    3              CALL TOX$WARN (B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
     1756    12367    3              FEP.RECEIVE_ICM$(TEST_NUM)->ICM = '0'B;
     1757    12368    3              CALL UNBUSY_THIS_TEST (TEST_NUM);
     1758    12369    3              FEP.FEP_STATUS(TEST_NUM) = 0;
     1759    12370    3              FEP.STATUS.DISCONNECTED(TEST_NUM) = %TRUE;
     1760    12371    3              CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);
     1761    12372    3              CALL RETURN_GEROUT_STATUS (TEST_NUM);
     1762    12373    3              CALL TOK$COURTESY_CALL (FEP.C_CALL$(TEST_NUM));
     1763    12374    3              ALTRETURN;
     1764    12375    3           END;
     1765    12376
     1766    12377    2   END GEROUT_READ;
     1767    12378        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:65   
     1768    12379        /*I* NAME:         CHECK_READ
     1769    12380             AUTHOR:       Curt Andes
     1770    12381             PURPOSE:      Determine if post- processing is necessary for this ICM
     1771    12382             INTERFACE:    TEST_CONNECT
     1772    12383                           TEST_DISCONNECT
     1773    12384             PARAMETERS:   The number of the FEP table entry we are working with
     1774    12385             DATA:         FEP
     1775    12386             DESCRIPTION:  This procedure checks  the ICM command after a
     1776    12387                           read completes, and if any post- processing is
     1777    12388                           required, the appropriate procedure is called.
     1778    12389        */
     1779    12390
     1780    12391    1   CHECK_READ: PROC (TEST_NUM) ALTRET;
     1781    12392
     1782    12393        /* VARIABLES */
     1783    12394
     1784    12395    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1785    12396
     1786    12397        /* CODE */
     1787    12398
     1788    12399    3      DO CASE (FEP.ICM$(TEST_NUM)->ICM.CMD);
     1789    12400    3         CASE (3); /* START */
     1790    12401    3            CALL TEST_CONNECT (TEST_NUM);
     1791    12402    3         CASE (5); /* STOP TEST ICM */
     1792    12403    3            CALL TEST_DISCONNECT (TEST_NUM);
     1793    12404    3         CASE (ELSE);
     1794    12405    3      END;
     1795    12406    2      RETURN;
     1796    12407        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:66   
     1797    12408        /*I* NAME:         TEST_CONNECT
     1798    12409             AUTHOR:       Curt Andes
     1799    12410             PURPOSE:      Connect a test line after a successful START TEST
     1800    12411             INTERFACE:    CONNECT_TO_SLAVE
     1801    12412             PARAMETERS:   The number of the FEP table entry we are working with
     1802    12413             DATA:         FEP
     1803    12414             DESCRIPTION:  This procedure checks to see if the START TEST
     1804    12415                           ICM  completes with  OP COMPLETE.  If it does,
     1805    12416                           then the test line is connected by calling the
     1806    12417                           CONNECT_TO_SLAVE procedure. If the ICM did not
     1807    12418                           complete  without  an  error,  then nothing is
     1808    12419                           done. The subexec can worry about it.
     1809    12420        */
     1810    12421
     1811    12422    2   TEST_CONNECT: PROC (TEST_NUM);
     1812    12423
     1813    12424        /* VARIABLES */
     1814    12425
     1815    12426    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1816    12427
     1817    12428        /* CODE */
     1818    12429
     1819    12430    3      IF FEP.RECEIVE_ICM$(TEST_NUM)->ICM.REPLY = 33
     1820    12431    4      THEN DO;
     1821    12432    4              CALL CONNECT_TO_SLAVE (TEST_NUM);
     1822    12433    4           END;
     1823    12434    3      ELSE;
     1824    12435    3      RETURN;
     1825    12436    3   END TEST_CONNECT;
     1826    12437        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:67   
     1827    12438        /*I* NAME:         TEST_DISCONNECT
     1828    12439             AUTHOR:       Curt Andes
     1829    12440             PURPOSE:      Disconnect a test line
     1830    12441             INTERFACE:    CLOSE_DCB_IF_UNUSED
     1831    12442                           RETURN_GEROUT_STATUS
     1832    12443             PARAMETERS:   The FEP table entry number we are working with
     1833    12444             DATA:         FEP
     1834    12445             DESCRIPTION:  This  procedure will  reset the TEST_CONNECTED
     1835    12446                           and TDISCONNECT_ISSUED status, signifying that
     1836    12447                           the test line has been disconnected.
     1837    12448        */
     1838    12449
     1839    12450    2   TEST_DISCONNECT: PROC (TEST_NUM);
     1840    12451
     1841    12452        /* VARIABLES */
     1842    12453
     1843    12454    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1844    12455
     1845    12456        /* CODE */
     1846    12457
     1847    12458    3      FEP.STATUS.TDISCONNECT_ISSUED(TEST_NUM) = %FALSE;
     1848    12459    3      CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);
     1849    12460    3      FEP.FEP_STATUS (TEST_NUM)= 0 ;
     1850    12461    3      RETURN;
     1851    12462    3   END TEST_DISCONNECT;
     1852    12463    2   END CHECK_READ;
     1853    12464        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:68   
     1854    12465        /*I* NAME:         CLOSE_DCB
     1855    12466             AUTHOR:       Curt Andes
     1856    12467             PURPOSE:      Close the communication path between a test and an FEP
     1857    12468             INTERFACE:    M$CLOSE Monitor Service
     1858    12469                           RELEASE_DCB
     1859    12470                           TOX$ERROR
     1860    12471             PARAMETERS:   The number of the DCB to close
     1861    12472             DATA:         CLOSE_HNDLR_PATH
     1862    12473                           FEP
     1863    12474             DESCRIPTION:  This procedure calls  the M$CLOSE to close the
     1864    12475                           DCB that is passed as a parameter.
     1865    12476        */
     1866    12477    1   CLOSE_DCB: PROC (DCB_NUM);
     1867    12478
     1868    12479        /* Variables */
     1869    12480
     1870    12481    2      DCL DCB_NUM UBIN HALF HALIGNED;
     1871    12482    2      DCL I UBIN WORD ALIGNED;
     1872    12483
     1873    12484        /* Code */
     1874    12485
     1875    12486    2      CLOSE_HNDLR_PATH.V.DCB# = DCB_NUM;
     1876    12487    2      CALL M$CLOSE (CLOSE_HNDLR_PATH) ALTRET (ERROR) ;
     1877    12488    3      DO I = 0 TO %LAST_FEP;
     1878    12489    3         IF FEP.DCB_NUM (I) = DCB_NUM
     1879    12490    3         THEN FEP.STATUS.DCB_OPEN(I) = %FALSE;
     1880    12491    3         ELSE;
     1881    12492    3      END;
     1882    12493    2      CALL RELEASE_DCB (DCB_NUM) ALTRET (ERROR) ;
     1883    12494    2      RETURN;
     1884    12495
     1885    12496    2   ERROR:
     1886    12497    2      CALL TOX$ERROR (B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
     1887    12498    2      RETURN ;
     1888    12499    2   END CLOSE_DCB;
     1889    12500        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:69   
     1890    12501        /*I* NAME:         RELEASE_DCB
     1891    12502             AUTHOR:       Kathy Larkin
     1892    12503             PURPOSE:      Release a DCB
     1893    12504             INTERFACE:    M$RELDCB monitor service
     1894    12505             PARAMETERS:   DCB_NUM - input - number of DCB to release
     1895    12506             DATA:         COLTS_DCBS
     1896    12507             DESCRIPTION:  This  procedure  will  release  the  DCB whose
     1897    12508                           number is DCB_NUM,  and  will set the value to
     1898    12509                           in the COLTS_DCBS table to undefined.  The DCB
     1899    12510                           must have been  closed prior to being released
     1900    12511                           here or M$RELDCB will ALTRET.
     1901    12512        */
     1902    12513
     1903    12514    1   RELEASE_DCB: PROC (DCB_NUM) ALTRET ;
     1904    12515
     1905    12516    2      DCL DCB_NUM     UBIN HALF HALIGNED ;
     1906    12517    2      DCL I           UBIN WORD ALIGNED ;
     1907    12518           %FPT_RELDCB (FPTN = REL_COLTS_DCB) ;
     1908    12532
     1909    12533        /* Code */
     1910    12534
     1911    12535    2      REL_COLTS_DCB.V.DCB# = DCB_NUM ;
     1912    12536    2      CALL M$RELDCB (REL_COLTS_DCB) ALTRET (ERROR) ;
     1913    12537    3      DO I = 0 TO %LAST_FEP ;
     1914    12538    3         IF COLTS_DCBS (I) = DCB_NUM
     1915    12539    3         THEN COLTS_DCBS (I) = %UNDEFINED ;
     1916    12540    3         ELSE ;
     1917    12541    3      END /* DO */ ;
     1918    12542    2      RETURN ;
     1919    12543    2   ERROR:
     1920    12544    2      ALTRETURN ;
     1921    12545    2   END RELEASE_DCB ;
     1922    12546        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:70   
     1923    12547        /*I* NAME:         ANYBODY_USING_THIS_DCB
     1924    12548             AUTHOR:       Curt Andes
     1925    12549             PURPOSE:      See if a test other than the current test is using a DCB.
     1926    12550             INTERFACE:    None called.
     1927    12551             PARAMETERS:   The FEP table entry number we are working with
     1928    12552                           DCB_IN_USE flag
     1929    12553             DATA:         FEP
     1930    12554             DESCRIPTION:  This  procedure will  set the  DCB_IN_USE flag
     1931    12555                           'TRUE' if  a test other than  the current test
     1932    12556                           is  using the  DCB, otherwise  the flag is set
     1933    12557                           'FALSE'.
     1934    12558        */
     1935    12559
     1936    12560    1   ANYBODY_USING_THIS_DCB: PROC (TEST_NUM,DCB_IN_USE);
     1937    12561
     1938    12562        /* Variables */
     1939    12563
     1940    12564    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1941    12565    2      DCL DCB_IN_USE BIT (1) ALIGNED;
     1942    12566    2      DCL I UBIN WORD ALIGNED;
     1943    12567
     1944    12568        /* Code */
     1945    12569
     1946    12570    2      DCB_IN_USE = %FALSE;
     1947    12571    3      DO I = 0 TO %LAST_FEP;
     1948    12572    3         IF I ~= TEST_NUM &
     1949    12573    3                 FEP.STATUS.ACTIVE(I) &
     1950    12574    3                 FEP.STATUS.DCB_OPEN(I) &
     1951    12575    3                 (FEP.STATUS.TCONN_WAITING(I) | FEP.STATUS.TEST_CONNECTED(I)) &
     1952    12576    3                 FEP.DCB_NUM(I) = FEP.DCB_NUM(TEST_NUM)
     1953    12577    3         THEN DCB_IN_USE = %TRUE;
     1954    12578    3      END;
     1955    12579    2      RETURN;
     1956    12580    2   END ANYBODY_USING_THIS_DCB;
     1957    12581        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:71   
     1958    12582        /*I* NAME:         BUSY_THIS_TEST
     1959    12583             AUTHOR:       Curt Andes
     1960    12584                           Kathy Larkin
     1961    12585             PURPOSE:      Mark the test busy
     1962    12586             INTERFACE:    None called.
     1963    12587             PARAMETERS:   The FEP table entry number that is using the DCB
     1964    12588             DATA:         FEP
     1965    12589             DESCRIPTION:  This  procedure  will set the  FEP.STATUS.BUSY
     1966    12590                           bit for the specified test entry.
     1967    12591        */
     1968    12592
     1969    12593    1   BUSY_THIS_TEST: PROC (TEST_NUM);
     1970    12594
     1971    12595        /* VARIABLES */
     1972    12596
     1973    12597    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1974    12598
     1975    12599        /* CODE */
     1976    12600
     1977    12601    2      FEP.STATUS.BUSY (TEST_NUM) = %TRUE ;
     1978    12602    2      RETURN ;
     1979    12603
     1980    12604    2   END BUSY_THIS_TEST;
     1981    12605        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:72   
     1982    12606        /*I* NAME:         UNBUSY_THIS_TEST
     1983    12607             AUTHOR:       Curt Andes
     1984    12608                           Kathy Larkin
     1985    12609             PURPOSE:      Clear the 'BUSY' status on the test
     1986    12610             INTERFACE:    None called.
     1987    12611             PARAMETERS:   The number of the FEP table entry we are working with
     1988    12612             DATA:         FEP
     1989    12613             DESCRIPTION:  This procedure will reset the FEP.STATUS.BUSY
     1990    12614                           bit for the specified test.
     1991    12615        */
     1992    12616
     1993    12617    1   UNBUSY_THIS_TEST: PROC (TEST_NUM);
     1994    12618
     1995    12619        /* VARIABLES */
     1996    12620
     1997    12621    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1998    12622
     1999    12623        /* CODE */
     2000    12624
     2001    12625    2      FEP.STATUS.BUSY (TEST_NUM) = %FALSE ;
     2002    12626    2      RETURN ;
     2003    12627
     2004    12628    2   END UNBUSY_THIS_TEST;
     2005    12629        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:73   
     2006    12630        /*I* NAME:         CLOSE_DCB_IF_UNUSED
     2007    12631             AUTHOR:       Curt Andes
     2008    12632                           Kathy Larkin
     2009    12633             PURPOSE:      Close a DCB if it isn't being used anymore
     2010    12634             INTERFACE:    ANYBODY_USING_THIS_DCB
     2011    12635                           CLOSE_DCB
     2012    12636             PARAMETERS:   The FEP table entry number we are working with
     2013    12637             DATA:         FEP
     2014    12638             DESCRIPTION:  This         procedure        will        call
     2015    12639                           ANYBODY_USING_THIS_DCB  to  determine  if  the
     2016    12640                           current test is the only one using the DCB. If
     2017    12641                           no  one else  is using  the DCB,  CLOSE_DCB is
     2018    12642                           called.
     2019    12643        */
     2020    12644
     2021    12645    1   CLOSE_DCB_IF_UNUSED: PROC (TEST_NUM);
     2022    12646
     2023    12647        /* VARIABLES */
     2024    12648
     2025    12649    2      DCL TEST_NUM UBIN WORD ALIGNED;
     2026    12650    2      DCL DCB_IN_USE BIT (1) ALIGNED;
     2027    12651
     2028    12652        /* CODE */
     2029    12653
     2030    12654    2      IF FEP.STATUS.DCB_OPEN (TEST_NUM)
     2031    12655    3      THEN DO ;
     2032    12656    3              CALL ANYBODY_USING_THIS_DCB (TEST_NUM,DCB_IN_USE);
     2033    12657    3              IF ~DCB_IN_USE
     2034    12658    3              THEN CALL CLOSE_DCB (FEP.DCB_NUM(TEST_NUM));
     2035    12659    3              ELSE;
     2036    12660    3           END /* THEN DO */ ;
     2037    12661    2      ELSE /* No DCB to close */ ;
     2038    12662    2      RETURN;
     2039    12663    2   END CLOSE_DCB_IF_UNUSED;
     2040    12664        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:74   
     2041    12665        /*I* NAME:         CALCULATE_CHECKSUM
     2042    12666             AUTHOR:       Curt Andes
     2043    12667             PURPOSE:      Calculate the checksum for an ICM
     2044    12668             INTERFACE:    None called.
     2045    12669             PARAMETERS:   The FEP table entry number we are working with
     2046    12670             DATA:         FEP.RECEIVE_ICM$
     2047    12671             DESCRIPTION:  This procedure will calcultae the checksum for
     2048    12672                           the  ICM  associated  with  the  current test.
     2049    12673                           Checksums are just the EXCLUSIVE-OR of all the
     2050    12674                           18-bit   fields  in  the   ICM  following  the
     2051    12675                           ICM.CHKSM position.  This procedure works with
     2052    12676                           the ICM that is in the receive buffer.
     2053    12677        */
     2054    12678
     2055    12679    1   CALCULATE_CHECKSUM: PROC (TEST_NUM);
     2056    12680
     2057    12681        /* VARIABLES */
     2058    12682
     2059    12683    2      DCL TEST_NUM UBIN WORD ALIGNED;
     2060    12684    2      DCL I UBIN WORD ALIGNED;
     2061    12685    2      DCL W_CKSM BIT (18) HALIGNED;
     2062    12686    2      DCL CKSM REDEF W_CKSM UBIN HALF HALIGNED;
     2063    12687    2      DCL ICM_DATA (0:64) BIT (18) BASED HALIGNED;
     2064    12688
     2065    12689        /* CODE */
     2066    12690
     2067    12691    2      CKSM = 0;
     2068    12692    3      DO I = 3 TO ((FEP.RECEIVE_ICM$(TEST_NUM)->ICM.WDCNT)-1);
     2069    12693    3         W_CKSM = W_CKSM\FEP.RECEIVE_ICM$(TEST_NUM)->ICM_DATA(I);
     2070    12694    3      END;
     2071    12695    2      FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CKSM = CKSM;
     2072    12696    2      RETURN;
     2073    12697    2   END CALCULATE_CHECKSUM;
     2074    12698        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:75   
     2075    12699        /*I*  NAME:        TOC$MME_LOGFEP
     2076    12700              AUTHOR:      Curt Andes
     2077    12701              PURPOSE:     LOGFEP
     2078    12702              INTERFACE:   TOX$ERROR
     2079    12703                           M$CONFIG
     2080    12704              PARAMETERS:  FEP Node #
     2081    12705                           LOGICAL FEP #
     2082    12706              DATA:        GET_CONFIG
     2083    12707                           CONFIG
     2084    12708                           PHY_FEP_NUM
     2085    12709              DESCRIPTION: This procedure will return to the subexecutive a logical
     2086    12710                           FEP # that will correspond to a CP-6 FEP node number. There
     2087    12711                           will only be one logical FEP number associated with
     2088    12712                           a given node.
     2089    12713
     2090    12714                           * MME calling sequence
     2091    12715                           MME        LOGFEP
     2092    12716                           VFD        24/0,12/node id     *CP-6 node #
     2093    12717                           OCT        0                   *Logical FEP # or -1
     2094    12718                                                          *returned here
     2095    12719                           <return>
     2096    12720
     2097    12721                           This procedure will call M$CONFIG with fake channel
     2098    12722                           information to determine if the node exists. If it
     2099    12723                           does not, then a -1 is passed back as the logical
     2100    12724                           FEP number. If the node does exist, then the index of the
     2101    12725                           the next available PHY_FEP_NUM entry (next undefined entry)
     2102    12726                           will be resturned as the logical fep# for that node.  If
     2103    12727                           no available entry is found, TOX$ERROR will be called.
     2104    12728        */
     2105    12729        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:76   
     2106    12730    1   TOC$MME_LOGFEP: PROC (NODE_ID,LOGICAL_FEP_NUM);
     2107    12731
     2108    12732           /* Variables */
     2109    12733
     2110    12734    2      DCL NODE_ID UBIN WORD ALIGNED;
     2111    12735    2      DCL 1 NODE REDEF NODE_ID,
     2112    12736    2            2 PAD UBIN HALF UNAL,
     2113    12737    2            2 NUM UBIN HALF UNAL;
     2114    12738    2      DCL LOGICAL_FEP_NUM SBIN WORD ALIGNED;
     2115    12739    2      DCL I UBIN HALF HALIGNED;
     2116    12740        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:77   
     2117    12741        /* Code */
     2118    12742
     2119    12743    2      RETURN_DELTA = 3;
     2120    12744    2      GET_CONFIG.V.CHANNEL# = 1024;
     2121    12745    2      GET_CONFIG.V.FEP# = NODE.NUM;
     2122    12746    2      CALL M$CONFIG(GET_CONFIG) WHENALTRETURN
     2123    12747    3           DO;
     2124    12748    3              LOGICAL_FEP_NUM = %UNDEFINED ;
     2125    12749    3              RETURN;
     2126    12750    3           END;
     2127    12751    2      I = 0;
     2128    12752    3      DO WHILE (I <= %LAST_FEP) & (PHY_FEP_NUM (I) ~= NODE.NUM) ;
     2129    12753    3         I = I + 1 ;
     2130    12754    3      END /* DO WHILE */ ;
     2131    12755    2      IF I <= %LAST_FEP
     2132    12756    2      THEN LOGICAL_FEP_NUM = I ;
     2133    12757    3      ELSE DO ;
     2134    12758    3              I = 0 ;
     2135    12759    4              DO WHILE (I <= %LAST_FEP) & (PHY_FEP_NUM (I) ~= %UNDEFINED) ;
     2136    12760    4                 I = I + 1 ;
     2137    12761    4              END /* DO WHILE */ ;
     2138    12762    3              IF I <= %LAST_FEP
     2139    12763    4              THEN DO ;
     2140    12764    4                      LOGICAL_FEP_NUM = I ;
     2141    12765    4                      PHY_FEP_NUM (I) = NODE.NUM ;
     2142    12766    4                   END /* THEN DO */ ;
     2143    12767    4              ELSE DO ;
     2144    12768    4                      TOC_ERROR_CODE.ERR# = %E$LTABOVFL ;
     2145    12769    4                      CALL TOX$ERROR (TOC_ERROR_CODE) ;
     2146    12770    4                   END /* ELSE DO */ ;
     2147    12771    3           END /* ELSE DO */ ;
     2148    12772    2      RETURN ;
     2149    12773    2   END TOC$MME_LOGFEP ;
     2150    12774        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:78   
     2151    12775        /*I*  NAME:        TOC$GEROUT_READ_COMPLETION
     2152    12776              AUTHOR:      Curt Andes
     2153    12777                           Kathy Larkin
     2154    12778              PURPOSE:     Perform read completion tasks
     2155    12779              INTERFACE:   UNBUSY_THIS_TEST
     2156    12780                           CHECK_READ - check for connect/disconnect icm
     2157    12781                           RETURN_GEROUT_STATUS - status to CCLT
     2158    12782                           TOK$COURTESY_CALL - status to CCLT
     2159    12783                           TOX$SCREECH - error routine
     2160    12784              PARAMETERS:  I - index into FEP table for test entry
     2161    12785              DATA:        No external data accessed.
     2162    12786              DESCRIPTION: This procedure performs the post-IO tasks
     2163    12787                           of resetting the BUSY bit, and  returning
     2164    12788                           status to the subexec. TOLTS will SCREECH
     2165    12789                           if the FEP table  index parameter  is out
     2166    12790                           of range.
     2167    12791        */
     2168    12792
     2169    12793    1   TOC$GEROUT_READ_COMPLETION: PROC (I);
     2170    12794
     2171    12795        /* Variables */
     2172    12796    2      DCL I UBIN WORD ALIGNED;
     2173    12797
     2174    12798        /* Code */
     2175    12799
     2176    12800    2      IF I < %LAST_FEP+1
     2177    12801    3      THEN DO;
     2178    12802    3              CALL UNBUSY_THIS_TEST (I);
     2179    12803    3              CALL CHECK_READ (I);
     2180    12804    3              CALL RETURN_GEROUT_STATUS (I);
     2181    12805    3              IF FEP.C_CALL$(I) ~= ADDR(NIL)
     2182    12806    3              THEN CALL TOK$COURTESY_CALL (FEP.C_CALL$(I));
     2183    12807    3              ELSE /* do not do a courtesy call */ ;
     2184    12808    3           END;
     2185    12809    3      ELSE DO;
     2186    12810    3              TOC_ERROR_CODE.ERR# = %E$BADEVID;
     2187    12811    3              CALL TOX$SCREECH (TOC_ERROR_CODE);
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:79   
     2188    12812    3           END;
     2189    12813    2      RETURN ;
     2190    12814
     2191    12815    2   END TOC$GEROUT_READ_COMPLETION ;
     2192    12816        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:80   
     2193    12817        /*I* NAME:         CONNECT_TO_SLAVE
     2194    12818             AUTHOR:       Curt Andes
     2195    12819             PURPOSE:      To connect exec & test lines to the subexec
     2196    12820             INTERFACE:    None called.
     2197    12821             PARAMETERS:   The FEP table entry we are trying to connect
     2198    12822             DATA:         FEP
     2199    12823                           SLAVE_CONNECT
     2200    12824             DESCRIPTION:  This  procedure will  use the  connect pointer
     2201    12825                           saved by the REMOTE_INQUIRY GEROUT.  A connect
     2202    12826                           is accomplished by storing the LINE_ID (either
     2203    12827                           exec or  test) in a location  specified by the
     2204    12828                           subexec.  The  subexec  will eventually detect
     2205    12829                           that  the LINE_ID  has been  stored there, and
     2206    12830                           begin further processing for that line.
     2207    12831        */
     2208    12832        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:81   
     2209    12833    1   CONNECT_TO_SLAVE: PROC (I);
     2210    12834
     2211    12835        /* VARIABLES */
     2212    12836    2      DCL I UBIN WORD ALIGNED;
     2213    12837    2      DCL 1 GR5_VFD BASED ALIGNED,
     2214    12838    2            2 * UBIN HALF UNAL,
     2215    12839    2            2 * UBIN (6) UNAL,
     2216    12840    2            2 LINE_ID UBIN (12) UNAL;
     2217    12841
     2218    12842        /* CODE */
     2219    12843
     2220    12844    2      IF ~SLAVE_CONNECT.STATUS.PENDING
     2221    12845    3      THEN DO;
     2222    12846    3              FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;
     2223    12847    3           END;
     2224    12848    3      ELSE DO;
     2225    12849    3              IF FEP.STATUS.ECONN_WAITING(I)
     2226    12850    4              THEN DO;
     2227    12851    4                      FEP.STATUS.EXEC_CONNECTED(I) = %TRUE;
     2228    12852    4                      SLAVE_CONNECT.PTR$->GR5_VFD.LINE_ID = FEP.EXEC_LINE_ID(I);
     2229    12853    4                      FEP.STATUS.ECONN_WAITING(I) = %FALSE;
     2230    12854    4                      IF FEP.STATUS.TCONN_WAITING(I)
     2231    12855    4                      THEN FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;
     2232    12856    4                      ELSE FEP.STATUS.CONNECT_QUEUED(I) = %FALSE;
     2233    12857    4                   END;
     2234    12858    4              ELSE DO;
     2235    12859    4                      FEP.STATUS.TEST_CONNECTED(I) = %TRUE;
     2236    12860    4                      SLAVE_CONNECT.PTR$->GR5_VFD.LINE_ID = FEP.LINE_ID(I);
     2237    12861    4                      FEP.STATUS.TCONN_WAITING(I) = %FALSE;
     2238    12862    4                      IF FEP.STATUS.ECONN_WAITING(I)
     2239    12863    4                      THEN FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;
     2240    12864    4                      ELSE FEP.STATUS.CONNECT_QUEUED(I) = %FALSE;
     2241    12865    4                   END;
     2242    12866    3              SLAVE_CONNECT.STATUS.PENDING = %FALSE;
     2243    12867    3           END;
     2244    12868    2      RETURN;
     2245    12869    2   END CONNECT_TO_SLAVE;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:82   
     2246    12870    1   END TOC$COLTS ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:83   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOC$COLTS.

   Procedure TOC$COLTS requires 2577 words for executable code.
   Procedure TOC$COLTS requires 56 words of local(AUTO) storage.

    No errors detected in file TOC$COLTS.:E05TSI    .

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:84   

 Object Unit name= TOC$COLTS                                  File name= TOC$COLTS.:E05TOU
 UTS= JUL 30 '97 06:21:05.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   272    420  TOC$COLTS
    2  RoData even  UTS    172    254  TOC$COLTS
    3   Proc  even  none  2577   5021  TOC$COLTS
    4  RoData even  none    18     22  TOC$COLTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        4  TOC$COLTS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 TOX$ERROR
         yes           Std       1 TOX$SCREECH
         yes           Std       1 TOK$COURTESY_CALL
         yes           Std       1 TOX$WARN
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:85   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                B$TCB$
     TOT$ECP                               TOT$TOLTS                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:86   


        1        1        /*M* TOC$COLTS     TOLTS Communications On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOC$COLTS
       12       12             AUTHOR:       Curt Andes
       13       13             PURPOSE:      Interface between Slave Mode COLTS (CCLT)
       14       14                           and the CP-6 operating system
       15       15             DESCRIPTION:  This module, referred to as the COLTS Interface
       16       16                           Module, contains the MME service routines for the
       17       17                           COLTS Subexec and the secondary event handler for
       18       18                           CP-6 TOLTS module.
       19       19             REFERENCE:    CP-6 Release D0C0
       20       20                           TDM-PMD-079 PRU9118 Line Printer Test Page
       21       21                           TDM-SMD-019 COLTS I/O Handlers for the L6 FEP
       22       22             LAST UPDATE:  11/20/85
       23       23        */
       24       24        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:87   
       25       25        /*F* NAME:         TOC$COLTS
       26       26             DESCRIPTION:  Procedure Nesting Hierarchy
       27       27
       28       28                TOC$COLTS: procedure (MME, MREG, INSTR$, RETURN_DELTA)
       29       29
       30       30                   TOC$MME_COINIT: procedure (MME word one)
       31       31                      INIT_FOR_COLTS_ONLY: procedure
       32       32                   TOC$MME_FEPTYP: procedure
       33       33                   TOC$MME_GEROUT: procedure
       34       34                      GEROUT_ICM: procedure
       35       35                         CHECK_CMD_AND_TEST_NUM: procedure
       36       36                         SET_POINTERS: procedure
       37       37                         SETUP_NEW_ENTRY: procedure
       38       38                         BUILD_CONFIG_ICM: procedure
       39       39                         SETUP_TEST_CONNECT: procedure
       40       40                            FIND_HANDLER: procedure
       41       41                            ASSIGN_DCB: procedure
       42       42                               NEW_DCB: procedure
       43       43                            OPEN_DCB: procedure
       44       44                         COPY_ICM: procedure
       45       45                      GEROUT_REMOTE_INQUIRY: procedure
       46       46                      GEROUT_TERMINAL_TYPE_REQUEST: procedure
       47       47                      GEROUT_COLTS_WAKEUP: procedure
       48       48                      GEROUT_DISCONNECT: procedure
       49       49                         DISCONNECT_EXEC_LINE: procedure
       50       50                            INITIATE_HNDLR_WRAPUP: procedure
       51       51                         DISCONNECT_TEST_LINE: procedure
       52       52                      GEROUT_STATUS_REQUEST: procedure
       53       53                      RETURN_GEROUT_STATUS: procedure
       54       54                      GEROUT_WRITE: procedure
       55       55                      GEROUT_READ: procedure
       56       56                      CHECK_READ: procedure
       57       57                         TEST_CONNECT: procedure
       58       58                         TEST_DISCONNECT: procedure
       59       59                      CLOSE_DCB: procedure
       60       60                      RELEASE_DCB: procedure
       61       61                      ANYBODY_USING_THIS_DCB: procedure
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:88   
       62       62                      BUSY_THIS_TEST: procedure
       63       63                      UNBUSY_THIS_TEST: procedure
       64       64                      CLOSE_DCB_IF_UNUSED: procedure
       65       65                      CALCULATE_CHECKSUM: procedure
       66       66                   TOC$MME_LOGFEP: procedure (MME word one, MME word two)
       67       67                   TOC$GEROUT_READ_COMPLETION: procedure
       68       68                   CONNECT_TO_SLAVE: procedure
       69       69        */
       70       70        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:89   
       71       71        TOC$COLTS: PROC (MME, MREG, MME_INSTR$, RETURN_DELTA);

     71  3 000000   000000 700200 xent  TOC$COLTS    TSX0  ! X66_AUTO_4
         3 000001   000070 000004                    ZERO    56,4

       72       72
       73       73        /* Include Files */
       74       74
       75       75           %INCLUDE B$JIT;
       76      678           %INCLUDE B_ERRORS_C ;
       77     1805           %INCLUDE B_SEGIDS_C;
       78     2344           %INCLUDE CP_6;
       79     7903           %INCLUDE CP_6_SUBS;
       80     8443           %INCLUDE F$DCB;
       81     8492           %INCLUDE TOT_TOLTS_M;
       82     9610           %INCLUDE TOT_RQSTS_E ;
       83     9652           %INCLUDE TO_PERR_C ;
       84    10237
       85    10238        /* Parameters */
       86    10239
       87    10240           %MME ;
       88    10261           %MREG ;
       89    10283           %MME_INSTR$ ;
       90    10286           %RETURN_DELTA ;
       91    10289           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:90   
       92    10290        /* Variables */
       93    10291
       94    10292           %B$ALT;
       95    10300           %B$TCB;
       96    10303           %VLP_ERRCODE (FPTN = TOC_ERROR_CODE,
       97    10304                         FCG  = 'TO',
       98    10305                         MID  = 'C',
       99    10306                         SEV  = 0) ;
      100    10351           %IS$ (STCLASS = CONSTANT);
      101    10365        /*  */
      102    10366    1      DCL 1 FEP (0:7) STATIC ALIGNED,
      103    10367    1            2 FEP_STATUS UBIN (18) HALIGNED,
      104    10368    1            2 STATUS REDEF FEP_STATUS,
      105    10369    1              3 ACTIVE BIT (1) UNAL,
      106    10370    1              3 DISCONNECTED BIT (1) UNAL,
      107    10371    1              3 TEST_CONNECTED BIT (1) UNAL,
      108    10372    1              3 CONNECT_QUEUED BIT (1) UNAL,
      109    10373    1              3 EXEC_CONNECTED BIT (1) UNAL,
      110    10374    1              3 AWAITING_WAKEUP BIT (1) UNAL,
      111    10375    1              3 ECONN_WAITING BIT (1) UNAL,
      112    10376    1              3 TCONN_WAITING BIT (1) UNAL,
      113    10377    1              3 TDISCONNECT_ISSUED BIT (1) UNAL,
      114    10378    1              3 BUSY BIT (1) UNAL,
      115    10379    1              3 DCB_OPEN BIT (1) UNAL,
      116    10380    1              3 DVCID_FOUND BIT (1) UNAL,
      117    10381    1              3 * BIT (1) UNAL,
      118    10382    1              3 * BIT (1) UNAL,
      119    10383    1              3 * BIT (1) UNAL,
      120    10384    1              3 * BIT (1) UNAL,
      121    10385    1              3 * BIT (1) UNAL,
      122    10386    1              3 * BIT (1) UNAL,
      123    10387    1            2 DCB_NUM UBIN (18) HALIGNED,
      124    10388    1            2 LOGICAL_NUM UBIN (18) HALIGNED,
      125    10389    1            2 NUM UBIN (18) HALIGNED, /* NODE # */
      126    10390    1            2 DEVICE_TYPE UBIN (18) HALIGNED,
      127    10391    1            2 BUS_ADDR UBIN (18) HALIGNED,
      128    10392    1            2 LINE_ID UBIN (12) CALIGNED,
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:91   
      129    10393    1            2 LINE REDEF LINE_ID,
      130    10394    1              3 T UBIN (6) UNAL, /* BCD 'T' */
      131    10395    1              3 NUM UBIN (6) UNAL,
      132    10396    1              3 * UBIN (6) UNAL,
      133    10397    1            2 EXEC_LINE_ID UBIN (12) CALIGNED,
      134    10398    1            2 EXEC_LINE REDEF EXEC_LINE_ID,
      135    10399    1              3 E UBIN (6) UNAL, /* BCD 'E' */
      136    10400    1              3 NUM UBIN (6) UNAL,
      137    10401    1              3 * UBIN (6) UNAL,
      138    10402    1            2 CONFIG_ID UBIN HALF HALIGNED,
      139    10403    1            2 CONFIG_ID_EXT UBIN (9) CALIGNED,
      140    10404    1            2 TEST_TYPE UBIN (18) HALIGNED, /* IDENTIFIES FEP HANDLER */
      141    10405    1            2 C_CALL$ PTR ALIGNED,
      142    10406    1            2 STATUS$ PTR ALIGNED,
      143    10407    1            2 ICM$ PTR ALIGNED,
      144    10408    1            2 RECEIVE_ICM$ PTR ALIGNED,
      145    10409    1            2 EVENT_ID UBIN HALF HALIGNED,
      146    10410    1            2 ICM_BYTE_CNT UBIN WORD;
      147    10411    1      DCL ICM_BUFFER (0:34) UBIN WORD BASED ALIGNED;
      148    10412    1      DCL 1 ICM BASED,
      149    10413    1            2 MSG_ID UBIN (9) CALIGNED,
      150    10414    1            2 MSG_SUBC UBIN (9) CALIGNED,
      151    10415    1            2 * UBIN (18) CALIGNED,
      152    10416    1            2 CKSM UBIN (18) HALIGNED,
      153    10417    1            2 L6NDX UBIN (9) CALIGNED,
      154    10418    1            2 WDCNT UBIN (9) CALIGNED,
      155    10419    1            2 CMD UBIN (9) CALIGNED,
      156    10420    1            2 REPLY UBIN (9) CALIGNED,
      157    10421    1            2 L6MBA UBIN (18) HALIGNED,
      158    10422    1            2 CONFIG_ID UBIN (18) HALIGNED,
      159    10423    1            2 ID REDEF CONFIG_ID,
      160    10424    1              3 UPPER UBIN (9) CALIGNED,
      161    10425    1              3 LOWER UBIN (9) CALIGNED,
      162    10426    1            2 CONFIG_ID_EXT UBIN (18) HALIGNED,
      163    10427    1            2 EXT_ID REDEF CONFIG_ID_EXT,
      164    10428    1              3 ID UBIN (9) UNAL,
      165    10429    1              3 * UBIN (9) UNAL,
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:92   
      166    10430    1            2 TEST_TYP UBIN (9) CALIGNED,
      167    10431    1            2 FLAGS UBIN (9) CALIGNED,
      168    10432    1            2 * UBIN (12) UNAL,
      169    10433    1            2 TYC UBIN (6) UNAL,
      170    10434    1            2 TEXT (0:122) UBIN WORD ALIGNED;
      171    10435    1      DCL 1 SLAVE_CONNECT STATIC ALIGNED,
      172    10436    1            2 PTR$ PTR ALIGNED,
      173    10437    1            2 STATUS HALIGNED,
      174    10438    1              3 * UBIN (17) UNAL,
      175    10439    1              3 PENDING BIT (1) UNAL;
      176    10440
      177    10441    1      DCL COLTS_DCBS (0:%LAST_FEP) STATIC SBIN WORD ALIGNED ;
      178    10442    1      DCL PHY_FEP_NUM (0:%LAST_FEP) STATIC SBIN (18) HALIGNED ;
      179    10443
      180    10444           %VLR_CONFIG (FPTN = CONFIG);
      181    10459           %FPT_CONFIG (FPTN = GET_CONFIG,
      182    10460                        RESULTS = CONFIG);
      183    10475           %FPT_OPEN (FPTN = OPEN_HNDLR_PATH,
      184    10476                       ORG = FPRG,
      185    10477                       ASN = DEVICE,
      186    10478                       FPRG = START_HNDLR,
      187    10479                       FUN = CREATE);
      188    10588           %VLP_FPRG (FPTN = START_HNDLR,ACCT = ':SYS');
      189    10609           %FPT_CLOSE (FPTN = CLOSE_HNDLR_PATH,
      190    10610                       DISP = RELEASE);
      191    10652           %FPT_WRITE (FPTN = WRITE_TO_FEP,
      192    10653                       BP = YES);
      193    10684           %FPT_READ (FPTN = READ_FROM_FEP);
      194    10723           %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:93   
      195    10724        /* External Variables */
      196    10725
      197    10726    1      DCL B$JIT$                PTR SYMREF ;
      198    10727    1      DCL B$TCB$                PTR SYMREF ;
      199    10728           %TOT$ECP (STCLASS = SYMREF);
      200    10777           %TOT$TOLTS (STCLASS = SYMREF);
      201    10798
      202    10799        /* External Entry Points */
      203    10800
      204    10801    1      DCL TOK$COURTESY_CALL ENTRY (1) ;
      205    10802    1      DCL TOX$ERROR         ENTRY (1) ;
      206    10803    1      DCL TOX$WARN          ENTRY (1);
      207    10804    1      DCL TOX$SCREECH       ENTRY (1) ;
      208    10805           %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:94   
      209    10806        /* Main Code */
      210    10807
      211    10808    1      IF MME.INST.NO > 0

  10808  3 000002   200003 470500                    LDP0    @MME,,AUTO
         3 000003   000000 220100                    LDX0    0,,PR0
         3 000004   000035 604400 3                  TMOZ    s:10816

      212    10809    1      THEN CALL TOC$MME_GEROUT (MME.WD_1,

  10809  3 000005   200004 236100                    LDQ     @MREG,,AUTO
         3 000006   000004 036003                    ADLQ    4,DU
         3 000007   200017 756100                    STQ     @MME_WD_6+1,,AUTO
         3 000010   200003 236100                    LDQ     @MME,,AUTO
         3 000011   000006 036003                    ADLQ    6,DU
         3 000012   200016 756100                    STQ     @MME_WD_5+1,,AUTO
         3 000013   200003 236100                    LDQ     @MME,,AUTO
         3 000014   000005 036003                    ADLQ    5,DU
         3 000015   200015 756100                    STQ     @MME_WD_4+1,,AUTO
         3 000016   200003 236100                    LDQ     @MME,,AUTO
         3 000017   000004 036003                    ADLQ    4,DU
         3 000020   200014 756100                    STQ     I+1,,AUTO
         3 000021   200003 236100                    LDQ     @MME,,AUTO
         3 000022   000003 036003                    ADLQ    3,DU
         3 000023   200013 756100                    STQ     @LOGICAL_FEP_NUM+1,,AUTO
         3 000024   200003 236100                    LDQ     @MME,,AUTO
         3 000025   000002 036003                    ADLQ    2,DU
         3 000026   200012 756100                    STQ     @NODE_ID+1,,AUTO
         3 000027   200003 236100                    LDQ     @MME,,AUTO
         3 000030   000001 036003                    ADLQ    1,DU
         3 000031   200011 756100                    STQ     @RETURN_DELTA+3,,AUTO
         3 000032   000351 701000 3                  TSX1    TOC$MME_GEROUT
         3 000033   000000 011000                    NOP     0
         3 000034   000074 710000 3                  TRA     s:10824

      213    10810    1                 MME.WD_2,
      214    10811    1                 MME.WD_3,
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:95   
      215    10812    1                 MME.WD_4,
      216    10813    1                 MME.WD_5,
      217    10814    1                 MME.WD_6,
      218    10815    1                 MREG.A);
      219    10816    2      ELSE DO CASE (-MME.INST.NO);

  10816  3 000035   000000 236100                    LDQ     0,,PR0
         3 000036   000022 732000                    QRS     18
         3 000037   000027 676000 xsym               ERQ     B_VECTNIL+23
         3 000040   000072 136007                    SBLQ    58,DL
         3 000041   000004 116007                    CMPQ    4,DL
         3 000042   000044 602006 3                  TNC     s:10816+7,QL
         3 000043   000074 710000 3                  TRA     s:10824
         3 000044   000056 710000 3                  TRA     s:10820
         3 000045   000074 710000 3                  TRA     s:10824
         3 000046   000064 710000 3                  TRA     s:10822
         3 000047   000050 710000 3                  TRA     s:10818

      220    10817    2              CASE (%COINIT) ;

      221    10818    2                 CALL TOC$MME_COINIT (MME.WD_1);

  10818  3 000050   200003 236100                    LDQ     @MME,,AUTO
         3 000051   000001 036003                    ADLQ    1,DU
         3 000052   200011 756100                    STQ     @RETURN_DELTA+3,,AUTO
         3 000053   000075 701000 3                  TSX1    TOC$MME_COINIT
         3 000054   000000 011000                    NOP     0
         3 000055   000074 710000 3                  TRA     s:10824

      222    10819    2              CASE (%FEPTYP) ;

      223    10820    2                 CALL TOC$MME_FEPTYP (MREG.X2);

  10820  3 000056   200004 236100                    LDQ     @MREG,,AUTO
         3 000057   000001 036003                    ADLQ    1,DU
         3 000060   200011 756100                    STQ     @RETURN_DELTA+3,,AUTO
         3 000061   000276 701000 3                  TSX1    TOC$MME_FEPTYP
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:96   
         3 000062   000000 011000                    NOP     0
         3 000063   000074 710000 3                  TRA     s:10824

      224    10821    2              CASE (%LOGFEP) ;

      225    10822    2                 CALL TOC$MME_LOGFEP (MME.WD_1, MME.WD_2);

  10822  3 000064   200003 236100                    LDQ     @MME,,AUTO
         3 000065   000002 036003                    ADLQ    2,DU
         3 000066   200012 756100                    STQ     @NODE_ID+1,,AUTO
         3 000067   200003 236100                    LDQ     @MME,,AUTO
         3 000070   000001 036003                    ADLQ    1,DU
         3 000071   200011 756100                    STQ     @RETURN_DELTA+3,,AUTO
         3 000072   004424 701000 3                  TSX1    TOC$MME_LOGFEP
         3 000073   000000 011000                    NOP     0

      226    10823    2           END /* ELSE CASE */ ;

      227    10824    1      RETURN ;

  10824  3 000074   000000 702200 xent               TSX2  ! X66_ARET

      228    10825
      229    10826        /* END TOC$COLTS */
      230    10827        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:97   
      231    10828        /*I*  NAME:        TOC$MME_COINIT
      232    10829              AUTHOR:      Curt Andes
      233    10830              PURPOSE:     MME_COINIT
      234    10831              INTERFACE:   INIT_FOR_COLTS_ONLY
      235    10832                           TOX$ERROR
      236    10833              PARAMETERS:  LIST_COUNT
      237    10834              DATA:        MME_INSTR$
      238    10835                           TOT$ECP.SUBEXEC.CURRENT
      239    10836                           PROCEDURE_ID.TTL
      240    10837                           B$JIT.TDP
      241    10838                           RETURN_DELTA
      242    10839              DESCRIPTION: This procedure does the basic initialization for Common Colts.
      243    10840                           (CCLT or Slave Mode Colts, SMC) This initialization includes
      244    10841                           setting up the FEP table, which controls what's happening
      245    10842                           in COLTS, and the servicing of function designators
      246    10843                           that are part of the MME list.
      247    10844
      248    10845                           * MME calling sequence
      249    10846                           MME        COINIT
      250    10847                           ZERO       # of designators,0
      251    10848                           ZERO       address #1,code #1     *designator #1
      252    10849                             .           .         .
      253    10850                             .           .         .
      254    10851                           ZERO       address #N,code #N     *designator #N
      255    10852                           <return>
      256    10853
      257    10854                           Valid designator function codes for CP-6 are:
      258    10855                             1 - Store .CRFIG image in specifies address
      259    10856                             2 - Store last subexec location in specified address
      260    10857                             5 - Save specified address, it points to CCLT wrapup rtn.
      261    10858                             7 - Store COLTS TTL date in specified address.
      262    10859                             10- Store CP-6 Operating System type code in given addr.
      263    10860                             11- Store .CRD30 image in specified address.
      264    10861                           Any other code will cause COLTS to abort.
      265    10862        */
      266    10863        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:98   
      267    10864    1   TOC$MME_COINIT: PROC (LIST_COUNT);

  10864  3 000075   200010 741300       TOC$MME_COI* STX1  ! @RETURN_DELTA+2,,AUTO

      268    10865
      269    10866        /* Variables */
      270    10867    2      DCL LIST_COUNT UBIN WORD ALIGNED;
      271    10868    2      DCL 1 LIST REDEF LIST_COUNT,
      272    10869    2            2 LENGTH UBIN HALF UNAL,
      273    10870    2            2 * UBIN HALF UNAL;
      274    10871    2      DCL DESIGNATOR_OFFSET UBIN HALF HALIGNED;
      275    10872    2      DCL TARGET UBIN WORD BASED ALIGNED;
      276    10873    2      DCL TARGET_HALF UBIN HALF BASED ALIGNED;
      277    10874
      278    10875    2      DCL TARGET_BIT BIT (36) BASED ALIGNED;
      279    10876
      280    10877    2      DCL DESP$ PTR ALIGNED;
      281    10878    2      DCL WPNTR$ PTR ALIGNED;
      282    10879
      283    10880    2      DCL 1 DESIGNATOR BASED ALIGNED,
      284    10881    2            2 AD UBIN HALF UNAL,
      285    10882    2            2 CODE UBIN HALF UNAL;
      286    10883    2      DCL 1 CRD30_IMAGE BASED ALIGNED,
      287    10884    2            2 FLG UBIN HALF UNAL,
      288    10885    2            2 FEPCNT UBIN (12) UNAL,
      289    10886    2            2 * UBIN (6) UNAL;
      290    10887           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:99   
      291    10888        /* Code */
      292    10889
      293    10890    2      CALL INIT_FOR_COLTS_ONLY;

  10890  3 000076   000220 701000 3                  TSX1    INIT_FOR_COLTS_ONLY
         3 000077   000000 011000                    NOP     0

      294    10891    3      DO DESIGNATOR_OFFSET = 1 TO LIST.LENGTH;

  10891  3 000100   000001 220003                    LDX0    1,DU
         3 000101   200012 740100                    STX0    DESIGNATOR_OFFSET,,AUTO
         3 000102   000207 710000 3                  TRA     s:10915+3

      295    10892    3         DESP$ = PINCRW (MME_INSTR$,DESIGNATOR_OFFSET+1);

  10892  3 000103   200005 470500                    LDP0    @MME_INSTR$,,AUTO
         3 000104   000000 471500                    LDP1    0,,PR0
         3 000105   200012 220100                    LDX0    DESIGNATOR_OFFSET,,AUTO
         3 000106   100001 633510                    EPPR3   1,X0,PR1
         3 000107   200013 453500                    STP3    DESP$,,AUTO

      296    10893    3         WPNTR$ = PINCRW (IS$,DESP$->DESIGNATOR.AD);

  10893  3 000110   300000 221100                    LDX1    0,,PR3
         3 000111   000000 636011                    EAQ     0,X1
         3 000112   000000 036000 2                  ADLQ    FPTN_
         3 000113   200014 756100                    STQ     WPNTR$,,AUTO

      297    10894    4         DO CASE (DESP$->DESIGNATOR.CODE);

  10894  3 000114   300000 722100                    LXL2    0,,PR3
         3 000115   000014 102003                    CMPX2   12,DU
         3 000116   000120 602012 3                  TNC     s:10894+4,X2
         3 000117   000174 710000 3                  TRA     s:10912
         3 000120   000174 710000 3                  TRA     s:10912
         3 000121   000134 710000 3                  TRA     s:10896
         3 000122   000137 710000 3                  TRA     s:10898
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:100  
         3 000123   000174 710000 3                  TRA     s:10912
         3 000124   000174 710000 3                  TRA     s:10912
         3 000125   000147 710000 3                  TRA     s:10900
         3 000126   000174 710000 3                  TRA     s:10912
         3 000127   000151 710000 3                  TRA     s:10902
         3 000130   000174 710000 3                  TRA     s:10912
         3 000131   000174 710000 3                  TRA     s:10912
         3 000132   000160 710000 3                  TRA     s:10904
         3 000133   000164 710000 3                  TRA     s:10906

      298    10895    4            CASE (%PASS_CRFIG);

      299    10896    4               WPNTR$->TARGET = 0;

  10896  3 000134   200014 474500                    LDP4    WPNTR$,,AUTO
         3 000135   400000 450100                    STZ     0,,PR4
         3 000136   000204 710000 3                  TRA     s:10915

      300    10897    4            CASE (%PASS_HI_ADDRESS);

      301    10898    4               WPNTR$->TARGET_HALF = (B$JIT.TDP-64)*1024;

  10898  3 000137   000000 474400 xsym               LDP4    B$JIT$
         3 000140   400204 236100                    LDQ     132,,PR4
         3 000141   000010 772000                    QRL     8
         3 000142   000000 376000 4                  ANQ     0
         3 000143   600000 623006                    EAX3    -65536,QL
         3 000144   200014 475500                    LDP5    WPNTR$,,AUTO
         3 000145   500000 743100                    STX3    0,,PR5
         3 000146   000204 710000 3                  TRA     s:10915

      302    10899    4            CASE (%READ_WRAPUP_ADDRESS);

      303    10900    4               TOT$ECP.SUBEXEC.WRAPUP$ = WPNTR$;

  10900  3 000147   000013 756000 xsym               STQ     TOT$ECP+11
         3 000150   000204 710000 3                  TRA     s:10915
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:101  

      304    10901    4            CASE (%PASS_TTL_DATE);

      305    10902    4               WPNTR$->TARGET_BIT = TOT$TOLTS.LINK_DATE.BCD ;

  10902  3 000151   000001 235000 xsym               LDA     TOT$TOLTS+1
         3 000152   000002 236000 xsym               LDQ     TOT$TOLTS+2
         3 000153   000022 773000                    LRL     18
         3 000154   000027 376000 xsym               ANQ     B_VECTNIL+23
         3 000155   200014 474500                    LDP4    WPNTR$,,AUTO
         3 000156   400000 756100                    STQ     0,,PR4
         3 000157   000204 710000 3                  TRA     s:10915

      306    10903    4            CASE (%PASS_OS_CODE);

      307    10904    4               WPNTR$->TARGET = 1;

  10904  3 000160   000001 235007                    LDA     1,DL
         3 000161   200014 474500                    LDP4    WPNTR$,,AUTO
         3 000162   400000 755100                    STA     0,,PR4
         3 000163   000204 710000 3                  TRA     s:10915

      308    10905    4            CASE (%PASS_CRD30);

      309    10906    4               IF DESP$->DESIGNATOR.AD ~= 0

  10906  3 000164   000000 101003                    CMPX1   0,DU
         3 000165   000204 600000 3                  TZE     s:10915

      310    10907    5               THEN DO;

      311    10908    5                       WPNTR$->CRD30_IMAGE.FEPCNT = 8;

  10908  3 000166   200014 474500                    LDP4    WPNTR$,,AUTO
         3 000167   001000 236007                    LDQ     512,DL
         3 000170   400000 752106                    STCQ    0,'06'O,PR4

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:102  
      312    10909    5                       WPNTR$->CRD30_IMAGE.FLG = 1;

  10909  3 000171   000001 221003                    LDX1    1,DU
         3 000172   400000 741100                    STX1    0,,PR4

      313    10910    5                    END;

  10910  3 000173   000204 710000 3                  TRA     s:10915

      314    10911    4            CASE (ELSE);

      315    10912    4               TOC_ERROR_CODE.ERR# = %E$BADCOINIT;

  10912  3 000174   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 000175   000001 376000 4                  ANQ     1
         3 000176   000100 276007                    ORQ     64,DL
         3 000177   000000 756000 1                  STQ     TOC_ERROR_CODE

      316    10913    4               CALL TOX$ERROR (TOC_ERROR_CODE);

  10913  3 000200   000002 630400 4                  EPPR0   2
         3 000201   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000202   000000 701000 xent               TSX1    TOX$ERROR
         3 000203   000000 011000                    NOP     0

      317    10914    4         END;

      318    10915    3      END /* ITERATIVE DO */;

  10915  3 000204   200012 220100                    LDX0    DESIGNATOR_OFFSET,,AUTO
         3 000205   000001 621010                    EAX1    1,X0
         3 000206   200012 741100                    STX1    DESIGNATOR_OFFSET,,AUTO
         3 000207   200011 470500                    LDP0    @LIST_COUNT,,AUTO
         3 000210   000000 220100                    LDX0    0,,PR0
         3 000211   200012 100100                    CMPX0   DESIGNATOR_OFFSET,,AUTO
         3 000212   000103 603000 3                  TRC     s:10892

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:103  
      319    10916    2      RETURN_DELTA = LIST.LENGTH + 2;

  10916  3 000213   000002 621010                    EAX1    2,X0
         3 000214   200006 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 000215   100000 741100                    STX1    0,,PR1

      320    10917    2      RETURN /* END TOC$MME_COINIT */;

  10917  3 000216   200010 221300                    LDX1  ! @RETURN_DELTA+2,,AUTO
         3 000217   000001 702211                    TSX2  ! 1,X1

      321    10918
      322    10919        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:104  
      323    10920        /*I*  NAME:        INIT_FOR_COLTS_ONLY
      324    10921              AUTHOR:      Curt Andes
      325    10922              PURPOSE:     Initilize the COLTS FEP test control table.
      326    10923              INTERFACE:   None called.
      327    10924              PARAMETERS:  none
      328    10925              DATA:        SLAVE_CONNECT
      329    10926                           FEP
      330    10927              DESCRIPTION: This procedure initializes SLAVE_CONNECT and FEP to '0'.
      331    10928                           It then puts into the FEP table all of the exec line IDs
      332    10929                           (E0-E7, in BCD), the test line IDs (T0-T7, in BCD).
      333    10930        */
      334    10931    2   INIT_FOR_COLTS_ONLY: PROC;

  10931  3 000220   200016 741300       INIT_FOR_CO* STX1  ! @MME_WD_5+1,,AUTO

      335    10932
      336    10933    3      DCL I UBIN WORD ALIGNED;
      337    10934
      338    10935        /* Code */
      339    10936
      340    10937    3      IF TOT$ECP.SUBEXEC.CURRENT = %COLTS

  10937  3 000221   000007 235000 xsym               LDA     TOT$ECP+7
         3 000222   000010 115007                    CMPA    8,DL
         3 000223   000274 601000 3                  TNZ     s:10952

      341    10938    4      THEN DO;

      342    10939    4              SLAVE_CONNECT = '0'B;

  10939  3 000224   000141 450000 1                  STZ     SLAVE_CONNECT
         3 000225   000142 450000 1                  STZ     SLAVE_CONNECT+1

      343    10940    4              FEP = '0'B;

  10940  3 000226   000000 100400                    MLR     fill='000'O
         3 000227   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:105  
         3 000230   000001 000600 1                  ADSC9   FEP                      cn=0,n=384

      344    10941    5              DO I = 0 TO %LAST_FEP ;

  10941  3 000231   200017 450100                    STZ     I,,AUTO

      345    10942    5                 FEP.LINE.T(I) = 51; /* =48 OCTAL, = 'T' IN BCD */

  10942  3 000232   200017 236100                    LDQ     I,,AUTO
         3 000233   000014 402007                    MPY     12,DL
         3 000234   000000 620006                    EAX0    0,QL
         3 000235   000004 236006 1                  LDQ     FEP+3,QL
         3 000236   000003 376000 4                  ANQ     3
         3 000237   630000 276003                    ORQ     -53248,DU
         3 000240   000004 756010 1                  STQ     FEP+3,X0

      346    10943    5                 FEP.LINE.NUM(I) = I;

  10943  3 000241   200017 236100                    LDQ     I,,AUTO
         3 000242   000030 736000                    QLS     24
         3 000243   000004 676010 1                  ERQ     FEP+3,X0
         3 000244   007700 376003                    ANQ     4032,DU
         3 000245   000004 656010 1                  ERSQ    FEP+3,X0

      347    10944    5                 FEP.EXEC_LINE.E(I) = 21; /* =25 OCTAL, = 'E' IN BCD */

  10944  3 000246   000004 236010 1                  LDQ     FEP+3,X0
         3 000247   000004 376000 4                  ANQ     4
         3 000250   250000 276007                    ORQ     86016,DL
         3 000251   000004 756010 1                  STQ     FEP+3,X0

      348    10945    5                 FEP.EXEC_LINE.NUM(I) = I;

  10945  3 000252   200017 236100                    LDQ     I,,AUTO
         3 000253   000006 736000                    QLS     6
         3 000254   000004 676010 1                  ERQ     FEP+3,X0
         3 000255   007700 376007                    ANQ     4032,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:106  
         3 000256   000004 656010 1                  ERSQ    FEP+3,X0

      349    10946    5                 COLTS_DCBS (I) = %UNDEFINED ;

  10946  3 000257   000001 335007                    LCA     1,DL
         3 000260   200017 721100                    LXL1    I,,AUTO
         3 000261   000143 755011 1                  STA     COLTS_DCBS,X1

      350    10947    5                 PHY_FEP_NUM (I) = %UNDEFINED ;

  10947  3 000262   200017 236100                    LDQ     I,,AUTO
         3 000263   000001 736000                    QLS     1
         3 000264   000006 101400                    MRL     fill='000'O
         3 000265   000027 000004 xsym               ADSC9   B_VECTNIL+23             cn=0,n=4
         3 000266   000153 000002 1                  ADSC9   PHY_FEP_NUM,Q            cn=0,n=2

      351    10948    5              END;

  10948  3 000267   200017 235100                    LDA     I,,AUTO
         3 000270   000001 035007                    ADLA    1,DL
         3 000271   200017 755100                    STA     I,,AUTO
         3 000272   000010 115007                    CMPA    8,DL
         3 000273   000232 602000 3                  TNC     s:10942

      352    10949    4           END;

      353    10950    3      ELSE;
      354    10951
      355    10952    3      RETURN;

  10952  3 000274   200016 221300                    LDX1  ! @MME_WD_5+1,,AUTO
         3 000275   000001 702211                    TSX2  ! 1,X1

      356    10953        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:107  
      357    10954    3   END INIT_FOR_COLTS_ONLY;
      358    10955    2   END TOC$MME_COINIT ;
      359    10956        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:108  
      360    10957        /*I*  NAME:        TOC$MME_FEPTYP
      361    10958              AUTHOR:      Curt Andes
      362    10959              PURPOSE:     FEPTYP
      363    10960              INTERFACE:   None called.
      364    10961              PARAMETERS:  X2 - input
      365    10962              DATA:        RETURN_DELTA
      366    10963                           FEP.LOGICAL_NUM
      367    10964              DESCRIPTION: This procedure verifies that the logical fep# passed as
      368    10965                           MREG.X2 is within range, and that a physical fep# has been
      369    10966                           assigned this logical number.  If PHY_FEP_NUM (log#) is
      370    10967                           undefined, then X2 will be set to undefined.  Otherwise,
      371    10968                           the type code for an L6 FEP is returned in X2.
      372    10969                           * MME calling sequence
      373    10970                           MME        FEPTYP
      374    10971                           <return>
      375    10972
      376    10973                           Valid returned data is:
      377    10974                             1 = 18X
      378    10975                             2 = 355
      379    10976                             4 = CP-6 L6
      380    10977                            -1 = no such logical FEP
      381    10978                           This procedure always returns 4 if the logical FEP exists.
      382    10979        */
      383    10980        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:109  
      384    10981    1   TOC$MME_FEPTYP: PROC (X2);

  10981  3 000276   200010 741300       TOC$MME_FEP* STX1  ! @RETURN_DELTA+2,,AUTO

      385    10982
      386    10983        /* Variables */
      387    10984
      388    10985    2      DCL X2 SBIN HALF HALIGNED;
      389    10986
      390    10987        /* Code */
      391    10988
      392    10989    2      RETURN_DELTA = 1;

  10989  3 000277   000001 220003                    LDX0    1,DU
         3 000300   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000301   000000 740100                    STX0    0,,PR0

      393    10990    2      IF (X2 <= %LAST_FEP) & (PHY_FEP_NUM (X2) ~= %UNDEFINED)

  10990  3 000302   400000 221003                    LDX1    -131072,DU
         3 000303   200011 471500                    LDP1    @X2,,AUTO
         3 000304   000100 100500                    MLR     fill='000'O
         3 000305   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000306   200062 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         3 000307   200062 236100                    LDQ     I+2,,AUTO
         3 000310   000022 732000                    QRS     18
         3 000311   000007 116007                    CMPQ    7,DL
         3 000312   000314 604400 3                  TMOZ    s:10990+10
         3 000313   000000 221003                    LDX1    0,DU
         3 000314   000100 100500                    MLR     fill='000'O
         3 000315   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000316   200063 000004                    ADSC9   I+3,,AUTO                cn=0,n=4
         3 000317   200063 236100                    LDQ     I+3,,AUTO
         3 000320   000022 732000                    QRS     18
         3 000321   400000 222003                    LDX2    -131072,DU
         3 000322   000001 736000                    QLS     1
         3 000323   000100 100406                    MLR     fill='000'O
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:110  
         3 000324   000153 000002 1                  ADSC9   PHY_FEP_NUM,Q            cn=0,n=2
         3 000325   200064 000004                    ADSC9   I+4,,AUTO                cn=0,n=4
         3 000326   200064 236100                    LDQ     I+4,,AUTO
         3 000327   000022 732000                    QRS     18
         3 000330   000027 116000 xsym               CMPQ    B_VECTNIL+23
         3 000331   000333 601000 3                  TNZ     s:10990+25
         3 000332   000000 222003                    LDX2    0,DU
         3 000333   000000 636012                    EAQ     0,X2
         3 000334   200065 756100                    STQ     I+5,,AUTO
         3 000335   000000 636011                    EAQ     0,X1
         3 000336   200065 376100                    ANQ     I+5,,AUTO
         3 000337   000344 600000 3                  TZE     s:10992

      394    10991    2      THEN X2 = 4 ;

  10991  3 000340   000100 101400                    MRL     fill='000'O
         3 000341   000006 000004 xsym               ADSC9   B_VECTNIL+6              cn=0,n=4
         3 000342   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000343   000347 710000 3                  TRA     s:10993

      395    10992    2      ELSE X2 = %UNDEFINED ;

  10992  3 000344   000100 101400                    MRL     fill='000'O
         3 000345   000027 000004 xsym               ADSC9   B_VECTNIL+23             cn=0,n=4
         3 000346   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      396    10993    2      RETURN ;

  10993  3 000347   200010 221300                    LDX1  ! @RETURN_DELTA+2,,AUTO
         3 000350   000001 702211                    TSX2  ! 1,X1

      397    10994
      398    10995    2   END TOC$MME_FEPTYP ;
      399    10996        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:111  
      400    10997        /*I*  NAME:        TOC$MME_GEROUT
      401    10998              AUTHOR:      Curt Andes
      402    10999              PURPOSE:     GEROUT
      403    11000              INTERFACE:   GEROUT_ICM
      404    11001                           GEROUT_REMOTE_INQUIRY
      405    11002                           GEROUT_TERMINAL_TYPE_REQUEST
      406    11003                           GEROUT_COLTS_WAKEUP
      407    11004                           GEROUT_DISCONNECT
      408    11005                           GEROUT_STATUS_REQUEST
      409    11006                           TOX$ERROR
      410    11007              PARAMETERS:  MME WORD 1 (GEROUT TYPE WORD)
      411    11008                           MME.WD_2
      412    11009                           MME.WD_3
      413    11010                           MME.WD_4
      414    11011                           MME.WD_5
      415    11012                           MME.WD_6
      416    11013                           MREG.A
      417    11014              DATA:        MME_INSTR$
      418    11015                           TOC_ERROR_CODE
      419    11016              DESCRIPTION: This procedure handles the various MME GEROUT types.
      420    11017                           This procedure also plays around with the MME words that
      421    11018                           follow the actual MME. For that reason, the last thing this
      422    11019                           procedure does before it exits, is alter the contents of the
      423    11020                           structure that is used to restore the MME words, to make
      424    11021                           them reflect any changes we may have made.
      425    11022
      426    11023                           * MME calling sequence
      427    11024                           MME        GEROUT
      428    11025                           VFD        18/record pointer,6/x,12/line id
      429    11026                           ZERO       status store addr,courtesy call addr
      430    11027                           <return>
      431    11028
      432    11029                           Where:
      433    11030                             record pointer - is the address of the ICM associated with
      434    11031                                   with this GEROUT (if any)
      435    11032                             x - is the GEROUT type. Valid GEROUT types are:
      436    11033                                   4 - Write/read an ICM
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:112  
      437    11034                                   5 - Remote inquiry
      438    11035                                   6 - Terminal type request
      439    11036                                   7 - COLTS Wakeup
      440    11037                                  15 - Disconnect test or exec line
      441    11038                                  16 - Status request
      442    11039                             line id - Is the exec or test line id for this GEROUT
      443    11040
      444    11041        */
      445    11042
      446    11043    1   TOC$MME_GEROUT: PROC (GEROUT_TYPE_WORD,

  11043  3 000351   200010 741300       TOC$MME_GER* STX1  ! @RETURN_DELTA+2,,AUTO

      447    11044    1              MME_WD_2,
      448    11045    1              MME_WD_3,
      449    11046    1              MME_WD_4,
      450    11047    1              MME_WD_5,
      451    11048    1              MME_WD_6,
      452    11049    1              MREG_A);
      453    11050
      454    11051        /* Variables */
      455    11052    2      DCL GEROUT_TYPE_WORD UBIN WORD ALIGNED;
      456    11053    2      DCL 1 GEROUT_TYPE REDEF GEROUT_TYPE_WORD,
      457    11054    2            2 * UBIN HALF UNAL,
      458    11055    2            2 CODE UBIN (6) UNAL,
      459    11056    2            2 * UBIN (12) UNAL;
      460    11057    2      DCL MME_WD_2 UBIN WORD ALIGNED;
      461    11058    2      DCL MME_WD_3 UBIN WORD ALIGNED;
      462    11059    2      DCL MME_WD_4 UBIN WORD ALIGNED;
      463    11060    2      DCL MME_WD_5 UBIN WORD ALIGNED;
      464    11061    2      DCL MME_WD_6 UBIN WORD ALIGNED;
      465    11062    2      DCL MREG_A UBIN WORD ALIGNED;
      466    11063    2      DCL GEROUT_WORD UBIN WORD BASED ALIGNED;
      467    11064    2      DCL RESTORE$ PTR ALIGNED;
      468    11065        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:113  
      469    11066        /* Code */
      470    11067
      471    11068    3      DO CASE (GEROUT_TYPE.CODE);

  11068  3 000352   200011 470500                    LDP0    @GEROUT_TYPE_WORD,,AUTO
         3 000353   000000 236100                    LDQ     0,,PR0
         3 000354   000014 772000                    QRL     12
         3 000355   000077 376007                    ANQ     63,DL
         3 000356   000004 136007                    SBLQ    4,DL
         3 000357   000015 116007                    CMPQ    13,DL
         3 000360   000362 602006 3                  TNC     s:11068+8,QL
         3 000361   000442 710000 3                  TRA     s:11082
         3 000362   000377 710000 3                  TRA     s:11070
         3 000363   000406 710000 3                  TRA     s:11072
         3 000364   000411 710000 3                  TRA     s:11074
         3 000365   000416 710000 3                  TRA     s:11076
         3 000366   000442 710000 3                  TRA     s:11082
         3 000367   000442 710000 3                  TRA     s:11082
         3 000370   000442 710000 3                  TRA     s:11082
         3 000371   000442 710000 3                  TRA     s:11082
         3 000372   000442 710000 3                  TRA     s:11082
         3 000373   000442 710000 3                  TRA     s:11082
         3 000374   000442 710000 3                  TRA     s:11082
         3 000375   000423 710000 3                  TRA     s:11078
         3 000376   000433 710000 3                  TRA     s:11080

      472    11069    3         CASE(4); /* GEROUT ICM */

      473    11070    3            CALL GEROUT_ICM (GEROUT_TYPE_WORD,MME_WD_2);

  11070  3 000377   200012 236100                    LDQ     @MME_WD_2,,AUTO
         3 000400   200024 756100                    STQ     @DATA_WORD+1,,AUTO
         3 000401   200011 236100                    LDQ     @GEROUT_TYPE_WORD,,AUTO
         3 000402   200023 756100                    STQ     RESTORE$+3,,AUTO
         3 000403   000506 701000 3                  TSX1    GEROUT_ICM
         3 000404   000000 011000                    NOP     0
         3 000405   000452 710000 3                  TRA     s:11085
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:114  

      474    11071    3         CASE(5); /* GEROUT REMOTE INQUIRY */

      475    11072    3            CALL GEROUT_REMOTE_INQUIRY;

  11072  3 000406   002317 701000 3                  TSX1    GEROUT_REMOTE_INQUIRY
         3 000407   000000 011000                    NOP     0
         3 000410   000452 710000 3                  TRA     s:11085

      476    11073    3         CASE(6); /* GEROUT TERMINAL TYPE REQUEST */

      477    11074    3            CALL GEROUT_TERMINAL_TYPE_REQUEST (GEROUT_TYPE_WORD);

  11074  3 000411   200011 236100                    LDQ     @GEROUT_TYPE_WORD,,AUTO
         3 000412   200023 756100                    STQ     RESTORE$+3,,AUTO
         3 000413   002402 701000 3                  TSX1    GEROUT_TERMINAL_TYPE_REQUEST
         3 000414   000000 011000                    NOP     0
         3 000415   000452 710000 3                  TRA     s:11085

      478    11075    3         CASE(7); /* COLTS WAKEUP */

      479    11076    3            CALL GEROUT_COLTS_WAKEUP (GEROUT_TYPE_WORD);

  11076  3 000416   200011 236100                    LDQ     @GEROUT_TYPE_WORD,,AUTO
         3 000417   200023 756100                    STQ     RESTORE$+3,,AUTO
         3 000420   002522 701000 3                  TSX1    GEROUT_COLTS_WAKEUP
         3 000421   000000 011000                    NOP     0
         3 000422   000452 710000 3                  TRA     s:11085

      480    11077    3         CASE(15); /* DISCONNECT */

      481    11078    3            CALL GEROUT_DISCONNECT (GEROUT_TYPE_WORD,MME_WD_2,MREG_A);

  11078  3 000423   200017 236100                    LDQ     @MREG_A,,AUTO
         3 000424   200012 235100                    LDA     @MME_WD_2,,AUTO
         3 000425   200024 757100                    STAQ    @DATA_WORD+1,,AUTO
         3 000426   200011 236100                    LDQ     @GEROUT_TYPE_WORD,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:115  
         3 000427   200023 756100                    STQ     RESTORE$+3,,AUTO
         3 000430   002623 701000 3                  TSX1    GEROUT_DISCONNECT
         3 000431   000000 011000                    NOP     0
         3 000432   000452 710000 3                  TRA     s:11085

      482    11079    3         CASE(16); /* STATUS REQUEST */

      483    11080    3            CALL GEROUT_STATUS_REQUEST (GEROUT_TYPE_WORD,MME_WD_2);

  11080  3 000433   200012 236100                    LDQ     @MME_WD_2,,AUTO
         3 000434   200024 756100                    STQ     @DATA_WORD+1,,AUTO
         3 000435   200011 236100                    LDQ     @GEROUT_TYPE_WORD,,AUTO
         3 000436   200023 756100                    STQ     RESTORE$+3,,AUTO
         3 000437   003217 701000 3                  TSX1    GEROUT_STATUS_REQUEST
         3 000440   000000 011000                    NOP     0
         3 000441   000452 710000 3                  TRA     s:11085

      484    11081    3         CASE(ELSE);

      485    11082    3            TOC_ERROR_CODE.ERR# = %E$BADGROUTTYP;

  11082  3 000442   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 000443   000001 376000 4                  ANQ     1
         3 000444   000150 276007                    ORQ     104,DL
         3 000445   000000 756000 1                  STQ     TOC_ERROR_CODE

      486    11083    3            CALL TOX$ERROR (TOC_ERROR_CODE);

  11083  3 000446   000002 630400 4                  EPPR0   2
         3 000447   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000450   000000 701000 xent               TSX1    TOX$ERROR
         3 000451   000000 011000                    NOP     0

      487    11084    3      END; /* CASE */

      488    11085    2      RESTORE$ = PINCRW (MME_INSTR$,3);

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:116  
  11085  3 000452   200005 470500                    LDP0    @MME_INSTR$,,AUTO
         3 000453   000000 236100                    LDQ     0,,PR0
         3 000454   000003 036003                    ADLQ    3,DU
         3 000455   200020 756100                    STQ     RESTORE$,,AUTO

      489    11086    2      MME_WD_3 = RESTORE$->GEROUT_WORD;

  11086  3 000456   200020 471500                    LDP1    RESTORE$,,AUTO
         3 000457   200013 473500                    LDP3    @MME_WD_3,,AUTO
         3 000460   100000 235100                    LDA     0,,PR1
         3 000461   300000 755100                    STA     0,,PR3

      490    11087    2      RESTORE$ = PINCRW (RESTORE$,1);

  11087  3 000462   000001 036003                    ADLQ    1,DU
         3 000463   200020 756100                    STQ     RESTORE$,,AUTO

      491    11088    2      MME_WD_4 = RESTORE$->GEROUT_WORD;

  11088  3 000464   200020 471500                    LDP1    RESTORE$,,AUTO
         3 000465   200014 474500                    LDP4    @MME_WD_4,,AUTO
         3 000466   100000 235100                    LDA     0,,PR1
         3 000467   400000 755100                    STA     0,,PR4

      492    11089    2      RESTORE$ = PINCRW (RESTORE$,1);

  11089  3 000470   000001 036003                    ADLQ    1,DU
         3 000471   200020 756100                    STQ     RESTORE$,,AUTO

      493    11090    2      MME_WD_5 = RESTORE$->GEROUT_WORD;

  11090  3 000472   200020 471500                    LDP1    RESTORE$,,AUTO
         3 000473   200015 475500                    LDP5    @MME_WD_5,,AUTO
         3 000474   100000 235100                    LDA     0,,PR1
         3 000475   500000 755100                    STA     0,,PR5

      494    11091    2      RESTORE$ = PINCRW (RESTORE$,1);
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:117  

  11091  3 000476   000001 036003                    ADLQ    1,DU
         3 000477   200020 756100                    STQ     RESTORE$,,AUTO

      495    11092    2      MME_WD_6 = RESTORE$->GEROUT_WORD;

  11092  3 000500   200020 471500                    LDP1    RESTORE$,,AUTO
         3 000501   200016 476500                    LDP6    @MME_WD_6,,AUTO
         3 000502   100000 235100                    LDA     0,,PR1
         3 000503   600000 755100                    STA     0,,PR6

      496    11093    2      RETURN ;

  11093  3 000504   200010 221300                    LDX1  ! @RETURN_DELTA+2,,AUTO
         3 000505   000001 702211                    TSX2  ! 1,X1

      497    11094
      498    11095    2   END TOC$MME_GEROUT;
      499    11096        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:118  
      500    11097        /*I* NAME:         GEROUT_ICM
      501    11098             AUTHOR:       Curt Andes
      502    11099             PURPOSE:      Write then read ICMs to the FEP
      503    11100             INTERFACE:    TOX$ERROR
      504    11101                           CHECK_CMD_AND_TEST_NUM
      505    11102                           SET_POINTERS
      506    11103                           BUILD_CONFIG_ICM
      507    11104                           SETUP_TEST_CONNECT
      508    11105                           GEROUT_WRITE
      509    11106                           GEROUT_READ
      510    11107                           RETURN_GEROUT_STATUS
      511    11108             PARAMETERS:   MME word 1 (ICM ptr, GEROUT type, line id)
      512    11109                           MME word 2 (status & courtesy call ptrs)
      513    11110             DATA:         TOC_ERROR_CODE
      514    11111                           RETURN_DELTA
      515    11112                           FEP
      516    11113             DESCRIPTION:  This procedure sets up the pointers associated
      517    11114                           with  doing  ICMs  then  makes the appropriate
      518    11115                           calls to  have the I/O performed.  The line id
      519    11116                           is  validated before the  I/O is attempted.
      520    11117        */
      521    11118        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:119  
      522    11119    1   GEROUT_ICM: PROC (DATA_WORD,POINTER_WORD);

  11119  3 000506   200022 741300       GEROUT_ICM   STX1  ! RESTORE$+2,,AUTO

      523    11120
      524    11121        /* Variables */
      525    11122    2      DCL DATA_WORD UBIN WORD ALIGNED;
      526    11123    2      DCL 1 DATAWD REDEF DATA_WORD,
      527    11124    2            2 RECP UBIN HALF UNAL,
      528    11125    2            2 TP UBIN (6) UNAL,
      529    11126    2            2 LNID UBIN (12) UNAL;
      530    11127    2      DCL POINTER_WORD UBIN WORD ALIGNED;
      531    11128    2      DCL 1 PTRWD REDEF POINTER_WORD,
      532    11129    2            2 ST UBIN HALF UNAL,
      533    11130    2            2 CC UBIN HALF UNAL;
      534    11131    2      DCL I UBIN WORD ALIGNED;
      535    11132    2      DCL 1 HEADER_REC BASED ALIGNED,
      536    11133    2            2 WORD_COUNT UBIN HALF UNAL,
      537    11134    2            2 BUF_AD UBIN HALF UNAL;
      538    11135    2      DCL REC$ PTR ALIGNED;
      539    11136    2      DCL 1 RECORD BASED ALIGNED,
      540    11137    2            2 WORD_COUNT UBIN HALF UNAL,
      541    11138    2            2 RCVP UBIN HALF UNAL;
      542    11139    2      DCL ICM$ PTR ALIGNED ;
      543    11140    2      DCL CMD UBIN (9) CALIGNED ;
      544    11141
      545    11142        /* Code */
      546    11143
      547    11144    2      RETURN_DELTA = 3;

  11144  3 000507   000003 220003                    LDX0    3,DU
         3 000510   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000511   000000 740100                    STX0    0,,PR0

      548    11145    2      I = 0;

  11145  3 000512   200025 450100                    STZ     I,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:120  

      549    11146    3      DO WHILE ((FEP.LINE_ID(I) ~= DATAWD.LNID) &

  11146  3 000513   000517 710000 3                  TRA     s:11150

      550    11147    3              (FEP.EXEC_LINE_ID(I) ~= DATAWD.LNID) &
      551    11148    3              (I <= %LAST_FEP));
      552    11149    3         I = I+1;

  11149  3 000514   200025 235100                    LDA     I,,AUTO
         3 000515   000001 035007                    ADLA    1,DL
         3 000516   200025 755100                    STA     I,,AUTO

      553    11150    3      END;

  11150  3 000517   400000 220003                    LDX0    -131072,DU
         3 000520   200023 470500                    LDP0    @DATA_WORD,,AUTO
         3 000521   000000 236100                    LDQ     0,,PR0
         3 000522   007777 376007                    ANQ     4095,DL
         3 000523   200062 756100                    STQ     I+2,,AUTO
         3 000524   200025 236100                    LDQ     I,,AUTO
         3 000525   000014 402007                    MPY     12,DL
         3 000526   000004 236006 1                  LDQ     FEP+3,QL
         3 000527   000030 772000                    QRL     24
         3 000530   200062 116100                    CMPQ    I+2,,AUTO
         3 000531   000533 601000 3                  TNZ     s:11150+12
         3 000532   000000 220003                    LDX0    0,DU
         3 000533   400000 221003                    LDX1    -131072,DU
         3 000534   000000 236100                    LDQ     0,,PR0
         3 000535   007777 376007                    ANQ     4095,DL
         3 000536   200063 756100                    STQ     I+3,,AUTO
         3 000537   200025 236100                    LDQ     I,,AUTO
         3 000540   000014 402007                    MPY     12,DL
         3 000541   000004 236006 1                  LDQ     FEP+3,QL
         3 000542   000006 772000                    QRL     6
         3 000543   007777 376007                    ANQ     4095,DL
         3 000544   200063 116100                    CMPQ    I+3,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:121  
         3 000545   000547 601000 3                  TNZ     s:11150+24
         3 000546   000000 221003                    LDX1    0,DU
         3 000547   000000 636011                    EAQ     0,X1
         3 000550   200064 756100                    STQ     I+4,,AUTO
         3 000551   000000 636010                    EAQ     0,X0
         3 000552   200064 376100                    ANQ     I+4,,AUTO
         3 000553   400000 220003                    LDX0    -131072,DU
         3 000554   200025 235100                    LDA     I,,AUTO
         3 000555   000010 115007                    CMPA    8,DL
         3 000556   000560 602000 3                  TNC     s:11150+33
         3 000557   000000 220003                    LDX0    0,DU
         3 000560   200065 756100                    STQ     I+5,,AUTO
         3 000561   000000 636010                    EAQ     0,X0
         3 000562   200066 756100                    STQ     I+6,,AUTO
         3 000563   200065 236100                    LDQ     I+5,,AUTO
         3 000564   200066 376100                    ANQ     I+6,,AUTO
         3 000565   000514 601000 3                  TNZ     s:11149

      554    11151        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:122  
      555    11152    3      DO CASE (I);

  11152  3 000566   000010 135007                    SBLA    8,DL
         3 000567   000001 115007                    CMPA    1,DL
         3 000570   000572 602005 3                  TNC     s:11152+4,AL
         3 000571   000604 710000 3                  TRA     s:11157
         3 000572   000573 710000 3                  TRA     s:11154

      556    11153    3         CASE (8); /* INVALID LINE ID RECEIVED */

      557    11154    3            TOC_ERROR_CODE.ERR# = %E$BADLNID;

  11154  3 000573   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 000574   000001 376000 4                  ANQ     1
         3 000575   000120 276007                    ORQ     80,DL
         3 000576   000000 756000 1                  STQ     TOC_ERROR_CODE

      558    11155    3            CALL TOX$ERROR (TOC_ERROR_CODE);

  11155  3 000577   000002 630400 4                  EPPR0   2
         3 000600   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000601   000000 701000 xent               TSX1    TOX$ERROR
         3 000602   000000 011000                    NOP     0
         3 000603   000707 710000 3                  TRA     s:11182

      559    11156    3         CASE (ELSE);

      560    11157    3            REC$ = PINCRW (IS$,DATAWD.RECP);

  11157  3 000604   000000 220100                    LDX0    0,,PR0
         3 000605   000000 636010                    EAQ     0,X0
         3 000606   000000 036000 2                  ADLQ    FPTN_
         3 000607   200026 756100                    STQ     REC$,,AUTO

      561    11158    3            IF REC$->RECORD.RCVP = 0

  11158  3 000610   200026 471500                    LDP1    REC$,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:123  
         3 000611   100000 721100                    LXL1    0,,PR1
         3 000612   000624 601000 3                  TNZ     s:11164

      562    11159    4            THEN DO;

      563    11160    4                    TOC_ERROR_CODE.ERR# = %E$BADRCVP;

  11160  3 000613   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 000614   000001 376000 4                  ANQ     1
         3 000615   000050 276007                    ORQ     40,DL
         3 000616   000000 756000 1                  STQ     TOC_ERROR_CODE

      564    11161    4                    CALL TOX$ERROR (TOC_ERROR_CODE);

  11161  3 000617   000002 630400 4                  EPPR0   2
         3 000620   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000621   000000 701000 xent               TSX1    TOX$ERROR
         3 000622   000000 011000                    NOP     0

      565    11162    4                 END;

  11162  3 000623   000707 710000 3                  TRA     s:11182

      566    11163    4            ELSE DO;

      567    11164    4                    ICM$ = PINCRW (IS$, DATAWD.RECP + 1) ;

  11164  3 000624   000001 636010                    EAQ     1,X0
         3 000625   000000 036000 2                  ADLQ    FPTN_
         3 000626   200027 756100                    STQ     ICM$,,AUTO

      568    11165    4                    CALL CHECK_CMD_AND_TEST_NUM (ICM$, CMD, I) ;

  11165  3 000627   200025 633500                    EPPR3   I,,AUTO
         3 000630   200035 453500                    STP3    I+1,,AUTO
         3 000631   200030 634500                    EPPR4   CMD,,AUTO
         3 000632   200034 454500                    STP4    @REC_WORD+1,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:124  
         3 000633   200027 635500                    EPPR5   ICM$,,AUTO
         3 000634   200033 455500                    STP5    @PTR_WORD+1,,AUTO
         3 000635   000711 701000 3                  TSX1    CHECK_CMD_AND_TEST_NUM
         3 000636   000000 011000                    NOP     0

      569    11166    4                    CALL SET_POINTERS (I) ;

  11166  3 000637   200025 630500                    EPPR0   I,,AUTO
         3 000640   200033 450500                    STP0    @PTR_WORD+1,,AUTO
         3 000641   001066 701000 3                  TSX1    SET_POINTERS
         3 000642   000000 011000                    NOP     0

      570    11167    4                    FEP.ICM_BYTE_CNT (I) = (REC$ -> RECORD.WORD_COUNT) * 4;

  11167  3 000643   200025 236100                    LDQ     I,,AUTO
         3 000644   000014 402007                    MPY     12,DL
         3 000645   200026 470500                    LDP0    REC$,,AUTO
         3 000646   000000 620006                    EAX0    0,QL
         3 000647   000000 236100                    LDQ     0,,PR0
         3 000650   000020 772000                    QRL     16
         3 000651   000005 376000 4                  ANQ     5
         3 000652   000014 756010 1                  STQ     FEP+11,X0

      571    11168    5                    DO CASE (CMD) ;

  11168  3 000653   200030 236100                    LDQ     CMD,,AUTO
         3 000654   000033 772000                    QRL     27
         3 000655   000004 116007                    CMPQ    4,DL
         3 000656   000660 602006 3                  TNC     s:11168+5,QL
         3 000657   000677 710000 3                  TRA     s:11176
         3 000660   000677 710000 3                  TRA     s:11176
         3 000661   000664 710000 3                  TRA     s:11170
         3 000662   000664 710000 3                  TRA     s:11170
         3 000663   000672 710000 3                  TRA     s:11173

      572    11169    5                       CASE (1, 2) ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:125  
      573    11170    5                          CALL BUILD_CONFIG_ICM (I) ;

  11170  3 000664   200025 631500                    EPPR1   I,,AUTO
         3 000665   200033 451500                    STP1    @PTR_WORD+1,,AUTO
         3 000666   001247 701000 3                  TSX1    BUILD_CONFIG_ICM
         3 000667   000000 011000                    NOP     0

      574    11171    5                          RETURN ;

  11171  3 000670   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 000671   000001 702211                    TSX2  ! 1,X1

      575    11172    5                       CASE (3) ;

      576    11173    5                          CALL SETUP_TEST_CONNECT (I) ;

  11173  3 000672   200025 631500                    EPPR1   I,,AUTO
         3 000673   200033 451500                    STP1    @PTR_WORD+1,,AUTO
         3 000674   001516 701000 3                  TSX1    SETUP_TEST_CONNECT
         3 000675   000000 011000                    NOP     0
         3 000676   000677 710000 3                  TRA     s:11176

      577    11174    5                       CASE (ELSE) ;

      578    11175    5                    END /* DO CASE */ ;

      579    11176    4                    CALL GEROUT_WRITE (I) WHENRETURN

  11176  3 000677   200025 630500                    EPPR0   I,,AUTO
         3 000700   200037 450500                    STP0    DUMMY_BUF+1,,AUTO
         3 000701   003420 701000 3                  TSX1    GEROUT_WRITE
         3 000702   000707 702000 3                  TSX2    s:11182

      580    11177    5                         DO ;

      581    11178    5                            CALL GEROUT_READ (I) ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:126  
  11178  3 000703   200025 630500                    EPPR0   I,,AUTO
         3 000704   200037 450500                    STP0    DUMMY_BUF+1,,AUTO
         3 000705   003630 701000 3                  TSX1    GEROUT_READ
         3 000706   000000 011000                    NOP     0

      582    11179    5                         END /* WHENRETURN DO */ ;

      583    11180    4                 END /* ELSE DO */ ;

      584    11181    3      END /* DO CASE */ ;

      585    11182    2      RETURN ;

  11182  3 000707   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 000710   000001 702211                    TSX2  ! 1,X1

      586    11183        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:127  
      587    11184        /*I* NAME:         CHECK_CMD_AND_TEST_NUM
      588    11185             AUTHOR:       Kathy Larkin
      589    11186             PURPOSE:      Determines command and test number.
      590    11187             INTERFACE:    SETUP_NEW_ENTRY
      591    11188                           TOX$SCREECH
      592    11189             PARAMETERS:   ICM$ - input
      593    11190                           CMD - output
      594    11191                           TEST_NUM - input/output
      595    11192             DATA:         ICM.CMD
      596    11193                           DATAWD.LNID
      597    11194                           FEP.LINE_ID (TEST_NUM)
      598    11195             DESCRIPTION:  This procedure determines the command request,
      599    11196                           and  the test number.   If an exec_line_id was
      600    11197                           passed in the gerout, the test number may need
      601    11198                           adjusting, as  this id will be  passed for all
      602    11199                           tests  to  be  run  on  a given FEP.  A unique
      603    11200                           line_id  will  be  given  to  each test during
      604    11201                           processing of the start_test command.
      605    11202        */
      606    11203
      607    11204    2   CHECK_CMD_AND_TEST_NUM: PROC (ICM$, CMD, TEST_NUM) ;

  11204  3 000711   200032 741300       CHECK_CMD_A* STX1  ! @DATA_WORD+1,,AUTO

      608    11205
      609    11206    3      DCL ICM$        PTR ALIGNED ;
      610    11207    3      DCL CMD         UBIN (9) CALIGNED ;
      611    11208    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      612    11209    3      DCL J           SBIN WORD ALIGNED ;
      613    11210        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:128  
      614    11211        /* Code */
      615    11212
      616    11213    3      CMD = ICM$ -> ICM.CMD ;

  11213  3 000712   200033 470500                    LDP0    @ICM$,,AUTO
         3 000713   000000 471500                    LDP1    0,,PR0
         3 000714   200034 473500                    LDP3    @CMD,,AUTO
         3 000715   000100 100500                    MLR     fill='000'O
         3 000716   100002 000001                    ADSC9   2,,PR1                   cn=0,n=1
         3 000717   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

      617    11214    3      IF DATAWD.LNID = FEP.LINE_ID (TEST_NUM)

  11214  3 000720   200035 471500                    LDP1    @TEST_NUM,,AUTO
         3 000721   100000 236100                    LDQ     0,,PR1
         3 000722   000006 402007                    MPY     6,DL
         3 000723   000001 736000                    QLS     1
         3 000724   000004 236006 1                  LDQ     FEP+3,QL
         3 000725   000030 772000                    QRL     24
         3 000726   200062 756100                    STQ     I+2,,AUTO
         3 000727   200023 474500                    LDP4    @DATA_WORD,,AUTO
         3 000730   400000 236100                    LDQ     0,,PR4
         3 000731   007777 376007                    ANQ     4095,DL
         3 000732   200062 116100                    CMPQ    I+2,,AUTO
         3 000733   000736 601000 3                  TNZ     s:11217

      618    11215    3      THEN RETURN ;

  11215  3 000734   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 000735   000001 702211                    TSX2  ! 1,X1

      619    11216    4      ELSE DO ;

      620    11217    5              DO CASE (CMD) ;

  11217  3 000736   000100 101500                    MRL     fill='000'O
         3 000737   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:129  
         3 000740   200062 000002                    ADSC9   I+2,,AUTO                cn=0,n=2
         3 000741   200062 220100                    LDX0    I+2,,AUTO
         3 000742   000004 100003                    CMPX0   4,DU
         3 000743   000745 602010 3                  TNC     s:11217+7,X0
         3 000744   001052 710000 3                  TRA     s:11236
         3 000745   001052 710000 3                  TRA     s:11236
         3 000746   000751 710000 3                  TRA     s:11219
         3 000747   000751 710000 3                  TRA     s:11219
         3 000750   000776 710000 3                  TRA     s:11224

      621    11218    5                 CASE (1, 2) ;

      622    11219    5                    IF (FEP.STATUS.DVCID_FOUND (TEST_NUM)) | (~FEP.STATUS.ACTIVE (
             11219                             TEST_NUM))

  11219  3 000751   100000 236100                    LDQ     0,,PR1
         3 000752   000006 402007                    MPY     6,DL
         3 000753   000000 621006                    EAX1    0,QL
         3 000754   000001 736000                    QLS     1
         3 000755   000001 236006 1                  LDQ     FEP,QL
         3 000756   400000 376003                    ANQ     -131072,DU
         3 000757   400000 676003                    ERQ     -131072,DU
         3 000760   200062 756100                    STQ     I+2,,AUTO
         3 000761   000000 635011                    EAA     0,X1
         3 000762   000021 771000                    ARL     17
         3 000763   000001 236005 1                  LDQ     FEP,AL
         3 000764   000013 736000                    QLS     11
         3 000765   400000 376003                    ANQ     -131072,DU
         3 000766   200062 276100                    ORQ     I+2,,AUTO
         3 000767   000774 600000 3                  TZE     s:11222

      623    11220    5                    THEN CALL SETUP_NEW_ENTRY (TEST_NUM) ALTRET (ERROR) ;

  11220  3 000770   200035 236100                    LDQ     @TEST_NUM,,AUTO
         3 000771   200041 756100                    STQ     I+1,,AUTO
         3 000772   001131 701000 3                  TSX1    SETUP_NEW_ENTRY
         3 000773   001054 702000 3                  TSX2    ERROR
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:130  

      624    11221    5                    ELSE /* entry has been set up in Wake-up */ ;
      625    11222    5                    RETURN ;

  11222  3 000774   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 000775   000001 702211                    TSX2  ! 1,X1

      626    11223    5                 CASE (3) ;

      627    11224    5                    J = -1 ;

  11224  3 000776   000001 335007                    LCA     1,DL
         3 000777   200036 755100                    STA     J,,AUTO

      628    11225    6                    DO UNTIL (J > %LAST_FEP) |

      629    11226    6                            ((FEP.NUM (TEST_NUM) = FEP.NUM (J)) &
      630    11227    6                            (FEP.STATUS.ACTIVE (J)) &
      631    11228    6                            (~FEP.STATUS.DCB_OPEN (J))) ;
      632    11229    6                       J = J + 1 ;

  11229  3 001000   200036 054100                    AOS     J,,AUTO

      633    11230    6                    END /* DO UNTIL */ ;

  11230  3 001001   400000 220003                    LDX0    -131072,DU
         3 001002   200036 235100                    LDA     J,,AUTO
         3 001003   000007 115007                    CMPA    7,DL
         3 001004   001006 605400 3                  TPNZ    s:11230+5
         3 001005   000000 220003                    LDX0    0,DU
         3 001006   200035 470500                    LDP0    @TEST_NUM,,AUTO
         3 001007   000000 236100                    LDQ     0,,PR0
         3 001010   000006 402007                    MPY     6,DL
         3 001011   400000 221003                    LDX1    -131072,DU
         3 001012   000000 622006                    EAX2    0,QL
         3 001013   200036 236100                    LDQ     J,,AUTO
         3 001014   000014 402007                    MPY     12,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:131  
         3 001015   000000 623006                    EAX3    0,QL
         3 001016   000000 635012                    EAA     0,X2
         3 001017   000021 771000                    ARL     17
         3 001020   000002 236005 1                  LDQ     FEP+1,AL
         3 001021   000002 676013 1                  ERQ     FEP+1,X3
         3 001022   777777 376007                    ANQ     -1,DL
         3 001023   001025 600000 3                  TZE     s:11230+20
         3 001024   000000 221003                    LDX1    0,DU
         3 001025   000001 236013 1                  LDQ     FEP,X3
         3 001026   400000 376003                    ANQ     -131072,DU
         3 001027   200062 756100                    STQ     I+2,,AUTO
         3 001030   000000 636011                    EAQ     0,X1
         3 001031   200062 376100                    ANQ     I+2,,AUTO
         3 001032   200063 756100                    STQ     I+3,,AUTO
         3 001033   000001 236013 1                  LDQ     FEP,X3
         3 001034   000012 736000                    QLS     10
         3 001035   400000 376003                    ANQ     -131072,DU
         3 001036   400000 676003                    ERQ     -131072,DU
         3 001037   200063 376100                    ANQ     I+3,,AUTO
         3 001040   200064 756100                    STQ     I+4,,AUTO
         3 001041   000000 636010                    EAQ     0,X0
         3 001042   200064 276100                    ORQ     I+4,,AUTO
         3 001043   001000 600000 3                  TZE     s:11229

      634    11231    5                    TEST_NUM = J ;

  11231  3 001044   200036 235100                    LDA     J,,AUTO
         3 001045   000000 755100                    STA     0,,PR0

      635    11232    5                    IF TEST_NUM <= %LAST_FEP

  11232  3 001046   000010 115007                    CMPA    8,DL
         3 001047   001054 603000 3                  TRC     ERROR

      636    11233    5                    THEN RETURN ;

  11233  3 001050   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:132  
         3 001051   000001 702211                    TSX2  ! 1,X1

      637    11234    5                    ELSE /* fall through to error */ ;
      638    11235    5                 CASE (ELSE) ;

      639    11236    5                    RETURN ;

  11236  3 001052   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 001053   000001 702211                    TSX2  ! 1,X1

      640    11237    5              END /* DO CASE */ ;

      641    11238    4           END /* ELSE DO */ ;
      642    11239
      643    11240    3   ERROR:
      644    11241    3      TOC_ERROR_CODE.ERR# = %E$LTABOVFL ;

  11241  3 001054   000000 236000 1     ERROR        LDQ     TOC_ERROR_CODE
         3 001055   000001 376000 4                  ANQ     1
         3 001056   000140 276007                    ORQ     96,DL
         3 001057   000000 756000 1                  STQ     TOC_ERROR_CODE

      645    11242    3      CALL TOX$SCREECH (TOC_ERROR_CODE) ;

  11242  3 001060   000002 630400 4                  EPPR0   2
         3 001061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001062   000000 701000 xent               TSX1    TOX$SCREECH
         3 001063   000000 011000                    NOP     0

      646    11243    3   END CHECK_CMD_AND_TEST_NUM ;

  11243  3 001064   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 001065   000001 702211                    TSX2  ! 1,X1

      647    11244        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:133  
      648    11245        /*I* NAME:         SET_POINTERS
      649    11246             AUTHOR:       Kathy Larkin
      650    11247             PURPOSE:      Set pointers to sub-exec in FEP table.
      651    11248             INTERFACE:    None called.
      652    11249             PARAMETERS:   TEST_NUM - input
      653    11250             DATA:         REC$ - input
      654    11251                           ICM$ - input
      655    11252                           PTRWD.CC - input
      656    11253                           PTRWD.ST - input
      657    11254                           FEP.RECEIVE_ICM$ (TEST_NUM) - output
      658    11255                           FEP.ICM$ (TEST_NUM) - output
      659    11256                           FEP.C_CALL$ (TEST_NUM) - output
      660    11257                           FEP.STATUS$ (TEST_NUM) - output
      661    11258             DESCRIPTION:  This procedure sets  the FEP table pointers to
      662    11259                           the  receive  icm,  icm,  courtesy call return
      663    11260                           location, and the  location for status return,
      664    11261                           respectively.
      665    11262        */
      666    11263
      667    11264    2   SET_POINTERS: PROC (TEST_NUM) ;

  11264  3 001066   200032 741300       SET_POINTERS STX1  ! @DATA_WORD+1,,AUTO

      668    11265
      669    11266    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      670    11267
      671    11268        /* Code */
      672    11269
      673    11270    3      FEP.RECEIVE_ICM$ (TEST_NUM) = PINCRW (IS$, REC$ -> HEADER_REC.BUF_AD) ;

  11270  3 001067   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001070   000000 236100                    LDQ     0,,PR0
         3 001071   000006 402007                    MPY     6,DL
         3 001072   000001 736000                    QLS     1
         3 001073   200026 471500                    LDP1    REC$,,AUTO
         3 001074   100000 720100                    LXL0    0,,PR1
         3 001075   000000 622006                    EAX2    0,QL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:134  
         3 001076   000000 636010                    EAQ     0,X0
         3 001077   000000 036000 2                  ADLQ    FPTN_
         3 001100   000012 756012 1                  STQ     FEP+9,X2

      674    11271    3      FEP.ICM$ (TEST_NUM) = ICM$ ;

  11271  3 001101   000000 236100                    LDQ     0,,PR0
         3 001102   000006 402007                    MPY     6,DL
         3 001103   000001 736000                    QLS     1
         3 001104   000000 620006                    EAX0    0,QL
         3 001105   200027 236100                    LDQ     ICM$,,AUTO
         3 001106   000011 756010 1                  STQ     FEP+8,X0

      675    11272    3      FEP.C_CALL$ (TEST_NUM) = PINCRW (IS$, PTRWD.CC) ;

  11272  3 001107   000000 236100                    LDQ     0,,PR0
         3 001110   000006 402007                    MPY     6,DL
         3 001111   000001 736000                    QLS     1
         3 001112   200024 473500                    LDP3    @POINTER_WORD,,AUTO
         3 001113   300000 720100                    LXL0    0,,PR3
         3 001114   000000 622006                    EAX2    0,QL
         3 001115   000000 636010                    EAQ     0,X0
         3 001116   000000 036000 2                  ADLQ    FPTN_
         3 001117   000007 756012 1                  STQ     FEP+6,X2

      676    11273    3      FEP.STATUS$ (TEST_NUM) = PINCRW (IS$, PTRWD.ST) ;

  11273  3 001120   000000 236100                    LDQ     0,,PR0
         3 001121   000006 402007                    MPY     6,DL
         3 001122   000001 736000                    QLS     1
         3 001123   300000 220100                    LDX0    0,,PR3
         3 001124   000000 622006                    EAX2    0,QL
         3 001125   000000 636010                    EAQ     0,X0
         3 001126   000000 036000 2                  ADLQ    FPTN_
         3 001127   000010 756012 1                  STQ     FEP+7,X2

      677    11274
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:135  
      678    11275    3   END SET_POINTERS ;

  11275  3 001130   000001 702211                    TSX2  ! 1,X1

      679    11276        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:136  
      680    11277        /*I* NAME:         SETUP_NEW_ENTRY
      681    11278             AUTHOR:       Kathy Larkin
      682    11279             PURPOSE:      Set up FEP table entry for new test.
      683    11280             INTERFACE:    None called.
      684    11281             PARAMETERS:   TEST_NUM - input/output
      685    11282             DATA:         FEP table entry - output
      686    11283             DESCRIPTION:  This procedure will set  up an FEP table entry
      687    11284                           for a new  test.  FEP fields NUM, LOGICAL_NUM,
      688    11285                           and  STATUS.ACTIVE are  set.  If  the table is
      689    11286                           currently full, this procedure will ALTRETurn,
      690    11287                           causing  a TOLTS  abort, as  this should never
      691    11288                           happen.
      692    11289        */
      693    11290
      694    11291    2   SETUP_NEW_ENTRY: PROC (TEST_NUM) ALTRET ;

  11291  3 001131   200040 741300       SETUP_NEW_E* STX1  ! @TEST_NUM+1,,AUTO

      695    11292
      696    11293    3      DCL TEST_NUM    UBIN WORD ALIGNED ;
      697    11294    3      DCL I           UBIN WORD ALIGNED ;
      698    11295    3      DCL FOUND       BIT (1) CALIGNED ;
      699    11296        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:137  
      700    11297
      701    11298        /* Code */
      702    11299
      703    11300    3      FOUND = %FALSE ;

  11300  3 001132   200043 450100                    STZ     FOUND,,AUTO

      704    11301    3      I = 0 ;

  11301  3 001133   200042 450100                    STZ     I,,AUTO

      705    11302    4      DO WHILE (I <= %LAST_FEP) & (FEP.STATUS.ACTIVE (I)) & ~FOUND ;

  11302  3 001134   001172 710000 3                  TRA     s:11306

      706    11303    4         IF (FEP.NUM (I) = FEP.NUM (TEST_NUM)) & ~FEP.STATUS.DVCID_FOUND (I)

  11303  3 001135   200041 470500                    LDP0    @TEST_NUM,,AUTO
         3 001136   000000 236100                    LDQ     0,,PR0
         3 001137   000006 402007                    MPY     6,DL
         3 001140   400000 220003                    LDX0    -131072,DU
         3 001141   000001 736000                    QLS     1
         3 001142   000000 621006                    EAX1    0,QL
         3 001143   200042 236100                    LDQ     I,,AUTO
         3 001144   000014 402007                    MPY     12,DL
         3 001145   000002 236006 1                  LDQ     FEP+1,QL
         3 001146   000002 676011 1                  ERQ     FEP+1,X1
         3 001147   777777 376007                    ANQ     -1,DL
         3 001150   001152 600000 3                  TZE     s:11303+13
         3 001151   000000 220003                    LDX0    0,DU
         3 001152   200042 236100                    LDQ     I,,AUTO
         3 001153   000014 402007                    MPY     12,DL
         3 001154   000001 236006 1                  LDQ     FEP,QL
         3 001155   000013 736000                    QLS     11
         3 001156   400000 376003                    ANQ     -131072,DU
         3 001157   400000 676003                    ERQ     -131072,DU
         3 001160   200062 756100                    STQ     I+2,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:138  
         3 001161   000000 636010                    EAQ     0,X0
         3 001162   200062 376100                    ANQ     I+2,,AUTO
         3 001163   001167 600000 3                  TZE     s:11305

      707    11304    4         THEN FOUND = %TRUE ;

  11304  3 001164   400000 236003                    LDQ     -131072,DU
         3 001165   200043 756100                    STQ     FOUND,,AUTO
         3 001166   001172 710000 3                  TRA     s:11306

      708    11305    4         ELSE I = I + 1 ;

  11305  3 001167   200042 235100                    LDA     I,,AUTO
         3 001170   000001 035007                    ADLA    1,DL
         3 001171   200042 755100                    STA     I,,AUTO

      709    11306    4      END /* DO WHILE */ ;

  11306  3 001172   400000 220003                    LDX0    -131072,DU
         3 001173   200042 235100                    LDA     I,,AUTO
         3 001174   000010 115007                    CMPA    8,DL
         3 001175   001177 602000 3                  TNC     s:11306+5
         3 001176   000000 220003                    LDX0    0,DU
         3 001177   200042 236100                    LDQ     I,,AUTO
         3 001200   000014 402007                    MPY     12,DL
         3 001201   000001 236006 1                  LDQ     FEP,QL
         3 001202   400000 376003                    ANQ     -131072,DU
         3 001203   200062 756100                    STQ     I+2,,AUTO
         3 001204   000000 636010                    EAQ     0,X0
         3 001205   200062 376100                    ANQ     I+2,,AUTO
         3 001206   200063 756100                    STQ     I+3,,AUTO
         3 001207   200043 236100                    LDQ     FOUND,,AUTO
         3 001210   400000 376003                    ANQ     -131072,DU
         3 001211   400000 676003                    ERQ     -131072,DU
         3 001212   200063 376100                    ANQ     I+3,,AUTO
         3 001213   001135 601000 3                  TNZ     s:11303

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:139  
      710    11307    3      IF I <= %LAST_FEP

  11307  3 001214   200042 235100                    LDA     I,,AUTO
         3 001215   000010 115007                    CMPA    8,DL
         3 001216   001245 603000 3                  TRC     s:11316

      711    11308    4      THEN DO ;

      712    11309    4              FEP.FEP_STATUS (I) = 0 ;

  11309  3 001217   200042 236100                    LDQ     I,,AUTO
         3 001220   000014 402007                    MPY     12,DL
         3 001221   000000 220003                    LDX0    0,DU
         3 001222   000001 740006 1                  STX0    FEP,QL

      713    11310    4              FEP.STATUS.ACTIVE (I) = %TRUE ;

  11310  3 001223   000000 621006                    EAX1    0,QL
         3 001224   400000 236003                    LDQ     -131072,DU
         3 001225   000001 256011 1                  ORSQ    FEP,X1

      714    11311    4              FEP.NUM (I) = FEP.NUM (TEST_NUM) ;

  11311  3 001226   200041 470500                    LDP0    @TEST_NUM,,AUTO
         3 001227   000000 236100                    LDQ     0,,PR0
         3 001230   000006 402007                    MPY     6,DL
         3 001231   000001 736000                    QLS     1
         3 001232   000002 722006 1                  LXL2    FEP+1,QL
         3 001233   000002 442011 1                  SXL2    FEP+1,X1

      715    11312    4              FEP.LOGICAL_NUM (I) = FEP.LOGICAL_NUM (TEST_NUM) ;

  11312  3 001234   000000 236100                    LDQ     0,,PR0
         3 001235   000006 402007                    MPY     6,DL
         3 001236   000001 736000                    QLS     1
         3 001237   000002 223006 1                  LDX3    FEP+1,QL
         3 001240   000002 743011 1                  STX3    FEP+1,X1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:140  

      716    11313    4              TEST_NUM = I ;

  11313  3 001241   200042 235100                    LDA     I,,AUTO
         3 001242   000000 755100                    STA     0,,PR0

      717    11314    4              RETURN ;

  11314  3 001243   200040 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 001244   000001 702211                    TSX2  ! 1,X1

      718    11315    4           END /* THEN DO */ ;
      719    11316    3      ELSE ALTRETURN ;

  11316  3 001245   200040 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 001246   000000 702211                    TSX2  ! 0,X1

      720    11317
      721    11318    3   END SETUP_NEW_ENTRY ;
      722    11319        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:141  
      723    11320        /*I* NAME:         BUILD_CONFIG_ICM
      724    11321             AUTHOR:       Curt Andes
      725    11322             PURPOSE:      Create a response to a "READ CONFIG" ICM
      726    11323             INTERFACE:    COPY_ICM
      727    11324                           TOK$COURTESY_CALL
      728    11325                           CALCULATE_CHECKSUM
      729    11326             PARAMETERS:   FEP table entry number we are working with (TEST_NUM)
      730    11327             DATA:         FEP.RECEIVE_ICM$
      731    11328                           FEP.CONFIG_ID
      732    11329                           FEP.CONFIG_ID_EXT
      733    11330                           FEP.BUS_ADDR
      734    11331                           FEP.ICM$
      735    11332                           GET_CONFIG
      736    11333             DESCRIPTION:  This procedure creates a response to the "READ
      737    11334                           CONFIG"  ICM that  is sent  to the  FEP by the
      738    11335                           subexecutive. Since there is no program loaded
      739    11336                           into  the front end  for the ICM  to go to, we
      740    11337                           can't send it down.  Hence, we detect that the
      741    11338                           ICM is being sent,  intercept it, and create a
      742    11339                           response.  We  first copy the ICM  over to the
      743    11340                           receive  buffer, then  an M$CONFIG  is done to
      744    11341                           get the channel configuration. The checksum is
      745    11342                           calculated, and a courtesy call is paid to the
      746    11343                           subexec to return the data. If an ALTRETURN is
      747    11344                           taken from the M$CONFIG,  the config id is set
      748    11345                           to'0',  and the  status flags  are set to '8',
      749    11346                           indicating  that  there  was  no  MLCP  at the
      750    11347                           specified channel.
      751    11348        */
      752    11349
      753    11350    2   BUILD_CONFIG_ICM: PROC (TEST_NUM);

  11350  3 001247   200032 741300       BUILD_CONFI* STX1  ! @DATA_WORD+1,,AUTO

      754    11351        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:142  
      755    11352
      756    11353        /* Variables */
      757    11354
      758    11355    3      DCL TEST_NUM UBIN WORD ALIGNED;
      759    11356    3      DCL WORK UBIN HALF ALIGNED ;
      760    11357    3      DCL 1 WRK REDEF WORK,
      761    11358    3            2 UPPER UBIN (10) UNAL,
      762    11359    3            2 LOWER UBIN ( 8) UNAL,
      763    11360    3            2 *     UBIN HALF UNAL ;
      764    11361    3      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED ;
      765    11362        /* Code */
      766    11363
      767    11364    3      CALL COPY_ICM (TEST_NUM); /* MOVE ICM FROM SEND BUFFER TO RECEIVE*/

  11364  3 001250   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001251   200037 756100                    STQ     DUMMY_BUF+1,,AUTO
         3 001252   002260 701000 3                  TSX1    COPY_ICM
         3 001253   000000 011000                    NOP     0

      768    11365    3      FEP.RECEIVE_ICM$(TEST_NUM)->ICM.REPLY = 33; /* OP COMPLETE */

  11365  3 001254   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001255   000000 236100                    LDQ     0,,PR0
         3 001256   000006 402007                    MPY     6,DL
         3 001257   000001 736000                    QLS     1
         3 001260   000012 471406 1                  LDP1    FEP+9,QL
         3 001261   000041 236003                    LDQ     33,DU
         3 001262   100002 552120                    STBQ    2,'20'O,PR1

      769    11366    3      WORK = FEP.ICM$(TEST_NUM)->ICM.L6MBA;

  11366  3 001263   000000 236100                    LDQ     0,,PR0
         3 001264   000006 402007                    MPY     6,DL
         3 001265   000001 736000                    QLS     1
         3 001266   000011 471406 1                  LDP1    FEP+8,QL
         3 001267   100002 720100                    LXL0    2,,PR1
         3 001270   200034 740100                    STX0    WORK,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:143  

      770    11367    3      WRK.UPPER = WRK.UPPER/2;

  11367  3 001271   200034 236100                    LDQ     WORK,,AUTO
         3 001272   000032 772000                    QRL     26
         3 001273   000001 772000                    QRL     1
         3 001274   000032 736000                    QLS     26
         3 001275   200034 676100                    ERQ     WORK,,AUTO
         3 001276   777400 376003                    ANQ     -256,DU
         3 001277   200034 656100                    ERSQ    WORK,,AUTO

      771    11368    3      GET_CONFIG.V.CHANNEL# = WORK;

  11368  3 001300   200034 220100                    LDX0    WORK,,AUTO
         3 001301   000172 440000 1                  SXL0    GET_CONFIG+6

      772    11369    3      WORK = FEP.NUM(TEST_NUM);

  11369  3 001302   000000 236100                    LDQ     0,,PR0
         3 001303   000006 402007                    MPY     6,DL
         3 001304   000001 736000                    QLS     1
         3 001305   000002 721006 1                  LXL1    FEP+1,QL
         3 001306   200034 741100                    STX1    WORK,,AUTO

      773    11370    3      WRK.UPPER = WRK.UPPER/2;

  11370  3 001307   200034 236100                    LDQ     WORK,,AUTO
         3 001310   000032 772000                    QRL     26
         3 001311   000001 772000                    QRL     1
         3 001312   000032 736000                    QLS     26
         3 001313   200034 676100                    ERQ     WORK,,AUTO
         3 001314   777400 376003                    ANQ     -256,DU
         3 001315   200034 656100                    ERSQ    WORK,,AUTO

      774    11371    3      GET_CONFIG.V.FEP# = WORK;

  11371  3 001316   200034 221100                    LDX1    WORK,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:144  
         3 001317   000172 741000 1                  STX1    GET_CONFIG+6

      775    11372    3      CALL M$CONFIG (GET_CONFIG) ALTRET (ERROR) ;

  11372  3 001320   000164 630400 1                  EPPR0   GET_CONFIG
         3 001321   560023 713400                    CLIMB   alt,+57363
         3 001322   401000 401760                    pmme    nvectors=3
         3 001323   001504 702000 3                  TSX2    ERROR

      776    11373        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:145  
      777    11374    4      DO CASE (CONFIG.STATUS#);  /* channel status */

  11374  3 001324   000161 236000 1                  LDQ     CONFIG+1
         3 001325   000033 772000                    QRL     27
         3 001326   000001 116007                    CMPQ    1,DL
         3 001327   001331 602006 3                  TNC     s:11374+5,QL
         3 001330   001356 710000 3                  TRA     s:11380
         3 001331   001332 710000 3                  TRA     s:11376

      778    11375    4         CASE (%CHNST_NONE#); /* no device on channel */

      779    11376    4            FEP.STATUS.DVCID_FOUND (TEST_NUM) = %FALSE;

  11376  3 001332   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001333   000000 236100                    LDQ     0,,PR0
         3 001334   000006 402007                    MPY     6,DL
         3 001335   000001 736000                    QLS     1
         3 001336   000000 620006                    EAX0    0,QL
         3 001337   000006 236000 4                  LDQ     6
         3 001340   000001 356010 1                  ANSQ    FEP,X0

      780    11377    4            FEP.RECEIVE_ICM$ (TEST_NUM) -> ICM.CONFIG_ID = 0;

  11377  3 001341   000000 236100                    LDQ     0,,PR0
         3 001342   000006 402007                    MPY     6,DL
         3 001343   000001 736000                    QLS     1
         3 001344   000012 471406 1                  LDP1    FEP+9,QL
         3 001345   000000 220003                    LDX0    0,DU
         3 001346   100003 740100                    STX0    3,,PR1

      781    11378    4            FEP.RECEIVE_ICM$ (TEST_NUM) -> ICM.FLAGS = 8;

  11378  3 001347   000000 236100                    LDQ     0,,PR0
         3 001350   000006 402007                    MPY     6,DL
         3 001351   000001 736000                    QLS     1
         3 001352   000012 471406 1                  LDP1    FEP+9,QL
         3 001353   000010 236003                    LDQ     8,DU
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:146  
         3 001354   100004 552120                    STBQ    4,'20'O,PR1
         3 001355   001460 710000 3                  TRA     s:11392

      782    11379    4         CASE (ELSE);

      783    11380    4            WORK = CONFIG.DVCID#;

  11380  3 001356   000160 220000 1                  LDX0    CONFIG
         3 001357   200034 740100                    STX0    WORK,,AUTO

      784    11381    4            WRK.UPPER = WRK.UPPER*2;

  11381  3 001360   200034 236100                    LDQ     WORK,,AUTO
         3 001361   000031 772000                    QRL     25
         3 001362   003776 376007                    ANQ     2046,DL
         3 001363   000032 736000                    QLS     26
         3 001364   200034 676100                    ERQ     WORK,,AUTO
         3 001365   777400 376003                    ANQ     -256,DU
         3 001366   200034 656100                    ERSQ    WORK,,AUTO

      785    11382    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CONFIG_ID = WORK;

  11382  3 001367   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001370   000000 236100                    LDQ     0,,PR0
         3 001371   000006 402007                    MPY     6,DL
         3 001372   000001 736000                    QLS     1
         3 001373   000012 471406 1                  LDP1    FEP+9,QL
         3 001374   200034 221100                    LDX1    WORK,,AUTO
         3 001375   100003 741100                    STX1    3,,PR1

      786    11383    4            FEP.CONFIG_ID(TEST_NUM) = WORK;

  11383  3 001376   000000 236100                    LDQ     0,,PR0
         3 001377   000006 402007                    MPY     6,DL
         3 001400   000001 736000                    QLS     1
         3 001401   000005 741006 1                  STX1    FEP+4,QL

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:147  
      787    11384    4            WORK = CONFIG.EXDVCID#;

  11384  3 001402   000160 720000 1                  LXL0    CONFIG
         3 001403   200034 740100                    STX0    WORK,,AUTO

      788    11385    4            FEP.CONFIG_ID_EXT(TEST_NUM) = WRK.UPPER;

  11385  3 001404   000000 236100                    LDQ     0,,PR0
         3 001405   000006 402007                    MPY     6,DL
         3 001406   000001 736000                    QLS     1
         3 001407   000000 621006                    EAX1    0,QL
         3 001410   200034 236100                    LDQ     WORK,,AUTO
         3 001411   000021 772000                    QRL     17
         3 001412   000005 676011 1                  ERQ     FEP+4,X1
         3 001413   777000 376007                    ANQ     -512,DL
         3 001414   000005 656011 1                  ERSQ    FEP+4,X1

      789    11386    4            WRK.UPPER = WRK.UPPER*2;

  11386  3 001415   200034 236100                    LDQ     WORK,,AUTO
         3 001416   000031 772000                    QRL     25
         3 001417   003776 376007                    ANQ     2046,DL
         3 001420   000032 736000                    QLS     26
         3 001421   200034 676100                    ERQ     WORK,,AUTO
         3 001422   777400 376003                    ANQ     -256,DU
         3 001423   200034 656100                    ERSQ    WORK,,AUTO

      790    11387    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CONFIG_ID_EXT = WORK;

  11387  3 001424   000000 236100                    LDQ     0,,PR0
         3 001425   000006 402007                    MPY     6,DL
         3 001426   000001 736000                    QLS     1
         3 001427   000012 471406 1                  LDP1    FEP+9,QL
         3 001430   200034 220100                    LDX0    WORK,,AUTO
         3 001431   100003 440100                    SXL0    3,,PR1

      791    11388    4            FEP.BUS_ADDR(TEST_NUM) = FEP.RECEIVE_ICM$(TEST_NUM)->ICM.L6MBA;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:148  

  11388  3 001432   000000 236100                    LDQ     0,,PR0
         3 001433   000006 402007                    MPY     6,DL
         3 001434   000001 736000                    QLS     1
         3 001435   000000 621006                    EAX1    0,QL
         3 001436   000000 236100                    LDQ     0,,PR0
         3 001437   000006 402007                    MPY     6,DL
         3 001440   000001 736000                    QLS     1
         3 001441   000012 471406 1                  LDP1    FEP+9,QL
         3 001442   100002 722100                    LXL2    2,,PR1
         3 001443   000003 442011 1                  SXL2    FEP+2,X1

      792    11389    4            FEP.RECEIVE_ICM$(TEST_NUM)->ICM.FLAGS = 0;

  11389  3 001444   000000 236100                    LDQ     0,,PR0
         3 001445   000006 402007                    MPY     6,DL
         3 001446   000001 736000                    QLS     1
         3 001447   000012 471406 1                  LDP1    FEP+9,QL
         3 001450   000000 236003                    LDQ     0,DU
         3 001451   100004 552120                    STBQ    4,'20'O,PR1

      793    11390    4            FEP.STATUS.DVCID_FOUND (TEST_NUM) = %TRUE ;

  11390  3 001452   000000 236100                    LDQ     0,,PR0
         3 001453   000006 402007                    MPY     6,DL
         3 001454   000001 736000                    QLS     1
         3 001455   000000 621006                    EAX1    0,QL
         3 001456   000100 236003                    LDQ     64,DU
         3 001457   000001 256011 1                  ORSQ    FEP,X1

      794    11391    4      END /* DO CASE */;

      795    11392    3      CALL CALCULATE_CHECKSUM (TEST_NUM);

  11392  3 001460   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001461   200037 756100                    STQ     DUMMY_BUF+1,,AUTO
         3 001462   004351 701000 3                  TSX1    CALCULATE_CHECKSUM
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:149  
         3 001463   000000 011000                    NOP     0

      796    11393    3      CALL RETURN_GEROUT_STATUS (TEST_NUM);

  11393  3 001464   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001465   200043 756100                    STQ     FOUND,,AUTO
         3 001466   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 001467   000000 011000                    NOP     0

      797    11394    3      CALL TOK$COURTESY_CALL (FEP.C_CALL$(TEST_NUM));

  11394  3 001470   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001471   000000 236100                    LDQ     0,,PR0
         3 001472   000006 402007                    MPY     6,DL
         3 001473   000023 736000                    QLS     19
         3 001474   000007 036000 4                  ADLQ    7
         3 001475   200062 756100                    STQ     I+2,,AUTO
         3 001476   200062 630500                    EPPR0   I+2,,AUTO
         3 001477   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001500   000000 701000 xent               TSX1    TOK$COURTESY_CALL
         3 001501   000000 011000                    NOP     0

      798    11395    3      RETURN ;

  11395  3 001502   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 001503   000001 702211                    TSX2  ! 1,X1

      799    11396
      800    11397    3   ERROR :
      801    11398    3      TOC_ERROR_CODE.ERR# = %E$NOCONFIG ;

  11398  3 001504   000000 236000 1     ERROR        LDQ     TOC_ERROR_CODE
         3 001505   000001 376000 4                  ANQ     1
         3 001506   000310 276007                    ORQ     200,DL
         3 001507   000000 756000 1                  STQ     TOC_ERROR_CODE

      802    11399    3      CALL TOX$ERROR (TOC_ERROR_CODE) ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:150  

  11399  3 001510   000002 630400 4                  EPPR0   2
         3 001511   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001512   000000 701000 xent               TSX1    TOX$ERROR
         3 001513   000000 011000                    NOP     0

      803    11400    3   END BUILD_CONFIG_ICM;

  11400  3 001514   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 001515   000001 702211                    TSX2  ! 1,X1

      804    11401        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:151  
      805    11402        /*I* NAME:         SETUP_TEST_CONNECT
      806    11403             AUTHOR:       Curt Andes
      807    11404             PURPOSE:      Call the routines to open the FEP path and load the handler
      808    11405             INTERFACE:    FIND_HANDLER
      809    11406                           ASSIGN_DCB
      810    11407                           OPEN_DCB
      811    11408             PARAMETERS:   The number of the FEP table entry we are working with
      812    11409             DATA:         FEP.DEVICE_TYPE - output
      813    11410             DESCRIPTION:  This  procedure  simply  calls  the procedures
      814    11411                           that setup the  communication path between the
      815    11412                           subexec and the front end. Part of this setup
      816    11413                           includes determining the correct FEP I/O handler
      817    11414                           to use and loading it down to the FEP.
      818    11415                           In the TEST_XREF table, there is an element called
      819    11416                           TEST_TYPE that is really just a binary representation
      820    11417                           of the HANDLER_NAME. Valid TEST_TYPEs are:
      821    11418                             #   HANDLER        TEST TYPE
      822    11419                            ---  -------        ---------
      823    11420                             1   TND_MLCP_HNDLR    MLCP testing
      824    11421                             2   TND_MDC_HNDLR     MDC testing
      825    11422                             3   TND_MLC16_HNDLR   MLC-16 testing
      826    11423
      827    11424                           Note that the CONFIG_IDs are the IDs as we would
      828    11425                           expect to see them coming up from the FEP.
      829    11426        */
      830    11427        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:152  
      831    11428    2   SETUP_TEST_CONNECT: PROC (TEST_NUM);

  11428  3 001516   200032 741300       SETUP_TEST_* STX1  ! @DATA_WORD+1,,AUTO

      832    11429
      833    11430        /* Variables */
      834    11431    3      DCL TEST_NUM UBIN WORD ALIGNED;
      835    11432    3      DCL 1 TEST_XREF (0:%LAST_XREF_ENTRY) ALIGNED CONSTANT,
      836    11433    3            2 CONFIG_ID UBIN HALF UNAL INIT
      837    11434    3                (%H2158,%H2168,%H2118,%H2108,%H2110,%H2138,%H2140,%H2178,
      838    11435    3                 %H2000,%H2001,%H2002,%H2003,%H2008,%H2031,%H2033,%H20C4,
      839    11436    3                 %H2978),
      840    11437    3            2 TEST_TYPE UBIN HALF UNAL INIT (1*8,2*8,3*1),
      841    11438    3            2 NAME_LENGTH UBIN HALF HALIGNED INIT (14*8,13*8,15*1),
      842    11439    3            2 HANDLER_NAME CHAR (31) CALIGNED INIT
      843    11440    3               ('TND_MLCP_HNDLR'*8,'TND_MDC_HNDLR'*8,'TND_MLC16_HNDLR'*1);
      844    11441    3      DCL J UBIN WORD ALIGNED;
      845    11442
      846    11443        /* Code */
      847    11444
      848    11445    3      FEP.DEVICE_TYPE (TEST_NUM) = FEP.ICM$ (TEST_NUM) -> ICM.TYC ;

  11445  3 001517   200033 470500                    LDP0    @TEST_NUM,,AUTO
         3 001520   000000 236100                    LDQ     0,,PR0
         3 001521   000006 402007                    MPY     6,DL
         3 001522   000001 736000                    QLS     1
         3 001523   000000 620006                    EAX0    0,QL
         3 001524   000000 236100                    LDQ     0,,PR0
         3 001525   000006 402007                    MPY     6,DL
         3 001526   000001 736000                    QLS     1
         3 001527   000011 471406 1                  LDP1    FEP+8,QL
         3 001530   100004 722100                    LXL2    4,,PR1
         3 001531   000077 362003                    ANX2    63,DU
         3 001532   000003 742010 1                  STX2    FEP+2,X0

      849    11446    3      CALL FIND_HANDLER (J,TEST_NUM);

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:153  
  11446  3 001533   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001534   200040 756100                    STQ     @TEST_NUM+1,,AUTO
         3 001535   200034 631500                    EPPR1   J,,AUTO
         3 001536   200037 451500                    STP1    DUMMY_BUF+1,,AUTO
         3 001537   001557 701000 3                  TSX1    FIND_HANDLER
         3 001540   000000 011000                    NOP     0

      850    11447    3      CALL ASSIGN_DCB (J,TEST_NUM);

  11447  3 001541   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001542   200040 756100                    STQ     @TEST_NUM+1,,AUTO
         3 001543   200034 630500                    EPPR0   J,,AUTO
         3 001544   200037 450500                    STP0    DUMMY_BUF+1,,AUTO
         3 001545   001652 701000 3                  TSX1    ASSIGN_DCB
         3 001546   000000 011000                    NOP     0

      851    11448    3      CALL OPEN_DCB (J,TEST_NUM);

  11448  3 001547   200033 236100                    LDQ     @TEST_NUM,,AUTO
         3 001550   200040 756100                    STQ     @TEST_NUM+1,,AUTO
         3 001551   200034 630500                    EPPR0   J,,AUTO
         3 001552   200037 450500                    STP0    DUMMY_BUF+1,,AUTO
         3 001553   002122 701000 3                  TSX1    OPEN_DCB
         3 001554   000000 011000                    NOP     0

      852    11449    3      RETURN;

  11449  3 001555   200032 221300                    LDX1  ! @DATA_WORD+1,,AUTO
         3 001556   000001 702211                    TSX2  ! 1,X1

      853    11450        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:154  
      854    11451        /*I* NAME:         FIND_HANDLER
      855    11452             AUTHOR:       Curt Andes
      856    11453                           Kathy Larkin
      857    11454             PURPOSE:      Determine the FEP handler for the current test
      858    11455             INTERFACE:    TOX$ERROR
      859    11456             PARAMETERS:   The variable to store the TEST_XREF entry in for the handler
      860    11457                           The FEP table entry number we are working with
      861    11458             DATA:         FEP.CONFIG_ID
      862    11459                           FEP.TEST_TYPE
      863    11460             DESCRIPTION:  This  procedure scans the  TEST_XREF table for
      864    11461                           the   CONFIG_ID   that   corresponds   to  the
      865    11462                           CONFIG_ID for the current  test. If a match is
      866    11463                           found, then the  entry number in the TEST_XREF
      867    11464                           table  that corresponds to  the CONFIG_ID will
      868    11465                           be    put    into    the    passed    variable
      869    11466                           TEST_XREF_ENTRY_NUM.  If no match can be  made
      870    11467                           then TOLTS will abort.
      871    11468        */
      872    11469
      873    11470    3   FIND_HANDLER: PROC (TEST_XREF_ENTRY_NUM,TEST_NUM);

  11470  3 001557   200036 741300       FIND_HANDLER STX1  ! J,,AUTO

      874    11471
      875    11472        /* Variables */
      876    11473    4      DCL TEST_XREF_ENTRY_NUM UBIN WORD ALIGNED;
      877    11474    4      DCL TEST_NUM UBIN WORD ALIGNED;
      878    11475    4      DCL I UBIN WORD ALIGNED;
      879    11476    4      DCL HANDLER_FOUND BIT (1) ALIGNED;
      880    11477        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:155  
      881    11478        /* CODE */
      882    11479    4      I = 0;

  11479  3 001560   200041 450100                    STZ     I,,AUTO

      883    11480    4      HANDLER_FOUND = %FALSE;

  11480  3 001561   200042 450100                    STZ     HANDLER_FOUND,,AUTO

      884    11481    5      DO WHILE ( ~HANDLER_FOUND & I <= %LAST_XREF_ENTRY);

  11481  3 001562   001602 710000 3                  TRA     s:11485

      885    11482    5         IF (FEP.CONFIG_ID(TEST_NUM) = TEST_XREF.CONFIG_ID(I))

  11482  3 001563   200040 470500                    LDP0    @TEST_NUM,,AUTO
         3 001564   000000 236100                    LDQ     0,,PR0
         3 001565   000006 402007                    MPY     6,DL
         3 001566   000001 736000                    QLS     1
         3 001567   000005 220006 1                  LDX0    FEP+4,QL
         3 001570   200041 236100                    LDQ     I,,AUTO
         3 001571   000012 402007                    MPY     10,DL
         3 001572   000001 100006 2                  CMPX0   TEST_XREF,QL
         3 001573   001577 601000 3                  TNZ     s:11484

      886    11483    5         THEN HANDLER_FOUND = %TRUE ;

  11483  3 001574   400000 236003                    LDQ     -131072,DU
         3 001575   200042 756100                    STQ     HANDLER_FOUND,,AUTO
         3 001576   001602 710000 3                  TRA     s:11485

      887    11484    5         ELSE I = I + 1 ;

  11484  3 001577   200041 235100                    LDA     I,,AUTO
         3 001600   000001 035007                    ADLA    1,DL
         3 001601   200041 755100                    STA     I,,AUTO

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:156  
      888    11485    5      END; /* WHILE */

  11485  3 001602   400000 220003                    LDX0    -131072,DU
         3 001603   200041 235100                    LDA     I,,AUTO
         3 001604   000021 115007                    CMPA    17,DL
         3 001605   001607 602000 3                  TNC     s:11485+5
         3 001606   000000 220003                    LDX0    0,DU
         3 001607   200042 236100                    LDQ     HANDLER_FOUND,,AUTO
         3 001610   400000 376003                    ANQ     -131072,DU
         3 001611   400000 676003                    ERQ     -131072,DU
         3 001612   200062 756100                    STQ     I+2,,AUTO
         3 001613   000000 636010                    EAQ     0,X0
         3 001614   200062 376100                    ANQ     I+2,,AUTO
         3 001615   001563 601000 3                  TNZ     s:11482

      889    11486    4      IF ~HANDLER_FOUND

  11486  3 001616   200042 236100                    LDQ     HANDLER_FOUND,,AUTO
         3 001617   400000 376003                    ANQ     -131072,DU
         3 001620   400000 676003                    ERQ     -131072,DU
         3 001621   001633 600000 3                  TZE     s:11492

      890    11487    5      THEN DO;

      891    11488    5              TOC_ERROR_CODE.ERR# = %E$BADLINE;

  11488  3 001622   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 001623   000001 376000 4                  ANQ     1
         3 001624   000130 276007                    ORQ     88,DL
         3 001625   000000 756000 1                  STQ     TOC_ERROR_CODE

      892    11489    5              CALL TOX$ERROR (TOC_ERROR_CODE);

  11489  3 001626   000002 630400 4                  EPPR0   2
         3 001627   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001630   000000 701000 xent               TSX1    TOX$ERROR
         3 001631   000000 011000                    NOP     0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:157  

      893    11490    5           END;

  11490  3 001632   001650 710000 3                  TRA     s:11496

      894    11491    5      ELSE DO;

      895    11492    5              TEST_XREF_ENTRY_NUM = I;

  11492  3 001633   200037 470500                    LDP0    @TEST_XREF_ENTRY_NUM,,AUTO
         3 001634   000000 755100                    STA     0,,PR0

      896    11493    5              FEP.TEST_TYPE(TEST_NUM) = TEST_XREF.TEST_TYPE(I);

  11493  3 001635   200040 471500                    LDP1    @TEST_NUM,,AUTO
         3 001636   100000 236100                    LDQ     0,,PR1
         3 001637   000006 402007                    MPY     6,DL
         3 001640   000001 736000                    QLS     1
         3 001641   000000 620006                    EAX0    0,QL
         3 001642   200041 236100                    LDQ     I,,AUTO
         3 001643   000012 402007                    MPY     10,DL
         3 001644   000001 721006 2                  LXL1    TEST_XREF,QL
         3 001645   000006 741010 1                  STX1    FEP+5,X0

      897    11494    5              RETURN;

  11494  3 001646   200036 221300                    LDX1  ! J,,AUTO
         3 001647   000001 702211                    TSX2  ! 1,X1

      898    11495    5           END;
      899    11496    4   END FIND_HANDLER;

  11496  3 001650   200036 221300                    LDX1  ! J,,AUTO
         3 001651   000001 702211                    TSX2  ! 1,X1

      900    11497        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:158  
      901    11498        /*I* NAME:         ASSIGN_DCB
      902    11499             AUTHOR:       Curt Andes
      903    11500             PURPOSE:      Determine the DCB a host test will use
      904    11501             INTERFACE:    NEW_DCB
      905    11502             PARAMETERS:   The entry number in TEST_XREF for the current test
      906    11503                           The entry number in the FEP table for the current test
      907    11504             DATA:         TEST_XREF
      908    11505                           FEP
      909    11506             DESCRIPTION:  When a test gets to the point where it needs a
      910    11507                           DCB assigned to it  so that it can communicate
      911    11508                           with the FEP, this  procedure is the baby that
      912    11509                           will  determine  the  DCB  the  test will use.
      913    11510                           COLTS will  load only one copy  of a given FEP
      914    11511                           I/O handler into a particular FEP at one time.
      915    11512                           This means that if 2 tests for the same device
      916    11513                           type  are being  run on  the same  FEP, but on
      917    11514                           different bus addresses,  both host test pages
      918    11515                           will  communicate to the  same FEP handler via
      919    11516                           the  same   DCB.   This  procedure  determines
      920    11517                           whether or  not a DCB is  already open for the
      921    11518                           FEP and  handler that are required  to run the
      922    11519                           test.  A  DCB  is  considered  'open' if there
      923    11520                           exists  another  FEP  table  entry which has a
      924    11521                           status of 'ACTIVE' and either 'TEST_CONNECTED'
      925    11522                           or  'TCONN_WAITING'  (a  "START  TEST" ICM has
      926    11523                           been  issued, but  the I/O  has not completed)
      927    11524                           which  uses the DCB.   If the DCB  is open, we
      928    11525                           will not try to  open it again, but merely set
      929    11526                           the test status 'DCB_OPEN'.  If the DCB is not
      930    11527                           open,  NEW_DCB  is  called  and  a new DCB  is
      931    11528                           assigned to the test.
      932    11529        */
      933    11530        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:159  
      934    11531    3   ASSIGN_DCB: PROC (XREF_INDEX,FEP_INDEX);

  11531  3 001652   200036 741300       ASSIGN_DCB   STX1  ! J,,AUTO

      935    11532
      936    11533        /* Variables */
      937    11534    4      DCL XREF_INDEX UBIN WORD ALIGNED;
      938    11535    4      DCL FEP_INDEX UBIN WORD ALIGNED;
      939    11536    4      DCL K UBIN WORD ALIGNED;
      940    11537    4      DCL DCB_NUM_FOUND BIT (1) CALIGNED;
      941    11538
      942    11539        /* Code */
      943    11540
      944    11541    4      K = 0;

  11541  3 001653   200041 450100                    STZ     K,,AUTO

      945    11542    4      DCB_NUM_FOUND = %FALSE;

  11542  3 001654   200042 450100                    STZ     DCB_NUM_FOUND,,AUTO

      946    11543    5      DO WHILE (~DCB_NUM_FOUND & K <= %LAST_FEP);

  11543  3 001655   001745 710000 3                  TRA     s:11553

      947    11544    5         IF (FEP.STATUS.ACTIVE(K)) &

  11544  3 001656   200041 236100                    LDQ     K,,AUTO
         3 001657   000014 402007                    MPY     12,DL
         3 001660   000001 236006 1                  LDQ     FEP,QL
         3 001661   000007 736000                    QLS     7
         3 001662   400000 376003                    ANQ     -131072,DU
         3 001663   200062 756100                    STQ     I+2,,AUTO
         3 001664   200041 236100                    LDQ     K,,AUTO
         3 001665   000014 402007                    MPY     12,DL
         3 001666   000001 236006 1                  LDQ     FEP,QL
         3 001667   000002 736000                    QLS     2
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:160  
         3 001670   400000 376003                    ANQ     -131072,DU
         3 001671   200062 276100                    ORQ     I+2,,AUTO
         3 001672   200063 756100                    STQ     I+3,,AUTO
         3 001673   200041 236100                    LDQ     K,,AUTO
         3 001674   000014 402007                    MPY     12,DL
         3 001675   000001 236006 1                  LDQ     FEP,QL
         3 001676   400000 376003                    ANQ     -131072,DU
         3 001677   200064 756100                    STQ     I+4,,AUTO
         3 001700   200063 236100                    LDQ     I+3,,AUTO
         3 001701   200064 376100                    ANQ     I+4,,AUTO
         3 001702   001742 600000 3                  TZE     s:11552

      948    11545    5                 (FEP.STATUS.TEST_CONNECTED(K) |
      949    11546    5                 FEP.STATUS.TCONN_WAITING(K))
      950    11547    5         THEN IF FEP.LOGICAL_NUM(K) = FEP.LOGICAL_NUM(FEP_INDEX)

  11547  3 001703   200040 470500                    LDP0    @FEP_INDEX,,AUTO
         3 001704   000000 236100                    LDQ     0,,PR0
         3 001705   000006 402007                    MPY     6,DL
         3 001706   000000 620006                    EAX0    0,QL
         3 001707   200041 236100                    LDQ     K,,AUTO
         3 001710   000014 402007                    MPY     12,DL
         3 001711   000002 221006 1                  LDX1    FEP+1,QL
         3 001712   000000 635010                    EAA     0,X0
         3 001713   000021 771000                    ARL     17
         3 001714   000002 101005 1                  CMPX1   FEP+1,AL
         3 001715   001736 601000 3                  TNZ     s:11551

      951    11548    5            THEN IF FEP.TEST_TYPE(K) = TEST_XREF.TEST_TYPE(XREF_INDEX)

  11548  3 001716   200037 471500                    LDP1    @XREF_INDEX,,AUTO
         3 001717   100000 236100                    LDQ     0,,PR1
         3 001720   000005 402007                    MPY     5,DL
         3 001721   000001 736000                    QLS     1
         3 001722   000001 721006 2                  LXL1    TEST_XREF,QL
         3 001723   200041 236100                    LDQ     K,,AUTO
         3 001724   000014 402007                    MPY     12,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:161  
         3 001725   000006 101006 1                  CMPX1   FEP+5,QL
         3 001726   001732 601000 3                  TNZ     s:11550

      952    11549    5               THEN DCB_NUM_FOUND = %TRUE;

  11549  3 001727   400000 236003                    LDQ     -131072,DU
         3 001730   200042 756100                    STQ     DCB_NUM_FOUND,,AUTO
         3 001731   001745 710000 3                  TRA     s:11553

      953    11550    5               ELSE K = K+1;

  11550  3 001732   200041 235100                    LDA     K,,AUTO
         3 001733   000001 035007                    ADLA    1,DL
         3 001734   200041 755100                    STA     K,,AUTO
         3 001735   001745 710000 3                  TRA     s:11553

      954    11551    5            ELSE K = K+1;

  11551  3 001736   200041 235100                    LDA     K,,AUTO
         3 001737   000001 035007                    ADLA    1,DL
         3 001740   200041 755100                    STA     K,,AUTO
         3 001741   001745 710000 3                  TRA     s:11553

      955    11552    5         ELSE K = K+1;

  11552  3 001742   200041 235100                    LDA     K,,AUTO
         3 001743   000001 035007                    ADLA    1,DL
         3 001744   200041 755100                    STA     K,,AUTO

      956    11553    5      END;

  11553  3 001745   400000 220003                    LDX0    -131072,DU
         3 001746   200041 235100                    LDA     K,,AUTO
         3 001747   000010 115007                    CMPA    8,DL
         3 001750   001752 602000 3                  TNC     s:11553+5
         3 001751   000000 220003                    LDX0    0,DU
         3 001752   200042 236100                    LDQ     DCB_NUM_FOUND,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:162  
         3 001753   400000 376003                    ANQ     -131072,DU
         3 001754   400000 676003                    ERQ     -131072,DU
         3 001755   200062 756100                    STQ     I+2,,AUTO
         3 001756   000000 636010                    EAQ     0,X0
         3 001757   200062 376100                    ANQ     I+2,,AUTO
         3 001760   001656 601000 3                  TNZ     s:11544

      957    11554    4      IF DCB_NUM_FOUND

  11554  3 001761   200042 234100                    SZN     DCB_NUM_FOUND,,AUTO
         3 001762   002003 605000 3                  TPL     s:11559

      958    11555    5      THEN DO;

      959    11556    5              FEP.DCB_NUM(FEP_INDEX) = FEP.DCB_NUM(K);

  11556  3 001763   200040 470500                    LDP0    @FEP_INDEX,,AUTO
         3 001764   000000 236100                    LDQ     0,,PR0
         3 001765   000006 402007                    MPY     6,DL
         3 001766   000001 736000                    QLS     1
         3 001767   000000 620006                    EAX0    0,QL
         3 001770   200041 236100                    LDQ     K,,AUTO
         3 001771   000014 402007                    MPY     12,DL
         3 001772   000001 721006 1                  LXL1    FEP,QL
         3 001773   000001 441010 1                  SXL1    FEP,X0

      960    11557    5              FEP.STATUS.DCB_OPEN(FEP_INDEX) = %TRUE;

  11557  3 001774   000000 236100                    LDQ     0,,PR0
         3 001775   000006 402007                    MPY     6,DL
         3 001776   000001 736000                    QLS     1
         3 001777   000000 620006                    EAX0    0,QL
         3 002000   000200 236003                    LDQ     128,DU
         3 002001   000001 256010 1                  ORSQ    FEP,X0

      961    11558    5           END;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:163  
  11558  3 002002   002007 710000 3                  TRA     s:11560

      962    11559    4      ELSE CALL NEW_DCB (FEP_INDEX);

  11559  3 002003   200040 236100                    LDQ     @FEP_INDEX,,AUTO
         3 002004   200045 756100                    STQ     @TEST_NUM+2,,AUTO
         3 002005   002011 701000 3                  TSX1    NEW_DCB
         3 002006   000000 011000                    NOP     0

      963    11560    4      RETURN;

  11560  3 002007   200036 221300                    LDX1  ! J,,AUTO
         3 002010   000001 702211                    TSX2  ! 1,X1

      964    11561        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:164  
      965    11562        /*I* NAME:         NEW_DCB
      966    11563             AUTHOR:       Curt Andes
      967    11564             PURPOSE:      Find an unused DCB for a host test
      968    11565             INTERFACE:    M$GETDCB Monitor Service
      969    11566                           TOX$ERROR
      970    11567                           TOX$SCREECH
      971    11568             PARAMETERS:   TEST_XREF entry for the current test
      972    11569             DATA:         TOC_ERROR_CODE
      973    11570                           FEP.DCB_NUM
      974    11571                           FEP.STATUS.DCB_OPEN
      975    11572                           COLTS_DCBS
      976    11573             DESCRIPTION:  This procedure will obtain a DCB using M$GETDCB, and
      977    11574                           set the COLTS_DCBS value to the number of the DCB obtained.
      978    11575                           If 8 DCBs have already been obtained, then the COLTS_DCBS
      979    11576                           table will be full, and COLTS will abort as this should
      980    11577                           never happen.
      981    11578        */
      982    11579
      983    11580    4   NEW_DCB: PROC (FEP_INDEX);

  11580  3 002011   200044 741300       NEW_DCB      STX1  ! @TEST_NUM+1,,AUTO

      984    11581
      985    11582        /* VARIABLES */
      986    11583
      987    11584    5      DCL FEP_INDEX    UBIN WORD ALIGNED;
      988    11585    5      DCL DCBX         UBIN WORD ALIGNED;
      989    11586    5      DCL NO_DCB_OBTAINED BIT (1) CALIGNED;
      990    11587    5      DCL DCB_NUM     UBIN WORD STATIC ALIGNED ;
      991    11588    5      DCL 1 DCB_NAME  STATIC CALIGNED,
      992    11589    5            2 LGTH    UBIN BYTE CALIGNED INIT (10),
      993    11590    5            2 VALUE   CHAR (9) CALIGNED INIT ('COLTS_DCB'),
      994    11591    5            2 DCBX    CHAR (1) CALIGNED ;
      995    11592           %FPT_GETDCB     (FPTN = GET_COLTS_DCB,
      996    11593                            DCBNAME = DCB_NAME,
      997    11594                            DCBNUM = DCB_NUM) ;
      998    11609        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:165  
      999    11610        /* CODE */
     1000    11611
     1001    11612    5      DCBX = 0 ;

  11612  3 002012   200046 450100                    STZ     DCBX,,AUTO

     1002    11613    5      NO_DCB_OBTAINED = %TRUE ;

  11613  3 002013   400000 236003                    LDQ     -131072,DU
         3 002014   200047 756100                    STQ     NO_DCB_OBTAINED,,AUTO

     1003    11614    6      DO WHILE NO_DCB_OBTAINED & (DCBX <= %LAST_FEP) ;

  11614  3 002015   002060 710000 3                  TRA     s:11625

     1004    11615    6         IF COLTS_DCBS (DCBX) ~= %UNDEFINED

  11615  3 002016   200046 720100                    LXL0    DCBX,,AUTO
         3 002017   000143 235010 1                  LDA     COLTS_DCBS,X0
         3 002020   000027 115000 xsym               CMPA    B_VECTNIL+23
         3 002021   002026 600000 3                  TZE     s:11618

     1005    11616    6         THEN DCBX = DCBX + 1 ;

  11616  3 002022   200046 236100                    LDQ     DCBX,,AUTO
         3 002023   000001 036007                    ADLQ    1,DL
         3 002024   200046 756100                    STQ     DCBX,,AUTO
         3 002025   002060 710000 3                  TRA     s:11625

     1006    11617    7         ELSE DO ;

     1007    11618    7                 CALL BINCHAR (DCB_NAME.DCBX, DCBX) ;

  11618  3 002026   200046 236100                    LDQ     DCBX,,AUTO
         3 002027   000000 235003                    LDA     0,DU
         3 002030   200062 757100                    STAQ    I+2,,AUTO
         3 002031   000000 301500                    BTD
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:166  
         3 002032   200062 000010                    NDSC9   I+2,,AUTO                cn=0,s=lsgnf,sf=0,n=8
         3 002033   000403 430001 1                  NDSC9   DCB_NAME+2               cn=2,s=nosgn,sf=0,n=1

     1008    11619    7                 CALL M$GETDCB (GET_COLTS_DCB) ALTRET (DCBERR) ;

  11619  3 002034   000404 630400 1                  EPPR0   GET_COLTS_DCB
         3 002035   460002 713400                    CLIMB   alt,+24578
         3 002036   401000 401760                    pmme    nvectors=3
         3 002037   002110 702000 3                  TSX2    DCBERR

     1009    11620    7                 COLTS_DCBS (DCBX) = DCB_NUM ;

  11620  3 002040   000400 235000 1                  LDA     DCB_NUM
         3 002041   200046 720100                    LXL0    DCBX,,AUTO
         3 002042   000143 755010 1                  STA     COLTS_DCBS,X0

     1010    11621    7                 FEP.DCB_NUM (FEP_INDEX) = DCB_NUM ;

  11621  3 002043   200045 470500                    LDP0    @FEP_INDEX,,AUTO
         3 002044   000000 236100                    LDQ     0,,PR0
         3 002045   000006 402007                    MPY     6,DL
         3 002046   000001 736000                    QLS     1
         3 002047   000400 721000 1                  LXL1    DCB_NUM
         3 002050   000001 441006 1                  SXL1    FEP,QL

     1011    11622    7                 FEP.STATUS.DCB_OPEN (FEP_INDEX) = %FALSE ;

  11622  3 002051   000000 236100                    LDQ     0,,PR0
         3 002052   000006 402007                    MPY     6,DL
         3 002053   000001 736000                    QLS     1
         3 002054   000000 621006                    EAX1    0,QL
         3 002055   000010 236000 4                  LDQ     8
         3 002056   000001 356011 1                  ANSQ    FEP,X1

     1012    11623    7                 NO_DCB_OBTAINED = %FALSE ;

  11623  3 002057   200047 450100                    STZ     NO_DCB_OBTAINED,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:167  

     1013    11624    7              END /* ELSE DO */ ;

     1014    11625    6      END /* WHILE */ ;

  11625  3 002060   400000 220003                    LDX0    -131072,DU
         3 002061   200046 235100                    LDA     DCBX,,AUTO
         3 002062   000010 115007                    CMPA    8,DL
         3 002063   002065 602000 3                  TNC     s:11625+5
         3 002064   000000 220003                    LDX0    0,DU
         3 002065   200047 236100                    LDQ     NO_DCB_OBTAINED,,AUTO
         3 002066   400000 376003                    ANQ     -131072,DU
         3 002067   200062 756100                    STQ     I+2,,AUTO
         3 002070   000000 636010                    EAQ     0,X0
         3 002071   200062 376100                    ANQ     I+2,,AUTO
         3 002072   002016 601000 3                  TNZ     s:11615

     1015    11626
     1016    11627    5      IF NO_DCB_OBTAINED

  11627  3 002073   200047 234100                    SZN     NO_DCB_OBTAINED,,AUTO
         3 002074   002106 605000 3                  TPL     s:11632

     1017    11628    6      THEN DO ;

     1018    11629    6              TOC_ERROR_CODE.ERR# = %E$NODCB ;

  11629  3 002075   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 002076   000001 376000 4                  ANQ     1
         3 002077   000210 276007                    ORQ     136,DL
         3 002100   000000 756000 1                  STQ     TOC_ERROR_CODE

     1019    11630    6              CALL TOX$SCREECH (TOC_ERROR_CODE) ;

  11630  3 002101   000002 630400 4                  EPPR0   2
         3 002102   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002103   000000 701000 xent               TSX1    TOX$SCREECH
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:168  
         3 002104   000000 011000                    NOP     0

     1020    11631    6           END /* THEN DO */ ;

  11631  3 002105   002110 710000 3                  TRA     DCBERR

     1021    11632    5      ELSE RETURN ;

  11632  3 002106   200044 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 002107   000001 702211                    TSX2  ! 1,X1

     1022    11633
     1023    11634    5   DCBERR:
     1024    11635    5      CALL TOX$ERROR (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR) ;

  11635  3 002110   000000 470400 xsym  DCBERR       LDP0    B$TCB$
         3 002111   000000 471500                    LDP1    0,,PR0
         3 002112   100102 633500                    EPPR3   66,,PR1
         3 002113   200062 453500                    STP3    I+2,,AUTO
         3 002114   200062 630500                    EPPR0   I+2,,AUTO
         3 002115   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002116   000000 701000 xent               TSX1    TOX$ERROR
         3 002117   000000 011000                    NOP     0

     1025    11636    5      RETURN ;

  11636  3 002120   200044 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 002121   000001 702211                    TSX2  ! 1,X1

     1026    11637
     1027    11638    5   END NEW_DCB;
     1028    11639    4   END ASSIGN_DCB;
     1029    11640        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:169  
     1030    11641        /*I* NAME:         OPEN_DCB
     1031    11642             AUTHOR:       Curt Andes
     1032    11643             PURPOSE:      Open the communications path to the FEP
     1033    11644             INTERFACE:    M$OPEN
     1034    11645                           TOX$WARN
     1035    11646                           TOX$ERROR
     1036    11647             PARAMETERS:   FEP table entry we are working with
     1037    11648             DATA:         OPEN_HANDLER_PATH
     1038    11649                           FEP
     1039    11650             DESCRIPTION:  This procedure calls M$OPEN to open the DCB to
     1040    11651                           communicate  with  an  FEP.   When  the dcb is
     1041    11652                           opened,  a handler name  is specified that the
     1042    11653                           MONITOR  service  will  down-line  load to the
     1043    11654                           FEP. If the FEP status table has DCB_OPEN set,
     1044    11655                           then  this routine will  return without making
     1045    11656                           the MONITOR service call, the assumption being
     1046    11657                           that  the  correct  handler  is already in the
     1047    11658                           FEP. If an ALTRETURN  is taken by M$OPEN, then
     1048    11659                           COLTS will abort.
     1049    11660        */
     1050    11661
     1051    11662    3   OPEN_DCB: PROC (XREF_INX,TEST_NUM) ALTRET;

  11662  3 002122   200036 741300       OPEN_DCB     STX1  ! J,,AUTO

     1052    11663
     1053    11664        /* Variables */
     1054    11665
     1055    11666    4      DCL XREF_INX UBIN WORD ALIGNED;
     1056    11667    4      DCL TEST_NUM UBIN WORD ALIGNED;
     1057    11668    4      DCL WORK UBIN HALF HALIGNED;
     1058    11669    4      DCL 1 WRK REDEF WORK,
     1059    11670    4            2 UPPER UBIN (10) UNAL,
     1060    11671    4            2 LOWER UBIN (8) UNAL;
     1061    11672    4      DCL WORK_ASC CHAR (2) CALIGNED;
     1062    11673        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:170  
     1063    11674        /* Code */
     1064    11675
     1065    11676    4      IF FEP.STATUS.DCB_OPEN(TEST_NUM)

  11676  3 002123   200040 470500                    LDP0    @TEST_NUM,,AUTO
         3 002124   000000 236100                    LDQ     0,,PR0
         3 002125   000006 402007                    MPY     6,DL
         3 002126   000001 736000                    QLS     1
         3 002127   000001 236006 1                  LDQ     FEP,QL
         3 002130   000200 316003                    CANQ    128,DU
         3 002131   002141 600000 3                  TZE     s:11681

     1066    11677    5      THEN DO;

     1067    11678    5              FEP.STATUS.TCONN_WAITING(TEST_NUM) = %TRUE;

  11678  3 002132   000000 236100                    LDQ     0,,PR0
         3 002133   000006 402007                    MPY     6,DL
         3 002134   000001 736000                    QLS     1
         3 002135   000000 620006                    EAX0    0,QL
         3 002136   002000 236003                    LDQ     1024,DU
         3 002137   000001 256010 1                  ORSQ    FEP,X0

     1068    11679    5           END;

  11679  3 002140   002256 710000 3                  TRA     s:11701

     1069    11680    5      ELSE DO;

     1070    11681    5              OPEN_HNDLR_PATH.V.DCB# = FEP.DCB_NUM(TEST_NUM);

  11681  3 002141   000000 236100                    LDQ     0,,PR0
         3 002142   000006 402007                    MPY     6,DL
         3 002143   000001 736000                    QLS     1
         3 002144   000001 720006 1                  LXL0    FEP,QL
         3 002145   000240 740000 1                  STX0    OPEN_HNDLR_PATH+36

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:171  
     1071    11682    5              WORK = FEP.NUM(TEST_NUM);

  11682  3 002146   000000 236100                    LDQ     0,,PR0
         3 002147   000006 402007                    MPY     6,DL
         3 002150   000001 736000                    QLS     1
         3 002151   000002 722006 1                  LXL2    FEP+1,QL
         3 002152   200041 742100                    STX2    WORK,,AUTO

     1072    11683    5              WRK.UPPER = WRK.UPPER/2;

  11683  3 002153   200041 236100                    LDQ     WORK,,AUTO
         3 002154   000032 772000                    QRL     26
         3 002155   000001 772000                    QRL     1
         3 002156   000032 736000                    QLS     26
         3 002157   200041 676100                    ERQ     WORK,,AUTO
         3 002160   777400 376003                    ANQ     -256,DU
         3 002161   200041 656100                    ERSQ    WORK,,AUTO

     1073    11684    5              CALL BINCHAR (WORK_ASC, WORK);

  11684  3 002162   200041 235100                    LDA     WORK,,AUTO
         3 002163   000022 771000                    ARL     18
         3 002164   000044 773000                    LRL     36
         3 002165   200062 757100                    STAQ    I+2,,AUTO
         3 002166   000100 301500                    BTD
         3 002167   200062 000010                    NDSC9   I+2,,AUTO                cn=0,s=lsgnf,sf=0,n=8
         3 002170   200042 030002                    NDSC9   WORK_ASC,,AUTO           cn=0,s=nosgn,sf=0,n=2

     1074    11685    5              CALL CONCAT (OPEN_HNDLR_PATH.V.RES#, 'FE', WORK_ASC);

  11685  3 002171   000253 222000 2                  LDX2    TEST_XREF+170
         3 002172   000244 742000 1                  STX2    OPEN_HNDLR_PATH+40
         3 002173   200042 223100                    LDX3    WORK_ASC,,AUTO
         3 002174   000244 443000 1                  SXL3    OPEN_HNDLR_PATH+40

     1075    11686    5              START_HNDLR.NAME.C# = TEST_XREF.HANDLER_NAME(XREF_INX);

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:172  
  11686  3 002175   200037 470500                    LDP0    @XREF_INX,,AUTO
         3 002176   000000 236100                    LDQ     0,,PR0
         3 002177   000005 402007                    MPY     5,DL
         3 002200   000003 736000                    QLS     3
         3 002201   040000 100406                    MLR     fill='040'O
         3 002202   000002 400037 2                  ADSC9   TEST_XREF+1,Q            cn=2,n=31
         3 002203   000270 200037 1                  ADSC9   START_HNDLR+2            cn=1,n=31

     1076    11687    5              START_HNDLR.NAME.L# = TEST_XREF.NAME_LENGTH(XREF_INX);

  11687  3 002204   000000 236100                    LDQ     0,,PR0
         3 002205   000005 402007                    MPY     5,DL
         3 002206   000001 736000                    QLS     1
         3 002207   000002 236006 2                  LDQ     TEST_XREF+1,QL
         3 002210   000011 736000                    QLS     9
         3 002211   000270 552040 1                  STBQ    START_HNDLR+2,'40'O

     1077    11688    5              CALL M$OPEN (OPEN_HNDLR_PATH) WHENRETURN

  11688  3 002212   000174 630400 1                  EPPR0   OPEN_HNDLR_PATH
         3 002213   450000 713400                    CLIMB   alt,open
         3 002214   410400 401760                    pmme    nvectors=18
         3 002215   002234 702000 3                  TSX2    s:11695

     1078    11689    6                   DO;

     1079    11690    6                      FEP.STATUS.TCONN_WAITING(TEST_NUM) = %TRUE;

  11690  3 002216   200040 470500                    LDP0    @TEST_NUM,,AUTO
         3 002217   000000 236100                    LDQ     0,,PR0
         3 002220   000006 402007                    MPY     6,DL
         3 002221   000001 736000                    QLS     1
         3 002222   000000 620006                    EAX0    0,QL
         3 002223   002000 236003                    LDQ     1024,DU
         3 002224   000001 256010 1                  ORSQ    FEP,X0

     1080    11691    6                      FEP.STATUS.DCB_OPEN(TEST_NUM) = %TRUE;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:173  

  11691  3 002225   000000 236100                    LDQ     0,,PR0
         3 002226   000006 402007                    MPY     6,DL
         3 002227   000001 736000                    QLS     1
         3 002230   000000 620006                    EAX0    0,QL
         3 002231   000200 236003                    LDQ     128,DU
         3 002232   000001 256010 1                  ORSQ    FEP,X0

     1081    11692    6                   END;

  11692  3 002233   002256 710000 3                  TRA     s:11701

     1082    11693    5              WHENALTRETURN
     1083    11694    6                   DO;

     1084    11695    6                      CALL TOX$WARN (B$TCB$-> B$TCB.ALT$ -> B$ALT.ERR);

  11695  3 002234   000000 470400 xsym               LDP0    B$TCB$
         3 002235   000000 471500                    LDP1    0,,PR0
         3 002236   100102 633500                    EPPR3   66,,PR1
         3 002237   200062 453500                    STP3    I+2,,AUTO
         3 002240   200062 630500                    EPPR0   I+2,,AUTO
         3 002241   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002242   000000 701000 xent               TSX1    TOX$WARN
         3 002243   000000 011000                    NOP     0

     1085    11696    6                      TOC_ERROR_CODE.ERR# = %E$CANTOPENFPRG;

  11696  3 002244   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 002245   000001 376000 4                  ANQ     1
         3 002246   000330 276007                    ORQ     216,DL
         3 002247   000000 756000 1                  STQ     TOC_ERROR_CODE

     1086    11697    6                      CALL TOX$ERROR (TOC_ERROR_CODE);

  11697  3 002250   000002 630400 4                  EPPR0   2
         3 002251   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:174  
         3 002252   000000 701000 xent               TSX1    TOX$ERROR
         3 002253   000000 011000                    NOP     0

     1087    11698    6                      RETURN;

  11698  3 002254   200036 221300                    LDX1  ! J,,AUTO
         3 002255   000001 702211                    TSX2  ! 1,X1

     1088    11699    6                   END;
     1089    11700    5           END;

     1090    11701    4      RETURN;

  11701  3 002256   200036 221300                    LDX1  ! J,,AUTO
         3 002257   000001 702211                    TSX2  ! 1,X1

     1091    11702
     1092    11703    4   END OPEN_DCB;
     1093    11704    3   END SETUP_TEST_CONNECT;
     1094    11705        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:175  
     1095    11706        /*I* NAME:         COPY_ICM
     1096    11707             AUTHOR:       Curt Andes
     1097    11708             PURPOSE:      Copy an ICM from the write buffer to the receive
     1098    11709             INTERFACE:    None called.
     1099    11710             PARAMETERS:   The FEP table entry number we are working with
     1100    11711             DATA:         FEP
     1101    11712             DESCRIPTION:  Using  the pointers  in the  FEP table for the
     1102    11713                           ICM    (ICM$)    and    the   receive   buffer
     1103    11714                           (RECEIVE_ICM$),  this procedure  copies an ICM
     1104    11715                           from  the write buffer  to the receive buffer.
     1105    11716                           It copies the number of words specified in the
     1106    11717                           ICM. (ICM.WDCNT)
     1107    11718
     1108    11719        */
     1109    11720    2   COPY_ICM: PROC (TEST_NUM);

  11720  3 002260   200036 741300       COPY_ICM     STX1  ! J,,AUTO

     1110    11721
     1111    11722        /* Variables */
     1112    11723
     1113    11724    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1114    11725    3      DCL I UBIN WORD ALIGNED;
     1115    11726
     1116    11727        /* Code */
     1117    11728
     1118    11729    4      DO I = 0 TO ((FEP.ICM$(TEST_NUM)->ICM.WDCNT/2) - 1 ) ;

  11729  3 002261   200040 450100                    STZ     I,,AUTO
         3 002262   002302 710000 3                  TRA     s:11732+3

     1119    11730    4         FEP.RECEIVE_ICM$(TEST_NUM)->ICM_BUFFER(I) =

  11730  3 002263   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 002264   000000 236100                    LDQ     0,,PR0
         3 002265   000006 402007                    MPY     6,DL
         3 002266   000001 736000                    QLS     1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:176  
         3 002267   000012 471406 1                  LDP1    FEP+9,QL
         3 002270   000000 236100                    LDQ     0,,PR0
         3 002271   000006 402007                    MPY     6,DL
         3 002272   000001 736000                    QLS     1
         3 002273   000011 473406 1                  LDP3    FEP+8,QL
         3 002274   200040 720100                    LXL0    I,,AUTO
         3 002275   300000 235110                    LDA     0,X0,PR3
         3 002276   100000 755110                    STA     0,X0,PR1

     1120    11731    4                 FEP.ICM$(TEST_NUM)->ICM_BUFFER(I);
     1121    11732    4      END;

  11732  3 002277   200040 235100                    LDA     I,,AUTO
         3 002300   000001 035007                    ADLA    1,DL
         3 002301   200040 755100                    STA     I,,AUTO
         3 002302   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 002303   000000 236100                    LDQ     0,,PR0
         3 002304   000006 402007                    MPY     6,DL
         3 002305   000001 736000                    QLS     1
         3 002306   000011 471406 1                  LDP1    FEP+8,QL
         3 002307   100001 236100                    LDQ     1,,PR1
         3 002310   000777 376007                    ANQ     511,DL
         3 002311   000001 772000                    QRL     1
         3 002312   200040 116100                    CMPQ    I,,AUTO
         3 002313   002315 600000 3                  TZE     s:11733
         3 002314   002263 603000 3                  TRC     s:11730

     1122    11733    3      RETURN;

  11733  3 002315   200036 221300                    LDX1  ! J,,AUTO
         3 002316   000001 702211                    TSX2  ! 1,X1

     1123    11734    3   END COPY_ICM;
     1124    11735    2   END GEROUT_ICM;
     1125    11736        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:177  
     1126    11737        /*I* NAME:         GEROUT_REMOTE_INQUIRY
     1127    11738             AUTHOR:       Curt Andes
     1128    11739             PURPOSE:      Connect test & exec lines via the GEROUT REMOTE INQUIRY
     1129    11740             INTERFACE:    TOX$ERROR
     1130    11741                           CONNECT_TO_SLAVE
     1131    11742             PARAMETERS:   None passed.
     1132    11743             DATA:         SLAVE_CONNECT - output
     1133    11744                           RETURN_DELTA
     1134    11745                           FEP.STATUS.CONNECT_QUEUED
     1135    11746             DESCRIPTION:  CCLT  does this  MME to  establish a simulated
     1136    11747                           DAC line  between CCLT and the  tests that are
     1137    11748                           running, as well  as the controlling terminal.
     1138    11749                           All of which is  very meaningful in GCOS land,
     1139    11750                           but rather boring in  CP-6.  The line IDs that
     1140    11751                           are returned  to CCLT as a  result of it doing
     1141    11752                           this MME are generated by COLTS during service
     1142    11753                           of the MME COINIT. This MME is used to connect
     1143    11754                           both  the  exec  lines  (via  the  MME  GEROUT
     1144    11755                           COLTS_WAKEUP)  and the  test lines  (via COLTS
     1145    11756                           detection  of a "START  TEST" ICM being issued
     1146    11757                           by the subexec).  This procedure checks to see
     1147    11758                           if   there   is   already   a   REMOTE_INQUIRY
     1148    11759                           outstanding to COLTS.  If there is, COLTS will
     1149    11760                           abort.    Only   one   REMOTE_INQUIRY  can  be
     1150    11761                           outstanding at a time. If no REMOTE_INQUIRY is
     1151    11762                           already outstanding, then SLAVE_CONNECT.STATUS
     1152    11763                           is  set  to  PENDING,  the  connect pointer is
     1153    11764                           saved and a call is made to CONNECT_TO_SLAVE.
     1154    11765
     1155    11766                           *MME calling sequence
     1156    11767                           MME        GEROUT
     1157    11768                           VFD        18/0,6/5,12/ **
     1158    11769                           BCI        1,.MCOLT
     1159    11770                           <return>
     1160    11771
     1161    11772                           Where ** is where COLTS will put the LINE_ID when and if the
     1162    11773                           the slave connection can be made.
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:178  
     1163    11774        */
     1164    11775    1   GEROUT_REMOTE_INQUIRY: PROC ;

  11775  3 002317   200022 741300       GEROUT_REMO* STX1  ! RESTORE$+2,,AUTO

     1165    11776
     1166    11777        /* Variables */
     1167    11778    2      DCL I UBIN WORD ALIGNED;
     1168    11779
     1169    11780        /* Code */
     1170    11781
     1171    11782    2      RETURN_DELTA = 3;

  11782  3 002320   000003 220003                    LDX0    3,DU
         3 002321   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002322   000000 740100                    STX0    0,,PR0

     1172    11783    2      I = 0;

  11783  3 002323   200023 450100                    STZ     I,,AUTO

     1173    11784    2      IF SLAVE_CONNECT.STATUS.PENDING

  11784  3 002324   000142 236000 1                  LDQ     SLAVE_CONNECT+1
         3 002325   000001 316003                    CANQ    1,DU
         3 002326   002340 600000 3                  TZE     s:11790

     1174    11785    3      THEN DO;

     1175    11786    3              TOC_ERROR_CODE.ERR# = %E$BADINQ;

  11786  3 002327   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 002330   000001 376000 4                  ANQ     1
         3 002331   000020 276007                    ORQ     16,DL
         3 002332   000000 756000 1                  STQ     TOC_ERROR_CODE

     1176    11787    3              CALL TOX$ERROR (TOC_ERROR_CODE);
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:179  

  11787  3 002333   000002 630400 4                  EPPR0   2
         3 002334   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002335   000000 701000 xent               TSX1    TOX$ERROR
         3 002336   000000 011000                    NOP     0

     1177    11788    3           END;

  11788  3 002337   002400 710000 3                  TRA     s:11801

     1178    11789    3      ELSE DO;

     1179    11790    3              SLAVE_CONNECT.STATUS.PENDING = %TRUE;

  11790  3 002340   000001 236003                    LDQ     1,DU
         3 002341   000142 256000 1                  ORSQ    SLAVE_CONNECT+1

     1180    11791    3              SLAVE_CONNECT.PTR$ = PINCRW (MME_INSTR$,1);

  11791  3 002342   200005 471500                    LDP1    @MME_INSTR$,,AUTO
         3 002343   100000 236100                    LDQ     0,,PR1
         3 002344   000001 036003                    ADLQ    1,DU
         3 002345   000141 756000 1                  STQ     SLAVE_CONNECT

     1181    11792    4              DO WHILE (~FEP.STATUS.CONNECT_QUEUED(I) & I <= %LAST_FEP);

  11792  3 002346   002352 710000 3                  TRA     s:11794

     1182    11793    4                 I = I+1;

  11793  3 002347   200023 235100                    LDA     I,,AUTO
         3 002350   000001 035007                    ADLA    1,DL
         3 002351   200023 755100                    STA     I,,AUTO

     1183    11794    4              END;

  11794  3 002352   400000 220003                    LDX0    -131072,DU
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:180  
         3 002353   200023 235100                    LDA     I,,AUTO
         3 002354   000010 115007                    CMPA    8,DL
         3 002355   002357 602000 3                  TNC     s:11794+5
         3 002356   000000 220003                    LDX0    0,DU
         3 002357   200023 236100                    LDQ     I,,AUTO
         3 002360   000014 402007                    MPY     12,DL
         3 002361   000001 236006 1                  LDQ     FEP,QL
         3 002362   000003 736000                    QLS     3
         3 002363   400000 376003                    ANQ     -131072,DU
         3 002364   400000 676003                    ERQ     -131072,DU
         3 002365   200062 756100                    STQ     I+2,,AUTO
         3 002366   000000 636010                    EAQ     0,X0
         3 002367   200062 376100                    ANQ     I+2,,AUTO
         3 002370   002347 601000 3                  TNZ     s:11793

     1184    11795    3              IF I < %LAST_FEP+1

  11795  3 002371   200023 235100                    LDA     I,,AUTO
         3 002372   000010 115007                    CMPA    8,DL
         3 002373   002400 603000 3                  TRC     s:11801

     1185    11796    4              THEN DO;

     1186    11797    4                      CALL CONNECT_TO_SLAVE (I);

  11797  3 002374   200023 630500                    EPPR0   I,,AUTO
         3 002375   200047 450500                    STP0    NO_DCB_OBTAINED,,AUTO
         3 002376   004653 701000 3                  TSX1    CONNECT_TO_SLAVE
         3 002377   000000 011000                    NOP     0

     1187    11798    4                   END;

     1188    11799    3              ELSE;
     1189    11800    3           END;

     1190    11801    2      RETURN;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:181  
  11801  3 002400   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 002401   000001 702211                    TSX2  ! 1,X1

     1191    11802    2   END GEROUT_REMOTE_INQUIRY;
     1192    11803        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:182  
     1193    11804        /*I* NAME:         GEROUT_TERMINAL_TYPE_REQUEST
     1194    11805             AUTHOR:       Curt Andes
     1195    11806             PURPOSE:      Service GEROUT TERMINAL TYPE REQUEST
     1196    11807             INTERFACE:    None called.
     1197    11808             PARAMETERS:   Data word containing the LINE_ID for this request
     1198    11809             DATA:         FEP
     1199    11810                           RETURN_DELTA
     1200    11811             DESCRIPTION:  This  GEROUT type  is used  after CCLT detects
     1201    11812                           that  it has  received a  slave connect from a
     1202    11813                           line  in the form  of a LINE_ID  stored in the
     1203    11814                           GEROUT  REMOTE  INQUIRY  call  sequence.  CCLT
     1204    11815                           picks up  the LINE_ID and sends  it back to us
     1205    11816                           via  this  GEROUT   type.  The  FEP  table  is
     1206    11817                           searched  for  the  line  id,  and if the line
     1207    11818                           status  is ACTIVE,  the T&D  type code for the
     1208    11819                           entry  is  returned  to  the  subexec  in  the
     1209    11820                           calling sequence. Since  the T&D type code was
     1210    11821                           generated by CCLT in the first place, CCLT can
     1211    11822                           now determine which of it's test or exec lines
     1212    11823                           the new LINE_ID corresponds to. If the LINE_ID
     1213    11824                           cannot be found in  the FEP table or the entry
     1214    11825                           is   not  ACTIVE,   or  the   line  status  is
     1215    11826                           DISCONNECTED,  then  the  disconnect return is
     1216    11827                           taken.
     1217    11828
     1218    11829
     1219    11830                           *MME calling sequence
     1220    11831                           MME        GEROUT
     1221    11832                           VFD        6/ **,12/0,6/6,12/ line id
     1222    11833                           <return disconnected>
     1223    11834                           <return normal>
     1224    11835
     1225    11836                           The T&D type code is stored by COLTS in the field marked
     1226    11837                           "**" above.
     1227    11838        */
     1228    11839        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:183  
     1229    11840    1   GEROUT_TERMINAL_TYPE_REQUEST: PROC (DATA_WORD);

  11840  3 002402   200022 741300       GEROUT_TERM* STX1  ! RESTORE$+2,,AUTO

     1230    11841
     1231    11842        /* Variables */
     1232    11843
     1233    11844    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1234    11845    2      DCL 1 DATA REDEF DATA_WORD,
     1235    11846    2            2 TYPE UBIN (6) UNAL,
     1236    11847    2            2 * UBIN (18) UNAL,
     1237    11848    2            2 LINE_ID UBIN (12) UNAL;
     1238    11849    2      DCL I UBIN WORD ALIGNED;
     1239    11850
     1240    11851        /* Code */
     1241    11852
     1242    11853    2      I = 0;

  11853  3 002403   200024 450100                    STZ     I,,AUTO

     1243    11854    3      DO WHILE (FEP.EXEC_LINE_ID(I) ~= DATA.LINE_ID) &

  11854  3 002404   002410 710000 3                  TRA     s:11858

     1244    11855    3              (FEP.LINE_ID(I) ~= DATA.LINE_ID) &
     1245    11856    3              (I <= %LAST_FEP);
     1246    11857    3         I = I+1;

  11857  3 002405   200024 235100                    LDA     I,,AUTO
         3 002406   000001 035007                    ADLA    1,DL
         3 002407   200024 755100                    STA     I,,AUTO

     1247    11858    3      END;

  11858  3 002410   400000 220003                    LDX0    -131072,DU
         3 002411   200023 470500                    LDP0    @DATA_WORD,,AUTO
         3 002412   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:184  
         3 002413   007777 376007                    ANQ     4095,DL
         3 002414   200062 756100                    STQ     I+2,,AUTO
         3 002415   200024 236100                    LDQ     I,,AUTO
         3 002416   000014 402007                    MPY     12,DL
         3 002417   000004 236006 1                  LDQ     FEP+3,QL
         3 002420   000006 772000                    QRL     6
         3 002421   007777 376007                    ANQ     4095,DL
         3 002422   200062 116100                    CMPQ    I+2,,AUTO
         3 002423   002425 601000 3                  TNZ     s:11858+13
         3 002424   000000 220003                    LDX0    0,DU
         3 002425   400000 221003                    LDX1    -131072,DU
         3 002426   000000 236100                    LDQ     0,,PR0
         3 002427   007777 376007                    ANQ     4095,DL
         3 002430   200063 756100                    STQ     I+3,,AUTO
         3 002431   200024 236100                    LDQ     I,,AUTO
         3 002432   000014 402007                    MPY     12,DL
         3 002433   000004 236006 1                  LDQ     FEP+3,QL
         3 002434   000030 772000                    QRL     24
         3 002435   200063 116100                    CMPQ    I+3,,AUTO
         3 002436   002440 601000 3                  TNZ     s:11858+24
         3 002437   000000 221003                    LDX1    0,DU
         3 002440   000000 636011                    EAQ     0,X1
         3 002441   200064 756100                    STQ     I+4,,AUTO
         3 002442   000000 636010                    EAQ     0,X0
         3 002443   200064 376100                    ANQ     I+4,,AUTO
         3 002444   400000 220003                    LDX0    -131072,DU
         3 002445   200024 235100                    LDA     I,,AUTO
         3 002446   000010 115007                    CMPA    8,DL
         3 002447   002451 602000 3                  TNC     s:11858+33
         3 002450   000000 220003                    LDX0    0,DU
         3 002451   200065 756100                    STQ     I+5,,AUTO
         3 002452   000000 636010                    EAQ     0,X0
         3 002453   200066 756100                    STQ     I+6,,AUTO
         3 002454   200065 236100                    LDQ     I+5,,AUTO
         3 002455   200066 376100                    ANQ     I+6,,AUTO
         3 002456   002405 601000 3                  TNZ     s:11857

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:185  
     1248    11859    2      IF I < %LAST_FEP+1

  11859  3 002457   000010 115007                    CMPA    8,DL
         3 002460   002515 603000 3                  TRC     s:11867

     1249    11860    3      THEN DO;

     1250    11861    3              DATA.TYPE = FEP.DEVICE_TYPE(I);

  11861  3 002461   200024 236100                    LDQ     I,,AUTO
         3 002462   000014 402007                    MPY     12,DL
         3 002463   000003 236006 1                  LDQ     FEP+2,QL
         3 002464   000014 736000                    QLS     12
         3 002465   000000 752140                    STCQ    0,'40'O,PR0

     1251    11862    3              IF ~FEP.STATUS.ACTIVE(I) | FEP.STATUS.DISCONNECTED(I)

  11862  3 002466   200024 236100                    LDQ     I,,AUTO
         3 002467   000014 402007                    MPY     12,DL
         3 002470   000001 236006 1                  LDQ     FEP,QL
         3 002471   400000 376003                    ANQ     -131072,DU
         3 002472   400000 676003                    ERQ     -131072,DU
         3 002473   200062 756100                    STQ     I+2,,AUTO
         3 002474   200024 236100                    LDQ     I,,AUTO
         3 002475   000014 402007                    MPY     12,DL
         3 002476   000001 236006 1                  LDQ     FEP,QL
         3 002477   000001 736000                    QLS     1
         3 002500   400000 376003                    ANQ     -131072,DU
         3 002501   200063 756100                    STQ     I+3,,AUTO
         3 002502   200062 236100                    LDQ     I+2,,AUTO
         3 002503   200063 276100                    ORQ     I+3,,AUTO
         3 002504   002511 600000 3                  TZE     s:11864

     1252    11863    3              THEN RETURN_DELTA = 2;

  11863  3 002505   000002 220003                    LDX0    2,DU
         3 002506   200006 471500                    LDP1    @RETURN_DELTA,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:186  
         3 002507   100000 740100                    STX0    0,,PR1
         3 002510   002520 710000 3                  TRA     s:11869

     1253    11864    3              ELSE RETURN_DELTA = 3;

  11864  3 002511   000003 220003                    LDX0    3,DU
         3 002512   200006 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 002513   100000 740100                    STX0    0,,PR1

     1254    11865    3           END;

  11865  3 002514   002520 710000 3                  TRA     s:11869

     1255    11866    3      ELSE DO;

     1256    11867    3              RETURN_DELTA = 2;

  11867  3 002515   000002 220003                    LDX0    2,DU
         3 002516   200006 471500                    LDP1    @RETURN_DELTA,,AUTO
         3 002517   100000 740100                    STX0    0,,PR1

     1257    11868    3           END;

     1258    11869    2      RETURN;

  11869  3 002520   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 002521   000001 702211                    TSX2  ! 1,X1

     1259    11870    2   END GEROUT_TERMINAL_TYPE_REQUEST;
     1260    11871        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:187  
     1261    11872        /*I* NAME:         GEROUT_COLTS_WAKEUP
     1262    11873             AUTHOR:       Curt Andes
     1263    11874             PURPOSE:      Service the GEROUT type: COLTS WAKEUP
     1264    11875             INTERFACE:    CONNECT_TO_SLAVE
     1265    11876                           TOX$ERROR
     1266    11877             PARAMETERS:   Data word with logical FEP # and CCLT test type code
     1267    11878             DATA:         FEP
     1268    11879                           RETURN_DELTA
     1269    11880                           TOC_ERROR_CODE
     1270    11881             DESCRIPTION:  This procedure matches  the logical FEP number
     1271    11882                           passed  in the MME  call with an  entry in the
     1272    11883                           FEP table that has a status of AWAITING_WAKEUP
     1273    11884                           set.  This status  should be  set when the MME
     1274    11885                           LOGFEP is  serviced. If no FEP  table entry is
     1275    11886                           found  that meets the  criteria, COLTS aborts.
     1276    11887                           The  device  type  code  is  saved  in the FEP
     1277    11888                           table.
     1278    11889
     1279    11890                           *MME calling sequence
     1280    11891                           MME        GEROUT
     1281    11892                           VFD        3/logical FEP #,15/0,6/7,6/0,6/type code
     1282    11893                           <return>
     1283    11894
     1284    11895        */
     1285    11896        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:188  
     1286    11897    1   GEROUT_COLTS_WAKEUP: PROC (DATA_WORD);

  11897  3 002522   200022 741300       GEROUT_COLT* STX1  ! RESTORE$+2,,AUTO

     1287    11898
     1288    11899        /* Variables */
     1289    11900    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1290    11901    2      DCL 1 DATA REDEF DATA_WORD,
     1291    11902    2            2 LFEP UBIN (3) UNAL,
     1292    11903    2            2 * UBIN (27) UNAL,
     1293    11904    2            2 TYPE_CODE UBIN (6) UNAL;
     1294    11905
     1295    11906    2      DCL I UBIN WORD ALIGNED;
     1296    11907
     1297    11908        /* Code */
     1298    11909
     1299    11910    2      RETURN_DELTA = 2;

  11910  3 002523   000002 220003                    LDX0    2,DU
         3 002524   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002525   000000 740100                    STX0    0,,PR0

     1300    11911    2      I = 0;

  11911  3 002526   200024 450100                    STZ     I,,AUTO

     1301    11912    3      DO WHILE (I <= %LAST_FEP) & (FEP.STATUS.ACTIVE (I)) ;

  11912  3 002527   002533 710000 3                  TRA     s:11914

     1302    11913    3         I = I+1;

  11913  3 002530   200024 235100                    LDA     I,,AUTO
         3 002531   000001 035007                    ADLA    1,DL
         3 002532   200024 755100                    STA     I,,AUTO

     1303    11914    3      END;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:189  

  11914  3 002533   400000 220003                    LDX0    -131072,DU
         3 002534   200024 235100                    LDA     I,,AUTO
         3 002535   000010 115007                    CMPA    8,DL
         3 002536   002540 602000 3                  TNC     s:11914+5
         3 002537   000000 220003                    LDX0    0,DU
         3 002540   200024 236100                    LDQ     I,,AUTO
         3 002541   000014 402007                    MPY     12,DL
         3 002542   000001 236006 1                  LDQ     FEP,QL
         3 002543   400000 376003                    ANQ     -131072,DU
         3 002544   200062 756100                    STQ     I+2,,AUTO
         3 002545   000000 636010                    EAQ     0,X0
         3 002546   200062 376100                    ANQ     I+2,,AUTO
         3 002547   002530 601000 3                  TNZ     s:11913

     1304    11915    2      IF I <= %LAST_FEP

  11915  3 002550   200024 235100                    LDA     I,,AUTO
         3 002551   000010 115007                    CMPA    8,DL
         3 002552   002611 603000 3                  TRC     s:11926

     1305    11916    3      THEN DO;

     1306    11917    3              FEP.FEP_STATUS (I) = 0 ;

  11917  3 002553   200024 236100                    LDQ     I,,AUTO
         3 002554   000014 402007                    MPY     12,DL
         3 002555   000000 220003                    LDX0    0,DU
         3 002556   000001 740006 1                  STX0    FEP,QL

     1307    11918    3              FEP.STATUS.ACTIVE (I) = %TRUE ;

  11918  3 002557   000000 621006                    EAX1    0,QL
         3 002560   400000 236003                    LDQ     -131072,DU
         3 002561   000001 256011 1                  ORSQ    FEP,X1

     1308    11919    3              FEP.LOGICAL_NUM (I) = DATA.LFEP ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:190  

  11919  3 002562   200023 470500                    LDP0    @DATA_WORD,,AUTO
         3 002563   000000 236100                    LDQ     0,,PR0
         3 002564   000041 772000                    QRL     33
         3 002565   000000 622006                    EAX2    0,QL
         3 002566   000002 742011 1                  STX2    FEP+1,X1

     1309    11920    3              FEP.NUM (I) = PHY_FEP_NUM (DATA.LFEP) ;

  11920  3 002567   000000 236100                    LDQ     0,,PR0
         3 002570   000041 772000                    QRL     33
         3 002571   000001 736000                    QLS     1
         3 002572   000000 635011                    EAA     0,X1
         3 002573   000020 771000                    ARL     16
         3 002574   000005 100406                    MLR     fill='000'O
         3 002575   000153 000002 1                  ADSC9   PHY_FEP_NUM,Q            cn=0,n=2
         3 002576   000002 400002 1                  ADSC9   FEP+1,A                  cn=2,n=2

     1310    11921    3              FEP.DEVICE_TYPE(I) = DATA.TYPE_CODE;

  11921  3 002577   000000 722100                    LXL2    0,,PR0
         3 002600   000077 362003                    ANX2    63,DU
         3 002601   000003 742011 1                  STX2    FEP+2,X1

     1311    11922    3              FEP.STATUS.ECONN_WAITING(I) = %TRUE;

  11922  3 002602   004000 236003                    LDQ     2048,DU
         3 002603   000001 256011 1                  ORSQ    FEP,X1

     1312    11923    3              CALL CONNECT_TO_SLAVE (I);

  11923  3 002604   200024 631500                    EPPR1   I,,AUTO
         3 002605   200047 451500                    STP1    NO_DCB_OBTAINED,,AUTO
         3 002606   004653 701000 3                  TSX1    CONNECT_TO_SLAVE
         3 002607   000000 011000                    NOP     0

     1313    11924    3           END;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:191  

  11924  3 002610   002621 710000 3                  TRA     s:11929

     1314    11925    3      ELSE DO;

     1315    11926    3              TOC_ERROR_CODE.ERR# = %E$NOLOGFEP;

  11926  3 002611   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 002612   000001 376000 4                  ANQ     1
         3 002613   000220 276007                    ORQ     144,DL
         3 002614   000000 756000 1                  STQ     TOC_ERROR_CODE

     1316    11927    3              CALL TOX$ERROR (TOC_ERROR_CODE);

  11927  3 002615   000002 630400 4                  EPPR0   2
         3 002616   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002617   000000 701000 xent               TSX1    TOX$ERROR
         3 002620   000000 011000                    NOP     0

     1317    11928    3           END;

     1318    11929    2      RETURN;

  11929  3 002621   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 002622   000001 702211                    TSX2  ! 1,X1

     1319    11930    2   END GEROUT_COLTS_WAKEUP;
     1320    11931        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:192  
     1321    11932        /*I* NAME:         GEROUT_DISCONNECT
     1322    11933             AUTHOR:       Curt Andes
     1323    11934             PURPOSE:      Service the GEROUT type: DISCONNECT
     1324    11935             INTERFACE:    DISCONNECT_EXEC_LINE
     1325    11936                           DISCONNECT_TEST_LINE
     1326    11937             PARAMETERS:   Data word containing LINE_ID to disconnect
     1327    11938                           Data word containing status store addr,courtesy call addr
     1328    11939                           Data word containing an ICM address
     1329    11940             DATA:         RETURN_DELTA
     1330    11941             DESCRIPTION:  This   procedure   determines   what  kind  of
     1331    11942                           disconnect is  to be done (either  a test line
     1332    11943                           or  exec  line),  and  calls  the  appropriate
     1333    11944                           procedure.
     1334    11945
     1335    11946                           *MME calling sequence
     1336    11947                           MME        GEROUT
     1337    11948                           VFD        18/0,6/15,12/line id
     1338    11949                           ZERO       status store address, courtesy call address
     1339    11950                           <return>
     1340    11951                           *** NOTE:
     1341    11952                                   For a test line disconnect, the upper half of the
     1342    11953                                   'A' register contains the ICM record address
     1343    11954        */
     1344    11955        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:193  
     1345    11956    1   GEROUT_DISCONNECT: PROC (DATA_WORD,PTR_WORD,REC_WORD);

  11956  3 002623   200022 741300       GEROUT_DISC* STX1  ! RESTORE$+2,,AUTO

     1346    11957
     1347    11958        /* Variables */
     1348    11959
     1349    11960    2      DCL PTR_WORD UBIN WORD ALIGNED;
     1350    11961    2      DCL 1 PTRS$ REDEF PTR_WORD,
     1351    11962    2            2 ST UBIN HALF UNAL,
     1352    11963    2            2 CC UBIN HALF UNAL;
     1353    11964    2      DCL REC_WORD UBIN WORD ALIGNED;
     1354    11965    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1355    11966    2      DCL 1 DATA REDEF DATA_WORD,
     1356    11967    2            2 * UBIN HALF UNAL,
     1357    11968    2            2 * UBIN (6) UNAL,
     1358    11969    2            2 LINE_ID UBIN (12) UNAL,
     1359    11970    2            2 LINE REDEF LINE_ID,
     1360    11971    2              3 TYPE UBIN (6) UNAL,
     1361    11972    2              3 NUM UBIN (6) UNAL;
     1362    11973    2      DCL I UBIN WORD ALIGNED;
     1363    11974
     1364    11975        /* Code */
     1365    11976
     1366    11977    2      I = 0;

  11977  3 002624   200026 450100                    STZ     I,,AUTO

     1367    11978    2      RETURN_DELTA = 3;

  11978  3 002625   000003 220003                    LDX0    3,DU
         3 002626   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 002627   000000 740100                    STX0    0,,PR0

     1368    11979    2      PTRS$.CC = 0;

  11979  3 002630   000000 221003                    LDX1    0,DU
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:194  
         3 002631   200024 471500                    LDP1    @PTR_WORD,,AUTO
         3 002632   100000 441100                    SXL1    0,,PR1

     1369    11980    2      IF DATA.LINE.TYPE = 21  /* = BCD 'E' */

  11980  3 002633   200023 473500                    LDP3    @DATA_WORD,,AUTO
         3 002634   300000 236100                    LDQ     0,,PR3
         3 002635   007700 376007                    ANQ     4032,DL
         3 002636   002500 116007                    CMPQ    1344,DL
         3 002637   002645 601000 3                  TNZ     s:11982

     1370    11981    2      THEN CALL DISCONNECT_EXEC_LINE (DATA_WORD);

  11981  3 002640   200023 236100                    LDQ     @DATA_WORD,,AUTO
         3 002641   200031 756100                    STQ     CMD+1,,AUTO
         3 002642   002655 701000 3                  TSX1    DISCONNECT_EXEC_LINE
         3 002643   000000 011000                    NOP     0
         3 002644   002653 710000 3                  TRA     s:11983

     1371    11982    2      ELSE CALL DISCONNECT_TEST_LINE (DATA_WORD,PTR_WORD,REC_WORD);

  11982  3 002645   200024 237100                    LDAQ    @PTR_WORD,,AUTO
         3 002646   200032 757100                    STAQ    @DATA_WORD+1,,AUTO
         3 002647   200023 236100                    LDQ     @DATA_WORD,,AUTO
         3 002650   200031 756100                    STQ     CMD+1,,AUTO
         3 002651   003064 701000 3                  TSX1    DISCONNECT_TEST_LINE
         3 002652   000000 011000                    NOP     0

     1372    11983    2      RETURN;

  11983  3 002653   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 002654   000001 702211                    TSX2  ! 1,X1

     1373    11984        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:195  
     1374    11985        /*I* NAME:         DISCONNECT_EXEC_LINE
     1375    11986             AUTHOR:       Curt Andes
     1376    11987                           Kathy Larkin
     1377    11988             PURPOSE:      Service GEROUT DISCONNECT when an exec line is specified
     1378    11989             INTERFACE:    INITIATE_HNDLR_WRAPUP
     1379    11990             PARAMETERS:   Data word containing LINE_ID
     1380    11991             DATA:         FEP
     1381    11992             DESCRIPTION:  This procedure will disconnect all running
     1382    11993                           tests.  Each active handler is wrapped up to
     1383    11994                           be sure that all resources will be returned
     1384    11995                           to the system.  FEP entries are cleared as
     1385    11996                           the tests are identified.
     1386    11997        */
     1387    11998    2   DISCONNECT_EXEC_LINE: PROC (DATA_WORD);

  11998  3 002655   200030 741300       DISCONNECT_* STX1  ! CMD,,AUTO

     1388    11999
     1389    12000        /* VARIABLES */
     1390    12001
     1391    12002    3      DCL DATA_WORD UBIN WORD ALIGNED;
     1392    12003    3      DCL 1 DATA REDEF DATA_WORD,
     1393    12004    3            2 * UBIN HALF UNAL,
     1394    12005    3            2 * UBIN (6) UNAL,
     1395    12006    3            2 LINE_ID UBIN (12) UNAL,
     1396    12007    3            2 LINE REDEF LINE_ID,
     1397    12008    3              3 TYPE UBIN (6) UNAL,
     1398    12009    3              3 NUM UBIN (6) UNAL;
     1399    12010    3      DCL I UBIN WORD ALIGNED;
     1400    12011    3      DCL J UBIN WORD ALIGNED;
     1401    12012        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:196  
     1402    12013        /* CODE */
     1403    12014
     1404    12015    3      I = 0;

  12015  3 002656   200032 450100                    STZ     I,,AUTO

     1405    12016    4      DO WHILE (DATA.LINE_ID ~= FEP.EXEC_LINE_ID(I) & I <= %LAST_FEP);

  12016  3 002657   002663 710000 3                  TRA     s:12018

     1406    12017    4         I = I+1;

  12017  3 002660   200032 235100                    LDA     I,,AUTO
         3 002661   000001 035007                    ADLA    1,DL
         3 002662   200032 755100                    STA     I,,AUTO

     1407    12018    4      END;

  12018  3 002663   400000 220003                    LDX0    -131072,DU
         3 002664   200032 236100                    LDQ     I,,AUTO
         3 002665   000014 402007                    MPY     12,DL
         3 002666   000004 236006 1                  LDQ     FEP+3,QL
         3 002667   000006 772000                    QRL     6
         3 002670   007777 376007                    ANQ     4095,DL
         3 002671   200062 756100                    STQ     I+2,,AUTO
         3 002672   200031 470500                    LDP0    @DATA_WORD,,AUTO
         3 002673   000000 236100                    LDQ     0,,PR0
         3 002674   007777 376007                    ANQ     4095,DL
         3 002675   200062 116100                    CMPQ    I+2,,AUTO
         3 002676   002700 601000 3                  TNZ     s:12018+13
         3 002677   000000 220003                    LDX0    0,DU
         3 002700   400000 221003                    LDX1    -131072,DU
         3 002701   200032 235100                    LDA     I,,AUTO
         3 002702   000010 115007                    CMPA    8,DL
         3 002703   002705 602000 3                  TNC     s:12018+18
         3 002704   000000 221003                    LDX1    0,DU
         3 002705   000000 636011                    EAQ     0,X1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:197  
         3 002706   200063 756100                    STQ     I+3,,AUTO
         3 002707   000000 636010                    EAQ     0,X0
         3 002710   200063 376100                    ANQ     I+3,,AUTO
         3 002711   002660 601000 3                  TNZ     s:12017

     1408    12019    3      IF I < %LAST_FEP+1

  12019  3 002712   000010 115007                    CMPA    8,DL
         3 002713   002772 603000 3                  TRC     s:12039

     1409    12020    4      THEN DO;

     1410    12021    5              DO I = 0 TO %LAST_FEP;

  12021  3 002714   200032 450100                    STZ     I,,AUTO

     1411    12022    5                 IF (FEP.STATUS.ACTIVE (I) AND FEP.STATUS.DCB_OPEN (I))

  12022  3 002715   200032 236100                    LDQ     I,,AUTO
         3 002716   000014 402007                    MPY     12,DL
         3 002717   000001 234006 1                  SZN     FEP,QL
         3 002720   002765 605000 3                  TPL     s:12036
         3 002721   000001 236006 1                  LDQ     FEP,QL
         3 002722   000200 316003                    CANQ    128,DU
         3 002723   002765 600000 3                  TZE     s:12036

     1412    12023    6                 THEN DO;

     1413    12024    7                         DO J = 0 TO %LAST_FEP;

  12024  3 002724   200033 450100                    STZ     J,,AUTO

     1414    12025    7                            IF ((I ~= J) AND

  12025  3 002725   200032 236100                    LDQ     I,,AUTO
         3 002726   200033 116100                    CMPQ    J,,AUTO
         3 002727   002754 600000 3                  TZE     s:12033
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:198  
         3 002730   200033 236100                    LDQ     J,,AUTO
         3 002731   000014 402007                    MPY     12,DL
         3 002732   000001 234006 1                  SZN     FEP,QL
         3 002733   002754 605000 3                  TPL     s:12033
         3 002734   000001 236006 1                  LDQ     FEP,QL
         3 002735   000200 316003                    CANQ    128,DU
         3 002736   002754 600000 3                  TZE     s:12033
         3 002737   200033 236100                    LDQ     J,,AUTO
         3 002740   000014 402007                    MPY     12,DL
         3 002741   000000 620006                    EAX0    0,QL
         3 002742   200032 236100                    LDQ     I,,AUTO
         3 002743   000014 402007                    MPY     12,DL
         3 002744   000001 236006 1                  LDQ     FEP,QL
         3 002745   000001 676010 1                  ERQ     FEP,X0
         3 002746   777777 376007                    ANQ     -1,DL
         3 002747   002754 601000 3                  TNZ     s:12033

     1415    12026    7                                    FEP.STATUS.ACTIVE (J) AND
     1416    12027    7                                    FEP.STATUS.DCB_OPEN (J) AND
     1417    12028    7                                    (FEP.DCB_NUM (I) = FEP.DCB_NUM (J)))
     1418    12029    8                            THEN DO;

     1419    12030    8                                    FEP.STATUS.ACTIVE (J) = %FALSE;

  12030  3 002750   000031 236000 xsym               LDQ     B_VECTNIL+25
         3 002751   000001 356010 1                  ANSQ    FEP,X0

     1420    12031    8                                    FEP.STATUS.DCB_OPEN (J) = %FALSE;

  12031  3 002752   000010 236000 4                  LDQ     8
         3 002753   000001 356010 1                  ANSQ    FEP,X0

     1421    12032    8                                 END /* THEN DO */;

     1422    12033    7                         END /* DO J */;

  12033  3 002754   200033 235100                    LDA     J,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:199  
         3 002755   000001 035007                    ADLA    1,DL
         3 002756   200033 755100                    STA     J,,AUTO
         3 002757   000010 115007                    CMPA    8,DL
         3 002760   002725 602000 3                  TNC     s:12025

     1423    12034    6                         CALL INITIATE_HNDLR_WRAPUP (I);

  12034  3 002761   200032 630500                    EPPR0   I,,AUTO
         3 002762   200035 450500                    STP0    @TEST_NUM,,AUTO
         3 002763   002774 701000 3                  TSX1    INITIATE_HNDLR_WRAPUP
         3 002764   000000 011000                    NOP     0

     1424    12035    6                      END /* THEN */;

     1425    12036    5              END /* DO I */;

  12036  3 002765   200032 235100                    LDA     I,,AUTO
         3 002766   000001 035007                    ADLA    1,DL
         3 002767   200032 755100                    STA     I,,AUTO
         3 002770   000010 115007                    CMPA    8,DL
         3 002771   002715 602000 3                  TNC     s:12022

     1426    12037    4           END;

     1427    12038    3      ELSE;
     1428    12039    3      RETURN;

  12039  3 002772   200030 221300                    LDX1  ! CMD,,AUTO
         3 002773   000001 702211                    TSX2  ! 1,X1

     1429    12040    3   END DISCONNECT_EXEC_LINE;
     1430    12041        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:200  
     1431    12042        /*I* NAME:         INITIATE_HNDLR_WRAPUP
     1432    12043             AUTHOR:       Kathy Larkin
     1433    12044             PURPOSE:      Initiate wrap-up in an FEP Handler
     1434    12045             INTERFACE:    M$WRITE Monitor Service
     1435    12046                           M$READ Monitor Service
     1436    12047                           CLOSE_DCB
     1437    12048             PARAMETERS:   TEST_NUM - input
     1438    12049             DATA:         FEP.STATUS bits - input/output
     1439    12050             DESCRIPTION:  Causes a handler  to enter its wrap-up routine
     1440    12051                           by  attempting to M$WRITE too much data to it,
     1441    12052                           causing  the  M$READ  call  in  the handler to
     1442    12053                           ALTRET, initiating the wrap-up procedure.  The
     1443    12054                           M$READ is done to  insure that the handler has
     1444    12055                           completed wrapping up  before we close our DCB
     1445    12056                           (which  aborts  the  handler  if  it  is still
     1446    12057                           running).
     1447    12058        */
     1448    12059    2   INITIATE_HNDLR_WRAPUP: PROC (TEST_NUM);

  12059  3 002774   200034 741300       INITIATE_HN* STX1  ! J,,AUTO

     1449    12060
     1450    12061    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1451    12062    3      DCL DUMMY_BUF CHAR (1) CALIGNED;
     1452    12063
     1453    12064    3      WRITE_TO_FEP.BUF_ = VECTOR (DUMMY_BUF);

  12064  3 002775   177640 235007                    LDA     65440,DL
         3 002776   200062 452500                    STP2    I+2,,AUTO
         3 002777   200062 236100                    LDQ     I+2,,AUTO
         3 003000   000036 036003                    ADLQ    30,DU
         3 003001   000352 757000 1                  STAQ    WRITE_TO_FEP+4

     1454    12065    3      WRITE_TO_FEP.BUF_.BOUND = 513; /* Max handler buffer size is 512 */

  12065  3 003002   000352 236000 1                  LDQ     WRITE_TO_FEP+4
         3 003003   177777 376007                    ANQ     65535,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:201  
         3 003004   000011 276000 4                  ORQ     9
         3 003005   000352 756000 1                  STQ     WRITE_TO_FEP+4

     1455    12066    3      WRITE_TO_FEP.V.DCB# = FEP.DCB_NUM (TEST_NUM);

  12066  3 003006   200035 470500                    LDP0    @TEST_NUM,,AUTO
         3 003007   000000 236100                    LDQ     0,,PR0
         3 003010   000006 402007                    MPY     6,DL
         3 003011   000001 736000                    QLS     1
         3 003012   000001 720006 1                  LXL0    FEP,QL
         3 003013   000356 740000 1                  STX0    WRITE_TO_FEP+8

     1456    12067    3      CALL M$WRITE (WRITE_TO_FEP) ALTRET (DONT_CARE);

  12067  3 003014   000346 630400 1                  EPPR0   WRITE_TO_FEP
         3 003015   440001 713400                    CLIMB   alt,write
         3 003016   401400 401760                    pmme    nvectors=4
         3 003017   003020 702000 3                  TSX2    DONT_CARE

     1457    12068    3   DONT_CARE:
     1458    12069    3      READ_FROM_FEP.BUF_ = VECTOR (DUMMY_BUF);

  12069  3 003020   177640 235007       DONT_CARE    LDA     65440,DL
         3 003021   200062 452500                    STP2    I+2,,AUTO
         3 003022   200062 236100                    LDQ     I+2,,AUTO
         3 003023   000036 036003                    ADLQ    30,DU
         3 003024   000366 757000 1                  STAQ    READ_FROM_FEP+4

     1459    12070    3      READ_FROM_FEP.V.DCB# = FEP.DCB_NUM (TEST_NUM);

  12070  3 003025   200035 470500                    LDP0    @TEST_NUM,,AUTO
         3 003026   000000 236100                    LDQ     0,,PR0
         3 003027   000006 402007                    MPY     6,DL
         3 003030   000001 736000                    QLS     1
         3 003031   000001 720006 1                  LXL0    FEP,QL
         3 003032   000372 740000 1                  STX0    READ_FROM_FEP+8

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:202  
     1460    12071    3      CALL M$READ (READ_FROM_FEP) ALTRET (HNDLR_GONE);

  12071  3 003033   000362 630400 1                  EPPR0   READ_FROM_FEP
         3 003034   440000 713400                    CLIMB   alt,read
         3 003035   401400 401760                    pmme    nvectors=4
         3 003036   003037 702000 3                  TSX2    HNDLR_GONE

     1461    12072    3   HNDLR_GONE:
     1462    12073    3      FEP.FEP_STATUS (TEST_NUM) = 0;

  12073  3 003037   200035 470500       HNDLR_GONE   LDP0    @TEST_NUM,,AUTO
         3 003040   000000 236100                    LDQ     0,,PR0
         3 003041   000006 402007                    MPY     6,DL
         3 003042   000001 736000                    QLS     1
         3 003043   000000 220003                    LDX0    0,DU
         3 003044   000001 740006 1                  STX0    FEP,QL

     1463    12074    3      FEP.STATUS.DISCONNECTED (TEST_NUM) = %TRUE;

  12074  3 003045   000000 236100                    LDQ     0,,PR0
         3 003046   000006 402007                    MPY     6,DL
         3 003047   000001 736000                    QLS     1
         3 003050   000000 621006                    EAX1    0,QL
         3 003051   200000 236003                    LDQ     65536,DU
         3 003052   000001 256011 1                  ORSQ    FEP,X1

     1464    12075    3      CALL CLOSE_DCB (FEP.DCB_NUM (TEST_NUM));

  12075  3 003053   000000 236100                    LDQ     0,,PR0
         3 003054   000006 402007                    MPY     6,DL
         3 003055   000023 736000                    QLS     19
         3 003056   000012 036000 4                  ADLQ    10
         3 003057   200053 756100                    STQ     DCB_IN_USE+3,,AUTO
         3 003060   004057 701000 3                  TSX1    CLOSE_DCB
         3 003061   000000 011000                    NOP     0

     1465    12076    3      RETURN;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:203  

  12076  3 003062   200034 221300                    LDX1  ! J,,AUTO
         3 003063   000001 702211                    TSX2  ! 1,X1

     1466    12077    3   END INITIATE_HNDLR_WRAPUP;
     1467    12078        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:204  
     1468    12079        /*I* NAME:         DISCONNECT_TEST_LINE
     1469    12080             AUTHOR:       Curt Andes
     1470    12081             PURPOSE:      Service GEROUT DISCONNECT for a test line
     1471    12082             INTERFACE:    TOX$ERROR
     1472    12083                           GEROUT_WRITE
     1473    12084                           GEROUT_READ
     1474    12085                           RETURN_GEROUT_STATUS
     1475    12086                           CLOSE_DCB_IF_UNUSED
     1476    12087             PARAMETERS:   Data word containing the LINE_ID to disconnect
     1477    12088             DATA:         FEP
     1478    12089                           TOC_ERROR_CODE
     1479    12090             DESCRIPTION:  This  procedure issues  the disconnect  ICM to
     1480    12091                           the  FEP. If  the GEROUT_WRITE  ALTRETURNs the
     1481    12092                           following  GEROUT_READ will  not be performed.
     1482    12093                           the  line status will  be set to DISCONNECTED,
     1483    12094                           and if nobody else is using the DCB it will be
     1484    12095                           closed.
     1485    12096        */
     1486    12097        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:205  
     1487    12098    2   DISCONNECT_TEST_LINE: PROC (DATA_WORD,PTR_WORD,REC_WORD);

  12098  3 003064   200030 741300       DISCONNECT_* STX1  ! CMD,,AUTO

     1488    12099
     1489    12100        /* VARIABLES */
     1490    12101
     1491    12102    3      DCL PTR_WORD UBIN WORD ALIGNED;
     1492    12103    3      DCL 1 PTRS$ REDEF PTR_WORD,
     1493    12104    3            2 ST UBIN HALF UNAL,
     1494    12105    3            2 CC UBIN HALF UNAL;
     1495    12106    3      DCL REC_WORD UBIN WORD ALIGNED;
     1496    12107    3      DCL 1 REC REDEF REC_WORD,
     1497    12108    3            2 AD UBIN (18) UNAL,
     1498    12109    3            2 * UBIN (18) UNAL;
     1499    12110    3      DCL DATA_WORD UBIN WORD ALIGNED;
     1500    12111    3      DCL 1 DATA REDEF DATA_WORD,
     1501    12112    3            2 * UBIN HALF UNAL,
     1502    12113    3            2 * UBIN (6) UNAL,
     1503    12114    3            2 LINE_ID UBIN (12) UNAL,
     1504    12115    3            2 LINE REDEF LINE_ID,
     1505    12116    3              3 TYPE UBIN (6) UNAL,
     1506    12117    3              3 NUM UBIN (6) UNAL;
     1507    12118    3      DCL I UBIN WORD ALIGNED;
     1508    12119        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:206  
     1509    12120    3      I = 0 ;

  12120  3 003065   200034 450100                    STZ     I,,AUTO

     1510    12121    4      DO WHILE (DATA.LINE_ID ~= FEP.LINE_ID(I) & I <= %LAST_FEP);

  12121  3 003066   003072 710000 3                  TRA     s:12123

     1511    12122    4         I = I+1;

  12122  3 003067   200034 235100                    LDA     I,,AUTO
         3 003070   000001 035007                    ADLA    1,DL
         3 003071   200034 755100                    STA     I,,AUTO

     1512    12123    4      END;

  12123  3 003072   400000 220003                    LDX0    -131072,DU
         3 003073   200034 236100                    LDQ     I,,AUTO
         3 003074   000014 402007                    MPY     12,DL
         3 003075   000004 236006 1                  LDQ     FEP+3,QL
         3 003076   000030 772000                    QRL     24
         3 003077   200062 756100                    STQ     I+2,,AUTO
         3 003100   200031 470500                    LDP0    @DATA_WORD,,AUTO
         3 003101   000000 236100                    LDQ     0,,PR0
         3 003102   007777 376007                    ANQ     4095,DL
         3 003103   200062 116100                    CMPQ    I+2,,AUTO
         3 003104   003106 601000 3                  TNZ     s:12123+12
         3 003105   000000 220003                    LDX0    0,DU
         3 003106   400000 221003                    LDX1    -131072,DU
         3 003107   200034 235100                    LDA     I,,AUTO
         3 003110   000010 115007                    CMPA    8,DL
         3 003111   003113 602000 3                  TNC     s:12123+17
         3 003112   000000 221003                    LDX1    0,DU
         3 003113   000000 636011                    EAQ     0,X1
         3 003114   200063 756100                    STQ     I+3,,AUTO
         3 003115   000000 636010                    EAQ     0,X0
         3 003116   200063 376100                    ANQ     I+3,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:207  
         3 003117   003067 601000 3                  TNZ     s:12122

     1513    12124    3      IF I <= %LAST_FEP

  12124  3 003120   000010 115007                    CMPA    8,DL
         3 003121   003215 603000 3                  TRC     s:12154

     1514    12125    4      THEN DO;

     1515    12126    4              IF REC.AD = 0

  12126  3 003122   200033 471500                    LDP1    @REC_WORD,,AUTO
         3 003123   100000 220100                    LDX0    0,,PR1
         3 003124   003136 601000 3                  TNZ     s:12132

     1516    12127    5              THEN DO;

     1517    12128    5                      TOC_ERROR_CODE.ERR# = %E$BADDISC;

  12128  3 003125   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 003126   000001 376000 4                  ANQ     1
         3 003127   000060 276007                    ORQ     48,DL
         3 003130   000000 756000 1                  STQ     TOC_ERROR_CODE

     1518    12129    5                      CALL TOX$ERROR (TOC_ERROR_CODE);

  12129  3 003131   000002 630400 4                  EPPR0   2
         3 003132   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003133   000000 701000 xent               TSX1    TOX$ERROR
         3 003134   000000 011000                    NOP     0

     1519    12130    5                   END;

  12130  3 003135   003215 710000 3                  TRA     s:12154

     1520    12131    5              ELSE DO;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:208  
     1521    12132    5                      IF FEP.STATUS.TEST_CONNECTED(I)

  12132  3 003136   200034 236100                    LDQ     I,,AUTO
         3 003137   000014 402007                    MPY     12,DL
         3 003140   000001 236006 1                  LDQ     FEP,QL
         3 003141   100000 316003                    CANQ    32768,DU
         3 003142   003215 600000 3                  TZE     s:12154

     1522    12133    6                      THEN DO;

     1523    12134    6                              FEP.ICM$(I) = PINCRW (IS$,REC.AD+1);

  12134  3 003143   200034 236100                    LDQ     I,,AUTO
         3 003144   000014 402007                    MPY     12,DL
         3 003145   000000 621006                    EAX1    0,QL
         3 003146   000001 636010                    EAQ     1,X0
         3 003147   000000 036000 2                  ADLQ    FPTN_
         3 003150   000011 756011 1                  STQ     FEP+8,X1

     1524    12135    6                              FEP.STATUS$(I) = PINCRW (IS$,PTRS$.ST);

  12135  3 003151   200032 473500                    LDP3    @PTR_WORD,,AUTO
         3 003152   300000 220100                    LDX0    0,,PR3
         3 003153   000000 636010                    EAQ     0,X0
         3 003154   000000 036000 2                  ADLQ    FPTN_
         3 003155   000010 756011 1                  STQ     FEP+7,X1

     1525    12136    6                              CALL GEROUT_WRITE (I) WHENRETURN

  12136  3 003156   200034 634500                    EPPR4   I,,AUTO
         3 003157   200037 454500                    STP4    @TEST_NUM,,AUTO
         3 003160   003420 701000 3                  TSX1    GEROUT_WRITE
         3 003161   003176 702000 3                  TSX2    s:12144

     1526    12137    7                                   DO;

     1527    12138    7                                      FEP.STATUS.TDISCONNECT_ISSUED(I)= %TRUE;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:209  

  12138  3 003162   200034 236100                    LDQ     I,,AUTO
         3 003163   000014 402007                    MPY     12,DL
         3 003164   000000 620006                    EAX0    0,QL
         3 003165   001000 236003                    LDQ     512,DU
         3 003166   000001 256010 1                  ORSQ    FEP,X0

     1528    12139    7                                      FEP.C_CALL$(I) = ADDR(NIL) ;

  12139  3 003167   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 003170   000007 756010 1                  STQ     FEP+6,X0

     1529    12140    7                                      CALL GEROUT_READ (I);

  12140  3 003171   200034 630500                    EPPR0   I,,AUTO
         3 003172   200037 450500                    STP0    @TEST_NUM,,AUTO
         3 003173   003630 701000 3                  TSX1    GEROUT_READ
         3 003174   000000 011000                    NOP     0

     1530    12141    7                                   END;

  12141  3 003175   003211 710000 3                  TRA     s:12148

     1531    12142    6                              WHENALTRETURN
     1532    12143    7                                   DO;

     1533    12144    7                                      FEP.FEP_STATUS(I) = 0;

  12144  3 003176   200034 236100                    LDQ     I,,AUTO
         3 003177   000014 402007                    MPY     12,DL
         3 003200   000000 220003                    LDX0    0,DU
         3 003201   000001 740006 1                  STX0    FEP,QL

     1534    12145    7                                      FEP.STATUS.DISCONNECTED(I) = %TRUE;

  12145  3 003202   000000 621006                    EAX1    0,QL
         3 003203   200000 236003                    LDQ     65536,DU
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:210  
         3 003204   000001 256011 1                  ORSQ    FEP,X1

     1535    12146    7                                      CALL CLOSE_DCB_IF_UNUSED (I);

  12146  3 003205   200034 630500                    EPPR0   I,,AUTO
         3 003206   200047 450500                    STP0    NO_DCB_OBTAINED,,AUTO
         3 003207   004315 701000 3                  TSX1    CLOSE_DCB_IF_UNUSED
         3 003210   000000 011000                    NOP     0

     1536    12147    7                                   END;

     1537    12148    6                              CALL RETURN_GEROUT_STATUS (I);

  12148  3 003211   200034 630500                    EPPR0   I,,AUTO
         3 003212   200043 450500                    STP0    FOUND,,AUTO
         3 003213   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 003214   000000 011000                    NOP     0

     1538    12149    6                           END;

     1539    12150    5                      ELSE;
     1540    12151    5                   END;

     1541    12152    4           END;

     1542    12153    3      ELSE;
     1543    12154    3      RETURN;

  12154  3 003215   200030 221300                    LDX1  ! CMD,,AUTO
         3 003216   000001 702211                    TSX2  ! 1,X1

     1544    12155    3   END DISCONNECT_TEST_LINE;
     1545    12156    2   END GEROUT_DISCONNECT;
     1546    12157        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:211  
     1547    12158        /*I* NAME:         GEROUT_STATUS_REQUEST
     1548    12159             AUTHOR:       Curt Andes
     1549    12160             PURPOSE:      To service the GEROUT type: STATUS REQUEST
     1550    12161             INTERFACE:    TOX$ERROR
     1551    12162                           RETURN_GEROUT_STATUS
     1552    12163             PARAMETERS:   A data word containing the LINE_ID to return status for
     1553    12164                           A data word containing the status store address
     1554    12165             DATA:         TOC_ERROR_CODE
     1555    12166                           FEP
     1556    12167             DESCRIPTION:  This  procedure validates the  LINE_ID. If the
     1557    12168                           LINE_ID is  valid then RETURN_GEROUT_STATUS is
     1558    12169                           called  to determine the  line status and pass
     1559    12170                           it to the subexec.  If the LINE_ID is invalid,
     1560    12171                           COLTS aborts.
     1561    12172        */
     1562    12173    1   GEROUT_STATUS_REQUEST: PROC (DATA_WORD,PTRS);

  12173  3 003217   200022 741300       GEROUT_STAT* STX1  ! RESTORE$+2,,AUTO

     1563    12174
     1564    12175        /* Variables */
     1565    12176
     1566    12177    2      DCL DATA_WORD UBIN WORD ALIGNED;
     1567    12178    2      DCL 1 DATA REDEF DATA_WORD,
     1568    12179    2            2 * UBIN HALF UNAL,
     1569    12180    2            2 * UBIN (6) UNAL,
     1570    12181    2            2 LINE_ID UBIN (12) UNAL;
     1571    12182    2      DCL PTRS UBIN WORD ALIGNED;
     1572    12183    2      DCL 1 PTRWD REDEF PTRS,
     1573    12184    2            2 STATUS UBIN HALF UNAL,
     1574    12185    2            2 * UBIN HALF UNAL;
     1575    12186    2      DCL I UBIN WORD ALIGNED;
     1576    12187           %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:212  
     1577    12188        /* Code */
     1578    12189
     1579    12190    2      RETURN_DELTA = 3;

  12190  3 003220   000003 220003                    LDX0    3,DU
         3 003221   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 003222   000000 740100                    STX0    0,,PR0

     1580    12191    2      I = 0;

  12191  3 003223   200025 450100                    STZ     I,,AUTO

     1581    12192    2      IF PTRWD.STATUS ~= 0

  12192  3 003224   200024 471500                    LDP1    @PTRS,,AUTO
         3 003225   100000 221100                    LDX1    0,,PR1
         3 003226   003331 600000 3                  TZE     s:12211

     1582    12193    3      THEN DO;

     1583    12194    4              DO WHILE (DATA.LINE_ID ~= FEP.EXEC_LINE_ID(I)) &

  12194  3 003227   003233 710000 3                  TRA     s:12198

     1584    12195    4                      (DATA.LINE_ID ~= FEP.LINE_ID(I)) &
     1585    12196    4                      (I <= %LAST_FEP);
     1586    12197    4                 I = I+1;

  12197  3 003230   200025 235100                    LDA     I,,AUTO
         3 003231   000001 035007                    ADLA    1,DL
         3 003232   200025 755100                    STA     I,,AUTO

     1587    12198    4              END;

  12198  3 003233   400000 220003                    LDX0    -131072,DU
         3 003234   200025 236100                    LDQ     I,,AUTO
         3 003235   000014 402007                    MPY     12,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:213  
         3 003236   000004 236006 1                  LDQ     FEP+3,QL
         3 003237   000006 772000                    QRL     6
         3 003240   007777 376007                    ANQ     4095,DL
         3 003241   200062 756100                    STQ     I+2,,AUTO
         3 003242   200023 470500                    LDP0    @DATA_WORD,,AUTO
         3 003243   000000 236100                    LDQ     0,,PR0
         3 003244   007777 376007                    ANQ     4095,DL
         3 003245   200062 116100                    CMPQ    I+2,,AUTO
         3 003246   003250 601000 3                  TNZ     s:12198+13
         3 003247   000000 220003                    LDX0    0,DU
         3 003250   400000 221003                    LDX1    -131072,DU
         3 003251   200025 236100                    LDQ     I,,AUTO
         3 003252   000014 402007                    MPY     12,DL
         3 003253   000004 236006 1                  LDQ     FEP+3,QL
         3 003254   000030 772000                    QRL     24
         3 003255   200063 756100                    STQ     I+3,,AUTO
         3 003256   000000 236100                    LDQ     0,,PR0
         3 003257   007777 376007                    ANQ     4095,DL
         3 003260   200063 116100                    CMPQ    I+3,,AUTO
         3 003261   003263 601000 3                  TNZ     s:12198+24
         3 003262   000000 221003                    LDX1    0,DU
         3 003263   000000 636011                    EAQ     0,X1
         3 003264   200064 756100                    STQ     I+4,,AUTO
         3 003265   000000 636010                    EAQ     0,X0
         3 003266   200064 376100                    ANQ     I+4,,AUTO
         3 003267   400000 220003                    LDX0    -131072,DU
         3 003270   200025 235100                    LDA     I,,AUTO
         3 003271   000010 115007                    CMPA    8,DL
         3 003272   003274 602000 3                  TNC     s:12198+33
         3 003273   000000 220003                    LDX0    0,DU
         3 003274   200065 756100                    STQ     I+5,,AUTO
         3 003275   000000 636010                    EAQ     0,X0
         3 003276   200066 756100                    STQ     I+6,,AUTO
         3 003277   200065 236100                    LDQ     I+5,,AUTO
         3 003300   200066 376100                    ANQ     I+6,,AUTO
         3 003301   003230 601000 3                  TNZ     s:12197

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:214  
     1588    12199    3              IF I < %LAST_FEP+1

  12199  3 003302   000010 115007                    CMPA    8,DL
         3 003303   003321 603000 3                  TRC     s:12205

     1589    12200    4              THEN DO;

     1590    12201    4                      FEP.STATUS$(I) = PINCRW (IS$,PTRWD.STATUS);

  12201  3 003304   200025 236100                    LDQ     I,,AUTO
         3 003305   000014 402007                    MPY     12,DL
         3 003306   200024 471500                    LDP1    @PTRS,,AUTO
         3 003307   100000 220100                    LDX0    0,,PR1
         3 003310   000000 621006                    EAX1    0,QL
         3 003311   000000 636010                    EAQ     0,X0
         3 003312   000000 036000 2                  ADLQ    FPTN_
         3 003313   000010 756011 1                  STQ     FEP+7,X1

     1591    12202    4                      CALL RETURN_GEROUT_STATUS (I);

  12202  3 003314   200025 633500                    EPPR3   I,,AUTO
         3 003315   200043 453500                    STP3    FOUND,,AUTO
         3 003316   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 003317   000000 011000                    NOP     0

     1592    12203    4                   END;

  12203  3 003320   003331 710000 3                  TRA     s:12211

     1593    12204    4              ELSE DO;

     1594    12205    4                      TOC_ERROR_CODE.ERR# = %E$BADLOGID;

  12205  3 003321   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 003322   000001 376000 4                  ANQ     1
         3 003323   000030 276007                    ORQ     24,DL
         3 003324   000000 756000 1                  STQ     TOC_ERROR_CODE
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:215  

     1595    12206    4                      CALL TOX$ERROR (TOC_ERROR_CODE);

  12206  3 003325   000002 630400 4                  EPPR0   2
         3 003326   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003327   000000 701000 xent               TSX1    TOX$ERROR
         3 003330   000000 011000                    NOP     0

     1596    12207    4                   END;

     1597    12208    3           END;

     1598    12209    2      ELSE;
     1599    12210
     1600    12211    2      RETURN;

  12211  3 003331   200022 221300                    LDX1  ! RESTORE$+2,,AUTO
         3 003332   000001 702211                    TSX2  ! 1,X1

     1601    12212    2   END GEROUT_STATUS_REQUEST;
     1602    12213        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:216  
     1603    12214        /*I* NAME:         RETURN_GEROUT_STATUS
     1604    12215             AUTHOR:       Curt Andes
     1605    12216             PURPOSE:      Return a CCLT ICM status
     1606    12217             INTERFACE:    None called.
     1607    12218             PARAMETERS:   The FEP table entry we are working with
     1608    12219             DATA:         FEP
     1609    12220             DESCRIPTION:  This  procedure  uses  the  status  in the FEP
     1610    12221                           table  to  create  a  status  that  CCLT  will
     1611    12222                           recognize.  The status is  returned to CCLT at
     1612    12223                           the location pointed  to by FEP.STATUS$, which
     1613    12224                           should  be  set  up  by  the  routine  that is
     1614    12225                           servicing the ICM.
     1615    12226        */
     1616    12227
     1617    12228    1   RETURN_GEROUT_STATUS: PROC (TEST_NUM);

  12228  3 003333   200042 741300       RETURN_GERO* STX1  ! WORK_ASC,,AUTO

     1618    12229
     1619    12230        /* Variables */
     1620    12231
     1621    12232    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1622    12233    2      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED;
     1623    12234
     1624    12235        /* Code */
     1625    12236
     1626    12237    2      IF (~FEP.STATUS.ACTIVE(TEST_NUM)) |

  12237  3 003334   200043 470500                    LDP0    @TEST_NUM,,AUTO
         3 003335   000000 236100                    LDQ     0,,PR0
         3 003336   000006 402007                    MPY     6,DL
         3 003337   000001 736000                    QLS     1
         3 003340   000001 236006 1                  LDQ     FEP,QL
         3 003341   400000 376003                    ANQ     -131072,DU
         3 003342   400000 676003                    ERQ     -131072,DU
         3 003343   200062 756100                    STQ     I+2,,AUTO
         3 003344   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:217  
         3 003345   000006 402007                    MPY     6,DL
         3 003346   000001 736000                    QLS     1
         3 003347   000001 236006 1                  LDQ     FEP,QL
         3 003350   000010 736000                    QLS     8
         3 003351   400000 376003                    ANQ     -131072,DU
         3 003352   200062 276100                    ORQ     I+2,,AUTO
         3 003353   200063 756100                    STQ     I+3,,AUTO
         3 003354   000000 236100                    LDQ     0,,PR0
         3 003355   000006 402007                    MPY     6,DL
         3 003356   000001 736000                    QLS     1
         3 003357   000001 236006 1                  LDQ     FEP,QL
         3 003360   000001 736000                    QLS     1
         3 003361   400000 376003                    ANQ     -131072,DU
         3 003362   200063 276100                    ORQ     I+3,,AUTO
         3 003363   003373 600000 3                  TZE     s:12241

     1627    12238    2              (FEP.STATUS.TDISCONNECT_ISSUED(TEST_NUM)) |
     1628    12239    2              (FEP.STATUS.DISCONNECTED(TEST_NUM))
     1629    12240    2      THEN FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 2;

  12240  3 003364   000000 236100                    LDQ     0,,PR0
         3 003365   000006 402007                    MPY     6,DL
         3 003366   000001 736000                    QLS     1
         3 003367   000010 471406 1                  LDP1    FEP+7,QL
         3 003370   000002 235007                    LDA     2,DL
         3 003371   100000 755100                    STA     0,,PR1
         3 003372   003416 710000 3                  TRA     s:12244

     1630    12241    2      ELSE IF FEP.STATUS.BUSY(TEST_NUM)

  12241  3 003373   000000 236100                    LDQ     0,,PR0
         3 003374   000006 402007                    MPY     6,DL
         3 003375   000001 736000                    QLS     1
         3 003376   000001 236006 1                  LDQ     FEP,QL
         3 003377   000400 316003                    CANQ    256,DU
         3 003400   003410 600000 3                  TZE     s:12243

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:218  
     1631    12242    2         THEN FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 8;

  12242  3 003401   000000 236100                    LDQ     0,,PR0
         3 003402   000006 402007                    MPY     6,DL
         3 003403   000001 736000                    QLS     1
         3 003404   000010 471406 1                  LDP1    FEP+7,QL
         3 003405   000010 235007                    LDA     8,DL
         3 003406   100000 755100                    STA     0,,PR1
         3 003407   003416 710000 3                  TRA     s:12244

     1632    12243    2         ELSE FEP.STATUS$(TEST_NUM)->GEROUT_STATUS = 4; /* OP COMPLETE */

  12243  3 003410   000000 236100                    LDQ     0,,PR0
         3 003411   000006 402007                    MPY     6,DL
         3 003412   000001 736000                    QLS     1
         3 003413   000010 471406 1                  LDP1    FEP+7,QL
         3 003414   000004 235007                    LDA     4,DL
         3 003415   100000 755100                    STA     0,,PR1

     1633    12244    2      RETURN;

  12244  3 003416   200042 221300                    LDX1  ! WORK_ASC,,AUTO
         3 003417   000001 702211                    TSX2  ! 1,X1

     1634    12245
     1635    12246    2   END RETURN_GEROUT_STATUS;
     1636    12247        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:219  
     1637    12248        /*I* NAME:         GEROUT_WRITE
     1638    12249             AUTHOR:       Curt Andes
     1639    12250             PURPOSE:      Write an ICM to an FEP
     1640    12251             INTERFACE:    M$WRITE
     1641    12252                           CLOSE_DCB_IF_UNUSED
     1642    12253                           BUSY_THIS_TEST
     1643    12254                           TOX$WARN
     1644    12255                           TOX$ERROR
     1645    12256             PARAMETERS:   The number of the FEP table entry we are working with
     1646    12257             DATA:         WRITE_TO_FEP
     1647    12258                           FEP
     1648    12259                           TOC_ERROR_CODE
     1649    12260             DESCRIPTION:  This procedure sets up the FPT for an M$WRITE.
     1650    12261                           If the write is successful, then all FEP table
     1651    12262                           entries  using that  DCB are  marked busy.  If
     1652    12263                           the  write ALTRETURNS, then  the exec and test
     1653    12264                           line status is set to DISCONNECTED, the DCB is
     1654    12265                           closed if no other  tests are using it, and an
     1655    12266                           ALTRETURN  is taken.  If the  DCB is busy when
     1656    12267                           this  routine  is  called,  then COLTS aborts,
     1657    12268                           since the subexec has screwed up.
     1658    12269        */
     1659    12270
     1660    12271    1   GEROUT_WRITE: PROC (TEST_NUM) ALTRET;

  12271  3 003420   200036 741300       GEROUT_WRITE STX1  ! DUMMY_BUF,,AUTO

     1661    12272
     1662    12273        /* Variables */
     1663    12274
     1664    12275    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1665    12276    2      DCL GEROUT_STATUS UBIN WORD BASED ALIGNED;
     1666    12277        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:220  
     1667    12278        /* Code */
     1668    12279
     1669    12280    2      WRITE_TO_FEP.BUF_ = VECTOR(FEP.ICM$(TEST_NUM)->ICM);

  12280  3 003421   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003422   000000 236100                    LDQ     0,,PR0
         3 003423   000006 402007                    MPY     6,DL
         3 003424   000001 736000                    QLS     1
         3 003425   000011 471406 1                  LDP1    FEP+8,QL
         3 003426   000013 235000 4                  LDA     11
         3 003427   200062 451500                    STP1    I+2,,AUTO
         3 003430   200062 236100                    LDQ     I+2,,AUTO
         3 003431   000352 757000 1                  STAQ    WRITE_TO_FEP+4

     1670    12281    2      WRITE_TO_FEP.BUF_.BOUND = FEP.ICM_BYTE_CNT (TEST_NUM) - 1;

  12281  3 003432   000000 236100                    LDQ     0,,PR0
         3 003433   000006 402007                    MPY     6,DL
         3 003434   000001 736000                    QLS     1
         3 003435   000014 236006 1                  LDQ     FEP+11,QL
         3 003436   000001 136007                    SBLQ    1,DL
         3 003437   000020 736000                    QLS     16
         3 003440   000352 676000 1                  ERQ     WRITE_TO_FEP+4
         3 003441   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 003442   000352 656000 1                  ERSQ    WRITE_TO_FEP+4

     1671    12282    2      WRITE_TO_FEP.V.DCB# = FEP.DCB_NUM(TEST_NUM);

  12282  3 003443   000000 236100                    LDQ     0,,PR0
         3 003444   000006 402007                    MPY     6,DL
         3 003445   000001 736000                    QLS     1
         3 003446   000001 720006 1                  LXL0    FEP,QL
         3 003447   000356 740000 1                  STX0    WRITE_TO_FEP+8

     1672    12283    2      IF FEP.STATUS.ACTIVE(TEST_NUM) & FEP.STATUS.DCB_OPEN(TEST_NUM)

  12283  3 003450   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:221  
         3 003451   000006 402007                    MPY     6,DL
         3 003452   000000 622006                    EAX2    0,QL
         3 003453   000001 736000                    QLS     1
         3 003454   000001 236006 1                  LDQ     FEP,QL
         3 003455   000012 736000                    QLS     10
         3 003456   400000 376003                    ANQ     -131072,DU
         3 003457   200062 756100                    STQ     I+2,,AUTO
         3 003460   000000 635012                    EAA     0,X2
         3 003461   000021 771000                    ARL     17
         3 003462   000001 236005 1                  LDQ     FEP,AL
         3 003463   400000 376003                    ANQ     -131072,DU
         3 003464   200062 376100                    ANQ     I+2,,AUTO
         3 003465   003616 600000 3                  TZE     s:12314

     1673    12284    3      THEN DO;

     1674    12285    3              IF FEP.STATUS.BUSY(TEST_NUM)

  12285  3 003466   000000 236100                    LDQ     0,,PR0
         3 003467   000006 402007                    MPY     6,DL
         3 003470   000001 736000                    QLS     1
         3 003471   000001 236006 1                  LDQ     FEP,QL
         3 003472   000400 316003                    CANQ    256,DU
         3 003473   003523 600000 3                  TZE     s:12294

     1675    12286    4              THEN DO;

     1676    12287    4                      FEP.STATUS$ (TEST_NUM) -> GEROUT_STATUS = 8 ;

  12287  3 003474   000000 236100                    LDQ     0,,PR0
         3 003475   000006 402007                    MPY     6,DL
         3 003476   000001 736000                    QLS     1
         3 003477   000010 471406 1                  LDP1    FEP+7,QL
         3 003500   000010 235007                    LDA     8,DL
         3 003501   100000 755100                    STA     0,,PR1

     1677    12288    4                      IF FEP.C_CALL$ (TEST_NUM) ~= ADDR (NIL)
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:222  

  12288  3 003502   000000 236100                    LDQ     0,,PR0
         3 003503   000006 402007                    MPY     6,DL
         3 003504   000001 736000                    QLS     1
         3 003505   000007 236006 1                  LDQ     FEP+6,QL
         3 003506   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 003507   003521 600000 3                  TZE     s:12291

     1678    12289    4                      THEN CALL TOK$COURTESY_CALL (FEP.C_CALL$ (TEST_NUM));

  12289  3 003510   000000 236100                    LDQ     0,,PR0
         3 003511   000006 402007                    MPY     6,DL
         3 003512   000023 736000                    QLS     19
         3 003513   000007 036000 4                  ADLQ    7
         3 003514   200062 756100                    STQ     I+2,,AUTO
         3 003515   200062 630500                    EPPR0   I+2,,AUTO
         3 003516   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003517   000000 701000 xent               TSX1    TOK$COURTESY_CALL
         3 003520   000000 011000                    NOP     0

     1679    12290    4                      ELSE ;
     1680    12291    4                      ALTRETURN;

  12291  3 003521   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003522   000000 702211                    TSX2  ! 0,X1

     1681    12292    4                   END /* THEN */ ;
     1682    12293    4              ELSE DO;

     1683    12294    4                      CALL M$WRITE (WRITE_TO_FEP) WHENRETURN

  12294  3 003523   000346 630400 1                  EPPR0   WRITE_TO_FEP
         3 003524   440001 713400                    CLIMB   alt,write
         3 003525   401400 401760                    pmme    nvectors=4
         3 003526   003534 702000 3                  TSX2    s:12300

     1684    12295    5                           DO;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:223  

     1685    12296    5                              CALL BUSY_THIS_TEST (TEST_NUM);

  12296  3 003527   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003530   200041 756100                    STQ     WORK,,AUTO
         3 003531   004273 701000 3                  TSX1    BUSY_THIS_TEST
         3 003532   000000 011000                    NOP     0

     1686    12297    5                           END;

  12297  3 003533   003614 710000 3                  TRA     s:12310

     1687    12298    4                      WHENALTRETURN
     1688    12299    5                           DO;

     1689    12300    5                              CALL TOX$WARN (B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR);

  12300  3 003534   000000 470400 xsym               LDP0    B$TCB$
         3 003535   000000 471500                    LDP1    0,,PR0
         3 003536   100102 633500                    EPPR3   66,,PR1
         3 003537   200062 453500                    STP3    I+2,,AUTO
         3 003540   200062 630500                    EPPR0   I+2,,AUTO
         3 003541   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003542   000000 701000 xent               TSX1    TOX$WARN
         3 003543   000000 011000                    NOP     0

     1690    12301    5                              TOC_ERROR_CODE.ERR# = %E$NOHNDLR;

  12301  3 003544   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 003545   000001 376000 4                  ANQ     1
         3 003546   000320 276007                    ORQ     208,DL
         3 003547   000000 756000 1                  STQ     TOC_ERROR_CODE

     1691    12302    5                              CALL TOX$WARN (TOC_ERROR_CODE);

  12302  3 003550   000002 630400 4                  EPPR0   2
         3 003551   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:224  
         3 003552   000000 701000 xent               TSX1    TOX$WARN
         3 003553   000000 011000                    NOP     0

     1692    12303    5                              FEP.FEP_STATUS(TEST_NUM) = 0;

  12303  3 003554   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003555   000000 236100                    LDQ     0,,PR0
         3 003556   000006 402007                    MPY     6,DL
         3 003557   000001 736000                    QLS     1
         3 003560   000000 220003                    LDX0    0,DU
         3 003561   000001 740006 1                  STX0    FEP,QL

     1693    12304    5                              FEP.STATUS.DISCONNECTED(TEST_NUM) = %TRUE;

  12304  3 003562   000000 236100                    LDQ     0,,PR0
         3 003563   000006 402007                    MPY     6,DL
         3 003564   000001 736000                    QLS     1
         3 003565   000000 621006                    EAX1    0,QL
         3 003566   200000 236003                    LDQ     65536,DU
         3 003567   000001 256011 1                  ORSQ    FEP,X1

     1694    12305    5                              CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);

  12305  3 003570   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003571   200047 756100                    STQ     NO_DCB_OBTAINED,,AUTO
         3 003572   004315 701000 3                  TSX1    CLOSE_DCB_IF_UNUSED
         3 003573   000000 011000                    NOP     0

     1695    12306    5                              CALL RETURN_GEROUT_STATUS (TEST_NUM) ;

  12306  3 003574   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003575   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 003576   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 003577   000000 011000                    NOP     0

     1696    12307    5                              CALL TOK$COURTESY_CALL (FEP.C_CALL$ (TEST_NUM)) ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:225  
  12307  3 003600   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003601   000000 236100                    LDQ     0,,PR0
         3 003602   000006 402007                    MPY     6,DL
         3 003603   000023 736000                    QLS     19
         3 003604   000007 036000 4                  ADLQ    7
         3 003605   200062 756100                    STQ     I+2,,AUTO
         3 003606   200062 630500                    EPPR0   I+2,,AUTO
         3 003607   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003610   000000 701000 xent               TSX1    TOK$COURTESY_CALL
         3 003611   000000 011000                    NOP     0

     1697    12308    5                              ALTRETURN;

  12308  3 003612   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003613   000000 702211                    TSX2  ! 0,X1

     1698    12309    5                           END;
     1699    12310    4                      RETURN;

  12310  3 003614   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003615   000001 702211                    TSX2  ! 1,X1

     1700    12311    4                   END;
     1701    12312    3           END;
     1702    12313    3      ELSE DO;

     1703    12314    3              TOC_ERROR_CODE.ERR# = %E$BADLNST;

  12314  3 003616   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 003617   000001 376000 4                  ANQ     1
         3 003620   000040 276007                    ORQ     32,DL
         3 003621   000000 756000 1                  STQ     TOC_ERROR_CODE

     1704    12315    3              CALL TOX$ERROR (TOC_ERROR_CODE);

  12315  3 003622   000002 630400 4                  EPPR0   2
         3 003623   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:226  
         3 003624   000000 701000 xent               TSX1    TOX$ERROR
         3 003625   000000 011000                    NOP     0

     1705    12316    3           END;

     1706    12317
     1707    12318    2   END GEROUT_WRITE;

  12318  3 003626   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003627   000001 702211                    TSX2  ! 1,X1

     1708    12319        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:227  
     1709    12320        /*I* NAME:         GEROUT_READ
     1710    12321             AUTHOR:       Curt Andes
     1711    12322             PURPOSE:      Perform a read of an ICM from an FEP
     1712    12323             INTERFACE:    M$READ
     1713    12324                           UNBUSY_THIS_TEST
     1714    12325                           CHECK_READ
     1715    12326                           TOK$COURTESY_CALL
     1716    12327                           CLOSE_DCB_IF_UNUSED;
     1717    12328             PARAMETERS:   The number of the FEP table entry we are working with
     1718    12329             DATA:         READ_FROM_FEP
     1719    12330                           FEP
     1720    12331             DESCRIPTION:  This  procedure reads  an ICM  that the FEP is
     1721    12332                           sending  in response to  a prior GEROUT_WRITE.
     1722    12333                           If the M$READ  returns normally, then all DCBs
     1723    12334                           that  were  marked  busy  when the originating
     1724    12335                           write was done  will have that status cleared.
     1725    12336                           Check_read  will then  be called  to make sure
     1726    12337                           that   certain   ICMs   that   require   post-
     1727    12338                           processing  (such as  the START  TEST) get the
     1728    12339                           necessary  attention. A courtesy  call is then
     1729    12340                           paid  to  inform   the  subexec  of  the  read
     1730    12341                           completion.  If the M$READ  takes an ALTRETURN
     1731    12342                           then the DCB will 'unbusied' in all tests that
     1732    12343                           are  using it,  the current  test line will be
     1733    12344                           set  DISCONNECTED  and  an  ALTRETURN  will be
     1734    12345                           taken.
     1735    12346        */
     1736    12347        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:228  
     1737    12348    1   GEROUT_READ: PROC (TEST_NUM) ALTRET;

  12348  3 003630   200036 741300       GEROUT_READ  STX1  ! DUMMY_BUF,,AUTO

     1738    12349
     1739    12350        /* Variables */
     1740    12351
     1741    12352    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1742    12353
     1743    12354        /* Code */
     1744    12355
     1745    12356    2      READ_FROM_FEP.BUF_ = VECTOR (FEP.RECEIVE_ICM$(TEST_NUM)->ICM);

  12356  3 003631   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003632   000000 236100                    LDQ     0,,PR0
         3 003633   000006 402007                    MPY     6,DL
         3 003634   000001 736000                    QLS     1
         3 003635   000012 471406 1                  LDP1    FEP+9,QL
         3 003636   000013 235000 4                  LDA     11
         3 003637   200062 451500                    STP1    I+2,,AUTO
         3 003640   200062 236100                    LDQ     I+2,,AUTO
         3 003641   000366 757000 1                  STAQ    READ_FROM_FEP+4

     1746    12357    2      READ_FROM_FEP.V.DCB# = FEP.DCB_NUM(TEST_NUM);

  12357  3 003642   000000 236100                    LDQ     0,,PR0
         3 003643   000006 402007                    MPY     6,DL
         3 003644   000001 736000                    QLS     1
         3 003645   000001 720006 1                  LXL0    FEP,QL
         3 003646   000372 740000 1                  STX0    READ_FROM_FEP+8

     1747    12358    2      READ_FROM_FEP.BUF_.BOUND = FEP.ICM_BYTE_CNT (TEST_NUM) - 1 ;

  12358  3 003647   000000 236100                    LDQ     0,,PR0
         3 003650   000006 402007                    MPY     6,DL
         3 003651   000001 736000                    QLS     1
         3 003652   000014 236006 1                  LDQ     FEP+11,QL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:229  
         3 003653   000001 136007                    SBLQ    1,DL
         3 003654   000020 736000                    QLS     16
         3 003655   000366 676000 1                  ERQ     READ_FROM_FEP+4
         3 003656   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 003657   000366 656000 1                  ERSQ    READ_FROM_FEP+4

     1748    12359    2      CALL M$READ (READ_FROM_FEP) WHENRETURN

  12359  3 003660   000362 630400 1                  EPPR0   READ_FROM_FEP
         3 003661   440000 713400                    CLIMB   alt,read
         3 003662   401400 401760                    pmme    nvectors=4
         3 003663   003672 702000 3                  TSX2    s:12366

     1749    12360    3           DO;

     1750    12361    3              CALL TOC$GEROUT_READ_COMPLETION (TEST_NUM);

  12361  3 003664   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003665   200041 756100                    STQ     WORK,,AUTO
         3 003666   004577 701000 3                  TSX1    TOC$GEROUT_READ_COMPLETION
         3 003667   000000 011000                    NOP     0

     1751    12362    3              RETURN;

  12362  3 003670   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003671   000001 702211                    TSX2  ! 1,X1

     1752    12363    3           END;
     1753    12364    2      WHENALTRETURN
     1754    12365    3           DO;

     1755    12366    3              CALL TOX$WARN (B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;

  12366  3 003672   000000 470400 xsym               LDP0    B$TCB$
         3 003673   000000 471500                    LDP1    0,,PR0
         3 003674   100102 633500                    EPPR3   66,,PR1
         3 003675   200062 453500                    STP3    I+2,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:230  
         3 003676   200062 630500                    EPPR0   I+2,,AUTO
         3 003677   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003700   000000 701000 xent               TSX1    TOX$WARN
         3 003701   000000 011000                    NOP     0

     1756    12367    3              FEP.RECEIVE_ICM$(TEST_NUM)->ICM = '0'B;

  12367  3 003702   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003703   000000 236100                    LDQ     0,,PR0
         3 003704   000006 402007                    MPY     6,DL
         3 003705   000001 736000                    QLS     1
         3 003706   000012 471406 1                  LDP1    FEP+9,QL
         3 003707   000100 100400                    MLR     fill='000'O
         3 003710   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 003711   100000 001000                    ADSC9   0,,PR1                   cn=0,n=512

     1757    12368    3              CALL UNBUSY_THIS_TEST (TEST_NUM);

  12368  3 003712   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003713   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 003714   004304 701000 3                  TSX1    UNBUSY_THIS_TEST
         3 003715   000000 011000                    NOP     0

     1758    12369    3              FEP.FEP_STATUS(TEST_NUM) = 0;

  12369  3 003716   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003717   000000 236100                    LDQ     0,,PR0
         3 003720   000006 402007                    MPY     6,DL
         3 003721   000001 736000                    QLS     1
         3 003722   000000 220003                    LDX0    0,DU
         3 003723   000001 740006 1                  STX0    FEP,QL

     1759    12370    3              FEP.STATUS.DISCONNECTED(TEST_NUM) = %TRUE;

  12370  3 003724   000000 236100                    LDQ     0,,PR0
         3 003725   000006 402007                    MPY     6,DL
         3 003726   000001 736000                    QLS     1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:231  
         3 003727   000000 621006                    EAX1    0,QL
         3 003730   200000 236003                    LDQ     65536,DU
         3 003731   000001 256011 1                  ORSQ    FEP,X1

     1760    12371    3              CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);

  12371  3 003732   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003733   200047 756100                    STQ     NO_DCB_OBTAINED,,AUTO
         3 003734   004315 701000 3                  TSX1    CLOSE_DCB_IF_UNUSED
         3 003735   000000 011000                    NOP     0

     1761    12372    3              CALL RETURN_GEROUT_STATUS (TEST_NUM);

  12372  3 003736   200037 236100                    LDQ     @TEST_NUM,,AUTO
         3 003737   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 003740   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 003741   000000 011000                    NOP     0

     1762    12373    3              CALL TOK$COURTESY_CALL (FEP.C_CALL$(TEST_NUM));

  12373  3 003742   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 003743   000000 236100                    LDQ     0,,PR0
         3 003744   000006 402007                    MPY     6,DL
         3 003745   000023 736000                    QLS     19
         3 003746   000007 036000 4                  ADLQ    7
         3 003747   200062 756100                    STQ     I+2,,AUTO
         3 003750   200062 630500                    EPPR0   I+2,,AUTO
         3 003751   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 003752   000000 701000 xent               TSX1    TOK$COURTESY_CALL
         3 003753   000000 011000                    NOP     0

     1763    12374    3              ALTRETURN;

  12374  3 003754   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 003755   000000 702211                    TSX2  ! 0,X1

     1764    12375    3           END;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:232  
     1765    12376
     1766    12377    2   END GEROUT_READ;
     1767    12378        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:233  
     1768    12379        /*I* NAME:         CHECK_READ
     1769    12380             AUTHOR:       Curt Andes
     1770    12381             PURPOSE:      Determine if post- processing is necessary for this ICM
     1771    12382             INTERFACE:    TEST_CONNECT
     1772    12383                           TEST_DISCONNECT
     1773    12384             PARAMETERS:   The number of the FEP table entry we are working with
     1774    12385             DATA:         FEP
     1775    12386             DESCRIPTION:  This procedure checks  the ICM command after a
     1776    12387                           read completes, and if any post- processing is
     1777    12388                           required, the appropriate procedure is called.
     1778    12389        */
     1779    12390
     1780    12391    1   CHECK_READ: PROC (TEST_NUM) ALTRET;

  12391  3 003756   200042 741300       CHECK_READ   STX1  ! WORK_ASC,,AUTO

     1781    12392
     1782    12393        /* VARIABLES */
     1783    12394
     1784    12395    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1785    12396
     1786    12397        /* CODE */
     1787    12398
     1788    12399    3      DO CASE (FEP.ICM$(TEST_NUM)->ICM.CMD);

  12399  3 003757   200043 470500                    LDP0    @TEST_NUM,,AUTO
         3 003760   000000 236100                    LDQ     0,,PR0
         3 003761   000006 402007                    MPY     6,DL
         3 003762   000001 736000                    QLS     1
         3 003763   000011 471406 1                  LDP1    FEP+8,QL
         3 003764   100002 236100                    LDQ     2,,PR1
         3 003765   000033 772000                    QRL     27
         3 003766   000006 116007                    CMPQ    6,DL
         3 003767   003771 602006 3                  TNC     s:12399+10,QL
         3 003770   004011 710000 3                  TRA     s:12406
         3 003771   004011 710000 3                  TRA     s:12406
         3 003772   004011 710000 3                  TRA     s:12406
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:234  
         3 003773   004011 710000 3                  TRA     s:12406
         3 003774   003777 710000 3                  TRA     s:12401
         3 003775   004011 710000 3                  TRA     s:12406
         3 003776   004004 710000 3                  TRA     s:12403

     1789    12400    3         CASE (3); /* START */

     1790    12401    3            CALL TEST_CONNECT (TEST_NUM);

  12401  3 003777   200043 236100                    LDQ     @TEST_NUM,,AUTO
         3 004000   200045 756100                    STQ     @FEP_INDEX,,AUTO
         3 004001   004013 701000 3                  TSX1    TEST_CONNECT
         3 004002   000000 011000                    NOP     0
         3 004003   004011 710000 3                  TRA     s:12406

     1791    12402    3         CASE (5); /* STOP TEST ICM */

     1792    12403    3            CALL TEST_DISCONNECT (TEST_NUM);

  12403  3 004004   200043 236100                    LDQ     @TEST_NUM,,AUTO
         3 004005   200045 756100                    STQ     @FEP_INDEX,,AUTO
         3 004006   004033 701000 3                  TSX1    TEST_DISCONNECT
         3 004007   000000 011000                    NOP     0
         3 004010   004011 710000 3                  TRA     s:12406

     1793    12404    3         CASE (ELSE);

     1794    12405    3      END;

     1795    12406    2      RETURN;

  12406  3 004011   200042 221300                    LDX1  ! WORK_ASC,,AUTO
         3 004012   000001 702211                    TSX2  ! 1,X1

     1796    12407        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:235  
     1797    12408        /*I* NAME:         TEST_CONNECT
     1798    12409             AUTHOR:       Curt Andes
     1799    12410             PURPOSE:      Connect a test line after a successful START TEST
     1800    12411             INTERFACE:    CONNECT_TO_SLAVE
     1801    12412             PARAMETERS:   The number of the FEP table entry we are working with
     1802    12413             DATA:         FEP
     1803    12414             DESCRIPTION:  This procedure checks to see if the START TEST
     1804    12415                           ICM  completes with  OP COMPLETE.  If it does,
     1805    12416                           then the test line is connected by calling the
     1806    12417                           CONNECT_TO_SLAVE procedure. If the ICM did not
     1807    12418                           complete  without  an  error,  then nothing is
     1808    12419                           done. The subexec can worry about it.
     1809    12420        */
     1810    12421
     1811    12422    2   TEST_CONNECT: PROC (TEST_NUM);

  12422  3 004013   200044 741300       TEST_CONNECT STX1  ! @TEST_NUM+1,,AUTO

     1812    12423
     1813    12424        /* VARIABLES */
     1814    12425
     1815    12426    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1816    12427
     1817    12428        /* CODE */
     1818    12429
     1819    12430    3      IF FEP.RECEIVE_ICM$(TEST_NUM)->ICM.REPLY = 33

  12430  3 004014   200045 470500                    LDP0    @TEST_NUM,,AUTO
         3 004015   000000 236100                    LDQ     0,,PR0
         3 004016   000006 402007                    MPY     6,DL
         3 004017   000001 736000                    QLS     1
         3 004020   000012 471406 1                  LDP1    FEP+9,QL
         3 004021   100002 236100                    LDQ     2,,PR1
         3 004022   000777 376003                    ANQ     511,DU
         3 004023   000041 116003                    CMPQ    33,DU
         3 004024   004031 601000 3                  TNZ     s:12435

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:236  
     1820    12431    4      THEN DO;

     1821    12432    4              CALL CONNECT_TO_SLAVE (TEST_NUM);

  12432  3 004025   200045 236100                    LDQ     @TEST_NUM,,AUTO
         3 004026   200047 756100                    STQ     NO_DCB_OBTAINED,,AUTO
         3 004027   004653 701000 3                  TSX1    CONNECT_TO_SLAVE
         3 004030   000000 011000                    NOP     0

     1822    12433    4           END;

     1823    12434    3      ELSE;
     1824    12435    3      RETURN;

  12435  3 004031   200044 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 004032   000001 702211                    TSX2  ! 1,X1

     1825    12436    3   END TEST_CONNECT;
     1826    12437        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:237  
     1827    12438        /*I* NAME:         TEST_DISCONNECT
     1828    12439             AUTHOR:       Curt Andes
     1829    12440             PURPOSE:      Disconnect a test line
     1830    12441             INTERFACE:    CLOSE_DCB_IF_UNUSED
     1831    12442                           RETURN_GEROUT_STATUS
     1832    12443             PARAMETERS:   The FEP table entry number we are working with
     1833    12444             DATA:         FEP
     1834    12445             DESCRIPTION:  This  procedure will  reset the TEST_CONNECTED
     1835    12446                           and TDISCONNECT_ISSUED status, signifying that
     1836    12447                           the test line has been disconnected.
     1837    12448        */
     1838    12449
     1839    12450    2   TEST_DISCONNECT: PROC (TEST_NUM);

  12450  3 004033   200044 741300       TEST_DISCON* STX1  ! @TEST_NUM+1,,AUTO

     1840    12451
     1841    12452        /* VARIABLES */
     1842    12453
     1843    12454    3      DCL TEST_NUM UBIN WORD ALIGNED;
     1844    12455
     1845    12456        /* CODE */
     1846    12457
     1847    12458    3      FEP.STATUS.TDISCONNECT_ISSUED(TEST_NUM) = %FALSE;

  12458  3 004034   200045 470500                    LDP0    @TEST_NUM,,AUTO
         3 004035   000000 236100                    LDQ     0,,PR0
         3 004036   000006 402007                    MPY     6,DL
         3 004037   000001 736000                    QLS     1
         3 004040   000000 620006                    EAX0    0,QL
         3 004041   000014 236000 4                  LDQ     12
         3 004042   000001 356010 1                  ANSQ    FEP,X0

     1848    12459    3      CALL CLOSE_DCB_IF_UNUSED (TEST_NUM);

  12459  3 004043   200045 236100                    LDQ     @TEST_NUM,,AUTO
         3 004044   200047 756100                    STQ     NO_DCB_OBTAINED,,AUTO
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:238  
         3 004045   004315 701000 3                  TSX1    CLOSE_DCB_IF_UNUSED
         3 004046   000000 011000                    NOP     0

     1849    12460    3      FEP.FEP_STATUS (TEST_NUM)= 0 ;

  12460  3 004047   200045 470500                    LDP0    @TEST_NUM,,AUTO
         3 004050   000000 236100                    LDQ     0,,PR0
         3 004051   000006 402007                    MPY     6,DL
         3 004052   000001 736000                    QLS     1
         3 004053   000000 220003                    LDX0    0,DU
         3 004054   000001 740006 1                  STX0    FEP,QL

     1850    12461    3      RETURN;

  12461  3 004055   200044 221300                    LDX1  ! @TEST_NUM+1,,AUTO
         3 004056   000001 702211                    TSX2  ! 1,X1

     1851    12462    3   END TEST_DISCONNECT;
     1852    12463    2   END CHECK_READ;
     1853    12464        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:239  
     1854    12465        /*I* NAME:         CLOSE_DCB
     1855    12466             AUTHOR:       Curt Andes
     1856    12467             PURPOSE:      Close the communication path between a test and an FEP
     1857    12468             INTERFACE:    M$CLOSE Monitor Service
     1858    12469                           RELEASE_DCB
     1859    12470                           TOX$ERROR
     1860    12471             PARAMETERS:   The number of the DCB to close
     1861    12472             DATA:         CLOSE_HNDLR_PATH
     1862    12473                           FEP
     1863    12474             DESCRIPTION:  This procedure calls  the M$CLOSE to close the
     1864    12475                           DCB that is passed as a parameter.
     1865    12476        */
     1866    12477    1   CLOSE_DCB: PROC (DCB_NUM);

  12477  3 004057   200052 741300       CLOSE_DCB    STX1  ! DCB_IN_USE+2,,AUTO

     1867    12478
     1868    12479        /* Variables */
     1869    12480
     1870    12481    2      DCL DCB_NUM UBIN HALF HALIGNED;
     1871    12482    2      DCL I UBIN WORD ALIGNED;
     1872    12483
     1873    12484        /* Code */
     1874    12485
     1875    12486    2      CLOSE_HNDLR_PATH.V.DCB# = DCB_NUM;

  12486  3 004060   200053 470500                    LDP0    @DCB_NUM,,AUTO
         3 004061   000000 100500                    MLR     fill='000'O
         3 004062   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 004063   000342 000002 1                  ADSC9   CLOSE_HNDLR_PATH+26      cn=0,n=2

     1876    12487    2      CALL M$CLOSE (CLOSE_HNDLR_PATH) ALTRET (ERROR) ;

  12487  3 004064   000310 630400 1                  EPPR0   CLOSE_HNDLR_PATH
         3 004065   450001 713400                    CLIMB   alt,close
         3 004066   406000 401760                    pmme    nvectors=13
         3 004067   004123 702000 3                  TSX2    ERROR
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:240  

     1877    12488    3      DO I = 0 TO %LAST_FEP;

  12488  3 004070   200054 450100                    STZ     I,,AUTO

     1878    12489    3         IF FEP.DCB_NUM (I) = DCB_NUM

  12489  3 004071   200053 470500                    LDP0    @DCB_NUM,,AUTO
         3 004072   000100 101500                    MRL     fill='000'O
         3 004073   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 004074   200062 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         3 004075   200054 236100                    LDQ     I,,AUTO
         3 004076   000014 402007                    MPY     12,DL
         3 004077   000001 236006 1                  LDQ     FEP,QL
         3 004100   777777 376007                    ANQ     -1,DL
         3 004101   200062 116100                    CMPQ    I+2,,AUTO
         3 004102   004110 601000 3                  TNZ     s:12492

     1879    12490    3         THEN FEP.STATUS.DCB_OPEN(I) = %FALSE;

  12490  3 004103   200054 236100                    LDQ     I,,AUTO
         3 004104   000014 402007                    MPY     12,DL
         3 004105   000000 620006                    EAX0    0,QL
         3 004106   000010 236000 4                  LDQ     8
         3 004107   000001 356010 1                  ANSQ    FEP,X0

     1880    12491    3         ELSE;
     1881    12492    3      END;

  12492  3 004110   200054 235100                    LDA     I,,AUTO
         3 004111   000001 035007                    ADLA    1,DL
         3 004112   200054 755100                    STA     I,,AUTO
         3 004113   000010 115007                    CMPA    8,DL
         3 004114   004071 602000 3                  TNC     s:12489

     1882    12493    2      CALL RELEASE_DCB (DCB_NUM) ALTRET (ERROR) ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:241  
  12493  3 004115   200053 236100                    LDQ     @DCB_NUM,,AUTO
         3 004116   200057 756100                    STQ     I+2,,AUTO
         3 004117   004135 701000 3                  TSX1    RELEASE_DCB
         3 004120   004123 702000 3                  TSX2    ERROR

     1883    12494    2      RETURN;

  12494  3 004121   200052 221300                    LDX1  ! DCB_IN_USE+2,,AUTO
         3 004122   000001 702211                    TSX2  ! 1,X1

     1884    12495
     1885    12496    2   ERROR:
     1886    12497    2      CALL TOX$ERROR (B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;

  12497  3 004123   000000 470400 xsym  ERROR        LDP0    B$TCB$
         3 004124   000000 471500                    LDP1    0,,PR0
         3 004125   100102 633500                    EPPR3   66,,PR1
         3 004126   200062 453500                    STP3    I+2,,AUTO
         3 004127   200062 630500                    EPPR0   I+2,,AUTO
         3 004130   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 004131   000000 701000 xent               TSX1    TOX$ERROR
         3 004132   000000 011000                    NOP     0

     1887    12498    2      RETURN ;

  12498  3 004133   200052 221300                    LDX1  ! DCB_IN_USE+2,,AUTO
         3 004134   000001 702211                    TSX2  ! 1,X1

     1888    12499    2   END CLOSE_DCB;
     1889    12500        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:242  
     1890    12501        /*I* NAME:         RELEASE_DCB
     1891    12502             AUTHOR:       Kathy Larkin
     1892    12503             PURPOSE:      Release a DCB
     1893    12504             INTERFACE:    M$RELDCB monitor service
     1894    12505             PARAMETERS:   DCB_NUM - input - number of DCB to release
     1895    12506             DATA:         COLTS_DCBS
     1896    12507             DESCRIPTION:  This  procedure  will  release  the  DCB whose
     1897    12508                           number is DCB_NUM,  and  will set the value to
     1898    12509                           in the COLTS_DCBS table to undefined.  The DCB
     1899    12510                           must have been  closed prior to being released
     1900    12511                           here or M$RELDCB will ALTRET.
     1901    12512        */
     1902    12513
     1903    12514    1   RELEASE_DCB: PROC (DCB_NUM) ALTRET ;

  12514  3 004135   200056 741300       RELEASE_DCB  STX1  ! I+1,,AUTO

     1904    12515
     1905    12516    2      DCL DCB_NUM     UBIN HALF HALIGNED ;
     1906    12517    2      DCL I           UBIN WORD ALIGNED ;
     1907    12518           %FPT_RELDCB (FPTN = REL_COLTS_DCB) ;
     1908    12532
     1909    12533        /* Code */
     1910    12534
     1911    12535    2      REL_COLTS_DCB.V.DCB# = DCB_NUM ;

  12535  3 004136   200057 470500                    LDP0    @DCB_NUM,,AUTO
         3 004137   000000 100500                    MLR     fill='000'O
         3 004140   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 004141   000416 000002 1                  ADSC9   REL_COLTS_DCB+2          cn=0,n=2

     1912    12536    2      CALL M$RELDCB (REL_COLTS_DCB) ALTRET (ERROR) ;

  12536  3 004142   000414 630400 1                  EPPR0   REL_COLTS_DCB
         3 004143   460003 713400                    CLIMB   alt,+24579
         3 004144   400000 401760                    pmme    nvectors=1
         3 004145   004170 702000 3                  TSX2    ERROR
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:243  

     1913    12537    3      DO I = 0 TO %LAST_FEP ;

  12537  3 004146   200060 450100                    STZ     I,,AUTO

     1914    12538    3         IF COLTS_DCBS (I) = DCB_NUM

  12538  3 004147   200060 720100                    LXL0    I,,AUTO
         3 004150   200057 470500                    LDP0    @DCB_NUM,,AUTO
         3 004151   000100 101500                    MRL     fill='000'O
         3 004152   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 004153   200062 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         3 004154   200062 236100                    LDQ     I+2,,AUTO
         3 004155   000143 116010 1                  CMPQ    COLTS_DCBS,X0
         3 004156   004161 601000 3                  TNZ     s:12541

     1915    12539    3         THEN COLTS_DCBS (I) = %UNDEFINED ;

  12539  3 004157   000001 335007                    LCA     1,DL
         3 004160   000143 755010 1                  STA     COLTS_DCBS,X0

     1916    12540    3         ELSE ;
     1917    12541    3      END /* DO */ ;

  12541  3 004161   200060 235100                    LDA     I,,AUTO
         3 004162   000001 035007                    ADLA    1,DL
         3 004163   200060 755100                    STA     I,,AUTO
         3 004164   000010 115007                    CMPA    8,DL
         3 004165   004147 602000 3                  TNC     s:12538

     1918    12542    2      RETURN ;

  12542  3 004166   200056 221300                    LDX1  ! I+1,,AUTO
         3 004167   000001 702211                    TSX2  ! 1,X1

     1919    12543    2   ERROR:
     1920    12544    2      ALTRETURN ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:244  

  12544  3 004170   200056 221300       ERROR        LDX1  ! I+1,,AUTO
         3 004171   000000 702211                    TSX2  ! 0,X1

     1921    12545    2   END RELEASE_DCB ;
     1922    12546        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:245  
     1923    12547        /*I* NAME:         ANYBODY_USING_THIS_DCB
     1924    12548             AUTHOR:       Curt Andes
     1925    12549             PURPOSE:      See if a test other than the current test is using a DCB.
     1926    12550             INTERFACE:    None called.
     1927    12551             PARAMETERS:   The FEP table entry number we are working with
     1928    12552                           DCB_IN_USE flag
     1929    12553             DATA:         FEP
     1930    12554             DESCRIPTION:  This  procedure will  set the  DCB_IN_USE flag
     1931    12555                           'TRUE' if  a test other than  the current test
     1932    12556                           is  using the  DCB, otherwise  the flag is set
     1933    12557                           'FALSE'.
     1934    12558        */
     1935    12559
     1936    12560    1   ANYBODY_USING_THIS_DCB: PROC (TEST_NUM,DCB_IN_USE);

  12560  3 004172   200052 741300       ANYBODY_USI* STX1  ! DCB_IN_USE+2,,AUTO

     1937    12561
     1938    12562        /* Variables */
     1939    12563
     1940    12564    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1941    12565    2      DCL DCB_IN_USE BIT (1) ALIGNED;
     1942    12566    2      DCL I UBIN WORD ALIGNED;
     1943    12567
     1944    12568        /* Code */
     1945    12569
     1946    12570    2      DCB_IN_USE = %FALSE;

  12570  3 004173   200054 470500                    LDP0    @DCB_IN_USE,,AUTO
         3 004174   000000 450100                    STZ     0,,PR0

     1947    12571    3      DO I = 0 TO %LAST_FEP;

  12571  3 004175   200055 450100                    STZ     I,,AUTO

     1948    12572    3         IF I ~= TEST_NUM &

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:246  
  12572  3 004176   400000 220003                    LDX0    -131072,DU
         3 004177   200053 470500                    LDP0    @TEST_NUM,,AUTO
         3 004200   200055 236100                    LDQ     I,,AUTO
         3 004201   000000 116100                    CMPQ    0,,PR0
         3 004202   004204 601000 3                  TNZ     s:12572+6
         3 004203   000000 220003                    LDX0    0,DU
         3 004204   000014 402007                    MPY     12,DL
         3 004205   000001 236006 1                  LDQ     FEP,QL
         3 004206   400000 376003                    ANQ     -131072,DU
         3 004207   200062 756100                    STQ     I+2,,AUTO
         3 004210   000000 636010                    EAQ     0,X0
         3 004211   200062 376100                    ANQ     I+2,,AUTO
         3 004212   200063 756100                    STQ     I+3,,AUTO
         3 004213   200055 236100                    LDQ     I,,AUTO
         3 004214   000014 402007                    MPY     12,DL
         3 004215   000001 236006 1                  LDQ     FEP,QL
         3 004216   000012 736000                    QLS     10
         3 004217   400000 376003                    ANQ     -131072,DU
         3 004220   200064 756100                    STQ     I+4,,AUTO
         3 004221   200063 236100                    LDQ     I+3,,AUTO
         3 004222   200064 376100                    ANQ     I+4,,AUTO
         3 004223   200065 756100                    STQ     I+5,,AUTO
         3 004224   200055 236100                    LDQ     I,,AUTO
         3 004225   000014 402007                    MPY     12,DL
         3 004226   000001 236006 1                  LDQ     FEP,QL
         3 004227   000002 736000                    QLS     2
         3 004230   400000 376003                    ANQ     -131072,DU
         3 004231   200066 756100                    STQ     I+6,,AUTO
         3 004232   200055 236100                    LDQ     I,,AUTO
         3 004233   000014 402007                    MPY     12,DL
         3 004234   000001 236006 1                  LDQ     FEP,QL
         3 004235   000007 736000                    QLS     7
         3 004236   400000 376003                    ANQ     -131072,DU
         3 004237   200066 276100                    ORQ     I+6,,AUTO
         3 004240   200065 376100                    ANQ     I+5,,AUTO
         3 004241   200067 756100                    STQ     I+7,,AUTO
         3 004242   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:247  
         3 004243   000006 402007                    MPY     6,DL
         3 004244   400000 220003                    LDX0    -131072,DU
         3 004245   000001 736000                    QLS     1
         3 004246   000000 621006                    EAX1    0,QL
         3 004247   200055 236100                    LDQ     I,,AUTO
         3 004250   000014 402007                    MPY     12,DL
         3 004251   000001 236006 1                  LDQ     FEP,QL
         3 004252   000001 676011 1                  ERQ     FEP,X1
         3 004253   777777 376007                    ANQ     -1,DL
         3 004254   004256 600000 3                  TZE     s:12572+48
         3 004255   000000 220003                    LDX0    0,DU
         3 004256   000000 636010                    EAQ     0,X0
         3 004257   200067 376100                    ANQ     I+7,,AUTO
         3 004260   004264 600000 3                  TZE     s:12578

     1949    12573    3                 FEP.STATUS.ACTIVE(I) &
     1950    12574    3                 FEP.STATUS.DCB_OPEN(I) &
     1951    12575    3                 (FEP.STATUS.TCONN_WAITING(I) | FEP.STATUS.TEST_CONNECTED(I)) &
     1952    12576    3                 FEP.DCB_NUM(I) = FEP.DCB_NUM(TEST_NUM)
     1953    12577    3         THEN DCB_IN_USE = %TRUE;

  12577  3 004261   400000 236003                    LDQ     -131072,DU
         3 004262   200054 471500                    LDP1    @DCB_IN_USE,,AUTO
         3 004263   100000 756100                    STQ     0,,PR1

     1954    12578    3      END;

  12578  3 004264   200055 235100                    LDA     I,,AUTO
         3 004265   000001 035007                    ADLA    1,DL
         3 004266   200055 755100                    STA     I,,AUTO
         3 004267   000010 115007                    CMPA    8,DL
         3 004270   004176 602000 3                  TNC     s:12572

     1955    12579    2      RETURN;

  12579  3 004271   200052 221300                    LDX1  ! DCB_IN_USE+2,,AUTO
         3 004272   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:248  

     1956    12580    2   END ANYBODY_USING_THIS_DCB;
     1957    12581        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:249  
     1958    12582        /*I* NAME:         BUSY_THIS_TEST
     1959    12583             AUTHOR:       Curt Andes
     1960    12584                           Kathy Larkin
     1961    12585             PURPOSE:      Mark the test busy
     1962    12586             INTERFACE:    None called.
     1963    12587             PARAMETERS:   The FEP table entry number that is using the DCB
     1964    12588             DATA:         FEP
     1965    12589             DESCRIPTION:  This  procedure  will set the  FEP.STATUS.BUSY
     1966    12590                           bit for the specified test entry.
     1967    12591        */
     1968    12592
     1969    12593    1   BUSY_THIS_TEST: PROC (TEST_NUM);

  12593  3 004273   200040 741300       BUSY_THIS_T* STX1  ! I,,AUTO

     1970    12594
     1971    12595        /* VARIABLES */
     1972    12596
     1973    12597    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1974    12598
     1975    12599        /* CODE */
     1976    12600
     1977    12601    2      FEP.STATUS.BUSY (TEST_NUM) = %TRUE ;

  12601  3 004274   200041 470500                    LDP0    @TEST_NUM,,AUTO
         3 004275   000000 236100                    LDQ     0,,PR0
         3 004276   000006 402007                    MPY     6,DL
         3 004277   000001 736000                    QLS     1
         3 004300   000000 620006                    EAX0    0,QL
         3 004301   000400 236003                    LDQ     256,DU
         3 004302   000001 256010 1                  ORSQ    FEP,X0

     1978    12602    2      RETURN ;

  12602  3 004303   000001 702211                    TSX2  ! 1,X1

     1979    12603
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:250  
     1980    12604    2   END BUSY_THIS_TEST;
     1981    12605        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:251  
     1982    12606        /*I* NAME:         UNBUSY_THIS_TEST
     1983    12607             AUTHOR:       Curt Andes
     1984    12608                           Kathy Larkin
     1985    12609             PURPOSE:      Clear the 'BUSY' status on the test
     1986    12610             INTERFACE:    None called.
     1987    12611             PARAMETERS:   The number of the FEP table entry we are working with
     1988    12612             DATA:         FEP
     1989    12613             DESCRIPTION:  This procedure will reset the FEP.STATUS.BUSY
     1990    12614                           bit for the specified test.
     1991    12615        */
     1992    12616
     1993    12617    1   UNBUSY_THIS_TEST: PROC (TEST_NUM);

  12617  3 004304   200042 741300       UNBUSY_THIS* STX1  ! WORK_ASC,,AUTO

     1994    12618
     1995    12619        /* VARIABLES */
     1996    12620
     1997    12621    2      DCL TEST_NUM UBIN WORD ALIGNED;
     1998    12622
     1999    12623        /* CODE */
     2000    12624
     2001    12625    2      FEP.STATUS.BUSY (TEST_NUM) = %FALSE ;

  12625  3 004305   200043 470500                    LDP0    @TEST_NUM,,AUTO
         3 004306   000000 236100                    LDQ     0,,PR0
         3 004307   000006 402007                    MPY     6,DL
         3 004310   000001 736000                    QLS     1
         3 004311   000000 620006                    EAX0    0,QL
         3 004312   000015 236000 4                  LDQ     13
         3 004313   000001 356010 1                  ANSQ    FEP,X0

     2002    12626    2      RETURN ;

  12626  3 004314   000001 702211                    TSX2  ! 1,X1

     2003    12627
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:252  
     2004    12628    2   END UNBUSY_THIS_TEST;
     2005    12629        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:253  
     2006    12630        /*I* NAME:         CLOSE_DCB_IF_UNUSED
     2007    12631             AUTHOR:       Curt Andes
     2008    12632                           Kathy Larkin
     2009    12633             PURPOSE:      Close a DCB if it isn't being used anymore
     2010    12634             INTERFACE:    ANYBODY_USING_THIS_DCB
     2011    12635                           CLOSE_DCB
     2012    12636             PARAMETERS:   The FEP table entry number we are working with
     2013    12637             DATA:         FEP
     2014    12638             DESCRIPTION:  This         procedure        will        call
     2015    12639                           ANYBODY_USING_THIS_DCB  to  determine  if  the
     2016    12640                           current test is the only one using the DCB. If
     2017    12641                           no  one else  is using  the DCB,  CLOSE_DCB is
     2018    12642                           called.
     2019    12643        */
     2020    12644
     2021    12645    1   CLOSE_DCB_IF_UNUSED: PROC (TEST_NUM);

  12645  3 004315   200046 741300       CLOSE_DCB_I* STX1  ! DCBX,,AUTO

     2022    12646
     2023    12647        /* VARIABLES */
     2024    12648
     2025    12649    2      DCL TEST_NUM UBIN WORD ALIGNED;
     2026    12650    2      DCL DCB_IN_USE BIT (1) ALIGNED;
     2027    12651
     2028    12652        /* CODE */
     2029    12653
     2030    12654    2      IF FEP.STATUS.DCB_OPEN (TEST_NUM)

  12654  3 004316   200047 470500                    LDP0    @TEST_NUM,,AUTO
         3 004317   000000 236100                    LDQ     0,,PR0
         3 004320   000006 402007                    MPY     6,DL
         3 004321   000001 736000                    QLS     1
         3 004322   000001 236006 1                  LDQ     FEP,QL
         3 004323   000200 316003                    CANQ    128,DU
         3 004324   004347 600000 3                  TZE     s:12662

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:254  
     2031    12655    3      THEN DO ;

     2032    12656    3              CALL ANYBODY_USING_THIS_DCB (TEST_NUM,DCB_IN_USE);

  12656  3 004325   200050 631500                    EPPR1   DCB_IN_USE,,AUTO
         3 004326   200054 451500                    STP1    @DCB_IN_USE,,AUTO
         3 004327   200047 236100                    LDQ     @TEST_NUM,,AUTO
         3 004330   200053 756100                    STQ     @TEST_NUM,,AUTO
         3 004331   004172 701000 3                  TSX1    ANYBODY_USING_THIS_DCB
         3 004332   000000 011000                    NOP     0

     2033    12657    3              IF ~DCB_IN_USE

  12657  3 004333   200050 236100                    LDQ     DCB_IN_USE,,AUTO
         3 004334   400000 376003                    ANQ     -131072,DU
         3 004335   400000 676003                    ERQ     -131072,DU
         3 004336   004347 600000 3                  TZE     s:12662

     2034    12658    3              THEN CALL CLOSE_DCB (FEP.DCB_NUM(TEST_NUM));

  12658  3 004337   200047 470500                    LDP0    @TEST_NUM,,AUTO
         3 004340   000000 236100                    LDQ     0,,PR0
         3 004341   000006 402007                    MPY     6,DL
         3 004342   000023 736000                    QLS     19
         3 004343   000012 036000 4                  ADLQ    10
         3 004344   200053 756100                    STQ     @TEST_NUM,,AUTO
         3 004345   004057 701000 3                  TSX1    CLOSE_DCB
         3 004346   000000 011000                    NOP     0

     2035    12659    3              ELSE;
     2036    12660    3           END /* THEN DO */ ;

     2037    12661    2      ELSE /* No DCB to close */ ;
     2038    12662    2      RETURN;

  12662  3 004347   200046 221300                    LDX1  ! DCBX,,AUTO
         3 004350   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:255  

     2039    12663    2   END CLOSE_DCB_IF_UNUSED;
     2040    12664        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:256  
     2041    12665        /*I* NAME:         CALCULATE_CHECKSUM
     2042    12666             AUTHOR:       Curt Andes
     2043    12667             PURPOSE:      Calculate the checksum for an ICM
     2044    12668             INTERFACE:    None called.
     2045    12669             PARAMETERS:   The FEP table entry number we are working with
     2046    12670             DATA:         FEP.RECEIVE_ICM$
     2047    12671             DESCRIPTION:  This procedure will calcultae the checksum for
     2048    12672                           the  ICM  associated  with  the  current test.
     2049    12673                           Checksums are just the EXCLUSIVE-OR of all the
     2050    12674                           18-bit   fields  in  the   ICM  following  the
     2051    12675                           ICM.CHKSM position.  This procedure works with
     2052    12676                           the ICM that is in the receive buffer.
     2053    12677        */
     2054    12678
     2055    12679    1   CALCULATE_CHECKSUM: PROC (TEST_NUM);

  12679  3 004351   200036 741300       CALCULATE_C* STX1  ! DUMMY_BUF,,AUTO

     2056    12680
     2057    12681        /* VARIABLES */
     2058    12682
     2059    12683    2      DCL TEST_NUM UBIN WORD ALIGNED;
     2060    12684    2      DCL I UBIN WORD ALIGNED;
     2061    12685    2      DCL W_CKSM BIT (18) HALIGNED;
     2062    12686    2      DCL CKSM REDEF W_CKSM UBIN HALF HALIGNED;
     2063    12687    2      DCL ICM_DATA (0:64) BIT (18) BASED HALIGNED;
     2064    12688
     2065    12689        /* CODE */
     2066    12690
     2067    12691    2      CKSM = 0;

  12691  3 004352   000000 220003                    LDX0    0,DU
         3 004353   200041 740100                    STX0    W_CKSM,,AUTO

     2068    12692    3      DO I = 3 TO ((FEP.RECEIVE_ICM$(TEST_NUM)->ICM.WDCNT)-1);

  12692  3 004354   000003 235007                    LDA     3,DL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:257  
         3 004355   200040 755100                    STA     I,,AUTO
         3 004356   004402 710000 3                  TRA     s:12694+3

     2069    12693    3         W_CKSM = W_CKSM\FEP.RECEIVE_ICM$(TEST_NUM)->ICM_DATA(I);

  12693  3 004357   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 004360   000000 236100                    LDQ     0,,PR0
         3 004361   000006 402007                    MPY     6,DL
         3 004362   000001 736000                    QLS     1
         3 004363   000012 471406 1                  LDP1    FEP+9,QL
         3 004364   200040 235100                    LDA     I,,AUTO
         3 004365   000001 735000                    ALS     1
         3 004366   000100 100505                    MLR     fill='000'O
         3 004367   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         3 004370   200062 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         3 004371   200041 236100                    LDQ     W_CKSM,,AUTO
         3 004372   777777 376003                    ANQ     -1,DU
         3 004373   200062 676100                    ERQ     I+2,,AUTO
         3 004374   000022 772000                    QRL     18
         3 004375   000000 620006                    EAX0    0,QL
         3 004376   200041 740100                    STX0    W_CKSM,,AUTO

     2070    12694    3      END;

  12694  3 004377   200040 236100                    LDQ     I,,AUTO
         3 004400   000001 036007                    ADLQ    1,DL
         3 004401   200040 756100                    STQ     I,,AUTO
         3 004402   200037 470500                    LDP0    @TEST_NUM,,AUTO
         3 004403   000000 236100                    LDQ     0,,PR0
         3 004404   000006 402007                    MPY     6,DL
         3 004405   000001 736000                    QLS     1
         3 004406   000012 471406 1                  LDP1    FEP+9,QL
         3 004407   100001 236100                    LDQ     1,,PR1
         3 004410   000777 376007                    ANQ     511,DL
         3 004411   200040 116100                    CMPQ    I,,AUTO
         3 004412   004414 600000 3                  TZE     s:12695
         3 004413   004357 603000 3                  TRC     s:12693
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:258  

     2071    12695    2      FEP.RECEIVE_ICM$(TEST_NUM)->ICM.CKSM = CKSM;

  12695  3 004414   000000 236100                    LDQ     0,,PR0
         3 004415   000006 402007                    MPY     6,DL
         3 004416   000001 736000                    QLS     1
         3 004417   000012 471406 1                  LDP1    FEP+9,QL
         3 004420   200041 220100                    LDX0    W_CKSM,,AUTO
         3 004421   100001 740100                    STX0    1,,PR1

     2072    12696    2      RETURN;

  12696  3 004422   200036 221300                    LDX1  ! DUMMY_BUF,,AUTO
         3 004423   000001 702211                    TSX2  ! 1,X1

     2073    12697    2   END CALCULATE_CHECKSUM;
     2074    12698        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:259  
     2075    12699        /*I*  NAME:        TOC$MME_LOGFEP
     2076    12700              AUTHOR:      Curt Andes
     2077    12701              PURPOSE:     LOGFEP
     2078    12702              INTERFACE:   TOX$ERROR
     2079    12703                           M$CONFIG
     2080    12704              PARAMETERS:  FEP Node #
     2081    12705                           LOGICAL FEP #
     2082    12706              DATA:        GET_CONFIG
     2083    12707                           CONFIG
     2084    12708                           PHY_FEP_NUM
     2085    12709              DESCRIPTION: This procedure will return to the subexecutive a logical
     2086    12710                           FEP # that will correspond to a CP-6 FEP node number. There
     2087    12711                           will only be one logical FEP number associated with
     2088    12712                           a given node.
     2089    12713
     2090    12714                           * MME calling sequence
     2091    12715                           MME        LOGFEP
     2092    12716                           VFD        24/0,12/node id     *CP-6 node #
     2093    12717                           OCT        0                   *Logical FEP # or -1
     2094    12718                                                          *returned here
     2095    12719                           <return>
     2096    12720
     2097    12721                           This procedure will call M$CONFIG with fake channel
     2098    12722                           information to determine if the node exists. If it
     2099    12723                           does not, then a -1 is passed back as the logical
     2100    12724                           FEP number. If the node does exist, then the index of the
     2101    12725                           the next available PHY_FEP_NUM entry (next undefined entry)
     2102    12726                           will be resturned as the logical fep# for that node.  If
     2103    12727                           no available entry is found, TOX$ERROR will be called.
     2104    12728        */
     2105    12729        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:260  
     2106    12730    1   TOC$MME_LOGFEP: PROC (NODE_ID,LOGICAL_FEP_NUM);

  12730  3 004424   200010 741300       TOC$MME_LOG* STX1  ! @RETURN_DELTA+2,,AUTO

     2107    12731
     2108    12732           /* Variables */
     2109    12733
     2110    12734    2      DCL NODE_ID UBIN WORD ALIGNED;
     2111    12735    2      DCL 1 NODE REDEF NODE_ID,
     2112    12736    2            2 PAD UBIN HALF UNAL,
     2113    12737    2            2 NUM UBIN HALF UNAL;
     2114    12738    2      DCL LOGICAL_FEP_NUM SBIN WORD ALIGNED;
     2115    12739    2      DCL I UBIN HALF HALIGNED;
     2116    12740        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:261  
     2117    12741        /* Code */
     2118    12742
     2119    12743    2      RETURN_DELTA = 3;

  12743  3 004425   000003 220003                    LDX0    3,DU
         3 004426   200006 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 004427   000000 740100                    STX0    0,,PR0

     2120    12744    2      GET_CONFIG.V.CHANNEL# = 1024;

  12744  3 004430   002000 221003                    LDX1    1024,DU
         3 004431   000172 441000 1                  SXL1    GET_CONFIG+6

     2121    12745    2      GET_CONFIG.V.FEP# = NODE.NUM;

  12745  3 004432   200011 471500                    LDP1    @NODE_ID,,AUTO
         3 004433   100000 722100                    LXL2    0,,PR1
         3 004434   000172 742000 1                  STX2    GET_CONFIG+6

     2122    12746    2      CALL M$CONFIG(GET_CONFIG) WHENALTRETURN

  12746  3 004435   000164 630400 1                  EPPR0   GET_CONFIG
         3 004436   560023 713400                    CLIMB   alt,+57363
         3 004437   401000 401760                    pmme    nvectors=3
         3 004440   004442 702000 3                  TSX2    s:12748
         3 004441   004447 710000 3                  TRA     s:12751

     2123    12747    3           DO;

     2124    12748    3              LOGICAL_FEP_NUM = %UNDEFINED ;

  12748  3 004442   000001 335007                    LCA     1,DL
         3 004443   200012 470500                    LDP0    @LOGICAL_FEP_NUM,,AUTO
         3 004444   000000 755100                    STA     0,,PR0

     2125    12749    3              RETURN;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:262  
  12749  3 004445   200010 221300                    LDX1  ! @RETURN_DELTA+2,,AUTO
         3 004446   000001 702211                    TSX2  ! 1,X1

     2126    12750    3           END;
     2127    12751    2      I = 0;

  12751  3 004447   000000 220003                    LDX0    0,DU
         3 004450   200013 740100                    STX0    I,,AUTO

     2128    12752    3      DO WHILE (I <= %LAST_FEP) & (PHY_FEP_NUM (I) ~= NODE.NUM) ;

  12752  3 004451   004455 710000 3                  TRA     s:12754

     2129    12753    3         I = I + 1 ;

  12753  3 004452   200013 220100                    LDX0    I,,AUTO
         3 004453   000001 621010                    EAX1    1,X0
         3 004454   200013 741100                    STX1    I,,AUTO

     2130    12754    3      END /* DO WHILE */ ;

  12754  3 004455   400000 220003                    LDX0    -131072,DU
         3 004456   200013 221100                    LDX1    I,,AUTO
         3 004457   000010 101003                    CMPX1   8,DU
         3 004460   004462 602000 3                  TNC     s:12754+5
         3 004461   000000 220003                    LDX0    0,DU
         3 004462   400000 222003                    LDX2    -131072,DU
         3 004463   200011 470500                    LDP0    @NODE_ID,,AUTO
         3 004464   000000 236100                    LDQ     0,,PR0
         3 004465   777777 376007                    ANQ     -1,DL
         3 004466   200062 756100                    STQ     I+2,,AUTO
         3 004467   200013 235100                    LDA     I,,AUTO
         3 004470   777777 375003                    ANA     -1,DU
         3 004471   000021 771000                    ARL     17
         3 004472   000100 100405                    MLR     fill='000'O
         3 004473   000153 000002 1                  ADSC9   PHY_FEP_NUM,A            cn=0,n=2
         3 004474   200063 000004                    ADSC9   I+3,,AUTO                cn=0,n=4
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:263  
         3 004475   200063 236100                    LDQ     I+3,,AUTO
         3 004476   000022 732000                    QRS     18
         3 004477   200062 116100                    CMPQ    I+2,,AUTO
         3 004500   004502 601000 3                  TNZ     s:12754+21
         3 004501   000000 222003                    LDX2    0,DU
         3 004502   000000 636012                    EAQ     0,X2
         3 004503   200064 756100                    STQ     I+4,,AUTO
         3 004504   000000 636010                    EAQ     0,X0
         3 004505   200064 376100                    ANQ     I+4,,AUTO
         3 004506   004452 601000 3                  TNZ     s:12753

     2131    12755    2      IF I <= %LAST_FEP

  12755  3 004507   000010 101003                    CMPX1   8,DU
         3 004510   004516 603000 3                  TRC     s:12758

     2132    12756    2      THEN LOGICAL_FEP_NUM = I ;

  12756  3 004511   200013 236100                    LDQ     I,,AUTO
         3 004512   000022 772000                    QRL     18
         3 004513   200012 471500                    LDP1    @LOGICAL_FEP_NUM,,AUTO
         3 004514   100000 756100                    STQ     0,,PR1
         3 004515   004575 710000 3                  TRA     s:12772

     2133    12757    3      ELSE DO ;

     2134    12758    3              I = 0 ;

  12758  3 004516   000000 220003                    LDX0    0,DU
         3 004517   200013 740100                    STX0    I,,AUTO

     2135    12759    4              DO WHILE (I <= %LAST_FEP) & (PHY_FEP_NUM (I) ~= %UNDEFINED) ;

  12759  3 004520   004524 710000 3                  TRA     s:12761

     2136    12760    4                 I = I + 1 ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:264  
  12760  3 004521   200013 220100                    LDX0    I,,AUTO
         3 004522   000001 621010                    EAX1    1,X0
         3 004523   200013 741100                    STX1    I,,AUTO

     2137    12761    4              END /* DO WHILE */ ;

  12761  3 004524   400000 220003                    LDX0    -131072,DU
         3 004525   200013 221100                    LDX1    I,,AUTO
         3 004526   000010 101003                    CMPX1   8,DU
         3 004527   004531 602000 3                  TNC     s:12761+5
         3 004530   000000 220003                    LDX0    0,DU
         3 004531   400000 222003                    LDX2    -131072,DU
         3 004532   200013 235100                    LDA     I,,AUTO
         3 004533   777777 375003                    ANA     -1,DU
         3 004534   000021 771000                    ARL     17
         3 004535   000100 100405                    MLR     fill='000'O
         3 004536   000153 000002 1                  ADSC9   PHY_FEP_NUM,A            cn=0,n=2
         3 004537   200062 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         3 004540   200062 236100                    LDQ     I+2,,AUTO
         3 004541   000022 732000                    QRS     18
         3 004542   000027 116000 xsym               CMPQ    B_VECTNIL+23
         3 004543   004545 601000 3                  TNZ     s:12761+17
         3 004544   000000 222003                    LDX2    0,DU
         3 004545   000000 636012                    EAQ     0,X2
         3 004546   200063 756100                    STQ     I+3,,AUTO
         3 004547   000000 636010                    EAQ     0,X0
         3 004550   200063 376100                    ANQ     I+3,,AUTO
         3 004551   004521 601000 3                  TNZ     s:12760

     2138    12762    3              IF I <= %LAST_FEP

  12762  3 004552   000010 101003                    CMPX1   8,DU
         3 004553   004565 603000 3                  TRC     s:12768

     2139    12763    4              THEN DO ;

     2140    12764    4                      LOGICAL_FEP_NUM = I ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:265  

  12764  3 004554   200013 236100                    LDQ     I,,AUTO
         3 004555   000022 772000                    QRL     18
         3 004556   200012 470500                    LDP0    @LOGICAL_FEP_NUM,,AUTO
         3 004557   000000 756100                    STQ     0,,PR0

     2141    12765    4                      PHY_FEP_NUM (I) = NODE.NUM ;

  12765  3 004560   200011 471500                    LDP1    @NODE_ID,,AUTO
         3 004561   000005 100500                    MLR     fill='000'O
         3 004562   100000 400002                    ADSC9   0,,PR1                   cn=2,n=2
         3 004563   000153 000002 1                  ADSC9   PHY_FEP_NUM,A            cn=0,n=2

     2142    12766    4                   END /* THEN DO */ ;

  12766  3 004564   004575 710000 3                  TRA     s:12772

     2143    12767    4              ELSE DO ;

     2144    12768    4                      TOC_ERROR_CODE.ERR# = %E$LTABOVFL ;

  12768  3 004565   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 004566   000001 376000 4                  ANQ     1
         3 004567   000140 276007                    ORQ     96,DL
         3 004570   000000 756000 1                  STQ     TOC_ERROR_CODE

     2145    12769    4                      CALL TOX$ERROR (TOC_ERROR_CODE) ;

  12769  3 004571   000002 630400 4                  EPPR0   2
         3 004572   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 004573   000000 701000 xent               TSX1    TOX$ERROR
         3 004574   000000 011000                    NOP     0

     2146    12770    4                   END /* ELSE DO */ ;

     2147    12771    3           END /* ELSE DO */ ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:266  
     2148    12772    2      RETURN ;

  12772  3 004575   200010 221300                    LDX1  ! @RETURN_DELTA+2,,AUTO
         3 004576   000001 702211                    TSX2  ! 1,X1

     2149    12773    2   END TOC$MME_LOGFEP ;
     2150    12774        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:267  
     2151    12775        /*I*  NAME:        TOC$GEROUT_READ_COMPLETION
     2152    12776              AUTHOR:      Curt Andes
     2153    12777                           Kathy Larkin
     2154    12778              PURPOSE:     Perform read completion tasks
     2155    12779              INTERFACE:   UNBUSY_THIS_TEST
     2156    12780                           CHECK_READ - check for connect/disconnect icm
     2157    12781                           RETURN_GEROUT_STATUS - status to CCLT
     2158    12782                           TOK$COURTESY_CALL - status to CCLT
     2159    12783                           TOX$SCREECH - error routine
     2160    12784              PARAMETERS:  I - index into FEP table for test entry
     2161    12785              DATA:        No external data accessed.
     2162    12786              DESCRIPTION: This procedure performs the post-IO tasks
     2163    12787                           of resetting the BUSY bit, and  returning
     2164    12788                           status to the subexec. TOLTS will SCREECH
     2165    12789                           if the FEP table  index parameter  is out
     2166    12790                           of range.
     2167    12791        */
     2168    12792
     2169    12793    1   TOC$GEROUT_READ_COMPLETION: PROC (I);

  12793  3 004577   200040 741300       TOC$GEROUT_* STX1  ! I,,AUTO

     2170    12794
     2171    12795        /* Variables */
     2172    12796    2      DCL I UBIN WORD ALIGNED;
     2173    12797
     2174    12798        /* Code */
     2175    12799
     2176    12800    2      IF I < %LAST_FEP+1

  12800  3 004600   200041 470500                    LDP0    @I,,AUTO
         3 004601   000000 235100                    LDA     0,,PR0
         3 004602   000010 115007                    CMPA    8,DL
         3 004603   004641 603000 3                  TRC     s:12810

     2177    12801    3      THEN DO;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:268  
     2178    12802    3              CALL UNBUSY_THIS_TEST (I);

  12802  3 004604   200041 236100                    LDQ     @I,,AUTO
         3 004605   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 004606   004304 701000 3                  TSX1    UNBUSY_THIS_TEST
         3 004607   000000 011000                    NOP     0

     2179    12803    3              CALL CHECK_READ (I);

  12803  3 004610   200041 236100                    LDQ     @I,,AUTO
         3 004611   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 004612   003756 701000 3                  TSX1    CHECK_READ
         3 004613   000000 011000                    NOP     0

     2180    12804    3              CALL RETURN_GEROUT_STATUS (I);

  12804  3 004614   200041 236100                    LDQ     @I,,AUTO
         3 004615   200043 756100                    STQ     @TEST_NUM,,AUTO
         3 004616   003333 701000 3                  TSX1    RETURN_GEROUT_STATUS
         3 004617   000000 011000                    NOP     0

     2181    12805    3              IF FEP.C_CALL$(I) ~= ADDR(NIL)

  12805  3 004620   200041 470500                    LDP0    @I,,AUTO
         3 004621   000000 236100                    LDQ     0,,PR0
         3 004622   000006 402007                    MPY     6,DL
         3 004623   000001 736000                    QLS     1
         3 004624   000007 236006 1                  LDQ     FEP+6,QL
         3 004625   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 004626   004651 600000 3                  TZE     s:12813

     2182    12806    3              THEN CALL TOK$COURTESY_CALL (FEP.C_CALL$(I));

  12806  3 004627   000000 236100                    LDQ     0,,PR0
         3 004630   000006 402007                    MPY     6,DL
         3 004631   000023 736000                    QLS     19
         3 004632   000007 036000 4                  ADLQ    7
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:269  
         3 004633   200062 756100                    STQ     I+2,,AUTO
         3 004634   200062 630500                    EPPR0   I+2,,AUTO
         3 004635   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 004636   000000 701000 xent               TSX1    TOK$COURTESY_CALL
         3 004637   000000 011000                    NOP     0

     2183    12807    3              ELSE /* do not do a courtesy call */ ;
     2184    12808    3           END;

  12808  3 004640   004651 710000 3                  TRA     s:12813

     2185    12809    3      ELSE DO;

     2186    12810    3              TOC_ERROR_CODE.ERR# = %E$BADEVID;

  12810  3 004641   000000 236000 1                  LDQ     TOC_ERROR_CODE
         3 004642   000001 376000 4                  ANQ     1
         3 004643   000700 276007                    ORQ     448,DL
         3 004644   000000 756000 1                  STQ     TOC_ERROR_CODE

     2187    12811    3              CALL TOX$SCREECH (TOC_ERROR_CODE);

  12811  3 004645   000002 630400 4                  EPPR0   2
         3 004646   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 004647   000000 701000 xent               TSX1    TOX$SCREECH
         3 004650   000000 011000                    NOP     0

     2188    12812    3           END;

     2189    12813    2      RETURN ;

  12813  3 004651   200040 221300                    LDX1  ! I,,AUTO
         3 004652   000001 702211                    TSX2  ! 1,X1

     2190    12814
     2191    12815    2   END TOC$GEROUT_READ_COMPLETION ;
     2192    12816        %EJECT;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:270  
     2193    12817        /*I* NAME:         CONNECT_TO_SLAVE
     2194    12818             AUTHOR:       Curt Andes
     2195    12819             PURPOSE:      To connect exec & test lines to the subexec
     2196    12820             INTERFACE:    None called.
     2197    12821             PARAMETERS:   The FEP table entry we are trying to connect
     2198    12822             DATA:         FEP
     2199    12823                           SLAVE_CONNECT
     2200    12824             DESCRIPTION:  This  procedure will  use the  connect pointer
     2201    12825                           saved by the REMOTE_INQUIRY GEROUT.  A connect
     2202    12826                           is accomplished by storing the LINE_ID (either
     2203    12827                           exec or  test) in a location  specified by the
     2204    12828                           subexec.  The  subexec  will eventually detect
     2205    12829                           that  the LINE_ID  has been  stored there, and
     2206    12830                           begin further processing for that line.
     2207    12831        */
     2208    12832        %EJECT ;
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:271  
     2209    12833    1   CONNECT_TO_SLAVE: PROC (I);

  12833  3 004653   200046 741300       CONNECT_TO_* STX1  ! DCBX,,AUTO

     2210    12834
     2211    12835        /* VARIABLES */
     2212    12836    2      DCL I UBIN WORD ALIGNED;
     2213    12837    2      DCL 1 GR5_VFD BASED ALIGNED,
     2214    12838    2            2 * UBIN HALF UNAL,
     2215    12839    2            2 * UBIN (6) UNAL,
     2216    12840    2            2 LINE_ID UBIN (12) UNAL;
     2217    12841
     2218    12842        /* CODE */
     2219    12843
     2220    12844    2      IF ~SLAVE_CONNECT.STATUS.PENDING

  12844  3 004654   000142 236000 1                  LDQ     SLAVE_CONNECT+1
         3 004655   000021 736000                    QLS     17
         3 004656   400000 376003                    ANQ     -131072,DU
         3 004657   400000 676003                    ERQ     -131072,DU
         3 004660   004671 600000 3                  TZE     s:12849

     2221    12845    3      THEN DO;

     2222    12846    3              FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;

  12846  3 004661   200047 470500                    LDP0    @I,,AUTO
         3 004662   000000 236100                    LDQ     0,,PR0
         3 004663   000006 402007                    MPY     6,DL
         3 004664   000001 736000                    QLS     1
         3 004665   000000 620006                    EAX0    0,QL
         3 004666   040000 236003                    LDQ     16384,DU
         3 004667   000001 256010 1                  ORSQ    FEP,X0

     2223    12847    3           END;

  12847  3 004670   005017 710000 3                  TRA     s:12868
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:272  

     2224    12848    3      ELSE DO;

     2225    12849    3              IF FEP.STATUS.ECONN_WAITING(I)

  12849  3 004671   200047 470500                    LDP0    @I,,AUTO
         3 004672   000000 236100                    LDQ     0,,PR0
         3 004673   000006 402007                    MPY     6,DL
         3 004674   000001 736000                    QLS     1
         3 004675   000001 236006 1                  LDQ     FEP,QL
         3 004676   004000 316003                    CANQ    2048,DU
         3 004677   004747 600000 3                  TZE     s:12859

     2226    12850    4              THEN DO;

     2227    12851    4                      FEP.STATUS.EXEC_CONNECTED(I) = %TRUE;

  12851  3 004700   000000 236100                    LDQ     0,,PR0
         3 004701   000006 402007                    MPY     6,DL
         3 004702   000001 736000                    QLS     1
         3 004703   000000 620006                    EAX0    0,QL
         3 004704   020000 236003                    LDQ     8192,DU
         3 004705   000001 256010 1                  ORSQ    FEP,X0

     2228    12852    4                      SLAVE_CONNECT.PTR$->GR5_VFD.LINE_ID = FEP.EXEC_LINE_ID(I);

  12852  3 004706   000000 236100                    LDQ     0,,PR0
         3 004707   000006 402007                    MPY     6,DL
         3 004710   000001 736000                    QLS     1
         3 004711   000141 471400 1                  LDP1    SLAVE_CONNECT
         3 004712   000004 236006 1                  LDQ     FEP+3,QL
         3 004713   000006 772000                    QRL     6
         3 004714   100000 752103                    STCQ    0,'03'O,PR1

     2229    12853    4                      FEP.STATUS.ECONN_WAITING(I) = %FALSE;

  12853  3 004715   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:273  
         3 004716   000006 402007                    MPY     6,DL
         3 004717   000001 736000                    QLS     1
         3 004720   000000 620006                    EAX0    0,QL
         3 004721   000016 236000 4                  LDQ     14
         3 004722   000001 356010 1                  ANSQ    FEP,X0

     2230    12854    4                      IF FEP.STATUS.TCONN_WAITING(I)

  12854  3 004723   000000 236100                    LDQ     0,,PR0
         3 004724   000006 402007                    MPY     6,DL
         3 004725   000001 736000                    QLS     1
         3 004726   000001 236006 1                  LDQ     FEP,QL
         3 004727   002000 316003                    CANQ    1024,DU
         3 004730   004740 600000 3                  TZE     s:12856

     2231    12855    4                      THEN FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;

  12855  3 004731   000000 236100                    LDQ     0,,PR0
         3 004732   000006 402007                    MPY     6,DL
         3 004733   000001 736000                    QLS     1
         3 004734   000000 620006                    EAX0    0,QL
         3 004735   040000 236003                    LDQ     16384,DU
         3 004736   000001 256010 1                  ORSQ    FEP,X0
         3 004737   005015 710000 3                  TRA     s:12866

     2232    12856    4                      ELSE FEP.STATUS.CONNECT_QUEUED(I) = %FALSE;

  12856  3 004740   000000 236100                    LDQ     0,,PR0
         3 004741   000006 402007                    MPY     6,DL
         3 004742   000001 736000                    QLS     1
         3 004743   000000 620006                    EAX0    0,QL
         3 004744   000017 236000 4                  LDQ     15
         3 004745   000001 356010 1                  ANSQ    FEP,X0

     2233    12857    4                   END;

  12857  3 004746   005015 710000 3                  TRA     s:12866
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:274  

     2234    12858    4              ELSE DO;

     2235    12859    4                      FEP.STATUS.TEST_CONNECTED(I) = %TRUE;

  12859  3 004747   000000 236100                    LDQ     0,,PR0
         3 004750   000006 402007                    MPY     6,DL
         3 004751   000001 736000                    QLS     1
         3 004752   000000 620006                    EAX0    0,QL
         3 004753   100000 236003                    LDQ     32768,DU
         3 004754   000001 256010 1                  ORSQ    FEP,X0

     2236    12860    4                      SLAVE_CONNECT.PTR$->GR5_VFD.LINE_ID = FEP.LINE_ID(I);

  12860  3 004755   000000 236100                    LDQ     0,,PR0
         3 004756   000006 402007                    MPY     6,DL
         3 004757   000001 736000                    QLS     1
         3 004760   000141 471400 1                  LDP1    SLAVE_CONNECT
         3 004761   000004 236006 1                  LDQ     FEP+3,QL
         3 004762   000030 772000                    QRL     24
         3 004763   100000 752103                    STCQ    0,'03'O,PR1

     2237    12861    4                      FEP.STATUS.TCONN_WAITING(I) = %FALSE;

  12861  3 004764   000000 236100                    LDQ     0,,PR0
         3 004765   000006 402007                    MPY     6,DL
         3 004766   000001 736000                    QLS     1
         3 004767   000000 620006                    EAX0    0,QL
         3 004770   000020 236000 4                  LDQ     16
         3 004771   000001 356010 1                  ANSQ    FEP,X0

     2238    12862    4                      IF FEP.STATUS.ECONN_WAITING(I)

  12862  3 004772   000000 236100                    LDQ     0,,PR0
         3 004773   000006 402007                    MPY     6,DL
         3 004774   000001 736000                    QLS     1
         3 004775   000001 236006 1                  LDQ     FEP,QL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:275  
         3 004776   004000 316003                    CANQ    2048,DU
         3 004777   005007 600000 3                  TZE     s:12864

     2239    12863    4                      THEN FEP.STATUS.CONNECT_QUEUED(I) = %TRUE;

  12863  3 005000   000000 236100                    LDQ     0,,PR0
         3 005001   000006 402007                    MPY     6,DL
         3 005002   000001 736000                    QLS     1
         3 005003   000000 620006                    EAX0    0,QL
         3 005004   040000 236003                    LDQ     16384,DU
         3 005005   000001 256010 1                  ORSQ    FEP,X0
         3 005006   005015 710000 3                  TRA     s:12866

     2240    12864    4                      ELSE FEP.STATUS.CONNECT_QUEUED(I) = %FALSE;

  12864  3 005007   000000 236100                    LDQ     0,,PR0
         3 005010   000006 402007                    MPY     6,DL
         3 005011   000001 736000                    QLS     1
         3 005012   000000 620006                    EAX0    0,QL
         3 005013   000017 236000 4                  LDQ     15
         3 005014   000001 356010 1                  ANSQ    FEP,X0

     2241    12865    4                   END;

     2242    12866    3              SLAVE_CONNECT.STATUS.PENDING = %FALSE;

  12866  3 005015   000021 236000 4                  LDQ     17
         3 005016   000142 356000 1                  ANSQ    SLAVE_CONNECT+1

     2243    12867    3           END;

     2244    12868    2      RETURN;

  12868  3 005017   200046 221300                    LDX1  ! DCBX,,AUTO
         3 005020   000001 702211                    TSX2  ! 1,X1

TOC_ERROR_CODE
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:276  
 Sect OctLoc
   1     000   241703 000000                                                    ....

FEP
 Sect OctLoc
   1     001   ****** ******   ****** ******   ****** ******   ****** ******    ................

COLTS_DCBS
 Sect OctLoc
   1     143   ****** ******   ****** ******   ****** ******   ****** ******    ................

CONFIG
 Sect OctLoc
   1     160   000000 000000   000000 000000   000000 000000   000000 000000    ................

GET_CONFIG
 Sect OctLoc
   1     164   000001 777640   000172 006000   000000 177640   000000 006014    .....z..........
   1     170   000003 777640   000160 006000   000000 000000   000000 000000    .....p..........

OPEN_HNDLR_PATH
 Sect OctLoc
   1     174   000025 777640   000240 006000   000000 177640   000000 006014    ................
   1     200   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     234*  000000 177640   000000 006014   000021 777640   000266 006000    ................
   1     240   000000 000042   000000 003003   252525 012000   000040 252520    ..."......... ..
   1     244   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
   1     250   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     254   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
   1     260   040040 040040   000000 000000   000000 000000   000000 000000        ............
   1     264   000000 000000   ****** ******                                    ........

START_HNDLR
 Sect OctLoc
   1     266   000000 040040   040040 040040   000040 040040   040040 040040    ..      .
   1     272   040040 040040   040040 040040   040040 040040   040040 040040
   1     276   040040 040040   040040 040040   072123 131123   040040 040040            :SYS
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:277  
   1     302   040040 040040   040040 040040   001040 040040   040040 040040            .
   1     306   040040 040040

CLOSE_HNDLR_PATH
 Sect OctLoc
   1     310   000003 777640   000342 006000   000000 177640   000000 006014    ................
   1     314   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     340*  000000 177640   000000 006014   000000 000001   000000 000040    ...............
   1     344   000220 000000   000000 000000                                    ........

WRITE_TO_FEP
 Sect OctLoc
   1     346   000003 777640   000356 006000   000000 177640   000000 006014    ................
   1     352   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     356   000000 400400   000000 000000   000000 000000   200000 000000    ................

READ_FROM_FEP
 Sect OctLoc
   1     362   000005 777640   000372 006000   000000 177640   000000 006014    ................
   1     366   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     372   000000 400000   000000 000000   000000 000000   000000 000000    ................
   1     376   000000 000000   000000 000000                                    ........

DCB_NAME
 Sect OctLoc
   1     401   012103 117114   124123 137104   103102 ******                    .COLTS_DCB..

GET_COLTS_DCB
 Sect OctLoc
   1     404   000001 777640   000412 006000   000002 577640   000401 006000    ................
   1     410   000000 777640   000400 006000   000000 000000   000000 000000    ................

REL_COLTS_DCB
 Sect OctLoc
   1     414   000001 777640   000416 006000   000000 000000   000000 000000    ................

FPTN_
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:278  
 Sect OctLoc
   2     000   000000 006000                                                    ....

TEST_XREF
 Sect OctLoc
   2     001   041130 000001   000016 124116   104137 115114   103120 137110    !X....TND_MLCP_H
   2     005   116104 114122   040040 040040   040040 040040   040040 040040    NDLR
   2     011   040040 040040   040*** ******   041150 000001   000016 124116         ...!h....TN
   2     015   104137 115114   103120 137110   116104 114122   040040 040040    D_MLCP_HNDLR
   2     021   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     025   041030 000001   000016 124116   104137 115114   103120 137110    !.....TND_MLCP_H
   2     031   116104 114122   040040 040040   040040 040040   040040 040040    NDLR
   2     035   040040 040040   040*** ******   041010 000001   000016 124116         ...!.....TN
   2     041   104137 115114   103120 137110   116104 114122   040040 040040    D_MLCP_HNDLR
   2     045   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     051   041020 000001   000016 124116   104137 115114   103120 137110    !.....TND_MLCP_H
   2     055   116104 114122   040040 040040   040040 040040   040040 040040    NDLR
   2     061   040040 040040   040*** ******   041070 000001   000016 124116         ...!8....TN
   2     065   104137 115114   103120 137110   116104 114122   040040 040040    D_MLCP_HNDLR
   2     071   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     075   041100 000001   000016 124116   104137 115114   103120 137110    !@....TND_MLCP_H
   2     101   116104 114122   040040 040040   040040 040040   040040 040040    NDLR
   2     105   040040 040040   040*** ******   041170 000001   000016 124116         ...!x....TN
   2     111   104137 115114   103120 137110   116104 114122   040040 040040    D_MLCP_HNDLR
   2     115   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     121   040000 000002   000015 124116   104137 115104   103137 110116     .....TND_MDC_HN
   2     125   104114 122040   040040 040040   040040 040040   040040 040040    DLR
   2     131   040040 040040   040*** ******   040001 000002   000015 124116         ... .....TN
   2     135   104137 115104   103137 110116   104114 122040   040040 040040    D_MDC_HNDLR
   2     141   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     145   040002 000002   000015 124116   104137 115104   103137 110116     .....TND_MDC_HN
   2     151   104114 122040   040040 040040   040040 040040   040040 040040    DLR
   2     155   040040 040040   040*** ******   040003 000002   000015 124116         ... .....TN
   2     161   104137 115104   103137 110116   104114 122040   040040 040040    D_MDC_HNDLR
   2     165   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     171   040010 000002   000015 124116   104137 115104   103137 110116     .....TND_MDC_HN
   2     175   104114 122040   040040 040040   040040 040040   040040 040040    DLR
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:279  
   2     201   040040 040040   040*** ******   040061 000002   000015 124116         ... 1....TN
   2     205   104137 115104   103137 110116   104114 122040   040040 040040    D_MDC_HNDLR
   2     211   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     215   040063 000002   000015 124116   104137 115104   103137 110116     3....TND_MDC_HN
   2     221   104114 122040   040040 040040   040040 040040   040040 040040    DLR
   2     225   040040 040040   040*** ******   040304 000002   000015 124116         ... .....TN
   2     231   104137 115104   103137 110116   104114 122040   040040 040040    D_MDC_HNDLR
   2     235   040040 040040   040040 040040   040040 040040   040*** ******                 ...
   2     241   051170 000003   000017 124116   104137 115114   103061 066137    )x....TND_MLC16_
   2     245   110116 104114   122040 040040   040040 040040   040040 040040    HNDLR
   2     251   040040 040040   040*** ******                                         ...

(unnamed)
 Sect OctLoc
   2     253   106105 040040                                                    FE

(unnamed)
 Sect OctLoc
   4     000   001777 776000   777777 400007   000000 006000   007777 777777    ................
   4     004   777777 007777   000003 777774   777677 777777   000007 006000    ................
   4     010   777577 777777   000200 200000   000001 406000   000177 777640    ................
   4     014   776777 777777   777377 777777   773777 777777   737777 777777    ................
   4     020   775777 777777   777776 777777                                    ........
     2245    12869    2   END CONNECT_TO_SLAVE;
     2246    12870    1   END TOC$COLTS ;

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:280  
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOC$COLTS.
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:281  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    71- 12870    651   121     3      0  y   y    4   1 TOC$COLTS
  1 10864- 10955     44    16     3     75  y   y    1     2 TOC$MME_COINIT
  2 10931- 10954     15     1     3    220  y   y    0      3 INIT_FOR_COLTS_ONLY
  3 10981- 10995      6     2     3    276  y   y    1     2 TOC$MME_FEPTYP
  4 11043- 11095     27    18     3    351  y   y    7     2 TOC$MME_GEROUT
  5 11119- 11735    215    19     3    506  y   y    2     2 GEROUT_ICM
  6 11204- 11243     24     7     3    711  y   y    3      3 CHECK_CMD_AND_TEST_NUM
  7 11264- 11275      6     2     3   1066  y   y    1      3 SET_POINTERS
  8 11291- 11318     17     4     3   1131  y y y    1      3 SETUP_NEW_ENTRY
  9 11350- 11400     35     5     3   1247  y   y    1      3 BUILD_CONFIG_ICM
 10 11428- 11704     91     8     3   1516  y   y    1      3 SETUP_TEST_CONNECT
 11 11470- 11496     18     6     3   1557  y   y    2       4 FIND_HANDLER
 12 11531- 11639     42     6     3   1652  y   y    2       4 ASSIGN_DCB
 13 11580- 11638     23     9     3   2011  y   y    1        5 NEW_DCB
 14 11662- 11703     25     8     3   2122  y y y    2       4 OPEN_DCB
 15 11720- 11734      5     3     3   2260  y   y    1      3 COPY_ICM
 16 11775- 11802     20     1     3   2317  y   y    0     2 GEROUT_REMOTE_INQUIRY
 17 11840- 11870     16     6     3   2402  y   y    1     2 GEROUT_TERMINAL_TYPE_REQUEST
 18 11897- 11930     21     6     3   2522  y   y    1     2 GEROUT_COLTS_WAKEUP
 19 11956- 12156     75    12     3   2623  y   y    3     2 GEROUT_DISCONNECT
 20 11998- 12040     22     6     3   2655  y   y    1      3 DISCONNECT_EXEC_LINE
 21 12059- 12077     12     3     3   2774  y   y    1      3 INITIATE_HNDLR_WRAPUP
 22 12098- 12155     33    13     3   3064  y   y    3      3 DISCONNECT_TEST_LINE
 23 12173- 12212     19     9     3   3217  y   y    2     2 GEROUT_STATUS_REQUEST
 24 12228- 12246      7     3     3   3333  y   y    1     2 RETURN_GEROUT_STATUS
 25 12271- 12318     33     3     3   3420  y y y    1     2 GEROUT_WRITE
 26 12348- 12377     18     2     3   3630  y y y    1     2 GEROUT_READ
 27 12391- 12463     20     2     3   3756  y y y    1     2 CHECK_READ
 28 12422- 12436      6     2     3   4013  y   y    1      3 TEST_CONNECT
 29 12450- 12462      5     2     3   4033  y   y    1      3 TEST_DISCONNECT
 30 12477- 12499     11     3     3   4057  y   y    1     2 CLOSE_DCB
 31 12514- 12545      9     6     3   4135  y y y    1     2 RELEASE_DCB
 32 12560- 12580      7     5     3   4172  y   y    2     2 ANYBODY_USING_THIS_DCB
 33 12593- 12604      3     2     3   4273  y   y    1     2 BUSY_THIS_TEST
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:282  
 34 12617- 12628      3     2     3   4304  y   y    1     2 UNBUSY_THIS_TEST
 35 12645- 12663      8     3     3   4315  y   y    1     2 CLOSE_DCB_IF_UNUSED
 36 12679- 12697      7     6     3   4351  y   y    1     2 CALCULATE_CHECKSUM
 37 12730- 12773     30     7     3   4424  y   y    2     2 TOC$MME_LOGFEP
 38 12793- 12815     14     2     3   4577  y   y    1     2 TOC$GEROUT_READ_COMPLETION
 39 12833- 12869     26     4     3   4653  y   y    1     2 CONNECT_TO_SLAVE
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:283  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              71   3      0 Proc    0                             10808   3      2 If      0
   $$$$$$$ 10809   3      5 Call    0                         $$$ 10816   3     35 DoCase  0
           10817   3     50 Case    0                           $ 10818   3     50 Call    0
           10819   3     56 Case    0                           $ 10820   3     56 Call    0
           10821   3     64 Case    0                           $ 10822   3     64 Call    0
           10823   3     74 EndCse  0                             10824   3     74 Return  0
           10864   3     75 Proc    1                             10890   3     76 Call    1
           10891   3    100 DoIndx  1                          $$ 10892   3    103 Assign  1
           10893   3    110 Assign  1                       $$$$$ 10894   3    114 DoCase  1
           10895   3    134 Case    1                           $ 10896   3    134 Assign  1
           10897   3    137 Case    1                         $$$ 10898   3    137 Assign  1
           10899   3    147 Case    1                             10900   3    147 Assign  1
           10901   3    151 Case    1                          $$ 10902   3    151 Assign  1
           10903   3    160 Case    1                           $ 10904   3    160 Assign  1
           10905   3    164 Case    1                             10906   3    164 If      1
           10907   3    166 Do      1                             10908   3    166 Assign  1
           10909   3    171 Assign  1                             10910   3    173 EndDo   1
           10911   3    174 Case    1                             10912   3    174 Assign  1
           10913   3    200 Call    1                             10914   3    204 EndCse  1
        $$ 10915   3    204 EndInd  1                             10916   3    213 Assign  1
           10917   3    216 Return  1                             10931   3    220 Proc    2
           10937   3    221 If      2                             10938   3    224 Do      2
           10939   3    224 Assign  2                             10940   3    226 Assign  2
           10941   3    231 DoIndx  2                          $$ 10942   3    232 Assign  2
           10943   3    241 Assign  2                             10944   3    246 Assign  2
           10945   3    252 Assign  2                             10946   3    257 Assign  2
         $ 10947   3    262 Assign  2                             10948   3    267 EndInd  2
           10949   3    274 EndDo   2                             10952   3    274 Return  2
           10981   3    276 Proc    3                             10989   3    277 Assign  3
$$$$$$$$$$ 10990   3    302 If      3                           $ 10991   3    340 Assign  3
         $ 10992   3    344 Assign  3                             10993   3    347 Return  3
           11043   3    351 Proc    4                    $$$$$$$$ 11068   3    352 DoCase  4
           11069   3    377 Case    4                           $ 11070   3    377 Call    4
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:284  
           11071   3    406 Case    4                             11072   3    406 Call    4
           11073   3    411 Case    4                             11074   3    411 Call    4
           11075   3    416 Case    4                             11076   3    416 Call    4
           11077   3    423 Case    4                           $ 11078   3    423 Call    4
           11079   3    433 Case    4                           $ 11080   3    433 Call    4
           11081   3    442 Case    4                             11082   3    442 Assign  4
           11083   3    446 Call    4                             11084   3    452 EndCse  4
         $ 11085   3    452 Assign  4                          $$ 11086   3    456 Assign  4
           11087   3    462 Assign  4                          $$ 11088   3    464 Assign  4
           11089   3    470 Assign  4                          $$ 11090   3    472 Assign  4
           11091   3    476 Assign  4                          $$ 11092   3    500 Assign  4
           11093   3    504 Return  4                             11119   3    506 Proc    5
           11144   3    507 Assign  5                             11145   3    512 Assign  5
           11146   3    513 DoWhil  5                             11149   3    514 Assign  5
$$$$$$$$$$ 11150   3    517 EndWhi  5                             11152   3    566 DoCase  5
           11153   3    573 Case    5                             11154   3    573 Assign  5
           11155   3    577 Call    5                             11156   3    604 Case    5
           11157   3    604 Assign  5                             11158   3    610 If      5
           11159   3    613 Do      5                             11160   3    613 Assign  5
           11161   3    617 Call    5                             11162   3    623 EndDo   5
           11163   3    624 Do      5                             11164   3    624 Assign  5
        $$ 11165   3    627 Call    5                             11166   3    637 Call    5
      $$$$ 11167   3    643 Assign  5                          $$ 11168   3    653 DoCase  5
           11169   3    664 Case    5                             11170   3    664 Call    5
           11171   3    670 Return  5                             11172   3    672 Case    5
         $ 11173   3    672 Call    5                             11174   3    677 Case    5
           11175   3    677 EndCse  5                             11176   3    677 Call    5
           11177   3    703 Do      5                             11178   3    703 Call    5
           11179   3    707 EndDo   5                             11180   3    707 EndDo   5
           11181   3    707 EndCse  5                             11182   3    707 Return  5
           11204   3    711 Proc    6                        $$$$ 11213   3    712 Assign  6
    $$$$$$ 11214   3    720 If      6                             11215   3    734 Return  6
           11216   3    736 Do      6                        $$$$ 11217   3    736 DoCase  6
           11218   3    751 Case    6                       $$$$$ 11219   3    751 If      6
           11220   3    770 Call    6                             11222   3    774 Return  6
           11223   3    776 Case    6                             11224   3    776 Assign  6
           11225   3   1000 DoUntl  6                             11229   3   1000 Assign  6
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:285  
$$$$$$$$$$ 11230   3   1001 EndUnt  6                             11231   3   1044 Assign  6
           11232   3   1046 If      6                             11233   3   1050 Return  6
           11235   3   1052 Case    6                             11236   3   1052 Return  6
           11237   3   1054 EndCse  6                             11241   3   1054 Assign  6 ERROR
           11242   3   1060 Call    6                             11243   3   1064 EndPrc  6
           11264   3   1066 Proc    7                       $$$$$ 11270   3   1067 Assign  7
        $$ 11271   3   1101 Assign  7                        $$$$ 11272   3   1107 Assign  7
       $$$ 11273   3   1120 Assign  7                             11275   3   1130 EndPrc  7
           11291   3   1131 Proc    8                             11300   3   1132 Assign  8
           11301   3   1133 Assign  8                             11302   3   1134 DoWhil  8
$$$$$$$$$$ 11303   3   1135 If      8                             11304   3   1164 Assign  8
           11305   3   1167 Assign  8                      $$$$$$ 11306   3   1172 EndWhi  8
           11307   3   1214 If      8                             11308   3   1217 Do      8
         $ 11309   3   1217 Assign  8                             11310   3   1223 Assign  8
       $$$ 11311   3   1226 Assign  8                          $$ 11312   3   1234 Assign  8
           11313   3   1241 Assign  8                             11314   3   1243 Return  8
           11316   3   1245 Altret  8                             11350   3   1247 Proc    9
           11364   3   1250 Call    9                        $$$$ 11365   3   1254 Assign  9
       $$$ 11366   3   1263 Assign  9                           $ 11367   3   1271 Assign  9
           11368   3   1300 Assign  9                          $$ 11369   3   1302 Assign  9
         $ 11370   3   1307 Assign  9                             11371   3   1316 Assign  9
$$$$$$$$$$ 11372   3   1320 MonCal  9                           $ 11374   3   1324 DoCase  9
           11375   3   1332 Case    9                         $$$ 11376   3   1332 Assign  9
       $$$ 11377   3   1341 Assign  9                        $$$$ 11378   3   1347 Assign  9
           11379   3   1356 Case    9                             11380   3   1356 Assign  9
         $ 11381   3   1360 Assign  9                        $$$$ 11382   3   1367 Assign  9
        $$ 11383   3   1376 Assign  9                             11384   3   1402 Assign  9
       $$$ 11385   3   1404 Assign  9                           $ 11386   3   1415 Assign  9
       $$$ 11387   3   1424 Assign  9                      $$$$$$ 11388   3   1432 Assign  9
       $$$ 11389   3   1444 Assign  9                          $$ 11390   3   1452 Assign  9
           11391   3   1460 EndCse  9                             11392   3   1460 Call    9
           11393   3   1464 Call    9                       $$$$$ 11394   3   1470 Call    9
           11395   3   1502 Return  9                             11398   3   1504 Assign  9 ERROR
           11399   3   1510 Call    9                             11400   3   1514 EndPrc  9
           11428   3   1516 Proc   10                    $$$$$$$$ 11445   3   1517 Assign 10
         $ 11446   3   1533 Call   10                           $ 11447   3   1541 Call   10
         $ 11448   3   1547 Call   10                             11449   3   1555 Return 10
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:286  
           11470   3   1557 Proc   11                             11479   3   1560 Assign 11
           11480   3   1561 Assign 11                             11481   3   1562 DoWhil 11
     $$$$$ 11482   3   1563 If     11                             11483   3   1574 Assign 11
           11484   3   1577 Assign 11                          $$ 11485   3   1602 EndWhi 11
           11486   3   1616 If     11                             11487   3   1622 Do     11
           11488   3   1622 Assign 11                             11489   3   1626 Call   11
           11490   3   1632 EndDo  11                             11491   3   1633 Do     11
           11492   3   1633 Assign 11                      $$$$$$ 11493   3   1635 Assign 11
           11494   3   1646 Return 11                             11496   3   1650 EndPrc 11
           11531   3   1652 Proc   12                             11541   3   1653 Assign 12
           11542   3   1654 Assign 12                             11543   3   1655 DoWhil 12
$$$$$$$$$$ 11544   3   1656 If     12                      $$$$$$ 11547   3   1703 If     12
     $$$$$ 11548   3   1716 If     12                             11549   3   1727 Assign 12
           11550   3   1732 Assign 12                             11551   3   1736 Assign 12
           11552   3   1742 Assign 12                          $$ 11553   3   1745 EndWhi 12
           11554   3   1761 If     12                             11555   3   1763 Do     12
    $$$$$$ 11556   3   1763 Assign 12                          $$ 11557   3   1774 Assign 12
           11558   3   2002 EndDo  12                             11559   3   2003 Call   12
           11560   3   2007 Return 12                             11580   3   2011 Proc   13
           11612   3   2012 Assign 13                             11613   3   2013 Assign 13
           11614   3   2015 DoWhil 13                             11615   3   2016 If     13
           11616   3   2022 Assign 13                             11617   3   2026 Do     13
  $$$$$$$$ 11618   3   2026 IntCal 13                  $$$$$$$$$$ 11619   3   2034 MonCal 13
           11620   3   2040 Assign 13                         $$$ 11621   3   2043 Assign 13
        $$ 11622   3   2051 Assign 13                             11623   3   2057 Assign 13
           11624   3   2060 EndDo  13                          $$ 11625   3   2060 EndWhi 13
           11627   3   2073 If     13                             11628   3   2075 Do     13
           11629   3   2075 Assign 13                             11630   3   2101 Call   13
           11631   3   2105 EndDo  13                             11632   3   2106 Return 13
       $$$ 11635   3   2110 Call   13 DCBERR                      11636   3   2120 Return 13
           11662   3   2122 Proc   14                         $$$ 11676   3   2123 If     14
           11677   3   2132 Do     14                          $$ 11678   3   2132 Assign 14
           11679   3   2140 EndDo  14                             11680   3   2141 Do     14
        $$ 11681   3   2141 Assign 14                          $$ 11682   3   2146 Assign 14
         $ 11683   3   2153 Assign 14                    $$$$$$$$ 11684   3   2162 IntCal 14
           11685   3   2171 IntCal 14                        $$$$ 11686   3   2175 Assign 14
        $$ 11687   3   2204 Assign 14                  $$$$$$$$$$ 11688   3   2212 MonCal 14
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:287  
           11689   3   2216 Do     14                         $$$ 11690   3   2216 Assign 14
        $$ 11691   3   2225 Assign 14                             11692   3   2233 EndDo  14
           11694   3   2234 Do     14                         $$$ 11695   3   2234 Call   14
           11696   3   2244 Assign 14                             11697   3   2250 Call   14
           11698   3   2254 Return 14                             11700   3   2256 EndDo  14
           11701   3   2256 Return 14                             11720   3   2260 Proc   15
           11729   3   2261 DoIndx 15                    $$$$$$$$ 11730   3   2263 Assign 15
   $$$$$$$ 11732   3   2277 EndInd 15                             11733   3   2315 Return 15
           11775   3   2317 Proc   16                             11782   3   2320 Assign 16
           11783   3   2323 Assign 16                             11784   3   2324 If     16
           11785   3   2327 Do     16                             11786   3   2327 Assign 16
           11787   3   2333 Call   16                             11788   3   2337 EndDo  16
           11789   3   2340 Do     16                             11790   3   2340 Assign 16
         $ 11791   3   2342 Assign 16                             11792   3   2346 DoWhil 16
           11793   3   2347 Assign 16                       $$$$$ 11794   3   2352 EndWhi 16
           11795   3   2371 If     16                             11796   3   2374 Do     16
           11797   3   2374 Call   16                             11798   3   2400 EndDo  16
           11800   3   2400 EndDo  16                             11801   3   2400 Return 16
           11840   3   2402 Proc   17                             11853   3   2403 Assign 17
           11854   3   2404 DoWhil 17                             11857   3   2405 Assign 17
$$$$$$$$$$ 11858   3   2410 EndWhi 17                             11859   3   2457 If     17
           11860   3   2461 Do     17                          $$ 11861   3   2461 Assign 17
   $$$$$$$ 11862   3   2466 If     17                           $ 11863   3   2505 Assign 17
           11864   3   2511 Assign 17                             11865   3   2514 EndDo  17
           11866   3   2515 Do     17                             11867   3   2515 Assign 17
           11868   3   2520 EndDo  17                             11869   3   2520 Return 17
           11897   3   2522 Proc   18                             11910   3   2523 Assign 18
           11911   3   2526 Assign 18                             11912   3   2527 DoWhil 18
           11913   3   2530 Assign 18                        $$$$ 11914   3   2533 EndWhi 18
           11915   3   2550 If     18                             11916   3   2553 Do     18
         $ 11917   3   2553 Assign 18                             11918   3   2557 Assign 18
         $ 11919   3   2562 Assign 18                          $$ 11920   3   2567 Assign 18
           11921   3   2577 Assign 18                             11922   3   2602 Assign 18
           11923   3   2604 Call   18                             11924   3   2610 EndDo  18
           11925   3   2611 Do     18                             11926   3   2611 Assign 18
           11927   3   2615 Call   18                             11928   3   2621 EndDo  18
           11929   3   2621 Return 18                             11956   3   2623 Proc   19
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:288  
           11977   3   2624 Assign 19                             11978   3   2625 Assign 19
           11979   3   2630 Assign 19                           $ 11980   3   2633 If     19
           11981   3   2640 Call   19                           $ 11982   3   2645 Call   19
           11983   3   2653 Return 19                             11998   3   2655 Proc   20
           12015   3   2656 Assign 20                             12016   3   2657 DoWhil 20
           12017   3   2660 Assign 20                    $$$$$$$$ 12018   3   2663 EndWhi 20
           12019   3   2712 If     20                             12020   3   2714 Do     20
           12021   3   2714 DoIndx 20                          $$ 12022   3   2715 If     20
           12023   3   2724 Do     20                             12024   3   2724 DoIndx 20
 $$$$$$$$$ 12025   3   2725 If     20                             12029   3   2750 Do     20
           12030   3   2750 Assign 20                             12031   3   2752 Assign 20
           12032   3   2754 EndDo  20                             12033   3   2754 EndInd 20
           12034   3   2761 Call   20                             12035   3   2765 EndDo  20
           12036   3   2765 EndInd 20                             12037   3   2772 EndDo  20
           12039   3   2772 Return 20                             12059   3   2774 Proc   21
           12064   3   2775 Assign 21                             12065   3   3002 Assign 21
       $$$ 12066   3   3006 Assign 21                  $$$$$$$$$$ 12067   3   3014 MonCal 21
           12069   3   3020 Assign 21 DONT_CARE               $$$ 12070   3   3025 Assign 21
$$$$$$$$$$ 12071   3   3033 MonCal 21                         $$$ 12073   3   3037 Assign 21 HNDLR_GONE
        $$ 12074   3   3045 Assign 21                         $$$ 12075   3   3053 Call   21
           12076   3   3062 Return 21                             12098   3   3064 Proc   22
           12120   3   3065 Assign 22                             12121   3   3066 DoWhil 22
           12122   3   3067 Assign 22                    $$$$$$$$ 12123   3   3072 EndWhi 22
           12124   3   3120 If     22                             12125   3   3122 Do     22
           12126   3   3122 If     22                             12127   3   3125 Do     22
           12128   3   3125 Assign 22                             12129   3   3131 Call   22
           12130   3   3135 EndDo  22                             12131   3   3136 Do     22
        $$ 12132   3   3136 If     22                             12133   3   3143 Do     22
        $$ 12134   3   3143 Assign 22                           $ 12135   3   3151 Assign 22
           12136   3   3156 Call   22                             12137   3   3162 Do     22
        $$ 12138   3   3162 Assign 22                             12139   3   3167 Assign 22
           12140   3   3171 Call   22                             12141   3   3175 EndDo  22
           12143   3   3176 Do     22                           $ 12144   3   3176 Assign 22
           12145   3   3202 Assign 22                             12146   3   3205 Call   22
           12147   3   3211 EndDo  22                             12148   3   3211 Call   22
           12149   3   3215 EndDo  22                             12151   3   3215 EndDo  22
           12152   3   3215 EndDo  22                             12154   3   3215 Return 22
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:289  
           12173   3   3217 Proc   23                             12190   3   3220 Assign 23
           12191   3   3223 Assign 23                             12192   3   3224 If     23
           12193   3   3227 Do     23                             12194   3   3227 DoWhil 23
           12197   3   3230 Assign 23                  $$$$$$$$$$ 12198   3   3233 EndWhi 23
           12199   3   3302 If     23                             12200   3   3304 Do     23
       $$$ 12201   3   3304 Assign 23                             12202   3   3314 Call   23
           12203   3   3320 EndDo  23                             12204   3   3321 Do     23
           12205   3   3321 Assign 23                             12206   3   3325 Call   23
           12207   3   3331 EndDo  23                             12208   3   3331 EndDo  23
           12211   3   3331 Return 23                             12228   3   3333 Proc   24
$$$$$$$$$$ 12237   3   3334 If     24                        $$$$ 12240   3   3364 Assign 24
        $$ 12241   3   3373 If     24                        $$$$ 12242   3   3401 Assign 24
       $$$ 12243   3   3410 Assign 24                             12244   3   3416 Return 24
           12271   3   3420 Proc   25                       $$$$$ 12280   3   3421 Assign 25
       $$$ 12281   3   3432 Assign 25                          $$ 12282   3   3443 Assign 25
     $$$$$ 12283   3   3450 If     25                             12284   3   3466 Do     25
        $$ 12285   3   3466 If     25                             12286   3   3474 Do     25
       $$$ 12287   3   3474 Assign 25                          $$ 12288   3   3502 If     25
       $$$ 12289   3   3510 Call   25                             12291   3   3521 Altret 25
           12293   3   3523 Do     25                  $$$$$$$$$$ 12294   3   3523 MonCal 25
           12295   3   3527 Do     25                             12296   3   3527 Call   25
           12297   3   3533 EndDo  25                             12299   3   3534 Do     25
       $$$ 12300   3   3534 Call   25                             12301   3   3544 Assign 25
           12302   3   3550 Call   25                         $$$ 12303   3   3554 Assign 25
        $$ 12304   3   3562 Assign 25                             12305   3   3570 Call   25
           12306   3   3574 Call   25                       $$$$$ 12307   3   3600 Call   25
           12308   3   3612 Altret 25                             12310   3   3614 Return 25
           12313   3   3616 Do     25                             12314   3   3616 Assign 25
           12315   3   3622 Call   25                             12316   3   3626 EndDo  25
           12318   3   3626 EndPrc 25                             12348   3   3630 Proc   26
     $$$$$ 12356   3   3631 Assign 26                          $$ 12357   3   3642 Assign 26
       $$$ 12358   3   3647 Assign 26                  $$$$$$$$$$ 12359   3   3660 MonCal 26
           12360   3   3664 Do     26                             12361   3   3664 Call   26
           12362   3   3670 Return 26                             12365   3   3672 Do     26
       $$$ 12366   3   3672 Call   26                       $$$$$ 12367   3   3702 Assign 26
           12368   3   3712 Call   26                         $$$ 12369   3   3716 Assign 26
        $$ 12370   3   3724 Assign 26                             12371   3   3732 Call   26
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:290  
           12372   3   3736 Call   26                       $$$$$ 12373   3   3742 Call   26
           12374   3   3754 Altret 26                             12391   3   3756 Proc   27
  $$$$$$$$ 12399   3   3757 DoCase 27                             12400   3   3777 Case   27
           12401   3   3777 Call   27                             12402   3   4004 Case   27
           12403   3   4004 Call   27                             12404   3   4011 Case   27
           12405   3   4011 EndCse 27                             12406   3   4011 Return 27
           12422   3   4013 Proc   28                       $$$$$ 12430   3   4014 If     28
           12431   3   4025 Do     28                             12432   3   4025 Call   28
           12433   3   4031 EndDo  28                             12435   3   4031 Return 28
           12450   3   4033 Proc   29                         $$$ 12458   3   4034 Assign 29
           12459   3   4043 Call   29                         $$$ 12460   3   4047 Assign 29
           12461   3   4055 Return 29                             12477   3   4057 Proc   30
         $ 12486   3   4060 Assign 30                  $$$$$$$$$$ 12487   3   4064 MonCal 30
           12488   3   4070 DoIndx 30                       $$$$$ 12489   3   4071 If     30
        $$ 12490   3   4103 Assign 30                             12492   3   4110 EndInd 30
           12493   3   4115 Call   30                             12494   3   4121 Return 30
       $$$ 12497   3   4123 Call   30 ERROR                       12498   3   4133 Return 30
           12514   3   4135 Proc   31                           $ 12535   3   4136 Assign 31
 $$$$$$$$$ 12536   3   4142 MonCal 31                             12537   3   4146 DoIndx 31
       $$$ 12538   3   4147 If     31                             12539   3   4157 Assign 31
           12541   3   4161 EndInd 31                             12542   3   4166 Return 31
           12544   3   4170 Altret 31 ERROR                       12560   3   4172 Proc   32
           12570   3   4173 Assign 32                             12571   3   4175 DoIndx 32
$$$$$$$$$$ 12572   3   4176 If     32                             12577   3   4261 Assign 32
           12578   3   4264 EndInd 32                             12579   3   4271 Return 32
           12593   3   4273 Proc   33                         $$$ 12601   3   4274 Assign 33
           12602   3   4303 Return 33                             12617   3   4304 Proc   34
       $$$ 12625   3   4305 Assign 34                             12626   3   4314 Return 34
           12645   3   4315 Proc   35                         $$$ 12654   3   4316 If     35
           12655   3   4325 Do     35                           $ 12656   3   4325 Call   35
           12657   3   4333 If     35                        $$$$ 12658   3   4337 Call   35
           12660   3   4347 EndDo  35                             12662   3   4347 Return 35
           12679   3   4351 Proc   36                             12691   3   4352 Assign 36
           12692   3   4354 DoIndx 36                    $$$$$$$$ 12693   3   4357 Assign 36
    $$$$$$ 12694   3   4377 EndInd 36                         $$$ 12695   3   4414 Assign 36
           12696   3   4422 Return 36                             12730   3   4424 Proc   37
           12743   3   4425 Assign 37                             12744   3   4430 Assign 37
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:291  
           12745   3   4432 Assign 37                  $$$$$$$$$$ 12746   3   4435 MonCal 37
           12747   3   4442 Do     37                             12748   3   4442 Assign 37
           12749   3   4445 Return 37                             12751   3   4447 Assign 37
           12752   3   4451 DoWhil 37                             12753   3   4452 Assign 37
  $$$$$$$$ 12754   3   4455 EndWhi 37                             12755   3   4507 If     37
         $ 12756   3   4511 Assign 37                             12757   3   4516 Do     37
           12758   3   4516 Assign 37                             12759   3   4520 DoWhil 37
           12760   3   4521 Assign 37                      $$$$$$ 12761   3   4524 EndWhi 37
           12762   3   4552 If     37                             12763   3   4554 Do     37
         $ 12764   3   4554 Assign 37                           $ 12765   3   4560 Assign 37
           12766   3   4564 EndDo  37                             12767   3   4565 Do     37
           12768   3   4565 Assign 37                             12769   3   4571 Call   37
           12770   3   4575 EndDo  37                             12771   3   4575 EndDo  37
           12772   3   4575 Return 37                             12793   3   4577 Proc   38
         $ 12800   3   4600 If     38                             12801   3   4604 Do     38
           12802   3   4604 Call   38                             12803   3   4610 Call   38
           12804   3   4614 Call   38                         $$$ 12805   3   4620 If     38
       $$$ 12806   3   4627 Call   38                             12808   3   4640 EndDo  38
           12809   3   4641 Do     38                             12810   3   4641 Assign 38
           12811   3   4645 Call   38                             12812   3   4651 EndDo  38
           12813   3   4651 Return 38                             12833   3   4653 Proc   39
           12844   3   4654 If     39                             12845   3   4661 Do     39
       $$$ 12846   3   4661 Assign 39                             12847   3   4670 EndDo  39
           12848   3   4671 Do     39                         $$$ 12849   3   4671 If     39
           12850   3   4700 Do     39                          $$ 12851   3   4700 Assign 39
      $$$$ 12852   3   4706 Assign 39                          $$ 12853   3   4715 Assign 39
        $$ 12854   3   4723 If     39                         $$$ 12855   3   4731 Assign 39
        $$ 12856   3   4740 Assign 39                             12857   3   4746 EndDo  39
           12858   3   4747 Do     39                          $$ 12859   3   4747 Assign 39
      $$$$ 12860   3   4755 Assign 39                          $$ 12861   3   4764 Assign 39
        $$ 12862   3   4772 If     39                         $$$ 12863   3   5000 Assign 39
        $$ 12864   3   5007 Assign 39                             12865   3   5015 EndDo  39
           12866   3   5015 Assign 39                             12867   3   5017 EndDo  39
           12868   3   5017 Return 39

  **** Statement type totals  ****

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:292  
   218 Assign    80 Call      10 MonCal    52 If        30 Case      47 Return
     5 Altret     3 IntCal     1 DoUntl     9 DoIndx    13 DoWhil     8 DoCase
    55 Do         1 EndUnt     9 EndInd    13 EndWhi     8 EndCse    44 EndDo
    40 Proc       5 EndPrc     7 Labels

 # major stmts=  446 Code/major= 5.77 # stmts=  651 Code/stmt= 3.95  Point total=112.9
 Cost/major stmt=  6.6 Cost/stmt=  4.5 Total cost=   2956.2

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$
   6-8  $$$$$$$$$
  8-10  $$$$$$$$
 10-12  $$
 12-14  $$
 14-16  $
 16-18
 18-20  $
 20-22
 22-??  $$$
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:293  

 **** Variables and constants ****

  ****  Section 001  Data  TOC$COLTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   143-0-0/w SBIN        r     1 COLTS_DCBS(0:7)
   400-0-0/w UBIN        r     1 DCB_NUM
   153-0-0/h SBIN(18)    r     1 PHY_FEP_NUM(0:7)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

   310-0-0/d STRC(1080)  r     1 CLOSE_HNDLR_PATH
   342-0-0/d STRC(144)   r         2 V
   342-0-0/b UBIN(18)    r          3 DCB#

   160-0-0/d STRC(144)   r     1 CONFIG
   160-0-0/b UBIN(18)    r         2 DVCID#
   160-2-0/b UBIN(18)    r         2 EXDVCID#
   161-0-0/b UBIN(9)     r         2 STATUS#

   401-0-0/c STRC(99)    r     1 DCB_NAME
   403-2-0/c CHAR        r         2 DCBX

     1-0-0/w STRC(432)   r     1 FEP(0:7)
     1-0-0/h UBIN(18)    r         2 FEP_STATUS
     1-0-0/b STRC(18)    r         2 STATUS
     1-0-0/b BIT         r          3 ACTIVE
     1-0-1/b BIT         r          3 DISCONNECTED
     1-0-2/b BIT         r          3 TEST_CONNECTED
     1-0-3/b BIT         r          3 CONNECT_QUEUED
     1-0-4/b BIT         r          3 EXEC_CONNECTED
     1-0-6/b BIT         r          3 ECONN_WAITING
     1-0-7/b BIT         r          3 TCONN_WAITING
     1-0-8/b BIT         r          3 TDISCONNECT_ISSUED
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:294  
     1-1-0/b BIT         r          3 BUSY
     1-1-1/b BIT         r          3 DCB_OPEN
     1-1-2/b BIT         r          3 DVCID_FOUND
     1-2-0/h UBIN(18)    r         2 DCB_NUM
     2-0-0/h UBIN(18)    r         2 LOGICAL_NUM
     2-2-0/h UBIN(18)    r         2 NUM
     3-0-0/h UBIN(18)    r         2 DEVICE_TYPE
     3-2-0/h UBIN(18)    r         2 BUS_ADDR
     4-0-0/c UBIN(12)    r         2 LINE_ID
     4-0-0/b STRC(18)    r         2 LINE
     4-0-0/b UBIN(6)     r          3 T
     4-0-6/b UBIN(6)     r          3 NUM
     4-2-0/c UBIN(12)    r         2 EXEC_LINE_ID
     4-2-0/b STRC(18)    r         2 EXEC_LINE
     4-2-0/b UBIN(6)     r          3 E
     4-2-6/b UBIN(6)     r          3 NUM
     5-0-0/h UBIN(18)    r         2 CONFIG_ID
     5-2-0/c UBIN(9)     r         2 CONFIG_ID_EXT
     6-0-0/h UBIN(18)    r         2 TEST_TYPE
     7-0-0/w PTR         r         2 C_CALL$
    10-0-0/w PTR         r         2 STATUS$
    11-0-0/w PTR         r         2 ICM$
    12-0-0/w PTR         r         2 RECEIVE_ICM$
    14-0-0/w UBIN        r         2 ICM_BYTE_CNT

   404-0-0/d STRC(288)   r     1 GET_COLTS_DCB
   412-0-0/d STRC(72)    r         2 V

   164-0-0/d STRC(288)   r     1 GET_CONFIG
   172-0-0/d STRC(72)    r         2 V
   172-0-0/b UBIN(18)    r          3 FEP#
   172-2-0/b UBIN(18)    r          3 CHANNEL#

   174-0-0/d STRC(2088)  r     1 OPEN_HNDLR_PATH
   240-0-0/d STRC(756)   r         2 V
   240-0-0/b UBIN(18)    r          3 DCB#
   244-0-0/c CHAR(4)     r          3 RES#
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:295  

   362-0-0/d STRC(504)   r     1 READ_FROM_FEP
   366-0-0/w STRC(72)    r         2 BUF_
   366-0-0/b UBIN(20)    r          3 BOUND
   372-0-0/d STRC(216)   r         2 V
   372-0-0/b UBIN(18)    r          3 DCB#

   414-0-0/d STRC(144)   r     1 REL_COLTS_DCB
   416-0-0/d STRC(72)    r         2 V
   416-0-0/b UBIN(18)    r          3 DCB#

   141-0-0/w STRC(54)    r     1 SLAVE_CONNECT
   141-0-0/w PTR         r         2 PTR$
   142-0-0/h STRC(18)    r         2 STATUS
   142-1-8/b BIT         r          3 PENDING

   266-0-0/d STRC(612)   r     1 START_HNDLR
   270-0-0/c STRC(288)   r         2 NAME
   270-0-0/b UBIN(9)     r          3 L#
   270-1-0/c CHAR(31)    r          3 C#

     0-0-0/w STRC        r     1 TOC_ERROR_CODE
     0-2-1/b UBIN(14)    r         2 ERR#

   346-0-0/d STRC(432)   r     1 WRITE_TO_FEP
   352-0-0/w STRC(72)    r         2 BUF_
   352-0-0/b UBIN(20)    r          3 BOUND
   356-0-0/d STRC(144)   r         2 V
   356-0-0/b UBIN(18)    r          3 DCB#


  ****  Section 002 RoData TOC$COLTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 FPTN_                      0-0-0/w PTR         r     1 IS$
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:296  

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w STRC(333)   r     1 TEST_XREF(0:16)
     1-0-0/b UBIN(18)    r         2 CONFIG_ID
     1-2-0/b UBIN(18)    r         2 TEST_TYPE
     2-0-0/h UBIN(18)    r         2 NAME_LENGTH
     2-2-0/c CHAR(31)    r         2 HANDLER_NAME


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    34-0-0/w PTR         r     1 @CMD                      23-0-0/w PTR         r     1 @DATA_WORD
    23-0-0/w PTR         r     1 @DATA_WORD                23-0-0/w PTR         r     1 @DATA_WORD
    23-0-0/w PTR         r     1 @DATA_WORD                31-0-0/w PTR         r     1 @DATA_WORD
    31-0-0/w PTR         r     1 @DATA_WORD                23-0-0/w PTR         r     1 @DATA_WORD
    54-0-0/w PTR         r     1 @DCB_IN_USE               53-0-0/w PTR         r     1 @DCB_NUM
    57-0-0/w PTR         r     1 @DCB_NUM                  40-0-0/w PTR         r     1 @FEP_INDEX
    45-0-0/w PTR         r     1 @FEP_INDEX                11-0-0/w PTR         r     1 @GEROUT_TYPE_WORD
    41-0-0/w PTR         r     1 @I                        47-0-0/w PTR         r     1 @I
    33-0-0/w PTR         r     1 @ICM$                     11-0-0/w PTR         r     1 @LIST_COUNT
    12-0-0/w PTR         r     1 @LOGICAL_FEP_NUM           3-0-0/w PTR         r     1 @MME
     5-0-0/w PTR         r     1 @MME_INSTR$               12-0-0/w PTR         r     1 @MME_WD_2
    13-0-0/w PTR         r     1 @MME_WD_3                 14-0-0/w PTR         r     1 @MME_WD_4
    15-0-0/w PTR         r     1 @MME_WD_5                 16-0-0/w PTR         r     1 @MME_WD_6
     4-0-0/w PTR         r     1 @MREG                     17-0-0/w PTR         r     1 @MREG_A
    11-0-0/w PTR         r     1 @NODE_ID                  24-0-0/w PTR         r     1 @POINTER_WORD
    24-0-0/w PTR         r     1 @PTRS                     24-0-0/w PTR         r     1 @PTR_WORD
    32-0-0/w PTR         r     1 @PTR_WORD                 25-0-0/w PTR         r     1 @REC_WORD
    33-0-0/w PTR         r     1 @REC_WORD                  6-0-0/w PTR         r     1 @RETURN_DELTA
    35-0-0/w PTR         r     1 @TEST_NUM                 33-0-0/w PTR         r     1 @TEST_NUM
    41-0-0/w PTR         r     1 @TEST_NUM                 33-0-0/w PTR         r     1 @TEST_NUM
    33-0-0/w PTR         r     1 @TEST_NUM                 40-0-0/w PTR         r     1 @TEST_NUM
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:297  
    40-0-0/w PTR         r     1 @TEST_NUM                 37-0-0/w PTR         r     1 @TEST_NUM
    35-0-0/w PTR         r     1 @TEST_NUM                 43-0-0/w PTR         r     1 @TEST_NUM
    37-0-0/w PTR         r     1 @TEST_NUM                 37-0-0/w PTR         r     1 @TEST_NUM
    43-0-0/w PTR         r     1 @TEST_NUM                 45-0-0/w PTR         r     1 @TEST_NUM
    45-0-0/w PTR         r     1 @TEST_NUM                 53-0-0/w PTR         r     1 @TEST_NUM
    41-0-0/w PTR         r     1 @TEST_NUM                 43-0-0/w PTR         r     1 @TEST_NUM
    47-0-0/w PTR         r     1 @TEST_NUM                 37-0-0/w PTR         r     1 @TEST_NUM
    37-0-0/w PTR         r     1 @TEST_XREF_ENTRY_NUM      11-0-0/w PTR         r     1 @X2
    37-0-0/w PTR         r     1 @XREF_INDEX               37-0-0/w PTR         r     1 @XREF_INX
    41-0-0/h UBIN(18)    r     1 CKSM                      30-0-0/c UBIN(9)     r     1 CMD
    *0-0-0/c UBIN(9)     r     1 CMD                       *0-0-0/w UBIN        r     1 DATA_WORD
    *0-0-0/w UBIN        r     1 DATA_WORD                 *0-0-0/w UBIN        r     1 DATA_WORD
    *0-0-0/w UBIN        r     1 DATA_WORD                 *0-0-0/w UBIN        r     1 DATA_WORD
    *0-0-0/w UBIN        r     1 DATA_WORD                 *0-0-0/w UBIN        r     1 DATA_WORD
    46-0-0/w UBIN        r     1 DCBX                      *0-0-0/w BIT         r     1 DCB_IN_USE
    50-0-0/w BIT         r     1 DCB_IN_USE                *0-0-0/h UBIN(18)    r     1 DCB_NUM
    *0-0-0/h UBIN(18)    r     1 DCB_NUM                   42-0-0/c BIT         r     1 DCB_NUM_FOUND
    12-0-0/h UBIN(18)    r     1 DESIGNATOR_OFFSET         13-0-0/w PTR         r     1 DESP$
    36-0-0/c CHAR        r     1 DUMMY_BUF                 *0-0-0/w UBIN        r     1 FEP_INDEX
    *0-0-0/w UBIN        r     1 FEP_INDEX                 43-0-0/c BIT         r     1 FOUND
    *0-0-0/w UBIN        r     1 GEROUT_TYPE_WORD          42-0-0/w BIT         r     1 HANDLER_FOUND
    17-0-0/w UBIN        r     1 I                         25-0-0/w UBIN        r     1 I
    42-0-0/w UBIN        r     1 I                         41-0-0/w UBIN        r     1 I
    40-0-0/w UBIN        r     1 I                         23-0-0/w UBIN        r     1 I
    24-0-0/w UBIN        r     1 I                         24-0-0/w UBIN        r     1 I
    26-0-0/w UBIN        r     1 I                         32-0-0/w UBIN        r     1 I
    34-0-0/w UBIN        r     1 I                         25-0-0/w UBIN        r     1 I
    54-0-0/w UBIN        r     1 I                         60-0-0/w UBIN        r     1 I
    55-0-0/w UBIN        r     1 I                         40-0-0/w UBIN        r     1 I
    13-0-0/h UBIN(18)    r     1 I                         *0-0-0/w UBIN        r     1 I
    *0-0-0/w UBIN        r     1 I                         27-0-0/w PTR         r     1 ICM$
    *0-0-0/w PTR         r     1 ICM$                      36-0-0/w SBIN        r     1 J
    34-0-0/w UBIN        r     1 J                         33-0-0/w UBIN        r     1 J
    41-0-0/w UBIN        r     1 K                         *0-0-0/w UBIN        r     1 LIST_COUNT
    *0-0-0/w SBIN        r     1 LOGICAL_FEP_NUM           *0-0-0/w PTR         r     1 MME_INSTR$
    *0-0-0/w UBIN        r     1 MME_WD_2                  *0-0-0/w UBIN        r     1 MME_WD_3
    *0-0-0/w UBIN        r     1 MME_WD_4                  *0-0-0/w UBIN        r     1 MME_WD_5
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:298  
    *0-0-0/w UBIN        r     1 MME_WD_6                  *0-0-0/w UBIN        r     1 MREG_A
    *0-0-0/w UBIN        r     1 NODE_ID                   47-0-0/c BIT         r     1 NO_DCB_OBTAINED
    *0-0-0/w UBIN        r     1 POINTER_WORD              *0-0-0/w UBIN        r     1 PTRS
    *0-0-0/w UBIN        r     1 PTR_WORD                  *0-0-0/w UBIN        r     1 PTR_WORD
    26-0-0/w PTR         r     1 REC$                      *0-0-0/w UBIN        r     1 REC_WORD
    *0-0-0/w UBIN        r     1 REC_WORD                  20-0-0/w PTR         r     1 RESTORE$
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_NUM
    *0-0-0/w UBIN        r     1 TEST_NUM                  *0-0-0/w UBIN        r     1 TEST_XREF_ENTRY_NUM
    34-0-0/w UBIN(18)    r     1 WORK                      41-0-0/h UBIN(18)    r     1 WORK
    42-0-0/c CHAR(2)     r     1 WORK_ASC                  14-0-0/w PTR         r     1 WPNTR$
    41-0-0/h BIT (18)    r     1 W_CKSM                    *0-0-0/h SBIN(18)    r     1 X2
    *0-0-0/w UBIN        r     1 XREF_INDEX                *0-0-0/w UBIN        r     1 XREF_INX

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC        r     1 DATA
     0-0-0/b UBIN(6)     r         2 TYPE
     0-2-6/b UBIN(12)    r         2 LINE_ID

    *0-0-0/w STRC        r     1 DATA
     0-0-0/b UBIN(3)     r         2 LFEP
     0-3-3/b UBIN(6)     r         2 TYPE_CODE

    *0-0-0/w STRC        r     1 DATA
     0-2-6/b STRC(12)    r         2 LINE
     0-2-6/b UBIN(6)     r          3 TYPE

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:299  
    *0-0-0/w STRC        r     1 DATA
     0-2-6/b UBIN(12)    r         2 LINE_ID

    *0-0-0/w STRC        r     1 DATA
     0-2-6/b UBIN(12)    r         2 LINE_ID

    *0-0-0/w STRC        r     1 DATA
     0-2-6/b UBIN(12)    r         2 LINE_ID

    *0-0-0/w STRC        r     1 DATAWD
     0-0-0/b UBIN(18)    r         2 RECP
     0-2-6/b UBIN(12)    r         2 LNID

    *0-0-0/w STRC        r     1 GEROUT_TYPE
     0-2-0/b UBIN(6)     r         2 CODE

    *0-0-0/w STRC        r     1 LIST
     0-0-0/b UBIN(18)    r         2 LENGTH

    *0-0-0/w STRC(252)   r     1 MME
     0-0-0/b STRC        r         2 INST
     0-0-0/b SBIN(18)    r          3 NO
     1-0-0/w UBIN        r         2 WD_1
     2-0-0/w UBIN        r         2 WD_2
     3-0-0/w UBIN        r         2 WD_3
     4-0-0/w UBIN        r         2 WD_4
     5-0-0/w UBIN        r         2 WD_5
     6-0-0/w UBIN        r         2 WD_6

    *0-0-0/d STRC(252)   r     1 MREG
     1-0-0/b UBIN(18)    r         2 X2
     4-0-0/b UBIN        r         2 A

    *0-0-0/w STRC        r     1 NODE
     0-2-0/b UBIN(18)    r         2 NUM

    *0-0-0/w STRC        r     1 PTRS$
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:300  
     0-2-0/b UBIN(18)    r         2 CC

    *0-0-0/w STRC        r     1 PTRS$
     0-0-0/b UBIN(18)    r         2 ST

    *0-0-0/w STRC        r     1 PTRWD
     0-0-0/b UBIN(18)    r         2 ST
     0-2-0/b UBIN(18)    r         2 CC

    *0-0-0/w STRC        r     1 PTRWD
     0-0-0/b UBIN(18)    r         2 STATUS

    *0-0-0/w STRC        r     1 REC
     0-0-0/b UBIN(18)    r         2 AD

    34-0-0/w STRC        r     1 WRK
    34-0-0/b UBIN(10)    r         2 UPPER

    41-0-0/h STRC(18)    r     1 WRK
    41-0-0/b UBIN(10)    r         2 UPPER


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(495)   r     1 TOT$ECP
     7-0-0/w STRC(216)   r         2 SUBEXEC
     7-0-0/w UBIN        r          3 CURRENT
    13-0-0/w PTR         r          3 WRAPUP$

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:301  
     0-0-0/c STRC(639)   r     1 TOT$TOLTS
     0-0-0/c STRC(90)    r         2 LINK_DATE
     1-2-0/c BIT         r          3 BCD


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 GEROUT_STATUS              0-0-0/w UBIN        r     1 GEROUT_STATUS
     0-0-0/w UBIN        r     1 GEROUT_WORD
     0-0-0/w UBIN        r     1 ICM_BUFFER(0:34)
     0-0-0/h BIT (18)    r     1 ICM_DATA(0:64)
     0-0-0/w UBIN        r     1 TARGET                     0-0-0/w BIT         r     1 TARGET_BIT
     0-0-0/w UBIN(18)    r     1 TARGET_HALF

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR

     0-0-0/d STRC(8856)  r     1 B$JIT
   204-0-0/h UBIN(18)    r         2 TDP

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/w STRC        r     1 CRD30_IMAGE
     0-0-0/b UBIN(18)    r         2 FLG
     0-2-0/b UBIN(12)    r         2 FEPCNT

     0-0-0/w STRC        r     1 DESIGNATOR
     0-0-0/b UBIN(18)    r         2 AD
     0-2-0/b UBIN(18)    r         2 CODE

PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:302  
     0-0-0/d ASTR(3528)  r     1 F$DCB
   140-0-0/d ASTR(9)     r         2 DCBNAME
   140-0-4/b UBIN(5)     r          3 L

     0-0-0/w STRC        r     1 GR5_VFD
     0-2-6/b UBIN(12)    r         2 LINE_ID

     0-0-0/w STRC        r     1 HEADER_REC
     0-2-0/b UBIN(18)    r         2 BUF_AD

     0-0-0/w STRC(4608)  r     1 ICM
     1-0-0/h UBIN(18)    r         2 CKSM
     1-3-0/c UBIN(9)     r         2 WDCNT
     2-0-0/c UBIN(9)     r         2 CMD
     2-1-0/c UBIN(9)     r         2 REPLY
     2-2-0/h UBIN(18)    r         2 L6MBA
     3-0-0/h UBIN(18)    r         2 CONFIG_ID
     3-2-0/h UBIN(18)    r         2 CONFIG_ID_EXT
     4-1-0/c UBIN(9)     r         2 FLAGS
     4-3-3/b UBIN(6)     r         2 TYC

     0-0-0/w STRC        r     1 RECORD
     0-0-0/b UBIN(18)    r         2 WORD_COUNT
     0-2-0/b UBIN(18)    r         2 RCVP



   Procedure TOC$COLTS requires 2577 words for executable code.
   Procedure TOC$COLTS requires 56 words of local(AUTO) storage.

    No errors detected in file TOC$COLTS.:E05TSI    .
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:303  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:304  
          MINI XREF LISTING

ANYBODY_USING_THIS_DCB
     12560**PROC    12656--CALL
ASSIGN_DCB IN PROCEDURE SETUP_TEST_CONNECT
     11531**PROC    11447--CALL
B$ALT.CODE
     10294**DCL     10294--REDEF   10295--REDEF   10295--REDEF
B$ALT.ERR
     10295**DCL     11635<>CALL    11695<>CALL    12300<>CALL    12366<>CALL    12497<>CALL
B$ALT.ERR.ERR#
     10296**DCL     10296--REDEF
B$ALT.EVID
     10295**DCL     10295--REDEF   10295--REDEF
B$JIT.CPFLAGS1.SLEAZE
       496**DCL       496--REDEF
B$JIT.ERR.MID
       403**DCL       403--REDEF
B$JIT.JRESPEAK
       564**DCL       565--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       673**DCL       673--REDEF     674--REDEF
B$JIT.PNR
       577**DCL       577--REDEF
B$JIT.TDP
       562**DCL     10898>>ASSIGN
B$JIT.TSLINE
       671**DCL       672--REDEF
B$JIT$
     10726**DCL       397--IMP-PTR 10898>>ASSIGN
B$TCB.ALT$
     10301**DCL     11635>>CALL    11695>>CALL    12300>>CALL    12366>>CALL    12497>>CALL
B$TCB$
     10727**DCL     11635>>CALL    11695>>CALL    12300>>CALL    12366>>CALL    12497>>CALL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:305  
BUILD_CONFIG_ICM IN PROCEDURE GEROUT_ICM
     11350**PROC    11170--CALL
BUSY_THIS_TEST
     12593**PROC    12296--CALL
CALCULATE_CHECKSUM
     12679**PROC    11392--CALL
CHECK_CMD_AND_TEST_NUM IN PROCEDURE GEROUT_ICM
     11204**PROC    11165--CALL
CHECK_READ
     12391**PROC    12803--CALL
CKSM IN PROCEDURE CALCULATE_CHECKSUM
     12686**DCL     12691<<ASSIGN  12695>>ASSIGN
CLOSE_DCB
     12477**PROC    12075--CALL    12658--CALL
CLOSE_DCB_IF_UNUSED
     12645**PROC    12146--CALL    12305--CALL    12371--CALL    12459--CALL
CLOSE_HNDLR_PATH
     10633**DCL     12487<>CALL
CLOSE_HNDLR_PATH.SN_
     10633**DCL     10633--REDEF
CLOSE_HNDLR_PATH.UTL_
     10634**DCL     10634--REDEF
CLOSE_HNDLR_PATH.V
     10638**DCL     10633--DCLINIT
CLOSE_HNDLR_PATH.V.DCB#
     10639**DCL     12486<<ASSIGN
CLOSE_HNDLR_PATH.V.EXPIRE#
     10648**DCL     10648--REDEF
CLOSE_HNDLR_PATH.V.TYPE#
     10646**DCL     10646--REDEF
CLOSE_HNDLR_PATH.V.XTNSIZE#
     10643**DCL     10643--REDEF   10645--REDEF
CMD IN PROCEDURE CHECK_CMD_AND_TEST_NUM
     11207**DCL     11204--PROC    11213<<ASSIGN  11217>>DOCASE
CMD IN PROCEDURE GEROUT_ICM
     11140**DCL     11165<>CALL    11168>>DOCASE
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:306  
COLTS_DCBS
     10441**DCL     10946<<ASSIGN  11615>>IF      11620<<ASSIGN  12538>>IF      12539<<ASSIGN
CONFIG
     10455**DCL     10472--DCLINIT
CONFIG.DVCID#
     10455**DCL     11380>>ASSIGN
CONFIG.EXDVCID#
     10455**DCL     11384>>ASSIGN
CONFIG.STATUS#
     10455**DCL     11374>>DOCASE
CONNECT_TO_SLAVE
     12833**PROC    11797--CALL    11923--CALL    12432--CALL
COPY_ICM IN PROCEDURE GEROUT_ICM
     11720**PROC    11364--CALL
CRD30_IMAGE.FEPCNT IN PROCEDURE TOC$MME_COINIT
     10885**DCL     10908<<ASSIGN
CRD30_IMAGE.FLG IN PROCEDURE TOC$MME_COINIT
     10884**DCL     10909<<ASSIGN
DATA.LINE_ID IN PROCEDURE DISCONNECT_EXEC_LINE
     12006**DCL     12007--REDEF   12016>>DOWHILE
DATA.LINE_ID IN PROCEDURE DISCONNECT_TEST_LINE
     12114**DCL     12115--REDEF   12121>>DOWHILE
DATA.LFEP IN PROCEDURE GEROUT_COLTS_WAKEUP
     11902**DCL     11919>>ASSIGN  11920>>ASSIGN
DATA.TYPE_CODE IN PROCEDURE GEROUT_COLTS_WAKEUP
     11904**DCL     11921>>ASSIGN
DATA.LINE.TYPE IN PROCEDURE GEROUT_DISCONNECT
     11971**DCL     11980>>IF
DATA.LINE_ID IN PROCEDURE GEROUT_DISCONNECT
     11969**DCL     11970--REDEF
DATA.LINE_ID IN PROCEDURE GEROUT_STATUS_REQUEST
     12181**DCL     12194>>DOWHILE 12194>>DOWHILE
DATA.LINE_ID IN PROCEDURE GEROUT_TERMINAL_TYPE_REQUEST
     11848**DCL     11854>>DOWHILE 11854>>DOWHILE
DATA.TYPE IN PROCEDURE GEROUT_TERMINAL_TYPE_REQUEST
     11846**DCL     11861<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:307  
DATAWD.LNID IN PROCEDURE GEROUT_ICM
     11126**DCL     11146>>DOWHILE 11146>>DOWHILE 11214>>IF
DATAWD.RECP IN PROCEDURE GEROUT_ICM
     11124**DCL     11157>>ASSIGN  11164>>ASSIGN
DATA_WORD IN PROCEDURE DISCONNECT_EXEC_LINE
     12002**DCL     11998--PROC    12003--REDEF
DATA_WORD IN PROCEDURE DISCONNECT_TEST_LINE
     12110**DCL     12098--PROC    12111--REDEF
DATA_WORD IN PROCEDURE GEROUT_COLTS_WAKEUP
     11900**DCL     11897--PROC    11901--REDEF
DATA_WORD IN PROCEDURE GEROUT_DISCONNECT
     11965**DCL     11956--PROC    11966--REDEF   11981<>CALL    11982<>CALL
DATA_WORD IN PROCEDURE GEROUT_ICM
     11122**DCL     11119--PROC    11123--REDEF
DATA_WORD IN PROCEDURE GEROUT_STATUS_REQUEST
     12177**DCL     12173--PROC    12178--REDEF
DATA_WORD IN PROCEDURE GEROUT_TERMINAL_TYPE_REQUEST
     11844**DCL     11840--PROC    11845--REDEF
DCBERR IN PROCEDURE NEW_DCB
     11635**LABEL   11619--CALLALT
DCBX IN PROCEDURE NEW_DCB
     11585**DCL     11612<<ASSIGN  11614>>DOWHILE 11615>>IF      11616<<ASSIGN  11616>>ASSIGN  11618>>CALLBLT
     11620>>ASSIGN
DCB_IN_USE IN PROCEDURE ANYBODY_USING_THIS_DCB
     12565**DCL     12560--PROC    12570<<ASSIGN  12577<<ASSIGN
DCB_IN_USE IN PROCEDURE CLOSE_DCB_IF_UNUSED
     12650**DCL     12656<>CALL    12657>>IF
DCB_NAME IN PROCEDURE NEW_DCB
     11588**DCL     11605--DCLINIT
DCB_NAME.DCBX IN PROCEDURE NEW_DCB
     11591**DCL     11618<<CALLBLT
DCB_NUM IN PROCEDURE CLOSE_DCB
     12481**DCL     12477--PROC    12486>>ASSIGN  12489>>IF      12493<>CALL
DCB_NUM IN PROCEDURE NEW_DCB
     11587**DCL     11606--DCLINIT 11620>>ASSIGN  11621>>ASSIGN
DCB_NUM IN PROCEDURE RELEASE_DCB
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:308  
     12516**DCL     12514--PROC    12535>>ASSIGN  12538>>IF
DCB_NUM_FOUND IN PROCEDURE ASSIGN_DCB
     11537**DCL     11542<<ASSIGN  11543>>DOWHILE 11549<<ASSIGN  11554>>IF
DESIGNATOR.AD IN PROCEDURE TOC$MME_COINIT
     10881**DCL     10893>>ASSIGN  10906>>IF
DESIGNATOR.CODE IN PROCEDURE TOC$MME_COINIT
     10882**DCL     10894>>DOCASE
DESIGNATOR_OFFSET IN PROCEDURE TOC$MME_COINIT
     10871**DCL     10891<<DOINDEX 10892>>ASSIGN
DESP$ IN PROCEDURE TOC$MME_COINIT
     10877**DCL     10892<<ASSIGN  10893>>ASSIGN  10894>>DOCASE  10906>>IF
DISCONNECT_EXEC_LINE IN PROCEDURE GEROUT_DISCONNECT
     11998**PROC    11981--CALL
DISCONNECT_TEST_LINE IN PROCEDURE GEROUT_DISCONNECT
     12098**PROC    11982--CALL
DONT_CARE IN PROCEDURE INITIATE_HNDLR_WRAPUP
     12069**LABEL   12067--CALLALT
DUMMY_BUF IN PROCEDURE INITIATE_HNDLR_WRAPUP
     12062**DCL     12064--ASSIGN  12069--ASSIGN
ERROR IN PROCEDURE BUILD_CONFIG_ICM
     11398**LABEL   11372--CALLALT
ERROR IN PROCEDURE CHECK_CMD_AND_TEST_NUM
     11241**LABEL   11220--CALLALT
ERROR IN PROCEDURE CLOSE_DCB
     12497**LABEL   12487--CALLALT 12493--CALLALT
ERROR IN PROCEDURE RELEASE_DCB
     12544**LABEL   12536--CALLALT
F$DCB.ACTPOS
      8469**DCL      8469--REDEF
F$DCB.ARS
      8444**DCL      8444--REDEF
F$DCB.ATTR
      8462**DCL      8463--REDEF
F$DCB.BORROW
      8477**DCL      8477--REDEF    8477--REDEF    8477--REDEF
F$DCB.DCBNAME.L
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:309  
      8491**DCL      8491--IMP-SIZ
F$DCB.EOMCHAR
      8448**DCL      8448--REDEF
F$DCB.FLDID
      8472**DCL      8472--REDEF
F$DCB.FORM$
      8466**DCL      8466--REDEF
F$DCB.FSECT
      8482**DCL      8482--REDEF
F$DCB.FSN
      8459**DCL      8459--REDEF    8459--REDEF    8460--REDEF
F$DCB.HEADER$
      8465**DCL      8465--REDEF
F$DCB.IXTNSIZE
      8463**DCL      8463--REDEF
F$DCB.LASTSTA$
      8453**DCL      8453--REDEF
F$DCB.LVL
      8478**DCL      8478--REDEF
F$DCB.NAME.C
      8453**DCL      8453--REDEF
F$DCB.NOEOF
      8474**DCL      8474--REDEF
F$DCB.NRECS
      8464**DCL      8464--REDEF
F$DCB.NRECX
      8483**DCL      8483--REDEF
F$DCB.OHDR
      8475**DCL      8475--REDEF
F$DCB.ORG
      8458**DCL      8458--REDEF
F$DCB.PRECNO
      8481**DCL      8481--REDEF
F$DCB.RCSZ
      8486**DCL      8486--REDEF
F$DCB.RES
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:310  
      8454**DCL      8454--REDEF
F$DCB.SETX
      8466**DCL      8466--REDEF
F$DCB.TAB$
      8465**DCL      8466--REDEF
F$DCB.TDA
      8480**DCL      8480--REDEF
F$DCB.WSN
      8455**DCL      8455--REDEF
FEP
     10366**DCL     10940<<ASSIGN
FEP.BUS_ADDR
     10391**DCL     11388<<ASSIGN
FEP.CONFIG_ID
     10402**DCL     11383<<ASSIGN  11482>>IF
FEP.CONFIG_ID_EXT
     10403**DCL     11385<<ASSIGN
FEP.C_CALL$
     10405**DCL     11272<<ASSIGN  11394<>CALL    12139<<ASSIGN  12288>>IF      12289<>CALL    12307<>CALL
     12373<>CALL    12805>>IF      12806<>CALL
FEP.DCB_NUM
     10387**DCL     11556<<ASSIGN  11556>>ASSIGN  11621<<ASSIGN  11681>>ASSIGN  12025>>IF      12025>>IF
     12066>>ASSIGN  12070>>ASSIGN  12075<>CALL    12282>>ASSIGN  12357>>ASSIGN  12489>>IF      12572>>IF
     12572>>IF      12658<>CALL
FEP.DEVICE_TYPE
     10390**DCL     11445<<ASSIGN  11861>>ASSIGN  11921<<ASSIGN
FEP.EXEC_LINE.E
     10399**DCL     10944<<ASSIGN
FEP.EXEC_LINE.NUM
     10400**DCL     10945<<ASSIGN
FEP.EXEC_LINE_ID
     10397**DCL     10398--REDEF   11146>>DOWHILE 11854>>DOWHILE 12016>>DOWHILE 12194>>DOWHILE 12852>>ASSIGN
FEP.FEP_STATUS
     10367**DCL     10368--REDEF   11309<<ASSIGN  11917<<ASSIGN  12073<<ASSIGN  12144<<ASSIGN  12303<<ASSIGN
     12369<<ASSIGN  12460<<ASSIGN
FEP.ICM$
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:311  
     10407**DCL     11271<<ASSIGN  11366>>ASSIGN  11445>>ASSIGN  11729>>DOINDEX 11730>>ASSIGN  12134<<ASSIGN
     12280>>ASSIGN  12399>>DOCASE
FEP.ICM_BYTE_CNT
     10410**DCL     11167<<ASSIGN  12281>>ASSIGN  12358>>ASSIGN
FEP.LINE.NUM
     10395**DCL     10943<<ASSIGN
FEP.LINE.T
     10394**DCL     10942<<ASSIGN
FEP.LINE_ID
     10392**DCL     10393--REDEF   11146>>DOWHILE 11214>>IF      11854>>DOWHILE 12121>>DOWHILE 12194>>DOWHILE
     12860>>ASSIGN
FEP.LOGICAL_NUM
     10388**DCL     11312<<ASSIGN  11312>>ASSIGN  11547>>IF      11547>>IF      11919<<ASSIGN
FEP.NUM
     10389**DCL     11225>>DOUNTIL 11225>>DOUNTIL 11303>>IF      11303>>IF      11311<<ASSIGN  11311>>ASSIGN
     11369>>ASSIGN  11682>>ASSIGN  11920<<ASSIGN
FEP.RECEIVE_ICM$
     10408**DCL     11270<<ASSIGN  11365>>ASSIGN  11377>>ASSIGN  11378>>ASSIGN  11382>>ASSIGN  11387>>ASSIGN
     11388>>ASSIGN  11389>>ASSIGN  11730>>ASSIGN  12356>>ASSIGN  12367>>ASSIGN  12430>>IF      12692>>DOINDEX
     12693>>ASSIGN  12695>>ASSIGN
FEP.STATUS.ACTIVE
     10369**DCL     11219>>IF      11225>>DOUNTIL 11302>>DOWHILE 11310<<ASSIGN  11544>>IF      11862>>IF
     11912>>DOWHILE 11918<<ASSIGN  12022>>IF      12025>>IF      12030<<ASSIGN  12237>>IF      12283>>IF
     12572>>IF
FEP.STATUS.BUSY
     10378**DCL     12241>>IF      12285>>IF      12601<<ASSIGN  12625<<ASSIGN
FEP.STATUS.CONNECT_QUEUED
     10372**DCL     11792>>DOWHILE 12846<<ASSIGN  12855<<ASSIGN  12856<<ASSIGN  12863<<ASSIGN  12864<<ASSIGN
FEP.STATUS.DCB_OPEN
     10379**DCL     11225>>DOUNTIL 11557<<ASSIGN  11622<<ASSIGN  11676>>IF      11691<<ASSIGN  12022>>IF
     12025>>IF      12031<<ASSIGN  12283>>IF      12490<<ASSIGN  12572>>IF      12654>>IF
FEP.STATUS.DISCONNECTED
     10370**DCL     11862>>IF      12074<<ASSIGN  12145<<ASSIGN  12237>>IF      12304<<ASSIGN  12370<<ASSIGN
FEP.STATUS.DVCID_FOUND
     10380**DCL     11219>>IF      11303>>IF      11376<<ASSIGN  11390<<ASSIGN
FEP.STATUS.ECONN_WAITING
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:312  
     10375**DCL     11922<<ASSIGN  12849>>IF      12853<<ASSIGN  12862>>IF
FEP.STATUS.EXEC_CONNECTED
     10373**DCL     12851<<ASSIGN
FEP.STATUS.TCONN_WAITING
     10376**DCL     11544>>IF      11678<<ASSIGN  11690<<ASSIGN  12572>>IF      12854>>IF      12861<<ASSIGN
FEP.STATUS.TDISCONNECT_ISSUED
     10377**DCL     12138<<ASSIGN  12237>>IF      12458<<ASSIGN
FEP.STATUS.TEST_CONNECTED
     10371**DCL     11544>>IF      12132>>IF      12572>>IF      12859<<ASSIGN
FEP.STATUS$
     10406**DCL     11273<<ASSIGN  12135<<ASSIGN  12201<<ASSIGN  12240>>ASSIGN  12242>>ASSIGN  12243>>ASSIGN
     12287>>ASSIGN
FEP.TEST_TYPE
     10404**DCL     11493<<ASSIGN  11548>>IF
FEP_INDEX IN PROCEDURE ASSIGN_DCB
     11535**DCL     11531--PROC    11547>>IF      11556>>ASSIGN  11557>>ASSIGN  11559<>CALL
FEP_INDEX IN PROCEDURE NEW_DCB
     11584**DCL     11580--PROC    11621>>ASSIGN  11622>>ASSIGN
FIND_HANDLER IN PROCEDURE SETUP_TEST_CONNECT
     11470**PROC    11446--CALL
FOUND IN PROCEDURE SETUP_NEW_ENTRY
     11295**DCL     11300<<ASSIGN  11302>>DOWHILE 11304<<ASSIGN
FPTN_
     10360**DCL     10363--REDEF
GEROUT_COLTS_WAKEUP
     11897**PROC    11076--CALL
GEROUT_DISCONNECT
     11956**PROC    11078--CALL
GEROUT_ICM
     11119**PROC    11070--CALL
GEROUT_READ
     12348**PROC    11178--CALL    12140--CALL
GEROUT_REMOTE_INQUIRY
     11775**PROC    11072--CALL
GEROUT_STATUS IN PROCEDURE GEROUT_WRITE
     12276**DCL     12287<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:313  
GEROUT_STATUS IN PROCEDURE RETURN_GEROUT_STATUS
     12233**DCL     12240<<ASSIGN  12242<<ASSIGN  12243<<ASSIGN
GEROUT_STATUS_REQUEST
     12173**PROC    11080--CALL
GEROUT_TERMINAL_TYPE_REQUEST
     11840**PROC    11074--CALL
GEROUT_TYPE.CODE IN PROCEDURE TOC$MME_GEROUT
     11055**DCL     11068>>DOCASE
GEROUT_TYPE_WORD IN PROCEDURE TOC$MME_GEROUT
     11052**DCL     11043--PROC    11053--REDEF   11070<>CALL    11074<>CALL    11076<>CALL    11078<>CALL
     11080<>CALL
GEROUT_WORD IN PROCEDURE TOC$MME_GEROUT
     11063**DCL     11086>>ASSIGN  11088>>ASSIGN  11090>>ASSIGN  11092>>ASSIGN
GEROUT_WRITE
     12271**PROC    11176--CALL    12136--CALL
GET_COLTS_DCB IN PROCEDURE NEW_DCB
     11605**DCL     11619<>CALL
GET_COLTS_DCB.V IN PROCEDURE NEW_DCB
     11606**DCL     11605--DCLINIT
GET_CONFIG
     10471**DCL     11372<>CALL    12746<>CALL
GET_CONFIG.V
     10472**DCL     10471--DCLINIT
GET_CONFIG.V.CHANNEL#
     10472**DCL     11368<<ASSIGN  12744<<ASSIGN
GET_CONFIG.V.FEP#
     10472**DCL     11371<<ASSIGN  12745<<ASSIGN
GR5_VFD.LINE_ID IN PROCEDURE CONNECT_TO_SLAVE
     12840**DCL     12852<<ASSIGN  12860<<ASSIGN
HANDLER_FOUND IN PROCEDURE FIND_HANDLER
     11476**DCL     11480<<ASSIGN  11481>>DOWHILE 11483<<ASSIGN  11486>>IF
HEADER_REC.BUF_AD IN PROCEDURE GEROUT_ICM
     11134**DCL     11270>>ASSIGN
HNDLR_GONE IN PROCEDURE INITIATE_HNDLR_WRAPUP
     12073**LABEL   12071--CALLALT
I IN PROCEDURE ANYBODY_USING_THIS_DCB
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:314  
     12566**DCL     12571<<DOINDEX 12572>>IF      12572>>IF      12572>>IF      12572>>IF      12572>>IF
     12572>>IF
I IN PROCEDURE CALCULATE_CHECKSUM
     12684**DCL     12692<<DOINDEX 12693>>ASSIGN
I IN PROCEDURE CLOSE_DCB
     12482**DCL     12488<<DOINDEX 12489>>IF      12490>>ASSIGN
I IN PROCEDURE CONNECT_TO_SLAVE
     12836**DCL     12833--PROC    12846>>ASSIGN  12849>>IF      12851>>ASSIGN  12852>>ASSIGN  12853>>ASSIGN
     12854>>IF      12855>>ASSIGN  12856>>ASSIGN  12859>>ASSIGN  12860>>ASSIGN  12861>>ASSIGN  12862>>IF
     12863>>ASSIGN  12864>>ASSIGN
I IN PROCEDURE COPY_ICM
     11725**DCL     11729<<DOINDEX 11730>>ASSIGN  11730>>ASSIGN
I IN PROCEDURE DISCONNECT_EXEC_LINE
     12010**DCL     12015<<ASSIGN  12016>>DOWHILE 12016>>DOWHILE 12017<<ASSIGN  12017>>ASSIGN  12019>>IF
     12021<<DOINDEX 12022>>IF      12022>>IF      12025>>IF      12025>>IF      12034<>CALL
I IN PROCEDURE DISCONNECT_TEST_LINE
     12118**DCL     12120<<ASSIGN  12121>>DOWHILE 12121>>DOWHILE 12122<<ASSIGN  12122>>ASSIGN  12124>>IF
     12132>>IF      12134>>ASSIGN  12135>>ASSIGN  12136<>CALL    12138>>ASSIGN  12139>>ASSIGN  12140<>CALL
     12144>>ASSIGN  12145>>ASSIGN  12146<>CALL    12148<>CALL
I IN PROCEDURE FIND_HANDLER
     11475**DCL     11479<<ASSIGN  11481>>DOWHILE 11482>>IF      11484<<ASSIGN  11484>>ASSIGN  11492>>ASSIGN
     11493>>ASSIGN
I IN PROCEDURE GEROUT_COLTS_WAKEUP
     11906**DCL     11911<<ASSIGN  11912>>DOWHILE 11912>>DOWHILE 11913<<ASSIGN  11913>>ASSIGN  11915>>IF
     11917>>ASSIGN  11918>>ASSIGN  11919>>ASSIGN  11920>>ASSIGN  11921>>ASSIGN  11922>>ASSIGN  11923<>CALL
I IN PROCEDURE GEROUT_DISCONNECT
     11973**DCL     11977<<ASSIGN
I IN PROCEDURE GEROUT_ICM
     11131**DCL     11145<<ASSIGN  11146>>DOWHILE 11146>>DOWHILE 11146>>DOWHILE 11149<<ASSIGN  11149>>ASSIGN
     11152>>DOCASE  11165<>CALL    11166<>CALL    11167>>ASSIGN  11170<>CALL    11173<>CALL    11176<>CALL
     11178<>CALL
I IN PROCEDURE GEROUT_REMOTE_INQUIRY
     11778**DCL     11783<<ASSIGN  11792>>DOWHILE 11792>>DOWHILE 11793<<ASSIGN  11793>>ASSIGN  11795>>IF
     11797<>CALL
I IN PROCEDURE GEROUT_STATUS_REQUEST
     12186**DCL     12191<<ASSIGN  12194>>DOWHILE 12194>>DOWHILE 12194>>DOWHILE 12197<<ASSIGN  12197>>ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:315  
     12199>>IF      12201>>ASSIGN  12202<>CALL
I IN PROCEDURE GEROUT_TERMINAL_TYPE_REQUEST
     11849**DCL     11853<<ASSIGN  11854>>DOWHILE 11854>>DOWHILE 11854>>DOWHILE 11857<<ASSIGN  11857>>ASSIGN
     11859>>IF      11861>>ASSIGN  11862>>IF      11862>>IF
I IN PROCEDURE INIT_FOR_COLTS_ONLY
     10933**DCL     10941<<DOINDEX 10942>>ASSIGN  10943>>ASSIGN  10943>>ASSIGN  10944>>ASSIGN  10945>>ASSIGN
     10945>>ASSIGN  10946>>ASSIGN  10947>>ASSIGN
I IN PROCEDURE RELEASE_DCB
     12517**DCL     12537<<DOINDEX 12538>>IF      12539>>ASSIGN
I IN PROCEDURE SETUP_NEW_ENTRY
     11294**DCL     11301<<ASSIGN  11302>>DOWHILE 11302>>DOWHILE 11303>>IF      11303>>IF      11305<<ASSIGN
     11305>>ASSIGN  11307>>IF      11309>>ASSIGN  11310>>ASSIGN  11311>>ASSIGN  11312>>ASSIGN  11313>>ASSIGN
I IN PROCEDURE TOC$GEROUT_READ_COMPLETION
     12796**DCL     12793--PROC    12800>>IF      12802<>CALL    12803<>CALL    12804<>CALL    12805>>IF
     12806>>CALL
I IN PROCEDURE TOC$MME_LOGFEP
     12739**DCL     12751<<ASSIGN  12752>>DOWHILE 12752>>DOWHILE 12753<<ASSIGN  12753>>ASSIGN  12755>>IF
     12756>>ASSIGN  12758<<ASSIGN  12759>>DOWHILE 12759>>DOWHILE 12760<<ASSIGN  12760>>ASSIGN  12762>>IF
     12764>>ASSIGN  12765>>ASSIGN
ICM
     10412**DCL     12280--ASSIGN  12356--ASSIGN  12367<<ASSIGN
ICM.CKSM
     10416**DCL     12695<<ASSIGN
ICM.CMD
     10419**DCL     11213>>ASSIGN  12399>>DOCASE
ICM.CONFIG_ID
     10422**DCL     10423--REDEF   11377<<ASSIGN  11382<<ASSIGN
ICM.CONFIG_ID_EXT
     10426**DCL     10427--REDEF   11387<<ASSIGN
ICM.FLAGS
     10431**DCL     11378<<ASSIGN  11389<<ASSIGN
ICM.L6MBA
     10421**DCL     11366>>ASSIGN  11388>>ASSIGN
ICM.REPLY
     10420**DCL     11365<<ASSIGN  12430>>IF
ICM.TYC
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:316  
     10433**DCL     11445>>ASSIGN
ICM.WDCNT
     10418**DCL     11729>>DOINDEX 12692>>DOINDEX
ICM$ IN PROCEDURE CHECK_CMD_AND_TEST_NUM
     11206**DCL     11204--PROC    11213>>ASSIGN
ICM$ IN PROCEDURE GEROUT_ICM
     11139**DCL     11164<<ASSIGN  11165<>CALL    11271>>ASSIGN
ICM_BUFFER
     10411**DCL     11730<<ASSIGN  11730>>ASSIGN
ICM_DATA IN PROCEDURE CALCULATE_CHECKSUM
     12687**DCL     12693>>ASSIGN
INITIATE_HNDLR_WRAPUP IN PROCEDURE GEROUT_DISCONNECT
     12059**PROC    12034--CALL
INIT_FOR_COLTS_ONLY IN PROCEDURE TOC$MME_COINIT
     10931**PROC    10890--CALL
IS$
     10363**DCL     10893>>ASSIGN  11157>>ASSIGN  11164>>ASSIGN  11270>>ASSIGN  11272>>ASSIGN  11273>>ASSIGN
     12134>>ASSIGN  12135>>ASSIGN  12201>>ASSIGN
J IN PROCEDURE CHECK_CMD_AND_TEST_NUM
     11209**DCL     11224<<ASSIGN  11225>>DOUNTIL 11225>>DOUNTIL 11225>>DOUNTIL 11225>>DOUNTIL 11229<<ASSIGN
     11229>>ASSIGN  11231>>ASSIGN
J IN PROCEDURE DISCONNECT_EXEC_LINE
     12011**DCL     12024<<DOINDEX 12025>>IF      12025>>IF      12025>>IF      12025>>IF      12030>>ASSIGN
     12031>>ASSIGN
J IN PROCEDURE SETUP_TEST_CONNECT
     11441**DCL     11446<>CALL    11447<>CALL    11448<>CALL
K IN PROCEDURE ASSIGN_DCB
     11536**DCL     11541<<ASSIGN  11543>>DOWHILE 11544>>IF      11544>>IF      11544>>IF      11547>>IF
     11548>>IF      11550<<ASSIGN  11550>>ASSIGN  11551<<ASSIGN  11551>>ASSIGN  11552<<ASSIGN  11552>>ASSIGN
     11556>>ASSIGN
LIST.LENGTH IN PROCEDURE TOC$MME_COINIT
     10869**DCL     10891>>DOINDEX 10916>>ASSIGN
LIST_COUNT IN PROCEDURE TOC$MME_COINIT
     10867**DCL     10864--PROC    10868--REDEF
LOGICAL_FEP_NUM IN PROCEDURE TOC$MME_LOGFEP
     12738**DCL     12730--PROC    12748<<ASSIGN  12756<<ASSIGN  12764<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:317  
M$CLOSE
      7831**DCL-ENT 12487--CALL
M$CONFIG
      7861**DCL-ENT 11372--CALL    12746--CALL
M$GETDCB
      7837**DCL-ENT 11619--CALL
M$OPEN
      7831**DCL-ENT 11688--CALL
M$READ
      7832**DCL-ENT 12071--CALL    12359--CALL
M$RELDCB
      7837**DCL-ENT 12536--CALL
M$WRITE
      7832**DCL-ENT 12067--CALL    12294--CALL
MME
     10249**DCL        71--PROC
MME.INST.NO
     10252**DCL     10808>>IF      10816>>DOCASE
MME.INSTR
     10250**DCL     10251--REDEF
MME.WD_1
     10254**DCL     10809<>CALL    10818<>CALL    10822<>CALL
MME.WD_2
     10255**DCL     10809<>CALL    10822<>CALL
MME.WD_3
     10256**DCL     10809<>CALL
MME.WD_4
     10257**DCL     10809<>CALL
MME.WD_5
     10258**DCL     10809<>CALL
MME.WD_6
     10259**DCL     10809<>CALL
MME_INSTR$
     10284**DCL        71--PROC    10892>>ASSIGN  11085>>ASSIGN  11791>>ASSIGN
MME_WD_2 IN PROCEDURE TOC$MME_GEROUT
     11057**DCL     11043--PROC    11070<>CALL    11078<>CALL    11080<>CALL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:318  
MME_WD_3 IN PROCEDURE TOC$MME_GEROUT
     11058**DCL     11043--PROC    11086<<ASSIGN
MME_WD_4 IN PROCEDURE TOC$MME_GEROUT
     11059**DCL     11043--PROC    11088<<ASSIGN
MME_WD_5 IN PROCEDURE TOC$MME_GEROUT
     11060**DCL     11043--PROC    11090<<ASSIGN
MME_WD_6 IN PROCEDURE TOC$MME_GEROUT
     11061**DCL     11043--PROC    11092<<ASSIGN
MREG
     10270**DCL        71--PROC
MREG.A
     10279**DCL     10809<>CALL
MREG.X2
     10273**DCL     10820<>CALL
MREG_A IN PROCEDURE TOC$MME_GEROUT
     11062**DCL     11043--PROC    11078<>CALL
NEW_DCB IN PROCEDURE ASSIGN_DCB
     11580**PROC    11559--CALL
NODE.NUM IN PROCEDURE TOC$MME_LOGFEP
     12737**DCL     12745>>ASSIGN  12752>>DOWHILE 12765>>ASSIGN
NODE_ID IN PROCEDURE TOC$MME_LOGFEP
     12734**DCL     12730--PROC    12735--REDEF
NO_DCB_OBTAINED IN PROCEDURE NEW_DCB
     11586**DCL     11613<<ASSIGN  11614>>DOWHILE 11623<<ASSIGN  11627>>IF
OPEN_DCB IN PROCEDURE SETUP_TEST_CONNECT
     11662**PROC    11448--CALL
OPEN_HNDLR_PATH
     10544**DCL     11688<>CALL
OPEN_HNDLR_PATH.ACSVEH_
     10546**DCL     10547--REDEF
OPEN_HNDLR_PATH.ALTKEYS_
     10552**DCL     10553--REDEF   10553--REDEF
OPEN_HNDLR_PATH.HDR_
     10551**DCL     10552--REDEF
OPEN_HNDLR_PATH.TAB_
     10550**DCL     10551--REDEF
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:319  
OPEN_HNDLR_PATH.UHL_
     10544**DCL     10545--REDEF   10545--REDEF
OPEN_HNDLR_PATH.V
     10553**DCL     10544--DCLINIT
OPEN_HNDLR_PATH.V.DCB#
     10553**DCL     11681<<ASSIGN
OPEN_HNDLR_PATH.V.FSN#
     10584**DCL     10584--REDEF   10584--REDEF
OPEN_HNDLR_PATH.V.RES#
     10568**DCL     11685<<CALLBLT
OPEN_HNDLR_PATH.WSN_
     10550**DCL     10550--REDEF
PHY_FEP_NUM
     10442**DCL     10947<<ASSIGN  10990>>IF      11920>>ASSIGN  12752>>DOWHILE 12759>>DOWHILE 12765<<ASSIGN
POINTER_WORD IN PROCEDURE GEROUT_ICM
     11127**DCL     11119--PROC    11128--REDEF
PTRS IN PROCEDURE GEROUT_STATUS_REQUEST
     12182**DCL     12173--PROC    12183--REDEF
PTRS$.ST IN PROCEDURE DISCONNECT_TEST_LINE
     12104**DCL     12135>>ASSIGN
PTRS$.CC IN PROCEDURE GEROUT_DISCONNECT
     11963**DCL     11979<<ASSIGN
PTRWD.CC IN PROCEDURE GEROUT_ICM
     11130**DCL     11272>>ASSIGN
PTRWD.ST IN PROCEDURE GEROUT_ICM
     11129**DCL     11273>>ASSIGN
PTRWD.STATUS IN PROCEDURE GEROUT_STATUS_REQUEST
     12184**DCL     12192>>IF      12201>>ASSIGN
PTR_WORD IN PROCEDURE DISCONNECT_TEST_LINE
     12102**DCL     12098--PROC    12103--REDEF
PTR_WORD IN PROCEDURE GEROUT_DISCONNECT
     11960**DCL     11956--PROC    11961--REDEF   11982<>CALL
READ_FROM_FEP
     10701**DCL     12071<>CALL    12359<>CALL
READ_FROM_FEP.BUF_
     10703**DCL     12069<<ASSIGN  12356<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:320  
READ_FROM_FEP.BUF_.BOUND
     10703**DCL     12358<<ASSIGN
READ_FROM_FEP.STATION_
     10704**DCL     10705--REDEF
READ_FROM_FEP.V
     10705**DCL     10701--DCLINIT
READ_FROM_FEP.V.DCB#
     10705**DCL     12070<<ASSIGN  12357<<ASSIGN
READ_FROM_FEP.V.DVBYTE.REREAD#
     10716**DCL     10716--REDEF
READ_FROM_FEP.V.INDX#
     10714**DCL     10714--REDEF
REC.AD IN PROCEDURE DISCONNECT_TEST_LINE
     12108**DCL     12126>>IF      12134>>ASSIGN
REC$ IN PROCEDURE GEROUT_ICM
     11135**DCL     11157<<ASSIGN  11158>>IF      11167>>ASSIGN  11270>>ASSIGN
RECORD.RCVP IN PROCEDURE GEROUT_ICM
     11138**DCL     11158>>IF
RECORD.WORD_COUNT IN PROCEDURE GEROUT_ICM
     11137**DCL     11167>>ASSIGN
REC_WORD IN PROCEDURE DISCONNECT_TEST_LINE
     12106**DCL     12098--PROC    12107--REDEF
REC_WORD IN PROCEDURE GEROUT_DISCONNECT
     11964**DCL     11956--PROC    11982<>CALL
RELEASE_DCB
     12514**PROC    12493--CALL
REL_COLTS_DCB IN PROCEDURE RELEASE_DCB
     12529**DCL     12536<>CALL
REL_COLTS_DCB.V IN PROCEDURE RELEASE_DCB
     12529**DCL     12529--DCLINIT
REL_COLTS_DCB.V.DCB# IN PROCEDURE RELEASE_DCB
     12529**DCL     12535<<ASSIGN
RESTORE$ IN PROCEDURE TOC$MME_GEROUT
     11064**DCL     11085<<ASSIGN  11086>>ASSIGN  11087<<ASSIGN  11087>>ASSIGN  11088>>ASSIGN  11089<<ASSIGN
     11089>>ASSIGN  11090>>ASSIGN  11091<<ASSIGN  11091>>ASSIGN  11092>>ASSIGN
RETURN_DELTA
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:321  
     10287**DCL        71--PROC    10916<<ASSIGN  10989<<ASSIGN  11144<<ASSIGN  11782<<ASSIGN  11863<<ASSIGN
     11864<<ASSIGN  11867<<ASSIGN  11910<<ASSIGN  11978<<ASSIGN  12190<<ASSIGN  12743<<ASSIGN
RETURN_GEROUT_STATUS
     12228**PROC    11393--CALL    12148--CALL    12202--CALL    12306--CALL    12372--CALL    12804--CALL
SETUP_NEW_ENTRY IN PROCEDURE GEROUT_ICM
     11291**PROC    11220--CALL
SETUP_TEST_CONNECT IN PROCEDURE GEROUT_ICM
     11428**PROC    11173--CALL
SET_POINTERS IN PROCEDURE GEROUT_ICM
     11264**PROC    11166--CALL
SLAVE_CONNECT
     10435**DCL     10939<<ASSIGN
SLAVE_CONNECT.PTR$
     10436**DCL     11791<<ASSIGN  12852>>ASSIGN  12860>>ASSIGN
SLAVE_CONNECT.STATUS.PENDING
     10439**DCL     11784>>IF      11790<<ASSIGN  12844>>IF      12866<<ASSIGN
START_HNDLR
     10599**DCL     10552--DCLINIT
START_HNDLR.NAME.C#
     10605**DCL     11686<<ASSIGN
START_HNDLR.NAME.L#
     10604**DCL     11687<<ASSIGN
TARGET IN PROCEDURE TOC$MME_COINIT
     10872**DCL     10896<<ASSIGN  10904<<ASSIGN
TARGET_BIT IN PROCEDURE TOC$MME_COINIT
     10875**DCL     10902<<ASSIGN
TARGET_HALF IN PROCEDURE TOC$MME_COINIT
     10873**DCL     10898<<ASSIGN
TEST_CONNECT IN PROCEDURE CHECK_READ
     12422**PROC    12401--CALL
TEST_DISCONNECT IN PROCEDURE CHECK_READ
     12450**PROC    12403--CALL
TEST_NUM IN PROCEDURE ANYBODY_USING_THIS_DCB
     12564**DCL     12560--PROC    12572>>IF      12572>>IF
TEST_NUM IN PROCEDURE BUILD_CONFIG_ICM
     11355**DCL     11350--PROC    11364<>CALL    11365>>ASSIGN  11366>>ASSIGN  11369>>ASSIGN  11376>>ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:322  
     11377>>ASSIGN  11378>>ASSIGN  11382>>ASSIGN  11383>>ASSIGN  11385>>ASSIGN  11387>>ASSIGN  11388>>ASSIGN
     11388>>ASSIGN  11389>>ASSIGN  11390>>ASSIGN  11392<>CALL    11393<>CALL    11394>>CALL
TEST_NUM IN PROCEDURE BUSY_THIS_TEST
     12597**DCL     12593--PROC    12601>>ASSIGN
TEST_NUM IN PROCEDURE CALCULATE_CHECKSUM
     12683**DCL     12679--PROC    12692>>DOINDEX 12693>>ASSIGN  12695>>ASSIGN
TEST_NUM IN PROCEDURE CHECK_CMD_AND_TEST_NUM
     11208**DCL     11204--PROC    11214>>IF      11219>>IF      11219>>IF      11220<>CALL    11225>>DOUNTIL
     11231<<ASSIGN  11232>>IF
TEST_NUM IN PROCEDURE CHECK_READ
     12395**DCL     12391--PROC    12399>>DOCASE  12401<>CALL    12403<>CALL
TEST_NUM IN PROCEDURE CLOSE_DCB_IF_UNUSED
     12649**DCL     12645--PROC    12654>>IF      12656<>CALL    12658>>CALL
TEST_NUM IN PROCEDURE COPY_ICM
     11724**DCL     11720--PROC    11729>>DOINDEX 11730>>ASSIGN  11730>>ASSIGN
TEST_NUM IN PROCEDURE FIND_HANDLER
     11474**DCL     11470--PROC    11482>>IF      11493>>ASSIGN
TEST_NUM IN PROCEDURE GEROUT_READ
     12352**DCL     12348--PROC    12356>>ASSIGN  12357>>ASSIGN  12358>>ASSIGN  12361<>CALL    12367>>ASSIGN
     12368<>CALL    12369>>ASSIGN  12370>>ASSIGN  12371<>CALL    12372<>CALL    12373>>CALL
TEST_NUM IN PROCEDURE GEROUT_WRITE
     12275**DCL     12271--PROC    12280>>ASSIGN  12281>>ASSIGN  12282>>ASSIGN  12283>>IF      12283>>IF
     12285>>IF      12287>>ASSIGN  12288>>IF      12289>>CALL    12296<>CALL    12303>>ASSIGN  12304>>ASSIGN
     12305<>CALL    12306<>CALL    12307>>CALL
TEST_NUM IN PROCEDURE INITIATE_HNDLR_WRAPUP
     12061**DCL     12059--PROC    12066>>ASSIGN  12070>>ASSIGN  12073>>ASSIGN  12074>>ASSIGN  12075>>CALL
TEST_NUM IN PROCEDURE OPEN_DCB
     11667**DCL     11662--PROC    11676>>IF      11678>>ASSIGN  11681>>ASSIGN  11682>>ASSIGN  11690>>ASSIGN
     11691>>ASSIGN
TEST_NUM IN PROCEDURE RETURN_GEROUT_STATUS
     12232**DCL     12228--PROC    12237>>IF      12237>>IF      12237>>IF      12240>>ASSIGN  12241>>IF
     12242>>ASSIGN  12243>>ASSIGN
TEST_NUM IN PROCEDURE SETUP_NEW_ENTRY
     11293**DCL     11291--PROC    11303>>IF      11311>>ASSIGN  11312>>ASSIGN  11313<<ASSIGN
TEST_NUM IN PROCEDURE SETUP_TEST_CONNECT
     11431**DCL     11428--PROC    11445>>ASSIGN  11445>>ASSIGN  11446<>CALL    11447<>CALL    11448<>CALL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:323  
TEST_NUM IN PROCEDURE SET_POINTERS
     11266**DCL     11264--PROC    11270>>ASSIGN  11271>>ASSIGN  11272>>ASSIGN  11273>>ASSIGN
TEST_NUM IN PROCEDURE TEST_CONNECT
     12426**DCL     12422--PROC    12430>>IF      12432<>CALL
TEST_NUM IN PROCEDURE TEST_DISCONNECT
     12454**DCL     12450--PROC    12458>>ASSIGN  12459<>CALL    12460>>ASSIGN
TEST_NUM IN PROCEDURE UNBUSY_THIS_TEST
     12621**DCL     12617--PROC    12625>>ASSIGN
TEST_XREF.CONFIG_ID IN PROCEDURE SETUP_TEST_CONNECT
     11433**DCL     11482>>IF
TEST_XREF.HANDLER_NAME IN PROCEDURE SETUP_TEST_CONNECT
     11439**DCL     11686>>ASSIGN
TEST_XREF.NAME_LENGTH IN PROCEDURE SETUP_TEST_CONNECT
     11438**DCL     11687>>ASSIGN
TEST_XREF.TEST_TYPE IN PROCEDURE SETUP_TEST_CONNECT
     11437**DCL     11493>>ASSIGN  11548>>IF
TEST_XREF_ENTRY_NUM IN PROCEDURE FIND_HANDLER
     11473**DCL     11470--PROC    11492<<ASSIGN
TOC$GEROUT_READ_COMPLETION
     12793**PROC    12361--CALL
TOC$MME_COINIT
     10864**PROC    10818--CALL
TOC$MME_FEPTYP
     10981**PROC    10820--CALL
TOC$MME_GEROUT
     11043**PROC    10809--CALL
TOC$MME_LOGFEP
     12730**PROC    10822--CALL
TOC_ERROR_CODE
     10318**DCL     10913<>CALL    11083<>CALL    11155<>CALL    11161<>CALL    11242<>CALL    11399<>CALL
     11489<>CALL    11630<>CALL    11697<>CALL    11787<>CALL    11927<>CALL    12129<>CALL    12206<>CALL
     12302<>CALL    12315<>CALL    12769<>CALL    12811<>CALL
TOC_ERROR_CODE.ERR#
     10348**DCL     10912<<ASSIGN  11082<<ASSIGN  11154<<ASSIGN  11160<<ASSIGN  11241<<ASSIGN  11398<<ASSIGN
     11488<<ASSIGN  11629<<ASSIGN  11696<<ASSIGN  11786<<ASSIGN  11926<<ASSIGN  12128<<ASSIGN  12205<<ASSIGN
     12301<<ASSIGN  12314<<ASSIGN  12768<<ASSIGN  12810<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:324  
TOK$COURTESY_CALL
     10801**DCL-ENT 11394--CALL    12289--CALL    12307--CALL    12373--CALL    12806--CALL
TOT$ECP.SUBEXEC.CURRENT
     10758**DCL     10937>>IF
TOT$ECP.SUBEXEC.WRAPUP$
     10766**DCL     10900<<ASSIGN
TOT$ECP.TEST_REQ
     10738**DCL     10740--REDEF
TOT$TOLTS.LINK_DATE.BCD
     10789**DCL     10902>>ASSIGN
TOX$ERROR
     10802**DCL-ENT 10913--CALL    11083--CALL    11155--CALL    11161--CALL    11399--CALL    11489--CALL
     11635--CALL    11697--CALL    11787--CALL    11927--CALL    12129--CALL    12206--CALL    12315--CALL
     12497--CALL    12769--CALL
TOX$SCREECH
     10804**DCL-ENT 11242--CALL    11630--CALL    12811--CALL
TOX$WARN
     10803**DCL-ENT 11695--CALL    12300--CALL    12302--CALL    12366--CALL
UNBUSY_THIS_TEST
     12617**PROC    12368--CALL    12802--CALL
WORK IN PROCEDURE BUILD_CONFIG_ICM
     11356**DCL     11357--REDEF   11366<<ASSIGN  11368>>ASSIGN  11369<<ASSIGN  11371>>ASSIGN  11380<<ASSIGN
     11382>>ASSIGN  11383>>ASSIGN  11384<<ASSIGN  11387>>ASSIGN
WORK IN PROCEDURE OPEN_DCB
     11668**DCL     11669--REDEF   11682<<ASSIGN  11684>>CALLBLT
WORK_ASC IN PROCEDURE OPEN_DCB
     11672**DCL     11684<<CALLBLT 11685>>CALLBLT
WPNTR$ IN PROCEDURE TOC$MME_COINIT
     10878**DCL     10893<<ASSIGN  10896>>ASSIGN  10898>>ASSIGN  10900>>ASSIGN  10902>>ASSIGN  10904>>ASSIGN
     10908>>ASSIGN  10909>>ASSIGN
WRITE_TO_FEP
     10670**DCL     12067<>CALL    12294<>CALL
WRITE_TO_FEP.BUF_
     10670**DCL     12064<<ASSIGN  12280<<ASSIGN
WRITE_TO_FEP.BUF_.BOUND
     10670**DCL     12065<<ASSIGN  12281<<ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:325  
WRITE_TO_FEP.STATION_
     10672**DCL     10672--REDEF
WRITE_TO_FEP.V
     10673**DCL     10670--DCLINIT
WRITE_TO_FEP.V.DCB#
     10673**DCL     12066<<ASSIGN  12282<<ASSIGN
WRITE_TO_FEP.V.DVBYTE.VFC#
     10679**DCL     10679--REDEF
WRK.UPPER IN PROCEDURE BUILD_CONFIG_ICM
     11358**DCL     11367<<ASSIGN  11367>>ASSIGN  11370<<ASSIGN  11370>>ASSIGN  11381<<ASSIGN  11381>>ASSIGN
     11385>>ASSIGN  11386<<ASSIGN  11386>>ASSIGN
WRK.UPPER IN PROCEDURE OPEN_DCB
     11670**DCL     11683<<ASSIGN  11683>>ASSIGN
W_CKSM IN PROCEDURE CALCULATE_CHECKSUM
     12685**DCL     12686--REDEF   12693<<ASSIGN  12693>>ASSIGN
X2 IN PROCEDURE TOC$MME_FEPTYP
     10985**DCL     10981--PROC    10990>>IF      10990>>IF      10991<<ASSIGN  10992<<ASSIGN
XREF_INDEX IN PROCEDURE ASSIGN_DCB
     11534**DCL     11531--PROC    11548>>IF
XREF_INX IN PROCEDURE OPEN_DCB
     11666**DCL     11662--PROC    11686>>ASSIGN  11687>>ASSIGN
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:326  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:327  
              FULL UREF LISTING

B$ALT
     10294**DCL
B$ALT.BRKCNT
     10295**DCL
B$ALT.DCB#
     10295**DCL
B$ALT.ERR.CODE
     10296**DCL
B$ALT.ERR.FCG
     10296**DCL
B$ALT.ERR.MID
     10296**DCL
B$ALT.ERR.MON
     10296**DCL
B$ALT.ERR.SEV
     10296**DCL
B$ALT.EVSC
     10295**DCL
B$ALT.FPT
     10294**DCL
B$ALT.FPT.FCG
     10294**DCL
B$ALT.FPT.PMME
     10294**DCL
B$ALT.P#
     10298**DCL
B$ALT.SSFRAME
     10294**DCL
B$ALT.SUBC
     10295**DCL
B$JIT
       397**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:328  
B$JIT.ACCEPT_FLAGS
       550**DCL
B$JIT.ACCEPT_FLAGS.ANNOUNCE
       550**DCL
B$JIT.ACCEPT_FLAGS.BROADCAST
       550**DCL
B$JIT.ACCEPT_FLAGS.SEND
       550**DCL
B$JIT.ACCESS
       670**DCL
B$JIT.ACCESS.FORMS
       670**DCL
B$JIT.ACCESS.PACKS
       670**DCL
B$JIT.ACCESS.TAPES
       670**DCL
B$JIT.ACCN
       402**DCL
B$JIT.APATTR
       675**DCL
B$JIT.ARECX
       670**DCL
B$JIT.BILL
       550**DCL
B$JIT.BLINDACCTNG
       550**DCL
B$JIT.BUDLIM
       539**DCL
B$JIT.CALCNT
       576**DCL
B$JIT.CCARS
       490**DCL
B$JIT.CCBUF
       490**DCL
B$JIT.CCDISP
       490**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:329  
B$JIT.CHECK_CFU
       572**DCL
B$JIT.CLRES
       669**DCL
B$JIT.CPFLAGS1
       491**DCL
B$JIT.CPFLAGS1.BRK
       495**DCL
B$JIT.CPFLAGS1.BUFFULL
       495**DCL
B$JIT.CPFLAGS1.CFREAD
       495**DCL
B$JIT.CPFLAGS1.DELTA
       496**DCL
B$JIT.CPFLAGS1.DONTRFEXT3
       492**DCL
B$JIT.CPFLAGS1.DRIBBLE
       494**DCL
B$JIT.CPFLAGS1.ECHO
       495**DCL
B$JIT.CPFLAGS1.ECHO_LINK
       492**DCL
B$JIT.CPFLAGS1.EXIT#
       494**DCL
B$JIT.CPFLAGS1.FIRSTCP
       493**DCL
B$JIT.CPFLAGS1.INITIALIZE
       494**DCL
B$JIT.CPFLAGS1.JSTEP
       491**DCL
B$JIT.CPFLAGS1.KEEPDS
       494**DCL
B$JIT.CPFLAGS1.LASTCP
       493**DCL
B$JIT.CPFLAGS1.LASTCPEXISTS
       493**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:330  
B$JIT.CPFLAGS1.LNKPMME
       492**DCL
B$JIT.CPFLAGS1.LOGOFF
       491**DCL
B$JIT.CPFLAGS1.NOTIFY
       494**DCL
B$JIT.CPFLAGS1.PROCACCT
       494**DCL
B$JIT.CPFLAGS1.PROTECT
       495**DCL
B$JIT.CPFLAGS1.RUND
       491**DCL
B$JIT.CPFLAGS1.SCREECH
       495**DCL
B$JIT.CPFLAGS1.SKIPABORT
       494**DCL
B$JIT.CPFLAGS1.SOMENOTIFY
       493**DCL
B$JIT.CPFLAGS1.SSTART
       492**DCL
B$JIT.CPFLAGS1.STARPROC
       493**DCL
B$JIT.CPFLAGS1.STARSACC
       493**DCL
B$JIT.CPFLAGS1.STEPACCT
       495**DCL
B$JIT.CPFLAGS1.STEPLMT
       495**DCL
B$JIT.CPFLAGS1.TESTMODE
       493**DCL
B$JIT.CPFLAGS1.TRMNATE
       494**DCL
B$JIT.CPFLAGS1.WHEN_INPUT
       492**DCL
B$JIT.CPFLAGS1.YC
       491**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:331  
B$JIT.CPFLAGS1.YCGET
       492**DCL
B$JIT.CPFLAGS1.YCPMME
       492**DCL
B$JIT.CSLEV
       557**DCL
B$JIT.CTIME
       575**DCL
B$JIT.CURPNUM
       656**DCL
B$JIT.CURRCORE
       564**DCL
B$JIT.CURSUDO
       671**DCL
B$JIT.CURTMPDP
       571**DCL
B$JIT.DCB$
       570**DCL
B$JIT.DCBNO
       483**DCL
B$JIT.DDLL
       560**DCL
B$JIT.DDUL
       560**DCL
B$JIT.DEFEXP
       570**DCL
B$JIT.DEFPRI
       550**DCL
B$JIT.DLL
       560**DCL
B$JIT.DO$
       570**DCL
B$JIT.DUL
       560**DCL
B$JIT.ENQS
       675**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:332  
B$JIT.ERR
       402**DCL
B$JIT.ERR.CODE
       403**DCL
B$JIT.ERR.FCG
       402**DCL
B$JIT.ERR.MON
       403**DCL
B$JIT.ERR.SEV
       403**DCL
B$JIT.ERR.UMID
       403**DCL
B$JIT.EUP
       562**DCL
B$JIT.EXTUS
       578**DCL
B$JIT.FACCN
       402**DCL
B$JIT.FACNACS
       570**DCL
B$JIT.FACNCM
       572**DCL
B$JIT.FBUC
       562**DCL
B$JIT.FBUL
       562**DCL
B$JIT.FEXT
       570**DCL
B$JIT.FPSN
       483**DCL
B$JIT.FRS
       598**DCL
B$JIT.GAC
       571**DCL
B$JIT.HIGHPNUM
       656**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:333  
B$JIT.HPSN
       570**DCL
B$JIT.IDELTAT
       576**DCL
B$JIT.INSTWORD
       490**DCL
B$JIT.INTER
       669**DCL
B$JIT.INTTIME
       575**DCL
B$JIT.JOBNAME
       551**DCL
B$JIT.JOBUNIT
       491**DCL
B$JIT.JORG
       538**DCL
B$JIT.JPEAK
       564**DCL
B$JIT.JSLEV
       539**DCL
B$JIT.JTMPDPPK
       571**DCL
B$JIT.JUNK
       602**DCL
B$JIT.JUNK2
       656**DCL
B$JIT.LANG
       538**DCL
B$JIT.LBJID
       578**DCL
B$JIT.LLL
       566**DCL
B$JIT.LNKCNT
       602**DCL
B$JIT.LOCK
       551**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:334  
B$JIT.LOGONTIME
       539**DCL
B$JIT.LUL
       566**DCL
B$JIT.MAXCORE
       563**DCL
B$JIT.MAXENQ
       675**DCL
B$JIT.MAXEXP
       570**DCL
B$JIT.MAXPRI
       550**DCL
B$JIT.MAXTMPDP
       571**DCL
B$JIT.MMFLGS
       563**DCL
B$JIT.MMFLGS.FREE_PPGS
       563**DCL
B$JIT.MODE
       397**DCL
B$JIT.MOUNTS
       670**DCL
B$JIT.MRT
       576**DCL
B$JIT.MSGID
       551**DCL
B$JIT.MSGID.PRIMARY
       551**DCL
B$JIT.MSGID.XT
       552**DCL
B$JIT.NEXTCC
       544**DCL
B$JIT.NODOEVER
       669**DCL
B$JIT.NOLOEVER
       669**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:335  
B$JIT.NOPOEVER
       669**DCL
B$JIT.NUTS
       577**DCL
B$JIT.OLTA
       670**DCL
B$JIT.ORIGINATOR_MODE
       669**DCL
B$JIT.ORIGINATOR_PORT
       672**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.DEVICE
       673**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.TNAME
       673**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST
       673**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST.SYSID
       673**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT
       674**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.SYSID
       674**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.TSLINE
       674**DCL
B$JIT.OUTPRIO
       483**DCL
B$JIT.PCADS
       566**DCL
B$JIT.PCC
       561**DCL
B$JIT.PCD
       561**DCL
B$JIT.PCDD
       562**DCL
B$JIT.PCDDS
       565**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:336  
B$JIT.PCDS
       561**DCL
B$JIT.PCL
       566**DCL
B$JIT.PCP
       561**DCL
B$JIT.PCROS
       561**DCL
B$JIT.PCV
       566**DCL
B$JIT.PLL
       560**DCL
B$JIT.PMEMTIM
       576**DCL
B$JIT.PMME_COUNT
       674**DCL
B$JIT.PMME_DATA
       674**DCL
B$JIT.PMME_DATA.CPU
       674**DCL
B$JIT.PMME_DATA.I_O
       674**DCL
B$JIT.PMME_DATA.MISC1
       674**DCL
B$JIT.PMME_DATA.MISC2
       675**DCL
B$JIT.PPC
       563**DCL
B$JIT.PPRIV
       458**DCL
B$JIT.PPRIV.CNTRLC
       458**DCL
B$JIT.PPRIV.CNTRLD
       458**DCL
B$JIT.PPRIV.EFT
       458**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:337  
B$JIT.PPRIV.EL
       458**DCL
B$JIT.PPRIV.LABEL
       459**DCL
B$JIT.PPRIV.NETCON
       459**DCL
B$JIT.PPRIV.PADMIN
       460**DCL
B$JIT.PPRIV.PIGC
       459**DCL
B$JIT.PPRIV.PIGD
       459**DCL
B$JIT.PPRIV.PIGETTE
       461**DCL
B$JIT.PPRIV.RATES
       460**DCL
B$JIT.PPRIV.REPLAY
       460**DCL
B$JIT.PPRIV.SPIDERC
       459**DCL
B$JIT.PPRIV.SPIDERD
       459**DCL
B$JIT.PPRIV.SUPER
       459**DCL
B$JIT.PPRIV.SUPERAUTH
       459**DCL
B$JIT.PPRIV.SUPERD
       460**DCL
B$JIT.PPRIV.SUPERFORM
       460**DCL
B$JIT.PPRIV.SUPERWSN
       460**DCL
B$JIT.PPRIV.SYSCON
       460**DCL
B$JIT.PPRIV.VOLINIT
       460**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:338  
B$JIT.PRDPRM
       571**DCL
B$JIT.PRFLAGS
       486**DCL
B$JIT.PRFLAGS.COMMENT
       486**DCL
B$JIT.PRFLAGS.CONTINUED
       486**DCL
B$JIT.PRFLAGS.CORRECT
       487**DCL
B$JIT.PRFLAGS.EXPOUND
       487**DCL
B$JIT.PRFLAGS.LIST
       486**DCL
B$JIT.PRFLAGS.LS
       486**DCL
B$JIT.PRFLAGS.NOSCAN
       487**DCL
B$JIT.PRFLAGS.NSSYNTAX
       486**DCL
B$JIT.PRFLAGS.OU
       486**DCL
B$JIT.PRFLAGS.OUTPUT
       486**DCL
B$JIT.PRFLAGS.POINT
       487**DCL
B$JIT.PRFLAGS.POSITION
       487**DCL
B$JIT.PRFLAGS.SI
       486**DCL
B$JIT.PRFLAGS.UI
       486**DCL
B$JIT.PRFLAGS.WHEN
       487**DCL
B$JIT.PRIINC
       577**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:339  
B$JIT.PRIOB
       575**DCL
B$JIT.PRIOCORE
       563**DCL
B$JIT.PRIOR_CP
       666**DCL
B$JIT.PRIV
       403**DCL
B$JIT.PRIV.ACTIVE
       403**DCL
B$JIT.PRIV.ACTIVE.ASAVE
       405**DCL
B$JIT.PRIV.ACTIVE.CFEP
       406**DCL
B$JIT.PRIV.ACTIVE.CQ
       406**DCL
B$JIT.PRIV.ACTIVE.DISPJOB
       405**DCL
B$JIT.PRIV.ACTIVE.DOMANE
       404**DCL
B$JIT.PRIV.ACTIVE.EXMM
       407**DCL
B$JIT.PRIV.ACTIVE.EXPM
       406**DCL
B$JIT.PRIV.ACTIVE.FMBLK
       403**DCL
B$JIT.PRIV.ACTIVE.FMDIAG
       404**DCL
B$JIT.PRIV.ACTIVE.FMEFT
       403**DCL
B$JIT.PRIV.ACTIVE.FMREAD
       404**DCL
B$JIT.PRIV.ACTIVE.FMSEC
       404**DCL
B$JIT.PRIV.ACTIVE.GPP
       405**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:340  
B$JIT.PRIV.ACTIVE.INTCON
       406**DCL
B$JIT.PRIV.ACTIVE.IOQ
       406**DCL
B$JIT.PRIV.ACTIVE.IOQW
       406**DCL
B$JIT.PRIV.ACTIVE.JIT
       407**DCL
B$JIT.PRIV.ACTIVE.MAXMEM
       407**DCL
B$JIT.PRIV.ACTIVE.MFEP
       406**DCL
B$JIT.PRIV.ACTIVE.MODE
       404**DCL
B$JIT.PRIV.ACTIVE.MSYS
       407**DCL
B$JIT.PRIV.ACTIVE.PM
       406**DCL
B$JIT.PRIV.ACTIVE.SCREECH
       405**DCL
B$JIT.PRIV.ACTIVE.SNAP
       405**DCL
B$JIT.PRIV.ACTIVE.SPCLMM
       407**DCL
B$JIT.PRIV.ACTIVE.SYSACCT
       404**DCL
B$JIT.PRIV.ACTIVE.SYSCON
       405**DCL
B$JIT.PRIV.ACTIVE.SYSLOG
       406**DCL
B$JIT.PRIV.ACTIVE.TND
       406**DCL
B$JIT.PRIV.AUTH
       443**DCL
B$JIT.PRIV.AUTH.ASAVE
       444**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:341  
B$JIT.PRIV.AUTH.CFEP
       445**DCL
B$JIT.PRIV.AUTH.CQ
       445**DCL
B$JIT.PRIV.AUTH.DISPJOB
       444**DCL
B$JIT.PRIV.AUTH.DOMANE
       443**DCL
B$JIT.PRIV.AUTH.EXMM
       446**DCL
B$JIT.PRIV.AUTH.EXPM
       445**DCL
B$JIT.PRIV.AUTH.FMBLK
       443**DCL
B$JIT.PRIV.AUTH.FMDIAG
       443**DCL
B$JIT.PRIV.AUTH.FMEFT
       443**DCL
B$JIT.PRIV.AUTH.FMREAD
       443**DCL
B$JIT.PRIV.AUTH.FMSEC
       443**DCL
B$JIT.PRIV.AUTH.GPP
       445**DCL
B$JIT.PRIV.AUTH.INTCON
       445**DCL
B$JIT.PRIV.AUTH.IOQ
       445**DCL
B$JIT.PRIV.AUTH.IOQW
       445**DCL
B$JIT.PRIV.AUTH.JIT
       446**DCL
B$JIT.PRIV.AUTH.MAXMEM
       446**DCL
B$JIT.PRIV.AUTH.MFEP
       445**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:342  
B$JIT.PRIV.AUTH.MODE
       443**DCL
B$JIT.PRIV.AUTH.MSYS
       446**DCL
B$JIT.PRIV.AUTH.PM
       446**DCL
B$JIT.PRIV.AUTH.SCREECH
       444**DCL
B$JIT.PRIV.AUTH.SNAP
       444**DCL
B$JIT.PRIV.AUTH.SPCLMM
       446**DCL
B$JIT.PRIV.AUTH.SYSACCT
       443**DCL
B$JIT.PRIV.AUTH.SYSCON
       444**DCL
B$JIT.PRIV.AUTH.SYSLOG
       445**DCL
B$JIT.PRIV.AUTH.TND
       446**DCL
B$JIT.PRIV.JOB
       446**DCL
B$JIT.PRIV.JOB.ASAVE
       448**DCL
B$JIT.PRIV.JOB.CFEP
       449**DCL
B$JIT.PRIV.JOB.CQ
       449**DCL
B$JIT.PRIV.JOB.DISPJOB
       448**DCL
B$JIT.PRIV.JOB.DOMANE
       447**DCL
B$JIT.PRIV.JOB.EXMM
       450**DCL
B$JIT.PRIV.JOB.EXPM
       449**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:343  
B$JIT.PRIV.JOB.FMBLK
       447**DCL
B$JIT.PRIV.JOB.FMDIAG
       447**DCL
B$JIT.PRIV.JOB.FMEFT
       446**DCL
B$JIT.PRIV.JOB.FMREAD
       447**DCL
B$JIT.PRIV.JOB.FMSEC
       447**DCL
B$JIT.PRIV.JOB.GPP
       448**DCL
B$JIT.PRIV.JOB.INTCON
       449**DCL
B$JIT.PRIV.JOB.IOQ
       449**DCL
B$JIT.PRIV.JOB.IOQW
       449**DCL
B$JIT.PRIV.JOB.JIT
       450**DCL
B$JIT.PRIV.JOB.MAXMEM
       450**DCL
B$JIT.PRIV.JOB.MFEP
       449**DCL
B$JIT.PRIV.JOB.MODE
       447**DCL
B$JIT.PRIV.JOB.MSYS
       450**DCL
B$JIT.PRIV.JOB.PM
       449**DCL
B$JIT.PRIV.JOB.SCREECH
       448**DCL
B$JIT.PRIV.JOB.SNAP
       448**DCL
B$JIT.PRIV.JOB.SPCLMM
       450**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:344  
B$JIT.PRIV.JOB.SYSACCT
       447**DCL
B$JIT.PRIV.JOB.SYSCON
       448**DCL
B$JIT.PRIV.JOB.SYSLOG
       449**DCL
B$JIT.PRIV.JOB.TND
       450**DCL
B$JIT.PRIV.PRC
       450**DCL
B$JIT.PRIV.PRC.ASAVE
       452**DCL
B$JIT.PRIV.PRC.CFEP
       453**DCL
B$JIT.PRIV.PRC.CQ
       453**DCL
B$JIT.PRIV.PRC.DISPJOB
       452**DCL
B$JIT.PRIV.PRC.DOMANE
       451**DCL
B$JIT.PRIV.PRC.EXMM
       454**DCL
B$JIT.PRIV.PRC.EXPM
       453**DCL
B$JIT.PRIV.PRC.FMBLK
       450**DCL
B$JIT.PRIV.PRC.FMDIAG
       451**DCL
B$JIT.PRIV.PRC.FMEFT
       450**DCL
B$JIT.PRIV.PRC.FMREAD
       451**DCL
B$JIT.PRIV.PRC.FMSEC
       451**DCL
B$JIT.PRIV.PRC.GPP
       452**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:345  
B$JIT.PRIV.PRC.INTCON
       453**DCL
B$JIT.PRIV.PRC.IOQ
       453**DCL
B$JIT.PRIV.PRC.IOQW
       453**DCL
B$JIT.PRIV.PRC.JIT
       454**DCL
B$JIT.PRIV.PRC.MAXMEM
       454**DCL
B$JIT.PRIV.PRC.MFEP
       453**DCL
B$JIT.PRIV.PRC.MODE
       451**DCL
B$JIT.PRIV.PRC.MSYS
       454**DCL
B$JIT.PRIV.PRC.PM
       453**DCL
B$JIT.PRIV.PRC.SCREECH
       452**DCL
B$JIT.PRIV.PRC.SNAP
       452**DCL
B$JIT.PRIV.PRC.SPCLMM
       454**DCL
B$JIT.PRIV.PRC.SYSACCT
       451**DCL
B$JIT.PRIV.PRC.SYSCON
       452**DCL
B$JIT.PRIV.PRC.SYSLOG
       452**DCL
B$JIT.PRIV.PRC.TND
       453**DCL
B$JIT.PRIV.SAVED
       454**DCL
B$JIT.PRIV.SAVED.ASAVE
       456**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:346  
B$JIT.PRIV.SAVED.CFEP
       457**DCL
B$JIT.PRIV.SAVED.CQ
       457**DCL
B$JIT.PRIV.SAVED.DISPJOB
       456**DCL
B$JIT.PRIV.SAVED.DOMANE
       455**DCL
B$JIT.PRIV.SAVED.EXMM
       458**DCL
B$JIT.PRIV.SAVED.EXPM
       457**DCL
B$JIT.PRIV.SAVED.FMBLK
       454**DCL
B$JIT.PRIV.SAVED.FMDIAG
       455**DCL
B$JIT.PRIV.SAVED.FMEFT
       454**DCL
B$JIT.PRIV.SAVED.FMREAD
       455**DCL
B$JIT.PRIV.SAVED.FMSEC
       454**DCL
B$JIT.PRIV.SAVED.GPP
       456**DCL
B$JIT.PRIV.SAVED.INTCON
       457**DCL
B$JIT.PRIV.SAVED.IOQ
       457**DCL
B$JIT.PRIV.SAVED.IOQW
       457**DCL
B$JIT.PRIV.SAVED.JIT
       457**DCL
B$JIT.PRIV.SAVED.MAXMEM
       458**DCL
B$JIT.PRIV.SAVED.MFEP
       457**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:347  
B$JIT.PRIV.SAVED.MODE
       455**DCL
B$JIT.PRIV.SAVED.MSYS
       458**DCL
B$JIT.PRIV.SAVED.PM
       457**DCL
B$JIT.PRIV.SAVED.SCREECH
       456**DCL
B$JIT.PRIV.SAVED.SNAP
       456**DCL
B$JIT.PRIV.SAVED.SPCLMM
       458**DCL
B$JIT.PRIV.SAVED.SYSACCT
       455**DCL
B$JIT.PRIV.SAVED.SYSCON
       456**DCL
B$JIT.PRIV.SAVED.SYSLOG
       456**DCL
B$JIT.PRIV.SAVED.TND
       457**DCL
B$JIT.PROG_ENTRY
       552**DCL
B$JIT.PROMPTS
       551**DCL
B$JIT.PSEUDOPGS
       565**DCL
B$JIT.PSEUDO_COUNT
       666**DCL
B$JIT.PSEUDO_TEXT
       666**DCL
B$JIT.PSLEV
       539**DCL
B$JIT.PTSIZ
       566**DCL
B$JIT.PUL
       560**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:348  
B$JIT.QUAN
       575**DCL
B$JIT.REMCPO
       675**DCL
B$JIT.REMDO
       675**DCL
B$JIT.REMLO
       675**DCL
B$JIT.RERUN
       577**DCL
B$JIT.RESCORE
       671**DCL
B$JIT.RESPEAK
       565**DCL
B$JIT.RNST
       581**DCL
B$JIT.RUNFLAGS
       598**DCL
B$JIT.SAVEDCB$
       572**DCL
B$JIT.SCHTIME
       575**DCL
B$JIT.SINPUTSZ
       551**DCL
B$JIT.SPEAK
       564**DCL
B$JIT.SRESPEAK
       565**DCL
B$JIT.SSLEV
       539**DCL
B$JIT.STAR
       570**DCL
B$JIT.STAR.DA
       570**DCL
B$JIT.STDLOPGS
       670**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:349  
B$JIT.STEPCC
       629**DCL
B$JIT.STEPS
       623**DCL
B$JIT.STEPUNIT
       491**DCL
B$JIT.STIME
       575**DCL
B$JIT.STMPDPPK
       571**DCL
B$JIT.SVLDTF
       643**DCL
B$JIT.SVTUS
       578**DCL
B$JIT.SWITCH
       490**DCL
B$JIT.SYSID
       402**DCL
B$JIT.TMPGAC
       571**DCL
B$JIT.TMPGAC.N
       571**DCL
B$JIT.TMPGAC.TIME
       571**DCL
B$JIT.TPEXT
       576**DCL
B$JIT.TPSVT
       576**DCL
B$JIT.TSLINE.FEX
       671**DCL
B$JIT.TSLINE.LEV
       672**DCL
B$JIT.TSLINE.PORT
       671**DCL
B$JIT.TSLINE.SPEED
       671**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:350  
B$JIT.TSLINE.SUBDEVICE
       672**DCL
B$JIT.TSLINE.SUBSUBDEVICE
       672**DCL
B$JIT.TSLINE.TTYP
       672**DCL
B$JIT.TUEXT
       576**DCL
B$JIT.TUSVT
       576**DCL
B$JIT.UMEMTIM
       576**DCL
B$JIT.UNAME
       402**DCL
B$JIT.USER
       402**DCL
B$JIT.USERWORD
       490**DCL
B$JIT.USRDCB
       551**DCL
B$JIT.USRERR
       538**DCL
B$JIT.USRERR.CODE
       538**DCL
B$JIT.USRERR.FCG
       538**DCL
B$JIT.USRERR.MID
       538**DCL
B$JIT.USRERR.MON
       538**DCL
B$JIT.USRERR.SEV
       538**DCL
B$JIT.USRIC
       539**DCL
B$JIT.USRRNST
       538**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:351  
B$JIT.UTIMER
       577**DCL
B$JIT.VIRTUAL
       567**DCL
B$JIT.VIRTUAL.DCB#
       567**DCL
B$JIT.WOO
       402**DCL
B$JIT.XCONF
       623**DCL
B$JIT.XLIMFLG
       633**DCL
B$JIT.XTIME
       575**DCL
B$JIT.YC0SZ
       539**DCL
B$JIT.YC2SZ
       557**DCL
B$TCB
     10301**DCL
B$TCB.CURRSZ
     10301**DCL
B$TCB.STK$
     10301**DCL
B$TCB.TCBAVSZ
     10301**DCL
CLOSE_HNDLR_PATH.ACCESS_
     10635**DCL
CLOSE_HNDLR_PATH.ACCT_
     10637**DCL
CLOSE_HNDLR_PATH.ACSVEH_
     10636**DCL
CLOSE_HNDLR_PATH.ALTKEYS_
     10638**DCL
CLOSE_HNDLR_PATH.IFPARAM_
     10638**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:352  
CLOSE_HNDLR_PATH.INSTATTR_
     10636**DCL
CLOSE_HNDLR_PATH.IRREC_
     10633**DCL
CLOSE_HNDLR_PATH.NAME_
     10634**DCL
CLOSE_HNDLR_PATH.PASS_
     10635**DCL
CLOSE_HNDLR_PATH.PROCATTR_
     10637**DCL
CLOSE_HNDLR_PATH.RECFIELD_
     10634**DCL
CLOSE_HNDLR_PATH.UATTR_
     10636**DCL
CLOSE_HNDLR_PATH.V.ALTBLD#
     10647**DCL
CLOSE_HNDLR_PATH.V.BUPM#
     10646**DCL
CLOSE_HNDLR_PATH.V.CLDCB#
     10646**DCL
CLOSE_HNDLR_PATH.V.CLINFO#
     10648**DCL
CLOSE_HNDLR_PATH.V.CLSYSID#
     10645**DCL
CLOSE_HNDLR_PATH.V.DESC
     10643**DCL
CLOSE_HNDLR_PATH.V.DESC.ACTIVE#
     10645**DCL
CLOSE_HNDLR_PATH.V.DESC.ARCHIVE#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.BAD#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.BUF#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.BUPM#
     10644**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:353  
CLOSE_HNDLR_PATH.V.DESC.DELF#
     10643**DCL
CLOSE_HNDLR_PATH.V.DESC.FETCH#
     10645**DCL
CLOSE_HNDLR_PATH.V.DESC.NBUF#
     10645**DCL
CLOSE_HNDLR_PATH.V.DESC.NOLIST#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.ODSTOW#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.QS#
     10644**DCL
CLOSE_HNDLR_PATH.V.DESC.TERMINATE#
     10645**DCL
CLOSE_HNDLR_PATH.V.DESC.TPB#
     10645**DCL
CLOSE_HNDLR_PATH.V.DISP#
     10642**DCL
CLOSE_HNDLR_PATH.V.EFTOPER
     10640**DCL
CLOSE_HNDLR_PATH.V.EFTOPER.ASTOW#
     10641**DCL
CLOSE_HNDLR_PATH.V.EFTOPER.BACKUP#
     10640**DCL
CLOSE_HNDLR_PATH.V.EFTOPER.DELFDE#
     10642**DCL
CLOSE_HNDLR_PATH.V.EFTOPER.ISTOW#
     10641**DCL
CLOSE_HNDLR_PATH.V.EFTOPER.UPDDESC#
     10641**DCL
CLOSE_HNDLR_PATH.V.GHSTACS#
     10647**DCL
CLOSE_HNDLR_PATH.V.LRDL0#
     10649**DCL
CLOSE_HNDLR_PATH.V.LSLIDE#
     10649**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:354  
CLOSE_HNDLR_PATH.V.NOMARKS#
     10647**DCL
CLOSE_HNDLR_PATH.V.OPER
     10639**DCL
CLOSE_HNDLR_PATH.V.OPER.CHGATT#
     10639**DCL
CLOSE_HNDLR_PATH.V.OPER.REBLD#
     10640**DCL
CLOSE_HNDLR_PATH.V.OPER.RELG#
     10639**DCL
CLOSE_HNDLR_PATH.V.POS#
     10646**DCL
CLOSE_HNDLR_PATH.V.SPARE#
     10649**DCL
CLOSE_HNDLR_PATH.V.TRUNCATE#
     10642**DCL
CLOSE_HNDLR_PATH.V_
     10633**DCL
CONFIG.CTLR_STATUS#
     10456**DCL
CRD30_IMAGE IN PROCEDURE TOC$MME_COINIT
     10883**DCL
DATA IN PROCEDURE DISCONNECT_EXEC_LINE
     12003**DCL
DATA.LINE IN PROCEDURE DISCONNECT_EXEC_LINE
     12007**DCL
DATA.LINE.NUM IN PROCEDURE DISCONNECT_EXEC_LINE
     12009**DCL
DATA.LINE.TYPE IN PROCEDURE DISCONNECT_EXEC_LINE
     12008**DCL
DATA IN PROCEDURE DISCONNECT_TEST_LINE
     12111**DCL
DATA.LINE IN PROCEDURE DISCONNECT_TEST_LINE
     12115**DCL
DATA.LINE.NUM IN PROCEDURE DISCONNECT_TEST_LINE
     12117**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:355  
DATA.LINE.TYPE IN PROCEDURE DISCONNECT_TEST_LINE
     12116**DCL
DATA IN PROCEDURE GEROUT_COLTS_WAKEUP
     11901**DCL
DATA IN PROCEDURE GEROUT_DISCONNECT
     11966**DCL
DATA.LINE IN PROCEDURE GEROUT_DISCONNECT
     11970**DCL
DATA.LINE.NUM IN PROCEDURE GEROUT_DISCONNECT
     11972**DCL
DATA IN PROCEDURE GEROUT_STATUS_REQUEST
     12178**DCL
DATA IN PROCEDURE GEROUT_TERMINAL_TYPE_REQUEST
     11845**DCL
DATAWD IN PROCEDURE GEROUT_ICM
     11123**DCL
DATAWD.TP IN PROCEDURE GEROUT_ICM
     11125**DCL
DCB_NAME.LGTH IN PROCEDURE NEW_DCB
     11589**DCL
DCB_NAME.VALUE IN PROCEDURE NEW_DCB
     11590**DCL
DESIGNATOR IN PROCEDURE TOC$MME_COINIT
     10880**DCL
F$DCB
      8444**DCL
F$DCB.ACCT
      8454**DCL
F$DCB.ACS
      8461**DCL
F$DCB.AFTRBLK
      8476**DCL
F$DCB.AGE
      8488**DCL
F$DCB.ALTKEYX
      8467**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:356  
F$DCB.AMFLG
      8473**DCL
F$DCB.AMFLG.ACCF
      8473**DCL
F$DCB.AMFLG.ACSF
      8473**DCL
F$DCB.AMFLG.INSF
      8473**DCL
F$DCB.AMFLG.PROF
      8474**DCL
F$DCB.AMFLG.SNLF
      8474**DCL
F$DCB.AMFLG.USRF
      8474**DCL
F$DCB.AMR
      8457**DCL
F$DCB.AMRSETSTA
      8456**DCL
F$DCB.ANSISPANSEQ
      8471**DCL
F$DCB.ASN
      8459**DCL
F$DCB.ATTR.APL
      8463**DCL
F$DCB.ATTR.BIN
      8463**DCL
F$DCB.ATTR.DENS
      8462**DCL
F$DCB.ATTR.GRLGL
      8462**DCL
F$DCB.ATTR.LOWERCASE
      8463**DCL
F$DCB.ATTR.NATL
      8462**DCL
F$DCB.ATTR.NOXLATE
      8462**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:357  
F$DCB.ATTR.TRANSLGL
      8462**DCL
F$DCB.ATTR.TRUOVRPRT
      8462**DCL
F$DCB.ATTR.UPPERCASE
      8462**DCL
F$DCB.AU
      8455**DCL
F$DCB.AUTHFFLG
      8469**DCL
F$DCB.AUTHFFLG.AU
      8470**DCL
F$DCB.AUTHFFLG.AURD
      8471**DCL
F$DCB.AUTHFFLG.CREATE
      8470**DCL
F$DCB.AUTHFFLG.DELF
      8470**DCL
F$DCB.AUTHFFLG.DELR
      8470**DCL
F$DCB.AUTHFFLG.EXEC
      8470**DCL
F$DCB.AUTHFFLG.NOLIST
      8470**DCL
F$DCB.AUTHFFLG.READ
      8469**DCL
F$DCB.AUTHFFLG.REATTR
      8470**DCL
F$DCB.AUTHFFLG.TCTL
      8471**DCL
F$DCB.AUTHFFLG.UPD
      8470**DCL
F$DCB.AUTHFFLG.WNEW
      8470**DCL
F$DCB.BADARS
      8472**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:358  
F$DCB.BFR
      8488**DCL
F$DCB.BFR.BUFUP
      8488**DCL
F$DCB.BFR.BUFX
      8489**DCL
F$DCB.BFR.CHNG
      8488**DCL
F$DCB.BFR.CVM
      8489**DCL
F$DCB.BFR.DA
      8489**DCL
F$DCB.BFR.SCRUB
      8488**DCL
F$DCB.BFR1
      8489**DCL
F$DCB.BFR1.CX
      8490**DCL
F$DCB.BFR1.FLAGS
      8489**DCL
F$DCB.BFR1.FLAGS.ONE_WORD_HEADER
      8489**DCL
F$DCB.BFR1.SIZ
      8489**DCL
F$DCB.BLKL
      8459**DCL
F$DCB.BLKLEN
      8482**DCL
F$DCB.BLOCKED
      8458**DCL
F$DCB.BOL
      8460**DCL
F$DCB.BUPF
      8447**DCL
F$DCB.BUPM
      8458**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:359  
F$DCB.BYTESLEFT
      8480**DCL
F$DCB.CACHE
      8476**DCL
F$DCB.CBUFNUM
      8480**DCL
F$DCB.CFU$
      8478**DCL
F$DCB.CHAIN
      8464**DCL
F$DCB.CHANTIME
      8464**DCL
F$DCB.CNVRT
      8456**DCL
F$DCB.CODE16$
      8468**DCL
F$DCB.COMP
      8457**DCL
F$DCB.CONNCT
      8463**DCL
F$DCB.CONT
      8476**DCL
F$DCB.CRECNO
      8481**DCL
F$DCB.CRECX
      8480**DCL
F$DCB.CSEED
      8481**DCL
F$DCB.CTG
      8457**DCL
F$DCB.CTLCMDIN
      8485**DCL
F$DCB.CVOL
      8458**DCL
F$DCB.CWORD
      8486**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:360  
F$DCB.CX
      8486**DCL
F$DCB.DBGDCBNO
      8459**DCL
F$DCB.DBGSYSID
      8459**DCL
F$DCB.DCB#
      8471**DCL
F$DCB.DCBNAME
      8490**DCL
F$DCB.DCBNAME.N
      8491**DCL
F$DCB.DCBNAME.S
      8490**DCL
F$DCB.DCBNAME.X
      8490**DCL
F$DCB.DCT$
      8466**DCL
F$DCB.DDEV
      8450**DCL
F$DCB.DDEV.CP
      8450**DCL
F$DCB.DDEV.GR
      8450**DCL
F$DCB.DDEV.IC
      8450**DCL
F$DCB.DDEV.LP
      8450**DCL
F$DCB.DDEV.UCOUT
      8450**DCL
F$DCB.DDEV.XEQ
      8450**DCL
F$DCB.DECRYPT
      8484**DCL
F$DCB.DENSITY
      8464**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:361  
F$DCB.DESC
      8451**DCL
F$DCB.DESC.ACTIVE
      8452**DCL
F$DCB.DESC.ARCHIVE
      8452**DCL
F$DCB.DESC.BAD
      8452**DCL
F$DCB.DESC.BUF
      8451**DCL
F$DCB.DESC.BUPM
      8452**DCL
F$DCB.DESC.DELF
      8451**DCL
F$DCB.DESC.FETCH
      8452**DCL
F$DCB.DESC.NBUF
      8452**DCL
F$DCB.DESC.NOLIST
      8451**DCL
F$DCB.DESC.ODSTOW
      8451**DCL
F$DCB.DESC.QS
      8452**DCL
F$DCB.DESC.TERMINATE
      8452**DCL
F$DCB.DESC.TPB
      8452**DCL
F$DCB.DEVADR
      8466**DCL
F$DCB.DEVADR.CHAN
      8467**DCL
F$DCB.DEVADR.DVN
      8466**DCL
F$DCB.DEVADR.IOM
      8467**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:362  
F$DCB.DISP
      8459**DCL
F$DCB.DQH$
      8465**DCL
F$DCB.DVBYTE
      8447**DCL
F$DCB.DVBYTE.BIN
      8447**DCL
F$DCB.DVBYTE.TOP
      8447**DCL
F$DCB.DVBYTE.TRANS
      8447**DCL
F$DCB.DVBYTE.VFC
      8447**DCL
F$DCB.DVFC
      8465**DCL
F$DCB.DVTYPE
      8458**DCL
F$DCB.EBCDIC
      8456**DCL
F$DCB.ENQF
      8476**DCL
F$DCB.EOMVAL
      8448**DCL
F$DCB.EOMVAL.VALUE
      8448**DCL
F$DCB.EOMVAL.VFLG
      8448**DCL
F$DCB.EOP
      8473**DCL
F$DCB.EVENT
      8468**DCL
F$DCB.EXIST
      8457**DCL
F$DCB.EXPIRE
      8460**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:363  
F$DCB.FCD
      8457**DCL
F$DCB.FCI
      8457**DCL
F$DCB.FCN
      8481**DCL
F$DCB.FCN.CNT
      8481**DCL
F$DCB.FCN.F
      8481**DCL
F$DCB.FDCM
      8481**DCL
F$DCB.FEPIO
      8487**DCL
F$DCB.FEPIO.BPP
      8488**DCL
F$DCB.FEPIO.BUFX
      8488**DCL
F$DCB.FEPIO.EVENT
      8487**DCL
F$DCB.FEPIO.KEYX
      8487**DCL
F$DCB.FEPIO.KPP
      8488**DCL
F$DCB.FEPIO2
      8490**DCL
F$DCB.FEPIO3
      8490**DCL
F$DCB.FEPSIZ
      8486**DCL
F$DCB.FEPSIZ.BUF
      8487**DCL
F$DCB.FEPSIZ.KEY
      8487**DCL
F$DCB.FEXT
      8472**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:364  
F$DCB.FEXTX
      8460**DCL
F$DCB.FFLG
      8448**DCL
F$DCB.FFLG.AU
      8450**DCL
F$DCB.FFLG.AURD
      8450**DCL
F$DCB.FFLG.CREATE
      8449**DCL
F$DCB.FFLG.DELF
      8449**DCL
F$DCB.FFLG.DELR
      8449**DCL
F$DCB.FFLG.EXEC
      8449**DCL
F$DCB.FFLG.NOLIST
      8449**DCL
F$DCB.FFLG.READ
      8449**DCL
F$DCB.FFLG.REATTR
      8449**DCL
F$DCB.FFLG.TCTL
      8450**DCL
F$DCB.FFLG.UPD
      8449**DCL
F$DCB.FFLG.WNEW
      8449**DCL
F$DCB.FIELDX
      8468**DCL
F$DCB.FLPW
      8444**DCL
F$DCB.FMOD
      8473**DCL
F$DCB.FPRGX
      8468**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:365  
F$DCB.FPSTR
      8482**DCL
F$DCB.FTAM
      8477**DCL
F$DCB.FTAM.CTX
      8477**DCL
F$DCB.FTAM.PMME
      8478**DCL
F$DCB.FTAM.USR
      8477**DCL
F$DCB.FUN
      8458**DCL
F$DCB.GDISP
      8483**DCL
F$DCB.GHSTACS
      8467**DCL
F$DCB.GRPOS
      8476**DCL
F$DCB.GTYP
      8473**DCL
F$DCB.HASH
      8481**DCL
F$DCB.IASN
      8485**DCL
F$DCB.ID
      8487**DCL
F$DCB.ID.DA
      8487**DCL
F$DCB.ID.GX
      8487**DCL
F$DCB.IFMT
      8484**DCL
F$DCB.IGNOREFSN
      8455**DCL
F$DCB.INDX
      8482**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:366  
F$DCB.IOERROK
      8456**DCL
F$DCB.IORG
      8480**DCL
F$DCB.IRRECX
      8472**DCL
F$DCB.IWL
      8485**DCL
F$DCB.IWL.HDRIWL
      8485**DCL
F$DCB.IWL.SEQIWL
      8485**DCL
F$DCB.IWL.TABIWL
      8485**DCL
F$DCB.JRNLBYPASS
      8467**DCL
F$DCB.KEYL
      8461**DCL
F$DCB.KEYTYPE
      8468**DCL
F$DCB.KEYX
      8460**DCL
F$DCB.KFIELDX
      8469**DCL
F$DCB.LASTKEY
      8477**DCL
F$DCB.LASTKEY$
      8477**DCL
F$DCB.LDCTX
      8466**DCL
F$DCB.LDFLG
      8475**DCL
F$DCB.LINES
      8465**DCL
F$DCB.LOAD
      8455**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:367  
F$DCB.LOGSEC
      8483**DCL
F$DCB.LPOOL
      8478**DCL
F$DCB.LRDL0
      8461**DCL
F$DCB.LSLIDE
      8461**DCL
F$DCB.LSTAOR
      8456**DCL
F$DCB.LSTBLK
      8476**DCL
F$DCB.MAXVOL
      8464**DCL
F$DCB.MEDIA
      8484**DCL
F$DCB.MODCNT
      8483**DCL
F$DCB.MOUNT
      8474**DCL
F$DCB.MOVED
      8486**DCL
F$DCB.MPC$
      8466**DCL
F$DCB.MUST_CVOL
      8474**DCL
F$DCB.NAME
      8453**DCL
F$DCB.NAME.C17
      8453**DCL
F$DCB.NAME.C17.CC
      8454**DCL
F$DCB.NAME.L
      8453**DCL
F$DCB.NEW_FSECT
      8474**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:368  
F$DCB.OLDIOERR
      8484**DCL
F$DCB.OWNER
      8475**DCL
F$DCB.PASS
      8454**DCL
F$DCB.PASSF
      8456**DCL
F$DCB.PATH
      8471**DCL
F$DCB.PATH.CHAN
      8471**DCL
F$DCB.PATH.IOM
      8471**DCL
F$DCB.PGINGRAN
      8484**DCL
F$DCB.PRIVOPN
      8483**DCL
F$DCB.PSN
      8454**DCL
F$DCB.QISS
      8455**DCL
F$DCB.RA
      8475**DCL
F$DCB.RDL0
      8448**DCL
F$DCB.REALSPAN
      8484**DCL
F$DCB.RECL
      8459**DCL
F$DCB.RESNT
      8454**DCL
F$DCB.RESNT.NUM
      8455**DCL
F$DCB.RESNT.TYP
      8454**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:369  
F$DCB.RETRYCNT
      8451**DCL
F$DCB.RPOS
      8475**DCL
F$DCB.SEED
      8472**DCL
F$DCB.SEGX
      8483**DCL
F$DCB.SEQ
      8465**DCL
F$DCB.SEQCOL
      8465**DCL
F$DCB.SEQID
      8465**DCL
F$DCB.SETSTA$
      8453**DCL
F$DCB.SEZ_OK
      8474**DCL
F$DCB.SHARE
      8457**DCL
F$DCB.SHARED
      8473**DCL
F$DCB.SLIDE
      8448**DCL
F$DCB.SPAN
      8475**DCL
F$DCB.SPANNED
      8458**DCL
F$DCB.SPARE
      8461**DCL
F$DCB.STARF
      8473**DCL
F$DCB.STARTX
      8469**DCL
F$DCB.STARX
      8475**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:370  
F$DCB.STR
      8482**DCL
F$DCB.SYSID
      8460**DCL
F$DCB.TAPTYP
      8479**DCL
F$DCB.TAPTYP.CP6F
      8479**DCL
F$DCB.TAPTYP.HAVLASTKEY
      8479**DCL
F$DCB.TAPTYP.MANAGED
      8479**DCL
F$DCB.TAPTYP.NOCVOL
      8479**DCL
F$DCB.TAPTYP.PASTFM
      8479**DCL
F$DCB.TAPTYP.RWASC
      8479**DCL
F$DCB.TAPTYP.USRBUF
      8479**DCL
F$DCB.TDALVL
      8478**DCL
F$DCB.TDEXTST$
      8453**DCL
F$DCB.TDFLG
      8463**DCL
F$DCB.TDFLG.SDSK
      8463**DCL
F$DCB.TDSTAT
      8455**DCL
F$DCB.TRNC
      8476**DCL
F$DCB.TYC
      8444**DCL
F$DCB.TYC.BLNKTP
      8444**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:371  
F$DCB.TYC.BOF
      8444**DCL
F$DCB.TYC.BOT
      8444**DCL
F$DCB.TYC.CDALRT
      8446**DCL
F$DCB.TYC.CGCRCW
      8446**DCL
F$DCB.TYC.CGCWRV
      8447**DCL
F$DCB.TYC.CGFULL
      8446**DCL
F$DCB.TYC.CGKEYV
      8446**DCL
F$DCB.TYC.CGLWRV
      8446**DCL
F$DCB.TYC.DACT
      8445**DCL
F$DCB.TYC.DI
      8445**DCL
F$DCB.TYC.EGV
      8444**DCL
F$DCB.TYC.EOD
      8445**DCL
F$DCB.TYC.EOF
      8445**DCL
F$DCB.TYC.EOT
      8444**DCL
F$DCB.TYC.FRAW
      8446**DCL
F$DCB.TYC.IOERR
      8445**DCL
F$DCB.TYC.LAST
      8446**DCL
F$DCB.TYC.LD
      8445**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:372  
F$DCB.TYC.LDISC
      8445**DCL
F$DCB.TYC.MTRAP
      8445**DCL
F$DCB.TYC.OPER
      8444**DCL
F$DCB.TYC.PROT
      8446**DCL
F$DCB.TYC.TIMO
      8445**DCL
F$DCB.TYC.XTRARD
      8446**DCL
F$DCB.TYPE
      8454**DCL
F$DCB.UB$
      8482**DCL
F$DCB.UBYTES
      8482**DCL
F$DCB.UCOUT
      8479**DCL
F$DCB.UNIQUEBLD
      8485**DCL
F$DCB.UOPT
      8456**DCL
F$DCB.UPDCNT
      8485**DCL
F$DCB.VFCCHAR
      8468**DCL
F$DCB.VOL
      8464**DCL
F$DCB.VOLACCESS
      8456**DCL
F$DCB.WAIT
      8476**DCL
F$DCB.WCDATA
      8478**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:373  
F$DCB.WIDTH
      8451**DCL
F$DCB.WRCMP
      8478**DCL
F$DCB.WSR
      8461**DCL
F$DCB.XTEND
      8457**DCL
F$DCB.XTNSIZE
      8461**DCL
FEP.EVENT_ID
     10409**DCL
FEP.EXEC_LINE
     10398**DCL
FEP.LINE
     10393**DCL
FEP.STATUS
     10368**DCL
FEP.STATUS.AWAITING_WAKEUP
     10374**DCL
GEROUT_STATUS IN PROCEDURE BUILD_CONFIG_ICM
     11361**DCL
GEROUT_TYPE IN PROCEDURE TOC$MME_GEROUT
     11053**DCL
GET_COLTS_DCB.DCBNAME_ IN PROCEDURE NEW_DCB
     11605**DCL
GET_COLTS_DCB.DCBNUM_ IN PROCEDURE NEW_DCB
     11605**DCL
GET_COLTS_DCB.V.DCB# IN PROCEDURE NEW_DCB
     11606**DCL
GET_COLTS_DCB.V.MERGE# IN PROCEDURE NEW_DCB
     11606**DCL
GET_COLTS_DCB.V.TEST# IN PROCEDURE NEW_DCB
     11607**DCL
GET_COLTS_DCB.V_ IN PROCEDURE NEW_DCB
     11605**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:374  
GET_CONFIG.FEPNAME_
     10471**DCL
GET_CONFIG.RESULTS_
     10472**DCL
GET_CONFIG.V_
     10471**DCL
GR5_VFD IN PROCEDURE CONNECT_TO_SLAVE
     12837**DCL
HEADER_REC IN PROCEDURE GEROUT_ICM
     11132**DCL
HEADER_REC.WORD_COUNT IN PROCEDURE GEROUT_ICM
     11133**DCL
ICM.EXT_ID
     10427**DCL
ICM.EXT_ID.ID
     10428**DCL
ICM.ID
     10423**DCL
ICM.ID.LOWER
     10425**DCL
ICM.ID.UPPER
     10424**DCL
ICM.L6NDX
     10417**DCL
ICM.MSG_ID
     10413**DCL
ICM.MSG_SUBC
     10414**DCL
ICM.TEST_TYP
     10430**DCL
ICM.TEXT
     10434**DCL
LIST IN PROCEDURE TOC$MME_COINIT
     10868**DCL
M$ACCT
      7848**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:375  
M$ACTIVATE
      7851**DCL-ENT
M$ALIB
      7844**DCL-ENT
M$ASUSER
      7846**DCL-ENT
M$ATTACH
      7853**DCL-ENT
M$BADPP
      7871**DCL-ENT
M$CGCTL
      7852**DCL-ENT
M$CGINFO
      7852**DCL-ENT
M$CHECK
      7833**DCL-ENT
M$CHGUNIT
      7891**DCL-ENT
M$CLRSTK
      7889**DCL-ENT
M$CMDVAR
      7900**DCL-ENT
M$CORRES
      7836**DCL-ENT
M$CPEXIT
      7845**DCL-ENT
M$CVM
      7869**DCL-ENT
M$CVOL
      7834**DCL-ENT
M$DCLFLD
      7861**DCL-ENT
M$DEACTIVATE
      7851**DCL-ENT
M$DELREC
      7833**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:376  
M$DEQ
      7898**DCL-ENT
M$DETACH
      7853**DCL-ENT
M$DEVICE
      7835**DCL-ENT
M$DISPLAY
      7898**DCL-ENT
M$DISPRES
      7838**DCL-ENT
M$DLIB
      7844**DCL-ENT
M$DRIBBLE
      7861**DCL-ENT
M$DRTN
      7889**DCL-ENT
M$DSUSER
      7846**DCL-ENT
M$ENQ
      7897**DCL-ENT
M$EOM
      7856**DCL-ENT
M$ERASE
      7862**DCL-ENT
M$ERR
      7843**DCL-ENT
M$ERRMSG
      7894**DCL-ENT
M$EVENT
      7886**DCL-ENT
M$EXHUME
      7895**DCL-ENT
M$EXIT
      7843**DCL-ENT
M$EXTEND
      7835**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:377  
M$FDP
      7867**DCL-ENT
M$FDS
      7866**DCL-ENT
M$FEBOOT
      7859**DCL-ENT
M$FECTL
      7860**DCL-ENT
M$FEDUMP
      7859**DCL-ENT
M$FID
      7894**DCL-ENT
M$FINDPROC
      7848**DCL-ENT
M$FSUSER
      7846**DCL-ENT
M$FVP
      7868**DCL-ENT
M$FWCG
      7852**DCL-ENT
M$GBPL
      7872**DCL-ENT
M$GDDL
      7868**DCL-ENT
M$GDP
      7867**DCL-ENT
M$GDS
      7866**DCL-ENT
M$GETMOUSE
      7877**DCL-ENT
M$GETPM
      7878**DCL-ENT
M$GJOB
      7896**DCL-ENT
M$GLINEATTR
      7856**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:378  
M$GOODPP
      7871**DCL-ENT
M$GPLATEN
      7864**DCL-ENT
M$GPROMPT
      7863**DCL-ENT
M$GTRMATTR
      7857**DCL-ENT
M$GTRMCTL
      7855**DCL-ENT
M$GTRMTAB
      7858**DCL-ENT
M$GVP
      7867**DCL-ENT
M$HELP
      7894**DCL-ENT
M$INT
      7886**DCL-ENT
M$INTRTN
      7847**DCL-ENT
M$IOQ
      7882**DCL-ENT
M$JOBSTATS
      7896**DCL-ENT
M$KEYIN
      7836**DCL-ENT
M$LDEV
      7831**DCL-ENT
M$LDTRC
      7844**DCL-ENT
M$LIMIT
      7837**DCL-ENT
M$LINES
      7836**DCL-ENT
M$LINK
      7843**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:379  
M$MADMUCK
      7839**DCL-ENT
M$MAKUSER
      7870**DCL-ENT
M$MBS
      7838**DCL-ENT
M$MDFFLD
      7862**DCL-ENT
M$MERC
      7887**DCL-ENT
M$MERCS
      7888**DCL-ENT
M$MIRROR
      7882**DCL-ENT
M$MONINFO
      7899**DCL-ENT
M$MPL
      7872**DCL-ENT
M$NODEINFO
      7863**DCL-ENT
M$NXTUSR
      7897**DCL-ENT
M$OCMSG
      7895**DCL-ENT
M$OLAY
      7843**DCL-ENT
M$PAS
      7872**DCL-ENT
M$PATHCON
      7895**DCL-ENT
M$PDS
      7866**DCL-ENT
M$PFIL
      7833**DCL-ENT
M$PLATEN
      7857**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:380  
M$PRECORD
      7835**DCL-ENT
M$PROCNAME
      7848**DCL-ENT
M$PROFILE
      7859**DCL-ENT
M$PROMPT
      7855**DCL-ENT
M$RACST
      7839**DCL-ENT
M$RDSYSLOG
      7880**DCL-ENT
M$RELRES
      7838**DCL-ENT
M$RELSTARF
      7840**DCL-ENT
M$REM
      7840**DCL-ENT
M$RENV
      7887**DCL-ENT
M$REQUIRE
      7839**DCL-ENT
M$RETRY
      7888**DCL-ENT
M$RETRYS
      7888**DCL-ENT
M$REW
      7834**DCL-ENT
M$RLSFLD
      7862**DCL-ENT
M$RPRIV
      7890**DCL-ENT
M$RSPP
      7869**DCL-ENT
M$RSWITCH
      7891**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:381  
M$RUE
      7897**DCL-ENT
M$SAD
      7870**DCL-ENT
M$SAVE
      7846**DCL-ENT
M$SCON
      7847**DCL-ENT
M$SCREECH
      7845**DCL-ENT
M$SENV
      7887**DCL-ENT
M$SETFMA
      7831**DCL-ENT
M$SETFP
      7860**DCL-ENT
M$SINPUT
      7858**DCL-ENT
M$SLCFLD
      7863**DCL-ENT
M$SMOUSE
      7877**DCL-ENT
M$SMPRT
      7869**DCL-ENT
M$SPRIV
      7890**DCL-ENT
M$SSC
      7870**DCL-ENT
M$SSWITCH
      7890**DCL-ENT
M$STATE
      7899**DCL-ENT
M$STD
      7871**DCL-ENT
M$STIMER
      7885**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:382  
M$STLPP
      7868**DCL-ENT
M$STRAP
      7885**DCL-ENT
M$STRMATTR
      7857**DCL-ENT
M$STRMCTL
      7855**DCL-ENT
M$STRMTAB
      7858**DCL-ENT
M$SYMBIO
      7896**DCL-ENT
M$SYSCON
      7882**DCL-ENT
M$SYSID
      7900**DCL-ENT
M$TDCLOSE
      7881**DCL-ENT
M$TDIO
      7881**DCL-ENT
M$TDOPEN
      7880**DCL-ENT
M$TDREQCPU
      7881**DCL-ENT
M$TEMPWROC
      7875**DCL-ENT
M$TIME
      7898**DCL-ENT
M$TRAP
      7885**DCL-ENT
M$TRMISC
      7860**DCL-ENT
M$TRMPRG
      7856**DCL-ENT
M$TRTN
      7889**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:383  
M$TRUNC
      7832**DCL-ENT
M$TTIMER
      7885**DCL-ENT
M$UC
      7855**DCL
M$UMPL
      7872**DCL-ENT
M$UNFID
      7894**DCL-ENT
M$UNLATCH
      7851**DCL-ENT
M$UNSHARE
      7848**DCL-ENT
M$USRFIELD
      7891**DCL-ENT
M$VIRTUAL
      7866**DCL-ENT
M$WAIT
      7889**DCL-ENT
M$WEOF
      7834**DCL-ENT
M$WRSYSLOG
      7880**DCL-ENT
M$XCON
      7886**DCL-ENT
M$XCONRTN
      7847**DCL-ENT
M$XEQTIME
      7899**DCL-ENT
M$XFLUSH
      7840**DCL-ENT
M$XMOUSE
      7877**DCL-ENT
M$XXX
      7843**DCL-ENT
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:384  
M$YC
      7845**DCL-ENT
MME.INST
     10251**DCL
MME.INST.OP
     10253**DCL
MREG.E
     10281**DCL
MREG.Q
     10280**DCL
MREG.X0
     10271**DCL
MREG.X1
     10272**DCL
MREG.X3
     10274**DCL
MREG.X4
     10275**DCL
MREG.X5
     10276**DCL
MREG.X6
     10277**DCL
MREG.X7
     10278**DCL
NODE IN PROCEDURE TOC$MME_LOGFEP
     12735**DCL
NODE.PAD IN PROCEDURE TOC$MME_LOGFEP
     12736**DCL
OPEN_HNDLR_PATH.ACCESS_
     10546**DCL
OPEN_HNDLR_PATH.ACCT_
     10548**DCL
OPEN_HNDLR_PATH.FORM_
     10552**DCL
OPEN_HNDLR_PATH.FPARAM_
     10549**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:385  
OPEN_HNDLR_PATH.FPRG_
     10553**DCL
OPEN_HNDLR_PATH.IFPARAM_
     10549**DCL
OPEN_HNDLR_PATH.INSTATTR_
     10548**DCL
OPEN_HNDLR_PATH.IRKEYS_
     10553**DCL
OPEN_HNDLR_PATH.IRREC_
     10552**DCL
OPEN_HNDLR_PATH.NAME_
     10545**DCL
OPEN_HNDLR_PATH.NODENAME_
     10550**DCL
OPEN_HNDLR_PATH.PASS_
     10546**DCL
OPEN_HNDLR_PATH.PROCATTR_
     10548**DCL
OPEN_HNDLR_PATH.RECFIELD_
     10551**DCL
OPEN_HNDLR_PATH.SETSTA_
     10545**DCL
OPEN_HNDLR_PATH.SN_
     10544**DCL
OPEN_HNDLR_PATH.UATTR_
     10547**DCL
OPEN_HNDLR_PATH.V.ACS#
     10564**DCL
OPEN_HNDLR_PATH.V.ANSISPANSEQ#
     10577**DCL
OPEN_HNDLR_PATH.V.ASN#
     10563**DCL
OPEN_HNDLR_PATH.V.ATTR#
     10580**DCL
OPEN_HNDLR_PATH.V.AU#
     10582**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:386  
OPEN_HNDLR_PATH.V.BLKL#
     10570**DCL
OPEN_HNDLR_PATH.V.BLOCKED#
     10565**DCL
OPEN_HNDLR_PATH.V.BUPM#
     10566**DCL
OPEN_HNDLR_PATH.V.CHAIN#
     10579**DCL
OPEN_HNDLR_PATH.V.CNVRT#
     10573**DCL
OPEN_HNDLR_PATH.V.COMP#
     10565**DCL
OPEN_HNDLR_PATH.V.COPIES#
     10585**DCL
OPEN_HNDLR_PATH.V.CTG#
     10557**DCL
OPEN_HNDLR_PATH.V.CVOL#
     10558**DCL
OPEN_HNDLR_PATH.V.DBGDCBNO#
     10584**DCL
OPEN_HNDLR_PATH.V.DBGSYSID#
     10584**DCL
OPEN_HNDLR_PATH.V.DCBCONLGL#
     10575**DCL
OPEN_HNDLR_PATH.V.DELETE#
     10555**DCL
OPEN_HNDLR_PATH.V.DENSITY#
     10585**DCL
OPEN_HNDLR_PATH.V.DISP#
     10569**DCL
OPEN_HNDLR_PATH.V.DVFC#
     10580**DCL
OPEN_HNDLR_PATH.V.EBCDIC#
     10573**DCL
OPEN_HNDLR_PATH.V.EVENT#
     10583**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:387  
OPEN_HNDLR_PATH.V.EXIST#
     10557**DCL
OPEN_HNDLR_PATH.V.EXPIRE#
     10573**DCL
OPEN_HNDLR_PATH.V.FINDPOS#
     10559**DCL
OPEN_HNDLR_PATH.V.FUN#
     10563**DCL
OPEN_HNDLR_PATH.V.GHSTACS#
     10568**DCL
OPEN_HNDLR_PATH.V.IGNOREFSN#
     10577**DCL
OPEN_HNDLR_PATH.V.INITZ
     10554**DCL
OPEN_HNDLR_PATH.V.INITZ.REASSIGN#
     10554**DCL
OPEN_HNDLR_PATH.V.INITZ.SCRUB#
     10554**DCL
OPEN_HNDLR_PATH.V.IOERROK#
     10575**DCL
OPEN_HNDLR_PATH.V.IXTNSIZE#
     10572**DCL
OPEN_HNDLR_PATH.V.JRNLBYPASS#
     10567**DCL
OPEN_HNDLR_PATH.V.KEYL#
     10569**DCL
OPEN_HNDLR_PATH.V.KEYTYPE#
     10579**DCL
OPEN_HNDLR_PATH.V.KEYX#
     10568**DCL
OPEN_HNDLR_PATH.V.LINES#
     10583**DCL
OPEN_HNDLR_PATH.V.LOAD#
     10567**DCL
OPEN_HNDLR_PATH.V.LRDL0#
     10571**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:388  
OPEN_HNDLR_PATH.V.LSLIDE#
     10570**DCL
OPEN_HNDLR_PATH.V.LSTAOR#
     10567**DCL
OPEN_HNDLR_PATH.V.MAXVOL#
     10579**DCL
OPEN_HNDLR_PATH.V.NRECS#
     10572**DCL
OPEN_HNDLR_PATH.V.OPER
     10555**DCL
OPEN_HNDLR_PATH.V.OPER.MNTONLY#
     10557**DCL
OPEN_HNDLR_PATH.V.OPER.NXTA#
     10556**DCL
OPEN_HNDLR_PATH.V.OPER.NXTF#
     10556**DCL
OPEN_HNDLR_PATH.V.OPER.TEST#
     10555**DCL
OPEN_HNDLR_PATH.V.OPER.THISF#
     10556**DCL
OPEN_HNDLR_PATH.V.ORG#
     10564**DCL
OPEN_HNDLR_PATH.V.OVERFDE#
     10576**DCL
OPEN_HNDLR_PATH.V.QISS#
     10582**DCL
OPEN_HNDLR_PATH.V.RECL#
     10570**DCL
OPEN_HNDLR_PATH.V.SEED#
     10586**DCL
OPEN_HNDLR_PATH.V.SEEDSPECIFIED#
     10577**DCL
OPEN_HNDLR_PATH.V.SEQ#
     10581**DCL
OPEN_HNDLR_PATH.V.SEQCOL#
     10581**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:389  
OPEN_HNDLR_PATH.V.SEQID#
     10583**DCL
OPEN_HNDLR_PATH.V.SETDCB#
     10554**DCL
OPEN_HNDLR_PATH.V.SHARE#
     10558**DCL
OPEN_HNDLR_PATH.V.SPANNED#
     10566**DCL
OPEN_HNDLR_PATH.V.SPARE#
     10571**DCL
OPEN_HNDLR_PATH.V.SRCHCOND
     10559**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.ANYF#
     10562**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.ARCHIVE#
     10561**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.BAD#
     10560**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.BUF#
     10560**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.DELF#
     10559**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.NOLIST#
     10559**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.QS#
     10561**DCL
OPEN_HNDLR_PATH.V.SRCHCOND.REV#
     10562**DCL
OPEN_HNDLR_PATH.V.TERMCONLGL#
     10576**DCL
OPEN_HNDLR_PATH.V.TYPE#
     10565**DCL
OPEN_HNDLR_PATH.V.UOPT#
     10563**DCL
OPEN_HNDLR_PATH.V.VOL#
     10578**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:390  
OPEN_HNDLR_PATH.V.VOLACCESS#
     10582**DCL
OPEN_HNDLR_PATH.V.XONLY#
     10574**DCL
OPEN_HNDLR_PATH.V.XTEND#
     10574**DCL
OPEN_HNDLR_PATH.V.XTNSIZE#
     10572**DCL
OPEN_HNDLR_PATH.VIRTUAL_
     10545**DCL
OPEN_HNDLR_PATH.V_
     10544**DCL
OPEN_HNDLR_PATH.WINDOW_
     10547**DCL
PTRS$ IN PROCEDURE DISCONNECT_TEST_LINE
     12103**DCL
PTRS$.CC IN PROCEDURE DISCONNECT_TEST_LINE
     12105**DCL
PTRS$ IN PROCEDURE GEROUT_DISCONNECT
     11961**DCL
PTRS$.ST IN PROCEDURE GEROUT_DISCONNECT
     11962**DCL
PTRWD IN PROCEDURE GEROUT_ICM
     11128**DCL
PTRWD IN PROCEDURE GEROUT_STATUS_REQUEST
     12183**DCL
READ_FROM_FEP.BUF_.BUF$
     10704**DCL
READ_FROM_FEP.IDBUF_
     10705**DCL
READ_FROM_FEP.KEY_
     10701**DCL
READ_FROM_FEP.KEY_.BOUND
     10701**DCL
READ_FROM_FEP.KEY_.KEY$
     10702**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:391  
READ_FROM_FEP.V.DVBYTE
     10715**DCL
READ_FROM_FEP.V.DVBYTE.BIN#
     10716**DCL
READ_FROM_FEP.V.DVBYTE.BP#
     10715**DCL
READ_FROM_FEP.V.DVBYTE.CONT#
     10718**DCL
READ_FROM_FEP.V.DVBYTE.NODAT#
     10717**DCL
READ_FROM_FEP.V.DVBYTE.TOP#
     10715**DCL
READ_FROM_FEP.V.DVBYTE.TRANS#
     10717**DCL
READ_FROM_FEP.V.DVBYTE.VFC#
     10716**DCL
READ_FROM_FEP.V.EVENT#
     10714**DCL
READ_FROM_FEP.V.FULL#
     10707**DCL
READ_FROM_FEP.V.ID#
     10706**DCL
READ_FROM_FEP.V.IDS#
     10707**DCL
READ_FROM_FEP.V.IOERROK#
     10708**DCL
READ_FROM_FEP.V.KEYCHNG#
     10707**DCL
READ_FROM_FEP.V.KEYR#
     10706**DCL
READ_FROM_FEP.V.KEYS#
     10706**DCL
READ_FROM_FEP.V.KEYTYPE#
     10714**DCL
READ_FROM_FEP.V.ODFNC#
     10719**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:392  
READ_FROM_FEP.V.RECNUM#
     10719**DCL
READ_FROM_FEP.V.REREADPOS#
     10720**DCL
READ_FROM_FEP.V.SEED#
     10715**DCL
READ_FROM_FEP.V.SINPUTSIZE#
     10719**DCL
READ_FROM_FEP.V.STRPVFC#
     10718**DCL
READ_FROM_FEP.V.WAIT#
     10705**DCL
READ_FROM_FEP.V_
     10701**DCL
REC IN PROCEDURE DISCONNECT_TEST_LINE
     12107**DCL
RECORD IN PROCEDURE GEROUT_ICM
     11136**DCL
REL_COLTS_DCB.V_ IN PROCEDURE RELEASE_DCB
     12529**DCL
SLAVE_CONNECT.STATUS
     10437**DCL
START_HNDLR.ACCT#
     10605**DCL
START_HNDLR.FLGS
     10603**DCL
START_HNDLR.FLGS.DEBUG#
     10603**DCL
START_HNDLR.LDBYPRO#
     10603**DCL
START_HNDLR.NAME
     10604**DCL
START_HNDLR.PASS#
     10606**DCL
START_HNDLR.PROFILE#
     10606**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:393  
START_HNDLR.PROFILE#.C#
     10606**DCL
START_HNDLR.PROFILE#.T#
     10606**DCL
START_HNDLR.PSN#
     10604**DCL
TEST_XREF IN PROCEDURE SETUP_TEST_CONNECT
     11432**DCL
TOC$COLTS
        71**PROC
TOC_ERROR_CODE.FCG
     10334**DCL
TOC_ERROR_CODE.MID
     10347**DCL
TOC_ERROR_CODE.MON
     10347**DCL
TOC_ERROR_CODE.SEV
     10348**DCL
TOT$ECP
     10737**DCL
TOT$ECP.BOOT_CPU_TYPE
     10774**DCL
TOT$ECP.BREAK_ALLOWED
     10770**DCL
TOT$ECP.BREAK_RECEIVED
     10772**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
     10755**DCL
TOT$ECP.IO
     10741**DCL
TOT$ECP.IO.COUNT
     10744**DCL
TOT$ECP.IO.TYPE
     10742**DCL
TOT$ECP.ISC
     10746**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:394  
TOT$ECP.ISC.GERELC_WAIT
     10751**DCL
TOT$ECP.ISC.READ_OUT
     10747**DCL
TOT$ECP.ISC.READ_PENDING
     10753**DCL
TOT$ECP.ISC.WRITE_OUT
     10749**DCL
TOT$ECP.SUBEXEC
     10757**DCL
TOT$ECP.SUBEXEC.ADDRESS
     10760**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
     10762**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
     10768**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
     10764**DCL
TOT$ECP.TEST_REQ_
     10740**DCL
TOT$TOLTS
     10786**DCL
TOT$TOLTS.DECKFILE
     10794**DCL
TOT$TOLTS.DECKFILE.FID
     10796**DCL
TOT$TOLTS.DECKFILE.LGTH
     10795**DCL
TOT$TOLTS.LINK_DATE
     10787**DCL
TOT$TOLTS.LINK_DATE.ASCII
     10788**DCL
TOT$TOLTS.LINK_TIME
     10790**DCL
TOT$TOLTS.LINK_VERSION
     10791**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:395  
TOT$TOLTS.LINK_VERSION.LGTH
     10792**DCL
TOT$TOLTS.LINK_VERSION.TEXT
     10793**DCL
WRITE_TO_FEP.BUF_.BUF$
     10672**DCL
WRITE_TO_FEP.IDBUF_
     10672**DCL
WRITE_TO_FEP.KEY_
     10670**DCL
WRITE_TO_FEP.V.DVBYTE
     10678**DCL
WRITE_TO_FEP.V.DVBYTE.BIN#
     10679**DCL
WRITE_TO_FEP.V.DVBYTE.BP#
     10679**DCL
WRITE_TO_FEP.V.DVBYTE.CONT#
     10681**DCL
WRITE_TO_FEP.V.DVBYTE.NODAT#
     10680**DCL
WRITE_TO_FEP.V.DVBYTE.REREAD#
     10679**DCL
WRITE_TO_FEP.V.DVBYTE.RRR#
     10680**DCL
WRITE_TO_FEP.V.DVBYTE.TOP#
     10678**DCL
WRITE_TO_FEP.V.DVBYTE.TRANS#
     10680**DCL
WRITE_TO_FEP.V.EVENT#
     10678**DCL
WRITE_TO_FEP.V.FULL#
     10675**DCL
WRITE_TO_FEP.V.ID#
     10674**DCL
WRITE_TO_FEP.V.IOERROK#
     10677**DCL
PL6.E3A0      #001=TOC$COLTS File=TOC$COLTS.:E05TSI                              WED 07/30/97 06:21 Page:396  
WRITE_TO_FEP.V.KEYTYPE#
     10677**DCL
WRITE_TO_FEP.V.NEWKEY#
     10676**DCL
WRITE_TO_FEP.V.NOTIME#
     10676**DCL
WRITE_TO_FEP.V.ODFNC#
     10682**DCL
WRITE_TO_FEP.V.ONEWKEY#
     10675**DCL
WRITE_TO_FEP.V.REWRITE#
     10676**DCL
WRITE_TO_FEP.V.SEED#
     10678**DCL
WRITE_TO_FEP.V.WAIT#
     10673**DCL
WRITE_TO_FEP.V_
     10670**DCL
WRK IN PROCEDURE BUILD_CONFIG_ICM
     11357**DCL
WRK.LOWER IN PROCEDURE BUILD_CONFIG_ICM
     11359**DCL
WRK IN PROCEDURE OPEN_DCB
     11669**DCL
WRK.LOWER IN PROCEDURE OPEN_DCB
     11671**DCL
