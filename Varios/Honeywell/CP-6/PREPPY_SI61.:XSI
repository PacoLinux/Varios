/*M* ZWI$ROOT - Main driver for PREPPY */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*X* PLM=4,STI=2,IND=2,CTI=4,DCI=5,PRB=YES,ECI=3,CSI=3,THI=2,DTI=2,
     DIN=2,ENI=2,CLM=0,CCC,SQB,MCI,NTB,MOC,CCI=3,MCR=NO,NLB,MCL=0,EDMC  */
 
/*P*  NAME:     ZWI$ROOT
      PURPOSE:  This module is the overall driver PREPPY.
                It also contains the SYMDEFS for all Global data.
 
      DESCRIPTION:
                This module first does any necessary global
                initializations.  It then calls other sections
                (borrowed from the PL6 compiler) in proper order
                to accomplish PREPROCESSING of the program.
                This module also does a limited amount of cleanup
                from abort conditions.
*/
/*D*  NAME:     ZWI$PL6
      CALL:     This module should never be called.  It is the
                MAIN procedure for PREPPY.
      INTERFACE:
                SECTION DRIVERS:
                     ZW0$CTL_CARD_DRIVER
                     ZW9$PREP_DRIVER
                     ZW7$LISTING_DRIVER
                MAINTENANCE PROCEDURES:
                     ZWI$PMSTART
                     ZWI$PMEND
                     ZWH$ERR
                     ZWH$ERR$PRINT
                     ZWH$MONERR
                     ZWH$MONERR$PRINT
                LIBRARY ROUTINES:
                     XUU$OPEN
                     XUU$CLOSE
                MONITOR FUNCTIONS:
                     M$OPEN
                     M$CLOSE
                     M$EXIT
                     M$TIME
      INPUT:    None
      OUTPUT:   This module performs initialization of all
                the global data required for the rest of the
                program.  The end result of executing this
                module is preprocessing of the specified file.
      DESCRIPTION:
 ---------------
|ZWI$ROOT       |
|---------------|   ------------      - indicates procedures
|MISCELLANEOUS  |  |  PREPPY    |     * indicates data
|SUPPORT MODULES|  |COMMAND LINE|     c indicates a control path
 ---------------    ------------      d indicates a data path
          |  ||               |
          c  cc               d       N.B. the size of a procedure
          |  ||               |            or a data block does not
          |  ||               V            indicate its size or its
          |  ||     --------------         importance; this chart is
          |  ||--->|OPTIONS       |        only meant to show control
          |  |     |--------------|        and data relationships.
          |  |     |INITIALIZATION|
          |  |      --------------
          |  |
          |  |     ******** ********* **********
          |  |     *SOURCE* *UPDATES* *INCLUDES*
          |  |     ******** ********* **********
          |  |      |        |         |
          |  |      d        d         d
          |  |      |        |         |
          |  |      V        V         V
          |  |      -------------------------------------------------
          |  |---->|PREPROCESSOR                                     |
          |         -------------------------------------------------
          |         |            |      ^             |  |
          |         d            d      |             d  d
          |         |            |      d             |  |
          |         V            V      |             |  |
          |        ************ ***********           |  |
          |        *NEW SOURCE* *MACRO    *           |  |
          |        *TEMP FILE * *TEMP FILE*           |  |
          |        ************ ***********           |  |
          |         |                                 |  |
          |         d                                 |  |
          |         |                                 |  |
          |         V                                 |  |
          |                                   --------   |
          |                                  |           |
          |                                  V           V
          |                                 *********** ************
          |                                 *LISTING  * *DIAGNOSTIC*
          |                                 *TEMP FILE* *FILE      *
          |                                 *********** ************
          |                                  |           |
          |                                  d           d
          |                                  |           |
          |                                  V           V
          |         -----------------------------------------------
          |------->|LISTING GENERATOR                              |
                    -----------------------------------------------
                    |        |
                    d        d
                    |        |
                    V        V
                   ******** ********
                   *LIST  * *LIST  *
                   *SOURCE* *OBJECT*
                   ******** ********
*/
 
/*E*
    ERROR: ZWI-E$SI_UI_OPEN_ERROR-4
    MESSAGE: The error occurred while attempting to open the source or update file.
                         *** Compilation terminated ***
*/
/*E*
    ERROR: ZWI-E$TIME_ERR-4
    MESSAGE: The error occurred during a request for time stamp.
                     *** Compilation terminated ***
*/
/*E*
    ERROR: ZWI-E$LU_ERROR-2
    MESSAGE: The error occurred while attempting to open an internal file for
             the update listing. The LU option has been ignored.
*/
%EJECT;
ZWI$PL6: PROC MAIN ALTRET;
 
%INCLUDE PREPPY_C61;
 
%PAGE(ARG=Includes);
%INCLUDE PREPPY_C63;
%INCLUDE ZWI$OPTION_C;
  DCL PREPPY_OPTION_EOD BIT(1) STATIC SYMDEF INIT('1'B);
  DCL PREPPY_OPTION_USC BIT(1) STATIC SYMDEF INIT('1'B);
 
%INCLUDE PREPPY_C64;
 /***   %INCLUDE ZW2$INTERFACE_M;   ***/
%INCLUDE ZQ$INTERFACE_M;
%INCLUDE ZQY$INTERFACE_M;
%INCLUDE XU_MACRO_C;
%INCLUDE XUX$INTERFACE_M;
%INCLUDE PREPPY_C62;
 
%PAGE(ARG=Entries);
%XUU$ENTRY;
%ZW0$CTL_CARD_DRIVER;
%ZW7$LISTING_DRIVER;
%ZW9$PREP_DRIVER;
%ZWH$ERR_ENTRIES;
%IF CP6;
%ZWI$PMSTART_ENTRIES;
%ENDIF;
 
%PAGE(ARG=Global Data,PAGE=YES);
  DCL ZW4$USER_ROUTINE ENTRY(2) ALTRET;
 /*Global record number currently being processed*/
  DCL ZWI$RECNO UBIN STATIC SYMDEF INIT(0);
 /*Global input key number currently being processed*/
  DCL 1 ZWI$INPUT_KEY ALIGNED STATIC SYMDEF,
        2 TCHAR UBIN(8) UNAL INIT(ASCBIN(' ')),
        2 EDIT_VAL SBIN(28) UNAL INIT(0);
 
  DCL ZWI$VERSION_TEXT CHAR(4) ALIGNED CONSTANT SYMDEF
%IF CP6;
        INIT('A00 ');
%ELSE;
    INIT('A00 ');
%ENDIF;
 
  DCL ZWI$PROCESSOR_NAME CHAR(8) ALIGNED CONSTANT SYMDEF
 INIT('Preppy');
 
  DCL 1 ZWI$VERSION CONSTANT SYMDEF ALIGNED,
        2 LETTER CHAR(1) CALIGNED
%IF CP6;
    INIT('C'),
%ELSE;
        INIT('G'),
%ENDIF;
        2 NUMBER UBIN(9) CALIGNED
%IF CP6;
        INIT(0);
%ELSE;
    INIT(4);
%ENDIF;
 
%ZWI$SHARED_LIBRARY_NAME(STCLASS=STATIC SYMDEF);
%ZWI$ALT_SHARED_LIBRARY_NAME(STCLASS=STATIC SYMDEF);
  DCL 1 ZWI$SYSTEM_TEXT ALIGNED STATIC SYMDEF,
        2 LNGTH UBIN WORD
%IF CP6;
    INIT(3),
%ELSE;
        INIT(4),
%ENDIF;
        2 TEXT CHAR(8) CALIGNED
%IF CP6;
        INIT('CP6');
%ELSE;
    INIT('GCOS');
%ENDIF;
%IF GCOS;
  DCL ZWI$GCOS_INTERFACE_VERS CHAR(30) CALIGNED STATIC SYMDEF INIT(' ');
%ENDIF;
 
 %ZWI$PHASE_NUMBER(STCLASS=STATIC SYMDEF);
 
  DCL ZWI$UTS UBIN STATIC SYMDEF INIT(120179);
 
  DCL ZWI$COMPILE_UNIT_NUMBER UBIN STATIC SYMDEF INIT(0);
 
  DCL 1 ZWI$PROC_NAME STATIC SYMDEF,
        2 SIZE UBIN HALF UNAL INIT(SIZEC('null-proc')),
        2 TEXT CHAR(30) INIT('null-proc');
 
  DCL ZWI$TOTAL_DIAGNOSTICS UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$COMPILE_UNIT_DIAGNOSTICS UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$MAXIMUM_SEVERITY_LEVEL UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$COMPILE_UNIT_SEVERITY UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$ERROR_KEY_NUMBER UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$PROCEDURE_SIZE UBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$AUTO_SIZE SBIN STATIC SYMDEF INIT(0);
 
  DCL ZWI$CURR_PROC# UBIN STATIC SYMDEF;
 
  DCL ZWI$PROC_NEST_LEVEL# UBIN STATIC SYMDEF;
 
%ZWI$DEATH_AND_DESTRUCTION(STCLASS=STATIC SYMDEF);
%PAGE(ARG=Global Option Data,PAGE=YES);
%OPTION (STCLASS=STATIC SYMDEF);
 
%XUX$SRCH_LIST(NAME=ZWI$SRCH_LIST,ACCT_SIZE=%#ACCOUNT_SIZE,STCLASS=STATIC SYMDEF);
 
%BC (STCLASS=STATIC SYMDEF);
 
 %DEBUG (STCLASS = STATIC SYMDEF);
%IF GCOS;
  DCL ZV4$DAC_OPT BIT(1) DALIGNED SYMREF;
%ENDIF;
%IF CP6;
  DCL ZV4$DAC_OPT BIT(1) DALIGNED CONSTANT INIT('0'B);
 /* No need for gcos debugger in CP-6 */
%ENDIF;
 
%PAGE(ARG=Local Data,PAGE=YES);
  DCL SKIP BIT(1);
  DCL NEED_EOD BIT(1);
  DCL TEMP_UBIN UBIN;
  DCL CODE UBIN;
  DCL SEV# UBIN;
  DCL 1 ERRKEY ALIGNED,
        2 FCGMID BIT(18),
        2 MON# BIT(1),
        2 CODE UBIN(14) UNAL,
        2 SEV# UBIN(3) UNAL;
  DCL ABORT_FLAG BIT(1);
 
 /* Buffer used to write %EOD */
 
%PAGE (ARG=DCB Data,PAGE=YES);
 /*
    Source input file
    */
  DCL ZWI$M$SI$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$SI# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Update input file
 */
  DCL ZWI$M$UI$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$UI# SBIN STATIC SYMDEF INIT(DCBNUM(NIL));
 /*
    Object output file
    */
  DCL ZWI$M$OU$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$OU# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Line printer output
    */
  DCL ZWI$M$LO$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$LO# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
%IF CP6;
 /*
    Output of pre-processed source
    */
  DCL ZWI$M$SO$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$SO# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
%ENDIF;
 /*
    Listing file
    */
  DCL ZWI$M$LIST$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$LIST# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Update listing file
    */
  DCL ZWI$M$LU$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$LU# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Pre-processor output/lex-syntax input
    */
  DCL ZWI$M$NS$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$NS# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Pre-proccessor macro temp file
    */
  DCL ZWI$M$MAC$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$MAC# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Pre-processor system file
    */
  DCL ZWI$M$SYSTEM$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$SYSTEM# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Nesting level from lex/syntax-->listing
    */
  DCL ZWI$M$LEVEL$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$LEVEL# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Diagnostic temp file
    */
  DCL ZWI$M$DF$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$DF# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Cross reference temp file
    */
  DCL ZWI$M$XREF$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$XREF# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Lex/syntax/semantics to code-gen file
    */
  DCL ZWI$M$MIIL$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$MIIL# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Ungmap virtual file
    */
  DCL ZWI$M$VIRTUAL$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$VIRTUAL# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Gcos 8 object unit
    */
  DCL ZWI$G$OU$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$G$OU# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Gcos 8 image file
    */
  DCL ZWI$G$IMAGE$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$G$IMAGE# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Gcos keyed file
    */
  DCL ZWI$G$KEY_OU$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$G$KEY_OU# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Gcos ou save file
    */
  DCL ZWI$G$OUSAVE$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$G$OUSAVE# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Diagnostic output
    */
  DCL ZWI$M$DO$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$DO# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 /*
    Debug output dcb
    */
  DCL ZWI$M$DEBUGO$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$M$DEBUGO# SBIN STATIC SYMDEF INIT(DCBNUMNIL);
 
%PAGE(ARG=FPTS,PAGE=YES);
%FPT_TIME(FPTN=FPT_TIME,SOURCE=CLOCK,DEST=UTS);
 
%FPT_OPEN(FPTN=DEFAULT_OPEN_FPT,STCLASS=STATIC);
 
%FPT_CLOSE(FPTN=CLOSE_SAVE_FPT,DISP=SAVE,RELG=YES,STCLASS=STATIC);
 
%FPT_CLOSE(FPTN=CLOSE_RELEASE_FPT,DISP=RELEASE,STCLASS=STATIC);
 
%FPT_WRITE(FPTN=SO_WRITE_FPT,STCLASS=STATIC);
 
 %IF CP6;
 
%FPT_EXIT(FPTN=EXIT_FPT);
 
 %ENDIF;
%PAGE(ARG=Common Input Related Data,PAGE=YES);
%XUU_PARAM(FPTN=SOURCE_INPUT_PARAM,STCLASS=STATIC);
 
%PAGE(ARG=NAME TABLE GLOBAL DATA);
%VLR_GDS(FPTN=ZWI$NAME_TABLE_GDS_RESULTS,LOGSIZE=81920,REALSIZE=4096,STCLASS=STATIC SYMDEF);
 
%FPT_GDS(FPTN=ZWI$NAME_GDS,SEGSIZE=1024,STCLASS=STATIC SYMDEF);
 
  DCL ZWI$NAME_TABLE_BASE$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$NAME_TABLE_CUR$ PTR STATIC SYMDEF INIT(ADDR(NIL));
  DCL ZWI$NAME_TABLE_END$ PTR STATIC SYMDEF INIT(ADDR(NIL));
 
%PAGE(ARG=Error Data,PAGE=YES);
%B$TCB;
%B$ALT;
  DCL B$TCB$ PTR SYMREF;
  DCL ERROR_CODE BIT(36);
  DCL DCB_NUMBER UBIN;
%PAGE (ARG="ZWI Interface Structure", PAGE=YES);
%ZQ$SO_BUFFER (NAME=ZWI$SO_BUFR, STCLASS = STATIC SYMDEF);
%ZQY$PARAM(NAME = ZQY$PARAM, STCLASS = STATIC SYMDEF);
 
 
%PAGE (ARG="Machine Dependent Values", PAGE=YES);
 /* Bit counts in various hardware paths */
  DCL ZWI$BITS_IN_CHAR UBIN STATIC SYMDEF INIT(9);
  DCL ZWI$BITS_IN_HALF UBIN STATIC SYMDEF INIT(18);
  DCL ZWI$BITS_IN_WORD UBIN STATIC SYMDEF INIT(36);
  DCL ZWI$BITS_IN_PTR UBIN STATIC SYMDEF INIT(36);
  DCL ZWI$BITS_IN_EPTR UBIN STATIC SYMDEF INIT(36);
  DCL ZWI$BITS_IN_DWORD UBIN STATIC SYMDEF INIT(72);
  DCL ZWI$BITS_IN_VECTOR UBIN STATIC SYMDEF INIT(72);
  DCL ZWI$BITS_IN_DSCR UBIN STATIC SYMDEF INIT(72);
  DCL ZWI$BITS_IN_REMEMBER UBIN STATIC SYMDEF INIT(72);
  DCL ZWI$MAX_SECTION_SIZE UBIN STATIC SYMDEF INIT( 262143 );
 
 /* Maximums for declared constructs */
  DCL ZWI$MAX_ARRAY_LIM UBIN STATIC SYMDEF INIT(262142);
  DCL ZWI$MAX_CHAR_STRING UBIN STATIC SYMDEF INIT(16384);
  DCL ZWI$MAX_BIT_STRING UBIN STATIC SYMDEF INIT(72);
 /* Sizes of useful immediate fields */
  DCL ZWI$MAX_IMMED_CHARS UBIN STATIC SYMDEF INIT(4);
  DCL ZWI$MAX_IMMED_BITS UBIN STATIC SYMDEF INIT(36);
 
  DCL ZWI$NEXT_LABEL_UID UBIN STATIC SYMDEF;
  DCL ZWI$MAX_ARGS_EXTERNAL UBIN STATIC SYMDEF;
  DCL ZWI$CONSTANT_BASE SBIN STATIC SYMDEF;
  DCL ZWI$CONSTANT_SIZE SBIN STATIC SYMDEF;
  DCL ZWI$MAX_ARGS_DOMAIN SBIN STATIC SYMDEF;
  DCL ZWI$ISSID# SBIN STATIC SYMDEF;
  DCL ZWI$NULLSID# SBIN STATIC SYMDEF;
 
%PAGE(ARG=Basic Initialization,PAGE=YES);
 
    NEED_EOD = '0'B;
    ZWI$CURR_PROC# = 0;
    ZWI$PROC_NEST_LEVEL# = 0;
    ZWI$RECNO = 0;
    ZWI$INPUT_KEY.EDIT_VAL = 0;
    ZWI$INPUT_KEY.TCHAR = ASCBIN(' ');
    ZWI$COMPILE_UNIT_NUMBER = 0;
    ZWI$BC_CNT = 0;
    ZWI$BC_NBRS = '0'B;
    ZWI$SRCH_LIST.NUM = 0;
    ZWI$TOTAL_DIAGNOSTICS = 0;
    ZWI$MAXIMUM_SEVERITY_LEVEL = 0;
    ABORT_FLAG = '0'B;
    ZWI$COMPILE_UNIT_SEVERITY = 0;
    ZWI$COMPILE_UNIT_DIAGNOSTICS = 0;
    ZWI$ERROR_KEY_NUMBER = 0;
    REMEMBER ABORT IN ZWI$DEATH_AND_DESTRUCTION;
 /*
    Process options and
    set dcb type things
    */
    CALL ZW0$CTL_CARD_DRIVER ALTRET(ABORT);
 
%IF CP6;
    IF ZWI$DEBUG_FLAGS(4)
      THEN CALL ZWI$PMSTART;
%ENDIF;
 /*
    open up debug file if any flags
    are set. if any errors occur,
    just reset the debug flags and
    continue.
    */
    IF ZWI$DEBUG_FLAGS
      THEN DO;
        DEFAULT_OPEN_FPT.V.DCB# = ZWI$M$DEBUGO#;
        CALL M$OPEN(DEFAULT_OPEN_FPT) ALTRET(DEBUG_OPEN_ERROR);
        DO WHILE '0'B;
DEBUG_OPEN_ERROR: ;
          ZWI$DEBUG_FLAGS = '0'B;
          END;
        END;
 
 /*
    Set up relevant machine-dependent constants
    */
    DO CASE ZWI$OPTION.SYSTEM;
       CASE( %$CP6, %$GCOS );
         ZWI$BITS_IN_CHAR = 9;
         ZWI$BITS_IN_HALF = 18;
         ZWI$BITS_IN_WORD = 36;
         ZWI$BITS_IN_DWORD = 72;
         ZWI$BITS_IN_PTR = 36;
         ZWI$BITS_IN_EPTR = 36;
         ZWI$BITS_IN_VECTOR = 72;
         ZWI$BITS_IN_DSCR = 72;
         ZWI$BITS_IN_REMEMBER = 72;
         ZWI$MAX_SECTION_SIZE = 262143;
         ZWI$MAX_ARRAY_LIM = 262142;
         ZWI$MAX_BIT_STRING = 72;
         ZWI$MAX_IMMED_CHARS = 1;
         ZWI$MAX_CHAR_STRING = 16384;
         ZWI$MAX_IMMED_BITS = 18;
       CASE( %$L6 );
         ZWI$BITS_IN_CHAR = 8;
         ZWI$BITS_IN_HALF = 8;
         ZWI$BITS_IN_WORD = 16;
         ZWI$BITS_IN_DWORD = 32;
         ZWI$BITS_IN_EPTR = 32;
         ZWI$BITS_IN_VECTOR = 48;
         ZWI$BITS_IN_DSCR = 0;
         ZWI$BITS_IN_REMEMBER = 64;
         ZWI$BITS_IN_PTR = 32;
         ZWI$MAX_SECTION_SIZE = 65535;
         ZWI$MAX_ARRAY_LIM = 32767;
         ZWI$MAX_BIT_STRING = 32;
         ZWI$MAX_IMMED_CHARS = 1;
         ZWI$MAX_CHAR_STRING = 16384;
         ZWI$MAX_IMMED_BITS = 16;
       CASE( %$MULTICS );
       END;
 
    DO CASE ZWI$OPTION.SYSTEM;
 
       CASE( %$CP6 );
         ZWI$SYSTEM_TEXT.TEXT = 'CP6';
         ZWI$SYSTEM_TEXT.LNGTH = 3;
 
       CASE( %$GCOS );
         ZWI$SYSTEM_TEXT.TEXT = 'GCOS';
         ZWI$SYSTEM_TEXT.LNGTH = 4;
 
       CASE( %$L6 );
         ZWI$SYSTEM_TEXT.TEXT = 'L6';
         ZWI$SYSTEM_TEXT.LNGTH = 2;
 
       CASE( %$MULTICS );
         ZWI$SYSTEM_TEXT.TEXT = 'MULTICS';
         ZWI$SYSTEM_TEXT.LNGTH = 7;
 
       CASE( ELSE );
         ZWI$SYSTEM_TEXT.TEXT = 'UNKNOWN';
         ZWI$SYSTEM_TEXT.LNGTH = 7;
 
       END;
 
%EJECT;
MAIN_COMPILE_LOOP:
    DO WHILE( ZWI$OPTION.BC );
 /*
    check to see if the updates are
    to be listed. if so open up the
    temparary lu file.
    */
      IF ZWI$OPTION.LU
        THEN DO;
          DEFAULT_OPEN_FPT.V.DCB# = ZWI$M$LU#;
          CALL M$OPEN(DEFAULT_OPEN_FPT) ALTRET(LU_OPEN_ERROR);
          DO WHILE '0'B;
LU_OPEN_ERROR: ;
            ERROR_CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
            CALL ZWH$MONERR( ZWI$RECNO, ZWI$INPUT_KEY, ERROR_CODE, ZWI$M$LU# );
            CALL ZWH$ERR( ZWI$RECNO, ZWI$INPUT_KEY, %ZWI$FCG_MID, %E$LU_ERROR, 2 );
            ZWI$OPTION.LU = '0'B;
            END;
          END;
 /*
    if first time then open up the
    source files. etc.
    */
      IF ZWI$COMPILE_UNIT_NUMBER = 0
        THEN DO;
          SOURCE_INPUT_PARAM = '0'B;
          IF ZWI$OPTION.LU
            THEN DO;
              SOURCE_INPUT_PARAM.FLAGS.LU_WHILE# = '1'B;
              SOURCE_INPUT_PARAM.DCB# = ZWI$M$LU#;
              END;
          SOURCE_INPUT_PARAM.FLAGS.BASE# = '1'B;
          SOURCE_INPUT_PARAM.FLAGS.UP_DATE# = ZWI$OPTION.UI;
%IF CP6;
          SOURCE_INPUT_PARAM.FLAGS.OPT_UI# = ZWI$OPTION.OPTUI;
%ENDIF;
          CALL XUU$OPEN(SOURCE_INPUT_PARAM) ALTRET(SOURCE_OPEN_ERROR);
 
          SOURCE_INPUT_PARAM = '0'B;
          SOURCE_INPUT_PARAM.FLAGS.CLOSE_ALL# = '1'B;
          END;
 /*
    If the preppy option eod is on and more than one external
    compile unit is being preprocessed, it is necessary to write
    a %EOD to the preprocessed soruce file thru M$SO.
    */
      IF PREPPY_OPTION_EOD AND NEED_EOD THEN
        DO;
          ZWI$SO_BUFR.TEXT = '%EOD;';
          SO_WRITE_FPT.BUF_ = VECTOR(ZWI$SO_BUFR);
          SO_WRITE_FPT.BUF_.BOUND = 4 + %SO_BUF_HEADER;
          SO_WRITE_FPT.V.DCB# = ZWI$M$SO#;
          CALL M$WRITE(SO_WRITE_FPT) ALTRET (LIST_AND_ABORT);
          ZWI$SO_BUFR.TEXT = ' ';
          NEED_EOD = '0'B;
          END;
 /*
    get time for this compile unit.  this
    goes into the heading and the uts in
    the object unit.
    */
      FPT_TIME.TSTAMP_ = VECTOR(ZWI$UTS);
      CALL M$TIME(FPT_TIME) ALTRET(TIME_ERROR);
 
      ZWI$PHASE_NUMBER = %$PREPROCESS;
      ZWI$COMPILE_UNIT_NUMBER = ZWI$COMPILE_UNIT_NUMBER + 1;
      ZWI$PROC_NAME.SIZE = SIZEC('null-proc');
      ZWI$PROC_NAME.TEXT = 'null-proc';
 
 /*
    Check to see if we need to skip
    a compile unit
    */
      IF ZWI$BC_CNT > 0
        THEN DO;
          SKIP = '1'B;
          DO TEMP_UBIN = 0 TO %(#BC_MAX-1);
            IF ZWI$COMPILE_UNIT_NUMBER = ZWI$BC_NBRS(TEMP_UBIN)
              THEN DO;
                SKIP = '0'B;
                IF ZWI$BC_CNT > 1 THEN NEED_EOD = '1'B;
                ZWI$BC_CNT = ZWI$BC_CNT - 1;
 /*
    See if we have compiled all
    specified compile units.
    */
                IF ZWI$BC_CNT <= 0
                  THEN ZWI$OPTION.BC = '0'B;
                END;
            END;
          END;
        ELSE DO;
          SKIP = '0'B;
          NEED_EOD = '1'B;
          END;
 
      CALL ZW9$PREP_DRIVER(SKIP) ALTRET(LIST_AND_ABORT);
 
      IF SKIP
        THEN GOTO LIST_PHASE;
 
 /*  Close and release the newsource file.  Normally this */
 /*  would be done in the front end. */
      CLOSE_RELEASE_FPT.V.DCB# = ZWI$M$NS#;
      CALL M$CLOSE(CLOSE_RELEASE_FPT) ALTRET(LIST_AND_ABORT);
 
      DO WHILE '0'B;
LIST_AND_ABORT: ;
        ZWI$OPTION.BC = '0'B;
        ZWI$OPTION.LO = '0'B;
        ZWI$OPTION.PM = '0'B;
        ZWI$OPTION.DM = '0'B;
        ZWI$OPTION.MDM = '0'B;
        ZWI$OPTION.XREF = '0'B;
        ZWI$OPTION.UREF = '0'B;
 
        ABORT_FLAG = '1'B;
        END;
LIST_PHASE: ;
 
      ZWI$PHASE_NUMBER = %$LISTING;
      ZWI$TOTAL_DIAGNOSTICS = ZWI$TOTAL_DIAGNOSTICS + ZWI$COMPILE_UNIT_DIAGNOSTICS;
 
 /* Set up parameters to the listing driver */
 
      ZQY$PARAM.DO_NOT_PREPROCESS = SKIP;
      ZQY$PARAM.RECNO$ = ADDR(ZWI$RECNO);
      ZQY$PARAM.INPUT_KEY$ = ADDR (ZWI$INPUT_KEY);
      ZQY$PARAM.DCB_NUM.ERR_FILE = ZWI$M$DF#;
      ZQY$PARAM.DCB_NUM.LIST_SOURCE_FILE = ZWI$M$LIST#;
      ZQY$PARAM.DCB_NUM.LEVEL_FILE = ZWI$M$LEVEL#;
      ZQY$PARAM.DCB_NUM.DIAGNOSTIC_OUTPUT_FILE = ZWI$M$DO#;
      ZQY$PARAM.DCB_NUM.OBJECT_UNIT_FILE = ZWI$M$OU#;
      ZQY$PARAM.DCB_NUM.XREF_FILE = ZWI$M$XREF#;
      ZQY$PARAM.DCB_NUM.OBJECT_LISTING_FILE = ZWI$M$LO#;
      ZQY$PARAM.DCB_NUM.SOURCE_INPUT_FILE = ZWI$M$SI#;
      ZQY$PARAM.DCB_NUM.UPDATE_FILE = ZWI$M$LU#;
      ZQY$PARAM.UPDATE_FILE_PTR$ = ZWI$M$LU$;
      ZQY$PARAM.LEVEL_FILE_PTR$ = ZWI$M$LEVEL$;
      ZQY$PARAM.PROC_NAME.SIZE = ZWI$PROC_NAME.SIZE;
      ZQY$PARAM.PROC_NAME.TEXT = ZWI$PROC_NAME.TEXT;
      ZQY$PARAM.PROCESSOR_NAME = ZWI$PROCESSOR_NAME;
      ZQY$PARAM.VERSION_NAME = ZWI$VERSION_TEXT;
%IF GCOS;
      ZQY$PARAM.GCOS_INTERFACE_VERSION = ZWI$GCOS_INTERFACE_VERS;
%ENDIF;
      ZQY$PARAM.NUM_COMPILE_UNIT_DIAGNOSTICS = ZWI$COMPILE_UNIT_DIAGNOSTICS;
      ZQY$PARAM.COMPILE_UNIT_NUMBER = ZWI$COMPILE_UNIT_NUMBER;
      ZQY$PARAM.COMPILE_UNIT_SEVERITY = ZWI$COMPILE_UNIT_SEVERITY;
      ZQY$PARAM.PRINT_GENERIC_ERR$$ = ENTADDR (ZWH$ERR$PRINT);
      ZQY$PARAM.PRINT_MONITOR_ERR$$ = ENTADDR (ZWH$MONERR$PRINT);
      ZQY$PARAM.PRINT_MESSAGE$$ = ENTADDR (ZWH$MESSAGE);
      ZQY$PARAM.PRINT_MESSAGE_NO_DO$$ = ENTADDR (ZWH$MESSAGE_NO_DO);
      ZQY$PARAM.LISTING_WIDTH = ZWI$OPTION.WIDTH;
      ZQY$PARAM.OUTPUT_SIZE_INFO = '0'B;
      ZQY$PARAM.PROCEDURE_SIZE = ZWI$PROCEDURE_SIZE;
      ZQY$PARAM.AUTO_SIZE = ZWI$PROCEDURE_SIZE;
      ZQY$PARAM.TOTAL_DIAGNOSTICS = ZWI$TOTAL_DIAGNOSTICS;
      ZQY$PARAM.UTS = ZWI$UTS;
 
      CALL ZW7$LISTING_DRIVER (ZQY$PARAM) ALTRET( ABORT );
 
      ZWI$MAXIMUM_SEVERITY_LEVEL = MAXIMUM( ZWI$COMPILE_UNIT_SEVERITY,
          ZWI$MAXIMUM_SEVERITY_LEVEL );
 
      IF ZWI$OPTION.LU
        THEN DO;
          CLOSE_RELEASE_FPT.V.DCB# = ZWI$M$LU#;
          CALL M$CLOSE(CLOSE_RELEASE_FPT) ALTRET(IGNORE_LU_CLOSE_ERR);
IGNORE_LU_CLOSE_ERR: ;
          END;
      ZWI$COMPILE_UNIT_SEVERITY = 0;
      ZWI$COMPILE_UNIT_DIAGNOSTICS = 0;
      ZWI$ERROR_KEY_NUMBER = 0;
 
      END MAIN_COMPILE_LOOP;
%EJECT;
    DO WHILE '0'B;
ABORT: ;
      ABORT_FLAG = '1'B;
      END;
 
QUIT: ;
    IF ZWI$OPTION.OU OR ZWI$OPTION.LO OR ZWI$OPTION.PM
        OR ZWI$OPTION.DM OR ZWI$OPTION.MDM
      THEN DO;
        CLOSE_SAVE_FPT.V.DCB# = ZWI$M$OU#;
        CALL M$CLOSE( CLOSE_SAVE_FPT ) ALTRET( IGNORE_OU_CLOSE_ERROR );
IGNORE_OU_CLOSE_ERROR: ;
        END;
 
    CLOSE_SAVE_FPT.V.DCB# = ZWI$M$LO#;
    CALL M$CLOSE(CLOSE_SAVE_FPT) ALTRET(IGNORE_LO_CLOSE_ERROR);
IGNORE_LO_CLOSE_ERROR: ;
 
    IF ZWI$DEBUG_FLAGS
      THEN DO;
        CLOSE_SAVE_FPT.V.DCB# = ZWI$M$DEBUGO#;
        CALL M$CLOSE(CLOSE_SAVE_FPT) ALTRET(IGNORE_DEBUG_CLOSE_ERROR);
IGNORE_DEBUG_CLOSE_ERROR: ;
        END;
 
    IF ZWI$OPTION.DO_LO_SAME = '0'B
      THEN DO;
        CLOSE_SAVE_FPT.V.DCB# = ZWI$M$DO#;
        CALL M$CLOSE(CLOSE_SAVE_FPT) ALTRET(IGNORE_DO_CLOSE_ERROR);
IGNORE_DO_CLOSE_ERROR: ;
        END;
 
    CALL XUU$CLOSE(SOURCE_INPUT_PARAM) ALTRET(IGNORE_SOURCE_INPUT_ERROR);
IGNORE_SOURCE_INPUT_ERROR: ;
 
%IF CP6;
    IF ZWI$DEBUG_FLAGS(4)
      THEN CALL ZWI$PMEND;
 
    IF ABORT_FLAG
      THEN ZWI$MAXIMUM_SEVERITY_LEVEL = 15;
 
    IF ZWI$MAXIMUM_SEVERITY_LEVEL = 0
      THEN EXIT_FPT.V.STEPCC# = 0;
      ELSE DO;
        IF ZWI$MAXIMUM_SEVERITY_LEVEL <= 7
          THEN EXIT_FPT.V.STEPCC# = 2;
          ELSE EXIT_FPT.V.STEPCC# = 4;
        END;
 
    CALL M$EXIT(EXIT_FPT);
%ENDIF;
 
    RETURN;
 
 %PAGE(ARG=ERROR PROCESSING);
SOURCE_OPEN_ERROR: ;
    IF SOURCE_INPUT_PARAM.SI_ERRCODE = '0'B
      THEN ERROR_CODE = SOURCE_INPUT_PARAM.UI_ERRCODE;
      ELSE ERROR_CODE=SOURCE_INPUT_PARAM.SI_ERRCODE;
    DCB_NUMBER = SOURCE_INPUT_PARAM.DCB#;
 
    CALL ZWH$MONERR$PRINT(0,0,ERROR_CODE,DCB_NUMBER);
    CALL ZWH$ERR$PRINT( 0, 0, %ZWI$FCG_MID, %E$SI_UI_OPEN_ERROR, 4 );
 
    GOTO ABORT;
 
TIME_ERROR: ;
    ERROR_CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    CALL ZWH$MONERR(ZWI$RECNO,ZWI$INPUT_KEY,ERROR_CODE,0);
    CALL ZWH$ERR( ZWI$RECNO, ZWI$INPUT_KEY, %ZWI$FCG_MID, %E$TIME_ERR, 4 );
 
    GOTO ABORT;
 
END ZWI$PL6;
