VERSION B06

PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:1    
        1        1        /*M* VMD$SUBR - Suport routines for DISPLAY and LIST functions */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*F*
        9        9             NAME: VMD$EJECT
       10       10             PURPOSE:
       11       11                  To eject to the top of the next page.
       12       12             DESCRIPTION:
       13       13                  This routine is used when DISPLAYing messages and the user
       14       14                  wants them to appear on seperate pages, or whenever the user
       15       15                  wants to start any output from the DISPLAY or LIST commands
       16       16                  on a new page.
       17       17
       18       18        */
       19       19        VMD$EJECT: PROC (DCB#) ALTRET;
       20       20        /***** Include files *****/
       21       21          %INCLUDE CP_6;
       22     5580          %INCLUDE CP_6_SUBS;
       23     6120        /***** Parameters *****/
       24     6121    1   DCL DCB# UBIN WORD;
       25     6122        /***** Fpts *****/
       26     6123          %FPT_DEVICE (FPTN=EJECT_PAGE,PAGE=YES);
       27     6141        %EJECT;
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:2    
       28     6142    1       EJECT_PAGE.V.DCB# = DCB#;
       29     6143    1       CALL M$DEVICE (EJECT_PAGE) ALTRET(E_PMME);
       30     6144    1       RETURN;
       31     6145        /**/
       32     6146    1   E_PMME:
       33     6147    1       ALTRETURN;
       34     6148    1   END VMD$EJECT;
       35     6149        %EOD;

PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:3    
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$EJECT.

   Procedure VMD$EJECT requires 11 words for executable code.
   Procedure VMD$EJECT requires 4 words of local(AUTO) storage.

PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:4    

 Object Unit name= VMD$EJECT                                  File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:11:59.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    10     12  VMD$EJECT
    2   Proc  even  none    11     13  VMD$EJECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  VMD$EJECT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:5    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:6    


        1        1        /*M* VMD$SUBR - Suport routines for DISPLAY and LIST functions */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*F*
        9        9             NAME: VMD$EJECT
       10       10             PURPOSE:
       11       11                  To eject to the top of the next page.
       12       12             DESCRIPTION:
       13       13                  This routine is used when DISPLAYing messages and the user
       14       14                  wants them to appear on seperate pages, or whenever the user
       15       15                  wants to start any output from the DISPLAY or LIST commands
       16       16                  on a new page.
       17       17
       18       18        */
       19       19        VMD$EJECT: PROC (DCB#) ALTRET;

     19  2 000000   000000 700200 xent  VMD$EJECT    TSX0  ! X66_AUTO_1
         2 000001   000004 000001                    ZERO    4,1

       20       20        /***** Include files *****/
       21       21          %INCLUDE CP_6;
       22     5580          %INCLUDE CP_6_SUBS;
       23     6120        /***** Parameters *****/
       24     6121    1   DCL DCB# UBIN WORD;
       25     6122        /***** Fpts *****/
       26     6123          %FPT_DEVICE (FPTN=EJECT_PAGE,PAGE=YES);
       27     6141        %EJECT;
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:7    
       28     6142    1       EJECT_PAGE.V.DCB# = DCB#;

   6142  2 000002   200003 470500                    LDP0    @DCB#,,AUTO
         2 000003   000000 720100                    LXL0    0,,PR0
         2 000004   000006 740000 1                  STX0    EJECT_PAGE+6

       29     6143    1       CALL M$DEVICE (EJECT_PAGE) ALTRET(E_PMME);

   6143  2 000005   000000 630400 1                  EPPR0   EJECT_PAGE
         2 000006   450006 713400                    CLIMB   alt,+20486
         2 000007   401000 401760                    pmme    nvectors=3
         2 000010   000012 702000 2                  TSX2    E_PMME

       30     6144    1       RETURN;

   6144  2 000011   000000 702200 xent               TSX2  ! X66_ARET

       31     6145        /**/
       32     6146    1   E_PMME:
       33     6147    1       ALTRETURN;

   6147  2 000012   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

EJECT_PAGE
 Sect OctLoc
   1     000   000003 777640   000006 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 300111   040040 040040    ...........I
   1     010   000000 000000   000000 000000                                    ........
       34     6148    1   END VMD$EJECT;
       35     6149        %EOD;

PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:8    
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$EJECT.
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:9    

 **** Variables and constants ****

  ****  Section 001  Data  VMD$EJECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 EJECT_PAGE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB#                     *0-0-0/w UBIN        r     1 DCB#

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure VMD$EJECT requires 11 words for executable code.
   Procedure VMD$EJECT requires 4 words of local(AUTO) storage.
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VMD$EJECT File=VMD$SUBR.:VMB6TSI                              WED 08/20/97 15:11 Page:11   
          MINI XREF LISTING

DCB#
      6121**DCL        19--PROC     6142>>ASSIGN
EJECT_PAGE
      6134**DCL      6143<>CALL
EJECT_PAGE.V
      6135**DCL      6134--DCLINIT
EJECT_PAGE.V.DCB#
      6135**DCL      6142<<ASSIGN
E_PMME
      6147**LABEL    6143--CALLALT
M$DEVICE
      5512**DCL-ENT  6143--CALL

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:12   
       36        1        /*T***********************************************************/
       37        2        /*T*                                                         */
       38        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       39        4        /*T*                                                         */
       40        5        /*T***********************************************************/
       41        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
       42        7        /*F*
       43        8             NAME: VMD$GET_HEADER
       44        9             PURPOSE:
       45       10                  To read a specified VM_HEADER record from the mail folder.
       46       11             DESCRIPTION:
       47       12                  None.
       48       13        */
       49       14        VMD$GET_HEADER: PROC (MESSAGE_NUMBER,DCB#) ALTRET;
       50       15        /***** Include files *****/
       51       16          %INCLUDE B_ERRORS_C;
       52     1143          %INCLUDE B_SEGIDS_C;
       53     1682          %INCLUDE CP_6;
       54     7241          %INCLUDE CP_6_SUBS;
       55     7781          %INCLUDE VM_MACRO_C;
       56     9049          %INCLUDE VM_DATA_R;
       57     9480          %VM_KEYTYPES;
       58     9501        /***** Parameters *****/
       59     9502    1   DCL MESSAGE_NUMBER UBIN WORD;
       60     9503    1   DCL DCB# UBIN WORD;
       61     9504        /***** Fpts *****/
       62     9505          %FPT_READ (FPTN=READ_HEADER,KEY=VM_HEADKEY,KEYS=YES);
       63     9544          %FPT_READ (FPTN=READ_RELATIVE,KEY=VM_HEADKEY,KEYR=YES,KEYS=NO);
       64     9583          %FPT_WRITE (FPTN=WRITE_HEADER,KEY=VM_HEADKEY,ONEWKEY=YES);
       65     9614          %FPT_DELREC (FPTN=DELETE_HEADER,KEY=VM_HEADKEY);
       66     9633          %FPT_PRECORD (FPTN=MOVE_HEADER,KEY=VM_HEADKEY,KEYR=YES,KEYS=YES);
       67     9654          %VLP_VECTOR (STCLASS=AUTO);
       68     9669        /***** External routines *****/
       69     9670    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
       70     9671        /***** Mail structures *****/
       71     9672          %VM_HEADER (STCLASS="BASED(VM_HEADER$)");
       72     9801          %VM_INFOKEY (NAME=VM_HEADKEY,TYP=%VM_TYPE_HEAD);
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:13   
       73     9818          %VM_INFOKEY (NAME=C_VM_HEADKEY,TYP=%VM_TYPE_HEAD,STCLASS=CONSTANT);
       74     9835        /***** Based structures *****/
       75     9836          %B$TCB (STCLASS="BASED(B$TCB$)");
       76     9839          %B$ALT;
       77     9847        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:14   
       78     9848    1       CALL SETUP_KEY;
       79     9849    1       READ_HEADER.V.DCB# = DCB#;
       80     9850    1   READ_AGAIN:
       81     9851    1       READ_HEADER.BUF_ = VM_HEADER_;     /* Symref data */
       82     9852    1       CALL M$READ (READ_HEADER) ALTRET(E_READ);
       83     9853    1       VLP_VECTOR = VM_HEADER_;
       84     9854    1       VM_HEADER.HEADER_SIZE = (VLP_VECTOR.W1.VSIZE#+1)/4;
       85     9855    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */
       86     9856    1       RETURN;
       87     9857        /**/
       88     9858    1   E_READ:
       89     9859    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
       90     9860    1       THEN
       91     9861    2       DO;                           /* Enlarge the segment and try again */
       92     9862    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);
       93     9863    2           GOTO READ_AGAIN;
       94     9864    2       END;
       95     9865    1       ELSE ALTRETURN;
       96     9866        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:15   
       97     9867        /*F*
       98     9868             NAME: VMD$GET_HEADER_NEXT
       99     9869             PURPOSE:
      100     9870                  To read the next VM_HEADER record after the one specified.
      101     9871             DESCRIPTION:
      102     9872                  This routine will read the header record of the message
      103     9873                  specified in in MESSAGE_NUMBER or the one immediately
      104     9874                  following that number if it is unavailable. The number
      105     9875                  of the message actually read will be returned in
      106     9876                  MESSAGE_NUMBER. Therefore, it may not be a constant.
      107     9877
      108     9878                  If no more HEADERs exist, then this routine will
      109     9879                  ALTRETURN with MESSAGE_NUMBER equal to zero. This is
      110     9880                  the only case where MESSAGE_NUMBER should be zero.
      111     9881        */
      112     9882    1   VMD$GET_HEADER_NEXT: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;
      113     9883    1       CALL SETUP_KEY;
      114     9884    1       MOVE_HEADER.V.DCB# = DCB#;
      115     9885    1       MOVE_HEADER.V.N# = 0;
      116     9886    1   READ_HN_AGAIN:
      117     9887    1       CALL M$PRECORD (MOVE_HEADER) ALTRET(E_PRECORD1);
      118     9888    1   E_PRECORD1: ;                           /* Ignore it */
      119     9889    1       READ_RELATIVE.V.DCB# = DCB#;
      120     9890    1       READ_RELATIVE.BUF_ = VM_HEADER_;
      121     9891    1       CALL M$READ (READ_RELATIVE) ALTRET(E_READ_HN);
      122     9892        /*
      123     9893             ***** If the record read is not a header record,
      124     9894                   then ALTRETURN...
      125     9895        */
      126     9896    1       IF VM_HEADKEY.TYPE ~= %VM_TYPE_HEAD
      127     9897    1       THEN
      128     9898    2       DO;
      129     9899    2           MESSAGE_NUMBER = 0;
      130     9900    2           ALTRETURN;
      131     9901    2       END;
      132     9902    1       MESSAGE_NUMBER = VM_HEADKEY.MESSAGE_NUMBER;
      133     9903    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:16   
      134     9904    1       RETURN;
      135     9905        /**/
      136     9906    1   E_READ_HN:
      137     9907    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
      138     9908    1       THEN
      139     9909    2       DO;
      140     9910    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);
      141     9911    2           GOTO READ_HN_AGAIN;
      142     9912    2       END;
      143     9913    1       ELSE ALTRETURN;
      144     9914        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:17   
      145     9915        /*F*
      146     9916             NAME: VMD$GET_HEADER_PREV
      147     9917             PURPOSE:
      148     9918                  To read the next VM_HEADER record after the one specified.
      149     9919             DESCRIPTION:
      150     9920                  This routine will read the next header record following the
      151     9921                  one specified in MESSAGE_NUMBER. The number of the message
      152     9922                  actually read will be returned in MESSAGE_NUMBER. Therefore,
      153     9923                  MESSAGE_NUMBER may not be a constant.
      154     9924
      155     9925                  If no more HEADERs exist, then this routine will
      156     9926                  ALTRETURN with MESSAGE_NUMBER equal to zero. This is
      157     9927                  the only case where MESSAGE_NUMBER should be zero.
      158     9928        */
      159     9929    1   VMD$GET_HEADER_PREV: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;
      160     9930        /*
      161     9931             ***** If the message requested is before 1
      162     9932                   then this is an error ...
      163     9933        */
      164     9934    1       IF MESSAGE_NUMBER = 1
      165     9935    1       THEN
      166     9936    2       DO;
      167     9937    2           MESSAGE_NUMBER = 0;
      168     9938    2           ALTRETURN;
      169     9939    2       END;
      170     9940    1       CALL SETUP_KEY;
      171     9941    1       MOVE_HEADER.V.DCB# = DCB#;
      172     9942    1       MOVE_HEADER.V.N# = -1;
      173     9943    1   READ_HP_AGAIN:
      174     9944    1       CALL M$PRECORD (MOVE_HEADER) ALTRET(E_PRECORD2);
      175     9945    1   E_PRECORD2: ;                           /* Ignore it */
      176     9946    1       READ_RELATIVE.V.DCB# = DCB#;
      177     9947    1       READ_RELATIVE.BUF_ = VM_HEADER_;
      178     9948    1       CALL M$READ (READ_RELATIVE) ALTRET(E_READ_HP);
      179     9949        /*
      180     9950             ***** If the record read is not a header record,
      181     9951                   then ALTRETURN...
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:18   
      182     9952        */
      183     9953    1       IF VM_HEADKEY.TYPE ~= %VM_TYPE_HEAD
      184     9954    1       THEN
      185     9955    2       DO;
      186     9956    2           MESSAGE_NUMBER = 0;
      187     9957    2           ALTRETURN;
      188     9958    2       END;
      189     9959    1       MESSAGE_NUMBER = VM_HEADKEY.MESSAGE_NUMBER;
      190     9960    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */
      191     9961    1       RETURN;
      192     9962        /**/
      193     9963    1   E_READ_HP:
      194     9964    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
      195     9965    1       THEN
      196     9966    2       DO;
      197     9967    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);
      198     9968    2           GOTO READ_HP_AGAIN;
      199     9969    2       END;
      200     9970    1       ELSE ALTRETURN;
      201     9971        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:19   
      202     9972    1   VMD$PUT_HEADER: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;
      203     9973    1       CALL SETUP_KEY;
      204     9974    1       WRITE_HEADER.V.DCB# = DCB#;
      205     9975    1       WRITE_HEADER.BUF_ = VM_HEADER_;    /* Symref data */
      206     9976    1       VM_HEADER.HEADER_SIZE = POFFW(VM_HEADER.NEXT$,ADDR(VM_HEADER));
      207     9977    1       WRITE_HEADER.BUF_.BOUND = (VM_HEADER.HEADER_SIZE * 4) - 1;
      208     9978    1       CALL M$WRITE (WRITE_HEADER) ALTRET(E_PMME);
      209     9979    1       RETURN;
      210     9980        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:20   
      211     9981    1   VMD$DEL_HEADER: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;
      212     9982    1       CALL SETUP_KEY;
      213     9983    1       DELETE_HEADER.V.DCB# = DCB#;
      214     9984    1       CALL M$DELREC (DELETE_HEADER) ALTRET(E_PMME);
      215     9985    1       RETURN;
      216     9986        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:21   
      217     9987    1   E_PMME:
      218     9988    1       ALTRETURN;
      219     9989        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:22   
      220     9990    1   SETUP_KEY: PROC;
      221     9991    2       VM_HEADKEY = C_VM_HEADKEY;
      222     9992    2       VM_HEADKEY.MESSAGE_NUMBER = MESSAGE_NUMBER;
      223     9993    2       RETURN;
      224     9994    2   END SETUP_KEY;
      225     9995        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:23   
      226     9996        /********************************************************************/
      227     9997        /*I*
      228     9998             NAME: SET_POINTERS
      229     9999             PURPOSE: This routine will set the pointers in the header to
      230    10000                   DS8 instead of DS2. In A02 MAIL, the header is read in to
      231    10001                   DS8 instead of DS2. By modifying the pointers, A02 MAIL can
      232    10002                   process pre-A02 messages.
      233    10003        */
      234    10004        /********************************************************************/
      235    10005    1   SET_POINTERS: PROC;
      236    10006
      237    10007    2       IF VM_HEADER.STATUS.RESERVED ~= '0'B
      238    10008    3       THEN DO;
      239    10009    3           VM_HEADER.STATUS.PRE_B00 = %YES#;
      240    10010    3           VM_HEADER.STATUS.RRACK = %NO#;
      241    10011    3           VM_HEADER.STATUS.RESERVED = '0'B;
      242    10012    3       END;
      243    10013    2       CALL CHECK_POINTER(VM_HEADER.FREE$);
      244    10014    2       CALL CHECK_POINTER(VM_HEADER.NEXT$);
      245    10015    2       CALL CHECK_POINTER(VM_HEADER.BAD_ADDRESS$);
      246    10016    2       CALL CHECK_POINTER(VM_HEADER.BLIND$);
      247    10017    2       CALL CHECK_POINTER(VM_HEADER.COPY$);
      248    10018    2       CALL CHECK_POINTER(VM_HEADER.FILE_FOLDER$);
      249    10019    2       CALL CHECK_POINTER(VM_HEADER.FROM$);
      250    10020    2       CALL CHECK_POINTER(VM_HEADER.REFERENCE$);
      251    10021    2       CALL CHECK_POINTER(VM_HEADER.REPLY_TO$);
      252    10022    2       CALL CHECK_POINTER(VM_HEADER.RETURN_ADDRESS$);
      253    10023    2       CALL CHECK_POINTER(VM_HEADER.SIGNED$);
      254    10024    2       CALL CHECK_POINTER(VM_HEADER.SUBJECT$);
      255    10025    2       CALL CHECK_POINTER(VM_HEADER.TO$);
      256    10026    2       CALL CHECK_POINTER(VM_HEADER.UNIQUE_ID$);
      257    10027    2       CALL CHECK_POINTER(VM_HEADER.REFERS_TO_ID$);
      258    10028    2       RETURN;
      259    10029    2   END SET_POINTERS;
      260    10030    1   CHECK_POINTER: PROC(PTR$);
      261    10031    2   DCL PTR$ PTR;
      262    10032        %POINTER (NAME=PTR1$, STCLASS="REDEF PTR$");
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:24   
      263    10037    2   DCL ZERO_VALUE BIT (36) CONSTANT INIT ('0'B);
      264    10038    2   DCL ZERO_POINTER REDEF ZERO_VALUE PTR;
      265    10039
      266    10040    2       IF PTR$ = ZERO_POINTER
      267    10041    2       THEN
      268    10042    2           PTR$ = ADDR(NIL);
      269    10043    2       ELSE
      270    10044    2           IF PTR$ ~= ADDR(NIL) AND PTR1$.SEGID = %DS2SID
      271    10045    2           THEN
      272    10046    2               PTR1$.SEGID = %DS8SID;
      273    10047    2       RETURN;
      274    10048    2   END CHECK_POINTER;
      275    10049    1   END VMD$GET_HEADER;
      276    10050        %EOD;

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:25   
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_HEADER.

   Procedure VMD$GET_HEADER requires 295 words for executable code.
   Procedure VMD$GET_HEADER requires 14 words of local(AUTO) storage.

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:26   

 Object Unit name= VMD$GET_HEADER                             File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:12:08.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    62     76  VMD$GET_HEADER
   12  RoData even  UTS      3      3  VMD$GET_HEADER
   13   Proc  even  none   295    447  VMD$GET_HEADER
   14  RoData even  none     8     10  VMD$GET_HEADER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        2  VMD$GET_HEADER
    13     44          yes     yes      Std        2  VMD$GET_HEADER_NEXT
    13    124          yes     yes      Std        2  VMD$GET_HEADER_PREV
    13    213          yes     yes      Std        2  VMD$PUT_HEADER
    13    247          yes     yes      Std        2  VMD$DEL_HEADER
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:27   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:28   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:29   


       36        1        /*T***********************************************************/
       37        2        /*T*                                                         */
       38        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       39        4        /*T*                                                         */
       40        5        /*T***********************************************************/
       41        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
       42        7        /*F*
       43        8             NAME: VMD$GET_HEADER
       44        9             PURPOSE:
       45       10                  To read a specified VM_HEADER record from the mail folder.
       46       11             DESCRIPTION:
       47       12                  None.
       48       13        */
       49       14        VMD$GET_HEADER: PROC (MESSAGE_NUMBER,DCB#) ALTRET;

     14 13 000000   000000 700200 xent  VMD$GET_HEA* TSX0  ! X66_AUTO_2
        13 000001   000016 000002                    ZERO    14,2

       50       15        /***** Include files *****/
       51       16          %INCLUDE B_ERRORS_C;
       52     1143          %INCLUDE B_SEGIDS_C;
       53     1682          %INCLUDE CP_6;
       54     7241          %INCLUDE CP_6_SUBS;
       55     7781          %INCLUDE VM_MACRO_C;
       56     9049          %INCLUDE VM_DATA_R;
       57     9480          %VM_KEYTYPES;
       58     9501        /***** Parameters *****/
       59     9502    1   DCL MESSAGE_NUMBER UBIN WORD;
       60     9503    1   DCL DCB# UBIN WORD;
       61     9504        /***** Fpts *****/
       62     9505          %FPT_READ (FPTN=READ_HEADER,KEY=VM_HEADKEY,KEYS=YES);
       63     9544          %FPT_READ (FPTN=READ_RELATIVE,KEY=VM_HEADKEY,KEYR=YES,KEYS=NO);
       64     9583          %FPT_WRITE (FPTN=WRITE_HEADER,KEY=VM_HEADKEY,ONEWKEY=YES);
       65     9614          %FPT_DELREC (FPTN=DELETE_HEADER,KEY=VM_HEADKEY);
       66     9633          %FPT_PRECORD (FPTN=MOVE_HEADER,KEY=VM_HEADKEY,KEYR=YES,KEYS=YES);
       67     9654          %VLP_VECTOR (STCLASS=AUTO);
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:30   
       68     9669        /***** External routines *****/
       69     9670    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
       70     9671        /***** Mail structures *****/
       71     9672          %VM_HEADER (STCLASS="BASED(VM_HEADER$)");
       72     9801          %VM_INFOKEY (NAME=VM_HEADKEY,TYP=%VM_TYPE_HEAD);
       73     9818          %VM_INFOKEY (NAME=C_VM_HEADKEY,TYP=%VM_TYPE_HEAD,STCLASS=CONSTANT);
       74     9835        /***** Based structures *****/
       75     9836          %B$TCB (STCLASS="BASED(B$TCB$)");
       76     9839          %B$ALT;
       77     9847        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:31   
       78     9848    1       CALL SETUP_KEY;

   9848 13 000002   000264 701000 13                 TSX1    SETUP_KEY
        13 000003   000000 011000                    NOP     0

       79     9849    1       READ_HEADER.V.DCB# = DCB#;

   9849 13 000004   200004 470500                    LDP0    @DCB#,,AUTO
        13 000005   000000 720100                    LXL0    0,,PR0
        13 000006   000010 740000 11                 STX0    READ_HEADER+8

       80     9850    1   READ_AGAIN:
       81     9851    1       READ_HEADER.BUF_ = VM_HEADER_;     /* Symref data */

   9851 13 000007   000000 237000 xsym  READ_AGAIN   LDAQ    VM_HEADER_
        13 000010   000004 757000 11                 STAQ    READ_HEADER+4

       82     9852    1       CALL M$READ (READ_HEADER) ALTRET(E_READ);

   9852 13 000011   000000 630400 11                 EPPR0   READ_HEADER
        13 000012   440000 713400                    CLIMB   alt,read
        13 000013   401400 401760                    pmme    nvectors=4
        13 000014   000030 702000 13                 TSX2    E_READ

       83     9853    1       VLP_VECTOR = VM_HEADER_;

   9853 13 000015   000000 237000 xsym               LDAQ    VM_HEADER_
        13 000016   200006 757100                    STAQ    VLP_VECTOR,,AUTO

       84     9854    1       VM_HEADER.HEADER_SIZE = (VLP_VECTOR.W1.VSIZE#+1)/4;

   9854 13 000017   200006 236100                    LDQ     VLP_VECTOR,,AUTO
        13 000020   000020 772000                    QRL     16
        13 000021   000001 036007                    ADLQ    1,DL
        13 000022   000002 772000                    QRL     2
        13 000023   000000 470400 xsym               LDP0    VM_HEADER$
        13 000024   000000 756100                    STQ     0,,PR0
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:32   

       85     9855    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */

   9855 13 000025   000275 701000 13                 TSX1    SET_POINTERS
        13 000026   000000 011000                    NOP     0

       86     9856    1       RETURN;

   9856 13 000027   000000 702200 xent               TSX2  ! X66_ARET

       87     9857        /**/
       88     9858    1   E_READ:
       89     9859    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9859 13 000030   000000 470400 xsym  E_READ       LDP0    B$TCB$
        13 000031   000000 471500                    LDP1    0,,PR0
        13 000032   100102 236100                    LDQ     66,,PR1
        13 000033   377770 376007                    ANQ     131064,DL
        13 000034   000070 116007                    CMPQ    56,DL
        13 000035   000043 601000 13                 TNZ     s:9865

       90     9860    1       THEN
       91     9861    2       DO;                           /* Enlarge the segment and try again */

       92     9862    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);

   9862 13 000036   000002 630400 14                 EPPR0   2
        13 000037   000000 631400 14                 EPPR1   0
        13 000040   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        13 000041   000263 702000 13                 TSX2    E_PMME

       93     9863    2           GOTO READ_AGAIN;

   9863 13 000042   000007 710000 13                 TRA     READ_AGAIN

       94     9864    2       END;
       95     9865    1       ELSE ALTRETURN;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:33   

   9865 13 000043   000000 702200 xent               TSX2  ! X66_AALT

       96     9866        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:34   
       97     9867        /*F*
       98     9868             NAME: VMD$GET_HEADER_NEXT
       99     9869             PURPOSE:
      100     9870                  To read the next VM_HEADER record after the one specified.
      101     9871             DESCRIPTION:
      102     9872                  This routine will read the header record of the message
      103     9873                  specified in in MESSAGE_NUMBER or the one immediately
      104     9874                  following that number if it is unavailable. The number
      105     9875                  of the message actually read will be returned in
      106     9876                  MESSAGE_NUMBER. Therefore, it may not be a constant.
      107     9877
      108     9878                  If no more HEADERs exist, then this routine will
      109     9879                  ALTRETURN with MESSAGE_NUMBER equal to zero. This is
      110     9880                  the only case where MESSAGE_NUMBER should be zero.
      111     9881        */
      112     9882    1   VMD$GET_HEADER_NEXT: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;

   9882 13 000044   000000 700200 xent  VMD$GET_HEA* TSX0  ! X66_AUTO_2
        13 000045   000016 000002                    ZERO    14,2

      113     9883    1       CALL SETUP_KEY;

   9883 13 000046   000264 701000 13                 TSX1    SETUP_KEY
        13 000047   000000 011000                    NOP     0

      114     9884    1       MOVE_HEADER.V.DCB# = DCB#;

   9884 13 000050   200004 470500                    LDP0    @DCB#,,AUTO
        13 000051   000000 720100                    LXL0    0,,PR0
        13 000052   000070 740000 11                 STX0    MOVE_HEADER+6

      115     9885    1       MOVE_HEADER.V.N# = 0;

   9885 13 000053   000071 450000 11                 STZ     MOVE_HEADER+7

      116     9886    1   READ_HN_AGAIN:
      117     9887    1       CALL M$PRECORD (MOVE_HEADER) ALTRET(E_PRECORD1);
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:35   

   9887 13 000054   000062 630400 11    READ_HN_AGA* EPPR0   MOVE_HEADER
        13 000055   440003 713400                    CLIMB   alt,+16387
        13 000056   401000 401760                    pmme    nvectors=3
        13 000057   000060 702000 13                 TSX2    E_PRECORD1

   9885 13 000060                       E_PRECORD1   null
      118     9888    1   E_PRECORD1: ;                           /* Ignore it */
      119     9889    1       READ_RELATIVE.V.DCB# = DCB#;

   9889 13 000060   200004 470500                    LDP0    @DCB#,,AUTO
        13 000061   000000 720100                    LXL0    0,,PR0
        13 000062   000026 740000 11                 STX0    READ_RELATIVE+8

      120     9890    1       READ_RELATIVE.BUF_ = VM_HEADER_;

   9890 13 000063   000000 237000 xsym               LDAQ    VM_HEADER_
        13 000064   000022 757000 11                 STAQ    READ_RELATIVE+4

      121     9891    1       CALL M$READ (READ_RELATIVE) ALTRET(E_READ_HN);

   9891 13 000065   000016 630400 11                 EPPR0   READ_RELATIVE
        13 000066   440000 713400                    CLIMB   alt,read
        13 000067   401400 401760                    pmme    nvectors=4
        13 000070   000110 702000 13                 TSX2    E_READ_HN

      122     9892        /*
      123     9893             ***** If the record read is not a header record,
      124     9894                   then ALTRETURN...
      125     9895        */
      126     9896    1       IF VM_HEADKEY.TYPE ~= %VM_TYPE_HEAD

   9896 13 000071   000074 236000 11                 LDQ     VM_HEADKEY
        13 000072   000777 376003                    ANQ     511,DU
        13 000073   000010 116003                    CMPQ    8,DU
        13 000074   000100 600000 13                 TZE     s:9902

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:36   
      127     9897    1       THEN
      128     9898    2       DO;

      129     9899    2           MESSAGE_NUMBER = 0;

   9899 13 000075   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000076   000000 450100                    STZ     0,,PR0

      130     9900    2           ALTRETURN;

   9900 13 000077   000000 702200 xent               TSX2  ! X66_AALT

      131     9901    2       END;
      132     9902    1       MESSAGE_NUMBER = VM_HEADKEY.MESSAGE_NUMBER;

   9902 13 000100   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000101   000074 235000 11                 LDA     VM_HEADKEY
        13 000102   000075 236000 11                 LDQ     VM_HEADKEY+1
        13 000103   000022 773000                    LRL     18
        13 000104   000000 756100                    STQ     0,,PR0

      133     9903    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */

   9903 13 000105   000275 701000 13                 TSX1    SET_POINTERS
        13 000106   000000 011000                    NOP     0

      134     9904    1       RETURN;

   9904 13 000107   000000 702200 xent               TSX2  ! X66_ARET

      135     9905        /**/
      136     9906    1   E_READ_HN:
      137     9907    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9907 13 000110   000000 470400 xsym  E_READ_HN    LDP0    B$TCB$
        13 000111   000000 471500                    LDP1    0,,PR0
        13 000112   100102 236100                    LDQ     66,,PR1
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:37   
        13 000113   377770 376007                    ANQ     131064,DL
        13 000114   000070 116007                    CMPQ    56,DL
        13 000115   000123 601000 13                 TNZ     s:9913

      138     9908    1       THEN
      139     9909    2       DO;

      140     9910    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);

   9910 13 000116   000002 630400 14                 EPPR0   2
        13 000117   000000 631400 14                 EPPR1   0
        13 000120   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        13 000121   000263 702000 13                 TSX2    E_PMME

      141     9911    2           GOTO READ_HN_AGAIN;

   9911 13 000122   000054 710000 13                 TRA     READ_HN_AGAIN

      142     9912    2       END;
      143     9913    1       ELSE ALTRETURN;

   9913 13 000123   000000 702200 xent               TSX2  ! X66_AALT

      144     9914        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:38   
      145     9915        /*F*
      146     9916             NAME: VMD$GET_HEADER_PREV
      147     9917             PURPOSE:
      148     9918                  To read the next VM_HEADER record after the one specified.
      149     9919             DESCRIPTION:
      150     9920                  This routine will read the next header record following the
      151     9921                  one specified in MESSAGE_NUMBER. The number of the message
      152     9922                  actually read will be returned in MESSAGE_NUMBER. Therefore,
      153     9923                  MESSAGE_NUMBER may not be a constant.
      154     9924
      155     9925                  If no more HEADERs exist, then this routine will
      156     9926                  ALTRETURN with MESSAGE_NUMBER equal to zero. This is
      157     9927                  the only case where MESSAGE_NUMBER should be zero.
      158     9928        */
      159     9929    1   VMD$GET_HEADER_PREV: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;

   9929 13 000124   000000 700200 xent  VMD$GET_HEA* TSX0  ! X66_AUTO_2
        13 000125   000016 000002                    ZERO    14,2

      160     9930        /*
      161     9931             ***** If the message requested is before 1
      162     9932                   then this is an error ...
      163     9933        */
      164     9934    1       IF MESSAGE_NUMBER = 1

   9934 13 000126   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000127   000000 235100                    LDA     0,,PR0
        13 000130   000001 115007                    CMPA    1,DL
        13 000131   000134 601000 13                 TNZ     s:9940

      165     9935    1       THEN
      166     9936    2       DO;

      167     9937    2           MESSAGE_NUMBER = 0;

   9937 13 000132   000000 450100                    STZ     0,,PR0

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:39   
      168     9938    2           ALTRETURN;

   9938 13 000133   000000 702200 xent               TSX2  ! X66_AALT

      169     9939    2       END;
      170     9940    1       CALL SETUP_KEY;

   9940 13 000134   000264 701000 13                 TSX1    SETUP_KEY
        13 000135   000000 011000                    NOP     0

      171     9941    1       MOVE_HEADER.V.DCB# = DCB#;

   9941 13 000136   200004 470500                    LDP0    @DCB#,,AUTO
        13 000137   000000 720100                    LXL0    0,,PR0
        13 000140   000070 740000 11                 STX0    MOVE_HEADER+6

      172     9942    1       MOVE_HEADER.V.N# = -1;

   9942 13 000141   000001 335007                    LCA     1,DL
        13 000142   000071 755000 11                 STA     MOVE_HEADER+7

      173     9943    1   READ_HP_AGAIN:
      174     9944    1       CALL M$PRECORD (MOVE_HEADER) ALTRET(E_PRECORD2);

   9944 13 000143   000062 630400 11    READ_HP_AGA* EPPR0   MOVE_HEADER
        13 000144   440003 713400                    CLIMB   alt,+16387
        13 000145   401000 401760                    pmme    nvectors=3
        13 000146   000147 702000 13                 TSX2    E_PRECORD2

   9942 13 000147                       E_PRECORD2   null
      175     9945    1   E_PRECORD2: ;                           /* Ignore it */
      176     9946    1       READ_RELATIVE.V.DCB# = DCB#;

   9946 13 000147   200004 470500                    LDP0    @DCB#,,AUTO
        13 000150   000000 720100                    LXL0    0,,PR0
        13 000151   000026 740000 11                 STX0    READ_RELATIVE+8

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:40   
      177     9947    1       READ_RELATIVE.BUF_ = VM_HEADER_;

   9947 13 000152   000000 237000 xsym               LDAQ    VM_HEADER_
        13 000153   000022 757000 11                 STAQ    READ_RELATIVE+4

      178     9948    1       CALL M$READ (READ_RELATIVE) ALTRET(E_READ_HP);

   9948 13 000154   000016 630400 11                 EPPR0   READ_RELATIVE
        13 000155   440000 713400                    CLIMB   alt,read
        13 000156   401400 401760                    pmme    nvectors=4
        13 000157   000177 702000 13                 TSX2    E_READ_HP

      179     9949        /*
      180     9950             ***** If the record read is not a header record,
      181     9951                   then ALTRETURN...
      182     9952        */
      183     9953    1       IF VM_HEADKEY.TYPE ~= %VM_TYPE_HEAD

   9953 13 000160   000074 236000 11                 LDQ     VM_HEADKEY
        13 000161   000777 376003                    ANQ     511,DU
        13 000162   000010 116003                    CMPQ    8,DU
        13 000163   000167 600000 13                 TZE     s:9959

      184     9954    1       THEN
      185     9955    2       DO;

      186     9956    2           MESSAGE_NUMBER = 0;

   9956 13 000164   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000165   000000 450100                    STZ     0,,PR0

      187     9957    2           ALTRETURN;

   9957 13 000166   000000 702200 xent               TSX2  ! X66_AALT

      188     9958    2       END;
      189     9959    1       MESSAGE_NUMBER = VM_HEADKEY.MESSAGE_NUMBER;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:41   

   9959 13 000167   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000170   000074 235000 11                 LDA     VM_HEADKEY
        13 000171   000075 236000 11                 LDQ     VM_HEADKEY+1
        13 000172   000022 773000                    LRL     18
        13 000173   000000 756100                    STQ     0,,PR0

      190     9960    1       CALL SET_POINTERS;                 /* Make sure pointers point to DS8 */

   9960 13 000174   000275 701000 13                 TSX1    SET_POINTERS
        13 000175   000000 011000                    NOP     0

      191     9961    1       RETURN;

   9961 13 000176   000000 702200 xent               TSX2  ! X66_ARET

      192     9962        /**/
      193     9963    1   E_READ_HP:
      194     9964    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9964 13 000177   000000 470400 xsym  E_READ_HP    LDP0    B$TCB$
        13 000200   000000 471500                    LDP1    0,,PR0
        13 000201   100102 236100                    LDQ     66,,PR1
        13 000202   377770 376007                    ANQ     131064,DL
        13 000203   000070 116007                    CMPQ    56,DL
        13 000204   000212 601000 13                 TNZ     s:9970

      195     9965    1       THEN
      196     9966    2       DO;

      197     9967    2           CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);

   9967 13 000205   000002 630400 14                 EPPR0   2
        13 000206   000000 631400 14                 EPPR1   0
        13 000207   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        13 000210   000263 702000 13                 TSX2    E_PMME

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:42   
      198     9968    2           GOTO READ_HP_AGAIN;

   9968 13 000211   000143 710000 13                 TRA     READ_HP_AGAIN

      199     9969    2       END;
      200     9970    1       ELSE ALTRETURN;

   9970 13 000212   000000 702200 xent               TSX2  ! X66_AALT

      201     9971        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:43   
      202     9972    1   VMD$PUT_HEADER: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;

   9972 13 000213   000000 700200 xent  VMD$PUT_HEA* TSX0  ! X66_AUTO_2
        13 000214   000016 000002                    ZERO    14,2

      203     9973    1       CALL SETUP_KEY;

   9973 13 000215   000264 701000 13                 TSX1    SETUP_KEY
        13 000216   000000 011000                    NOP     0

      204     9974    1       WRITE_HEADER.V.DCB# = DCB#;

   9974 13 000217   200004 470500                    LDP0    @DCB#,,AUTO
        13 000220   000000 720100                    LXL0    0,,PR0
        13 000221   000044 740000 11                 STX0    WRITE_HEADER+8

      205     9975    1       WRITE_HEADER.BUF_ = VM_HEADER_;    /* Symref data */

   9975 13 000222   000000 237000 xsym               LDAQ    VM_HEADER_
        13 000223   000040 757000 11                 STAQ    WRITE_HEADER+4

      206     9976    1       VM_HEADER.HEADER_SIZE = POFFW(VM_HEADER.NEXT$,ADDR(VM_HEADER));

   9976 13 000224   000000 236000 xsym               LDQ     VM_HEADER$
        13 000225   000022 772000                    QRL     18
        13 000226   200014 756100                    STQ     @PTR$+1,,AUTO
        13 000227   000000 471400 xsym               LDP1    VM_HEADER$
        13 000230   100016 236100                    LDQ     14,,PR1
        13 000231   000022 772000                    QRL     18
        13 000232   200014 136100                    SBLQ    @PTR$+1,,AUTO
        13 000233   100000 756100                    STQ     0,,PR1

      207     9977    1       WRITE_HEADER.BUF_.BOUND = (VM_HEADER.HEADER_SIZE * 4) - 1;

   9977 13 000234   000002 736000                    QLS     2
        13 000235   000001 136007                    SBLQ    1,DL
        13 000236   000020 736000                    QLS     16
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:44   
        13 000237   000040 676000 11                 ERQ     WRITE_HEADER+4
        13 000240   000004 376000 14                 ANQ     4
        13 000241   000040 656000 11                 ERSQ    WRITE_HEADER+4

      208     9978    1       CALL M$WRITE (WRITE_HEADER) ALTRET(E_PMME);

   9978 13 000242   000034 630400 11                 EPPR0   WRITE_HEADER
        13 000243   440001 713400                    CLIMB   alt,write
        13 000244   401400 401760                    pmme    nvectors=4
        13 000245   000263 702000 13                 TSX2    E_PMME

      209     9979    1       RETURN;

   9979 13 000246   000000 702200 xent               TSX2  ! X66_ARET

      210     9980        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:45   
      211     9981    1   VMD$DEL_HEADER: ENTRY (MESSAGE_NUMBER,DCB#) ALTRET;

   9981 13 000247   000000 700200 xent  VMD$DEL_HEA* TSX0  ! X66_AUTO_2
        13 000250   000016 000002                    ZERO    14,2

      212     9982    1       CALL SETUP_KEY;

   9982 13 000251   000264 701000 13                 TSX1    SETUP_KEY
        13 000252   000000 011000                    NOP     0

      213     9983    1       DELETE_HEADER.V.DCB# = DCB#;

   9983 13 000253   200004 470500                    LDP0    @DCB#,,AUTO
        13 000254   000000 720100                    LXL0    0,,PR0
        13 000255   000060 740000 11                 STX0    DELETE_HEADER+8

      214     9984    1       CALL M$DELREC (DELETE_HEADER) ALTRET(E_PMME);

   9984 13 000256   000050 630400 11                 EPPR0   DELETE_HEADER
        13 000257   440002 713400                    CLIMB   alt,+16386
        13 000260   401400 401760                    pmme    nvectors=4
        13 000261   000263 702000 13                 TSX2    E_PMME

      215     9985    1       RETURN;

   9985 13 000262   000000 702200 xent               TSX2  ! X66_ARET

      216     9986        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:46   
      217     9987    1   E_PMME:
      218     9988    1       ALTRETURN;

   9988 13 000263   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

      219     9989        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:47   
      220     9990    1   SETUP_KEY: PROC;

   9990 13 000264   200010 741300       SETUP_KEY    STX1  ! VLP_VECTOR+2,,AUTO

      221     9991    2       VM_HEADKEY = C_VM_HEADKEY;

   9991 13 000265   000000 100400                    MLR     fill='000'O
        13 000266   000000 000006 12                 ADSC9   C_VM_HEADKEY             cn=0,n=6
        13 000267   000074 000006 11                 ADSC9   VM_HEADKEY               cn=0,n=6

      222     9992    2       VM_HEADKEY.MESSAGE_NUMBER = MESSAGE_NUMBER;

   9992 13 000270   200003 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        13 000271   000000 100500                    MLR     fill='000'O
        13 000272   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
        13 000273   000074 400004 11                 ADSC9   VM_HEADKEY               cn=2,n=4

      223     9993    2       RETURN;

   9993 13 000274   000001 702211                    TSX2  ! 1,X1

      224     9994    2   END SETUP_KEY;
      225     9995        %EJECT;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:48   
      226     9996        /********************************************************************/
      227     9997        /*I*
      228     9998             NAME: SET_POINTERS
      229     9999             PURPOSE: This routine will set the pointers in the header to
      230    10000                   DS8 instead of DS2. In A02 MAIL, the header is read in to
      231    10001                   DS8 instead of DS2. By modifying the pointers, A02 MAIL can
      232    10002                   process pre-A02 messages.
      233    10003        */
      234    10004        /********************************************************************/
      235    10005    1   SET_POINTERS: PROC;

  10005 13 000275   200010 741300       SET_POINTERS STX1  ! VLP_VECTOR+2,,AUTO

      236    10006
      237    10007    2       IF VM_HEADER.STATUS.RESERVED ~= '0'B

  10007 13 000276   000000 470400 xsym               LDP0    VM_HEADER$
        13 000277   000012 236100                    LDQ     10,,PR0
        13 000300   003777 316007                    CANQ    2047,DL
        13 000301   000310 600000 13                 TZE     s:10013

      238    10008    3       THEN DO;

      239    10009    3           VM_HEADER.STATUS.PRE_B00 = %YES#;

  10009 13 000302   010000 236007                    LDQ     4096,DL
        13 000303   000012 256100                    ORSQ    10,,PR0

      240    10010    3           VM_HEADER.STATUS.RRACK = %NO#;

  10010 13 000304   000005 236000 14                 LDQ     5
        13 000305   000012 356100                    ANSQ    10,,PR0

      241    10011    3           VM_HEADER.STATUS.RESERVED = '0'B;

  10011 13 000306   000006 236000 14                 LDQ     6
        13 000307   000012 356100                    ANSQ    10,,PR0
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:49   

      242    10012    3       END;

      243    10013    2       CALL CHECK_POINTER(VM_HEADER.FREE$);

  10013 13 000310   000000 236000 xsym               LDQ     VM_HEADER$
        13 000311   000015 036003                    ADLQ    13,DU
        13 000312   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000313   000425 701000 13                 TSX1    CHECK_POINTER
        13 000314   000000 011000                    NOP     0

      244    10014    2       CALL CHECK_POINTER(VM_HEADER.NEXT$);

  10014 13 000315   000000 236000 xsym               LDQ     VM_HEADER$
        13 000316   000016 036003                    ADLQ    14,DU
        13 000317   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000320   000425 701000 13                 TSX1    CHECK_POINTER
        13 000321   000000 011000                    NOP     0

      245    10015    2       CALL CHECK_POINTER(VM_HEADER.BAD_ADDRESS$);

  10015 13 000322   000000 236000 xsym               LDQ     VM_HEADER$
        13 000323   000017 036003                    ADLQ    15,DU
        13 000324   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000325   000425 701000 13                 TSX1    CHECK_POINTER
        13 000326   000000 011000                    NOP     0

      246    10016    2       CALL CHECK_POINTER(VM_HEADER.BLIND$);

  10016 13 000327   000000 236000 xsym               LDQ     VM_HEADER$
        13 000330   000020 036003                    ADLQ    16,DU
        13 000331   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000332   000425 701000 13                 TSX1    CHECK_POINTER
        13 000333   000000 011000                    NOP     0

      247    10017    2       CALL CHECK_POINTER(VM_HEADER.COPY$);

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:50   
  10017 13 000334   000000 236000 xsym               LDQ     VM_HEADER$
        13 000335   000021 036003                    ADLQ    17,DU
        13 000336   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000337   000425 701000 13                 TSX1    CHECK_POINTER
        13 000340   000000 011000                    NOP     0

      248    10018    2       CALL CHECK_POINTER(VM_HEADER.FILE_FOLDER$);

  10018 13 000341   000000 236000 xsym               LDQ     VM_HEADER$
        13 000342   000022 036003                    ADLQ    18,DU
        13 000343   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000344   000425 701000 13                 TSX1    CHECK_POINTER
        13 000345   000000 011000                    NOP     0

      249    10019    2       CALL CHECK_POINTER(VM_HEADER.FROM$);

  10019 13 000346   000000 236000 xsym               LDQ     VM_HEADER$
        13 000347   000023 036003                    ADLQ    19,DU
        13 000350   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000351   000425 701000 13                 TSX1    CHECK_POINTER
        13 000352   000000 011000                    NOP     0

      250    10020    2       CALL CHECK_POINTER(VM_HEADER.REFERENCE$);

  10020 13 000353   000000 236000 xsym               LDQ     VM_HEADER$
        13 000354   000024 036003                    ADLQ    20,DU
        13 000355   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000356   000425 701000 13                 TSX1    CHECK_POINTER
        13 000357   000000 011000                    NOP     0

      251    10021    2       CALL CHECK_POINTER(VM_HEADER.REPLY_TO$);

  10021 13 000360   000000 236000 xsym               LDQ     VM_HEADER$
        13 000361   000025 036003                    ADLQ    21,DU
        13 000362   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000363   000425 701000 13                 TSX1    CHECK_POINTER
        13 000364   000000 011000                    NOP     0
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:51   

      252    10022    2       CALL CHECK_POINTER(VM_HEADER.RETURN_ADDRESS$);

  10022 13 000365   000000 236000 xsym               LDQ     VM_HEADER$
        13 000366   000026 036003                    ADLQ    22,DU
        13 000367   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000370   000425 701000 13                 TSX1    CHECK_POINTER
        13 000371   000000 011000                    NOP     0

      253    10023    2       CALL CHECK_POINTER(VM_HEADER.SIGNED$);

  10023 13 000372   000000 236000 xsym               LDQ     VM_HEADER$
        13 000373   000027 036003                    ADLQ    23,DU
        13 000374   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000375   000425 701000 13                 TSX1    CHECK_POINTER
        13 000376   000000 011000                    NOP     0

      254    10024    2       CALL CHECK_POINTER(VM_HEADER.SUBJECT$);

  10024 13 000377   000000 236000 xsym               LDQ     VM_HEADER$
        13 000400   000030 036003                    ADLQ    24,DU
        13 000401   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000402   000425 701000 13                 TSX1    CHECK_POINTER
        13 000403   000000 011000                    NOP     0

      255    10025    2       CALL CHECK_POINTER(VM_HEADER.TO$);

  10025 13 000404   000000 236000 xsym               LDQ     VM_HEADER$
        13 000405   000031 036003                    ADLQ    25,DU
        13 000406   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000407   000425 701000 13                 TSX1    CHECK_POINTER
        13 000410   000000 011000                    NOP     0

      256    10026    2       CALL CHECK_POINTER(VM_HEADER.UNIQUE_ID$);

  10026 13 000411   000000 236000 xsym               LDQ     VM_HEADER$
        13 000412   000032 036003                    ADLQ    26,DU
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:52   
        13 000413   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000414   000425 701000 13                 TSX1    CHECK_POINTER
        13 000415   000000 011000                    NOP     0

      257    10027    2       CALL CHECK_POINTER(VM_HEADER.REFERS_TO_ID$);

  10027 13 000416   000000 236000 xsym               LDQ     VM_HEADER$
        13 000417   000033 036003                    ADLQ    27,DU
        13 000420   200013 756100                    STQ     VLP_VECTOR+5,,AUTO
        13 000421   000425 701000 13                 TSX1    CHECK_POINTER
        13 000422   000000 011000                    NOP     0

      258    10028    2       RETURN;

  10028 13 000423   200010 221300                    LDX1  ! VLP_VECTOR+2,,AUTO
        13 000424   000001 702211                    TSX2  ! 1,X1

      259    10029    2   END SET_POINTERS;
      260    10030    1   CHECK_POINTER: PROC(PTR$);

  10030 13 000425   200012 741300       CHECK_POINT* STX1  ! VLP_VECTOR+4,,AUTO

      261    10031    2   DCL PTR$ PTR;
      262    10032        %POINTER (NAME=PTR1$, STCLASS="REDEF PTR$");
      263    10037    2   DCL ZERO_VALUE BIT (36) CONSTANT INIT ('0'B);
      264    10038    2   DCL ZERO_POINTER REDEF ZERO_VALUE PTR;
      265    10039
      266    10040    2       IF PTR$ = ZERO_POINTER

  10040 13 000426   200013 470500                    LDP0    @PTR$,,AUTO
        13 000427   000000 236100                    LDQ     0,,PR0
        13 000430   000002 116000 12                 CMPQ    ZERO_VALUE
        13 000431   000435 601000 13                 TNZ     s:10044

      267    10041    2       THEN
      268    10042    2           PTR$ = ADDR(NIL);

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:53   
  10042 13 000432   000007 236000 14                 LDQ     7
        13 000433   000000 756100                    STQ     0,,PR0
        13 000434   000445 710000 13                 TRA     s:10047

      269    10043    2       ELSE
      270    10044    2           IF PTR$ ~= ADDR(NIL) AND PTR1$.SEGID = %DS2SID

  10044 13 000435   000007 116000 14                 CMPQ    7
        13 000436   000445 600000 13                 TZE     s:10047
        13 000437   000000 236100                    LDQ     0,,PR0
        13 000440   007777 376007                    ANQ     4095,DL
        13 000441   006005 116007                    CMPQ    3077,DL
        13 000442   000445 601000 13                 TNZ     s:10047

      271    10045    2           THEN
      272    10046    2               PTR1$.SEGID = %DS8SID;

  10046 13 000443   006013 236007                    LDQ     3083,DL
        13 000444   000000 752103                    STCQ    0,'03'O,PR0

      273    10047    2       RETURN;

  10047 13 000445   200012 221300                    LDX1  ! VLP_VECTOR+4,,AUTO
        13 000446   000001 702211                    TSX2  ! 1,X1

READ_HEADER
 Sect OctLoc
  11     000   000005 777640   000010 006000   000001 377640   000074 006000    .............<..
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     010   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     014   000000 000000   000000 000000                                    ........

READ_RELATIVE
 Sect OctLoc
  11     016   000005 777640   000026 006000   000001 377640   000074 006000    .............<..
  11     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     026   000000 500000   000000 000000   000000 000000   000000 000000    ................
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:54   
  11     032   000000 000000   000000 000000                                    ........

WRITE_HEADER
 Sect OctLoc
  11     034   000003 777640   000044 006000   000001 377640   000074 006000    .....$.......<..
  11     040   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     044   000000 400400   000000 000000   000000 000000   000000 000000    ................

DELETE_HEADER
 Sect OctLoc
  11     050   000001 777640   000060 006000   000001 377640   000074 006000    .....0.......<..
  11     054   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     060   000000 000000   000000 000000                                    ........

MOVE_HEADER
 Sect OctLoc
  11     062   000003 777640   000070 006000   000001 377640   000074 006000    .....8.......<..
  11     066   000000 177640   000000 006014   000000 600000   000000 000000    ................
  11     072   000000 000000   0***** ******                                    ........

VM_HEADKEY
 Sect OctLoc
  11     074   005010 000000   000000 ******                                    ........

C_VM_HEADKEY
 Sect OctLoc
  12     000   005010 000000   000000 ******                                    ........

ZERO_VALUE
 Sect OctLoc
  12     002   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
  14     000   000002 000000   000000 002000   000000 006000   000001 006000    ................
  14     004   777777 600000   777777 757777   777777 774000   000000 006014    ................
      274    10048    2   END CHECK_POINTER;
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:55   
      275    10049    1   END VMD$GET_HEADER;
      276    10050        %EOD;

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:56   
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_HEADER.
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:57   

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_HEADER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    50-0-0/d STRC(360)   r     1 DELETE_HEADER             62-0-0/d STRC(360)   r     1 MOVE_HEADER
     0-0-0/d STRC(504)   r     1 READ_HEADER               16-0-0/d STRC(504)   r     1 READ_RELATIVE
    74-0-0/c STRC(54)    r     1 VM_HEADKEY                34-0-0/d STRC(432)   r     1 WRITE_HEADER

  ****  Section 012 RoData VMD$GET_HEADER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(54)    r     1 C_VM_HEADKEY               2-0-0/w PTR         r     1 ZERO_POINTER
     2-0-0/b BIT         r     1 ZERO_VALUE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DCB#                      3-0-0/w PTR         r     1 @MESSAGE_NUMBER
    13-0-0/w PTR         r     1 @PTR$                     *0-0-0/w UBIN        r     1 DCB#
    *0-0-0/w UBIN        r     1 MESSAGE_NUMBER            *0-0-0/w PTR         r     1 PTR$
    *0-0-0/w STRC        r     1 PTR1$                      6-0-0/d STRC(72)    r     1 VLP_VECTOR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:58   
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR         r     1 VM_HEADER$                 0-0-0/d VECT        r     1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(1332)  r     1 VM_HEADER
     0-0-0/c ASTR(9)     r     1 X$STRING

PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:59   

   Procedure VMD$GET_HEADER requires 295 words for executable code.
   Procedure VMD$GET_HEADER requires 14 words of local(AUTO) storage.
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:60   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:61   
          MINI XREF LISTING

B$ALT.CODE
      9841**DCL      9841--REDEF    9842--REDEF    9842--REDEF
B$ALT.ERR.CODE
      9843**DCL      9859>>IF       9907>>IF       9964>>IF
B$ALT.ERR.ERR#
      9843**DCL      9843--REDEF
B$ALT.EVID
      9842**DCL      9842--REDEF    9842--REDEF
B$TCB.ALT$
      9837**DCL      9859>>IF       9907>>IF       9964>>IF
B$TCB$
      9257**DCL      9837--IMP-PTR  9859>>IF       9907>>IF       9964>>IF
CHECK_POINTER
     10030**PROC    10013--CALL    10014--CALL    10015--CALL    10016--CALL    10017--CALL    10018--CALL
     10019--CALL    10020--CALL    10021--CALL    10022--CALL    10023--CALL    10024--CALL    10025--CALL
     10026--CALL    10027--CALL
C_VM_HEADKEY
      9828**DCL      9991>>ASSIGN
DCB#
      9503**DCL        14--PROC     9849>>ASSIGN   9882--ENTRY    9884>>ASSIGN   9889>>ASSIGN   9929--ENTRY
      9941>>ASSIGN   9946>>ASSIGN   9972--ENTRY    9974>>ASSIGN   9981--ENTRY    9983>>ASSIGN
DELETE_HEADER
      9625**DCL      9984<>CALL
DELETE_HEADER.V
      9628**DCL      9625--DCLINIT
DELETE_HEADER.V.DCB#
      9629**DCL      9983<<ASSIGN
ERRMSG_FID.L#
      9325**DCL      9325--IMP-SIZ
E_PMME
      9988**LABEL    9862--CALLALT  9910--CALLALT  9967--CALLALT  9978--CALLALT  9984--CALLALT
E_PRECORD1
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:62   
      9885**LABEL    9887--CALLALT
E_PRECORD2
      9942**LABEL    9944--CALLALT
E_READ
      9859**LABEL    9852--CALLALT
E_READ_HN
      9907**LABEL    9891--CALLALT
E_READ_HP
      9964**LABEL    9948--CALLALT
M$DELREC
      7171**DCL-ENT  9984--CALL
M$PRECORD
      7173**DCL-ENT  9887--CALL     9944--CALL
M$READ
      7170**DCL-ENT  9852--CALL     9891--CALL     9948--CALL
M$WRITE
      7170**DCL-ENT  9978--CALL
MESSAGE_NUMBER
      9502**DCL        14--PROC     9882--ENTRY    9899<<ASSIGN   9902<<ASSIGN   9929--ENTRY    9934>>IF
      9937<<ASSIGN   9956<<ASSIGN   9959<<ASSIGN   9972--ENTRY    9981--ENTRY    9992>>ASSIGN
MOVE_HEADER
      9644**DCL      9887<>CALL     9944<>CALL
MOVE_HEADER.V
      9646**DCL      9644--DCLINIT
MOVE_HEADER.V.DCB#
      9646**DCL      9884<<ASSIGN   9941<<ASSIGN
MOVE_HEADER.V.N#
      9650**DCL      9885<<ASSIGN   9942<<ASSIGN
PTR$ IN PROCEDURE CHECK_POINTER
     10031**DCL     10030--PROC    10033--REDEF   10040>>IF      10042<<ASSIGN  10044>>IF
PTR1$.SEGID IN PROCEDURE CHECK_POINTER
     10035**DCL     10044>>IF      10046<<ASSIGN
READ_AGAIN
      9851**LABEL    9863--GOTO
READ_HEADER
      9522**DCL      9852<>CALL
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:63   
READ_HEADER.BUF_
      9524**DCL      9851<<ASSIGN
READ_HEADER.STATION_
      9525**DCL      9526--REDEF
READ_HEADER.V
      9526**DCL      9522--DCLINIT
READ_HEADER.V.DCB#
      9526**DCL      9849<<ASSIGN
READ_HEADER.V.DVBYTE.REREAD#
      9537**DCL      9537--REDEF
READ_HEADER.V.INDX#
      9535**DCL      9535--REDEF
READ_HN_AGAIN
      9887**LABEL    9911--GOTO
READ_HP_AGAIN
      9944**LABEL    9968--GOTO
READ_RELATIVE
      9561**DCL      9891<>CALL     9948<>CALL
READ_RELATIVE.BUF_
      9563**DCL      9890<<ASSIGN   9947<<ASSIGN
READ_RELATIVE.STATION_
      9564**DCL      9565--REDEF
READ_RELATIVE.V
      9565**DCL      9561--DCLINIT
READ_RELATIVE.V.DCB#
      9565**DCL      9889<<ASSIGN   9946<<ASSIGN
READ_RELATIVE.V.DVBYTE.REREAD#
      9576**DCL      9576--REDEF
READ_RELATIVE.V.INDX#
      9574**DCL      9574--REDEF
SETUP_KEY
      9990**PROC     9848--CALL     9883--CALL     9940--CALL     9973--CALL     9982--CALL
SET_POINTERS
     10005**PROC     9855--CALL     9903--CALL     9960--CALL
VLP_VECTOR
      9665**DCL      9853<<ASSIGN
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:64   
VLP_VECTOR.W1.VSIZE#
      9665**DCL      9854>>ASSIGN
VLP_VECTOR.W2
      9666**DCL      9667--REDEF
VMA$ENLARGE_SEGMENT
      9670**DCL-ENT  9862--CALL     9910--CALL     9967--CALL
VM_HEADER
      9682**DCL      9976--ASSIGN
VM_HEADER.BAD_ADDRESS$
      9766**DCL     10015<>CALL
VM_HEADER.BLIND$
      9768**DCL     10016<>CALL
VM_HEADER.COPY$
      9770**DCL     10017<>CALL
VM_HEADER.FILE_FOLDER$
      9772**DCL     10018<>CALL
VM_HEADER.FREE$
      9762**DCL     10013<>CALL
VM_HEADER.FROM$
      9774**DCL     10019<>CALL
VM_HEADER.HEADER_SIZE
      9683**DCL      9854<<ASSIGN   9976<<ASSIGN   9977>>ASSIGN
VM_HEADER.NEXT$
      9764**DCL      9976>>ASSIGN  10014<>CALL
VM_HEADER.REFERENCE$
      9776**DCL     10020<>CALL
VM_HEADER.REFERS_TO_ID$
      9790**DCL     10027<>CALL
VM_HEADER.REPLY_TO$
      9778**DCL     10021<>CALL
VM_HEADER.RETURN_ADDRESS$
      9780**DCL     10022<>CALL
VM_HEADER.SIGNED$
      9782**DCL     10023<>CALL
VM_HEADER.STATUS.PRE_B00
      9745**DCL     10009<<ASSIGN
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:65   
VM_HEADER.STATUS.RESERVED
      9749**DCL     10007>>IF      10011<<ASSIGN
VM_HEADER.STATUS.RRACK
      9743**DCL     10010<<ASSIGN
VM_HEADER.SUBJECT$
      9784**DCL     10024<>CALL
VM_HEADER.TO$
      9786**DCL     10025<>CALL
VM_HEADER.UNIQUE_ID$
      9788**DCL     10026<>CALL
VM_HEADER$
      9175**DCL      9682--IMP-PTR  9854>>ASSIGN   9976>>ASSIGN   9976>>ASSIGN   9976>>ASSIGN   9977>>ASSIGN
     10007>>IF      10009>>ASSIGN  10010>>ASSIGN  10011>>ASSIGN  10013>>CALL    10014>>CALL    10015>>CALL
     10016>>CALL    10017>>CALL    10018>>CALL    10019>>CALL    10020>>CALL    10021>>CALL    10022>>CALL
     10023>>CALL    10024>>CALL    10025>>CALL    10026>>CALL    10027>>CALL
VM_HEADER_
      9200**DCL      9851>>ASSIGN   9853>>ASSIGN   9862<>CALL     9890>>ASSIGN   9910<>CALL     9947>>ASSIGN
      9967<>CALL     9975>>ASSIGN
VM_HEADKEY
      9811**DCL      9522--DCLINIT  9523--DCLINIT  9561--DCLINIT  9562--DCLINIT  9600--DCLINIT  9625--DCLINIT
      9626--DCLINIT  9644--DCLINIT  9645--DCLINIT  9991<<ASSIGN
VM_HEADKEY.MESSAGE_NUMBER
      9815**DCL      9902>>ASSIGN   9959>>ASSIGN   9992<<ASSIGN
VM_HEADKEY.TYPE
      9813**DCL      9896>>IF       9953>>IF
WRITE_HEADER
      9600**DCL      9978<>CALL
WRITE_HEADER.BUF_
      9600**DCL      9975<<ASSIGN
WRITE_HEADER.BUF_.BOUND
      9600**DCL      9977<<ASSIGN
WRITE_HEADER.STATION_
      9602**DCL      9602--REDEF
WRITE_HEADER.V
      9603**DCL      9600--DCLINIT
WRITE_HEADER.V.DCB#
PL6.E3A0      #002=VMD$GET_HEADER File=VMD$SUBR.:VMB6TSI                         WED 08/20/97 15:12 Page:66   
      9603**DCL      9974<<ASSIGN
WRITE_HEADER.V.DVBYTE.VFC#
      9609**DCL      9609--REDEF
X$STRING.SIZ
      9171**DCL      9172--IMP-SIZ
ZERO_POINTER IN PROCEDURE CHECK_POINTER
     10038**DCL     10040>>IF
ZERO_VALUE IN PROCEDURE CHECK_POINTER
     10037**DCL     10038--REDEF

PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:67   
      277        1        /*T***********************************************************/
      278        2        /*T*                                                         */
      279        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      280        4        /*T*                                                         */
      281        5        /*T***********************************************************/
      282        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      283        7        /*F*
      284        8             NAME: VMD$GET_PROFILE
      285        9             PURPOSE:
      286       10                  To read a specified VM_PROFILE record from the mail folder.
      287       11             DESCRIPTION:
      288       12                  None.
      289       13        */
      290       14        VMD$GET_PROFILE: PROC (DCB#) ALTRET;
      291       15        /***** Include files *****/
      292       16          %INCLUDE B_ERRORS_C;
      293     1143          %INCLUDE CP_6;
      294     6702          %INCLUDE CP_6_SUBS;
      295     7242          %INCLUDE VM_MACRO_C;
      296     8510          %INCLUDE VM_DATA_R;
      297     8941          %VM_KEYTYPES;
      298     8962        /***** Parameters *****/
      299     8963    1   DCL DCB# UBIN WORD;
      300     8964        /***** Local variables *****/
      301     8965    1   DCL TEMP UBIN WORD AUTO;
      302     8966    1   DCL P$ PTR;
      303     8967    1   DCL BASED_WORD UBIN BASED;
      304     8968        /***** External routines *****/
      305     8969    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      306     8970        /***** Fpts *****/
      307     8971          %FPT_READ (FPTN=READ_PROFILE,KEY=VM_PROFILEKEY,KEYS=YES);
      308     9010          %FPT_WRITE (FPTN=WRITE_PROFILE,KEY=VM_PROFILEKEY,ONEWKEY=YES);
      309     9041          %FPT_DELREC (FPTN=DELETE_PROFILE,KEY=VM_PROFILEKEY);
      310     9060          %VLP_VECTOR (STCLASS=AUTO);
      311     9075        /***** Based structures *****/
      312     9076          %B$TCB (STCLASS="BASED(B$TCB$)");
      313     9079          %B$ALT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:68   
      314     9087        /***** Mail structures *****/
      315     9088          %VM_PROFILE;
      316     9175          %VM_PROKEY (NAME=VM_PROFILEKEY,STCLASS=STATIC);
      317     9190        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:69   
      318     9191    1       READ_PROFILE.V.DCB# = DCB#;
      319     9192    1   READ_AGAIN:
      320     9193    1       READ_PROFILE.BUF_ = VM_PROFILE_;
      321     9194    1       CALL M$READ (READ_PROFILE) ALTRET(E_READ);
      322     9195    1       VLP_VECTOR = VM_PROFILE_;
      323     9196    1       VM_PROFILE.PROFILE_SIZE = (VLP_VECTOR.W1.VSIZE#+1)/4;
      324     9197    1       IF VM_PROFILE.VERSION < 'B02'
      325     9198    2       THEN DO;                   /* Fill in fields previously uninitialized */
      326     9199    2           VM_PROFILE.VERSION = 'B02';
      327     9200    2           P$ = ADDR(VM_PROFILE.RESERVED);
      328     9201    3           DO WHILE P$ < ADDR(VM_PROFILE.WORK_AREA);
      329     9202    3               P$->BASED_WORD = 0;
      330     9203    3               P$ = PINCRW(P$,1);
      331     9204    3           END;
      332     9205    2       END;
      333     9206    1       RETURN;
      334     9207        /**/
      335     9208    1   E_READ:
      336     9209    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
      337     9210    1       THEN
      338     9211    2       DO;                           /* Enlarge the segment and try again */
      339     9212    2           CALL VMA$ENLARGE_SEGMENT (VM_PROFILE_,1024) ALTRET(E_PMME);
      340     9213    2           GOTO READ_AGAIN;
      341     9214    2       END;
      342     9215    1       ELSE
      343     9216    1           ALTRETURN;
      344     9217        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:70   
      345     9218    1   VMD$PUT_PROFILE: ENTRY (DCB#) ALTRET;
      346     9219    1       WRITE_PROFILE.V.DCB# = DCB#;
      347     9220    1       WRITE_PROFILE.BUF_ = VM_PROFILE_;
      348     9221    1       TEMP = VM_PROFILE.PROFILE_SIZE;
      349     9222    1       VM_PROFILE.PROFILE_SIZE = POFFW(VM_PROFILE.NEXT$,ADDR(VM_PROFILE));
      350     9223    1       WRITE_PROFILE.BUF_.BOUND = (VM_PROFILE.PROFILE_SIZE * 4) - 1;
      351     9224    1       CALL M$WRITE (WRITE_PROFILE) ALTRET(E_PMME);
      352     9225    1       VM_PROFILE.PROFILE_SIZE = TEMP;    /* Restore size of profile segment */
      353     9226    1       RETURN;
      354     9227        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:71   
      355     9228    1   E_PMME:
      356     9229    1       ALTRETURN;
      357     9230    1   END VMD$GET_PROFILE;
      358     9231        %EOD;

PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:72   
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_PROFILE.

   Procedure VMD$GET_PROFILE requires 84 words for executable code.
   Procedure VMD$GET_PROFILE requires 10 words of local(AUTO) storage.

PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:73   

 Object Unit name= VMD$GET_PROFILE                            File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:12:29.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    37     45  VMD$GET_PROFILE
   12  RoData even  UTS      1      1  VMD$GET_PROFILE
   13   Proc  even  none    84    124  VMD$GET_PROFILE
   14  RoData even  none     5      5  VMD$GET_PROFILE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        1  VMD$GET_PROFILE
    13     64          yes     yes      Std        1  VMD$PUT_PROFILE
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:74   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:75   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:76   


      277        1        /*T***********************************************************/
      278        2        /*T*                                                         */
      279        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      280        4        /*T*                                                         */
      281        5        /*T***********************************************************/
      282        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      283        7        /*F*
      284        8             NAME: VMD$GET_PROFILE
      285        9             PURPOSE:
      286       10                  To read a specified VM_PROFILE record from the mail folder.
      287       11             DESCRIPTION:
      288       12                  None.
      289       13        */
      290       14        VMD$GET_PROFILE: PROC (DCB#) ALTRET;

     14 13 000000   000000 700200 xent  VMD$GET_PRO* TSX0  ! X66_AUTO_1
        13 000001   000012 000001                    ZERO    10,1

      291       15        /***** Include files *****/
      292       16          %INCLUDE B_ERRORS_C;
      293     1143          %INCLUDE CP_6;
      294     6702          %INCLUDE CP_6_SUBS;
      295     7242          %INCLUDE VM_MACRO_C;
      296     8510          %INCLUDE VM_DATA_R;
      297     8941          %VM_KEYTYPES;
      298     8962        /***** Parameters *****/
      299     8963    1   DCL DCB# UBIN WORD;
      300     8964        /***** Local variables *****/
      301     8965    1   DCL TEMP UBIN WORD AUTO;
      302     8966    1   DCL P$ PTR;
      303     8967    1   DCL BASED_WORD UBIN BASED;
      304     8968        /***** External routines *****/
      305     8969    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      306     8970        /***** Fpts *****/
      307     8971          %FPT_READ (FPTN=READ_PROFILE,KEY=VM_PROFILEKEY,KEYS=YES);
      308     9010          %FPT_WRITE (FPTN=WRITE_PROFILE,KEY=VM_PROFILEKEY,ONEWKEY=YES);
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:77   
      309     9041          %FPT_DELREC (FPTN=DELETE_PROFILE,KEY=VM_PROFILEKEY);
      310     9060          %VLP_VECTOR (STCLASS=AUTO);
      311     9075        /***** Based structures *****/
      312     9076          %B$TCB (STCLASS="BASED(B$TCB$)");
      313     9079          %B$ALT;
      314     9087        /***** Mail structures *****/
      315     9088          %VM_PROFILE;
      316     9175          %VM_PROKEY (NAME=VM_PROFILEKEY,STCLASS=STATIC);
      317     9190        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:78   
      318     9191    1       READ_PROFILE.V.DCB# = DCB#;

   9191 13 000002   200003 470500                    LDP0    @DCB#,,AUTO
        13 000003   000000 720100                    LXL0    0,,PR0
        13 000004   000010 740000 11                 STX0    READ_PROFILE+8

      319     9192    1   READ_AGAIN:
      320     9193    1       READ_PROFILE.BUF_ = VM_PROFILE_;

   9193 13 000005   000000 237000 xsym  READ_AGAIN   LDAQ    VM_PROFILE_
        13 000006   000004 757000 11                 STAQ    READ_PROFILE+4

      321     9194    1       CALL M$READ (READ_PROFILE) ALTRET(E_READ);

   9194 13 000007   000000 630400 11                 EPPR0   READ_PROFILE
        13 000010   440000 713400                    CLIMB   alt,read
        13 000011   401400 401760                    pmme    nvectors=4
        13 000012   000050 702000 13                 TSX2    E_READ

      322     9195    1       VLP_VECTOR = VM_PROFILE_;

   9195 13 000013   000000 237000 xsym               LDAQ    VM_PROFILE_
        13 000014   200006 757100                    STAQ    VLP_VECTOR,,AUTO

      323     9196    1       VM_PROFILE.PROFILE_SIZE = (VLP_VECTOR.W1.VSIZE#+1)/4;

   9196 13 000015   200006 236100                    LDQ     VLP_VECTOR,,AUTO
        13 000016   000020 772000                    QRL     16
        13 000017   000001 036007                    ADLQ    1,DL
        13 000020   000002 772000                    QRL     2
        13 000021   000000 470400 xsym               LDP0    VM_PROFILE$
        13 000022   000002 756100                    STQ     2,,PR0

      324     9197    1       IF VM_PROFILE.VERSION < 'B02'

   9197 13 000023   040000 106500                    CMPC    fill='040'O
        13 000024   000000 000003                    ADSC9   0,,PR0                   cn=0,n=3
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:79   
        13 000025   000000 000003 12                 ADSC9   0                        cn=0,n=3
        13 000026   000047 603000 13                 TRC     s:9206

      325     9198    2       THEN DO;                   /* Fill in fields previously uninitialized */

      326     9199    2           VM_PROFILE.VERSION = 'B02';

   9199 13 000027   000000 236000 12                 LDQ     0
        13 000030   000000 552170                    STBQ    0,'70'O,PR0

      327     9200    2           P$ = ADDR(VM_PROFILE.RESERVED);

   9200 13 000031   000000 236000 xsym               LDQ     VM_PROFILE$
        13 000032   000142 036003                    ADLQ    98,DU
        13 000033   200005 756100                    STQ     P$,,AUTO

      328     9201    3           DO WHILE P$ < ADDR(VM_PROFILE.WORK_AREA);

   9201 13 000034   000042 710000 13                 TRA     s:9204

      329     9202    3               P$->BASED_WORD = 0;

   9202 13 000035   200005 470500                    LDP0    P$,,AUTO
        13 000036   000000 450100                    STZ     0,,PR0

      330     9203    3               P$ = PINCRW(P$,1);

   9203 13 000037   200005 236100                    LDQ     P$,,AUTO
        13 000040   000001 036003                    ADLQ    1,DU
        13 000041   200005 756100                    STQ     P$,,AUTO

      331     9204    3           END;

   9204 13 000042   000000 236000 xsym               LDQ     VM_PROFILE$
        13 000043   000160 036003                    ADLQ    112,DU
        13 000044   200005 116100                    CMPQ    P$,,AUTO
        13 000045   000047 600000 13                 TZE     s:9206
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:80   
        13 000046   000035 603000 13                 TRC     s:9202

      332     9205    2       END;

      333     9206    1       RETURN;

   9206 13 000047   000000 702200 xent               TSX2  ! X66_ARET

      334     9207        /**/
      335     9208    1   E_READ:
      336     9209    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9209 13 000050   000000 470400 xsym  E_READ       LDP0    B$TCB$
        13 000051   000000 471500                    LDP1    0,,PR0
        13 000052   100102 236100                    LDQ     66,,PR1
        13 000053   377770 376007                    ANQ     131064,DL
        13 000054   000070 116007                    CMPQ    56,DL
        13 000055   000063 601000 13                 TNZ     s:9216

      337     9210    1       THEN
      338     9211    2       DO;                           /* Enlarge the segment and try again */

      339     9212    2           CALL VMA$ENLARGE_SEGMENT (VM_PROFILE_,1024) ALTRET(E_PMME);

   9212 13 000056   000002 630400 14                 EPPR0   2
        13 000057   000000 631400 14                 EPPR1   0
        13 000060   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        13 000061   000123 702000 13                 TSX2    E_PMME

      340     9213    2           GOTO READ_AGAIN;

   9213 13 000062   000005 710000 13                 TRA     READ_AGAIN

      341     9214    2       END;
      342     9215    1       ELSE
      343     9216    1           ALTRETURN;

PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:81   
   9216 13 000063   000000 702200 xent               TSX2  ! X66_AALT

      344     9217        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:82   
      345     9218    1   VMD$PUT_PROFILE: ENTRY (DCB#) ALTRET;

   9218 13 000064   000000 700200 xent  VMD$PUT_PRO* TSX0  ! X66_AUTO_1
        13 000065   000012 000001                    ZERO    10,1

      346     9219    1       WRITE_PROFILE.V.DCB# = DCB#;

   9219 13 000066   200003 470500                    LDP0    @DCB#,,AUTO
        13 000067   000000 720100                    LXL0    0,,PR0
        13 000070   000026 740000 11                 STX0    WRITE_PROFILE+8

      347     9220    1       WRITE_PROFILE.BUF_ = VM_PROFILE_;

   9220 13 000071   000000 237000 xsym               LDAQ    VM_PROFILE_
        13 000072   000022 757000 11                 STAQ    WRITE_PROFILE+4

      348     9221    1       TEMP = VM_PROFILE.PROFILE_SIZE;

   9221 13 000073   000000 471400 xsym               LDP1    VM_PROFILE$
        13 000074   100002 235100                    LDA     2,,PR1
        13 000075   200004 755100                    STA     TEMP,,AUTO

      349     9222    1       VM_PROFILE.PROFILE_SIZE = POFFW(VM_PROFILE.NEXT$,ADDR(VM_PROFILE));

   9222 13 000076   000000 236000 xsym               LDQ     VM_PROFILE$
        13 000077   000022 772000                    QRL     18
        13 000100   200010 756100                    STQ     VLP_VECTOR+2,,AUTO
        13 000101   100004 236100                    LDQ     4,,PR1
        13 000102   000022 772000                    QRL     18
        13 000103   200010 136100                    SBLQ    VLP_VECTOR+2,,AUTO
        13 000104   100002 756100                    STQ     2,,PR1

      350     9223    1       WRITE_PROFILE.BUF_.BOUND = (VM_PROFILE.PROFILE_SIZE * 4) - 1;

   9223 13 000105   000002 736000                    QLS     2
        13 000106   000001 136007                    SBLQ    1,DL
        13 000107   000020 736000                    QLS     16
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:83   
        13 000110   000022 676000 11                 ERQ     WRITE_PROFILE+4
        13 000111   000004 376000 14                 ANQ     4
        13 000112   000022 656000 11                 ERSQ    WRITE_PROFILE+4

      351     9224    1       CALL M$WRITE (WRITE_PROFILE) ALTRET(E_PMME);

   9224 13 000113   000016 630400 11                 EPPR0   WRITE_PROFILE
        13 000114   440001 713400                    CLIMB   alt,write
        13 000115   401400 401760                    pmme    nvectors=4
        13 000116   000123 702000 13                 TSX2    E_PMME

      352     9225    1       VM_PROFILE.PROFILE_SIZE = TEMP;    /* Restore size of profile segment */

   9225 13 000117   000000 470400 xsym               LDP0    VM_PROFILE$
        13 000120   200004 235100                    LDA     TEMP,,AUTO
        13 000121   000002 755100                    STA     2,,PR0

      353     9226    1       RETURN;

   9226 13 000122   000000 702200 xent               TSX2  ! X66_ARET

      354     9227        %EJECT;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:84   
      355     9228    1   E_PMME:
      356     9229    1       ALTRETURN;

   9229 13 000123   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

READ_PROFILE
 Sect OctLoc
  11     000   000005 777640   000010 006000   000000 377640   000044 006000    .............$..
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     010   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     014   000000 000000   000000 000000                                    ........

WRITE_PROFILE
 Sect OctLoc
  11     016   000003 777640   000026 006000   000000 377640   000044 006000    .............$..
  11     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     026   000000 400400   000000 000000   000000 000000   000000 000000    ................

DELETE_PROFILE
 Sect OctLoc
  11     032   000001 777640   000042 006000   000000 377640   000044 006000    .....".......$..
  11     036   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     042   000000 000000   000000 000000                                    ........

VM_PROFILEKEY
 Sect OctLoc
  11     044   001001 ******                                                    ....

(unnamed)
 Sect OctLoc
  12     000   102060 062040                                                    B02

(unnamed)
 Sect OctLoc
  14     000   000002 000000   000000 002000   000000 006000   000001 006000    ................
  14     004   777777 600000                                                    ....
      357     9230    1   END VMD$GET_PROFILE;
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:85   
      358     9231        %EOD;

PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:86   
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_PROFILE.
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:87   

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_PROFILE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    32-0-0/d STRC(360)   r     1 DELETE_PROFILE             0-0-0/d STRC(504)   r     1 READ_PROFILE
    44-0-0/c STRC(18)    r     1 VM_PROFILEKEY             16-0-0/d STRC(432)   r     1 WRITE_PROFILE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB#                     *0-0-0/w UBIN        r     1 DCB#
     5-0-0/w PTR         r     1 P$                         4-0-0/w UBIN        r     1 TEMP
     6-0-0/d STRC(72)    r     1 VLP_VECTOR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:88   
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR         r     1 VM_PROFILE$
     0-0-0/d VECT        r     1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w UBIN        r     1 BASED_WORD                 0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w STRC(4068)  r     1 VM_PROFILE                 0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GET_PROFILE requires 84 words for executable code.
   Procedure VMD$GET_PROFILE requires 10 words of local(AUTO) storage.
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:89   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:90   
          MINI XREF LISTING

B$ALT.CODE
      9081**DCL      9081--REDEF    9082--REDEF    9082--REDEF
B$ALT.ERR.CODE
      9083**DCL      9209>>IF
B$ALT.ERR.ERR#
      9083**DCL      9083--REDEF
B$ALT.EVID
      9082**DCL      9082--REDEF    9082--REDEF
B$TCB.ALT$
      9077**DCL      9209>>IF
B$TCB$
      8718**DCL      9077--IMP-PTR  9209>>IF
BASED_WORD
      8967**DCL      9202<<ASSIGN
DCB#
      8963**DCL        14--PROC     9191>>ASSIGN   9218--ENTRY    9219>>ASSIGN
DELETE_PROFILE.V
      9055**DCL      9052--DCLINIT
ERRMSG_FID.L#
      8786**DCL      8786--IMP-SIZ
E_PMME
      9229**LABEL    9212--CALLALT  9224--CALLALT
E_READ
      9209**LABEL    9194--CALLALT
M$READ
      6631**DCL-ENT  9194--CALL
M$WRITE
      6631**DCL-ENT  9224--CALL
P$
      8966**DCL      9200<<ASSIGN   9201>>DOWHILE  9202>>ASSIGN   9203<<ASSIGN   9203>>ASSIGN
READ_AGAIN
      9193**LABEL    9213--GOTO
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:91   
READ_PROFILE
      8988**DCL      9194<>CALL
READ_PROFILE.BUF_
      8990**DCL      9193<<ASSIGN
READ_PROFILE.STATION_
      8991**DCL      8992--REDEF
READ_PROFILE.V
      8992**DCL      8988--DCLINIT
READ_PROFILE.V.DCB#
      8992**DCL      9191<<ASSIGN
READ_PROFILE.V.DVBYTE.REREAD#
      9003**DCL      9003--REDEF
READ_PROFILE.V.INDX#
      9001**DCL      9001--REDEF
TEMP
      8965**DCL      9221<<ASSIGN   9225>>ASSIGN
VLP_VECTOR
      9071**DCL      9195<<ASSIGN
VLP_VECTOR.W1.VSIZE#
      9071**DCL      9196>>ASSIGN
VLP_VECTOR.W2
      9072**DCL      9073--REDEF
VMA$ENLARGE_SEGMENT
      8969**DCL-ENT  9212--CALL
VM_PROFILE
      9098**DCL      9222--ASSIGN
VM_PROFILE.NEXT$
      9133**DCL      9222>>ASSIGN
VM_PROFILE.PROFILE_SIZE
      9129**DCL      9196<<ASSIGN   9221>>ASSIGN   9222<<ASSIGN   9223>>ASSIGN   9225<<ASSIGN
VM_PROFILE.RESERVED
      9170**DCL      9200--ASSIGN
VM_PROFILE.VERSION
      9099**DCL      9197>>IF       9199<<ASSIGN
VM_PROFILE.WORK_AREA
      9172**DCL      9201--DOWHILE
PL6.E3A0      #003=VMD$GET_PROFILE File=VMD$SUBR.:VMB6TSI                        WED 08/20/97 15:12 Page:92   
VM_PROFILE$
      8638**DCL      9098--IMP-PTR  9196>>ASSIGN   9197>>IF       9199>>ASSIGN   9200>>ASSIGN   9201>>DOWHILE
      9221>>ASSIGN   9222>>ASSIGN   9222>>ASSIGN   9222>>ASSIGN   9223>>ASSIGN   9225>>ASSIGN
VM_PROFILEKEY
      9185**DCL      8988--DCLINIT  8989--DCLINIT  9027--DCLINIT  9052--DCLINIT  9053--DCLINIT
VM_PROFILE_
      8663**DCL      9193>>ASSIGN   9195>>ASSIGN   9212<>CALL     9220>>ASSIGN
WRITE_PROFILE
      9027**DCL      9224<>CALL
WRITE_PROFILE.BUF_
      9027**DCL      9220<<ASSIGN
WRITE_PROFILE.BUF_.BOUND
      9027**DCL      9223<<ASSIGN
WRITE_PROFILE.STATION_
      9029**DCL      9029--REDEF
WRITE_PROFILE.V
      9030**DCL      9027--DCLINIT
WRITE_PROFILE.V.DCB#
      9030**DCL      9219<<ASSIGN
WRITE_PROFILE.V.DVBYTE.VFC#
      9036**DCL      9036--REDEF
X$STRING.SIZ
      8632**DCL      8633--IMP-SIZ

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:93   
      359        1        /*T***********************************************************/
      360        2        /*T*                                                         */
      361        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      362        4        /*T*                                                         */
      363        5        /*T***********************************************************/
      364        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      365        7        /*F*
      366        8             NAME: VMD$GET_BODY
      367        9             PURPOSE:
      368       10                  To read the specified body record.
      369       11             DESCRIPTION:
      370       12                  This routine has the following parameters.
      371       13
      372       14                  MESSAGE_NUM   - number of the message to read.
      373       15                  DCB#          - dcb open to folder to read from.
      374       16                  REC_NUM       - number of the record to read.
      375       17                  COUNT         - num of bytes in VM_BODYREC.VALUE.DATA
      376       18                  VM_BODYREC    - structure containing info to read/write.
      377       19                  SEEDB         - seed to use for encryption. (optional)
      378       20                  DVBYTE        - DVBYTE from DCB after read. (optional)
      379       21                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      380       22
      381       23                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      382       24
      383       25                  It will read the specified record of the specified message
      384       26                  from the folder pointed to by DCB# into the textc buffer.
      385       27                  The size of the record will be stored into the count portion
      386       28                  of the buffer.
      387       29        */
      388       30        VMD$GET_BODY: PROC (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE,
                30            ENCL_NUMBER,BODYREC$) ALTRET;
      389       31        /***** Include files *****/
      390       32         %INCLUDE CP_6;
      391     5591         %INCLUDE CP_6_SUBS;
      392     6131         %INCLUDE VM_MACRO_C;
      393     7399         %INCLUDE VM_SUBS_C;
      394     7659         %INCLUDE VM_DATA_R;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:94   
      395     8090          %INCLUDE B_ERRORS_C;
      396     9217        /***** Parameters *****/
      397     9218    1   DCL MESSAGE_NUM UBIN WORD;
      398     9219    1   DCL DCB# UBIN WORD;
      399     9220    1   DCL REC_NUM UBIN WORD;
      400     9221    1   DCL COUNT SBIN WORD;
      401     9222    1   DCL LAST_NUM REDEF COUNT UBIN WORD;
      402     9223    1   DCL SEEDB BIT(36);
      403     9224    1   DCL DVBYTE BIT(8);
      404     9225    1   DCL ENCL_NUMBER UBIN WORD;
      405     9226    1   DCL BODYREC$ PTR;
      406     9227          %VM_BODYTYPES;
      407     9233        %SET LISTMAC='1'B;
      408     9234        %SET LISTSUB='1'B;
      409     9235          %VM_BODYREC (STCLASS=" ");
              9236        %LSET LISTDIR='0'B;
              9245    1   DCL 1 VM_BODYREC,
              9246    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_TEXT)%CHARTEXT('/**/'),
              9247                        /* The type of the record to be accessed. */
              9248    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
              9249                         /* Reserved for future use */
              9250    1         2 VALUE,
              9251    1           3 COUNT UBIN WORD,
              9252                        /* Number of bytes of DATA */
              9263    1           3 DATA CHAR(300) CALIGNED;
      410     9267        %VM_BODYREC (NAME=VM_ENCLREC,STCLASS="BASED(BODYREC$)",VARYLEN=YES,TYP=
              9267            %VM_BODY_BINARY_ENCL);
              9268        %LSET LISTDIR='0'B;
              9277    1   DCL 1 VM_ENCLREC BASED(BODYREC$),
              9278    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_BINARY_ENCL)%CHARTEXT('/**/'),
              9279                        /* The type of the record to be accessed. */
              9280    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
              9281                         /* Reserved for future use */
              9282    1         2 VALUE,
              9283    1           3 COUNT UBIN WORD,
              9284                        /* Number of bytes of DATA */
              9293    1           3 DATA CHAR(VM_ENCLREC.VALUE.COUNT) CALIGNED;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:95   
      411     9299        %SET LISTMAC='0'B;
      412     9300        %SET LISTSUB='0'B;
      413     9301        /***** Mail structures *****/
      414     9302            %VM_KEYTYPES;
      415     9323            %VM_BODYKEY;
      416     9343            %VM_BODYKEY (NAME=VM_BODYKEY2);
      417     9363            %VM_ENCLKEY;
      418     9384            %VM_ENCLKEY (NAME=VM_ENCLKEY2);
      419     9405        /***** Fpts *****/
      420     9406         %FPT_READ (FPTN=READ_BODY_REC,KEYS=YES,KEY=VM_BODYKEY);
      421     9445         %FPT_WRITE (FPTN=WRITE_BODY_REC,KEY=VM_BODYKEY,ONEWKEY=YES);
      422     9476         %FPT_DELREC (FPTN=DELREC_BODY_REC,KEY=VM_BODYKEY);
      423     9495          %F$DCB;
      424     9552        /***** Based structures *****/
      425     9553            %B$TCB (STCLASS="BASED(B$TCB$)");
      426     9556          %B$ALT;
      427     9564        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:96   
      428     9565    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;
      429     9566    1       GOTO COMMON_BODY_READER;
      430     9567
      431     9568    1   VMD$GET_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9568            ALTRET;
      432     9569
      433     9570        /*F* NAME:   VMD$GET_TRACE
      434     9571             PURPOSE:
      435     9572                    To read a trace record.
      436     9573             DESCRIPTION: Identical to VMD$GET_BODY, except that it reads a specific
      437     9574                          trace record rather than a body record.
      438     9575        */
      439     9576
      440     9577    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;
      441     9578    1       GOTO COMMON_BODY_READER;
      442     9579
      443     9580        /*F* NAME:   VMD$GET_ENCL
      444     9581             PURPOSE:
      445     9582                     To read an enclosure record
      446     9583             DESCRIPTION: Indentical to VMD$GET_BODY and VMD$GET_TRACE, except
      447     9584                          reads an enclosure record. It needs an enclosure
      448     9585                          number to build the record type in the key.
      449     9586        */
      450     9587
      451     9588    1   VMD$GET_ENCL: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE,
              9588            ENCL_NUMBER,BODYREC$) ALTRET;
      452     9589
      453     9590    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;
      454     9591    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      455     9592    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;
      456     9593    1       GOTO SETUP_READ_FPT;
      457     9594
      458     9595    1   COMMON_BODY_READER:
      459     9596
      460     9597        /*
      461     9598            ***** Setup the bodykey ...
      462     9599        */
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:97   
      463     9600    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      464     9601    1       VM_BODYKEY.REC_NUMBER = REC_NUM;
      465     9602    1       VM_BODYREC.VALUE.DATA = ' ';       /* Blank the input buffer */
      466     9603        /*
      467     9604            ***** Read the record ...
      468     9605        */
      469     9606    1   SETUP_READ_FPT:
      470     9607    1       IF ADDR(SEEDB) ~= ADDR(NIL)
      471     9608    1       THEN
      472     9609    1           READ_BODY_REC.V.SEED# = SEEDB;
      473     9610    1       ELSE
      474     9611    1           READ_BODY_REC.V.SEED# = '0'B;
      475     9612    1       READ_BODY_REC.V.DCB# = DCB#;
      476     9613    2       IF ADDR(BODYREC$) = ADDR(NIL) THEN DO;
      477     9614    2           READ_BODY_REC.BUF_ = VECTOR(VM_BODYREC);
      478     9615    2           READ_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);
      479     9616    2           VM_BODYREC = '0'B;
      480     9617    2           VM_BODYREC.VALUE.DATA = ' ';
      481     9618    2       END;
      482     9619    2       ELSE DO;
      483     9620    2           READ_BODY_REC.BUF_ = VM_ENCLREC_;
      484     9621    2           READ_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);
      485     9622    2           VM_ENCLREC = '0'B;
      486     9623    2           VM_ENCLREC.VALUE.COUNT = 0;
      487     9624    2       END;
      488     9625    1   READ_AGAIN_REC:
      489     9626    1       IF READ_BODY_REC.BUF_.BUF$ = VM_ENCLREC$ THEN READ_BODY_REC.BUF_ = VM_ENCLREC_;
      490     9627    1       CALL M$READ (READ_BODY_REC) ALTRET(E_READ_REC);
      491     9628    1       IF ADDR(DVBYTE) ~= ADDR(NIL)
      492     9629    1       THEN DVBYTE = DCBADDR(DCB#)->F$DCB.DVBYTE;
      493     9630        /*
      494     9631             ***** Calculate the proper value for count ...
      495     9632        */
      496     9633    1       COUNT = DCBADDR(DCB#) -> F$DCB.ARS# -
      497     9634    1         (LENGTHC(READ_BODY_REC.BUF_.BUF$->VM_ENCLREC) -
      498     9635    1         LENGTHC(READ_BODY_REC.BUF_.BUF$->VM_ENCLREC.VALUE.DATA));
      499     9636    1       RETURN;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:98   
      500     9637    1   E_READ_REC:
      501     9638    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
      502     9639    1         AND READ_BODY_REC.BUF_.BUF$ = VM_ENCLREC$
      503     9640    1       THEN
      504     9641    2       DO;                       /* Enlarge the bound if possible and try again */
      505     9642    2           VBOUND( VM_ENCLREC_) = VBOUND( VM_ENCLREC_) + 4096;
      506     9643    2           GOTO READ_AGAIN_REC;
      507     9644    2       END;
      508     9645    1       GOTO E_PMME;
      509     9646        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:99   
      510     9647        /*F*
      511     9648             NAME: VMD$PUT_BODY
      512     9649             PURPOSE:
      513     9650                  To write the specified body record.
      514     9651             DESCRIPTION:
      515     9652                  This routine has the following parameters.
      516     9653
      517     9654                  MESSAGE_NUM   - number of the message to write.
      518     9655                  DCB#          - dcb open to folder to write into.
      519     9656                  REC_NUM       - number of the record to write.
      520     9657                  COUNT         - num of bytes in VM_BODYREC.VALUE.DATA
      521     9658                  VM_BODYREC    - structure containing info to read/write.
      522     9659                  SEEDB         - seed to use for encryption. (optional)
      523     9660                  DVBYTE        - DVBYTE for WRITE
      524     9661                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      525     9662
      526     9663                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      527     9664
      528     9665                  It will write the specified record of the specified message
      529     9666                  into the folder pointed to by DCB# into the textc buffer.
      530     9667                  The size of the record is stored into the count portion
      531     9668                  of the buffer.
      532     9669        */
      533     9670    1   VMD$PUT_BODY: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE) ALTRET;
      534     9671
      535     9672    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;
      536     9673    1       GOTO COMMON_BODY_WRITER;
      537     9674
      538     9675    1   VMD$PUT_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9675            ALTRET;
      539     9676
      540     9677        /*F* NAME:   VMD$PUT_TRACE
      541     9678             PURPOSE:
      542     9679                    To write a trace record.
      543     9680             DESCRIPTION: Identical to VMD$PUT_BODY, except that it writes a specific
      544     9681                          trace record rather than a body record.
      545     9682        */
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:100  
      546     9683
      547     9684    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;
      548     9685    1       GOTO COMMON_BODY_WRITER;
      549     9686
      550     9687    1   VMD$PUT_ENCL: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE,
              9687            ENCL_NUMBER,BODYREC$) ALTRET;
      551     9688
      552     9689        /*F* NAME:   VMD$PUT_ENCL
      553     9690             PURPOSE:
      554     9691                    To write a enclosure record.
      555     9692             DESCRIPTION: Identical to VMD$PUT_BODY, except that it writes a specific
      556     9693                          enclosure record rather than a body record.
      557     9694        */
      558     9695
      559     9696    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;
      560     9697    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      561     9698    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;
      562     9699    1       GOTO SETUP_WRITE_FPT;
      563     9700
      564     9701
      565     9702    1   COMMON_BODY_WRITER:
      566     9703
      567     9704        /*
      568     9705            ***** Setup the bodykey ...
      569     9706        */
      570     9707    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      571     9708    1       VM_BODYKEY.REC_NUMBER = REC_NUM;
      572     9709        /*
      573     9710            ***** Write the record ...
      574     9711        */
      575     9712    1   SETUP_WRITE_FPT:
      576     9713    1       IF ADDR(SEEDB) ~= ADDR(NIL)
      577     9714    1       THEN
      578     9715    1           WRITE_BODY_REC.V.SEED# = SEEDB;
      579     9716    1       ELSE
      580     9717    1           WRITE_BODY_REC.V.SEED# = '0'B;
      581     9718    1       IF ADDR(DVBYTE) = ADDR(NIL) THEN WRITE_BODY_REC.V.DVBYTE = '0'B;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:101  
      582     9719    1       ELSE WRITE_BODY_REC.V.DVBYTE = DVBYTE;
      583     9720    1       WRITE_BODY_REC.V.DCB# = DCB#;
      584     9721    2       IF ADDR(BODYREC$) = ADDR(NIL) THEN DO;
      585     9722    2           WRITE_BODY_REC.BUF_ = VECTOR(VM_BODYREC);
      586     9723    2           WRITE_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);
      587     9724    2           WRITE_BODY_REC.BUF_.BOUND = COUNT +
      588     9725    2             (LENGTHC(VM_BODYREC) - LENGTHC(VM_BODYREC.VALUE.DATA)) - 1;
              9725                      /* 1 byte for bound */
      589     9726    2       END;
      590     9727    2       ELSE DO;
      591     9728    3           IF COUNT = 0 THEN DO;
      592     9729    3               VM_ENCLREC.VALUE.COUNT = 1;
      593     9730    3               VM_ENCLREC.VALUE.DATA = ' ';
      594     9731    3           END;
      595     9732    2           WRITE_BODY_REC.BUF_ = VM_ENCLREC_;
      596     9733    2           IF COUNT = 0 THEN WRITE_BODY_REC.BUF_.BOUND = 8;
      597     9734    2           ELSE
      598     9735    2               WRITE_BODY_REC.BUF_.BOUND = COUNT +
      599     9736    2                 (LENGTHC(VM_ENCLREC) - LENGTHC(VM_ENCLREC.VALUE.DATA)) - 1;
      600     9737    2           WRITE_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);
      601     9738    2       END;
      602     9739
      603     9740    1       CALL M$WRITE (WRITE_BODY_REC) ALTRET(E_PMME);
      604     9741    1       RETURN;
      605     9742        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:102  
      606     9743        /*F*
      607     9744             NAME: VMD$DEL_BODY
      608     9745             PURPOSE:
      609     9746                  To delete the specified body record.
      610     9747             DESCRIPTION:
      611     9748                  This routine has the following parameters.
      612     9749
      613     9750                  MESSAGE_NUM   - number of the message to delete.
      614     9751                  DCB#          - dcb open to folder to delete from.
      615     9752                  REC_NUM       - number of the record to delete.
      616     9753                  LAST_NUM      - number of last record to delete. (optional)
      617     9754                                  When LAST_NUM is specified and non-zero,
      618     9755                                  it will (with REC_NUM) delimit a range of
      619     9756                                  body records to be deleted.
      620     9757                  SEEDB         - UNUSED
      621     9758                  VM_BODYREC    - UNUSED
      622     9759                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      623     9760
      624     9761                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      625     9762
      626     9763                  It will delete the specified (s) of the specified message
      627     9764                  from the folder pointed to by DCB#.
      628     9765        */
      629     9766    1   VMD$DEL_BODY: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE) ALTRET;
      630     9767
      631     9768    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;
      632     9769    1       VM_BODYKEY2.TYPE = %VM_TYPE_BODY;
      633     9770    1       GOTO COMMON_BODY_DELETER;
      634     9771
      635     9772    1   VMD$DEL_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9772            ALTRET;
      636     9773
      637     9774        /*F* NAME:   VMD$DEL_TRACE
      638     9775             PURPOSE:
      639     9776                    To delete trace records.
      640     9777             DESCRIPTION: Identical to VMD$DEL_BODY, except that it delete
      641     9778                          trace records rather than body records.
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:103  
      642     9779        */
      643     9780
      644     9781    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;
      645     9782    1       VM_BODYKEY2.TYPE = %VM_TYPE_TRACE;
      646     9783    1       GOTO COMMON_BODY_DELETER;
      647     9784
      648     9785    1   VMD$DEL_ENCL: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE,
              9785            ENCL_NUMBER,BODYREC$) ALTRET;
      649     9786
      650     9787        /*F* NAME:   VMD$DEL_ENCL
      651     9788             PURPOSE:
      652     9789                    To delete enclosure records.
      653     9790             DESCRIPTION: Identical to VMD$DEL_BODY, except that it delete
      654     9791                          enclosure records rather than body records.
      655     9792        */
      656     9793
      657     9794    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;
      658     9795    1       VM_ENCLKEY2.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;
      659     9796    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      660     9797    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;
      661     9798    1       GOTO SETUP_DEL_FPT;
      662     9799
      663     9800    1   COMMON_BODY_DELETER:
      664     9801
      665     9802        /*
      666     9803            ***** Setup the bodykey ...
      667     9804        */
      668     9805    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;
      669     9806    1       VM_BODYKEY.REC_NUMBER = REC_NUM;
      670     9807
      671     9808        /*
      672     9809             ***** Initialize the fpt fields
      673     9810        */
      674     9811    1   SETUP_DEL_FPT:
      675     9812    1       DELREC_BODY_REC.V.DCB# = DCB#;
      676     9813    1       DELREC_BODY_REC.LKEY_ = VECTOR(NIL);
      677     9814        /*
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:104  
      678     9815             ***** Was a range of records specified ???
      679     9816        */
      680     9817    1       IF ADDR(LAST_NUM) ~= ADDR(NIL)
      681     9818    2       THEN DO;
      682     9819    2           IF LAST_NUM ~= 0 AND ADDR(BODYREC$) = ADDR(NIL)
      683     9820    3           THEN DO;
      684     9821    3               VM_BODYKEY2.MESSAGE_NUMBER = MESSAGE_NUM;
      685     9822    3               VM_BODYKEY2.REC_NUMBER = LAST_NUM;
      686     9823    3               DELREC_BODY_REC.LKEY_ = VECTOR(VM_BODYKEY2);
      687     9824    3           END;
      688     9825    3           ELSE DO;
      689     9826    3               IF LAST_NUM ~= 0 AND ADDR(BODYREC$) ~= ADDR(NIL)
      690     9827    4               THEN DO;
      691     9828    4                   VM_ENCLKEY2.MESSAGE_NUMBER = MESSAGE_NUM;
      692     9829    4                   VM_ENCLKEY2.REC_NUMBER = LAST_NUM;
      693     9830    4                   DELREC_BODY_REC.LKEY_ = VECTOR(VM_ENCLKEY2);
      694     9831    4               END;
      695     9832    3           END;
      696     9833    2       END;
      697     9834
      698     9835    1       IF ADDR(BODYREC$) ~= ADDR(NIL) THEN
      699     9836    1           DELREC_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);
      700     9837    1       ELSE
      701     9838    1           DELREC_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);
      702     9839
      703     9840        /*
      704     9841            ***** Delete the record(s) ...
      705     9842        */
      706     9843    1       CALL M$DELREC (DELREC_BODY_REC) ALTRET(E_PMME);
      707     9844    1       RETURN;
      708     9845        /**/
      709     9846    1   E_PMME:
      710     9847    1       ALTRETURN;
      711     9848    1   END VMD$GET_BODY;
      712     9849        %EOD;

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:105  
--  Include file information  --

   B_ERRORS_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GET_BODY.

   Procedure VMD$GET_BODY requires 344 words for executable code.
   Procedure VMD$GET_BODY requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:106  

 Object Unit name= VMD$GET_BODY                               File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:12:45.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    46     56  VMD$GET_BODY
   12   Proc  even  none   344    530  VMD$GET_BODY
   13  RoData even  none    16     20  VMD$GET_BODY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        9  VMD$GET_BODY
    12      5          yes     yes      Std        7  VMD$GET_TRACE
    12     12          yes     yes      Std        9  VMD$GET_ENCL
    12    212          yes     yes      Std        7  VMD$PUT_BODY
    12    217          yes     yes      Std        7  VMD$PUT_TRACE
    12    224          yes     yes      Std        9  VMD$PUT_ENCL
    12    376          yes     yes      Std        7  VMD$DEL_BODY
    12    404          yes     yes      Std        7  VMD$DEL_TRACE
    12    412          yes     yes      Std        9  VMD$DEL_ENCL
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:107  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_N
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:108  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:109  


      359        1        /*T***********************************************************/
      360        2        /*T*                                                         */
      361        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      362        4        /*T*                                                         */
      363        5        /*T***********************************************************/
      364        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      365        7        /*F*
      366        8             NAME: VMD$GET_BODY
      367        9             PURPOSE:
      368       10                  To read the specified body record.
      369       11             DESCRIPTION:
      370       12                  This routine has the following parameters.
      371       13
      372       14                  MESSAGE_NUM   - number of the message to read.
      373       15                  DCB#          - dcb open to folder to read from.
      374       16                  REC_NUM       - number of the record to read.
      375       17                  COUNT         - num of bytes in VM_BODYREC.VALUE.DATA
      376       18                  VM_BODYREC    - structure containing info to read/write.
      377       19                  SEEDB         - seed to use for encryption. (optional)
      378       20                  DVBYTE        - DVBYTE from DCB after read. (optional)
      379       21                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      380       22
      381       23                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      382       24
      383       25                  It will read the specified record of the specified message
      384       26                  from the folder pointed to by DCB# into the textc buffer.
      385       27                  The size of the record will be stored into the count portion
      386       28                  of the buffer.
      387       29        */
      388       30        VMD$GET_BODY: PROC (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE,
                30            ENCL_NUMBER,BODYREC$) ALTRET;

     30 12 000000   000000 700200 xent  VMD$GET_BODY TSX0  ! X66_AUTO_N
        12 000001   000016 000011                    ZERO    14,9

      389       31        /***** Include files *****/
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:110  
      390       32         %INCLUDE CP_6;
      391     5591         %INCLUDE CP_6_SUBS;
      392     6131         %INCLUDE VM_MACRO_C;
      393     7399         %INCLUDE VM_SUBS_C;
      394     7659         %INCLUDE VM_DATA_R;
      395     8090          %INCLUDE B_ERRORS_C;
      396     9217        /***** Parameters *****/
      397     9218    1   DCL MESSAGE_NUM UBIN WORD;
      398     9219    1   DCL DCB# UBIN WORD;
      399     9220    1   DCL REC_NUM UBIN WORD;
      400     9221    1   DCL COUNT SBIN WORD;
      401     9222    1   DCL LAST_NUM REDEF COUNT UBIN WORD;
      402     9223    1   DCL SEEDB BIT(36);
      403     9224    1   DCL DVBYTE BIT(8);
      404     9225    1   DCL ENCL_NUMBER UBIN WORD;
      405     9226    1   DCL BODYREC$ PTR;
      406     9227          %VM_BODYTYPES;
      407     9233        %SET LISTMAC='1'B;
      408     9234        %SET LISTSUB='1'B;
      409     9235          %VM_BODYREC (STCLASS=" ");
              9236        %LSET LISTDIR='0'B;
              9245    1   DCL 1 VM_BODYREC,
              9246    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_TEXT)%CHARTEXT('/**/'),
              9247                        /* The type of the record to be accessed. */
              9248    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
              9249                         /* Reserved for future use */
              9250    1         2 VALUE,
              9251    1           3 COUNT UBIN WORD,
              9252                        /* Number of bytes of DATA */
              9263    1           3 DATA CHAR(300) CALIGNED;
      410     9267        %VM_BODYREC (NAME=VM_ENCLREC,STCLASS="BASED(BODYREC$)",VARYLEN=YES,TYP=
              9267            %VM_BODY_BINARY_ENCL);
              9268        %LSET LISTDIR='0'B;
              9277    1   DCL 1 VM_ENCLREC BASED(BODYREC$),
              9278    1         2 TYPE UBIN BYTE CALIGNED %INIT(%VM_BODY_BINARY_ENCL)%CHARTEXT('/**/'),
              9279                        /* The type of the record to be accessed. */
              9280    1         2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:111  
              9281                         /* Reserved for future use */
              9282    1         2 VALUE,
              9283    1           3 COUNT UBIN WORD,
              9284                        /* Number of bytes of DATA */
              9293    1           3 DATA CHAR(VM_ENCLREC.VALUE.COUNT) CALIGNED;
      411     9299        %SET LISTMAC='0'B;
      412     9300        %SET LISTSUB='0'B;
      413     9301        /***** Mail structures *****/
      414     9302            %VM_KEYTYPES;
      415     9323            %VM_BODYKEY;
      416     9343            %VM_BODYKEY (NAME=VM_BODYKEY2);
      417     9363            %VM_ENCLKEY;
      418     9384            %VM_ENCLKEY (NAME=VM_ENCLKEY2);
      419     9405        /***** Fpts *****/
      420     9406         %FPT_READ (FPTN=READ_BODY_REC,KEYS=YES,KEY=VM_BODYKEY);
      421     9445         %FPT_WRITE (FPTN=WRITE_BODY_REC,KEY=VM_BODYKEY,ONEWKEY=YES);
      422     9476         %FPT_DELREC (FPTN=DELREC_BODY_REC,KEY=VM_BODYKEY);
      423     9495          %F$DCB;
      424     9552        /***** Based structures *****/
      425     9553            %B$TCB (STCLASS="BASED(B$TCB$)");
      426     9556          %B$ALT;
      427     9564        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:112  
      428     9565    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;

   9565 12 000002   000060 236003                    LDQ     48,DU
        12 000003   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      429     9566    1       GOTO COMMON_BODY_READER;

   9566 12 000004   000032 710000 12                 TRA     COMMON_BODY_READER

      430     9567
      431     9568    1   VMD$GET_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9568            ALTRET;

   9568 12 000005   000000 700200 xent  VMD$GET_TRA* TSX0  ! X66_AUTO_N
        12 000006   000016 000011                    ZERO    14,9

      432     9569
      433     9570        /*F* NAME:   VMD$GET_TRACE
      434     9571             PURPOSE:
      435     9572                    To read a trace record.
      436     9573             DESCRIPTION: Identical to VMD$GET_BODY, except that it reads a specific
      437     9574                          trace record rather than a body record.
      438     9575        */
      439     9576
      440     9577    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;

   9577 12 000007   000054 236003                    LDQ     44,DU
        12 000010   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      441     9578    1       GOTO COMMON_BODY_READER;

   9578 12 000011   000032 710000 12                 TRA     COMMON_BODY_READER

      442     9579
      443     9580        /*F* NAME:   VMD$GET_ENCL
      444     9581             PURPOSE:
      445     9582                     To read an enclosure record
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:113  
      446     9583             DESCRIPTION: Indentical to VMD$GET_BODY and VMD$GET_TRACE, except
      447     9584                          reads an enclosure record. It needs an enclosure
      448     9585                          number to build the record type in the key.
      449     9586        */
      450     9587
      451     9588    1   VMD$GET_ENCL: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE,
              9588            ENCL_NUMBER,BODYREC$) ALTRET;

   9588 12 000012   000000 700200 xent  VMD$GET_ENCL TSX0  ! X66_AUTO_N
        12 000013   000016 000011                    ZERO    14,9

      452     9589
      453     9590    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;

   9590 12 000014   200012 470500                    LDP0    @ENCL_NUMBER,,AUTO
        12 000015   000000 236100                    LDQ     0,,PR0
        12 000016   000144 036007                    ADLQ    100,DL
        12 000017   000022 736000                    QLS     18
        12 000020   000004 552020 11                 STBQ    VM_ENCLKEY,'20'O

      454     9591    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;

   9591 12 000021   200003 471500                    LDP1    @MESSAGE_NUM,,AUTO
        12 000022   000000 100500                    MLR     fill='000'O
        12 000023   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        12 000024   000004 400004 11                 ADSC9   VM_ENCLKEY               cn=2,n=4

      455     9592    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;

   9592 12 000025   200005 473500                    LDP3    @REC_NUM,,AUTO
        12 000026   000000 100500                    MLR     fill='000'O
        12 000027   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        12 000030   000005 400004 11                 ADSC9   VM_ENCLKEY+1             cn=2,n=4

      456     9593    1       GOTO SETUP_READ_FPT;

   9593 12 000031   000045 710000 12                 TRA     SETUP_READ_FPT
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:114  

      457     9594
      458     9595    1   COMMON_BODY_READER:
      459     9596
      460     9597        /*
      461     9598            ***** Setup the bodykey ...
      462     9599        */
      463     9600    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;

   9600 12 000032   200003 470500       COMMON_BODY* LDP0    @MESSAGE_NUM,,AUTO
        12 000033   000000 100500                    MLR     fill='000'O
        12 000034   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
        12 000035   000000 400004 11                 ADSC9   VM_BODYKEY               cn=2,n=4

      464     9601    1       VM_BODYKEY.REC_NUMBER = REC_NUM;

   9601 12 000036   200005 471500                    LDP1    @REC_NUM,,AUTO
        12 000037   100000 720100                    LXL0    0,,PR1
        12 000040   000001 440000 11                 SXL0    VM_BODYKEY+1

      465     9602    1       VM_BODYREC.VALUE.DATA = ' ';       /* Blank the input buffer */

   9602 12 000041   200010 473500                    LDP3    @VM_BODYREC,,AUTO
        12 000042   040100 100400                    MLR     fill='040'O
        12 000043   000000 000001 13                 ADSC9   0                        cn=0,n=1
        12 000044   300002 000454                    ADSC9   2,,PR3                   cn=0,n=300

      466     9603        /*
      467     9604            ***** Read the record ...
      468     9605        */
      469     9606    1   SETUP_READ_FPT:
      470     9607    1       IF ADDR(SEEDB) ~= ADDR(NIL)

   9607 12 000045   200007 236100       SETUP_READ_* LDQ     @SEEDB,,AUTO
        12 000046   000001 116000 13                 CMPQ    1
        12 000047   000055 600000 12                 TZE     s:9611

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:115  
      471     9608    1       THEN
      472     9609    1           READ_BODY_REC.V.SEED# = SEEDB;

   9609 12 000050   200007 470500                    LDP0    @SEEDB,,AUTO
        12 000051   003000 060500                    CSL     bolr='003'O
        12 000052   000000 000044                    BDSC    0,,PR0                   by=0,bit=0,n=36
        12 000053   000024 000044 11                 BDSC    READ_BODY_REC+10         by=0,bit=0,n=36
        12 000054   000056 710000 12                 TRA     s:9612

      473     9610    1       ELSE
      474     9611    1           READ_BODY_REC.V.SEED# = '0'B;

   9611 12 000055   000024 450000 11                 STZ     READ_BODY_REC+10

      475     9612    1       READ_BODY_REC.V.DCB# = DCB#;

   9612 12 000056   200004 470500                    LDP0    @DCB#,,AUTO
        12 000057   000000 720100                    LXL0    0,,PR0
        12 000060   000022 740000 11                 STX0    READ_BODY_REC+8

      476     9613    2       IF ADDR(BODYREC$) = ADDR(NIL) THEN DO;

   9613 12 000061   200013 236100                    LDQ     @BODYREC$,,AUTO
        12 000062   000001 116000 13                 CMPQ    1
        12 000063   000101 601000 12                 TNZ     s:9620

      477     9614    2           READ_BODY_REC.BUF_ = VECTOR(VM_BODYREC);

   9614 12 000064   000002 235000 13                 LDA     2
        12 000065   200010 236100                    LDQ     @VM_BODYREC,,AUTO
        12 000066   000016 757000 11                 STAQ    READ_BODY_REC+4

      478     9615    2           READ_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);

   9615 12 000067   000004 237000 13                 LDAQ    4
        12 000070   000014 757000 11                 STAQ    READ_BODY_REC+2

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:116  
      479     9616    2           VM_BODYREC = '0'B;

   9616 12 000071   200010 471500                    LDP1    @VM_BODYREC,,AUTO
        12 000072   000100 100400                    MLR     fill='000'O
        12 000073   000003 000001 13                 ADSC9   3                        cn=0,n=1
        12 000074   100000 000464                    ADSC9   0,,PR1                   cn=0,n=308

      480     9617    2           VM_BODYREC.VALUE.DATA = ' ';

   9617 12 000075   040100 100400                    MLR     fill='040'O
        12 000076   000000 000001 13                 ADSC9   0                        cn=0,n=1
        12 000077   100002 000454                    ADSC9   2,,PR1                   cn=0,n=300

      481     9618    2       END;

   9618 12 000100   000116 710000 12                 TRA     READ_AGAIN_REC

      482     9619    2       ELSE DO;

      483     9620    2           READ_BODY_REC.BUF_ = VM_ENCLREC_;

   9620 12 000101   000000 237000 xsym               LDAQ    VM_ENCLREC_
        12 000102   000016 757000 11                 STAQ    READ_BODY_REC+4

      484     9621    2           READ_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);

   9621 12 000103   000006 237000 13                 LDAQ    6
        12 000104   000014 757000 11                 STAQ    READ_BODY_REC+2

      485     9622    2           VM_ENCLREC = '0'B;

   9622 12 000105   200013 471500                    LDP1    @BODYREC$,,AUTO
        12 000106   100000 473500                    LDP3    0,,PR1
        12 000107   300001 721100                    LXL1    1,,PR3
        12 000110   000010 622011                    EAX2    8,X1
        12 000111   000140 100400                    MLR     fill='000'O
        12 000112   000003 000001 13                 ADSC9   3                        cn=0,n=1
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:117  
        12 000113   300000 000012                    ADSC9   0,,PR3                   cn=0,n=*X2

      486     9623    2           VM_ENCLREC.VALUE.COUNT = 0;

   9623 12 000114   100000 473500                    LDP3    0,,PR1
        12 000115   300001 450100                    STZ     1,,PR3

      487     9624    2       END;

      488     9625    1   READ_AGAIN_REC:
      489     9626    1       IF READ_BODY_REC.BUF_.BUF$ = VM_ENCLREC$ THEN READ_BODY_REC.BUF_ = VM_ENCLREC_;

   9626 12 000116   000017 236000 11    READ_AGAIN_* LDQ     READ_BODY_REC+5
        12 000117   000000 116000 xsym               CMPQ    VM_ENCLREC$
        12 000120   000123 601000 12                 TNZ     s:9627

   9626 12 000121   000000 237000 xsym               LDAQ    VM_ENCLREC_
        12 000122   000016 757000 11                 STAQ    READ_BODY_REC+4

      490     9627    1       CALL M$READ (READ_BODY_REC) ALTRET(E_READ_REC);

   9627 12 000123   000012 630400 11                 EPPR0   READ_BODY_REC
        12 000124   440000 713400                    CLIMB   alt,read
        12 000125   401400 401760                    pmme    nvectors=4
        12 000126   000170 702000 12                 TSX2    E_READ_REC

      491     9628    1       IF ADDR(DVBYTE) ~= ADDR(NIL)

   9628 12 000127   200011 236100                    LDQ     @DVBYTE,,AUTO
        12 000130   000001 116000 13                 CMPQ    1
        12 000131   000143 600000 12                 TZE     s:9633

      492     9629    1       THEN DVBYTE = DCBADDR(DCB#)->F$DCB.DVBYTE;

   9629 12 000132   000010 470400 13                 LDP0    8
        12 000133   000000 471500                    LDP1    0,,PR0
        12 000134   200004 473500                    LDP3    @DCB#,,AUTO
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:118  
        12 000135   300000 720100                    LXL0    0,,PR3
        12 000136   100000 474510                    LDP4    0,X0,PR1
        12 000137   200011 475500                    LDP5    @DVBYTE,,AUTO
        12 000140   003100 060500                    CSL     bolr='003'O
        12 000141   400003 000010                    BDSC    3,,PR4                   by=0,bit=0,n=8
        12 000142   500000 000010                    BDSC    0,,PR5                   by=0,bit=0,n=8

      493     9630        /*
      494     9631             ***** Calculate the proper value for count ...
      495     9632        */
      496     9633    1       COUNT = DCBADDR(DCB#) -> F$DCB.ARS# -

   9633 12 000143   000010 470400 13                 LDP0    8
        12 000144   000000 471500                    LDP1    0,,PR0
        12 000145   200004 473500                    LDP3    @DCB#,,AUTO
        12 000146   300000 720100                    LXL0    0,,PR3
        12 000147   100000 474510                    LDP4    0,X0,PR1
        12 000150   000017 475400 11                 LDP5    READ_BODY_REC+5
        12 000151   500001 721100                    LXL1    1,,PR5
        12 000152   000010 622011                    EAX2    8,X1
        12 000153   500001 723100                    LXL3    1,,PR5
        12 000154   000000 635013                    EAA     0,X3
        12 000155   000022 771000                    ARL     18
        12 000156   200014 755100                    STA     @BODYREC$+1,,AUTO
        12 000157   000000 636012                    EAQ     0,X2
        12 000160   000022 772000                    QRL     18
        12 000161   200014 136100                    SBLQ    @BODYREC$+1,,AUTO
        12 000162   200015 756100                    STQ     @BODYREC$+2,,AUTO
        12 000163   400000 236100                    LDQ     0,,PR4
        12 000164   200015 136100                    SBLQ    @BODYREC$+2,,AUTO
        12 000165   200006 474500                    LDP4    @COUNT,,AUTO
        12 000166   400000 756100                    STQ     0,,PR4

      497     9634    1         (LENGTHC(READ_BODY_REC.BUF_.BUF$->VM_ENCLREC) -
      498     9635    1         LENGTHC(READ_BODY_REC.BUF_.BUF$->VM_ENCLREC.VALUE.DATA));
      499     9636    1       RETURN;

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:119  
   9636 12 000167   000000 702200 xent               TSX2  ! X66_ARET

      500     9637    1   E_READ_REC:
      501     9638    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9638 12 000170   000000 470400 xsym  E_READ_REC   LDP0    B$TCB$
        12 000171   000000 471500                    LDP1    0,,PR0
        12 000172   100102 236100                    LDQ     66,,PR1
        12 000173   377770 376007                    ANQ     131064,DL
        12 000174   000070 116007                    CMPQ    56,DL
        12 000175   000211 601000 12                 TNZ     s:9645
        12 000176   000017 236000 11                 LDQ     READ_BODY_REC+5
        12 000177   000000 116000 xsym               CMPQ    VM_ENCLREC$
        12 000200   000211 601000 12                 TNZ     s:9645

      502     9639    1         AND READ_BODY_REC.BUF_.BUF$ = VM_ENCLREC$
      503     9640    1       THEN
      504     9641    2       DO;                       /* Enlarge the bound if possible and try again */

      505     9642    2           VBOUND( VM_ENCLREC_) = VBOUND( VM_ENCLREC_) + 4096;

   9642 12 000201   000000 236000 xsym               LDQ     VM_ENCLREC_
        12 000202   000020 772000                    QRL     16
        12 000203   010000 036007                    ADLQ    4096,DL
        12 000204   000020 736000                    QLS     16
        12 000205   000000 676000 xsym               ERQ     VM_ENCLREC_
        12 000206   000011 376000 13                 ANQ     9
        12 000207   000000 656000 xsym               ERSQ    VM_ENCLREC_

      506     9643    2           GOTO READ_AGAIN_REC;

   9643 12 000210   000116 710000 12                 TRA     READ_AGAIN_REC

      507     9644    2       END;
      508     9645    1       GOTO E_PMME;

   9645 12 000211   000527 710000 12                 TRA     E_PMME
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:120  

      509     9646        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:121  
      510     9647        /*F*
      511     9648             NAME: VMD$PUT_BODY
      512     9649             PURPOSE:
      513     9650                  To write the specified body record.
      514     9651             DESCRIPTION:
      515     9652                  This routine has the following parameters.
      516     9653
      517     9654                  MESSAGE_NUM   - number of the message to write.
      518     9655                  DCB#          - dcb open to folder to write into.
      519     9656                  REC_NUM       - number of the record to write.
      520     9657                  COUNT         - num of bytes in VM_BODYREC.VALUE.DATA
      521     9658                  VM_BODYREC    - structure containing info to read/write.
      522     9659                  SEEDB         - seed to use for encryption. (optional)
      523     9660                  DVBYTE        - DVBYTE for WRITE
      524     9661                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      525     9662
      526     9663                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      527     9664
      528     9665                  It will write the specified record of the specified message
      529     9666                  into the folder pointed to by DCB# into the textc buffer.
      530     9667                  The size of the record is stored into the count portion
      531     9668                  of the buffer.
      532     9669        */
      533     9670    1  VMD$PUT_BODY: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE) ALTRET;

   9670 12 000212   000000 700200 xent  VMD$PUT_BODY TSX0  ! X66_AUTO_N
        12 000213   000016 000011                    ZERO    14,9

      534     9671
      535     9672    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;

   9672 12 000214   000060 236003                    LDQ     48,DU
        12 000215   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      536     9673    1       GOTO COMMON_BODY_WRITER;

   9673 12 000216   000244 710000 12                 TRA     COMMON_BODY_WRITER
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:122  

      537     9674
      538     9675    1   VMD$PUT_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9675            ALTRET;

   9675 12 000217   000000 700200 xent  VMD$PUT_TRA* TSX0  ! X66_AUTO_N
        12 000220   000016 000011                    ZERO    14,9

      539     9676
      540     9677        /*F* NAME:   VMD$PUT_TRACE
      541     9678             PURPOSE:
      542     9679                    To write a trace record.
      543     9680             DESCRIPTION: Identical to VMD$PUT_BODY, except that it writes a specific
      544     9681                          trace record rather than a body record.
      545     9682        */
      546     9683
      547     9684    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;

   9684 12 000221   000054 236003                    LDQ     44,DU
        12 000222   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      548     9685    1       GOTO COMMON_BODY_WRITER;

   9685 12 000223   000244 710000 12                 TRA     COMMON_BODY_WRITER

      549     9686
      550     9687    1   VMD$PUT_ENCL: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE,
              9687            ENCL_NUMBER,BODYREC$) ALTRET;

   9687 12 000224   000000 700200 xent  VMD$PUT_ENCL TSX0  ! X66_AUTO_N
        12 000225   000016 000011                    ZERO    14,9

      551     9688
      552     9689        /*F* NAME:   VMD$PUT_ENCL
      553     9690             PURPOSE:
      554     9691                    To write a enclosure record.
      555     9692             DESCRIPTION: Identical to VMD$PUT_BODY, except that it writes a specific
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:123  
      556     9693                          enclosure record rather than a body record.
      557     9694        */
      558     9695
      559     9696    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;

   9696 12 000226   200012 470500                    LDP0    @ENCL_NUMBER,,AUTO
        12 000227   000000 236100                    LDQ     0,,PR0
        12 000230   000144 036007                    ADLQ    100,DL
        12 000231   000022 736000                    QLS     18
        12 000232   000004 552020 11                 STBQ    VM_ENCLKEY,'20'O

      560     9697    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;

   9697 12 000233   200003 471500                    LDP1    @MESSAGE_NUM,,AUTO
        12 000234   000000 100500                    MLR     fill='000'O
        12 000235   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        12 000236   000004 400004 11                 ADSC9   VM_ENCLKEY               cn=2,n=4

      561     9698    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;

   9698 12 000237   200005 473500                    LDP3    @REC_NUM,,AUTO
        12 000240   000000 100500                    MLR     fill='000'O
        12 000241   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        12 000242   000005 400004 11                 ADSC9   VM_ENCLKEY+1             cn=2,n=4

      562     9699    1       GOTO SETUP_WRITE_FPT;

   9699 12 000243   000253 710000 12                 TRA     SETUP_WRITE_FPT

      563     9700
      564     9701
      565     9702    1   COMMON_BODY_WRITER:
      566     9703
      567     9704        /*
      568     9705            ***** Setup the bodykey ...
      569     9706        */
      570     9707    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:124  

   9707 12 000244   200003 470500       COMMON_BODY* LDP0    @MESSAGE_NUM,,AUTO
        12 000245   000000 100500                    MLR     fill='000'O
        12 000246   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
        12 000247   000000 400004 11                 ADSC9   VM_BODYKEY               cn=2,n=4

      571     9708    1       VM_BODYKEY.REC_NUMBER = REC_NUM;

   9708 12 000250   200005 471500                    LDP1    @REC_NUM,,AUTO
        12 000251   100000 720100                    LXL0    0,,PR1
        12 000252   000001 440000 11                 SXL0    VM_BODYKEY+1

      572     9709        /*
      573     9710            ***** Write the record ...
      574     9711        */
      575     9712    1   SETUP_WRITE_FPT:
      576     9713    1       IF ADDR(SEEDB) ~= ADDR(NIL)

   9713 12 000253   200007 236100       SETUP_WRITE* LDQ     @SEEDB,,AUTO
        12 000254   000001 116000 13                 CMPQ    1
        12 000255   000263 600000 12                 TZE     s:9717

      577     9714    1       THEN
      578     9715    1           WRITE_BODY_REC.V.SEED# = SEEDB;

   9715 12 000256   200007 470500                    LDP0    @SEEDB,,AUTO
        12 000257   003000 060500                    CSL     bolr='003'O
        12 000260   000000 000044                    BDSC    0,,PR0                   by=0,bit=0,n=36
        12 000261   000042 000044 11                 BDSC    WRITE_BODY_REC+10        by=0,bit=0,n=36
        12 000262   000264 710000 12                 TRA     s:9718

      579     9716    1       ELSE
      580     9717    1           WRITE_BODY_REC.V.SEED# = '0'B;

   9717 12 000263   000042 450000 11                 STZ     WRITE_BODY_REC+10

      581     9718    1       IF ADDR(DVBYTE) = ADDR(NIL) THEN WRITE_BODY_REC.V.DVBYTE = '0'B;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:125  

   9718 12 000264   200011 236100                    LDQ     @DVBYTE,,AUTO
        12 000265   000001 116000 13                 CMPQ    1
        12 000266   000272 601000 12                 TNZ     s:9719

   9718 12 000267   000000 236003                    LDQ     0,DU
        12 000270   000043 552040 11                 STBQ    WRITE_BODY_REC+11,'40'O
        12 000271   000276 710000 12                 TRA     s:9720

      582     9719    1       ELSE WRITE_BODY_REC.V.DVBYTE = DVBYTE;

   9719 12 000272   200011 470500                    LDP0    @DVBYTE,,AUTO
        12 000273   003000 060500                    CSL     bolr='003'O
        12 000274   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=8
        12 000275   000043 000011 11                 BDSC    WRITE_BODY_REC+11        by=0,bit=0,n=9

      583     9720    1       WRITE_BODY_REC.V.DCB# = DCB#;

   9720 12 000276   200004 470500                    LDP0    @DCB#,,AUTO
        12 000277   000000 720100                    LXL0    0,,PR0
        12 000300   000040 740000 11                 STX0    WRITE_BODY_REC+8

      584     9721    2       IF ADDR(BODYREC$) = ADDR(NIL) THEN DO;

   9721 12 000301   200013 236100                    LDQ     @BODYREC$,,AUTO
        12 000302   000001 116000 13                 CMPQ    1
        12 000303   000321 601000 12                 TNZ     s:9728

      585     9722    2           WRITE_BODY_REC.BUF_ = VECTOR(VM_BODYREC);

   9722 12 000304   000002 235000 13                 LDA     2
        12 000305   200010 236100                    LDQ     @VM_BODYREC,,AUTO
        12 000306   000034 757000 11                 STAQ    WRITE_BODY_REC+4

      586     9723    2           WRITE_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);

   9723 12 000307   000004 237000 13                 LDAQ    4
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:126  
        12 000310   000032 757000 11                 STAQ    WRITE_BODY_REC+2

      587     9724    2           WRITE_BODY_REC.BUF_.BOUND = COUNT +

   9724 12 000311   200006 471500                    LDP1    @COUNT,,AUTO
        12 000312   100000 236100                    LDQ     0,,PR1
        12 000313   000007 036007                    ADLQ    7,DL
        12 000314   000020 736000                    QLS     16
        12 000315   000034 676000 11                 ERQ     WRITE_BODY_REC+4
        12 000316   000011 376000 13                 ANQ     9
        12 000317   000034 656000 11                 ERSQ    WRITE_BODY_REC+4

      588     9725    2             (LENGTHC(VM_BODYREC) - LENGTHC(VM_BODYREC.VALUE.DATA)) - 1;
              9725                      /* 1 byte for bound */
      589     9726    2       END;

   9726 12 000320   000371 710000 12                 TRA     s:9740

      590     9727    2       ELSE DO;

      591     9728    3           IF COUNT = 0 THEN DO;

   9728 12 000321   200006 471500                    LDP1    @COUNT,,AUTO
        12 000322   100000 235100                    LDA     0,,PR1
        12 000323   000335 601000 12                 TNZ     s:9732

      592     9729    3               VM_ENCLREC.VALUE.COUNT = 1;

   9729 12 000324   200013 473500                    LDP3    @BODYREC$,,AUTO
        12 000325   300000 474500                    LDP4    0,,PR3
        12 000326   000001 235007                    LDA     1,DL
        12 000327   400001 755100                    STA     1,,PR4

      593     9730    3               VM_ENCLREC.VALUE.DATA = ' ';

   9730 12 000330   300000 474500                    LDP4    0,,PR3
        12 000331   400001 720100                    LXL0    1,,PR4
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:127  
        12 000332   040140 100400                    MLR     fill='040'O
        12 000333   000000 000001 13                 ADSC9   0                        cn=0,n=1
        12 000334   400002 000010                    ADSC9   2,,PR4                   cn=0,n=*X0

      594     9731    3           END;

      595     9732    2           WRITE_BODY_REC.BUF_ = VM_ENCLREC_;

   9732 12 000335   000000 237000 xsym               LDAQ    VM_ENCLREC_
        12 000336   000034 757000 11                 STAQ    WRITE_BODY_REC+4

      596     9733    2           IF COUNT = 0 THEN WRITE_BODY_REC.BUF_.BOUND = 8;

   9733 12 000337   100000 235100                    LDA     0,,PR1
        12 000340   000346 601000 12                 TNZ     s:9735

   9733 12 000341   000034 236000 11                 LDQ     WRITE_BODY_REC+4
        12 000342   177777 376007                    ANQ     65535,DL
        12 000343   000002 276003                    ORQ     2,DU
        12 000344   000034 756000 11                 STQ     WRITE_BODY_REC+4
        12 000345   000367 710000 12                 TRA     s:9737

      597     9734    2           ELSE
      598     9735    2               WRITE_BODY_REC.BUF_.BOUND = COUNT +

   9735 12 000346   200013 473500                    LDP3    @BODYREC$,,AUTO
        12 000347   300000 474500                    LDP4    0,,PR3
        12 000350   400001 720100                    LXL0    1,,PR4
        12 000351   000010 621010                    EAX1    8,X0
        12 000352   400001 722100                    LXL2    1,,PR4
        12 000353   000000 635012                    EAA     0,X2
        12 000354   000022 771000                    ARL     18
        12 000355   200014 755100                    STA     @BODYREC$+1,,AUTO
        12 000356   000000 636011                    EAQ     0,X1
        12 000357   000022 772000                    QRL     18
        12 000360   200014 136100                    SBLQ    @BODYREC$+1,,AUTO
        12 000361   100000 036100                    ADLQ    0,,PR1
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:128  
        12 000362   000001 136007                    SBLQ    1,DL
        12 000363   000020 736000                    QLS     16
        12 000364   000034 676000 11                 ERQ     WRITE_BODY_REC+4
        12 000365   000011 376000 13                 ANQ     9
        12 000366   000034 656000 11                 ERSQ    WRITE_BODY_REC+4

      599     9736    2                 (LENGTHC(VM_ENCLREC) - LENGTHC(VM_ENCLREC.VALUE.DATA)) - 1;
      600     9737    2           WRITE_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);

   9737 12 000367   000006 237000 13                 LDAQ    6
        12 000370   000032 757000 11                 STAQ    WRITE_BODY_REC+2

      601     9738    2       END;

      602     9739
      603     9740    1       CALL M$WRITE (WRITE_BODY_REC) ALTRET(E_PMME);

   9740 12 000371   000030 630400 11                 EPPR0   WRITE_BODY_REC
        12 000372   440001 713400                    CLIMB   alt,write
        12 000373   401400 401760                    pmme    nvectors=4
        12 000374   000527 702000 12                 TSX2    E_PMME

      604     9741    1       RETURN;

   9741 12 000375   000000 702200 xent               TSX2  ! X66_ARET

      605     9742        %EJECT;
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:129  
      606     9743        /*F*
      607     9744             NAME: VMD$DEL_BODY
      608     9745             PURPOSE:
      609     9746                  To delete the specified body record.
      610     9747             DESCRIPTION:
      611     9748                  This routine has the following parameters.
      612     9749
      613     9750                  MESSAGE_NUM   - number of the message to delete.
      614     9751                  DCB#          - dcb open to folder to delete from.
      615     9752                  REC_NUM       - number of the record to delete.
      616     9753                  LAST_NUM      - number of last record to delete. (optional)
      617     9754                                  When LAST_NUM is specified and non-zero,
      618     9755                                  it will (with REC_NUM) delimit a range of
      619     9756                                  body records to be deleted.
      620     9757                  SEEDB         - UNUSED
      621     9758                  VM_BODYREC    - UNUSED
      622     9759                  ENCL_NUMBER   - number of binary enclosure 1-99 (optional)
      623     9760
      624     9761                  BODYREC$ - Pointer to VM_BODYREC if based(i.e. VARYLEN=YES)
      625     9762
      626     9763                  It will delete the specified (s) of the specified message
      627     9764                  from the folder pointed to by DCB#.
      628     9765        */
      629     9766    1  VMD$DEL_BODY: ENTRY (MESSAGE_NUM,DCB#,REC_NUM,COUNT,SEEDB,VM_BODYREC,DVBYTE) ALTRET;

   9766 12 000376   000000 700200 xent  VMD$DEL_BODY TSX0  ! X66_AUTO_N
        12 000377   000016 000011                    ZERO    14,9

      630     9767
      631     9768    1       VM_BODYKEY.TYPE = %VM_TYPE_BODY;

   9768 12 000400   000060 236003                    LDQ     48,DU
        12 000401   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      632     9769    1       VM_BODYKEY2.TYPE = %VM_TYPE_BODY;

   9769 12 000402   000002 552020 11                 STBQ    VM_BODYKEY2,'20'O
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:130  

      633     9770    1       GOTO COMMON_BODY_DELETER;

   9770 12 000403   000436 710000 12                 TRA     COMMON_BODY_DELETER

      634     9771
      635     9772    1   VMD$DEL_TRACE: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE)
              9772            ALTRET;

   9772 12 000404   000000 700200 xent  VMD$DEL_TRA* TSX0  ! X66_AUTO_N
        12 000405   000016 000011                    ZERO    14,9

      636     9773
      637     9774        /*F* NAME:   VMD$DEL_TRACE
      638     9775             PURPOSE:
      639     9776                    To delete trace records.
      640     9777             DESCRIPTION: Identical to VMD$DEL_BODY, except that it delete
      641     9778                          trace records rather than body records.
      642     9779        */
      643     9780
      644     9781    1       VM_BODYKEY.TYPE = %VM_TYPE_TRACE;

   9781 12 000406   000054 236003                    LDQ     44,DU
        12 000407   000000 552020 11                 STBQ    VM_BODYKEY,'20'O

      645     9782    1       VM_BODYKEY2.TYPE = %VM_TYPE_TRACE;

   9782 12 000410   000002 552020 11                 STBQ    VM_BODYKEY2,'20'O

      646     9783    1       GOTO COMMON_BODY_DELETER;

   9783 12 000411   000436 710000 12                 TRA     COMMON_BODY_DELETER

      647     9784
      648     9785    1   VMD$DEL_ENCL: ENTRY (MESSAGE_NUM, DCB#, REC_NUM, COUNT, SEEDB, VM_BODYREC, DVBYTE,
              9785            ENCL_NUMBER,BODYREC$) ALTRET;

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:131  
   9785 12 000412   000000 700200 xent  VMD$DEL_ENCL TSX0  ! X66_AUTO_N
        12 000413   000016 000011                    ZERO    14,9

      649     9786
      650     9787        /*F* NAME:   VMD$DEL_ENCL
      651     9788             PURPOSE:
      652     9789                    To delete enclosure records.
      653     9790             DESCRIPTION: Identical to VMD$DEL_BODY, except that it delete
      654     9791                          enclosure records rather than body records.
      655     9792        */
      656     9793
      657     9794    1       VM_ENCLKEY.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;

   9794 12 000414   200012 470500                    LDP0    @ENCL_NUMBER,,AUTO
        12 000415   000000 236100                    LDQ     0,,PR0
        12 000416   000144 036007                    ADLQ    100,DL
        12 000417   000022 736000                    QLS     18
        12 000420   000004 552020 11                 STBQ    VM_ENCLKEY,'20'O

      658     9795    1       VM_ENCLKEY2.TYPE = %VM_TYPE_ENCL + ENCL_NUMBER;

   9795 12 000421   000000 236100                    LDQ     0,,PR0
        12 000422   000144 036007                    ADLQ    100,DL
        12 000423   000022 736000                    QLS     18
        12 000424   000007 552020 11                 STBQ    VM_ENCLKEY2,'20'O

      659     9796    1       VM_ENCLKEY.MESSAGE_NUMBER = MESSAGE_NUM;

   9796 12 000425   200003 471500                    LDP1    @MESSAGE_NUM,,AUTO
        12 000426   000000 100500                    MLR     fill='000'O
        12 000427   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        12 000430   000004 400004 11                 ADSC9   VM_ENCLKEY               cn=2,n=4

      660     9797    1       VM_ENCLKEY.REC_NUMBER = REC_NUM;

   9797 12 000431   200005 473500                    LDP3    @REC_NUM,,AUTO
        12 000432   000000 100500                    MLR     fill='000'O
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:132  
        12 000433   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        12 000434   000005 400004 11                 ADSC9   VM_ENCLKEY+1             cn=2,n=4

      661     9798    1       GOTO SETUP_DEL_FPT;

   9798 12 000435   000445 710000 12                 TRA     SETUP_DEL_FPT

      662     9799
      663     9800    1   COMMON_BODY_DELETER:
      664     9801
      665     9802        /*
      666     9803            ***** Setup the bodykey ...
      667     9804        */
      668     9805    1       VM_BODYKEY.MESSAGE_NUMBER = MESSAGE_NUM;

   9805 12 000436   200003 470500       COMMON_BODY* LDP0    @MESSAGE_NUM,,AUTO
        12 000437   000000 100500                    MLR     fill='000'O
        12 000440   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
        12 000441   000000 400004 11                 ADSC9   VM_BODYKEY               cn=2,n=4

      669     9806    1       VM_BODYKEY.REC_NUMBER = REC_NUM;

   9806 12 000442   200005 471500                    LDP1    @REC_NUM,,AUTO
        12 000443   100000 720100                    LXL0    0,,PR1
        12 000444   000001 440000 11                 SXL0    VM_BODYKEY+1

      670     9807
      671     9808        /*
      672     9809             ***** Initialize the fpt fields
      673     9810        */
      674     9811    1   SETUP_DEL_FPT:
      675     9812    1       DELREC_BODY_REC.V.DCB# = DCB#;

   9812 12 000445   200004 470500       SETUP_DEL_F* LDP0    @DCB#,,AUTO
        12 000446   000000 720100                    LXL0    0,,PR0
        12 000447   000054 740000 11                 STX0    DELREC_BODY_REC+8

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:133  
      676     9813    1       DELREC_BODY_REC.LKEY_ = VECTOR(NIL);

   9813 12 000450   000012 237000 13                 LDAQ    10
        12 000451   000050 757000 11                 STAQ    DELREC_BODY_REC+4

      677     9814        /*
      678     9815             ***** Was a range of records specified ???
      679     9816        */
      680     9817    1       IF ADDR(LAST_NUM) ~= ADDR(NIL)

   9817 12 000452   200006 236100                    LDQ     @COUNT,,AUTO
        12 000453   000001 116000 13                 CMPQ    1
        12 000454   000512 600000 12                 TZE     s:9835

      681     9818    2       THEN DO;

      682     9819    2           IF LAST_NUM ~= 0 AND ADDR(BODYREC$) = ADDR(NIL)

   9819 12 000455   200006 471500                    LDP1    @COUNT,,AUTO
        12 000456   100000 235100                    LDA     0,,PR1
        12 000457   000474 600000 12                 TZE     s:9826
        12 000460   200013 236100                    LDQ     @BODYREC$,,AUTO
        12 000461   000001 116000 13                 CMPQ    1
        12 000462   000474 601000 12                 TNZ     s:9826

      683     9820    3           THEN DO;

      684     9821    3               VM_BODYKEY2.MESSAGE_NUMBER = MESSAGE_NUM;

   9821 12 000463   200003 473500                    LDP3    @MESSAGE_NUM,,AUTO
        12 000464   000000 100500                    MLR     fill='000'O
        12 000465   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        12 000466   000002 400004 11                 ADSC9   VM_BODYKEY2              cn=2,n=4

      685     9822    3               VM_BODYKEY2.REC_NUMBER = LAST_NUM;

   9822 12 000467   100000 721100                    LXL1    0,,PR1
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:134  
        12 000470   000003 441000 11                 SXL1    VM_BODYKEY2+1

      686     9823    3               DELREC_BODY_REC.LKEY_ = VECTOR(VM_BODYKEY2);

   9823 12 000471   000014 237000 13                 LDAQ    12
        12 000472   000050 757000 11                 STAQ    DELREC_BODY_REC+4

      687     9824    3           END;

   9824 12 000473   000512 710000 12                 TRA     s:9835

      688     9825    3           ELSE DO;

      689     9826    3               IF LAST_NUM ~= 0 AND ADDR(BODYREC$) ~= ADDR(NIL)

   9826 12 000474   000000 115003                    CMPA    0,DU
        12 000475   000512 600000 12                 TZE     s:9835
        12 000476   200013 236100                    LDQ     @BODYREC$,,AUTO
        12 000477   000001 116000 13                 CMPQ    1
        12 000500   000512 600000 12                 TZE     s:9835

      690     9827    4               THEN DO;

      691     9828    4                   VM_ENCLKEY2.MESSAGE_NUMBER = MESSAGE_NUM;

   9828 12 000501   200003 473500                    LDP3    @MESSAGE_NUM,,AUTO
        12 000502   000000 100500                    MLR     fill='000'O
        12 000503   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        12 000504   000007 400004 11                 ADSC9   VM_ENCLKEY2              cn=2,n=4

      692     9829    4                   VM_ENCLKEY2.REC_NUMBER = LAST_NUM;

   9829 12 000505   000000 100500                    MLR     fill='000'O
        12 000506   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        12 000507   000010 400004 11                 ADSC9   VM_ENCLKEY2+1            cn=2,n=4

      693     9830    4                   DELREC_BODY_REC.LKEY_ = VECTOR(VM_ENCLKEY2);
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:135  

   9830 12 000510   000016 237000 13                 LDAQ    14
        12 000511   000050 757000 11                 STAQ    DELREC_BODY_REC+4

      694     9831    4               END;

      695     9832    3           END;

      696     9833    2       END;

      697     9834
      698     9835    1       IF ADDR(BODYREC$) ~= ADDR(NIL) THEN

   9835 12 000512   200013 236100                    LDQ     @BODYREC$,,AUTO
        12 000513   000001 116000 13                 CMPQ    1
        12 000514   000520 600000 12                 TZE     s:9838

      699     9836    1           DELREC_BODY_REC.KEY_ = VECTOR(VM_ENCLKEY);

   9836 12 000515   000006 237000 13                 LDAQ    6
        12 000516   000046 757000 11                 STAQ    DELREC_BODY_REC+2
        12 000517   000522 710000 12                 TRA     s:9843

      700     9837    1       ELSE
      701     9838    1           DELREC_BODY_REC.KEY_ = VECTOR(VM_BODYKEY);

   9838 12 000520   000004 237000 13                 LDAQ    4
        12 000521   000046 757000 11                 STAQ    DELREC_BODY_REC+2

      702     9839
      703     9840        /*
      704     9841            ***** Delete the record(s) ...
      705     9842        */
      706     9843    1       CALL M$DELREC (DELREC_BODY_REC) ALTRET(E_PMME);

   9843 12 000522   000044 630400 11                 EPPR0   DELREC_BODY_REC
        12 000523   440002 713400                    CLIMB   alt,+16386
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:136  
        12 000524   401400 401760                    pmme    nvectors=4
        12 000525   000527 702000 12                 TSX2    E_PMME

      707     9844    1       RETURN;

   9844 12 000526   000000 702200 xent               TSX2  ! X66_ARET

      708     9845        /**/
      709     9846    1   E_PMME:
      710     9847    1       ALTRETURN;

   9847 12 000527   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

VM_BODYKEY
 Sect OctLoc
  11     000   007060 000000   000000 000000                                    .0......

VM_BODYKEY2
 Sect OctLoc
  11     002   007060 000000   000000 000000                                    .0......

VM_ENCLKEY
 Sect OctLoc
  11     004   011144 000000   000000 000000   000000 ******                    .d..........

VM_ENCLKEY2
 Sect OctLoc
  11     007   011144 000000   000000 000000   000000 ******                    .d..........

READ_BODY_REC
 Sect OctLoc
  11     012   000005 777640   000022 006000   000001 777640   000000 006000    ................
  11     016   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     022   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     026   000000 000000   000000 000000                                    ........

WRITE_BODY_REC
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:137  
 Sect OctLoc
  11     030   000003 777640   000040 006000   000001 777640   000000 006000    ..... ..........
  11     034   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     040   000000 400400   000000 000000   000000 000000   000000 000000    ................

DELREC_BODY_REC
 Sect OctLoc
  11     044   000001 777640   000054 006000   000001 777640   000000 006000    .....,..........
  11     050   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     054   000000 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
  13     000   040040 040040   000000 006014   000114 777640   000000 000000        .....L......
  13     004   000001 777640   000000 006000   000002 377640   000004 006000    ................
  13     010   000000 006003   777777 600000   000000 177640   000000 006014    ................
  13     014   000001 777640   000002 006000   000002 377640   000007 006000    ................
      711     9848    1   END VMD$GET_BODY;
      712     9849        %EOD;

PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:138  
--  Include file information  --

   B_ERRORS_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GET_BODY.
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:139  

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_BODY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/d STRC(360)   r     1 DELREC_BODY_REC           12-0-0/d STRC(504)   r     1 READ_BODY_REC
     0-0-0/c STRC(72)    r     1 VM_BODYKEY                 2-0-0/c STRC(72)    r     1 VM_BODYKEY2
     4-0-0/c STRC(90)    r     1 VM_ENCLKEY                 7-0-0/c STRC(90)    r     1 VM_ENCLKEY2
    30-0-0/d STRC(432)   r     1 WRITE_BODY_REC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    13-0-0/w PTR         r     1 @BODYREC$                  6-0-0/w PTR         r     1 @COUNT
     4-0-0/w PTR         r     1 @DCB#                     11-0-0/w PTR         r     1 @DVBYTE
    12-0-0/w PTR         r     1 @ENCL_NUMBER               3-0-0/w PTR         r     1 @MESSAGE_NUM
     5-0-0/w PTR         r     1 @REC_NUM                   7-0-0/w PTR         r     1 @SEEDB
    10-0-0/w PTR         r     1 @VM_BODYREC               *0-0-0/w PTR         r     1 BODYREC$
    *0-0-0/w SBIN        r     1 COUNT                     *0-0-0/w UBIN        r     1 DCB#
    *0-0-0/b BIT (8)     r     1 DVBYTE                    *0-0-0/w UBIN        r     1 ENCL_NUMBER
    *0-0-0/w UBIN        r     1 LAST_NUM                  *0-0-0/w UBIN        r     1 MESSAGE_NUM
    *0-0-0/w UBIN        r     1 REC_NUM                   *0-0-0/b BIT         r     1 SEEDB
    *0-0-0/w STRC(2772)  r     1 VM_BODYREC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:140  
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR         r     1 VM_ENCLREC$
     0-0-0/d VECT        r     1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w ASTR(72)    r     1 VM_ENCLREC                 0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GET_BODY requires 344 words for executable code.
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:141  
   Procedure VMD$GET_BODY requires 14 words of local(AUTO) storage.
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:142  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:143  
          MINI XREF LISTING

B$ALT.CODE
      9558**DCL      9558--REDEF    9559--REDEF    9559--REDEF
B$ALT.ERR.CODE
      9560**DCL      9638>>IF
B$ALT.ERR.ERR#
      9560**DCL      9560--REDEF
B$ALT.EVID
      9559**DCL      9559--REDEF    9559--REDEF
B$TCB.ALT$
      9554**DCL      9638>>IF
B$TCB$
      7867**DCL      9554--IMP-PTR  9638>>IF
BODYREC$
      9226**DCL        30--PROC     9277--IMP-PTR  9588--ENTRY    9613--IF       9622>>ASSIGN   9622>>ASSIGN
      9623>>ASSIGN   9687--ENTRY    9721--IF       9729>>ASSIGN   9730>>ASSIGN   9730>>ASSIGN   9735>>ASSIGN
      9735>>ASSIGN   9735>>ASSIGN   9735>>ASSIGN   9785--ENTRY    9819--IF       9826--IF       9835--IF
COMMON_BODY_DELETER
      9805**LABEL    9770--GOTO     9783--GOTO
COMMON_BODY_READER
      9600**LABEL    9566--GOTO     9578--GOTO
COMMON_BODY_WRITER
      9707**LABEL    9673--GOTO     9685--GOTO
COUNT
      9221**DCL        30--PROC     9222--REDEF    9568--ENTRY    9588--ENTRY    9633<<ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9724>>ASSIGN   9728>>IF       9733>>IF       9735>>ASSIGN   9766--ENTRY
      9772--ENTRY    9785--ENTRY
DCB#
      9219**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9612>>ASSIGN   9629--ASSIGN   9633--ASSIGN
      9670--ENTRY    9675--ENTRY    9687--ENTRY    9720>>ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
      9812>>ASSIGN
DELREC_BODY_REC
      9487**DCL      9843<>CALL
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:144  
DELREC_BODY_REC.KEY_
      9487**DCL      9836<<ASSIGN   9838<<ASSIGN
DELREC_BODY_REC.LKEY_
      9489**DCL      9813<<ASSIGN   9823<<ASSIGN   9830<<ASSIGN
DELREC_BODY_REC.V
      9490**DCL      9487--DCLINIT
DELREC_BODY_REC.V.DCB#
      9491**DCL      9812<<ASSIGN
DVBYTE
      9224**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9628--IF       9629<<ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9718--IF       9719>>ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
ENCL_NUMBER
      9225**DCL        30--PROC     9588--ENTRY    9590>>ASSIGN   9687--ENTRY    9696>>ASSIGN   9785--ENTRY
      9794>>ASSIGN   9795>>ASSIGN
ERRMSG_FID.L#
      7935**DCL      7935--IMP-SIZ
E_PMME
      9847**LABEL    9645--GOTO     9740--CALLALT  9843--CALLALT
E_READ_REC
      9638**LABEL    9627--CALLALT
F$DCB.ACTPOS
      9528**DCL      9528--REDEF
F$DCB.ARS#
      9502**DCL      9502--REDEF    9633>>ASSIGN
F$DCB.ATTR
      9521**DCL      9522--REDEF
F$DCB.BORROW
      9536**DCL      9536--REDEF    9536--REDEF    9536--REDEF
F$DCB.DCBNAME.L
      9550**DCL      9550--IMP-SIZ
F$DCB.DVBYTE
      9505**DCL      9629>>ASSIGN
F$DCB.EOMCHAR#
      9506**DCL      9506--REDEF
F$DCB.FLDID
      9531**DCL      9531--REDEF
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:145  
F$DCB.FORM$
      9525**DCL      9525--REDEF
F$DCB.FSECT
      9541**DCL      9541--REDEF
F$DCB.FSN#
      9518**DCL      9518--REDEF    9518--REDEF    9519--REDEF
F$DCB.HEADER$
      9524**DCL      9524--REDEF
F$DCB.IXTNSIZE#
      9522**DCL      9522--REDEF
F$DCB.LASTSTA$
      9511**DCL      9511--REDEF
F$DCB.LVL
      9537**DCL      9537--REDEF
F$DCB.NAME#.C
      9512**DCL      9512--REDEF
F$DCB.NOEOF
      9534**DCL      9534--REDEF
F$DCB.NRECS#
      9523**DCL      9523--REDEF
F$DCB.NRECX
      9542**DCL      9542--REDEF
F$DCB.OHDR
      9534**DCL      9534--REDEF
F$DCB.ORG#
      9517**DCL      9517--REDEF
F$DCB.PRECNO
      9540**DCL      9540--REDEF
F$DCB.RCSZ
      9546**DCL      9546--REDEF
F$DCB.RES#
      9513**DCL      9513--REDEF
F$DCB.SETX
      9525**DCL      9525--REDEF
F$DCB.TAB$
      9525**DCL      9525--REDEF
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:146  
F$DCB.TDA
      9539**DCL      9540--REDEF
F$DCB.WSN#
      9513**DCL      9513--REDEF
LAST_NUM
      9222**DCL      9817--IF       9819>>IF       9822>>ASSIGN   9826>>IF       9829>>ASSIGN
M$DELREC
      5521**DCL-ENT  9843--CALL
M$READ
      5520**DCL-ENT  9627--CALL
M$WRITE
      5520**DCL-ENT  9740--CALL
MESSAGE_NUM
      9218**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9591>>ASSIGN   9600>>ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9697>>ASSIGN   9707>>ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
      9796>>ASSIGN   9805>>ASSIGN   9821>>ASSIGN   9828>>ASSIGN
READ_AGAIN_REC
      9626**LABEL    9643--GOTO
READ_BODY_REC
      9423**DCL      9627<>CALL
READ_BODY_REC.BUF_
      9425**DCL      9614<<ASSIGN   9620<<ASSIGN   9626<<ASSIGN
READ_BODY_REC.BUF_.BUF$
      9426**DCL      9626>>IF       9633>>ASSIGN   9633>>ASSIGN   9633>>ASSIGN   9633>>ASSIGN   9638>>IF
READ_BODY_REC.KEY_
      9423**DCL      9615<<ASSIGN   9621<<ASSIGN
READ_BODY_REC.STATION_
      9426**DCL      9427--REDEF
READ_BODY_REC.V
      9427**DCL      9423--DCLINIT
READ_BODY_REC.V.DCB#
      9427**DCL      9612<<ASSIGN
READ_BODY_REC.V.DVBYTE.REREAD#
      9438**DCL      9438--REDEF
READ_BODY_REC.V.INDX#
      9436**DCL      9436--REDEF
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:147  
READ_BODY_REC.V.SEED#
      9437**DCL      9609<<ASSIGN   9611<<ASSIGN
REC_NUM
      9220**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9592>>ASSIGN   9601>>ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9698>>ASSIGN   9708>>ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
      9797>>ASSIGN   9806>>ASSIGN
SEEDB
      9223**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9607--IF       9609>>ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9713--IF       9715>>ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
SETUP_DEL_FPT
      9812**LABEL    9798--GOTO
SETUP_READ_FPT
      9607**LABEL    9593--GOTO
SETUP_WRITE_FPT
      9713**LABEL    9699--GOTO
VM_BODYKEY
      9333**DCL      9423--DCLINIT  9424--DCLINIT  9462--DCLINIT  9487--DCLINIT  9488--DCLINIT  9615--ASSIGN
      9723--ASSIGN   9838--ASSIGN
VM_BODYKEY.MESSAGE_NUMBER
      9337**DCL      9600<<ASSIGN   9707<<ASSIGN   9805<<ASSIGN
VM_BODYKEY.REC_NUMBER
      9339**DCL      9601<<ASSIGN   9708<<ASSIGN   9806<<ASSIGN
VM_BODYKEY.TYPE
      9335**DCL      9565<<ASSIGN   9577<<ASSIGN   9672<<ASSIGN   9684<<ASSIGN   9768<<ASSIGN   9781<<ASSIGN
VM_BODYKEY2
      9353**DCL      9823--ASSIGN
VM_BODYKEY2.MESSAGE_NUMBER
      9357**DCL      9821<<ASSIGN
VM_BODYKEY2.REC_NUMBER
      9359**DCL      9822<<ASSIGN
VM_BODYKEY2.TYPE
      9355**DCL      9769<<ASSIGN   9782<<ASSIGN
VM_BODYREC
      9245**DCL        30--PROC     9568--ENTRY    9588--ENTRY    9614--ASSIGN   9616<<ASSIGN   9670--ENTRY
      9675--ENTRY    9687--ENTRY    9722--ASSIGN   9724--ASSIGN   9766--ENTRY    9772--ENTRY    9785--ENTRY
VM_BODYREC.VALUE.DATA
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:148  
      9263**DCL      9602<<ASSIGN   9617<<ASSIGN   9724--ASSIGN
VM_ENCLKEY
      9373**DCL      9621--ASSIGN   9737--ASSIGN   9836--ASSIGN
VM_ENCLKEY.MESSAGE_NUMBER
      9379**DCL      9591<<ASSIGN   9697<<ASSIGN   9796<<ASSIGN
VM_ENCLKEY.REC_NUMBER
      9381**DCL      9592<<ASSIGN   9698<<ASSIGN   9797<<ASSIGN
VM_ENCLKEY.TYPE
      9375**DCL      9590<<ASSIGN   9696<<ASSIGN   9794<<ASSIGN
VM_ENCLKEY2
      9394**DCL      9830--ASSIGN
VM_ENCLKEY2.MESSAGE_NUMBER
      9400**DCL      9828<<ASSIGN
VM_ENCLKEY2.REC_NUMBER
      9402**DCL      9829<<ASSIGN
VM_ENCLKEY2.TYPE
      9396**DCL      9795<<ASSIGN
VM_ENCLREC
      9277**DCL      9622<<ASSIGN   9633--ASSIGN   9735--ASSIGN
VM_ENCLREC.VALUE.COUNT
      9283**DCL      9293--IMP-SIZ  9622>>ASSIGN   9623<<ASSIGN   9633>>ASSIGN   9633>>ASSIGN   9729<<ASSIGN
      9730>>ASSIGN   9735>>ASSIGN   9735>>ASSIGN
VM_ENCLREC.VALUE.DATA
      9293**DCL      9633--ASSIGN   9730<<ASSIGN   9735--ASSIGN
VM_ENCLREC$
      7806**DCL      9626>>IF       9638>>IF
VM_ENCLREC_
      7821**DCL      9620>>ASSIGN   9626>>ASSIGN   9642<<ASSIGN   9642>>ASSIGN   9732>>ASSIGN
WRITE_BODY_REC
      9462**DCL      9740<>CALL
WRITE_BODY_REC.BUF_
      9462**DCL      9722<<ASSIGN   9732<<ASSIGN
WRITE_BODY_REC.BUF_.BOUND
      9462**DCL      9724<<ASSIGN   9733<<ASSIGN   9735<<ASSIGN
WRITE_BODY_REC.KEY_
      9462**DCL      9723<<ASSIGN   9737<<ASSIGN
PL6.E3A0      #004=VMD$GET_BODY File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:12 Page:149  
WRITE_BODY_REC.STATION_
      9464**DCL      9464--REDEF
WRITE_BODY_REC.V
      9465**DCL      9462--DCLINIT
WRITE_BODY_REC.V.DCB#
      9465**DCL      9720<<ASSIGN
WRITE_BODY_REC.V.DVBYTE
      9470**DCL      9718<<ASSIGN   9719<<ASSIGN
WRITE_BODY_REC.V.DVBYTE.VFC#
      9471**DCL      9471--REDEF
WRITE_BODY_REC.V.SEED#
      9470**DCL      9715<<ASSIGN   9717<<ASSIGN
X$STRING.SIZ
      7781**DCL      7782--IMP-SIZ

PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:150  
      713        1        /*T***********************************************************/
      714        2        /*T*                                                         */
      715        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      716        4        /*T*                                                         */
      717        5        /*T***********************************************************/
      718        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      719        7        /*F*
      720        8             NAME: VMD$GET_ID
      721        9             PURPOSE:
      722       10                  To read a specified VM_ID record from the mail folder.
      723       11             DESCRIPTION:
      724       12                  When passed a unique ID string and a DCB#, VMD$GET_ID will either
      725       13                  successfully return with the message # of the message containing
      726       14                  the specified ID, or will altreturn to indicate that no such message
      727       15                  exists in the file.
      728       16        */
      729       17        VMD$GET_ID: PROC (ID,DCB#,MESSAGE_NUMBER) ALTRET;
      730       18        /***** Include files *****/
      731       19          %INCLUDE B_ERRORS_C;
      732     1146          %INCLUDE CP_6;
      733     6705          %INCLUDE CP_6_SUBS;
      734     7245          %INCLUDE VM_MACRO_C;
      735     8513          %INCLUDE VM_DATA_R;
      736     8944          %VM_KEYTYPES;
      737     8965        /***** Parameters *****/
      738     8966    1   DCL 1 ID,
      739     8967    1         2 COUNT UBIN BYTE CALIGNED,
      740     8968    1         2 TEXT CHAR (ID.COUNT);
      741     8969    1   DCL MESSAGE_NUMBER UBIN WORD;
      742     8970    1   DCL DCB# UBIN WORD;
      743     8971        /***** Fpts *****/
      744     8972          %FPT_READ (FPTN=READ_ID,BUF=VM_ID,KEY=VM_IDKEY,KEYS=YES);
      745     9011          %FPT_WRITE (FPTN=WRITE_ID,BUF=VM_ID,KEY=VM_IDKEY,ONEWKEY=YES);
      746     9042          %FPT_DELREC (FPTN=DELETE_ID,KEY=VM_IDKEY);
      747     9061        /***** Mail structures *****/
      748     9062          %VM_IDKEY (NAME=VM_IDKEY);
      749     9078          %VM_ID;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:151  
      750     9091        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:152  
      751     9092    1       IF ADDR(ID) = ADDR(NIL)
      752     9093    1       THEN
      753     9094    1           ALTRETURN;
      754     9095
      755     9096    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;
      756     9097    1       VM_IDKEY.COUNT = ID.COUNT + 1;
      757     9098
      758     9099    1       READ_ID.V.DCB# = DCB#;
      759     9100
      760     9101    1       CALL M$READ (READ_ID)
      761     9102    2       WHENALTRETURN DO;
      762     9103    2           ALTRETURN;
      763     9104    2       END;
      764     9105
      765     9106    1       MESSAGE_NUMBER = VM_ID.MESSAGE_NUMBER;
      766     9107
      767     9108    1       RETURN;
      768     9109
      769     9110        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:153  
      770     9111    1   VMD$PUT_ID: ENTRY (ID, DCB#, MESSAGE_NUMBER) ALTRET;
      771     9112
      772     9113        /*F*  NAME: VMD$PUT_ID
      773     9114              FUNCTION:
      774     9115                 Write an ID record.
      775     9116              DESCRIPTION:
      776     9117                 When passed an ID string, a DCB number, and a message number,
      777     9118                 VMD$PUT_ID writes into the specified folder a VM_ID record containing
      778     9119                 the specified message number, with a key derived from the ID string.
      779     9120        */
      780     9121
      781     9122    1       IF ADDR(ID) = ADDR(NIL)
      782     9123    1       THEN
      783     9124    1           ALTRETURN;
      784     9125
      785     9126    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;
      786     9127    1       VM_IDKEY.COUNT = ID.COUNT + 1;
      787     9128
      788     9129    1       VM_ID.MESSAGE_NUMBER = MESSAGE_NUMBER;
      789     9130
      790     9131    1       WRITE_ID.V.DCB# = DCB#;
      791     9132
      792     9133    1       CALL M$WRITE (WRITE_ID)
      793     9134    2       WHENALTRETURN DO;
      794     9135    2           ALTRETURN;
      795     9136    2       END;
      796     9137
      797     9138    1       RETURN;
      798     9139
      799     9140        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:154  
      800     9141    1   VMD$DEL_ID: ENTRY (ID, DCB#) ALTRET;
      801     9142
      802     9143        /*F*  NAME:    VMD$DEL_ID
      803     9144              FUNCTION:
      804     9145                 Delete an ID record
      805     9146              DESCRIPTION:
      806     9147                 When passed an ID string and a DCB number, VMD$DEL_ID will delete any
      807     9148                 VM_ID record in the specified folder that has the specified ID string.
      808     9149        */
      809     9150
      810     9151    1       IF ADDR(ID) = ADDR(NIL)
      811     9152    1       THEN
      812     9153    1           ALTRETURN;
      813     9154
      814     9155    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;
      815     9156    1       VM_IDKEY.COUNT = ID.COUNT + 1;
      816     9157
      817     9158    1       DELETE_ID.V.DCB# = DCB#;
      818     9159
      819     9160    1       CALL M$DELREC (DELETE_ID)
      820     9161    2       WHENALTRETURN DO;
      821     9162    2           ALTRETURN;
      822     9163    2       END;
      823     9164
      824     9165    1       RETURN;
      825     9166
      826     9167    1   END VMD$GET_ID;
      827     9168        %EOD;

PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:155  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_ID.

   Procedure VMD$GET_ID requires 99 words for executable code.
   Procedure VMD$GET_ID requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:156  

 Object Unit name= VMD$GET_ID                                 File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:13:09.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none   101    145  VMD$GET_ID
   12   Proc  even  none    99    143  VMD$GET_ID
   13  RoData even  none     1      1  VMD$GET_ID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        3  VMD$GET_ID
    12     42          yes     yes      Std        3  VMD$PUT_ID
    12    104          yes     yes      Std        2  VMD$DEL_ID
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:157  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:158  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:159  


      713        1        /*T***********************************************************/
      714        2        /*T*                                                         */
      715        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      716        4        /*T*                                                         */
      717        5        /*T***********************************************************/
      718        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      719        7        /*F*
      720        8             NAME: VMD$GET_ID
      721        9             PURPOSE:
      722       10                  To read a specified VM_ID record from the mail folder.
      723       11             DESCRIPTION:
      724       12                  When passed a unique ID string and a DCB#, VMD$GET_ID will either
      725       13                  successfully return with the message # of the message containing
      726       14                  the specified ID, or will altreturn to indicate that no such message
      727       15                  exists in the file.
      728       16        */
      729       17        VMD$GET_ID: PROC (ID,DCB#,MESSAGE_NUMBER) ALTRET;

     17 12 000000   000000 700200 xent  VMD$GET_ID   TSX0  ! X66_AUTO_3
        12 000001   000010 000003                    ZERO    8,3

      730       18        /***** Include files *****/
      731       19          %INCLUDE B_ERRORS_C;
      732     1146          %INCLUDE CP_6;
      733     6705          %INCLUDE CP_6_SUBS;
      734     7245          %INCLUDE VM_MACRO_C;
      735     8513          %INCLUDE VM_DATA_R;
      736     8944          %VM_KEYTYPES;
      737     8965        /***** Parameters *****/
      738     8966    1   DCL 1 ID,
      739     8967    1         2 COUNT UBIN BYTE CALIGNED,
      740     8968    1         2 TEXT CHAR (ID.COUNT);
      741     8969    1   DCL MESSAGE_NUMBER UBIN WORD;
      742     8970    1   DCL DCB# UBIN WORD;
      743     8971        /***** Fpts *****/
      744     8972          %FPT_READ (FPTN=READ_ID,BUF=VM_ID,KEY=VM_IDKEY,KEYS=YES);
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:160  
      745     9011          %FPT_WRITE (FPTN=WRITE_ID,BUF=VM_ID,KEY=VM_IDKEY,ONEWKEY=YES);
      746     9042          %FPT_DELREC (FPTN=DELETE_ID,KEY=VM_IDKEY);
      747     9061        /***** Mail structures *****/
      748     9062          %VM_IDKEY (NAME=VM_IDKEY);
      749     9078          %VM_ID;
      750     9091        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:161  
      751     9092    1       IF ADDR(ID) = ADDR(NIL)

   9092 12 000002   200003 236100                    LDQ     @ID,,AUTO
        12 000003   000000 116000 13                 CMPQ    0
        12 000004   000006 601000 12                 TNZ     s:9096

      752     9093    1       THEN
      753     9094    1           ALTRETURN;

   9094 12 000005   000000 702200 xent               TSX2  ! X66_AALT

      754     9095
      755     9096    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;

   9096 12 000006   200003 470500                    LDP0    @ID,,AUTO
        12 000007   000100 101500                    MRL     fill='000'O
        12 000010   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000011   200006 000002                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=2
        12 000012   200006 220100                    LDX0    @MESSAGE_NUMBER+1,,AUTO
        12 000013   040000 100540                    MLR     fill='040'O
        12 000014   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        12 000015   000044 400376 11                 ADSC9   VM_IDKEY                 cn=2,n=254

      756     9097    1       VM_IDKEY.COUNT = ID.COUNT + 1;

   9097 12 000016   000100 101500                    MRL     fill='000'O
        12 000017   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000020   200006 000004                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=4
        12 000021   200006 236100                    LDQ     @MESSAGE_NUMBER+1,,AUTO
        12 000022   000001 036007                    ADLQ    1,DL
        12 000023   000033 736000                    QLS     27
        12 000024   000044 552040 11                 STBQ    VM_IDKEY,'40'O

      757     9098
      758     9099    1       READ_ID.V.DCB# = DCB#;

   9099 12 000025   200004 471500                    LDP1    @DCB#,,AUTO
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:162  
        12 000026   100000 720100                    LXL0    0,,PR1
        12 000027   000010 740000 11                 STX0    READ_ID+8

      759     9100
      760     9101    1       CALL M$READ (READ_ID)

   9101 12 000030   000000 630400 11                 EPPR0   READ_ID
        12 000031   440000 713400                    CLIMB   alt,read
        12 000032   401400 401760                    pmme    nvectors=4
        12 000033   000035 702000 12                 TSX2    s:9103
        12 000034   000036 710000 12                 TRA     s:9106

      761     9102    2       WHENALTRETURN DO;

      762     9103    2           ALTRETURN;

   9103 12 000035   000000 702200 xent               TSX2  ! X66_AALT

      763     9104    2       END;
      764     9105
      765     9106    1       MESSAGE_NUMBER = VM_ID.MESSAGE_NUMBER;

   9106 12 000036   200005 470500                    LDP0    @MESSAGE_NUMBER,,AUTO
        12 000037   000144 235000 11                 LDA     VM_ID
        12 000040   000000 755100                    STA     0,,PR0

      766     9107
      767     9108    1       RETURN;

   9108 12 000041   000000 702200 xent               TSX2  ! X66_ARET

      768     9109
      769     9110        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:163  
      770     9111    1   VMD$PUT_ID: ENTRY (ID, DCB#, MESSAGE_NUMBER) ALTRET;

   9111 12 000042   000000 700200 xent  VMD$PUT_ID   TSX0  ! X66_AUTO_3
        12 000043   000010 000003                    ZERO    8,3

      771     9112
      772     9113        /*F*  NAME: VMD$PUT_ID
      773     9114              FUNCTION:
      774     9115                 Write an ID record.
      775     9116              DESCRIPTION:
      776     9117                 When passed an ID string, a DCB number, and a message number,
      777     9118                 VMD$PUT_ID writes into the specified folder a VM_ID record containing
      778     9119                 the specified message number, with a key derived from the ID string.
      779     9120        */
      780     9121
      781     9122    1       IF ADDR(ID) = ADDR(NIL)

   9122 12 000044   200003 236100                    LDQ     @ID,,AUTO
        12 000045   000000 116000 13                 CMPQ    0
        12 000046   000050 601000 12                 TNZ     s:9126

      782     9123    1       THEN
      783     9124    1           ALTRETURN;

   9124 12 000047   000000 702200 xent               TSX2  ! X66_AALT

      784     9125
      785     9126    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;

   9126 12 000050   200003 470500                    LDP0    @ID,,AUTO
        12 000051   000100 101500                    MRL     fill='000'O
        12 000052   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000053   200006 000002                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=2
        12 000054   200006 220100                    LDX0    @MESSAGE_NUMBER+1,,AUTO
        12 000055   040000 100540                    MLR     fill='040'O
        12 000056   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        12 000057   000044 400376 11                 ADSC9   VM_IDKEY                 cn=2,n=254
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:164  

      786     9127    1       VM_IDKEY.COUNT = ID.COUNT + 1;

   9127 12 000060   000100 101500                    MRL     fill='000'O
        12 000061   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000062   200006 000004                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=4
        12 000063   200006 236100                    LDQ     @MESSAGE_NUMBER+1,,AUTO
        12 000064   000001 036007                    ADLQ    1,DL
        12 000065   000033 736000                    QLS     27
        12 000066   000044 552040 11                 STBQ    VM_IDKEY,'40'O

      787     9128
      788     9129    1       VM_ID.MESSAGE_NUMBER = MESSAGE_NUMBER;

   9129 12 000067   200005 471500                    LDP1    @MESSAGE_NUMBER,,AUTO
        12 000070   100000 235100                    LDA     0,,PR1
        12 000071   000144 755000 11                 STA     VM_ID

      789     9130
      790     9131    1       WRITE_ID.V.DCB# = DCB#;

   9131 12 000072   200004 473500                    LDP3    @DCB#,,AUTO
        12 000073   300000 720100                    LXL0    0,,PR3
        12 000074   000026 740000 11                 STX0    WRITE_ID+8

      791     9132
      792     9133    1       CALL M$WRITE (WRITE_ID)

   9133 12 000075   000016 630400 11                 EPPR0   WRITE_ID
        12 000076   440001 713400                    CLIMB   alt,write
        12 000077   401400 401760                    pmme    nvectors=4
        12 000100   000102 702000 12                 TSX2    s:9135
        12 000101   000103 710000 12                 TRA     s:9138

      793     9134    2       WHENALTRETURN DO;

      794     9135    2           ALTRETURN;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:165  

   9135 12 000102   000000 702200 xent               TSX2  ! X66_AALT

      795     9136    2       END;
      796     9137
      797     9138    1       RETURN;

   9138 12 000103   000000 702200 xent               TSX2  ! X66_ARET

      798     9139
      799     9140        %EJECT;
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:166  
      800     9141    1   VMD$DEL_ID: ENTRY (ID, DCB#) ALTRET;

   9141 12 000104   000000 700200 xent  VMD$DEL_ID   TSX0  ! X66_AUTO_3
        12 000105   000010 000003                    ZERO    8,3

      801     9142
      802     9143        /*F*  NAME:    VMD$DEL_ID
      803     9144              FUNCTION:
      804     9145                 Delete an ID record
      805     9146              DESCRIPTION:
      806     9147                 When passed an ID string and a DCB number, VMD$DEL_ID will delete any
      807     9148                 VM_ID record in the specified folder that has the specified ID string.
      808     9149        */
      809     9150
      810     9151    1       IF ADDR(ID) = ADDR(NIL)

   9151 12 000106   200003 236100                    LDQ     @ID,,AUTO
        12 000107   000000 116000 13                 CMPQ    0
        12 000110   000112 601000 12                 TNZ     s:9155

      811     9152    1       THEN
      812     9153    1           ALTRETURN;

   9153 12 000111   000000 702200 xent               TSX2  ! X66_AALT

      813     9154
      814     9155    1       VM_IDKEY.UNIQUE_ID = ID.TEXT;

   9155 12 000112   200003 470500                    LDP0    @ID,,AUTO
        12 000113   000100 101500                    MRL     fill='000'O
        12 000114   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000115   200006 000002                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=2
        12 000116   200006 220100                    LDX0    @MESSAGE_NUMBER+1,,AUTO
        12 000117   040000 100540                    MLR     fill='040'O
        12 000120   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        12 000121   000044 400376 11                 ADSC9   VM_IDKEY                 cn=2,n=254

PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:167  
      815     9156    1       VM_IDKEY.COUNT = ID.COUNT + 1;

   9156 12 000122   000100 101500                    MRL     fill='000'O
        12 000123   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000124   200006 000004                    ADSC9   @MESSAGE_NUMBER+1,,AUTO  cn=0,n=4
        12 000125   200006 236100                    LDQ     @MESSAGE_NUMBER+1,,AUTO
        12 000126   000001 036007                    ADLQ    1,DL
        12 000127   000033 736000                    QLS     27
        12 000130   000044 552040 11                 STBQ    VM_IDKEY,'40'O

      816     9157
      817     9158    1       DELETE_ID.V.DCB# = DCB#;

   9158 12 000131   200004 471500                    LDP1    @DCB#,,AUTO
        12 000132   100000 720100                    LXL0    0,,PR1
        12 000133   000042 740000 11                 STX0    DELETE_ID+8

      818     9159
      819     9160    1       CALL M$DELREC (DELETE_ID)

   9160 12 000134   000032 630400 11                 EPPR0   DELETE_ID
        12 000135   440002 713400                    CLIMB   alt,+16386
        12 000136   401400 401760                    pmme    nvectors=4
        12 000137   000141 702000 12                 TSX2    s:9162
        12 000140   000142 710000 12                 TRA     s:9165

      820     9161    2       WHENALTRETURN DO;

      821     9162    2           ALTRETURN;

   9162 12 000141   000000 702200 xent               TSX2  ! X66_AALT

      822     9163    2       END;
      823     9164
      824     9165    1       RETURN;

   9165 12 000142   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:168  

READ_ID
 Sect OctLoc
  11     000   000005 777640   000010 006000   000077 777640   000044 006000    .........?...$..
  11     004   000000 777640   000144 006000   000000 177640   000000 006014    .....d..........
  11     010   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     014   000000 000000   000000 000000                                    ........

WRITE_ID
 Sect OctLoc
  11     016   000003 777640   000026 006000   000077 777640   000044 006000    .........?...$..
  11     022   000000 777640   000144 006000   000000 177640   000000 006014    .....d..........
  11     026   000000 400400   000000 000000   000000 000000   000000 000000    ................

DELETE_ID
 Sect OctLoc
  11     032   000001 777640   000042 006000   000077 777640   000044 006000    ....."...?...$..
  11     036   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     042   000000 000000   000000 000000                                    ........

VM_IDKEY
 Sect OctLoc
  11     044   377132 040040   040040 040040   040040 040040   040040 040040    .Z
  11     050   040040 040040   040040 040040   040040 040040   040040 040040
  11     140*  040040 040040   040040 040040   040040 040040   040040 040040

VM_ID
 Sect OctLoc
  11     144   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
  13     000   000000 006014                                                    ....
      825     9166
      826     9167    1   END VMD$GET_ID;
      827     9168        %EOD;

PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:169  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_ID.
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:170  

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_ID

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    32-0-0/d STRC(360)   r     1 DELETE_ID                  0-0-0/d STRC(504)   r     1 READ_ID
   144-0-0/w STRC        r     1 VM_ID                     44-0-0/c STRC(2304)  r     1 VM_IDKEY
    16-0-0/d STRC(432)   r     1 WRITE_ID

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DCB#                      3-0-0/w PTR         r     1 @ID
     5-0-0/w PTR         r     1 @MESSAGE_NUMBER           *0-0-0/w UBIN        r     1 DCB#
    *0-0-0/c ASTR(9)     r     1 ID                        *0-0-0/w UBIN        r     1 MESSAGE_NUMBER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:171  
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GET_ID requires 99 words for executable code.
   Procedure VMD$GET_ID requires 8 words of local(AUTO) storage.
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:172  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:173  
          MINI XREF LISTING

DCB#
      8970**DCL        17--PROC     9099>>ASSIGN   9111--ENTRY    9131>>ASSIGN   9141--ENTRY    9158>>ASSIGN
DELETE_ID
      9053**DCL      9160<>CALL
DELETE_ID.V
      9056**DCL      9053--DCLINIT
DELETE_ID.V.DCB#
      9057**DCL      9158<<ASSIGN
ERRMSG_FID.L#
      8789**DCL      8789--IMP-SIZ
ID
      8966**DCL        17--PROC     9092--IF       9111--ENTRY    9122--IF       9141--ENTRY    9151--IF
ID.COUNT
      8967**DCL      8968--IMP-SIZ  9096>>ASSIGN   9097>>ASSIGN   9126>>ASSIGN   9127>>ASSIGN   9155>>ASSIGN
      9156>>ASSIGN
ID.TEXT
      8968**DCL      9096>>ASSIGN   9126>>ASSIGN   9155>>ASSIGN
M$DELREC
      6635**DCL-ENT  9160--CALL
M$READ
      6634**DCL-ENT  9101--CALL
M$WRITE
      6634**DCL-ENT  9133--CALL
MESSAGE_NUMBER
      8969**DCL        17--PROC     9106<<ASSIGN   9111--ENTRY    9129>>ASSIGN
READ_ID
      8989**DCL      9101<>CALL
READ_ID.STATION_
      8992**DCL      8993--REDEF
READ_ID.V
      8993**DCL      8989--DCLINIT
READ_ID.V.DCB#
PL6.E3A0      #005=VMD$GET_ID File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:174  
      8993**DCL      9099<<ASSIGN
READ_ID.V.DVBYTE.REREAD#
      9004**DCL      9004--REDEF
READ_ID.V.INDX#
      9002**DCL      9002--REDEF
VM_ID
      9088**DCL      8991--DCLINIT  8992--DCLINIT  9029--DCLINIT  9030--DCLINIT
VM_ID.MESSAGE_NUMBER
      9089**DCL      9106>>ASSIGN   9129<<ASSIGN
VM_IDKEY
      9072**DCL      8989--DCLINIT  8990--DCLINIT  9028--DCLINIT  9053--DCLINIT  9054--DCLINIT
VM_IDKEY.COUNT
      9073**DCL      9097<<ASSIGN   9127<<ASSIGN   9156<<ASSIGN
VM_IDKEY.UNIQUE_ID
      9076**DCL      9096<<ASSIGN   9126<<ASSIGN   9155<<ASSIGN
WRITE_ID
      9028**DCL      9133<>CALL
WRITE_ID.STATION_
      9030**DCL      9030--REDEF
WRITE_ID.V
      9031**DCL      9028--DCLINIT
WRITE_ID.V.DCB#
      9031**DCL      9131<<ASSIGN
WRITE_ID.V.DVBYTE.VFC#
      9037**DCL      9037--REDEF
X$STRING.SIZ
      8635**DCL      8636--IMP-SIZ

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:175  
      828        1        /*T***********************************************************/
      829        2        /*T*                                                         */
      830        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      831        4        /*T*                                                         */
      832        5        /*T***********************************************************/
      833        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      834        7        /*F*
      835        8             NAME: VMD$GET_DELIVERY
      836        9             PURPOSE:
      837       10                  To read a specified VM_DELIVERY record from the mail folder.
      838       11             DESCRIPTION:
      839       12                  None.
      840       13        */
      841       14        VMD$GET_DELIVERY: PROC (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;
      842       15        /***** Include files *****/
      843       16          %INCLUDE B_ERRORS_C;
      844     1143          %INCLUDE B_SEGIDS_C;
      845     1682          %INCLUDE CP_6;
      846     7241          %INCLUDE CP_6_SUBS;
      847     7781          %INCLUDE VM_MACRO_C;
      848     9049          %INCLUDE VM_DATA_R;
      849     9480          %VM_KEYTYPES;
      850     9501        /***** Parameters *****/
      851     9502    1   DCL DCB# UBIN WORD;
      852     9503        %VM_DELIVERYKEY (STCLASS=PARAM);
      853     9521        %VM_DELIVERY (STCLASS=PARAM);
      854     9559        /***** Fpts *****/
      855     9560          %FPT_READ (FPTN=READ_DELIVERY,KEYS=YES);
      856     9599          %FPT_READ (FPTN=READ_RELATIVE,KEYR=YES,KEYS=NO);
      857     9638          %FPT_WRITE (FPTN=WRITE_DELIVERY);
      858     9669          %FPT_DELREC (FPTN=DELETE_DELIVERY);
      859     9688          %FPT_PRECORD (FPTN=MOVE_DELIVERY);
      860     9709          %VLP_VECTOR (STCLASS=AUTO);
      861     9724        /***** Mail structures *****/
      862     9725          %VM_DELIVERY (NAME=OLD_DELIVERY, STCLASS=AUTO);
      863     9763          %VM_DELIVERY (NAME=BASED_DELIVERY, STCLASS=BASED, VARYLEN=YES);
      864     9801        /***** Based structures *****/
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:176  
      865     9802          %B$TCB (STCLASS="BASED(B$TCB$)");
      866     9805          %B$ALT;
      867     9813        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:177  
      868     9814    1       VM_DELIVERY.COUNT = LENGTHC(VM_DELIVERY.TEXT);
      869     9815    1       VM_DELIVERY.TEXT = ' ';
      870     9816    1       READ_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);
      871     9817    1       READ_DELIVERY.BUF_ = VECTOR (VM_DELIVERY);
      872     9818    1       READ_DELIVERY.V.DCB# = DCB#;
      873     9819    1       CALL M$READ (READ_DELIVERY)
      874     9820    2       WHENALTRETURN DO;
      875     9821    2           ALTRETURN;
      876     9822    2       END;
      877     9823    1       RETURN;
      878     9824        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:178  
      879     9825        /*F*
      880     9826             NAME: VMD$GET_DELIVERY_NEXT
      881     9827             PURPOSE:
      882     9828                  To read the next VM_DELIVERY record after the one specified.
      883     9829             DESCRIPTION:
      884     9830                  This routine will read the delvery record which immediately
      885     9831                  follows the one specified in VM_DELIVERY_KEY;  it returns
      886     9832                  the contents of the record in VM_DELIVERY and its key in
      887     9833                  VM_DELIVERY_KEY.  If the next record in the file is not a
      888     9834                  delivery record, VMD$GET_DELIVERY_NEXT altreturns.
      889     9835
      890     9836        */
      891     9837    1   VMD$GET_DELIVERY_NEXT: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;
      892     9838    1       MOVE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);
      893     9839    1       MOVE_DELIVERY.V.DCB# = DCB#;
      894     9840    1       MOVE_DELIVERY.V.KEYS# = %YES#;
      895     9841    1       MOVE_DELIVERY.V.N# = 0;
      896     9842    1       CALL M$PRECORD (MOVE_DELIVERY)
      897     9843    2       WHENRETURN DO;
      898     9844    2           MOVE_DELIVERY.V.KEYS# = %NO#;
      899     9845    2           MOVE_DELIVERY.V.N# = 1;
      900     9846    3           CALL M$PRECORD (MOVE_DELIVERY) WHENALTRETURN DO; END;
      901     9847    2       END;
      902     9848    1       VM_DELIVERY.COUNT = LENGTHC(VM_DELIVERY.TEXT);
      903     9849    1       VM_DELIVERY.TEXT = ' ';
      904     9850    1       READ_RELATIVE.KEY_ = VECTOR (VM_DELIVERYKEY);
      905     9851    1       READ_RELATIVE.BUF_ = VECTOR (VM_DELIVERY);
      906     9852    1       READ_RELATIVE.V.DCB# = DCB#;
      907     9853    1       CALL M$READ (READ_RELATIVE)
      908     9854    2       WHENALTRETURN DO;
      909     9855    2           ALTRETURN;
      910     9856    2       END;
      911     9857        /*
      912     9858             ***** If the record read is not a delivery record,
      913     9859                   then ALTRETURN...
      914     9860        */
      915     9861    1       IF VM_DELIVERYKEY.TYPE ~= %VM_TYPE_DELIV
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:179  
      916     9862    1       THEN
      917     9863    1           ALTRETURN;
      918     9864
      919     9865    1       RETURN;
      920     9866        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:180  
      921     9867    1   VMD$PUT_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;
      922     9868
      923     9869    1       WRITE_DELIVERY.V.NEWKEY# = %NO#;
      924     9870    1       WRITE_DELIVERY.V.ONEWKEY# = %YES#;
      925     9871
      926     9872    1       GOTO DELIVERY_WRITER;
      927     9873
      928     9874    1   VMD$MERGE_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;
      929     9875
      930     9876    1       WRITE_DELIVERY.V.NEWKEY# = %YES#;
      931     9877    1       WRITE_DELIVERY.V.ONEWKEY# = %NO#;
      932     9878
      933     9879    1   DELIVERY_WRITER:
      934     9880
      935     9881    1       WRITE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);
      936     9882    1       WRITE_DELIVERY.BUF_ = VECTOR(VM_DELIVERY);
      937     9883    1       WRITE_DELIVERY.BUF_.BOUND = LENGTHV(ADDR(VM_DELIVERY) -> BASED_DELIVERY);
      938     9884    1       WRITE_DELIVERY.V.DCB# = DCB#;
      939     9885    1       CALL M$WRITE (WRITE_DELIVERY)
      940     9886    2       WHENALTRETURN DO;
      941     9887    2           IF B$TCB.ALT$ -> B$ALT.ERR.ERR# ~= %E$OLDREC
      942     9888    2           THEN
      943     9889    2               ALTRETURN;
      944     9890    2           OLD_DELIVERY = '0'B;
      945     9891    2           CALL VMD$GET_DELIVERY (DCB#, VM_DELIVERYKEY, OLD_DELIVERY);
      946     9892    2           IF VM_DELIVERY.UTS_OF_DELIVERY = 0
      947     9893    2           THEN
      948     9894    2               VM_DELIVERY.UTS_OF_DELIVERY = OLD_DELIVERY.UTS_OF_DELIVERY;
      949     9895    2           IF VM_DELIVERY.ERR = '0'B
      950     9896    2           THEN
      951     9897    2               VM_DELIVERY.ERR = OLD_DELIVERY.ERR;
      952     9898    2           IF VM_DELIVERY.COUNT = 0
      953     9899    3           THEN DO;
      954     9900    3               VM_DELIVERY.COUNT = OLD_DELIVERY.COUNT;
      955     9901    3               VM_DELIVERY.TEXT = OLD_DELIVERY.TEXT;
      956     9902    3           END;
      957     9903    2           VM_DELIVERY.FLAGS = VM_DELIVERY.FLAGS | OLD_DELIVERY.FLAGS;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:181  
      958     9904    2           WRITE_DELIVERY.V.ONEWKEY# = %YES#;
      959     9905    2           WRITE_DELIVERY.BUF_.BOUND = LENGTHV(ADDR(VM_DELIVERY)->BASED_DELIVERY);
      960     9906    2           CALL M$WRITE (WRITE_DELIVERY)
      961     9907    3           WHENALTRETURN DO;
      962     9908    3               ALTRETURN;
      963     9909    3           END;
      964     9910    2       END;
      965     9911    1       RETURN;
      966     9912        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:182  
      967     9913    1   VMD$DEL_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY) ALTRET;
      968     9914    1       DELETE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);
      969     9915    1       DELETE_DELIVERY.V.DCB# = DCB#;
      970     9916    1       CALL M$DELREC (DELETE_DELIVERY) ALTRET(E_PMME);
      971     9917    1       RETURN;
      972     9918        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:183  
      973     9919    1   E_PMME:
      974     9920    1       ALTRETURN;
      975     9921    1   END VMD$GET_DELIVERY;
      976     9922        %EOD;

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:184  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_DELIVERY.

   Procedure VMD$GET_DELIVERY requires 188 words for executable code.
   Procedure VMD$GET_DELIVERY requires 80 words of local(AUTO) storage.

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:185  

 Object Unit name= VMD$GET_DELIVERY                           File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:13:24.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    60     74  VMD$GET_DELIVERY
   12   Proc  even  none   188    274  VMD$GET_DELIVERY
   13  RoData even  none    10     12  VMD$GET_DELIVERY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        3  VMD$GET_DELIVERY
    12     30          yes     yes      Std        3  VMD$GET_DELIVERY_NEXT
    12    116          yes     yes      Std        3  VMD$PUT_DELIVERY
    12    125          yes     yes      Std        3  VMD$MERGE_DELIVERY
    12    256          yes     yes      Std        2  VMD$DEL_DELIVERY
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:186  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:187  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:188  


      828        1        /*T***********************************************************/
      829        2        /*T*                                                         */
      830        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      831        4        /*T*                                                         */
      832        5        /*T***********************************************************/
      833        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      834        7        /*F*
      835        8             NAME: VMD$GET_DELIVERY
      836        9             PURPOSE:
      837       10                  To read a specified VM_DELIVERY record from the mail folder.
      838       11             DESCRIPTION:
      839       12                  None.
      840       13        */
      841       14        VMD$GET_DELIVERY: PROC (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;

     14 12 000000   000000 700200 xent  VMD$GET_DEL* TSX0  ! X66_AUTO_3
        12 000001   000120 000003                    ZERO    80,3

      842       15        /***** Include files *****/
      843       16          %INCLUDE B_ERRORS_C;
      844     1143          %INCLUDE B_SEGIDS_C;
      845     1682          %INCLUDE CP_6;
      846     7241          %INCLUDE CP_6_SUBS;
      847     7781          %INCLUDE VM_MACRO_C;
      848     9049          %INCLUDE VM_DATA_R;
      849     9480          %VM_KEYTYPES;
      850     9501        /***** Parameters *****/
      851     9502    1   DCL DCB# UBIN WORD;
      852     9503        %VM_DELIVERYKEY (STCLASS=PARAM);
      853     9521        %VM_DELIVERY (STCLASS=PARAM);
      854     9559        /***** Fpts *****/
      855     9560          %FPT_READ (FPTN=READ_DELIVERY,KEYS=YES);
      856     9599          %FPT_READ (FPTN=READ_RELATIVE,KEYR=YES,KEYS=NO);
      857     9638          %FPT_WRITE (FPTN=WRITE_DELIVERY);
      858     9669          %FPT_DELREC (FPTN=DELETE_DELIVERY);
      859     9688          %FPT_PRECORD (FPTN=MOVE_DELIVERY);
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:189  
      860     9709          %VLP_VECTOR (STCLASS=AUTO);
      861     9724        /***** Mail structures *****/
      862     9725          %VM_DELIVERY (NAME=OLD_DELIVERY, STCLASS=AUTO);
      863     9763          %VM_DELIVERY (NAME=BASED_DELIVERY, STCLASS=BASED, VARYLEN=YES);
      864     9801        /***** Based structures *****/
      865     9802          %B$TCB (STCLASS="BASED(B$TCB$)");
      866     9805          %B$ALT;
      867     9813        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:190  
      868     9814    1       VM_DELIVERY.COUNT = LENGTHC(VM_DELIVERY.TEXT);

   9814 12 000002   200005 470500                    LDP0    @VM_DELIVERY,,AUTO
        12 000003   377000 236003                    LDQ     130560,DU
        12 000004   000003 552140                    STBQ    3,'40'O,PR0

      869     9815    1       VM_DELIVERY.TEXT = ' ';

   9815 12 000005   040100 100400                    MLR     fill='040'O
        12 000006   000001 000001 13                 ADSC9   1                        cn=0,n=1
        12 000007   000003 200377                    ADSC9   3,,PR0                   cn=1,n=255

      870     9816    1       READ_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);

   9816 12 000010   000002 235000 13                 LDA     2
        12 000011   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000012   000002 757000 11                 STAQ    READ_DELIVERY+2

      871     9817    1       READ_DELIVERY.BUF_ = VECTOR (VM_DELIVERY);

   9817 12 000013   000003 235000 13                 LDA     3
        12 000014   200005 236100                    LDQ     @VM_DELIVERY,,AUTO
        12 000015   000004 757000 11                 STAQ    READ_DELIVERY+4

      872     9818    1       READ_DELIVERY.V.DCB# = DCB#;

   9818 12 000016   200003 471500                    LDP1    @DCB#,,AUTO
        12 000017   100000 720100                    LXL0    0,,PR1
        12 000020   000010 740000 11                 STX0    READ_DELIVERY+8

      873     9819    1       CALL M$READ (READ_DELIVERY)

   9819 12 000021   000000 630400 11                 EPPR0   READ_DELIVERY
        12 000022   440000 713400                    CLIMB   alt,read
        12 000023   401400 401760                    pmme    nvectors=4
        12 000024   000026 702000 12                 TSX2    s:9821
        12 000025   000027 710000 12                 TRA     s:9823
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:191  

      874     9820    2       WHENALTRETURN DO;

      875     9821    2           ALTRETURN;

   9821 12 000026   000000 702200 xent               TSX2  ! X66_AALT

      876     9822    2       END;
      877     9823    1       RETURN;

   9823 12 000027   000000 702200 xent               TSX2  ! X66_ARET

      878     9824        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:192  
      879     9825        /*F*
      880     9826             NAME: VMD$GET_DELIVERY_NEXT
      881     9827             PURPOSE:
      882     9828                  To read the next VM_DELIVERY record after the one specified.
      883     9829             DESCRIPTION:
      884     9830                  This routine will read the delvery record which immediately
      885     9831                  follows the one specified in VM_DELIVERY_KEY;  it returns
      886     9832                  the contents of the record in VM_DELIVERY and its key in
      887     9833                  VM_DELIVERY_KEY.  If the next record in the file is not a
      888     9834                  delivery record, VMD$GET_DELIVERY_NEXT altreturns.
      889     9835
      890     9836        */
      891     9837    1   VMD$GET_DELIVERY_NEXT: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;

   9837 12 000030   000000 700200 xent  VMD$GET_DEL* TSX0  ! X66_AUTO_3
        12 000031   000120 000003                    ZERO    80,3

      892     9838    1       MOVE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);

   9838 12 000032   000002 235000 13                 LDA     2
        12 000033   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000034   000064 757000 11                 STAQ    MOVE_DELIVERY+2

      893     9839    1       MOVE_DELIVERY.V.DCB# = DCB#;

   9839 12 000035   200003 470500                    LDP0    @DCB#,,AUTO
        12 000036   000000 720100                    LXL0    0,,PR0
        12 000037   000070 740000 11                 STX0    MOVE_DELIVERY+6

      894     9840    1       MOVE_DELIVERY.V.KEYS# = %YES#;

   9840 12 000040   400000 236007                    LDQ     -131072,DL
        12 000041   000070 256000 11                 ORSQ    MOVE_DELIVERY+6

      895     9841    1       MOVE_DELIVERY.V.N# = 0;

   9841 12 000042   000071 450000 11                 STZ     MOVE_DELIVERY+7
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:193  

      896     9842    1       CALL M$PRECORD (MOVE_DELIVERY)

   9842 12 000043   000062 630400 11                 EPPR0   MOVE_DELIVERY
        12 000044   440003 713400                    CLIMB   alt,+16387
        12 000045   401000 401760                    pmme    nvectors=3
        12 000046   000060 702000 12                 TSX2    s:9848

      897     9843    2       WHENRETURN DO;

      898     9844    2           MOVE_DELIVERY.V.KEYS# = %NO#;

   9844 12 000047   000004 236000 13                 LDQ     4
        12 000050   000070 356000 11                 ANSQ    MOVE_DELIVERY+6

      899     9845    2           MOVE_DELIVERY.V.N# = 1;

   9845 12 000051   000001 235007                    LDA     1,DL
        12 000052   000071 755000 11                 STA     MOVE_DELIVERY+7

      900     9846    3           CALL M$PRECORD (MOVE_DELIVERY) WHENALTRETURN DO; END;

   9846 12 000053   000062 630400 11                 EPPR0   MOVE_DELIVERY
        12 000054   440003 713400                    CLIMB   alt,+16387
        12 000055   401000 401760                    pmme    nvectors=3
        12 000056   000060 702000 12                 TSX2    s:9848
        12 000057   000060 710000 12                 TRA     s:9848

      901     9847    2       END;

      902     9848    1       VM_DELIVERY.COUNT = LENGTHC(VM_DELIVERY.TEXT);

   9848 12 000060   200005 470500                    LDP0    @VM_DELIVERY,,AUTO
        12 000061   377000 236003                    LDQ     130560,DU
        12 000062   000003 552140                    STBQ    3,'40'O,PR0

      903     9849    1       VM_DELIVERY.TEXT = ' ';
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:194  

   9849 12 000063   040100 100400                    MLR     fill='040'O
        12 000064   000001 000001 13                 ADSC9   1                        cn=0,n=1
        12 000065   000003 200377                    ADSC9   3,,PR0                   cn=1,n=255

      904     9850    1       READ_RELATIVE.KEY_ = VECTOR (VM_DELIVERYKEY);

   9850 12 000066   000002 235000 13                 LDA     2
        12 000067   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000070   000020 757000 11                 STAQ    READ_RELATIVE+2

      905     9851    1       READ_RELATIVE.BUF_ = VECTOR (VM_DELIVERY);

   9851 12 000071   000003 235000 13                 LDA     3
        12 000072   200005 236100                    LDQ     @VM_DELIVERY,,AUTO
        12 000073   000022 757000 11                 STAQ    READ_RELATIVE+4

      906     9852    1       READ_RELATIVE.V.DCB# = DCB#;

   9852 12 000074   200003 471500                    LDP1    @DCB#,,AUTO
        12 000075   100000 720100                    LXL0    0,,PR1
        12 000076   000026 740000 11                 STX0    READ_RELATIVE+8

      907     9853    1       CALL M$READ (READ_RELATIVE)

   9853 12 000077   000016 630400 11                 EPPR0   READ_RELATIVE
        12 000100   440000 713400                    CLIMB   alt,read
        12 000101   401400 401760                    pmme    nvectors=4
        12 000102   000104 702000 12                 TSX2    s:9855
        12 000103   000105 710000 12                 TRA     s:9861

      908     9854    2       WHENALTRETURN DO;

      909     9855    2           ALTRETURN;

   9855 12 000104   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:195  
      910     9856    2       END;
      911     9857        /*
      912     9858             ***** If the record read is not a delivery record,
      913     9859                   then ALTRETURN...
      914     9860        */
      915     9861    1       IF VM_DELIVERYKEY.TYPE ~= %VM_TYPE_DELIV

   9861 12 000105   200004 470500                    LDP0    @VM_DELIVERYKEY,,AUTO
        12 000106   000100 101500                    MRL     fill='000'O
        12 000107   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1
        12 000110   200114 000004                    ADSC9   OLD_DELIVERY+68,,AUTO    cn=0,n=4
        12 000111   200114 236100                    LDQ     OLD_DELIVERY+68,,AUTO
        12 000112   000011 116007                    CMPQ    9,DL
        12 000113   000115 600000 12                 TZE     s:9865

      916     9862    1       THEN
      917     9863    1           ALTRETURN;

   9863 12 000114   000000 702200 xent               TSX2  ! X66_AALT

      918     9864
      919     9865    1       RETURN;

   9865 12 000115   000000 702200 xent               TSX2  ! X66_ARET

      920     9866        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:196  
      921     9867    1   VMD$PUT_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;

   9867 12 000116   000000 700200 xent  VMD$PUT_DEL* TSX0  ! X66_AUTO_3
        12 000117   000120 000003                    ZERO    80,3

      922     9868
      923     9869    1       WRITE_DELIVERY.V.NEWKEY# = %NO#;

   9869 12 000120   000005 236000 13                 LDQ     5
        12 000121   000044 356000 11                 ANSQ    WRITE_DELIVERY+8

      924     9870    1       WRITE_DELIVERY.V.ONEWKEY# = %YES#;

   9870 12 000122   000400 236007                    LDQ     256,DL
        12 000123   000044 256000 11                 ORSQ    WRITE_DELIVERY+8

      925     9871
      926     9872    1       GOTO DELIVERY_WRITER;

   9872 12 000124   000133 710000 12                 TRA     DELIVERY_WRITER

      927     9873
      928     9874    1   VMD$MERGE_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY, VM_DELIVERY) ALTRET;

   9874 12 000125   000000 700200 xent  VMD$MERGE_D* TSX0  ! X66_AUTO_3
        12 000126   000120 000003                    ZERO    80,3

      929     9875
      930     9876    1       WRITE_DELIVERY.V.NEWKEY# = %YES#;

   9876 12 000127   000200 236007                    LDQ     128,DL
        12 000130   000044 256000 11                 ORSQ    WRITE_DELIVERY+8

      931     9877    1       WRITE_DELIVERY.V.ONEWKEY# = %NO#;

   9877 12 000131   000006 236000 13                 LDQ     6
        12 000132   000044 356000 11                 ANSQ    WRITE_DELIVERY+8
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:197  

      932     9878
      933     9879    1   DELIVERY_WRITER:
      934     9880
      935     9881    1       WRITE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);

   9881 12 000133   000002 235000 13    DELIVERY_WR* LDA     2
        12 000134   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000135   000036 757000 11                 STAQ    WRITE_DELIVERY+2

      936     9882    1       WRITE_DELIVERY.BUF_ = VECTOR(VM_DELIVERY);

   9882 12 000136   000003 235000 13                 LDA     3
        12 000137   200005 236100                    LDQ     @VM_DELIVERY,,AUTO
        12 000140   000040 757000 11                 STAQ    WRITE_DELIVERY+4

      937     9883    1       WRITE_DELIVERY.BUF_.BOUND = LENGTHV(ADDR(VM_DELIVERY) -> BASED_DELIVERY);

   9883 12 000141   200005 470500                    LDP0    @VM_DELIVERY,,AUTO
        12 000142   000003 236100                    LDQ     3,,PR0
        12 000143   000033 772000                    QRL     27
        12 000144   000015 620006                    EAX0    13,QL
        12 000145   000000 636010                    EAQ     0,X0
        12 000146   000022 772000                    QRL     18
        12 000147   000001 136007                    SBLQ    1,DL
        12 000150   000020 736000                    QLS     16
        12 000151   000040 676000 11                 ERQ     WRITE_DELIVERY+4
        12 000152   000007 376000 13                 ANQ     7
        12 000153   000040 656000 11                 ERSQ    WRITE_DELIVERY+4

      938     9884    1       WRITE_DELIVERY.V.DCB# = DCB#;

   9884 12 000154   200003 471500                    LDP1    @DCB#,,AUTO
        12 000155   100000 720100                    LXL0    0,,PR1
        12 000156   000044 740000 11                 STX0    WRITE_DELIVERY+8

      939     9885    1       CALL M$WRITE (WRITE_DELIVERY)
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:198  

   9885 12 000157   000034 630400 11                 EPPR0   WRITE_DELIVERY
        12 000160   440001 713400                    CLIMB   alt,write
        12 000161   401400 401760                    pmme    nvectors=4
        12 000162   000164 702000 12                 TSX2    s:9887
        12 000163   000255 710000 12                 TRA     s:9911

      940     9886    2       WHENALTRETURN DO;

      941     9887    2           IF B$TCB.ALT$ -> B$ALT.ERR.ERR# ~= %E$OLDREC

   9887 12 000164   000000 470400 xsym               LDP0    B$TCB$
        12 000165   000000 471500                    LDP1    0,,PR0
        12 000166   100102 236100                    LDQ     66,,PR1
        12 000167   377770 376007                    ANQ     131064,DL
        12 000170   000750 116007                    CMPQ    488,DL
        12 000171   000173 600000 12                 TZE     s:9890

      942     9888    2           THEN
      943     9889    2               ALTRETURN;

   9889 12 000172   000000 702200 xent               TSX2  ! X66_AALT

      944     9890    2           OLD_DELIVERY = '0'B;

   9890 12 000173   000100 100400                    MLR     fill='000'O
        12 000174   000010 000001 13                 ADSC9   8                        cn=0,n=1
        12 000175   200010 000414                    ADSC9   OLD_DELIVERY,,AUTO       cn=0,n=268

      945     9891    2           CALL VMD$GET_DELIVERY (DCB#, VM_DELIVERYKEY, OLD_DELIVERY);

   9891 12 000176   200010 631500                    EPPR1   OLD_DELIVERY,,AUTO
        12 000177   200116 451500                    STP1    OLD_DELIVERY+70,,AUTO
        12 000200   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000201   200003 235100                    LDA     @DCB#,,AUTO
        12 000202   200114 757100                    STAQ    OLD_DELIVERY+68,,AUTO
        12 000203   200114 630500                    EPPR0   OLD_DELIVERY+68,,AUTO
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:199  
        12 000204   000011 631400 13                 EPPR1   9
        12 000205   000000 701000 12                 TSX1    s:14
        12 000206   000000 011000                    NOP     0

      946     9892    2           IF VM_DELIVERY.UTS_OF_DELIVERY = 0

   9892 12 000207   200005 470500                    LDP0    @VM_DELIVERY,,AUTO
        12 000210   000000 235100                    LDA     0,,PR0
        12 000211   000214 601000 12                 TNZ     s:9895

      947     9893    2           THEN
      948     9894    2               VM_DELIVERY.UTS_OF_DELIVERY = OLD_DELIVERY.UTS_OF_DELIVERY;

   9894 12 000212   200010 236100                    LDQ     OLD_DELIVERY,,AUTO
        12 000213   000000 756100                    STQ     0,,PR0

      949     9895    2           IF VM_DELIVERY.ERR = '0'B

   9895 12 000214   000002 235100                    LDA     2,,PR0
        12 000215   000220 601000 12                 TNZ     s:9898

      950     9896    2           THEN
      951     9897    2               VM_DELIVERY.ERR = OLD_DELIVERY.ERR;

   9897 12 000216   200012 236100                    LDQ     OLD_DELIVERY+2,,AUTO
        12 000217   000002 756100                    STQ     2,,PR0

      952     9898    2           IF VM_DELIVERY.COUNT = 0

   9898 12 000220   000003 236100                    LDQ     3,,PR0
        12 000221   777000 316003                    CANQ    -512,DU
        12 000222   000230 601000 12                 TNZ     s:9903

      953     9899    3           THEN DO;

      954     9900    3               VM_DELIVERY.COUNT = OLD_DELIVERY.COUNT;

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:200  
   9900 12 000223   200013 236100                    LDQ     OLD_DELIVERY+3,,AUTO
        12 000224   000003 552140                    STBQ    3,'40'O,PR0

      955     9901    3               VM_DELIVERY.TEXT = OLD_DELIVERY.TEXT;

   9901 12 000225   040100 100500                    MLR     fill='040'O
        12 000226   200013 200377                    ADSC9   OLD_DELIVERY+3,,AUTO     cn=1,n=255
        12 000227   000003 200377                    ADSC9   3,,PR0                   cn=1,n=255

      956     9902    3           END;

      957     9903    2           VM_DELIVERY.FLAGS = VM_DELIVERY.FLAGS | OLD_DELIVERY.FLAGS;

   9903 12 000230   000001 236100                    LDQ     1,,PR0
        12 000231   200011 276100                    ORQ     OLD_DELIVERY+1,,AUTO
        12 000232   000001 756100                    STQ     1,,PR0

      958     9904    2           WRITE_DELIVERY.V.ONEWKEY# = %YES#;

   9904 12 000233   000400 236007                    LDQ     256,DL
        12 000234   000044 256000 11                 ORSQ    WRITE_DELIVERY+8

      959     9905    2           WRITE_DELIVERY.BUF_.BOUND = LENGTHV(ADDR(VM_DELIVERY)->BASED_DELIVERY);

   9905 12 000235   000003 236100                    LDQ     3,,PR0
        12 000236   000033 772000                    QRL     27
        12 000237   000015 620006                    EAX0    13,QL
        12 000240   000000 636010                    EAQ     0,X0
        12 000241   000022 772000                    QRL     18
        12 000242   000001 136007                    SBLQ    1,DL
        12 000243   000020 736000                    QLS     16
        12 000244   000040 676000 11                 ERQ     WRITE_DELIVERY+4
        12 000245   000007 376000 13                 ANQ     7
        12 000246   000040 656000 11                 ERSQ    WRITE_DELIVERY+4

      960     9906    2           CALL M$WRITE (WRITE_DELIVERY)

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:201  
   9906 12 000247   000034 630400 11                 EPPR0   WRITE_DELIVERY
        12 000250   440001 713400                    CLIMB   alt,write
        12 000251   401400 401760                    pmme    nvectors=4
        12 000252   000254 702000 12                 TSX2    s:9908
        12 000253   000255 710000 12                 TRA     s:9911

      961     9907    3           WHENALTRETURN DO;

      962     9908    3               ALTRETURN;

   9908 12 000254   000000 702200 xent               TSX2  ! X66_AALT

      963     9909    3           END;
      964     9910    2       END;

      965     9911    1       RETURN;

   9911 12 000255   000000 702200 xent               TSX2  ! X66_ARET

      966     9912        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:202  
      967     9913    1   VMD$DEL_DELIVERY: ENTRY (DCB#, VM_DELIVERYKEY) ALTRET;

   9913 12 000256   000000 700200 xent  VMD$DEL_DEL* TSX0  ! X66_AUTO_3
        12 000257   000120 000003                    ZERO    80,3

      968     9914    1       DELETE_DELIVERY.KEY_ = VECTOR (VM_DELIVERYKEY);

   9914 12 000260   000002 235000 13                 LDA     2
        12 000261   200004 236100                    LDQ     @VM_DELIVERYKEY,,AUTO
        12 000262   000052 757000 11                 STAQ    DELETE_DELIVERY+2

      969     9915    1       DELETE_DELIVERY.V.DCB# = DCB#;

   9915 12 000263   200003 470500                    LDP0    @DCB#,,AUTO
        12 000264   000000 720100                    LXL0    0,,PR0
        12 000265   000060 740000 11                 STX0    DELETE_DELIVERY+8

      970     9916    1       CALL M$DELREC (DELETE_DELIVERY) ALTRET(E_PMME);

   9916 12 000266   000050 630400 11                 EPPR0   DELETE_DELIVERY
        12 000267   440002 713400                    CLIMB   alt,+16386
        12 000270   401400 401760                    pmme    nvectors=4
        12 000271   000273 702000 12                 TSX2    E_PMME

      971     9917    1       RETURN;

   9917 12 000272   000000 702200 xent               TSX2  ! X66_ARET

      972     9918        %EJECT;
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:203  
      973     9919    1   E_PMME:
      974     9920    1       ALTRETURN;

   9920 12 000273   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

READ_DELIVERY
 Sect OctLoc
  11     000   000005 777640   000010 006000   000000 177640   000000 006014    ................
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     010   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     014   000000 000000   000000 000000                                    ........

READ_RELATIVE
 Sect OctLoc
  11     016   000005 777640   000026 006000   000000 177640   000000 006014    ................
  11     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     026   000000 500000   000000 000000   000000 000000   000000 000000    ................
  11     032   000000 000000   000000 000000                                    ........

WRITE_DELIVERY
 Sect OctLoc
  11     034   000003 777640   000044 006000   000000 177640   000000 006014    .....$..........
  11     040   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     044   000000 400400   000000 000000   000000 000000   000000 000000    ................

DELETE_DELIVERY
 Sect OctLoc
  11     050   000001 777640   000060 006000   000000 177640   000000 006014    .....0..........
  11     054   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     060   000000 000000   000000 000000                                    ........

MOVE_DELIVERY
 Sect OctLoc
  11     062   000003 777640   000070 006000   000000 177640   000000 006014    .....8..........
  11     066   000000 177640   000000 006014   000000 000000   000000 000000    ................
  11     072   000000 000000   0***** ******                                    ........

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:204  
(unnamed)
 Sect OctLoc
  13     000   000000 006014   040040 040040   000012 177640   000102 777640    ....    .....B..
  13     004   777777 377777   777777 777577   777777 777377   777777 600000    ................
  13     010   000000 000000   000003 000000                                    ........
      975     9921    1   END VMD$GET_DELIVERY;
      976     9922        %EOD;

PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:205  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMD$GET_DELIVERY.
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:206  

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_DELIVERY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    50-0-0/d STRC(360)   r     1 DELETE_DELIVERY           62-0-0/d STRC(360)   r     1 MOVE_DELIVERY
     0-0-0/d STRC(504)   r     1 READ_DELIVERY             16-0-0/d STRC(504)   r     1 READ_RELATIVE
    34-0-0/d STRC(432)   r     1 WRITE_DELIVERY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB#                      5-0-0/w PTR         r     1 @VM_DELIVERY
     4-0-0/w PTR         r     1 @VM_DELIVERYKEY           *0-0-0/w UBIN        r     1 DCB#
    10-0-0/w STRC(2412)  r     1 OLD_DELIVERY               6-0-0/d STRC(72)          1 VLP_VECTOR
    *0-0-0/w STRC(2412)  r     1 VM_DELIVERY               *0-0-0/c STRC(369)   r     1 VM_DELIVERYKEY

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:207  
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w ASTR(117)   r     1 BASED_DELIVERY             0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GET_DELIVERY requires 188 words for executable code.
   Procedure VMD$GET_DELIVERY requires 80 words of local(AUTO) storage.
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:208  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:209  
          MINI XREF LISTING

B$ALT.CODE
      9807**DCL      9807--REDEF    9808--REDEF    9808--REDEF
B$ALT.ERR.ERR#
      9809**DCL      9809--REDEF    9887>>IF
B$ALT.EVID
      9808**DCL      9808--REDEF    9808--REDEF
B$TCB.ALT$
      9803**DCL      9887>>IF
B$TCB$
      9257**DCL      9803--IMP-PTR  9887>>IF
BASED_DELIVERY
      9773**DCL      9883--ASSIGN   9905--ASSIGN
BASED_DELIVERY.COUNT
      9792**DCL      9795--IMP-SIZ  9883>>ASSIGN   9905>>ASSIGN
DCB#
      9502**DCL        14--PROC     9818>>ASSIGN   9837--ENTRY    9839>>ASSIGN   9852>>ASSIGN   9867--ENTRY
      9874--ENTRY    9884>>ASSIGN   9891<>CALL     9913--ENTRY    9915>>ASSIGN
DELETE_DELIVERY
      9680**DCL      9916<>CALL
DELETE_DELIVERY.KEY_
      9680**DCL      9914<<ASSIGN
DELETE_DELIVERY.V
      9683**DCL      9680--DCLINIT
DELETE_DELIVERY.V.DCB#
      9684**DCL      9915<<ASSIGN
DELIVERY_WRITER
      9881**LABEL    9872--GOTO
ERRMSG_FID.L#
      9325**DCL      9325--IMP-SIZ
E_PMME
      9920**LABEL    9916--CALLALT
M$DELREC
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:210  
      7171**DCL-ENT  9916--CALL
M$PRECORD
      7173**DCL-ENT  9842--CALL     9846--CALL
M$READ
      7170**DCL-ENT  9819--CALL     9853--CALL
M$WRITE
      7170**DCL-ENT  9885--CALL     9906--CALL
MOVE_DELIVERY
      9699**DCL      9842<>CALL     9846<>CALL
MOVE_DELIVERY.KEY_
      9699**DCL      9838<<ASSIGN
MOVE_DELIVERY.V
      9701**DCL      9699--DCLINIT
MOVE_DELIVERY.V.DCB#
      9701**DCL      9839<<ASSIGN
MOVE_DELIVERY.V.KEYS#
      9702**DCL      9840<<ASSIGN   9844<<ASSIGN
MOVE_DELIVERY.V.N#
      9705**DCL      9841<<ASSIGN   9845<<ASSIGN
OLD_DELIVERY
      9735**DCL      9890<<ASSIGN   9891<>CALL
OLD_DELIVERY.COUNT
      9754**DCL      9900>>ASSIGN
OLD_DELIVERY.ERR
      9752**DCL      9897>>ASSIGN
OLD_DELIVERY.FLAGS
      9738**DCL      9903>>ASSIGN
OLD_DELIVERY.TEXT
      9759**DCL      9901>>ASSIGN
OLD_DELIVERY.UTS_OF_DELIVERY
      9736**DCL      9894>>ASSIGN
READ_DELIVERY
      9577**DCL      9819<>CALL
READ_DELIVERY.BUF_
      9579**DCL      9817<<ASSIGN
READ_DELIVERY.KEY_
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:211  
      9577**DCL      9816<<ASSIGN
READ_DELIVERY.STATION_
      9580**DCL      9581--REDEF
READ_DELIVERY.V
      9581**DCL      9577--DCLINIT
READ_DELIVERY.V.DCB#
      9581**DCL      9818<<ASSIGN
READ_DELIVERY.V.DVBYTE.REREAD#
      9592**DCL      9592--REDEF
READ_DELIVERY.V.INDX#
      9590**DCL      9590--REDEF
READ_RELATIVE
      9616**DCL      9853<>CALL
READ_RELATIVE.BUF_
      9618**DCL      9851<<ASSIGN
READ_RELATIVE.KEY_
      9616**DCL      9850<<ASSIGN
READ_RELATIVE.STATION_
      9619**DCL      9620--REDEF
READ_RELATIVE.V
      9620**DCL      9616--DCLINIT
READ_RELATIVE.V.DCB#
      9620**DCL      9852<<ASSIGN
READ_RELATIVE.V.DVBYTE.REREAD#
      9631**DCL      9631--REDEF
READ_RELATIVE.V.INDX#
      9629**DCL      9629--REDEF
VLP_VECTOR.W2
      9721**DCL      9722--REDEF
VMD$GET_DELIVERY
        14**PROC     9891--CALL
VM_DELIVERY
      9531**DCL        14--PROC     9817--ASSIGN   9837--ENTRY    9851--ASSIGN   9867--ENTRY    9874--ENTRY
      9882--ASSIGN   9883--ASSIGN   9883--ASSIGN   9905--ASSIGN   9905--ASSIGN
VM_DELIVERY.COUNT
      9550**DCL      9814<<ASSIGN   9848<<ASSIGN   9898>>IF       9900<<ASSIGN
PL6.E3A0      #006=VMD$GET_DELIVERY File=VMD$SUBR.:VMB6TSI                       WED 08/20/97 15:13 Page:212  
VM_DELIVERY.ERR
      9548**DCL      9895>>IF       9897<<ASSIGN
VM_DELIVERY.FLAGS
      9534**DCL      9903<<ASSIGN   9903>>ASSIGN
VM_DELIVERY.TEXT
      9555**DCL      9814--ASSIGN   9815<<ASSIGN   9848--ASSIGN   9849<<ASSIGN   9901<<ASSIGN
VM_DELIVERY.UTS_OF_DELIVERY
      9532**DCL      9892>>IF       9894<<ASSIGN
VM_DELIVERYKEY
      9513**DCL        14--PROC     9816--ASSIGN   9837--ENTRY    9838--ASSIGN   9850--ASSIGN   9867--ENTRY
      9874--ENTRY    9881--ASSIGN   9891<>CALL     9913--ENTRY    9914--ASSIGN
VM_DELIVERYKEY.TYPE
      9515**DCL      9861>>IF
WRITE_DELIVERY
      9655**DCL      9885<>CALL     9906<>CALL
WRITE_DELIVERY.BUF_
      9655**DCL      9882<<ASSIGN
WRITE_DELIVERY.BUF_.BOUND
      9655**DCL      9883<<ASSIGN   9905<<ASSIGN
WRITE_DELIVERY.KEY_
      9655**DCL      9881<<ASSIGN
WRITE_DELIVERY.STATION_
      9657**DCL      9657--REDEF
WRITE_DELIVERY.V
      9658**DCL      9655--DCLINIT
WRITE_DELIVERY.V.DCB#
      9658**DCL      9884<<ASSIGN
WRITE_DELIVERY.V.DVBYTE.VFC#
      9664**DCL      9664--REDEF
WRITE_DELIVERY.V.NEWKEY#
      9661**DCL      9869<<ASSIGN   9876<<ASSIGN
WRITE_DELIVERY.V.ONEWKEY#
      9660**DCL      9870<<ASSIGN   9877<<ASSIGN   9904<<ASSIGN
X$STRING.SIZ
      9171**DCL      9172--IMP-SIZ

PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:213  
      977        1        /*T***********************************************************/
      978        2        /*T*                                                         */
      979        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      980        4        /*T*                                                         */
      981        5        /*T***********************************************************/
      982        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      983        7        /*F*
      984        8             NAME: VMD$GET_SITE
      985        9             PURPOSE:
      986       10                  To read a specified VM_SITE record from the mail folder.
      987       11             DESCRIPTION:
      988       12                  None.
      989       13        */
      990       14        VMD$GET_SITE: PROC (VM_SITE,DCB#) ALTRET;
      991       15        /***** Include files *****/
      992       16          %INCLUDE CP_6;
      993     5575          %INCLUDE VM_MACRO_C;
      994     6843          %INCLUDE VM_DATA_R;
      995     7274          %VM_KEYTYPES;
      996     7295        /***** Parameters *****/
      997     7296    1   DCL DCB# UBIN WORD;
      998     7297          %VM_SITE (NAME=VM_SITE,STCLASS=" ");
      999     7321        /***** Fpts *****/
     1000     7322          %FPT_READ (FPTN=READ_SITE,KEY=VM_SITEKEY,KEYS=YES);
     1001     7361          %FPT_WRITE (FPTN=WRITE_SITE,KEY=VM_SITEKEY,ONEWKEY=YES);
     1002     7392        /***** Mail structures *****/
     1003     7393          %VM_SITEKEY (NAME=VM_SITEKEY,STCLASS=CONSTANT);
     1004     7408        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:214  
     1005     7409    1       READ_SITE.V.DCB# = DCB#;
     1006     7410    1       READ_SITE.BUF_ = VECTOR(VM_SITE);
     1007     7411    1       CALL M$READ (READ_SITE) ALTRET(E_PMME);
     1008     7412    1       RETURN;
     1009     7413        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:215  
     1010     7414    1   VMD$PUT_SITE: ENTRY (VM_SITE,DCB#) ALTRET;
     1011     7415    1       WRITE_SITE.V.DCB# = DCB#;
     1012     7416    1       WRITE_SITE.BUF_ = VECTOR(VM_SITE);
     1013     7417    1       CALL M$WRITE (WRITE_SITE) ALTRET(E_PMME);
     1014     7418    1       RETURN;
     1015     7419        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:216  
     1016     7420    1   E_PMME:
     1017     7421    1       ALTRETURN;
     1018     7422    1   END VMD$GET_SITE;
     1019     7423        %EOD;

PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:217  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GET_SITE.

   Procedure VMD$GET_SITE requires 27 words for executable code.
   Procedure VMD$GET_SITE requires 6 words of local(AUTO) storage.

PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:218  

 Object Unit name= VMD$GET_SITE                               File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:13:44.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    26     32  VMD$GET_SITE
   12  RoData even  UTS      1      1  VMD$GET_SITE
   13   Proc  even  none    27     33  VMD$GET_SITE
   14  RoData even  none     1      1  VMD$GET_SITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        2  VMD$GET_SITE
    13     15          yes     yes      Std        2  VMD$PUT_SITE
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:219  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:220  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:221  


      977        1        /*T***********************************************************/
      978        2        /*T*                                                         */
      979        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      980        4        /*T*                                                         */
      981        5        /*T***********************************************************/
      982        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      983        7        /*F*
      984        8             NAME: VMD$GET_SITE
      985        9             PURPOSE:
      986       10                  To read a specified VM_SITE record from the mail folder.
      987       11             DESCRIPTION:
      988       12                  None.
      989       13        */
      990       14        VMD$GET_SITE: PROC (VM_SITE,DCB#) ALTRET;

     14 13 000000   000000 700200 xent  VMD$GET_SITE TSX0  ! X66_AUTO_2
        13 000001   000006 000002                    ZERO    6,2

      991       15        /***** Include files *****/
      992       16          %INCLUDE CP_6;
      993     5575          %INCLUDE VM_MACRO_C;
      994     6843          %INCLUDE VM_DATA_R;
      995     7274          %VM_KEYTYPES;
      996     7295        /***** Parameters *****/
      997     7296    1   DCL DCB# UBIN WORD;
      998     7297          %VM_SITE (NAME=VM_SITE,STCLASS=" ");
      999     7321        /***** Fpts *****/
     1000     7322          %FPT_READ (FPTN=READ_SITE,KEY=VM_SITEKEY,KEYS=YES);
     1001     7361          %FPT_WRITE (FPTN=WRITE_SITE,KEY=VM_SITEKEY,ONEWKEY=YES);
     1002     7392        /***** Mail structures *****/
     1003     7393          %VM_SITEKEY (NAME=VM_SITEKEY,STCLASS=CONSTANT);
     1004     7408        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:222  
     1005     7409    1       READ_SITE.V.DCB# = DCB#;

   7409 13 000002   200004 470500                    LDP0    @DCB#,,AUTO
        13 000003   000000 720100                    LXL0    0,,PR0
        13 000004   000010 740000 11                 STX0    READ_SITE+8

     1006     7410    1       READ_SITE.BUF_ = VECTOR(VM_SITE);

   7410 13 000005   000000 235000 14                 LDA     0
        13 000006   200003 236100                    LDQ     @VM_SITE,,AUTO
        13 000007   000004 757000 11                 STAQ    READ_SITE+4

     1007     7411    1       CALL M$READ (READ_SITE) ALTRET(E_PMME);

   7411 13 000010   000000 630400 11                 EPPR0   READ_SITE
        13 000011   440000 713400                    CLIMB   alt,read
        13 000012   401400 401760                    pmme    nvectors=4
        13 000013   000032 702000 13                 TSX2    E_PMME

     1008     7412    1       RETURN;

   7412 13 000014   000000 702200 xent               TSX2  ! X66_ARET

     1009     7413        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:223  
     1010     7414    1   VMD$PUT_SITE: ENTRY (VM_SITE,DCB#) ALTRET;

   7414 13 000015   000000 700200 xent  VMD$PUT_SITE TSX0  ! X66_AUTO_2
        13 000016   000006 000002                    ZERO    6,2

     1011     7415    1       WRITE_SITE.V.DCB# = DCB#;

   7415 13 000017   200004 470500                    LDP0    @DCB#,,AUTO
        13 000020   000000 720100                    LXL0    0,,PR0
        13 000021   000026 740000 11                 STX0    WRITE_SITE+8

     1012     7416    1       WRITE_SITE.BUF_ = VECTOR(VM_SITE);

   7416 13 000022   000000 235000 14                 LDA     0
        13 000023   200003 236100                    LDQ     @VM_SITE,,AUTO
        13 000024   000022 757000 11                 STAQ    WRITE_SITE+4

     1013     7417    1       CALL M$WRITE (WRITE_SITE) ALTRET(E_PMME);

   7417 13 000025   000016 630400 11                 EPPR0   WRITE_SITE
        13 000026   440001 713400                    CLIMB   alt,write
        13 000027   401400 401760                    pmme    nvectors=4
        13 000030   000032 702000 13                 TSX2    E_PMME

     1014     7418    1       RETURN;

   7418 13 000031   000000 702200 xent               TSX2  ! X66_ARET

     1015     7419        %EJECT;
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:224  
     1016     7420    1   E_PMME:
     1017     7421    1       ALTRETURN;

   7421 13 000032   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

READ_SITE
 Sect OctLoc
  11     000   000005 777640   000010 006000   000000 377640   000000 006000    ................
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     010   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     014   000000 000000   000000 000000                                    ........

WRITE_SITE
 Sect OctLoc
  11     016   000003 777640   000026 006000   000000 377640   000000 006000    ................
  11     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     026   000000 400400   000000 000000   000000 000000   000000 000000    ................

VM_SITEKEY
 Sect OctLoc
  12     000   001012 ******                                                    ....

(unnamed)
 Sect OctLoc
  14     000   000067 777640                                                    .7..
     1018     7422    1   END VMD$GET_SITE;
     1019     7423        %EOD;

PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:225  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GET_SITE.
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:226  

 **** Variables and constants ****

  ****  Section 011  Data  VMD$GET_SITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 READ_SITE                 16-0-0/d STRC(432)   r     1 WRITE_SITE

  ****  Section 012 RoData VMD$GET_SITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(18)    r     1 VM_SITEKEY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DCB#                      3-0-0/w PTR         r     1 @VM_SITE
    *0-0-0/w UBIN        r     1 DCB#                      *0-0-0/w STRC(2016)  r     1 VM_SITE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:227  
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GET_SITE requires 27 words for executable code.
   Procedure VMD$GET_SITE requires 6 words of local(AUTO) storage.
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:228  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:229  
          MINI XREF LISTING

DCB#
      7296**DCL        14--PROC     7409>>ASSIGN   7414--ENTRY    7415>>ASSIGN
ERRMSG_FID.L#
      7119**DCL      7119--IMP-SIZ
E_PMME
      7421**LABEL    7411--CALLALT  7417--CALLALT
M$READ
      5504**DCL-ENT  7411--CALL
M$WRITE
      5504**DCL-ENT  7417--CALL
READ_SITE
      7339**DCL      7411<>CALL
READ_SITE.BUF_
      7341**DCL      7410<<ASSIGN
READ_SITE.STATION_
      7342**DCL      7343--REDEF
READ_SITE.V
      7343**DCL      7339--DCLINIT
READ_SITE.V.DCB#
      7343**DCL      7409<<ASSIGN
READ_SITE.V.DVBYTE.REREAD#
      7354**DCL      7354--REDEF
READ_SITE.V.INDX#
      7352**DCL      7352--REDEF
VM_SITE
      7307**DCL        14--PROC     7410--ASSIGN   7414--ENTRY    7416--ASSIGN
VM_SITEKEY
      7403**DCL      7339--DCLINIT  7340--DCLINIT  7378--DCLINIT
WRITE_SITE
      7378**DCL      7417<>CALL
WRITE_SITE.BUF_
      7378**DCL      7416<<ASSIGN
PL6.E3A0      #007=VMD$GET_SITE File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:13 Page:230  
WRITE_SITE.STATION_
      7380**DCL      7380--REDEF
WRITE_SITE.V
      7381**DCL      7378--DCLINIT
WRITE_SITE.V.DCB#
      7381**DCL      7415<<ASSIGN
WRITE_SITE.V.DVBYTE.VFC#
      7387**DCL      7387--REDEF
X$STRING.SIZ
      6965**DCL      6966--IMP-SIZ

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:231  
     1020        1        /*T***********************************************************/
     1021        2        /*T*                                                         */
     1022        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1023        4        /*T*                                                         */
     1024        5        /*T***********************************************************/
     1025        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1026        7        /*F*
     1027        8             NAME: VMD$ERRMSG
     1028        9             PURPOSE:
     1029       10                  To obtain the text of an errmsg.
     1030       11             DESCRIPTION:
     1031       12                  This routine is used throughtout the mail system for
     1032       13                  obtaining the text of an errmsg for subsequent use
     1033       14                  as format strings for the formatter (X$WRITE), as prompt
     1034       15                  strings for M$PROMPT, or any other language dependent
     1035       16                  literals.
     1036       17             PARAMETERS:
     1037       18                   ERRCODE - %VLP_ERRCODE - input parameter, code for msg to
     1038       19                                            obtain
     1039       20                   STRING -  %VLP_NAME    - output parameter, containing the
     1040       21                                            text of the message
     1041       22             ERROR CONDITIONS:
     1042       23                   This routine will M$XXX if a message for the code can't be
     1043       24                   found.
     1044       25                   A diagnostic message is printed if the errmsg text is longer
     1045       26                   than the declared size of STRING
     1046       27        */
     1047       28        VMD$ERRMSG: proc(ERRCODE, STRING, VECT) altret;
     1048       29        %INCLUDE CP_6;
     1049     5588        %INCLUDE XUR_ENTRY;
     1050     5620        %INCLUDE VM_PERR_C;
     1051     5915        %INCLUDE VM_DATA_R;
     1052     6346        %INCLUDE B$TABLES_C;
     1053     6454        %B$SR_NON_BLANK;
     1054     6458        /*
     1055     6459           This xlate table is used for translating double quote (") to %,
     1056     6460           since i can't figure out how to tell M$ERRMSG not to remove the
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:232  
     1057     6461           % character.  It also translates & to sp.  The & character is used
     1058     6462           when trailing blanks are requested on the message string.
     1059     6463        */
     1060     6464    1   DCL 1 XL CONSTANT DALIGNED,
     1061     6465    1         2 * (0:511) UBIN BYTE CALIGNED INIT
     1062     6466    1   (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
     1063     6467    1   26,27,28,29,30,31,32,33,37,35,36,37,32,39,40,41,42,43,44,45,46,47,48,
     1064     6468    1   49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,
     1065     6469    1   72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,
     1066     6470    1   94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,
     1067     6471    1   112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0*0);
     1068     6472
     1069     6473        /* Parameters */
     1070     6474        %VLP_ERRCODE (FPTN=ERRCODE, STCLASS=PARAM);
     1071     6519              %VLP_NAME (FPTN=STRING, STCLASS=PARAM);
     1072     6546    1   dcl  VECT  vector aligned;
     1073     6547
     1074     6548        /* Constant dcls */
     1075     6549        %FPT_ERRMSG (FPTN=C$GET_STRING,
     1076     6550                   INCLCODE=NO,
     1077     6551                   SUBAC=NO,
     1078     6552                   SUBDC=NO,
     1079     6553                   SUBFN=NO,
     1080     6554                   SUBSN=NO,
     1081     6555                   SUBMESS=YES,
     1082     6556                   RESULTS=VLR_ERRMSG,
     1083     6557                   FILEACCT=ERRMSG_FILE_ACCT,
     1084     6558                   FILENAME=ERRMSG_FILE_NAME,
     1085     6559                   STCLASS=CONSTANT);
     1086     6586        %VLR_ERRMSG;
     1087     6608        %VLP_ACCT (FPTN=ERRMSG_FILE_ACCT);
     1088     6621        %VLP_NAME (FPTN=ERRMSG_FILE_NAME);
     1089     6648        %VLP_ERRCODE (FPTN=NO_ERRMSG,
     1090     6649                   FCG="VM",MID="D",
     1091     6650                   ERR#=%E$NO_ERRMSG,
     1092     6651                   STCLASS=CONSTANT);
     1093     6696        /*E* ERROR: VMD-E$NO_ERRMSG-8
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:233  
     1094     6697             MESSAGE:No message for code %U1, Please report this
     1095     6698                     problem to your system manager.
     1096     6699        */
     1097     6700              %VLP_ERRCODE (FPTN=MSGTOOLONG,
     1098     6701              FCG="VM",MID="D",
     1099     6702              ERR#=%E$MSGTOOLONG,
     1100     6703              STCLASS=CONSTANT);
     1101     6748        /*E* ERROR: VMD-E$MSGTOOLONG-8
     1102     6749             MESSAGE:The error message is too long, Please report this
     1103     6750                     problem to your system manager.
     1104     6751        */
     1105     6752        /* Locals */
     1106     6753              %FPT_ERRMSG (FPTN=A$GET_STRING,
     1107     6754              STCLASS=AUTO);
     1108     6781    1   dcl TEMP_BUF char(120);
     1109     6782    1   dcl DUMMY ubin;
     1110     6783    1   dcl IX ubin;
     1111     6784
     1112     6785    1       call index(IX, '.', ERRMSG_FID.NAME#);
     1113     6786    1       ERRMSG_FILE_NAME.L#  = IX;
     1114     6787    1       ERRMSG_FILE_NAME.NAME# = substr(ERRMSG_FID.NAME#, 0, IX);
     1115     6788    1       if IX >= ERRMSG_FID.L# - 1
     1116     6789    1       then ERRMSG_FILE_ACCT.ACCT# = ':SYS';
     1117     6790    1       else ERRMSG_FILE_ACCT.ACCT# = substr(ERRMSG_FID.NAME#, IX+1);
     1118     6791
     1119     6792    1       A$GET_STRING     = C$GET_STRING;
     1120     6793    1       A$GET_STRING.V_  = vector(A$GET_STRING.V);
     1121     6794    1       A$GET_STRING.CODE_ = vector(ERRCODE);
     1122     6795    1       A$GET_STRING.BUF_ = vector(TEMP_BUF);
     1123     6796    1       TEMP_BUF = ' ';
     1124     6797    2       call M$ERRMSG (A$GET_STRING) whenaltreturn do; ; end;
     1125     6798
     1126     6799    1       call searchr(IX,DUMMY,B$SR_NON_BLANK,TEMP_BUF);
     1127     6800    1       if IX > SIZEC (STRING.NAME#)
     1128     6801    1       then call XUR$ERRMSG (MSGTOOLONG);
     1129     6802    1       else STRING.L# = IX;
     1130     6803
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:234  
     1131     6804    1       call XLATE (STRING.NAME#, XL, substr(TEMP_BUF,1,STRING.L#));
     1132     6805    1       if VLR_ERRMSG.NOMSG then
     1133     6806    2       do;
     1134     6807    2           call XUR$ERRMSG (NO_ERRMSG,,, vector(STRING));
     1135     6808    2           call M$XXX;
     1136     6809    2       end;
     1137     6810    1       if addr(VECT) ~= addr(nil)
     1138     6811    1       then VECT = vector( substr(STRING.NAME#,,IX) );
     1139     6812    1       return;
     1140     6813    1   end VMD$ERRMSG;
     1141     6814        %EOD;

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:235  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$ERRMSG.

   Procedure VMD$ERRMSG requires 143 words for executable code.
   Procedure VMD$ERRMSG requires 72 words of local(AUTO) storage.

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:236  

 Object Unit name= VMD$ERRMSG                                 File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:13:55.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11  RoData even  UTS    157    235  VMD$ERRMSG
   12   Data  even  none    14     16  VMD$ERRMSG
   13   Proc  even  none   143    217  VMD$ERRMSG
   14  RoData even  none     9     11  VMD$ERRMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        3  VMD$ERRMSG
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:237  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       7 XUR$ERRMSG
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$SR_NON_BLANK$
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:238  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:239  


     1020        1        /*T***********************************************************/
     1021        2        /*T*                                                         */
     1022        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1023        4        /*T*                                                         */
     1024        5        /*T***********************************************************/
     1025        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1026        7        /*F*
     1027        8             NAME: VMD$ERRMSG
     1028        9             PURPOSE:
     1029       10                  To obtain the text of an errmsg.
     1030       11             DESCRIPTION:
     1031       12                  This routine is used throughtout the mail system for
     1032       13                  obtaining the text of an errmsg for subsequent use
     1033       14                  as format strings for the formatter (X$WRITE), as prompt
     1034       15                  strings for M$PROMPT, or any other language dependent
     1035       16                  literals.
     1036       17             PARAMETERS:
     1037       18                   ERRCODE - %VLP_ERRCODE - input parameter, code for msg to
     1038       19                                            obtain
     1039       20                   STRING -  %VLP_NAME    - output parameter, containing the
     1040       21                                            text of the message
     1041       22             ERROR CONDITIONS:
     1042       23                   This routine will M$XXX if a message for the code can't be
     1043       24                   found.
     1044       25                   A diagnostic message is printed if the errmsg text is longer
     1045       26                   than the declared size of STRING
     1046       27        */
     1047       28        VMD$ERRMSG: proc(ERRCODE, STRING, VECT) altret;

     28 13 000000   000000 700200 xent  VMD$ERRMSG   TSX0  ! X66_AUTO_3
        13 000001   000110 000003                    ZERO    72,3

     1048       29        %INCLUDE CP_6;
     1049     5588        %INCLUDE XUR_ENTRY;
     1050     5620        %INCLUDE VM_PERR_C;
     1051     5915        %INCLUDE VM_DATA_R;
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:240  
     1052     6346        %INCLUDE B$TABLES_C;
     1053     6454        %B$SR_NON_BLANK;
     1054     6458        /*
     1055     6459           This xlate table is used for translating double quote (") to %,
     1056     6460           since i can't figure out how to tell M$ERRMSG not to remove the
     1057     6461           % character.  It also translates & to sp.  The & character is used
     1058     6462           when trailing blanks are requested on the message string.
     1059     6463        */
     1060     6464    1   DCL 1 XL CONSTANT DALIGNED,
     1061     6465    1         2 * (0:511) UBIN BYTE CALIGNED INIT
     1062     6466    1   (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
     1063     6467    1   26,27,28,29,30,31,32,33,37,35,36,37,32,39,40,41,42,43,44,45,46,47,48,
     1064     6468    1   49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,
     1065     6469    1   72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,
     1066     6470    1   94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,
     1067     6471    1   112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0*0);
     1068     6472
     1069     6473        /* Parameters */
     1070     6474        %VLP_ERRCODE (FPTN=ERRCODE, STCLASS=PARAM);
     1071     6519              %VLP_NAME (FPTN=STRING, STCLASS=PARAM);
     1072     6546    1   dcl  VECT  vector aligned;
     1073     6547
     1074     6548        /* Constant dcls */
     1075     6549        %FPT_ERRMSG (FPTN=C$GET_STRING,
     1076     6550                   INCLCODE=NO,
     1077     6551                   SUBAC=NO,
     1078     6552                   SUBDC=NO,
     1079     6553                   SUBFN=NO,
     1080     6554                   SUBSN=NO,
     1081     6555                   SUBMESS=YES,
     1082     6556                   RESULTS=VLR_ERRMSG,
     1083     6557                   FILEACCT=ERRMSG_FILE_ACCT,
     1084     6558                   FILENAME=ERRMSG_FILE_NAME,
     1085     6559                   STCLASS=CONSTANT);
     1086     6586        %VLR_ERRMSG;
     1087     6608        %VLP_ACCT (FPTN=ERRMSG_FILE_ACCT);
     1088     6621        %VLP_NAME (FPTN=ERRMSG_FILE_NAME);
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:241  
     1089     6648        %VLP_ERRCODE (FPTN=NO_ERRMSG,
     1090     6649                   FCG="VM",MID="D",
     1091     6650                   ERR#=%E$NO_ERRMSG,
     1092     6651                   STCLASS=CONSTANT);
     1093     6696        /*E* ERROR: VMD-E$NO_ERRMSG-8
     1094     6697             MESSAGE:No message for code %U1, Please report this
     1095     6698                     problem to your system manager.
     1096     6699        */
     1097     6700              %VLP_ERRCODE (FPTN=MSGTOOLONG,
     1098     6701              FCG="VM",MID="D",
     1099     6702              ERR#=%E$MSGTOOLONG,
     1100     6703              STCLASS=CONSTANT);
     1101     6748        /*E* ERROR: VMD-E$MSGTOOLONG-8
     1102     6749             MESSAGE:The error message is too long, Please report this
     1103     6750                     problem to your system manager.
     1104     6751        */
     1105     6752        /* Locals */
     1106     6753              %FPT_ERRMSG (FPTN=A$GET_STRING,
     1107     6754              STCLASS=AUTO);
     1108     6781    1   dcl TEMP_BUF char(120);
     1109     6782    1   dcl DUMMY ubin;
     1110     6783    1   dcl IX ubin;
     1111     6784
     1112     6785    1       call index(IX, '.', ERRMSG_FID.NAME#);

   6785 13 000002   000000 236000 xsym               LDQ     ERRMSG_FID
        13 000003   000033 772000                    QRL     27
        13 000004   000000 620006                    EAX0    0,QL
        13 000005   000000 124440                    SCM     mask='000'O
        13 000006   000000 200010 xsym               ADSC9   ERRMSG_FID               cn=1,n=*X0
        13 000007   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000010   200077 000100                    ARG     IX,,AUTO

     1113     6786    1       ERRMSG_FILE_NAME.L#  = IX;

   6786 13 000011   200077 236100                    LDQ     IX,,AUTO
        13 000012   000033 736000                    QLS     27
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:242  
        13 000013   000006 552040 12                 STBQ    ERRMSG_FILE_NAME,'40'O

     1114     6787    1       ERRMSG_FILE_NAME.NAME# = substr(ERRMSG_FID.NAME#, 0, IX);

   6787 13 000014   200077 721100                    LXL1    IX,,AUTO
        13 000015   040000 100440                    MLR     fill='040'O
        13 000016   000000 200011 xsym               ADSC9   ERRMSG_FID               cn=1,n=*X1
        13 000017   000006 200037 12                 ADSC9   ERRMSG_FILE_NAME         cn=1,n=31

     1115     6788    1       if IX >= ERRMSG_FID.L# - 1

   6788 13 000020   000000 236000 xsym               LDQ     ERRMSG_FID
        13 000021   000033 772000                    QRL     27
        13 000022   000001 136007                    SBLQ    1,DL
        13 000023   000027 604000 13                 TMI     s:6789
        13 000024   200077 116100                    CMPQ    IX,,AUTO
        13 000025   000027 600000 13                 TZE     s:6789
        13 000026   000033 603000 13                 TRC     s:6790

     1116     6789    1       then ERRMSG_FILE_ACCT.ACCT# = ':SYS';

   6789 13 000027   000234 235000 11                 LDA     MSGTOOLONG+1
        13 000030   000001 236000 14                 LDQ     1
        13 000031   000004 757000 12                 STAQ    ERRMSG_FILE_ACCT
        13 000032   000043 710000 13                 TRA     s:6792

     1117     6790    1       else ERRMSG_FILE_ACCT.ACCT# = substr(ERRMSG_FID.NAME#, IX+1);

   6790 13 000033   000000 636010                    EAQ     0,X0
        13 000034   000022 772000                    QRL     18
        13 000035   200077 136100                    SBLQ    IX,,AUTO
        13 000036   777777 622006                    EAX2    -1,QL
        13 000037   200077 235100                    LDA     IX,,AUTO
        13 000040   040000 100445                    MLR     fill='040'O
        13 000041   000000 400012 xsym               ADSC9   ERRMSG_FID,A             cn=2,n=*X2
        13 000042   000004 000010 12                 ADSC9   ERRMSG_FILE_ACCT         cn=0,n=8

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:243  
     1118     6791
     1119     6792    1       A$GET_STRING     = C$GET_STRING;

   6792 13 000043   000100 100400                    MLR     fill='000'O
        13 000044   000200 000150 11                 ADSC9   C$GET_STRING             cn=0,n=104
        13 000045   200006 000150                    ADSC9   A$GET_STRING,,AUTO       cn=0,n=104

     1120     6793    1       A$GET_STRING.V_  = vector(A$GET_STRING.V);

   6793 13 000046   000002 235000 14                 LDA     2
        13 000047   200100 452500                    STP2    IX+1,,AUTO
        13 000050   200100 236100                    LDQ     IX+1,,AUTO
        13 000051   000034 036003                    ADLQ    28,DU
        13 000052   200006 757100                    STAQ    A$GET_STRING,,AUTO

     1121     6794    1       A$GET_STRING.CODE_ = vector(ERRCODE);

   6794 13 000053   777640 235007                    LDA     -96,DL
        13 000054   200003 236100                    LDQ     @ERRCODE,,AUTO
        13 000055   200010 757100                    STAQ    A$GET_STRING+2,,AUTO

     1122     6795    1       A$GET_STRING.BUF_ = vector(TEMP_BUF);

   6795 13 000056   000003 235000 14                 LDA     3
        13 000057   200100 452500                    STP2    IX+1,,AUTO
        13 000060   200100 236100                    LDQ     IX+1,,AUTO
        13 000061   000040 036003                    ADLQ    32,DU
        13 000062   200012 757100                    STAQ    A$GET_STRING+4,,AUTO

     1123     6796    1       TEMP_BUF = ' ';

   6796 13 000063   040100 100400                    MLR     fill='040'O
        13 000064   000001 000001 14                 ADSC9   1                        cn=0,n=1
        13 000065   200040 000170                    ADSC9   TEMP_BUF,,AUTO           cn=0,n=120

     1124     6797    2       call M$ERRMSG (A$GET_STRING) whenaltreturn do; ; end;

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:244  
   6797 13 000066   200006 630500                    EPPR0   A$GET_STRING,,AUTO
        13 000067   420000 713400                    CLIMB   alt,+8192
        13 000070   405000 401760                    pmme    nvectors=11
        13 000071   000073 702000 13                 TSX2    s:6799
        13 000072   000073 710000 13                 TRA     s:6799

     1125     6798
     1126     6799    1       call searchr(IX,DUMMY,B$SR_NON_BLANK,TEMP_BUF);

   6799 13 000073   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
        13 000074   000000 165500                    TCTR
        13 000075   200040 000170                    ADSC9   TEMP_BUF,,AUTO           cn=0,n=120
        13 000076   000000 000100                    ARG     0,,PR0
        13 000077   200077 000100                    ARG     IX,,AUTO
        13 000100   200077 235100                    LDA     IX,,AUTO
        13 000101   000033 771000                    ARL     27
        13 000102   200076 755100                    STA     DUMMY,,AUTO
        13 000103   200077 551140                    STBA    IX,'40'O,AUTO
        13 000104   000107 606400 13                 TTN     s:6800
        13 000105   000167 236007                    LDQ     119,DL
        13 000106   200077 156100                    SSQ     IX,,AUTO

     1127     6800    1       if IX > SIZEC (STRING.NAME#)

   6800 13 000107   200004 471500                    LDP1    @STRING,,AUTO
        13 000110   000100 101500                    MRL     fill='000'O
        13 000111   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000112   200100 000002                    ADSC9   IX+1,,AUTO               cn=0,n=2
        13 000113   200100 220100                    LDX0    IX+1,,AUTO
        13 000114   000000 636010                    EAQ     0,X0
        13 000115   000022 772000                    QRL     18
        13 000116   200077 116100                    CMPQ    IX,,AUTO
        13 000117   000125 603000 13                 TRC     s:6802

     1128     6801    1       then call XUR$ERRMSG (MSGTOOLONG);

   6801 13 000120   000005 630400 14                 EPPR0   5
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:245  
        13 000121   000004 631400 14                 EPPR1   4
        13 000122   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000123   000000 011000                    NOP     0
        13 000124   000130 710000 13                 TRA     s:6804

     1129     6802    1       else STRING.L# = IX;

   6802 13 000125   000100 101500                    MRL     fill='000'O
        13 000126   200077 000004                    ADSC9   IX,,AUTO                 cn=0,n=4
        13 000127   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     1130     6803
     1131     6804    1       call XLATE (STRING.NAME#, XL, substr(TEMP_BUF,1,STRING.L#));

   6804 13 000130   200004 470500                    LDP0    @STRING,,AUTO
        13 000131   000100 101500                    MRL     fill='000'O
        13 000132   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000133   200100 000002                    ADSC9   IX+1,,AUTO               cn=0,n=2
        13 000134   200100 220100                    LDX0    IX+1,,AUTO
        13 000135   000100 101500                    MRL     fill='000'O
        13 000136   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000137   200101 000002                    ADSC9   IX+2,,AUTO               cn=0,n=2
        13 000140   200101 221100                    LDX1    IX+2,,AUTO
        13 000141   040140 160540                    MVT     fill='040'O
        13 000142   200040 200011                    ADSC9   TEMP_BUF,,AUTO           cn=1,n=*X1
        13 000143   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        13 000144   000000 000000 11                 ARG     XL

     1132     6805    1       if VLR_ERRMSG.NOMSG then

   6805 13 000145   000000 236000 12                 LDQ     VLR_ERRMSG
        13 000146   100000 316003                    CANQ    32768,DU
        13 000147   000176 600000 13                 TZE     s:6810

     1133     6806    2       do;

     1134     6807    2           call XUR$ERRMSG (NO_ERRMSG,,, vector(STRING));
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:246  

   6807 13 000150   000100 101500                    MRL     fill='000'O
        13 000151   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000152   200100 000002                    ADSC9   IX+1,,AUTO               cn=0,n=2
        13 000153   200100 220100                    LDX0    IX+1,,AUTO
        13 000154   000001 621010                    EAX1    1,X0
        13 000155   000000 635011                    EAA     0,X1
        13 000156   000002 771000                    ARL     2
        13 000157   000140 135007                    SBLA    96,DL
        13 000160   200004 236100                    LDQ     @STRING,,AUTO
        13 000161   200102 757100                    STAQ    IX+3,,AUTO
        13 000162   200102 631500                    EPPR1   IX+3,,AUTO
        13 000163   200107 451500                    STP1    IX+8,,AUTO
        13 000164   000007 236000 14                 LDQ     7
        13 000165   200106 756100                    STQ     IX+7,,AUTO
        13 000166   000010 235000 14                 LDA     8
        13 000167   200104 757100                    STAQ    IX+5,,AUTO
        13 000170   200104 630500                    EPPR0   IX+5,,AUTO
        13 000171   000006 631400 14                 EPPR1   6
        13 000172   000000 701000 xent               TSX1    XUR$ERRMSG
        13 000173   000000 011000                    NOP     0

     1135     6808    2           call M$XXX;

   6808 13 000174   000003 713400                    CLIMB   3
        13 000175   000000 401760                    pmme    nvectors=0

     1136     6809    2       end;

     1137     6810    1       if addr(VECT) ~= addr(nil)

   6810 13 000176   200005 236100                    LDQ     @VECT,,AUTO
        13 000177   000007 116000 14                 CMPQ    7
        13 000200   000216 600000 13                 TZE     s:6812

     1138     6811    1       then VECT = vector( substr(STRING.NAME#,,IX) );

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:247  
   6811 13 000201   200004 470500                    LDP0    @STRING,,AUTO
        13 000202   000100 101500                    MRL     fill='000'O
        13 000203   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000204   200100 000002                    ADSC9   IX+1,,AUTO               cn=0,n=2
        13 000205   200100 220100                    LDX0    IX+1,,AUTO
        13 000206   200077 235100                    LDA     IX,,AUTO
        13 000207   000020 735000                    ALS     16
        13 000210   000140 135007                    SBLA    96,DL
        13 000211   200004 236100                    LDQ     @STRING,,AUTO
        13 000212   200000 036007                    ADLQ    65536,DL
        13 000213   200005 471500                    LDP1    @VECT,,AUTO
        13 000214   100000 755100                    STA     0,,PR1
        13 000215   100001 756100                    STQ     1,,PR1

     1139     6812    1       return;

   6812 13 000216   000000 702200 xent               TSX2  ! X66_ARET

XL
 Sect OctLoc
  11     000   000001 002003   004005 006007   010011 012013   014015 016017    ................
  11     004   020021 022023   024025 026027   030031 032033   034035 036037    ................
  11     010   040041 045043   044045 040047   050051 052053   054055 056057     !%#$% '()*+,-./
  11     014   060061 062063   064065 066067   070071 072073   074075 076077    0123456789:;<=>?
  11     020   100101 102103   104105 106107   110111 112113   114115 116117    @ABCDEFGHIJKLMNO
  11     024   120121 122123   124125 126127   130131 132133   134135 136137    PQRSTUVWXYZ[\]^_
  11     030   140141 142143   144145 146147   150151 152153   154155 156157    `abcdefghijklmno
  11     034   160161 162163   164165 166167   170171 172173   174175 176177    pqrstuvwxyz{|}~.
  11     040   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     174*  000000 000000   000000 000000   000000 000000   000000 000000    ................

C$GET_STRING
 Sect OctLoc
  11     200   000003 777640   000226 006000   000000 177640   000000 006014    ................
  11     204   000000 177640   000000 006014   000007 777640   000006 006000    ................
  11     210   000001 777640   000004 006000   000000 177640   000000 006014    ................
  11     214   000000 177640   000000 006014   000000 177640   000000 006014    ................
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:248  
  11     220   000000 177640   000000 006014   000003 777640   000000 006000    ................
  11     224   000000 177640   000000 006014   000000 000000   000000 000000    ................
  11     230   201000 030001   040000 000000                                    .... ...

NO_ERRMSG
 Sect OctLoc
  11     232   261504 020160                                                    ...p

MSGTOOLONG
 Sect OctLoc
  11     233   261504 020170                                                    ...x

(unnamed)
 Sect OctLoc
  11     234   072123 131123                                                    :SYS

VLR_ERRMSG
 Sect OctLoc
  12     000   00000* ***000   000000 000000   000000 000000   ****** ******    ................

ERRMSG_FILE_ACCT
 Sect OctLoc
  12     004   040040 040040   040040 040040

ERRMSG_FILE_NAME
 Sect OctLoc
  12     006   037040 040040   040040 040040   040040 040040   040040 040040    .
  12     012   040040 040040   040040 040040   040040 040040   040040 040040

(unnamed)
 Sect OctLoc
  14     000   056040 040040   040040 040040   000003 777640   000035 777640    .       ........
  14     004   000001 000000   000233 006000   000004 000000   000000 006014    ................
  14     010   000232 006000                                                    ....
     1140     6813    1   end VMD$ERRMSG;
     1141     6814        %EOD;

PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:249  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$ERRMSG.
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:250  

 **** Variables and constants ****

  ****  Section 011 RoData VMD$ERRMSG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   200-0-0/d STRC(936)   r     1 C$GET_STRING             233-0-0/w STRC        r     1 MSGTOOLONG
   232-0-0/w STRC        r     1 NO_ERRMSG                  0-0-0/d STRC(4608)  r     1 XL

  ****  Section 012  Data  VMD$ERRMSG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/c STRC(72)    r     1 ERRMSG_FILE_ACCT           6-0-0/c STRC(288)   r     1 ERRMSG_FILE_NAME
     0-0-0/d STRC(144)   r     1 VLR_ERRMSG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERRCODE                   4-0-0/w PTR         r     1 @STRING
     5-0-0/w PTR         r     1 @VECT                      6-0-0/d STRC(936)   r     1 A$GET_STRING
    76-0-0/w UBIN        r     1 DUMMY                     *0-0-0/w STRC        r     1 ERRCODE
    77-0-0/w UBIN        r     1 IX                        *0-0-0/c ASTR(9)     r     1 STRING
    40-0-0/c CHAR(120)   r     1 TEMP_BUF                  *0-0-0/w VECT        r     1 VECT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$SR_NON_BLANK$
     0-0-0/w PTR               1 B$TCB$                     0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:251  
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR               1 VM_ADDLIST$                0-0-0/d VECT              1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)           1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$SR_NON_BLANK             0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$ERRMSG requires 143 words for executable code.
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:252  
   Procedure VMD$ERRMSG requires 72 words of local(AUTO) storage.
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:253  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:254  
          MINI XREF LISTING

A$GET_STRING
      6765**DCL      6792<<ASSIGN   6797<>CALL
A$GET_STRING.BUF_
      6765**DCL      6795<<ASSIGN
A$GET_STRING.CODE_
      6765**DCL      6794<<ASSIGN
A$GET_STRING.V
      6769**DCL      6793--ASSIGN
A$GET_STRING.V_
      6765**DCL      6793<<ASSIGN
B$SR_NON_BLANK
      6456**DCL      6799>>CALLBLT
B$SR_NON_BLANK$
      6455**DCL      6456--IMP-PTR  6799>>CALLBLT
C$GET_STRING
      6570**DCL      6792>>ASSIGN
C$GET_STRING.V
      6574**DCL      6570--DCLINIT
DUMMY
      6782**DCL      6799<<CALLBLT
ERRCODE
      6486**DCL        28--PROC     6794--ASSIGN
ERRMSG_FID.L#
      6191**DCL      6191--IMP-SIZ  6785>>CALLBLT  6787>>ASSIGN   6788>>IF       6790>>ASSIGN
ERRMSG_FID.NAME#
      6191**DCL      6785>>CALLBLT  6787>>ASSIGN   6790>>ASSIGN
ERRMSG_FILE_ACCT
      6619**DCL      6571--DCLINIT
ERRMSG_FILE_ACCT.ACCT#
      6619**DCL      6789<<ASSIGN   6790<<ASSIGN
ERRMSG_FILE_NAME
      6646**DCL      6571--DCLINIT
PL6.E3A0      #008=VMD$ERRMSG File=VMD$SUBR.:VMB6TSI                             WED 08/20/97 15:13 Page:255  
ERRMSG_FILE_NAME.L#
      6646**DCL      6786<<ASSIGN
ERRMSG_FILE_NAME.NAME#
      6646**DCL      6787<<ASSIGN
IX
      6783**DCL      6785<<CALLBLT  6786>>ASSIGN   6787>>ASSIGN   6788>>IF       6790>>ASSIGN   6799<<CALLBLT
      6800>>IF       6802>>ASSIGN   6811>>ASSIGN
M$ERRMSG
      5579**DCL-ENT  6797--CALL
M$XXX
      5528**DCL-ENT  6808--CALL
MSGTOOLONG
      6715**DCL      6801<>CALL
NO_ERRMSG
      6663**DCL      6807<>CALL
STRING
      6544**DCL        28--PROC     6807--CALL
STRING.L#
      6544**DCL      6544--IMP-SIZ  6800>>IF       6802<<ASSIGN   6804>>CALLBLT  6804>>CALLBLT  6807>>CALL
      6811>>ASSIGN
STRING.NAME#
      6544**DCL      6800--IF       6804<<CALLBLT  6811--ASSIGN
TEMP_BUF
      6781**DCL      6795--ASSIGN   6796<<ASSIGN   6799>>CALLBLT  6804>>CALLBLT
VECT
      6546**DCL        28--PROC     6810--IF       6811<<ASSIGN
VLR_ERRMSG
      6597**DCL      6574--DCLINIT
VLR_ERRMSG.NOMSG
      6597**DCL      6805>>IF
X$STRING.SIZ
      6037**DCL      6038--IMP-SIZ
XL
      6464**DCL      6804>>CALLBLT
XUR$ERRMSG
      5603**DCL-ENT  6801--CALL     6807--CALL

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:256  
     1142        1        /*T***********************************************************/
     1143        2        /*T*                                                         */
     1144        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1145        4        /*T*                                                         */
     1146        5        /*T***********************************************************/
     1147        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1148        7        /*P*
     1149        8          NAME: VMD$GETNODES
     1150        9          PURPOSE:
     1151       10               To select the proper set of parse nodes based on the NATL
     1152       11               flag in the JIT.
     1153       12           PARAMETERS:
     1154       13               NATL_LIST - is the parallel array of national language chars
     1155       14                           and the address of the corresponding set of parse
     1156       15                           nodes.
     1157       16               NODES$   - is the return parameter containing a pointer to the
     1158       17                          nodes for this user's native language.
     1159       18           DESCRIPTION:
     1160       19               A straightforward linear search is done of the NATL_LIST native
     1161       20               language chars until one matching that in the JIT is found. The
     1162       21               the address of the corresponding set of parse nodes is then
     1163       22               copied to PARSE_NODES.  The routine returns the basic parse
     1164       23               nodes if no match is found.
     1165       24        */
     1166       25        VMD$GETNODES:PROC(NATL_LIST, NODES$, NODEFID, NODENAMES);
     1167       26            %include B$JIT;
     1168      629            %include CP_6;
     1169     6188            %include CP_6_SUBS;
     1170     6728            %include VM_MACRO_C;
     1171     7996            %include VM_DATA_R;
     1172     8427
     1173     8428        /****  Parameters   *******/
     1174     8429
     1175     8430        %NATL_PAIRS(STCLASS=PARAM, NAME=NATL_LIST);
     1176     8448
     1177     8449    1   dcl NODES$     ptr;
     1178     8450
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:257  
     1179     8451        %VLP_NAMEV( FPTN = NODEFID,            STCLASS="");
     1180     8458
     1181     8459    1   dcl 1     NODENAMES      aligned,
     1182     8460    1         2  INDX           ubin(18) caligned,
     1183     8461    1         2  L              ubin(9)  caligned,
     1184     8462    1         2  NAME           char(NODENAMES.L);
     1185     8463
     1186     8464    1   dcl  M$LM  dcb;
     1187     8465
     1188     8466        /*******  Local  data     *********/
     1189     8467
     1190     8468    1   dcl I            ubin;
     1191     8469    1   dcl CH           char(1);
     1192     8470    1   dcl CHARI        char(I) based;
     1193     8471    1   dcl GOT_SEG      sbin;
     1194     8472    1   dcl NODE_CASE    sbin;
     1195     8473    1   dcl DCB$         ptr;
     1196     8474
     1197     8475    1   dcl 1  SEGNODES       daligned based(VM_ADDREC$),
     1198     8476    1         2  WORDS(0:100)sbin aligned,
     1199     8477    1         2  CHARS       redef WORDS char(404);
     1200     8478
     1201     8479        %PARSE_NODES(NAME=NODES_TO_USE$,STCLASS="");
     1202     8514
     1203     8515        %F$DCB(STCLASS=BASED);
     1204     8572
     1205     8573
     1206     8574        /*********  External subroutines  *********/
     1207     8575
     1208     8576    1   dcl  VMA$ENLARGE_SEGMENT     entry(2) altret;
     1209     8577
     1210     8578        /**********     Fpts      *************/
     1211     8579
     1212     8580        %FPT_OPEN( FPTN = OPEN_NODEDEFS,      STCLASS=CONSTANT,
     1213     8581                   ASN  = FILE,
     1214     8582                   ACS  = DS6,
     1215     8583                   SHARE= IN,
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:258  
     1216     8584                   FUN  = IN);
     1217     8693
     1218     8694        %FPT_OPEN( STCLASS="" );
     1219     8803
     1220     8804        %VLP_NAME( FPTN = NODENAME, LEN=31,   STCLASS="");
     1221     8831
     1222     8832        %VLP_ACCT( FPTN = NODEACCT,           STCLASS="");
     1223     8845
     1224     8846
     1225     8847        %FPT_GETDCB(  FPTN = GETDCB_CONST,    STCLASS=CONSTANT,
     1226     8848                      DCBNAME = NODEKEY   );
     1227     8863
     1228     8864        %FPT_GETDCB(  FPTN = GETDCB,          STCLASS="");
     1229     8879
     1230     8880
     1231     8881        %FPT_RELDCB(  FPTN = RELDCB_CONST,    STCLASS=CONSTANT);
     1232     8895        %FPT_RELDCB(  FPTN = RELDCB,          STCLASS=""      );
     1233     8909
     1234     8910        %VLP_NAME(    FPTN = NODEKEY,         STCLASS="CONSTANT",
     1235     8911                      NAME = 'NODE'                             );
     1236     8938
     1237     8939        %FPT_CLOSE(   FPTN = FPT_CLOSE_CONST, STCLASS=CONSTANT,
     1238     8940                      DISP = SAVE                               );
     1239     8982
     1240     8983        %FPT_CLOSE(   FPTN = FPT_CLOSE,       STCLASS="");
     1241     9025
     1242     9026
     1243     9027        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:259  
     1244     9028        /**************************************************************/
     1245     9029        /**                     P r o c e d u r e                    **/
     1246     9030        /**************************************************************/
     1247     9031
     1248     9032    1       CH = B$JIT.LANG;
     1249     9033    1       GOT_SEG = 0;
     1250     9034    1       NODE_CASE = 0;
     1251     9035    1       if addr(NODEFID) = addr(nil) or addr(NODENAMES) = addr(nil)
     1252     9036    1       then goto NONAMES;
     1253     9037
     1254     9038    1       NODENAME = NODEFID;
     1255     9039    2       if CH ~= ' ' then do;
     1256     9040    2           substr(NODENAME.NAME#,NODENAME.L#,1) = CH;
     1257     9041    2           NODENAME.L# = NODENAME.L# + 1;
     1258     9042    2       end;
     1259     9043    1       NODEACCT.ACCT# = B$JIT.FACCN;
     1260     9044
     1261     9045    2       if B$JIT.SWITCH(0) = '0'b then do;
     1262     9046    2           NODEACCT.ACCT# = dcbaddr( dcbnum(M$LM) )->F$DCB.ACCT#;
     1263     9047    2           NODE_CASE = 2;
     1264     9048    2       end;
     1265     9049
     1266     9050    1       FPT_OPEN = OPEN_NODEDEFS;
     1267     9051    1       FPT_OPEN.V_ = vector(FPT_OPEN.V);
     1268     9052    1       FPT_OPEN.NAME_ = vector(NODENAME);
     1269     9053    1       FPT_OPEN.ACCT_ = vector(NODEACCT);
     1270     9054
     1271     9055    1       GETDCB = GETDCB_CONST;
     1272     9056    1       GETDCB.V_ = vector(GETDCB.V);
     1273     9057    1       GETDCB.DCBNUM_ = vector(FPT_OPEN.V.DCB#);
     1274     9058
     1275     9059    1       call M$GETDCB( GETDCB ) altret(USE_CONST);
     1276     9060    1       DCB$ = dcbaddr( FPT_OPEN.V.DCB# );
     1277     9061    1   TRY_OPEN:
     1278     9062    1       call CLEANUP(1);
     1279     9063    1       call M$OPEN(FPT_OPEN)   altret(REL_DCB);
     1280     9064    1       if DCB$->F$DCB.TYPE#          ~= 'Pn'     or
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:260  
     1281     9065    1         DCB$->F$DCB.ORG#           ~= %RANDOM# or
     1282     9066    1         DCB$->F$DCB.ACS#           ~= %DS6#
     1283     9067    1       then goto REL_DCB;
     1284     9068
     1285     9069    1       if (SEGNODES.WORDS(0)+1023)/1024+1 ~= DCB$->F$DCB.IXTNSIZE#  or
     1286     9070    1         SEGNODES.WORDS(1) ~= 0        or /*Mbz*/
     1287     9071    1         SEGNODES.WORDS(2) >= SEGNODES.WORDS(0)-3 or /*Uts*/
     1288     9072    1         SEGNODES.WORDS(3) >= SEGNODES.WORDS(2)-1 /*Toc*/
     1289     9073    1       then goto REL_DCB;
     1290     9074
     1291     9075    1       call SETUP_SEG_NODES altret(REL_DCB);
     1292     9076    1       return;
     1293     9077
     1294     9078    2       do while '0'b;
     1295     9079    2   REL_DCB:
     1296     9080    3           do case( NODE_CASE );
     1297     9081    3           case(0);
     1298     9082    3               NODE_CASE = NODE_CASE + 1;
     1299     9083    3               if B$JIT.ACCN = B$JIT.FACCN then goto REL_DCB;
     1300     9084    3               NODEACCT.ACCT# = B$JIT.ACCN;
     1301     9085    3               goto TRY_OPEN;
     1302     9086    3           case(1);
     1303     9087    3               NODE_CASE = NODE_CASE + 1;
     1304     9088    3               if B$JIT.ACCN = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT# or
     1305     9089    3                 B$JIT.FACCN = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#
     1306     9090    3               then goto REL_DCB;
     1307     9091    3               NODEACCT.ACCT# = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#;
     1308     9092    3               goto TRY_OPEN;
     1309     9093    3           case(2);
     1310     9094    3               NODE_CASE = NODE_CASE + 1;
     1311     9095    3               if B$JIT.ACCN = ':SYS'                            or
     1312     9096    3                 B$JIT.FACCN = ':SYS'                            or
     1313     9097    3                 ':SYS'      = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#
     1314     9098    3               then goto REL_DCB;
     1315     9099    3               NODEACCT.ACCT# = ':SYS';
     1316     9100    3               goto TRY_OPEN;
     1317     9101    3           end;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:261  
     1318     9102    2   USE_CONST:
     1319     9103    2           call CLEANUP;
     1320     9104    2       end;
     1321     9105    1   NONAMES:
     1322     9106    1       call index(I, B$JIT.LANG, NATL_LIST.NATLS)
     1323     9107    2       whenaltreturn do;
     1324     9108    2           I = 0;
     1325     9109    2       end;
     1326     9110    1       NODES$ = NATL_LIST.PARSE_NODES$(I);
     1327     9111    1       return;
     1328     9112
     1329     9113        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:262  
     1330     9114
     1331     9115        /*I*    NAME:    VMD$SETUP_SEG_NODES
     1332     9116                PURPOSE: To fill the NODES_TO_USE$ array in with the
     1333     9117                         pointers to the required nodes.
     1334     9118
     1335     9119                DESCRIPTION:
     1336     9120                         The required node list is a structure of
     1337     9121                         multiple NN variables followed one after
     1338     9122                         another until the last entry which is
     1339     9123                         signified by a 0 length textc name.
     1340     9124
     1341     9125                         The nodes in memory consist of a similar
     1342     9126                         table with the offset of the node definition
     1343     9127                         from the start of the segment as the first
     1344     9128                         2 bytes (instead of the index in NODES_TO_USE$).
     1345     9129
     1346     9130                         If a required node name is not found, this
     1347     9131                         subroutine altreturns.  It assumes that the
     1348     9132                         basic validity tests for the parse nodes have
     1349     9133                         been made before it starts.
     1350     9134        */
     1351     9135
     1352     9136    1   SETUP_SEG_NODES: proc altret;
     1353     9137
     1354     9138
     1355     9139        /* *    NAME:          Nn
     1356     9140                PURPOSE:       To define a required node name.
     1357     9141
     1358     9142                DESCRIPTION:   This structure is passed to VMD$GETNODES.
     1359     9143                               The passed structure contains multiple
     1360     9144                               entries, following each other until an
     1361     9145                               entry with a name length of 0 is found.
     1362     9146
     1363     9147                               Each entry contains the index to store
     1364     9148                               the pointer to this node in NODES_TO_USE$
     1365     9149                               the length of the node name and the text
     1366     9150                               of the node name.
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:263  
     1367     9151        */
     1368     9152    2   dcl 1  NN             caligned based(NN$),
     1369     9153        /**     The nodename entry we are looking up.  **/
     1370     9154    2         2  INDX        ubin(18) caligned,
     1371     9155    2         2  L           ubin(9)  caligned,
     1372     9156    2         2  NAME        char(NN.L)  caligned;
     1373     9157
     1374     9158
     1375     9159        /* *    NAME:          Nentry
     1376     9160                PURPOSE:       To define the available node names.
     1377     9161
     1378     9162                DESCRIPTION:   The memory resident version of the nodes
     1379     9163                               contains a pointer to the list of node
     1380     9164                               names (and their offsets) in the third word
     1381     9165                               of the nodes.  The half word at this offset
     1382     9166                               contains the number of names in the list.
     1383     9167                               The name/offset table begins 2 bytes after
     1384     9168                               the number of names in the list.
     1385     9169
     1386     9170                               For each name in the list, the nentry
     1387     9171                               structure is used to locate the name of the
     1388     9172                               node and its offset from the beginning of
     1389     9173                               the node segment.
     1390     9174        */
     1391     9175    2   dcl 1  NENTRY         caligned based(CN$),
     1392     9176        /**     The node position table entry          **/
     1393     9177    2         2  OFFSET      ubin(18) caligned, /** Offset of node   **/
     1394     9178    2         2  L           ubin(9)  caligned, /** Length of name   **/
     1395     9179    2         2  NAME        char(NENTRY.L)  caligned;
     1396     9180
     1397     9181    2   dcl  NN$               ptr;             /**  Pointer to nn entry we need.   */
     1398     9182    2   dcl  SN$               ptr;             /**  Start of nentry table          */
     1399     9183    2   dcl  CN$               ptr;             /**  Current nentry                 */
     1400     9184
     1401     9185    2   dcl  INDX              sbin;
     1402     9186    2   dcl  I                 sbin;
     1403     9187    2   dcl  NLEN              sbin;            /** Number of names in nentry       */
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:264  
     1404     9188
     1405     9189        /**************************************************************/
     1406     9190        /**                    P r o c e d u r e                     **/
     1407     9191        /**************************************************************/
     1408     9192
     1409     9193    2       NN$ = addr(NODENAMES);             /** Names of nodes we must locate   */
     1410     9194
     1411     9195        /**  Now look at the nodes we have read           */
     1412     9196    2       SN$ = pincrw( ADDR(SEGNODES), SEGNODES.WORDS(3) );
     1413     9197        /**  Now we are pointing at the names and offsets of the nodes
     1414     9198             that we have just read in.                                    **/
     1415     9199    2       NLEN = SN$->NENTRY.OFFSET;         /** Total number of definitions    **/
     1416     9200    2       SN$  = pincrc(SN$,2);              /** Point at first definition      **/
     1417     9201
     1418     9202    3       do while( NN.L > 0  );
     1419     9203        /**  For each node that we need....      **/
     1420     9204    3           INDX = NN.INDX;
     1421     9205    3           CN$ = SN$;
     1422     9206    3           I  = NLEN;
     1423     9207
     1424     9208    3   LOOKUP:
     1425     9209    4           do while I > 0;
     1426     9210        /**  Look through the names of the nodes that we have  **/
     1427     9211    4               if NENTRY.NAME = NN.NAME
     1428     9212    4               then goto FOUND;
     1429     9213
     1430     9214    4               CN$ = pincrc(CN$,3+NENTRY.L);
     1431     9215    4               I = I - 1;
     1432     9216    4           end;
     1433     9217
     1434     9218    3           altreturn;                    /** Can't find a required node!  **/
     1435     9219
     1436     9220    3   FOUND:
     1437     9221    3           NODES_TO_USE$( INDX ) = pincrw(addr(SEGNODES),NENTRY.OFFSET);
     1438     9222    3           NN$ = pincrc(NN$, 3 + NN.L);
     1439     9223    3       end;
     1440     9224
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:265  
     1441     9225    2       NODES$ = addr( NODES_TO_USE$ );
     1442     9226                       /***********  Set the error message fid to this account  *******/
     1443     9227    2       call index(I,'.',ERRMSG_FID.NAME#);
     1444     9228    2       substr(ERRMSG_FID.NAME#,I+1) = NODEACCT.ACCT#;
     1445     9229    2       return;
     1446     9230
     1447     9231    2   end SETUP_SEG_NODES;
     1448     9232        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:266  
     1449     9233
     1450     9234        /*I*    NAME:       VMD$CLEANUP
     1451     9235                PURPOSE:    To close the current dcb and optionally
     1452     9236                            release it.
     1453     9237
     1454     9238                DESCRIPTION:   The only parameter indicates that the
     1455     9239                               dcb in FPT_OPEN.V.DCB# is only to be
     1456     9240                               closed if its value is not equal to 0.
     1457     9241
     1458     9242                               The dcb in FPT_OPEN.V.DCB# is closed if
     1459     9243                               it is open and optionally released.
     1460     9244        */
     1461     9245    1   CLEANUP: proc(CLOSEONLY);
     1462     9246
     1463     9247    2   dcl  CLOSEONLY      sbin;
     1464     9248
     1465     9249    3       if FPT_OPEN.V.DCB# ~= 0 then do;
     1466     9250    4           if dcbaddr( FPT_OPEN.V.DCB# )->F$DCB.FCD#='1'b then do;
     1467     9251    4               FPT_CLOSE = FPT_CLOSE_CONST;
     1468     9252    4               FPT_CLOSE.V_ = vector(FPT_CLOSE.V);
     1469     9253    4               FPT_CLOSE.V.DCB# = FPT_OPEN.V.DCB#;
     1470     9254    5               call M$CLOSE( FPT_CLOSE ) whenaltreturn do; ; end;
     1471     9255    4           end;
     1472     9256    3           if addr(CLOSEONLY) ~= addr(nil) and CLOSEONLY ~= 0
     1473     9257    3           then return;
     1474     9258
     1475     9259    3           RELDCB  = RELDCB_CONST;
     1476     9260    3           RELDCB.V_ = vector(RELDCB.V);
     1477     9261    3           RELDCB.V.DCB# = FPT_OPEN.V.DCB#;
     1478     9262    4           call M$RELDCB( RELDCB ) whenaltreturn do; ; end;
     1479     9263    3       end;
     1480     9264    2       FPT_OPEN.V.DCB# = 0;
     1481     9265    2       return;
     1482     9266
     1483     9267    2   end CLEANUP;
     1484     9268    1   END VMD$GETNODES;

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:267  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GETNODES.

   Procedure VMD$GETNODES requires 356 words for executable code.
   Procedure VMD$GETNODES requires 162 words of local(AUTO) storage.

    No errors detected in file VMD$SUBR.:VMB6TSI    .

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:268  

 Object Unit name= VMD$GETNODES                               File name= VMD$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:14:10.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   DCB   even  none     0      0  M$LM
   12  RoData even  UTS    104    150  VMD$GETNODES
   13   Proc  even  none   356    544  VMD$GETNODES
   14  RoData even  none    11     13  VMD$GETNODES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        4  VMD$GETNODES
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:269  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                      M$LM
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:270  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:271  


     1142        1        /*T***********************************************************/
     1143        2        /*T*                                                         */
     1144        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1145        4        /*T*                                                         */
     1146        5        /*T***********************************************************/
     1147        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1148        7        /*P*
     1149        8          NAME: VMD$GETNODES
     1150        9          PURPOSE:
     1151       10               To select the proper set of parse nodes based on the NATL
     1152       11               flag in the JIT.
     1153       12           PARAMETERS:
     1154       13               NATL_LIST - is the parallel array of national language chars
     1155       14                           and the address of the corresponding set of parse
     1156       15                           nodes.
     1157       16               NODES$   - is the return parameter containing a pointer to the
     1158       17                          nodes for this user's native language.
     1159       18           DESCRIPTION:
     1160       19               A straightforward linear search is done of the NATL_LIST native
     1161       20               language chars until one matching that in the JIT is found. The
     1162       21               the address of the corresponding set of parse nodes is then
     1163       22               copied to PARSE_NODES.  The routine returns the basic parse
     1164       23               nodes if no match is found.
     1165       24        */
     1166       25        VMD$GETNODES:PROC(NATL_LIST, NODES$, NODEFID, NODENAMES);

     25 13 000000   000000 700200 xent  VMD$GETNODES TSX0  ! X66_AUTO_4
        13 000001   000242 000004                    ZERO    162,4

     1167       26            %include B$JIT;
     1168      629            %include CP_6;
     1169     6188            %include CP_6_SUBS;
     1170     6728            %include VM_MACRO_C;
     1171     7996            %include VM_DATA_R;
     1172     8427
     1173     8428        /****  Parameters   *******/
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:272  
     1174     8429
     1175     8430        %NATL_PAIRS(STCLASS=PARAM, NAME=NATL_LIST);
     1176     8448
     1177     8449    1   dcl NODES$     ptr;
     1178     8450
     1179     8451        %VLP_NAMEV( FPTN = NODEFID,            STCLASS="");
     1180     8458
     1181     8459    1   dcl 1     NODENAMES      aligned,
     1182     8460    1         2  INDX           ubin(18) caligned,
     1183     8461    1         2  L              ubin(9)  caligned,
     1184     8462    1         2  NAME           char(NODENAMES.L);
     1185     8463
     1186     8464    1   dcl  M$LM  dcb;
     1187     8465
     1188     8466        /*******  Local  data     *********/
     1189     8467
     1190     8468    1   dcl I            ubin;
     1191     8469    1   dcl CH           char(1);
     1192     8470    1   dcl CHARI        char(I) based;
     1193     8471    1   dcl GOT_SEG      sbin;
     1194     8472    1   dcl NODE_CASE    sbin;
     1195     8473    1   dcl DCB$         ptr;
     1196     8474
     1197     8475    1   dcl 1  SEGNODES       daligned based(VM_ADDREC$),
     1198     8476    1         2  WORDS(0:100)sbin aligned,
     1199     8477    1         2  CHARS       redef WORDS char(404);
     1200     8478
     1201     8479        %PARSE_NODES(NAME=NODES_TO_USE$,STCLASS="");
     1202     8514
     1203     8515        %F$DCB(STCLASS=BASED);
     1204     8572
     1205     8573
     1206     8574        /*********  External subroutines  *********/
     1207     8575
     1208     8576    1   dcl  VMA$ENLARGE_SEGMENT     entry(2) altret;
     1209     8577
     1210     8578        /**********     Fpts      *************/
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:273  
     1211     8579
     1212     8580        %FPT_OPEN( FPTN = OPEN_NODEDEFS,      STCLASS=CONSTANT,
     1213     8581                   ASN  = FILE,
     1214     8582                   ACS  = DS6,
     1215     8583                   SHARE= IN,
     1216     8584                   FUN  = IN);
     1217     8693
     1218     8694        %FPT_OPEN( STCLASS="" );
     1219     8803
     1220     8804        %VLP_NAME( FPTN = NODENAME, LEN=31,   STCLASS="");
     1221     8831
     1222     8832        %VLP_ACCT( FPTN = NODEACCT,           STCLASS="");
     1223     8845
     1224     8846
     1225     8847        %FPT_GETDCB(  FPTN = GETDCB_CONST,    STCLASS=CONSTANT,
     1226     8848                      DCBNAME = NODEKEY   );
     1227     8863
     1228     8864        %FPT_GETDCB(  FPTN = GETDCB,          STCLASS="");
     1229     8879
     1230     8880
     1231     8881        %FPT_RELDCB(  FPTN = RELDCB_CONST,    STCLASS=CONSTANT);
     1232     8895        %FPT_RELDCB(  FPTN = RELDCB,          STCLASS=""      );
     1233     8909
     1234     8910        %VLP_NAME(    FPTN = NODEKEY,         STCLASS="CONSTANT",
     1235     8911                      NAME = 'NODE'                             );
     1236     8938
     1237     8939        %FPT_CLOSE(   FPTN = FPT_CLOSE_CONST, STCLASS=CONSTANT,
     1238     8940                      DISP = SAVE                               );
     1239     8982
     1240     8983        %FPT_CLOSE(   FPTN = FPT_CLOSE,       STCLASS="");
     1241     9025
     1242     9026
     1243     9027        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:274  
     1244     9028        /**************************************************************/
     1245     9029        /**                     P r o c e d u r e                    **/
     1246     9030        /**************************************************************/
     1247     9031
     1248     9032    1       CH = B$JIT.LANG;

   9032 13 000002   000000 470400 xsym               LDP0    B$JIT$
        13 000003   000145 236100                    LDQ     101,,PR0
        13 000004   000033 736000                    QLS     27
        13 000005   000000 276000 14                 ORQ     0
        13 000006   200010 756100                    STQ     CH,,AUTO

     1249     9033    1       GOT_SEG = 0;

   9033 13 000007   200011 450100                    STZ     GOT_SEG,,AUTO

     1250     9034    1       NODE_CASE = 0;

   9034 13 000010   200012 450100                    STZ     NODE_CASE,,AUTO

     1251     9035    1       if addr(NODEFID) = addr(nil) or addr(NODENAMES) = addr(nil)

   9035 13 000011   200005 236100                    LDQ     @NODEFID,,AUTO
        13 000012   000001 116000 14                 CMPQ    1
        13 000013   000277 600000 13                 TZE     NONAMES
        13 000014   200006 236100                    LDQ     @NODENAMES,,AUTO
        13 000015   000001 116000 14                 CMPQ    1
        13 000016   000277 600000 13                 TZE     NONAMES

     1252     9036    1       then goto NONAMES;
     1253     9037
     1254     9038    1       NODENAME = NODEFID;

   9038 13 000017   200005 471500                    LDP1    @NODEFID,,AUTO
        13 000020   000100 101500                    MRL     fill='000'O
        13 000021   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        13 000022   200240 000002                    ADSC9   NLEN+2,,AUTO             cn=0,n=2
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:275  
        13 000023   200240 220100                    LDX0    NLEN+2,,AUTO
        13 000024   000001 621010                    EAX1    1,X0
        13 000025   000100 100540                    MLR     fill='000'O
        13 000026   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
        13 000027   200144 000040                    ADSC9   NODENAME,,AUTO           cn=0,n=32

     1255     9039    2       if CH ~= ' ' then do;

   9039 13 000030   200010 236100                    LDQ     CH,,AUTO
        13 000031   777000 376003                    ANQ     -512,DU
        13 000032   040000 116003                    CMPQ    16384,DU
        13 000033   000044 600000 13                 TZE     s:9043

     1256     9040    2           substr(NODENAME.NAME#,NODENAME.L#,1) = CH;

   9040 13 000034   200144 236100                    LDQ     NODENAME,,AUTO
        13 000035   000033 772000                    QRL     27
        13 000036   040106 100500                    MLR     fill='040'O
        13 000037   200010 000001                    ADSC9   CH,,AUTO                 cn=0,n=1
        13 000040   200144 200001                    ADSC9   NODENAME,Q,AUTO          cn=1,n=1

     1257     9041    2           NODENAME.L# = NODENAME.L# + 1;

   9041 13 000041   200144 236100                    LDQ     NODENAME,,AUTO
        13 000042   001000 036003                    ADLQ    512,DU
        13 000043   200144 552140                    STBQ    NODENAME,'40'O,AUTO

     1258     9042    2       end;

     1259     9043    1       NODEACCT.ACCT# = B$JIT.FACCN;

   9043 13 000044   000006 237100                    LDAQ    6,,PR0
        13 000045   200154 757100                    STAQ    NODEACCT,,AUTO

     1260     9044
     1261     9045    2       if B$JIT.SWITCH(0) = '0'b then do;

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:276  
   9045 13 000046   000031 234100                    SZN     25,,PR0
        13 000047   000060 604000 13                 TMI     s:9050

     1262     9046    2           NODEACCT.ACCT# = dcbaddr( dcbnum(M$LM) )->F$DCB.ACCT#;

   9046 13 000050   000000 236007 xsym               LDQ     M$LM,DL
        13 000051   000002 473400 14                 LDP3    2
        13 000052   300000 474500                    LDP4    0,,PR3
        13 000053   400000 475506                    LDP5    0,QL,PR4
        13 000054   500020 237100                    LDAQ    16,,PR5
        13 000055   200154 757100                    STAQ    NODEACCT,,AUTO

     1263     9047    2           NODE_CASE = 2;

   9047 13 000056   000002 235007                    LDA     2,DL
        13 000057   200012 755100                    STA     NODE_CASE,,AUTO

     1264     9048    2       end;

     1265     9049
     1266     9050    1       FPT_OPEN = OPEN_NODEDEFS;

   9050 13 000060   000100 100400                    MLR     fill='000'O
        13 000061   000000 000350 12                 ADSC9   OPEN_NODEDEFS            cn=0,n=232
        13 000062   200052 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

     1267     9051    1       FPT_OPEN.V_ = vector(FPT_OPEN.V);

   9051 13 000063   000003 235000 14                 LDA     3
        13 000064   200240 452500                    STP2    NLEN+2,,AUTO
        13 000065   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000066   000116 036003                    ADLQ    78,DU
        13 000067   200052 757100                    STAQ    FPT_OPEN,,AUTO

     1268     9052    1       FPT_OPEN.NAME_ = vector(NODENAME);

   9052 13 000070   000004 235000 14                 LDA     4
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:277  
        13 000071   200240 452500                    STP2    NLEN+2,,AUTO
        13 000072   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000073   000144 036003                    ADLQ    100,DU
        13 000074   200060 757100                    STAQ    FPT_OPEN+6,,AUTO

     1269     9053    1       FPT_OPEN.ACCT_ = vector(NODEACCT);

   9053 13 000075   000005 235000 14                 LDA     5
        13 000076   200240 452500                    STP2    NLEN+2,,AUTO
        13 000077   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000100   000154 036003                    ADLQ    108,DU
        13 000101   200076 757100                    STAQ    FPT_OPEN+20,,AUTO

     1270     9054
     1271     9055    1       GETDCB = GETDCB_CONST;

   9055 13 000102   000100 100400                    MLR     fill='000'O
        13 000103   000072 000040 12                 ADSC9   GETDCB_CONST             cn=0,n=32
        13 000104   200156 000040                    ADSC9   GETDCB,,AUTO             cn=0,n=32

     1272     9056    1       GETDCB.V_ = vector(GETDCB.V);

   9056 13 000105   000005 235000 14                 LDA     5
        13 000106   200240 452500                    STP2    NLEN+2,,AUTO
        13 000107   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000110   000164 036003                    ADLQ    116,DU
        13 000111   200156 757100                    STAQ    GETDCB,,AUTO

     1273     9057    1       GETDCB.DCBNUM_ = vector(FPT_OPEN.V.DCB#);

   9057 13 000112   377640 235007                    LDA     130976,DL
        13 000113   200240 452500                    STP2    NLEN+2,,AUTO
        13 000114   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000115   000116 036003                    ADLQ    78,DU
        13 000116   200162 757100                    STAQ    GETDCB+4,,AUTO

     1274     9058
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:278  
     1275     9059    1       call M$GETDCB( GETDCB ) altret(USE_CONST);

   9059 13 000117   200156 630500                    EPPR0   GETDCB,,AUTO
        13 000120   460002 713400                    CLIMB   alt,+24578
        13 000121   401000 401760                    pmme    nvectors=3
        13 000122   000273 702000 13                 TSX2    USE_CONST

     1276     9060    1       DCB$ = dcbaddr( FPT_OPEN.V.DCB# );

   9060 13 000123   000002 470400 14                 LDP0    2
        13 000124   000000 471500                    LDP1    0,,PR0
        13 000125   200116 220100                    LDX0    FPT_OPEN+36,,AUTO
        13 000126   100000 236110                    LDQ     0,X0,PR1
        13 000127   200013 756100                    STQ     DCB$,,AUTO

     1277     9061    1   TRY_OPEN:
     1278     9062    1       call CLEANUP(1);

   9062 13 000130   000007 236000 14    TRY_OPEN     LDQ     7
        13 000131   200231 756100                    STQ     FPT_CLOSE+31,,AUTO
        13 000132   000462 701000 13                 TSX1    CLEANUP
        13 000133   000000 011000                    NOP     0

     1279     9063    1       call M$OPEN(FPT_OPEN)   altret(REL_DCB);

   9063 13 000134   200052 630500                    EPPR0   FPT_OPEN,,AUTO
        13 000135   450000 713400                    CLIMB   alt,open
        13 000136   410400 401760                    pmme    nvectors=18
        13 000137   000200 702000 13                 TSX2    REL_DCB

     1280     9064    1       if DCB$->F$DCB.TYPE#          ~= 'Pn'     or

   9064 13 000140   200013 470500                    LDP0    DCB$,,AUTO
        13 000141   000025 720100                    LXL0    21,,PR0
        13 000142   000146 100000 12                 CMPX0   FPT_CLOSE_CONST+30
        13 000143   000200 601000 13                 TNZ     REL_DCB
        13 000144   000032 236100                    LDQ     26,,PR0
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:279  
        13 000145   777000 376003                    ANQ     -512,DU
        13 000146   003000 116003                    CMPQ    1536,DU
        13 000147   000200 601000 13                 TNZ     REL_DCB
        13 000150   000036 236100                    LDQ     30,,PR0
        13 000151   000777 376007                    ANQ     511,DL
        13 000152   000011 116007                    CMPQ    9,DL
        13 000153   000200 601000 13                 TNZ     REL_DCB

     1281     9065    1         DCB$->F$DCB.ORG#           ~= %RANDOM# or
     1282     9066    1         DCB$->F$DCB.ACS#           ~= %DS6#
     1283     9067    1       then goto REL_DCB;
     1284     9068
     1285     9069    1       if (SEGNODES.WORDS(0)+1023)/1024+1 ~= DCB$->F$DCB.IXTNSIZE#  or

   9069 13 000154   000000 471400 xsym               LDP1    VM_ADDREC$
        13 000155   100000 236100                    LDQ     0,,PR1
        13 000156   001777 036007                    ADLQ    1023,DL
        13 000157   002000 506007                    DIV     1024,DL
        13 000160   000001 036007                    ADLQ    1,DL
        13 000161   000041 116100                    CMPQ    33,,PR0
        13 000162   000200 601000 13                 TNZ     REL_DCB
        13 000163   100001 235100                    LDA     1,,PR1
        13 000164   000200 601000 13                 TNZ     REL_DCB
        13 000165   100000 236100                    LDQ     0,,PR1
        13 000166   000003 136007                    SBLQ    3,DL
        13 000167   100002 116100                    CMPQ    2,,PR1
        13 000170   000200 604400 13                 TMOZ    REL_DCB
        13 000171   100002 236100                    LDQ     2,,PR1
        13 000172   000001 136007                    SBLQ    1,DL
        13 000173   100003 116100                    CMPQ    3,,PR1
        13 000174   000200 604400 13                 TMOZ    REL_DCB

     1286     9070    1         SEGNODES.WORDS(1) ~= 0        or /*Mbz*/
     1287     9071    1         SEGNODES.WORDS(2) >= SEGNODES.WORDS(0)-3 or /*Uts*/
     1288     9072    1         SEGNODES.WORDS(3) >= SEGNODES.WORDS(2)-1 /*Toc*/
     1289     9073    1       then goto REL_DCB;
     1290     9074
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:280  
     1291     9075    1       call SETUP_SEG_NODES altret(REL_DCB);

   9075 13 000175   000316 701000 13                 TSX1    SETUP_SEG_NODES
        13 000176   000200 702000 13                 TSX2    REL_DCB

     1292     9076    1       return;

   9076 13 000177   000000 702200 xent               TSX2  ! X66_ARET

     1293     9077
     1294     9078    2       do while '0'b;

     1295     9079    2   REL_DCB:
     1296     9080    3           do case( NODE_CASE );

   9080 13 000200   200012 235100       REL_DCB      LDA     NODE_CASE,,AUTO
        13 000201   000003 115007                    CMPA    3,DL
        13 000202   000204 602005 13                 TNC     REL_DCB+4,AL
        13 000203   000273 710000 13                 TRA     USE_CONST
        13 000204   000207 710000 13                 TRA     s:9082
        13 000205   000221 710000 13                 TRA     s:9087
        13 000206   000245 710000 13                 TRA     s:9094

     1297     9081    3           case(0);

     1298     9082    3               NODE_CASE = NODE_CASE + 1;

   9082 13 000207   200012 054100                    AOS     NODE_CASE,,AUTO

     1299     9083    3               if B$JIT.ACCN = B$JIT.FACCN then goto REL_DCB;

   9083 13 000210   000000 470400 xsym               LDP0    B$JIT$
        13 000211   040100 106500                    CMPC    fill='040'O
        13 000212   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        13 000213   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
        13 000214   000200 600000 13                 TZE     REL_DCB

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:281  
     1300     9084    3               NODEACCT.ACCT# = B$JIT.ACCN;

   9084 13 000215   040100 100500                    MLR     fill='040'O
        13 000216   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        13 000217   200154 000010                    ADSC9   NODEACCT,,AUTO           cn=0,n=8

     1301     9085    3               goto TRY_OPEN;

   9085 13 000220   000130 710000 13                 TRA     TRY_OPEN

     1302     9086    3           case(1);

     1303     9087    3               NODE_CASE = NODE_CASE + 1;

   9087 13 000221   200012 054100                    AOS     NODE_CASE,,AUTO

     1304     9088    3               if B$JIT.ACCN = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT# or

   9088 13 000222   000000 236007 xsym               LDQ     M$LM,DL
        13 000223   000002 470400 14                 LDP0    2
        13 000224   000000 471500                    LDP1    0,,PR0
        13 000225   100000 473506                    LDP3    0,QL,PR1
        13 000226   000000 474400 xsym               LDP4    B$JIT$
        13 000227   040100 106500                    CMPC    fill='040'O
        13 000230   400001 000010                    ADSC9   1,,PR4                   cn=0,n=8
        13 000231   300020 000010                    ADSC9   16,,PR3                  cn=0,n=8
        13 000232   000200 600000 13                 TZE     REL_DCB
        13 000233   000000 236007 xsym               LDQ     M$LM,DL
        13 000234   100000 473506                    LDP3    0,QL,PR1
        13 000235   400006 237100                    LDAQ    6,,PR4
        13 000236   300020 117100                    CMPAQ   16,,PR3
        13 000237   000200 600000 13                 TZE     REL_DCB

     1305     9089    3                 B$JIT.FACCN = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#
     1306     9090    3               then goto REL_DCB;
     1307     9091    3               NODEACCT.ACCT# = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#;

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:282  
   9091 13 000240   000000 236007 xsym               LDQ     M$LM,DL
        13 000241   100000 473506                    LDP3    0,QL,PR1
        13 000242   300020 237100                    LDAQ    16,,PR3
        13 000243   200154 757100                    STAQ    NODEACCT,,AUTO

     1308     9092    3               goto TRY_OPEN;

   9092 13 000244   000130 710000 13                 TRA     TRY_OPEN

     1309     9093    3           case(2);

     1310     9094    3               NODE_CASE = NODE_CASE + 1;

   9094 13 000245   200012 054100                    AOS     NODE_CASE,,AUTO

     1311     9095    3               if B$JIT.ACCN = ':SYS'                            or

   9095 13 000246   000000 470400 xsym               LDP0    B$JIT$
        13 000247   040000 106500                    CMPC    fill='040'O
        13 000250   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        13 000251   000147 000004 12                 ADSC9   FPT_CLOSE_CONST+31       cn=0,n=4
        13 000252   000200 600000 13                 TZE     REL_DCB
        13 000253   040000 106500                    CMPC    fill='040'O
        13 000254   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
        13 000255   000147 000004 12                 ADSC9   FPT_CLOSE_CONST+31       cn=0,n=4
        13 000256   000200 600000 13                 TZE     REL_DCB
        13 000257   000000 236007 xsym               LDQ     M$LM,DL
        13 000260   000002 471400 14                 LDP1    2
        13 000261   100000 473500                    LDP3    0,,PR1
        13 000262   300000 474506                    LDP4    0,QL,PR3
        13 000263   040100 106400                    CMPC    fill='040'O
        13 000264   000147 000004 12                 ADSC9   FPT_CLOSE_CONST+31       cn=0,n=4
        13 000265   400020 000010                    ADSC9   16,,PR4                  cn=0,n=8
        13 000266   000200 600000 13                 TZE     REL_DCB

     1312     9096    3                 B$JIT.FACCN = ':SYS'                            or
     1313     9097    3                 ':SYS'      = dcbaddr(dcbnum(M$LM))->F$DCB.ACCT#
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:283  
     1314     9098    3               then goto REL_DCB;
     1315     9099    3               NODEACCT.ACCT# = ':SYS';

   9099 13 000267   000147 235000 12                 LDA     FPT_CLOSE_CONST+31
        13 000270   000010 236000 14                 LDQ     8
        13 000271   200154 757100                    STAQ    NODEACCT,,AUTO

     1316     9100    3               goto TRY_OPEN;

   9100 13 000272   000130 710000 13                 TRA     TRY_OPEN

     1317     9101    3           end;

     1318     9102    2   USE_CONST:
     1319     9103    2           call CLEANUP;

   9103 13 000273   000001 236000 14    USE_CONST    LDQ     1
        13 000274   200231 756100                    STQ     FPT_CLOSE+31,,AUTO
        13 000275   000462 701000 13                 TSX1    CLEANUP
        13 000276   000000 011000                    NOP     0

     1320     9104    2       end;

     1321     9105    1   NONAMES:
     1322     9106    1       call index(I, B$JIT.LANG, NATL_LIST.NATLS)

   9106 13 000277   200003 470500       NONAMES      LDP0    @NATL_LIST,,AUTO
        13 000300   000000 471400 xsym               LDP1    B$JIT$
        13 000301   000100 124500                    SCM     mask='000'O
        13 000302   000000 000005                    ADSC9   0,,PR0                   cn=0,n=5
        13 000303   100145 600001                    ADSC9   101,,PR1                 cn=3,n=1
        13 000304   200007 000100                    ARG     I,,AUTO
        13 000305   000307 606400 13                 TTN     s:9108
        13 000306   000310 710000 13                 TRA     s:9110

     1323     9107    2       whenaltreturn do;

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:284  
     1324     9108    2           I = 0;

   9108 13 000307   200007 450100                    STZ     I,,AUTO

     1325     9109    2       end;

     1326     9110    1       NODES$ = NATL_LIST.PARSE_NODES$(I);

   9110 13 000310   200003 470500                    LDP0    @NATL_LIST,,AUTO
        13 000311   200007 720100                    LXL0    I,,AUTO
        13 000312   000002 236110                    LDQ     2,X0,PR0
        13 000313   200004 471500                    LDP1    @NODES$,,AUTO
        13 000314   100000 756100                    STQ     0,,PR1

     1327     9111    1       return;

   9111 13 000315   000000 702200 xent               TSX2  ! X66_ARET

     1328     9112
     1329     9113        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:285  
     1330     9114
     1331     9115        /*I*    NAME:    VMD$SETUP_SEG_NODES
     1332     9116                PURPOSE: To fill the NODES_TO_USE$ array in with the
     1333     9117                         pointers to the required nodes.
     1334     9118
     1335     9119                DESCRIPTION:
     1336     9120                         The required node list is a structure of
     1337     9121                         multiple NN variables followed one after
     1338     9122                         another until the last entry which is
     1339     9123                         signified by a 0 length textc name.
     1340     9124
     1341     9125                         The nodes in memory consist of a similar
     1342     9126                         table with the offset of the node definition
     1343     9127                         from the start of the segment as the first
     1344     9128                         2 bytes (instead of the index in NODES_TO_USE$).
     1345     9129
     1346     9130                         If a required node name is not found, this
     1347     9131                         subroutine altreturns.  It assumes that the
     1348     9132                         basic validity tests for the parse nodes have
     1349     9133                         been made before it starts.
     1350     9134        */
     1351     9135
     1352     9136    1   SETUP_SEG_NODES: proc altret;

   9136 13 000316   200230 741300       SETUP_SEG_N* STX1  ! FPT_CLOSE+30,,AUTO

     1353     9137
     1354     9138
     1355     9139        /* *    NAME:          Nn
     1356     9140                PURPOSE:       To define a required node name.
     1357     9141
     1358     9142                DESCRIPTION:   This structure is passed to VMD$GETNODES.
     1359     9143                               The passed structure contains multiple
     1360     9144                               entries, following each other until an
     1361     9145                               entry with a name length of 0 is found.
     1362     9146
     1363     9147                               Each entry contains the index to store
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:286  
     1364     9148                               the pointer to this node in NODES_TO_USE$
     1365     9149                               the length of the node name and the text
     1366     9150                               of the node name.
     1367     9151        */
     1368     9152    2   dcl 1  NN             caligned based(NN$),
     1369     9153        /**     The nodename entry we are looking up.  **/
     1370     9154    2         2  INDX        ubin(18) caligned,
     1371     9155    2         2  L           ubin(9)  caligned,
     1372     9156    2         2  NAME        char(NN.L)  caligned;
     1373     9157
     1374     9158
     1375     9159        /* *    NAME:          Nentry
     1376     9160                PURPOSE:       To define the available node names.
     1377     9161
     1378     9162                DESCRIPTION:   The memory resident version of the nodes
     1379     9163                               contains a pointer to the list of node
     1380     9164                               names (and their offsets) in the third word
     1381     9165                               of the nodes.  The half word at this offset
     1382     9166                               contains the number of names in the list.
     1383     9167                               The name/offset table begins 2 bytes after
     1384     9168                               the number of names in the list.
     1385     9169
     1386     9170                               For each name in the list, the nentry
     1387     9171                               structure is used to locate the name of the
     1388     9172                               node and its offset from the beginning of
     1389     9173                               the node segment.
     1390     9174        */
     1391     9175    2   dcl 1  NENTRY         caligned based(CN$),
     1392     9176        /**     The node position table entry          **/
     1393     9177    2         2  OFFSET      ubin(18) caligned, /** Offset of node   **/
     1394     9178    2         2  L           ubin(9)  caligned, /** Length of name   **/
     1395     9179    2         2  NAME        char(NENTRY.L)  caligned;
     1396     9180
     1397     9181    2   dcl  NN$               ptr;             /**  Pointer to nn entry we need.   */
     1398     9182    2   dcl  SN$               ptr;             /**  Start of nentry table          */
     1399     9183    2   dcl  CN$               ptr;             /**  Current nentry                 */
     1400     9184
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:287  
     1401     9185    2   dcl  INDX              sbin;
     1402     9186    2   dcl  I                 sbin;
     1403     9187    2   dcl  NLEN              sbin;            /** Number of names in nentry       */
     1404     9188
     1405     9189        /**************************************************************/
     1406     9190        /**                    P r o c e d u r e                     **/
     1407     9191        /**************************************************************/
     1408     9192
     1409     9193    2       NN$ = addr(NODENAMES);             /** Names of nodes we must locate   */

   9193 13 000317   200006 236100                    LDQ     @NODENAMES,,AUTO
        13 000320   200231 756100                    STQ     NN$,,AUTO

     1410     9194
     1411     9195        /**  Now look at the nodes we have read           */
     1412     9196    2       SN$ = pincrw( ADDR(SEGNODES), SEGNODES.WORDS(3) );

   9196 13 000321   000000 470400 xsym               LDP0    VM_ADDREC$
        13 000322   000003 236100                    LDQ     3,,PR0
        13 000323   000022 736000                    QLS     18
        13 000324   000000 036000 xsym               ADLQ    VM_ADDREC$
        13 000325   200232 756100                    STQ     SN$,,AUTO

     1413     9197        /**  Now we are pointing at the names and offsets of the nodes
     1414     9198             that we have just read in.                                    **/
     1415     9199    2       NLEN = SN$->NENTRY.OFFSET;         /** Total number of definitions    **/

   9199 13 000326   200232 471500                    LDP1    SN$,,AUTO
        13 000327   000100 101500                    MRL     fill='000'O
        13 000330   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
        13 000331   200236 000004                    ADSC9   NLEN,,AUTO               cn=0,n=4

     1416     9200    2       SN$  = pincrc(SN$,2);              /** Point at first definition      **/

   9200 13 000332   400000 036007                    ADLQ    -131072,DL
        13 000333   200232 756100                    STQ     SN$,,AUTO

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:288  
     1417     9201
     1418     9202    3       do while( NN.L > 0  );

   9202 13 000334   200231 471500                    LDP1    NN$,,AUTO
        13 000335   000100 101500                    MRL     fill='000'O
        13 000336   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        13 000337   200240 000004                    ADSC9   NLEN+2,,AUTO             cn=0,n=4
        13 000340   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000341   000000 116003                    CMPQ    0,DU
        13 000342   000436 600000 13                 TZE     s:9225

     1419     9203        /**  For each node that we need....      **/
     1420     9204    3           INDX = NN.INDX;

   9204 13 000343   200231 470500                    LDP0    NN$,,AUTO
        13 000344   000100 101500                    MRL     fill='000'O
        13 000345   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
        13 000346   200234 000004                    ADSC9   INDX,,AUTO               cn=0,n=4

     1421     9205    3           CN$ = SN$;

   9205 13 000347   200232 236100                    LDQ     SN$,,AUTO
        13 000350   200233 756100                    STQ     CN$,,AUTO

     1422     9206    3           I  = NLEN;

   9206 13 000351   200236 235100                    LDA     NLEN,,AUTO
        13 000352   200235 755100                    STA     I,,AUTO

     1423     9207
     1424     9208    3   LOOKUP:
     1425     9209    4           do while I > 0;

   9209 13 000353   000405 604400 13    LOOKUP       TMOZ    s:9218

     1426     9210        /**  Look through the names of the nodes that we have  **/
     1427     9211    4               if NENTRY.NAME = NN.NAME
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:289  

   9211 13 000354   200233 470500                    LDP0    CN$,,AUTO
        13 000355   000100 101500                    MRL     fill='000'O
        13 000356   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        13 000357   200240 000002                    ADSC9   NLEN+2,,AUTO             cn=0,n=2
        13 000360   200240 220100                    LDX0    NLEN+2,,AUTO
        13 000361   200231 471500                    LDP1    NN$,,AUTO
        13 000362   000100 101500                    MRL     fill='000'O
        13 000363   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        13 000364   200241 000002                    ADSC9   NLEN+3,,AUTO             cn=0,n=2
        13 000365   200241 221100                    LDX1    NLEN+3,,AUTO
        13 000366   040140 106540                    CMPC    fill='040'O
        13 000367   000000 600010                    ADSC9   0,,PR0                   cn=3,n=*X0
        13 000370   100000 600011                    ADSC9   0,,PR1                   cn=3,n=*X1
        13 000371   000407 600000 13                 TZE     FOUND

     1428     9212    4               then goto FOUND;
     1429     9213
     1430     9214    4               CN$ = pincrc(CN$,3+NENTRY.L);

   9214 13 000372   000100 101500                    MRL     fill='000'O
        13 000373   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        13 000374   200240 000004                    ADSC9   NLEN+2,,AUTO             cn=0,n=4
        13 000375   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000376   000020 736000                    QLS     16
        13 000377   600000 036007                    ADLQ    -65536,DL
        13 000400   200233 036100                    ADLQ    CN$,,AUTO
        13 000401   200233 756100                    STQ     CN$,,AUTO

     1431     9215    4               I = I - 1;

   9215 13 000402   000001 336007                    LCQ     1,DL
        13 000403   200235 056100                    ASQ     I,,AUTO

     1432     9216    4           end;

   9216 13 000404   000354 605400 13                 TPNZ    s:9211
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:290  

     1433     9217
     1434     9218    3           altreturn;                    /** Can't find a required node!  **/

   9218 13 000405   200230 221300                    LDX1  ! FPT_CLOSE+30,,AUTO
        13 000406   000000 702211                    TSX2  ! 0,X1

     1435     9219
     1436     9220    3   FOUND:
     1437     9221    3           NODES_TO_USE$( INDX ) = pincrw(addr(SEGNODES),NENTRY.OFFSET);

   9221 13 000407   000100 100500       FOUND        MLR     fill='000'O
        13 000410   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
        13 000411   200240 000004                    ADSC9   NLEN+2,,AUTO             cn=0,n=4
        13 000412   200240 220100                    LDX0    NLEN+2,,AUTO
        13 000413   000000 636010                    EAQ     0,X0
        13 000414   000000 036000 xsym               ADLQ    VM_ADDREC$
        13 000415   200234 722100                    LXL2    INDX,,AUTO
        13 000416   200014 756112                    STQ     NODES_TO_USE$,X2,AUTO

     1438     9222    3           NN$ = pincrc(NN$, 3 + NN.L);

   9222 13 000417   000100 101500                    MRL     fill='000'O
        13 000420   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        13 000421   200240 000004                    ADSC9   NLEN+2,,AUTO             cn=0,n=4
        13 000422   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000423   000020 736000                    QLS     16
        13 000424   600000 036007                    ADLQ    -65536,DL
        13 000425   200231 036100                    ADLQ    NN$,,AUTO
        13 000426   200231 756100                    STQ     NN$,,AUTO

     1439     9223    3       end;

   9223 13 000427   200231 471500                    LDP1    NN$,,AUTO
        13 000430   000100 101500                    MRL     fill='000'O
        13 000431   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        13 000432   200240 000004                    ADSC9   NLEN+2,,AUTO             cn=0,n=4
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:291  
        13 000433   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000434   000000 116003                    CMPQ    0,DU
        13 000435   000343 601000 13                 TNZ     s:9204

     1440     9224
     1441     9225    2       NODES$ = addr( NODES_TO_USE$ );

   9225 13 000436   200014 630500                    EPPR0   NODES_TO_USE$,,AUTO
        13 000437   200004 473500                    LDP3    @NODES$,,AUTO
        13 000440   300000 450500                    STP0    0,,PR3

     1442     9226                       /***********  Set the error message fid to this account  *******/
     1443     9227    2       call index(I,'.',ERRMSG_FID.NAME#);

   9227 13 000441   000000 236000 xsym               LDQ     ERRMSG_FID
        13 000442   000033 772000                    QRL     27
        13 000443   000000 620006                    EAX0    0,QL
        13 000444   000000 124440                    SCM     mask='000'O
        13 000445   000000 200010 xsym               ADSC9   ERRMSG_FID               cn=1,n=*X0
        13 000446   000011 000001 14                 ADSC9   9                        cn=0,n=1
        13 000447   200235 000100                    ARG     I,,AUTO

     1444     9228    2       substr(ERRMSG_FID.NAME#,I+1) = NODEACCT.ACCT#;

   9228 13 000450   000000 636010                    EAQ     0,X0
        13 000451   000022 772000                    QRL     18
        13 000452   200235 136100                    SBLQ    I,,AUTO
        13 000453   777777 621006                    EAX1    -1,QL
        13 000454   200235 235100                    LDA     I,,AUTO
        13 000455   040045 100500                    MLR     fill='040'O
        13 000456   200154 000010                    ADSC9   NODEACCT,,AUTO           cn=0,n=8
        13 000457   000000 400011 xsym               ADSC9   ERRMSG_FID,A             cn=2,n=*X1

     1445     9229    2       return;

   9229 13 000460   200230 221300                    LDX1  ! FPT_CLOSE+30,,AUTO
        13 000461   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:292  

     1446     9230
     1447     9231    2   end SETUP_SEG_NODES;
     1448     9232        %eject;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:293  
     1449     9233
     1450     9234        /*I*    NAME:       VMD$CLEANUP
     1451     9235                PURPOSE:    To close the current dcb and optionally
     1452     9236                            release it.
     1453     9237
     1454     9238                DESCRIPTION:   The only parameter indicates that the
     1455     9239                               dcb in FPT_OPEN.V.DCB# is only to be
     1456     9240                               closed if its value is not equal to 0.
     1457     9241
     1458     9242                               The dcb in FPT_OPEN.V.DCB# is closed if
     1459     9243                               it is open and optionally released.
     1460     9244        */
     1461     9245    1   CLEANUP: proc(CLOSEONLY);

   9245 13 000462   200230 741300       CLEANUP      STX1  ! FPT_CLOSE+30,,AUTO

     1462     9246
     1463     9247    2   dcl  CLOSEONLY      sbin;
     1464     9248
     1465     9249    3       if FPT_OPEN.V.DCB# ~= 0 then do;

   9249 13 000463   200116 220100                    LDX0    FPT_OPEN+36,,AUTO
        13 000464   000540 600000 13                 TZE     s:9264

     1466     9250    4           if dcbaddr( FPT_OPEN.V.DCB# )->F$DCB.FCD#='1'b then do;

   9250 13 000465   000002 470400 14                 LDP0    2
        13 000466   000000 471500                    LDP1    0,,PR0
        13 000467   100000 473510                    LDP3    0,X0,PR1
        13 000470   300031 236100                    LDQ     25,,PR3
        13 000471   020000 316007                    CANQ    8192,DL
        13 000472   000511 600000 13                 TZE     s:9256

     1467     9251    4               FPT_CLOSE = FPT_CLOSE_CONST;

   9251 13 000473   000100 100400                    MLR     fill='000'O
        13 000474   000110 000170 12                 ADSC9   FPT_CLOSE_CONST          cn=0,n=120
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:294  
        13 000475   200172 000170                    ADSC9   FPT_CLOSE,,AUTO          cn=0,n=120

     1468     9252    4               FPT_CLOSE.V_ = vector(FPT_CLOSE.V);

   9252 13 000476   000012 235000 14                 LDA     10
        13 000477   200240 452500                    STP2    NLEN+2,,AUTO
        13 000500   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000501   000224 036003                    ADLQ    148,DU
        13 000502   200172 757100                    STAQ    FPT_CLOSE,,AUTO

     1469     9253    4               FPT_CLOSE.V.DCB# = FPT_OPEN.V.DCB#;

   9253 13 000503   200224 740100                    STX0    FPT_CLOSE+26,,AUTO

     1470     9254    5               call M$CLOSE( FPT_CLOSE ) whenaltreturn do; ; end;

   9254 13 000504   200172 630500                    EPPR0   FPT_CLOSE,,AUTO
        13 000505   450001 713400                    CLIMB   alt,close
        13 000506   406000 401760                    pmme    nvectors=13
        13 000507   000511 702000 13                 TSX2    s:9256
        13 000510   000511 710000 13                 TRA     s:9256

     1471     9255    4           end;

     1472     9256    3           if addr(CLOSEONLY) ~= addr(nil) and CLOSEONLY ~= 0

   9256 13 000511   200231 236100                    LDQ     @CLOSEONLY,,AUTO
        13 000512   000001 116000 14                 CMPQ    1
        13 000513   000521 600000 13                 TZE     s:9259
        13 000514   200231 470500                    LDP0    @CLOSEONLY,,AUTO
        13 000515   000000 235100                    LDA     0,,PR0
        13 000516   000521 600000 13                 TZE     s:9259

     1473     9257    3           then return;

   9257 13 000517   200230 221300                    LDX1  ! FPT_CLOSE+30,,AUTO
        13 000520   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:295  

     1474     9258
     1475     9259    3           RELDCB  = RELDCB_CONST;

   9259 13 000521   000100 100400                    MLR     fill='000'O
        13 000522   000102 000020 12                 ADSC9   RELDCB_CONST             cn=0,n=16
        13 000523   200166 000020                    ADSC9   RELDCB,,AUTO             cn=0,n=16

     1476     9260    3           RELDCB.V_ = vector(RELDCB.V);

   9260 13 000524   000005 235000 14                 LDA     5
        13 000525   200240 452500                    STP2    NLEN+2,,AUTO
        13 000526   200240 236100                    LDQ     NLEN+2,,AUTO
        13 000527   000170 036003                    ADLQ    120,DU
        13 000530   200166 757100                    STAQ    RELDCB,,AUTO

     1477     9261    3           RELDCB.V.DCB# = FPT_OPEN.V.DCB#;

   9261 13 000531   200116 220100                    LDX0    FPT_OPEN+36,,AUTO
        13 000532   200170 740100                    STX0    RELDCB+2,,AUTO

     1478     9262    4           call M$RELDCB( RELDCB ) whenaltreturn do; ; end;

   9262 13 000533   200166 630500                    EPPR0   RELDCB,,AUTO
        13 000534   460003 713400                    CLIMB   alt,+24579
        13 000535   400000 401760                    pmme    nvectors=1
        13 000536   000540 702000 13                 TSX2    s:9264
        13 000537   000540 710000 13                 TRA     s:9264

     1479     9263    3       end;

     1480     9264    2       FPT_OPEN.V.DCB# = 0;

   9264 13 000540   000000 220003                    LDX0    0,DU
        13 000541   200116 740100                    STX0    FPT_OPEN+36,,AUTO

     1481     9265    2       return;
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:296  

   9265 13 000542   200230 221300                    LDX1  ! FPT_CLOSE+30,,AUTO
        13 000543   000001 702211                    TSX2  ! 1,X1

OPEN_NODEDEFS
 Sect OctLoc
  12     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
  12     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  12     044*  000000 000062   000000 002001   252525 000011   000040 252520    ...2......... ..
  12     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  12     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
  12     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  12     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
  12     070   000000 000000   ****** ******                                    ........

GETDCB_CONST
 Sect OctLoc
  12     072   000001 777640   000100 006000   000001 177640   000106 006000    .....@.......F..
  12     076   000000 177640   000000 006014   000000 000000   000000 000000    ................

RELDCB_CONST
 Sect OctLoc
  12     102   000001 777640   000104 006000   000000 000000   000000 000000    .....D..........

NODEKEY
 Sect OctLoc
  12     106   004116 117104   105*** ******                                    .NODE...

FPT_CLOSE_CONST
 Sect OctLoc
  12     110   000003 777640   000142 006000   000000 177640   000000 006014    .....b..........
  12     114   000000 177640   000000 006014   000000 177640   000000 006014    ................
  12     140*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
  12     144   000220 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:297  
  12     146   120156 040040   072123 131123                                    Pn  :SYS

(unnamed)
 Sect OctLoc
  14     000   000040 040040   000000 006014   000000 006003   000025 777640    .   ............
  14     004   000007 777640   000001 777640   000000 000001   000006 006000    ................
  14     010   040040 040040   056040 040040   000003 777640                        .   ....
     1482     9266
     1483     9267    2   end CLEANUP;
     1484     9268    1   END VMD$GETNODES;

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:298  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMD$GETNODES.
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:299  

 **** Variables and constants ****

  ****  Section 012 RoData VMD$GETNODES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   110-0-0/d STRC(1080)  r     1 FPT_CLOSE_CONST           72-0-0/d STRC(288)   r     1 GETDCB_CONST
   106-0-0/c STRC(45)    r     1 NODEKEY                    0-0-0/d STRC(2088)  r     1 OPEN_NODEDEFS
   102-0-0/d STRC(144)   r     1 RELDCB_CONST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   231-0-0/w PTR         r     1 @CLOSEONLY                 3-0-0/w PTR         r     1 @NATL_LIST
     5-0-0/w PTR         r     1 @NODEFID                   6-0-0/w PTR         r     1 @NODENAMES
     4-0-0/w PTR         r     1 @NODES$                   10-0-0/c CHAR        r     1 CH
    *0-0-0/w SBIN        r     1 CLOSEONLY                233-0-0/w PTR         r     1 CN$
    13-0-0/w PTR         r     1 DCB$                     172-0-0/d STRC(1080)  r     1 FPT_CLOSE
    52-0-0/d STRC(2088)  r     1 FPT_OPEN                 156-0-0/d STRC(288)   r     1 GETDCB
    11-0-0/w SBIN        r     1 GOT_SEG                    7-0-0/w UBIN        r     1 I
   235-0-0/w SBIN        r     1 I                        234-0-0/w SBIN        r     1 INDX
    *0-0-0/w STRC(252)   r     1 NATL_LIST                236-0-0/w SBIN        r     1 NLEN
   231-0-0/w PTR         r     1 NN$                      154-0-0/c STRC(72)    r     1 NODEACCT
    *0-0-0/c ASTR(9)     r     1 NODEFID                  144-0-0/c STRC(288)   r     1 NODENAME
    *0-0-0/w ASTR(27)    r     1 NODENAMES                 *0-0-0/w PTR         r     1 NODES$
    14-0-0/w PTR         r     1 NODES_TO_USE$(0:29)
    12-0-0/w SBIN        r     1 NODE_CASE                166-0-0/d STRC(144)   r     1 RELDCB
   232-0-0/w PTR         r     1 SN$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:300  
     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR         r     1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/c ACHR              1 CHARI
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LM                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(27)    r     1 NENTRY
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:301  
     0-0-0/c ASTR(27)    r     1 NN                         0-0-0/d STRC(3636)  r     1 SEGNODES
     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMD$GETNODES requires 356 words for executable code.
   Procedure VMD$GETNODES requires 162 words of local(AUTO) storage.

    No errors detected in file VMD$SUBR.:VMB6TSI    .
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:302  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:303  
          MINI XREF LISTING

B$JIT.ACCN
       353**DCL      9083>>IF       9084>>ASSIGN   9088>>IF       9095>>IF
B$JIT.CPFLAGS1.SLEAZE
       447**DCL       447--REDEF
B$JIT.ERR.MID
       354**DCL       354--REDEF
B$JIT.FACCN
       353**DCL      9043>>ASSIGN   9083>>IF       9088>>IF       9095>>IF
B$JIT.JRESPEAK
       515**DCL       516--REDEF
B$JIT.LANG
       489**DCL      9032>>ASSIGN   9106>>CALLBLT
B$JIT.ORIGINATOR_PORT.FROM_CR
       624**DCL       624--REDEF     625--REDEF
B$JIT.PNR
       528**DCL       528--REDEF
B$JIT.SWITCH
       441**DCL      9045>>IF
B$JIT.TSLINE
       622**DCL       623--REDEF
B$JIT$
      8203**DCL       348--IMP-PTR  9032>>ASSIGN   9043>>ASSIGN   9045>>IF       9083>>IF       9083>>IF
      9084>>ASSIGN   9088>>IF       9088>>IF       9095>>IF       9095>>IF       9106>>CALLBLT
CH
      8469**DCL      9032<<ASSIGN   9039>>IF       9040>>ASSIGN
CLEANUP
      9245**PROC     9062--CALL     9103--CALL
CLOSEONLY IN PROCEDURE CLEANUP
      9247**DCL      9245--PROC     9256--IF       9256>>IF
CN$ IN PROCEDURE SETUP_SEG_NODES
      9183**DCL      9175--IMP-PTR  9205<<ASSIGN   9211>>IF       9211>>IF       9214<<ASSIGN   9214>>ASSIGN
      9214>>ASSIGN   9221>>ASSIGN
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:304  
DCB$
      8473**DCL      9060<<ASSIGN   9064>>IF       9064>>IF       9064>>IF       9069>>IF
ERRMSG_FID.L#
      8272**DCL      8272--IMP-SIZ  9227>>CALLBLT  9228>>ASSIGN
ERRMSG_FID.NAME#
      8272**DCL      9227>>CALLBLT  9228<<ASSIGN
F$DCB.ACCT#
      8532**DCL      9046>>ASSIGN   9088>>IF       9088>>IF       9091>>ASSIGN   9095>>IF
F$DCB.ACS#
      8540**DCL      9064>>IF
F$DCB.ACTPOS
      8548**DCL      8548--REDEF
F$DCB.ARS#
      8522**DCL      8522--REDEF
F$DCB.ATTR
      8541**DCL      8542--REDEF
F$DCB.BORROW
      8556**DCL      8556--REDEF    8556--REDEF    8556--REDEF
F$DCB.DCBNAME.L
      8570**DCL      8570--IMP-SIZ
F$DCB.EOMCHAR#
      8526**DCL      8526--REDEF
F$DCB.FCD#
      8535**DCL      9250>>IF
F$DCB.FLDID
      8551**DCL      8551--REDEF
F$DCB.FORM$
      8545**DCL      8545--REDEF
F$DCB.FSECT
      8561**DCL      8561--REDEF
F$DCB.FSN#
      8538**DCL      8538--REDEF    8538--REDEF    8539--REDEF
F$DCB.HEADER$
      8544**DCL      8544--REDEF
F$DCB.IXTNSIZE#
      8542**DCL      8542--REDEF    9069>>IF
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:305  
F$DCB.LASTSTA$
      8531**DCL      8531--REDEF
F$DCB.LVL
      8557**DCL      8557--REDEF
F$DCB.NAME#.C
      8532**DCL      8532--REDEF
F$DCB.NOEOF
      8554**DCL      8554--REDEF
F$DCB.NRECS#
      8543**DCL      8543--REDEF
F$DCB.NRECX
      8562**DCL      8562--REDEF
F$DCB.OHDR
      8554**DCL      8554--REDEF
F$DCB.ORG#
      8537**DCL      8537--REDEF    9064>>IF
F$DCB.PRECNO
      8560**DCL      8560--REDEF
F$DCB.RCSZ
      8566**DCL      8566--REDEF
F$DCB.RES#
      8533**DCL      8533--REDEF
F$DCB.SETX
      8545**DCL      8545--REDEF
F$DCB.TAB$
      8545**DCL      8545--REDEF
F$DCB.TDA
      8559**DCL      8560--REDEF
F$DCB.TYPE#
      8533**DCL      9064>>IF
F$DCB.WSN#
      8533**DCL      8533--REDEF
FOUND IN PROCEDURE SETUP_SEG_NODES
      9221**LABEL    9212--GOTO
FPT_CLOSE
      9006**DCL      9251<<ASSIGN   9254<>CALL
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:306  
FPT_CLOSE.SN_
      9006**DCL      9006--REDEF
FPT_CLOSE.UTL_
      9007**DCL      9007--REDEF
FPT_CLOSE.V
      9011**DCL      9252--ASSIGN
FPT_CLOSE.V.DCB#
      9012**DCL      9253<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      9021**DCL      9021--REDEF
FPT_CLOSE.V.TYPE#
      9019**DCL      9019--REDEF
FPT_CLOSE.V.XTNSIZE#
      9016**DCL      9016--REDEF    9018--REDEF
FPT_CLOSE.V_
      9006**DCL      9252<<ASSIGN
FPT_CLOSE_CONST
      8963**DCL      9251>>ASSIGN
FPT_CLOSE_CONST.SN_
      8963**DCL      8963--REDEF
FPT_CLOSE_CONST.UTL_
      8964**DCL      8964--REDEF
FPT_CLOSE_CONST.V
      8968**DCL      8963--DCLINIT
FPT_CLOSE_CONST.V.EXPIRE#
      8978**DCL      8978--REDEF
FPT_CLOSE_CONST.V.TYPE#
      8976**DCL      8976--REDEF
FPT_CLOSE_CONST.V.XTNSIZE#
      8973**DCL      8973--REDEF    8975--REDEF
FPT_OPEN
      8759**DCL      9050<<ASSIGN   9063<>CALL
FPT_OPEN.ACCT_
      8763**DCL      9053<<ASSIGN
FPT_OPEN.ACSVEH_
      8761**DCL      8762--REDEF
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:307  
FPT_OPEN.ALTKEYS_
      8767**DCL      8768--REDEF    8768--REDEF
FPT_OPEN.HDR_
      8766**DCL      8767--REDEF
FPT_OPEN.NAME_
      8760**DCL      9052<<ASSIGN
FPT_OPEN.TAB_
      8765**DCL      8766--REDEF
FPT_OPEN.UHL_
      8759**DCL      8760--REDEF    8760--REDEF
FPT_OPEN.V
      8768**DCL      9051--ASSIGN
FPT_OPEN.V.DCB#
      8768**DCL      9057--ASSIGN   9060--ASSIGN   9249>>IF       9250--IF       9253>>ASSIGN   9261>>ASSIGN
      9264<<ASSIGN
FPT_OPEN.V.FSN#
      8799**DCL      8799--REDEF    8799--REDEF
FPT_OPEN.V_
      8759**DCL      9051<<ASSIGN
FPT_OPEN.WSN_
      8765**DCL      8765--REDEF
GETDCB
      8875**DCL      9055<<ASSIGN   9059<>CALL
GETDCB.DCBNUM_
      8875**DCL      9057<<ASSIGN
GETDCB.V
      8876**DCL      9056--ASSIGN
GETDCB.V_
      8875**DCL      9056<<ASSIGN
GETDCB_CONST
      8859**DCL      9055>>ASSIGN
GETDCB_CONST.V
      8860**DCL      8859--DCLINIT
GOT_SEG
      8471**DCL      9033<<ASSIGN
I
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:308  
      8468**DCL      8470--IMP-SIZ  9106<<CALLBLT  9108<<ASSIGN   9110>>ASSIGN
I IN PROCEDURE SETUP_SEG_NODES
      9186**DCL      9206<<ASSIGN   9209>>DOWHILE  9215<<ASSIGN   9215>>ASSIGN   9227<<CALLBLT  9228>>ASSIGN
INDX IN PROCEDURE SETUP_SEG_NODES
      9185**DCL      9204<<ASSIGN   9221>>ASSIGN
M$CLOSE
      6116**DCL-ENT  9254--CALL
M$GETDCB
      6122**DCL-ENT  9059--CALL
M$LM
      8464**DCL      9046--ASSIGN   9088--IF       9088--IF       9091--ASSIGN   9095--IF
M$OPEN
      6116**DCL-ENT  9063--CALL
M$RELDCB
      6122**DCL-ENT  9262--CALL
NATL_LIST
      8443**DCL        25--PROC
NATL_LIST.NATLS
      8444**DCL      9106>>CALLBLT
NATL_LIST.PARSE_NODES$
      8445**DCL      9110>>ASSIGN
NENTRY.L IN PROCEDURE SETUP_SEG_NODES
      9178**DCL      9179--IMP-SIZ  9211>>IF       9214>>ASSIGN
NENTRY.NAME IN PROCEDURE SETUP_SEG_NODES
      9179**DCL      9211>>IF
NENTRY.OFFSET IN PROCEDURE SETUP_SEG_NODES
      9177**DCL      9199>>ASSIGN   9221>>ASSIGN
NLEN IN PROCEDURE SETUP_SEG_NODES
      9187**DCL      9199<<ASSIGN   9206>>ASSIGN
NN.INDX IN PROCEDURE SETUP_SEG_NODES
      9154**DCL      9204>>ASSIGN
NN.L IN PROCEDURE SETUP_SEG_NODES
      9155**DCL      9156--IMP-SIZ  9202>>DOWHILE  9211>>IF       9222>>ASSIGN
NN.NAME IN PROCEDURE SETUP_SEG_NODES
      9156**DCL      9211>>IF
NN$ IN PROCEDURE SETUP_SEG_NODES
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:309  
      9181**DCL      9152--IMP-PTR  9193<<ASSIGN   9202>>DOWHILE  9204>>ASSIGN   9211>>IF       9211>>IF
      9222<<ASSIGN   9222>>ASSIGN   9222>>ASSIGN
NODEACCT
      8843**DCL      9053--ASSIGN
NODEACCT.ACCT#
      8843**DCL      9043<<ASSIGN   9046<<ASSIGN   9084<<ASSIGN   9091<<ASSIGN   9099<<ASSIGN   9228>>ASSIGN
NODEFID
      8456**DCL        25--PROC     9035--IF       9038>>ASSIGN
NODEFID.L#
      8456**DCL      8456--IMP-SIZ  9038>>ASSIGN
NODEKEY
      8936**DCL      8859--DCLINIT
NODENAME
      8829**DCL      9038<<ASSIGN   9052--ASSIGN
NODENAME.L#
      8829**DCL      9040>>ASSIGN   9041<<ASSIGN   9041>>ASSIGN
NODENAME.NAME#
      8829**DCL      9040<<ASSIGN
NODENAMES
      8459**DCL        25--PROC     9035--IF       9193--ASSIGN
NODENAMES.L
      8461**DCL      8462--IMP-SIZ
NODES$
      8449**DCL        25--PROC     9110<<ASSIGN   9225<<ASSIGN
NODES_TO_USE$
      8502**DCL      9221<<ASSIGN   9225--ASSIGN
NODE_CASE
      8472**DCL      9034<<ASSIGN   9047<<ASSIGN   9080>>DOCASE   9082<<ASSIGN   9082>>ASSIGN   9087<<ASSIGN
      9087>>ASSIGN   9094<<ASSIGN   9094>>ASSIGN
NONAMES
      9106**LABEL    9036--GOTO
OPEN_NODEDEFS
      8649**DCL      9050>>ASSIGN
OPEN_NODEDEFS.ACSVEH_
      8651**DCL      8652--REDEF
OPEN_NODEDEFS.ALTKEYS_
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:310  
      8657**DCL      8658--REDEF    8658--REDEF
OPEN_NODEDEFS.HDR_
      8656**DCL      8657--REDEF
OPEN_NODEDEFS.TAB_
      8655**DCL      8656--REDEF
OPEN_NODEDEFS.UHL_
      8649**DCL      8650--REDEF    8650--REDEF
OPEN_NODEDEFS.V
      8658**DCL      8649--DCLINIT
OPEN_NODEDEFS.V.FSN#
      8689**DCL      8689--REDEF    8689--REDEF
OPEN_NODEDEFS.WSN_
      8655**DCL      8655--REDEF
RELDCB
      8906**DCL      9259<<ASSIGN   9262<>CALL
RELDCB.V
      8906**DCL      9260--ASSIGN
RELDCB.V.DCB#
      8906**DCL      9261<<ASSIGN
RELDCB.V_
      8906**DCL      9260<<ASSIGN
RELDCB_CONST
      8892**DCL      9259>>ASSIGN
RELDCB_CONST.V
      8892**DCL      8892--DCLINIT
REL_DCB
      9080**LABEL    9063--CALLALT  9067--GOTO     9073--GOTO     9075--CALLALT  9083--GOTO     9090--GOTO
      9098--GOTO
SEGNODES
      8475**DCL      9196--ASSIGN   9221--ASSIGN
SEGNODES.WORDS
      8476**DCL      8477--REDEF    9069>>IF       9069>>IF       9069>>IF       9069>>IF       9069>>IF
      9069>>IF       9196>>ASSIGN
SETUP_SEG_NODES
      9136**PROC     9075--CALL
SN$ IN PROCEDURE SETUP_SEG_NODES
PL6.E3A0      #009=VMD$GETNODES File=VMD$SUBR.:VMB6TSI                           WED 08/20/97 15:14 Page:311  
      9182**DCL      9196<<ASSIGN   9199>>ASSIGN   9200<<ASSIGN   9200>>ASSIGN   9205>>ASSIGN
TRY_OPEN
      9062**LABEL    9085--GOTO     9092--GOTO     9100--GOTO
USE_CONST
      9103**LABEL    9059--CALLALT
VM_ADDREC$
      8128**DCL      8475--IMP-PTR  9069>>IF       9069>>IF       9069>>IF       9069>>IF       9069>>IF
      9069>>IF       9196>>ASSIGN   9196>>ASSIGN   9221>>ASSIGN
X$STRING.SIZ
      8118**DCL      8119--IMP-SIZ
