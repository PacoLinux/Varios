/*M*  CP6ARC - packs files together with file identifiers
between each file, and record identifiers between each record. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P*
    NAME: CP6ARC
    PURPOSE:
          To group files together into one packed file.
    DESCRIPTION:
          This program reads all files which match the wildcard pattern
          given, and combines them together into one file. Before the
          first line of each packed file, the filename and the fit
          will be placed, so that these files may later be unpacked
          back into their original forms. If the file being packed
          is a keyed file, then the keys will get packed also. CP6ARC
          may also be called with a source file which contains the
          list of filenames that needs to be "packed"; this is
          optional with the option (STD).
*/
CP6ARC: PROC MAIN;
 
/* subs */
%SUB FILE_WITH_FILES = 57;
%SUB OVER_FILE = 1;
%SUB ON_FILE = 2;
%SUB TO_FILE = 3;
%SUB STD_OPT = 11;
%SUB COMP_OPT = 12;
%SUB THE_FILENAME = 1;
%SUB THE_FIT = 2;
%SUB THE_KEY = 3;
%SUB THE_REC = 4;
%SUB CONT_REC = 5;
%SUB CONT_KEY = 6;
%SUB CONT_FIT = 7;
%SUB CONT_FILENAME = 8;
%SUB NO_OP = 9;
%SUB THE_EOF = 10;
%SUB TRUE = '1'B;
%SUB FALSE = '0'B;
%SUB MAX_BUFFER = 81920;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XUW_MACRO_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE B$JIT_C;
 
%INCLUDE B_ERRORS_C;
%INCLUDE FM$FIT;
%INCLUDE B$TABLES_C;
 
%XUW_WILDCARD(INPUT=WC_INPUT,PATTERN=WC_PATTERN);
%XUW_ENTRIES;
%FM$FIT;
%B$SR_NON_BLANK;
 
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
DCL M$FILE DCB;
 
%FPT_OPEN(FPTN=OPEN_STD,
          STCLASS=STATIC,
          DCB = M$SI,
          NAME = FIRST_NAME,
          ACCT = THE_ACCT,
          PASS = THE_PASS,
          FPARAM = FIT_BUFFER);
%FPT_OPEN (FPTN=OPEN_FIRST_SI,
           DCB=M$SI,
           NAME=FIRST_NAME,
           THISF=YES,
           FPARAM = FIT_BUFFER,
           NXTF=YES);
%FPT_OPEN (FPTN=OPEN_NEXT_SI,
           DCB=M$SI,
           FPARAM = FIT_BUFFER,
           NXTF=YES);
%FPT_OPEN (FPTN=OPEN_PACK_FILE,
           DCB=M$OU);
%FPT_OPEN(FPTN=OPEN_FILE_W_FILES,
          DCB=M$FILE,
          NAME=FILE_W_FILES,
          ASN=FILE);
%FPT_READ(FPTN=READ_FILE_W_FILES,
          DCB=M$FILE,
          BUF=CURRENT_FILENAME);
%FPT_WRITE (FPTN=WRITE_ERROR,
            DCB=M$DO);
%FPT_WRITE(FPTN=WRITE_CHAP,
           DCB = M$DO,
           BUF = NAME_OUT.TEXT);
%FPT_READ (FPTN=READ_SI,
           DCB=M$SI,
           BUF=NIL);
%FPT_WRITE (FPTN=WRITE_OU,
            DCB=M$OU,
            BUF=NIL);
%FPT_CLOSE(FPTN=CLOSE_FILE_W_FILES,
           DCB=M$FILE);
%FPT_CLOSE (FPTN=CLOSE_SI,
            DCB=M$SI);
%FPT_CLOSE (FPTN=CLOSE_OU,
            DCB=M$OU,
            RELG=YES,
            DISP=SAVE);
%FPT_ERRMSG (BUF=ERROR_BUFFER,
             CODE=CP6ARC_PCB.ERROR,
             OUTDCB1=M$DO);
%FPT_FID(FPTN=SETUP_NAME,
         STCLASS=STATIC,
         ACCT = THE_ACCT,
         ASN = "OPEN_STD.V.ASN#",
         NAME = FIRST_NAME,
         PASS = THE_PASS,
         RES = "OPEN_STD.V.RES#");
%VLP_ACCT(FPTN=THE_ACCT,STCLASS=STATIC);
%VLP_PASS(FPTN=THE_PASS,STCLASS=STATIC);
 
    %FPT_GDS       (FPTN=GET_DATA,
                         RESULTS=DATA_VECTOR,
                         SEGSIZE=40960);
 
          %VLP_VECTOR (FPTN=DATA_VECTOR);
 
DCL 1 NAME_OUT STATIC,
      2 L UBIN(9) CALIGNED,
      2 TEXT CHAR(31);
 
          %VLP_VECTOR (FPTN=INPUT_VECTOR);
          %VLP_VECTOR (FPTN=OUTPUT_VECTOR);
 
DCL CHAR0 CHAR(16384) BASED;
DCL CHAR1 UBIN BYTE CALIGNED BASED;
DCL INPUT_BUFFER$ PTR STATIC SYMDEF;
DCL OUTPUT_BUFFER$ PTR STATIC SYMDEF;
DCL FIT_BUFFER CHAR(4096) STATIC;
DCL FIT_BUF(0:4095) REDEF FIT_BUFFER UBIN BYTE CALIGNED;
DCL DVBYTE_BUFFER BIT(9) STATIC;
DCL RECTYPE UBIN(9) UNAL;
DCL IN_BUF_SZ UBIN;
DCL OUT_BUF_SZ UBIN;
DCL THE_REST UBIN;
DCL THE_REST_CH REDEF THE_REST CHAR(4);
DCL WHATS_LEFT UBIN;
DCL WHATS_LEFT_CH REDEF WHATS_LEFT CHAR(4);
DCL HOW_MUCH_LEFT UBIN;
DCL HOW_MUCH_LEFT_CH REDEF HOW_MUCH_LEFT CHAR(4);
DCL ERROR_BUFFER CHAR(120) STATIC;
 
DCL FIRST_NAME_LEN UBIN WORD;
DCL 1 FIRST_NAME STATIC,
      2 L# UBIN(9) INIT(31) UNAL,
      2 NAME# CHAR(31) INIT(' ');
DCL 1 FILE_W_FILES STATIC,
      2 L# UBIN(9) INIT(31) UNAL,
      2 NAME# CHAR(31) INIT(' ');
DCL FILE_W_FILES_LEN UBIN WORD;
DCL CURRENT_FILENAME CHAR(256) STATIC;
DCL 1 KEY_BUFFER STATIC ALIGNED,
      2 SZ UNAL UBIN BYTE INIT(255),
      2 SZ_CH REDEF SZ CHAR(1),
      2 KEY CHAR(255) UNAL;
DCL 1 PACK_FID STATIC,
      2 L# UBIN(9) INIT(31) UNAL,
      2 NAME# CHAR(31) INIT(' ');
 
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
DCL M$FILE$ PTR STATIC;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
DCL FIRST_SW BIT(1) STATIC;
DCL OPEN_SW BIT(1) STATIC;
DCL MATCH BIT(1);
DCL OPT_GIVEN BIT(1);
DCL KEY_FILE BIT(1);
DCL FILE_OPT BIT(1);
DCL DIFFERENT_FID BIT(1);
 
DCL 1 START_MARK BASED(START$),
      2 L UBIN(9),
      2 TEXT CHAR(START_MARK.L);
DCL 1 END_MARK BASED(END$),
      2 L UBIN(9),
      2 TEXT CHAR(END_MARK.L);
DCL START$ PTR STATIC INIT(ADDR(START_CHARS));
DCL END$ PTR STATIC INIT(ADDR(END_CHARS));
DCL Q$ PTR STATIC;
DCL P$ PTR STATIC;
DCL START_CHARS CHAR(64) STATIC;
DCL END_CHARS CHAR(64) STATIC;
DCL K UBIN;
DCL I UBIN;
DCL J UBIN;
DCL NUM_NODES UBIN;
DCL SIZE SBIN;
DCL SIZE_CH REDEF SIZE CHAR(4);
 
DCL WC_INPUT CHAR(31) INIT(' ') STATIC;
DCL WC_PATTERN CHAR(31) INIT(' ') STATIC;
 
 
%P_PCB (NAME=CP6ARC_PCB,
        STCLASS="STATIC SYMDEF",
        R=CP6ARC_NODES,
        W=CP6ARC_WORKSPACE,
        U$=NIL,
        WSZ=500,
        N#=0);
DCL CP6ARC_WORKSPACE(0:500) SBIN WORD STATIC SYMDEF;
DCL CP6ARC_NODES SBIN WORD SYMREF;
%PARSE$SYM (NAME=CP6ARC$SYM,
            STCLASS="BASED");
%PARSE$OUT (NAME=CP6ARC$OUTBLK,
            STCLASS="BASED");
DCL X$PARSE ENTRY(1) ALTRET;
 
DCL TOO_LONG_MSG CHAR(0) STATIC INIT('**** Starting or ending mark is too long ****');
DCL SI_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid or missing SI file ****');
DCL OU_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid or missing OU file ****');
DCL ILL_WILDCARD_MSG CHAR(0) STATIC INIT('**** Illegal wildcard on STD option ****');
 
%B$JIT0;
%U$JIT1;
%A$JIT6X;
%B$TCB;
%B$ALT;
%F$DCB;
%EJECT;
/*****************************************************/
 
        M$SI$ = DCBADDR(DCBNUM(M$SI));
        M$OU$ = DCBADDR(DCBNUM(M$OU));
        M$FILE$ = DCBADDR(DCBNUM(M$FILE));
 
          CALL M$GDS (GET_DATA) WHENALTRETURN DO;
                         CALL M$MERCS;
                         END;
 
          INPUT_BUFFER$ = DATA_VECTOR.PTR$;
 
          OUTPUT_BUFFER$ = PINCRC (DATA_VECTOR.PTR$,MAX_BUFFER);
 
          INPUT_VECTOR.PTR$ =  INPUT_BUFFER$;
          READ_SI.BUF_.BOUND = MAX_BUFFER - 1;
          READ_SI.BUF_.BUF$ = INPUT_BUFFER$;
 
          WRITE_OU.BUF_.BOUND = MAX_BUFFER - 1;
          WRITE_OU.BUF_.BUF$ = OUTPUT_BUFFER$;
 
        FIRST_SW = TRUE;
        OPEN_SW = FALSE;
        OPT_GIVEN = FALSE;
        OUT_BUF_SZ = 0;
        IF M$SI$->F$DCB.ASN# ~= %FILE#
        THEN
        DO;
           WRITE_ERROR.BUF_ = VECTOR(SI_ERROR_MSG);
           CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
           GOTO THE_END;
           END;
        IF M$OU$->F$DCB.ASN# ~= %FILE#
        THEN
        DO;
           WRITE_ERROR.BUF_ = VECTOR(OU_ERROR_MSG);
           CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
           GOTO THE_END;
           END;
 
        CP6ARC_PCB.ROOT$ = ADDR(CP6ARC_NODES);
        IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP /* if options */
        THEN
        DO;
           CP6ARC_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
           CP6ARC_PCB.NCHARS = B$JIT.CCARS;
           CALL X$PARSE (CP6ARC_PCB) ALTRET (PARSE_ERROR);
 
           NUM_NODES = CP6ARC_PCB.OUT$->CP6ARC$OUTBLK.NSUBLKS;
           DO I = 0 TO NUM_NODES - 1;
             P$ = CP6ARC_PCB.OUT$->CP6ARC$OUTBLK.SUBLK$(I);
             DO CASE(P$->CP6ARC$OUTBLK.CODE);
                CASE(FILE_WITH_FILES);
                  FILE_W_FILES.L# = CP6ARC_PCB.OUT$->CP6ARC$OUTBLK.SUBLK$(1)->
                     CP6ARC$SYM.COUNT;
                  FILE_W_FILES.NAME# = CP6ARC_PCB.OUT$->CP6ARC$OUTBLK.SUBLK$(1)->
                     CP6ARC$SYM.TEXT;
                  FILE_OPT = TRUE;
                CASE(OVER_FILE);
                  OPEN_PACK_FILE.V.EXIST# = %NEWFILE#;
                CASE(ON_FILE,TO_FILE);
                  OPEN_PACK_FILE.V.EXIST# = %ERROR#;
                CASE(STD_OPT);
                  CALL INDEX(K,'?',FILE_W_FILES.NAME#) /*look for wildcard*/
                   WHENRETURN DO; /* if wildcard found, error */
                    WRITE_ERROR.BUF_ = VECTOR(ILL_WILDCARD_MSG);
                    CALL M$WRITE(WRITE_ERROR) ALTRET(THE_END);
                    GOTO THE_END;
                   END;
                   WHENALTRETURN DO; /* if not found, open file */
                    OPT_GIVEN = TRUE;
                    CALL M$OPEN(OPEN_FILE_W_FILES) ALTRET(OPEN_ERROR);
                   END;
                CASE(COMP_OPT);
                  OPEN_PACK_FILE.V.COMP# = TRUE;
                CASE(ELSE);
            END; /* do case */
          END; /* do i */
          IF OPT_GIVEN THEN
READ_A_REC_FID: CALL M$READ(READ_FILE_W_FILES) ALTRET(EOF_ON_RECFID);
           END;
PACK_FILE: IF OPT_GIVEN            /* if option, current file is file to open */
        THEN DO;
           IF SUBSTR(CURRENT_FILENAME,0,1) = '"'
           THEN GOTO READ_A_REC_FID;
           DIFFERENT_FID = FALSE;
           CALL INDEX(I,' ',CURRENT_FILENAME) WHENRETURN DO;
             IF I < (M$FILE$->F$DCB.ARS#) /* if a blank in this rec */
             THEN DO;
               CALL SEARCH(I,J,B$SR_NON_BLANK,CURRENT_FILENAME,I)
               WHENRETURN DO;
                 CALL SEARCHR(K,J,B$SR_NON_BLANK,CURRENT_FILENAME,M$FILE$->F$DCB.ARS#);
                 PACK_FID.L# = K - I + 1;
                 PACK_FID.NAME# = SUBSTR(CURRENT_FILENAME,I,PACK_FID.L#);
                 DIFFERENT_FID = TRUE;
               END; /* whenreturn do */
             END; /* if there's a blank in this record */
           END; /* whenreturn do */
        END;
        ELSE DO;              /* if no opt, find file name matching wildcard*/
 
           WC_PATTERN = M$SI$->F$DCB.NAME#.C;
           XUW_WILDCARD.PATTERN_.BOUND = M$SI$->F$DCB.NAME#.L - 1;
 
           CALL INDEX (FIRST_NAME_LEN,'?',WC_PATTERN)
             WHENRETURN DO;
               IF FIRST_NAME_LEN = 0 /* if 1st char is wildcard */
               THEN DO;
                 FIRST_NAME.L# = 0;
                 FIRST_NAME.NAME# = ' ';
               END;
               ELSE DO; /* else wildcard after 1st char. */
                 FIRST_NAME.L# = FIRST_NAME_LEN;
                 FIRST_NAME.NAME# = SUBSTR (WC_PATTERN,0,FIRST_NAME.L#);
               END;
             END; /* whenreturn do */
             WHENALTRETURN DO;
               FIRST_NAME.L# = M$SI$->F$DCB.NAME#.L;
               FIRST_NAME.NAME# = SUBSTR(WC_PATTERN,0,FIRST_NAME.L#);
             END;
           END;
 
OPEN_LOOP: ;
        IF OPEN_SW
        THEN DO;
           CALL M$CLOSE (CLOSE_SI) ALTRET (CLOSE_ERROR);
           OPEN_SW = '0'B;
           END;
        FIT_BUFFER = ' ';
        IF OPT_GIVEN
        THEN DO;
         IF DIFFERENT_FID THEN
           SETUP_NAME.TEXTFID_ = VECTOR(SUBSTR(CURRENT_FILENAME,0,I-1));
         ELSE
           SETUP_NAME.TEXTFID_ = VECTOR(SUBSTR(CURRENT_FILENAME,0,M$FILE$->F$DCB.ARS#));
           CALL M$FID(SETUP_NAME) ALTRET(OPEN_ERROR);
           CALL M$OPEN(OPEN_STD) ALTRET(OPEN_ERROR);
           END;
        ELSE IF FIRST_SW
           THEN
              CALL M$OPEN (OPEN_FIRST_SI) ALTRET (OPEN_ERROR);
           ELSE
              CALL M$OPEN (OPEN_NEXT_SI) ALTRET (OPEN_ERROR);
        OPEN_SW = TRUE;
        FIRST_SW = FALSE;
        IF NOT OPT_GIVEN THEN DO;
           FIRST_NAME.NAME# = M$SI$->F$DCB.NAME#.C;
           FIRST_NAME.L# = M$SI$->F$DCB.NAME#.L;
           CALL PREFIX_TEST ALTRET (END_LOOP);
           END;
        ELSE MATCH = TRUE;
        IF NOT MATCH
        THEN GOTO OPEN_LOOP;
 
        NAME_OUT.TEXT = M$SI$->F$DCB.NAME#.C;
        NAME_OUT.L = M$SI$->F$DCB.NAME#.L;
        CALL M$WRITE (WRITE_CHAP) ALTRET(WRITE_ERROR);
 
        IF FIRST_SW
        THEN DO;
           CALL M$OPEN(OPEN_PACK_FILE) ALTRET(WRITE_ERROR);
           FIRST_SW = '0'B;
           CALL CONCAT(OUTPUT_BUFFER$->CHAR0,SUBSTR(M$OU$->F$DCB.NAME#.C,0,
             M$OU$->F$DCB.NAME#.L)) ALTRET (TOO_LONG);
           WRITE_OU.BUF_.BOUND = M$OU$->F$DCB.NAME#.L - 1;
           CALL M$WRITE (WRITE_OU) ALTRET (WRITE_ERROR);
           END;
        IN_BUF_SZ = 0;
        HOW_MUCH_LEFT = MAX_BUFFER - OUT_BUF_SZ; /* how much left in buffer*/
        IF(HOW_MUCH_LEFT <= 3)          /* if theres less than 3 bytes left   */
        THEN DO;
           DO I = OUT_BUF_SZ TO MAX_BUFFER - 1; /* fill rest of buffer w/no ops*/
              PINCRC(OUTPUT_BUFFER$,I)->CHAR1 = NO_OP;
              END;                      /* do i                               */
           OUT_BUF_SZ = MAX_BUFFER;
           CALL WRITE_OUTBUF;           /* write buffer                       */
           HOW_MUCH_LEFT = MAX_BUFFER;
           END;                         /* if how much left <= 3 bytes        */
 
        HOW_MUCH_LEFT = HOW_MUCH_LEFT - 2;
        IF DIFFERENT_FID
        THEN DO;
          FIRST_NAME.L# = PACK_FID.L#;
          FIRST_NAME.NAME# = PACK_FID.NAME#;
        END;
        IF HOW_MUCH_LEFT >= FIRST_NAME.L# /*if enough left for entire      */
        THEN DO;                     /* filename                           */
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_FILENAME;
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ+1)->CHAR1 = FIRST_NAME.L#;
           SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,FIRST_NAME.L#) =
             FIRST_NAME.NAME#;
           OUT_BUF_SZ = OUT_BUF_SZ + 2 + FIRST_NAME.L#;
           END;                 /* if enough room left for entire filename */
        ELSE DO;      /* else theres not enough space for entire filename  */
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_FILENAME;
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ+1)->CHAR1 = HOW_MUCH_LEFT;
           SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,HOW_MUCH_LEFT) =
             SUBSTR(FIRST_NAME.NAME#,0,HOW_MUCH_LEFT);
           OUT_BUF_SZ = OUT_BUF_SZ + 2 + HOW_MUCH_LEFT;
           THE_REST = FIRST_NAME.L# - HOW_MUCH_LEFT;
           CALL WRITE_OUTBUF;
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_FILENAME;
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ+1)->CHAR1 = THE_REST;
           SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,THE_REST) =
             SUBSTR(FIRST_NAME.NAME#,HOW_MUCH_LEFT,THE_REST);
           OUT_BUF_SZ = OUT_BUF_SZ + 2 + THE_REST;
           END;  /* else theres not enough room in current buffer space    */
                 /* so the rest of the buffer gets filled with 1st part    */
                 /* of the filename, and the remaining filename gets to    */
                 /* assign to a clean buffer AFTER the filled buffer is    */
                                     /* written to file.                   */
        Q$ = ADDR(FIT_BUFFER);
        K = Q$->FM$FIT.CODES.CODE(0);
        SIZE = 0;
        DO I = 1 TO K;
           J = Q$->FM$FIT.CODES.ITEMX(I) + Q$->FM$FIT.CODES.NDW(I);
           IF J > SIZE THEN SIZE = J;
           END;                         /* do i                               */
        SIZE = SIZE * 4;                /* size of fit in bytes               */
        IF SIZE ~= 0
        THEN DO;
           HOW_MUCH_LEFT = MAX_BUFFER - OUT_BUF_SZ;
           IF (HOW_MUCH_LEFT <= 4) /* if not enough room in buffer for fit*/
           THEN DO;
              DO I = OUT_BUF_SZ TO MAX_BUFFER - 1;
                 PINCRC(OUTPUT_BUFFER$,I)->CHAR1 = NO_OP;
                 END;
              OUT_BUF_SZ = MAX_BUFFER;
              CALL WRITE_OUTBUF;
              HOW_MUCH_LEFT = MAX_BUFFER;
              END;                      /* if less than 4 bytes left for fit  */
              HOW_MUCH_LEFT = HOW_MUCH_LEFT - 3;
              IF HOW_MUCH_LEFT >= SIZE  /* if theres room for entire fit      */
              THEN DO;
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_FIT;
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,2) = SUBSTR(SIZE_CH,2,2);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+3,SIZE) =
                   SUBSTR(FIT_BUFFER,0,SIZE);
                 OUT_BUF_SZ = OUT_BUF_SZ + 3 + SIZE;
                 END;                   /* if room for entire fit             */
              ELSE DO;        /* else theres not enough room for entire fit   */
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_FIT;
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,2) = SUBSTR(HOW_MUCH_LEFT_CH,2,2);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+3,HOW_MUCH_LEFT) =
                   SUBSTR(FIT_BUFFER,0,HOW_MUCH_LEFT);
                 OUT_BUF_SZ = OUT_BUF_SZ + 3 + HOW_MUCH_LEFT;
                 CALL WRITE_OUTBUF;
                 THE_REST = SIZE - HOW_MUCH_LEFT;
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_FIT;
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,2) = SUBSTR(THE_REST_CH,2,2);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+3,THE_REST) =
                   SUBSTR(FIT_BUFFER,HOW_MUCH_LEFT,THE_REST);
                 OUT_BUF_SZ = OUT_BUF_SZ + 3 + THE_REST;
                 END;              /* else not enough room for entire fit     */
           END;                         /* if theres fit at all               */
           IF M$SI$->F$DCB.ORG# = %KEYED#
        THEN DO; KEY_FILE = TRUE;
           READ_SI.V.KEYR# = TRUE;
           READ_SI.KEY_ = VECTOR(KEY_BUFFER);
           END;
        ELSE DO; KEY_FILE= FALSE;
           READ_SI.V.KEYR# = FALSE;
           END;
READ_LOOP:;
        CALL M$READ(READ_SI) ALTRET(EOF_OR_ERROR);
           READ_SI.V.DVBYTE.CONT# = FALSE; /* unset continue flag */
IF_KEYED:  IF KEY_FILE                     /* if its a keyed file */
           THEN DO;
              HOW_MUCH_LEFT = MAX_BUFFER - OUT_BUF_SZ;
              IF (HOW_MUCH_LEFT <= 3)   /* if less than 3 bytes left          */
              THEN DO;
                 DO I = OUT_BUF_SZ TO MAX_BUFFER - 1;
                    PINCRC(OUTPUT_BUFFER$,I)->CHAR1 = NO_OP;
                    END;
                 OUT_BUF_SZ = MAX_BUFFER;
                 CALL WRITE_OUTBUF;
                 HOW_MUCH_LEFT = MAX_BUFFER;
                 END;                   /* if less than 3 bytes               */
                 HOW_MUCH_LEFT = HOW_MUCH_LEFT - 2;
                 IF (HOW_MUCH_LEFT >= KEY_BUFFER.SZ)
                 THEN DO;               /* if theres room in buffer for key   */
                    PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_KEY;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,1) = KEY_BUFFER.SZ_CH;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,KEY_BUFFER.SZ) =
                      SUBSTR(KEY_BUFFER.KEY,0,KEY_BUFFER.SZ);
                    OUT_BUF_SZ = OUT_BUF_SZ + 2 + KEY_BUFFER.SZ;
                    END;                /* if theres room for key             */
                 ELSE DO;     /* theres not enough room for key in buffer     */
                    PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_KEY;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,1) = SUBSTR(HOW_MUCH_LEFT_CH,3,1);
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,HOW_MUCH_LEFT) =
                      SUBSTR(KEY_BUFFER.KEY,0,HOW_MUCH_LEFT);
                    OUT_BUF_SZ = OUT_BUF_SZ + 2 + HOW_MUCH_LEFT;
                    CALL WRITE_OUTBUF;
                    THE_REST = KEY_BUFFER.SZ - HOW_MUCH_LEFT;
                    PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_KEY;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,1) = SUBSTR(THE_REST_CH,3,1);
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,THE_REST) =
                      SUBSTR(KEY_BUFFER.KEY,HOW_MUCH_LEFT,THE_REST);
                    OUT_BUF_SZ = OUT_BUF_SZ + 2 + THE_REST;
                    END;      /* theres not enough room in buffer for key     */
              END;                      /*  if its keyed file                 */
           HOW_MUCH_LEFT = MAX_BUFFER - OUT_BUF_SZ;
           IF(HOW_MUCH_LEFT <= 5)       /* if theres less than 5 bytes left   */
           THEN DO;
              DO I = OUT_BUF_SZ TO MAX_BUFFER - 1;
                 PINCRC(OUTPUT_BUFFER$,I)->CHAR1 = NO_OP;
                 END;
              OUT_BUF_SZ = MAX_BUFFER;
              CALL WRITE_OUTBUF;
              HOW_MUCH_LEFT = MAX_BUFFER;
              END;                      /* if theres less than 5 bytes left   */
 
              HOW_MUCH_LEFT = HOW_MUCH_LEFT - 4;
              IF HOW_MUCH_LEFT >= M$SI$->F$DCB.ARS# /* if room for record*/
              THEN DO;
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_REC;
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ+1)->CHAR1 = BITBIN(M$SI$->F$DCB.DVBYTE);
                 SIZE = M$SI$->F$DCB.ARS#;
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,2) = SUBSTR(SIZE_CH,2,2);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+4,M$SI$->F$DCB.ARS#) =
                   SUBSTR(INPUT_BUFFER$->CHAR0,0,M$SI$->F$DCB.ARS#);
                 OUT_BUF_SZ = OUT_BUF_SZ + 4 + M$SI$->F$DCB.ARS#;
                 END;                   /* if room for record read in buffer  */
              ELSE DO;   /* if not enough room in buffer for entire record*/
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_REC;
                 PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ+1)->CHAR1 = BITBIN(M$SI$->F$DCB.DVBYTE);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+2,2) = SUBSTR(HOW_MUCH_LEFT_CH,2,2);
                 SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+4,HOW_MUCH_LEFT) =
                   SUBSTR(INPUT_BUFFER$->CHAR0,0,HOW_MUCH_LEFT);
                 THE_REST = M$SI$->F$DCB.ARS# - HOW_MUCH_LEFT;
                 OUT_BUF_SZ = OUT_BUF_SZ + HOW_MUCH_LEFT + 4;
                 CALL WRITE_OUTBUF;
                 WHATS_LEFT = MAX_BUFFER - OUT_BUF_SZ;
                 DO WHILE((THE_REST + 3) > WHATS_LEFT);
                    WHATS_LEFT = WHATS_LEFT - 3;
                    PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_REC;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,2) = SUBSTR(WHATS_LEFT_CH,2,2);
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+3,WHATS_LEFT) =
                      SUBSTR(INPUT_BUFFER$->CHAR0,HOW_MUCH_LEFT,WHATS_LEFT);
                    HOW_MUCH_LEFT = HOW_MUCH_LEFT + WHATS_LEFT;
                    THE_REST = M$SI$->F$DCB.ARS# - HOW_MUCH_LEFT;
                    OUT_BUF_SZ = OUT_BUF_SZ + WHATS_LEFT + 3;
                    CALL WRITE_OUTBUF;
                    WHATS_LEFT = MAX_BUFFER - OUT_BUF_SZ;
                    END;
                 IF THE_REST > 0
                 THEN DO;
                    IF READ_SI.V.DVBYTE.CONT#
                    THEN PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = CONT_REC;
                    ELSE PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_REC;
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+1,2) = SUBSTR(THE_REST_CH,2,2);
                    SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ+3,THE_REST) =
                      SUBSTR(INPUT_BUFFER$->CHAR0,HOW_MUCH_LEFT,THE_REST);
                    OUT_BUF_SZ = OUT_BUF_SZ + 3 + THE_REST;
                    END;
                 END;    /* else not enough room in buffer for entire record  */
              GOTO READ_LOOP;
 
 
EOF_OR_ERROR: ;
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
        THEN DO;
           IF(OUT_BUF_SZ + 1) > MAX_BUFFER
           THEN
              CALL WRITE_OUTBUF;
           PINCRC(OUTPUT_BUFFER$,OUT_BUF_SZ)->CHAR1 = THE_EOF;
           OUT_BUF_SZ = OUT_BUF_SZ + 1;
           IF OPT_GIVEN
           THEN GOTO READ_A_REC_FID;
           ELSE GOTO OPEN_LOOP;
           END;
        ELSE IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$LD
           THEN DO;
              READ_SI.V.DVBYTE.CONT# = TRUE;
              GOTO IF_KEYED;
              END;
           ELSE
              CALL M$MERC;
END_LOOP: ;
        IF OUT_BUF_SZ > 0
        THEN CALL WRITE_OUTBUF;
        CALL M$CLOSE (CLOSE_OU) ALTRET (CLOSE_ERROR);
THE_END: ;
        CALL M$EXIT;
%EJECT;
 
OPEN_ERROR: ;
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$FDEOF
        THEN
           GOTO END_LOOP;
        ELSE
        DO;
           CALL M$MERC;
           GOTO THE_END;
           END;
 
EOF_ON_RECFID:;
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
        THEN DO;
           IF OUT_BUF_SZ > 0
           THEN CALL WRITE_OUTBUF;
           CALL M$CLOSE(CLOSE_FILE_W_FILES) ALTRET(CLOSE_ERROR);
           CALL M$CLOSE(CLOSE_OU) ALTRET(CLOSE_ERROR);
           IF OPEN_SW THEN DO;
              CALL M$CLOSE(CLOSE_SI) ALTRET(CLOSE_ERROR);
              OPEN_SW = FALSE;
              END;
           END;
        ELSE
           CALL M$MERC;
        GOTO THE_END;
CLOSE_ERROR: ;
        CALL M$MERC;
        GOTO THE_END;
 
WRITE_ERROR: ;
        CALL M$MERC;
        GOTO THE_END;
 
PARSE_ERROR: ;
        CALL M$ERRMSG(FPT_ERRMSG) ALTRET(THE_END);
        GOTO THE_END;
 
TOO_LONG: ;
        WRITE_ERROR.BUF_ = VECTOR(TOO_LONG_MSG);
        CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
        GOTO THE_END;
 
 %EJECT;
 
PREFIX_TEST: PROC ALTRET;
        MATCH = '1'B;
        WC_INPUT = M$SI$->F$DCB.NAME#.C;
        XUW_WILDCARD.INPUT_.BOUND = M$SI$->F$DCB.NAME#.L - 1;
        CALL X$WILDCMP (XUW_WILDCARD) ALTRET (NOMATCH);
        RETURN;
NOMATCH:
        MATCH = '0'B;
        IF SUBSTR (WC_PATTERN,0,FIRST_NAME.L#) < SUBSTR (WC_INPUT,0,FIRST_NAME.L#)
        THEN
           ALTRETURN;
        ELSE
           RETURN;
END PREFIX_TEST;
%EJECT;
WRITE_OUTBUF: PROC;
 
        WRITE_OU.BUF_.BOUND = OUT_BUF_SZ - 1;
        CALL M$WRITE(WRITE_OU) ALTRET(WRITE_OU_ERROR);
        OUT_BUF_SZ = 0;
        RETURN;
 
WRITE_OU_ERROR:
        CALL M$MERC;
        CALL M$EXIT;
 
END WRITE_OUTBUF;
%EJECT;
END CP6ARC;
