/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*M* GIMME_SI62 - this module contains code for all commands.                 */
/**/
PROCESS_GET: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RANGE ENTRY ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL ENQ_SHEET ENTRY ALTRET;
DCL SIGNUP_EVENT ENTRY(2) ALTRET;
/**/
/*  LOCAL AUTO  */
/**/
%VLP_NAME (FPTN = TEXTC_1, LEN=31, STCLASS = " ");
%VLP_NAME (FPTN = TEXTC_2, LEN=31, STCLASS = " ");
%SHEET_RECORD (NAME=STASH_RECORD,STCLASS=" ");
%SHEET_KEY (NAME=STASH_KEY,STCLASS=" ");
%EJECT;
/**/
/*  Digest the parse blocks.                                                  */
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%START_TIME_PM#|%END_TIME_PM#|
                        %REASON_PM#)
         ALTRET(BAILOUT);
     DO WHILE ( SHEET_RECORD.RES.REASON_SPEC.CODE = %REQUIRED# AND
                NOT OPT.REASON.PRESENT);
       ERROR_CODE.ERR# = %DEG$REASON_REQUIRED#;
/*E* ERROR: DEG-DEG$REASON_REQUIRED#-2
   MESSAGE: A reason is required for getting the resource.
*/
       CALL XUR$ERRMSG (ERROR_CODE);
       CALL INSURE_PARTS (%REASON_PM#) ALTRET (BAILOUT);
       END; /* do while a reason is not provided when it is required  */
/**/
     IF ( NOT OPT.REASON.PRESENT AND
          SHEET_RECORD.RES.REASON_SPEC.CODE = %DEFAULT# ) THEN
      DO;
        OPT.REASON.C = SHEET_RECORD.RES.REASON_SPEC.DEFAULT.C;
        OPT.REASON.TEXT = SHEET_RECORD.RES.REASON_SPEC.DEFAULT.TEXT;
        END;
/**/
/*  Prepare for much waving of plucked chickens.                              */
/**/
     CALL ENQ_SHEET ALTRET(BAILOUT);
/**/
/*  Insure that the range and resource are OK.                                */
/**/
     CALL CHECK_RANGE ALTRET(BAILOUT);
/**/
/*  This slot is available!                                                   */
     STASH_RECORD.SIGN.START_TIME = OPT.START_TIME;
     STASH_RECORD.SIGN.REQ_END_TIME = OPT.END_TIME.UTS;
     STASH_RECORD.SIGN.REASON = OPT.REASON;
     STASH_KEY.REST.RES.C = OPT.RESOURCE.RES.C;
     STASH_KEY.REST.RES.TEXT = OPT.RESOURCE.RES.TEXT;
     CALL SIGNUP_EVENT (STASH_RECORD,STASH_KEY) ALTRET(BAILOUT);
/**/
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_GET;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_ALIAS: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
%EJECT;
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%ALIAS_PM#) ALTRET(BAILOUT);
     CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
/**/
     SHEET_KEY.REST.RES.C = OPT.ALIAS.RES.C;
     SHEET_KEY.REST.RES.TEXT = OPT.ALIAS.RES.TEXT;
     SHEET_KEY.REST.UTS = 0;
     SHEET_RECORD = '0'B;
     SHEET_RECORD.ALIAS.USER_ID = USER_ID;
     SHEET_RECORD.ALIAS.RES = OPT.RESOURCE.RES;
     SHEET_RECORD.ALIAS.REASON = OPT.REASON;
     SHEET_RECORD.TYPE = %RT_ALIAS#;
/**/
     CALL M$WRITE (FPT_WRITE_SHEET) ALTRET (BAD_WRITE);
/**/
     RETURN;
/**/
BAD_WRITE: ;
     ERROR_CODE.ERR# = %DEG$CANT_ALIAS#;
/*E* ERROR: DEG-DEG$CANT_ALIAS#-2
   MESSAGE: Unable to create that alias.
*/
     CALL XUR$ERRMSG (ERROR_CODE);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_ALIAS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_CREATE: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RES_NAME ENTRY(1) ALTRET;
%EJECT;
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%REASON_SPEC_PM#|%AVAIL_TIME_PM#) ALTRET(BAILOUT);
     CALL CHECK_RES_NAME (0) ALTRET(BAILOUT);
     IF NOT OPT.SITE.PRESENT THEN
      DO;
        OPT.SITE.TEXT = CURR_SITE.SITE_NAME#.C;
        OPT.SITE.C = CURR_SITE.SITE_NAME#.L;
        END;
/**/
     SHEET_KEY.REST.RES.C = OPT.RESOURCE.RES.C;
     SHEET_KEY.REST.RES.TEXT = OPT.RESOURCE.RES.TEXT;
     SHEET_KEY.REST.UTS = 0;
     SHEET_RECORD = '0'B;
     SHEET_RECORD.RES.USER_ID = USER_ID;
     SHEET_RECORD.RES.REASON = OPT.REASON;
     SHEET_RECORD.RES.SITE = OPT.SITE;
     SHEET_RECORD.RES.AVAIL_TIME = OPT.AVAIL_TIME;
     SHEET_RECORD.RES.REASON_SPEC = OPT.REASON_SPEC;
     SHEET_RECORD.TYPE = %RT_RES#;
/**/
     CALL M$WRITE (FPT_WRITE_SHEET) ALTRET (BAD_WRITE);
/**/
     RETURN;
/**/
BAD_WRITE: ;
     ERROR_CODE.ERR# = %DEG$CANT_CREATE#;
/*E* ERROR: DEG-DEG$CANT_CREATE#-2
   MESSAGE: Unable to create that resource.
*/
     CALL XUR$ERRMSG (ERROR_CODE);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_CREATE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_DESTROY: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(0,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#) ALTRET(BAILOUT);
     CALL CHECK_RESOURCE(0,0) ALTRET(BAILOUT);
/**/
     SHEET_KEY.REST.RES.C = OPT.RESOURCE.RES.C;
     SHEET_KEY.REST.RES.TEXT = OPT.RESOURCE.RES.TEXT;
     SHEET_KEY.REST.UTS = 0;
/**/
     CALL M$DELREC (FPT_DELREC_SHEET) ALTRET (BAD_DELETE);
/**/
     RETURN;
/**/
BAD_DELETE: ;
     ERROR_CODE.ERR# = %DEG$CANT_DESTROY#;
/*E* ERROR: DEG-DEG$CANT_DESTROY#-2
   MESSAGE: Unable to destory that resource.
*/
     CALL XUR$ERRMSG (ERROR_CODE);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_DESTROY;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_REL: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  LOCAL AUTO  */
/**/
%SHEET_RECORD (NAME=STASH_RECORD, STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL CHECK_OWNERSHIP ENTRY ALTRET;
DCL DELETE_EVENT ENTRY(1) ALTRET;
%EJECT;
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%ID_PM#) ALTRET(BAILOUT);
     CALL CHECK_OWNERSHIP ALTRET(BAILOUT);
/**/
/*  Delete the instance already set up by CHECK_OWNERSHIP.                    */
/**/
     STASH_RECORD = SHEET_RECORD;
     CALL DELETE_EVENT (STASH_RECORD) ALTRET (BAILOUT);
/**/
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_REL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_MOVE: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE XUD_UTS_M;
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL UTS_DIFF UBIN;
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RANGE ENTRY ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL CHECK_OWNERSHIP ENTRY ALTRET;
DCL ENQ_SHEET ENTRY ALTRET;
DCL DELETE_EVENT ENTRY(1) ALTRET;
DCL SIGNUP_EVENT ENTRY(2) ALTRET;
/**/
/*  LOCAL AUTO  */
/**/
%SHEET_KEY (NAME = STASH_KEY,STCLASS = " ");
%SHEET_RECORD (NAME = STASH_RECORD,STCLASS = " ");
%EJECT;
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%ID_PM#|%START_TIME_PM#) ALTRET(BAILOUT);
     CALL CHECK_OWNERSHIP ALTRET(BAILOUT);
/**/
/*  Prepare for much waving of plucked chickens.                              */
/**/
     CALL ENQ_SHEET ALTRET(BAILOUT);
/**/
/*  CHECK_OWNERSHIP left the instance set up...                               */
/**/
/*  Stash the key so we can delete record later.                              */
/*  Stash the record so we can make the new one from it.                      */
/**/
     STASH_KEY = SHEET_KEY;
     STASH_RECORD = SHEET_RECORD;
/**/
/*  Delete this instance   */
/**/
     CALL DELETE_EVENT (STASH_RECORD) ALTRET (BAILOUT);
/**/
/*  Create time span based on old schedule and test it.                       */
/**/
     CALL XUD$UTS_DIFF(UTS_DIFF,STASH_RECORD.SIGN.REQ_END_TIME,
                       STASH_RECORD.SIGN.START_TIME.UTS);
     CALL XUD$UTS_ADJUST(OPT.END_TIME.UTS,OPT.START_TIME.UTS,
                       UTS_DIFF);
     CALL CHECK_RANGE ALTRET(BAD_MOVE);
/**/
/*  Make new signup entry.                                   */
/**/
     STASH_RECORD.SIGN.START_TIME = OPT.START_TIME;
     STASH_RECORD.SIGN.REQ_END_TIME = OPT.END_TIME.UTS;
     CALL SIGNUP_EVENT (STASH_RECORD, STASH_KEY) ALTRET (BAILOUT);
/**/
     RETURN;
/**/
BAD_MOVE: ;
/**/
/*  We have deleted the old instance, better put it back!    */
/**/
      CALL SIGNUP_EVENT (STASH_RECORD,STASH_KEY) ALTRET(BAILOUT);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_MOVE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_LIST: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL GET_NEXT_RES ENTRY(3) ALTRET;
/**/
/*  LOCAL AUTO  */
/**/
DCL LIST_COUNT SBIN WORD;
DCL LIST_LINE CHAR(80);
DCL INSERT_IDX SBIN WORD;
DCL 1 CURR_RES,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(31) CALIGNED;
%EJECT;
/**/
/*  Setup.                                                                    */
/**/
     LIST_COUNT = 0;
     FPT_WRITE_LO.BUF_ = VECTOR(LIST_LINE);
     CURR_RES.C = 0;
/**/
/*  Digest parse nodes.                                                       */
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
%EJECT;
/**/
/*  Sequence through resources, listing as appropriate.                       */
/**/
     DO WHILE (%YES#);
        CALL GET_NEXT_RES (CURR_RES.TEXT,CURR_RES.C,1) ALTRET(RES_EXHAUSTED);
        LIST_COUNT = LIST_COUNT +1;
        LIST_LINE = ' ';
        INSERT_IDX = 0;
        CALL INSERT(LIST_LINE,INSERT_IDX,,SHEET_KEY.REST.RES.TEXT);
        INSERT_IDX = INSERT_IDX + SHEET_KEY.REST.RES.C +1;
        DO CASE(SHEET_RECORD.TYPE);
           CASE(%RT_RES#);
             CALL CONCAT(LIST_LINE,
                SUBSTR(SHEET_KEY.REST.RES.TEXT,0,30),
                ' available at ',
             SUBSTR(SHEET_RECORD.RES.SITE.TEXT,0,20),
                SHEET_RECORD.RES.AVAIL_TIME.START_, ' to ',
                SHEET_RECORD.RES.AVAIL_TIME.END_);
             CALL M$WRITE (FPT_WRITE_LO);
             LIST_LINE = ' ';
 
             IF INSERT_IDX < 20 THEN INSERT_IDX = 20;
 
             CALL INSERT(LIST_LINE,INSERT_IDX,,SHEET_RECORD.RES.REASON.TEXT);
             INSERT_IDX = INSERT_IDX + SHEET_RECORD.RES.REASON.C +1;
           CASE(%RT_ALIAS#);
             CALL INSERT(LIST_LINE,INSERT_IDX,,
                         '(',SUBSTR(SHEET_RECORD.ALIAS.RES.TEXT,0,
                                    SHEET_RECORD.ALIAS.RES.C),')');
             INSERT_IDX = INSERT_IDX + SHEET_RECORD.ALIAS.RES.C +3;
             IF INSERT_IDX < 20 THEN INSERT_IDX = 20;
             CALL INSERT(LIST_LINE,INSERT_IDX,,SHEET_RECORD.ALIAS.REASON.TEXT);
             INSERT_IDX = INSERT_IDX + SHEET_RECORD.ALIAS.REASON.C +1;
           END;
        CALL M$WRITE (FPT_WRITE_LO);
NEXT_L: END;
%EJECT;
RES_EXHAUSTED: ;
/**/
     IF LIST_COUNT = 0
      THEN
        DO;
          ERROR_CODE.ERR# = %DEG$EMPTY_LIST#;
/*E* ERROR: DEG-DEG$EMPTY_LIST#-2
   MESSAGE: No resources to list.
*/
          GOTO ERR_BAILOUT;
          END;
     RETURN;
/**/
ERR_BAILOUT: ;
     CALL XUR$ERRMSG (ERROR_CODE);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_LIST;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_DISPLAY: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE XUD_UTS_M;
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL UTS_TO_STRING ENTRY (2) ALTRET;
DCL GET_NEXT_RES ENTRY(3) ALTRET;
DCL FETCH_EXIST ENTRY(2) ALTRET;
%EJECT;
/**/
/*  LOCAL AUTO  */
/**/
%VLP_NAME (FPTN = TEXT_C, LEN=50, STCLASS = " ");
%VLP_NAME (FPTN = TEXT_C2, LEN=20, STCLASS = " ");
DCL DISPLAY_COUNT SBIN WORD;
DCL DATE_BUFF CHAR(8);
DCL WILD_DISP_COUNT SBIN WORD;
DCL 1 DISPLAY_LINE,
      2 ASTEREKS CHAR(3),
      2 START_DATE CHAR(8),
      2 * CHAR(2),
      2 START_TIME CHAR(5),
      2 TO_ CHAR(1),
      2 * CHAR(2),
      2 REASON CHAR(35),
      2 * CHAR(1),
      2 BY_ CHAR(3),
      2 UNAME CHAR(20);
 
DCL 1 DISPLAY_LINE_2 REDEF DISPLAY_LINE,
      2 * CHAR(3),
      2 END_DATE CHAR(8),
      2 * CHAR(2),
      2 END_TIME CHAR(5),
      2 * CHAR(62);
 
DCL DISPLAY_LINE_ REDEF DISPLAY_LINE CHAR(80);
DCL 1 CURR_RES CALIGNED,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(31) CALIGNED;
DCL 1 SEARCH_RANGE,
      2 START_DATE CHAR(8),
      2 * CHAR(1),
      2 START_TIME CHAR(5),
      2 TO_ CHAR (3),
      2 END_DATE CHAR(8),
      2 * CHAR(1),
      2 END_TIME CHAR(5);
DCL SEARCH_RANGE_STR REDEF SEARCH_RANGE CHAR(31);
DCL 1 DI_RES CALIGNED,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(31) CALIGNED;
DCL 1 DI_ALIAS CALIGNED,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(31) CALIGNED;
DCL TEMP_ERR BIT(36);                   /* For non-GIMME errors               */
DCL ID_TIME UBIN WORD;
DCL I UBIN WORD;
DCL OLD_START_TIME UBIN WORD;
DCL UTS_DIFF UBIN;
%EJECT;
/**/
/*  Setup.                                                                    */
/**/
     FPT_WRITE_LO.BUF_ = VECTOR(DISPLAY_LINE);
     DISPLAY_LINE_ = ' ';
/**/
/*  Digest parse nodes.                                                       */
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,1) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#) ALTRET(BAILOUT);
     CALL CHECK_RESOURCE(1,1) ALTRET(BAILOUT);
    OLD_START_TIME = OPT.START_TIME.UTS;
     IF NOT OPT.START_TIME.PRESENT
      THEN
        OPT.START_TIME.UTS = NOW_UTS;
      ELSE DO;
        IF NOT OPT.START_TIME.RELATIVE AND
           OPT.START_TIME.DATE_PRESENT AND
           NOT OPT.START_TIME.HOUR_PRESENT
          THEN
            DO;  /* adjust start time to beginning of day */
               CALL XUD$UTS_DIFF_25TH(UTS_DIFF,OPT.START_TIME.UTS,0);
               UTS_DIFF=UTS_DIFF/%UTS_25TH_DAY#;
               CALL XUD$UTS_ADJ_25TH(OPT.START_TIME.UTS,0,
                    UTS_DIFF*%UTS_25TH_DAY#);
              END;  /* adjust start time to beginning of day */
          END;
     IF NOT OPT.END_TIME.PRESENT
      THEN DO;
         CALL XUD$UTS_DIFF_25TH(UTS_DIFF,OPT.START_TIME.UTS,0);
         UTS_DIFF=(UTS_DIFF/%UTS_25TH_DAY#)+1;
         CALL XUD$UTS_ADJ_25TH(OPT.END_TIME.UTS,0,
              (UTS_DIFF*%UTS_25TH_DAY#)-1);
         END;
    ELSE DO;
      IF OPT.END_TIME.RELATIVE AND OPT.START_TIME.PRESENT
        THEN DO;
            CALL XUD$UTS_DIFF(UTS_DIFF,OPT.START_TIME.UTS,
                 OLD_START_TIME);
            CALL XUD$UTS_ADJUST(OPT.END_TIME.UTS,OPT.END_TIME.UTS,
                 UTS_DIFF);
          OPT.END_TIME.RELATIVE = '0'B;
          END;   /* Adjust end time according to adjustment to
                    start time  */
        ELSE DO;
          IF NOT OPT.END_TIME.RELATIVE AND
             OPT.END_TIME.DATE_PRESENT AND
             NOT OPT.END_TIME.HOUR_PRESENT
            THEN DO;
               CALL XUD$UTS_DIFF_25TH(UTS_DIFF,OPT.END_TIME.UTS,0);
               UTS_DIFF=(UTS_DIFF/%UTS_25TH_DAY#)+1;
               CALL XUD$UTS_ADJ_25TH(OPT.END_TIME.UTS,0,
                    (UTS_DIFF*%UTS_25TH_DAY#)-1);
              END;  /* adjust end time to end of day */
          END;
        END;
     IF ( OPT.END_TIME.RELATIVE AND
          OPT.END_TIME.UTS < OPT.START_TIME.UTS ) THEN
      DO;
        CALL XUD$UTS_ADJUST(OPT.END_TIME.UTS,OPT.START_TIME.UTS,
             OPT.END_TIME.UTS);
        OPT.END_TIME.RELATIVE = '0'B;
        END;
%EJECT;
/**/
/*  DO IT!  */
/**/
     IF OPT.RESOURCE.WCARDED
      THEN                              /* WILD-CARDED DISPLAY                */
        DO;
          WILD_DISP_COUNT = 0;
          CURR_RES.C = 0;
          DI_ALIAS.C = 0;
TRY_NEXT: CALL GET_NEXT_RES (CURR_RES.TEXT,CURR_RES.C,1) ALTRET(FINIS_WILD);
          CALL X$WILDTCMP(CURR_RES,OPT.RESOURCE.RES,TEMP_ERR) ALTRET(TRY_NEXT);
          WILD_DISP_COUNT = WILD_DISP_COUNT +1;
          DI_RES = CURR_RES;
CHASE_RES: ;
          DO CASE (SHEET_RECORD.TYPE);
             CASE (%RT_RES#);
               CALL DISPLAY_ONE_RES ALTRET(TRY_NEXT);
                DI_ALIAS.C = 0;
             CASE (%RT_ALIAS#);
                IF OPT.RESOURCE.RES.C > 1 THEN
                  DO;  /* not a single ? wildcard char */
                    DI_ALIAS = DI_RES;
                    DI_RES = SHEET_RECORD.ALIAS.RES;
                    CALL FETCH_EXIST (DI_RES.TEXT,DI_RES.C)
                         ALTRET (TRY_NEXT);
                    GOTO CHASE_RES;
                    END;
             END;
          GOTO TRY_NEXT;
FINIS_WILD: ;
          IF WILD_DISP_COUNT = 0
           THEN
             DO;
               ERROR_CODE.ERR# = %DEG$EMPTY_WILD#;
/*E* ERROR: DEG-DEG$EMPTY_WILD#-2
   MESSAGE: Nothing matches the wild-card %U1.
*/
               CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(OPT.RESOURCE.RES));
               GOTO BAILOUT;
               END;
          END;
     ELSE                               /* Just DISPLAY one resource          */
        DO;
          DI_ALIAS.C = 0;
          DI_RES = OPT.RESOURCE.RES;
          CALL DISPLAY_ONE_RES ALTRET(BAILOUT);
          END;
/**/
     RETURN;
/**/
BAILOUT: ;
     RETURN;
%EJECT;
DISPLAY_ONE_RES: PROC ALTRET;
 
/**/
/*  Find initial entry.  At or after our start time.                          */
/**/
     SHEET_KEY.REST.UTS = OPT.START_TIME.UTS;
     SHEET_KEY.REST.RES.C = DI_RES.C;
     SHEET_KEY.REST.RES.TEXT = DI_RES.TEXT;
     FPT_READ_SHEET.V.KEYS# = '1'B;
     CALL M$READ (FPT_READ_SHEET) ALTRET (ITS_OK);
ITS_OK: ;
/**/
/*  Backup in case there is a span that ends during our monitoring            */
/*  interval.  Don't worry if we backed up into the BOF.                      */
/**/
     CALL M$PRECORD (FPT_PRECORD_SHEET) ALTRET(ITS_OK2);
ITS_OK2: ;
%EJECT;
/**/
/*  We are now positioned before the first usage of this device               */
/*  that we would want to list.  Read each in turn and see whether or         */
/*  not it's interresting.  Note that the first one might be for              */
/*  the wrong resource since we may have backed up too far.  That's           */
/*  OK.                                                                       */
/**/
     FPT_READ_SHEET.V.KEYS# = '0'B;     /* Sequential from here!              */
LOCATE_RESOURCE: ;
     CALL M$READ (FPT_READ_SHEET);
     IF SHEET_KEY.REST.RES.TEXT ~= DI_RES.TEXT
      THEN
        GOTO LOCATE_RESOURCE;
/**/
/*  Call one of the display format procedures depending on the display option */
/*  requested                                                                 */
/**/
    DO CASE(OPT.DISPLAY_OPT.CODE);
       CASE(%BY_DAY#);
         CALL DISPLAY_DAILY_FORMAT;
       CASE(%BY_WEEK#);
         CALL DISPLAY_WEEKLY_FORMAT;
       CASE(%BY_MONTH#);
         CALL DISPLAY_MONTHLY_FORMAT;
       CASE(ELSE);
         CALL DISPLAY_DEFAULT_FORMAT;
       END;         /* END CASE */
 
       RETURN;
%EJECT;
DISPLAY_DEFAULT_FORMAT: PROC;
 
     DATE_BUFF = ' ';
     DISPLAY_COUNT = 0;
/**/
     DISPLAY_LINE_ = ' ';
     CALL M$WRITE (FPT_WRITE_LO);
     CALL UTS_TO_STRING (OPT.START_TIME.UTS,TEXT_C);
     CALL UTS_TO_STRING (OPT.END_TIME.UTS,TEXT_C2);
     SEARCH_RANGE_STR = ' ';
     SEARCH_RANGE.START_DATE = SUBSTR(TEXT_C.NAME#,6,8);
     SEARCH_RANGE.START_TIME = SUBSTR(TEXT_C.NAME#,0,5);
     SEARCH_RANGE.TO_ = ' - ';
     SEARCH_RANGE.END_DATE = SUBSTR(TEXT_C2.NAME#,6,8);
     SEARCH_RANGE.END_TIME = SUBSTR(TEXT_C2.NAME#,0,5);
     IF DI_ALIAS.C = 0 THEN
       DO;  /*  not an alias  */
         CALL CONCAT(DISPLAY_LINE_,
                 '>>> Schedule for ',
                 SUBSTR(SHEET_KEY.REST.RES.TEXT,0,
                        SHEET_KEY.REST.RES.C),
                 ' (', SEARCH_RANGE_STR, ') <<<');
         END;
     ELSE
       DO;   /* an alias */
         CALL CONCAT(DISPLAY_LINE_,
                 '>>> Schedule for ',
                 SUBSTR(DI_ALIAS.TEXT, 0, DI_ALIAS.C),
                 ' (', SEARCH_RANGE_STR, ') <<<');
         END;
     CALL M$WRITE (FPT_WRITE_LO);
     DISPLAY_LINE_ = ' ';
/**/
/*  For each record we encounter, list if it looks interesting. */
/**/
     DO WHILE (SHEET_RECORD.SIGN.END_TIME.UTS <= OPT.END_TIME.UTS
        AND SHEET_KEY.REST.RES.TEXT = DI_RES.TEXT);
           IF SHEET_RECORD.SIGN.END_TIME.UTS < OPT.START_TIME.UTS
            THEN                        /* Monitored span not started yet     */
              DO;
                CALL M$READ (FPT_READ_SHEET);
                GOTO NEXT_DI;
                END;
 
           CALL UTS_TO_STRING (SHEET_RECORD.SIGN.START_TIME.UTS,TEXT_C);
           IF SUBSTR(TEXT_C.NAME#,6,8) ~= DATE_BUFF
             THEN                  /* DISPLAY DATE LINE */
               DO;
                 DISPLAY_LINE_ = ' ';
                 CALL M$WRITE (FPT_WRITE_LO);
                 DATE_BUFF = SUBSTR(TEXT_C.NAME#,6,8);
               END;
 
           DISPLAY_LINE.START_DATE = DATE_BUFF;
           DISPLAY_LINE.START_TIME = SUBSTR(TEXT_C.NAME#,0,5);
           DISPLAY_LINE.TO_ = '-';
           DISPLAY_LINE.REASON = ADDR(SHEET_RECORD.SIGN.REASON.C) -> TEXT$C.TEXT;
           IF DISPLAY_LINE.REASON = ' '
           THEN
             DISPLAY_LINE.REASON = ' ********** ';
           DISPLAY_LINE.BY_ = 'by ';
           DISPLAY_LINE.UNAME = SHEET_RECORD.SIGN.USER_NAME;
           CALL M$WRITE (FPT_WRITE_LO);
           DISPLAY_LINE_ = ' ';
           CALL UTS_TO_STRING (SHEET_RECORD.SIGN.END_TIME.UTS,TEXT_C);
           DISPLAY_LINE_2.END_TIME = SUBSTR(TEXT_C.NAME#,0,5);
           ID_TIME = SHEET_RECORD.SIGN.ID_TIME;
           DO UNTIL (SHEET_RECORD.SIGN.ID_TIME ~= ID_TIME OR
                     SHEET_RECORD.SIGN.END_TIME.UTS > OPT.END_TIME.UTS);
             CALL M$READ (FPT_READ_SHEET);
             IF SHEET_RECORD.SIGN.ID_TIME = ID_TIME AND
                SHEET_RECORD.SIGN.END_TIME.UTS <= OPT.END_TIME.UTS THEN
               DO;  /* get ending time  */
                 CALL UTS_TO_STRING (SHEET_RECORD.SIGN.END_TIME.UTS,TEXT_C);
                 DISPLAY_LINE_2.END_DATE = SUBSTR(TEXT_C.NAME#,6,8);
                 DISPLAY_LINE_2.END_TIME = SUBSTR(TEXT_C.NAME#,0,5);
                 END;
             END;  /* do until ID_TIME dosen't match  */
           CALL M$WRITE (FPT_WRITE_LO);
           DISPLAY_LINE_ = ' ';
           DISPLAY_COUNT = DISPLAY_COUNT +1;
NEXT_DI: ;
           END;
     IF DISPLAY_COUNT = 0
      THEN
        DO;
          ERROR_CODE.ERR# = %DEG$EMPTY_DISPLAY#;
/*E* ERROR: DEG-DEG$EMPTY_DISPLAY#-2
   MESSAGE: Nobody is using %U1.
*/
          CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(DI_RES));
          GOTO BAILOUT;
          END;
     RETURN;
/**/
BAILOUT: ;
     RETURN;
/**/
/**/
     END DISPLAY_DEFAULT_FORMAT;
 
DISPLAY_DAILY_FORMAT: PROC;
 
DCL FIRST_TIME BIT(1) STATIC;
DCL CURR_DATE CHAR(8) STATIC;
DCL CURR_HOUR SBIN WORD STATIC;
DCL CURR_HOUR_P1 SBIN WORD STATIC;
 
/**/
/*   Ignore all records that end before the monitored span      */
/**/
     DO WHILE (SHEET_RECORD.SIGN.END_TIME.UTS <= OPT.START_TIME.UTS
               AND SHEET_KEY.REST.RES.TEXT = DI_RES.TEXT);
       CALL M$READ (FPT_READ_SHEET);
     END;  /* do while record.end_time < current time */
     IF SHEET_KEY.REST.RES.TEXT ~= DI_RES.TEXT
       THEN
         DO;
           ERROR_CODE.ERR# = %DEG$EMPTY_DISPLAY#;
           CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(DI_RES));
           GOTO BAILOUT;
         END;    /*  do if resource name don't match  */
/**/
/*  Move the first signup record up to at least the requested start time */
/**/
     IF SHEET_RECORD.SIGN.START_TIME.UTS < OPT.START_TIME.UTS
       THEN
           SHEET_RECORD.SIGN.START_TIME.UTS = OPT.START_TIME.UTS;
/**/
/*  Initialize curr_time_slot  */
/**/
     CURR_HOUR = OPT.START_TIME.UTS;
     CURR_DATE = ' ';
/**/
     DO WHILE (OPT.END_TIME.UTS > CURR_HOUR);
       CALL UTS_TO_STRING (CURR_HOUR, TEXT_C);
       IF SUBSTR(TEXT_C.NAME#,6,8) ~= CURR_DATE THEN
         DO;
           IF CURR_DATE ~= ' ' THEN
             DO;
/**/
/*  Get out if there is no more event for the rest of the period */
/**/
               IF SHEET_RECORD.SIGN.START_TIME.UTS >= OPT.END_TIME.UTS
                  OR SHEET_KEY.REST.RES.TEXT ~= DI_RES.TEXT
                 THEN
                   GOTO BAILOUT;
/**/
               DISPLAY_LINE_ = '       ------------------------------------';
               CALL M$WRITE (FPT_WRITE_LO);
               IF SUBSTR(TEXT_C.NAME#,0,5) > '00:00' THEN
                 DO;
                   SUBSTR(TEXT_C.NAME#,0,5) = '00:00';
                   CALL XUD$UTS_DIFF_25TH(CURR_HOUR,CURR_HOUR,0);
                   CURR_HOUR=(CURR_HOUR/%UTS_25TH_HOUR#);
                   CALL XUD$UTS_ADJ_25TH(CURR_HOUR,0,
                        CURR_HOUR*%UTS_25TH_HOUR#);
                 END;  /* do if first hour is not the zero hour */
             END;  /* do if this is not the first day displayed  */
           DISPLAY_LINE_ = '  ';
           CALL M$WRITE (FPT_WRITE_LO);
           CALL CONCAT(DISPLAY_LINE_, '      ',
                       SUBSTR(SHEET_KEY.REST.RES.TEXT,0,
                              SHEET_KEY.REST.RES.C),
                       ' schedule on ', SUBSTR(TEXT_C.NAME#,6,8));
           CALL M$WRITE (FPT_WRITE_LO);
           DISPLAY_LINE_ = '  ';
           CALL M$WRITE (FPT_WRITE_LO);
           CURR_DATE = SUBSTR(TEXT_C.NAME#,6,8);
           END;  /* put out title if date changes  */
 
       DISPLAY_LINE_ = '       ------------------------------------';
       CALL M$WRITE (FPT_WRITE_LO);
       DISPLAY_LINE_ = '  ';
       CALL INSERT (DISPLAY_LINE_, 0, ,SUBSTR(TEXT_C.NAME#,0,5), '- ');
       FIRST_TIME = '1'B;
       CALL XUD$UTS_ADJ_25TH(CURR_HOUR_P1,CURR_HOUR,%UTS_25TH_HOUR#);
       DO UNTIL (SHEET_RECORD.SIGN.START_TIME.UTS >= CURR_HOUR_P1 OR
                 SHEET_KEY.REST.RES.TEXT ~= DI_RES.TEXT);
         IF SHEET_KEY.REST.RES.TEXT = DI_RES.TEXT AND
            SHEET_RECORD.SIGN.START_TIME.UTS >= CURR_HOUR AND
            SHEET_RECORD.SIGN.START_TIME.UTS < CURR_HOUR_P1
           THEN
             DO;
               CALL INSERT (DISPLAY_LINE_, 7, , '|  ',
                 SUBSTR(SHEET_RECORD.SIGN.REASON.TEXT,0,30),'  |');
               SHEET_RECORD.SIGN.START_TIME.UTS = CURR_HOUR_P1;
               CALL M$WRITE (FPT_WRITE_LO);
             END;  /* print event in the current slot */
         ELSE
           IF FIRST_TIME THEN
             DO;
               SUBSTR(DISPLAY_LINE_,7,1) = '|';
               SUBSTR(DISPLAY_LINE_,42,1) = '|';
               FIRST_TIME = '0'B;
               CALL M$WRITE (FPT_WRITE_LO);
             END;  /* output an empty line if first time  */
 
         DISPLAY_LINE_ = ' ';
         IF SHEET_RECORD.SIGN.START_TIME.UTS >= SHEET_RECORD.SIGN.END_TIME.UTS
          AND SHEET_KEY.REST.RES.TEXT = DI_RES.TEXT
           THEN
             DO;
               CALL M$READ (FPT_READ_SHEET);
             END;  /* do if the current signup record has been exhausted */
 
         END;  /* do until no more events fall within this hour  */
/**/
 
/*  Increment current time slot to the next hour                    */
/**/
         CURR_HOUR=CURR_HOUR_P1;
         CALL XUD$UTS_ADJ_25TH(CURR_HOUR_P1,CURR_HOUR,
              %UTS_25TH_HOUR#);
     END;  /*  DO until the entire span of requested time has been covered */
/**/
BAILOUT: ;
     DISPLAY_LINE_ = '       ------------------------------------';
     CALL M$WRITE (FPT_WRITE_LO);
     RETURN;
/**/
     END DISPLAY_DAILY_FORMAT;
 
DISPLAY_WEEKLY_FORMAT: PROC;
 
    RETURN;
 
    END DISPLAY_WEEKLY_FORMAT;
 
DISPLAY_MONTHLY_FORMAT: PROC;
 
    RETURN;
 
    END DISPLAY_MONTHLY_FORMAT;
 
     END DISPLAY_ONE_RES;
/**/
     END PROCESS_DISPLAY;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_FLUSH: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
/**/
/*  LOCAL AUTO  */
/**/
DCL FLUSH_COUNT SBIN WORD;
DCL 1 CURR_RES CALIGNED,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(31) CALIGNED;
DCL TEMP_ERR BIT(36);                   /* For non-GIMME errors               */
%EJECT;
/**/
/*  Digest parse nodes.                                                       */
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF NOT OPT.RESOURCE.PRESENT
      THEN
        DO;
          OPT.RESOURCE.RES.C = 1;
          OPT.RESOURCE.RES.TEXT = '?';
          END;
     CALL CHECK_RESOURCE(1,1) ALTRET(BAILOUT);
     IF NOT OPT.START_TIME.PRESENT
      THEN
        OPT.START_TIME.UTS = BITBIN('000000000001'O);
     IF NOT OPT.END_TIME.PRESENT
      THEN
        OPT.END_TIME.UTS = NOW_UTS;
     IF OPT.END_TIME.UTS > NOW_UTS THEN
        DO;
          ERROR_CODE.ERR# = %DEG$CANT_CUR_FLUSH#;
/*E* ERROR: DEG-DEG$CANT_CUR_FLUSH#-2
   MESSAGE: You may not FLUSH current records.
*/
          CALL XUR$ERRMSG (ERROR_CODE);
          GOTO BAILOUT;
          END;
%EJECT;
/**/
/*  DO IT!  */
/**/
     FLUSH_COUNT = 0;
     FPT_PFIL_SHEET.V.BOF# = %YES#;
     CALL M$PFIL (FPT_PFIL_SHEET) ALTRET(BAILOUT);
     FPT_READ_SHEET.V.KEYS# = '0'B;     /* Sequential from here!              */
     SHEET_RECORD.TYPE = %RT_ALIAS#;    /* To prime pump                      */
     DO WHILE (SHEET_RECORD.TYPE ~= %RT_END#);
        CALL M$READ(FPT_READ_SHEET) ALTRET(BAILOUT);
        CURR_RES.C = SHEET_KEY.REST.RES.C;
        CURR_RES.TEXT = SHEET_KEY.REST.RES.TEXT;
        CALL X$WILDTCMP(CURR_RES,OPT.RESOURCE.RES,TEMP_ERR) ALTRET(GET_NEXT);
        IF SHEET_RECORD.SIGN.END_TIME.UTS <= OPT.END_TIME.UTS
           AND SHEET_KEY.REST.UTS >= OPT.START_TIME.UTS
           AND SHEET_RECORD.TYPE = %RT_SIGN# THEN
            DO;
              FLUSH_COUNT = FLUSH_COUNT +1;
              CALL M$DELREC (FPT_DELREC_SHEET) ALTRET(BAILOUT);
              END;
GET_NEXT: ;
         END;                           /* END DO WHILE                       */
%EJECT;
/**/
/*  Cleanup  */
/**/
     IF FLUSH_COUNT = 0
      THEN
        DO;
          ERROR_CODE.ERR# = %DEG$EMPTY_FLUSH#;
/*E* ERROR: DEG-DEG$EMPTY_FLUSH#-2
   MESSAGE: No flushable records were found for %U1.
*/
          CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(OPT.RESOURCE.RES));
          GOTO BAILOUT;
          END;
/**/
     RETURN;
/**/
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_FLUSH;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_STRETCH: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL MUNGE_PARTS ENTRY(1) ALTRET;
DCL INSURE_PARTS ENTRY(1) ALTRET;
DCL CHECK_RANGE ENTRY ALTRET;
DCL CHECK_RESOURCE ENTRY(2) ALTRET;
DCL CHECK_OWNERSHIP ENTRY ALTRET;
DCL ENQ_SHEET ENTRY ALTRET;
DCL SIGNUP_EVENT ENTRY(2) ALTRET;
DCL DELETE_EVENT ENTRY(1) ALTRET;
/**/
/*  LOCAL AUTO  */
/**/
%SHEET_KEY (NAME = STASH_KEY,STCLASS = " ");
%SHEET_RECORD (NAME = STASH_RECORD,STCLASS = " ");
%EJECT;
/**/
/*  Setup.                                                                    */
/**/
     STASH_KEY = '0'B;
/**/
     CALL MUNGE_PARTS (OUT_BLK) ALTRET(BAILOUT);
     IF OPT.RESOURCE.PRESENT
      THEN                              /* Check RES before getting the rest  */
        CALL CHECK_RESOURCE(1,0) ALTRET(BAILOUT);
     CALL INSURE_PARTS (%RESOURCE_PM#|%ID_PM#|%END_TIME_PM#) ALTRET(BAILOUT);
     CALL CHECK_OWNERSHIP ALTRET(BAILOUT);
/**/
/*  Prepare for much waving of plucked chickens.                              */
/**/
     CALL ENQ_SHEET ALTRET(BAILOUT);
/**/
/*  CHECK_OWNERSHIP left us with the instance.                                */
/**/
/*  Remember key and record in case we are unable to stretch.                 */
/**/
     STASH_KEY = SHEET_KEY;
     STASH_RECORD = SHEET_RECORD;
/**/
/*  Delete this event.                                                        */
/**/
     CALL DELETE_EVENT (STASH_RECORD) ALTRET(BAILOUT);
/**/
/*  Set up the new range and try it.                                          */
/**/
     OPT.START_TIME = OPT.ID_TIME;
     CALL CHECK_RANGE ALTRET(BAD_STRETCH);
/**/
/*  Create the new event from the old.                                       */
/**/
     STASH_RECORD.SIGN.REQ_END_TIME = OPT.END_TIME.UTS;
     CALL SIGNUP_EVENT (STASH_RECORD,STASH_KEY) ALTRET(BAD_STRETCH);
/**/
     RETURN;
/**/
BAD_STRETCH: ;
/**/
/*  If we have deleted this entry, better put it back!                        */
/**/
     IF STASH_KEY ~= '0'B
      THEN
        DO;
          CALL SIGNUP_EVENT (STASH_RECORD,STASH_KEY) ALTRET(SIGH);
SIGH:     END;
/**/
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_STRETCH;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
PROCESS_USE: PROC (OUT_BLK);
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  PARAMETERS  */
/**/
%PARSE$OUT (NAME=OUT_BLK,
            STCLASS=" ");
/**/
/*  ENTRY DCLS  */
/**/
DCL OPEN_SIGNUPS ENTRY ALTRET;
/**/
/*  LOCAL STATIC  */
/**/
%FPT_FID (FPTN = FPT_FID,
          NAME = SHEET_NAME,
          ACCT = SHEET_ACCT,
          PASS = SCUM,
          SACCT = NO,                   /* Don't scrub our default account!   */
          ASN = SCUM,
          WSN = SCUM,
          SN = SCUM,
          STCLASS = STATIC);
%VLP_NAME (FPTN = SCUM,
           STCLASS = STATIC);
%EJECT;
     FPT_FID.TEXTFID_ = VECTOR(OUT_BLK.SUBLK$(0) ->
                                OUT$SYM.TEXTC$ -> TEXT$C.TEXT);
     SHEET_ACCT.ACCT# = M$LM$ -> F$DCB.ACCT#; /* Default account to same as us*/
     CALL M$FID (FPT_FID) ALTRET (BAD_FID);
     CALL OPEN_SIGNUPS ALTRET(BAILOUT);
     RETURN;
/**/
BAD_FID: ;
     ERROR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     CALL XUR$ERRMSG (ERROR_CODE,M$SIGN_SHEET#);
BAILOUT: ;
     RETURN;
/**/
     END PROCESS_USE;
