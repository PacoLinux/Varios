VERSION E05

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:1    
        1        1        /*M* UMF$FID  Monitor service to process a fid                                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P* NAME: M$FID
        8        8             PURPOSE: To process an input FID
        9        9             DESCRIPTION: M$FID takes an input FID and breaks it up into its
       10       10             component parts. These parts are stored in the caller's data area
       11       11             in a format compatible with M$OPEN. M$FID ALTRETURNs if an error
       12       12             is encountered.
       13       13             REFERENCE: Specification file section 12.0, document #0227               */
       14       14        /*D* NAME: M$FID
       15       15             CALL: M$FID is called by:
       16       16                    CALL M$FID(FID_FPT) ALTRET(FID_ALT);
       17       17             ENVIRONMENT: Master mode
       18       18             INPUT: 1) FID text string to process passed from user in FPT
       19       19                    2) Bits describing which output fields to SCRUB on entry
       20       20             OUTPUT: 1) User data areas passed from user in FPT
       21       21                     2) B$JIT.ERR if M$FID ALTRETURNs
       22       22             DESCRIPTION: M$FID accepts TEXTFID(the input fid string) from the
       23       23            caller and fills the caller's data areas(also passed) for
       24       24                1) NAME,
       25       25                2) ACCOUNT,
       26       26                3) PASSWORD
       27       27                4) WORK STATION,
       28       28                5) ASSIGNMENT TYPE,
       29       29                6) RESOURCE, and
       30       30                7) SERIAL NUMBER LIST
       31       31             as they are found(if they are found). If a field is successfully
       32       32             filled, the corresponding bit in RESULTS(another user data field)
       33       33             is set. If the bit is not set, the corresponding field will be
       34       34             unchanged if the respective SCRUB bit is reset, otherwise it will
       35       35             contain a null value.
       36       36        */
       37       37        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:2    
       38       38        /*E* ERROR: UMF-E$NOFID-4
       39       39             MESSAGE: No TEXTFID to process
       40       40             MESSAGE1: Either TEXTFID contained only blanks or a NIL pointer
       41       41                       to TEXTFID was passed.
       42       42             DESCRIPTION: Either the pointer to TEXTFID=ADDR(NIL) or
       43       43             TEXTFID contains only blanks.
       44       44        */
       45       45        /*E* ERROR: UMF-E$BADFID-4
       46       46             MESSAGE: Illegal FID
       47       47             MESSAGE1: The string passed does not represent a valid FID.
       48       48             MESSAGE2: TEXTFID contained an illegal combination of
       49       49             delimiters(#,/,.,@) describing an illegal FID
       50       50        */
       51       51        /*E* ERROR: UMF-E$FIDOFLOW-4
       52       52            MESSAGE: Some field is too big to be part of a legal FID
       53       53            MESSAGE1: Some FID field was too small to hold its requested contents
       54       54        */
       55       55        /*E* ERROR: UMF-E$BADFNME-4
       56       56            MESSAGE: Bad file name.
       57       57            MESSAGE1: A permanent file name must consist of 1 to 31 characters:
       58       58                      alphanumeric, _, -, $, or :.  A standard-format ANS tape
       59       59                      name must be 1 to 17 characters:  upper case, numeric,
       60       60                      ! " % & ' ( ) * + , . / ? ; : < > -.
       61       61        */
       62       62        /*E* ERROR: UMF-E$BADACCT-4
       63       63            MESSAGE: Bad file account.
       64       64            MESSAGE1: An account name consists of 1 to 8 non-control,
       65       65                      7-bit ASCII characters.
       66       66        */
       67       67        /*E* ERROR: UMF-E$BADPASS-4
       68       68            MESSAGE: Bad file password.
       69       69        */
       70       70        /*E* ERROR: UMF-E$BADSER-4
       71       71            MESSAGE: Bad packset or serial number.
       72       72        */
       73       73        /*E* ERROR: UMF-E$SERTOOSMALL-4
       74       74            MESSAGE: Too many serial numbers.
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:3    
       75       75            MESSAGE1: The FID has more serial numbers than were provided for in VLP_SN.
       76       76        */
       77       77        /*E* ERROR: UMF-E$INVWSN-4
       78       78            MESSAGE: Bad workstation name.
       79       79        */
       80       80        /*E* ERROR: UMF-E$INVRES-4
       81       81            MESSAGE: Invalid resource name.
       82       82        */
       83       83        /*E*   ERROR: UMF-E$NOFIELD-4
       84       84             MESSAGE: Required FID field missing
       85       85            MESSAGE1: A FID element was found for which no destination field was provided.
       86       86        */
       87       87        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:4    
       88       88        UMF$FID: PROC;
       89       89        /**/
       90       90        /*  INCLUDE FILES  */
       91       91        /**/
       92       92        %INCLUDE B$JIT_C;
       93      406        %INCLUDE CP_6;
       94     5965        %INCLUDE UM$CP6V_C;
       95     6152        %INCLUDE B_ERRORS_C;
       96     7279        %INCLUDE CP_6_SUBS;
       97     7819        %INCLUDE B$TABLES_C;
       98     7927        /**/
       99     7928        /*  SUBS  */
      100     7929        /**/
      101     7930           %EQU TRUE#  = 1;
      102     7931           %EQU FALSE# = 0;
      103     7932        /**/
      104     7933           %EQU PROHIBITED# = 1;
      105     7934           %EQU ALLOWED# = 2;
      106     7935           %EQU REQUIRED# = 3;
      107     7936        /**/
      108     7937           %EQU NUM_RESOURCE_TYPES# = 9;
      109     7938           %EQU NUM_OPLABELS# = 12;
      110     7939           %EQU MAX_LEXEME# = 40;
      111     7940        /**/
      112     7941           %EQU NOT_FOUND#  = 0;
      113     7942           %EQU BLANK_CHAR# = 1;
      114     7943           %EQU GARBAGE_CHAR# = 1;              /* Consider garbage as a space        */
      115     7944           %EQU DELIM_CHAR# = 2;
      116     7945           %EQU QUOTE_CHAR# = 3;
      117     7946        /**/
      118     7947           %EQU V_PS#       = 0;
      119     7948           %EQU TEXTFID_PS# = 1;
      120     7949           %EQU NAME_PS#    = 2;
      121     7950           %EQU ACCT_PS#    = 3;
      122     7951           %EQU PASS_PS#    = 4;
      123     7952           %EQU SN_PS#      = 5;
      124     7953           %EQU WSN_PS#     = 6;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:5    
      125     7954           %EQU ASN_PS#     = 7;
      126     7955           %EQU RES_PS#     = 8;
      127     7956           %EQU RESULTS_PS# = 9;
      128     7957        /**/
      129     7958           %SUB FPT$FID_V$# = B$PS0$;
      130     7959           %SUB TEXTFID$#   = B$PS1$;
      131     7960           %SUB NAME$#      = B$PS2$;
      132     7961           %SUB ACCT$#      = B$PS3$;
      133     7962           %SUB PASS$#      = B$PS4$;
      134     7963           %SUB SERIAL$#    = B$PS5$;
      135     7964           %SUB WSN$#       = B$PS6$;
      136     7965           %SUB ASN$#       = B$PS7$;
      137     7966           %SUB RESOURCE$#  = B$PS8$;
      138     7967           %SUB RESULTS$#   = B$PS9$;
      139     7968        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:6    
      140     7969        /**/
      141     7970        /*  BASED DATA  */
      142     7971        /**/
      143     7972        %B$JIT0;
      144     8061    1       2 * BIT(1);                         /* REST OF JIT NOT NEEDED             */
      145     8062    1   DCL ASN$FIELD CHAR(1) BASED CALIGNED;
      146     8063    1   DCL RESOURCE$FIELD CHAR(4) BASED CALIGNED;
      147     8064    1   DCL 1 RESOURCE$FIELD_ BASED CALIGNED,
      148     8065    1         2 DV CHAR(2) CALIGNED,
      149     8066    1         2 NN CHAR(2) CALIGNED;
      150     8067    1   DCL WSN$FIELD CHAR(8) BASED CALIGNED;
      151     8068    1   DCL 1 NAME$FIELD BASED CALIGNED,
      152     8069    1         2 LEN UBIN BYTE CALIGNED,         /* USED TO MOVE LEN AS A BYTE         */
      153     8070    1         2 STRING CHAR(MAX_NAME);
      154     8071    1   DCL ACCT$FIELD CHAR(FIELD_SIZE) BASED CALIGNED;
      155     8072    1   DCL PASS$FIELD BASED CALIGNED CHAR(FIELD_SIZE);
      156     8073    1   DCL 1 TEXT$C BASED CALIGNED,
      157     8074    1         2 LEN UBIN BYTE UNAL,
      158     8075    1         2 STRING CHAR(TEXT$C.LEN);
      159     8076    1   DCL 1 SERIAL$FIELD BASED CALIGNED,
      160     8077    1         2 NUM CHAR(4),                    /* USED TO MOVE AS BYTES INSTEAD      */
      161     8078    1         2 SERIAL(0:0) CHAR(6);            /* OF AS BITS                         */
      162     8079    1   DCL SEARCH$STR CHAR(TEXTSIZE) BASED CALIGNED;
      163     8080           %FPT$FID_V;
      164     8085                                                /* STRING DUE TO HARDWARE PROBLEMS    */
      165     8086    1   DCL RESULTS$FIELDB BASED CALIGNED CHAR(FIELD_SIZE);
      166     8087        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:7    
      167     8088        /**/
      168     8089        /*  CONSTANTS  */
      169     8090        /**/
      170     8091    1   DCL CHAR_ONEB UBIN CONSTANT INIT(1);
      171     8092    1   DCL CHAR_ONE REDEF CHAR_ONEB CHAR(4);
      172     8093    1   DCL 1 SEARCH_TBL CONSTANT ALIGNED,
      173     8094    1         2 *(0:511) UBIN BYTE UNAL
      174     8095    1           INIT(%GARBAGE_CHAR#*32,         /* NUL through US                     */
      175     8096    1           %BLANK_CHAR#,                   /* BLANK                              */
      176     8097    1           0*2,                            /* ! "                                */
      177     8098    1           %DELIM_CHAR#,                   /* #                                  */
      178     8099    1           0*3,                            /* $ % &                              */
      179     8100    1           %QUOTE_CHAR#,                   /* '                                  */
      180     8101    1           0*6,                            /* ( through -                        */
      181     8102    1           %DELIM_CHAR#*2,                 /* . /                                */
      182     8103    1           0*16,                           /* 0 through ?                        */
      183     8104    1           %DELIM_CHAR#,                   /* @                                  */
      184     8105    1           0*26,                           /* A through Z                        */
      185     8106    1           0*4,                            /* [ through ^                        */
      186     8107    1           0,                              /* _                                  */
      187     8108    1           0,                              /* ` (grave accent)                   */
      188     8109    1           0*26,                           /* a through z                        */
      189     8110    1           0*5,                            /* { through DEL                      */
      190     8111    1           %GARBAGE_CHAR#*384);            /* unprintably high                   */
      191     8112        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:8    
      192     8113        /**/
      193     8114        /*  LOCAL AUTO  */
      194     8115        /**/
      195     8116        %VLR_FID(FPTN = RESULTS_FID,STCLASS=AUTO);
      196     8135    1   DCL RESULTS_FIDB REDEF RESULTS_FID CHAR(40); /* USED TO MOVE RESULTS AS BYTES */
      197     8136    1   DCL 1 OLD_RESULTS REDEF RESULTS_FID,
      198     8137    1         2 NAME BIT(1),
      199     8138    1         2 ACCT BIT(1),
      200     8139    1         2 PASS BIT(1),
      201     8140    1         2 SN BIT(1),
      202     8141    1         2 WSN BIT(1),
      203     8142    1         2 ASN BIT(1),
      204     8143    1         2 RES BIT(1),
      205     8144    1         2 * BIT(2) UNAL,
      206     8145    1         2 NAME_TYPE UBIN(2) UNAL,
      207     8146    1         2 * BIT(61) UNAL,
      208     8147    1         2 * CHAR(32) UNAL;
      209     8148    1   DCL ERR_RETURN REMEMBER;                /* FOR USE WITH ERROR UNWIND          */
      210     8149    1   DCL 1 LEXEME,                           /* CURRENT LEXEME.                    */
      211     8150    1         2 LEN UBIN BYTE UNAL,
      212     8151    1         2 STRING CHAR(%MAX_LEXEME#),
      213     8152    1         2 OCTAL_STRING(0:%(3*MAX_LEXEME#-1)) REDEF STRING UBIN(3) UNAL;
      214     8153    1   DCL UC_LEXEME_START CHAR(4);
      215     8154    1   DCL LCHAR CHAR(1);                      /* CHARACTER IMMEDIATELY              */
      216     8155                                                /* PRECEEDING CURRENT LEXEME. IT      */
      217     8156                                                /* WILL BE BLANK IF NO PRECEEDING*/
      218     8157                                                /* CHARACTER AND A DELIMITER OR       */
      219     8158                                                /* BLANK OTHERWISE                    */
      220     8159    1   DCL NCHAR CHAR(1);                      /* CHARACTER IMMEDIATELY              */
      221     8160                                                /* FOLLOWING CURRENT LEXEME.          */
      222     8161                                                /* IF WILL BE BLANK IF AT END OF      */
      223     8162                                                /* STRING, OTHERWISE IT WILL BE       */
      224     8163                                                /* BLANK OR A DELIMITER               */
      225     8164    1   DCL FOUND_INDEX SBIN WORD;              /* INDEX OF FOUND DELIMITER           */
      226     8165    1   DCL CUR_INDEX SBIN WORD;                /* INDEX OF CURRENT LEXEME            */
      227     8166    1   DCL CHAR_TYPE SBIN WORD;
      228     8167    1   DCL CURR_LEXEME_TYPE SBIN WORD;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:9    
      229     8168    1   DCL ASN  UBIN BYTE UNAL;                /* TEMPORARY ASN  FIELD               */
      230     8169    1   DCL ASNB REDEF ASN CHAR(1);             /* USED TO MOVE ASN AS A BYTE         */
      231     8170                                                /* STRING DUE TO HARDWARE PROBLEMS    */
      232     8171    1   DCL MAX_NAME SBIN WORD;
      233     8172    1   DCL FIELD_SIZE SBIN WORD;
      234     8173    1   DCL 1 CHECK,
      235     8174    1         2 PAOSF BIT(1) UNAL,              /* Prohibit Acct on Star-File         */
      236     8175    1         2 PPOSF BIT(1) UNAL,              /* Prohibit Psn on Star-File          */
      237     8176    1         2 PWODF BIT(1) UNAL,              /* Prohibit Wsn on Disk-File          */
      238     8177    1         2 CCHARS BIT(1) UNAL,             /* Check for illegal charaters        */
      239     8178    1         2 OLDFPT BIT(1) UNAL;
      240     8179    1   DCL I SBIN WORD;
      241     8180    1   DCL TEXTBOUND SBIN WORD;
      242     8181    1   DCL TEXTSIZE SBIN WORD;
      243     8182    1   DCL T$ PTR;                             /* TEMPORARY POINTER                  */
      244     8183    1   DCL ERROR BIT(1) ALIGNED;
      245     8184        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:10   
      246     8185        /**/
      247     8186        /*  SYMREFS  */
      248     8187        /**/
      249     8188    1   DCL B$JIT$ PTR SYMREF;
      250     8189    1   DCL B$PS0$ PTR SYMREF;
      251     8190    1   DCL B$PS1$ PTR SYMREF;
      252     8191    1   DCL B$PS2$ PTR SYMREF;
      253     8192    1   DCL B$PS3$ PTR SYMREF;
      254     8193    1   DCL B$PS4$ PTR SYMREF;
      255     8194    1   DCL B$PS5$ PTR SYMREF;
      256     8195    1   DCL B$PS6$ PTR SYMREF;
      257     8196    1   DCL B$PS7$ PTR SYMREF;
      258     8197    1   DCL B$PS8$ PTR SYMREF;
      259     8198    1   DCL B$PS9$ PTR SYMREF;
      260     8199        %B$XL_UPPER( NAME=EMH_UC_XLATE_TBL );
      261     8203        /**/
      262     8204        /*  ENTRY DCLS  */
      263     8205        /**/
      264     8206    1   DCL HFF$DSIZ ENTRY(2) ALTRET;
      265     8207    1   DCL HFF$NILERASE ENTRY(1) ALTRET;
      266     8208        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:11   
      267     8209        /******************************************************************************/
      268     8210        /*                                                                            */
      269     8211        /*      DRIVER STARTS HERE                                                    */
      270     8212        /*                                                                            */
      271     8213        /******************************************************************************/
      272     8214    1      REMEMBER ERR_EXIT IN ERR_RETURN;
      273     8215    1      CALL INITIALIZE;
      274     8216    1      CALL GET_NEXT_LEXEME;
      275     8217    1      IF LCHAR = ' '
      276     8218    1      THEN
      277     8219    1           IF NCHAR = ' '
      278     8220    1           THEN
      279     8221    1                CALL SINGLE_LEXEME;
      280     8222    1           ELSE
      281     8223    1                CALL NORMAL_START;
      282     8224    1      ELSE
      283     8225    1           IF LCHAR = '/'
      284     8226    1           THEN
      285     8227    1                CALL NAME_AND_REST;
      286     8228    1           ELSE
      287     8229    1                CALL ERR_PROC(%E$BADFID);
      288     8230    1      IF FOUND_INDEX<TEXTBOUND
      289     8231    1      THEN
      290     8232    1           IF SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX)~=' '
      291     8233    1           THEN                            /* REST OF SEARCH$STR MUST BE         */
      292     8234    1                CALL ERR_PROC(%E$BADFID);  /* BLANK                              */
      293     8235    1      ASN$# -> ASN$FIELD = ASNB;           /* STUFF THE TEMPORARY ASN FIELD      */
      294     8236    1   ERR_EXIT: ;
      295     8237    1      CALL HFF$DSIZ(%RESULTS_PS#,FIELD_SIZE);
      296     8238    1      IF FIELD_SIZE = 0
      297     8239    1       THEN
      298     8240    1         GOTO NO_RESULTS;
      299     8241    1      IF CHECK.OLDFPT
      300     8242    1       THEN
      301     8243    1         OLD_RESULTS.NAME_TYPE = RESULTS_FID.TYPE.NAME;
      302     8244    1      RESULTS$# -> RESULTS$FIELDB = RESULTS_FIDB;
      303     8245    1   NO_RESULTS: ;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:12   
      304     8246    1      RETURN;                              /* RETURN TO USER                     */
      305     8247        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:13   
      306     8248        /**/
      307     8249        /* THIS PROCEDURE CHECKS THE STRING POINTED TO BY STRING$ FOR LENGTH          */
      308     8250        /* STRING_BOUND+1 CHARACTER BY CHARACTER AGAINST LOW_CHAR AND HIGH_CHAR       */
      309     8251        /* IT RETURNS RET_VAL=%TRUE# IF ALL CHARACTERS FALL IN THE RANGE LOW_CHAR TO  */
      310     8252        /* HIGH_CHAR AND RET_VAL=%FALSE# OTHERWISE.                                   */
      311     8253        /**/
      312     8254    1   CHECK_RANGE: PROC(RET_VAL,STRING$,STRING_BOUND,LOW_CHAR,HIGH_CHAR);
      313     8255        /**/
      314     8256        /*  PARAMETERS  */
      315     8257        /**/
      316     8258    2   DCL RET_VAL SBIN WORD;
      317     8259    2   DCL STRING$ PTR;
      318     8260    2   DCL STRING_BOUND SBIN WORD;
      319     8261    2   DCL LOW_CHAR CHAR(1);
      320     8262    2   DCL HIGH_CHAR CHAR(1);
      321     8263        /**/
      322     8264        /*  LOCAL AUTO  */
      323     8265        /**/
      324     8266    2   DCL I SBIN WORD;
      325     8267    2   DCL CHAR$ARY(0:0) CHAR(1) BASED(STRING$);
      326     8268        /**/
      327     8269    2      RET_VAL = %TRUE#;
      328     8270    3      DO I = 0 TO STRING_BOUND;
      329     8271    3           IF CHAR$ARY(I)<LOW_CHAR OR CHAR$ARY(I)>HIGH_CHAR
      330     8272    3           THEN
      331     8273    3                RET_VAL = %FALSE#;
      332     8274    3           END;
      333     8275    2      RETURN;
      334     8276    2   END CHECK_RANGE;
      335     8277        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:14   
      336     8278        /**/
      337     8279        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      338     8280        /* DEVICE-ID. IF IT IS, IT IS PLACED INTO THE RESOURCE FIELD AND %TRUE# IS    */
      339     8281        /* RETURNED IN RET_VAL, OTHERWISE NOTHING IS PLACED IN RESOURCE AND %FALSE#   */
      340     8282        /* IS RETURNED.                                                               */
      341     8283        /* NOTE:  THIS ROUTINE SHOULD BE CALLED SPARINGLY SINCE IT WILL LET ALMOST    */
      342     8284        /*        ANY 2 OR 4-CHARACTER FRAMMIS BE A DEVICE-ID.                        */
      343     8285        /**/
      344     8286    1   CHECK_STUFF_DEVICE_ID: PROC(RET_VAL);
      345     8287        /**/
      346     8288    2   DCL RET_VAL SBIN WORD;
      347     8289        /**/
      348     8290    2      RET_VAL = 0;
      349     8291    2      IF LEXEME.LEN=2 OR LEXEME.LEN=4
      350     8292    2      THEN
      351     8293    3      DO;
      352     8294    3           CALL CHECK_RANGE(RET_VAL,ADDR(UC_LEXEME_START),1,'A','Z');
      353     8295    3           IF RET_VAL=1 AND LEXEME.LEN=4
      354     8296    3           THEN
      355     8297    3                CALL CHECK_RANGE(RET_VAL,PINCRC(ADDR(UC_LEXEME_START),2),1,'0','9');
      356     8298    3           END;
      357     8299    2      IF RET_VAL=1
      358     8300    2      THEN
      359     8301    3      DO;
      360     8302    3           ASN = %DEVICE#;
      361     8303    3           RESULTS_FID.ASN = '1'B;
      362     8304    3           RESULTS_FID.RES = '1'B;
      363     8305    3           CALL HFF$NILERASE(%RES_PS#) ALTRET(NO_RES);
      364     8306    4           DO WHILE('0'B);
      365     8307    4   NO_RES:      CALL ERR_PROC(%E$NOFIELD);
      366     8308    4                END;
      367     8309    3           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);
      368     8310    3           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;
      369     8311    3           RESULTS_FID.SINDEX.RES = CUR_INDEX;
      370     8312    3           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;
      371     8313    3           RET_VAL = %TRUE#;
      372     8314    3           END;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:15   
      373     8315    2      RETURN;
      374     8316    2   END CHECK_STUFF_DEVICE_ID;
      375     8317        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:16   
      376     8318        /**/
      377     8319        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      378     8320        /* OPLABEL. IF IT IS, IT IS STUFFED IN RESOURCE FIELD AND %TRUE# IS RETURNED  */
      379     8321        /* IN RET_VAL, OTHERWISE NOTHING IS STUFFED AND %FALSE# IS RETURNED.          */
      380     8322        /*                                                                            */
      381     8323        /* OP-labels by nature don't allow NAME, ACCOUNT, or PASSWORD.                */
      382     8324        /*                                                                            */
      383     8325        /* NOTE:  The following CP-V style op-labels are no longer supported:         */
      384     8326        /*        C1, L1, P1, SI, and PO                                              */
      385     8327        /**/
      386     8328    1   CHECK_STUFF_OPLABEL: PROC(RET_VAL);
      387     8329        /**/
      388     8330        /*  PARAMETERS  */
      389     8331        /**/
      390     8332    2   DCL RET_VAL SBIN WORD;
      391     8333        /**/
      392     8334    2   DCL 1 OPLABEL_TABLE(0:%NUM_OPLABELS#) CONSTANT UNAL,
      393     8335    2         2 OP_TEXT CHAR (2) INIT('  ',
      394     8336    2           'CP',
      395     8337    2           'LP',
      396     8338    2           'CR',
      397     8339    2           'JE',
      398     8340    2           'JF',                           /* JF                                 */
      399     8341    2           'GR',                           /* GRnn                               */
      400     8342    2           'LO',
      401     8343    2           '  ',                           /* SPARE                              */
      402     8344    2           'ME',
      403     8345    2           'NO',
      404     8346    2           '  ',                           /* SPARE                              */
      405     8347    2           'UC'),
      406     8348    2         2 NN_STATUS UBIN HALF UNAL INIT(0,
      407     8349    2           %ALLOWED#,                      /* CP                                 */
      408     8350    2           %ALLOWED#,                      /* LP                                 */
      409     8351    2           %PROHIBITED#,                   /* CR                                 */
      410     8352    2           %PROHIBITED#,                   /* JE                                 */
      411     8353    2           %PROHIBITED#,                   /* JF                                 */
      412     8354    2           %ALLOWED#,                      /* GRnn                               */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:17   
      413     8355    2           %PROHIBITED#,                   /* LO                                 */
      414     8356    2           0,                              /* SPARE                              */
      415     8357    2           %PROHIBITED#,                   /* ME                                 */
      416     8358    2           %PROHIBITED#,                   /* NO                                 */
      417     8359    2           0,                              /* SPARE                              */
      418     8360    2           %ALLOWED#);                  /* UC                                 */
      419     8361        /**/
      420     8362    2           RET_VAL = %FALSE#;              /* Nothing yet                        */
      421     8363    2           IF LEXEME.LEN ~= 2
      422     8364    2            AND LEXEME.LEN ~= 4
      423     8365    2            THEN                           /* CAN'T be an OP-label               */
      424     8366    2              GOTO FINIS_OP;
      425     8367        /**/
      426     8368        /*  Scan table of op-label prefixes for a match.                              */
      427     8369        /**/
      428     8370    3           DO I = %NUM_OPLABELS# DOWNTO 1;
      429     8371    3             IF SUBSTR(UC_LEXEME_START,0,2) = OPLABEL_TABLE.OP_TEXT(I)
      430     8372    3               THEN
      431     8373    3                 EXIT;
      432     8374    3                END;
      433     8375    2           IF I=0
      434     8376    2            THEN                           /* NO MATCH                           */
      435     8377    2                GOTO FINIS_OP;
      436     8378        /**/
      437     8379        /*  Op-label prefix is OK.  Check for 'nn' suffix.                            */
      438     8380        /**/
      439     8381    2           IF LEXEME.LEN=2
      440     8382    2            THEN                           /* The op-lab has no 'nn' after it    */
      441     8383    2              IF OPLABEL_TABLE.NN_STATUS(I) = %REQUIRED#
      442     8384    2               THEN                        /* Required 'nn' is missing           */
      443     8385    2                  ;
      444     8386    2              ELSE
      445     8387    2                  RET_VAL = %TRUE#;        /* OK!                                */
      446     8388    2           ELSE                       /* The op-lab has some 'nn' after it  */
      447     8389    2             IF OPLABEL_TABLE.NN_STATUS(I) = %PROHIBITED#
      448     8390    2              THEN                         /* Illegal 'nn' on op-label           */
      449     8391    2                ;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:18   
      450     8392    2             ELSE                          /* 'opnn' is OK.  Check the 'nn'      */
      451     8393    2                CALL CHECK_RANGE(RET_VAL,
      452     8394    2                 PINCRC(ADDR(UC_LEXEME_START),2),
      453     8395    2                       1,
      454     8396    2                       '0',
      455     8397    2                       '9');
      456     8398    2           IF RET_VAL = %FALSE#
      457     8399    2            THEN                           /* We had troubles with 'nn'          */
      458     8400    2              GOTO FINIS_OP;
      459     8401        /**/
      460     8402        /*  We are happy with the op-label.  Package it up for the caller.            */
      461     8403        /**/
      462     8404    2           RESULTS_FID.RES = '1'B;
      463     8405    2           CALL HFF$NILERASE(%RES_PS#)
      464     8406    3           WHENALTRETURN DO;
      465     8407    3              CALL ERR_PROC(%E$NOFIELD);
      466     8408    3              END;
      467     8409    2           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);
      468     8410    2           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;
      469     8411    2           RESULTS_FID.SINDEX.RES = CUR_INDEX;
      470     8412    2           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;
      471     8413    2           ASN = %DEVICE#;
      472     8414    2           RESULTS_FID.ASN = '1'B;
      473     8415    2           RET_VAL = %TRUE#;
      474     8416    2           ;
      475     8417    2   FINIS_OP: ;
      476     8418    2           RETURN;
      477     8419    2   END CHECK_STUFF_OPLABEL;
      478     8420        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:19   
      479     8421        /**/
      480     8422        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      481     8423        /* RESOURCE. IF IT IS, IT IS STUFFED IN RESOURCE FIELD AND %TRUE# IS RETURNED */
      482     8424        /* IN RET_VAL, OTHERWISE NOTHING IS STUFFED AND %FALSE# IS RETURNED.          */
      483     8425        /**/
      484     8426    1   CHECK_STUFF_RESOURCE: PROC(RET_VAL);
      485     8427        /**/
      486     8428        /*  PARAMETERS  */
      487     8429        /**/
      488     8430    2   DCL RET_VAL SBIN WORD;
      489     8431        /**/
      490     8432    2   DCL TEMP$ PTR;
      491     8433    2   DCL 1 RESOURCE_TABLE(0:%NUM_RESOURCE_TYPES#) CONSTANT UNAL,
      492     8434    2         2 RES_TEXT CHAR(2) INIT('  ',
      493     8435    2           'CG',
      494     8436    2           'DP',
      495     8437    2           'MT',
      496     8438    2           'FT',
      497     8439    2           '  ',                           /* SPARE, USED TO BE 7T           */
      498     8440    2           'LT',
      499     8441    2           'SY',
      500     8442    2           'CL',
      501     8443    2           'OD'),
      502     8444    2         2 NN_STATUS UBIN BYTE UNAL INIT(0,
      503     8445    2           %PROHIBITED#,                   /* CGnn makes no sense                */
      504     8446    2           %ALLOWED#,
      505     8447    2           %ALLOWED#,
      506     8448    2           %ALLOWED#,
      507     8449    2           %ALLOWED#,
      508     8450    2           %ALLOWED#,
      509     8451    2           %PROHIBITED#,
      510     8452    2           %PROHIBITED#,
      511     8453    2           %ALLOWED#),
      512     8454    2         2 ASN_CODE UBIN BYTE UNAL INIT(0,
      513     8455    2           %COMGROUP#,
      514     8456    2           %FILE#,
      515     8457    2           %DEVICE#,
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:20   
      516     8458    2           %DEVICE#,
      517     8459    2           %DEVICE#,
      518     8460    2           %TAPE#,
      519     8461    2           %DEVICE#,
      520     8462    2           %DEVICE#,
      521     8463    2           %FILE#);
      522     8464        /**/
      523     8465    2           RET_VAL = %FALSE#;              /* We don't have anything yet!        */
      524     8466    2           IF LEXEME.LEN ~= 2
      525     8467    2            AND LEXEME.LEN ~= 4
      526     8468    2            THEN                           /* COULDN'T be a resource             */
      527     8469    2              GOTO FINIS_RESOURCE;
      528     8470        /**/
      529     8471        /*  Scan table of valid resource prefixes to see whether or not this          */
      530     8472        /*  was supposed to be one.                                                   */
      531     8473        /**/
      532     8474    3           DO I = %NUM_RESOURCE_TYPES# DOWNTO 1;
      533     8475    3                IF SUBSTR(UC_LEXEME_START,0,2) = RESOURCE_TABLE.RES_TEXT(I)
      534     8476    3                  THEN
      535     8477    3                     EXIT;
      536     8478    3                END;
      537     8479    2           IF I = 0
      538     8480    2            THEN                           /* The XX in XX[nn] is unknown res    */
      539     8481    2              GOTO FINIS_RESOURCE;
      540     8482        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:21   
      541     8483        /**/
      542     8484        /*  The resource prefix is valid.  Check for the 'nn' suffix and insure       */
      543     8485        /*  it's legality.                                                            */
      544     8486        /**/
      545     8487    2           IF LEXEME.LEN=2
      546     8488    2           THEN                            /* The device has no 'nn' after it    */
      547     8489    3                DO;
      548     8490    3                  IF RESOURCE_TABLE.NN_STATUS(I) = %REQUIRED#
      549     8491    3                    THEN                   /* Required 'nn' is missing           */
      550     8492    3                      ;
      551     8493    3                  ELSE
      552     8494    3                      RET_VAL = %TRUE#;    /* OK!                                */
      553     8495    3                  END;
      554     8496    2           ELSE                       /* The device has some 'nn' after it  */
      555     8497    2                IF RESOURCE_TABLE.NN_STATUS(I) = %PROHIBITED#
      556     8498    2                 THEN                      /* Illegal 'nn' is on end of dev      */
      557     8499    2                     ;
      558     8500    2                ELSE                       /* 'dvnn' OK.  Check 'nn' validity    */
      559     8501    2                     CALL CHECK_RANGE(RET_VAL,
      560     8502    2                       PINCRC(ADDR(UC_LEXEME_START),2),
      561     8503    2                       1,
      562     8504    2                       '0',
      563     8505    2                       '9');
      564     8506    2           IF RET_VAL = %FALSE#
      565     8507    2            THEN                           /* Problems with 'nn'                 */
      566     8508    2              GOTO FINIS_RESOURCE;
      567     8509        /**/
      568     8510        /*  We are now happy with the resource.  Pack it for shipment to caller.      */
      569     8511        /**/
      570     8512    2           ASN = RESOURCE_TABLE.ASN_CODE(I);
      571     8513    2           RESULTS_FID.ASN = '1'B;
      572     8514    2           RESULTS_FID.RES = '1'B;
      573     8515    2           CALL HFF$NILERASE(%RES_PS#) ALTRET(NO_RES2);
      574     8516    3           DO WHILE('0'B);
      575     8517    3   NO_RES2:   CALL ERR_PROC(%E$NOFIELD);
      576     8518    3              END;
      577     8519    2           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:22   
      578     8520    2           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;
      579     8521    2           RESULTS_FID.SINDEX.RES = CUR_INDEX;
      580     8522    2           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;
      581     8523    2           ;
      582     8524    2   FINIS_RESOURCE: ;
      583     8525    2           RETURN;
      584     8526    2   END CHECK_STUFF_RESOURCE;
      585     8527        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:23   
      586     8528        /**/
      587     8529        /*  THIS PROCEDURE IS CALLED FROM ANYWHERE IN UMF$FID WHEN AN ERROR IS        */
      588     8530        /*  DETECTED.  THE 'CODE' PART OF THE ERROR CODE IS PASSED AND WILL BE USED   */
      589     8531        /*  TO ALTRETURN TO THE USER.                                                 */
      590     8532        /**/
      591     8533    1   ERR_PROC: PROC(ERR_CODE);
      592     8534        /**/
      593     8535    2   DCL ERR_CODE SBIN WORD;
      594     8536        /**/
      595     8537    2      B$JIT$ -> B$JIT.ERR = '251506000004'O;
      596     8538                                                /* FCG-MID = 'UMF' AND SEV = 4        */
      597     8539    2      B$JIT$ -> B$JIT.ERR.CODE = ERR_CODE;
      598     8540    2      UNWIND TO ERR_RETURN;
      599     8541    2   END ERR_PROC;
      600     8542        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:24   
      601     8543        /**/
      602     8544        /* THIS PROCEDURE GETS THE NEXT LEXEME AND CHECKS IT TO SEE IF IT IS A VALID  */
      603     8545        /* WORK STATION NUMBER(WSN). IF IT IS, IT IS STORED AWAY, OTHERWISE THE       */
      604     8546        /* PROCESSOR ERRORS.                                                          */
      605     8547        /**/
      606     8548    1   GET_CHECK_STUFF_WSN: PROC;
      607     8549        /**/
      608     8550    2      IF ASN ~= %DEVICE#
      609     8551    2       AND CHECK.PWODF                     /* AND we care                        */
      610     8552    2       THEN ERROR = '1'B;
      611     8553    2       ELSE ERROR = '0'B;
      612     8554    2      CALL GET_NEXT_LEXEME;
      613     8555    2       IF ERROR
      614     8556    3       THEN DO;
      615     8557    3          IF LEXEME.LEN = 0
      616     8558    3          THEN CALL ERR_PROC(%E$BADFID);       /* WORK STATION NOT ALLOWED FOR       */
      617     8559                                                /* ANY BUT DEVICES                    */
      618     8560                                                /* THIS RESTRICTION MAY BE LIFTED*/
      619     8561                                                /* AT A LATER DATE.                   */
      620     8562    3         END;
      621     8563    2      RESULTS_FID.TYPE.WSN = CURR_LEXEME_TYPE;
      622     8564    2      RESULTS_FID.SINDEX.WSN = CUR_INDEX;
      623     8565    2      RESULTS_FID.CLENGTH.WSN = FOUND_INDEX - CUR_INDEX;
      624     8566    2      CALL HFF$DSIZ (%WSN_PS#,FIELD_SIZE);
      625     8567    2      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)
      626     8568    2      THEN
      627     8569    2        CALL ERR_PROC(%E$INVWSN);
      628     8570    2      IF NCHAR ~= ' '
      629     8571    2      THEN                                 /* WSN MUST BE LAST THING IN FID      */
      630     8572    2           CALL ERR_PROC(%E$BADFID);
      631     8573    2      RESULTS_FID.WSN = '1'B;
      632     8574    2      CALL HFF$NILERASE(%WSN_PS#)  ALTRET(NO_WSN);
      633     8575    3      DO WHILE('0'B);
      634     8576    3   NO_WSN: CALL ERR_PROC(%E$NOFIELD);
      635     8577    3           END;
      636     8578    2      IF LEXEME.LEN > 0
      637     8579    2      THEN                                 /* STORE THE FOUND WSN                */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:25   
      638     8580    2           WSN$# -> WSN$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;
      639     8581    2      ELSE                                 /* STORE SPECIAL 'DANGLING @'         */
      640     8582    2           WSN$# -> WSN$FIELD = '@';
      641     8583    2   END GET_CHECK_STUFF_WSN;
      642     8584        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:26   
      643     8585    1   GET_NAME_AND_REST: PROC;
      644     8586        /**/
      645     8587    2   DCL RES$TYPE CHAR(2) BASED;
      646     8588        /**/
      647     8589    2      CALL GET_NEXT_LEXEME;
      648     8590        /**/
      649     8591    2   NAME_AND_REST: ENTRY;
      650     8592        /**/
      651     8593    2      CALL HFF$DSIZ (%NAME_PS#,MAX_NAME);
      652     8594    2      IF MAX_NAME > 0
      653     8595    2       THEN                                /* Adjust for count in TEXTC          */
      654     8596    2         MAX_NAME = MAX_NAME -1;
      655     8597    2      RESULTS_FID.TYPE.NAME = CURR_LEXEME_TYPE;
      656     8598    2      RESULTS_FID.SINDEX.NAME = CUR_INDEX;
      657     8599    2      RESULTS_FID.CLENGTH.NAME = FOUND_INDEX - CUR_INDEX;
      658     8600    2      IF LEXEME.LEN <= MAX_NAME
      659     8601    2      THEN
      660     8602    3      DO;
      661     8603    3           IF RESULTS_FID.ASN = '0'B
      662     8604    3           THEN
      663     8605    4           DO;
      664     8606    4                RESULTS_FID.ASN = '1'B;
      665     8607    4                ASN = %FILE#;
      666     8608    4                END;
      667     8609    3           ELSE
      668     8610    3                IF ASN = %DEVICE#
      669     8611    3                THEN
      670     8612    3                     IF RESOURCE$# -> RES$TYPE = 'MT'
      671     8613    3                     THEN
      672     8614    3                          ASN = %TAPE#;    /* MT/ MEANS ANS LABELED TAPE(LT)*/
      673     8615    3                     ELSE
      674     8616    3                          IF RESOURCE$# -> RES$TYPE = 'FT'
      675     8617    3                          THEN
      676     8618    3                               CALL ERR_PROC(%E$BADFID);
      677     8619                                                /* FT/ IS AN ILLEGAL FID              */
      678     8620    3           IF LEXEME.LEN>0
      679     8621    3           THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:27   
      680     8622    4           DO;
      681     8623    4                RESULTS_FID.NAME = '1'B;
      682     8624    4                CALL HFF$NILERASE(%NAME_PS#)
      683     8625    5                WHENALTRETURN DO;
      684     8626    5                     CALL ERR_PROC(%E$NOFIELD);
      685     8627    5                     END;
      686     8628    4                NAME$# -> NAME$FIELD.LEN = LEXEME.LEN;
      687     8629    4                NAME$# -> NAME$FIELD.STRING = LEXEME.STRING;
      688     8630    4                IF ASN = %FILE#
      689     8631    4                 AND SUBSTR(LEXEME.STRING,0,1) = '*' /* AND STAR-file            */
      690     8632    4                 AND RESULTS_FID.SN        /* AND PACKSET                        */
      691     8633    4                 AND CHECK.PPOSF           /* AND WE CARE                        */
      692     8634    4                 THEN
      693     8635    4                   CALL ERR_PROC (%E$BADFID);
      694     8636    4                IF ASN = %FILE#
      695     8637    4                 AND SUBSTR(LEXEME.STRING,0,1) ~= '*' /* AND not STAR-file       */
      696     8638    4                 AND CHECK.CCHARS                    /* AND we care about chars. */
      697     8639    4                 AND CURR_LEXEME_TYPE = %UMF$SIMPLE_STRING#
      698     8640    4                  THEN
      699     8641    5                    DO;
      700     8642    5                      CALL INDEX(I,'?',LEXEME.STRING)
      701     8643    6                      WHENRETURN DO;
      702     8644    6                           GOTO BAD_NAME;  /* NAME contains '?'                  */
      703     8645    6                           END;
      704     8646    5                      END;
      705     8647    4                END;
      706     8648    3           IF NCHAR ~= ' '
      707     8649    3           THEN
      708     8650    3                IF NCHAR = '.'
      709     8651    3                THEN
      710     8652    3                     CALL GET_ACCT_AND_REST;
      711     8653    3                ELSE
      712     8654    3                     IF NCHAR = '@'
      713     8655    3                     THEN
      714     8656    3                          CALL GET_CHECK_STUFF_WSN;
      715     8657    3                     ELSE
      716     8658    3                          CALL ERR_PROC(%E$BADFID);
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:28   
      717     8659    3           END;
      718     8660    2      ELSE                                 /* NAME greater than will fit         */
      719     8661    3        DO;
      720     8662    3   BAD_NAME: ;
      721     8663    3           CALL ERR_PROC(%E$BADFNME);      /* Bad file NAME                      */
      722     8664    3           END;
      723     8665    2      RETURN;
      724     8666        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:29   
      725     8667    2   GET_ACCT_AND_REST: PROC;
      726     8668        /**/
      727     8669    3      CALL GET_NEXT_LEXEME;
      728     8670    3      CALL HFF$DSIZ (%ACCT_PS#,FIELD_SIZE);
      729     8671    3      RESULTS_FID.TYPE.ACCT = CURR_LEXEME_TYPE;
      730     8672    3      RESULTS_FID.SINDEX.ACCT = CUR_INDEX;
      731     8673    3      RESULTS_FID.CLENGTH.ACCT = FOUND_INDEX - CUR_INDEX;
      732     8674    3      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)
      733     8675    3      THEN
      734     8676    3        CALL ERR_PROC(%E$BADACCT);         /* Bad file ACCOUNT                   */
      735     8677    3      RESULTS_FID.ACCT = '1'B;
      736     8678    3      ACCT$# -> ACCT$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;
      737     8679    3      IF LEXEME.LEN > 0         /* If really an account               */
      738     8680    3       AND ASN = %FILE#
      739     8681    3       AND RESULTS_FID.NAME
      740     8682    3       AND SUBSTR(NAME$# -> NAME$FIELD.STRING,0,1) = '*' /* AND STAR-file        */
      741     8683    3       AND CHECK.PAOSF                     /* AND we care                        */
      742     8684    3       THEN
      743     8685    3         CALL ERR_PROC(%E$BADFID);         /* STAR-files can't have accounts     */
      744     8686    3      IF NCHAR ~= ' '
      745     8687    3      THEN
      746     8688    3           IF NCHAR = '.'
      747     8689    3           THEN
      748     8690    3                CALL GET_PASS;
      749     8691    3           ELSE
      750     8692    3                IF NCHAR = '@'
      751     8693    3                THEN
      752     8694    3                     CALL GET_CHECK_STUFF_WSN;
      753     8695    3                ELSE
      754     8696    3                     CALL ERR_PROC(%E$BADFID);
      755     8697    3      RETURN;
      756     8698        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:30   
      757     8699    3   GET_PASS: PROC;
      758     8700        /**/
      759     8701    4      CALL GET_NEXT_LEXEME;
      760     8702    4      CALL HFF$DSIZ (%PASS_PS#,FIELD_SIZE);
      761     8703    4      RESULTS_FID.TYPE.PASS = CURR_LEXEME_TYPE;
      762     8704    4      RESULTS_FID.SINDEX.PASS = CUR_INDEX;
      763     8705    4      RESULTS_FID.CLENGTH.PASS = FOUND_INDEX - CUR_INDEX;
      764     8706    4      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)
      765     8707    4      THEN
      766     8708    4        CALL ERR_PROC(%E$BADPASS);         /* Bad file PASSWORD                  */
      767     8709    4      RESULTS_FID.PASS = '1'B;
      768     8710    4      PASS$# -> PASS$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;
      769     8711    4      IF NCHAR = '@'
      770     8712    4      THEN
      771     8713    4           CALL GET_CHECK_STUFF_WSN;
      772     8714    4      ELSE
      773     8715    4           IF NCHAR ~= ' '                 /* WSN ONLY MAY FOLLOW HERE           */
      774     8716    4           THEN
      775     8717    4                CALL ERR_PROC(%E$BADFID);
      776     8718    4   END GET_PASS;
      777     8719    3   END GET_ACCT_AND_REST;
      778     8720    2   END GET_NAME_AND_REST;
      779     8721        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:31   
      780     8722    1   GET_NEXT_LEXEME: PROC;
      781     8723        /**/
      782     8724    2      CURR_LEXEME_TYPE = %UMF$SIMPLE_STRING#;
      783     8725    2      LCHAR = NCHAR;
      784     8726    2      CUR_INDEX = MINIMUM (FOUND_INDEX, TEXTBOUND) + 1;
      785     8727    2      CALL SEARCH(FOUND_INDEX,
      786     8728    2        CHAR_TYPE,
      787     8729    2        SEARCH_TBL,
      788     8730    2        TEXTFID$# -> SEARCH$STR,
      789     8731    2        CUR_INDEX);
      790     8732    2      IF CHAR_TYPE = %QUOTE_CHAR#
      791     8733    2      THEN
      792     8734    3        DO;
      793     8735    3           IF FOUND_INDEX = CUR_INDEX
      794     8736    3           THEN
      795     8737    4                DO;
      796     8738    4                  CURR_LEXEME_TYPE = %UMF$QUOTED_STRING#;
      797     8739    4                  CALL QUOTED_STRING;
      798     8740    4                  END;
      799     8741    3           ELSE
      800     8742    3                IF ((FOUND_INDEX=CUR_INDEX+1) AND
      801     8743    3                  (SUBSTR(TEXTFID$# -> SEARCH$STR,CUR_INDEX,1)='O'))
      802     8744    3                THEN
      803     8745    4                DO;
      804     8746    4                     CURR_LEXEME_TYPE = %UMF$OCTAL_STRING#;
      805     8747    4                     LEXEME.OCTAL_STRING = '0'B;
      806     8748    4                     CALL QUOTED_STRING;
      807     8749    4                     END;
      808     8750    3                ELSE
      809     8751    3                     CALL ERR_PROC(%E$BADFID);
      810     8752    3           UC_LEXEME_START = LEXEME.STRING; /* Quote/oct strings dont XLATE */
      811     8753    3           END;
      812     8754    2      ELSE
      813     8755    3           DO;
      814     8756    3             LEXEME.LEN = FOUND_INDEX-CUR_INDEX;
      815     8757    3             LEXEME.STRING = SUBSTR(TEXTFID$# -> SEARCH$STR,
      816     8758    3               CUR_INDEX,
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:32   
      817     8759    3               LEXEME.LEN);
      818     8760    3             CALL XLATE(UC_LEXEME_START,EMH_UC_XLATE_TBL,LEXEME.STRING);
      819     8761    3             END;
      820     8762    2      IF CHAR_TYPE = %NOT_FOUND#
      821     8763    2      THEN
      822     8764    2           NCHAR = ' ';
      823     8765    2      ELSE
      824     8766    2           NCHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);
      825     8767    2      RETURN;
      826     8768        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:33   
      827     8769    2   QUOTED_STRING: PROC;
      828     8770        /**/
      829     8771    3   DCL SAV_INDEX SBIN WORD;
      830     8772    3   DCL OCT_CHAR CHAR(1);
      831     8773        /**/
      832     8774    3      LEXEME.LEN = 0;
      833     8775    3      I = 0;
      834     8776    4      DO WHILE(1=1);
      835     8777                                                /* LOOK FOR NEXT QUOTE                */
      836     8778    4           FOUND_INDEX = FOUND_INDEX+1;
      837     8779    4           IF FOUND_INDEX > TEXTBOUND OR LEXEME.LEN > 510
      838     8780    4           THEN
      839     8781    4                GOTO BADFID;
      840     8782                                                /* UNBALANCED QUOTE                   */
      841     8783    4           OCT_CHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);
      842     8784    4           IF OCT_CHAR = ''''
      843     8785    4           THEN EXIT;
      844     8786    4           IF CURR_LEXEME_TYPE = %UMF$OCTAL_STRING#
      845     8787    4           THEN
      846     8788    5             DO;
      847     8789    5                IF OCT_CHAR < '0' OR OCT_CHAR > '7' OR I = 3*%MAX_LEXEME#
      848     8790    5                THEN
      849     8791    5                     GOTO BADFID;
      850     8792    5                LEXEME.OCTAL_STRING(I) = ASCBIN(OCT_CHAR);
      851     8793    5                I = I + 1;
      852     8794    5                LEXEME.LEN = (I+2)/3;
      853     8795    5                END;
      854     8796    4           ELSE
      855     8797    5             DO;
      856     8798    5   STUFF_IT:    IF LEXEME.LEN < %MAX_LEXEME#
      857     8799    5                THEN
      858     8800    5                     SUBSTR(LEXEME.STRING, LEXEME.LEN, 1) = OCT_CHAR;
      859     8801    5                LEXEME.LEN = LEXEME.LEN + 1;
      860     8802    5                END;
      861     8803    4           END;
      862     8804                                                /* QUOTED STRING IF ENOUGH ROOM       */
      863     8805    3      IF FOUND_INDEX<TEXTBOUND             /* IF POSSIBLY MORE                   */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:34   
      864     8806    3      THEN
      865     8807    4      DO;
      866     8808    4           SAV_INDEX = FOUND_INDEX+1;
      867     8809    4           CALL SEARCH(FOUND_INDEX,
      868     8810    4             CHAR_TYPE,
      869     8811    4             SEARCH_TBL,
      870     8812    4             TEXTFID$# -> SEARCH$STR,
      871     8813    4             SAV_INDEX);
      872     8814    4           IF SAV_INDEX = FOUND_INDEX
      873     8815    4           THEN
      874     8816    4                IF CHAR_TYPE = %QUOTE_CHAR#
      875     8817    4                THEN
      876     8818    4                     IF FOUND_INDEX < TEXTBOUND
      877     8819    4                       AND CURR_LEXEME_TYPE = %UMF$QUOTED_STRING#
      878     8820    4                     THEN
      879     8821    4                          GOTO STUFF_IT;   /* STUFF THE QUOTE                    */
      880     8822    4                     ELSE
      881     8823    4   BADFID:                CALL ERR_PROC(%E$BADFID);
      882     8824                                                /* UNBALANCED QUOTE                   */
      883     8825    4                ELSE
      884     8826    4                     RETURN;               /* NO MORE QUOTED STRING              */
      885     8827    4           ELSE
      886     8828    4                GOTO BADFID;
      887     8829                                                /* QUOTED STRING MUST BE FOLLOWED*/
      888     8830                                                /* BY A DELIMITER...#,.,/,@,'         */
      889     8831                                                /* BLANK OR END-OF-STRING             */
      890     8832    4           END;
      891     8833    3      CHAR_TYPE = %NOT_FOUND#;
      892     8834                                                /* FOR THE BENEFIT OF                 */
      893     8835                                                /* GET_NEXT_LEXEME                    */
      894     8836    3      RETURN;
      895     8837    3   END QUOTED_STRING;
      896     8838    2   END GET_NEXT_LEXEME;
      897     8839        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:35   
      898     8840        /**/
      899     8841        /* THIS PROCEDURE GETS CONTROL WHEN A SERIAL NUMBER LIST SHOULD FOLLOW. IF    */
      900     8842        /* PROCESSES THE SERIAL NUMBER LIST THEN PASSES CONTROL TO PROCEDURES THAT    */
      901     8843        /* EITHER LOOK FOR NAME.ACCT.PASS OR WSN DEPENDING ON DELIMITER OF SERIAL     */
      902     8844        /* NUMBER LIST.                                                               */
      903     8845        /**/
      904     8846    1   GET_SERIAL_AND_REST: PROC;
      905     8847        /**/
      906     8848    2   DCL SERIALS SBIN WORD;                  /* NUMBER OF SERIAL NUMBERS FOUND*/
      907     8849    2   DCL SERIALSB REDEF SERIALS CHAR(4);
      908     8850    2   DCL MAX_SERIALS SBIN WORD;
      909     8851        /**/
      910     8852    2      SERIALS = 0;
      911     8853    2      RESULTS_FID.TYPE.SN = CURR_LEXEME_TYPE;
      912     8854    2      RESULTS_FID.SINDEX.SN = FOUND_INDEX+1;
      913     8855    3      DO UNTIL (NCHAR ~= '#');
      914     8856    3           CALL GET_NEXT_LEXEME;
      915     8857    3           IF LEXEME.LEN > 6
      916     8858    3           THEN                            /* SERIAL NUMBER TOO LONG             */
      917     8859    3             CALL ERR_PROC(%E$BADSER);
      918     8860    3           ELSE
      919     8861    3                IF LEXEME.LEN > 0
      920     8862    3                THEN
      921     8863    4                DO;
      922     8864    4                     RESULTS_FID.SN = '1'B;
      923     8865    4                     IF SERIALS = 0
      924     8866    4                     THEN
      925     8867    5                     DO;
      926     8868    6                          CALL HFF$NILERASE(%SN_PS#) WHENALTRETURN DO;
      927     8869    6                               CALL ERR_PROC(%E$NOFIELD);
      928     8870    6                               END;
      929     8871    5                          CALL HFF$DSIZ(%SN_PS#, MAX_SERIALS);
      930     8872    5                          MAX_SERIALS = (MAX_SERIALS-4)/6;
      931     8873    5                          END;
      932     8874    4                     SERIALS = SERIALS+1;
      933     8875    4                     IF SERIALS > MAX_SERIALS
      934     8876    4                     THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:36   
      935     8877    4                          CALL ERR_PROC(%E$SERTOOSMALL);
      936     8878    4                     SERIAL$# -> SERIAL$FIELD.NUM = SERIALSB;
      937     8879    4                     SERIAL$# -> SERIAL$FIELD.SERIAL(SERIALS-1) = ADDR(LEXEME) ->
              8879                              TEXT$C.STRING;
      938     8880    4                     RESULTS_FID.CLENGTH.SN = FOUND_INDEX - RESULTS_FID.SINDEX.SN;
      939     8881    4                     END;
      940     8882    3                ELSE
      941     8883    3                     IF NCHAR ~= ' '
      942     8884    3                     THEN
      943     8885    3                          CALL ERR_PROC(%E$BADFID);
      944     8886                                                /* TWO CONSECUTIVE DELIMITERS---      */
      945     8887                                                /* # FOLLOWED BY ANOTHER DELIM.       */
      946     8888    3           END;  /* do until */
      947     8889    3      DO SELECT (NCHAR);
      948     8890    3        SELECT( ' ' );                     /* do nothing                         */
      949     8891    3        SELECT( '/' );
      950     8892    3           CALL GET_NAME_AND_REST;         /* FILE NAME SHOULD FOLLOW            */
      951     8893    3        SELECT( '.' );
      952     8894    3           LEXEME.LEN = 0;
      953     8895    3           CALL NAME_AND_REST;
      954     8896    3        SELECT( '@' );
      955     8897    3           CALL GET_CHECK_STUFF_WSN;
      956     8898    3        SELECT( ELSE );                    /* ILLEGAL DELIMITER HERE             */
      957     8899    3           CALL ERR_PROC(%E$BADFID);
      958     8900    3        END;  /* do select */
      959     8901    2      RETURN;
      960     8902    2   END GET_SERIAL_AND_REST;
      961     8903        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:37   
      962     8904    1   INITIALIZE: PROC;
      963     8905        /**/
      964     8906    2      RESULTS_FID = '0'B;                  /* BLANK OUT RESULTS FLAGS            */
      965     8907    2      CALL HFF$DSIZ (%V_PS#,FIELD_SIZE);
      966     8908    2      IF FIELD_SIZE < SIZEC(FPT$FID_V)
      967     8909    2       THEN                                /* OLD-FASHIONED FPT!!!               */
      968     8910    3         DO;
      969     8911    3           CHECK.OLDFPT = '1'B;
      970     8912    3          CHECK.PAOSF = '0'B;                  /* Prohibit Acct on Star-File         */
      971     8913    3          CHECK.PPOSF = '0'B;                  /* Prohibit Psn on Star-File          */
      972     8914    3          CHECK.PWODF = '1'B;                  /* Prohibit Wsn on Disk-File          */
      973     8915    3          CHECK.CCHARS = '0'B;                 /* Check for illegal charaters        */
      974     8916    3           END;
      975     8917    2       ELSE                                /* FINE NEW FPT                       */
      976     8918    3         DO;
      977     8919    3           CHECK.PAOSF = FPT$FID_V$# -> FPT$FID_V.CHECK.PAOSF;
      978     8920    3           CHECK.PPOSF = FPT$FID_V$# -> FPT$FID_V.CHECK.PPOSF;
      979     8921    3           CHECK.PWODF = ~( FPT$FID_V$# -> FPT$FID_V.CHECK.AWODF );
      980     8922    3           CHECK.CCHARS = FPT$FID_V$# -> FPT$FID_V.CHECK.CCHARS;
      981     8923    3           CHECK.OLDFPT = '0'B;
      982     8924    3           END;
      983     8925    2      CALL HFF$DSIZ (%TEXTFID_PS#,TEXTSIZE);
      984     8926    2      TEXTBOUND=TEXTSIZE;
      985     8927    2      IF TEXTSIZE ~= 0 THEN TEXTBOUND=TEXTSIZE-1;
      986     8928        /**/
      987     8929    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SNAME
      988     8930    2      THEN
      989     8931    3      DO;
      990     8932    3           CALL HFF$NILERASE(%NAME_PS#) ALTRET(NAME_TESTDONE);
      991     8933    3           NAME$# -> NAME$FIELD.LEN = 0;
      992     8934    3           END;
      993     8935    2   NAME_TESTDONE: ;
      994     8936        /**/
      995     8937    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SACCT
      996     8938    2      THEN
      997     8939    3      DO;
      998     8940    3           CALL HFF$DSIZ (%ACCT_PS#,FIELD_SIZE);
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:38   
      999     8941    3           IF FIELD_SIZE = 0
     1000     8942    3            THEN
     1001     8943    3              GOTO ACCT_TESTDONE;
     1002     8944    3           ACCT$# -> ACCT$FIELD = ' ';
     1003     8945    3           END;
     1004     8946    2   ACCT_TESTDONE: ;
     1005     8947        /**/
     1006     8948    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SPASS
     1007     8949    2      THEN
     1008     8950    3      DO;
     1009     8951    3           CALL HFF$DSIZ (%PASS_PS#,FIELD_SIZE);
     1010     8952    3           IF FIELD_SIZE = 0
     1011     8953    3            THEN
     1012     8954    3              GOTO PASS_TESTDONE;
     1013     8955    3           PASS$# -> PASS$FIELD = ' ';
     1014     8956    3           END;
     1015     8957    2   PASS_TESTDONE: ;
     1016     8958        /**/
     1017     8959    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SRES
     1018     8960    2      THEN
     1019     8961    3      DO;
     1020     8962    3           CALL HFF$NILERASE(%RES_PS#) ALTRET(RES_TESTDONE);
     1021     8963    3           RESOURCE$# -> RESOURCE$FIELD = BINASC(0);
     1022     8964    3           END;
     1023     8965    2   RES_TESTDONE: ;
     1024     8966        /**/
     1025     8967    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SSN
     1026     8968    2      THEN
     1027     8969    3      DO;
     1028     8970    3           CALL HFF$NILERASE(%SN_PS#) ALTRET(SN_TESTDONE);
     1029     8971    3           SERIAL$# -> SERIAL$FIELD.NUM = CHAR_ONE;
     1030     8972    3           SERIAL$# -> SERIAL$FIELD.SERIAL(0) = ' ';
     1031     8973    3           END;
     1032     8974    2   SN_TESTDONE: ;
     1033     8975        /**/
     1034     8976    2     IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SWSN
     1035     8977    2      THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:39   
     1036     8978    3      DO;
     1037     8979    3           CALL HFF$NILERASE(%WSN_PS#) ALTRET(WSN_TESTDONE);
     1038     8980    3           WSN$# -> WSN$FIELD = ' ';
     1039     8981    3           END;
     1040     8982    2   WSN_TESTDONE: ;
     1041     8983        /**/
     1042     8984    2     CALL HFF$NILERASE(%TEXTFID_PS#) ALTRET(NO_FID_ALT);
     1043     8985    2      FOUND_INDEX = 0;
     1044     8986    3      DO WHILE(SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1)=' ' AND
     1045     8987    3             FOUND_INDEX < TEXTBOUND);
     1046     8988    3           FOUND_INDEX = FOUND_INDEX + 1;
     1047     8989    3           END;
     1048     8990    2      NCHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);
     1049     8991    2      IF NCHAR = ' '
     1050     8992    2      THEN
     1051     8993    2           CALL ERR_PROC(%E$NOFID);
     1052     8994    2      IF NCHAR~='/' AND NCHAR~='@' AND NCHAR~='#'
     1053     8995    2      THEN
     1054     8996    3      DO;
     1055     8997    3           NCHAR = ' ';
     1056     8998    3           FOUND_INDEX = FOUND_INDEX-1;
     1057     8999    3           END;
     1058     9000    2      RETURN;
     1059     9001    2   NO_FID_ALT: CALL ERR_PROC(%E$NOFID);
     1060     9002    2   END INITIALIZE;
     1061     9003        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:40   
     1062     9004    1   NORMAL_START: PROC;
     1063     9005        /**/
     1064     9006    2   DCL RET_VAL SBIN WORD;
     1065     9007        /**/
     1066     9008    3      DO SELECT(NCHAR);
     1067     9009    3         SELECT('.');
     1068     9010    3           CALL NAME_AND_REST;
     1069     9011    3         SELECT('/');
     1070     9012    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);
     1071     9013    3           IF RET_VAL = %TRUE#
     1072     9014    3           THEN
     1073     9015    4                DO;
     1074     9016    4                  IF ASN = %FILE# AND LEXEME.LEN = 4
     1075     9017    4                   THEN               /* DPnn/ is illegal                   */
     1076     9018    4                     GOTO BAD_COMBO;
     1077     9019    4                  CALL GET_NAME_AND_REST;
     1078     9020    4                  END;
     1079     9021    3           ELSE
     1080     9022    3                GOTO BAD_COMBO;
     1081     9023    3         SELECT('#');
     1082     9024    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);
     1083     9025    3           IF RET_VAL = %TRUE#
     1084     9026    3           THEN
     1085     9027    3                CALL GET_SERIAL_AND_REST;
     1086     9028    3           ELSE
     1087     9029    4           DO;
     1088     9030    4                CALL CHECK_STUFF_OPLABEL(RET_VAL);
     1089     9031    4                IF RET_VAL = %FALSE#
     1090     9032    4                THEN
     1091     9033    4                     CALL CHECK_STUFF_DEVICE_ID(RET_VAL);
     1092     9034    4                IF RET_VAL = %TRUE#
     1093     9035    4                THEN
     1094     9036    5                DO;
     1095     9037    5                     CALL GET_NEXT_LEXEME;
     1096     9038    5                     IF NOT (LEXEME.LEN=0 AND NCHAR=' ')
     1097     9039    5                     THEN
     1098     9040    5                          GOTO BAD_COMBO;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:41   
     1099     9041    5                     END;
     1100     9042    4                ELSE
     1101     9043    4                     GOTO BAD_COMBO;
     1102     9044    4                END;
     1103     9045    3         SELECT('@');
     1104     9046    3           CALL CHECK_STUFF_OPLABEL(RET_VAL);
     1105     9047    3           IF RET_VAL = %FALSE# THEN
     1106     9048    3                CALL CHECK_STUFF_RESOURCE(RET_VAL);
     1107     9049    3           IF RET_VAL = %FALSE# THEN
     1108     9050    3                CALL CHECK_STUFF_DEVICE_ID(RET_VAL);
     1109     9051    3           IF RET_VAL = %FALSE# THEN       /* NO LUCK - MUST BE A FILENAME       */
     1110     9052    3                CALL NAME_AND_REST;
     1111     9053    3           ELSE IF RESOURCE$# -> RESOURCE$FIELD_.NN ~= '  ' /* dvnn@ is illegal      */
     1112     9054    3           THEN
     1113     9055    3                GOTO BAD_COMBO;
     1114     9056    3           ELSE                            /* OK!                                */
     1115     9057    3                CALL GET_CHECK_STUFF_WSN;
     1116     9058    3         SELECT(ELSE);                     /* SHOULD NEVER GET HERE              */
     1117     9059    3   BAD_COMBO:   CALL ERR_PROC(%E$BADFID);
     1118     9060    3         END;                              /* END SELECT                         */
     1119     9061    2      RETURN;
     1120     9062    2   END NORMAL_START;
     1121     9063        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:42   
     1122     9064    1   SINGLE_LEXEME: PROC;
     1123     9065        /**/
     1124     9066    2   DCL RET_VAL SBIN WORD;
     1125     9067        /**/
     1126     9068    2      CALL CHECK_STUFF_OPLABEL(RET_VAL);
     1127     9069    2      IF RET_VAL = %FALSE#
     1128     9070    2      THEN
     1129     9071    3      DO;
     1130     9072    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);
     1131     9073    3           IF RET_VAL = %TRUE# AND LEXEME.LEN = 4 AND ASN = %FILE#
     1132     9074    3            THEN                           /* DPnn is a NAME                     */
     1133     9075    4              DO;                          /* Take away RES we made              */
     1134     9076    4                RET_VAL = %FALSE#;
     1135     9077    4                RESULTS_FID.RES = '0'B;
     1136     9078    4                END;
     1137     9079    3           IF RET_VAL = %FALSE#
     1138     9080    3           THEN
     1139     9081    3                CALL NAME_AND_REST;
     1140     9082    3           END;
     1141     9083    2      RETURN;
     1142     9084    2   END SINGLE_LEXEME;
     1143     9085    1   END UMF$FID;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:43   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
      No diagnostics issued in procedure UMF$FID.

   Procedure UMF$FID requires 1442 words for executable code.
   Procedure UMF$FID requires 72 words of local(AUTO) storage.

    No errors detected in file UMF$FID.:E05TSI    .

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:44   

 Object Unit name= UMF$FID                                    File name= UMF$FID.:E05TOU
 UTS= JUL 30 '97 06:59:42.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    156    234  UMF$FID
    2   Proc  even  none  1442   2642  UMF$FID
    3  RoData even  none    45     55  UMF$FID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  UMF$FID

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       2 HFF$DSIZ
 yes     yes           Std       1 HFF$NILERASE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AUNWIND
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:45   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                B$PS0$
     B$PS1$                                B$PS2$                                B$PS3$
     B$PS4$                                B$PS5$                                B$PS6$
     B$PS7$                                B$PS8$                                B$PS9$
r    B$XL_UPPER$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:46   


        1        1        /*M* UMF$FID  Monitor service to process a fid                                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P* NAME: M$FID
        8        8             PURPOSE: To process an input FID
        9        9             DESCRIPTION: M$FID takes an input FID and breaks it up into its
       10       10             component parts. These parts are stored in the caller's data area
       11       11             in a format compatible with M$OPEN. M$FID ALTRETURNs if an error
       12       12             is encountered.
       13       13             REFERENCE: Specification file section 12.0, document #0227               */
       14       14        /*D* NAME: M$FID
       15       15             CALL: M$FID is called by:
       16       16                    CALL M$FID(FID_FPT) ALTRET(FID_ALT);
       17       17             ENVIRONMENT: Master mode
       18       18             INPUT: 1) FID text string to process passed from user in FPT
       19       19                    2) Bits describing which output fields to SCRUB on entry
       20       20             OUTPUT: 1) User data areas passed from user in FPT
       21       21                     2) B$JIT.ERR if M$FID ALTRETURNs
       22       22             DESCRIPTION: M$FID accepts TEXTFID(the input fid string) from the
       23       23            caller and fills the caller's data areas(also passed) for
       24       24                1) NAME,
       25       25                2) ACCOUNT,
       26       26                3) PASSWORD
       27       27                4) WORK STATION,
       28       28                5) ASSIGNMENT TYPE,
       29       29                6) RESOURCE, and
       30       30                7) SERIAL NUMBER LIST
       31       31             as they are found(if they are found). If a field is successfully
       32       32             filled, the corresponding bit in RESULTS(another user data field)
       33       33             is set. If the bit is not set, the corresponding field will be
       34       34             unchanged if the respective SCRUB bit is reset, otherwise it will
       35       35             contain a null value.
       36       36        */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:47   
       37       37        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:48   
       38       38        /*E* ERROR: UMF-E$NOFID-4
       39       39             MESSAGE: No TEXTFID to process
       40       40             MESSAGE1: Either TEXTFID contained only blanks or a NIL pointer
       41       41                       to TEXTFID was passed.
       42       42             DESCRIPTION: Either the pointer to TEXTFID=ADDR(NIL) or
       43       43             TEXTFID contains only blanks.
       44       44        */
       45       45        /*E* ERROR: UMF-E$BADFID-4
       46       46             MESSAGE: Illegal FID
       47       47             MESSAGE1: The string passed does not represent a valid FID.
       48       48             MESSAGE2: TEXTFID contained an illegal combination of
       49       49             delimiters(#,/,.,@) describing an illegal FID
       50       50        */
       51       51        /*E* ERROR: UMF-E$FIDOFLOW-4
       52       52            MESSAGE: Some field is too big to be part of a legal FID
       53       53            MESSAGE1: Some FID field was too small to hold its requested contents
       54       54        */
       55       55        /*E* ERROR: UMF-E$BADFNME-4
       56       56            MESSAGE: Bad file name.
       57       57            MESSAGE1: A permanent file name must consist of 1 to 31 characters:
       58       58                      alphanumeric, _, -, $, or :.  A standard-format ANS tape
       59       59                      name must be 1 to 17 characters:  upper case, numeric,
       60       60                      ! " % & ' ( ) * + , . / ? ; : < > -.
       61       61        */
       62       62        /*E* ERROR: UMF-E$BADACCT-4
       63       63            MESSAGE: Bad file account.
       64       64            MESSAGE1: An account name consists of 1 to 8 non-control,
       65       65                      7-bit ASCII characters.
       66       66        */
       67       67        /*E* ERROR: UMF-E$BADPASS-4
       68       68            MESSAGE: Bad file password.
       69       69        */
       70       70        /*E* ERROR: UMF-E$BADSER-4
       71       71            MESSAGE: Bad packset or serial number.
       72       72        */
       73       73        /*E* ERROR: UMF-E$SERTOOSMALL-4
       74       74            MESSAGE: Too many serial numbers.
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:49   
       75       75            MESSAGE1: The FID has more serial numbers than were provided for in VLP_SN.
       76       76        */
       77       77        /*E* ERROR: UMF-E$INVWSN-4
       78       78            MESSAGE: Bad workstation name.
       79       79        */
       80       80        /*E* ERROR: UMF-E$INVRES-4
       81       81            MESSAGE: Invalid resource name.
       82       82        */
       83       83        /*E*   ERROR: UMF-E$NOFIELD-4
       84       84             MESSAGE: Required FID field missing
       85       85            MESSAGE1: A FID element was found for which no destination field was provided.
       86       86        */
       87       87        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:50   
       88       88        UMF$FID: PROC;

     88  2 000000   000000 700200 xent  UMF$FID      TSX0  ! X66_AUTO_0
         2 000001   000110 000000                    ZERO    72,0

       89       89        /**/
       90       90        /*  INCLUDE FILES  */
       91       91        /**/
       92       92        %INCLUDE B$JIT_C;
       93      406        %INCLUDE CP_6;
       94     5965        %INCLUDE UM$CP6V_C;
       95     6152        %INCLUDE B_ERRORS_C;
       96     7279        %INCLUDE CP_6_SUBS;
       97     7819        %INCLUDE B$TABLES_C;
       98     7927        /**/
       99     7928        /*  SUBS  */
      100     7929        /**/
      101     7930           %EQU TRUE#  = 1;
      102     7931           %EQU FALSE# = 0;
      103     7932        /**/
      104     7933           %EQU PROHIBITED# = 1;
      105     7934           %EQU ALLOWED# = 2;
      106     7935           %EQU REQUIRED# = 3;
      107     7936        /**/
      108     7937           %EQU NUM_RESOURCE_TYPES# = 9;
      109     7938           %EQU NUM_OPLABELS# = 12;
      110     7939           %EQU MAX_LEXEME# = 40;
      111     7940        /**/
      112     7941           %EQU NOT_FOUND#  = 0;
      113     7942           %EQU BLANK_CHAR# = 1;
      114     7943           %EQU GARBAGE_CHAR# = 1;              /* Consider garbage as a space        */
      115     7944           %EQU DELIM_CHAR# = 2;
      116     7945           %EQU QUOTE_CHAR# = 3;
      117     7946        /**/
      118     7947           %EQU V_PS#       = 0;
      119     7948           %EQU TEXTFID_PS# = 1;
      120     7949           %EQU NAME_PS#    = 2;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:51   
      121     7950           %EQU ACCT_PS#    = 3;
      122     7951           %EQU PASS_PS#    = 4;
      123     7952           %EQU SN_PS#      = 5;
      124     7953           %EQU WSN_PS#     = 6;
      125     7954           %EQU ASN_PS#     = 7;
      126     7955           %EQU RES_PS#     = 8;
      127     7956           %EQU RESULTS_PS# = 9;
      128     7957        /**/
      129     7958           %SUB FPT$FID_V$# = B$PS0$;
      130     7959           %SUB TEXTFID$#   = B$PS1$;
      131     7960           %SUB NAME$#      = B$PS2$;
      132     7961           %SUB ACCT$#      = B$PS3$;
      133     7962           %SUB PASS$#      = B$PS4$;
      134     7963           %SUB SERIAL$#    = B$PS5$;
      135     7964           %SUB WSN$#       = B$PS6$;
      136     7965           %SUB ASN$#       = B$PS7$;
      137     7966           %SUB RESOURCE$#  = B$PS8$;
      138     7967           %SUB RESULTS$#   = B$PS9$;
      139     7968        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:52   
      140     7969        /**/
      141     7970        /*  BASED DATA  */
      142     7971        /**/
      143     7972        %B$JIT0;
      144     8061    1       2 * BIT(1);                         /* REST OF JIT NOT NEEDED             */
      145     8062    1   DCL ASN$FIELD CHAR(1) BASED CALIGNED;
      146     8063    1   DCL RESOURCE$FIELD CHAR(4) BASED CALIGNED;
      147     8064    1   DCL 1 RESOURCE$FIELD_ BASED CALIGNED,
      148     8065    1         2 DV CHAR(2) CALIGNED,
      149     8066    1         2 NN CHAR(2) CALIGNED;
      150     8067    1   DCL WSN$FIELD CHAR(8) BASED CALIGNED;
      151     8068    1   DCL 1 NAME$FIELD BASED CALIGNED,
      152     8069    1         2 LEN UBIN BYTE CALIGNED,         /* USED TO MOVE LEN AS A BYTE         */
      153     8070    1         2 STRING CHAR(MAX_NAME);
      154     8071    1   DCL ACCT$FIELD CHAR(FIELD_SIZE) BASED CALIGNED;
      155     8072    1   DCL PASS$FIELD BASED CALIGNED CHAR(FIELD_SIZE);
      156     8073    1   DCL 1 TEXT$C BASED CALIGNED,
      157     8074    1         2 LEN UBIN BYTE UNAL,
      158     8075    1         2 STRING CHAR(TEXT$C.LEN);
      159     8076    1   DCL 1 SERIAL$FIELD BASED CALIGNED,
      160     8077    1         2 NUM CHAR(4),                    /* USED TO MOVE AS BYTES INSTEAD      */
      161     8078    1         2 SERIAL(0:0) CHAR(6);            /* OF AS BITS                         */
      162     8079    1   DCL SEARCH$STR CHAR(TEXTSIZE) BASED CALIGNED;
      163     8080           %FPT$FID_V;
      164     8085                                                /* STRING DUE TO HARDWARE PROBLEMS    */
      165     8086    1   DCL RESULTS$FIELDB BASED CALIGNED CHAR(FIELD_SIZE);
      166     8087        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:53   
      167     8088        /**/
      168     8089        /*  CONSTANTS  */
      169     8090        /**/
      170     8091    1   DCL CHAR_ONEB UBIN CONSTANT INIT(1);
      171     8092    1   DCL CHAR_ONE REDEF CHAR_ONEB CHAR(4);
      172     8093    1   DCL 1 SEARCH_TBL CONSTANT ALIGNED,
      173     8094    1         2 *(0:511) UBIN BYTE UNAL
      174     8095    1           INIT(%GARBAGE_CHAR#*32,         /* NUL through US                     */
      175     8096    1           %BLANK_CHAR#,                   /* BLANK                              */
      176     8097    1           0*2,                            /* ! "                                */
      177     8098    1           %DELIM_CHAR#,                   /* #                                  */
      178     8099    1           0*3,                            /* $ % &                              */
      179     8100    1           %QUOTE_CHAR#,                   /* '                                  */
      180     8101    1           0*6,                            /* ( through -                        */
      181     8102    1           %DELIM_CHAR#*2,                 /* . /                                */
      182     8103    1           0*16,                           /* 0 through ?                        */
      183     8104    1           %DELIM_CHAR#,                   /* @                                  */
      184     8105    1           0*26,                           /* A through Z                        */
      185     8106    1           0*4,                            /* [ through ^                        */
      186     8107    1           0,                              /* _                                  */
      187     8108    1           0,                              /* ` (grave accent)                   */
      188     8109    1           0*26,                           /* a through z                        */
      189     8110    1           0*5,                            /* { through DEL                      */
      190     8111    1           %GARBAGE_CHAR#*384);            /* unprintably high                   */
      191     8112        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:54   
      192     8113        /**/
      193     8114        /*  LOCAL AUTO  */
      194     8115        /**/
      195     8116        %VLR_FID(FPTN = RESULTS_FID,STCLASS=AUTO);
      196     8135    1   DCL RESULTS_FIDB REDEF RESULTS_FID CHAR(40); /* USED TO MOVE RESULTS AS BYTES */
      197     8136    1   DCL 1 OLD_RESULTS REDEF RESULTS_FID,
      198     8137    1         2 NAME BIT(1),
      199     8138    1         2 ACCT BIT(1),
      200     8139    1         2 PASS BIT(1),
      201     8140    1         2 SN BIT(1),
      202     8141    1         2 WSN BIT(1),
      203     8142    1         2 ASN BIT(1),
      204     8143    1         2 RES BIT(1),
      205     8144    1         2 * BIT(2) UNAL,
      206     8145    1         2 NAME_TYPE UBIN(2) UNAL,
      207     8146    1         2 * BIT(61) UNAL,
      208     8147    1         2 * CHAR(32) UNAL;
      209     8148    1   DCL ERR_RETURN REMEMBER;                /* FOR USE WITH ERROR UNWIND          */
      210     8149    1   DCL 1 LEXEME,                           /* CURRENT LEXEME.                    */
      211     8150    1         2 LEN UBIN BYTE UNAL,
      212     8151    1         2 STRING CHAR(%MAX_LEXEME#),
      213     8152    1         2 OCTAL_STRING(0:%(3*MAX_LEXEME#-1)) REDEF STRING UBIN(3) UNAL;
      214     8153    1   DCL UC_LEXEME_START CHAR(4);
      215     8154    1   DCL LCHAR CHAR(1);                      /* CHARACTER IMMEDIATELY              */
      216     8155                                                /* PRECEEDING CURRENT LEXEME. IT      */
      217     8156                                                /* WILL BE BLANK IF NO PRECEEDING*/
      218     8157                                                /* CHARACTER AND A DELIMITER OR       */
      219     8158                                                /* BLANK OTHERWISE                    */
      220     8159    1   DCL NCHAR CHAR(1);                      /* CHARACTER IMMEDIATELY              */
      221     8160                                                /* FOLLOWING CURRENT LEXEME.          */
      222     8161                                                /* IF WILL BE BLANK IF AT END OF      */
      223     8162                                                /* STRING, OTHERWISE IT WILL BE       */
      224     8163                                                /* BLANK OR A DELIMITER               */
      225     8164    1   DCL FOUND_INDEX SBIN WORD;              /* INDEX OF FOUND DELIMITER           */
      226     8165    1   DCL CUR_INDEX SBIN WORD;                /* INDEX OF CURRENT LEXEME            */
      227     8166    1   DCL CHAR_TYPE SBIN WORD;
      228     8167    1   DCL CURR_LEXEME_TYPE SBIN WORD;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:55   
      229     8168    1   DCL ASN  UBIN BYTE UNAL;                /* TEMPORARY ASN  FIELD               */
      230     8169    1   DCL ASNB REDEF ASN CHAR(1);             /* USED TO MOVE ASN AS A BYTE         */
      231     8170                                                /* STRING DUE TO HARDWARE PROBLEMS    */
      232     8171    1   DCL MAX_NAME SBIN WORD;
      233     8172    1   DCL FIELD_SIZE SBIN WORD;
      234     8173    1   DCL 1 CHECK,
      235     8174    1         2 PAOSF BIT(1) UNAL,              /* Prohibit Acct on Star-File         */
      236     8175    1         2 PPOSF BIT(1) UNAL,              /* Prohibit Psn on Star-File          */
      237     8176    1         2 PWODF BIT(1) UNAL,              /* Prohibit Wsn on Disk-File          */
      238     8177    1         2 CCHARS BIT(1) UNAL,             /* Check for illegal charaters        */
      239     8178    1         2 OLDFPT BIT(1) UNAL;
      240     8179    1   DCL I SBIN WORD;
      241     8180    1   DCL TEXTBOUND SBIN WORD;
      242     8181    1   DCL TEXTSIZE SBIN WORD;
      243     8182    1   DCL T$ PTR;                             /* TEMPORARY POINTER                  */
      244     8183    1   DCL ERROR BIT(1) ALIGNED;
      245     8184        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:56   
      246     8185        /**/
      247     8186        /*  SYMREFS  */
      248     8187        /**/
      249     8188    1   DCL B$JIT$ PTR SYMREF;
      250     8189    1   DCL B$PS0$ PTR SYMREF;
      251     8190    1   DCL B$PS1$ PTR SYMREF;
      252     8191    1   DCL B$PS2$ PTR SYMREF;
      253     8192    1   DCL B$PS3$ PTR SYMREF;
      254     8193    1   DCL B$PS4$ PTR SYMREF;
      255     8194    1   DCL B$PS5$ PTR SYMREF;
      256     8195    1   DCL B$PS6$ PTR SYMREF;
      257     8196    1   DCL B$PS7$ PTR SYMREF;
      258     8197    1   DCL B$PS8$ PTR SYMREF;
      259     8198    1   DCL B$PS9$ PTR SYMREF;
      260     8199        %B$XL_UPPER( NAME=EMH_UC_XLATE_TBL );
      261     8203        /**/
      262     8204        /*  ENTRY DCLS  */
      263     8205        /**/
      264     8206    1   DCL HFF$DSIZ ENTRY(2) ALTRET;
      265     8207    1   DCL HFF$NILERASE ENTRY(1) ALTRET;
      266     8208        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:57   
      267     8209        /******************************************************************************/
      268     8210        /*                                                                            */
      269     8211        /*      DRIVER STARTS HERE                                                    */
      270     8212        /*                                                                            */
      271     8213        /******************************************************************************/
      272     8214    1      REMEMBER ERR_EXIT IN ERR_RETURN;

   8214  2 000002   000066 635000 2                  EAA     ERR_EXIT
         2 000003   200016 452500                    STP2    ERR_RETURN,,AUTO
         2 000004   200017 755100                    STA     ERR_RETURN+1,,AUTO

      273     8215    1      CALL INITIALIZE;

   8215  2 000005   002102 701000 2                  TSX1    INITIALIZE
         2 000006   000000 011000                    NOP     0

      274     8216    1      CALL GET_NEXT_LEXEME;

   8216  2 000007   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 000010   000000 011000                    NOP     0

      275     8217    1      IF LCHAR = ' '

   8217  2 000011   200034 236100                    LDQ     LCHAR,,AUTO
         2 000012   777000 376003                    ANQ     -512,DU
         2 000013   040000 116003                    CMPQ    16384,DU
         2 000014   000027 601000 2                  TNZ     s:8225

      276     8218    1      THEN
      277     8219    1           IF NCHAR = ' '

   8219  2 000015   200035 236100                    LDQ     NCHAR,,AUTO
         2 000016   777000 376003                    ANQ     -512,DU
         2 000017   040000 116003                    CMPQ    16384,DU
         2 000020   000024 601000 2                  TNZ     s:8223

      278     8220    1           THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:58   
      279     8221    1                CALL SINGLE_LEXEME;

   8221  2 000021   002603 701000 2                  TSX1    SINGLE_LEXEME
         2 000022   000000 011000                    NOP     0
         2 000023   000042 710000 2                  TRA     s:8230

      280     8222    1           ELSE
      281     8223    1                CALL NORMAL_START;

   8223  2 000024   002417 701000 2                  TSX1    NORMAL_START
         2 000025   000000 011000                    NOP     0
         2 000026   000042 710000 2                  TRA     s:8230

      282     8224    1      ELSE
      283     8225    1           IF LCHAR = '/'

   8225  2 000027   200034 236100                    LDQ     LCHAR,,AUTO
         2 000030   777000 376003                    ANQ     -512,DU
         2 000031   057000 116003                    CMPQ    24064,DU
         2 000032   000036 601000 2                  TNZ     s:8229

      284     8226    1           THEN
      285     8227    1                CALL NAME_AND_REST;

   8227  2 000033   000724 701000 2                  TSX1    NAME_AND_REST
         2 000034   000000 011000                    NOP     0
         2 000035   000042 710000 2                  TRA     s:8230

      286     8228    1           ELSE
      287     8229    1                CALL ERR_PROC(%E$BADFID);

   8229  2 000036   000001 236000 3                  LDQ     1
         2 000037   200101 756100                    STQ     OCT_CHAR+3,,AUTO
         2 000040   000551 701000 2                  TSX1    ERR_PROC
         2 000041   000000 011000                    NOP     0

      288     8230    1      IF FOUND_INDEX<TEXTBOUND
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:59   

   8230  2 000042   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 000043   200047 116100                    CMPQ    TEXTBOUND,,AUTO
         2 000044   000062 605000 2                  TPL     s:8235

      289     8231    1      THEN
      290     8232    1           IF SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX)~=' '

   8232  2 000045   200050 236100                    LDQ     TEXTSIZE,,AUTO
         2 000046   200036 136100                    SBLQ    FOUND_INDEX,,AUTO
         2 000047   000000 470400 xsym               LDP0    B$PS1$
         2 000050   000000 620006                    EAX0    0,QL
         2 000051   200036 235100                    LDA     FOUND_INDEX,,AUTO
         2 000052   040000 106545                    CMPC    fill='040'O
         2 000053   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 000054   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000055   000062 600000 2                  TZE     s:8235

      291     8233    1           THEN                            /* REST OF SEARCH$STR MUST BE         */
      292     8234    1                CALL ERR_PROC(%E$BADFID);  /* BLANK                              */

   8234  2 000056   000001 236000 3                  LDQ     1
         2 000057   200101 756100                    STQ     OCT_CHAR+3,,AUTO
         2 000060   000551 701000 2                  TSX1    ERR_PROC
         2 000061   000000 011000                    NOP     0

      293     8235    1      ASN$# -> ASN$FIELD = ASNB;           /* STUFF THE TEMPORARY ASN FIELD      */

   8235  2 000062   000000 470400 xsym               LDP0    B$PS7$
         2 000063   040100 100500                    MLR     fill='040'O
         2 000064   200042 000001                    ADSC9   ASN,,AUTO                cn=0,n=1
         2 000065   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

   8235  2 000066                       ERR_EXIT     null
      294     8236    1   ERR_EXIT: ;
      295     8237    1      CALL HFF$DSIZ(%RESULTS_PS#,FIELD_SIZE);

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:60   
   8237  2 000066   200044 630500                    EPPR0   FIELD_SIZE,,AUTO
         2 000067   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 000070   000002 236000 3                  LDQ     2
         2 000071   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 000072   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 000073   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000074   000000 701000 xent               TSX1    HFF$DSIZ
         2 000075   000000 011000                    NOP     0

      296     8238    1      IF FIELD_SIZE = 0

   8238  2 000076   200044 235100                    LDA     FIELD_SIZE,,AUTO
         2 000077   000115 600000 2                  TZE     NO_RESULTS

      297     8239    1       THEN
      298     8240    1         GOTO NO_RESULTS;
      299     8241    1      IF CHECK.OLDFPT

   8241  2 000100   200045 236100                    LDQ     CHECK,,AUTO
         2 000101   020000 316003                    CANQ    8192,DU
         2 000102   000110 600000 2                  TZE     s:8244

      300     8242    1       THEN
      301     8243    1         OLD_RESULTS.NAME_TYPE = RESULTS_FID.TYPE.NAME;

   8243  2 000103   200004 236100                    LDQ     RESULTS_FID,,AUTO
         2 000104   000020 736000                    QLS     16
         2 000105   200004 676100                    ERQ     RESULTS_FID,,AUTO
         2 000106   000600 376003                    ANQ     384,DU
         2 000107   200004 656100                    ERSQ    RESULTS_FID,,AUTO

      302     8244    1      RESULTS$# -> RESULTS$FIELDB = RESULTS_FIDB;

   8244  2 000110   000000 470400 xsym               LDP0    B$PS9$
         2 000111   000000 620005                    EAX0    0,AL
         2 000112   040140 100500                    MLR     fill='040'O
         2 000113   200004 000050                    ADSC9   RESULTS_FID,,AUTO        cn=0,n=40
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:61   
         2 000114   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

   8244  2 000115                       NO_RESULTS   null
      303     8245    1   NO_RESULTS: ;
      304     8246    1      RETURN;                              /* RETURN TO USER                     */

   8246  2 000115   000000 702200 xent               TSX2  ! X66_ARET

      305     8247        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:62   
      306     8248        /**/
      307     8249        /* THIS PROCEDURE CHECKS THE STRING POINTED TO BY STRING$ FOR LENGTH          */
      308     8250        /* STRING_BOUND+1 CHARACTER BY CHARACTER AGAINST LOW_CHAR AND HIGH_CHAR       */
      309     8251        /* IT RETURNS RET_VAL=%TRUE# IF ALL CHARACTERS FALL IN THE RANGE LOW_CHAR TO  */
      310     8252        /* HIGH_CHAR AND RET_VAL=%FALSE# OTHERWISE.                                   */
      311     8253        /**/
      312     8254    1   CHECK_RANGE: PROC(RET_VAL,STRING$,STRING_BOUND,LOW_CHAR,HIGH_CHAR);

   8254  2 000116   200062 741300       CHECK_RANGE  STX1  ! MAX_SERIALS+2,,AUTO

      313     8255        /**/
      314     8256        /*  PARAMETERS  */
      315     8257        /**/
      316     8258    2   DCL RET_VAL SBIN WORD;
      317     8259    2   DCL STRING$ PTR;
      318     8260    2   DCL STRING_BOUND SBIN WORD;
      319     8261    2   DCL LOW_CHAR CHAR(1);
      320     8262    2   DCL HIGH_CHAR CHAR(1);
      321     8263        /**/
      322     8264        /*  LOCAL AUTO  */
      323     8265        /**/
      324     8266    2   DCL I SBIN WORD;
      325     8267    2   DCL CHAR$ARY(0:0) CHAR(1) BASED(STRING$);
      326     8268        /**/
      327     8269    2      RET_VAL = %TRUE#;

   8269  2 000117   000001 235007                    LDA     1,DL
         2 000120   200063 470500                    LDP0    @RET_VAL,,AUTO
         2 000121   000000 755100                    STA     0,,PR0

      328     8270    3      DO I = 0 TO STRING_BOUND;

   8270  2 000122   200070 450100                    STZ     I,,AUTO
         2 000123   000144 710000 2                  TRA     s:8274+1

      329     8271    3           IF CHAR$ARY(I)<LOW_CHAR OR CHAR$ARY(I)>HIGH_CHAR

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:63   
   8271  2 000124   200064 470500                    LDP0    @STRING$,,AUTO
         2 000125   000000 471500                    LDP1    0,,PR0
         2 000126   200070 235100                    LDA     I,,AUTO
         2 000127   200066 473500                    LDP3    @LOW_CHAR,,AUTO
         2 000130   040100 106505                    CMPC    fill='040'O
         2 000131   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         2 000132   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         2 000133   000141 602000 2                  TNC     s:8273
         2 000134   200067 474500                    LDP4    @HIGH_CHAR,,AUTO
         2 000135   040105 106500                    CMPC    fill='040'O
         2 000136   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
         2 000137   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         2 000140   000143 603000 2                  TRC     s:8274

      330     8272    3           THEN
      331     8273    3                RET_VAL = %FALSE#;

   8273  2 000141   200063 474500                    LDP4    @RET_VAL,,AUTO
         2 000142   400000 450100                    STZ     0,,PR4

      332     8274    3           END;

   8274  2 000143   200070 054100                    AOS     I,,AUTO
         2 000144   200065 470500                    LDP0    @STRING_BOUND,,AUTO
         2 000145   200070 236100                    LDQ     I,,AUTO
         2 000146   000000 116100                    CMPQ    0,,PR0
         2 000147   000124 604400 2                  TMOZ    s:8271

      333     8275    2      RETURN;

   8275  2 000150   200062 221300                    LDX1  ! MAX_SERIALS+2,,AUTO
         2 000151   000001 702211                    TSX2  ! 1,X1

      334     8276    2   END CHECK_RANGE;
      335     8277        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:64   
      336     8278        /**/
      337     8279        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      338     8280        /* DEVICE-ID. IF IT IS, IT IS PLACED INTO THE RESOURCE FIELD AND %TRUE# IS    */
      339     8281        /* RETURNED IN RET_VAL, OTHERWISE NOTHING IS PLACED IN RESOURCE AND %FALSE#   */
      340     8282        /* IS RETURNED.                                                               */
      341     8283        /* NOTE:  THIS ROUTINE SHOULD BE CALLED SPARINGLY SINCE IT WILL LET ALMOST    */
      342     8284        /*        ANY 2 OR 4-CHARACTER FRAMMIS BE A DEVICE-ID.                        */
      343     8285        /**/
      344     8286    1   CHECK_STUFF_DEVICE_ID: PROC(RET_VAL);

   8286  2 000152   200056 741300       CHECK_STUFF* STX1  ! RET_VAL+1,,AUTO

      345     8287        /**/
      346     8288    2   DCL RET_VAL SBIN WORD;
      347     8289        /**/
      348     8290    2      RET_VAL = 0;

   8290  2 000153   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000154   000000 450100                    STZ     0,,PR0

      349     8291    2      IF LEXEME.LEN=2 OR LEXEME.LEN=4

   8291  2 000155   200020 236100                    LDQ     LEXEME,,AUTO
         2 000156   777000 376003                    ANQ     -512,DU
         2 000157   002000 116003                    CMPQ    1024,DU
         2 000160   000163 600000 2                  TZE     s:8294
         2 000161   004000 116003                    CMPQ    2048,DU
         2 000162   000225 601000 2                  TNZ     s:8299

      350     8292    2      THEN
      351     8293    3      DO;

      352     8294    3           CALL CHECK_RANGE(RET_VAL,ADDR(UC_LEXEME_START),1,'A','Z');

   8294  2 000163   200033 631500                    EPPR1   UC_LEXEME_START,,AUTO
         2 000164   200104 451500                    STP1    @ERR_CODE+3,,AUTO
         2 000165   000006 237000 3                  LDAQ    6
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:65   
         2 000166   200066 757100                    STAQ    @LOW_CHAR,,AUTO
         2 000167   000005 236000 3                  LDQ     5
         2 000170   200065 756100                    STQ     @STRING_BOUND,,AUTO
         2 000171   200104 633500                    EPPR3   @ERR_CODE+3,,AUTO
         2 000172   200064 453500                    STP3    @STRING$,,AUTO
         2 000173   200057 236100                    LDQ     @RET_VAL,,AUTO
         2 000174   200063 756100                    STQ     @RET_VAL,,AUTO
         2 000175   000116 701000 2                  TSX1    CHECK_RANGE
         2 000176   000000 011000                    NOP     0

      353     8295    3           IF RET_VAL=1 AND LEXEME.LEN=4

   8295  2 000177   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000200   000000 235100                    LDA     0,,PR0
         2 000201   000001 115007                    CMPA    1,DL
         2 000202   000225 601000 2                  TNZ     s:8299
         2 000203   200020 236100                    LDQ     LEXEME,,AUTO
         2 000204   777000 376003                    ANQ     -512,DU
         2 000205   004000 116003                    CMPQ    2048,DU
         2 000206   000225 601000 2                  TNZ     s:8299

      354     8296    3           THEN
      355     8297    3                CALL CHECK_RANGE(RET_VAL,PINCRC(ADDR(UC_LEXEME_START),2),1,'0','9');

   8297  2 000207   200102 452500                    STP2    @ERR_CODE+1,,AUTO
         2 000210   200102 236100                    LDQ     @ERR_CODE+1,,AUTO
         2 000211   000010 036000 3                  ADLQ    8
         2 000212   200105 756100                    STQ     @ERR_CODE+4,,AUTO
         2 000213   000014 237000 3                  LDAQ    12
         2 000214   200066 757100                    STAQ    @LOW_CHAR,,AUTO
         2 000215   000005 236000 3                  LDQ     5
         2 000216   200065 756100                    STQ     @STRING_BOUND,,AUTO
         2 000217   200105 631500                    EPPR1   @ERR_CODE+4,,AUTO
         2 000220   200064 451500                    STP1    @STRING$,,AUTO
         2 000221   200057 236100                    LDQ     @RET_VAL,,AUTO
         2 000222   200063 756100                    STQ     @RET_VAL,,AUTO
         2 000223   000116 701000 2                  TSX1    CHECK_RANGE
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:66   
         2 000224   000000 011000                    NOP     0

      356     8298    3           END;

      357     8299    2      IF RET_VAL=1

   8299  2 000225   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000226   000000 235100                    LDA     0,,PR0
         2 000227   000001 115007                    CMPA    1,DL
         2 000230   000272 601000 2                  TNZ     s:8315

      358     8300    2      THEN
      359     8301    3      DO;

      360     8302    3           ASN = %DEVICE#;

   8302  2 000231   003000 236003                    LDQ     1536,DU
         2 000232   200042 552140                    STBQ    ASN,'40'O,AUTO

      361     8303    3           RESULTS_FID.ASN = '1'B;

   8303  2 000233   010000 236003                    LDQ     4096,DU
         2 000234   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      362     8304    3           RESULTS_FID.RES = '1'B;

   8304  2 000235   004000 236003                    LDQ     2048,DU
         2 000236   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      363     8305    3           CALL HFF$NILERASE(%RES_PS#) ALTRET(NO_RES);

   8305  2 000237   000013 630400 3                  EPPR0   11
         2 000240   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000241   000000 701000 xent               TSX1    HFF$NILERASE
         2 000242   000244 702000 2                  TSX2    NO_RES

      364     8306    4           DO WHILE('0'B);
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:67   

   8306  2 000243   000250 710000 2                  TRA     s:8309

      365     8307    4   NO_RES:      CALL ERR_PROC(%E$NOFIELD);

   8307  2 000244   000017 236000 3     NO_RES       LDQ     15
         2 000245   200101 756100                    STQ     OCT_CHAR+3,,AUTO
         2 000246   000551 701000 2                  TSX1    ERR_PROC
         2 000247   000000 011000                    NOP     0

      366     8308    4                END;

      367     8309    3           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);

   8309  2 000250   200020 236100                    LDQ     LEXEME,,AUTO
         2 000251   000033 772000                    QRL     27
         2 000252   000000 620006                    EAX0    0,QL
         2 000253   000000 470400 xsym               LDP0    B$PS8$
         2 000254   040100 100540                    MLR     fill='040'O
         2 000255   200033 000010                    ADSC9   UC_LEXEME_START,,AUTO    cn=0,n=*X0
         2 000256   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

      368     8310    3           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;

   8310  2 000257   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 000260   200005 552104                    STBQ    RESULTS_FID+1,'04'O,AUTO

      369     8311    3           RESULTS_FID.SINDEX.RES = CUR_INDEX;

   8311  2 000261   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 000262   000033 736000                    QLS     27
         2 000263   200010 552140                    STBQ    RESULTS_FID+4,'40'O,AUTO

      370     8312    3           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;

   8312  2 000264   200020 236100                    LDQ     LEXEME,,AUTO
         2 000265   000011 772000                    QRL     9
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:68   
         2 000266   200012 552120                    STBQ    RESULTS_FID+6,'20'O,AUTO

      371     8313    3           RET_VAL = %TRUE#;

   8313  2 000267   000001 235007                    LDA     1,DL
         2 000270   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000271   000000 755100                    STA     0,,PR0

      372     8314    3           END;

      373     8315    2      RETURN;

   8315  2 000272   200056 221300                    LDX1  ! RET_VAL+1,,AUTO
         2 000273   000001 702211                    TSX2  ! 1,X1

      374     8316    2   END CHECK_STUFF_DEVICE_ID;
      375     8317        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:69   
      376     8318        /**/
      377     8319        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      378     8320        /* OPLABEL. IF IT IS, IT IS STUFFED IN RESOURCE FIELD AND %TRUE# IS RETURNED  */
      379     8321        /* IN RET_VAL, OTHERWISE NOTHING IS STUFFED AND %FALSE# IS RETURNED.          */
      380     8322        /*                                                                            */
      381     8323        /* OP-labels by nature don't allow NAME, ACCOUNT, or PASSWORD.                */
      382     8324        /*                                                                            */
      383     8325        /* NOTE:  The following CP-V style op-labels are no longer supported:         */
      384     8326        /*        C1, L1, P1, SI, and PO                                              */
      385     8327        /**/
      386     8328    1   CHECK_STUFF_OPLABEL: PROC(RET_VAL);

   8328  2 000274   200056 741300       CHECK_STUFF* STX1  ! RET_VAL+1,,AUTO

      387     8329        /**/
      388     8330        /*  PARAMETERS  */
      389     8331        /**/
      390     8332    2   DCL RET_VAL SBIN WORD;
      391     8333        /**/
      392     8334    2   DCL 1 OPLABEL_TABLE(0:%NUM_OPLABELS#) CONSTANT UNAL,
      393     8335    2         2 OP_TEXT CHAR (2) INIT('  ',
      394     8336    2           'CP',
      395     8337    2           'LP',
      396     8338    2           'CR',
      397     8339    2           'JE',
      398     8340    2           'JF',                           /* JF                                 */
      399     8341    2           'GR',                           /* GRnn                               */
      400     8342    2           'LO',
      401     8343    2           '  ',                           /* SPARE                              */
      402     8344    2           'ME',
      403     8345    2           'NO',
      404     8346    2           '  ',                           /* SPARE                              */
      405     8347    2           'UC'),
      406     8348    2         2 NN_STATUS UBIN HALF UNAL INIT(0,
      407     8349    2           %ALLOWED#,                      /* CP                                 */
      408     8350    2           %ALLOWED#,                      /* LP                                 */
      409     8351    2           %PROHIBITED#,                   /* CR                                 */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:70   
      410     8352    2           %PROHIBITED#,                   /* JE                                 */
      411     8353    2           %PROHIBITED#,                   /* JF                                 */
      412     8354    2           %ALLOWED#,                      /* GRnn                               */
      413     8355    2           %PROHIBITED#,                   /* LO                                 */
      414     8356    2           0,                              /* SPARE                              */
      415     8357    2           %PROHIBITED#,                   /* ME                                 */
      416     8358    2           %PROHIBITED#,                   /* NO                                 */
      417     8359    2           0,                              /* SPARE                              */
      418     8360    2           %ALLOWED#);                  /* UC                                 */
      419     8361        /**/
      420     8362    2           RET_VAL = %FALSE#;              /* Nothing yet                        */

   8362  2 000275   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000276   000000 450100                    STZ     0,,PR0

      421     8363    2           IF LEXEME.LEN ~= 2

   8363  2 000277   200020 236100                    LDQ     LEXEME,,AUTO
         2 000300   777000 376003                    ANQ     -512,DU
         2 000301   002000 116003                    CMPQ    1024,DU
         2 000302   000305 600000 2                  TZE     s:8370
         2 000303   004000 116003                    CMPQ    2048,DU
         2 000304   000420 601000 2                  TNZ     FINIS_OP

      422     8364    2            AND LEXEME.LEN ~= 4
      423     8365    2            THEN                           /* CAN'T be an OP-label               */
      424     8366    2              GOTO FINIS_OP;
      425     8367        /**/
      426     8368        /*  Scan table of op-label prefixes for a match.                              */
      427     8369        /**/
      428     8370    3           DO I = %NUM_OPLABELS# DOWNTO 1;

   8370  2 000305   000014 235007                    LDA     12,DL
         2 000306   200046 755100                    STA     I,,AUTO

      429     8371    3             IF SUBSTR(UC_LEXEME_START,0,2) = OPLABEL_TABLE.OP_TEXT(I)

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:71   
   8371  2 000307   200033 220100                    LDX0    UC_LEXEME_START,,AUTO
         2 000310   200046 721100                    LXL1    I,,AUTO
         2 000311   000201 100011 1                  CMPX0   OPLABEL_TABLE,X1
         2 000312   000316 600000 2                  TZE     s:8375

      430     8372    3               THEN
      431     8373    3                 EXIT;
      432     8374    3                END;

   8374  2 000313   000001 336007                    LCQ     1,DL
         2 000314   200046 056100                    ASQ     I,,AUTO
         2 000315   000307 605400 2                  TPNZ    s:8371

      433     8375    2           IF I=0

   8375  2 000316   200046 235100                    LDA     I,,AUTO
         2 000317   000420 600000 2                  TZE     FINIS_OP

      434     8376    2            THEN                           /* NO MATCH                           */
      435     8377    2                GOTO FINIS_OP;
      436     8378        /**/
      437     8379        /*  Op-label prefix is OK.  Check for 'nn' suffix.                            */
      438     8380        /**/
      439     8381    2           IF LEXEME.LEN=2

   8381  2 000320   200020 236100                    LDQ     LEXEME,,AUTO
         2 000321   777000 376003                    ANQ     -512,DU
         2 000322   002000 116003                    CMPQ    1024,DU
         2 000323   000333 601000 2                  TNZ     s:8389

      440     8382    2            THEN                           /* The op-lab has no 'nn' after it    */
      441     8383    2              IF OPLABEL_TABLE.NN_STATUS(I) = %REQUIRED#

   8383  2 000324   000201 721005 1                  LXL1    OPLABEL_TABLE,AL
         2 000325   000003 101003                    CMPX1   3,DU
         2 000326   000354 600000 2                  TZE     s:8398

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:72   
      442     8384    2               THEN                        /* Required 'nn' is missing           */
      443     8385    2                  ;
      444     8386    2              ELSE
      445     8387    2                  RET_VAL = %TRUE#;        /* OK!                                */

   8387  2 000327   000001 235007                    LDA     1,DL
         2 000330   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000331   000000 755100                    STA     0,,PR0
         2 000332   000354 710000 2                  TRA     s:8398

      446     8388    2           ELSE                       /* The op-lab has some 'nn' after it  */
      447     8389    2             IF OPLABEL_TABLE.NN_STATUS(I) = %PROHIBITED#

   8389  2 000333   000201 721005 1                  LXL1    OPLABEL_TABLE,AL
         2 000334   000001 101003                    CMPX1   1,DU
         2 000335   000354 600000 2                  TZE     s:8398

      448     8390    2              THEN                         /* Illegal 'nn' on op-label           */
      449     8391    2                ;
      450     8392    2             ELSE                          /* 'opnn' is OK.  Check the 'nn'      */
      451     8393    2                CALL CHECK_RANGE(RET_VAL,

   8393  2 000336   200102 452500                    STP2    @ERR_CODE+1,,AUTO
         2 000337   200102 236100                    LDQ     @ERR_CODE+1,,AUTO
         2 000340   000010 036000 3                  ADLQ    8
         2 000341   200106 756100                    STQ     @ERR_CODE+5,,AUTO
         2 000342   000014 237000 3                  LDAQ    12
         2 000343   200066 757100                    STAQ    @LOW_CHAR,,AUTO
         2 000344   000005 236000 3                  LDQ     5
         2 000345   200065 756100                    STQ     @STRING_BOUND,,AUTO
         2 000346   200106 630500                    EPPR0   @ERR_CODE+5,,AUTO
         2 000347   200064 450500                    STP0    @STRING$,,AUTO
         2 000350   200057 236100                    LDQ     @RET_VAL,,AUTO
         2 000351   200063 756100                    STQ     @RET_VAL,,AUTO
         2 000352   000116 701000 2                  TSX1    CHECK_RANGE
         2 000353   000000 011000                    NOP     0

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:73   
      452     8394    2                 PINCRC(ADDR(UC_LEXEME_START),2),
      453     8395    2                       1,
      454     8396    2                       '0',
      455     8397    2                       '9');
      456     8398    2           IF RET_VAL = %FALSE#

   8398  2 000354   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000355   000000 235100                    LDA     0,,PR0
         2 000356   000420 600000 2                  TZE     FINIS_OP

      457     8399    2            THEN                           /* We had troubles with 'nn'          */
      458     8400    2              GOTO FINIS_OP;
      459     8401        /**/
      460     8402        /*  We are happy with the op-label.  Package it up for the caller.            */
      461     8403        /**/
      462     8404    2           RESULTS_FID.RES = '1'B;

   8404  2 000357   004000 236003                    LDQ     2048,DU
         2 000360   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      463     8405    2           CALL HFF$NILERASE(%RES_PS#)

   8405  2 000361   000013 630400 3                  EPPR0   11
         2 000362   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000363   000000 701000 xent               TSX1    HFF$NILERASE
         2 000364   000366 702000 2                  TSX2    s:8407
         2 000365   000372 710000 2                  TRA     s:8409

      464     8406    3           WHENALTRETURN DO;

      465     8407    3              CALL ERR_PROC(%E$NOFIELD);

   8407  2 000366   000017 236000 3                  LDQ     15
         2 000367   200101 756100                    STQ     OCT_CHAR+3,,AUTO
         2 000370   000551 701000 2                  TSX1    ERR_PROC
         2 000371   000000 011000                    NOP     0

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:74   
      466     8408    3              END;

      467     8409    2           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);

   8409  2 000372   200020 236100                    LDQ     LEXEME,,AUTO
         2 000373   000033 772000                    QRL     27
         2 000374   000000 620006                    EAX0    0,QL
         2 000375   000000 470400 xsym               LDP0    B$PS8$
         2 000376   040100 100540                    MLR     fill='040'O
         2 000377   200033 000010                    ADSC9   UC_LEXEME_START,,AUTO    cn=0,n=*X0
         2 000400   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

      468     8410    2           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;

   8410  2 000401   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 000402   200005 552104                    STBQ    RESULTS_FID+1,'04'O,AUTO

      469     8411    2           RESULTS_FID.SINDEX.RES = CUR_INDEX;

   8411  2 000403   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 000404   000033 736000                    QLS     27
         2 000405   200010 552140                    STBQ    RESULTS_FID+4,'40'O,AUTO

      470     8412    2           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;

   8412  2 000406   200020 236100                    LDQ     LEXEME,,AUTO
         2 000407   000011 772000                    QRL     9
         2 000410   200012 552120                    STBQ    RESULTS_FID+6,'20'O,AUTO

      471     8413    2           ASN = %DEVICE#;

   8413  2 000411   003000 236003                    LDQ     1536,DU
         2 000412   200042 552140                    STBQ    ASN,'40'O,AUTO

      472     8414    2           RESULTS_FID.ASN = '1'B;

   8414  2 000413   010000 236003                    LDQ     4096,DU
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:75   
         2 000414   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      473     8415    2           RET_VAL = %TRUE#;

   8415  2 000415   000001 235007                    LDA     1,DL
         2 000416   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000417   000000 755100                    STA     0,,PR0

   8415  2 000420                       FINIS_OP     null
      474     8416    2           ;
      475     8417    2   FINIS_OP: ;
      476     8418    2           RETURN;

   8418  2 000420   200056 221300                    LDX1  ! RET_VAL+1,,AUTO
         2 000421   000001 702211                    TSX2  ! 1,X1

      477     8419    2   END CHECK_STUFF_OPLABEL;
      478     8420        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:76   
      479     8421        /**/
      480     8422        /* THIS PROCEDURE CHECKS THE CURRENT LEXEME TO SEE IF IT IS A VALID           */
      481     8423        /* RESOURCE. IF IT IS, IT IS STUFFED IN RESOURCE FIELD AND %TRUE# IS RETURNED */
      482     8424        /* IN RET_VAL, OTHERWISE NOTHING IS STUFFED AND %FALSE# IS RETURNED.          */
      483     8425        /**/
      484     8426    1   CHECK_STUFF_RESOURCE: PROC(RET_VAL);

   8426  2 000422   200056 741300       CHECK_STUFF* STX1  ! RET_VAL+1,,AUTO

      485     8427        /**/
      486     8428        /*  PARAMETERS  */
      487     8429        /**/
      488     8430    2   DCL RET_VAL SBIN WORD;
      489     8431        /**/
      490     8432    2   DCL TEMP$ PTR;
      491     8433    2   DCL 1 RESOURCE_TABLE(0:%NUM_RESOURCE_TYPES#) CONSTANT UNAL,
      492     8434    2         2 RES_TEXT CHAR(2) INIT('  ',
      493     8435    2           'CG',
      494     8436    2           'DP',
      495     8437    2           'MT',
      496     8438    2           'FT',
      497     8439    2           '  ',                           /* SPARE, USED TO BE 7T           */
      498     8440    2           'LT',
      499     8441    2           'SY',
      500     8442    2           'CL',
      501     8443    2           'OD'),
      502     8444    2         2 NN_STATUS UBIN BYTE UNAL INIT(0,
      503     8445    2           %PROHIBITED#,                   /* CGnn makes no sense                */
      504     8446    2           %ALLOWED#,
      505     8447    2           %ALLOWED#,
      506     8448    2           %ALLOWED#,
      507     8449    2           %ALLOWED#,
      508     8450    2           %ALLOWED#,
      509     8451    2           %PROHIBITED#,
      510     8452    2           %PROHIBITED#,
      511     8453    2           %ALLOWED#),
      512     8454    2         2 ASN_CODE UBIN BYTE UNAL INIT(0,
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:77   
      513     8455    2           %COMGROUP#,
      514     8456    2           %FILE#,
      515     8457    2           %DEVICE#,
      516     8458    2           %DEVICE#,
      517     8459    2           %DEVICE#,
      518     8460    2           %TAPE#,
      519     8461    2           %DEVICE#,
      520     8462    2           %DEVICE#,
      521     8463    2           %FILE#);
      522     8464        /**/
      523     8465    2           RET_VAL = %FALSE#;              /* We don't have anything yet!        */

   8465  2 000423   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000424   000000 450100                    STZ     0,,PR0

      524     8466    2           IF LEXEME.LEN ~= 2

   8466  2 000425   200020 236100                    LDQ     LEXEME,,AUTO
         2 000426   777000 376003                    ANQ     -512,DU
         2 000427   002000 116003                    CMPQ    1024,DU
         2 000430   000433 600000 2                  TZE     s:8474
         2 000431   004000 116003                    CMPQ    2048,DU
         2 000432   000547 601000 2                  TNZ     FINIS_RESOURCE

      525     8467    2            AND LEXEME.LEN ~= 4
      526     8468    2            THEN                           /* COULDN'T be a resource             */
      527     8469    2              GOTO FINIS_RESOURCE;
      528     8470        /**/
      529     8471        /*  Scan table of valid resource prefixes to see whether or not this          */
      530     8472        /*  was supposed to be one.                                                   */
      531     8473        /**/
      532     8474    3           DO I = %NUM_RESOURCE_TYPES# DOWNTO 1;

   8474  2 000433   000011 235007                    LDA     9,DL
         2 000434   200046 755100                    STA     I,,AUTO

      533     8475    3                IF SUBSTR(UC_LEXEME_START,0,2) = RESOURCE_TABLE.RES_TEXT(I)
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:78   

   8475  2 000435   200033 220100                    LDX0    UC_LEXEME_START,,AUTO
         2 000436   200046 721100                    LXL1    I,,AUTO
         2 000437   000216 100011 1                  CMPX0   RESOURCE_TABLE,X1
         2 000440   000444 600000 2                  TZE     s:8479

      534     8476    3                  THEN
      535     8477    3                     EXIT;
      536     8478    3                END;

   8478  2 000441   000001 336007                    LCQ     1,DL
         2 000442   200046 056100                    ASQ     I,,AUTO
         2 000443   000435 605400 2                  TPNZ    s:8475

      537     8479    2           IF I = 0

   8479  2 000444   200046 235100                    LDA     I,,AUTO
         2 000445   000547 600000 2                  TZE     FINIS_RESOURCE

      538     8480    2            THEN                           /* The XX in XX[nn] is unknown res    */
      539     8481    2              GOTO FINIS_RESOURCE;
      540     8482        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:79   
      541     8483        /**/
      542     8484        /*  The resource prefix is valid.  Check for the 'nn' suffix and insure       */
      543     8485        /*  it's legality.                                                            */
      544     8486        /**/
      545     8487    2           IF LEXEME.LEN=2

   8487  2 000446   200020 236100                    LDQ     LEXEME,,AUTO
         2 000447   777000 376003                    ANQ     -512,DU
         2 000450   002000 116003                    CMPQ    1024,DU
         2 000451   000462 601000 2                  TNZ     s:8497

      546     8488    2           THEN                            /* The device has no 'nn' after it    */
      547     8489    3                DO;

      548     8490    3                  IF RESOURCE_TABLE.NN_STATUS(I) = %REQUIRED#

   8490  2 000452   000216 236005 1                  LDQ     RESOURCE_TABLE,AL
         2 000453   777000 376007                    ANQ     -512,DL
         2 000454   003000 116007                    CMPQ    1536,DL
         2 000455   000504 600000 2                  TZE     s:8506

      549     8491    3                    THEN                   /* Required 'nn' is missing           */
      550     8492    3                      ;
      551     8493    3                  ELSE
      552     8494    3                      RET_VAL = %TRUE#;    /* OK!                                */

   8494  2 000456   000001 235007                    LDA     1,DL
         2 000457   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000460   000000 755100                    STA     0,,PR0

      553     8495    3                  END;

   8495  2 000461   000504 710000 2                  TRA     s:8506

      554     8496    2           ELSE                       /* The device has some 'nn' after it  */
      555     8497    2                IF RESOURCE_TABLE.NN_STATUS(I) = %PROHIBITED#

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:80   
   8497  2 000462   000216 236005 1                  LDQ     RESOURCE_TABLE,AL
         2 000463   777000 376007                    ANQ     -512,DL
         2 000464   001000 116007                    CMPQ    512,DL
         2 000465   000504 600000 2                  TZE     s:8506

      556     8498    2                 THEN                      /* Illegal 'nn' is on end of dev      */
      557     8499    2                     ;
      558     8500    2                ELSE                       /* 'dvnn' OK.  Check 'nn' validity    */
      559     8501    2                     CALL CHECK_RANGE(RET_VAL,

   8501  2 000466   200102 452500                    STP2    @ERR_CODE+1,,AUTO
         2 000467   200102 236100                    LDQ     @ERR_CODE+1,,AUTO
         2 000470   000010 036000 3                  ADLQ    8
         2 000471   200107 756100                    STQ     @ERR_CODE+6,,AUTO
         2 000472   000014 237000 3                  LDAQ    12
         2 000473   200066 757100                    STAQ    @LOW_CHAR,,AUTO
         2 000474   000005 236000 3                  LDQ     5
         2 000475   200065 756100                    STQ     @STRING_BOUND,,AUTO
         2 000476   200107 630500                    EPPR0   @ERR_CODE+6,,AUTO
         2 000477   200064 450500                    STP0    @STRING$,,AUTO
         2 000500   200057 236100                    LDQ     @RET_VAL,,AUTO
         2 000501   200063 756100                    STQ     @RET_VAL,,AUTO
         2 000502   000116 701000 2                  TSX1    CHECK_RANGE
         2 000503   000000 011000                    NOP     0

      560     8502    2                       PINCRC(ADDR(UC_LEXEME_START),2),
      561     8503    2                       1,
      562     8504    2                       '0',
      563     8505    2                       '9');
      564     8506    2           IF RET_VAL = %FALSE#

   8506  2 000504   200057 470500                    LDP0    @RET_VAL,,AUTO
         2 000505   000000 235100                    LDA     0,,PR0
         2 000506   000547 600000 2                  TZE     FINIS_RESOURCE

      565     8507    2            THEN                           /* Problems with 'nn'                 */
      566     8508    2              GOTO FINIS_RESOURCE;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:81   
      567     8509        /**/
      568     8510        /*  We are now happy with the resource.  Pack it for shipment to caller.      */
      569     8511        /**/
      570     8512    2           ASN = RESOURCE_TABLE.ASN_CODE(I);

   8512  2 000507   200046 720100                    LXL0    I,,AUTO
         2 000510   000216 236010 1                  LDQ     RESOURCE_TABLE,X0
         2 000511   000033 736000                    QLS     27
         2 000512   200042 552140                    STBQ    ASN,'40'O,AUTO

      571     8513    2           RESULTS_FID.ASN = '1'B;

   8513  2 000513   010000 236003                    LDQ     4096,DU
         2 000514   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      572     8514    2           RESULTS_FID.RES = '1'B;

   8514  2 000515   004000 236003                    LDQ     2048,DU
         2 000516   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      573     8515    2           CALL HFF$NILERASE(%RES_PS#) ALTRET(NO_RES2);

   8515  2 000517   000013 630400 3                  EPPR0   11
         2 000520   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000521   000000 701000 xent               TSX1    HFF$NILERASE
         2 000522   000524 702000 2                  TSX2    NO_RES2

      574     8516    3           DO WHILE('0'B);

   8516  2 000523   000530 710000 2                  TRA     s:8519

      575     8517    3   NO_RES2:   CALL ERR_PROC(%E$NOFIELD);

   8517  2 000524   000017 236000 3     NO_RES2      LDQ     15
         2 000525   200101 756100                    STQ     OCT_CHAR+3,,AUTO
         2 000526   000551 701000 2                  TSX1    ERR_PROC
         2 000527   000000 011000                    NOP     0
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:82   

      576     8518    3              END;

      577     8519    2           RESOURCE$# -> RESOURCE$FIELD = SUBSTR(UC_LEXEME_START,0,LEXEME.LEN);

   8519  2 000530   200020 236100                    LDQ     LEXEME,,AUTO
         2 000531   000033 772000                    QRL     27
         2 000532   000000 620006                    EAX0    0,QL
         2 000533   000000 470400 xsym               LDP0    B$PS8$
         2 000534   040100 100540                    MLR     fill='040'O
         2 000535   200033 000010                    ADSC9   UC_LEXEME_START,,AUTO    cn=0,n=*X0
         2 000536   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

      578     8520    2           RESULTS_FID.TYPE.RES = CURR_LEXEME_TYPE;

   8520  2 000537   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 000540   200005 552104                    STBQ    RESULTS_FID+1,'04'O,AUTO

      579     8521    2           RESULTS_FID.SINDEX.RES = CUR_INDEX;

   8521  2 000541   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 000542   000033 736000                    QLS     27
         2 000543   200010 552140                    STBQ    RESULTS_FID+4,'40'O,AUTO

      580     8522    2           RESULTS_FID.CLENGTH.RES = LEXEME.LEN;

   8522  2 000544   200020 236100                    LDQ     LEXEME,,AUTO
         2 000545   000011 772000                    QRL     9
         2 000546   200012 552120                    STBQ    RESULTS_FID+6,'20'O,AUTO

   8522  2 000547                       FINIS_RESOU* null
      581     8523    2           ;
      582     8524    2   FINIS_RESOURCE: ;
      583     8525    2           RETURN;

   8525  2 000547   200056 221300                    LDX1  ! RET_VAL+1,,AUTO
         2 000550   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:83   

      584     8526    2   END CHECK_STUFF_RESOURCE;
      585     8527        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:84   
      586     8528        /**/
      587     8529        /*  THIS PROCEDURE IS CALLED FROM ANYWHERE IN UMF$FID WHEN AN ERROR IS        */
      588     8530        /*  DETECTED.  THE 'CODE' PART OF THE ERROR CODE IS PASSED AND WILL BE USED   */
      589     8531        /*  TO ALTRETURN TO THE USER.                                                 */
      590     8532        /**/
      591     8533    1   ERR_PROC: PROC(ERR_CODE);

   8533  2 000551   200100 741300       ERR_PROC     STX1  ! OCT_CHAR+2,,AUTO

      592     8534        /**/
      593     8535    2   DCL ERR_CODE SBIN WORD;
      594     8536        /**/
      595     8537    2      B$JIT$ -> B$JIT.ERR = '251506000004'O;

   8537  2 000552   000230 236000 1                  LDQ     RESOURCE_TABLE+10
         2 000553   000000 470400 xsym               LDP0    B$JIT$
         2 000554   000012 756100                    STQ     10,,PR0

      596     8538                                                /* FCG-MID = 'UMF' AND SEV = 4        */
      597     8539    2      B$JIT$ -> B$JIT.ERR.CODE = ERR_CODE;

   8539  2 000555   200101 471500                    LDP1    @ERR_CODE,,AUTO
         2 000556   100000 236100                    LDQ     0,,PR1
         2 000557   000003 736000                    QLS     3
         2 000560   000012 676100                    ERQ     10,,PR0
         2 000561   377770 376007                    ANQ     131064,DL
         2 000562   000012 656100                    ERSQ    10,,PR0

      598     8540    2      UNWIND TO ERR_RETURN;

   8540  2 000563   200016 237300                    LDAQ  ! ERR_RETURN,,AUTO
         2 000564   000000 700200 xent               TSX0  ! X66_AUNWIND
         2 000565   000000 000200                    ZERO    0,128

      599     8541    2   END ERR_PROC;
      600     8542        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:85   
      601     8543        /**/
      602     8544        /* THIS PROCEDURE GETS THE NEXT LEXEME AND CHECKS IT TO SEE IF IT IS A VALID  */
      603     8545        /* WORK STATION NUMBER(WSN). IF IT IS, IT IS STORED AWAY, OTHERWISE THE       */
      604     8546        /* PROCESSOR ERRORS.                                                          */
      605     8547        /**/
      606     8548    1   GET_CHECK_STUFF_WSN: PROC;

   8548  2 000566   200070 741300       GET_CHECK_S* STX1  ! I,,AUTO

      607     8549        /**/
      608     8550    2      IF ASN ~= %DEVICE#

   8550  2 000567   200042 236100                    LDQ     ASN,,AUTO
         2 000570   777000 376003                    ANQ     -512,DU
         2 000571   003000 116003                    CMPQ    1536,DU
         2 000572   000601 600000 2                  TZE     s:8553
         2 000573   200045 236100                    LDQ     CHECK,,AUTO
         2 000574   100000 316003                    CANQ    32768,DU
         2 000575   000601 600000 2                  TZE     s:8553

      609     8551    2       AND CHECK.PWODF                     /* AND we care                        */
      610     8552    2       THEN ERROR = '1'B;

   8552  2 000576   400000 236003                    LDQ     -131072,DU
         2 000577   200052 756100                    STQ     ERROR,,AUTO
         2 000600   000602 710000 2                  TRA     s:8554

      611     8553    2       ELSE ERROR = '0'B;

   8553  2 000601   200052 450100                    STZ     ERROR,,AUTO

      612     8554    2      CALL GET_NEXT_LEXEME;

   8554  2 000602   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 000603   000000 011000                    NOP     0

      613     8555    2       IF ERROR
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:86   

   8555  2 000604   200052 234100                    SZN     ERROR,,AUTO
         2 000605   000615 605000 2                  TPL     s:8563

      614     8556    3       THEN DO;

      615     8557    3          IF LEXEME.LEN = 0

   8557  2 000606   200020 236100                    LDQ     LEXEME,,AUTO
         2 000607   777000 316003                    CANQ    -512,DU
         2 000610   000615 601000 2                  TNZ     s:8563

      616     8558    3          THEN CALL ERR_PROC(%E$BADFID);       /* WORK STATION NOT ALLOWED FOR      */

   8558  2 000611   000001 236000 3                  LDQ     1
         2 000612   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 000613   000551 701000 2                  TSX1    ERR_PROC
         2 000614   000000 011000                    NOP     0

      617     8559                                                /* ANY BUT DEVICES                    */
      618     8560                                                /* THIS RESTRICTION MAY BE LIFTED*/
      619     8561                                                /* AT A LATER DATE.                   */
      620     8562    3         END;

      621     8563    2      RESULTS_FID.TYPE.WSN = CURR_LEXEME_TYPE;

   8563  2 000615   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 000616   000011 736000                    QLS     9
         2 000617   200005 552110                    STBQ    RESULTS_FID+1,'10'O,AUTO

      622     8564    2      RESULTS_FID.SINDEX.WSN = CUR_INDEX;

   8564  2 000620   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 000621   200007 552104                    STBQ    RESULTS_FID+3,'04'O,AUTO

      623     8565    2      RESULTS_FID.CLENGTH.WSN = FOUND_INDEX - CUR_INDEX;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:87   
   8565  2 000622   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 000623   200037 136100                    SBLQ    CUR_INDEX,,AUTO
         2 000624   000033 736000                    QLS     27
         2 000625   200012 552140                    STBQ    RESULTS_FID+6,'40'O,AUTO

      624     8566    2      CALL HFF$DSIZ (%WSN_PS#,FIELD_SIZE);

   8566  2 000626   200044 630500                    EPPR0   FIELD_SIZE,,AUTO
         2 000627   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 000630   000020 236000 3                  LDQ     16
         2 000631   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 000632   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 000633   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000634   000000 701000 xent               TSX1    HFF$DSIZ
         2 000635   000000 011000                    NOP     0

      625     8567    2      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)

   8567  2 000636   000010 236007                    LDQ     8,DL
         2 000637   000642 604000 2                  TMI     s:8567+4
         2 000640   200044 116100                    CMPQ    FIELD_SIZE,,AUTO
         2 000641   000643 604400 2                  TMOZ    s:8567+5
         2 000642   200044 236100                    LDQ     FIELD_SIZE,,AUTO
         2 000643   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 000644   200020 236100                    LDQ     LEXEME,,AUTO
         2 000645   000033 772000                    QRL     27
         2 000646   200102 116100                    CMPQ    @ERR_CODE+1,,AUTO
         2 000647   000654 604400 2                  TMOZ    s:8570

      626     8568    2      THEN
      627     8569    2        CALL ERR_PROC(%E$INVWSN);

   8569  2 000650   000022 236000 3                  LDQ     18
         2 000651   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 000652   000551 701000 2                  TSX1    ERR_PROC
         2 000653   000000 011000                    NOP     0

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:88   
      628     8570    2      IF NCHAR ~= ' '

   8570  2 000654   200035 236100                    LDQ     NCHAR,,AUTO
         2 000655   777000 376003                    ANQ     -512,DU
         2 000656   040000 116003                    CMPQ    16384,DU
         2 000657   000664 600000 2                  TZE     s:8573

      629     8571    2      THEN                                 /* WSN MUST BE LAST THING IN FID      */
      630     8572    2           CALL ERR_PROC(%E$BADFID);

   8572  2 000660   000001 236000 3                  LDQ     1
         2 000661   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 000662   000551 701000 2                  TSX1    ERR_PROC
         2 000663   000000 011000                    NOP     0

      631     8573    2      RESULTS_FID.WSN = '1'B;

   8573  2 000664   020000 236003                    LDQ     8192,DU
         2 000665   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      632     8574    2      CALL HFF$NILERASE(%WSN_PS#)  ALTRET(NO_WSN);

   8574  2 000666   000020 630400 3                  EPPR0   16
         2 000667   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000670   000000 701000 xent               TSX1    HFF$NILERASE
         2 000671   000673 702000 2                  TSX2    NO_WSN

      633     8575    3      DO WHILE('0'B);

   8575  2 000672   000677 710000 2                  TRA     s:8578

      634     8576    3   NO_WSN: CALL ERR_PROC(%E$NOFIELD);

   8576  2 000673   000017 236000 3     NO_WSN       LDQ     15
         2 000674   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 000675   000551 701000 2                  TSX1    ERR_PROC
         2 000676   000000 011000                    NOP     0
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:89   

      635     8577    3           END;

      636     8578    2      IF LEXEME.LEN > 0

   8578  2 000677   200020 236100                    LDQ     LEXEME,,AUTO
         2 000700   777000 316003                    CANQ    -512,DU
         2 000701   000712 600000 2                  TZE     s:8582

      637     8579    2      THEN                                 /* STORE THE FOUND WSN                */
      638     8580    2           WSN$# -> WSN$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;

   8580  2 000702   200020 236100                    LDQ     LEXEME,,AUTO
         2 000703   000033 772000                    QRL     27
         2 000704   000000 620006                    EAX0    0,QL
         2 000705   000000 470400 xsym               LDP0    B$PS6$
         2 000706   040100 100540                    MLR     fill='040'O
         2 000707   200020 200010                    ADSC9   LEXEME,,AUTO             cn=1,n=*X0
         2 000710   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 000711   000716 710000 2                  TRA     s:8583

      639     8581    2      ELSE                                 /* STORE SPECIAL 'DANGLING @'         */
      640     8582    2           WSN$# -> WSN$FIELD = '@';

   8582  2 000712   000000 470400 xsym               LDP0    B$PS6$
         2 000713   040100 100400                    MLR     fill='040'O
         2 000714   000023 000001 3                  ADSC9   19                       cn=0,n=1
         2 000715   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      641     8583    2   END GET_CHECK_STUFF_WSN;

   8583  2 000716   200070 221300                    LDX1  ! I,,AUTO
         2 000717   000001 702211                    TSX2  ! 1,X1

      642     8584        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:90   
      643     8585    1   GET_NAME_AND_REST: PROC;

   8585  2 000720   200062 741300       GET_NAME_AN* STX1  ! MAX_SERIALS+2,,AUTO

      644     8586        /**/
      645     8587    2   DCL RES$TYPE CHAR(2) BASED;
      646     8588        /**/
      647     8589    2      CALL GET_NEXT_LEXEME;

   8589  2 000721   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 000722   000000 011000                    NOP     0
         2 000723   000725 710000 2                  TRA     s:8593

      648     8590        /**/
      649     8591    2   NAME_AND_REST: ENTRY;

   8591  2 000724   200062 741300       NAME_AND_RE* STX1  ! MAX_SERIALS+2,,AUTO

      650     8592        /**/
      651     8593    2      CALL HFF$DSIZ (%NAME_PS#,MAX_NAME);

   8593  2 000725   200043 630500                    EPPR0   MAX_NAME,,AUTO
         2 000726   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 000727   000024 236000 3                  LDQ     20
         2 000730   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 000731   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 000732   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000733   000000 701000 xent               TSX1    HFF$DSIZ
         2 000734   000000 011000                    NOP     0

      652     8594    2      IF MAX_NAME > 0

   8594  2 000735   200043 235100                    LDA     MAX_NAME,,AUTO
         2 000736   000741 604400 2                  TMOZ    s:8597

      653     8595    2       THEN                                /* Adjust for count in TEXTC          */
      654     8596    2         MAX_NAME = MAX_NAME -1;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:91   

   8596  2 000737   000001 336007                    LCQ     1,DL
         2 000740   200043 056100                    ASQ     MAX_NAME,,AUTO

      655     8597    2      RESULTS_FID.TYPE.NAME = CURR_LEXEME_TYPE;

   8597  2 000741   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 000742   000011 736000                    QLS     9
         2 000743   200004 552110                    STBQ    RESULTS_FID,'10'O,AUTO

      656     8598    2      RESULTS_FID.SINDEX.NAME = CUR_INDEX;

   8598  2 000744   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 000745   200006 552104                    STBQ    RESULTS_FID+2,'04'O,AUTO

      657     8599    2      RESULTS_FID.CLENGTH.NAME = FOUND_INDEX - CUR_INDEX;

   8599  2 000746   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 000747   200037 136100                    SBLQ    CUR_INDEX,,AUTO
         2 000750   000033 736000                    QLS     27
         2 000751   200011 552140                    STBQ    RESULTS_FID+5,'40'O,AUTO

      658     8600    2      IF LEXEME.LEN <= MAX_NAME

   8600  2 000752   200020 236100                    LDQ     LEXEME,,AUTO
         2 000753   000033 772000                    QRL     27
         2 000754   200043 116100                    CMPQ    MAX_NAME,,AUTO
         2 000755   001135 605400 2                  TPNZ    BAD_NAME

      659     8601    2      THEN
      660     8602    3      DO;

      661     8603    3           IF RESULTS_FID.ASN = '0'B

   8603  2 000756   200004 236100                    LDQ     RESULTS_FID,,AUTO
         2 000757   010000 316003                    CANQ    4096,DU
         2 000760   000766 601000 2                  TNZ     s:8610
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:92   

      662     8604    3           THEN
      663     8605    4           DO;

      664     8606    4                RESULTS_FID.ASN = '1'B;

   8606  2 000761   010000 236003                    LDQ     4096,DU
         2 000762   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      665     8607    4                ASN = %FILE#;

   8607  2 000763   001000 236003                    LDQ     512,DU
         2 000764   200042 552140                    STBQ    ASN,'40'O,AUTO

      666     8608    4                END;

   8608  2 000765   001012 710000 2                  TRA     s:8620

      667     8609    3           ELSE
      668     8610    3                IF ASN = %DEVICE#

   8610  2 000766   200042 236100                    LDQ     ASN,,AUTO
         2 000767   777000 376003                    ANQ     -512,DU
         2 000770   003000 116003                    CMPQ    1536,DU
         2 000771   001012 601000 2                  TNZ     s:8620

      669     8611    3                THEN
      670     8612    3                     IF RESOURCE$# -> RES$TYPE = 'MT'

   8612  2 000772   000000 470400 xsym               LDP0    B$PS8$
         2 000773   040000 106500                    CMPC    fill='040'O
         2 000774   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 000775   000231 000002 1                  ADSC9   RESOURCE_TABLE+11        cn=0,n=2
         2 000776   001002 601000 2                  TNZ     s:8616

      671     8613    3                     THEN
      672     8614    3                          ASN = %TAPE#;    /* MT/ MEANS ANS LABELED TAPE(LT)*/
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:93   

   8614  2 000777   002000 236003                    LDQ     1024,DU
         2 001000   200042 552140                    STBQ    ASN,'40'O,AUTO
         2 001001   001012 710000 2                  TRA     s:8620

      673     8615    3                     ELSE
      674     8616    3                          IF RESOURCE$# -> RES$TYPE = 'FT'

   8616  2 001002   040000 106500                    CMPC    fill='040'O
         2 001003   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 001004   000232 000002 1                  ADSC9   RESOURCE_TABLE+12        cn=0,n=2
         2 001005   001012 601000 2                  TNZ     s:8620

      675     8617    3                          THEN
      676     8618    3                               CALL ERR_PROC(%E$BADFID);

   8618  2 001006   000001 236000 3                  LDQ     1
         2 001007   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001010   000551 701000 2                  TSX1    ERR_PROC
         2 001011   000000 011000                    NOP     0

      677     8619                                                /* FT/ IS AN ILLEGAL FID              */
      678     8620    3           IF LEXEME.LEN>0

   8620  2 001012   200020 236100                    LDQ     LEXEME,,AUTO
         2 001013   777000 316003                    CANQ    -512,DU
         2 001014   001106 600000 2                  TZE     s:8648

      679     8621    3           THEN
      680     8622    4           DO;

      681     8623    4                RESULTS_FID.NAME = '1'B;

   8623  2 001015   400000 236003                    LDQ     -131072,DU
         2 001016   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      682     8624    4                CALL HFF$NILERASE(%NAME_PS#)
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:94   

   8624  2 001017   000024 630400 3                  EPPR0   20
         2 001020   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001021   000000 701000 xent               TSX1    HFF$NILERASE
         2 001022   001024 702000 2                  TSX2    s:8626
         2 001023   001030 710000 2                  TRA     s:8628

      683     8625    5                WHENALTRETURN DO;

      684     8626    5                     CALL ERR_PROC(%E$NOFIELD);

   8626  2 001024   000017 236000 3                  LDQ     15
         2 001025   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001026   000551 701000 2                  TSX1    ERR_PROC
         2 001027   000000 011000                    NOP     0

      685     8627    5                     END;

      686     8628    4                NAME$# -> NAME$FIELD.LEN = LEXEME.LEN;

   8628  2 001030   000000 470400 xsym               LDP0    B$PS2$
         2 001031   000100 100500                    MLR     fill='000'O
         2 001032   200020 000001                    ADSC9   LEXEME,,AUTO             cn=0,n=1
         2 001033   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

      687     8629    4                NAME$# -> NAME$FIELD.STRING = LEXEME.STRING;

   8629  2 001034   000000 470400 xsym               LDP0    B$PS2$
         2 001035   200043 720100                    LXL0    MAX_NAME,,AUTO
         2 001036   040140 100500                    MLR     fill='040'O
         2 001037   200020 200050                    ADSC9   LEXEME,,AUTO             cn=1,n=40
         2 001040   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0

      688     8630    4                IF ASN = %FILE#

   8630  2 001041   200042 236100                    LDQ     ASN,,AUTO
         2 001042   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:95   
         2 001043   001000 116003                    CMPQ    512,DU
         2 001044   001063 601000 2                  TNZ     s:8636
         2 001045   200020 236100                    LDQ     LEXEME,,AUTO
         2 001046   000777 376003                    ANQ     511,DU
         2 001047   000052 116003                    CMPQ    42,DU
         2 001050   001063 601000 2                  TNZ     s:8636
         2 001051   200004 236100                    LDQ     RESULTS_FID,,AUTO
         2 001052   040000 316003                    CANQ    16384,DU
         2 001053   001063 600000 2                  TZE     s:8636
         2 001054   200045 236100                    LDQ     CHECK,,AUTO
         2 001055   200000 316003                    CANQ    65536,DU
         2 001056   001063 600000 2                  TZE     s:8636

      689     8631    4                 AND SUBSTR(LEXEME.STRING,0,1) = '*' /* AND STAR-file            */
      690     8632    4                 AND RESULTS_FID.SN        /* AND PACKSET                        */
      691     8633    4                 AND CHECK.PPOSF           /* AND WE CARE                        */
      692     8634    4                 THEN
      693     8635    4                   CALL ERR_PROC (%E$BADFID);

   8635  2 001057   000001 236000 3                  LDQ     1
         2 001060   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001061   000551 701000 2                  TSX1    ERR_PROC
         2 001062   000000 011000                    NOP     0

      694     8636    4                IF ASN = %FILE#

   8636  2 001063   200042 236100                    LDQ     ASN,,AUTO
         2 001064   777000 376003                    ANQ     -512,DU
         2 001065   001000 116003                    CMPQ    512,DU
         2 001066   001106 601000 2                  TNZ     s:8648
         2 001067   200020 236100                    LDQ     LEXEME,,AUTO
         2 001070   000777 376003                    ANQ     511,DU
         2 001071   000052 116003                    CMPQ    42,DU
         2 001072   001106 600000 2                  TZE     s:8648
         2 001073   200045 236100                    LDQ     CHECK,,AUTO
         2 001074   040000 316003                    CANQ    16384,DU
         2 001075   001106 600000 2                  TZE     s:8648
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:96   
         2 001076   200041 235100                    LDA     CURR_LEXEME_TYPE,,AUTO
         2 001077   001106 601000 2                  TNZ     s:8648

      695     8637    4                 AND SUBSTR(LEXEME.STRING,0,1) ~= '*' /* AND not STAR-file       */
      696     8638    4                 AND CHECK.CCHARS                    /* AND we care about chars. */
      697     8639    4                 AND CURR_LEXEME_TYPE = %UMF$SIMPLE_STRING#
      698     8640    4                  THEN
      699     8641    5                    DO;

      700     8642    5                      CALL INDEX(I,'?',LEXEME.STRING)

   8642  2 001100   000000 124500                    SCM     mask='000'O
         2 001101   200020 200050                    ADSC9   LEXEME,,AUTO             cn=1,n=40
         2 001102   000025 000001 3                  ADSC9   21                       cn=0,n=1
         2 001103   200046 000100                    ARG     I,,AUTO
         2 001104   001106 606400 2                  TTN     s:8648

      701     8643    6                      WHENRETURN DO;

      702     8644    6                           GOTO BAD_NAME;  /* NAME contains '?'                  */

   8644  2 001105   001135 710000 2                  TRA     BAD_NAME

      703     8645    6                           END;
      704     8646    5                      END;

      705     8647    4                END;

      706     8648    3           IF NCHAR ~= ' '

   8648  2 001106   200035 236100                    LDQ     NCHAR,,AUTO
         2 001107   777000 376003                    ANQ     -512,DU
         2 001110   040000 116003                    CMPQ    16384,DU
         2 001111   001141 600000 2                  TZE     s:8665

      707     8649    3           THEN
      708     8650    3                IF NCHAR = '.'
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:97   

   8650  2 001112   200035 236100                    LDQ     NCHAR,,AUTO
         2 001113   777000 376003                    ANQ     -512,DU
         2 001114   056000 116003                    CMPQ    23552,DU
         2 001115   001121 601000 2                  TNZ     s:8654

      709     8651    3                THEN
      710     8652    3                     CALL GET_ACCT_AND_REST;

   8652  2 001116   001143 701000 2                  TSX1    GET_ACCT_AND_REST
         2 001117   000000 011000                    NOP     0
         2 001120   001141 710000 2                  TRA     s:8665

      711     8653    3                ELSE
      712     8654    3                     IF NCHAR = '@'

   8654  2 001121   200035 236100                    LDQ     NCHAR,,AUTO
         2 001122   777000 376003                    ANQ     -512,DU
         2 001123   100000 116003                    CMPQ    32768,DU
         2 001124   001130 601000 2                  TNZ     s:8658

      713     8655    3                     THEN
      714     8656    3                          CALL GET_CHECK_STUFF_WSN;

   8656  2 001125   000566 701000 2                  TSX1    GET_CHECK_STUFF_WSN
         2 001126   000000 011000                    NOP     0
         2 001127   001141 710000 2                  TRA     s:8665

      715     8657    3                     ELSE
      716     8658    3                          CALL ERR_PROC(%E$BADFID);

   8658  2 001130   000001 236000 3                  LDQ     1
         2 001131   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001132   000551 701000 2                  TSX1    ERR_PROC
         2 001133   000000 011000                    NOP     0

      717     8659    3           END;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:98   

   8659  2 001134   001141 710000 2                  TRA     s:8665

      718     8660    2      ELSE                                 /* NAME greater than will fit         */
      719     8661    3        DO;

   8648  2 001135                       BAD_NAME     null
      720     8662    3   BAD_NAME: ;
      721     8663    3           CALL ERR_PROC(%E$BADFNME);      /* Bad file NAME                      */

   8663  2 001135   000027 236000 3                  LDQ     23
         2 001136   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001137   000551 701000 2                  TSX1    ERR_PROC
         2 001140   000000 011000                    NOP     0

      722     8664    3           END;

      723     8665    2      RETURN;

   8665  2 001141   200062 221300                    LDX1  ! MAX_SERIALS+2,,AUTO
         2 001142   000001 702211                    TSX2  ! 1,X1

      724     8666        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:99   
      725     8667    2   GET_ACCT_AND_REST: PROC;

   8667  2 001143   200064 741300       GET_ACCT_AN* STX1  ! @STRING$,,AUTO

      726     8668        /**/
      727     8669    3      CALL GET_NEXT_LEXEME;

   8669  2 001144   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 001145   000000 011000                    NOP     0

      728     8670    3      CALL HFF$DSIZ (%ACCT_PS#,FIELD_SIZE);

   8670  2 001146   200044 630500                    EPPR0   FIELD_SIZE,,AUTO
         2 001147   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 001150   000030 236000 3                  LDQ     24
         2 001151   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001152   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 001153   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001154   000000 701000 xent               TSX1    HFF$DSIZ
         2 001155   000000 011000                    NOP     0

      729     8671    3      RESULTS_FID.TYPE.ACCT = CURR_LEXEME_TYPE;

   8671  2 001156   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 001157   200004 552104                    STBQ    RESULTS_FID,'04'O,AUTO

      730     8672    3      RESULTS_FID.SINDEX.ACCT = CUR_INDEX;

   8672  2 001160   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 001161   000033 736000                    QLS     27
         2 001162   200007 552140                    STBQ    RESULTS_FID+3,'40'O,AUTO

      731     8673    3      RESULTS_FID.CLENGTH.ACCT = FOUND_INDEX - CUR_INDEX;

   8673  2 001163   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001164   200037 136100                    SBLQ    CUR_INDEX,,AUTO
         2 001165   000022 736000                    QLS     18
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:100  
         2 001166   200011 552120                    STBQ    RESULTS_FID+5,'20'O,AUTO

      732     8674    3      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)

   8674  2 001167   000010 236007                    LDQ     8,DL
         2 001170   001173 604000 2                  TMI     s:8674+4
         2 001171   200044 116100                    CMPQ    FIELD_SIZE,,AUTO
         2 001172   001174 604400 2                  TMOZ    s:8674+5
         2 001173   200044 236100                    LDQ     FIELD_SIZE,,AUTO
         2 001174   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001175   200020 236100                    LDQ     LEXEME,,AUTO
         2 001176   000033 772000                    QRL     27
         2 001177   200102 116100                    CMPQ    @ERR_CODE+1,,AUTO
         2 001200   001205 604400 2                  TMOZ    s:8677

      733     8675    3      THEN
      734     8676    3        CALL ERR_PROC(%E$BADACCT);         /* Bad file ACCOUNT                   */

   8676  2 001201   000032 236000 3                  LDQ     26
         2 001202   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001203   000551 701000 2                  TSX1    ERR_PROC
         2 001204   000000 011000                    NOP     0

      735     8677    3      RESULTS_FID.ACCT = '1'B;

   8677  2 001205   200000 236003                    LDQ     65536,DU
         2 001206   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      736     8678    3      ACCT$# -> ACCT$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;

   8678  2 001207   200020 236100                    LDQ     LEXEME,,AUTO
         2 001210   000033 772000                    QRL     27
         2 001211   000000 620006                    EAX0    0,QL
         2 001212   000000 470400 xsym               LDP0    B$PS3$
         2 001213   200044 721100                    LXL1    FIELD_SIZE,,AUTO
         2 001214   040140 100540                    MLR     fill='040'O
         2 001215   200020 200010                    ADSC9   LEXEME,,AUTO             cn=1,n=*X0
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:101  
         2 001216   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1

      737     8679    3      IF LEXEME.LEN > 0         /* If really an account               */

   8679  2 001217   200020 236100                    LDQ     LEXEME,,AUTO
         2 001220   777000 316003                    CANQ    -512,DU
         2 001221   001243 600000 2                  TZE     s:8686
         2 001222   200042 236100                    LDQ     ASN,,AUTO
         2 001223   777000 376003                    ANQ     -512,DU
         2 001224   001000 116003                    CMPQ    512,DU
         2 001225   001243 601000 2                  TNZ     s:8686
         2 001226   200004 234100                    SZN     RESULTS_FID,,AUTO
         2 001227   001243 605000 2                  TPL     s:8686
         2 001230   000000 470400 xsym               LDP0    B$PS2$
         2 001231   040000 106500                    CMPC    fill='040'O
         2 001232   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1
         2 001233   000033 000001 3                  ADSC9   27                       cn=0,n=1
         2 001234   001243 601000 2                  TNZ     s:8686
         2 001235   200045 234100                    SZN     CHECK,,AUTO
         2 001236   001243 605000 2                  TPL     s:8686

      738     8680    3       AND ASN = %FILE#
      739     8681    3       AND RESULTS_FID.NAME
      740     8682    3       AND SUBSTR(NAME$# -> NAME$FIELD.STRING,0,1) = '*' /* AND STAR-file        */
      741     8683    3       AND CHECK.PAOSF                     /* AND we care                        */
      742     8684    3       THEN
      743     8685    3         CALL ERR_PROC(%E$BADFID);         /* STAR-files can't have accounts     */

   8685  2 001237   000001 236000 3                  LDQ     1
         2 001240   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001241   000551 701000 2                  TSX1    ERR_PROC
         2 001242   000000 011000                    NOP     0

      744     8686    3      IF NCHAR ~= ' '

   8686  2 001243   200035 236100                    LDQ     NCHAR,,AUTO
         2 001244   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:102  
         2 001245   040000 116003                    CMPQ    16384,DU
         2 001246   001271 600000 2                  TZE     s:8697

      745     8687    3      THEN
      746     8688    3           IF NCHAR = '.'

   8688  2 001247   200035 236100                    LDQ     NCHAR,,AUTO
         2 001250   777000 376003                    ANQ     -512,DU
         2 001251   056000 116003                    CMPQ    23552,DU
         2 001252   001256 601000 2                  TNZ     s:8692

      747     8689    3           THEN
      748     8690    3                CALL GET_PASS;

   8690  2 001253   001273 701000 2                  TSX1    GET_PASS
         2 001254   000000 011000                    NOP     0
         2 001255   001271 710000 2                  TRA     s:8697

      749     8691    3           ELSE
      750     8692    3                IF NCHAR = '@'

   8692  2 001256   200035 236100                    LDQ     NCHAR,,AUTO
         2 001257   777000 376003                    ANQ     -512,DU
         2 001260   100000 116003                    CMPQ    32768,DU
         2 001261   001265 601000 2                  TNZ     s:8696

      751     8693    3                THEN
      752     8694    3                     CALL GET_CHECK_STUFF_WSN;

   8694  2 001262   000566 701000 2                  TSX1    GET_CHECK_STUFF_WSN
         2 001263   000000 011000                    NOP     0
         2 001264   001271 710000 2                  TRA     s:8697

      753     8695    3                ELSE
      754     8696    3                     CALL ERR_PROC(%E$BADFID);

   8696  2 001265   000001 236000 3                  LDQ     1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:103  
         2 001266   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001267   000551 701000 2                  TSX1    ERR_PROC
         2 001270   000000 011000                    NOP     0

      755     8697    3      RETURN;

   8697  2 001271   200064 221300                    LDX1  ! @STRING$,,AUTO
         2 001272   000001 702211                    TSX2  ! 1,X1

      756     8698        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:104  
      757     8699    3   GET_PASS: PROC;

   8699  2 001273   200066 741300       GET_PASS     STX1  ! @LOW_CHAR,,AUTO

      758     8700        /**/
      759     8701    4      CALL GET_NEXT_LEXEME;

   8701  2 001274   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 001275   000000 011000                    NOP     0

      760     8702    4      CALL HFF$DSIZ (%PASS_PS#,FIELD_SIZE);

   8702  2 001276   200044 630500                    EPPR0   FIELD_SIZE,,AUTO
         2 001277   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 001300   000034 236000 3                  LDQ     28
         2 001301   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001302   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 001303   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001304   000000 701000 xent               TSX1    HFF$DSIZ
         2 001305   000000 011000                    NOP     0

      761     8703    4      RESULTS_FID.TYPE.PASS = CURR_LEXEME_TYPE;

   8703  2 001306   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 001307   000033 736000                    QLS     27
         2 001310   200005 552140                    STBQ    RESULTS_FID+1,'40'O,AUTO

      762     8704    4      RESULTS_FID.SINDEX.PASS = CUR_INDEX;

   8704  2 001311   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 001312   000022 736000                    QLS     18
         2 001313   200007 552120                    STBQ    RESULTS_FID+3,'20'O,AUTO

      763     8705    4      RESULTS_FID.CLENGTH.PASS = FOUND_INDEX - CUR_INDEX;

   8705  2 001314   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001315   200037 136100                    SBLQ    CUR_INDEX,,AUTO
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:105  
         2 001316   000011 736000                    QLS     9
         2 001317   200011 552110                    STBQ    RESULTS_FID+5,'10'O,AUTO

      764     8706    4      IF LEXEME.LEN > MINIMUM (FIELD_SIZE,8)

   8706  2 001320   000010 236007                    LDQ     8,DL
         2 001321   001324 604000 2                  TMI     s:8706+4
         2 001322   200044 116100                    CMPQ    FIELD_SIZE,,AUTO
         2 001323   001325 604400 2                  TMOZ    s:8706+5
         2 001324   200044 236100                    LDQ     FIELD_SIZE,,AUTO
         2 001325   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001326   200020 236100                    LDQ     LEXEME,,AUTO
         2 001327   000033 772000                    QRL     27
         2 001330   200102 116100                    CMPQ    @ERR_CODE+1,,AUTO
         2 001331   001336 604400 2                  TMOZ    s:8709

      765     8707    4      THEN
      766     8708    4        CALL ERR_PROC(%E$BADPASS);         /* Bad file PASSWORD                  */

   8708  2 001332   000036 236000 3                  LDQ     30
         2 001333   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001334   000551 701000 2                  TSX1    ERR_PROC
         2 001335   000000 011000                    NOP     0

      767     8709    4      RESULTS_FID.PASS = '1'B;

   8709  2 001336   100000 236003                    LDQ     32768,DU
         2 001337   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      768     8710    4      PASS$# -> PASS$FIELD = ADDR(LEXEME) -> TEXT$C.STRING;

   8710  2 001340   200020 236100                    LDQ     LEXEME,,AUTO
         2 001341   000033 772000                    QRL     27
         2 001342   000000 620006                    EAX0    0,QL
         2 001343   000000 470400 xsym               LDP0    B$PS4$
         2 001344   200044 721100                    LXL1    FIELD_SIZE,,AUTO
         2 001345   040140 100540                    MLR     fill='040'O
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:106  
         2 001346   200020 200010                    ADSC9   LEXEME,,AUTO             cn=1,n=*X0
         2 001347   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1

      769     8711    4      IF NCHAR = '@'

   8711  2 001350   200035 236100                    LDQ     NCHAR,,AUTO
         2 001351   777000 376003                    ANQ     -512,DU
         2 001352   100000 116003                    CMPQ    32768,DU
         2 001353   001357 601000 2                  TNZ     s:8715

      770     8712    4      THEN
      771     8713    4           CALL GET_CHECK_STUFF_WSN;

   8713  2 001354   000566 701000 2                  TSX1    GET_CHECK_STUFF_WSN
         2 001355   000000 011000                    NOP     0
         2 001356   001367 710000 2                  TRA     s:8718

      772     8714    4      ELSE
      773     8715    4           IF NCHAR ~= ' '                 /* WSN ONLY MAY FOLLOW HERE           */

   8715  2 001357   200035 236100                    LDQ     NCHAR,,AUTO
         2 001360   777000 376003                    ANQ     -512,DU
         2 001361   040000 116003                    CMPQ    16384,DU
         2 001362   001367 600000 2                  TZE     s:8718

      774     8716    4           THEN
      775     8717    4                CALL ERR_PROC(%E$BADFID);

   8717  2 001363   000001 236000 3                  LDQ     1
         2 001364   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001365   000551 701000 2                  TSX1    ERR_PROC
         2 001366   000000 011000                    NOP     0

      776     8718    4   END GET_PASS;

   8718  2 001367   200066 221300                    LDX1  ! @LOW_CHAR,,AUTO
         2 001370   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:107  

      777     8719    3   END GET_ACCT_AND_REST;
      778     8720    2   END GET_NAME_AND_REST;
      779     8721        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:108  
      780     8722    1   GET_NEXT_LEXEME: PROC;

   8722  2 001371   200072 741300       GET_NEXT_LE* STX1  ! I+2,,AUTO

      781     8723        /**/
      782     8724    2      CURR_LEXEME_TYPE = %UMF$SIMPLE_STRING#;

   8724  2 001372   200041 450100                    STZ     CURR_LEXEME_TYPE,,AUTO

      783     8725    2      LCHAR = NCHAR;

   8725  2 001373   200035 236100                    LDQ     NCHAR,,AUTO
         2 001374   777000 376003                    ANQ     -512,DU
         2 001375   000037 276000 3                  ORQ     31
         2 001376   200034 756100                    STQ     LCHAR,,AUTO

      784     8726    2      CUR_INDEX = MINIMUM (FOUND_INDEX, TEXTBOUND) + 1;

   8726  2 001377   200047 236100                    LDQ     TEXTBOUND,,AUTO
         2 001400   200036 116100                    CMPQ    FOUND_INDEX,,AUTO
         2 001401   001403 604400 2                  TMOZ    s:8726+4
         2 001402   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001403   000001 036007                    ADLQ    1,DL
         2 001404   200037 756100                    STQ     CUR_INDEX,,AUTO

      785     8727    2      CALL SEARCH(FOUND_INDEX,

   8727  2 001405   200050 236100                    LDQ     TEXTSIZE,,AUTO
         2 001406   200037 136100                    SBLQ    CUR_INDEX,,AUTO
         2 001407   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001410   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 001411   000000 470400 xsym               LDP0    B$PS1$
         2 001412   200102 720100                    LXL0    @ERR_CODE+1,,AUTO
         2 001413   000000 164546                    TCT
         2 001414   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0
         2 001415   000001 000000 1                  ARG     SEARCH_TBL
         2 001416   200036 000100                    ARG     FOUND_INDEX,,AUTO
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:109  
         2 001417   200036 235100                    LDA     FOUND_INDEX,,AUTO
         2 001420   000033 771000                    ARL     27
         2 001421   200040 755100                    STA     CHAR_TYPE,,AUTO
         2 001422   200036 551140                    STBA    FOUND_INDEX,'40'O,AUTO
         2 001423   200036 056100                    ASQ     FOUND_INDEX,,AUTO

      786     8728    2        CHAR_TYPE,
      787     8729    2        SEARCH_TBL,
      788     8730    2        TEXTFID$# -> SEARCH$STR,
      789     8731    2        CUR_INDEX);
      790     8732    2      IF CHAR_TYPE = %QUOTE_CHAR#

   8732  2 001424   000003 115007                    CMPA    3,DL
         2 001425   001467 601000 2                  TNZ     s:8756

      791     8733    2      THEN
      792     8734    3        DO;

      793     8735    3           IF FOUND_INDEX = CUR_INDEX

   8735  2 001426   200036 116100                    CMPQ    FOUND_INDEX,,AUTO
         2 001427   001435 601000 2                  TNZ     s:8742

      794     8736    3           THEN
      795     8737    4                DO;

      796     8738    4                  CURR_LEXEME_TYPE = %UMF$QUOTED_STRING#;

   8738  2 001430   000001 235007                    LDA     1,DL
         2 001431   200041 755100                    STA     CURR_LEXEME_TYPE,,AUTO

      797     8739    4                  CALL QUOTED_STRING;

   8739  2 001432   001523 701000 2                  TSX1    QUOTED_STRING
         2 001433   000000 011000                    NOP     0

      798     8740    4                  END;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:110  

   8740  2 001434   001461 710000 2                  TRA     s:8752

      799     8741    3           ELSE
      800     8742    3                IF ((FOUND_INDEX=CUR_INDEX+1) AND

   8742  2 001435   000001 036007                    ADLQ    1,DL
         2 001436   200036 116100                    CMPQ    FOUND_INDEX,,AUTO
         2 001437   001455 601000 2                  TNZ     s:8751
         2 001440   200037 235100                    LDA     CUR_INDEX,,AUTO
         2 001441   040000 106505                    CMPC    fill='040'O
         2 001442   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001443   000040 000001 3                  ADSC9   32                       cn=0,n=1
         2 001444   001455 601000 2                  TNZ     s:8751

      801     8743    3                  (SUBSTR(TEXTFID$# -> SEARCH$STR,CUR_INDEX,1)='O'))
      802     8744    3                THEN
      803     8745    4                DO;

      804     8746    4                     CURR_LEXEME_TYPE = %UMF$OCTAL_STRING#;

   8746  2 001445   000002 235007                    LDA     2,DL
         2 001446   200041 755100                    STA     CURR_LEXEME_TYPE,,AUTO

      805     8747    4                     LEXEME.OCTAL_STRING = '0'B;

   8747  2 001447   000100 100400                    MLR     fill='000'O
         2 001450   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 001451   200020 200050                    ADSC9   LEXEME,,AUTO             cn=1,n=40

      806     8748    4                     CALL QUOTED_STRING;

   8748  2 001452   001523 701000 2                  TSX1    QUOTED_STRING
         2 001453   000000 011000                    NOP     0

      807     8749    4                     END;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:111  
   8749  2 001454   001461 710000 2                  TRA     s:8752

      808     8750    3                ELSE
      809     8751    3                     CALL ERR_PROC(%E$BADFID);

   8751  2 001455   000001 236000 3                  LDQ     1
         2 001456   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001457   000551 701000 2                  TSX1    ERR_PROC
         2 001460   000000 011000                    NOP     0

      810     8752    3           UC_LEXEME_START = LEXEME.STRING; /* Quote/oct strings dont XLATE */

   8752  2 001461   200020 235100                    LDA     LEXEME,,AUTO
         2 001462   200021 236100                    LDQ     LEXEME+1,,AUTO
         2 001463   000033 773000                    LRL     27
         2 001464   000027 376000 xsym               ANQ     B_VECTNIL+23
         2 001465   200033 756100                    STQ     UC_LEXEME_START,,AUTO

      811     8753    3           END;

   8753  2 001466   001507 710000 2                  TRA     s:8762

      812     8754    2      ELSE
      813     8755    3           DO;

      814     8756    3             LEXEME.LEN = FOUND_INDEX-CUR_INDEX;

   8756  2 001467   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001470   200037 136100                    SBLQ    CUR_INDEX,,AUTO
         2 001471   000033 736000                    QLS     27
         2 001472   200020 552140                    STBQ    LEXEME,'40'O,AUTO

      815     8757    3             LEXEME.STRING = SUBSTR(TEXTFID$# -> SEARCH$STR,

   8757  2 001473   200020 236100                    LDQ     LEXEME,,AUTO
         2 001474   000033 772000                    QRL     27
         2 001475   000000 620006                    EAX0    0,QL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:112  
         2 001476   200037 236100                    LDQ     CUR_INDEX,,AUTO
         2 001477   040100 100546                    MLR     fill='040'O
         2 001500   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0
         2 001501   200020 200050                    ADSC9   LEXEME,,AUTO             cn=1,n=40

      816     8758    3               CUR_INDEX,
      817     8759    3               LEXEME.LEN);
      818     8760    3             CALL XLATE(UC_LEXEME_START,EMH_UC_XLATE_TBL,LEXEME.STRING);

   8760  2 001502   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 001503   040100 160500                    MVT     fill='040'O
         2 001504   200020 200050                    ADSC9   LEXEME,,AUTO             cn=1,n=40
         2 001505   200033 000004                    ADSC9   UC_LEXEME_START,,AUTO    cn=0,n=4
         2 001506   100000 000100                    ARG     0,,PR1

      819     8761    3             END;

      820     8762    2      IF CHAR_TYPE = %NOT_FOUND#

   8762  2 001507   200040 235100                    LDA     CHAR_TYPE,,AUTO
         2 001510   001514 601000 2                  TNZ     s:8766

      821     8763    2      THEN
      822     8764    2           NCHAR = ' ';

   8764  2 001511   040000 236003                    LDQ     16384,DU
         2 001512   200035 756100                    STQ     NCHAR,,AUTO
         2 001513   001521 710000 2                  TRA     s:8767

      823     8765    2      ELSE
      824     8766    2           NCHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);

   8766  2 001514   000000 470400 xsym               LDP0    B$PS1$
         2 001515   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001516   040100 100506                    MLR     fill='040'O
         2 001517   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 001520   200035 000001                    ADSC9   NCHAR,,AUTO              cn=0,n=1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:113  

      825     8767    2      RETURN;

   8767  2 001521   200072 221300                    LDX1  ! I+2,,AUTO
         2 001522   000001 702211                    TSX2  ! 1,X1

      826     8768        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:114  
      827     8769    2   QUOTED_STRING: PROC;

   8769  2 001523   200074 741300       QUOTED_STRI* STX1  ! I+4,,AUTO

      828     8770        /**/
      829     8771    3   DCL SAV_INDEX SBIN WORD;
      830     8772    3   DCL OCT_CHAR CHAR(1);
      831     8773        /**/
      832     8774    3      LEXEME.LEN = 0;

   8774  2 001524   000000 236003                    LDQ     0,DU
         2 001525   200020 552140                    STBQ    LEXEME,'40'O,AUTO

      833     8775    3      I = 0;

   8775  2 001526   200046 450100                    STZ     I,,AUTO

      834     8776    4      DO WHILE(1=1);

      835     8777                                                /* LOOK FOR NEXT QUOTE                */
      836     8778    4           FOUND_INDEX = FOUND_INDEX+1;

   8778  2 001527   200036 054100                    AOS     FOUND_INDEX,,AUTO

      837     8779    4           IF FOUND_INDEX > TEXTBOUND OR LEXEME.LEN > 510

   8779  2 001530   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001531   200047 116100                    CMPQ    TEXTBOUND,,AUTO
         2 001532   001663 605400 2                  TPNZ    BADFID
         2 001533   200020 236100                    LDQ     LEXEME,,AUTO
         2 001534   777000 376003                    ANQ     -512,DU
         2 001535   777000 116003                    CMPQ    -512,DU
         2 001536   001663 603000 2                  TRC     BADFID

      838     8780    4           THEN
      839     8781    4                GOTO BADFID;
      840     8782                                                /* UNBALANCED QUOTE                   */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:115  
      841     8783    4           OCT_CHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);

   8783  2 001537   000000 470400 xsym               LDP0    B$PS1$
         2 001540   200036 235100                    LDA     FOUND_INDEX,,AUTO
         2 001541   040100 100505                    MLR     fill='040'O
         2 001542   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001543   200076 000001                    ADSC9   OCT_CHAR,,AUTO           cn=0,n=1

      842     8784    4           IF OCT_CHAR = ''''

   8784  2 001544   200076 236100                    LDQ     OCT_CHAR,,AUTO
         2 001545   777000 376003                    ANQ     -512,DU
         2 001546   047000 116003                    CMPQ    19968,DU
         2 001547   001626 600000 2                  TZE     s:8805

      843     8785    4           THEN EXIT;
      844     8786    4           IF CURR_LEXEME_TYPE = %UMF$OCTAL_STRING#

   8786  2 001550   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 001551   000002 116007                    CMPQ    2,DL
         2 001552   001611 601000 2                  TNZ     STUFF_IT

      845     8787    4           THEN
      846     8788    5             DO;

      847     8789    5                IF OCT_CHAR < '0' OR OCT_CHAR > '7' OR I = 3*%MAX_LEXEME#

   8789  2 001553   200076 236100                    LDQ     OCT_CHAR,,AUTO
         2 001554   777000 376003                    ANQ     -512,DU
         2 001555   060000 116003                    CMPQ    24576,DU
         2 001556   001663 602000 2                  TNC     BADFID
         2 001557   200076 236100                    LDQ     OCT_CHAR,,AUTO
         2 001560   777000 376003                    ANQ     -512,DU
         2 001561   067000 116003                    CMPQ    28160,DU
         2 001562   001564 600000 2                  TZE     s:8789+9
         2 001563   001663 603000 2                  TRC     BADFID
         2 001564   200046 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:116  
         2 001565   000170 116007                    CMPQ    120,DL
         2 001566   001663 600000 2                  TZE     BADFID

      848     8790    5                THEN
      849     8791    5                     GOTO BADFID;
      850     8792    5                LEXEME.OCTAL_STRING(I) = ASCBIN(OCT_CHAR);

   8792  2 001567   200076 236100                    LDQ     OCT_CHAR,,AUTO
         2 001570   000033 772000                    QRL     27
         2 001571   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001572   200046 236100                    LDQ     I,,AUTO
         2 001573   000003 402007                    MPY     3,DL
         2 001574   000000 116003                    CMPQ    0,DU
         2 001575   001577 605000 2                  TPL     s:8792+8
         2 001576   000044 036003                    ADLQ    36,DU
         2 001577   003106 061500                    CSR     bolr='003'O
         2 001600   200102 000044                    BDSC    @ERR_CODE+1,,AUTO        by=0,bit=0,n=36
         2 001601   200020 200003                    BDSC    LEXEME,Q,AUTO            by=1,bit=0,n=3

      851     8793    5                I = I + 1;

   8793  2 001602   200046 054100                    AOS     I,,AUTO

      852     8794    5                LEXEME.LEN = (I+2)/3;

   8794  2 001603   200046 236100                    LDQ     I,,AUTO
         2 001604   000002 036007                    ADLQ    2,DL
         2 001605   000003 506007                    DIV     3,DL
         2 001606   000033 736000                    QLS     27
         2 001607   200020 552140                    STBQ    LEXEME,'40'O,AUTO

      853     8795    5                END;

   8795  2 001610   001625 710000 2                  TRA     s:8803

      854     8796    4           ELSE
      855     8797    5             DO;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:117  

      856     8798    5   STUFF_IT:    IF LEXEME.LEN < %MAX_LEXEME#

   8798  2 001611   200020 236100       STUFF_IT     LDQ     LEXEME,,AUTO
         2 001612   777000 376003                    ANQ     -512,DU
         2 001613   050000 116003                    CMPQ    20480,DU
         2 001614   001622 603000 2                  TRC     s:8801

      857     8799    5                THEN
      858     8800    5                     SUBSTR(LEXEME.STRING, LEXEME.LEN, 1) = OCT_CHAR;

   8800  2 001615   200020 236100                    LDQ     LEXEME,,AUTO
         2 001616   000033 772000                    QRL     27
         2 001617   040106 100500                    MLR     fill='040'O
         2 001620   200076 000001                    ADSC9   OCT_CHAR,,AUTO           cn=0,n=1
         2 001621   200020 200001                    ADSC9   LEXEME,Q,AUTO            cn=1,n=1

      859     8801    5                LEXEME.LEN = LEXEME.LEN + 1;

   8801  2 001622   200020 236100                    LDQ     LEXEME,,AUTO
         2 001623   001000 036003                    ADLQ    512,DU
         2 001624   200020 552140                    STBQ    LEXEME,'40'O,AUTO

      860     8802    5                END;

      861     8803    4           END;

   8803  2 001625   001527 710000 2                  TRA     s:8778

      862     8804                                                /* QUOTED STRING IF ENOUGH ROOM       */
      863     8805    3      IF FOUND_INDEX<TEXTBOUND             /* IF POSSIBLY MORE                   */

   8805  2 001626   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001627   200047 116100                    CMPQ    TEXTBOUND,,AUTO
         2 001630   001672 605000 2                  TPL     s:8833

      864     8806    3      THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:118  
      865     8807    4      DO;

      866     8808    4           SAV_INDEX = FOUND_INDEX+1;

   8808  2 001631   000001 036007                    ADLQ    1,DL
         2 001632   200075 756100                    STQ     SAV_INDEX,,AUTO

      867     8809    4           CALL SEARCH(FOUND_INDEX,

   8809  2 001633   200050 236100                    LDQ     TEXTSIZE,,AUTO
         2 001634   200075 136100                    SBLQ    SAV_INDEX,,AUTO
         2 001635   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001636   200075 236100                    LDQ     SAV_INDEX,,AUTO
         2 001637   200102 720100                    LXL0    @ERR_CODE+1,,AUTO
         2 001640   000000 164546                    TCT
         2 001641   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0
         2 001642   000001 000000 1                  ARG     SEARCH_TBL
         2 001643   200036 000100                    ARG     FOUND_INDEX,,AUTO
         2 001644   200036 235100                    LDA     FOUND_INDEX,,AUTO
         2 001645   000033 771000                    ARL     27
         2 001646   200040 755100                    STA     CHAR_TYPE,,AUTO
         2 001647   200036 551140                    STBA    FOUND_INDEX,'40'O,AUTO
         2 001650   200036 056100                    ASQ     FOUND_INDEX,,AUTO

      868     8810    4             CHAR_TYPE,
      869     8811    4             SEARCH_TBL,
      870     8812    4             TEXTFID$# -> SEARCH$STR,
      871     8813    4             SAV_INDEX);
      872     8814    4           IF SAV_INDEX = FOUND_INDEX

   8814  2 001651   200036 116100                    CMPQ    FOUND_INDEX,,AUTO
         2 001652   001663 601000 2                  TNZ     BADFID

      873     8815    4           THEN
      874     8816    4                IF CHAR_TYPE = %QUOTE_CHAR#

   8816  2 001653   000003 115007                    CMPA    3,DL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:119  
         2 001654   001670 601000 2                  TNZ     s:8826

      875     8817    4                THEN
      876     8818    4                     IF FOUND_INDEX < TEXTBOUND

   8818  2 001655   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001656   200047 116100                    CMPQ    TEXTBOUND,,AUTO
         2 001657   001663 605000 2                  TPL     BADFID
         2 001660   200041 235100                    LDA     CURR_LEXEME_TYPE,,AUTO
         2 001661   000001 115007                    CMPA    1,DL
         2 001662   001611 600000 2                  TZE     STUFF_IT

      877     8819    4                       AND CURR_LEXEME_TYPE = %UMF$QUOTED_STRING#
      878     8820    4                     THEN
      879     8821    4                          GOTO STUFF_IT;   /* STUFF THE QUOTE                    */
      880     8822    4                     ELSE
      881     8823    4   BADFID:                CALL ERR_PROC(%E$BADFID);

   8823  2 001663   000001 236000 3     BADFID       LDQ     1
         2 001664   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001665   000551 701000 2                  TSX1    ERR_PROC
         2 001666   000000 011000                    NOP     0
         2 001667   001672 710000 2                  TRA     s:8833

      882     8824                                                /* UNBALANCED QUOTE                   */
      883     8825    4                ELSE
      884     8826    4                     RETURN;               /* NO MORE QUOTED STRING              */

   8826  2 001670   200074 221300                    LDX1  ! I+4,,AUTO
         2 001671   000001 702211                    TSX2  ! 1,X1

      885     8827    4           ELSE
      886     8828    4                GOTO BADFID;
      887     8829                                                /* QUOTED STRING MUST BE FOLLOWED*/
      888     8830                                                /* BY A DELIMITER...#,.,/,@,'         */
      889     8831                                                /* BLANK OR END-OF-STRING             */
      890     8832    4           END;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:120  
      891     8833    3      CHAR_TYPE = %NOT_FOUND#;

   8833  2 001672   200040 450100                    STZ     CHAR_TYPE,,AUTO

      892     8834                                                /* FOR THE BENEFIT OF                 */
      893     8835                                                /* GET_NEXT_LEXEME                    */
      894     8836    3      RETURN;

   8836  2 001673   200074 221300                    LDX1  ! I+4,,AUTO
         2 001674   000001 702211                    TSX2  ! 1,X1

      895     8837    3   END QUOTED_STRING;
      896     8838    2   END GET_NEXT_LEXEME;
      897     8839        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:121  
      898     8840        /**/
      899     8841        /* THIS PROCEDURE GETS CONTROL WHEN A SERIAL NUMBER LIST SHOULD FOLLOW. IF    */
      900     8842        /* PROCESSES THE SERIAL NUMBER LIST THEN PASSES CONTROL TO PROCEDURES THAT    */
      901     8843        /* EITHER LOOK FOR NAME.ACCT.PASS OR WSN DEPENDING ON DELIMITER OF SERIAL     */
      902     8844        /* NUMBER LIST.                                                               */
      903     8845        /**/
      904     8846    1   GET_SERIAL_AND_REST: PROC;

   8846  2 001675   200056 741300       GET_SERIAL_* STX1  ! RET_VAL+1,,AUTO

      905     8847        /**/
      906     8848    2   DCL SERIALS SBIN WORD;                  /* NUMBER OF SERIAL NUMBERS FOUND*/
      907     8849    2   DCL SERIALSB REDEF SERIALS CHAR(4);
      908     8850    2   DCL MAX_SERIALS SBIN WORD;
      909     8851        /**/
      910     8852    2      SERIALS = 0;

   8852  2 001676   200057 450100                    STZ     SERIALS,,AUTO

      911     8853    2      RESULTS_FID.TYPE.SN = CURR_LEXEME_TYPE;

   8853  2 001677   200041 236100                    LDQ     CURR_LEXEME_TYPE,,AUTO
         2 001700   000022 736000                    QLS     18
         2 001701   200005 552120                    STBQ    RESULTS_FID+1,'20'O,AUTO

      912     8854    2      RESULTS_FID.SINDEX.SN = FOUND_INDEX+1;

   8854  2 001702   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 001703   000001 036007                    ADLQ    1,DL
         2 001704   000011 736000                    QLS     9
         2 001705   200007 552110                    STBQ    RESULTS_FID+3,'10'O,AUTO

      913     8855    3      DO UNTIL (NCHAR ~= '#');

      914     8856    3           CALL GET_NEXT_LEXEME;

   8856  2 001706   001371 701000 2                  TSX1    GET_NEXT_LEXEME
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:122  
         2 001707   000000 011000                    NOP     0

      915     8857    3           IF LEXEME.LEN > 6

   8857  2 001710   200020 236100                    LDQ     LEXEME,,AUTO
         2 001711   777000 376003                    ANQ     -512,DU
         2 001712   007000 116003                    CMPQ    3584,DU
         2 001713   001721 602000 2                  TNC     s:8861

      916     8858    3           THEN                            /* SERIAL NUMBER TOO LONG             */
      917     8859    3             CALL ERR_PROC(%E$BADSER);

   8859  2 001714   000042 236000 3                  LDQ     34
         2 001715   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001716   000551 701000 2                  TSX1    ERR_PROC
         2 001717   000000 011000                    NOP     0
         2 001720   002022 710000 2                  TRA     s:8888

      918     8860    3           ELSE
      919     8861    3                IF LEXEME.LEN > 0

   8861  2 001721   200020 236100                    LDQ     LEXEME,,AUTO
         2 001722   777000 316003                    CANQ    -512,DU
         2 001723   002012 600000 2                  TZE     s:8883

      920     8862    3                THEN
      921     8863    4                DO;

      922     8864    4                     RESULTS_FID.SN = '1'B;

   8864  2 001724   040000 236003                    LDQ     16384,DU
         2 001725   200004 256100                    ORSQ    RESULTS_FID,,AUTO

      923     8865    4                     IF SERIALS = 0

   8865  2 001726   200057 235100                    LDA     SERIALS,,AUTO
         2 001727   001755 601000 2                  TNZ     s:8874
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:123  

      924     8866    4                     THEN
      925     8867    5                     DO;

      926     8868    6                          CALL HFF$NILERASE(%SN_PS#) WHENALTRETURN DO;

   8868  2 001730   000043 630400 3                  EPPR0   35
         2 001731   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001732   000000 701000 xent               TSX1    HFF$NILERASE
         2 001733   001735 702000 2                  TSX2    s:8869
         2 001734   001741 710000 2                  TRA     s:8871

      927     8869    6                               CALL ERR_PROC(%E$NOFIELD);

   8869  2 001735   000017 236000 3                  LDQ     15
         2 001736   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001737   000551 701000 2                  TSX1    ERR_PROC
         2 001740   000000 011000                    NOP     0

      928     8870    6                               END;

      929     8871    5                          CALL HFF$DSIZ(%SN_PS#, MAX_SERIALS);

   8871  2 001741   200060 630500                    EPPR0   MAX_SERIALS,,AUTO
         2 001742   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 001743   000043 236000 3                  LDQ     35
         2 001744   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 001745   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 001746   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001747   000000 701000 xent               TSX1    HFF$DSIZ
         2 001750   000000 011000                    NOP     0

      930     8872    5                          MAX_SERIALS = (MAX_SERIALS-4)/6;

   8872  2 001751   200060 236100                    LDQ     MAX_SERIALS,,AUTO
         2 001752   000004 136007                    SBLQ    4,DL
         2 001753   000006 506007                    DIV     6,DL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:124  
         2 001754   200060 756100                    STQ     MAX_SERIALS,,AUTO

      931     8873    5                          END;

      932     8874    4                     SERIALS = SERIALS+1;

   8874  2 001755   200057 054100                    AOS     SERIALS,,AUTO

      933     8875    4                     IF SERIALS > MAX_SERIALS

   8875  2 001756   200057 236100                    LDQ     SERIALS,,AUTO
         2 001757   200060 116100                    CMPQ    MAX_SERIALS,,AUTO
         2 001760   001765 604400 2                  TMOZ    s:8878

      934     8876    4                     THEN
      935     8877    4                          CALL ERR_PROC(%E$SERTOOSMALL);

   8877  2 001761   000045 236000 3                  LDQ     37
         2 001762   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 001763   000551 701000 2                  TSX1    ERR_PROC
         2 001764   000000 011000                    NOP     0

      936     8878    4                     SERIAL$# -> SERIAL$FIELD.NUM = SERIALSB;

   8878  2 001765   000000 470400 xsym               LDP0    B$PS5$
         2 001766   040100 100500                    MLR     fill='040'O
         2 001767   200057 000004                    ADSC9   SERIALS,,AUTO            cn=0,n=4
         2 001770   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

      937     8879    4                     SERIAL$# -> SERIAL$FIELD.SERIAL(SERIALS-1) = ADDR(LEXEME) ->
              8879                              TEXT$C.STRING;

   8879  2 001771   200020 236100                    LDQ     LEXEME,,AUTO
         2 001772   000033 772000                    QRL     27
         2 001773   000000 620006                    EAX0    0,QL
         2 001774   200057 236100                    LDQ     SERIALS,,AUTO
         2 001775   000006 402007                    MPY     6,DL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:125  
         2 001776   000000 470400 xsym               LDP0    B$PS5$
         2 001777   040106 100540                    MLR     fill='040'O
         2 002000   200020 200010                    ADSC9   LEXEME,,AUTO             cn=1,n=*X0
         2 002001   077777 400006                    ADSC9   -1,Q,PR0                 cn=2,n=6

      938     8880    4                     RESULTS_FID.CLENGTH.SN = FOUND_INDEX - RESULTS_FID.SINDEX.SN;

   8880  2 002002   200007 236100                    LDQ     RESULTS_FID+3,,AUTO
         2 002003   000011 772000                    QRL     9
         2 002004   000777 376007                    ANQ     511,DL
         2 002005   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 002006   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 002007   200102 136100                    SBLQ    @ERR_CODE+1,,AUTO
         2 002010   200011 552104                    STBQ    RESULTS_FID+5,'04'O,AUTO

      939     8881    4                     END;

   8881  2 002011   002022 710000 2                  TRA     s:8888

      940     8882    3                ELSE
      941     8883    3                     IF NCHAR ~= ' '

   8883  2 002012   200035 236100                    LDQ     NCHAR,,AUTO
         2 002013   777000 376003                    ANQ     -512,DU
         2 002014   040000 116003                    CMPQ    16384,DU
         2 002015   002022 600000 2                  TZE     s:8888

      942     8884    3                     THEN
      943     8885    3                          CALL ERR_PROC(%E$BADFID);

   8885  2 002016   000001 236000 3                  LDQ     1
         2 002017   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 002020   000551 701000 2                  TSX1    ERR_PROC
         2 002021   000000 011000                    NOP     0

      944     8886                                                /* TWO CONSECUTIVE DELIMITERS---      */
      945     8887                                                /* # FOLLOWED BY ANOTHER DELIM.       */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:126  
      946     8888    3           END;  /* do until */

   8888  2 002022   200035 236100                    LDQ     NCHAR,,AUTO
         2 002023   777000 376003                    ANQ     -512,DU
         2 002024   043000 116003                    CMPQ    17920,DU
         2 002025   001706 600000 2                  TZE     s:8856

      947     8889    3      DO SELECT (NCHAR);

   8889  2 002026   200035 236100                    LDQ     NCHAR,,AUTO
         2 002027   777000 376003                    ANQ     -512,DU
         2 002030   056000 116003                    CMPQ    23552,DU
         2 002031   002053 602000 2                  TNC     s:8889+21
         2 002032   200035 236100                    LDQ     NCHAR,,AUTO
         2 002033   777000 376003                    ANQ     -512,DU
         2 002034   056000 116003                    CMPQ    23552,DU
         2 002035   002064 600000 2                  TZE     s:8894
         2 002036   200035 236100                    LDQ     NCHAR,,AUTO
         2 002037   777000 376003                    ANQ     -512,DU
         2 002040   057000 116003                    CMPQ    24064,DU
         2 002041   002074 602000 2                  TNC     s:8899
         2 002042   200035 236100                    LDQ     NCHAR,,AUTO
         2 002043   777000 376003                    ANQ     -512,DU
         2 002044   057000 116003                    CMPQ    24064,DU
         2 002045   002061 600000 2                  TZE     s:8892
         2 002046   200035 236100                    LDQ     NCHAR,,AUTO
         2 002047   777000 376003                    ANQ     -512,DU
         2 002050   100000 116003                    CMPQ    32768,DU
         2 002051   002074 601000 2                  TNZ     s:8899
         2 002052   002071 710000 2                  TRA     s:8897
         2 002053   200035 236100                    LDQ     NCHAR,,AUTO
         2 002054   777000 376003                    ANQ     -512,DU
         2 002055   040000 116003                    CMPQ    16384,DU
         2 002056   002074 601000 2                  TNZ     s:8899
         2 002057   002060 710000 2                  TRA     s:8890

      948     8890    3        SELECT( ' ' );                     /* do nothing                         */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:127  

   8890  2 002060   002100 710000 2                  TRA     s:8901

      949     8891    3        SELECT( '/' );

      950     8892    3           CALL GET_NAME_AND_REST;         /* FILE NAME SHOULD FOLLOW            */

   8892  2 002061   000720 701000 2                  TSX1    GET_NAME_AND_REST
         2 002062   000000 011000                    NOP     0
         2 002063   002100 710000 2                  TRA     s:8901

      951     8893    3        SELECT( '.' );

      952     8894    3           LEXEME.LEN = 0;

   8894  2 002064   000000 236003                    LDQ     0,DU
         2 002065   200020 552140                    STBQ    LEXEME,'40'O,AUTO

      953     8895    3           CALL NAME_AND_REST;

   8895  2 002066   000724 701000 2                  TSX1    NAME_AND_REST
         2 002067   000000 011000                    NOP     0
         2 002070   002100 710000 2                  TRA     s:8901

      954     8896    3        SELECT( '@' );

      955     8897    3           CALL GET_CHECK_STUFF_WSN;

   8897  2 002071   000566 701000 2                  TSX1    GET_CHECK_STUFF_WSN
         2 002072   000000 011000                    NOP     0
         2 002073   002100 710000 2                  TRA     s:8901

      956     8898    3        SELECT( ELSE );                    /* ILLEGAL DELIMITER HERE             */

      957     8899    3           CALL ERR_PROC(%E$BADFID);

   8899  2 002074   000001 236000 3                  LDQ     1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:128  
         2 002075   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 002076   000551 701000 2                  TSX1    ERR_PROC
         2 002077   000000 011000                    NOP     0

      958     8900    3        END;  /* do select */

      959     8901    2      RETURN;

   8901  2 002100   200056 221300                    LDX1  ! RET_VAL+1,,AUTO
         2 002101   000001 702211                    TSX2  ! 1,X1

      960     8902    2   END GET_SERIAL_AND_REST;
      961     8903        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:129  
      962     8904    1   INITIALIZE: PROC;

   8904  2 002102   200054 741300       INITIALIZE   STX1  ! ERROR+2,,AUTO

      963     8905        /**/
      964     8906    2      RESULTS_FID = '0'B;                  /* BLANK OUT RESULTS FLAGS            */

   8906  2 002103   000100 100400                    MLR     fill='000'O
         2 002104   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 002105   200004 000044                    ADSC9   RESULTS_FID,,AUTO        cn=0,n=36

      965     8907    2      CALL HFF$DSIZ (%V_PS#,FIELD_SIZE);

   8907  2 002106   200044 630500                    EPPR0   FIELD_SIZE,,AUTO
         2 002107   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 002110   000046 236000 3                  LDQ     38
         2 002111   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 002112   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 002113   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002114   000000 701000 xent               TSX1    HFF$DSIZ
         2 002115   000000 011000                    NOP     0

      966     8908    2      IF FIELD_SIZE < SIZEC(FPT$FID_V)

   8908  2 002116   200044 235100                    LDA     FIELD_SIZE,,AUTO
         2 002117   000020 115007                    CMPA    16,DL
         2 002120   002134 605000 2                  TPL     s:8919

      967     8909    2       THEN                                /* OLD-FASHIONED FPT!!!               */
      968     8910    3         DO;

      969     8911    3           CHECK.OLDFPT = '1'B;

   8911  2 002121   020000 236003                    LDQ     8192,DU
         2 002122   200045 256100                    ORSQ    CHECK,,AUTO

      970     8912    3          CHECK.PAOSF = '0'B;                  /* Prohibit Acct on Star-File        */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:130  

   8912  2 002123   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 002124   200045 356100                    ANSQ    CHECK,,AUTO

      971     8913    3          CHECK.PPOSF = '0'B;                  /* Prohibit Psn on Star-File         */

   8913  2 002125   000047 236000 3                  LDQ     39
         2 002126   200045 356100                    ANSQ    CHECK,,AUTO

      972     8914    3          CHECK.PWODF = '1'B;                  /* Prohibit Wsn on Disk-File         */

   8914  2 002127   100000 236003                    LDQ     32768,DU
         2 002130   200045 256100                    ORSQ    CHECK,,AUTO

      973     8915    3          CHECK.CCHARS = '0'B;                 /* Check for illegal charaters       */

   8915  2 002131   000050 236000 3                  LDQ     40
         2 002132   200045 356100                    ANSQ    CHECK,,AUTO

      974     8916    3           END;

   8916  2 002133   002166 710000 2                  TRA     s:8925

      975     8917    2       ELSE                                /* FINE NEW FPT                       */
      976     8918    3         DO;

      977     8919    3           CHECK.PAOSF = FPT$FID_V$# -> FPT$FID_V.CHECK.PAOSF;

   8919  2 002134   000000 470400 xsym               LDP0    B$PS0$
         2 002135   000000 236100                    LDQ     0,,PR0
         2 002136   000024 736000                    QLS     20
         2 002137   200045 676100                    ERQ     CHECK,,AUTO
         2 002140   400000 376003                    ANQ     -131072,DU
         2 002141   200045 656100                    ERSQ    CHECK,,AUTO

      978     8920    3           CHECK.PPOSF = FPT$FID_V$# -> FPT$FID_V.CHECK.PPOSF;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:131  
   8920  2 002142   000000 236100                    LDQ     0,,PR0
         2 002143   000024 736000                    QLS     20
         2 002144   200045 676100                    ERQ     CHECK,,AUTO
         2 002145   200000 376003                    ANQ     65536,DU
         2 002146   200045 656100                    ERSQ    CHECK,,AUTO

      979     8921    3           CHECK.PWODF = ~( FPT$FID_V$# -> FPT$FID_V.CHECK.AWODF );

   8921  2 002147   000000 236100                    LDQ     0,,PR0
         2 002150   000026 736000                    QLS     22
         2 002151   400000 376003                    ANQ     -131072,DU
         2 002152   400000 676003                    ERQ     -131072,DU
         2 002153   000002 772000                    QRL     2
         2 002154   200045 676100                    ERQ     CHECK,,AUTO
         2 002155   100000 376003                    ANQ     32768,DU
         2 002156   200045 656100                    ERSQ    CHECK,,AUTO

      980     8922    3           CHECK.CCHARS = FPT$FID_V$# -> FPT$FID_V.CHECK.CCHARS;

   8922  2 002157   000000 236100                    LDQ     0,,PR0
         2 002160   000017 736000                    QLS     15
         2 002161   200045 676100                    ERQ     CHECK,,AUTO
         2 002162   040000 376003                    ANQ     16384,DU
         2 002163   200045 656100                    ERSQ    CHECK,,AUTO

      981     8923    3           CHECK.OLDFPT = '0'B;

   8923  2 002164   000051 236000 3                  LDQ     41
         2 002165   200045 356100                    ANSQ    CHECK,,AUTO

      982     8924    3           END;

      983     8925    2      CALL HFF$DSIZ (%TEXTFID_PS#,TEXTSIZE);

   8925  2 002166   200050 630500                    EPPR0   TEXTSIZE,,AUTO
         2 002167   200103 450500                    STP0    @ERR_CODE+2,,AUTO
         2 002170   000005 236000 3                  LDQ     5
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:132  
         2 002171   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 002172   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 002173   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002174   000000 701000 xent               TSX1    HFF$DSIZ
         2 002175   000000 011000                    NOP     0

      984     8926    2      TEXTBOUND=TEXTSIZE;

   8926  2 002176   200050 235100                    LDA     TEXTSIZE,,AUTO
         2 002177   200047 755100                    STA     TEXTBOUND,,AUTO

      985     8927    2      IF TEXTSIZE ~= 0 THEN TEXTBOUND=TEXTSIZE-1;

   8927  2 002200   002203 600000 2                  TZE     s:8929

   8927  2 002201   000001 135007                    SBLA    1,DL
         2 002202   200047 755100                    STA     TEXTBOUND,,AUTO

      986     8928        /**/
      987     8929    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SNAME

   8929  2 002203   000000 470400 xsym               LDP0    B$PS0$
         2 002204   000000 234100                    SZN     0,,PR0
         2 002205   002216 605000 2                  TPL     NAME_TESTDONE

      988     8930    2      THEN
      989     8931    3      DO;

      990     8932    3           CALL HFF$NILERASE(%NAME_PS#) ALTRET(NAME_TESTDONE);

   8932  2 002206   000024 630400 3                  EPPR0   20
         2 002207   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002210   000000 701000 xent               TSX1    HFF$NILERASE
         2 002211   002216 702000 2                  TSX2    NAME_TESTDONE

      991     8933    3           NAME$# -> NAME$FIELD.LEN = 0;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:133  
   8933  2 002212   000000 470400 xsym               LDP0    B$PS2$
         2 002213   000100 101400                    MRL     fill='000'O
         2 002214   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         2 002215   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

      992     8934    3           END;

   8929  2 002216                       NAME_TESTDO* null
      993     8935    2   NAME_TESTDONE: ;
      994     8936        /**/
      995     8937    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SACCT

   8937  2 002216   000000 470400 xsym               LDP0    B$PS0$
         2 002217   000000 236100                    LDQ     0,,PR0
         2 002220   200000 316003                    CANQ    65536,DU
         2 002221   002241 600000 2                  TZE     ACCT_TESTDONE

      996     8938    2      THEN
      997     8939    3      DO;

      998     8940    3           CALL HFF$DSIZ (%ACCT_PS#,FIELD_SIZE);

   8940  2 002222   200044 631500                    EPPR1   FIELD_SIZE,,AUTO
         2 002223   200103 451500                    STP1    @ERR_CODE+2,,AUTO
         2 002224   000030 236000 3                  LDQ     24
         2 002225   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 002226   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 002227   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002230   000000 701000 xent               TSX1    HFF$DSIZ
         2 002231   000000 011000                    NOP     0

      999     8941    3           IF FIELD_SIZE = 0

   8941  2 002232   200044 235100                    LDA     FIELD_SIZE,,AUTO
         2 002233   002241 600000 2                  TZE     ACCT_TESTDONE

     1000     8942    3            THEN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:134  
     1001     8943    3              GOTO ACCT_TESTDONE;
     1002     8944    3           ACCT$# -> ACCT$FIELD = ' ';

   8944  2 002234   000000 470400 xsym               LDP0    B$PS3$
         2 002235   000000 620005                    EAX0    0,AL
         2 002236   040140 100400                    MLR     fill='040'O
         2 002237   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002240   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     1003     8945    3           END;

   8937  2 002241                       ACCT_TESTDO* null
     1004     8946    2   ACCT_TESTDONE: ;
     1005     8947        /**/
     1006     8948    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SPASS

   8948  2 002241   000000 470400 xsym               LDP0    B$PS0$
         2 002242   000000 236100                    LDQ     0,,PR0
         2 002243   100000 316003                    CANQ    32768,DU
         2 002244   002264 600000 2                  TZE     PASS_TESTDONE

     1007     8949    2      THEN
     1008     8950    3      DO;

     1009     8951    3           CALL HFF$DSIZ (%PASS_PS#,FIELD_SIZE);

   8951  2 002245   200044 631500                    EPPR1   FIELD_SIZE,,AUTO
         2 002246   200103 451500                    STP1    @ERR_CODE+2,,AUTO
         2 002247   000034 236000 3                  LDQ     28
         2 002250   200102 756100                    STQ     @ERR_CODE+1,,AUTO
         2 002251   200102 630500                    EPPR0   @ERR_CODE+1,,AUTO
         2 002252   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002253   000000 701000 xent               TSX1    HFF$DSIZ
         2 002254   000000 011000                    NOP     0

     1010     8952    3           IF FIELD_SIZE = 0

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:135  
   8952  2 002255   200044 235100                    LDA     FIELD_SIZE,,AUTO
         2 002256   002264 600000 2                  TZE     PASS_TESTDONE

     1011     8953    3            THEN
     1012     8954    3              GOTO PASS_TESTDONE;
     1013     8955    3           PASS$# -> PASS$FIELD = ' ';

   8955  2 002257   000000 470400 xsym               LDP0    B$PS4$
         2 002260   000000 620005                    EAX0    0,AL
         2 002261   040140 100400                    MLR     fill='040'O
         2 002262   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002263   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     1014     8956    3           END;

   8948  2 002264                       PASS_TESTDO* null
     1015     8957    2   PASS_TESTDONE: ;
     1016     8958        /**/
     1017     8959    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SRES

   8959  2 002264   000000 470400 xsym               LDP0    B$PS0$
         2 002265   000000 236100                    LDQ     0,,PR0
         2 002266   010000 316003                    CANQ    4096,DU
         2 002267   002300 600000 2                  TZE     RES_TESTDONE

     1018     8960    2      THEN
     1019     8961    3      DO;

     1020     8962    3           CALL HFF$NILERASE(%RES_PS#) ALTRET(RES_TESTDONE);

   8962  2 002270   000013 630400 3                  EPPR0   11
         2 002271   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002272   000000 701000 xent               TSX1    HFF$NILERASE
         2 002273   002300 702000 2                  TSX2    RES_TESTDONE

     1021     8963    3           RESOURCE$# -> RESOURCE$FIELD = BINASC(0);

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:136  
   8963  2 002274   000000 470400 xsym               LDP0    B$PS8$
         2 002275   040100 100400                    MLR     fill='040'O
         2 002276   000037 000001 3                  ADSC9   31                       cn=0,n=1
         2 002277   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1022     8964    3           END;

   8959  2 002300                       RES_TESTDONE null
     1023     8965    2   RES_TESTDONE: ;
     1024     8966        /**/
     1025     8967    2      IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SSN

   8967  2 002300   000000 470400 xsym               LDP0    B$PS0$
         2 002301   000000 236100                    LDQ     0,,PR0
         2 002302   040000 316003                    CANQ    16384,DU
         2 002303   002320 600000 2                  TZE     SN_TESTDONE

     1026     8968    2      THEN
     1027     8969    3      DO;

     1028     8970    3           CALL HFF$NILERASE(%SN_PS#) ALTRET(SN_TESTDONE);

   8970  2 002304   000043 630400 3                  EPPR0   35
         2 002305   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002306   000000 701000 xent               TSX1    HFF$NILERASE
         2 002307   002320 702000 2                  TSX2    SN_TESTDONE

     1029     8971    3           SERIAL$# -> SERIAL$FIELD.NUM = CHAR_ONE;

   8971  2 002310   000000 470400 xsym               LDP0    B$PS5$
         2 002311   040100 100400                    MLR     fill='040'O
         2 002312   000000 000004 1                  ADSC9   CHAR_ONEB                cn=0,n=4
         2 002313   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1030     8972    3           SERIAL$# -> SERIAL$FIELD.SERIAL(0) = ' ';

   8972  2 002314   000000 470400 xsym               LDP0    B$PS5$
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:137  
         2 002315   040100 100400                    MLR     fill='040'O
         2 002316   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002317   000001 000006                    ADSC9   1,,PR0                   cn=0,n=6

     1031     8973    3           END;

   8967  2 002320                       SN_TESTDONE  null
     1032     8974    2   SN_TESTDONE: ;
     1033     8975        /**/
     1034     8976    2     IF FPT$FID_V$# -> FPT$FID_V.SCRUB.SWSN

   8976  2 002320   000000 470400 xsym               LDP0    B$PS0$
         2 002321   000000 236100                    LDQ     0,,PR0
         2 002322   020000 316003                    CANQ    8192,DU
         2 002323   002334 600000 2                  TZE     WSN_TESTDONE

     1035     8977    2      THEN
     1036     8978    3      DO;

     1037     8979    3           CALL HFF$NILERASE(%WSN_PS#) ALTRET(WSN_TESTDONE);

   8979  2 002324   000020 630400 3                  EPPR0   16
         2 002325   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002326   000000 701000 xent               TSX1    HFF$NILERASE
         2 002327   002334 702000 2                  TSX2    WSN_TESTDONE

     1038     8980    3           WSN$# -> WSN$FIELD = ' ';

   8980  2 002330   000000 470400 xsym               LDP0    B$PS6$
         2 002331   040100 100400                    MLR     fill='040'O
         2 002332   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002333   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

     1039     8981    3           END;

   8976  2 002334                       WSN_TESTDONE null
     1040     8982    2   WSN_TESTDONE: ;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:138  
     1041     8983        /**/
     1042     8984    2     CALL HFF$NILERASE(%TEXTFID_PS#) ALTRET(NO_FID_ALT);

   8984  2 002334   000005 630400 3                  EPPR0   5
         2 002335   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002336   000000 701000 xent               TSX1    HFF$NILERASE
         2 002337   002411 702000 2                  TSX2    NO_FID_ALT

     1043     8985    2      FOUND_INDEX = 0;

   8985  2 002340   200036 450100                    STZ     FOUND_INDEX,,AUTO

     1044     8986    3      DO WHILE(SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1)=' ' AND

   8986  2 002341   002343 710000 2                  TRA     s:8989

     1045     8987    3             FOUND_INDEX < TEXTBOUND);
     1046     8988    3           FOUND_INDEX = FOUND_INDEX + 1;

   8988  2 002342   200036 054100                    AOS     FOUND_INDEX,,AUTO

     1047     8989    3           END;

   8989  2 002343   000000 470400 xsym               LDP0    B$PS1$
         2 002344   200036 235100                    LDA     FOUND_INDEX,,AUTO
         2 002345   040000 106505                    CMPC    fill='040'O
         2 002346   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 002347   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002350   002354 601000 2                  TNZ     s:8990
         2 002351   200036 236100                    LDQ     FOUND_INDEX,,AUTO
         2 002352   200047 116100                    CMPQ    TEXTBOUND,,AUTO
         2 002353   002342 604000 2                  TMI     s:8988

     1048     8990    2      NCHAR = SUBSTR(TEXTFID$# -> SEARCH$STR,FOUND_INDEX,1);

   8990  2 002354   040100 100505                    MLR     fill='040'O
         2 002355   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:139  
         2 002356   200035 000001                    ADSC9   NCHAR,,AUTO              cn=0,n=1

     1049     8991    2      IF NCHAR = ' '

   8991  2 002357   200035 236100                    LDQ     NCHAR,,AUTO
         2 002360   777000 376003                    ANQ     -512,DU
         2 002361   040000 116003                    CMPQ    16384,DU
         2 002362   002367 601000 2                  TNZ     s:8994

     1050     8992    2      THEN
     1051     8993    2           CALL ERR_PROC(%E$NOFID);

   8993  2 002363   000053 236000 3                  LDQ     43
         2 002364   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 002365   000551 701000 2                  TSX1    ERR_PROC
         2 002366   000000 011000                    NOP     0

     1052     8994    2      IF NCHAR~='/' AND NCHAR~='@' AND NCHAR~='#'

   8994  2 002367   200035 236100                    LDQ     NCHAR,,AUTO
         2 002370   777000 376003                    ANQ     -512,DU
         2 002371   057000 116003                    CMPQ    24064,DU
         2 002372   002407 600000 2                  TZE     s:9000
         2 002373   200035 236100                    LDQ     NCHAR,,AUTO
         2 002374   777000 376003                    ANQ     -512,DU
         2 002375   100000 116003                    CMPQ    32768,DU
         2 002376   002407 600000 2                  TZE     s:9000
         2 002377   200035 236100                    LDQ     NCHAR,,AUTO
         2 002400   777000 376003                    ANQ     -512,DU
         2 002401   043000 116003                    CMPQ    17920,DU
         2 002402   002407 600000 2                  TZE     s:9000

     1053     8995    2      THEN
     1054     8996    3      DO;

     1055     8997    3           NCHAR = ' ';

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:140  
   8997  2 002403   040000 236003                    LDQ     16384,DU
         2 002404   200035 756100                    STQ     NCHAR,,AUTO

     1056     8998    3           FOUND_INDEX = FOUND_INDEX-1;

   8998  2 002405   000001 336007                    LCQ     1,DL
         2 002406   200036 056100                    ASQ     FOUND_INDEX,,AUTO

     1057     8999    3           END;

     1058     9000    2      RETURN;

   9000  2 002407   200054 221300                    LDX1  ! ERROR+2,,AUTO
         2 002410   000001 702211                    TSX2  ! 1,X1

     1059     9001    2   NO_FID_ALT: CALL ERR_PROC(%E$NOFID);

   9001  2 002411   000053 236000 3     NO_FID_ALT   LDQ     43
         2 002412   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 002413   000551 701000 2                  TSX1    ERR_PROC
         2 002414   000000 011000                    NOP     0

     1060     9002    2   END INITIALIZE;

   9002  2 002415   200054 221300                    LDX1  ! ERROR+2,,AUTO
         2 002416   000001 702211                    TSX2  ! 1,X1

     1061     9003        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:141  
     1062     9004    1   NORMAL_START: PROC;

   9004  2 002417   200054 741300       NORMAL_START STX1  ! ERROR+2,,AUTO

     1063     9005        /**/
     1064     9006    2   DCL RET_VAL SBIN WORD;
     1065     9007        /**/
     1066     9008    3      DO SELECT(NCHAR);

   9008  2 002420   200035 236100                    LDQ     NCHAR,,AUTO
         2 002421   777000 376003                    ANQ     -512,DU
         2 002422   056000 116003                    CMPQ    23552,DU
         2 002423   002445 602000 2                  TNC     s:9008+21
         2 002424   200035 236100                    LDQ     NCHAR,,AUTO
         2 002425   777000 376003                    ANQ     -512,DU
         2 002426   056000 116003                    CMPQ    23552,DU
         2 002427   002452 600000 2                  TZE     s:9010
         2 002430   200035 236100                    LDQ     NCHAR,,AUTO
         2 002431   777000 376003                    ANQ     -512,DU
         2 002432   057000 116003                    CMPQ    24064,DU
         2 002433   002575 602000 2                  TNC     BAD_COMBO
         2 002434   200035 236100                    LDQ     NCHAR,,AUTO
         2 002435   777000 376003                    ANQ     -512,DU
         2 002436   057000 116003                    CMPQ    24064,DU
         2 002437   002455 600000 2                  TZE     s:9012
         2 002440   200035 236100                    LDQ     NCHAR,,AUTO
         2 002441   777000 376003                    ANQ     -512,DU
         2 002442   100000 116003                    CMPQ    32768,DU
         2 002443   002575 601000 2                  TNZ     BAD_COMBO
         2 002444   002540 710000 2                  TRA     s:9046
         2 002445   200035 236100                    LDQ     NCHAR,,AUTO
         2 002446   777000 376003                    ANQ     -512,DU
         2 002447   043000 116003                    CMPQ    17920,DU
         2 002450   002575 601000 2                  TNZ     BAD_COMBO
         2 002451   002477 710000 2                  TRA     s:9024

     1067     9009    3         SELECT('.');
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:142  

     1068     9010    3           CALL NAME_AND_REST;

   9010  2 002452   000724 701000 2                  TSX1    NAME_AND_REST
         2 002453   000000 011000                    NOP     0
         2 002454   002601 710000 2                  TRA     s:9061

     1069     9011    3         SELECT('/');

     1070     9012    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);

   9012  2 002455   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002456   200057 450500                    STP0    SERIALS,,AUTO
         2 002457   000422 701000 2                  TSX1    CHECK_STUFF_RESOURCE
         2 002460   000000 011000                    NOP     0

     1071     9013    3           IF RET_VAL = %TRUE#

   9013  2 002461   200055 235100                    LDA     RET_VAL,,AUTO
         2 002462   000001 115007                    CMPA    1,DL
         2 002463   002575 601000 2                  TNZ     BAD_COMBO

     1072     9014    3           THEN
     1073     9015    4                DO;

     1074     9016    4                  IF ASN = %FILE# AND LEXEME.LEN = 4

   9016  2 002464   200042 236100                    LDQ     ASN,,AUTO
         2 002465   777000 376003                    ANQ     -512,DU
         2 002466   001000 116003                    CMPQ    512,DU
         2 002467   002474 601000 2                  TNZ     s:9019
         2 002470   200020 236100                    LDQ     LEXEME,,AUTO
         2 002471   777000 376003                    ANQ     -512,DU
         2 002472   004000 116003                    CMPQ    2048,DU
         2 002473   002575 600000 2                  TZE     BAD_COMBO

     1075     9017    4                   THEN               /* DPnn/ is illegal                   */
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:143  
     1076     9018    4                     GOTO BAD_COMBO;
     1077     9019    4                  CALL GET_NAME_AND_REST;

   9019  2 002474   000720 701000 2                  TSX1    GET_NAME_AND_REST
         2 002475   000000 011000                    NOP     0

     1078     9020    4                  END;

   9020  2 002476   002601 710000 2                  TRA     s:9061

     1079     9021    3           ELSE
     1080     9022    3                GOTO BAD_COMBO;
     1081     9023    3         SELECT('#');

     1082     9024    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);

   9024  2 002477   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002500   200057 450500                    STP0    SERIALS,,AUTO
         2 002501   000422 701000 2                  TSX1    CHECK_STUFF_RESOURCE
         2 002502   000000 011000                    NOP     0

     1083     9025    3           IF RET_VAL = %TRUE#

   9025  2 002503   200055 235100                    LDA     RET_VAL,,AUTO
         2 002504   000001 115007                    CMPA    1,DL
         2 002505   002511 601000 2                  TNZ     s:9030

     1084     9026    3           THEN
     1085     9027    3                CALL GET_SERIAL_AND_REST;

   9027  2 002506   001675 701000 2                  TSX1    GET_SERIAL_AND_REST
         2 002507   000000 011000                    NOP     0
         2 002510   002601 710000 2                  TRA     s:9061

     1086     9028    3           ELSE
     1087     9029    4           DO;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:144  
     1088     9030    4                CALL CHECK_STUFF_OPLABEL(RET_VAL);

   9030  2 002511   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002512   200057 450500                    STP0    SERIALS,,AUTO
         2 002513   000274 701000 2                  TSX1    CHECK_STUFF_OPLABEL
         2 002514   000000 011000                    NOP     0

     1089     9031    4                IF RET_VAL = %FALSE#

   9031  2 002515   200055 235100                    LDA     RET_VAL,,AUTO
         2 002516   002523 601000 2                  TNZ     s:9034

     1090     9032    4                THEN
     1091     9033    4                     CALL CHECK_STUFF_DEVICE_ID(RET_VAL);

   9033  2 002517   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002520   200057 450500                    STP0    SERIALS,,AUTO
         2 002521   000152 701000 2                  TSX1    CHECK_STUFF_DEVICE_ID
         2 002522   000000 011000                    NOP     0

     1092     9034    4                IF RET_VAL = %TRUE#

   9034  2 002523   200055 235100                    LDA     RET_VAL,,AUTO
         2 002524   000001 115007                    CMPA    1,DL
         2 002525   002575 601000 2                  TNZ     BAD_COMBO

     1093     9035    4                THEN
     1094     9036    5                DO;

     1095     9037    5                     CALL GET_NEXT_LEXEME;

   9037  2 002526   001371 701000 2                  TSX1    GET_NEXT_LEXEME
         2 002527   000000 011000                    NOP     0

     1096     9038    5                     IF NOT (LEXEME.LEN=0 AND NCHAR=' ')

   9038  2 002530   200020 236100                    LDQ     LEXEME,,AUTO
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:145  
         2 002531   777000 316003                    CANQ    -512,DU
         2 002532   002575 601000 2                  TNZ     BAD_COMBO
         2 002533   200035 236100                    LDQ     NCHAR,,AUTO
         2 002534   777000 376003                    ANQ     -512,DU
         2 002535   040000 116003                    CMPQ    16384,DU
         2 002536   002575 601000 2                  TNZ     BAD_COMBO

     1097     9039    5                     THEN
     1098     9040    5                          GOTO BAD_COMBO;
     1099     9041    5                     END;

   9041  2 002537   002601 710000 2                  TRA     s:9061

     1100     9042    4                ELSE
     1101     9043    4                     GOTO BAD_COMBO;
     1102     9044    4                END;
     1103     9045    3         SELECT('@');

     1104     9046    3           CALL CHECK_STUFF_OPLABEL(RET_VAL);

   9046  2 002540   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002541   200057 450500                    STP0    SERIALS,,AUTO
         2 002542   000274 701000 2                  TSX1    CHECK_STUFF_OPLABEL
         2 002543   000000 011000                    NOP     0

     1105     9047    3           IF RET_VAL = %FALSE# THEN

   9047  2 002544   200055 235100                    LDA     RET_VAL,,AUTO
         2 002545   002552 601000 2                  TNZ     s:9049

     1106     9048    3                CALL CHECK_STUFF_RESOURCE(RET_VAL);

   9048  2 002546   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002547   200057 450500                    STP0    SERIALS,,AUTO
         2 002550   000422 701000 2                  TSX1    CHECK_STUFF_RESOURCE
         2 002551   000000 011000                    NOP     0

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:146  
     1107     9049    3           IF RET_VAL = %FALSE# THEN

   9049  2 002552   200055 235100                    LDA     RET_VAL,,AUTO
         2 002553   002560 601000 2                  TNZ     s:9051

     1108     9050    3                CALL CHECK_STUFF_DEVICE_ID(RET_VAL);

   9050  2 002554   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002555   200057 450500                    STP0    SERIALS,,AUTO
         2 002556   000152 701000 2                  TSX1    CHECK_STUFF_DEVICE_ID
         2 002557   000000 011000                    NOP     0

     1109     9051    3           IF RET_VAL = %FALSE# THEN       /* NO LUCK - MUST BE A FILENAME       */

   9051  2 002560   200055 235100                    LDA     RET_VAL,,AUTO
         2 002561   002565 601000 2                  TNZ     s:9053

     1110     9052    3                CALL NAME_AND_REST;

   9052  2 002562   000724 701000 2                  TSX1    NAME_AND_REST
         2 002563   000000 011000                    NOP     0
         2 002564   002601 710000 2                  TRA     s:9061

     1111     9053    3           ELSE IF RESOURCE$# -> RESOURCE$FIELD_.NN ~= '  ' /* dvnn@ is illegal     */

   9053  2 002565   000000 470400 xsym               LDP0    B$PS8$
         2 002566   040000 106500                    CMPC    fill='040'O
         2 002567   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 002570   000233 000002 1                  ADSC9   RESOURCE_TABLE+13        cn=0,n=2
         2 002571   002575 601000 2                  TNZ     BAD_COMBO

     1112     9054    3           THEN
     1113     9055    3                GOTO BAD_COMBO;
     1114     9056    3           ELSE                            /* OK!                                */
     1115     9057    3                CALL GET_CHECK_STUFF_WSN;

   9057  2 002572   000566 701000 2                  TSX1    GET_CHECK_STUFF_WSN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:147  
         2 002573   000000 011000                    NOP     0
         2 002574   002601 710000 2                  TRA     s:9061

     1116     9058    3         SELECT(ELSE);                     /* SHOULD NEVER GET HERE              */

     1117     9059    3   BAD_COMBO:   CALL ERR_PROC(%E$BADFID);

   9059  2 002575   000001 236000 3     BAD_COMBO    LDQ     1
         2 002576   200101 756100                    STQ     @ERR_CODE,,AUTO
         2 002577   000551 701000 2                  TSX1    ERR_PROC
         2 002600   000000 011000                    NOP     0

     1118     9060    3         END;                              /* END SELECT                         */

     1119     9061    2      RETURN;

   9061  2 002601   200054 221300                    LDX1  ! ERROR+2,,AUTO
         2 002602   000001 702211                    TSX2  ! 1,X1

     1120     9062    2   END NORMAL_START;
     1121     9063        %EJECT;
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:148  
     1122     9064    1   SINGLE_LEXEME: PROC;

   9064  2 002603   200054 741300       SINGLE_LEXE* STX1  ! ERROR+2,,AUTO

     1123     9065        /**/
     1124     9066    2   DCL RET_VAL SBIN WORD;
     1125     9067        /**/
     1126     9068    2      CALL CHECK_STUFF_OPLABEL(RET_VAL);

   9068  2 002604   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002605   200057 450500                    STP0    SERIALS,,AUTO
         2 002606   000274 701000 2                  TSX1    CHECK_STUFF_OPLABEL
         2 002607   000000 011000                    NOP     0

     1127     9069    2      IF RET_VAL = %FALSE#

   9069  2 002610   200055 235100                    LDA     RET_VAL,,AUTO
         2 002611   002640 601000 2                  TNZ     s:9083

     1128     9070    2      THEN
     1129     9071    3      DO;

     1130     9072    3           CALL CHECK_STUFF_RESOURCE(RET_VAL);

   9072  2 002612   200055 630500                    EPPR0   RET_VAL,,AUTO
         2 002613   200057 450500                    STP0    SERIALS,,AUTO
         2 002614   000422 701000 2                  TSX1    CHECK_STUFF_RESOURCE
         2 002615   000000 011000                    NOP     0

     1131     9073    3           IF RET_VAL = %TRUE# AND LEXEME.LEN = 4 AND ASN = %FILE#

   9073  2 002616   200055 235100                    LDA     RET_VAL,,AUTO
         2 002617   000001 115007                    CMPA    1,DL
         2 002620   002634 601000 2                  TNZ     s:9079
         2 002621   200020 236100                    LDQ     LEXEME,,AUTO
         2 002622   777000 376003                    ANQ     -512,DU
         2 002623   004000 116003                    CMPQ    2048,DU
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:149  
         2 002624   002634 601000 2                  TNZ     s:9079
         2 002625   200042 236100                    LDQ     ASN,,AUTO
         2 002626   777000 376003                    ANQ     -512,DU
         2 002627   001000 116003                    CMPQ    512,DU
         2 002630   002634 601000 2                  TNZ     s:9079

     1132     9074    3            THEN                           /* DPnn is a NAME                     */
     1133     9075    4              DO;                          /* Take away RES we made              */

     1134     9076    4                RET_VAL = %FALSE#;

   9076  2 002631   200055 450100                    STZ     RET_VAL,,AUTO

     1135     9077    4                RESULTS_FID.RES = '0'B;

   9077  2 002632   000054 236000 3                  LDQ     44
         2 002633   200004 356100                    ANSQ    RESULTS_FID,,AUTO

     1136     9078    4                END;

     1137     9079    3           IF RET_VAL = %FALSE#

   9079  2 002634   200055 235100                    LDA     RET_VAL,,AUTO
         2 002635   002640 601000 2                  TNZ     s:9083

     1138     9080    3           THEN
     1139     9081    3                CALL NAME_AND_REST;

   9081  2 002636   000724 701000 2                  TSX1    NAME_AND_REST
         2 002637   000000 011000                    NOP     0

     1140     9082    3           END;

     1141     9083    2      RETURN;

   9083  2 002640   200054 221300                    LDX1  ! ERROR+2,,AUTO
         2 002641   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:150  

CHAR_ONEB
 Sect OctLoc
   1     000   000000 000001                                                    ....

SEARCH_TBL
 Sect OctLoc
   1     001   001001 001001   001001 001001   001001 001001   001001 001001    ................
   1     011*  001000 000002   000000 000003   000000 000000   000000 002002    ................
   1     015   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     021   002000 000000   000000 000000   000000 000000   000000 000000    ................
   1     025   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     041*  001001 001001   001001 001001   001001 001001   001001 001001    ................
   1     175*  001001 001001   001001 001001   001001 001001   001001 001001    ................

OPLABEL_TABLE
 Sect OctLoc
   1     201   040040 000000   103120 000002   114120 000002   103122 000001      ..CP..LP..CR..
   1     205   112105 000001   112106 000001   107122 000002   114117 000001    JE..JF..GR..LO..
   1     211   040040 000000   115105 000001   116117 000001   040040 000000      ..ME..NO..  ..
   1     215   125103 000002                                                    UC..

RESOURCE_TABLE
 Sect OctLoc
   1     216   040040 000000   103107 001004   104120 002001   115124 002003      ..CG..DP..MT..
   1     222   106124 002003   040040 002003   114124 002002   123131 001003    FT..  ..LT..SY..
   1     226   103114 001003   117104 002001                                    CL..OD..

(unnamed)
 Sect OctLoc
   1     230   251506 000004   115124 040040   106124 040040   040040 040040    ....MT  FT

(unnamed)
 Sect OctLoc
   3     000   000000 001523   000000 006000   000013 006000   101040 040040    ............A
   3     004   132040 040040   000003 006000   000003 006000   000004 006000    Z   ............
   3     010   000033 400000   060040 040040   071040 040040   000012 006000    ....0   9   ....
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:151  
   3     014   000011 006000   000012 006000   000000 001524   000016 006000    ................
   3     020   000010 006000   000000 001374   000021 006000   100040 040040    ............@
   3     024   000004 006000   077040 040040   000000 000162   000026 006000    ....?   ...r....
   3     030   000005 006000   000000 001531   000031 006000   052040 040040    ............*
   3     034   000006 006000   000000 001532   000035 006000   000040 040040    .............
   3     040   117040 040040   000000 001212   000041 006000   000007 006000    O   .....!......
   3     044   000000 001533   000044 006000   000002 006000   577777 777777    .....$..........
   3     050   737777 777777   757777 777777   000000 001522   000052 006000    .............*..
   3     054   773777 777777                                                    ....
     1142     9084    2   END SINGLE_LEXEME;
     1143     9085    1   END UMF$FID;

PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:152  
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
      No diagnostics issued in procedure UMF$FID.
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:153  

 **** Variables and constants ****

  ****  Section 001 RoData UMF$FID

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4)     r     1 CHAR_ONE                   0-0-0/w UBIN        r     1 CHAR_ONEB
   201-0-0/c STRC        r     1 OPLABEL_TABLE(0:12)
   216-0-0/c STRC        r     1 RESOURCE_TABLE(0:9)
     1-0-0/w STRC(4608)  r     1 SEARCH_TBL

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   101-0-0/w PTR         r     1 @ERR_CODE                 67-0-0/w PTR         r     1 @HIGH_CHAR
    66-0-0/w PTR         r     1 @LOW_CHAR                 63-0-0/w PTR         r     1 @RET_VAL
    57-0-0/w PTR         r     1 @RET_VAL                  57-0-0/w PTR         r     1 @RET_VAL
    57-0-0/w PTR         r     1 @RET_VAL                  64-0-0/w PTR         r     1 @STRING$
    65-0-0/w PTR         r     1 @STRING_BOUND             42-0-0/b UBIN(9)     r     1 ASN
    42-0-0/c CHAR        r     1 ASNB                      40-0-0/w SBIN        r     1 CHAR_TYPE
    45-0-0/b STRC(5)     r     1 CHECK                     41-0-0/w SBIN        r     1 CURR_LEXEME_TYPE
    37-0-0/w SBIN        r     1 CUR_INDEX                 52-0-0/w BIT         r     1 ERROR
    *0-0-0/w SBIN        r     1 ERR_CODE                  16-0-0/d REMB        r     1 ERR_RETURN
    44-0-0/w SBIN        r     1 FIELD_SIZE                36-0-0/w SBIN        r     1 FOUND_INDEX
    *0-0-0/c CHAR        r     1 HIGH_CHAR                 46-0-0/w SBIN        r     1 I
    70-0-0/w SBIN        r     1 I                         34-0-0/c CHAR        r     1 LCHAR
    20-0-0/c STRC(369)   r     1 LEXEME                    *0-0-0/c CHAR        r     1 LOW_CHAR
    43-0-0/w SBIN        r     1 MAX_NAME                  60-0-0/w SBIN        r     1 MAX_SERIALS
    35-0-0/c CHAR        r     1 NCHAR                     76-0-0/c CHAR        r     1 OCT_CHAR
     4-0-0/d STRC(360)   r     1 OLD_RESULTS                4-0-0/d STRC(324)   r     1 RESULTS_FID
     4-0-0/d CHAR(40)    r     1 RESULTS_FIDB              *0-0-0/w SBIN        r     1 RET_VAL
    *0-0-0/w SBIN        r     1 RET_VAL                   *0-0-0/w SBIN        r     1 RET_VAL
    *0-0-0/w SBIN        r     1 RET_VAL                   55-0-0/w SBIN        r     1 RET_VAL
    55-0-0/w SBIN        r     1 RET_VAL                   75-0-0/w SBIN        r     1 SAV_INDEX
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:154  
    57-0-0/w SBIN        r     1 SERIALS                   57-0-0/w CHAR(4)     r     1 SERIALSB
    *0-0-0/w PTR         r     1 STRING$                   *0-0-0/w SBIN        r     1 STRING_BOUND
    47-0-0/w SBIN        r     1 TEXTBOUND                 50-0-0/w SBIN        r     1 TEXTSIZE
    33-0-0/c CHAR(4)     r     1 UC_LEXEME_START

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$PS0$
     0-0-0/w PTR         r     1 B$PS1$                     0-0-0/w PTR         r     1 B$PS2$
     0-0-0/w PTR         r     1 B$PS3$                     0-0-0/w PTR         r     1 B$PS4$
     0-0-0/w PTR         r     1 B$PS5$                     0-0-0/w PTR         r     1 B$PS6$
     0-0-0/w PTR         r     1 B$PS7$                     0-0-0/w PTR         r     1 B$PS8$
     0-0-0/w PTR         r     1 B$PS9$                     0-0-0/w PTR         r     1 B$XL_UPPER$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 ACCT$FIELD                 0-0-0/c CHAR        r     1 ASN$FIELD
     0-0-0/d STRC(865)   r     1 B$JIT
     0-0-0/c CHAR        r     1 CHAR$ARY(0:0)
     0-0-0/d STRC(4608)  r     1 EMH_UC_XLATE_TBL           0-0-0/d STRC(108)   r     1 FPT$FID_V
     0-0-0/c ASTR(9)     r     1 NAME$FIELD                 0-0-0/c ACHR        r     1 PASS$FIELD
     0-0-0/c CHAR(2)     r     1 RES$TYPE                   0-0-0/c CHAR(4)     r     1 RESOURCE$FIELD
     0-0-0/c STRC        r     1 RESOURCE$FIELD_            0-0-0/c ACHR        r     1 RESULTS$FIELDB
     0-0-0/c ACHR        r     1 SEARCH$STR                 0-0-0/c STRC(90)    r     1 SERIAL$FIELD
     0-0-0/c ASTR(9)     r     1 TEXT$C                     0-0-0/c CHAR(8)     r     1 WSN$FIELD


   Procedure UMF$FID requires 1442 words for executable code.
   Procedure UMF$FID requires 72 words of local(AUTO) storage.
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:155  

    No errors detected in file UMF$FID.:E05TSI    .
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:156  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:157  
          MINI XREF LISTING

ACCT$FIELD
      8071**DCL      8678<<ASSIGN   8944<<ASSIGN
ACCT_TESTDONE IN PROCEDURE INITIALIZE
      8937**LABEL    8943--GOTO
ASN
      8168**DCL      8169--REDEF    8302<<ASSIGN   8413<<ASSIGN   8512<<ASSIGN   8550>>IF       8607<<ASSIGN
      8610>>IF       8614<<ASSIGN   8630>>IF       8636>>IF       8679>>IF       9016>>IF       9073>>IF
ASN$FIELD
      8062**DCL      8235<<ASSIGN
ASNB
      8169**DCL      8235>>ASSIGN
B$JIT.ERR
      7978**DCL      8537<<ASSIGN
B$JIT.ERR.CODE
      7979**DCL      8539<<ASSIGN
B$JIT.ERR.MID
      7979**DCL      7979--REDEF
B$JIT$
      8188**DCL      7973--IMP-PTR  8537>>ASSIGN   8539>>ASSIGN
B$PS0$
      8189**DCL      8919>>ASSIGN   8920>>ASSIGN   8921>>ASSIGN   8922>>ASSIGN   8929>>IF       8937>>IF
      8948>>IF       8959>>IF       8967>>IF       8976>>IF
B$PS1$
      8190**DCL      8232>>IF       8727>>CALLBLT  8742>>IF       8757>>ASSIGN   8766>>ASSIGN   8783>>ASSIGN
      8809>>CALLBLT  8986>>DOWHILE  8990>>ASSIGN
B$PS2$
      8191**DCL      8628>>ASSIGN   8629>>ASSIGN   8679>>IF       8933>>ASSIGN
B$PS3$
      8192**DCL      8678>>ASSIGN   8944>>ASSIGN
B$PS4$
      8193**DCL      8710>>ASSIGN   8955>>ASSIGN
B$PS5$
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:158  
      8194**DCL      8878>>ASSIGN   8879>>ASSIGN   8971>>ASSIGN   8972>>ASSIGN
B$PS6$
      8195**DCL      8580>>ASSIGN   8582>>ASSIGN   8980>>ASSIGN
B$PS7$
      8196**DCL      8235>>ASSIGN
B$PS8$
      8197**DCL      8309>>ASSIGN   8409>>ASSIGN   8519>>ASSIGN   8612>>IF       8616>>IF       8963>>ASSIGN
      9053>>IF
B$PS9$
      8198**DCL      8244>>ASSIGN
B$XL_UPPER$
      8200**DCL      8201--IMP-PTR  8760>>CALLBLT
BADFID IN PROCEDURE QUOTED_STRING
      8823**LABEL    8781--GOTO     8791--GOTO     8828--GOTO
BAD_COMBO IN PROCEDURE NORMAL_START
      9059**LABEL    9018--GOTO     9022--GOTO     9040--GOTO     9043--GOTO     9055--GOTO
BAD_NAME IN PROCEDURE GET_NAME_AND_REST
      8648**LABEL    8644--GOTO
CHAR$ARY IN PROCEDURE CHECK_RANGE
      8267**DCL      8271>>IF       8271>>IF
CHAR_ONE
      8092**DCL      8971>>ASSIGN
CHAR_ONEB
      8091**DCL      8092--REDEF
CHAR_TYPE
      8166**DCL      8727<<CALLBLT  8732>>IF       8762>>IF       8809<<CALLBLT  8816>>IF       8833<<ASSIGN
CHECK.CCHARS
      8177**DCL      8636>>IF       8915<<ASSIGN   8922<<ASSIGN
CHECK.OLDFPT
      8178**DCL      8241>>IF       8911<<ASSIGN   8923<<ASSIGN
CHECK.PAOSF
      8174**DCL      8679>>IF       8912<<ASSIGN   8919<<ASSIGN
CHECK.PPOSF
      8175**DCL      8630>>IF       8913<<ASSIGN   8920<<ASSIGN
CHECK.PWODF
      8176**DCL      8550>>IF       8914<<ASSIGN   8921<<ASSIGN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:159  
CHECK_RANGE
      8254**PROC     8294--CALL     8297--CALL     8393--CALL     8501--CALL
CHECK_STUFF_DEVICE_ID
      8286**PROC     9033--CALL     9050--CALL
CHECK_STUFF_OPLABEL
      8328**PROC     9030--CALL     9046--CALL     9068--CALL
CHECK_STUFF_RESOURCE
      8426**PROC     9012--CALL     9024--CALL     9048--CALL     9072--CALL
CURR_LEXEME_TYPE
      8167**DCL      8310>>ASSIGN   8410>>ASSIGN   8520>>ASSIGN   8563>>ASSIGN   8597>>ASSIGN   8636>>IF
      8671>>ASSIGN   8703>>ASSIGN   8724<<ASSIGN   8738<<ASSIGN   8746<<ASSIGN   8786>>IF       8818>>IF
      8853>>ASSIGN
CUR_INDEX
      8165**DCL      8311>>ASSIGN   8411>>ASSIGN   8521>>ASSIGN   8564>>ASSIGN   8565>>ASSIGN   8598>>ASSIGN
      8599>>ASSIGN   8672>>ASSIGN   8673>>ASSIGN   8704>>ASSIGN   8705>>ASSIGN   8726<<ASSIGN   8727>>CALLBLT
      8735>>IF       8742>>IF       8742>>IF       8756>>ASSIGN   8757>>ASSIGN
EMH_UC_XLATE_TBL
      8201**DCL      8760>>CALLBLT
ERROR
      8183**DCL      8552<<ASSIGN   8553<<ASSIGN   8555>>IF
ERR_CODE IN PROCEDURE ERR_PROC
      8535**DCL      8533--PROC     8539>>ASSIGN
ERR_EXIT
      8235**LABEL    8214--REMEMBR
ERR_PROC
      8533**PROC     8229--CALL     8234--CALL     8307--CALL     8407--CALL     8517--CALL     8558--CALL
      8569--CALL     8572--CALL     8576--CALL     8618--CALL     8626--CALL     8635--CALL     8658--CALL
      8663--CALL     8676--CALL     8685--CALL     8696--CALL     8708--CALL     8717--CALL     8751--CALL
      8823--CALL     8859--CALL     8869--CALL     8877--CALL     8885--CALL     8899--CALL     8993--CALL
      9001--CALL     9059--CALL
ERR_RETURN
      8148**DCL      8214<<REMEMBR  8540>>UNWIND
FIELD_SIZE
      8172**DCL      8071--IMP-SIZ  8072--IMP-SIZ  8086--IMP-SIZ  8237<>CALL     8238>>IF       8244>>ASSIGN
      8566<>CALL     8567>>IF       8670<>CALL     8674>>IF       8678>>ASSIGN   8702<>CALL     8706>>IF
      8710>>ASSIGN   8907<>CALL     8908>>IF       8940<>CALL     8941>>IF       8944>>ASSIGN   8951<>CALL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:160  
      8952>>IF       8955>>ASSIGN
FINIS_OP IN PROCEDURE CHECK_STUFF_OPLABEL
      8415**LABEL    8366--GOTO     8377--GOTO     8400--GOTO
FINIS_RESOURCE IN PROCEDURE CHECK_STUFF_RESOURCE
      8522**LABEL    8469--GOTO     8481--GOTO     8508--GOTO
FOUND_INDEX
      8164**DCL      8230>>IF       8232>>IF       8565>>ASSIGN   8599>>ASSIGN   8673>>ASSIGN   8705>>ASSIGN
      8726>>ASSIGN   8727<<CALLBLT  8735>>IF       8742>>IF       8756>>ASSIGN   8766>>ASSIGN   8778<<ASSIGN
      8778>>ASSIGN   8779>>IF       8783>>ASSIGN   8805>>IF       8808>>ASSIGN   8809<<CALLBLT  8814>>IF
      8818>>IF       8854>>ASSIGN   8880>>ASSIGN   8985<<ASSIGN   8986>>DOWHILE  8986>>DOWHILE  8988<<ASSIGN
      8988>>ASSIGN   8990>>ASSIGN   8998<<ASSIGN   8998>>ASSIGN
FPT$FID_V
      8081**DCL      8908--IF
FPT$FID_V.CHECK.AWODF
      8082**DCL      8921>>ASSIGN
FPT$FID_V.CHECK.CCHARS
      8082**DCL      8922>>ASSIGN
FPT$FID_V.CHECK.PAOSF
      8082**DCL      8919>>ASSIGN
FPT$FID_V.CHECK.PPOSF
      8082**DCL      8920>>ASSIGN
FPT$FID_V.SCRUB.SACCT
      8081**DCL      8937>>IF
FPT$FID_V.SCRUB.SNAME
      8081**DCL      8929>>IF
FPT$FID_V.SCRUB.SPASS
      8081**DCL      8948>>IF
FPT$FID_V.SCRUB.SRES
      8081**DCL      8959>>IF
FPT$FID_V.SCRUB.SSN
      8081**DCL      8967>>IF
FPT$FID_V.SCRUB.SWSN
      8081**DCL      8976>>IF
GET_ACCT_AND_REST IN PROCEDURE GET_NAME_AND_REST
      8667**PROC     8652--CALL
GET_CHECK_STUFF_WSN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:161  
      8548**PROC     8656--CALL     8694--CALL     8713--CALL     8897--CALL     9057--CALL
GET_NAME_AND_REST
      8585**PROC     8892--CALL     9019--CALL
GET_NEXT_LEXEME
      8722**PROC     8216--CALL     8554--CALL     8589--CALL     8669--CALL     8701--CALL     8856--CALL
      9037--CALL
GET_PASS IN PROCEDURE GET_ACCT_AND_REST
      8699**PROC     8690--CALL
GET_SERIAL_AND_REST
      8846**PROC     9027--CALL
HFF$DSIZ
      8206**DCL-ENT  8237--CALL     8566--CALL     8593--CALL     8670--CALL     8702--CALL     8871--CALL
      8907--CALL     8925--CALL     8940--CALL     8951--CALL
HFF$NILERASE
      8207**DCL-ENT  8305--CALL     8405--CALL     8515--CALL     8574--CALL     8624--CALL     8868--CALL
      8932--CALL     8962--CALL     8970--CALL     8979--CALL     8984--CALL
HIGH_CHAR IN PROCEDURE CHECK_RANGE
      8262**DCL      8254--PROC     8271>>IF
I
      8179**DCL      8370<<DOINDEX  8371>>IF       8375>>IF       8383>>IF       8389>>IF       8474<<DOINDEX
      8475>>IF       8479>>IF       8490>>IF       8497>>IF       8512>>ASSIGN   8642<<CALLBLT  8775<<ASSIGN
      8789>>IF       8792>>ASSIGN   8793<<ASSIGN   8793>>ASSIGN   8794>>ASSIGN
I IN PROCEDURE CHECK_RANGE
      8266**DCL      8270<<DOINDEX  8271>>IF       8271>>IF
INITIALIZE
      8904**PROC     8215--CALL
LCHAR
      8154**DCL      8217>>IF       8225>>IF       8725<<ASSIGN
LEXEME
      8149**DCL      8580--ASSIGN   8580--ASSIGN   8678--ASSIGN   8678--ASSIGN   8710--ASSIGN   8710--ASSIGN
      8879--ASSIGN   8879--ASSIGN
LEXEME.LEN
      8150**DCL      8291>>IF       8291>>IF       8295>>IF       8309>>ASSIGN   8312>>ASSIGN   8363>>IF
      8363>>IF       8381>>IF       8409>>ASSIGN   8412>>ASSIGN   8466>>IF       8466>>IF       8487>>IF
      8519>>ASSIGN   8522>>ASSIGN   8557>>IF       8567>>IF       8578>>IF       8600>>IF       8620>>IF
      8628>>ASSIGN   8674>>IF       8679>>IF       8706>>IF       8756<<ASSIGN   8757>>ASSIGN   8774<<ASSIGN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:162  
      8779>>IF       8794<<ASSIGN   8798>>IF       8800>>ASSIGN   8801<<ASSIGN   8801>>ASSIGN   8857>>IF
      8861>>IF       8894<<ASSIGN   9016>>IF       9038>>IF       9073>>IF
LEXEME.OCTAL_STRING
      8152**DCL      8747<<ASSIGN   8792<<ASSIGN
LEXEME.STRING
      8151**DCL      8152--REDEF    8629>>ASSIGN   8630>>IF       8636>>IF       8642>>CALLBLT  8752>>ASSIGN
      8757<<ASSIGN   8760>>CALLBLT  8800<<ASSIGN
LOW_CHAR IN PROCEDURE CHECK_RANGE
      8261**DCL      8254--PROC     8271>>IF
MAX_NAME
      8171**DCL      8070--IMP-SIZ  8593<>CALL     8594>>IF       8596<<ASSIGN   8596>>ASSIGN   8600>>IF
      8629>>ASSIGN   8679>>IF
MAX_SERIALS IN PROCEDURE GET_SERIAL_AND_REST
      8850**DCL      8871<>CALL     8872<<ASSIGN   8872>>ASSIGN   8875>>IF
NAME$FIELD.LEN
      8069**DCL      8628<<ASSIGN   8933<<ASSIGN
NAME$FIELD.STRING
      8070**DCL      8629<<ASSIGN   8679>>IF
NAME_AND_REST IN PROCEDURE GET_NAME_AND_REST
      8591**ENTRY    8227--CALL     8895--CALL     9010--CALL     9052--CALL     9081--CALL
NAME_TESTDONE IN PROCEDURE INITIALIZE
      8929**LABEL    8932--CALLALT
NCHAR
      8159**DCL      8219>>IF       8570>>IF       8648>>IF       8650>>IF       8654>>IF       8686>>IF
      8688>>IF       8692>>IF       8711>>IF       8715>>IF       8725>>ASSIGN   8764<<ASSIGN   8766<<ASSIGN
      8855>>DOUNTIL  8883>>IF       8889>>DOSELCT  8990<<ASSIGN   8991>>IF       8994>>IF       8994>>IF
      8994>>IF       8997<<ASSIGN   9008>>DOSELCT  9038>>IF
NORMAL_START
      9004**PROC     8223--CALL
NO_FID_ALT IN PROCEDURE INITIALIZE
      9001**LABEL    8984--CALLALT
NO_RES IN PROCEDURE CHECK_STUFF_DEVICE_ID
      8307**LABEL    8305--CALLALT
NO_RES2 IN PROCEDURE CHECK_STUFF_RESOURCE
      8517**LABEL    8515--CALLALT
NO_RESULTS
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:163  
      8244**LABEL    8240--GOTO
NO_WSN IN PROCEDURE GET_CHECK_STUFF_WSN
      8576**LABEL    8574--CALLALT
OCT_CHAR IN PROCEDURE QUOTED_STRING
      8772**DCL      8783<<ASSIGN   8784>>IF       8789>>IF       8789>>IF       8792>>ASSIGN   8800>>ASSIGN
OLD_RESULTS.NAME_TYPE
      8145**DCL      8243<<ASSIGN
OPLABEL_TABLE.NN_STATUS IN PROCEDURE CHECK_STUFF_OPLABEL
      8348**DCL      8383>>IF       8389>>IF
OPLABEL_TABLE.OP_TEXT IN PROCEDURE CHECK_STUFF_OPLABEL
      8335**DCL      8371>>IF
PASS$FIELD
      8072**DCL      8710<<ASSIGN   8955<<ASSIGN
PASS_TESTDONE IN PROCEDURE INITIALIZE
      8948**LABEL    8954--GOTO
QUOTED_STRING IN PROCEDURE GET_NEXT_LEXEME
      8769**PROC     8739--CALL     8748--CALL
RES$TYPE IN PROCEDURE GET_NAME_AND_REST
      8587**DCL      8612>>IF       8616>>IF
RESOURCE$FIELD
      8063**DCL      8309<<ASSIGN   8409<<ASSIGN   8519<<ASSIGN   8963<<ASSIGN
RESOURCE$FIELD_.NN
      8066**DCL      9053>>IF
RESOURCE_TABLE.ASN_CODE IN PROCEDURE CHECK_STUFF_RESOURCE
      8454**DCL      8512>>ASSIGN
RESOURCE_TABLE.NN_STATUS IN PROCEDURE CHECK_STUFF_RESOURCE
      8444**DCL      8490>>IF       8497>>IF
RESOURCE_TABLE.RES_TEXT IN PROCEDURE CHECK_STUFF_RESOURCE
      8434**DCL      8475>>IF
RESULTS$FIELDB
      8086**DCL      8244<<ASSIGN
RESULTS_FID
      8127**DCL      8135--REDEF    8136--REDEF    8906<<ASSIGN
RESULTS_FID.ACCT
      8127**DCL      8677<<ASSIGN
RESULTS_FID.ASN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:164  
      8127**DCL      8303<<ASSIGN   8414<<ASSIGN   8513<<ASSIGN   8603>>IF       8606<<ASSIGN
RESULTS_FID.CLENGTH.ACCT
      8132**DCL      8673<<ASSIGN
RESULTS_FID.CLENGTH.NAME
      8131**DCL      8599<<ASSIGN
RESULTS_FID.CLENGTH.PASS
      8132**DCL      8705<<ASSIGN
RESULTS_FID.CLENGTH.RES
      8132**DCL      8312<<ASSIGN   8412<<ASSIGN   8522<<ASSIGN
RESULTS_FID.CLENGTH.SN
      8132**DCL      8880<<ASSIGN
RESULTS_FID.CLENGTH.WSN
      8132**DCL      8565<<ASSIGN
RESULTS_FID.NAME
      8127**DCL      8623<<ASSIGN   8679>>IF
RESULTS_FID.PASS
      8127**DCL      8709<<ASSIGN
RESULTS_FID.RES
      8127**DCL      8304<<ASSIGN   8404<<ASSIGN   8514<<ASSIGN   9077<<ASSIGN
RESULTS_FID.SINDEX.ACCT
      8130**DCL      8672<<ASSIGN
RESULTS_FID.SINDEX.NAME
      8130**DCL      8598<<ASSIGN
RESULTS_FID.SINDEX.PASS
      8130**DCL      8704<<ASSIGN
RESULTS_FID.SINDEX.RES
      8131**DCL      8311<<ASSIGN   8411<<ASSIGN   8521<<ASSIGN
RESULTS_FID.SINDEX.SN
      8130**DCL      8854<<ASSIGN   8880>>ASSIGN
RESULTS_FID.SINDEX.WSN
      8130**DCL      8564<<ASSIGN
RESULTS_FID.SN
      8127**DCL      8630>>IF       8864<<ASSIGN
RESULTS_FID.TYPE.ACCT
      8128**DCL      8671<<ASSIGN
RESULTS_FID.TYPE.NAME
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:165  
      8128**DCL      8243>>ASSIGN   8597<<ASSIGN
RESULTS_FID.TYPE.PASS
      8128**DCL      8703<<ASSIGN
RESULTS_FID.TYPE.RES
      8129**DCL      8310<<ASSIGN   8410<<ASSIGN   8520<<ASSIGN
RESULTS_FID.TYPE.SN
      8128**DCL      8853<<ASSIGN
RESULTS_FID.TYPE.WSN
      8129**DCL      8563<<ASSIGN
RESULTS_FID.WSN
      8127**DCL      8573<<ASSIGN
RESULTS_FIDB
      8135**DCL      8244>>ASSIGN
RES_TESTDONE IN PROCEDURE INITIALIZE
      8959**LABEL    8962--CALLALT
RET_VAL IN PROCEDURE CHECK_RANGE
      8258**DCL      8254--PROC     8269<<ASSIGN   8273<<ASSIGN
RET_VAL IN PROCEDURE CHECK_STUFF_DEVICE_ID
      8288**DCL      8286--PROC     8290<<ASSIGN   8294<>CALL     8295>>IF       8297<>CALL     8299>>IF
      8313<<ASSIGN
RET_VAL IN PROCEDURE CHECK_STUFF_OPLABEL
      8332**DCL      8328--PROC     8362<<ASSIGN   8387<<ASSIGN   8393<>CALL     8398>>IF       8415<<ASSIGN
RET_VAL IN PROCEDURE CHECK_STUFF_RESOURCE
      8430**DCL      8426--PROC     8465<<ASSIGN   8494<<ASSIGN   8501<>CALL     8506>>IF
RET_VAL IN PROCEDURE NORMAL_START
      9006**DCL      9012<>CALL     9013>>IF       9024<>CALL     9025>>IF       9030<>CALL     9031>>IF
      9033<>CALL     9034>>IF       9046<>CALL     9047>>IF       9048<>CALL     9049>>IF       9050<>CALL
      9051>>IF
RET_VAL IN PROCEDURE SINGLE_LEXEME
      9066**DCL      9068<>CALL     9069>>IF       9072<>CALL     9073>>IF       9076<<ASSIGN   9079>>IF
SAV_INDEX IN PROCEDURE QUOTED_STRING
      8771**DCL      8808<<ASSIGN   8809>>CALLBLT  8814>>IF
SEARCH$STR
      8079**DCL      8232>>IF       8727>>CALLBLT  8742>>IF       8757>>ASSIGN   8766>>ASSIGN   8783>>ASSIGN
      8809>>CALLBLT  8986>>DOWHILE  8990>>ASSIGN
SEARCH_TBL
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:166  
      8093**DCL      8727>>CALLBLT  8809>>CALLBLT
SERIAL$FIELD.NUM
      8077**DCL      8878<<ASSIGN   8971<<ASSIGN
SERIAL$FIELD.SERIAL
      8078**DCL      8879<<ASSIGN   8972<<ASSIGN
SERIALS IN PROCEDURE GET_SERIAL_AND_REST
      8848**DCL      8849--REDEF    8852<<ASSIGN   8865>>IF       8874<<ASSIGN   8874>>ASSIGN   8875>>IF
      8879>>ASSIGN
SERIALSB IN PROCEDURE GET_SERIAL_AND_REST
      8849**DCL      8878>>ASSIGN
SINGLE_LEXEME
      9064**PROC     8221--CALL
SN_TESTDONE IN PROCEDURE INITIALIZE
      8967**LABEL    8970--CALLALT
STRING$ IN PROCEDURE CHECK_RANGE
      8259**DCL      8254--PROC     8267--IMP-PTR  8271>>IF       8271>>IF
STRING_BOUND IN PROCEDURE CHECK_RANGE
      8260**DCL      8254--PROC     8270>>DOINDEX
STUFF_IT IN PROCEDURE QUOTED_STRING
      8798**LABEL    8821--GOTO
TEXT$C.LEN
      8074**DCL      8075--IMP-SIZ  8580>>ASSIGN   8678>>ASSIGN   8710>>ASSIGN   8879>>ASSIGN
TEXT$C.STRING
      8075**DCL      8580>>ASSIGN   8678>>ASSIGN   8710>>ASSIGN   8879>>ASSIGN
TEXTBOUND
      8180**DCL      8230>>IF       8726>>ASSIGN   8779>>IF       8805>>IF       8818>>IF       8926<<ASSIGN
      8927<<ASSIGN   8986>>DOWHILE
TEXTSIZE
      8181**DCL      8079--IMP-SIZ  8232>>IF       8727>>CALLBLT  8742>>IF       8757>>ASSIGN   8766>>ASSIGN
      8783>>ASSIGN   8809>>CALLBLT  8925<>CALL     8926>>ASSIGN   8927>>IF       8927>>ASSIGN   8986>>DOWHILE
      8990>>ASSIGN
UC_LEXEME_START
      8153**DCL      8294--CALL     8297--CALL     8309>>ASSIGN   8371>>IF       8393--CALL     8409>>ASSIGN
      8475>>IF       8501--CALL     8519>>ASSIGN   8752<<ASSIGN   8760<<CALLBLT
WSN$FIELD
      8067**DCL      8580<<ASSIGN   8582<<ASSIGN   8980<<ASSIGN
PL6.E3A0      #001=UMF$FID File=UMF$FID.:E05TSI                                  WED 07/30/97 06:59 Page:167  
WSN_TESTDONE IN PROCEDURE INITIALIZE
      8976**LABEL    8979--CALLALT
