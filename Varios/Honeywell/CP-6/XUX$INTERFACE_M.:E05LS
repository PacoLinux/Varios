

15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    1    
    1      /*M* XUX$INTERFACE_M - Interface macros for the common options parser */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* DDA */
    9
   10      %EQU XUX$ALL = 0;
   11      %EQU XUX$NONE = 0;
   12      %EQU XUX$FULL = 1;
   13      %EQU XUX$MINI = 2;
   14      %EQU XUX$MAX_BC_UNITS = 8;
   15      %EQU XUX$ACCT_MAX = 10;
   16
   17      %MACRO XUX$LEGAL_OPTIONS( NAME=XUX$LEGAL_OPTIONS,
   18                                STCLASS=CONSTANT,
   19                                LVL=1,
   20                                TERM=";",
   21                                BC(YES='1'B,NO='0'B)='1'B,
   22                                DMAP(YES='1'B,NO='0'B)='1'B,
   23                                LO(YES='1'B,NO='0'B)='1'B,
   24                                LS(YES='1'B,NO='0'B)='1'B,
   25                                OU(YES='1'B,NO='0'B)='1'B,
   26                                PMAP(YES='1'B,NO='0'B)='1'B,
   27                                SCHEMA(YES='1'B,NO='0'B)='1'B,
   28                                SO(YES='1'B,NO='0'B)='1'B,
   29                                SRCH(YES='1'B,NO='0'B)='1'B,
   30                                UI(YES='1'B,NO='0'B)='1'B,
   31                                UREF(YES='1'B,NO='0'B)='1'B,
   32                                WARN(YES='1'B,NO='0'B)='1'B,
   33                                XREF(YES='1'B,NO='0'B)='1'B,
   34                                NSTD(YES='1'B,NO='0'B)='0'B,
   35                                DCB_UI(YES='1'B,NO='0'B)='1'B,
   36                                DCB_OU(YES='1'B,NO='0'B)='1'B,
   37                                DCB_LS(YES='1'B,NO='0'B)='1'B,
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    2    
   38                                SRCH_SIZ(YES='1'B,NO='0'B)='0'B,
   39                                SRCH_FIL(YES='1'B,NO='0'B)='0'B);
   40
   41
   42      %LSET LISTDIR = '0'B;
   43      %LSET LISTEXP = '1'B;
   44      %LSET LISTCOM = '0'B;
   45      %LSET LISTSUB = '1'B;
   46
   47      /*F*
   48           NAME: XUX$LEGAL_OPTIONS Structure
   49                This macro defines the structure that tells which of the standard
   50                options are legal on the command line to be parsed.
   51           .SPB
   52                The structure defined has one bit for each of the legal standard
   53                options, and one extra bit that may be set to allow non-standard
   54                options.  The default is that all standard CP-6 options are
   55                allowed, and no non-standard options are allowed.
   56                Note that setting the bit associated with the option merely
   57                allows that option (or any of its permutations [e.g., XREF,
   58                MXREF, or NXREF]) to be specified on the command line,
   59                and does not actually set that option in the XUX$STD_OPTIONS structure.
   60                To access any data item, use the name followed by a # (e.g.,
   61                XUX$LEGAL_OPTIONS.LS# ).
   62                ..::IX "command line options, standard"
   63                ..::IX "command line options, non-standard"
   64      */
   65      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ' );
   66      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
   67           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
   68           (  SUBSTR(STR,0,3) = 'EXT') ;
   69              %LSET INIT = CHARTEXT( 'INIT' );
   70              %LSET INIT_END = CHARTEXT( '  ' );
   71           %ELSE;
   72              %LSET INIT = CHARTEXT( '/*' );
   73              %LSET INIT_END = CHARTEXT( '*/' );
   74           %ENDIF;
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    3    
   75
   76      %LSET LVL2 = LVL + 1;
   77
   78      %IF LVL = 1;
   79        DCL 1 NAME ALIGNED STCLASS,
   80      %ELSE;
   81           LVL NAME ALIGNED,
   82      %ENDIF;
   83
   84
   85           %LVL2 BC# BIT(1) UNAL %INIT (BC) %INIT_END,
   86           /*K* BC = {YES|NO}^^^^if YES, allows the Batch Compile (BC) option to be
   87                specified.  The default is YES.
   88           */
   89
   90           %LVL2 DMAP# BIT(1) UNAL %INIT (DMAP) %INIT_END,
   91           /*K* DMAP = {YES|NO}^^^^if YES, allows the Data Map(DM), No Data Map
   92                (NDM) or Mini Data Map (MDM) option to be specified.  The
   93                default is YES.
   94           */
   95
   96           %LVL2 LO# BIT(1) UNAL %INIT (LO) %INIT_END,
   97           /*K* LO = {YES|NO}^^^^if YES, allows the List Object (LO) option or No List
   98                    Object (NLO) option to be specified.  The default is YES.
   99           */
  100
  101           %LVL2 LS# BIT(1) UNAL %INIT (LS) %INIT_END,
  102           /*K* LS = {YES|NO}^^^^if YES, allows the List Source (LS) option or No
  103                    List Source (NLS) option to be specified.  The default is YES.
  104           */
  105
  106           %LVL2 OU# BIT(1) UNAL %INIT (OU) %INIT_END,
  107           /*K* OU = {YES|NO}^^^^If YES, allows the Object Unit (OU) generation or
  108                 No Object Unit generation (NOU) option to be specified.  The
  109                 default is YES.
  110           */
  111
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    4    
  112           %LVL2 PMAP# BIT(1) UNAL %INIT (PMAP) %INIT_END,
  113           /*K* PMAP = {YES|NO}^^^^if YES, allows the Procedure MAP (PMAP), No Procedure
  114                MAP (NPMAP), or Mini Procedure MAP (MPMAP) to be specified.
  115                The default is YES.
  116           */
  117
  118           %LVL2 SCHEMA# BIT(1) UNAL %INIT (SCHEMA) %INIT_END,
  119           /*K* SCHEMA = {YES|NO}^^^^if YES, allows the Schema (SC), No Schema (NSCHEMA)
  120                or Mini Schema (MSCHEMA) option to be specified.  The
  121                default is YES.
  122           */
  123
  124           %LVL2 SO# BIT(1) UNAL %INIT (SO) %INIT_END,
  125           /*K* SO = {YES|NO}^^^^if YES, allows the Source Output (SO) option or
  126                No Source Output (NSO) option to be specified.  The
  127                default is YES.
  128           */
  129
  130           %LVL2 SRCH# BIT(1) UNAL %INIT (SRCH) %INIT_END,
  131           /*K* SRCH = {YES|NO}^^^^if YES, allows the Search (SRCH) option to be specified.
  132                The default is YES.
  133           */
  134
  135           %LVL2 UI# BIT(1) UNAL %INIT (UI) %INIT_END,
  136           /*K* UI = {YES|NO}^^^^if YES, allows the Update Input (UI) option or
  137                    No Update Input (NUI) option to be specified.  The
  138                    default is YES.
  139           */
  140
  141           %LVL2 UREF# BIT(1) UNAL %INIT (UREF) %INIT_END,
  142           /*K* UREF = {YES|NO}^^^^if YES, allows the Unreferenced Data listing
  143                option (UREF) to be specified.  The default is YES.
  144           */
  145
  146           %LVL2 WARN# BIT(1) UNAL %INIT (WARN) %INIT_END,
  147           /*K* WARN = {YES|NO}^^^^if YES, allows the Warning message (WARN)
  148                or No Warning message (NWARN) option to be specified.  The
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    5    
  149                default is YES.
  150           */
  151
  152           %LVL2 XREF# BIT(1) UNAL %INIT (XREF) %INIT_END,
  153           /*K* XREF = {YES|NO}^^^^if YES, allows the cross reference (XREF),
  154                Mini cross reference (MXREF), or No cross reference (NXREF)
  155                option to be specified.  The default is YES.
  156           */
  157
  158           %LVL2 NSTD# BIT(1) UNAL %INIT (NSTD) %INIT_END,
  159           /*K* NSTD = {YES|NO}^^^^if YES, allows Non-standard options to be specified.
  160                    The default is NO.
  161           */
  162
  163
  164           %LVL2 DCB_UI# BIT(1) UNAL %INIT (DCB_UI) %INIT_END,
  165           /*K* DCB_UI = {YES|NO}^^^^if YES, allows a fid in the UI position on the
  166                command line.  The default is YES.
  167           */
  168
  169           %LVL2 DCB_OU# BIT(1) UNAL %INIT (DCB_OU) %INIT_END,
  170           /*K* DCB_OU = {YES|NO}^^^^if YES, allows a fid in the OU position on the
  171                command line.  The default is YES.
  172           */
  173
  174           %LVL2 DCB_LS# BIT(1) UNAL %INIT (DCB_LS) %INIT_END,
  175           /*K* DCB_LS = {YES|NO}^^^^if YES, allows a fid in the LS position on the
  176                command line.  The default is YES.
  177           */
  178
  179           %LVL2 SRCH_SIZ# BIT(1) UNAL %INIT (SRCH_SIZ) %INIT_END,
  180           /*K* SRCH_SIZ = {YES|NO}^^^^if YES, allows a variable-sized field
  181                for the number of search accounts.  The default is NO.
  182           */
  183           %LVL2 SRCH_FIL# BIT(1) UNAL %INIT (SRCH_FIL) %INIT_END,
  184           /*K* SRCH_FIL = {YES|NO}^^^^if YES, allows a file name in the SRCH list.
  185                The default is NO.
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    6    
  186           */
  187
  188           %LVL2 * BIT(53) UNAL %INIT ('0'B) %INIT_END TERM
  189           /*B* Filler to be used for expansion
  190           */
  191      %MEND;
  192
  193      %MACRO XUX$STD_OPTIONS(   NAME=XUX$STD_OPTIONS,
  194                                STCLASS=STATIC,
  195                                LVL=1,
  196                                TERM=";");
  197
  198      %LSET LISTDIR = '0'B;
  199      %LSET LISTEXP = '1'B;
  200      %LSET LISTCOM = '0'B;
  201      %LSET LISTSUB = '1'B;
  202
  203      /*F*
  204           NAME: XUX$STD_OPTIONS Structure
  205                This macro defines a structure that tells the user program which
  206                of the standard options were found on the command line.  If no options are
  207                specified, then the CP-6 system defaults of UI, LS, OU, BC(ALL),
  208                MSCHEMA and NWARN are set.  The UI, LS and OU options are also set
  209                by examining the JIT flags to determine if anything was present
  210                in the UI, OU and/or LS DCB positions.
  211                .SPB
  212                Each of the following items, when set, indicates that the
  213                corresponding option was either found on the command line, or
  214                was a default. The non-BIT(1) items are set as indicated.
  215                Note that an item can only be set if the corresponding bit
  216                in XUX$LEGAL_OPTIONS is set.
  217                See the CP-6 System Programmer Guide (CE62),
  218                Compilers and Language Utilities,
  219                for a description of the CP-6 standard options.
  220                ..::IX "command line options, standard"
  221      */
  222
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    7    
  223
  224      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ');
  225      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
  226           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
  227           (  SUBSTR(STR,0,3) = 'EXT') ;
  228              %LSET INIT = CHARTEXT( 'INIT' );
  229              %LSET INIT_END = CHARTEXT( '  ' );
  230           %ELSE;
  231              %LSET INIT = CHARTEXT( '/*' );
  232              %LSET INIT_END = CHARTEXT( '*/' );
  233           %ENDIF;
  234
  235      %LSET LVL2 = LVL + 1;
  236      %LSET LVL3 = LVL + 2;
  237
  238      %IF LVL = 1;
  239        DCL 1 NAME ALIGNED STCLASS,
  240      %ELSE;
  241           LVL NAME ALIGNED,
  242      %ENDIF;
  243
  244
  245           %LVL2 BC UBIN WORD ALIGNED %INIT (%XUX$ALL) %INIT_END,
  246            /*K* BC - indicates how many (if any) compile units
  247                 are specified on the command line, and is always
  248                 a value from 1 to 8, unless BC(ALL) is specified, in which
  249                 case the value is zero.  An equate (%XUX$ALL) may be used to
  250                 test for the BC(ALL) case.  The actual BC unit numbers may be
  251                 found in XUX$BC_UNIT, which is an array (0:8) that is specified
  252                 on the BC_UNIT parameter of the XUX$PARAM macro.
  253                 If BC is not specified on the command line then the
  254                 default value is %XUX$ALL, indicating BC(ALL).  If BC is
  255                 greater than 0,
  256                 then each element of XUX$BC_UNIT (from 1 to BC) contains a
  257                 value from 1 to 131071 representing the BC unit that was
  258                 specified. The value of element zero of XUX$BC_UNIT is not significant.
  259            */
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    8    
  260
  261           %LVL2 DMAP ALIGNED,
  262                 %LVL3 STATIC# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  263                 %LVL3 AUTO# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  264                 %LVL3 SYMREF# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  265                 %LVL3 BASED# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  266                 %LVL3 * BIT(32) UNAL %INIT ('0'B) %INIT_END,
  267            /*K* DMAP - contains four bits - STATIC#, AUTO#, SYMREF#, and BASED#,
  268                 each corresponding to the type of DMAP that was requested.  If
  269                 no DMAP was requested, then the default value for all of these
  270                 bits is '0'B.  No translation of this field is needed to pass
  271                 it to UNGMAP for generation of the listings.
  272            */
  273
  274           %LVL2 MDMAP ALIGNED,
  275                 %LVL3 STATIC# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  276                 %LVL3 AUTO# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  277                 %LVL3 SYMREF# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  278                 %LVL3 BASED# BIT(1) UNAL %INIT ('0'B) %INIT_END,
  279                 %LVL3 * BIT(32) UNAL %INIT ('0'B) %INIT_END,
  280            /*K* MDMAP - contains four bits - STATIC#, AUTO#, SYMREF#, and BASED#,
  281                 each corresponding to the type of MDMAP that was requested.  If
  282                 no MDMAP was requested, then the default value for all of these
  283                 bits is '0'B.  No translation of this field is needed to pass
  284                 it to UNGMAP for generation of this listing.
  285            */
  286
  287           %LVL2 LO ALIGNED,
  288                 %LVL3 CODE BIT(1) UNAL %INIT ('0'B) %INIT_END,
  289                 %LVL3 DATA BIT(1) UNAL %INIT ('0'B) %INIT_END,
  290                 %LVL3 * BIT(34) UNAL %INIT ('0'B) %INIT_END,
  291            /*K* LO - contains two bits - CODE and DATA.  If LO alone
  292                 is specified on the command line, then both of these bits
  293                 are set; otherwise LO(CODE) sets the CODE bit, and
  294                 LO(DATA) sets the DATA bit.  The default is that both
  295                 bits are set to '0'B.  No translation of this field is
  296                 needed to pass it to UNGMAP for generation of this listing.
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    9    
  297            */
  298
  299           %LVL2 LS BIT(1) ALIGNED %INIT ('1'B) %INIT_END,
  300            /*K* LS - indicates that the LS option was specified or
  301                 assumed by default.  The default is '1'B.
  302            */
  303
  304           %LVL2 OU BIT(1) ALIGNED %INIT ('1'B) %INIT_END,
  305            /*K* OU - indicates that the OU option was specified or
  306                 assumed by default.  The default is '1'B.
  307            */
  308
  309           %LVL2 PMAP ALIGNED,
  310                 %LVL3 FULL BIT(1) UNAL %INIT ('0'B) %INIT_END,
  311                 %LVL3 MINI BIT(1) UNAL %INIT ('0'B) %INIT_END,
  312                 %LVL3 * BIT(34) UNAL %INIT ('0'B) %INIT_END,
  313            /*K* PMAP - contains two bits, FULL and MINI indicating
  314                 what type of PMAP has been requested.  The default for both
  315                 bits is '0'B.  No translation of this field is needed to pass
  316                 it to UNGMAP for generation of this listing.
  317            */
  318
  319           %LVL2 SCHEMA UBIN WORD ALIGNED %INIT (%XUX$MINI) %INIT_END,
  320            /*K* SCHEMA - indicates that SCHEMA is specified
  321                 on the command line.  Three equates are provided to test the
  322                 value, %XUX$NONE for NSCHEMA, %XUX$FULL for SCHEMA, and
  323                 %XUX$MINI for MSCHEMA. The default is %XUX$MINI.
  324            */
  325
  326           %LVL2 SO BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  327            /*K* SO - indicates that the SO option is specified on the
  328                 command line. The default is '0'B.
  329            */
  330
  331           %LVL2 SRCH BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  332            /*K* SRCH - indicates that a SRCH list is specified on the
  333                 command line.  If set, it indicates that the list of accounts
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    10   
  334                 specified may be found in the structure XUX$SRCH_LIST.  The
  335                 default is '1'B with .:LIBRARY and the user's current directory
  336                 specified in that order.  Note that this bit is never set
  337                 to NO unless the user specifies that XUX$LEGAL_OPTIONS.SRCH
  338                 is NO.
  339            */
  340
  341           %LVL2 UI BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  342            /*K* UI - indicates that the UI option is specified on the
  343                 command line or, if using the standard invocation syntax, a
  344                 filename is specified in the UI position on the command line.  The
  345                 default is '0'B.
  346            */
  347           %LVL2 OPTUI BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  348            /*K* OPTUI - indicates the the OPTUI option is specified
  349                 on the command line, meaning that if the UI file is present,
  350                 that it is to be used, otherwise no error message is
  351                 produced. If specified the UI bit is also set.  The default
  352                 is '0'B.
  353            */
  354
  355           %LVL2 UREF UBIN WORD ALIGNED %INIT (%XUX$NONE) %INIT_END,
  356            /*K* UREF - indicates that UREF is specified on the command
  357                 line.  Three equates are provided to test the value,
  358                 %XUX$NONE for NUREF, %XUX$FULL for UREF, and %XUX$MINI
  359                 for MUREF. The default is %XUX$NONE.
  360            */
  361
  362           %LVL2 WARN BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  363            /*K* WARN - indicates that the WARN option is specified on
  364                 the command line. The default is '0'B.
  365            */
  366
  367           %LVL2 XREF UBIN WORD ALIGNED %INIT (%XUX$NONE) %INIT_END,
  368            /*K* XREF - indicates that XREF is specified on the command
  369                 line.  Three equates are provided to test the value,
  370                 %XUX$NONE for NXREF, %XUX$FULL for XREF, and %XUX$MINI
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    11   
  371                 for MXREF. The default is %XUX$NONE.
  372            */
  373
  374           %LVL2 NSTD BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  375            /*K* NSTD - indicates that non-standard options are specified
  376                 on the command line. The default is '0'B.
  377            */
  378
  379           %LVL2 * (0:10) UBIN WORD ALIGNED %INIT (0*0) %INIT_END TERM
  380            /*B*  The above item reserves room for future expansion.
  381            */
  382
  383      %MEND;
  384
  385      %MACRO XUX$BC_UNIT( NAME=XUX$BC_UNIT,
  386                          STCLASS=STATIC,
  387                          LVL=1,
  388                          TERM=";");
  389
  390      %LSET LISTDIR = '0'B;
  391      %LSET LISTEXP = '1'B;
  392      %LSET LISTCOM = '0'B;
  393      %LSET LISTSUB = '1'B;
  394
  395      /*F*
  396           NAME: XUX$BC_UNIT Structure
  397                This macro defines a data item that contains the numbers of the
  398                BC units that are specified on the command line, if any.
  399                The item is an array from 0 to %XUX$MAX_BC_UNITS.  Note that
  400                this is one element more than the number needed.  It is defined
  401                this way for ease of access, so that the user may use an
  402                indexed loop through the structure that starts at 1 and ends at
  403                XUX$STD_OPTIONS.BC.
  404      */
  405
  406
  407      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ' );
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    12   
  408      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
  409           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
  410           (  SUBSTR(STR,0,3) = 'EXT') ;
  411              %LSET INIT = CHARTEXT( 'INIT' );
  412              %LSET INIT_END = CHARTEXT( '  ' );
  413           %ELSE;
  414              %LSET INIT = CHARTEXT( '/*' );
  415              %LSET INIT_END = CHARTEXT( '*/' );
  416           %ENDIF;
  417
  418      %LSET LVL2 = LVL + 1;
  419
  420      %IF LVL = 1;
  421        DCL 1 NAME(0:%XUX$MAX_BC_UNITS) UBIN HALF HALIGNED STCLASS %INIT (0*0) %INIT_END TERM
  422      %ELSE;
  423           LVL NAME(0:%XUX$MAX_BC_UNITS) UBIN HALF HALIGNED %INIT (0*0) %INIT_END TERM
  424      %ENDIF;
  425
  426           /*K* XUX$BC_UNIT - This array contains the numbers of the BC units
  427                that are specified on the command line.  These numbers are
  428                only meaningful if XUX$STD_OPTIONS.BC is greater than zero.
  429                The numbers in the array are sorted.
  430           */
  431
  432      %MEND;
  433
  434      %MACRO XUX$SRCH_LIST(  NAME=XUX$SRCH_LIST,
  435                             STCLASS=STATIC,
  436                             LVL=1,
  437                             FID_ONLY(YES='1'B,NO='0'B)='0'B,
  438                             ACCT_SIZE=8,
  439                             SRCH_ACCTS=%XUX$ACCT_MAX,
  440                             TERM=";");
  441
  442      %LSET LISTDIR = '0'B;
  443      %LSET LISTEXP = '1'B;
  444      %LSET LISTCOM = '0'B;
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    13   
  445      %LSET LISTSUB = '1'B;
  446
  447      /*F*
  448           NAME: XUX$SRCH_LIST Structure
  449                This macro defines a structure to contain the account names
  450                specified on the SRCH option.  The default values of .:LIBRARY and the
  451                user's current directory are always present, unless the SRCH option
  452                is made illegal by setting XUX$LEGAL_OPTIONS.SRCH to NO.
  453           .SPB
  454                This structure is an array of information about the account(s) that
  455                were specified on the SRCH option of the command line.  The current
  456                limit is ten account specifications.  Since two of those are used all
  457                the time for .:LIBRARY and the current directory account, eight
  458                are available for user specification.
  459
  460                An alternate use of the XUX$SRCH_LIST structure is to
  461                generate a structure for a single FID.
  462      */
  463
  464
  465      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ');
  466      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
  467           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
  468           (  SUBSTR(STR,0,3) = 'EXT') ;
  469              %LSET INIT = CHARTEXT( 'INIT' );
  470              %LSET INIT_END = CHARTEXT( '  ' );
  471           %ELSE;
  472              %LSET INIT = CHARTEXT( '/*' );
  473              %LSET INIT_END = CHARTEXT( '*/' );
  474           %ENDIF;
  475
  476      %LSET LVL2 = LVL + 1;
  477      %LSET LVL3 = LVL + 2;
  478
  479      %IF LVL = 1;
  480        DCL 1 NAME ALIGNED STCLASS,
  481      %ELSE;
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    14   
  482           LVL NAME ALIGNED,
  483      %ENDIF;
  484
  485      %IF NOT FID_ONLY;
  486
  487
  488           %LVL2 NUM UBIN WORD ALIGNED %INIT (%SRCH_ACCTS) %INIT_END,
  489           /*K* NUM - contains the number of accounts contained within
  490                     the SRCH structure.  This number can range from
  491                     two to the maximum number of possible accounts, currently
  492                     ten.
  493           */
  494
  495           %LVL2 RCVD UBIN WORD ALIGNED %INIT (0) %INIT_END,
  496           /*K* RCVD - contains the number of SRCH accounts that were actually
  497                       specified on the command line.  This may be less than NUM
  498                       if the current account and/or .:LIBRARY were specified in
  499                       the SRCH list.
  500           */
  501
  502
  503           %LVL2 ACCT_LIST (0:%(SRCH_ACCTS-1)) ALIGNED,
  504           /*K* ACCT_LIST (0:n) - is the list of account names (ACCT) and
  505                     possibly attributes (ASN, PASS, RES, SN, WSN)
  506                     that have been specified.  For example, the account
  507                     name is stored in XUX$SRCH_LIST.ACCT_LIST.ACCT(n).
  508                     The number of items in the list is specified by the
  509                     SRCH_ACCTS parameter which defaults to 10.
  510           */
  511      %ENDIF;
  512
  513      %IF FID_ONLY;
  514          /*K* FID_ONLY = {YES|NO}^^^^if set, specifies that a structure
  515                     containing only a single instance of FID information
  516                     (ACCT, ASN, PASS, RES, SN, WSN)
  517                     is generated.  For example, the account
  518                     name is stored in XUX$SRCH.ACCT.  If FID_ONLY = YES,
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    15   
  519                     the fields NUM and RCVD are not generated; the array
  520                     ACCT_LIST is also not generated.
  521          */
  522      %LSET LVL3 = LVL2;
  523      %ENDIF;
  524
  525              %LVL3 ACCT CHAR(ACCT_SIZE) %INIT (' '*0) %INIT_END,
  526              /*K* ACCT - is the account name.  The size of this
  527                   field is specified by the ACCT_SIZE parameter which
  528                   defaults to 8.
  529              */
  530
  531              %LVL3 PASS CHAR(8) %INIT (' '*0) %INIT_END,
  532              /*K* PASS - is the password that was specified, if any.
  533              */
  534
  535              %LVL3 SN CHAR(10) %INIT (' '*0) %INIT_END,
  536              /*K* SN - is the serial number of a tape.
  537              */
  538
  539              %LVL3 WSN CHAR(8) %INIT (' '*0) %INIT_END,
  540              /*K* WSN - is the Workstation Name specified.
  541              */
  542
  543              %LVL3 ASN UBIN BYTE %INIT (0*0) %INIT_END,
  544              /*K* ASN - specifies file organization (see M$OPEN in the
  545              Host Monitor Services Reference Manual, CE74).
  546              */
  547
  548              %LVL3 RES CHAR(4) %INIT (' '*0) %INIT_END,
  549              /*K* RES - is the RES of the file (see M$OPEN).
  550              */
  551              %LVL3 NAME CHAR(32) %INIT (' '*0) %INIT_END TERM
  552              /*K*  NAME - is the name of the file (see M$OPEN).
  553              */
  554
  555      %MEND;
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    16   
  556      %MACRO XUX$PARAM_NO_PARSE(   NAME=XUX$PARAM_NO_PARSE,
  557                                   STCLASS=STATIC,
  558                                   LVL=1,
  559                                   TERM=";",
  560                                   BUFFER=NIL,
  561                                   DISP_ONLY(YES='1'B,NO='0'B)='1'B);
  562
  563
  564      %LSET LISTDIR = '0'B;
  565      %LSET LISTEXP = '1'B;
  566      %LSET LISTCOM = '0'B;
  567      %LSET LISTSUB = '1'B;
  568
  569      /*F*
  570           NAME: XUX$PARAM_NO_PARSE Structure
  571                This macro defines the data structure to be used when no parsing is
  572                to be done to the command line.  This is used when the actual text
  573                of the command line is needed.
  574                .SPB
  575                The data structure defined is passed as a parameter to
  576                XUX$GETLINE which returns the command line text.  An indication
  577                is provided whether or not the entire command is present,
  578                as it may be continued.
  579      */
  580      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ' );
  581      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
  582           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
  583           (  SUBSTR(STR,0,3) = 'EXT') ;
  584              %LSET INIT = CHARTEXT( 'INIT' );
  585              %LSET INIT_END = CHARTEXT( '  ' );
  586           %ELSE;
  587              %LSET INIT = CHARTEXT( '/*' );
  588              %LSET INIT_END = CHARTEXT( '*/' );
  589           %ENDIF;
  590
  591      %LSET LVL2 = LVL + 1;
  592
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    17   
  593      %IF LVL = 1;
  594        DCL 1 NAME ALIGNED STCLASS,
  595      %ELSE;
  596           LVL NAME ALIGNED,
  597      %ENDIF;
  598
  599              %LVL2 BUFFER_ VECTOR %INIT (VECTOR(BUFFER)) %INIT_END,
  600
  601               /*K* BUFFER = VARIABLE^^^^is a vector to a user provided buffer.  The buffer
  602                         contains the command text upon return from the call.
  603                         VECTOR(BUFFER) is used to initialize BUFFER_.
  604                         A buffer of 256 characters is recommended.
  605               */
  606
  607              %LVL2 CMD_LEN SBIN HALF %INIT (0) %INIT_END,
  608
  609               /*K* CMD_LEN - contains the length of the text returned in the
  610                         buffer framed by BUFFER_.
  611               */
  612
  613              %VLP_ERRCODE(FPTN=ERROR_CODE,LVL=%LVL2,LAST=",",STCLASS=STCLASS);
  614               /*K* ERROR_CODE - contains an error code if the call to
  615                         XUX$GETLINE ALTRETURNed.  The error code is in the
  616                         standard CP-6 error code format generated by
  617                         VLP_ERROR.  The error message corresponding
  618                         to this code may be found in :XUERRMSG.:SYS.
  619               */
  620
  621              %LVL2 CMD_COMPLETE BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  622               /*K* CMD_COMPLETE - when set, this bit indicates that there is no more
  623                         command line left to return.  Once this bit has been
  624                         set by XUX$GETLINE, it is illegal to call XUX$GETLINE
  625                         again.  Also, a call to XUX$CLEANUP should be performed
  626                         before the end of the program.
  627               */
  628
  629              %LVL2 DISP_ONLY# BIT(1) ALIGNED %INIT (DISP_ONLY) %INIT_END,
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    18   
  630               /*K* DISP_ONLY = {YES|NO}^^^^if set, indicates that only the
  631                         portion of the command line that starts at B$JIT.CCDISP
  632                         is returned.  If DISP_ONLY = NO, then the
  633                         entire command line is returned to the user.
  634                         This item may be accessed as DISP_ONLY#.  The
  635                         default is YES.
  636               */
  637
  638              %LVL2 * (0:3) UBIN WORD ALIGNED %INIT (0*0) %INIT_END TERM
  639               /*B* Reserved for future use */
  640      %MEND;
  641      %MACRO XUX$PARAM (  NAME=XUX$PARAM,
  642                          STCLASS=STATIC,
  643                          LVL=1,
  644                          TERM=";",
  645                          LEGAL_OPTIONS=XUX$LEGAL_OPTIONS,
  646                          STD_OPTIONS=XUX$STD_OPTIONS,
  647                          BC_UNIT=XUX$BC_UNIT,
  648                          SRCH_LIST=XUX$SRCH_LIST,
  649                          DCB1=NIL,
  650                          DCB2=NIL,
  651                          USER_NODES=NIL,
  652                          USER_ROUTINE=NIL);
  653
  654      %LSET LISTDIR = '0'B;
  655      %LSET LISTEXP = '1'B;
  656      %LSET LISTCOM = '0'B;
  657      %LSET LISTSUB = '1'B;
  658
  659               /*F*
  660                    NAME: XUX$PARAM Structure
  661                       This macro generates a data structure that is to be passed
  662                       to the XUX$COMMON_OPTIONS service.
  663                       The data structure generated is largely a block of pointers
  664                       to other data structures that are used by XUX$COMMON_OPTIONS.
  665               */
  666      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ' );
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    19   
  667      %IF  (  SUBSTR(STR,0,6) = 'STATIC' )  OR
  668           (  SUBSTR(STR,0,8) = 'CONSTANT') OR
  669           (  SUBSTR(STR,0,3) = 'EXT') ;
  670              %LSET INIT = CHARTEXT( 'INIT' );
  671              %LSET INIT_END = CHARTEXT( '  ' );
  672           %ELSE;
  673              %LSET INIT = CHARTEXT( '/*' );
  674              %LSET INIT_END = CHARTEXT( '*/' );
  675           %ENDIF;
  676
  677      %LSET LVL2 = LVL + 1;
  678
  679      %IF LVL = 1;
  680        DCL 1 NAME ALIGNED STCLASS,
  681      %ELSE;
  682           LVL NAME ALIGNED,
  683      %ENDIF;
  684
  685              %LVL2 LEGAL_OPTIONS$ PTR %INIT (ADDR(LEGAL_OPTIONS)) %INIT_END,
  686               /*K* LEGAL_OPTIONS = VARIABLE^^^^is a pointer to the XUX$LEGAL_OPTIONS structure.
  687                       ADDR(XUX$LEGAL_OPTIONS) is used to initialize LEGAL_OPTIONS$.
  688               */
  689
  690              %LVL2 STD_OPTIONS$ PTR %INIT (ADDR(STD_OPTIONS)) %INIT_END,
  691               /*K* STD_OPTIONS = VARIABLE^^^^is a pointer to the XUX$STD_OPTIONS structure.
  692                       ADDR(XUX$STD_OPTIONS) is used to initialize STD_OPTIONS$.
  693               */
  694
  695              %LVL2 BC_UNIT$ PTR %INIT (ADDR(BC_UNIT)) %INIT_END,
  696               /*K* BC_UNIT = VARIABLE^^^^is a pointer to the XUX$BC_UNIT structure.
  697                       ADDR(XUX$BC_UNIT) is used to initialize BC_UNIT$.
  698               */
  699
  700              %LVL2 SRCH_LIST$ PTR %INIT (ADDR(SRCH_LIST)) %INIT_END,
  701               /*K* SRCH_LIST = VARIABLE^^^^is a pointer to the XUX$SRCH_LIST structure.
  702                       ADDR(XUX$SRCH_LIST) is used to initialize SRCH_LIST$.
  703               */
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    20   
  704
  705              %LVL2 USER_ROUTINE$$ EPTR %INIT (ENTADDR(USER_ROUTINE)) %INIT_END,
  706               /*K* USER_ROUTINE = ENTRY^^^^points to a user-supplied routine that is to
  707                       be called when XUX$COMMON_OPTIONS encounters any non-standard
  708                       options while processing the command line.  ENTADDR(NIL)
  709                       is used to initialize USER_ROUTINE$$ if no user
  710                       routine is specified.  This routine should have two
  711                       parameters, a pointer to the head node of the
  712                       non-standard option that was found, and a BIT(1)
  713                       variable.  The BIT(1) variable should be set to '1'B
  714                       if the user's routine desires further processing by
  715                       XUX$COMMON_OPTIONS to cease and ALTRETurn to occur
  716                       immediately, or '0'B if processing is to continue.
  717                       A user routine must be present if any
  718                       non-standard nodes are used.
  719               */
  720
  721              %LVL2 USER_NODES$ PTR %INIT (ADDR(USER_NODES)) %INIT_END,
  722               /*K* USER_NODES$ = VARIABLE^^^^is a pointer to the user's non-standard
  723                    nodes (if any).  The default (ADDR(NIL)) may be used if
  724                    no non-standard nodes are used.
  725               */
  726
  727              %VLP_ERRCODE(FPTN=ERROR_CODE,LVL=%LVL2,LAST=",",STCLASS=STCLASS);
  728               /*K* ERROR_CODE - contains an error code when an error
  729                       occured that has not already been diagnosed.
  730                       The error code is in the standard CP-6 format that is
  731                       generated by VLP_ERRCODE.  The error message
  732                       corresponding to this code may be found in
  733                       :XUERRMSG.:SYS
  734               */
  735
  736              %LVL2 ERROR# BIT(1) ALIGNED %INIT ('0'B) %INIT_END,
  737               /*K* ERROR# - is a BIT(1) variable that is set to '1'B
  738                       when a fatal error has occured.  This happens if
  739                       no DCBs are specified for error message handling,
  740                       an internal (non-user) error occured, or a syntax
15:25 JUL 28 '97 XUX$INTERFACE_M.:E05SI                                    21   
  741                       error was encountered.
  742               */
  743
  744              %LVL2 DCB1# UBIN HALF HALIGNED %INIT (DCBNUM(DCB1)) %INIT_END,
  745              /*K* DCB1 = DCBNAME^^^^is a UBIN HALF variable that contains the
  746                       DCBNUM of the first DCB through which any error messages
  747                       are written by XUX$COMMON_OPTIONS.  If no DCB is
  748                       specified for either DCB1 or DCB2, then any errors
  749                       cause XUX$COMMON_OPTIONS to ALTRETurn with
  750                       the error code in XUX$PARAM.ERROR_CODE.
  751                       This field can be accessed as DCB1#.
  752              */
  753
  754              %LVL2 DCB2# UBIN HALF HALIGNED %INIT (DCBNUM(DCB2)) %INIT_END,
  755              /*K* DCB2 = DCBNAME^^^^is the second DCB through which error messages
  756                       are written. See DCB1 for more information.
  757                       This field can be accessed as DCB2#.
  758              */
  759
  760              %LVL2 * (0:7) UBIN WORD ALIGNED %INIT (0*0) %INIT_END TERM
  761               /*B* Reserved for future expansion.
  762               */
  763      %MEND;
  764
  765      %MACRO XUX$INFO(NAME=XUX$INFO,STCLASS="BASED(XUX$MEM$)");
  766      /* This macro is for internal use only. It is not designed for use
  767         by any calling programs.
  768      */
  769      DCL 1 NAME ALIGNED STCLASS,
  770           2  PARSE_BUF$ PTR,   /* Pointer to parse buffer */
  771           2  REC_INDEX$ PTR,   /* Pointer to record index array */
  772           2  WORK$      PTR,   /* Pointer to parse work area */
  773           2  RECNO      UBIN,  /* Current record number */
  774           2  BUF_SIZE   UBIN,  /* Size of parse buffer */
  775           %XUX$PARAM(NAME=XUX,STCLASS=,LVL=2,TERM=";");
  776      %MEND;

