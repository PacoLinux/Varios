/*M*   MTTEST_SIN1 Parse node for MTTEST. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*IPC=YES,MOC=YES,EMOC=YES,CCC=YES,CCE=YES,MCR=YES,MER=YES,
DCI=4,CTI=0,STI=2,IAD=1*/
/*P*   NAME: MT$NODES
       PURPOSE: Convert human ideas to machine directions
*/
%INCLUDE MTTEST_C61;
%INCLUDE MTTEST_C62;
 
        MTTEST_COMMAND(D) = (END_ | ;
        NULL_     |  ;
        QUIT_     |  ;
        WRITE_    |  ;
        READ_     |  ;
        REW_      |  ;
        REM_      |  ;
        MOUNT_    |  ;
        TEST_     |  ;
  EDIT_     |  ;
        HELP_CMD  |  ;
        MORE_CMD  |  ;
        ALL_CMD   )
 
 EDIT_(%A_EDIT) = 'ED/IT'  TAPEOP_ [ ('OVER'|'ON'|'TO') TAPEOP_ ]
    TAPEOP_(%B_TAPEOP) = MT_E [ DENSITY_E ]
      DENSITY_E(%B_DENSITY) = '(' 'DE/NSITY' '=' { 800_E|1600_E|6250_E} ')'
      MT_E(%B_TAPE) = ('LT#'|'MT#'|'FT#'|'CT#')-.ALPHA+'1234567890-_*:$'
        800_E(%D_800) = '800/BPI'
        1600_E(%D_1600) = '1600/BPI'
        6250_E(%D_6250) = '6250/BPI'
 
                                        /* %EQU FLC_END = 1;     end command  */
        END_(%FLC_END) = 'E/ND' .END
        NULL_(%FLC_NULL) = .END
                                        /* %EQU FLC_QUIT = 2;    quit command */
        QUIT_(%FLC_QUIT) = 'Q/UIT' .END
                                   /* %EQU FLC_WRITE = 3;      write tape     */
        WRITE_(%FLC_WRITE) = 'W/RITE' [ .B MT_ ] [ OUTPUT_OPTIONS ] .END
                                        /* %EQU FLC_READ = 4;    read tape    */
        READ_(%FLC_READ) = (R_D|R_EAD) [ .B MT_ ] [ INPUT_OPTIONS ]
        R_EAD = 'REA/D'
        R_D = 'RD'
                         /* %EQU FLC_TEST = 5;    write tape then read tape   */
        TEST_(%FLC_TEST) = 'T/EST' [ .B MT_ ] [ OUTPUT_OPTIONS ] .END
        REW_(%FLC_REW) = 'REW/IND' [ .B MT_ ]
        REM_(%FLC_REM) = 'REM/OVE' [ .B MT_ ]
        MOUNT_(%FLC_MOUNT) = 'M/OUNT' .B MT_ [ INPUT_OPTIONS ]
 
        HELP_CMD(%FLC_HELP) = 'H/ELP' .ASYM
 
        MORE_CMD(%FLC_HELP_MORE) = '?' .END
 
        ALL_CMD(%FLC_HELP_ALL) = '??' .END
 
                                        /*                                    */
        OUTPUT_OPTIONS =   '(' OUT_SPECS ')'
 
        OUT_SPECS = <',' , OUT_KEYWORDS >
        OUT_KEYWORDS = { DENSITY_ | BLOCK_ | LOG_ | NREC_ | STOP_ |;
        PATTERN_ | REPS_ }
        INPUT_OPTIONS =   '(' IN_SPECS ')'
        IN_SPECS = <',' , IN_KEYWORDS>
        IN_KEYWORDS = {  DENSITY_ | LOG_ | NREC_ | STOP_ | REPS_ }
 
        MT_(%FLO_TAPE) = {'LT#'|'MT#'|'FT#'|'CT#'}-.ALPHA+'1234567890-_*:$'
 
          /* %EQU FLO_REPS = 5;         how many times from start to stop     */
        REPS_(%FLO_REPS) = 'R/EPETITIONS' '=' .DEC4
                              /* %EQU FLO_BLOCK = 27;     max tape block size */
        BLOCK_(%FLO_BLOCK) = 'B/LOCK' '=' BLOCK_KEYWORDS
        BLOCK_KEYWORDS =  { BYTE_ | KWORD_ }
        BYTE_(%FLS_BYTE) =  .DEC4 'B/YTES'
        KWORD_(%FLS_KWORD) =  .DEC2 'K/WORDS'
 
        STOP_(%FLO_STOP) = 'STOP' '=' STOP_KEY
        STOP_KEY = { ERR_ | RETRY_ }
        ERR_(%FLS_ERR) = 'ERR/OR'
        RETRY_(%FLS_RETRY) = 'R/ETRY'
 
        LOG_(%FLO_LOG) = 'LOG' '=' LOG_KEY
        LOG_KEY = { NO_ | RETRY_ }
        NO_(%FLS_NO) = 'NO'
 
          /* %EQU FLO_NREC = 7;         how many records that user want read  */
        NREC_(%FLO_NREC) = 'N/RECS' '=' .DEC9
 
                    /* %EQU FLO_DENSITY = 4;      which recording density     */
        DENSITY_(%FLO_DENSITY) = 'D/ENSITY' '=' DEN_KEYWORDS
        DEN_KEYWORDS = { 800_ | 1600_ | 6250_ }
                                        /* %EQU FLO_800 = 2;                  */
        800_(%FLS_800) = '800/BPI'
                                        /* %EQU FLS_1600 = 3;                 */
        1600_(%FLS_1600) = '1600/BPI'
                                        /* %EQU FLS_6250 = 4;                 */
        6250_(%FLS_6250) = '6250/BPI'
 
 
                         /* %EQU FLO_PATTERN = 3;      which patern to write  */
        PATTERN_(%FLO_PATTERN) = 'P/ATTERN' '=' PAT_KEYWORDS
        PAT_KEYWORDS = { SEQUEN_ | ;
        ONE_ | ZERO_ | ODD_ | EVEN_ | CHECKER_ }
                                   /* %EQU FLO_ONE = 2;    '777777777777'o    */
        ONE_(%FLS_ONE) = 'ON/ES'
                                   /* %EQU FLS_ZERO = 3;      '000000000000'o */
        ZERO_(%FLS_ZERO) = 'Z/ERO'
                                   /* %EQU FLS_EVEN = 4;      '252525252525'o */
        EVEN_(%FLS_EVEN) = 'E/VEN'
                                   /* %EQU FLS_ODD = 5;       '525252525252'o */
        ODD_(%FLS_ODD) = 'OD/D'
                              /* %EQU FLS_CHECKER = 6;      '524526522532'o   */
        CHECKER_(%FLS_CHECKER) = 'C/HECKERBOARD'
                                        /* %EQU FLS_SEQ = 7;       2,3,4,5,6  */
        SEQUEN_(%FLS_SEQ) = 'S/EQUENTIAL'
