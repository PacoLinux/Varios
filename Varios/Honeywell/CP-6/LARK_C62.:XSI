/*M* LARK_C62 Macros for all LARK routines   */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*P*
   NAME:          LARK_ENTRIES_M
   PURPOSE:       To contain the entry macros for all LARK routines.
*/
 
%MACRO LARK_ABNORMAL_LARKETTE_MESSAGE ;
DCL            LARK_ABNORMAL_LARKETTE_MESSAGE   ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_ACTIVATE_CMD ;
DCL            LARK_ACTIVATE_CMD           ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_BREAK_HANDLER ;
DCL            LARK_BREAK_HANDLER          ENTRY ASYNC ;
%MEND ;
 
%MACRO LARK_CGINFO_WITH_DATASEG ;
DCL            LARK_CGINFO_WITH_DATASEG    ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_CHECK_AUEVENT ;
DCL            LARK_CHECK_AUEVENT          ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_CHECK_NWIO ;
DCL            LARK_CHECK_NWIO             ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_CHECK_NWIO_ERRORS ;
DCL            LARK_CHECK_NWIO_ERRORS      ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_CLOSE_CMD ;
DCL            LARK_CLOSE_CMD              ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_CLOSE_TEMPSTATION ;
DCL            LARK_CLOSE_TEMPSTATION      ENTRY ALTRET ;
%MEND ;
 
%MACRO LARK_CONTROL_NWIO ;
DCL            LARK_CONTROL_NWIO           ENTRY ASYNC ;
%MEND ;
 
%MACRO LARK_CREATE_CMD ;
DCL            LARK_CREATE_CMD             ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_DEACTIVATE_CMD ;
DCL            LARK_DEACTIVATE_CMD         ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_DEFINESTA_CMD ;
DCL            LARK_DEFINESTA_CMD          ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_DELETE_CMD ;
DCL            LARK_DELETE_CMD             ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_DISPLAY_CMD ;
DCL            LARK_DISPLAY_CMD            ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_DISPLAY_STATUS ;
DCL            LARK_DISPLAY_STATUS         ENTRY ;
%MEND ;
 
%MACRO LARK_FIND_SLOT ;
DCL            LARK_FIND_SLOT              ENTRY ( 2 ) ALTRET ;
%MEND ;
 
%MACRO LARK_FREECMD_POST_PROCESSOR ;
DCL            LARK_FREECMD_POST_PROCESSOR ENTRY ;
%MEND ;
 
%MACRO LARK_FREECMD_PRE_PROCESSOR ;
DCL            LARK_FREECMD_PRE_PROCESSOR  ENTRY ;
%MEND ;
 
%MACRO LARK_GENERICSTA_CMD ;
DCL            LARK_GENERICSTA_CMD         ENTRY ( 3 ) ALTRET ;
%MEND ;
 
%MACRO LARK_GENERICSTA_NOPARSE_CMD ;
DCL            LARK_GENERICSTA_NOPARSE_CMD ENTRY ( 3 ) ALTRET ;
%MEND ;
 
%MACRO LARK_GET_DATA_SEGMENT ;
DCL            LARK_GET_DATA_SEGMENT       ENTRY ( 2 ) ALTRET ;
%MEND ;
 
%MACRO LARK_GET_SLOT ;
DCL            LARK_GET_SLOT               ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_INTERNAL_ERROR ;
DCL            LARK_INTERNAL_ERROR         ENTRY ;
%MEND ;
 
%MACRO LARK_MODIFY_CMD ;
DCL            LARK_MODIFY_CMD             ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_OCTALSTRING_BITSTRING ;
DCL            LARK_OCTALSTRING_BITSTRING  ENTRY ( 4 ) ;
%MEND ;
 
%MACRO LARK_OPEN_CMD ;
DCL            LARK_OPEN_CMD               ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_OPEN_TEMPSTATION ;
DCL            LARK_OPEN_TEMPSTATION       ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_PAUSE_CMD ;
DCL            LARK_PAUSE_CMD              ENTRY ( 1 ) ALTRET ;
%MEND;
 
%MACRO LARK_PROCESS_FID ;
DCL            LARK_PROCESS_FID            ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_READ_MESSAGE ;
DCL            LARK_READ_MESSAGE           ENTRY ( 3 ) ALTRET ;
%MEND ;
 
%MACRO LARK_RELEASE_DATA_SEGMENT ;
DCL            LARK_RELEASE_DATA_SEGMENT   ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_REPORT_CMD_ERROR ;
DCL            LARK_REPORT_CMD_ERROR       ENTRY ( 2 ) ;
%MEND ;
 
%MACRO LARK_REPORT_NWIO_ERROR ;
DCL            LARK_REPORT_NWIO_ERROR      ENTRY ( 1 ) ;
%MEND ;
 
%MACRO LARK_REPORT_PMME_ERROR ;
DCL            LARK_REPORT_PMME_ERROR      ENTRY ( 2 ) ;
%MEND ;
 
%MACRO LARK_REPORT_SUBCMD_ERROR ;
DCL            LARK_REPORT_SUBCMD_ERROR    ENTRY ( 2 ) ;
%MEND ;
 
%MACRO LARK_SELECT_CMD ;
DCL            LARK_SELECT_CMD             ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_SETPROFILE_CMD ;
DCL            LARK_SETPROFILE_CMD         ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_SIZE_DATA_SEGMENT ;
DCL            LARK_SIZE_DATA_SEGMENT      ENTRY ( 2 ) ALTRET ;
%MEND ;
 
%MACRO LARK_STARTFPRG_CMD ;
DCL            LARK_STARTFPRG_CMD          ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_STATUSOFSTA_CMD ;
DCL            LARK_STATUSOFSTA_CMD        ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_STOPFPRG_CMD ;
DCL            LARK_STOPFPRG_CMD           ENTRY ( 1 ) ALTRET ;
%MEND ;
 
%MACRO LARK_WRITE_MESSAGE ;
DCL            LARK_WRITE_MESSAGE          ENTRY ( 3 ) ALTRET ;
%MEND ;
 
%EJECT ;
/*P*
   NAME:          LARK_MACRO_C
   PURPOSE:       To contain macros for structure definitions
*/
 
%MACRO LARK_GLOBALS
          ( STOCLASS       = SYMREF ) ;
 
%LSET LISTDIR='0'B;
%LSET LISTEXP='1'B;
%LSET LISTCOM='0'B;
%LSET LISTSUB='1'B;
 
%EQU        CONTROL__EVENT    = 1001 ;       /* ALSO EQU'ED IN LARKETTE_C61 */
%EQU        CONTROL__MSGTYP   = 'CONTROL ' ; /* ALSO EQU'ED IN LARKETTE_C61 */
%EQU        INITIAL_LIST_DATASEG_SIZE  =  2048 ;
 
%FPT_CGINFO
          ( FPTN           = FPT$CGINFO,
            STCLASS        = STOCLASS ) ;
 
%FPT_CHECK
          ( FPTN           = FPT$CHECK_NWIO,
            STCLASS        = STOCLASS,
            DCB            = M$CTRLCG ) ;
 
 
%FPT_READ
          ( FPTN           = FPT$READ_CONTROL,
            STCLASS        = STOCLASS,
            DCB            = M$CTRLCG,
            EVENT          = %CONTROL__EVENT,
            WAIT           = NO ) ;
 
%FPT_WRITE
          ( FPTN           = FPT$WRITE_CONTROL,
            STCLASS        = STOCLASS,
            DCB            = M$CTRLCG ) ;
 
%VLP_ACCT
          ( FPTN           = VLP$ACCT_CG,
            STCLASS        = STOCLASS ) ;
 
%VLP_ERRCODE
          ( FPTN           = VLP$ERRCODE_LARK,
            STCLASS        = STOCLASS,
            FCG            = "LA",
            MID            = "R" ) ;
 
%VLP_NAME
          ( FPTN           = VLP$NAME_CG,
            STCLASS        = STOCLASS ) ;
 
%VLP_NAME
          ( FPTN           = VLP$NAME_RU,
            STCLASS        = STOCLASS,
            LEN            = 40 ) ;
 
%VLP_PASS
          ( FPTN           = VLP$PASS_CG,
            STCLASS        = STOCLASS ) ;
 
%VLP_SETSTA
          ( FPTN           = VLP$SETSTA_LARK,
            STCLASS        = STOCLASS,
            MYSTATION      = '$l$a$r$k' ) ;
 
%VLP_SETSTA
          ( FPTN           = VLP$SETSTA_CONTROL,
            STCLASS        = STOCLASS,
            MYSTATION      = ' ' ) ;
 
%VLP_SN
          ( FPTN           = VLP$SN_CG,
            STCLASS        = STOCLASS ) ;
 
%VLP_STATION
          ( FPTN           = VLP$STATION_CONTROL,
            STCLASS        = STOCLASS,
            DIRONLY        = YES,
            MSGTYP         = %CONTROL__MSGTYP ) ;
 
%VLP_VECTOR
          ( FPTN           = VLP$VECTOR_CGINFO_DATASEG,
            STCLASS        = STOCLASS ) ;
 
%VLP_WSN
          ( FPTN           = VLP$WSN_CG,
            STCLASS        = STOCLASS ) ;
 
%XUG_GETCMD
          ( NAME           = XUG$GETCMD_,
            STCLASS        = STOCLASS,
            DCB_PARAM      = M$LO,
            DCB2_PARAM     = M$DO,
            NODES          = LARK_CMDS,
            OUTDCB         = M$LO,
            PROMPT         = LARK_PROMPT ) ;
 
%XUG_GETCMD
          ( NAME           = XUG$GETCMD_SUB,
            STCLASS        = STOCLASS,
            DCB_PARAM      = M$LO,
            DCB2_PARAM     = M$DO,
            OUTDCB         = M$LO ) ;
 
DCL         AU_FORCE          BIT ( 1 ) STOCLASS ;
DCL      1  CONTROL_BUFFER    STOCLASS,
            2  CODE           SBIN WORD,
            2  EVENT          REDEF CODE UBIN WORD,
            2  STATION        CHAR ( 8 ),
            2  PMME,
               3  ERR#        BIT ( 36 ),
               3  *           CHAR ( 12 ),
            2  NWIO           REDEF PMME,
               3  COMPLETE#   BIT ( 1 ) ALIGNED,
               3  EVID#       UBIN WORD,
               3  ERR#        BIT ( 36 ),
               3  TYC#        BIT ( 36 ),
            2  COMMAND        REDEF PMME,
               3  ERR#        SBIN WORD,
               3  *           CHAR ( 12 ) ;
DCL      1  CONTROL_NWIO      STOCLASS,
            2  COMPLETE       BIT ( 1 ) ALIGNED,
            2  EVID           UBIN WORD,
            %VLP_ERRCODE ( FPTN = ERR, STCLASS = STOCLASS, LVL = 2, LAST = "," ) ;
            2  TYC            BIT ( 36 ),
            %VLP_STATION ( FPTN = CGPARM, STCLASS = STOCLASS, LVL = 2, LAST = ";" ) ;
DCL         CONTROL_STATIONX  UBIN STOCLASS ;
DCL         DEBUG             BIT ( 1 ) STOCLASS ;
DCL         FUNCTION$         PTR STOCLASS ;
DCL         M$CG              DCB ;
DCL         M$CG$             PTR STOCLASS ;
DCL         M$CG_DCBNUM       UBIN ( 18 ) HALIGNED STOCLASS ;
DCL         M$DO              DCB ;
DCL         M$LO              DCB ;
DCL         M$CTRLCG          DCB ;
DCL         M$CTRLCG$         PTR STOCLASS ;
DCL         M$CTRLCG_DCBNUM   UBIN ( 18 ) HALIGNED STOCLASS ;
DCL         NAMELIST$         PTR STOCLASS ;
DCL         NAMELIST_CT       SBIN STOCLASS ;
DCL         RPT_AU_EVNT(0:30 /* CG_MAX# */) BIT(1) UNAL STOCLASS;
DCL         STATUS$           PTR STOCLASS ;
DCL         CONTROL_READ_OUT  BIT ( 1 ) STOCLASS ;
DCL         FPRGLIST$         PTR STOCLASS ;
DCL         FPRGLIST_CT       SBIN STOCLASS ;
 
DCL         LARK_CMDS         SBIN SYMREF ;
DCL         LARK_PROMPT       CONSTANT CHAR ( 0 ) INIT ( '$' ) ;
%MEND ;
 
%MACRO LARK_PARSEBLKS ;
 
%LSET LISTDIR='0'B;
%LSET LISTEXP='1'B;
%LSET LISTCOM='0'B;
%LSET LISTSUB='1'B;
 
%PARSE$OUT
       ( NAME                 = OUT$BLK,
         STCLASS              = BASED ) ;
 
%PARSE$SYM
       ( NAME                 = OUT$SYM,
         STCLASS              = BASED ) ;
 
%MEND ;
 
%MACRO LARK_CGINFO ;
 
%LSET LISTDIR='0'B;
%LSET LISTEXP='1'B;
%LSET LISTCOM='0'B;
%LSET LISTSUB='1'B;
 
%VLP_CGCP
       ( FPTN                    = VLP_CGCP_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_CGQL
       ( FPTN                    = VLP_CGQL_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_CGSTAL
       ( FPTN                    = VLP_CGSTAL_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_CGTYPL
       ( FPTN                    = VLP_CGTYPL_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_JRNLFID
       ( FPTN                    = VLP_JRNLFID_CGINFO,
         STCLASS                 = BASED,
         LEN                     = 60 ) ;
 
%VLP_SETSTA
       ( FPTN                    = VLP_SETSTA_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_STATION
       ( FPTN                    = VLP_HOLDSTA_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLP_STATION
       ( FPTN                    = VLP_JRNLSTA_CGINFO,
         STCLASS                 = BASED ) ;
 
%VLR_CGSTATS
       ( FPTN                    = VLR_STATS_CGINFO,
         STCLASS                 = BASED ) ;
 
%MEND ;
 
/*P*
   NAME:          LARK_NAMELIST
   PURPOSE:       To contain the defined function stations and corresponding
                  control stations currently in use by LARK.
*/
 
%MACRO LARK_NAMELIST ;
DCL      1  NAMELIST          ( 0:0 ) BASED ( NAMELIST$ ),
            2  FUNCTION_STA#  CHAR ( 8 ),
            2  CONTROL_STA#   CHAR ( 8 ),
            2  GHOST_SYSID#   UBIN ( 18 ) HALIGNED ;
%MEND ;
 
 
 
/*P*
   NAME:          LARK_FPRGLIST
   PURPOSE:       To contain information about fprgs that have been started
                  by lark, including the fprg name, dcb number, station name,
                  and a flag indicating if the fprg was associated with a
                  device already logged on to the system
*/
 
 
%MACRO LARK_FPRGLIST ;
%EQU        MAX_FPRGS           = 64 ;
%EQU        MAX_FPRGS_MINUS_ONE = 63 ;
 
DCL      1 FPRGLIST            (0:%MAX_FPRGS_MINUS_ONE) BASED ( FPRGLIST$ ),
            2  FID#            CHAR ( 31 ),
            2  STATION#        CHAR (  8 ),
            2  DEVPRES#        BIT  (  1 ),
            2  IN_USE#         BIT  (  1 ),
            2  ACTIVE#         BIT  (  1 ),
            2  *               BIT  ( 24 ),
            2  DCB#            UBIN ( 18 );
%MEND ;
