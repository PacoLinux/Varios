

09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /*
    7           Z8H_SUPPORT
    8
    9          This include file contains definitions of macros
   10      used by phase 4. It also contains some EQUs for common
   11      constants.
   12      */
   13      %MACRO LOP_ROP_TO(RESULT=OPND,OP=PC.OPND1,TRIAD=PILL);
   14
   15           DO CASE(OP);
   16
   17             CASE(0);
   18               RESULT = TRIAD;
   19             CASE(%LOP);
   20               RESULT = TRIAD -> ILL.LOP;
   21             CASE(%ROP);
   22               RESULT = TRIAD -> ILL.ROP;
   23             CASE(%TO);
   24               RESULT = TRIAD -> ILL.TO_;
   25             CASE(ELSE);
   26               RESULT = PCOM_.OPND(OP);
   27           END /* Case */;
   28
   29      %MEND;
   30
   31
   32
   33      %MACRO SWITCH_RAT_INFO(@FROM=,@TO=);
   34
   35           DO;
   36             CALL Z8HG$FREE_REGISTER(BINBIT(@TO,36));
   37             I = @FROM;
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  2    
   38             IF I ~= %UNEVAL_T THEN
   39               DO;
   40                 RAT(@TO) = RAT(I);
   41
   42                 P$ = RAT.PRIMES(I);
   43
   44                 DO UNTIL(P$ = ADDR(NIL));
   45                   P$ -> PRIME.TRIAD -> ETT.STATE = @TO;
   46                   P$ = P$ -> PRIME.NEXT;
   47                 END;
   48
   49                 RAT.PRIMES(I) = ADDR(NIL);
   50    *            RAT.AWAITING(I) = 0;
   51                 RAT.COUNT(I) = 0;
   52                 RAT.B(I) = '0'O;
   53
   54               END;
   55           END;
   56
   57      %MEND;
   58
   59
   60
   61      %MACRO STORAGE_CHECK(THE_STATE=,TRIAD=);
   62
   63           IF  PILL -> ETT.ID ~= %SSOP  /*#28637*/
   64           AND PILL -> ETT.ID ~= %SIZ
   65           AND PILL -> ETT.ID ~= %REFMOD THEN
   66             IF THE_STATE = 2 /*/ XR /*/ THEN
   67               IF TRIAD -> ETT.REF$ ~= ADDR(NIL) THEN
   68                 DO;
   69                   CALL Z8HG$FREE_REGISTER(BINBIT(TRIAD -> ETT.STATE,36));
   70                   THE_STATE = 3; /*/ ST /*/
   71                 END;
   72
   73      %MEND;
   74
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  3    
   75
   76
   77      %MACRO ABSOLUTE_SA(TRIAD=, RTN=);
   78
   79           DO;
   80             P$ = TRIAD -> ETT.REF$;
   81
   82             %IF USING_HALF_WORD_RELOCATION;
   83               /* REF.SA  is THE absolute SA */
   84               RTN = P$ -> REF.SA;
   85             %ELSE;
   86               RTN = P$ -> REF.SA + P$ -> REF.ST$ -> ST.SA / %#16K * %#16K;
   87             %ENDIF;
   88           END;
   89
   90      %MEND;
   91
   92
   93
   94      %MACRO IMPLIED_REF(REF$=REF$, CNT=);
   95
   96      DO;
   97        IF REF$ -> REF.SSOP_TAG$ ~= ADDR(NIL) THEN
   98          CALL Z8HU$INCCNT(REF$ -> REF.SSOP_TAG$, BINBIT(CNT, 36));
   99
  100        IF REF$ -> REF.SIZ_TAG$ ~= ADDR(NIL) THEN
  101          CALL Z8HU$INCCNT(REF$ -> REF.SIZ_TAG$, BINBIT(CNT, 36));
  102
  103        IF REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
  104          REF$ -> REF.ST$ -> TEMP.REFERENCES = REF$ -> REF.ST$ -> TEMP.REFERENCES
  105                                             + CNT;
  106        ELSE
  107          IF REF$ -> REF.PR_TAG$ ~= ADDR(NIL) THEN
  108            CALL Z8HU$INCCNT(REF$ -> REF.PR_TAG$, BINBIT(CNT, 36));
  109      END;
  110
  111      %MEND;
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  4    
  112
  113
  114
  115      %MACRO WALK_LOP_ROP;
  116
  117           IF PILL -> ETT.LOP -> ETT.ID <= %LAST_REFERENCE_TRIAD
  118           AND PILL -> ETT.ROP -> ETT.ID > %LAST_REFERENCE_TRIAD THEN
  119             DO;
  120               CALL Z8HU$WALK(PILL -> ETT.ROP);
  121               CALL Z8HU$WALK(PILL -> ETT.LOP);
  122             END;
  123           ELSE
  124             DO;
  125               CALL Z8HU$WALK(PILL -> ETT.LOP);
  126               CALL Z8HU$WALK(PILL -> ETT.ROP);
  127    *          /* It is possible that the LOP might not be evaluated
  128    *             any more. */
  129    *          CALL Z8HU$WALK(PILL -> ETT.LOP);
  130             END;
  131
  132      %MEND;
  133
  134
  135
  136      %MACRO #OFF# ( @FROM = ,
  137                     @TO   = ,
  138                     @VALUE= ,
  139                     @TYPE = );
  140
  141           DO;
  142             %NEW_ETT( @ID     = %OFF, @POINTER = @TO ,
  143                       @LOP    = @FROM ,
  144                       @POOLABLE = YES );
  145
  146             @TO -> ETT.OFFSET.VALUE = @VALUE;
  147             @TO -> ETT.OFFSET.TYPE = @TYPE;
  148
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  5    
  149             CALL Z8HU$INCCNT(@FROM,1);
  150             CALL Z8HU$WALK(@TO);
  151           END;
  152
  153      %MEND;
  154
  155
  156
  157      %MACRO #DNA# ( @FROM = ,
  158                     @TO   = );
  159
  160           DO;
  161             J  = @FROM -> ETT.REF$ -> REF.NDSC.N;
  162
  163             %NEW_ETT( @ID      = %DNA, @POINTER = @TO ,
  164                       @LOP     = @FROM ,
  165                       @ROPCON  = J,
  166                       @POOLABLE= YES );
  167
  168             CALL Z8HU$INCCNT(@FROM,1);
  169             CALL Z8HU$WALK(@TO);
  170
  171    *        IF @FROM -> ETT.REF$ -> REF.NDSC.TN = %NDSC4 AND
  172    *            @FROM -> ETT.REF$ -> REF.ST$ -> VARIABLE.TYPE ~= %TYF THEN
  173               @TO -> ETT.REF$ -> REF.ADSC.TA = %ADSC4;
  174             ELSE
  175               @TO -> ETT.REF$ -> REF.ADSC.TA = %ADSC9;
  176           END;
  177
  178      %MEND;
  179
  180
  181
  182      %MACRO #DAN# ( @FROM = ,
  183                     @TO   = );
  184
  185           DO;
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  6    
  186             %NEW_ETT( @ID       = %DAN, @POINTER = @TO ,
  187                       @LOP      = @FROM ,
  188                       @POOLABLE = YES );
  189
  190             CALL Z8HU$INCCNT(@FROM,1);
  191             CALL Z8HU$WALK(@TO);
  192           END;
  193
  194      %MEND;
  195
  196
  197
  198      %MACRO #DESC#_ADSC ( @FROM  = ,
  199                           @TO    = ,
  200                           @TA    = ,
  201                           @LENGTH= ,
  202                           @CN    = );
  203
  204           DO;
  205             %NEW_ETT( @ID       = %DESC, @POINTER = @TO ,
  206                       @LOP      = @FROM ,
  207                       @POOLABLE = YES );
  208
  209             @TO -> ETT.DESC.SA = @FROM -> ETT.REF$ -> REF.SA;
  210
  211
  212             %LSET TEMP@@@ =  CHARTEXT(CONCAT(TEXTCHAR(@FROM), '-> ETT.REF$ -> REF'));
  213
  214             %UNPACK_ADSC ( @DESC   = "%TEMP@@@" ,
  215                            @SA     = SA ,
  216                            @LENGTH = LENGTH ,
  217                            @CN     = CN ,
  218                            @TA     = TA );
  219
  220
  221             %IF (TEXTCHAR(@LENGTH) ~= '');
  222               LENGTH = @LENGTH;
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  7    
  223             %ENDIF;
  224
  225             %IF (TEXTCHAR(@TA) ~= '');
  226               TA = @TA;
  227             %ENDIF;
  228
  229             %IF (TEXTCHAR(@CN) ~= '');
  230               CN = @CN;
  231             %ENDIF;
  232
  233             %LSET TEMP@@@ = CHARTEXT(CONCAT(TEXTCHAR(@TO),' -> ETT.DESC'));
  234
  235
  236             %PACK_ADSC ( @DESC    = "%TEMP@@@" ,
  237                          @SA      = SA ,
  238                          @LENGTH  = LENGTH ,
  239                          @CN      = CN ,
  240                          @TA      = TA );
  241
  242             CALL Z8HU$INCCNT(@FROM, 1);
  243             CALL Z8HU$WALK(@TO);
  244           END;
  245
  246      %MEND;
  247
  248
  249
  250      %MACRO #DESC#_NDSC ( @FROM  = ,
  251                           @TO    = ,
  252                           @LENGTH= ,
  253                           @CN    = ,
  254                           @TN    = ,
  255                           @SCALE = ,
  256                           @SIGN  = );
  257
  258           DO;
  259             %NEW_ETT ( @ID       = %DESC, @POINTER = @TO ,
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  8    
  260                        @LOP      = @FROM ,
  261                        @POOLABLE = YES );
  262
  263             @TO -> ETT.DESC.SA = @FROM -> ETT.REF$ -> REF.SA;
  264
  265             %LSET TEMP@@@ = CHARTEXT(CONCAT(TEXTCHAR(@FROM), '->ETT.REF$->REF'));
  266
  267             %UNPACK_NDSC ( @DESC    = "%TEMP@@@" ,
  268                            @SA      = SA ,
  269                            @LENGTH  = LENGTH ,
  270                            @CN      = CN ,
  271                            @TN      = TN ,
  272                            @SCALE   = SCALE ,
  273                            @SIGN    = SIGN );
  274
  275             %IF (TEXTCHAR(@LENGTH) ~= '');
  276               LENGTH = @LENGTH;
  277             %ENDIF;
  278
  279             %IF (TEXTCHAR(@CN) ~= '');
  280               CN = @CN;
  281             %ENDIF;
  282
  283             %IF (TEXTCHAR(@TN) ~= '');
  284               TN = @TN;
  285             %ENDIF;
  286
  287             %IF (TEXTCHAR(@SCALE) ~= '');
  288               SCALE = @SCALE;
  289             %ENDIF;
  290
  291             %IF (TEXTCHAR(@SIGN) ~= '');
  292               SIGN = @SIGN;
  293             %ENDIF;
  294
  295
  296             %LSET TEMP@@@ = CHARTEXT(CONCAT(TEXTCHAR(@TO),'->ETT.DESC'));
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  9    
  297
  298             %PACK_NDSC ( @DESC   = "%TEMP@@@" ,
  299                          @SA     = SA ,
  300                          @LENGTH = LENGTH ,
  301                          @CN     = CN ,
  302                          @TN     = TN ,
  303                          @SCALE  = SCALE ,
  304                          @SIGN   = SIGN );
  305
  306             CALL Z8HU$INCCNT(@FROM, 1);
  307             CALL Z8HU$WALK(@TO);
  308           END;
  309
  310      %MEND;
  311
  312
  313      %MACRO UNFAVOR;
  314           DO;
  315             RAT.B.FAVORED(%ARA) = FALSE;
  316             RAT.B.FAVORED(%ARQ) = FALSE;
  317           END;
  318      %MEND;
  319
  320
  321
  322
  323      %MACRO SWAP_RELATIONAL(OP_CODE=PCOM.XABS);
  324             DO ;
  325
  326               DO CASE(OP_CODE) ;
  327
  328                 CASE(%GO_LESS_THAN_ARITH) ;
  329                   OP_CODE = %GO_GREATER_THAN_ARITH ;
  330
  331                 CASE(%GO_LESS_THAN_ALPHA) ;
  332                   OP_CODE = %GO_GREATER_THAN_ALPHA ;
  333
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  10   
  334                 CASE(%GO_GREATER_THAN_ARITH) ;
  335                   OP_CODE = %GO_LESS_THAN_ARITH ;
  336
  337                 CASE(%GO_GREATER_THAN_ALPHA) ;
  338                   OP_CODE = %GO_LESS_THAN_ALPHA ;
  339
  340                 CASE(%GO_LESS_THAN_OR_EQUAL_ARITH) ;
  341                   OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ARITH ;
  342
  343                 CASE(%GO_LESS_THAN_OR_EQUAL_ALPHA) ;
  344                   OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ALPHA ;
  345
  346                 CASE(%GO_GREATER_THAN_OR_EQUAL_ARITH) ;
  347                   OP_CODE = %GO_LESS_THAN_OR_EQUAL_ARITH ;
  348
  349                 CASE(%GO_GREATER_THAN_OR_EQUAL_ALPHA) ;
  350                   OP_CODE = %GO_LESS_THAN_OR_EQUAL_ALPHA ;
  351
  352                 CASE(%GO_EQUAL) ;
  353                   /* No swap needed */
  354
  355                 CASE(%GO_NOT_EQUAL) ;
  356                   /* No swap needed */
  357
  358               END ;
  359
  360             END ;
  361      %MEND ;
  362
  363
  364      %MACRO CONVERT_DESC_FOR_DPS88;
  365
  366           DO;
  367             IF DEFER_BUFFER.INST_WORD.OP_CODE(0) = %MVT_OP THEN
  368    *          DO;
  369    *            CALL Z8AU$TYPE_DESCRIPTOR (NODE$, TYPE_DESC);
  370    *            /* This is necessary because although the descriptor in the
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  11   
  371    *               REF item is correct, there is nothing in the REF item
  372    *               that gives any indication of if the string is numeric or
  373    *               non-numeric; if numeric, the scale factor and MBZ2
  374    *               fields must be zeroed out, but otherwise they are OK. One
  375    *               can usually tell be looking at the ST item, yet not
  376    *               always, for there can already have been a type conversion;
  377    *               the LOP of a CVT item can be another CVT item. */
  378    *            DO CASE(ST$$ -> ST.TYPE);
  379    *              CASE(%TYD, %TYO, %TYF);
  380    *                INST_WORD.NDSC.SF = 0;
  381    *                INST_WORD.ADSC.MBZ2 = FALSE;
  382    *                INST_WORD.ADSC.TA = %ADSC9; /* May be needed for %TYF */
  383
  384    *              CASE(%TYC);
  385    *                INST_WORD.NDSC.SF = 0;
  386    *                INST_WORD.ADSC.MBZ2 = FALSE;
  387    *                INST_WORD.ADSC.TA = %ADSC6;
  388
  389    *              CASE(%TYB);
  390    *                INST_WORD.ADSC.TA = %ADSC6;
  391    *            END; /* CASE (TYPE) */
  392    *          END; /* MVT */
  393
  394             ELSE IF COMCOM.OB.ELS   THEN
  395               DO CASE (DEFER_BUFFER.INST_WORD.OP_CODE(0));
  396
  397                 CASE( %AD2DX_OP, %AD3DX_OP,
  398                       %SB2DX_OP, %SB3DX_OP,
  399                       %MP2DX_OP, %MP3DX_OP,
  400                       %MVNX_OP, %CMPNX_OP,
  401                       %DV2DX_OP, %DV3DX_OP );
  402                   IF (ST$$ -> ST.TYPE = %TYO AND ST$$ -> ST.NDSC.TN = %NDSC9) OR
  403                      (ST$$ -> ST.TYPE = %TYF AND ST$$ -> ST.NDSC.TN = %NDSC4) THEN
  404                     DO; /* Overpunched operand */
  405                       INST_WORD.NDSC.TN = %NDSC9; /* Needed if EBCDIC */
  406                       DO CASE(BITBIN(ST$$ -> ST.NDSC.S));
  407
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  12   
  408                         CASE(%BITBIN(LEADING_SIGN));
  409                           INST_WORD.NDSC.S = %OVP_LEADING_SIGN;
  410
  411                         CASE(%BITBIN(TRAILING_SIGN));
  412                           INST_WORD.NDSC.S = %OVP_TRAILING_SIGN;
  413
  414                         CASE(%BITBIN(FLOATING_POINT_LEADING_SIGN),
  415                              %BITBIN(NO_SIGN));
  416                           CALL Z8AE$ERROR(%E$UNEXPECTED_CASE);
  417                       END; /*CASE (TYPE)*/
  418                     END;
  419                 CASE(ELSE);
  420                   /* NULL */
  421               END; /*CASE (OP_CODE)*/
  422           END;
  423      %MEND;
  424
  425
  426      %EQU UNEVAL_T = 000;
  427      %EQU REF_T    = 004;
  428      %EQU USING_HALF_WORD_RELOCATION = '1'B;
  429
  430      %IF CP6;
  431
  432       %EQU STACK_HEADER = 1;
  433
  434      %ELSE;
  435
  436       %EQU STACK_HEADER = 3;
  437
  438      %ENDIF;
  439
  440      %EQU HALF_WORD_REL = 0;
  441      %EQU LDP      = 2;
  442      %EQU ON_ESC_LIST = 1;
  443      %EQU NOT_ON_ESC_LIST = 3;
  444      %EQU LIB_CALL = 4;
09:22 AUG 09 '97 Z8H_SUPPORT.:Z8A6SI/Z8H_SUPPORT.:Z8A6TUI                  13   
  445      %EQU BASEP = 5;
  446
  447      %EJECT;


