/*M* CD: - Copies & deletes all files with a given prefix */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
%SET LISTSUB='1'B;
 
CDCOLON: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
 
%INCLUDE U$JIT_C;
%B$ALT;
%B$TCB;
DCL M$ME DCB;
DCL M$DO DCB;
%M$DCB (DCBN=M$SI,
        ACS=SEQUEN,
        ASN=FILE,
        NAME='D:');
 
%FPT_ERRMSG (FPTN=FPT_ERRMSG,
             STCLASS=STATIC,
             CODE=ERRCODE,
             BUF=ERRBUF,
             OUTDCB1=M$ME);
%FPT_INT (FPTN=FPT_INT,
          STCLASS=STATIC,
          UENTRY=CDBREAK);
%FPT_OPEN (FPTN=FPT_OPEN,
           STCLASS=STATIC,
           DCB=M$SI,
           NXTF=YES,
           FUN=IN);
%FPT_OPEN (FPTN=FPT_OPEN_MEDO,
           STCLASS=STATIC,
           FUN=CREATE,
           DCB=M$ME);
%FPT_CORRES (FPTN=FPT_CORRES,
             STCLASS=STATIC,
             DCB1=M$ME,
             DCB2=M$DO);
%FPT_READ (FPTN=FPT_READ,
           STCLASS=STATIC,
           DCB=M$SI,
           BUF=BUFFER);
%FPT_CLOSE (FPTN=FPT_CLOSE,
            STCLASS= STATIC SYMDEF ,
            DCB=M$SI,
            DISP=RELEASE);
%FPT_CLOSE (FPTN=FPT_CLOSE_MEDO,
            STCLASS=STATIC,
            DCB=M$ME,
            DISP=SAVE);
%FPT_WRITE (FPTN=FPT_WRITE,
            STCLASS=STATIC,
            DCB=M$ME);
%FPT_UNFID (FPTN=FPT_UNFID,
            STCLASS=STATIC,
            TEXTFID=BUFFER,
            DCB=M$SI);
 
DCL CHAR$STRING CHAR( SIZE ) BASED( BUF$ );
DCL BUF$ PTR CONSTANT INIT( ADDR(BUFFER) );
DCL ERRBUF CHAR(120) STATIC;
DCL BUFFER CHAR(256) STATIC;
DCL BUFF(0:255) REDEF BUFFER CHAR(1);
DCL PREFIX CHAR(32) STATIC;
DCL PREFIXS UBIN STATIC;
DCL DCB$FIX CHAR( PREFIXS ) BASED( DCBPRE$ );
DCL DCBPRE$ PTR STATIC;
DCL M$SI$ PTR STATIC;
DCL 1 ERRCODE STATIC,
      2 FCG BIT(12) UNAL,
      2 MID BIT(6) UNAL,
      2 MON BIT(1) UNAL,
      2 ERR# UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL FIRSTIME BIT(1) STATIC INIT( '1'B );
DCL BREAK_FLAG BIT(1) STATIC SYMDEF INIT( '0'B );
DCL QUIT BIT(1) STATIC SYMDEF INIT ('0'B);
DCL DISP UBIN STATIC INIT( %RELEASE#);
DCL SIZE SBIN STATIC;
 
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
DCL CDBREAK ENTRY ASYNC;
 
     CALL M$OPEN( FPT_OPEN_MEDO ) ALTRET( NOPNME );
     DO WHILE( '0'B );
NOPNME:   CALL M$MERC;
        END;
     FPT_OPEN_MEDO.V.DCB# = DCBNUM( M$DO );
     CALL M$OPEN ( FPT_OPEN_MEDO ) ALTRET( NOPNDO );
     DO WHILE( '0'B );
NOPNDO:   CALL M$MERC;
        END;
     CALL M$CORRES( FPT_CORRES ) ALTRET( THESAME );
     FPT_ERRMSG.V.OUTDCB2# = DCBNUM( M$DO );
THESAME: ;
     CALL M$INT( FPT_INT );
     IF B$JIT.CCDISP < B$JIT.CCARS
     THEN DISP = %SAVE#;
     ELSE DISP = %RELEASE#;
     FPT_CLOSE.V.DISP# = DISP;
     M$SI$ = DCBADDR( DCBNUM( M$SI ) );
     DCBPRE$ = ADDR( M$SI$ -> M$SI.NAME#.C );
     PREFIX = M$SI$ -> M$SI.NAME#.C;
     PREFIXS = M$SI$ -> M$SI.NAME#.L;
     DO WHILE ( '1'B );
          CALL M$OPEN( FPT_OPEN ) ALTRET( ARETO );
          DO WHILE ( FIRSTIME );
               IF ( M$SI$ -> M$SI.ASN# ~= %FILE# ) OR
                 ( PREFIX = ' ' )
               THEN CALL M$EXIT;
               FIRSTIME = '0'B;
             END;
          DO WHILE ( '0'B );
ARETO:         IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$FDEOF
               THEN DO;
GETOUT:             CALL M$CLOSE( FPT_CLOSE_MEDO );
                    FPT_CLOSE_MEDO.V.DCB# = DCBNUM( M$DO );
                    CALL M$CLOSE( FPT_CLOSE_MEDO );
                    CALL M$EXIT;
                  END;
               CALL M$SENV;
               CALL ERROR;
               CALL M$RETRYS;
             END;
          IF ( M$SI$ -> M$SI.NAME#.L <= PREFIXS ) OR
            ( DCB$FIX ~= PREFIX )
          THEN CALL M$EXIT;
          CALL M$UNFID( FPT_UNFID ) ALTRET( ARETW );
          FPT_WRITE.BUF_ = FPT_UNFID.TEXTFID_;
          FPT_WRITE.V.DVBYTE = %NO#;
          CALL M$WRITE( FPT_WRITE ) ALTRET( ARETW );
          DO WHILE ( '1'B );
               CALL M$READ( FPT_READ ) ALTRET( ARETR );
               DO WHILE ( '0'B );
ARETR:              ;
                    IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$EOF
                    THEN GOTO CLOSE;
                    IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$LD
                    THEN GOTO ARETW;
                  END;
               SIZE = M$SI$ -> M$SI.ARS#;
               FPT_WRITE.V.DVBYTE = '0'B;
               FPT_WRITE.V.DVBYTE.VFC# = M$SI$ -> M$SI.DVBYTE.VFC#;
               FPT_WRITE.V.DVBYTE.BIN# = M$SI$ -> M$SI.DVBYTE.BIN#;
               FPT_WRITE.V.DVBYTE.TRANS# = M$SI$ -> M$SI.DVBYTE.TRANS#;
               IF SIZE = 0
               THEN FPT_WRITE.BUF_ = VECTOR( NIL );
               ELSE FPT_WRITE.BUF_ = VECTOR( CHAR$STRING );
               CALL M$WRITE( FPT_WRITE ) ALTRET( ARETW );
               IF BREAK_FLAG
               THEN GOTO CLOSE;
             END;
ARETW:    CALL ERROR;
                    /* An irrecoverable error occurred, so do delete the file */
          FPT_CLOSE.V.DISP# = %SAVE# ;
CLOSE:    BREAK_FLAG = '0'B;
          CALL M$CLOSE( FPT_CLOSE ) ALTRET( ARETC );
          DO WHILE ( '0'B );
ARETC:         CALL ERROR;
             END;
                              /* reset the DISP in case an Error changed it */
          FPT_CLOSE.V.DISP# = DISP;
          IF (QUIT) THEN GOTO GETOUT;   /* USER HIT BREAK AND THEN Q */
        END;
 
%EJECT;
 
ERROR: PROC;
 
     FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
     ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     ERRCODE.SEV = 0;
     CALL M$ERRMSG( FPT_ERRMSG );
 
     RETURN;
 
END ERROR;
 
END CDCOLON;
