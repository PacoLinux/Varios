
PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        /* Note: The OU should be run through FALCON.X to cv entrynames to LC */
        7        7        time: PROC (tint);
        8        8
        9        9        /*D* PROTOTYPE:   time_t time (time_t *tptr)
       10       10             DESCRIPTION: returns the current calendar time encoded as the
       11       11                          CP-6's UTS.
       12       12             RAP Oct 3, 1988
       13       13        */
       14       14
       15       15           %INCLUDE CP_6;
       16     5575           %INCLUDE B$JIT;
       17     6178           %INCLUDE XUD_UTS_M;
       18     6260           %XUD$UTS_ENTRIES;
       19     6292           %XUD_UTS_EQU;
       20     6303    1      DCL   B$JIT$   PTR   SYMREF;
       21     6304
       22     6305    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
       23     6306
       24     6307    1      DCL tint SBIN WORD;
       25     6308
       26     6309    1      DCL UTS UBIN;
       27     6310
       28     6311           %FPT_TIME ( FPTN=FPT_TIME_CONSTANT,
       29     6312                       STCLASS=CONSTANT,
       30     6313                       DEST=UTS,
       31     6314                       SOURCE=CLOCK,
       32     6315                       DEST_BASIS=UTC);
       33     6334
       34     6335           %FPT_TIME (STCLASS=AUTO);
       35     6354
       36     6355    1      FPT_TIME = FPT_TIME_CONSTANT;
       37     6356    1      FPT_TIME.V_ = VECTOR (FPT_TIME.V);
PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:2    
       38     6357    1      FPT_TIME.TSTAMP_ = VECTOR (UTS);
       39     6358
       40     6359    2      CALL M$TIME (FPT_TIME) WHENALTRETURN DO;
       41     6360    2         IF (ADDR(tint) ~= ADDR(NIL)) THEN tint = -1;
       42     6361    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
       43     6362    2      END;
       44     6363
       45     6364        /*    Now that we got a CP-6 current time represented in UTS we must
       46     6365              convert it into a time in seconds since Jan 1, 1970.
       47     6366              The formula is:
       48     6367                 (UTS / tics_per_sec) + (days_year * years_not_represented_in_UTS +
       49     6368                 leap_years) * (seconds_per_min * min_per_hour * hour_per_day)
       50     6369                                                                            */
       51     6370
       52     6371    1           CALL XUD$UTS_DIFF_SEC (UTS, UTS, 0);
       53     6372    1           UTS = UTS + ((365*8+2)*(60*60*24));
       54     6373
       55     6374    1      IF (ADDR(tint) ~= ADDR(NIL)) THEN tint = UTS;
       56     6375
       57     6376    1      CALL XB_RETURN_ORDINAL_RESULT (UTS);
       58     6377
       59     6378    1   END time;
       60     6379        %EOD;

PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:3    
--  Include file information  --

   XUD_UTS_M.:LIB_E04  is referenced.
   B$JIT_C.:LIB_E04  is referenced.
   B$JIT.:LIB_E04  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TIME.

   Procedure TIME requires 55 words for executable code.
   Procedure TIME requires 22 words of local(AUTO) storage.

PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:4    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:5    
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      5996**DCL      5996--REDEF
B$JIT.ERR.MID
      5903**DCL      5903--REDEF
B$JIT.JRESPEAK
      6064**DCL      6065--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6173**DCL      6173--REDEF    6174--REDEF
B$JIT.PNR
      6077**DCL      6077--REDEF
B$JIT.TSLINE
      6171**DCL      6172--REDEF
B$JIT$
      6303**DCL      5897--IMP-PTR
FPT_TIME
      6346**DCL      6355<<ASSIGN   6359<>CALL
FPT_TIME.TSTAMP_
      6349**DCL      6357<<ASSIGN
FPT_TIME.V
      6350**DCL      6356--ASSIGN
FPT_TIME.V_
      6346**DCL      6356<<ASSIGN
FPT_TIME_CONSTANT
      6326**DCL      6355>>ASSIGN
FPT_TIME_CONSTANT.V
      6330**DCL      6326--DCLINIT
M$TIME
      5570**DCL-ENT  6359--CALL
TINT
      6307**DCL         7--PROC     6360--IF       6360<<ASSIGN   6374--IF       6374<<ASSIGN
UTS
      6309**DCL      6357--ASSIGN   6371<>CALL     6371<>CALL     6372<<ASSIGN   6372>>ASSIGN   6374>>ASSIGN
PL6.E3A0      #001=TIME File=xb_date_time:6.:XBC3TSI                             WED 08/20/97 14:19 Page:6    
      6376<>CALL
XB_RETURN_ORDINAL_RESULT
      6305**DCL-ENT  6361--CALL     6376--CALL
XUD$UTS_DIFF_SEC
      6267**DCL-ENT  6371--CALL

PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:7    
       61        1        /*T***********************************************************/
       62        2        /*T*                                                         */
       63        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       64        4        /*T*                                                         */
       65        5        /*T***********************************************************/
       66        6
       67        7        asctime: PROC (time_structure);
       68        8
       69        9        /*D* PROTOTYPE:   char *asctime (struct tm *ts)
       70       10             DESCRIPTION: returns a pointer to a string that is a printable
       71       11                          date and time. It accepts a single argument that is
       72       12                          a structured calendar time.
       73       13             RAP Oct 3, 1988
       74       14        */
       75       15
       76       16           %INCLUDE CP_6;
       77     5576           %INCLUDE xbi_date_time_i6;
       78     5597
       79     5598           %SUB slash_n = '012'O;
       80     5599           %tm (name=time_structure);
       81     5611
       82     5612    1      DCL 1 time_string STATIC,
       83     5613    1            2 day CHAR(3),
       84     5614    1            2 * CHAR(1),
       85     5615    1            2 month CHAR(3),
       86     5616    1            2 * CHAR(1),
       87     5617    1            2 date CHAR(2),
       88     5618    1            2 * CHAR(1),
       89     5619    1            2 time,              /* HH:MM:SS */
       90     5620    1              3 hours CHAR(2),
       91     5621    1              3 colon1 CHAR(1),
       92     5622    1              3 minutes CHAR(2),
       93     5623    1              3 colon2 CHAR(1),
       94     5624    1              3 seconds CHAR(2),
       95     5625    1            2 * CHAR(1),
       96     5626    1            2 year CHAR(4),
       97     5627    1            2 newline CHAR(1),
PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:8    
       98     5628    1            2 zero CHAR(1);
       99     5629    1      DCL time_string_blank REDEF time_string CHAR(26);
      100     5630    1      DCL XBI$Short_Days (0:6) CHAR(3) CONSTANT INIT (
      101     5631    1            'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
      102     5632    1      DCL XBI$Short_Months (0:11) CHAR(3) CONSTANT INIT (
      103     5633    1            'Jan', 'Feb', 'Mar', 'Apr',
      104     5634    1            'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
      105     5635
      106     5636    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      107     5637
      108     5638    1      time_string_blank = ' ';
      109     5639    1      time_string.day = XBI$Short_Days (time_structure.wday);
      110     5640    1      time_string.month = XBI$Short_Months (time_structure.mon);
      111     5641    1      CALL BINCHAR(time_string.date,time_structure.mday);
      112     5642    1      IF (SUBSTR(time_string.date,0,1) = '0') THEN SUBSTR(time_string.date,0,1) = ' ';
      113     5643    1      CALL BINCHAR(time_string.time.hours,time_structure.hour);
      114     5644    1      time_string.time.colon1 = ':';
      115     5645    1      CALL BINCHAR(time_string.time.minutes,time_structure.min);
      116     5646    1      time_string.time.colon2 = ':';
      117     5647    1      CALL BINCHAR(time_string.time.seconds,time_structure.sec);
      118     5648    1      time_string.time.colon2 = ':';
      119     5649    1      CALL BINCHAR(time_string.year,time_structure.year+1900);
      120     5650    1      time_string.newline=BITASC(slash_n);
      121     5651    1      time_string.zero=BINASC(0);
      122     5652
      123     5653    1      CALL XB_RETURN_ORDINAL_RESULT (ADDR(time_string));
      124     5654
      125     5655    1   END asctime;
      126     5656        %EOD;

PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:9    
--  Include file information  --

   xbi_date_time_i6.:XBC3TOU  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ASCTIME.

   Procedure ASCTIME requires 58 words for executable code.
   Procedure ASCTIME requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:11   
          MINI XREF LISTING

TIME_STRING
      5612**DCL      5629--REDEF    5653--CALL
TIME_STRING.DATE
      5617**DCL      5641<<CALLBLT  5642>>IF       5642<<ASSIGN
TIME_STRING.DAY
      5613**DCL      5639<<ASSIGN
TIME_STRING.MONTH
      5615**DCL      5640<<ASSIGN
TIME_STRING.NEWLINE
      5627**DCL      5650<<ASSIGN
TIME_STRING.TIME.COLON1
      5621**DCL      5644<<ASSIGN
TIME_STRING.TIME.COLON2
      5623**DCL      5646<<ASSIGN   5648<<ASSIGN
TIME_STRING.TIME.HOURS
      5620**DCL      5643<<CALLBLT
TIME_STRING.TIME.MINUTES
      5622**DCL      5645<<CALLBLT
TIME_STRING.TIME.SECONDS
      5624**DCL      5647<<CALLBLT
TIME_STRING.YEAR
      5626**DCL      5649<<CALLBLT
TIME_STRING.ZERO
      5628**DCL      5651<<ASSIGN
TIME_STRING_BLANK
      5629**DCL      5638<<ASSIGN
TIME_STRUCTURE
      5600**DCL         7--PROC
TIME_STRUCTURE.HOUR
      5603**DCL      5643>>CALLBLT
TIME_STRUCTURE.MDAY
      5604**DCL      5641>>CALLBLT
PL6.E3A0      #002=ASCTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:19 Page:12   
TIME_STRUCTURE.MIN
      5602**DCL      5645>>CALLBLT
TIME_STRUCTURE.MON
      5605**DCL      5640>>ASSIGN
TIME_STRUCTURE.SEC
      5601**DCL      5647>>CALLBLT
TIME_STRUCTURE.WDAY
      5607**DCL      5639>>ASSIGN
TIME_STRUCTURE.YEAR
      5606**DCL      5649>>CALLBLT
XBI$SHORT_DAYS
      5630**DCL      5639>>ASSIGN
XBI$SHORT_MONTHS
      5632**DCL      5640>>ASSIGN
XB_RETURN_ORDINAL_RESULT
      5636**DCL-ENT  5653--CALL

PL6.E3A0      #003=CLOCK File=xb_date_time:6.:XBC3TSI                            WED 08/20/97 14:20 Page:13   
      127        1        /*T***********************************************************/
      128        2        /*T*                                                         */
      129        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      130        4        /*T*                                                         */
      131        5        /*T***********************************************************/
      132        6
      133        7        clock: PROC;
      134        8           /*D* PROTOTYPE:   clock_t clock()
      135        9                DESCRIPTION: returns the cpu time used by the job !! NOT THE PROCESS !!
      136       10                RAP Oct 3, 1988
      137       11           */
      138       12
      139       13           %INCLUDE CP_6;
      140     5573
      141     5574    1      DCL MSECS UBIN;
      142     5575           %FPT_XEQTIME (FPTN=PROC_TIME,STCLASS=AUTO);
      143     5588    1      DCL   1 TIMEBUF DALIGNED,
      144     5589    1            2    EXEC(0:1)   UBIN,
      145     5590    1            2    SERV(0:1)   UBIN;
      146     5591
      147     5592    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
      148     5593
      149     5594    1      PROC_TIME.BUF_ = VECTOR (TIMEBUF);
      150     5595
      151     5596    2      CALL M$XEQTIME(PROC_TIME) WHENALTRETURN DO;
      152     5597    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      153     5598    2      END;
      154     5599    1      MSECS = ((TIMEBUF.EXEC(0) + TIMEBUF.SERV(0)) * 262144 +
      155     5600    1                TIMEBUF.EXEC(1) + TIMEBUF.SERV(1)) / 1000;
      156     5601
      157     5602    1      CALL XB_RETURN_ORDINAL_RESULT (MSECS);
      158     5603
      159     5604    1   END clock;
      160     5605
      161     5606        %EOD;

PL6.E3A0      #003=CLOCK File=xb_date_time:6.:XBC3TSI                            WED 08/20/97 14:20 Page:14   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CLOCK.

   Procedure CLOCK requires 31 words for executable code.
   Procedure CLOCK requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=CLOCK File=xb_date_time:6.:XBC3TSI                            WED 08/20/97 14:20 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CLOCK File=xb_date_time:6.:XBC3TSI                            WED 08/20/97 14:20 Page:16   
          MINI XREF LISTING

M$XEQTIME
      5569**DCL-ENT  5596--CALL
MSECS
      5574**DCL      5599<<ASSIGN   5602<>CALL
PROC_TIME
      5586**DCL      5596<>CALL
PROC_TIME.BUF_
      5586**DCL      5594<<ASSIGN
TIMEBUF
      5588**DCL      5594--ASSIGN
TIMEBUF.EXEC
      5589**DCL      5599>>ASSIGN   5599>>ASSIGN
TIMEBUF.SERV
      5590**DCL      5599>>ASSIGN   5599>>ASSIGN
XB_RETURN_ORDINAL_RESULT
      5592**DCL-ENT  5597--CALL     5602--CALL

PL6.E3A0      #004=GMTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:17   
      162        1        /*T***********************************************************/
      163        2        /*T*                                                         */
      164        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      165        4        /*T*                                                         */
      166        5        /*T***********************************************************/
      167        6
      168        7        gmtime: PROC (timer);
      169        8           /*D* PROTOTYPE: struct tm *gmtime (const time_t *timer);
      170        9                DESCRIPTION: Converts the calendar time in timer into a
      171       10                 broken down time expressed as Greenwich Mean Time.
      172       11           */
      173       12
      174       13           %INCLUDE xbi_date_time_i6;
      175       34
      176       35    1      DCL timer    UBIN;
      177       36
      178       37           %tm (name=time_structure, stclass=static);
      179       49
      180       50    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      181       51    1      DCL XBI$LOCALTIME             ENTRY (3);
      182       52
      183       53    1      CALL XBI$LOCALTIME (timer, time_structure, 2);
      184       54
      185       55    1      CALL XB_RETURN_ORDINAL_RESULT (ADDR(time_structure));
      186       56
      187       57    1   END gmtime;
      188       58        %EOD;

PL6.E3A0      #004=GMTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:18   
--  Include file information  --

   xbi_date_time_i6.:XBC3TOU  is referenced.
      No diagnostics issued in procedure GMTIME.

   Procedure GMTIME requires 20 words for executable code.
   Procedure GMTIME requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=GMTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:19   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=GMTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:20   
          MINI XREF LISTING

TIMER
        35**DCL         7--PROC       53<>CALL
TIME_STRUCTURE
        38**DCL        53<>CALL       55--CALL
XBI$LOCALTIME
        51**DCL-ENT    53--CALL
XB_RETURN_ORDINAL_RESULT
        50**DCL-ENT    55--CALL

PL6.E3A0      #005=LOCALTIME File=xb_date_time:6.:XBC3TSI                        WED 08/20/97 14:20 Page:21   
      189        1        /*T***********************************************************/
      190        2        /*T*                                                         */
      191        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      192        4        /*T*                                                         */
      193        5        /*T***********************************************************/
      194        6
      195        7        localtime: PROC (UTS_time);
      196        8
      197        9           /*D* PROTOTYPE:   struct tm *localtime (time_t *timptr)
      198       10                DESCRIPTION: returns a "broken down" form of the time structure.
      199       11                             It accepts a single argument that is the CP-6 UTS
      200       12                             value returned by time().
      201       13                RAP Oct 3, 1988
      202       14           */
      203       15
      204       16           %INCLUDE xbi_date_time_i6;
      205       37
      206       38    1      DCL UTS_time SBIN;
      207       39
      208       40           %tm (name=time_structure, stclass=static);
      209       52
      210       53    1      DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      211       54    1      DCL XBI$LOCALTIME             ENTRY (3);
      212       55
      213       56    1      CALL XBI$LOCALTIME (UTS_time, time_structure, 1);
      214       57
      215       58    1      CALL XB_RETURN_ORDINAL_RESULT (ADDR(time_structure));
      216       59
      217       60    1   END localtime;
      218       61        %EOD;

PL6.E3A0      #005=LOCALTIME File=xb_date_time:6.:XBC3TSI                        WED 08/20/97 14:20 Page:22   
--  Include file information  --

   xbi_date_time_i6.:XBC3TOU  is referenced.
      No diagnostics issued in procedure LOCALTIME.

   Procedure LOCALTIME requires 20 words for executable code.
   Procedure LOCALTIME requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=LOCALTIME File=xb_date_time:6.:XBC3TSI                        WED 08/20/97 14:20 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=LOCALTIME File=xb_date_time:6.:XBC3TSI                        WED 08/20/97 14:20 Page:24   
          MINI XREF LISTING

TIME_STRUCTURE
        41**DCL        56<>CALL       58--CALL
UTS_TIME
        38**DCL         7--PROC       56<>CALL
XBI$LOCALTIME
        54**DCL-ENT    56--CALL
XB_RETURN_ORDINAL_RESULT
        53**DCL-ENT    58--CALL

PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:25   
      219        1        /*T***********************************************************/
      220        2        /*T*                                                         */
      221        3        /*T* Copyright (c) Bull HN, 1992                             */
      222        4        /*T*                                                         */
      223        5        /*T***********************************************************/
      224        6
      225        7        mktime: PROC (tm);
      226        8
      227        9        /*D* PROTOTYPE:   time_t mktime (struct tm *timptr)
      228       10             DESCRIPTION: returns a single arguement that is the seconds since
      229       11                          00:00 Jan 1, 1970 with the value that is
      230       12                          equivalent to the "broken down" form of the
      231       13                          time structure that is the single arguement.
      232       14             RAP Oct 3, 1988
      233       15        */
      234       16           %INCLUDE CP_6;
      235     5576           %INCLUDE xbi_date_time_i6;
      236     5597
      237     5598           %tm (name=tm, stclass=" ");
      238     5610           %VLR_SITEINFO(FPTN=ASITEINFO);
      239     5629           %FPT_MONINFO(SITEINFO=ASITEINFO);
      240     5644
      241     5645    1      DCL UTS                    UBIN;
      242     5646    1      DCL seconds_per_day        UBIN CONSTANT INIT (%(24*60*60));
      243     5647    1      DCL days_per_month (0:12)  UBIN CONSTANT INIT (0, 31, 59, 90, 120, 151, 181,
      244     5648    1                                                    212, 243, 273, 304, 334, 365);
      245     5649    1      DCL XB_RETURN_ORDINAL_RESULT        ENTRY (1);
      246     5650    1      DCL XBI$LOCALTIME                   ENTRY (3);
      247     5651
      248     5652           /* normalize tm.mon to be in the range 0..11 */
      249     5653
      250     5654    2      IF tm.mon >= 0 THEN DO;
      251     5655    2         tm.year = tm.year + (tm.mon / 12);
      252     5656    2         tm.mon = MOD (tm.mon, 12);
      253     5657    2      END; ELSE DO;
      254     5658    2         tm.year = tm.year + ((tm.mon - 12) / 12);
      255     5659    2         tm.mon = MOD (tm.mon, 12) + 12;
PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:26   
      256     5660    2      END;
      257     5661
      258     5662           /* UNIX UTS cannot handle years before 1970 GMT (possibly 1969 local) */
      259     5663    1      IF tm.year < 69 THEN CALL XB_RETURN_ORDINAL_RESULT (-1);
      260     5664
      261     5665           /* first calculate UTS in days */
      262     5666    1      UTS=(tm.year-69)*1461/4 + days_per_month(tm.mon) + tm.mday - 366;
      263     5667           /* now convert to seconds and add time values */
      264     5668    1      UTS=UTS*seconds_per_day + tm.sec + 60*(tm.min + 60*tm.hour);
      265     5669    1      IF mod(tm.year, 4) = 0 AND tm.mon>1 THEN UTS=UTS+seconds_per_day;
      266     5670
      267     5671           /* Go from UTS back to tm to renormalize structure */
      268     5672           /* NOTE: UTS is still based on localtime, so we DON'T want
      269     5673                    XBI$LOCALTIME to apply the correction factor */
      270     5674    1      CALL XBI$LOCALTIME (UTS, tm, 2);
      271     5675            /* remove local time offset to get GMT based timestamp */
      272     5676    2      CALL M$MONINFO(FPT_MONINFO) WHENRETURN DO;
      273     5677    2        UTS=UTS-ASITEINFO.UTC_OFFSET#/100; END;
      274     5678    2       WHENALTRETURN DO; END;
      275     5679
      276     5680    1      CALL XB_RETURN_ORDINAL_RESULT (UTS);
      277     5681    1   END mktime;
      278     5682        %EOD;

PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:27   
--  Include file information  --

   xbi_date_time_i6.:XBC3TOU  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure MKTIME.

   Procedure MKTIME requires 87 words for executable code.
   Procedure MKTIME requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:28   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:29   
          MINI XREF LISTING

ASITEINFO
      5621**DCL      5640--DCLINIT
ASITEINFO.UTC_OFFSET#
      5627**DCL      5677>>ASSIGN
DAYS_PER_MONTH
      5647**DCL      5666>>ASSIGN
FPT_MONINFO
      5640**DCL      5676<>CALL
M$MONINFO
      5572**DCL-ENT  5676--CALL
SECONDS_PER_DAY
      5646**DCL      5668>>ASSIGN   5669>>ASSIGN
TM
      5599**DCL         7--PROC     5674<>CALL
TM.HOUR
      5602**DCL      5668>>ASSIGN
TM.MDAY
      5603**DCL      5666>>ASSIGN
TM.MIN
      5601**DCL      5668>>ASSIGN
TM.MON
      5604**DCL      5654>>IF       5655>>ASSIGN   5656<<ASSIGN   5656>>ASSIGN   5658>>ASSIGN   5659<<ASSIGN
      5659>>ASSIGN   5666>>ASSIGN   5669>>IF
TM.SEC
      5600**DCL      5668>>ASSIGN
TM.YEAR
      5605**DCL      5655<<ASSIGN   5655>>ASSIGN   5658<<ASSIGN   5658>>ASSIGN   5663>>IF       5666>>ASSIGN
      5669>>IF
UTS
      5645**DCL      5666<<ASSIGN   5668<<ASSIGN   5668>>ASSIGN   5669<<ASSIGN   5669>>ASSIGN   5674<>CALL
      5677<<ASSIGN   5677>>ASSIGN   5680<>CALL
XBI$LOCALTIME
PL6.E3A0      #006=MKTIME File=xb_date_time:6.:XBC3TSI                           WED 08/20/97 14:20 Page:30   
      5650**DCL-ENT  5674--CALL
XB_RETURN_ORDINAL_RESULT
      5649**DCL-ENT  5663--CALL     5680--CALL

PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:31   
      279        1        /*T***********************************************************/
      280        2        /*T*                                                         */
      281        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      282        4        /*T*                                                         */
      283        5        /*T***********************************************************/
      284        6
      285        7        strftime: PROC (s, smax, fmt, time_structure);
      286        8
      287        9        /*D* PROTOTYPE:   size_t strftime (char *s, size_t smax, const char *fmt,
      288       10                                           const struct tm *tp)
      289       11             DESCRIPTION: formats date and time from *tp into s according to
      290       12                          *fmt, which is analogous to printf format.
      291       13             RAP Nov 10, 1988
      292       14        */
      293       15
      294       16        %INCLUDE CP_6;
      295     5576        %INCLUDE xbi_date_time_i6;
      296     5597
      297     5598    1   DCL  XBI$STRLEN entry(2);
      298     5599    1   DCL s CHAR(16384);
      299     5600    1   DCL smax UBIN WORD;
      300     5601    1   DCL funny_ptr PTR;
      301     5602    1   DCL real_smax REDEF funny_ptr UBIN WORD;
      302     5603    1   DCL fmt CHAR(fmt_length);
      303     5604        %tm (name=time_structure, stclass=" ");
      304     5616
      305     5617    1   DCL fmt_length UBIN WORD;
      306     5618    1   DCL output_index UBIN;
      307     5619    1   DCL fmt_index UBIN;
      308     5620    1   DCL working_string CHAR(12);
      309     5621    1   DCL working_index UBIN WORD;
      310     5622    1      DCL XBI$Short_Days (0:6) CHAR(3) CONSTANT INIT (
      311     5623    1            'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
      312     5624    1      DCL XBI$Short_Months (0:11) CHAR(3) CONSTANT INIT (
      313     5625    1            'Jan', 'Feb', 'Mar', 'Apr',
      314     5626    1            'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
      315     5627    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:32   
      316     5628
      317     5629    1       move_string: PROC (source, count) ALTRET;
      318     5630    2       DCL source CHAR(16384);
      319     5631    2       DCL count UBIN;
      320     5632    2       DCL itemp UBIN;
      321     5633
      322     5634        /***********************************************************/
      323     5635    3       DO itemp = 0 TO count-1;
      324     5636    3          SUBSTR(s,output_index,1) = SUBSTR(source,itemp,1);
      325     5637    3          output_index = output_index+1;
      326     5638    3          IF (output_index>real_smax) THEN ALTRETURN;
      327     5639    3          END;
      328     5640    2       END;
      329     5641        /***********************************************************/
      330     5642
      331     5643    1   funny_ptr = ADDR(smax);    /* this gets the real_smax value */
      332     5644    1   CALL XBI$STRLEN (fmt, fmt_length);
      333     5645    1   output_index = 0;
      334     5646    1   fmt_index = 0;
      335     5647    2   DO WHILE (fmt_index<=fmt_length);
      336     5648    3      IF SUBSTR(fmt,fmt_index,1) = '%' THEN DO;
      337     5649    3         fmt_index = fmt_index+1;
      338     5650    4         DO SELECT(SUBSTR(fmt,fmt_index,1));
      339     5651    4            SELECT('a'); /* abbreviated weekday name  */
      340     5652    4               CALL move_string (XBI$Short_Days (time_structure.wday), 3)
      341     5653    4                  ALTRET (Too_Much);
      342     5654    4            SELECT('A'); /* full weekday name */
      343     5655    5               DO;
      344     5656    6                  DO CASE (time_structure.wday);
      345     5657    6                     CASE(0); CALL move_string('Sunday',6) ALTRET(Too_much);
      346     5658    6                     CASE(1); CALL move_string('Monday',6) ALTRET(Too_much);
      347     5659    6                     CASE(2); CALL move_string('Tuesday',7) ALTRET(Too_much);
      348     5660    6                     CASE(3); CALL move_string('Wednesday',9) ALTRET(Too_much);
      349     5661    6                     CASE(4); CALL move_string('Thursday',8) ALTRET(Too_much);
      350     5662    6                     CASE(5); CALL move_string('Friday',6) ALTRET(Too_much);
      351     5663    6                     CASE(6); CALL move_string('Saturday',8) ALTRET(Too_much);
      352     5664    6                     END;
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:33   
      353     5665    5                  END;
      354     5666    4            SELECT('b'); /* abbreviated month name */
      355     5667    4               CALL move_string (XBI$Short_Months (time_structure.mon), 3)
      356     5668    4                  ALTRET (Too_Much);
      357     5669    4            SELECT('B'); /* full month name */
      358     5670    5               DO;
      359     5671    6                  DO CASE (time_structure.mon);
      360     5672    6                     CASE(0); CALL move_string('January',7) ALTRET(Too_much);
      361     5673    6                     CASE(1); CALL move_string('February',8) ALTRET(Too_much);
      362     5674    6                     CASE(2); CALL move_string('March',5) ALTRET(Too_much);
      363     5675    6                     CASE(3); CALL move_string('April',5) ALTRET(Too_much);
      364     5676    6                     CASE(4); CALL move_string('May',3) ALTRET(Too_much);
      365     5677    6                     CASE(5); CALL move_string('June',4) ALTRET(Too_much);
      366     5678    6                     CASE(6); CALL move_string('July',4) ALTRET(Too_much);
      367     5679    6                     CASE(7); CALL move_string('August',6) ALTRET(Too_much);
      368     5680    6                     CASE(8); CALL move_string('September',9) ALTRET(Too_much);
      369     5681    6                     CASE(9); CALL move_string('October',7) ALTRET(Too_much);
      370     5682    6                     CASE(10); CALL move_string('November',8) ALTRET(Too_much);
      371     5683    6                     CASE(11); CALL move_string('December',8) ALTRET(Too_much);
      372     5684    6                     END;
      373     5685    5                  END;
      374     5686    4            SELECT('c'); /* local date and time representation */
      375     5687    5               DO;
      376     5688    5                  CALL move_string (XBI$Short_Days (time_structure.wday), 3)
      377     5689    5                     ALTRET (Too_Much);
      378     5690    5                  CALL move_string(' ',1) ALTRET(Too_much);
      379     5691    5                  CALL move_string (XBI$Short_Months (time_structure.mon), 3)
      380     5692    5                     ALTRET (Too_Much);
      381     5693    5                  CALL move_string(' ',1) ALTRET(Too_much);
      382     5694    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.mday);
      383     5695    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      384     5696    5                  CALL move_string(' ',1) ALTRET(Too_much);
      385     5697    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.hour);
      386     5698    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      387     5699    5                  CALL move_string(':',1) ALTRET(Too_much);
      388     5700    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.min);
      389     5701    5                  CALL move_string(working_string,2) ALTRET(Too_much);
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:34   
      390     5702    5                  CALL move_string(':',1) ALTRET(Too_much);
      391     5703    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.sec);
      392     5704    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      393     5705    5                  CALL move_string(' ',1) ALTRET(Too_much);
      394     5706    5                  CALL BINCHAR(SUBSTR(working_string,0,4),time_structure.year+1900);
      395     5707    5                  CALL move_string(working_string,4) ALTRET(Too_much);
      396     5708    5                  END;
      397     5709    4            SELECT('d'); /* day of the month (01-31) */
      398     5710    5               DO;
      399     5711    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.mday);
      400     5712    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      401     5713    5                  END;
      402     5714    4            SELECT('H'); /* hour (24-hour clock) (00-23) */
      403     5715    5               DO;
      404     5716    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.hour);
      405     5717    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      406     5718    5                  END;
      407     5719    4            SELECT('I'); /* hour (12-hour clock) (01-12) */
      408     5720    5               DO;
      409     5721    5                  IF (time_structure.hour<=12) THEN
      410     5722    5                     CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.hour);
      411     5723    5                  ELSE
      412     5724    5                     CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.hour-12);
      413     5725    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      414     5726    5                  END;
      415     5727    4            SELECT('j'); /* day of the year (001-366) */
      416     5728    5               DO;
      417     5729    5                  CALL BINCHAR(SUBSTR(working_string,0,3),time_structure.yday+1);
      418     5730    5                  CALL move_string(working_string,3) ALTRET(Too_much);
      419     5731    5                  END;
      420     5732    4            SELECT('m'); /* month (01-12) */
      421     5733    5               DO;
      422     5734    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.mon+1);
      423     5735    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      424     5736    5                  END;
      425     5737    4            SELECT('M'); /* minute (00-59) */
      426     5738    5               DO;
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:35   
      427     5739    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.min);
      428     5740    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      429     5741    5                  END;
      430     5742    4            SELECT('p'); /* AM or PM */
      431     5743    5               DO;
      432     5744    5                  IF (time_structure.hour<=12) THEN
      433     5745    5                     CALL move_string('AM',2) ALTRET(Too_much);
      434     5746    5                  ELSE
      435     5747    5                     CALL move_string('PM',2) ALTRET(Too_much);
      436     5748    5                  END;
      437     5749    4            SELECT('S'); /* second (00-59) */
      438     5750    5               DO;
      439     5751    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.sec);
      440     5752    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      441     5753    5                  END;
      442     5754    4            SELECT('U'); /* week number of the year (Sun as 1st day of week) (00-53) */
      443     5755    5               DO;
      444     5756    5                  IF (time_structure.yday>time_structure.wday)
      445     5757    5                  THEN
      446     5758    5                     CALL BINCHAR(SUBSTR(working_string,0,2),((time_structure.yday-
              5758                              time_structure.wday)/7));
      447     5759    5                  ELSE
      448     5760    5                     working_string = '00';
      449     5761    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      450     5762    5                  END;
      451     5763    4            SELECT('w'); /* weekday (Sunday is 0) (0-6) */
      452     5764    5               DO;
      453     5765    5                  CALL BINCHAR(SUBSTR(working_string,0,1),time_structure.wday);
      454     5766    5                  CALL move_string(working_string,1) ALTRET(Too_much);
      455     5767    5                  END;
      456     5768    4            SELECT('W'); /* week number of the year (Mon as 1st day of week) (00-53) */
      457     5769    5               DO;
      458     5770    5                  IF (time_structure.yday>time_structure.wday)
      459     5771    5                  THEN
      460     5772    5                     CALL BINCHAR(SUBSTR(working_string,0,2),((time_structure.yday-
              5772                              time_structure.wday+1)/7));
      461     5773    5                  ELSE
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:36   
      462     5774    5                     working_string = '00';
      463     5775    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      464     5776    5                  END;
      465     5777    4            SELECT('x'); /* local date representation */
      466     5778    5               DO;
      467     5779    5                  CALL move_string (XBI$Short_Days (time_structure.wday), 3)
      468     5780    5                     ALTRET (Too_Much);
      469     5781    5                  CALL move_string (' ', 1) ALTRET(Too_Much);
      470     5782    5                  CALL move_string (XBI$Short_Months (time_structure.mon), 3)
      471     5783    5                     ALTRET (Too_Much);
      472     5784    5                  CALL move_string(' ',1) ALTRET(Too_much);
      473     5785    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.mday);
      474     5786    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      475     5787    5                  CALL move_string(', ',2) ALTRET(Too_much);
      476     5788    5                  CALL BINCHAR(SUBSTR(working_string,0,4),time_structure.year+1900);
      477     5789    5                  CALL move_string(working_string,4) ALTRET(Too_much);
      478     5790    5                  END;
      479     5791    4            SELECT('X'); /* local time representation */
      480     5792    5               DO;
      481     5793    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.hour);
      482     5794    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      483     5795    5                  CALL move_string(':',1) ALTRET(Too_much);
      484     5796    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.min);
      485     5797    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      486     5798    5                  CALL move_string(':',1) ALTRET(Too_much);
      487     5799    5                  CALL BINCHAR(SUBSTR(working_string,0,2),time_structure.sec);
      488     5800    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      489     5801    5                  END;
      490     5802    4            SELECT('y'); /* year without century (00-99) */
      491     5803    5               DO;
      492     5804    5                  CALL BINCHAR(SUBSTR(working_string,0,2),MOD(time_structure.year,100))
              5804                           ;
      493     5805    5                  CALL move_string(working_string,2) ALTRET(Too_much);
      494     5806    5                  END;
      495     5807    4            SELECT('Y'); /* year with century (1900-....) */
      496     5808    5               DO;
      497     5809    5                  CALL BINCHAR(SUBSTR(working_string,0,4),time_structure.year+1900);
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:37   
      498     5810    5                  CALL move_string(working_string,4) ALTRET(Too_much);
      499     5811    5                  END;
      500     5812    4            SELECT('Z'); /* time zone name, if any */
      501     5813                              /* we dont know anything about time zones */
      502     5814    4            SELECT('%'); /* % */
      503     5815    4               CALL move_string('%',1) ALTRET(Too_much);
      504     5816    4            SELECT(ELSE);
      505     5817    5               DO;
      506     5818    5                  CALL move_string('%',1) ALTRET(Too_much);
      507     5819    5                  CALL move_string(SUBSTR(fmt,fmt_index,1),1) ALTRET(Too_much);
      508     5820    5                  END;
      509     5821    4            END;
      510     5822    3         END;
      511     5823    3      ELSE DO;
      512     5824    3         CALL move_string(SUBSTR(fmt,fmt_index,1),1) ALTRET(Too_much);
      513     5825    3         END;
      514     5826    2      fmt_index = fmt_index+1;
      515     5827    2      END;
      516     5828
      517     5829    1   CALL move_string(BINASC(0),1) ALTRET(Too_much);
      518     5830
      519     5831    1   CALL XB_RETURN_ORDINAL_RESULT (output_index-2);
              5831            /* 1 cause of \0 + 1 for extra incr */
      520     5832
      521     5833    1   Too_much: CALL XB_RETURN_ORDINAL_RESULT (0);
      522     5834
      523     5835    1   END strftime;
      524     5836        %EOD;

PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:38   
--  Include file information  --

   xbi_date_time_i6.:XBC3TOU  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure STRFTIME.

   Procedure STRFTIME requires 822 words for executable code.
   Procedure STRFTIME requires 22 words of local(AUTO) storage.

PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:39   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:40   
          MINI XREF LISTING

COUNT IN PROCEDURE MOVE_STRING
      5631**DCL      5629--PROC     5635>>DOINDEX
FMT
      5603**DCL         7--PROC     5644<>CALL     5648>>IF       5650>>DOSELCT  5819<>CALL     5824<>CALL
FMT_INDEX
      5619**DCL      5646<<ASSIGN   5647>>DOWHILE  5648>>IF       5649<<ASSIGN   5649>>ASSIGN   5650>>DOSELCT
      5819>>CALL     5824>>CALL     5826<<ASSIGN   5826>>ASSIGN
FMT_LENGTH
      5617**DCL      5603--IMP-SIZ  5644>>CALL     5644<>CALL     5647>>DOWHILE  5648>>IF       5650>>DOSELCT
      5819>>CALL     5824>>CALL
FUNNY_PTR
      5601**DCL      5602--REDEF    5643<<ASSIGN
ITEMP IN PROCEDURE MOVE_STRING
      5632**DCL      5635<<DOINDEX  5636>>ASSIGN
MOVE_STRING
      5629**PROC     5652--CALL     5657--CALL     5658--CALL     5659--CALL     5660--CALL     5661--CALL
      5662--CALL     5663--CALL     5667--CALL     5672--CALL     5673--CALL     5674--CALL     5675--CALL
      5676--CALL     5677--CALL     5678--CALL     5679--CALL     5680--CALL     5681--CALL     5682--CALL
      5683--CALL     5688--CALL     5690--CALL     5691--CALL     5693--CALL     5695--CALL     5696--CALL
      5698--CALL     5699--CALL     5701--CALL     5702--CALL     5704--CALL     5705--CALL     5707--CALL
      5712--CALL     5717--CALL     5725--CALL     5730--CALL     5735--CALL     5740--CALL     5745--CALL
      5747--CALL     5752--CALL     5761--CALL     5766--CALL     5775--CALL     5779--CALL     5781--CALL
      5782--CALL     5784--CALL     5786--CALL     5787--CALL     5789--CALL     5794--CALL     5795--CALL
      5797--CALL     5798--CALL     5800--CALL     5805--CALL     5810--CALL     5815--CALL     5818--CALL
      5819--CALL     5824--CALL     5829--CALL
OUTPUT_INDEX
      5618**DCL      5636>>ASSIGN   5637<<ASSIGN   5637>>ASSIGN   5638>>IF       5645<<ASSIGN   5831>>CALL
REAL_SMAX
      5602**DCL      5638>>IF
S
      5599**DCL         7--PROC     5636<<ASSIGN
SMAX
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:41   
      5600**DCL         7--PROC     5643--ASSIGN
SOURCE IN PROCEDURE MOVE_STRING
      5630**DCL      5629--PROC     5636>>ASSIGN
TIME_STRUCTURE
      5605**DCL         7--PROC
TIME_STRUCTURE.HOUR
      5608**DCL      5697>>CALLBLT  5716>>CALLBLT  5721>>IF       5722>>CALLBLT  5724>>CALLBLT  5744>>IF
      5793>>CALLBLT
TIME_STRUCTURE.MDAY
      5609**DCL      5694>>CALLBLT  5711>>CALLBLT  5785>>CALLBLT
TIME_STRUCTURE.MIN
      5607**DCL      5700>>CALLBLT  5739>>CALLBLT  5796>>CALLBLT
TIME_STRUCTURE.MON
      5610**DCL      5667>>CALL     5671>>DOCASE   5691>>CALL     5734>>CALLBLT  5782>>CALL
TIME_STRUCTURE.SEC
      5606**DCL      5703>>CALLBLT  5751>>CALLBLT  5799>>CALLBLT
TIME_STRUCTURE.WDAY
      5612**DCL      5652>>CALL     5656>>DOCASE   5688>>CALL     5756>>IF       5758>>CALLBLT  5765>>CALLBLT
      5770>>IF       5772>>CALLBLT  5779>>CALL
TIME_STRUCTURE.YDAY
      5613**DCL      5729>>CALLBLT  5756>>IF       5758>>CALLBLT  5770>>IF       5772>>CALLBLT
TIME_STRUCTURE.YEAR
      5611**DCL      5706>>CALLBLT  5788>>CALLBLT  5804>>CALLBLT  5809>>CALLBLT
TOO_MUCH
      5833**LABEL    5652--CALLALT  5657--CALLALT  5658--CALLALT  5659--CALLALT  5660--CALLALT  5661--CALLALT
      5662--CALLALT  5663--CALLALT  5667--CALLALT  5672--CALLALT  5673--CALLALT  5674--CALLALT  5675--CALLALT
      5676--CALLALT  5677--CALLALT  5678--CALLALT  5679--CALLALT  5680--CALLALT  5681--CALLALT  5682--CALLALT
      5683--CALLALT  5688--CALLALT  5690--CALLALT  5691--CALLALT  5693--CALLALT  5695--CALLALT  5696--CALLALT
      5698--CALLALT  5699--CALLALT  5701--CALLALT  5702--CALLALT  5704--CALLALT  5705--CALLALT  5707--CALLALT
      5712--CALLALT  5717--CALLALT  5725--CALLALT  5730--CALLALT  5735--CALLALT  5740--CALLALT  5745--CALLALT
      5747--CALLALT  5752--CALLALT  5761--CALLALT  5766--CALLALT  5775--CALLALT  5779--CALLALT  5781--CALLALT
      5782--CALLALT  5784--CALLALT  5786--CALLALT  5787--CALLALT  5789--CALLALT  5794--CALLALT  5795--CALLALT
      5797--CALLALT  5798--CALLALT  5800--CALLALT  5805--CALLALT  5810--CALLALT  5815--CALLALT  5818--CALLALT
      5819--CALLALT  5824--CALLALT  5829--CALLALT
WORKING_STRING
      5620**DCL      5694<<CALLBLT  5695<>CALL     5697<<CALLBLT  5698<>CALL     5700<<CALLBLT  5701<>CALL
PL6.E3A0      #007=STRFTIME File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:20 Page:42   
      5703<<CALLBLT  5704<>CALL     5706<<CALLBLT  5707<>CALL     5711<<CALLBLT  5712<>CALL     5716<<CALLBLT
      5717<>CALL     5722<<CALLBLT  5724<<CALLBLT  5725<>CALL     5729<<CALLBLT  5730<>CALL     5734<<CALLBLT
      5735<>CALL     5739<<CALLBLT  5740<>CALL     5751<<CALLBLT  5752<>CALL     5758<<CALLBLT  5760<<ASSIGN
      5761<>CALL     5765<<CALLBLT  5766<>CALL     5772<<CALLBLT  5774<<ASSIGN   5775<>CALL     5785<<CALLBLT
      5786<>CALL     5788<<CALLBLT  5789<>CALL     5793<<CALLBLT  5794<>CALL     5796<<CALLBLT  5797<>CALL
      5799<<CALLBLT  5800<>CALL     5804<<CALLBLT  5805<>CALL     5809<<CALLBLT  5810<>CALL
XBI$SHORT_DAYS
      5622**DCL      5652<>CALL     5688<>CALL     5779<>CALL
XBI$SHORT_MONTHS
      5624**DCL      5667<>CALL     5691<>CALL     5782<>CALL
XBI$STRLEN
      5598**DCL-ENT  5644--CALL
XB_RETURN_ORDINAL_RESULT
      5627**DCL-ENT  5831--CALL     5833--CALL

PL6.E3A0      #008=UTSTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:21 Page:43   
      525        1        /*T***********************************************************/
      526        2        /*T*                                                         */
      527        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      528        4        /*T*                                                         */
      529        5        /*T***********************************************************/
      530        6        utstime: PROC (tint);
      531        7
      532        8        /*D* PROTOTYPE:   time_t utstime (time_t *tptr)
      533        9             DESCRIPTION: returns the current calendar time encoded as the
      534       10                          CP-6's UTS.
      535       11             WGE Sep 13, 1990
      536       12        */
      537       13
      538       14           %INCLUDE CP_6;
      539     5574
      540     5575    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
      541     5576
      542     5577    1      DCL tint SBIN WORD;
      543     5578
      544     5579    1      DCL UTS UBIN;
      545     5580
      546     5581           %FPT_TIME ( FPTN=FPT_TIME_CONSTANT,
      547     5582                       STCLASS=CONSTANT,
      548     5583                       DEST=UTS,
      549     5584                       SOURCE=CLOCK);
      550     5603
      551     5604           %FPT_TIME (STCLASS=AUTO);
      552     5623
      553     5624    1      FPT_TIME = FPT_TIME_CONSTANT;
      554     5625    1      FPT_TIME.V_ = VECTOR (FPT_TIME.V);
      555     5626    1      FPT_TIME.TSTAMP_ = VECTOR (UTS);
      556     5627
      557     5628    2      CALL M$TIME (FPT_TIME) WHENALTRETURN DO;
      558     5629    2         IF (ADDR(tint) ~= ADDR(NIL)) THEN tint = -1;
      559     5630    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      560     5631    2      END;
      561     5632
PL6.E3A0      #008=UTSTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:21 Page:44   
      562     5633    1      IF (ADDR(tint) ~= ADDR(NIL)) THEN tint = UTS;
      563     5634
      564     5635    1      CALL XB_RETURN_ORDINAL_RESULT (UTS);
      565     5636
      566     5637    1   END utstime;
      567     5638        %EOD;

PL6.E3A0      #008=UTSTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:21 Page:45   
--  Include file information  --

   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure UTSTIME.

   Procedure UTSTIME requires 43 words for executable code.
   Procedure UTSTIME requires 20 words of local(AUTO) storage.

PL6.E3A0      #008=UTSTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:21 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=UTSTIME File=xb_date_time:6.:XBC3TSI                          WED 08/20/97 14:21 Page:47   
          MINI XREF LISTING

FPT_TIME
      5615**DCL      5624<<ASSIGN   5628<>CALL
FPT_TIME.TSTAMP_
      5618**DCL      5626<<ASSIGN
FPT_TIME.V
      5619**DCL      5625--ASSIGN
FPT_TIME.V_
      5615**DCL      5625<<ASSIGN
FPT_TIME_CONSTANT
      5595**DCL      5624>>ASSIGN
FPT_TIME_CONSTANT.V
      5599**DCL      5595--DCLINIT
M$TIME
      5569**DCL-ENT  5628--CALL
TINT
      5577**DCL         6--PROC     5629--IF       5629<<ASSIGN   5633--IF       5633<<ASSIGN
UTS
      5579**DCL      5626--ASSIGN   5633>>ASSIGN   5635<>CALL
XB_RETURN_ORDINAL_RESULT
      5575**DCL-ENT  5630--CALL     5635--CALL

PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:48   
      568        1
      569        2        /*T***********************************************************/
      570        3        /*T*                                                         */
      571        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      572        5        /*T*                                                         */
      573        6        /*T***********************************************************/
      574        7        utstogmt: PROC (uts_time_p);
      575        8
      576        9        /*D* PROTOTYPE:   time_t utstogmt (time_t uts_time)
      577       10             DESCRIPTION: Converts a CP-6 UTS time value into a UN*X time
      578       11                          value (Jan 1,1970 00:00:00 GMT).
      579       12             WGE Sep 13, 1990
      580       13        */
      581       14
      582       15           %INCLUDE CP_6;
      583     5575           %INCLUDE B$JIT;
      584     6178           %INCLUDE XUD_UTS_M;
      585     6260
      586     6261           %XUD$UTS_ENTRIES;
      587     6293           %XUD_UTS_EQU;
      588     6304
      589     6305    1      DCL   B$JIT$   PTR   SYMREF;
      590     6306
      591     6307    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
      592     6308
      593     6309    1      DCL uts_time_p UBIN  WORD;
      594     6310
      595     6311    1      DCL uts_time_as_ptr PTR;
      596     6312    1      DCL uts_time   REDEF uts_time_as_ptr   UBIN;
      597     6313    1      DCL gmt_time UBIN WORD;
      598     6314    1      DCL cp6_gmt  UBIN WORD;
      599     6315
      600     6316           %FPT_TIME ( FPTN=FPT_TIME_CONSTANT,
      601     6317                       STCLASS=CONSTANT,
      602     6318                       DEST=UTS,
      603     6319                       SOURCE=UTS,
      604     6320                       DEST_BASIS=UTC);
PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:49   
      605     6339
      606     6340           %FPT_TIME (STCLASS=AUTO);
      607     6359
      608     6360    1      uts_time_as_ptr = ADDR(uts_time_p);
      609     6361
      610     6362        /*    Now that we got a UTS value we got to add the GMT offset      */
      611     6363
      612     6364    1      cp6_gmt = uts_time;
      613     6365    1      FPT_TIME = FPT_TIME_CONSTANT;
      614     6366    1      FPT_TIME.V_ = VECTOR (FPT_TIME.V);
      615     6367    1      FPT_TIME.TSTAMP_ = VECTOR (cp6_gmt);
      616     6368
      617     6369    2      CALL M$TIME (FPT_TIME) WHENALTRETURN DO;
      618     6370    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      619     6371    2      END;
      620     6372
      621     6373
      622     6374        /*    Time to do the conversion manually                            */
      623     6375
      624     6376    1           CALL XUD$UTS_DIFF_SEC (gmt_time, cp6_gmt,0);
      625     6377    1           gmt_time = gmt_time + ((365*8+2)*(60*60*24));
      626     6378
      627     6379    1      CALL XB_RETURN_ORDINAL_RESULT (gmt_time);
      628     6380
      629     6381    1   END utstogmt;
      630     6382        %EOD;

PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:50   
--  Include file information  --

   XUD_UTS_M.:LIB_E04  is referenced.
   B$JIT_C.:LIB_E04  is referenced.
   B$JIT.:LIB_E04  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure UTSTOGMT.

   Procedure UTSTOGMT requires 48 words for executable code.
   Procedure UTSTOGMT requires 24 words of local(AUTO) storage.

PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:52   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      5996**DCL      5996--REDEF
B$JIT.ERR.MID
      5903**DCL      5903--REDEF
B$JIT.JRESPEAK
      6064**DCL      6065--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6173**DCL      6173--REDEF    6174--REDEF
B$JIT.PNR
      6077**DCL      6077--REDEF
B$JIT.TSLINE
      6171**DCL      6172--REDEF
B$JIT$
      6305**DCL      5897--IMP-PTR
CP6_GMT
      6314**DCL      6364<<ASSIGN   6367--ASSIGN   6376<>CALL
FPT_TIME
      6351**DCL      6365<<ASSIGN   6369<>CALL
FPT_TIME.TSTAMP_
      6354**DCL      6367<<ASSIGN
FPT_TIME.V
      6355**DCL      6366--ASSIGN
FPT_TIME.V_
      6351**DCL      6366<<ASSIGN
FPT_TIME_CONSTANT
      6331**DCL      6365>>ASSIGN
FPT_TIME_CONSTANT.V
      6335**DCL      6331--DCLINIT
GMT_TIME
      6313**DCL      6376<>CALL     6377<<ASSIGN   6377>>ASSIGN   6379<>CALL
M$TIME
      5570**DCL-ENT  6369--CALL
PL6.E3A0      #009=UTSTOGMT File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:53   
UTS_TIME
      6312**DCL      6364>>ASSIGN
UTS_TIME_AS_PTR
      6311**DCL      6312--REDEF    6360<<ASSIGN
UTS_TIME_P
      6309**DCL         7--PROC     6360--ASSIGN
XB_RETURN_ORDINAL_RESULT
      6307**DCL-ENT  6370--CALL     6379--CALL
XUD$UTS_DIFF_SEC
      6268**DCL-ENT  6376--CALL

PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:54   
      631        1
      632        2        /*T***********************************************************/
      633        3        /*T*                                                         */
      634        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      635        5        /*T*                                                         */
      636        6        /*T***********************************************************/
      637        7        gmttouts: PROC (gmt_time_p);
      638        8
      639        9        /*D* PROTOTYPE:   time_t gmttouts (time_t gmt_time)
      640       10             DESCRIPTION: Converts a UN*X time value into a CP6 UTS time
      641       11                          value.
      642       12             WGE Sep 13, 1990
      643       13        */
      644       14
      645       15           %INCLUDE CP_6;
      646     5575           %INCLUDE B$JIT;
      647     6178           %INCLUDE XUD_UTS_M;
      648     6260
      649     6261           %XUD$UTS_ENTRIES;
      650     6293           %XUD_UTS_EQU;
      651     6304
      652     6305    1      DCL   B$JIT$   PTR   SYMREF;
      653     6306
      654     6307    1      DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
      655     6308
      656     6309    1      DCL gmt_time_p UBIN  WORD;
      657     6310    1      DCL gmt_time_as_ptr PTR;
      658     6311    1      DCL gmt_time REDEF gmt_time_as_ptr  UBIN;
      659     6312    1      DCL uts_time UBIN WORD;
      660     6313    1      DCL cp6_gmt  UBIN WORD;
      661     6314
      662     6315           %FPT_TIME ( FPTN=FPT_TIME_CONSTANT,
      663     6316                       STCLASS=CONSTANT,
      664     6317                       DEST=UTS,
      665     6318                       SOURCE=UTS,
      666     6319                       SOURCE_BASIS=UTC);
      667     6338
PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:55   
      668     6339           %FPT_TIME (STCLASS=AUTO);
      669     6358
      670     6359    1      gmt_time_as_ptr = ADDR(gmt_time_p);
      671     6360
      672     6361        /*    Time to do the conversion manually                            */
      673     6362
      674     6363    1           CALL XUD$UTS_ADJ_25TH (cp6_gmt, 0, (gmt_time-((365*8+2)*(60*60*24)))*%
              6363                    UTS_25TH_SEC#);
      675     6364
      676     6365        /*    Now that we got a UTS value we got to sub the GMT offset      */
      677     6366
      678     6367    1      uts_time = cp6_gmt;
      679     6368    1      FPT_TIME = FPT_TIME_CONSTANT;
      680     6369    1      FPT_TIME.V_ = VECTOR (FPT_TIME.V);
      681     6370    1      FPT_TIME.TSTAMP_ = VECTOR (uts_time);
      682     6371
      683     6372    2      CALL M$TIME (FPT_TIME) WHENALTRETURN DO;
      684     6373    2         CALL XB_RETURN_ORDINAL_RESULT (-1);
      685     6374    2      END;
      686     6375
      687     6376    1      CALL XB_RETURN_ORDINAL_RESULT (uts_time);
      688     6377
      689     6378    1   END gmttouts;

PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:56   
--  Include file information  --

   XUD_UTS_M.:LIB_E04  is referenced.
   B$JIT_C.:LIB_E04  is referenced.
   B$JIT.:LIB_E04  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure GMTTOUTS.

   Procedure GMTTOUTS requires 49 words for executable code.
   Procedure GMTTOUTS requires 24 words of local(AUTO) storage.

    No errors detected in file xb_date_time:6.:XBC3TSI    .

PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:57   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:58   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      5996**DCL      5996--REDEF
B$JIT.ERR.MID
      5903**DCL      5903--REDEF
B$JIT.JRESPEAK
      6064**DCL      6065--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6173**DCL      6173--REDEF    6174--REDEF
B$JIT.PNR
      6077**DCL      6077--REDEF
B$JIT.TSLINE
      6171**DCL      6172--REDEF
B$JIT$
      6305**DCL      5897--IMP-PTR
CP6_GMT
      6313**DCL      6363<>CALL     6367>>ASSIGN
FPT_TIME
      6350**DCL      6368<<ASSIGN   6372<>CALL
FPT_TIME.TSTAMP_
      6353**DCL      6370<<ASSIGN
FPT_TIME.V
      6354**DCL      6369--ASSIGN
FPT_TIME.V_
      6350**DCL      6369<<ASSIGN
FPT_TIME_CONSTANT
      6330**DCL      6368>>ASSIGN
FPT_TIME_CONSTANT.V
      6334**DCL      6330--DCLINIT
GMT_TIME
      6311**DCL      6363>>CALL
GMT_TIME_AS_PTR
      6310**DCL      6311--REDEF    6359<<ASSIGN
PL6.E3A0      #010=GMTTOUTS File=xb_date_time:6.:XBC3TSI                         WED 08/20/97 14:21 Page:59   
GMT_TIME_P
      6309**DCL         7--PROC     6359--ASSIGN
M$TIME
      5570**DCL-ENT  6372--CALL
UTS_TIME
      6312**DCL      6367<<ASSIGN   6370--ASSIGN   6376<>CALL
XB_RETURN_ORDINAL_RESULT
      6307**DCL-ENT  6373--CALL     6376--CALL
XUD$UTS_ADJ_25TH
      6286**DCL-ENT  6363--CALL
