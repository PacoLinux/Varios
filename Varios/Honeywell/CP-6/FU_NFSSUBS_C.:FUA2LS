

11:29 NOV 21 '97 FU_NFSSUBS_C.:FUA2SI                                      1    
    1      /*M* FU_NFSSUBS_C    Equates for NFS as defined by Sun          */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* Program Numbers */
    9      %EQU PROG_PMAP = 100000;
   10      %EQU PROG_NFS = 100003;
   11      %EQU PROG_MOUNT = 100005;
   12
   13      %EQU PROG_SPREAD = 230912; /* Add to program number for 9bit bytes */
   14
   15      /* Port numbers */
   16      %EQU PORT_PMAP = 111;
   17      %EQU PORT_NFS = 2049;
   18
   19      /* Program versions */
   20      %EQU VERS_PMAP = 2;
   21      %EQU VERS_NFS = 2;
   22      %EQU VERS_RPC = 2;
   23      %EQU VERS_MOUNT = 1;
   24
   25      /* Message types */
   26      %EQU TYPE_CALL = 0;
   27      %EQU TYPE_REPLY = 1;
   28
   29      /* Message reply status */
   30      %EQU MSG_ACCEPTED = 0;
   31      %EQU MSG_DENIED = 1;
   32
   33      /* Status to return to the client when a RPC call is accepted */
   34      %EQU SUCCESS = 0;           /* RPC executed successfully */
   35      %EQU PROG_UNAVAIL = 1;      /* Remote hasn't exported program */
   36      %EQU PROG_MISMATCH = 2;     /* Remote can't support version # */
   37      %EQU PROC_UNAVAIL = 3;      /* Program can't support procedure */
11:29 NOV 21 '97 FU_NFSSUBS_C.:FUA2SI                                      2    
   38      %EQU GARBAGE_ARGS = 4;      /* Procedure can't decode parameters */
   39
   40      /* Reasons why a call was rejected */
   41      %EQU RPC_MISMATCH = 0;      /* RPC Version number != 2 */
   42      %EQU AUTH_ERROR = 1;        /* Remote can't authenticate caller */
   43
   44      /* Reasons why authentication failed */
   45      %EQU AUTH_BADCRED = 1;      /* Bad credentials (seal broken) */
   46      %EQU AUTH_REJECTEDCRED = 2; /* Client must begin new session */
   47      %EQU AUTH_BADVERF = 3;      /* Bad verifier (seal broken) */
   48      %EQU AUTH_REJECTEDVERF = 4; /* Verifier rejected or replayed */
   49      %EQU AUTH_TOOWEAK = 5;      /* Rejected for security reasons */
   50
   51      /* Type of authentication */
   52      %EQU AUTH_NULL = 0;
   53      %EQU AUTH_UNIX = 1;
   54      %EQU AUTH_SHORT = 2;
   55
   56      /* TOPLVL values */
   57      %EQU TOPLVL_ALL = 0;
   58      %EQU TOPLVL_MAD = 1;
   59      %EQU TOPLVL_PAD = 2;
   60      %EQU TOPLVL_NONE = 3;
   61
   62      /* NFS Procedure numbers */
   63      %EQU NFSPROC_NULL = 0; /* Always there */
   64      %EQU NFSPROC_GETATTR = 1; /* fhandle -> attrstat */
   65      %EQU NFSPROC_SETATTR = 2; /* sattrargs -> attrstat */
   66      %EQU NFSPROC_ROOT = 3; /* void -> void (obsolete) */
   67      %EQU NFSPROC_LOOKUP = 4; /* diropargs -> diropres */
   68      %EQU NFSPROC_READLINK = 5; /* fhandle -> readlinkres (unimplementable) */
   69      %EQU NFSPROC_READ = 6; /* readargs -> readres */
   70      %EQU NFSPROC_WRITECACHE = 7; /* void -> void (future use) */
   71      %EQU NFSPROC_WRITE = 8; /* writeargs -> attrstat */
   72      %EQU NFSPROC_CREATE = 9; /* createargs -> diropres */
   73      %EQU NFSPROC_REMOVE = 10; /* diropargs -> stat */
   74      %EQU NFSPROC_RENAME = 11; /* renameargs -> stat */
11:29 NOV 21 '97 FU_NFSSUBS_C.:FUA2SI                                      3    
   75      %EQU NFSPROC_LINK = 12; /* linkargs -> stat */
   76      %EQU NFSPROC_SYMLINK = 13; /* symlinkargs -> stat */
   77      %EQU NFSPROC_MKDIR = 14; /* createargs -> diropres */
   78      %EQU NFSPROC_RMDIR = 15; /* diropargs -> stat */
   79      %EQU NFSPROC_READDIR = 16; /* readdirargs -> readdirres */
   80      %EQU NFSPROC_STATFS = 17; /* fhandle -> statfsres */
   81
   82      /* NFS Error Codes */
   83      %EQU NFS_OK = 0;
   84      %EQU NFSERR_PERM = 1;
   85      %EQU NFSERR_NOENT = 2;
   86      %EQU NFSERR_IO = 5;
   87      %EQU NFSERR_NXIO = 6;
   88      %EQU NFSERR_ACCES = 13;
   89      %EQU NFSERR_EXIST = 17;
   90      %EQU NFSERR_NODEV = 19;
   91      %EQU NFSERR_NOTDIR = 20;
   92      %EQU NFSERR_ISDIR = 21;
   93      %EQU NFSERR_FBIG = 27;
   94      %EQU NFSERR_NOSPC = 28;
   95      %EQU NFSERR_ROFS = 30;
   96      %EQU NFSERR_NAMETOOLONG = 63;
   97      %EQU NFSERR_NOTEMPTY = 66;
   98      %EQU NFSERR_DQUOT = 69;
   99      %EQU NFSERR_STALE = 70;
  100      %EQU NFSERR_WFLUSH = 99;
  101
  102      /* File types */
  103      %EQU NFNON = 0;             /* Non-file */
  104      %EQU NFREG = 1;             /* Regular file */
  105      %EQU NFDIR = 2;             /* Directory */
  106      %EQU NFBLK = 3;             /* Block - special device */
  107      %EQU NFCHR = 4;             /* Character - special device */
  108      %EQU NFLNK = 5;             /* Symbolic link */
  109
  110      /* Portmapper procedures */
  111      %EQU PMAPPROC_NULL = 0;           /* void null(void) */
11:29 NOV 21 '97 FU_NFSSUBS_C.:FUA2SI                                      4    
  112      %EQU PMAPPROC_SET = 1;            /* bool set(map) */
  113      %EQU PMAPPROC_UNSET = 2;          /* bool unset(map) */
  114      %EQU PMAPPROC_GETPORT = 3;        /* uint getport(map) */
  115      %EQU PMAPPROC_DUMP = 4;           /* *map dump(void) */
  116      %EQU PMAPPROC_CALLIT = 5;         /* call_result callit(call_args) */
  117
  118      /* Portmapper protocols */
  119      %EQU IPPROTO_TCP = 6;
  120      %EQU IPPROTO_UDP = 17;
  121
  122      /* Mount procedures */
  123      %EQU MOUNTPROC_MNT = 1;           /* fhstatus mount(dirpath) */
  124      %EQU MOUNTPROC_DUMP = 2;          /* mountlist dump(void) */
  125      %EQU MOUNTPROC_UMNT = 3;          /* void unmount(dirpath) */
  126      %EQU MOUNTPROC_UMNTALL = 4;       /* void unmount-all-for-host(void) */
  127      %EQU MOUNTPROC_EXPORT = 5;        /* exportlist export(void) */

