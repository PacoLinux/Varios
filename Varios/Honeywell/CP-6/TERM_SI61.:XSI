/*M* TERM - a program to display the status of logged on terminals */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=3,IND=3,CTI=3,SDI=5,MCL=10,CSI=0,ECI=0 */
TERM: PROC MAIN;
 
/**/
/*
    THE PURPOSE OF THIS PROGRAM IS TO DETERMINE WHAT TERMINALS
    ARE LOGGED ON AND RELATE TO THE USER THE STATUS OF THE TERMINAL
    AND ITS ASSOCIATED SYMBIONTS.
 
*/
 
/*  Stepcc values when a terminal is specified in options:
 
    0 ..... when connected and active
 
    1 ..... when connected but idle
 
    2 ..... when not connected but no symo
 
    3 ..... when not connected but symo is waiting    */
 
 
         %EQU OTHERS# = 4;
         %EQU TERMINALS# = 3;
         %EQU DEVICES# = 2;
         %EQU COMGROUPS# = 1;
         %EQU INSTANCES# = 0;
 
         %INCLUDE CP_6;
         %INCLUDE B$JIT;
         %B$TCB(STCLASS="BASED(B$TCB$)");
         %B$ALT;
         %B$EXCFR;
         %INCLUDE B$TABLES_C;
         %B$XL_UPPER;
         %INCLUDE AZ_MACRO_C;
         %INCLUDE AZ_SUBS_C;
         %INCLUDE KL_SUPER_C;
         %INCLUDE B_ERRORS_C;
         %INCLUDE CP_6_SUBS;
 
DCL 1 TEMP STATIC CALIGNED,
         2 * CHAR(1) INIT('-'),
         2 F1 CHAR(4) INIT(' '),
         2 * CHAR(1) INIT('-'),
         2 F2 CHAR(4) INIT(' ');
DCL TEMP2 REDEF TEMP CHAR(10);
 
DCL M$LO DCB;
 
DCL 1 OUTPUT STATIC,
         2 * CHAR(1) INIT(' '),
         2 NAME CHAR(8),
         2 * CHAR(1) INIT(' '),
         2 FEP CHAR(3),
         2 * CHAR(1) INIT(' '),
         2 PORT CHAR(4),
         2 SUBDEV CHAR(8) INIT(' '),
         2 * CHAR(1) INIT(' '),
         2 DATE CHAR(8),
         2 * CHAR(1) INIT(' '),
         2 TIME CHAR(5),
         2 * CHAR(2) INIT('  '),
         2 STATUS CHAR(7),
         2 * CHAR(1) INIT(' '),
         2 TYPE CHAR(29);
DCL OUT1 REDEF OUTPUT CHAR(80);
 
DCL SYNERR CHAR(0) STATIC INIT(' ***** Syntax error ');
 
DCL TTYPS(0:15) CHAR(16) STATIC INIT(   'Workstation',
                              'Sync',
                              'Async',
                              'Host',
                              'HDLC  link',
                              'Fep',
                              'FepUR',
                              '3270  cluster',
                              'HDLC',
                              '3270  controller',
                              '3270',
                              'HDLC',
                              'HIP   controller',
                              'HIP   cluster',
                              'HIP',
                              'Resrc');
 
DCL INPUT CHAR(256) STATIC;
 
DCL FOUND_S UBIN;
 
DCL SPILL UBIN;
 
DCL N UBIN;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL FOUNDT UBIN;
%EQU MAXTRM=511;
DCL 1 TERMIN(0:%MAXTRM) ALIGNED,
         2 NAME CHAR(8) CALIGNED,
         2 DNAME CHAR(8) CALIGNED,
         2 FEP UBIN(9) CALIGNED,
         2 TYPE UBIN(9) CALIGNED,
         2 PORT UBIN(16) UNAL,
         2 DEV UBIN(10) UNAL,
         2 SDEV UBIN(10) UNAL,
         2 LEV UBIN(6) UNAL,
         2 STT UBIN(6) UNAL,
         2 USAGE UBIN(6) UNAL,
         2 DEVNM CHAR(4) CALIGNED,
         2 TIME UBIN CALIGNED;
DCL 1 SYMB(0:0) BASED(OSRCH$) ALIGNED,
         2 NAME CHAR(8),
         2 STATUS UBIN,
         2 DEVICES UBIN;
DCL OUTPUT$ PTR;
DCL B$JIT$ PTR SYMREF;
 
DCL B$TCB$ PTR SYMREF;
 
DCL X$PARSE ENTRY(1) ALTRET;
 
         %FPT_WRITE(FPTN=WRITE,
                    BUF=OUTPUT,
                    DCB=M$LO,
                    STCLASS=CONSTANT);
 
         %FPT_JOBSTATS(FPTN=FPT_OUT_STATS,
                   CRITERIA=VLP_CRITERIA,
                   ORDER=SRCH,
                   OUTPUT=YES);
 
         %FPT_GDS(FPTN=GDS,
                  STCLASS=CONSTANT,
                  RESULTS=FPT_OUT_STATS.RESULTS_,
                  SEGSIZE=5120);
 
         %VLA_JOBSTATS_OSRCH(FPTN=B$VLA_JOBSTATS_OSRCH,
                   STCLASS="BASED (OUTPUT$)");
 
         %FPT_PRIV(FPTN=FPT_PRIV_DISPJOB,
                   AUTH=YES,PRIV=%PR_DISPJOB#);
 
         %FPT_PRIV(FPTN=FPT_FMS,
                   AUTH=YES,PRIV=%PR_FMSEC#);
 
         %VLP_CRITERIA(FPTN=VLP_CRITERIA,
                   ACCT='        ');
 
         %VLR_JOBSTATS_OSRCH(STCLASS="BASED(OSRCH$)");
DCL OSRCH$ PTR;
 
         %VLP_NAME(FPTN=VLP_NAME,STCLASS=CONSTANT,NAME=':COMAC');
 
         %VLP_ACCT(FPTN=VLP_ACCT,STCLASS=CONSTANT,ACCT=':SYS');
 
         %FPT_TIME(FPTN=CHANGE_TIME,
                   SOURCE=UTS,
                   DEST=LOCAL,
                   DATE=DATE,
                   TIME=TIME,
                   TSTAMP=TIMER);
 
DCL TIMER UBIN STATIC;
DCL TIME CHAR(11)  STATIC;
DCL DATE CHAR(8) STATIC;
 
         %INCLUDE XU_MACRO_C;
DCL PARSE_WORK CHAR(1024) STATIC;
DCL COMMAND UBIN SYMREF;
         %P_PCB(T=INPUT,
                   R=COMMAND,
                   W=PARSE_WORK,
                   WSZ=256,
                   N#=256);
         %PARSE$SYM(NAME=OUTSYM,STCLASS=BASED);
         %PARSE$OUT(NAME=OUTBLK,STCLASS=BASED);
/**/
/*  :COMAC STUFF */
/**/
 
DCL MSG_COUNT SBIN;
 
DCL FOUND BIT(1) UNAL;
 
DCL 1 COM_KEY STATIC,
         2 LEN UBIN BYTE UNAL,
         2 FEX UBIN BYTE UNAL,
         2 DTW,
              3 TW CHAR(4),
              3 D CHAR(4),
         2 * CHAR(246);
 
         %COMACCTNG (NAME=COM_BUF,STCLASS = STATIC);
 
DCL F$COMAC DCB;
 
         %FPT_READ(FPTN=FPT_RDCOM,
                   DCB=F$COMAC,
                   BUF=COM_BUF,
                   KEY=COM_KEY,
                   KEYR=YES,
                   STCLASS=CONSTANT);
 
DCL REC$ PTR;
 
         %FPT_OPEN(FPTN=OPEN_COMAC,
                   STCLASS=CONSTANT,
                   FUN=IN,
                   DCB=F$COMAC,
                   NAME=VLP_NAME,
                   ACCT=VLP_ACCT,
                   SHARE=ALL,
                   ASN=FILE);
 
         %FPT_EXIT(FPTN=CODE);
 
/**/
 
%EJECT;
   CALL M$GDS(GDS);
   OSRCH$=VBASE(BITVECT(FPT_OUT_STATS.RESULTS_));
 
   CALL M$SPRIV(FPT_PRIV_DISPJOB) ALTRET(ABORT);
 
   CALL M$SPRIV(FPT_FMS);
 
   CALL M$OPEN(OPEN_COMAC) ALTRET(ABORT);
 
   OUT1=' ';
   CALL M$WRITE(WRITE);
   OUT1=' Name     Fep line         Time on         Status  Dtype';
   CALL M$WRITE(WRITE);
   OUT1=' ';
   CALL M$WRITE(WRITE);
   FOUNDT = 0;                          /* # OF TERMINALS                     */
 
   FOUND_S = 1;                         /* # OF SYMBIONTS (1 is lowest index) */
 
   CALL PEEKO;                          /* FIND OUTPUT SYMBIONTS              */
 
   CALL TERMKEY;                        /* FIND TERMINALS                     */
 
   INPUT=B$JIT.CCBUF;
   CALL X$PARSE(P_PCB) ALTRET(SYNTAX);
   IF P_PCB.OUT$->OUTBLK.NSUBLKS>0
   THEN
   DO;
      CALL SPECIAL;
      END;
   ELSE
   DO;
      CALL OCMSG;
      END;
 
 
 
   CALL M$EXIT;
 
ABORT:
   OUT1='you need FMR priv!';
   CALL M$WRITE(WRITE);
 
   CALL M$ERR;
 
 
SYNTAX:
   OUT1=SYNERR;
   CALL M$WRITE(WRITE);
   CALL M$ERR;
 
 
%EJECT;
 
TERMKEY: PROC;
 
/**/
/*
    THE PURPOSE OF THIS PROCEDURE IS TO FIND OUT WHAT TERMINALS ARE
    CONNECTED TO THE SYSTEM AT THE PRESENT TIME
*/
/**/
   COM_BUF='0'B;
   COM_BUF.ASSOCTRM='LOCAL';
   COM_BUF.TNAME='LOCAL';
   COM_BUF.ATYP=%KLAT_TRM#;
 
   DO UNTIL COM_KEY.FEX>100 OR FOUNDT>%MAXTRM;
      CALL LIST;
      CALL M$READ(FPT_RDCOM) ALTRET(RD_ALT1);
      END;
 
RD_ALT1: RETURN;
%EJECT;
LIST: PROC;
 
 
   N=1;
 
   TERMIN.STT(FOUNDT)=3;
   IF COM_BUF.USEAGE<%AZ_USECG# THEN DO; /* Make sure there's a SYMB entry */
      DO WHILE(N<FOUND_S);
         IF COM_BUF.TNAME=SYMB.NAME(N)
         THEN EXIT;
         N=N+1;
         END;
      IF N=FOUND_S THEN DO;
         SYMB(N)='0'B;
         SYMB.NAME(N)=COM_BUF.TNAME;
         FOUND_S=FOUND_S+1;
         END;
      TERMIN.STT(FOUNDT)=MOD(SYMB.STATUS(N),4);
      SYMB.DEVICES(N)=SYMB.DEVICES(N)+1;
      IF COM_BUF.ATYP~=%KLAT_TRM# THEN EXIT; /* Note if it's a real terminal */
      SYMB.STATUS(N)=SYMB.STATUS(N)+4;
      END;
 
   TERMIN.PORT(FOUNDT)=COM_BUF.TERMID.CHANNEL;
   TERMIN.DEV(FOUNDT)=COM_BUF.TERMID.SUBDEVICE;
   TERMIN.SDEV(FOUNDT)=COM_BUF.TERMID.SUBSUBDEVICE;
   TERMIN.LEV(FOUNDT) = COM_BUF.TERMID.LEV;
   TERMIN.USAGE(FOUNDT) = COM_BUF.USEAGE;
   TERMIN.DEVNM(FOUNDT) = COM_BUF.DEVNM;
   DO CASE(COM_BUF.ATYP);
   CASE %KLAT_LINE#;
      COM_BUF.TTYP = 7;
   CASE %KLAT_LNKLINE#;
      COM_BUF.TTYP = 4;
   CASE %KLAT_NETWORK#;
      COM_BUF.TTYP = 8;
   CASE %KLAT_CG#;
      IF COM_BUF.ACTYP=0 THEN COM_BUF.TTYP=3;
   CASE (%KLAT_RES#);
      IF COM_BUF.TTYP=0 THEN COM_BUF.TTYP=15;
   END;
   TERMIN.TYPE(FOUNDT)=COM_BUF.TTYP;
   IF COM_BUF.USEAGE = %AZ_USETP#
   THEN
   DO;
      TERMIN.NAME(FOUNDT) = COM_BUF.DEVNM;
      TERMIN.DNAME(FOUNDT) = COM_BUF.INSTANCE;
      END;
   ELSE
   DO;
      TERMIN.NAME(FOUNDT) = COM_BUF.ASSOCTRM;
      IF COM_BUF.USEAGE = %AZ_USECG# THEN DO;
         TERMIN.DNAME(FOUNDT) = COM_BUF.CGNAME.TXT;
         TERMIN.DEVNM(FOUNDT) = SUBSTR(COM_BUF.CGNAME.TXT,8);
         END;
      ELSE IF COM_BUF.USEAGE > %AZ_USERES#
         THEN TERMIN.DNAME(FOUNDT) = COM_BUF.ASSOCTRM;
         ELSE TERMIN.DNAME(FOUNDT) = COM_BUF.TNAME;
      END;
   TERMIN.TIME(FOUNDT)=COM_BUF.UTS;
   TERMIN.FEP(FOUNDT)=COM_BUF.FEX;
   FOUNDT=FOUNDT+1;
END;
 
END TERMKEY;
%EJECT;
 
PEEKO: PROC;
 
/**/
/*
    THE PURPOSE OF THIS PROCEDURE IS TO FIND WHAT OUTPUT IS CURRENTLY
    ON THE SYSTEM
*/
/**/
 
   CALL M$JOBSTATS(FPT_OUT_STATS) WHENALTRETURN DO;
      CALL M$GDS (GDS) ALTRET(SOME);
      CALL M$RETRY;
      END;
SOME:;
   OUTPUT$=ADDR(VLR_JOBSTATS_OSRCH.F);
 
   DO SPILL=1 TO VLR_JOBSTATS_OSRCH.FOUND;
      N=1;
      DO WHILE(N<FOUND_S);
         IF SYMB.NAME(N)=B$VLA_JOBSTATS_OSRCH.WOD THEN GOTO NEXT;
         N=N+1;
         END;
      SYMB.NAME(FOUND_S)=B$VLA_JOBSTATS_OSRCH.WOD;
      SYMB.STATUS(FOUND_S)=1;
      SYMB.DEVICES(FOUND_S)=0;
      FOUND_S=FOUND_S+1;
NEXT: IF B$VLA_JOBSTATS_OSRCH.FLG.DEVAVAIL
         AND B$VLA_JOBSTATS_OSRCH.AHEAD=0
      THEN SYMB.STATUS(N)=2;
      OUTPUT$=PINCRC(OUTPUT$,SIZEC(VLR_JOBSTATS_OSRCH.F(0)));
      END;
 
NONE: RETURN;
 
 
END PEEKO;
%EJECT;
FMT_OUT: PROC (X);
 
DCL HEXES(0:15) CHAR(1) UNAL CONSTANT INIT
('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
DCL STATII(0:3) CHAR(8) CONSTANT INIT('Idle','Frmwait','Active',' ');
DCL X SBIN;
DCL INDEX_ SBIN;
 
   INDEX_=X;
   OUT1=' ';
   OUTPUT.STATUS=STATII(TERMIN.STT(INDEX_));
   OUTPUT.TYPE=TTYPS(TERMIN.TYPE(INDEX_));
   OUTPUT.NAME=TERMIN.NAME(INDEX_);
   CALL INDEX(I,'  ',OUTPUT.TYPE,5);
   I = I+1;
   DO CASE(TERMIN.USAGE (INDEX_));
   CASE (%AZ_USETP#);
      SUBSTR(OUTPUT.TYPE,I,1)='[';
      SUBSTR(OUTPUT.TYPE,I+1,8)=TERMIN.DNAME(INDEX_);
      SUBSTR(OUTPUT.TYPE,I+9,1)=']';
   CASE (%AZ_USEOCCG#, %AZ_USEISCG#, %AZ_USEOSCG#, %AZ_USERES#);
      SUBSTR(OUTPUT.TYPE,I,4)=TERMIN.DEVNM(INDEX_);
      SUBSTR(OUTPUT.TYPE,I+4,1)='@';
      SUBSTR(OUTPUT.TYPE,I+5,8)=TERMIN.DNAME(INDEX_);
   CASE (%AZ_USECG#);
      SUBSTR(OUTPUT.TYPE,I,3)='CG/';
      SUBSTR(OUTPUT.TYPE,I+3,8)=TERMIN.DNAME(INDEX_);
      SUBSTR(OUTPUT.TYPE,I+11,4)=TERMIN.DEVNM(INDEX_);
   END;
 
   IF OUTPUT.NAME='LOCAL' THEN RETURN;
   TIMER=TERMIN.TIME(INDEX_);
   CALL M$TIME(CHANGE_TIME);
   OUTPUT.TIME=TIME;
   OUTPUT.DATE=DATE;
 
   IF TERMIN.FEP(INDEX_)=0 THEN RETURN;
   CALL BINCHAR(OUTPUT.FEP,TERMIN.FEP(INDEX_));
/* suppress leading 0s on fep */
 
   IF SUBSTR(OUTPUT.FEP,0,1)='0' THEN SUBSTR(OUTPUT.FEP,0,1)=' ';
   IF SUBSTR(OUTPUT.FEP,1,1)='0' THEN SUBSTR(OUTPUT.FEP,1,1)=' ';
 
   TIMER=TERMIN.PORT(INDEX_);
   SUBSTR(OUTPUT.PORT,0,1)=HEXES(TIMER/4096);
   SUBSTR(OUTPUT.PORT,1,1)=HEXES(MOD(TIMER,4096)/256);
   SUBSTR(OUTPUT.PORT,2,1)=HEXES(MOD(TIMER,256)/16);
   SUBSTR(OUTPUT.PORT,3,1)=HEXES(MOD(TIMER,16));
   IF TERMIN.LEV(INDEX_) > 1
   THEN
   DO;
      CALL BINCHAR(TEMP.F1,TERMIN.DEV(INDEX_));
      CALL BINCHAR(TEMP.F2,TERMIN.SDEV(INDEX_));
      I=0;
      DO WHILE(SUBSTR(TEMP.F1,I,1)='0' AND I<3);
         SUBSTR(TEMP.F1,I,1)=' ';
         I=I+1;
         END;
      I=0;
      DO WHILE(SUBSTR(TEMP.F2,I,1)='0' AND I<3);
         SUBSTR(TEMP.F2,I,1)=' ';
         I=I+1;
         END;
      J=0;
      IF TERMIN.LEV(INDEX_) = 3
      THEN
         K = SIZEC(TEMP2);
      ELSE
         K = SIZEC(TEMP2)/2;
      DO I=0 TO K-1;
         IF SUBSTR(TEMP2,I,1) ~= ' '
         THEN
         DO;
            SUBSTR(OUTPUT.SUBDEV,J,1)=SUBSTR(TEMP2,I,1);
            J=J+1;
            END;
         END;                           /* do if possible subdev cnvsn */
      END;
 
   RETURN;
 
END FMT_OUT;
%EJECT;
 
OCMSG: PROC ALTRET;
 
/**/
/*
    THE PURPOSE OF THIS PROCEDUR IS TO FIND OUT IF SYMBO EXISTS FOR A
    TERMINAL NOT CURRENTLY LOGGED ON. IF THE TERMINAL IS LOGGED THEN
    OCMSG ALTRETS, ELSE NORMAL RETURN OCCURS.
*/
/**/
 
 
   N=0;
   DO WHILE(N<FOUNDT);
 
 
      CALL FMT_OUT(N);
 
      I=1;
      DO WHILE I<FOUND_S;
 
         IF TERMIN.NAME(N)=SYMB.NAME(I) THEN DO;
            IF SYMB.STATUS(I)>3 AND TERMIN.USAGE(N)~=%AZ_USETRM#
            THEN GOTO NEXT1;
            GOTO NEXT;
            END;
         I=I+1;
 
         END;
 
NEXT: CALL M$WRITE(WRITE);
NEXT1: N=N+1;
      END;
 
/* FIND IF OUTPUT IS WAITING FOR TERMINAL */
 
   N=1;
   OUT1=' ';
   OUTPUT.FEP='***';
   OUTPUT.TIME='N.C.';
   OUTPUT.STATUS='Waiting';
   DO WHILE(N<FOUND_S);
 
      IF SYMB.DEVICES(N)=0 THEN DO;
         OUTPUT.NAME=SYMB.NAME(N);
         CALL M$WRITE(WRITE);
         END;
 
      N=N+1;
      END;
 
 
END OCMSG;
%EJECT;
SPECIAL: PROC;
 
DCL X UBIN;
DCL Y UBIN;
DCL STATII(0:3) CHAR(8) CONSTANT INIT('Active','Idle',' ','Waiting');
DCL TERMINAL CHAR(8);
DCL TRMTMP CHAR(5);
 
   X=0;
 
   DO WHILE(X<P_PCB.OUT$->OUTBLK.NSUBLKS);
 
      DO CASE(P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTBLK.CODE);
 
      CASE(%TERMINALS#);
 
         K=-1;
         OUT1=' ';
         TERMINAL=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT;
         OUTPUT.NAME=TERMINAL;
 
FIND_TERM: CODE.V.STEPCC#=1;
         DO I=1 TO FOUND_S BY 1;
            IF TERMINAL=SYMB.NAME(I)
            THEN IF MOD(SYMB.STATUS(I),4)>0 THEN CODE.V.STEPCC#=0;
            END;
 
         IF K<0 THEN DO N=0 TO FOUNDT-1 BY 1;
            IF TERMIN.DNAME(N)=TERMINAL
            THEN
            DO;
               IF TERMIN.USAGE(N)=%AZ_USETRM# THEN K=N;
               ELSE IF TERMIN.USAGE(N)<%AZ_USECG# AND K<0 THEN K=N;
               END;                     /* DO IF MATCH FOUND */
            END;                        /* DO N */
 
         IF K<0 THEN DO N=0 TO FOUNDT-1;
/* Try a NAME search if WSN search failed */
            IF TERMIN.NAME(N)=TERMINAL THEN DO;
               K=N;
               TERMINAL=TERMIN.DNAME(N);
               GOTO FIND_TERM;          /* Recheck for output */
               END;
            END;
 
         IF K<0 THEN DO;
            CODE.V.STEPCC#=3-CODE.V.STEPCC#;
            OUTPUT.DATE='N.C.';
            END;
 
         ELSE CALL FMT_OUT (K);
 
DEV_LOOP: DO WHILE '1'B;
            OUTPUT.STATUS=STATII(CODE.V.STEPCC#);
            CALL M$WRITE(WRITE);
            IF K<0 THEN EXIT;
            IF TERMINAL~=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT THEN EXIT;
            IF TERMIN.USAGE(K)=%AZ_USETRM# THEN EXIT;
            DO UNTIL TERMINAL=TERMIN.DNAME(K);
               K=K+1;
               IF K=FOUNDT THEN EXIT DEV_LOOP;
               END;
            CALL FMT_OUT (K);
            END;
 
      CASE(%DEVICES#);
 
         TERMINAL=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT;
         DO N=0 TO FOUNDT-1;
 
            IF TERMIN.DNAME(N)=TERMINAL OR TERMINAL=' '
               AND (TERMIN.USAGE(N)=%AZ_USERES# OR TERMIN.USAGE(N)<%AZ_USECG#)
            THEN DO;
               CALL FMT_OUT (N);
               CALL M$WRITE(WRITE);
               END;
            END;
 
      CASE(%COMGROUPS#);
 
         TERMINAL=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT;
         DO N=0 TO FOUNDT-1;
 
            IF (TERMIN.DNAME(N)=TERMINAL OR TERMINAL=' ')
               AND TERMIN.USAGE(N)=%AZ_USECG#
            THEN DO;
               CALL FMT_OUT (N);
               CALL M$WRITE(WRITE);
               END;
            END;
 
      CASE(%INSTANCES#);
 
         TERMINAL=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT;
         DO N=0 TO FOUNDT-1;
 
            IF (TERMIN.DNAME(N)=TERMINAL OR TERMINAL=' ')
               AND TERMIN.USAGE(N)=%AZ_USETP#
            THEN DO;
               CALL FMT_OUT (N);
               CALL M$WRITE(WRITE);
               END;
            END;
 
      CASE(%OTHERS#);
 
         CALL XLATE(TERMINAL,B$XL_UPPER,
            P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT);
         DO N=0 TO FOUNDT-1;
 
            IF TERMIN.USAGE(N)>%AZ_USERES# OR TERMINAL~=' '
            THEN DO;
               CALL FMT_OUT (N);
               CALL XLATE(TRMTMP,B$XL_UPPER,SUBSTR(OUTPUT.TYPE,0,5));
               IF TERMINAL=' ' OR TERMINAL=TRMTMP
               THEN CALL M$WRITE(WRITE);
               END;
            END;
 
      END;
 
TOP:  X=X+1;
 
      END;
   CALL M$EXIT(CODE);
END;
END TERM;
