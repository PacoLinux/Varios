

CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             #include <assert.h>
        2         2             #include "em_mnem.h"
        3         3             #include "cg_tree.h"
        4         4             #include "cg_inst.h"
        5         5             #include "cg_funs.h"
        6         6
        7         7             static void zbk_gen_prolog (int);
        8         8             static void zbk_end_of_function (void);
        9         9                    void zbk_gen_xec_chain (void);
       10        10             static void zbk_gen_xec_node (EXPR);
       11        11             static void kill (EXPR);
       12        12             static void move (EXPR, int, EXPR, int, long);
       13        13             static int  type_of_move  (EXPR, int, EXPR, int, long);
       14        14             static int  type_of_sexpr (EXPR);
       15        15             static int  type_of_dadr  (int, EXPR, long);
       16        16                    EXPR zbk_lfr_node (EXPR, int);
       17        17             static int  zbk_try_op_stored (EXPR);
       18        18
       19        19             extern int  zbk_gen_builtin (EXPR);
       20        20             extern void zbk_gen_switch (EXPR);
       21        21             extern void zbk_compare_zxx (EXPR);
       22        22             extern void zbk_compare_bxx (EXPR);
       23        23             extern ADR  zbk_expr_to_byte_adr_len (EXPR, int);
       24        24             extern void zbk_enter_var_tbl (char *, long, int, int);
       25        25             extern struct VAR_TBL * zbk_var_tbl_search (char *, long);
       26        26             extern void zbk_declare_mlrx_reg (ADR);
       27        27             extern void zbk_reload_mlrx_reg (void);
       28        28             extern void zbk_declare_lfr_reg (EXPR, int);
       29        29             extern void zbk_tempify_lfr_reg (void);
       30        30             extern void zbk_spoil_hold_var  (EXPR);
       31        31             extern void zbk_spoil_hold_all  (void);
       32        32
       33        33             extern int debug;
       34        34             extern EXPR xec_head, xec_end;
       35        35             extern int inst_store_reg[];
       36        36             extern EXPR first_xec_node;
       37        37             extern int temp_size_reg[];
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38
       39        39             unsigned long line_number=0;
       40        40             static char name_entry[] = "_XBC_AUTO_x";
       41        41             static char name_retm [] = "_XBI_MARET";
       42        42             static char name_retf [] = "_XBC_FARET";
       43        43
       44        44             extern int zbk_auto_info[7];
       45        45             extern char function_name[];
       46        46
       47        47             static void zbk_gen_prolog (int nlocals)
       48        48             {
       49        49    1        int nargs;
       50        50    1
       51        51    1           zbk_set_auto_params (-1, nlocals);
       52        52    1
       53        53    1           zbk_send_use (USE_TXT);
       54        54    1           zbk_send_def_lbl (function_name);
       55        55    1           nargs = ((zbk_auto_info[3]+3)>>2)-4;
       56        56    1           name_entry[10] = (nargs < 6)? '0'+nargs : 'N';
       57        57    1           instruc (INST_TSX0, S, name_entry);
       58        58    1           zbk_send_auto (nargs);
       59        59    1
       60        60    1           zbk_init_literals();
       61        61    1           zbk_reset_reg_alloc();
       62        62    1        }
       63        63
       64        64             static void zbk_end_of_function (void)
       65        65             {
       66        66    1        int w;
       67        67    1           zbk_gen_literals ();
       68        68    1           w = (zbk_auto_info[6]+7)/8*2;
       69        69    1           zbk_send_def_fwd ("$AUTOSIZE", w);
       70        70    1        }
       71        71
       72        72             void zbk_gen_xec_chain (void)
       73        73             {
       74        74    1        EXPR node;
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       75        75    1
       76        76    1           node = first_xec_node;
       77        77    1           while (node) {
       78        78    2              zbk_gen_xec_node (node);
       79        79    2              node = node->xec_chain;
       80        80    2           }
       81        81    1        }
       82        82
       83        83             static void zbk_gen_xec_node (EXPR node)
       84        84             {
       85        85    1        ADR adr, aadr, fadr, sadr, dadr;
"zbk$cg_gen:c.:ZBC3TSI", line 85: (warning) identifier "adr" is not used
       86        86    1        EXPR lfr;
       87        87    1        int reg, Preg, len;
"zbk$cg_gen:c.:ZBC3TSI", line 87: (warning) identifier "Preg" is not used
       88        88    1        char *name;
       89        89    1
       90        90    1           zbk_reset_temps ();
       91        91    1           zbk_send_use (USE_TXT);
       92        92    1
       93        93    1           switch (node->opcode) {
       94        94    2           case op_pro:
       95        95    2              zbk_gen_prolog((int)node->argval);
       96        96    2              return;
       97        97    2           case op_end:
       98        98    2              zbk_end_of_function();
       99        99    2              return;
      100       100    2
      101       101    2           case op_fil:
      102       102    2              zbk_send_fil (node->argstr);
      103       103    2              return;
      104       104    2           case op_lin:
      105       105    2              line_number = node->argval;
      106       106    2              goto Lin_1;
      107       107    2           case op_lni:
      108       108    2              line_number = (line_number+1) & 0x00003ffffL;
      109       109    2           Lin_1:
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      110       110    2              zbk_send_lin (line_number);
      111       111    2              return;
      112       112    2
      113       113    2           case op_kil:
      114       114    2              kill (node);
      115       115    2              return;
      116       116    2
      117       117    2           case op_stl:
      118       118    2              if (4 == type_of_dadr (0,node->lf,0)) {
      119       119    3                 zbk_enter_var_tbl (0, node->argval, 1, 4);
      120       120    3              }
      121       121    2           case op_ste:
      122       122    2              if (zbk_try_op_stored (node)) return;
      123       123    2              move (node->lf, 0, node, 4, 0L);
      124       124    2              return;
      125       125    2           case op_sdl:
      126       126    2           case op_sde:
      127       127    2              move (node->lf, 0, node, 8, 0L);
      128       128    2              return;
      129       129    2           case op_sti:
      130       130    2              move (node->lf, 1, node->rt, node->argval, 0L);
      131       131    2              return;
      132       132    2           case op_stf:
      133       133    2              move (node->lf, 1, node->rt, 4, node->argval);
      134       134    2              return;
      135       135    2           case op_sdf:
      136       136    2              move (node->lf, 1, node->rt, 8, node->argval);
      137       137    2              return;
      138       138    2           case op_sil:
      139       139    2              node->opcode = op_lol;
      140       140    2              move (node->lf, 1, node, 4, 0L);
      141       141    2              return;
      142       142    2
      143       143    2           case op_blm:
      144       144    2              sadr = expr_is_byte_adr (node->lf);
      145       145    2              dadr = expr_is_byte_adr (node->rt);
      146       146    2              len  = node->argval;
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      147       147    2              instruc (INST_MLR, ALAL, sadr,len, dadr,len);
      148       148    2              zbk_release_adr_xp (sadr);
      149       149    2              zbk_release_adr_xp (dadr);
      150       150    2              return;
      151       151    2
      152       152    2           case op_inl:
      153       153    2           case op_ine:
      154       154    2              instruc (INST_AOS, A, node);
      155       155    2              return;
      156       156    2           case op_del:
      157       157    2           case op_dee:
      158       158    2              reg = zbk_allocate_reg (IREGS);
      159       159    2              instruc (-1,
      160       160    2                 INST_LCa, RNT, reg, 1, TAG_DL,
      161       161    2                 INST_ASa, RA,  reg, node,
      162       162    2                 -1);
      163       163    2              zbk_release_regn (reg);
      164       164    2              return;
      165       165    2           case op_zrl:
      166       166    2           case op_zre:
      167       167    2              instruc (INST_STZ, A, node);
      168       168    2              return;
      169       169    2
      170       170    2           case op_zlt:
      171       171    2           case op_zle:
      172       172    2           case op_zeq:
      173       173    2           case op_zne:
      174       174    2           case op_zge:
      175       175    2           case op_zgt:
      176       176    2              zbk_tempify_lfr_reg ();
      177       177    2              zbk_compare_zxx (node);
      178       178    2              return;
      179       179    2
      180       180    2           case op_blt:
      181       181    2           case op_ble:
      182       182    2           case op_beq:
      183       183    2           case op_bne:
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      184       184    2           case op_bge:
      185       185    2           case op_bgt:
      186       186    2              zbk_tempify_lfr_reg ();
      187       187    2              zbk_compare_bxx (node);
      188       188    2              return;
      189       189    2
      190       190    2           case op_bra:
      191       191    2              zbk_tempify_lfr_reg ();
      192       192    2              instruc (INST_TRA, A, node);
      193       193    2              return;
      194       194    2
      195       195    2           case op_ilb:
      196       196    2              zbk_tempify_lfr_reg ();
      197       197    2              zbk_send_def_lbl (node->argstr);
      198       198    2              return;
      199       199    2
      200       200    2           case op_mon:
      201       201    2              zbk_tempify_lfr_reg ();
      202       202    2              reg = zbk_gen_builtin (node);
      203       203    2              if (!reg) return;
      204       204    2
      205       205    2              /* lfr */
      206       206    2              lfr = zbk_lfr_node (node,1);
      207       207    2              if (lfr)
      208       208    2                 zbk_declare_lfr_reg (lfr, reg);
      209       209    2              else
      210       210    2                 zbk_release_regn (reg);
      211       211    2              return;
      212       212    2
      213       213    2           case op_cal:
      214       214    2              fadr = node;
      215       215    2              reg = 0;
      216       216    2              goto Cal_1;
      217       217    2
      218       218    2           case op_cai:
      219       219    2              zbk_tempify_lfr_reg ();
      220       220    2              reg = zbk_expr_to_reg (node->rt, IREGS);
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       221    2              fadr = zbk_make_adr_abs_x (0L, reg-TAG_A+TAG_AU);
      222       222    2
      223       223    2           Cal_1:
      224       224    2              zbk_tempify_lfr_reg ();
      225       225    2              if (node->lf) {
      226       226    3                 aadr  = expr_is_word_adr (node->lf);
      227       227    3                 instruc (INST_EPPRn, RA, REG_P0, aadr);
      228       228    3                 zbk_release_adr_xp (aadr);
      229       229    3              }
      230       230    2              instruc (-1,
      231       231    2                 INST_EPPRn, RC, REG_P1, (long)(node->n)<<16,
      232       232    2                 INST_TSX1,  A,  fadr,
      233       233    2                 INST_LDa,   RT, REG_Q, TAG_DL,
      234       234    2                 -1);
      235       235    2              zbk_release_regn (reg);
      236       236    2
      237       237    2              /* lfr */
      238       238    2              lfr = zbk_lfr_node (node,1);
      239       239    2              if (lfr) {
      240       240    3                 if      (lfr->argval == 4) reg = REG_Q;
      241       241    3                 else if (lfr->argval == 8) reg = REG_DF;
      242       242    3                 zbk_allocate_regn (reg);
      243       243    3                 zbk_declare_lfr_reg (lfr, reg);
      244       244    3              }
      245       245    2              return;
      246       246    2
      247       247    2           case op_lfr:
      248       248    2           case op_reg:
      249       249    2              break;
      250       250    2
      251       251    2           case op_lol:
      252       252    2           case op_ldl:
      253       253    2              zbk_fatal ("shouldnt have seen this op=%d", node->opcode);
      254       254    2
      255       255    2           case op_ret:
      256       256    2              switch (node->argval) {
      257       257    3              case 1:  reg = zbk_expr_to_reg (node->lf, 1L<<REG_Q);
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       258    3                       instruc (INST_ANa, RNT, reg, 0777, TAG_DL);
      259       259    3                       break;
      260       260    3              case 4:  reg = zbk_expr_to_reg (node->lf, 1L<<REG_Q);
      261       261    3                       break;
      262       262    3              case 8:  reg = zbk_expr_to_reg (node->lf, 1L<<REG_DF);
      263       263    3                       break;
      264       264    3              case 0:  reg=0;  break;
      265       265    3              default: zbk_fatal ("gen: unimplemented ret %d!", node->argval);
      266       266    3              }
      267       267    2
      268       268    2              name = (strcmp(function_name,"main")==0)? name_retm : name_retf;
      269       269    2              instruc (INST_TSX2, S, name);
      270       270    2              zbk_release_regn (reg);
      271       271    2              return;
      272       272    2
      273       273    2           case op_csa:
      274       274    2           case op_csb:
      275       275    2              zbk_gen_switch (node);
      276       276    2              return;
      277       277    2
      278       278    2           default: zbk_fatal ("gen: unimplemented opcode %d!", node->opcode);
      279       279    2           }
      280       280    1        }
      281       281
      282       282             static void kill (EXPR node)
      283       283             {
      284       284    1        int len;
      285       285    1        ADR adr;
      286       286    1        EXPR nodelf, nodex;
      287       287    1
      288       288    1           nodelf = node->lf;
      289       289    1           node->lf = 0;
      290       290    1           len = zbk_size_of_expr (nodelf);
      291       291    1           adr = zbk_make_adr_temp (len);
      292       292    1           zbk_harden_temp();
      293       293    1           move (nodelf, 0, adr, len, 0L);
      294       294    1
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       295    1           if (len==4) {
      296       296    2              node->opcode = op_lol;
      297       297    2              node->argval = adr->argval;
      298       298    2              node->pr     = adr->pr;
      299       299    2              node->argstr = 0;
      300       300    2           }
      301       301    1           else if (len==8) {
      302       302    2              node->opcode = op_ldl;
      303       303    2              node->argval = adr->argval;
      304       304    2              node->pr     = adr->pr;
      305       305    2              node->argstr = 0;
      306       306    2           }
      307       307    1           else {
      308       308    2              nodex = zbk_get_node();
      309       309    2              nodex->opcode = op_lal;
      310       310    2              nodex->argval = adr->argval;
      311       311    2              nodex->pr     = adr->pr;
      312       312    2              nodex->argstr = 0;
      313       313    2
      314       314    2              node->opcode = op_loi;
      315       315    2              node->argval = len;
      316       316    2              node->lf     = nodex;
      317       317    2           }
      318       318    1
      319       319    1           /* we need to fix BOTH nodes because of the possibility
      320       320    1              of trying to re-evaluate a node which has been both
      321       321    1              KILLed and DUPlicated, such as in an imbedded, indexed
      322       322    1              assignment:
      323       323    1                 i = (a[i]=b[i]);
      324       324    1           */
      325       325    1           *nodelf = *node;
      326       326    1        }
      327       327
      328       328             /****************************************************/
      329       329
      330       330             static void move (EXPR sexpr, int indirect, EXPR dadr, int len, long ofs)
      331       331             {
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       332    1        ADR sadr;
      333       333    1        int sreg, type;
      334       334    1
      335       335    1           type = type_of_move (sexpr, indirect, dadr, len, ofs);
      336       336    1           if (type==4)
      337       337    1           {
      338       338    2              if (indirect)
      339       339    2                 dadr = expr_is_word_adr (dadr);
      340       340    2              dadr->argval += ofs;
      341       341    2              sreg = zbk_expr_to_reg (sexpr, IREGS|ALL_PREGS|(1L<<REG_F));
      342       342    2              instruc (inst_store_reg[sreg], RA, sreg, dadr);
      343       343    2              zbk_release_regn (sreg);
      344       344    2              zbk_release_adr_xp (dadr);
      345       345    2           }
      346       346    1           else if (type==8)
      347       347    1           {
      348       348    2              if (indirect)
      349       349    2                 dadr = expr_is_word_adr (dadr);
      350       350    2              dadr->argval += ofs;
      351       351    2              sreg = zbk_expr_to_reg (sexpr, DWORD_REGS);
      352       352    2              instruc (inst_store_reg[sreg], RA, sreg, dadr);
      353       353    2              zbk_release_regn (sreg);
      354       354    2              zbk_release_adr_xp (dadr);
      355       355    2           }
      356       356    1           else if (type==1)
      357       357    1           {
      358       358    2              if (indirect)
      359       359    2                 dadr = expr_is_byte_adr (dadr);
      360       360    2              dadr->argval += ofs;
      361       361    2
      362       362    2              zbk_declare_mlrx_reg (dadr);
      363       363    2              sadr = zbk_expr_to_byte_adr_len (sexpr, len);
      364       364    2              zbk_reload_mlrx_reg ();
      365       365    2
      366       366    2              instruc (INST_MLR, ALAL, sadr,len, dadr,len);
      367       367    2              zbk_release_adr_xp (sadr);
      368       368    2              zbk_release_adr_xp (dadr);
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      369       369    2           }
      370       370    1           else zbk_fatal("move: unknown type =", type);
      371       371    1
      372       372    1           if (indirect) /* zbk_spoil_hold_all () */ ;
      373       373    1           else          zbk_spoil_hold_var (dadr);
      374       374    1        }
      375       375
      376       376             static int type_of_move (EXPR sexpr, int ind, EXPR dadr, int len, long ofs)
      377       377             {
      378       378    1        int st, dt;
      379       379    1
      380       380    1           if (len!=4 && len!=8) return 1;
      381       381    1           st = type_of_sexpr (sexpr);
      382       382    1           dt = type_of_dadr (ind, dadr, ofs);
      383       383    1           if (len==8 && st>=8 && dt>=8) return 8;
      384       384    1           if (len==4 && st>=4 && dt>=4) return 4;
      385       385    1           return 1;
      386       386    1        }
      387       387
      388       388             static int type_of_sexpr (EXPR node)
      389       389             {
      390       390    1           int nt, st=99;
      391       391    1           nt = zbk_size_of_expr (node);
      392       392    1           switch (node->opcode) {
      393       393    2           case op_loi:
      394       394    2           case op_lil:
      395       395    2           case op_lof:
      396       396    2           case op_ldf:
      397       397    2              st = type_of_dadr (0, node, 0L);
      398       398    2           }
      399       399    1           if (nt>=8 && st>=8) return 8;
      400       400    1           if (nt>=4 && st>=4) return 4;
      401       401    1           return 1;
      402       402    1        }
      403       403
      404       404             static int type_of_dadr (int depth, EXPR node, long ofs)
      405       405             {
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      406       406    1           struct VAR_TBL *p;
      407       407    1
      408       408    1        next:
      409       409    1           switch (node->opcode) {
      410       410    2           case op_stl:
      411       411    2           case op_ste:
      412       412    2              return 4;
      413       413    2
      414       414    2           case op_sdl:
      415       415    2           case op_sde:
      416       416    2              return 8;
      417       417    2
      418       418    2           case op_lal:
      419       419    2           case op_adr:
      420       420    2              ofs += node->argval;
      421       421    2           case op_lae:
      422       422    2              if ((ofs&7)==0) return 8;
      423       423    2              if ((ofs&3)==0) return 4;
      424       424    2              return 1;
      425       425    2
      426       426    2           case op_lpi:
      427       427    2              return 8;
      428       428    2
      429       429    2           case op_lil:
      430       430    2              depth ++;
      431       431    2           case op_lol:
      432       432    2           case op_loe:
      433       433    2              p = zbk_var_tbl_search (node->argstr, node->argval);
      434       434    2              if (!p) return 1;
      435       435    2              else
      436       436    2                 if (depth < p->depth) return 4;         /* = ptr  */
      437       437    2                 else                  return p->align;  /* = data */
      438       438    2
      439       439    2           case op_loi:
      440       440    2              depth ++;
      441       441    2              node = node->lf;
      442       442    2              goto next;
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      443       443    2
      444       444    2           case op_reg:
      445       445    2              return 1;
      446       446    2
      447       447    2           case op_lof:
      448       448    2           case op_ldf:
      449       449    2              depth ++;
      450       450    2           case op_adp:
      451       451    2              ofs += node->argval;
      452       452    2           case op_ads:
      453       453    2              node = node->lf;
      454       454    2              goto next;
      455       455    2
      456       456    2           case op_stf:
      457       457    2           case op_sdf:
      458       458    2              ofs += node->argval;
      459       459    2           case op_sti:
      460       460    2              depth ++;
      461       461    2              node = node->rt;
      462       462    2              goto next;
      463       463    2
      464       464    2           default:
      465       465    2              return 0;
      466       466    2           }
      467       467    1           if ((ofs&7)==0) return 8;
      468       468    1           if ((ofs&3)==0) return 4;
      469       469    1           return 1;
      470       470    1        }
      471       471
      472       472             EXPR zbk_lfr_node (EXPR node, int unchain)
      473       473             {
      474       474    1           EXPR prevnode = node;
      475       475    1           node = node->xec_chain;
      476       476    1           while (node->opcode==op_ilb) {
      477       477    2              prevnode = node;
      478       478    2              node = node->xec_chain;
      479       479    2           }
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      480       480    1           if (node->opcode!=op_lfr) return (0);
      481       481    1
      482       482    1           if (unchain) {
      483       483    2              /* remove "lfr" from xec chain,
      484       484    2                 since it will soon be changed to "reg n" or "lol/ldl temp" */
      485       485    2              prevnode->xec_chain = node->xec_chain;
      486       486    2           }
      487       487    1
      488       488    1           return (node);
      489       489    1        }
      490       490
      491       491             /* test for the following subtrees ---
      492       492                stl/e v -> <binop> -> (lol/e v, <expr>)
      493       493                stl/e v -> adp n   ->  lol/e v
      494       494             */
      495       495             static int zbk_try_op_stored (EXPR node0)
      496       496             {
      497       497    1        int reg, inst, commute_flag=1;
      498       498    1        EXPR node1, node2L, node2R;
      499       499    1
      500       500    1           if (node0->opcode!=op_stl && node0->opcode!=op_ste) return 0;
      501       501    1
      502       502    1           node1  = node0->lf;
      503       503    1           node2L = node1->lf;
      504       504    1           node2R = node1->rt;
      505       505    1
      506       506    1           switch (node1->opcode) {
      507       507    2           case op_adi: inst = INST_ASa;  goto Commutative;
      508       508    2           case op_sbi: inst = INST_SSa;  goto Commute_1;
      509       509    2           case op_and: inst = INST_ANSa; goto Commutative;
      510       510    2           case op_ior: inst = INST_ORSa; goto Commutative;
      511       511    2           case op_xor: inst = INST_ERSa; goto Commutative;
      512       512    2           case op_adp: inst = INST_STa;  goto Non_Commutative;
      513       513    2           default:     return 0;
      514       514    2           }
      515       515    1
      516       516    1        Commute_1:
CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      517       517    1           if (!commute_flag) return 0;
      518       518    1           node2R = node1->lf;  /* swap the nodes */
      519       519    1           node2L = node1->rt;
      520       520    1
      521       521    1        Non_Commutative:
      522       522    1           commute_flag = 0;
      523       523    1
      524       524    1        Commutative:
      525       525    1           if (node0->opcode==op_stl) {
      526       526    2              if (node2L->opcode!=op_lol) goto Commute_1;
      527       527    2           }
      528       528    1           else {
      529       529    2              if (node2L->opcode!=op_loe) goto Commute_1;
      530       530    2              if (strcmp (node0->argstr, node2L->argstr) !=0) goto Commute_1;
      531       531    2           }
      532       532    1           if (node0->argval != node2L->argval) goto Commute_1;
      533       533    1
      534       534    1           if (node1->opcode!=op_adp) {
      535       535    2              reg = zbk_expr_to_reg (node2R, IREGS);
      536       536    2           }
      537       537    1           else {
      538       538    2              reg = zbk_allocate_reg (IREGS);
      539       539    2              instruc (-1,
      540       540    2                       INST_LDa, RC, reg, (node1->argval)<<16,
      541       541    2                       INST_ADLa,RA, reg, node0,
      542       542    2                       -1);
      543       543    2           }
      544       544    1
      545       545    1           instruc (inst, RA, reg, node0);
      546       546    1           zbk_release_regn (reg);
      547       547    1
      548       548    1           zbk_spoil_hold_var (node0);
      549       549    1           return 1;
      550       550    1        }
      551       551
---  Include file information  ---

CC.C03    File=zbk$cg_gen:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=16 
   assert:h.:LIBRARY. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbk$cg_tree:h.:ZBC3TOU. is referenced
   zbk$cg_inst:h.:ZBC3TOU. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbk$cg_gen:c.:ZBC3TSI
