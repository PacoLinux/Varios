

14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         1    
    1      /*M* KO_MACRO_C - MACROS used in FEP-resident part of PIGLET                  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /**/
    8      /*  KO_DEVICE_INFO                                                            */
    9      /*    This MACRO defines the structure of entries in PIGLET's drive           */
   10      /*    information table.                                                      */
   11      /**/
   12      %MACRO KO_DEVICE_INFO (NAME = KO_DEVICE,
   13                            LAST = NIL,       /* Default based on LVL               */
   14                            LVL = 1,
   15                            HEADER(YES='1'B,NO='0'B)='1'B,
   16                            STCLASS = STATIC);
   17      /**/
   18      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
   19      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
   20          (SUBSTR(STR,0,6)='STATIC') OR
   21          (SUBSTR(STR,0,3)='EXT');
   22        %LSET INIT=CHARTEXT('INIT');
   23      %ELSE;
   24        %LSET INIT=CHARTEXT('/*');
   25      %ENDIF;
   26      %IF TEXTCHAR(LAST)='NIL';
   27        %IF LVL=1;
   28          %LSET TERM=';';
   29        %ELSE;
   30          %LSET TERM=',';
   31        %ENDIF;
   32      %ELSE;
   33        %LSET TERM=TEXTCHAR(LAST);
   34      %ENDIF;
   35      /**/
   36      %IF HEADER = '1'B;
   37        %LSET OFFSET=1;
14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         2    
   38        %IF LVL = 1;
   39        DCL  1  NAME STCLASS DALIGNED,
   40        %ELSE;
   41           %LVL NAME DALIGNED,
   42        %ENDIF;
   43      %ELSE;
   44        %LSET OFFSET=0;
   45        %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
   46      %ENDIF;
   47           %(LVL+OFFSET) CHAN_ADDR UBIN WORD,
   48              /* CHAN_ADDR is the base address of the channel for this device       */
   49           %(LVL+OFFSET) DEVICE_TYPE UBIN WORD,
   50              /* DEVICE_TYPE the device code.                                       */
   51           %(LVL+OFFSET) IO_IN_PROGRESS BIT(1),
   52              /* IO_IN_PROGRESS indicates that the handler code has executed a IO   */
   53              /* or IOLD on this device that will generate an interrupt.            */
   54           %LSET KLUDGE = LVL+OFFSET;
   55           %KO_DEVICE_STATUS (NAME = STATUS,LVL = KLUDGE,STCLASS = STCLASS );
   56              /* STATUS contains the standard structure defining the last           */
   57              /* status word from the device.                                       */
   58           %(LVL+OFFSET) DRIVE_NO SBIN WORD,
   59           %(LVL+OFFSET) * SBIN WORD,
   60           %(LVL+OFFSET) * SBIN WORD,
   61           %(LVL+OFFSET) * SBIN WORD,
   62           %(LVL+OFFSET) * SBIN WORD %CHARTEXT(TERM)
   63      %MEND;
   64      %EJECT;

14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         3    
   65      /**/
   66      /*  KO_DEVICE_STATUS                                                          */
   67      /*    This MACRO defines the structure of the device status code              */
   68      /*    from the diskette drives.                                               */
   69      /**/
   70      %MACRO KO_DEVICE_STATUS (NAME = KO_DEVICE_STATUS,
   71                           NOT_READY = '0'B,
   72                           ATTENTION = '0'B,
   73                           OVERRUN = '0'B,
   74                           DELETED_FIELD = '0'B,
   75                           READ_ERROR = '0'B,
   76                           DEV_FAULT = '0'B,
   77                           MISSED_SYNC = '0'B,
   78                           FUTILE_SEARCH = '0'B,
   79                           DISK_TYPE = '0'B,
   80                           SEEK_ERROR = '0'B,
   81                           C_MEMERR = '0'B,
   82                           NO_RESOURCE = '0'B,
   83                           BUS_PERR = '0'B,
   84                           UC_MEMERR = '0'B,
   85                           RFU1 = '0'B,
   86                           RFU2 = '0'B,
   87                           LAST = NIL,        /* Default based on LVL               */
   88                           LVL = 1,
   89                           ALIGN = ALIGNED,
   90                           HEADER(YES='1'B,NO='0'B)='1'B,
   91                           STCLASS = STATIC);
   92      /**/
   93      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
   94      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
   95          (SUBSTR(STR,0,6)='STATIC') OR
   96          (SUBSTR(STR,0,3)='EXT');
   97        %LSET INIT=CHARTEXT('INIT');
   98        %LSET EINIT=CHARTEXT('');
   99      %ELSE;
  100        %LSET INIT=CHARTEXT('/*');
  101        %LSET EINIT=CHARTEXT('*/');
14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         4    
  102      %ENDIF;
  103      %IF TEXTCHAR(LAST)='NIL';
  104        %IF LVL=1;
  105          %LSET TERM=';';
  106        %ELSE;
  107          %LSET TERM=',';
  108        %ENDIF;
  109      %ELSE;
  110        %LSET TERM=TEXTCHAR(LAST);
  111      %ENDIF;
  112      /**/
  113      %IF HEADER = '1'B;
  114        %LSET OFFSET=1;
  115        %IF LVL = 1;
  116        DCL  1  NAME STCLASS ALIGN,
  117        %ELSE;
  118           %LVL NAME ALIGN,
  119        %ENDIF;
  120      %ELSE;
  121        %LSET OFFSET=0;
  122        %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
  123      %ENDIF;
  124           %(LVL+OFFSET) %CHARTEXT('NOT_READY') BIT(1) UNAL %INIT(NOT_READY)%EINIT,
  125           %(LVL+OFFSET) %CHARTEXT('ATTENTION') BIT(1) UNAL %INIT(ATTENTION)%EINIT,
  126           %(LVL+OFFSET) %CHARTEXT('OVERRUN') BIT(1) UNAL %INIT(OVERRUN)%EINIT,
  127           %(LVL+OFFSET) %CHARTEXT('DELETED_FIELD') BIT(1) UNAL %INIT(DELETED_FIELD)%EINIT,
  128           %(LVL+OFFSET) %CHARTEXT('READ_ERROR') BIT(1) UNAL %INIT(READ_ERROR)%EINIT,
  129           %(LVL+OFFSET) %CHARTEXT('DEV_FAULT') BIT(1) UNAL %INIT(DEV_FAULT)%EINIT,
  130           %(LVL+OFFSET) %CHARTEXT('MISSED_SYNC') BIT(1) UNAL %INIT(MISSED_SYNC)%EINIT,
  131           %(LVL+OFFSET) %CHARTEXT('FUTILE_SEARCH') BIT(1) UNAL %INIT(FUTILE_SEARCH)%EINIT,
  132           %(LVL+OFFSET) %CHARTEXT('DISK_TYPE') BIT(1) UNAL %INIT(DISK_TYPE)%EINIT,
  133           %(LVL+OFFSET) %CHARTEXT('RFU1') BIT(1) UNAL %INIT(RFU1)%EINIT,
  134           %(LVL+OFFSET) %CHARTEXT('SEEK_ERROR') BIT(1) UNAL %INIT(SEEK_ERROR)%EINIT,
  135           %(LVL+OFFSET) %CHARTEXT('RFU2') BIT(1) UNAL %INIT(RFU2)%EINIT,
  136           %(LVL+OFFSET) %CHARTEXT('C_MEMERR') BIT(1) UNAL %INIT(C_MEMERR)%EINIT,
  137           %(LVL+OFFSET) %CHARTEXT('NO_RESOURCE') BIT(1) UNAL %INIT(NO_RESOURCE)%EINIT,
  138           %(LVL+OFFSET) %CHARTEXT('BUS_PERR') BIT(1) UNAL %INIT(BUS_PERR)%EINIT,
14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         5    
  139           %(LVL+OFFSET) %CHARTEXT('UC_MEMERR') BIT(1) UNAL %INIT(UC_MEMERR)%EINIT %CHARTEXT(TERM)
  140      %MEND;
  141      %MACRO KO_ENTRIES (OMIT=NIL);
  142         DCL GHH$IO ENTRY(1) ALTRET;
  143         DCL GHH$IOLD ENTRY(1) ALTRET;
  144         DCL GHH$IO_IN ENTRY(1) ALTRET;
  145         DCL GHH$LEV ENTRY(1) ALTRET;
  146      %IF TEXTCHAR(OMIT)~='KOA$MAIN_EVENT';
  147         DCL KOA$MAIN_EVENT ENTRY ASYNC;
  148         %ENDIF;
  149      %IF TEXTCHAR(OMIT)~='KOE$DEVICE_EVENT';
  150         DCL KOE$DEVICE_EVENT ENTRY ALTRET;
  151         %ENDIF;
  152      %IF TEXTCHAR(OMIT)~='KOE$HOST_EVENT';
  153         DCL KOE$HOST_EVENT ENTRY ALTRET;
  154         %ENDIF;
  155      %IF TEXTCHAR(OMIT)~='KOE$NA_EVENT';
  156         DCL KOE$NA_EVENT ENTRY(1) ALTRET;
  157         %ENDIF;
  158      %IF TEXTCHAR(OMIT)~='KOH$HOST_IO';
  159         DCL KOH$HOST_IO ENTRY(1) ALTRET;
  160         %ENDIF;
  161      %IF TEXTCHAR(OMIT)~='KOI$CLEANUP';
  162         DCL KOI$CLEANUP ENTRY(0);
  163         %ENDIF;
  164      %IF TEXTCHAR(OMIT)~='KOI$INIT';
  165         DCL KOI$INIT ENTRY ALTRET;
  166         %ENDIF;
  167      %IF TEXTCHAR(OMIT)~='KOP$CHECK_STATUS';
  168         DCL KOP$CHECK_STATUS ENTRY(1) ALTRET;
  169         %ENDIF;
  170      %IF TEXTCHAR(OMIT)~='KOP$GET_STATUS';
  171         DCL KOP$GET_STATUS ENTRY(2) ALTRET;
  172         %ENDIF;
  173      %IF TEXTCHAR(OMIT)~='KOP$INTERRUPT';
  174         DCL KOP$INTERRUPT ENTRY ASYNC;
  175         %ENDIF;
14:51 JUL 28 '97 KO_MACRO_C.:E05SI                                         6    
  176      %IF TEXTCHAR(OMIT)~='KOP$INITIALIZE';
  177         DCL KOP$INITIALIZE ENTRY(2) ALTRET;
  178         %ENDIF;
  179      %IF TEXTCHAR(OMIT)~='KOP$PHYS_IO';
  180         DCL KOP$PHYS_IO ENTRY(4) ALTRET;
  181         %ENDIF;
  182      %IF TEXTCHAR(OMIT)~='KOU$BOUND';
  183         DCL KOU$BOUND ENTRY(3);
  184         %ENDIF;
  185      %IF TEXTCHAR(OMIT)~='KOU$DO_INHIBIT';
  186         DCL KOU$DO_INHIBIT ENTRY;
  187         DCL KOU$END_INHIBIT ENTRY;
  188         %ENDIF;
  189      %IF TEXTCHAR(OMIT)~='KOU$PACK';
  190         DCL KOU$PACK ENTRY(3);
  191         DCL KOU$UNPACK ENTRY(3);
  192         %ENDIF;
  193      %IF TEXTCHAR(OMIT)~='KOU$WAITSECS';
  194         DCL KOU$WAITSECS ENTRY(1) ALTRET;
  195         %ENDIF;
  196      %MEND;

