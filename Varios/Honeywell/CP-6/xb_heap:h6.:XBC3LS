

11:09 JAN 06 '95 xb_heap_i6.:XBC3TSI                                       1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /*
    7       * OK, let's define something simple, the AV (available space)
    8       * structure.  It ALWAYS points to the next allocatable block.
    9       * Each block is then divided up as per the boundary tag method
   10       * (see .s6 source) and addressed via pointer offsets.
   11       */
   12
   13      /*
   14       * Use the following as the BASE for the AV pointer (Available list)
   15       */
   16
   17      %MACRO HEAP_SYMDEF;
   18         DCL   XBI$AV                STATIC SYMDEF PTR INIT (ADDR (NIL));
   19         DCL   XBI$First_AV          STATIC SYMDEF PTR INIT (ADDR (NIL));
   20         DCL   XBI$Last_AV           STATIC SYMDEF PTR INIT (ADDR (NIL));
   21         DCL   XBI_Debug             STATIC SYMDEF UBIN INIT(0);
   22         DCL 1 XBI$allocation_heap   STATIC SYMDEF,
   23            2  Heap_                ALIGNED,
   24               3  Size#             UBIN (18) UNAL INIT (0), /* size in words */
   25               3  *                 UBIN (18) UNAL INIT (0),
   26               3  Base$             PTR            INIT (ADDR (NIL)),
   27               3  Base REDEF Base$,
   28                  4  Word_Offset    UBIN (18) UNAL,
   29                  4  Byte_Bit_Segid UBIN (18) UNAL,
   30            2  Initialized          BIT (1)        INIT ('0'B);
   31      %MEND;
   32
   33      %MACRO HEAP_SYMREF;
   34         DCL   XBI$AV                SYMREF PTR;
   35         DCL   XBI$First_AV          SYMREF PTR;
   36         DCL   XBI$Last_AV           SYMREF PTR;
   37         DCL   XBI_Debug             SYMREF UBIN;
11:09 JAN 06 '95 xb_heap_i6.:XBC3TSI                                       2    
   38         DCL 1 XBI$allocation_heap   SYMREF,
   39            2  Heap_                ALIGNED,
   40               3  Size#             UBIN (18) UNAL, /* size in words */
   41               3  *                 UBIN (18) UNAL,
   42               3  Base$             PTR,
   43               3  Base REDEF Base$,
   44                  4  Word_Offset    UBIN (18) UNAL,
   45                  4  Byte_Bit_Segid UBIN (18) UNAL,
   46            2  Initialized          BIT (1);
   47      %MEND;
   48
   49      /* The heap is partitioned into blocks.  A block consists of a Head structure,
   50      0 or more data words and a Tail structure.
   51      */
   52
   53      DCL 1 Head              BASED,
   54            2  Left_Link         PTR,
   55            2  Right_Link        PTR,
   56            2  Size              SBIN,
   57            2  Flags             ALIGNED,
   58               3  Tag            BIT (1) UNAL,
   59               3  Protected      BIT (1) UNAL,
   60               3  Marked         BIT (1)   UNAL,
   61               3  RFU0           BIT (1)   UNAL,
   62               3  RFU1           BIT (1)   UNAL,
   63               3  RFU2           BIT (13)  UNAL,
   64               3  Stamp          UBIN (18) UNAL;
   65
   66      DCL 1 Tail              BASED,
   67            2  Up_Link           PTR;
   68
   69      /* 8 unallocated words are needed at the end of the heap so SCM instructions
   70         in the string functions don't try accessing memory beyond the end of the
   71         dynamic segment.
   72      */
   73
   74      %EQU HEAP_SLOP_SPACE = 8;

