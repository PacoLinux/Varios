VERSION E05

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:1    
        1        1        /*M* KVB$SVC - buddy space manager */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*     NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IAD=3,IND=0 */
        8        8        /*F* NAME: Memory_Pool_Services
        9        9
       10       10        The library provides a set of routines that can be used to
       11       11        manage up to six independent pools of user main memory.
       12       12
       13       13        .fif
       14       14             KVB$INT          - initialize a buffer pool control block
       15       15             KVB$GET[2N][SYS] - allocate a  buffer
       16       16             KVB$RLS[2N][SYS] - release a buffer
       17       17             KVB$CHKBDYCHN    - consistency-check the buddy pool
       18       18        .fin
       19       19
       20       20        REFERENCE: See Knuth - The Art of Computer Programming,
       21       21        Vol. 1 for a description of the Buddy Space
       22       22        management system used here.
       23       23
       24       24        */
       25       25        KVB$SVC: PROC (PARM1, KV_B_BUF$) ALTRET;
       26       26        %INCLUDE GM_VIRTUAL_E;
       27      236        %INCLUDE KH_SCREECH_M;
       28      247        %INCLUDE KV$BPC;
       29      276 S      %INCLUDE KV$VDH;
       30      277        %INCLUDE KV_INT_M;
       31      420        %INCLUDE KV_SCODE_C;
       32      441        %INCLUDE LCP_6;
       33      632        %G$LOW_MEM (STCLASS="BASED(G$LOW_MEM$)");
       34      681    1   DCL G$LOW_MEM$ PTR SYMREF READONLY;
       35      682    1   DCL G_MON_ENT UBIN(32) CONSTANT INIT(%GM_MON_ENT_BASE);
       36      683    1   DCL G$MON_ENT$ REDEF G_MON_ENT PTR;
       37      684    1   DCL G$L69X BIT(16) ALIGNED BASED(G$MON_ENT$);
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:2    
       38      685        %VLP_SCODE (FPTN=KVB_BDYARGS,FCG=KV,MID=B,STCLASS=CONSTANT,ERR#=%S$KV_BDYARGS);
       39      746        %VLP_SCODE (FPTN=KVB_BADBDY,FCG=KV,MID=B,STCLASS=CONSTANT,ERR#=%S$KV_BADBDY);
       40      807    1   DCL KHD$SCREECH ENTRY(1);
       41      808        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:3    
       42      809        /* Structure of buffer control block */
       43      810        %KV$BPC (STCLASS="BASED(Y_POOL$)");
       44      832        /* Structure of free buffers                                                  */
       45      833
       46      834    1   DCL 1 Y$BH BASED ALIGNED,
       47      835
       48      836        /* POINTER TO NEXT BUFFER */
       49      837    1          2 FLINK$ PTR,
       50      838        /* POINTER TO PREVIOUS BUFFER */
       51      839    1          2 BLINK$ PTR,
       52      840        /* BUFFER MANAGER TOKEN */
       53      841    1          2 TOKEN,
       54      842        /* FIRST WORD OF TOKEN ('DEAD'X) */
       55      843    1             3 W1 SBIN,
       56      844        %EQU DEAD = -8531;
       57      845        /* SECOND WORD OF TOEKN (POWER OF 2) */
       58      846    1             3 W2 SBIN WORD;
       59      847
       60      848    1   DCL 1 Y$BUSY BASED ALIGNED,
       61      849    1          2 BUSY CHAR(4),
       62      850    1          2 SIZ REDEF BUSY,
       63      851    1             3 WRD UBIN,3 * UBIN,
       64      852    1          2 CALLER$ PTR,
       65      853    1          2 ZAPPTR REDEF CALLER$,
       66      854    1             3 DDD BIT(12), 3 * BIT(20),
       67      855    1          2 THE_REST CHAR(SIZ);
       68      856    1   DCL 1 Y$BUSY_REST BASED ALIGNED CHAR(SIZ);
       69      857
       70      858        /* Array of pointers to control blocks (one per pool) */
       71      859    1   DCL KV_B_POOL$(0:5) PTR SYMREF;
       72      860
       73      861        /* Pool index to use for non-SYS calls (SYS uses 0). Actually a UBIN. */
       74      862    1   DCL KV_B_POOL# BIT(16) SYMREF;
       75      863    1   DCL KV_B_POOLX REDEF KV_B_POOL# UBIN;
       76      864        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:4    
       77      865
       78      866        /* Items for buddy space pool mapping/debugging aids                          */
       79      867
       80      868        /* Table of powers of 2 */
       81      869    1   DCL Y_BITU(0:15) UBIN CONSTANT INIT(
       82      870    1   1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768);
       83      871    1   DCL Y_BIT(0:15) REDEF Y_BITU BIT(16);
       84      872        /* Table of powers of 2 -1*/
       85      873    1   DCL Y_MSKU(0:15) UBIN CONSTANT INIT(
       86      874    1   0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767);
       87      875    1   DCL Y_MSK(0:15) REDEF Y_MSKU BIT(16);
       88      876        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:5    
       89      877        /* PARAMETERS and AUTO */
       90      878        /***************************************************************************/
       91      879        /*                                                                         */
       92      880        /* !!! WHEN ADDING OR DELETING ITEMS HERE, FIX COMPUTATION OF %CALLER$ !!! */
       93      881        /*                                                                         */
       94      882        %EQU CALLER$ = CHARTEXT('PINCRW(ADDR(FLAGS),-19)');
       95      883        /*                                                                         */
       96      884        /***************************************************************************/
       97      885    1   DCL PARM1 CHAR(KV_B_SIZ);
       98      886        %KV$VDH_VDHINT(STCLASS = REDEF PARM1);
       99      905    1   DCL KV_B_SIZ REDEF PARM1 UBIN;
      100      906    1   DCL KV_B_BUF$ PTR;
      101      907    1   DCL Y_POOL$ PTR;                        /* Pointer to pool control structure  */
      102      908    1   DCL PTR$ PTR;
      103      909    1   DCL 1 PTRBIT REDEF PTR$,
      104      910    1          2 SGM SBIN, 2 BITS BIT(16);
      105      911    1   DCL PTRUBN REDEF PTR$ UBIN(32);
      106      912    1   DCL SIZ UBIN;                           /* Callers buffer size                */
      107      913    1   DCL SIZS REDEF SIZ SBIN;                /* For PINCRW                         */
      108      914    1   DCL B1 PTR;
      109      915    1   DCL T2 REDEF B1 UBIN(32);
      110      916    1   DCL 1 T2SU REDEF B1,
      111      917    1          2 S1 SBIN,
      112      918    1          2 U2 UBIN;
      113      919    1   DCL Y_INDEX SBIN;                       /* Chain number (aka power of 2)      */
      114      920    1   DCL Y_SIZ UBIN;                         /* Size of buffers in Y_INDEX chain   */
      115      921    1   DCL Y_SIZS REDEF Y_SIZ SBIN;            /* For PINCRWs                        */
      116      922    1   DCL Y_BFR# UBIN;                   /* Buffer offset in KV$BPC.MINSIZ units    */
      117      923    1   DCL Y_BFRBIT(0:15) REDEF Y_BFR# BIT(1); /* Redef for bit-whacking             */
      118      924    1   DCL TMPTIM SBIN;                        /* Temp cell for timecalculations     */
      119      925    1   DCL 1 FLAGS,                            /* Control Flags                      */
      120      926        %EQU FLAGS_N2 = '8000'X;
      121      927    1          2 N2 BIT(1),                     /* 2N call                            */
      122      928    1          2 MND BIT(1),                    /* Unused mandatory flag              */
      123      929    1          2 * BIT(6),
      124      930    1          2 POOL UBIN BYTE CALIGNED;       /* KV_B_POOL# for non-SYS entry       */
      125      931    1   DCL X REDEF FLAGS UBIN;                 /* Temp for the buddy searcher        */
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:6    
      126      932
      127      933        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:7    
      128      934        /*F* NAME: KVB$GET - Get a Block from a Memory Pool
      129      935
      130      936        The KVB$GET routines will allocate a block of space from
      131      937        a given buffer pool.
      132      938
      133      939        The form of the call for these services is:
      134      940
      135      941        .fif
      136      942           CALL KVB$GET[2n][sys] (kv_b_siz, kv_b_buf$) ALTRET(label);
      137      943        .fin
      138      944
      139      945        where:
      140      946        */
      141      947
      142      948        /*K* 2n -
      143      949        indicates a power-of-2 multiple of the size indicated
      144      950        is to be allocated.
      145      951        The algorithm used is a
      146      952        "buddy system", wherein the size of every free block of memory is an
      147      953        integral power of two times the minimum block size, and its location
      148      954        is offset from the base of the pool by an integral multiple of its
      149      955        size.  Recombination of smaller blocks occurs only when two adjacent
      150      956        blocks can be combined into a larger block still conforming to these
      151      957        two rules.
      152      958
      153      959        This algorithm operates most efficiently when the
      154      960        distribution of request sizes consists of a small number of different
      155      961        sizes, all matching a contiguous range of free block sizes (e.g., all
      156      962        the requests are for blocks of size = minimum x 2**N, where N ranges
      157      963        from 4 to 7).  When a request is made for a size different from a free block
      158      964        size, the request must be satisfied by allocating a larger free block
      159      965        and then releasing the unused portion as smaller valid free blocks.
      160      966        This operation, known as "fragmentation", is the downfall of
      161      967        this algorithm if it occurs too frequently.  A feature of the
      162      968        algorithm is that none of the allocated space is used by the space
      163      969        manager.  The cost of this feature is that the user program must
      164      970        remember the size of each block in order to release it.
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:8    
      165      971        */
      166      972
      167      973        /*K* sys -
      168      974        indicates that the buffer is to be allocated from the
      169      975        default memory pool, which is zero.
      170      976
      171      977        When the "sys" version of KVB$GET is not used, the memory
      172      978        pool allocated must first be set in the global variable
      173      979        KV_B_POOL#.
      174      980        */
      175      981        /*K* kv_b_siz -
      176      982        is the word size of the buffer to be allocated.
      177      983        */
      178      984        /*K* kv_b_buf$ - PTR.
      179      985        The KVB$GET routine will store the starting address of
      180      986        the buffer obtained in kv_b_buf$.  If a buffer cannot
      181      987        be obtained, the KVB$GET routine will set kv_b_buf$ to
      182      988        ADDR(NIL) and take the alternate return.
      183      989        */
      184      990    1   KVB$GET: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      185      991    1      FLAGS = KV_B_POOL#;
      186      992    1      GOTO GET_COMMON;
      187      993    1   KVB$GETSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      188      994    1      FLAGS = '0'B;
      189      995    1      GOTO GET_COMMON;
      190      996    1   KVB$GET2N: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      191      997    1      FLAGS = KV_B_POOL#|%FLAGS_N2;
      192      998    1      GOTO GET_COMMON;
      193      999    1   KVB$GET2NSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      194     1000    1      FLAGS = %FLAGS_N2;
      195     1001        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:9    
      196     1002    1   GET_COMMON: ;                           /* THERE MUST BE AN ALTENTRY ABOVE ME */
      197     1003
      198     1004        /* Establish which pool to use */
      199     1005    1      Y_POOL$ = KV_B_POOL$(FLAGS.POOL);
      200     1006
      201     1007        /* accrue get time statistic                                                  */
      202     1008    1      TMPTIM = G$LOW_MEM.WDT_CURR;
      203     1009
      204     1010        /* Pick up minimum block size and index                                       */
      205     1011    1      Y_INDEX = 0;
      206     1012    1      Y_SIZ = KV$BPC.MINSIZ;
      207     1013
      208     1014        /* Move size request to temp */
      209     1015    1      SIZ = KV_B_SIZ;
      210     1016
      211     1017    1      IF SIZ > KV$BPC.MAXSIZ THEN GOTO BADARGS;
      212     1018
      213     1019        /* locate the first 2n size big enough and set size request equal             */
      214     1020    2      DO WHILE (SIZ > Y_SIZ);
      215     1021    2         Y_INDEX = Y_INDEX+1;
      216     1022    2         Y_SIZ = Y_SIZ*2;
      217     1023    2      END /* LOOP */;
      218     1024
      219     1025    1      IF FLAGS.N2 THEN SIZ = Y_SIZ;
      220     1026    2      ELSE DO;
      221     1027        /* Round the non-pwr2 size up to a multiple of MINSIZ */
      222     1028    2         Y_BFR# = MOD(SIZ, KV$BPC.MINSIZ);
      223     1029    2         IF Y_BFR#~=0 OR SIZ=0 THEN SIZ = SIZ+KV$BPC.MINSIZ-Y_BFR#;
      224     1030    2      END;
      225     1031
      226     1032        /* Call the chain checker if any of the bits are on which require
      227     1033           running down the chains                                                    */
      228     1034    1      IF KV$BPC.DBG.VALCHAINS THEN CALL KVB$CHKBDYCHN(KV$BPC);
      229     1035
      230     1036        /* Bump the GET count                                                         */
      231     1037    1      KV$BPC.GETC = KV$BPC.GETC+1;
      232     1038
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:10   
      233     1039        /* now find an available buffer                                               */
      234     1040    2      DO WHILE (KV$BPC.HEAD$(Y_INDEX) = ADDR(NIL));
      235     1041    2         Y_SIZ = Y_SIZ*2;
      236     1042    2         Y_INDEX = Y_INDEX+1;
      237     1043        /* if run out of block sizes to search, error                                 */
      238     1044    3         IF (Y_SIZ > KV$BPC.MAXSIZ) THEN DO;
      239     1045        /* accrue get time statistic                                                  */
      240     1046    3            KV$BPC.GETT = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.GETT;
      241     1047    3            IF KV$BPC.TOT-KV$BPC.USE>SIZ
      242     1048    3            THEN KV$BPC.GETF = KV$BPC.GETF+1;
      243     1049    3            KV_B_BUF$ = ADDR(NIL);
      244     1050    3            ALTRETURN;
      245     1051    3         END /* IF */;
      246     1052    2      END /* LOOP */;
      247     1053    1      B1 = KV$BPC.HEAD$(Y_INDEX);
      248     1054
      249     1055        /* Return the PTR and size to caller. */
      250     1056    1      IF FLAGS.N2 THEN KV_B_SIZ = SIZ;
      251     1057    1      KV_B_BUF$ = B1;
      252     1058
      253     1059        /* Got a buffer, good return status is already set up in entry code.
      254     1060           De-link the buffer.                                                        */
      255     1061    1      PTR$ = B1->Y$BH.FLINK$;
      256     1062    2      IF PTR$ ~= ADDR(NIL) THEN DO;
      257     1063    2         PTR$->Y$BH.BLINK$ = ADDR(NIL);
      258     1064    2      END /* IF */;
      259     1065    1      ELSE KV$BPC.TAIL$(Y_INDEX) = PTR$;
      260     1066    1      KV$BPC.HEAD$(Y_INDEX) = PTR$;
      261     1067
      262     1068        /* Update the memory space usage count                                        */
      263     1069    1      KV$BPC.USE = KV$BPC.USE + SIZ;
      264     1070
      265     1071        /* Update max use count                                                       */
      266     1072    2      IF KV$BPC.USE > KV$BPC.MXU THEN DO;
      267     1073    2         KV$BPC.MXU = KV$BPC.USE;
      268     1074    2      END /* IF */;
      269     1075
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:11   
      270     1076    1      KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) -1;
      271     1077
      272     1078        /* If in bit map debug mode, register the bit map changes caused by
      273     1079           allocating this power of 2 buffer.                                         */
      274     1080
      275     1081    2      IF (KV$BPC.DBG.BITMAP) THEN DO;
      276     1082    2         PTR$ = B1;
      277     1083    2         CALL Y$DIVIDE;
      278     1084    2         B1 = PTR$;                        /* Divide clobbers B1                 */
      279     1085    2         CALL Y$RESETMEMBITS ALTRET(BADBUDDY);
      280     1086    2      END /* IF */;
      281     1087
      282     1088        /* clear buffer of buffer manager token                                       */
      283     1089    1      B1->Y$BH = BINBIT(SIZ,16);
      284     1090
      285     1091        /* Now check to see if we have to release any excess space.                   */
      286     1092    2      IF Y_SIZ > SIZ THEN DO;
      287     1093
      288     1094    2         PTR$ = PINCRW( B1, Y_SIZS);
      289     1095    2         Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);
      290     1096
      291     1097        /* Loop to release decreasing sizes of power of 2 buffers, updating
      292     1098           the buffer address and decrementing size. Start with the largest
      293     1099           that is small enough to need releasing.                                    */
      294     1100
      295     1101    2         SIZ = Y_SIZ-SIZ;                  /* # words to free                    */
      296     1102
      297     1103    3         DO WHILE (SIZ ~= 0);              /* LOOP START                         */
      298     1104
      299     1105        /* If this buffer size indicates that it is small enough to be released,
      300     1106           then do it.                                                                */
      301     1107    4            IF SIZ>=Y_SIZ THEN DO;
      302     1108    4               PTR$ = PINCRW( PTR$, -Y_SIZS);
      303     1109    5               IF KV$BPC.DBG.BITMAP THEN DO;
      304     1110    5                  Y_BFR# = Y_BFR#-Y_BITU(Y_INDEX);
      305     1111    5                  CALL Y$SETMEMBITS ALTRET(BADBUDDY);
      306     1112    5               END;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:12   
      307     1113    4               CALL Y$LINKTAIL;
      308     1114    4               KV$BPC.FRG = KV$BPC.FRG+1;
      309     1115    4               SIZ = SIZ-Y_SIZ;
      310     1116    4            END /* IF */;
      311     1117
      312     1118    3            Y_INDEX = Y_INDEX-1;
      313     1119    3            Y_SIZ = Y_SIZ/2;
      314     1120    3         END /* LOOP */;
      315     1121
      316     1122        /* Restore the original buffer size. */
      317     1123    2         SIZ = POFFW(PTR$,B1);
      318     1124    2      END /* IF */;
      319     1125        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:13   
      320     1126
      321     1127        /* Check and see if we are to stuff this buffer with 'BUSYaaaa'               */
      322     1128    2      IF KV$BPC.DBG.BUSY THEN DO;
      323     1129
      324     1130        /* Now for the buffer which we are going to hand out insert the
      325     1131           following string throughout the buffer. 'BUSYaaaa' where aaaa is
      326     1132           4 bytes of binary address of the caller for this buffer.                   */
      327     1133        /* First uncover caller's address and save it away, then figure
      328     1134           out how many doublewords this buffer is (both 'BUSY' and the
      329     1135           caller's 'aaaa' take up a doubleword in the buffer).                       */
      330     1136    2         B1->Y$BUSY.CALLER$ = %CALLER$->Y$BH.FLINK$;
      331     1137
      332     1138    2         B1->Y$BUSY.ZAPPTR.DDD = 'BAD'X;
      333     1139    2         B1->Y$BUSY.BUSY = 'BUSY';
      334     1140
      335     1141        /* Now loop through buffer setting it with the doublewords.
      336     1142           'BUSY' and 'aaaa' so that we can find busy or lost memory easily
      337     1143           along with to whom they belong.                                            */
      338     1144    2         SIZ = SIZ*2-8;
      339     1145    2         B1->Y$BUSY.THE_REST = B1->Y$BUSY_REST;
      340     1146    2         B1->Y$BUSY.SIZ.WRD = SIZ/2+4;
      341     1147    2      END /* IF */;
      342     1148        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:14   
      343     1149
      344     1150        /* Trace this buffer get                                                      */
      345     1151        /* Eh?    AUDIT KV#B.TRC_GETBUF                                               */
      346     1152
      347     1153        /* Now check to see if we should run all the buddy chains to provide
      348     1154           some debugging aid.                                                        */
      349     1155    1      IF KV$BPC.DBG.VALCHAINS_AFTGET THEN CALL KVB$CHKBDYCHN(KV$BPC);
      350     1156
      351     1157        /* accrue get time statistic                                                  */
      352     1158    1      KV$BPC.GETT = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.GETT;
      353     1159    1      RETURN;
      354     1160        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:15   
      355     1161        /*F* NAME: KVB$RLS - Release a Block to a Memory Pool
      356     1162
      357     1163        The KVB$RLS routines release a block of space to a given buffer pool.
      358     1164
      359     1165        The form of the call for this service is:
      360     1166
      361     1167        .fif
      362     1168           CALL KVB$RLS[2n][sys] (kv_b_siz, kv_b_buf$) ALTRET(not_used);
      363     1169        .fin
      364     1170
      365     1171        where:
      366     1172        */
      367     1173
      368     1174        /*K* 2n -
      369     1175        indicates that the size is to be checked for a power-of-2
      370     1176        multiple of the minimum size.  The minimum size is specified in
      371     1177        KV$VDH_VDHINT.MINBFR when the pool is initialized.
      372     1178        */
      373     1179
      374     1180        /*K* sys -
      375     1181        indicates that the default memory pool, which is zero, is to be used.
      376     1182
      377     1183        When the "sys" version of KVB$REL is not used, the memory
      378     1184        pool allocated must first be set in the global variable
      379     1185        KV_B_POOL#.
      380     1186        */
      381     1187
      382     1188        /*K* kv_b_siz -
      383     1189        is the word size of the buffer to be released.
      384     1190        */
      385     1191
      386     1192        /*K* kv_b_buf$ - PTR.
      387     1193        Contains the address of the buffer to be released.
      388     1194        If kv_b_buf$ is not supplied, kv_b_siz is assumed to be located
      389     1195        in the first word of the buffer being released.
      390     1196        */
      391     1197    1   KVB$RLS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:16   
      392     1198    1      FLAGS = KV_B_POOL#;
      393     1199    1      GOTO RLS_COMMON;
      394     1200    1   KVB$RLSSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      395     1201    1      FLAGS = '0'B;
      396     1202    1      GOTO RLS_COMMON;
      397     1203    1   KVB$RLS2N: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      398     1204    1      FLAGS = KV_B_POOL#|%FLAGS_N2;
      399     1205    1      GOTO RLS_COMMON;
      400     1206    1   KVB$RLS2NSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
      401     1207    1      FLAGS = %FLAGS_N2;
      402     1208        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:17   
      403     1209    1   RLS_COMMON: ;                           /* THERE MUST BE AN ALTENTRY ABOVE ME */
      404     1210
      405     1211        /* set start of release interval                                              */
      406     1212    1      TMPTIM = G$LOW_MEM.WDT_CURR;
      407     1213
      408     1214        /* Validate input arguments                                                   */
      409     1215    1      IF ADDR(KV_B_BUF$)~=ADDR(NIL) THEN PTR$ = KV_B_BUF$;
      410     1216    1      ELSE PTR$ = ADDR(KV_B_SIZ);
      411     1217    1      Y_POOL$ = KV_B_POOL$(FLAGS.POOL);
      412     1218    1      IF PTR$ < KV$BPC.BGN$ THEN GOTO BADARGS;
      413     1219    1      Y_SIZ = KV$BPC.MINSIZ;
      414     1220    1      SIZ = KV_B_SIZ;
      415     1221    2      IF NOT FLAGS.N2 THEN DO;
      416     1222    2         Y_BFR# = MOD(SIZ, Y_SIZ);
      417     1223    2         IF Y_BFR#~=0 THEN SIZ = SIZ-Y_BFR#+Y_SIZ;
      418     1224    2      END;
      419     1225    1      IF SIZ > KV$BPC.MAXSIZ
      420     1226    1        OR PINCRW(PTR$, SIZS) > KV$BPC.END$ THEN GOTO BADARGS;
      421     1227
      422     1228        /* Compute the buffer number (Y_BFR#) */
      423     1229    1      CALL Y$DIVIDE ALTRET(BADARGS);
      424     1230
      425     1231        /* Do intensive check before tracing                                          */
      426     1232    1      IF KV$BPC.DBG.VALCHAINS THEN CALL KVB$CHKBDYCHN(KV$BPC);
      427     1233
      428     1234        /* Eh?    AUDIT KV#B.TRC_RLS2N                                                */
      429     1235
      430     1236        /* maintain release count statistic                                           */
      431     1237    1      KV$BPC.RLSC = KV$BPC.RLSC+1;
      432     1238        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:18   
      433     1239
      434     1240        /* General release logic. This code takes a buffer (KV_B_BUF$)
      435     1241           which must begin on a power-of-2 boundary at least as big as its size,
      436     1242           and releases it in decreasing size chunks, the last of which is checked
      437     1243           for a possible buddy.                                                      */
      438     1244
      439     1245        /* Find the chain to start at */
      440     1246    1      Y_INDEX = 0;
      441     1247    2      DO WHILE SIZ > Y_SIZ;
      442     1248
      443     1249    2         Y_INDEX = Y_INDEX+1;
      444     1250    2         Y_SIZ = Y_SIZ*2;
      445     1251    2      END /* LOOP */;
      446     1252
      447     1253        /* Now check buffer alignment, and size if RLS2N */
      448     1254    1      IF FLAGS.N2 AND SIZ ~= Y_SIZ
      449     1255    1        OR Y_BFRBIT&Y_MSK(Y_INDEX) OR SIZ=0 THEN GOTO BADARGS;
      450     1256
      451     1257        /* adjust memory in use statistic                                             */
      452     1258    1      KV$BPC.USE = KV$BPC.USE-SIZ;
      453     1259
      454     1260        /* this loop releases ever smaller blocks until only one is left              */
      455     1261
      456     1262    2      DO WHILE (SIZ ~= Y_SIZ);
      457     1263    2         Y_INDEX = Y_INDEX-1;
      458     1264    2         Y_SIZ = Y_SIZ/2;
      459     1265    3         IF SIZ > Y_SIZ THEN DO;
      460     1266
      461     1267    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);
      462     1268    3            CALL Y$LINKTAIL;
      463     1269
      464     1270    3            PTR$ = PINCRW( PTR$, Y_SIZS);
      465     1271    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);
      466     1272    3            SIZ = SIZ-Y_SIZ;
      467     1273    3         END /* IF */;
      468     1274    2      END /* LOOP */;
      469     1275
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:19   
      470     1276        /* Set free-bits for the last piece now. */
      471     1277    1      IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);
      472     1278
      473     1279        /* start of loop to go through conseutive power of 2 chains searching
      474     1280           for buddies.                                                               */
      475     1281
      476     1282    2      DO WHILE (Y_SIZ < KV$BPC.MAXSIZ);
      477     1283
      478     1284        /* calculate buddy addr                                                       */
      479     1285    2         X = BITBIN(Y_BIT(Y_INDEX)&Y_BFRBIT);
      480     1286    2         IF X~=0 THEN PTR$ = PINCRW(PTR$, -Y_SIZS);
      481     1287    2         ELSE PTR$ = PINCRW(PTR$, Y_SIZS);
      482     1288    2         IF PTR$>=KV$BPC.END$ THEN GOTO LINKTAIL;
      483     1289
      484     1290        /* Set start 'buffer' to be address of ptr to first power of 2 chain.         */
      485     1291    2         B1 = KV$BPC.HEAD$(Y_INDEX);
      486     1292
      487     1293        /* Check whether the "buddy" buffer has been released by the buffer
      488     1294           manager.  If no, don't bother searching him out but simply
      489     1295           link this buffer onto the head of the proper power of
      490     1296           chain.  Also, don't search for buddies if this power of 2 chain is
      491     1297           is addr(nil) or this buffer is the highest power of 2 available.           */
      492     1298    2         IF PTR$->Y$BH.TOKEN.W1 ~= %DEAD
      493     1299    2           OR PTR$->Y$BH.TOKEN.W2 ~= Y_INDEX
      494     1300    2           OR B1 = ADDR(NIL) THEN GOTO LINKTAIL;
      495     1301
      496     1302        /* Bump # times we actually search for a buddy                                */
      497     1303    2         KV$BPC.SCH = KV$BPC.SCH+1;
      498     1304
      499     1305        /* loop to search through the chains to actually find the buddy.              */
      500     1306    2         IF NOT KV$BPC.DBG.BITMAP
      501     1307    3         THEN DO WHILE B1 ~= PTR$;         /* LOOP START                         */
      502     1308        /* If we didn't see it, it's not there. */
      503     1309    3            IF B1 = ADDR(NIL) THEN GOTO LINKTAIL;
      504     1310
      505     1311    3            B1 = B1->Y$BH.FLINK$;
      506     1312
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:20   
      507     1313    3         END /* LOOP */;
      508     1314    3         ELSE DO;
      509     1315    3            Y_BFRBIT = Y_BFRBIT\Y_BIT(Y_INDEX);
      510     1316    3            CALL Y$CHECKMEMBITS ALTRET(LINKTAIL);
      511     1317    3            Y_BFRBIT = Y_BFRBIT\Y_BIT(Y_INDEX);
      512     1318    3         END;
      513     1319
      514     1320        /*  FOUND THE BUDDY IN THE CHAIN */
      515     1321    2         KV$BPC.CMB = KV$BPC.CMB+1;
      516     1322
      517     1323        /* Delink the buddy using the BLINK$  &  FLINK$                           */
      518     1324    2         IF PTR$->Y$BH.BLINK$ = ADDR(NIL)
      519     1325    2         THEN KV$BPC.HEAD$(Y_INDEX) = PTR$->Y$BH.FLINK$;
      520     1326    2         ELSE PTR$->Y$BH.BLINK$->Y$BH.FLINK$ = PTR$->Y$BH.FLINK$;
      521     1327    2         IF PTR$->Y$BH.FLINK$ = ADDR(NIL)
      522     1328    2         THEN KV$BPC.TAIL$(Y_INDEX) = PTR$->Y$BH.BLINK$;
      523     1329    2         ELSE PTR$->Y$BH.FLINK$->Y$BH.BLINK$ = PTR$->Y$BH.BLINK$;
      524     1330    2         KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) -1;
      525     1331
      526     1332        /* Starting new chain search. Set y_index to point to next
      527     1333           power of 2 chain.                                                    */
      528     1334    2         IF X=0 THEN PTR$ = PINCRW(PTR$,-Y_SIZS);
      529     1335    2         ELSE Y_BFR# = Y_BFR#-Y_BITU(Y_INDEX);
      530     1336    2         PINCRW(PTR$,Y_SIZS)->Y$BH.TOKEN.W1 = %DEAD-2; /* "DEAB" for buddies     */
      531     1337    2         Y_INDEX = Y_INDEX+1;
      532     1338    2         Y_SIZ = Y_SIZ*2;
      533     1339    2      END /* DO WHILE */;
      534     1340
      535     1341        /* The buffer address is already right, don't adjust it. */
      536     1342    1      Y_SIZ = 0;
      537     1343    1   LINKTAIL:;
      538     1344        /* Restore the non-buddy buffer address. */
      539     1345    1      IF X=0 THEN PTR$ = PINCRW(PTR$, -Y_SIZS);
      540     1346    1      ELSE PTR$ = PINCRW(PTR$, Y_SIZS);
      541     1347
      542     1348    1      CALL Y$LINKTAIL;
      543     1349
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:21   
      544     1350        /* Release done, check chains                                                 */
      545     1351    1      IF KV$BPC.DBG.VALCHAINS_AFTRLS THEN CALL KVB$CHKBDYCHN(KV$BPC);
      546     1352        /* accrue release time                                                        */
      547     1353    1      KV$BPC.RLST = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.RLST;
      548     1354    1      RETURN;
      549     1355        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:22   
      550     1356        /*I* NAME: Y$LINKTAIL
      551     1357             PURPOSE: To link a power of 2 buffer onto the available list,
      552     1358             with no buddy checking,  on the tail of the power of 2 queue.
      553     1359             Note that this code must be entered inhibited.                           */
      554     1360
      555     1361    1   Y$LINKTAIL: PROC ;
      556     1362
      557     1363    2      PTR$->Y$BH.BLINK$ = KV$BPC.TAIL$(Y_INDEX);
      558     1364    3      IF PTR$->Y$BH.BLINK$ = ADDR(NIL) THEN DO;
      559     1365    3         KV$BPC.HEAD$(Y_INDEX) = PTR$;
      560     1366    3      END; ELSE DO;
      561     1367    3         PTR$->Y$BH.BLINK$->Y$BH.FLINK$ = PTR$;
      562     1368    3      END /* IF */;
      563     1369    2      KV$BPC.TAIL$(Y_INDEX) = PTR$;
      564     1370    2      PTR$->Y$BH.FLINK$ = ADDR(NIL);
      565     1371
      566     1372        /* mark buffer header with buddy manager token                                */
      567     1373
      568     1374    2      PTR$->Y$BH.TOKEN.W1 = %DEAD;
      569     1375    2      PTR$->Y$BH.TOKEN.W2 = Y_INDEX;
      570     1376
      571     1377        /* keep track of counts and stats                                             */
      572     1378
      573     1379    2      KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) +1;
      574     1380    3      IF KV$BPC.COUNT(Y_INDEX) > KV$BPC.PKCNT(Y_INDEX) THEN DO;
      575     1381    3         KV$BPC.PKCNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX);
      576     1382    3      END /* IF */;
      577     1383    2   END /* SUBROUTINE */;
      578     1384    1   BADARGS:;
      579     1385           %KH$SCREECH(COD=KVB_BDYARGS);
      580     1389        /*S*   SCREECH_CODE: KVB-S$KV_BDYARGS
      581     1390               MESSAGE: Buddy manager called with invalid arguments.
      582     1391               REMARKS: Release must be called with a properly bounded address
      583     1392                        and, if 2N, a power-of-two size.  Any size must be below
      584     1393                        the maximum.
      585     1394        */
      586     1395    1      ALTRETURN;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:23   
      587     1396
      588     1397        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:24   
      589     1398        /*F* NAME: KVB$INT - Initialize or Extend a Buffer Pool
      590     1399
      591     1400        This routine initializes a supplied
      592     1401        block of space so that it can be used as
      593     1402        a buffer pool.  Input parameters include
      594     1403        minimum and maximum block sizes for the
      595     1404        pool.  If the minimum and maximum
      596     1405        sizes are the same, this acts just like
      597     1406        a simple buffer pool.  If KVB$INT is called for a buffer pool that is already
      598     1407        initialized, BFRBGN$ and MINBFR must match the original call, and BFREND$
      599     1408        should indicate the new end of the pool.  It must exceed the value used in
      600     1409        the original call.  If the pool is using the bitmap algorithm, it will
      601     1410        continue to do so only if the original space required for the bitmap,
      602     1411        rounded up to the next proper buffer address, is large enough to represent
      603     1412        the newly added buffer space.
      604     1413
      605     1414        The form of the call for this service is:
      606     1415
      607     1416        .fif
      608     1417           CALL KVB$INT(kv$vdh_vdhinit);
      609     1418        .fin
      610     1419
      611     1420        where:
      612     1421        */
      613     1422
      614     1423        /*K* kv$vdh_vdhinit -
      615     1424        is a structure that contains all the required information
      616     1425        except the number of the pool to be initialized, which
      617     1426        should be stored in KV_B_POOL#, a UBIN SYMREF.  Note that KV_B_POOL#
      618     1427        is initialized to zero, indicating the system pool,
      619     1428        and that the system pool is generally initialized by a call
      620     1429        to the KVV$VDHINT routine.
      621     1430
      622     1431        See the description of KV$VDH_VDHINT.
      623     1432        */
      624     1433    1   KVB$INT: ENTRY (PARM1) ALTRET;
      625     1434
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:25   
      626     1435    1      Y_POOL$ = KV$VDH_VDHINT.BFRBGN$;
      627     1436    1      Y_SIZ = KV$VDH_VDHINT.MINBFR;
      628     1437        /* condition the parameters a bit */
      629     1438    1      IF Y_SIZ < 8 THEN Y_SIZ = 16;
      630     1439        /*D* DESCRIPTION:
      631     1440           Establish buddy space allocatable memory limits.  This is done in
      632     1441           the following manner:
      633     1442              1)  Buffer pool control table is set up right at BFRBGN$.
      634     1443              2)  If the debug flag is set for doing duplicate release/get checks
      635     1444                 then additional space at the end of the buffer pool control
      636     1445                 table is allocated for the bit map of the whole pool.
      637     1446              3)  Following the above, rounded up to the minimum allocatable
      638     1447                 unit, the beginning of the real memory pool is set.
      639     1448              4)  End of allocatable space is rounded down to the minimum
      640     1449                 allocatable unit from BFREND$.
      641     1450                                                                                  */
      642     1451        /* Size of the bit map array is determined as follows:
      643     1452              Each bit represents the minimum allocatable buffer size
      644     1453           given by MINBFR.  Since there are 16 bits/word the amount
      645     1454           of space that each bit map word represents is MINBFR*16.
      646     1455
      647     1456              To keep the bitmap indexes the same as the buffer numbers, the
      648     1457           bitmap has space for the space occuppied by the control table and
      649     1458           the bitmap itself, too (wasted, mind you, but not musc of it).
      650     1459                                                                                  */
      651     1460    1      SIZ = 0;
      652     1461    2      IF KV$VDH_VDHINT.DBG.BITMAPBFRS THEN DO;
      653     1462    2         PTRUBN = POFFW(KV$VDH_VDHINT.BFREND$, Y_POOL$);
      654     1463    2         PTRUBN = PTRUBN+Y_SIZ*15;
      655     1464
      656     1465        /*N* When PL6 generates better divide code, we'll use it */
      657     1466    2         T2 = Y_SIZ*(16384*16);
      658     1467    2         Y_INDEX = 16384;                  /* Limit of useful values             */
      659     1468    3         DO WHILE Y_INDEX~=0;
      660     1469    4            IF PTRUBN>T2 THEN DO;
      661     1470    4               PTRUBN = PTRUBN-T2;
      662     1471    4               SIZ = SIZ+Y_INDEX;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:26   
      663     1472    4            END;
      664     1473    3            T2 = T2/2;
      665     1474    3            Y_INDEX = Y_INDEX/2;
      666     1475    3         END;
      667     1476    2      END; /* IF */
      668     1477
      669     1478        /* Round up starting address to next minimum buffer boundary. */
      670     1479
      671     1480    1      SIZ = %BITMAP_OFFSET+SIZ+Y_SIZS-1;
      672     1481    1      SIZ = SIZ-MOD(SIZ, Y_SIZS);
      673     1482    1      PTR$ = PINCRW(Y_POOL$, SIZS);
      674     1483    1      Y_BFR# = SIZ/Y_SIZ;
      675     1484    1      SIZ = (SIZ-%BITMAP_OFFSET)*2;        /* BITMAPSIZ is in bytes, not words   */
      676     1485    2      IF KV_B_POOL$(KV_B_POOLX)~=ADDR(NIL) THEN DO;
      677     1486         /* We've been asked to extend the buffer space, do the proper thing */
      678     1487    2         IF KV_B_POOL$(KV_B_POOLX)~=Y_POOL$ OR Y_SIZ~=KV$BPC.MINSIZ
      679     1488    2           OR KV$VDH_VDHINT.BFREND$<=KV$BPC.END$ THEN GOTO BADARGS;
      680     1489    2         IF SIZ>KV$BPC.BITMAPSIZ THEN KV$BPC.DBG.BITMAP = '0'B;
      681     1490    2         PTR$ = KV$BPC.END$;
      682     1491    2         KV$BPC.TOT = KV$BPC.MAXSIZ;
      683     1492    2         CALL Y$DIVIDE;
      684     1493    2         GOTO NEXTSGM;
      685     1494    2      END;
      686     1495    1      KV$BPC.BITMAPSIZ = SIZ;
      687     1496    1      KV$BPC = '0'B;
      688     1497    1      KV$BPC.BITMAPSIZ = SIZ;
      689     1498    1      KV$BPC.MINSIZ = Y_SIZ;
      690     1499    1      KV$BPC.DBG = KV$VDH_VDHINT.DBG;
      691     1500    1      KV$BPC.BGN$ = PTR$;
      692     1501
      693     1502        /* Now release all the memory */
      694     1503
      695     1504        /* But don't let any buffer cross a physical segment boundary */
      696     1505
      697     1506    1   NEXTSGM:;
      698     1507        /*N* The L6 CPU seems to want to access 255 bytes of varbl CIP parm */
      699     1508    1      B1 = PINCRW(KV$VDH_VDHINT.BFREND$,-128); /* First non-legal address        */
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:27   
      700     1509    1      B1 = PINCRW (B1, -MOD(POFFW(B1, Y_POOL$), Y_SIZS));
      701     1510
      702     1511    2      IF PTRBIT.SGM~=T2SU.S1 THEN DO;      /* Do one segment at a time           */
      703     1512    2         T2SU.S1 = PTRBIT.SGM+1;
      704     1513    2         T2SU.U2 = 0;
      705     1514    2      END;
      706     1515    1      KV$BPC.END$ = B1;
      707     1516        /* First get the non-buddyable junk at the front */
      708     1517    1      SIZ = KV$VDH_VDHINT.MAXPWR2;
      709     1518    1      KV$BPC.MAXSIZ = KV$BPC.MINSIZ+1;
      710     1519    1      Y_INDEX = 0;
      711     1520    2      DO WHILE PINCRW(PTR$, Y_SIZS) <= KV$BPC.END$;
      712     1521    3         IF Y_BFRBIT&Y_BIT(Y_INDEX) OR Y_SIZ >= KV$BPC.MAXSIZ THEN DO;
      713     1522    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);
      714     1523    3            CALL Y$LINKTAIL;
      715     1524    3            PTR$ = PINCRW(PTR$, Y_SIZS);
      716     1525    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);
      717     1526    3         END;                              /* IF                                 */
      718     1527    3         ELSE DO;
      719     1528    3            Y_INDEX = Y_INDEX+1;
      720     1529    3            Y_SIZ = Y_SIZ*2;
      721     1530    4            IF SIZ~=0 THEN DO;
      722     1531    4               SIZ = SIZ-1;
      723     1532    4               IF Y_SIZ>=16384 THEN SIZ=0;
      724     1533    4               KV$BPC.MAXSIZ = Y_SIZ+SIZ;
      725     1534    4            END;
      726     1535    3         END;
      727     1536    2      END; /* DO WHILE */
      728     1537
      729     1538        /* Fix up MAXSIZ, if it was a guess */
      730     1539    1      IF SIZ~=0 THEN KV$BPC.MAXSIZ = Y_SIZ;
      731     1540        /* Now do the rest */
      732     1541
      733     1542    2      DO WHILE Y_INDEX>=0;
      734     1543    3         IF PINCRW(PTR$, Y_SIZS) <= KV$BPC.END$ THEN DO;
      735     1544    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);
      736     1545    3            CALL Y$LINKTAIL;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:28   
      737     1546    3            PTR$ = PINCRW(PTR$, Y_SIZS);
      738     1547    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);
      739     1548    3         END;
      740     1549    3         ELSE DO;
      741     1550    3            Y_INDEX = Y_INDEX-1;
      742     1551    3            Y_SIZ = Y_SIZ/2;
      743     1552    3         END;
      744     1553    2      END; /* DO WHILE */
      745     1554    1      IF KV$BPC.TOT<KV$BPC.MAXSIZ THEN KV$BPC.TOT = KV$BPC.MAXSIZ;
      746     1555    1      B1 = KV$BPC.END$;
      747     1556    2      IF T2SU.U2=0 THEN DO;
      748     1557
      749     1558        /* END$ is at the beginning of a segment - must be the middle of the pool */
      750     1559        /* So, continue with the nexzt segment */
      751     1560
      752     1561    2         Y_SIZ = KV$BPC.MINSIZ;
      753     1562    3         IF PTRBIT.BITS OR G$L69X THEN DO; /* Skip the boundary buffer           */
      754     1563    3            PTR$ = PINCRW (PTR$, Y_SIZS);
      755     1564    3            Y_BFR# = Y_BFR#+1;
      756     1565    3         END;
      757     1566    2         GOTO NEXTSGM;
      758     1567    2      END;
      759     1568    1      KV$BPC.MAXSIZ = KV$BPC.TOT;
      760     1569    1      KV$BPC.TOT = POFFW(KV$BPC.END$,KV$BPC.BGN$);
      761     1570
      762     1571        /* Now store away the BPC pointer for future reference */
      763     1572    1      KV_B_POOL$(KV_B_POOLX) = Y_POOL$;
      764     1573    1      RETURN;
      765     1574        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:29   
      766     1575        /*F* NAME: KVB$CHKBDYCHN - Check Buddy Space Chain
      767     1576
      768     1577        The KVB$CHKBDYCHN routine will validate all the
      769     1578        chains and sizes in the buddy space pool.
      770     1579
      771     1580        This routine saves all registers and inhibits up to a very
      772     1581        high level.  While there it goes down every chain making sure it
      773     1582        is of the correct length and that the correct sized buffers are
      774     1583        on the proper chain.  Any mismatch causes a SCREECH.
      775     1584
      776     1585        The form of the call for this service is:
      777     1586
      778     1587        .fif
      779     1588        }   CALL KVB$CHKBDYCHN(Pool_control_block);
      780     1589        .fin
      781     1590
      782     1591        where:
      783     1592        */
      784     1593
      785     1594        /*K* Pool_control_block
      786     1595        is the buddy space pool that is to be checked.
      787     1596
      788     1597        If the parameter is not present, KV_B_POOLX is assumed
      789     1598        to contain the pool number.
      790     1599        */
      791     1600
      792     1601    1   KVB$CHKBDYCHN: ENTRY(PARM1) ALTRET;
      793     1602
      794     1603        /*    This loop searches down each individual chain until the end is
      795     1604           successfully reached, whereupon we return.         */
      796     1605
      797     1606    1      Y_POOL$ = ADDR(PARM1);
      798     1607    1      IF Y_POOL$ = ADDR(NIL) THEN Y_POOL$ = KV_B_POOL$(KV_B_POOLX);
      799     1608    1      Y_SIZ = KV$BPC.MINSIZ;
      800     1609    2      DO Y_INDEX = 0 TO 12;
      801     1610
      802     1611    2         SIZ = KV$BPC.COUNT(Y_INDEX);
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:30   
      803     1612    2         PTR$ = KV$BPC.HEAD$(Y_INDEX);
      804     1613    2         B1 = ADDR(NIL);
      805     1614    3         DO WHILE PTR$ ~= ADDR(NIL);
      806     1615
      807     1616        /* Check the buffer for proper bound */
      808     1617        /*       IF PTRBIT.BITS&BINBIT(G_BITU(Y_INDEX)-1, 16) */
      809     1618        /* Also that buffer is in the pool */
      810     1619    3            IF PTR$ < KV$BPC.BGN$
      811     1620    3              OR PINCRW(PTR$, Y_SIZS) > KV$BPC.END$
      812     1621    3            THEN GOTO BADBUDDY;
      813     1622
      814     1623        /* Check blink for proper value */
      815     1624
      816     1625    3            IF PTR$->Y$BH.BLINK$ ~= B1
      817     1626        /* Also token values */
      818     1627    3              OR PTR$->Y$BH.TOKEN.W1 ~= %DEAD
      819     1628    3              OR PTR$->Y$BH.TOKEN.W2 ~= Y_INDEX
      820     1629    3            THEN GOTO BADBUDDY;
      821     1630
      822     1631        /*    Buffer looks as good as we can check, flink to the next one         */
      823     1632
      824     1633    3            B1 = PTR$;
      825     1634    3            PTR$ = PTR$->Y$BH.FLINK$;
      826     1635    3            SIZ = SIZ-1;
      827     1636    3         END;                              /* DO WHILE                           */
      828     1637
      829     1638        /*    Done with a chain search, make sure the chain was as long as
      830     1639           we thought it should be, and that its tail is correct        */
      831     1640
      832     1641    2         IF SIZ ~= 0 OR B1 ~= KV$BPC.TAIL$(Y_INDEX)
      833     1642    2         THEN GOTO BADBUDDY;
      834     1643
      835     1644        /* Set size for next chain */
      836     1645    2         Y_SIZ = Y_SIZ*2;
      837     1646
      838     1647    2      END; /* DO INDEX */
      839     1648    1      RETURN;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:31   
      840     1649    1   BADBUDDY:;
      841     1650           %KH$SCREECH(COD=KVB_BADBDY);
      842     1654        /*S*  screech_code: KVB-S$KV_BADBDY
      843     1655              message: Buddy manager mismanagement detected.
      844     1656              remarks: The chain-checker or bitmap logic has detected a bad chain
      845     1657                       or multiple release.
      846     1658        */
      847     1659        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:32   
      848     1660        /*I* NAME: Y$SETMEMBITS
      849     1661             PURPOSE: To set bits in the buddy pool bit map on a buffer release.
      850     1662             CALL: CALL Y$SETMEMBITS ALTRET(dual allocation screech);
      851     1663             INPUT:
      852     1664             Y_BFR# - Buffer# being released
      853     1665             Y_INDEX - Power of 2 of size of buffer (i.e., 3 means 2**3 = 8)
      854     1666             DESCRIPTION:
      855     1667             This routine takes a buffer address along with its size
      856     1668             and sets all the corresponding bits on in a bit map table of the
      857     1669             buddy space: While setting each of these bits on a check is made
      858     1670             to insure that none of the bits were on already since this would
      859     1671             mean a duplicate release of memory being attempted.                      */
      860     1672    1   Y$SETMEMBITS: PROC ALTRET;
      861     1673
      862     1674        /* Some data local to these routines */
      863     1675    2   DCL X SBIN;
      864     1676    2   DCL XU REDEF X UBIN;
      865     1677    2   DCL Y SBIN;
      866     1678    2   DCL Z REDEF Y BIT(16);
      867     1679    2   DCL YU REDEF Y UBIN;
      868     1680    2   DCL Y_BIT2(0:7) BIT(16) CONSTANT INIT('0003'X,'000C'X,'003'X,'00C'X,'03'X,'0C'X,'3'X
              1680            ,'C'X);
      869     1681    2   DCL Y_BIT4(0:3) BIT(16) CONSTANT INIT('000F'X,'00F'X,'0F'X,'F'X);
      870     1682    2   DCL Y_BIT8(0:1) BIT(16) CONSTANT INIT('00FF'X,'FF'X);
      871     1683    2   DCL Y$BIT(0:0) BIT(16) BASED(Y_POOL$) ALIGNED;
      872     1684    2   DCL Y$SBIN(0:0) REDEF Y$BIT SBIN;
      873     1685
      874     1686        /* First compute thw word index to the first word of bitmap for the bfr */
      875     1687    2      X = Y_BFR#/16+%BITMAP_OFFSET;
      876     1688    3      DO CASE(Y_INDEX);
      877     1689    3      CASE(ELSE);
      878     1690        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      879     1691    3         Y = X+Y_BITU(Y_INDEX-4);
      880     1692    4         DO WHILE X<Y;
      881     1693    4            IF Y$BIT(X) THEN ALTRETURN;
      882     1694    4            Y$SBIN(X) = Y$SBIN(X)-1;
      883     1695    4            X = X+1;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:33   
      884     1696    4         END;
      885     1697    3         RETURN;
      886     1698        /* Otherwise, the bits all fit in a word, get the proper mask */
      887     1699    3      CASE(0);
      888     1700    3         Z = Y_BIT(MOD(Y_BFR#,16));
      889     1701    3      CASE(1);
      890     1702    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));
      891     1703    3      CASE(2);
      892     1704    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));
      893     1705    3      CASE(3);
      894     1706    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));
      895     1707    3      END;
      896     1708    2      IF Z&Y$BIT(X) THEN ALTRETURN;
      897     1709    2      Y$BIT(X) = Y$BIT(X)|Z;
      898     1710    2      RETURN;
      899     1711        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:34   
      900     1712        /*I* NAME: Y$RESETMEMBITS
      901     1713             PURPOSE: To reset bits in the buddy pool bit map on a buffer get.
      902     1714             INTERFACE: None.
      903     1715             CALL: CALL Y$RESETMEMBITS ALTRET(dual allocation screech);
      904     1716             INPUT:
      905     1717             Y_BFR# - Buffer number being allocated
      906     1718             Y_INDEX - Power-of-2 size of the buffer.
      907     1719             DESCRIPTION:
      908     1720             This routine takes a buffer address along with its size
      909     1721             and resets all the corresponding bits on in a bit map table of the
      910     1722             buddy space: While resetting each of these bits a check is made
      911     1723             to insure that none of the bits were off already since this would
      912     1724             mean a duplicate allocation of memory being attempted.                   */
      913     1725    2   Y$RESETMEMBITS: ENTRY ALTRET;
      914     1726
      915     1727        /* First compute thw word index to the first word of bitmap for the bfr */
      916     1728    2      X = Y_BFR#/16+%BITMAP_OFFSET;
      917     1729    3      DO CASE(Y_INDEX);
      918     1730    3      CASE(ELSE);
      919     1731        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      920     1732    3         Y = X+Y_BITU(Y_INDEX-4);
      921     1733    4         DO WHILE X<Y;
      922     1734    4            Y$SBIN(X) = Y$SBIN(X)+1;
      923     1735    4            IF Y$BIT(X) THEN ALTRETURN;
      924     1736    4            X = X+1;
      925     1737    4         END;
      926     1738    3         RETURN;
      927     1739
      928     1740        /* Otherwise, the bits all fit in a word, get the proper mask */
      929     1741    3      CASE(0);
      930     1742    3         Z = Y_BIT(MOD(Y_BFR#,16));
      931     1743    3      CASE(1);
      932     1744    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));
      933     1745    3      CASE(2);
      934     1746    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));
      935     1747    3      CASE(3);
      936     1748    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:35   
      937     1749    3      END;
      938     1750    2      IF YU~=BITBIN(Z&Y$BIT(X)) THEN ALTRETURN;
      939     1751    2      Y$BIT(X) = Y$BIT(X)\Z;
      940     1752    2      RETURN;
      941     1753        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:36   
      942     1754        /*I* NAME: Y$CHECKMEMBITS
      943     1755             PURPOSE: To see if a buffer's bits are set in the map of the pool.
      944     1756             INTERFACE: None.
      945     1757             CALL: CALL Y$CHECKMEMBITS ALTRET(buffer is not free);
      946     1758             INPUT:
      947     1759             Y_BFR# - Buffer number (buddy) being checked
      948     1760             Y_INDEX - Power of 2 of size of buffer (i.e., 3 means 2**3 = 8)
      949     1761             DESCRIPTION:
      950     1762             This routine takes a buffer address along with its size
      951     1763             and checks to see if ANY of the bits are set that correspond to
      952     1764             that buffer: Not all bits are checked (which helps speed on the
      953     1765             big buffer checks), just enough to answer the question as to
      954     1766             whether the first allocatable unit containing the buddy space
      955     1767             token is present. Between the token and this routine the caller
      956     1768             can make a quick determination as to whether the buddy of a buffer
      957     1769             is available or not.                                                     */
      958     1770    2   Y$CHECKMEMBITS: ENTRY ALTRET;
      959     1771
      960     1772        /* First compute thw word index to the first word of bitmap for the bfr */
      961     1773    2      X = Y_BFR#/16+%BITMAP_OFFSET;
      962     1774    3      DO CASE(Y_INDEX);
      963     1775    3      CASE(ELSE);
      964     1776        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      965     1777    3         Y = X+Y_BITU(Y_INDEX-4);
      966     1778    4         DO WHILE X<Y;
      967     1779    4            IF Y$SBIN(X)+1~=0 THEN ALTRETURN;
      968     1780    4            X = X+1;
      969     1781    4         END;
      970     1782    3         RETURN;
      971     1783
      972     1784        /* Otherwise, the bits all fit in a word, get the proper mask */
      973     1785    3      CASE(0);
      974     1786    3         Z = Y_BIT(MOD(Y_BFR#,16));
      975     1787    3      CASE(1);
      976     1788    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));
      977     1789    3      CASE(2);
      978     1790    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:37   
      979     1791    3      CASE(3);
      980     1792    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));
      981     1793    3      END;
      982     1794    2      IF YU~=BITBIN(Z&Y$BIT(X)) THEN ALTRETURN;
      983     1795    2      RETURN;
      984     1796        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:38   
      985     1797        /*I* NAME: Y$DIVIDE
      986     1798             PURPOSE: To perform the PL6 statement:
      987     1799                Y_BFR# = POFFW(PTR$, Y_POOL$)/KV$BPC.MINSIZ;
      988     1800             Also ALTRETs if the remainder of the division is non-zero.
      989     1801             DESCRIPTION: PL6 wants an arm and a leg to do the computation,
      990     1802             since the L6 does exactly nothing if DIV overflows.
      991     1803        */
      992     1804    2   Y$DIVIDE: ENTRY ALTRET;
      993     1805    2      X = KV$BPC.MINSIZ;
      994     1806    2      T2 = POFFW(PTR$,Y_POOL$);
      995     1807
      996     1808        /* Since MINSIZ is at least 8, and POFFW is at most .30000, we need only
      997     1809           prune down the value a few times. */
      998     1810    3      IF T2SU.S1~=0 THEN DO;
      999     1811
     1000     1812    3         Y = 0;
     1001     1813    4         DO WHILE T2SU.S1<X;
     1002     1814    4            T2 = T2*2;
     1003     1815    4            Y = Y+1;
     1004     1816    4         END;
     1005     1817    3         T2SU.S1 = T2SU.S1-X;              /* One of the bad bits is now gone    */
     1006     1818    3         Y_BFRBIT = Y_BIT(16-Y);           /* Need to add back 2**(16-Y)         */
     1007     1819    4         DO WHILE T2SU.S1>=Y_BITU(Y);
     1008     1820
     1009     1821        /* There's another one to get rid of */
     1010     1822    4            T2 = T2*2;
     1011     1823    5            IF T2SU.S1>=X THEN DO;
     1012     1824    5               T2SU.S1 = T2SU.S1-X;
     1013     1825    5               Y_BFRBIT(Y) = '1'B;
     1014     1826    5            END;
     1015     1827    4            Y = Y+1;
     1016     1828    4         END;
     1017     1829
     1018     1830        /* Now put it back in one word */
     1019     1831    4         DO WHILE Y~=0;
     1020     1832    4            T2 = T2/2;
     1021     1833    4            Y = Y-1;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:39   
     1022     1834    4         END;
     1023     1835
     1024     1836        /* Now we can do a one-word division, which PL6 does Ok> */
     1025     1837    3         Y_BFR# = T2SU.U2/X+Y_BFR#;
     1026     1838    3         T2 = POFFW(PTR$,Y_POOL$);
     1027     1839    2      END; ELSE Y_BFR# = T2SU.U2/X;
     1028     1840    2      IF Y_BFR#*XU~=T2SU.U2 THEN ALTRETURN;
     1029     1841    2      RETURN;
     1030     1842    2   END /* SUBROUTINE */;
     1031     1843    1   END; /* MODULE */

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:40   
--  Include file information  --

   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KV_SCODE_C.:E05TOU  is referenced.
   KV_INT_M.:E05TOU  is referenced.
   KV$BPC.:E05TOU  is referenced.
   KH_SCREECH_M.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is never referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is never referenced.
   KV$VDO.:E05TOU  was found in the system file and is never referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is never referenced.
   KV$INT.:E05TOU  was found in the system file and is never referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is never referenced.
   KV$GLB.:E05TOU  was found in the system file and is never referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KVB$SVC.

   Procedure KVB$SVC requires 2187 words for executable code.
   Procedure KVB$SVC requires 48 words of local(AUTO) storage.

    No errors detected in file KVB$SVC.:E05TSI    .

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:41   

 Object Unit name= KVB$SVC                                    File name= KVB$SVC.:E05TOU
 UTS= JUL 30 '97 01:54:41.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     56     38  KVB$SVC
    1   Proc  even  none  2187    88B  KVB$SVC
    2  RoData even  none     6      6  KVB$SVC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KVB$SVC
     1      7          yes     yes      Std        2  KVB$GET
     1     13          yes     yes      Std        2  KVB$GETSYS
     1     1C          yes     yes      Std        2  KVB$GET2N
     1     2A          yes     yes      Std        2  KVB$GET2NSYS
     1    1C8          yes     yes      Std        2  KVB$RLS
     1    1D4          yes     yes      Std        2  KVB$RLSSYS
     1    1DD          yes     yes      Std        2  KVB$RLS2N
     1    1EB          yes     yes      Std        2  KVB$RLS2NSYS
     1    40E          yes     yes      Std        1  KVB$INT
     1    605          yes     yes      Std        1  KVB$CHKBDYCHN
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:42   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 KHD$SCREECH
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET
                       nStd      0 X6D_MID
                       nStd      0 X6C_ALRZ

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$LOW_MEM$                            KV_B_POOL$                            KV_B_POOL#
r    G$ROS$
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:43   


        1        1        /*M* KVB$SVC - buddy space manager */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*     NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IAD=3,IND=0 */
        8        8        /*F* NAME: Memory_Pool_Services
        9        9
       10       10        The library provides a set of routines that can be used to
       11       11        manage up to six independent pools of user main memory.
       12       12
       13       13        .fif
       14       14             KVB$INT          - initialize a buffer pool control block
       15       15             KVB$GET[2N][SYS] - allocate a  buffer
       16       16             KVB$RLS[2N][SYS] - release a buffer
       17       17             KVB$CHKBDYCHN    - consistency-check the buddy pool
       18       18        .fin
       19       19
       20       20        REFERENCE: See Knuth - The Art of Computer Programming,
       21       21        Vol. 1 for a description of the Buddy Space
       22       22        management system used here.
       23       23
       24       24        */
       25       25        KVB$SVC: PROC (PARM1, KV_B_BUF$) ALTRET;

     25   1 000000  D380 0000 0000  xent KVB$SVC         LNJ,B5   X6A_AUTO_2
          1 000003       0030 0002                       DC       48,2
          1 000005  0F81 0006                            B        s:991,PREL

       26       26        %INCLUDE GM_VIRTUAL_E;
       27      236        %INCLUDE KH_SCREECH_M;
       28      247        %INCLUDE KV$BPC;
       29      276 S      %INCLUDE KV$VDH;
       30      277        %INCLUDE KV_INT_M;
       31      420        %INCLUDE KV_SCODE_C;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:44   
       32      441        %INCLUDE LCP_6;
       33      632        %G$LOW_MEM (STCLASS="BASED(G$LOW_MEM$)");
       34      681    1   DCL G$LOW_MEM$ PTR SYMREF READONLY;
       35      682    1   DCL G_MON_ENT UBIN(32) CONSTANT INIT(%GM_MON_ENT_BASE);
       36      683    1   DCL G$MON_ENT$ REDEF G_MON_ENT PTR;
       37      684    1   DCL G$L69X BIT(16) ALIGNED BASED(G$MON_ENT$);
       38      685        %VLP_SCODE (FPTN=KVB_BDYARGS,FCG=KV,MID=B,STCLASS=CONSTANT,ERR#=%S$KV_BDYARGS);
       39      746        %VLP_SCODE (FPTN=KVB_BADBDY,FCG=KV,MID=B,STCLASS=CONSTANT,ERR#=%S$KV_BADBDY);
       40      807    1   DCL KHD$SCREECH ENTRY(1);
       41      808        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:45   
       42      809        /* Structure of buffer control block */
       43      810        %KV$BPC (STCLASS="BASED(Y_POOL$)");
       44      832        /* Structure of free buffers                                                  */
       45      833
       46      834    1   DCL 1 Y$BH BASED ALIGNED,
       47      835
       48      836        /* POINTER TO NEXT BUFFER */
       49      837    1          2 FLINK$ PTR,
       50      838        /* POINTER TO PREVIOUS BUFFER */
       51      839    1          2 BLINK$ PTR,
       52      840        /* BUFFER MANAGER TOKEN */
       53      841    1          2 TOKEN,
       54      842        /* FIRST WORD OF TOKEN ('DEAD'X) */
       55      843    1             3 W1 SBIN,
       56      844        %EQU DEAD = -8531;
       57      845        /* SECOND WORD OF TOEKN (POWER OF 2) */
       58      846    1             3 W2 SBIN WORD;
       59      847
       60      848    1   DCL 1 Y$BUSY BASED ALIGNED,
       61      849    1          2 BUSY CHAR(4),
       62      850    1          2 SIZ REDEF BUSY,
       63      851    1             3 WRD UBIN,3 * UBIN,
       64      852    1          2 CALLER$ PTR,
       65      853    1          2 ZAPPTR REDEF CALLER$,
       66      854    1             3 DDD BIT(12), 3 * BIT(20),
       67      855    1          2 THE_REST CHAR(SIZ);
       68      856    1   DCL 1 Y$BUSY_REST BASED ALIGNED CHAR(SIZ);
       69      857
       70      858        /* Array of pointers to control blocks (one per pool) */
       71      859    1   DCL KV_B_POOL$(0:5) PTR SYMREF;
       72      860
       73      861        /* Pool index to use for non-SYS calls (SYS uses 0). Actually a UBIN. */
       74      862    1   DCL KV_B_POOL# BIT(16) SYMREF;
       75      863    1   DCL KV_B_POOLX REDEF KV_B_POOL# UBIN;
       76      864        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:46   
       77      865
       78      866        /* Items for buddy space pool mapping/debugging aids                          */
       79      867
       80      868        /* Table of powers of 2 */
       81      869    1   DCL Y_BITU(0:15) UBIN CONSTANT INIT(
       82      870    1   1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768);
       83      871    1   DCL Y_BIT(0:15) REDEF Y_BITU BIT(16);
       84      872        /* Table of powers of 2 -1*/
       85      873    1   DCL Y_MSKU(0:15) UBIN CONSTANT INIT(
       86      874    1   0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767);
       87      875    1   DCL Y_MSK(0:15) REDEF Y_MSKU BIT(16);
       88      876        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:47   
       89      877        /* PARAMETERS and AUTO */
       90      878        /***************************************************************************/
       91      879        /*                                                                         */
       92      880        /* !!! WHEN ADDING OR DELETING ITEMS HERE, FIX COMPUTATION OF %CALLER$ !!! */
       93      881        /*                                                                         */
       94      882        %EQU CALLER$ = CHARTEXT('PINCRW(ADDR(FLAGS),-19)');
       95      883        /*                                                                         */
       96      884        /***************************************************************************/
       97      885    1   DCL PARM1 CHAR(KV_B_SIZ);
       98      886        %KV$VDH_VDHINT(STCLASS = REDEF PARM1);
       99      905    1   DCL KV_B_SIZ REDEF PARM1 UBIN;
      100      906    1   DCL KV_B_BUF$ PTR;
      101      907    1   DCL Y_POOL$ PTR;                        /* Pointer to pool control structure  */
      102      908    1   DCL PTR$ PTR;
      103      909    1   DCL 1 PTRBIT REDEF PTR$,
      104      910    1          2 SGM SBIN, 2 BITS BIT(16);
      105      911    1   DCL PTRUBN REDEF PTR$ UBIN(32);
      106      912    1   DCL SIZ UBIN;                           /* Callers buffer size                */
      107      913    1   DCL SIZS REDEF SIZ SBIN;                /* For PINCRW                         */
      108      914    1   DCL B1 PTR;
      109      915    1   DCL T2 REDEF B1 UBIN(32);
      110      916    1   DCL 1 T2SU REDEF B1,
      111      917    1          2 S1 SBIN,
      112      918    1          2 U2 UBIN;
      113      919    1   DCL Y_INDEX SBIN;                       /* Chain number (aka power of 2)      */
      114      920    1   DCL Y_SIZ UBIN;                         /* Size of buffers in Y_INDEX chain   */
      115      921    1   DCL Y_SIZS REDEF Y_SIZ SBIN;            /* For PINCRWs                        */
      116      922    1   DCL Y_BFR# UBIN;                   /* Buffer offset in KV$BPC.MINSIZ units    */
      117      923    1   DCL Y_BFRBIT(0:15) REDEF Y_BFR# BIT(1); /* Redef for bit-whacking             */
      118      924    1   DCL TMPTIM SBIN;                        /* Temp cell for timecalculations     */
      119      925    1   DCL 1 FLAGS,                            /* Control Flags                      */
      120      926        %EQU FLAGS_N2 = '8000'X;
      121      927    1          2 N2 BIT(1),                     /* 2N call                            */
      122      928    1          2 MND BIT(1),                    /* Unused mandatory flag              */
      123      929    1          2 * BIT(6),
      124      930    1          2 POOL UBIN BYTE CALIGNED;       /* KV_B_POOL# for non-SYS entry       */
      125      931    1   DCL X REDEF FLAGS UBIN;                 /* Temp for the buddy searcher        */
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:48   
      126      932
      127      933        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:49   
      128      934        /*F* NAME: KVB$GET - Get a Block from a Memory Pool
      129      935
      130      936        The KVB$GET routines will allocate a block of space from
      131      937        a given buffer pool.
      132      938
      133      939        The form of the call for these services is:
      134      940
      135      941        .fif
      136      942           CALL KVB$GET[2n][sys] (kv_b_siz, kv_b_buf$) ALTRET(label);
      137      943        .fin
      138      944
      139      945        where:
      140      946        */
      141      947
      142      948        /*K* 2n -
      143      949        indicates a power-of-2 multiple of the size indicated
      144      950        is to be allocated.
      145      951        The algorithm used is a
      146      952        "buddy system", wherein the size of every free block of memory is an
      147      953        integral power of two times the minimum block size, and its location
      148      954        is offset from the base of the pool by an integral multiple of its
      149      955        size.  Recombination of smaller blocks occurs only when two adjacent
      150      956        blocks can be combined into a larger block still conforming to these
      151      957        two rules.
      152      958
      153      959        This algorithm operates most efficiently when the
      154      960        distribution of request sizes consists of a small number of different
      155      961        sizes, all matching a contiguous range of free block sizes (e.g., all
      156      962        the requests are for blocks of size = minimum x 2**N, where N ranges
      157      963        from 4 to 7).  When a request is made for a size different from a free block
      158      964        size, the request must be satisfied by allocating a larger free block
      159      965        and then releasing the unused portion as smaller valid free blocks.
      160      966        This operation, known as "fragmentation", is the downfall of
      161      967        this algorithm if it occurs too frequently.  A feature of the
      162      968        algorithm is that none of the allocated space is used by the space
      163      969        manager.  The cost of this feature is that the user program must
      164      970        remember the size of each block in order to release it.
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:50   
      165      971        */
      166      972
      167      973        /*K* sys -
      168      974        indicates that the buffer is to be allocated from the
      169      975        default memory pool, which is zero.
      170      976
      171      977        When the "sys" version of KVB$GET is not used, the memory
      172      978        pool allocated must first be set in the global variable
      173      979        KV_B_POOL#.
      174      980        */
      175      981        /*K* kv_b_siz -
      176      982        is the word size of the buffer to be allocated.
      177      983        */
      178      984        /*K* kv_b_buf$ - PTR.
      179      985        The KVB$GET routine will store the starting address of
      180      986        the buffer obtained in kv_b_buf$.  If a buffer cannot
      181      987        be obtained, the KVB$GET routine will set kv_b_buf$ to
      182      988        ADDR(NIL) and take the alternate return.
      183      989        */
      184      990    1   KVB$GET: ENTRY (PARM1, KV_B_BUF$) ALTRET;

    990   1 000007  D380 0000 0000  xent KVB$GET         LNJ,B5   X6A_AUTO_2
          1 00000A       0030 0002                       DC       48,2

      185      991    1      FLAGS = KV_B_POOL#;

    991   1 00000C  E800 0000 0000  xsym                 LDR,R6   KV_B_POOL#
          1 00000F  EF47 0013                            STR,R6   FLAGS,AUTO

      186      992    1      GOTO GET_COMMON;

    992   1 000011  0F81 0021                            B        s:1000,PREL

      187      993    1   KVB$GETSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;

    993   1 000013  D380 0000 0000  xent KVB$GETSYS      LNJ,B5   X6A_AUTO_2
          1 000016       0030 0002                       DC       48,2
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:51   

      188      994    1      FLAGS = '0'B;

    994   1 000018  8747 0013                            CL       FLAGS,AUTO

      189      995    1      GOTO GET_COMMON;

    995   1 00001A  0F81 0018                            B        s:1000,PREL

      190      996    1   KVB$GET2N: ENTRY (PARM1, KV_B_BUF$) ALTRET;

    996   1 00001C  D380 0000 0000  xent KVB$GET2N       LNJ,B5   X6A_AUTO_2
          1 00001F       0030 0002                       DC       48,2

      191      997    1      FLAGS = KV_B_POOL#|%FLAGS_N2;

    997   1 000021  E800 0000 0000  xsym                 LDR,R6   KV_B_POOL#
          1 000024  E470 8000                            OR,R6    -32768,IMO
          1 000026  EF47 0013                            STR,R6   FLAGS,AUTO

      192      998    1      GOTO GET_COMMON;

    998   1 000028  0F81 000A                            B        s:1000,PREL

      193      999    1   KVB$GET2NSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;

    999   1 00002A  D380 0000 0000  xent KVB$GET2NSYS    LNJ,B5   X6A_AUTO_2
          1 00002D       0030 0002                       DC       48,2

      194     1000    1      FLAGS = %FLAGS_N2;

   1000   1 00002F  E870 8000                            LDR,R6   -32768,IMO
          1 000031  EF47 0013                            STR,R6   FLAGS,AUTO

   1000   1                              GET_COMMON      null
      195     1001        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:52   
      196     1002    1   GET_COMMON: ;                           /* THERE MUST BE AN ALTENTRY ABOVE ME */
      197     1003
      198     1004        /* Establish which pool to use */
      199     1005    1      Y_POOL$ = KV_B_POOL$(FLAGS.POOL);

   1005   1 000033  B847 0013            GET_COMMON      LDR,R3   FLAGS,AUTO
          1 000035  B570 00FF                            AND,R3   255,IMO
          1 000037  ECB0 0000 0000  xsym                 LDB,B6   KV_B_POOL$,R3
          1 00003A  EFC7 0008                            STB,B6   Y_POOL$,AUTO

      200     1006
      201     1007        /* accrue get time statistic                                                  */
      202     1008    1      TMPTIM = G$LOW_MEM.WDT_CURR;

   1008   1 00003C  DC80 0000 0000  xsym                 LDB,B5   G$LOW_MEM$
          1 00003F  E845 0017                            LDR,R6   23,B5
          1 000041  EF47 0012                            STR,R6   TMPTIM,AUTO

      203     1009
      204     1010        /* Pick up minimum block size and index                                       */
      205     1011    1      Y_INDEX = 0;

   1011   1 000043  8747 000F                            CL       Y_INDEX,AUTO

      206     1012    1      Y_SIZ = KV$BPC.MINSIZ;

   1012   1 000045  D846 006A                            LDR,R5   106,B6
          1 000047  DF47 0010                            STR,R5   Y_SIZ,AUTO

      207     1013
      208     1014        /* Move size request to temp */
      209     1015    1      SIZ = KV_B_SIZ;

   1015   1 000049  CCC7 0004                            LDB,B4   @PARM1,AUTO
          1 00004B  C804                                 LDR,R4   ,B4
          1 00004C  CF47 000C                            STR,R4   SIZ,AUTO

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:53   
      210     1016
      211     1017    1      IF SIZ > KV$BPC.MAXSIZ THEN GOTO BADARGS;

   1017   1 00004E  C946 006B                            CMR,R4   107,B6
          1 000050  0301 03B1                            BG       s:1384,PREL

      212     1018
      213     1019        /* locate the first 2n size big enough and set size request equal             */
      214     1020    2      DO WHILE (SIZ > Y_SIZ);

   1020   1 000052  C955                                 CMR,R4   R5
          1 000053  0381 000B                            BLE      s:1025,PREL

      215     1021    2         Y_INDEX = Y_INDEX+1;

   1021   1 000055  8AC7 000F                            INC      Y_INDEX,AUTO

      216     1022    2         Y_SIZ = Y_SIZ*2;

   1022   1 000057  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000059  6001                                 SOL,R6   1
          1 00005A  EF47 0010                            STR,R6   Y_SIZ,AUTO

      217     1023    2      END /* LOOP */;

   1023   1 00005C  E947 000C                            CMR,R6   SIZ,AUTO
          1 00005E  0277                                 BL       s:1021,SPREL

      218     1024
      219     1025    1      IF FLAGS.N2 THEN SIZ = Y_SIZ;

   1025   1 00005F  89C7 0013                            CMZ      FLAGS,AUTO
          1 000061  0881 0007                            BAGE     s:1028,PREL

   1025   1 000063  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000065  EF47 000C                            STR,R6   SIZ,AUTO
          1 000067  0F81 0017                            B        s:1034,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:54   

      220     1026    2      ELSE DO;

      221     1027        /* Round the non-pwr2 size up to a multiple of MINSIZ */
      222     1028    2         Y_BFR# = MOD(SIZ, KV$BPC.MINSIZ);

   1028   1 000069  F847 000C                            LDR,R7   SIZ,AUTO
          1 00006B  6C00                                 LDV,R6   0
          1 00006C  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00006E  F346 006A                            DIV,R7   106,B6
          1 000070  EF47 0011                            STR,R6   Y_BFR#,AUTO

      223     1029    2         IF Y_BFR#~=0 OR SIZ=0 THEN SIZ = SIZ+KV$BPC.MINSIZ-Y_BFR#;

   1029   1 000072  6981 0005                            BNEZ,R6  s:1029+6,PREL
          1 000074  D847 000C                            LDR,R5   SIZ,AUTO
          1 000076  5981 0008                            BNEZ,R5  s:1034,PREL

   1029   1 000078  D847 000C                            LDR,R5   SIZ,AUTO
          1 00007A  DA46 006A                            ADD,R5   106,B6
          1 00007C  D256                                 SUB,R5   R6
          1 00007D  DF47 000C                            STR,R5   SIZ,AUTO

      224     1030    2      END;

      225     1031
      226     1032        /* Call the chain checker if any of the bits are on which require
      227     1033           running down the chains                                                    */
      228     1034    1      IF KV$BPC.DBG.VALCHAINS THEN CALL KVB$CHKBDYCHN(KV$BPC);

   1034   1 00007F  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000081  82C6 0071                            LB,'2000'X        113,B6
          1 000083       2000
          1 000084  0581 0008                            BBF      s:1037,PREL

   1034   1 000086  BBC7 0008                            LAB,B3   Y_POOL$,AUTO
          1 000088  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:55   
          1 00008A  E3C0 057A                            LNJ,B6   s:1601,PREL
          1 00008C       0001                            DC       s:1037,PREL

      229     1035
      230     1036        /* Bump the GET count                                                         */
      231     1037    1      KV$BPC.GETC = KV$BPC.GETC+1;

   1037   1 00008D  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00008F  8AC6 0007                            INC      7,B6
          1 000091  8EC6 0006                            CAD      6,B6

      232     1038
      233     1039        /* now find an available buffer                                               */
      234     1040    2      DO WHILE (KV$BPC.HEAD$(Y_INDEX) = ADDR(NIL));

   1040   1 000093  0F81 0034                            B        s:1052,PREL

      235     1041    2         Y_SIZ = Y_SIZ*2;

   1041   1 000095  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000097  6001                                 SOL,R6   1
          1 000098  EF47 0010                            STR,R6   Y_SIZ,AUTO

      236     1042    2         Y_INDEX = Y_INDEX+1;

   1042   1 00009A  8AC7 000F                            INC      Y_INDEX,AUTO

      237     1043        /* if run out of block sizes to search, error                                 */
      238     1044    3         IF (Y_SIZ > KV$BPC.MAXSIZ) THEN DO;

   1044   1 00009C  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00009E  E946 006B                            CMR,R6   107,B6
          1 0000A0  0381 0027                            BLE      s:1052,PREL

      239     1045        /* accrue get time statistic                                                  */
      240     1046    3            KV$BPC.GETT = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.GETT;

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:56   
   1046   1 0000A2  DC80 0000 0000  xsym                 LDB,B5   G$LOW_MEM$
          1 0000A5  D847 0012                            LDR,R5   TMPTIM,AUTO
          1 0000A7  D245 0017                            SUB,R5   23,B5
          1 0000A9  E855                                 LDR,R6   R5
          1 0000AA  70F0                                 DAR,R7   16
          1 0000AB  8446 000A                            AID      10,B6
          1 0000AD  8D46 000A                            SDI      10,B6

      241     1047    3            IF KV$BPC.TOT-KV$BPC.USE>SIZ

   1047   1 0000AF  8C86                                 LDI      ,B6
          1 0000B0  84C6 0002                            SID      2,B6
          1 0000B2  8D47 0018                            SDI      Y+1,AUTO
          1 0000B4  F847 000C                            LDR,R7   SIZ,AUTO
          1 0000B6  6C00                                 LDV,R6   0
          1 0000B7  84C7 0018                            SID      Y+1,AUTO
          1 0000B9  6881 0005                            BGEZ,R6  s:1049,PREL

      242     1048    3            THEN KV$BPC.GETF = KV$BPC.GETF+1;

   1048   1 0000BB  8AC6 000F                            INC      15,B6
          1 0000BD  8EC6 000E                            CAD      14,B6

      243     1049    3            KV_B_BUF$ = ADDR(NIL);

   1049   1 0000BF  CB80 0000 0000                       LAB,B4   0
          1 0000C2  BCC7 0006                            LDB,B3   @KV_B_BUF$,AUTO
          1 0000C4  CF83                                 STB,B4   ,B3

      244     1050    3            ALTRETURN;

   1050   1 0000C5  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      245     1051    3         END /* IF */;
      246     1052    2      END /* LOOP */;

   1052   1 0000C8  B847 000F                            LDR,R3   Y_INDEX,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:57   
          1 0000CA  3E1B                                 ADV,R3   27
          1 0000CB  8DB6                                 CMN      ,B6,R3
          1 0000CC  0949                                 BE       s:1041,SPREL

      247     1053    1      B1 = KV$BPC.HEAD$(Y_INDEX);

   1053   1 0000CD  DCB6                                 LDB,B5   ,B6,R3
          1 0000CE  DFC7 000D                            STB,B5   B1,AUTO

      248     1054
      249     1055        /* Return the PTR and size to caller. */
      250     1056    1      IF FLAGS.N2 THEN KV_B_SIZ = SIZ;

   1056   1 0000D0  89C7 0013                            CMZ      FLAGS,AUTO
          1 0000D2  0881 0006                            BAGE     s:1057,PREL

   1056   1 0000D4  CCC7 0004                            LDB,B4   @PARM1,AUTO
          1 0000D6  E847 000C                            LDR,R6   SIZ,AUTO
          1 0000D8  EF04                                 STR,R6   ,B4

      251     1057    1      KV_B_BUF$ = B1;

   1057   1 0000D9  CCC7 0006                            LDB,B4   @KV_B_BUF$,AUTO
          1 0000DB  DF84                                 STB,B5   ,B4

      252     1058
      253     1059        /* Got a buffer, good return status is already set up in entry code.
      254     1060           De-link the buffer.                                                        */
      255     1061    1      PTR$ = B1->Y$BH.FLINK$;

   1061   1 0000DC  BC85                                 LDB,B3   ,B5
          1 0000DD  BFC7 000A                            STB,B3   PTR$,AUTO

      256     1062    2      IF PTR$ ~= ADDR(NIL) THEN DO;

   1062   1 0000DF  8DC7 000A                            CMN      PTR$,AUTO
          1 0000E1  0901 0008                            BE       s:1065,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:58   

      257     1063    2         PTR$->Y$BH.BLINK$ = ADDR(NIL);

   1063   1 0000E3  AB80 0000 0000                       LAB,B2   0
          1 0000E6  AFC3 0002                            STB,B2   2,B3

      258     1064    2      END /* IF */;

   1064   1 0000E8  0F81 0005                            B        s:1066,PREL

      259     1065    1      ELSE KV$BPC.TAIL$(Y_INDEX) = PTR$;

   1065   1 0000EA  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 0000EC  2E28                                 ADV,R2   40
          1 0000ED  BFA6                                 STB,B3   ,B6,R2

      260     1066    1      KV$BPC.HEAD$(Y_INDEX) = PTR$;

   1066   1 0000EE  BFB6                                 STB,B3   ,B6,R3

      261     1067
      262     1068        /* Update the memory space usage count                                        */
      263     1069    1      KV$BPC.USE = KV$BPC.USE + SIZ;

   1069   1 0000EF  F847 000C                            LDR,R7   SIZ,AUTO
          1 0000F1  6C00                                 LDV,R6   0
          1 0000F2  8446 0002                            AID      2,B6
          1 0000F4  8D46 0002                            SDI      2,B6

      264     1070
      265     1071        /* Update max use count                                                       */
      266     1072    2      IF KV$BPC.USE > KV$BPC.MXU THEN DO;

   1072   1 0000F6  84C6 0004                            SID      4,B6
          1 0000F8  0681 0009                            BCF      s:1076,PREL
          1 0000FA  6981 0003                            BNEZ,R6  s:1073,PREL
          1 0000FC  7901 0005                            BEZ,R7   s:1076,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:59   

      267     1073    2         KV$BPC.MXU = KV$BPC.USE;

   1073   1 0000FE  8CC6 0002                            LDI      2,B6
          1 000100  8D46 0004                            SDI      4,B6

      268     1074    2      END /* IF */;

      269     1075
      270     1076    1      KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) -1;

   1076   1 000102  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 000104  2E1C                                 ADV,R2   28
          1 000105  88A6                                 DEC      ,B6,R2

      271     1077
      272     1078        /* If in bit map debug mode, register the bit map changes caused by
      273     1079           allocating this power of 2 buffer.                                         */
      274     1080
      275     1081    2      IF (KV$BPC.DBG.BITMAP) THEN DO;

   1081   1 000106  89C6 0071                            CMZ      113,B6
          1 000108  0881 000D                            BAGE     s:1089,PREL

      276     1082    2         PTR$ = B1;

   1082   1 00010A  DFC7 000A                            STB,B5   PTR$,AUTO

      277     1083    2         CALL Y$DIVIDE;

   1083   1 00010C  E3C0 06EB                            LNJ,B6   s:0,PREL
          1 00010E       0001                            DC       s:1084,PREL

      278     1084    2         B1 = PTR$;                        /* Divide clobbers B1                 */

   1084   1 00010F  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 000111  EFC7 000D                            STB,B6   B1,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:60   

      279     1085    2         CALL Y$RESETMEMBITS ALTRET(BADBUDDY);

   1085   1 000113  E3C0 05F0                            LNJ,B6   s:0,PREL
          1 000115       056A                            DC       s:1635,PREL

      280     1086    2      END /* IF */;

      281     1087
      282     1088        /* clear buffer of buffer manager token                                       */
      283     1089    1      B1->Y$BH = BINBIT(SIZ,16);

   1089   1 000116  ECC7 000D                            LDB,B6   B1,AUTO
          1 000118  5C0C                                 LDV,R5   12
          1 000119  0021                                 ALR      ;
          1 00011A       4207 000C                                ALPHANUM(SIZ,AUTO,,2),;
          1 00011C       4006 0000                                ALPHANUM(0,B6,,R5,FILL)

      284     1090
      285     1091        /* Now check to see if we have to release any excess space.                   */
      286     1092    2      IF Y_SIZ > SIZ THEN DO;

   1092   1 00011E  437F                                 CSYNC    s:1089+7,SPREL
          1 00011F  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000121  E947 000C                            CMR,R6   SIZ,AUTO
          1 000123  0381 0059                            BLE      s:1128,PREL

      287     1093
      288     1094    2         PTR$ = PINCRW( B1, Y_SIZS);

   1094   1 000125  ECC7 000D                            LDB,B6   B1,AUTO
          1 000127  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 000129  DBB6                                 LAB,B5   ,B6,R3
          1 00012A  DFC7 000A                            STB,B5   PTR$,AUTO

      289     1095    2         Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:61   
   1095   1 00012C  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 00012E  C847 0011                            LDR,R4   Y_BFR#,AUTO
          1 000130  CA20 0000 0008  00                   ADD,R4   Y_BITU,R2
          1 000133  CF47 0011                            STR,R4   Y_BFR#,AUTO

      290     1096
      291     1097        /* Loop to release decreasing sizes of power of 2 buffers, updating
      292     1098           the buffer address and decrementing size. Start with the largest
      293     1099           that is small enough to need releasing.                                    */
      294     1100
      295     1101    2         SIZ = Y_SIZ-SIZ;                  /* # words to free                    */

   1101   1 000135  E247 000C                            SUB,R6   SIZ,AUTO
          1 000137  EF47 000C                            STR,R6   SIZ,AUTO

      296     1102
      297     1103    3         DO WHILE (SIZ ~= 0);              /* LOOP START                         */

   1103   1 000139  6901 003C                            BEZ,R6   s:1123,PREL

      298     1104
      299     1105        /* If this buffer size indicates that it is small enough to be released,
      300     1106           then do it.                                                                */
      301     1107    4            IF SIZ>=Y_SIZ THEN DO;

   1107   1 00013B  E847 000C                            LDR,R6   SIZ,AUTO
          1 00013D  E947 0010                            CMR,R6   Y_SIZ,AUTO
          1 00013F  0201 002E                            BL       s:1118,PREL

      302     1108    4               PTR$ = PINCRW( PTR$, -Y_SIZS);

   1108   1 000141  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000143  70F0                                 DAR,R7   16
          1 000144  84C7 000A                            SID      PTR$,AUTO
          1 000146  8656                                 CPL      R6
          1 000147  8657                                 CPL      R7
          1 000148  8470 0000 0001                       AID      1,IMO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:62   
          1 00014B  8D47 000A                            SDI      PTR$,AUTO

      303     1109    5               IF KV$BPC.DBG.BITMAP THEN DO;

   1109   1 00014D  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00014F  89C6 0071                            CMZ      113,B6
          1 000151  0881 000D                            BAGE     s:1113,PREL

      304     1110    5                  Y_BFR# = Y_BFR#-Y_BITU(Y_INDEX);

   1110   1 000153  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000155  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 000157  D230 0000 0008  00                   SUB,R5   Y_BITU,R3
          1 00015A  DF47 0011                            STR,R5   Y_BFR#,AUTO

      305     1111    5                  CALL Y$SETMEMBITS ALTRET(BADBUDDY);

   1111   1 00015C  E3C0 052D                            LNJ,B6   s:0,PREL
          1 00015E       0521                            DC       s:1635,PREL

      306     1112    5               END;

      307     1113    4               CALL Y$LINKTAIL;

   1113   1 00015F  E3C0 0270                            LNJ,B6   s:0,PREL
          1 000161       0001                            DC       s:1114,PREL

      308     1114    4               KV$BPC.FRG = KV$BPC.FRG+1;

   1114   1 000162  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000164  8AC6 0011                            INC      17,B6
          1 000166  8EC6 0010                            CAD      16,B6

      309     1115    4               SIZ = SIZ-Y_SIZ;

   1115   1 000168  E847 000C                            LDR,R6   SIZ,AUTO
          1 00016A  E247 0010                            SUB,R6   Y_SIZ,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:63   
          1 00016C  EF47 000C                            STR,R6   SIZ,AUTO

      310     1116    4            END /* IF */;

      311     1117
      312     1118    3            Y_INDEX = Y_INDEX-1;

   1118   1 00016E  88C7 000F                            DEC      Y_INDEX,AUTO

      313     1119    3            Y_SIZ = Y_SIZ/2;

   1119   1 000170  D847 0010                            LDR,R5   Y_SIZ,AUTO
          1 000172  5041                                 SOR,R5   1
          1 000173  DF47 0010                            STR,R5   Y_SIZ,AUTO

      314     1120    3         END /* LOOP */;

   1120   1 000175  69C6                                 BNEZ,R6  s:1107,SPREL

      315     1121
      316     1122        /* Restore the original buffer size. */
      317     1123    2         SIZ = POFFW(PTR$,B1);

   1123   1 000176  8CC7 000A                            LDI      PTR$,AUTO
          1 000178  84C7 000D                            SID      B1,AUTO
          1 00017A  E857                                 LDR,R6   R7
          1 00017B  EF47 000C                            STR,R6   SIZ,AUTO

      318     1124    2      END /* IF */;

      319     1125        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:64   
      320     1126
      321     1127        /* Check and see if we are to stuff this buffer with 'BUSYaaaa'               */
      322     1128    2      IF KV$BPC.DBG.BUSY THEN DO;

   1128   1 00017D  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00017F  82C6 0071                            LB,'4000'X        113,B6
          1 000181       4000
          1 000182  0581 0026                            BBF      s:1155,PREL

      323     1129
      324     1130        /* Now for the buffer which we are going to hand out insert the
      325     1131           following string throughout the buffer. 'BUSYaaaa' where aaaa is
      326     1132           4 bytes of binary address of the caller for this buffer.                   */
      327     1133        /* First uncover caller's address and save it away, then figure
      328     1134           out how many doublewords this buffer is (both 'BUSY' and the
      329     1135           caller's 'aaaa' take up a doubleword in the buffer).                       */
      330     1136    2         B1->Y$BUSY.CALLER$ = %CALLER$->Y$BH.FLINK$;

   1136   1 000184  DC87                                 LDB,B5   ,AUTO
          1 000185  CCC7 000D                            LDB,B4   B1,AUTO
          1 000187  DFC4 0002                            STB,B5   2,B4

      331     1137
      332     1138    2         B1->Y$BUSY.ZAPPTR.DDD = 'BAD'X;

   1138   1 000189  E870 BAD0                            LDR,R6   -17712,IMO
          1 00018B  EAC4 0002                            SRM,R6,'FFF0'X    2,B4
          1 00018D       FFF0

      333     1139    2         B1->Y$BUSY.BUSY = 'BUSY';

   1139   1 00018E  AB80 0000 0000  00                   LAB,B2   G_MON_ENT
          1 000191  2C6C                                 LDV,R2   108
          1 000192  6C04                                 LDV,R6   4
          1 000193  BB84                                 LAB,B3   ,B4
          1 000194  3C00                                 LDV,R3   0
          1 000195  0008                                 MMM
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:65   

      334     1140
      335     1141        /* Now loop through buffer setting it with the doublewords.
      336     1142           'BUSY' and 'aaaa' so that we can find busy or lost memory easily
      337     1143           along with to whom they belong.                                            */
      338     1144    2         SIZ = SIZ*2-8;

   1144   1 000196  E847 000C                            LDR,R6   SIZ,AUTO
          1 000198  6001                                 SOL,R6   1
          1 000199  6EF8                                 ADV,R6   -8
          1 00019A  EF47 000C                            STR,R6   SIZ,AUTO

      339     1145    2         B1->Y$BUSY.THE_REST = B1->Y$BUSY_REST;

   1145   1 00019C  ACC7 000D                            LDB,B2   B1,AUTO
          1 00019E  2C00                                 LDV,R2   0
          1 00019F  BB82                                 LAB,B3   ,B2
          1 0001A0  3C08                                 LDV,R3   8
          1 0001A1  0008                                 MMM

      340     1146    2         B1->Y$BUSY.SIZ.WRD = SIZ/2+4;

   1146   1 0001A2  E847 000C                            LDR,R6   SIZ,AUTO
          1 0001A4  6041                                 SOR,R6   1
          1 0001A5  ECC7 000D                            LDB,B6   B1,AUTO
          1 0001A7  6E04                                 ADV,R6   4
          1 0001A8  EF06                                 STR,R6   ,B6

      341     1147    2      END /* IF */;

      342     1148        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:66   
      343     1149
      344     1150        /* Trace this buffer get                                                      */
      345     1151        /* Eh?    AUDIT KV#B.TRC_GETBUF                                               */
      346     1152
      347     1153        /* Now check to see if we should run all the buddy chains to provide
      348     1154           some debugging aid.                                                        */
      349     1155    1      IF KV$BPC.DBG.VALCHAINS_AFTGET THEN CALL KVB$CHKBDYCHN(KV$BPC);

   1155   1 0001A9  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0001AB  82C6 0071                            LB,'1000'X        113,B6
          1 0001AD       1000
          1 0001AE  0581 0008                            BBF      s:1158,PREL

   1155   1 0001B0  BBC7 0008                            LAB,B3   Y_POOL$,AUTO
          1 0001B2  CBF0 0100                            LAB,B4   256,IMO
          1 0001B4  E3C0 0450                            LNJ,B6   s:1601,PREL
          1 0001B6       0001                            DC       s:1158,PREL

      350     1156
      351     1157        /* accrue get time statistic                                                  */
      352     1158    1      KV$BPC.GETT = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.GETT;

   1158   1 0001B7  EC80 0000 0000  xsym                 LDB,B6   G$LOW_MEM$
          1 0001BA  E847 0012                            LDR,R6   TMPTIM,AUTO
          1 0001BC  E246 0017                            SUB,R6   23,B6
          1 0001BE  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0001C0  70F0                                 DAR,R7   16
          1 0001C1  8445 000A                            AID      10,B5
          1 0001C3  8D45 000A                            SDI      10,B5

      353     1159    1      RETURN;

   1159   1 0001C5  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      354     1160        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:67   
      355     1161        /*F* NAME: KVB$RLS - Release a Block to a Memory Pool
      356     1162
      357     1163        The KVB$RLS routines release a block of space to a given buffer pool.
      358     1164
      359     1165        The form of the call for this service is:
      360     1166
      361     1167        .fif
      362     1168           CALL KVB$RLS[2n][sys] (kv_b_siz, kv_b_buf$) ALTRET(not_used);
      363     1169        .fin
      364     1170
      365     1171        where:
      366     1172        */
      367     1173
      368     1174        /*K* 2n -
      369     1175        indicates that the size is to be checked for a power-of-2
      370     1176        multiple of the minimum size.  The minimum size is specified in
      371     1177        KV$VDH_VDHINT.MINBFR when the pool is initialized.
      372     1178        */
      373     1179
      374     1180        /*K* sys -
      375     1181        indicates that the default memory pool, which is zero, is to be used.
      376     1182
      377     1183        When the "sys" version of KVB$REL is not used, the memory
      378     1184        pool allocated must first be set in the global variable
      379     1185        KV_B_POOL#.
      380     1186        */
      381     1187
      382     1188        /*K* kv_b_siz -
      383     1189        is the word size of the buffer to be released.
      384     1190        */
      385     1191
      386     1192        /*K* kv_b_buf$ - PTR.
      387     1193        Contains the address of the buffer to be released.
      388     1194        If kv_b_buf$ is not supplied, kv_b_siz is assumed to be located
      389     1195        in the first word of the buffer being released.
      390     1196        */
      391     1197    1   KVB$RLS: ENTRY (PARM1, KV_B_BUF$) ALTRET;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:68   

   1197   1 0001C8  D380 0000 0000  xent KVB$RLS         LNJ,B5   X6A_AUTO_2
          1 0001CB       0030 0002                       DC       48,2

      392     1198    1      FLAGS = KV_B_POOL#;

   1198   1 0001CD  E800 0000 0000  xsym                 LDR,R6   KV_B_POOL#
          1 0001D0  EF47 0013                            STR,R6   FLAGS,AUTO

      393     1199    1      GOTO RLS_COMMON;

   1199   1 0001D2  0F81 0021                            B        s:1207,PREL

      394     1200    1   KVB$RLSSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;

   1200   1 0001D4  D380 0000 0000  xent KVB$RLSSYS      LNJ,B5   X6A_AUTO_2
          1 0001D7       0030 0002                       DC       48,2

      395     1201    1      FLAGS = '0'B;

   1201   1 0001D9  8747 0013                            CL       FLAGS,AUTO

      396     1202    1      GOTO RLS_COMMON;

   1202   1 0001DB  0F81 0018                            B        s:1207,PREL

      397     1203    1   KVB$RLS2N: ENTRY (PARM1, KV_B_BUF$) ALTRET;

   1203   1 0001DD  D380 0000 0000  xent KVB$RLS2N       LNJ,B5   X6A_AUTO_2
          1 0001E0       0030 0002                       DC       48,2

      398     1204    1      FLAGS = KV_B_POOL#|%FLAGS_N2;

   1204   1 0001E2  E800 0000 0000  xsym                 LDR,R6   KV_B_POOL#
          1 0001E5  E470 8000                            OR,R6    -32768,IMO
          1 0001E7  EF47 0013                            STR,R6   FLAGS,AUTO

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:69   
      399     1205    1      GOTO RLS_COMMON;

   1205   1 0001E9  0F81 000A                            B        s:1207,PREL

      400     1206    1   KVB$RLS2NSYS: ENTRY (PARM1, KV_B_BUF$) ALTRET;

   1206   1 0001EB  D380 0000 0000  xent KVB$RLS2NSYS    LNJ,B5   X6A_AUTO_2
          1 0001EE       0030 0002                       DC       48,2

      401     1207    1      FLAGS = %FLAGS_N2;

   1207   1 0001F0  E870 8000                            LDR,R6   -32768,IMO
          1 0001F2  EF47 0013                            STR,R6   FLAGS,AUTO

   1207   1                              RLS_COMMON      null
      402     1208        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:70   
      403     1209    1   RLS_COMMON: ;                           /* THERE MUST BE AN ALTENTRY ABOVE ME */
      404     1210
      405     1211        /* set start of release interval                                              */
      406     1212    1      TMPTIM = G$LOW_MEM.WDT_CURR;

   1212   1 0001F4  EC80 0000 0000  xsym RLS_COMMON      LDB,B6   G$LOW_MEM$
          1 0001F7  E846 0017                            LDR,R6   23,B6
          1 0001F9  EF47 0012                            STR,R6   TMPTIM,AUTO

      407     1213
      408     1214        /* Validate input arguments                                                   */
      409     1215    1      IF ADDR(KV_B_BUF$)~=ADDR(NIL) THEN PTR$ = KV_B_BUF$;

   1215   1 0001FB  DCC7 0006                            LDB,B5   @KV_B_BUF$,AUTO
          1 0001FD  8DD5                                 CMN      B5
          1 0001FE  0901 0006                            BE       s:1216,PREL

   1215   1 000200  CC85                                 LDB,B4   ,B5
          1 000201  CFC7 000A                            STB,B4   PTR$,AUTO
          1 000203  0F81 0005                            B        s:1217,PREL

      410     1216    1      ELSE PTR$ = ADDR(KV_B_SIZ);

   1216   1 000205  CCC7 0004                            LDB,B4   @PARM1,AUTO
          1 000207  CFC7 000A                            STB,B4   PTR$,AUTO

      411     1217    1      Y_POOL$ = KV_B_POOL$(FLAGS.POOL);

   1217   1 000209  B847 0013                            LDR,R3   FLAGS,AUTO
          1 00020B  B570 00FF                            AND,R3   255,IMO
          1 00020D  BCB0 0000 0000  xsym                 LDB,B3   KV_B_POOL$,R3
          1 000210  BFC7 0008                            STB,B3   Y_POOL$,AUTO

      412     1218    1      IF PTR$ < KV$BPC.BGN$ THEN GOTO BADARGS;

   1218   1 000212  CDC3 006C                            CMB,B4   108,B3
          1 000214  0201 01ED                            BL       s:1384,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:71   

      413     1219    1      Y_SIZ = KV$BPC.MINSIZ;

   1219   1 000216  D843 006A                            LDR,R5   106,B3
          1 000218  DF47 0010                            STR,R5   Y_SIZ,AUTO

      414     1220    1      SIZ = KV_B_SIZ;

   1220   1 00021A  ACC7 0004                            LDB,B2   @PARM1,AUTO
          1 00021C  C802                                 LDR,R4   ,B2
          1 00021D  CF47 000C                            STR,R4   SIZ,AUTO

      415     1221    2      IF NOT FLAGS.N2 THEN DO;

   1221   1 00021F  89C7 0013                            CMZ      FLAGS,AUTO
          1 000221  0801 000C                            BAL      s:1225,PREL

      416     1222    2         Y_BFR# = MOD(SIZ, Y_SIZ);

   1222   1 000223  F854                                 LDR,R7   R4
          1 000224  6C00                                 LDV,R6   0
          1 000225  F355                                 DIV,R7   R5
          1 000226  EF47 0011                            STR,R6   Y_BFR#,AUTO

      417     1223    2         IF Y_BFR#~=0 THEN SIZ = SIZ-Y_BFR#+Y_SIZ;

   1223   1 000228  6901 0005                            BEZ,R6   s:1225,PREL

   1223   1 00022A  C256                                 SUB,R4   R6
          1 00022B  CA55                                 ADD,R4   R5
          1 00022C  CF47 000C                            STR,R4   SIZ,AUTO

      418     1224    2      END;

      419     1225    1      IF SIZ > KV$BPC.MAXSIZ

   1225   1 00022E  C943 006B                            CMR,R4   107,B3
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:72   
          1 000230  0301 01D1                            BG       s:1384,PREL
          1 000232  A847 000C                            LDR,R2   SIZ,AUTO
          1 000234  9BA4                                 LAB,B1   ,B4,R2
          1 000235  9DC3 006E                            CMB,B1   110,B3
          1 000237  0301 01CA                            BG       s:1384,PREL

      420     1226    1        OR PINCRW(PTR$, SIZS) > KV$BPC.END$ THEN GOTO BADARGS;
      421     1227
      422     1228        /* Compute the buffer number (Y_BFR#) */
      423     1229    1      CALL Y$DIVIDE ALTRET(BADARGS);

   1229   1 000239  E3C0 05BE                            LNJ,B6   s:0,PREL
          1 00023B       01C7                            DC       s:1384,PREL

      424     1230
      425     1231        /* Do intensive check before tracing                                          */
      426     1232    1      IF KV$BPC.DBG.VALCHAINS THEN CALL KVB$CHKBDYCHN(KV$BPC);

   1232   1 00023C  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00023E  82C6 0071                            LB,'2000'X        113,B6
          1 000240       2000
          1 000241  0581 0008                            BBF      s:1237,PREL

   1232   1 000243  BBC7 0008                            LAB,B3   Y_POOL$,AUTO
          1 000245  CBF0 0100                            LAB,B4   256,IMO
          1 000247  E3C0 03BD                            LNJ,B6   s:1601,PREL
          1 000249       0001                            DC       s:1237,PREL

      427     1233
      428     1234        /* Eh?    AUDIT KV#B.TRC_RLS2N                                                */
      429     1235
      430     1236        /* maintain release count statistic                                           */
      431     1237    1      KV$BPC.RLSC = KV$BPC.RLSC+1;

   1237   1 00024A  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00024C  8AC6 0009                            INC      9,B6
          1 00024E  8EC6 0008                            CAD      8,B6
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:73   

      432     1238        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:74   
      433     1239
      434     1240        /* General release logic. This code takes a buffer (KV_B_BUF$)
      435     1241           which must begin on a power-of-2 boundary at least as big as its size,
      436     1242           and releases it in decreasing size chunks, the last of which is checked
      437     1243           for a possible buddy.                                                      */
      438     1244
      439     1245        /* Find the chain to start at */
      440     1246    1      Y_INDEX = 0;

   1246   1 000250  8747 000F                            CL       Y_INDEX,AUTO

      441     1247    2      DO WHILE SIZ > Y_SIZ;

   1247   1 000252  E847 000C                            LDR,R6   SIZ,AUTO
          1 000254  E947 0010                            CMR,R6   Y_SIZ,AUTO
          1 000256  0381 000B                            BLE      s:1254,PREL

      442     1248
      443     1249    2         Y_INDEX = Y_INDEX+1;

   1249   1 000258  8AC7 000F                            INC      Y_INDEX,AUTO

      444     1250    2         Y_SIZ = Y_SIZ*2;

   1250   1 00025A  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 00025C  6001                                 SOL,R6   1
          1 00025D  EF47 0010                            STR,R6   Y_SIZ,AUTO

      445     1251    2      END /* LOOP */;

   1251   1 00025F  E947 000C                            CMR,R6   SIZ,AUTO
          1 000261  0277                                 BL       s:1249,SPREL

      446     1252
      447     1253        /* Now check buffer alignment, and size if RLS2N */
      448     1254    1      IF FLAGS.N2 AND SIZ ~= Y_SIZ

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:75   
   1254   1 000262  89C7 0013                            CMZ      FLAGS,AUTO
          1 000264  0881 0007                            BAGE     s:1254+10,PREL
          1 000266  E847 000C                            LDR,R6   SIZ,AUTO
          1 000268  E947 0010                            CMR,R6   Y_SIZ,AUTO
          1 00026A  0981 0197                            BNE      s:1384,PREL
          1 00026C  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 00026E  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 000270  E530 0000 0018  00                   AND,R6   Y_MSKU,R3
          1 000273  6981 018E                            BNEZ,R6  s:1384,PREL
          1 000275  E847 000C                            LDR,R6   SIZ,AUTO
          1 000277  6901 018A                            BEZ,R6   s:1384,PREL

      449     1255    1        OR Y_BFRBIT&Y_MSK(Y_INDEX) OR SIZ=0 THEN GOTO BADARGS;
      450     1256
      451     1257        /* adjust memory in use statistic                                             */
      452     1258    1      KV$BPC.USE = KV$BPC.USE-SIZ;

   1258   1 000279  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00027B  F856                                 LDR,R7   R6
          1 00027C  6C00                                 LDV,R6   0
          1 00027D  84C6 0002                            SID      2,B6
          1 00027F  8656                                 CPL      R6
          1 000280  8657                                 CPL      R7
          1 000281  8470 0000 0001                       AID      1,IMO
          1 000284  8D46 0002                            SDI      2,B6

      453     1259
      454     1260        /* this loop releases ever smaller blocks until only one is left              */
      455     1261
      456     1262    2      DO WHILE (SIZ ~= Y_SIZ);

   1262   1 000286  D847 000C                            LDR,R5   SIZ,AUTO
          1 000288  D947 0010                            CMR,R5   Y_SIZ,AUTO
          1 00028A  0901 0033                            BE       s:1277,PREL

      457     1263    2         Y_INDEX = Y_INDEX-1;

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:76   
   1263   1 00028C  88C7 000F                            DEC      Y_INDEX,AUTO

      458     1264    2         Y_SIZ = Y_SIZ/2;

   1264   1 00028E  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000290  6041                                 SOR,R6   1
          1 000291  EF47 0010                            STR,R6   Y_SIZ,AUTO

      459     1265    3         IF SIZ > Y_SIZ THEN DO;

   1265   1 000293  E947 000C                            CMR,R6   SIZ,AUTO
          1 000295  0281 0023                            BGE      s:1274,PREL

      460     1266
      461     1267    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);

   1267   1 000297  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000299  89C6 0071                            CMZ      113,B6
          1 00029B  0881 0004                            BAGE     s:1268,PREL

   1267   1 00029D  E3C0 03EC                            LNJ,B6   s:0,PREL
          1 00029F       03E0                            DC       s:1635,PREL

      462     1268    3            CALL Y$LINKTAIL;

   1268   1 0002A0  E3C0 012F                            LNJ,B6   s:0,PREL
          1 0002A2       0001                            DC       s:1270,PREL

      463     1269
      464     1270    3            PTR$ = PINCRW( PTR$, Y_SIZS);

   1270   1 0002A3  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 0002A5  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 0002A7  DBB6                                 LAB,B5   ,B6,R3
          1 0002A8  DFC7 000A                            STB,B5   PTR$,AUTO

      465     1271    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:77   

   1271   1 0002AA  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 0002AC  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 0002AE  EA20 0000 0008  00                   ADD,R6   Y_BITU,R2
          1 0002B1  EF47 0011                            STR,R6   Y_BFR#,AUTO

      466     1272    3            SIZ = SIZ-Y_SIZ;

   1272   1 0002B3  D847 000C                            LDR,R5   SIZ,AUTO
          1 0002B5  D247 0010                            SUB,R5   Y_SIZ,AUTO
          1 0002B7  DF47 000C                            STR,R5   SIZ,AUTO

      467     1273    3         END /* IF */;

      468     1274    2      END /* LOOP */;

   1274   1 0002B9  E847 000C                            LDR,R6   SIZ,AUTO
          1 0002BB  E947 0010                            CMR,R6   Y_SIZ,AUTO
          1 0002BD  09CF                                 BNE      s:1263,SPREL

      469     1275
      470     1276        /* Set free-bits for the last piece now. */
      471     1277    1      IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);

   1277   1 0002BE  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0002C0  89C6 0071                            CMZ      113,B6
          1 0002C2  0881 0004                            BAGE     s:1282,PREL

   1277   1 0002C4  E3C0 03C5                            LNJ,B6   s:0,PREL
          1 0002C6       03B9                            DC       s:1635,PREL

      472     1278
      473     1279        /* start of loop to go through conseutive power of 2 chains searching
      474     1280           for buddies.                                                               */
      475     1281
      476     1282    2      DO WHILE (Y_SIZ < KV$BPC.MAXSIZ);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:78   
   1282   1 0002C7  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0002C9  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 0002CB  E946 006B                            CMR,R6   107,B6
          1 0002CD  0281 00C5                            BGE      s:1342,PREL

      477     1283
      478     1284        /* calculate buddy addr                                                       */
      479     1285    2         X = BITBIN(Y_BIT(Y_INDEX)&Y_BFRBIT);

   1285   1 0002CF  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 0002D1  E830 0000 0008  00                   LDR,R6   Y_BITU,R3
          1 0002D4  E547 0011                            AND,R6   Y_BFR#,AUTO
          1 0002D6  EF47 0013                            STR,R6   FLAGS,AUTO

      480     1286    2         IF X~=0 THEN PTR$ = PINCRW(PTR$, -Y_SIZS);

   1286   1 0002D8  6901 000F                            BEZ,R6   s:1287,PREL

   1286   1 0002DA  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 0002DC  70F0                                 DAR,R7   16
          1 0002DD  84C7 000A                            SID      PTR$,AUTO
          1 0002DF  8656                                 CPL      R6
          1 0002E0  8657                                 CPL      R7
          1 0002E1  8470 0000 0001                       AID      1,IMO
          1 0002E4  8D47 000A                            SDI      PTR$,AUTO
          1 0002E6  0F81 0008                            B        s:1288,PREL

      481     1287    2         ELSE PTR$ = PINCRW(PTR$, Y_SIZS);

   1287   1 0002E8  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 0002EA  A847 0010                            LDR,R2   Y_SIZ,AUTO
          1 0002EC  DBA6                                 LAB,B5   ,B6,R2
          1 0002ED  DFC7 000A                            STB,B5   PTR$,AUTO

      482     1288    2         IF PTR$>=KV$BPC.END$ THEN GOTO LINKTAIL;

   1288   1 0002EF  ECC7 000A                            LDB,B6   PTR$,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:79   
          1 0002F1  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0002F3  EDC5 006E                            CMB,B6   110,B5
          1 0002F5  0281 009F                            BGE      s:1342,PREL

      483     1289
      484     1290        /* Set start 'buffer' to be address of ptr to first power of 2 chain.         */
      485     1291    2         B1 = KV$BPC.HEAD$(Y_INDEX);

   1291   1 0002F7  3E1B                                 ADV,R3   27
          1 0002F8  CCB5                                 LDB,B4   ,B5,R3
          1 0002F9  CFC7 000D                            STB,B4   B1,AUTO

      486     1292
      487     1293        /* Check whether the "buddy" buffer has been released by the buffer
      488     1294           manager.  If no, don't bother searching him out but simply
      489     1295           link this buffer onto the head of the proper power of
      490     1296           chain.  Also, don't search for buddies if this power of 2 chain is
      491     1297           is addr(nil) or this buffer is the highest power of 2 available.           */
      492     1298    2         IF PTR$->Y$BH.TOKEN.W1 ~= %DEAD

   1298   1 0002FB  E846 0004                            LDR,R6   4,B6
          1 0002FD  E970 DEAD                            CMR,R6   -8531,IMO
          1 0002FF  0981 0095                            BNE      s:1342,PREL
          1 000301  D846 0005                            LDR,R5   5,B6
          1 000303  D947 000F                            CMR,R5   Y_INDEX,AUTO
          1 000305  0981 008F                            BNE      s:1342,PREL
          1 000307  8DC7 000D                            CMN      B1,AUTO
          1 000309  0901 008B                            BE       s:1342,PREL

      493     1299    2           OR PTR$->Y$BH.TOKEN.W2 ~= Y_INDEX
      494     1300    2           OR B1 = ADDR(NIL) THEN GOTO LINKTAIL;
      495     1301
      496     1302        /* Bump # times we actually search for a buddy                                */
      497     1303    2         KV$BPC.SCH = KV$BPC.SCH+1;

   1303   1 00030B  8AC5 0015                            INC      21,B5
          1 00030D  8EC5 0014                            CAD      20,B5
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:80   

      498     1304
      499     1305        /* loop to search through the chains to actually find the buddy.              */
      500     1306    2         IF NOT KV$BPC.DBG.BITMAP

   1306   1 00030F  89C5 0071                            CMZ      113,B5
          1 000311  0801 0013                            BAL      s:1315,PREL

      501     1307    3         THEN DO WHILE B1 ~= PTR$;         /* LOOP START                         */

   1307   1 000313  CDC7 000A                            CMB,B4   PTR$,AUTO
          1 000315  0901 0024                            BE       s:1321,PREL

      502     1308        /* If we didn't see it, it's not there. */
      503     1309    3            IF B1 = ADDR(NIL) THEN GOTO LINKTAIL;

   1309   1 000317  8DC7 000D                            CMN      B1,AUTO
          1 000319  0901 007B                            BE       s:1342,PREL

      504     1310
      505     1311    3            B1 = B1->Y$BH.FLINK$;

   1311   1 00031B  ECC7 000D                            LDB,B6   B1,AUTO
          1 00031D  DC86                                 LDB,B5   ,B6
          1 00031E  DFC7 000D                            STB,B5   B1,AUTO

      506     1312
      507     1313    3         END /* LOOP */;

   1313   1 000320  DDC7 000A                            CMB,B5   PTR$,AUTO
          1 000322  09F5                                 BNE      s:1309,SPREL
          1 000323  0F81 0016                            B        s:1321,PREL

      508     1314    3         ELSE DO;

      509     1315    3            Y_BFRBIT = Y_BFRBIT\Y_BIT(Y_INDEX);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:81   
   1315   1 000325  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 000327  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 000329  E620 0000 0008  00                   XOR,R6   Y_BITU,R2
          1 00032C  EF47 0011                            STR,R6   Y_BFR#,AUTO

      510     1316    3            CALL Y$CHECKMEMBITS ALTRET(LINKTAIL);

   1316   1 00032E  E3C0 0451                            LNJ,B6   s:0,PREL
          1 000330       0065                            DC       s:1342,PREL

      511     1317    3            Y_BFRBIT = Y_BFRBIT\Y_BIT(Y_INDEX);

   1317   1 000331  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000333  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 000335  E630 0000 0008  00                   XOR,R6   Y_BITU,R3
          1 000338  EF47 0011                            STR,R6   Y_BFR#,AUTO

      512     1318    3         END;

      513     1319
      514     1320        /*  FOUND THE BUDDY IN THE CHAIN */
      515     1321    2         KV$BPC.CMB = KV$BPC.CMB+1;

   1321   1 00033A  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00033C  8AC6 0013                            INC      19,B6
          1 00033E  8EC6 0012                            CAD      18,B6

      516     1322
      517     1323        /* Delink the buddy using the BLINK$  &  FLINK$                           */
      518     1324    2         IF PTR$->Y$BH.BLINK$ = ADDR(NIL)

   1324   1 000340  DCC7 000A                            LDB,B5   PTR$,AUTO
          1 000342  8DC5 0002                            CMN      2,B5
          1 000344  0981 0008                            BNE      s:1326,PREL

      519     1325    2         THEN KV$BPC.HEAD$(Y_INDEX) = PTR$->Y$BH.FLINK$;

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:82   
   1325   1 000346  CC85                                 LDB,B4   ,B5
          1 000347  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000349  3E1B                                 ADV,R3   27
          1 00034A  CFB6                                 STB,B4   ,B6,R3
          1 00034B  0F81 0005                            B        s:1327,PREL

      520     1326    2         ELSE PTR$->Y$BH.BLINK$->Y$BH.FLINK$ = PTR$->Y$BH.FLINK$;

   1326   1 00034D  CCC5 0002                            LDB,B4   2,B5
          1 00034F  BC85                                 LDB,B3   ,B5
          1 000350  BF84                                 STB,B3   ,B4

      521     1327    2         IF PTR$->Y$BH.FLINK$ = ADDR(NIL)

   1327   1 000351  8D85                                 CMN      ,B5
          1 000352  0981 0009                            BNE      s:1329,PREL

      522     1328    2         THEN KV$BPC.TAIL$(Y_INDEX) = PTR$->Y$BH.BLINK$;

   1328   1 000354  CCC5 0002                            LDB,B4   2,B5
          1 000356  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000358  3E28                                 ADV,R3   40
          1 000359  CFB6                                 STB,B4   ,B6,R3
          1 00035A  0F81 0006                            B        s:1330,PREL

      523     1329    2         ELSE PTR$->Y$BH.FLINK$->Y$BH.BLINK$ = PTR$->Y$BH.BLINK$;

   1329   1 00035C  CC85                                 LDB,B4   ,B5
          1 00035D  BCC5 0002                            LDB,B3   2,B5
          1 00035F  BFC4 0002                            STB,B3   2,B4

      524     1330    2         KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) -1;

   1330   1 000361  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000363  3E1C                                 ADV,R3   28
          1 000364  88B6                                 DEC      ,B6,R3

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:83   
      525     1331
      526     1332        /* Starting new chain search. Set y_index to point to next
      527     1333           power of 2 chain.                                                    */
      528     1334    2         IF X=0 THEN PTR$ = PINCRW(PTR$,-Y_SIZS);

   1334   1 000365  E847 0013                            LDR,R6   FLAGS,AUTO
          1 000367  6981 000F                            BNEZ,R6  s:1335,PREL

   1334   1 000369  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 00036B  70F0                                 DAR,R7   16
          1 00036C  84C7 000A                            SID      PTR$,AUTO
          1 00036E  8656                                 CPL      R6
          1 00036F  8657                                 CPL      R7
          1 000370  8470 0000 0001                       AID      1,IMO
          1 000373  8D47 000A                            SDI      PTR$,AUTO
          1 000375  0F81 000A                            B        s:1336,PREL

      529     1335    2         ELSE Y_BFR# = Y_BFR#-Y_BITU(Y_INDEX);

   1335   1 000377  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 000379  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 00037B  D220 0000 0008  00                   SUB,R5   Y_BITU,R2
          1 00037E  DF47 0011                            STR,R5   Y_BFR#,AUTO

      530     1336    2         PINCRW(PTR$,Y_SIZS)->Y$BH.TOKEN.W1 = %DEAD-2; /* "DEAB" for buddies     */

   1336   1 000380  DCC7 000A                            LDB,B5   PTR$,AUTO
          1 000382  A847 0010                            LDR,R2   Y_SIZ,AUTO
          1 000384  2E04                                 ADV,R2   4
          1 000385  E870 DEAB                            LDR,R6   -8533,IMO
          1 000387  EF25                                 STR,R6   ,B5,R2

      531     1337    2         Y_INDEX = Y_INDEX+1;

   1337   1 000388  8AC7 000F                            INC      Y_INDEX,AUTO

      532     1338    2         Y_SIZ = Y_SIZ*2;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:84   

   1338   1 00038A  D847 0010                            LDR,R5   Y_SIZ,AUTO
          1 00038C  5001                                 SOL,R5   1
          1 00038D  DF47 0010                            STR,R5   Y_SIZ,AUTO

      533     1339    2      END /* DO WHILE */;

   1339   1 00038F  D946 006B                            CMR,R5   107,B6
          1 000391  0201 FF3D                            BL       s:1285,PREL

      534     1340
      535     1341        /* The buffer address is already right, don't adjust it. */
      536     1342    1      Y_SIZ = 0;

   1342   1 000393  8747 0010                            CL       Y_SIZ,AUTO

   1342   1                              LINKTAIL        null
      537     1343    1   LINKTAIL:;
      538     1344        /* Restore the non-buddy buffer address. */
      539     1345    1      IF X=0 THEN PTR$ = PINCRW(PTR$, -Y_SIZS);

   1345   1 000395  E847 0013            LINKTAIL        LDR,R6   FLAGS,AUTO
          1 000397  6981 000F                            BNEZ,R6  s:1346,PREL

   1345   1 000399  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 00039B  70F0                                 DAR,R7   16
          1 00039C  84C7 000A                            SID      PTR$,AUTO
          1 00039E  8656                                 CPL      R6
          1 00039F  8657                                 CPL      R7
          1 0003A0  8470 0000 0001                       AID      1,IMO
          1 0003A3  8D47 000A                            SDI      PTR$,AUTO
          1 0003A5  0F81 0008                            B        s:1348,PREL

      540     1346    1      ELSE PTR$ = PINCRW(PTR$, Y_SIZS);

   1346   1 0003A7  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 0003A9  B847 0010                            LDR,R3   Y_SIZ,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:85   
          1 0003AB  DBB6                                 LAB,B5   ,B6,R3
          1 0003AC  DFC7 000A                            STB,B5   PTR$,AUTO

      541     1347
      542     1348    1      CALL Y$LINKTAIL;

   1348   1 0003AE  E3C0 0021                            LNJ,B6   s:0,PREL
          1 0003B0       0001                            DC       s:1351,PREL

      543     1349
      544     1350        /* Release done, check chains                                                 */
      545     1351    1      IF KV$BPC.DBG.VALCHAINS_AFTRLS THEN CALL KVB$CHKBDYCHN(KV$BPC);

   1351   1 0003B1  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0003B3  82C6 0071                            LB,'0800'X        113,B6
          1 0003B5       0800
          1 0003B6  0581 0008                            BBF      s:1353,PREL

   1351   1 0003B8  BBC7 0008                            LAB,B3   Y_POOL$,AUTO
          1 0003BA  CBF0 0100                            LAB,B4   256,IMO
          1 0003BC  E3C0 0248                            LNJ,B6   s:1601,PREL
          1 0003BE       0001                            DC       s:1353,PREL

      546     1352        /* accrue release time                                                        */
      547     1353    1      KV$BPC.RLST = TMPTIM-G$LOW_MEM.WDT_CURR+KV$BPC.RLST;

   1353   1 0003BF  EC80 0000 0000  xsym                 LDB,B6   G$LOW_MEM$
          1 0003C2  E847 0012                            LDR,R6   TMPTIM,AUTO
          1 0003C4  E246 0017                            SUB,R6   23,B6
          1 0003C6  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0003C8  70F0                                 DAR,R7   16
          1 0003C9  8445 000C                            AID      12,B5
          1 0003CB  8D45 000C                            SDI      12,B5

      548     1354    1      RETURN;

   1354   1 0003CD  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:86   

      549     1355        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:87   
      550     1356        /*I* NAME: Y$LINKTAIL
      551     1357             PURPOSE: To link a power of 2 buffer onto the available list,
      552     1358             with no buddy checking,  on the tail of the power of 2 queue.
      553     1359             Note that this code must be entered inhibited.                           */
      554     1360
      555     1361    1   Y$LINKTAIL: PROC ;

   1361   1 0003D0  EFC7 0014            Y$LINKTAIL      STB,B6   FLAGS+1,AUTO

      556     1362
      557     1363    2      PTR$->Y$BH.BLINK$ = KV$BPC.TAIL$(Y_INDEX);

   1363   1 0003D2  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0003D4  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 0003D6  3E28                                 ADV,R3   40
          1 0003D7  CCB5                                 LDB,B4   ,B5,R3
          1 0003D8  BCC7 000A                            LDB,B3   PTR$,AUTO
          1 0003DA  CFC3 0002                            STB,B4   2,B3

      558     1364    3      IF PTR$->Y$BH.BLINK$ = ADDR(NIL) THEN DO;

   1364   1 0003DC  8DC3 0002                            CMN      2,B3
          1 0003DE  0981 0007                            BNE      s:1367,PREL

      559     1365    3         KV$BPC.HEAD$(Y_INDEX) = PTR$;

   1365   1 0003E0  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 0003E2  2E1B                                 ADV,R2   27
          1 0003E3  BFA5                                 STB,B3   ,B5,R2

      560     1366    3      END; ELSE DO;

   1366   1 0003E4  0F81 0002                            B        s:1369,PREL

      561     1367    3         PTR$->Y$BH.BLINK$->Y$BH.FLINK$ = PTR$;

   1367   1 0003E6  BF84                                 STB,B3   ,B4
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:88   

      562     1368    3      END /* IF */;

      563     1369    2      KV$BPC.TAIL$(Y_INDEX) = PTR$;

   1369   1 0003E7  BFB5                                 STB,B3   ,B5,R3

      564     1370    2      PTR$->Y$BH.FLINK$ = ADDR(NIL);

   1370   1 0003E8  EB80 0000 0000                       LAB,B6   0
          1 0003EB  EF83                                 STB,B6   ,B3

      565     1371
      566     1372        /* mark buffer header with buddy manager token                                */
      567     1373
      568     1374    2      PTR$->Y$BH.TOKEN.W1 = %DEAD;

   1374   1 0003EC  E870 DEAD                            LDR,R6   -8531,IMO
          1 0003EE  EF43 0004                            STR,R6   4,B3

      569     1375    2      PTR$->Y$BH.TOKEN.W2 = Y_INDEX;

   1375   1 0003F0  D847 000F                            LDR,R5   Y_INDEX,AUTO
          1 0003F2  DF43 0005                            STR,R5   5,B3

      570     1376
      571     1377        /* keep track of counts and stats                                             */
      572     1378
      573     1379    2      KV$BPC.COUNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX) +1;

   1379   1 0003F4  A855                                 LDR,R2   R5
          1 0003F5  2E1C                                 ADV,R2   28
          1 0003F6  8AA5                                 INC      ,B5,R2

      574     1380    3      IF KV$BPC.COUNT(Y_INDEX) > KV$BPC.PKCNT(Y_INDEX) THEN DO;

   1380   1 0003F7  9855                                 LDR,R1   R5
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:89   
          1 0003F8  1E29                                 ADV,R1   41
          1 0003F9  C825                                 LDR,R4   ,B5,R2
          1 0003FA  C915                                 CMR,R4   ,B5,R1
          1 0003FB  0381 0002                            BLE      s:1383,PREL

      575     1381    3         KV$BPC.PKCNT(Y_INDEX) = KV$BPC.COUNT(Y_INDEX);

   1381   1 0003FD  CF15                                 STR,R4   ,B5,R1

      576     1382    3      END /* IF */;

      577     1383    2   END /* SUBROUTINE */;

   1383   1 0003FE  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000400  C3C6 0001                            LNJ,B4   1,B6

      578     1384    1   BADARGS:;

   1384   1                              BADARGS         null
      579     1385           %KH$SCREECH(COD=KVB_BDYARGS);

   1387   1 000402  BB80 0000 0000  02   BADARGS         LAB,B3   0
          1 000405  CBF0 0100                            LAB,B4   256,IMO
          1 000407  E380 0000 0000  xent                 LNJ,B6   KHD$SCREECH
          1 00040A       0001                            DC       s:1395,PREL

      580     1389        /*S*   SCREECH_CODE: KVB-S$KV_BDYARGS
      581     1390               MESSAGE: Buddy manager called with invalid arguments.
      582     1391               REMARKS: Release must be called with a properly bounded address
      583     1392                        and, if 2N, a power-of-two size.  Any size must be below
      584     1393                        the maximum.
      585     1394        */
      586     1395    1      ALTRETURN;

   1395   1 00040B  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      587     1396
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:90   
      588     1397        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:91   
      589     1398        /*F* NAME: KVB$INT - Initialize or Extend a Buffer Pool
      590     1399
      591     1400        This routine initializes a supplied
      592     1401        block of space so that it can be used as
      593     1402        a buffer pool.  Input parameters include
      594     1403        minimum and maximum block sizes for the
      595     1404        pool.  If the minimum and maximum
      596     1405        sizes are the same, this acts just like
      597     1406        a simple buffer pool.  If KVB$INT is called for a buffer pool that is already
      598     1407        initialized, BFRBGN$ and MINBFR must match the original call, and BFREND$
      599     1408        should indicate the new end of the pool.  It must exceed the value used in
      600     1409        the original call.  If the pool is using the bitmap algorithm, it will
      601     1410        continue to do so only if the original space required for the bitmap,
      602     1411        rounded up to the next proper buffer address, is large enough to represent
      603     1412        the newly added buffer space.
      604     1413
      605     1414        The form of the call for this service is:
      606     1415
      607     1416        .fif
      608     1417           CALL KVB$INT(kv$vdh_vdhinit);
      609     1418        .fin
      610     1419
      611     1420        where:
      612     1421        */
      613     1422
      614     1423        /*K* kv$vdh_vdhinit -
      615     1424        is a structure that contains all the required information
      616     1425        except the number of the pool to be initialized, which
      617     1426        should be stored in KV_B_POOL#, a UBIN SYMREF.  Note that KV_B_POOL#
      618     1427        is initialized to zero, indicating the system pool,
      619     1428        and that the system pool is generally initialized by a call
      620     1429        to the KVV$VDHINT routine.
      621     1430
      622     1431        See the description of KV$VDH_VDHINT.
      623     1432        */
      624     1433    1   KVB$INT: ENTRY (PARM1) ALTRET;

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:92   
   1433   1 00040E  D380 0000 0000  xent KVB$INT         LNJ,B5   X6A_AUTO_2
          1 000411       0030 0002                       DC       48,2

      625     1434
      626     1435    1      Y_POOL$ = KV$VDH_VDHINT.BFRBGN$;

   1435   1 000413  ECC7 0004                            LDB,B6   @PARM1,AUTO
          1 000415  DC86                                 LDB,B5   ,B6
          1 000416  DFC7 0008                            STB,B5   Y_POOL$,AUTO

      627     1436    1      Y_SIZ = KV$VDH_VDHINT.MINBFR;

   1436   1 000418  E2C6 0004                            LLH,R6   4,B6
          1 00041A  EF47 0010                            STR,R6   Y_SIZ,AUTO

      628     1437        /* condition the parameters a bit */
      629     1438    1      IF Y_SIZ < 8 THEN Y_SIZ = 16;

   1438   1 00041C  6D08                                 CMV,R6   8
          1 00041D  0281 0004                            BGE      s:1460,PREL

   1438   1 00041F  6C10                                 LDV,R6   16
          1 000420  EF47 0010                            STR,R6   Y_SIZ,AUTO

      630     1439        /*D* DESCRIPTION:
      631     1440           Establish buddy space allocatable memory limits.  This is done in
      632     1441           the following manner:
      633     1442              1)  Buffer pool control table is set up right at BFRBGN$.
      634     1443              2)  If the debug flag is set for doing duplicate release/get checks
      635     1444                 then additional space at the end of the buffer pool control
      636     1445                 table is allocated for the bit map of the whole pool.
      637     1446              3)  Following the above, rounded up to the minimum allocatable
      638     1447                 unit, the beginning of the real memory pool is set.
      639     1448              4)  End of allocatable space is rounded down to the minimum
      640     1449                 allocatable unit from BFREND$.
      641     1450                                                                                  */
      642     1451        /* Size of the bit map array is determined as follows:
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:93   
      643     1452              Each bit represents the minimum allocatable buffer size
      644     1453           given by MINBFR.  Since there are 16 bits/word the amount
      645     1454           of space that each bit map word represents is MINBFR*16.
      646     1455
      647     1456              To keep the bitmap indexes the same as the buffer numbers, the
      648     1457           bitmap has space for the space occuppied by the control table and
      649     1458           the bitmap itself, too (wasted, mind you, but not musc of it).
      650     1459                                                                                  */
      651     1460    1      SIZ = 0;

   1460   1 000422  8747 000C                            CL       SIZ,AUTO

      652     1461    2      IF KV$VDH_VDHINT.DBG.BITMAPBFRS THEN DO;

   1461   1 000424  89C6 0005                            CMZ      5,B6
          1 000426  0881 0042                            BAGE     s:1480,PREL

      653     1462    2         PTRUBN = POFFW(KV$VDH_VDHINT.BFREND$, Y_POOL$);

   1462   1 000428  8CC6 0002                            LDI      2,B6
          1 00042A  84C7 0008                            SID      Y_POOL$,AUTO
          1 00042C  8D47 000A                            SDI      PTR$,AUTO

      654     1463    2         PTRUBN = PTRUBN+Y_SIZ*15;

   1463   1 00042E  F847 0010                            LDR,R7   Y_SIZ,AUTO
          1 000430  6C00                                 LDV,R6   0
          1 000431  9B80 0000 0002  02                   LAB,B1   +2
          1 000434  D380 0000 0000  xent                 LNJ,B5   X6D_MID
          1 000437  8447 000A                            AID      PTR$,AUTO
          1 000439  8D47 000A                            SDI      PTR$,AUTO

      655     1464
      656     1465        /*N* When PL6 generates better divide code, we'll use it */
      657     1466    2         T2 = Y_SIZ*(16384*16);

   1466   1 00043B  F847 0010                            LDR,R7   Y_SIZ,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:94   
          1 00043D  6C00                                 LDV,R6   0
          1 00043E  7092                                 DOL,R7   18
          1 00043F  8D47 000D                            SDI      B1,AUTO

      658     1467    2         Y_INDEX = 16384;                  /* Limit of useful values             */

   1467   1 000441  D870 4000                            LDR,R5   16384,IMO
          1 000443  DF47 000F                            STR,R5   Y_INDEX,AUTO

      659     1468    3         DO WHILE Y_INDEX~=0;

   1468   1 000445  5901 0023                            BEZ,R5   s:1480,PREL

      660     1469    4            IF PTRUBN>T2 THEN DO;

   1469   1 000447  8CC7 000A                            LDI      PTR$,AUTO
          1 000449  84C7 000D                            SID      B1,AUTO
          1 00044B  0681 0011                            BCF      s:1473,PREL
          1 00044D  6981 0003                            BNEZ,R6  s:1470,PREL
          1 00044F  7901 000D                            BEZ,R7   s:1473,PREL

      661     1470    4               PTRUBN = PTRUBN-T2;

   1470   1 000451  8CC7 000A                            LDI      PTR$,AUTO
          1 000453  84C7 000D                            SID      B1,AUTO
          1 000455  8D47 000A                            SDI      PTR$,AUTO

      662     1471    4               SIZ = SIZ+Y_INDEX;

   1471   1 000457  D847 000C                            LDR,R5   SIZ,AUTO
          1 000459  DA47 000F                            ADD,R5   Y_INDEX,AUTO
          1 00045B  DF47 000C                            STR,R5   SIZ,AUTO

      663     1472    4            END;

      664     1473    3            T2 = T2/2;

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:95   
   1473   1 00045D  8CC7 000D                            LDI      B1,AUTO
          1 00045F  70C1                                 DOR,R7   1
          1 000460  8D47 000D                            SDI      B1,AUTO

      665     1474    3            Y_INDEX = Y_INDEX/2;

   1474   1 000462  D847 000F                            LDR,R5   Y_INDEX,AUTO
          1 000464  D370 0002                            DIV,R5   2,IMO
          1 000466  DF47 000F                            STR,R5   Y_INDEX,AUTO

      666     1475    3         END;

   1475   1 000468  59DF                                 BNEZ,R5  s:1469,SPREL

      667     1476    2      END; /* IF */

      668     1477
      669     1478        /* Round up starting address to next minimum buffer boundary. */
      670     1479
      671     1480    1      SIZ = %BITMAP_OFFSET+SIZ+Y_SIZS-1;

   1480   1 000469  E847 000C                            LDR,R6   SIZ,AUTO
          1 00046B  EA47 0010                            ADD,R6   Y_SIZ,AUTO
          1 00046D  6E71                                 ADV,R6   113
          1 00046E  EF47 000C                            STR,R6   SIZ,AUTO

      672     1481    1      SIZ = SIZ-MOD(SIZ, Y_SIZS);

   1481   1 000470  F856                                 LDR,R7   R6
          1 000471  6C00                                 LDV,R6   0
          1 000472  F347 0010                            DIV,R7   Y_SIZ,AUTO
          1 000474  E247 000C                            SUB,R6   SIZ,AUTO
          1 000476  8256                                 NEG      R6
          1 000477  EF47 000C                            STR,R6   SIZ,AUTO

      673     1482    1      PTR$ = PINCRW(Y_POOL$, SIZS);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:96   
   1482   1 000479  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 00047B  B847 000C                            LDR,R3   SIZ,AUTO
          1 00047D  DBB6                                 LAB,B5   ,B6,R3
          1 00047E  DFC7 000A                            STB,B5   PTR$,AUTO

      674     1483    1      Y_BFR# = SIZ/Y_SIZ;

   1483   1 000480  F856                                 LDR,R7   R6
          1 000481  6C00                                 LDV,R6   0
          1 000482  F347 0010                            DIV,R7   Y_SIZ,AUTO
          1 000484  E857                                 LDR,R6   R7
          1 000485  EF47 0011                            STR,R6   Y_BFR#,AUTO

      675     1484    1      SIZ = (SIZ-%BITMAP_OFFSET)*2;        /* BITMAPSIZ is in bytes, not words   */

   1484   1 000487  D847 000C                            LDR,R5   SIZ,AUTO
          1 000489  5001                                 SOL,R5   1
          1 00048A  DA70 FF1C                            ADD,R5   -228,IMO
          1 00048C  DF47 000C                            STR,R5   SIZ,AUTO

      676     1485    2      IF KV_B_POOL$(KV_B_POOLX)~=ADDR(NIL) THEN DO;

   1485   1 00048E  B800 0000 0000  xsym                 LDR,R3   KV_B_POOL#
          1 000491  8DB0 0000 0000  xsym                 CMN      KV_B_POOL$,R3
          1 000494  0901 002A                            BE       s:1495,PREL

      677     1486         /* We've been asked to extend the buffer space, do the proper thing */
      678     1487    2         IF KV_B_POOL$(KV_B_POOLX)~=Y_POOL$ OR Y_SIZ~=KV$BPC.MINSIZ

   1487   1 000496  CCB0 0000 0000  xsym                 LDB,B4   KV_B_POOL$,R3
          1 000499  CDC7 0008                            CMB,B4   Y_POOL$,AUTO
          1 00049B  0981 FF66                            BNE      s:1384,PREL
          1 00049D  C847 0010                            LDR,R4   Y_SIZ,AUTO
          1 00049F  C946 006A                            CMR,R4   106,B6
          1 0004A1  0981 FF60                            BNE      s:1384,PREL
          1 0004A3  BCC7 0004                            LDB,B3   @PARM1,AUTO
          1 0004A5  ACC3 0002                            LDB,B2   2,B3
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:97   
          1 0004A7  ADC6 006E                            CMB,B2   110,B6
          1 0004A9  0381 FF58                            BLE      s:1384,PREL

      679     1488    2           OR KV$VDH_VDHINT.BFREND$<=KV$BPC.END$ THEN GOTO BADARGS;
      680     1489    2         IF SIZ>KV$BPC.BITMAPSIZ THEN KV$BPC.DBG.BITMAP = '0'B;

   1489   1 0004AB  D946 0070                            CMR,R5   112,B6
          1 0004AD  0381 0004                            BLE      s:1490,PREL

   1489   1 0004AF  8846 0071                            LBF,'8000'X       113,B6
   1489   1 0004B1       8000

      681     1490    2         PTR$ = KV$BPC.END$;

   1490   1 0004B2  CCC6 006E                            LDB,B4   110,B6
          1 0004B4  CFC7 000A                            STB,B4   PTR$,AUTO

      682     1491    2         KV$BPC.TOT = KV$BPC.MAXSIZ;

   1491   1 0004B6  F846 006B                            LDR,R7   107,B6
          1 0004B8  6C00                                 LDV,R6   0
          1 0004B9  8D06                                 SDI      ,B6

      683     1492    2         CALL Y$DIVIDE;

   1492   1 0004BA  E3C0 033D                            LNJ,B6   s:0,PREL
          1 0004BC       0001                            DC       s:1493,PREL

      684     1493    2         GOTO NEXTSGM;

   1493   1 0004BD  0F81 0028                            B        s:1500,PREL

      685     1494    2      END;
      686     1495    1      KV$BPC.BITMAPSIZ = SIZ;

   1495   1 0004BF  DF46 0070                            STR,R5   112,B6

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:98   
      687     1496    1      KV$BPC = '0'B;

   1496   1 0004C1  DF47 0018                            STR,R5   Y+1,AUTO
          1 0004C3  AB80 0000 0000  02                   LAB,B2   0
          1 0004C6  2C04                                 LDV,R2   4
          1 0004C7  6C01                                 LDV,R6   1
          1 0004C8  BB86                                 LAB,B3   ,B6
          1 0004C9  3C00                                 LDV,R3   0
          1 0004CA  F855                                 LDR,R7   R5
          1 0004CB  FA70 00E4                            ADD,R7   228,IMO
          1 0004CD  D380 0000 0000  xent                 LNJ,B5   X6C_ALRZ

      688     1497    1      KV$BPC.BITMAPSIZ = SIZ;

   1497   1 0004D0  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0004D2  E847 000C                            LDR,R6   SIZ,AUTO
          1 0004D4  EF46 0070                            STR,R6   112,B6

      689     1498    1      KV$BPC.MINSIZ = Y_SIZ;

   1498   1 0004D6  D847 0010                            LDR,R5   Y_SIZ,AUTO
          1 0004D8  DF46 006A                            STR,R5   106,B6

      690     1499    1      KV$BPC.DBG = KV$VDH_VDHINT.DBG;

   1499   1 0004DA  DCC7 0004                            LDB,B5   @PARM1,AUTO
          1 0004DC  C845 0005                            LDR,R4   5,B5
          1 0004DE  C570 F800                            AND,R4   -2048,IMO
          1 0004E0  CF46 0071                            STR,R4   113,B6

      691     1500    1      KV$BPC.BGN$ = PTR$;

   1500   1 0004E2  CCC7 000A                            LDB,B4   PTR$,AUTO
          1 0004E4  CFC6 006C                            STB,B4   108,B6

   1500   1                              NEXTSGM         null
      692     1501
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:99   
      693     1502        /* Now release all the memory */
      694     1503
      695     1504        /* But don't let any buffer cross a physical segment boundary */
      696     1505
      697     1506    1   NEXTSGM:;
      698     1507        /*N* The L6 CPU seems to want to access 255 bytes of varbl CIP parm */
      699     1508    1      B1 = PINCRW(KV$VDH_VDHINT.BFREND$,-128); /* First non-legal address        */

   1508   1 0004E6  ECC7 0004            NEXTSGM         LDB,B6   @PARM1,AUTO
          1 0004E8  DCC6 0002                            LDB,B5   2,B6
          1 0004EA  CBC5 FF80                            LAB,B4   -128,B5
          1 0004EC  CFC7 000D                            STB,B4   B1,AUTO

      700     1509    1      B1 = PINCRW (B1, -MOD(POFFW(B1, Y_POOL$), Y_SIZS));

   1509   1 0004EE  8CC7 000D                            LDI      B1,AUTO
          1 0004F0  84C7 0008                            SID      Y_POOL$,AUTO
          1 0004F2  8D47 002A                            SDI      Y+19,AUTO
          1 0004F4  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 0004F6  70F0                                 DAR,R7   16
          1 0004F7  8D47 002C                            SDI      Y+21,AUTO
          1 0004F9  0027                                 CBD      ;
          1 0004FA       0407 002C                                BINARY(Y+21,AUTO,,4),;
          1 0004FC       4C07 0018                                UNPACKED(Y+1,AUTO,,12,LEADING)
          1 0004FE  0027                                 CBD      ;
          1 0004FF       0407 002A                                BINARY(Y+19,AUTO,,4),;
          1 000501       4C07 001E                                UNPACKED(Y+7,AUTO,,12,LEADING)
          1 000503  002B                                 DDV      ;
          1 000504       4C07 0018                                UNPACKED(Y+1,AUTO,,12,LEADING),;
          1 000506       4C07 001E                                UNPACKED(Y+7,AUTO,,12,LEADING),;
          1 000508       4C07 0024                                UNPACKED(Y+13,AUTO,,12,LEADING)
          1 00050A  002A                                 CDB      ;
          1 00050B       4C07 001E                                UNPACKED(Y+7,AUTO,,12,LEADING),;
          1 00050D       0407 002E                                BINARY(Y+23,AUTO,,4)
          1 00050F  8CC7 000D                            LDI      B1,AUTO
          1 000511  437F                                 CSYNC    s:1509+34,SPREL
          1 000512  84C7 002E                            SID      Y+23,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:100  
          1 000514  8D47 000D                            SDI      B1,AUTO

      701     1510
      702     1511    2      IF PTRBIT.SGM~=T2SU.S1 THEN DO;      /* Do one segment at a time           */

   1511   1 000516  D847 000A                            LDR,R5   PTR$,AUTO
          1 000518  D947 000D                            CMR,R5   B1,AUTO
          1 00051A  0901 0006                            BE       s:1515,PREL

      703     1512    2         T2SU.S1 = PTRBIT.SGM+1;

   1512   1 00051C  5E01                                 ADV,R5   1
          1 00051D  DF47 000D                            STR,R5   B1,AUTO

      704     1513    2         T2SU.U2 = 0;

   1513   1 00051F  8747 000E                            CL       B1+1,AUTO

      705     1514    2      END;

      706     1515    1      KV$BPC.END$ = B1;

   1515   1 000521  DCC7 000D                            LDB,B5   B1,AUTO
          1 000523  CCC7 0008                            LDB,B4   Y_POOL$,AUTO
          1 000525  DFC4 006E                            STB,B5   110,B4

      707     1516        /* First get the non-buddyable junk at the front */
      708     1517    1      SIZ = KV$VDH_VDHINT.MAXPWR2;

   1517   1 000527  E846 0004                            LDR,R6   4,B6
          1 000529  E570 00FF                            AND,R6   255,IMO
          1 00052B  EF47 000C                            STR,R6   SIZ,AUTO

      709     1518    1      KV$BPC.MAXSIZ = KV$BPC.MINSIZ+1;

   1518   1 00052D  D844 006A                            LDR,R5   106,B4
          1 00052F  5E01                                 ADV,R5   1
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:101  
          1 000530  DF44 006B                            STR,R5   107,B4

      710     1519    1      Y_INDEX = 0;

   1519   1 000532  8747 000F                            CL       Y_INDEX,AUTO

      711     1520    2      DO WHILE PINCRW(PTR$, Y_SIZS) <= KV$BPC.END$;

   1520   1 000534  0F81 0045                            B        s:1536,PREL

      712     1521    3         IF Y_BFRBIT&Y_BIT(Y_INDEX) OR Y_SIZ >= KV$BPC.MAXSIZ THEN DO;

   1521   1 000536  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000538  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 00053A  E530 0000 0008  00                   AND,R6   Y_BITU,R3
          1 00053D  6981 0009                            BNEZ,R6  s:1522,PREL
          1 00053F  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000541  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 000543  E946 006B                            CMR,R6   107,B6
          1 000545  0201 001F                            BL       s:1528,PREL

      713     1522    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);

   1522   1 000547  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000549  89C6 0071                            CMZ      113,B6
          1 00054B  0881 0004                            BAGE     s:1523,PREL

   1522   1 00054D  E3C0 013C                            LNJ,B6   s:0,PREL
          1 00054F       0130                            DC       s:1635,PREL

      714     1523    3            CALL Y$LINKTAIL;

   1523   1 000550  E3C0 FE7F                            LNJ,B6   s:0,PREL
          1 000552       0001                            DC       s:1524,PREL

      715     1524    3            PTR$ = PINCRW(PTR$, Y_SIZS);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:102  
   1524   1 000553  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 000555  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 000557  DBB6                                 LAB,B5   ,B6,R3
          1 000558  DFC7 000A                            STB,B5   PTR$,AUTO

      716     1525    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);

   1525   1 00055A  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 00055C  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 00055E  EA20 0000 0008  00                   ADD,R6   Y_BITU,R2
          1 000561  EF47 0011                            STR,R6   Y_BFR#,AUTO

      717     1526    3         END;                              /* IF                                 */

   1526   1 000563  0F81 0016                            B        s:1536,PREL

      718     1527    3         ELSE DO;

      719     1528    3            Y_INDEX = Y_INDEX+1;

   1528   1 000565  8AC7 000F                            INC      Y_INDEX,AUTO

      720     1529    3            Y_SIZ = Y_SIZ*2;

   1529   1 000567  6001                                 SOL,R6   1
          1 000568  EF47 0010                            STR,R6   Y_SIZ,AUTO

      721     1530    4            IF SIZ~=0 THEN DO;

   1530   1 00056A  D847 000C                            LDR,R5   SIZ,AUTO
          1 00056C  5901 000D                            BEZ,R5   s:1536,PREL

      722     1531    4               SIZ = SIZ-1;

   1531   1 00056E  88C7 000C                            DEC      SIZ,AUTO

      723     1532    4               IF Y_SIZ>=16384 THEN SIZ=0;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:103  

   1532   1 000570  E970 4000                            CMR,R6   16384,IMO
          1 000572  0201 0003                            BL       s:1533,PREL

   1532   1 000574  8747 000C                            CL       SIZ,AUTO

      724     1533    4               KV$BPC.MAXSIZ = Y_SIZ+SIZ;

   1533   1 000576  EA47 000C                            ADD,R6   SIZ,AUTO
          1 000578  EF46 006B                            STR,R6   107,B6

      725     1534    4            END;

      726     1535    3         END;

      727     1536    2      END; /* DO WHILE */

   1536   1 00057A  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 00057C  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 00057E  DBB6                                 LAB,B5   ,B6,R3
          1 00057F  CCC7 0008                            LDB,B4   Y_POOL$,AUTO
          1 000581  DDC4 006E                            CMB,B5   110,B4
          1 000583  0381 FFB2                            BLE      s:1521,PREL

      728     1537
      729     1538        /* Fix up MAXSIZ, if it was a guess */
      730     1539    1      IF SIZ~=0 THEN KV$BPC.MAXSIZ = Y_SIZ;

   1539   1 000585  E847 000C                            LDR,R6   SIZ,AUTO
          1 000587  6901 0005                            BEZ,R6   s:1542,PREL

   1539   1 000589  D847 0010                            LDR,R5   Y_SIZ,AUTO
          1 00058B  DF44 006B                            STR,R5   107,B4

      731     1540        /* Now do the rest */
      732     1541
      733     1542    2      DO WHILE Y_INDEX>=0;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:104  

   1542   1 00058D  D847 000F                            LDR,R5   Y_INDEX,AUTO
          1 00058F  5801 0032                            BLZ,R5   s:1554,PREL

      734     1543    3         IF PINCRW(PTR$, Y_SIZS) <= KV$BPC.END$ THEN DO;

   1543   1 000591  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 000593  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 000595  DBB6                                 LAB,B5   ,B6,R3
          1 000596  CCC7 0008                            LDB,B4   Y_POOL$,AUTO
          1 000598  DDC4 006E                            CMB,B5   110,B4
          1 00059A  0301 001D                            BG       s:1550,PREL

      735     1544    3            IF KV$BPC.DBG.BITMAP THEN CALL Y$SETMEMBITS ALTRET(BADBUDDY);

   1544   1 00059C  89C4 0071                            CMZ      113,B4
          1 00059E  0881 0004                            BAGE     s:1545,PREL

   1544   1 0005A0  E3C0 00E9                            LNJ,B6   s:0,PREL
          1 0005A2       00DD                            DC       s:1635,PREL

      736     1545    3            CALL Y$LINKTAIL;

   1545   1 0005A3  E3C0 FE2C                            LNJ,B6   s:0,PREL
          1 0005A5       0001                            DC       s:1546,PREL

      737     1546    3            PTR$ = PINCRW(PTR$, Y_SIZS);

   1546   1 0005A6  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 0005A8  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 0005AA  DBB6                                 LAB,B5   ,B6,R3
          1 0005AB  DFC7 000A                            STB,B5   PTR$,AUTO

      738     1547    3            Y_BFR# = Y_BFR#+Y_BITU(Y_INDEX);

   1547   1 0005AD  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 0005AF  E847 0011                            LDR,R6   Y_BFR#,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:105  
          1 0005B1  EA20 0000 0008  00                   ADD,R6   Y_BITU,R2
          1 0005B4  EF47 0011                            STR,R6   Y_BFR#,AUTO

      739     1548    3         END;

   1548   1 0005B6  0F81 0008                            B        s:1553,PREL

      740     1549    3         ELSE DO;

      741     1550    3            Y_INDEX = Y_INDEX-1;

   1550   1 0005B8  88C7 000F                            DEC      Y_INDEX,AUTO

      742     1551    3            Y_SIZ = Y_SIZ/2;

   1551   1 0005BA  E847 0010                            LDR,R6   Y_SIZ,AUTO
          1 0005BC  6041                                 SOR,R6   1
          1 0005BD  EF47 0010                            STR,R6   Y_SIZ,AUTO

      743     1552    3         END;

      744     1553    2      END; /* DO WHILE */

   1553   1 0005BF  E847 000F                            LDR,R6   Y_INDEX,AUTO
          1 0005C1  68D0                                 BGEZ,R6  s:1543,SPREL

      745     1554    1      IF KV$BPC.TOT<KV$BPC.MAXSIZ THEN KV$BPC.TOT = KV$BPC.MAXSIZ;

   1554   1 0005C2  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0005C4  F846 006B                            LDR,R7   107,B6
          1 0005C6  6C00                                 LDV,R6   0
          1 0005C7  8486                                 SID      ,B6
          1 0005C8  0681 0009                            BCF      s:1555,PREL
          1 0005CA  6981 0003                            BNEZ,R6  s:1554+12,PREL
          1 0005CC  7901 0005                            BEZ,R7   s:1555,PREL

   1554   1 0005CE  F846 006B                            LDR,R7   107,B6
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:106  
          1 0005D0  6C00                                 LDV,R6   0
          1 0005D1  8D06                                 SDI      ,B6

      746     1555    1      B1 = KV$BPC.END$;

   1555   1 0005D2  DCC6 006E                            LDB,B5   110,B6
          1 0005D4  DFC7 000D                            STB,B5   B1,AUTO

      747     1556    2      IF T2SU.U2=0 THEN DO;

   1556   1 0005D6  E847 000E                            LDR,R6   B1+1,AUTO
          1 0005D8  6981 001A                            BNEZ,R6  s:1568,PREL

      748     1557
      749     1558        /* END$ is at the beginning of a segment - must be the middle of the pool */
      750     1559        /* So, continue with the nexzt segment */
      751     1560
      752     1561    2         Y_SIZ = KV$BPC.MINSIZ;

   1561   1 0005DA  D846 006A                            LDR,R5   106,B6
          1 0005DC  DF47 0010                            STR,R5   Y_SIZ,AUTO

      753     1562    3         IF PTRBIT.BITS OR G$L69X THEN DO; /* Skip the boundary buffer           */

   1562   1 0005DE  C847 000B                            LDR,R4   PTR$+1,AUTO
          1 0005E0  4981 0007                            BNEZ,R4  s:1563,PREL
          1 0005E2  CC80 0000 0000  00                   LDB,B4   G_MON_ENT
          1 0005E5  B804                                 LDR,R3   ,B4
          1 0005E6  3901 000A                            BEZ,R3   s:1566,PREL

      754     1563    3            PTR$ = PINCRW (PTR$, Y_SIZS);

   1563   1 0005E8  CCC7 000A                            LDB,B4   PTR$,AUTO
          1 0005EA  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 0005EC  BBB4                                 LAB,B3   ,B4,R3
          1 0005ED  BFC7 000A                            STB,B3   PTR$,AUTO

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:107  
      755     1564    3            Y_BFR# = Y_BFR#+1;

   1564   1 0005EF  8AC7 0011                            INC      Y_BFR#,AUTO

      756     1565    3         END;

      757     1566    2         GOTO NEXTSGM;

   1566   1 0005F1  0F81 FEF4                            B        s:1500,PREL

      758     1567    2      END;
      759     1568    1      KV$BPC.MAXSIZ = KV$BPC.TOT;

   1568   1 0005F3  D846 0001                            LDR,R5   1,B6
          1 0005F5  DF46 006B                            STR,R5   107,B6

      760     1569    1      KV$BPC.TOT = POFFW(KV$BPC.END$,KV$BPC.BGN$);

   1569   1 0005F7  8CC6 006E                            LDI      110,B6
          1 0005F9  84C6 006C                            SID      108,B6
          1 0005FB  8D06                                 SDI      ,B6

      761     1570
      762     1571        /* Now store away the BPC pointer for future reference */
      763     1572    1      KV_B_POOL$(KV_B_POOLX) = Y_POOL$;

   1572   1 0005FC  B800 0000 0000  xsym                 LDR,R3   KV_B_POOL#
          1 0005FF  EFB0 0000 0000  xsym                 STB,B6   KV_B_POOL$,R3

      764     1573    1      RETURN;

   1573   1 000602  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      765     1574        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:108  
      766     1575        /*F* NAME: KVB$CHKBDYCHN - Check Buddy Space Chain
      767     1576
      768     1577        The KVB$CHKBDYCHN routine will validate all the
      769     1578        chains and sizes in the buddy space pool.
      770     1579
      771     1580        This routine saves all registers and inhibits up to a very
      772     1581        high level.  While there it goes down every chain making sure it
      773     1582        is of the correct length and that the correct sized buffers are
      774     1583        on the proper chain.  Any mismatch causes a SCREECH.
      775     1584
      776     1585        The form of the call for this service is:
      777     1586
      778     1587        .fif
      779     1588        }   CALL KVB$CHKBDYCHN(Pool_control_block);
      780     1589        .fin
      781     1590
      782     1591        where:
      783     1592        */
      784     1593
      785     1594        /*K* Pool_control_block
      786     1595        is the buddy space pool that is to be checked.
      787     1596
      788     1597        If the parameter is not present, KV_B_POOLX is assumed
      789     1598        to contain the pool number.
      790     1599        */
      791     1600
      792     1601    1   KVB$CHKBDYCHN: ENTRY(PARM1) ALTRET;

   1601   1 000605  D380 0000 0000  xent KVB$CHKBDYCHN   LNJ,B5   X6A_AUTO_2
          1 000608       0030 0002                       DC       48,2

      793     1602
      794     1603        /*    This loop searches down each individual chain until the end is
      795     1604           successfully reached, whereupon we return.         */
      796     1605
      797     1606    1      Y_POOL$ = ADDR(PARM1);

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:109  
   1606   1 00060A  ECC7 0004                            LDB,B6   @PARM1,AUTO
          1 00060C  EFC7 0008                            STB,B6   Y_POOL$,AUTO

      798     1607    1      IF Y_POOL$ = ADDR(NIL) THEN Y_POOL$ = KV_B_POOL$(KV_B_POOLX);

   1607   1 00060E  8DC7 0008                            CMN      Y_POOL$,AUTO
          1 000610  0981 0009                            BNE      s:1608,PREL

   1607   1 000612  B800 0000 0000  xsym                 LDR,R3   KV_B_POOL#
          1 000615  DCB0 0000 0000  xsym                 LDB,B5   KV_B_POOL$,R3
          1 000618  DFC7 0008                            STB,B5   Y_POOL$,AUTO

      799     1608    1      Y_SIZ = KV$BPC.MINSIZ;

   1608   1 00061A  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 00061C  E845 006A                            LDR,R6   106,B5
          1 00061E  EF47 0010                            STR,R6   Y_SIZ,AUTO

      800     1609    2      DO Y_INDEX = 0 TO 12;

   1609   1 000620  8747 000F                            CL       Y_INDEX,AUTO

      801     1610
      802     1611    2         SIZ = KV$BPC.COUNT(Y_INDEX);

   1611   1 000622  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000624  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000626  3E1C                                 ADV,R3   28
          1 000627  E836                                 LDR,R6   ,B6,R3
          1 000628  EF47 000C                            STR,R6   SIZ,AUTO

      803     1612    2         PTR$ = KV$BPC.HEAD$(Y_INDEX);

   1612   1 00062A  A847 000F                            LDR,R2   Y_INDEX,AUTO
          1 00062C  2E1B                                 ADV,R2   27
          1 00062D  DCA6                                 LDB,B5   ,B6,R2
          1 00062E  DFC7 000A                            STB,B5   PTR$,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:110  

      804     1613    2         B1 = ADDR(NIL);

   1613   1 000630  CB80 0000 0000                       LAB,B4   0
          1 000633  CFC7 000D                            STB,B4   B1,AUTO

      805     1614    3         DO WHILE PTR$ ~= ADDR(NIL);

   1614   1 000635  0F81 0029                            B        s:1636,PREL

      806     1615
      807     1616        /* Check the buffer for proper bound */
      808     1617        /*       IF PTRBIT.BITS&BINBIT(G_BITU(Y_INDEX)-1, 16) */
      809     1618        /* Also that buffer is in the pool */
      810     1619    3            IF PTR$ < KV$BPC.BGN$

   1619   1 000637  ECC7 000A                            LDB,B6   PTR$,AUTO
          1 000639  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 00063B  EDC5 006C                            CMB,B6   108,B5
          1 00063D  0201 0041                            BL       s:1635,PREL
          1 00063F  B847 0010                            LDR,R3   Y_SIZ,AUTO
          1 000641  CBB6                                 LAB,B4   ,B6,R3
          1 000642  CDC5 006E                            CMB,B4   110,B5
          1 000644  0301 003A                            BG       s:1635,PREL

      811     1620    3              OR PINCRW(PTR$, Y_SIZS) > KV$BPC.END$
      812     1621    3            THEN GOTO BADBUDDY;
      813     1622
      814     1623        /* Check blink for proper value */
      815     1624
      816     1625    3            IF PTR$->Y$BH.BLINK$ ~= B1

   1625   1 000646  CCC6 0002                            LDB,B4   2,B6
          1 000648  CDC7 000D                            CMB,B4   B1,AUTO
          1 00064A  0981 0034                            BNE      s:1635,PREL
          1 00064C  E846 0004                            LDR,R6   4,B6
          1 00064E  E970 DEAD                            CMR,R6   -8531,IMO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:111  
          1 000650  0981 002E                            BNE      s:1635,PREL
          1 000652  D846 0005                            LDR,R5   5,B6
          1 000654  D947 000F                            CMR,R5   Y_INDEX,AUTO
          1 000656  0981 0028                            BNE      s:1635,PREL

      817     1626        /* Also token values */
      818     1627    3              OR PTR$->Y$BH.TOKEN.W1 ~= %DEAD
      819     1628    3              OR PTR$->Y$BH.TOKEN.W2 ~= Y_INDEX
      820     1629    3            THEN GOTO BADBUDDY;
      821     1630
      822     1631        /*    Buffer looks as good as we can check, flink to the next one         */
      823     1632
      824     1633    3            B1 = PTR$;

   1633   1 000658  EFC7 000D                            STB,B6   B1,AUTO

      825     1634    3            PTR$ = PTR$->Y$BH.FLINK$;

   1634   1 00065A  BC86                                 LDB,B3   ,B6
          1 00065B  BFC7 000A                            STB,B3   PTR$,AUTO

      826     1635    3            SIZ = SIZ-1;

   1635   1 00065D  88C7 000C                            DEC      SIZ,AUTO

      827     1636    3         END;                              /* DO WHILE                           */

   1636   1 00065F  8DC7 000A                            CMN      PTR$,AUTO
          1 000661  09D6                                 BNE      s:1619,SPREL

      828     1637
      829     1638        /*    Done with a chain search, make sure the chain was as long as
      830     1639           we thought it should be, and that its tail is correct        */
      831     1640
      832     1641    2         IF SIZ ~= 0 OR B1 ~= KV$BPC.TAIL$(Y_INDEX)

   1641   1 000662  E847 000C                            LDR,R6   SIZ,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:112  
          1 000664  6981 001A                            BNEZ,R6  s:1635,PREL
          1 000666  ECC7 000D                            LDB,B6   B1,AUTO
          1 000668  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 00066A  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 00066C  3E28                                 ADV,R3   40
          1 00066D  EDB5                                 CMB,B6   ,B5,R3
          1 00066E  0981 0010                            BNE      s:1635,PREL

      833     1642    2         THEN GOTO BADBUDDY;
      834     1643
      835     1644        /* Set size for next chain */
      836     1645    2         Y_SIZ = Y_SIZ*2;

   1645   1 000670  D847 0010                            LDR,R5   Y_SIZ,AUTO
          1 000672  5001                                 SOL,R5   1
          1 000673  DF47 0010                            STR,R5   Y_SIZ,AUTO

      837     1646
      838     1647    2      END; /* DO INDEX */

   1647   1 000675  8AC7 000F                            INC      Y_INDEX,AUTO
          1 000677  C847 000F                            LDR,R4   Y_INDEX,AUTO
          1 000679  4D0C                                 CMV,R4   12
          1 00067A  0A81 FFA7                            BALE     s:1611,PREL

      839     1648    1      RETURN;

   1648   1 00067C  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

   1635   1                              BADBUDDY        null
      840     1649    1   BADBUDDY:;
      841     1650           %KH$SCREECH(COD=KVB_BADBDY);

   1652   1 00067F  BB80 0000 0004  02   BADBUDDY        LAB,B3   +4
          1 000682  CBF0 0100                            LAB,B4   256,IMO
          1 000684  E380 0000 0000  xent                 LNJ,B6   KHD$SCREECH
          1 000687       0001                            DC       s:1635+9,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:113  
          1 000688  0F81 01FF                            B        s:1843,PREL

      842     1654        /*S*  screech_code: KVB-S$KV_BADBDY
      843     1655              message: Buddy manager mismanagement detected.
      844     1656              remarks: The chain-checker or bitmap logic has detected a bad chain
      845     1657                       or multiple release.
      846     1658        */
      847     1659        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:114  
      848     1660        /*I* NAME: Y$SETMEMBITS
      849     1661             PURPOSE: To set bits in the buddy pool bit map on a buffer release.
      850     1662             CALL: CALL Y$SETMEMBITS ALTRET(dual allocation screech);
      851     1663             INPUT:
      852     1664             Y_BFR# - Buffer# being released
      853     1665             Y_INDEX - Power of 2 of size of buffer (i.e., 3 means 2**3 = 8)
      854     1666             DESCRIPTION:
      855     1667             This routine takes a buffer address along with its size
      856     1668             and sets all the corresponding bits on in a bit map table of the
      857     1669             buddy space: While setting each of these bits on a check is made
      858     1670             to insure that none of the bits were on already since this would
      859     1671             mean a duplicate release of memory being attempted.                      */
      860     1672    1   Y$SETMEMBITS: PROC ALTRET;

   1672   1 00068A  EFC7 0014            Y$SETMEMBITS    STB,B6   FLAGS+1,AUTO

      861     1673
      862     1674        /* Some data local to these routines */
      863     1675    2   DCL X SBIN;
      864     1676    2   DCL XU REDEF X UBIN;
      865     1677    2   DCL Y SBIN;
      866     1678    2   DCL Z REDEF Y BIT(16);
      867     1679    2   DCL YU REDEF Y UBIN;
      868     1680    2  DCL Y_BIT2(0:7) BIT(16) CONSTANT INIT('0003'X,'000C'X,'003'X,'00C'X,'03'X,'0C'X,'3'X
              1680            ,'C'X);
      869     1681    2   DCL Y_BIT4(0:3) BIT(16) CONSTANT INIT('000F'X,'00F'X,'0F'X,'F'X);
      870     1682    2   DCL Y_BIT8(0:1) BIT(16) CONSTANT INIT('00FF'X,'FF'X);
      871     1683    2   DCL Y$BIT(0:0) BIT(16) BASED(Y_POOL$) ALIGNED;
      872     1684    2   DCL Y$SBIN(0:0) REDEF Y$BIT SBIN;
      873     1685
      874     1686        /* First compute thw word index to the first word of bitmap for the bfr */
      875     1687    2      X = Y_BFR#/16+%BITMAP_OFFSET;

   1687   1 00068C  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 00068E  6044                                 SOR,R6   4
          1 00068F  6E72                                 ADV,R6   114
          1 000690  EF47 0016                            STR,R6   X,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:115  

      876     1688    3      DO CASE(Y_INDEX);

   1688   1 000692  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 000694  3D04                                 CMV,R3   4
          1 000695  0281 000B                            BGE      s:1691,PREL
          1 000697  A830 0000 069D  01                   LDR,R2   s:1688+11,R3
          1 00069A  83A0 0000 06A1  01                   JMP      s:1691,R2
          1 00069D       0020                            DC       s:1700,PREL
          1 00069E       002C                            DC       s:1702,PREL
          1 00069F       0039                            DC       s:1704,PREL
          1 0006A0       0046                            DC       s:1706,PREL

      877     1689    3      CASE(ELSE);

      878     1690        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      879     1691    3         Y = X+Y_BITU(Y_INDEX-4);

   1691   1 0006A1  EA30 0000 0004  00                   ADD,R6   KVB_BDYARGS+2,R3
          1 0006A4  EF47 0017                            STR,R6   Y,AUTO

      880     1692    4         DO WHILE X<Y;

   1692   1 0006A6  E947 0016                            CMR,R6   X,AUTO
          1 0006A8  0A81 0014                            BALE     s:1697,PREL

      881     1693    4            IF Y$BIT(X) THEN ALTRETURN;

   1693   1 0006AA  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0006AC  B847 0016                            LDR,R3   X,AUTO
          1 0006AE  E836                                 LDR,R6   ,B6,R3
          1 0006AF  6901 0005                            BEZ,R6   s:1694,PREL

   1693   1 0006B1  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0006B3  A806                                 LDR,R2   ,B6
          1 0006B4  C3A6                                 LNJ,B4   ,B6,R2

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:116  
      882     1694    4            Y$SBIN(X) = Y$SBIN(X)-1;

   1694   1 0006B5  88B6                                 DEC      ,B6,R3

      883     1695    4            X = X+1;

   1695   1 0006B6  8AC7 0016                            INC      X,AUTO

      884     1696    4         END;

   1696   1 0006B8  E847 0016                            LDR,R6   X,AUTO
          1 0006BA  E947 0017                            CMR,R6   Y,AUTO
          1 0006BC  086E                                 BAL      s:1693,SPREL

      885     1697    3         RETURN;

   1697   1 0006BD  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0006BF  C3C6 0001                            LNJ,B4   1,B6

      886     1698        /* Otherwise, the bits all fit in a word, get the proper mask */
      887     1699    3      CASE(0);

      888     1700    3         Z = Y_BIT(MOD(Y_BFR#,16));

   1700   1 0006C1  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0006C3  D570 000F                            AND,R5   15,IMO
          1 0006C5  9855                                 LDR,R1   R5
          1 0006C6  D810 0000 0008  00                   LDR,R5   Y_BITU,R1
          1 0006C9  DF47 0017                            STR,R5   Y,AUTO
          1 0006CB  0F81 0026                            B        s:1708,PREL

      889     1701    3      CASE(1);

      890     1702    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));

   1702   1 0006CD  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0006CF  5041                                 SOR,R5   1
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:117  
          1 0006D0  D570 0007                            AND,R5   7,IMO
          1 0006D2  9855                                 LDR,R1   R5
          1 0006D3  D810 0000 0028  00                   LDR,R5   Y_BIT2,R1
          1 0006D6  DF47 0017                            STR,R5   Y,AUTO
          1 0006D8  0F81 0019                            B        s:1708,PREL

      891     1703    3      CASE(2);

      892     1704    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));

   1704   1 0006DA  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0006DC  5042                                 SOR,R5   2
          1 0006DD  D570 0003                            AND,R5   3,IMO
          1 0006DF  9855                                 LDR,R1   R5
          1 0006E0  D810 0000 0030  00                   LDR,R5   Y_BIT4,R1
          1 0006E3  DF47 0017                            STR,R5   Y,AUTO
          1 0006E5  0F81 000C                            B        s:1708,PREL

      893     1705    3      CASE(3);

      894     1706    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));

   1706   1 0006E7  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0006E9  5043                                 SOR,R5   3
          1 0006EA  D570 0001                            AND,R5   1,IMO
          1 0006EC  9855                                 LDR,R1   R5
          1 0006ED  D810 0000 0034  00                   LDR,R5   Y_BIT8,R1
          1 0006F0  DF47 0017                            STR,R5   Y,AUTO

      895     1707    3      END;

      896     1708    2      IF Z&Y$BIT(X) THEN ALTRETURN;

   1708   1 0006F2  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0006F4  9856                                 LDR,R1   R6
          1 0006F5  D515                                 AND,R5   ,B5,R1
          1 0006F6  5901 0005                            BEZ,R5   s:1709,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:118  

   1708   1 0006F8  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0006FA  B806                                 LDR,R3   ,B6
          1 0006FB  C3B6                                 LNJ,B4   ,B6,R3

      897     1709    2      Y$BIT(X) = Y$BIT(X)|Z;

   1709   1 0006FC  D815                                 LDR,R5   ,B5,R1
          1 0006FD  D447 0017                            OR,R5    Y,AUTO
          1 0006FF  DF15                                 STR,R5   ,B5,R1

      898     1710    2      RETURN;

   1710   1 000700  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000702  C3C6 0001                            LNJ,B4   1,B6

      899     1711        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:119  
      900     1712        /*I* NAME: Y$RESETMEMBITS
      901     1713             PURPOSE: To reset bits in the buddy pool bit map on a buffer get.
      902     1714             INTERFACE: None.
      903     1715             CALL: CALL Y$RESETMEMBITS ALTRET(dual allocation screech);
      904     1716             INPUT:
      905     1717             Y_BFR# - Buffer number being allocated
      906     1718             Y_INDEX - Power-of-2 size of the buffer.
      907     1719             DESCRIPTION:
      908     1720             This routine takes a buffer address along with its size
      909     1721             and resets all the corresponding bits on in a bit map table of the
      910     1722             buddy space: While resetting each of these bits a check is made
      911     1723             to insure that none of the bits were off already since this would
      912     1724             mean a duplicate allocation of memory being attempted.                   */
      913     1725    2   Y$RESETMEMBITS: ENTRY ALTRET;

   1725   1 000704  EFC7 0014            Y$RESETMEMBITS  STB,B6   FLAGS+1,AUTO

      914     1726
      915     1727        /* First compute thw word index to the first word of bitmap for the bfr */
      916     1728    2      X = Y_BFR#/16+%BITMAP_OFFSET;

   1728   1 000706  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 000708  6044                                 SOR,R6   4
          1 000709  6E72                                 ADV,R6   114
          1 00070A  EF47 0016                            STR,R6   X,AUTO

      917     1729    3      DO CASE(Y_INDEX);

   1729   1 00070C  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 00070E  3D04                                 CMV,R3   4
          1 00070F  0281 000B                            BGE      s:1732,PREL
          1 000711  A830 0000 0717  01                   LDR,R2   s:1729+11,R3
          1 000714  83A0 0000 071B  01                   JMP      s:1732,R2
          1 000717       0020                            DC       s:1742,PREL
          1 000718       002C                            DC       s:1744,PREL
          1 000719       0039                            DC       s:1746,PREL
          1 00071A       0046                            DC       s:1748,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:120  

      918     1730    3      CASE(ELSE);

      919     1731        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      920     1732    3         Y = X+Y_BITU(Y_INDEX-4);

   1732   1 00071B  EA30 0000 0004  00                   ADD,R6   KVB_BDYARGS+2,R3
          1 00071E  EF47 0017                            STR,R6   Y,AUTO

      921     1733    4         DO WHILE X<Y;

   1733   1 000720  E947 0016                            CMR,R6   X,AUTO
          1 000722  0A81 0014                            BALE     s:1738,PREL

      922     1734    4            Y$SBIN(X) = Y$SBIN(X)+1;

   1734   1 000724  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 000726  B847 0016                            LDR,R3   X,AUTO
          1 000728  8AB6                                 INC      ,B6,R3

      923     1735    4            IF Y$BIT(X) THEN ALTRETURN;

   1735   1 000729  E836                                 LDR,R6   ,B6,R3
          1 00072A  6901 0005                            BEZ,R6   s:1736,PREL

   1735   1 00072C  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 00072E  A806                                 LDR,R2   ,B6
          1 00072F  C3A6                                 LNJ,B4   ,B6,R2

      924     1736    4            X = X+1;

   1736   1 000730  8AC7 0016                            INC      X,AUTO

      925     1737    4         END;

   1737   1 000732  E847 0016                            LDR,R6   X,AUTO
          1 000734  E947 0017                            CMR,R6   Y,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:121  
          1 000736  086E                                 BAL      s:1734,SPREL

      926     1738    3         RETURN;

   1738   1 000737  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000739  C3C6 0001                            LNJ,B4   1,B6

      927     1739
      928     1740        /* Otherwise, the bits all fit in a word, get the proper mask */
      929     1741    3      CASE(0);

      930     1742    3         Z = Y_BIT(MOD(Y_BFR#,16));

   1742   1 00073B  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 00073D  D570 000F                            AND,R5   15,IMO
          1 00073F  9855                                 LDR,R1   R5
          1 000740  D810 0000 0008  00                   LDR,R5   Y_BITU,R1
          1 000743  DF47 0017                            STR,R5   Y,AUTO
          1 000745  0F81 0026                            B        s:1750,PREL

      931     1743    3      CASE(1);

      932     1744    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));

   1744   1 000747  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 000749  5041                                 SOR,R5   1
          1 00074A  D570 0007                            AND,R5   7,IMO
          1 00074C  9855                                 LDR,R1   R5
          1 00074D  D810 0000 0028  00                   LDR,R5   Y_BIT2,R1
          1 000750  DF47 0017                            STR,R5   Y,AUTO
          1 000752  0F81 0019                            B        s:1750,PREL

      933     1745    3      CASE(2);

      934     1746    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));

   1746   1 000754  D847 0011                            LDR,R5   Y_BFR#,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:122  
          1 000756  5042                                 SOR,R5   2
          1 000757  D570 0003                            AND,R5   3,IMO
          1 000759  9855                                 LDR,R1   R5
          1 00075A  D810 0000 0030  00                   LDR,R5   Y_BIT4,R1
          1 00075D  DF47 0017                            STR,R5   Y,AUTO
          1 00075F  0F81 000C                            B        s:1750,PREL

      935     1747    3      CASE(3);

      936     1748    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));

   1748   1 000761  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 000763  5043                                 SOR,R5   3
          1 000764  D570 0001                            AND,R5   1,IMO
          1 000766  9855                                 LDR,R1   R5
          1 000767  D810 0000 0034  00                   LDR,R5   Y_BIT8,R1
          1 00076A  DF47 0017                            STR,R5   Y,AUTO

      937     1749    3      END;

      938     1750    2      IF YU~=BITBIN(Z&Y$BIT(X)) THEN ALTRETURN;

   1750   1 00076C  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 00076E  9856                                 LDR,R1   R6
          1 00076F  D515                                 AND,R5   ,B5,R1
          1 000770  D947 0017                            CMR,R5   Y,AUTO
          1 000772  0901 0005                            BE       s:1751,PREL

   1750   1 000774  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000776  B806                                 LDR,R3   ,B6
          1 000777  C3B6                                 LNJ,B4   ,B6,R3

      939     1751    2      Y$BIT(X) = Y$BIT(X)\Z;

   1751   1 000778  D815                                 LDR,R5   ,B5,R1
          1 000779  D647 0017                            XOR,R5   Y,AUTO
          1 00077B  DF15                                 STR,R5   ,B5,R1
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:123  

      940     1752    2      RETURN;

   1752   1 00077C  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 00077E  C3C6 0001                            LNJ,B4   1,B6

      941     1753        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:124  
      942     1754        /*I* NAME: Y$CHECKMEMBITS
      943     1755             PURPOSE: To see if a buffer's bits are set in the map of the pool.
      944     1756             INTERFACE: None.
      945     1757             CALL: CALL Y$CHECKMEMBITS ALTRET(buffer is not free);
      946     1758             INPUT:
      947     1759             Y_BFR# - Buffer number (buddy) being checked
      948     1760             Y_INDEX - Power of 2 of size of buffer (i.e., 3 means 2**3 = 8)
      949     1761             DESCRIPTION:
      950     1762             This routine takes a buffer address along with its size
      951     1763             and checks to see if ANY of the bits are set that correspond to
      952     1764             that buffer: Not all bits are checked (which helps speed on the
      953     1765             big buffer checks), just enough to answer the question as to
      954     1766             whether the first allocatable unit containing the buddy space
      955     1767             token is present. Between the token and this routine the caller
      956     1768             can make a quick determination as to whether the buddy of a buffer
      957     1769             is available or not.                                                     */
      958     1770    2   Y$CHECKMEMBITS: ENTRY ALTRET;

   1770   1 000780  EFC7 0014            Y$CHECKMEMBITS  STB,B6   FLAGS+1,AUTO

      959     1771
      960     1772        /* First compute thw word index to the first word of bitmap for the bfr */
      961     1773    2      X = Y_BFR#/16+%BITMAP_OFFSET;

   1773   1 000782  E847 0011                            LDR,R6   Y_BFR#,AUTO
          1 000784  6044                                 SOR,R6   4
          1 000785  6E72                                 ADV,R6   114
          1 000786  EF47 0016                            STR,R6   X,AUTO

      962     1774    3      DO CASE(Y_INDEX);

   1774   1 000788  B847 000F                            LDR,R3   Y_INDEX,AUTO
          1 00078A  3D04                                 CMV,R3   4
          1 00078B  0281 000B                            BGE      s:1777,PREL
          1 00078D  A830 0000 0793  01                   LDR,R2   s:1774+11,R3
          1 000790  83A0 0000 0797  01                   JMP      s:1777,R2
          1 000793       0020                            DC       s:1786,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:125  
          1 000794       002C                            DC       s:1788,PREL
          1 000795       0039                            DC       s:1790,PREL
          1 000796       0046                            DC       s:1792,PREL

      963     1775    3      CASE(ELSE);

      964     1776        /* The buffer occuppies full words of the bitmap, 'tseasy. */
      965     1777    3         Y = X+Y_BITU(Y_INDEX-4);

   1777   1 000797  EA30 0000 0004  00                   ADD,R6   KVB_BDYARGS+2,R3
          1 00079A  EF47 0017                            STR,R6   Y,AUTO

      966     1778    4         DO WHILE X<Y;

   1778   1 00079C  E947 0016                            CMR,R6   X,AUTO
          1 00079E  0A81 0014                            BALE     s:1782,PREL

      967     1779    4            IF Y$SBIN(X)+1~=0 THEN ALTRETURN;

   1779   1 0007A0  ECC7 0008                            LDB,B6   Y_POOL$,AUTO
          1 0007A2  B847 0016                            LDR,R3   X,AUTO
          1 0007A4  E836                                 LDR,R6   ,B6,R3
          1 0007A5  6E01                                 ADV,R6   1
          1 0007A6  6901 0005                            BEZ,R6   s:1780,PREL

   1779   1 0007A8  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0007AA  A806                                 LDR,R2   ,B6
          1 0007AB  C3A6                                 LNJ,B4   ,B6,R2

      968     1780    4            X = X+1;

   1780   1 0007AC  8AC7 0016                            INC      X,AUTO

      969     1781    4         END;

   1781   1 0007AE  E847 0016                            LDR,R6   X,AUTO
          1 0007B0  E947 0017                            CMR,R6   Y,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:126  
          1 0007B2  086E                                 BAL      s:1779,SPREL

      970     1782    3         RETURN;

   1782   1 0007B3  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0007B5  C3C6 0001                            LNJ,B4   1,B6

      971     1783
      972     1784        /* Otherwise, the bits all fit in a word, get the proper mask */
      973     1785    3      CASE(0);

      974     1786    3         Z = Y_BIT(MOD(Y_BFR#,16));

   1786   1 0007B7  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0007B9  D570 000F                            AND,R5   15,IMO
          1 0007BB  9855                                 LDR,R1   R5
          1 0007BC  D810 0000 0008  00                   LDR,R5   Y_BITU,R1
          1 0007BF  DF47 0017                            STR,R5   Y,AUTO
          1 0007C1  0F81 0026                            B        s:1794,PREL

      975     1787    3      CASE(1);

      976     1788    3         Z = Y_BIT2(MOD(Y_BFR#/2,8));

   1788   1 0007C3  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0007C5  5041                                 SOR,R5   1
          1 0007C6  D570 0007                            AND,R5   7,IMO
          1 0007C8  9855                                 LDR,R1   R5
          1 0007C9  D810 0000 0028  00                   LDR,R5   Y_BIT2,R1
          1 0007CC  DF47 0017                            STR,R5   Y,AUTO
          1 0007CE  0F81 0019                            B        s:1794,PREL

      977     1789    3      CASE(2);

      978     1790    3         Z = Y_BIT4(MOD(Y_BFR#/4,4));

   1790   1 0007D0  D847 0011                            LDR,R5   Y_BFR#,AUTO
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:127  
          1 0007D2  5042                                 SOR,R5   2
          1 0007D3  D570 0003                            AND,R5   3,IMO
          1 0007D5  9855                                 LDR,R1   R5
          1 0007D6  D810 0000 0030  00                   LDR,R5   Y_BIT4,R1
          1 0007D9  DF47 0017                            STR,R5   Y,AUTO
          1 0007DB  0F81 000C                            B        s:1794,PREL

      979     1791    3      CASE(3);

      980     1792    3         Z = Y_BIT8(MOD(Y_BFR#/8,2));

   1792   1 0007DD  D847 0011                            LDR,R5   Y_BFR#,AUTO
          1 0007DF  5043                                 SOR,R5   3
          1 0007E0  D570 0001                            AND,R5   1,IMO
          1 0007E2  9855                                 LDR,R1   R5
          1 0007E3  D810 0000 0034  00                   LDR,R5   Y_BIT8,R1
          1 0007E6  DF47 0017                            STR,R5   Y,AUTO

      981     1793    3      END;

      982     1794    2      IF YU~=BITBIN(Z&Y$BIT(X)) THEN ALTRETURN;

   1794   1 0007E8  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0007EA  9856                                 LDR,R1   R6
          1 0007EB  D515                                 AND,R5   ,B5,R1
          1 0007EC  D947 0017                            CMR,R5   Y,AUTO
          1 0007EE  0901 0005                            BE       s:1795,PREL

   1794   1 0007F0  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0007F2  B806                                 LDR,R3   ,B6
          1 0007F3  C3B6                                 LNJ,B4   ,B6,R3

      983     1795    2      RETURN;

   1795   1 0007F4  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 0007F6  C3C6 0001                            LNJ,B4   1,B6

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:128  
      984     1796        %EJECT;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:129  
      985     1797        /*I* NAME: Y$DIVIDE
      986     1798             PURPOSE: To perform the PL6 statement:
      987     1799                Y_BFR# = POFFW(PTR$, Y_POOL$)/KV$BPC.MINSIZ;
      988     1800             Also ALTRETs if the remainder of the division is non-zero.
      989     1801             DESCRIPTION: PL6 wants an arm and a leg to do the computation,
      990     1802             since the L6 does exactly nothing if DIV overflows.
      991     1803        */
      992     1804    2   Y$DIVIDE: ENTRY ALTRET;

   1804   1 0007F8  EFC7 0014            Y$DIVIDE        STB,B6   FLAGS+1,AUTO

      993     1805    2      X = KV$BPC.MINSIZ;

   1805   1 0007FA  DCC7 0008                            LDB,B5   Y_POOL$,AUTO
          1 0007FC  E845 006A                            LDR,R6   106,B5
          1 0007FE  EF47 0016                            STR,R6   X,AUTO

      994     1806    2      T2 = POFFW(PTR$,Y_POOL$);

   1806   1 000800  8CC7 000A                            LDI      PTR$,AUTO
          1 000802  84C7 0008                            SID      Y_POOL$,AUTO
          1 000804  8D47 000D                            SDI      B1,AUTO

      995     1807
      996     1808        /* Since MINSIZ is at least 8, and POFFW is at most .30000, we need only
      997     1809           prune down the value a few times. */
      998     1810    3      IF T2SU.S1~=0 THEN DO;

   1810   1 000806  D847 000D                            LDR,R5   B1,AUTO
          1 000808  5901 0066                            BEZ,R5   s:1839+2,PREL

      999     1811
     1000     1812    3         Y = 0;

   1812   1 00080A  8747 0017                            CL       Y,AUTO

     1001     1813    4         DO WHILE T2SU.S1<X;
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:130  

   1813   1 00080C  D947 0016                            CMR,R5   X,AUTO
          1 00080E  0881 000D                            BAGE     s:1817,PREL

     1002     1814    4            T2 = T2*2;

   1814   1 000810  8CC7 000D                            LDI      B1,AUTO
          1 000812  7081                                 DOL,R7   1
          1 000813  8D47 000D                            SDI      B1,AUTO

     1003     1815    4            Y = Y+1;

   1815   1 000815  8AC7 0017                            INC      Y,AUTO

     1004     1816    4         END;

   1816   1 000817  D847 000D                            LDR,R5   B1,AUTO
          1 000819  D947 0016                            CMR,R5   X,AUTO
          1 00081B  0875                                 BAL      s:1814,SPREL

     1005     1817    3         T2SU.S1 = T2SU.S1-X;              /* One of the bad bits is now gone    */

   1817   1 00081C  D247 0016                            SUB,R5   X,AUTO
          1 00081E  DF47 000D                            STR,R5   B1,AUTO

     1006     1818    3         Y_BFRBIT = Y_BIT(16-Y);           /* Need to add back 2**(16-Y)         */

   1818   1 000820  B847 0017                            LDR,R3   Y,AUTO
          1 000822  8253                                 NEG      R3
          1 000823  E830 0000 0018  00                   LDR,R6   Y_MSKU,R3
          1 000826  EF47 0011                            STR,R6   Y_BFR#,AUTO

     1007     1819    4         DO WHILE T2SU.S1>=Y_BITU(Y);

   1819   1 000828  A847 0017                            LDR,R2   Y,AUTO
          1 00082A  5801 0024                            BLZ,R5   s:1831,PREL
          1 00082C  D920 0000 0008  00                   CMR,R5   Y_BITU,R2
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:131  
          1 00082F  0201 001F                            BL       s:1831,PREL

     1008     1820
     1009     1821        /* There's another one to get rid of */
     1010     1822    4            T2 = T2*2;

   1822   1 000831  8CC7 000D                            LDI      B1,AUTO
          1 000833  7081                                 DOL,R7   1
          1 000834  8D47 000D                            SDI      B1,AUTO

     1011     1823    5            IF T2SU.S1>=X THEN DO;

   1823   1 000836  D847 000D                            LDR,R5   B1,AUTO
          1 000838  D947 0016                            CMR,R5   X,AUTO
          1 00083A  0801 000A                            BAL      s:1827,PREL

     1012     1824    5               T2SU.S1 = T2SU.S1-X;

   1824   1 00083C  D247 0016                            SUB,R5   X,AUTO
          1 00083E  DF47 000D                            STR,R5   B1,AUTO

     1013     1825    5               Y_BFRBIT(Y) = '1'B;

   1825   1 000840  EBC7 0011                            LAB,B6   Y_BFR#,AUTO
          1 000842  B847 0017                            LDR,R3   Y,AUTO
          1 000844  8936                                 LBT      ,B6,R3

     1014     1826    5            END;

     1015     1827    4            Y = Y+1;

   1827   1 000845  8AC7 0017                            INC      Y,AUTO

     1016     1828    4         END;

   1828   1 000847  B847 0017                            LDR,R3   Y,AUTO
          1 000849  5801 0005                            BLZ,R5   s:1831,PREL
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:132  
          1 00084B  D930 0000 0008  00                   CMR,R5   Y_BITU,R3
          1 00084E  02E3                                 BGE      s:1822,SPREL

     1017     1829
     1018     1830        /* Now put it back in one word */
     1019     1831    4         DO WHILE Y~=0;

   1831   1 00084F  E847 0017                            LDR,R6   Y,AUTO
          1 000851  6901 000B                            BEZ,R6   s:1837,PREL

     1020     1832    4            T2 = T2/2;

   1832   1 000853  8CC7 000D                            LDI      B1,AUTO
          1 000855  70C1                                 DOR,R7   1
          1 000856  8D47 000D                            SDI      B1,AUTO

     1021     1833    4            Y = Y-1;

   1833   1 000858  88C7 0017                            DEC      Y,AUTO

     1022     1834    4         END;

   1834   1 00085A  D847 0017                            LDR,R5   Y,AUTO
          1 00085C  59F7                                 BNEZ,R5  s:1832,SPREL

     1023     1835
     1024     1836        /* Now we can do a one-word division, which PL6 does Ok> */
     1025     1837    3         Y_BFR# = T2SU.U2/X+Y_BFR#;

   1837   1 00085D  F847 000E                            LDR,R7   B1+1,AUTO
          1 00085F  6C00                                 LDV,R6   0
          1 000860  F347 0016                            DIV,R7   X,AUTO
          1 000862  E857                                 LDR,R6   R7
          1 000863  EA47 0011                            ADD,R6   Y_BFR#,AUTO
          1 000865  EF47 0011                            STR,R6   Y_BFR#,AUTO

     1026     1838    3         T2 = POFFW(PTR$,Y_POOL$);
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:133  

   1838   1 000867  8CC7 000A                            LDI      PTR$,AUTO
          1 000869  84C7 0008                            SID      Y_POOL$,AUTO
          1 00086B  8D47 000D                            SDI      B1,AUTO

     1027     1839    2      END; ELSE Y_BFR# = T2SU.U2/X;

   1839   1 00086D  0F81 0009                            B        s:1840,PREL

   1839   1 00086F  F847 000E                            LDR,R7   B1+1,AUTO
          1 000871  6C00                                 LDV,R6   0
          1 000872  F347 0016                            DIV,R7   X,AUTO
          1 000874  E857                                 LDR,R6   R7
          1 000875  EF47 0011                            STR,R6   Y_BFR#,AUTO

     1028     1840    2      IF Y_BFR#*XU~=T2SU.U2 THEN ALTRETURN;

   1840   1 000877  F847 0011                            LDR,R7   Y_BFR#,AUTO
          1 000879  FB47 0016                            MUL,R7   X,AUTO
          1 00087B  E857                                 LDR,R6   R7
          1 00087C  E947 000E                            CMR,R6   B1+1,AUTO
          1 00087E  0901 0005                            BE       s:1841,PREL

   1840   1 000880  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000882  B806                                 LDR,R3   ,B6
          1 000883  C3B6                                 LNJ,B4   ,B6,R3

     1029     1841    2      RETURN;

   1841   1 000884  ECC7 0014                            LDB,B6   FLAGS+1,AUTO
          1 000886  C3C6 0001                            LNJ,B4   1,B6

     1030     1842    2   END /* SUBROUTINE */;
     1031     1843    1   END; /* MODULE */

   1843   1 000888  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:134  
--  Include file information  --

   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KV_SCODE_C.:E05TOU  is referenced.
   KV_INT_M.:E05TOU  is referenced.
   KV$BPC.:E05TOU  is referenced.
   KH_SCREECH_M.:E05TOU  is referenced.
   GM_VIRTUAL_E.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is never referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is never referenced.
   KV$VDO.:E05TOU  was found in the system file and is never referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is never referenced.
   KV$INT.:E05TOU  was found in the system file and is never referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is never referenced.
   KV$GLB.:E05TOU  was found in the system file and is never referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KVB$SVC.
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:135  

 **** Variables and constants ****

  ****  Section 000 RoData KVB$SVC

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$MON_ENT$                 0-0-0/w UBIN(32)    r     1 G_MON_ENT
     5-0-0/w STRC(48)    r     1 KVB_BADBDY                 2-0-0/w STRC(48)    r     1 KVB_BDYARGS
     8-0-0/w BIT (16)    r     1 Y_BIT(0:15)               28-0-0/b BIT (16)    r     1 Y_BIT2(0:7)
    30-0-0/b BIT (16)    r     1 Y_BIT4(0:3)               34-0-0/b BIT (16)    r     1 Y_BIT8(0:1)
     8-0-0/w UBIN(16)    r     1 Y_BITU(0:15)              18-0-0/w BIT (16)    r     1 Y_MSK(0:15)
    18-0-0/w UBIN(16)    r     1 Y_MSKU(0:15)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @KV_B_BUF$                 4-0-0/w PTR         r     1 @PARM1
     D-0-0/w PTR         r     1 B1                        13-0-0/c STRC(16)    r     1 FLAGS
    *0-0-0/w STRC(128)   r     1 KV$VDH_VDHINT             *0-0-0/w PTR         r     1 KV_B_BUF$
    *0-0-0/w UBIN(16)    r     1 KV_B_SIZ                  *0-0-0/w ACHR        r     1 PARM1
     A-0-0/w PTR         r     1 PTR$                       A-0-0/w STRC(32)    r     1 PTRBIT
     A-0-0/w UBIN(32)    r     1 PTRUBN                     C-0-0/w UBIN(16)    r     1 SIZ
     C-0-0/w SBIN(16)    r     1 SIZS                       D-0-0/w UBIN(32)    r     1 T2
     D-0-0/w STRC(32)    r     1 T2SU                      12-0-0/w SBIN(16)    r     1 TMPTIM
    13-0-0/w UBIN(16)    r     1 X                         16-0-0/w SBIN(16)    r     1 X
    16-0-0/w UBIN(16)    r     1 XU                        17-0-0/w SBIN(16)    r     1 Y
    17-0-0/w UBIN(16)    r     1 YU                        11-0-0/w UBIN(16)    r     1 Y_BFR#
    11-0-0/w BIT         r     1 Y_BFRBIT(0:15)
     F-0-0/w SBIN(16)    r     1 Y_INDEX                    8-0-0/w PTR         r     1 Y_POOL$
    10-0-0/w UBIN(16)    r     1 Y_SIZ                     10-0-0/w SBIN(16)    r     1 Y_SIZS
    17-0-0/w BIT (16)    r     1 Z

  ****  SYMREF variables  ****

PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:136  
  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$LOW_MEM$                 0-0-0/b BIT (16)    r     1 KV_B_POOL#
     0-0-0/w PTR         r     1 KV_B_POOL$(0:5)
     0-0-0/w UBIN(16)    r     1 KV_B_POOLX

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT (16)    r     1 G$L69X                     0-0-0/w STRC(4096)  r     1 G$LOW_MEM
     0-0-0/w ASTR(1824)  r     1 KV$BPC                     0-0-0/w STRC(96)    r     1 Y$BH
     0-0-0/w BIT (16)    r     1 Y$BIT(0:0)                 0-0-0/w ASTR(64)    r     1 Y$BUSY
     0-0-0/w ACHR        r     1 Y$BUSY_REST                0-0-0/w SBIN(16)    r     1 Y$SBIN(0:0)


   Procedure KVB$SVC requires 2187 words for executable code.
   Procedure KVB$SVC requires 48 words of local(AUTO) storage.

    No errors detected in file KVB$SVC.:E05TSI    .
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:137  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:138  
          MINI XREF LISTING

B1
       914**DCL       915--REDEF     916--REDEF    1053<<ASSIGN   1057>>ASSIGN   1061>>ASSIGN   1082>>ASSIGN
      1084<<ASSIGN   1089>>ASSIGN   1094>>ASSIGN   1123>>ASSIGN   1136>>ASSIGN   1138>>ASSIGN   1139>>ASSIGN
      1145>>ASSIGN   1145>>ASSIGN   1146>>ASSIGN   1291<<ASSIGN   1298>>IF       1307>>DOWHILE  1309>>IF
      1311<<ASSIGN   1311>>ASSIGN   1508<<ASSIGN   1509<<ASSIGN   1509>>ASSIGN   1509>>ASSIGN   1515>>ASSIGN
      1555<<ASSIGN   1613<<ASSIGN   1625>>IF       1633<<ASSIGN   1641>>IF
BADARGS
      1384**LABEL    1017--GOTO     1218--GOTO     1226--GOTO     1229--CALLALT  1255--GOTO     1488--GOTO
BADBUDDY
      1635**LABEL    1085--CALLALT  1111--CALLALT  1267--CALLALT  1277--CALLALT  1522--CALLALT  1544--CALLALT
      1621--GOTO     1629--GOTO     1642--GOTO
FLAGS
       925**DCL       931--REDEF     991<<ASSIGN    994<<ASSIGN    997<<ASSIGN   1000<<ASSIGN   1136--ASSIGN
      1198<<ASSIGN   1201<<ASSIGN   1204<<ASSIGN   1207<<ASSIGN
FLAGS.N2
       927**DCL      1025>>IF       1056>>IF       1221>>IF       1254>>IF
FLAGS.POOL
       930**DCL      1005>>ASSIGN   1217>>ASSIGN
G$L69X
       684**DCL      1562>>IF
G$LOW_MEM.IV.IL$
       674**DCL       674--REDEF
G$LOW_MEM.IV.INT.I#00$
       674**DCL       674--REDEF
G$LOW_MEM.IV.INT.I#01$
       674**DCL       674--REDEF
G$LOW_MEM.IV.INT.I#02$
       675**DCL       675--REDEF
G$LOW_MEM.IV.INT.I#03$
       675**DCL       675--REDEF
G$LOW_MEM.IV.INT.I#04$
       675**DCL       676--REDEF
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:139  
G$LOW_MEM.IV.INT.I#05$
       676**DCL       676--REDEF
G$LOW_MEM.IV.INT.I#61$
       677**DCL       677--REDEF
G$LOW_MEM.IV.INT.I#62$
       677**DCL       677--REDEF
G$LOW_MEM.IV.INT.I#63$
       677**DCL       677--REDEF
G$LOW_MEM.TV.T#01$
       662**DCL       662--REDEF
G$LOW_MEM.TV.T#02$
       662**DCL       662--REDEF
G$LOW_MEM.TV.T#03$
       661**DCL       661--REDEF
G$LOW_MEM.TV.T#05$
       661**DCL       661--REDEF
G$LOW_MEM.TV.T#06$
       660**DCL       660--REDEF
G$LOW_MEM.TV.T#07$
       660**DCL       660--REDEF
G$LOW_MEM.TV.T#08$
       659**DCL       660--REDEF
G$LOW_MEM.TV.T#09$
       659**DCL       659--REDEF
G$LOW_MEM.TV.T#10$
       659**DCL       659--REDEF
G$LOW_MEM.TV.T#12$
       658**DCL       658--REDEF
G$LOW_MEM.TV.T#13$
       658**DCL       658--REDEF
G$LOW_MEM.TV.T#14$
       657**DCL       657--REDEF
G$LOW_MEM.TV.T#15$
       657**DCL       657--REDEF
G$LOW_MEM.TV.T#16$
       656**DCL       657--REDEF
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:140  
G$LOW_MEM.TV.T#17$
       656**DCL       656--REDEF
G$LOW_MEM.TV.T#19$
       655**DCL       656--REDEF
G$LOW_MEM.TV.T#20$
       655**DCL       655--REDEF
G$LOW_MEM.TV.T#21$
       655**DCL       655--REDEF
G$LOW_MEM.TV.T#22$
       654**DCL       654--REDEF
G$LOW_MEM.TV.T#23$
       654**DCL       654--REDEF
G$LOW_MEM.TV.T#24$
       653**DCL       654--REDEF
G$LOW_MEM.TV.T#25$
       653**DCL       653--REDEF
G$LOW_MEM.TV.T#26$
       653**DCL       653--REDEF
G$LOW_MEM.TV.T#27$
       652**DCL       652--REDEF
G$LOW_MEM.TV.T#28$
       652**DCL       652--REDEF
G$LOW_MEM.TV.T#29$
       651**DCL       652--REDEF
G$LOW_MEM.TV.T#30$
       651**DCL       651--REDEF
G$LOW_MEM.TV.T#31$
       651**DCL       651--REDEF
G$LOW_MEM.TV.T#32$
       650**DCL       650--REDEF
G$LOW_MEM.TV.T#33$
       650**DCL       650--REDEF
G$LOW_MEM.WDT_CURR
       638**DCL      1008>>ASSIGN   1046>>ASSIGN   1158>>ASSIGN   1212>>ASSIGN   1353>>ASSIGN
G$LOW_MEM$
       681**DCL       637--IMP-PTR  1008>>ASSIGN   1046>>ASSIGN   1158>>ASSIGN   1212>>ASSIGN   1353>>ASSIGN
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:141  
G$MON_ENT$
       683**DCL       684--IMP-PTR  1562>>IF
GET_COMMON
      1000**LABEL     992--GOTO      995--GOTO      998--GOTO
G_MON_ENT
       682**DCL       683--REDEF
KHD$SCREECH
       807**DCL-ENT  1387--CALL     1652--CALL
KV$BPC
       815**DCL      1034<>CALL     1155<>CALL     1232<>CALL     1351<>CALL     1496<<ASSIGN
KV$BPC.BGN$
       825**DCL      1218>>IF       1500<<ASSIGN   1569>>ASSIGN   1619>>IF
KV$BPC.BITMAPSIZ
       826**DCL       829--IMP-SIZ  1034>>CALL     1155>>CALL     1232>>CALL     1351>>CALL     1489>>IF
      1495<<ASSIGN   1496>>ASSIGN   1497<<ASSIGN
KV$BPC.CMB
       820**DCL      1321<<ASSIGN   1321>>ASSIGN
KV$BPC.COUNT
       825**DCL      1076<<ASSIGN   1076>>ASSIGN   1330<<ASSIGN   1330>>ASSIGN   1379<<ASSIGN   1379>>ASSIGN
      1380>>IF       1381>>ASSIGN   1611>>ASSIGN
KV$BPC.DBG
       826**DCL      1499<<ASSIGN
KV$BPC.DBG.BITMAP
       826**DCL      1081>>IF       1109>>IF       1267>>IF       1277>>IF       1306>>IF       1489<<ASSIGN
      1522>>IF       1544>>IF
KV$BPC.DBG.BUSY
       826**DCL      1128>>IF
KV$BPC.DBG.VALCHAINS
       827**DCL      1034>>IF       1232>>IF
KV$BPC.DBG.VALCHAINS_AFTGET
       827**DCL      1155>>IF
KV$BPC.DBG.VALCHAINS_AFTRLS
       827**DCL      1351>>IF
KV$BPC.END$
       826**DCL      1225>>IF       1288>>IF       1487>>IF       1490>>ASSIGN   1515<<ASSIGN   1520>>DOWHILE
      1543>>IF       1555>>ASSIGN   1569>>ASSIGN   1619>>IF
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:142  
KV$BPC.FRG
       820**DCL      1114<<ASSIGN   1114>>ASSIGN
KV$BPC.GETC
       819**DCL      1037<<ASSIGN   1037>>ASSIGN
KV$BPC.GETF
       819**DCL      1048<<ASSIGN   1048>>ASSIGN
KV$BPC.GETT
       819**DCL      1046<<ASSIGN   1046>>ASSIGN   1158<<ASSIGN   1158>>ASSIGN
KV$BPC.HEAD$
       825**DCL      1040>>DOWHILE  1053>>ASSIGN   1066<<ASSIGN   1291>>ASSIGN   1325<<ASSIGN   1365<<ASSIGN
      1612>>ASSIGN
KV$BPC.MAXSIZ
       825**DCL      1017>>IF       1044>>IF       1225>>IF       1282>>DOWHILE  1491>>ASSIGN   1518<<ASSIGN
      1521>>IF       1533<<ASSIGN   1539<<ASSIGN   1554>>IF       1554>>ASSIGN   1568<<ASSIGN
KV$BPC.MINSIZ
       825**DCL      1012>>ASSIGN   1028>>ASSIGN   1029>>ASSIGN   1219>>ASSIGN   1487>>IF       1498<<ASSIGN
      1518>>ASSIGN   1561>>ASSIGN   1608>>ASSIGN   1805>>ASSIGN
KV$BPC.MXU
       819**DCL      1072>>IF       1073<<ASSIGN
KV$BPC.PKCNT
       825**DCL      1380>>IF       1381<<ASSIGN
KV$BPC.RLSC
       819**DCL      1237<<ASSIGN   1237>>ASSIGN
KV$BPC.RLST
       819**DCL      1353<<ASSIGN   1353>>ASSIGN
KV$BPC.SCH
       820**DCL      1303<<ASSIGN   1303>>ASSIGN
KV$BPC.TAIL$
       825**DCL      1065<<ASSIGN   1328<<ASSIGN   1363>>ASSIGN   1369<<ASSIGN   1641>>IF
KV$BPC.TOT
       819**DCL      1047>>IF       1491<<ASSIGN   1554>>IF       1554<<ASSIGN   1568>>ASSIGN   1569<<ASSIGN
KV$BPC.USE
       819**DCL      1047>>IF       1069<<ASSIGN   1069>>ASSIGN   1072>>IF       1073>>ASSIGN   1258<<ASSIGN
      1258>>ASSIGN
KV$VDH_VDHINT.BFRBGN$
       899**DCL      1435>>ASSIGN
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:143  
KV$VDH_VDHINT.BFREND$
       899**DCL      1462>>ASSIGN   1487>>IF       1508>>ASSIGN
KV$VDH_VDHINT.DBG
       900**DCL      1499>>ASSIGN
KV$VDH_VDHINT.DBG.BITMAPBFRS
       900**DCL      1461>>IF
KV$VDH_VDHINT.MAXPWR2
       900**DCL      1517>>ASSIGN
KV$VDH_VDHINT.MINBFR
       899**DCL      1436>>ASSIGN
KVB$CHKBDYCHN
      1601**ENTRY    1034--CALL     1155--CALL     1232--CALL     1351--CALL
KVB_BADBDY
       773**DCL      1652<>CALL
KVB_BDYARGS
       712**DCL      1387<>CALL
KV_B_BUF$
       906**DCL        25--PROC      990--ENTRY     993--ENTRY     996--ENTRY     999--ENTRY    1049<<ASSIGN
      1057<<ASSIGN   1197--ENTRY    1200--ENTRY    1203--ENTRY    1206--ENTRY    1215--IF       1215>>ASSIGN
KV_B_POOL#
       862**DCL       863--REDEF     991>>ASSIGN    997>>ASSIGN   1198>>ASSIGN   1204>>ASSIGN
KV_B_POOL$
       859**DCL      1005>>ASSIGN   1217>>ASSIGN   1485>>IF       1487>>IF       1572<<ASSIGN   1607>>ASSIGN
KV_B_POOLX
       863**DCL      1485>>IF       1487>>IF       1572>>ASSIGN   1607>>ASSIGN
KV_B_SIZ
       905**DCL       885--IMP-SIZ  1015>>ASSIGN   1056<<ASSIGN   1216--ASSIGN   1220>>ASSIGN
LINKTAIL
      1342**LABEL    1288--GOTO     1300--GOTO     1309--GOTO     1316--CALLALT
NEXTSGM
      1500**LABEL    1493--GOTO     1566--GOTO
PARM1
       885**DCL        25--PROC      899--REDEF     905--REDEF     990--ENTRY     993--ENTRY     996--ENTRY
       999--ENTRY    1197--ENTRY    1200--ENTRY    1203--ENTRY    1206--ENTRY    1433--ENTRY    1601--ENTRY
      1606--ASSIGN
PTR$
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:144  
       908**DCL       909--REDEF     911--REDEF    1061<<ASSIGN   1062>>IF       1063>>ASSIGN   1065>>ASSIGN
      1066>>ASSIGN   1082<<ASSIGN   1084>>ASSIGN   1094<<ASSIGN   1108<<ASSIGN   1108>>ASSIGN   1123>>ASSIGN
      1215<<ASSIGN   1216<<ASSIGN   1218>>IF       1225>>IF       1270<<ASSIGN   1270>>ASSIGN   1286<<ASSIGN
      1286>>ASSIGN   1287<<ASSIGN   1287>>ASSIGN   1288>>IF       1298>>IF       1298>>IF       1307>>DOWHILE
      1324>>IF       1325>>ASSIGN   1326>>ASSIGN   1326>>ASSIGN   1327>>IF       1328>>ASSIGN   1329>>ASSIGN
      1329>>ASSIGN   1334<<ASSIGN   1334>>ASSIGN   1336>>ASSIGN   1345<<ASSIGN   1345>>ASSIGN   1346<<ASSIGN
      1346>>ASSIGN   1363>>ASSIGN   1364>>IF       1365>>ASSIGN   1367>>ASSIGN   1367>>ASSIGN   1369>>ASSIGN
      1370>>ASSIGN   1374>>ASSIGN   1375>>ASSIGN   1482<<ASSIGN   1490<<ASSIGN   1500>>ASSIGN   1520>>DOWHILE
      1524<<ASSIGN   1524>>ASSIGN   1543>>IF       1546<<ASSIGN   1546>>ASSIGN   1563<<ASSIGN   1563>>ASSIGN
      1612<<ASSIGN   1614>>DOWHILE  1619>>IF       1619>>IF       1625>>IF       1625>>IF       1625>>IF
      1633>>ASSIGN   1634<<ASSIGN   1634>>ASSIGN   1806>>ASSIGN   1838>>ASSIGN
PTRBIT.BITS
       910**DCL      1562>>IF
PTRBIT.SGM
       910**DCL      1511>>IF       1512>>ASSIGN
PTRUBN
       911**DCL      1462<<ASSIGN   1463<<ASSIGN   1463>>ASSIGN   1469>>IF       1470<<ASSIGN   1470>>ASSIGN
RLS_COMMON
      1207**LABEL    1199--GOTO     1202--GOTO     1205--GOTO
SIZ
       912**DCL       855--IMP-SIZ   856--IMP-SIZ   913--REDEF    1015<<ASSIGN   1017>>IF       1020>>DOWHILE
      1025<<ASSIGN   1028>>ASSIGN   1029>>IF       1029<<ASSIGN   1029>>ASSIGN   1047>>IF       1056>>ASSIGN
      1069>>ASSIGN   1089>>ASSIGN   1092>>IF       1101<<ASSIGN   1101>>ASSIGN   1103>>DOWHILE  1107>>IF
      1115<<ASSIGN   1115>>ASSIGN   1123<<ASSIGN   1144<<ASSIGN   1144>>ASSIGN   1145>>ASSIGN   1145>>ASSIGN
      1146>>ASSIGN   1220<<ASSIGN   1222>>ASSIGN   1223<<ASSIGN   1223>>ASSIGN   1225>>IF       1247>>DOWHILE
      1254>>IF       1254>>IF       1258>>ASSIGN   1262>>DOWHILE  1265>>IF       1272<<ASSIGN   1272>>ASSIGN
      1460<<ASSIGN   1471<<ASSIGN   1471>>ASSIGN   1480<<ASSIGN   1480>>ASSIGN   1481<<ASSIGN   1481>>ASSIGN
      1481>>ASSIGN   1483>>ASSIGN   1484<<ASSIGN   1484>>ASSIGN   1489>>IF       1495>>ASSIGN   1497>>ASSIGN
      1517<<ASSIGN   1530>>IF       1531<<ASSIGN   1531>>ASSIGN   1532<<ASSIGN   1533>>ASSIGN   1539>>IF
      1611<<ASSIGN   1635<<ASSIGN   1635>>ASSIGN   1641>>IF
SIZS
       913**DCL      1225>>IF       1482>>ASSIGN
T2
       915**DCL      1466<<ASSIGN   1469>>IF       1470>>ASSIGN   1473<<ASSIGN   1473>>ASSIGN   1806<<ASSIGN
      1814<<ASSIGN   1814>>ASSIGN   1822<<ASSIGN   1822>>ASSIGN   1832<<ASSIGN   1832>>ASSIGN   1838<<ASSIGN
T2SU.S1
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:145  
       917**DCL      1511>>IF       1512<<ASSIGN   1810>>IF       1813>>DOWHILE  1817<<ASSIGN   1817>>ASSIGN
      1819>>DOWHILE  1823>>IF       1824<<ASSIGN   1824>>ASSIGN
T2SU.U2
       918**DCL      1513<<ASSIGN   1556>>IF       1837>>ASSIGN   1839>>ASSIGN   1840>>IF
TMPTIM
       924**DCL      1008<<ASSIGN   1046>>ASSIGN   1158>>ASSIGN   1212<<ASSIGN   1353>>ASSIGN
X
       931**DCL      1285<<ASSIGN   1286>>IF       1334>>IF       1345>>IF
X IN PROCEDURE Y$SETMEMBITS
      1675**DCL      1676--REDEF    1687<<ASSIGN   1691>>ASSIGN   1692>>DOWHILE  1693>>IF       1694>>ASSIGN
      1694>>ASSIGN   1695<<ASSIGN   1695>>ASSIGN   1708>>IF       1709>>ASSIGN   1709>>ASSIGN   1728<<ASSIGN
      1732>>ASSIGN   1733>>DOWHILE  1734>>ASSIGN   1734>>ASSIGN   1735>>IF       1736<<ASSIGN   1736>>ASSIGN
      1750>>IF       1751>>ASSIGN   1751>>ASSIGN   1773<<ASSIGN   1777>>ASSIGN   1778>>DOWHILE  1779>>IF
      1780<<ASSIGN   1780>>ASSIGN   1794>>IF       1805<<ASSIGN   1813>>DOWHILE  1817>>ASSIGN   1823>>IF
      1824>>ASSIGN   1837>>ASSIGN   1839>>ASSIGN
XU IN PROCEDURE Y$SETMEMBITS
      1676**DCL      1840>>IF
Y IN PROCEDURE Y$SETMEMBITS
      1677**DCL      1678--REDEF    1679--REDEF    1691<<ASSIGN   1692>>DOWHILE  1732<<ASSIGN   1733>>DOWHILE
      1777<<ASSIGN   1778>>DOWHILE  1812<<ASSIGN   1815<<ASSIGN   1815>>ASSIGN   1818>>ASSIGN   1819>>DOWHILE
      1825>>ASSIGN   1827<<ASSIGN   1827>>ASSIGN   1831>>DOWHILE  1833<<ASSIGN   1833>>ASSIGN
Y$BH
       834**DCL      1089<<ASSIGN
Y$BH.BLINK$
       839**DCL      1063<<ASSIGN   1324>>IF       1326>>ASSIGN   1328>>ASSIGN   1329<<ASSIGN   1329>>ASSIGN
      1363<<ASSIGN   1364>>IF       1367>>ASSIGN   1625>>IF
Y$BH.FLINK$
       837**DCL      1061>>ASSIGN   1136>>ASSIGN   1311>>ASSIGN   1325>>ASSIGN   1326<<ASSIGN   1326>>ASSIGN
      1327>>IF       1329>>ASSIGN   1367<<ASSIGN   1370<<ASSIGN   1634>>ASSIGN
Y$BH.TOKEN.W1
       843**DCL      1298>>IF       1336<<ASSIGN   1374<<ASSIGN   1625>>IF
Y$BH.TOKEN.W2
       846**DCL      1298>>IF       1375<<ASSIGN   1625>>IF
Y$BIT IN PROCEDURE Y$SETMEMBITS
      1683**DCL      1684--REDEF    1693>>IF       1708>>IF       1709<<ASSIGN   1709>>ASSIGN   1735>>IF
      1750>>IF       1751<<ASSIGN   1751>>ASSIGN   1794>>IF
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:146  
Y$BUSY.BUSY
       849**DCL       850--REDEF    1139<<ASSIGN
Y$BUSY.CALLER$
       852**DCL       853--REDEF    1136<<ASSIGN
Y$BUSY.SIZ.WRD
       851**DCL      1146<<ASSIGN
Y$BUSY.THE_REST
       855**DCL      1145<<ASSIGN
Y$BUSY.ZAPPTR.DDD
       854**DCL      1138<<ASSIGN
Y$BUSY_REST
       856**DCL      1145>>ASSIGN
Y$CHECKMEMBITS IN PROCEDURE Y$SETMEMBITS
      1770**ENTRY    1316--CALL
Y$DIVIDE IN PROCEDURE Y$SETMEMBITS
      1804**ENTRY    1083--CALL     1229--CALL     1492--CALL
Y$LINKTAIL
      1361**PROC     1113--CALL     1268--CALL     1348--CALL     1523--CALL     1545--CALL
Y$RESETMEMBITS IN PROCEDURE Y$SETMEMBITS
      1725**ENTRY    1085--CALL
Y$SBIN IN PROCEDURE Y$SETMEMBITS
      1684**DCL      1694<<ASSIGN   1694>>ASSIGN   1734<<ASSIGN   1734>>ASSIGN   1779>>IF
Y$SETMEMBITS
      1672**PROC     1111--CALL     1267--CALL     1277--CALL     1522--CALL     1544--CALL
YU IN PROCEDURE Y$SETMEMBITS
      1679**DCL      1750>>IF       1794>>IF
Y_BFR#
       922**DCL       923--REDEF    1028<<ASSIGN   1029>>IF       1029>>ASSIGN   1095<<ASSIGN   1095>>ASSIGN
      1110<<ASSIGN   1110>>ASSIGN   1222<<ASSIGN   1223>>IF       1223>>ASSIGN   1271<<ASSIGN   1271>>ASSIGN
      1335<<ASSIGN   1335>>ASSIGN   1483<<ASSIGN   1525<<ASSIGN   1525>>ASSIGN   1547<<ASSIGN   1547>>ASSIGN
      1564<<ASSIGN   1564>>ASSIGN   1687>>ASSIGN   1700>>ASSIGN   1702>>ASSIGN   1704>>ASSIGN   1706>>ASSIGN
      1728>>ASSIGN   1742>>ASSIGN   1744>>ASSIGN   1746>>ASSIGN   1748>>ASSIGN   1773>>ASSIGN   1786>>ASSIGN
      1788>>ASSIGN   1790>>ASSIGN   1792>>ASSIGN   1837<<ASSIGN   1837>>ASSIGN   1839<<ASSIGN   1840>>IF
Y_BFRBIT
       923**DCL      1254>>IF       1285>>ASSIGN   1315<<ASSIGN   1315>>ASSIGN   1317<<ASSIGN   1317>>ASSIGN
      1521>>IF       1818<<ASSIGN   1825<<ASSIGN
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:147  
Y_BIT
       871**DCL      1285>>ASSIGN   1315>>ASSIGN   1317>>ASSIGN   1521>>IF       1700>>ASSIGN   1742>>ASSIGN
      1786>>ASSIGN   1818>>ASSIGN
Y_BIT2 IN PROCEDURE Y$SETMEMBITS
      1680**DCL      1702>>ASSIGN   1744>>ASSIGN   1788>>ASSIGN
Y_BIT4 IN PROCEDURE Y$SETMEMBITS
      1681**DCL      1704>>ASSIGN   1746>>ASSIGN   1790>>ASSIGN
Y_BIT8 IN PROCEDURE Y$SETMEMBITS
      1682**DCL      1706>>ASSIGN   1748>>ASSIGN   1792>>ASSIGN
Y_BITU
       869**DCL       871--REDEF    1095>>ASSIGN   1110>>ASSIGN   1271>>ASSIGN   1335>>ASSIGN   1525>>ASSIGN
      1547>>ASSIGN   1691>>ASSIGN   1732>>ASSIGN   1777>>ASSIGN   1819>>DOWHILE
Y_INDEX
       919**DCL      1011<<ASSIGN   1021<<ASSIGN   1021>>ASSIGN   1040>>DOWHILE  1042<<ASSIGN   1042>>ASSIGN
      1053>>ASSIGN   1065>>ASSIGN   1066>>ASSIGN   1076>>ASSIGN   1076>>ASSIGN   1095>>ASSIGN   1110>>ASSIGN
      1118<<ASSIGN   1118>>ASSIGN   1246<<ASSIGN   1249<<ASSIGN   1249>>ASSIGN   1254>>IF       1263<<ASSIGN
      1263>>ASSIGN   1271>>ASSIGN   1285>>ASSIGN   1291>>ASSIGN   1298>>IF       1315>>ASSIGN   1317>>ASSIGN
      1325>>ASSIGN   1328>>ASSIGN   1330>>ASSIGN   1330>>ASSIGN   1335>>ASSIGN   1337<<ASSIGN   1337>>ASSIGN
      1363>>ASSIGN   1365>>ASSIGN   1369>>ASSIGN   1375>>ASSIGN   1379>>ASSIGN   1379>>ASSIGN   1380>>IF
      1380>>IF       1381>>ASSIGN   1381>>ASSIGN   1467<<ASSIGN   1468>>DOWHILE  1471>>ASSIGN   1474<<ASSIGN
      1474>>ASSIGN   1519<<ASSIGN   1521>>IF       1525>>ASSIGN   1528<<ASSIGN   1528>>ASSIGN   1542>>DOWHILE
      1547>>ASSIGN   1550<<ASSIGN   1550>>ASSIGN   1609<<DOINDEX  1611>>ASSIGN   1612>>ASSIGN   1625>>IF
      1641>>IF       1688>>DOCASE   1691>>ASSIGN   1729>>DOCASE   1732>>ASSIGN   1774>>DOCASE   1777>>ASSIGN
Y_MSK
       875**DCL      1254>>IF
Y_MSKU
       873**DCL       875--REDEF
Y_POOL$
       907**DCL       815--IMP-PTR  1005<<ASSIGN   1012>>ASSIGN   1017>>IF       1028>>ASSIGN   1029>>ASSIGN
      1034>>IF       1034>>CALL     1034>>CALL     1037>>ASSIGN   1037>>ASSIGN   1040>>DOWHILE  1044>>IF
      1046>>ASSIGN   1046>>ASSIGN   1047>>IF       1047>>IF       1048>>ASSIGN   1048>>ASSIGN   1053>>ASSIGN
      1065>>ASSIGN   1066>>ASSIGN   1069>>ASSIGN   1069>>ASSIGN   1072>>IF       1072>>IF       1073>>ASSIGN
      1073>>ASSIGN   1076>>ASSIGN   1076>>ASSIGN   1081>>IF       1109>>IF       1114>>ASSIGN   1114>>ASSIGN
      1128>>IF       1155>>IF       1155>>CALL     1155>>CALL     1158>>ASSIGN   1158>>ASSIGN   1217<<ASSIGN
      1218>>IF       1219>>ASSIGN   1225>>IF       1225>>IF       1232>>IF       1232>>CALL     1232>>CALL
      1237>>ASSIGN   1237>>ASSIGN   1258>>ASSIGN   1258>>ASSIGN   1267>>IF       1277>>IF       1282>>DOWHILE
PL6.E3A0      #001=KVB$SVC File=KVB$SVC.:E05TSI                                  WED 07/30/97 01:54 Page:148  
      1288>>IF       1291>>ASSIGN   1303>>ASSIGN   1303>>ASSIGN   1306>>IF       1321>>ASSIGN   1321>>ASSIGN
      1325>>ASSIGN   1328>>ASSIGN   1330>>ASSIGN   1330>>ASSIGN   1351>>IF       1351>>CALL     1351>>CALL
      1353>>ASSIGN   1353>>ASSIGN   1363>>ASSIGN   1365>>ASSIGN   1369>>ASSIGN   1379>>ASSIGN   1379>>ASSIGN
      1380>>IF       1380>>IF       1381>>ASSIGN   1381>>ASSIGN   1435<<ASSIGN   1462>>ASSIGN   1482>>ASSIGN
      1487>>IF       1487>>IF       1487>>IF       1489>>IF       1489>>ASSIGN   1490>>ASSIGN   1491>>ASSIGN
      1491>>ASSIGN   1495>>ASSIGN   1496>>ASSIGN   1496>>ASSIGN   1497>>ASSIGN   1498>>ASSIGN   1499>>ASSIGN
      1500>>ASSIGN   1509>>ASSIGN   1515>>ASSIGN   1518>>ASSIGN   1518>>ASSIGN   1520>>DOWHILE  1521>>IF
      1522>>IF       1533>>ASSIGN   1539>>ASSIGN   1543>>IF       1544>>IF       1554>>IF       1554>>IF
      1554>>ASSIGN   1554>>ASSIGN   1555>>ASSIGN   1561>>ASSIGN   1568>>ASSIGN   1568>>ASSIGN   1569>>ASSIGN
      1569>>ASSIGN   1569>>ASSIGN   1572>>ASSIGN   1606<<ASSIGN   1607>>IF       1607<<ASSIGN   1608>>ASSIGN
      1611>>ASSIGN   1612>>ASSIGN   1619>>IF       1619>>IF       1641>>IF       1683--IMP-PTR  1684--IMP-PTR
      1693>>IF       1694>>ASSIGN   1694>>ASSIGN   1708>>IF       1709>>ASSIGN   1709>>ASSIGN   1734>>ASSIGN
      1734>>ASSIGN   1735>>IF       1750>>IF       1751>>ASSIGN   1751>>ASSIGN   1779>>IF       1794>>IF
      1805>>ASSIGN   1806>>ASSIGN   1838>>ASSIGN
Y_SIZ
       920**DCL       921--REDEF    1012<<ASSIGN   1020>>DOWHILE  1022<<ASSIGN   1022>>ASSIGN   1025>>ASSIGN
      1041<<ASSIGN   1041>>ASSIGN   1044>>IF       1092>>IF       1101>>ASSIGN   1107>>IF       1115>>ASSIGN
      1119<<ASSIGN   1119>>ASSIGN   1219<<ASSIGN   1222>>ASSIGN   1223>>ASSIGN   1247>>DOWHILE  1250<<ASSIGN
      1250>>ASSIGN   1254>>IF       1262>>DOWHILE  1264<<ASSIGN   1264>>ASSIGN   1265>>IF       1272>>ASSIGN
      1282>>DOWHILE  1338<<ASSIGN   1338>>ASSIGN   1342<<ASSIGN   1436<<ASSIGN   1438>>IF       1438<<ASSIGN
      1463>>ASSIGN   1466>>ASSIGN   1483>>ASSIGN   1487>>IF       1498>>ASSIGN   1521>>IF       1529<<ASSIGN
      1529>>ASSIGN   1532>>IF       1533>>ASSIGN   1539>>ASSIGN   1551<<ASSIGN   1551>>ASSIGN   1561<<ASSIGN
      1608<<ASSIGN   1645<<ASSIGN   1645>>ASSIGN
Y_SIZS
       921**DCL      1094>>ASSIGN   1108>>ASSIGN   1270>>ASSIGN   1286>>ASSIGN   1287>>ASSIGN   1334>>ASSIGN
      1336>>ASSIGN   1345>>ASSIGN   1346>>ASSIGN   1480>>ASSIGN   1481>>ASSIGN   1509>>ASSIGN   1520>>DOWHILE
      1524>>ASSIGN   1543>>IF       1546>>ASSIGN   1563>>ASSIGN   1619>>IF
Z IN PROCEDURE Y$SETMEMBITS
      1678**DCL      1700<<ASSIGN   1702<<ASSIGN   1704<<ASSIGN   1706<<ASSIGN   1708>>IF       1709>>ASSIGN
      1742<<ASSIGN   1744<<ASSIGN   1746<<ASSIGN   1748<<ASSIGN   1750>>IF       1751>>ASSIGN   1786<<ASSIGN
      1788<<ASSIGN   1790<<ASSIGN   1792<<ASSIGN   1794>>IF
