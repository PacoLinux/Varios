/*M* FILER_SI1 */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* THI=1,PLM=3,IND=3 */
%EJECT;
/*********************************************************************/
/*
***   EV_ADD_VAL_BITS   29 AUG 77   (PRY)   ADDS BITS TO CURRENT VALUE.
*/
 
EV_ADD_VAL_BITS: PROC( RJ_BITS#, NBR_BITS# );
%INCLUDE FILER_II5;
 
/***   INCREASE WIDTH OF CURRENT VALUE   ***/
DCL   EV_INCREASE_WIDTH      ENTRY(1);
 
 
/***************
***   PARAMETERS:
*/
DCL   RJ_BITS#          SBIN WORD ALIGNED;
                                        /* RIGHT JUSTIFIED BIT PATTERN TO ADD */
DCL   NBR_BITS#      SBIN WORD ALIGNED; /* NUMBER OF BITS TO ADD              */
 
/***************
***   LOCALS:
*/
DCL  OLD_DWIDTH SBIN WORD ALIGNED AUTO; /* SAVES VALUE SIZE                   */
 
/***************
***   MAKE ROOM FOR THE NEW BITS.
*/
   OLD_DWIDTH = DWIDTH;                 /* SAVE IX OF NEXT BIT                */
   CALL EV_INCREASE_WIDTH( NBR_BITS# );
                                        /* MAKE ROOM FOR THE NEW BITS         */
   IF VAL_FAULT ~= 0 THEN RETURN;       /* RETURN IF ANY PROBLEMS             */
/*
***   GOT EXTRA SPACE FOR VALUE.
*/
   TPTR1$   = PINCRB( DESC$ -> BUF.BLK$, OLD_DWIDTH );
                                        /* POINT TO TARGET AREA               */
   TEMP1    = NBR_BITS#;                /* SET BIT STRING LENGTH              */
   TPTR2$   = PINCRB( ADDR( RJ_BITS# ), 36-TEMP1 );
                                        /* POINT TO BITS TO ADD               */
   TPTR1$ -> BITS = TPTR2$ -> BITS;
 
   RETURN;
 
END EV_ADD_VAL_BITS;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***  AM_ALLOC_BLK  12 AUG 77  (PRY)  RETURNS THROUGH BLK_IX# THE
***  INDEX OF A BLOCK OF BLK_SIZE# DATA WORDS.  IF A BLOCK IS ALLOCATED IT
***  IS ASSOCIATED WITH BUF$# AND MARKED IN USE.
*/
 
AM_ALLOC_BLK: PROC ( BUF$#, BLK_SIZE#, BLK_IX# ) NOAUTO;
%INCLUDE FILER_II5;
 
/***   ALLOCATE A NEW BLOCK OF BLOCK SPACE   ***/
DCL   AM_ALLOC_NEW_BLK       ENTRY(2);
 
/***   SPLIT OFF UNUSED AREA FROM A USED BLOCK   ***/
DCL   AM_SPLIT_BLK           ENTRY(2);
 
/***************
***   PARAMETERS:
*/
DCL   BUF$#             PTR       ALIGNED;
                                        /* DESCRIPTOR TO ASSOCIATE BLOCK WITH */
DCL   BLK_SIZE#      SBIN WORD ALIGNED; /* SIZE OF DESIRED BLOCK              */
DCL   BLK_IX#        SBIN WORD ALIGNED; /* INDEX OF RETURNED BLOCK            */
 
/***************
***   LOCALS:
*/
DCL   BUF$            PTR ALIGNED AUTO; /* LOCALIZES BUF$#                    */
DCL   BLK_SIZE  SBIN WORD ALIGNED AUTO; /* LOCALIZES BLK_SIZE#                */
DCL   BLK_IX    SBIN WORD ALIGNED AUTO; /* LOCALIZES BLK_IX#                  */
DCL   BLK_PTR$          PTR       ALIGNED   AUTO;
                                        /* POINTS TO BLOCKS BEING INSPECTED   */
DCL   NOT_FOUND         SBIN WORD ALIGNED   AUTO;
                                        /* CONTROLS MAJOR 'FIND BLOCK' LOOP   */
DCL   BID               SBIN WORD ALIGNED   AUTO;
                                        /* TEMPORARY STORAGE OF BLOCK INFO    */
DCL   SIZE              SBIN WORD ALIGNED   AUTO;
                                        /* TEMPORARY STORAGE OF BLOCK INFO    */
 
/***************
***   LOCALIZE PARMS.
*/
   BLK_SIZE = ( (BLK_SIZE# + 3 + 1) / 2) * 2;
                         /* INCLUDE 3 WORDS FOR HDR AND FTR; EVEN OUT SIZE    */
/*
***   MAKE SURE BLOCK ISN'T TOO LARGE TO STORE SIZE IN BLK.SIZE.
*/
   IF BLK_SIZE > MAX_BLK_SIZE
    THEN DO;                            /* TOO LARGE                          */
      VAL_FAULT = 5;
 /*E* 5V AM_ALLOC_BLK: ATTEMPT TO CREATE A SINGLE BLOCK WHICH IS TOO LARGE    */
      RETURN;
      END;
/*
***   INITIALIZE BLOCK SEARCH.
*/
   BLK_IX    = STRT_BLK_IX;
   NOT_FOUND = 1;
/*
***   FIND UNUSED BLOCK OF ADEQUATE SIZE.
*/
   DO WHILE (NOT_FOUND = 1);
         /*
         ***   GET CURRENT BLOCK INFO.
         */
      BLK_PTR$ = PINCRW( DATA_BASE$, BLK_IX );
                                        /* POINT TO CURRENT BLOCK             */
      BID      = BLK_PTR$ -> BLK.ID;
                                        /* GET ID OF ASSOCIATED DESC          */
      SIZE     = BLK_PTR$ -> BLK.SIZE;
         /*
         ***   CHECK IF SATISFACTORY FREE BLOCK.
         */
      IF BID < UNUSED_BUF_ID  OR  (BID = UNUSED_BUF_ID
        AND  SIZE < BLK_SIZE)
       THEN DO;                         /* BLOCK IN USE OR TOO SMALL          */
         IF SIZE > 1                    /* AT END?                            */
          THEN BLK_IX = BLK_IX + SIZE;  /* NO: TRY NEXT BLOCK                 */
          ELSE DO;                      /* YES: ALLOCATE A NEW BLOCK          */
            CALL AM_ALLOC_NEW_BLK( BLK_SIZE, BLK_IX );
            IF VAL_FAULT ~= 0 THEN RETURN;
                                        /* RETURN IF PROBLEMS                 */
            BLK_PTR$  = PINCRW( DATA_BASE$, BLK_IX );
                                        /* POINT TO BLOCK IF WE GOT ONE       */
            NOT_FOUND = 0;              /* LAST RESORT                        */
            END;
         END;
       ELSE NOT_FOUND = 0;              /* BLOCK NOT IN USE AND LARGE ENOUGH  */
      END;
/*
***   IF FOUND A BLOCK; SET UP HEADER AND FOOTER AND ASSOCIATE WITH
***   DESCRIPTOR.
*/
   BLK_IX#            = BLK_IX;         /* RETURN IX OF BLOCK                 */
   BUF$               = BUF$#;          /* GET DESCRIPTOR POINTER             */
   BLK_PTR$ -> BLK.ID = BUF$ -> BUF.ID; /* ASSOCIATE WITH DESC                */
   BUF$ -> BUF.IX     = BLK_IX;         /* IX BLOCK                           */
   BUF$ -> BUF.BLK$   = PINCRW( BLK_PTR$, 1 );
                                        /* SET DATA POINTER                   */
   BUF$ -> BUF.LOCK   = 0;              /* NEW ASSOCIATION                    */
   BUF$ -> BUF.WIDTH  = 0;              /* JUST TO BE THOROUGH                */
   CALL AM_SPLIT_BLK( BLK_IX, BLK_SIZE );
                         /* SPLIT BLOCK IF NECESSARY--ALSO CREATES FOOTER     */
 
   VAL_FAULT = 0;                       /* NO PROBLEMS                        */
   RETURN;
 
END AM_ALLOC_BLK;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***  AM_ALLOC_NEW_BLK  12 AUG 77  (PRY)  ALLOCATES A NEW BLOCK OF
***  BLK_SIZE# WORDS AT THE END OF THE BLOCK SPACE AND RETURNS ITS INDEX
***  THROUGH BLK_IX#.
***  NOTE: BLK_SIZE# MUST ALLOW FOR THE BLOCK HEADER AND FOOTER.
*/
 
AM_ALLOC_NEW_BLK: PROC( BLK_SIZE#, BLK_IX# ) NOAUTO;
%INCLUDE FILER_II5;
 
/***   GET DYNAMIC PAGES   ***/
DCL   AM_GET_PAGES           ENTRY(1);
 
 
/***   COMPACT THE BLOCK SPACE   ***/
DCL   AM_COMPACT             ENTRY(1);
 
 
/***************
***   PARAMETERS:
*/
DCL   BLK_SIZE#      SBIN WORD ALIGNED; /* SIZE OF DESIRED BLOCK              */
DCL   BLK_IX#           SBIN WORD ALIGNED;
                                   /* INDEX OF NEWLY ALLOCATED BLOCK OR -1    */
 
/***************
***   LOCALS:
*/
DCL   NBR_LEFT_OVER     SBIN WORD ALIGNED   AUTO;
     /* TEMPORARY USED TO CALC AMOUNT OF FREE SPACE THAT WILL BE REMAINING    */
DCL   NBR_PAGES_NEEDED  SBIN WORD ALIGNED   AUTO;
                         /* TEMPORARY USED TO CALC NUMBER OF PAGES NEEDED     */
DCL   BLK_SIZE  SBIN WORD ALIGNED AUTO; /* LOCALIZES BLK_SIZE#                */
DCL   LOCAL_TEMP        SBIN WORD ALIGNED   AUTO;
                                        /* FOR RETURNED IGNORED PARM          */
 
/***************
***   MAKE SURE BLOCK ISN'T TOO LARGE TO STORE SIZE IN BLK.SIZE.
*/
   BLK_SIZE         = BLK_SIZE#;        /* LOCALIZE PARM                      */
   IF BLK_SIZE > MAX_BLK_SIZE
    THEN DO;                            /* TOO LARGE                          */
      VAL_FAULT = 5;
 /*E* 5V AM_ALLOC_NEW_BLK: ATTEMPT TO CREATE A SINGLE BLOCK WHICH IS TOO LARGE */
      RETURN;
      END;
    /*
    ***   ALLOCATE A NEW BLOCK...CALC CURRENT EXCESS.
    */
   NBR_LEFT_OVER  = LAST_FREE_IX - END_BLK_IX - BLK_SIZE;
   IF NBR_LEFT_OVER < 0                 /* OVERFLOW INTO TWILIGHT ZONE?       */
    THEN DO;                            /* YES                                */
      CALL AM_COMPACT( LOCAL_TEMP );    /* FREE ANY UNUSED AREAS              */
      NBR_LEFT_OVER = LAST_FREE_IX - END_BLK_IX - BLK_SIZE;
                                        /* RE CALCULATE LEFTOVER              */
      IF NBR_LEFT_OVER < 0              /* NEED TO GET PAGES?                 */
       THEN DO;                         /* YES                                */
              /*
              ***   WE NEED TO GET PAGES FOR A NEW BLOCK.
              */
         NBR_PAGES_NEEDED = (1023 - NBR_LEFT_OVER) / 1024;
         CALL AM_GET_PAGES( NBR_PAGES_NEEDED );
         IF VAL_FAULT ~= 0              /* GET PAGES?                         */
          THEN DO;                      /* NO                                 */
            VAL_FAULT = 6;              /* HOPELESS                           */
                              /*E* 6V AM_ALLOC_NEW_BLK: NO FREE SPACE LEFT    */
            RETURN;
            END;
         END;
      END;
    /*
    ***   SET UP NEW BLOCK'S HEADER.
    */
   TPTR1$             = PINCRW( DATA_BASE$, END_BLK_IX );
                                        /* POINT TO NEW BLOCK                 */
   TPTR1$ -> BLK.ID   = UNUSED_BUF_ID;  /* SET BLK'S ID TO UNUSED             */
   TPTR1$ -> BLK.SIZE = BLK_SIZE;       /* SET SIZE                           */
    /*
    ***  SET UP FOOTER.
    */
   TPTR2$             = PINCRW( TPTR1$, BLK_SIZE-1  );
                                        /* POINT TO FOOTER                    */
   TPTR2$ -> WRD#     = TPTR1$ -> WRD#; /* SET UNUSED FOOTER = HDR            */
    /*
    ***   SET UP BLOCK SPACE END 'BLOCK'.
    */
   BLK_IX#       = END_BLK_IX;          /* RETURN NEW IX                      */
   END_BLK_IX  = END_BLK_IX + BLK_SIZE; /* MOVE IX OF ENDING BLOCK            */
   TPTR2$        = PINCRW( DATA_BASE$, END_BLK_IX );
                                        /* POINT TO ENDING BLOCK              */
   TPTR2$ -> BLK = END_BLK;             /* SET IT                             */
   RETURN;
 
 
END AM_ALLOC_NEW_BLK;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***   EV_BASED   24 AUG 77   (PRY)   CONVERTS THE CURRENT DIGIT STRING
***   TO A VALUE ASSUMING THE BASE FOR INTERPRETATION IS BASE# AND
***   EACH DIGIT IS REPRESENTED BY BASE_WIDTH# BITS.
***   THE FIRST CHAR OF THE CURRENT STRING IS ASSUMED TO BE A
***   '.' OR '#' AND IS IGNORED.
*/
 
EV_BASED: PROC( BASE#, BASE_WIDTH# );
%INCLUDE FILER_II5;
%INCLUDE FILER_II4;
 
/***   RECORD POSSIBLE ERROR CONDITIONS   ***/
DCL   UT_PSBL_ERR            ENTRY(1);
 
/***   INCREMENT THE CURRENT CHARACTER INDEX   ***/
DCL   UT_INC_CHARX           ENTRY;
 
/***   ADD BITS TO THE CURRENT VALUE   ***/
DCL   EV_ADD_VAL_BITS        ENTRY(2);
 
/***************
***   PARAMETERS:
*/
DCL   BASE#          SBIN WORD ALIGNED; /* BASE                               */
DCL   BASE_WIDTH#    SBIN WORD ALIGNED; /* NUMBER OF BITS PER DIGIT           */
 
/***************
***   LOCALS:
*/
DCL   BASE      SBIN WORD ALIGNED AUTO; /* LOCALIZES BASE#                    */
DCL  BASE_WIDTH SBIN WORD ALIGNED AUTO; /* LOCALIZES BASE_WIDTH#              */
DCL   NOT_DONE  SBIN WORD ALIGNED AUTO; /* CONTROLS CONVERSION LOOP           */
DCL   SAW_ANY           SBIN WORD ALIGNED   AUTO;
                                        /* SET IF ANY GOOD CHARS SEEN         */
 
/***************
***   MAKE SURE THAT DIGITS CAN FOLLOW.
*/
   CALL UT_INC_CHARX;                   /* GET NEXT CHARACTER                 */
   IF CHARX > CHARX_MAX                 /* EXCEEDING STRING LENGTH            */
    THEN DO;                            /* YES                                */
      VAL_FAULT = 11; /*E* 11V EV_BASED: BASED DIGIT STRING MISSING   */
      RETURN;
      END;
/*
***   INITIALIZE CONVERSION.
*/
   BASE       = BASE#;
   BASE_WIDTH = BASE_WIDTH#;
   NOT_DONE   = 1;
   SAW_ANY    = 0;
/*
***   CONVERT BASED VALUE.
*/
   DO WHILE ( ( (C >= CT_0 AND C <= CT_9) /* NUMERIC?                         */
     OR (C >= CT_A AND C <= CT_F)       /* HEX DIGIT?                         */
     )  AND  CHARX <= CHARX_MAX  AND  NOT_DONE = 1 );
                                        /* AND NOT DONE WITH CONVERSION ?     */
      IF C > CT_9                       /* A-F IF NOT NUMERIC                 */
       THEN C = C - CT_A + 10;          /* CONVERT A-F                        */
       ELSE C = C - CT_0;               /* CONVERT 0-9                        */
      IF C >= BASE                      /* CHAR APPROPRIATE TO BASE?          */
       THEN DO;                         /* NO                                 */
         CALL UT_PSBL_ERR( 1 );
                    /*E* 1P EV_BASED: USER MIGHT HAVE FORGOTTEN THE BASE      */
         NOT_DONE = 0;                  /* TERMINATION OF STRING              */
         C        = CHAR$ -> UBN9#;     /* RESTORE CHARACTER                  */
         END;
       ELSE DO;                         /* CHAR IS APPROPRIATE TO BASE        */
         CALL EV_ADD_VAL_BITS( C, BASE_WIDTH );
                                        /* ADD BITS TO VALUE                  */
         IF VAL_FAULT ~= 0 THEN RETURN;
                                        /* ERROR TRYING TO ADD BITS?          */
         SAW_ANY = 1;                   /* SAW A GOOD CHAR                    */
         CALL UT_INC_CHARX;             /* GET NEXT CHAR                      */
         END;
      END;
/*
***   DETERMINE SUCCESS OF CONVERSION.
*/
   IF SAW_ANY = 1                       /* ANY GOOD CHARS?                    */
    THEN VAL_FAULT = 0;                 /* INDICATE SUCCESS                   */
    ELSE VAL_FAULT = 11;                /* INDICATE FAILURE                   */
 
   RETURN;
 
END EV_BASED;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***   UT_MOVE_BITS_FWD   30 AUG 77   (PRY)   MOVE BITS FROM A
***   BLOCK SECTION TO AN EARLIER SECTION OR TO ANOTHER BLOCK.
*/
 
UT_MOVE_BITS_FWD: PROC( FROM$#, TO$#, NBR_BITS# ) NOAUTO;
%INCLUDE FILER_II5;
 
/***************
***   PARAMETERS:
*/
DCL   FROM$#            PTR    ALIGNED; /* POINTER TO SOURCE BITS             */
DCL   TO$#              PTR    ALIGNED; /* POINTER TO TARGET BITS             */
DCL   NBR_BITS#      SBIN WORD ALIGNED; /* NUMBER OF BITS TO MOVE             */
/***************
***   LOCALS:
**/
DCL   OFST_TYPE         SBIN WORD ALIGNED AUTO;
                                        /* SAVES TYPE OF MOVE                 */
 
/***************
***   MOVE BITS.
*/
   TPTR1$ = FROM$#;                     /* LOCALIZE PARMS                     */
   TPTR2$ = TO$#;
   TEMP1  = NBR_BITS#;
 
/***************
***   CHECK ALIGNMENT OF POINTERS AND MOVEMENT.
**/
   IF MOD(TEMP1,9) > 0                  /* BYTE ALIGNMENT?                    */
    THEN OFST_TYPE = 1;
    ELSE IF PTR_ANAT1.BIT_OFST | PTR_ANAT2.BIT_OFST
       THEN OFST_TYPE = 1;              /* BIT ALIGNED                        */
       ELSE OFST_TYPE = 0;              /* BYTE ALIGNED                       */
   DO CASE(OFST_TYPE);             /* MOVE BIT STRING ACCORDING TO ALIGNMENT  */
    CASE(0);                            /* BYTE ALIGNMENT                     */
      TEMP1 = TEMP1 / 9;
      TPTR2$ -> CHARS = TPTR1$ -> CHARS;
    CASE(1);                            /* BIT ALIGNMENT                      */
      TPTR2$ -> BITS = TPTR1$ -> BITS;
    END;
 
   RETURN;
 
END UT_MOVE_BITS_FWD;
 
/**********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***   UT_MOVE_BITS_RWD   30 AUG 77   (PRY)   MOVE BITS FROM A
***   BLOCK SECTION TO A LATER SECTION.  EARLIER SECTION IS ZEROED.
*/
 
UT_MOVE_BITS_RWD: PROC( FROM$#, OFFSET#, NBR_BITS# ) NOAUTO;
%INCLUDE FILER_II5;
 
/***************
***   PARAMETERS:
*/
DCL   FROM$#            PTR    ALIGNED; /* POINTER TO SOURCE BITS             */
DCL   OFFSET#        SBIN WORD ALIGNED; /* HOW FAR TO MOVE THE BITS           */
DCL   NBR_BITS#      SBIN WORD ALIGNED; /* NUMBER OF BITS TO MOVE             */
 
/***************
***   MOVE BITS.
*/
   TPTR1$ = FROM$#;                     /* LOCALIZE PARMS                     */
   TEMP1 = OFFSET#;
   TEMP2 = TEMP1;
   TIX1   = NBR_BITS#;                  /* CALC IX OF LAST BIT TO MOVE        */
   DO WHILE (TIX1 > 0);                 /* MOVE THE BIT STRING                */
      TIX1 = TIX1 - TEMP1;
      IF TIX1 < 0 THEN DO;
         TEMP1 = TEMP1 + TIX1;
         TIX1 = 0;
         END;
      PINCRB( TPTR1$, TIX1+TEMP2)->BITS = PINCRB( TPTR1$, TIX1)->BITS;
      END;
/*
***   ZERO EARLIER SECTION.
*/
   TEMP1 = TEMP2;
   TPTR1$ -> BITS = '0'B;
 
   RETURN;
 
END UT_MOVE_BITS_RWD;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
/*********************************************************************/
/*
***   EV_BUF   30 AUG 77   (PRY)   CONVERTS A BUFFER VALUE
***   SPECIFICATION TO A VALUE.
*/
 
EV_BUF: PROC;
%INCLUDE FILER_II5;
%INCLUDE FILER_II4;
 
/***   INCREMENT THE CURRENT CHARACTER INDEX   ***/
DCL   UT_INC_CHARX           ENTRY;
 
/***   IGNORE BLANKS STARTING WITH THE CURRENT CHARACTER   ***/
DCL   UT_IGNORE_BLANKS       ENTRY;
 
/***   MOVE BITS IN A BLOCK TO THE RIGHT AND ZERO FILL   ***/
DCL   UT_MOVE_BITS_FWD       ENTRY(3);
 
/***   IDENTIFY THE BUFFER SPECIFIED BY THE CURRENT STRING   ***/
DCL   UT_IDENTIFY_BUFFER     ENTRY(2);
/***   INCREASE WIDTH OF CURRENT VALUE   ***/
DCL   EV_INCREASE_WIDTH      ENTRY(1);
 
/***   CONVERT RANGE SPECIFICATION TO BIT OFFSET AND BIT SIZE   ***/
DCL   EV_GET_RANGE           ENTRY(2);
 
 
/***************
***   LOCALS:
*/
DCL   BUF_PTR$          PTR       ALIGNED   AUTO;
                                        /* POINTER TO SPECIFIED BUFFER        */
DCL   DESC_IX   SBIN WORD ALIGNED AUTO; /* IX EQUIVALENT OF POINTER           */
DCL   FROM$           PTR ALIGNED AUTO; /* POINTER TO BUFFER REGION           */
DCL   TO$             PTR ALIGNED AUTO; /* POINTER TO VALUE REGION            */
DCL  RANGE_SIZE SBIN WORD ALIGNED AUTO; /* SIZE OF REGION                     */
DCL   RANGE_STRT        SBIN WORD ALIGNED   AUTO;
                                        /* BIT IX OF FIRST BIT OF RANGE       */
DCL  OLD_DWIDTH SBIN WORD ALIGNED AUTO; /* SAVES VALUE WIDTH                  */
 
/***************
***   GET BUFFER NAME AND CALCULATE POINTER.
*/
   CALL UT_INC_CHARX;                   /* SKIP OVER '[' (L. BRACKET)         */
   CALL UT_IDENTIFY_BUFFER( BUF_PTR$, DESC_IX );
                                        /* GET POINTER TO BUFFER DESCRIPTOR   */
   IF VAL_FAULT ~= 0 THEN RETURN;       /* RETURN IF PROBLEMS                 */
/*
***   HAVE A POINTER TO A DESCRIPTOR.
*/
   TEMP1 = BUF_PTR$ -> BUF.TYPE;        /* GET THE BUFFER TYPE                */
   IF TEMP1 = BT_UNUSED                 /* CHECK IF LEGAL BUFFER VALUE        */
    THEN DO;                       /* CAN'T GET A VALUE FROM AN UNUSED BUFFER */
      VAL_FAULT = 17;           /*E* 17V EF_BUF: BUFFER IS UNUSED     */
      RETURN;
      END;
/*
***   MAKE SURE THAT THE BUFFER IS NOT ERASE OR NIL.
*/
   TPTR1$ = BUF_PTR$ -> BUF.BLK$;       /* GET THE DATA POINTER               */
   IF TEMP1 = BT_MAPPED  AND  (TPTR1$ = ADDR( ERASE )  OR
     TPTR1$ = ADDR( NIL ))              /* ERASE OR NIL?                      */
    THEN DO;                            /* YES                                */
      VAL_FAULT = 78;
                    /*E* 78V EV_BUF: SPECIFIED BUFFER IS ERASE OR NIL         */
      RETURN;
      END;
 
/*
***   GET THE RANGE SPECIFICATION (IF ANY).
*/
   CALL EV_GET_RANGE( RANGE_STRT, RANGE_SIZE );
   IF VAL_FAULT ~= 0 THEN RETURN;       /* RETURN IF PROBLEMS                 */
   IF RANGE_STRT = -1                   /* IF DEFAULT RANGE START             */
    THEN RANGE_STRT = 0;                /* USE 0                              */
   TEMP1 = BUF_PTR$ -> BUF.WIDTH;       /* GET THE BUFFER'S WIDTH             */
   IF RANGE_SIZE = MASKR(35)            /* IF DEFAULT MAX RANGE SIZE          */
    THEN RANGE_SIZE = TEMP1 - RANGE_STRT; /* RANGE IS ALL OF BUFFER           */
/*
***   MAKE SURE THAT THE RANGE IS WITHIN BOUNDS.
*/
   IF RANGE_STRT > TEMP1                /* STARTS WITHIN BUFFER?              */
    THEN DO;                            /* NO                                 */
      VAL_FAULT = 18;
                    /*E* 18V EV_BUF: RANGE START IS NOT WITHIN BUFFER         */
      RETURN;
      END;
 
   IF RANGE_STRT + RANGE_SIZE > TEMP1   /* ENDS WITHIN BUFFER?                */
    THEN DO;                            /* NO                                 */
      VAL_FAULT = 19; /*E* 19V EV_BUF: RANGE END IS NOT WITHIN BUFFER */
      RETURN;
      END;
/*
***   MAKE SURE BUFFER VALUE SPEC IS TERMINATED PROPERLY.
*/
   CALL UT_IGNORE_BLANKS;
   IF CHARX > CHARX_MAX  OR  C ~= CT_RBRACKET
                                        /* MUST END WITH ~                    */
    THEN DO;                            /* DIDN'T                             */
      VAL_FAULT = 20; /*E* 20V EV_BUF: BUFFER VALUE CLOSING ] MISSING */
      RETURN;
      END;
   CALL UT_INC_CHARX;                   /* SKIP OVER R BRACKET                */
/*
***   RANGE IS WITHIN BUFFER. MOVE BUFFER PORTION TO VALUE.
*/
   OLD_DWIDTH = DWIDTH;                 /* SAVE CURRENT WIDTH OF VALUE        */
   CALL EV_INCREASE_WIDTH( RANGE_SIZE ); /* INCREASE SIZE OF VALUE            */
   IF VAL_FAULT ~= 0 THEN RETURN;       /* RETURN IF PROBLEMS                 */
   FROM$ = PINCRB( BUF_PTR$ -> BUF.BLK$, RANGE_STRT );
                                        /* POINT TO BEGINNING OF SOURCE RANGE */
   TO$   = PINCRB( DESC$ -> BUF.BLK$, OLD_DWIDTH );
                                        /* POINT TO BEGINNING OF TARGET RANGE */
   CALL UT_MOVE_BITS_FWD( FROM$, TO$, RANGE_SIZE );
                                        /* MOVE THE BITS FROM BUFFER TO VALUE */
 
 
   RETURN;
 
END EV_BUF;
 
/**********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*********************************************************************/
/**
***   EV_BUFFER_SIZE   16 NOV 77   (PRY)   CONVERT BUFFER REFERENCE
***   TO BUFFER SIZE.
**/
 
EV_BUFFER_SIZE: PROC;
 
/***   INCREMENT THE CURRENT CHARACTER INDEX   ***/
DCL   UT_INC_CHARX           ENTRY;
 
/***   IDENTIFY THE BUFFER SPECIFIED BY THE CURRENT STRING   ***/
DCL   UT_IDENTIFY_BUFFER     ENTRY(2);
 
/***   ADD BITS TO THE CURRENT VALUE   ***/
DCL   EV_ADD_VAL_BITS        ENTRY(2);
 
%INCLUDE FILER_II4;
%INCLUDE FILER_II5;
 
/********************
***  LOCALS:
**/
DCL   BUF_PTR$          PTR       ALIGNED   AUTO;
                                        /* POINTER TO BUFFER DESCRIPTOR       */
DCL   LOCAL_TEMP        SBIN WORD ALIGNED   AUTO;
 
/********************
***   DETERMINE BUFFER ID.
**/
   CALL UT_INC_CHARX;                   /* SKIP OVER %                        */
   CALL UT_IDENTIFY_BUFFER( BUF_PTR$, LOCAL_TEMP );
                                        /* GET POINTER TO BUFFER DESCRIPTOR   */
   IF VAL_FAULT ~= 0 THEN RETURN;       /* RETURN IF ERROR                    */
 
/**********
***   THE BUFFER MUST BE ALLOCATED.
**/
   LOCAL_TEMP = BUF_PTR$ -> BUF.TYPE;   /* GET THE BUFFER TYPE                */
   IF LOCAL_TEMP = BT_UNUSED            /* ALLOCATED?                         */
    THEN LOCAL_TEMP = -1;               /* NO                                 */
    ELSE DO;
      TPTR1$ = BUF_PTR$ -> BUF.BLK$;    /* GET THE DATA POINTER               */
      IF LOCAL_TEMP = BT_MAPPED  AND  (TPTR1$ = ADDR( ERASE )  OR
        TPTR1$ = ADDR( NIL ))           /* ERASE OR NIL                       */
       THEN LOCAL_TEMP = 0;             /* YES                                */
       ELSE LOCAL_TEMP = BUF_PTR$ -> BUF.WIDTH;
                                        /* GET THE SIZE                       */
      END;
 
   CALL EV_ADD_VAL_BITS( LOCAL_TEMP, 36 ); /* ADD ALL 36 BITS                 */
 
   RETURN;
 
END EV_BUFFER_SIZE;
 
/*********************************************************************/
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*********************************************************************/
/**
***   XQC_BUF_STATS  5 JAN 78   (PRY)   REPORTS ON BUFFER USE.
**/
XQC_BUF_STATS: PROC;
%INCLUDE FILER_II5;
%INCLUDE FILER_II4;
 
/***   OUTPUT A CHARACTER STRING   ***/
DCL   UT_OUTPUT_CHARS        ENTRY(2);
 
/***   FLUSH THE OUTPUT BUFFER   ***/
DCL   UT_FLUSH_BUF           ENTRY;
 
/***   OUTPUT A SINGLE CHARACTER   ***/
DCL   UT_OUTPUT_CHAR         ENTRY(1);
 
/***   DISPLAY DATA IN SPECIFIED FORMAT   ***/
DCL   UT_DISPLAY             ENTRY(3);
/***   DISPLAY SIZE OF BUFFER   ***/
DCL   UT_PRINT_SIZE          ENTRY(1);
 
/********************
***   LOCALS:
**/
DCL   BUF$              PTR       ALIGNED   AUTO;
                                   /* POINTER TO CURRENT BUFFER DESCRIPTOR    */
DCL   BIX       SBIN WORD ALIGNED AUTO; /* CURRENT BUFFER INDEX               */
DCL   TITLE_OUT         SBIN WORD ALIGNED   AUTO;
                              /* FLAG INDICATING IF TITLE HAS BEEN OUTPUT YET */
DCL   BTYPE     SBIN WORD ALIGNED AUTO; /* BUFFER TYPE                        */
DCL  LOCAL_TEMP SBIN WORD ALIGNED AUTO; /* LOCAL TEMPORARY                    */
DCL   LOCAL_TEMP$     PTR ALIGNED AUTO; /* LOCAL TEMPORARY POINTER            */
DCL SVD_OUT_CHARX SBIN WORD ALIGNED AUTO; /* PLACE TO SAVE OUTPUT CHARX       */
 
/********************
***   TITLE HAS NOT BEEN PRINTED YET;  GET NEW OUTPUT LINE READY.
**/
   TITLE_OUT = 0;                       /* INDICATE NO TITLE YET              */
   CALL UT_FLUSH_BUF;                   /* PREPARE OUTPUT BUFFER              */
 
/********************
***   REPORT ON ALL BUFFERS.
**/
   DO BIX=0 TO CT_Z - CT_A;             /* BUFFERS A THROUGH Z                */
      BUF$  = PINCRW( STRT_BUF_DESC$, BIX*BUF_DESC_SIZE );
                                        /* POINT TO BUFFER DESCRIPTOR         */
      BTYPE = BUF$ -> BUF.TYPE;         /* GET TYPE OF BUFFER                 */
      IF BTYPE ~= BT_UNUSED             /* BUFFER USED?                       */
       THEN DO;                         /* YES                                */
              /**
              ***   PRINT TITLE IF NOT ALREADY PRINTED.
              **/
         IF TITLE_OUT = 0               /* PRINTED YET?                       */
          THEN DO;                      /* NO                                 */
            CALL UT_OUTPUT_CHARS( 'Buf Type Width      Data PTR', 28 );
            CALL UT_FLUSH_BUF;          /* PRINT TITLE                        */
            TITLE_OUT = 1;              /* INDICATE TITLE PRINTED             */
            END;
         CALL UT_OUTPUT_CHAR( CT_SPACE );
                                        /* SPACE BEFORE BUFFER NAME           */
         CALL UT_OUTPUT_CHAR( BIX+CT_A );
                                        /* PRINT BUFFER NAME                  */
         CALL UT_OUTPUT_CHARS( '  ', 2 );
                                        /* SPACE TO BUFFER TYPE               */
              /**
              ***   PRINT TYPE OF BUFFER
              **/
         IF BTYPE = BT_DCB THEN CALL UT_OUTPUT_CHARS( 'DCB', 3 );
         IF BTYPE = BT_MAPPED THEN CALL UT_OUTPUT_CHARS( 'MAP', 3 );
         IF BTYPE = BT_VALUE THEN CALL UT_OUTPUT_CHARS( 'VAL', 3 );
         IF BTYPE = BT_FIX_BUF THEN CALL UT_OUTPUT_CHARS( 'FIX', 3 );
         IF BTYPE = BT_VAR_BUF THEN CALL UT_OUTPUT_CHARS( 'VAR', 3 );
         IF BTYPE = BT_CMND_BUF THEN CALL UT_OUTPUT_CHARS( 'CMD', 3 );
         IF BTYPE = BT_FPT_BUF THEN CALL UT_OUTPUT_CHARS( 'FPT', 3 );
         CALL UT_OUTPUT_CHARS( '  ', 2 );
         SVD_OUT_CHARX = OUT_CHARX;     /* SAVE OUTPUT CHARX FOR LATER CALC   */
         LOCAL_TEMP = BUF$ -> BUF.WIDTH; /* GET WIDTH OF BUFFER               */
         CALL UT_PRINT_SIZE( LOCAL_TEMP ); /* DISPLAY SIZE                    */
         LOCAL_TEMP = 11 - (OUT_CHARX-SVD_OUT_CHARX);
                                        /* CALC NUMBER OF SPACES TO TAB       */
         IF LOCAL_TEMP > 11 THEN LOCAL_TEMP = 11;
         IF LOCAL_TEMP < 1 THEN LOCAL_TEMP = 1; /* LIMIT TAB                  */
         CALL UT_OUTPUT_CHARS( '            ', LOCAL_TEMP ); /* TAB           */
         LOCAL_TEMP$ = ADDR( LOCAL_TEMP );
         IF BTYPE ~= BT_DCB             /* IF NOT DCB DISPLAY POINTER         */
          THEN DO;
            LOCAL_TEMP$ -> PR#$ = BUF$ -> BUF.BLK$;
                                        /* GET BUFFER DATA POINTER            */
            CALL UT_DISPLAY( LOCAL_TEMP$, 36, DT_MACHINE );
                                        /* DISPLAY IN OCTAL                   */
            END;
          ELSE DO;
            LOCAL_TEMP = BUF$ -> BUF.IX;
                                        /* DISPLAY ACTUAL DCB NUMBER          */
            CALL UT_DISPLAY( LOCAL_TEMP$, 36, -DT_DECIMAL );
            END;
         CALL UT_FLUSH_BUF;             /* FORCE OUTPUT LINE                  */
         END;
      END;
 
/********************
***   END OF LIST.   NOW TELL USER CORE UTILIZATION.
**/
   CALL UT_OUTPUT_CHARS( '...using ', 9 );
   LOCAL_TEMP$ = ADDR( NBR_PAGES_USED );
   CALL UT_DISPLAY( LOCAL_TEMP$, 36, -DT_DECIMAL );
   IF NBR_PAGES_USED = 1
    THEN LOCAL_TEMP = 5;
    ELSE LOCAL_TEMP = 6;
   CALL UT_OUTPUT_CHARS( ' pages', LOCAL_TEMP );
   CALL UT_FLUSH_BUF;
   RETURN;
 
END XQC_BUF_STATS;
