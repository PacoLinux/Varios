VERSION A05

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        /* VDI$BLOCK - Do block insertion and deletion. */
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P*  NAME: VDI$BLOCK
       12       12            PURPOSE:
       13       13                Do block insertion and deletion.
       14       14            DESCRIPTION:
       15       15                This module contains several external routines:
       16       16
       17       17                VDI$BAUTO_REKEY
       18       18                Attempts to do a localized rekey of a destination, given the source
       19       19                range which must fit into the destination.
       20       20
       21       21                VDI$BDELETE
       22       22                Given a range, will call the accessor to delete
       23       23                the range.  Replaces the first and/or last records of the
       24       24                range if any partial records are to be deleted.
       25       25
       26       26                VDI$BINSERT
       27       27                Given source and destination ranges, insert the source range after
       28       28                the destination range.
       29       29
       30       30                VDI$BTYPE
       31       31                Classifies a given range, returning a %BDT_ ("block descriptor type")
       32       32                code.
       33       33        */
       34       34
       35       35        /*D* NAME: VDI$BAUTO_REKEY
       36       36            PARAMETERS:
       37       37                DEST_STREAM - VD$STREAM open to the destination file.
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:2    
       38       38                DEST_KEY - A VD$KEY_NUMBER after which the hole is to be made.
       39       39                    Goes at %LVL_EXT_REC-1.
       40       40                DEST_OPTIONS - VD$ACCESS_OPTIONS for the destination.
       41       41                    Specifically, DEST_OPTIONS.KEY_INCR should contain the key
       42       42                        increment specifically requested by the user for this
       43       43                        block operation; or %CLEAR to use the default ($BY).
       44       44                SRC_RECS - The number of records that need to be inserted.
       45       45            INPUT:
       46       46            OUTPUT:
       47       47                Any and all record keys stored in 6Edit's internal
       48       48                    files may have been adjusted based on the rekey we just did.  Any
       49       49                    keys or GETKEY pointers you have in auto are suspect, and should
       50       50                    no longer be used.
       51       51            DESCRIPTION:
       52       52                Read forward from the given destination key.  For each record read,
       53       53                    if we were to rekey the record, we would expand the "key space"
       54       54                    (# of keys we could insert between the given destination key and
       55       55                    the existing record just read, if we rekeyed it).  Keep reading
       56       56                    until either:
       57       57                        The expanded key space will accomodate:
       58       58                            The # of source records (approximated above);
       59       59                            + the # of destination records read so far, which will
       60       60                                have to be rekeyed;
       61       61                            That sum * the key increment to use (either given in
       62       62                                DEST_OPTIONS or defaulted from $BY).
       63       63                         - OR -
       64       64                         The number of records we'd have to rekey exceeds the value of
       65       65                            $REKEY.  If this happens, we should give up and just
       66       66                            rekey the entire destination -- Call VDA$FREKEY to do this.
       67       67                    If we found a number of records which, after rekeying them, would
       68       68                        allow us to insert the source block, then go back and
       69       69                        rekey the records, building an XLATE_LOCATIONS structure as
       70       70                        we do to fix up all references to the rekeyed keys.
       71       71        */
       72       72
       73       73        VDI$BAUTO_REKEY: PROC (DEST_STREAM, DEST_KEY, DEST_OPTIONS, SRC_RECS) ALTRET;
       74       74
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:3    
       75       75
       76       76        %INCLUDE VD_MACROS_M;
       77     2291        %INCLUDE VD_PERR_C;
       78     2439
       79     2440    1   DCL VDA$FREKEY   ENTRY (5) ALTRET;
       80     2441    1   DCL VDA$LDELETE  ENTRY (2) ALTRET;
       81     2442    1   DCL VDA$LREAD    ENTRY (4) ALTRET;
       82     2443    1   DCL VDE$RGET     ENTRY (3) ALTRET;
       83     2444    1   DCL VDE$RPUT     ENTRY (6) ALTRET;
       84     2445    1   DCL VDG$OCOPY    ENTRY (2) ALTRET;
       85     2446    1   DCL VDG$OFREE    ENTRY (1) ALTRET;
       86     2447    1   DCL VDG$OALLOC   ENTRY (3) ALTRET;
       87     2448    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
       88     2449
       89     2450        %VD$RANGE (NAME=DEST$ENCLOSING, STCLASS="BASED(DEST_ENCLOSING$)");
       90     2519        %VD$KEY_NUMBER (NAME=CURR$KEY, STCLASS="BASED(CURR_KEY$)");
       91     2534        %VD$XLATE_LOCATIONS (NAME=XLATE$TABLE, STCLASS="BASED(XLATE$)");
       92     2670        %VD$BLOCK_DESC;
       93     2817        %VD$FILE_NODE;
       94     2910        %VD$WINDOW_SPEC;
       95     2976        %VD$TEXTC_REMOTE;
       96     3037    1   DCL NUM SBIN BASED ALIGNED;
       97     3038        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
       98     3144        %VD$KEY_NUMBER (NAME=DEST_KEY, STCLASS=PARAM);
       99     3159        %VD$ACCESS_OPTIONS (NAME=DEST_OPTIONS, STCLASS=PARAM);
      100     3188    1   DCL SRC_RECS SBIN;
      101     3189    1   DCL REL SBIN;
      102     3190    1   DCL CURR_KEY$ PTR;
      103     3191    1   DCL XLATE$ PTR;
      104     3192    1   DCL XLATEX SBIN;
      105     3193    1   DCL XLATE0$ PTR;
      106     3194    1   DCL DELTA SBIN;
      107     3195    1   DCL INCR SBIN;
      108     3196    1   DCL HOLE SBIN;
      109     3197    1   DCL RCRCNT SBIN;
      110     3198    1   DCL START_KEY SBIN;
      111     3199    1   DCL DEST_ENCLOSING$ PTR;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:4    
      112     3200        %VD$LOCATION (NAME=LOC, STCLASS=AUTO);
      113     3228        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      114     3297        %VD$NODE_DESC (NAME=RECORD, STCLASS=AUTO);
      115     3339
      116     3340
      117     3341        %VD_6E (STCLASS=SYMREF);
      118     3377        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
      119     3422        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
      120     3467    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      121     3468
      122     3469
      123     3470
      124     3471    1           HOLE = SRC_RECS;
      125     3472    1           INCR = ADDR(DEST_OPTIONS.KEY_INCR)->CURR$KEY.BYTES#;
      126     3473    1           IF INCR = 0 THEN INCR = VD_$BY.V#;
      127     3474    1           CURR_KEY$ = ADDR(DEST_STREAM.CURRENT.KEY(%LVL_EXT_REC-1));
      128     3475    1           START_KEY = DEST_KEY.BYTES#;
      129     3476    1           REL = 3;
      130     3477    2           DO UNTIL REL < 0;
      131     3478    2              REL = REL - 2;
      132     3479    2              RCRCNT = 0;
      133     3480    2              LOC = DEST_STREAM.CURRENT;
      134     3481    2              LOC.KEY(%LVL_EXT_REC-1) = DEST_KEY;
      135     3482    3              DO UNTIL RCRCNT >= VD_$REKEY.V#;
      136     3483    3                 CALL VDA$LREAD (DEST_STREAM, LOC, REL, '0'B)
      137     3484    3                   ALTRET (LREAD_FAILED);
      138     3485    3                 IF DEST_STREAM.CURRENT.EOF THEN
      139     3486    3                    DELTA = %MX_EDITKEY;
      140     3487    3                 ELSE IF CURR$KEY = LOC.KEY(%LVL_EXT_REC-1) THEN
      141     3488    3                       DELTA = 0;
      142     3489    3                    ELSE
      143     3490    3                       DELTA = CURR$KEY.BYTES#;
      144     3491    3                 DELTA = REL * (DELTA - START_KEY);
      145     3492    3                 IF DELTA/INCR > HOLE + RCRCNT THEN GOTO DO_IT;
      146     3493    3                 IF DELTA*RCRCNT/1000 > HOLE + RCRCNT THEN GOTO DO_IT_ADJUSTED;
      147     3494    3                 LOC.KEY(%LVL_EXT_REC-1) = CURR$KEY;
      148     3495    3                 RCRCNT = RCRCNT + 1;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:5    
      149     3496    3                 END;
      150     3497    2              END;
      151     3498
      152     3499                /*
      153     3500                Couldn't find enough space either way.  Rekey the whole thing.
      154     3501                */
      155     3502
      156     3503    1           CALL VDA$FREKEY (DEST_STREAM, DEST_STREAM, DEST_OPTIONS.KEY_INCR,
      157     3504    1             HOLE, DEST_KEY) ALTRET (FREKEY_FAILED);
      158     3505    1           RETURN;
      159     3506
      160     3507    1   DO_IT_ADJUSTED: ;
      161     3508    1           INCR = 1000/RCRCNT;
      162     3509    1           IF INCR>10 THEN IF INCR>100 THEN INCR = 100; ELSE INCR = 10;
      163     3510    1   DO_IT:  ;
      164     3511    1           DEST_ENCLOSING$ = ADDR(VD_CURRENT_WINDOW$-> VD$FILE_NODE.DESC.SPEC.V$->
      165     3512    1             VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$-> VD$BLOCK_DESC.RANGE);
      166     3513                /*
      167     3514                *   Build the xlate tables for all current file refs.
      168     3515                */
      169     3516    1           CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, XLATE0$, SIZEW(XLATE$TABLE) +
      170     3517    1             %N_LOCATION_XLATES * SIZEW(XLATE$TABLE.XLATES)) ALTRET(OALLOC_FAILED);
      171     3518    1           XLATE$ = XLATE0$;
      172     3519                %COPYKEY (FKEY=DEST_STREAM.FILE_KEY, TKEY=XLATE$TABLE.FILE_KEY);
      173     3535    1           XLATE$TABLE.LEVEL# = %LVL_EXT_REC;
      174     3536
      175     3537    1           CALL VDG$XLATE_LOCATIONS (XLATE$TABLE, %XLATE_BUILD)
      176     3538    1             ALTRET(XLATE_FAILED);
      177     3539
      178     3540    2           IF REL>0 THEN DO WHILE '1'B;
      179     3541    2              XLATEX = XLATE$TABLE.N_ENTRIES# - 1;
      180     3542    2              IF XLATE$TABLE.FLINK$ = ADDR(NIL) THEN EXIT;
      181     3543    2              XLATE$ = XLATE$TABLE.FLINK$;
      182     3544    2              END;
      183     3545    1           ELSE XLATEX = 0;
      184     3546
      185     3547    1           IF REL<0 THEN RCRCNT = RCRCNT+1;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:6    
      186     3548
      187     3549    1           REL = -REL;
      188     3550    1           DEL_RANGE = %CLEAR;
      189     3551    1           RECORD = %CLEAR;
      190     3552    1           RECORD.KEY = CURR$KEY;
      191     3553    2           IF CURR$KEY = LOC.KEY(%LVL_EXT_REC-1) /* BOF */ THEN DO;
      192     3554    2              START_KEY = INCR + 3*512*262144;
      193     3555    2              REL = 0;  /* Can't skip from BOF, we'll miss the first record */
      194     3556    2              END;
      195     3557    2           ELSE DO;
      196     3558    3              IF DEST_STREAM.CURRENT.EOF THEN DO;
      197     3559    3                 ADDR(RECORD.KEY) -> CURR$KEY.LENGTH# = 4; /* Make a big key */
      198     3560                      /* Use nice numbers if possible */
      199     3561    3                 START_KEY =
      200     3562    3                   ((HOLE+RCRCNT)*INCR+START_KEY+INCR-1)/INCR*INCR + 3*512*262144;
      201     3563    3                 END;
      202     3564    2              ELSE START_KEY = ADDR(CURR$KEY.LENGTH#)->NUM+REL*INCR;
      203     3565    2              CALL CHECK_XLATE; /* Get positioned to the first one that matters */
      204     3566    2              END;
      205     3567    1           INCR = REL*INCR; /* Make it easier to use */
      206     3568    1           DELTA = 0;
      207     3569    2           DO UNTIL RCRCNT = 0;
      208     3570    2              CALL VDA$LREAD (DEST_STREAM, , REL, '1'B) ALTRET (LREAD_FAILED);
      209     3571    2              IF REL = 0 THEN REL = 1;
      210     3572    2              CALL VDE$RGET (DEST_STREAM, DEST$ENCLOSING, RECORD)
      211     3573    2                ALTRET (RGET_FAILED);
      212     3574    2              CALL CHECK_XLATE;
      213     3575    2              DEL_RANGE.START.KEY(%LVL_EXT_REC-1) = RECORD.KEY;
      214     3576    2              DEL_RANGE.ENDD.KEY(%LVL_EXT_REC-1) = RECORD.KEY;
      215     3577    2              CALL VDA$LDELETE (DEST_STREAM, DEL_RANGE) ALTRET (LDELETE_FAILED);
      216     3578
      217     3579    2              ADDR(RECORD.KEY.V$) -> NUM = START_KEY;
      218     3580    2              CALL VDE$RPUT (DEST_STREAM, DEST$ENCLOSING, DEST_OPTIONS,
      219     3581    2                RECORD, %SQ_CURRENT) ALTRET (RPUT_FAILED);
      220     3582    2              RCRCNT = RCRCNT - 1;
      221     3583    2              START_KEY = START_KEY + INCR;
      222     3584    2              END;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:7    
      223     3585
      224     3586    1           CALL VDG$XLATE_LOCATIONS (XLATE0$ -> XLATE$TABLE, %XLATE_LOCATION)
      225     3587    1             ALTRET (XLATE_FAILED);
      226     3588    2           DO UNTIL XLATE0$ = ADDR(NIL);
      227     3589    2              XLATE$ = XLATE0$;
      228     3590    2              XLATE0$ = XLATE$TABLE.FLINK$;
      229     3591    2              CALL VDG$OFREE (XLATE$TABLE);
      230     3592    2              END;
      231     3593
      232     3594    1           RETURN;
      233     3595
      234     3596    1   OALLOC_FAILED: ;
      235     3597    1   XLATE_FAILED: ;
      236     3598    1   FREKEY_FAILED: ;
      237     3599    1   LDELETE_FAILED: ;
      238     3600    1   LREAD_FAILED: ;
      239     3601    1   RGET_FAILED: ;
      240     3602    1   RPUT_FAILED: ;
      241     3603    1           ALTRETURN;
      242     3604        %EJECT;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:8    
      243     3605        /*D* NAME: CHECK_XLATE
      244     3606            INPUT:
      245     3607                XLATE$ - points to the last used xlate table set.
      246     3608                XLATEX - is the last used xlate table index.  It goes down if
      247     3609                    REL<0 and up otherwise.
      248     3610                DELTA - set to zero to enable key changing.  Otherwise, just position
      249     3611                    the xlate table to the starting position.
      250     3612            DESCRIPTION:
      251     3613                If RECORD.KEY looks like it makes the next xlate table entry
      252     3614                    get updated, do it and adjust XLATEX and XLATE$ to point to
      253     3615                    the next one.
      254     3616        */
      255     3617
      256     3618    1   CHECK_XLATE: PROC;
      257     3619
      258     3620    3           DO WHILE '1'B;
      259     3621    3              IF XLATE$ = ADDR(NIL) OR XLATEX < 0 THEN RETURN;
      260     3622    3              IF RECORD.KEY.V$~=XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) THEN
      261     3623    3                 IF RECORD.KEY.V$<XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) AND REL>=0
      262     3624    3                   OR RECORD.KEY.V$>XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) AND REL<0
      263     3625    3                 THEN RETURN;
      264     3626
      265     3627    3              IF DELTA=0 THEN
      266     3628    3                 ADDR(XLATE$TABLE.XLATES.NEW_KEY.V$(XLATEX))->NUM = START_KEY;
      267     3629    3              XLATEX = XLATEX + REL;
      268     3630    4              IF XLATEX >= XLATE$TABLE.N_ENTRIES# THEN DO;
      269     3631    4                 XLATE$ = XLATE$TABLE.FLINK$;
      270     3632    4                 XLATEX = 0;
      271     3633    4                 END;
      272     3634    4              IF XLATEX < 0 AND XLATE$ ~= XLATE0$ THEN DO;
      273     3635    4                 LOC.KEY.V$(0) = XLATE$;
      274     3636    4                 XLATE$ = XLATE0$;
      275     3637    5                 DO WHILE '1'B;
      276     3638    5                    XLATEX = XLATE$TABLE.N_ENTRIES# - 1;
      277     3639    5                    IF XLATE$TABLE.FLINK$ = LOC.KEY.V$(0) THEN EXIT;
      278     3640    5                    XLATE$ = XLATE$TABLE.FLINK$;
      279     3641    5                    END;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:9    
      280     3642    4                 END;
      281     3643
      282     3644    3              END;
      283     3645    2   END CHECK_XLATE;
      284     3646
      285     3647    1   END VDI$BAUTO_REKEY;
      286     3648        %EOD;

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:10   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BAUTO_REKEY.

   Procedure VDI$BAUTO_REKEY requires 369 words for executable code.
   Procedure VDI$BAUTO_REKEY requires 60 words of local(AUTO) storage.

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:11   

 Object Unit name= VDI$BAUTO_REKEY                            File name= VDI$BLOCK.:VDA5TOU
 UTS= JUL 04 '97 11:28:06.92 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   369    561  VDI$BAUTO_REKEY
    1  RoData even  none     9     11  VDI$BAUTO_REKEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDI$BAUTO_REKEY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       5 VDA$FREKEY
 yes     yes           Std       3 VDE$RGET
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 VDA$LDELETE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$XLATE_LOCATIONS
 yes     yes           Std       6 VDE$RPUT
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:12   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_$BY                                VD_$REKEY                             VD_CURRENT_WINDOW$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:13   


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        /* VDI$BLOCK - Do block insertion and deletion. */
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P*  NAME: VDI$BLOCK
       12       12            PURPOSE:
       13       13                Do block insertion and deletion.
       14       14            DESCRIPTION:
       15       15                This module contains several external routines:
       16       16
       17       17                VDI$BAUTO_REKEY
       18       18                Attempts to do a localized rekey of a destination, given the source
       19       19                range which must fit into the destination.
       20       20
       21       21                VDI$BDELETE
       22       22                Given a range, will call the accessor to delete
       23       23                the range.  Replaces the first and/or last records of the
       24       24                range if any partial records are to be deleted.
       25       25
       26       26                VDI$BINSERT
       27       27                Given source and destination ranges, insert the source range after
       28       28                the destination range.
       29       29
       30       30                VDI$BTYPE
       31       31                Classifies a given range, returning a %BDT_ ("block descriptor type")
       32       32                code.
       33       33        */
       34       34
       35       35        /*D* NAME: VDI$BAUTO_REKEY
       36       36            PARAMETERS:
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:14   
       37       37                DEST_STREAM - VD$STREAM open to the destination file.
       38       38                DEST_KEY - A VD$KEY_NUMBER after which the hole is to be made.
       39       39                    Goes at %LVL_EXT_REC-1.
       40       40                DEST_OPTIONS - VD$ACCESS_OPTIONS for the destination.
       41       41                    Specifically, DEST_OPTIONS.KEY_INCR should contain the key
       42       42                        increment specifically requested by the user for this
       43       43                        block operation; or %CLEAR to use the default ($BY).
       44       44                SRC_RECS - The number of records that need to be inserted.
       45       45            INPUT:
       46       46            OUTPUT:
       47       47                Any and all record keys stored in 6Edit's internal
       48       48                    files may have been adjusted based on the rekey we just did.  Any
       49       49                    keys or GETKEY pointers you have in auto are suspect, and should
       50       50                    no longer be used.
       51       51            DESCRIPTION:
       52       52                Read forward from the given destination key.  For each record read,
       53       53                    if we were to rekey the record, we would expand the "key space"
       54       54                    (# of keys we could insert between the given destination key and
       55       55                    the existing record just read, if we rekeyed it).  Keep reading
       56       56                    until either:
       57       57                        The expanded key space will accomodate:
       58       58                            The # of source records (approximated above);
       59       59                            + the # of destination records read so far, which will
       60       60                                have to be rekeyed;
       61       61                            That sum * the key increment to use (either given in
       62       62                                DEST_OPTIONS or defaulted from $BY).
       63       63                         - OR -
       64       64                         The number of records we'd have to rekey exceeds the value of
       65       65                            $REKEY.  If this happens, we should give up and just
       66       66                            rekey the entire destination -- Call VDA$FREKEY to do this.
       67       67                    If we found a number of records which, after rekeying them, would
       68       68                        allow us to insert the source block, then go back and
       69       69                        rekey the records, building an XLATE_LOCATIONS structure as
       70       70                        we do to fix up all references to the rekeyed keys.
       71       71        */
       72       72
       73       73        VDI$BAUTO_REKEY: PROC (DEST_STREAM, DEST_KEY, DEST_OPTIONS, SRC_RECS) ALTRET;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:15   

     73  0 000000   000000 700200 xent  VDI$BAUTO_R* TSX0  ! X66_AUTO_4
         0 000001   000074 000004                    ZERO    60,4

       74       74
       75       75
       76       76        %INCLUDE VD_MACROS_M;
       77     2291        %INCLUDE VD_PERR_C;
       78     2439
       79     2440    1   DCL VDA$FREKEY   ENTRY (5) ALTRET;
       80     2441    1   DCL VDA$LDELETE  ENTRY (2) ALTRET;
       81     2442    1   DCL VDA$LREAD    ENTRY (4) ALTRET;
       82     2443    1   DCL VDE$RGET     ENTRY (3) ALTRET;
       83     2444    1   DCL VDE$RPUT     ENTRY (6) ALTRET;
       84     2445    1   DCL VDG$OCOPY    ENTRY (2) ALTRET;
       85     2446    1   DCL VDG$OFREE    ENTRY (1) ALTRET;
       86     2447    1   DCL VDG$OALLOC   ENTRY (3) ALTRET;
       87     2448    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
       88     2449
       89     2450        %VD$RANGE (NAME=DEST$ENCLOSING, STCLASS="BASED(DEST_ENCLOSING$)");
       90     2519        %VD$KEY_NUMBER (NAME=CURR$KEY, STCLASS="BASED(CURR_KEY$)");
       91     2534        %VD$XLATE_LOCATIONS (NAME=XLATE$TABLE, STCLASS="BASED(XLATE$)");
       92     2670        %VD$BLOCK_DESC;
       93     2817        %VD$FILE_NODE;
       94     2910        %VD$WINDOW_SPEC;
       95     2976        %VD$TEXTC_REMOTE;
       96     3037    1   DCL NUM SBIN BASED ALIGNED;
       97     3038        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
       98     3144        %VD$KEY_NUMBER (NAME=DEST_KEY, STCLASS=PARAM);
       99     3159        %VD$ACCESS_OPTIONS (NAME=DEST_OPTIONS, STCLASS=PARAM);
      100     3188    1   DCL SRC_RECS SBIN;
      101     3189    1   DCL REL SBIN;
      102     3190    1   DCL CURR_KEY$ PTR;
      103     3191    1   DCL XLATE$ PTR;
      104     3192    1   DCL XLATEX SBIN;
      105     3193    1   DCL XLATE0$ PTR;
      106     3194    1   DCL DELTA SBIN;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:16   
      107     3195    1   DCL INCR SBIN;
      108     3196    1   DCL HOLE SBIN;
      109     3197    1   DCL RCRCNT SBIN;
      110     3198    1   DCL START_KEY SBIN;
      111     3199    1   DCL DEST_ENCLOSING$ PTR;
      112     3200        %VD$LOCATION (NAME=LOC, STCLASS=AUTO);
      113     3228        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      114     3297        %VD$NODE_DESC (NAME=RECORD, STCLASS=AUTO);
      115     3339
      116     3340
      117     3341        %VD_6E (STCLASS=SYMREF);
      118     3377        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
      119     3422        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
      120     3467    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      121     3468
      122     3469
      123     3470
      124     3471    1           HOLE = SRC_RECS;

   3471  0 000002   200006 470500                    LDP0    @SRC_RECS,,AUTO
         0 000003   000000 235100                    LDA     0,,PR0
         0 000004   200016 755100                    STA     HOLE,,AUTO

      125     3472    1           INCR = ADDR(DEST_OPTIONS.KEY_INCR)->CURR$KEY.BYTES#;

   3472  0 000005   200005 471500                    LDP1    @DEST_OPTIONS,,AUTO
         0 000006   100004 236100                    LDQ     4,,PR1
         0 000007   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000010   200015 756100                    STQ     INCR,,AUTO

      126     3473    1           IF INCR = 0 THEN INCR = VD_$BY.V#;

   3473  0 000011   000014 601000 0                  TNZ     s:3474

   3473  0 000012   000003 235000 xsym               LDA     VD_$BY+3
         0 000013   200015 755100                    STA     INCR,,AUTO

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:17   
      127     3474    1           CURR_KEY$ = ADDR(DEST_STREAM.CURRENT.KEY(%LVL_EXT_REC-1));

   3474  0 000014   200003 236100                    LDQ     @DEST_STREAM,,AUTO
         0 000015   000006 036003                    ADLQ    6,DU
         0 000016   200010 756100                    STQ     CURR_KEY$,,AUTO

      128     3475    1           START_KEY = DEST_KEY.BYTES#;

   3475  0 000017   200004 473500                    LDP3    @DEST_KEY,,AUTO
         0 000020   300001 236100                    LDQ     1,,PR3
         0 000021   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000022   200020 756100                    STQ     START_KEY,,AUTO

      129     3476    1           REL = 3;

   3476  0 000023   000003 235007                    LDA     3,DL
         0 000024   200007 755100                    STA     REL,,AUTO

      130     3477    2           DO UNTIL REL < 0;

      131     3478    2              REL = REL - 2;

   3478  0 000025   000002 336007                    LCQ     2,DL
         0 000026   200007 056100                    ASQ     REL,,AUTO

      132     3479    2              RCRCNT = 0;

   3479  0 000027   200017 450100                    STZ     RCRCNT,,AUTO

      133     3480    2              LOC = DEST_STREAM.CURRENT;

   3480  0 000030   200003 470500                    LDP0    @DEST_STREAM,,AUTO
         0 000031   000100 100500                    MLR     fill='000'O
         0 000032   000006 000044                    ADSC9   6,,PR0                   cn=0,n=36
         0 000033   200022 000044                    ADSC9   LOC,,AUTO                cn=0,n=36

      134     3481    2              LOC.KEY(%LVL_EXT_REC-1) = DEST_KEY;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:18   

   3481  0 000034   200004 471500                    LDP1    @DEST_KEY,,AUTO
         0 000035   000100 100500                    MLR     fill='000'O
         0 000036   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         0 000037   200022 000010                    ADSC9   LOC,,AUTO                cn=0,n=8

      135     3482    3              DO UNTIL RCRCNT >= VD_$REKEY.V#;

      136     3483    3                 CALL VDA$LREAD (DEST_STREAM, LOC, REL, '0'B)

   3483  0 000040   000000 236000 1                  LDQ     0
         0 000041   200071 756100                    STQ     RECORD+12,,AUTO
         0 000042   200007 630500                    EPPR0   REL,,AUTO
         0 000043   200070 450500                    STP0    RECORD+11,,AUTO
         0 000044   200022 631500                    EPPR1   LOC,,AUTO
         0 000045   200067 451500                    STP1    RECORD+10,,AUTO
         0 000046   200003 236100                    LDQ     @DEST_STREAM,,AUTO
         0 000047   200066 756100                    STQ     RECORD+9,,AUTO
         0 000050   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000051   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000052   000000 701000 xent               TSX1    VDA$LREAD
         0 000053   000464 702000 0                  TSX2    OALLOC_FAILED

      137     3484    3                   ALTRET (LREAD_FAILED);
      138     3485    3                 IF DEST_STREAM.CURRENT.EOF THEN

   3485  0 000054   200003 470500                    LDP0    @DEST_STREAM,,AUTO
         0 000055   000016 236100                    LDQ     14,,PR0
         0 000056   400000 316007                    CANQ    -131072,DL
         0 000057   000063 600000 0                  TZE     s:3487

      139     3486    3                    DELTA = %MX_EDITKEY;

   3486  0 000060   000001 235000 1                  LDA     1
         0 000061   200014 755100                    STA     DELTA,,AUTO
         0 000062   000075 710000 0                  TRA     s:3491

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:19   
      140     3487    3                 ELSE IF CURR$KEY = LOC.KEY(%LVL_EXT_REC-1) THEN

   3487  0 000063   200010 471500                    LDP1    CURR_KEY$,,AUTO
         0 000064   000100 106500                    CMPC    fill='000'O
         0 000065   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         0 000066   200022 000010                    ADSC9   LOC,,AUTO                cn=0,n=8
         0 000067   000072 601000 0                  TNZ     s:3490

      141     3488    3                       DELTA = 0;

   3488  0 000070   200014 450100                    STZ     DELTA,,AUTO
         0 000071   000075 710000 0                  TRA     s:3491

      142     3489    3                    ELSE
      143     3490    3                       DELTA = CURR$KEY.BYTES#;

   3490  0 000072   100001 236100                    LDQ     1,,PR1
         0 000073   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000074   200014 756100                    STQ     DELTA,,AUTO

      144     3491    3                 DELTA = REL * (DELTA - START_KEY);

   3491  0 000075   200014 236100                    LDQ     DELTA,,AUTO
         0 000076   200020 136100                    SBLQ    START_KEY,,AUTO
         0 000077   200007 402100                    MPY     REL,,AUTO
         0 000100   200014 756100                    STQ     DELTA,,AUTO

      145     3492    3                 IF DELTA/INCR > HOLE + RCRCNT THEN GOTO DO_IT;

   3492  0 000101   200015 506100                    DIV     INCR,,AUTO
         0 000102   200066 756100                    STQ     RECORD+9,,AUTO
         0 000103   200016 236100                    LDQ     HOLE,,AUTO
         0 000104   200017 036100                    ADLQ    RCRCNT,,AUTO
         0 000105   200066 116100                    CMPQ    RECORD+9,,AUTO
         0 000106   000164 604000 0                  TMI     DO_IT

      146     3493    3                 IF DELTA*RCRCNT/1000 > HOLE + RCRCNT THEN GOTO DO_IT_ADJUSTED;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:20   

   3493  0 000107   200014 236100                    LDQ     DELTA,,AUTO
         0 000110   200017 402100                    MPY     RCRCNT,,AUTO
         0 000111   001750 506007                    DIV     1000,DL
         0 000112   200066 756100                    STQ     RECORD+9,,AUTO
         0 000113   200016 236100                    LDQ     HOLE,,AUTO
         0 000114   200017 036100                    ADLQ    RCRCNT,,AUTO
         0 000115   200066 116100                    CMPQ    RECORD+9,,AUTO
         0 000116   000150 604000 0                  TMI     DO_IT_ADJUSTED

      147     3494    3                 LOC.KEY(%LVL_EXT_REC-1) = CURR$KEY;

   3494  0 000117   200010 471500                    LDP1    CURR_KEY$,,AUTO
         0 000120   000100 100500                    MLR     fill='000'O
         0 000121   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         0 000122   200022 000010                    ADSC9   LOC,,AUTO                cn=0,n=8

      148     3495    3                 RCRCNT = RCRCNT + 1;

   3495  0 000123   200017 054100                    AOS     RCRCNT,,AUTO

      149     3496    3                 END;

   3496  0 000124   200017 236100                    LDQ     RCRCNT,,AUTO
         0 000125   000003 116000 xsym               CMPQ    VD_$REKEY+3
         0 000126   000040 604000 0                  TMI     s:3483

      150     3497    2              END;

   3497  0 000127   200007 235100                    LDA     REL,,AUTO
         0 000130   000025 605000 0                  TPL     s:3478

      151     3498
      152     3499                /*
      153     3500                Couldn't find enough space either way.  Rekey the whole thing.
      154     3501                */
      155     3502
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:21   
      156     3503    1           CALL VDA$FREKEY (DEST_STREAM, DEST_STREAM, DEST_OPTIONS.KEY_INCR,

   3503  0 000131   200004 236100                    LDQ     @DEST_KEY,,AUTO
         0 000132   200072 756100                    STQ     RECORD+13,,AUTO
         0 000133   200016 633500                    EPPR3   HOLE,,AUTO
         0 000134   200071 453500                    STP3    RECORD+12,,AUTO
         0 000135   200005 236100                    LDQ     @DEST_OPTIONS,,AUTO
         0 000136   000003 036003                    ADLQ    3,DU
         0 000137   200070 756100                    STQ     RECORD+11,,AUTO
         0 000140   200003 236100                    LDQ     @DEST_STREAM,,AUTO
         0 000141   200003 235100                    LDA     @DEST_STREAM,,AUTO
         0 000142   200066 757100                    STAQ    RECORD+9,,AUTO
         0 000143   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000144   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000145   000000 701000 xent               TSX1    VDA$FREKEY
         0 000146   000464 702000 0                  TSX2    OALLOC_FAILED

      157     3504    1             HOLE, DEST_KEY) ALTRET (FREKEY_FAILED);
      158     3505    1           RETURN;

   3505  0 000147   000000 702200 xent               TSX2  ! X66_ARET

   3503  0 000150                       DO_IT_ADJUS* null
      159     3506
      160     3507    1   DO_IT_ADJUSTED: ;
      161     3508    1           INCR = 1000/RCRCNT;

   3508  0 000150   001750 236007                    LDQ     1000,DL
         0 000151   200017 506100                    DIV     RCRCNT,,AUTO
         0 000152   200015 756100                    STQ     INCR,,AUTO

      162     3509    1           IF INCR>10 THEN IF INCR>100 THEN INCR = 100; ELSE INCR = 10;

   3509  0 000153   000012 116007                    CMPQ    10,DL
         0 000154   000164 604400 0                  TMOZ    DO_IT

   3509  0 000155   000144 116007                    CMPQ    100,DL
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:22   
         0 000156   000162 604400 0                  TMOZ    s:3509+7

   3509  0 000157   000144 235007                    LDA     100,DL
         0 000160   200015 755100                    STA     INCR,,AUTO
         0 000161   000164 710000 0                  TRA     DO_IT

   3509  0 000162   000012 235007                    LDA     10,DL
         0 000163   200015 755100                    STA     INCR,,AUTO

   3509  0 000164                       DO_IT        null
      163     3510    1   DO_IT:  ;
      164     3511    1           DEST_ENCLOSING$ = ADDR(VD_CURRENT_WINDOW$-> VD$FILE_NODE.DESC.SPEC.V$->

   3511  0 000164   000000 471400 xsym               LDP1    VD_CURRENT_WINDOW$
         0 000165   100007 473500                    LDP3    7,,PR1
         0 000166   300012 474500                    LDP4    10,,PR3
         0 000167   400003 635500                    EPPR5   3,,PR4
         0 000170   200021 455500                    STP5    DEST_ENCLOSING$,,AUTO

      165     3512    1             VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$-> VD$BLOCK_DESC.RANGE);
      166     3513                /*
      167     3514                *   Build the xlate tables for all current file refs.
      168     3515                */
      169     3516    1           CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, XLATE0$, SIZEW(XLATE$TABLE) +

   3516  0 000171   000004 236000 1                  LDQ     4
         0 000172   200070 756100                    STQ     RECORD+11,,AUTO
         0 000173   200013 633500                    EPPR3   XLATE0$,,AUTO
         0 000174   200067 453500                    STP3    RECORD+10,,AUTO
         0 000175   000005 236000 1                  LDQ     5
         0 000176   200066 756100                    STQ     RECORD+9,,AUTO
         0 000177   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000200   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000201   000000 701000 xent               TSX1    VDG$OALLOC
         0 000202   000464 702000 0                  TSX2    OALLOC_FAILED

      170     3517    1             %N_LOCATION_XLATES * SIZEW(XLATE$TABLE.XLATES)) ALTRET(OALLOC_FAILED);
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:23   
      171     3518    1           XLATE$ = XLATE0$;

   3518  0 000203   200013 236100                    LDQ     XLATE0$,,AUTO
         0 000204   200011 756100                    STQ     XLATE$,,AUTO

      172     3519                %COPYKEY (FKEY=DEST_STREAM.FILE_KEY, TKEY=XLATE$TABLE.FILE_KEY);

   3532  0 000205   200003 470500                    LDP0    @DEST_STREAM,,AUTO
         0 000206   200011 471500                    LDP1    XLATE$,,AUTO
         0 000207   000100 100500                    MLR     fill='000'O
         0 000210   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         0 000211   100003 000010                    ADSC9   3,,PR1                   cn=0,n=8

   3532  0 000212   000004 720100                    LXL0    4,,PR0
         0 000213   000002 100003                    CMPX0   2,DU
         0 000214   000227 601000 0                  TNZ     s:3535

   3532  0 000215   000005 473500                    LDP3    5,,PR0
         0 000216   000004 036003                    ADLQ    4,DU
         0 000217   200067 756100                    STQ     RECORD+10,,AUTO
         0 000220   200066 453500                    STP3    RECORD+9,,AUTO
         0 000221   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000222   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000223   000000 701000 xent               TSX1    VDG$OCOPY
         0 000224   000226 702000 0                  TSX2    s:3533
         0 000225   000227 710000 0                  TRA     s:3535

   3533  0 000226   000000 702200 xent               TSX2  ! X66_AALT

      173     3535    1           XLATE$TABLE.LEVEL# = %LVL_EXT_REC;

   3535  0 000227   000001 220003                    LDX0    1,DU
         0 000230   200011 470500                    LDP0    XLATE$,,AUTO
         0 000231   000005 740100                    STX0    5,,PR0

      174     3536
      175     3537    1           CALL VDG$XLATE_LOCATIONS (XLATE$TABLE, %XLATE_BUILD)
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:24   

   3537  0 000232   000006 236000 1                  LDQ     6
         0 000233   200011 235100                    LDA     XLATE$,,AUTO
         0 000234   200066 757100                    STAQ    RECORD+9,,AUTO
         0 000235   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000236   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000237   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         0 000240   000464 702000 0                  TSX2    OALLOC_FAILED

      176     3538    1             ALTRET(XLATE_FAILED);
      177     3539
      178     3540    2           IF REL>0 THEN DO WHILE '1'B;

   3540  0 000241   200007 235100                    LDA     REL,,AUTO
         0 000242   000256 604400 0                  TMOZ    s:3545

      179     3541    2              XLATEX = XLATE$TABLE.N_ENTRIES# - 1;

   3541  0 000243   200011 470500                    LDP0    XLATE$,,AUTO
         0 000244   000001 236100                    LDQ     1,,PR0
         0 000245   000022 732000                    QRS     18
         0 000246   000001 136007                    SBLQ    1,DL
         0 000247   200012 756100                    STQ     XLATEX,,AUTO

      180     3542    2              IF XLATE$TABLE.FLINK$ = ADDR(NIL) THEN EXIT;

   3542  0 000250   000002 236100                    LDQ     2,,PR0
         0 000251   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000252   000255 600000 0                  TZE     s:3544+1

      181     3543    2              XLATE$ = XLATE$TABLE.FLINK$;

   3543  0 000253   200011 756100                    STQ     XLATE$,,AUTO

      182     3544    2              END;

   3544  0 000254   000243 710000 0                  TRA     s:3541
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:25   
         0 000255   000257 710000 0                  TRA     s:3547

      183     3545    1           ELSE XLATEX = 0;

   3545  0 000256   200012 450100                    STZ     XLATEX,,AUTO

      184     3546
      185     3547    1           IF REL<0 THEN RCRCNT = RCRCNT+1;

   3547  0 000257   200007 235100                    LDA     REL,,AUTO
         0 000260   000262 605000 0                  TPL     s:3549

   3547  0 000261   200017 054100                    AOS     RCRCNT,,AUTO

      186     3548
      187     3549    1           REL = -REL;

   3549  0 000262   000000 531000                    NEG     0
         0 000263   200007 755100                    STA     REL,,AUTO

      188     3550    1           DEL_RANGE = %CLEAR;

   3550  0 000264   000100 100400                    MLR     fill='000'O
         0 000265   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000266   200033 000110                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=72

      189     3551    1           RECORD = %CLEAR;

   3551  0 000267   000100 100400                    MLR     fill='000'O
         0 000270   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000271   200055 000030                    ADSC9   RECORD,,AUTO             cn=0,n=24

      190     3552    1           RECORD.KEY = CURR$KEY;

   3552  0 000272   200010 470500                    LDP0    CURR_KEY$,,AUTO
         0 000273   000100 100500                    MLR     fill='000'O
         0 000274   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:26   
         0 000275   200055 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8

      191     3553    2           IF CURR$KEY = LOC.KEY(%LVL_EXT_REC-1) /* BOF */ THEN DO;

   3553  0 000276   000100 106500                    CMPC    fill='000'O
         0 000277   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         0 000300   200022 000010                    ADSC9   LOC,,AUTO                cn=0,n=8
         0 000301   000307 601000 0                  TNZ     s:3558

      192     3554    2              START_KEY = INCR + 3*512*262144;

   3554  0 000302   200015 236100                    LDQ     INCR,,AUTO
         0 000303   003000 036003                    ADLQ    1536,DU
         0 000304   200020 756100                    STQ     START_KEY,,AUTO

      193     3555    2              REL = 0;  /* Can't skip from BOF, we'll miss the first record */

   3555  0 000305   200007 450100                    STZ     REL,,AUTO

      194     3556    2              END;

   3556  0 000306   000336 710000 0                  TRA     s:3567

      195     3557    2           ELSE DO;

      196     3558    3              IF DEST_STREAM.CURRENT.EOF THEN DO;

   3558  0 000307   200003 471500                    LDP1    @DEST_STREAM,,AUTO
         0 000310   100016 236100                    LDQ     14,,PR1
         0 000311   400000 316007                    CANQ    -131072,DL
         0 000312   000330 600000 0                  TZE     s:3564

      197     3559    3                 ADDR(RECORD.KEY) -> CURR$KEY.LENGTH# = 4; /* Make a big key */

   3559  0 000313   004000 236003                    LDQ     2048,DU
         0 000314   200056 552140                    STBQ    RECORD+1,'40'O,AUTO

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:27   
      198     3560                      /* Use nice numbers if possible */
      199     3561    3                 START_KEY =

   3561  0 000315   200016 236100                    LDQ     HOLE,,AUTO
         0 000316   200017 036100                    ADLQ    RCRCNT,,AUTO
         0 000317   200015 402100                    MPY     INCR,,AUTO
         0 000320   200020 036100                    ADLQ    START_KEY,,AUTO
         0 000321   200015 036100                    ADLQ    INCR,,AUTO
         0 000322   000001 136007                    SBLQ    1,DL
         0 000323   200015 506100                    DIV     INCR,,AUTO
         0 000324   200015 402100                    MPY     INCR,,AUTO
         0 000325   003000 036003                    ADLQ    1536,DU
         0 000326   200020 756100                    STQ     START_KEY,,AUTO

      200     3562    3                   ((HOLE+RCRCNT)*INCR+START_KEY+INCR-1)/INCR*INCR + 3*512*262144;
      201     3563    3                 END;

   3563  0 000327   000334 710000 0                  TRA     s:3565

      202     3564    2              ELSE START_KEY = ADDR(CURR$KEY.LENGTH#)->NUM+REL*INCR;

   3564  0 000330   200007 236100                    LDQ     REL,,AUTO
         0 000331   200015 402100                    MPY     INCR,,AUTO
         0 000332   000001 036100                    ADLQ    1,,PR0
         0 000333   200020 756100                    STQ     START_KEY,,AUTO

      203     3565    2              CALL CHECK_XLATE; /* Get positioned to the first one that matters */

   3565  0 000334   000465 701000 0                  TSX1    CHECK_XLATE
         0 000335   000000 011000                    NOP     0

      204     3566    2              END;

      205     3567    1           INCR = REL*INCR; /* Make it easier to use */

   3567  0 000336   200007 236100                    LDQ     REL,,AUTO
         0 000337   200015 402100                    MPY     INCR,,AUTO
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:28   
         0 000340   200015 756100                    STQ     INCR,,AUTO

      206     3568    1           DELTA = 0;

   3568  0 000341   200014 450100                    STZ     DELTA,,AUTO

      207     3569    2           DO UNTIL RCRCNT = 0;

      208     3570    2              CALL VDA$LREAD (DEST_STREAM, , REL, '1'B) ALTRET (LREAD_FAILED);

   3570  0 000342   000007 236000 1                  LDQ     7
         0 000343   200071 756100                    STQ     RECORD+12,,AUTO
         0 000344   200007 630500                    EPPR0   REL,,AUTO
         0 000345   200070 450500                    STP0    RECORD+11,,AUTO
         0 000346   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000347   200003 235100                    LDA     @DEST_STREAM,,AUTO
         0 000350   200066 757100                    STAQ    RECORD+9,,AUTO
         0 000351   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000352   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000353   000000 701000 xent               TSX1    VDA$LREAD
         0 000354   000464 702000 0                  TSX2    OALLOC_FAILED

      209     3571    2              IF REL = 0 THEN REL = 1;

   3571  0 000355   200007 235100                    LDA     REL,,AUTO
         0 000356   000361 601000 0                  TNZ     s:3572

   3571  0 000357   000001 236007                    LDQ     1,DL
         0 000360   200007 756100                    STQ     REL,,AUTO

      210     3572    2              CALL VDE$RGET (DEST_STREAM, DEST$ENCLOSING, RECORD)

   3572  0 000361   200055 630500                    EPPR0   RECORD,,AUTO
         0 000362   200070 450500                    STP0    RECORD+11,,AUTO
         0 000363   200021 236100                    LDQ     DEST_ENCLOSING$,,AUTO
         0 000364   200003 235100                    LDA     @DEST_STREAM,,AUTO
         0 000365   200066 757100                    STAQ    RECORD+9,,AUTO
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:29   
         0 000366   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000367   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000370   000000 701000 xent               TSX1    VDE$RGET
         0 000371   000464 702000 0                  TSX2    OALLOC_FAILED

      211     3573    2                ALTRET (RGET_FAILED);
      212     3574    2              CALL CHECK_XLATE;

   3574  0 000372   000465 701000 0                  TSX1    CHECK_XLATE
         0 000373   000000 011000                    NOP     0

      213     3575    2              DEL_RANGE.START.KEY(%LVL_EXT_REC-1) = RECORD.KEY;

   3575  0 000374   000100 100500                    MLR     fill='000'O
         0 000375   200055 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         0 000376   200033 000010                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=8

      214     3576    2              DEL_RANGE.ENDD.KEY(%LVL_EXT_REC-1) = RECORD.KEY;

   3576  0 000377   000100 100500                    MLR     fill='000'O
         0 000400   200055 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         0 000401   200044 000010                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=8

      215     3577    2              CALL VDA$LDELETE (DEST_STREAM, DEL_RANGE) ALTRET (LDELETE_FAILED);

   3577  0 000402   200033 630500                    EPPR0   DEL_RANGE,,AUTO
         0 000403   200067 450500                    STP0    RECORD+10,,AUTO
         0 000404   200003 236100                    LDQ     @DEST_STREAM,,AUTO
         0 000405   200066 756100                    STQ     RECORD+9,,AUTO
         0 000406   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000407   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000410   000000 701000 xent               TSX1    VDA$LDELETE
         0 000411   000464 702000 0                  TSX2    OALLOC_FAILED

      216     3578
      217     3579    2              ADDR(RECORD.KEY.V$) -> NUM = START_KEY;

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:30   
   3579  0 000412   200020 235100                    LDA     START_KEY,,AUTO
         0 000413   200056 755100                    STA     RECORD+1,,AUTO

      218     3580    2              CALL VDE$RPUT (DEST_STREAM, DEST$ENCLOSING, DEST_OPTIONS,

   3580  0 000414   000010 236000 1                  LDQ     8
         0 000415   200072 756100                    STQ     RECORD+13,,AUTO
         0 000416   200055 630500                    EPPR0   RECORD,,AUTO
         0 000417   200071 450500                    STP0    RECORD+12,,AUTO
         0 000420   200005 236100                    LDQ     @DEST_OPTIONS,,AUTO
         0 000421   200070 756100                    STQ     RECORD+11,,AUTO
         0 000422   200021 236100                    LDQ     DEST_ENCLOSING$,,AUTO
         0 000423   200003 235100                    LDA     @DEST_STREAM,,AUTO
         0 000424   200066 757100                    STAQ    RECORD+9,,AUTO
         0 000425   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000426   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000427   000000 701000 xent               TSX1    VDE$RPUT
         0 000430   000464 702000 0                  TSX2    OALLOC_FAILED

      219     3581    2                RECORD, %SQ_CURRENT) ALTRET (RPUT_FAILED);
      220     3582    2              RCRCNT = RCRCNT - 1;

   3582  0 000431   000001 336007                    LCQ     1,DL
         0 000432   200017 056100                    ASQ     RCRCNT,,AUTO

      221     3583    2              START_KEY = START_KEY + INCR;

   3583  0 000433   200020 236100                    LDQ     START_KEY,,AUTO
         0 000434   200015 036100                    ADLQ    INCR,,AUTO
         0 000435   200020 756100                    STQ     START_KEY,,AUTO

      222     3584    2              END;

   3584  0 000436   200017 235100                    LDA     RCRCNT,,AUTO
         0 000437   000342 601000 0                  TNZ     s:3570

      223     3585
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:31   
      224     3586    1           CALL VDG$XLATE_LOCATIONS (XLATE0$ -> XLATE$TABLE, %XLATE_LOCATION)

   3586  0 000440   000010 236000 1                  LDQ     8
         0 000441   200013 235100                    LDA     XLATE0$,,AUTO
         0 000442   200066 757100                    STAQ    RECORD+9,,AUTO
         0 000443   200066 630500                    EPPR0   RECORD+9,,AUTO
         0 000444   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000445   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         0 000446   000464 702000 0                  TSX2    OALLOC_FAILED

      225     3587    1             ALTRET (XLATE_FAILED);
      226     3588    2           DO UNTIL XLATE0$ = ADDR(NIL);

      227     3589    2              XLATE$ = XLATE0$;

   3589  0 000447   200013 236100                    LDQ     XLATE0$,,AUTO
         0 000450   200011 756100                    STQ     XLATE$,,AUTO

      228     3590    2              XLATE0$ = XLATE$TABLE.FLINK$;

   3590  0 000451   200011 470500                    LDP0    XLATE$,,AUTO
         0 000452   000002 236100                    LDQ     2,,PR0
         0 000453   200013 756100                    STQ     XLATE0$,,AUTO

      229     3591    2              CALL VDG$OFREE (XLATE$TABLE);

   3591  0 000454   200011 630500                    EPPR0   XLATE$,,AUTO
         0 000455   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000456   000000 701000 xent               TSX1    VDG$OFREE
         0 000457   000000 011000                    NOP     0

      230     3592    2              END;

   3592  0 000460   200013 236100                    LDQ     XLATE0$,,AUTO
         0 000461   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000462   000447 601000 0                  TNZ     s:3589

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:32   
      231     3593
      232     3594    1           RETURN;

   3594  0 000463   000000 702200 xent               TSX2  ! X66_ARET

   3589  0 000464                       OALLOC_FAIL* null
   3589  0 000464                       XLATE_FAILED null
   3589  0 000464                       FREKEY_FAIL* null
   3589  0 000464                       LDELETE_FAI* null
   3589  0 000464                       LREAD_FAILED null
   3589  0 000464                       RGET_FAILED  null
   3589  0 000464                       RPUT_FAILED  null
      233     3595
      234     3596    1   OALLOC_FAILED: ;
      235     3597    1   XLATE_FAILED: ;
      236     3598    1   FREKEY_FAILED: ;
      237     3599    1   LDELETE_FAILED: ;
      238     3600    1   LREAD_FAILED: ;
      239     3601    1   RGET_FAILED: ;
      240     3602    1   RPUT_FAILED: ;
      241     3603    1           ALTRETURN;

   3603  0 000464   000000 702200 xent               TSX2  ! X66_AALT

      242     3604        %EJECT;
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:33   
      243     3605        /*D* NAME: CHECK_XLATE
      244     3606            INPUT:
      245     3607                XLATE$ - points to the last used xlate table set.
      246     3608                XLATEX - is the last used xlate table index.  It goes down if
      247     3609                    REL<0 and up otherwise.
      248     3610                DELTA - set to zero to enable key changing.  Otherwise, just position
      249     3611                    the xlate table to the starting position.
      250     3612            DESCRIPTION:
      251     3613                If RECORD.KEY looks like it makes the next xlate table entry
      252     3614                    get updated, do it and adjust XLATEX and XLATE$ to point to
      253     3615                    the next one.
      254     3616        */
      255     3617
      256     3618    1   CHECK_XLATE: PROC;

   3618  0 000465   200064 741300       CHECK_XLATE  STX1  ! RECORD+7,,AUTO

      257     3619
      258     3620    3           DO WHILE '1'B;

      259     3621    3              IF XLATE$ = ADDR(NIL) OR XLATEX < 0 THEN RETURN;

   3621  0 000466   200011 236100                    LDQ     XLATE$,,AUTO
         0 000467   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000470   000473 600000 0                  TZE     s:3621+5
         0 000471   200012 235100                    LDA     XLATEX,,AUTO
         0 000472   000475 605000 0                  TPL     s:3622

   3621  0 000473   200064 221300                    LDX1  ! RECORD+7,,AUTO
         0 000474   000001 702211                    TSX2  ! 1,X1

      260     3622    3              IF RECORD.KEY.V$~=XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) THEN

   3622  0 000475   000003 735000                    ALS     3
         0 000476   200011 470500                    LDP0    XLATE$,,AUTO
         0 000477   200056 236100                    LDQ     RECORD+1,,AUTO
         0 000500   000020 116105                    CMPQ    16,AL,PR0
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:34   
         0 000501   000516 600000 0                  TZE     s:3627

      261     3623    3                 IF RECORD.KEY.V$<XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) AND REL>=0

   3623  0 000502   000505 603000 0                  TRC     s:3623+3
         0 000503   200007 235100                    LDA     REL,,AUTO
         0 000504   000514 605000 0                  TPL     s:3625
         0 000505   200012 235100                    LDA     XLATEX,,AUTO
         0 000506   000003 735000                    ALS     3
         0 000507   000020 116105                    CMPQ    16,AL,PR0
         0 000510   000516 602000 0                  TNC     s:3627
         0 000511   000516 600000 0                  TZE     s:3627
         0 000512   200007 235100                    LDA     REL,,AUTO
         0 000513   000516 605000 0                  TPL     s:3627

      262     3624    3                   OR RECORD.KEY.V$>XLATE$TABLE.XLATES.OLD_KEY_LO.V$(XLATEX) AND REL<0
      263     3625    3                 THEN RETURN;

   3625  0 000514   200064 221300                    LDX1  ! RECORD+7,,AUTO
         0 000515   000001 702211                    TSX2  ! 1,X1

      264     3626
      265     3627    3              IF DELTA=0 THEN

   3627  0 000516   200014 235100                    LDA     DELTA,,AUTO
         0 000517   000524 601000 0                  TNZ     s:3629

      266     3628    3                 ADDR(XLATE$TABLE.XLATES.NEW_KEY.V$(XLATEX))->NUM = START_KEY;

   3628  0 000520   200012 235100                    LDA     XLATEX,,AUTO
         0 000521   000003 735000                    ALS     3
         0 000522   200020 236100                    LDQ     START_KEY,,AUTO
         0 000523   000025 756105                    STQ     21,AL,PR0

      267     3629    3              XLATEX = XLATEX + REL;

   3629  0 000524   200012 236100                    LDQ     XLATEX,,AUTO
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:35   
         0 000525   200007 036100                    ADLQ    REL,,AUTO
         0 000526   200012 756100                    STQ     XLATEX,,AUTO

      268     3630    4              IF XLATEX >= XLATE$TABLE.N_ENTRIES# THEN DO;

   3630  0 000527   000001 236100                    LDQ     1,,PR0
         0 000530   000022 732000                    QRS     18
         0 000531   200012 116100                    CMPQ    XLATEX,,AUTO
         0 000532   000536 605400 0                  TPNZ    s:3634

      269     3631    4                 XLATE$ = XLATE$TABLE.FLINK$;

   3631  0 000533   000002 236100                    LDQ     2,,PR0
         0 000534   200011 756100                    STQ     XLATE$,,AUTO

      270     3632    4                 XLATEX = 0;

   3632  0 000535   200012 450100                    STZ     XLATEX,,AUTO

      271     3633    4                 END;

      272     3634    4              IF XLATEX < 0 AND XLATE$ ~= XLATE0$ THEN DO;

   3634  0 000536   200012 235100                    LDA     XLATEX,,AUTO
         0 000537   000466 605000 0                  TPL     s:3621
         0 000540   200011 236100                    LDQ     XLATE$,,AUTO
         0 000541   200013 116100                    CMPQ    XLATE0$,,AUTO
         0 000542   000466 600000 0                  TZE     s:3621

      273     3635    4                 LOC.KEY.V$(0) = XLATE$;

   3635  0 000543   200023 756100                    STQ     LOC+1,,AUTO

      274     3636    4                 XLATE$ = XLATE0$;

   3636  0 000544   200013 236100                    LDQ     XLATE0$,,AUTO
         0 000545   200011 756100                    STQ     XLATE$,,AUTO
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:36   

      275     3637    5                 DO WHILE '1'B;

      276     3638    5                    XLATEX = XLATE$TABLE.N_ENTRIES# - 1;

   3638  0 000546   200011 470500                    LDP0    XLATE$,,AUTO
         0 000547   000001 236100                    LDQ     1,,PR0
         0 000550   000022 732000                    QRS     18
         0 000551   000001 136007                    SBLQ    1,DL
         0 000552   200012 756100                    STQ     XLATEX,,AUTO

      277     3639    5                    IF XLATE$TABLE.FLINK$ = LOC.KEY.V$(0) THEN EXIT;

   3639  0 000553   000002 236100                    LDQ     2,,PR0
         0 000554   200023 116100                    CMPQ    LOC+1,,AUTO
         0 000555   000560 600000 0                  TZE     s:3644

      278     3640    5                    XLATE$ = XLATE$TABLE.FLINK$;

   3640  0 000556   200011 756100                    STQ     XLATE$,,AUTO

      279     3641    5                    END;

   3641  0 000557   000546 710000 0                  TRA     s:3638

      280     3642    4                 END;

      281     3643
      282     3644    3              END;

   3644  0 000560   000466 710000 0                  TRA     s:3621
      283     3645    2   END CHECK_XLATE;
      284     3646
      285     3647    1   END VDI$BAUTO_REKEY;
      286     3648        %EOD;

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:37   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BAUTO_REKEY.
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:38   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DEST_KEY                  5-0-0/w PTR         r     1 @DEST_OPTIONS
     3-0-0/w PTR         r     1 @DEST_STREAM               6-0-0/w PTR         r     1 @SRC_RECS
    10-0-0/w PTR         r     1 CURR_KEY$                 14-0-0/w SBIN        r     1 DELTA
    33-0-0/w STRC(648)   r     1 DEL_RANGE                 21-0-0/w PTR         r     1 DEST_ENCLOSING$
    *0-0-0/w STRC(72)    r     1 DEST_KEY                  *0-0-0/w STRC(180)   r     1 DEST_OPTIONS
    *0-0-0/w STRC(864)   r     1 DEST_STREAM               16-0-0/w SBIN        r     1 HOLE
    15-0-0/w SBIN        r     1 INCR                      22-0-0/w STRC(324)   r     1 LOC
    17-0-0/w SBIN        r     1 RCRCNT                    55-0-0/w STRC(216)   r     1 RECORD
     7-0-0/w SBIN        r     1 REL                       *0-0-0/w SBIN        r     1 SRC_RECS
    20-0-0/w SBIN        r     1 START_KEY                 11-0-0/w PTR         r     1 XLATE$
    13-0-0/w PTR         r     1 XLATE0$                   12-0-0/w SBIN        r     1 XLATEX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$BY                     0-0-0/w STRC(144)   r     1 VD_$REKEY
     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 CURR$KEY                   0-0-0/w STRC(648)   r     1 DEST$ENCLOSING
     0-0-0/w SBIN        r     1 NUM                        0-0-0/w STRC(936)   r     1 VD$BLOCK_DESC
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w STRC(900)   r     1 VD$WINDOW_SPEC             0-0-0/w STRC(828)   r     1 XLATE$TABLE

PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:39   

   Procedure VDI$BAUTO_REKEY requires 369 words for executable code.
   Procedure VDI$BAUTO_REKEY requires 60 words of local(AUTO) storage.
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:40   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:41   
          MINI XREF LISTING

CHECK_XLATE
      3618**PROC     3565--CALL     3574--CALL
CURR$KEY
      2527**DCL      3487>>IF       3494>>ASSIGN   3552>>ASSIGN   3553>>IF
CURR$KEY.BYTES#
      2531**DCL      3472>>ASSIGN   3490>>ASSIGN
CURR$KEY.LENGTH#
      2531**DCL      3559<<ASSIGN   3564--ASSIGN
CURR_KEY$
      3190**DCL      2527--IMP-PTR  3474<<ASSIGN   3487>>IF       3490>>ASSIGN   3494>>ASSIGN   3552>>ASSIGN
      3553>>IF       3564>>ASSIGN
DELTA
      3194**DCL      3486<<ASSIGN   3488<<ASSIGN   3490<<ASSIGN   3491<<ASSIGN   3491>>ASSIGN   3492>>IF
      3493>>IF       3568<<ASSIGN   3627>>IF
DEL_RANGE
      3236**DCL      3550<<ASSIGN   3577<>CALL
DEL_RANGE.ENDD.KEY
      3290**DCL      3576<<ASSIGN
DEL_RANGE.START.KEY
      3262**DCL      3575<<ASSIGN
DEST$ENCLOSING
      2458**DCL      3572<>CALL     3580<>CALL
DEST_ENCLOSING$
      3199**DCL      2458--IMP-PTR  3511<<ASSIGN   3572>>CALL     3580>>CALL
DEST_KEY
      3152**DCL        73--PROC     3481>>ASSIGN   3503<>CALL
DEST_KEY.BYTES#
      3156**DCL      3475>>ASSIGN
DEST_OPTIONS
      3167**DCL        73--PROC     3580<>CALL
DEST_OPTIONS.KEY_INCR
      3183**DCL      3472--ASSIGN   3503<>CALL
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:42   
DEST_STREAM
      3046**DCL        73--PROC     3483<>CALL     3503<>CALL     3503<>CALL     3570<>CALL     3572<>CALL
      3577<>CALL     3580<>CALL
DEST_STREAM.CURRENT
      3097**DCL      3480>>ASSIGN
DEST_STREAM.CURRENT.EOF
      3113**DCL      3485>>IF       3558>>IF
DEST_STREAM.CURRENT.KEY
      3109**DCL      3474--ASSIGN
DEST_STREAM.FILE_KEY
      3083**DCL      3532>>ASSIGN
DEST_STREAM.FILE_KEY.REP#
      3085**DCL      3532>>IF
DEST_STREAM.FILE_KEY.V$
      3085**DCL      3532>>CALL     3532>>CALL
DO_IT
      3509**LABEL    3492--GOTO
DO_IT_ADJUSTED
      3503**LABEL    3493--GOTO
FREKEY_FAILED
      3589**LABEL    3503--CALLALT
HOLE
      3196**DCL      3471<<ASSIGN   3492>>IF       3493>>IF       3503<>CALL     3561>>ASSIGN
INCR
      3195**DCL      3472<<ASSIGN   3473>>IF       3473<<ASSIGN   3492>>IF       3508<<ASSIGN   3509>>IF
      3509>>IF       3509<<ASSIGN   3509<<ASSIGN   3554>>ASSIGN   3561>>ASSIGN   3561>>ASSIGN   3561>>ASSIGN
      3561>>ASSIGN   3564>>ASSIGN   3567<<ASSIGN   3567>>ASSIGN   3583>>ASSIGN
LDELETE_FAILED
      3589**LABEL    3577--CALLALT
LOC
      3208**DCL      3480<<ASSIGN   3483<>CALL
LOC.KEY
      3222**DCL      3481<<ASSIGN   3487>>IF       3494<<ASSIGN   3553>>IF
LOC.KEY.V$
      3224**DCL      3635<<ASSIGN   3639>>IF
LREAD_FAILED
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:43   
      3589**LABEL    3483--CALLALT  3570--CALLALT
NUM
      3037**DCL      3564>>ASSIGN   3579<<ASSIGN   3628<<ASSIGN
OALLOC_FAILED
      3589**LABEL    3516--CALLALT
RCRCNT
      3197**DCL      3479<<ASSIGN   3482>>DOUNTIL  3492>>IF       3493>>IF       3493>>IF       3495<<ASSIGN
      3495>>ASSIGN   3508>>ASSIGN   3547<<ASSIGN   3547>>ASSIGN   3561>>ASSIGN   3569>>DOUNTIL  3582<<ASSIGN
      3582>>ASSIGN
RECORD
      3305**DCL      3551<<ASSIGN   3572<>CALL     3580<>CALL
RECORD.KEY
      3319**DCL      3552<<ASSIGN   3559--ASSIGN   3575>>ASSIGN   3576>>ASSIGN
RECORD.KEY.V$
      3321**DCL      3579--ASSIGN   3622>>IF       3623>>IF       3623>>IF
REL
      3189**DCL      3476<<ASSIGN   3477>>DOUNTIL  3478<<ASSIGN   3478>>ASSIGN   3483<>CALL     3491>>ASSIGN
      3540>>IF       3547>>IF       3549<<ASSIGN   3549>>ASSIGN   3555<<ASSIGN   3564>>ASSIGN   3567>>ASSIGN
      3570<>CALL     3571>>IF       3571<<ASSIGN   3623>>IF       3623>>IF       3629>>ASSIGN
RGET_FAILED
      3589**LABEL    3572--CALLALT
RPUT_FAILED
      3589**LABEL    3580--CALLALT
SRC_RECS
      3188**DCL        73--PROC     3471>>ASSIGN
START_KEY
      3198**DCL      3475<<ASSIGN   3491>>ASSIGN   3554<<ASSIGN   3561<<ASSIGN   3561>>ASSIGN   3564<<ASSIGN
      3579>>ASSIGN   3583<<ASSIGN   3583>>ASSIGN   3628>>ASSIGN
VD$BLOCK_DESC.RANGE
      2728**DCL      3511--ASSIGN
VD$FILE_NODE.DESC.SPEC.V$
      2904**DCL      3511>>ASSIGN
VD$TEXTC_REMOTE
      3001**DCL      3532<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3030**DCL      3032--IMP-SIZ  3532>>CALL
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:44   
VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$
      2959**DCL      3511>>ASSIGN
VDA$FREKEY
      2440**DCL-ENT  3503--CALL
VDA$LDELETE
      2441**DCL-ENT  3577--CALL
VDA$LREAD
      2442**DCL-ENT  3483--CALL     3570--CALL
VDE$RGET
      2443**DCL-ENT  3572--CALL
VDE$RPUT
      2444**DCL-ENT  3580--CALL
VDG$OALLOC
      2447**DCL-ENT  3516--CALL
VDG$OCOPY
      2445**DCL-ENT  3532--CALL
VDG$OFREE
      2446**DCL-ENT  3591--CALL
VDG$XLATE_LOCATIONS
      2448**DCL-ENT  3537--CALL     3586--CALL
VD_$BY.V#
      3419**DCL      3473>>ASSIGN
VD_$REKEY.V#
      3464**DCL      3482>>DOUNTIL
VD_CURRENT_WINDOW$
      3467**DCL      3511>>ASSIGN
XLATE$
      3191**DCL      2541--IMP-PTR  3518<<ASSIGN   3532>>ASSIGN   3532>>CALL     3535>>ASSIGN   3537>>CALL
      3541>>ASSIGN   3542>>IF       3543<<ASSIGN   3543>>ASSIGN   3589<<ASSIGN   3590>>ASSIGN   3591>>CALL
      3621>>IF       3622>>IF       3623>>IF       3623>>IF       3628>>ASSIGN   3630>>IF       3631<<ASSIGN
      3631>>ASSIGN   3634>>IF       3635>>ASSIGN   3636<<ASSIGN   3638>>ASSIGN   3639>>IF       3640<<ASSIGN
      3640>>ASSIGN
XLATE$TABLE
      2541**DCL      3516--CALL     3537<>CALL     3586<>CALL     3591<>CALL
XLATE$TABLE.FILE_KEY
      2578**DCL      3532<<ASSIGN
PL6.E3A0      #001=VDI$BAUTO_REKEY File=VDI$BLOCK.:VDA5TSI                       FRI 07/04/97 11:28 Page:45   
XLATE$TABLE.FILE_KEY.V$
      2580**DCL      3532<>CALL
XLATE$TABLE.FLINK$
      2567**DCL      3542>>IF       3543>>ASSIGN   3590>>ASSIGN   3631>>ASSIGN   3639>>IF       3640>>ASSIGN
XLATE$TABLE.LEVEL#
      2582**DCL      3535<<ASSIGN
XLATE$TABLE.N_ENTRIES#
      2567**DCL      3541>>ASSIGN   3630>>IF       3638>>ASSIGN
XLATE$TABLE.XLATES
      2622**DCL      3516--CALL
XLATE$TABLE.XLATES.NEW_KEY.V$
      2665**DCL      3628--ASSIGN
XLATE$TABLE.XLATES.OLD_KEY_LO.V$
      2636**DCL      3622>>IF       3623>>IF       3623>>IF
XLATE0$
      3193**DCL      3516<>CALL     3518>>ASSIGN   3586>>CALL     3588>>DOUNTIL  3589>>ASSIGN   3590<<ASSIGN
      3634>>IF       3636>>ASSIGN
XLATEX
      3192**DCL      3541<<ASSIGN   3545<<ASSIGN   3621>>IF       3622>>IF       3623>>IF       3623>>IF
      3628>>ASSIGN   3629<<ASSIGN   3629>>ASSIGN   3630>>IF       3632<<ASSIGN   3634>>IF       3638<<ASSIGN
XLATE_FAILED
      3589**LABEL    3537--CALLALT  3586--CALLALT

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:46   
      287        1        /*T***********************************************************/
      288        2        /*T*                                                         */
      289        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      290        4        /*T*                                                         */
      291        5        /*T***********************************************************/
      292        6
      293        7        /*D* NAME:  VDI$BDELETE
      294        8            PARAMETERS:
      295        9                DEL_RANGE - VD$RANGE specyfying the range to be deleted.
      296       10                DEL_STREAM - VD$STREAM to be used to access the file.  Must be open.
      297       11                EDIT_BLOCK - VD$BLOCK_DESC for the EditBlock in which DEL_RANGE
      298       12                    resides.
      299       13            INPUT:
      300       14            OUTPUT:
      301       15                VD_$RECORDS_DELETED.V# will be set to the number of records deleted.
      302       16                    If nothing at all is deleted, it is set to -1.
      303       17            DESCRIPTION:
      304       18                Determine what needs to be deleted.
      305       19                deleted; replace the first and/or last records of the range
      306       20                if any partial records are to be deleted.
      307       21        */
      308       22
      309       23        VDI$BDELETE: PROC (DEL_RANGE, DEL_STREAM, EDIT_BLOCK) ALTRET;
      310       24
      311       25        %INCLUDE VD_MACROS_M;
      312     2240        %INCLUDE VD_PERR_C;
      313     2388
      314     2389
      315     2390        %VD$RANGE (NAME=DEL_RANGE, STCLASS=PARAM);
      316     2459        %VD$STREAM (NAME=DEL_STREAM,STCLASS=PARAM);
      317     2565        %VD$BLOCK_DESC (NAME=EDIT_BLOCK, STCLASS=PARAM);
      318     2712
      319     2713
      320     2714    1   DCL VDE$RADJUST_LENGTH     ENTRY (2) ALTRET;
      321     2715    1   DCL VDE$RGET               ENTRY (3) ALTRET;
      322     2716    1   DCL VDE$RPUT               ENTRY (6) ALTRET;
      323     2717    1   DCL VDA$LDELETE            ENTRY (2) ALTRET;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:47   
      324     2718    1   DCL VDA$LREAD              ENTRY (4) ALTRET;
      325     2719    1   DCL VDG$XLATE_LOCATIONS    ENTRY (2) ALTRET;
      326     2720    1   DCL VDG$OALLOC             ENTRY (3) ALTRET;
      327     2721    1   DCL VDG$OFREE              ENTRY (1) ALTRET;
      328     2722    1   DCL VDG$OCOPY              ENTRY (2) ALTRET;
      329     2723    1   DCL VDG$OCOPY_RANGE        ENTRY (2) ALTRET;
      330     2724    1   DCL VDG$OCOPY_LOCATION     ENTRY (2) ALTRET;
      331     2725    1   DCL VDG$OCLEAR_LOCATION    ENTRY (1) ALTRET;
      332     2726    1   DCL VDG$OCLEAR_RANGE       ENTRY (1) ALTRET;
      333     2727    1   DCL VDG$BUILD_NEW_REC      ENTRY (5) ALTRET;
      334     2728    1   DCL VDG$ESCREECH           ENTRY (3);
      335     2729    1   DCL VDI$BTYPE              ENTRY (3) ALTRET;
      336     2730
      337     2731        %VD$NUMBER (NAME=VD_$RECORDS_DELETED, STCLASS=SYMREF);
      338     2776    1   DCL VD_EOF_DELETED BIT(36) SYMREF;
      339     2777
      340     2778
      341     2779        %VD$RANGE (NAME=DEL@RANGE, STCLASS=AUTO);
      342     2848    1   DCL E_POS UBIN;
      343     2849    1   DCL S_POS UBIN;
      344     2850    1   DCL ALLOC_WDS UBIN;
      345     2851    1   DCL BDT_CODE UBIN;
      346     2852    1   DCL BNR_TYPE UBIN;
      347     2853        %VD$NODE_DESC (NAME=SAVE_REC1, STCLASS=AUTO);
      348     2895        %VD$NODE_DESC (NAME=SAVE_REC2, STCLASS=AUTO);
      349     2937        %VD$LOCATION (NAME=LOC1, STCLASS=AUTO);
      350     2965        %VD$LOCATION (NAME=LOC2, STCLASS=AUTO);
      351     2993    1   DCL LOC1_EXISTS BIT(1) ALIGNED;
      352     2994    1   DCL GET_LOC1 BIT(1) ALIGNED;
      353     2995    1   DCL LOC2_EXISTS BIT(1) ALIGNED;
      354     2996    1   DCL GET_LOC2 BIT(1) ALIGNED;
      355     2997    1   DCL MY_EOF_DELETED BIT(36);
      356     2998    1   DCL READ_ONLY_IF_EXISTS BIT(1) ALIGNED;
      357     2999    1   DCL STREAM_KEY$ PTR;
      358     3000    1   DCL RANGE_KEY$ PTR;
      359     3001    1   DCL BOF_KEY$ PTR;
      360     3002
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:48   
      361     3003
      362     3004        %VD$KEY_NUMBER (STCLASS=BASED);
      363     3019        %VD$BUFFER (NAME=SAVE_REC1_BUF, STCLASS="BASED(SAVE_REC1.DATA$)");
      364     3077        %VD$BUFFER (NAME=SAVE_REC2_BUF, STCLASS="BASED(SAVE_REC2.DATA$)");
      365     3135        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
      366     3158        %VD$TEXTC (NAME=RANGE$KEY, STCLASS="BASED(RANGE_KEY$)");
      367     3181        %VD$TEXTC_REMOTE;
      368     3242        %VD$TEXTC;
      369     3265
      370     3266
      371     3267        %BOX (TITLE="Delete a Range");

              3279    1   /***************************************************************************
              3281    1    *                                                                         *
              3285    1            *                               Delete a Range                            *
              3287    1            *                                                                         *
              3289    1           ***************************************************************************/

      372     3293
      373     3294    1           GET_LOC1 = %FALSE;
      374     3295    1           GET_LOC2 = %FALSE;
      375     3296    1           LOC2_EXISTS = %FALSE;
      376     3297    1           MY_EOF_DELETED = VD_EOF_DELETED;
      377     3298    1           VD_EOF_DELETED = %FALSE;
      378     3299    1           BNR_TYPE = %BNR_ON_2_RECS;
      379     3300    1           VD_$RECORDS_DELETED.V# = -1; /* Start out saying nothing to delete */
      380     3301                /* If we ever call VDA$LDELETE, it'll get changed to something >=0 */
      381     3302    1           DEL@RANGE = %CLEAR;
      382     3303    1           LOC1 = %CLEAR;
      383     3304    1           LOC2 = %CLEAR;
      384     3305    1           SAVE_REC1 = %CLEAR;
      385     3306    1           SAVE_REC2 = %CLEAR;
      386     3307    1           SAVE_REC1.DATA$ = ADDR(NIL);
      387     3308    1           SAVE_REC2.DATA$ = ADDR(NIL);
      388     3309    1           S_POS = DEL_RANGE.START.POSITION#;
      389     3310    1           E_POS = DEL_RANGE.ENDD.POSITION#;
      390     3311
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:49   
      391     3312
      392     3313    1           CALL VDG$OCOPY_RANGE (DEL_RANGE, DEL@RANGE)
      393     3314    1             ALTRET (OCOPY_RANGE_FAILED);
      394     3315    1           CALL VDI$BTYPE (DEL@RANGE, BDT_CODE, EDIT_BLOCK) ALTRET (BTYPE_FAILED);
      395     3316    1           IF BDT_CODE = %BDT_SPOS_0_EOF  OR
      396     3317    1             BDT_CODE = %BDT_BOF_EOF  OR
      397     3318    1             BDT_CODE = %BDT_SPOS_NON_EOF THEN
      398     3319    2           DO;
      399     3320    2              CALL VDA$LREAD(DEL_STREAM, DEL@RANGE.ENDD, -1, %FALSE)
      400     3321    2                ALTRET (LREAD_FAILED);
      401     3322                   %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY,INDX="%(LVL_EXT_REC-1)");
      402     3332                   %COPYKEY (FKEY=DEL_STREAM.CURRENT.KEY,FINDX="%(LVL_EXT_REC-1)",
      403     3333                   TKEY=DEL@RANGE.ENDD.KEY,TINDX="%(LVL_EXT_REC-1)");
      404     3349    2              DEL@RANGE.ENDD.EOF = %FALSE;
      405     3350    2              SAVE_REC2.EOR = %TRUE;   /* EOF always has EOR */
      406     3351    2              END;
      407     3352
      408     3353    1   BDT_CASES:
      409     3354    2           DO CASE (BDT_CODE);
      410     3355
      411     3356    2            CASE (%BDT_1_REC_POS_0, %BDT_EOF_EOF, %BDT_BOF_BOF);
      412     3357    2              GOTO NONE_2_DELETE;
      413     3358
      414     3359    2            CASE (%BDT_1_REC_SPOS_NON_EPOS_0, %BDT_EOF_NOT_EOF,
      415     3360    2                %BDT_NOT_BOF_BOF);
      416     3361    2              CALL VDG$ESCREECH (BDT_CODE);
      417     3362
      418     3363    2            CASE (%BDT_SPOS_0_EOF, %BDT_BOF_EOF);
      419     3364    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)  ALTRET (LDELETE_FAILED);
      420     3365    2              GOTO LDELETED;
      421     3366
      422     3367    2            CASE (%BDT_2_REC_POS_0, %BDT_BOF_EPOS_0);
      423     3368    2              CALL VDA$LREAD (DEL_STREAM, DEL@RANGE.ENDD, -1, %FALSE)
      424     3369    2                ALTRET (LREAD_FAILED);
      425     3370                   %GETKEY (KEY=DEL_STREAM.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
      426     3371                   PTR=STREAM_KEY$);
      427     3381                   %GETKEY (KEY=DEL@RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)",
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:50   
      428     3382                   PTR=RANGE_KEY$);
      429     3392    2              IF STREAM$KEY.BYTES < RANGE$KEY.BYTES THEN
      430     3393    2                 GOTO NOTHING_2_DELETE;
      431     3394                   %GETKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
      432     3395                   PTR=RANGE_KEY$);
      433     3405    2              IF STREAM$KEY.BYTES >= RANGE$KEY.BYTES THEN
      434     3406    2                 GOTO NOTHING_2_DELETE;
      435     3407                   %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)");
      436     3417                   %COPYKEY (FKEY=DEL_STREAM.CURRENT.KEY, FINDX="%(LVL_EXT_REC-1)",
      437     3418                   TKEY=DEL@RANGE.ENDD.KEY, TINDX="%(LVL_EXT_REC-1)");
      438     3434
      439     3435    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)
      440     3436    2                ALTRET (LDELETE_FAILED);
      441     3437    2              GOTO LDELETED;
      442     3438
      443     3439    2            CASE (%BDT_2_REC_SPOS_0_EPOS_NON, %BDT_BOF_EPOS_NON);
      444     3440    2              LOC2 = DEL@RANGE.ENDD;
      445     3441    2              GET_LOC1 = %FALSE;
      446     3442    2              GET_LOC2 = %TRUE;
      447     3443
      448     3444    2            CASE (%BDT_2_REC_POS_NON, %BDT_2_REC_SPOS_NON_EPOS_0);
      449     3445    2              LOC1 = DEL@RANGE.START;
      450     3446    2              LOC2 = DEL@RANGE.ENDD;
      451     3447    2              GET_LOC1 = %TRUE;
      452     3448    2              GET_LOC2 = %TRUE;
      453     3449
      454     3450    2            CASE (%BDT_1_REC_POS_NON, %BDT_1_REC_SPOS_0_EPOS_NON);
      455     3451    2              LOC1 = DEL@RANGE.ENDD;
      456     3452    2              GET_LOC1 = %TRUE;
      457     3453    2              GET_LOC2 = %FALSE;
      458     3454    2              BNR_TYPE = %BNR_ON_1_REC;
      459     3455
      460     3456    2            CASE (%BDT_SPOS_NON_EOF);
      461     3457    2              LOC1 = DEL@RANGE.START;
      462     3458    2              GET_LOC1 = %TRUE;
      463     3459    2              GET_LOC2 = %FALSE;
      464     3460
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:51   
      465     3461    2            END BDT_CASES;
      466     3462
      467     3463
      468     3464    2           IF GET_LOC1 THEN DO;
      469     3465    2              CALL GET_RECORD (LOC1, SAVE_REC1, LOC1_EXISTS, %TRUE)
      470     3466    2                ALTRET (GET_RECORD_FAILED);
      471     3467    2              END;
      472     3468
      473     3469    2           IF GET_LOC2 THEN DO;
      474     3470    2              IF LOC1_EXISTS AND LOC1.POSITION# ~= 0 THEN
      475     3471    2                 READ_ONLY_IF_EXISTS = %FALSE;
      476     3472    2              ELSE
      477     3473    2                 READ_ONLY_IF_EXISTS = %TRUE;
      478     3474    2              CALL GET_RECORD (LOC2, SAVE_REC2, LOC2_EXISTS, READ_ONLY_IF_EXISTS)
      479     3475    2                ALTRET (GET_RECORD_FAILED);
      480     3476    3              IF LOC2_EXISTS THEN DO;
      481     3477                      %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)");
      482     3487                      %COPYKEY (FKEY=SAVE_REC2.KEY,
      483     3488                      TKEY=DEL@RANGE.ENDD.KEY, TINDX="%(LVL_EXT_REC-1)");
      484     3504    3                 END;
      485     3505    2              END;
      486     3506
      487     3507    1           IF GET_LOC1 AND NOT LOC1_EXISTS THEN
      488     3508    2           DO CASE (BDT_CODE);
      489     3509
      490     3510    2            CASE (%BDT_2_REC_POS_NON, %BDT_2_REC_SPOS_NON_EPOS_0);
      491     3511    3              IF NOT LOC2_EXISTS THEN DO;
      492     3512    3                 CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)
      493     3513    3                   ALTRET (LDELETE_FAILED);
      494     3514    3                 GOTO LDELETED;
      495     3515    3                 END;
      496     3516
      497     3517    2            CASE (%BDT_SPOS_NON_EOF);
      498     3518    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)
      499     3519    2                ALTRET (LDELETE_FAILED);
      500     3520    2              GOTO LDELETED;
      501     3521
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:52   
      502     3522    2            CASE (%BDT_1_REC_POS_NON, %BDT_1_REC_SPOS_0_EPOS_NON);
      503     3523    2              GOTO NONE_2_DELETE;
      504     3524
      505     3525    2            END;  /* Do Case */
      506     3526
      507     3527
      508     3528    1           IF GET_LOC2 AND NOT LOC2_EXISTS THEN
      509     3529    2           DO CASE (BDT_CODE);
      510     3530
      511     3531    2            CASE (%BDT_2_REC_SPOS_0_EPOS_NON, %BDT_BOF_EPOS_NON);
      512     3532    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)
      513     3533    2                ALTRET (LDELETE_FAILED);
      514     3534    2              GOTO LDELETED;
      515     3535    2            END;  /* Do Case */
      516     3536
      517     3537
      518     3538    2           IF BNR_TYPE = %BNR_ON_2_RECS THEN DO;
      519     3539    2              S_POS = LOC1.POSITION#;
      520     3540    2              E_POS = LOC2.POSITION#;
      521     3541    2              DEL@RANGE.ENDD.POSITION# = LOC2.POSITION#;
      522     3542    2              END;
      523     3543    1           CALL VDG$BUILD_NEW_REC (BNR_TYPE, SAVE_REC1, S_POS, SAVE_REC2, E_POS)
      524     3544    1             ALTRET (BUILD_NEW_REC_FAILED);
      525     3545
      526     3546
      527     3547                /* Set up the deletes */
      528     3548
      529     3549    1           VD_$RECORDS_DELETED.V# = 0;
      530     3550    2           IF BNR_TYPE ~= %BNR_ON_1_REC THEN DO;
      531     3551    2              IF NOT LOC2_EXISTS THEN /* Tell COVER if eof boundary is gone */
      532     3552    2                 VD_EOF_DELETED = MY_EOF_DELETED;
      533     3553    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)
      534     3554    2                ALTRET (LDELETE_FAILED);
      535     3555    2              VD_$RECORDS_DELETED.V# = VD_$RECORDS_DELETED.V# - 1;
      536     3556    2              END;
      537     3557
      538     3558    1           CALL VDE$RPUT (DEL_STREAM, EDIT_BLOCK.RANGE, EDIT_BLOCK.OPTIONS,
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:53   
      539     3559    1             SAVE_REC1, %SQ_CURRENT)
      540     3560    1             ALTRET (RPUT_FAILED);
      541     3561    1           CALL XLATE_LOCATIONS;
      542     3562
      543     3563    1   LDELETED: ;
      544     3564    1           IF VD_$RECORDS_DELETED.V# = 0 THEN
      545     3565        /* If LDELETE deleted no records, fix up the reported value. */
      546     3566    1              VD_$RECORDS_DELETED.V# = -1;
      547     3567
      548     3568    1   NOTHING_2_DELETE:
      549     3569    1           CALL VDG$OFREE (SAVE_REC1_BUF)
      550     3570    1             ALTRET (OFREE_FAILED);
      551     3571    1           SAVE_REC1.DATA$ = ADDR(NIL);
      552     3572    1           CALL VDG$OFREE (SAVE_REC2_BUF)
      553     3573    1             ALTRET (OFREE_FAILED);
      554     3574    1           SAVE_REC2.DATA$ = ADDR(NIL);
      555     3575
      556     3576                /*
      557     3577                *   Need to shrink down the range descriptor down to one point.
      558     3578                */
      559     3579
      560     3580    1           CALL VDG$OCLEAR_LOCATION (DEL_RANGE.ENDD)
      561     3581    1             ALTRET (OCLEAR_LOCATION_FAILED);
      562     3582    1           CALL VDG$OCOPY_LOCATION (DEL_RANGE.START, DEL_RANGE.ENDD)
      563     3583    1             ALTRET (OCOPY_LOCATION_FAILED);
      564     3584
      565     3585    1           CALL VDG$OCLEAR_RANGE (DEL@RANGE);
      566     3586    1   NONE_2_DELETE:
      567     3587    1           RETURN;
      568     3588
      569     3589
      570     3590
      571     3591    1   BTYPE_FAILED: ;
      572     3592    1   OCOPY_RANGE_FAILED: ;
      573     3593    1   OCOPY_LOCATION_FAILED: ;
      574     3594    1   OCLEAR_LOCATION_FAILED: ;
      575     3595    1   LDELETE_FAILED: ;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:54   
      576     3596    1   LREAD_FAILED: ;
      577     3597    1   RPUT_FAILED: ;
      578     3598    1   OFREE_FAILED: ;
      579     3599    1   OALLOC_FAILED: ;
      580     3600    1   GET_RECORD_FAILED: ;
      581     3601    1   BUILD_NEW_REC_FAILED: ;
      582     3602    1           ALTRETURN;
      583     3603
      584     3604
      585     3605                %BOX (TITLE=GET_RECORD, PAGE=YES);
              3613    1
              3617    1   /***************************************************************************
              3619    1    *                                                                         *
              3623    1            *                                 GET_RECORD                              *
              3625    1            *                                                                         *
              3627    1           ***************************************************************************/

      586     3631
      587     3632        /*I* NAME: GET_RECORD
      588     3633            PARAMETERS:
      589     3634                LOC - VD$LOCATION of record to get.
      590     3635                RECORD - Uninitialized VD$NODE_DESC.
      591     3636                RECORD_EXISTS - Uninitialized BIT(1) ALIGNED.
      592     3637                READ_ONLY_IF_EXISTS - BIT(1) ALIGNED; set if we only want to read the
      593     3638                   LOC record if it exists in the file.
      594     3639            INPUT:
      595     3640            OUTPUT:
      596     3641                RECORD_EXISTS will be set if the LOC key exists in the file.
      597     3642                RECORD will be %CLEAR if we didn't read the record; else will contain
      598     3643                    the LOC record or, if RECORD_EXISTS returned false, may contain
      599     3644                    the record following the LOC location.
      600     3645                    This record will be truncated/extended so that LOC.POSITION#
      601     3646                    is the exact length of LOC.DATA$'s buffer.
      602     3647                LOC - If the record doesn't exists, LOC.POSITION# will be set to
      603     3648                Thus, on any return, LOC.POSITION# will be the length of the LOC record.
      604     3649            DESCRIPTION:
      605     3650                Position the file to LOC; if the record doesn't exist, and
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:55   
      606     3651                    READ_ONLY_IF_EXISTS is set, then return with RECORD = %CLEAR.
      607     3652                Else VDE$RGET the record, and VDE$RADJUST_LENGTH it to LOC.POSITION#'s
      608     3653                    value.
      609     3654        */
      610     3655
      611     3656    1   GET_RECORD: PROC (LOC, RECORD, RECORD_EXISTS, READ_ONLY_IF_EXISTS) ALTRET;
      612     3657
      613     3658        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
      614     3686        %VD$NODE_DESC (NAME=RECORD, STCLASS=PARAM);
      615     3728    2   DCL RECORD_EXISTS BIT(1) ALIGNED;
      616     3729    2   DCL READ_ONLY_IF_EXISTS  BIT(1) ALIGNED;
      617     3730
      618     3731
      619     3732    2   DCL STREAM_KEY$ PTR;
      620     3733    2   DCL LOC_KEY$ PTR;
      621     3734    2   DCL POS UBIN;
      622     3735
      623     3736
      624     3737        %VD$BUFFER (NAME=RECORD_BUF, STCLASS="BASED(RECORD.DATA$)");
      625     3795        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
      626     3818        %VD$TEXTC (NAME=LOC$KEY, STCLASS="BASED(LOC_KEY$)");
      627     3841        %VD$TEXTC_REMOTE;
      628     3902
      629     3903
      630     3904
      631     3905    2           RECORD_EXISTS = %TRUE;  /* Assume LOC record exists */
      632     3906    2           RECORD = %CLEAR;
      633     3907    2           RECORD.DATA$ = ADDR(NIL);
      634     3908
      635     3909    2           CALL VDA$LREAD (DEL_STREAM, LOC, 0, %TRUE)
      636     3910    2             ALTRET (LREAD_FAILED);
      637     3911    3           IF DEL_STREAM.CURRENT.EOF THEN DO;
      638     3912    3              RECORD_EXISTS = %FALSE;
      639     3913    3              LOC.POSITION# = 0;
      640     3914    3              RETURN;
      641     3915    3              END;
      642     3916
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:56   
      643     3917                %GETKEY (KEY=DEL_STREAM.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
      644     3918                PTR=STREAM_KEY$);
      645     3928                %GETKEY (KEY=LOC.KEY, INDX="%(LVL_EXT_REC-1)", PTR=LOC_KEY$);
      646     3938    3           IF STREAM$KEY.BYTES ~= LOC$KEY.BYTES THEN DO;
      647     3939    3              RECORD_EXISTS = %FALSE;
      648     3940    3              LOC.POSITION# = 0;
      649     3941    3              END;
      650     3942
      651     3943    2           IF RECORD_EXISTS OR NOT READ_ONLY_IF_EXISTS THEN
      652     3944    3   READ_THE_RECORD: DO;
      653     3945    3              CALL VDE$RGET (DEL_STREAM, EDIT_BLOCK.RANGE, RECORD)
      654     3946    3                ALTRET (RGET_FAILED);
      655     3947
      656     3948    3              POS = LOC.POSITION#; /* Need WORD for VDE$RADJUST_LENGTH call */
      657     3949    3              IF POS > RECORD_BUF.LENGTH# THEN
      658     3950    3                 CALL VDE$RADJUST_LENGTH (RECORD, POS)
      659     3951    3                   ALTRET (RADJUST_LEN_FAILED);
      660     3952    3              RECORD_EXISTS = %TRUE;
      661     3953    3              END READ_THE_RECORD;
      662     3954
      663     3955    2           RETURN;
      664     3956
      665     3957
      666     3958    2   LREAD_FAILED: ;
      667     3959    2   RADJUST_LEN_FAILED: ;
      668     3960    2   RGET_FAILED: ;
      669     3961    2           ALTRETURN;
      670     3962
      671     3963    2   END GET_RECORD;
      672     3964
      673     3965                %BOX (TITLE=XLATE_LOCATIONS, PAGE=YES);
              3973    2
              3977    2   /***************************************************************************
              3979    2    *                                                                         *
              3983    2            *                              XLATE_LOCATIONS                            *
              3985    2            *                                                                         *
              3987    2           ***************************************************************************/
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:57   

      674     3991
      675     3992        /*I* NAME: XLATE_LOCATIONS
      676     3993            PARAMETERS:
      677     3994                None.
      678     3995            INPUT:
      679     3996            OUTPUT:
      680     3997            DESCRIPTION:
      681     3998        */
      682     3999
      683     4000    1   XLATE_LOCATIONS: PROC  ALTRET;
      684     4001
      685     4002
      686     4003        %VD$XLATE_LOCATIONS (NAME=XLATE$LOC, STCLASS=AUTO);
      687     4139
      688     4140    2           XLATE$LOC = %CLEAR;
      689     4141    2           XLATE$LOC.FILE_KEY = EDIT_BLOCK.FILE_KEY;
      690     4142    2           XLATE$LOC.FLINK$ = ADDR(NIL);
      691     4143    2           XLATE$LOC.LEVEL# = %LVL_EXT_REC;
      692     4144
      693     4145    3           DO CASE (BDT_CODE);
      694     4146
      695     4147    3            CASE (%BDT_SPOS_0_EOF,%BDT_BOF_EOF,%BDT_SPOS_NON_EOF,
      696     4148    3             %BDT_2_REC_POS_0,%BDT_BOF_EPOS_0);
      697     4149                   /*
      698     4150                   *   Block shape is:  a number of whole records:
      699     4151                   *     ----------------------------
      700     4152                   *     |                          |
      701     4153                   *     |                          |
      702     4154                   *     ----------------------------
      703     4155                   *   or: partial record to EOF.
      704     4156                   *   At this point, DEL@RANGE.ENDD contains the last key
      705     4157                   *     actually deleted, not (as you might expect) the
      706     4158                   *     key just beyond the last key deleted.
      707     4159                   */
      708     4160    3              DEL@RANGE.ENDD.POSITION# = %HALF_INFINITY;
      709     4161    3            CASE (%BDT_2_REC_SPOS_NON_EPOS_0);
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:58   
      710     4162                   /*
      711     4163                   *  Block shape is:  partial record at start, # whole records.
      712     4164                   *                     ------------
      713     4165                   *                     |          |
      714     4166                   *     -----------------          |
      715     4167                   *     |                          |
      716     4168                   *     ----------------------------
      717     4169                   *   At this point:
      718     4170                   *   For BDT_2REC_SPOS_NON_EPOS_0, DEL@RANGE.ENDD is
      719     4171                   *     basically unchanged.  However, the record it refers
      720     4172                   *     to (which is one beyond the last record the
      721     4173                   *     user requested us to delete) has been moved and
      722     4174                   *     "pasted" onto the SAVE_REC1.KEY record (basically,
      723     4175                   *     the DEL@RANGE.START record).  Therefore VD$LOCATIONs
      724     4176                   *     referring to the DEL@RANGE.ENDD record must also be
      725     4177                   *     translated.
      726     4178                   */
      727     4179    3              DEL@RANGE.ENDD.POSITION# = 0;
      728     4180    3            CASE ( ELSE);
      729     4181                   /*
      730     4182                   *  Block shape is:  # whole records, partial last record.
      731     4183                   *     -------------------------------
      732     4184                   *     |                             |
      733     4185                   *     |               ---------------
      734     4186                   *     |               |
      735     4187                   *     -----------------
      736     4188                   *  OR:  partial first and last recs, # whole recs
      737     4189                   *                     ---------------
      738     4190                   *                     |             |
      739     4191                   *     -----------------             |
      740     4192                   *     |                             |
      741     4193                   *     |           -------------------
      742     4194                   *     |           |
      743     4195                   *     -------------
      744     4196                   *  OR:  part of one record (less than whole).
      745     4197                   *                     ---------------
      746     4198                   *                     |             |
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:59   
      747     4199                   *                     ---------------
      748     4200                   */
      749     4201
      750     4202    3            END; /*DO CASE */
      751     4203
      752     4204    2           XLATE$LOC.N_ENTRIES# = 1;
      753     4205
      754     4206    2           XLATE$LOC.XLATES.OLD_KEY_LO(0) = DEL@RANGE.START.KEY(%LVL_EXT_REC-1);
      755     4207    2           XLATE$LOC.XLATES.OLD_KEY_HI(0) = DEL@RANGE.ENDD.KEY(%LVL_EXT_REC-1);
      756     4208
      757     4209    2           XLATE$LOC.XLATES.OLD_POS_LO#(0) = DEL@RANGE.START.POSITION#;
      758     4210    2           XLATE$LOC.XLATES.OLD_POS_HI#(0) = DEL@RANGE.ENDD.POSITION#;
      759     4211
      760     4212    2           XLATE$LOC.XLATES.NEW_KEY(0) = SAVE_REC1.KEY;
      761     4213    2           XLATE$LOC.XLATES.NEW_POS#(0) = S_POS;
      762     4214    2           IF XLATE$LOC.XLATES.OLD_POS_HI#(0) < %HALF_INFINITY THEN
      763     4215    2              XLATE$LOC.XLATES.NEW_POS_INCR#(0) =
      764     4216    2                XLATE$LOC.XLATES.NEW_POS#(0) - XLATE$LOC.XLATES.OLD_POS_HI#(0);
      765     4217    2           CALL VDG$XLATE_LOCATIONS (XLATE$LOC, %XLATE_LOCATION)
      766     4218    2             ALTRET (XLATE_FAILED);
      767     4219
      768     4220    2           RETURN;
      769     4221
      770     4222
      771     4223    2   XLATE_FAILED:
      772     4224    2           ALTRETURN;
      773     4225
      774     4226
      775     4227    2   END XLATE_LOCATIONS;
      776     4228
      777     4229
      778     4230    1   END VDI$BDELETE;
      779     4231        %EOD;

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:60   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BDELETE.

   Procedure VDI$BDELETE requires 687 words for executable code.
   Procedure VDI$BDELETE requires 98 words of local(AUTO) storage.

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:61   

 Object Unit name= VDI$BDELETE                                File name= VDI$BLOCK.:VDA5TOU
 UTS= JUL 04 '97 11:28:20.20 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   687   1257  VDI$BDELETE
    1  RoData even  none     8     10  VDI$BDELETE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VDI$BDELETE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VDG$OCOPY_RANGE
 yes     yes           Std       3 VDI$BTYPE
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       2 VDA$LDELETE
 yes     yes           Std       1 VDG$OCLEAR_RANGE
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       5 VDG$BUILD_NEW_REC
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       6 VDE$RPUT
 yes     yes           Std       3 VDE$RGET
 yes     yes           Std       2 VDE$RADJUST_LENGTH
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:62   
 yes     yes           Std       2 VDG$XLATE_LOCATIONS
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_$RECORDS_DELETED                   VD_EOF_DELETED                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:63   


      287        1        /*T***********************************************************/
      288        2        /*T*                                                         */
      289        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      290        4        /*T*                                                         */
      291        5        /*T***********************************************************/
      292        6
      293        7        /*D* NAME:  VDI$BDELETE
      294        8            PARAMETERS:
      295        9                DEL_RANGE - VD$RANGE specyfying the range to be deleted.
      296       10                DEL_STREAM - VD$STREAM to be used to access the file.  Must be open.
      297       11                EDIT_BLOCK - VD$BLOCK_DESC for the EditBlock in which DEL_RANGE
      298       12                    resides.
      299       13            INPUT:
      300       14            OUTPUT:
      301       15                VD_$RECORDS_DELETED.V# will be set to the number of records deleted.
      302       16                    If nothing at all is deleted, it is set to -1.
      303       17            DESCRIPTION:
      304       18                Determine what needs to be deleted.
      305       19                deleted; replace the first and/or last records of the range
      306       20                if any partial records are to be deleted.
      307       21        */
      308       22
      309       23        VDI$BDELETE: PROC (DEL_RANGE, DEL_STREAM, EDIT_BLOCK) ALTRET;

     23  0 000000   000000 700200 xent  VDI$BDELETE  TSX0  ! X66_AUTO_3
         0 000001   000142 000003                    ZERO    98,3

      310       24
      311       25        %INCLUDE VD_MACROS_M;
      312     2240        %INCLUDE VD_PERR_C;
      313     2388
      314     2389
      315     2390        %VD$RANGE (NAME=DEL_RANGE, STCLASS=PARAM);
      316     2459        %VD$STREAM (NAME=DEL_STREAM,STCLASS=PARAM);
      317     2565        %VD$BLOCK_DESC (NAME=EDIT_BLOCK, STCLASS=PARAM);
      318     2712
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:64   
      319     2713
      320     2714    1   DCL VDE$RADJUST_LENGTH     ENTRY (2) ALTRET;
      321     2715    1   DCL VDE$RGET               ENTRY (3) ALTRET;
      322     2716    1   DCL VDE$RPUT               ENTRY (6) ALTRET;
      323     2717    1   DCL VDA$LDELETE            ENTRY (2) ALTRET;
      324     2718    1   DCL VDA$LREAD              ENTRY (4) ALTRET;
      325     2719    1   DCL VDG$XLATE_LOCATIONS    ENTRY (2) ALTRET;
      326     2720    1   DCL VDG$OALLOC             ENTRY (3) ALTRET;
      327     2721    1   DCL VDG$OFREE              ENTRY (1) ALTRET;
      328     2722    1   DCL VDG$OCOPY              ENTRY (2) ALTRET;
      329     2723    1   DCL VDG$OCOPY_RANGE        ENTRY (2) ALTRET;
      330     2724    1   DCL VDG$OCOPY_LOCATION     ENTRY (2) ALTRET;
      331     2725    1   DCL VDG$OCLEAR_LOCATION    ENTRY (1) ALTRET;
      332     2726    1   DCL VDG$OCLEAR_RANGE       ENTRY (1) ALTRET;
      333     2727    1   DCL VDG$BUILD_NEW_REC      ENTRY (5) ALTRET;
      334     2728    1   DCL VDG$ESCREECH           ENTRY (3);
      335     2729    1   DCL VDI$BTYPE              ENTRY (3) ALTRET;
      336     2730
      337     2731        %VD$NUMBER (NAME=VD_$RECORDS_DELETED, STCLASS=SYMREF);
      338     2776    1   DCL VD_EOF_DELETED BIT(36) SYMREF;
      339     2777
      340     2778
      341     2779        %VD$RANGE (NAME=DEL@RANGE, STCLASS=AUTO);
      342     2848    1   DCL E_POS UBIN;
      343     2849    1   DCL S_POS UBIN;
      344     2850    1   DCL ALLOC_WDS UBIN;
      345     2851    1   DCL BDT_CODE UBIN;
      346     2852    1   DCL BNR_TYPE UBIN;
      347     2853        %VD$NODE_DESC (NAME=SAVE_REC1, STCLASS=AUTO);
      348     2895        %VD$NODE_DESC (NAME=SAVE_REC2, STCLASS=AUTO);
      349     2937        %VD$LOCATION (NAME=LOC1, STCLASS=AUTO);
      350     2965        %VD$LOCATION (NAME=LOC2, STCLASS=AUTO);
      351     2993    1   DCL LOC1_EXISTS BIT(1) ALIGNED;
      352     2994    1   DCL GET_LOC1 BIT(1) ALIGNED;
      353     2995    1   DCL LOC2_EXISTS BIT(1) ALIGNED;
      354     2996    1   DCL GET_LOC2 BIT(1) ALIGNED;
      355     2997    1   DCL MY_EOF_DELETED BIT(36);
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:65   
      356     2998    1   DCL READ_ONLY_IF_EXISTS BIT(1) ALIGNED;
      357     2999    1   DCL STREAM_KEY$ PTR;
      358     3000    1   DCL RANGE_KEY$ PTR;
      359     3001    1   DCL BOF_KEY$ PTR;
      360     3002
      361     3003
      362     3004        %VD$KEY_NUMBER (STCLASS=BASED);
      363     3019        %VD$BUFFER (NAME=SAVE_REC1_BUF, STCLASS="BASED(SAVE_REC1.DATA$)");
      364     3077        %VD$BUFFER (NAME=SAVE_REC2_BUF, STCLASS="BASED(SAVE_REC2.DATA$)");
      365     3135        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
      366     3158        %VD$TEXTC (NAME=RANGE$KEY, STCLASS="BASED(RANGE_KEY$)");
      367     3181        %VD$TEXTC_REMOTE;
      368     3242        %VD$TEXTC;
      369     3265
      370     3266
      371     3267        %BOX (TITLE="Delete a Range");

              3279    1   /***************************************************************************
              3281    1    *                                                                         *
              3285    1            *                               Delete a Range                           *
              3287    1            *                                                                        *
              3289    1          ***************************************************************************/

      372     3293
      373     3294    1           GET_LOC1 = %FALSE;

   3294  0 000002   200074 450100                    STZ     GET_LOC1,,AUTO

      374     3295    1           GET_LOC2 = %FALSE;

   3295  0 000003   200076 450100                    STZ     GET_LOC2,,AUTO

      375     3296    1           LOC2_EXISTS = %FALSE;

   3296  0 000004   200075 450100                    STZ     LOC2_EXISTS,,AUTO

      376     3297    1           MY_EOF_DELETED = VD_EOF_DELETED;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:66   

   3297  0 000005   000000 236000 xsym               LDQ     VD_EOF_DELETED
         0 000006   200077 756100                    STQ     MY_EOF_DELETED,,AUTO

      377     3298    1           VD_EOF_DELETED = %FALSE;

   3298  0 000007   000000 450000 xsym               STZ     VD_EOF_DELETED

      378     3299    1           BNR_TYPE = %BNR_ON_2_RECS;

   3299  0 000010   000002 235007                    LDA     2,DL
         0 000011   200034 755100                    STA     BNR_TYPE,,AUTO

      379     3300    1           VD_$RECORDS_DELETED.V# = -1; /* Start out saying nothing to delete */

   3300  0 000012   000001 335007                    LCA     1,DL
         0 000013   000003 755000 xsym               STA     VD_$RECORDS_DELETED+3

      380     3301                /* If we ever call VDA$LDELETE, it'll get changed to something >=0 */
      381     3302    1           DEL@RANGE = %CLEAR;

   3302  0 000014   000100 100400                    MLR     fill='000'O
         0 000015   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000016   200006 000110                    ADSC9   DEL@RANGE,,AUTO          cn=0,n=72

      382     3303    1           LOC1 = %CLEAR;

   3303  0 000017   000100 100400                    MLR     fill='000'O
         0 000020   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000021   200051 000044                    ADSC9   LOC1,,AUTO               cn=0,n=36

      383     3304    1           LOC2 = %CLEAR;

   3304  0 000022   000100 100400                    MLR     fill='000'O
         0 000023   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000024   200062 000044                    ADSC9   LOC2,,AUTO               cn=0,n=36

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:67   
      384     3305    1           SAVE_REC1 = %CLEAR;

   3305  0 000025   000100 100400                    MLR     fill='000'O
         0 000026   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000027   200035 000030                    ADSC9   SAVE_REC1,,AUTO          cn=0,n=24

      385     3306    1           SAVE_REC2 = %CLEAR;

   3306  0 000030   000100 100400                    MLR     fill='000'O
         0 000031   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000032   200043 000030                    ADSC9   SAVE_REC2,,AUTO          cn=0,n=24

      386     3307    1           SAVE_REC1.DATA$ = ADDR(NIL);

   3307  0 000033   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000034   200041 756100                    STQ     SAVE_REC1+4,,AUTO

      387     3308    1           SAVE_REC2.DATA$ = ADDR(NIL);

   3308  0 000035   200047 756100                    STQ     SAVE_REC2+4,,AUTO

      388     3309    1           S_POS = DEL_RANGE.START.POSITION#;

   3309  0 000036   200003 470500                    LDP0    @DEL_RANGE,,AUTO
         0 000037   000010 236100                    LDQ     8,,PR0
         0 000040   000022 732000                    QRS     18
         0 000041   200031 756100                    STQ     S_POS,,AUTO

      389     3310    1           E_POS = DEL_RANGE.ENDD.POSITION#;

   3310  0 000042   000021 236100                    LDQ     17,,PR0
         0 000043   000022 732000                    QRS     18
         0 000044   200030 756100                    STQ     E_POS,,AUTO

      390     3311
      391     3312
      392     3313    1           CALL VDG$OCOPY_RANGE (DEL_RANGE, DEL@RANGE)
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:68   

   3313  0 000045   200006 631500                    EPPR1   DEL@RANGE,,AUTO
         0 000046   200135 451500                    STP1    POS+18,,AUTO
         0 000047   200003 236100                    LDQ     @DEL_RANGE,,AUTO
         0 000050   200134 756100                    STQ     POS+17,,AUTO
         0 000051   200134 630500                    EPPR0   POS+17,,AUTO
         0 000052   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000053   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         0 000054   000764 702000 0                  TSX2    BTYPE_FAILED

      393     3314    1             ALTRET (OCOPY_RANGE_FAILED);
      394     3315    1           CALL VDI$BTYPE (DEL@RANGE, BDT_CODE, EDIT_BLOCK) ALTRET (BTYPE_FAILED);

   3315  0 000055   200005 236100                    LDQ     @EDIT_BLOCK,,AUTO
         0 000056   200136 756100                    STQ     POS+19,,AUTO
         0 000057   200033 630500                    EPPR0   BDT_CODE,,AUTO
         0 000060   200135 450500                    STP0    POS+18,,AUTO
         0 000061   200006 631500                    EPPR1   DEL@RANGE,,AUTO
         0 000062   200134 451500                    STP1    POS+17,,AUTO
         0 000063   200134 630500                    EPPR0   POS+17,,AUTO
         0 000064   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000065   000000 701000 xent               TSX1    VDI$BTYPE
         0 000066   000764 702000 0                  TSX2    BTYPE_FAILED

      395     3316    1           IF BDT_CODE = %BDT_SPOS_0_EOF  OR

   3316  0 000067   200033 235100                    LDA     BDT_CODE,,AUTO
         0 000070   000012 115007                    CMPA    10,DL
         0 000071   000076 600000 0                  TZE     s:3320
         0 000072   000020 115007                    CMPA    16,DL
         0 000073   000076 600000 0                  TZE     s:3320
         0 000074   000011 115007                    CMPA    9,DL
         0 000075   000150 601000 0                  TNZ     BDT_CASES

      396     3317    1             BDT_CODE = %BDT_BOF_EOF  OR
      397     3318    1             BDT_CODE = %BDT_SPOS_NON_EOF THEN
      398     3319    2           DO;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:69   

      399     3320    2              CALL VDA$LREAD(DEL_STREAM, DEL@RANGE.ENDD, -1, %FALSE)

   3320  0 000076   000000 237000 1                  LDAQ    0
         0 000077   200136 757100                    STAQ    POS+19,,AUTO
         0 000100   200017 630500                    EPPR0   DEL@RANGE+9,,AUTO
         0 000101   200135 450500                    STP0    POS+18,,AUTO
         0 000102   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000103   200134 756100                    STQ     POS+17,,AUTO
         0 000104   200134 630500                    EPPR0   POS+17,,AUTO
         0 000105   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000106   000000 701000 xent               TSX1    VDA$LREAD
         0 000107   000764 702000 0                  TSX2    BTYPE_FAILED

      400     3321    2                ALTRET (LREAD_FAILED);
      401     3322                   %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY,INDX="%(LVL_EXT_REC-1)");

   3329  0 000110   200017 720100                    LXL0    DEL@RANGE+9,,AUTO
         0 000111   000002 100003                    CMPX0   2,DU
         0 000112   000121 601000 0                  TNZ     s:3330+1

   3329  0 000113   200020 630500                    EPPR0   DEL@RANGE+10,,AUTO
         0 000114   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000115   000000 701000 xent               TSX1    VDG$OFREE
         0 000116   000120 702000 0                  TSX2    s:3330
         0 000117   000121 710000 0                  TRA     s:3330+1

   3330  0 000120   000000 702200 xent               TSX2  ! X66_AALT

   3330  0 000121   200017 450100                    STZ     DEL@RANGE+9,,AUTO
         0 000122   200020 450100                    STZ     DEL@RANGE+10,,AUTO

      402     3332                   %COPYKEY (FKEY=DEL_STREAM.CURRENT.KEY,FINDX="%(LVL_EXT_REC-1)",
      403     3333                   TKEY=DEL@RANGE.ENDD.KEY,TINDX="%(LVL_EXT_REC-1)");

   3346  0 000123   200004 470500                    LDP0    @DEL_STREAM,,AUTO
         0 000124   000100 100500                    MLR     fill='000'O
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:70   
         0 000125   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         0 000126   200017 000010                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=8

   3346  0 000127   000006 720100                    LXL0    6,,PR0
         0 000130   000002 100003                    CMPX0   2,DU
         0 000131   000144 601000 0                  TNZ     s:3349

   3346  0 000132   000007 471500                    LDP1    7,,PR0
         0 000133   200020 633500                    EPPR3   DEL@RANGE+10,,AUTO
         0 000134   200135 453500                    STP3    POS+18,,AUTO
         0 000135   200134 451500                    STP1    POS+17,,AUTO
         0 000136   200134 630500                    EPPR0   POS+17,,AUTO
         0 000137   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000140   000000 701000 xent               TSX1    VDG$OCOPY
         0 000141   000143 702000 0                  TSX2    s:3347
         0 000142   000144 710000 0                  TRA     s:3349

   3347  0 000143   000000 702200 xent               TSX2  ! X66_AALT

      404     3349    2              DEL@RANGE.ENDD.EOF = %FALSE;

   3349  0 000144   000002 236000 1                  LDQ     2
         0 000145   200027 356100                    ANSQ    DEL@RANGE+17,,AUTO

      405     3350    2              SAVE_REC2.EOR = %TRUE;   /* EOF always has EOR */

   3350  0 000146   400000 236003                    LDQ     -131072,DU
         0 000147   200050 256100                    ORSQ    SAVE_REC2+5,,AUTO

      406     3351    2              END;

      407     3352
      408     3353    1   BDT_CASES:
      409     3354    2           DO CASE (BDT_CODE);

   3354  0 000150   200033 235100       BDT_CASES    LDA     BDT_CODE,,AUTO
         0 000151   000022 115007                    CMPA    18,DL
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:71   
         0 000152   000154 602005 0                  TNC     BDT_CASES+4,AL
         0 000153   000416 710000 0                  TRA     s:3464
         0 000154   000416 710000 0                  TRA     s:3464
         0 000155   000365 710000 0                  TRA     s:3445
         0 000156   000365 710000 0                  TRA     s:3445
         0 000157   000356 710000 0                  TRA     s:3440
         0 000160   000217 710000 0                  TRA     s:3368
         0 000161   000377 710000 0                  TRA     s:3451
         0 000162   000177 710000 0                  TRA     s:3361
         0 000163   000377 710000 0                  TRA     s:3451
         0 000164   000176 710000 0                  TRA     s:3357
         0 000165   000410 710000 0                  TRA     s:3457
         0 000166   000206 710000 0                  TRA     s:3364
         0 000167   000177 710000 0                  TRA     s:3361
         0 000170   000176 710000 0                  TRA     s:3357
         0 000171   000177 710000 0                  TRA     s:3361
         0 000172   000356 710000 0                  TRA     s:3440
         0 000173   000217 710000 0                  TRA     s:3368
         0 000174   000206 710000 0                  TRA     s:3364
         0 000175   000176 710000 0                  TRA     s:3357

      410     3355
      411     3356    2            CASE (%BDT_1_REC_POS_0, %BDT_EOF_EOF, %BDT_BOF_BOF);

      412     3357    2              GOTO NONE_2_DELETE;

   3357  0 000176   000763 710000 0                  TRA     NONE_2_DELETE

      413     3358
      414     3359    2            CASE (%BDT_1_REC_SPOS_NON_EPOS_0, %BDT_EOF_NOT_EOF,

      415     3360    2                %BDT_NOT_BOF_BOF);
      416     3361    2              CALL VDG$ESCREECH (BDT_CODE);

   3361  0 000177   200033 630500                    EPPR0   BDT_CODE,,AUTO
         0 000200   200134 450500                    STP0    POS+17,,AUTO
         0 000201   200134 630500                    EPPR0   POS+17,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:72   
         0 000202   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000203   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000204   000000 011000                    NOP     0
         0 000205   000416 710000 0                  TRA     s:3464

      417     3362
      418     3363    2            CASE (%BDT_SPOS_0_EOF, %BDT_BOF_EOF);

      419     3364    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)  ALTRET (LDELETE_FAILED);

   3364  0 000206   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000207   200135 450500                    STP0    POS+18,,AUTO
         0 000210   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000211   200134 756100                    STQ     POS+17,,AUTO
         0 000212   200134 630500                    EPPR0   POS+17,,AUTO
         0 000213   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000214   000000 701000 xent               TSX1    VDA$LDELETE
         0 000215   000764 702000 0                  TSX2    BTYPE_FAILED

      420     3365    2              GOTO LDELETED;

   3365  0 000216   000716 710000 0                  TRA     LDELETED

      421     3366
      422     3367    2            CASE (%BDT_2_REC_POS_0, %BDT_BOF_EPOS_0);

      423     3368    2              CALL VDA$LREAD (DEL_STREAM, DEL@RANGE.ENDD, -1, %FALSE)

   3368  0 000217   000000 237000 1                  LDAQ    0
         0 000220   200136 757100                    STAQ    POS+19,,AUTO
         0 000221   200017 630500                    EPPR0   DEL@RANGE+9,,AUTO
         0 000222   200135 450500                    STP0    POS+18,,AUTO
         0 000223   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000224   200134 756100                    STQ     POS+17,,AUTO
         0 000225   200134 630500                    EPPR0   POS+17,,AUTO
         0 000226   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000227   000000 701000 xent               TSX1    VDA$LREAD
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:73   
         0 000230   000764 702000 0                  TSX2    BTYPE_FAILED

      424     3369    2                ALTRET (LREAD_FAILED);
      425     3370                   %GETKEY (KEY=DEL_STREAM.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
      426     3371                   PTR=STREAM_KEY$);

   3378  0 000231   200004 470500                    LDP0    @DEL_STREAM,,AUTO
         0 000232   000006 720100                    LXL0    6,,PR0
         0 000233   000002 100003                    CMPX0   2,DU
         0 000234   000241 601000 0                  TNZ     s:3378+8

   3378  0 000235   000007 471500                    LDP1    7,,PR0
         0 000236   100002 633500                    EPPR3   2,,PR1
         0 000237   200101 453500                    STP3    STREAM_KEY$,,AUTO
         0 000240   000244 710000 0                  TRA     s:3389

   3378  0 000241   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000242   000007 036003                    ADLQ    7,DU
         0 000243   200101 756100                    STQ     STREAM_KEY$,,AUTO

      427     3381                   %GETKEY (KEY=DEL@RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)",
      428     3382                   PTR=RANGE_KEY$);

   3389  0 000244   200006 721100                    LXL1    DEL@RANGE,,AUTO
         0 000245   000002 101003                    CMPX1   2,DU
         0 000246   000253 601000 0                  TNZ     s:3389+7

   3389  0 000247   200007 236100                    LDQ     DEL@RANGE+1,,AUTO
         0 000250   000002 036003                    ADLQ    2,DU
         0 000251   200102 756100                    STQ     RANGE_KEY$,,AUTO
         0 000252   000255 710000 0                  TRA     s:3392

   3389  0 000253   200007 631500                    EPPR1   DEL@RANGE+1,,AUTO
         0 000254   200102 451500                    STP1    RANGE_KEY$,,AUTO

      429     3392    2              IF STREAM$KEY.BYTES < RANGE$KEY.BYTES THEN

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:74   
   3392  0 000255   200101 471500                    LDP1    STREAM_KEY$,,AUTO
         0 000256   100000 236100                    LDQ     0,,PR1
         0 000257   000033 772000                    QRL     27
         0 000260   200102 473500                    LDP3    RANGE_KEY$,,AUTO
         0 000261   000000 622006                    EAX2    0,QL
         0 000262   300000 236100                    LDQ     0,,PR3
         0 000263   000033 772000                    QRL     27
         0 000264   000000 623006                    EAX3    0,QL
         0 000265   040140 106540                    CMPC    fill='040'O
         0 000266   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         0 000267   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         0 000270   000722 602000 0                  TNC     NOTHING_2_DELETE

      430     3393    2                 GOTO NOTHING_2_DELETE;
      431     3394                   %GETKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
      432     3395                   PTR=RANGE_KEY$);

   3402  0 000271   200017 724100                    LXL4    DEL@RANGE+9,,AUTO
         0 000272   000002 104003                    CMPX4   2,DU
         0 000273   000300 601000 0                  TNZ     s:3402+7

   3402  0 000274   200020 236100                    LDQ     DEL@RANGE+10,,AUTO
         0 000275   000002 036003                    ADLQ    2,DU
         0 000276   200102 756100                    STQ     RANGE_KEY$,,AUTO
         0 000277   000302 710000 0                  TRA     s:3405

   3402  0 000300   200020 634500                    EPPR4   DEL@RANGE+10,,AUTO
         0 000301   200102 454500                    STP4    RANGE_KEY$,,AUTO

      433     3405    2              IF STREAM$KEY.BYTES >= RANGE$KEY.BYTES THEN

   3405  0 000302   200102 473500                    LDP3    RANGE_KEY$,,AUTO
         0 000303   300000 236100                    LDQ     0,,PR3
         0 000304   000033 772000                    QRL     27
         0 000305   000000 623006                    EAX3    0,QL
         0 000306   040140 106540                    CMPC    fill='040'O
         0 000307   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:75   
         0 000310   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         0 000311   000722 603000 0                  TRC     NOTHING_2_DELETE

      434     3406    2                 GOTO NOTHING_2_DELETE;
      435     3407                   %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)");

   3414  0 000312   000002 104003                    CMPX4   2,DU
         0 000313   000322 601000 0                  TNZ     s:3415+1

   3414  0 000314   200020 630500                    EPPR0   DEL@RANGE+10,,AUTO
         0 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000316   000000 701000 xent               TSX1    VDG$OFREE
         0 000317   000321 702000 0                  TSX2    s:3415
         0 000320   000322 710000 0                  TRA     s:3415+1

   3415  0 000321   000000 702200 xent               TSX2  ! X66_AALT

   3415  0 000322   200017 450100                    STZ     DEL@RANGE+9,,AUTO
         0 000323   200020 450100                    STZ     DEL@RANGE+10,,AUTO

      436     3417                   %COPYKEY (FKEY=DEL_STREAM.CURRENT.KEY, FINDX="%(LVL_EXT_REC-1)",
      437     3418                   TKEY=DEL@RANGE.ENDD.KEY, TINDX="%(LVL_EXT_REC-1)");

   3431  0 000324   200004 470500                    LDP0    @DEL_STREAM,,AUTO
         0 000325   000100 100500                    MLR     fill='000'O
         0 000326   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         0 000327   200017 000010                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=8

   3431  0 000330   000006 720100                    LXL0    6,,PR0
         0 000331   000002 100003                    CMPX0   2,DU
         0 000332   000345 601000 0                  TNZ     s:3435

   3431  0 000333   000007 471500                    LDP1    7,,PR0
         0 000334   200020 633500                    EPPR3   DEL@RANGE+10,,AUTO
         0 000335   200135 453500                    STP3    POS+18,,AUTO
         0 000336   200134 451500                    STP1    POS+17,,AUTO
         0 000337   200134 630500                    EPPR0   POS+17,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:76   
         0 000340   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000341   000000 701000 xent               TSX1    VDG$OCOPY
         0 000342   000344 702000 0                  TSX2    s:3432
         0 000343   000345 710000 0                  TRA     s:3435

   3432  0 000344   000000 702200 xent               TSX2  ! X66_AALT

      438     3434
      439     3435    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)

   3435  0 000345   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000346   200135 450500                    STP0    POS+18,,AUTO
         0 000347   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000350   200134 756100                    STQ     POS+17,,AUTO
         0 000351   200134 630500                    EPPR0   POS+17,,AUTO
         0 000352   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000353   000000 701000 xent               TSX1    VDA$LDELETE
         0 000354   000764 702000 0                  TSX2    BTYPE_FAILED

      440     3436    2                ALTRET (LDELETE_FAILED);
      441     3437    2              GOTO LDELETED;

   3437  0 000355   000716 710000 0                  TRA     LDELETED

      442     3438
      443     3439    2            CASE (%BDT_2_REC_SPOS_0_EPOS_NON, %BDT_BOF_EPOS_NON);

      444     3440    2              LOC2 = DEL@RANGE.ENDD;

   3440  0 000356   000100 100500                    MLR     fill='000'O
         0 000357   200017 000044                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=36
         0 000360   200062 000044                    ADSC9   LOC2,,AUTO               cn=0,n=36

      445     3441    2              GET_LOC1 = %FALSE;

   3441  0 000361   200074 450100                    STZ     GET_LOC1,,AUTO

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:77   
      446     3442    2              GET_LOC2 = %TRUE;

   3442  0 000362   400000 236003                    LDQ     -131072,DU
         0 000363   200076 756100                    STQ     GET_LOC2,,AUTO
         0 000364   000416 710000 0                  TRA     s:3464

      447     3443
      448     3444    2            CASE (%BDT_2_REC_POS_NON, %BDT_2_REC_SPOS_NON_EPOS_0);

      449     3445    2              LOC1 = DEL@RANGE.START;

   3445  0 000365   000100 100500                    MLR     fill='000'O
         0 000366   200006 000044                    ADSC9   DEL@RANGE,,AUTO          cn=0,n=36
         0 000367   200051 000044                    ADSC9   LOC1,,AUTO               cn=0,n=36

      450     3446    2              LOC2 = DEL@RANGE.ENDD;

   3446  0 000370   000100 100500                    MLR     fill='000'O
         0 000371   200017 000044                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=36
         0 000372   200062 000044                    ADSC9   LOC2,,AUTO               cn=0,n=36

      451     3447    2              GET_LOC1 = %TRUE;

   3447  0 000373   400000 236003                    LDQ     -131072,DU
         0 000374   200074 756100                    STQ     GET_LOC1,,AUTO

      452     3448    2              GET_LOC2 = %TRUE;

   3448  0 000375   200076 756100                    STQ     GET_LOC2,,AUTO
         0 000376   000416 710000 0                  TRA     s:3464

      453     3449
      454     3450    2            CASE (%BDT_1_REC_POS_NON, %BDT_1_REC_SPOS_0_EPOS_NON);

      455     3451    2              LOC1 = DEL@RANGE.ENDD;

   3451  0 000377   000100 100500                    MLR     fill='000'O
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:78   
         0 000400   200017 000044                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=36
         0 000401   200051 000044                    ADSC9   LOC1,,AUTO               cn=0,n=36

      456     3452    2              GET_LOC1 = %TRUE;

   3452  0 000402   400000 236003                    LDQ     -131072,DU
         0 000403   200074 756100                    STQ     GET_LOC1,,AUTO

      457     3453    2              GET_LOC2 = %FALSE;

   3453  0 000404   200076 450100                    STZ     GET_LOC2,,AUTO

      458     3454    2              BNR_TYPE = %BNR_ON_1_REC;

   3454  0 000405   000001 235007                    LDA     1,DL
         0 000406   200034 755100                    STA     BNR_TYPE,,AUTO
         0 000407   000416 710000 0                  TRA     s:3464

      459     3455
      460     3456    2            CASE (%BDT_SPOS_NON_EOF);

      461     3457    2              LOC1 = DEL@RANGE.START;

   3457  0 000410   000100 100500                    MLR     fill='000'O
         0 000411   200006 000044                    ADSC9   DEL@RANGE,,AUTO          cn=0,n=36
         0 000412   200051 000044                    ADSC9   LOC1,,AUTO               cn=0,n=36

      462     3458    2              GET_LOC1 = %TRUE;

   3458  0 000413   400000 236003                    LDQ     -131072,DU
         0 000414   200074 756100                    STQ     GET_LOC1,,AUTO

      463     3459    2              GET_LOC2 = %FALSE;

   3459  0 000415   200076 450100                    STZ     GET_LOC2,,AUTO

      464     3460
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:79   
      465     3461    2            END BDT_CASES;

      466     3462
      467     3463
      468     3464    2           IF GET_LOC1 THEN DO;

   3464  0 000416   200074 234100                    SZN     GET_LOC1,,AUTO
         0 000417   000432 605000 0                  TPL     s:3469

      469     3465    2              CALL GET_RECORD (LOC1, SAVE_REC1, LOC1_EXISTS, %TRUE)

   3465  0 000420   000003 236000 1                  LDQ     3
         0 000421   200110 756100                    STQ     @RECORD_EXISTS+1,,AUTO
         0 000422   200073 630500                    EPPR0   LOC1_EXISTS,,AUTO
         0 000423   200107 450500                    STP0    @RECORD+1,,AUTO
         0 000424   200035 631500                    EPPR1   SAVE_REC1,,AUTO
         0 000425   200106 451500                    STP1    XLATE$LOC+1,,AUTO
         0 000426   200051 633500                    EPPR3   LOC1,,AUTO
         0 000427   200105 453500                    STP3    RANGE_KEY$+3,,AUTO
         0 000430   000765 701000 0                  TSX1    GET_RECORD
         0 000431   000764 702000 0                  TSX2    BTYPE_FAILED

      470     3466    2                ALTRET (GET_RECORD_FAILED);
      471     3467    2              END;

      472     3468
      473     3469    2           IF GET_LOC2 THEN DO;

   3469  0 000432   200076 234100                    SZN     GET_LOC2,,AUTO
         0 000433   000513 605000 0                  TPL     s:3507

      474     3470    2              IF LOC1_EXISTS AND LOC1.POSITION# ~= 0 THEN

   3470  0 000434   200073 234100                    SZN     LOC1_EXISTS,,AUTO
         0 000435   000442 605000 0                  TPL     s:3473
         0 000436   200061 220100                    LDX0    LOC1+8,,AUTO
         0 000437   000442 600000 0                  TZE     s:3473
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:80   

      475     3471    2                 READ_ONLY_IF_EXISTS = %FALSE;

   3471  0 000440   200100 450100                    STZ     READ_ONLY_IF_EXISTS,,AUTO
         0 000441   000444 710000 0                  TRA     s:3474

      476     3472    2              ELSE
      477     3473    2                 READ_ONLY_IF_EXISTS = %TRUE;

   3473  0 000442   400000 236003                    LDQ     -131072,DU
         0 000443   200100 756100                    STQ     READ_ONLY_IF_EXISTS,,AUTO

      478     3474    2              CALL GET_RECORD (LOC2, SAVE_REC2, LOC2_EXISTS, READ_ONLY_IF_EXISTS)

   3474  0 000444   200100 630500                    EPPR0   READ_ONLY_IF_EXISTS,,AUTO
         0 000445   200110 450500                    STP0    @RECORD_EXISTS+1,,AUTO
         0 000446   200075 631500                    EPPR1   LOC2_EXISTS,,AUTO
         0 000447   200107 451500                    STP1    @RECORD+1,,AUTO
         0 000450   200043 633500                    EPPR3   SAVE_REC2,,AUTO
         0 000451   200106 453500                    STP3    XLATE$LOC+1,,AUTO
         0 000452   200062 634500                    EPPR4   LOC2,,AUTO
         0 000453   200105 454500                    STP4    RANGE_KEY$+3,,AUTO
         0 000454   000765 701000 0                  TSX1    GET_RECORD
         0 000455   000764 702000 0                  TSX2    BTYPE_FAILED

      479     3475    2                ALTRET (GET_RECORD_FAILED);
      480     3476    3              IF LOC2_EXISTS THEN DO;

   3476  0 000456   200075 234100                    SZN     LOC2_EXISTS,,AUTO
         0 000457   000513 605000 0                  TPL     s:3507

      481     3477                      %CLEARKEY (KEY=DEL@RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)");

   3484  0 000460   200017 720100                    LXL0    DEL@RANGE+9,,AUTO
         0 000461   000002 100003                    CMPX0   2,DU
         0 000462   000471 601000 0                  TNZ     s:3485+1

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:81   
   3484  0 000463   200020 630500                    EPPR0   DEL@RANGE+10,,AUTO
         0 000464   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000465   000000 701000 xent               TSX1    VDG$OFREE
         0 000466   000470 702000 0                  TSX2    s:3485
         0 000467   000471 710000 0                  TRA     s:3485+1

   3485  0 000470   000000 702200 xent               TSX2  ! X66_AALT

   3485  0 000471   200017 450100                    STZ     DEL@RANGE+9,,AUTO
         0 000472   200020 450100                    STZ     DEL@RANGE+10,,AUTO

      482     3487                      %COPYKEY (FKEY=SAVE_REC2.KEY,
      483     3488                      TKEY=DEL@RANGE.ENDD.KEY, TINDX="%(LVL_EXT_REC-1)");

   3501  0 000473   000100 100500                    MLR     fill='000'O
         0 000474   200043 000010                    ADSC9   SAVE_REC2,,AUTO          cn=0,n=8
         0 000475   200017 000010                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=8

   3501  0 000476   200043 720100                    LXL0    SAVE_REC2,,AUTO
         0 000477   000002 100003                    CMPX0   2,DU
         0 000500   000513 601000 0                  TNZ     s:3507

   3501  0 000501   200020 630500                    EPPR0   DEL@RANGE+10,,AUTO
         0 000502   200135 450500                    STP0    POS+18,,AUTO
         0 000503   200044 236100                    LDQ     SAVE_REC2+1,,AUTO
         0 000504   200134 756100                    STQ     POS+17,,AUTO
         0 000505   200134 630500                    EPPR0   POS+17,,AUTO
         0 000506   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000507   000000 701000 xent               TSX1    VDG$OCOPY
         0 000510   000512 702000 0                  TSX2    s:3502
         0 000511   000513 710000 0                  TRA     s:3507

   3502  0 000512   000000 702200 xent               TSX2  ! X66_AALT

      484     3504    3                 END;

      485     3505    2              END;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:82   

      486     3506
      487     3507    1           IF GET_LOC1 AND NOT LOC1_EXISTS THEN

   3507  0 000513   200074 234100                    SZN     GET_LOC1,,AUTO
         0 000514   000562 605000 0                  TPL     s:3528
         0 000515   200073 234100                    SZN     LOC1_EXISTS,,AUTO
         0 000516   000562 604000 0                  TMI     s:3528

      488     3508    2           DO CASE (BDT_CODE);

   3508  0 000517   200033 235100                    LDA     BDT_CODE,,AUTO
         0 000520   000012 115007                    CMPA    10,DL
         0 000521   000523 602005 0                  TNC     s:3508+4,AL
         0 000522   000562 710000 0                  TRA     s:3528
         0 000523   000562 710000 0                  TRA     s:3528
         0 000524   000535 710000 0                  TRA     s:3511
         0 000525   000535 710000 0                  TRA     s:3511
         0 000526   000562 710000 0                  TRA     s:3528
         0 000527   000562 710000 0                  TRA     s:3528
         0 000530   000561 710000 0                  TRA     s:3523
         0 000531   000562 710000 0                  TRA     s:3528
         0 000532   000561 710000 0                  TRA     s:3523
         0 000533   000562 710000 0                  TRA     s:3528
         0 000534   000550 710000 0                  TRA     s:3518

      489     3509
      490     3510    2            CASE (%BDT_2_REC_POS_NON, %BDT_2_REC_SPOS_NON_EPOS_0);

      491     3511    3              IF NOT LOC2_EXISTS THEN DO;

   3511  0 000535   200075 234100                    SZN     LOC2_EXISTS,,AUTO
         0 000536   000562 604000 0                  TMI     s:3528

      492     3512    3                 CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)

   3512  0 000537   200006 630500                    EPPR0   DEL@RANGE,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:83   
         0 000540   200135 450500                    STP0    POS+18,,AUTO
         0 000541   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000542   200134 756100                    STQ     POS+17,,AUTO
         0 000543   200134 630500                    EPPR0   POS+17,,AUTO
         0 000544   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000545   000000 701000 xent               TSX1    VDA$LDELETE
         0 000546   000764 702000 0                  TSX2    BTYPE_FAILED

      493     3513    3                   ALTRET (LDELETE_FAILED);
      494     3514    3                 GOTO LDELETED;

   3514  0 000547   000716 710000 0                  TRA     LDELETED

      495     3515    3                 END;
      496     3516
      497     3517    2            CASE (%BDT_SPOS_NON_EOF);

      498     3518    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)

   3518  0 000550   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000551   200135 450500                    STP0    POS+18,,AUTO
         0 000552   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000553   200134 756100                    STQ     POS+17,,AUTO
         0 000554   200134 630500                    EPPR0   POS+17,,AUTO
         0 000555   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000556   000000 701000 xent               TSX1    VDA$LDELETE
         0 000557   000764 702000 0                  TSX2    BTYPE_FAILED

      499     3519    2                ALTRET (LDELETE_FAILED);
      500     3520    2              GOTO LDELETED;

   3520  0 000560   000716 710000 0                  TRA     LDELETED

      501     3521
      502     3522    2            CASE (%BDT_1_REC_POS_NON, %BDT_1_REC_SPOS_0_EPOS_NON);

      503     3523    2              GOTO NONE_2_DELETE;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:84   

   3523  0 000561   000763 710000 0                  TRA     NONE_2_DELETE

      504     3524
      505     3525    2            END;  /* Do Case */

      506     3526
      507     3527
      508     3528    1           IF GET_LOC2 AND NOT LOC2_EXISTS THEN

   3528  0 000562   200076 234100                    SZN     GET_LOC2,,AUTO
         0 000563   000622 605000 0                  TPL     s:3538
         0 000564   200075 234100                    SZN     LOC2_EXISTS,,AUTO
         0 000565   000622 604000 0                  TMI     s:3538

      509     3529    2           DO CASE (BDT_CODE);

   3529  0 000566   200033 235100                    LDA     BDT_CODE,,AUTO
         0 000567   000017 115007                    CMPA    15,DL
         0 000570   000572 602005 0                  TNC     s:3529+4,AL
         0 000571   000622 710000 0                  TRA     s:3538
         0 000572   000622 710000 0                  TRA     s:3538
         0 000573   000622 710000 0                  TRA     s:3538
         0 000574   000622 710000 0                  TRA     s:3538
         0 000575   000611 710000 0                  TRA     s:3532
         0 000576   000622 710000 0                  TRA     s:3538
         0 000577   000622 710000 0                  TRA     s:3538
         0 000600   000622 710000 0                  TRA     s:3538
         0 000601   000622 710000 0                  TRA     s:3538
         0 000602   000622 710000 0                  TRA     s:3538
         0 000603   000622 710000 0                  TRA     s:3538
         0 000604   000622 710000 0                  TRA     s:3538
         0 000605   000622 710000 0                  TRA     s:3538
         0 000606   000622 710000 0                  TRA     s:3538
         0 000607   000622 710000 0                  TRA     s:3538
         0 000610   000611 710000 0                  TRA     s:3532

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:85   
      510     3530
      511     3531    2            CASE (%BDT_2_REC_SPOS_0_EPOS_NON, %BDT_BOF_EPOS_NON);

      512     3532    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)

   3532  0 000611   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000612   200135 450500                    STP0    POS+18,,AUTO
         0 000613   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000614   200134 756100                    STQ     POS+17,,AUTO
         0 000615   200134 630500                    EPPR0   POS+17,,AUTO
         0 000616   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000617   000000 701000 xent               TSX1    VDA$LDELETE
         0 000620   000764 702000 0                  TSX2    BTYPE_FAILED

      513     3533    2                ALTRET (LDELETE_FAILED);
      514     3534    2              GOTO LDELETED;

   3534  0 000621   000716 710000 0                  TRA     LDELETED

      515     3535    2            END;  /* Do Case */

      516     3536
      517     3537
      518     3538    2           IF BNR_TYPE = %BNR_ON_2_RECS THEN DO;

   3538  0 000622   200034 235100                    LDA     BNR_TYPE,,AUTO
         0 000623   000002 115007                    CMPA    2,DL
         0 000624   000635 601000 0                  TNZ     s:3543

      519     3539    2              S_POS = LOC1.POSITION#;

   3539  0 000625   200061 236100                    LDQ     LOC1+8,,AUTO
         0 000626   000022 732000                    QRS     18
         0 000627   200031 756100                    STQ     S_POS,,AUTO

      520     3540    2              E_POS = LOC2.POSITION#;

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:86   
   3540  0 000630   200072 235100                    LDA     LOC2+8,,AUTO
         0 000631   000022 731000                    ARS     18
         0 000632   200030 755100                    STA     E_POS,,AUTO

      521     3541    2              DEL@RANGE.ENDD.POSITION# = LOC2.POSITION#;

   3541  0 000633   000000 620005                    EAX0    0,AL
         0 000634   200027 740100                    STX0    DEL@RANGE+17,,AUTO

      522     3542    2              END;

      523     3543    1           CALL VDG$BUILD_NEW_REC (BNR_TYPE, SAVE_REC1, S_POS, SAVE_REC2, E_POS)

   3543  0 000635   200030 630500                    EPPR0   E_POS,,AUTO
         0 000636   200140 450500                    STP0    POS+21,,AUTO
         0 000637   200043 631500                    EPPR1   SAVE_REC2,,AUTO
         0 000640   200137 451500                    STP1    POS+20,,AUTO
         0 000641   200031 633500                    EPPR3   S_POS,,AUTO
         0 000642   200136 453500                    STP3    POS+19,,AUTO
         0 000643   200035 634500                    EPPR4   SAVE_REC1,,AUTO
         0 000644   200135 454500                    STP4    POS+18,,AUTO
         0 000645   200034 635500                    EPPR5   BNR_TYPE,,AUTO
         0 000646   200134 455500                    STP5    POS+17,,AUTO
         0 000647   200134 630500                    EPPR0   POS+17,,AUTO
         0 000650   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000651   000000 701000 xent               TSX1    VDG$BUILD_NEW_REC
         0 000652   000764 702000 0                  TSX2    BTYPE_FAILED

      524     3544    1             ALTRET (BUILD_NEW_REC_FAILED);
      525     3545
      526     3546
      527     3547                /* Set up the deletes */
      528     3548
      529     3549    1           VD_$RECORDS_DELETED.V# = 0;

   3549  0 000653   000003 450000 xsym               STZ     VD_$RECORDS_DELETED+3

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:87   
      530     3550    2           IF BNR_TYPE ~= %BNR_ON_1_REC THEN DO;

   3550  0 000654   200034 235100                    LDA     BNR_TYPE,,AUTO
         0 000655   000001 115007                    CMPA    1,DL
         0 000656   000675 600000 0                  TZE     s:3558

      531     3551    2              IF NOT LOC2_EXISTS THEN /* Tell COVER if eof boundary is gone */

   3551  0 000657   200075 234100                    SZN     LOC2_EXISTS,,AUTO
         0 000660   000663 604000 0                  TMI     s:3553

      532     3552    2                 VD_EOF_DELETED = MY_EOF_DELETED;

   3552  0 000661   200077 236100                    LDQ     MY_EOF_DELETED,,AUTO
         0 000662   000000 756000 xsym               STQ     VD_EOF_DELETED

      533     3553    2              CALL VDA$LDELETE (DEL_STREAM, DEL@RANGE)

   3553  0 000663   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000664   200135 450500                    STP0    POS+18,,AUTO
         0 000665   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 000666   200134 756100                    STQ     POS+17,,AUTO
         0 000667   200134 630500                    EPPR0   POS+17,,AUTO
         0 000670   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000671   000000 701000 xent               TSX1    VDA$LDELETE
         0 000672   000764 702000 0                  TSX2    BTYPE_FAILED

      534     3554    2                ALTRET (LDELETE_FAILED);
      535     3555    2              VD_$RECORDS_DELETED.V# = VD_$RECORDS_DELETED.V# - 1;

   3555  0 000673   000001 336007                    LCQ     1,DL
         0 000674   000003 056000 xsym               ASQ     VD_$RECORDS_DELETED+3

      536     3556    2              END;

      537     3557
      538     3558    1           CALL VDE$RPUT (DEL_STREAM, EDIT_BLOCK.RANGE, EDIT_BLOCK.OPTIONS,
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:88   

   3558  0 000675   000004 236000 1                  LDQ     4
         0 000676   200140 756100                    STQ     POS+21,,AUTO
         0 000677   200035 630500                    EPPR0   SAVE_REC1,,AUTO
         0 000700   200137 450500                    STP0    POS+20,,AUTO
         0 000701   200005 236100                    LDQ     @EDIT_BLOCK,,AUTO
         0 000702   000025 036003                    ADLQ    21,DU
         0 000703   200136 756100                    STQ     POS+19,,AUTO
         0 000704   200005 236100                    LDQ     @EDIT_BLOCK,,AUTO
         0 000705   000003 036003                    ADLQ    3,DU
         0 000706   200004 235100                    LDA     @DEL_STREAM,,AUTO
         0 000707   200134 757100                    STAQ    POS+17,,AUTO
         0 000710   200134 630500                    EPPR0   POS+17,,AUTO
         0 000711   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000712   000000 701000 xent               TSX1    VDE$RPUT
         0 000713   000764 702000 0                  TSX2    BTYPE_FAILED

      539     3559    1             SAVE_REC1, %SQ_CURRENT)
      540     3560    1             ALTRET (RPUT_FAILED);
      541     3561    1           CALL XLATE_LOCATIONS;

   3561  0 000714   001142 701000 0                  TSX1    XLATE_LOCATIONS
         0 000715   000000 011000                    NOP     0

   3559  0 000716                       LDELETED     null
      542     3562
      543     3563    1   LDELETED: ;
      544     3564    1           IF VD_$RECORDS_DELETED.V# = 0 THEN

   3564  0 000716   000003 235000 xsym               LDA     VD_$RECORDS_DELETED+3
         0 000717   000722 601000 0                  TNZ     NOTHING_2_DELETE

      545     3565        /* If LDELETE deleted no records, fix up the reported value. */
      546     3566    1              VD_$RECORDS_DELETED.V# = -1;

   3566  0 000720   000001 336007                    LCQ     1,DL
         0 000721   000003 756000 xsym               STQ     VD_$RECORDS_DELETED+3
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:89   

      547     3567
      548     3568    1   NOTHING_2_DELETE:
      549     3569    1           CALL VDG$OFREE (SAVE_REC1_BUF)

   3569  0 000722   200041 630500       NOTHING_2_D* EPPR0   SAVE_REC1+4,,AUTO
         0 000723   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000724   000000 701000 xent               TSX1    VDG$OFREE
         0 000725   000764 702000 0                  TSX2    BTYPE_FAILED

      550     3570    1             ALTRET (OFREE_FAILED);
      551     3571    1           SAVE_REC1.DATA$ = ADDR(NIL);

   3571  0 000726   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000727   200041 756100                    STQ     SAVE_REC1+4,,AUTO

      552     3572    1           CALL VDG$OFREE (SAVE_REC2_BUF)

   3572  0 000730   200047 630500                    EPPR0   SAVE_REC2+4,,AUTO
         0 000731   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000732   000000 701000 xent               TSX1    VDG$OFREE
         0 000733   000764 702000 0                  TSX2    BTYPE_FAILED

      553     3573    1             ALTRET (OFREE_FAILED);
      554     3574    1           SAVE_REC2.DATA$ = ADDR(NIL);

   3574  0 000734   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000735   200047 756100                    STQ     SAVE_REC2+4,,AUTO

      555     3575
      556     3576                /*
      557     3577                *   Need to shrink down the range descriptor down to one point.
      558     3578                */
      559     3579
      560     3580    1           CALL VDG$OCLEAR_LOCATION (DEL_RANGE.ENDD)

   3580  0 000736   200003 236100                    LDQ     @DEL_RANGE,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:90   
         0 000737   000011 036003                    ADLQ    9,DU
         0 000740   200134 756100                    STQ     POS+17,,AUTO
         0 000741   200134 630500                    EPPR0   POS+17,,AUTO
         0 000742   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000743   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000744   000764 702000 0                  TSX2    BTYPE_FAILED

      561     3581    1             ALTRET (OCLEAR_LOCATION_FAILED);
      562     3582    1           CALL VDG$OCOPY_LOCATION (DEL_RANGE.START, DEL_RANGE.ENDD)

   3582  0 000745   200003 236100                    LDQ     @DEL_RANGE,,AUTO
         0 000746   000011 036003                    ADLQ    9,DU
         0 000747   200003 235100                    LDA     @DEL_RANGE,,AUTO
         0 000750   200134 757100                    STAQ    POS+17,,AUTO
         0 000751   200134 630500                    EPPR0   POS+17,,AUTO
         0 000752   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000753   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000754   000764 702000 0                  TSX2    BTYPE_FAILED

      563     3583    1             ALTRET (OCOPY_LOCATION_FAILED);
      564     3584
      565     3585    1           CALL VDG$OCLEAR_RANGE (DEL@RANGE);

   3585  0 000755   200006 630500                    EPPR0   DEL@RANGE,,AUTO
         0 000756   200134 450500                    STP0    POS+17,,AUTO
         0 000757   200134 630500                    EPPR0   POS+17,,AUTO
         0 000760   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000761   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         0 000762   000000 011000                    NOP     0

      566     3586    1   NONE_2_DELETE:
      567     3587    1           RETURN;

   3587  0 000763   000000 702200 xent  NONE_2_DELE* TSX2  ! X66_ARET

   3574  0 000764                       BTYPE_FAILED null
   3574  0 000764                       OCOPY_RANGE* null
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:91   
      568     3588
      569     3589
      570     3590
      571     3591    1   BTYPE_FAILED: ;
      572     3592    1   OCOPY_RANGE_FAILED: ;
      573     3593    1   OCOPY_LOCATION_FAILED: ;

   3593  0 000764                       OCOPY_LOCAT* null
   3593  0 000764                       OCLEAR_LOCA* null
   3593  0 000764                       LDELETE_FAI* null
   3593  0 000764                       LREAD_FAILED null
   3593  0 000764                       RPUT_FAILED  null
   3593  0 000764                       OFREE_FAILED null
   3593  0 000764                       OALLOC_FAIL* null
   3593  0 000764                       GET_RECORD_* null
   3593  0 000764                       BUILD_NEW_R* null
      574     3594    1   OCLEAR_LOCATION_FAILED: ;
      575     3595    1   LDELETE_FAILED: ;
      576     3596    1   LREAD_FAILED: ;
      577     3597    1   RPUT_FAILED: ;
      578     3598    1   OFREE_FAILED: ;
      579     3599    1   OALLOC_FAILED: ;
      580     3600    1   GET_RECORD_FAILED: ;
      581     3601    1   BUILD_NEW_REC_FAILED: ;
      582     3602    1           ALTRETURN;

   3602  0 000764   000000 702200 xent               TSX2  ! X66_AALT

      583     3603
      584     3604
      585     3605                %BOX (TITLE=GET_RECORD, PAGE=YES);
              3613    1
              3617    1   /***************************************************************************
              3619    1    *                                                                         *
              3623    1            *                                 GET_RECORD                             *
              3625    1            *                                                                        *
              3627    1          ***************************************************************************/
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:92   

      586     3631
      587     3632        /*I* NAME: GET_RECORD
      588     3633            PARAMETERS:
      589     3634                LOC - VD$LOCATION of record to get.
      590     3635                RECORD - Uninitialized VD$NODE_DESC.
      591     3636                RECORD_EXISTS - Uninitialized BIT(1) ALIGNED.
      592     3637                READ_ONLY_IF_EXISTS - BIT(1) ALIGNED; set if we only want to read the
      593     3638                   LOC record if it exists in the file.
      594     3639            INPUT:
      595     3640            OUTPUT:
      596     3641                RECORD_EXISTS will be set if the LOC key exists in the file.
      597     3642                RECORD will be %CLEAR if we didn't read the record; else will contain
      598     3643                    the LOC record or, if RECORD_EXISTS returned false, may contain
      599     3644                    the record following the LOC location.
      600     3645                    This record will be truncated/extended so that LOC.POSITION#
      601     3646                    is the exact length of LOC.DATA$'s buffer.
      602     3647                LOC - If the record doesn't exists, LOC.POSITION# will be set to
      603     3648                Thus, on any return, LOC.POSITION# will be the length of the LOC record.
      604     3649            DESCRIPTION:
      605     3650                Position the file to LOC; if the record doesn't exist, and
      606     3651                    READ_ONLY_IF_EXISTS is set, then return with RECORD = %CLEAR.
      607     3652                Else VDE$RGET the record, and VDE$RADJUST_LENGTH it to LOC.POSITION#'s
      608     3653                    value.
      609     3654        */
      610     3655
      611     3656    1   GET_RECORD: PROC (LOC, RECORD, RECORD_EXISTS, READ_ONLY_IF_EXISTS) ALTRET;

   3656  0 000765   200104 741300       GET_RECORD   STX1  ! RANGE_KEY$+2,,AUTO

      612     3657
      613     3658        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
      614     3686        %VD$NODE_DESC (NAME=RECORD, STCLASS=PARAM);
      615     3728    2   DCL RECORD_EXISTS BIT(1) ALIGNED;
      616     3729    2   DCL READ_ONLY_IF_EXISTS  BIT(1) ALIGNED;
      617     3730
      618     3731
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:93   
      619     3732    2   DCL STREAM_KEY$ PTR;
      620     3733    2   DCL LOC_KEY$ PTR;
      621     3734    2   DCL POS UBIN;
      622     3735
      623     3736
      624     3737        %VD$BUFFER (NAME=RECORD_BUF, STCLASS="BASED(RECORD.DATA$)");
      625     3795        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
      626     3818        %VD$TEXTC (NAME=LOC$KEY, STCLASS="BASED(LOC_KEY$)");
      627     3841        %VD$TEXTC_REMOTE;
      628     3902
      629     3903
      630     3904
      631     3905    2           RECORD_EXISTS = %TRUE;  /* Assume LOC record exists */

   3905  0 000766   400000 236003                    LDQ     -131072,DU
         0 000767   200107 470500                    LDP0    @RECORD_EXISTS,,AUTO
         0 000770   000000 756100                    STQ     0,,PR0

      632     3906    2           RECORD = %CLEAR;

   3906  0 000771   200106 471500                    LDP1    @RECORD,,AUTO
         0 000772   000100 100400                    MLR     fill='000'O
         0 000773   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000774   100000 000030                    ADSC9   0,,PR1                   cn=0,n=24

      633     3907    2           RECORD.DATA$ = ADDR(NIL);

   3907  0 000775   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000776   100004 756100                    STQ     4,,PR1

      634     3908
      635     3909    2           CALL VDA$LREAD (DEL_STREAM, LOC, 0, %TRUE)

   3909  0 000777   000006 237000 1                  LDAQ    6
         0 001000   200136 757100                    STAQ    POS+19,,AUTO
         0 001001   200105 236100                    LDQ     @LOC,,AUTO
         0 001002   200004 235100                    LDA     @DEL_STREAM,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:94   
         0 001003   200134 757100                    STAQ    POS+17,,AUTO
         0 001004   200134 630500                    EPPR0   POS+17,,AUTO
         0 001005   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 001006   000000 701000 xent               TSX1    VDA$LREAD
         0 001007   001140 702000 0                  TSX2    LREAD_FAILED

      636     3910    2             ALTRET (LREAD_FAILED);
      637     3911    3           IF DEL_STREAM.CURRENT.EOF THEN DO;

   3911  0 001010   200004 470500                    LDP0    @DEL_STREAM,,AUTO
         0 001011   000016 236100                    LDQ     14,,PR0
         0 001012   400000 316007                    CANQ    -131072,DL
         0 001013   001023 600000 0                  TZE     s:3925

      638     3912    3              RECORD_EXISTS = %FALSE;

   3912  0 001014   200107 471500                    LDP1    @RECORD_EXISTS,,AUTO
         0 001015   100000 450100                    STZ     0,,PR1

      639     3913    3              LOC.POSITION# = 0;

   3913  0 001016   000000 220003                    LDX0    0,DU
         0 001017   200105 473500                    LDP3    @LOC,,AUTO
         0 001020   300010 740100                    STX0    8,,PR3

      640     3914    3              RETURN;

   3914  0 001021   200104 221300                    LDX1  ! RANGE_KEY$+2,,AUTO
         0 001022   000001 702211                    TSX2  ! 1,X1

      641     3915    3              END;
      642     3916
      643     3917                %GETKEY (KEY=DEL_STREAM.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
      644     3918                PTR=STREAM_KEY$);

   3925  0 001023   000006 720100                    LXL0    6,,PR0
         0 001024   000002 100003                    CMPX0   2,DU
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:95   
         0 001025   001032 601000 0                  TNZ     s:3925+7

   3925  0 001026   000007 471500                    LDP1    7,,PR0
         0 001027   100002 633500                    EPPR3   2,,PR1
         0 001030   200111 453500                    STP3    STREAM_KEY$,,AUTO
         0 001031   001035 710000 0                  TRA     s:3935

   3925  0 001032   200004 236100                    LDQ     @DEL_STREAM,,AUTO
         0 001033   000007 036003                    ADLQ    7,DU
         0 001034   200111 756100                    STQ     STREAM_KEY$,,AUTO

      645     3928                %GETKEY (KEY=LOC.KEY, INDX="%(LVL_EXT_REC-1)", PTR=LOC_KEY$);

   3935  0 001035   200105 471500                    LDP1    @LOC,,AUTO
         0 001036   100000 721100                    LXL1    0,,PR1
         0 001037   000002 101003                    CMPX1   2,DU
         0 001040   001045 601000 0                  TNZ     s:3935+8

   3935  0 001041   100001 473500                    LDP3    1,,PR1
         0 001042   300002 634500                    EPPR4   2,,PR3
         0 001043   200112 454500                    STP4    LOC_KEY$,,AUTO
         0 001044   001050 710000 0                  TRA     s:3938

   3935  0 001045   200105 236100                    LDQ     @LOC,,AUTO
         0 001046   000001 036003                    ADLQ    1,DU
         0 001047   200112 756100                    STQ     LOC_KEY$,,AUTO

      646     3938    3           IF STREAM$KEY.BYTES ~= LOC$KEY.BYTES THEN DO;

   3938  0 001050   200111 473500                    LDP3    STREAM_KEY$,,AUTO
         0 001051   300000 236100                    LDQ     0,,PR3
         0 001052   000033 772000                    QRL     27
         0 001053   200112 474500                    LDP4    LOC_KEY$,,AUTO
         0 001054   000000 622006                    EAX2    0,QL
         0 001055   400000 236100                    LDQ     0,,PR4
         0 001056   000033 772000                    QRL     27
         0 001057   000000 623006                    EAX3    0,QL
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:96   
         0 001060   040140 106540                    CMPC    fill='040'O
         0 001061   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         0 001062   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         0 001063   001070 600000 0                  TZE     s:3943

      647     3939    3              RECORD_EXISTS = %FALSE;

   3939  0 001064   200107 475500                    LDP5    @RECORD_EXISTS,,AUTO
         0 001065   500000 450100                    STZ     0,,PR5

      648     3940    3              LOC.POSITION# = 0;

   3940  0 001066   000000 220003                    LDX0    0,DU
         0 001067   100010 740100                    STX0    8,,PR1

      649     3941    3              END;

      650     3942
      651     3943    2           IF RECORD_EXISTS OR NOT READ_ONLY_IF_EXISTS THEN

   3943  0 001070   200107 475500                    LDP5    @RECORD_EXISTS,,AUTO
         0 001071   500000 234100                    SZN     0,,PR5
         0 001072   001076 604000 0                  TMI     READ_THE_RECORD
         0 001073   200110 476500                    LDP6    @READ_ONLY_IF_EXISTS,,AUTO
         0 001074   600000 234100                    SZN     0,,PR6
         0 001075   001136 604000 0                  TMI     s:3955

      652     3944    3   READ_THE_RECORD: DO;

   3944  0 001076                       READ_THE_RE* null
      653     3945    3              CALL VDE$RGET (DEL_STREAM, EDIT_BLOCK.RANGE, RECORD)

   3945  0 001076   200106 236100                    LDQ     @RECORD,,AUTO
         0 001077   200136 756100                    STQ     POS+19,,AUTO
         0 001100   200005 236100                    LDQ     @EDIT_BLOCK,,AUTO
         0 001101   000003 036003                    ADLQ    3,DU
         0 001102   200004 235100                    LDA     @DEL_STREAM,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:97   
         0 001103   200134 757100                    STAQ    POS+17,,AUTO
         0 001104   200134 630500                    EPPR0   POS+17,,AUTO
         0 001105   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 001106   000000 701000 xent               TSX1    VDE$RGET
         0 001107   001140 702000 0                  TSX2    LREAD_FAILED

      654     3946    3                ALTRET (RGET_FAILED);
      655     3947
      656     3948    3              POS = LOC.POSITION#; /* Need WORD for VDE$RADJUST_LENGTH call */

   3948  0 001110   200105 470500                    LDP0    @LOC,,AUTO
         0 001111   000010 236100                    LDQ     8,,PR0
         0 001112   000022 732000                    QRS     18
         0 001113   200113 756100                    STQ     POS,,AUTO

      657     3949    3              IF POS > RECORD_BUF.LENGTH# THEN

   3949  0 001114   200106 471500                    LDP1    @RECORD,,AUTO
         0 001115   100004 473500                    LDP3    4,,PR1
         0 001116   300002 236100                    LDQ     2,,PR3
         0 001117   000022 732000                    QRS     18
         0 001120   001123 604000 0                  TMI     s:3950
         0 001121   200113 116100                    CMPQ    POS,,AUTO
         0 001122   001133 603000 0                  TRC     s:3952

      658     3950    3                 CALL VDE$RADJUST_LENGTH (RECORD, POS)

   3950  0 001123   200113 634500                    EPPR4   POS,,AUTO
         0 001124   200135 454500                    STP4    POS+18,,AUTO
         0 001125   200106 236100                    LDQ     @RECORD,,AUTO
         0 001126   200134 756100                    STQ     POS+17,,AUTO
         0 001127   200134 630500                    EPPR0   POS+17,,AUTO
         0 001130   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 001131   000000 701000 xent               TSX1    VDE$RADJUST_LENGTH
         0 001132   001140 702000 0                  TSX2    LREAD_FAILED

      659     3951    3                   ALTRET (RADJUST_LEN_FAILED);
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:98   
      660     3952    3              RECORD_EXISTS = %TRUE;

   3952  0 001133   400000 236003                    LDQ     -131072,DU
         0 001134   200107 470500                    LDP0    @RECORD_EXISTS,,AUTO
         0 001135   000000 756100                    STQ     0,,PR0

      661     3953    3              END READ_THE_RECORD;

      662     3954
      663     3955    2           RETURN;

   3955  0 001136   200104 221300                    LDX1  ! RANGE_KEY$+2,,AUTO
         0 001137   000001 702211                    TSX2  ! 1,X1

   3952  0 001140                       LREAD_FAILED null
   3952  0 001140                       RADJUST_LEN* null
   3952  0 001140                       RGET_FAILED  null
      664     3956
      665     3957
      666     3958    2   LREAD_FAILED: ;
      667     3959    2   RADJUST_LEN_FAILED: ;
      668     3960    2   RGET_FAILED: ;
      669     3961    2           ALTRETURN;

   3961  0 001140   200104 221300                    LDX1  ! RANGE_KEY$+2,,AUTO
         0 001141   000000 702211                    TSX2  ! 0,X1

      670     3962
      671     3963    2   END GET_RECORD;
      672     3964
      673     3965                %BOX (TITLE=XLATE_LOCATIONS, PAGE=YES);
              3973    2
              3977    2   /***************************************************************************
              3979    2    *                                                                         *
              3983    2            *                              XLATE_LOCATIONS                           *
              3985    2            *                                                                        *
              3987    2          ***************************************************************************/
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:99   

      674     3991
      675     3992        /*I* NAME: XLATE_LOCATIONS
      676     3993            PARAMETERS:
      677     3994                None.
      678     3995            INPUT:
      679     3996            OUTPUT:
      680     3997            DESCRIPTION:
      681     3998        */
      682     3999
      683     4000    1   XLATE_LOCATIONS: PROC  ALTRET;

   4000  0 001142   200104 741300       XLATE_LOCAT* STX1  ! RANGE_KEY$+2,,AUTO

      684     4001
      685     4002
      686     4003        %VD$XLATE_LOCATIONS (NAME=XLATE$LOC, STCLASS=AUTO);
      687     4139
      688     4140    2           XLATE$LOC = %CLEAR;

   4140  0 001143   000100 100400                    MLR     fill='000'O
         0 001144   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 001145   200105 000134                    ADSC9   XLATE$LOC,,AUTO          cn=0,n=92

      689     4141    2           XLATE$LOC.FILE_KEY = EDIT_BLOCK.FILE_KEY;

   4141  0 001146   200005 470500                    LDP0    @EDIT_BLOCK,,AUTO
         0 001147   000100 100500                    MLR     fill='000'O
         0 001150   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
         0 001151   200110 000010                    ADSC9   @READ_ONLY_IF_EXISTS,,AUTO cn=0,n=8

      690     4142    2           XLATE$LOC.FLINK$ = ADDR(NIL);

   4142  0 001152   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 001153   200107 756100                    STQ     @RECORD_EXISTS,,AUTO

      691     4143    2           XLATE$LOC.LEVEL# = %LVL_EXT_REC;
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:100  

   4143  0 001154   000001 220003                    LDX0    1,DU
         0 001155   200112 740100                    STX0    LOC_KEY$,,AUTO

      692     4144
      693     4145    3           DO CASE (BDT_CODE);

   4145  0 001156   200033 235100                    LDA     BDT_CODE,,AUTO
         0 001157   000021 115007                    CMPA    17,DL
         0 001160   001162 602005 0                  TNC     s:4145+4,AL
         0 001161   001211 710000 0                  TRA     s:4204
         0 001162   001211 710000 0                  TRA     s:4204
         0 001163   001211 710000 0                  TRA     s:4204
         0 001164   001206 710000 0                  TRA     s:4179
         0 001165   001211 710000 0                  TRA     s:4204
         0 001166   001203 710000 0                  TRA     s:4160
         0 001167   001211 710000 0                  TRA     s:4204
         0 001170   001211 710000 0                  TRA     s:4204
         0 001171   001211 710000 0                  TRA     s:4204
         0 001172   001211 710000 0                  TRA     s:4204
         0 001173   001203 710000 0                  TRA     s:4160
         0 001174   001203 710000 0                  TRA     s:4160
         0 001175   001211 710000 0                  TRA     s:4204
         0 001176   001211 710000 0                  TRA     s:4204
         0 001177   001211 710000 0                  TRA     s:4204
         0 001200   001211 710000 0                  TRA     s:4204
         0 001201   001203 710000 0                  TRA     s:4160
         0 001202   001203 710000 0                  TRA     s:4160

      694     4146
      695     4147    3            CASE (%BDT_SPOS_0_EOF,%BDT_BOF_EOF,%BDT_SPOS_NON_EOF,

      696     4148    3             %BDT_2_REC_POS_0,%BDT_BOF_EPOS_0);
      697     4149                   /*
      698     4150                   *   Block shape is:  a number of whole records:
      699     4151                   *     ----------------------------
      700     4152                   *     |                          |
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:101  
      701     4153                   *     |                          |
      702     4154                   *     ----------------------------
      703     4155                   *   or: partial record to EOF.
      704     4156                   *   At this point, DEL@RANGE.ENDD contains the last key
      705     4157                   *     actually deleted, not (as you might expect) the
      706     4158                   *     key just beyond the last key deleted.
      707     4159                   */
      708     4160    3              DEL@RANGE.ENDD.POSITION# = %HALF_INFINITY;

   4160  0 001203   377777 222003                    LDX2    131071,DU
         0 001204   200027 742100                    STX2    DEL@RANGE+17,,AUTO
         0 001205   001211 710000 0                  TRA     s:4204

      709     4161    3            CASE (%BDT_2_REC_SPOS_NON_EPOS_0);

      710     4162                   /*
      711     4163                   *  Block shape is:  partial record at start, # whole records.
      712     4164                   *                     ------------
      713     4165                   *                     |          |
      714     4166                   *     -----------------          |
      715     4167                   *     |                          |
      716     4168                   *     ----------------------------
      717     4169                   *   At this point:
      718     4170                   *   For BDT_2REC_SPOS_NON_EPOS_0, DEL@RANGE.ENDD is
      719     4171                   *     basically unchanged.  However, the record it refers
      720     4172                   *     to (which is one beyond the last record the
      721     4173                   *     user requested us to delete) has been moved and
      722     4174                   *     "pasted" onto the SAVE_REC1.KEY record (basically,
      723     4175                   *     the DEL@RANGE.START record).  Therefore VD$LOCATIONs
      724     4176                   *     referring to the DEL@RANGE.ENDD record must also be
      725     4177                   *     translated.
      726     4178                   */
      727     4179    3              DEL@RANGE.ENDD.POSITION# = 0;

   4179  0 001206   000000 222003                    LDX2    0,DU
         0 001207   200027 742100                    STX2    DEL@RANGE+17,,AUTO
         0 001210   001211 710000 0                  TRA     s:4204
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:102  

      728     4180    3            CASE ( ELSE);

      729     4181                   /*
      730     4182                   *  Block shape is:  # whole records, partial last record.
      731     4183                   *     -------------------------------
      732     4184                   *     |                             |
      733     4185                   *     |               ---------------
      734     4186                   *     |               |
      735     4187                   *     -----------------
      736     4188                   *  OR:  partial first and last recs, # whole recs
      737     4189                   *                     ---------------
      738     4190                   *                     |             |
      739     4191                   *     -----------------             |
      740     4192                   *     |                             |
      741     4193                   *     |           -------------------
      742     4194                   *     |           |
      743     4195                   *     -------------
      744     4196                   *  OR:  part of one record (less than whole).
      745     4197                   *                     ---------------
      746     4198                   *                     |             |
      747     4199                   *                     ---------------
      748     4200                   */
      749     4201
      750     4202    3            END; /*DO CASE */

      751     4203
      752     4204    2           XLATE$LOC.N_ENTRIES# = 1;

   4204  0 001211   200106 740100                    STX0    @RECORD,,AUTO

      753     4205
      754     4206    2           XLATE$LOC.XLATES.OLD_KEY_LO(0) = DEL@RANGE.START.KEY(%LVL_EXT_REC-1);

   4206  0 001212   200006 237100                    LDAQ    DEL@RANGE,,AUTO
         0 001213   200124 757100                    STAQ    POS+9,,AUTO

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:103  
      755     4207    2           XLATE$LOC.XLATES.OLD_KEY_HI(0) = DEL@RANGE.ENDD.KEY(%LVL_EXT_REC-1);

   4207  0 001214   000100 100500                    MLR     fill='000'O
         0 001215   200017 000010                    ADSC9   DEL@RANGE+9,,AUTO        cn=0,n=8
         0 001216   200126 000010                    ADSC9   POS+11,,AUTO             cn=0,n=8

      756     4208
      757     4209    2           XLATE$LOC.XLATES.OLD_POS_LO#(0) = DEL@RANGE.START.POSITION#;

   4209  0 001217   200016 222100                    LDX2    DEL@RANGE+8,,AUTO
         0 001220   200130 742100                    STX2    POS+13,,AUTO

      758     4210    2           XLATE$LOC.XLATES.OLD_POS_HI#(0) = DEL@RANGE.ENDD.POSITION#;

   4210  0 001221   200027 223100                    LDX3    DEL@RANGE+17,,AUTO
         0 001222   200130 443100                    SXL3    POS+13,,AUTO

      759     4211
      760     4212    2           XLATE$LOC.XLATES.NEW_KEY(0) = SAVE_REC1.KEY;

   4212  0 001223   000100 100500                    MLR     fill='000'O
         0 001224   200035 000010                    ADSC9   SAVE_REC1,,AUTO          cn=0,n=8
         0 001225   200131 000010                    ADSC9   POS+14,,AUTO             cn=0,n=8

      761     4213    2           XLATE$LOC.XLATES.NEW_POS#(0) = S_POS;

   4213  0 001226   200031 724100                    LXL4    S_POS,,AUTO
         0 001227   200133 744100                    STX4    POS+16,,AUTO

      762     4214    2           IF XLATE$LOC.XLATES.OLD_POS_HI#(0) < %HALF_INFINITY THEN

   4214  0 001230   377777 103003                    CMPX3   131071,DU
         0 001231   001243 605000 0                  TPL     s:4217

      763     4215    2              XLATE$LOC.XLATES.NEW_POS_INCR#(0) =

   4215  0 001232   200130 236100                    LDQ     POS+13,,AUTO
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:104  
         0 001233   000022 736000                    QLS     18
         0 001234   000022 732000                    QRS     18
         0 001235   200134 756100                    STQ     POS+17,,AUTO
         0 001236   200133 236100                    LDQ     POS+16,,AUTO
         0 001237   000022 732000                    QRS     18
         0 001240   200134 136100                    SBLQ    POS+17,,AUTO
         0 001241   000000 625006                    EAX5    0,QL
         0 001242   200133 445100                    SXL5    POS+16,,AUTO

      764     4216    2                XLATE$LOC.XLATES.NEW_POS#(0) - XLATE$LOC.XLATES.OLD_POS_HI#(0);
      765     4217    2           CALL VDG$XLATE_LOCATIONS (XLATE$LOC, %XLATE_LOCATION)

   4217  0 001243   000004 236000 1                  LDQ     4
         0 001244   200135 756100                    STQ     POS+18,,AUTO
         0 001245   200105 631500                    EPPR1   XLATE$LOC,,AUTO
         0 001246   200134 451500                    STP1    POS+17,,AUTO
         0 001247   200134 630500                    EPPR0   POS+17,,AUTO
         0 001250   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 001251   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         0 001252   001255 702000 0                  TSX2    XLATE_FAILED

      766     4218    2             ALTRET (XLATE_FAILED);
      767     4219
      768     4220    2           RETURN;

   4220  0 001253   200104 221300                    LDX1  ! RANGE_KEY$+2,,AUTO
         0 001254   000001 702211                    TSX2  ! 1,X1

      769     4221
      770     4222
      771     4223    2   XLATE_FAILED:
      772     4224    2           ALTRETURN;

   4224  0 001255   200104 221300       XLATE_FAILED LDX1  ! RANGE_KEY$+2,,AUTO
         0 001256   000000 702211                    TSX2  ! 0,X1
      773     4225
      774     4226
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:105  
      775     4227    2   END XLATE_LOCATIONS;
      776     4228
      777     4229
      778     4230    1   END VDI$BDELETE;
      779     4231        %EOD;

PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:106  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BDELETE.
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:107  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DEL_RANGE                 4-0-0/w PTR         r     1 @DEL_STREAM
     5-0-0/w PTR         r     1 @EDIT_BLOCK              105-0-0/w PTR         r     1 @LOC
   110-0-0/w PTR         r     1 @READ_ONLY_IF_EXISTS     106-0-0/w PTR         r     1 @RECORD
   107-0-0/w PTR         r     1 @RECORD_EXISTS            33-0-0/w UBIN        r     1 BDT_CODE
    34-0-0/w UBIN        r     1 BNR_TYPE                   6-0-0/w STRC(648)   r     1 DEL@RANGE
    *0-0-0/w STRC(648)   r     1 DEL_RANGE                 *0-0-0/w STRC(864)   r     1 DEL_STREAM
    *0-0-0/w STRC(936)   r     1 EDIT_BLOCK                30-0-0/w UBIN        r     1 E_POS
    74-0-0/w BIT         r     1 GET_LOC1                  76-0-0/w BIT         r     1 GET_LOC2
    *0-0-0/w STRC(324)   r     1 LOC                       51-0-0/w STRC(324)   r     1 LOC1
    73-0-0/w BIT         r     1 LOC1_EXISTS               62-0-0/w STRC(324)   r     1 LOC2
    75-0-0/w BIT         r     1 LOC2_EXISTS              112-0-0/w PTR         r     1 LOC_KEY$
    77-0-0/b BIT         r     1 MY_EOF_DELETED           113-0-0/w UBIN        r     1 POS
   102-0-0/w PTR         r     1 RANGE_KEY$               100-0-0/w BIT         r     1 READ_ONLY_IF_EXISTS
    *0-0-0/w BIT         r     1 READ_ONLY_IF_EXISTS       *0-0-0/w STRC(216)   r     1 RECORD
    *0-0-0/w BIT         r     1 RECORD_EXISTS             35-0-0/w STRC(216)   r     1 SAVE_REC1
    43-0-0/w STRC(216)   r     1 SAVE_REC2                101-0-0/w PTR         r     1 STREAM_KEY$
   111-0-0/w PTR         r     1 STREAM_KEY$               31-0-0/w UBIN        r     1 S_POS
   105-0-0/w STRC(828)   r     1 XLATE$LOC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$RECORDS_DELETED        0-0-0/b BIT         r     1 VD_EOF_DELETED

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:108  

     0-0-0/w ASTR(9)     r     1 LOC$KEY                    0-0-0/w ASTR(9)     r     1 RANGE$KEY
     0-0-0/w ASTR(90)    r     1 RECORD_BUF                 0-0-0/w ASTR(90)    r     1 SAVE_REC1_BUF
     0-0-0/w ASTR(90)    r     1 SAVE_REC2_BUF              0-0-0/w ASTR(9)     r     1 STREAM$KEY
     0-0-0/w ASTR(9)     r     1 STREAM$KEY                 0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDI$BDELETE requires 687 words for executable code.
   Procedure VDI$BDELETE requires 98 words of local(AUTO) storage.
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:109  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:110  
          MINI XREF LISTING

BDT_CODE
      2851**DCL      3315<>CALL     3316>>IF       3316>>IF       3316>>IF       3354>>DOCASE   3361<>CALL
      3508>>DOCASE   3529>>DOCASE   4145>>DOCASE
BNR_TYPE
      2852**DCL      3299<<ASSIGN   3454<<ASSIGN   3538>>IF       3543<>CALL     3550>>IF
BTYPE_FAILED
      3574**LABEL    3315--CALLALT
BUILD_NEW_REC_FAILED
      3593**LABEL    3543--CALLALT
DEL@RANGE
      2787**DCL      3302<<ASSIGN   3313<>CALL     3315<>CALL     3364<>CALL     3435<>CALL     3512<>CALL
      3518<>CALL     3532<>CALL     3553<>CALL     3585<>CALL
DEL@RANGE.ENDD
      2829**DCL      3320<>CALL     3368<>CALL     3440>>ASSIGN   3446>>ASSIGN   3451>>ASSIGN
DEL@RANGE.ENDD.EOF
      2845**DCL      3349<<ASSIGN
DEL@RANGE.ENDD.KEY
      2841**DCL      3330<<ASSIGN   3346<<ASSIGN   3415<<ASSIGN   3431<<ASSIGN   3485<<ASSIGN   3501<<ASSIGN
      4207>>ASSIGN
DEL@RANGE.ENDD.KEY.REP#
      2843**DCL      3329>>IF       3402>>IF       3414>>IF       3484>>IF
DEL@RANGE.ENDD.KEY.V$
      2843**DCL      3329>>CALL     3329>>CALL     3346<>CALL     3402>>ASSIGN   3402--ASSIGN   3414>>CALL
      3414>>CALL     3431<>CALL     3484>>CALL     3484>>CALL     3501<>CALL
DEL@RANGE.ENDD.POSITION#
      2845**DCL      3541<<ASSIGN   4160<<ASSIGN   4179<<ASSIGN   4210>>ASSIGN
DEL@RANGE.START
      2801**DCL      3445>>ASSIGN   3457>>ASSIGN
DEL@RANGE.START.KEY
      2813**DCL      4206>>ASSIGN
DEL@RANGE.START.KEY.REP#
      2815**DCL      3389>>IF
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:111  
DEL@RANGE.START.KEY.V$
      2815**DCL      3389>>ASSIGN   3389--ASSIGN
DEL@RANGE.START.POSITION#
      2817**DCL      4209>>ASSIGN
DEL_RANGE
      2398**DCL        23--PROC     3313<>CALL
DEL_RANGE.ENDD
      2440**DCL      3580<>CALL     3582<>CALL
DEL_RANGE.ENDD.POSITION#
      2456**DCL      3310>>ASSIGN
DEL_RANGE.START
      2412**DCL      3582<>CALL
DEL_RANGE.START.POSITION#
      2428**DCL      3309>>ASSIGN
DEL_STREAM
      2467**DCL        23--PROC     3320<>CALL     3364<>CALL     3368<>CALL     3435<>CALL     3512<>CALL
      3518<>CALL     3532<>CALL     3553<>CALL     3558<>CALL     3909<>CALL     3945<>CALL
DEL_STREAM.CURRENT.EOF
      2534**DCL      3911>>IF
DEL_STREAM.CURRENT.KEY
      2530**DCL      3346>>ASSIGN   3431>>ASSIGN
DEL_STREAM.CURRENT.KEY.REP#
      2532**DCL      3346>>IF       3378>>IF       3431>>IF       3925>>IF
DEL_STREAM.CURRENT.KEY.V$
      2532**DCL      3346>>CALL     3346>>CALL     3378>>ASSIGN   3378--ASSIGN   3431>>CALL     3431>>CALL
      3925>>ASSIGN   3925--ASSIGN
EDIT_BLOCK
      2573**DCL        23--PROC     3315<>CALL
EDIT_BLOCK.FILE_KEY
      2609**DCL      4141>>ASSIGN
EDIT_BLOCK.OPTIONS
      2692**DCL      3558<>CALL
EDIT_BLOCK.RANGE
      2623**DCL      3558<>CALL     3945<>CALL
E_POS
      2848**DCL      3310<<ASSIGN   3540<<ASSIGN   3543<>CALL
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:112  
GET_LOC1
      2994**DCL      3294<<ASSIGN   3441<<ASSIGN   3447<<ASSIGN   3452<<ASSIGN   3458<<ASSIGN   3464>>IF
      3507>>IF
GET_LOC2
      2996**DCL      3295<<ASSIGN   3442<<ASSIGN   3448<<ASSIGN   3453<<ASSIGN   3459<<ASSIGN   3469>>IF
      3528>>IF
GET_RECORD
      3656**PROC     3465--CALL     3474--CALL
GET_RECORD_FAILED
      3593**LABEL    3465--CALLALT  3474--CALLALT
LDELETED
      3559**LABEL    3365--GOTO     3437--GOTO     3514--GOTO     3520--GOTO     3534--GOTO
LDELETE_FAILED
      3593**LABEL    3364--CALLALT  3435--CALLALT  3512--CALLALT  3518--CALLALT  3532--CALLALT  3553--CALLALT
LOC IN PROCEDURE GET_RECORD
      3666**DCL      3656--PROC     3909<>CALL
LOC.KEY.REP# IN PROCEDURE GET_RECORD
      3682**DCL      3935>>IF
LOC.KEY.V$ IN PROCEDURE GET_RECORD
      3682**DCL      3935>>ASSIGN   3935--ASSIGN
LOC.POSITION# IN PROCEDURE GET_RECORD
      3684**DCL      3913<<ASSIGN   3940<<ASSIGN   3948>>ASSIGN
LOC$KEY.BYTES IN PROCEDURE GET_RECORD
      3836**DCL      3938>>IF
LOC$KEY.LENGTH# IN PROCEDURE GET_RECORD
      3834**DCL      3836--IMP-SIZ  3938>>IF
LOC1
      2945**DCL      3303<<ASSIGN   3445<<ASSIGN   3451<<ASSIGN   3457<<ASSIGN   3465<>CALL
LOC1.POSITION#
      2963**DCL      3470>>IF       3539>>ASSIGN
LOC1_EXISTS
      2993**DCL      3465<>CALL     3470>>IF       3507>>IF
LOC2
      2973**DCL      3304<<ASSIGN   3440<<ASSIGN   3446<<ASSIGN   3474<>CALL
LOC2.POSITION#
      2991**DCL      3540>>ASSIGN   3541>>ASSIGN
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:113  
LOC2_EXISTS
      2995**DCL      3296<<ASSIGN   3474<>CALL     3476>>IF       3511>>IF       3528>>IF       3551>>IF
LOC_KEY$ IN PROCEDURE GET_RECORD
      3733**DCL      3826--IMP-PTR  3935<<ASSIGN   3935<<ASSIGN   3938>>IF       3938>>IF
LREAD_FAILED
      3593**LABEL    3320--CALLALT  3368--CALLALT
LREAD_FAILED IN PROCEDURE GET_RECORD
      3952**LABEL    3909--CALLALT
MY_EOF_DELETED
      2997**DCL      3297<<ASSIGN   3552>>ASSIGN
NONE_2_DELETE
      3587**LABEL    3357--GOTO     3523--GOTO
NOTHING_2_DELETE
      3569**LABEL    3393--GOTO     3406--GOTO
OCLEAR_LOCATION_FAILED
      3593**LABEL    3580--CALLALT
OCOPY_LOCATION_FAILED
      3593**LABEL    3582--CALLALT
OCOPY_RANGE_FAILED
      3574**LABEL    3313--CALLALT
OFREE_FAILED
      3593**LABEL    3569--CALLALT  3572--CALLALT
POS IN PROCEDURE GET_RECORD
      3734**DCL      3948<<ASSIGN   3949>>IF       3950<>CALL
RADJUST_LEN_FAILED IN PROCEDURE GET_RECORD
      3952**LABEL    3950--CALLALT
RANGE$KEY.BYTES
      3176**DCL      3392>>IF       3405>>IF
RANGE$KEY.LENGTH#
      3174**DCL      3176--IMP-SIZ  3392>>IF       3405>>IF
RANGE_KEY$
      3000**DCL      3166--IMP-PTR  3389<<ASSIGN   3389<<ASSIGN   3392>>IF       3392>>IF       3402<<ASSIGN
      3402<<ASSIGN   3405>>IF       3405>>IF
READ_ONLY_IF_EXISTS
      2998**DCL      3471<<ASSIGN   3473<<ASSIGN   3474<>CALL
READ_ONLY_IF_EXISTS IN PROCEDURE GET_RECORD
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:114  
      3729**DCL      3656--PROC     3943>>IF
RECORD IN PROCEDURE GET_RECORD
      3694**DCL      3656--PROC     3906<<ASSIGN   3945<>CALL     3950<>CALL
RECORD.DATA$ IN PROCEDURE GET_RECORD
      3726**DCL      3762--IMP-PTR  3907<<ASSIGN   3949>>IF
RECORD_BUF.LENGTH# IN PROCEDURE GET_RECORD
      3788**DCL      3790--IMP-SIZ  3949>>IF
RECORD_EXISTS IN PROCEDURE GET_RECORD
      3728**DCL      3656--PROC     3905<<ASSIGN   3912<<ASSIGN   3939<<ASSIGN   3943>>IF       3952<<ASSIGN
RGET_FAILED IN PROCEDURE GET_RECORD
      3952**LABEL    3945--CALLALT
RPUT_FAILED
      3593**LABEL    3558--CALLALT
SAVE_REC1
      2861**DCL      3305<<ASSIGN   3465<>CALL     3543<>CALL     3558<>CALL
SAVE_REC1.DATA$
      2893**DCL      3044--IMP-PTR  3307<<ASSIGN   3569>>CALL     3569>>CALL     3571<<ASSIGN
SAVE_REC1.KEY
      2875**DCL      4212>>ASSIGN
SAVE_REC1_BUF
      3044**DCL      3569<>CALL
SAVE_REC1_BUF.LENGTH#
      3070**DCL      3072--IMP-SIZ  3569>>CALL
SAVE_REC2
      2903**DCL      3306<<ASSIGN   3474<>CALL     3543<>CALL
SAVE_REC2.DATA$
      2935**DCL      3102--IMP-PTR  3308<<ASSIGN   3572>>CALL     3572>>CALL     3574<<ASSIGN
SAVE_REC2.EOR
      2935**DCL      3350<<ASSIGN
SAVE_REC2.KEY
      2917**DCL      3501>>ASSIGN
SAVE_REC2.KEY.REP#
      2919**DCL      3501>>IF
SAVE_REC2.KEY.V$
      2919**DCL      3501>>CALL     3501>>CALL
SAVE_REC2_BUF
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:115  
      3102**DCL      3572<>CALL
SAVE_REC2_BUF.LENGTH#
      3128**DCL      3130--IMP-SIZ  3572>>CALL
STREAM$KEY.BYTES
      3153**DCL      3392>>IF       3405>>IF
STREAM$KEY.LENGTH#
      3151**DCL      3153--IMP-SIZ  3392>>IF       3405>>IF
STREAM$KEY.BYTES IN PROCEDURE GET_RECORD
      3813**DCL      3938>>IF
STREAM$KEY.LENGTH# IN PROCEDURE GET_RECORD
      3811**DCL      3813--IMP-SIZ  3938>>IF
STREAM_KEY$
      2999**DCL      3143--IMP-PTR  3378<<ASSIGN   3378<<ASSIGN   3392>>IF       3392>>IF       3405>>IF
      3405>>IF
STREAM_KEY$ IN PROCEDURE GET_RECORD
      3732**DCL      3803--IMP-PTR  3925<<ASSIGN   3925<<ASSIGN   3938>>IF       3938>>IF
S_POS
      2849**DCL      3309<<ASSIGN   3539<<ASSIGN   3543<>CALL     4213>>ASSIGN
VD$TEXTC.LENGTH#
      3258**DCL      3260--IMP-SIZ
VD$TEXTC_REMOTE
      3206**DCL      3329<>CALL     3346<>CALL     3414<>CALL     3431<>CALL     3484<>CALL     3501<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3235**DCL      3237--IMP-SIZ  3329>>CALL     3346>>CALL     3378--ASSIGN   3389--ASSIGN   3402--ASSIGN
      3414>>CALL     3431>>CALL     3484>>CALL     3501>>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE GET_RECORD
      3895**DCL      3897--IMP-SIZ  3925--ASSIGN   3935--ASSIGN
VDA$LDELETE
      2717**DCL-ENT  3364--CALL     3435--CALL     3512--CALL     3518--CALL     3532--CALL     3553--CALL
VDA$LREAD
      2718**DCL-ENT  3320--CALL     3368--CALL     3909--CALL
VDE$RADJUST_LENGTH
      2714**DCL-ENT  3950--CALL
VDE$RGET
      2715**DCL-ENT  3945--CALL
VDE$RPUT
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:116  
      2716**DCL-ENT  3558--CALL
VDG$BUILD_NEW_REC
      2727**DCL-ENT  3543--CALL
VDG$ESCREECH
      2728**DCL-ENT  3361--CALL
VDG$OCLEAR_LOCATION
      2725**DCL-ENT  3580--CALL
VDG$OCLEAR_RANGE
      2726**DCL-ENT  3585--CALL
VDG$OCOPY
      2722**DCL-ENT  3346--CALL     3431--CALL     3501--CALL
VDG$OCOPY_LOCATION
      2724**DCL-ENT  3582--CALL
VDG$OCOPY_RANGE
      2723**DCL-ENT  3313--CALL
VDG$OFREE
      2721**DCL-ENT  3329--CALL     3414--CALL     3484--CALL     3569--CALL     3572--CALL
VDG$XLATE_LOCATIONS
      2719**DCL-ENT  4217--CALL
VDI$BTYPE
      2729**DCL-ENT  3315--CALL
VD_$RECORDS_DELETED.V#
      2773**DCL      3300<<ASSIGN   3549<<ASSIGN   3555<<ASSIGN   3555>>ASSIGN   3564>>IF       3566<<ASSIGN
VD_EOF_DELETED
      2776**DCL      3297>>ASSIGN   3298<<ASSIGN   3552<<ASSIGN
XLATE$LOC IN PROCEDURE XLATE_LOCATIONS
      4010**DCL      4140<<ASSIGN   4217<>CALL
XLATE$LOC.FILE_KEY IN PROCEDURE XLATE_LOCATIONS
      4047**DCL      4141<<ASSIGN
XLATE$LOC.FLINK$ IN PROCEDURE XLATE_LOCATIONS
      4036**DCL      4142<<ASSIGN
XLATE$LOC.LEVEL# IN PROCEDURE XLATE_LOCATIONS
      4051**DCL      4143<<ASSIGN
XLATE$LOC.N_ENTRIES# IN PROCEDURE XLATE_LOCATIONS
      4036**DCL      4204<<ASSIGN
XLATE$LOC.XLATES.NEW_KEY IN PROCEDURE XLATE_LOCATIONS
PL6.E3A0      #002=VDI$BDELETE File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:117  
      4132**DCL      4212<<ASSIGN
XLATE$LOC.XLATES.NEW_POS# IN PROCEDURE XLATE_LOCATIONS
      4136**DCL      4213<<ASSIGN   4215>>ASSIGN
XLATE$LOC.XLATES.NEW_POS_INCR# IN PROCEDURE XLATE_LOCATIONS
      4136**DCL      4215<<ASSIGN
XLATE$LOC.XLATES.OLD_KEY_HI IN PROCEDURE XLATE_LOCATIONS
      4117**DCL      4207<<ASSIGN
XLATE$LOC.XLATES.OLD_KEY_LO IN PROCEDURE XLATE_LOCATIONS
      4103**DCL      4206<<ASSIGN
XLATE$LOC.XLATES.OLD_POS_HI# IN PROCEDURE XLATE_LOCATIONS
      4121**DCL      4210<<ASSIGN   4214>>IF       4215>>ASSIGN
XLATE$LOC.XLATES.OLD_POS_LO# IN PROCEDURE XLATE_LOCATIONS
      4121**DCL      4209<<ASSIGN
XLATE_FAILED IN PROCEDURE XLATE_LOCATIONS
      4224**LABEL    4217--CALLALT
XLATE_LOCATIONS
      4000**PROC     3561--CALL

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:118  
      780        1        /*T***********************************************************/
      781        2        /*T*                                                         */
      782        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      783        4        /*T*                                                         */
      784        5        /*T***********************************************************/
      785        6
      786        7        /*D* NAME:  VDI$BINSERT
      787        8            PARAMETERS:
      788        9                SRC_RANGE - VD$RANGE range descriptor for the source block.
      789       10                SRC_STREAM - VD$STREAM to use for accessing the source block.
      790       11                DEST_RANGE - VD$RANGE range descriptor for the destination block.
      791       12                DEST_STREAM - VD$STREAM to use for accessing the destination block.
      792       13            INPUT:
      793       14                VD_CURRENT_WINDOW$ must point to the level-1 VD$FILE_NODE in the
      794       15                    Windows file for the current editing window.  DEST_RANGE must
      795       16                    specify a block which is located in this window's EditBlock.
      796       17                Destination EditBlock's .OPTIONS.KEY_INCR should contain the default
      797       18                    record key increment to use when inserting new records into this
      798       19                    EditBlock, or 0 to use the $BY default.
      799       20            OUTPUT:
      800       21                SRC_RANGE will be modified to describe any part of the source block
      801       22                    not actually copied.  Usually this is just a point at the end of
      802       23                    the source block.
      803       24                DEST_RANGE will be modified to describe the block just inserted
      804       25                    at the destination.
      805       26                VD_$RECORDS_INSERTED.V# will be set to the number of records
      806       27                    inserted.  If nothing at all is inserted, it will be set to -1.
      807       28            ENTRY: VDI$BSPLIT
      808       29                Inserts a single record boundary at DEST_RANGE.START. SRC_RANGE
      809       30                can be %CLEAR, SRC_STREAM can be absent.  Used by the presenter,
      810       31                when it runs out of key space.
      811       32            DESCRIPTION:
      812       33                Classify the source and destination blocks into the following types:
      813       34                    Source types:
      814       35                      "1recNoEOR" - all in 1 record, excluding that record's EOR
      815       36                      "1recEOR" - all in 1 record, including EOR
      816       37                      ">1recNoEOR" - on > 1 record, excluding last record's EOR
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:119  
      817       38                      ">1recEOR" - on > 1 record, including last record's EOR
      818       39                    Destination types (dest is really a point, not a block):
      819       40                      "BOR" - at BOR of existing record
      820       41                      "nonBOR" - at non-BOR of existing record (may be in middle, at
      821       42                            EOR, or beyond EOR)
      822       43                      "BORnonExist" - at BOR of non-existing record
      823       44                      "nonBORnonExist" - at non-BOR of non-existing record
      824       45
      825       46                Given the above classification, the following cases are acted upon as
      826       47                described below.  Terminology:
      827       48                    src - Only record (with or without EOR) of a 1-record source block.
      828       49                    srcFirst - First record of a multi-record source block.
      829       50                    srcLast - Last record (with or without EOR) of a multi-record
      830       51                        source block.
      831       52                    destLeft - Portion of the record to the left of the destination
      832       53                        point.  This is empty if the destination is BOR; this is
      833       54                        a series of blanks if the destination is non-BOR of a
      834       55                        non-existing record.
      835       56                    destRight - Portion of the record to the right of the destination
      836       57                        point.  This is empty if the destination is at or beyond EOR --
      837       58                        but still contains the EOR boundary indication.
      838       59                        If the destination record doesn't exist, destRight is unused.
      839       60                        If destRight is used, it ALWAYS has an EOR associated with it.
      840       61                    destNext - The next record in the destination file after the
      841       62                        destination record.  This is used only when the destination
      842       63                        record doesn't exist AND src/srcLast has no EOR.
      843       64                    NOTE - destRight and destNext are mutually exclusive; in any given
      844       65                        case, only one is used, never both.
      845       66                    5.0 - The destination record key (record may or may not exist).
      846       67                    4.1, 4.2 - New keys generated to be before the destination record
      847       68                        and after the existing record before the destination record.
      848       69                    5.1, 5.2 - New keys generated to be after the given destination key
      849       70                        and before the existing record after the given destination key.
      850       71
      851       72                Src          Dest               How file looks after insertion  See Note
      852       73                ----------   --------------     ------------------------------  --------
      853       74                1recNoEOR    BOR                5.0  src  destRight
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:120  
      854       75
      855       76                             nonBOR             5.0  destLeft  src  destRight
      856       77
      857       78                             BORnonExist        5.0  src  destNext              "moved"
      858       79
      859       80                             nonBORnonExist     5.0  destLeft  src  destNext    "moved"
      860       81                ----------   --------------     ------------------------------  --------
      861       82                1recEOR      BOR                4.1  src                        "genkey"
      862       83                                                5.0  destRight                  "moved"
      863       84
      864       85                             nonBOR             5.0  destLeft  src
      865       86                                                5.1  destRight
      866       87
      867       88                             BORnonExist        5.0  src
      868       89
      869       90                             nonBORnonExist     5.0  destLeft  src
      870       91                ----------   --------------     ------------------------------  --------
      871       92                >1recNoEOR   BOR                4.1  srcFirst                   "genkey"
      872       93                                                4.2  srcLast  destRight
      873       94
      874       95                             nonBOR             5.0  destLeft  srcFirst
      875       96                                                5.1  srcLast  destRight
      876       97
      877       98                             BORnonExist        5.0  srcFirst
      878       99                                                5.1  srcLast  destNext          "moved"
      879      100
      880      101                             nonBORnonExist     5.0  destLeft  srcFirst
      881      102                                                5.1  srcLast  destNext          "moved"
      882      103                ----------   --------------     ------------------------------  --------
      883      104                >1recEOR     BOR                4.1  srcFirst                   "genkey"
      884      105                                                4.2  srcLast
      885      106                                                5.0  destRight
      886      107
      887      108                             nonBOR             5.0  destLeft  srcFirst
      888      109                                                5.1  srcLast
      889      110                                                5.2  destRight
      890      111
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:121  
      891      112                             BORnonExist        5.0  srcFirst
      892      113                                                5.1  srcLast
      893      114
      894      115                             nonBORnonExist     5.0  destLeft  srcFirst
      895      116                                                5.1  srcLast
      896      117
      897      118                    Notes:
      898      119                    ------
      899      120                    "moved" - In these cases the destNext record is moved (rekeyed).
      900      121                        The criteria for this action is:
      901      122                            dest is nonExist (either BOR or nonBOR)
      902      123                            AND srcLast has no EOR
      903      124                    "genkey" - In these cases the first key written is generated to be
      904      125                        before the given destination key.  The criteria for this
      905      126                        action is:
      906      127                            destination is BORExist
      907      128                            AND 1st/only source record does have EOR
      908      129                        There are two subcases here:  srcLast could have EOR or not:
      909      130                        If srcLast does have EOR, note that destRight is untouched:
      910      131                            not moved, nothing joined to it -- just leave it alone.
      911      132                        If srcLast doesn't have EOR, then destRight acts like
      912      133                            destNext in the "moved" cases noted above:  it is rekeyed.
      913      134
      914      135
      915      136                The above table gives the algorithm by example; the following gives
      916      137                it procedurally:
      917      138
      918      139
      919      140                Read the first source record.
      920      141                Call PREPARE_DESTINATION, which reads the destination record (if it
      921      142                    exists) and sets up for the main loop.  PREPARE_DESTINATION must
      922      143                    not do anything which isn't redoable, since it may be called
      923      144                    again after rekeying the destination.  It sets:
      924      145                    RECORD.KEY := given destination key;
      925      146                    other RECORD fields get destLeft, if any;
      926      147                    DEST_NEXT_KEY is the key of the next record, used when
      927      148                        calling VDE$RPUT when we want to generate a key;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:122  
      928      149                    DEST_RIGHT is data component of either destRight or destNext
      929      150                        (see the "genkey" note above, which tells why only one of these
      930      151                        will be used in any given case);
      931      152                    DEST_EXISTS and GENERATE_KEY are set appropriately.
      932      153                Call ADJUST_INCREMENT to find a suitable key increment.  This may
      933      154                    indicate the need for a rekey of all or part of the destination
      934      155                    file.
      935      156                If ADJUST_INCREMENT can't find an increment to use:
      936      157                    If $REKEY <= 0 (don't auto-rekey), use .001 as the key increment,
      937      158                        and proceed with the insertion.  At some point in the
      938      159                        insertion, we'll get a cutoff error.
      939      160                    If $REKEY > 0, call VDI$BAUTO_REKEY to rekey some or all
      940      161                        of the destination file to make room for the source block.
      941      162                        In some cases, the insertion will be done at the same time,
      942      163                        allowing us to return at this time.
      943      164                        Otherwise, we now have a key increment to use for the
      944      165                        insertion.
      945      166                        Call PREPARE_DESTINATION again, to set up the parameters based
      946      167                        on the newly-keyed destination.
      947      168
      948      169                Append the first source record to whatever may already be in RECORD
      949      170                    (destLeft).
      950      171                Main loop:  while RECORD isn't %CLEAR:
      951      172                    If RECORD has no EOR (and so must be last record from the source
      952      173                        block), append DEST_RIGHT (if any) to its data component,
      953      174                        and clear DEST_RIGHT.
      954      175                    Call VDE$RPUT to write RECORD to the destination.  Note that
      955      176                        RECORD is a kinda schizoid VD$NODE_DESC:  it's .SPEC, .DATA,
      956      177                        and .EOR come from source block records; but it's .KEY is
      957      178                        a key in the destination block (which could be in an entirely
      958      179                        different file!)
      959      180                        GENERATE_KEY tells RPUT whether and how to generate a key.
      960      181                    Call VDA$LREAD/VDE$RGET to read the next source record into
      961      182                        RECORD.  If the previous RECORD had no EOR, then
      962      183                        VDE$RGET should return an empty RECORD this time.  If so,
      963      184                        then RECORD := DEST_RIGHT (which may be empty too) and clear
      964      185                        DEST_RIGHT.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:123  
      965      186                    Set RECORD.KEY to the key just written to the destination block,
      966      187                        and set GENERATE_KEY to generate a new key following RECORD.KEY,
      967      188                        for the next iteration.
      968      189                    End of main loop.
      969      190                Clean up:
      970      191                    Delete the destNext/destRight record, if we had to move it (see
      971      192                        "moved" and "genkey" notes above).
      972      193                    Adjust SRC_RANGE to describe any part of the source block not
      973      194                        copied.  If all copied ok, adjust SRC_RANGE to be an empty
      974      195                        block at its end location.
      975      196                    Adjust DEST_RANGE to describe the data just inserted at the
      976      197                        destination.
      977      198        */
      978      199
      979      200        VDI$BINSERT: PROC (SRC_RANGE, SRC_STREAM, DEST_RANGE, DEST_STREAM)
      980      201                  ALTRET;
      981      202
      982      203
      983      204        %INCLUDE VD_MACROS_M;
      984     2419        %INCLUDE VD_PERR_C;
      985     2567        /*
      986     2568        *   Flags for VDA$LREAD:
      987     2569        */
      988     2570        %EQU DONT_READ_RECORD = FALSE;  /* Just position, don't read */
      989     2571        %EQU READ_RECORD = TRUE;        /* Position and read */
      990     2572
      991     2573
      992     2574        %VD$RANGE (NAME=SRC_RANGE,STCLASS=PARAM);
      993     2643        %VD$STREAM (NAME=SRC_STREAM, STCLASS=PARAM);
      994     2749        %VD$RANGE (NAME=DEST_RANGE,STCLASS=PARAM);
      995     2818        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
      996     2924
      997     2925
      998     2926    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
      999     2927    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1000     2928    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
     1001     2929    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:124  
     1002     2930    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1003     2931    1   DCL VDI$BAUTO_REKEY     ENTRY (4) ALTRET;
     1004     2932    1   DCL VDE$RGET            ENTRY (3) ALTRET;
     1005     2933    1   DCL VDE$RPUT            ENTRY (6) ALTRET;
     1006     2934    1   DCL VDE$RADJUST_LENGTH  ENTRY (2) ALTRET;
     1007     2935    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1008     2936    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1009     2937    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1010     2938    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1011     2939    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1012     2940    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1013     2941    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
     1014     2942    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     1015     2943    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
     1016     2944    1   DCL VDG$ESCREECH        ENTRY (3);
     1017     2945
     1018     2946
     1019     2947        %VD_6E (STCLASS=SYMREF);
     1020     2983    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1021     2984    1   DCL VD_ACCESSOR_PRIV UBIN BYTE ALIGNED SYMREF;
     1022     2985        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1023     2999    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     1024     3000    1   DCL VD_EOF_DELETED BIT(36) SYMREF;
     1025     3001        %VD$FILE_KEY (NAME=VD_FKEY_SCRATCH_LEFTOVER, STCLASS=SYMREF);
     1026     3050        %VD$KEY (NAME=VD_KEY_SCRATCH_LEFTOVER, STCLASS=SYMREF);
     1027     3064        %VD$LOCATION (NAME=VD_LOC_$LEFTOVER, STCLASS=SYMREF);
     1028     3092        %VD$LOCATION (NAME=VD_LOC_$NOT_COPIED, STCLASS=SYMREF);
     1029     3120        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
     1030     3165        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
     1031     3210        %VD$NUMBER (NAME=VD_$RECORDS_INSERTED, STCLASS=SYMREF);
     1032     3255
     1033     3256
     1034     3257        %VD$KEY_NUMBER (NAME=VD_KEY_MN_EDITKEY, STCLASS=SYMREF);
     1035     3272        %VD$KEY_NUMBER (NAME=VD_KEY_MX_EDITKEY, STCLASS=SYMREF);
     1036     3287
     1037     3288
     1038     3289    1   DCL FIRST_TIME_THRU_MAIN_LOOP BIT(1) ALIGNED;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:125  
     1039     3290    1   DCL OUTSIDE_SRC_RANGE BIT(1) ALIGNED;
     1040     3291    1   DCL END_POS_OF_INSERTED_DATA SBIN;
     1041     3292    1   DCL DEST_EDIT_BLOCK$ PTR;
     1042     3293        %VD$ACCESS_OPTIONS (NAME=DEST_OPTIONS, STCLASS=AUTO);   /* Owns objects!! */
     1043     3322    1   DCL DEST_LEVEL SBIN;
     1044     3323    1   DCL SRC_LEVEL SBIN;
     1045     3324    1   DCL SRC_FILE_KEY$ PTR;
     1046     3325    1   DCL DEST_FILE_KEY$ PTR;
     1047     3326    1   DCL RCCL SBIN;
     1048     3327        %VD$NODE_DESC (NAME=RECORD, STCLASS=AUTO);
     1049     3369    1   DCL DEST_LEFT_LENGTH SBIN;
     1050     3370        %VD$KEY (NAME=DEST_NEXT_KEY, STCLASS=AUTO);
     1051     3384    1   DCL DEST_RIGHT$ PTR;
     1052     3385    1   DCL DEST_EXISTS BIT(1) ALIGNED;
     1053     3386    1   DCL DEST_EOR BIT(1);
     1054     3387    1   DCL DEST_KEY_SPACE SBIN;
     1055     3388    1   DCL GENERATE_KEY SBIN;      /* Holds an %SQ_ value */
     1056     3389    1   DCL MY_EOF_DELETED BIT(36);
     1057     3390    1   DCL PREVIOUS_SRC_EOR BIT(1) ALIGNED;
     1058     3391    1   DCL SRC_EOR BIT(1) ALIGNED;
     1059     3392        %VD$NODE_DESC (NAME=FIRST_SRC_RECORD, STCLASS=AUTO);
     1060     3434        %VD$KEY (NAME=SRC_KEY_OF_RECORD, STCLASS=AUTO); /* RECORD's key from src file */
     1061     3448        %VD$KEY (NAME=LAST_COPIED_KEY, STCLASS=AUTO);
     1062     3462        %VD$KEY (NAME=LAST_WRITTEN_KEY, STCLASS=AUTO);
     1063     3476        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);   /* Doesn't own objects!!! */
     1064     3545    1   DCL DEST_END_KEY$ PTR;
     1065     3546    1   DCL VD_ERR$ PTR;
     1066     3547    1   DCL ERR_SUBST$ PTR;
     1067     3548
     1068     3549
     1069     3550        %VD$BLOCK_DESC (NAME=SRC$EDIT_BLOCK,
     1070     3551            STCLASS="BASED(VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)");
     1071     3698        %VD$BLOCK_DESC (NAME=DEST$EDIT_BLOCK, STCLASS="BASED(DEST_EDIT_BLOCK$)");
     1072     3845        %VD$BUFFER (NAME=RECORD$DATA, STCLASS="BASED(RECORD.DATA$)");
     1073     3903        %VD$BUFFER (NAME=DEST$RIGHT, STCLASS="BASED(DEST_RIGHT$)");
     1074     3961        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1075     4014        %VD$ERR (NAME=LAST$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:126  
     1076     4067        %VD$POINTER (NAME=ERR$SUBST, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     1077     4112        %VD$KEY_NUMBER;
     1078     4127        %VD$TEXTC;
     1079     4150        %VD$TEXTC_NUMBER;
     1080     4164        %VD$TEXTC_REMOTE;
     1081     4225        %VD$BUFFER;
     1082     4283        %VD$BUFFER_HEADER;
     1083     4319        %VD$FILE_NODE;
     1084     4412        %VD$WINDOW_SPEC;
     1085     4478        %VD$IT_BLOCK_EXPR;
     1086     4628
     1087     4629
     1088     4630        %BOX (TITLE="Procedure");

              4642    1   /***************************************************************************
              4644    1    *                                                                         *
              4648    1            *                                 Procedure                               *
              4650    1            *                                                                         *
              4652    1           ***************************************************************************/

     1089     4656
     1090     4657    1           OUTSIDE_SRC_RANGE = %FALSE;
     1091     4658    1           GOTO THE_TOP;
     1092     4659
     1093     4660    1   VDI$BSPLIT: ENTRY (SRC_RANGE, SRC_STREAM, DEST_RANGE, DEST_STREAM) ALTRET;
     1094     4661
     1095     4662    1           OUTSIDE_SRC_RANGE = %TRUE;
     1096     4663    1   THE_TOP: ;
     1097     4664    1           FIRST_TIME_THRU_MAIN_LOOP = %TRUE;
     1098     4665    1           VD_$RECORDS_INSERTED.V# = -1;
     1099     4666    1           END_POS_OF_INSERTED_DATA = 0;   /* Assumption */
     1100     4667    1           DEST_OPTIONS = %CLEAR;
     1101     4668    1           RECORD = %CLEAR;
     1102     4669    1           RECORD.DATA$ = ADDR(NIL);
     1103     4670    1           DEST_NEXT_KEY = %CLEAR;
     1104     4671    1           FIRST_SRC_RECORD = RECORD;
     1105     4672    1           FIRST_SRC_RECORD.EOR = OUTSIDE_SRC_RANGE;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:127  
     1106     4673    1           SRC_KEY_OF_RECORD = %CLEAR;
     1107     4674    1           LAST_COPIED_KEY = %CLEAR;
     1108     4675    1           LAST_WRITTEN_KEY = %CLEAR;
     1109     4676    1           MY_EOF_DELETED = VD_EOF_DELETED;
     1110     4677    1           VD_EOF_DELETED = %FALSE;
     1111     4678
     1112     4679                /* Obtain fixed parameters from remote objects for easier access */
     1113     4680    2           IF ADDR(DEST_STREAM) ~= VD_6E.SOURCE.OPERAND.STREAM$ THEN DO;
     1114     4681    2              DEST_EDIT_BLOCK$ = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->
     1115     4682    2                VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$;
     1116     4683    2              IF NOT OUTSIDE_SRC_RANGE THEN
     1117     4684    2                 DEST_OPTIONS = VD_CURRENT_WINDOW$ ->
     1118     4685    2                   VD$FILE_NODE.DESC.SPEC.V$ -> VD$WINDOW_SPEC.OPERAND.INTREE$ ->
     1119     4686    2                   VD$IT_BLOCK_EXPR.OPTIONS;
     1120     4687    2              ELSE
     1121     4688    2                 DEST_OPTIONS = DEST$EDIT_BLOCK.OPTIONS;
     1122     4689    2              END;
     1123     4690    2           ELSE DO;
     1124     4691    2              DEST_EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;
     1125     4692    2              DEST$EDIT_BLOCK.RANGE.ENDD.EOF = %TRUE;
     1126     4693    2              DEST_OPTIONS = DEST$EDIT_BLOCK.OPTIONS;
     1127     4694    2              END;
     1128     4695
     1129     4696                %COPYKEY (FKEY=DEST_OPTIONS.KEY_INCR, TKEY=DEST_OPTIONS.KEY_INCR);
     1130     4712    1           DEST_LEVEL = DEST_OPTIONS.LEVEL#;
     1131     4713    1           SRC_LEVEL = %LVL_EXT_REC;   /*N* s.b. from source "EditBlock"? *N*/
     1132     4714
     1133     4715                /*
     1134     4716                *   Set DEST_RANGE.START to point to where we'll start inserting.
     1135     4717                *   For now, assume we'll start at DEST_RANGE.ENDD.
     1136     4718                */
     1137     4719    1           CALL VDG$OCLEAR_LOCATION (DEST_RANGE.START)
     1138     4720    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1139     4721    1           CALL VDG$OCOPY_LOCATION (DEST_RANGE.ENDD, DEST_RANGE.START)
     1140     4722    1             ALTRET (OCOPY_LOCATION_FAILED);
     1141     4723
     1142     4724    2           IF NOT OUTSIDE_SRC_RANGE THEN DO;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:128  
     1143     4725                /* Get the first source record */
     1144     4726    2              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, 0, %TRUE)
     1145     4727    2                ALTRET (LREAD_FAILED);
     1146     4728    2              CALL VDE$RGET (SRC_STREAM, SRC_RANGE, FIRST_SRC_RECORD)
     1147     4729    2                ALTRET (RGET_FAILED);
     1148     4730                   %COPYKEY (FKEY=FIRST_SRC_RECORD.KEY, TKEY=SRC_KEY_OF_RECORD);
     1149     4746
     1150     4747    3              IF FIRST_SRC_RECORD.KEY = %CLEAR THEN DO; /* Src range is empty */
     1151     4748    3                 CALL CLEANUP
     1152     4749    3                   ALTRET (CLEANUP_FAILED);
     1153     4750    3                 RETURN;
     1154     4751    3                 END;
     1155     4752    2              END;
     1156     4753
     1157     4754                /* Read the destination record and set up for main loop */
     1158     4755    1           CALL PREPARE_DESTINATION
     1159     4756    1             ALTRET (PREPARE_DESTINATION_FAILED);
     1160     4757
     1161     4758                /* Find key increment */
     1162     4759    1           CALL ADJUST_INCREMENT (DEST_OPTIONS.KEY_INCR)
     1163     4760    1             ALTRET (ADJUST_INCREMENT_FAILED);
     1164     4761    1           IF DEST_OPTIONS.KEY_INCR.TYPE# = 0 THEN
     1165     4762    2   CANT_FIND_INCREMENT: DO;
     1166     4763                   /* ADJUST_INCREMENT couldn't find an increment to use */
     1167     4764                   /* Reset DEST_OPTIONS.KEY_INCR to value given by user */
     1168     4765    2              DEST_OPTIONS.KEY_INCR.TYPE# = %KT_EDITKEY;
     1169     4766    3              IF VD_$REKEY.V# <= 0 THEN DO;
     1170     4767                      /* User doesn't want us to auto-rekey; go ahead using .001 */
     1171     4768    3                 ADDR(DEST_OPTIONS.KEY_INCR) -> VD$KEY_NUMBER.BYTES# =
     1172     4769    3                   %MN_EDITKEY_FRACT;
     1173     4770    3                 END;
     1174     4771    3              ELSE DO;
     1175     4772                      /* Rekey the destination so the src will fit */
     1176     4773    3                 CALL VDI$BAUTO_REKEY (DEST_STREAM, RECORD.KEY,
     1177     4774    3                   DEST_OPTIONS, DEST_KEY_SPACE)
     1178     4775    3                   ALTRET (BAUTO_REKEY_FAILED);
     1179     4776    3                 CALL CLEANUP; /* Free RECORD buffer, etc. */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:129  
     1180     4777    3                 CALL PREPARE_DESTINATION
     1181     4778    3                   ALTRET (PREPARE_DESTINATION_FAILED);
     1182     4779    3                 CALL ADJUST_INCREMENT (DEST_OPTIONS.KEY_INCR)
     1183     4780    3                   ALTRET (ADJUST_INCREMENT_FAILED);
     1184     4781    3                 END;
     1185     4782    2              END CANT_FIND_INCREMENT;
     1186     4783
     1187     4784
     1188     4785                /* Append FIRST_SRC_RECORD to whatever (if anything) is in RECORD */
     1189     4786    2           IF RECORD.SPEC = %CLEAR THEN DO;
     1190     4787    2              RECORD.SPEC = FIRST_SRC_RECORD.SPEC;
     1191     4788    2              FIRST_SRC_RECORD.SPEC = %CLEAR;
     1192     4789    2              END;
     1193     4790    2           IF RECORD.DATA$ = ADDR(NIL) THEN DO;
     1194     4791    2              RECORD.DATA$ = FIRST_SRC_RECORD.DATA$;
     1195     4792    2              FIRST_SRC_RECORD.DATA$ = ADDR(NIL);
     1196     4793    2              END;
     1197     4794    2           ELSE DO;
     1198     4795    2              CALL APPEND (RECORD.DATA$, FIRST_SRC_RECORD.DATA$)
     1199     4796    2                ALTRET (APPEND_FAILED);
     1200     4797    2              END;
     1201     4798    1           RECORD.EOR = FIRST_SRC_RECORD.EOR;
     1202     4799    1           SRC_EOR = FIRST_SRC_RECORD.EOR;
     1203     4800
     1204     4801                /* Clear FIRST_SRC_RECORD to free any dynamic storage */
     1205     4802                %CLEARKEY (KEY=FIRST_SRC_RECORD.KEY);
     1206     4812                %CLEARSPEC (SPEC=FIRST_SRC_RECORD.SPEC);
     1207     4822    2           IF FIRST_SRC_RECORD.DATA$ ~= ADDR(NIL) THEN DO;
     1208     4823    2              CALL VDG$OFREE (FIRST_SRC_RECORD.DATA$ -> VD$BUFFER)
     1209     4824    2                ALTRET (OFREE_FAILED);
     1210     4825    2              FIRST_SRC_RECORD.DATA$ = ADDR(NIL);
     1211     4826    2              END;
     1212     4827                /*
     1213     4828                *  !!!!!                CAUTION                 !!!!!  *
     1214     4829                *  !!!!! Don't clear all of FIRST_SRC_RECORD;   !!!!!  *
     1215     4830                *  !!!!! Specifically, we look at .EOR in the   !!!!!  *
     1216     4831                *  !!!!!          code that follows.            !!!!!  *
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:130  
     1217     4832                */
     1218     4833
     1219     4834                /*
     1220     4835                 *    If either (a) source ends at EOF; or (b) source ends at
     1221     4836                 *        destination location, which is at the beginning of a
     1222     4837                 *        record -- then find the actual record key just before
     1223     4838                 *        the source end location, so there's no doubt about when
     1224     4839                 *        to stop copying.
     1225     4840                 */
     1226     4841    1           RCCL = -1;  /* Assume not equal (no comparison if files not equal) */
     1227     4842    2           IF SRC_RANGE.ENDD.POSITION# = 0 AND NOT OUTSIDE_SRC_RANGE THEN DO;
     1228     4843                   %GETKEY (KEY=SRC_STREAM.FILE_KEY, PTR=SRC_FILE_KEY$);
     1229     4853                   %GETKEY (KEY=DEST_STREAM.FILE_KEY, PTR=DEST_FILE_KEY$);
     1230     4863    2              IF SRC_FILE_KEY$ -> VD$TEXTC.BYTES =
     1231     4864    3                DEST_FILE_KEY$ -> VD$TEXTC.BYTES THEN DO;
     1232     4865    3                 CALL VDG$COMPARE_LOCS (DEST_RANGE.ENDD, SRC_RANGE.ENDD, RCCL)
     1233     4866    3                   ALTRET (COMPARE_LOCS_FAILED);
     1234     4867    3                 END;
     1235     4868    2              END;
     1236     4869
     1237     4870    1           IF SRC_RANGE.ENDD.EOF  OR
     1238     4871    2             RCCL = %RCCL_EQUAL THEN DO;
     1239     4872    2              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.ENDD, -1, %FALSE)
     1240     4873    2                ALTRET (LREAD_FAILED);
     1241     4874    2              CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)
     1242     4875    2                ALTRET (OCLEAR_LOCATION_FAILED);
     1243     4876    2              IF SRC_RANGE.START.EOF THEN   /* Src file is empty */
     1244     4877    2                 SRC_RANGE.ENDD.EOF = %TRUE;
     1245     4878    3              ELSE DO;
     1246     4879                      /* Add .001 to last key actually enclosed by SRC_RANGE */
     1247     4880                      %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     1248     4881                      TKEY=SRC_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);
     1249     4897    3                 ADDR(SRC_RANGE.ENDD.KEY (SRC_LEVEL-1)) -> VD$KEY_NUMBER.BYTES# =
     1250     4898    3                   ADDR(SRC_RANGE.ENDD.KEY (SRC_LEVEL-1)) ->
     1251     4899    3                   VD$KEY_NUMBER.BYTES# + %MN_EDITKEY_FRACT;
     1252     4900    3                 END;
     1253     4901    2              END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:131  
     1254     4902
     1255     4903                /*
     1256     4904                *   ADJUST_INCREMENT probably repositioned the source stream.
     1257     4905                *   Resposition it back to the first src record (as tho we'd
     1258     4906                *       just read the first src record).
     1259     4907                */
     1260     4908    1           IF NOT OUTSIDE_SRC_RANGE THEN
     1261     4909    1              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, 0, %DONT_READ_RECORD)
     1262     4910    1                ALTRET (LREAD_FAILED);
     1263     4911
     1264     4912
     1265     4913                %BOX (TITLE="Main Loop");

              4925    1   /***************************************************************************
              4927    1    *                                                                         *
              4931    1            *                                 Main Loop                               *
              4933    1            *                                                                         *
              4935    1           ***************************************************************************/

     1266     4939
     1267     4940                /*
     1268     4941                *   Loop while we have a [partial] record to write.
     1269     4942                */
     1270     4943    1           VD_$RECORDS_INSERTED.V# = 0;
     1271     4944
     1272     4945    1   MAIN_LOOP:
     1273     4946    2           DO WHILE RECORD.DATA$ ~= ADDR(NIL);
     1274     4947    3              IF NOT RECORD.EOR THEN DO;
     1275     4948                      /*
     1276     4949                      *  Source record has no EOR:  must be last in source block.
     1277     4950                      *  Append DEST_RIGHT to it.
     1278     4951                      */
     1279     4952    3                 END_POS_OF_INSERTED_DATA = RECORD$DATA.LENGTH#;
     1280     4953    4                 IF DEST_RIGHT$ ~= ADDR(NIL) THEN DO;
     1281     4954    4                    RECORD.EOR = DEST_EOR; /* destRight, if used, may have EOR */
     1282     4955    4                    IF DEST_EXISTS THEN EXIT;
     1283     4956                         /*
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:132  
     1284     4957                         * Always write an existing record with its original key
     1285     4958                         */
     1286     4959                         %CLEARKEY (KEY=RECORD.KEY);
     1287     4969                         %COPYKEY (FKEY=DEST_NEXT_KEY, TKEY=RECORD.KEY);
     1288     4985    4                    GENERATE_KEY = %SQ_CURRENT;
     1289     4986    4                    END;
     1290     4987    3                 CALL APPEND (RECORD.DATA$, DEST_RIGHT$) /* NILs DEST_RIGHT$ */
     1291     4988    3                   ALTRET (APPEND_FAILED);
     1292     4989    3                 END;
     1293     4990                   /* Write the source record to the destination */
     1294     4991    2              CALL VDE$RPUT (DEST_STREAM, DEST$EDIT_BLOCK.RANGE, DEST_OPTIONS,
     1295     4992    2                RECORD, GENERATE_KEY, DEST_NEXT_KEY)
     1296     4993    3              WHENALTRETURN DO;
     1297     4994    3                 IF FIRST_TIME_THRU_MAIN_LOOP THEN
     1298     4995    3                    GOTO NOTHING_COPIED;
     1299     4996    3                 ELSE
     1300     4997    3                    GOTO ALTRETURN_FROM_MAIN_LOOP;
     1301     4998    3                 END;
     1302     4999                   /* Save info about this write */
     1303     5000    2              PREVIOUS_SRC_EOR = SRC_EOR;
     1304     5001                   %CLEARKEY (KEY=LAST_COPIED_KEY);
     1305     5011    2              LAST_COPIED_KEY = SRC_KEY_OF_RECORD;
     1306     5012    2              SRC_KEY_OF_RECORD = %CLEAR;
     1307     5013                   %CLEARKEY (KEY=LAST_WRITTEN_KEY);
     1308     5023                   %COPYKEY (FKEY=RECORD.KEY, TKEY=LAST_WRITTEN_KEY);
     1309     5039
     1310     5040                   /* If this is 1st write, see if we need to adjust DEST_RANGE.START */
     1311     5041    2              IF GENERATE_KEY ~= %SQ_CURRENT THEN
     1312     5042    2                 VD_$RECORDS_INSERTED.V# = VD_$RECORDS_INSERTED.V# + 1;
     1313     5043    2              IF FIRST_TIME_THRU_MAIN_LOOP
     1314     5044    3                AND (GENERATE_KEY ~= %SQ_CURRENT OR NOT SRC_EOR) THEN DO;
     1315     5045                      /* We didn't write the first record at dest end location */
     1316     5046    3                 IF DEST_LEVEL > %LVL_EXT_REC
     1317     5047    4                   AND DEST_RANGE.START.KEY = %CLEAR THEN DO;
     1318     5048    4                    CALL VDG$OCOPY_LOCATION (DEST$EDIT_BLOCK.RANGE.START,
     1319     5049    4                      DEST_RANGE.START)
     1320     5050    4                      ALTRET (OCOPY_LOCATION_FAILED);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:133  
     1321     5051    4                    END;
     1322     5052    3                 DEST_RANGE.START.EOF = %FALSE;
     1323     5053                      %CLEARKEY (KEY=DEST_RANGE.START.KEY, INDX=DEST_LEVEL-1);
     1324     5063                      %COPYKEY (FKEY=RECORD.KEY,
     1325     5064                      TKEY=DEST_RANGE.START.KEY, TINDX=DEST_LEVEL-1);
     1326     5080    3                 DEST_RANGE.START.POSITION# = DEST_LEFT_LENGTH;
     1327     5081    3                 END;
     1328     5082    2              FIRST_TIME_THRU_MAIN_LOOP = %FALSE;
     1329     5083
     1330     5084                   /* Always generate keys after first write */
     1331     5085    2              GENERATE_KEY = %SQ_NEXT;
     1332     5086
     1333     5087                   /* Get next source record */
     1334     5088    3              IF OUTSIDE_SRC_RANGE THEN DO;
     1335     5089                      %CLEARKEY (KEY=RECORD.KEY);
     1336     5099    3                 SRC_EOR = '0'B;
     1337     5100    3                 END;
     1338     5101    3              ELSE DO;
     1339     5102    3                 CALL VDA$LREAD (SRC_STREAM, , 1, %READ_RECORD)
     1340     5103    3                   ALTRET (ALTRETURN_FROM_MAIN_LOOP);
     1341     5104    3                 CALL VDE$RGET (SRC_STREAM, SRC_RANGE, RECORD)
     1342     5105    3                   ALTRET (ALTRETURN_FROM_MAIN_LOOP);
     1343     5106    3                 SRC_EOR = RECORD.EOR;
     1344     5107    3                 END;
     1345     5108
     1346     5109    3              IF RECORD.KEY = %CLEAR THEN DO;
     1347     5110                      /*
     1348     5111                      *   We're outside source range now:
     1349     5112                      *   Load RECORD from DEST_RIGHT, if any.
     1350     5113                      */
     1351     5114    3                 OUTSIDE_SRC_RANGE = %TRUE;
     1352     5115    3                 IF DEST_RIGHT$ ~= ADDR(NIL) THEN
     1353     5116    3                    RECORD.EOR = DEST_EOR; /* destRight, if used, may have EOR */
     1354     5117    3                 IF DEST_EXISTS THEN /* Only write it if we split one */
     1355     5118    3                    RECORD.DATA$ = DEST_RIGHT$;
     1356     5119    3                 DEST_RIGHT$ = ADDR(NIL);
     1357     5120    3                 END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:134  
     1358     5121    3              ELSE DO;
     1359     5122                      /*
     1360     5123                      *   Still have src records to process.
     1361     5124                      *   Previous source record should have had EOR set.
     1362     5125                      *   SRC_KEY_OF_RECORD should be %CLEAR at this point.
     1363     5126                      */
     1364     5127    4                 IF NOT PREVIOUS_SRC_EOR THEN DO;
     1365     5128    4                    CALL VDG$ESCREECH;
     1366     5129    4                    END;
     1367     5130    3                 SRC_KEY_OF_RECORD = RECORD.KEY;
     1368     5131    3                 END;
     1369     5132                   %COPYKEY (FKEY=LAST_WRITTEN_KEY, TKEY=RECORD.KEY);
     1370     5148
     1371     5149    2              END MAIN_LOOP;
     1372     5150
     1373     5151
     1374     5152                %BOX (TITLE="End of Main Loop");

              5164    2   /***************************************************************************
              5166    2    *                                                                         *
              5170    2            *                              End of Main Loop                           *
              5172    2            *                                                                         *
              5174    2           ***************************************************************************/

     1375     5178
     1376     5179                /* Set DEST_RANGE.ENDD to point to the end of the inserted data */
     1377     5180    1           CALL SET_DEST_END
     1378     5181    1             ALTRET (SET_DEST_END_FAILED);
     1379     5182
     1380     5183                /* Free up any owned objects we don't need anymore */
     1381     5184    1           CALL CLEANUP
     1382     5185    1             ALTRET (CLEANUP_FAILED);
     1383     5186
     1384     5187    1           RETURN;
     1385     5188
     1386     5189
     1387     5190
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:135  
     1388     5191        /*
     1389     5192        *   Nothing was copied, due to an error.
     1390     5193        *   Save the SRC_RANGE in $NOT_COPIED.
     1391     5194        *   Set SRC_RANGE to "what was successfully copied":  an empty range at
     1392     5195        *       the SRC_RANGE.START location.
     1393     5196        *   DEST_RANGE should already be set to an empty range at the DEST_RANGE.ENDD
     1394     5197        *       location.
     1395     5198        */
     1396     5199    1   NOTHING_COPIED:
     1397     5200    1           CALL SAVE_NOT_COPIED (SRC_RANGE)
     1398     5201    1             ALTRET (SAVE_NOT_COPIED_FAILED);
     1399     5202    1           CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)
     1400     5203    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1401     5204    1           CALL VDG$OCOPY_LOCATION (SRC_RANGE.START, SRC_RANGE.ENDD)
     1402     5205    1             ALTRET (OCOPY_LOCATION_FAILED);
     1403     5206    1           CALL CLEANUP
     1404     5207    1             ALTRET (CLEANUP_FAILED);
     1405     5208    1           ALTRETURN;
     1406     5209
     1407     5210
     1408     5211        /*
     1409     5212        *   Bombed out of main loop.
     1410     5213        *   To get here, we must already have written the first record to the
     1411     5214        *       destination.  Therefore, before we altreturn we have to adjust
     1412     5215        *       SRC_RANGE, DEST_RANGE, and save anything that needs saving in
     1413     5216        *       $LEFTOVER and/or $NOT_COPIED.
     1414     5217        */
     1415     5218    1   ALTRETURN_FROM_MAIN_LOOP: ;
     1416     5219    1           IF LAST$ERR.FLAGLEV# < %FLV_FATAL THEN
     1417     5220    1              CALL ABORT_INSERTION;
     1418     5221    1           CALL CLEANUP
     1419     5222    1             ALTRET (CLEANUP_FAILED);
     1420     5223    1           ALTRETURN;
     1421     5224
     1422     5225
     1423     5226
     1424     5227    1   LREAD_FAILED: ;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:136  
     1425     5228    1   RGET_FAILED: ;
     1426     5229    1   PREPARE_DESTINATION_FAILED: ;
     1427     5230    1   ADJUST_INCREMENT_FAILED: ;
     1428     5231    1   BAUTO_REKEY_FAILED: ;
     1429     5232    1   APPEND_FAILED: ;
     1430     5233    1   LDELETE_FAILED: ;
     1431     5234    1   SET_DEST_END_FAILED: ;
     1432     5235    1           CALL CLEANUP
     1433     5236    1             ALTRET (CLEANUP_FAILED);
     1434     5237    1           ALTRETURN;
     1435     5238
     1436     5239
     1437     5240    1   COMPARE_LOCS_FAILED: ;
     1438     5241    1   OCLEAR_LOCATION_FAILED: ;
     1439     5242    1   OFREE_FAILED: ;
     1440     5243    1   OCOPY_LOCATION_FAILED: ;
     1441     5244    1   SAVE_NOT_COPIED_FAILED: ;
     1442     5245    1   CLEANUP_FAILED: ;
     1443     5246    1           ALTRETURN;
     1444     5247
     1445     5248        %BOX (TITLE=SET_DEST_END, PAGE=YES);
              5256    1
              5260    1   /***************************************************************************
              5262    1    *                                                                         *
              5266    1            *                                SET_DEST_END                             *
              5268    1            *                                                                         *
              5270    1           ***************************************************************************/

     1446     5274
     1447     5275        /*I* NAME: SET_DEST_END
     1448     5276            PARAMETERS:
     1449     5277                None.
     1450     5278            INPUT:
     1451     5279                DEST_RANGE.START is presumed to already have been set to the start
     1452     5280                    of the inserted data in the destination.
     1453     5281                DEST_RANGE.ENDD - The given destination location.
     1454     5282                PREVIOUS_SRC_EOR - Setting of EOR bit from previous source record
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:137  
     1455     5283                    (which has already been copied to the destination).
     1456     5284                DEST_NEXT_KEY - Key of next existing record in the destination after
     1457     5285                    where we're inserting records.  Must not be %CLEAR:  if we're
     1458     5286                    inserting at EOF then DEST_NEXT_KEY should contain MAX_EDITKEY.
     1459     5287                LAST_WRITTEN_KEY - Last key written to the destination.  Must not be
     1460     5288                    %CLEAR.
     1461     5289                END_POS_OF_INSERTED_DATA - Just what it says.  Only non-0 if we've
     1462     5290                    read a record from the source block which didn't include EOR
     1463     5291                    (so therefore must be the last source record), in which case
     1464     5292                    END_POS_OF_INSERTED_DATA is the length of that last source record.
     1465     5293            OUTPUT:
     1466     5294                DEST_RANGE.ENDD is set appropriately.
     1467     5295            DESCRIPTION:
     1468     5296                Change DEST_RANGE.ENDD to specify end of block just inserted.
     1469     5297                (DEST_RANGE.START has already be set to start of inserted block.)
     1470     5298                If PREVIOUS_SRC_EOR is set, the inserted block ends at BOR of
     1471     5299                    DEST_NEXT_KEY.
     1472     5300                If PREVIOUS_SRC_EOR is not set, inserted block ends at position
     1473     5301                    END_POS_OF_INSERTED_DATA, key LAST_WRITTEN_KEY.
     1474     5302        */
     1475     5303
     1476     5304    1   SET_DEST_END: PROC ALTRET;
     1477     5305
     1478     5306
     1479     5307    2   DCL DEST_NEXT_KEY$ PTR;
     1480     5308
     1481     5309
     1482     5310        %VD$TEXTC_NUMBER (NAME=DEST$NEXT_KEY, STCLASS="BASED(DEST_NEXT_KEY$)");
     1483     5324        %VD$XLATE_LOCATIONS (NAME=XLATE$LOC, STCLASS=AUTO);
     1484     5460
     1485     5461
     1486     5462
     1487     5463    2           CALL VDG$OCLEAR_LOCATION (DEST_RANGE.ENDD)
     1488     5464    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1489     5465
     1490     5466    3           IF DEST_LEVEL > %LVL_EXT_REC THEN DO;
     1491     5467                   /* Fill in key levels above level we're working at */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:138  
     1492     5468    3              CALL VDG$OCOPY_LOCATION (DEST$EDIT_BLOCK.RANGE.START,
     1493     5469    3                DEST_RANGE.ENDD)
     1494     5470    3                ALTRET (OCOPY_LOCATION_FAILED);
     1495     5471                   %CLEARKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1);
     1496     5481    3              END;
     1497     5482
     1498     5483    3           IF PREVIOUS_SRC_EOR THEN DO;
     1499     5484                   %GETKEY (KEY=DEST_NEXT_KEY, PTR=DEST_NEXT_KEY$);
     1500     5494    3              IF DEST_NEXT_KEY.TYPE# = %KT_EDITKEY
     1501     5495    4                AND DEST$NEXT_KEY.BYTES# >= %MX_EDITKEY THEN DO;
     1502     5496    4                 CALL VDG$OCLEAR_LOCATION (DEST_RANGE.ENDD)
     1503     5497    4                   ALTRET (OCLEAR_LOCATION_FAILED);
     1504     5498    4                 DEST_RANGE.ENDD.EOF = %TRUE;
     1505     5499    4                 RETURN; /* No XLATE needed if inserting at EOF */
     1506     5500    4                 END;
     1507     5501    4              ELSE DO;
     1508     5502    4                 DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = DEST_NEXT_KEY;
     1509     5503    4                 DEST_NEXT_KEY = %CLEAR;
     1510     5504    4                 END;
     1511     5505    3              END;
     1512     5506    3           ELSE DO;
     1513     5507    3              DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = LAST_WRITTEN_KEY;
     1514     5508    3              LAST_WRITTEN_KEY = %CLEAR;
     1515     5509    3              DEST_RANGE.ENDD.POSITION# = END_POS_OF_INSERTED_DATA;
     1516     5510    3              END;
     1517     5511
     1518     5512    2           XLATE$LOC = %CLEAR;
     1519     5513    2           XLATE$LOC.FILE_KEY = DEST$EDIT_BLOCK.FILE_KEY;
     1520     5514    2           XLATE$LOC.LEVEL# = DEST_LEVEL;
     1521     5515    2           XLATE$LOC.PREFIX.KEY = DEST$EDIT_BLOCK.RANGE.START.KEY;
     1522     5516    2           IF DEST$EDIT_BLOCK.RANGE.ENDD.POSITION# ~= 0 THEN
     1523     5517    2              DEST$EDIT_BLOCK.RANGE.ENDD.EOF = %FALSE;
     1524     5518
     1525     5519    2           XLATE$LOC.PREFIX.KEY(DEST_LEVEL-1) = %CLEAR;
     1526     5520    2           XLATE$LOC.FLINK$ = ADDR(NIL);
     1527     5521    2           XLATE$LOC.N_ENTRIES# = 1;
     1528     5522    2           XLATE$LOC.XLATES.NEW_KEY(0) = DEST_RANGE.ENDD.KEY(DEST_LEVEL-1);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:139  
     1529     5523    3           IF DEST_EXISTS OR PREVIOUS_SRC_EOR THEN DO;
     1530     5524                   /*
     1531     5525                   The insert point existed before, or it doesn't matter
     1532     5526                   So DEST_RANGE.START will catch anything that matters.
     1533     5527                   */
     1534     5528    3              XLATE$LOC.XLATES.OLD_POS_LO#(0) = DEST_RANGE.START.POSITION#;
     1535     5529    3              XLATE$LOC.XLATES.OLD_POS_HI#(0) = DEST_RANGE.START.POSITION#;
     1536     5530    3              XLATE$LOC.XLATES.OLD_KEY_LO(0) = DEST_RANGE.START.KEY(DEST_LEVEL-1);
     1537     5531    3              END;
     1538     5532                /*
     1539     5533                * The insert started at a hole in the file, but ends by shifting
     1540     5534                * the next record some.  Make sure we adjust positions on that
     1541     5535                * record (e.g. "CO ST 'hole%Rindent' AF BO CURR")
     1542     5536                */
     1543     5537    2           ELSE XLATE$LOC.XLATES.OLD_KEY_LO(0) = XLATE$LOC.XLATES.NEW_KEY(0);
     1544     5538    2           XLATE$LOC.XLATES.OLD_KEY_HI(0) = XLATE$LOC.XLATES.OLD_KEY_LO(0);
     1545     5539    2           XLATE$LOC.XLATES.NEW_POS#(0) = DEST_RANGE.ENDD.POSITION#;
     1546     5540    2           XLATE$LOC.XLATES.NEW_POS_INCR#(0) =
     1547     5541    2             DEST_RANGE.ENDD.POSITION# - DEST_RANGE.START.POSITION#;
     1548     5542    2           DEST_RANGE.ENDD.EOF = %TRUE; /* Dont let XLATE mess with it */
     1549     5543    2           DEST_RANGE.START.EOF = %TRUE; /* Dont let XLATE mess with it */
     1550     5544    2           CALL VDG$XLATE_LOCATIONS (XLATE$LOC, %XLATE_LOCATION);
     1551     5545    2           DEST_RANGE.START.EOF = %FALSE; /* Restore to the correct value */
     1552     5546    2           DEST_RANGE.ENDD.EOF = %FALSE; /* Restore to the correct value */
     1553     5547    2           RETURN;
     1554     5548
     1555     5549
     1556     5550
     1557     5551    2   OCLEAR_LOCATION_FAILED: ;
     1558     5552    2   OCOPY_LOCATION_FAILED: ;
     1559     5553    2           ALTRETURN;
     1560     5554
     1561     5555    2   END SET_DEST_END;
     1562     5556
     1563     5557        %BOX (TITLE=CLEANUP, PAGE=YES);
              5565    2
              5569    2   /***************************************************************************
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:140  
              5571    2    *                                                                         *
              5575    2            *                                  CLEANUP                                *
              5577    2            *                                                                         *
              5579    2           ***************************************************************************/

     1564     5583
     1565     5584        /*I* NAME: CLEANUP
     1566     5585            PARAMETERS:
     1567     5586                None.
     1568     5587            INPUT:
     1569     5588                The following auto structures may own objects:
     1570     5589                DEST_OPTIONS
     1571     5590                RECORD
     1572     5591                DEST_NEXT_KEY
     1573     5592                SRC_KEY_OF_RECORD
     1574     5593                LAST_COPIED_KEY
     1575     5594                LAST_WRITTEN_KEY
     1576     5595            OUTPUT:
     1577     5596                Any objects owned by auto structures are freed.
     1578     5597            DESCRIPTION:
     1579     5598                Before leaving VDI$BINSERT for any non-fatal reason, CLEANUP should
     1580     5599                be called to free any objects we allocated for our temporary use.
     1581     5600        */
     1582     5601
     1583     5602    1   CLEANUP: PROC ALTRET;
     1584     5603
     1585     5604                %CLEARKEY (KEY=DEST_OPTIONS.KEY_INCR);
     1586     5614
     1587     5615                %CLEARKEY (KEY=RECORD.KEY);
     1588     5625                %CLEARSPEC (SPEC=RECORD.SPEC);
     1589     5635    3           IF RECORD.DATA$ ~= ADDR(NIL) THEN DO;
     1590     5636    3              CALL VDG$OFREE (RECORD$DATA)
     1591     5637    4              WHENALTRETURN DO; ALTRETURN; END;
     1592     5638    3              END;
     1593     5639
     1594     5640                %CLEARKEY (KEY=DEST_NEXT_KEY);
     1595     5650                %CLEARKEY (KEY=SRC_KEY_OF_RECORD);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:141  
     1596     5660                %CLEARKEY (KEY=LAST_COPIED_KEY);
     1597     5670                %CLEARKEY (KEY=LAST_WRITTEN_KEY);
     1598     5680
     1599     5681    2           RETURN;
     1600     5682
     1601     5683    2   END CLEANUP;
     1602     5684
     1603     5685        %BOX (TITLE=ADJUST_INCREMENT, PAGE=YES);
              5693    2
              5697    2   /***************************************************************************
              5699    2    *                                                                         *
              5703    2            *                              ADJUST_INCREMENT                           *
              5705    2            *                                                                         *
              5707    2           ***************************************************************************/

     1604     5711
     1605     5712        /*I* NAME: ADJUST_INCREMENT
     1606     5713            PARAMETER:
     1607     5714                INCR - VD$KEY containing the default increment for this block
     1608     5715                    expression; must be type %KT_EDITKEY.
     1609     5716                    %CLEAR if no default for this expression.
     1610     5717            INPUT:
     1611     5718                DEST_NEXT_KEY - Key of the existing record following the location we'll
     1612     5719                    start inserting at.  If we're inserting at EOF, DEST_NEXT_KEY
     1613     5720                    should contain MAX_EDITKEY; it should never be %CLEAR.
     1614     5721                RECORD.KEY - Key at which we'll start writing records to the
     1615     5722                    destination.
     1616     5723                SRC_RANGE - Range of the source block.
     1617     5724                SRC_STREAM - VD$STREAM open to the source block.
     1618     5725            OUTPUT:
     1619     5726                INCR will contain the key increment to use when generating record keys
     1620     5727                    for writing to the destination.  If INCR = %CLEAR, we couldn't
     1621     5728                    find an increment which would work; either the destination will
     1622     5729                    have to be rekeyed, or we'll get a cutoff error if we try to do
     1623     5730                    the insertion anyway (with some other increment).
     1624     5731                DEST_KEY_SPACE will contain the maximum number of keys which could be
     1625     5732                    generated between RECORD.KEY and DEST_NEXT_KEY (using an increment
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:142  
     1626     5733                    of .001).  This information is needed by VDI$BAUTO_REKEY.
     1627     5734                SRC_STREAM has been repositioned.
     1628     5735            DESCRIPTION:
     1629     5736                (AF 1021B also discusses this algorthm.)
     1630     5737                Calculate DEST_KEY_SPACE.
     1631     5738                If INCR is %CLEAR, set it to the default key increment, from $BY.
     1632     5739                Determine if INCR will allow at least one record to be copied; that is,
     1633     5740                    is INCR < DEST_KEY_SPACE?  If not, then adjust INCR downward to
     1634     5741                    the number less than DEST_KEY_SPACE whose first non-0 digit is
     1635     5742                    1, 2, or 5, with all other digits being 0; e.g:
     1636     5743
     1637     5744                        If DEST_KEY_SPACE is:   then change INCR to:
     1638     5745                        ---------------------   --------------------
     1639     5746                          17.0                    10.0
     1640     5747                           1.2                     1.0
     1641     5748                            .030                    .020
     1642     5749                            .020                    .010
     1643     5750                            .010                    .005
     1644     5751                            etc.                    etc.
     1645     5752
     1646     5753                Loop until either INCR "fits" or we "give up":
     1647     5754                    A.  Compute the max number of records we can fit using INCR; this
     1648     5755                            is:  DEST_KEY_SPACE / INCR.
     1649     5756                    B.  Read forward from SRC_RANGE.START the number of records
     1650     5757                            computed in step A.
     1651     5758
     1652     5759                        If the resulting record key is beyond SRC_RANGE.ENDD, then
     1653     5760                            this value of INCR "fits":  exit the loop.
     1654     5761
     1655     5762                        If the resulting record key is not beyond SRC_RANGE.ENDD:
     1656     5763                                adjust INCR downward to the next lower number whose
     1657     5764                                first non-0 digit is 1, 2, or 5, with all other digits
     1658     5765                                being 0.
     1659     5766                                If that yields 0, then "give up":  we can't find a
     1660     5767                                key increment that will work.
     1661     5768                            Loop back to step A above, using the new value for INCR.
     1662     5769        */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:143  
     1663     5770
     1664     5771    1   ADJUST_INCREMENT: PROC (INCR) ALTRET;
     1665     5772
     1666     5773        %VD$KEY_NUMBER (NAME=INCR, STCLASS=PARAM);
     1667     5788        %VD$NODE_DESC (NAME=LAST_SRC_RECORD, STCLASS=AUTO);
     1668     5830
     1669     5831
     1670     5832    2   DCL DEST_NEXT_KEY$ PTR;
     1671     5833    2   DCL RECORD_KEY$ PTR;
     1672     5834    2   DCL SRC_START_KEY$ PTR;
     1673     5835    2   DCL SRC_END_KEY$ PTR;
     1674     5836    2   DCL INCREMENT SBIN;
     1675     5837    2   DCL MAX_RECS_CAN_FIT SBIN;
     1676     5838    2   DCL SRC_STREAM_KEY$ PTR;
     1677     5839
     1678     5840
     1679     5841        %VD$TEXTC_NUMBER (NAME=DEST$NEXT_KEY, STCLASS="BASED(DEST_NEXT_KEY$)");
     1680     5855        %VD$TEXTC_NUMBER (NAME=RECORD$KEY, STCLASS="BASED(RECORD_KEY$)");
     1681     5869        %VD$TEXTC (NAME=SRC$START_KEY, STCLASS="BASED(SRC_START_KEY$)");
     1682     5892        %VD$TEXTC (NAME=SRC$END_KEY, STCLASS="BASED(SRC_END_KEY$)");
     1683     5915        %VD$TEXTC (NAME=SRC$STREAM_KEY, STCLASS="BASED(SRC_STREAM_KEY$)");
     1684     5938
     1685     5939
     1686     5940
     1687     5941    3           IF INCR = %CLEAR THEN DO;
     1688     5942                   /* User gave no increment for this block expression */
     1689     5943    3              INCR.TYPE# = %KT_EDITKEY;
     1690     5944    3              INCR.REP# = %REP_LOCAL;
     1691     5945    3              INCR.LENGTH# = %NB_NUMERIC_KEY;
     1692     5946    3              IF VD_$BY.V# ~= 0 THEN INCR.BYTES# = VD_$BY.V#;
     1693     5947    3              ELSE INCR.BYTES# = %DFLT_$BY;
     1694     5948    3              END;
     1695     5949
     1696     5950                %GETKEY (KEY=RECORD.KEY, PTR=RECORD_KEY$);
     1697     5960
     1698     5961                /* Don't generate a key of 0.000 unless we need to.  */
     1699     5962
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:144  
     1700     5963    2           IF (RECORD$KEY.BYTES# = %MN_EDITKEY) AND NOT (DEST_EXISTS) THEN
     1701     5964    2              GENERATE_KEY = %SQ_NEXT;
     1702     5965                %GETKEY (KEY=DEST_NEXT_KEY, PTR=DEST_NEXT_KEY$);
     1703     5975    2           DEST_KEY_SPACE = DEST$NEXT_KEY.BYTES# - RECORD$KEY.BYTES#;
     1704     5976    2           IF GENERATE_KEY = %SQ_NEXT THEN
     1705     5977    2              DEST_KEY_SPACE = DEST_KEY_SPACE - 1;
     1706     5978    2           IF DEST_EXISTS AND DEST_RIGHT$ ~= ADDR(NIL) THEN
     1707     5979    2              DEST_KEY_SPACE = DEST_KEY_SPACE - 1;
     1708     5980
     1709     5981    2           IF SRC_RANGE.START.EOF THEN
     1710     5982    2              RETURN;  /* Any increment will do */
     1711     5983
     1712     5984                %GETKEY (KEY=SRC_RANGE.START.KEY, INDX=SRC_LEVEL-1, PTR=SRC_START_KEY$);
     1713     5994                %GETKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1, PTR=SRC_END_KEY$);
     1714     6004    2           IF SRC_RANGE.ENDD.EOF THEN
     1715     6005    2              SRC_END_KEY$ = ADDR(VD_KEY_MX_EDITKEY.LENGTH#);
     1716     6006
     1717     6007    2           IF SRC$START_KEY.BYTES >= SRC$END_KEY.BYTES THEN
     1718     6008    2              IF NOT OUTSIDE_SRC_RANGE THEN
     1719     6009    2                 RETURN; /* Any increment will do */
     1720     6010
     1721     6011                /*
     1722     6012                *   Source block includes at least 1 EOR; we'll have to do at least 1
     1723     6013                *       insertion.
     1724     6014                */
     1725     6015
     1726     6016
     1727     6017    2           INCREMENT = INCR.BYTES#;    /* Make word for better performance */
     1728     6018
     1729     6019    3           IF INCREMENT >= DEST_KEY_SPACE THEN DO;
     1730     6020    3              INCREMENT = DEST_KEY_SPACE + 1;  /* Initial value */
     1731     6021    3              CALL NEXT_LOWER_INCR;
     1732     6022    3              END;
     1733     6023
     1734     6024    2           MAX_RECS_CAN_FIT = 1;
     1735     6025    2           SRC_STREAM_KEY$ = SRC_START_KEY$;
     1736     6026
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:145  
     1737     6027    2           IF NOT OUTSIDE_SRC_RANGE THEN
     1738     6028    2   LOOP:
     1739     6029    3           DO WHILE INCREMENT > 0;
     1740     6030
     1741     6031    3              MAX_RECS_CAN_FIT = DEST_KEY_SPACE / INCREMENT;
     1742     6032    3              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, MAX_RECS_CAN_FIT,
     1743     6033    3                %DONT_READ_RECORD) ALTRET (LREAD_FAILED);
     1744     6034    3              IF SRC_STREAM.CURRENT.EOF THEN
     1745     6035    3                 EXIT LOOP; /* Hit EOF:  INCREMENT fits ok */
     1746     6036                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     1747     6037                   PTR=SRC_STREAM_KEY$);
     1748     6047
     1749     6048    3              IF (SRC$STREAM_KEY.BYTES >= SRC$END_KEY.BYTES) THEN
     1750     6049    3                 EXIT LOOP;    /* Current INCR fits all recs from source */
     1751     6050    3              CALL NEXT_LOWER_INCR;
     1752     6051    3              END LOOP;
     1753     6052
     1754     6053                /* If INCREMENT <= 0, we failed to find an increment */
     1755     6054    3           IF INCREMENT > 0 THEN DO;
     1756     6055                   /* Return INCREMENT in INCR */
     1757     6056    3              INCR.BYTES# = INCREMENT;
     1758     6057    3              RETURN;
     1759     6058    3              END;
     1760     6059
     1761     6060                /* Just to make rekey's job easier, count the source records */
     1762     6061
     1763     6062    2           INCREMENT = MAXIMUM (MAX_RECS_CAN_FIT,4);
     1764     6063    2           IF NOT OUTSIDE_SRC_RANGE THEN
     1765     6064    2   COUNT_LOOP:
     1766     6065    3           DO %FOREVER;
     1767     6066    3              IF SRC_STREAM.CURRENT.EOF
     1768     6067    4                OR SRC$STREAM_KEY.BYTES > SRC$END_KEY.BYTES THEN DO;
     1769     6068    4                 IF INCREMENT >= MAX_RECS_CAN_FIT THEN
     1770     6069    4                    INCREMENT = (INCREMENT + 1) / 2;
     1771     6070    4                 IF INCREMENT = 1 THEN EXIT COUNT_LOOP;
     1772     6071    4                 INCREMENT = (INCREMENT + 1) / 2;
     1773     6072    4                 MAX_RECS_CAN_FIT = MAX_RECS_CAN_FIT - INCREMENT;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:146  
     1774     6073    4                 END;
     1775     6074    4              ELSE DO;
     1776     6075    5                 IF INCREMENT >= MAX_RECS_CAN_FIT THEN DO;
     1777     6076    5                    INCREMENT = MAX_RECS_CAN_FIT + INCREMENT;
     1778     6077    5                    MAX_RECS_CAN_FIT = INCREMENT;
     1779     6078    5                    END;
     1780     6079    5                 ELSE DO;
     1781     6080    5                    INCREMENT = (INCREMENT + 1) / 2;
     1782     6081    5                    MAX_RECS_CAN_FIT = MAX_RECS_CAN_FIT + INCREMENT;
     1783     6082    5                    END;
     1784     6083    4                 END;
     1785     6084
     1786     6085    3              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, MAX_RECS_CAN_FIT,
     1787     6086    3                %DONT_READ_RECORD) ALTRET (LREAD_FAILED);
     1788     6087                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     1789     6088                   PTR=SRC_STREAM_KEY$);
     1790     6098    3              END COUNT_LOOP;
     1791     6099
     1792     6100    2           INCR.TYPE# = 0;
     1793     6101    2           DEST_KEY_SPACE = MAX_RECS_CAN_FIT;
     1794     6102    2           RETURN;
     1795     6103
     1796     6104
     1797     6105    2   LREAD_FAILED: ;
     1798     6106    2   RGET_FAILED: ;
     1799     6107    2           ALTRETURN;
     1800     6108
     1801     6109        %BOX (TITLE=NEXT_LOWER_INCR);

              6121    2   /***************************************************************************
              6123    2    *                                                                         *
              6127    2            *                              NEXT_LOWER_INCR                            *
              6129    2            *                                                                         *
              6131    2           ***************************************************************************/

     1802     6135
     1803     6136        /*I** NAME: NEXT_LOWER_INCR
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:147  
     1804     6137            PARAMETERS:
     1805     6138            INPUT:
     1806     6139            OUTPUT:
     1807     6140                INCREMENT will be changed; it will contain the next lower number which
     1808     6141                    ends in 0, 1, 2, or 5.  If INCR is initially <= 0 or then
     1809     6142                    next lower number is <= 0, INCR will be returned containing 0.
     1810     6143            DESCRIPTION:
     1811     6144                Look up the next lower 1/2/5 increment in a table, and return it.
     1812     6145        */
     1813     6146
     1814     6147    2   NEXT_LOWER_INCR: PROC;
     1815     6148
     1816     6149
     1817     6150    3   DCL INCR_521_TABLE (0:25) SBIN CONSTANT
     1818     6151    3       INIT (100000000,
     1819     6152    3           50000000, 20000000, 10000000,   5000000, 2000000, 1000000,
     1820     6153    3           500000, 200000, 100000,         50000, 20000, 10000,
     1821     6154    3           5000, 2000, 1000,               500, 200, 100,
     1822     6155    3           50, 20, 10,                     5, 2, 1,
     1823     6156    3           0);
     1824     6157
     1825     6158    3   DCL TABLE_INDEX SBIN;
     1826     6159
     1827     6160
     1828     6161    4           DO TABLE_INDEX = 0 TO 24;
     1829     6162    4              IF INCREMENT > INCR_521_TABLE (TABLE_INDEX) THEN EXIT;
     1830     6163    4              END;
     1831     6164
     1832     6165    3           INCREMENT = INCR_521_TABLE (TABLE_INDEX);
     1833     6166    3           RETURN;
     1834     6167
     1835     6168    3   END NEXT_LOWER_INCR;
     1836     6169
     1837     6170    2   END ADJUST_INCREMENT;
     1838     6171
     1839     6172        %BOX (TITLE=PREPARE_DESTINATION, PAGE=YES);
              6180    2
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:148  
              6184    2   /***************************************************************************
              6186    2    *                                                                         *
              6190    2            *                            PREPARE_DESTINATION                          *
              6192    2            *                                                                         *
              6194    2           ***************************************************************************/

     1840     6198
     1841     6199        /*I* NAME: PREPARE_DESTINATION
     1842     6200            INPUT:
     1843     6201                FIRST_SRC_RECORD - VD$NODE_DESC containing the first/only record from
     1844     6202                    the source block.
     1845     6203                DEST_STREAM - VD$STREAM open to destination file.
     1846     6204                DEST$EDIT_BLOCK - EditBlock containing the destination block.
     1847     6205                DEST_RANGE - Range of destination block.
     1848     6206                    .START must already be set to be a copy of .ENDD.
     1849     6207                DEST_RANGE_TYPE - %BDT_ code for DEST_RANGE.
     1850     6208                DEST_LEVEL - Level in file structure of the destination block.
     1851     6209            OUTPUT:
     1852     6210                RECORD.SPEC, .DATA, and .EOR will be set from destLeft, if any.
     1853     6211                    If no destLeft, these fields will be %CLEAR/NIL.
     1854     6212                RECORD.KEY will contain the key to be used for the first write (or
     1855     6213                    as the base for generating a new SQ_NEXT key on the first write).
     1856     6214                    If we should insert the source block in front of the given
     1857     6215                    destination key, RECORD.KEY will contain the key of the existing
     1858     6216                    record just prior to the given destination key.
     1859     6217                DEST_LEFT_LENGTH will contain the length of the destLeft portion of
     1860     6218                    the destination record; 0 if none.
     1861     6219                DEST_NEXT_KEY will contain the key of the record following RECORD.KEY.
     1862     6220                    If the given dest key is the last or beyond the last record in
     1863     6221                    the file, DEST_NEXT_KEY will be set to MAX_EDITKEY.
     1864     6222                DEST_RIGHT$ will be either NIL, or will point to a VD$BUFFER containing
     1865     6223                    either destRight or destNext.  If it's not NIL, then the data
     1866     6224                    is assumed to include the EOR boundary.
     1867     6225                DEST_EXISTS will be set to true or false, indicating if the given
     1868     6226                    destination key exists in the destination EditBlock or not.
     1869     6227                GENERATE_KEY indicates whether and how to generate a key for the
     1870     6228                    first record written to the destination block:
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:149  
     1871     6229                    %SQ_CURRENT - use RECORD.KEY itself -- don't generate a new key.
     1872     6230                    %SQ_NEXT - generate a key after RECORD.KEY; DEST_NEXT_KEY is
     1873     6231                        the key of the existing record after RECORD.KEY.
     1874     6232                DEST_STREAM has been repositioned.
     1875     6233            DESCRIPTION:
     1876     6234                See if destination record exists, by reading the record at the given
     1877     6235                    destination key; if that key doesn't exist in the file, we'll get
     1878     6236                    the record following the given dest key.
     1879     6237                If the given destination key does exist, separate the record into
     1880     6238                    destLeft and destRight:
     1881     6239                    Set RECORD to destLeft;
     1882     6240                    Set DEST_RIGHT$ to destRight.
     1883     6241                If it doesn't exist, the record we read is actually the destNext
     1884     6242                    record.  Save it in DEST_RIGHT$.
     1885     6243        */
     1886     6244
     1887     6245    1   PREPARE_DESTINATION: PROC ALTRET;
     1888     6246
     1889     6247
     1890     6248
     1891     6249    2   DCL DEST_GIVEN_KEY$ PTR;
     1892     6250    2   DCL RELATIVE SBIN;
     1893     6251    2   DCL RECORD_KEY$ PTR;
     1894     6252    2   DCL DEST_RIGHT_LENGTH SBIN;
     1895     6253    2   DCL ALLOC_WDS SBIN;
     1896     6254
     1897     6255
     1898     6256        %VD$TEXTC (NAME=DEST$GIVEN_KEY, STCLASS="BASED(DEST_GIVEN_KEY$)");
     1899     6279        %VD$TEXTC (NAME=RECORD$KEY, STCLASS="BASED(RECORD_KEY$)");
     1900     6302        %VD$BUFFER (NAME=DEST$RIGHT, STCLASS="BASED(DEST_RIGHT$)");
     1901     6360        %VD$BUFFER (NAME=RECORD$DATA, STCLASS="BASED(RECORD.DATA$)");
     1902     6418
     1903     6419
     1904     6420
     1905     6421    2           DEST_LEFT_LENGTH = 0;
     1906     6422    2           DEST_RIGHT$ = ADDR(NIL);
     1907     6423    2           DEST_EXISTS = %FALSE;       /* Assume given dest key doesn't exist */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:150  
     1908     6424    2           GENERATE_KEY = %SQ_CURRENT; /* Assume "don't generate key" */
     1909     6425
     1910     6426                %GETKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1,
     1911     6427                PTR=DEST_GIVEN_KEY$);
     1912     6437
     1913     6438    2           IF DEST_RANGE.ENDD.EOF THEN
     1914     6439    3   GIVEN_EOF: DO;
     1915     6440                   /*
     1916     6441                   *   Dest ends at EOF:  find last key in file to use as base for
     1917     6442                   *      key generation.
     1918     6443                   */
     1919     6444    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, -1, %DONT_READ_RECORD)
     1920     6445    3                ALTRET (LREAD_FAILED);
     1921     6446    3              IF DEST_STREAM.CURRENT.EOF THEN
     1922     6447    3                 RECORD.KEY = VD_KEY_MN_EDITKEY;
     1923     6448    4              ELSE DO;
     1924     6449                      %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     1925     6450                      TKEY=RECORD.KEY);
     1926     6466    4                 END;
     1927     6467    3              GENERATE_KEY = %SQ_NEXT; /* Always generate key */
     1928     6468    3              END GIVEN_EOF;
     1929     6469    2           ELSE
     1930     6470    3   GIVEN_NOT_EOF: DO;
     1931     6471    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, 0, %READ_RECORD)
     1932     6472    3                ALTRET (LREAD_FAILED);
     1933     6473    3              CALL VDE$RGET (DEST_STREAM, DEST$EDIT_BLOCK.RANGE, RECORD)
     1934     6474    3                ALTRET (RGET_FAILED);
     1935     6475                   %GETKEY (KEY=RECORD.KEY, PTR=RECORD_KEY$);
     1936     6485
     1937     6486    3              IF RECORD.KEY = %CLEAR     /* Rec beyond dest EditBlock, or EOF */
     1938     6487    3                OR RECORD$KEY ~= DEST$GIVEN_KEY THEN
     1939     6488    4   GIVEN_KEY_DOESNT_EXIST: DO;
     1940     6489                      /* Given destination key doesn't exist */
     1941     6490    4                 DEST_EXISTS = %FALSE;
     1942     6491
     1943     6492                      /*
     1944     6493                      *  Record we got is actually destNext; return it in DEST_RIGHT$.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:151  
     1945     6494                      *  However, if the last source record includes EOR, then we
     1946     6495                      *     don't want to touch destNext--so free it and return
     1947     6496                      *     DEST_RIGHT$ as NIL.
     1948     6497                      */
     1949     6498                      %CLEARSPEC (SPEC=RECORD.SPEC);
     1950     6508    4                 IF SRC_RANGE.ENDD.EOF OR SRC_RANGE.ENDD.POSITION# = 0 THEN
     1951     6509    4                    CALL VDG$OFREE (RECORD$DATA)
     1952     6510    4                      ALTRET (OFREE_FAILED);
     1953     6511    4                 ELSE
     1954     6512    4                    DEST_RIGHT$ = RECORD.DATA$;
     1955     6513    4                 RECORD.DATA$ = ADDR(NIL);
     1956     6514    4                 RECORD.EOR = %FALSE;
     1957     6515
     1958     6516    4                 DEST_NEXT_KEY = RECORD.KEY;
     1959     6517                      %COPYKEY (FKEY=DEST_RANGE.ENDD.KEY, FINDX=DEST_LEVEL-1,
     1960     6518                      TKEY=RECORD.KEY);
     1961     6534
     1962     6535                      /*
     1963     6536                      *  If starting position is not BOR, we must pad the record
     1964     6537                      *  with the fill character up to the starting position.
     1965     6538                      */
     1966     6539    4                 DEST_LEFT_LENGTH = DEST_RANGE.ENDD.POSITION#;
     1967     6540    5                 IF DEST_LEFT_LENGTH > 0 THEN DO;
     1968     6541    5                    CALL VDE$RADJUST_LENGTH (RECORD, DEST_LEFT_LENGTH)
     1969     6542    5                      ALTRET (RADJUST_LENGTH_FAILED);
     1970     6543    5                    END;
     1971     6544    4                 END GIVEN_KEY_DOESNT_EXIST;
     1972     6545    3              ELSE
     1973     6546    4   GIVEN_KEY_DOES_EXIST: DO;
     1974     6547                      /* Given destination key does exist */
     1975     6548    4                 DEST_EXISTS = %TRUE;
     1976     6549
     1977     6550                      /*
     1978     6551                      *   Split RECORD.DATA$ into destLeft and destRight.
     1979     6552                      *   However, if this is a "genkey" case and the last source
     1980     6553                      *     record includes EOR, then we don't want to touch the
     1981     6554                      *     destRight in the file (and there is no destLeft).
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:152  
     1982     6555                      *     So in this case, free the record just read and return
     1983     6556                      *     DEST_RIGHT$ = NIL.
     1984     6557                      */
     1985     6558    4                 DEST_LEFT_LENGTH = DEST_RANGE.ENDD.POSITION#;
     1986     6559
     1987     6560    4                 DEST_EOR = RECORD.EOR;
     1988     6561    4                 IF DEST_LEFT_LENGTH = 0
     1989     6562    4                   AND SRC_RANGE.ENDD.POSITION# = 0
     1990     6563    4                   AND ADDR(RECORD.KEY.V$) -> VD$TEXTC_NUMBER ~=
     1991     6564    5                   ADDR(VD_KEY_MN_EDITKEY.LENGTH#) -> VD$TEXTC_NUMBER THEN DO;
     1992     6565    5                    DEST_RIGHT_LENGTH = 0;
     1993     6566    5                    END;
     1994     6567    5                 ELSE DO;
     1995     6568    5                    DEST_RIGHT_LENGTH = MAXIMUM (0, RECORD$DATA.LENGTH# -
     1996     6569    5                      DEST_LEFT_LENGTH);
     1997     6570    5                    IF DEST_RIGHT_LENGTH = 0 AND MY_EOF_DELETED THEN EXIT;
     1998     6571    5                    ALLOC_WDS = (LENGTHC(VD$BUFFER_HEADER) + DEST_RIGHT_LENGTH +
     1999     6572    5                      %NB_PER_WORD - 1) / %NB_PER_WORD;
     2000     6573    5                    CALL VDG$OALLOC (%CLS_BUFFER, DEST_RIGHT$, ALLOC_WDS)
     2001     6574    5                      ALTRET (OALLOC_FAILED);
     2002     6575    5                    DEST$RIGHT.LENGTH# = DEST_RIGHT_LENGTH;
     2003     6576    6                    IF DEST_RIGHT_LENGTH > 0 THEN DO;
     2004     6577    6                       DEST$RIGHT.BYTES = SUBSTR(RECORD$DATA.BYTES,
     2005     6578    6                         DEST_LEFT_LENGTH);
     2006     6579    6                       END;
     2007     6580    5                    END;
     2008     6581
     2009     6582    4                 CALL VDE$RADJUST_LENGTH (RECORD, DEST_LEFT_LENGTH)
     2010     6583    4                   ALTRET (RADJUST_LENGTH_FAILED);
     2011     6584
     2012     6585                      /* Get destNext key */
     2013     6586    4                 CALL VDA$LREAD (DEST_STREAM, , 1, %DONT_READ_RECORD)
     2014     6587    4                   ALTRET (LREAD_FAILED);
     2015     6588    5                 IF NOT DEST_STREAM.CURRENT.EOF THEN DO;
     2016     6589                         %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     2017     6590                         TKEY=DEST_NEXT_KEY);
     2018     6606    5                    END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:153  
     2019     6607    4                 END GIVEN_KEY_DOES_EXIST;
     2020     6608    3              END GIVEN_NOT_EOF;
     2021     6609
     2022     6610                /*
     2023     6611                *   At this point:
     2024     6612                *       RECORD.KEY = key to either write 1st record to, or on which to
     2025     6613                *           base key generation on 1st write.
     2026     6614                *       DEST_NEXT_KEY = next existing key after RECORD.KEY.
     2027     6615                *           !! May be %CLEAR at this point, indicating EOF !!
     2028     6616                *       RECORD.DATA, DEST_RIGHT set up appropriately.
     2029     6617                *       GENERATE_KEY = %SQ_CURRENT normally, unless we've already
     2030     6618                *           determined we must generate a key.
     2031     6619                */
     2032     6620
     2033     6621    3           IF DEST_NEXT_KEY = %CLEAR THEN DO;
     2034     6622    3              IF DEST$EDIT_BLOCK.RANGE.ENDD.EOF THEN
     2035     6623    3                 DEST_NEXT_KEY = VD_KEY_MX_EDITKEY;
     2036     6624    4              ELSE DO;
     2037     6625                      %COPYKEY (FKEY=DEST$EDIT_BLOCK.RANGE.ENDD.KEY, FINDX=DEST_LEVEL-1,
     2038     6626                      TKEY=DEST_NEXT_KEY);
     2039     6642    4                 END;
     2040     6643    3              END;
     2041     6644
     2042     6645                /*
     2043     6646                *   Final adjustments to RECORD.KEY and GENERATE_KEY:
     2044     6647                *   If DEST_EXISTS  !AND!  dest location is BOR  !AND! the
     2045     6648                *       first source record does include EOR, then we must back up
     2046     6649                *       RECORD.KEY to the existing key in front of the given dest key,
     2047     6650                *       and set GENERATE_KEY to %SQ_NEXT.
     2048     6651                *       Also, change DEST_NEXT_KEY to be the original RECORD.KEY (the
     2049     6652                *       one that DEST_EXISTS says exists).  Then clear DEST_EXISTS
     2050     6653                *       to make it accurate again, since "DEST" is now empty space.
     2051     6654                */
     2052     6655
     2053     6656    2           IF DEST_EXISTS AND DEST_LEFT_LENGTH = 0
     2054     6657    2             AND ADDR(RECORD.KEY.V$) -> VD$TEXTC_NUMBER ~=
     2055     6658    2             ADDR(VD_KEY_MN_EDITKEY.LENGTH#) -> VD$TEXTC_NUMBER
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:154  
     2056     6659    3             AND FIRST_SRC_RECORD.EOR THEN DO;
     2057     6660    3              GENERATE_KEY = %SQ_NEXT;
     2058     6661                   %CLEARKEY (KEY=DEST_NEXT_KEY);
     2059     6671    3              DEST_NEXT_KEY = RECORD.KEY;  /* Used when generating key */
     2060     6672    3              RECORD.KEY = %CLEAR;
     2061     6673                   /* Back up */
     2062     6674    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, -1, %DONT_READ_RECORD)
     2063     6675    3                ALTRET (LREAD_FAILED);
     2064     6676    3              DEST_EXISTS = %FALSE;
     2065     6677    3              IF DEST_STREAM.CURRENT.KEY.V$(DEST_LEVEL-1) >= DEST_NEXT_KEY.V$
     2066     6678    4              THEN DO;
     2067     6679                      /* Hit BOF:  Use MIN_EDITKEY */
     2068     6680    4                 RECORD.KEY = VD_KEY_MN_EDITKEY;
     2069     6681    4                 END;
     2070     6682    4              ELSE DO;
     2071     6683                      %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     2072     6684                      TKEY=RECORD.KEY);
     2073     6700    4                 END;
     2074     6701    3              END;
     2075     6702
     2076     6703    2           RETURN;
     2077     6704
     2078     6705
     2079     6706    2   LREAD_FAILED: ;
     2080     6707    2   RGET_FAILED: ;
     2081     6708    2   OALLOC_FAILED: ;
     2082     6709    2   OFREE_FAILED: ;
     2083     6710    2   RADJUST_LENGTH_FAILED: ;
     2084     6711    2           ALTRETURN;
     2085     6712
     2086     6713    2   END PREPARE_DESTINATION;
     2087     6714
     2088     6715        %BOX (TITLE=ABORT_INSERTION, PAGE=YES);
              6723    2
              6727    2   /***************************************************************************
              6729    2    *                                                                         *
              6733    2            *                              ABORT_INSERTION                            *
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:155  
              6735    2            *                                                                         *
              6737    2           ***************************************************************************/

     2089     6741
     2090     6742        /*I* NAME: ABORT_INSERTION
     2091     6743            PARAMETERS:
     2092     6744                None.
     2093     6745            INPUT:
     2094     6746                FIRST_SRC_RECORD.EOR must be set if the first source record had an EOR;
     2095     6747                    reset otherwise or if we haven't read the first src record yet.
     2096     6748                DEST_EXISTS must be set if the given destination key exists in the file.
     2097     6749                DEST_RANGE_TYPE must contain a %BDT_ code indicating the configuration
     2098     6750                    of the given destination range.
     2099     6751                LAST_COPIED_KEY - Key of last source record which was successfully
     2100     6752                    copied to the destination range.  %CLEAR if no records yet copied.
     2101     6753                LAST_WRITTEN_KEY - Key of the last record successfully inserted into the
     2102     6754                    destination range.  This is the key with which the LAST_COPIED_KEY
     2103     6755                    record was written to the destination range.
     2104     6756                DEST_RIGHT$ - Ptr to VD$BUFFER containing the destRight record, if any.
     2105     6757                RECORD - If DEST_RIGHT$ is NIL and we should have had a destRight,
     2106     6758                    then RECORD contains the destRight record (this happens if we get
     2107     6759                    an error while trying to actually write the destRight record to
     2108     6760                    the file).
     2109     6761                DEST_NEXT_KEY - Key of the next existing record after the destination
     2110     6762                    point.  If no records after destination point, DEST_NEXT_KEY
     2111     6763                    is key from DEST$EDIT_BLOCK.RANGE.ENDD.
     2112     6764            OUTPUT:
     2113     6765            DESCRIPTION:
     2114     6766                If we wrote any records to the destination, write an informational
     2115     6767                    message telling the user the src and dest keys of the last record
     2116     6768                    successfully copied.
     2117     6769                Set $LEFTOVER to the destRight data, if appropriate.
     2118     6770                    This data should have been inserted into the file, but couldn't
     2119     6771                    be inserted due to a cutoff or some other non-fatal error.
     2120     6772                    Under certain conditions, the original copy of destRight
     2121     6773                    in the destination file has been overwritten by now; in this case,
     2122     6774                    DEST_RIGHT$/RECORD.DATA$ should be saved for the user, since
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:156  
     2123     6775                    otherwise the data would be lost.
     2124     6776                    The "certain conditions" are:
     2125     6777                        Given destination is nonBOR
     2126     6778                        AND  given destination exists
     2127     6779                        AND  1st/only source record did have an EOR.
     2128     6780                If destRight has been overwritten, but hasn't yet been rewritten in
     2129     6781                    its new location, save it in $LEFTOVER.
     2130     6782                If there was some part of SRC_RANGE which hasn't been copied yet,
     2131     6783                    set $NOT_COPIED to specify the uncopied data.  There are two cases:
     2132     6784                    1. LAST_COPIED_KEY = %CLEAR:  Nothing was copied; or
     2133     6785                    2. LAST_COPIED_KEY ~= %CLEAR:  srcFirst, and possibly some other
     2134     6786                        whole records from the source block, were copied successfully.
     2135     6787                        The not-yet-copied portion will always start on a record
     2136     6788                        boundary (tho it may not end on one).  Read forward from the
     2137     6789                        LAST_COPIED_KEY to find the beginning of the uncopied part
     2138     6790                        of the source block.
     2139     6791                Adjust SRC_RANGE to describe whatever part of the source block was
     2140     6792                    successfully copied.
     2141     6793                Adjust DEST_RANGE.ENDD to describe the data that was successfully
     2142     6794                    inserted in its new location in the destination.
     2143     6795                    (DEST_RANGE.START has already been set to the start of the inserted
     2144     6796                    data).
     2145     6797        */
     2146     6798
     2147     6799    1   ABORT_INSERTION: PROC ALTRET;
     2148     6800
     2149     6801        %VD$LOCATION (NAME=SRC_LOC, STCLASS=AUTO);
     2150     6829        %VD$RANGE (NAME=NOT_COPIED_RANGE, STCLASS=AUTO);
     2151     6898    2   DCL INDX UBIN;
     2152     6899    2   DCL STREAM_KEY$ PTR;
     2153     6900    2   DCL RANGE_ENDD_KEY$ PTR;
     2154     6901
     2155     6902
     2156     6903        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2157     6926        %VD$TEXTC (NAME=RANGE$ENDD_KEY, STCLASS="BASED(RANGE_ENDD_KEY$)");
     2158     6949        %VD$BUFFER;
     2159     7007        %VD$KEY;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:157  
     2160     7021
     2161     7022
     2162     7023
     2163     7024    3           IF LAST_COPIED_KEY ~= %CLEAR THEN DO;
     2164     7025    3              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2165     7026    3                ALTRET (ALLOC_FAILED);
     2166     7027    3              VD$ERR.ERR.CODE# = %E$INFO_LAST_RECORD_COPIED;
     2167     7028    3              VD$ERR.FLAGLEV# = %FLV_INFO;
     2168     7029    3              ERR_SUBST$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     2169     7030
     2170     7031                   /* Allocate a buffer to hold 2 keys for errmsg substitution */
     2171     7032    3              INDX = 0;
     2172     7033    4              DO WHILE INDX < %MX_CMD_OBJECTS
     2173     7034    4                AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2174     7035    4                 INDX = INDX + 1;
     2175     7036    4                 END;
     2176     7037    4              IF INDX > %MX_CMD_OBJECTS THEN DO;
     2177     7038    4                 CALL VDG$ESCREECH;
     2178     7039    4                 END;
     2179     7040    3              CALL VDG$OALLOC (%CLS_BUFFER, VD_CMD_OBJECTS$ (INDX),
     2180     7041    3                SIZEW(VD$BUFFER_HEADER) + (2 * SIZEW(VD$KEY)))
     2181     7042    3                ALTRET (ALLOC_FAILED);
     2182     7043
     2183     7044    3              ERR$SUBST.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
     2184     7045    3              ERR$SUBST.V$ (0) = PINCRW(VD_CMD_OBJECTS$(INDX),
     2185     7046    3                SIZEW(VD$BUFFER_HEADER));
     2186     7047                   %COPYKEY (FKEY=LAST_COPIED_KEY, TKEY="ERR$SUBST.V$ (0) -> VD$KEY");
     2187     7063
     2188     7064    3              ERR$SUBST.OBJECT.CLASS# (1) = %CLS_PTR_KEY;
     2189     7065    3              ERR$SUBST.V$ (1) = PINCRW(ERR$SUBST.V$ (0), SIZEW(VD$KEY));
     2190     7066                   %COPYKEY (FKEY=LAST_WRITTEN_KEY, TKEY="ERR$SUBST.V$ (1) -> VD$KEY");
     2191     7082    3              CALL VDG$EREPORT_ERROR;
     2192     7083    3              END;
     2193     7084
     2194     7085
     2195     7086    3           IF DEST_EXISTS AND FIRST_SRC_RECORD.EOR THEN DO;
     2196     7087                   /*
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:158  
     2197     7088                   *   We must have had a destRight; it must be saved, since its
     2198     7089                   *        original copy in the destination file has already been
     2199     7090                   *        overwritten.
     2200     7091                   *   Save either DEST_RIGHT$ or RECORD.DATA$ in $LEFTOVER, if
     2201     7092                   *        appropriate.
     2202     7093                   */
     2203     7094    4              IF DEST_RIGHT$ = ADDR(NIL) THEN DO;
     2204     7095    4                 DEST_RIGHT$ = RECORD.DATA$;
     2205     7096    4                 RECORD.DATA$ = ADDR(NIL);
     2206     7097    4                 END;
     2207     7098    4              IF DEST_RIGHT$ ~= ADDR(NIL) THEN DO;
     2208     7099    4                 CALL SAVE_LEFTOVER (DEST_RIGHT$)
     2209     7100    4                   ALTRET (SAVE_LEFTOVER_FAILED);
     2210     7101    4                 END;
     2211     7102    3              END;
     2212     7103
     2213     7104
     2214     7105                /* Shrink source to describe only the data that has been copied */
     2215     7106
     2216     7107    3           IF LAST_COPIED_KEY = %CLEAR THEN DO;
     2217     7108                   /* Nothing was copied */
     2218     7109    3              CALL SAVE_NOT_COPIED (SRC_RANGE)
     2219     7110    3                ALTRET (SAVE_NOT_COPIED_FAILED);
     2220     7111                   /* Make source an empty range */
     2221     7112    3              CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)
     2222     7113    3                ALTRET (OCLEAR_LOCATION_FAILED);
     2223     7114    3              CALL VDG$OCOPY_LOCATION (SRC_RANGE.START, SRC_RANGE.ENDD)
     2224     7115    3                ALTRET (OCOPY_LOCATION_FAILED);
     2225     7116    3              END;
     2226     7117    3           ELSE DO;
     2227     7118                   /*
     2228     7119                   *  Part of src copied, up to and including LAST_COPIED_KEY.
     2229     7120                   *  Read forward after LAST_COPIED_KEY, to find the beginning of
     2230     7121                   *    the uncopied portion, if any.
     2231     7122                   */
     2232     7123    3              SRC_LOC = %CLEAR;
     2233     7124                   %COPYKEY (FKEY=LAST_COPIED_KEY,
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:159  
     2234     7125                   TKEY=SRC_LOC.KEY, TINDX=SRC_LEVEL-1);
     2235     7141
     2236     7142    3              CALL VDA$LREAD (SRC_STREAM, SRC_LOC, 1, %FALSE)
     2237     7143    3                ALTRET (LREAD_FAILED);
     2238     7144
     2239     7145                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     2240     7146                   PTR=STREAM_KEY$);
     2241     7156                   %GETKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1,
     2242     7157                   PTR=RANGE_ENDD_KEY$);
     2243     7167
     2244     7168    3              IF (NOT SRC_STREAM.CURRENT.EOF)
     2245     7169    3                AND (STREAM$KEY.BYTES < RANGE$ENDD_KEY.BYTES
     2246     7170    3                OR (STREAM$KEY.BYTES = RANGE$ENDD_KEY.BYTES
     2247     7171    4                AND SRC_RANGE.ENDD.POSITION# > 0) ) THEN DO;
     2248     7172                      /*
     2249     7173                      *  There's an uncopied portion.
     2250     7174                      *  Because LAST_COPIED_KEY isn't %CLEAR, we know we've
     2251     7175                      *     copied at least one record; therefore, the uncopied portion
     2252     7176                      *     always begins at position 0 of the record after
     2253     7177                      *     LAST_COPIED_KEY (which is SRC_STREAM's current location).
     2254     7178                      */
     2255     7179    4                 NOT_COPIED_RANGE = SRC_RANGE;
     2256     7180    4                 NOT_COPIED_RANGE.START.POSITION# = 0;
     2257     7181                      %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     2258     7182                      TKEY=NOT_COPIED_RANGE.START.KEY, TINDX=SRC_LEVEL-1);
     2259     7198                      %COPYKEY (FKEY=SRC_RANGE.ENDD.KEY, FINDX=SRC_LEVEL-1,
     2260     7199                      TKEY=NOT_COPIED_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);
     2261     7215    4                 CALL SAVE_NOT_COPIED (NOT_COPIED_RANGE)
     2262     7216    4                   ALTRET (SAVE_NOT_COPIED_FAILED);
     2263     7217    4                 END;
     2264     7218
     2265     7219                   /* Adjust SRC_RANGE to cover just the portion successfully copied */
     2266     7220                   %CLEARKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1);
     2267     7230                   %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     2268     7231                   TKEY=SRC_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);
     2269     7247    3              SRC_RANGE.ENDD.EOF = SRC_STREAM.CURRENT.EOF;
     2270     7248    3              SRC_RANGE.ENDD.POSITION# = 0;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:160  
     2271     7249    3              END;
     2272     7250
     2273     7251                /*
     2274     7252                *N*   Adjust DEST_RANGE.ENDD to point to the end of the successfully
     2275     7253                *N*       copied data in the destination.
     2276     7254                *N*
     2277     7255                *N* %CLEARKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1);
     2278     7256                *N* %COPYKEY (FKEY=DEST_NEXT_KEY, TKEY=DEST_RANGE.ENDD.KEY,
     2279     7257                *N*     TINDX=DEST_LEVEL-1);
     2280     7258                *N* DEST_RANGE.ENDD.POSITION# = 0;
     2281     7259                *N* IF DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = <<<max edit key>>> THEN DO;
     2282     7260                *N*     DEST_RANGE.ENDD = %CLEAR;
     2283     7261                *N*     DEST_RANGE.ENDD.EOF = %TRUE;
     2284     7262                *N*     END;
     2285     7263                *N*/
     2286     7264
     2287     7265    2           RETURN;
     2288     7266
     2289     7267
     2290     7268
     2291     7269    2   ALLOC_FAILED: ;
     2292     7270    2   OCLEAR_LOCATION_FAILED: ;
     2293     7271    2   OCOPY_LOCATION_FAILED: ;
     2294     7272    2   OFREE_FAILED: ;
     2295     7273    2   LREAD_FAILED: ;
     2296     7274    2   SAVE_LEFTOVER_FAILED: ;
     2297     7275    2   SAVE_NOT_COPIED_FAILED: ;
     2298     7276    2           ALTRETURN;
     2299     7277
     2300     7278    2   END ABORT_INSERTION;
     2301     7279
     2302     7280        %BOX (TITLE=APPEND, PAGE=YES);
              7288    2
              7292    2   /***************************************************************************
              7294    2    *                                                                         *
              7298    2            *                                   APPEND                                *
              7300    2            *                                                                         *
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:161  
              7302    2           ***************************************************************************/

     2303     7306
     2304     7307        /*I* NAME: APPEND
     2305     7308            PARAMETERS:
     2306     7309                LEFT$ - Ptr to VD$BUFFER containing left part of record.
     2307     7310                RIGHT$ - Ptr to VD$BUFFER containing right part of record.
     2308     7311            INPUT:
     2309     7312            OUTPUT:
     2310     7313                LEFT$ may be changed; in any case, will point to a VD$BUFFER containing
     2311     7314                    the right part of the record appended to the left part.
     2312     7315                RIGHT$ will be NIL, and its VD$BUFFER freed.
     2313     7316            DESCRIPTION:
     2314     7317                Append RIGHT.BYTES to LEFT.BYTES.
     2315     7318        */
     2316     7319
     2317     7320    1   APPEND: PROC (LEFT$, RIGHT$) ALTRET;
     2318     7321
     2319     7322    2   DCL LEFT$ PTR;
     2320     7323    2   DCL RIGHT$ PTR;
     2321     7324    2   DCL NEW_LENGTH SBIN;
     2322     7325    2   DCL ALLOC_WDS SBIN;
     2323     7326    2   DCL CURSOR SBIN;
     2324     7327    2   DCL NEW_BUFFER$ PTR;
     2325     7328
     2326     7329
     2327     7330        %VD$BUFFER (NAME=LEFT, STCLASS="BASED(LEFT$)");
     2328     7388        %VD$BUFFER (NAME=RIGHT, STCLASS="BASED(RIGHT$)");
     2329     7446        %VD$BUFFER (NAME=NEW$BUFFER, STCLASS="BASED(NEW_BUFFER$)");
     2330     7504
     2331     7505
     2332     7506
     2333     7507    2           IF RIGHT$ = ADDR(NIL) THEN
     2334     7508    2              RETURN;
     2335     7509    3           IF RIGHT.LENGTH# > 0 THEN DO;
     2336     7510
     2337     7511                   /* See if LEFT's buffer is big enough for concatenated record */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:162  
     2338     7512
     2339     7513    3              NEW_LENGTH = LEFT.LENGTH# + RIGHT.LENGTH#;
     2340     7514    3              ALLOC_WDS = (LENGTHC(VD$BUFFER_HEADER) + NEW_LENGTH + %NB_PER_WORD-1)
     2341     7515    3                / %NB_PER_WORD;
     2342     7516    4              IF ALLOC_WDS > LEFT.OBJECT.SIZE# THEN DO;
     2343     7517                      /* Need to allocate new buffer */
     2344     7518    4                 CALL VDG$OALLOC (%CLS_BUFFER, NEW_BUFFER$, ALLOC_WDS)
     2345     7519    4                   ALTRET (OALLOC_FAILED);
     2346     7520    4                 NEW$BUFFER.LENGTH# = LEFT.LENGTH#;
     2347     7521    4                 NEW$BUFFER.BYTES = LEFT.BYTES;
     2348     7522    4                 CALL VDG$OFREE (LEFT)
     2349     7523    4                   ALTRET (OFREE_FAILED);
     2350     7524    4                 LEFT$ = NEW_BUFFER$;
     2351     7525    4                 END;
     2352     7526
     2353     7527                   /* Append RIGHT.BYTES to LEFT.BYTES */
     2354     7528    3              CURSOR = LEFT.LENGTH#;
     2355     7529    3              LEFT.LENGTH# = NEW_LENGTH;
     2356     7530    3              CALL INSERT (LEFT.BYTES, CURSOR, , RIGHT.BYTES)
     2357     7531    4              WHENALTRETURN DO;
     2358     7532    4                 CALL VDG$ESCREECH (CURSOR, RIGHT.BYTES, NEW_LENGTH);
     2359     7533    4                 END;
     2360     7534
     2361     7535    3              END;
     2362     7536    2           CALL VDG$OFREE (RIGHT)
     2363     7537    2             ALTRET (OFREE_FAILED);
     2364     7538    2           RIGHT$ = ADDR(NIL);
     2365     7539
     2366     7540    2           RETURN;
     2367     7541
     2368     7542
     2369     7543    2   OALLOC_FAILED: ;
     2370     7544    2   OFREE_FAILED: ;
     2371     7545    2           ALTRETURN;
     2372     7546
     2373     7547    2   END APPEND;
     2374     7548
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:163  
     2375     7549                %BOX (TITLE=SAVE_LEFTOVER, PAGE=YES);
              7557    2
              7561    2   /***************************************************************************
              7563    2    *                                                                         *
              7567    2            *                               SAVE_LEFTOVER                             *
              7569    2            *                                                                         *
              7571    2           ***************************************************************************/

     2376     7575
     2377     7576        /*I* NAME: SAVE_LEFTOVER
     2378     7577            PARAMETERS:
     2379     7578                REC_TO_SAVE$ - Ptr to a VD$BUFFER which contains the record data to be
     2380     7579                    saved.  This record is assumed to include an EOR.
     2381     7580            INPUT:
     2382     7581            OUTPUT:
     2383     7582                REC_TO_SAVE$ will be NIL, and its buffer either freed or owned by the
     2384     7583                    internal file now.
     2385     7584            DESCRIPTION:
     2386     7585                Save a [partial] record under the name $LEFTOVER.
     2387     7586                To allow the user to just say:
     2388     7587                    COPY $LEFTOVER AFTER ...
     2389     7588                $LEFTOVER must be a name.  But we want to save a record, including an
     2390     7589                EOR boundary; this can only be done in an internal file.  Therefore,
     2391     7590                we build an internal file containing the record data to save, then
     2392     7591                set the predefined LOCATION-name $LEFTOVER to specify the entire
     2393     7592                internal file (all 1 record of it).
     2394     7593
     2395     7594                Also, write an informational message to tell the user what we've done.
     2396     7595        */
     2397     7596
     2398     7597    1   SAVE_LEFTOVER: PROC (REC_TO_SAVE$) ALTRET;
     2399     7598
     2400     7599    2   DCL REC_TO_SAVE$ PTR;
     2401     7600
     2402     7601
     2403     7602    2   DCL SAVE_ACCESSOR_PRIV UBIN BYTE ALIGNED;
     2404     7603    2   DCL LEFTOVER_STREAM$ PTR;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:164  
     2405     7604    2   DCL BLOCK_BUFFER$ PTR;
     2406     7605    2   DCL LEFTOVER_BLOCK$ PTR;
     2407     7606        %VD$LOCATION (NAME=LOC, STCLASS=AUTO);
     2408     7634        %VD$ACCESS_OPTIONS (NAME=OPEN_OPTIONS, STCLASS=AUTO);
     2409     7663
     2410     7664
     2411     7665        %VD$BUFFER (NAME=REC$TO_SAVE, STCLASS="BASED(REC_TO_SAVE$)");
     2412     7723        %VD$STREAM (NAME=LEFTOVER$STREAM, STCLASS="BASED(LEFTOVER_STREAM$)");
     2413     7829        %VD$BUFFER (NAME=BLOCK$BUFFER, STCLASS="BASED(BLOCK_BUFFER$)");
     2414     7887        %VD$BLOCK_DESC (NAME=LEFTOVER$BLOCK, STCLASS="BASED(LEFTOVER_BLOCK$)");
     2415     8034        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     2416     8140        %VD$PORT;
     2417     8238        %VD$BUFFER;
     2418     8296
     2419     8297
     2420     8298
     2421     8299    2           LEFTOVER_STREAM$ = ADDR(NIL);
     2422     8300    2           BLOCK_BUFFER$ = ADDR(NIL);
     2423     8301
     2424     8302    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;
     2425     8303    2           VD_ACCESSOR_PRIV = %BITBIN(NAC_ALL_BITS);
     2426     8304
     2427     8305                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2428     8306                /*!!!!!                                                 !!!!!*/
     2429     8307                /*!!!!!     From here on, any exits must restore        !!!!!*/
     2430     8308                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2431     8309                /*!!!!!          to its original value.                 !!!!!*/
     2432     8310
     2433     8311
     2434     8312                /* Build the internal file */
     2435     8313    2           CALL VDG$OALLOC (%CLS_STREAM, LEFTOVER_STREAM$)
     2436     8314    2             ALTRET (OALLOC_FAILED);
     2437     8315    2           OPEN_OPTIONS = %CLEAR;
     2438     8316    2           OPEN_OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;
     2439     8317    2           OPEN_OPTIONS.PROTECT# = %DONT_PROTECT;
     2440     8318    2           OPEN_OPTIONS.EXIST# = %EX_ANY;
     2441     8319    2           CALL VDA$FOPEN (LEFTOVER$STREAM, VD_KEY_SCRATCH_LEFTOVER, 0,
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:165  
     2442     8320    2             OPEN_OPTIONS)
     2443     8321    2             ALTRET (FOPEN_FAILED);
     2444     8322
     2445     8323    2           LOC = %CLEAR;
     2446     8324    2           LOC.KEY (%LVL_LOWER - 1) = VD_KEY_NUMERIC_BOF;
     2447     8325    2           CALL VDA$LWRITE (LEFTOVER$STREAM, LOC, , REC$TO_SAVE)
     2448     8326    2             ALTRET (LWRITE_LEFTOVER_FAILED);
     2449     8327    2           REC_TO_SAVE$ = ADDR(NIL);   /* Object owned by internal file now */
     2450     8328
     2451     8329    2           CALL VDA$FCLOSE (LEFTOVER$STREAM)
     2452     8330    2             ALTRET (FCLOSE_FAILED);
     2453     8331    2           CALL VDG$OFREE (LEFTOVER$STREAM)
     2454     8332    2             ALTRET (OFREE_FAILED);
     2455     8333    2           LEFTOVER_STREAM$ = ADDR(NIL);
     2456     8334
     2457     8335                /* Now set $LEFTOVER name to specify the internal file */
     2458     8336    2           CALL VDG$OALLOC (%CLS_BLOCK_BUFFER, BLOCK_BUFFER$)
     2459     8337    2             ALTRET (OALLOC_FAILED);
     2460     8338
     2461     8339    2           LEFTOVER_BLOCK$ = PALIGNW (ADDR(BLOCK$BUFFER.BYTES));
     2462     8340    2           LEFTOVER$BLOCK.FILE_KEY = VD_KEY_SCRATCH_LEFTOVER;
     2463     8341                %COPYKEY (FKEY=VD_KEY_NUMERIC_BOF,
     2464     8342                TKEY=LEFTOVER$BLOCK.RANGE.START.KEY, TINDX=%LVL_LOWER-1);
     2465     8358    2           LEFTOVER$BLOCK.RANGE.ENDD.EOF = %TRUE;
     2466     8359    2           LEFTOVER$BLOCK.OPTIONS = OPEN_OPTIONS;
     2467     8360    2           LEFTOVER$BLOCK.OPTIONS.PROTECT# = %PROTECT;
     2468     8361    2           LEFTOVER$BLOCK.OPTIONS.EXIST# = %EX_OLD;
     2469     8362
     2470     8363    2           CALL VDA$LWRITE (LOCATIONS$STREAM, VD_LOC_$LEFTOVER, , BLOCK$BUFFER)
     2471     8364    2             ALTRET (LWRITE_FAILED);
     2472     8365    2           BLOCK_BUFFER$ = ADDR(NIL);  /* Object now owned by Locations file */
     2473     8366    2           CALL VDA$PFLUSH (LOCATIONS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
     2474     8367    2             ALTRET (PFLUSH_FAILED);
     2475     8368
     2476     8369    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
     2477     8370
     2478     8371                /*!!!!!         Its safe now, we've restored            !!!!!*/
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:166  
     2479     8372                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2480     8373                /*!!!!!          to its original value.                 !!!!!*/
     2481     8374                /*!!!!!                                                 !!!!!*/
     2482     8375                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2483     8376
     2484     8377
     2485     8378                /* Now tell the user what we've done */
     2486     8379    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2487     8380    2             ALTRET (OALLOC_ERR_FAILED);
     2488     8381    2           VD$ERR.ERR.CODE# = %E$INFO_DATA_IN_$LEFTOVER;
     2489     8382    2           VD$ERR.FLAGLEV# = %FLV_INFO;
     2490     8383    2           CALL VDG$EREPORT_ERROR;
     2491     8384
     2492     8385    2           RETURN;
     2493     8386
     2494     8387
     2495     8388
     2496     8389    2   LWRITE_LEFTOVER_FAILED:
     2497     8390    2           CALL VDA$FCLOSE (LEFTOVER$STREAM);  /* Ignore altreturn */
     2498     8391
     2499     8392    2   FOPEN_FAILED: ;
     2500     8393    2   FCLOSE_FAILED: ;
     2501     8394    2   LWRITE_FAILED: ;
     2502     8395    2   PFLUSH_FAILED: ;
     2503     8396    3           IF LEFTOVER_STREAM$ ~= ADDR(NIL) THEN DO;
     2504     8397    3              CALL VDG$OFREE (LEFTOVER$STREAM)
     2505     8398    4              WHENALTRETURN DO; ALTRETURN; END;
     2506     8399    3              END;
     2507     8400    3           IF BLOCK_BUFFER$ ~= ADDR(NIL) THEN DO;
     2508     8401    3              CALL VDG$OFREE (BLOCK$BUFFER)
     2509     8402    4              WHENALTRETURN DO; ALTRETURN; END;
     2510     8403    3              END;
     2511     8404
     2512     8405    2   OFREE_FAILED: ;
     2513     8406    2   OALLOC_FAILED: ;
     2514     8407    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
     2515     8408
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:167  
     2516     8409    2   OALLOC_ERR_FAILED: ;
     2517     8410    2           ALTRETURN;
     2518     8411
     2519     8412    2   END SAVE_LEFTOVER;
     2520     8413
     2521     8414                %BOX (TITLE=SAVE_NOT_COPIED, PAGE=YES);
              8422    2
              8426    2   /***************************************************************************
              8428    2    *                                                                         *
              8432    2            *                              SAVE_NOT_COPIED                            *
              8434    2            *                                                                         *
              8436    2           ***************************************************************************/

     2522     8440
     2523     8441        /*I* NAME: SAVE_NOT_COPIED
     2524     8442            PARAMETERS:
     2525     8443                RANGE - VD$RANGE to be saved as the value of $NOT_COPIED.
     2526     8444                    This range must within the range specified by the source EditBlock.
     2527     8445            INPUT:
     2528     8446                SRC$EDIT_BLOCK - VD$BLOCK_DESC for the EditBlock which encloses the
     2529     8447                    source block.
     2530     8448                SRC_LEVEL - Level in file structure of the source block.
     2531     8449            OUTPUT:
     2532     8450            DESCRIPTION:
     2533     8451                Set the value of the predefined Location-name $NOT_COPIED to be
     2534     8452                RANGE, which must be in the source EditBlock.
     2535     8453
     2536     8454                Also, write an informational message to tell the user what we've done.
     2537     8455        */
     2538     8456
     2539     8457    1   SAVE_NOT_COPIED: PROC (RANGE) ALTRET;
     2540     8458
     2541     8459        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2542     8528
     2543     8529
     2544     8530    2   DCL BLOCK_BUFFER$ PTR;
     2545     8531    2   DCL SRC_BLOCK$ PTR;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:168  
     2546     8532    2   DCL SAVE_ACCESSOR_PRIV UBIN BYTE ALIGNED;
     2547     8533
     2548     8534
     2549     8535        %VD$BUFFER (NAME=BLOCK$BUFFER, STCLASS="BASED(BLOCK_BUFFER$)");
     2550     8593        %VD$BLOCK_DESC (NAME=SRC$BLOCK, STCLASS="BASED(SRC_BLOCK$)");
     2551     8740        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     2552     8846        %VD$BUFFER;
     2553     8904        %VD$PORT;
     2554     9002
     2555     9003
     2556     9004    2           CALL VDG$OALLOC (%CLS_BLOCK_BUFFER, BLOCK_BUFFER$)
     2557     9005    2             ALTRET (OALLOC_FAILED);
     2558     9006    2           SRC_BLOCK$ = PALIGNW(ADDR(BLOCK$BUFFER.BYTES));
     2559     9007
     2560     9008    2           SRC$BLOCK = SRC$EDIT_BLOCK;
     2561     9009                %COPYKEY (FKEY=SRC$EDIT_BLOCK.FILE_KEY, TKEY=SRC$BLOCK.FILE_KEY);
     2562     9025                %COPYKEY (FKEY=SRC$EDIT_BLOCK.OPTIONS.KEY_INCR,
     2563     9026                TKEY=SRC$BLOCK.OPTIONS.KEY_INCR);
     2564     9042    2           CALL VDG$OCOPY_RANGE (RANGE, SRC$BLOCK.RANGE)
     2565     9043    2             ALTRET (OCOPY_RANGE_FAILED);
     2566     9044
     2567     9045    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;
     2568     9046    2           VD_ACCESSOR_PRIV = %BITBIN(NAC_ALL_BITS);
     2569     9047
     2570     9048                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2571     9049                /*!!!!!                                                 !!!!!*/
     2572     9050                /*!!!!!     From here on, any exits must restore        !!!!!*/
     2573     9051                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2574     9052                /*!!!!!          to its original value.                 !!!!!*/
     2575     9053
     2576     9054    2           CALL VDA$LWRITE (LOCATIONS$STREAM, VD_LOC_$NOT_COPIED, , BLOCK$BUFFER)
     2577     9055    2             ALTRET (LWRITE_FAILED);
     2578     9056    2           BLOCK_BUFFER$ = ADDR(NIL);  /* Object now owned by Locations file */
     2579     9057    2           CALL VDA$PFLUSH (LOCATIONS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
     2580     9058    2             ALTRET (PFLUSH_FAILED);
     2581     9059
     2582     9060    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:169  
     2583     9061
     2584     9062                /*!!!!!         Its safe now, we've restored            !!!!!*/
     2585     9063                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2586     9064                /*!!!!!          to its original value.                 !!!!!*/
     2587     9065                /*!!!!!                                                 !!!!!*/
     2588     9066                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2589     9067
     2590     9068    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2591     9069    2             ALTRET (OALLOC_FAILED);
     2592     9070    2           VD$ERR.ERR.CODE# = %E$INFO_DATA_IN_$NOT_COPIED;
     2593     9071    2           VD$ERR.FLAGLEV# = %FLV_INFO;
     2594     9072    2           CALL VDG$EREPORT_ERROR;
     2595     9073
     2596     9074    2           RETURN;
     2597     9075
     2598     9076
     2599     9077
     2600     9078    2   LWRITE_FAILED: ;
     2601     9079    3           IF BLOCK_BUFFER$ ~= ADDR(NIL) THEN DO;
     2602     9080    3              CALL VDG$OFREE (BLOCK$BUFFER)
     2603     9081    4              WHENALTRETURN DO; ALTRETURN; END;
     2604     9082    3              END;
     2605     9083
     2606     9084    2   PFLUSH_FAILED: ;
     2607     9085    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
     2608     9086
     2609     9087    2   OCOPY_RANGE_FAILED: ;
     2610     9088    2   OALLOC_FAILED: ;
     2611     9089    2   OALLOC_ERR_FAILED: ;
     2612     9090    2           ALTRETURN;
     2613     9091
     2614     9092    2   END SAVE_NOT_COPIED;
     2615     9093
     2616     9094    1   END VDI$BINSERT;
     2617     9095        %EOD;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:170  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BINSERT.

   Procedure VDI$BINSERT requires 2431 words for executable code.
   Procedure VDI$BINSERT requires 130 words of local(AUTO) storage.

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:171  

 Object Unit name= VDI$BINSERT                                File name= VDI$BLOCK.:VDA5TOU
 UTS= JUL 04 '97 11:28:38.16 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     26     32  VDI$BINSERT
    1   Proc  even  none  2431   4577  VDI$BINSERT
    2  RoData even  none    28     34  VDI$BINSERT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  VDI$BINSERT
     1      4          yes     yes      Std        4  VDI$BSPLIT
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:172  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       3 VDE$RGET
 yes     yes           Std       4 VDI$BAUTO_REKEY
 yes     yes           Std       3 VDG$COMPARE_LOCS
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       6 VDE$RPUT
 yes     yes           Std       2 VDG$XLATE_LOCATIONS
 yes     yes           Std       2 VDE$RADJUST_LENGTH
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       1 VDG$EREPORT_ERROR
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       4 VDA$FOPEN
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       2 VDA$PFLUSH
 yes     yes           Std       2 VDG$OCOPY_RANGE
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:173  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_CURRENT_WINDOW$                    VD_ACCESSOR_PRIV
     VD_KEY_NUMERIC_BOF                    VD_CMD_OBJECTS$                       VD_EOF_DELETED
     VD_KEY_SCRATCH_LEFTOVER               VD_LOC_$LEFTOVER                      VD_LOC_$NOT_COPIED
     VD_$REKEY                             VD_$BY                                VD_$RECORDS_INSERTED
     VD_KEY_MN_EDITKEY                     VD_KEY_MX_EDITKEY                     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:174  


      780        1        /*T***********************************************************/
      781        2        /*T*                                                         */
      782        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      783        4        /*T*                                                         */
      784        5        /*T***********************************************************/
      785        6
      786        7        /*D* NAME:  VDI$BINSERT
      787        8            PARAMETERS:
      788        9                SRC_RANGE - VD$RANGE range descriptor for the source block.
      789       10                SRC_STREAM - VD$STREAM to use for accessing the source block.
      790       11                DEST_RANGE - VD$RANGE range descriptor for the destination block.
      791       12                DEST_STREAM - VD$STREAM to use for accessing the destination block.
      792       13            INPUT:
      793       14                VD_CURRENT_WINDOW$ must point to the level-1 VD$FILE_NODE in the
      794       15                    Windows file for the current editing window.  DEST_RANGE must
      795       16                    specify a block which is located in this window's EditBlock.
      796       17                Destination EditBlock's .OPTIONS.KEY_INCR should contain the default
      797       18                    record key increment to use when inserting new records into this
      798       19                    EditBlock, or 0 to use the $BY default.
      799       20            OUTPUT:
      800       21                SRC_RANGE will be modified to describe any part of the source block
      801       22                    not actually copied.  Usually this is just a point at the end of
      802       23                    the source block.
      803       24                DEST_RANGE will be modified to describe the block just inserted
      804       25                    at the destination.
      805       26                VD_$RECORDS_INSERTED.V# will be set to the number of records
      806       27                    inserted.  If nothing at all is inserted, it will be set to -1.
      807       28            ENTRY: VDI$BSPLIT
      808       29                Inserts a single record boundary at DEST_RANGE.START. SRC_RANGE
      809       30                can be %CLEAR, SRC_STREAM can be absent.  Used by the presenter,
      810       31                when it runs out of key space.
      811       32            DESCRIPTION:
      812       33                Classify the source and destination blocks into the following types:
      813       34                    Source types:
      814       35                      "1recNoEOR" - all in 1 record, excluding that record's EOR
      815       36                      "1recEOR" - all in 1 record, including EOR
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:175  
      816       37                      ">1recNoEOR" - on > 1 record, excluding last record's EOR
      817       38                      ">1recEOR" - on > 1 record, including last record's EOR
      818       39                    Destination types (dest is really a point, not a block):
      819       40                      "BOR" - at BOR of existing record
      820       41                      "nonBOR" - at non-BOR of existing record (may be in middle, at
      821       42                            EOR, or beyond EOR)
      822       43                      "BORnonExist" - at BOR of non-existing record
      823       44                      "nonBORnonExist" - at non-BOR of non-existing record
      824       45
      825       46                Given the above classification, the following cases are acted upon as
      826       47                described below.  Terminology:
      827       48                    src - Only record (with or without EOR) of a 1-record source block.
      828       49                    srcFirst - First record of a multi-record source block.
      829       50                    srcLast - Last record (with or without EOR) of a multi-record
      830       51                        source block.
      831       52                    destLeft - Portion of the record to the left of the destination
      832       53                        point.  This is empty if the destination is BOR; this is
      833       54                        a series of blanks if the destination is non-BOR of a
      834       55                        non-existing record.
      835       56                    destRight - Portion of the record to the right of the destination
      836       57                        point.  This is empty if the destination is at or beyond EOR --
      837       58                        but still contains the EOR boundary indication.
      838       59                        If the destination record doesn't exist, destRight is unused.
      839       60                        If destRight is used, it ALWAYS has an EOR associated with it.
      840       61                    destNext - The next record in the destination file after the
      841       62                        destination record.  This is used only when the destination
      842       63                        record doesn't exist AND src/srcLast has no EOR.
      843       64                    NOTE - destRight and destNext are mutually exclusive; in any given
      844       65                        case, only one is used, never both.
      845       66                    5.0 - The destination record key (record may or may not exist).
      846       67                    4.1, 4.2 - New keys generated to be before the destination record
      847       68                        and after the existing record before the destination record.
      848       69                    5.1, 5.2 - New keys generated to be after the given destination key
      849       70                        and before the existing record after the given destination key.
      850       71
      851       72                Src          Dest               How file looks after insertion  See Note
      852       73                ----------   --------------     ------------------------------  --------
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:176  
      853       74                1recNoEOR    BOR                5.0  src  destRight
      854       75
      855       76                             nonBOR             5.0  destLeft  src  destRight
      856       77
      857       78                             BORnonExist        5.0  src  destNext              "moved"
      858       79
      859       80                             nonBORnonExist     5.0  destLeft  src  destNext    "moved"
      860       81                ----------   --------------     ------------------------------  --------
      861       82                1recEOR      BOR                4.1  src                        "genkey"
      862       83                                                5.0  destRight                  "moved"
      863       84
      864       85                             nonBOR             5.0  destLeft  src
      865       86                                                5.1  destRight
      866       87
      867       88                             BORnonExist        5.0  src
      868       89
      869       90                             nonBORnonExist     5.0  destLeft  src
      870       91                ----------   --------------     ------------------------------  --------
      871       92                >1recNoEOR   BOR                4.1  srcFirst                   "genkey"
      872       93                                                4.2  srcLast  destRight
      873       94
      874       95                             nonBOR             5.0  destLeft  srcFirst
      875       96                                                5.1  srcLast  destRight
      876       97
      877       98                             BORnonExist        5.0  srcFirst
      878       99                                                5.1  srcLast  destNext          "moved"
      879      100
      880      101                             nonBORnonExist     5.0  destLeft  srcFirst
      881      102                                                5.1  srcLast  destNext          "moved"
      882      103                ----------   --------------     ------------------------------  --------
      883      104                >1recEOR     BOR                4.1  srcFirst                   "genkey"
      884      105                                                4.2  srcLast
      885      106                                                5.0  destRight
      886      107
      887      108                             nonBOR             5.0  destLeft  srcFirst
      888      109                                                5.1  srcLast
      889      110                                                5.2  destRight
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:177  
      890      111
      891      112                             BORnonExist        5.0  srcFirst
      892      113                                                5.1  srcLast
      893      114
      894      115                             nonBORnonExist     5.0  destLeft  srcFirst
      895      116                                                5.1  srcLast
      896      117
      897      118                    Notes:
      898      119                    ------
      899      120                    "moved" - In these cases the destNext record is moved (rekeyed).
      900      121                        The criteria for this action is:
      901      122                            dest is nonExist (either BOR or nonBOR)
      902      123                            AND srcLast has no EOR
      903      124                    "genkey" - In these cases the first key written is generated to be
      904      125                        before the given destination key.  The criteria for this
      905      126                        action is:
      906      127                            destination is BORExist
      907      128                            AND 1st/only source record does have EOR
      908      129                        There are two subcases here:  srcLast could have EOR or not:
      909      130                        If srcLast does have EOR, note that destRight is untouched:
      910      131                            not moved, nothing joined to it -- just leave it alone.
      911      132                        If srcLast doesn't have EOR, then destRight acts like
      912      133                            destNext in the "moved" cases noted above:  it is rekeyed.
      913      134
      914      135
      915      136                The above table gives the algorithm by example; the following gives
      916      137                it procedurally:
      917      138
      918      139
      919      140                Read the first source record.
      920      141                Call PREPARE_DESTINATION, which reads the destination record (if it
      921      142                    exists) and sets up for the main loop.  PREPARE_DESTINATION must
      922      143                    not do anything which isn't redoable, since it may be called
      923      144                    again after rekeying the destination.  It sets:
      924      145                    RECORD.KEY := given destination key;
      925      146                    other RECORD fields get destLeft, if any;
      926      147                    DEST_NEXT_KEY is the key of the next record, used when
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:178  
      927      148                        calling VDE$RPUT when we want to generate a key;
      928      149                    DEST_RIGHT is data component of either destRight or destNext
      929      150                        (see the "genkey" note above, which tells why only one of these
      930      151                        will be used in any given case);
      931      152                    DEST_EXISTS and GENERATE_KEY are set appropriately.
      932      153                Call ADJUST_INCREMENT to find a suitable key increment.  This may
      933      154                    indicate the need for a rekey of all or part of the destination
      934      155                    file.
      935      156                If ADJUST_INCREMENT can't find an increment to use:
      936      157                    If $REKEY <= 0 (don't auto-rekey), use .001 as the key increment,
      937      158                        and proceed with the insertion.  At some point in the
      938      159                        insertion, we'll get a cutoff error.
      939      160                    If $REKEY > 0, call VDI$BAUTO_REKEY to rekey some or all
      940      161                        of the destination file to make room for the source block.
      941      162                        In some cases, the insertion will be done at the same time,
      942      163                        allowing us to return at this time.
      943      164                        Otherwise, we now have a key increment to use for the
      944      165                        insertion.
      945      166                        Call PREPARE_DESTINATION again, to set up the parameters based
      946      167                        on the newly-keyed destination.
      947      168
      948      169                Append the first source record to whatever may already be in RECORD
      949      170                    (destLeft).
      950      171                Main loop:  while RECORD isn't %CLEAR:
      951      172                    If RECORD has no EOR (and so must be last record from the source
      952      173                        block), append DEST_RIGHT (if any) to its data component,
      953      174                        and clear DEST_RIGHT.
      954      175                    Call VDE$RPUT to write RECORD to the destination.  Note that
      955      176                        RECORD is a kinda schizoid VD$NODE_DESC:  it's .SPEC, .DATA,
      956      177                        and .EOR come from source block records; but it's .KEY is
      957      178                        a key in the destination block (which could be in an entirely
      958      179                        different file!)
      959      180                        GENERATE_KEY tells RPUT whether and how to generate a key.
      960      181                    Call VDA$LREAD/VDE$RGET to read the next source record into
      961      182                        RECORD.  If the previous RECORD had no EOR, then
      962      183                        VDE$RGET should return an empty RECORD this time.  If so,
      963      184                        then RECORD := DEST_RIGHT (which may be empty too) and clear
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:179  
      964      185                        DEST_RIGHT.
      965      186                    Set RECORD.KEY to the key just written to the destination block,
      966      187                        and set GENERATE_KEY to generate a new key following RECORD.KEY,
      967      188                        for the next iteration.
      968      189                    End of main loop.
      969      190                Clean up:
      970      191                    Delete the destNext/destRight record, if we had to move it (see
      971      192                        "moved" and "genkey" notes above).
      972      193                    Adjust SRC_RANGE to describe any part of the source block not
      973      194                        copied.  If all copied ok, adjust SRC_RANGE to be an empty
      974      195                        block at its end location.
      975      196                    Adjust DEST_RANGE to describe the data just inserted at the
      976      197                        destination.
      977      198        */
      978      199
      979      200        VDI$BINSERT: PROC (SRC_RANGE, SRC_STREAM, DEST_RANGE, DEST_STREAM)

    200  1 000000   000000 700200 xent  VDI$BINSERT  TSX0  ! X66_AUTO_4
         1 000001   000202 000004                    ZERO    130,4

      980      201                  ALTRET;
      981      202
      982      203
      983      204        %INCLUDE VD_MACROS_M;
      984     2419        %INCLUDE VD_PERR_C;
      985     2567        /*
      986     2568        *   Flags for VDA$LREAD:
      987     2569        */
      988     2570        %EQU DONT_READ_RECORD = FALSE;  /* Just position, don't read */
      989     2571        %EQU READ_RECORD = TRUE;        /* Position and read */
      990     2572
      991     2573
      992     2574        %VD$RANGE (NAME=SRC_RANGE,STCLASS=PARAM);
      993     2643        %VD$STREAM (NAME=SRC_STREAM, STCLASS=PARAM);
      994     2749        %VD$RANGE (NAME=DEST_RANGE,STCLASS=PARAM);
      995     2818        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
      996     2924
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:180  
      997     2925
      998     2926    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
      999     2927    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1000     2928    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
     1001     2929    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
     1002     2930    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1003     2931    1   DCL VDI$BAUTO_REKEY     ENTRY (4) ALTRET;
     1004     2932    1   DCL VDE$RGET            ENTRY (3) ALTRET;
     1005     2933    1   DCL VDE$RPUT            ENTRY (6) ALTRET;
     1006     2934    1   DCL VDE$RADJUST_LENGTH  ENTRY (2) ALTRET;
     1007     2935    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1008     2936    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1009     2937    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1010     2938    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1011     2939    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1012     2940    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1013     2941    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
     1014     2942    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     1015     2943    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
     1016     2944    1   DCL VDG$ESCREECH        ENTRY (3);
     1017     2945
     1018     2946
     1019     2947        %VD_6E (STCLASS=SYMREF);
     1020     2983    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
     1021     2984    1   DCL VD_ACCESSOR_PRIV UBIN BYTE ALIGNED SYMREF;
     1022     2985        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1023     2999    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     1024     3000    1   DCL VD_EOF_DELETED BIT(36) SYMREF;
     1025     3001        %VD$FILE_KEY (NAME=VD_FKEY_SCRATCH_LEFTOVER, STCLASS=SYMREF);
     1026     3050        %VD$KEY (NAME=VD_KEY_SCRATCH_LEFTOVER, STCLASS=SYMREF);
     1027     3064        %VD$LOCATION (NAME=VD_LOC_$LEFTOVER, STCLASS=SYMREF);
     1028     3092        %VD$LOCATION (NAME=VD_LOC_$NOT_COPIED, STCLASS=SYMREF);
     1029     3120        %VD$NUMBER (NAME=VD_$REKEY, STCLASS=SYMREF);
     1030     3165        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
     1031     3210        %VD$NUMBER (NAME=VD_$RECORDS_INSERTED, STCLASS=SYMREF);
     1032     3255
     1033     3256
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:181  
     1034     3257        %VD$KEY_NUMBER (NAME=VD_KEY_MN_EDITKEY, STCLASS=SYMREF);
     1035     3272        %VD$KEY_NUMBER (NAME=VD_KEY_MX_EDITKEY, STCLASS=SYMREF);
     1036     3287
     1037     3288
     1038     3289    1   DCL FIRST_TIME_THRU_MAIN_LOOP BIT(1) ALIGNED;
     1039     3290    1   DCL OUTSIDE_SRC_RANGE BIT(1) ALIGNED;
     1040     3291    1   DCL END_POS_OF_INSERTED_DATA SBIN;
     1041     3292    1   DCL DEST_EDIT_BLOCK$ PTR;
     1042     3293        %VD$ACCESS_OPTIONS (NAME=DEST_OPTIONS, STCLASS=AUTO);   /* Owns objects!! */
     1043     3322    1   DCL DEST_LEVEL SBIN;
     1044     3323    1   DCL SRC_LEVEL SBIN;
     1045     3324    1   DCL SRC_FILE_KEY$ PTR;
     1046     3325    1   DCL DEST_FILE_KEY$ PTR;
     1047     3326    1   DCL RCCL SBIN;
     1048     3327        %VD$NODE_DESC (NAME=RECORD, STCLASS=AUTO);
     1049     3369    1   DCL DEST_LEFT_LENGTH SBIN;
     1050     3370        %VD$KEY (NAME=DEST_NEXT_KEY, STCLASS=AUTO);
     1051     3384    1   DCL DEST_RIGHT$ PTR;
     1052     3385    1   DCL DEST_EXISTS BIT(1) ALIGNED;
     1053     3386    1   DCL DEST_EOR BIT(1);
     1054     3387    1   DCL DEST_KEY_SPACE SBIN;
     1055     3388    1   DCL GENERATE_KEY SBIN;      /* Holds an %SQ_ value */
     1056     3389    1   DCL MY_EOF_DELETED BIT(36);
     1057     3390    1   DCL PREVIOUS_SRC_EOR BIT(1) ALIGNED;
     1058     3391    1   DCL SRC_EOR BIT(1) ALIGNED;
     1059     3392        %VD$NODE_DESC (NAME=FIRST_SRC_RECORD, STCLASS=AUTO);
     1060     3434        %VD$KEY (NAME=SRC_KEY_OF_RECORD, STCLASS=AUTO); /* RECORD's key from src file */
     1061     3448        %VD$KEY (NAME=LAST_COPIED_KEY, STCLASS=AUTO);
     1062     3462        %VD$KEY (NAME=LAST_WRITTEN_KEY, STCLASS=AUTO);
     1063     3476        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);   /* Doesn't own objects!!! */
     1064     3545    1   DCL DEST_END_KEY$ PTR;
     1065     3546    1   DCL VD_ERR$ PTR;
     1066     3547    1   DCL ERR_SUBST$ PTR;
     1067     3548
     1068     3549
     1069     3550        %VD$BLOCK_DESC (NAME=SRC$EDIT_BLOCK,
     1070     3551            STCLASS="BASED(VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)");
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:182  
     1071     3698        %VD$BLOCK_DESC (NAME=DEST$EDIT_BLOCK, STCLASS="BASED(DEST_EDIT_BLOCK$)");
     1072     3845        %VD$BUFFER (NAME=RECORD$DATA, STCLASS="BASED(RECORD.DATA$)");
     1073     3903        %VD$BUFFER (NAME=DEST$RIGHT, STCLASS="BASED(DEST_RIGHT$)");
     1074     3961        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1075     4014        %VD$ERR (NAME=LAST$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     1076     4067        %VD$POINTER (NAME=ERR$SUBST, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     1077     4112        %VD$KEY_NUMBER;
     1078     4127        %VD$TEXTC;
     1079     4150        %VD$TEXTC_NUMBER;
     1080     4164        %VD$TEXTC_REMOTE;
     1081     4225        %VD$BUFFER;
     1082     4283        %VD$BUFFER_HEADER;
     1083     4319        %VD$FILE_NODE;
     1084     4412        %VD$WINDOW_SPEC;
     1085     4478        %VD$IT_BLOCK_EXPR;
     1086     4628
     1087     4629
     1088     4630        %BOX (TITLE="Procedure");

              4642    1   /***************************************************************************
              4644    1    *                                                                         *
              4648    1            *                                 Procedure                              *
              4650    1            *                                                                        *
              4652    1          ***************************************************************************/

     1089     4656
     1090     4657    1           OUTSIDE_SRC_RANGE = %FALSE;

   4657  1 000002   200010 450100                    STZ     OUTSIDE_SRC_RANGE,,AUTO

     1091     4658    1           GOTO THE_TOP;

   4658  1 000003   000010 710000 1                  TRA     THE_TOP

     1092     4659
     1093     4660    1   VDI$BSPLIT: ENTRY (SRC_RANGE, SRC_STREAM, DEST_RANGE, DEST_STREAM) ALTRET;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:183  
   4660  1 000004   000000 700200 xent  VDI$BSPLIT   TSX0  ! X66_AUTO_4
         1 000005   000202 000004                    ZERO    130,4

     1094     4661
     1095     4662    1           OUTSIDE_SRC_RANGE = %TRUE;

   4662  1 000006   400000 236003                    LDQ     -131072,DU
         1 000007   200010 756100                    STQ     OUTSIDE_SRC_RANGE,,AUTO

   4662  1 000010                       THE_TOP      null
     1096     4663    1   THE_TOP: ;
     1097     4664    1           FIRST_TIME_THRU_MAIN_LOOP = %TRUE;

   4664  1 000010   400000 236003                    LDQ     -131072,DU
         1 000011   200007 756100                    STQ     FIRST_TIME_THRU_MAIN_LOOP,,AUTO

     1098     4665    1           VD_$RECORDS_INSERTED.V# = -1;

   4665  1 000012   000001 335007                    LCA     1,DL
         1 000013   000003 755000 xsym               STA     VD_$RECORDS_INSERTED+3

     1099     4666    1           END_POS_OF_INSERTED_DATA = 0;   /* Assumption */

   4666  1 000014   200011 450100                    STZ     END_POS_OF_INSERTED_DATA,,AUTO

     1100     4667    1           DEST_OPTIONS = %CLEAR;

   4667  1 000015   000100 100400                    MLR     fill='000'O
         1 000016   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000017   200013 000024                    ADSC9   DEST_OPTIONS,,AUTO       cn=0,n=20

     1101     4668    1           RECORD = %CLEAR;

   4668  1 000020   000100 100400                    MLR     fill='000'O
         1 000021   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000022   200025 000030                    ADSC9   RECORD,,AUTO             cn=0,n=24

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:184  
     1102     4669    1           RECORD.DATA$ = ADDR(NIL);

   4669  1 000023   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000024   200031 756100                    STQ     RECORD+4,,AUTO

     1103     4670    1           DEST_NEXT_KEY = %CLEAR;

   4670  1 000025   000000 235003                    LDA     0,DU
         1 000026   000000 236003                    LDQ     0,DU
         1 000027   200034 757100                    STAQ    DEST_NEXT_KEY,,AUTO

     1104     4671    1           FIRST_SRC_RECORD = RECORD;

   4671  1 000030   000100 100500                    MLR     fill='000'O
         1 000031   200025 000030                    ADSC9   RECORD,,AUTO             cn=0,n=24
         1 000032   200046 000030                    ADSC9   FIRST_SRC_RECORD,,AUTO   cn=0,n=24

     1105     4672    1           FIRST_SRC_RECORD.EOR = OUTSIDE_SRC_RANGE;

   4672  1 000033   200010 236100                    LDQ     OUTSIDE_SRC_RANGE,,AUTO
         1 000034   200053 676100                    ERQ     FIRST_SRC_RECORD+5,,AUTO
         1 000035   400000 376003                    ANQ     -131072,DU
         1 000036   200053 656100                    ERSQ    FIRST_SRC_RECORD+5,,AUTO

     1106     4673    1           SRC_KEY_OF_RECORD = %CLEAR;

   4673  1 000037   000000 235003                    LDA     0,DU
         1 000040   000000 236003                    LDQ     0,DU
         1 000041   200054 757100                    STAQ    SRC_KEY_OF_RECORD,,AUTO

     1107     4674    1           LAST_COPIED_KEY = %CLEAR;

   4674  1 000042   000000 235003                    LDA     0,DU
         1 000043   000000 236003                    LDQ     0,DU
         1 000044   200056 757100                    STAQ    LAST_COPIED_KEY,,AUTO

     1108     4675    1           LAST_WRITTEN_KEY = %CLEAR;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:185  

   4675  1 000045   000000 235003                    LDA     0,DU
         1 000046   000000 236003                    LDQ     0,DU
         1 000047   200060 757100                    STAQ    LAST_WRITTEN_KEY,,AUTO

     1109     4676    1           MY_EOF_DELETED = VD_EOF_DELETED;

   4676  1 000050   000000 236000 xsym               LDQ     VD_EOF_DELETED
         1 000051   200043 756100                    STQ     MY_EOF_DELETED,,AUTO

     1110     4677    1           VD_EOF_DELETED = %FALSE;

   4677  1 000052   000000 450000 xsym               STZ     VD_EOF_DELETED

     1111     4678
     1112     4679                /* Obtain fixed parameters from remote objects for easier access */
     1113     4680    2           IF ADDR(DEST_STREAM) ~= VD_6E.SOURCE.OPERAND.STREAM$ THEN DO;

   4680  1 000053   200006 236100                    LDQ     @DEST_STREAM,,AUTO
         1 000054   000020 116000 xsym               CMPQ    VD_6E+16
         1 000055   000076 600000 1                  TZE     s:4691

     1114     4681    2              DEST_EDIT_BLOCK$ = VD_CURRENT_WINDOW$ -> VD$FILE_NODE.DESC.SPEC.V$ ->

   4681  1 000056   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000057   000007 471500                    LDP1    7,,PR0
         1 000060   100012 236100                    LDQ     10,,PR1
         1 000061   200012 756100                    STQ     DEST_EDIT_BLOCK$,,AUTO

     1115     4682    2                VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$;
     1116     4683    2              IF NOT OUTSIDE_SRC_RANGE THEN

   4683  1 000062   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 000063   000071 604000 1                  TMI     s:4688

     1117     4684    2                 DEST_OPTIONS = VD_CURRENT_WINDOW$ ->

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:186  
   4684  1 000064   100011 473500                    LDP3    9,,PR1
         1 000065   000100 100500                    MLR     fill='000'O
         1 000066   300030 000024                    ADSC9   24,,PR3                  cn=0,n=20
         1 000067   200013 000024                    ADSC9   DEST_OPTIONS,,AUTO       cn=0,n=20
         1 000070   000106 710000 1                  TRA     s:4709

     1118     4685    2                   VD$FILE_NODE.DESC.SPEC.V$ -> VD$WINDOW_SPEC.OPERAND.INTREE$ ->
     1119     4686    2                   VD$IT_BLOCK_EXPR.OPTIONS;
     1120     4687    2              ELSE
     1121     4688    2                 DEST_OPTIONS = DEST$EDIT_BLOCK.OPTIONS;

   4688  1 000071   200012 473500                    LDP3    DEST_EDIT_BLOCK$,,AUTO
         1 000072   000100 100500                    MLR     fill='000'O
         1 000073   300025 000024                    ADSC9   21,,PR3                  cn=0,n=20
         1 000074   200013 000024                    ADSC9   DEST_OPTIONS,,AUTO       cn=0,n=20

     1122     4689    2              END;

   4689  1 000075   000106 710000 1                  TRA     s:4709

     1123     4690    2           ELSE DO;

     1124     4691    2              DEST_EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;

   4691  1 000076   000022 236000 xsym               LDQ     VD_6E+18
         1 000077   200012 756100                    STQ     DEST_EDIT_BLOCK$,,AUTO

     1125     4692    2              DEST$EDIT_BLOCK.RANGE.ENDD.EOF = %TRUE;

   4692  1 000100   200012 470500                    LDP0    DEST_EDIT_BLOCK$,,AUTO
         1 000101   400000 236007                    LDQ     -131072,DL
         1 000102   000024 256100                    ORSQ    20,,PR0

     1126     4693    2              DEST_OPTIONS = DEST$EDIT_BLOCK.OPTIONS;

   4693  1 000103   000100 100500                    MLR     fill='000'O
         1 000104   000025 000024                    ADSC9   21,,PR0                  cn=0,n=20
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:187  
         1 000105   200013 000024                    ADSC9   DEST_OPTIONS,,AUTO       cn=0,n=20

     1127     4694    2              END;

     1128     4695
     1129     4696                %COPYKEY (FKEY=DEST_OPTIONS.KEY_INCR, TKEY=DEST_OPTIONS.KEY_INCR);

   4709  1 000106   200016 237100                    LDAQ    DEST_OPTIONS+3,,AUTO
         1 000107   200016 757100                    STAQ    DEST_OPTIONS+3,,AUTO

   4709  1 000110   200016 720100                    LXL0    DEST_OPTIONS+3,,AUTO
         1 000111   000002 100003                    CMPX0   2,DU
         1 000112   000125 601000 1                  TNZ     s:4712

   4709  1 000113   200017 630500                    EPPR0   DEST_OPTIONS+4,,AUTO
         1 000114   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 000115   200017 236100                    LDQ     DEST_OPTIONS+4,,AUTO
         1 000116   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000117   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000120   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000121   000000 701000 xent               TSX1    VDG$OCOPY
         1 000122   000124 702000 1                  TSX2    s:4710
         1 000123   000125 710000 1                  TRA     s:4712

   4710  1 000124   000000 702200 xent               TSX2  ! X66_AALT

     1130     4712    1           DEST_LEVEL = DEST_OPTIONS.LEVEL#;

   4712  1 000125   200014 235100                    LDA     DEST_OPTIONS+1,,AUTO
         1 000126   000022 731000                    ARS     18
         1 000127   200020 755100                    STA     DEST_LEVEL,,AUTO

     1131     4713    1           SRC_LEVEL = %LVL_EXT_REC;   /*N* s.b. from source "EditBlock"? *N*/

   4713  1 000130   000001 236007                    LDQ     1,DL
         1 000131   200021 756100                    STQ     SRC_LEVEL,,AUTO

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:188  
     1132     4714
     1133     4715                /*
     1134     4716                *   Set DEST_RANGE.START to point to where we'll start inserting.
     1135     4717                *   For now, assume we'll start at DEST_RANGE.ENDD.
     1136     4718                */
     1137     4719    1           CALL VDG$OCLEAR_LOCATION (DEST_RANGE.START)

   4719  1 000132   200005 630500                    EPPR0   @DEST_RANGE,,AUTO
         1 000133   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000134   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 000135   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1138     4720    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1139     4721    1           CALL VDG$OCOPY_LOCATION (DEST_RANGE.ENDD, DEST_RANGE.START)

   4721  1 000136   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 000137   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 000140   000011 036003                    ADLQ    9,DU
         1 000141   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000142   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000143   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000144   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 000145   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1140     4722    1             ALTRET (OCOPY_LOCATION_FAILED);
     1141     4723
     1142     4724    2           IF NOT OUTSIDE_SRC_RANGE THEN DO;

   4724  1 000146   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 000147   000217 604000 1                  TMI     s:4755

     1143     4725                /* Get the first source record */
     1144     4726    2              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, 0, %TRUE)

   4726  1 000150   000000 237000 2                  LDAQ    0
         1 000151   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 000152   200003 236100                    LDQ     @SRC_RANGE,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:189  
         1 000153   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 000154   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 000155   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000156   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000157   000000 701000 xent               TSX1    VDA$LREAD
         1 000160   001254 702000 1                  TSX2    LREAD_FAILED

     1145     4727    2                ALTRET (LREAD_FAILED);
     1146     4728    2              CALL VDE$RGET (SRC_STREAM, SRC_RANGE, FIRST_SRC_RECORD)

   4728  1 000161   200046 630500                    EPPR0   FIRST_SRC_RECORD,,AUTO
         1 000162   200176 450500                    STP0    OPEN_OPTIONS+7,,AUTO
         1 000163   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 000164   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 000165   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 000166   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000167   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000170   000000 701000 xent               TSX1    VDE$RGET
         1 000171   001254 702000 1                  TSX2    LREAD_FAILED

     1147     4729    2                ALTRET (RGET_FAILED);
     1148     4730                   %COPYKEY (FKEY=FIRST_SRC_RECORD.KEY, TKEY=SRC_KEY_OF_RECORD);

   4743  1 000172   200046 237100                    LDAQ    FIRST_SRC_RECORD,,AUTO
         1 000173   200054 757100                    STAQ    SRC_KEY_OF_RECORD,,AUTO

   4743  1 000174   200046 720100                    LXL0    FIRST_SRC_RECORD,,AUTO
         1 000175   000002 100003                    CMPX0   2,DU
         1 000176   000211 601000 1                  TNZ     s:4747

   4743  1 000177   200055 630500                    EPPR0   SRC_KEY_OF_RECORD+1,,AUTO
         1 000200   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 000201   200047 236100                    LDQ     FIRST_SRC_RECORD+1,,AUTO
         1 000202   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000203   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000204   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000205   000000 701000 xent               TSX1    VDG$OCOPY
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:190  
         1 000206   000210 702000 1                  TSX2    s:4744
         1 000207   000211 710000 1                  TRA     s:4747

   4744  1 000210   000000 702200 xent               TSX2  ! X66_AALT

     1149     4746
     1150     4747    3              IF FIRST_SRC_RECORD.KEY = %CLEAR THEN DO; /* Src range is empty */

   4747  1 000211   200046 237100                    LDAQ    FIRST_SRC_RECORD,,AUTO
         1 000212   000002 117000 2                  CMPAQ   2
         1 000213   000217 601000 1                  TNZ     s:4755

     1151     4748    3                 CALL CLEANUP

   4748  1 000214   001537 701000 1                  TSX1    CLEANUP
         1 000215   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1152     4749    3                   ALTRET (CLEANUP_FAILED);
     1153     4750    3                 RETURN;

   4750  1 000216   000000 702200 xent               TSX2  ! X66_ARET

     1154     4751    3                 END;
     1155     4752    2              END;
     1156     4753
     1157     4754                /* Read the destination record and set up for main loop */
     1158     4755    1           CALL PREPARE_DESTINATION

   4755  1 000217   002352 701000 1                  TSX1    PREPARE_DESTINATION
         1 000220   001254 702000 1                  TSX2    LREAD_FAILED

     1159     4756    1             ALTRET (PREPARE_DESTINATION_FAILED);
     1160     4757
     1161     4758                /* Find key increment */
     1162     4759    1           CALL ADJUST_INCREMENT (DEST_OPTIONS.KEY_INCR)

   4759  1 000221   200016 630500                    EPPR0   DEST_OPTIONS+3,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:191  
         1 000222   200111 450500                    STP0    ERR_SUBST$+3,,AUTO
         1 000223   001705 701000 1                  TSX1    ADJUST_INCREMENT
         1 000224   001254 702000 1                  TSX2    LREAD_FAILED

     1163     4760    1             ALTRET (ADJUST_INCREMENT_FAILED);
     1164     4761    1           IF DEST_OPTIONS.KEY_INCR.TYPE# = 0 THEN

   4761  1 000225   200016 220100                    LDX0    DEST_OPTIONS+3,,AUTO
         1 000226   000262 601000 1                  TNZ     s:4786

     1165     4762    2   CANT_FIND_INCREMENT: DO;

   4762  1 000227                       CANT_FIND_I* null
     1166     4763                   /* ADJUST_INCREMENT couldn't find an increment to use */
     1167     4764                   /* Reset DEST_OPTIONS.KEY_INCR to value given by user */
     1168     4765    2              DEST_OPTIONS.KEY_INCR.TYPE# = %KT_EDITKEY;

   4765  1 000227   000003 221003                    LDX1    3,DU
         1 000230   200016 741100                    STX1    DEST_OPTIONS+3,,AUTO

     1169     4766    3              IF VD_$REKEY.V# <= 0 THEN DO;

   4766  1 000231   000003 235000 xsym               LDA     VD_$REKEY+3
         1 000232   000236 605400 1                  TPNZ    s:4773

     1170     4767                      /* User doesn't want us to auto-rekey; go ahead using .001 */
     1171     4768    3                 ADDR(DEST_OPTIONS.KEY_INCR) -> VD$KEY_NUMBER.BYTES# =

   4768  1 000233   000001 236007                    LDQ     1,DL
         1 000234   200017 552134                    STBQ    DEST_OPTIONS+4,'34'O,AUTO

     1172     4769    3                   %MN_EDITKEY_FRACT;
     1173     4770    3                 END;

   4770  1 000235   000262 710000 1                  TRA     s:4786

     1174     4771    3              ELSE DO;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:192  

     1175     4772                      /* Rekey the destination so the src will fit */
     1176     4773    3                 CALL VDI$BAUTO_REKEY (DEST_STREAM, RECORD.KEY,

   4773  1 000236   200041 630500                    EPPR0   DEST_KEY_SPACE,,AUTO
         1 000237   200177 450500                    STP0    OPEN_OPTIONS+8,,AUTO
         1 000240   200013 631500                    EPPR1   DEST_OPTIONS,,AUTO
         1 000241   200176 451500                    STP1    OPEN_OPTIONS+7,,AUTO
         1 000242   200025 633500                    EPPR3   RECORD,,AUTO
         1 000243   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 000244   200006 236100                    LDQ     @DEST_STREAM,,AUTO
         1 000245   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000246   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000247   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000250   000000 701000 xent               TSX1    VDI$BAUTO_REKEY
         1 000251   001254 702000 1                  TSX2    LREAD_FAILED

     1177     4774    3                   DEST_OPTIONS, DEST_KEY_SPACE)
     1178     4775    3                   ALTRET (BAUTO_REKEY_FAILED);
     1179     4776    3                 CALL CLEANUP; /* Free RECORD buffer, etc. */

   4776  1 000252   001537 701000 1                  TSX1    CLEANUP
         1 000253   000000 011000                    NOP     0

     1180     4777    3                 CALL PREPARE_DESTINATION

   4777  1 000254   002352 701000 1                  TSX1    PREPARE_DESTINATION
         1 000255   001254 702000 1                  TSX2    LREAD_FAILED

     1181     4778    3                   ALTRET (PREPARE_DESTINATION_FAILED);
     1182     4779    3                 CALL ADJUST_INCREMENT (DEST_OPTIONS.KEY_INCR)

   4779  1 000256   200016 630500                    EPPR0   DEST_OPTIONS+3,,AUTO
         1 000257   200111 450500                    STP0    ERR_SUBST$+3,,AUTO
         1 000260   001705 701000 1                  TSX1    ADJUST_INCREMENT
         1 000261   001254 702000 1                  TSX2    LREAD_FAILED

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:193  
     1183     4780    3                   ALTRET (ADJUST_INCREMENT_FAILED);
     1184     4781    3                 END;

     1185     4782    2              END CANT_FIND_INCREMENT;

     1186     4783
     1187     4784
     1188     4785                /* Append FIRST_SRC_RECORD to whatever (if anything) is in RECORD */
     1189     4786    2           IF RECORD.SPEC = %CLEAR THEN DO;

   4786  1 000262   000000 106500                    CMPC    fill='000'O
         1 000263   200027 000010                    ADSC9   RECORD+2,,AUTO           cn=0,n=8
         1 000264   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000265   000274 601000 1                  TNZ     s:4790

     1190     4787    2              RECORD.SPEC = FIRST_SRC_RECORD.SPEC;

   4787  1 000266   200050 237100                    LDAQ    FIRST_SRC_RECORD+2,,AUTO
         1 000267   200027 755100                    STA     RECORD+2,,AUTO
         1 000270   200030 756100                    STQ     RECORD+3,,AUTO

     1191     4788    2              FIRST_SRC_RECORD.SPEC = %CLEAR;

   4788  1 000271   000000 235003                    LDA     0,DU
         1 000272   000000 236003                    LDQ     0,DU
         1 000273   200050 757100                    STAQ    FIRST_SRC_RECORD+2,,AUTO

     1192     4789    2              END;

     1193     4790    2           IF RECORD.DATA$ = ADDR(NIL) THEN DO;

   4790  1 000274   200031 236100                    LDQ     RECORD+4,,AUTO
         1 000275   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000276   000304 601000 1                  TNZ     s:4795

     1194     4791    2              RECORD.DATA$ = FIRST_SRC_RECORD.DATA$;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:194  
   4791  1 000277   200052 236100                    LDQ     FIRST_SRC_RECORD+4,,AUTO
         1 000300   200031 756100                    STQ     RECORD+4,,AUTO

     1195     4792    2              FIRST_SRC_RECORD.DATA$ = ADDR(NIL);

   4792  1 000301   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000302   200052 756100                    STQ     FIRST_SRC_RECORD+4,,AUTO

     1196     4793    2              END;

   4793  1 000303   000312 710000 1                  TRA     s:4798

     1197     4794    2           ELSE DO;

     1198     4795    2              CALL APPEND (RECORD.DATA$, FIRST_SRC_RECORD.DATA$)

   4795  1 000304   200052 630500                    EPPR0   FIRST_SRC_RECORD+4,,AUTO
         1 000305   200112 450500                    STP0    @LEFT$+1,,AUTO
         1 000306   200031 631500                    EPPR1   RECORD+4,,AUTO
         1 000307   200111 451500                    STP1    ERR_SUBST$+3,,AUTO
         1 000310   003707 701000 1                  TSX1    APPEND
         1 000311   001254 702000 1                  TSX2    LREAD_FAILED

     1199     4796    2                ALTRET (APPEND_FAILED);
     1200     4797    2              END;

     1201     4798    1           RECORD.EOR = FIRST_SRC_RECORD.EOR;

   4798  1 000312   200053 236100                    LDQ     FIRST_SRC_RECORD+5,,AUTO
         1 000313   200032 676100                    ERQ     RECORD+5,,AUTO
         1 000314   400000 376003                    ANQ     -131072,DU
         1 000315   200032 656100                    ERSQ    RECORD+5,,AUTO

     1202     4799    1           SRC_EOR = FIRST_SRC_RECORD.EOR;

   4799  1 000316   200053 236100                    LDQ     FIRST_SRC_RECORD+5,,AUTO
         1 000317   400000 376003                    ANQ     -131072,DU
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:195  
         1 000320   200045 756100                    STQ     SRC_EOR,,AUTO

     1203     4800
     1204     4801                /* Clear FIRST_SRC_RECORD to free any dynamic storage */
     1205     4802                %CLEARKEY (KEY=FIRST_SRC_RECORD.KEY);

   4809  1 000321   200046 720100                    LXL0    FIRST_SRC_RECORD,,AUTO
         1 000322   000002 100003                    CMPX0   2,DU
         1 000323   000332 601000 1                  TNZ     s:4810+1

   4809  1 000324   200047 630500                    EPPR0   FIRST_SRC_RECORD+1,,AUTO
         1 000325   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000326   000000 701000 xent               TSX1    VDG$OFREE
         1 000327   000331 702000 1                  TSX2    s:4810
         1 000330   000332 710000 1                  TRA     s:4810+1

   4810  1 000331   000000 702200 xent               TSX2  ! X66_AALT

   4810  1 000332   000000 235003                    LDA     0,DU
         1 000333   000000 236003                    LDQ     0,DU
         1 000334   200046 757100                    STAQ    FIRST_SRC_RECORD,,AUTO

     1206     4812                %CLEARSPEC (SPEC=FIRST_SRC_RECORD.SPEC);

   4819  1 000335   200050 720100                    LXL0    FIRST_SRC_RECORD+2,,AUTO
         1 000336   000002 100003                    CMPX0   2,DU
         1 000337   000346 601000 1                  TNZ     s:4820+1

   4819  1 000340   200051 630500                    EPPR0   FIRST_SRC_RECORD+3,,AUTO
         1 000341   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000342   000000 701000 xent               TSX1    VDG$OFREE
         1 000343   000345 702000 1                  TSX2    s:4820
         1 000344   000346 710000 1                  TRA     s:4820+1

   4820  1 000345   000000 702200 xent               TSX2  ! X66_AALT

   4820  1 000346   000000 235003                    LDA     0,DU
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:196  
         1 000347   000000 236003                    LDQ     0,DU
         1 000350   200050 757100                    STAQ    FIRST_SRC_RECORD+2,,AUTO

     1207     4822    2           IF FIRST_SRC_RECORD.DATA$ ~= ADDR(NIL) THEN DO;

   4822  1 000351   200052 236100                    LDQ     FIRST_SRC_RECORD+4,,AUTO
         1 000352   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000353   000362 600000 1                  TZE     s:4841

     1208     4823    2              CALL VDG$OFREE (FIRST_SRC_RECORD.DATA$ -> VD$BUFFER)

   4823  1 000354   200052 630500                    EPPR0   FIRST_SRC_RECORD+4,,AUTO
         1 000355   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000356   000000 701000 xent               TSX1    VDG$OFREE
         1 000357   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1209     4824    2                ALTRET (OFREE_FAILED);
     1210     4825    2              FIRST_SRC_RECORD.DATA$ = ADDR(NIL);

   4825  1 000360   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000361   200052 756100                    STQ     FIRST_SRC_RECORD+4,,AUTO

     1211     4826    2              END;

     1212     4827                /*
     1213     4828                *  !!!!!                CAUTION                 !!!!!  *
     1214     4829                *  !!!!! Don't clear all of FIRST_SRC_RECORD;   !!!!!  *
     1215     4830                *  !!!!! Specifically, we look at .EOR in the   !!!!!  *
     1216     4831                *  !!!!!          code that follows.            !!!!!  *
     1217     4832                */
     1218     4833
     1219     4834                /*
     1220     4835                 *    If either (a) source ends at EOF; or (b) source ends at
     1221     4836                 *        destination location, which is at the beginning of a
     1222     4837                 *        record -- then find the actual record key just before
     1223     4838                 *        the source end location, so there's no doubt about when
     1224     4839                 *        to stop copying.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:197  
     1225     4840                 */
     1226     4841    1           RCCL = -1;  /* Assume not equal (no comparison if files not equal) */

   4841  1 000362   000001 335007                    LCA     1,DL
         1 000363   200024 755100                    STA     RCCL,,AUTO

     1227     4842    2           IF SRC_RANGE.ENDD.POSITION# = 0 AND NOT OUTSIDE_SRC_RANGE THEN DO;

   4842  1 000364   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 000365   000021 220100                    LDX0    17,,PR0
         1 000366   000447 601000 1                  TNZ     s:4870
         1 000367   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 000370   000447 604000 1                  TMI     s:4870

     1228     4843                   %GETKEY (KEY=SRC_STREAM.FILE_KEY, PTR=SRC_FILE_KEY$);

   4850  1 000371   200004 471500                    LDP1    @SRC_STREAM,,AUTO
         1 000372   100004 721100                    LXL1    4,,PR1
         1 000373   000002 101003                    CMPX1   2,DU
         1 000374   000401 601000 1                  TNZ     s:4850+8

   4850  1 000375   100005 473500                    LDP3    5,,PR1
         1 000376   300002 634500                    EPPR4   2,,PR3
         1 000377   200022 454500                    STP4    SRC_FILE_KEY$,,AUTO
         1 000400   000404 710000 1                  TRA     s:4860

   4850  1 000401   200004 236100                    LDQ     @SRC_STREAM,,AUTO
         1 000402   000005 036003                    ADLQ    5,DU
         1 000403   200022 756100                    STQ     SRC_FILE_KEY$,,AUTO

     1229     4853                   %GETKEY (KEY=DEST_STREAM.FILE_KEY, PTR=DEST_FILE_KEY$);

   4860  1 000404   200006 473500                    LDP3    @DEST_STREAM,,AUTO
         1 000405   300004 722100                    LXL2    4,,PR3
         1 000406   000002 102003                    CMPX2   2,DU
         1 000407   000414 601000 1                  TNZ     s:4860+8

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:198  
   4860  1 000410   300005 474500                    LDP4    5,,PR3
         1 000411   400002 635500                    EPPR5   2,,PR4
         1 000412   200023 455500                    STP5    DEST_FILE_KEY$,,AUTO
         1 000413   000417 710000 1                  TRA     s:4863

   4860  1 000414   200006 236100                    LDQ     @DEST_STREAM,,AUTO
         1 000415   000005 036003                    ADLQ    5,DU
         1 000416   200023 756100                    STQ     DEST_FILE_KEY$,,AUTO

     1230     4863    2              IF SRC_FILE_KEY$ -> VD$TEXTC.BYTES =

   4863  1 000417   200022 474500                    LDP4    SRC_FILE_KEY$,,AUTO
         1 000420   400000 236100                    LDQ     0,,PR4
         1 000421   000033 772000                    QRL     27
         1 000422   200023 475500                    LDP5    DEST_FILE_KEY$,,AUTO
         1 000423   000000 623006                    EAX3    0,QL
         1 000424   500000 236100                    LDQ     0,,PR5
         1 000425   000033 772000                    QRL     27
         1 000426   000000 624006                    EAX4    0,QL
         1 000427   040140 106540                    CMPC    fill='040'O
         1 000430   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         1 000431   500000 200014                    ADSC9   0,,PR5                   cn=1,n=*X4
         1 000432   000447 601000 1                  TNZ     s:4870

     1231     4864    3                DEST_FILE_KEY$ -> VD$TEXTC.BYTES THEN DO;

     1232     4865    3                 CALL VDG$COMPARE_LOCS (DEST_RANGE.ENDD, SRC_RANGE.ENDD, RCCL)

   4865  1 000433   200024 636500                    EPPR6   RCCL,,AUTO
         1 000434   200176 456500                    STP6    OPEN_OPTIONS+7,,AUTO
         1 000435   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 000436   000011 036003                    ADLQ    9,DU
         1 000437   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 000440   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 000441   000011 036003                    ADLQ    9,DU
         1 000442   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000443   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:199  
         1 000444   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000445   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         1 000446   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1233     4866    3                   ALTRET (COMPARE_LOCS_FAILED);
     1234     4867    3                 END;

     1235     4868    2              END;

     1236     4869
     1237     4870    1           IF SRC_RANGE.ENDD.EOF  OR

   4870  1 000447   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 000450   000021 236100                    LDQ     17,,PR0
         1 000451   400000 316007                    CANQ    -131072,DL
         1 000452   000455 601000 1                  TNZ     s:4872
         1 000453   200024 235100                    LDA     RCCL,,AUTO
         1 000454   000551 601000 1                  TNZ     s:4908

     1238     4871    2             RCCL = %RCCL_EQUAL THEN DO;

     1239     4872    2              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.ENDD, -1, %FALSE)

   4872  1 000455   000004 237000 2                  LDAQ    4
         1 000456   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 000457   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 000460   000011 036003                    ADLQ    9,DU
         1 000461   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 000462   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 000463   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000464   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000465   000000 701000 xent               TSX1    VDA$LREAD
         1 000466   001254 702000 1                  TSX2    LREAD_FAILED

     1240     4873    2                ALTRET (LREAD_FAILED);
     1241     4874    2              CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:200  
   4874  1 000467   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 000470   000011 036003                    ADLQ    9,DU
         1 000471   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000472   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000473   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000474   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 000475   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1242     4875    2                ALTRET (OCLEAR_LOCATION_FAILED);
     1243     4876    2              IF SRC_RANGE.START.EOF THEN   /* Src file is empty */

   4876  1 000476   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 000477   000010 236100                    LDQ     8,,PR0
         1 000500   400000 316007                    CANQ    -131072,DL
         1 000501   000505 600000 1                  TZE     s:4894

     1244     4877    2                 SRC_RANGE.ENDD.EOF = %TRUE;

   4877  1 000502   400000 236007                    LDQ     -131072,DL
         1 000503   000021 256100                    ORSQ    17,,PR0
         1 000504   000551 710000 1                  TRA     s:4908

     1245     4878    3              ELSE DO;

     1246     4879                      /* Add .001 to last key actually enclosed by SRC_RANGE */
     1247     4880                      %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     1248     4881                      TKEY=SRC_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);

   4894  1 000505   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 000506   000001 735000                    ALS     1
         1 000507   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 000510   000003 736000                    QLS     3
         1 000511   000002 735000                    ALS     2
         1 000512   200004 471500                    LDP1    @SRC_STREAM,,AUTO
         1 000513   000105 100506                    MLR     fill='000'O
         1 000514   100004 000010                    ADSC9   4,Q,PR1                  cn=0,n=8
         1 000515   000007 000010                    ADSC9   7,A,PR0                  cn=0,n=8
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:201  

   4894  1 000516   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 000517   000001 735000                    ALS     1
         1 000520   100004 720105                    LXL0    4,AL,PR1
         1 000521   000002 100003                    CMPX0   2,DU
         1 000522   000540 601000 1                  TNZ     s:4897

   4894  1 000523   100005 473505                    LDP3    5,AL,PR1
         1 000524   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 000525   000023 736000                    QLS     19
         1 000526   000010 036003                    ADLQ    8,DU
         1 000527   200003 036100                    ADLQ    @SRC_RANGE,,AUTO
         1 000530   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 000531   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 000532   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000533   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000534   000000 701000 xent               TSX1    VDG$OCOPY
         1 000535   000537 702000 1                  TSX2    s:4895
         1 000536   000540 710000 1                  TRA     s:4897

   4895  1 000537   000000 702200 xent               TSX2  ! X66_AALT

     1249     4897    3                 ADDR(SRC_RANGE.ENDD.KEY (SRC_LEVEL-1)) -> VD$KEY_NUMBER.BYTES# =

   4897  1 000540   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 000541   000001 735000                    ALS     1
         1 000542   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 000543   000010 236105                    LDQ     8,AL,PR0
         1 000544   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000545   000001 036007                    ADLQ    1,DL
         1 000546   000010 676105                    ERQ     8,AL,PR0
         1 000547   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000550   000010 656105                    ERSQ    8,AL,PR0

     1250     4898    3                   ADDR(SRC_RANGE.ENDD.KEY (SRC_LEVEL-1)) ->
     1251     4899    3                   VD$KEY_NUMBER.BYTES# + %MN_EDITKEY_FRACT;
     1252     4900    3                 END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:202  

     1253     4901    2              END;

     1254     4902
     1255     4903                /*
     1256     4904                *   ADJUST_INCREMENT probably repositioned the source stream.
     1257     4905                *   Resposition it back to the first src record (as tho we'd
     1258     4906                *       just read the first src record).
     1259     4907                */
     1260     4908    1           IF NOT OUTSIDE_SRC_RANGE THEN

   4908  1 000551   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 000552   000564 604000 1                  TMI     s:4943

     1261     4909    1              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, 0, %DONT_READ_RECORD)

   4909  1 000553   000006 237000 2                  LDAQ    6
         1 000554   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 000555   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 000556   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 000557   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 000560   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000561   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000562   000000 701000 xent               TSX1    VDA$LREAD
         1 000563   001254 702000 1                  TSX2    LREAD_FAILED

     1262     4910    1                ALTRET (LREAD_FAILED);
     1263     4911
     1264     4912
     1265     4913                %BOX (TITLE="Main Loop");

              4925    1   /***************************************************************************
              4927    1    *                                                                         *
              4931    1            *                                 Main Loop                              *
              4933    1            *                                                                        *
              4935    1          ***************************************************************************/

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:203  
     1266     4939
     1267     4940                /*
     1268     4941                *   Loop while we have a [partial] record to write.
     1269     4942                */
     1270     4943    1           VD_$RECORDS_INSERTED.V# = 0;

   4943  1 000564   000003 450000 xsym               STZ     VD_$RECORDS_INSERTED+3

     1271     4944
     1272     4945    1   MAIN_LOOP:
     1273     4946    2           DO WHILE RECORD.DATA$ ~= ADDR(NIL);

   4946  1 000565   001205 710000 1     MAIN_LOOP    TRA     s:5149

     1274     4947    3              IF NOT RECORD.EOR THEN DO;

   4947  1 000566   200032 234100                    SZN     RECORD+5,,AUTO
         1 000567   000650 604000 1                  TMI     s:4991

     1275     4948                      /*
     1276     4949                      *  Source record has no EOR:  must be last in source block.
     1277     4950                      *  Append DEST_RIGHT to it.
     1278     4951                      */
     1279     4952    3                 END_POS_OF_INSERTED_DATA = RECORD$DATA.LENGTH#;

   4952  1 000570   200031 470500                    LDP0    RECORD+4,,AUTO
         1 000571   000002 236100                    LDQ     2,,PR0
         1 000572   000022 732000                    QRS     18
         1 000573   200011 756100                    STQ     END_POS_OF_INSERTED_DATA,,AUTO

     1280     4953    4                 IF DEST_RIGHT$ ~= ADDR(NIL) THEN DO;

   4953  1 000574   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
         1 000575   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000576   000642 600000 1                  TZE     s:4987

     1281     4954    4                    RECORD.EOR = DEST_EOR; /* destRight, if used, may have EOR */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:204  

   4954  1 000577   200040 236100                    LDQ     DEST_EOR,,AUTO
         1 000600   200032 676100                    ERQ     RECORD+5,,AUTO
         1 000601   400000 376003                    ANQ     -131072,DU
         1 000602   200032 656100                    ERSQ    RECORD+5,,AUTO

     1282     4955    4                    IF DEST_EXISTS THEN EXIT;

   4955  1 000603   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 000604   000642 604000 1                  TMI     s:4987

     1283     4956                         /*
     1284     4957                         * Always write an existing record with its original key
     1285     4958                         */
     1286     4959                         %CLEARKEY (KEY=RECORD.KEY);

   4966  1 000605   200025 720100                    LXL0    RECORD,,AUTO
         1 000606   000002 100003                    CMPX0   2,DU
         1 000607   000616 601000 1                  TNZ     s:4967+1

   4966  1 000610   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 000611   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000612   000000 701000 xent               TSX1    VDG$OFREE
         1 000613   000615 702000 1                  TSX2    s:4967
         1 000614   000616 710000 1                  TRA     s:4967+1

   4967  1 000615   000000 702200 xent               TSX2  ! X66_AALT

   4967  1 000616   200025 450100                    STZ     RECORD,,AUTO
         1 000617   200026 450100                    STZ     RECORD+1,,AUTO

     1287     4969                         %COPYKEY (FKEY=DEST_NEXT_KEY, TKEY=RECORD.KEY);

   4982  1 000620   200034 237100                    LDAQ    DEST_NEXT_KEY,,AUTO
         1 000621   200025 755100                    STA     RECORD,,AUTO
         1 000622   200026 756100                    STQ     RECORD+1,,AUTO

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:205  
   4982  1 000623   200034 720100                    LXL0    DEST_NEXT_KEY,,AUTO
         1 000624   000002 100003                    CMPX0   2,DU
         1 000625   000640 601000 1                  TNZ     s:4985

   4982  1 000626   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 000627   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 000630   200035 236100                    LDQ     DEST_NEXT_KEY+1,,AUTO
         1 000631   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000632   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000633   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000634   000000 701000 xent               TSX1    VDG$OCOPY
         1 000635   000637 702000 1                  TSX2    s:4983
         1 000636   000640 710000 1                  TRA     s:4985

   4983  1 000637   000000 702200 xent               TSX2  ! X66_AALT

     1288     4985    4                    GENERATE_KEY = %SQ_CURRENT;

   4985  1 000640   000002 235007                    LDA     2,DL
         1 000641   200042 755100                    STA     GENERATE_KEY,,AUTO

     1289     4986    4                    END;

     1290     4987    3                 CALL APPEND (RECORD.DATA$, DEST_RIGHT$) /* NILs DEST_RIGHT$ */

   4987  1 000642   200036 630500                    EPPR0   DEST_RIGHT$,,AUTO
         1 000643   200112 450500                    STP0    @LEFT$+1,,AUTO
         1 000644   200031 631500                    EPPR1   RECORD+4,,AUTO
         1 000645   200111 451500                    STP1    ERR_SUBST$+3,,AUTO
         1 000646   003707 701000 1                  TSX1    APPEND
         1 000647   001254 702000 1                  TSX2    LREAD_FAILED

     1291     4988    3                   ALTRET (APPEND_FAILED);
     1292     4989    3                 END;

     1293     4990                   /* Write the source record to the destination */
     1294     4991    2              CALL VDE$RPUT (DEST_STREAM, DEST$EDIT_BLOCK.RANGE, DEST_OPTIONS,
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:206  

   4991  1 000650   200034 630500                    EPPR0   DEST_NEXT_KEY,,AUTO
         1 000651   200201 450500                    STP0    OPEN_OPTIONS+10,,AUTO
         1 000652   200042 631500                    EPPR1   GENERATE_KEY,,AUTO
         1 000653   200200 451500                    STP1    OPEN_OPTIONS+9,,AUTO
         1 000654   200025 633500                    EPPR3   RECORD,,AUTO
         1 000655   200177 453500                    STP3    OPEN_OPTIONS+8,,AUTO
         1 000656   200013 634500                    EPPR4   DEST_OPTIONS,,AUTO
         1 000657   200176 454500                    STP4    OPEN_OPTIONS+7,,AUTO
         1 000660   200012 236100                    LDQ     DEST_EDIT_BLOCK$,,AUTO
         1 000661   000003 036003                    ADLQ    3,DU
         1 000662   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 000663   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 000664   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000665   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000666   000000 701000 xent               TSX1    VDE$RPUT
         1 000667   000671 702000 1                  TSX2    s:4994
         1 000670   000674 710000 1                  TRA     s:5000

     1295     4992    2                RECORD, GENERATE_KEY, DEST_NEXT_KEY)
     1296     4993    3              WHENALTRETURN DO;

     1297     4994    3                 IF FIRST_TIME_THRU_MAIN_LOOP THEN

   4994  1 000671   200007 234100                    SZN     FIRST_TIME_THRU_MAIN_LOOP,,AUTO
         1 000672   001215 604000 1                  TMI     NOTHING_COPIED

     1298     4995    3                    GOTO NOTHING_COPIED;
     1299     4996    3                 ELSE
     1300     4997    3                    GOTO ALTRETURN_FROM_MAIN_LOOP;

   4997  1 000673   001243 710000 1                  TRA     ALTRETURN_FROM_MAIN_LOOP

     1301     4998    3                 END;
     1302     4999                   /* Save info about this write */
     1303     5000    2              PREVIOUS_SRC_EOR = SRC_EOR;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:207  
   5000  1 000674   200045 236100                    LDQ     SRC_EOR,,AUTO
         1 000675   400000 376003                    ANQ     -131072,DU
         1 000676   200044 756100                    STQ     PREVIOUS_SRC_EOR,,AUTO

     1304     5001                   %CLEARKEY (KEY=LAST_COPIED_KEY);

   5008  1 000677   200056 720100                    LXL0    LAST_COPIED_KEY,,AUTO
         1 000700   000002 100003                    CMPX0   2,DU
         1 000701   000710 601000 1                  TNZ     s:5009+1

   5008  1 000702   200057 630500                    EPPR0   LAST_COPIED_KEY+1,,AUTO
         1 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000704   000000 701000 xent               TSX1    VDG$OFREE
         1 000705   000707 702000 1                  TSX2    s:5009
         1 000706   000710 710000 1                  TRA     s:5009+1

   5009  1 000707   000000 702200 xent               TSX2  ! X66_AALT

   5009  1 000710   000000 235003                    LDA     0,DU
         1 000711   000000 236003                    LDQ     0,DU
         1 000712   200056 757100                    STAQ    LAST_COPIED_KEY,,AUTO

     1305     5011    2              LAST_COPIED_KEY = SRC_KEY_OF_RECORD;

   5011  1 000713   200054 237100                    LDAQ    SRC_KEY_OF_RECORD,,AUTO
         1 000714   200056 757100                    STAQ    LAST_COPIED_KEY,,AUTO

     1306     5012    2              SRC_KEY_OF_RECORD = %CLEAR;

   5012  1 000715   000000 235003                    LDA     0,DU
         1 000716   000000 236003                    LDQ     0,DU
         1 000717   200054 757100                    STAQ    SRC_KEY_OF_RECORD,,AUTO

     1307     5013                   %CLEARKEY (KEY=LAST_WRITTEN_KEY);

   5020  1 000720   200060 720100                    LXL0    LAST_WRITTEN_KEY,,AUTO
         1 000721   000002 100003                    CMPX0   2,DU
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:208  
         1 000722   000731 601000 1                  TNZ     s:5021+1

   5020  1 000723   200061 630500                    EPPR0   LAST_WRITTEN_KEY+1,,AUTO
         1 000724   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000725   000000 701000 xent               TSX1    VDG$OFREE
         1 000726   000730 702000 1                  TSX2    s:5021
         1 000727   000731 710000 1                  TRA     s:5021+1

   5021  1 000730   000000 702200 xent               TSX2  ! X66_AALT

   5021  1 000731   000000 235003                    LDA     0,DU
         1 000732   000000 236003                    LDQ     0,DU
         1 000733   200060 757100                    STAQ    LAST_WRITTEN_KEY,,AUTO

     1308     5023                   %COPYKEY (FKEY=RECORD.KEY, TKEY=LAST_WRITTEN_KEY);

   5036  1 000734   000100 100500                    MLR     fill='000'O
         1 000735   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 000736   200060 000010                    ADSC9   LAST_WRITTEN_KEY,,AUTO   cn=0,n=8

   5036  1 000737   200025 720100                    LXL0    RECORD,,AUTO
         1 000740   000002 100003                    CMPX0   2,DU
         1 000741   000754 601000 1                  TNZ     s:5041

   5036  1 000742   200061 630500                    EPPR0   LAST_WRITTEN_KEY+1,,AUTO
         1 000743   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 000744   200026 236100                    LDQ     RECORD+1,,AUTO
         1 000745   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 000746   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 000747   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000750   000000 701000 xent               TSX1    VDG$OCOPY
         1 000751   000753 702000 1                  TSX2    s:5037
         1 000752   000754 710000 1                  TRA     s:5041

   5037  1 000753   000000 702200 xent               TSX2  ! X66_AALT

     1309     5039
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:209  
     1310     5040                   /* If this is 1st write, see if we need to adjust DEST_RANGE.START */
     1311     5041    2              IF GENERATE_KEY ~= %SQ_CURRENT THEN

   5041  1 000754   200042 235100                    LDA     GENERATE_KEY,,AUTO
         1 000755   000002 115007                    CMPA    2,DL
         1 000756   000760 600000 1                  TZE     s:5043

     1312     5042    2                 VD_$RECORDS_INSERTED.V# = VD_$RECORDS_INSERTED.V# + 1;

   5042  1 000757   000003 054000 xsym               AOS     VD_$RECORDS_INSERTED+3

     1313     5043    2              IF FIRST_TIME_THRU_MAIN_LOOP

   5043  1 000760   200007 234100                    SZN     FIRST_TIME_THRU_MAIN_LOOP,,AUTO
         1 000761   001062 605000 1                  TPL     s:5082
         1 000762   000002 115007                    CMPA    2,DL
         1 000763   000766 601000 1                  TNZ     s:5046
         1 000764   200045 234100                    SZN     SRC_EOR,,AUTO
         1 000765   001062 604000 1                  TMI     s:5082

     1314     5044    3                AND (GENERATE_KEY ~= %SQ_CURRENT OR NOT SRC_EOR) THEN DO;

     1315     5045                      /* We didn't write the first record at dest end location */
     1316     5046    3                 IF DEST_LEVEL > %LVL_EXT_REC

   5046  1 000766   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 000767   000001 116007                    CMPQ    1,DL
         1 000770   001007 604400 1                  TMOZ    s:5052
         1 000771   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 000772   000000 106500                    CMPC    fill='000'O
         1 000773   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         1 000774   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000775   001007 601000 1                  TNZ     s:5052

     1317     5047    4                   AND DEST_RANGE.START.KEY = %CLEAR THEN DO;

     1318     5048    4                    CALL VDG$OCOPY_LOCATION (DEST$EDIT_BLOCK.RANGE.START,
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:210  

   5048  1 000776   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 000777   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 001000   200012 236100                    LDQ     DEST_EDIT_BLOCK$,,AUTO
         1 001001   000003 036003                    ADLQ    3,DU
         1 001002   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001003   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001004   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001005   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001006   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1319     5049    4                      DEST_RANGE.START)
     1320     5050    4                      ALTRET (OCOPY_LOCATION_FAILED);
     1321     5051    4                    END;

     1322     5052    3                 DEST_RANGE.START.EOF = %FALSE;

   5052  1 001007   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001010   000010 236000 2                  LDQ     8
         1 001011   000010 356100                    ANSQ    8,,PR0

     1323     5053                      %CLEARKEY (KEY=DEST_RANGE.START.KEY, INDX=DEST_LEVEL-1);

   5060  1 001012   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001013   000001 735000                    ALS     1
         1 001014   077776 720105                    LXL0    -2,AL,PR0
         1 001015   000002 100003                    CMPX0   2,DU
         1 001016   001027 601000 1                  TNZ     s:5061+1

   5060  1 001017   077777 471505                    LDP1    -1,AL,PR0
         1 001020   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 001021   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001022   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001023   000000 701000 xent               TSX1    VDG$OFREE
         1 001024   001026 702000 1                  TSX2    s:5061
         1 001025   001027 710000 1                  TRA     s:5061+1

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:211  
   5061  1 001026   000000 702200 xent               TSX2  ! X66_AALT

   5061  1 001027   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001030   000001 735000                    ALS     1
         1 001031   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001032   077776 450105                    STZ     -2,AL,PR0
         1 001033   077777 450105                    STZ     -1,AL,PR0

     1324     5063                      %COPYKEY (FKEY=RECORD.KEY,
     1325     5064                      TKEY=DEST_RANGE.START.KEY, TINDX=DEST_LEVEL-1);

   5077  1 001034   000002 735000                    ALS     2
         1 001035   000105 100500                    MLR     fill='000'O
         1 001036   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 001037   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8

   5077  1 001040   200025 720100                    LXL0    RECORD,,AUTO
         1 001041   000002 100003                    CMPX0   2,DU
         1 001042   001057 601000 1                  TNZ     s:5080

   5077  1 001043   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 001044   000023 736000                    QLS     19
         1 001045   000001 136003                    SBLQ    1,DU
         1 001046   200005 036100                    ADLQ    @DEST_RANGE,,AUTO
         1 001047   200026 235100                    LDA     RECORD+1,,AUTO
         1 001050   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 001051   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001052   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001053   000000 701000 xent               TSX1    VDG$OCOPY
         1 001054   001056 702000 1                  TSX2    s:5078
         1 001055   001057 710000 1                  TRA     s:5080

   5078  1 001056   000000 702200 xent               TSX2  ! X66_AALT

     1326     5080    3                 DEST_RANGE.START.POSITION# = DEST_LEFT_LENGTH;

   5080  1 001057   200033 720100                    LXL0    DEST_LEFT_LENGTH,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:212  
         1 001060   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001061   000010 740100                    STX0    8,,PR0

     1327     5081    3                 END;

     1328     5082    2              FIRST_TIME_THRU_MAIN_LOOP = %FALSE;

   5082  1 001062   200007 450100                    STZ     FIRST_TIME_THRU_MAIN_LOOP,,AUTO

     1329     5083
     1330     5084                   /* Always generate keys after first write */
     1331     5085    2              GENERATE_KEY = %SQ_NEXT;

   5085  1 001063   000003 235007                    LDA     3,DL
         1 001064   200042 755100                    STA     GENERATE_KEY,,AUTO

     1332     5086
     1333     5087                   /* Get next source record */
     1334     5088    3              IF OUTSIDE_SRC_RANGE THEN DO;

   5088  1 001065   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 001066   001104 605000 1                  TPL     s:5102

     1335     5089                      %CLEARKEY (KEY=RECORD.KEY);

   5096  1 001067   200025 720100                    LXL0    RECORD,,AUTO
         1 001070   000002 100003                    CMPX0   2,DU
         1 001071   001100 601000 1                  TNZ     s:5097+1

   5096  1 001072   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 001073   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001074   000000 701000 xent               TSX1    VDG$OFREE
         1 001075   001077 702000 1                  TSX2    s:5097
         1 001076   001100 710000 1                  TRA     s:5097+1

   5097  1 001077   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:213  
   5097  1 001100   200025 450100                    STZ     RECORD,,AUTO
         1 001101   200026 450100                    STZ     RECORD+1,,AUTO

     1336     5099    3                 SRC_EOR = '0'B;

   5099  1 001102   200045 450100                    STZ     SRC_EOR,,AUTO

     1337     5100    3                 END;

   5100  1 001103   001131 710000 1                  TRA     s:5109

     1338     5101    3              ELSE DO;

     1339     5102    3                 CALL VDA$LREAD (SRC_STREAM, , 1, %READ_RECORD)

   5102  1 001104   000012 237000 2                  LDAQ    10
         1 001105   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 001106   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001107   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 001110   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 001111   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001112   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001113   000000 701000 xent               TSX1    VDA$LREAD
         1 001114   001243 702000 1                  TSX2    ALTRETURN_FROM_MAIN_LOOP

     1340     5103    3                   ALTRET (ALTRETURN_FROM_MAIN_LOOP);
     1341     5104    3                 CALL VDE$RGET (SRC_STREAM, SRC_RANGE, RECORD)

   5104  1 001115   200025 630500                    EPPR0   RECORD,,AUTO
         1 001116   200176 450500                    STP0    OPEN_OPTIONS+7,,AUTO
         1 001117   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 001120   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 001121   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 001122   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001123   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001124   000000 701000 xent               TSX1    VDE$RGET
         1 001125   001243 702000 1                  TSX2    ALTRETURN_FROM_MAIN_LOOP
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:214  

     1342     5105    3                   ALTRET (ALTRETURN_FROM_MAIN_LOOP);
     1343     5106    3                 SRC_EOR = RECORD.EOR;

   5106  1 001126   200032 236100                    LDQ     RECORD+5,,AUTO
         1 001127   400000 376003                    ANQ     -131072,DU
         1 001130   200045 756100                    STQ     SRC_EOR,,AUTO

     1344     5107    3                 END;

     1345     5108
     1346     5109    3              IF RECORD.KEY = %CLEAR THEN DO;

   5109  1 001131   000000 106500                    CMPC    fill='000'O
         1 001132   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 001133   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 001134   001155 601000 1                  TNZ     s:5127

     1347     5110                      /*
     1348     5111                      *   We're outside source range now:
     1349     5112                      *   Load RECORD from DEST_RIGHT, if any.
     1350     5113                      */
     1351     5114    3                 OUTSIDE_SRC_RANGE = %TRUE;

   5114  1 001135   400000 236003                    LDQ     -131072,DU
         1 001136   200010 756100                    STQ     OUTSIDE_SRC_RANGE,,AUTO

     1352     5115    3                 IF DEST_RIGHT$ ~= ADDR(NIL) THEN

   5115  1 001137   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
         1 001140   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001141   001146 600000 1                  TZE     s:5117

     1353     5116    3                    RECORD.EOR = DEST_EOR; /* destRight, if used, may have EOR */

   5116  1 001142   200040 236100                    LDQ     DEST_EOR,,AUTO
         1 001143   200032 676100                    ERQ     RECORD+5,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:215  
         1 001144   400000 376003                    ANQ     -131072,DU
         1 001145   200032 656100                    ERSQ    RECORD+5,,AUTO

     1354     5117    3                 IF DEST_EXISTS THEN /* Only write it if we split one */

   5117  1 001146   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 001147   001152 605000 1                  TPL     s:5119

     1355     5118    3                    RECORD.DATA$ = DEST_RIGHT$;

   5118  1 001150   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
         1 001151   200031 756100                    STQ     RECORD+4,,AUTO

     1356     5119    3                 DEST_RIGHT$ = ADDR(NIL);

   5119  1 001152   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001153   200036 756100                    STQ     DEST_RIGHT$,,AUTO

     1357     5120    3                 END;

   5120  1 001154   001165 710000 1                  TRA     s:5145

     1358     5121    3              ELSE DO;

     1359     5122                      /*
     1360     5123                      *   Still have src records to process.
     1361     5124                      *   Previous source record should have had EOR set.
     1362     5125                      *   SRC_KEY_OF_RECORD should be %CLEAR at this point.
     1363     5126                      */
     1364     5127    4                 IF NOT PREVIOUS_SRC_EOR THEN DO;

   5127  1 001155   200044 234100                    SZN     PREVIOUS_SRC_EOR,,AUTO
         1 001156   001162 604000 1                  TMI     s:5130

     1365     5128    4                    CALL VDG$ESCREECH;

   5128  1 001157   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:216  
         1 001160   000000 701000 xent               TSX1    VDG$ESCREECH
         1 001161   000000 011000                    NOP     0

     1366     5129    4                    END;

     1367     5130    3                 SRC_KEY_OF_RECORD = RECORD.KEY;

   5130  1 001162   000100 100500                    MLR     fill='000'O
         1 001163   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 001164   200054 000010                    ADSC9   SRC_KEY_OF_RECORD,,AUTO  cn=0,n=8

     1368     5131    3                 END;

     1369     5132                   %COPYKEY (FKEY=LAST_WRITTEN_KEY, TKEY=RECORD.KEY);

   5145  1 001165   200060 237100                    LDAQ    LAST_WRITTEN_KEY,,AUTO
         1 001166   200025 755100                    STA     RECORD,,AUTO
         1 001167   200026 756100                    STQ     RECORD+1,,AUTO

   5145  1 001170   200060 720100                    LXL0    LAST_WRITTEN_KEY,,AUTO
         1 001171   000002 100003                    CMPX0   2,DU
         1 001172   001205 601000 1                  TNZ     s:5149

   5145  1 001173   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 001174   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 001175   200061 236100                    LDQ     LAST_WRITTEN_KEY+1,,AUTO
         1 001176   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001177   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001200   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001201   000000 701000 xent               TSX1    VDG$OCOPY
         1 001202   001204 702000 1                  TSX2    s:5146
         1 001203   001205 710000 1                  TRA     s:5149

   5146  1 001204   000000 702200 xent               TSX2  ! X66_AALT

     1370     5148
     1371     5149    2              END MAIN_LOOP;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:217  

   5149  1 001205   200031 236100                    LDQ     RECORD+4,,AUTO
         1 001206   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001207   000566 601000 1                  TNZ     s:4947

     1372     5150
     1373     5151
     1374     5152                %BOX (TITLE="End of Main Loop");

              5164    2   /***************************************************************************
              5166    2    *                                                                         *
              5170    2            *                              End of Main Loop                          *
              5172    2            *                                                                        *
              5174    2          ***************************************************************************/

     1375     5178
     1376     5179                /* Set DEST_RANGE.ENDD to point to the end of the inserted data */
     1377     5180    1           CALL SET_DEST_END

   5180  1 001210   001260 701000 1                  TSX1    SET_DEST_END
         1 001211   001254 702000 1                  TSX2    LREAD_FAILED

     1378     5181    1             ALTRET (SET_DEST_END_FAILED);
     1379     5182
     1380     5183                /* Free up any owned objects we don't need anymore */
     1381     5184    1           CALL CLEANUP

   5184  1 001212   001537 701000 1                  TSX1    CLEANUP
         1 001213   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1382     5185    1             ALTRET (CLEANUP_FAILED);
     1383     5186
     1384     5187    1           RETURN;

   5187  1 001214   000000 702200 xent               TSX2  ! X66_ARET

     1385     5188
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:218  
     1386     5189
     1387     5190
     1388     5191        /*
     1389     5192        *   Nothing was copied, due to an error.
     1390     5193        *   Save the SRC_RANGE in $NOT_COPIED.
     1391     5194        *   Set SRC_RANGE to "what was successfully copied":  an empty range at
     1392     5195        *       the SRC_RANGE.START location.
     1393     5196        *   DEST_RANGE should already be set to an empty range at the DEST_RANGE.ENDD
     1394     5197        *       location.
     1395     5198        */
     1396     5199    1   NOTHING_COPIED:
     1397     5200    1           CALL SAVE_NOT_COPIED (SRC_RANGE)

   5200  1 001215   200003 236100       NOTHING_COP* LDQ     @SRC_RANGE,,AUTO
         1 001216   200151 756100                    STQ     RANGE_ENDD_KEY$+3,,AUTO
         1 001217   004371 701000 1                  TSX1    SAVE_NOT_COPIED
         1 001220   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1398     5201    1             ALTRET (SAVE_NOT_COPIED_FAILED);
     1399     5202    1           CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)

   5202  1 001221   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 001222   000011 036003                    ADLQ    9,DU
         1 001223   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001224   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001225   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001226   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001227   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1400     5203    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1401     5204    1           CALL VDG$OCOPY_LOCATION (SRC_RANGE.START, SRC_RANGE.ENDD)

   5204  1 001230   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 001231   000011 036003                    ADLQ    9,DU
         1 001232   200003 235100                    LDA     @SRC_RANGE,,AUTO
         1 001233   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 001234   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:219  
         1 001235   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001236   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001237   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1402     5205    1             ALTRET (OCOPY_LOCATION_FAILED);
     1403     5206    1           CALL CLEANUP

   5206  1 001240   001537 701000 1                  TSX1    CLEANUP
         1 001241   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1404     5207    1             ALTRET (CLEANUP_FAILED);
     1405     5208    1           ALTRETURN;

   5208  1 001242   000000 702200 xent               TSX2  ! X66_AALT

     1406     5209
     1407     5210
     1408     5211        /*
     1409     5212        *   Bombed out of main loop.
     1410     5213        *   To get here, we must already have written the first record to the
     1411     5214        *       destination.  Therefore, before we altreturn we have to adjust
     1412     5215        *       SRC_RANGE, DEST_RANGE, and save anything that needs saving in
     1413     5216        *       $LEFTOVER and/or $NOT_COPIED.
     1414     5217        */
     1415     5218    1   ALTRETURN_FROM_MAIN_LOOP: ;

   5218  1 001243                       ALTRETURN_F* null
     1416     5219    1           IF LAST$ERR.FLAGLEV# < %FLV_FATAL THEN

   5219  1 001243   000032 470400 xsym               LDP0    VD_6E+26
         1 001244   000003 220100                    LDX0    3,,PR0
         1 001245   000004 100003                    CMPX0   4,DU
         1 001246   001251 603000 1                  TRC     s:5221

     1417     5220    1              CALL ABORT_INSERTION;

   5220  1 001247   003161 701000 1                  TSX1    ABORT_INSERTION
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:220  
         1 001250   000000 011000                    NOP     0

     1418     5221    1           CALL CLEANUP

   5221  1 001251   001537 701000 1                  TSX1    CLEANUP
         1 001252   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1419     5222    1             ALTRET (CLEANUP_FAILED);
     1420     5223    1           ALTRETURN;

   5223  1 001253   000000 702200 xent               TSX2  ! X66_AALT

   5219  1 001254                       LREAD_FAILED null
   5219  1 001254                       RGET_FAILED  null
   5219  1 001254                       PREPARE_DES* null
   5219  1 001254                       ADJUST_INCR* null
   5219  1 001254                       BAUTO_REKEY* null
   5219  1 001254                       APPEND_FAIL* null
   5219  1 001254                       LDELETE_FAI* null
   5219  1 001254                       SET_DEST_EN* null
     1421     5224
     1422     5225
     1423     5226
     1424     5227    1   LREAD_FAILED: ;
     1425     5228    1   RGET_FAILED: ;
     1426     5229    1   PREPARE_DESTINATION_FAILED: ;
     1427     5230    1   ADJUST_INCREMENT_FAILED: ;
     1428     5231    1   BAUTO_REKEY_FAILED: ;
     1429     5232    1   APPEND_FAILED: ;
     1430     5233    1   LDELETE_FAILED: ;
     1431     5234    1   SET_DEST_END_FAILED: ;
     1432     5235    1           CALL CLEANUP

   5235  1 001254   001537 701000 1                  TSX1    CLEANUP
         1 001255   001257 702000 1                  TSX2    COMPARE_LOCS_FAILED

     1433     5236    1             ALTRET (CLEANUP_FAILED);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:221  
     1434     5237    1           ALTRETURN;

   5237  1 001256   000000 702200 xent               TSX2  ! X66_AALT

     1435     5238
     1436     5239
     1437     5240    1   COMPARE_LOCS_FAILED: ;

   5240  1 001257                       COMPARE_LOC* null
   5240  1 001257                       OCLEAR_LOCA* null
   5240  1 001257                       OFREE_FAILED null
   5240  1 001257                       OCOPY_LOCAT* null
   5240  1 001257                       SAVE_NOT_CO* null
   5240  1 001257                       CLEANUP_FAI* null
     1438     5241    1   OCLEAR_LOCATION_FAILED: ;
     1439     5242    1   OFREE_FAILED: ;
     1440     5243    1   OCOPY_LOCATION_FAILED: ;
     1441     5244    1   SAVE_NOT_COPIED_FAILED: ;
     1442     5245    1   CLEANUP_FAILED: ;
     1443     5246    1           ALTRETURN;

   5246  1 001257   000000 702200 xent               TSX2  ! X66_AALT

     1444     5247
     1445     5248        %BOX (TITLE=SET_DEST_END, PAGE=YES);
              5256    1
              5260    1   /***************************************************************************
              5262    1    *                                                                         *
              5266    1            *                                SET_DEST_END                            *
              5268    1            *                                                                        *
              5270    1          ***************************************************************************/

     1446     5274
     1447     5275        /*I* NAME: SET_DEST_END
     1448     5276            PARAMETERS:
     1449     5277                None.
     1450     5278            INPUT:
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:222  
     1451     5279                DEST_RANGE.START is presumed to already have been set to the start
     1452     5280                    of the inserted data in the destination.
     1453     5281                DEST_RANGE.ENDD - The given destination location.
     1454     5282                PREVIOUS_SRC_EOR - Setting of EOR bit from previous source record
     1455     5283                    (which has already been copied to the destination).
     1456     5284                DEST_NEXT_KEY - Key of next existing record in the destination after
     1457     5285                    where we're inserting records.  Must not be %CLEAR:  if we're
     1458     5286                    inserting at EOF then DEST_NEXT_KEY should contain MAX_EDITKEY.
     1459     5287                LAST_WRITTEN_KEY - Last key written to the destination.  Must not be
     1460     5288                    %CLEAR.
     1461     5289                END_POS_OF_INSERTED_DATA - Just what it says.  Only non-0 if we've
     1462     5290                    read a record from the source block which didn't include EOR
     1463     5291                    (so therefore must be the last source record), in which case
     1464     5292                    END_POS_OF_INSERTED_DATA is the length of that last source record.
     1465     5293            OUTPUT:
     1466     5294                DEST_RANGE.ENDD is set appropriately.
     1467     5295            DESCRIPTION:
     1468     5296                Change DEST_RANGE.ENDD to specify end of block just inserted.
     1469     5297                (DEST_RANGE.START has already be set to start of inserted block.)
     1470     5298                If PREVIOUS_SRC_EOR is set, the inserted block ends at BOR of
     1471     5299                    DEST_NEXT_KEY.
     1472     5300                If PREVIOUS_SRC_EOR is not set, inserted block ends at position
     1473     5301                    END_POS_OF_INSERTED_DATA, key LAST_WRITTEN_KEY.
     1474     5302        */
     1475     5303
     1476     5304    1   SET_DEST_END: PROC ALTRET;

   5304  1 001260   200110 741300       SET_DEST_END STX1  ! ERR_SUBST$+2,,AUTO

     1477     5305
     1478     5306
     1479     5307    2   DCL DEST_NEXT_KEY$ PTR;
     1480     5308
     1481     5309
     1482     5310        %VD$TEXTC_NUMBER (NAME=DEST$NEXT_KEY, STCLASS="BASED(DEST_NEXT_KEY$)");
     1483     5324        %VD$XLATE_LOCATIONS (NAME=XLATE$LOC, STCLASS=AUTO);
     1484     5460
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:223  
     1485     5461
     1486     5462
     1487     5463    2           CALL VDG$OCLEAR_LOCATION (DEST_RANGE.ENDD)

   5463  1 001261   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 001262   000011 036003                    ADLQ    9,DU
         1 001263   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001264   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001265   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001266   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001267   001535 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1488     5464    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1489     5465
     1490     5466    3           IF DEST_LEVEL > %LVL_EXT_REC THEN DO;

   5466  1 001270   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001271   000001 115007                    CMPA    1,DL
         1 001272   001331 604400 1                  TMOZ    s:5483

     1491     5467                   /* Fill in key levels above level we're working at */
     1492     5468    3              CALL VDG$OCOPY_LOCATION (DEST$EDIT_BLOCK.RANGE.START,

   5468  1 001273   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 001274   000011 036003                    ADLQ    9,DU
         1 001275   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 001276   200012 236100                    LDQ     DEST_EDIT_BLOCK$,,AUTO
         1 001277   000003 036003                    ADLQ    3,DU
         1 001300   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001301   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001302   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001303   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001304   001535 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1493     5469    3                DEST_RANGE.ENDD)
     1494     5470    3                ALTRET (OCOPY_LOCATION_FAILED);
     1495     5471                   %CLEARKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:224  

   5478  1 001305   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001306   000001 735000                    ALS     1
         1 001307   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001310   000007 720105                    LXL0    7,AL,PR0
         1 001311   000002 100003                    CMPX0   2,DU
         1 001312   001324 601000 1                  TNZ     s:5479+2

   5478  1 001313   000010 471505                    LDP1    8,AL,PR0
         1 001314   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 001315   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001316   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001317   000000 701000 xent               TSX1    VDG$OFREE
         1 001320   001322 702000 1                  TSX2    s:5479
         1 001321   001324 710000 1                  TRA     s:5479+2

   5479  1 001322   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001323   000000 702211                    TSX2  ! 0,X1

   5479  1 001324   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001325   000001 735000                    ALS     1
         1 001326   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001327   000007 450105                    STZ     7,AL,PR0
         1 001330   000010 450105                    STZ     8,AL,PR0

     1496     5481    3              END;

     1497     5482
     1498     5483    3           IF PREVIOUS_SRC_EOR THEN DO;

   5483  1 001331   200044 234100                    SZN     PREVIOUS_SRC_EOR,,AUTO
         1 001332   001404 605000 1                  TPL     s:5507

     1499     5484                   %GETKEY (KEY=DEST_NEXT_KEY, PTR=DEST_NEXT_KEY$);

   5491  1 001333   200034 720100                    LXL0    DEST_NEXT_KEY,,AUTO
         1 001334   000002 100003                    CMPX0   2,DU
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:225  
         1 001335   001342 601000 1                  TNZ     s:5491+7

   5491  1 001336   200035 236100                    LDQ     DEST_NEXT_KEY+1,,AUTO
         1 001337   000002 036003                    ADLQ    2,DU
         1 001340   200111 756100                    STQ     DEST_NEXT_KEY$,,AUTO
         1 001341   001344 710000 1                  TRA     s:5494

   5491  1 001342   200035 630500                    EPPR0   DEST_NEXT_KEY+1,,AUTO
         1 001343   200111 450500                    STP0    DEST_NEXT_KEY$,,AUTO

     1500     5494    3              IF DEST_NEXT_KEY.TYPE# = %KT_EDITKEY

   5494  1 001344   200034 221100                    LDX1    DEST_NEXT_KEY,,AUTO
         1 001345   000003 101003                    CMPX1   3,DU
         1 001346   001370 601000 1                  TNZ     s:5502
         1 001347   200111 470500                    LDP0    DEST_NEXT_KEY$,,AUTO
         1 001350   000000 236100                    LDQ     0,,PR0
         1 001351   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 001352   000011 116000 2                  CMPQ    9
         1 001353   001370 602000 1                  TNC     s:5502

     1501     5495    4                AND DEST$NEXT_KEY.BYTES# >= %MX_EDITKEY THEN DO;

     1502     5496    4                 CALL VDG$OCLEAR_LOCATION (DEST_RANGE.ENDD)

   5496  1 001354   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 001355   000011 036003                    ADLQ    9,DU
         1 001356   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001357   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001360   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001361   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001362   001535 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1503     5497    4                   ALTRET (OCLEAR_LOCATION_FAILED);
     1504     5498    4                 DEST_RANGE.ENDD.EOF = %TRUE;

   5498  1 001363   200005 470500                    LDP0    @DEST_RANGE,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:226  
         1 001364   400000 236007                    LDQ     -131072,DL
         1 001365   000021 256100                    ORSQ    17,,PR0

     1505     5499    4                 RETURN; /* No XLATE needed if inserting at EOF */

   5499  1 001366   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001367   000001 702211                    TSX2  ! 1,X1

     1506     5500    4                 END;
     1507     5501    4              ELSE DO;

     1508     5502    4                 DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = DEST_NEXT_KEY;

   5502  1 001370   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001371   000001 735000                    ALS     1
         1 001372   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001373   000000 622005                    EAX2    0,AL
         1 001374   000000 623005                    EAX3    0,AL
         1 001375   200034 237100                    LDAQ    DEST_NEXT_KEY,,AUTO
         1 001376   000007 755112                    STA     7,X2,PR0
         1 001377   000010 756113                    STQ     8,X3,PR0

     1509     5503    4                 DEST_NEXT_KEY = %CLEAR;

   5503  1 001400   000000 235003                    LDA     0,DU
         1 001401   000000 236003                    LDQ     0,DU
         1 001402   200034 757100                    STAQ    DEST_NEXT_KEY,,AUTO

     1510     5504    4                 END;

     1511     5505    3              END;

   5505  1 001403   001421 710000 1                  TRA     s:5512

     1512     5506    3           ELSE DO;

     1513     5507    3              DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = LAST_WRITTEN_KEY;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:227  

   5507  1 001404   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001405   000001 735000                    ALS     1
         1 001406   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001407   000000 620005                    EAX0    0,AL
         1 001410   000000 621005                    EAX1    0,AL
         1 001411   200060 237100                    LDAQ    LAST_WRITTEN_KEY,,AUTO
         1 001412   000007 755110                    STA     7,X0,PR0
         1 001413   000010 756111                    STQ     8,X1,PR0

     1514     5508    3              LAST_WRITTEN_KEY = %CLEAR;

   5508  1 001414   000000 235003                    LDA     0,DU
         1 001415   000000 236003                    LDQ     0,DU
         1 001416   200060 757100                    STAQ    LAST_WRITTEN_KEY,,AUTO

     1515     5509    3              DEST_RANGE.ENDD.POSITION# = END_POS_OF_INSERTED_DATA;

   5509  1 001417   200011 722100                    LXL2    END_POS_OF_INSERTED_DATA,,AUTO
         1 001420   000021 742100                    STX2    17,,PR0

     1516     5510    3              END;

     1517     5511
     1518     5512    2           XLATE$LOC = %CLEAR;

   5512  1 001421   000100 100400                    MLR     fill='000'O
         1 001422   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001423   200112 000134                    ADSC9   XLATE$LOC,,AUTO          cn=0,n=92

     1519     5513    2           XLATE$LOC.FILE_KEY = DEST$EDIT_BLOCK.FILE_KEY;

   5513  1 001424   200012 471500                    LDP1    DEST_EDIT_BLOCK$,,AUTO
         1 001425   000100 100500                    MLR     fill='000'O
         1 001426   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8
         1 001427   200115 000010                    ADSC9   ALLOC_WDS+1,,AUTO        cn=0,n=8

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:228  
     1520     5514    2           XLATE$LOC.LEVEL# = DEST_LEVEL;

   5514  1 001430   200020 720100                    LXL0    DEST_LEVEL,,AUTO
         1 001431   200117 740100                    STX0    NEW_BUFFER$+1,,AUTO

     1521     5515    2           XLATE$LOC.PREFIX.KEY = DEST$EDIT_BLOCK.RANGE.START.KEY;

   5515  1 001432   000100 100500                    MLR     fill='000'O
         1 001433   100003 000040                    ADSC9   3,,PR1                   cn=0,n=32
         1 001434   200120 000040                    ADSC9   NEW_BUFFER$+2,,AUTO      cn=0,n=32

     1522     5516    2           IF DEST$EDIT_BLOCK.RANGE.ENDD.POSITION# ~= 0 THEN

   5516  1 001435   100024 221100                    LDX1    20,,PR1
         1 001436   001441 600000 1                  TZE     s:5519

     1523     5517    2              DEST$EDIT_BLOCK.RANGE.ENDD.EOF = %FALSE;

   5517  1 001437   000010 236000 2                  LDQ     8
         1 001440   100024 356100                    ANSQ    20,,PR1

     1524     5518
     1525     5519    2           XLATE$LOC.PREFIX.KEY(DEST_LEVEL-1) = %CLEAR;

   5519  1 001441   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001442   000001 735000                    ALS     1
         1 001443   000000 622005                    EAX2    0,AL
         1 001444   000000 235003                    LDA     0,DU
         1 001445   000000 236003                    LDQ     0,DU
         1 001446   200116 757112                    STAQ    CURSOR+1,X2,AUTO

     1526     5520    2           XLATE$LOC.FLINK$ = ADDR(NIL);

   5520  1 001447   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001450   200114 756100                    STQ     NEW_LENGTH+1,,AUTO

     1527     5521    2           XLATE$LOC.N_ENTRIES# = 1;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:229  

   5521  1 001451   000001 221003                    LDX1    1,DU
         1 001452   200113 741100                    STX1    @RIGHT$+1,,AUTO

     1528     5522    2           XLATE$LOC.XLATES.NEW_KEY(0) = DEST_RANGE.ENDD.KEY(DEST_LEVEL-1);

   5522  1 001453   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 001454   000003 735000                    ALS     3
         1 001455   000100 100505                    MLR     fill='000'O
         1 001456   000007 000010                    ADSC9   7,A,PR0                  cn=0,n=8
         1 001457   200136 000010                    ADSC9   TABLE_INDEX+5,,AUTO      cn=0,n=8

     1529     5523    3           IF DEST_EXISTS OR PREVIOUS_SRC_EOR THEN DO;

   5523  1 001460   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 001461   001464 604000 1                  TMI     s:5528
         1 001462   200044 234100                    SZN     PREVIOUS_SRC_EOR,,AUTO
         1 001463   001474 605000 1                  TPL     s:5537

     1530     5524                   /*
     1531     5525                   The insert point existed before, or it doesn't matter
     1532     5526                   So DEST_RANGE.START will catch anything that matters.
     1533     5527                   */
     1534     5528    3              XLATE$LOC.XLATES.OLD_POS_LO#(0) = DEST_RANGE.START.POSITION#;

   5528  1 001464   000010 223100                    LDX3    8,,PR0
         1 001465   200135 743100                    STX3    TABLE_INDEX+4,,AUTO

     1535     5529    3              XLATE$LOC.XLATES.OLD_POS_HI#(0) = DEST_RANGE.START.POSITION#;

   5529  1 001466   000010 224100                    LDX4    8,,PR0
         1 001467   200135 444100                    SXL4    TABLE_INDEX+4,,AUTO

     1536     5530    3              XLATE$LOC.XLATES.OLD_KEY_LO(0) = DEST_RANGE.START.KEY(DEST_LEVEL-1);

   5530  1 001470   000100 100505                    MLR     fill='000'O
         1 001471   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:230  
         1 001472   200131 000010                    ADSC9   SRC_STREAM_KEY$+3,,AUTO  cn=0,n=8

     1537     5531    3              END;

   5531  1 001473   001477 710000 1                  TRA     s:5538

     1538     5532                /*
     1539     5533                * The insert started at a hole in the file, but ends by shifting
     1540     5534                * the next record some.  Make sure we adjust positions on that
     1541     5535                * record (e.g. "CO ST 'hole%Rindent' AF BO CURR")
     1542     5536                */
     1543     5537    2           ELSE XLATE$LOC.XLATES.OLD_KEY_LO(0) = XLATE$LOC.XLATES.NEW_KEY(0);

   5537  1 001474   200136 237100                    LDAQ    TABLE_INDEX+5,,AUTO
         1 001475   200131 755100                    STA     SRC_STREAM_KEY$+3,,AUTO
         1 001476   200132 756100                    STQ     TABLE_INDEX+1,,AUTO

     1544     5538    2           XLATE$LOC.XLATES.OLD_KEY_HI(0) = XLATE$LOC.XLATES.OLD_KEY_LO(0);

   5538  1 001477   000100 100500                    MLR     fill='000'O
         1 001500   200131 000010                    ADSC9   SRC_STREAM_KEY$+3,,AUTO  cn=0,n=8
         1 001501   200133 000010                    ADSC9   TABLE_INDEX+2,,AUTO      cn=0,n=8

     1545     5539    2           XLATE$LOC.XLATES.NEW_POS#(0) = DEST_RANGE.ENDD.POSITION#;

   5539  1 001502   000021 223100                    LDX3    17,,PR0
         1 001503   200140 743100                    STX3    TABLE_INDEX+7,,AUTO

     1546     5540    2           XLATE$LOC.XLATES.NEW_POS_INCR#(0) =

   5540  1 001504   000010 236100                    LDQ     8,,PR0
         1 001505   000022 732000                    QRS     18
         1 001506   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001507   000021 236100                    LDQ     17,,PR0
         1 001510   000022 732000                    QRS     18
         1 001511   200174 136100                    SBLQ    OPEN_OPTIONS+5,,AUTO
         1 001512   000000 624006                    EAX4    0,QL
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:231  
         1 001513   200140 444100                    SXL4    TABLE_INDEX+7,,AUTO

     1547     5541    2             DEST_RANGE.ENDD.POSITION# - DEST_RANGE.START.POSITION#;
     1548     5542    2           DEST_RANGE.ENDD.EOF = %TRUE; /* Dont let XLATE mess with it */

   5542  1 001514   400000 236007                    LDQ     -131072,DL
         1 001515   000021 256100                    ORSQ    17,,PR0

     1549     5543    2           DEST_RANGE.START.EOF = %TRUE; /* Dont let XLATE mess with it */

   5543  1 001516   000010 256100                    ORSQ    8,,PR0

     1550     5544    2           CALL VDG$XLATE_LOCATIONS (XLATE$LOC, %XLATE_LOCATION);

   5544  1 001517   000014 236000 2                  LDQ     12
         1 001520   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 001521   200112 633500                    EPPR3   XLATE$LOC,,AUTO
         1 001522   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 001523   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 001524   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001525   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         1 001526   000000 011000                    NOP     0

     1551     5545    2           DEST_RANGE.START.EOF = %FALSE; /* Restore to the correct value */

   5545  1 001527   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 001530   000010 236000 2                  LDQ     8
         1 001531   000010 356100                    ANSQ    8,,PR0

     1552     5546    2           DEST_RANGE.ENDD.EOF = %FALSE; /* Restore to the correct value */

   5546  1 001532   000021 356100                    ANSQ    17,,PR0

     1553     5547    2           RETURN;

   5547  1 001533   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001534   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:232  

   5546  1 001535                       OCLEAR_LOCA* null
   5546  1 001535                       OCOPY_LOCAT* null
     1554     5548
     1555     5549
     1556     5550
     1557     5551    2   OCLEAR_LOCATION_FAILED: ;
     1558     5552    2   OCOPY_LOCATION_FAILED: ;
     1559     5553    2           ALTRETURN;

   5553  1 001535   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001536   000000 702211                    TSX2  ! 0,X1

     1560     5554
     1561     5555    2   END SET_DEST_END;
     1562     5556
     1563     5557        %BOX (TITLE=CLEANUP, PAGE=YES);
              5565    2
              5569    2   /***************************************************************************
              5571    2    *                                                                         *
              5575    2            *                                  CLEANUP                               *
              5577    2            *                                                                        *
              5579    2          ***************************************************************************/

     1564     5583
     1565     5584        /*I* NAME: CLEANUP
     1566     5585            PARAMETERS:
     1567     5586                None.
     1568     5587            INPUT:
     1569     5588                The following auto structures may own objects:
     1570     5589                DEST_OPTIONS
     1571     5590                RECORD
     1572     5591                DEST_NEXT_KEY
     1573     5592                SRC_KEY_OF_RECORD
     1574     5593                LAST_COPIED_KEY
     1575     5594                LAST_WRITTEN_KEY
     1576     5595            OUTPUT:
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:233  
     1577     5596                Any objects owned by auto structures are freed.
     1578     5597            DESCRIPTION:
     1579     5598                Before leaving VDI$BINSERT for any non-fatal reason, CLEANUP should
     1580     5599                be called to free any objects we allocated for our temporary use.
     1581     5600        */
     1582     5601
     1583     5602    1   CLEANUP: PROC ALTRET;

   5602  1 001537   200110 741300       CLEANUP      STX1  ! ERR_SUBST$+2,,AUTO

     1584     5603
     1585     5604                %CLEARKEY (KEY=DEST_OPTIONS.KEY_INCR);

   5611  1 001540   200016 720100                    LXL0    DEST_OPTIONS+3,,AUTO
         1 001541   000002 100003                    CMPX0   2,DU
         1 001542   001552 601000 1                  TNZ     s:5612+2

   5611  1 001543   200017 630500                    EPPR0   DEST_OPTIONS+4,,AUTO
         1 001544   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001545   000000 701000 xent               TSX1    VDG$OFREE
         1 001546   001550 702000 1                  TSX2    s:5612
         1 001547   001552 710000 1                  TRA     s:5612+2

   5612  1 001550   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001551   000000 702211                    TSX2  ! 0,X1

   5612  1 001552   000000 235003                    LDA     0,DU
         1 001553   000000 236003                    LDQ     0,DU
         1 001554   200016 757100                    STAQ    DEST_OPTIONS+3,,AUTO

     1586     5614
     1587     5615                %CLEARKEY (KEY=RECORD.KEY);

   5622  1 001555   200025 720100                    LXL0    RECORD,,AUTO
         1 001556   000002 100003                    CMPX0   2,DU
         1 001557   001567 601000 1                  TNZ     s:5623+2

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:234  
   5622  1 001560   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 001561   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001562   000000 701000 xent               TSX1    VDG$OFREE
         1 001563   001565 702000 1                  TSX2    s:5623
         1 001564   001567 710000 1                  TRA     s:5623+2

   5623  1 001565   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001566   000000 702211                    TSX2  ! 0,X1

   5623  1 001567   200025 450100                    STZ     RECORD,,AUTO
         1 001570   200026 450100                    STZ     RECORD+1,,AUTO

     1588     5625                %CLEARSPEC (SPEC=RECORD.SPEC);

   5632  1 001571   200027 720100                    LXL0    RECORD+2,,AUTO
         1 001572   000002 100003                    CMPX0   2,DU
         1 001573   001603 601000 1                  TNZ     s:5633+2

   5632  1 001574   200030 630500                    EPPR0   RECORD+3,,AUTO
         1 001575   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001576   000000 701000 xent               TSX1    VDG$OFREE
         1 001577   001601 702000 1                  TSX2    s:5633
         1 001600   001603 710000 1                  TRA     s:5633+2

   5633  1 001601   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001602   000000 702211                    TSX2  ! 0,X1

   5633  1 001603   200027 450100                    STZ     RECORD+2,,AUTO
         1 001604   200030 450100                    STZ     RECORD+3,,AUTO

     1589     5635    3           IF RECORD.DATA$ ~= ADDR(NIL) THEN DO;

   5635  1 001605   200031 236100                    LDQ     RECORD+4,,AUTO
         1 001606   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001607   001617 600000 1                  TZE     s:5647

     1590     5636    3              CALL VDG$OFREE (RECORD$DATA)
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:235  

   5636  1 001610   200031 630500                    EPPR0   RECORD+4,,AUTO
         1 001611   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001612   000000 701000 xent               TSX1    VDG$OFREE
         1 001613   001615 702000 1                  TSX2    s:5637
         1 001614   001617 710000 1                  TRA     s:5647

     1591     5637    4              WHENALTRETURN DO; ALTRETURN; END;

   5637  1 001615   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001616   000000 702211                    TSX2  ! 0,X1

     1592     5638    3              END;

     1593     5639
     1594     5640                %CLEARKEY (KEY=DEST_NEXT_KEY);

   5647  1 001617   200034 720100                    LXL0    DEST_NEXT_KEY,,AUTO
         1 001620   000002 100003                    CMPX0   2,DU
         1 001621   001631 601000 1                  TNZ     s:5648+2

   5647  1 001622   200035 630500                    EPPR0   DEST_NEXT_KEY+1,,AUTO
         1 001623   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001624   000000 701000 xent               TSX1    VDG$OFREE
         1 001625   001627 702000 1                  TSX2    s:5648
         1 001626   001631 710000 1                  TRA     s:5648+2

   5648  1 001627   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001630   000000 702211                    TSX2  ! 0,X1

   5648  1 001631   000000 235003                    LDA     0,DU
         1 001632   000000 236003                    LDQ     0,DU
         1 001633   200034 757100                    STAQ    DEST_NEXT_KEY,,AUTO

     1595     5650                %CLEARKEY (KEY=SRC_KEY_OF_RECORD);

   5657  1 001634   200054 720100                    LXL0    SRC_KEY_OF_RECORD,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:236  
         1 001635   000002 100003                    CMPX0   2,DU
         1 001636   001646 601000 1                  TNZ     s:5658+2

   5657  1 001637   200055 630500                    EPPR0   SRC_KEY_OF_RECORD+1,,AUTO
         1 001640   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001641   000000 701000 xent               TSX1    VDG$OFREE
         1 001642   001644 702000 1                  TSX2    s:5658
         1 001643   001646 710000 1                  TRA     s:5658+2

   5658  1 001644   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001645   000000 702211                    TSX2  ! 0,X1

   5658  1 001646   000000 235003                    LDA     0,DU
         1 001647   000000 236003                    LDQ     0,DU
         1 001650   200054 757100                    STAQ    SRC_KEY_OF_RECORD,,AUTO

     1596     5660                %CLEARKEY (KEY=LAST_COPIED_KEY);

   5667  1 001651   200056 720100                    LXL0    LAST_COPIED_KEY,,AUTO
         1 001652   000002 100003                    CMPX0   2,DU
         1 001653   001663 601000 1                  TNZ     s:5668+2

   5667  1 001654   200057 630500                    EPPR0   LAST_COPIED_KEY+1,,AUTO
         1 001655   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001656   000000 701000 xent               TSX1    VDG$OFREE
         1 001657   001661 702000 1                  TSX2    s:5668
         1 001660   001663 710000 1                  TRA     s:5668+2

   5668  1 001661   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001662   000000 702211                    TSX2  ! 0,X1

   5668  1 001663   000000 235003                    LDA     0,DU
         1 001664   000000 236003                    LDQ     0,DU
         1 001665   200056 757100                    STAQ    LAST_COPIED_KEY,,AUTO

     1597     5670                %CLEARKEY (KEY=LAST_WRITTEN_KEY);

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:237  
   5677  1 001666   200060 720100                    LXL0    LAST_WRITTEN_KEY,,AUTO
         1 001667   000002 100003                    CMPX0   2,DU
         1 001670   001700 601000 1                  TNZ     s:5678+2

   5677  1 001671   200061 630500                    EPPR0   LAST_WRITTEN_KEY+1,,AUTO
         1 001672   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001673   000000 701000 xent               TSX1    VDG$OFREE
         1 001674   001676 702000 1                  TSX2    s:5678
         1 001675   001700 710000 1                  TRA     s:5678+2

   5678  1 001676   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001677   000000 702211                    TSX2  ! 0,X1

   5678  1 001700   000000 235003                    LDA     0,DU
         1 001701   000000 236003                    LDQ     0,DU
         1 001702   200060 757100                    STAQ    LAST_WRITTEN_KEY,,AUTO

     1598     5680
     1599     5681    2           RETURN;

   5681  1 001703   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 001704   000001 702211                    TSX2  ! 1,X1

     1600     5682
     1601     5683    2   END CLEANUP;
     1602     5684
     1603     5685        %BOX (TITLE=ADJUST_INCREMENT, PAGE=YES);
              5693    2
              5697    2   /***************************************************************************
              5699    2    *                                                                         *
              5703    2            *                              ADJUST_INCREMENT                          *
              5705    2            *                                                                        *
              5707    2          ***************************************************************************/

     1604     5711
     1605     5712        /*I* NAME: ADJUST_INCREMENT
     1606     5713            PARAMETER:
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:238  
     1607     5714                INCR - VD$KEY containing the default increment for this block
     1608     5715                    expression; must be type %KT_EDITKEY.
     1609     5716                    %CLEAR if no default for this expression.
     1610     5717            INPUT:
     1611     5718                DEST_NEXT_KEY - Key of the existing record following the location we'll
     1612     5719                    start inserting at.  If we're inserting at EOF, DEST_NEXT_KEY
     1613     5720                    should contain MAX_EDITKEY; it should never be %CLEAR.
     1614     5721                RECORD.KEY - Key at which we'll start writing records to the
     1615     5722                    destination.
     1616     5723                SRC_RANGE - Range of the source block.
     1617     5724                SRC_STREAM - VD$STREAM open to the source block.
     1618     5725            OUTPUT:
     1619     5726                INCR will contain the key increment to use when generating record keys
     1620     5727                    for writing to the destination.  If INCR = %CLEAR, we couldn't
     1621     5728                    find an increment which would work; either the destination will
     1622     5729                    have to be rekeyed, or we'll get a cutoff error if we try to do
     1623     5730                    the insertion anyway (with some other increment).
     1624     5731                DEST_KEY_SPACE will contain the maximum number of keys which could be
     1625     5732                    generated between RECORD.KEY and DEST_NEXT_KEY (using an increment
     1626     5733                    of .001).  This information is needed by VDI$BAUTO_REKEY.
     1627     5734                SRC_STREAM has been repositioned.
     1628     5735            DESCRIPTION:
     1629     5736                (AF 1021B also discusses this algorthm.)
     1630     5737                Calculate DEST_KEY_SPACE.
     1631     5738                If INCR is %CLEAR, set it to the default key increment, from $BY.
     1632     5739                Determine if INCR will allow at least one record to be copied; that is,
     1633     5740                    is INCR < DEST_KEY_SPACE?  If not, then adjust INCR downward to
     1634     5741                    the number less than DEST_KEY_SPACE whose first non-0 digit is
     1635     5742                    1, 2, or 5, with all other digits being 0; e.g:
     1636     5743
     1637     5744                        If DEST_KEY_SPACE is:   then change INCR to:
     1638     5745                        ---------------------   --------------------
     1639     5746                          17.0                    10.0
     1640     5747                           1.2                     1.0
     1641     5748                            .030                    .020
     1642     5749                            .020                    .010
     1643     5750                            .010                    .005
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:239  
     1644     5751                            etc.                    etc.
     1645     5752
     1646     5753                Loop until either INCR "fits" or we "give up":
     1647     5754                    A.  Compute the max number of records we can fit using INCR; this
     1648     5755                            is:  DEST_KEY_SPACE / INCR.
     1649     5756                    B.  Read forward from SRC_RANGE.START the number of records
     1650     5757                            computed in step A.
     1651     5758
     1652     5759                        If the resulting record key is beyond SRC_RANGE.ENDD, then
     1653     5760                            this value of INCR "fits":  exit the loop.
     1654     5761
     1655     5762                        If the resulting record key is not beyond SRC_RANGE.ENDD:
     1656     5763                                adjust INCR downward to the next lower number whose
     1657     5764                                first non-0 digit is 1, 2, or 5, with all other digits
     1658     5765                                being 0.
     1659     5766                                If that yields 0, then "give up":  we can't find a
     1660     5767                                key increment that will work.
     1661     5768                            Loop back to step A above, using the new value for INCR.
     1662     5769        */
     1663     5770
     1664     5771    1   ADJUST_INCREMENT: PROC (INCR) ALTRET;

   5771  1 001705   200110 741300       ADJUST_INCR* STX1  ! ERR_SUBST$+2,,AUTO

     1665     5772
     1666     5773        %VD$KEY_NUMBER (NAME=INCR, STCLASS=PARAM);
     1667     5788        %VD$NODE_DESC (NAME=LAST_SRC_RECORD, STCLASS=AUTO);
     1668     5830
     1669     5831
     1670     5832    2   DCL DEST_NEXT_KEY$ PTR;
     1671     5833    2   DCL RECORD_KEY$ PTR;
     1672     5834    2   DCL SRC_START_KEY$ PTR;
     1673     5835    2   DCL SRC_END_KEY$ PTR;
     1674     5836    2   DCL INCREMENT SBIN;
     1675     5837    2   DCL MAX_RECS_CAN_FIT SBIN;
     1676     5838    2   DCL SRC_STREAM_KEY$ PTR;
     1677     5839
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:240  
     1678     5840
     1679     5841        %VD$TEXTC_NUMBER (NAME=DEST$NEXT_KEY, STCLASS="BASED(DEST_NEXT_KEY$)");
     1680     5855        %VD$TEXTC_NUMBER (NAME=RECORD$KEY, STCLASS="BASED(RECORD_KEY$)");
     1681     5869        %VD$TEXTC (NAME=SRC$START_KEY, STCLASS="BASED(SRC_START_KEY$)");
     1682     5892        %VD$TEXTC (NAME=SRC$END_KEY, STCLASS="BASED(SRC_END_KEY$)");
     1683     5915        %VD$TEXTC (NAME=SRC$STREAM_KEY, STCLASS="BASED(SRC_STREAM_KEY$)");
     1684     5938
     1685     5939
     1686     5940
     1687     5941    3           IF INCR = %CLEAR THEN DO;

   5941  1 001706   200111 470500                    LDP0    @INCR,,AUTO
         1 001707   000000 106500                    CMPC    fill='000'O
         1 001710   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         1 001711   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 001712   001730 601000 1                  TNZ     s:5957

     1688     5942                   /* User gave no increment for this block expression */
     1689     5943    3              INCR.TYPE# = %KT_EDITKEY;

   5943  1 001713   000003 220003                    LDX0    3,DU
         1 001714   000000 740100                    STX0    0,,PR0

     1690     5944    3              INCR.REP# = %REP_LOCAL;

   5944  1 001715   000001 221003                    LDX1    1,DU
         1 001716   000000 441100                    SXL1    0,,PR0

     1691     5945    3              INCR.LENGTH# = %NB_NUMERIC_KEY;

   5945  1 001717   003000 236003                    LDQ     1536,DU
         1 001720   000001 552140                    STBQ    1,'40'O,PR0

     1692     5946    3              IF VD_$BY.V# ~= 0 THEN INCR.BYTES# = VD_$BY.V#;

   5946  1 001721   000003 235000 xsym               LDA     VD_$BY+3
         1 001722   001726 600000 1                  TZE     s:5947
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:241  

   5946  1 001723   000003 236000 xsym               LDQ     VD_$BY+3
         1 001724   000001 552134                    STBQ    1,'34'O,PR0
         1 001725   001730 710000 1                  TRA     s:5957

     1693     5947    3              ELSE INCR.BYTES# = %DFLT_$BY;

   5947  1 001726   023420 236007                    LDQ     10000,DL
         1 001727   000001 552134                    STBQ    1,'34'O,PR0

     1694     5948    3              END;

     1695     5949
     1696     5950                %GETKEY (KEY=RECORD.KEY, PTR=RECORD_KEY$);

   5957  1 001730   200025 720100                    LXL0    RECORD,,AUTO
         1 001731   000002 100003                    CMPX0   2,DU
         1 001732   001737 601000 1                  TNZ     s:5957+7

   5957  1 001733   200026 236100                    LDQ     RECORD+1,,AUTO
         1 001734   000002 036003                    ADLQ    2,DU
         1 001735   200121 756100                    STQ     RECORD_KEY$,,AUTO
         1 001736   001741 710000 1                  TRA     s:5963

   5957  1 001737   200026 631500                    EPPR1   RECORD+1,,AUTO
         1 001740   200121 451500                    STP1    RECORD_KEY$,,AUTO

     1697     5960
     1698     5961                /* Don't generate a key of 0.000 unless we need to.  */
     1699     5962
     1700     5963    2           IF (RECORD$KEY.BYTES# = %MN_EDITKEY) AND NOT (DEST_EXISTS) THEN

   5963  1 001741   200121 471500                    LDP1    RECORD_KEY$,,AUTO
         1 001742   100000 236100                    LDQ     0,,PR1
         1 001743   000032 316000 xsym               CANQ    B_VECTNIL+26
         1 001744   001751 601000 1                  TNZ     s:5972
         1 001745   200037 234100                    SZN     DEST_EXISTS,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:242  
         1 001746   001751 604000 1                  TMI     s:5972

     1701     5964    2              GENERATE_KEY = %SQ_NEXT;

   5964  1 001747   000003 235007                    LDA     3,DL
         1 001750   200042 755100                    STA     GENERATE_KEY,,AUTO

     1702     5965                %GETKEY (KEY=DEST_NEXT_KEY, PTR=DEST_NEXT_KEY$);

   5972  1 001751   200034 721100                    LXL1    DEST_NEXT_KEY,,AUTO
         1 001752   000002 101003                    CMPX1   2,DU
         1 001753   001760 601000 1                  TNZ     s:5972+7

   5972  1 001754   200035 236100                    LDQ     DEST_NEXT_KEY+1,,AUTO
         1 001755   000002 036003                    ADLQ    2,DU
         1 001756   200120 756100                    STQ     DEST_NEXT_KEY$,,AUTO
         1 001757   001762 710000 1                  TRA     s:5975

   5972  1 001760   200035 633500                    EPPR3   DEST_NEXT_KEY+1,,AUTO
         1 001761   200120 453500                    STP3    DEST_NEXT_KEY$,,AUTO

     1703     5975    2           DEST_KEY_SPACE = DEST$NEXT_KEY.BYTES# - RECORD$KEY.BYTES#;

   5975  1 001762   100000 236100                    LDQ     0,,PR1
         1 001763   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 001764   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 001765   200120 473500                    LDP3    DEST_NEXT_KEY$,,AUTO
         1 001766   300000 236100                    LDQ     0,,PR3
         1 001767   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 001770   200174 136100                    SBLQ    OPEN_OPTIONS+5,,AUTO
         1 001771   200041 756100                    STQ     DEST_KEY_SPACE,,AUTO

     1704     5976    2           IF GENERATE_KEY = %SQ_NEXT THEN

   5976  1 001772   200042 235100                    LDA     GENERATE_KEY,,AUTO
         1 001773   000003 115007                    CMPA    3,DL
         1 001774   001777 601000 1                  TNZ     s:5978
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:243  

     1705     5977    2              DEST_KEY_SPACE = DEST_KEY_SPACE - 1;

   5977  1 001775   000001 336007                    LCQ     1,DL
         1 001776   200041 056100                    ASQ     DEST_KEY_SPACE,,AUTO

     1706     5978    2           IF DEST_EXISTS AND DEST_RIGHT$ ~= ADDR(NIL) THEN

   5978  1 001777   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 002000   002006 605000 1                  TPL     s:5981
         1 002001   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
         1 002002   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 002003   002006 600000 1                  TZE     s:5981

     1707     5979    2              DEST_KEY_SPACE = DEST_KEY_SPACE - 1;

   5979  1 002004   000001 336007                    LCQ     1,DL
         1 002005   200041 056100                    ASQ     DEST_KEY_SPACE,,AUTO

     1708     5980
     1709     5981    2           IF SRC_RANGE.START.EOF THEN

   5981  1 002006   200003 474500                    LDP4    @SRC_RANGE,,AUTO
         1 002007   400010 236100                    LDQ     8,,PR4
         1 002010   400000 316007                    CANQ    -131072,DL
         1 002011   002014 600000 1                  TZE     s:5991

     1710     5982    2              RETURN;  /* Any increment will do */

   5982  1 002012   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002013   000001 702211                    TSX2  ! 1,X1

     1711     5983
     1712     5984                %GETKEY (KEY=SRC_RANGE.START.KEY, INDX=SRC_LEVEL-1, PTR=SRC_START_KEY$);

   5991  1 002014   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 002015   000001 735000                    ALS     1
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:244  
         1 002016   477776 722105                    LXL2    -2,AL,PR4
         1 002017   000002 102003                    CMPX2   2,DU
         1 002020   002025 601000 1                  TNZ     s:5991+9

   5991  1 002021   477777 475505                    LDP5    -1,AL,PR4
         1 002022   500002 636500                    EPPR6   2,,PR5
         1 002023   200122 456500                    STP6    SRC_START_KEY$,,AUTO
         1 002024   002032 710000 1                  TRA     s:6001

   5991  1 002025   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 002026   000023 736000                    QLS     19
         1 002027   000001 136003                    SBLQ    1,DU
         1 002030   200003 036100                    ADLQ    @SRC_RANGE,,AUTO
         1 002031   200122 756100                    STQ     SRC_START_KEY$,,AUTO

     1713     5994                %GETKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1, PTR=SRC_END_KEY$);

   6001  1 002032   400007 723105                    LXL3    7,AL,PR4
         1 002033   000002 103003                    CMPX3   2,DU
         1 002034   002041 601000 1                  TNZ     s:6001+7

   6001  1 002035   400010 475505                    LDP5    8,AL,PR4
         1 002036   500002 636500                    EPPR6   2,,PR5
         1 002037   200123 456500                    STP6    SRC_END_KEY$,,AUTO
         1 002040   002046 710000 1                  TRA     s:6004

   6001  1 002041   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 002042   000023 736000                    QLS     19
         1 002043   000010 036003                    ADLQ    8,DU
         1 002044   200003 036100                    ADLQ    @SRC_RANGE,,AUTO
         1 002045   200123 756100                    STQ     SRC_END_KEY$,,AUTO

     1714     6004    2           IF SRC_RANGE.ENDD.EOF THEN

   6004  1 002046   400021 236100                    LDQ     17,,PR4
         1 002047   400000 316007                    CANQ    -131072,DL
         1 002050   002053 600000 1                  TZE     s:6007
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:245  

     1715     6005    2              SRC_END_KEY$ = ADDR(VD_KEY_MX_EDITKEY.LENGTH#);

   6005  1 002051   000015 236000 2                  LDQ     13
         1 002052   200123 756100                    STQ     SRC_END_KEY$,,AUTO

     1716     6006
     1717     6007    2           IF SRC$START_KEY.BYTES >= SRC$END_KEY.BYTES THEN

   6007  1 002053   200122 475500                    LDP5    SRC_START_KEY$,,AUTO
         1 002054   500000 236100                    LDQ     0,,PR5
         1 002055   000033 772000                    QRL     27
         1 002056   200123 476500                    LDP6    SRC_END_KEY$,,AUTO
         1 002057   000000 624006                    EAX4    0,QL
         1 002060   600000 236100                    LDQ     0,,PR6
         1 002061   000033 772000                    QRL     27
         1 002062   000000 625006                    EAX5    0,QL
         1 002063   040140 106540                    CMPC    fill='040'O
         1 002064   500000 200014                    ADSC9   0,,PR5                   cn=1,n=*X4
         1 002065   600000 200015                    ADSC9   0,,PR6                   cn=1,n=*X5
         1 002066   002073 602000 1                  TNC     s:6017

     1718     6008    2              IF NOT OUTSIDE_SRC_RANGE THEN

   6008  1 002067   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 002070   002073 604000 1                  TMI     s:6017

     1719     6009    2                 RETURN; /* Any increment will do */

   6009  1 002071   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002072   000001 702211                    TSX2  ! 1,X1

     1720     6010
     1721     6011                /*
     1722     6012                *   Source block includes at least 1 EOR; we'll have to do at least 1
     1723     6013                *       insertion.
     1724     6014                */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:246  
     1725     6015
     1726     6016
     1727     6017    2           INCREMENT = INCR.BYTES#;    /* Make word for better performance */

   6017  1 002073   000001 236100                    LDQ     1,,PR0
         1 002074   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 002075   200124 756100                    STQ     INCREMENT,,AUTO

     1728     6018
     1729     6019    3           IF INCREMENT >= DEST_KEY_SPACE THEN DO;

   6019  1 002076   200041 116100                    CMPQ    DEST_KEY_SPACE,,AUTO
         1 002077   002105 604000 1                  TMI     s:6024

     1730     6020    3              INCREMENT = DEST_KEY_SPACE + 1;  /* Initial value */

   6020  1 002100   200041 235100                    LDA     DEST_KEY_SPACE,,AUTO
         1 002101   000001 035007                    ADLA    1,DL
         1 002102   200124 755100                    STA     INCREMENT,,AUTO

     1731     6021    3              CALL NEXT_LOWER_INCR;

   6021  1 002103   002333 701000 1                  TSX1    NEXT_LOWER_INCR
         1 002104   000000 011000                    NOP     0

     1732     6022    3              END;

     1733     6023
     1734     6024    2           MAX_RECS_CAN_FIT = 1;

   6024  1 002105   000001 235007                    LDA     1,DL
         1 002106   200125 755100                    STA     MAX_RECS_CAN_FIT,,AUTO

     1735     6025    2           SRC_STREAM_KEY$ = SRC_START_KEY$;

   6025  1 002107   200122 236100                    LDQ     SRC_START_KEY$,,AUTO
         1 002110   200126 756100                    STQ     SRC_STREAM_KEY$,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:247  

     1736     6026
     1737     6027    2           IF NOT OUTSIDE_SRC_RANGE THEN

   6027  1 002111   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 002112   002175 604000 1                  TMI     s:6054

     1738     6028    2   LOOP:
     1739     6029    3           DO WHILE INCREMENT > 0;

   6029  1 002113   200124 235100       LOOP         LDA     INCREMENT,,AUTO
         1 002114   002175 604400 1                  TMOZ    s:6054

     1740     6030
     1741     6031    3              MAX_RECS_CAN_FIT = DEST_KEY_SPACE / INCREMENT;

   6031  1 002115   200041 236100                    LDQ     DEST_KEY_SPACE,,AUTO
         1 002116   200124 506100                    DIV     INCREMENT,,AUTO
         1 002117   200125 756100                    STQ     MAX_RECS_CAN_FIT,,AUTO

     1742     6032    3              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, MAX_RECS_CAN_FIT,

   6032  1 002120   000000 236000 2                  LDQ     0
         1 002121   200177 756100                    STQ     OPEN_OPTIONS+8,,AUTO
         1 002122   200125 630500                    EPPR0   MAX_RECS_CAN_FIT,,AUTO
         1 002123   200176 450500                    STP0    OPEN_OPTIONS+7,,AUTO
         1 002124   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 002125   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 002126   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002127   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002130   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 002131   000000 701000 xent               TSX1    VDA$LREAD
         1 002132   002331 702000 1                  TSX2    LREAD_FAILED

     1743     6033    3                %DONT_READ_RECORD) ALTRET (LREAD_FAILED);
     1744     6034    3              IF SRC_STREAM.CURRENT.EOF THEN

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:248  
   6034  1 002133   200004 470500                    LDP0    @SRC_STREAM,,AUTO
         1 002134   000016 236100                    LDQ     14,,PR0
         1 002135   400000 316007                    CANQ    -131072,DL
         1 002136   002175 601000 1                  TNZ     s:6054

     1745     6035    3                 EXIT LOOP; /* Hit EOF:  INCREMENT fits ok */
     1746     6036                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     1747     6037                   PTR=SRC_STREAM_KEY$);

   6044  1 002137   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 002140   000001 735000                    ALS     1
         1 002141   000004 720105                    LXL0    4,AL,PR0
         1 002142   000002 100003                    CMPX0   2,DU
         1 002143   002150 601000 1                  TNZ     s:6044+9

   6044  1 002144   000005 471505                    LDP1    5,AL,PR0
         1 002145   100002 633500                    EPPR3   2,,PR1
         1 002146   200126 453500                    STP3    SRC_STREAM_KEY$,,AUTO
         1 002147   002155 710000 1                  TRA     s:6048

   6044  1 002150   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 002151   000023 736000                    QLS     19
         1 002152   000005 036003                    ADLQ    5,DU
         1 002153   200004 036100                    ADLQ    @SRC_STREAM,,AUTO
         1 002154   200126 756100                    STQ     SRC_STREAM_KEY$,,AUTO

     1748     6047
     1749     6048    3              IF (SRC$STREAM_KEY.BYTES >= SRC$END_KEY.BYTES) THEN

   6048  1 002155   200126 471500                    LDP1    SRC_STREAM_KEY$,,AUTO
         1 002156   100000 236100                    LDQ     0,,PR1
         1 002157   000033 772000                    QRL     27
         1 002160   200123 473500                    LDP3    SRC_END_KEY$,,AUTO
         1 002161   000000 621006                    EAX1    0,QL
         1 002162   300000 236100                    LDQ     0,,PR3
         1 002163   000033 772000                    QRL     27
         1 002164   000000 622006                    EAX2    0,QL
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:249  
         1 002165   040140 106540                    CMPC    fill='040'O
         1 002166   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         1 002167   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 002170   002175 603000 1                  TRC     s:6054

     1750     6049    3                 EXIT LOOP;    /* Current INCR fits all recs from source */
     1751     6050    3              CALL NEXT_LOWER_INCR;

   6050  1 002171   002333 701000 1                  TSX1    NEXT_LOWER_INCR
         1 002172   000000 011000                    NOP     0

     1752     6051    3              END LOOP;

   6051  1 002173   200124 235100                    LDA     INCREMENT,,AUTO
         1 002174   002115 605400 1                  TPNZ    s:6031

     1753     6052
     1754     6053                /* If INCREMENT <= 0, we failed to find an increment */
     1755     6054    3           IF INCREMENT > 0 THEN DO;

   6054  1 002175   200124 235100                    LDA     INCREMENT,,AUTO
         1 002176   002204 604400 1                  TMOZ    s:6062

     1756     6055                   /* Return INCREMENT in INCR */
     1757     6056    3              INCR.BYTES# = INCREMENT;

   6056  1 002177   200111 470500                    LDP0    @INCR,,AUTO
         1 002200   200124 236100                    LDQ     INCREMENT,,AUTO
         1 002201   000001 552134                    STBQ    1,'34'O,PR0

     1758     6057    3              RETURN;

   6057  1 002202   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002203   000001 702211                    TSX2  ! 1,X1

     1759     6058    3              END;
     1760     6059
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:250  
     1761     6060                /* Just to make rekey's job easier, count the source records */
     1762     6061
     1763     6062    2           INCREMENT = MAXIMUM (MAX_RECS_CAN_FIT,4);

   6062  1 002204   000004 236007                    LDQ     4,DL
         1 002205   002211 604000 1                  TMI     s:6062+5
         1 002206   200125 116100                    CMPQ    MAX_RECS_CAN_FIT,,AUTO
         1 002207   002211 605000 1                  TPL     s:6062+5
         1 002210   200125 236100                    LDQ     MAX_RECS_CAN_FIT,,AUTO
         1 002211   200124 756100                    STQ     INCREMENT,,AUTO

     1764     6063    2           IF NOT OUTSIDE_SRC_RANGE THEN

   6063  1 002212   200010 234100                    SZN     OUTSIDE_SRC_RANGE,,AUTO
         1 002213   002322 604000 1                  TMI     s:6100

     1765     6064    2   COUNT_LOOP:
     1766     6065    3           DO %FOREVER;

   6065  1 002214                       COUNT_LOOP   null
     1767     6066    3              IF SRC_STREAM.CURRENT.EOF

   6066  1 002214   200004 470500                    LDP0    @SRC_STREAM,,AUTO
         1 002215   000016 236100                    LDQ     14,,PR0
         1 002216   400000 316007                    CANQ    -131072,DL
         1 002217   002234 601000 1                  TNZ     s:6068
         1 002220   200126 471500                    LDP1    SRC_STREAM_KEY$,,AUTO
         1 002221   100000 236100                    LDQ     0,,PR1
         1 002222   000033 772000                    QRL     27
         1 002223   200123 473500                    LDP3    SRC_END_KEY$,,AUTO
         1 002224   000000 620006                    EAX0    0,QL
         1 002225   300000 236100                    LDQ     0,,PR3
         1 002226   000033 772000                    QRL     27
         1 002227   000000 621006                    EAX1    0,QL
         1 002230   040140 106540                    CMPC    fill='040'O
         1 002231   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 002232   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:251  
         1 002233   002253 603000 1                  TRC     s:6075

     1768     6067    4                OR SRC$STREAM_KEY.BYTES > SRC$END_KEY.BYTES THEN DO;

     1769     6068    4                 IF INCREMENT >= MAX_RECS_CAN_FIT THEN

   6068  1 002234   200124 236100                    LDQ     INCREMENT,,AUTO
         1 002235   200125 116100                    CMPQ    MAX_RECS_CAN_FIT,,AUTO
         1 002236   002242 604000 1                  TMI     s:6070

     1770     6069    4                    INCREMENT = (INCREMENT + 1) / 2;

   6069  1 002237   000001 036007                    ADLQ    1,DL
         1 002240   000002 506007                    DIV     2,DL
         1 002241   200124 756100                    STQ     INCREMENT,,AUTO

     1771     6070    4                 IF INCREMENT = 1 THEN EXIT COUNT_LOOP;

   6070  1 002242   000001 116007                    CMPQ    1,DL
         1 002243   002322 600000 1                  TZE     s:6100

     1772     6071    4                 INCREMENT = (INCREMENT + 1) / 2;

   6071  1 002244   000001 036007                    ADLQ    1,DL
         1 002245   000002 506007                    DIV     2,DL
         1 002246   200124 756100                    STQ     INCREMENT,,AUTO

     1773     6072    4                 MAX_RECS_CAN_FIT = MAX_RECS_CAN_FIT - INCREMENT;

   6072  1 002247   200125 236100                    LDQ     MAX_RECS_CAN_FIT,,AUTO
         1 002250   200124 136100                    SBLQ    INCREMENT,,AUTO
         1 002251   200125 756100                    STQ     MAX_RECS_CAN_FIT,,AUTO

     1774     6073    4                 END;

   6073  1 002252   002267 710000 1                  TRA     s:6085

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:252  
     1775     6074    4              ELSE DO;

     1776     6075    5                 IF INCREMENT >= MAX_RECS_CAN_FIT THEN DO;

   6075  1 002253   200124 236100                    LDQ     INCREMENT,,AUTO
         1 002254   200125 116100                    CMPQ    MAX_RECS_CAN_FIT,,AUTO
         1 002255   002262 604000 1                  TMI     s:6080

     1777     6076    5                    INCREMENT = MAX_RECS_CAN_FIT + INCREMENT;

   6076  1 002256   200125 036100                    ADLQ    MAX_RECS_CAN_FIT,,AUTO
         1 002257   200124 756100                    STQ     INCREMENT,,AUTO

     1778     6077    5                    MAX_RECS_CAN_FIT = INCREMENT;

   6077  1 002260   200125 756100                    STQ     MAX_RECS_CAN_FIT,,AUTO

     1779     6078    5                    END;

   6078  1 002261   002267 710000 1                  TRA     s:6085

     1780     6079    5                 ELSE DO;

     1781     6080    5                    INCREMENT = (INCREMENT + 1) / 2;

   6080  1 002262   000001 036007                    ADLQ    1,DL
         1 002263   000002 506007                    DIV     2,DL
         1 002264   200124 756100                    STQ     INCREMENT,,AUTO

     1782     6081    5                    MAX_RECS_CAN_FIT = MAX_RECS_CAN_FIT + INCREMENT;

   6081  1 002265   200125 036100                    ADLQ    MAX_RECS_CAN_FIT,,AUTO
         1 002266   200125 756100                    STQ     MAX_RECS_CAN_FIT,,AUTO

     1783     6082    5                    END;

     1784     6083    4                 END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:253  

     1785     6084
     1786     6085    3              CALL VDA$LREAD (SRC_STREAM, SRC_RANGE.START, MAX_RECS_CAN_FIT,

   6085  1 002267   000000 236000 2                  LDQ     0
         1 002270   200177 756100                    STQ     OPEN_OPTIONS+8,,AUTO
         1 002271   200125 631500                    EPPR1   MAX_RECS_CAN_FIT,,AUTO
         1 002272   200176 451500                    STP1    OPEN_OPTIONS+7,,AUTO
         1 002273   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 002274   200004 235100                    LDA     @SRC_STREAM,,AUTO
         1 002275   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002276   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002277   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 002300   000000 701000 xent               TSX1    VDA$LREAD
         1 002301   002331 702000 1                  TSX2    LREAD_FAILED

     1787     6086    3                %DONT_READ_RECORD) ALTRET (LREAD_FAILED);
     1788     6087                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     1789     6088                   PTR=SRC_STREAM_KEY$);

   6095  1 002302   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 002303   000001 735000                    ALS     1
         1 002304   200004 470500                    LDP0    @SRC_STREAM,,AUTO
         1 002305   000004 720105                    LXL0    4,AL,PR0
         1 002306   000002 100003                    CMPX0   2,DU
         1 002307   002314 601000 1                  TNZ     s:6095+10

   6095  1 002310   000005 471505                    LDP1    5,AL,PR0
         1 002311   100002 633500                    EPPR3   2,,PR1
         1 002312   200126 453500                    STP3    SRC_STREAM_KEY$,,AUTO
         1 002313   002214 710000 1                  TRA     COUNT_LOOP

   6095  1 002314   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 002315   000023 736000                    QLS     19
         1 002316   000005 036003                    ADLQ    5,DU
         1 002317   200004 036100                    ADLQ    @SRC_STREAM,,AUTO
         1 002320   200126 756100                    STQ     SRC_STREAM_KEY$,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:254  

     1790     6098    3              END COUNT_LOOP;

   6098  1 002321   002214 710000 1                  TRA     COUNT_LOOP

     1791     6099
     1792     6100    2           INCR.TYPE# = 0;

   6100  1 002322   000000 220003                    LDX0    0,DU
         1 002323   200111 470500                    LDP0    @INCR,,AUTO
         1 002324   000000 740100                    STX0    0,,PR0

     1793     6101    2           DEST_KEY_SPACE = MAX_RECS_CAN_FIT;

   6101  1 002325   200125 235100                    LDA     MAX_RECS_CAN_FIT,,AUTO
         1 002326   200041 755100                    STA     DEST_KEY_SPACE,,AUTO

     1794     6102    2           RETURN;

   6102  1 002327   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002330   000001 702211                    TSX2  ! 1,X1

   6101  1 002331                       LREAD_FAILED null
   6101  1 002331                       RGET_FAILED  null
     1795     6103
     1796     6104
     1797     6105    2   LREAD_FAILED: ;
     1798     6106    2   RGET_FAILED: ;
     1799     6107    2           ALTRETURN;

   6107  1 002331   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002332   000000 702211                    TSX2  ! 0,X1

     1800     6108
     1801     6109        %BOX (TITLE=NEXT_LOWER_INCR);

              6121    2   /***************************************************************************
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:255  
              6123    2    *                                                                         *
              6127    2            *                              NEXT_LOWER_INCR                           *
              6129    2            *                                                                        *
              6131    2          ***************************************************************************/

     1802     6135
     1803     6136        /*I** NAME: NEXT_LOWER_INCR
     1804     6137            PARAMETERS:
     1805     6138            INPUT:
     1806     6139            OUTPUT:
     1807     6140                INCREMENT will be changed; it will contain the next lower number which
     1808     6141                    ends in 0, 1, 2, or 5.  If INCR is initially <= 0 or then
     1809     6142                    next lower number is <= 0, INCR will be returned containing 0.
     1810     6143            DESCRIPTION:
     1811     6144                Look up the next lower 1/2/5 increment in a table, and return it.
     1812     6145        */
     1813     6146
     1814     6147    2   NEXT_LOWER_INCR: PROC;

   6147  1 002333   200130 741300       NEXT_LOWER_* STX1  ! SRC_STREAM_KEY$+2,,AUTO

     1815     6148
     1816     6149
     1817     6150    3   DCL INCR_521_TABLE (0:25) SBIN CONSTANT
     1818     6151    3       INIT (100000000,
     1819     6152    3           50000000, 20000000, 10000000,   5000000, 2000000, 1000000,
     1820     6153    3           500000, 200000, 100000,         50000, 20000, 10000,
     1821     6154    3           5000, 2000, 1000,               500, 200, 100,
     1822     6155    3           50, 20, 10,                     5, 2, 1,
     1823     6156    3           0);
     1824     6157
     1825     6158    3   DCL TABLE_INDEX SBIN;
     1826     6159
     1827     6160
     1828     6161    4           DO TABLE_INDEX = 0 TO 24;

   6161  1 002334   200131 450100                    STZ     TABLE_INDEX,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:256  

     1829     6162    4              IF INCREMENT > INCR_521_TABLE (TABLE_INDEX) THEN EXIT;

   6162  1 002335   200131 720100                    LXL0    TABLE_INDEX,,AUTO
         1 002336   200124 236100                    LDQ     INCREMENT,,AUTO
         1 002337   000000 116010 0                  CMPQ    INCR_521_TABLE,X0
         1 002340   002345 605400 1                  TPNZ    s:6165

     1830     6163    4              END;

   6163  1 002341   200131 054100                    AOS     TABLE_INDEX,,AUTO
         1 002342   200131 235100                    LDA     TABLE_INDEX,,AUTO
         1 002343   000030 115007                    CMPA    24,DL
         1 002344   002335 604400 1                  TMOZ    s:6162

     1831     6164
     1832     6165    3           INCREMENT = INCR_521_TABLE (TABLE_INDEX);

   6165  1 002345   200131 720100                    LXL0    TABLE_INDEX,,AUTO
         1 002346   000000 235010 0                  LDA     INCR_521_TABLE,X0
         1 002347   200124 755100                    STA     INCREMENT,,AUTO

     1833     6166    3           RETURN;

   6166  1 002350   200130 221300                    LDX1  ! SRC_STREAM_KEY$+2,,AUTO
         1 002351   000001 702211                    TSX2  ! 1,X1

     1834     6167
     1835     6168    3   END NEXT_LOWER_INCR;
     1836     6169
     1837     6170    2   END ADJUST_INCREMENT;
     1838     6171
     1839     6172        %BOX (TITLE=PREPARE_DESTINATION, PAGE=YES);
              6180    2
              6184    2   /***************************************************************************
              6186    2    *                                                                         *
              6190    2            *                            PREPARE_DESTINATION                         *
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:257  
              6192    2            *                                                                        *
              6194    2          ***************************************************************************/

     1840     6198
     1841     6199        /*I* NAME: PREPARE_DESTINATION
     1842     6200            INPUT:
     1843     6201                FIRST_SRC_RECORD - VD$NODE_DESC containing the first/only record from
     1844     6202                    the source block.
     1845     6203                DEST_STREAM - VD$STREAM open to destination file.
     1846     6204                DEST$EDIT_BLOCK - EditBlock containing the destination block.
     1847     6205                DEST_RANGE - Range of destination block.
     1848     6206                    .START must already be set to be a copy of .ENDD.
     1849     6207                DEST_RANGE_TYPE - %BDT_ code for DEST_RANGE.
     1850     6208                DEST_LEVEL - Level in file structure of the destination block.
     1851     6209            OUTPUT:
     1852     6210                RECORD.SPEC, .DATA, and .EOR will be set from destLeft, if any.
     1853     6211                    If no destLeft, these fields will be %CLEAR/NIL.
     1854     6212                RECORD.KEY will contain the key to be used for the first write (or
     1855     6213                    as the base for generating a new SQ_NEXT key on the first write).
     1856     6214                    If we should insert the source block in front of the given
     1857     6215                    destination key, RECORD.KEY will contain the key of the existing
     1858     6216                    record just prior to the given destination key.
     1859     6217                DEST_LEFT_LENGTH will contain the length of the destLeft portion of
     1860     6218                    the destination record; 0 if none.
     1861     6219                DEST_NEXT_KEY will contain the key of the record following RECORD.KEY.
     1862     6220                    If the given dest key is the last or beyond the last record in
     1863     6221                    the file, DEST_NEXT_KEY will be set to MAX_EDITKEY.
     1864     6222                DEST_RIGHT$ will be either NIL, or will point to a VD$BUFFER containing
     1865     6223                    either destRight or destNext.  If it's not NIL, then the data
     1866     6224                    is assumed to include the EOR boundary.
     1867     6225                DEST_EXISTS will be set to true or false, indicating if the given
     1868     6226                    destination key exists in the destination EditBlock or not.
     1869     6227                GENERATE_KEY indicates whether and how to generate a key for the
     1870     6228                    first record written to the destination block:
     1871     6229                    %SQ_CURRENT - use RECORD.KEY itself -- don't generate a new key.
     1872     6230                    %SQ_NEXT - generate a key after RECORD.KEY; DEST_NEXT_KEY is
     1873     6231                        the key of the existing record after RECORD.KEY.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:258  
     1874     6232                DEST_STREAM has been repositioned.
     1875     6233            DESCRIPTION:
     1876     6234                See if destination record exists, by reading the record at the given
     1877     6235                    destination key; if that key doesn't exist in the file, we'll get
     1878     6236                    the record following the given dest key.
     1879     6237                If the given destination key does exist, separate the record into
     1880     6238                    destLeft and destRight:
     1881     6239                    Set RECORD to destLeft;
     1882     6240                    Set DEST_RIGHT$ to destRight.
     1883     6241                If it doesn't exist, the record we read is actually the destNext
     1884     6242                    record.  Save it in DEST_RIGHT$.
     1885     6243        */
     1886     6244
     1887     6245    1   PREPARE_DESTINATION: PROC ALTRET;

   6245  1 002352   200110 741300       PREPARE_DES* STX1  ! ERR_SUBST$+2,,AUTO

     1888     6246
     1889     6247
     1890     6248
     1891     6249    2   DCL DEST_GIVEN_KEY$ PTR;
     1892     6250    2   DCL RELATIVE SBIN;
     1893     6251    2   DCL RECORD_KEY$ PTR;
     1894     6252    2   DCL DEST_RIGHT_LENGTH SBIN;
     1895     6253    2   DCL ALLOC_WDS SBIN;
     1896     6254
     1897     6255
     1898     6256        %VD$TEXTC (NAME=DEST$GIVEN_KEY, STCLASS="BASED(DEST_GIVEN_KEY$)");
     1899     6279        %VD$TEXTC (NAME=RECORD$KEY, STCLASS="BASED(RECORD_KEY$)");
     1900     6302        %VD$BUFFER (NAME=DEST$RIGHT, STCLASS="BASED(DEST_RIGHT$)");
     1901     6360        %VD$BUFFER (NAME=RECORD$DATA, STCLASS="BASED(RECORD.DATA$)");
     1902     6418
     1903     6419
     1904     6420
     1905     6421    2           DEST_LEFT_LENGTH = 0;

   6421  1 002353   200033 450100                    STZ     DEST_LEFT_LENGTH,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:259  

     1906     6422    2           DEST_RIGHT$ = ADDR(NIL);

   6422  1 002354   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 002355   200036 756100                    STQ     DEST_RIGHT$,,AUTO

     1907     6423    2           DEST_EXISTS = %FALSE;       /* Assume given dest key doesn't exist */

   6423  1 002356   200037 450100                    STZ     DEST_EXISTS,,AUTO

     1908     6424    2           GENERATE_KEY = %SQ_CURRENT; /* Assume "don't generate key" */

   6424  1 002357   000002 235007                    LDA     2,DL
         1 002360   200042 755100                    STA     GENERATE_KEY,,AUTO

     1909     6425
     1910     6426                %GETKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1,
     1911     6427                PTR=DEST_GIVEN_KEY$);

   6434  1 002361   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 002362   000001 735000                    ALS     1
         1 002363   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 002364   000007 720105                    LXL0    7,AL,PR0
         1 002365   000002 100003                    CMPX0   2,DU
         1 002366   002373 601000 1                  TNZ     s:6434+10

   6434  1 002367   000010 471505                    LDP1    8,AL,PR0
         1 002370   100002 633500                    EPPR3   2,,PR1
         1 002371   200111 453500                    STP3    DEST_GIVEN_KEY$,,AUTO
         1 002372   002400 710000 1                  TRA     s:6438

   6434  1 002373   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 002374   000023 736000                    QLS     19
         1 002375   000010 036003                    ADLQ    8,DU
         1 002376   200005 036100                    ADLQ    @DEST_RANGE,,AUTO
         1 002377   200111 756100                    STQ     DEST_GIVEN_KEY$,,AUTO

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:260  
     1912     6437
     1913     6438    2           IF DEST_RANGE.ENDD.EOF THEN

   6438  1 002400   000021 236100                    LDQ     17,,PR0
         1 002401   400000 316007                    CANQ    -131072,DL
         1 002402   002455 600000 1                  TZE     GIVEN_NOT_EOF

     1914     6439    3   GIVEN_EOF: DO;

   6439  1 002403                       GIVEN_EOF    null
     1915     6440                   /*
     1916     6441                   *   Dest ends at EOF:  find last key in file to use as base for
     1917     6442                   *      key generation.
     1918     6443                   */
     1919     6444    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, -1, %DONT_READ_RECORD)

   6444  1 002403   000004 237000 2                  LDAQ    4
         1 002404   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 002405   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 002406   000011 036003                    ADLQ    9,DU
         1 002407   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 002410   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002411   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002412   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 002413   000000 701000 xent               TSX1    VDA$LREAD
         1 002414   003157 702000 1                  TSX2    LREAD_FAILED

     1920     6445    3                ALTRET (LREAD_FAILED);
     1921     6446    3              IF DEST_STREAM.CURRENT.EOF THEN

   6446  1 002415   200006 470500                    LDP0    @DEST_STREAM,,AUTO
         1 002416   000016 236100                    LDQ     14,,PR0
         1 002417   400000 316007                    CANQ    -131072,DL
         1 002420   002425 600000 1                  TZE     s:6463

     1922     6447    3                 RECORD.KEY = VD_KEY_MN_EDITKEY;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:261  
   6447  1 002421   000100 100400                    MLR     fill='000'O
         1 002422   000000 000010 xsym               ADSC9   VD_KEY_MN_EDITKEY        cn=0,n=8
         1 002423   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 002424   002452 710000 1                  TRA     s:6467

     1923     6448    4              ELSE DO;

     1924     6449                      %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     1925     6450                      TKEY=RECORD.KEY);

   6463  1 002425   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 002426   000003 735000                    ALS     3
         1 002427   000100 100505                    MLR     fill='000'O
         1 002430   000004 000010                    ADSC9   4,A,PR0                  cn=0,n=8
         1 002431   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8

   6463  1 002432   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 002433   000001 736000                    QLS     1
         1 002434   000004 720106                    LXL0    4,QL,PR0
         1 002435   000002 100003                    CMPX0   2,DU
         1 002436   002452 601000 1                  TNZ     s:6467

   6463  1 002437   000005 471506                    LDP1    5,QL,PR0
         1 002440   200026 633500                    EPPR3   RECORD+1,,AUTO
         1 002441   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 002442   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 002443   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002444   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002445   000000 701000 xent               TSX1    VDG$OCOPY
         1 002446   002450 702000 1                  TSX2    s:6464
         1 002447   002452 710000 1                  TRA     s:6467

   6464  1 002450   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002451   000000 702211                    TSX2  ! 0,X1

     1926     6466    4                 END;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:262  
     1927     6467    3              GENERATE_KEY = %SQ_NEXT; /* Always generate key */

   6467  1 002452   000003 235007                    LDA     3,DL
         1 002453   200042 755100                    STA     GENERATE_KEY,,AUTO

     1928     6468    3              END GIVEN_EOF;

   6468  1 002454   003006 710000 1                  TRA     s:6621

     1929     6469    2           ELSE
     1930     6470    3   GIVEN_NOT_EOF: DO;

   6470  1 002455                       GIVEN_NOT_E* null
     1931     6471    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, 0, %READ_RECORD)

   6471  1 002455   000000 237000 2                  LDAQ    0
         1 002456   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 002457   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 002460   000011 036003                    ADLQ    9,DU
         1 002461   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 002462   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002463   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002464   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 002465   000000 701000 xent               TSX1    VDA$LREAD
         1 002466   003157 702000 1                  TSX2    LREAD_FAILED

     1932     6472    3                ALTRET (LREAD_FAILED);
     1933     6473    3              CALL VDE$RGET (DEST_STREAM, DEST$EDIT_BLOCK.RANGE, RECORD)

   6473  1 002467   200025 630500                    EPPR0   RECORD,,AUTO
         1 002470   200176 450500                    STP0    OPEN_OPTIONS+7,,AUTO
         1 002471   200012 236100                    LDQ     DEST_EDIT_BLOCK$,,AUTO
         1 002472   000003 036003                    ADLQ    3,DU
         1 002473   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 002474   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002475   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002476   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:263  
         1 002477   000000 701000 xent               TSX1    VDE$RGET
         1 002500   003157 702000 1                  TSX2    LREAD_FAILED

     1934     6474    3                ALTRET (RGET_FAILED);
     1935     6475                   %GETKEY (KEY=RECORD.KEY, PTR=RECORD_KEY$);

   6482  1 002501   200025 720100                    LXL0    RECORD,,AUTO
         1 002502   000002 100003                    CMPX0   2,DU
         1 002503   002510 601000 1                  TNZ     s:6482+7

   6482  1 002504   200026 236100                    LDQ     RECORD+1,,AUTO
         1 002505   000002 036003                    ADLQ    2,DU
         1 002506   200113 756100                    STQ     RECORD_KEY$,,AUTO
         1 002507   002512 710000 1                  TRA     s:6486

   6482  1 002510   200026 630500                    EPPR0   RECORD+1,,AUTO
         1 002511   200113 450500                    STP0    RECORD_KEY$,,AUTO

     1936     6485
     1937     6486    3              IF RECORD.KEY = %CLEAR     /* Rec beyond dest EditBlock, or EOF */

   6486  1 002512   000000 106500                    CMPC    fill='000'O
         1 002513   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 002514   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 002515   002532 600000 1                  TZE     GIVEN_KEY_DOESNT_EXIST
         1 002516   200113 470500                    LDP0    RECORD_KEY$,,AUTO
         1 002517   000000 236100                    LDQ     0,,PR0
         1 002520   000033 772000                    QRL     27
         1 002521   000001 621006                    EAX1    1,QL
         1 002522   200111 471500                    LDP1    DEST_GIVEN_KEY$,,AUTO
         1 002523   100000 236100                    LDQ     0,,PR1
         1 002524   000033 772000                    QRL     27
         1 002525   000001 622006                    EAX2    1,QL
         1 002526   000140 106540                    CMPC    fill='000'O
         1 002527   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         1 002530   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2
         1 002531   002637 600000 1                  TZE     GIVEN_KEY_DOES_EXIST
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:264  

     1938     6487    3                OR RECORD$KEY ~= DEST$GIVEN_KEY THEN
     1939     6488    4   GIVEN_KEY_DOESNT_EXIST: DO;

   6488  1 002532                       GIVEN_KEY_D* null
     1940     6489                      /* Given destination key doesn't exist */
     1941     6490    4                 DEST_EXISTS = %FALSE;

   6490  1 002532   200037 450100                    STZ     DEST_EXISTS,,AUTO

     1942     6491
     1943     6492                      /*
     1944     6493                      *  Record we got is actually destNext; return it in DEST_RIGHT$.
     1945     6494                      *  However, if the last source record includes EOR, then we
     1946     6495                      *     don't want to touch destNext--so free it and return
     1947     6496                      *     DEST_RIGHT$ as NIL.
     1948     6497                      */
     1949     6498                      %CLEARSPEC (SPEC=RECORD.SPEC);

   6505  1 002533   200027 721100                    LXL1    RECORD+2,,AUTO
         1 002534   000002 101003                    CMPX1   2,DU
         1 002535   002545 601000 1                  TNZ     s:6506+2

   6505  1 002536   200030 630500                    EPPR0   RECORD+3,,AUTO
         1 002537   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002540   000000 701000 xent               TSX1    VDG$OFREE
         1 002541   002543 702000 1                  TSX2    s:6506
         1 002542   002545 710000 1                  TRA     s:6506+2

   6506  1 002543   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002544   000000 702211                    TSX2  ! 0,X1

   6506  1 002545   200027 450100                    STZ     RECORD+2,,AUTO
         1 002546   200030 450100                    STZ     RECORD+3,,AUTO

     1950     6508    4                 IF SRC_RANGE.ENDD.EOF OR SRC_RANGE.ENDD.POSITION# = 0 THEN

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:265  
   6508  1 002547   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 002550   000021 236100                    LDQ     17,,PR0
         1 002551   400000 316007                    CANQ    -131072,DL
         1 002552   002555 601000 1                  TNZ     s:6509
         1 002553   000021 220100                    LDX0    17,,PR0
         1 002554   002562 601000 1                  TNZ     s:6512

     1951     6509    4                    CALL VDG$OFREE (RECORD$DATA)

   6509  1 002555   200031 630500                    EPPR0   RECORD+4,,AUTO
         1 002556   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002557   000000 701000 xent               TSX1    VDG$OFREE
         1 002560   003157 702000 1                  TSX2    LREAD_FAILED
         1 002561   002564 710000 1                  TRA     s:6513

     1952     6510    4                      ALTRET (OFREE_FAILED);
     1953     6511    4                 ELSE
     1954     6512    4                    DEST_RIGHT$ = RECORD.DATA$;

   6512  1 002562   200031 236100                    LDQ     RECORD+4,,AUTO
         1 002563   200036 756100                    STQ     DEST_RIGHT$,,AUTO

     1955     6513    4                 RECORD.DATA$ = ADDR(NIL);

   6513  1 002564   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 002565   200031 756100                    STQ     RECORD+4,,AUTO

     1956     6514    4                 RECORD.EOR = %FALSE;

   6514  1 002566   000031 236000 xsym               LDQ     B_VECTNIL+25
         1 002567   200032 356100                    ANSQ    RECORD+5,,AUTO

     1957     6515
     1958     6516    4                 DEST_NEXT_KEY = RECORD.KEY;

   6516  1 002570   000100 100500                    MLR     fill='000'O
         1 002571   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:266  
         1 002572   200034 000010                    ADSC9   DEST_NEXT_KEY,,AUTO      cn=0,n=8

     1959     6517                      %COPYKEY (FKEY=DEST_RANGE.ENDD.KEY, FINDX=DEST_LEVEL-1,
     1960     6518                      TKEY=RECORD.KEY);

   6531  1 002573   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 002574   000003 735000                    ALS     3
         1 002575   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 002576   000100 100505                    MLR     fill='000'O
         1 002577   000007 000010                    ADSC9   7,A,PR0                  cn=0,n=8
         1 002600   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8

   6531  1 002601   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 002602   000001 735000                    ALS     1
         1 002603   000007 720105                    LXL0    7,AL,PR0
         1 002604   000002 100003                    CMPX0   2,DU
         1 002605   002621 601000 1                  TNZ     s:6539

   6531  1 002606   000010 471505                    LDP1    8,AL,PR0
         1 002607   200026 633500                    EPPR3   RECORD+1,,AUTO
         1 002610   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 002611   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 002612   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002613   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002614   000000 701000 xent               TSX1    VDG$OCOPY
         1 002615   002617 702000 1                  TSX2    s:6532
         1 002616   002621 710000 1                  TRA     s:6539

   6532  1 002617   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 002620   000000 702211                    TSX2  ! 0,X1

     1961     6534
     1962     6535                      /*
     1963     6536                      *  If starting position is not BOR, we must pad the record
     1964     6537                      *  with the fill character up to the starting position.
     1965     6538                      */
     1966     6539    4                 DEST_LEFT_LENGTH = DEST_RANGE.ENDD.POSITION#;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:267  

   6539  1 002621   200005 470500                    LDP0    @DEST_RANGE,,AUTO
         1 002622   000021 236100                    LDQ     17,,PR0
         1 002623   000022 732000                    QRS     18
         1 002624   200033 756100                    STQ     DEST_LEFT_LENGTH,,AUTO

     1967     6540    5                 IF DEST_LEFT_LENGTH > 0 THEN DO;

   6540  1 002625   003006 604400 1                  TMOZ    s:6621

     1968     6541    5                    CALL VDE$RADJUST_LENGTH (RECORD, DEST_LEFT_LENGTH)

   6541  1 002626   200033 631500                    EPPR1   DEST_LEFT_LENGTH,,AUTO
         1 002627   200175 451500                    STP1    OPEN_OPTIONS+6,,AUTO
         1 002630   200025 633500                    EPPR3   RECORD,,AUTO
         1 002631   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 002632   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002633   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002634   000000 701000 xent               TSX1    VDE$RADJUST_LENGTH
         1 002635   003157 702000 1                  TSX2    LREAD_FAILED

     1969     6542    5                      ALTRET (RADJUST_LENGTH_FAILED);
     1970     6543    5                    END;

     1971     6544    4                 END GIVEN_KEY_DOESNT_EXIST;

   6544  1 002636   003006 710000 1                  TRA     s:6621

     1972     6545    3              ELSE
     1973     6546    4   GIVEN_KEY_DOES_EXIST: DO;

   6546  1 002637                       GIVEN_KEY_D* null
     1974     6547                      /* Given destination key does exist */
     1975     6548    4                 DEST_EXISTS = %TRUE;

   6548  1 002637   400000 236003                    LDQ     -131072,DU
         1 002640   200037 756100                    STQ     DEST_EXISTS,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:268  

     1976     6549
     1977     6550                      /*
     1978     6551                      *   Split RECORD.DATA$ into destLeft and destRight.
     1979     6552                      *   However, if this is a "genkey" case and the last source
     1980     6553                      *     record includes EOR, then we don't want to touch the
     1981     6554                      *     destRight in the file (and there is no destLeft).
     1982     6555                      *     So in this case, free the record just read and return
     1983     6556                      *     DEST_RIGHT$ = NIL.
     1984     6557                      */
     1985     6558    4                 DEST_LEFT_LENGTH = DEST_RANGE.ENDD.POSITION#;

   6558  1 002641   200005 473500                    LDP3    @DEST_RANGE,,AUTO
         1 002642   300021 236100                    LDQ     17,,PR3
         1 002643   000022 732000                    QRS     18
         1 002644   200033 756100                    STQ     DEST_LEFT_LENGTH,,AUTO

     1986     6559
     1987     6560    4                 DEST_EOR = RECORD.EOR;

   6560  1 002645   200032 236100                    LDQ     RECORD+5,,AUTO
         1 002646   400000 376003                    ANQ     -131072,DU
         1 002647   200040 756100                    STQ     DEST_EOR,,AUTO

     1988     6561    4                 IF DEST_LEFT_LENGTH = 0

   6561  1 002650   200033 235100                    LDA     DEST_LEFT_LENGTH,,AUTO
         1 002651   002662 601000 1                  TNZ     s:6568
         1 002652   200003 474500                    LDP4    @SRC_RANGE,,AUTO
         1 002653   400021 221100                    LDX1    17,,PR4
         1 002654   002662 601000 1                  TNZ     s:6568
         1 002655   200026 236100                    LDQ     RECORD+1,,AUTO
         1 002656   000001 116000 xsym               CMPQ    VD_KEY_MN_EDITKEY+1
         1 002657   002662 600000 1                  TZE     s:6568

     1989     6562    4                   AND SRC_RANGE.ENDD.POSITION# = 0
     1990     6563    4                   AND ADDR(RECORD.KEY.V$) -> VD$TEXTC_NUMBER ~=
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:269  
     1991     6564    5                   ADDR(VD_KEY_MN_EDITKEY.LENGTH#) -> VD$TEXTC_NUMBER THEN DO;

     1992     6565    5                    DEST_RIGHT_LENGTH = 0;

   6565  1 002660   200114 450100                    STZ     DEST_RIGHT_LENGTH,,AUTO

     1993     6566    5                    END;

   6566  1 002661   002734 710000 1                  TRA     s:6582

     1994     6567    5                 ELSE DO;

     1995     6568    5                    DEST_RIGHT_LENGTH = MAXIMUM (0, RECORD$DATA.LENGTH# -

   6568  1 002662   200031 474500                    LDP4    RECORD+4,,AUTO
         1 002663   400002 236100                    LDQ     2,,PR4
         1 002664   000022 732000                    QRS     18
         1 002665   200033 136100                    SBLQ    DEST_LEFT_LENGTH,,AUTO
         1 002666   000000 116003                    CMPQ    0,DU
         1 002667   002671 605000 1                  TPL     s:6568+7
         1 002670   000000 236003                    LDQ     0,DU
         1 002671   200114 756100                    STQ     DEST_RIGHT_LENGTH,,AUTO

     1996     6569    5                      DEST_LEFT_LENGTH);
     1997     6570    5                    IF DEST_RIGHT_LENGTH = 0 AND MY_EOF_DELETED THEN EXIT;

   6570  1 002672   000000 116003                    CMPQ    0,DU
         1 002673   002676 601000 1                  TNZ     s:6571
         1 002674   200043 235100                    LDA     MY_EOF_DELETED,,AUTO
         1 002675   002734 601000 1                  TNZ     s:6582

     1998     6571    5                    ALLOC_WDS = (LENGTHC(VD$BUFFER_HEADER) + DEST_RIGHT_LENGTH +

   6571  1 002676   000015 036007                    ADLQ    13,DL
         1 002677   000004 506007                    DIV     4,DL
         1 002700   200115 756100                    STQ     ALLOC_WDS,,AUTO

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:270  
     1999     6572    5                      %NB_PER_WORD - 1) / %NB_PER_WORD;
     2000     6573    5                    CALL VDG$OALLOC (%CLS_BUFFER, DEST_RIGHT$, ALLOC_WDS)

   6573  1 002701   200115 635500                    EPPR5   ALLOC_WDS,,AUTO
         1 002702   200176 455500                    STP5    OPEN_OPTIONS+7,,AUTO
         1 002703   200036 636500                    EPPR6   DEST_RIGHT$,,AUTO
         1 002704   200175 456500                    STP6    OPEN_OPTIONS+6,,AUTO
         1 002705   000016 236000 2                  LDQ     14
         1 002706   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 002707   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002710   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 002711   000000 701000 xent               TSX1    VDG$OALLOC
         1 002712   003157 702000 1                  TSX2    LREAD_FAILED

     2001     6574    5                      ALTRET (OALLOC_FAILED);
     2002     6575    5                    DEST$RIGHT.LENGTH# = DEST_RIGHT_LENGTH;

   6575  1 002713   200114 720100                    LXL0    DEST_RIGHT_LENGTH,,AUTO
         1 002714   200036 470500                    LDP0    DEST_RIGHT$,,AUTO
         1 002715   000002 740100                    STX0    2,,PR0

     2003     6576    6                    IF DEST_RIGHT_LENGTH > 0 THEN DO;

   6576  1 002716   200114 235100                    LDA     DEST_RIGHT_LENGTH,,AUTO
         1 002717   002734 604400 1                  TMOZ    s:6582

     2004     6577    6                       DEST$RIGHT.BYTES = SUBSTR(RECORD$DATA.BYTES,

   6577  1 002720   200036 470500                    LDP0    DEST_RIGHT$,,AUTO
         1 002721   000002 221100                    LDX1    2,,PR0
         1 002722   200031 471500                    LDP1    RECORD+4,,AUTO
         1 002723   100002 222100                    LDX2    2,,PR1
         1 002724   000000 636012                    EAQ     0,X2
         1 002725   000022 732000                    QRS     18
         1 002726   200033 136100                    SBLQ    DEST_LEFT_LENGTH,,AUTO
         1 002727   000000 623006                    EAX3    0,QL
         1 002730   200033 236100                    LDQ     DEST_LEFT_LENGTH,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:271  
         1 002731   040140 100546                    MLR     fill='040'O
         1 002732   100002 400013                    ADSC9   2,Q,PR1                  cn=2,n=*X3
         1 002733   000002 400011                    ADSC9   2,,PR0                   cn=2,n=*X1

     2005     6578    6                         DEST_LEFT_LENGTH);
     2006     6579    6                       END;

     2007     6580    5                    END;

     2008     6581
     2009     6582    4                 CALL VDE$RADJUST_LENGTH (RECORD, DEST_LEFT_LENGTH)

   6582  1 002734   200033 630500                    EPPR0   DEST_LEFT_LENGTH,,AUTO
         1 002735   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 002736   200025 631500                    EPPR1   RECORD,,AUTO
         1 002737   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 002740   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002741   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002742   000000 701000 xent               TSX1    VDE$RADJUST_LENGTH
         1 002743   003157 702000 1                  TSX2    LREAD_FAILED

     2010     6583    4                   ALTRET (RADJUST_LENGTH_FAILED);
     2011     6584
     2012     6585                      /* Get destNext key */
     2013     6586    4                 CALL VDA$LREAD (DEST_STREAM, , 1, %DONT_READ_RECORD)

   6586  1 002744   000020 237000 2                  LDAQ    16
         1 002745   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 002746   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 002747   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 002750   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 002751   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 002752   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 002753   000000 701000 xent               TSX1    VDA$LREAD
         1 002754   003157 702000 1                  TSX2    LREAD_FAILED

     2014     6587    4                   ALTRET (LREAD_FAILED);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:272  
     2015     6588    5                 IF NOT DEST_STREAM.CURRENT.EOF THEN DO;

   6588  1 002755   200006 470500                    LDP0    @DEST_STREAM,,AUTO
         1 002756   000016 236100                    LDQ     14,,PR0
         1 002757   400000 316007                    CANQ    -131072,DL
         1 002760   003006 601000 1                  TNZ     s:6621

     2016     6589                         %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     2017     6590                         TKEY=DEST_NEXT_KEY);

   6603  1 002761   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 002762   000003 735000                    ALS     3
         1 002763   000100 100505                    MLR     fill='000'O
         1 002764   000004 000010                    ADSC9   4,A,PR0                  cn=0,n=8
         1 002765   200034 000010                    ADSC9   DEST_NEXT_KEY,,AUTO      cn=0,n=8

   6603  1 002766   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 002767   000001 736000                    QLS     1
         1 002770   000004 720106                    LXL0    4,QL,PR0
         1 002771   000002 100003                    CMPX0   2,DU
         1 002772   003006 601000 1                  TNZ     s:6621

   6603  1 002773   000005 471506                    LDP1    5,QL,PR0
         1 002774   200035 633500                    EPPR3   DEST_NEXT_KEY+1,,AUTO
         1 002775   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 002776   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 002777   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003000   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003001   000000 701000 xent               TSX1    VDG$OCOPY
         1 003002   003004 702000 1                  TSX2    s:6604
         1 003003   003006 710000 1                  TRA     s:6621

   6604  1 003004   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003005   000000 702211                    TSX2  ! 0,X1

     2018     6606    5                    END;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:273  
     2019     6607    4                 END GIVEN_KEY_DOES_EXIST;

     2020     6608    3              END GIVEN_NOT_EOF;

     2021     6609
     2022     6610                /*
     2023     6611                *   At this point:
     2024     6612                *       RECORD.KEY = key to either write 1st record to, or on which to
     2025     6613                *           base key generation on 1st write.
     2026     6614                *       DEST_NEXT_KEY = next existing key after RECORD.KEY.
     2027     6615                *           !! May be %CLEAR at this point, indicating EOF !!
     2028     6616                *       RECORD.DATA, DEST_RIGHT set up appropriately.
     2029     6617                *       GENERATE_KEY = %SQ_CURRENT normally, unless we've already
     2030     6618                *           determined we must generate a key.
     2031     6619                */
     2032     6620
     2033     6621    3           IF DEST_NEXT_KEY = %CLEAR THEN DO;

   6621  1 003006   200034 237100                    LDAQ    DEST_NEXT_KEY,,AUTO
         1 003007   000002 117000 2                  CMPAQ   2
         1 003010   003046 601000 1                  TNZ     s:6656

     2034     6622    3              IF DEST$EDIT_BLOCK.RANGE.ENDD.EOF THEN

   6622  1 003011   200012 470500                    LDP0    DEST_EDIT_BLOCK$,,AUTO
         1 003012   000024 236100                    LDQ     20,,PR0
         1 003013   400000 316007                    CANQ    -131072,DL
         1 003014   003021 600000 1                  TZE     s:6639

     2035     6623    3                 DEST_NEXT_KEY = VD_KEY_MX_EDITKEY;

   6623  1 003015   000100 100400                    MLR     fill='000'O
         1 003016   000000 000010 xsym               ADSC9   VD_KEY_MX_EDITKEY        cn=0,n=8
         1 003017   200034 000010                    ADSC9   DEST_NEXT_KEY,,AUTO      cn=0,n=8
         1 003020   003046 710000 1                  TRA     s:6656

     2036     6624    4              ELSE DO;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:274  

     2037     6625                      %COPYKEY (FKEY=DEST$EDIT_BLOCK.RANGE.ENDD.KEY, FINDX=DEST_LEVEL-1,
     2038     6626                      TKEY=DEST_NEXT_KEY);

   6639  1 003021   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 003022   000003 735000                    ALS     3
         1 003023   000100 100505                    MLR     fill='000'O
         1 003024   000012 000010                    ADSC9   10,A,PR0                 cn=0,n=8
         1 003025   200034 000010                    ADSC9   DEST_NEXT_KEY,,AUTO      cn=0,n=8

   6639  1 003026   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 003027   000001 736000                    QLS     1
         1 003030   000012 720106                    LXL0    10,QL,PR0
         1 003031   000002 100003                    CMPX0   2,DU
         1 003032   003046 601000 1                  TNZ     s:6656

   6639  1 003033   000013 471506                    LDP1    11,QL,PR0
         1 003034   200035 633500                    EPPR3   DEST_NEXT_KEY+1,,AUTO
         1 003035   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 003036   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 003037   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003040   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003041   000000 701000 xent               TSX1    VDG$OCOPY
         1 003042   003044 702000 1                  TSX2    s:6640
         1 003043   003046 710000 1                  TRA     s:6656

   6640  1 003044   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003045   000000 702211                    TSX2  ! 0,X1

     2039     6642    4                 END;

     2040     6643    3              END;

     2041     6644
     2042     6645                /*
     2043     6646                *   Final adjustments to RECORD.KEY and GENERATE_KEY:
     2044     6647                *   If DEST_EXISTS  !AND!  dest location is BOR  !AND! the
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:275  
     2045     6648                *       first source record does include EOR, then we must back up
     2046     6649                *       RECORD.KEY to the existing key in front of the given dest key,
     2047     6650                *       and set GENERATE_KEY to %SQ_NEXT.
     2048     6651                *       Also, change DEST_NEXT_KEY to be the original RECORD.KEY (the
     2049     6652                *       one that DEST_EXISTS says exists).  Then clear DEST_EXISTS
     2050     6653                *       to make it accurate again, since "DEST" is now empty space.
     2051     6654                */
     2052     6655
     2053     6656    2           IF DEST_EXISTS AND DEST_LEFT_LENGTH = 0

   6656  1 003046   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 003047   003155 605000 1                  TPL     s:6703
         1 003050   200033 235100                    LDA     DEST_LEFT_LENGTH,,AUTO
         1 003051   003155 601000 1                  TNZ     s:6703
         1 003052   200026 236100                    LDQ     RECORD+1,,AUTO
         1 003053   000001 116000 xsym               CMPQ    VD_KEY_MN_EDITKEY+1
         1 003054   003155 600000 1                  TZE     s:6703
         1 003055   200053 234100                    SZN     FIRST_SRC_RECORD+5,,AUTO
         1 003056   003155 605000 1                  TPL     s:6703

     2054     6657    2             AND ADDR(RECORD.KEY.V$) -> VD$TEXTC_NUMBER ~=
     2055     6658    2             ADDR(VD_KEY_MN_EDITKEY.LENGTH#) -> VD$TEXTC_NUMBER
     2056     6659    3             AND FIRST_SRC_RECORD.EOR THEN DO;

     2057     6660    3              GENERATE_KEY = %SQ_NEXT;

   6660  1 003057   000003 235007                    LDA     3,DL
         1 003060   200042 755100                    STA     GENERATE_KEY,,AUTO

     2058     6661                   %CLEARKEY (KEY=DEST_NEXT_KEY);

   6668  1 003061   200034 720100                    LXL0    DEST_NEXT_KEY,,AUTO
         1 003062   000002 100003                    CMPX0   2,DU
         1 003063   003073 601000 1                  TNZ     s:6669+2

   6668  1 003064   200035 630500                    EPPR0   DEST_NEXT_KEY+1,,AUTO
         1 003065   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:276  
         1 003066   000000 701000 xent               TSX1    VDG$OFREE
         1 003067   003071 702000 1                  TSX2    s:6669
         1 003070   003073 710000 1                  TRA     s:6669+2

   6669  1 003071   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003072   000000 702211                    TSX2  ! 0,X1

   6669  1 003073   000000 235003                    LDA     0,DU
         1 003074   000000 236003                    LDQ     0,DU
         1 003075   200034 757100                    STAQ    DEST_NEXT_KEY,,AUTO

     2059     6671    3              DEST_NEXT_KEY = RECORD.KEY;  /* Used when generating key */

   6671  1 003076   000100 100500                    MLR     fill='000'O
         1 003077   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8
         1 003100   200034 000010                    ADSC9   DEST_NEXT_KEY,,AUTO      cn=0,n=8

     2060     6672    3              RECORD.KEY = %CLEAR;

   6672  1 003101   200025 450100                    STZ     RECORD,,AUTO
         1 003102   200026 450100                    STZ     RECORD+1,,AUTO

     2061     6673                   /* Back up */
     2062     6674    3              CALL VDA$LREAD (DEST_STREAM, DEST_RANGE.ENDD, -1, %DONT_READ_RECORD)

   6674  1 003103   000004 237000 2                  LDAQ    4
         1 003104   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 003105   200005 236100                    LDQ     @DEST_RANGE,,AUTO
         1 003106   000011 036003                    ADLQ    9,DU
         1 003107   200006 235100                    LDA     @DEST_STREAM,,AUTO
         1 003110   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 003111   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003112   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 003113   000000 701000 xent               TSX1    VDA$LREAD
         1 003114   003157 702000 1                  TSX2    LREAD_FAILED

     2063     6675    3                ALTRET (LREAD_FAILED);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:277  
     2064     6676    3              DEST_EXISTS = %FALSE;

   6676  1 003115   200037 450100                    STZ     DEST_EXISTS,,AUTO

     2065     6677    3              IF DEST_STREAM.CURRENT.KEY.V$(DEST_LEVEL-1) >= DEST_NEXT_KEY.V$

   6677  1 003116   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 003117   000001 735000                    ALS     1
         1 003120   200006 470500                    LDP0    @DEST_STREAM,,AUTO
         1 003121   000005 236105                    LDQ     5,AL,PR0
         1 003122   200035 116100                    CMPQ    DEST_NEXT_KEY+1,,AUTO
         1 003123   003130 602000 1                  TNC     s:6697

     2066     6678    4              THEN DO;

     2067     6679                      /* Hit BOF:  Use MIN_EDITKEY */
     2068     6680    4                 RECORD.KEY = VD_KEY_MN_EDITKEY;

   6680  1 003124   000100 100400                    MLR     fill='000'O
         1 003125   000000 000010 xsym               ADSC9   VD_KEY_MN_EDITKEY        cn=0,n=8
         1 003126   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8

     2069     6681    4                 END;

   6681  1 003127   003155 710000 1                  TRA     s:6703

     2070     6682    4              ELSE DO;

     2071     6683                      %COPYKEY (FKEY=DEST_STREAM.CURRENT.KEY, FINDX=DEST_LEVEL-1,
     2072     6684                      TKEY=RECORD.KEY);

   6697  1 003130   200020 235100                    LDA     DEST_LEVEL,,AUTO
         1 003131   000003 735000                    ALS     3
         1 003132   000100 100505                    MLR     fill='000'O
         1 003133   000004 000010                    ADSC9   4,A,PR0                  cn=0,n=8
         1 003134   200025 000010                    ADSC9   RECORD,,AUTO             cn=0,n=8

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:278  
   6697  1 003135   200020 236100                    LDQ     DEST_LEVEL,,AUTO
         1 003136   000001 736000                    QLS     1
         1 003137   000004 720106                    LXL0    4,QL,PR0
         1 003140   000002 100003                    CMPX0   2,DU
         1 003141   003155 601000 1                  TNZ     s:6703

   6697  1 003142   000005 471506                    LDP1    5,QL,PR0
         1 003143   200026 633500                    EPPR3   RECORD+1,,AUTO
         1 003144   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 003145   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 003146   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003147   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003150   000000 701000 xent               TSX1    VDG$OCOPY
         1 003151   003153 702000 1                  TSX2    s:6698
         1 003152   003155 710000 1                  TRA     s:6703

   6698  1 003153   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003154   000000 702211                    TSX2  ! 0,X1

     2073     6700    4                 END;

     2074     6701    3              END;

     2075     6702
     2076     6703    2           RETURN;

   6703  1 003155   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003156   000001 702211                    TSX2  ! 1,X1

   6703  1 003157                       LREAD_FAILED null
   6703  1 003157                       RGET_FAILED  null
   6703  1 003157                       OALLOC_FAIL* null
   6703  1 003157                       OFREE_FAILED null
   6703  1 003157                       RADJUST_LEN* null
     2077     6704
     2078     6705
     2079     6706    2   LREAD_FAILED: ;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:279  
     2080     6707    2   RGET_FAILED: ;
     2081     6708    2   OALLOC_FAILED: ;
     2082     6709    2   OFREE_FAILED: ;
     2083     6710    2   RADJUST_LENGTH_FAILED: ;
     2084     6711    2           ALTRETURN;

   6711  1 003157   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003160   000000 702211                    TSX2  ! 0,X1

     2085     6712
     2086     6713    2   END PREPARE_DESTINATION;
     2087     6714
     2088     6715        %BOX (TITLE=ABORT_INSERTION, PAGE=YES);
              6723    2
              6727    2   /***************************************************************************
              6729    2    *                                                                         *
              6733    2            *                              ABORT_INSERTION                           *
              6735    2            *                                                                        *
              6737    2          ***************************************************************************/

     2089     6741
     2090     6742        /*I* NAME: ABORT_INSERTION
     2091     6743            PARAMETERS:
     2092     6744                None.
     2093     6745            INPUT:
     2094     6746                FIRST_SRC_RECORD.EOR must be set if the first source record had an EOR;
     2095     6747                    reset otherwise or if we haven't read the first src record yet.
     2096     6748                DEST_EXISTS must be set if the given destination key exists in the file.
     2097     6749                DEST_RANGE_TYPE must contain a %BDT_ code indicating the configuration
     2098     6750                    of the given destination range.
     2099     6751                LAST_COPIED_KEY - Key of last source record which was successfully
     2100     6752                    copied to the destination range.  %CLEAR if no records yet copied.
     2101     6753                LAST_WRITTEN_KEY - Key of the last record successfully inserted into the
     2102     6754                    destination range.  This is the key with which the LAST_COPIED_KEY
     2103     6755                    record was written to the destination range.
     2104     6756                DEST_RIGHT$ - Ptr to VD$BUFFER containing the destRight record, if any.
     2105     6757                RECORD - If DEST_RIGHT$ is NIL and we should have had a destRight,
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:280  
     2106     6758                    then RECORD contains the destRight record (this happens if we get
     2107     6759                    an error while trying to actually write the destRight record to
     2108     6760                    the file).
     2109     6761                DEST_NEXT_KEY - Key of the next existing record after the destination
     2110     6762                    point.  If no records after destination point, DEST_NEXT_KEY
     2111     6763                    is key from DEST$EDIT_BLOCK.RANGE.ENDD.
     2112     6764            OUTPUT:
     2113     6765            DESCRIPTION:
     2114     6766                If we wrote any records to the destination, write an informational
     2115     6767                    message telling the user the src and dest keys of the last record
     2116     6768                    successfully copied.
     2117     6769                Set $LEFTOVER to the destRight data, if appropriate.
     2118     6770                    This data should have been inserted into the file, but couldn't
     2119     6771                    be inserted due to a cutoff or some other non-fatal error.
     2120     6772                    Under certain conditions, the original copy of destRight
     2121     6773                    in the destination file has been overwritten by now; in this case,
     2122     6774                    DEST_RIGHT$/RECORD.DATA$ should be saved for the user, since
     2123     6775                    otherwise the data would be lost.
     2124     6776                    The "certain conditions" are:
     2125     6777                        Given destination is nonBOR
     2126     6778                        AND  given destination exists
     2127     6779                        AND  1st/only source record did have an EOR.
     2128     6780                If destRight has been overwritten, but hasn't yet been rewritten in
     2129     6781                    its new location, save it in $LEFTOVER.
     2130     6782                If there was some part of SRC_RANGE which hasn't been copied yet,
     2131     6783                    set $NOT_COPIED to specify the uncopied data.  There are two cases:
     2132     6784                    1. LAST_COPIED_KEY = %CLEAR:  Nothing was copied; or
     2133     6785                    2. LAST_COPIED_KEY ~= %CLEAR:  srcFirst, and possibly some other
     2134     6786                        whole records from the source block, were copied successfully.
     2135     6787                        The not-yet-copied portion will always start on a record
     2136     6788                        boundary (tho it may not end on one).  Read forward from the
     2137     6789                        LAST_COPIED_KEY to find the beginning of the uncopied part
     2138     6790                        of the source block.
     2139     6791                Adjust SRC_RANGE to describe whatever part of the source block was
     2140     6792                    successfully copied.
     2141     6793                Adjust DEST_RANGE.ENDD to describe the data that was successfully
     2142     6794                    inserted in its new location in the destination.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:281  
     2143     6795                    (DEST_RANGE.START has already been set to the start of the inserted
     2144     6796                    data).
     2145     6797        */
     2146     6798
     2147     6799    1   ABORT_INSERTION: PROC ALTRET;

   6799  1 003161   200110 741300       ABORT_INSER* STX1  ! ERR_SUBST$+2,,AUTO

     2148     6800
     2149     6801        %VD$LOCATION (NAME=SRC_LOC, STCLASS=AUTO);
     2150     6829        %VD$RANGE (NAME=NOT_COPIED_RANGE, STCLASS=AUTO);
     2151     6898    2   DCL INDX UBIN;
     2152     6899    2   DCL STREAM_KEY$ PTR;
     2153     6900    2   DCL RANGE_ENDD_KEY$ PTR;
     2154     6901
     2155     6902
     2156     6903        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2157     6926        %VD$TEXTC (NAME=RANGE$ENDD_KEY, STCLASS="BASED(RANGE_ENDD_KEY$)");
     2158     6949        %VD$BUFFER;
     2159     7007        %VD$KEY;
     2160     7021
     2161     7022
     2162     7023
     2163     7024    3           IF LAST_COPIED_KEY ~= %CLEAR THEN DO;

   7024  1 003162   200056 237100                    LDAQ    LAST_COPIED_KEY,,AUTO
         1 003163   000002 117000 2                  CMPAQ   2
         1 003164   003332 600000 1                  TZE     s:7086

     2164     7025    3              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   7025  1 003165   200105 630500                    EPPR0   VD_ERR$,,AUTO
         1 003166   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 003167   000022 236000 2                  LDQ     18
         1 003170   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003171   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003172   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:282  
         1 003173   000000 701000 xent               TSX1    VDG$OALLOC
         1 003174   003705 702000 1                  TSX2    ALLOC_FAILED

     2165     7026    3                ALTRET (ALLOC_FAILED);
     2166     7027    3              VD$ERR.ERR.CODE# = %E$INFO_LAST_RECORD_COPIED;

   7027  1 003175   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 003176   000002 236100                    LDQ     2,,PR0
         1 003177   000023 376000 2                  ANQ     19
         1 003200   002330 276007                    ORQ     1240,DL
         1 003201   000002 756100                    STQ     2,,PR0

     2167     7028    3              VD$ERR.FLAGLEV# = %FLV_INFO;

   7028  1 003202   000001 220003                    LDX0    1,DU
         1 003203   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 003204   000003 740100                    STX0    3,,PR0

     2168     7029    3              ERR_SUBST$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   7029  1 003205   200105 236100                    LDQ     VD_ERR$,,AUTO
         1 003206   000005 036003                    ADLQ    5,DU
         1 003207   200106 756100                    STQ     ERR_SUBST$,,AUTO

     2169     7030
     2170     7031                   /* Allocate a buffer to hold 2 keys for errmsg substitution */
     2171     7032    3              INDX = 0;

   7032  1 003210   200144 450100                    STZ     INDX,,AUTO

     2172     7033    4              DO WHILE INDX < %MX_CMD_OBJECTS

   7033  1 003211   003215 710000 1                  TRA     s:7036

     2173     7034    4                AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2174     7035    4                 INDX = INDX + 1;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:283  
   7035  1 003212   200144 235100                    LDA     INDX,,AUTO
         1 003213   000001 035007                    ADLA    1,DL
         1 003214   200144 755100                    STA     INDX,,AUTO

     2175     7036    4                 END;

   7036  1 003215   200144 235100                    LDA     INDX,,AUTO
         1 003216   000062 115007                    CMPA    50,DL
         1 003217   003223 603000 1                  TRC     s:7037
         1 003220   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         1 003221   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003222   003212 601000 1                  TNZ     s:7035

     2176     7037    4              IF INDX > %MX_CMD_OBJECTS THEN DO;

   7037  1 003223   200144 235100                    LDA     INDX,,AUTO
         1 003224   000063 115007                    CMPA    51,DL
         1 003225   003231 602000 1                  TNC     s:7040

     2177     7038    4                 CALL VDG$ESCREECH;

   7038  1 003226   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 003227   000000 701000 xent               TSX1    VDG$ESCREECH
         1 003230   000000 011000                    NOP     0

     2178     7039    4                 END;

     2179     7040    3              CALL VDG$OALLOC (%CLS_BUFFER, VD_CMD_OBJECTS$ (INDX),

   7040  1 003231   000024 236000 2                  LDQ     20
         1 003232   200176 756100                    STQ     OPEN_OPTIONS+7,,AUTO
         1 003233   200144 720100                    LXL0    INDX,,AUTO
         1 003234   000000 630410 xsym               EPPR0   VD_CMD_OBJECTS$,X0
         1 003235   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 003236   000016 236000 2                  LDQ     14
         1 003237   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003240   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:284  
         1 003241   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 003242   000000 701000 xent               TSX1    VDG$OALLOC
         1 003243   003705 702000 1                  TSX2    ALLOC_FAILED

     2180     7041    3                SIZEW(VD$BUFFER_HEADER) + (2 * SIZEW(VD$KEY)))
     2181     7042    3                ALTRET (ALLOC_FAILED);
     2182     7043
     2183     7044    3              ERR$SUBST.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   7044  1 003244   000043 220003                    LDX0    35,DU
         1 003245   200106 470500                    LDP0    ERR_SUBST$,,AUTO
         1 003246   000000 740100                    STX0    0,,PR0

     2184     7045    3              ERR$SUBST.V$ (0) = PINCRW(VD_CMD_OBJECTS$(INDX),

   7045  1 003247   200144 721100                    LXL1    INDX,,AUTO
         1 003250   000000 236011 xsym               LDQ     VD_CMD_OBJECTS$,X1
         1 003251   000003 036003                    ADLQ    3,DU
         1 003252   000003 756100                    STQ     3,,PR0

     2185     7046    3                SIZEW(VD$BUFFER_HEADER));
     2186     7047                   %COPYKEY (FKEY=LAST_COPIED_KEY, TKEY="ERR$SUBST.V$ (0) -> VD$KEY");

   7060  1 003253   000003 471500                    LDP1    3,,PR0
         1 003254   200056 237100                    LDAQ    LAST_COPIED_KEY,,AUTO
         1 003255   100000 755100                    STA     0,,PR1
         1 003256   100001 756100                    STQ     1,,PR1

   7060  1 003257   200056 722100                    LXL2    LAST_COPIED_KEY,,AUTO
         1 003260   000002 102003                    CMPX2   2,DU
         1 003261   003276 601000 1                  TNZ     s:7064

   7060  1 003262   000003 471500                    LDP1    3,,PR0
         1 003263   100001 633500                    EPPR3   1,,PR1
         1 003264   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 003265   200057 236100                    LDQ     LAST_COPIED_KEY+1,,AUTO
         1 003266   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:285  
         1 003267   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003270   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003271   000000 701000 xent               TSX1    VDG$OCOPY
         1 003272   003274 702000 1                  TSX2    s:7061
         1 003273   003276 710000 1                  TRA     s:7064

   7061  1 003274   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003275   000000 702211                    TSX2  ! 0,X1

     2187     7063
     2188     7064    3              ERR$SUBST.OBJECT.CLASS# (1) = %CLS_PTR_KEY;

   7064  1 003276   000043 220003                    LDX0    35,DU
         1 003277   200106 470500                    LDP0    ERR_SUBST$,,AUTO
         1 003300   000004 740100                    STX0    4,,PR0

     2189     7065    3              ERR$SUBST.V$ (1) = PINCRW(ERR$SUBST.V$ (0), SIZEW(VD$KEY));

   7065  1 003301   000003 236100                    LDQ     3,,PR0
         1 003302   000002 036003                    ADLQ    2,DU
         1 003303   000007 756100                    STQ     7,,PR0

     2190     7066                   %COPYKEY (FKEY=LAST_WRITTEN_KEY, TKEY="ERR$SUBST.V$ (1) -> VD$KEY");

   7079  1 003304   000007 471500                    LDP1    7,,PR0
         1 003305   200060 237100                    LDAQ    LAST_WRITTEN_KEY,,AUTO
         1 003306   100000 755100                    STA     0,,PR1
         1 003307   100001 756100                    STQ     1,,PR1

   7079  1 003310   200060 721100                    LXL1    LAST_WRITTEN_KEY,,AUTO
         1 003311   000002 101003                    CMPX1   2,DU
         1 003312   003327 601000 1                  TNZ     s:7082

   7079  1 003313   000007 471500                    LDP1    7,,PR0
         1 003314   100001 633500                    EPPR3   1,,PR1
         1 003315   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 003316   200061 236100                    LDQ     LAST_WRITTEN_KEY+1,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:286  
         1 003317   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003320   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003321   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003322   000000 701000 xent               TSX1    VDG$OCOPY
         1 003323   003325 702000 1                  TSX2    s:7080
         1 003324   003327 710000 1                  TRA     s:7082

   7080  1 003325   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003326   000000 702211                    TSX2  ! 0,X1

     2191     7082    3              CALL VDG$EREPORT_ERROR;

   7082  1 003327   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 003330   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         1 003331   000000 011000                    NOP     0

     2192     7083    3              END;

     2193     7084
     2194     7085
     2195     7086    3           IF DEST_EXISTS AND FIRST_SRC_RECORD.EOR THEN DO;

   7086  1 003332   200037 234100                    SZN     DEST_EXISTS,,AUTO
         1 003333   003354 605000 1                  TPL     s:7107
         1 003334   200053 234100                    SZN     FIRST_SRC_RECORD+5,,AUTO
         1 003335   003354 605000 1                  TPL     s:7107

     2196     7087                   /*
     2197     7088                   *   We must have had a destRight; it must be saved, since its
     2198     7089                   *        original copy in the destination file has already been
     2199     7090                   *        overwritten.
     2200     7091                   *   Save either DEST_RIGHT$ or RECORD.DATA$ in $LEFTOVER, if
     2201     7092                   *        appropriate.
     2202     7093                   */
     2203     7094    4              IF DEST_RIGHT$ = ADDR(NIL) THEN DO;

   7094  1 003336   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:287  
         1 003337   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003340   003345 601000 1                  TNZ     s:7098

     2204     7095    4                 DEST_RIGHT$ = RECORD.DATA$;

   7095  1 003341   200031 236100                    LDQ     RECORD+4,,AUTO
         1 003342   200036 756100                    STQ     DEST_RIGHT$,,AUTO

     2205     7096    4                 RECORD.DATA$ = ADDR(NIL);

   7096  1 003343   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 003344   200031 756100                    STQ     RECORD+4,,AUTO

     2206     7097    4                 END;

     2207     7098    4              IF DEST_RIGHT$ ~= ADDR(NIL) THEN DO;

   7098  1 003345   200036 236100                    LDQ     DEST_RIGHT$,,AUTO
         1 003346   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003347   003354 600000 1                  TZE     s:7107

     2208     7099    4                 CALL SAVE_LEFTOVER (DEST_RIGHT$)

   7099  1 003350   200036 630500                    EPPR0   DEST_RIGHT$,,AUTO
         1 003351   200151 450500                    STP0    RANGE_ENDD_KEY$+3,,AUTO
         1 003352   004074 701000 1                  TSX1    SAVE_LEFTOVER
         1 003353   003705 702000 1                  TSX2    ALLOC_FAILED

     2209     7100    4                   ALTRET (SAVE_LEFTOVER_FAILED);
     2210     7101    4                 END;

     2211     7102    3              END;

     2212     7103
     2213     7104
     2214     7105                /* Shrink source to describe only the data that has been copied */
     2215     7106
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:288  
     2216     7107    3           IF LAST_COPIED_KEY = %CLEAR THEN DO;

   7107  1 003354   200056 237100                    LDAQ    LAST_COPIED_KEY,,AUTO
         1 003355   000002 117000 2                  CMPAQ   2
         1 003356   003403 601000 1                  TNZ     s:7123

     2217     7108                   /* Nothing was copied */
     2218     7109    3              CALL SAVE_NOT_COPIED (SRC_RANGE)

   7109  1 003357   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 003360   200151 756100                    STQ     RANGE_ENDD_KEY$+3,,AUTO
         1 003361   004371 701000 1                  TSX1    SAVE_NOT_COPIED
         1 003362   003705 702000 1                  TSX2    ALLOC_FAILED

     2219     7110    3                ALTRET (SAVE_NOT_COPIED_FAILED);
     2220     7111                   /* Make source an empty range */
     2221     7112    3              CALL VDG$OCLEAR_LOCATION (SRC_RANGE.ENDD)

   7112  1 003363   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 003364   000011 036003                    ADLQ    9,DU
         1 003365   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003366   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003367   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003370   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 003371   003705 702000 1                  TSX2    ALLOC_FAILED

     2222     7113    3                ALTRET (OCLEAR_LOCATION_FAILED);
     2223     7114    3              CALL VDG$OCOPY_LOCATION (SRC_RANGE.START, SRC_RANGE.ENDD)

   7114  1 003372   200003 236100                    LDQ     @SRC_RANGE,,AUTO
         1 003373   000011 036003                    ADLQ    9,DU
         1 003374   200003 235100                    LDA     @SRC_RANGE,,AUTO
         1 003375   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 003376   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003377   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003400   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 003401   003705 702000 1                  TSX2    ALLOC_FAILED
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:289  

     2224     7115    3                ALTRET (OCOPY_LOCATION_FAILED);
     2225     7116    3              END;

   7116  1 003402   003703 710000 1                  TRA     s:7265

     2226     7117    3           ELSE DO;

     2227     7118                   /*
     2228     7119                   *  Part of src copied, up to and including LAST_COPIED_KEY.
     2229     7120                   *  Read forward after LAST_COPIED_KEY, to find the beginning of
     2230     7121                   *    the uncopied portion, if any.
     2231     7122                   */
     2232     7123    3              SRC_LOC = %CLEAR;

   7123  1 003403   000100 100400                    MLR     fill='000'O
         1 003404   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 003405   200111 000044                    ADSC9   SRC_LOC,,AUTO            cn=0,n=36

     2233     7124                   %COPYKEY (FKEY=LAST_COPIED_KEY,
     2234     7125                   TKEY=SRC_LOC.KEY, TINDX=SRC_LEVEL-1);

   7138  1 003406   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003407   000001 735000                    ALS     1
         1 003410   000000 620005                    EAX0    0,AL
         1 003411   000000 621005                    EAX1    0,AL
         1 003412   200056 237100                    LDAQ    LAST_COPIED_KEY,,AUTO
         1 003413   200107 755110                    STA     ERR_SUBST$+1,X0,AUTO
         1 003414   200110 756111                    STQ     ERR_SUBST$+2,X1,AUTO

   7138  1 003415   200056 720100                    LXL0    LAST_COPIED_KEY,,AUTO
         1 003416   000002 100003                    CMPX0   2,DU
         1 003417   003435 601000 1                  TNZ     s:7142

   7138  1 003420   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003421   000001 735000                    ALS     1
         1 003422   200110 630505                    EPPR0   ERR_SUBST$+2,AL,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:290  
         1 003423   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 003424   200057 236100                    LDQ     LAST_COPIED_KEY+1,,AUTO
         1 003425   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003426   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003427   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003430   000000 701000 xent               TSX1    VDG$OCOPY
         1 003431   003433 702000 1                  TSX2    s:7139
         1 003432   003435 710000 1                  TRA     s:7142

   7139  1 003433   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003434   000000 702211                    TSX2  ! 0,X1

     2235     7141
     2236     7142    3              CALL VDA$LREAD (SRC_STREAM, SRC_LOC, 1, %FALSE)

   7142  1 003435   000020 237000 2                  LDAQ    16
         1 003436   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 003437   200111 630500                    EPPR0   SRC_LOC,,AUTO
         1 003440   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 003441   200004 236100                    LDQ     @SRC_STREAM,,AUTO
         1 003442   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003443   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003444   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 003445   000000 701000 xent               TSX1    VDA$LREAD
         1 003446   003705 702000 1                  TSX2    ALLOC_FAILED

     2237     7143    3                ALTRET (LREAD_FAILED);
     2238     7144
     2239     7145                   %GETKEY (KEY=SRC_STREAM.CURRENT.KEY, INDX=SRC_LEVEL-1,
     2240     7146                   PTR=STREAM_KEY$);

   7153  1 003447   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003450   000001 735000                    ALS     1
         1 003451   200004 470500                    LDP0    @SRC_STREAM,,AUTO
         1 003452   000004 720105                    LXL0    4,AL,PR0
         1 003453   000002 100003                    CMPX0   2,DU
         1 003454   003461 601000 1                  TNZ     s:7153+10
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:291  

   7153  1 003455   000005 471505                    LDP1    5,AL,PR0
         1 003456   100002 633500                    EPPR3   2,,PR1
         1 003457   200145 453500                    STP3    STREAM_KEY$,,AUTO
         1 003460   003466 710000 1                  TRA     s:7164

   7153  1 003461   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003462   000023 736000                    QLS     19
         1 003463   000005 036003                    ADLQ    5,DU
         1 003464   200004 036100                    ADLQ    @SRC_STREAM,,AUTO
         1 003465   200145 756100                    STQ     STREAM_KEY$,,AUTO

     2241     7156                   %GETKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1,
     2242     7157                   PTR=RANGE_ENDD_KEY$);

   7164  1 003466   200003 471500                    LDP1    @SRC_RANGE,,AUTO
         1 003467   100007 721105                    LXL1    7,AL,PR1
         1 003470   000002 101003                    CMPX1   2,DU
         1 003471   003476 601000 1                  TNZ     s:7164+8

   7164  1 003472   100010 473505                    LDP3    8,AL,PR1
         1 003473   300002 634500                    EPPR4   2,,PR3
         1 003474   200146 454500                    STP4    RANGE_ENDD_KEY$,,AUTO
         1 003475   003503 710000 1                  TRA     s:7168

   7164  1 003476   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003477   000023 736000                    QLS     19
         1 003500   000010 036003                    ADLQ    8,DU
         1 003501   200003 036100                    ADLQ    @SRC_RANGE,,AUTO
         1 003502   200146 756100                    STQ     RANGE_ENDD_KEY$,,AUTO

     2243     7167
     2244     7168    3              IF (NOT SRC_STREAM.CURRENT.EOF)

   7168  1 003503   000016 236100                    LDQ     14,,PR0
         1 003504   400000 316007                    CANQ    -131072,DL
         1 003505   003615 601000 1                  TNZ     s:7227
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:292  
         1 003506   200145 473500                    LDP3    STREAM_KEY$,,AUTO
         1 003507   300000 236100                    LDQ     0,,PR3
         1 003510   000033 772000                    QRL     27
         1 003511   200146 474500                    LDP4    RANGE_ENDD_KEY$,,AUTO
         1 003512   000000 622006                    EAX2    0,QL
         1 003513   400000 236100                    LDQ     0,,PR4
         1 003514   000033 772000                    QRL     27
         1 003515   000000 623006                    EAX3    0,QL
         1 003516   040140 106540                    CMPC    fill='040'O
         1 003517   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 003520   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         1 003521   003525 602000 1                  TNC     s:7179
         1 003522   003615 601000 1                  TNZ     s:7227
         1 003523   100021 224100                    LDX4    17,,PR1
         1 003524   003615 604400 1                  TMOZ    s:7227

     2245     7169    3                AND (STREAM$KEY.BYTES < RANGE$ENDD_KEY.BYTES
     2246     7170    3                OR (STREAM$KEY.BYTES = RANGE$ENDD_KEY.BYTES
     2247     7171    4                AND SRC_RANGE.ENDD.POSITION# > 0) ) THEN DO;

     2248     7172                      /*
     2249     7173                      *  There's an uncopied portion.
     2250     7174                      *  Because LAST_COPIED_KEY isn't %CLEAR, we know we've
     2251     7175                      *     copied at least one record; therefore, the uncopied portion
     2252     7176                      *     always begins at position 0 of the record after
     2253     7177                      *     LAST_COPIED_KEY (which is SRC_STREAM's current location).
     2254     7178                      */
     2255     7179    4                 NOT_COPIED_RANGE = SRC_RANGE;

   7179  1 003525   000100 100500                    MLR     fill='000'O
         1 003526   100000 000110                    ADSC9   0,,PR1                   cn=0,n=72
         1 003527   200122 000110                    ADSC9   NOT_COPIED_RANGE,,AUTO   cn=0,n=72

     2256     7180    4                 NOT_COPIED_RANGE.START.POSITION# = 0;

   7180  1 003530   000000 220003                    LDX0    0,DU
         1 003531   200132 740100                    STX0    TABLE_INDEX+1,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:293  

     2257     7181                      %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     2258     7182                      TKEY=NOT_COPIED_RANGE.START.KEY, TINDX=SRC_LEVEL-1);

   7195  1 003532   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003533   000003 736000                    QLS     3
         1 003534   000002 735000                    ALS     2
         1 003535   000105 100506                    MLR     fill='000'O
         1 003536   000004 000010                    ADSC9   4,Q,PR0                  cn=0,n=8
         1 003537   200120 000010                    ADSC9   DEST_NEXT_KEY$,A,AUTO    cn=0,n=8

   7195  1 003540   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003541   000001 735000                    ALS     1
         1 003542   000004 721105                    LXL1    4,AL,PR0
         1 003543   000002 101003                    CMPX1   2,DU
         1 003544   003560 601000 1                  TNZ     s:7212

   7195  1 003545   000005 475505                    LDP5    5,AL,PR0
         1 003546   200121 636505                    EPPR6   RECORD_KEY$,AL,AUTO
         1 003547   200175 456500                    STP6    OPEN_OPTIONS+6,,AUTO
         1 003550   200174 455500                    STP5    OPEN_OPTIONS+5,,AUTO
         1 003551   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003552   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003553   000000 701000 xent               TSX1    VDG$OCOPY
         1 003554   003556 702000 1                  TSX2    s:7196
         1 003555   003560 710000 1                  TRA     s:7212

   7196  1 003556   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003557   000000 702211                    TSX2  ! 0,X1

     2259     7198                      %COPYKEY (FKEY=SRC_RANGE.ENDD.KEY, FINDX=SRC_LEVEL-1,
     2260     7199                      TKEY=NOT_COPIED_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);

   7212  1 003560   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003561   000001 735000                    ALS     1
         1 003562   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003563   000003 736000                    QLS     3
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:294  
         1 003564   000002 735000                    ALS     2
         1 003565   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 003566   000105 100506                    MLR     fill='000'O
         1 003567   000007 000010                    ADSC9   7,Q,PR0                  cn=0,n=8
         1 003570   200131 000010                    ADSC9   TABLE_INDEX,A,AUTO       cn=0,n=8

   7212  1 003571   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003572   000001 735000                    ALS     1
         1 003573   000007 720105                    LXL0    7,AL,PR0
         1 003574   000002 100003                    CMPX0   2,DU
         1 003575   003611 601000 1                  TNZ     s:7215

   7212  1 003576   000010 471505                    LDP1    8,AL,PR0
         1 003577   200132 633505                    EPPR3   TABLE_INDEX+1,AL,AUTO
         1 003600   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 003601   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 003602   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003603   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003604   000000 701000 xent               TSX1    VDG$OCOPY
         1 003605   003607 702000 1                  TSX2    s:7213
         1 003606   003611 710000 1                  TRA     s:7215

   7213  1 003607   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003610   000000 702211                    TSX2  ! 0,X1

     2261     7215    4                 CALL SAVE_NOT_COPIED (NOT_COPIED_RANGE)

   7215  1 003611   200122 630500                    EPPR0   NOT_COPIED_RANGE,,AUTO
         1 003612   200151 450500                    STP0    RANGE_ENDD_KEY$+3,,AUTO
         1 003613   004371 701000 1                  TSX1    SAVE_NOT_COPIED
         1 003614   003705 702000 1                  TSX2    ALLOC_FAILED

     2262     7216    4                   ALTRET (SAVE_NOT_COPIED_FAILED);
     2263     7217    4                 END;

     2264     7218
     2265     7219                   /* Adjust SRC_RANGE to cover just the portion successfully copied */
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:295  
     2266     7220                   %CLEARKEY (KEY=SRC_RANGE.ENDD.KEY, INDX=SRC_LEVEL-1);

   7227  1 003615   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003616   000001 735000                    ALS     1
         1 003617   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 003620   000007 720105                    LXL0    7,AL,PR0
         1 003621   000002 100003                    CMPX0   2,DU
         1 003622   003634 601000 1                  TNZ     s:7228+2

   7227  1 003623   000010 471505                    LDP1    8,AL,PR0
         1 003624   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 003625   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003626   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003627   000000 701000 xent               TSX1    VDG$OFREE
         1 003630   003632 702000 1                  TSX2    s:7228
         1 003631   003634 710000 1                  TRA     s:7228+2

   7228  1 003632   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003633   000000 702211                    TSX2  ! 0,X1

   7228  1 003634   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003635   000001 735000                    ALS     1
         1 003636   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 003637   000007 450105                    STZ     7,AL,PR0
         1 003640   000010 450105                    STZ     8,AL,PR0

     2267     7230                   %COPYKEY (FKEY=SRC_STREAM.CURRENT.KEY, FINDX=SRC_LEVEL-1,
     2268     7231                   TKEY=SRC_RANGE.ENDD.KEY, TINDX=SRC_LEVEL-1);

   7244  1 003641   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003642   000003 736000                    QLS     3
         1 003643   000002 735000                    ALS     2
         1 003644   200004 471500                    LDP1    @SRC_STREAM,,AUTO
         1 003645   000105 100506                    MLR     fill='000'O
         1 003646   100004 000010                    ADSC9   4,Q,PR1                  cn=0,n=8
         1 003647   000007 000010                    ADSC9   7,A,PR0                  cn=0,n=8

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:296  
   7244  1 003650   200021 235100                    LDA     SRC_LEVEL,,AUTO
         1 003651   000001 735000                    ALS     1
         1 003652   100004 720105                    LXL0    4,AL,PR1
         1 003653   000002 100003                    CMPX0   2,DU
         1 003654   003673 601000 1                  TNZ     s:7247

   7244  1 003655   100005 473505                    LDP3    5,AL,PR1
         1 003656   200021 236100                    LDQ     SRC_LEVEL,,AUTO
         1 003657   000023 736000                    QLS     19
         1 003660   000010 036003                    ADLQ    8,DU
         1 003661   200003 036100                    ADLQ    @SRC_RANGE,,AUTO
         1 003662   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 003663   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 003664   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003665   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003666   000000 701000 xent               TSX1    VDG$OCOPY
         1 003667   003671 702000 1                  TSX2    s:7245
         1 003670   003673 710000 1                  TRA     s:7247

   7245  1 003671   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003672   000000 702211                    TSX2  ! 0,X1

     2269     7247    3              SRC_RANGE.ENDD.EOF = SRC_STREAM.CURRENT.EOF;

   7247  1 003673   200003 470500                    LDP0    @SRC_RANGE,,AUTO
         1 003674   200004 471500                    LDP1    @SRC_STREAM,,AUTO
         1 003675   100016 236100                    LDQ     14,,PR1
         1 003676   000021 676100                    ERQ     17,,PR0
         1 003677   400000 376007                    ANQ     -131072,DL
         1 003700   000021 656100                    ERSQ    17,,PR0

     2270     7248    3              SRC_RANGE.ENDD.POSITION# = 0;

   7248  1 003701   000000 220003                    LDX0    0,DU
         1 003702   000021 740100                    STX0    17,,PR0

     2271     7249    3              END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:297  

     2272     7250
     2273     7251                /*
     2274     7252                *N*   Adjust DEST_RANGE.ENDD to point to the end of the successfully
     2275     7253                *N*       copied data in the destination.
     2276     7254                *N*
     2277     7255                *N* %CLEARKEY (KEY=DEST_RANGE.ENDD.KEY, INDX=DEST_LEVEL-1);
     2278     7256                *N* %COPYKEY (FKEY=DEST_NEXT_KEY, TKEY=DEST_RANGE.ENDD.KEY,
     2279     7257                *N*     TINDX=DEST_LEVEL-1);
     2280     7258                *N* DEST_RANGE.ENDD.POSITION# = 0;
     2281     7259                *N* IF DEST_RANGE.ENDD.KEY (DEST_LEVEL-1) = <<<max edit key>>> THEN DO;
     2282     7260                *N*     DEST_RANGE.ENDD = %CLEAR;
     2283     7261                *N*     DEST_RANGE.ENDD.EOF = %TRUE;
     2284     7262                *N*     END;
     2285     7263                *N*/
     2286     7264
     2287     7265    2           RETURN;

   7265  1 003703   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003704   000001 702211                    TSX2  ! 1,X1

   7248  1 003705                       ALLOC_FAILED null
   7248  1 003705                       OCLEAR_LOCA* null
   7248  1 003705                       OCOPY_LOCAT* null
   7248  1 003705                       OFREE_FAILED null
   7248  1 003705                       LREAD_FAILED null
   7248  1 003705                       SAVE_LEFTOV* null
   7248  1 003705                       SAVE_NOT_CO* null
     2288     7266
     2289     7267
     2290     7268
     2291     7269    2   ALLOC_FAILED: ;
     2292     7270    2   OCLEAR_LOCATION_FAILED: ;
     2293     7271    2   OCOPY_LOCATION_FAILED: ;
     2294     7272    2   OFREE_FAILED: ;
     2295     7273    2   LREAD_FAILED: ;
     2296     7274    2   SAVE_LEFTOVER_FAILED: ;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:298  
     2297     7275    2   SAVE_NOT_COPIED_FAILED: ;
     2298     7276    2           ALTRETURN;

   7276  1 003705   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 003706   000000 702211                    TSX2  ! 0,X1

     2299     7277
     2300     7278    2   END ABORT_INSERTION;
     2301     7279
     2302     7280        %BOX (TITLE=APPEND, PAGE=YES);
              7288    2
              7292    2   /***************************************************************************
              7294    2    *                                                                         *
              7298    2            *                                   APPEND                               *
              7300    2            *                                                                        *
              7302    2          ***************************************************************************/

     2303     7306
     2304     7307        /*I* NAME: APPEND
     2305     7308            PARAMETERS:
     2306     7309                LEFT$ - Ptr to VD$BUFFER containing left part of record.
     2307     7310                RIGHT$ - Ptr to VD$BUFFER containing right part of record.
     2308     7311            INPUT:
     2309     7312            OUTPUT:
     2310     7313                LEFT$ may be changed; in any case, will point to a VD$BUFFER containing
     2311     7314                    the right part of the record appended to the left part.
     2312     7315                RIGHT$ will be NIL, and its VD$BUFFER freed.
     2313     7316            DESCRIPTION:
     2314     7317                Append RIGHT.BYTES to LEFT.BYTES.
     2315     7318        */
     2316     7319
     2317     7320    1   APPEND: PROC (LEFT$, RIGHT$) ALTRET;

   7320  1 003707   200110 741300       APPEND       STX1  ! ERR_SUBST$+2,,AUTO

     2318     7321
     2319     7322    2   DCL LEFT$ PTR;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:299  
     2320     7323    2   DCL RIGHT$ PTR;
     2321     7324    2   DCL NEW_LENGTH SBIN;
     2322     7325    2   DCL ALLOC_WDS SBIN;
     2323     7326    2   DCL CURSOR SBIN;
     2324     7327    2   DCL NEW_BUFFER$ PTR;
     2325     7328
     2326     7329
     2327     7330        %VD$BUFFER (NAME=LEFT, STCLASS="BASED(LEFT$)");
     2328     7388        %VD$BUFFER (NAME=RIGHT, STCLASS="BASED(RIGHT$)");
     2329     7446        %VD$BUFFER (NAME=NEW$BUFFER, STCLASS="BASED(NEW_BUFFER$)");
     2330     7504
     2331     7505
     2332     7506
     2333     7507    2           IF RIGHT$ = ADDR(NIL) THEN

   7507  1 003710   200112 470500                    LDP0    @RIGHT$,,AUTO
         1 003711   000000 236100                    LDQ     0,,PR0
         1 003712   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003713   003715 601000 1                  TNZ     s:7509

     2334     7508    2              RETURN;

   7508  1 003714   000001 702211                    TSX2  ! 1,X1

     2335     7509    3           IF RIGHT.LENGTH# > 0 THEN DO;

   7509  1 003715   000000 471500                    LDP1    0,,PR0
         1 003716   100002 220100                    LDX0    2,,PR1
         1 003717   004056 604400 1                  TMOZ    s:7536

     2336     7510
     2337     7511                   /* See if LEFT's buffer is big enough for concatenated record */
     2338     7512
     2339     7513    3              NEW_LENGTH = LEFT.LENGTH# + RIGHT.LENGTH#;

   7513  1 003720   200111 473500                    LDP3    @LEFT$,,AUTO
         1 003721   300000 474500                    LDP4    0,,PR3
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:300  
         1 003722   100002 236100                    LDQ     2,,PR1
         1 003723   000022 732000                    QRS     18
         1 003724   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003725   400002 236100                    LDQ     2,,PR4
         1 003726   000022 732000                    QRS     18
         1 003727   200174 036100                    ADLQ    OPEN_OPTIONS+5,,AUTO
         1 003730   200113 756100                    STQ     NEW_LENGTH,,AUTO

     2340     7514    3              ALLOC_WDS = (LENGTHC(VD$BUFFER_HEADER) + NEW_LENGTH + %NB_PER_WORD-1)

   7514  1 003731   000015 036007                    ADLQ    13,DL
         1 003732   000004 506007                    DIV     4,DL
         1 003733   200114 756100                    STQ     ALLOC_WDS,,AUTO

     2341     7515    3                / %NB_PER_WORD;
     2342     7516    4              IF ALLOC_WDS > LEFT.OBJECT.SIZE# THEN DO;

   7516  1 003734   300000 471500                    LDP1    0,,PR3
         1 003735   100000 236100                    LDQ     0,,PR1
         1 003736   000022 736000                    QLS     18
         1 003737   000022 732000                    QRS     18
         1 003740   200114 116100                    CMPQ    ALLOC_WDS,,AUTO
         1 003741   004001 605000 1                  TPL     s:7528

     2343     7517                      /* Need to allocate new buffer */
     2344     7518    4                 CALL VDG$OALLOC (%CLS_BUFFER, NEW_BUFFER$, ALLOC_WDS)

   7518  1 003742   200114 634500                    EPPR4   ALLOC_WDS,,AUTO
         1 003743   200176 454500                    STP4    OPEN_OPTIONS+7,,AUTO
         1 003744   200116 631500                    EPPR1   NEW_BUFFER$,,AUTO
         1 003745   200175 451500                    STP1    OPEN_OPTIONS+6,,AUTO
         1 003746   000016 236000 2                  LDQ     14
         1 003747   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 003750   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003751   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 003752   000000 701000 xent               TSX1    VDG$OALLOC
         1 003753   004072 702000 1                  TSX2    OALLOC_FAILED
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:301  

     2345     7519    4                   ALTRET (OALLOC_FAILED);
     2346     7520    4                 NEW$BUFFER.LENGTH# = LEFT.LENGTH#;

   7520  1 003754   200111 470500                    LDP0    @LEFT$,,AUTO
         1 003755   000000 471500                    LDP1    0,,PR0
         1 003756   100002 220100                    LDX0    2,,PR1
         1 003757   200116 473500                    LDP3    NEW_BUFFER$,,AUTO
         1 003760   300002 740100                    STX0    2,,PR3

     2347     7521    4                 NEW$BUFFER.BYTES = LEFT.BYTES;

   7521  1 003761   200116 471500                    LDP1    NEW_BUFFER$,,AUTO
         1 003762   100002 220100                    LDX0    2,,PR1
         1 003763   000000 473500                    LDP3    0,,PR0
         1 003764   300002 221100                    LDX1    2,,PR3
         1 003765   040140 100540                    MLR     fill='040'O
         1 003766   300002 400011                    ADSC9   2,,PR3                   cn=2,n=*X1
         1 003767   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0

     2348     7522    4                 CALL VDG$OFREE (LEFT)

   7522  1 003770   000000 471500                    LDP1    0,,PR0
         1 003771   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 003772   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 003773   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003774   000000 701000 xent               TSX1    VDG$OFREE
         1 003775   004072 702000 1                  TSX2    OALLOC_FAILED

     2349     7523    4                   ALTRET (OFREE_FAILED);
     2350     7524    4                 LEFT$ = NEW_BUFFER$;

   7524  1 003776   200116 236100                    LDQ     NEW_BUFFER$,,AUTO
         1 003777   200111 470500                    LDP0    @LEFT$,,AUTO
         1 004000   000000 756100                    STQ     0,,PR0

     2351     7525    4                 END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:302  

     2352     7526
     2353     7527                   /* Append RIGHT.BYTES to LEFT.BYTES */
     2354     7528    3              CURSOR = LEFT.LENGTH#;

   7528  1 004001   200111 470500                    LDP0    @LEFT$,,AUTO
         1 004002   000000 471500                    LDP1    0,,PR0
         1 004003   100002 236100                    LDQ     2,,PR1
         1 004004   000022 732000                    QRS     18
         1 004005   200115 756100                    STQ     CURSOR,,AUTO

     2355     7529    3              LEFT.LENGTH# = NEW_LENGTH;

   7529  1 004006   000000 471500                    LDP1    0,,PR0
         1 004007   200113 720100                    LXL0    NEW_LENGTH,,AUTO
         1 004010   100002 740100                    STX0    2,,PR1

     2356     7530    3              CALL INSERT (LEFT.BYTES, CURSOR, , RIGHT.BYTES)

   7530  1 004011   000000 471500                    LDP1    0,,PR0
         1 004012   100002 220100                    LDX0    2,,PR1
         1 004013   200112 473500                    LDP3    @RIGHT$,,AUTO
         1 004014   300000 474500                    LDP4    0,,PR3
         1 004015   400002 221100                    LDX1    2,,PR4
         1 004016   000000 636010                    EAQ     0,X0
         1 004017   000022 732000                    QRS     18
         1 004020   200115 136100                    SBLQ    CURSOR,,AUTO
         1 004021   000000 622006                    EAX2    0,QL
         1 004022   200115 235100                    LDA     CURSOR,,AUTO
         1 004023   040145 100540                    MLR     fill='040'O
         1 004024   400002 400011                    ADSC9   2,,PR4                   cn=2,n=*X1
         1 004025   100002 400012                    ADSC9   2,A,PR1                  cn=2,n=*X2
         1 004026   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004027   000000 636011                    EAQ     0,X1
         1 004030   000022 732000                    QRS     18
         1 004031   000011 402007                    MPY     9,DL
         1 004032   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:303  
         1 004033   200174 236100                    LDQ     OPEN_OPTIONS+5,,AUTO
         1 004034   000011 402007                    MPY     9,DL
         1 004035   200175 116100                    CMPQ    OPEN_OPTIONS+6,,AUTO
         1 004036   004040 604000 1                  TMI     s:7532
         1 004037   004056 710000 1                  TRA     s:7536

     2357     7531    4              WHENALTRETURN DO;

     2358     7532    4                 CALL VDG$ESCREECH (CURSOR, RIGHT.BYTES, NEW_LENGTH);

   7532  1 004040   200112 470500                    LDP0    @RIGHT$,,AUTO
         1 004041   000000 471500                    LDP1    0,,PR0
         1 004042   200113 633500                    EPPR3   NEW_LENGTH,,AUTO
         1 004043   200176 453500                    STP3    OPEN_OPTIONS+7,,AUTO
         1 004044   200177 451500                    STP1    OPEN_OPTIONS+8,,AUTO
         1 004045   200177 236100                    LDQ     OPEN_OPTIONS+8,,AUTO
         1 004046   000025 036000 2                  ADLQ    21
         1 004047   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 004050   200115 634500                    EPPR4   CURSOR,,AUTO
         1 004051   200174 454500                    STP4    OPEN_OPTIONS+5,,AUTO
         1 004052   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004053   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 004054   000000 701000 xent               TSX1    VDG$ESCREECH
         1 004055   000000 011000                    NOP     0

     2359     7533    4                 END;

     2360     7534
     2361     7535    3              END;

     2362     7536    2           CALL VDG$OFREE (RIGHT)

   7536  1 004056   200112 470500                    LDP0    @RIGHT$,,AUTO
         1 004057   000000 471500                    LDP1    0,,PR0
         1 004060   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 004061   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004062   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:304  
         1 004063   000000 701000 xent               TSX1    VDG$OFREE
         1 004064   004072 702000 1                  TSX2    OALLOC_FAILED

     2363     7537    2             ALTRET (OFREE_FAILED);
     2364     7538    2           RIGHT$ = ADDR(NIL);

   7538  1 004065   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 004066   200112 470500                    LDP0    @RIGHT$,,AUTO
         1 004067   000000 756100                    STQ     0,,PR0

     2365     7539
     2366     7540    2           RETURN;

   7540  1 004070   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 004071   000001 702211                    TSX2  ! 1,X1

   7538  1 004072                       OALLOC_FAIL* null
   7538  1 004072                       OFREE_FAILED null
     2367     7541
     2368     7542
     2369     7543    2   OALLOC_FAILED: ;
     2370     7544    2   OFREE_FAILED: ;
     2371     7545    2           ALTRETURN;

   7545  1 004072   200110 221300                    LDX1  ! ERR_SUBST$+2,,AUTO
         1 004073   000000 702211                    TSX2  ! 0,X1

     2372     7546
     2373     7547    2   END APPEND;
     2374     7548
     2375     7549                %BOX (TITLE=SAVE_LEFTOVER, PAGE=YES);
              7557    2
              7561    2   /***************************************************************************
              7563    2    *                                                                         *
              7567    2            *                               SAVE_LEFTOVER                            *
              7569    2            *                                                                        *
              7571    2          ***************************************************************************/
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:305  

     2376     7575
     2377     7576        /*I* NAME: SAVE_LEFTOVER
     2378     7577            PARAMETERS:
     2379     7578                REC_TO_SAVE$ - Ptr to a VD$BUFFER which contains the record data to be
     2380     7579                    saved.  This record is assumed to include an EOR.
     2381     7580            INPUT:
     2382     7581            OUTPUT:
     2383     7582                REC_TO_SAVE$ will be NIL, and its buffer either freed or owned by the
     2384     7583                    internal file now.
     2385     7584            DESCRIPTION:
     2386     7585                Save a [partial] record under the name $LEFTOVER.
     2387     7586                To allow the user to just say:
     2388     7587                    COPY $LEFTOVER AFTER ...
     2389     7588                $LEFTOVER must be a name.  But we want to save a record, including an
     2390     7589                EOR boundary; this can only be done in an internal file.  Therefore,
     2391     7590                we build an internal file containing the record data to save, then
     2392     7591                set the predefined LOCATION-name $LEFTOVER to specify the entire
     2393     7592                internal file (all 1 record of it).
     2394     7593
     2395     7594                Also, write an informational message to tell the user what we've done.
     2396     7595        */
     2397     7596
     2398     7597    1   SAVE_LEFTOVER: PROC (REC_TO_SAVE$) ALTRET;

   7597  1 004074   200150 741300       SAVE_LEFTOV* STX1  ! RANGE_ENDD_KEY$+2,,AUTO

     2399     7598
     2400     7599    2   DCL REC_TO_SAVE$ PTR;
     2401     7600
     2402     7601
     2403     7602    2   DCL SAVE_ACCESSOR_PRIV UBIN BYTE ALIGNED;
     2404     7603    2   DCL LEFTOVER_STREAM$ PTR;
     2405     7604    2   DCL BLOCK_BUFFER$ PTR;
     2406     7605    2   DCL LEFTOVER_BLOCK$ PTR;
     2407     7606        %VD$LOCATION (NAME=LOC, STCLASS=AUTO);
     2408     7634        %VD$ACCESS_OPTIONS (NAME=OPEN_OPTIONS, STCLASS=AUTO);
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:306  
     2409     7663
     2410     7664
     2411     7665        %VD$BUFFER (NAME=REC$TO_SAVE, STCLASS="BASED(REC_TO_SAVE$)");
     2412     7723        %VD$STREAM (NAME=LEFTOVER$STREAM, STCLASS="BASED(LEFTOVER_STREAM$)");
     2413     7829        %VD$BUFFER (NAME=BLOCK$BUFFER, STCLASS="BASED(BLOCK_BUFFER$)");
     2414     7887        %VD$BLOCK_DESC (NAME=LEFTOVER$BLOCK, STCLASS="BASED(LEFTOVER_BLOCK$)");
     2415     8034        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     2416     8140        %VD$PORT;
     2417     8238        %VD$BUFFER;
     2418     8296
     2419     8297
     2420     8298
     2421     8299    2           LEFTOVER_STREAM$ = ADDR(NIL);

   8299  1 004075   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 004076   200153 756100                    STQ     LEFTOVER_STREAM$,,AUTO

     2422     8300    2           BLOCK_BUFFER$ = ADDR(NIL);

   8300  1 004077   200154 756100                    STQ     BLOCK_BUFFER$,,AUTO

     2423     8301
     2424     8302    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;

   8302  1 004100   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         1 004101   000033 772000                    QRL     27
         1 004102   000033 736000                    QLS     27
         1 004103   200152 756100                    STQ     SAVE_ACCESSOR_PRIV,,AUTO

     2425     8303    2           VD_ACCESSOR_PRIV = %BITBIN(NAC_ALL_BITS);

   8303  1 004104   777000 236003                    LDQ     -512,DU
         1 004105   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     2426     8304
     2427     8305                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2428     8306                /*!!!!!                                                 !!!!!*/
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:307  
     2429     8307                /*!!!!!     From here on, any exits must restore        !!!!!*/
     2430     8308                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2431     8309                /*!!!!!          to its original value.                 !!!!!*/
     2432     8310
     2433     8311
     2434     8312                /* Build the internal file */
     2435     8313    2           CALL VDG$OALLOC (%CLS_STREAM, LEFTOVER_STREAM$)

   8313  1 004106   200153 630500                    EPPR0   LEFTOVER_STREAM$,,AUTO
         1 004107   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 004110   000027 236000 2                  LDQ     23
         1 004111   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004112   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004113   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004114   000000 701000 xent               TSX1    VDG$OALLOC
         1 004115   004363 702000 1                  TSX2    OFREE_FAILED

     2436     8314    2             ALTRET (OALLOC_FAILED);
     2437     8315    2           OPEN_OPTIONS = %CLEAR;

   8315  1 004116   000100 100400                    MLR     fill='000'O
         1 004117   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 004120   200167 000024                    ADSC9   OPEN_OPTIONS,,AUTO       cn=0,n=20

     2438     8316    2           OPEN_OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;

   8316  1 004121   000012 236000 xsym               LDQ     VD_6E+10
         1 004122   200167 756100                    STQ     OPEN_OPTIONS,,AUTO

     2439     8317    2           OPEN_OPTIONS.PROTECT# = %DONT_PROTECT;

   8317  1 004123   000002 220003                    LDX0    2,DU
         1 004124   200171 740100                    STX0    OPEN_OPTIONS+2,,AUTO

     2440     8318    2           OPEN_OPTIONS.EXIST# = %EX_ANY;

   8318  1 004125   000003 221003                    LDX1    3,DU
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:308  
         1 004126   200171 441100                    SXL1    OPEN_OPTIONS+2,,AUTO

     2441     8319    2           CALL VDA$FOPEN (LEFTOVER$STREAM, VD_KEY_SCRATCH_LEFTOVER, 0,

   8319  1 004127   200167 630500                    EPPR0   OPEN_OPTIONS,,AUTO
         1 004130   200177 450500                    STP0    OPEN_OPTIONS+8,,AUTO
         1 004131   000000 236000 2                  LDQ     0
         1 004132   200176 756100                    STQ     OPEN_OPTIONS+7,,AUTO
         1 004133   000030 236000 2                  LDQ     24
         1 004134   200153 235100                    LDA     LEFTOVER_STREAM$,,AUTO
         1 004135   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 004136   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004137   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 004140   000000 701000 xent               TSX1    VDA$FOPEN
         1 004141   004337 702000 1                  TSX2    FOPEN_FAILED

     2442     8320    2             OPEN_OPTIONS)
     2443     8321    2             ALTRET (FOPEN_FAILED);
     2444     8322
     2445     8323    2           LOC = %CLEAR;

   8323  1 004142   000100 100400                    MLR     fill='000'O
         1 004143   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 004144   200156 000044                    ADSC9   LOC,,AUTO                cn=0,n=36

     2446     8324    2           LOC.KEY (%LVL_LOWER - 1) = VD_KEY_NUMERIC_BOF;

   8324  1 004145   000100 100400                    MLR     fill='000'O
         1 004146   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 004147   200156 000010                    ADSC9   LOC,,AUTO                cn=0,n=8

     2447     8325    2           CALL VDA$LWRITE (LEFTOVER$STREAM, LOC, , REC$TO_SAVE)

   8325  1 004150   200151 470500                    LDP0    @REC_TO_SAVE$,,AUTO
         1 004151   000000 471500                    LDP1    0,,PR0
         1 004152   200177 451500                    STP1    OPEN_OPTIONS+8,,AUTO
         1 004153   000001 236000 xsym               LDQ     B_VECTNIL+1
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:309  
         1 004154   200176 756100                    STQ     OPEN_OPTIONS+7,,AUTO
         1 004155   200156 633500                    EPPR3   LOC,,AUTO
         1 004156   200175 453500                    STP3    OPEN_OPTIONS+6,,AUTO
         1 004157   200153 236100                    LDQ     LEFTOVER_STREAM$,,AUTO
         1 004160   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004161   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004162   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 004163   000000 701000 xent               TSX1    VDA$LWRITE
         1 004164   004333 702000 1                  TSX2    LWRITE_LEFTOVER_FAILED

     2448     8326    2             ALTRET (LWRITE_LEFTOVER_FAILED);
     2449     8327    2           REC_TO_SAVE$ = ADDR(NIL);   /* Object owned by internal file now */

   8327  1 004165   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 004166   200151 470500                    LDP0    @REC_TO_SAVE$,,AUTO
         1 004167   000000 756100                    STQ     0,,PR0

     2450     8328
     2451     8329    2           CALL VDA$FCLOSE (LEFTOVER$STREAM)

   8329  1 004170   200153 630500                    EPPR0   LEFTOVER_STREAM$,,AUTO
         1 004171   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004172   000000 701000 xent               TSX1    VDA$FCLOSE
         1 004173   004337 702000 1                  TSX2    FOPEN_FAILED

     2452     8330    2             ALTRET (FCLOSE_FAILED);
     2453     8331    2           CALL VDG$OFREE (LEFTOVER$STREAM)

   8331  1 004174   200153 630500                    EPPR0   LEFTOVER_STREAM$,,AUTO
         1 004175   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004176   000000 701000 xent               TSX1    VDG$OFREE
         1 004177   004363 702000 1                  TSX2    OFREE_FAILED

     2454     8332    2             ALTRET (OFREE_FAILED);
     2455     8333    2           LEFTOVER_STREAM$ = ADDR(NIL);

   8333  1 004200   000001 236000 xsym               LDQ     B_VECTNIL+1
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:310  
         1 004201   200153 756100                    STQ     LEFTOVER_STREAM$,,AUTO

     2456     8334
     2457     8335                /* Now set $LEFTOVER name to specify the internal file */
     2458     8336    2           CALL VDG$OALLOC (%CLS_BLOCK_BUFFER, BLOCK_BUFFER$)

   8336  1 004202   200154 630500                    EPPR0   BLOCK_BUFFER$,,AUTO
         1 004203   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 004204   000012 236000 2                  LDQ     10
         1 004205   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004206   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004207   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004210   000000 701000 xent               TSX1    VDG$OALLOC
         1 004211   004363 702000 1                  TSX2    OFREE_FAILED

     2459     8337    2             ALTRET (OALLOC_FAILED);
     2460     8338
     2461     8339    2           LEFTOVER_BLOCK$ = PALIGNW (ADDR(BLOCK$BUFFER.BYTES));

   8339  1 004212   200154 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004213   000025 036000 2                  ADLQ    21
         1 004214   770000 036007                    ADLQ    -4096,DL
         1 004215   000031 376000 2                  ANQ     25
         1 004216   200155 756100                    STQ     LEFTOVER_BLOCK$,,AUTO

     2462     8340    2           LEFTOVER$BLOCK.FILE_KEY = VD_KEY_SCRATCH_LEFTOVER;

   8340  1 004217   200155 470500                    LDP0    LEFTOVER_BLOCK$,,AUTO
         1 004220   000100 100400                    MLR     fill='000'O
         1 004221   000000 000010 xsym               ADSC9   VD_KEY_SCRATCH_LEFTOVER  cn=0,n=8
         1 004222   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8

     2463     8341                %COPYKEY (FKEY=VD_KEY_NUMERIC_BOF,
     2464     8342                TKEY=LEFTOVER$BLOCK.RANGE.START.KEY, TINDX=%LVL_LOWER-1);

   8355  1 004223   000100 100400                    MLR     fill='000'O
         1 004224   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:311  
         1 004225   000003 000010                    ADSC9   3,,PR0                   cn=0,n=8

   8355  1 004226   000000 720000 xsym               LXL0    VD_KEY_NUMERIC_BOF
         1 004227   000002 100003                    CMPX0   2,DU
         1 004230   004243 601000 1                  TNZ     s:8358

   8355  1 004231   000004 036003                    ADLQ    4,DU
         1 004232   000001 235000 xsym               LDA     VD_KEY_NUMERIC_BOF+1
         1 004233   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 004234   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004235   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004236   000000 701000 xent               TSX1    VDG$OCOPY
         1 004237   004241 702000 1                  TSX2    s:8356
         1 004240   004243 710000 1                  TRA     s:8358

   8356  1 004241   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004242   000000 702211                    TSX2  ! 0,X1

     2465     8358    2           LEFTOVER$BLOCK.RANGE.ENDD.EOF = %TRUE;

   8358  1 004243   200155 470500                    LDP0    LEFTOVER_BLOCK$,,AUTO
         1 004244   400000 236007                    LDQ     -131072,DL
         1 004245   000024 256100                    ORSQ    20,,PR0

     2466     8359    2           LEFTOVER$BLOCK.OPTIONS = OPEN_OPTIONS;

   8359  1 004246   000100 100500                    MLR     fill='000'O
         1 004247   200167 000024                    ADSC9   OPEN_OPTIONS,,AUTO       cn=0,n=20
         1 004250   000025 000024                    ADSC9   21,,PR0                  cn=0,n=20

     2467     8360    2           LEFTOVER$BLOCK.OPTIONS.PROTECT# = %PROTECT;

   8360  1 004251   000001 220003                    LDX0    1,DU
         1 004252   000027 740100                    STX0    23,,PR0

     2468     8361    2           LEFTOVER$BLOCK.OPTIONS.EXIST# = %EX_OLD;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:312  
   8361  1 004253   000002 221003                    LDX1    2,DU
         1 004254   000027 441100                    SXL1    23,,PR0

     2469     8362
     2470     8363    2           CALL VDA$LWRITE (LOCATIONS$STREAM, VD_LOC_$LEFTOVER, , BLOCK$BUFFER)

   8363  1 004255   200154 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004256   000001 235000 xsym               LDA     B_VECTNIL+1
         1 004257   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 004260   000032 236000 2                  LDQ     26
         1 004261   000002 235000 xsym               LDA     VD_6E+2
         1 004262   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 004263   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004264   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 004265   000000 701000 xent               TSX1    VDA$LWRITE
         1 004266   004337 702000 1                  TSX2    FOPEN_FAILED

     2471     8364    2             ALTRET (LWRITE_FAILED);
     2472     8365    2           BLOCK_BUFFER$ = ADDR(NIL);  /* Object now owned by Locations file */

   8365  1 004267   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 004270   200154 756100                    STQ     BLOCK_BUFFER$,,AUTO

     2473     8366    2           CALL VDA$PFLUSH (LOCATIONS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

   8366  1 004271   000002 470400 xsym               LDP0    VD_6E+2
         1 004272   000001 471500                    LDP1    1,,PR0
         1 004273   000000 236000 2                  LDQ     0
         1 004274   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 004275   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 004276   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004277   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004300   000000 701000 xent               TSX1    VDA$PFLUSH
         1 004301   004337 702000 1                  TSX2    FOPEN_FAILED

     2474     8367    2             ALTRET (PFLUSH_FAILED);
     2475     8368
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:313  
     2476     8369    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   8369  1 004302   200152 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 004303   000033 772000                    QRL     27
         1 004304   000033 736000                    QLS     27
         1 004305   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     2477     8370
     2478     8371                /*!!!!!         Its safe now, we've restored            !!!!!*/
     2479     8372                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2480     8373                /*!!!!!          to its original value.                 !!!!!*/
     2481     8374                /*!!!!!                                                 !!!!!*/
     2482     8375                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2483     8376
     2484     8377
     2485     8378                /* Now tell the user what we've done */
     2486     8379    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   8379  1 004306   200105 630500                    EPPR0   VD_ERR$,,AUTO
         1 004307   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 004310   000022 236000 2                  LDQ     18
         1 004311   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004312   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004313   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004314   000000 701000 xent               TSX1    VDG$OALLOC
         1 004315   004367 702000 1                  TSX2    OALLOC_ERR_FAILED

     2487     8380    2             ALTRET (OALLOC_ERR_FAILED);
     2488     8381    2           VD$ERR.ERR.CODE# = %E$INFO_DATA_IN_$LEFTOVER;

   8381  1 004316   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 004317   000002 236100                    LDQ     2,,PR0
         1 004320   000023 376000 2                  ANQ     19
         1 004321   002340 276007                    ORQ     1248,DL
         1 004322   000002 756100                    STQ     2,,PR0

     2489     8382    2           VD$ERR.FLAGLEV# = %FLV_INFO;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:314  

   8382  1 004323   000001 220003                    LDX0    1,DU
         1 004324   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 004325   000003 740100                    STX0    3,,PR0

     2490     8383    2           CALL VDG$EREPORT_ERROR;

   8383  1 004326   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 004327   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         1 004330   000000 011000                    NOP     0

     2491     8384
     2492     8385    2           RETURN;

   8385  1 004331   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004332   000001 702211                    TSX2  ! 1,X1

     2493     8386
     2494     8387
     2495     8388
     2496     8389    2   LWRITE_LEFTOVER_FAILED:
     2497     8390    2           CALL VDA$FCLOSE (LEFTOVER$STREAM);  /* Ignore altreturn */

   8390  1 004333   200153 630500       LWRITE_LEFT* EPPR0   LEFTOVER_STREAM$,,AUTO
         1 004334   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004335   000000 701000 xent               TSX1    VDA$FCLOSE
         1 004336   000000 011000                    NOP     0

   8382  1 004337                       FOPEN_FAILED null
   8382  1 004337                       FCLOSE_FAIL* null
   8382  1 004337                       LWRITE_FAIL* null
   8382  1 004337                       PFLUSH_FAIL* null
     2498     8391
     2499     8392    2   FOPEN_FAILED: ;
     2500     8393    2   FCLOSE_FAILED: ;
     2501     8394    2   LWRITE_FAILED: ;
     2502     8395    2   PFLUSH_FAILED: ;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:315  
     2503     8396    3           IF LEFTOVER_STREAM$ ~= ADDR(NIL) THEN DO;

   8396  1 004337   200153 236100                    LDQ     LEFTOVER_STREAM$,,AUTO
         1 004340   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 004341   004351 600000 1                  TZE     s:8400

     2504     8397    3              CALL VDG$OFREE (LEFTOVER$STREAM)

   8397  1 004342   200153 630500                    EPPR0   LEFTOVER_STREAM$,,AUTO
         1 004343   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004344   000000 701000 xent               TSX1    VDG$OFREE
         1 004345   004347 702000 1                  TSX2    s:8398
         1 004346   004351 710000 1                  TRA     s:8400

     2505     8398    4              WHENALTRETURN DO; ALTRETURN; END;

   8398  1 004347   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004350   000000 702211                    TSX2  ! 0,X1

     2506     8399    3              END;

     2507     8400    3           IF BLOCK_BUFFER$ ~= ADDR(NIL) THEN DO;

   8400  1 004351   200154 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004352   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 004353   004363 600000 1                  TZE     OFREE_FAILED

     2508     8401    3              CALL VDG$OFREE (BLOCK$BUFFER)

   8401  1 004354   200154 630500                    EPPR0   BLOCK_BUFFER$,,AUTO
         1 004355   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004356   000000 701000 xent               TSX1    VDG$OFREE
         1 004357   004361 702000 1                  TSX2    s:8402
         1 004360   004363 710000 1                  TRA     OFREE_FAILED

     2509     8402    4              WHENALTRETURN DO; ALTRETURN; END;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:316  
   8402  1 004361   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004362   000000 702211                    TSX2  ! 0,X1

     2510     8403    3              END;

   8400  1 004363                       OFREE_FAILED null
   8400  1 004363                       OALLOC_FAIL* null
     2511     8404
     2512     8405    2   OFREE_FAILED: ;
     2513     8406    2   OALLOC_FAILED: ;
     2514     8407    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   8407  1 004363   200152 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 004364   000033 772000                    QRL     27
         1 004365   000033 736000                    QLS     27
         1 004366   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

   8407  1 004367                       OALLOC_ERR_* null
     2515     8408
     2516     8409    2   OALLOC_ERR_FAILED: ;
     2517     8410    2           ALTRETURN;

   8410  1 004367   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004370   000000 702211                    TSX2  ! 0,X1

     2518     8411
     2519     8412    2   END SAVE_LEFTOVER;
     2520     8413
     2521     8414                %BOX (TITLE=SAVE_NOT_COPIED, PAGE=YES);
              8422    2
              8426    2   /***************************************************************************
              8428    2    *                                                                         *
              8432    2            *                              SAVE_NOT_COPIED                           *
              8434    2            *                                                                        *
              8436    2          ***************************************************************************/

     2522     8440
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:317  
     2523     8441        /*I* NAME: SAVE_NOT_COPIED
     2524     8442            PARAMETERS:
     2525     8443                RANGE - VD$RANGE to be saved as the value of $NOT_COPIED.
     2526     8444                    This range must within the range specified by the source EditBlock.
     2527     8445            INPUT:
     2528     8446                SRC$EDIT_BLOCK - VD$BLOCK_DESC for the EditBlock which encloses the
     2529     8447                    source block.
     2530     8448                SRC_LEVEL - Level in file structure of the source block.
     2531     8449            OUTPUT:
     2532     8450            DESCRIPTION:
     2533     8451                Set the value of the predefined Location-name $NOT_COPIED to be
     2534     8452                RANGE, which must be in the source EditBlock.
     2535     8453
     2536     8454                Also, write an informational message to tell the user what we've done.
     2537     8455        */
     2538     8456
     2539     8457    1   SAVE_NOT_COPIED: PROC (RANGE) ALTRET;

   8457  1 004371   200150 741300       SAVE_NOT_CO* STX1  ! RANGE_ENDD_KEY$+2,,AUTO

     2540     8458
     2541     8459        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2542     8528
     2543     8529
     2544     8530    2   DCL BLOCK_BUFFER$ PTR;
     2545     8531    2   DCL SRC_BLOCK$ PTR;
     2546     8532    2   DCL SAVE_ACCESSOR_PRIV UBIN BYTE ALIGNED;
     2547     8533
     2548     8534
     2549     8535        %VD$BUFFER (NAME=BLOCK$BUFFER, STCLASS="BASED(BLOCK_BUFFER$)");
     2550     8593        %VD$BLOCK_DESC (NAME=SRC$BLOCK, STCLASS="BASED(SRC_BLOCK$)");
     2551     8740        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     2552     8846        %VD$BUFFER;
     2553     8904        %VD$PORT;
     2554     9002
     2555     9003
     2556     9004    2           CALL VDG$OALLOC (%CLS_BLOCK_BUFFER, BLOCK_BUFFER$)
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:318  

   9004  1 004372   200152 630500                    EPPR0   BLOCK_BUFFER$,,AUTO
         1 004373   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 004374   000012 236000 2                  LDQ     10
         1 004375   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004376   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004377   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004400   000000 701000 xent               TSX1    VDG$OALLOC
         1 004401   004575 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2557     9005    2             ALTRET (OALLOC_FAILED);
     2558     9006    2           SRC_BLOCK$ = PALIGNW(ADDR(BLOCK$BUFFER.BYTES));

   9006  1 004402   200152 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004403   000025 036000 2                  ADLQ    21
         1 004404   770000 036007                    ADLQ    -4096,DL
         1 004405   000031 376000 2                  ANQ     25
         1 004406   200153 756100                    STQ     SRC_BLOCK$,,AUTO

     2559     9007
     2560     9008    2           SRC$BLOCK = SRC$EDIT_BLOCK;

   9008  1 004407   000022 470400 xsym               LDP0    VD_6E+18
         1 004410   200153 471500                    LDP1    SRC_BLOCK$,,AUTO
         1 004411   000100 100500                    MLR     fill='000'O
         1 004412   000000 000150                    ADSC9   0,,PR0                   cn=0,n=104
         1 004413   100000 000150                    ADSC9   0,,PR1                   cn=0,n=104

     2561     9009                %COPYKEY (FKEY=SRC$EDIT_BLOCK.FILE_KEY, TKEY=SRC$BLOCK.FILE_KEY);

   9022  1 004414   000022 470400 xsym               LDP0    VD_6E+18
         1 004415   000100 100500                    MLR     fill='000'O
         1 004416   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
         1 004417   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8

   9022  1 004420   000022 470400 xsym               LDP0    VD_6E+18
         1 004421   000001 720100                    LXL0    1,,PR0
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:319  
         1 004422   000002 100003                    CMPX0   2,DU
         1 004423   004437 601000 1                  TNZ     s:9039

   9022  1 004424   000002 473500                    LDP3    2,,PR0
         1 004425   000002 036003                    ADLQ    2,DU
         1 004426   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 004427   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 004430   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004431   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004432   000000 701000 xent               TSX1    VDG$OCOPY
         1 004433   004435 702000 1                  TSX2    s:9023
         1 004434   004437 710000 1                  TRA     s:9039

   9023  1 004435   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004436   000000 702211                    TSX2  ! 0,X1

     2562     9025                %COPYKEY (FKEY=SRC$EDIT_BLOCK.OPTIONS.KEY_INCR,
     2563     9026                TKEY=SRC$BLOCK.OPTIONS.KEY_INCR);

   9039  1 004437   000022 470400 xsym               LDP0    VD_6E+18
         1 004440   200153 471500                    LDP1    SRC_BLOCK$,,AUTO
         1 004441   000100 100500                    MLR     fill='000'O
         1 004442   000030 000010                    ADSC9   24,,PR0                  cn=0,n=8
         1 004443   100030 000010                    ADSC9   24,,PR1                  cn=0,n=8

   9039  1 004444   000030 720100                    LXL0    24,,PR0
         1 004445   000002 100003                    CMPX0   2,DU
         1 004446   004463 601000 1                  TNZ     s:9042

   9039  1 004447   000031 473500                    LDP3    25,,PR0
         1 004450   200153 236100                    LDQ     SRC_BLOCK$,,AUTO
         1 004451   000031 036003                    ADLQ    25,DU
         1 004452   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 004453   200174 453500                    STP3    OPEN_OPTIONS+5,,AUTO
         1 004454   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004455   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004456   000000 701000 xent               TSX1    VDG$OCOPY
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:320  
         1 004457   004461 702000 1                  TSX2    s:9040
         1 004460   004463 710000 1                  TRA     s:9042

   9040  1 004461   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004462   000000 702211                    TSX2  ! 0,X1

     2564     9042    2           CALL VDG$OCOPY_RANGE (RANGE, SRC$BLOCK.RANGE)

   9042  1 004463   200153 236100                    LDQ     SRC_BLOCK$,,AUTO
         1 004464   000003 036003                    ADLQ    3,DU
         1 004465   200151 235100                    LDA     @RANGE,,AUTO
         1 004466   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 004467   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004470   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004471   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 004472   004575 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2565     9043    2             ALTRET (OCOPY_RANGE_FAILED);
     2566     9044
     2567     9045    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;

   9045  1 004473   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         1 004474   000033 772000                    QRL     27
         1 004475   000033 736000                    QLS     27
         1 004476   200154 756100                    STQ     SAVE_ACCESSOR_PRIV,,AUTO

     2568     9046    2           VD_ACCESSOR_PRIV = %BITBIN(NAC_ALL_BITS);

   9046  1 004477   777000 236003                    LDQ     -512,DU
         1 004500   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     2569     9047
     2570     9048                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2571     9049                /*!!!!!                                                 !!!!!*/
     2572     9050                /*!!!!!     From here on, any exits must restore        !!!!!*/
     2573     9051                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2574     9052                /*!!!!!          to its original value.                 !!!!!*/
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:321  
     2575     9053
     2576     9054    2           CALL VDA$LWRITE (LOCATIONS$STREAM, VD_LOC_$NOT_COPIED, , BLOCK$BUFFER)

   9054  1 004501   200152 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004502   000001 235000 xsym               LDA     B_VECTNIL+1
         1 004503   200176 757100                    STAQ    OPEN_OPTIONS+7,,AUTO
         1 004504   000033 236000 2                  LDQ     27
         1 004505   000002 235000 xsym               LDA     VD_6E+2
         1 004506   200174 757100                    STAQ    OPEN_OPTIONS+5,,AUTO
         1 004507   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004510   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 004511   000000 701000 xent               TSX1    VDA$LWRITE
         1 004512   004557 702000 1                  TSX2    LWRITE_FAILED

     2577     9055    2             ALTRET (LWRITE_FAILED);
     2578     9056    2           BLOCK_BUFFER$ = ADDR(NIL);  /* Object now owned by Locations file */

   9056  1 004513   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 004514   200152 756100                    STQ     BLOCK_BUFFER$,,AUTO

     2579     9057    2           CALL VDA$PFLUSH (LOCATIONS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

   9057  1 004515   000002 470400 xsym               LDP0    VD_6E+2
         1 004516   000001 471500                    LDP1    1,,PR0
         1 004517   000000 236000 2                  LDQ     0
         1 004520   200175 756100                    STQ     OPEN_OPTIONS+6,,AUTO
         1 004521   200174 451500                    STP1    OPEN_OPTIONS+5,,AUTO
         1 004522   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004523   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004524   000000 701000 xent               TSX1    VDA$PFLUSH
         1 004525   004571 702000 1                  TSX2    PFLUSH_FAILED

     2580     9058    2             ALTRET (PFLUSH_FAILED);
     2581     9059
     2582     9060    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   9060  1 004526   200154 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:322  
         1 004527   000033 772000                    QRL     27
         1 004530   000033 736000                    QLS     27
         1 004531   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     2583     9061
     2584     9062                /*!!!!!         Its safe now, we've restored            !!!!!*/
     2585     9063                /*!!!!!            VD_ACCESSOR_PRIV                     !!!!!*/
     2586     9064                /*!!!!!          to its original value.                 !!!!!*/
     2587     9065                /*!!!!!                                                 !!!!!*/
     2588     9066                /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     2589     9067
     2590     9068    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   9068  1 004532   200105 630500                    EPPR0   VD_ERR$,,AUTO
         1 004533   200175 450500                    STP0    OPEN_OPTIONS+6,,AUTO
         1 004534   000022 236000 2                  LDQ     18
         1 004535   200174 756100                    STQ     OPEN_OPTIONS+5,,AUTO
         1 004536   200174 630500                    EPPR0   OPEN_OPTIONS+5,,AUTO
         1 004537   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 004540   000000 701000 xent               TSX1    VDG$OALLOC
         1 004541   004575 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2591     9069    2             ALTRET (OALLOC_FAILED);
     2592     9070    2           VD$ERR.ERR.CODE# = %E$INFO_DATA_IN_$NOT_COPIED;

   9070  1 004542   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 004543   000002 236100                    LDQ     2,,PR0
         1 004544   000023 376000 2                  ANQ     19
         1 004545   002410 276007                    ORQ     1288,DL
         1 004546   000002 756100                    STQ     2,,PR0

     2593     9071    2           VD$ERR.FLAGLEV# = %FLV_INFO;

   9071  1 004547   000001 220003                    LDX0    1,DU
         1 004550   200105 470500                    LDP0    VD_ERR$,,AUTO
         1 004551   000003 740100                    STX0    3,,PR0

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:323  
     2594     9072    2           CALL VDG$EREPORT_ERROR;

   9072  1 004552   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 004553   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         1 004554   000000 011000                    NOP     0

     2595     9073
     2596     9074    2           RETURN;

   9074  1 004555   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004556   000001 702211                    TSX2  ! 1,X1

   9071  1 004557                       LWRITE_FAIL* null
     2597     9075
     2598     9076
     2599     9077
     2600     9078    2   LWRITE_FAILED: ;
     2601     9079    3           IF BLOCK_BUFFER$ ~= ADDR(NIL) THEN DO;

   9079  1 004557   200152 236100                    LDQ     BLOCK_BUFFER$,,AUTO
         1 004560   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 004561   004571 600000 1                  TZE     PFLUSH_FAILED

     2602     9080    3              CALL VDG$OFREE (BLOCK$BUFFER)

   9080  1 004562   200152 630500                    EPPR0   BLOCK_BUFFER$,,AUTO
         1 004563   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 004564   000000 701000 xent               TSX1    VDG$OFREE
         1 004565   004567 702000 1                  TSX2    s:9081
         1 004566   004571 710000 1                  TRA     PFLUSH_FAILED

     2603     9081    4              WHENALTRETURN DO; ALTRETURN; END;

   9081  1 004567   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004570   000000 702211                    TSX2  ! 0,X1

     2604     9082    3              END;
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:324  

   9079  1 004571                       PFLUSH_FAIL* null
     2605     9083
     2606     9084    2   PFLUSH_FAILED: ;
     2607     9085    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   9085  1 004571   200154 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 004572   000033 772000                    QRL     27
         1 004573   000033 736000                    QLS     27
         1 004574   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

   9085  1 004575                       OCOPY_RANGE* null
   9085  1 004575                       OALLOC_FAIL* null
   9085  1 004575                       OALLOC_ERR_* null
     2608     9086
     2609     9087    2   OCOPY_RANGE_FAILED: ;
     2610     9088    2   OALLOC_FAILED: ;
     2611     9089    2   OALLOC_ERR_FAILED: ;
     2612     9090    2           ALTRETURN;

   9090  1 004575   200150 221300                    LDX1  ! RANGE_ENDD_KEY$+2,,AUTO
         1 004576   000000 702211                    TSX2  ! 0,X1
     2613     9091
     2614     9092    2   END SAVE_NOT_COPIED;
     2615     9093
     2616     9094    1   END VDI$BINSERT;
     2617     9095        %EOD;

PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:325  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BINSERT.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:326  

 **** Variables and constants ****

  ****  Section 000 RoData VDI$BINSERT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 INCR_521_TABLE(0:25)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @DEST_RANGE                6-0-0/w PTR         r     1 @DEST_STREAM
   111-0-0/w PTR         r     1 @INCR                    111-0-0/w PTR         r     1 @LEFT$
   151-0-0/w PTR         r     1 @RANGE                   151-0-0/w PTR         r     1 @REC_TO_SAVE$
   112-0-0/w PTR         r     1 @RIGHT$                    3-0-0/w PTR         r     1 @SRC_RANGE
     4-0-0/w PTR         r     1 @SRC_STREAM              115-0-0/w SBIN        r     1 ALLOC_WDS
   114-0-0/w SBIN        r     1 ALLOC_WDS                154-0-0/w PTR         r     1 BLOCK_BUFFER$
   152-0-0/w PTR         r     1 BLOCK_BUFFER$            115-0-0/w SBIN        r     1 CURSOR
    12-0-0/w PTR         r     1 DEST_EDIT_BLOCK$          40-0-0/b BIT         r     1 DEST_EOR
    37-0-0/w BIT         r     1 DEST_EXISTS               23-0-0/w PTR         r     1 DEST_FILE_KEY$
   111-0-0/w PTR         r     1 DEST_GIVEN_KEY$           41-0-0/w SBIN        r     1 DEST_KEY_SPACE
    33-0-0/w SBIN        r     1 DEST_LEFT_LENGTH          20-0-0/w SBIN        r     1 DEST_LEVEL
    34-0-0/w STRC(72)    r     1 DEST_NEXT_KEY            111-0-0/w PTR         r     1 DEST_NEXT_KEY$
   120-0-0/w PTR         r     1 DEST_NEXT_KEY$            13-0-0/w STRC(180)   r     1 DEST_OPTIONS
    *0-0-0/w STRC(648)   r     1 DEST_RANGE                36-0-0/w PTR         r     1 DEST_RIGHT$
   114-0-0/w SBIN        r     1 DEST_RIGHT_LENGTH         *0-0-0/w STRC(864)   r     1 DEST_STREAM
    11-0-0/w SBIN        r     1 END_POS_OF_INSERTED_DATA
   106-0-0/w PTR         r     1 ERR_SUBST$                46-0-0/w STRC(216)   r     1 FIRST_SRC_RECORD
     7-0-0/w BIT         r     1 FIRST_TIME_THRU_MAIN_LOOP
    42-0-0/w SBIN        r     1 GENERATE_KEY              *0-0-0/w STRC(72)    r     1 INCR
   124-0-0/w SBIN        r     1 INCREMENT                144-0-0/w UBIN        r     1 INDX
    56-0-0/w STRC(72)    r     1 LAST_COPIED_KEY           60-0-0/w STRC(72)    r     1 LAST_WRITTEN_KEY
    *0-0-0/w PTR         r     1 LEFT$                    155-0-0/w PTR         r     1 LEFTOVER_BLOCK$
   153-0-0/w PTR         r     1 LEFTOVER_STREAM$         156-0-0/w STRC(324)   r     1 LOC
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:327  
   125-0-0/w SBIN        r     1 MAX_RECS_CAN_FIT          43-0-0/b BIT         r     1 MY_EOF_DELETED
   116-0-0/w PTR         r     1 NEW_BUFFER$              113-0-0/w SBIN        r     1 NEW_LENGTH
   122-0-0/w STRC(648)   r     1 NOT_COPIED_RANGE         167-0-0/w STRC(180)   r     1 OPEN_OPTIONS
    10-0-0/w BIT         r     1 OUTSIDE_SRC_RANGE         44-0-0/w BIT         r     1 PREVIOUS_SRC_EOR
    *0-0-0/w STRC(648)   r     1 RANGE                    146-0-0/w PTR         r     1 RANGE_ENDD_KEY$
    24-0-0/w SBIN        r     1 RCCL                      25-0-0/w STRC(216)   r     1 RECORD
   121-0-0/w PTR         r     1 RECORD_KEY$              113-0-0/w PTR         r     1 RECORD_KEY$
    *0-0-0/w PTR         r     1 REC_TO_SAVE$              *0-0-0/w PTR         r     1 RIGHT$
   152-0-0/w UBIN(9)     r     1 SAVE_ACCESSOR_PRIV       154-0-0/w UBIN(9)     r     1 SAVE_ACCESSOR_PRIV
   153-0-0/w PTR         r     1 SRC_BLOCK$               123-0-0/w PTR         r     1 SRC_END_KEY$
    45-0-0/w BIT         r     1 SRC_EOR                   22-0-0/w PTR         r     1 SRC_FILE_KEY$
    54-0-0/w STRC(72)    r     1 SRC_KEY_OF_RECORD         21-0-0/w SBIN        r     1 SRC_LEVEL
   111-0-0/w STRC(324)   r     1 SRC_LOC                   *0-0-0/w STRC(648)   r     1 SRC_RANGE
   122-0-0/w PTR         r     1 SRC_START_KEY$            *0-0-0/w STRC(864)   r     1 SRC_STREAM
   126-0-0/w PTR         r     1 SRC_STREAM_KEY$          145-0-0/w PTR         r     1 STREAM_KEY$
   131-0-0/w SBIN        r     1 TABLE_INDEX              105-0-0/w PTR         r     1 VD_ERR$
   112-0-0/w STRC(828)   r     1 XLATE$LOC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$BY                     0-0-0/w STRC(144)   r     1 VD_$RECORDS_INSERTED
     0-0-0/w STRC(144)   r     1 VD_$REKEY                  0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w UBIN(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$         0-0-0/b BIT         r     1 VD_EOF_DELETED
     0-0-0/w STRC(72)    r     1 VD_KEY_MN_EDITKEY          0-0-0/w STRC(72)    r     1 VD_KEY_MX_EDITKEY
     0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF
     0-0-0/w STRC(72)    r     1 VD_KEY_SCRATCH_LEFTOVER
     0-0-0/w STRC(324)   r     1 VD_LOC_$LEFTOVER           0-0-0/w STRC(324)   r     1 VD_LOC_$NOT_COPIED

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:328  

     0-0-0/w ASTR(90)    r     1 BLOCK$BUFFER               0-0-0/w ASTR(90)    r     1 BLOCK$BUFFER
     0-0-0/w STRC(936)   r     1 DEST$EDIT_BLOCK            0-0-0/w ASTR(9)     r     1 DEST$GIVEN_KEY
     0-0-0/w STRC        r     1 DEST$NEXT_KEY              0-0-0/w STRC        r     1 DEST$NEXT_KEY
     0-0-0/w ASTR(90)    r     1 DEST$RIGHT                 0-0-0/w ASTR(90)    r     1 DEST$RIGHT
     0-0-0/w STRC(144)   r     1 ERR$SUBST(0:2)
     0-0-0/w STRC(180)   r     1 LAST$ERR                   0-0-0/w ASTR(90)    r     1 LEFT
     0-0-0/w STRC(936)   r     1 LEFTOVER$BLOCK             0-0-0/w STRC(864)   r     1 LEFTOVER$STREAM
     0-0-0/w STRC(864)   r     1 LOCATIONS$STREAM           0-0-0/w STRC(864)   r     1 LOCATIONS$STREAM
     0-0-0/w ASTR(90)    r     1 NEW$BUFFER                 0-0-0/w ASTR(9)     r     1 RANGE$ENDD_KEY
     0-0-0/w ASTR(90)    r     1 REC$TO_SAVE                0-0-0/w ASTR(90)    r     1 RECORD$DATA
     0-0-0/w ASTR(90)    r     1 RECORD$DATA                0-0-0/w STRC        r     1 RECORD$KEY
     0-0-0/w ASTR(9)     r     1 RECORD$KEY                 0-0-0/w ASTR(90)    r     1 RIGHT
     0-0-0/w STRC(936)   r     1 SRC$BLOCK                  0-0-0/w STRC(936)   r     1 SRC$EDIT_BLOCK
     0-0-0/w ASTR(9)     r     1 SRC$END_KEY                0-0-0/w ASTR(9)     r     1 SRC$START_KEY
     0-0-0/w ASTR(9)     r     1 SRC$STREAM_KEY             0-0-0/w ASTR(9)     r     1 STREAM$KEY
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(1116)  r     1 VD$IT_BLOCK_EXPR
     0-0-0/w STRC(72)    r     1 VD$KEY                     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(9)     r     1 VD$TEXTC                   0-0-0/w STRC        r     1 VD$TEXTC_NUMBER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w STRC(900)   r     1 VD$WINDOW_SPEC


   Procedure VDI$BINSERT requires 2431 words for executable code.
   Procedure VDI$BINSERT requires 130 words of local(AUTO) storage.
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:329  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:330  
          MINI XREF LISTING

ABORT_INSERTION
      6799**PROC     5220--CALL
ADJUST_INCREMENT
      5771**PROC     4759--CALL     4779--CALL
ADJUST_INCREMENT_FAILED
      5219**LABEL    4759--CALLALT  4779--CALLALT
ALLOC_FAILED IN PROCEDURE ABORT_INSERTION
      7248**LABEL    7025--CALLALT  7040--CALLALT
ALLOC_WDS IN PROCEDURE APPEND
      7325**DCL      7514<<ASSIGN   7516>>IF       7518<>CALL
ALLOC_WDS IN PROCEDURE PREPARE_DESTINATION
      6253**DCL      6571<<ASSIGN   6573<>CALL
ALTRETURN_FROM_MAIN_LOOP
      5218**LABEL    4997--GOTO     5102--CALLALT  5104--CALLALT
APPEND
      7320**PROC     4795--CALL     4987--CALL
APPEND_FAILED
      5219**LABEL    4795--CALLALT  4987--CALLALT
BAUTO_REKEY_FAILED
      5219**LABEL    4773--CALLALT
BLOCK$BUFFER IN PROCEDURE SAVE_LEFTOVER
      7854**DCL      8363<>CALL     8401<>CALL
BLOCK$BUFFER.BYTES IN PROCEDURE SAVE_LEFTOVER
      7882**DCL      8339--ASSIGN
BLOCK$BUFFER.LENGTH# IN PROCEDURE SAVE_LEFTOVER
      7880**DCL      7882--IMP-SIZ  8363>>CALL     8401>>CALL
BLOCK$BUFFER IN PROCEDURE SAVE_NOT_COPIED
      8560**DCL      9054<>CALL     9080<>CALL
BLOCK$BUFFER.BYTES IN PROCEDURE SAVE_NOT_COPIED
      8588**DCL      9006--ASSIGN
BLOCK$BUFFER.LENGTH# IN PROCEDURE SAVE_NOT_COPIED
      8586**DCL      8588--IMP-SIZ  9054>>CALL     9080>>CALL
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:331  
BLOCK_BUFFER$ IN PROCEDURE SAVE_LEFTOVER
      7604**DCL      7854--IMP-PTR  8300<<ASSIGN   8336<>CALL     8339>>ASSIGN   8363>>CALL     8363>>CALL
      8365<<ASSIGN   8400>>IF       8401>>CALL     8401>>CALL
BLOCK_BUFFER$ IN PROCEDURE SAVE_NOT_COPIED
      8530**DCL      8560--IMP-PTR  9004<>CALL     9006>>ASSIGN   9054>>CALL     9054>>CALL     9056<<ASSIGN
      9079>>IF       9080>>CALL     9080>>CALL
CLEANUP
      5602**PROC     4748--CALL     4776--CALL     5184--CALL     5206--CALL     5221--CALL     5235--CALL
CLEANUP_FAILED
      5240**LABEL    4748--CALLALT  5184--CALLALT  5206--CALLALT  5221--CALLALT  5235--CALLALT
COMPARE_LOCS_FAILED
      5240**LABEL    4865--CALLALT
COUNT_LOOP IN PROCEDURE ADJUST_INCREMENT
      6065**LABEL    6070--EXIT
CURSOR IN PROCEDURE APPEND
      7326**DCL      7528<<ASSIGN   7530>>CALLBLT  7532<>CALL
DEST$EDIT_BLOCK.FILE_KEY
      3742**DCL      5513>>ASSIGN
DEST$EDIT_BLOCK.OPTIONS
      3825**DCL      4688>>ASSIGN   4693>>ASSIGN
DEST$EDIT_BLOCK.RANGE
      3756**DCL      4991<>CALL     6473<>CALL
DEST$EDIT_BLOCK.RANGE.ENDD.EOF
      3812**DCL      4692<<ASSIGN   5517<<ASSIGN   6622>>IF
DEST$EDIT_BLOCK.RANGE.ENDD.KEY
      3808**DCL      6639>>ASSIGN
DEST$EDIT_BLOCK.RANGE.ENDD.KEY.REP#
      3810**DCL      6639>>IF
DEST$EDIT_BLOCK.RANGE.ENDD.KEY.V$
      3810**DCL      6639>>CALL     6639>>CALL
DEST$EDIT_BLOCK.RANGE.ENDD.POSITION#
      3812**DCL      5516>>IF
DEST$EDIT_BLOCK.RANGE.START
      3768**DCL      5048<>CALL     5468<>CALL
DEST$EDIT_BLOCK.RANGE.START.KEY
      3780**DCL      5515>>ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:332  
DEST$GIVEN_KEY IN PROCEDURE PREPARE_DESTINATION
      6264**DCL      6486>>IF
DEST$GIVEN_KEY.LENGTH# IN PROCEDURE PREPARE_DESTINATION
      6272**DCL      6274--IMP-SIZ  6486>>IF
DEST$NEXT_KEY.BYTES# IN PROCEDURE ADJUST_INCREMENT
      5853**DCL      5975>>ASSIGN
DEST$NEXT_KEY.BYTES# IN PROCEDURE SET_DEST_END
      5322**DCL      5494>>IF
DEST$RIGHT.LENGTH#
      3954**DCL      3956--IMP-SIZ
DEST$RIGHT.BYTES IN PROCEDURE PREPARE_DESTINATION
      6355**DCL      6577<<ASSIGN
DEST$RIGHT.LENGTH# IN PROCEDURE PREPARE_DESTINATION
      6353**DCL      6355--IMP-SIZ  6575<<ASSIGN   6577>>ASSIGN
DEST_EDIT_BLOCK$
      3292**DCL      3706--IMP-PTR  4681<<ASSIGN   4688>>ASSIGN   4691<<ASSIGN   4692>>ASSIGN   4693>>ASSIGN
      4991>>CALL     5048>>CALL     5468>>CALL     5513>>ASSIGN   5515>>ASSIGN   5516>>IF       5517>>ASSIGN
      6473>>CALL     6622>>IF       6639>>ASSIGN   6639>>IF       6639>>CALL     6639>>CALL
DEST_EOR
      3386**DCL      4954>>ASSIGN   5116>>ASSIGN   6560<<ASSIGN
DEST_EXISTS
      3385**DCL      4955>>IF       5117>>IF       5523>>IF       5963>>IF       5978>>IF       6423<<ASSIGN
      6490<<ASSIGN   6548<<ASSIGN   6656>>IF       6676<<ASSIGN   7086>>IF
DEST_FILE_KEY$
      3325**DCL      4860<<ASSIGN   4860<<ASSIGN   4863>>IF       4863>>IF
DEST_GIVEN_KEY$ IN PROCEDURE PREPARE_DESTINATION
      6249**DCL      6264--IMP-PTR  6434<<ASSIGN   6434<<ASSIGN   6486>>IF       6486>>IF
DEST_KEY_SPACE
      3387**DCL      4773<>CALL     5975<<ASSIGN   5977<<ASSIGN   5977>>ASSIGN   5979<<ASSIGN   5979>>ASSIGN
      6019>>IF       6020>>ASSIGN   6031>>ASSIGN   6101<<ASSIGN
DEST_LEFT_LENGTH
      3369**DCL      5080>>ASSIGN   6421<<ASSIGN   6539<<ASSIGN   6540>>IF       6541<>CALL     6558<<ASSIGN
      6561>>IF       6568>>ASSIGN   6577>>ASSIGN   6582<>CALL     6656>>IF
DEST_LEVEL
      3322**DCL      4712<<ASSIGN   5046>>IF       5060>>IF       5060>>CALL     5060>>CALL     5061>>ASSIGN
      5077>>ASSIGN   5077>>CALL     5466>>IF       5478>>IF       5478>>CALL     5478>>CALL     5479>>ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:333  
      5502>>ASSIGN   5507>>ASSIGN   5514>>ASSIGN   5519>>ASSIGN   5522>>ASSIGN   5530>>ASSIGN   6434>>IF
      6434>>ASSIGN   6434>>ASSIGN   6463>>ASSIGN   6463>>IF       6463>>CALL     6463>>CALL     6531>>ASSIGN
      6531>>IF       6531>>CALL     6531>>CALL     6603>>ASSIGN   6603>>IF       6603>>CALL     6603>>CALL
      6639>>ASSIGN   6639>>IF       6639>>CALL     6639>>CALL     6677>>IF       6697>>ASSIGN   6697>>IF
      6697>>CALL     6697>>CALL
DEST_NEXT_KEY
      3378**DCL      4670<<ASSIGN   4982>>ASSIGN   4991<>CALL     5502>>ASSIGN   5503<<ASSIGN   5648<<ASSIGN
      6516<<ASSIGN   6603<<ASSIGN   6621>>IF       6623<<ASSIGN   6639<<ASSIGN   6669<<ASSIGN   6671<<ASSIGN
DEST_NEXT_KEY.REP#
      3382**DCL      4982>>IF       5491>>IF       5647>>IF       5972>>IF       6668>>IF
DEST_NEXT_KEY.TYPE#
      3382**DCL      5494>>IF
DEST_NEXT_KEY.V$
      3382**DCL      4982>>CALL     4982>>CALL     5491>>ASSIGN   5491--ASSIGN   5647>>CALL     5647>>CALL
      5972>>ASSIGN   5972--ASSIGN   6603<>CALL     6639<>CALL     6668>>CALL     6668>>CALL     6677>>IF
DEST_NEXT_KEY$ IN PROCEDURE ADJUST_INCREMENT
      5832**DCL      5849--IMP-PTR  5972<<ASSIGN   5972<<ASSIGN   5975>>ASSIGN
DEST_NEXT_KEY$ IN PROCEDURE SET_DEST_END
      5307**DCL      5318--IMP-PTR  5491<<ASSIGN   5491<<ASSIGN   5494>>IF
DEST_OPTIONS
      3301**DCL      4667<<ASSIGN   4684<<ASSIGN   4688<<ASSIGN   4693<<ASSIGN   4773<>CALL     4991<>CALL
DEST_OPTIONS.KEY_INCR
      3317**DCL      4709<<ASSIGN   4709>>ASSIGN   4759<>CALL     4768--ASSIGN   4779<>CALL     5612<<ASSIGN
DEST_OPTIONS.KEY_INCR.REP#
      3319**DCL      4709>>IF       5611>>IF
DEST_OPTIONS.KEY_INCR.TYPE#
      3319**DCL      4761>>IF       4765<<ASSIGN
DEST_OPTIONS.KEY_INCR.V$
      3319**DCL      4709>>CALL     4709>>CALL     4709<>CALL     5611>>CALL     5611>>CALL
DEST_OPTIONS.LEVEL#
      3305**DCL      4712>>ASSIGN
DEST_RANGE
      2757**DCL       200--PROC     4660--ENTRY
DEST_RANGE.ENDD
      2799**DCL      4721<>CALL     4865<>CALL     5463<>CALL     5468<>CALL     5496<>CALL     6444<>CALL
      6471<>CALL     6674<>CALL
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:334  
DEST_RANGE.ENDD.EOF
      2815**DCL      5498<<ASSIGN   5542<<ASSIGN   5546<<ASSIGN   6438>>IF
DEST_RANGE.ENDD.KEY
      2811**DCL      5479<<ASSIGN   5502<<ASSIGN   5507<<ASSIGN   5522>>ASSIGN   6531>>ASSIGN
DEST_RANGE.ENDD.KEY.REP#
      2813**DCL      5478>>IF       6434>>IF       6531>>IF
DEST_RANGE.ENDD.KEY.V$
      2813**DCL      5478>>CALL     5478>>CALL     6434>>ASSIGN   6434--ASSIGN   6531>>CALL     6531>>CALL
DEST_RANGE.ENDD.POSITION#
      2815**DCL      5509<<ASSIGN   5539>>ASSIGN   5540>>ASSIGN   6539>>ASSIGN   6558>>ASSIGN
DEST_RANGE.START
      2771**DCL      4719<>CALL     4721<>CALL     5048<>CALL
DEST_RANGE.START.EOF
      2787**DCL      5052<<ASSIGN   5543<<ASSIGN   5545<<ASSIGN
DEST_RANGE.START.KEY
      2783**DCL      5046>>IF       5061<<ASSIGN   5077<<ASSIGN   5530>>ASSIGN
DEST_RANGE.START.KEY.REP#
      2785**DCL      5060>>IF
DEST_RANGE.START.KEY.V$
      2785**DCL      5060>>CALL     5060>>CALL     5077<>CALL
DEST_RANGE.START.POSITION#
      2787**DCL      5080<<ASSIGN   5528>>ASSIGN   5529>>ASSIGN   5540>>ASSIGN
DEST_RIGHT$
      3384**DCL      3928--IMP-PTR  4953>>IF       4987<>CALL     5115>>IF       5118>>ASSIGN   5119<<ASSIGN
      5978>>IF       6327--IMP-PTR  6422<<ASSIGN   6512<<ASSIGN   6573<>CALL     6575>>ASSIGN   6577>>ASSIGN
      6577>>ASSIGN   7094>>IF       7095<<ASSIGN   7098>>IF       7099<>CALL
DEST_RIGHT_LENGTH IN PROCEDURE PREPARE_DESTINATION
      6252**DCL      6565<<ASSIGN   6568<<ASSIGN   6570>>IF       6571>>ASSIGN   6575>>ASSIGN   6576>>IF
DEST_STREAM
      2826**DCL       200--PROC     4660--ENTRY    4680--IF       4773<>CALL     4991<>CALL     6444<>CALL
      6471<>CALL     6473<>CALL     6586<>CALL     6674<>CALL
DEST_STREAM.CURRENT.EOF
      2893**DCL      6446>>IF       6588>>IF
DEST_STREAM.CURRENT.KEY
      2889**DCL      6463>>ASSIGN   6603>>ASSIGN   6697>>ASSIGN
DEST_STREAM.CURRENT.KEY.REP#
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:335  
      2891**DCL      6463>>IF       6603>>IF       6697>>IF
DEST_STREAM.CURRENT.KEY.V$
      2891**DCL      6463>>CALL     6463>>CALL     6603>>CALL     6603>>CALL     6677>>IF       6697>>CALL
      6697>>CALL
DEST_STREAM.FILE_KEY.REP#
      2865**DCL      4860>>IF
DEST_STREAM.FILE_KEY.V$
      2865**DCL      4860>>ASSIGN   4860--ASSIGN
END_POS_OF_INSERTED_DATA
      3291**DCL      4666<<ASSIGN   4952<<ASSIGN   5509>>ASSIGN
ERR$SUBST.OBJECT.CLASS#
      4107**DCL      7044<<ASSIGN   7064<<ASSIGN
ERR$SUBST.V$
      4109**DCL      7045<<ASSIGN   7060>>ASSIGN   7060>>CALL     7065<<ASSIGN   7065>>ASSIGN   7079>>ASSIGN
      7079>>CALL
ERR_SUBST$
      3547**DCL      4083--IMP-PTR  7029<<ASSIGN   7044>>ASSIGN   7045>>ASSIGN   7060>>ASSIGN   7060>>CALL
      7064>>ASSIGN   7065>>ASSIGN   7065>>ASSIGN   7079>>ASSIGN   7079>>CALL
FCLOSE_FAILED IN PROCEDURE SAVE_LEFTOVER
      8382**LABEL    8329--CALLALT
FIRST_SRC_RECORD
      3400**DCL      4671<<ASSIGN   4728<>CALL
FIRST_SRC_RECORD.DATA$
      3432**DCL      4791>>ASSIGN   4792<<ASSIGN   4795<>CALL     4822>>IF       4823>>CALL     4823>>CALL
      4825<<ASSIGN
FIRST_SRC_RECORD.EOR
      3432**DCL      4672<<ASSIGN   4798>>ASSIGN   4799>>ASSIGN   6656>>IF       7086>>IF
FIRST_SRC_RECORD.KEY
      3414**DCL      4743>>ASSIGN   4747>>IF       4810<<ASSIGN
FIRST_SRC_RECORD.KEY.REP#
      3416**DCL      4743>>IF       4809>>IF
FIRST_SRC_RECORD.KEY.V$
      3416**DCL      4743>>CALL     4743>>CALL     4809>>CALL     4809>>CALL
FIRST_SRC_RECORD.SPEC
      3428**DCL      4787>>ASSIGN   4788<<ASSIGN   4820<<ASSIGN
FIRST_SRC_RECORD.SPEC.REP#
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:336  
      3430**DCL      4819>>IF
FIRST_SRC_RECORD.SPEC.V$
      3430**DCL      4819>>CALL     4819>>CALL
FIRST_TIME_THRU_MAIN_LOOP
      3289**DCL      4664<<ASSIGN   4994>>IF       5043>>IF       5082<<ASSIGN
FOPEN_FAILED IN PROCEDURE SAVE_LEFTOVER
      8382**LABEL    8319--CALLALT
GENERATE_KEY
      3388**DCL      4985<<ASSIGN   4991<>CALL     5041>>IF       5043>>IF       5085<<ASSIGN   5964<<ASSIGN
      5976>>IF       6424<<ASSIGN   6467<<ASSIGN   6660<<ASSIGN
INCR IN PROCEDURE ADJUST_INCREMENT
      5781**DCL      5771--PROC     5941>>IF
INCR.BYTES# IN PROCEDURE ADJUST_INCREMENT
      5785**DCL      5946<<ASSIGN   5947<<ASSIGN   6017>>ASSIGN   6056<<ASSIGN
INCR.LENGTH# IN PROCEDURE ADJUST_INCREMENT
      5785**DCL      5945<<ASSIGN
INCR.REP# IN PROCEDURE ADJUST_INCREMENT
      5785**DCL      5944<<ASSIGN
INCR.TYPE# IN PROCEDURE ADJUST_INCREMENT
      5785**DCL      5943<<ASSIGN   6100<<ASSIGN
INCREMENT IN PROCEDURE ADJUST_INCREMENT
      5836**DCL      6017<<ASSIGN   6019>>IF       6020<<ASSIGN   6029>>DOWHILE  6031>>ASSIGN   6054>>IF
      6056>>ASSIGN   6062<<ASSIGN   6068>>IF       6069<<ASSIGN   6069>>ASSIGN   6070>>IF       6071<<ASSIGN
      6071>>ASSIGN   6072>>ASSIGN   6075>>IF       6076<<ASSIGN   6076>>ASSIGN   6077>>ASSIGN   6080<<ASSIGN
      6080>>ASSIGN   6081>>ASSIGN   6162>>IF       6165<<ASSIGN
INCR_521_TABLE IN PROCEDURE NEXT_LOWER_INCR
      6150**DCL      6162>>IF       6165>>ASSIGN
INDX IN PROCEDURE ABORT_INSERTION
      6898**DCL      7032<<ASSIGN   7033>>DOWHILE  7033>>DOWHILE  7035<<ASSIGN   7035>>ASSIGN   7037>>IF
      7040>>CALL     7045>>ASSIGN
LAST$ERR.FLAGLEV#
      4064**DCL      5219>>IF
LAST_COPIED_KEY
      3456**DCL      4674<<ASSIGN   5009<<ASSIGN   5011<<ASSIGN   5668<<ASSIGN   7024>>IF       7060>>ASSIGN
      7107>>IF       7138>>ASSIGN
LAST_COPIED_KEY.REP#
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:337  
      3460**DCL      5008>>IF       5667>>IF       7060>>IF       7138>>IF
LAST_COPIED_KEY.V$
      3460**DCL      5008>>CALL     5008>>CALL     5667>>CALL     5667>>CALL     7060>>CALL     7060>>CALL
      7138>>CALL     7138>>CALL
LAST_WRITTEN_KEY
      3470**DCL      4675<<ASSIGN   5021<<ASSIGN   5036<<ASSIGN   5145>>ASSIGN   5507>>ASSIGN   5508<<ASSIGN
      5678<<ASSIGN   7079>>ASSIGN
LAST_WRITTEN_KEY.REP#
      3474**DCL      5020>>IF       5145>>IF       5677>>IF       7079>>IF
LAST_WRITTEN_KEY.V$
      3474**DCL      5020>>CALL     5020>>CALL     5036<>CALL     5145>>CALL     5145>>CALL     5677>>CALL
      5677>>CALL     7079>>CALL     7079>>CALL
LEFT IN PROCEDURE APPEND
      7355**DCL      7522<>CALL
LEFT.BYTES IN PROCEDURE APPEND
      7383**DCL      7521>>ASSIGN   7530<<CALLBLT
LEFT.LENGTH# IN PROCEDURE APPEND
      7381**DCL      7383--IMP-SIZ  7513>>ASSIGN   7520>>ASSIGN   7521>>ASSIGN   7522>>CALL     7528>>ASSIGN
      7529<<ASSIGN   7530>>CALLBLT
LEFT.OBJECT.SIZE# IN PROCEDURE APPEND
      7379**DCL      7516>>IF
LEFT$ IN PROCEDURE APPEND
      7322**DCL      7320--PROC     7355--IMP-PTR  7513>>ASSIGN   7516>>IF       7520>>ASSIGN   7521>>ASSIGN
      7521>>ASSIGN   7522>>CALL     7522>>CALL     7524<<ASSIGN   7528>>ASSIGN   7529>>ASSIGN   7530>>CALLBLT
      7530>>CALLBLT
LEFTOVER$BLOCK.FILE_KEY IN PROCEDURE SAVE_LEFTOVER
      7931**DCL      8340<<ASSIGN
LEFTOVER$BLOCK.OPTIONS IN PROCEDURE SAVE_LEFTOVER
      8014**DCL      8359<<ASSIGN
LEFTOVER$BLOCK.OPTIONS.EXIST# IN PROCEDURE SAVE_LEFTOVER
      8017**DCL      8361<<ASSIGN
LEFTOVER$BLOCK.OPTIONS.PROTECT# IN PROCEDURE SAVE_LEFTOVER
      8016**DCL      8360<<ASSIGN
LEFTOVER$BLOCK.RANGE.ENDD.EOF IN PROCEDURE SAVE_LEFTOVER
      8001**DCL      8358<<ASSIGN
LEFTOVER$BLOCK.RANGE.START.KEY IN PROCEDURE SAVE_LEFTOVER
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:338  
      7969**DCL      8355<<ASSIGN
LEFTOVER$BLOCK.RANGE.START.KEY.V$ IN PROCEDURE SAVE_LEFTOVER
      7971**DCL      8355<>CALL
LEFTOVER$STREAM IN PROCEDURE SAVE_LEFTOVER
      7731**DCL      8319<>CALL     8325<>CALL     8329<>CALL     8331<>CALL     8390<>CALL     8397<>CALL
LEFTOVER_BLOCK$ IN PROCEDURE SAVE_LEFTOVER
      7605**DCL      7895--IMP-PTR  8339<<ASSIGN   8340>>ASSIGN   8355>>ASSIGN   8355>>CALL     8358>>ASSIGN
      8359>>ASSIGN   8360>>ASSIGN   8361>>ASSIGN
LEFTOVER_STREAM$ IN PROCEDURE SAVE_LEFTOVER
      7603**DCL      7731--IMP-PTR  8299<<ASSIGN   8313<>CALL     8319>>CALL     8325>>CALL     8329>>CALL
      8331>>CALL     8333<<ASSIGN   8390>>CALL     8396>>IF       8397>>CALL
LOC IN PROCEDURE SAVE_LEFTOVER
      7614**DCL      8323<<ASSIGN   8325<>CALL
LOC.KEY IN PROCEDURE SAVE_LEFTOVER
      7628**DCL      8324<<ASSIGN
LOCATIONS$STREAM IN PROCEDURE SAVE_LEFTOVER
      8042**DCL      8363<>CALL
LOCATIONS$STREAM.PORT$ IN PROCEDURE SAVE_LEFTOVER
      8068**DCL      8366>>CALL
LOCATIONS$STREAM IN PROCEDURE SAVE_NOT_COPIED
      8748**DCL      9054<>CALL
LOCATIONS$STREAM.PORT$ IN PROCEDURE SAVE_NOT_COPIED
      8774**DCL      9057>>CALL
LOOP IN PROCEDURE ADJUST_INCREMENT
      6029**LABEL    6035--EXIT     6049--EXIT
LREAD_FAILED
      5219**LABEL    4726--CALLALT  4872--CALLALT  4909--CALLALT
LREAD_FAILED IN PROCEDURE ABORT_INSERTION
      7248**LABEL    7142--CALLALT
LREAD_FAILED IN PROCEDURE ADJUST_INCREMENT
      6101**LABEL    6032--CALLALT  6085--CALLALT
LREAD_FAILED IN PROCEDURE PREPARE_DESTINATION
      6703**LABEL    6444--CALLALT  6471--CALLALT  6586--CALLALT  6674--CALLALT
LWRITE_FAILED IN PROCEDURE SAVE_LEFTOVER
      8382**LABEL    8363--CALLALT
LWRITE_FAILED IN PROCEDURE SAVE_NOT_COPIED
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:339  
      9071**LABEL    9054--CALLALT
LWRITE_LEFTOVER_FAILED IN PROCEDURE SAVE_LEFTOVER
      8390**LABEL    8325--CALLALT
MAX_RECS_CAN_FIT IN PROCEDURE ADJUST_INCREMENT
      5837**DCL      6024<<ASSIGN   6031<<ASSIGN   6032<>CALL     6062>>ASSIGN   6068>>IF       6072<<ASSIGN
      6072>>ASSIGN   6075>>IF       6076>>ASSIGN   6077<<ASSIGN   6081<<ASSIGN   6081>>ASSIGN   6085<>CALL
      6101>>ASSIGN
MY_EOF_DELETED
      3389**DCL      4676<<ASSIGN   6570>>IF
NEW$BUFFER.BYTES IN PROCEDURE APPEND
      7499**DCL      7521<<ASSIGN
NEW$BUFFER.LENGTH# IN PROCEDURE APPEND
      7497**DCL      7499--IMP-SIZ  7520<<ASSIGN   7521>>ASSIGN
NEW_BUFFER$ IN PROCEDURE APPEND
      7327**DCL      7471--IMP-PTR  7518<>CALL     7520>>ASSIGN   7521>>ASSIGN   7521>>ASSIGN   7524>>ASSIGN
NEW_LENGTH IN PROCEDURE APPEND
      7324**DCL      7513<<ASSIGN   7514>>ASSIGN   7529>>ASSIGN   7532<>CALL
NEXT_LOWER_INCR IN PROCEDURE ADJUST_INCREMENT
      6147**PROC     6021--CALL     6050--CALL
NOTHING_COPIED
      5200**LABEL    4995--GOTO
NOT_COPIED_RANGE IN PROCEDURE ABORT_INSERTION
      6837**DCL      7179<<ASSIGN   7215<>CALL
NOT_COPIED_RANGE.ENDD.KEY IN PROCEDURE ABORT_INSERTION
      6891**DCL      7212<<ASSIGN
NOT_COPIED_RANGE.ENDD.KEY.V$ IN PROCEDURE ABORT_INSERTION
      6893**DCL      7212<>CALL
NOT_COPIED_RANGE.START.KEY IN PROCEDURE ABORT_INSERTION
      6863**DCL      7195<<ASSIGN
NOT_COPIED_RANGE.START.KEY.V$ IN PROCEDURE ABORT_INSERTION
      6865**DCL      7195<>CALL
NOT_COPIED_RANGE.START.POSITION# IN PROCEDURE ABORT_INSERTION
      6867**DCL      7180<<ASSIGN
OALLOC_ERR_FAILED IN PROCEDURE SAVE_LEFTOVER
      8407**LABEL    8379--CALLALT
OALLOC_FAILED IN PROCEDURE APPEND
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:340  
      7538**LABEL    7518--CALLALT
OALLOC_FAILED IN PROCEDURE PREPARE_DESTINATION
      6703**LABEL    6573--CALLALT
OALLOC_FAILED IN PROCEDURE SAVE_LEFTOVER
      8400**LABEL    8313--CALLALT  8336--CALLALT
OALLOC_FAILED IN PROCEDURE SAVE_NOT_COPIED
      9085**LABEL    9004--CALLALT  9068--CALLALT
OCLEAR_LOCATION_FAILED
      5240**LABEL    4719--CALLALT  4874--CALLALT  5202--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE ABORT_INSERTION
      7248**LABEL    7112--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE SET_DEST_END
      5546**LABEL    5463--CALLALT  5496--CALLALT
OCOPY_LOCATION_FAILED
      5240**LABEL    4721--CALLALT  5048--CALLALT  5204--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE ABORT_INSERTION
      7248**LABEL    7114--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE SET_DEST_END
      5546**LABEL    5468--CALLALT
OCOPY_RANGE_FAILED IN PROCEDURE SAVE_NOT_COPIED
      9085**LABEL    9042--CALLALT
OFREE_FAILED
      5240**LABEL    4823--CALLALT
OFREE_FAILED IN PROCEDURE APPEND
      7538**LABEL    7522--CALLALT  7536--CALLALT
OFREE_FAILED IN PROCEDURE PREPARE_DESTINATION
      6703**LABEL    6509--CALLALT
OFREE_FAILED IN PROCEDURE SAVE_LEFTOVER
      8400**LABEL    8331--CALLALT
OPEN_OPTIONS IN PROCEDURE SAVE_LEFTOVER
      7642**DCL      8315<<ASSIGN   8319<>CALL     8359>>ASSIGN
OPEN_OPTIONS.EXIST# IN PROCEDURE SAVE_LEFTOVER
      7647**DCL      8318<<ASSIGN
OPEN_OPTIONS.PROTECT# IN PROCEDURE SAVE_LEFTOVER
      7646**DCL      8317<<ASSIGN
OPEN_OPTIONS.STRUCTURE$ IN PROCEDURE SAVE_LEFTOVER
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:341  
      7646**DCL      8316<<ASSIGN
OUTSIDE_SRC_RANGE
      3290**DCL      4657<<ASSIGN   4662<<ASSIGN   4672>>ASSIGN   4683>>IF       4724>>IF       4842>>IF
      4908>>IF       5088>>IF       5114<<ASSIGN   6008>>IF       6027>>IF       6063>>IF
PFLUSH_FAILED IN PROCEDURE SAVE_LEFTOVER
      8382**LABEL    8366--CALLALT
PFLUSH_FAILED IN PROCEDURE SAVE_NOT_COPIED
      9079**LABEL    9057--CALLALT
PREPARE_DESTINATION
      6245**PROC     4755--CALL     4777--CALL
PREPARE_DESTINATION_FAILED
      5219**LABEL    4755--CALLALT  4777--CALLALT
PREVIOUS_SRC_EOR
      3390**DCL      5000<<ASSIGN   5127>>IF       5483>>IF       5523>>IF
RADJUST_LENGTH_FAILED IN PROCEDURE PREPARE_DESTINATION
      6703**LABEL    6541--CALLALT  6582--CALLALT
RANGE IN PROCEDURE SAVE_NOT_COPIED
      8467**DCL      8457--PROC     9042<>CALL
RANGE$ENDD_KEY.BYTES IN PROCEDURE ABORT_INSERTION
      6944**DCL      7168>>IF       7168>>IF
RANGE$ENDD_KEY.LENGTH# IN PROCEDURE ABORT_INSERTION
      6942**DCL      6944--IMP-SIZ  7168>>IF       7168>>IF
RANGE_ENDD_KEY$ IN PROCEDURE ABORT_INSERTION
      6900**DCL      6934--IMP-PTR  7164<<ASSIGN   7164<<ASSIGN   7168>>IF       7168>>IF       7168>>IF
      7168>>IF
RCCL
      3326**DCL      4841<<ASSIGN   4865<>CALL     4870>>IF
REC$TO_SAVE IN PROCEDURE SAVE_LEFTOVER
      7690**DCL      8325<>CALL
REC$TO_SAVE.LENGTH# IN PROCEDURE SAVE_LEFTOVER
      7716**DCL      7718--IMP-SIZ  8325>>CALL
RECORD
      3335**DCL      4668<<ASSIGN   4671>>ASSIGN   4991<>CALL     5104<>CALL     6473<>CALL     6541<>CALL
      6582<>CALL
RECORD.DATA$
      3367**DCL      3870--IMP-PTR  4669<<ASSIGN   4790>>IF       4791<<ASSIGN   4795<>CALL     4946>>DOWHILE
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:342  
      4952>>ASSIGN   4987<>CALL     5118<<ASSIGN   5635>>IF       5636>>CALL     5636>>CALL     6385--IMP-PTR
      6509>>CALL     6509>>CALL     6512>>ASSIGN   6513<<ASSIGN   6568>>ASSIGN   6577>>ASSIGN   6577>>ASSIGN
      7095>>ASSIGN   7096<<ASSIGN
RECORD.EOR
      3367**DCL      4798<<ASSIGN   4947>>IF       4954<<ASSIGN   5106>>ASSIGN   5116<<ASSIGN   6514<<ASSIGN
      6560>>ASSIGN
RECORD.KEY
      3349**DCL      4773<>CALL     4967<<ASSIGN   4982<<ASSIGN   5036>>ASSIGN   5077>>ASSIGN   5097<<ASSIGN
      5109>>IF       5130>>ASSIGN   5145<<ASSIGN   5623<<ASSIGN   6447<<ASSIGN   6463<<ASSIGN   6486>>IF
      6516>>ASSIGN   6531<<ASSIGN   6671>>ASSIGN   6672<<ASSIGN   6680<<ASSIGN   6697<<ASSIGN
RECORD.KEY.REP#
      3351**DCL      4966>>IF       5036>>IF       5077>>IF       5096>>IF       5622>>IF       5957>>IF
      6482>>IF
RECORD.KEY.V$
      3351**DCL      4966>>CALL     4966>>CALL     4982<>CALL     5036>>CALL     5036>>CALL     5077>>CALL
      5077>>CALL     5096>>CALL     5096>>CALL     5145<>CALL     5622>>CALL     5622>>CALL     5957>>ASSIGN
      5957--ASSIGN   6463<>CALL     6482>>ASSIGN   6482--ASSIGN   6531<>CALL     6561--IF       6656--IF
      6697<>CALL
RECORD.SPEC
      3363**DCL      4786>>IF       4787<<ASSIGN   5633<<ASSIGN   6506<<ASSIGN
RECORD.SPEC.REP#
      3365**DCL      5632>>IF       6505>>IF
RECORD.SPEC.V$
      3365**DCL      5632>>CALL     5632>>CALL     6505>>CALL     6505>>CALL
RECORD$DATA
      3870**DCL      5636<>CALL
RECORD$DATA.LENGTH#
      3896**DCL      3898--IMP-SIZ  4952>>ASSIGN   5636>>CALL
RECORD$DATA IN PROCEDURE PREPARE_DESTINATION
      6385**DCL      6509<>CALL
RECORD$DATA.BYTES IN PROCEDURE PREPARE_DESTINATION
      6413**DCL      6577>>ASSIGN
RECORD$DATA.LENGTH# IN PROCEDURE PREPARE_DESTINATION
      6411**DCL      6413--IMP-SIZ  6509>>CALL     6568>>ASSIGN   6577>>ASSIGN
RECORD$KEY.BYTES# IN PROCEDURE ADJUST_INCREMENT
      5867**DCL      5963>>IF       5975>>ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:343  
RECORD$KEY IN PROCEDURE PREPARE_DESTINATION
      6287**DCL      6486>>IF
RECORD$KEY.LENGTH# IN PROCEDURE PREPARE_DESTINATION
      6295**DCL      6297--IMP-SIZ  6486>>IF
RECORD_KEY$ IN PROCEDURE ADJUST_INCREMENT
      5833**DCL      5863--IMP-PTR  5957<<ASSIGN   5957<<ASSIGN   5963>>IF       5975>>ASSIGN
RECORD_KEY$ IN PROCEDURE PREPARE_DESTINATION
      6251**DCL      6287--IMP-PTR  6482<<ASSIGN   6482<<ASSIGN   6486>>IF       6486>>IF
REC_TO_SAVE$ IN PROCEDURE SAVE_LEFTOVER
      7599**DCL      7597--PROC     7690--IMP-PTR  8325>>CALL     8325>>CALL     8327<<ASSIGN
RGET_FAILED
      5219**LABEL    4728--CALLALT
RGET_FAILED IN PROCEDURE PREPARE_DESTINATION
      6703**LABEL    6473--CALLALT
RIGHT IN PROCEDURE APPEND
      7413**DCL      7536<>CALL
RIGHT.BYTES IN PROCEDURE APPEND
      7441**DCL      7530>>CALLBLT  7532<>CALL
RIGHT.LENGTH# IN PROCEDURE APPEND
      7439**DCL      7441--IMP-SIZ  7509>>IF       7513>>ASSIGN   7530>>CALLBLT  7532>>CALL     7536>>CALL
RIGHT$ IN PROCEDURE APPEND
      7323**DCL      7320--PROC     7413--IMP-PTR  7507>>IF       7509>>IF       7513>>ASSIGN   7530>>CALLBLT
      7530>>CALLBLT  7532>>CALL     7532>>CALL     7536>>CALL     7536>>CALL     7538<<ASSIGN
SAVE_ACCESSOR_PRIV IN PROCEDURE SAVE_LEFTOVER
      7602**DCL      8302<<ASSIGN   8369>>ASSIGN   8407>>ASSIGN
SAVE_ACCESSOR_PRIV IN PROCEDURE SAVE_NOT_COPIED
      8532**DCL      9045<<ASSIGN   9060>>ASSIGN   9085>>ASSIGN
SAVE_LEFTOVER
      7597**PROC     7099--CALL
SAVE_LEFTOVER_FAILED IN PROCEDURE ABORT_INSERTION
      7248**LABEL    7099--CALLALT
SAVE_NOT_COPIED
      8457**PROC     5200--CALL     7109--CALL     7215--CALL
SAVE_NOT_COPIED_FAILED
      5240**LABEL    5200--CALLALT
SAVE_NOT_COPIED_FAILED IN PROCEDURE ABORT_INSERTION
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:344  
      7248**LABEL    7109--CALLALT  7215--CALLALT
SET_DEST_END
      5304**PROC     5180--CALL
SET_DEST_END_FAILED
      5219**LABEL    5180--CALLALT
SRC$BLOCK IN PROCEDURE SAVE_NOT_COPIED
      8601**DCL      9008<<ASSIGN
SRC$BLOCK.FILE_KEY IN PROCEDURE SAVE_NOT_COPIED
      8637**DCL      9022<<ASSIGN
SRC$BLOCK.FILE_KEY.V$ IN PROCEDURE SAVE_NOT_COPIED
      8639**DCL      9022<>CALL
SRC$BLOCK.OPTIONS.KEY_INCR IN PROCEDURE SAVE_NOT_COPIED
      8734**DCL      9039<<ASSIGN
SRC$BLOCK.OPTIONS.KEY_INCR.V$ IN PROCEDURE SAVE_NOT_COPIED
      8736**DCL      9039<>CALL
SRC$BLOCK.RANGE IN PROCEDURE SAVE_NOT_COPIED
      8651**DCL      9042<>CALL
SRC$EDIT_BLOCK
      3559**DCL      9008>>ASSIGN
SRC$EDIT_BLOCK.FILE_KEY
      3595**DCL      9022>>ASSIGN
SRC$EDIT_BLOCK.FILE_KEY.REP#
      3597**DCL      9022>>IF
SRC$EDIT_BLOCK.FILE_KEY.V$
      3597**DCL      9022>>CALL     9022>>CALL
SRC$EDIT_BLOCK.OPTIONS.KEY_INCR
      3692**DCL      9039>>ASSIGN
SRC$EDIT_BLOCK.OPTIONS.KEY_INCR.REP#
      3694**DCL      9039>>IF
SRC$EDIT_BLOCK.OPTIONS.KEY_INCR.V$
      3694**DCL      9039>>CALL     9039>>CALL
SRC$END_KEY.BYTES IN PROCEDURE ADJUST_INCREMENT
      5910**DCL      6007>>IF       6048>>IF       6066>>IF
SRC$END_KEY.LENGTH# IN PROCEDURE ADJUST_INCREMENT
      5908**DCL      5910--IMP-SIZ  6007>>IF       6048>>IF       6066>>IF
SRC$START_KEY.BYTES IN PROCEDURE ADJUST_INCREMENT
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:345  
      5887**DCL      6007>>IF
SRC$START_KEY.LENGTH# IN PROCEDURE ADJUST_INCREMENT
      5885**DCL      5887--IMP-SIZ  6007>>IF
SRC$STREAM_KEY.BYTES IN PROCEDURE ADJUST_INCREMENT
      5933**DCL      6048>>IF       6066>>IF
SRC$STREAM_KEY.LENGTH# IN PROCEDURE ADJUST_INCREMENT
      5931**DCL      5933--IMP-SIZ  6048>>IF       6066>>IF
SRC_BLOCK$ IN PROCEDURE SAVE_NOT_COPIED
      8531**DCL      8601--IMP-PTR  9006<<ASSIGN   9008>>ASSIGN   9022>>ASSIGN   9022>>CALL     9039>>ASSIGN
      9039>>CALL     9042>>CALL
SRC_END_KEY$ IN PROCEDURE ADJUST_INCREMENT
      5835**DCL      5900--IMP-PTR  6001<<ASSIGN   6001<<ASSIGN   6005<<ASSIGN   6007>>IF       6007>>IF
      6048>>IF       6048>>IF       6066>>IF       6066>>IF
SRC_EOR
      3391**DCL      4799<<ASSIGN   5000>>ASSIGN   5043>>IF       5099<<ASSIGN   5106<<ASSIGN
SRC_FILE_KEY$
      3324**DCL      4850<<ASSIGN   4850<<ASSIGN   4863>>IF       4863>>IF
SRC_KEY_OF_RECORD
      3442**DCL      4673<<ASSIGN   4743<<ASSIGN   5011>>ASSIGN   5012<<ASSIGN   5130<<ASSIGN   5658<<ASSIGN
SRC_KEY_OF_RECORD.REP#
      3446**DCL      5657>>IF
SRC_KEY_OF_RECORD.V$
      3446**DCL      4743<>CALL     5657>>CALL     5657>>CALL
SRC_LEVEL
      3323**DCL      4713<<ASSIGN   4894>>ASSIGN   4894>>ASSIGN   4894>>IF       4894>>CALL     4894>>CALL
      4894>>CALL     4897>>ASSIGN   4897>>ASSIGN   5991>>IF       5991>>ASSIGN   5991>>ASSIGN   6001>>IF
      6001>>ASSIGN   6001>>ASSIGN   6044>>IF       6044>>ASSIGN   6044>>ASSIGN   6095>>IF       6095>>ASSIGN
      6095>>ASSIGN   7138>>ASSIGN   7138>>CALL     7153>>IF       7153>>ASSIGN   7153>>ASSIGN   7164>>IF
      7164>>ASSIGN   7164>>ASSIGN   7195>>ASSIGN   7195>>ASSIGN   7195>>IF       7195>>CALL     7195>>CALL
      7195>>CALL     7212>>ASSIGN   7212>>ASSIGN   7212>>IF       7212>>CALL     7212>>CALL     7212>>CALL
      7227>>IF       7227>>CALL     7227>>CALL     7228>>ASSIGN   7244>>ASSIGN   7244>>ASSIGN   7244>>IF
      7244>>CALL     7244>>CALL     7244>>CALL
SRC_LOC IN PROCEDURE ABORT_INSERTION
      6809**DCL      7123<<ASSIGN   7142<>CALL
SRC_LOC.KEY IN PROCEDURE ABORT_INSERTION
      6823**DCL      7138<<ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:346  
SRC_LOC.KEY.V$ IN PROCEDURE ABORT_INSERTION
      6825**DCL      7138<>CALL
SRC_RANGE
      2582**DCL       200--PROC     4660--ENTRY    4728<>CALL     5104<>CALL     5200<>CALL     7109<>CALL
      7179>>ASSIGN
SRC_RANGE.ENDD
      2624**DCL      4865<>CALL     4872<>CALL     4874<>CALL     5202<>CALL     5204<>CALL     7112<>CALL
      7114<>CALL
SRC_RANGE.ENDD.EOF
      2640**DCL      4870>>IF       4877<<ASSIGN   6004>>IF       6508>>IF       7247<<ASSIGN
SRC_RANGE.ENDD.KEY
      2636**DCL      4894<<ASSIGN   4897--ASSIGN   4897--ASSIGN   7212>>ASSIGN   7228<<ASSIGN   7244<<ASSIGN
SRC_RANGE.ENDD.KEY.REP#
      2638**DCL      6001>>IF       7164>>IF       7212>>IF       7227>>IF
SRC_RANGE.ENDD.KEY.V$
      2638**DCL      4894<>CALL     6001>>ASSIGN   6001--ASSIGN   7164>>ASSIGN   7164--ASSIGN   7212>>CALL
      7212>>CALL     7227>>CALL     7227>>CALL     7244<>CALL
SRC_RANGE.ENDD.POSITION#
      2640**DCL      4842>>IF       6508>>IF       6561>>IF       7168>>IF       7248<<ASSIGN
SRC_RANGE.START
      2596**DCL      4726<>CALL     4909<>CALL     5204<>CALL     6032<>CALL     6085<>CALL     7114<>CALL
SRC_RANGE.START.EOF
      2612**DCL      4876>>IF       5981>>IF
SRC_RANGE.START.KEY.REP#
      2610**DCL      5991>>IF
SRC_RANGE.START.KEY.V$
      2610**DCL      5991>>ASSIGN   5991--ASSIGN
SRC_START_KEY$ IN PROCEDURE ADJUST_INCREMENT
      5834**DCL      5877--IMP-PTR  5991<<ASSIGN   5991<<ASSIGN   6007>>IF       6007>>IF       6025>>ASSIGN
SRC_STREAM
      2651**DCL       200--PROC     4660--ENTRY    4726<>CALL     4728<>CALL     4872<>CALL     4909<>CALL
      5102<>CALL     5104<>CALL     6032<>CALL     6085<>CALL     7142<>CALL
SRC_STREAM.CURRENT.EOF
      2718**DCL      6034>>IF       6066>>IF       7168>>IF       7247>>ASSIGN
SRC_STREAM.CURRENT.KEY
      2714**DCL      4894>>ASSIGN   7195>>ASSIGN   7244>>ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:347  
SRC_STREAM.CURRENT.KEY.REP#
      2716**DCL      4894>>IF       6044>>IF       6095>>IF       7153>>IF       7195>>IF       7244>>IF
SRC_STREAM.CURRENT.KEY.V$
      2716**DCL      4894>>CALL     4894>>CALL     6044>>ASSIGN   6044--ASSIGN   6095>>ASSIGN   6095--ASSIGN
      7153>>ASSIGN   7153--ASSIGN   7195>>CALL     7195>>CALL     7244>>CALL     7244>>CALL
SRC_STREAM.FILE_KEY.REP#
      2690**DCL      4850>>IF
SRC_STREAM.FILE_KEY.V$
      2690**DCL      4850>>ASSIGN   4850--ASSIGN
SRC_STREAM_KEY$ IN PROCEDURE ADJUST_INCREMENT
      5838**DCL      5923--IMP-PTR  6025<<ASSIGN   6044<<ASSIGN   6044<<ASSIGN   6048>>IF       6048>>IF
      6066>>IF       6066>>IF       6095<<ASSIGN   6095<<ASSIGN
STREAM$KEY.BYTES IN PROCEDURE ABORT_INSERTION
      6921**DCL      7168>>IF       7168>>IF
STREAM$KEY.LENGTH# IN PROCEDURE ABORT_INSERTION
      6919**DCL      6921--IMP-SIZ  7168>>IF       7168>>IF
STREAM_KEY$ IN PROCEDURE ABORT_INSERTION
      6899**DCL      6911--IMP-PTR  7153<<ASSIGN   7153<<ASSIGN   7168>>IF       7168>>IF       7168>>IF
      7168>>IF
TABLE_INDEX IN PROCEDURE NEXT_LOWER_INCR
      6158**DCL      6161<<DOINDEX  6162>>IF       6165>>ASSIGN
THE_TOP
      4662**LABEL    4658--GOTO
VD$BUFFER
      4250**DCL      4823<>CALL
VD$BUFFER.LENGTH#
      4276**DCL      4278--IMP-SIZ  4823>>CALL
VD$BUFFER.LENGTH# IN PROCEDURE ABORT_INSERTION
      7000**DCL      7002--IMP-SIZ
VD$BUFFER.LENGTH# IN PROCEDURE SAVE_LEFTOVER
      8289**DCL      8291--IMP-SIZ
VD$BUFFER.LENGTH# IN PROCEDURE SAVE_NOT_COPIED
      8897**DCL      8899--IMP-SIZ
VD$BUFFER_HEADER
      4291**DCL      6571--ASSIGN   7040--CALL     7045--ASSIGN   7514--ASSIGN
VD$ERR
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:348  
      3969**DCL      7029--ASSIGN
VD$ERR.ERR.CODE#
      4008**DCL      7027<<ASSIGN   8381<<ASSIGN   9070<<ASSIGN
VD$ERR.FLAGLEV#
      4011**DCL      7028<<ASSIGN   8382<<ASSIGN   9071<<ASSIGN
VD$FILE_NODE.DESC.SPEC.V$
      4406**DCL      4681>>ASSIGN   4684>>ASSIGN
VD$IT_BLOCK_EXPR.OPTIONS
      4607**DCL      4684>>ASSIGN
VD$KEY IN PROCEDURE ABORT_INSERTION
      7015**DCL      7040--CALL     7060<<ASSIGN   7065--ASSIGN   7079<<ASSIGN
VD$KEY.V$ IN PROCEDURE ABORT_INSERTION
      7019**DCL      7060<>CALL     7079<>CALL
VD$KEY_NUMBER.BYTES#
      4124**DCL      4768<<ASSIGN   4897<<ASSIGN   4897>>ASSIGN
VD$PORT IN PROCEDURE SAVE_LEFTOVER
      8148**DCL      8366<>CALL
VD$PORT IN PROCEDURE SAVE_NOT_COPIED
      8912**DCL      9057<>CALL
VD$TEXTC.BYTES
      4145**DCL      4863>>IF       4863>>IF
VD$TEXTC.LENGTH#
      4143**DCL      4145--IMP-SIZ  4863>>IF       4863>>IF
VD$TEXTC_NUMBER
      4158**DCL      6561>>IF       6561>>IF       6656>>IF       6656>>IF
VD$TEXTC_REMOTE
      4189**DCL      4709<>CALL     4743<>CALL     4809<>CALL     4819<>CALL     4894<>CALL     4966<>CALL
      4982<>CALL     5008<>CALL     5020<>CALL     5036<>CALL     5060<>CALL     5077<>CALL     5096<>CALL
      5145<>CALL     5478<>CALL     5611<>CALL     5622<>CALL     5632<>CALL     5647<>CALL     5657<>CALL
      5667<>CALL     5677<>CALL     6463<>CALL     6505<>CALL     6531<>CALL     6603<>CALL     6639<>CALL
      6668<>CALL     6697<>CALL     7060<>CALL     7079<>CALL     7138<>CALL     7195<>CALL     7212<>CALL
      7227<>CALL     7244<>CALL     8355<>CALL     9022<>CALL     9039<>CALL
VD$TEXTC_REMOTE.LENGTH#
      4218**DCL      4220--IMP-SIZ  4709>>CALL     4743>>CALL     4809>>CALL     4819>>CALL     4850--ASSIGN
      4860--ASSIGN   4894>>CALL     4966>>CALL     4982>>CALL     5008>>CALL     5020>>CALL     5036>>CALL
      5060>>CALL     5077>>CALL     5096>>CALL     5145>>CALL     5478>>CALL     5491--ASSIGN   5611>>CALL
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:349  
      5622>>CALL     5632>>CALL     5647>>CALL     5657>>CALL     5667>>CALL     5677>>CALL     5957--ASSIGN
      5972--ASSIGN   5991--ASSIGN   6001--ASSIGN   6044--ASSIGN   6095--ASSIGN   6434--ASSIGN   6463>>CALL
      6482--ASSIGN   6505>>CALL     6531>>CALL     6603>>CALL     6639>>CALL     6668>>CALL     6697>>CALL
      7060>>CALL     7079>>CALL     7138>>CALL     7153--ASSIGN   7164--ASSIGN   7195>>CALL     7212>>CALL
      7227>>CALL     7244>>CALL     8355>>CALL     9022>>CALL     9039>>CALL
VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$
      4461**DCL      4681>>ASSIGN
VD$WINDOW_SPEC.OPERAND.INTREE$
      4461**DCL      4684>>ASSIGN
VDA$FCLOSE
      2929**DCL-ENT  8329--CALL     8390--CALL
VDA$FOPEN
      2928**DCL-ENT  8319--CALL
VDA$LREAD
      2926**DCL-ENT  4726--CALL     4872--CALL     4909--CALL     5102--CALL     6032--CALL     6085--CALL
      6444--CALL     6471--CALL     6586--CALL     6674--CALL     7142--CALL
VDA$LWRITE
      2927**DCL-ENT  8325--CALL     8363--CALL     9054--CALL
VDA$PFLUSH
      2930**DCL-ENT  8366--CALL     9057--CALL
VDE$RADJUST_LENGTH
      2934**DCL-ENT  6541--CALL     6582--CALL
VDE$RGET
      2932**DCL-ENT  4728--CALL     5104--CALL     6473--CALL
VDE$RPUT
      2933**DCL-ENT  4991--CALL
VDG$COMPARE_LOCS
      2942**DCL-ENT  4865--CALL
VDG$EREPORT_ERROR
      2943**DCL-ENT  7082--CALL     8383--CALL     9072--CALL
VDG$ESCREECH
      2944**DCL-ENT  5128--CALL     7038--CALL     7532--CALL
VDG$OALLOC
      2935**DCL-ENT  6573--CALL     7025--CALL     7040--CALL     7518--CALL     8313--CALL     8336--CALL
      8379--CALL     9004--CALL     9068--CALL
VDG$OCLEAR_LOCATION
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:350  
      2940**DCL-ENT  4719--CALL     4874--CALL     5202--CALL     5463--CALL     5496--CALL     7112--CALL
VDG$OCOPY
      2937**DCL-ENT  4709--CALL     4743--CALL     4894--CALL     4982--CALL     5036--CALL     5077--CALL
      5145--CALL     6463--CALL     6531--CALL     6603--CALL     6639--CALL     6697--CALL     7060--CALL
      7079--CALL     7138--CALL     7195--CALL     7212--CALL     7244--CALL     8355--CALL     9022--CALL
      9039--CALL
VDG$OCOPY_LOCATION
      2939**DCL-ENT  4721--CALL     5048--CALL     5204--CALL     5468--CALL     7114--CALL
VDG$OCOPY_RANGE
      2938**DCL-ENT  9042--CALL
VDG$OFREE
      2936**DCL-ENT  4809--CALL     4819--CALL     4823--CALL     4966--CALL     5008--CALL     5020--CALL
      5060--CALL     5096--CALL     5478--CALL     5611--CALL     5622--CALL     5632--CALL     5636--CALL
      5647--CALL     5657--CALL     5667--CALL     5677--CALL     6505--CALL     6509--CALL     6668--CALL
      7227--CALL     7522--CALL     7536--CALL     8331--CALL     8397--CALL     8401--CALL     9080--CALL
VDG$XLATE_LOCATIONS
      2941**DCL-ENT  5544--CALL
VDI$BAUTO_REKEY
      2931**DCL-ENT  4773--CALL
VD_$BY.V#
      3207**DCL      5946>>IF       5946>>ASSIGN
VD_$RECORDS_INSERTED.V#
      3252**DCL      4665<<ASSIGN   4943<<ASSIGN   5042<<ASSIGN   5042>>ASSIGN
VD_$REKEY.V#
      3162**DCL      4766>>IF
VD_6E.ERR_TAIL$
      2979**DCL      4022--IMP-PTR  5219>>IF
VD_6E.LOCATIONS$
      2960**DCL      8042--IMP-PTR  8363>>CALL     8366>>CALL     8748--IMP-PTR  9054>>CALL     9057>>CALL
VD_6E.SOURCE.OPERAND.EDIT_BLOCK$
      2976**DCL      3559--IMP-PTR  4691>>ASSIGN   9008>>ASSIGN   9022>>ASSIGN   9022>>IF       9022>>CALL
      9022>>CALL     9039>>ASSIGN   9039>>IF       9039>>CALL     9039>>CALL
VD_6E.SOURCE.OPERAND.STREAM$
      2976**DCL      4680>>IF
VD_6E.STRUCTURE_SCRATCH$
      2962**DCL      8316>>ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:351  
VD_ACCESSOR_PRIV
      2984**DCL      8302>>ASSIGN   8303<<ASSIGN   8369<<ASSIGN   8407<<ASSIGN   9045>>ASSIGN   9046<<ASSIGN
      9060<<ASSIGN   9085<<ASSIGN
VD_CMD_OBJECTS$
      2999**DCL      7033>>DOWHILE  7040<>CALL     7045>>ASSIGN
VD_CURRENT_WINDOW$
      2983**DCL      4681>>ASSIGN   4684>>ASSIGN
VD_EOF_DELETED
      3000**DCL      4676>>ASSIGN   4677<<ASSIGN
VD_ERR$
      3546**DCL      3969--IMP-PTR  7025<>CALL     7027>>ASSIGN   7028>>ASSIGN   7029>>ASSIGN   8379<>CALL
      8381>>ASSIGN   8382>>ASSIGN   9068<>CALL     9070>>ASSIGN   9071>>ASSIGN
VD_KEY_MN_EDITKEY
      3265**DCL      6447>>ASSIGN   6680>>ASSIGN
VD_KEY_MN_EDITKEY.LENGTH#
      3269**DCL      6561--IF       6656--IF
VD_KEY_MX_EDITKEY
      3280**DCL      6623>>ASSIGN
VD_KEY_MX_EDITKEY.LENGTH#
      3284**DCL      6005--ASSIGN
VD_KEY_NUMERIC_BOF
      2993**DCL      8324>>ASSIGN   8355>>ASSIGN
VD_KEY_NUMERIC_BOF.REP#
      2997**DCL      8355>>IF
VD_KEY_NUMERIC_BOF.V$
      2997**DCL      8355>>CALL     8355>>CALL
VD_KEY_SCRATCH_LEFTOVER
      3058**DCL      8319<>CALL     8340>>ASSIGN
VD_LOC_$LEFTOVER
      3072**DCL      8363<>CALL
VD_LOC_$NOT_COPIED
      3100**DCL      9054<>CALL
XLATE$LOC IN PROCEDURE SET_DEST_END
      5331**DCL      5512<<ASSIGN   5544<>CALL
XLATE$LOC.FILE_KEY IN PROCEDURE SET_DEST_END
      5368**DCL      5513<<ASSIGN
PL6.E3A0      #003=VDI$BINSERT File=VDI$BLOCK.:VDA5TSI                           FRI 07/04/97 11:28 Page:352  
XLATE$LOC.FLINK$ IN PROCEDURE SET_DEST_END
      5357**DCL      5520<<ASSIGN
XLATE$LOC.LEVEL# IN PROCEDURE SET_DEST_END
      5372**DCL      5514<<ASSIGN
XLATE$LOC.N_ENTRIES# IN PROCEDURE SET_DEST_END
      5357**DCL      5521<<ASSIGN
XLATE$LOC.PREFIX.KEY IN PROCEDURE SET_DEST_END
      5395**DCL      5515<<ASSIGN   5519<<ASSIGN
XLATE$LOC.XLATES.NEW_KEY IN PROCEDURE SET_DEST_END
      5453**DCL      5522<<ASSIGN   5537>>ASSIGN
XLATE$LOC.XLATES.NEW_POS# IN PROCEDURE SET_DEST_END
      5457**DCL      5539<<ASSIGN
XLATE$LOC.XLATES.NEW_POS_INCR# IN PROCEDURE SET_DEST_END
      5457**DCL      5540<<ASSIGN
XLATE$LOC.XLATES.OLD_KEY_HI IN PROCEDURE SET_DEST_END
      5438**DCL      5538<<ASSIGN
XLATE$LOC.XLATES.OLD_KEY_LO IN PROCEDURE SET_DEST_END
      5424**DCL      5530<<ASSIGN   5537<<ASSIGN   5538>>ASSIGN
XLATE$LOC.XLATES.OLD_POS_HI# IN PROCEDURE SET_DEST_END
      5442**DCL      5529<<ASSIGN
XLATE$LOC.XLATES.OLD_POS_LO# IN PROCEDURE SET_DEST_END
      5442**DCL      5528<<ASSIGN

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:353  
     2618        1        /*T***********************************************************/
     2619        2        /*T*                                                         */
     2620        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2621        4        /*T*                                                         */
     2622        5        /*T***********************************************************/
     2623        6
     2624        7        /*D*  NAME: VDI$BTYPE
     2625        8            PARAMETERS:
     2626        9                RANGE - VD$RANGE to classify.
     2627       10                BDT - Uninitialized word.
     2628       11                EDIT_BLOCK - EditBlock which encloses RANGE.
     2629       12            INPUT:
     2630       13                None.
     2631       14            OUTPUT:
     2632       15                BDT will contain the %BDT_xxx code appropriate for RANGE.
     2633       16            DESCRIPTION:
     2634       17                Examine RANGE and determine its type.  Return the appropriate
     2635       18                %BDT_ code, as shown in the following table ("d.c." means "don't care"):
     2636       19
     2637       20        start  end   start  end   startKey  start    end        Return
     2638       21        >BOF   >BOF  <EOF   <EOF  =endKey   postn>0  postn>0    %BDT_ ...
     2639       22        -----  ----  -----  ----  --------  -------  -------    ----------------------
     2640       23         yes   yes    yes   yes     no       yes      yes        2_REC_POS_NON
     2641       24         yes   yes    yes   yes     no       yes      no         2_REC_SPOS_NON_EPOS_0
     2642       25         yes   yes    yes   yes     no       no       yes        2_REC_SPOS_0_EPOS_NON
     2643       26         yes   yes    yes   yes     no       no       no         2_REC_POS_0
     2644       27         yes   yes    yes   yes     yes      yes      yes        1_REC_POS_NON
     2645       28         yes   yes    yes   yes     yes      yes      no  (error)1_REC_SPOS_NON_EPOS_0
     2646       29         yes   yes    yes   yes     yes      no       yes        1_REC_SPOS_0_EPOS_NON
     2647       30         yes   yes    yes   yes     yes      no       no         1_REC_POS_0
     2648       31         yes   yes    yes   no      d.c.     yes      d.c.       SPOS_NON_EOF
     2649       32         yes   yes    yes   no      d.c.     no       d.c.       SPOS_0_EOF
     2650       33         yes   yes    no    yes     d.c.     d.c.     d.c.(error)EOF_NOT_EOF
     2651       34         yes   yes    no    no      d.c.     d.c.     d.c.       EOF_EOF
     2652       35         yes   no     d.c.  d.c.    d.c.     d.c.     d.c.(error)NOT_BOF_BOF
     2653       36         no    yes    d.c.  yes     d.c.     d.c.     yes        BOF_EPOS_NON
     2654       37         no    yes    d.c.  yes     d.c.     d.c.     no         BOF_EPOS_0
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:354  
     2655       38         no    yes    d.c.  no      d.c.     d.c.     d.c.       BOF_EOF
     2656       39         no    no     d.c.  d.c.    d.c.     d.c.     d.c.       BOF_BOF
     2657       40        */
     2658       41
     2659       42        VDI$BTYPE: PROC (RANGE, BDT_TYPE, EDIT_BLOCK) ALTRET;
     2660       43
     2661       44        %INCLUDE VD_MACROS_M;
     2662     2259        %INCLUDE VD_PERR_C;
     2663     2407
     2664     2408
     2665     2409        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2666     2478        %VD$BLOCK_DESC (NAME=EDIT_BLOCK, STCLASS=PARAM);
     2667     2625    1   DCL BDT_TYPE UBIN;
     2668     2626
     2669     2627
     2670     2628    1   DCL VDG$OCOPY_LOCATION    ENTRY (2) ALTRET;
     2671     2629
     2672     2630        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     2673     2644
     2674     2645
     2675     2646
     2676     2647    1   DCL START_KEY$ PTR;
     2677     2648    1   DCL END_KEY$ PTR;
     2678     2649    1   DCL BLOCK_ENDD_KEY$ PTR;
     2679     2650    1   DCL BOF_KEY$ PTR;
     2680     2651    1   DCL 1 POS#,
     2681     2652    1         2 START SBIN HALF UNAL,
     2682     2653    1         2 ENDD SBIN HALF UNAL;
     2683     2654
     2684     2655
     2685     2656        %VD$TEXTC (NAME=START$KEY, STCLASS="BASED(START_KEY$)");
     2686     2679        %VD$TEXTC (NAME=END$KEY, STCLASS="BASED(END_KEY$)");
     2687     2702        %VD$TEXTC (NAME=BLOCK$ENDD_KEY, STCLASS="BASED(BLOCK_ENDD_KEY$)");
     2688     2725        %VD$TEXTC (NAME=BOF$KEY, STCLASS="BASED(BOF_KEY$)");
     2689     2748        %VD$TEXTC_REMOTE;
     2690     2809
     2691     2810
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:355  
     2692     2811
     2693     2812                %GETKEY (KEY=RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)", PTR=START_KEY$);
     2694     2822                %GETKEY (KEY=RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)", PTR=END_KEY$);
     2695     2832                %GETKEY (KEY=VD_KEY_NUMERIC_BOF, PTR=BOF_KEY$);
     2696     2842                %GETKEY (KEY=EDIT_BLOCK.RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
     2697     2843                PTR=BLOCK_ENDD_KEY$);
     2698     2853    1           POS#.START = MAXIMUM (RANGE.START.POSITION#, 0);
     2699     2854    1           IF RANGE.START.EOF THEN POS#.START = -1;
     2700     2855    1           POS#.ENDD = MAXIMUM (RANGE.ENDD.POSITION#, 0);
     2701     2856    1           IF RANGE.ENDD.EOF
     2702     2857    1             OR (END$KEY.BYTES >= BLOCK$ENDD_KEY.BYTES
     2703     2858    1             AND EDIT_BLOCK.RANGE.ENDD.POSITION# = 0
     2704     2859    1             AND NOT EDIT_BLOCK.RANGE.ENDD.EOF) THEN POS#.ENDD = -1;
     2705     2860
     2706     2861    1           IF START$KEY.BYTES = BOF$KEY.BYTES AND POS#.START = 0 THEN
     2707     2862    2   START_IS_BOF: DO;
     2708     2863    2              IF END$KEY.BYTES = BOF$KEY.BYTES AND POS#.ENDD = 0 THEN
     2709     2864    2                 BDT_TYPE = %BDT_BOF_BOF;
     2710     2865    2              ELSE
     2711     2866    2                 IF POS#.ENDD < 0 THEN
     2712     2867    2                    BDT_TYPE = %BDT_BOF_EOF;
     2713     2868    2                 ELSE
     2714     2869    2                    IF POS#.ENDD = 0 THEN
     2715     2870    2                       BDT_TYPE = %BDT_BOF_EPOS_0;
     2716     2871    2                    ELSE
     2717     2872    2                       BDT_TYPE = %BDT_BOF_EPOS_NON;
     2718     2873    2              END START_IS_BOF;
     2719     2874    1           ELSE
     2720     2875    1              IF END$KEY.BYTES = BOF$KEY.BYTES AND POS#.ENDD = 0 THEN
     2721     2876    1                 BDT_TYPE = %BDT_NOT_BOF_BOF;  /* Error */
     2722     2877    1              ELSE
     2723     2878    1                 IF POS#.START < 0 THEN
     2724     2879    1                    IF POS#.ENDD < 0 THEN
     2725     2880    1                       BDT_TYPE = %BDT_EOF_EOF;
     2726     2881    1                    ELSE
     2727     2882    1                       BDT_TYPE = %BDT_EOF_NOT_EOF;  /* Error */
     2728     2883    1                 ELSE
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:356  
     2729     2884    1                    IF POS#.ENDD < 0 THEN
     2730     2885    1                       IF POS#.START = 0 THEN
     2731     2886    1                          BDT_TYPE = %BDT_SPOS_0_EOF;
     2732     2887    1                       ELSE
     2733     2888    1                          BDT_TYPE = %BDT_SPOS_NON_EOF;
     2734     2889    1                    ELSE
     2735     2890    1                       IF START$KEY.BYTES = END$KEY.BYTES THEN
     2736     2891    1                          IF POS#.START = 0 THEN
     2737     2892    1                             IF POS#.ENDD = 0 THEN
     2738     2893    1                                BDT_TYPE = %BDT_1_REC_POS_0;
     2739     2894    1                             ELSE
     2740     2895    1                                BDT_TYPE = %BDT_1_REC_SPOS_0_EPOS_NON;
     2741     2896    1                          ELSE
     2742     2897    1                             IF POS#.ENDD = 0 THEN
     2743     2898    1                                BDT_TYPE = %BDT_1_REC_SPOS_NON_EPOS_0;
     2744     2899    1                             ELSE
     2745     2900    1                                BDT_TYPE = %BDT_1_REC_POS_NON;
     2746     2901    1                       ELSE
     2747     2902    1                          IF POS#.START = 0 THEN
     2748     2903    1                             IF POS#.ENDD = 0 THEN
     2749     2904    1                                BDT_TYPE = %BDT_2_REC_POS_0;
     2750     2905    1                             ELSE
     2751     2906    1                                BDT_TYPE = %BDT_2_REC_SPOS_0_EPOS_NON;
     2752     2907    1                          ELSE
     2753     2908    1                             IF POS#.ENDD = 0 THEN
     2754     2909    1                                BDT_TYPE = %BDT_2_REC_SPOS_NON_EPOS_0;
     2755     2910    1                             ELSE
     2756     2911    1                                BDT_TYPE = %BDT_2_REC_POS_NON;
     2757     2912
     2758     2913    1           RETURN;
     2759     2914
     2760     2915
     2761     2916    1   END VDI$BTYPE;

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:357  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BTYPE.

   Procedure VDI$BTYPE requires 213 words for executable code.
   Procedure VDI$BTYPE requires 12 words of local(AUTO) storage.

    No errors detected in file VDI$BLOCK.:VDA5TSI    .

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:358  

 Object Unit name= VDI$BTYPE                                  File name= VDI$BLOCK.:VDA5TOU
 UTS= JUL 04 '97 11:29:37.08 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   213    325  VDI$BTYPE
    1  RoData even  none     1      1  VDI$BTYPE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VDI$BTYPE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_KEY_NUMERIC_BOF
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:359  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:360  


     2618        1        /*T***********************************************************/
     2619        2        /*T*                                                         */
     2620        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2621        4        /*T*                                                         */
     2622        5        /*T***********************************************************/
     2623        6
     2624        7        /*D*  NAME: VDI$BTYPE
     2625        8            PARAMETERS:
     2626        9                RANGE - VD$RANGE to classify.
     2627       10                BDT - Uninitialized word.
     2628       11                EDIT_BLOCK - EditBlock which encloses RANGE.
     2629       12            INPUT:
     2630       13                None.
     2631       14            OUTPUT:
     2632       15                BDT will contain the %BDT_xxx code appropriate for RANGE.
     2633       16            DESCRIPTION:
     2634       17                Examine RANGE and determine its type.  Return the appropriate
     2635       18                %BDT_ code, as shown in the following table ("d.c." means "don't care"):
     2636       19
     2637       20        start  end   start  end   startKey  start    end        Return
     2638       21        >BOF   >BOF  <EOF   <EOF  =endKey   postn>0  postn>0    %BDT_ ...
     2639       22        -----  ----  -----  ----  --------  -------  -------    ----------------------
     2640       23         yes   yes    yes   yes     no       yes      yes        2_REC_POS_NON
     2641       24         yes   yes    yes   yes     no       yes      no         2_REC_SPOS_NON_EPOS_0
     2642       25         yes   yes    yes   yes     no       no       yes        2_REC_SPOS_0_EPOS_NON
     2643       26         yes   yes    yes   yes     no       no       no         2_REC_POS_0
     2644       27         yes   yes    yes   yes     yes      yes      yes        1_REC_POS_NON
     2645       28         yes   yes    yes   yes     yes      yes      no  (error)1_REC_SPOS_NON_EPOS_0
     2646       29         yes   yes    yes   yes     yes      no       yes        1_REC_SPOS_0_EPOS_NON
     2647       30         yes   yes    yes   yes     yes      no       no         1_REC_POS_0
     2648       31         yes   yes    yes   no      d.c.     yes      d.c.       SPOS_NON_EOF
     2649       32         yes   yes    yes   no      d.c.     no       d.c.       SPOS_0_EOF
     2650       33         yes   yes    no    yes     d.c.     d.c.     d.c.(error)EOF_NOT_EOF
     2651       34         yes   yes    no    no      d.c.     d.c.     d.c.       EOF_EOF
     2652       35         yes   no     d.c.  d.c.    d.c.     d.c.     d.c.(error)NOT_BOF_BOF
     2653       36         no    yes    d.c.  yes     d.c.     d.c.     yes        BOF_EPOS_NON
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:361  
     2654       37         no    yes    d.c.  yes     d.c.     d.c.     no         BOF_EPOS_0
     2655       38         no    yes    d.c.  no      d.c.     d.c.     d.c.       BOF_EOF
     2656       39         no    no     d.c.  d.c.    d.c.     d.c.     d.c.       BOF_BOF
     2657       40        */
     2658       41
     2659       42        VDI$BTYPE: PROC (RANGE, BDT_TYPE, EDIT_BLOCK) ALTRET;

     42  0 000000   000000 700200 xent  VDI$BTYPE    TSX0  ! X66_AUTO_3
         0 000001   000014 000003                    ZERO    12,3

     2660       43
     2661       44        %INCLUDE VD_MACROS_M;
     2662     2259        %INCLUDE VD_PERR_C;
     2663     2407
     2664     2408
     2665     2409        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2666     2478        %VD$BLOCK_DESC (NAME=EDIT_BLOCK, STCLASS=PARAM);
     2667     2625    1   DCL BDT_TYPE UBIN;
     2668     2626
     2669     2627
     2670     2628    1   DCL VDG$OCOPY_LOCATION    ENTRY (2) ALTRET;
     2671     2629
     2672     2630        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     2673     2644
     2674     2645
     2675     2646
     2676     2647    1   DCL START_KEY$ PTR;
     2677     2648    1   DCL END_KEY$ PTR;
     2678     2649    1   DCL BLOCK_ENDD_KEY$ PTR;
     2679     2650    1   DCL BOF_KEY$ PTR;
     2680     2651    1   DCL 1 POS#,
     2681     2652    1         2 START SBIN HALF UNAL,
     2682     2653    1         2 ENDD SBIN HALF UNAL;
     2683     2654
     2684     2655
     2685     2656        %VD$TEXTC (NAME=START$KEY, STCLASS="BASED(START_KEY$)");
     2686     2679        %VD$TEXTC (NAME=END$KEY, STCLASS="BASED(END_KEY$)");
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:362  
     2687     2702        %VD$TEXTC (NAME=BLOCK$ENDD_KEY, STCLASS="BASED(BLOCK_ENDD_KEY$)");
     2688     2725        %VD$TEXTC (NAME=BOF$KEY, STCLASS="BASED(BOF_KEY$)");
     2689     2748        %VD$TEXTC_REMOTE;
     2690     2809
     2691     2810
     2692     2811
     2693     2812                %GETKEY (KEY=RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)", PTR=START_KEY$);

   2819  0 000002   200003 470500                    LDP0    @RANGE,,AUTO
         0 000003   000000 720100                    LXL0    0,,PR0
         0 000004   000002 100003                    CMPX0   2,DU
         0 000005   000012 601000 0                  TNZ     s:2819+8

   2819  0 000006   000001 471500                    LDP1    1,,PR0
         0 000007   100002 633500                    EPPR3   2,,PR1
         0 000010   200006 453500                    STP3    START_KEY$,,AUTO
         0 000011   000015 710000 0                  TRA     s:2829

   2819  0 000012   200003 236100                    LDQ     @RANGE,,AUTO
         0 000013   000001 036003                    ADLQ    1,DU
         0 000014   200006 756100                    STQ     START_KEY$,,AUTO

     2694     2822                %GETKEY (KEY=RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)", PTR=END_KEY$);

   2829  0 000015   000011 721100                    LXL1    9,,PR0
         0 000016   000002 101003                    CMPX1   2,DU
         0 000017   000024 601000 0                  TNZ     s:2829+7

   2829  0 000020   000012 471500                    LDP1    10,,PR0
         0 000021   100002 633500                    EPPR3   2,,PR1
         0 000022   200007 453500                    STP3    END_KEY$,,AUTO
         0 000023   000027 710000 0                  TRA     s:2839

   2829  0 000024   200003 236100                    LDQ     @RANGE,,AUTO
         0 000025   000012 036003                    ADLQ    10,DU
         0 000026   200007 756100                    STQ     END_KEY$,,AUTO

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:363  
     2695     2832                %GETKEY (KEY=VD_KEY_NUMERIC_BOF, PTR=BOF_KEY$);

   2839  0 000027   000000 722000 xsym               LXL2    VD_KEY_NUMERIC_BOF
         0 000030   000002 102003                    CMPX2   2,DU
         0 000031   000036 601000 0                  TNZ     s:2839+7

   2839  0 000032   000001 236000 xsym               LDQ     VD_KEY_NUMERIC_BOF+1
         0 000033   000002 036003                    ADLQ    2,DU
         0 000034   200011 756100                    STQ     BOF_KEY$,,AUTO
         0 000035   000040 710000 0                  TRA     s:2850

   2839  0 000036   000000 236000 1                  LDQ     0
         0 000037   200011 756100                    STQ     BOF_KEY$,,AUTO

     2696     2842                %GETKEY (KEY=EDIT_BLOCK.RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
     2697     2843                PTR=BLOCK_ENDD_KEY$);

   2850  0 000040   200005 471500                    LDP1    @EDIT_BLOCK,,AUTO
         0 000041   100014 723100                    LXL3    12,,PR1
         0 000042   000002 103003                    CMPX3   2,DU
         0 000043   000050 601000 0                  TNZ     s:2850+8

   2850  0 000044   100015 473500                    LDP3    13,,PR1
         0 000045   300002 634500                    EPPR4   2,,PR3
         0 000046   200010 454500                    STP4    BLOCK_ENDD_KEY$,,AUTO
         0 000047   000053 710000 0                  TRA     s:2853

   2850  0 000050   200005 236100                    LDQ     @EDIT_BLOCK,,AUTO
         0 000051   000015 036003                    ADLQ    13,DU
         0 000052   200010 756100                    STQ     BLOCK_ENDD_KEY$,,AUTO

     2698     2853    1           POS#.START = MAXIMUM (RANGE.START.POSITION#, 0);

   2853  0 000053   000010 236100                    LDQ     8,,PR0
         0 000054   000022 732000                    QRS     18
         0 000055   000000 116003                    CMPQ    0,DU
         0 000056   000060 605000 0                  TPL     s:2853+5
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:364  
         0 000057   000000 236003                    LDQ     0,DU
         0 000060   000000 624006                    EAX4    0,QL
         0 000061   200012 744100                    STX4    POS#,,AUTO

     2699     2854    1           IF RANGE.START.EOF THEN POS#.START = -1;

   2854  0 000062   000010 236100                    LDQ     8,,PR0
         0 000063   400000 316007                    CANQ    -131072,DL
         0 000064   000067 600000 0                  TZE     s:2855

   2854  0 000065   777777 225003                    LDX5    -1,DU
         0 000066   200012 745100                    STX5    POS#,,AUTO

     2700     2855    1           POS#.ENDD = MAXIMUM (RANGE.ENDD.POSITION#, 0);

   2855  0 000067   000021 236100                    LDQ     17,,PR0
         0 000070   000022 732000                    QRS     18
         0 000071   000000 116003                    CMPQ    0,DU
         0 000072   000074 605000 0                  TPL     s:2855+5
         0 000073   000000 236003                    LDQ     0,DU
         0 000074   000000 624006                    EAX4    0,QL
         0 000075   200012 444100                    SXL4    POS#,,AUTO

     2701     2856    1           IF RANGE.ENDD.EOF

   2856  0 000076   000021 236100                    LDQ     17,,PR0
         0 000077   400000 316007                    CANQ    -131072,DL
         0 000100   000122 601000 0                  TNZ     s:2859
         0 000101   200007 473500                    LDP3    END_KEY$,,AUTO
         0 000102   300000 236100                    LDQ     0,,PR3
         0 000103   000033 772000                    QRL     27
         0 000104   200010 474500                    LDP4    BLOCK_ENDD_KEY$,,AUTO
         0 000105   000000 625006                    EAX5    0,QL
         0 000106   400000 236100                    LDQ     0,,PR4
         0 000107   000033 772000                    QRL     27
         0 000110   000000 626006                    EAX6    0,QL
         0 000111   040140 106540                    CMPC    fill='040'O
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:365  
         0 000112   300000 200015                    ADSC9   0,,PR3                   cn=1,n=*X5
         0 000113   400000 200016                    ADSC9   0,,PR4                   cn=1,n=*X6
         0 000114   000124 602000 0                  TNC     s:2861
         0 000115   100024 227100                    LDX7    20,,PR1
         0 000116   000124 601000 0                  TNZ     s:2861
         0 000117   100024 236100                    LDQ     20,,PR1
         0 000120   400000 316007                    CANQ    -131072,DL
         0 000121   000124 601000 0                  TNZ     s:2861

     2702     2857    1             OR (END$KEY.BYTES >= BLOCK$ENDD_KEY.BYTES
     2703     2858    1             AND EDIT_BLOCK.RANGE.ENDD.POSITION# = 0
     2704     2859    1             AND NOT EDIT_BLOCK.RANGE.ENDD.EOF) THEN POS#.ENDD = -1;

   2859  0 000122   777777 225003                    LDX5    -1,DU
         0 000123   200012 445100                    SXL5    POS#,,AUTO

     2705     2860
     2706     2861    1           IF START$KEY.BYTES = BOF$KEY.BYTES AND POS#.START = 0 THEN

   2861  0 000124   200006 473500                    LDP3    START_KEY$,,AUTO
         0 000125   300000 236100                    LDQ     0,,PR3
         0 000126   000033 772000                    QRL     27
         0 000127   200011 474500                    LDP4    BOF_KEY$,,AUTO
         0 000130   000000 624006                    EAX4    0,QL
         0 000131   400000 236100                    LDQ     0,,PR4
         0 000132   000033 772000                    QRL     27
         0 000133   000000 625006                    EAX5    0,QL
         0 000134   040140 106540                    CMPC    fill='040'O
         0 000135   300000 200014                    ADSC9   0,,PR3                   cn=1,n=*X4
         0 000136   400000 200015                    ADSC9   0,,PR4                   cn=1,n=*X5
         0 000137   000177 601000 0                  TNZ     s:2875
         0 000140   200012 226100                    LDX6    POS#,,AUTO
         0 000141   000177 601000 0                  TNZ     s:2875

     2707     2862    2   START_IS_BOF: DO;

   2862  0 000142                       START_IS_BOF null
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:366  
     2708     2863    2              IF END$KEY.BYTES = BOF$KEY.BYTES AND POS#.ENDD = 0 THEN

   2863  0 000142   200007 475500                    LDP5    END_KEY$,,AUTO
         0 000143   500000 236100                    LDQ     0,,PR5
         0 000144   000033 772000                    QRL     27
         0 000145   000000 627006                    EAX7    0,QL
         0 000146   040140 106540                    CMPC    fill='040'O
         0 000147   500000 200017                    ADSC9   0,,PR5                   cn=1,n=*X7
         0 000150   400000 200015                    ADSC9   0,,PR4                   cn=1,n=*X5
         0 000151   000160 601000 0                  TNZ     s:2866
         0 000152   200012 720100                    LXL0    POS#,,AUTO
         0 000153   000160 601000 0                  TNZ     s:2866

     2709     2864    2                 BDT_TYPE = %BDT_BOF_BOF;

   2864  0 000154   000021 235007                    LDA     17,DL
         0 000155   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000156   600000 755100                    STA     0,,PR6
         0 000157   000324 710000 0                  TRA     s:2913

     2710     2865    2              ELSE
     2711     2866    2                 IF POS#.ENDD < 0 THEN

   2866  0 000160   200012 720100                    LXL0    POS#,,AUTO
         0 000161   000166 605000 0                  TPL     s:2869

     2712     2867    2                    BDT_TYPE = %BDT_BOF_EOF;

   2867  0 000162   000020 235007                    LDA     16,DL
         0 000163   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000164   600000 755100                    STA     0,,PR6
         0 000165   000324 710000 0                  TRA     s:2913

     2713     2868    2                 ELSE
     2714     2869    2                    IF POS#.ENDD = 0 THEN

   2869  0 000166   000173 601000 0                  TNZ     s:2872
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:367  

     2715     2870    2                       BDT_TYPE = %BDT_BOF_EPOS_0;

   2870  0 000167   000017 235007                    LDA     15,DL
         0 000170   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000171   600000 755100                    STA     0,,PR6
         0 000172   000324 710000 0                  TRA     s:2913

     2716     2871    2                    ELSE
     2717     2872    2                       BDT_TYPE = %BDT_BOF_EPOS_NON;

   2872  0 000173   000016 235007                    LDA     14,DL
         0 000174   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000175   600000 755100                    STA     0,,PR6

     2718     2873    2              END START_IS_BOF;

   2873  0 000176   000324 710000 0                  TRA     s:2913

     2719     2874    1           ELSE
     2720     2875    1              IF END$KEY.BYTES = BOF$KEY.BYTES AND POS#.ENDD = 0 THEN

   2875  0 000177   200007 475500                    LDP5    END_KEY$,,AUTO
         0 000200   500000 236100                    LDQ     0,,PR5
         0 000201   000033 772000                    QRL     27
         0 000202   000000 626006                    EAX6    0,QL
         0 000203   040140 106540                    CMPC    fill='040'O
         0 000204   500000 200016                    ADSC9   0,,PR5                   cn=1,n=*X6
         0 000205   400000 200015                    ADSC9   0,,PR4                   cn=1,n=*X5
         0 000206   000215 601000 0                  TNZ     s:2878
         0 000207   200012 727100                    LXL7    POS#,,AUTO
         0 000210   000215 601000 0                  TNZ     s:2878

     2721     2876    1                 BDT_TYPE = %BDT_NOT_BOF_BOF;  /* Error */

   2876  0 000211   000015 235007                    LDA     13,DL
         0 000212   200004 476500                    LDP6    @BDT_TYPE,,AUTO
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:368  
         0 000213   600000 755100                    STA     0,,PR6
         0 000214   000324 710000 0                  TRA     s:2913

     2722     2877    1              ELSE
     2723     2878    1                 IF POS#.START < 0 THEN

   2878  0 000215   200012 227100                    LDX7    POS#,,AUTO
         0 000216   000231 605000 0                  TPL     s:2884

     2724     2879    1                    IF POS#.ENDD < 0 THEN

   2879  0 000217   200012 720100                    LXL0    POS#,,AUTO
         0 000220   000225 605000 0                  TPL     s:2882

     2725     2880    1                       BDT_TYPE = %BDT_EOF_EOF;

   2880  0 000221   000014 235007                    LDA     12,DL
         0 000222   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000223   600000 755100                    STA     0,,PR6
         0 000224   000324 710000 0                  TRA     s:2913

     2726     2881    1                    ELSE
     2727     2882    1                       BDT_TYPE = %BDT_EOF_NOT_EOF;  /* Error */

   2882  0 000225   000013 235007                    LDA     11,DL
         0 000226   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000227   600000 755100                    STA     0,,PR6
         0 000230   000324 710000 0                  TRA     s:2913

     2728     2883    1                 ELSE
     2729     2884    1                    IF POS#.ENDD < 0 THEN

   2884  0 000231   200012 720100                    LXL0    POS#,,AUTO
         0 000232   000245 605000 0                  TPL     s:2890

     2730     2885    1                       IF POS#.START = 0 THEN

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:369  
   2885  0 000233   000000 107003                    CMPX7   0,DU
         0 000234   000241 601000 0                  TNZ     s:2888

     2731     2886    1                          BDT_TYPE = %BDT_SPOS_0_EOF;

   2886  0 000235   000012 235007                    LDA     10,DL
         0 000236   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000237   600000 755100                    STA     0,,PR6
         0 000240   000324 710000 0                  TRA     s:2913

     2732     2887    1                       ELSE
     2733     2888    1                          BDT_TYPE = %BDT_SPOS_NON_EOF;

   2888  0 000241   000011 235007                    LDA     9,DL
         0 000242   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000243   600000 755100                    STA     0,,PR6
         0 000244   000324 710000 0                  TRA     s:2913

     2734     2889    1                    ELSE
     2735     2890    1                       IF START$KEY.BYTES = END$KEY.BYTES THEN

   2890  0 000245   040140 106540                    CMPC    fill='040'O
         0 000246   300000 200014                    ADSC9   0,,PR3                   cn=1,n=*X4
         0 000247   500000 200016                    ADSC9   0,,PR5                   cn=1,n=*X6
         0 000250   000277 601000 0                  TNZ     s:2902

     2736     2891    1                          IF POS#.START = 0 THEN

   2891  0 000251   000000 107003                    CMPX7   0,DU
         0 000252   000265 601000 0                  TNZ     s:2897

     2737     2892    1                             IF POS#.ENDD = 0 THEN

   2892  0 000253   000000 100003                    CMPX0   0,DU
         0 000254   000261 601000 0                  TNZ     s:2895

     2738     2893    1                                BDT_TYPE = %BDT_1_REC_POS_0;
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:370  

   2893  0 000255   000010 235007                    LDA     8,DL
         0 000256   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000257   600000 755100                    STA     0,,PR6
         0 000260   000324 710000 0                  TRA     s:2913

     2739     2894    1                             ELSE
     2740     2895    1                                BDT_TYPE = %BDT_1_REC_SPOS_0_EPOS_NON;

   2895  0 000261   000007 235007                    LDA     7,DL
         0 000262   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000263   600000 755100                    STA     0,,PR6
         0 000264   000324 710000 0                  TRA     s:2913

     2741     2896    1                          ELSE
     2742     2897    1                             IF POS#.ENDD = 0 THEN

   2897  0 000265   000000 100003                    CMPX0   0,DU
         0 000266   000273 601000 0                  TNZ     s:2900

     2743     2898    1                                BDT_TYPE = %BDT_1_REC_SPOS_NON_EPOS_0;

   2898  0 000267   000006 235007                    LDA     6,DL
         0 000270   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000271   600000 755100                    STA     0,,PR6
         0 000272   000324 710000 0                  TRA     s:2913

     2744     2899    1                             ELSE
     2745     2900    1                                BDT_TYPE = %BDT_1_REC_POS_NON;

   2900  0 000273   000005 235007                    LDA     5,DL
         0 000274   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000275   600000 755100                    STA     0,,PR6
         0 000276   000324 710000 0                  TRA     s:2913

     2746     2901    1                       ELSE
     2747     2902    1                          IF POS#.START = 0 THEN
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:371  

   2902  0 000277   000000 107003                    CMPX7   0,DU
         0 000300   000313 601000 0                  TNZ     s:2908

     2748     2903    1                             IF POS#.ENDD = 0 THEN

   2903  0 000301   000000 100003                    CMPX0   0,DU
         0 000302   000307 601000 0                  TNZ     s:2906

     2749     2904    1                                BDT_TYPE = %BDT_2_REC_POS_0;

   2904  0 000303   000004 235007                    LDA     4,DL
         0 000304   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000305   600000 755100                    STA     0,,PR6
         0 000306   000324 710000 0                  TRA     s:2913

     2750     2905    1                             ELSE
     2751     2906    1                                BDT_TYPE = %BDT_2_REC_SPOS_0_EPOS_NON;

   2906  0 000307   000003 235007                    LDA     3,DL
         0 000310   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000311   600000 755100                    STA     0,,PR6
         0 000312   000324 710000 0                  TRA     s:2913

     2752     2907    1                          ELSE
     2753     2908    1                             IF POS#.ENDD = 0 THEN

   2908  0 000313   000000 100003                    CMPX0   0,DU
         0 000314   000321 601000 0                  TNZ     s:2911

     2754     2909    1                                BDT_TYPE = %BDT_2_REC_SPOS_NON_EPOS_0;

   2909  0 000315   000002 235007                    LDA     2,DL
         0 000316   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000317   600000 755100                    STA     0,,PR6
         0 000320   000324 710000 0                  TRA     s:2913

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:372  
     2755     2910    1                             ELSE
     2756     2911    1                                BDT_TYPE = %BDT_2_REC_POS_NON;

   2911  0 000321   000001 235007                    LDA     1,DL
         0 000322   200004 476500                    LDP6    @BDT_TYPE,,AUTO
         0 000323   600000 755100                    STA     0,,PR6

     2757     2912
     2758     2913    1           RETURN;

   2913  0 000324   000000 702200 xent               TSX2  ! X66_ARET
     2759     2914
     2760     2915
     2761     2916    1   END VDI$BTYPE;

PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:373  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDI$BTYPE.
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:374  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BDT_TYPE                  5-0-0/w PTR         r     1 @EDIT_BLOCK
     3-0-0/w PTR         r     1 @RANGE                    *0-0-0/w UBIN        r     1 BDT_TYPE
    10-0-0/w PTR         r     1 BLOCK_ENDD_KEY$           11-0-0/w PTR         r     1 BOF_KEY$
    *0-0-0/w STRC(936)   r     1 EDIT_BLOCK                 7-0-0/w PTR         r     1 END_KEY$
    12-0-0/b STRC        r     1 POS#                      *0-0-0/w STRC(648)   r     1 RANGE
     6-0-0/w PTR         r     1 START_KEY$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 BLOCK$ENDD_KEY             0-0-0/w ASTR(9)     r     1 BOF$KEY
     0-0-0/w ASTR(9)     r     1 END$KEY                    0-0-0/w ASTR(9)     r     1 START$KEY
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDI$BTYPE requires 213 words for executable code.
   Procedure VDI$BTYPE requires 12 words of local(AUTO) storage.

    No errors detected in file VDI$BLOCK.:VDA5TSI    .
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:375  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:376  
          MINI XREF LISTING

BDT_TYPE
      2625**DCL        42--PROC     2864<<ASSIGN   2867<<ASSIGN   2870<<ASSIGN   2872<<ASSIGN   2876<<ASSIGN
      2880<<ASSIGN   2882<<ASSIGN   2886<<ASSIGN   2888<<ASSIGN   2893<<ASSIGN   2895<<ASSIGN   2898<<ASSIGN
      2900<<ASSIGN   2904<<ASSIGN   2906<<ASSIGN   2909<<ASSIGN   2911<<ASSIGN
BLOCK$ENDD_KEY.BYTES
      2720**DCL      2856>>IF
BLOCK$ENDD_KEY.LENGTH#
      2718**DCL      2720--IMP-SIZ  2856>>IF
BLOCK_ENDD_KEY$
      2649**DCL      2710--IMP-PTR  2850<<ASSIGN   2850<<ASSIGN   2856>>IF       2856>>IF
BOF$KEY.BYTES
      2743**DCL      2861>>IF       2863>>IF       2875>>IF
BOF$KEY.LENGTH#
      2741**DCL      2743--IMP-SIZ  2861>>IF       2863>>IF       2875>>IF
BOF_KEY$
      2650**DCL      2733--IMP-PTR  2839<<ASSIGN   2839<<ASSIGN   2861>>IF       2861>>IF       2863>>IF
      2863>>IF       2875>>IF       2875>>IF
EDIT_BLOCK
      2486**DCL        42--PROC
EDIT_BLOCK.RANGE.ENDD.EOF
      2592**DCL      2856>>IF
EDIT_BLOCK.RANGE.ENDD.KEY.REP#
      2590**DCL      2850>>IF
EDIT_BLOCK.RANGE.ENDD.KEY.V$
      2590**DCL      2850>>ASSIGN   2850--ASSIGN
EDIT_BLOCK.RANGE.ENDD.POSITION#
      2592**DCL      2856>>IF
END$KEY.BYTES
      2697**DCL      2856>>IF       2863>>IF       2875>>IF       2890>>IF
END$KEY.LENGTH#
      2695**DCL      2697--IMP-SIZ  2856>>IF       2863>>IF       2875>>IF       2890>>IF
END_KEY$
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:377  
      2648**DCL      2687--IMP-PTR  2829<<ASSIGN   2829<<ASSIGN   2856>>IF       2856>>IF       2863>>IF
      2863>>IF       2875>>IF       2875>>IF       2890>>IF       2890>>IF
POS#.ENDD
      2653**DCL      2855<<ASSIGN   2859<<ASSIGN   2863>>IF       2866>>IF       2869>>IF       2875>>IF
      2879>>IF       2884>>IF       2892>>IF       2897>>IF       2903>>IF       2908>>IF
POS#.START
      2652**DCL      2853<<ASSIGN   2854<<ASSIGN   2861>>IF       2878>>IF       2885>>IF       2891>>IF
      2902>>IF
RANGE
      2417**DCL        42--PROC
RANGE.ENDD.EOF
      2475**DCL      2856>>IF
RANGE.ENDD.KEY.REP#
      2473**DCL      2829>>IF
RANGE.ENDD.KEY.V$
      2473**DCL      2829>>ASSIGN   2829--ASSIGN
RANGE.ENDD.POSITION#
      2475**DCL      2855>>ASSIGN
RANGE.START.EOF
      2447**DCL      2854>>IF
RANGE.START.KEY.REP#
      2445**DCL      2819>>IF
RANGE.START.KEY.V$
      2445**DCL      2819>>ASSIGN   2819--ASSIGN
RANGE.START.POSITION#
      2447**DCL      2853>>ASSIGN
START$KEY.BYTES
      2674**DCL      2861>>IF       2890>>IF
START$KEY.LENGTH#
      2672**DCL      2674--IMP-SIZ  2861>>IF       2890>>IF
START_KEY$
      2647**DCL      2664--IMP-PTR  2819<<ASSIGN   2819<<ASSIGN   2861>>IF       2861>>IF       2890>>IF
      2890>>IF
VD$TEXTC_REMOTE.LENGTH#
      2802**DCL      2804--IMP-SIZ  2819--ASSIGN   2829--ASSIGN   2839--ASSIGN   2850--ASSIGN
VD_KEY_NUMERIC_BOF.REP#
PL6.E3A0      #004=VDI$BTYPE File=VDI$BLOCK.:VDA5TSI                             FRI 07/04/97 11:29 Page:378  
      2642**DCL      2839>>IF
VD_KEY_NUMERIC_BOF.V$
      2642**DCL      2839>>ASSIGN   2839--ASSIGN
