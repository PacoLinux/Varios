VERSION A05

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:1    
        1        1        /*M* VDA$PORT - Accessor operations on a Port */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$PORT
       12       12            PURPOSE: Accessor operations on a Port.
       13       13            DESCRIPTION:
       14       14                This module contains several external entries:
       15       15
       16       16                VDA$PREAD
       17       17                For a Port open to either an internal or external file,
       18       18                given an absolute location and a relative node increment,
       19       19                will position the Port/DCB to the requested node.
       20       20                Optionally, will also read the specified node.
       21       21
       22       22                VDA$PWRITE
       23       23                Given a port positioned to a node in an internal or external
       24       24                file, will replace that node's Spec and/or Data components.
       25       25                For internal files, the file node will be updated as well.
       26       26
       27       27                VDA$PFLUSH
       28       28                Will flush a Port's level-registers to the file and,
       29       29                optionally, to the Presenter.
       30       30
       31       31                VDA$PDELETE
       32       32                Given a port and a range, will delete the nodes in the range
       33       33                from an internal or external file.  Will also count the nodes
       34       34                actually deleted.
       35       35        */
       36       36
       37       37        /*D* NAME: VDA$PREAD
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:2    
       38       38            PARAMETERS:
       39       39                PORT - VD$PORT to use.  This Port must already be open,
       40       40                    to either an external file (and so have a DCB attached)
       41       41                    or an internal file (and so have a VD$FILE_NODE attached).
       42       42                ABSOLUTE - VD$LOCATION containing the absolute location
       43       43                    to position to first.  ABSOLUTE must contain only one of:
       44       44                    %CLEAR - Position to BOF.
       45       45                    .KEY (%(LVL_LOWER-1)) thru (n) - Keys at levels %LVL_LOWER
       46       46                        thru (n+1) of the file.
       47       47                    .EOF - Position to EOF.
       48       48                RELATIVE - Signed # of records to move relative to ABSOLUTE.
       49       49                    RELATIVE>0 moves forward.
       50       50                    RELATIVE<0 moves backward.
       51       51                    RELATIVE=0 means only ABSOLUTE positioning is performed.
       52       52                READ - A BIT(1) ALIGNED flag; if set, we'll read the node
       53       53                    positioned-to into the Port's registers; if READ = %FALSE,
       54       54                    we'll just position the Port.
       55       55                NODE_EXISTS - Optional BIT(1) ALIGNED, uninitialized at entry.
       56       56                COUNT - Optional SBIN, uninitialized at entry.
       57       57            INPUT:
       58       58                None.
       59       59            OUTPUT:
       60       60                In the specified Port, VD$PORT.CURRENT will be set:
       61       61                If PORT.CURRENT.EOF is not set, then the .CURRENT.KEYs
       62       62                    specify the keys of the node nearest the requested one.
       63       63                    This could only be different than the requested node if
       64       64                    RELATIVE = 0 and the specified key doesn't exist in the file.
       65       65                If PORT.CURRENT.EOF is set, then we hit EOF (by
       66       66                    request or while positioning the Port).  In this case,
       67       67                    no other Key, Spec, or Data info in the port is accurate.
       68       68                If ABSOLUTE was %CLEAR at entry, then PORT.CURRENT will
       69       69                    be positioned to the first record in the file; if file is
       70       70                    empty, PORT.CURRENT.EOF will be set.
       71       71                If READ is set, PORT.LEVEL.SPEC and .DATA for levels %LVL_LOWER
       72       72                    thru n will contain the Spec and Data components of the
       73       73                    specified nodes.
       74       74                If NODE_EXISTS is passed, it will be set if:
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:3    
       75       75                        ABSOLUTE.EOF set or ABSOLUTE = %CLEAR or ABSOLUTE omitted;
       76       76                        or RELATIVE is non-0.
       77       77                    NODE_EXISTS will only be reset when:
       78       78                        ABSOLUTE is given and it isn't = %CLEAR and .EOF not set,
       79       79                        and (RELATIVE = 0 or RELATIVE is omitted),
       80       80                        and the node specified by the ABSOLUTE.KEYs doesn't
       81       81                        exist in the file.
       82       82                If COUNT is passed:
       83       83                    If the Port is open to an external file, COUNT will be 1.
       84       84                    If the Port is open to an internal file, COUNT will contain
       85       85                        the number of nodes skipped in a forward direction to
       86       86                        get to the Port's final position.  This value is valid
       87       87                        only if RELATIVE is >= 0, and either ABSOLUTE.EOF is set
       88       88                        or ABSOLUTE contains keys (not = %CLEAR) which specify a
       89       89                        location beyond the Port's position at entry.
       90       90                        The value returned in COUNT is inclusive at the
       91       91                        start of the interval.  Examples:
       92       92                        Assume the file contains nodes "6", "7", and "8".
       93       93
       94       94                        Port position   Port position  =>  COUNT  representing
       95       95                          at entry        at exit                    nodes:
       96       96                        -------------   -------------      -----  ------------
       97       97                        6               8                    2      6 and 7
       98       98                        6               7.1 and NOT
       99       99                                         NODE_EXISTS         2      6 and 7
      100      100                        6.1 and NOT
      101      101                         NODE_EXISTS    8                    1         7
      102      102                        6.1 and NOT     7.1 and NOT
      103      103                         NODE_EXISTS     NODE_EXISTS         1         7
      104      104
      105      105            DESCRIPTION:
      106      106                For internal files:
      107      107                    Find the specified node in the internal file tree.
      108      108                For external files:
      109      109                    For CONSEC/UR files, translate ABSOLUTE.KEY into a
      110      110                        relative record count from Port's current key
      111      111                        (DCB's current location), and add it to RELATIVE.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:4    
      112      112                    Set up the M$PFIL/M$PRECORD request, and do it.
      113      113                If READ is set:
      114      114                    M$READ or copy the node to the Port's registers.
      115      115                    If the Spec component is one of the predefined,
      116      116                        formatted types (Spec type is anything other
      117      117                        than %SPT_EXT_RECORD), call a Spec reader.  This
      118      118                        may change the content of the Spec component in the
      119      119                        Port (fetching internal values for display
      120      120                        to the user).
      121      121        */
      122      122
      123      123        VDA$PREAD: PROC (PORT, ABSOLUTE, RELATIVE, READ, NODE_EXISTS, NODE_COUNT)
      124      124                  ALTRET;
      125      125
      126      126        %INCLUDE VD_MACROS_M;
      127     2341        %INCLUDE VD_PERR_C;
      128     2489        %INCLUDE CP_6;
      129     2570        %INCLUDE B_ERRORS_C;
      130     3696
      131     3697
      132     3698        %VD$PORT (NAME=PORT, STCLASS=PARAM);
      133     3796        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      134     3824    1   DCL RELATIVE SBIN;
      135     3825    1   DCL READ BIT(1) ALIGNED;
      136     3826    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      137     3827    1   DCL NODE_COUNT SBIN;
      138     3828
      139     3829
      140     3830    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      141     3831    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      142     3832    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      143     3833    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      144     3834    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      145     3835    1   DCL VDG$BUILD_LOCATION  ENTRY (6) ALTRET;
      146     3836    1   DCL VDG$ESCREECH        ENTRY (3);
      147     3837    1   DCL VDG$MACC_PREAD_B4_PRECORD ENTRY (4);
      148     3838    1   DCL VDG$MACC_PREAD_AF_PRECORD ENTRY (2);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:5    
      149     3839    1   DCL VDG$MACC_PREAD_B4_READ ENTRY (4);
      150     3840    1   DCL VDG$MACC_PREAD_AF_READ ENTRY (3);
      151     3841    1   DCL VDG$MACC_PREAD_PFIL ENTRY (2);
      152     3842
      153     3843
      154     3844    1   DCL B$TCB$ PTR SYMREF;
      155     3845        %VD_6E (NAME=VD_6E, STCLASS=SYMREF);
      156     3881    1   DCL VD_NODE_READERS$$ (0:0) EPTR SYMREF;
      157     3882    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      158     3883            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      159     3897    1   DCL VD_STATIC_TEMP CHAR(%MXNB_KEY) SYMREF;
      160     3898        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      161     3943
      162     3944    1   DCL STATIC_TEMP$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP));
      163     3945        %FPT_PFIL (FPTN=CONST_PFIL, STCLASS=CONSTANT);
      164     3960        %FPT_PRECORD (FPTN=CONST_PRECORD, STCLASS=CONSTANT, KEYS=NO, KEYR=YES);
      165     3981        %FPT_READ (FPTN=CONST_READ, STCLASS=CONSTANT, KEYS=NO, KEYR=YES);
      166     4020
      167     4021
      168     4022
      169     4023    1   DCL STRUCTURE_NODE$ PTR;
      170     4024    1   DCL LOCAL_EXISTS BIT(1) ALIGNED;
      171     4025    1   DCL EXISTS BIT(1);
      172     4026    1   DCL COUNT SBIN;
      173     4027    1   DCL READ_LEVEL SBIN;
      174     4028    1   DCL NODE_READER$$ EPTR;
      175     4029    1   DCL VD_ERR$ PTR;
      176     4030
      177     4031
      178     4032        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
      179     4125        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      180     4178        %VD$ERR (NAME=ERR$TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      181     4231        %VD$BUFFER_HEADER;
      182     4267
      183     4268
      184     4269
      185     4270    1           IF PORT.EXIST# = 0 THEN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:6    
      186     4271    1              CALL VDG$ESCREECH;
      187     4272    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;
      188     4273
      189     4274    2           IF PORT.DCB# = 0 THEN DO;
      190     4275    2              CALL READ_INTERNAL
      191     4276    2                ALTRET (READ_INTERNAL_FAILED);
      192     4277    2              END;
      193     4278    2           ELSE DO;
      194     4279    2              CALL READ_EXTERNAL
      195     4280    2                ALTRET (READ_EXTERNAL_FAILED);
      196     4281    2              COUNT = 1;
      197     4282    2              READ_LEVEL = %LVL_EXT_REC;
      198     4283    2              END;
      199     4284
      200     4285    1           IF ADDR(NODE_EXISTS) ~= ADDR(NIL) THEN
      201     4286    1              NODE_EXISTS = EXISTS;
      202     4287    1           IF ADDR(NODE_COUNT) ~= ADDR(NIL) THEN
      203     4288    1              NODE_COUNT = COUNT;
      204     4289
      205     4290    2           IF READ THEN DO;
      206     4291    2              IF PORT.LEVEL.SPEC.TYPE# (READ_LEVEL) >= %MX_SPEC_TYPES THEN
      207     4292    2                 CALL VDG$ESCREECH (PORT.LEVEL.SPEC.TYPE# (READ_LEVEL));
      208     4293    2              NODE_READER$$ =
      209     4294    2                VD_NODE_READERS$$ (PORT.LEVEL.SPEC.TYPE# (READ_LEVEL));
      210     4295    3              IF NODE_READER$$ ~= ENTADDR(NIL) THEN DO;
      211     4296    3                 CALL NODE_READER$$ (PORT)
      212     4297    3                   ALTRET (NODE_READER_FAILED);
      213     4298    3                 END;
      214     4299    2              END;
      215     4300
      216     4301    1           RETURN;
      217     4302
      218     4303
      219     4304    1   READ_INTERNAL_FAILED: ;
      220     4305    1   READ_EXTERNAL_FAILED: ;
      221     4306    1   NODE_READER_FAILED: ;
      222     4307    1           ALTRETURN;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:7    
      223     4308
      224     4309        %BOX (TITLE=READ_INTERNAL, PAGE=YES);
              4317    1
              4321    1   /***************************************************************************
              4323    1    *                                                                         *
              4327    1            *                               READ_INTERNAL                             *
              4329    1            *                                                                         *
              4331    1           ***************************************************************************/

      225     4335
      226     4336        /*I* NAME: READ_INTERNAL
      227     4337            INPUT:
      228     4338                PORT - VD$PORT to use.  Must be open to an internal file.
      229     4339                ABSOLUTE - Same as for main routine.
      230     4340                RELATIVE - Same as for main routine.
      231     4341            OUTPUT:
      232     4342                If we must reposition the Port:
      233     4343                    If the Port registers at entry had been modified, they will
      234     4344                        be flushed to the Presenter.
      235     4345                    Port's Spec and Data registers will be cleared.
      236     4346                    Port's Keys and Internal$s will point to the requested
      237     4347                        node, or (if the requested node doesn't exist) to the
      238     4348                        node following the requested position.
      239     4349                EXISTS will be reset if ABSOLUTE contains keys of a specific
      240     4350                    requested node, and that node doesn't exist in the file,
      241     4351                    and RELATIVE = 0.  Otherwise, EXISTS will be set.
      242     4352                COUNT will contain the number of nodes skipped in a forward
      243     4353                    direction to get to the found node.
      244     4354                READ_LEVEL will specify the level of the lowest key in ABSOLUTE.
      245     4355            DESCRIPTION:
      246     4356                Search the file tree for ABSOLUTE, counting nodes as we go.
      247     4357                    If we find ABSOLUTE exactly, set EXISTS.
      248     4358                Move RELATIVE nodes forward or backward, counting as we go.
      249     4359                If the new position is different from Port's entry position:
      250     4360                    Flush Port if it contains any modified nodes.
      251     4361                    Clear Port's Keys, Specs, Datas, and Internal$s.
      252     4362                    Set Port's Keys and Internal$s for the found node.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:8    
      253     4363        */
      254     4364
      255     4365    1   READ_INTERNAL: PROC ALTRET;
      256     4366
      257     4367
      258     4368    2   DCL LEVEL SBIN;
      259     4369    2   DCL REL SBIN;
      260     4370    2   DCL AT_EOF BIT(1) ALIGNED;
      261     4371    2   DCL ABS_KEY$ (0:%(MX_ACCESS_LEVELS-1)) PTR; /* Entry 0 not used */
      262     4372    2   DCL FOUND_NODE$ (0:%(MX_ACCESS_LEVELS-1)) PTR;
      263     4373    2   DCL CAND_KEY$ PTR;
      264     4374    2   DCL CAND_NODE$ PTR;
      265     4375    2   DCL PORT_AT_REQ_LOC BIT(1) ALIGNED;
      266     4376
      267     4377
      268     4378        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      269     4401        %VD$TEXTC (NAME=KEY, STCLASS=BASED);
      270     4424        %VD$FILE_NODE (NAME=CAND$NODE, STCLASS="BASED(CAND_NODE$)");
      271     4517        %VD$FILE_NODE;
      272     4610        %VD$TEXTC_REMOTE;
      273     4671        %VD$BUFFER;
      274     4729
      275     4730
      276     4731
      277     4732    2           EXISTS = %TRUE;     /* Assume node exists */
      278     4733    2           COUNT = 0;
      279     4734    2           READ_LEVEL = STRUCTURE$NODE.COUNT# - 1; /* Assumed level */
      280     4735    2           AT_EOF = %FALSE;
      281     4736    2           REL = RELATIVE;         /* So we can change it */
      282     4737
      283     4738    2           FOUND_NODE$ (%LVL_FILE) = PORT.LEVEL.INTERNAL$ (%LVL_FILE);
      284     4739    2           ABS_KEY$ (%LVL_FILE) = ADDR(NIL);
      285     4740    3           IF FOUND_NODE$ (%LVL_FILE) = ADDR(NIL) THEN DO;
      286     4741    3              CALL VDG$ESCREECH (FOUND_NODE$ (%LVL_FILE));
      287     4742    3              END;
      288     4743    3           DO LEVEL = %LVL_LOWER TO %MX_ACCESS_LEVELS - 1;
      289     4744    3              FOUND_NODE$ (LEVEL) = ADDR(NIL);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:9    
      290     4745    3              ABS_KEY$ (LEVEL) = ADDR(NIL);
      291     4746    3              END;
      292     4747
      293     4748
      294     4749                /*
      295     4750                *   Find the node specified by ABSOLUTE, setting up
      296     4751                *       AT_EOF, FOUND_NODE$, EXISTS, and COUNT to
      297     4752                *       indicate what we found:
      298     4753                *   AT_EOF will be set if EOF was requested, or the file is
      299     4754                *       empty (no level-1 nodes at all).
      300     4755                *   FOUND_NODE$ will point to the nodes for each key in ABSOLUTE:
      301     4756                *       If AT_EOF set, ignore FOUND_NODE$.
      302     4757                *       If requested BOF, FOUND_NODE$ will point to the first
      303     4758                *           node at each level of the file.  If the file
      304     4759                *           doesn't have at least one node at each level,
      305     4760                *           EXISTS will be %FALSE; else it will be %TRUE.
      306     4761                *       Otherwise FOUND_NODE$ will point to nodes in the
      307     4762                *           file:
      308     4763                *           If EXISTS = %FALSE, then some of these nodes
      309     4764                *               aren't the ones requested, because the
      310     4765                *               requested ones don't exist; there may be some
      311     4766                *               nil pointers if the file isn't filled down to
      312     4767                *               the requested level -- however levels 0 and 1
      313     4768                *              will always be non-nil.
      314     4769                *           If EXISTS = %TRUE then each FOUND_NODE$ key is
      315     4770                *               non-nil and points to the exact node requested
      316     4771                *               at that level.
      317     4772                */
      318     4773
      319     4774    3           IF ABSOLUTE.EOF THEN DO;
      320     4775                   /* Count # nodes from port's current location, to EOF */
      321     4776    3              CAND_NODE$ = PORT.LEVEL.INTERNAL$ (READ_LEVEL);
      322     4777    4              DO WHILE CAND_NODE$ ~= ADDR(NIL);
      323     4778    4                 CAND_NODE$ = CAND$NODE.FLINK$;
      324     4779    4                 COUNT = COUNT + 1;
      325     4780    4                 END;
      326     4781    3              AT_EOF = %TRUE;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:10   
      327     4782    3              END;
      328     4783    2           ELSE IF ABSOLUTE = %CLEAR THEN
      329     4784    3   REQUESTED_BOF: DO;
      330     4785                      /* Find 1st node at each level */
      331     4786    3                 FOUND_NODE$ (%LVL_LOWER) = FOUND_NODE$ (%LVL_FILE) ->
      332     4787    3                   VD$FILE_NODE.HEAD$;
      333     4788    3                 IF FOUND_NODE$ (%LVL_LOWER) = ADDR(NIL) THEN
      334     4789    3                    AT_EOF = %TRUE;       /* File is empty */
      335     4790    4                 ELSE DO;
      336     4791    4                    LEVEL = %(LVL_LOWER);
      337     4792    5                    DO WHILE LEVEL <= READ_LEVEL
      338     4793    5                      AND FOUND_NODE$ (LEVEL - 1) ~= ADDR(NIL);
      339     4794    5                       FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL - 1) ->
      340     4795    5                         VD$FILE_NODE.HEAD$;
      341     4796    6                       DO WHILE FOUND_NODE$ (LEVEL) ~= ADDR(NIL)
      342     4797    6                         AND NOT (FOUND_NODE$ (LEVEL) ->
      343     4798    6                         VD$FILE_NODE.ACCESS (%NAC_READ)
      344     4799    6                         OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ));
      345     4800    6                          FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL) ->
      346     4801    6                            VD$FILE_NODE.FLINK$;
      347     4802    6                          END;
      348     4803    5                       LEVEL = LEVEL + 1;
      349     4804    5                       END;
      350     4805    4                    IF LEVEL <= READ_LEVEL THEN
      351     4806    4                       EXISTS = %FALSE;    /* File not filled vertically */
      352     4807    4                    END;
      353     4808    3                 END REQUESTED_BOF;
      354     4809    2              ELSE
      355     4810    3   REQUESTED_KEYED_POSITION: DO;
      356     4811
      357     4812    3   GET_ABS_KEYS:
      358     4813    4                 DO LEVEL = %LVL_LOWER TO (STRUCTURE$NODE.COUNT# - 1);
      359     4814    5                    IF ABSOLUTE.KEY (LEVEL - 1) = %CLEAR THEN DO;
      360     4815    5                       READ_LEVEL = LEVEL - 1;  /* Last lvl with keys */
      361     4816    5                       EXIT GET_ABS_KEYS;
      362     4817    5                       END;
      363     4818    5                    ELSE DO;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:11   
      364     4819                            %GETKEY (KEY=ABSOLUTE.KEY, INDX=LEVEL-1,
      365     4820                            PTR="ABS_KEY$ (LEVEL)");
      366     4830    5                       END;
      367     4831    4                    END GET_ABS_KEYS;
      368     4832
      369     4833    3                 IF FOUND_NODE$ (%LVL_FILE) -> VD$FILE_NODE.HEAD$ =
      370     4834    3                   ADDR(NIL) THEN
      371     4835    3                    AT_EOF = %TRUE;    /* File is empty */
      372     4836
      373     4837    3   EACH_LEVEL:
      374     4838    4                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;
      375     4839    5                    IF FOUND_NODE$ (LEVEL - 1) = ADDR(NIL) THEN DO;
      376     4840    5                       EXISTS = %FALSE; /* ABSOLUTE doesn't exist */
      377     4841    5                       EXIT EACH_LEVEL;
      378     4842    5                       END;
      379     4843    4                    CAND_NODE$ = FOUND_NODE$ (LEVEL - 1) ->
      380     4844    4                      VD$FILE_NODE.HEAD$;
      381     4845    4                    IF PORT.CURRENT.KEY (LEVEL - 1) ~= %CLEAR
      382     4846    4                      AND NOT PORT.CURRENT.EOF
      383     4847    5                      AND CAND_NODE$ ~= ADDR(NIL) THEN DO;
      384     4848                            /*
      385     4849                            * See if Port is already at requested key; if
      386     4850                            * not, see if the requested key is after Port's
      387     4851                            * current position, and if so, start search
      388     4852                            * from Port's current position.
      389     4853                            */
      390     4854                            %GETKEY (KEY=PORT.CURRENT.KEY, INDX=LEVEL-1,
      391     4855                            PTR=CAND_KEY$);
      392     4865    5                       IF ABS_KEY$ (LEVEL) -> KEY.BYTES = CAND$KEY.BYTES THEN
      393     4866    5                          FOUND_NODE$ (LEVEL) = PORT.LEVEL.INTERNAL$ (LEVEL);
      394     4867    5                       ELSE IF ABS_KEY$ (LEVEL) -> KEY.BYTES >
      395     4868    5                            CAND$KEY.BYTES THEN
      396     4869    5                             CAND_NODE$ = PORT.LEVEL.INTERNAL$ (LEVEL);
      397     4870    5                       END;
      398     4871
      399     4872    4   SEARCH_LEVEL:
      400     4873    5                    DO WHILE FOUND_NODE$ (LEVEL) = ADDR(NIL)
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:12   
      401     4874    5                      AND CAND_NODE$ ~= ADDR(NIL);
      402     4875                            %GETKEY (KEY=CAND$NODE.DESC.KEY, PTR=CAND_KEY$);
      403     4885    5                       IF CAND$KEY.BYTES =
      404     4886    6                         ABS_KEY$ (LEVEL) -> KEY.BYTES THEN DO;
      405     4887    6                          FOUND_NODE$ (LEVEL) = CAND_NODE$;
      406     4888    6                          END;
      407     4889    5                       ELSE IF CAND$KEY.BYTES >
      408     4890    6                            ABS_KEY$ (LEVEL) -> KEY.BYTES THEN DO;
      409     4891    6                             FOUND_NODE$ (LEVEL) = CAND_NODE$;
      410     4892    6                             EXISTS = %FALSE; /* ABSOLUTE doesn't exist */
      411     4893    6                             EXIT EACH_LEVEL;
      412     4894    6                             END;
      413     4895    6                          ELSE DO;
      414     4896    6                             CAND_NODE$ = CAND$NODE.FLINK$;
      415     4897    6                             COUNT = COUNT + 1;
      416     4898    6                             END;
      417     4899    5                       END SEARCH_LEVEL;
      418     4900
      419     4901    5                    IF FOUND_NODE$ (LEVEL) = ADDR(NIL) THEN DO;
      420     4902    5                       EXISTS = %FALSE; /* Ran off end of level */
      421     4903    5                       IF LEVEL = %LVL_LOWER THEN AT_EOF = %TRUE;
      422     4904    5                       EXIT EACH_LEVEL;
      423     4905    5                       END;
      424     4906    4                    END EACH_LEVEL;
      425     4907    3                 IF REL = 0 AND FOUND_NODE$ (LEVEL) ~= ADDR(NIL) THEN
      426     4908    3                    IF NOT (FOUND_NODE$ (LEVEL) -> VD$FILE_NODE.ACCESS (%NAC_READ)
      427     4909    4                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ)) THEN DO;
      428     4910    4                       REL = 1; /* Skip to the first accessible one */
      429     4911    4                       EXISTS = %FALSE;
      430     4912    4                       END;
      431     4913    3                 END REQUESTED_KEYED_POSITION;
      432     4914
      433     4915                /*
      434     4916                *   At this point, we've found any absolute location requested.
      435     4917                *   Either:
      436     4918                *       AT_EOF = on and FOUND_NODE$ (%LVL_LOWER) thru (READ_LEVEL)
      437     4919                *           = ADDR(NIL);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:13   
      438     4920                *   or  AT_EOF = off and FOUND_NODE$ (%LVL_LOWER) thru (READ_LEVEL)
      439     4921                *           point to VD$FILE_NODEs for the absolute position
      440     4922                *           requested.  EXISTS indicates if the exact
      441     4923                *           node requested was found or not:  if EXISTS = %FALSE,
      442     4924                *           some or all of FOUND_NODE$ (%LVL_LOWER) thru
      443     4925                *           (READ_LEVEL) may be NIL.
      444     4926                */
      445     4927
      446     4928    2           IF REL ~= 0 AND FOUND_NODE$ (READ_LEVEL - 1) ~= ADDR(NIL) THEN
      447     4929    3   MOVING: DO;
      448     4930    4              IF REL < 0 AND AT_EOF THEN DO;
      449     4931                      /* First backward move from EOF is special case */
      450     4932    5                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;
      451     4933    5                    FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL - 1) ->
      452     4934    5                      VD$FILE_NODE.TAIL$;
      453     4935    5                    IF FOUND_NODE$ (LEVEL) = ADDR(NIL) THEN
      454     4936    5                       EXIT MOVING;   /* File is empty */
      455     4937    5                    END;
      456     4938    4                 END;
      457     4939    4              DO UNTIL REL = 0;
      458     4940                      /* Skip over nodes user isn't allowed to read */
      459     4941    5                 IF FOUND_NODE$ (READ_LEVEL) ~= ADDR(NIL) THEN DO;
      460     4942    6                    DO UNTIL FOUND_NODE$ (READ_LEVEL) = ADDR(NIL)
      461     4943    6                      OR FOUND_NODE$ (READ_LEVEL) ->
      462     4944    6                      VD$FILE_NODE.ACCESS (%NAC_READ)
      463     4945    6                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ);
      464     4946    6                       IF REL < 0 THEN
      465     4947    6                          IF AT_EOF THEN AT_EOF = %FALSE;
      466     4948    6                          ELSE FOUND_NODE$ (READ_LEVEL) = FOUND_NODE$ (READ_LEVEL)
      467     4949    6                               -> VD$FILE_NODE.BLINK$;
      468     4950    6                       ELSE FOUND_NODE$ (READ_LEVEL) = FOUND_NODE$ (READ_LEVEL)
      469     4951    6                            -> VD$FILE_NODE.FLINK$;
      470     4952    6                       END;
      471     4953    5                    IF REL < 0 THEN REL = REL + 1;
      472     4954                         /* Don't count nodes when moving backward */
      473     4955    6                    ELSE DO;
      474     4956    6                       REL = REL - 1;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:14   
      475     4957    6                       COUNT = COUNT + 1;
      476     4958    6                       END;
      477     4959    5                    END;
      478     4960    4                 IF FOUND_NODE$ (READ_LEVEL) = ADDR(NIL) THEN
      479     4961    5                    IF REL < 0 THEN DO;
      480     4962                         /* At BOF:  refill READ_LEVEL pointer and exit */
      481     4963    5                       FOUND_NODE$ (READ_LEVEL) =
      482     4964    5                         FOUND_NODE$ (READ_LEVEL - 1) -> VD$FILE_NODE.HEAD$;
      483     4965    5                       EXIT MOVING;
      484     4966    5                       END;
      485     4967    5                    ELSE DO;
      486     4968    5                       AT_EOF = %TRUE;
      487     4969    5                       EXIT MOVING;
      488     4970    5                       END;
      489     4971    4                 END;
      490     4972    3              END MOVING;
      491     4973
      492     4974                /*
      493     4975                *   Got requested location (as near as possible).
      494     4976                *   Load PORT.CURRENT with new location.
      495     4977                */
      496     4978
      497     4979    2           PORT_AT_REQ_LOC = %TRUE;
      498     4980    3           IF AT_EOF THEN DO;
      499     4981    3              IF NOT PORT.CURRENT.EOF THEN
      500     4982    3                 PORT_AT_REQ_LOC = %FALSE;
      501     4983    3              END;
      502     4984    3           ELSE DO;
      503     4985    3              IF PORT.CURRENT.EOF THEN
      504     4986    3                 PORT_AT_REQ_LOC = %FALSE;
      505     4987    3              ELSE
      506     4988    3   PORT_AT_REQ_LOC_TEST:
      507     4989    4              DO LEVEL = %LVL_LOWER TO READ_LEVEL;
      508     4990    5                 IF PORT.LEVEL.INTERNAL$ (LEVEL) ~= FOUND_NODE$ (LEVEL) THEN DO;
      509     4991    5                    PORT_AT_REQ_LOC = %FALSE;
      510     4992    5                    EXIT PORT_AT_REQ_LOC_TEST;
      511     4993    5                    END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:15   
      512     4994    4                 END PORT_AT_REQ_LOC_TEST;
      513     4995    3              END;
      514     4996
      515     4997    2           IF NOT PORT_AT_REQ_LOC THEN
      516     4998    3   REPOSITION_PORT: DO;
      517     4999    3              CALL CLEAR_LEVEL_REGISTERS
      518     5000    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      519     5001
      520     5002    3              IF AT_EOF THEN
      521     5003    3                 PORT.CURRENT.EOF = %TRUE;
      522     5004    4              ELSE DO;
      523     5005    5                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;
      524     5006    5                    CAND_NODE$ = FOUND_NODE$ (LEVEL);
      525     5007    5                    PORT.LEVEL.INTERNAL$ (LEVEL) = CAND_NODE$;
      526     5008    6                    IF CAND_NODE$ ~= ADDR(NIL) THEN DO;
      527     5009                            %COPYKEY (FKEY=CAND$NODE.DESC.KEY,
      528     5010                            TKEY=PORT.CURRENT.KEY, TINDX=LEVEL-1);
      529     5026                            %COPYSPEC (FSPEC=CAND$NODE.DESC.SPEC,
      530     5027                            TSPEC=PORT.LEVEL.SPEC, TINDX=LEVEL);
      531     5043    7                       IF CAND$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;
      532     5044    7                          CALL VDG$OCOPY (CAND$NODE.DESC.DATA$->VD$BUFFER,
      533     5045    7                            PORT.LEVEL.DATA$ (LEVEL))
      534     5046    7                            ALTRET (OCOPY_FAILED);
      535     5047    7                          END;
      536     5048    6                       END;
      537     5049    5                    END;
      538     5050    4                 END;
      539     5051    3              END REPOSITION_PORT;
      540     5052
      541     5053    2           PORT.LAST_OP# = %ACCOP_LOCATION;
      542     5054
      543     5055    2           RETURN;
      544     5056
      545     5057
      546     5058
      547     5059    2   CLEAR_LEVEL_REGISTERS_FAILED: ;
      548     5060    2   OCOPY_FAILED: ;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:16   
      549     5061    2           ALTRETURN;
      550     5062
      551     5063    2   END READ_INTERNAL;
      552     5064
      553     5065                %BOX (TITLE=READ_EXTERNAL, PAGE=YES);
              5073    2
              5077    2   /***************************************************************************
              5079    2    *                                                                         *
              5083    2            *                               READ_EXTERNAL                             *
              5085    2            *                                                                         *
              5087    2           ***************************************************************************/

      554     5091
      555     5092        /*I* NAME: READ_EXTERNAL
      556     5093            INPUT:
      557     5094                PORT - VD$PORT to use; this Port must currently be
      558     5095                    open to an external file.  The accessor Structure to
      559     5096                    apply to this file must be the "External" structure.
      560     5097                ABSOLUTE - Same as for main routine.
      561     5098                                 -  NOTE  -
      562     5099                    Since this is an external file, and external files
      563     5100                    always have a two-level structure, READ_EXTERNAL
      564     5101                    is optimized to assume that "n"=%LVL_EXT_REC; therefore,
      565     5102                    only ABSOLUTE.KEY$(%(LVL_EXT_REC-1)) should contain a key.
      566     5103                RELATIVE - Same as for main routine.
      567     5104                READ - BIT(1) ALIGNED flag telling whether to read the requested
      568     5105                    record or not.
      569     5106            SCRATCH:
      570     5107                VD_STATIC_TEMP
      571     5108            OUTPUT:
      572     5109                If no I/O errors:
      573     5110                EXISTS will be set true if we found a node to satisfy
      574     5111                    the positioning request; false otherwise.  Will be set
      575     5112                    false only when RELATIVE=0 and the absolute node
      576     5113                    requested doesn't exist in the file.  (Note that
      577     5114                    EOF is an existing node.)
      578     5115                PORT.CURRENT will contain either a record key or EOF, indicating
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:17   
      579     5116                    the new position of the Port.
      580     5117                PORT.LEVELs will be set:  if PORT.CURRENT isn't EOF, then
      581     5118                    PORT.LEVEL (%LVL_EXT_REC) will contain the record (Spec
      582     5119                    and Data components).
      583     5120                If we get a (possibly) recoverable I/O error:
      584     5121                    EXISTS will be %FALSE.
      585     5122                    PORT.CURRENT will be set from whatever
      586     5123                        the monitor returns to us on a KEYR call.  If the
      587     5124                        error isn't on a KEYR call, .CURRENT will be
      588     5125                        %CLEAR.
      589     5126                    The PORT.LEVELs won't contain any record Spec or Data.
      590     5127            DESCRIPTION:
      591     5128                The goal of this routine is to:
      592     5129                    o Not do any monitor calls at all, if we can avoid it.
      593     5130                    o If we must do monitor calls, try not to do any
      594     5131                        M$PRECORDs, just M$READ.
      595     5132                    o If we must do monitor calls, try not to do any
      596     5133                        keyed M$PRECORDs or M$READs, just sequential ones.
      597     5134                        Unkeyed monitor calls don't have to search the file's
      598     5135                        key structure, may save on I/O's, and are usually faster.
      599     5136
      600     5137                The following table summarizes the optimal monitor calls to
      601     5138                make, based on the request and the DCB's current position
      602     5139                (as indicated by PORT.CURRENT (%(LVL_EXT_REC-1))).
      603     5140
      604     5141                Note that we take into account the last operation done
      605     5142                on the Port (which is also the last operation done on the
      606     5143                DCB).  This is because the monitor acts differently on
      607     5144                KEYS-less M$PRECORDs and M$READs if the last operation
      608     5145                was an open or M$PRECORD (=%ACCOP_LOC), than otherwise.
      609     5146                Specifically, if the last operation wasn't open or M$PRECORD,
      610     5147                then the DCB is actually positioned one record beyond
      611     5148                the PORT.CURRENT record.
      612     5149
      613     5150                (Choices inside {}'s are for READ=TRUE and READ=FALSE.
      614     5151                Monitor calls inside []'s are for READ=TRUE.
      615     5152                "seq" means "sequential", ie, KEYS=NO.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:18   
      616     5153                "key" means KEYS=YES, KEY=the KEY.BYTES for
      617     5154                    ABSOLUTE.KEY (%(LVL_EXT_REC-1)).
      618     5155                "rel" means RELATIVE.)
      619     5156
      620     5157                               Current DCB location
      621     5158                            --------------------------
      622     5159                            @ EOF         not @ EOF
      623     5160                            ------------  ------------
      624     5161                Request
      625     5162                -------
      626     5163                BOF:        PFIL,BOF      PFIL,BOF
      627     5164                            {RD|PREC}seq  {RD|PREC}seq
      628     5165
      629     5166                BOF,rel:    PFIL,BOF      PFIL,BOF
      630     5167                            PRECrel       PRECrel
      631     5168                            [RDseq]       [RDseq]
      632     5169
      633     5170                EOF:        (nothing)     PFIL
      634     5171
      635     5172                EOF,rel:                  PFIL
      636     5173                            PRECrel       PRECrel
      637     5174                            [RDseq]       [RDseq]
      638     5175
      639     5176                ====================================================
      640     5177
      641     5178                                      Current DCB location
      642     5179                            ----------------------------------------
      643     5180                            @ key,        @ key,        not @ key
      644     5181                            .LASTOP =     .LASTOP ~=
      645     5182                            %ACCOP_LOC    %ACCOP_LOC
      646     5183                            ----------    ----------    ------------
      647     5184                Request
      648     5185                -------
      649     5186                key:        [RDseq]       PREC-1        {RD|PREC}key
      650     5187                                          [RDseq]
      651     5188
      652     5189                key,rel:    PRECrel       PRECrel-1     PRECkey,rel
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:19   
      653     5190                            [RDseq]       [RDseq]       [RDseq]
      654     5191
      655     5192
      656     5193                Procedure:
      657     5194                Do M$PFIL if necessary.
      658     5195                Determine who does KEYS=YES call:  M$PRECORD, M$READ, or
      659     5196                    nobody.
      660     5197                Determine if we should subtract 1 from RELATIVE, based on
      661     5198                    the last operation done on this DCB.
      662     5199                Do M$PRECORD, if necessary.
      663     5200                Return the record's key (or EOF) in PORT.CURRENT.
      664     5201                If READ is set and the record's Spec and Data
      665     5202                    components are not yet in the PORT.LEVELs:
      666     5203                    Do the keyed or sequential M$READ.
      667     5204                    Load the Spec and Data components of the record into the
      668     5205                        PORT.LEVELs.
      669     5206        */
      670     5207
      671     5208    1   READ_EXTERNAL: PROC ALTRET;
      672     5209
      673     5210
      674     5211    2   DCL FORCE_PRECORD BIT(1) ALIGNED;
      675     5212    2   DCL FORCE_MONITOR_CALL BIT(1) ALIGNED;
      676     5213    2   DCL EXT_RECORD_CLEARED BIT(1) ALIGNED;
      677     5214    2   DCL PORT_ALREADY_AT_ABS_KEY BIT(1) ALIGNED;
      678     5215    2   DCL REL SBIN;
      679     5216    2   DCL ABS_BOF BIT(1) ALIGNED;
      680     5217    2   DCL ABS_KEY$ PTR;
      681     5218    2   DCL PORT_KEY$ PTR;
      682     5219    2   DCL PORT_KEY_VALUE UBIN;
      683     5220    2   DCL FIXED_KEY_LEN SBIN;
      684     5221    2   DCL PORT_DCB$ PTR;
      685     5222    2   DCL KEY_ VECTOR;    /* Destined for FPT_{PRECORD|READ}.KEY_ */
      686     5223    2   DCL NB_BUFFER SBIN;
      687     5224    2   DCL BUFFER$ PTR;
      688     5225    2   DCL REC_SPEC$ PTR;
      689     5226        %FPT_PFIL (STCLASS=AUTO);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:20   
      690     5241        %FPT_READ (STCLASS=AUTO);
      691     5280        %FPT_PRECORD (STCLASS=AUTO);
      692     5301        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
      693     5316
      694     5317
      695     5318        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      696     5341        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
      697     5364        %F$DCB (DCBN=PORT$DCB, STCLASS="BASED(PORT_DCB$)");
      698     5421        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
      699     5479        %VD$TEXTC (NAME=REC$SPEC, STCLASS="BASED(REC_SPEC$)");
      700     5502        %VD$TEXTC (NAME=STATIC$TEMP_TEXTC, STCLASS="BASED(STATIC_TEMP$)");
      701     5525    2   DCL 1 STATIC$TEMP_FIXED BASED(STATIC_TEMP$),
      702     5526    2         2 BYTES CHAR(FIXED_KEY_LEN);
      703     5527    2   DCL STATIC$TEMP_NUM SBIN BASED(STATIC_TEMP$);
      704     5528        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      705     5531        %B$ALT;
      706     5539        %VD$TEXTC_REMOTE;
      707     5600        %VD$TEXTC_NUMBER;
      708     5614
      709     5615
      710     5616
      711     5617                %INCREMENT (INDX=%STG_ACC_PREADS);
      712     5620    3           IF READ THEN DO;
      713     5621                   %INCREMENT (INDX=%STG_ACC_PREAD_READS);
      714     5624    3              END;
      715     5625    2           EXISTS = %TRUE;        /* Assume record exists */
      716     5626    2           PORT_DCB$ = DCBADDR(PORT.DCB#);
      717     5627    2           FORCE_PRECORD = %FALSE;
      718     5628    2           FORCE_MONITOR_CALL = %FALSE;
      719     5629    2           EXT_RECORD_CLEARED = %FALSE;
      720     5630    2           PORT_ALREADY_AT_ABS_KEY = %FALSE;
      721     5631    2           REL = RELATIVE;     /* So we can change it */
      722     5632
      723     5633    2           ABS_BOF = %FALSE;
      724     5634    2           ABS_KEY$ = ADDR(NIL);
      725     5635    2           IF ABSOLUTE = %CLEAR THEN
      726     5636    2              ABS_BOF = %TRUE;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:21   
      727     5637    2           ELSE IF NOT ABSOLUTE.EOF
      728     5638    3                AND ABSOLUTE.KEY (%(LVL_EXT_REC-1)) ~= %CLEAR THEN DO;
      729     5639                      %GETKEY (KEY=ABSOLUTE.KEY, INDX="%(LVL_EXT_REC-1)",
      730     5640                      PTR=ABS_KEY$);
      731     5650    3                 END;
      732     5651
      733     5652    2           PORT_KEY$ = ADDR(NIL);
      734     5653    3           IF NOT PORT.CURRENT.EOF THEN DO;
      735     5654                   %GETKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1,
      736     5655                   PTR=PORT_KEY$);
      737     5665    3              END;
      738     5666
      739     5667                /*
      740     5668                *   Copy CONSTANT copies of FPTs to auto storage.
      741     5669                *   The CONSTANT copies of the FPTs must have:
      742     5670                *       FPT_PRECORD:  KEYS=NO, KEYR=YES
      743     5671                *       FPT_READ:     KEYS=NO, KEYR=YES
      744     5672                */
      745     5673
      746     5674    2           FPT_PRECORD = CONST_PRECORD;
      747     5675    2           FPT_PRECORD.V_ = VECTOR(FPT_PRECORD.V);
      748     5676    2           FPT_PRECORD.V.DCB# = PORT.DCB#;
      749     5677    2           FPT_READ = CONST_READ;
      750     5678    2           FPT_READ.V_ = VECTOR(FPT_READ.V);
      751     5679    2           FPT_READ.V.DCB# = PORT.DCB#;
      752     5680
      753     5681    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
      754     5682    3            CASE (%ORG_CONSEC);
      755     5683    3              IF NOT ABS_BOF AND NOT ABSOLUTE.EOF
      756     5684    4                AND ABS_KEY$ ~= ADDR(NIL) THEN DO;
      757     5685                      /* For external CONSEC files, xlate ABSOLUTE.KEY to RELATIVE */
      758     5686    4                 IF PORT.CURRENT.EOF THEN
      759     5687    4                    PORT_KEY_VALUE = PORT$DCB.NRECS# + 1;
      760     5688    4                 ELSE
      761     5689    4                    PORT_KEY_VALUE = PORT_KEY$->VD$TEXTC_NUMBER.BYTES#;
      762     5690    4                 REL = REL +
      763     5691    4                   (ABS_KEY$->VD$TEXTC_NUMBER.BYTES# - PORT_KEY_VALUE);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:22   
      764     5692    4                 ABS_KEY$ = ADDR(NIL);
      765     5693    4                 PORT_ALREADY_AT_ABS_KEY = %TRUE;
      766     5694    4                 END;
      767     5695    3              KEY_ = VECTOR(STATIC$TEMP_NUM);
      768     5696    3            CASE (%ORG_KEYED);
      769     5697    3              KEY_ = VECTOR(VD_STATIC_TEMP);
      770     5698    3            CASE (%ORG_INDEXED);
      771     5699    3              FIXED_KEY_LEN = PORT$DCB.KEYL#;
      772     5700    3              KEY_ = VECTOR(STATIC$TEMP_FIXED.BYTES);
      773     5701    3            CASE (ELSE);
      774     5702    3              CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
      775     5703    3            END;
      776     5704
      777     5705    2           IF ABS_BOF
      778     5706    2             OR (ABSOLUTE.EOF AND NOT PORT.CURRENT.EOF) THEN
      779     5707    3   DO_PFIL: DO;
      780     5708    3              FPT_PFIL = CONST_PFIL;
      781     5709    3              FPT_PFIL.V_ = VECTOR(FPT_PFIL.V);
      782     5710    3              FPT_PFIL.V.DCB# = PORT.DCB#;
      783     5711    3              FPT_PFIL.V.BOF# = ABS_BOF;
      784     5712    3              CALL CLEAR_LEVEL_REGISTERS
      785     5713    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      786     5714    3              EXT_RECORD_CLEARED = %TRUE;
      787     5715    3              PORT.LAST_OP# = %ACCOP_LOCATION;
      788     5716    3              IF VD_$$MON_ACC.V# > 10 THEN
      789     5717    3                 CALL VDG$MACC_PREAD_PFIL (FPT_PFIL.V.DCB#, FPT_PFIL.V.BOF#);
      790     5718                   %INCREMENT (INDX=%STG_ACC_M$PFILS);
      791     5721    3              CALL M$PFIL (FPT_PFIL)
      792     5722    3                ALTRET (PFIL_FAILED);
      793     5723    3              PORT.CURRENT.EOF = ABSOLUTE.EOF;
      794     5724    4              IF ABS_BOF AND NOT READ THEN DO;
      795     5725                      /*
      796     5726                      * Must do a sequential M$PRECORD to get key of
      797     5727                      *     first record, if any.
      798     5728                      */
      799     5729    4                 FORCE_PRECORD = %TRUE;
      800     5730    4                 END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:23   
      801     5731    3              END DO_PFIL;
      802     5732
      803     5733    2           IF NOT ABS_BOF AND NOT ABSOLUTE.EOF
      804     5734    2             AND ABS_KEY$ ~= ADDR(NIL) THEN
      805     5735    3   GOT_ABS_KEY: DO;
      806     5736    3              IF NOT PORT.CURRENT.EOF
      807     5737    3                AND PORT$KEY.BYTES = ABS$KEY.BYTES THEN
      808     5738    3                 PORT_ALREADY_AT_ABS_KEY = %TRUE;
      809     5739    3              ELSE
      810     5740    4   WHO_DOES_KEYED_CALL: DO;
      811     5741                      /*
      812     5742                      *    We have an absolute key that's different from
      813     5743                      *        Port's current location.  We have to do
      814     5744                      *        either a keyed M$PRECORD or keyed M$READ.
      815     5745                      */
      816     5746    4                 IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_INDEXED THEN
      817     5747    4                    STATIC$TEMP_FIXED.BYTES = ABS$KEY.BYTES;
      818     5748    5                 ELSE DO;
      819     5749    5                    STATIC$TEMP_TEXTC.LENGTH# = ABS$KEY.LENGTH#;
      820     5750    5                    STATIC$TEMP_TEXTC.BYTES = ABS$KEY.BYTES;
      821     5751    5                    END;
      822     5752    4                 IF REL = 0 AND READ THEN
      823     5753    4                    FPT_READ.V.KEYS# = %TRUE;
      824     5754    4                 ELSE
      825     5755    4                    FPT_PRECORD.V.KEYS# = %TRUE;
      826     5756    4                 END WHO_DOES_KEYED_CALL;
      827     5757    3              END GOT_ABS_KEY;
      828     5758
      829     5759    2           IF PORT_ALREADY_AT_ABS_KEY THEN
      830     5760    3   ADJUST_REL: DO;
      831     5761                   /*
      832     5762                   *    The DCB is already at (or near) the requested key.
      833     5763                   *    We need to adjust REL to reflect the monitor's
      834     5764                   *        position in the file:  if we just did something
      835     5765                   *        other than an OPEN or LOCATION-type monitor
      836     5766                   *        call on the DCB, then the monitor's idea of
      837     5767                   *        the "current record" is one record beyond the
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:24   
      838     5768                   *        key in PORT.CURRENT.KEY (%(LVL_EXT_REC-1)).
      839     5769                   *    Note we may subtract 1 from REL even if REL=0.
      840     5770                   *        This happens when no relative movement is
      841     5771                   *        requested, but we think we're positioned at
      842     5772                   *        the ABSOLUTE key but the monitor is positioned
      843     5773                   *        one beyond the ABSOLUTE key, so we need to back up.
      844     5774                   */
      845     5775    3              IF PORT.LAST_OP# ~= %ACCOP_OPEN
      846     5776    4                AND PORT.LAST_OP# ~= %ACCOP_LOCATION THEN DO;
      847     5777    4                 REL = REL - 1;
      848     5778                      /* Must do either M$PRECORD or M$READ */
      849     5779    4                 FORCE_MONITOR_CALL = %TRUE;
      850     5780    4                 END;
      851     5781    3              END ADJUST_REL;
      852     5782
      853     5783    2           IF FPT_PRECORD.V.KEYS#
      854     5784    2             OR REL ~= 0
      855     5785    2             OR FORCE_PRECORD
      856     5786    2             OR (FORCE_MONITOR_CALL AND NOT READ) THEN
      857     5787    3   DO_PRECORD: DO;
      858     5788    3              CALL CLEAR_LEVEL_REGISTERS
      859     5789    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      860     5790    3              EXT_RECORD_CLEARED = %TRUE;
      861     5791    3              FPT_READ.V.KEYR# = %FALSE;   /* PRECORD will return key */
      862     5792    3              FPT_PRECORD.KEY_ = KEY_;
      863     5793    3              FPT_PRECORD.V.N# = REL;
      864     5794    3              ERR_CODE = %CLEAR;
      865     5795    3              PORT.LAST_OP# = %ACCOP_LOCATION;
      866     5796    3              IF VD_$$MON_ACC.V# > 10 THEN
      867     5797    3                 CALL VDG$MACC_PREAD_B4_PRECORD (FPT_PRECORD.V.DCB#,
      868     5798    3                   FPT_PRECORD.V.KEYS#, FPT_PRECORD.KEY_, FPT_PRECORD.V.N#);
      869     5799    4              IF FPT_PRECORD.V.KEYS# THEN DO;
      870     5800                      %INCREMENT (INDX=%STG_ACC_M$PRECORDS_KEYED);
      871     5803    4                 END;
      872     5804    4              ELSE DO;
      873     5805                      %INCREMENT (INDX=%STG_ACC_M$PRECORDS_SEQ);
      874     5808    4                 END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:25   
      875     5809    3              CALL M$PRECORD (FPT_PRECORD)
      876     5810    4              WHENALTRETURN DO;
      877     5811    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
      878     5812    4                 IF ERR_CODE.CODE# = %E$NOKEY THEN
      879     5813    4                    EXISTS = %FALSE;
      880     5814    4                 END;
      881     5815    3              IF VD_$$MON_ACC.V# > 10 THEN
      882     5816    3                 CALL VDG$MACC_PREAD_AF_PRECORD (FPT_PRECORD.KEY_, ERR_CODE);
      883     5817    3              CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP,
      884     5818    3                PORT.LEVEL.ORG# (%LVL_EXT_REC),
      885     5819    3                PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
      886     5820    3                PORT.CURRENT)
      887     5821    3                ALTRET (PRECORD_FAILED);
      888     5822    3              FORCE_MONITOR_CALL = %FALSE;     /* We did our moncall */
      889     5823    3              END DO_PRECORD;
      890     5824
      891     5825
      892     5826                /*
      893     5827                *   We only want to read if:
      894     5828                *       (1) Reading was requested;
      895     5829                *   and (2) We don't already have the requested record in
      896     5830                *           hand, or we want to force a monitor call;
      897     5831                *   and (3) We aren't reading sequentially while positioned
      898     5832                *           at EOF!
      899     5833                */
      900     5834
      901     5835    2           IF READ
      902     5836    2             AND (NOT (PORT_ALREADY_AT_ABS_KEY AND REL = 0
      903     5837    2             AND PORT.LEVEL.DATA$ (%LVL_EXT_REC) ~= ADDR(NIL))
      904     5838    2             OR FORCE_MONITOR_CALL)
      905     5839    2             AND NOT (FPT_READ.V.KEYS# = %FALSE
      906     5840    2             AND PORT.CURRENT.EOF) THEN
      907     5841    3   DO_READ: DO;
      908     5842    4              IF FPT_READ.V.KEYS# THEN DO;
      909     5843                      %INCREMENT (INDX=%STG_ACC_M$READS_KEYED);
      910     5846    4                 END;
      911     5847    4              ELSE DO;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:26   
      912     5848                      %INCREMENT (INDX=%STG_ACC_M$READS_SEQ);
      913     5851    4                 END;
      914     5852    4              IF NOT EXT_RECORD_CLEARED THEN DO;
      915     5853    4                 CALL CLEAR_LEVEL_REGISTERS
      916     5854    4                   ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      917     5855    4                 END;
      918     5856    3              FPT_READ.KEY_ = KEY_;
      919     5857    3              NB_BUFFER = %NB_DFLT_DATA_REC;
      920     5858        /*N*       IF PORT$DCB.COMP# THEN
      921     5859                      NB_BUFFER = %MXNB_DATA;    Can't M$READ CONT on comprsd file */
      922     5860    3              PORT.LAST_OP# = %ACCOP_READ;
      923     5861
      924     5862    3   GET_COMPLETE_RECORD:
      925     5863    4              DO WHILE %TRUE;
      926     5864    4                 CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,
      927     5865    4                   (LENGTHC(VD$BUFFER_HEADER) + NB_BUFFER + %(NB_PER_WORD-1)) /
      928     5866    4                   %NB_PER_WORD)
      929     5867    4                   ALTRET (OALLOC_FAILED);
      930     5868    4                 BUFFER.LENGTH# = NB_BUFFER;
      931     5869    4                 FPT_READ.BUF_ = VECTOR(BUFFER.BYTES);
      932     5870    4                 ERR_CODE = %CLEAR;
      933     5871    4                 IF VD_$$MON_ACC.V# > 10 THEN
      934     5872    4                    CALL VDG$MACC_PREAD_B4_READ (FPT_READ.V.DCB#,
      935     5873    4                      FPT_READ.V.KEYS#, FPT_READ.KEY_, FPT_READ.V.KEYR#);
      936     5874    4                 CALL M$READ (FPT_READ)
      937     5875    5                 WHENRETURN DO;
      938     5876    5                    EXIT GET_COMPLETE_RECORD;
      939     5877    5                    END;
      940     5878    5                 WHENALTRETURN DO;
      941     5879    5                    CALL VDG$OFREE (BUFFER)
      942     5880    5                      ALTRET (OFREE_FAILED);
      943     5881    5                    FPT_READ.V.KEYS# = %TRUE;  /* Read same key again */
      944     5882    5                    ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
      945     5883    6                    DO CASE (ERR_CODE.CODE#);
      946     5884    6                     CASE (%E$NOKEY);
      947     5885    6                       EXISTS = %FALSE;
      948     5886    6                       FPT_READ.V.KEYS# = %FALSE;  /* Get next key */
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:27   
      949     5887    6                       FPT_READ.V.KEYR# = %TRUE;
      950     5888                            %CLEARKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1);
      951     5898    6                     CASE (%E$LD);
      952     5899                            /* Record too big for current buffer */
      953     5900    6                       IF NB_BUFFER >= %MXNB_DATA THEN
      954     5901    6                          EXIT GET_COMPLETE_RECORD;
      955     5902    6                       NB_BUFFER = MINIMUM (%MXNB_DATA, NB_BUFFER * 2);
      956     5903    7                       IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;
      957     5904    7                          FPT_PRECORD.V.N# = -1; /* KEYS doesn't work in consec */
      958     5905    7                          CALL M$PRECORD (FPT_PRECORD)
      959     5906    7                            ALTRET (PRECORD_FAILED);
      960     5907    7                          END;
      961     5908    6                     CASE (ELSE);
      962     5909    6                       EXIT GET_COMPLETE_RECORD; /* Other error */
      963     5910    6                     END;
      964     5911    5                    END;
      965     5912    4                 END GET_COMPLETE_RECORD;
      966     5913
      967     5914    3              IF VD_$$MON_ACC.V# > 10 THEN
      968     5915    3                 CALL VDG$MACC_PREAD_AF_READ (FPT_READ.KEY_, PORT$DCB.ARS#,
      969     5916    3                   BUFFER$);
      970     5917    4              IF FPT_READ.V.KEYR# THEN DO;
      971     5918    4                 CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP,
      972     5919    4                   PORT.LEVEL.ORG# (%LVL_EXT_REC),
      973     5920    4                   PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
      974     5921    4                   PORT.CURRENT)
      975     5922    4                   ALTRET (READ_FAILED);
      976     5923    4                 END;
      977     5924    4              ELSE DO;
      978     5925                      /*
      979     5926                      *  We already filled in PORT.CURRENT after the PRECORD
      980     5927                      *     call -- but we may have gotten an error on the
      981     5928                      *     read.
      982     5929                      */
      983     5930    5                 DO CASE (ERR_CODE.CODE#);
      984     5931    5                  CASE (0, %E$BOF);
      985     5932    5                    ;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:28   
      986     5933    5                  CASE (%E$EOF);
      987     5934                         %CLEARKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1);
      988     5944    5                    PORT.CURRENT.EOF = %TRUE;
      989     5945    5                  CASE (ELSE);
      990     5946    5                    CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      991     5947    5                      ALTRET (OALLOC_FAILED);
      992     5948    5                    VD$ERR.ERR = ERR_CODE;
      993     5949    5                    VD$ERR.FLAGLEV# = %FLV_SERIOUS;
      994     5950    5                    GOTO READ_FAILED;
      995     5951    5                  END;
      996     5952    4                 END;
      997     5953
      998     5954    4              IF PORT.CURRENT.EOF THEN DO;
      999     5955                      /* When READ gets EOF, it's like a LOCATION-type call */
     1000     5956    4                 PORT.LAST_OP# = %ACCOP_LOCATION;
     1001     5957    4                 END;
     1002     5958    3              ELSE IF PORT.LEVEL.SPEC.V$ (%LVL_EXT_REC) ~= ADDR(NIL) THEN
     1003     5959    4   LOAD_RECORD_INTO_PORT: DO;
     1004     5960    4                    PORT.LEVEL.SPEC.TYPE# (%LVL_EXT_REC) = %SPT_EXT_RECORD;
     1005     5961    4                    PORT.LEVEL.SPEC.REP# (%LVL_EXT_REC) = %REP_LOCAL;
     1006     5962    4                    REC_SPEC$ = ADDR(PORT.LEVEL.SPEC.V$ (%LVL_EXT_REC));
     1007     5963    4                    REC$SPEC.LENGTH# = 1;
     1008     5964    4                    REC$SPEC.BYTES = BITASC(PORT$DCB.DVBYTE);
     1009     5965    4                    PORT.LEVEL.DATA$ (%LVL_EXT_REC) = BUFFER$;
     1010     5966    4                    BUFFER.LENGTH# = PORT$DCB.ARS#;
     1011     5967    4                    END LOAD_RECORD_INTO_PORT;
     1012     5968    3              END DO_READ;
     1013     5969
     1014     5970    2           RETURN;
     1015     5971
     1016     5972
     1017     5973
     1018     5974    2   PFIL_FAILED:
     1019     5975    2           EXISTS = %FALSE;
     1020     5976    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1021     5977    2             ALTRET (OALLOC_FAILED);
     1022     5978    2           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:29   
     1023     5979    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1024     5980    2           VD$ERR.DCB# = PORT.DCB#;
     1025     5981    2           ALTRETURN;
     1026     5982
     1027     5983
     1028     5984    2   PRECORD_FAILED: ;
     1029     5985    2   READ_FAILED: ;
     1030     5986    2           EXISTS = %FALSE;
     1031     5987    3           IF ERR$TAIL.ERR.CODE# = %E$LD THEN DO;
     1032     5988    3              ERR$TAIL.ERR = %CLEAR;
     1033     5989    3              ERR$TAIL.ERR.CODE# = %E$VD_LD;
     1034     5990    3              END;
     1035     5991    2           ERR$TAIL.DCB# = PORT.DCB#;
     1036     5992    2           ALTRETURN;
     1037     5993
     1038     5994
     1039     5995    2   CLEAR_LEVEL_REGISTERS_FAILED: ;
     1040     5996    2   OALLOC_FAILED: ;
     1041     5997    2   OFREE_FAILED: ;
     1042     5998    2           ALTRETURN;
     1043     5999
     1044     6000    2   END READ_EXTERNAL;
     1045     6001
     1046     6002                %BOX (TITLE=CLEAR_LEVEL_REGISTERS, PAGE=YES);
              6010    2
              6014    2   /***************************************************************************
              6016    2    *                                                                         *
              6020    2            *                           CLEAR_LEVEL_REGISTERS                         *
              6022    2            *                                                                         *
              6024    2           ***************************************************************************/

     1047     6028
     1048     6029        /*I* NAME: CLEAR_LEVEL_REGISTERS
     1049     6030            PARAMETERS:
     1050     6031                None.
     1051     6032            INPUT:
     1052     6033                PORT is the VD$PORT open to an internal or external file.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:30   
     1053     6034            OUTPUT:
     1054     6035                PORT.LEVEL's Key, Spec, and Data components will be clear/nil,
     1055     6036                    as will PORT.LEVEL.INTERNAL$'s.
     1056     6037            DESCRIPTION:
     1057     6038                We're about to change the Port's location; first, we must
     1058     6039                    clear any current nodes held by the Port.
     1059     6040                If any Spec or Data components have been modified,
     1060     6041                    flush the nodes to the file and the Presenter.
     1061     6042                Free any dynamic storage held by the Port for the nodes.
     1062     6043                Clear the appropriate fields of PORT.LEVELs.
     1063     6044        */
     1064     6045
     1065     6046    1   CLEAR_LEVEL_REGISTERS: PROC ALTRET;
     1066     6047
     1067     6048
     1068     6049
     1069     6050    2   DCL LEVEL SBIN;
     1070     6051
     1071     6052
     1072     6053        %VD$TEXTC_REMOTE;
     1073     6114        %VD$BUFFER;
     1074     6172
     1075     6173
     1076     6174
     1077     6175    2   CHECK_FOR_FLUSH:
     1078     6176    3           DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;
     1079     6177    3              IF PORT.LEVEL.DATA_MODIFIED (LEVEL)
     1080     6178    4                OR PORT.LEVEL.SPEC_MODIFIED (LEVEL) THEN DO;
     1081     6179    4                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)
     1082     6180    4                   ALTRET (PFLUSH_FAILED);
     1083     6181    4                 EXIT CHECK_FOR_FLUSH;
     1084     6182    4                 END;
     1085     6183    3              END CHECK_FOR_FLUSH;
     1086     6184
     1087     6185    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)
     1088     6186    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1089     6187
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:31   
     1090     6188    3           DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;
     1091     6189                   %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=LEVEL);
     1092     6199    4              IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN DO;
     1093     6200    4                 CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)
     1094     6201    4                   ALTRET (OFREE_FAILED);
     1095     6202    4                 PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL);
     1096     6203    4                 END;
     1097     6204    3              PORT.LEVEL.INTERNAL$ (LEVEL) = ADDR(NIL);
     1098     6205    3              END;
     1099     6206
     1100     6207    2           RETURN;
     1101     6208
     1102     6209
     1103     6210    2   PFLUSH_FAILED: ;
     1104     6211    2   OCLEAR_LOCATION_FAILED: ;
     1105     6212    2   OFREE_FAILED: ;
     1106     6213    2           ALTRETURN;
     1107     6214
     1108     6215    2   END CLEAR_LEVEL_REGISTERS;
     1109     6216
     1110     6217
     1111     6218    1   END VDA$PREAD;
     1112     6219        %EOD;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:32   
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PREAD.

   Procedure VDA$PREAD requires 1390 words for executable code.
   Procedure VDA$PREAD requires 72 words of local(AUTO) storage.

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:33   

 Object Unit name= VDA$PREAD                                  File name= VDA$PORT.:VDA5TOU
 UTS= JUL 04 '97 11:07:02.32 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     30     36  VDA$PREAD
    2   Proc  even  none  1390   2556  VDA$PREAD
    3  RoData even  none    19     23  VDA$PREAD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        6  VDA$PREAD
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:34   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       2 VDG$OCOPY
         yes           Std       4 VDG$MACC_PREAD_B4_PRECORD
 yes     yes           Std       6 VDG$BUILD_LOCATION
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$MACC_PREAD_AF_READ
         yes           Std       2 VDG$MACC_PREAD_PFIL
 yes     yes           Std       1 VDG$OFREE
         yes           Std       2 VDG$MACC_PREAD_AF_PRECORD
         yes           Std       4 VDG$MACC_PREAD_B4_READ
 yes     yes           Std       2 VDA$PFLUSH
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                VD_6E
     VD_NODE_READERS$$                     VD_ACCESSOR_PRIV                      VD_STATIC_TEMP
     VD_$$MON_ACC                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:35   


        1        1        /*M* VDA$PORT - Accessor operations on a Port */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$PORT
       12       12            PURPOSE: Accessor operations on a Port.
       13       13            DESCRIPTION:
       14       14                This module contains several external entries:
       15       15
       16       16                VDA$PREAD
       17       17                For a Port open to either an internal or external file,
       18       18                given an absolute location and a relative node increment,
       19       19                will position the Port/DCB to the requested node.
       20       20                Optionally, will also read the specified node.
       21       21
       22       22                VDA$PWRITE
       23       23                Given a port positioned to a node in an internal or external
       24       24                file, will replace that node's Spec and/or Data components.
       25       25                For internal files, the file node will be updated as well.
       26       26
       27       27                VDA$PFLUSH
       28       28                Will flush a Port's level-registers to the file and,
       29       29                optionally, to the Presenter.
       30       30
       31       31                VDA$PDELETE
       32       32                Given a port and a range, will delete the nodes in the range
       33       33                from an internal or external file.  Will also count the nodes
       34       34                actually deleted.
       35       35        */
       36       36
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:36   
       37       37        /*D* NAME: VDA$PREAD
       38       38            PARAMETERS:
       39       39                PORT - VD$PORT to use.  This Port must already be open,
       40       40                    to either an external file (and so have a DCB attached)
       41       41                    or an internal file (and so have a VD$FILE_NODE attached).
       42       42                ABSOLUTE - VD$LOCATION containing the absolute location
       43       43                    to position to first.  ABSOLUTE must contain only one of:
       44       44                    %CLEAR - Position to BOF.
       45       45                    .KEY (%(LVL_LOWER-1)) thru (n) - Keys at levels %LVL_LOWER
       46       46                        thru (n+1) of the file.
       47       47                    .EOF - Position to EOF.
       48       48                RELATIVE - Signed # of records to move relative to ABSOLUTE.
       49       49                    RELATIVE>0 moves forward.
       50       50                    RELATIVE<0 moves backward.
       51       51                    RELATIVE=0 means only ABSOLUTE positioning is performed.
       52       52                READ - A BIT(1) ALIGNED flag; if set, we'll read the node
       53       53                    positioned-to into the Port's registers; if READ = %FALSE,
       54       54                    we'll just position the Port.
       55       55                NODE_EXISTS - Optional BIT(1) ALIGNED, uninitialized at entry.
       56       56                COUNT - Optional SBIN, uninitialized at entry.
       57       57            INPUT:
       58       58                None.
       59       59            OUTPUT:
       60       60                In the specified Port, VD$PORT.CURRENT will be set:
       61       61                If PORT.CURRENT.EOF is not set, then the .CURRENT.KEYs
       62       62                    specify the keys of the node nearest the requested one.
       63       63                    This could only be different than the requested node if
       64       64                    RELATIVE = 0 and the specified key doesn't exist in the file.
       65       65                If PORT.CURRENT.EOF is set, then we hit EOF (by
       66       66                    request or while positioning the Port).  In this case,
       67       67                    no other Key, Spec, or Data info in the port is accurate.
       68       68                If ABSOLUTE was %CLEAR at entry, then PORT.CURRENT will
       69       69                    be positioned to the first record in the file; if file is
       70       70                    empty, PORT.CURRENT.EOF will be set.
       71       71                If READ is set, PORT.LEVEL.SPEC and .DATA for levels %LVL_LOWER
       72       72                    thru n will contain the Spec and Data components of the
       73       73                    specified nodes.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:37   
       74       74                If NODE_EXISTS is passed, it will be set if:
       75       75                        ABSOLUTE.EOF set or ABSOLUTE = %CLEAR or ABSOLUTE omitted;
       76       76                        or RELATIVE is non-0.
       77       77                    NODE_EXISTS will only be reset when:
       78       78                        ABSOLUTE is given and it isn't = %CLEAR and .EOF not set,
       79       79                        and (RELATIVE = 0 or RELATIVE is omitted),
       80       80                        and the node specified by the ABSOLUTE.KEYs doesn't
       81       81                        exist in the file.
       82       82                If COUNT is passed:
       83       83                    If the Port is open to an external file, COUNT will be 1.
       84       84                    If the Port is open to an internal file, COUNT will contain
       85       85                        the number of nodes skipped in a forward direction to
       86       86                        get to the Port's final position.  This value is valid
       87       87                        only if RELATIVE is >= 0, and either ABSOLUTE.EOF is set
       88       88                        or ABSOLUTE contains keys (not = %CLEAR) which specify a
       89       89                        location beyond the Port's position at entry.
       90       90                        The value returned in COUNT is inclusive at the
       91       91                        start of the interval.  Examples:
       92       92                        Assume the file contains nodes "6", "7", and "8".
       93       93
       94       94                        Port position   Port position  =>  COUNT  representing
       95       95                          at entry        at exit                    nodes:
       96       96                        -------------   -------------      -----  ------------
       97       97                        6               8                    2      6 and 7
       98       98                        6               7.1 and NOT
       99       99                                         NODE_EXISTS         2      6 and 7
      100      100                        6.1 and NOT
      101      101                         NODE_EXISTS    8                    1         7
      102      102                        6.1 and NOT     7.1 and NOT
      103      103                         NODE_EXISTS     NODE_EXISTS         1         7
      104      104
      105      105            DESCRIPTION:
      106      106                For internal files:
      107      107                    Find the specified node in the internal file tree.
      108      108                For external files:
      109      109                    For CONSEC/UR files, translate ABSOLUTE.KEY into a
      110      110                        relative record count from Port's current key
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:38   
      111      111                        (DCB's current location), and add it to RELATIVE.
      112      112                    Set up the M$PFIL/M$PRECORD request, and do it.
      113      113                If READ is set:
      114      114                    M$READ or copy the node to the Port's registers.
      115      115                    If the Spec component is one of the predefined,
      116      116                        formatted types (Spec type is anything other
      117      117                        than %SPT_EXT_RECORD), call a Spec reader.  This
      118      118                        may change the content of the Spec component in the
      119      119                        Port (fetching internal values for display
      120      120                        to the user).
      121      121        */
      122      122
      123      123        VDA$PREAD: PROC (PORT, ABSOLUTE, RELATIVE, READ, NODE_EXISTS, NODE_COUNT)

    123  2 000000   000000 700200 xent  VDA$PREAD    TSX0  ! X66_AUTO_N
         2 000001   000110 000006                    ZERO    72,6

      124      124                  ALTRET;
      125      125
      126      126        %INCLUDE VD_MACROS_M;
      127     2341        %INCLUDE VD_PERR_C;
      128     2489        %INCLUDE CP_6;
      129     2570        %INCLUDE B_ERRORS_C;
      130     3696
      131     3697
      132     3698        %VD$PORT (NAME=PORT, STCLASS=PARAM);
      133     3796        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      134     3824    1   DCL RELATIVE SBIN;
      135     3825    1   DCL READ BIT(1) ALIGNED;
      136     3826    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      137     3827    1   DCL NODE_COUNT SBIN;
      138     3828
      139     3829
      140     3830    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      141     3831    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      142     3832    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      143     3833    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:39   
      144     3834    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      145     3835    1   DCL VDG$BUILD_LOCATION  ENTRY (6) ALTRET;
      146     3836    1   DCL VDG$ESCREECH        ENTRY (3);
      147     3837    1   DCL VDG$MACC_PREAD_B4_PRECORD ENTRY (4);
      148     3838    1   DCL VDG$MACC_PREAD_AF_PRECORD ENTRY (2);
      149     3839    1   DCL VDG$MACC_PREAD_B4_READ ENTRY (4);
      150     3840    1   DCL VDG$MACC_PREAD_AF_READ ENTRY (3);
      151     3841    1   DCL VDG$MACC_PREAD_PFIL ENTRY (2);
      152     3842
      153     3843
      154     3844    1   DCL B$TCB$ PTR SYMREF;
      155     3845        %VD_6E (NAME=VD_6E, STCLASS=SYMREF);
      156     3881    1   DCL VD_NODE_READERS$$ (0:0) EPTR SYMREF;
      157     3882    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      158     3883            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      159     3897    1   DCL VD_STATIC_TEMP CHAR(%MXNB_KEY) SYMREF;
      160     3898        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      161     3943
      162     3944    1   DCL STATIC_TEMP$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP));
      163     3945        %FPT_PFIL (FPTN=CONST_PFIL, STCLASS=CONSTANT);
      164     3960        %FPT_PRECORD (FPTN=CONST_PRECORD, STCLASS=CONSTANT, KEYS=NO, KEYR=YES);
      165     3981        %FPT_READ (FPTN=CONST_READ, STCLASS=CONSTANT, KEYS=NO, KEYR=YES);
      166     4020
      167     4021
      168     4022
      169     4023    1   DCL STRUCTURE_NODE$ PTR;
      170     4024    1   DCL LOCAL_EXISTS BIT(1) ALIGNED;
      171     4025    1   DCL EXISTS BIT(1);
      172     4026    1   DCL COUNT SBIN;
      173     4027    1   DCL READ_LEVEL SBIN;
      174     4028    1   DCL NODE_READER$$ EPTR;
      175     4029    1   DCL VD_ERR$ PTR;
      176     4030
      177     4031
      178     4032        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
      179     4125        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      180     4178        %VD$ERR (NAME=ERR$TAIL, STCLASS="BASED(VD_6E.ERR_TAIL$)");
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:40   
      181     4231        %VD$BUFFER_HEADER;
      182     4267
      183     4268
      184     4269
      185     4270    1           IF PORT.EXIST# = 0 THEN

   4270  2 000002   200003 470500                    LDP0    @PORT,,AUTO
         2 000003   000003 720100                    LXL0    3,,PR0
         2 000004   000010 601000 2                  TNZ     s:4272

      186     4271    1              CALL VDG$ESCREECH;

   4271  2 000005   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000006   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000007   000000 011000                    NOP     0

      187     4272    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;

   4272  2 000010   200003 470500                    LDP0    @PORT,,AUTO
         2 000011   000006 236100                    LDQ     6,,PR0
         2 000012   200011 756100                    STQ     STRUCTURE_NODE$,,AUTO

      188     4273
      189     4274    2           IF PORT.DCB# = 0 THEN DO;

   4274  2 000013   000004 720100                    LXL0    4,,PR0
         2 000014   000020 601000 2                  TNZ     s:4279

      190     4275    2              CALL READ_INTERNAL

   4275  2 000015   000103 701000 2                  TSX1    READ_INTERNAL
         2 000016   000102 702000 2                  TSX2    READ_INTERNAL_FAILED

      191     4276    2                ALTRET (READ_INTERNAL_FAILED);
      192     4277    2              END;

   4277  2 000017   000025 710000 2                  TRA     s:4285
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:41   

      193     4278    2           ELSE DO;

      194     4279    2              CALL READ_EXTERNAL

   4279  2 000020   001046 701000 2                  TSX1    READ_EXTERNAL
         2 000021   000102 702000 2                  TSX2    READ_INTERNAL_FAILED

      195     4280    2                ALTRET (READ_EXTERNAL_FAILED);
      196     4281    2              COUNT = 1;

   4281  2 000022   000001 235007                    LDA     1,DL
         2 000023   200014 755100                    STA     COUNT,,AUTO

      197     4282    2              READ_LEVEL = %LVL_EXT_REC;

   4282  2 000024   200015 755100                    STA     READ_LEVEL,,AUTO

      198     4283    2              END;

      199     4284
      200     4285    1           IF ADDR(NODE_EXISTS) ~= ADDR(NIL) THEN

   4285  2 000025   200007 236100                    LDQ     @NODE_EXISTS,,AUTO
         2 000026   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000027   000034 600000 2                  TZE     s:4287

      201     4286    1              NODE_EXISTS = EXISTS;

   4286  2 000030   200013 236100                    LDQ     EXISTS,,AUTO
         2 000031   400000 376003                    ANQ     -131072,DU
         2 000032   200007 470500                    LDP0    @NODE_EXISTS,,AUTO
         2 000033   000000 756100                    STQ     0,,PR0

      202     4287    1           IF ADDR(NODE_COUNT) ~= ADDR(NIL) THEN

   4287  2 000034   200010 236100                    LDQ     @NODE_COUNT,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:42   
         2 000035   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000036   000042 600000 2                  TZE     s:4290

      203     4288    1              NODE_COUNT = COUNT;

   4288  2 000037   200010 470500                    LDP0    @NODE_COUNT,,AUTO
         2 000040   200014 235100                    LDA     COUNT,,AUTO
         2 000041   000000 755100                    STA     0,,PR0

      204     4289
      205     4290    2           IF READ THEN DO;

   4290  2 000042   200006 470500                    LDP0    @READ,,AUTO
         2 000043   000000 234100                    SZN     0,,PR0
         2 000044   000101 605000 2                  TPL     s:4301

      206     4291    2              IF PORT.LEVEL.SPEC.TYPE# (READ_LEVEL) >= %MX_SPEC_TYPES THEN

   4291  2 000045   200015 236100                    LDQ     READ_LEVEL,,AUTO
         2 000046   000007 402007                    MPY     7,DL
         2 000047   200003 471500                    LDP1    @PORT,,AUTO
         2 000050   100025 220106                    LDX0    21,QL,PR1
         2 000051   000024 100003                    CMPX0   20,DU
         2 000052   000064 602000 2                  TNC     s:4293

      207     4292    2                 CALL VDG$ESCREECH (PORT.LEVEL.SPEC.TYPE# (READ_LEVEL));

   4292  2 000053   200015 236100                    LDQ     READ_LEVEL,,AUTO
         2 000054   000007 402003                    MPY     7,DU
         2 000055   000025 036003                    ADLQ    21,DU
         2 000056   200003 036100                    ADLQ    @PORT,,AUTO
         2 000057   200102 756100                    STQ     LEVEL+1,,AUTO
         2 000060   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 000061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000062   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000063   000000 011000                    NOP     0

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:43   
      208     4293    2              NODE_READER$$ =

   4293  2 000064   200015 236100                    LDQ     READ_LEVEL,,AUTO
         2 000065   000007 402007                    MPY     7,DL
         2 000066   200003 470500                    LDP0    @PORT,,AUTO
         2 000067   000025 220106                    LDX0    21,QL,PR0
         2 000070   000000 236010 xsym               LDQ     VD_NODE_READERS$$,X0
         2 000071   200016 756100                    STQ     NODE_READER$$,,AUTO

      209     4294    2                VD_NODE_READERS$$ (PORT.LEVEL.SPEC.TYPE# (READ_LEVEL));
      210     4295    3              IF NODE_READER$$ ~= ENTADDR(NIL) THEN DO;

   4295  2 000072   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000073   000101 600000 2                  TZE     s:4301

      211     4296    3                 CALL NODE_READER$$ (PORT)

   4296  2 000074   200003 630500                    EPPR0   @PORT,,AUTO
         2 000075   200016 220100                    LDX0    NODE_READER$$,,AUTO
         2 000076   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000077   000000 701010                    TSX1    0,X0
         2 000100   000102 702000 2                  TSX2    READ_INTERNAL_FAILED

      212     4297    3                   ALTRET (NODE_READER_FAILED);
      213     4298    3                 END;

      214     4299    2              END;

      215     4300
      216     4301    1           RETURN;

   4301  2 000101   000000 702200 xent               TSX2  ! X66_ARET

   4295  2 000102                       READ_INTERN* null
   4295  2 000102                       READ_EXTERN* null
   4295  2 000102                       NODE_READER* null
      217     4302
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:44   
      218     4303
      219     4304    1   READ_INTERNAL_FAILED: ;
      220     4305    1   READ_EXTERNAL_FAILED: ;
      221     4306    1   NODE_READER_FAILED: ;
      222     4307    1           ALTRETURN;

   4307  2 000102   000000 702200 xent               TSX2  ! X66_AALT

      223     4308
      224     4309        %BOX (TITLE=READ_INTERNAL, PAGE=YES);
              4317    1
              4321    1   /***************************************************************************
              4323    1    *                                                                         *
              4327    1            *                               READ_INTERNAL                            *
              4329    1            *                                                                        *
              4331    1          ***************************************************************************/

      225     4335
      226     4336        /*I* NAME: READ_INTERNAL
      227     4337            INPUT:
      228     4338                PORT - VD$PORT to use.  Must be open to an internal file.
      229     4339                ABSOLUTE - Same as for main routine.
      230     4340                RELATIVE - Same as for main routine.
      231     4341            OUTPUT:
      232     4342                If we must reposition the Port:
      233     4343                    If the Port registers at entry had been modified, they will
      234     4344                        be flushed to the Presenter.
      235     4345                    Port's Spec and Data registers will be cleared.
      236     4346                    Port's Keys and Internal$s will point to the requested
      237     4347                        node, or (if the requested node doesn't exist) to the
      238     4348                        node following the requested position.
      239     4349                EXISTS will be reset if ABSOLUTE contains keys of a specific
      240     4350                    requested node, and that node doesn't exist in the file,
      241     4351                    and RELATIVE = 0.  Otherwise, EXISTS will be set.
      242     4352                COUNT will contain the number of nodes skipped in a forward
      243     4353                    direction to get to the found node.
      244     4354                READ_LEVEL will specify the level of the lowest key in ABSOLUTE.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:45   
      245     4355            DESCRIPTION:
      246     4356                Search the file tree for ABSOLUTE, counting nodes as we go.
      247     4357                    If we find ABSOLUTE exactly, set EXISTS.
      248     4358                Move RELATIVE nodes forward or backward, counting as we go.
      249     4359                If the new position is different from Port's entry position:
      250     4360                    Flush Port if it contains any modified nodes.
      251     4361                    Clear Port's Keys, Specs, Datas, and Internal$s.
      252     4362                    Set Port's Keys and Internal$s for the found node.
      253     4363        */
      254     4364
      255     4365    1   READ_INTERNAL: PROC ALTRET;

   4365  2 000103   200020 741300       READ_INTERN* STX1  ! VD_ERR$+1,,AUTO

      256     4366
      257     4367
      258     4368    2   DCL LEVEL SBIN;
      259     4369    2   DCL REL SBIN;
      260     4370    2   DCL AT_EOF BIT(1) ALIGNED;
      261     4371    2   DCL ABS_KEY$ (0:%(MX_ACCESS_LEVELS-1)) PTR; /* Entry 0 not used */
      262     4372    2   DCL FOUND_NODE$ (0:%(MX_ACCESS_LEVELS-1)) PTR;
      263     4373    2   DCL CAND_KEY$ PTR;
      264     4374    2   DCL CAND_NODE$ PTR;
      265     4375    2   DCL PORT_AT_REQ_LOC BIT(1) ALIGNED;
      266     4376
      267     4377
      268     4378        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      269     4401        %VD$TEXTC (NAME=KEY, STCLASS=BASED);
      270     4424        %VD$FILE_NODE (NAME=CAND$NODE, STCLASS="BASED(CAND_NODE$)");
      271     4517        %VD$FILE_NODE;
      272     4610        %VD$TEXTC_REMOTE;
      273     4671        %VD$BUFFER;
      274     4729
      275     4730
      276     4731
      277     4732    2           EXISTS = %TRUE;     /* Assume node exists */

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:46   
   4732  2 000104   400000 236003                    LDQ     -131072,DU
         2 000105   200013 756100                    STQ     EXISTS,,AUTO

      278     4733    2           COUNT = 0;

   4733  2 000106   200014 450100                    STZ     COUNT,,AUTO

      279     4734    2           READ_LEVEL = STRUCTURE$NODE.COUNT# - 1; /* Assumed level */

   4734  2 000107   200011 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         2 000110   000014 235100                    LDA     12,,PR0
         2 000111   000001 135007                    SBLA    1,DL
         2 000112   200015 755100                    STA     READ_LEVEL,,AUTO

      280     4735    2           AT_EOF = %FALSE;

   4735  2 000113   200023 450100                    STZ     AT_EOF,,AUTO

      281     4736    2           REL = RELATIVE;         /* So we can change it */

   4736  2 000114   200005 471500                    LDP1    @RELATIVE,,AUTO
         2 000115   100000 235100                    LDA     0,,PR1
         2 000116   200022 755100                    STA     REL,,AUTO

      282     4737
      283     4738    2           FOUND_NODE$ (%LVL_FILE) = PORT.LEVEL.INTERNAL$ (%LVL_FILE);

   4738  2 000117   200003 473500                    LDP3    @PORT,,AUTO
         2 000120   300031 236100                    LDQ     25,,PR3
         2 000121   200031 756100                    STQ     FOUND_NODE$,,AUTO

      284     4739    2           ABS_KEY$ (%LVL_FILE) = ADDR(NIL);

   4739  2 000122   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000123   200024 756100                    STQ     ABS_KEY$,,AUTO

      285     4740    3           IF FOUND_NODE$ (%LVL_FILE) = ADDR(NIL) THEN DO;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:47   

   4740  2 000124   200031 236100                    LDQ     FOUND_NODE$,,AUTO
         2 000125   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000126   000135 601000 2                  TNZ     s:4743

      286     4741    3              CALL VDG$ESCREECH (FOUND_NODE$ (%LVL_FILE));

   4741  2 000127   200031 634500                    EPPR4   FOUND_NODE$,,AUTO
         2 000130   200102 454500                    STP4    LEVEL+1,,AUTO
         2 000131   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 000132   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000133   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000134   000000 011000                    NOP     0

      287     4742    3              END;

      288     4743    3           DO LEVEL = %LVL_LOWER TO %MX_ACCESS_LEVELS - 1;

   4743  2 000135   000001 235007                    LDA     1,DL
         2 000136   200021 755100                    STA     LEVEL,,AUTO
         2 000137   000145 710000 2                  TRA     s:4746+1

      289     4744    3              FOUND_NODE$ (LEVEL) = ADDR(NIL);

   4744  2 000140   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000141   200021 720100                    LXL0    LEVEL,,AUTO
         2 000142   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      290     4745    3              ABS_KEY$ (LEVEL) = ADDR(NIL);

   4745  2 000143   200024 756110                    STQ     ABS_KEY$,X0,AUTO

      291     4746    3              END;

   4746  2 000144   200021 054100                    AOS     LEVEL,,AUTO
         2 000145   200021 235100                    LDA     LEVEL,,AUTO
         2 000146   000004 115007                    CMPA    4,DL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:48   
         2 000147   000140 604400 2                  TMOZ    s:4744

      292     4747
      293     4748
      294     4749                /*
      295     4750                *   Find the node specified by ABSOLUTE, setting up
      296     4751                *       AT_EOF, FOUND_NODE$, EXISTS, and COUNT to
      297     4752                *       indicate what we found:
      298     4753                *   AT_EOF will be set if EOF was requested, or the file is
      299     4754                *       empty (no level-1 nodes at all).
      300     4755                *   FOUND_NODE$ will point to the nodes for each key in ABSOLUTE:
      301     4756                *       If AT_EOF set, ignore FOUND_NODE$.
      302     4757                *       If requested BOF, FOUND_NODE$ will point to the first
      303     4758                *           node at each level of the file.  If the file
      304     4759                *           doesn't have at least one node at each level,
      305     4760                *           EXISTS will be %FALSE; else it will be %TRUE.
      306     4761                *       Otherwise FOUND_NODE$ will point to nodes in the
      307     4762                *           file:
      308     4763                *           If EXISTS = %FALSE, then some of these nodes
      309     4764                *               aren't the ones requested, because the
      310     4765                *               requested ones don't exist; there may be some
      311     4766                *               nil pointers if the file isn't filled down to
      312     4767                *               the requested level -- however levels 0 and 1
      313     4768                *              will always be non-nil.
      314     4769                *           If EXISTS = %TRUE then each FOUND_NODE$ key is
      315     4770                *               non-nil and points to the exact node requested
      316     4771                *               at that level.
      317     4772                */
      318     4773
      319     4774    3           IF ABSOLUTE.EOF THEN DO;

   4774  2 000150   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         2 000151   000010 236100                    LDQ     8,,PR0
         2 000152   400000 316007                    CANQ    -131072,DL
         2 000153   000173 600000 2                  TZE     s:4783

      320     4775                   /* Count # nodes from port's current location, to EOF */
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:49   
      321     4776    3              CAND_NODE$ = PORT.LEVEL.INTERNAL$ (READ_LEVEL);

   4776  2 000154   200015 236100                    LDQ     READ_LEVEL,,AUTO
         2 000155   000007 402007                    MPY     7,DL
         2 000156   200003 471500                    LDP1    @PORT,,AUTO
         2 000157   100031 236106                    LDQ     25,QL,PR1
         2 000160   200037 756100                    STQ     CAND_NODE$,,AUTO

      322     4777    4              DO WHILE CAND_NODE$ ~= ADDR(NIL);

   4777  2 000161   000166 710000 2                  TRA     s:4780

      323     4778    4                 CAND_NODE$ = CAND$NODE.FLINK$;

   4778  2 000162   200037 470500                    LDP0    CAND_NODE$,,AUTO
         2 000163   000002 236100                    LDQ     2,,PR0
         2 000164   200037 756100                    STQ     CAND_NODE$,,AUTO

      324     4779    4                 COUNT = COUNT + 1;

   4779  2 000165   200014 054100                    AOS     COUNT,,AUTO

      325     4780    4                 END;

   4780  2 000166   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000167   000162 601000 2                  TNZ     s:4778

      326     4781    3              AT_EOF = %TRUE;

   4781  2 000170   400000 236003                    LDQ     -131072,DU
         2 000171   200023 756100                    STQ     AT_EOF,,AUTO

      327     4782    3              END;

   4782  2 000172   000531 710000 2                  TRA     s:4928

      328     4783    2           ELSE IF ABSOLUTE = %CLEAR THEN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:50   

   4783  2 000173   000000 106500                    CMPC    fill='000'O
         2 000174   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
         2 000175   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000176   000250 601000 2                  TNZ     REQUESTED_KEYED_POSITION

      329     4784    3   REQUESTED_BOF: DO;

   4784  2 000177                       REQUESTED_B* null
      330     4785                      /* Find 1st node at each level */
      331     4786    3                 FOUND_NODE$ (%LVL_LOWER) = FOUND_NODE$ (%LVL_FILE) ->

   4786  2 000177   200031 471500                    LDP1    FOUND_NODE$,,AUTO
         2 000200   100012 236100                    LDQ     10,,PR1
         2 000201   200032 756100                    STQ     PORT_KEY_VALUE+1,,AUTO

      332     4787    3                   VD$FILE_NODE.HEAD$;
      333     4788    3                 IF FOUND_NODE$ (%LVL_LOWER) = ADDR(NIL) THEN

   4788  2 000202   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000203   000207 601000 2                  TNZ     s:4791

      334     4789    3                    AT_EOF = %TRUE;       /* File is empty */

   4789  2 000204   400000 236003                    LDQ     -131072,DU
         2 000205   200023 756100                    STQ     AT_EOF,,AUTO
         2 000206   000531 710000 2                  TRA     s:4928

      335     4790    4                 ELSE DO;

      336     4791    4                    LEVEL = %(LVL_LOWER);

   4791  2 000207   000001 235007                    LDA     1,DL
         2 000210   200021 755100                    STA     LEVEL,,AUTO

      337     4792    5                    DO WHILE LEVEL <= READ_LEVEL

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:51   
   4792  2 000211   000235 710000 2                  TRA     s:4804

      338     4793    5                      AND FOUND_NODE$ (LEVEL - 1) ~= ADDR(NIL);
      339     4794    5                       FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL - 1) ->

   4794  2 000212   200021 720100                    LXL0    LEVEL,,AUTO
         2 000213   200030 470510                    LDP0    ABS_KEY$+1,X0,AUTO
         2 000214   000012 236100                    LDQ     10,,PR0
         2 000215   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      340     4795    5                         VD$FILE_NODE.HEAD$;
      341     4796    6                       DO WHILE FOUND_NODE$ (LEVEL) ~= ADDR(NIL)

   4796  2 000216   000223 710000 2                  TRA     s:4802

      342     4797    6                         AND NOT (FOUND_NODE$ (LEVEL) ->
      343     4798    6                         VD$FILE_NODE.ACCESS (%NAC_READ)
      344     4799    6                         OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ));
      345     4800    6                          FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL) ->

   4800  2 000217   200021 720100                    LXL0    LEVEL,,AUTO
         2 000220   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000221   000002 236100                    LDQ     2,,PR0
         2 000222   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      346     4801    6                            VD$FILE_NODE.FLINK$;
      347     4802    6                          END;

   4802  2 000223   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000224   000234 600000 2                  TZE     s:4803
         2 000225   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000226   000003 236100                    LDQ     3,,PR0
         2 000227   200000 316003                    CANQ    65536,DU
         2 000230   000234 601000 2                  TNZ     s:4803
         2 000231   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         2 000232   200000 316003                    CANQ    65536,DU
         2 000233   000217 600000 2                  TZE     s:4800
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:52   

      348     4803    5                       LEVEL = LEVEL + 1;

   4803  2 000234   200021 054100                    AOS     LEVEL,,AUTO

      349     4804    5                       END;

   4804  2 000235   200021 236100                    LDQ     LEVEL,,AUTO
         2 000236   200015 116100                    CMPQ    READ_LEVEL,,AUTO
         2 000237   000243 605400 2                  TPNZ    s:4805
         2 000240   200030 236106                    LDQ     ABS_KEY$+1,QL,AUTO
         2 000241   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000242   000212 601000 2                  TNZ     s:4794

      350     4805    4                    IF LEVEL <= READ_LEVEL THEN

   4805  2 000243   200021 236100                    LDQ     LEVEL,,AUTO
         2 000244   200015 116100                    CMPQ    READ_LEVEL,,AUTO
         2 000245   000531 605400 2                  TPNZ    s:4928

      351     4806    4                       EXISTS = %FALSE;    /* File not filled vertically */

   4806  2 000246   200013 450100                    STZ     EXISTS,,AUTO

      352     4807    4                    END;

      353     4808    3                 END REQUESTED_BOF;

   4808  2 000247   000531 710000 2                  TRA     s:4928

      354     4809    2              ELSE
      355     4810    3   REQUESTED_KEYED_POSITION: DO;

   4810  2 000250                       REQUESTED_K* null
      356     4811
      357     4812    3   GET_ABS_KEYS:
      358     4813    4                 DO LEVEL = %LVL_LOWER TO (STRUCTURE$NODE.COUNT# - 1);
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:53   

   4813  2 000250   000001 235007       GET_ABS_KEYS LDA     1,DL
         2 000251   200021 755100                    STA     LEVEL,,AUTO
         2 000252   000307 710000 2                  TRA     s:4831+1

      359     4814    5                    IF ABSOLUTE.KEY (LEVEL - 1) = %CLEAR THEN DO;

   4814  2 000253   200021 235100                    LDA     LEVEL,,AUTO
         2 000254   000003 735000                    ALS     3
         2 000255   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         2 000256   000000 106505                    CMPC    fill='000'O
         2 000257   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8
         2 000260   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000261   000266 601000 2                  TNZ     s:4827

      360     4815    5                       READ_LEVEL = LEVEL - 1;  /* Last lvl with keys */

   4815  2 000262   200021 236100                    LDQ     LEVEL,,AUTO
         2 000263   000001 136007                    SBLQ    1,DL
         2 000264   200015 756100                    STQ     READ_LEVEL,,AUTO

      361     4816    5                       EXIT GET_ABS_KEYS;

   4816  2 000265   000313 710000 2                  TRA     s:4833

      362     4817    5                       END;
      363     4818    5                    ELSE DO;

      364     4819                            %GETKEY (KEY=ABSOLUTE.KEY, INDX=LEVEL-1,
      365     4820                            PTR="ABS_KEY$ (LEVEL)");

   4827  2 000266   200021 236100                    LDQ     LEVEL,,AUTO
         2 000267   000001 736000                    QLS     1
         2 000270   077776 720106                    LXL0    -2,QL,PR0
         2 000271   000002 100003                    CMPX0   2,DU
         2 000272   000300 601000 2                  TNZ     s:4827+10

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:54   
   4827  2 000273   077777 471506                    LDP1    -1,QL,PR0
         2 000274   100002 633500                    EPPR3   2,,PR1
         2 000275   200021 721100                    LXL1    LEVEL,,AUTO
         2 000276   200024 453511                    STP3    ABS_KEY$,X1,AUTO
         2 000277   000306 710000 2                  TRA     s:4831

   4827  2 000300   200021 236100                    LDQ     LEVEL,,AUTO
         2 000301   000023 736000                    QLS     19
         2 000302   000001 136003                    SBLQ    1,DU
         2 000303   200004 036100                    ADLQ    @ABSOLUTE,,AUTO
         2 000304   200021 720100                    LXL0    LEVEL,,AUTO
         2 000305   200024 756110                    STQ     ABS_KEY$,X0,AUTO

      366     4830    5                       END;

      367     4831    4                    END GET_ABS_KEYS;

   4831  2 000306   200021 054100                    AOS     LEVEL,,AUTO
         2 000307   200011 471500                    LDP1    STRUCTURE_NODE$,,AUTO
         2 000310   200021 236100                    LDQ     LEVEL,,AUTO
         2 000311   100014 116100                    CMPQ    12,,PR1
         2 000312   000253 604000 2                  TMI     s:4814

      368     4832
      369     4833    3                 IF FOUND_NODE$ (%LVL_FILE) -> VD$FILE_NODE.HEAD$ =

   4833  2 000313   200031 471500                    LDP1    FOUND_NODE$,,AUTO
         2 000314   100012 236100                    LDQ     10,,PR1
         2 000315   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000316   000321 601000 2                  TNZ     EACH_LEVEL

      370     4834    3                   ADDR(NIL) THEN
      371     4835    3                    AT_EOF = %TRUE;    /* File is empty */

   4835  2 000317   400000 236003                    LDQ     -131072,DU
         2 000320   200023 756100                    STQ     AT_EOF,,AUTO

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:55   
      372     4836
      373     4837    3   EACH_LEVEL:
      374     4838    4                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;

   4838  2 000321   000001 235007       EACH_LEVEL   LDA     1,DL
         2 000322   200021 755100                    STA     LEVEL,,AUTO
         2 000323   000506 710000 2                  TRA     s:4906+1

      375     4839    5                    IF FOUND_NODE$ (LEVEL - 1) = ADDR(NIL) THEN DO;

   4839  2 000324   200021 720100                    LXL0    LEVEL,,AUTO
         2 000325   200030 236110                    LDQ     ABS_KEY$+1,X0,AUTO
         2 000326   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000327   000332 601000 2                  TNZ     s:4843

      376     4840    5                       EXISTS = %FALSE; /* ABSOLUTE doesn't exist */

   4840  2 000330   200013 450100                    STZ     EXISTS,,AUTO

      377     4841    5                       EXIT EACH_LEVEL;

   4841  2 000331   000511 710000 2                  TRA     s:4907

      378     4842    5                       END;
      379     4843    4                    CAND_NODE$ = FOUND_NODE$ (LEVEL - 1) ->

   4843  2 000332   200030 470510                    LDP0    ABS_KEY$+1,X0,AUTO
         2 000333   000012 236100                    LDQ     10,,PR0
         2 000334   200037 756100                    STQ     CAND_NODE$,,AUTO

      380     4844    4                      VD$FILE_NODE.HEAD$;
      381     4845    4                    IF PORT.CURRENT.KEY (LEVEL - 1) ~= %CLEAR

   4845  2 000335   200021 235100                    LDA     LEVEL,,AUTO
         2 000336   000003 735000                    ALS     3
         2 000337   200003 471500                    LDP1    @PORT,,AUTO
         2 000340   000000 106505                    CMPC    fill='000'O
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:56   
         2 000341   100010 000010                    ADSC9   8,A,PR1                  cn=0,n=8
         2 000342   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000343   000417 600000 2                  TZE     SEARCH_LEVEL
         2 000344   100022 236100                    LDQ     18,,PR1
         2 000345   400000 316007                    CANQ    -131072,DL
         2 000346   000417 601000 2                  TNZ     SEARCH_LEVEL
         2 000347   200037 236100                    LDQ     CAND_NODE$,,AUTO
         2 000350   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000351   000417 600000 2                  TZE     SEARCH_LEVEL

      382     4846    4                      AND NOT PORT.CURRENT.EOF
      383     4847    5                      AND CAND_NODE$ ~= ADDR(NIL) THEN DO;

      384     4848                            /*
      385     4849                            * See if Port is already at requested key; if
      386     4850                            * not, see if the requested key is after Port's
      387     4851                            * current position, and if so, start search
      388     4852                            * from Port's current position.
      389     4853                            */
      390     4854                            %GETKEY (KEY=PORT.CURRENT.KEY, INDX=LEVEL-1,
      391     4855                            PTR=CAND_KEY$);

   4862  2 000352   200021 235100                    LDA     LEVEL,,AUTO
         2 000353   000001 735000                    ALS     1
         2 000354   100010 721105                    LXL1    8,AL,PR1
         2 000355   000002 101003                    CMPX1   2,DU
         2 000356   000363 601000 2                  TNZ     s:4862+9

   4862  2 000357   100011 473505                    LDP3    9,AL,PR1
         2 000360   300002 634500                    EPPR4   2,,PR3
         2 000361   200036 454500                    STP4    CAND_KEY$,,AUTO
         2 000362   000370 710000 2                  TRA     s:4865

   4862  2 000363   200021 236100                    LDQ     LEVEL,,AUTO
         2 000364   000023 736000                    QLS     19
         2 000365   000011 036003                    ADLQ    9,DU
         2 000366   200003 036100                    ADLQ    @PORT,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:57   
         2 000367   200036 756100                    STQ     CAND_KEY$,,AUTO

      392     4865    5                       IF ABS_KEY$ (LEVEL) -> KEY.BYTES = CAND$KEY.BYTES THEN

   4865  2 000370   200024 473510                    LDP3    ABS_KEY$,X0,AUTO
         2 000371   300000 236100                    LDQ     0,,PR3
         2 000372   000033 772000                    QRL     27
         2 000373   200036 474500                    LDP4    CAND_KEY$,,AUTO
         2 000374   000000 622006                    EAX2    0,QL
         2 000375   400000 236100                    LDQ     0,,PR4
         2 000376   000033 772000                    QRL     27
         2 000377   000000 623006                    EAX3    0,QL
         2 000400   040140 106540                    CMPC    fill='040'O
         2 000401   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         2 000402   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         2 000403   000411 601000 2                  TNZ     s:4867

      393     4866    5                          FOUND_NODE$ (LEVEL) = PORT.LEVEL.INTERNAL$ (LEVEL);

   4866  2 000404   200021 236100                    LDQ     LEVEL,,AUTO
         2 000405   000007 402007                    MPY     7,DL
         2 000406   100031 236106                    LDQ     25,QL,PR1
         2 000407   200031 756110                    STQ     FOUND_NODE$,X0,AUTO
         2 000410   000417 710000 2                  TRA     SEARCH_LEVEL

      394     4867    5                       ELSE IF ABS_KEY$ (LEVEL) -> KEY.BYTES >

   4867  2 000411   000417 602000 2                  TNC     SEARCH_LEVEL
         2 000412   000417 600000 2                  TZE     SEARCH_LEVEL

      395     4868    5                            CAND$KEY.BYTES THEN
      396     4869    5                             CAND_NODE$ = PORT.LEVEL.INTERNAL$ (LEVEL);

   4869  2 000413   200021 236100                    LDQ     LEVEL,,AUTO
         2 000414   000007 402007                    MPY     7,DL
         2 000415   100031 236106                    LDQ     25,QL,PR1
         2 000416   200037 756100                    STQ     CAND_NODE$,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:58   

      397     4870    5                       END;

      398     4871
      399     4872    4   SEARCH_LEVEL:
      400     4873    5                    DO WHILE FOUND_NODE$ (LEVEL) = ADDR(NIL)

   4873  2 000417   000464 710000 2     SEARCH_LEVEL TRA     s:4899

      401     4874    5                      AND CAND_NODE$ ~= ADDR(NIL);
      402     4875                            %GETKEY (KEY=CAND$NODE.DESC.KEY, PTR=CAND_KEY$);

   4882  2 000420   200037 470500                    LDP0    CAND_NODE$,,AUTO
         2 000421   000004 720100                    LXL0    4,,PR0
         2 000422   000002 100003                    CMPX0   2,DU
         2 000423   000430 601000 2                  TNZ     s:4882+8

   4882  2 000424   000005 471500                    LDP1    5,,PR0
         2 000425   100002 633500                    EPPR3   2,,PR1
         2 000426   200036 453500                    STP3    CAND_KEY$,,AUTO
         2 000427   000433 710000 2                  TRA     s:4885

   4882  2 000430   200037 236100                    LDQ     CAND_NODE$,,AUTO
         2 000431   000005 036003                    ADLQ    5,DU
         2 000432   200036 756100                    STQ     CAND_KEY$,,AUTO

      403     4885    5                       IF CAND$KEY.BYTES =

   4885  2 000433   200036 471500                    LDP1    CAND_KEY$,,AUTO
         2 000434   100000 236100                    LDQ     0,,PR1
         2 000435   000033 772000                    QRL     27
         2 000436   200021 721100                    LXL1    LEVEL,,AUTO
         2 000437   200024 473511                    LDP3    ABS_KEY$,X1,AUTO
         2 000440   000000 622006                    EAX2    0,QL
         2 000441   300000 236100                    LDQ     0,,PR3
         2 000442   000033 772000                    QRL     27
         2 000443   000000 623006                    EAX3    0,QL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:59   
         2 000444   040140 106540                    CMPC    fill='040'O
         2 000445   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         2 000446   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         2 000447   000453 601000 2                  TNZ     s:4889

      404     4886    6                         ABS_KEY$ (LEVEL) -> KEY.BYTES THEN DO;

      405     4887    6                          FOUND_NODE$ (LEVEL) = CAND_NODE$;

   4887  2 000450   200037 236100                    LDQ     CAND_NODE$,,AUTO
         2 000451   200031 756111                    STQ     FOUND_NODE$,X1,AUTO

      406     4888    6                          END;

   4888  2 000452   000464 710000 2                  TRA     s:4899

      407     4889    5                       ELSE IF CAND$KEY.BYTES >

   4889  2 000453   000461 602000 2                  TNC     s:4896
         2 000454   000461 600000 2                  TZE     s:4896

      408     4890    6                            ABS_KEY$ (LEVEL) -> KEY.BYTES THEN DO;

      409     4891    6                             FOUND_NODE$ (LEVEL) = CAND_NODE$;

   4891  2 000455   200037 236100                    LDQ     CAND_NODE$,,AUTO
         2 000456   200031 756111                    STQ     FOUND_NODE$,X1,AUTO

      410     4892    6                             EXISTS = %FALSE; /* ABSOLUTE doesn't exist */

   4892  2 000457   200013 450100                    STZ     EXISTS,,AUTO

      411     4893    6                             EXIT EACH_LEVEL;

   4893  2 000460   000511 710000 2                  TRA     s:4907

      412     4894    6                             END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:60   
      413     4895    6                          ELSE DO;

      414     4896    6                             CAND_NODE$ = CAND$NODE.FLINK$;

   4896  2 000461   000002 236100                    LDQ     2,,PR0
         2 000462   200037 756100                    STQ     CAND_NODE$,,AUTO

      415     4897    6                             COUNT = COUNT + 1;

   4897  2 000463   200014 054100                    AOS     COUNT,,AUTO

      416     4898    6                             END;

      417     4899    5                       END SEARCH_LEVEL;

   4899  2 000464   200021 720100                    LXL0    LEVEL,,AUTO
         2 000465   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000466   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000467   000473 601000 2                  TNZ     s:4901
         2 000470   200037 236100                    LDQ     CAND_NODE$,,AUTO
         2 000471   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000472   000420 601000 2                  TNZ     s:4882

      418     4900
      419     4901    5                    IF FOUND_NODE$ (LEVEL) = ADDR(NIL) THEN DO;

   4901  2 000473   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000474   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000475   000505 601000 2                  TNZ     s:4906

      420     4902    5                       EXISTS = %FALSE; /* Ran off end of level */

   4902  2 000476   200013 450100                    STZ     EXISTS,,AUTO

      421     4903    5                       IF LEVEL = %LVL_LOWER THEN AT_EOF = %TRUE;

   4903  2 000477   200021 235100                    LDA     LEVEL,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:61   
         2 000500   000001 115007                    CMPA    1,DL
         2 000501   000504 601000 2                  TNZ     s:4904

   4903  2 000502   400000 236003                    LDQ     -131072,DU
         2 000503   200023 756100                    STQ     AT_EOF,,AUTO

      422     4904    5                       EXIT EACH_LEVEL;

   4904  2 000504   000511 710000 2                  TRA     s:4907

      423     4905    5                       END;
      424     4906    4                    END EACH_LEVEL;

   4906  2 000505   200021 054100                    AOS     LEVEL,,AUTO
         2 000506   200021 236100                    LDQ     LEVEL,,AUTO
         2 000507   200015 116100                    CMPQ    READ_LEVEL,,AUTO
         2 000510   000324 604400 2                  TMOZ    s:4839

      425     4907    3                 IF REL = 0 AND FOUND_NODE$ (LEVEL) ~= ADDR(NIL) THEN

   4907  2 000511   200022 235100                    LDA     REL,,AUTO
         2 000512   000531 601000 2                  TNZ     s:4928
         2 000513   200021 720100                    LXL0    LEVEL,,AUTO
         2 000514   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000515   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000516   000531 600000 2                  TZE     s:4928

      426     4908    3                    IF NOT (FOUND_NODE$ (LEVEL) -> VD$FILE_NODE.ACCESS (%NAC_READ)

   4908  2 000517   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000520   000003 236100                    LDQ     3,,PR0
         2 000521   200000 316003                    CANQ    65536,DU
         2 000522   000531 601000 2                  TNZ     s:4928
         2 000523   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         2 000524   200000 316003                    CANQ    65536,DU
         2 000525   000531 601000 2                  TNZ     s:4928

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:62   
      427     4909    4                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ)) THEN DO;

      428     4910    4                       REL = 1; /* Skip to the first accessible one */

   4910  2 000526   000001 235007                    LDA     1,DL
         2 000527   200022 755100                    STA     REL,,AUTO

      429     4911    4                       EXISTS = %FALSE;

   4911  2 000530   200013 450100                    STZ     EXISTS,,AUTO

      430     4912    4                       END;

      431     4913    3                 END REQUESTED_KEYED_POSITION;

      432     4914
      433     4915                /*
      434     4916                *   At this point, we've found any absolute location requested.
      435     4917                *   Either:
      436     4918                *       AT_EOF = on and FOUND_NODE$ (%LVL_LOWER) thru (READ_LEVEL)
      437     4919                *           = ADDR(NIL);
      438     4920                *   or  AT_EOF = off and FOUND_NODE$ (%LVL_LOWER) thru (READ_LEVEL)
      439     4921                *           point to VD$FILE_NODEs for the absolute position
      440     4922                *           requested.  EXISTS indicates if the exact
      441     4923                *           node requested was found or not:  if EXISTS = %FALSE,
      442     4924                *           some or all of FOUND_NODE$ (%LVL_LOWER) thru
      443     4925                *           (READ_LEVEL) may be NIL.
      444     4926                */
      445     4927
      446     4928    2           IF REL ~= 0 AND FOUND_NODE$ (READ_LEVEL - 1) ~= ADDR(NIL) THEN

   4928  2 000531   200022 235100                    LDA     REL,,AUTO
         2 000532   000643 600000 2                  TZE     s:4979
         2 000533   200015 720100                    LXL0    READ_LEVEL,,AUTO
         2 000534   200030 236110                    LDQ     ABS_KEY$+1,X0,AUTO
         2 000535   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000536   000643 600000 2                  TZE     s:4979
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:63   

      447     4929    3   MOVING: DO;

   4929  2 000537                       MOVING       null
      448     4930    4              IF REL < 0 AND AT_EOF THEN DO;

   4930  2 000537   000000 115003                    CMPA    0,DU
         2 000540   000560 605000 2                  TPL     s:4941
         2 000541   200023 234100                    SZN     AT_EOF,,AUTO
         2 000542   000560 605000 2                  TPL     s:4941

      449     4931                      /* First backward move from EOF is special case */
      450     4932    5                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;

   4932  2 000543   000001 235007                    LDA     1,DL
         2 000544   200021 755100                    STA     LEVEL,,AUTO
         2 000545   000555 710000 2                  TRA     s:4937+1

      451     4933    5                    FOUND_NODE$ (LEVEL) = FOUND_NODE$ (LEVEL - 1) ->

   4933  2 000546   200021 720100                    LXL0    LEVEL,,AUTO
         2 000547   200030 470510                    LDP0    ABS_KEY$+1,X0,AUTO
         2 000550   000013 236100                    LDQ     11,,PR0
         2 000551   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      452     4934    5                      VD$FILE_NODE.TAIL$;
      453     4935    5                    IF FOUND_NODE$ (LEVEL) = ADDR(NIL) THEN

   4935  2 000552   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000553   000643 600000 2                  TZE     s:4979

      454     4936    5                       EXIT MOVING;   /* File is empty */
      455     4937    5                    END;

   4937  2 000554   200021 054100                    AOS     LEVEL,,AUTO
         2 000555   200021 236100                    LDQ     LEVEL,,AUTO
         2 000556   200015 116100                    CMPQ    READ_LEVEL,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:64   
         2 000557   000546 604400 2                  TMOZ    s:4933

      456     4938    4                 END;

      457     4939    4              DO UNTIL REL = 0;

      458     4940                      /* Skip over nodes user isn't allowed to read */
      459     4941    5                 IF FOUND_NODE$ (READ_LEVEL) ~= ADDR(NIL) THEN DO;

   4941  2 000560   200015 720100                    LXL0    READ_LEVEL,,AUTO
         2 000561   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000562   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000563   000625 600000 2                  TZE     s:4960

      460     4942    6                    DO UNTIL FOUND_NODE$ (READ_LEVEL) = ADDR(NIL)

      461     4943    6                      OR FOUND_NODE$ (READ_LEVEL) ->
      462     4944    6                      VD$FILE_NODE.ACCESS (%NAC_READ)
      463     4945    6                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_READ);
      464     4946    6                       IF REL < 0 THEN

   4946  2 000564   200022 235100                    LDA     REL,,AUTO
         2 000565   000577 605000 2                  TPL     s:4950

      465     4947    6                          IF AT_EOF THEN AT_EOF = %FALSE;

   4947  2 000566   200023 234100                    SZN     AT_EOF,,AUTO
         2 000567   000572 605000 2                  TPL     s:4948

   4947  2 000570   200023 450100                    STZ     AT_EOF,,AUTO
         2 000571   000603 710000 2                  TRA     s:4952

      466     4948    6                          ELSE FOUND_NODE$ (READ_LEVEL) = FOUND_NODE$ (READ_LEVEL)

   4948  2 000572   200015 720100                    LXL0    READ_LEVEL,,AUTO
         2 000573   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000574   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:65   
         2 000575   200031 756110                    STQ     FOUND_NODE$,X0,AUTO
         2 000576   000603 710000 2                  TRA     s:4952

      467     4949    6                               -> VD$FILE_NODE.BLINK$;
      468     4950    6                       ELSE FOUND_NODE$ (READ_LEVEL) = FOUND_NODE$ (READ_LEVEL)

   4950  2 000577   200015 720100                    LXL0    READ_LEVEL,,AUTO
         2 000600   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000601   000002 236100                    LDQ     2,,PR0
         2 000602   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      469     4951    6                            -> VD$FILE_NODE.FLINK$;
      470     4952    6                       END;

   4952  2 000603   200015 720100                    LXL0    READ_LEVEL,,AUTO
         2 000604   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000605   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000606   000616 600000 2                  TZE     s:4953
         2 000607   200031 470510                    LDP0    FOUND_NODE$,X0,AUTO
         2 000610   000003 236100                    LDQ     3,,PR0
         2 000611   200000 316003                    CANQ    65536,DU
         2 000612   000616 601000 2                  TNZ     s:4953
         2 000613   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         2 000614   200000 316003                    CANQ    65536,DU
         2 000615   000564 600000 2                  TZE     s:4946

      471     4953    5                    IF REL < 0 THEN REL = REL + 1;

   4953  2 000616   000000 115003                    CMPA    0,DU
         2 000617   000622 605000 2                  TPL     s:4956

   4953  2 000620   200022 054100                    AOS     REL,,AUTO
         2 000621   000625 710000 2                  TRA     s:4960

      472     4954                         /* Don't count nodes when moving backward */
      473     4955    6                    ELSE DO;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:66   
      474     4956    6                       REL = REL - 1;

   4956  2 000622   000001 336007                    LCQ     1,DL
         2 000623   200022 056100                    ASQ     REL,,AUTO

      475     4957    6                       COUNT = COUNT + 1;

   4957  2 000624   200014 054100                    AOS     COUNT,,AUTO

      476     4958    6                       END;

      477     4959    5                    END;

      478     4960    4                 IF FOUND_NODE$ (READ_LEVEL) = ADDR(NIL) THEN

   4960  2 000625   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000626   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000627   000641 601000 2                  TNZ     s:4971

      479     4961    5                    IF REL < 0 THEN DO;

   4961  2 000630   200022 235100                    LDA     REL,,AUTO
         2 000631   000636 605000 2                  TPL     s:4968

      480     4962                         /* At BOF:  refill READ_LEVEL pointer and exit */
      481     4963    5                       FOUND_NODE$ (READ_LEVEL) =

   4963  2 000632   200030 470510                    LDP0    ABS_KEY$+1,X0,AUTO
         2 000633   000012 236100                    LDQ     10,,PR0
         2 000634   200031 756110                    STQ     FOUND_NODE$,X0,AUTO

      482     4964    5                         FOUND_NODE$ (READ_LEVEL - 1) -> VD$FILE_NODE.HEAD$;
      483     4965    5                       EXIT MOVING;

   4965  2 000635   000643 710000 2                  TRA     s:4979

      484     4966    5                       END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:67   
      485     4967    5                    ELSE DO;

      486     4968    5                       AT_EOF = %TRUE;

   4968  2 000636   400000 236003                    LDQ     -131072,DU
         2 000637   200023 756100                    STQ     AT_EOF,,AUTO

      487     4969    5                       EXIT MOVING;

   4969  2 000640   000643 710000 2                  TRA     s:4979

      488     4970    5                       END;
      489     4971    4                 END;

   4971  2 000641   200022 235100                    LDA     REL,,AUTO
         2 000642   000560 601000 2                  TNZ     s:4941

      490     4972    3              END MOVING;

      491     4973
      492     4974                /*
      493     4975                *   Got requested location (as near as possible).
      494     4976                *   Load PORT.CURRENT with new location.
      495     4977                */
      496     4978
      497     4979    2           PORT_AT_REQ_LOC = %TRUE;

   4979  2 000643   400000 236003                    LDQ     -131072,DU
         2 000644   200040 756100                    STQ     PORT_AT_REQ_LOC,,AUTO

      498     4980    3           IF AT_EOF THEN DO;

   4980  2 000645   200023 234100                    SZN     AT_EOF,,AUTO
         2 000646   000655 605000 2                  TPL     s:4985

      499     4981    3              IF NOT PORT.CURRENT.EOF THEN

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:68   
   4981  2 000647   200003 470500                    LDP0    @PORT,,AUTO
         2 000650   000022 236100                    LDQ     18,,PR0
         2 000651   400000 316007                    CANQ    -131072,DL
         2 000652   000703 601000 2                  TNZ     s:4997

      500     4982    3                 PORT_AT_REQ_LOC = %FALSE;

   4982  2 000653   200040 450100                    STZ     PORT_AT_REQ_LOC,,AUTO

      501     4983    3              END;

   4983  2 000654   000703 710000 2                  TRA     s:4997

      502     4984    3           ELSE DO;

      503     4985    3              IF PORT.CURRENT.EOF THEN

   4985  2 000655   200003 470500                    LDP0    @PORT,,AUTO
         2 000656   000022 236100                    LDQ     18,,PR0
         2 000657   400000 316007                    CANQ    -131072,DL
         2 000660   000663 600000 2                  TZE     PORT_AT_REQ_LOC_TEST

      504     4986    3                 PORT_AT_REQ_LOC = %FALSE;

   4986  2 000661   200040 450100                    STZ     PORT_AT_REQ_LOC,,AUTO
         2 000662   000703 710000 2                  TRA     s:4997

      505     4987    3              ELSE
      506     4988    3   PORT_AT_REQ_LOC_TEST:
      507     4989    4              DO LEVEL = %LVL_LOWER TO READ_LEVEL;

   4989  2 000663   000001 235007       PORT_AT_REQ* LDA     1,DL
         2 000664   200021 755100                    STA     LEVEL,,AUTO
         2 000665   000700 710000 2                  TRA     s:4994+1

      508     4990    5                 IF PORT.LEVEL.INTERNAL$ (LEVEL) ~= FOUND_NODE$ (LEVEL) THEN DO;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:69   
   4990  2 000666   200021 720100                    LXL0    LEVEL,,AUTO
         2 000667   200021 236100                    LDQ     LEVEL,,AUTO
         2 000670   000007 402007                    MPY     7,DL
         2 000671   200003 470500                    LDP0    @PORT,,AUTO
         2 000672   000031 236106                    LDQ     25,QL,PR0
         2 000673   200031 116110                    CMPQ    FOUND_NODE$,X0,AUTO
         2 000674   000677 600000 2                  TZE     s:4994

      509     4991    5                    PORT_AT_REQ_LOC = %FALSE;

   4991  2 000675   200040 450100                    STZ     PORT_AT_REQ_LOC,,AUTO

      510     4992    5                    EXIT PORT_AT_REQ_LOC_TEST;

   4992  2 000676   000703 710000 2                  TRA     s:4997

      511     4993    5                    END;
      512     4994    4                 END PORT_AT_REQ_LOC_TEST;

   4994  2 000677   200021 054100                    AOS     LEVEL,,AUTO
         2 000700   200021 236100                    LDQ     LEVEL,,AUTO
         2 000701   200015 116100                    CMPQ    READ_LEVEL,,AUTO
         2 000702   000666 604400 2                  TMOZ    s:4990

      513     4995    3              END;

      514     4996
      515     4997    2           IF NOT PORT_AT_REQ_LOC THEN

   4997  2 000703   200040 234100                    SZN     PORT_AT_REQ_LOC,,AUTO
         2 000704   001037 604000 2                  TMI     s:5053

      516     4998    3   REPOSITION_PORT: DO;

   4998  2 000705                       REPOSITION_* null
      517     4999    3              CALL CLEAR_LEVEL_REGISTERS

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:70   
   4999  2 000705   002426 701000 2                  TSX1    CLEAR_LEVEL_REGISTERS
         2 000706   001044 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      518     5000    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      519     5001
      520     5002    3              IF AT_EOF THEN

   5002  2 000707   200023 234100                    SZN     AT_EOF,,AUTO
         2 000710   000715 605000 2                  TPL     s:5005

      521     5003    3                 PORT.CURRENT.EOF = %TRUE;

   5003  2 000711   200003 470500                    LDP0    @PORT,,AUTO
         2 000712   400000 236007                    LDQ     -131072,DL
         2 000713   000022 256100                    ORSQ    18,,PR0
         2 000714   001037 710000 2                  TRA     s:5053

      522     5004    4              ELSE DO;

      523     5005    5                 DO LEVEL = %LVL_LOWER TO READ_LEVEL;

   5005  2 000715   000001 235007                    LDA     1,DL
         2 000716   200021 755100                    STA     LEVEL,,AUTO
         2 000717   001034 710000 2                  TRA     s:5049+1

      524     5006    5                    CAND_NODE$ = FOUND_NODE$ (LEVEL);

   5006  2 000720   200021 720100                    LXL0    LEVEL,,AUTO
         2 000721   200031 236110                    LDQ     FOUND_NODE$,X0,AUTO
         2 000722   200037 756100                    STQ     CAND_NODE$,,AUTO

      525     5007    5                    PORT.LEVEL.INTERNAL$ (LEVEL) = CAND_NODE$;

   5007  2 000723   200021 236100                    LDQ     LEVEL,,AUTO
         2 000724   000007 402007                    MPY     7,DL
         2 000725   000000 621006                    EAX1    0,QL
         2 000726   200037 236100                    LDQ     CAND_NODE$,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:71   
         2 000727   200003 470500                    LDP0    @PORT,,AUTO
         2 000730   000031 756111                    STQ     25,X1,PR0

      526     5008    6                    IF CAND_NODE$ ~= ADDR(NIL) THEN DO;

   5008  2 000731   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000732   001033 600000 2                  TZE     s:5049

      527     5009                            %COPYKEY (FKEY=CAND$NODE.DESC.KEY,
      528     5010                            TKEY=PORT.CURRENT.KEY, TINDX=LEVEL-1);

   5023  2 000733   200021 235100                    LDA     LEVEL,,AUTO
         2 000734   000001 735000                    ALS     1
         2 000735   000002 735000                    ALS     2
         2 000736   200037 471500                    LDP1    CAND_NODE$,,AUTO
         2 000737   000105 100500                    MLR     fill='000'O
         2 000740   100004 000010                    ADSC9   4,,PR1                   cn=0,n=8
         2 000741   000010 000010                    ADSC9   8,A,PR0                  cn=0,n=8

   5023  2 000742   100004 722100                    LXL2    4,,PR1
         2 000743   000002 102003                    CMPX2   2,DU
         2 000744   000763 601000 2                  TNZ     s:5040

   5023  2 000745   100005 473500                    LDP3    5,,PR1
         2 000746   200021 236100                    LDQ     LEVEL,,AUTO
         2 000747   000023 736000                    QLS     19
         2 000750   000011 036003                    ADLQ    9,DU
         2 000751   200003 036100                    ADLQ    @PORT,,AUTO
         2 000752   200103 756100                    STQ     LEVEL+2,,AUTO
         2 000753   200102 453500                    STP3    LEVEL+1,,AUTO
         2 000754   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 000755   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000756   000000 701000 xent               TSX1    VDG$OCOPY
         2 000757   000761 702000 2                  TSX2    s:5024
         2 000760   000763 710000 2                  TRA     s:5040

   5024  2 000761   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:72   
         2 000762   000000 702211                    TSX2  ! 0,X1

      529     5026                            %COPYSPEC (FSPEC=CAND$NODE.DESC.SPEC,
      530     5027                            TSPEC=PORT.LEVEL.SPEC, TINDX=LEVEL);

   5040  2 000763   200021 236100                    LDQ     LEVEL,,AUTO
         2 000764   000007 402007                    MPY     7,DL
         2 000765   000002 736000                    QLS     2
         2 000766   200037 470500                    LDP0    CAND_NODE$,,AUTO
         2 000767   200003 471500                    LDP1    @PORT,,AUTO
         2 000770   000106 100500                    MLR     fill='000'O
         2 000771   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         2 000772   100025 000010                    ADSC9   21,Q,PR1                 cn=0,n=8

   5040  2 000773   000006 720100                    LXL0    6,,PR0
         2 000774   000002 100003                    CMPX0   2,DU
         2 000775   001014 601000 2                  TNZ     s:5043

   5040  2 000776   000007 473500                    LDP3    7,,PR0
         2 000777   200021 236100                    LDQ     LEVEL,,AUTO
         2 001000   000007 402003                    MPY     7,DU
         2 001001   000026 036003                    ADLQ    22,DU
         2 001002   200003 036100                    ADLQ    @PORT,,AUTO
         2 001003   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001004   200102 453500                    STP3    LEVEL+1,,AUTO
         2 001005   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001007   000000 701000 xent               TSX1    VDG$OCOPY
         2 001010   001012 702000 2                  TSX2    s:5041
         2 001011   001014 710000 2                  TRA     s:5043

   5041  2 001012   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 001013   000000 702211                    TSX2  ! 0,X1

      531     5043    7                       IF CAND$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;

   5043  2 001014   200037 470500                    LDP0    CAND_NODE$,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:73   
         2 001015   000010 236100                    LDQ     8,,PR0
         2 001016   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001017   001033 600000 2                  TZE     s:5049

      532     5044    7                          CALL VDG$OCOPY (CAND$NODE.DESC.DATA$->VD$BUFFER,

   5044  2 001020   000010 471500                    LDP1    8,,PR0
         2 001021   200021 236100                    LDQ     LEVEL,,AUTO
         2 001022   000007 402003                    MPY     7,DU
         2 001023   000027 036003                    ADLQ    23,DU
         2 001024   200003 036100                    ADLQ    @PORT,,AUTO
         2 001025   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001026   200102 451500                    STP1    LEVEL+1,,AUTO
         2 001027   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001030   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001031   000000 701000 xent               TSX1    VDG$OCOPY
         2 001032   001044 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      533     5045    7                            PORT.LEVEL.DATA$ (LEVEL))
      534     5046    7                            ALTRET (OCOPY_FAILED);
      535     5047    7                          END;

      536     5048    6                       END;

      537     5049    5                    END;

   5049  2 001033   200021 054100                    AOS     LEVEL,,AUTO
         2 001034   200021 236100                    LDQ     LEVEL,,AUTO
         2 001035   200015 116100                    CMPQ    READ_LEVEL,,AUTO
         2 001036   000720 604400 2                  TMOZ    s:5006

      538     5050    4                 END;

      539     5051    3              END REPOSITION_PORT;

      540     5052
      541     5053    2           PORT.LAST_OP# = %ACCOP_LOCATION;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:74   

   5053  2 001037   000002 220003                    LDX0    2,DU
         2 001040   200003 470500                    LDP0    @PORT,,AUTO
         2 001041   000007 740100                    STX0    7,,PR0

      542     5054
      543     5055    2           RETURN;

   5055  2 001042   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 001043   000001 702211                    TSX2  ! 1,X1

   5053  2 001044                       CLEAR_LEVEL* null
   5053  2 001044                       OCOPY_FAILED null
      544     5056
      545     5057
      546     5058
      547     5059    2   CLEAR_LEVEL_REGISTERS_FAILED: ;
      548     5060    2   OCOPY_FAILED: ;
      549     5061    2           ALTRETURN;

   5061  2 001044   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 001045   000000 702211                    TSX2  ! 0,X1

      550     5062
      551     5063    2   END READ_INTERNAL;
      552     5064
      553     5065                %BOX (TITLE=READ_EXTERNAL, PAGE=YES);
              5073    2
              5077    2   /***************************************************************************
              5079    2    *                                                                         *
              5083    2            *                               READ_EXTERNAL                            *
              5085    2            *                                                                        *
              5087    2          ***************************************************************************/

      554     5091
      555     5092        /*I* NAME: READ_EXTERNAL
      556     5093            INPUT:
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:75   
      557     5094                PORT - VD$PORT to use; this Port must currently be
      558     5095                    open to an external file.  The accessor Structure to
      559     5096                    apply to this file must be the "External" structure.
      560     5097                ABSOLUTE - Same as for main routine.
      561     5098                                 -  NOTE  -
      562     5099                    Since this is an external file, and external files
      563     5100                    always have a two-level structure, READ_EXTERNAL
      564     5101                    is optimized to assume that "n"=%LVL_EXT_REC; therefore,
      565     5102                    only ABSOLUTE.KEY$(%(LVL_EXT_REC-1)) should contain a key.
      566     5103                RELATIVE - Same as for main routine.
      567     5104                READ - BIT(1) ALIGNED flag telling whether to read the requested
      568     5105                    record or not.
      569     5106            SCRATCH:
      570     5107                VD_STATIC_TEMP
      571     5108            OUTPUT:
      572     5109                If no I/O errors:
      573     5110                EXISTS will be set true if we found a node to satisfy
      574     5111                    the positioning request; false otherwise.  Will be set
      575     5112                    false only when RELATIVE=0 and the absolute node
      576     5113                    requested doesn't exist in the file.  (Note that
      577     5114                    EOF is an existing node.)
      578     5115                PORT.CURRENT will contain either a record key or EOF, indicating
      579     5116                    the new position of the Port.
      580     5117                PORT.LEVELs will be set:  if PORT.CURRENT isn't EOF, then
      581     5118                    PORT.LEVEL (%LVL_EXT_REC) will contain the record (Spec
      582     5119                    and Data components).
      583     5120                If we get a (possibly) recoverable I/O error:
      584     5121                    EXISTS will be %FALSE.
      585     5122                    PORT.CURRENT will be set from whatever
      586     5123                        the monitor returns to us on a KEYR call.  If the
      587     5124                        error isn't on a KEYR call, .CURRENT will be
      588     5125                        %CLEAR.
      589     5126                    The PORT.LEVELs won't contain any record Spec or Data.
      590     5127            DESCRIPTION:
      591     5128                The goal of this routine is to:
      592     5129                    o Not do any monitor calls at all, if we can avoid it.
      593     5130                    o If we must do monitor calls, try not to do any
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:76   
      594     5131                        M$PRECORDs, just M$READ.
      595     5132                    o If we must do monitor calls, try not to do any
      596     5133                        keyed M$PRECORDs or M$READs, just sequential ones.
      597     5134                        Unkeyed monitor calls don't have to search the file's
      598     5135                        key structure, may save on I/O's, and are usually faster.
      599     5136
      600     5137                The following table summarizes the optimal monitor calls to
      601     5138                make, based on the request and the DCB's current position
      602     5139                (as indicated by PORT.CURRENT (%(LVL_EXT_REC-1))).
      603     5140
      604     5141                Note that we take into account the last operation done
      605     5142                on the Port (which is also the last operation done on the
      606     5143                DCB).  This is because the monitor acts differently on
      607     5144                KEYS-less M$PRECORDs and M$READs if the last operation
      608     5145                was an open or M$PRECORD (=%ACCOP_LOC), than otherwise.
      609     5146                Specifically, if the last operation wasn't open or M$PRECORD,
      610     5147                then the DCB is actually positioned one record beyond
      611     5148                the PORT.CURRENT record.
      612     5149
      613     5150                (Choices inside {}'s are for READ=TRUE and READ=FALSE.
      614     5151                Monitor calls inside []'s are for READ=TRUE.
      615     5152                "seq" means "sequential", ie, KEYS=NO.
      616     5153                "key" means KEYS=YES, KEY=the KEY.BYTES for
      617     5154                    ABSOLUTE.KEY (%(LVL_EXT_REC-1)).
      618     5155                "rel" means RELATIVE.)
      619     5156
      620     5157                               Current DCB location
      621     5158                            --------------------------
      622     5159                            @ EOF         not @ EOF
      623     5160                            ------------  ------------
      624     5161                Request
      625     5162                -------
      626     5163                BOF:        PFIL,BOF      PFIL,BOF
      627     5164                            {RD|PREC}seq  {RD|PREC}seq
      628     5165
      629     5166                BOF,rel:    PFIL,BOF      PFIL,BOF
      630     5167                            PRECrel       PRECrel
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:77   
      631     5168                            [RDseq]       [RDseq]
      632     5169
      633     5170                EOF:        (nothing)     PFIL
      634     5171
      635     5172                EOF,rel:                  PFIL
      636     5173                            PRECrel       PRECrel
      637     5174                            [RDseq]       [RDseq]
      638     5175
      639     5176                ====================================================
      640     5177
      641     5178                                      Current DCB location
      642     5179                            ----------------------------------------
      643     5180                            @ key,        @ key,        not @ key
      644     5181                            .LASTOP =     .LASTOP ~=
      645     5182                            %ACCOP_LOC    %ACCOP_LOC
      646     5183                            ----------    ----------    ------------
      647     5184                Request
      648     5185                -------
      649     5186                key:        [RDseq]       PREC-1        {RD|PREC}key
      650     5187                                          [RDseq]
      651     5188
      652     5189                key,rel:    PRECrel       PRECrel-1     PRECkey,rel
      653     5190                            [RDseq]       [RDseq]       [RDseq]
      654     5191
      655     5192
      656     5193                Procedure:
      657     5194                Do M$PFIL if necessary.
      658     5195                Determine who does KEYS=YES call:  M$PRECORD, M$READ, or
      659     5196                    nobody.
      660     5197                Determine if we should subtract 1 from RELATIVE, based on
      661     5198                    the last operation done on this DCB.
      662     5199                Do M$PRECORD, if necessary.
      663     5200                Return the record's key (or EOF) in PORT.CURRENT.
      664     5201                If READ is set and the record's Spec and Data
      665     5202                    components are not yet in the PORT.LEVELs:
      666     5203                    Do the keyed or sequential M$READ.
      667     5204                    Load the Spec and Data components of the record into the
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:78   
      668     5205                        PORT.LEVELs.
      669     5206        */
      670     5207
      671     5208    1   READ_EXTERNAL: PROC ALTRET;

   5208  2 001046   200020 741300       READ_EXTERN* STX1  ! VD_ERR$+1,,AUTO

      672     5209
      673     5210
      674     5211    2   DCL FORCE_PRECORD BIT(1) ALIGNED;
      675     5212    2   DCL FORCE_MONITOR_CALL BIT(1) ALIGNED;
      676     5213    2   DCL EXT_RECORD_CLEARED BIT(1) ALIGNED;
      677     5214    2   DCL PORT_ALREADY_AT_ABS_KEY BIT(1) ALIGNED;
      678     5215    2   DCL REL SBIN;
      679     5216    2   DCL ABS_BOF BIT(1) ALIGNED;
      680     5217    2   DCL ABS_KEY$ PTR;
      681     5218    2   DCL PORT_KEY$ PTR;
      682     5219    2   DCL PORT_KEY_VALUE UBIN;
      683     5220    2   DCL FIXED_KEY_LEN SBIN;
      684     5221    2   DCL PORT_DCB$ PTR;
      685     5222    2   DCL KEY_ VECTOR;    /* Destined for FPT_{PRECORD|READ}.KEY_ */
      686     5223    2   DCL NB_BUFFER SBIN;
      687     5224    2   DCL BUFFER$ PTR;
      688     5225    2   DCL REC_SPEC$ PTR;
      689     5226        %FPT_PFIL (STCLASS=AUTO);
      690     5241        %FPT_READ (STCLASS=AUTO);
      691     5280        %FPT_PRECORD (STCLASS=AUTO);
      692     5301        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
      693     5316
      694     5317
      695     5318        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      696     5341        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
      697     5364        %F$DCB (DCBN=PORT$DCB, STCLASS="BASED(PORT_DCB$)");
      698     5421        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
      699     5479        %VD$TEXTC (NAME=REC$SPEC, STCLASS="BASED(REC_SPEC$)");
      700     5502        %VD$TEXTC (NAME=STATIC$TEMP_TEXTC, STCLASS="BASED(STATIC_TEMP$)");
      701     5525    2   DCL 1 STATIC$TEMP_FIXED BASED(STATIC_TEMP$),
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:79   
      702     5526    2         2 BYTES CHAR(FIXED_KEY_LEN);
      703     5527    2   DCL STATIC$TEMP_NUM SBIN BASED(STATIC_TEMP$);
      704     5528        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      705     5531        %B$ALT;
      706     5539        %VD$TEXTC_REMOTE;
      707     5600        %VD$TEXTC_NUMBER;
      708     5614
      709     5615
      710     5616
      711     5617                %INCREMENT (INDX=%STG_ACC_PREADS);

   5618  2 001047   000117 054000 xsym               AOS     VD_6E+79

      712     5620    3           IF READ THEN DO;

   5620  2 001050   200006 470500                    LDP0    @READ,,AUTO
         2 001051   000000 234100                    SZN     0,,PR0
         2 001052   001054 605000 2                  TPL     s:5625

      713     5621                   %INCREMENT (INDX=%STG_ACC_PREAD_READS);

   5622  2 001053   000120 054000 xsym               AOS     VD_6E+80

      714     5624    3              END;

      715     5625    2           EXISTS = %TRUE;        /* Assume record exists */

   5625  2 001054   400000 236003                    LDQ     -131072,DU
         2 001055   200013 756100                    STQ     EXISTS,,AUTO

      716     5626    2           PORT_DCB$ = DCBADDR(PORT.DCB#);

   5626  2 001056   000000 471400 3                  LDP1    0
         2 001057   100000 473500                    LDP3    0,,PR1
         2 001060   200003 474500                    LDP4    @PORT,,AUTO
         2 001061   400004 720100                    LXL0    4,,PR4
         2 001062   300000 236110                    LDQ     0,X0,PR3
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:80   
         2 001063   200033 756100                    STQ     PORT_DCB$,,AUTO

      717     5627    2           FORCE_PRECORD = %FALSE;

   5627  2 001064   200021 450100                    STZ     FORCE_PRECORD,,AUTO

      718     5628    2           FORCE_MONITOR_CALL = %FALSE;

   5628  2 001065   200022 450100                    STZ     FORCE_MONITOR_CALL,,AUTO

      719     5629    2           EXT_RECORD_CLEARED = %FALSE;

   5629  2 001066   200023 450100                    STZ     EXT_RECORD_CLEARED,,AUTO

      720     5630    2           PORT_ALREADY_AT_ABS_KEY = %FALSE;

   5630  2 001067   200024 450100                    STZ     PORT_ALREADY_AT_ABS_KEY,,AUTO

      721     5631    2           REL = RELATIVE;     /* So we can change it */

   5631  2 001070   200005 475500                    LDP5    @RELATIVE,,AUTO
         2 001071   500000 235100                    LDA     0,,PR5
         2 001072   200025 755100                    STA     REL,,AUTO

      722     5632
      723     5633    2           ABS_BOF = %FALSE;

   5633  2 001073   200026 450100                    STZ     ABS_BOF,,AUTO

      724     5634    2           ABS_KEY$ = ADDR(NIL);

   5634  2 001074   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001075   200027 756100                    STQ     ABS_KEY$,,AUTO

      725     5635    2           IF ABSOLUTE = %CLEAR THEN

   5635  2 001076   200004 476500                    LDP6    @ABSOLUTE,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:81   
         2 001077   000000 106500                    CMPC    fill='000'O
         2 001100   600000 000044                    ADSC9   0,,PR6                   cn=0,n=36
         2 001101   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 001102   001106 601000 2                  TNZ     s:5637

      726     5636    2              ABS_BOF = %TRUE;

   5636  2 001103   400000 236003                    LDQ     -131072,DU
         2 001104   200026 756100                    STQ     ABS_BOF,,AUTO
         2 001105   001127 710000 2                  TRA     s:5652

      727     5637    2           ELSE IF NOT ABSOLUTE.EOF

   5637  2 001106   600010 236100                    LDQ     8,,PR6
         2 001107   400000 316007                    CANQ    -131072,DL
         2 001110   001127 601000 2                  TNZ     s:5652
         2 001111   000000 106500                    CMPC    fill='000'O
         2 001112   600000 000010                    ADSC9   0,,PR6                   cn=0,n=8
         2 001113   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 001114   001127 600000 2                  TZE     s:5652

      728     5638    3                AND ABSOLUTE.KEY (%(LVL_EXT_REC-1)) ~= %CLEAR THEN DO;

      729     5639                      %GETKEY (KEY=ABSOLUTE.KEY, INDX="%(LVL_EXT_REC-1)",
      730     5640                      PTR=ABS_KEY$);

   5647  2 001115   600000 722100                    LXL2    0,,PR6
         2 001116   000002 102003                    CMPX2   2,DU
         2 001117   001124 601000 2                  TNZ     s:5647+7

   5647  2 001120   600001 477500                    LDP7    1,,PR6
         2 001121   700002 630500                    EPPR0   2,,PR7
         2 001122   200027 450500                    STP0    ABS_KEY$,,AUTO
         2 001123   001127 710000 2                  TRA     s:5652

   5647  2 001124   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         2 001125   000001 036003                    ADLQ    1,DU
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:82   
         2 001126   200027 756100                    STQ     ABS_KEY$,,AUTO

      731     5650    3                 END;

      732     5651
      733     5652    2           PORT_KEY$ = ADDR(NIL);

   5652  2 001127   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001130   200030 756100                    STQ     PORT_KEY$,,AUTO

      734     5653    3           IF NOT PORT.CURRENT.EOF THEN DO;

   5653  2 001131   400022 236100                    LDQ     18,,PR4
         2 001132   400000 316007                    CANQ    -131072,DL
         2 001133   001146 601000 2                  TNZ     s:5674

      735     5654                   %GETKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1,
      736     5655                   PTR=PORT_KEY$);

   5662  2 001134   400012 722100                    LXL2    10,,PR4
         2 001135   000002 102003                    CMPX2   2,DU
         2 001136   001143 601000 2                  TNZ     s:5662+7

   5662  2 001137   400013 470500                    LDP0    11,,PR4
         2 001140   000002 637500                    EPPR7   2,,PR0
         2 001141   200030 457500                    STP7    PORT_KEY$,,AUTO
         2 001142   001146 710000 2                  TRA     s:5674

   5662  2 001143   200003 236100                    LDQ     @PORT,,AUTO
         2 001144   000013 036003                    ADLQ    11,DU
         2 001145   200030 756100                    STQ     PORT_KEY$,,AUTO

      737     5665    3              END;

      738     5666
      739     5667                /*
      740     5668                *   Copy CONSTANT copies of FPTs to auto storage.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:83   
      741     5669                *   The CONSTANT copies of the FPTs must have:
      742     5670                *       FPT_PRECORD:  KEYS=NO, KEYR=YES
      743     5671                *       FPT_READ:     KEYS=NO, KEYR=YES
      744     5672                */
      745     5673
      746     5674    2           FPT_PRECORD = CONST_PRECORD;

   5674  2 001146   000100 100400                    MLR     fill='000'O
         2 001147   000006 000050 1                  ADSC9   CONST_PRECORD            cn=0,n=40
         2 001150   200064 000050                    ADSC9   FPT_PRECORD,,AUTO        cn=0,n=40

      747     5675    2           FPT_PRECORD.V_ = VECTOR(FPT_PRECORD.V);

   5675  2 001151   000001 235000 3                  LDA     1
         2 001152   200102 452500                    STP2    LEVEL+1,,AUTO
         2 001153   200102 236100                    LDQ     LEVEL+1,,AUTO
         2 001154   000072 036003                    ADLQ    58,DU
         2 001155   200064 757100                    STAQ    FPT_PRECORD,,AUTO

      748     5676    2           FPT_PRECORD.V.DCB# = PORT.DCB#;

   5676  2 001156   400004 720100                    LXL0    4,,PR4
         2 001157   200072 740100                    STX0    FPT_PRECORD+6,,AUTO

      749     5677    2           FPT_READ = CONST_READ;

   5677  2 001160   000100 100400                    MLR     fill='000'O
         2 001161   000020 000070 1                  ADSC9   CONST_READ               cn=0,n=56
         2 001162   200046 000070                    ADSC9   FPT_READ,,AUTO           cn=0,n=56

      750     5678    2           FPT_READ.V_ = VECTOR(FPT_READ.V);

   5678  2 001163   000002 235000 3                  LDA     2
         2 001164   200102 452500                    STP2    LEVEL+1,,AUTO
         2 001165   200102 236100                    LDQ     LEVEL+1,,AUTO
         2 001166   000056 036003                    ADLQ    46,DU
         2 001167   200046 757100                    STAQ    FPT_READ,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:84   

      751     5679    2           FPT_READ.V.DCB# = PORT.DCB#;

   5679  2 001170   400004 722100                    LXL2    4,,PR4
         2 001171   200056 742100                    STX2    FPT_READ+8,,AUTO

      752     5680
      753     5681    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5681  2 001172   400032 223100                    LDX3    26,,PR4
         2 001173   000004 103003                    CMPX3   4,DU
         2 001174   001176 602013 2                  TNC     s:5681+4,X3
         2 001175   001262 710000 2                  TRA     s:5702
         2 001176   001262 710000 2                  TRA     s:5702
         2 001177   001202 710000 2                  TRA     s:5683
         2 001200   001244 710000 2                  TRA     s:5697
         2 001201   001247 710000 2                  TRA     s:5699

      754     5682    3            CASE (%ORG_CONSEC);

      755     5683    3              IF NOT ABS_BOF AND NOT ABSOLUTE.EOF

   5683  2 001202   200026 234100                    SZN     ABS_BOF,,AUTO
         2 001203   001240 604000 2                  TMI     s:5695
         2 001204   600010 236100                    LDQ     8,,PR6
         2 001205   400000 316007                    CANQ    -131072,DL
         2 001206   001240 601000 2                  TNZ     s:5695
         2 001207   200027 236100                    LDQ     ABS_KEY$,,AUTO
         2 001210   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001211   001240 600000 2                  TZE     s:5695

      756     5684    4                AND ABS_KEY$ ~= ADDR(NIL) THEN DO;

      757     5685                      /* For external CONSEC files, xlate ABSOLUTE.KEY to RELATIVE */
      758     5686    4                 IF PORT.CURRENT.EOF THEN

   5686  2 001212   400022 236100                    LDQ     18,,PR4
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:85   
         2 001213   400000 316007                    CANQ    -131072,DL
         2 001214   001222 600000 2                  TZE     s:5689

      759     5687    4                    PORT_KEY_VALUE = PORT$DCB.NRECS# + 1;

   5687  2 001215   200033 470500                    LDP0    PORT_DCB$,,AUTO
         2 001216   000042 235100                    LDA     34,,PR0
         2 001217   000001 035007                    ADLA    1,DL
         2 001220   200031 755100                    STA     PORT_KEY_VALUE,,AUTO
         2 001221   001226 710000 2                  TRA     s:5690

      760     5688    4                 ELSE
      761     5689    4                    PORT_KEY_VALUE = PORT_KEY$->VD$TEXTC_NUMBER.BYTES#;

   5689  2 001222   200030 470500                    LDP0    PORT_KEY$,,AUTO
         2 001223   000000 236100                    LDQ     0,,PR0
         2 001224   000032 376000 xsym               ANQ     B_VECTNIL+26
         2 001225   200031 756100                    STQ     PORT_KEY_VALUE,,AUTO

      762     5690    4                 REL = REL +

   5690  2 001226   200027 470500                    LDP0    ABS_KEY$,,AUTO
         2 001227   000000 236100                    LDQ     0,,PR0
         2 001230   000032 376000 xsym               ANQ     B_VECTNIL+26
         2 001231   200031 136100                    SBLQ    PORT_KEY_VALUE,,AUTO
         2 001232   200025 036100                    ADLQ    REL,,AUTO
         2 001233   200025 756100                    STQ     REL,,AUTO

      763     5691    4                   (ABS_KEY$->VD$TEXTC_NUMBER.BYTES# - PORT_KEY_VALUE);
      764     5692    4                 ABS_KEY$ = ADDR(NIL);

   5692  2 001234   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001235   200027 756100                    STQ     ABS_KEY$,,AUTO

      765     5693    4                 PORT_ALREADY_AT_ABS_KEY = %TRUE;

   5693  2 001236   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:86   
         2 001237   200024 756100                    STQ     PORT_ALREADY_AT_ABS_KEY,,AUTO

      766     5694    4                 END;

      767     5695    3              KEY_ = VECTOR(STATIC$TEMP_NUM);

   5695  2 001240   777640 235007                    LDA     -96,DL
         2 001241   000000 236000 1                  LDQ     STATIC_TEMP$
         2 001242   200034 757100                    STAQ    KEY_,,AUTO
         2 001243   001271 710000 2                  TRA     s:5705

      768     5696    3            CASE (%ORG_KEYED);

      769     5697    3              KEY_ = VECTOR(VD_STATIC_TEMP);

   5697  2 001244   000004 237000 3                  LDAQ    4
         2 001245   200034 757100                    STAQ    KEY_,,AUTO
         2 001246   001271 710000 2                  TRA     s:5705

      770     5698    3            CASE (%ORG_INDEXED);

      771     5699    3              FIXED_KEY_LEN = PORT$DCB.KEYL#;

   5699  2 001247   200033 470500                    LDP0    PORT_DCB$,,AUTO
         2 001250   000036 236100                    LDQ     30,,PR0
         2 001251   000011 772000                    QRL     9
         2 001252   000777 376007                    ANQ     511,DL
         2 001253   200032 756100                    STQ     FIXED_KEY_LEN,,AUTO

      772     5700    3              KEY_ = VECTOR(STATIC$TEMP_FIXED.BYTES);

   5700  2 001254   200032 235100                    LDA     FIXED_KEY_LEN,,AUTO
         2 001255   000020 735000                    ALS     16
         2 001256   000140 135007                    SBLA    96,DL
         2 001257   000000 236000 1                  LDQ     STATIC_TEMP$
         2 001260   200034 757100                    STAQ    KEY_,,AUTO
         2 001261   001271 710000 2                  TRA     s:5705
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:87   

      773     5701    3            CASE (ELSE);

      774     5702    3              CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5702  2 001262   200003 236100                    LDQ     @PORT,,AUTO
         2 001263   000032 036003                    ADLQ    26,DU
         2 001264   200102 756100                    STQ     LEVEL+1,,AUTO
         2 001265   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001266   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001267   000000 701000 xent               TSX1    VDG$ESCREECH
         2 001270   000000 011000                    NOP     0

      775     5703    3            END;

      776     5704
      777     5705    2           IF ABS_BOF

   5705  2 001271   200026 234100                    SZN     ABS_BOF,,AUTO
         2 001272   001303 604000 2                  TMI     DO_PFIL
         2 001273   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         2 001274   000010 236100                    LDQ     8,,PR0
         2 001275   400000 316007                    CANQ    -131072,DL
         2 001276   001371 600000 2                  TZE     s:5733
         2 001277   200003 471500                    LDP1    @PORT,,AUTO
         2 001300   100022 236100                    LDQ     18,,PR1
         2 001301   400000 316007                    CANQ    -131072,DL
         2 001302   001371 601000 2                  TNZ     s:5733

      778     5706    2             OR (ABSOLUTE.EOF AND NOT PORT.CURRENT.EOF) THEN
      779     5707    3   DO_PFIL: DO;

   5707  2 001303                       DO_PFIL      null
      780     5708    3              FPT_PFIL = CONST_PFIL;

   5708  2 001303   000100 100400                    MLR     fill='000'O
         2 001304   000002 000020 1                  ADSC9   CONST_PFIL               cn=0,n=16
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:88   
         2 001305   200042 000020                    ADSC9   FPT_PFIL,,AUTO           cn=0,n=16

      781     5709    3              FPT_PFIL.V_ = VECTOR(FPT_PFIL.V);

   5709  2 001306   000003 235000 3                  LDA     3
         2 001307   200102 452500                    STP2    LEVEL+1,,AUTO
         2 001310   200102 236100                    LDQ     LEVEL+1,,AUTO
         2 001311   000044 036003                    ADLQ    36,DU
         2 001312   200042 757100                    STAQ    FPT_PFIL,,AUTO

      782     5710    3              FPT_PFIL.V.DCB# = PORT.DCB#;

   5710  2 001313   200003 470500                    LDP0    @PORT,,AUTO
         2 001314   000004 720100                    LXL0    4,,PR0
         2 001315   200044 740100                    STX0    FPT_PFIL+2,,AUTO

      783     5711    3              FPT_PFIL.V.BOF# = ABS_BOF;

   5711  2 001316   200026 236100                    LDQ     ABS_BOF,,AUTO
         2 001317   000022 772000                    QRL     18
         2 001320   200044 676100                    ERQ     FPT_PFIL+2,,AUTO
         2 001321   400000 376007                    ANQ     -131072,DL
         2 001322   200044 656100                    ERSQ    FPT_PFIL+2,,AUTO

      784     5712    3              CALL CLEAR_LEVEL_REGISTERS

   5712  2 001323   002426 701000 2                  TSX1    CLEAR_LEVEL_REGISTERS
         2 001324   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      785     5713    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      786     5714    3              EXT_RECORD_CLEARED = %TRUE;

   5714  2 001325   400000 236003                    LDQ     -131072,DU
         2 001326   200023 756100                    STQ     EXT_RECORD_CLEARED,,AUTO

      787     5715    3              PORT.LAST_OP# = %ACCOP_LOCATION;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:89   
   5715  2 001327   000002 220003                    LDX0    2,DU
         2 001330   200003 470500                    LDP0    @PORT,,AUTO
         2 001331   000007 740100                    STX0    7,,PR0

      788     5716    3              IF VD_$$MON_ACC.V# > 10 THEN

   5716  2 001332   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001333   000012 115007                    CMPA    10,DL
         2 001334   001347 604400 2                  TMOZ    s:5719

      789     5717    3                 CALL VDG$MACC_PREAD_PFIL (FPT_PFIL.V.DCB#, FPT_PFIL.V.BOF#);

   5717  2 001335   200104 452500                    STP2    LEVEL+3,,AUTO
         2 001336   200104 236100                    LDQ     LEVEL+3,,AUTO
         2 001337   000006 036000 3                  ADLQ    6
         2 001340   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001341   200044 631500                    EPPR1   FPT_PFIL+2,,AUTO
         2 001342   200102 451500                    STP1    LEVEL+1,,AUTO
         2 001343   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001344   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001345   000000 701000 xent               TSX1    VDG$MACC_PREAD_PFIL
         2 001346   000000 011000                    NOP     0

      790     5718                   %INCREMENT (INDX=%STG_ACC_M$PFILS);

   5719  2 001347   000121 054000 xsym               AOS     VD_6E+81

      791     5721    3              CALL M$PFIL (FPT_PFIL)

   5721  2 001350   200042 630500                    EPPR0   FPT_PFIL,,AUTO
         2 001351   440004 713400                    CLIMB   alt,+16388
         2 001352   400000 401760                    pmme    nvectors=1
         2 001353   002353 702000 2                  TSX2    PFIL_FAILED

      792     5722    3                ALTRET (PFIL_FAILED);
      793     5723    3              PORT.CURRENT.EOF = ABSOLUTE.EOF;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:90   
   5723  2 001354   200003 470500                    LDP0    @PORT,,AUTO
         2 001355   200004 471500                    LDP1    @ABSOLUTE,,AUTO
         2 001356   100010 236100                    LDQ     8,,PR1
         2 001357   000022 676100                    ERQ     18,,PR0
         2 001360   400000 376007                    ANQ     -131072,DL
         2 001361   000022 656100                    ERSQ    18,,PR0

      794     5724    4              IF ABS_BOF AND NOT READ THEN DO;

   5724  2 001362   200026 234100                    SZN     ABS_BOF,,AUTO
         2 001363   001371 605000 2                  TPL     s:5733
         2 001364   200006 473500                    LDP3    @READ,,AUTO
         2 001365   300000 234100                    SZN     0,,PR3
         2 001366   001371 604000 2                  TMI     s:5733

      795     5725                      /*
      796     5726                      * Must do a sequential M$PRECORD to get key of
      797     5727                      *     first record, if any.
      798     5728                      */
      799     5729    4                 FORCE_PRECORD = %TRUE;

   5729  2 001367   400000 236003                    LDQ     -131072,DU
         2 001370   200021 756100                    STQ     FORCE_PRECORD,,AUTO

      800     5730    4                 END;

      801     5731    3              END DO_PFIL;

      802     5732
      803     5733    2           IF NOT ABS_BOF AND NOT ABSOLUTE.EOF

   5733  2 001371   200026 234100                    SZN     ABS_BOF,,AUTO
         2 001372   001471 604000 2                  TMI     s:5759
         2 001373   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         2 001374   000010 236100                    LDQ     8,,PR0
         2 001375   400000 316007                    CANQ    -131072,DL
         2 001376   001471 601000 2                  TNZ     s:5759
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:91   
         2 001377   200027 236100                    LDQ     ABS_KEY$,,AUTO
         2 001400   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001401   001471 600000 2                  TZE     s:5759

      804     5734    2             AND ABS_KEY$ ~= ADDR(NIL) THEN
      805     5735    3   GOT_ABS_KEY: DO;

   5735  2 001402                       GOT_ABS_KEY  null
      806     5736    3              IF NOT PORT.CURRENT.EOF

   5736  2 001402   200003 471500                    LDP1    @PORT,,AUTO
         2 001403   100022 236100                    LDQ     18,,PR1
         2 001404   400000 316007                    CANQ    -131072,DL
         2 001405   001425 601000 2                  TNZ     WHO_DOES_KEYED_CALL
         2 001406   200030 473500                    LDP3    PORT_KEY$,,AUTO
         2 001407   300000 236100                    LDQ     0,,PR3
         2 001410   000033 772000                    QRL     27
         2 001411   200027 474500                    LDP4    ABS_KEY$,,AUTO
         2 001412   000000 620006                    EAX0    0,QL
         2 001413   400000 236100                    LDQ     0,,PR4
         2 001414   000033 772000                    QRL     27
         2 001415   000000 621006                    EAX1    0,QL
         2 001416   040140 106540                    CMPC    fill='040'O
         2 001417   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
         2 001420   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
         2 001421   001425 601000 2                  TNZ     WHO_DOES_KEYED_CALL

      807     5737    3                AND PORT$KEY.BYTES = ABS$KEY.BYTES THEN
      808     5738    3                 PORT_ALREADY_AT_ABS_KEY = %TRUE;

   5738  2 001422   400000 236003                    LDQ     -131072,DU
         2 001423   200024 756100                    STQ     PORT_ALREADY_AT_ABS_KEY,,AUTO
         2 001424   001471 710000 2                  TRA     s:5759

      809     5739    3              ELSE
      810     5740    4   WHO_DOES_KEYED_CALL: DO;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:92   
   5740  2 001425                       WHO_DOES_KE* null
      811     5741                      /*
      812     5742                      *    We have an absolute key that's different from
      813     5743                      *        Port's current location.  We have to do
      814     5744                      *        either a keyed M$PRECORD or keyed M$READ.
      815     5745                      */
      816     5746    4                 IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_INDEXED THEN

   5746  2 001425   100032 220100                    LDX0    26,,PR1
         2 001426   000003 100003                    CMPX0   3,DU
         2 001427   001442 601000 2                  TNZ     s:5749

      817     5747    4                    STATIC$TEMP_FIXED.BYTES = ABS$KEY.BYTES;

   5747  2 001430   200027 473500                    LDP3    ABS_KEY$,,AUTO
         2 001431   300000 236100                    LDQ     0,,PR3
         2 001432   000033 772000                    QRL     27
         2 001433   000000 621006                    EAX1    0,QL
         2 001434   000000 474400 1                  LDP4    STATIC_TEMP$
         2 001435   200032 722100                    LXL2    FIXED_KEY_LEN,,AUTO
         2 001436   040140 100540                    MLR     fill='040'O
         2 001437   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 001440   400000 000012                    ADSC9   0,,PR4                   cn=0,n=*X2
         2 001441   001457 710000 2                  TRA     s:5752

      818     5748    5                 ELSE DO;

      819     5749    5                    STATIC$TEMP_TEXTC.LENGTH# = ABS$KEY.LENGTH#;

   5749  2 001442   200027 473500                    LDP3    ABS_KEY$,,AUTO
         2 001443   000000 474400 1                  LDP4    STATIC_TEMP$
         2 001444   300000 236100                    LDQ     0,,PR3
         2 001445   400000 552140                    STBQ    0,'40'O,PR4

      820     5750    5                    STATIC$TEMP_TEXTC.BYTES = ABS$KEY.BYTES;

   5750  2 001446   400000 236100                    LDQ     0,,PR4
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:93   
         2 001447   000033 772000                    QRL     27
         2 001450   000000 620006                    EAX0    0,QL
         2 001451   300000 236100                    LDQ     0,,PR3
         2 001452   000033 772000                    QRL     27
         2 001453   000000 621006                    EAX1    0,QL
         2 001454   040140 100540                    MLR     fill='040'O
         2 001455   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 001456   400000 200010                    ADSC9   0,,PR4                   cn=1,n=*X0

      821     5751    5                    END;

      822     5752    4                 IF REL = 0 AND READ THEN

   5752  2 001457   200025 235100                    LDA     REL,,AUTO
         2 001460   001467 601000 2                  TNZ     s:5755
         2 001461   200006 475500                    LDP5    @READ,,AUTO
         2 001462   500000 234100                    SZN     0,,PR5
         2 001463   001467 605000 2                  TPL     s:5755

      823     5753    4                    FPT_READ.V.KEYS# = %TRUE;

   5753  2 001464   200000 236007                    LDQ     65536,DL
         2 001465   200056 256100                    ORSQ    FPT_READ+8,,AUTO
         2 001466   001471 710000 2                  TRA     s:5759

      824     5754    4                 ELSE
      825     5755    4                    FPT_PRECORD.V.KEYS# = %TRUE;

   5755  2 001467   400000 236007                    LDQ     -131072,DL
         2 001470   200072 256100                    ORSQ    FPT_PRECORD+6,,AUTO

      826     5756    4                 END WHO_DOES_KEYED_CALL;

      827     5757    3              END GOT_ABS_KEY;

      828     5758
      829     5759    2           IF PORT_ALREADY_AT_ABS_KEY THEN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:94   

   5759  2 001471   200024 234100                    SZN     PORT_ALREADY_AT_ABS_KEY,,AUTO
         2 001472   001505 605000 2                  TPL     s:5783

      830     5760    3   ADJUST_REL: DO;

   5760  2 001473                       ADJUST_REL   null
      831     5761                   /*
      832     5762                   *    The DCB is already at (or near) the requested key.
      833     5763                   *    We need to adjust REL to reflect the monitor's
      834     5764                   *        position in the file:  if we just did something
      835     5765                   *        other than an OPEN or LOCATION-type monitor
      836     5766                   *        call on the DCB, then the monitor's idea of
      837     5767                   *        the "current record" is one record beyond the
      838     5768                   *        key in PORT.CURRENT.KEY (%(LVL_EXT_REC-1)).
      839     5769                   *    Note we may subtract 1 from REL even if REL=0.
      840     5770                   *        This happens when no relative movement is
      841     5771                   *        requested, but we think we're positioned at
      842     5772                   *        the ABSOLUTE key but the monitor is positioned
      843     5773                   *        one beyond the ABSOLUTE key, so we need to back up.
      844     5774                   */
      845     5775    3              IF PORT.LAST_OP# ~= %ACCOP_OPEN

   5775  2 001473   200003 470500                    LDP0    @PORT,,AUTO
         2 001474   000007 220100                    LDX0    7,,PR0
         2 001475   000001 100003                    CMPX0   1,DU
         2 001476   001505 600000 2                  TZE     s:5783
         2 001477   000002 100003                    CMPX0   2,DU
         2 001500   001505 600000 2                  TZE     s:5783

      846     5776    4                AND PORT.LAST_OP# ~= %ACCOP_LOCATION THEN DO;

      847     5777    4                 REL = REL - 1;

   5777  2 001501   000001 336007                    LCQ     1,DL
         2 001502   200025 056100                    ASQ     REL,,AUTO

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:95   
      848     5778                      /* Must do either M$PRECORD or M$READ */
      849     5779    4                 FORCE_MONITOR_CALL = %TRUE;

   5779  2 001503   400000 236003                    LDQ     -131072,DU
         2 001504   200022 756100                    STQ     FORCE_MONITOR_CALL,,AUTO

      850     5780    4                 END;

      851     5781    3              END ADJUST_REL;

      852     5782
      853     5783    2           IF FPT_PRECORD.V.KEYS#

   5783  2 001505   200072 236100                    LDQ     FPT_PRECORD+6,,AUTO
         2 001506   400000 316007                    CANQ    -131072,DL
         2 001507   001521 601000 2                  TNZ     DO_PRECORD
         2 001510   200025 235100                    LDA     REL,,AUTO
         2 001511   001521 601000 2                  TNZ     DO_PRECORD
         2 001512   200021 234100                    SZN     FORCE_PRECORD,,AUTO
         2 001513   001521 604000 2                  TMI     DO_PRECORD
         2 001514   200022 234100                    SZN     FORCE_MONITOR_CALL,,AUTO
         2 001515   001643 605000 2                  TPL     s:5835
         2 001516   200006 470500                    LDP0    @READ,,AUTO
         2 001517   000000 234100                    SZN     0,,PR0
         2 001520   001643 604000 2                  TMI     s:5835

      854     5784    2             OR REL ~= 0
      855     5785    2             OR FORCE_PRECORD
      856     5786    2             OR (FORCE_MONITOR_CALL AND NOT READ) THEN
      857     5787    3   DO_PRECORD: DO;

   5787  2 001521                       DO_PRECORD   null
      858     5788    3              CALL CLEAR_LEVEL_REGISTERS

   5788  2 001521   002426 701000 2                  TSX1    CLEAR_LEVEL_REGISTERS
         2 001522   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:96   
      859     5789    3                ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      860     5790    3              EXT_RECORD_CLEARED = %TRUE;

   5790  2 001523   400000 236003                    LDQ     -131072,DU
         2 001524   200023 756100                    STQ     EXT_RECORD_CLEARED,,AUTO

      861     5791    3              FPT_READ.V.KEYR# = %FALSE;   /* PRECORD will return key */

   5791  2 001525   000007 236000 3                  LDQ     7
         2 001526   200056 356100                    ANSQ    FPT_READ+8,,AUTO

      862     5792    3              FPT_PRECORD.KEY_ = KEY_;

   5792  2 001527   200034 237100                    LDAQ    KEY_,,AUTO
         2 001530   200066 757100                    STAQ    FPT_PRECORD+2,,AUTO

      863     5793    3              FPT_PRECORD.V.N# = REL;

   5793  2 001531   200025 235100                    LDA     REL,,AUTO
         2 001532   200073 755100                    STA     FPT_PRECORD+7,,AUTO

      864     5794    3              ERR_CODE = %CLEAR;

   5794  2 001533   200076 450100                    STZ     ERR_CODE,,AUTO

      865     5795    3              PORT.LAST_OP# = %ACCOP_LOCATION;

   5795  2 001534   000002 220003                    LDX0    2,DU
         2 001535   200003 470500                    LDP0    @PORT,,AUTO
         2 001536   000007 740100                    STX0    7,,PR0

      866     5796    3              IF VD_$$MON_ACC.V# > 10 THEN

   5796  2 001537   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001540   000012 115007                    CMPA    10,DL
         2 001541   001560 604400 2                  TMOZ    s:5799

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:97   
      867     5797    3                 CALL VDG$MACC_PREAD_B4_PRECORD (FPT_PRECORD.V.DCB#,

   5797  2 001542   200073 631500                    EPPR1   FPT_PRECORD+7,,AUTO
         2 001543   200105 451500                    STP1    LEVEL+4,,AUTO
         2 001544   200066 633500                    EPPR3   FPT_PRECORD+2,,AUTO
         2 001545   200104 453500                    STP3    LEVEL+3,,AUTO
         2 001546   200106 452500                    STP2    LEVEL+5,,AUTO
         2 001547   200106 236100                    LDQ     LEVEL+5,,AUTO
         2 001550   000010 036000 3                  ADLQ    8
         2 001551   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001552   200072 634500                    EPPR4   FPT_PRECORD+6,,AUTO
         2 001553   200102 454500                    STP4    LEVEL+1,,AUTO
         2 001554   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001555   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001556   000000 701000 xent               TSX1    VDG$MACC_PREAD_B4_PRECORD
         2 001557   000000 011000                    NOP     0

      868     5798    3                   FPT_PRECORD.V.KEYS#, FPT_PRECORD.KEY_, FPT_PRECORD.V.N#);
      869     5799    4              IF FPT_PRECORD.V.KEYS# THEN DO;

   5799  2 001560   200072 236100                    LDQ     FPT_PRECORD+6,,AUTO
         2 001561   400000 316007                    CANQ    -131072,DL
         2 001562   001565 600000 2                  TZE     s:5806

      870     5800                      %INCREMENT (INDX=%STG_ACC_M$PRECORDS_KEYED);

   5801  2 001563   000123 054000 xsym               AOS     VD_6E+83

      871     5803    4                 END;

   5803  2 001564   001566 710000 2                  TRA     s:5809

      872     5804    4              ELSE DO;

      873     5805                      %INCREMENT (INDX=%STG_ACC_M$PRECORDS_SEQ);

   5806  2 001565   000122 054000 xsym               AOS     VD_6E+82
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:98   

      874     5808    4                 END;

      875     5809    3              CALL M$PRECORD (FPT_PRECORD)

   5809  2 001566   200064 630500                    EPPR0   FPT_PRECORD,,AUTO
         2 001567   440003 713400                    CLIMB   alt,+16387
         2 001570   401000 401760                    pmme    nvectors=3
         2 001571   001573 702000 2                  TSX2    s:5811
         2 001572   001604 710000 2                  TRA     s:5815

      876     5810    4              WHENALTRETURN DO;

      877     5811    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5811  2 001573   000000 470400 xsym               LDP0    B$TCB$
         2 001574   000000 471500                    LDP1    0,,PR0
         2 001575   100102 236100                    LDQ     66,,PR1
         2 001576   200076 756100                    STQ     ERR_CODE,,AUTO

      878     5812    4                 IF ERR_CODE.CODE# = %E$NOKEY THEN

   5812  2 001577   200076 236100                    LDQ     ERR_CODE,,AUTO
         2 001600   377770 376007                    ANQ     131064,DL
         2 001601   001020 116007                    CMPQ    528,DL
         2 001602   001604 601000 2                  TNZ     s:5815

      879     5813    4                    EXISTS = %FALSE;

   5813  2 001603   200013 450100                    STZ     EXISTS,,AUTO

      880     5814    4                 END;

      881     5815    3              IF VD_$$MON_ACC.V# > 10 THEN

   5815  2 001604   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001605   000012 115007                    CMPA    10,DL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:99   
         2 001606   001617 604400 2                  TMOZ    s:5817

      882     5816    3                 CALL VDG$MACC_PREAD_AF_PRECORD (FPT_PRECORD.KEY_, ERR_CODE);

   5816  2 001607   200076 630500                    EPPR0   ERR_CODE,,AUTO
         2 001610   200103 450500                    STP0    LEVEL+2,,AUTO
         2 001611   200066 631500                    EPPR1   FPT_PRECORD+2,,AUTO
         2 001612   200102 451500                    STP1    LEVEL+1,,AUTO
         2 001613   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001614   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001615   000000 701000 xent               TSX1    VDG$MACC_PREAD_AF_PRECORD
         2 001616   000000 011000                    NOP     0

      883     5817    3              CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP,

   5817  2 001617   200003 236100                    LDQ     @PORT,,AUTO
         2 001620   000012 036003                    ADLQ    10,DU
         2 001621   200107 756100                    STQ     LEVEL+6,,AUTO
         2 001622   200032 630500                    EPPR0   FIXED_KEY_LEN,,AUTO
         2 001623   200106 450500                    STP0    LEVEL+5,,AUTO
         2 001624   200003 236100                    LDQ     @PORT,,AUTO
         2 001625   000011 036000 3                  ADLQ    9
         2 001626   200105 756100                    STQ     LEVEL+4,,AUTO
         2 001627   200003 236100                    LDQ     @PORT,,AUTO
         2 001630   000032 036003                    ADLQ    26,DU
         2 001631   200104 756100                    STQ     LEVEL+3,,AUTO
         2 001632   000005 236000 3                  LDQ     5
         2 001633   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001634   200076 631500                    EPPR1   ERR_CODE,,AUTO
         2 001635   200102 451500                    STP1    LEVEL+1,,AUTO
         2 001636   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001637   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001640   000000 701000 xent               TSX1    VDG$BUILD_LOCATION
         2 001641   002402 702000 2                  TSX2    PRECORD_FAILED

      884     5818    3                PORT.LEVEL.ORG# (%LVL_EXT_REC),
      885     5819    3                PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:100  
      886     5820    3                PORT.CURRENT)
      887     5821    3                ALTRET (PRECORD_FAILED);
      888     5822    3              FORCE_MONITOR_CALL = %FALSE;     /* We did our moncall */

   5822  2 001642   200022 450100                    STZ     FORCE_MONITOR_CALL,,AUTO

      889     5823    3              END DO_PRECORD;

      890     5824
      891     5825
      892     5826                /*
      893     5827                *   We only want to read if:
      894     5828                *       (1) Reading was requested;
      895     5829                *   and (2) We don't already have the requested record in
      896     5830                *           hand, or we want to force a monitor call;
      897     5831                *   and (3) We aren't reading sequentially while positioned
      898     5832                *           at EOF!
      899     5833                */
      900     5834
      901     5835    2           IF READ

   5835  2 001643   200006 470500                    LDP0    @READ,,AUTO
         2 001644   000000 234100                    SZN     0,,PR0
         2 001645   002351 605000 2                  TPL     s:5970
         2 001646   200024 234100                    SZN     PORT_ALREADY_AT_ABS_KEY,,AUTO
         2 001647   001660 605000 2                  TPL     s:5835+13
         2 001650   200025 235100                    LDA     REL,,AUTO
         2 001651   001660 601000 2                  TNZ     s:5835+13
         2 001652   200003 471500                    LDP1    @PORT,,AUTO
         2 001653   100036 236100                    LDQ     30,,PR1
         2 001654   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001655   001660 600000 2                  TZE     s:5835+13
         2 001656   200022 234100                    SZN     FORCE_MONITOR_CALL,,AUTO
         2 001657   002351 605000 2                  TPL     s:5970
         2 001660   200056 236100                    LDQ     FPT_READ+8,,AUTO
         2 001661   200000 316007                    CANQ    65536,DL
         2 001662   001667 601000 2                  TNZ     DO_READ
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:101  
         2 001663   200003 471500                    LDP1    @PORT,,AUTO
         2 001664   100022 236100                    LDQ     18,,PR1
         2 001665   400000 316007                    CANQ    -131072,DL
         2 001666   002351 601000 2                  TNZ     s:5970

      902     5836    2             AND (NOT (PORT_ALREADY_AT_ABS_KEY AND REL = 0
      903     5837    2             AND PORT.LEVEL.DATA$ (%LVL_EXT_REC) ~= ADDR(NIL))
      904     5838    2             OR FORCE_MONITOR_CALL)
      905     5839    2             AND NOT (FPT_READ.V.KEYS# = %FALSE
      906     5840    2             AND PORT.CURRENT.EOF) THEN
      907     5841    3   DO_READ: DO;

   5841  2 001667                       DO_READ      null
      908     5842    4              IF FPT_READ.V.KEYS# THEN DO;

   5842  2 001667   200056 236100                    LDQ     FPT_READ+8,,AUTO
         2 001670   200000 316007                    CANQ    65536,DL
         2 001671   001674 600000 2                  TZE     s:5849

      909     5843                      %INCREMENT (INDX=%STG_ACC_M$READS_KEYED);

   5844  2 001672   000125 054000 xsym               AOS     VD_6E+85

      910     5846    4                 END;

   5846  2 001673   001675 710000 2                  TRA     s:5852

      911     5847    4              ELSE DO;

      912     5848                      %INCREMENT (INDX=%STG_ACC_M$READS_SEQ);

   5849  2 001674   000124 054000 xsym               AOS     VD_6E+84

      913     5851    4                 END;

      914     5852    4              IF NOT EXT_RECORD_CLEARED THEN DO;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:102  
   5852  2 001675   200023 234100                    SZN     EXT_RECORD_CLEARED,,AUTO
         2 001676   001701 604000 2                  TMI     s:5856

      915     5853    4                 CALL CLEAR_LEVEL_REGISTERS

   5853  2 001677   002426 701000 2                  TSX1    CLEAR_LEVEL_REGISTERS
         2 001700   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      916     5854    4                   ALTRET (CLEAR_LEVEL_REGISTERS_FAILED);
      917     5855    4                 END;

      918     5856    3              FPT_READ.KEY_ = KEY_;

   5856  2 001701   200034 237100                    LDAQ    KEY_,,AUTO
         2 001702   200050 757100                    STAQ    FPT_READ+2,,AUTO

      919     5857    3              NB_BUFFER = %NB_DFLT_DATA_REC;

   5857  2 001703   000400 235007                    LDA     256,DL
         2 001704   200036 755100                    STA     NB_BUFFER,,AUTO

      920     5858        /*N*       IF PORT$DCB.COMP# THEN
      921     5859                      NB_BUFFER = %MXNB_DATA;    Can't M$READ CONT on comprsd file */
      922     5860    3              PORT.LAST_OP# = %ACCOP_READ;

   5860  2 001705   000004 220003                    LDX0    4,DU
         2 001706   200003 470500                    LDP0    @PORT,,AUTO
         2 001707   000007 740100                    STX0    7,,PR0

      923     5861
      924     5862    3   GET_COMPLETE_RECORD:
      925     5863    4              DO WHILE %TRUE;

   5863  2 001710                       GET_COMPLET* null
      926     5864    4                 CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,

   5864  2 001710   200036 236100                    LDQ     NB_BUFFER,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:103  
         2 001711   000015 036007                    ADLQ    13,DL
         2 001712   000004 506007                    DIV     4,DL
         2 001713   200102 756100                    STQ     LEVEL+1,,AUTO
         2 001714   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001715   200105 450500                    STP0    LEVEL+4,,AUTO
         2 001716   200037 631500                    EPPR1   BUFFER$,,AUTO
         2 001717   200104 451500                    STP1    LEVEL+3,,AUTO
         2 001720   000012 236000 3                  LDQ     10
         2 001721   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001722   200103 630500                    EPPR0   LEVEL+2,,AUTO
         2 001723   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001724   000000 701000 xent               TSX1    VDG$OALLOC
         2 001725   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      927     5865    4                   (LENGTHC(VD$BUFFER_HEADER) + NB_BUFFER + %(NB_PER_WORD-1)) /
      928     5866    4                   %NB_PER_WORD)
      929     5867    4                   ALTRET (OALLOC_FAILED);
      930     5868    4                 BUFFER.LENGTH# = NB_BUFFER;

   5868  2 001726   200036 720100                    LXL0    NB_BUFFER,,AUTO
         2 001727   200037 470500                    LDP0    BUFFER$,,AUTO
         2 001730   000002 740100                    STX0    2,,PR0

      931     5869    4                 FPT_READ.BUF_ = VECTOR(BUFFER.BYTES);

   5869  2 001731   200037 470500                    LDP0    BUFFER$,,AUTO
         2 001732   000002 221100                    LDX1    2,,PR0
         2 001733   000000 635011                    EAA     0,X1
         2 001734   000002 731000                    ARS     2
         2 001735   000140 135007                    SBLA    96,DL
         2 001736   200037 236100                    LDQ     BUFFER$,,AUTO
         2 001737   000013 036000 3                  ADLQ    11
         2 001740   200052 757100                    STAQ    FPT_READ+4,,AUTO

      932     5870    4                 ERR_CODE = %CLEAR;

   5870  2 001741   200076 450100                    STZ     ERR_CODE,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:104  

      933     5871    4                 IF VD_$$MON_ACC.V# > 10 THEN

   5871  2 001742   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001743   000012 115007                    CMPA    10,DL
         2 001744   001765 604400 2                  TMOZ    s:5874

      934     5872    4                    CALL VDG$MACC_PREAD_B4_READ (FPT_READ.V.DCB#,

   5872  2 001745   200106 452500                    STP2    LEVEL+5,,AUTO
         2 001746   200106 236100                    LDQ     LEVEL+5,,AUTO
         2 001747   000014 036000 3                  ADLQ    12
         2 001750   200105 756100                    STQ     LEVEL+4,,AUTO
         2 001751   200050 631500                    EPPR1   FPT_READ+2,,AUTO
         2 001752   200104 451500                    STP1    LEVEL+3,,AUTO
         2 001753   200107 452500                    STP2    LEVEL+6,,AUTO
         2 001754   200107 236100                    LDQ     LEVEL+6,,AUTO
         2 001755   000015 036000 3                  ADLQ    13
         2 001756   200103 756100                    STQ     LEVEL+2,,AUTO
         2 001757   200056 633500                    EPPR3   FPT_READ+8,,AUTO
         2 001760   200102 453500                    STP3    LEVEL+1,,AUTO
         2 001761   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 001762   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001763   000000 701000 xent               TSX1    VDG$MACC_PREAD_B4_READ
         2 001764   000000 011000                    NOP     0

      935     5873    4                      FPT_READ.V.KEYS#, FPT_READ.KEY_, FPT_READ.V.KEYR#);
      936     5874    4                 CALL M$READ (FPT_READ)

   5874  2 001765   200046 630500                    EPPR0   FPT_READ,,AUTO
         2 001766   440000 713400                    CLIMB   alt,read
         2 001767   401400 401760                    pmme    nvectors=4
         2 001770   001772 702000 2                  TSX2    s:5879

      937     5875    5                 WHENRETURN DO;

      938     5876    5                    EXIT GET_COMPLETE_RECORD;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:105  

   5876  2 001771   002163 710000 2                  TRA     s:5914

      939     5877    5                    END;
      940     5878    5                 WHENALTRETURN DO;

      941     5879    5                    CALL VDG$OFREE (BUFFER)

   5879  2 001772   200037 630500                    EPPR0   BUFFER$,,AUTO
         2 001773   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001774   000000 701000 xent               TSX1    VDG$OFREE
         2 001775   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      942     5880    5                      ALTRET (OFREE_FAILED);
      943     5881    5                    FPT_READ.V.KEYS# = %TRUE;  /* Read same key again */

   5881  2 001776   200000 236007                    LDQ     65536,DL
         2 001777   200056 256100                    ORSQ    FPT_READ+8,,AUTO

      944     5882    5                    ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5882  2 002000   000000 470400 xsym               LDP0    B$TCB$
         2 002001   000000 471500                    LDP1    0,,PR0
         2 002002   100102 236100                    LDQ     66,,PR1
         2 002003   200076 756100                    STQ     ERR_CODE,,AUTO

      945     5883    6                    DO CASE (ERR_CODE.CODE#);

   5883  2 002004   200076 236100                    LDQ     ERR_CODE,,AUTO
         2 002005   000003 772000                    QRL     3
         2 002006   037777 376007                    ANQ     16383,DL
         2 002007   000007 136007                    SBLQ    7,DL
         2 002010   000074 116007                    CMPQ    60,DL
         2 002011   002013 602006 2                  TNC     s:5883+7,QL
         2 002012   002161 710000 2                  TRA     s:5909
         2 002013   002135 710000 2                  TRA     s:5900
         2 002014   002161 710000 2                  TRA     s:5909
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:106  
         2 002015   002161 710000 2                  TRA     s:5909
         2 002016   002161 710000 2                  TRA     s:5909
         2 002017   002161 710000 2                  TRA     s:5909
         2 002020   002161 710000 2                  TRA     s:5909
         2 002021   002161 710000 2                  TRA     s:5909
         2 002022   002161 710000 2                  TRA     s:5909
         2 002023   002161 710000 2                  TRA     s:5909
         2 002024   002161 710000 2                  TRA     s:5909
         2 002025   002161 710000 2                  TRA     s:5909
         2 002026   002161 710000 2                  TRA     s:5909
         2 002027   002161 710000 2                  TRA     s:5909
         2 002030   002161 710000 2                  TRA     s:5909
         2 002031   002161 710000 2                  TRA     s:5909
         2 002032   002161 710000 2                  TRA     s:5909
         2 002033   002161 710000 2                  TRA     s:5909
         2 002034   002161 710000 2                  TRA     s:5909
         2 002035   002161 710000 2                  TRA     s:5909
         2 002036   002161 710000 2                  TRA     s:5909
         2 002037   002161 710000 2                  TRA     s:5909
         2 002040   002161 710000 2                  TRA     s:5909
         2 002041   002161 710000 2                  TRA     s:5909
         2 002042   002161 710000 2                  TRA     s:5909
         2 002043   002161 710000 2                  TRA     s:5909
         2 002044   002161 710000 2                  TRA     s:5909
         2 002045   002161 710000 2                  TRA     s:5909
         2 002046   002161 710000 2                  TRA     s:5909
         2 002047   002161 710000 2                  TRA     s:5909
         2 002050   002161 710000 2                  TRA     s:5909
         2 002051   002161 710000 2                  TRA     s:5909
         2 002052   002161 710000 2                  TRA     s:5909
         2 002053   002161 710000 2                  TRA     s:5909
         2 002054   002161 710000 2                  TRA     s:5909
         2 002055   002161 710000 2                  TRA     s:5909
         2 002056   002161 710000 2                  TRA     s:5909
         2 002057   002161 710000 2                  TRA     s:5909
         2 002060   002161 710000 2                  TRA     s:5909
         2 002061   002161 710000 2                  TRA     s:5909
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:107  
         2 002062   002161 710000 2                  TRA     s:5909
         2 002063   002161 710000 2                  TRA     s:5909
         2 002064   002161 710000 2                  TRA     s:5909
         2 002065   002161 710000 2                  TRA     s:5909
         2 002066   002161 710000 2                  TRA     s:5909
         2 002067   002161 710000 2                  TRA     s:5909
         2 002070   002161 710000 2                  TRA     s:5909
         2 002071   002161 710000 2                  TRA     s:5909
         2 002072   002161 710000 2                  TRA     s:5909
         2 002073   002161 710000 2                  TRA     s:5909
         2 002074   002161 710000 2                  TRA     s:5909
         2 002075   002161 710000 2                  TRA     s:5909
         2 002076   002161 710000 2                  TRA     s:5909
         2 002077   002161 710000 2                  TRA     s:5909
         2 002100   002161 710000 2                  TRA     s:5909
         2 002101   002161 710000 2                  TRA     s:5909
         2 002102   002161 710000 2                  TRA     s:5909
         2 002103   002161 710000 2                  TRA     s:5909
         2 002104   002161 710000 2                  TRA     s:5909
         2 002105   002161 710000 2                  TRA     s:5909
         2 002106   002107 710000 2                  TRA     s:5885

      946     5884    6                     CASE (%E$NOKEY);

      947     5885    6                       EXISTS = %FALSE;

   5885  2 002107   200013 450100                    STZ     EXISTS,,AUTO

      948     5886    6                       FPT_READ.V.KEYS# = %FALSE;  /* Get next key */

   5886  2 002110   000016 236000 3                  LDQ     14
         2 002111   200056 356100                    ANSQ    FPT_READ+8,,AUTO

      949     5887    6                       FPT_READ.V.KEYR# = %TRUE;

   5887  2 002112   100000 236007                    LDQ     32768,DL
         2 002113   200056 256100                    ORSQ    FPT_READ+8,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:108  

      950     5888                            %CLEARKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1);

   5895  2 002114   200003 471500                    LDP1    @PORT,,AUTO
         2 002115   100012 720100                    LXL0    10,,PR1
         2 002116   000002 100003                    CMPX0   2,DU
         2 002117   002131 601000 2                  TNZ     s:5896+2

   5895  2 002120   100013 473500                    LDP3    11,,PR1
         2 002121   200102 453500                    STP3    LEVEL+1,,AUTO
         2 002122   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002123   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002124   000000 701000 xent               TSX1    VDG$OFREE
         2 002125   002127 702000 2                  TSX2    s:5896
         2 002126   002131 710000 2                  TRA     s:5896+2

   5896  2 002127   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002130   000000 702211                    TSX2  ! 0,X1

   5896  2 002131   200003 470500                    LDP0    @PORT,,AUTO
         2 002132   000012 450100                    STZ     10,,PR0
         2 002133   000013 450100                    STZ     11,,PR0
         2 002134   002162 710000 2                  TRA     s:5912

      951     5898    6                     CASE (%E$LD);

      952     5899                            /* Record too big for current buffer */
      953     5900    6                       IF NB_BUFFER >= %MXNB_DATA THEN

   5900  2 002135   200036 235100                    LDA     NB_BUFFER,,AUTO
         2 002136   004000 115007                    CMPA    2048,DL
         2 002137   002163 605000 2                  TPL     s:5914

      954     5901    6                          EXIT GET_COMPLETE_RECORD;
      955     5902    6                       NB_BUFFER = MINIMUM (%MXNB_DATA, NB_BUFFER * 2);

   5902  2 002140   200036 236100                    LDQ     NB_BUFFER,,AUTO
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:109  
         2 002141   000001 736000                    QLS     1
         2 002142   004000 116007                    CMPQ    2048,DL
         2 002143   002145 604400 2                  TMOZ    s:5902+5
         2 002144   004000 236007                    LDQ     2048,DL
         2 002145   200036 756100                    STQ     NB_BUFFER,,AUTO

      956     5903    7                       IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;

   5903  2 002146   200003 471500                    LDP1    @PORT,,AUTO
         2 002147   100032 220100                    LDX0    26,,PR1
         2 002150   000001 100003                    CMPX0   1,DU
         2 002151   002162 601000 2                  TNZ     s:5912

      957     5904    7                          FPT_PRECORD.V.N# = -1; /* KEYS doesn't work in consec */

   5904  2 002152   000001 335007                    LCA     1,DL
         2 002153   200073 755100                    STA     FPT_PRECORD+7,,AUTO

      958     5905    7                          CALL M$PRECORD (FPT_PRECORD)

   5905  2 002154   200064 630500                    EPPR0   FPT_PRECORD,,AUTO
         2 002155   440003 713400                    CLIMB   alt,+16387
         2 002156   401000 401760                    pmme    nvectors=3
         2 002157   002402 702000 2                  TSX2    PRECORD_FAILED

      959     5906    7                            ALTRET (PRECORD_FAILED);
      960     5907    7                          END;

   5907  2 002160   002162 710000 2                  TRA     s:5912

      961     5908    6                     CASE (ELSE);

      962     5909    6                       EXIT GET_COMPLETE_RECORD; /* Other error */

   5909  2 002161   002163 710000 2                  TRA     s:5914

      963     5910    6                     END;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:110  

      964     5911    5                    END;
      965     5912    4                 END GET_COMPLETE_RECORD;

   5912  2 002162   001710 710000 2                  TRA     GET_COMPLETE_RECORD

      966     5913
      967     5914    3              IF VD_$$MON_ACC.V# > 10 THEN

   5914  2 002163   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 002164   000012 115007                    CMPA    10,DL
         2 002165   002200 604400 2                  TMOZ    s:5917

      968     5915    3                 CALL VDG$MACC_PREAD_AF_READ (FPT_READ.KEY_, PORT$DCB.ARS#,

   5915  2 002166   200037 630500                    EPPR0   BUFFER$,,AUTO
         2 002167   200104 450500                    STP0    LEVEL+3,,AUTO
         2 002170   200033 236100                    LDQ     PORT_DCB$,,AUTO
         2 002171   200103 756100                    STQ     LEVEL+2,,AUTO
         2 002172   200050 631500                    EPPR1   FPT_READ+2,,AUTO
         2 002173   200102 451500                    STP1    LEVEL+1,,AUTO
         2 002174   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002175   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002176   000000 701000 xent               TSX1    VDG$MACC_PREAD_AF_READ
         2 002177   000000 011000                    NOP     0

      969     5916    3                   BUFFER$);
      970     5917    4              IF FPT_READ.V.KEYR# THEN DO;

   5917  2 002200   200056 236100                    LDQ     FPT_READ+8,,AUTO
         2 002201   100000 316007                    CANQ    32768,DL
         2 002202   002227 600000 2                  TZE     s:5930

      971     5918    4                 CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP,

   5918  2 002203   200003 236100                    LDQ     @PORT,,AUTO
         2 002204   000012 036003                    ADLQ    10,DU
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:111  
         2 002205   200107 756100                    STQ     LEVEL+6,,AUTO
         2 002206   200032 630500                    EPPR0   FIXED_KEY_LEN,,AUTO
         2 002207   200106 450500                    STP0    LEVEL+5,,AUTO
         2 002210   200003 236100                    LDQ     @PORT,,AUTO
         2 002211   000011 036000 3                  ADLQ    9
         2 002212   200105 756100                    STQ     LEVEL+4,,AUTO
         2 002213   200003 236100                    LDQ     @PORT,,AUTO
         2 002214   000032 036003                    ADLQ    26,DU
         2 002215   200104 756100                    STQ     LEVEL+3,,AUTO
         2 002216   000005 236000 3                  LDQ     5
         2 002217   200103 756100                    STQ     LEVEL+2,,AUTO
         2 002220   200076 631500                    EPPR1   ERR_CODE,,AUTO
         2 002221   200102 451500                    STP1    LEVEL+1,,AUTO
         2 002222   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002223   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 002224   000000 701000 xent               TSX1    VDG$BUILD_LOCATION
         2 002225   002402 702000 2                  TSX2    PRECORD_FAILED

      972     5919    4                   PORT.LEVEL.ORG# (%LVL_EXT_REC),
      973     5920    4                   PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
      974     5921    4                   PORT.CURRENT)
      975     5922    4                   ALTRET (READ_FAILED);
      976     5923    4                 END;

   5923  2 002226   002306 710000 2                  TRA     s:5954

      977     5924    4              ELSE DO;

      978     5925                      /*
      979     5926                      *  We already filled in PORT.CURRENT after the PRECORD
      980     5927                      *     call -- but we may have gotten an error on the
      981     5928                      *     read.
      982     5929                      */
      983     5930    5                 DO CASE (ERR_CODE.CODE#);

   5930  2 002227   200076 236100                    LDQ     ERR_CODE,,AUTO
         2 002230   000003 772000                    QRL     3
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:112  
         2 002231   037777 376007                    ANQ     16383,DL
         2 002232   000007 116007                    CMPQ    7,DL
         2 002233   002235 602006 2                  TNC     s:5930+6,QL
         2 002234   002267 710000 2                  TRA     s:5946
         2 002235   002306 710000 2                  TRA     s:5954
         2 002236   002267 710000 2                  TRA     s:5946
         2 002237   002267 710000 2                  TRA     s:5946
         2 002240   002267 710000 2                  TRA     s:5946
         2 002241   002306 710000 2                  TRA     s:5954
         2 002242   002267 710000 2                  TRA     s:5946
         2 002243   002244 710000 2                  TRA     s:5941

      984     5931    5                  CASE (0, %E$BOF);

      985     5932    5                    ;
      986     5933    5                  CASE (%E$EOF);

      987     5934                         %CLEARKEY (KEY=PORT.CURRENT.KEY, INDX=%LVL_EXT_REC-1);

   5941  2 002244   200003 470500                    LDP0    @PORT,,AUTO
         2 002245   000012 720100                    LXL0    10,,PR0
         2 002246   000002 100003                    CMPX0   2,DU
         2 002247   002261 601000 2                  TNZ     s:5942+2

   5941  2 002250   000013 471500                    LDP1    11,,PR0
         2 002251   200102 451500                    STP1    LEVEL+1,,AUTO
         2 002252   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002253   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002254   000000 701000 xent               TSX1    VDG$OFREE
         2 002255   002257 702000 2                  TSX2    s:5942
         2 002256   002261 710000 2                  TRA     s:5942+2

   5942  2 002257   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002260   000000 702211                    TSX2  ! 0,X1

   5942  2 002261   200003 470500                    LDP0    @PORT,,AUTO
         2 002262   000012 450100                    STZ     10,,PR0
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:113  
         2 002263   000013 450100                    STZ     11,,PR0

      988     5944    5                    PORT.CURRENT.EOF = %TRUE;

   5944  2 002264   400000 236007                    LDQ     -131072,DL
         2 002265   000022 256100                    ORSQ    18,,PR0
         2 002266   002306 710000 2                  TRA     s:5954

      989     5945    5                  CASE (ELSE);

      990     5946    5                    CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5946  2 002267   200017 630500                    EPPR0   VD_ERR$,,AUTO
         2 002270   200103 450500                    STP0    LEVEL+2,,AUTO
         2 002271   000017 236000 3                  LDQ     15
         2 002272   200102 756100                    STQ     LEVEL+1,,AUTO
         2 002273   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002274   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002275   000000 701000 xent               TSX1    VDG$OALLOC
         2 002276   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

      991     5947    5                      ALTRET (OALLOC_FAILED);
      992     5948    5                    VD$ERR.ERR = ERR_CODE;

   5948  2 002277   200076 236100                    LDQ     ERR_CODE,,AUTO
         2 002300   200017 470500                    LDP0    VD_ERR$,,AUTO
         2 002301   000002 756100                    STQ     2,,PR0

      993     5949    5                    VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5949  2 002302   000003 220003                    LDX0    3,DU
         2 002303   200017 470500                    LDP0    VD_ERR$,,AUTO
         2 002304   000003 740100                    STX0    3,,PR0

      994     5950    5                    GOTO READ_FAILED;

   5950  2 002305   002402 710000 2                  TRA     PRECORD_FAILED
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:114  

      995     5951    5                  END;

      996     5952    4                 END;

      997     5953
      998     5954    4              IF PORT.CURRENT.EOF THEN DO;

   5954  2 002306   200003 470500                    LDP0    @PORT,,AUTO
         2 002307   000022 236100                    LDQ     18,,PR0
         2 002310   400000 316007                    CANQ    -131072,DL
         2 002311   002315 600000 2                  TZE     s:5958

      999     5955                      /* When READ gets EOF, it's like a LOCATION-type call */
     1000     5956    4                 PORT.LAST_OP# = %ACCOP_LOCATION;

   5956  2 002312   000002 220003                    LDX0    2,DU
         2 002313   000007 740100                    STX0    7,,PR0

     1001     5957    4                 END;

   5957  2 002314   002351 710000 2                  TRA     s:5970

     1002     5958    3              ELSE IF PORT.LEVEL.SPEC.V$ (%LVL_EXT_REC) ~= ADDR(NIL) THEN

   5958  2 002315   000035 236100                    LDQ     29,,PR0
         2 002316   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002317   002351 600000 2                  TZE     s:5970

     1003     5959    4   LOAD_RECORD_INTO_PORT: DO;

   5959  2 002320                       LOAD_RECORD* null
     1004     5960    4                    PORT.LEVEL.SPEC.TYPE# (%LVL_EXT_REC) = %SPT_EXT_RECORD;

   5960  2 002320   000001 220003                    LDX0    1,DU
         2 002321   000034 740100                    STX0    28,,PR0

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:115  
     1005     5961    4                    PORT.LEVEL.SPEC.REP# (%LVL_EXT_REC) = %REP_LOCAL;

   5961  2 002322   000034 440100                    SXL0    28,,PR0

     1006     5962    4                    REC_SPEC$ = ADDR(PORT.LEVEL.SPEC.V$ (%LVL_EXT_REC));

   5962  2 002323   200003 236100                    LDQ     @PORT,,AUTO
         2 002324   000035 036003                    ADLQ    29,DU
         2 002325   200040 756100                    STQ     REC_SPEC$,,AUTO

     1007     5963    4                    REC$SPEC.LENGTH# = 1;

   5963  2 002326   200040 471500                    LDP1    REC_SPEC$,,AUTO
         2 002327   001000 236003                    LDQ     512,DU
         2 002330   100000 552140                    STBQ    0,'40'O,PR1

     1008     5964    4                    REC$SPEC.BYTES = BITASC(PORT$DCB.DVBYTE);

   5964  2 002331   100000 236100                    LDQ     0,,PR1
         2 002332   000033 772000                    QRL     27
         2 002333   200033 473500                    LDP3    PORT_DCB$,,AUTO
         2 002334   000000 621006                    EAX1    0,QL
         2 002335   300003 236100                    LDQ     3,,PR3
         2 002336   776000 376003                    ANQ     -1024,DU
         2 002337   000020 276000 3                  ORQ     16
         2 002340   200102 756100                    STQ     LEVEL+1,,AUTO
         2 002341   040140 100500                    MLR     fill='040'O
         2 002342   200102 000004                    ADSC9   LEVEL+1,,AUTO            cn=0,n=4
         2 002343   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1

     1009     5965    4                    PORT.LEVEL.DATA$ (%LVL_EXT_REC) = BUFFER$;

   5965  2 002344   200037 236100                    LDQ     BUFFER$,,AUTO
         2 002345   000036 756100                    STQ     30,,PR0

     1010     5966    4                    BUFFER.LENGTH# = PORT$DCB.ARS#;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:116  
   5966  2 002346   300000 721100                    LXL1    0,,PR3
         2 002347   200037 474500                    LDP4    BUFFER$,,AUTO
         2 002350   400002 741100                    STX1    2,,PR4

     1011     5967    4                    END LOAD_RECORD_INTO_PORT;

     1012     5968    3              END DO_READ;

     1013     5969
     1014     5970    2           RETURN;

   5970  2 002351   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002352   000001 702211                    TSX2  ! 1,X1

     1015     5971
     1016     5972
     1017     5973
     1018     5974    2   PFIL_FAILED:
     1019     5975    2           EXISTS = %FALSE;

   5975  2 002353   200013 450100       PFIL_FAILED  STZ     EXISTS,,AUTO

     1020     5976    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5976  2 002354   200017 630500                    EPPR0   VD_ERR$,,AUTO
         2 002355   200103 450500                    STP0    LEVEL+2,,AUTO
         2 002356   000017 236000 3                  LDQ     15
         2 002357   200102 756100                    STQ     LEVEL+1,,AUTO
         2 002360   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002361   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002362   000000 701000 xent               TSX1    VDG$OALLOC
         2 002363   002424 702000 2                  TSX2    CLEAR_LEVEL_REGISTERS_FAILED

     1021     5977    2             ALTRET (OALLOC_FAILED);
     1022     5978    2           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

   5978  2 002364   000000 470400 xsym               LDP0    B$TCB$
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:117  
         2 002365   000000 471500                    LDP1    0,,PR0
         2 002366   100102 236100                    LDQ     66,,PR1
         2 002367   200017 473500                    LDP3    VD_ERR$,,AUTO
         2 002370   300002 756100                    STQ     2,,PR3

     1023     5979    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5979  2 002371   000003 220003                    LDX0    3,DU
         2 002372   200017 471500                    LDP1    VD_ERR$,,AUTO
         2 002373   100003 740100                    STX0    3,,PR1

     1024     5980    2           VD$ERR.DCB# = PORT.DCB#;

   5980  2 002374   200003 471500                    LDP1    @PORT,,AUTO
         2 002375   100004 721100                    LXL1    4,,PR1
         2 002376   200017 473500                    LDP3    VD_ERR$,,AUTO
         2 002377   300004 741100                    STX1    4,,PR3

     1025     5981    2           ALTRETURN;

   5981  2 002400   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002401   000000 702211                    TSX2  ! 0,X1

   5980  2 002402                       PRECORD_FAI* null
   5980  2 002402                       READ_FAILED  null
     1026     5982
     1027     5983
     1028     5984    2   PRECORD_FAILED: ;
     1029     5985    2   READ_FAILED: ;
     1030     5986    2           EXISTS = %FALSE;

   5986  2 002402   200013 450100                    STZ     EXISTS,,AUTO

     1031     5987    3           IF ERR$TAIL.ERR.CODE# = %E$LD THEN DO;

   5987  2 002403   000032 470400 xsym               LDP0    VD_6E+26
         2 002404   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:118  
         2 002405   377770 376007                    ANQ     131064,DL
         2 002406   000070 116007                    CMPQ    56,DL
         2 002407   002416 601000 2                  TNZ     s:5991

     1032     5988    3              ERR$TAIL.ERR = %CLEAR;

   5988  2 002410   000002 450100                    STZ     2,,PR0

     1033     5989    3              ERR$TAIL.ERR.CODE# = %E$VD_LD;

   5989  2 002411   000032 470400 xsym               LDP0    VD_6E+26
         2 002412   000002 236100                    LDQ     2,,PR0
         2 002413   000021 376000 3                  ANQ     17
         2 002414   004230 276007                    ORQ     2200,DL
         2 002415   000002 756100                    STQ     2,,PR0

     1034     5990    3              END;

     1035     5991    2           ERR$TAIL.DCB# = PORT.DCB#;

   5991  2 002416   200003 470500                    LDP0    @PORT,,AUTO
         2 002417   000004 720100                    LXL0    4,,PR0
         2 002420   000032 471400 xsym               LDP1    VD_6E+26
         2 002421   100004 740100                    STX0    4,,PR1

     1036     5992    2           ALTRETURN;

   5992  2 002422   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002423   000000 702211                    TSX2  ! 0,X1

   5991  2 002424                       CLEAR_LEVEL* null
   5991  2 002424                       OALLOC_FAIL* null
   5991  2 002424                       OFREE_FAILED null
     1037     5993
     1038     5994
     1039     5995    2   CLEAR_LEVEL_REGISTERS_FAILED: ;
     1040     5996    2   OALLOC_FAILED: ;
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:119  
     1041     5997    2   OFREE_FAILED: ;
     1042     5998    2           ALTRETURN;

   5998  2 002424   200020 221300                    LDX1  ! VD_ERR$+1,,AUTO
         2 002425   000000 702211                    TSX2  ! 0,X1

     1043     5999
     1044     6000    2   END READ_EXTERNAL;
     1045     6001
     1046     6002                %BOX (TITLE=CLEAR_LEVEL_REGISTERS, PAGE=YES);
              6010    2
              6014    2   /***************************************************************************
              6016    2    *                                                                         *
              6020    2            *                           CLEAR_LEVEL_REGISTERS                        *
              6022    2            *                                                                        *
              6024    2          ***************************************************************************/

     1047     6028
     1048     6029        /*I* NAME: CLEAR_LEVEL_REGISTERS
     1049     6030            PARAMETERS:
     1050     6031                None.
     1051     6032            INPUT:
     1052     6033                PORT is the VD$PORT open to an internal or external file.
     1053     6034            OUTPUT:
     1054     6035                PORT.LEVEL's Key, Spec, and Data components will be clear/nil,
     1055     6036                    as will PORT.LEVEL.INTERNAL$'s.
     1056     6037            DESCRIPTION:
     1057     6038                We're about to change the Port's location; first, we must
     1058     6039                    clear any current nodes held by the Port.
     1059     6040                If any Spec or Data components have been modified,
     1060     6041                    flush the nodes to the file and the Presenter.
     1061     6042                Free any dynamic storage held by the Port for the nodes.
     1062     6043                Clear the appropriate fields of PORT.LEVELs.
     1063     6044        */
     1064     6045
     1065     6046    1   CLEAR_LEVEL_REGISTERS: PROC ALTRET;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:120  
   6046  2 002426   200100 741300       CLEAR_LEVEL* STX1  ! ERR_CODE+2,,AUTO

     1066     6047
     1067     6048
     1068     6049
     1069     6050    2   DCL LEVEL SBIN;
     1070     6051
     1071     6052
     1072     6053        %VD$TEXTC_REMOTE;
     1073     6114        %VD$BUFFER;
     1074     6172
     1075     6173
     1076     6174
     1077     6175    2   CHECK_FOR_FLUSH:
     1078     6176    3           DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;

   6176  2 002427   000001 235007       CHECK_FOR_F* LDA     1,DL
         2 002430   200101 755100                    STA     LEVEL,,AUTO
         2 002431   002455 710000 2                  TRA     s:6183+1

     1079     6177    3              IF PORT.LEVEL.DATA_MODIFIED (LEVEL)

   6177  2 002432   200101 236100                    LDQ     LEVEL,,AUTO
         2 002433   000007 402007                    MPY     7,DL
         2 002434   200003 470500                    LDP0    @PORT,,AUTO
         2 002435   000030 236106                    LDQ     24,QL,PR0
         2 002436   200000 316003                    CANQ    65536,DU
         2 002437   002444 601000 2                  TNZ     s:6179
         2 002440   200101 236100                    LDQ     LEVEL,,AUTO
         2 002441   000007 402007                    MPY     7,DL
         2 002442   000030 234106                    SZN     24,QL,PR0
         2 002443   002454 605000 2                  TPL     s:6183

     1080     6178    4                OR PORT.LEVEL.SPEC_MODIFIED (LEVEL) THEN DO;

     1081     6179    4                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:121  
   6179  2 002444   000022 236000 3                  LDQ     18
         2 002445   200003 235100                    LDA     @PORT,,AUTO
         2 002446   200102 757100                    STAQ    LEVEL+1,,AUTO
         2 002447   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002450   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002451   000000 701000 xent               TSX1    VDA$PFLUSH
         2 002452   002554 702000 2                  TSX2    PFLUSH_FAILED

     1082     6180    4                   ALTRET (PFLUSH_FAILED);
     1083     6181    4                 EXIT CHECK_FOR_FLUSH;

   6181  2 002453   002461 710000 2                  TRA     s:6185

     1084     6182    4                 END;
     1085     6183    3              END CHECK_FOR_FLUSH;

   6183  2 002454   200101 054100                    AOS     LEVEL,,AUTO
         2 002455   200011 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         2 002456   200101 236100                    LDQ     LEVEL,,AUTO
         2 002457   000014 116100                    CMPQ    12,,PR0
         2 002460   002432 604000 2                  TMI     s:6177

     1086     6184
     1087     6185    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)

   6185  2 002461   200003 236100                    LDQ     @PORT,,AUTO
         2 002462   000012 036003                    ADLQ    10,DU
         2 002463   200102 756100                    STQ     LEVEL+1,,AUTO
         2 002464   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002465   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002466   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         2 002467   002554 702000 2                  TSX2    PFLUSH_FAILED

     1088     6186    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1089     6187
     1090     6188    3           DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:122  
   6188  2 002470   000001 235007                    LDA     1,DL
         2 002471   200101 755100                    STA     LEVEL,,AUTO
         2 002472   002546 710000 2                  TRA     s:6205+1

     1091     6189                   %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=LEVEL);

   6196  2 002473   200101 236100                    LDQ     LEVEL,,AUTO
         2 002474   000007 402007                    MPY     7,DL
         2 002475   200003 470500                    LDP0    @PORT,,AUTO
         2 002476   000025 720106                    LXL0    21,QL,PR0
         2 002477   000002 100003                    CMPX0   2,DU
         2 002500   002512 601000 2                  TNZ     s:6197+2

   6196  2 002501   000026 471506                    LDP1    22,QL,PR0
         2 002502   200102 451500                    STP1    LEVEL+1,,AUTO
         2 002503   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002504   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002505   000000 701000 xent               TSX1    VDG$OFREE
         2 002506   002510 702000 2                  TSX2    s:6197
         2 002507   002512 710000 2                  TRA     s:6197+2

   6197  2 002510   200100 221300                    LDX1  ! ERR_CODE+2,,AUTO
         2 002511   000000 702211                    TSX2  ! 0,X1

   6197  2 002512   200101 236100                    LDQ     LEVEL,,AUTO
         2 002513   000007 402007                    MPY     7,DL
         2 002514   200003 470500                    LDP0    @PORT,,AUTO
         2 002515   000025 450106                    STZ     21,QL,PR0
         2 002516   000026 450106                    STZ     22,QL,PR0

     1092     6199    4              IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN DO;

   6199  2 002517   000027 236106                    LDQ     23,QL,PR0
         2 002520   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002521   002540 600000 2                  TZE     s:6204

     1093     6200    4                 CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:123  

   6200  2 002522   200101 236100                    LDQ     LEVEL,,AUTO
         2 002523   000007 402007                    MPY     7,DL
         2 002524   000027 471506                    LDP1    23,QL,PR0
         2 002525   200102 451500                    STP1    LEVEL+1,,AUTO
         2 002526   200102 630500                    EPPR0   LEVEL+1,,AUTO
         2 002527   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002530   000000 701000 xent               TSX1    VDG$OFREE
         2 002531   002554 702000 2                  TSX2    PFLUSH_FAILED

     1094     6201    4                   ALTRET (OFREE_FAILED);
     1095     6202    4                 PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL);

   6202  2 002532   200101 236100                    LDQ     LEVEL,,AUTO
         2 002533   000007 402007                    MPY     7,DL
         2 002534   000000 620006                    EAX0    0,QL
         2 002535   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 002536   200003 470500                    LDP0    @PORT,,AUTO
         2 002537   000027 756110                    STQ     23,X0,PR0

     1096     6203    4                 END;

     1097     6204    3              PORT.LEVEL.INTERNAL$ (LEVEL) = ADDR(NIL);

   6204  2 002540   200101 236100                    LDQ     LEVEL,,AUTO
         2 002541   000007 402007                    MPY     7,DL
         2 002542   000000 620006                    EAX0    0,QL
         2 002543   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 002544   000031 756110                    STQ     25,X0,PR0

     1098     6205    3              END;

   6205  2 002545   200101 054100                    AOS     LEVEL,,AUTO
         2 002546   200011 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         2 002547   200101 236100                    LDQ     LEVEL,,AUTO
         2 002550   000014 116100                    CMPQ    12,,PR0
         2 002551   002473 604000 2                  TMI     s:6196
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:124  

     1099     6206
     1100     6207    2           RETURN;

   6207  2 002552   200100 221300                    LDX1  ! ERR_CODE+2,,AUTO
         2 002553   000001 702211                    TSX2  ! 1,X1

   6202  2 002554                       PFLUSH_FAIL* null
   6202  2 002554                       OCLEAR_LOCA* null
   6202  2 002554                       OFREE_FAILED null
     1101     6208
     1102     6209
     1103     6210    2   PFLUSH_FAILED: ;
     1104     6211    2   OCLEAR_LOCATION_FAILED: ;
     1105     6212    2   OFREE_FAILED: ;
     1106     6213    2           ALTRETURN;

   6213  2 002554   200100 221300                    LDX1  ! ERR_CODE+2,,AUTO
         2 002555   000000 702211                    TSX2  ! 0,X1
     1107     6214
     1108     6215    2   END CLEAR_LEVEL_REGISTERS;
     1109     6216
     1110     6217
     1111     6218    1   END VDA$PREAD;
     1112     6219        %EOD;

PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:125  
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PREAD.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:126  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$PREAD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/d STRC(144)   r     1 CONST_PFIL                 6-0-0/d STRC(360)   r     1 CONST_PRECORD
    20-0-0/d STRC(504)   r     1 CONST_READ                 0-0-0/w PTR         r     1 STATIC_TEMP$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ABSOLUTE                 10-0-0/w PTR         r     1 @NODE_COUNT
     7-0-0/w PTR         r     1 @NODE_EXISTS               3-0-0/w PTR         r     1 @PORT
     6-0-0/w PTR         r     1 @READ                      5-0-0/w PTR         r     1 @RELATIVE
    *0-0-0/w STRC(324)   r     1 ABSOLUTE                  26-0-0/w BIT         r     1 ABS_BOF
    24-0-0/w PTR         r     1 ABS_KEY$(0:4)
    27-0-0/w PTR         r     1 ABS_KEY$                  23-0-0/w BIT         r     1 AT_EOF
    37-0-0/w PTR         r     1 BUFFER$                   36-0-0/w PTR         r     1 CAND_KEY$
    37-0-0/w PTR         r     1 CAND_NODE$                14-0-0/w SBIN        r     1 COUNT
    76-0-0/w STRC        r     1 ERR_CODE                  13-0-0/b BIT         r     1 EXISTS
    23-0-0/w BIT         r     1 EXT_RECORD_CLEARED        32-0-0/w SBIN        r     1 FIXED_KEY_LEN
    22-0-0/w BIT         r     1 FORCE_MONITOR_CALL        21-0-0/w BIT         r     1 FORCE_PRECORD
    31-0-0/w PTR         r     1 FOUND_NODE$(0:4)
    42-0-0/d STRC(144)   r     1 FPT_PFIL                  64-0-0/d STRC(360)   r     1 FPT_PRECORD
    46-0-0/d STRC(504)   r     1 FPT_READ                  34-0-0/d VECT        r     1 KEY_
    21-0-0/w SBIN        r     1 LEVEL                    101-0-0/w SBIN        r     1 LEVEL
    36-0-0/w SBIN        r     1 NB_BUFFER                 *0-0-0/w SBIN        r     1 NODE_COUNT
    *0-0-0/w BIT         r     1 NODE_EXISTS               16-0-0/w EPTR        r     1 NODE_READER$$
    *0-0-0/w STRC(1944)  r     1 PORT
    24-0-0/w BIT         r     1 PORT_ALREADY_AT_ABS_KEY
    40-0-0/w BIT         r     1 PORT_AT_REQ_LOC           33-0-0/w PTR         r     1 PORT_DCB$
    30-0-0/w PTR         r     1 PORT_KEY$                 31-0-0/w UBIN        r     1 PORT_KEY_VALUE
    *0-0-0/w BIT         r     1 READ                      15-0-0/w SBIN        r     1 READ_LEVEL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:127  
    40-0-0/w PTR         r     1 REC_SPEC$                 22-0-0/w SBIN        r     1 REL
    25-0-0/w SBIN        r     1 REL                       *0-0-0/w SBIN        r     1 RELATIVE
    11-0-0/w PTR         r     1 STRUCTURE_NODE$           17-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w EPTR        r     1 VD_NODE_READERS$$(0:0)
     0-0-0/c CHAR(255)   r     1 VD_STATIC_TEMP

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 ABS$KEY                    0-0-0/w STRC(2448)  r     1 B$ALT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w ASTR(90)    r     1 BUFFER
     0-0-0/w ASTR(9)     r     1 CAND$KEY                   0-0-0/w STRC(468)   r     1 CAND$NODE
     0-0-0/w STRC(180)   r     1 ERR$TAIL                   0-0-0/w ASTR(9)     r     1 KEY
     0-0-0/d ASTR(3528)  r     1 PORT$DCB                   0-0-0/w ASTR(9)     r     1 PORT$KEY
     0-0-0/w ASTR(9)     r     1 REC$SPEC                   0-0-0/c ASTR(0)     r     1 STATIC$TEMP_FIXED
     0-0-0/w SBIN        r     1 STATIC$TEMP_NUM            0-0-0/w ASTR(9)     r     1 STATIC$TEMP_TEXTC
     0-0-0/w STRC(468)   r     1 STRUCTURE$NODE             0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(468)   r     1 VD$FILE_NODE
     0-0-0/w STRC        r     1 VD$TEXTC_NUMBER            0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$PREAD requires 1390 words for executable code.
   Procedure VDA$PREAD requires 72 words of local(AUTO) storage.
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:128  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:129  
          MINI XREF LISTING

ABS$KEY.BYTES IN PROCEDURE READ_EXTERNAL
      5336**DCL      5736>>IF       5747>>ASSIGN   5750>>ASSIGN
ABS$KEY.LENGTH# IN PROCEDURE READ_EXTERNAL
      5334**DCL      5336--IMP-SIZ  5736>>IF       5747>>ASSIGN   5749>>ASSIGN   5750>>ASSIGN
ABSOLUTE
      3804**DCL       123--PROC     4783>>IF       5635>>IF
ABSOLUTE.EOF
      3822**DCL      4774>>IF       5637>>IF       5683>>IF       5705>>IF       5723>>ASSIGN   5733>>IF
ABSOLUTE.KEY
      3818**DCL      4814>>IF       5637>>IF
ABSOLUTE.KEY.REP#
      3820**DCL      4827>>IF       5647>>IF
ABSOLUTE.KEY.V$
      3820**DCL      4827>>ASSIGN   4827--ASSIGN   5647>>ASSIGN   5647--ASSIGN
ABS_BOF IN PROCEDURE READ_EXTERNAL
      5216**DCL      5633<<ASSIGN   5636<<ASSIGN   5683>>IF       5705>>IF       5711>>ASSIGN   5724>>IF
      5733>>IF
ABS_KEY$ IN PROCEDURE READ_EXTERNAL
      5217**DCL      5326--IMP-PTR  5634<<ASSIGN   5647<<ASSIGN   5647<<ASSIGN   5683>>IF       5690>>ASSIGN
      5692<<ASSIGN   5733>>IF       5736>>IF       5736>>IF       5747>>ASSIGN   5747>>ASSIGN   5749>>ASSIGN
      5750>>ASSIGN   5750>>ASSIGN
ABS_KEY$ IN PROCEDURE READ_INTERNAL
      4371**DCL      4739<<ASSIGN   4745<<ASSIGN   4827<<ASSIGN   4827<<ASSIGN   4865>>IF       4865>>IF
      4867>>IF       4867>>IF       4885>>IF       4885>>IF       4889>>IF       4889>>IF
AT_EOF IN PROCEDURE READ_INTERNAL
      4370**DCL      4735<<ASSIGN   4781<<ASSIGN   4789<<ASSIGN   4835<<ASSIGN   4903<<ASSIGN   4930>>IF
      4947>>IF       4947<<ASSIGN   4968<<ASSIGN   4980>>IF       5002>>IF
B$ALT.CODE IN PROCEDURE READ_EXTERNAL
      5533**DCL      5533--REDEF    5534--REDEF    5534--REDEF
B$ALT.ERR IN PROCEDURE READ_EXTERNAL
      5534**DCL      5811>>ASSIGN   5882>>ASSIGN   5978>>ASSIGN
B$ALT.ERR.ERR# IN PROCEDURE READ_EXTERNAL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:130  
      5535**DCL      5535--REDEF
B$ALT.EVID IN PROCEDURE READ_EXTERNAL
      5534**DCL      5534--REDEF    5534--REDEF
B$TCB.ALT$ IN PROCEDURE READ_EXTERNAL
      5529**DCL      5811>>ASSIGN   5882>>ASSIGN   5978>>ASSIGN
B$TCB$
      3844**DCL      5529--IMP-PTR  5811>>ASSIGN   5882>>ASSIGN   5978>>ASSIGN
BUFFER IN PROCEDURE READ_EXTERNAL
      5446**DCL      5879<>CALL
BUFFER.BYTES IN PROCEDURE READ_EXTERNAL
      5474**DCL      5869--ASSIGN
BUFFER.LENGTH# IN PROCEDURE READ_EXTERNAL
      5472**DCL      5474--IMP-SIZ  5868<<ASSIGN   5869>>ASSIGN   5879>>CALL     5966<<ASSIGN
BUFFER$ IN PROCEDURE READ_EXTERNAL
      5224**DCL      5446--IMP-PTR  5864<>CALL     5868>>ASSIGN   5869>>ASSIGN   5869>>ASSIGN   5879>>CALL
      5879>>CALL     5915<>CALL     5965>>ASSIGN   5966>>ASSIGN
CAND$KEY.BYTES IN PROCEDURE READ_INTERNAL
      4396**DCL      4865>>IF       4867>>IF       4885>>IF       4889>>IF
CAND$KEY.LENGTH# IN PROCEDURE READ_INTERNAL
      4394**DCL      4396--IMP-SIZ  4865>>IF       4867>>IF       4885>>IF       4889>>IF
CAND$NODE.DESC.DATA$ IN PROCEDURE READ_INTERNAL
      4513**DCL      5043>>IF       5044>>CALL     5044>>CALL
CAND$NODE.DESC.KEY IN PROCEDURE READ_INTERNAL
      4495**DCL      5023>>ASSIGN
CAND$NODE.DESC.KEY.REP# IN PROCEDURE READ_INTERNAL
      4497**DCL      4882>>IF       5023>>IF
CAND$NODE.DESC.KEY.V$ IN PROCEDURE READ_INTERNAL
      4497**DCL      4882>>ASSIGN   4882--ASSIGN   5023>>CALL     5023>>CALL
CAND$NODE.DESC.SPEC IN PROCEDURE READ_INTERNAL
      4509**DCL      5040>>ASSIGN
CAND$NODE.DESC.SPEC.REP# IN PROCEDURE READ_INTERNAL
      4511**DCL      5040>>IF
CAND$NODE.DESC.SPEC.V$ IN PROCEDURE READ_INTERNAL
      4511**DCL      5040>>CALL     5040>>CALL
CAND$NODE.FLINK$ IN PROCEDURE READ_INTERNAL
      4458**DCL      4778>>ASSIGN   4896>>ASSIGN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:131  
CAND_KEY$ IN PROCEDURE READ_INTERNAL
      4373**DCL      4386--IMP-PTR  4862<<ASSIGN   4862<<ASSIGN   4865>>IF       4865>>IF       4867>>IF
      4867>>IF       4882<<ASSIGN   4882<<ASSIGN   4885>>IF       4885>>IF       4889>>IF       4889>>IF
CAND_NODE$ IN PROCEDURE READ_INTERNAL
      4374**DCL      4432--IMP-PTR  4776<<ASSIGN   4777>>DOWHILE  4778<<ASSIGN   4778>>ASSIGN   4843<<ASSIGN
      4845>>IF       4869<<ASSIGN   4873>>DOWHILE  4882>>IF       4882>>ASSIGN   4882>>ASSIGN   4887>>ASSIGN
      4891>>ASSIGN   4896<<ASSIGN   4896>>ASSIGN   5006<<ASSIGN   5007>>ASSIGN   5008>>IF       5023>>ASSIGN
      5023>>IF       5023>>CALL     5023>>CALL     5040>>ASSIGN   5040>>IF       5040>>CALL     5040>>CALL
      5043>>IF       5044>>CALL     5044>>CALL
CHECK_FOR_FLUSH IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6176**LABEL    6181--EXIT
CLEAR_LEVEL_REGISTERS
      6046**PROC     4999--CALL     5712--CALL     5788--CALL     5853--CALL
CLEAR_LEVEL_REGISTERS_FAILED IN PROCEDURE READ_EXTERNAL
      5991**LABEL    5712--CALLALT  5788--CALLALT  5853--CALLALT
CLEAR_LEVEL_REGISTERS_FAILED IN PROCEDURE READ_INTERNAL
      5053**LABEL    4999--CALLALT
CONST_PFIL
      3956**DCL      5708>>ASSIGN
CONST_PFIL.V
      3956**DCL      3956--DCLINIT
CONST_PRECORD
      3971**DCL      5674>>ASSIGN
CONST_PRECORD.V
      3973**DCL      3971--DCLINIT
CONST_READ
      3998**DCL      5677>>ASSIGN
CONST_READ.STATION_
      4001**DCL      4002--REDEF
CONST_READ.V
      4002**DCL      3998--DCLINIT
CONST_READ.V.DVBYTE.REREAD#
      4013**DCL      4013--REDEF
CONST_READ.V.INDX#
      4011**DCL      4011--REDEF
COUNT
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:132  
      4026**DCL      4281<<ASSIGN   4288>>ASSIGN   4733<<ASSIGN   4779<<ASSIGN   4779>>ASSIGN   4897<<ASSIGN
      4897>>ASSIGN   4957<<ASSIGN   4957>>ASSIGN
EACH_LEVEL IN PROCEDURE READ_INTERNAL
      4838**LABEL    4841--EXIT     4893--EXIT     4904--EXIT
ERR$TAIL.DCB#
      4228**DCL      5991<<ASSIGN
ERR$TAIL.ERR
      4223**DCL      5988<<ASSIGN
ERR$TAIL.ERR.CODE#
      4225**DCL      5987>>IF       5989<<ASSIGN
ERR_CODE IN PROCEDURE READ_EXTERNAL
      5309**DCL      5794<<ASSIGN   5811<<ASSIGN   5816<>CALL     5817<>CALL     5870<<ASSIGN   5882<<ASSIGN
      5918<>CALL     5948>>ASSIGN
ERR_CODE.CODE# IN PROCEDURE READ_EXTERNAL
      5313**DCL      5812>>IF       5883>>DOCASE   5930>>DOCASE
EXISTS
      4025**DCL      4286>>ASSIGN   4732<<ASSIGN   4806<<ASSIGN   4840<<ASSIGN   4892<<ASSIGN   4902<<ASSIGN
      4911<<ASSIGN   5625<<ASSIGN   5813<<ASSIGN   5885<<ASSIGN   5975<<ASSIGN   5986<<ASSIGN
EXT_RECORD_CLEARED IN PROCEDURE READ_EXTERNAL
      5213**DCL      5629<<ASSIGN   5714<<ASSIGN   5790<<ASSIGN   5852>>IF
FIXED_KEY_LEN IN PROCEDURE READ_EXTERNAL
      5220**DCL      5526--IMP-SIZ  5699<<ASSIGN   5700>>ASSIGN   5747>>ASSIGN   5817<>CALL     5918<>CALL
FORCE_MONITOR_CALL IN PROCEDURE READ_EXTERNAL
      5212**DCL      5628<<ASSIGN   5779<<ASSIGN   5783>>IF       5822<<ASSIGN   5835>>IF
FORCE_PRECORD IN PROCEDURE READ_EXTERNAL
      5211**DCL      5627<<ASSIGN   5729<<ASSIGN   5783>>IF
FOUND_NODE$ IN PROCEDURE READ_INTERNAL
      4372**DCL      4738<<ASSIGN   4740>>IF       4741<>CALL     4744<<ASSIGN   4786<<ASSIGN   4786>>ASSIGN
      4788>>IF       4792>>DOWHILE  4794<<ASSIGN   4794>>ASSIGN   4796>>DOWHILE  4796>>DOWHILE  4800<<ASSIGN
      4800>>ASSIGN   4833>>IF       4839>>IF       4843>>ASSIGN   4866<<ASSIGN   4873>>DOWHILE  4887<<ASSIGN
      4891<<ASSIGN   4901>>IF       4907>>IF       4908>>IF       4928>>IF       4933<<ASSIGN   4933>>ASSIGN
      4935>>IF       4941>>IF       4942>>DOUNTIL  4942>>DOUNTIL  4948<<ASSIGN   4948>>ASSIGN   4950<<ASSIGN
      4950>>ASSIGN   4960>>IF       4963<<ASSIGN   4963>>ASSIGN   4990>>IF       5006>>ASSIGN
FPT_PFIL IN PROCEDURE READ_EXTERNAL
      5237**DCL      5708<<ASSIGN   5721<>CALL
FPT_PFIL.V IN PROCEDURE READ_EXTERNAL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:133  
      5237**DCL      5709--ASSIGN
FPT_PFIL.V.BOF# IN PROCEDURE READ_EXTERNAL
      5238**DCL      5711<<ASSIGN   5717<>CALL
FPT_PFIL.V.DCB# IN PROCEDURE READ_EXTERNAL
      5237**DCL      5710<<ASSIGN   5717<>CALL
FPT_PFIL.V_ IN PROCEDURE READ_EXTERNAL
      5237**DCL      5709<<ASSIGN
FPT_PRECORD IN PROCEDURE READ_EXTERNAL
      5291**DCL      5674<<ASSIGN   5809<>CALL     5905<>CALL
FPT_PRECORD.KEY_ IN PROCEDURE READ_EXTERNAL
      5291**DCL      5792<<ASSIGN   5797<>CALL     5816<>CALL
FPT_PRECORD.V IN PROCEDURE READ_EXTERNAL
      5293**DCL      5675--ASSIGN
FPT_PRECORD.V.DCB# IN PROCEDURE READ_EXTERNAL
      5293**DCL      5676<<ASSIGN   5797<>CALL
FPT_PRECORD.V.KEYS# IN PROCEDURE READ_EXTERNAL
      5294**DCL      5755<<ASSIGN   5783>>IF       5797<>CALL     5799>>IF
FPT_PRECORD.V.N# IN PROCEDURE READ_EXTERNAL
      5297**DCL      5793<<ASSIGN   5797<>CALL     5904<<ASSIGN
FPT_PRECORD.V_ IN PROCEDURE READ_EXTERNAL
      5291**DCL      5675<<ASSIGN
FPT_READ IN PROCEDURE READ_EXTERNAL
      5258**DCL      5677<<ASSIGN   5874<>CALL
FPT_READ.BUF_ IN PROCEDURE READ_EXTERNAL
      5260**DCL      5869<<ASSIGN
FPT_READ.KEY_ IN PROCEDURE READ_EXTERNAL
      5258**DCL      5856<<ASSIGN   5872<>CALL     5915<>CALL
FPT_READ.STATION_ IN PROCEDURE READ_EXTERNAL
      5261**DCL      5262--REDEF
FPT_READ.V IN PROCEDURE READ_EXTERNAL
      5262**DCL      5678--ASSIGN
FPT_READ.V.DCB# IN PROCEDURE READ_EXTERNAL
      5262**DCL      5679<<ASSIGN   5872<>CALL
FPT_READ.V.DVBYTE.REREAD# IN PROCEDURE READ_EXTERNAL
      5273**DCL      5273--REDEF
FPT_READ.V.INDX# IN PROCEDURE READ_EXTERNAL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:134  
      5271**DCL      5271--REDEF
FPT_READ.V.KEYR# IN PROCEDURE READ_EXTERNAL
      5263**DCL      5791<<ASSIGN   5872<>CALL     5887<<ASSIGN   5917>>IF
FPT_READ.V.KEYS# IN PROCEDURE READ_EXTERNAL
      5263**DCL      5753<<ASSIGN   5835>>IF       5842>>IF       5872<>CALL     5881<<ASSIGN   5886<<ASSIGN
FPT_READ.V_ IN PROCEDURE READ_EXTERNAL
      5258**DCL      5678<<ASSIGN
GET_ABS_KEYS IN PROCEDURE READ_INTERNAL
      4813**LABEL    4816--EXIT
GET_COMPLETE_RECORD IN PROCEDURE READ_EXTERNAL
      5863**LABEL    5876--EXIT     5901--EXIT     5909--EXIT
KEY.BYTES IN PROCEDURE READ_INTERNAL
      4419**DCL      4865>>IF       4867>>IF       4885>>IF       4889>>IF
KEY.LENGTH# IN PROCEDURE READ_INTERNAL
      4417**DCL      4419--IMP-SIZ  4865>>IF       4867>>IF       4885>>IF       4889>>IF
KEY_ IN PROCEDURE READ_EXTERNAL
      5222**DCL      5695<<ASSIGN   5697<<ASSIGN   5700<<ASSIGN   5792>>ASSIGN   5856>>ASSIGN
LEVEL IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6050**DCL      6176<<DOINDEX  6177>>IF       6177>>IF       6188<<DOINDEX  6196>>IF       6196>>CALL
      6196>>CALL     6197>>ASSIGN   6199>>IF       6200>>CALL     6200>>CALL     6202>>ASSIGN   6204>>ASSIGN
LEVEL IN PROCEDURE READ_INTERNAL
      4368**DCL      4743<<DOINDEX  4744>>ASSIGN   4745>>ASSIGN   4791<<ASSIGN   4792>>DOWHILE  4792>>DOWHILE
      4794>>ASSIGN   4794>>ASSIGN   4796>>DOWHILE  4796>>DOWHILE  4800>>ASSIGN   4800>>ASSIGN   4803<<ASSIGN
      4803>>ASSIGN   4805>>IF       4813<<DOINDEX  4814>>IF       4815>>ASSIGN   4827>>IF       4827>>ASSIGN
      4827>>ASSIGN   4827>>ASSIGN   4827>>ASSIGN   4838<<DOINDEX  4839>>IF       4843>>ASSIGN   4845>>IF
      4862>>IF       4862>>ASSIGN   4862>>ASSIGN   4865>>IF       4865>>IF       4866>>ASSIGN   4866>>ASSIGN
      4867>>IF       4867>>IF       4869>>ASSIGN   4873>>DOWHILE  4885>>IF       4885>>IF       4887>>ASSIGN
      4889>>IF       4889>>IF       4891>>ASSIGN   4901>>IF       4903>>IF       4907>>IF       4908>>IF
      4932<<DOINDEX  4933>>ASSIGN   4933>>ASSIGN   4935>>IF       4989<<DOINDEX  4990>>IF       4990>>IF
      5005<<DOINDEX  5006>>ASSIGN   5007>>ASSIGN   5023>>ASSIGN   5023>>CALL     5040>>ASSIGN   5040>>CALL
      5044>>CALL
M$PFIL
      2500**DCL-ENT  5721--CALL
M$PRECORD
      2502**DCL-ENT  5809--CALL     5905--CALL
M$READ
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:135  
      2499**DCL-ENT  5874--CALL
MOVING IN PROCEDURE READ_INTERNAL
      4929**LABEL    4936--EXIT     4965--EXIT     4969--EXIT
NB_BUFFER IN PROCEDURE READ_EXTERNAL
      5223**DCL      5857<<ASSIGN   5864>>CALL     5868>>ASSIGN   5900>>IF       5902<<ASSIGN   5902>>ASSIGN
NODE_COUNT
      3827**DCL       123--PROC     4287--IF       4288<<ASSIGN
NODE_EXISTS
      3826**DCL       123--PROC     4285--IF       4286<<ASSIGN
NODE_READER$$
      4028**DCL      4293<<ASSIGN   4295>>IF       4296>>CALL
NODE_READER_FAILED
      4295**LABEL    4296--CALLALT
OALLOC_FAILED IN PROCEDURE READ_EXTERNAL
      5991**LABEL    5864--CALLALT  5946--CALLALT  5976--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6202**LABEL    6185--CALLALT
OCOPY_FAILED IN PROCEDURE READ_INTERNAL
      5053**LABEL    5044--CALLALT
OFREE_FAILED IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6202**LABEL    6200--CALLALT
OFREE_FAILED IN PROCEDURE READ_EXTERNAL
      5991**LABEL    5879--CALLALT
PFIL_FAILED IN PROCEDURE READ_EXTERNAL
      5975**LABEL    5721--CALLALT
PFLUSH_FAILED IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6202**LABEL    6179--CALLALT
PORT
      3706**DCL       123--PROC     4296<>CALL     6179<>CALL
PORT.CURRENT
      3759**DCL      5817<>CALL     5918<>CALL     6185<>CALL
PORT.CURRENT.EOF
      3775**DCL      4845>>IF       4981>>IF       4985>>IF       5003<<ASSIGN   5653>>IF       5686>>IF
      5705>>IF       5723<<ASSIGN   5736>>IF       5835>>IF       5944<<ASSIGN   5954>>IF
PORT.CURRENT.KEY
      3771**DCL      4845>>IF       5023<<ASSIGN   5896<<ASSIGN   5942<<ASSIGN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:136  
PORT.CURRENT.KEY.REP#
      3773**DCL      4862>>IF       5662>>IF       5895>>IF       5941>>IF
PORT.CURRENT.KEY.V$
      3773**DCL      4862>>ASSIGN   4862--ASSIGN   5023<>CALL     5662>>ASSIGN   5662--ASSIGN   5895>>CALL
      5895>>CALL     5941>>CALL     5941>>CALL
PORT.DCB#
      3733**DCL      4274>>IF       5626--ASSIGN   5676>>ASSIGN   5679>>ASSIGN   5710>>ASSIGN   5980>>ASSIGN
      5991>>ASSIGN
PORT.EXIST#
      3732**DCL      4270>>IF
PORT.LAST_OP#
      3734**DCL      5053<<ASSIGN   5715<<ASSIGN   5775>>IF       5775>>IF       5795<<ASSIGN   5860<<ASSIGN
      5956<<ASSIGN
PORT.LEVEL.DATA$
      3793**DCL      5044<>CALL     5835>>IF       5965<<ASSIGN   6199>>IF       6200>>CALL     6200>>CALL
      6202<<ASSIGN
PORT.LEVEL.DATA_MODIFIED
      3793**DCL      6177>>IF
PORT.LEVEL.INTERNAL$
      3793**DCL      4738>>ASSIGN   4776>>ASSIGN   4866>>ASSIGN   4869>>ASSIGN   4990>>IF       5007<<ASSIGN
      6204<<ASSIGN
PORT.LEVEL.KEY_TYPE#
      3777**DCL      5817<>CALL     5918<>CALL
PORT.LEVEL.ORG#
      3777**DCL      5681>>DOCASE   5702<>CALL     5746>>IF       5817<>CALL     5903>>IF       5918<>CALL
PORT.LEVEL.SPEC
      3789**DCL      5040<<ASSIGN   6197<<ASSIGN
PORT.LEVEL.SPEC.REP#
      3791**DCL      5961<<ASSIGN   6196>>IF
PORT.LEVEL.SPEC.TYPE#
      3791**DCL      4291>>IF       4292<>CALL     4293>>ASSIGN   5960<<ASSIGN
PORT.LEVEL.SPEC.V$
      3791**DCL      5040<>CALL     5958>>IF       5962--ASSIGN   6196>>CALL     6196>>CALL
PORT.LEVEL.SPEC_MODIFIED
      3793**DCL      6177>>IF
PORT.STRUCTURE$
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:137  
      3734**DCL      4272>>ASSIGN
PORT$DCB.ACTPOS IN PROCEDURE READ_EXTERNAL
      5397**DCL      5397--REDEF
PORT$DCB.ARS# IN PROCEDURE READ_EXTERNAL
      5371**DCL      5371--REDEF    5915<>CALL     5966>>ASSIGN
PORT$DCB.ATTR IN PROCEDURE READ_EXTERNAL
      5390**DCL      5391--REDEF
PORT$DCB.BORROW IN PROCEDURE READ_EXTERNAL
      5405**DCL      5405--REDEF    5405--REDEF    5405--REDEF
PORT$DCB.DCBNAME.L IN PROCEDURE READ_EXTERNAL
      5419**DCL      5419--IMP-SIZ
PORT$DCB.DVBYTE IN PROCEDURE READ_EXTERNAL
      5374**DCL      5964>>ASSIGN
PORT$DCB.EOMCHAR# IN PROCEDURE READ_EXTERNAL
      5375**DCL      5375--REDEF
PORT$DCB.FLDID IN PROCEDURE READ_EXTERNAL
      5400**DCL      5400--REDEF
PORT$DCB.FORM$ IN PROCEDURE READ_EXTERNAL
      5394**DCL      5394--REDEF
PORT$DCB.FSECT IN PROCEDURE READ_EXTERNAL
      5410**DCL      5410--REDEF
PORT$DCB.FSN# IN PROCEDURE READ_EXTERNAL
      5387**DCL      5387--REDEF    5387--REDEF    5388--REDEF
PORT$DCB.HEADER$ IN PROCEDURE READ_EXTERNAL
      5393**DCL      5393--REDEF
PORT$DCB.IXTNSIZE# IN PROCEDURE READ_EXTERNAL
      5391**DCL      5391--REDEF
PORT$DCB.KEYL# IN PROCEDURE READ_EXTERNAL
      5388**DCL      5699>>ASSIGN
PORT$DCB.LASTSTA$ IN PROCEDURE READ_EXTERNAL
      5380**DCL      5380--REDEF
PORT$DCB.LVL IN PROCEDURE READ_EXTERNAL
      5406**DCL      5406--REDEF
PORT$DCB.NAME#.C IN PROCEDURE READ_EXTERNAL
      5381**DCL      5381--REDEF
PORT$DCB.NOEOF IN PROCEDURE READ_EXTERNAL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:138  
      5403**DCL      5403--REDEF
PORT$DCB.NRECS# IN PROCEDURE READ_EXTERNAL
      5392**DCL      5392--REDEF    5687>>ASSIGN
PORT$DCB.NRECX IN PROCEDURE READ_EXTERNAL
      5411**DCL      5411--REDEF
PORT$DCB.OHDR IN PROCEDURE READ_EXTERNAL
      5403**DCL      5403--REDEF
PORT$DCB.ORG# IN PROCEDURE READ_EXTERNAL
      5386**DCL      5386--REDEF
PORT$DCB.PRECNO IN PROCEDURE READ_EXTERNAL
      5409**DCL      5409--REDEF
PORT$DCB.RCSZ IN PROCEDURE READ_EXTERNAL
      5415**DCL      5415--REDEF
PORT$DCB.RES# IN PROCEDURE READ_EXTERNAL
      5382**DCL      5382--REDEF
PORT$DCB.SETX IN PROCEDURE READ_EXTERNAL
      5394**DCL      5394--REDEF
PORT$DCB.TAB$ IN PROCEDURE READ_EXTERNAL
      5394**DCL      5394--REDEF
PORT$DCB.TDA IN PROCEDURE READ_EXTERNAL
      5408**DCL      5409--REDEF
PORT$DCB.WSN# IN PROCEDURE READ_EXTERNAL
      5382**DCL      5382--REDEF
PORT$KEY.BYTES IN PROCEDURE READ_EXTERNAL
      5359**DCL      5736>>IF
PORT$KEY.LENGTH# IN PROCEDURE READ_EXTERNAL
      5357**DCL      5359--IMP-SIZ  5736>>IF
PORT_ALREADY_AT_ABS_KEY IN PROCEDURE READ_EXTERNAL
      5214**DCL      5630<<ASSIGN   5693<<ASSIGN   5738<<ASSIGN   5759>>IF       5835>>IF
PORT_AT_REQ_LOC IN PROCEDURE READ_INTERNAL
      4375**DCL      4979<<ASSIGN   4982<<ASSIGN   4986<<ASSIGN   4991<<ASSIGN   4997>>IF
PORT_AT_REQ_LOC_TEST IN PROCEDURE READ_INTERNAL
      4989**LABEL    4992--EXIT
PORT_DCB$ IN PROCEDURE READ_EXTERNAL
      5221**DCL      5365--IMP-PTR  5626<<ASSIGN   5687>>ASSIGN   5699>>ASSIGN   5915>>CALL     5964>>ASSIGN
      5966>>ASSIGN
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:139  
PORT_KEY$ IN PROCEDURE READ_EXTERNAL
      5218**DCL      5349--IMP-PTR  5652<<ASSIGN   5662<<ASSIGN   5662<<ASSIGN   5689>>ASSIGN   5736>>IF
      5736>>IF
PORT_KEY_VALUE IN PROCEDURE READ_EXTERNAL
      5219**DCL      5687<<ASSIGN   5689<<ASSIGN   5690>>ASSIGN
PRECORD_FAILED IN PROCEDURE READ_EXTERNAL
      5980**LABEL    5817--CALLALT  5905--CALLALT
READ
      3825**DCL       123--PROC     4290>>IF       5620>>IF       5724>>IF       5752>>IF       5783>>IF
      5835>>IF
READ_EXTERNAL
      5208**PROC     4279--CALL
READ_EXTERNAL_FAILED
      4295**LABEL    4279--CALLALT
READ_FAILED IN PROCEDURE READ_EXTERNAL
      5980**LABEL    5918--CALLALT  5950--GOTO
READ_INTERNAL
      4365**PROC     4275--CALL
READ_INTERNAL_FAILED
      4295**LABEL    4275--CALLALT
READ_LEVEL
      4027**DCL      4282<<ASSIGN   4291>>IF       4292>>CALL     4293>>ASSIGN   4734<<ASSIGN   4776>>ASSIGN
      4792>>DOWHILE  4805>>IF       4815<<ASSIGN   4838>>DOINDEX  4928>>IF       4932>>DOINDEX  4941>>IF
      4942>>DOUNTIL  4942>>DOUNTIL  4948>>ASSIGN   4948>>ASSIGN   4950>>ASSIGN   4950>>ASSIGN   4960>>IF
      4963>>ASSIGN   4963>>ASSIGN   4989>>DOINDEX  5005>>DOINDEX
REC$SPEC.BYTES IN PROCEDURE READ_EXTERNAL
      5497**DCL      5964<<ASSIGN
REC$SPEC.LENGTH# IN PROCEDURE READ_EXTERNAL
      5495**DCL      5497--IMP-SIZ  5963<<ASSIGN   5964>>ASSIGN
REC_SPEC$ IN PROCEDURE READ_EXTERNAL
      5225**DCL      5487--IMP-PTR  5962<<ASSIGN   5963>>ASSIGN   5964>>ASSIGN   5964>>ASSIGN
REL IN PROCEDURE READ_EXTERNAL
      5215**DCL      5631<<ASSIGN   5690<<ASSIGN   5690>>ASSIGN   5752>>IF       5777<<ASSIGN   5777>>ASSIGN
      5783>>IF       5793>>ASSIGN   5835>>IF
REL IN PROCEDURE READ_INTERNAL
      4369**DCL      4736<<ASSIGN   4907>>IF       4910<<ASSIGN   4928>>IF       4930>>IF       4939>>DOUNTIL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:140  
      4946>>IF       4953>>IF       4953<<ASSIGN   4953>>ASSIGN   4956<<ASSIGN   4956>>ASSIGN   4961>>IF
RELATIVE
      3824**DCL       123--PROC     4736>>ASSIGN   5631>>ASSIGN
STATIC$TEMP_FIXED.BYTES IN PROCEDURE READ_EXTERNAL
      5526**DCL      5700--ASSIGN   5747<<ASSIGN
STATIC$TEMP_NUM IN PROCEDURE READ_EXTERNAL
      5527**DCL      5695--ASSIGN
STATIC$TEMP_TEXTC.BYTES IN PROCEDURE READ_EXTERNAL
      5520**DCL      5750<<ASSIGN
STATIC$TEMP_TEXTC.LENGTH# IN PROCEDURE READ_EXTERNAL
      5518**DCL      5520--IMP-SIZ  5749<<ASSIGN   5750>>ASSIGN
STATIC_TEMP$
      3944**DCL      5510--IMP-PTR  5525--IMP-PTR  5527--IMP-PTR  5695>>ASSIGN   5700>>ASSIGN   5747>>ASSIGN
      5749>>ASSIGN   5750>>ASSIGN   5750>>ASSIGN
STRUCTURE$NODE.COUNT#
      4123**DCL      4734>>ASSIGN   4813>>DOINDEX  6176>>DOINDEX  6188>>DOINDEX
STRUCTURE_NODE$
      4023**DCL      4040--IMP-PTR  4272<<ASSIGN   4734>>ASSIGN   4813>>DOINDEX  6176>>DOINDEX  6188>>DOINDEX
VD$BUFFER IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6139**DCL      6200<>CALL
VD$BUFFER.LENGTH# IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6165**DCL      6167--IMP-SIZ  6200>>CALL
VD$BUFFER IN PROCEDURE READ_INTERNAL
      4696**DCL      5044<>CALL
VD$BUFFER.LENGTH# IN PROCEDURE READ_INTERNAL
      4722**DCL      4724--IMP-SIZ  5044>>CALL
VD$BUFFER_HEADER
      4239**DCL      5864--CALL
VD$ERR.DCB#
      4175**DCL      5980<<ASSIGN
VD$ERR.ERR
      4170**DCL      5948<<ASSIGN   5978<<ASSIGN
VD$ERR.FLAGLEV#
      4175**DCL      5949<<ASSIGN   5979<<ASSIGN
VD$FILE_NODE.ACCESS IN PROCEDURE READ_INTERNAL
      4563**DCL      4796>>DOWHILE  4908>>IF       4942>>DOUNTIL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:141  
VD$FILE_NODE.BLINK$ IN PROCEDURE READ_INTERNAL
      4551**DCL      4948>>ASSIGN
VD$FILE_NODE.FLINK$ IN PROCEDURE READ_INTERNAL
      4551**DCL      4800>>ASSIGN   4950>>ASSIGN
VD$FILE_NODE.HEAD$ IN PROCEDURE READ_INTERNAL
      4608**DCL      4786>>ASSIGN   4794>>ASSIGN   4833>>IF       4843>>ASSIGN   4963>>ASSIGN
VD$FILE_NODE.TAIL$ IN PROCEDURE READ_INTERNAL
      4608**DCL      4933>>ASSIGN
VD$TEXTC_NUMBER.BYTES# IN PROCEDURE READ_EXTERNAL
      5612**DCL      5689>>ASSIGN   5690>>ASSIGN
VD$TEXTC_REMOTE IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6078**DCL      6196<>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE CLEAR_LEVEL_REGISTERS
      6107**DCL      6109--IMP-SIZ  6196>>CALL
VD$TEXTC_REMOTE IN PROCEDURE READ_EXTERNAL
      5564**DCL      5895<>CALL     5941<>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE READ_EXTERNAL
      5593**DCL      5595--IMP-SIZ  5647--ASSIGN   5662--ASSIGN   5895>>CALL     5941>>CALL
VD$TEXTC_REMOTE IN PROCEDURE READ_INTERNAL
      4635**DCL      5023<>CALL     5040<>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE READ_INTERNAL
      4664**DCL      4666--IMP-SIZ  4827--ASSIGN   4862--ASSIGN   4882--ASSIGN   5023>>CALL     5040>>CALL
VDA$PFLUSH
      3830**DCL-ENT  6179--CALL
VDG$BUILD_LOCATION
      3835**DCL-ENT  5817--CALL     5918--CALL
VDG$ESCREECH
      3836**DCL-ENT  4271--CALL     4292--CALL     4741--CALL     5702--CALL
VDG$MACC_PREAD_AF_PRECORD
      3838**DCL-ENT  5816--CALL
VDG$MACC_PREAD_AF_READ
      3840**DCL-ENT  5915--CALL
VDG$MACC_PREAD_B4_PRECORD
      3837**DCL-ENT  5797--CALL
VDG$MACC_PREAD_B4_READ
      3839**DCL-ENT  5872--CALL
PL6.E3A0      #001=VDA$PREAD File=VDA$PORT.:VDA5TSI                              FRI 07/04/97 11:07 Page:142  
VDG$MACC_PREAD_PFIL
      3841**DCL-ENT  5717--CALL
VDG$OALLOC
      3834**DCL-ENT  5864--CALL     5946--CALL     5976--CALL
VDG$OCLEAR_LOCATION
      3832**DCL-ENT  6185--CALL
VDG$OCOPY
      3833**DCL-ENT  5023--CALL     5040--CALL     5044--CALL
VDG$OFREE
      3831**DCL-ENT  5879--CALL     5895--CALL     5941--CALL     6196--CALL     6200--CALL
VD_$$MON_ACC.V#
      3940**DCL      5716>>IF       5796>>IF       5815>>IF       5871>>IF       5914>>IF
VD_6E.ERR_TAIL$
      3877**DCL      4186--IMP-PTR  5987>>IF       5988>>ASSIGN   5989>>ASSIGN   5991>>ASSIGN
VD_6E.STATS#
      3878**DCL      5618<<ASSIGN   5618>>ASSIGN   5622<<ASSIGN   5622>>ASSIGN   5719<<ASSIGN   5719>>ASSIGN
      5801<<ASSIGN   5801>>ASSIGN   5806<<ASSIGN   5806>>ASSIGN   5844<<ASSIGN   5844>>ASSIGN   5849<<ASSIGN
      5849>>ASSIGN
VD_ACCESSOR_PRIV.ACCESS
      3894**DCL      4796>>DOWHILE  4908>>IF       4942>>DOUNTIL
VD_ERR$
      4029**DCL      4133--IMP-PTR  5946<>CALL     5948>>ASSIGN   5949>>ASSIGN   5976<>CALL     5978>>ASSIGN
      5979>>ASSIGN   5980>>ASSIGN
VD_NODE_READERS$$
      3881**DCL      4293>>ASSIGN
VD_STATIC_TEMP
      3897**DCL      3944--DCLINIT  5697--ASSIGN   5817<>CALL     5918<>CALL

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:143  
     1113        1        /*T***********************************************************/
     1114        2        /*T*                                                         */
     1115        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1116        4        /*T*                                                         */
     1117        5        /*T***********************************************************/
     1118        6
     1119        7        /*D* NAME: VDA$PWRITE
     1120        8            PARAMETERS:
     1121        9                PORT - VD$PORT to use.  Must be open to an internal or external
     1122       10                    file.  PORT.CURRENT and the port's .INTERNAL$s at all
     1123       11                    levels must be valid, and positioned to the node to
     1124       12                    be written.  At WRITE_LEVEL, the port's Spec and Data
     1125       13                    components, if present, should be copies of those from the
     1126       14                    file (before writing the new components), if any.
     1127       15                WRITE_LEVEL - Level of node to write.  Must not be
     1128       16                    %LVL_FILE or >= # levels in structure (STRUCTURE$NODE.COUNT#).
     1129       17                SPEC - Optional VD$SPEC specifying the new Spec component
     1130       18                    for the node.  If you don't want to affect the
     1131       19                    Spec component, omit this parameter.
     1132       20                    Note - Passing a VD$SPEC which is BASED on a pointer
     1133       21                        which is currently NIL acts as tho you omitted
     1134       22                        the parameter -- the Spec component isn't affected.
     1135       23                    Note - Any dynamic storage pointed-to by SPEC will no
     1136       24                        longer be owned by the caller after this call!!
     1137       25                        Give me a Spec and I keep it, not you.  See SPEC
     1138       26                        under OUTPUT comments.
     1139       27                DATA - Optional VD$BUFFER containing the new Data component
     1140       28                    for the node.  If you don't want to affect the
     1141       29                    Data component, omit this parameter.
     1142       30                    Note - Passing a VD$BUFFER which is BASED on a pointer
     1143       31                        which is currently NIL acts as tho you omitted
     1144       32                        the parameter -- the Data component isn't affected.
     1145       33                    Note - DATA must reside in either dynamic storage, static,
     1146       34                        or constant -- never the caller's auto storage!!
     1147       35                        If DATA resides in dynamic (as indicated by having a
     1148       36                        non-0 .OBJECT.SIZE#), it will no longer be owned
     1149       37                        by the caller after this call.
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:144  
     1150       38                        Give me a Data buffer and I keep it, not you.  See
     1151       39                        DATA under OUTPUT comments.
     1152       40            OUTPUT:
     1153       41                Upon normal return:
     1154       42                    SPEC will be %CLEAR; the Port now owns the SPEC and
     1155       43                        any dynamic storage pointed-to by SPEC.V$.
     1156       44                    DATA -- if it's dynamic -- will no longer be owned by the
     1157       45                        caller.  The Port owns it now.  The caller should
     1158       46                        spoil it's pointer to the DATA VD$BUFFER.
     1159       47                Upon non-fatal altreturns, SPEC and DATA will be untouched.
     1160       48                    The caller will still own any dynamic storage associated
     1161       49                    with them.
     1162       50                PORT.LEVEL.SPEC and/or .DATA for WRITE_LEVEL will contain/point-to
     1163       51                    SPEC/DATA (unchanged if SPEC/DATA omitted).
     1164       52                For internal files, the VD$FILE_NODE for the node will
     1165       53                    have new copies of the components changed by the write.
     1166       54                PORT.LEVEL.SPEC_MODIFIED and/or .DATA_MODIFIED for WRITE_LEVEL
     1167       55                    will be set.
     1168       56                PORT.LAST_OP will be set.
     1169       57            DESCRIPTION:
     1170       58                At WRITE_LEVEL, free the port's current copy of the
     1171       59                    component(s) being written, and make new copies of them
     1172       60                    (SPEC and/or DATA) for the port.
     1173       61                If this is an internal file, free the VD$FILE_NODE's current
     1174       62                    copy of the component(s) being written, and point the
     1175       63                    VD$FILE_NODE to new copies of them (SPEC and/or DATA).
     1176       64        */
     1177       65
     1178       66        VDA$PWRITE: PROC (PORT, WRITE_LEVEL, SPEC, DATA) ALTRET;
     1179       67
     1180       68
     1181       69        %INCLUDE VD_MACROS_M;
     1182     2284        %INCLUDE VD_PERR_C;
     1183     2432
     1184     2433
     1185     2434        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1186     2532    1   DCL WRITE_LEVEL SBIN;
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:145  
     1187     2533        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
     1188     2547        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
     1189     2605
     1190     2606
     1191     2607
     1192     2608    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1193     2609    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1194     2610    1   DCL VDG$ESCREECH        ENTRY (3);
     1195     2611
     1196     2612
     1197     2613
     1198     2614    1   DCL FILE_NODE$ PTR;
     1199     2615    1   DCL FILE_KEY$ PTR;
     1200     2616    1   DCL NEW_DATA_IS_DIFFERENT BIT(1) ALIGNED;
     1201     2617
     1202     2618
     1203     2619        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     1204     2712        %VD$TEXTC (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     1205     2735        %VD$TEXTC_REMOTE;
     1206     2796        %VD$TEXTC;
     1207     2819        %VD$BUFFER;
     1208     2877
     1209     2878
     1210     2879
     1211     2880    1           IF PORT.EXIST# = 0
     1212     2881    1             OR WRITE_LEVEL <= %LVL_FILE THEN
     1213     2882    1              CALL VDG$ESCREECH (WRITE_LEVEL);
     1214     2883
     1215     2884    1           PORT.LAST_OP# = %ACCOP_WRITE;
     1216     2885
     1217     2886    1           FILE_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);
     1218     2887
     1219     2888    2           IF ADDR(SPEC) ~= ADDR(NIL) THEN DO;
     1220     2889    3              IF PORT.DCB# = 0 THEN DO;
     1221     2890                      /*
     1222     2891                      *  For internal files, we should give the original
     1223     2892                      *     copy of the Spec to the FileNode, and make a
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:146  
     1224     2893                      *     new copy for the Port's registers.  This is
     1225     2894                      *     because, for VD$WINDOW_SPECs, their .STREAM$s
     1226     2895                      *     aren't copied.  A window's stream isn't
     1227     2896                      *     important for the Port, but it is of utmost
     1228     2897                      *     importance that the stream be pointed-to by
     1229     2898                      *     the Spec in the FileNode.
     1230     2899                      */
     1231     2900                      %CLEARSPEC (SPEC=FILE$NODE.DESC.SPEC);
     1232     2910    3                 FILE$NODE.DESC.SPEC = SPEC;
     1233     2911                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);
     1234     2921                      %COPYSPEC (FSPEC=SPEC, TSPEC=PORT.LEVEL.SPEC,
     1235     2922                      TINDX=WRITE_LEVEL);
     1236     2938    3                 END;
     1237     2939    3              ELSE DO;
     1238     2940                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);
     1239     2950    3                 PORT.LEVEL.SPEC (WRITE_LEVEL) = SPEC;
     1240     2951    3                 END;
     1241     2952    2              PORT.LEVEL.SPEC_MODIFIED (WRITE_LEVEL) = %TRUE;
     1242     2953    2              SPEC = %CLEAR;       /* Port owns Spec now */
     1243     2954    2              END;
     1244     2955
     1245     2956
     1246     2957    2           IF ADDR(DATA) ~= ADDR(NIL) THEN DO;
     1247     2958    2              NEW_DATA_IS_DIFFERENT = %TRUE;
     1248     2959    3              IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
     1249     2960    3                 IF DATA.LENGTH# =
     1250     2961    3                   PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.LENGTH#
     1251     2962    3                   AND DATA.BYTES =
     1252     2963    3                   PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.BYTES
     1253     2964    3                   AND DATA.FLINK$ = ADDR(NIL)
     1254     2965    3                   AND PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.FLINK$ =
     1255     2966    4                   ADDR(NIL) THEN DO;
     1256     2967                         /* New data = old data:  don't update */
     1257     2968    4                    NEW_DATA_IS_DIFFERENT = %FALSE;
     1258     2969    4                    END;
     1259     2970    3                 END;
     1260     2971
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:147  
     1261     2972    3              IF NEW_DATA_IS_DIFFERENT THEN DO;
     1262     2973    4                 IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
     1263     2974    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)
     1264     2975    4                      ALTRET (OFREE_FAILED);
     1265     2976    4                    END;
     1266     2977    3                 PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(DATA);
     1267     2978    3                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %TRUE;
     1268     2979
     1269     2980    4                 IF PORT.DCB# = 0 THEN DO;
     1270     2981    5                    IF FILE$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;
     1271     2982    5                       CALL VDG$OFREE (FILE$NODE.DESC.DATA$ -> VD$BUFFER)
     1272     2983    5                         ALTRET (OFREE_FAILED);
     1273     2984    5                       END;
     1274     2985    4                    CALL VDG$OCOPY (DATA, FILE$NODE.DESC.DATA$)
     1275     2986    4                      ALTRET (OCOPY_FAILED);
     1276     2987    5                    IF DATA.OBJECT.SIZE# > 0 THEN DO;
     1277     2988                         /*
     1278     2989                         * If DATA is dynamic, make sure it goes in the file.
     1279     2990                         * VDA$WRITERS sometimes points globals at it.
     1280     2991                         * BUT, if it's not dynamic, make a copy so that
     1281     2992                         * VDW$STOW_NODE knows how big the data is.
     1282     2993                         */
     1283     2994    5                       PORT.LEVEL.DATA$ (WRITE_LEVEL) = FILE$NODE.DESC.DATA$;
     1284     2995    5                       FILE$NODE.DESC.DATA$ = ADDR(DATA);
     1285     2996    5                       END;
     1286     2997    4                    FILE$NODE.DESC.EOR = %TRUE;
     1287     2998    4                    END;
     1288     2999    3                 END;
     1289     3000    3              ELSE DO;
     1290     3001    4                 IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
     1291     3002    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)
     1292     3003    4                      ALTRET (OFREE_FAILED);
     1293     3004    4                    END;
     1294     3005    3                 PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(DATA);
     1295     3006    3                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %FALSE;
     1296     3007    3                 END;
     1297     3008    2              END;
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:148  
     1298     3009
     1299     3010    1           RETURN;
     1300     3011
     1301     3012
     1302     3013
     1303     3014    1   OFREE_FAILED: ;
     1304     3015    1   OCOPY_FAILED: ;
     1305     3016    1           ALTRETURN;
     1306     3017
     1307     3018    1   END VDA$PWRITE;
     1308     3019        %EOD;

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:149  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$PWRITE.

   Procedure VDA$PWRITE requires 262 words for executable code.
   Procedure VDA$PWRITE requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:150  

 Object Unit name= VDA$PWRITE                                 File name= VDA$PORT.:VDA5TOU
 UTS= JUL 04 '97 11:07:39.56 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   262    406  VDA$PWRITE
    1  RoData even  none     1      1  VDA$PWRITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDA$PWRITE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:151  


     1113        1        /*T***********************************************************/
     1114        2        /*T*                                                         */
     1115        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1116        4        /*T*                                                         */
     1117        5        /*T***********************************************************/
     1118        6
     1119        7        /*D* NAME: VDA$PWRITE
     1120        8            PARAMETERS:
     1121        9                PORT - VD$PORT to use.  Must be open to an internal or external
     1122       10                    file.  PORT.CURRENT and the port's .INTERNAL$s at all
     1123       11                    levels must be valid, and positioned to the node to
     1124       12                    be written.  At WRITE_LEVEL, the port's Spec and Data
     1125       13                    components, if present, should be copies of those from the
     1126       14                    file (before writing the new components), if any.
     1127       15                WRITE_LEVEL - Level of node to write.  Must not be
     1128       16                    %LVL_FILE or >= # levels in structure (STRUCTURE$NODE.COUNT#).
     1129       17                SPEC - Optional VD$SPEC specifying the new Spec component
     1130       18                    for the node.  If you don't want to affect the
     1131       19                    Spec component, omit this parameter.
     1132       20                    Note - Passing a VD$SPEC which is BASED on a pointer
     1133       21                        which is currently NIL acts as tho you omitted
     1134       22                        the parameter -- the Spec component isn't affected.
     1135       23                    Note - Any dynamic storage pointed-to by SPEC will no
     1136       24                        longer be owned by the caller after this call!!
     1137       25                        Give me a Spec and I keep it, not you.  See SPEC
     1138       26                        under OUTPUT comments.
     1139       27                DATA - Optional VD$BUFFER containing the new Data component
     1140       28                    for the node.  If you don't want to affect the
     1141       29                    Data component, omit this parameter.
     1142       30                    Note - Passing a VD$BUFFER which is BASED on a pointer
     1143       31                        which is currently NIL acts as tho you omitted
     1144       32                        the parameter -- the Data component isn't affected.
     1145       33                    Note - DATA must reside in either dynamic storage, static,
     1146       34                        or constant -- never the caller's auto storage!!
     1147       35                        If DATA resides in dynamic (as indicated by having a
     1148       36                        non-0 .OBJECT.SIZE#), it will no longer be owned
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:152  
     1149       37                        by the caller after this call.
     1150       38                        Give me a Data buffer and I keep it, not you.  See
     1151       39                        DATA under OUTPUT comments.
     1152       40            OUTPUT:
     1153       41                Upon normal return:
     1154       42                    SPEC will be %CLEAR; the Port now owns the SPEC and
     1155       43                        any dynamic storage pointed-to by SPEC.V$.
     1156       44                    DATA -- if it's dynamic -- will no longer be owned by the
     1157       45                        caller.  The Port owns it now.  The caller should
     1158       46                        spoil it's pointer to the DATA VD$BUFFER.
     1159       47                Upon non-fatal altreturns, SPEC and DATA will be untouched.
     1160       48                    The caller will still own any dynamic storage associated
     1161       49                    with them.
     1162       50                PORT.LEVEL.SPEC and/or .DATA for WRITE_LEVEL will contain/point-to
     1163       51                    SPEC/DATA (unchanged if SPEC/DATA omitted).
     1164       52                For internal files, the VD$FILE_NODE for the node will
     1165       53                    have new copies of the components changed by the write.
     1166       54                PORT.LEVEL.SPEC_MODIFIED and/or .DATA_MODIFIED for WRITE_LEVEL
     1167       55                    will be set.
     1168       56                PORT.LAST_OP will be set.
     1169       57            DESCRIPTION:
     1170       58                At WRITE_LEVEL, free the port's current copy of the
     1171       59                    component(s) being written, and make new copies of them
     1172       60                    (SPEC and/or DATA) for the port.
     1173       61                If this is an internal file, free the VD$FILE_NODE's current
     1174       62                    copy of the component(s) being written, and point the
     1175       63                    VD$FILE_NODE to new copies of them (SPEC and/or DATA).
     1176       64        */
     1177       65
     1178       66        VDA$PWRITE: PROC (PORT, WRITE_LEVEL, SPEC, DATA) ALTRET;

     66  0 000000   000000 700200 xent  VDA$PWRITE   TSX0  ! X66_AUTO_4
         0 000001   000014 000004                    ZERO    12,4

     1179       67
     1180       68
     1181       69        %INCLUDE VD_MACROS_M;
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:153  
     1182     2284        %INCLUDE VD_PERR_C;
     1183     2432
     1184     2433
     1185     2434        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1186     2532    1   DCL WRITE_LEVEL SBIN;
     1187     2533        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
     1188     2547        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
     1189     2605
     1190     2606
     1191     2607
     1192     2608    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1193     2609    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1194     2610    1   DCL VDG$ESCREECH        ENTRY (3);
     1195     2611
     1196     2612
     1197     2613
     1198     2614    1   DCL FILE_NODE$ PTR;
     1199     2615    1   DCL FILE_KEY$ PTR;
     1200     2616    1   DCL NEW_DATA_IS_DIFFERENT BIT(1) ALIGNED;
     1201     2617
     1202     2618
     1203     2619        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     1204     2712        %VD$TEXTC (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     1205     2735        %VD$TEXTC_REMOTE;
     1206     2796        %VD$TEXTC;
     1207     2819        %VD$BUFFER;
     1208     2877
     1209     2878
     1210     2879
     1211     2880    1           IF PORT.EXIST# = 0

   2880  0 000002   200003 470500                    LDP0    @PORT,,AUTO
         0 000003   000003 720100                    LXL0    3,,PR0
         0 000004   000010 600000 0                  TZE     s:2882
         0 000005   200004 471500                    LDP1    @WRITE_LEVEL,,AUTO
         0 000006   100000 235100                    LDA     0,,PR1
         0 000007   000014 605400 0                  TPNZ    s:2884
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:154  

     1212     2881    1             OR WRITE_LEVEL <= %LVL_FILE THEN
     1213     2882    1              CALL VDG$ESCREECH (WRITE_LEVEL);

   2882  0 000010   200004 630500                    EPPR0   @WRITE_LEVEL,,AUTO
         0 000011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000012   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000013   000000 011000                    NOP     0

     1214     2883
     1215     2884    1           PORT.LAST_OP# = %ACCOP_WRITE;

   2884  0 000014   000005 220003                    LDX0    5,DU
         0 000015   200003 470500                    LDP0    @PORT,,AUTO
         0 000016   000007 740100                    STX0    7,,PR0

     1216     2885
     1217     2886    1           FILE_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);

   2886  0 000017   200004 471500                    LDP1    @WRITE_LEVEL,,AUTO
         0 000020   100000 236100                    LDQ     0,,PR1
         0 000021   000007 402007                    MPY     7,DL
         0 000022   000031 236106                    LDQ     25,QL,PR0
         0 000023   200007 756100                    STQ     FILE_NODE$,,AUTO

     1218     2887
     1219     2888    2           IF ADDR(SPEC) ~= ADDR(NIL) THEN DO;

   2888  0 000024   200005 236100                    LDQ     @SPEC,,AUTO
         0 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000026   000202 600000 0                  TZE     s:2957

     1220     2889    3              IF PORT.DCB# = 0 THEN DO;

   2889  0 000027   000004 721100                    LXL1    4,,PR0
         0 000030   000134 601000 0                  TNZ     s:2947

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:155  
     1221     2890                      /*
     1222     2891                      *  For internal files, we should give the original
     1223     2892                      *     copy of the Spec to the FileNode, and make a
     1224     2893                      *     new copy for the Port's registers.  This is
     1225     2894                      *     because, for VD$WINDOW_SPECs, their .STREAM$s
     1226     2895                      *     aren't copied.  A window's stream isn't
     1227     2896                      *     important for the Port, but it is of utmost
     1228     2897                      *     importance that the stream be pointed-to by
     1229     2898                      *     the Spec in the FileNode.
     1230     2899                      */
     1231     2900                      %CLEARSPEC (SPEC=FILE$NODE.DESC.SPEC);

   2907  0 000031   200007 473500                    LDP3    FILE_NODE$,,AUTO
         0 000032   300006 722100                    LXL2    6,,PR3
         0 000033   000002 102003                    CMPX2   2,DU
         0 000034   000045 601000 0                  TNZ     s:2908+1

   2907  0 000035   300007 474500                    LDP4    7,,PR3
         0 000036   200012 454500                    STP4    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000037   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000040   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000041   000000 701000 xent               TSX1    VDG$OFREE
         0 000042   000044 702000 0                  TSX2    s:2908
         0 000043   000045 710000 0                  TRA     s:2908+1

   2908  0 000044   000000 702200 xent               TSX2  ! X66_AALT

   2908  0 000045   200007 470500                    LDP0    FILE_NODE$,,AUTO
         0 000046   000006 450100                    STZ     6,,PR0
         0 000047   000007 450100                    STZ     7,,PR0

     1232     2910    3                 FILE$NODE.DESC.SPEC = SPEC;

   2910  0 000050   200005 471500                    LDP1    @SPEC,,AUTO
         0 000051   000100 100500                    MLR     fill='000'O
         0 000052   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         0 000053   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:156  

     1233     2911                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);

   2918  0 000054   200004 473500                    LDP3    @WRITE_LEVEL,,AUTO
         0 000055   300000 236100                    LDQ     0,,PR3
         0 000056   000007 402007                    MPY     7,DL
         0 000057   200003 474500                    LDP4    @PORT,,AUTO
         0 000060   400025 720106                    LXL0    21,QL,PR4
         0 000061   000002 100003                    CMPX0   2,DU
         0 000062   000075 601000 0                  TNZ     s:2919+1

   2918  0 000063   300000 236100                    LDQ     0,,PR3
         0 000064   000007 402007                    MPY     7,DL
         0 000065   400026 475506                    LDP5    22,QL,PR4
         0 000066   200012 455500                    STP5    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000067   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000070   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000071   000000 701000 xent               TSX1    VDG$OFREE
         0 000072   000074 702000 0                  TSX2    s:2919
         0 000073   000075 710000 0                  TRA     s:2919+1

   2919  0 000074   000000 702200 xent               TSX2  ! X66_AALT

   2919  0 000075   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
         0 000076   000000 236100                    LDQ     0,,PR0
         0 000077   000007 402007                    MPY     7,DL
         0 000100   200003 471500                    LDP1    @PORT,,AUTO
         0 000101   100025 450106                    STZ     21,QL,PR1
         0 000102   100026 450106                    STZ     22,QL,PR1

     1234     2921                      %COPYSPEC (FSPEC=SPEC, TSPEC=PORT.LEVEL.SPEC,
     1235     2922                      TINDX=WRITE_LEVEL);

   2935  0 000103   000000 236100                    LDQ     0,,PR0
         0 000104   000007 402007                    MPY     7,DL
         0 000105   000002 736000                    QLS     2
         0 000106   200005 473500                    LDP3    @SPEC,,AUTO
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:157  
         0 000107   000106 100500                    MLR     fill='000'O
         0 000110   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         0 000111   100025 000010                    ADSC9   21,Q,PR1                 cn=0,n=8

   2935  0 000112   300000 720100                    LXL0    0,,PR3
         0 000113   000002 100003                    CMPX0   2,DU
         0 000114   000170 601000 0                  TNZ     s:2952

   2935  0 000115   300001 474500                    LDP4    1,,PR3
         0 000116   000000 236100                    LDQ     0,,PR0
         0 000117   000007 402007                    MPY     7,DL
         0 000120   000022 736000                    QLS     18
         0 000121   000026 036003                    ADLQ    22,DU
         0 000122   200003 036100                    ADLQ    @PORT,,AUTO
         0 000123   200013 756100                    STQ     NEW_DATA_IS_DIFFERENT+2,,AUTO
         0 000124   200012 454500                    STP4    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000125   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000126   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000127   000000 701000 xent               TSX1    VDG$OCOPY
         0 000130   000132 702000 0                  TSX2    s:2936
         0 000131   000133 710000 0                  TRA     s:2938

   2936  0 000132   000000 702200 xent               TSX2  ! X66_AALT

     1236     2938    3                 END;

   2938  0 000133   000170 710000 0                  TRA     s:2952

     1237     2939    3              ELSE DO;

     1238     2940                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);

   2947  0 000134   100000 236100                    LDQ     0,,PR1
         0 000135   000007 402007                    MPY     7,DL
         0 000136   000025 722106                    LXL2    21,QL,PR0
         0 000137   000002 102003                    CMPX2   2,DU
         0 000140   000153 601000 0                  TNZ     s:2948+1
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:158  

   2947  0 000141   100000 236100                    LDQ     0,,PR1
         0 000142   000007 402007                    MPY     7,DL
         0 000143   000026 473506                    LDP3    22,QL,PR0
         0 000144   200012 453500                    STP3    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000145   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000146   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000147   000000 701000 xent               TSX1    VDG$OFREE
         0 000150   000152 702000 0                  TSX2    s:2948
         0 000151   000153 710000 0                  TRA     s:2948+1

   2948  0 000152   000000 702200 xent               TSX2  ! X66_AALT

   2948  0 000153   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
         0 000154   000000 236100                    LDQ     0,,PR0
         0 000155   000007 402007                    MPY     7,DL
         0 000156   200003 471500                    LDP1    @PORT,,AUTO
         0 000157   100025 450106                    STZ     21,QL,PR1
         0 000160   100026 450106                    STZ     22,QL,PR1

     1239     2950    3                 PORT.LEVEL.SPEC (WRITE_LEVEL) = SPEC;

   2950  0 000161   000000 236100                    LDQ     0,,PR0
         0 000162   000007 402007                    MPY     7,DL
         0 000163   000002 736000                    QLS     2
         0 000164   200005 473500                    LDP3    @SPEC,,AUTO
         0 000165   000106 100500                    MLR     fill='000'O
         0 000166   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         0 000167   100025 000010                    ADSC9   21,Q,PR1                 cn=0,n=8

     1240     2951    3                 END;

     1241     2952    2              PORT.LEVEL.SPEC_MODIFIED (WRITE_LEVEL) = %TRUE;

   2952  0 000170   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
         0 000171   000000 236100                    LDQ     0,,PR0
         0 000172   000007 402007                    MPY     7,DL
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:159  
         0 000173   200003 471500                    LDP1    @PORT,,AUTO
         0 000174   000000 620006                    EAX0    0,QL
         0 000175   400000 236003                    LDQ     -131072,DU
         0 000176   100030 256110                    ORSQ    24,X0,PR1

     1242     2953    2              SPEC = %CLEAR;       /* Port owns Spec now */

   2953  0 000177   200005 473500                    LDP3    @SPEC,,AUTO
         0 000200   300000 450100                    STZ     0,,PR3
         0 000201   300001 450100                    STZ     1,,PR3

     1243     2954    2              END;

     1244     2955
     1245     2956
     1246     2957    2           IF ADDR(DATA) ~= ADDR(NIL) THEN DO;

   2957  0 000202   200006 236100                    LDQ     @DATA,,AUTO
         0 000203   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000204   000404 600000 0                  TZE     s:3010

     1247     2958    2              NEW_DATA_IS_DIFFERENT = %TRUE;

   2958  0 000205   400000 236003                    LDQ     -131072,DU
         0 000206   200011 756100                    STQ     NEW_DATA_IS_DIFFERENT,,AUTO

     1248     2959    3              IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

   2959  0 000207   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
         0 000210   000000 236100                    LDQ     0,,PR0
         0 000211   000007 402007                    MPY     7,DL
         0 000212   200003 471500                    LDP1    @PORT,,AUTO
         0 000213   100027 236106                    LDQ     23,QL,PR1
         0 000214   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000215   000250 600000 0                  TZE     s:2972

     1249     2960    3                 IF DATA.LENGTH# =
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:160  

   2960  0 000216   000000 236100                    LDQ     0,,PR0
         0 000217   000007 402007                    MPY     7,DL
         0 000220   100027 473506                    LDP3    23,QL,PR1
         0 000221   200006 474500                    LDP4    @DATA,,AUTO
         0 000222   400002 220100                    LDX0    2,,PR4
         0 000223   300002 100100                    CMPX0   2,,PR3
         0 000224   000250 601000 0                  TNZ     s:2972
         0 000225   000000 236100                    LDQ     0,,PR0
         0 000226   000007 402007                    MPY     7,DL
         0 000227   100027 473506                    LDP3    23,QL,PR1
         0 000230   100027 475506                    LDP5    23,QL,PR1
         0 000231   300002 221100                    LDX1    2,,PR3
         0 000232   040140 106540                    CMPC    fill='040'O
         0 000233   400002 400010                    ADSC9   2,,PR4                   cn=2,n=*X0
         0 000234   500002 400011                    ADSC9   2,,PR5                   cn=2,n=*X1
         0 000235   000250 601000 0                  TNZ     s:2972
         0 000236   400001 236100                    LDQ     1,,PR4
         0 000237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000240   000250 601000 0                  TNZ     s:2972
         0 000241   000000 236100                    LDQ     0,,PR0
         0 000242   000007 402007                    MPY     7,DL
         0 000243   100027 473506                    LDP3    23,QL,PR1
         0 000244   300001 236100                    LDQ     1,,PR3
         0 000245   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000246   000250 601000 0                  TNZ     s:2972

     1250     2961    3                   PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.LENGTH#
     1251     2962    3                   AND DATA.BYTES =
     1252     2963    3                   PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.BYTES
     1253     2964    3                   AND DATA.FLINK$ = ADDR(NIL)
     1254     2965    3                   AND PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER.FLINK$ =
     1255     2966    4                   ADDR(NIL) THEN DO;

     1256     2967                         /* New data = old data:  don't update */
     1257     2968    4                    NEW_DATA_IS_DIFFERENT = %FALSE;

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:161  
   2968  0 000247   200011 450100                    STZ     NEW_DATA_IS_DIFFERENT,,AUTO

     1258     2969    4                    END;

     1259     2970    3                 END;

     1260     2971
     1261     2972    3              IF NEW_DATA_IS_DIFFERENT THEN DO;

   2972  0 000250   200011 234100                    SZN     NEW_DATA_IS_DIFFERENT,,AUTO
         0 000251   000352 605000 0                  TPL     s:3001

     1262     2973    4                 IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

   2973  0 000252   000000 236100                    LDQ     0,,PR0
         0 000253   000007 402007                    MPY     7,DL
         0 000254   100027 236106                    LDQ     23,QL,PR1
         0 000255   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000256   000267 600000 0                  TZE     s:2977

     1263     2974    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)

   2974  0 000257   000000 236100                    LDQ     0,,PR0
         0 000260   000007 402007                    MPY     7,DL
         0 000261   100027 473506                    LDP3    23,QL,PR1
         0 000262   200012 453500                    STP3    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000263   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000264   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000265   000000 701000 xent               TSX1    VDG$OFREE
         0 000266   000405 702000 0                  TSX2    OFREE_FAILED

     1264     2975    4                      ALTRET (OFREE_FAILED);
     1265     2976    4                    END;

     1266     2977    3                 PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(DATA);

   2977  0 000267   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:162  
         0 000270   000000 236100                    LDQ     0,,PR0
         0 000271   000007 402007                    MPY     7,DL
         0 000272   200012 756100                    STQ     NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000273   200006 236100                    LDQ     @DATA,,AUTO
         0 000274   200003 471500                    LDP1    @PORT,,AUTO
         0 000275   200012 720100                    LXL0    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000276   100027 756110                    STQ     23,X0,PR1

     1267     2978    3                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %TRUE;

   2978  0 000277   000000 236100                    LDQ     0,,PR0
         0 000300   000007 402007                    MPY     7,DL
         0 000301   000000 620006                    EAX0    0,QL
         0 000302   200000 236003                    LDQ     65536,DU
         0 000303   100030 256110                    ORSQ    24,X0,PR1

     1268     2979
     1269     2980    4                 IF PORT.DCB# = 0 THEN DO;

   2980  0 000304   100004 720100                    LXL0    4,,PR1
         0 000305   000404 601000 0                  TNZ     s:3010

     1270     2981    5                    IF FILE$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;

   2981  0 000306   200007 473500                    LDP3    FILE_NODE$,,AUTO
         0 000307   300010 236100                    LDQ     8,,PR3
         0 000310   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000311   000320 600000 0                  TZE     s:2985

     1271     2982    5                       CALL VDG$OFREE (FILE$NODE.DESC.DATA$ -> VD$BUFFER)

   2982  0 000312   300010 474500                    LDP4    8,,PR3
         0 000313   200012 454500                    STP4    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000314   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000316   000000 701000 xent               TSX1    VDG$OFREE
         0 000317   000405 702000 0                  TSX2    OFREE_FAILED
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:163  

     1272     2983    5                         ALTRET (OFREE_FAILED);
     1273     2984    5                       END;

     1274     2985    4                    CALL VDG$OCOPY (DATA, FILE$NODE.DESC.DATA$)

   2985  0 000320   200007 236100                    LDQ     FILE_NODE$,,AUTO
         0 000321   000010 036003                    ADLQ    8,DU
         0 000322   200006 235100                    LDA     @DATA,,AUTO
         0 000323   200012 757100                    STAQ    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000324   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000325   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000326   000000 701000 xent               TSX1    VDG$OCOPY
         0 000327   000405 702000 0                  TSX2    OFREE_FAILED

     1275     2986    4                      ALTRET (OCOPY_FAILED);
     1276     2987    5                    IF DATA.OBJECT.SIZE# > 0 THEN DO;

   2987  0 000330   200006 470500                    LDP0    @DATA,,AUTO
         0 000331   000000 720100                    LXL0    0,,PR0
         0 000332   000346 604400 0                  TMOZ    s:2997

     1277     2988                         /*
     1278     2989                         * If DATA is dynamic, make sure it goes in the file.
     1279     2990                         * VDA$WRITERS sometimes points globals at it.
     1280     2991                         * BUT, if it's not dynamic, make a copy so that
     1281     2992                         * VDW$STOW_NODE knows how big the data is.
     1282     2993                         */
     1283     2994    5                       PORT.LEVEL.DATA$ (WRITE_LEVEL) = FILE$NODE.DESC.DATA$;

   2994  0 000333   200004 471500                    LDP1    @WRITE_LEVEL,,AUTO
         0 000334   100000 236100                    LDQ     0,,PR1
         0 000335   000007 402007                    MPY     7,DL
         0 000336   200007 473500                    LDP3    FILE_NODE$,,AUTO
         0 000337   200012 756100                    STQ     NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000340   300010 236100                    LDQ     8,,PR3
         0 000341   200003 474500                    LDP4    @PORT,,AUTO
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:164  
         0 000342   200012 720100                    LXL0    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000343   400027 756110                    STQ     23,X0,PR4

     1284     2995    5                       FILE$NODE.DESC.DATA$ = ADDR(DATA);

   2995  0 000344   200006 236100                    LDQ     @DATA,,AUTO
         0 000345   300010 756100                    STQ     8,,PR3

     1285     2996    5                       END;

     1286     2997    4                    FILE$NODE.DESC.EOR = %TRUE;

   2997  0 000346   200007 471500                    LDP1    FILE_NODE$,,AUTO
         0 000347   400000 236003                    LDQ     -131072,DU
         0 000350   100011 256100                    ORSQ    9,,PR1

     1287     2998    4                    END;

     1288     2999    3                 END;

   2999  0 000351   000404 710000 0                  TRA     s:3010

     1289     3000    3              ELSE DO;

     1290     3001    4                 IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

   3001  0 000352   000000 236100                    LDQ     0,,PR0
         0 000353   000007 402007                    MPY     7,DL
         0 000354   100027 236106                    LDQ     23,QL,PR1
         0 000355   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000356   000367 600000 0                  TZE     s:3005

     1291     3002    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)

   3002  0 000357   000000 236100                    LDQ     0,,PR0
         0 000360   000007 402007                    MPY     7,DL
         0 000361   100027 473506                    LDP3    23,QL,PR1
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:165  
         0 000362   200012 453500                    STP3    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000363   200012 630500                    EPPR0   NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000364   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000365   000000 701000 xent               TSX1    VDG$OFREE
         0 000366   000405 702000 0                  TSX2    OFREE_FAILED

     1292     3003    4                      ALTRET (OFREE_FAILED);
     1293     3004    4                    END;

     1294     3005    3                 PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(DATA);

   3005  0 000367   200004 470500                    LDP0    @WRITE_LEVEL,,AUTO
         0 000370   000000 236100                    LDQ     0,,PR0
         0 000371   000007 402007                    MPY     7,DL
         0 000372   200012 756100                    STQ     NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000373   200006 236100                    LDQ     @DATA,,AUTO
         0 000374   200003 471500                    LDP1    @PORT,,AUTO
         0 000375   200012 720100                    LXL0    NEW_DATA_IS_DIFFERENT+1,,AUTO
         0 000376   100027 756110                    STQ     23,X0,PR1

     1295     3006    3                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %FALSE;

   3006  0 000377   000000 236100                    LDQ     0,,PR0
         0 000400   000007 402007                    MPY     7,DL
         0 000401   000000 620006                    EAX0    0,QL
         0 000402   000000 236000 1                  LDQ     0
         0 000403   100030 356110                    ANSQ    24,X0,PR1

     1296     3007    3                 END;

     1297     3008    2              END;

     1298     3009
     1299     3010    1           RETURN;

   3010  0 000404   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:166  
   3002  0 000405                       OFREE_FAILED null
     1300     3011
     1301     3012
     1302     3013
     1303     3014    1   OFREE_FAILED: ;
     1304     3015    1   OCOPY_FAILED: ;

   3015  0 000405                       OCOPY_FAILED null
     1305     3016    1           ALTRETURN;

   3016  0 000405   000000 702200 xent               TSX2  ! X66_AALT
     1306     3017
     1307     3018    1   END VDA$PWRITE;
     1308     3019        %EOD;

PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:167  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$PWRITE.
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:168  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @DATA                      3-0-0/w PTR         r     1 @PORT
     5-0-0/w PTR         r     1 @SPEC                      4-0-0/w PTR         r     1 @WRITE_LEVEL
    *0-0-0/w ASTR(90)    r     1 DATA                      10-0-0/w PTR         r     1 FILE_KEY$
     7-0-0/w PTR         r     1 FILE_NODE$
    11-0-0/w BIT         r     1 NEW_DATA_IS_DIFFERENT
    *0-0-0/w STRC(1944)  r     1 PORT                      *0-0-0/w STRC(72)    r     1 SPEC
    *0-0-0/w SBIN        r     1 WRITE_LEVEL

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 FILE$KEY                   0-0-0/w STRC(468)   r     1 FILE$NODE
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$PWRITE requires 262 words for executable code.
   Procedure VDA$PWRITE requires 12 words of local(AUTO) storage.
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:169  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:170  
          MINI XREF LISTING

DATA
      2572**DCL        66--PROC     2957--IF       2977--ASSIGN   2985<>CALL     2995--ASSIGN   3005--ASSIGN
DATA.BYTES
      2600**DCL      2960>>IF
DATA.FLINK$
      2598**DCL      2960>>IF
DATA.LENGTH#
      2598**DCL      2600--IMP-SIZ  2960>>IF       2960>>IF       2985>>CALL
DATA.OBJECT.SIZE#
      2596**DCL      2987>>IF
FILE$KEY.LENGTH#
      2728**DCL      2730--IMP-SIZ
FILE$NODE.DESC.DATA$
      2708**DCL      2981>>IF       2982>>CALL     2982>>CALL     2985<>CALL     2994>>ASSIGN   2995<<ASSIGN
FILE$NODE.DESC.EOR
      2708**DCL      2997<<ASSIGN
FILE$NODE.DESC.SPEC
      2704**DCL      2908<<ASSIGN   2910<<ASSIGN
FILE$NODE.DESC.SPEC.REP#
      2706**DCL      2907>>IF
FILE$NODE.DESC.SPEC.V$
      2706**DCL      2907>>CALL     2907>>CALL
FILE_KEY$
      2615**DCL      2720--IMP-PTR
FILE_NODE$
      2614**DCL      2627--IMP-PTR  2886<<ASSIGN   2907>>IF       2907>>CALL     2907>>CALL     2908>>ASSIGN
      2910>>ASSIGN   2981>>IF       2982>>CALL     2982>>CALL     2985>>CALL     2994>>ASSIGN   2995>>ASSIGN
      2997>>ASSIGN
NEW_DATA_IS_DIFFERENT
      2616**DCL      2958<<ASSIGN   2968<<ASSIGN   2972>>IF
OCOPY_FAILED
      3015**LABEL    2985--CALLALT
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:171  
OFREE_FAILED
      3002**LABEL    2974--CALLALT  2982--CALLALT  3002--CALLALT
PORT
      2442**DCL        66--PROC
PORT.DCB#
      2469**DCL      2889>>IF       2980>>IF
PORT.EXIST#
      2468**DCL      2880>>IF
PORT.LAST_OP#
      2470**DCL      2884<<ASSIGN
PORT.LEVEL.DATA$
      2529**DCL      2959>>IF       2960>>IF       2960>>IF       2960>>IF       2960>>IF       2973>>IF
      2974>>CALL     2974>>CALL     2977<<ASSIGN   2994<<ASSIGN   3001>>IF       3002>>CALL     3002>>CALL
      3005<<ASSIGN
PORT.LEVEL.DATA_MODIFIED
      2529**DCL      2978<<ASSIGN   3006<<ASSIGN
PORT.LEVEL.INTERNAL$
      2529**DCL      2886>>ASSIGN
PORT.LEVEL.SPEC
      2525**DCL      2919<<ASSIGN   2935<<ASSIGN   2948<<ASSIGN   2950<<ASSIGN
PORT.LEVEL.SPEC.REP#
      2527**DCL      2918>>IF       2947>>IF
PORT.LEVEL.SPEC.V$
      2527**DCL      2918>>CALL     2918>>CALL     2935<>CALL     2947>>CALL     2947>>CALL
PORT.LEVEL.SPEC_MODIFIED
      2529**DCL      2952<<ASSIGN
SPEC
      2541**DCL        66--PROC     2888--IF       2910>>ASSIGN   2935>>ASSIGN   2950>>ASSIGN   2953<<ASSIGN
SPEC.REP#
      2545**DCL      2935>>IF
SPEC.V$
      2545**DCL      2935>>CALL     2935>>CALL
VD$BUFFER
      2844**DCL      2974<>CALL     2982<>CALL     3002<>CALL
VD$BUFFER.BYTES
      2872**DCL      2960>>IF
PL6.E3A0      #002=VDA$PWRITE File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:172  
VD$BUFFER.FLINK$
      2870**DCL      2960>>IF
VD$BUFFER.LENGTH#
      2870**DCL      2872--IMP-SIZ  2960>>IF       2960>>IF       2974>>CALL     2982>>CALL     3002>>CALL
VD$TEXTC.LENGTH#
      2812**DCL      2814--IMP-SIZ
VD$TEXTC_REMOTE
      2760**DCL      2907<>CALL     2918<>CALL     2935<>CALL     2947<>CALL
VD$TEXTC_REMOTE.LENGTH#
      2789**DCL      2791--IMP-SIZ  2907>>CALL     2918>>CALL     2935>>CALL     2947>>CALL
VDG$ESCREECH
      2610**DCL-ENT  2882--CALL
VDG$OCOPY
      2608**DCL-ENT  2935--CALL     2985--CALL
VDG$OFREE
      2609**DCL-ENT  2907--CALL     2918--CALL     2947--CALL     2974--CALL     2982--CALL     3002--CALL
WRITE_LEVEL
      2532**DCL        66--PROC     2880>>IF       2882<>CALL     2886>>ASSIGN   2918>>IF       2918>>CALL
      2918>>CALL     2919>>ASSIGN   2935>>ASSIGN   2935>>CALL     2947>>IF       2947>>CALL     2947>>CALL
      2948>>ASSIGN   2950>>ASSIGN   2952>>ASSIGN   2959>>IF       2960>>IF       2960>>IF       2960>>IF
      2960>>IF       2973>>IF       2974>>CALL     2974>>CALL     2977>>ASSIGN   2978>>ASSIGN   2994>>ASSIGN
      3001>>IF       3002>>CALL     3002>>CALL     3005>>ASSIGN   3006>>ASSIGN

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:173  
     1309        1        /*T***********************************************************/
     1310        2        /*T*                                                         */
     1311        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1312        4        /*T*                                                         */
     1313        5        /*T***********************************************************/
     1314        6
     1315        7        /*D* NAME: VDA$PFLUSH
     1316        8            PARAMETERS:
     1317        9                PORT - VD$PORT to use.  This Port must be open to
     1318       10                    an internal or external file.
     1319       11                FROM_PRESENTER - A BIT(1) ALIGNED flag containing either
     1320       12                    %TO_PRESENTER or %FROM_PRESENTER.  This flag is passed on
     1321       13                    (with a caveat) to VDP$RWRITE.  If the caller of
     1322       14                    VDA$PFLUSH is the Presenter, %FROM_PRESENTER should be
     1323       15                    passed; this tells VDP$RWRITE not to update the current
     1324       16                    window.
     1325       17            INPUT:
     1326       18                VD_$STRIP_BLANKS must contain 0 for "don't strip trailing blanks"
     1327       19                    or >0 for "strip all trailing blanks".
     1328       20                VD_$MIN_RECORD must contain the minimum number of bytes
     1329       21                    allowed in a record.  Must be between 0 and VD_$MAX_RECORD.V#,
     1330       22                    inclusive.
     1331       23                VD_$MAX_RECORD must contain the maximum number of bytes
     1332       24                    allowed in a record.  Must be between VD_$MIN_RECORD.V#
     1333       25                    and %MXNB_REC_DATA, inclusive.
     1334       26                VD_$PAD - A VD$BUFFER containing the pad byte(s) to use to extend
     1335       27                    short records.  VD_$PAD's value may be longer than one byte,
     1336       28                    but must be at least one byte long.
     1337       29            OUTPUT:
     1338       30                PORT.LEVEL.SPEC_MODIFIEDs and .DATA_MODIFIEDs will be reset.
     1339       31                For internal files, PORT.LEVEL.INTERNAL$'s VD$FILE_NODE.DESC.SPEC and
     1340       32                    .DATA$ may be altered.
     1341       33                VDP$RWRITE will be called with any changed nodes.
     1342       34            DESCRIPTION:
     1343       35                Loop thru the Port's level-registers, looking for modified
     1344       36                node components.  When we find one:
     1345       37                o Write the change to the file.  For an internal file,
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:174  
     1346       38                    VDA$LWRITE has already (inserted and) written the
     1347       39                    node to the file, so we do nothing for internal files.
     1348       40                    For an external file, we M$WRITE with KEYS and
     1349       41                    ONEWKEY=YES (write to file whether key already
     1350       42                    exists or not).
     1351       43                o Call VDP$RWRITE to inform the Presenter of the change.
     1352       44                    Include just enough keys in the VD$LOCATION we pass
     1353       45                    to indicate the level of the node in the file structure.
     1354       46                    If we were called by the Presenter (FROM_PRESENTER set)
     1355       47                    and we didn't change the node's Data component (as
     1356       48                    specified by $MIN_RECORD, $MAX_RECORD, and $STRIP_BLANKS),
     1357       49                    then pass %FROM_PRESENTER on to VDP$RWRITE.  Otherwise,
     1358       50                    pass %TO_PRESENTER on to VDP$RWRITE:  this will force
     1359       51                    the Presenter to update all windows containing the node,
     1360       52                    even the current one.  We want to do this 'cause we
     1361       53                    changed the node from what the user sent to the Pres'r;
     1362       54                    we show the change to the user by updating the window
     1363       55                    with the new Data component.
     1364       56        */
     1365       57
     1366       58        VDA$PFLUSH: PROC (PORT, FROM_PRESENTER) ALTRET;
     1367       59
     1368       60
     1369       61        %INCLUDE VD_MACROS_M;
     1370     2276        %INCLUDE VD_PERR_C;
     1371     2424        %INCLUDE CP_6;
     1372     2505        %INCLUDE B_ERRORS_C;
     1373     3631        %INCLUDE B$TABLES_C;
     1374     3739
     1375     3740
     1376     3741        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1377     3839    1   DCL FROM_PRESENTER BIT(1) ALIGNED;
     1378     3840
     1379     3841
     1380     3842    1   DCL VDP$RWRITE          ENTRY (5) ALTRET;
     1381     3843    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1382     3844    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:175  
     1383     3845    1   DCL VDG$MACC_PFLUSH     ENTRY (2);
     1384     3846    1   DCL VDG$MACC_PFLUSH_WRITE ENTRY (3);
     1385     3847    1   DCL VDG$MACC_PFLUSH_REWRITE ENTRY (2);
     1386     3848    1   DCL VDG$MACC_PRETURN    ENTRY (1);
     1387     3849
     1388     3850
     1389     3851        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1390     3896        %VD$NUMBER (NAME=VD_$MAX_RECORD, STCLASS=SYMREF);
     1391     3941        %VD$NUMBER (NAME=VD_$MIN_RECORD, STCLASS=SYMREF);
     1392     3986        %VD$BUFFER (NAME=VD_$PAD, STCLASS=SYMREF);
     1393     4044        %VD$NUMBER (NAME=VD_$STRIP_BLANKS, STCLASS=SYMREF);
     1394     4089    1   DCL B$TCB$ PTR SYMREF;
     1395     4090
     1396     4091
     1397     4092        %B$SR_NON_BLANK;
     1398     4096        %FPT_WRITE (FPTN=CONST_FPT_WRITE, STCLASS=CONSTANT, ONEWKEY=YES);
     1399     4127
     1400     4128
     1401     4129
     1402     4130    1   DCL HAD_ERROR BIT(1) ALIGNED;
     1403     4131    1   DCL STRUCTURE_NODE$ PTR;
     1404     4132        %VD$LOCATION (NAME=CURR_LOCATION, STCLASS=AUTO); /* Doesn't own objects */
     1405     4160    1   DCL LEVEL SBIN;
     1406     4161    1   DCL CANT_WRITE_THIS_LEVEL BIT(1) ALIGNED;
     1407     4162    1   DCL CHANGED_DATA BIT(1) ALIGNED;
     1408     4163    1   DCL STILL_FROM_PRESENTER BIT(1) ALIGNED;
     1409     4164    1   DCL SPEC_TO_PASS$ PTR;
     1410     4165    1   DCL BUFFER_TO_PASS$ PTR;
     1411     4166    1   DCL VD_ERR$ PTR;
     1412     4167
     1413     4168
     1414     4169        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
     1415     4262        %VD$SPEC (NAME=SPEC$TO_PASS, STCLASS="BASED(SPEC_TO_PASS$)");
     1416     4276        %VD$BUFFER (NAME=BUFFER$TO_PASS, STCLASS="BASED(BUFFER_TO_PASS$)");
     1417     4334        %VD$BUFFER;
     1418     4392        %VD$BUFFER_HEADER;
     1419     4428        %VD$FILE_NODE;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:176  
     1420     4521        %VD$TEXTC_REMOTE;
     1421     4582        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1422     4635        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     1423     4638        %B$ALT;
     1424     4646
     1425     4647
     1426     4648
     1427     4649    1           HAD_ERROR = %FALSE;
     1428     4650    1           IF VD_$$MON_ACC.V# > 0 THEN
     1429     4651    1              CALL VDG$MACC_PFLUSH (PORT, FROM_PRESENTER);
     1430     4652
     1431     4653    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;
     1432     4654    1           CURR_LOCATION = PORT.CURRENT;
     1433     4655
     1434     4656                /*
     1435     4657                *   EACH_LEVEL loops backward up thru the levels so we
     1436     4658                *       can start out with CURR_LOCATION, then as we
     1437     4659                *       move up the levels just %CLEAR-out a key in
     1438     4660                *       CURR_LOCATION.
     1439     4661                */
     1440     4662    1   EACH_LEVEL:
     1441     4663    2           DO LEVEL = STRUCTURE$NODE.COUNT# - 1 DOWNTO %LVL_LOWER;
     1442     4664    2              IF PORT.LEVEL.SPEC_MODIFIED (LEVEL)
     1443     4665    2                OR PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN
     1444     4666    3   SOMETHINGS_BEEN_MODIFIED: DO;
     1445     4667    3                 CHANGED_DATA = %FALSE;
     1446     4668    4                 IF PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN DO;
     1447     4669    4                    CALL NORMALIZE_DATA (CHANGED_DATA)
     1448     4670    4                      ALTRET (NORMALIZE_DATA_FAILED);
     1449     4671    4                    END;
     1450     4672    3                 CANT_WRITE_THIS_LEVEL = %FALSE;
     1451     4673    4                 IF PORT.DCB# ~= 0 THEN DO;
     1452     4674    4                    CALL EXTERNAL_MODIFIED
     1453     4675    5                    WHENALTRETURN DO;
     1454     4676    5                       CANT_WRITE_THIS_LEVEL = %TRUE;
     1455     4677    5                       HAD_ERROR = %TRUE;
     1456     4678    5                       END;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:177  
     1457     4679    4                    END;
     1458     4680
     1459     4681    4                 IF NOT CANT_WRITE_THIS_LEVEL THEN DO;
     1460     4682                         /* Tell the Presenter about the new node */
     1461     4683    4                    IF PORT.LEVEL.SPEC_MODIFIED (LEVEL) THEN
     1462     4684    4                       SPEC_TO_PASS$ = ADDR(PORT.LEVEL.SPEC (LEVEL));
     1463     4685    4                    ELSE
     1464     4686    4                       SPEC_TO_PASS$ = ADDR(NIL);
     1465     4687    4                    IF PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN
     1466     4688    4                       BUFFER_TO_PASS$ = PORT.LEVEL.DATA$ (LEVEL);
     1467     4689    4                    ELSE
     1468     4690    4                       BUFFER_TO_PASS$ = ADDR(NIL);
     1469     4691    4                    STILL_FROM_PRESENTER = FROM_PRESENTER;
     1470     4692    4                    IF CHANGED_DATA THEN
     1471     4693    4                       STILL_FROM_PRESENTER = %TO_PRESENTER;
     1472     4694    4                    CALL VDP$RWRITE (PORT.FILE_KEY, CURR_LOCATION,
     1473     4695    4                      SPEC$TO_PASS, BUFFER$TO_PASS, STILL_FROM_PRESENTER)
     1474     4696    4                      ALTRET (RWRITE_FAILED);
     1475     4697    4                    END;
     1476     4698
     1477     4699    3                 PORT.LEVEL.SPEC_MODIFIED (LEVEL) = %FALSE;
     1478     4700    3                 PORT.LEVEL.DATA_MODIFIED (LEVEL) = %FALSE;
     1479     4701    3                 END SOMETHINGS_BEEN_MODIFIED;
     1480     4702    2              CURR_LOCATION.KEY (LEVEL-1) = %CLEAR;
     1481     4703    2              END EACH_LEVEL;
     1482     4704
     1483     4705    1           IF HAD_ERROR THEN
     1484     4706    1              ALTRETURN;
     1485     4707
     1486     4708    1           IF VD_$$MON_ACC.V# > 0 THEN
     1487     4709    1              CALL VDG$MACC_PRETURN (PORT);
     1488     4710    1           RETURN;
     1489     4711
     1490     4712
     1491     4713    1   NORMALIZE_DATA_FAILED: ;
     1492     4714    1   EXTERNAL_MODIFIED_FAILED: ;
     1493     4715    1   RWRITE_FAILED: ;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:178  
     1494     4716    1           ALTRETURN;
     1495     4717
     1496     4718                %BOX (TITLE=NORMALIZE_DATA, PAGE=YES);
              4726    1
              4730    1   /***************************************************************************
              4732    1    *                                                                         *
              4736    1            *                               NORMALIZE_DATA                            *
              4738    1            *                                                                         *
              4740    1           ***************************************************************************/

     1497     4744
     1498     4745        /*I* NAME: NORMALIZE_DATA
     1499     4746            PARAMETERS:
     1500     4747                CHANGED_RECORD - Uninitialized BIT(1) ALIGNED.
     1501     4748            INPUT:
     1502     4749                PORT - Same as for external routine.  Must be open to
     1503     4750                    either an internal or external file whose Data
     1504     4751                    component has been modified at LEVEL.
     1505     4752                LEVEL - Level # in PORT at which we found modified
     1506     4753                    Data component.
     1507     4754                PORT.LEVEL.INTERNAL$ (LEVEL) - If the file is internal, this
     1508     4755                    must point to the VD$FILE_NODE for the node.
     1509     4756            OUTPUT:
     1510     4757                If PORT.LEVEL.DATA$'s buffer contents are changed at all
     1511     4758                    by this routine, CHANGED_RECORD will be %TRUE; else
     1512     4759                    CHANGED_RECORD will be %FALSE.
     1513     4760                The PORT.LEVEL.DATA$ pointer may be changed, if we must
     1514     4761                    free the old buffer and allocate a new one.  In such a
     1515     4762                    case, if the file is internal we'll also change the
     1516     4763                    VD$FILE_NODE.DESC.DATA$ pointer.
     1517     4764                PORT.LEVEL.DATA$'s buffer contents may be changed.
     1518     4765            DESCRIPTION:
     1519     4766                If the file is predefined, just return:  the name-controlled
     1520     4767                    normalizing we do is for user data files only.
     1521     4768                If the $STRIP_BLANKS predefined name has been set on, we'll
     1522     4769                    first strip all trailing blanks from the buffer.
     1523     4770                We'll normalize the length of the buffer, padding/stripping
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:179  
     1524     4771                    it to be between $MIN_RECORD and $MAX_RECORD,
     1525     4772                    inclusive.  If padding is needed, $PAD will be used as
     1526     4773                    the pad byte(s).
     1527     4774                    Note that if the record has the VFC attribute set (external data
     1528     4775                    records only), then the minimum record length is 1 no matter
     1529     4776                    what the user says (star 22377), and $PAD is ignored:  a VFC
     1530     4777                    char of 'A' is used.  Also that consec file records will always be
     1531     4778                    padded or truncated to the same length as any previous record.
     1532     4779        */
     1533     4780
     1534     4781    1   NORMALIZE_DATA: PROC (CHANGED_RECORD) ALTRET;
     1535     4782
     1536     4783
     1537     4784    2   DCL CHANGED_RECORD BIT(1) ALIGNED;
     1538     4785
     1539     4786
     1540     4787
     1541     4788    2   DCL DATA_BUFFER$ PTR;
     1542     4789    2   DCL T$ PTR; /* pointer for use as an argument */
     1543     4790    2   DCL NON_BLANK_INDEX SBIN;
     1544     4791    2   DCL TABLE_VAL SBIN;
     1545     4792    2   DCL MIN_RECORD UBIN;
     1546     4793    2   DCL TEXTC_DVBYTE$ PTR;
     1547     4794    2   DCL RECORD_NEEDS_VFC BIT(1) ALIGNED;
     1548     4795    2   DCL PAD_POINT SBIN;
     1549     4796    2   DCL NEW_NW SBIN;
     1550     4797    2   DCL I SBIN;
     1551     4798
     1552     4799
     1553     4800        %VD$BUFFER (NAME=DATA$BUFFER, STCLASS="BASED(DATA_BUFFER$)");
     1554     4858    2   DCL 1 TEXTC$DVBYTE BASED(TEXTC_DVBYTE$) ALIGNED,
     1555     4859    2         2 LENGTH# UBIN BYTE CALIGNED,
     1556     4860    2         2 TOP BIT(1),
     1557     4861    2         2 * BIT(1),
     1558     4862    2         2 VFC BIT(1),
     1559     4863    2         2 BIN BIT(1),
     1560     4864    2         2 TRANS BIT(1),
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:180  
     1561     4865    2         2 * BIT(4);
     1562     4866        %F$DCB;
     1563     4923
     1564     4924
     1565     4925
     1566     4926    2           CHANGED_RECORD = %FALSE;
     1567     4927    2           IF PORT.LEVEL.SPEC_TYPE# (LEVEL) ~= 0
     1568     4928    2             AND PORT.LEVEL.SPEC_TYPE# (LEVEL) ~= %SPT_EXT_RECORD THEN
     1569     4929    2              RETURN;
     1570     4930                /*
     1571     4931                *N* The above test does not screen out predefined scratch
     1572     4932                *N* files.  To fix #27741, all internal files are screened out
     1573     4933                *N* since, currently, only predefined files are internal.  If
     1574     4934                *N* this ever changes, a better test must be devised.  Code
     1575     4935                *N* below to handle internal files is retained for this reason.
     1576     4936                */
     1577     4937    2           IF PORT.DCB# = 0 THEN
     1578     4938    2              RETURN;
     1579     4939
     1580     4940    2           DATA_BUFFER$ = PORT.LEVEL.DATA$ (LEVEL);
     1581     4941
     1582     4942                /*
     1583     4943                *   Strip trailing blanks if requested.
     1584     4944                */
     1585     4945
     1586     4946    3           IF VD_$STRIP_BLANKS.V# > 0 AND DATA$BUFFER.LENGTH# > 0 THEN DO;
     1587     4947    3              CALL SEARCHR (NON_BLANK_INDEX, TABLE_VAL, B$SR_NON_BLANK,
     1588     4948    3                DATA$BUFFER.BYTES);
     1589     4949    3              IF TABLE_VAL = 0 THEN
     1590     4950    3                 NON_BLANK_INDEX = -1; /* No non-blank in rec */
     1591     4951    4              IF NON_BLANK_INDEX + 1 ~= DATA$BUFFER.LENGTH# THEN DO;
     1592     4952    4                 CHANGED_RECORD = %TRUE;
     1593     4953    4                 DATA$BUFFER.LENGTH# = NON_BLANK_INDEX + 1;
     1594     4954    4                 END;
     1595     4955    3              END;
     1596     4956
     1597     4957                /*
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:181  
     1598     4958                * make sure CONSEC files get blanked out properly, and that the
     1599     4959                * display shows their truncation if that occurs.
     1600     4960                */
     1601     4961    3           IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;
     1602     4962    3              MIN_RECORD = DCBADDR (PORT.DCB#) -> F$DCB.ARS#;
     1603     4963    3              IF MIN_RECORD = 0 THEN EXIT;
     1604     4964    3              IF DATA$BUFFER.LENGTH# <= MIN_RECORD THEN EXIT;
     1605     4965    3              CHANGED_RECORD = %TRUE;
     1606     4966    3              DATA$BUFFER.LENGTH# = MIN_RECORD;
     1607     4967    3              END;
     1608     4968    2           ELSE MIN_RECORD = VD_$MIN_RECORD.V#;
     1609     4969
     1610     4970                /*
     1611     4971                *   Truncate long data to maximum length.
     1612     4972                */
     1613     4973    3           IF DATA$BUFFER.LENGTH# > VD_$MAX_RECORD.V# THEN DO;
     1614     4974    3              CHANGED_RECORD = %TRUE;
     1615     4975    3              DATA$BUFFER.LENGTH# = VD_$MAX_RECORD.V#;
     1616     4976    3              END;
     1617     4977
     1618     4978
     1619     4979                /*
     1620     4980                *   Lengthen short data to minimum length.
     1621     4981                */
     1622     4982
     1623     4983    2           RECORD_NEEDS_VFC = %FALSE;
     1624     4984    3           IF MIN_RECORD < 1 AND PORT.DCB# ~= 0 THEN DO;
     1625     4985                   %GETSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC,
     1626     4986                   PTR=TEXTC_DVBYTE$);
     1627     4996    4              IF TEXTC$DVBYTE.LENGTH# > 0 THEN DO;
     1628     4997    4                 RECORD_NEEDS_VFC = TEXTC$DVBYTE.VFC;
     1629     4998    4                 IF RECORD_NEEDS_VFC THEN
     1630     4999    4                    MIN_RECORD = 1;
     1631     5000    4                 END;
     1632     5001    3              END;
     1633     5002
     1634     5003    2           IF DATA$BUFFER.LENGTH# < MIN_RECORD THEN
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:182  
     1635     5004    3   GUAR_MIN_RECORD: DO;
     1636     5005    3              CHANGED_RECORD = %TRUE;
     1637     5006    3              PAD_POINT = DATA$BUFFER.LENGTH#;
     1638     5007    3              NEW_NW = (LENGTHC(VD$BUFFER_HEADER) + MIN_RECORD +
     1639     5008    3                %(NB_PER_WORD-1)) / %NB_PER_WORD;
     1640     5009    3              IF NEW_NW <= DATA$BUFFER.OBJECT.SIZE# THEN
     1641     5010    4   FITS_IN_OLD_SPACE: DO;
     1642     5011    4                 DATA$BUFFER.LENGTH# = MIN_RECORD;
     1643     5012    5                 IF RECORD_NEEDS_VFC THEN DO;
     1644     5013    5                    DATA$BUFFER.BYTES = %DFLT_VFC;
     1645     5014    5                    PAD_POINT = %LENGTHC(DFLT_VFC);
     1646     5015    5                    END;
     1647     5016    4                 IF PAD_POINT < DATA$BUFFER.LENGTH#
     1648     5017    5                   AND VD_$PAD.BYTES = %CHR_SPACE THEN DO;
     1649     5018    5                    CALL INSERT (DATA$BUFFER.BYTES, PAD_POINT, , %CHR_SPACE);
     1650     5019    5                    END;
     1651     5020    4                 END FITS_IN_OLD_SPACE;
     1652     5021    3              ELSE
     1653     5022    4   COPY_TO_NEW_SPACE: DO;
     1654     5023    4                 CALL VDG$OALLOC (%CLS_BUFFER, T$, NEW_NW)
     1655     5024    4                   ALTRET (OALLOC_FAILED);
     1656     5025    4                 DATA_BUFFER$ = T$;
     1657     5026    4                 DATA$BUFFER.LENGTH# = MIN_RECORD;
     1658     5027    5                 IF RECORD_NEEDS_VFC THEN DO;
     1659     5028    5                    CALL CONCAT (DATA$BUFFER.BYTES, %DFLT_VFC,
     1660     5029    5                      PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.BYTES);
     1661     5030    5                    PAD_POINT = %LENGTHC(DFLT_VFC);
     1662     5031    5                    END;
     1663     5032    4                 ELSE
     1664     5033    4                    DATA$BUFFER.BYTES =
     1665     5034    4                      PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.BYTES;
     1666     5035    4                 CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)
     1667     5036    4                   ALTRET (OFREE_FAILED);
     1668     5037    4                 PORT.LEVEL.DATA$ (LEVEL) = DATA_BUFFER$;
     1669     5038    4                 IF PORT.DCB# = 0 THEN
     1670     5039    4                    PORT.LEVEL.INTERNAL$ (LEVEL) -> VD$FILE_NODE.DESC.DATA$ =
     1671     5040    4                      DATA_BUFFER$;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:183  
     1672     5041    4                 END COPY_TO_NEW_SPACE;
     1673     5042
     1674     5043    3              IF VD_$PAD.BYTES ~= %CHR_SPACE THEN
     1675     5044    4   PAD_WITH_NON_BLANK: DO;
     1676     5045    5                 DO I = PAD_POINT TO (MIN_RECORD - 1)
     1677     5046    5                   BY VD_$PAD.LENGTH#;
     1678     5047    5                    CALL INSERT (DATA$BUFFER.BYTES, I, VD_$PAD.LENGTH#,
     1679     5048    5                      VD_$PAD.BYTES);
     1680     5049    5                    END;
     1681     5050    4                 END PAD_WITH_NON_BLANK;
     1682     5051    3              END GUAR_MIN_RECORD;
     1683     5052
     1684     5053
     1685     5054    2           RETURN;
     1686     5055
     1687     5056
     1688     5057
     1689     5058    2   OALLOC_FAILED: ;
     1690     5059    2   OFREE_FAILED: ;
     1691     5060    2           ALTRETURN;
     1692     5061
     1693     5062    2   END NORMALIZE_DATA;
     1694     5063
     1695     5064                %BOX (TITLE=EXTERNAL_MODIFIED, PAGE=YES);
              5072    2
              5076    2   /***************************************************************************
              5078    2    *                                                                         *
              5082    2            *                             EXTERNAL_MODIFIED                           *
              5084    2            *                                                                         *
              5086    2           ***************************************************************************/

     1696     5090
     1697     5091        /*I* NAME: EXTERNAL_MODIFIED
     1698     5092            PARAMETERS:
     1699     5093                None.
     1700     5094            INPUT:
     1701     5095                PORT - Same as for external routine.
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:184  
     1702     5096                    Port must be open to an external file whose Spec
     1703     5097                    and/or Data components have been modified at LEVEL.
     1704     5098                LEVEL - Level # in PORT at which we found modified
     1705     5099                    Spec and/or Data components.
     1706     5100            OUTPUT:
     1707     5101            DESCRIPTION:
     1708     5102                Whenever we write out an external record, we write both the
     1709     5103                    Spec and Data components.
     1710     5104        */
     1711     5105
     1712     5106    1   EXTERNAL_MODIFIED: PROC ALTRET;
     1713     5107
     1714     5108
     1715     5109        %FPT_WRITE (FPTN=FPT_WRITE, STCLASS=AUTO);
     1716     5140    2   DCL PORT_KEY$ PTR;
     1717     5141    2   DCL TEXTC_BITS$ PTR;
     1718     5142        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
     1719     5157
     1720     5158
     1721     5159        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     1722     5182    2   DCL 1 TEXTC$BITS BASED(TEXTC_BITS$) ALIGNED,
     1723     5183    2         2 CNT UBIN BYTE CALIGNED,
     1724     5184    2         2 BITS BIT(9);
     1725     5185
     1726     5186
     1727     5187
     1728     5188    2           FPT_WRITE = CONST_FPT_WRITE;
     1729     5189    2           FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);
     1730     5190    2           FPT_WRITE.V.DCB# = PORT.DCB#;
     1731     5191    2           FPT_WRITE.BUF_ =
     1732     5192    2             VECTOR(PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER.BYTES);
     1733     5193    2           IF PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER.LENGTH# = 0 THEN
     1734     5194    2              FPT_WRITE.BUF_ = VECTOR(NIL);
     1735     5195                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
     1736     5196                PTR=PORT_KEY$);
     1737     5206
     1738     5207    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:185  
     1739     5208    3            CASE (%ORG_CONSEC);
     1740     5209    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY.BYTES);
     1741     5210    3              FPT_WRITE.V.REWRITE# = %TRUE;
     1742     5211    3            CASE (%ORG_INDEXED);
     1743     5212    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY.BYTES);
     1744     5213    3            CASE (ELSE);
     1745     5214    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY);
     1746     5215    3            END;
     1747     5216
     1748     5217    2           FPT_WRITE.V.DVBYTE = %CLEAR;
     1749     5218                %GETSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC, PTR=TEXTC_BITS$);
     1750     5228    3           IF TEXTC$BITS.CNT > 0 THEN DO;
     1751     5229    3              FPT_WRITE.V.DVBYTE = TEXTC$BITS.BITS;
     1752     5230    3              FPT_WRITE.V.DVBYTE.CONT# = %FALSE;
     1753     5231    3              END;
     1754     5232
     1755     5233    2           ERR_CODE = %CLEAR;
     1756     5234    2           IF VD_$$MON_ACC.V# > 10 THEN
     1757     5235    2              CALL VDG$MACC_PFLUSH_WRITE (FPT_WRITE.V.DCB#, FPT_WRITE.KEY_,
     1758     5236    2                FPT_WRITE.BUF_);
     1759     5237    2           CALL M$WRITE (FPT_WRITE)
     1760     5238    3           WHENALTRETURN DO;
     1761     5239    3              ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
     1762     5240    4              IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;
     1763     5241    5                 IF ERR_CODE.CODE# = %E$LD THEN DO;
     1764     5242                         /*
     1765     5243                         * If we got E$LD back from a write to a CONSEC file,
     1766     5244                         *    it just means the record length of the written data
     1767     5245                         *    was different from the record length of the record
     1768     5246                         *    being replaced.  We already warned the user about
     1769     5247                         *    this when s/he opened the file for update --
     1770     5248                         *    ignore the error now.
     1771     5249                         */
     1772     5250    5                    ERR_CODE = %CLEAR;  /* Ignore the error */
     1773     5251    5                    END;
     1774     5252    4                 ELSE IF ERR_CODE.CODE# = %E$WRDEL
     1775     5253    5                      AND FPT_WRITE.V.REWRITE# THEN DO;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:186  
     1776     5254                            /*
     1777     5255                            *  Monitor didn't like a rewrite of a consec file record.
     1778     5256                            *  Probably because we were writing a new record at the
     1779     5257                            *    end of the file.  Try writing the record again
     1780     5258                            *    without REWRITE.
     1781     5259                            */
     1782     5260    5                       FPT_WRITE.V.REWRITE# = %FALSE;
     1783     5261    5                       ERR_CODE = %CLEAR;
     1784     5262    5                       IF VD_$$MON_ACC.V# > 10 THEN
     1785     5263    5                          CALL VDG$MACC_PFLUSH_REWRITE (FPT_WRITE.V.DCB#,
     1786     5264    5                            FPT_WRITE.KEY_);
     1787     5265    5                       CALL M$WRITE (FPT_WRITE)
     1788     5266    6                       WHENALTRETURN DO;
     1789     5267    6                          ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
     1790     5268    7                          IF ERR_CODE.CODE# = %E$LD THEN DO;
     1791     5269    7                             ERR_CODE = %CLEAR;  /* Ignore the error */
     1792     5270    7                             END;
     1793     5271    6                          END;
     1794     5272    5                       END;
     1795     5273    4                 END;   /* If consec file */
     1796     5274    3              END;  /* WHENALTRETURN */
     1797     5275
     1798     5276    2           IF ERR_CODE ~= %CLEAR THEN
     1799     5277    2              GOTO WRITE_FAILED;
     1800     5278
     1801     5279    2           RETURN;
     1802     5280
     1803     5281
     1804     5282
     1805     5283    2   WRITE_FAILED:
     1806     5284    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1807     5285    2             ALTRET (OALLOC_FAILED);
     1808     5286    2           VD$ERR.ERR = ERR_CODE;
     1809     5287    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1810     5288    2           VD$ERR.DCB# = PORT.DCB#;
     1811     5289    2           ALTRETURN;
     1812     5290
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:187  
     1813     5291
     1814     5292    2   OALLOC_FAILED: ;
     1815     5293    2           ALTRETURN;
     1816     5294
     1817     5295    2   END EXTERNAL_MODIFIED;
     1818     5296
     1819     5297    1   END VDA$PFLUSH;
     1820     5298        %EOD;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:188  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PFLUSH.

   Procedure VDA$PFLUSH requires 555 words for executable code.
   Procedure VDA$PFLUSH requires 48 words of local(AUTO) storage.

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:189  

 Object Unit name= VDA$PFLUSH                                 File name= VDA$PORT.:VDA5TOU
 UTS= JUL 04 '97 11:07:48.80 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     12     14  VDA$PFLUSH
    2   Proc  even  none   555   1053  VDA$PFLUSH
    3  RoData even  none    11     13  VDA$PFLUSH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  VDA$PFLUSH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       2 VDG$MACC_PFLUSH
 yes     yes           Std       5 VDP$RWRITE
         yes           Std       1 VDG$MACC_PRETURN
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$MACC_PFLUSH_WRITE
         yes           Std       2 VDG$MACC_PFLUSH_REWRITE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:190  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_$$MON_ACC                          VD_$MAX_RECORD
     VD_$MIN_RECORD                        VD_$PAD                               VD_$STRIP_BLANKS
     B$TCB$                           r    B$SR_NON_BLANK$                       B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:191  


     1309        1        /*T***********************************************************/
     1310        2        /*T*                                                         */
     1311        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1312        4        /*T*                                                         */
     1313        5        /*T***********************************************************/
     1314        6
     1315        7        /*D* NAME: VDA$PFLUSH
     1316        8            PARAMETERS:
     1317        9                PORT - VD$PORT to use.  This Port must be open to
     1318       10                    an internal or external file.
     1319       11                FROM_PRESENTER - A BIT(1) ALIGNED flag containing either
     1320       12                    %TO_PRESENTER or %FROM_PRESENTER.  This flag is passed on
     1321       13                    (with a caveat) to VDP$RWRITE.  If the caller of
     1322       14                    VDA$PFLUSH is the Presenter, %FROM_PRESENTER should be
     1323       15                    passed; this tells VDP$RWRITE not to update the current
     1324       16                    window.
     1325       17            INPUT:
     1326       18                VD_$STRIP_BLANKS must contain 0 for "don't strip trailing blanks"
     1327       19                    or >0 for "strip all trailing blanks".
     1328       20                VD_$MIN_RECORD must contain the minimum number of bytes
     1329       21                    allowed in a record.  Must be between 0 and VD_$MAX_RECORD.V#,
     1330       22                    inclusive.
     1331       23                VD_$MAX_RECORD must contain the maximum number of bytes
     1332       24                    allowed in a record.  Must be between VD_$MIN_RECORD.V#
     1333       25                    and %MXNB_REC_DATA, inclusive.
     1334       26                VD_$PAD - A VD$BUFFER containing the pad byte(s) to use to extend
     1335       27                    short records.  VD_$PAD's value may be longer than one byte,
     1336       28                    but must be at least one byte long.
     1337       29            OUTPUT:
     1338       30                PORT.LEVEL.SPEC_MODIFIEDs and .DATA_MODIFIEDs will be reset.
     1339       31                For internal files, PORT.LEVEL.INTERNAL$'s VD$FILE_NODE.DESC.SPEC and
     1340       32                    .DATA$ may be altered.
     1341       33                VDP$RWRITE will be called with any changed nodes.
     1342       34            DESCRIPTION:
     1343       35                Loop thru the Port's level-registers, looking for modified
     1344       36                node components.  When we find one:
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:192  
     1345       37                o Write the change to the file.  For an internal file,
     1346       38                    VDA$LWRITE has already (inserted and) written the
     1347       39                    node to the file, so we do nothing for internal files.
     1348       40                    For an external file, we M$WRITE with KEYS and
     1349       41                    ONEWKEY=YES (write to file whether key already
     1350       42                    exists or not).
     1351       43                o Call VDP$RWRITE to inform the Presenter of the change.
     1352       44                    Include just enough keys in the VD$LOCATION we pass
     1353       45                    to indicate the level of the node in the file structure.
     1354       46                    If we were called by the Presenter (FROM_PRESENTER set)
     1355       47                    and we didn't change the node's Data component (as
     1356       48                    specified by $MIN_RECORD, $MAX_RECORD, and $STRIP_BLANKS),
     1357       49                    then pass %FROM_PRESENTER on to VDP$RWRITE.  Otherwise,
     1358       50                    pass %TO_PRESENTER on to VDP$RWRITE:  this will force
     1359       51                    the Presenter to update all windows containing the node,
     1360       52                    even the current one.  We want to do this 'cause we
     1361       53                    changed the node from what the user sent to the Pres'r;
     1362       54                    we show the change to the user by updating the window
     1363       55                    with the new Data component.
     1364       56        */
     1365       57
     1366       58        VDA$PFLUSH: PROC (PORT, FROM_PRESENTER) ALTRET;

     58  2 000000   000000 700200 xent  VDA$PFLUSH   TSX0  ! X66_AUTO_2
         2 000001   000060 000002                    ZERO    48,2

     1367       59
     1368       60
     1369       61        %INCLUDE VD_MACROS_M;
     1370     2276        %INCLUDE VD_PERR_C;
     1371     2424        %INCLUDE CP_6;
     1372     2505        %INCLUDE B_ERRORS_C;
     1373     3631        %INCLUDE B$TABLES_C;
     1374     3739
     1375     3740
     1376     3741        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1377     3839    1   DCL FROM_PRESENTER BIT(1) ALIGNED;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:193  
     1378     3840
     1379     3841
     1380     3842    1   DCL VDP$RWRITE          ENTRY (5) ALTRET;
     1381     3843    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1382     3844    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1383     3845    1   DCL VDG$MACC_PFLUSH     ENTRY (2);
     1384     3846    1   DCL VDG$MACC_PFLUSH_WRITE ENTRY (3);
     1385     3847    1   DCL VDG$MACC_PFLUSH_REWRITE ENTRY (2);
     1386     3848    1   DCL VDG$MACC_PRETURN    ENTRY (1);
     1387     3849
     1388     3850
     1389     3851        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1390     3896        %VD$NUMBER (NAME=VD_$MAX_RECORD, STCLASS=SYMREF);
     1391     3941        %VD$NUMBER (NAME=VD_$MIN_RECORD, STCLASS=SYMREF);
     1392     3986        %VD$BUFFER (NAME=VD_$PAD, STCLASS=SYMREF);
     1393     4044        %VD$NUMBER (NAME=VD_$STRIP_BLANKS, STCLASS=SYMREF);
     1394     4089    1   DCL B$TCB$ PTR SYMREF;
     1395     4090
     1396     4091
     1397     4092        %B$SR_NON_BLANK;
     1398     4096        %FPT_WRITE (FPTN=CONST_FPT_WRITE, STCLASS=CONSTANT, ONEWKEY=YES);
     1399     4127
     1400     4128
     1401     4129
     1402     4130    1   DCL HAD_ERROR BIT(1) ALIGNED;
     1403     4131    1   DCL STRUCTURE_NODE$ PTR;
     1404     4132        %VD$LOCATION (NAME=CURR_LOCATION, STCLASS=AUTO); /* Doesn't own objects */
     1405     4160    1   DCL LEVEL SBIN;
     1406     4161    1   DCL CANT_WRITE_THIS_LEVEL BIT(1) ALIGNED;
     1407     4162    1   DCL CHANGED_DATA BIT(1) ALIGNED;
     1408     4163    1   DCL STILL_FROM_PRESENTER BIT(1) ALIGNED;
     1409     4164    1   DCL SPEC_TO_PASS$ PTR;
     1410     4165    1   DCL BUFFER_TO_PASS$ PTR;
     1411     4166    1   DCL VD_ERR$ PTR;
     1412     4167
     1413     4168
     1414     4169        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:194  
     1415     4262        %VD$SPEC (NAME=SPEC$TO_PASS, STCLASS="BASED(SPEC_TO_PASS$)");
     1416     4276        %VD$BUFFER (NAME=BUFFER$TO_PASS, STCLASS="BASED(BUFFER_TO_PASS$)");
     1417     4334        %VD$BUFFER;
     1418     4392        %VD$BUFFER_HEADER;
     1419     4428        %VD$FILE_NODE;
     1420     4521        %VD$TEXTC_REMOTE;
     1421     4582        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1422     4635        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     1423     4638        %B$ALT;
     1424     4646
     1425     4647
     1426     4648
     1427     4649    1           HAD_ERROR = %FALSE;

   4649  2 000002   200005 450100                    STZ     HAD_ERROR,,AUTO

     1428     4650    1           IF VD_$$MON_ACC.V# > 0 THEN

   4650  2 000003   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 000004   000011 604400 2                  TMOZ    s:4653

     1429     4651    1              CALL VDG$MACC_PFLUSH (PORT, FROM_PRESENTER);

   4651  2 000005   200003 630500                    EPPR0   @PORT,,AUTO
         2 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000007   000000 701000 xent               TSX1    VDG$MACC_PFLUSH
         2 000010   000000 011000                    NOP     0

     1430     4652
     1431     4653    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;

   4653  2 000011   200003 470500                    LDP0    @PORT,,AUTO
         2 000012   000006 236100                    LDQ     6,,PR0
         2 000013   200006 756100                    STQ     STRUCTURE_NODE$,,AUTO

     1432     4654    1           CURR_LOCATION = PORT.CURRENT;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:195  
   4654  2 000014   000100 100500                    MLR     fill='000'O
         2 000015   000012 000044                    ADSC9   10,,PR0                  cn=0,n=36
         2 000016   200007 000044                    ADSC9   CURR_LOCATION,,AUTO      cn=0,n=36

     1433     4655
     1434     4656                /*
     1435     4657                *   EACH_LEVEL loops backward up thru the levels so we
     1436     4658                *       can start out with CURR_LOCATION, then as we
     1437     4659                *       move up the levels just %CLEAR-out a key in
     1438     4660                *       CURR_LOCATION.
     1439     4661                */
     1440     4662    1   EACH_LEVEL:
     1441     4663    2           DO LEVEL = STRUCTURE$NODE.COUNT# - 1 DOWNTO %LVL_LOWER;

   4663  2 000017   200006 471500       EACH_LEVEL   LDP1    STRUCTURE_NODE$,,AUTO
         2 000020   100014 235100                    LDA     12,,PR1
         2 000021   000001 135007                    SBLA    1,DL
         2 000022   200020 755100                    STA     LEVEL,,AUTO
         2 000023   000155 710000 2                  TRA     s:4703+2

     1442     4664    2              IF PORT.LEVEL.SPEC_MODIFIED (LEVEL)

   4664  2 000024   200020 236100                    LDQ     LEVEL,,AUTO
         2 000025   000007 402007                    MPY     7,DL
         2 000026   200003 470500                    LDP0    @PORT,,AUTO
         2 000027   000030 234106                    SZN     24,QL,PR0
         2 000030   000034 604000 2                  TMI     SOMETHINGS_BEEN_MODIFIED
         2 000031   000030 236106                    LDQ     24,QL,PR0
         2 000032   200000 316003                    CANQ    65536,DU
         2 000033   000147 600000 2                  TZE     s:4702

     1443     4665    2                OR PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN
     1444     4666    3   SOMETHINGS_BEEN_MODIFIED: DO;

   4666  2 000034                       SOMETHINGS_* null
     1445     4667    3                 CHANGED_DATA = %FALSE;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:196  
   4667  2 000034   200022 450100                    STZ     CHANGED_DATA,,AUTO

     1446     4668    4                 IF PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN DO;

   4668  2 000035   200020 236100                    LDQ     LEVEL,,AUTO
         2 000036   000007 402007                    MPY     7,DL
         2 000037   000030 236106                    LDQ     24,QL,PR0
         2 000040   200000 316003                    CANQ    65536,DU
         2 000041   000046 600000 2                  TZE     s:4672

     1447     4669    4                    CALL NORMALIZE_DATA (CHANGED_DATA)

   4669  2 000042   200022 631500                    EPPR1   CHANGED_DATA,,AUTO
         2 000043   200031 451500                    STP1    VD_ERR$+3,,AUTO
         2 000044   000172 701000 2                  TSX1    NORMALIZE_DATA
         2 000045   000171 702000 2                  TSX2    NORMALIZE_DATA_FAILED

     1448     4670    4                      ALTRET (NORMALIZE_DATA_FAILED);
     1449     4671    4                    END;

     1450     4672    3                 CANT_WRITE_THIS_LEVEL = %FALSE;

   4672  2 000046   200021 450100                    STZ     CANT_WRITE_THIS_LEVEL,,AUTO

     1451     4673    4                 IF PORT.DCB# ~= 0 THEN DO;

   4673  2 000047   200003 470500                    LDP0    @PORT,,AUTO
         2 000050   000004 720100                    LXL0    4,,PR0
         2 000051   000060 600000 2                  TZE     s:4681

     1452     4674    4                    CALL EXTERNAL_MODIFIED

   4674  2 000052   000562 701000 2                  TSX1    EXTERNAL_MODIFIED
         2 000053   000055 702000 2                  TSX2    s:4676
         2 000054   000060 710000 2                  TRA     s:4681

     1453     4675    5                    WHENALTRETURN DO;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:197  

     1454     4676    5                       CANT_WRITE_THIS_LEVEL = %TRUE;

   4676  2 000055   400000 236003                    LDQ     -131072,DU
         2 000056   200021 756100                    STQ     CANT_WRITE_THIS_LEVEL,,AUTO

     1455     4677    5                       HAD_ERROR = %TRUE;

   4677  2 000057   200005 756100                    STQ     HAD_ERROR,,AUTO

     1456     4678    5                       END;

     1457     4679    4                    END;

     1458     4680
     1459     4681    4                 IF NOT CANT_WRITE_THIS_LEVEL THEN DO;

   4681  2 000060   200021 234100                    SZN     CANT_WRITE_THIS_LEVEL,,AUTO
         2 000061   000137 604000 2                  TMI     s:4699

     1460     4682                         /* Tell the Presenter about the new node */
     1461     4683    4                    IF PORT.LEVEL.SPEC_MODIFIED (LEVEL) THEN

   4683  2 000062   200020 236100                    LDQ     LEVEL,,AUTO
         2 000063   000007 402007                    MPY     7,DL
         2 000064   200003 470500                    LDP0    @PORT,,AUTO
         2 000065   000030 234106                    SZN     24,QL,PR0
         2 000066   000075 605000 2                  TPL     s:4686

     1462     4684    4                       SPEC_TO_PASS$ = ADDR(PORT.LEVEL.SPEC (LEVEL));

   4684  2 000067   200020 236100                    LDQ     LEVEL,,AUTO
         2 000070   000007 402003                    MPY     7,DU
         2 000071   000025 036003                    ADLQ    21,DU
         2 000072   200003 036100                    ADLQ    @PORT,,AUTO
         2 000073   200024 756100                    STQ     SPEC_TO_PASS$,,AUTO
         2 000074   000077 710000 2                  TRA     s:4687
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:198  

     1463     4685    4                    ELSE
     1464     4686    4                       SPEC_TO_PASS$ = ADDR(NIL);

   4686  2 000075   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000076   200024 756100                    STQ     SPEC_TO_PASS$,,AUTO

     1465     4687    4                    IF PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN

   4687  2 000077   200020 236100                    LDQ     LEVEL,,AUTO
         2 000100   000007 402007                    MPY     7,DL
         2 000101   000030 236106                    LDQ     24,QL,PR0
         2 000102   200000 316003                    CANQ    65536,DU
         2 000103   000111 600000 2                  TZE     s:4690

     1466     4688    4                       BUFFER_TO_PASS$ = PORT.LEVEL.DATA$ (LEVEL);

   4688  2 000104   200020 236100                    LDQ     LEVEL,,AUTO
         2 000105   000007 402007                    MPY     7,DL
         2 000106   000027 236106                    LDQ     23,QL,PR0
         2 000107   200025 756100                    STQ     BUFFER_TO_PASS$,,AUTO
         2 000110   000113 710000 2                  TRA     s:4691

     1467     4689    4                    ELSE
     1468     4690    4                       BUFFER_TO_PASS$ = ADDR(NIL);

   4690  2 000111   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000112   200025 756100                    STQ     BUFFER_TO_PASS$,,AUTO

     1469     4691    4                    STILL_FROM_PRESENTER = FROM_PRESENTER;

   4691  2 000113   200004 471500                    LDP1    @FROM_PRESENTER,,AUTO
         2 000114   100000 236100                    LDQ     0,,PR1
         2 000115   400000 376003                    ANQ     -131072,DU
         2 000116   200023 756100                    STQ     STILL_FROM_PRESENTER,,AUTO

     1470     4692    4                    IF CHANGED_DATA THEN
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:199  

   4692  2 000117   200022 234100                    SZN     CHANGED_DATA,,AUTO
         2 000120   000122 605000 2                  TPL     s:4694

     1471     4693    4                       STILL_FROM_PRESENTER = %TO_PRESENTER;

   4693  2 000121   200023 450100                    STZ     STILL_FROM_PRESENTER,,AUTO

     1472     4694    4                    CALL VDP$RWRITE (PORT.FILE_KEY, CURR_LOCATION,

   4694  2 000122   200023 633500                    EPPR3   STILL_FROM_PRESENTER,,AUTO
         2 000123   200056 453500                    STP3    ERR_CODE+6,,AUTO
         2 000124   200024 237100                    LDAQ    SPEC_TO_PASS$,,AUTO
         2 000125   200054 757100                    STAQ    ERR_CODE+4,,AUTO
         2 000126   200007 634500                    EPPR4   CURR_LOCATION,,AUTO
         2 000127   200053 454500                    STP4    ERR_CODE+3,,AUTO
         2 000130   200003 236100                    LDQ     @PORT,,AUTO
         2 000131   000010 036003                    ADLQ    8,DU
         2 000132   200052 756100                    STQ     ERR_CODE+2,,AUTO
         2 000133   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 000134   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000135   000000 701000 xent               TSX1    VDP$RWRITE
         2 000136   000171 702000 2                  TSX2    NORMALIZE_DATA_FAILED

     1473     4695    4                      SPEC$TO_PASS, BUFFER$TO_PASS, STILL_FROM_PRESENTER)
     1474     4696    4                      ALTRET (RWRITE_FAILED);
     1475     4697    4                    END;

     1476     4698
     1477     4699    3                 PORT.LEVEL.SPEC_MODIFIED (LEVEL) = %FALSE;

   4699  2 000137   200020 236100                    LDQ     LEVEL,,AUTO
         2 000140   000007 402007                    MPY     7,DL
         2 000141   200003 470500                    LDP0    @PORT,,AUTO
         2 000142   000000 620006                    EAX0    0,QL
         2 000143   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000144   000030 356110                    ANSQ    24,X0,PR0
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:200  

     1478     4700    3                 PORT.LEVEL.DATA_MODIFIED (LEVEL) = %FALSE;

   4700  2 000145   000000 236000 3                  LDQ     0
         2 000146   000030 356110                    ANSQ    24,X0,PR0

     1479     4701    3                 END SOMETHINGS_BEEN_MODIFIED;

     1480     4702    2              CURR_LOCATION.KEY (LEVEL-1) = %CLEAR;

   4702  2 000147   200020 235100                    LDA     LEVEL,,AUTO
         2 000150   000001 735000                    ALS     1
         2 000151   200005 450105                    STZ     HAD_ERROR,AL,AUTO
         2 000152   200006 450105                    STZ     STRUCTURE_NODE$,AL,AUTO

     1481     4703    2              END EACH_LEVEL;

   4703  2 000153   000001 336007                    LCQ     1,DL
         2 000154   200020 056100                    ASQ     LEVEL,,AUTO
         2 000155   200020 235100                    LDA     LEVEL,,AUTO
         2 000156   000024 605400 2                  TPNZ    s:4664

     1482     4704
     1483     4705    1           IF HAD_ERROR THEN

   4705  2 000157   200005 234100                    SZN     HAD_ERROR,,AUTO
         2 000160   000162 605000 2                  TPL     s:4708

     1484     4706    1              ALTRETURN;

   4706  2 000161   000000 702200 xent               TSX2  ! X66_AALT

     1485     4707
     1486     4708    1           IF VD_$$MON_ACC.V# > 0 THEN

   4708  2 000162   000003 236000 xsym               LDQ     VD_$$MON_ACC+3
         2 000163   000170 604400 2                  TMOZ    s:4710
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:201  

     1487     4709    1              CALL VDG$MACC_PRETURN (PORT);

   4709  2 000164   200003 630500                    EPPR0   @PORT,,AUTO
         2 000165   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000166   000000 701000 xent               TSX1    VDG$MACC_PRETURN
         2 000167   000000 011000                    NOP     0

     1488     4710    1           RETURN;

   4710  2 000170   000000 702200 xent               TSX2  ! X66_ARET

   4708  2 000171                       NORMALIZE_D* null
   4708  2 000171                       EXTERNAL_MO* null
   4708  2 000171                       RWRITE_FAIL* null
     1489     4711
     1490     4712
     1491     4713    1   NORMALIZE_DATA_FAILED: ;
     1492     4714    1   EXTERNAL_MODIFIED_FAILED: ;
     1493     4715    1   RWRITE_FAILED: ;
     1494     4716    1           ALTRETURN;

   4716  2 000171   000000 702200 xent               TSX2  ! X66_AALT

     1495     4717
     1496     4718                %BOX (TITLE=NORMALIZE_DATA, PAGE=YES);
              4726    1
              4730    1   /***************************************************************************
              4732    1    *                                                                         *
              4736    1            *                               NORMALIZE_DATA                           *
              4738    1            *                                                                        *
              4740    1          ***************************************************************************/

     1497     4744
     1498     4745        /*I* NAME: NORMALIZE_DATA
     1499     4746            PARAMETERS:
     1500     4747                CHANGED_RECORD - Uninitialized BIT(1) ALIGNED.
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:202  
     1501     4748            INPUT:
     1502     4749                PORT - Same as for external routine.  Must be open to
     1503     4750                    either an internal or external file whose Data
     1504     4751                    component has been modified at LEVEL.
     1505     4752                LEVEL - Level # in PORT at which we found modified
     1506     4753                    Data component.
     1507     4754                PORT.LEVEL.INTERNAL$ (LEVEL) - If the file is internal, this
     1508     4755                    must point to the VD$FILE_NODE for the node.
     1509     4756            OUTPUT:
     1510     4757                If PORT.LEVEL.DATA$'s buffer contents are changed at all
     1511     4758                    by this routine, CHANGED_RECORD will be %TRUE; else
     1512     4759                    CHANGED_RECORD will be %FALSE.
     1513     4760                The PORT.LEVEL.DATA$ pointer may be changed, if we must
     1514     4761                    free the old buffer and allocate a new one.  In such a
     1515     4762                    case, if the file is internal we'll also change the
     1516     4763                    VD$FILE_NODE.DESC.DATA$ pointer.
     1517     4764                PORT.LEVEL.DATA$'s buffer contents may be changed.
     1518     4765            DESCRIPTION:
     1519     4766                If the file is predefined, just return:  the name-controlled
     1520     4767                    normalizing we do is for user data files only.
     1521     4768                If the $STRIP_BLANKS predefined name has been set on, we'll
     1522     4769                    first strip all trailing blanks from the buffer.
     1523     4770                We'll normalize the length of the buffer, padding/stripping
     1524     4771                    it to be between $MIN_RECORD and $MAX_RECORD,
     1525     4772                    inclusive.  If padding is needed, $PAD will be used as
     1526     4773                    the pad byte(s).
     1527     4774                    Note that if the record has the VFC attribute set (external data
     1528     4775                    records only), then the minimum record length is 1 no matter
     1529     4776                    what the user says (star 22377), and $PAD is ignored:  a VFC
     1530     4777                    char of 'A' is used.  Also that consec file records will always be
     1531     4778                    padded or truncated to the same length as any previous record.
     1532     4779        */
     1533     4780
     1534     4781    1   NORMALIZE_DATA: PROC (CHANGED_RECORD) ALTRET;

   4781  2 000172   200030 741300       NORMALIZE_D* STX1  ! VD_ERR$+2,,AUTO

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:203  
     1535     4782
     1536     4783
     1537     4784    2   DCL CHANGED_RECORD BIT(1) ALIGNED;
     1538     4785
     1539     4786
     1540     4787
     1541     4788    2   DCL DATA_BUFFER$ PTR;
     1542     4789    2   DCL T$ PTR; /* pointer for use as an argument */
     1543     4790    2   DCL NON_BLANK_INDEX SBIN;
     1544     4791    2   DCL TABLE_VAL SBIN;
     1545     4792    2   DCL MIN_RECORD UBIN;
     1546     4793    2   DCL TEXTC_DVBYTE$ PTR;
     1547     4794    2   DCL RECORD_NEEDS_VFC BIT(1) ALIGNED;
     1548     4795    2   DCL PAD_POINT SBIN;
     1549     4796    2   DCL NEW_NW SBIN;
     1550     4797    2   DCL I SBIN;
     1551     4798
     1552     4799
     1553     4800        %VD$BUFFER (NAME=DATA$BUFFER, STCLASS="BASED(DATA_BUFFER$)");
     1554     4858    2   DCL 1 TEXTC$DVBYTE BASED(TEXTC_DVBYTE$) ALIGNED,
     1555     4859    2         2 LENGTH# UBIN BYTE CALIGNED,
     1556     4860    2         2 TOP BIT(1),
     1557     4861    2         2 * BIT(1),
     1558     4862    2         2 VFC BIT(1),
     1559     4863    2         2 BIN BIT(1),
     1560     4864    2         2 TRANS BIT(1),
     1561     4865    2         2 * BIT(4);
     1562     4866        %F$DCB;
     1563     4923
     1564     4924
     1565     4925
     1566     4926    2           CHANGED_RECORD = %FALSE;

   4926  2 000173   200031 470500                    LDP0    @CHANGED_RECORD,,AUTO
         2 000174   000000 450100                    STZ     0,,PR0

     1567     4927    2           IF PORT.LEVEL.SPEC_TYPE# (LEVEL) ~= 0
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:204  

   4927  2 000175   200020 236100                    LDQ     LEVEL,,AUTO
         2 000176   000007 402007                    MPY     7,DL
         2 000177   200003 471500                    LDP1    @PORT,,AUTO
         2 000200   100024 220106                    LDX0    20,QL,PR1
         2 000201   000206 600000 2                  TZE     s:4937
         2 000202   000001 100003                    CMPX0   1,DU
         2 000203   000206 600000 2                  TZE     s:4937

     1568     4928    2             AND PORT.LEVEL.SPEC_TYPE# (LEVEL) ~= %SPT_EXT_RECORD THEN
     1569     4929    2              RETURN;

   4929  2 000204   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 000205   000001 702211                    TSX2  ! 1,X1

     1570     4930                /*
     1571     4931                *N* The above test does not screen out predefined scratch
     1572     4932                *N* files.  To fix #27741, all internal files are screened out
     1573     4933                *N* since, currently, only predefined files are internal.  If
     1574     4934                *N* this ever changes, a better test must be devised.  Code
     1575     4935                *N* below to handle internal files is retained for this reason.
     1576     4936                */
     1577     4937    2           IF PORT.DCB# = 0 THEN

   4937  2 000206   100004 721100                    LXL1    4,,PR1
         2 000207   000212 601000 2                  TNZ     s:4940

     1578     4938    2              RETURN;

   4938  2 000210   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 000211   000001 702211                    TSX2  ! 1,X1

     1579     4939
     1580     4940    2           DATA_BUFFER$ = PORT.LEVEL.DATA$ (LEVEL);

   4940  2 000212   100027 236106                    LDQ     23,QL,PR1
         2 000213   200032 756100                    STQ     DATA_BUFFER$,,AUTO
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:205  

     1581     4941
     1582     4942                /*
     1583     4943                *   Strip trailing blanks if requested.
     1584     4944                */
     1585     4945
     1586     4946    3           IF VD_$STRIP_BLANKS.V# > 0 AND DATA$BUFFER.LENGTH# > 0 THEN DO;

   4946  2 000214   000003 235000 xsym               LDA     VD_$STRIP_BLANKS+3
         2 000215   000257 604400 2                  TMOZ    s:4961
         2 000216   200032 473500                    LDP3    DATA_BUFFER$,,AUTO
         2 000217   300002 220100                    LDX0    2,,PR3
         2 000220   000257 604400 2                  TMOZ    s:4961

     1587     4947    3              CALL SEARCHR (NON_BLANK_INDEX, TABLE_VAL, B$SR_NON_BLANK,

   4947  2 000221   000000 636010                    EAQ     0,X0
         2 000222   000022 732000                    QRS     18
         2 000223   000000 474400 xsym               LDP4    B$SR_NON_BLANK$
         2 000224   000000 165540                    TCTR
         2 000225   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0
         2 000226   400000 000100                    ARG     0,,PR4
         2 000227   200034 000100                    ARG     NON_BLANK_INDEX,,AUTO
         2 000230   200034 235100                    LDA     NON_BLANK_INDEX,,AUTO
         2 000231   000033 771000                    ARL     27
         2 000232   200035 755100                    STA     TABLE_VAL,,AUTO
         2 000233   200034 551140                    STBA    NON_BLANK_INDEX,'40'O,AUTO
         2 000234   000237 606400 2                  TTN     s:4949
         2 000235   200034 054100                    AOS     NON_BLANK_INDEX,,AUTO
         2 000236   200034 156100                    SSQ     NON_BLANK_INDEX,,AUTO

     1588     4948    3                DATA$BUFFER.BYTES);
     1589     4949    3              IF TABLE_VAL = 0 THEN

   4949  2 000237   000000 115003                    CMPA    0,DU
         2 000240   000243 601000 2                  TNZ     s:4951

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:206  
     1590     4950    3                 NON_BLANK_INDEX = -1; /* No non-blank in rec */

   4950  2 000241   000001 336007                    LCQ     1,DL
         2 000242   200034 756100                    STQ     NON_BLANK_INDEX,,AUTO

     1591     4951    4              IF NON_BLANK_INDEX + 1 ~= DATA$BUFFER.LENGTH# THEN DO;

   4951  2 000243   300002 236100                    LDQ     2,,PR3
         2 000244   000022 732000                    QRS     18
         2 000245   200052 756100                    STQ     ERR_CODE+2,,AUTO
         2 000246   200034 236100                    LDQ     NON_BLANK_INDEX,,AUTO
         2 000247   000001 036007                    ADLQ    1,DL
         2 000250   200052 116100                    CMPQ    ERR_CODE+2,,AUTO
         2 000251   000257 600000 2                  TZE     s:4961

     1592     4952    4                 CHANGED_RECORD = %TRUE;

   4952  2 000252   400000 236003                    LDQ     -131072,DU
         2 000253   000000 756100                    STQ     0,,PR0

     1593     4953    4                 DATA$BUFFER.LENGTH# = NON_BLANK_INDEX + 1;

   4953  2 000254   200034 720100                    LXL0    NON_BLANK_INDEX,,AUTO
         2 000255   000001 621010                    EAX1    1,X0
         2 000256   300002 741100                    STX1    2,,PR3

     1594     4954    4                 END;

     1595     4955    3              END;

     1596     4956
     1597     4957                /*
     1598     4958                * make sure CONSEC files get blanked out properly, and that the
     1599     4959                * display shows their truncation if that occurs.
     1600     4960                */
     1601     4961    3           IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:207  
   4961  2 000257   100032 220100                    LDX0    26,,PR1
         2 000260   000001 100003                    CMPX0   1,DU
         2 000261   000305 601000 2                  TNZ     s:4968

     1602     4962    3              MIN_RECORD = DCBADDR (PORT.DCB#) -> F$DCB.ARS#;

   4962  2 000262   000001 473400 3                  LDP3    1
         2 000263   300000 474500                    LDP4    0,,PR3
         2 000264   100004 721100                    LXL1    4,,PR1
         2 000265   400000 475511                    LDP5    0,X1,PR4
         2 000266   500000 235100                    LDA     0,,PR5
         2 000267   200036 755100                    STA     MIN_RECORD,,AUTO

     1603     4963    3              IF MIN_RECORD = 0 THEN EXIT;

   4963  2 000270   000304 600000 2                  TZE     s:4967

     1604     4964    3              IF DATA$BUFFER.LENGTH# <= MIN_RECORD THEN EXIT;

   4964  2 000271   200032 476500                    LDP6    DATA_BUFFER$,,AUTO
         2 000272   600002 236100                    LDQ     2,,PR6
         2 000273   000022 732000                    QRS     18
         2 000274   000304 604000 2                  TMI     s:4967
         2 000275   200036 116100                    CMPQ    MIN_RECORD,,AUTO
         2 000276   000304 602000 2                  TNC     s:4967
         2 000277   000304 600000 2                  TZE     s:4967

     1605     4965    3              CHANGED_RECORD = %TRUE;

   4965  2 000300   400000 236003                    LDQ     -131072,DU
         2 000301   000000 756100                    STQ     0,,PR0

     1606     4966    3              DATA$BUFFER.LENGTH# = MIN_RECORD;

   4966  2 000302   000000 620005                    EAX0    0,AL
         2 000303   600002 740100                    STX0    2,,PR6

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:208  
     1607     4967    3              END;

   4967  2 000304   000307 710000 2                  TRA     s:4973

     1608     4968    2           ELSE MIN_RECORD = VD_$MIN_RECORD.V#;

   4968  2 000305   000003 235000 xsym               LDA     VD_$MIN_RECORD+3
         2 000306   200036 755100                    STA     MIN_RECORD,,AUTO

     1609     4969
     1610     4970                /*
     1611     4971                *   Truncate long data to maximum length.
     1612     4972                */
     1613     4973    3           IF DATA$BUFFER.LENGTH# > VD_$MAX_RECORD.V# THEN DO;

   4973  2 000307   200032 473500                    LDP3    DATA_BUFFER$,,AUTO
         2 000310   300002 236100                    LDQ     2,,PR3
         2 000311   000022 732000                    QRS     18
         2 000312   000003 116000 xsym               CMPQ    VD_$MAX_RECORD+3
         2 000313   000320 604400 2                  TMOZ    s:4983

     1614     4974    3              CHANGED_RECORD = %TRUE;

   4974  2 000314   400000 236003                    LDQ     -131072,DU
         2 000315   000000 756100                    STQ     0,,PR0

     1615     4975    3              DATA$BUFFER.LENGTH# = VD_$MAX_RECORD.V#;

   4975  2 000316   000003 720000 xsym               LXL0    VD_$MAX_RECORD+3
         2 000317   300002 740100                    STX0    2,,PR3

     1616     4976    3              END;

     1617     4977
     1618     4978
     1619     4979                /*
     1620     4980                *   Lengthen short data to minimum length.
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:209  
     1621     4981                */
     1622     4982
     1623     4983    2           RECORD_NEEDS_VFC = %FALSE;

   4983  2 000320   200040 450100                    STZ     RECORD_NEEDS_VFC,,AUTO

     1624     4984    3           IF MIN_RECORD < 1 AND PORT.DCB# ~= 0 THEN DO;

   4984  2 000321   200036 235100                    LDA     MIN_RECORD,,AUTO
         2 000322   000353 601000 2                  TNZ     s:5003
         2 000323   100004 720100                    LXL0    4,,PR1
         2 000324   000353 600000 2                  TZE     s:5003

     1625     4985                   %GETSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC,
     1626     4986                   PTR=TEXTC_DVBYTE$);

   4993  2 000325   100034 721100                    LXL1    28,,PR1
         2 000326   000002 101003                    CMPX1   2,DU
         2 000327   000334 601000 2                  TNZ     s:4993+7

   4993  2 000330   100035 474500                    LDP4    29,,PR1
         2 000331   400002 635500                    EPPR5   2,,PR4
         2 000332   200037 455500                    STP5    TEXTC_DVBYTE$,,AUTO
         2 000333   000337 710000 2                  TRA     s:4996

   4993  2 000334   200003 236100                    LDQ     @PORT,,AUTO
         2 000335   000035 036003                    ADLQ    29,DU
         2 000336   200037 756100                    STQ     TEXTC_DVBYTE$,,AUTO

     1627     4996    4              IF TEXTC$DVBYTE.LENGTH# > 0 THEN DO;

   4996  2 000337   200037 474500                    LDP4    TEXTC_DVBYTE$,,AUTO
         2 000340   400000 236100                    LDQ     0,,PR4
         2 000341   777000 316003                    CANQ    -512,DU
         2 000342   000353 600000 2                  TZE     s:5003

     1628     4997    4                 RECORD_NEEDS_VFC = TEXTC$DVBYTE.VFC;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:210  

   4997  2 000343   400000 236100                    LDQ     0,,PR4
         2 000344   000013 736000                    QLS     11
         2 000345   400000 376003                    ANQ     -131072,DU
         2 000346   200040 756100                    STQ     RECORD_NEEDS_VFC,,AUTO

     1629     4998    4                 IF RECORD_NEEDS_VFC THEN

   4998  2 000347   200040 234100                    SZN     RECORD_NEEDS_VFC,,AUTO
         2 000350   000353 605000 2                  TPL     s:5003

     1630     4999    4                    MIN_RECORD = 1;

   4999  2 000351   000001 235007                    LDA     1,DL
         2 000352   200036 755100                    STA     MIN_RECORD,,AUTO

     1631     5000    4                 END;

     1632     5001    3              END;

     1633     5002
     1634     5003    2           IF DATA$BUFFER.LENGTH# < MIN_RECORD THEN

   5003  2 000353   300002 236100                    LDQ     2,,PR3
         2 000354   000022 732000                    QRS     18
         2 000355   000360 604000 2                  TMI     GUAR_MIN_RECORD
         2 000356   200036 116100                    CMPQ    MIN_RECORD,,AUTO
         2 000357   000556 603000 2                  TRC     s:5054

     1635     5004    3   GUAR_MIN_RECORD: DO;

   5004  2 000360                       GUAR_MIN_RE* null
     1636     5005    3              CHANGED_RECORD = %TRUE;

   5005  2 000360   400000 236003                    LDQ     -131072,DU
         2 000361   000000 756100                    STQ     0,,PR0

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:211  
     1637     5006    3              PAD_POINT = DATA$BUFFER.LENGTH#;

   5006  2 000362   300002 236100                    LDQ     2,,PR3
         2 000363   000022 732000                    QRS     18
         2 000364   200041 756100                    STQ     PAD_POINT,,AUTO

     1638     5007    3              NEW_NW = (LENGTHC(VD$BUFFER_HEADER) + MIN_RECORD +

   5007  2 000365   200036 236100                    LDQ     MIN_RECORD,,AUTO
         2 000366   000015 036007                    ADLQ    13,DL
         2 000367   000002 772000                    QRL     2
         2 000370   200042 756100                    STQ     NEW_NW,,AUTO

     1639     5008    3                %(NB_PER_WORD-1)) / %NB_PER_WORD;
     1640     5009    3              IF NEW_NW <= DATA$BUFFER.OBJECT.SIZE# THEN

   5009  2 000371   300000 236100                    LDQ     0,,PR3
         2 000372   000022 736000                    QLS     18
         2 000373   000022 732000                    QRS     18
         2 000374   200042 116100                    CMPQ    NEW_NW,,AUTO
         2 000375   000431 604000 2                  TMI     COPY_TO_NEW_SPACE

     1641     5010    4   FITS_IN_OLD_SPACE: DO;

   5010  2 000376                       FITS_IN_OLD* null
     1642     5011    4                 DATA$BUFFER.LENGTH# = MIN_RECORD;

   5011  2 000376   000000 620005                    EAX0    0,AL
         2 000377   300002 740100                    STX0    2,,PR3

     1643     5012    5                 IF RECORD_NEEDS_VFC THEN DO;

   5012  2 000400   200040 234100                    SZN     RECORD_NEEDS_VFC,,AUTO
         2 000401   000407 605000 2                  TPL     s:5016

     1644     5013    5                    DATA$BUFFER.BYTES = %DFLT_VFC;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:212  
   5013  2 000402   040140 100400                    MLR     fill='040'O
         2 000403   000002 000001 3                  ADSC9   2                        cn=0,n=1
         2 000404   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0

     1645     5014    5                    PAD_POINT = %LENGTHC(DFLT_VFC);

   5014  2 000405   000001 235007                    LDA     1,DL
         2 000406   200041 755100                    STA     PAD_POINT,,AUTO

     1646     5015    5                    END;

     1647     5016    4                 IF PAD_POINT < DATA$BUFFER.LENGTH#

   5016  2 000407   300002 236100                    LDQ     2,,PR3
         2 000410   000022 732000                    QRS     18
         2 000411   200041 116100                    CMPQ    PAD_POINT,,AUTO
         2 000412   000527 604400 2                  TMOZ    s:5043
         2 000413   000002 221000 xsym               LDX1    VD_$PAD+2
         2 000414   040000 106440                    CMPC    fill='040'O
         2 000415   000002 400011 xsym               ADSC9   VD_$PAD+2                cn=2,n=*X1
         2 000416   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000417   000527 601000 2                  TNZ     s:5043

     1648     5017    5                   AND VD_$PAD.BYTES = %CHR_SPACE THEN DO;

     1649     5018    5                    CALL INSERT (DATA$BUFFER.BYTES, PAD_POINT, , %CHR_SPACE);

   5018  2 000420   000000 636010                    EAQ     0,X0
         2 000421   000022 732000                    QRS     18
         2 000422   200041 136100                    SBLQ    PAD_POINT,,AUTO
         2 000423   000000 622006                    EAX2    0,QL
         2 000424   200041 235100                    LDA     PAD_POINT,,AUTO
         2 000425   040145 100400                    MLR     fill='040'O
         2 000426   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000427   300002 400012                    ADSC9   2,A,PR3                  cn=2,n=*X2

     1650     5019    5                    END;
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:213  

     1651     5020    4                 END FITS_IN_OLD_SPACE;

   5020  2 000430   000527 710000 2                  TRA     s:5043

     1652     5021    3              ELSE
     1653     5022    4   COPY_TO_NEW_SPACE: DO;

   5022  2 000431                       COPY_TO_NEW* null
     1654     5023    4                 CALL VDG$OALLOC (%CLS_BUFFER, T$, NEW_NW)

   5023  2 000431   200042 634500                    EPPR4   NEW_NW,,AUTO
         2 000432   200054 454500                    STP4    ERR_CODE+4,,AUTO
         2 000433   200033 635500                    EPPR5   T$,,AUTO
         2 000434   200053 455500                    STP5    ERR_CODE+3,,AUTO
         2 000435   000003 236000 3                  LDQ     3
         2 000436   200052 756100                    STQ     ERR_CODE+2,,AUTO
         2 000437   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 000440   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000441   000000 701000 xent               TSX1    VDG$OALLOC
         2 000442   000560 702000 2                  TSX2    OALLOC_FAILED

     1655     5024    4                   ALTRET (OALLOC_FAILED);
     1656     5025    4                 DATA_BUFFER$ = T$;

   5025  2 000443   200033 236100                    LDQ     T$,,AUTO
         2 000444   200032 756100                    STQ     DATA_BUFFER$,,AUTO

     1657     5026    4                 DATA$BUFFER.LENGTH# = MIN_RECORD;

   5026  2 000445   200036 720100                    LXL0    MIN_RECORD,,AUTO
         2 000446   200032 470500                    LDP0    DATA_BUFFER$,,AUTO
         2 000447   000002 740100                    STX0    2,,PR0

     1658     5027    5                 IF RECORD_NEEDS_VFC THEN DO;

   5027  2 000450   200040 234100                    SZN     RECORD_NEEDS_VFC,,AUTO
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:214  
         2 000451   000475 605000 2                  TPL     s:5033

     1659     5028    5                    CALL CONCAT (DATA$BUFFER.BYTES, %DFLT_VFC,

   5028  2 000452   200020 236100                    LDQ     LEVEL,,AUTO
         2 000453   000007 402007                    MPY     7,DL
         2 000454   200003 471500                    LDP1    @PORT,,AUTO
         2 000455   100027 473506                    LDP3    23,QL,PR1
         2 000456   300002 221100                    LDX1    2,,PR3
         2 000457   040140 100400                    MLR     fill='040'O
         2 000460   000002 000001 3                  ADSC9   2                        cn=0,n=1
         2 000461   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0
         2 000462   000000 636010                    EAQ     0,X0
         2 000463   000022 732000                    QRS     18
         2 000464   000001 116007                    CMPQ    1,DL
         2 000465   000472 604400 2                  TMOZ    s:5030
         2 000466   777777 622010                    EAX2    -1,X0
         2 000467   040140 100540                    MLR     fill='040'O
         2 000470   300002 400011                    ADSC9   2,,PR3                   cn=2,n=*X1
         2 000471   000002 600012                    ADSC9   2,,PR0                   cn=3,n=*X2

     1660     5029    5                      PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.BYTES);
     1661     5030    5                    PAD_POINT = %LENGTHC(DFLT_VFC);

   5030  2 000472   000001 235007                    LDA     1,DL
         2 000473   200041 755100                    STA     PAD_POINT,,AUTO

     1662     5031    5                    END;

   5031  2 000474   000505 710000 2                  TRA     s:5035

     1663     5032    4                 ELSE
     1664     5033    4                    DATA$BUFFER.BYTES =

   5033  2 000475   200020 236100                    LDQ     LEVEL,,AUTO
         2 000476   000007 402007                    MPY     7,DL
         2 000477   200003 471500                    LDP1    @PORT,,AUTO
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:215  
         2 000500   100027 473506                    LDP3    23,QL,PR1
         2 000501   300002 221100                    LDX1    2,,PR3
         2 000502   040140 100540                    MLR     fill='040'O
         2 000503   300002 400011                    ADSC9   2,,PR3                   cn=2,n=*X1
         2 000504   000002 400010                    ADSC9   2,,PR0                   cn=2,n=*X0

     1665     5034    4                      PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.BYTES;
     1666     5035    4                 CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)

   5035  2 000505   200020 236100                    LDQ     LEVEL,,AUTO
         2 000506   000007 402007                    MPY     7,DL
         2 000507   100027 473506                    LDP3    23,QL,PR1
         2 000510   200052 453500                    STP3    ERR_CODE+2,,AUTO
         2 000511   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 000512   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000513   000000 701000 xent               TSX1    VDG$OFREE
         2 000514   000560 702000 2                  TSX2    OALLOC_FAILED

     1667     5036    4                   ALTRET (OFREE_FAILED);
     1668     5037    4                 PORT.LEVEL.DATA$ (LEVEL) = DATA_BUFFER$;

   5037  2 000515   200020 236100                    LDQ     LEVEL,,AUTO
         2 000516   000007 402007                    MPY     7,DL
         2 000517   000000 620006                    EAX0    0,QL
         2 000520   200032 236100                    LDQ     DATA_BUFFER$,,AUTO
         2 000521   200003 470500                    LDP0    @PORT,,AUTO
         2 000522   000027 756110                    STQ     23,X0,PR0

     1669     5038    4                 IF PORT.DCB# = 0 THEN

   5038  2 000523   000004 721100                    LXL1    4,,PR0
         2 000524   000527 601000 2                  TNZ     s:5043

     1670     5039    4                    PORT.LEVEL.INTERNAL$ (LEVEL) -> VD$FILE_NODE.DESC.DATA$ =

   5039  2 000525   000031 471510                    LDP1    25,X0,PR0
         2 000526   100010 756100                    STQ     8,,PR1
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:216  

     1671     5040    4                      DATA_BUFFER$;
     1672     5041    4                 END COPY_TO_NEW_SPACE;

     1673     5042
     1674     5043    3              IF VD_$PAD.BYTES ~= %CHR_SPACE THEN

   5043  2 000527   000002 220000 xsym               LDX0    VD_$PAD+2
         2 000530   040000 106440                    CMPC    fill='040'O
         2 000531   000002 400010 xsym               ADSC9   VD_$PAD+2                cn=2,n=*X0
         2 000532   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000533   000556 600000 2                  TZE     s:5054

     1675     5044    4   PAD_WITH_NON_BLANK: DO;

   5044  2 000534                       PAD_WITH_NO* null
     1676     5045    5                 DO I = PAD_POINT TO (MIN_RECORD - 1)

   5045  2 000534   200041 235100                    LDA     PAD_POINT,,AUTO
         2 000535   200043 755100                    STA     I,,AUTO
         2 000536   000552 710000 2                  TRA     s:5049+4

     1677     5046    5                   BY VD_$PAD.LENGTH#;
     1678     5047    5                    CALL INSERT (DATA$BUFFER.BYTES, I, VD_$PAD.LENGTH#,

   5047  2 000537   200032 470500                    LDP0    DATA_BUFFER$,,AUTO
         2 000540   000002 220100                    LDX0    2,,PR0
         2 000541   000002 221000 xsym               LDX1    VD_$PAD+2
         2 000542   200043 235100                    LDA     I,,AUTO
         2 000543   040145 100440                    MLR     fill='040'O
         2 000544   000002 400011 xsym               ADSC9   VD_$PAD+2                cn=2,n=*X1
         2 000545   000002 400011                    ADSC9   2,A,PR0                  cn=2,n=*X1

     1679     5048    5                      VD_$PAD.BYTES);
     1680     5049    5                    END;

   5049  2 000546   000002 236000 xsym               LDQ     VD_$PAD+2
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:217  
         2 000547   000022 732000                    QRS     18
         2 000550   200043 036100                    ADLQ    I,,AUTO
         2 000551   200043 756100                    STQ     I,,AUTO
         2 000552   200043 236100                    LDQ     I,,AUTO
         2 000553   000537 604000 2                  TMI     s:5047
         2 000554   200036 116100                    CMPQ    MIN_RECORD,,AUTO
         2 000555   000537 602000 2                  TNC     s:5047

     1681     5050    4                 END PAD_WITH_NON_BLANK;

     1682     5051    3              END GUAR_MIN_RECORD;

     1683     5052
     1684     5053
     1685     5054    2           RETURN;

   5054  2 000556   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 000557   000001 702211                    TSX2  ! 1,X1

   5045  2 000560                       OALLOC_FAIL* null
   5045  2 000560                       OFREE_FAILED null
     1686     5055
     1687     5056
     1688     5057
     1689     5058    2   OALLOC_FAILED: ;
     1690     5059    2   OFREE_FAILED: ;
     1691     5060    2           ALTRETURN;

   5060  2 000560   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 000561   000000 702211                    TSX2  ! 0,X1

     1692     5061
     1693     5062    2   END NORMALIZE_DATA;
     1694     5063
     1695     5064                %BOX (TITLE=EXTERNAL_MODIFIED, PAGE=YES);
              5072    2
              5076    2   /***************************************************************************
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:218  
              5078    2    *                                                                         *
              5082    2            *                             EXTERNAL_MODIFIED                          *
              5084    2            *                                                                        *
              5086    2          ***************************************************************************/

     1696     5090
     1697     5091        /*I* NAME: EXTERNAL_MODIFIED
     1698     5092            PARAMETERS:
     1699     5093                None.
     1700     5094            INPUT:
     1701     5095                PORT - Same as for external routine.
     1702     5096                    Port must be open to an external file whose Spec
     1703     5097                    and/or Data components have been modified at LEVEL.
     1704     5098                LEVEL - Level # in PORT at which we found modified
     1705     5099                    Spec and/or Data components.
     1706     5100            OUTPUT:
     1707     5101            DESCRIPTION:
     1708     5102                Whenever we write out an external record, we write both the
     1709     5103                    Spec and Data components.
     1710     5104        */
     1711     5105
     1712     5106    1   EXTERNAL_MODIFIED: PROC ALTRET;

   5106  2 000562   200030 741300       EXTERNAL_MO* STX1  ! VD_ERR$+2,,AUTO

     1713     5107
     1714     5108
     1715     5109        %FPT_WRITE (FPTN=FPT_WRITE, STCLASS=AUTO);
     1716     5140    2   DCL PORT_KEY$ PTR;
     1717     5141    2   DCL TEXTC_BITS$ PTR;
     1718     5142        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
     1719     5157
     1720     5158
     1721     5159        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     1722     5182    2   DCL 1 TEXTC$BITS BASED(TEXTC_BITS$) ALIGNED,
     1723     5183    2         2 CNT UBIN BYTE CALIGNED,
     1724     5184    2         2 BITS BIT(9);
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:219  
     1725     5185
     1726     5186
     1727     5187
     1728     5188    2           FPT_WRITE = CONST_FPT_WRITE;

   5188  2 000563   000100 100400                    MLR     fill='000'O
         2 000564   000000 000060 1                  ADSC9   CONST_FPT_WRITE          cn=0,n=48
         2 000565   200032 000060                    ADSC9   FPT_WRITE,,AUTO          cn=0,n=48

     1729     5189    2           FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);

   5189  2 000566   000004 235000 3                  LDA     4
         2 000567   200052 452500                    STP2    ERR_CODE+2,,AUTO
         2 000570   200052 236100                    LDQ     ERR_CODE+2,,AUTO
         2 000571   000042 036003                    ADLQ    34,DU
         2 000572   200032 757100                    STAQ    FPT_WRITE,,AUTO

     1730     5190    2           FPT_WRITE.V.DCB# = PORT.DCB#;

   5190  2 000573   200003 470500                    LDP0    @PORT,,AUTO
         2 000574   000004 720100                    LXL0    4,,PR0
         2 000575   200042 740100                    STX0    NEW_NW,,AUTO

     1731     5191    2           FPT_WRITE.BUF_ =

   5191  2 000576   000036 471500                    LDP1    30,,PR0
         2 000577   100002 222100                    LDX2    2,,PR1
         2 000600   000000 635012                    EAA     0,X2
         2 000601   000002 731000                    ARS     2
         2 000602   000140 135007                    SBLA    96,DL
         2 000603   200052 451500                    STP1    ERR_CODE+2,,AUTO
         2 000604   200052 236100                    LDQ     ERR_CODE+2,,AUTO
         2 000605   000005 036000 3                  ADLQ    5
         2 000606   200036 757100                    STAQ    MIN_RECORD,,AUTO

     1732     5192    2             VECTOR(PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER.BYTES);
     1733     5193    2           IF PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER.LENGTH# = 0 THEN
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:220  

   5193  2 000607   000036 471500                    LDP1    30,,PR0
         2 000610   100002 222100                    LDX2    2,,PR1
         2 000611   000614 601000 2                  TNZ     s:5203

     1734     5194    2              FPT_WRITE.BUF_ = VECTOR(NIL);

   5194  2 000612   000006 237000 3                  LDAQ    6
         2 000613   200036 757100                    STAQ    MIN_RECORD,,AUTO

     1735     5195                %GETKEY (KEY=PORT.CURRENT.KEY, INDX="%(LVL_EXT_REC-1)",
     1736     5196                PTR=PORT_KEY$);

   5203  2 000614   000012 722100                    LXL2    10,,PR0
         2 000615   000002 102003                    CMPX2   2,DU
         2 000616   000623 601000 2                  TNZ     s:5203+7

   5203  2 000617   000013 471500                    LDP1    11,,PR0
         2 000620   100002 633500                    EPPR3   2,,PR1
         2 000621   200046 453500                    STP3    PORT_KEY$,,AUTO
         2 000622   000626 710000 2                  TRA     s:5207

   5203  2 000623   200003 236100                    LDQ     @PORT,,AUTO
         2 000624   000013 036003                    ADLQ    11,DU
         2 000625   200046 756100                    STQ     PORT_KEY$,,AUTO

     1737     5206
     1738     5207    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5207  2 000626   000032 223100                    LDX3    26,,PR0
         2 000627   000004 103003                    CMPX3   4,DU
         2 000630   000632 602013 2                  TNC     s:5207+4,X3
         2 000631   000662 710000 2                  TRA     s:5214
         2 000632   000662 710000 2                  TRA     s:5214
         2 000633   000636 710000 2                  TRA     s:5209
         2 000634   000662 710000 2                  TRA     s:5214
         2 000635   000651 710000 2                  TRA     s:5212
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:221  

     1739     5208    3            CASE (%ORG_CONSEC);

     1740     5209    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY.BYTES);

   5209  2 000636   200046 471500                    LDP1    PORT_KEY$,,AUTO
         2 000637   100000 236100                    LDQ     0,,PR1
         2 000640   000033 772000                    QRL     27
         2 000641   000064 737000                    LLS     52
         2 000642   000140 135007                    SBLA    96,DL
         2 000643   200046 236100                    LDQ     PORT_KEY$,,AUTO
         2 000644   200000 036007                    ADLQ    65536,DL
         2 000645   200034 757100                    STAQ    NON_BLANK_INDEX,,AUTO

     1741     5210    3              FPT_WRITE.V.REWRITE# = %TRUE;

   5210  2 000646   000100 236007                    LDQ     64,DL
         2 000647   200042 256100                    ORSQ    NEW_NW,,AUTO
         2 000650   000673 710000 2                  TRA     s:5217

     1742     5211    3            CASE (%ORG_INDEXED);

     1743     5212    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY.BYTES);

   5212  2 000651   200046 471500                    LDP1    PORT_KEY$,,AUTO
         2 000652   100000 236100                    LDQ     0,,PR1
         2 000653   000033 772000                    QRL     27
         2 000654   000064 737000                    LLS     52
         2 000655   000140 135007                    SBLA    96,DL
         2 000656   200046 236100                    LDQ     PORT_KEY$,,AUTO
         2 000657   200000 036007                    ADLQ    65536,DL
         2 000660   200034 757100                    STAQ    NON_BLANK_INDEX,,AUTO
         2 000661   000673 710000 2                  TRA     s:5217

     1744     5213    3            CASE (ELSE);

     1745     5214    3              FPT_WRITE.KEY_ = VECTOR(PORT$KEY);
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:222  

   5214  2 000662   200046 471500                    LDP1    PORT_KEY$,,AUTO
         2 000663   100000 236100                    LDQ     0,,PR1
         2 000664   000033 772000                    QRL     27
         2 000665   000001 624006                    EAX4    1,QL
         2 000666   000000 635014                    EAA     0,X4
         2 000667   000002 771000                    ARL     2
         2 000670   000140 135007                    SBLA    96,DL
         2 000671   200046 236100                    LDQ     PORT_KEY$,,AUTO
         2 000672   200034 757100                    STAQ    NON_BLANK_INDEX,,AUTO

     1746     5215    3            END;

     1747     5216
     1748     5217    2           FPT_WRITE.V.DVBYTE = %CLEAR;

   5217  2 000673   000000 236003                    LDQ     0,DU
         2 000674   200045 552140                    STBQ    I+2,'40'O,AUTO

     1749     5218                %GETSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC, PTR=TEXTC_BITS$);

   5225  2 000675   000034 722100                    LXL2    28,,PR0
         2 000676   000002 102003                    CMPX2   2,DU
         2 000677   000704 601000 2                  TNZ     s:5225+7

   5225  2 000700   000035 473500                    LDP3    29,,PR0
         2 000701   300002 634500                    EPPR4   2,,PR3
         2 000702   200047 454500                    STP4    TEXTC_BITS$,,AUTO
         2 000703   000707 710000 2                  TRA     s:5228

   5225  2 000704   200003 236100                    LDQ     @PORT,,AUTO
         2 000705   000035 036003                    ADLQ    29,DU
         2 000706   200047 756100                    STQ     TEXTC_BITS$,,AUTO

     1750     5228    3           IF TEXTC$BITS.CNT > 0 THEN DO;

   5228  2 000707   200047 473500                    LDP3    TEXTC_BITS$,,AUTO
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:223  
         2 000710   300000 236100                    LDQ     0,,PR3
         2 000711   777000 316003                    CANQ    -512,DU
         2 000712   000717 600000 2                  TZE     s:5233

     1751     5229    3              FPT_WRITE.V.DVBYTE = TEXTC$BITS.BITS;

   5229  2 000713   000011 736000                    QLS     9
         2 000714   200045 552140                    STBQ    I+2,'40'O,AUTO

     1752     5230    3              FPT_WRITE.V.DVBYTE.CONT# = %FALSE;

   5230  2 000715   000010 236000 3                  LDQ     8
         2 000716   200045 356100                    ANSQ    I+2,,AUTO

     1753     5231    3              END;

     1754     5232
     1755     5233    2           ERR_CODE = %CLEAR;

   5233  2 000717   200050 450100                    STZ     ERR_CODE,,AUTO

     1756     5234    2           IF VD_$$MON_ACC.V# > 10 THEN

   5234  2 000720   000003 236000 xsym               LDQ     VD_$$MON_ACC+3
         2 000721   000012 116007                    CMPQ    10,DL
         2 000722   000735 604400 2                  TMOZ    s:5237

     1757     5235    2              CALL VDG$MACC_PFLUSH_WRITE (FPT_WRITE.V.DCB#, FPT_WRITE.KEY_,

   5235  2 000723   200036 634500                    EPPR4   MIN_RECORD,,AUTO
         2 000724   200054 454500                    STP4    ERR_CODE+4,,AUTO
         2 000725   200034 635500                    EPPR5   NON_BLANK_INDEX,,AUTO
         2 000726   200053 455500                    STP5    ERR_CODE+3,,AUTO
         2 000727   200042 636500                    EPPR6   NEW_NW,,AUTO
         2 000730   200052 456500                    STP6    ERR_CODE+2,,AUTO
         2 000731   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 000732   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:224  
         2 000733   000000 701000 xent               TSX1    VDG$MACC_PFLUSH_WRITE
         2 000734   000000 011000                    NOP     0

     1758     5236    2                FPT_WRITE.BUF_);
     1759     5237    2           CALL M$WRITE (FPT_WRITE)

   5237  2 000735   200032 630500                    EPPR0   FPT_WRITE,,AUTO
         2 000736   440001 713400                    CLIMB   alt,write
         2 000737   401400 401760                    pmme    nvectors=4
         2 000740   000742 702000 2                  TSX2    s:5239
         2 000741   001021 710000 2                  TRA     s:5276

     1760     5238    3           WHENALTRETURN DO;

     1761     5239    3              ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5239  2 000742   000000 470400 xsym               LDP0    B$TCB$
         2 000743   000000 471500                    LDP1    0,,PR0
         2 000744   100102 236100                    LDQ     66,,PR1
         2 000745   200050 756100                    STQ     ERR_CODE,,AUTO

     1762     5240    4              IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC THEN DO;

   5240  2 000746   200003 473500                    LDP3    @PORT,,AUTO
         2 000747   300032 220100                    LDX0    26,,PR3
         2 000750   000001 100003                    CMPX0   1,DU
         2 000751   001021 601000 2                  TNZ     s:5276

     1763     5241    5                 IF ERR_CODE.CODE# = %E$LD THEN DO;

   5241  2 000752   200050 236100                    LDQ     ERR_CODE,,AUTO
         2 000753   377770 376007                    ANQ     131064,DL
         2 000754   000070 116007                    CMPQ    56,DL
         2 000755   000760 601000 2                  TNZ     s:5252

     1764     5242                         /*
     1765     5243                         * If we got E$LD back from a write to a CONSEC file,
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:225  
     1766     5244                         *    it just means the record length of the written data
     1767     5245                         *    was different from the record length of the record
     1768     5246                         *    being replaced.  We already warned the user about
     1769     5247                         *    this when s/he opened the file for update --
     1770     5248                         *    ignore the error now.
     1771     5249                         */
     1772     5250    5                    ERR_CODE = %CLEAR;  /* Ignore the error */

   5250  2 000756   200050 450100                    STZ     ERR_CODE,,AUTO

     1773     5251    5                    END;

   5251  2 000757   001021 710000 2                  TRA     s:5276

     1774     5252    4                 ELSE IF ERR_CODE.CODE# = %E$WRDEL

   5252  2 000760   001030 116007                    CMPQ    536,DL
         2 000761   001021 601000 2                  TNZ     s:5276
         2 000762   200042 236100                    LDQ     NEW_NW,,AUTO
         2 000763   000100 316007                    CANQ    64,DL
         2 000764   001021 600000 2                  TZE     s:5276

     1775     5253    5                      AND FPT_WRITE.V.REWRITE# THEN DO;

     1776     5254                            /*
     1777     5255                            *  Monitor didn't like a rewrite of a consec file record.
     1778     5256                            *  Probably because we were writing a new record at the
     1779     5257                            *    end of the file.  Try writing the record again
     1780     5258                            *    without REWRITE.
     1781     5259                            */
     1782     5260    5                       FPT_WRITE.V.REWRITE# = %FALSE;

   5260  2 000765   000011 236000 3                  LDQ     9
         2 000766   200042 356100                    ANSQ    NEW_NW,,AUTO

     1783     5261    5                       ERR_CODE = %CLEAR;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:226  
   5261  2 000767   200050 450100                    STZ     ERR_CODE,,AUTO

     1784     5262    5                       IF VD_$$MON_ACC.V# > 10 THEN

   5262  2 000770   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 000771   000012 115007                    CMPA    10,DL
         2 000772   001003 604400 2                  TMOZ    s:5265

     1785     5263    5                          CALL VDG$MACC_PFLUSH_REWRITE (FPT_WRITE.V.DCB#,

   5263  2 000773   200034 631500                    EPPR1   NON_BLANK_INDEX,,AUTO
         2 000774   200053 451500                    STP1    ERR_CODE+3,,AUTO
         2 000775   200042 634500                    EPPR4   NEW_NW,,AUTO
         2 000776   200052 454500                    STP4    ERR_CODE+2,,AUTO
         2 000777   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 001000   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001001   000000 701000 xent               TSX1    VDG$MACC_PFLUSH_REWRITE
         2 001002   000000 011000                    NOP     0

     1786     5264    5                            FPT_WRITE.KEY_);
     1787     5265    5                       CALL M$WRITE (FPT_WRITE)

   5265  2 001003   200032 630500                    EPPR0   FPT_WRITE,,AUTO
         2 001004   440001 713400                    CLIMB   alt,write
         2 001005   401400 401760                    pmme    nvectors=4
         2 001006   001010 702000 2                  TSX2    s:5267
         2 001007   001021 710000 2                  TRA     s:5276

     1788     5266    6                       WHENALTRETURN DO;

     1789     5267    6                          ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5267  2 001010   000000 470400 xsym               LDP0    B$TCB$
         2 001011   000000 471500                    LDP1    0,,PR0
         2 001012   100102 236100                    LDQ     66,,PR1
         2 001013   200050 756100                    STQ     ERR_CODE,,AUTO

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:227  
     1790     5268    7                          IF ERR_CODE.CODE# = %E$LD THEN DO;

   5268  2 001014   200050 236100                    LDQ     ERR_CODE,,AUTO
         2 001015   377770 376007                    ANQ     131064,DL
         2 001016   000070 116007                    CMPQ    56,DL
         2 001017   001021 601000 2                  TNZ     s:5276

     1791     5269    7                             ERR_CODE = %CLEAR;  /* Ignore the error */

   5269  2 001020   200050 450100                    STZ     ERR_CODE,,AUTO

     1792     5270    7                             END;

     1793     5271    6                          END;

     1794     5272    5                       END;

     1795     5273    4                 END;   /* If consec file */

     1796     5274    3              END;  /* WHENALTRETURN */

     1797     5275
     1798     5276    2           IF ERR_CODE ~= %CLEAR THEN

   5276  2 001021   200050 235100                    LDA     ERR_CODE,,AUTO
         2 001022   001025 601000 2                  TNZ     WRITE_FAILED

     1799     5277    2              GOTO WRITE_FAILED;
     1800     5278
     1801     5279    2           RETURN;

   5279  2 001023   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 001024   000001 702211                    TSX2  ! 1,X1

     1802     5280
     1803     5281
     1804     5282
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:228  
     1805     5283    2   WRITE_FAILED:
     1806     5284    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5284  2 001025   200026 630500       WRITE_FAILED EPPR0   VD_ERR$,,AUTO
         2 001026   200053 450500                    STP0    ERR_CODE+3,,AUTO
         2 001027   000012 236000 3                  LDQ     10
         2 001030   200052 756100                    STQ     ERR_CODE+2,,AUTO
         2 001031   200052 630500                    EPPR0   ERR_CODE+2,,AUTO
         2 001032   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001033   000000 701000 xent               TSX1    VDG$OALLOC
         2 001034   001051 702000 2                  TSX2    OALLOC_FAILED

     1807     5285    2             ALTRET (OALLOC_FAILED);
     1808     5286    2           VD$ERR.ERR = ERR_CODE;

   5286  2 001035   200050 236100                    LDQ     ERR_CODE,,AUTO
         2 001036   200026 470500                    LDP0    VD_ERR$,,AUTO
         2 001037   000002 756100                    STQ     2,,PR0

     1809     5287    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5287  2 001040   000003 220003                    LDX0    3,DU
         2 001041   200026 470500                    LDP0    VD_ERR$,,AUTO
         2 001042   000003 740100                    STX0    3,,PR0

     1810     5288    2           VD$ERR.DCB# = PORT.DCB#;

   5288  2 001043   200003 470500                    LDP0    @PORT,,AUTO
         2 001044   000004 721100                    LXL1    4,,PR0
         2 001045   200026 471500                    LDP1    VD_ERR$,,AUTO
         2 001046   100004 741100                    STX1    4,,PR1

     1811     5289    2           ALTRETURN;

   5289  2 001047   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 001050   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:229  
   5288  2 001051                       OALLOC_FAIL* null
     1812     5290
     1813     5291
     1814     5292    2   OALLOC_FAILED: ;
     1815     5293    2           ALTRETURN;

   5293  2 001051   200030 221300                    LDX1  ! VD_ERR$+2,,AUTO
         2 001052   000000 702211                    TSX2  ! 0,X1
     1816     5294
     1817     5295    2   END EXTERNAL_MODIFIED;
     1818     5296
     1819     5297    1   END VDA$PFLUSH;
     1820     5298        %EOD;

PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:230  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PFLUSH.
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:231  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$PFLUSH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 CONST_FPT_WRITE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    31-0-0/w PTR         r     1 @CHANGED_RECORD            4-0-0/w PTR         r     1 @FROM_PRESENTER
     3-0-0/w PTR         r     1 @PORT                     25-0-0/w PTR         r     1 BUFFER_TO_PASS$
    21-0-0/w BIT         r     1 CANT_WRITE_THIS_LEVEL
    22-0-0/w BIT         r     1 CHANGED_DATA              *0-0-0/w BIT         r     1 CHANGED_RECORD
     7-0-0/w STRC(324)   r     1 CURR_LOCATION             32-0-0/w PTR         r     1 DATA_BUFFER$
    50-0-0/w STRC        r     1 ERR_CODE                  32-0-0/d STRC(432)   r     1 FPT_WRITE
    *0-0-0/w BIT         r     1 FROM_PRESENTER             5-0-0/w BIT         r     1 HAD_ERROR
    43-0-0/w SBIN        r     1 I                         20-0-0/w SBIN        r     1 LEVEL
    36-0-0/w UBIN        r     1 MIN_RECORD                42-0-0/w SBIN        r     1 NEW_NW
    34-0-0/w SBIN        r     1 NON_BLANK_INDEX           41-0-0/w SBIN        r     1 PAD_POINT
    *0-0-0/w STRC(1944)  r     1 PORT                      46-0-0/w PTR         r     1 PORT_KEY$
    40-0-0/w BIT         r     1 RECORD_NEEDS_VFC          24-0-0/w PTR         r     1 SPEC_TO_PASS$
    23-0-0/w BIT         r     1 STILL_FROM_PRESENTER       6-0-0/w PTR         r     1 STRUCTURE_NODE$
    33-0-0/w PTR         r     1 T$                        35-0-0/w SBIN        r     1 TABLE_VAL
    47-0-0/w PTR         r     1 TEXTC_BITS$               37-0-0/w PTR         r     1 TEXTC_DVBYTE$
    26-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_BLANK$            0-0-0/w PTR         r     1 B$TCB$
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:232  
     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w STRC(144)   r     1 VD_$MAX_RECORD
     0-0-0/w STRC(144)   r     1 VD_$MIN_RECORD             0-0-0/w ASTR(90)    r     1 VD_$PAD
     0-0-0/w STRC(144)   r     1 VD_$STRIP_BLANKS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(4608)  r     1 B$SR_NON_BLANK
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w ASTR(90)    r     1 BUFFER$TO_PASS
     0-0-0/w ASTR(90)    r     1 DATA$BUFFER                0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w ASTR(9)     r     1 PORT$KEY                   0-0-0/w STRC(72)    r     1 SPEC$TO_PASS
     0-0-0/w STRC(468)   r     1 STRUCTURE$NODE             0-0-0/w STRC(18)    r     1 TEXTC$BITS
     0-0-0/w STRC(18)    r     1 TEXTC$DVBYTE               0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$PFLUSH requires 555 words for executable code.
   Procedure VDA$PFLUSH requires 48 words of local(AUTO) storage.
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:233  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:234  
          MINI XREF LISTING

B$ALT.CODE
      4640**DCL      4640--REDEF    4641--REDEF    4641--REDEF
B$ALT.ERR
      4641**DCL      5239>>ASSIGN   5267>>ASSIGN
B$ALT.ERR.ERR#
      4642**DCL      4642--REDEF
B$ALT.EVID
      4641**DCL      4641--REDEF    4641--REDEF
B$SR_NON_BLANK
      4094**DCL      4947>>CALLBLT
B$SR_NON_BLANK$
      4093**DCL      4094--IMP-PTR  4947>>CALLBLT
B$TCB.ALT$
      4636**DCL      5239>>ASSIGN   5267>>ASSIGN
B$TCB$
      4089**DCL      4636--IMP-PTR  5239>>ASSIGN   5267>>ASSIGN
BUFFER$TO_PASS
      4301**DCL      4694<>CALL
BUFFER$TO_PASS.LENGTH#
      4327**DCL      4329--IMP-SIZ  4694>>CALL
BUFFER_TO_PASS$
      4165**DCL      4301--IMP-PTR  4688<<ASSIGN   4690<<ASSIGN   4694>>CALL     4694>>CALL
CANT_WRITE_THIS_LEVEL
      4161**DCL      4672<<ASSIGN   4676<<ASSIGN   4681>>IF
CHANGED_DATA
      4162**DCL      4667<<ASSIGN   4669<>CALL     4692>>IF
CHANGED_RECORD IN PROCEDURE NORMALIZE_DATA
      4784**DCL      4781--PROC     4926<<ASSIGN   4952<<ASSIGN   4965<<ASSIGN   4974<<ASSIGN   5005<<ASSIGN
CONST_FPT_WRITE
      4113**DCL      5188>>ASSIGN
CONST_FPT_WRITE.STATION_
      4115**DCL      4115--REDEF
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:235  
CONST_FPT_WRITE.V
      4116**DCL      4113--DCLINIT
CONST_FPT_WRITE.V.DVBYTE.VFC#
      4122**DCL      4122--REDEF
CURR_LOCATION
      4140**DCL      4654<<ASSIGN   4694<>CALL
CURR_LOCATION.KEY
      4154**DCL      4702<<ASSIGN
DATA$BUFFER.BYTES IN PROCEDURE NORMALIZE_DATA
      4853**DCL      4947>>CALLBLT  5013<<ASSIGN   5018<<CALLBLT  5028<<CALLBLT  5033<<ASSIGN   5047<<CALLBLT
DATA$BUFFER.LENGTH# IN PROCEDURE NORMALIZE_DATA
      4851**DCL      4853--IMP-SIZ  4946>>IF       4947>>CALLBLT  4951>>IF       4953<<ASSIGN   4964>>IF
      4966<<ASSIGN   4973>>IF       4975<<ASSIGN   5003>>IF       5006>>ASSIGN   5011<<ASSIGN   5013>>ASSIGN
      5016>>IF       5018>>CALLBLT  5026<<ASSIGN   5028>>CALLBLT  5033>>ASSIGN   5047>>CALLBLT
DATA$BUFFER.OBJECT.SIZE# IN PROCEDURE NORMALIZE_DATA
      4849**DCL      5009>>IF
DATA_BUFFER$ IN PROCEDURE NORMALIZE_DATA
      4788**DCL      4825--IMP-PTR  4940<<ASSIGN   4946>>IF       4947>>CALLBLT  4947>>CALLBLT  4951>>IF
      4953>>ASSIGN   4964>>IF       4966>>ASSIGN   4973>>IF       4975>>ASSIGN   5003>>IF       5006>>ASSIGN
      5009>>IF       5011>>ASSIGN   5013>>ASSIGN   5013>>ASSIGN   5016>>IF       5018>>CALLBLT  5018>>CALLBLT
      5025<<ASSIGN   5026>>ASSIGN   5028>>CALLBLT  5028>>CALLBLT  5033>>ASSIGN   5033>>ASSIGN   5037>>ASSIGN
      5039>>ASSIGN   5047>>CALLBLT  5047>>CALLBLT
ERR_CODE IN PROCEDURE EXTERNAL_MODIFIED
      5150**DCL      5233<<ASSIGN   5239<<ASSIGN   5250<<ASSIGN   5261<<ASSIGN   5267<<ASSIGN   5269<<ASSIGN
      5276>>IF       5286>>ASSIGN
ERR_CODE.CODE# IN PROCEDURE EXTERNAL_MODIFIED
      5154**DCL      5241>>IF       5252>>IF       5268>>IF
EXTERNAL_MODIFIED
      5106**PROC     4674--CALL
F$DCB.ACTPOS IN PROCEDURE NORMALIZE_DATA
      4899**DCL      4899--REDEF
F$DCB.ARS# IN PROCEDURE NORMALIZE_DATA
      4873**DCL      4873--REDEF    4962>>ASSIGN
F$DCB.ATTR IN PROCEDURE NORMALIZE_DATA
      4892**DCL      4893--REDEF
F$DCB.BORROW IN PROCEDURE NORMALIZE_DATA
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:236  
      4907**DCL      4907--REDEF    4907--REDEF    4907--REDEF
F$DCB.DCBNAME.L IN PROCEDURE NORMALIZE_DATA
      4921**DCL      4921--IMP-SIZ
F$DCB.EOMCHAR# IN PROCEDURE NORMALIZE_DATA
      4877**DCL      4877--REDEF
F$DCB.FLDID IN PROCEDURE NORMALIZE_DATA
      4902**DCL      4902--REDEF
F$DCB.FORM$ IN PROCEDURE NORMALIZE_DATA
      4896**DCL      4896--REDEF
F$DCB.FSECT IN PROCEDURE NORMALIZE_DATA
      4912**DCL      4912--REDEF
F$DCB.FSN# IN PROCEDURE NORMALIZE_DATA
      4889**DCL      4889--REDEF    4889--REDEF    4890--REDEF
F$DCB.HEADER$ IN PROCEDURE NORMALIZE_DATA
      4895**DCL      4895--REDEF
F$DCB.IXTNSIZE# IN PROCEDURE NORMALIZE_DATA
      4893**DCL      4893--REDEF
F$DCB.LASTSTA$ IN PROCEDURE NORMALIZE_DATA
      4882**DCL      4882--REDEF
F$DCB.LVL IN PROCEDURE NORMALIZE_DATA
      4908**DCL      4908--REDEF
F$DCB.NAME#.C IN PROCEDURE NORMALIZE_DATA
      4883**DCL      4883--REDEF
F$DCB.NOEOF IN PROCEDURE NORMALIZE_DATA
      4905**DCL      4905--REDEF
F$DCB.NRECS# IN PROCEDURE NORMALIZE_DATA
      4894**DCL      4894--REDEF
F$DCB.NRECX IN PROCEDURE NORMALIZE_DATA
      4913**DCL      4913--REDEF
F$DCB.OHDR IN PROCEDURE NORMALIZE_DATA
      4905**DCL      4905--REDEF
F$DCB.ORG# IN PROCEDURE NORMALIZE_DATA
      4888**DCL      4888--REDEF
F$DCB.PRECNO IN PROCEDURE NORMALIZE_DATA
      4911**DCL      4911--REDEF
F$DCB.RCSZ IN PROCEDURE NORMALIZE_DATA
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:237  
      4917**DCL      4917--REDEF
F$DCB.RES# IN PROCEDURE NORMALIZE_DATA
      4884**DCL      4884--REDEF
F$DCB.SETX IN PROCEDURE NORMALIZE_DATA
      4896**DCL      4896--REDEF
F$DCB.TAB$ IN PROCEDURE NORMALIZE_DATA
      4896**DCL      4896--REDEF
F$DCB.TDA IN PROCEDURE NORMALIZE_DATA
      4910**DCL      4911--REDEF
F$DCB.WSN# IN PROCEDURE NORMALIZE_DATA
      4884**DCL      4884--REDEF
FPT_WRITE IN PROCEDURE EXTERNAL_MODIFIED
      5126**DCL      5188<<ASSIGN   5237<>CALL     5265<>CALL
FPT_WRITE.BUF_ IN PROCEDURE EXTERNAL_MODIFIED
      5126**DCL      5191<<ASSIGN   5194<<ASSIGN   5235<>CALL
FPT_WRITE.KEY_ IN PROCEDURE EXTERNAL_MODIFIED
      5126**DCL      5209<<ASSIGN   5212<<ASSIGN   5214<<ASSIGN   5235<>CALL     5263<>CALL
FPT_WRITE.STATION_ IN PROCEDURE EXTERNAL_MODIFIED
      5128**DCL      5128--REDEF
FPT_WRITE.V IN PROCEDURE EXTERNAL_MODIFIED
      5129**DCL      5189--ASSIGN
FPT_WRITE.V.DCB# IN PROCEDURE EXTERNAL_MODIFIED
      5129**DCL      5190<<ASSIGN   5235<>CALL     5263<>CALL
FPT_WRITE.V.DVBYTE IN PROCEDURE EXTERNAL_MODIFIED
      5134**DCL      5217<<ASSIGN   5229<<ASSIGN
FPT_WRITE.V.DVBYTE.CONT# IN PROCEDURE EXTERNAL_MODIFIED
      5137**DCL      5230<<ASSIGN
FPT_WRITE.V.DVBYTE.VFC# IN PROCEDURE EXTERNAL_MODIFIED
      5135**DCL      5135--REDEF
FPT_WRITE.V.REWRITE# IN PROCEDURE EXTERNAL_MODIFIED
      5132**DCL      5210<<ASSIGN   5252>>IF       5260<<ASSIGN
FPT_WRITE.V_ IN PROCEDURE EXTERNAL_MODIFIED
      5126**DCL      5189<<ASSIGN
FROM_PRESENTER
      3839**DCL        58--PROC     4651<>CALL     4691>>ASSIGN
HAD_ERROR
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:238  
      4130**DCL      4649<<ASSIGN   4677<<ASSIGN   4705>>IF
I IN PROCEDURE NORMALIZE_DATA
      4797**DCL      5045<<DOINDEX  5047>>CALLBLT
LEVEL
      4160**DCL      4663<<DOINDEX  4664>>IF       4664>>IF       4668>>IF       4683>>IF       4684>>ASSIGN
      4687>>IF       4688>>ASSIGN   4699>>ASSIGN   4700>>ASSIGN   4702>>ASSIGN   4927>>IF       4927>>IF
      4940>>ASSIGN   5028>>CALLBLT  5028>>CALLBLT  5033>>ASSIGN   5033>>ASSIGN   5035>>CALL     5035>>CALL
      5037>>ASSIGN   5039>>ASSIGN
M$WRITE
      2434**DCL-ENT  5237--CALL     5265--CALL
MIN_RECORD IN PROCEDURE NORMALIZE_DATA
      4792**DCL      4962<<ASSIGN   4963>>IF       4964>>IF       4966>>ASSIGN   4968<<ASSIGN   4984>>IF
      4999<<ASSIGN   5003>>IF       5007>>ASSIGN   5011>>ASSIGN   5026>>ASSIGN   5045>>DOINDEX
NEW_NW IN PROCEDURE NORMALIZE_DATA
      4796**DCL      5007<<ASSIGN   5009>>IF       5023<>CALL
NON_BLANK_INDEX IN PROCEDURE NORMALIZE_DATA
      4790**DCL      4947<<CALLBLT  4950<<ASSIGN   4951>>IF       4953>>ASSIGN
NORMALIZE_DATA
      4781**PROC     4669--CALL
NORMALIZE_DATA_FAILED
      4708**LABEL    4669--CALLALT
OALLOC_FAILED IN PROCEDURE EXTERNAL_MODIFIED
      5288**LABEL    5284--CALLALT
OALLOC_FAILED IN PROCEDURE NORMALIZE_DATA
      5045**LABEL    5023--CALLALT
OFREE_FAILED IN PROCEDURE NORMALIZE_DATA
      5045**LABEL    5035--CALLALT
PAD_POINT IN PROCEDURE NORMALIZE_DATA
      4795**DCL      5006<<ASSIGN   5014<<ASSIGN   5016>>IF       5018>>CALLBLT  5030<<ASSIGN   5045>>DOINDEX
PORT
      3749**DCL        58--PROC     4651<>CALL     4709<>CALL
PORT.CURRENT
      3802**DCL      4654>>ASSIGN
PORT.CURRENT.KEY.REP#
      3816**DCL      5203>>IF
PORT.CURRENT.KEY.V$
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:239  
      3816**DCL      5203>>ASSIGN   5203--ASSIGN
PORT.DCB#
      3776**DCL      4673>>IF       4937>>IF       4962--ASSIGN   4984>>IF       5038>>IF       5190>>ASSIGN
      5288>>ASSIGN
PORT.FILE_KEY
      3788**DCL      4694<>CALL
PORT.LEVEL.DATA$
      3836**DCL      4688>>ASSIGN   4940>>ASSIGN   5028>>CALLBLT  5028>>CALLBLT  5033>>ASSIGN   5033>>ASSIGN
      5035>>CALL     5035>>CALL     5037<<ASSIGN   5191>>ASSIGN   5191>>ASSIGN   5193>>IF
PORT.LEVEL.DATA_MODIFIED
      3836**DCL      4664>>IF       4668>>IF       4687>>IF       4700<<ASSIGN
PORT.LEVEL.INTERNAL$
      3836**DCL      5039>>ASSIGN
PORT.LEVEL.ORG#
      3820**DCL      4961>>IF       5207>>DOCASE   5240>>IF
PORT.LEVEL.SPEC
      3832**DCL      4684--ASSIGN
PORT.LEVEL.SPEC.REP#
      3834**DCL      4993>>IF       5225>>IF
PORT.LEVEL.SPEC.V$
      3834**DCL      4993>>ASSIGN   4993--ASSIGN   5225>>ASSIGN   5225--ASSIGN
PORT.LEVEL.SPEC_MODIFIED
      3836**DCL      4664>>IF       4683>>IF       4699<<ASSIGN
PORT.LEVEL.SPEC_TYPE#
      3820**DCL      4927>>IF       4927>>IF
PORT.STRUCTURE$
      3777**DCL      4653>>ASSIGN
PORT$KEY IN PROCEDURE EXTERNAL_MODIFIED
      5167**DCL      5214--ASSIGN
PORT$KEY.BYTES IN PROCEDURE EXTERNAL_MODIFIED
      5177**DCL      5209--ASSIGN   5212--ASSIGN
PORT$KEY.LENGTH# IN PROCEDURE EXTERNAL_MODIFIED
      5175**DCL      5177--IMP-SIZ  5209>>ASSIGN   5212>>ASSIGN   5214>>ASSIGN
PORT_KEY$ IN PROCEDURE EXTERNAL_MODIFIED
      5140**DCL      5167--IMP-PTR  5203<<ASSIGN   5203<<ASSIGN   5209>>ASSIGN   5209>>ASSIGN   5212>>ASSIGN
      5212>>ASSIGN   5214>>ASSIGN   5214>>ASSIGN
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:240  
RECORD_NEEDS_VFC IN PROCEDURE NORMALIZE_DATA
      4794**DCL      4983<<ASSIGN   4997<<ASSIGN   4998>>IF       5012>>IF       5027>>IF
RWRITE_FAILED
      4708**LABEL    4694--CALLALT
SPEC$TO_PASS
      4270**DCL      4694<>CALL
SPEC_TO_PASS$
      4164**DCL      4270--IMP-PTR  4684<<ASSIGN   4686<<ASSIGN   4694>>CALL
STILL_FROM_PRESENTER
      4163**DCL      4691<<ASSIGN   4693<<ASSIGN   4694<>CALL
STRUCTURE$NODE.COUNT#
      4260**DCL      4663>>DOINDEX
STRUCTURE_NODE$
      4131**DCL      4177--IMP-PTR  4653<<ASSIGN   4663>>DOINDEX
T$ IN PROCEDURE NORMALIZE_DATA
      4789**DCL      5023<>CALL     5025>>ASSIGN
TABLE_VAL IN PROCEDURE NORMALIZE_DATA
      4791**DCL      4947<<CALLBLT  4949>>IF
TEXTC$BITS.BITS IN PROCEDURE EXTERNAL_MODIFIED
      5184**DCL      5229>>ASSIGN
TEXTC$BITS.CNT IN PROCEDURE EXTERNAL_MODIFIED
      5183**DCL      5228>>IF
TEXTC$DVBYTE.LENGTH# IN PROCEDURE NORMALIZE_DATA
      4859**DCL      4996>>IF
TEXTC$DVBYTE.VFC IN PROCEDURE NORMALIZE_DATA
      4862**DCL      4997>>ASSIGN
TEXTC_BITS$ IN PROCEDURE EXTERNAL_MODIFIED
      5141**DCL      5182--IMP-PTR  5225<<ASSIGN   5225<<ASSIGN   5228>>IF       5229>>ASSIGN
TEXTC_DVBYTE$ IN PROCEDURE NORMALIZE_DATA
      4793**DCL      4858--IMP-PTR  4993<<ASSIGN   4993<<ASSIGN   4996>>IF       4997>>ASSIGN
VD$BUFFER
      4359**DCL      5035<>CALL
VD$BUFFER.BYTES
      4387**DCL      5028>>CALLBLT  5033>>ASSIGN   5191--ASSIGN
VD$BUFFER.LENGTH#
      4385**DCL      4387--IMP-SIZ  5028>>CALLBLT  5033>>ASSIGN   5035>>CALL     5191>>ASSIGN   5193>>IF
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:241  
VD$BUFFER_HEADER
      4400**DCL      5007--ASSIGN
VD$ERR.DCB#
      4632**DCL      5288<<ASSIGN
VD$ERR.ERR
      4627**DCL      5286<<ASSIGN
VD$ERR.FLAGLEV#
      4632**DCL      5287<<ASSIGN
VD$FILE_NODE.DESC.DATA$
      4517**DCL      5039<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      4575**DCL      4577--IMP-SIZ  4993--ASSIGN   5203--ASSIGN   5225--ASSIGN
VDG$MACC_PFLUSH
      3845**DCL-ENT  4651--CALL
VDG$MACC_PFLUSH_REWRITE
      3847**DCL-ENT  5263--CALL
VDG$MACC_PFLUSH_WRITE
      3846**DCL-ENT  5235--CALL
VDG$MACC_PRETURN
      3848**DCL-ENT  4709--CALL
VDG$OALLOC
      3843**DCL-ENT  5023--CALL     5284--CALL
VDG$OFREE
      3844**DCL-ENT  5035--CALL
VDP$RWRITE
      3842**DCL-ENT  4694--CALL
VD_$$MON_ACC.V#
      3893**DCL      4650>>IF       4708>>IF       5234>>IF       5262>>IF
VD_$MAX_RECORD.V#
      3938**DCL      4973>>IF       4975>>ASSIGN
VD_$MIN_RECORD.V#
      3983**DCL      4968>>ASSIGN
VD_$PAD.BYTES
      4039**DCL      5016>>IF       5043>>IF       5047>>CALLBLT
VD_$PAD.LENGTH#
      4037**DCL      4039--IMP-SIZ  5016>>IF       5043>>IF       5045>>DOINDEX  5047>>CALLBLT  5047>>CALLBLT
PL6.E3A0      #003=VDA$PFLUSH File=VDA$PORT.:VDA5TSI                             FRI 07/04/97 11:07 Page:242  
VD_$STRIP_BLANKS.V#
      4086**DCL      4946>>IF
VD_ERR$
      4166**DCL      4590--IMP-PTR  5284<>CALL     5286>>ASSIGN   5287>>ASSIGN   5288>>ASSIGN
WRITE_FAILED IN PROCEDURE EXTERNAL_MODIFIED
      5284**LABEL    5277--GOTO

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:243  
     1821        1        /*T***********************************************************/
     1822        2        /*T*                                                         */
     1823        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1824        4        /*T*                                                         */
     1825        5        /*T***********************************************************/
     1826        6
     1827        7        /*D* NAME: VDA$PDELETE
     1828        8            PARAMETERS:
     1829        9                PORT - VD$PORT to use.  This Port must already be open,
     1830       10                    to either an external or internal file.
     1831       11                RANGE - VD$RANGE specifying the range of nodes to delete.
     1832       12                    This is an inclusive range:  RANGE.START specifies the first
     1833       13                    node to delete and RANGE.ENDD specifies the last node to
     1834       14                    delete.
     1835       15                    RANGE must be one of the following:
     1836       16                    BOF, EOF, or specific nodes, specified as follows:
     1837       17                    If .START or .ENDD = %CLEAR, this specifies BOF;
     1838       18                    If .START.EOF or .ENDD.EOF is set, this specifies EOF;
     1839       19                    Else .START.KEY or .ENDD.KEY (%(LVL_LOWER-1)) thru (n) must
     1840       20                        be given:  these are keys for levels %LVL_LOWER thru (n+1)
     1841       21                        of the file.
     1842       22
     1843       23                    Basic rule for RANGE:  we only allow deletion within one
     1844       24                    parent node, of one or more of that parent's kids -- you
     1845       25                    can't delete from some kid of node "A" thru some kid of
     1846       26                    node "B".
     1847       27                    Therefore:
     1848       28                        If RANGE.START = %CLEAR, then .ENDD must be either
     1849       29                            %CLEAR, .ENDD.EOF, or exactly one .ENDD.KEY given.
     1850       30                        If RANGE.ENDD.EOF is set, then .START must be either
     1851       31                            %CLEAR, .START.EOF, or exactly one .START.KEY given.
     1852       32                        Of course, if .START.EOF is set then the only valid
     1853       33                            .ENDD is .ENDD.EOF; if .ENDD = %CLEAR, then the
     1854       34                            only valid .START is %CLEAR.  In either case,
     1855       35                            nothing will be deleted.
     1856       36                        If neither .START nor .END specify BOF or EOF, then
     1857       37                            the number of keys in .START.KEY and .ENDD.KEY
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:244  
     1858       38                            must be equal, and all .START.KEYs except the last
     1859       39                            must equal their counterpart in .ENDD.KEY.
     1860       40                            If the file has more than two levels, deletion will
     1861       41                            be at the lowest level given; for example, if the
     1862       42                            file has 5 levels but keys are only given for levels
     1863       43                            1 and 2, we will delete nodes at levels 2 thru 5:
     1864       44                            the specified node(s) at level 2, and all children
     1865       45                            of deleted level 2 nodes.
     1866       46                DEL_LEVEL - Top-most level in file structure at which to
     1867       47                    delete; we'll delete specified nodes at DEL_LEVEL and
     1868       48                    all children of the deleted DEL_LEVEL nodes.
     1869       49                    DEL_LEVEL must be > %LVL_FILE;
     1870       50                    for external files, DEL_LEVEL must be %LVL_EXT_REC.
     1871       51                COUNT - Uninitialized SBIN.
     1872       52            INPUT:
     1873       53            SCRATCH
     1874       54                VD_STATIC_TEMP
     1875       55            OUTPUT:
     1876       56                COUNT will contain the number of nodes at DEL_LEVEL which
     1877       57                    were actually deleted; this may be 0.
     1878       58                PORT will be repositioned to the node following the last
     1879       59                    node deleted, or eof.
     1880       60            DESCRIPTION:
     1881       61                Use different procedures for internal and external files.
     1882       62        */
     1883       63
     1884       64        VDA$PDELETE: PROC (PORT, RANGE, DEL_LEVEL, COUNT) ALTRET;
     1885       65
     1886       66
     1887       67        %INCLUDE VD_MACROS_M;
     1888     2282        %INCLUDE VD_PERR_C;
     1889     2430        %INCLUDE CP_6;
     1890     2511        %INCLUDE B_ERRORS_C;
     1891     3637
     1892     3638
     1893     3639        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1894     3737        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:245  
     1895     3806    1   DCL DEL_LEVEL SBIN;
     1896     3807    1   DCL COUNT SBIN;
     1897     3808
     1898     3809
     1899     3810
     1900     3811    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
     1901     3812    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1902     3813    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1903     3814    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1904     3815    1   DCL VDG$BUILD_LOCATION  ENTRY (6) ALTRET;
     1905     3816    1   DCL VDG$ESCREECH        ENTRY (3);
     1906     3817    1   DCL VDG$MACC_PDELETE_EOF_KEY ENTRY (3);
     1907     3818    1   DCL VDG$MACC_PDELETE_BOF_KEY ENTRY (3);
     1908     3819    1   DCL VDG$MACC_PDELETE_DELREC ENTRY (3);
     1909     3820    1   DCL VDG$MACC_PDELETE_DCB_POS ENTRY (3);
     1910     3821
     1911     3822
     1912     3823        %VD_6E (STCLASS=SYMREF);
     1913     3859    1   DCL 1 VD_STATIC_TEMP SYMREF,
     1914     3860    1         2 START_KEY CHAR(%(MXNB_KEY+1)) ALIGNED,
     1915     3861    1         2 END_KEY CHAR(%(MXNB_KEY+1)) ALIGNED;
     1916     3862    1   DCL B$TCB$ PTR SYMREF;
     1917     3863        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1918     3908
     1919     3909
     1920     3910        %FPT_PFIL (FPTN=CONST_FPT_PFIL, STCLASS=CONSTANT);
     1921     3925        %FPT_PRECORD (FPTN=CONST_FPT_PRECORD, STCLASS=CONSTANT, KEYS=NO,
     1922     3926                KEYR=YES);
     1923     3947        %FPT_DELREC (FPTN=CONST_FPT_DELREC, STCLASS=CONSTANT);
     1924     3966    1   DCL STATIC_TEMP_START$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP.START_KEY));
     1925     3967    1   DCL STATIC_TEMP_END$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP.END_KEY));
     1926     3968
     1927     3969
     1928     3970
     1929     3971    1   DCL FIXED_KEY_LEN SBIN;
     1930     3972
     1931     3973
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:246  
     1932     3974        %VD$TEXTC (NAME=STATIC$TEMP_START_KEY, STCLASS="BASED(STATIC_TEMP_START$)");
     1933     3997    1   DCL STATIC$TEMP_START_NUM SBIN BASED(STATIC_TEMP_START$);
     1934     3998    1   DCL STATIC$TEMP_END_NUM SBIN BASED(STATIC_TEMP_END$);
     1935     3999    1   DCL 1 STATIC$TEMP_START_FIXED BASED(STATIC_TEMP_START$),
     1936     4000    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1937     4001    1   DCL 1 STATIC$TEMP_END_FIXED BASED(STATIC_TEMP_END$),
     1938     4002    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1939     4003        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     1940     4006        %B$ALT;
     1941     4014
     1942     4015
     1943     4016
     1944     4017    1           IF PORT.EXIST# = 0
     1945     4018    1             OR DEL_LEVEL <= %LVL_FILE THEN
     1946     4019    1              CALL VDG$ESCREECH (PORT.EXIST#, DEL_LEVEL);
     1947     4020
     1948     4021    1           IF PORT.DCB# = 0 THEN
     1949     4022    1              CALL DELETE_INTERNAL
     1950     4023    1                ALTRET (DELETE_INTERNAL_FAILED);
     1951     4024    1           ELSE
     1952     4025    1              CALL DELETE_EXTERNAL
     1953     4026    1                ALTRET (DELETE_EXTERNAL_FAILED);
     1954     4027
     1955     4028    1           RETURN;
     1956     4029
     1957     4030
     1958     4031
     1959     4032    1   DELETE_INTERNAL_FAILED: ;
     1960     4033    1   DELETE_EXTERNAL_FAILED: ;
     1961     4034    1           ALTRETURN;
     1962     4035
     1963     4036                %BOX (TITLE=DELETE_INTERNAL, PAGE=YES);
              4044    1
              4048    1   /***************************************************************************
              4050    1    *                                                                         *
              4054    1            *                              DELETE_INTERNAL                            *
              4056    1            *                                                                         *
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:247  
              4058    1           ***************************************************************************/

     1964     4062
     1965     4063        /*I* NAME: DELETE_INTERNAL
     1966     4064            PARAMETERS:
     1967     4065                None.
     1968     4066            INPUT:
     1969     4067                PORT - VD$PORT to use.  If it contained any .SPEC/DATA_MODIFIED
     1970     4068                    nodes, they must already have been flushed to the file.
     1971     4069                DEL_LEVEL - Top-most level in file structure at which to
     1972     4070                    delete; we'll delete specified nodes at DEL_LEVEL and all
     1973     4071                    children of the deleted DEL_LEVEL nodes.
     1974     4072                RANGE - Range to delete (inclusive).
     1975     4073            OUTPUT:
     1976     4074                COUNT will contain the number of nodes at DEL_LEVEL
     1977     4075                    which were actually deleted.
     1978     4076                PORT.CURRENT will specify the node following
     1979     4077                    the last node deleted, or if none, eof.
     1980     4078            DESCRIPTION:
     1981     4079                Call VDA$PREAD to find the first node to delete; remember
     1982     4080                    the node.
     1983     4081                Call VDA$PREAD again to find the node following the last node
     1984     4082                    to delete (and incidentally to count the nodes in between).
     1985     4083                If there are any nodes to delete:
     1986     4084                    Delink the nodes from the file tree.
     1987     4085                    Loop thru the nodes, calling VDG$OFREE to free them.
     1988     4086        */
     1989     4087
     1990     4088    1   DELETE_INTERNAL: PROC ALTRET;
     1991     4089
     1992     4090
     1993     4091    2   DCL AT_EOF BIT(1) ALIGNED;
     1994     4092    2   DCL DEL_PARENT$ PTR;
     1995     4093    2   DCL DEL_START$ PTR;
     1996     4094    2   DCL DEL_END$ PTR;
     1997     4095
     1998     4096
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:248  
     1999     4097        %VD$FILE_NODE (NAME=DEL$PARENT, STCLASS="BASED(DEL_PARENT$)");
     2000     4190        %VD$FILE_NODE (NAME=DEL$START, STCLASS="BASED(DEL_START$)");
     2001     4283        %VD$FILE_NODE (NAME=DEL$END, STCLASS="BASED(DEL_END$)");
     2002     4376        %VD$FILE_NODE;
     2003     4469
     2004     4470
     2005     4471
     2006     4472    2           COUNT = 0;
     2007     4473
     2008     4474    2           CALL VDA$PREAD (PORT, RANGE.START, 0, %FALSE)
     2009     4475    2             ALTRET (PREAD_FAILED);
     2010     4476    2           IF PORT.CURRENT.EOF THEN
     2011     4477    2              RETURN;      /* Nothing to delete */
     2012     4478    2           DEL_START$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL);
     2013     4479    2           DEL_PARENT$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL - 1);
     2014     4480
     2015     4481    2           CALL VDA$PREAD (PORT, RANGE.ENDD, 1, %FALSE, , COUNT)
     2016     4482    2             ALTRET (PREAD_FAILED);
     2017     4483    2           DEL_END$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL);
     2018     4484                /* DEL_END$ points to node FOLLOWING last node to delete */
     2019     4485
     2020     4486    2           IF COUNT > 0
     2021     4487    2             OR DEL_START$ = DEL_END$ THEN
     2022     4488    3   DELETE_NODES: DO;
     2023     4489    3              VD_6E.STATS# (%STG_ACC_INT_DELETIONS) =
     2024     4490    3                VD_6E.STATS# (%STG_ACC_INT_DELETIONS) + COUNT;
     2025     4491                   /*
     2026     4492                   *    When deleting nodes which are contiguous kids of one
     2027     4493                   *    parent, we first delink the nodes from the file
     2028     4494                   *    tree, then free them.
     2029     4495                   *    To delink the nodes from the file tree, there are
     2030     4496                   *    four pointers which need to be adjusted:
     2031     4497                   *        o The forward and backward pointers into the
     2032     4498                   *            nodes to be delinked; these may be sibling
     2033     4499                   *            pointers (.FLINK$/.BLINK$) or parent-child
     2034     4500                   *            pointers (.HEAD$/.TAIL$).
     2035     4501                   *        o The backward link from the first delinked node.
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:249  
     2036     4502                   *        o The forward link from the last delinked node.
     2037     4503                   */
     2038     4504
     2039     4505    3              IF DEL$START.BLINK$ = ADDR(NIL) THEN
     2040     4506    3                 DEL$PARENT.HEAD$ = DEL_END$;
     2041     4507    3              ELSE
     2042     4508    3                 DEL$START.BLINK$ -> VD$FILE_NODE.FLINK$ = DEL_END$;
     2043     4509    3              IF DEL_END$ = ADDR(NIL) THEN
     2044     4510    3                 DEL$PARENT.TAIL$ = DEL$START.BLINK$;
     2045     4511    4              ELSE DO;
     2046     4512    4                 DEL$END.BLINK$ -> VD$FILE_NODE.FLINK$ = ADDR(NIL);
     2047     4513    4                 DEL$END.BLINK$ = DEL$START.BLINK$;
     2048     4514    4                 END;
     2049     4515    3              DEL$START.BLINK$ = ADDR(NIL);
     2050     4516
     2051     4517    3              DEL$PARENT.COUNT# = DEL$PARENT.COUNT# - COUNT;
     2052     4518    3              IF DEL$PARENT.COUNT# < 0 THEN
     2053     4519    3                 CALL VDG$ESCREECH (DEL$PARENT.COUNT#, COUNT);
     2054     4520
     2055     4521                   /* VDG$OFREE will delete DEL$START and all its .FLINK$s */
     2056     4522    3              CALL VDG$OFREE (DEL$START)
     2057     4523    3                ALTRET (OFREE_FAILED);
     2058     4524    3              END DELETE_NODES;
     2059     4525
     2060     4526    2           PORT.LAST_OP# = %ACCOP_DELETE;
     2061     4527
     2062     4528    2           RETURN;
     2063     4529
     2064     4530
     2065     4531
     2066     4532    2   PREAD_FAILED: ;
     2067     4533    2   OFREE_FAILED: ;
     2068     4534    2           ALTRETURN;
     2069     4535
     2070     4536    2   END DELETE_INTERNAL;
     2071     4537
     2072     4538
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:250  
     2073     4539                %BOX (TITLE=DELETE_EXTERNAL, PAGE=YES);
              4547    2
              4551    2   /***************************************************************************
              4553    2    *                                                                         *
              4557    2            *                              DELETE_EXTERNAL                            *
              4559    2            *                                                                         *
              4561    2           ***************************************************************************/

     2074     4565
     2075     4566        /*I* NAME: DELETE_EXTERNAL
     2076     4567            PARAMETERS:
     2077     4568            INPUT:
     2078     4569                PORT - VD$PORT to use.  If it contained any .SPEC/DATA_MODIFIED
     2079     4570                    nodes, they must already have been flushed to the file.
     2080     4571                DEL_LEVEL - Top-most level in file structure at which to
     2081     4572                    delete.
     2082     4573                    NOTE:  DEL_LEVEL must = %LVL_EXT_REC.
     2083     4574                RANGE - Range to delete (inclusive).
     2084     4575            OUTPUT:
     2085     4576                COUNT will contain the number of records deleted.
     2086     4577                PORT.CURRENTs will specify the record following
     2087     4578                    the last record deleted, or if none, eof.
     2088     4579            DESCRIPTION:
     2089     4580                If the end of the range to delete is EOF and the start isn't
     2090     4581                    also EOF, do an M$PFIL then M$PRECORD to get the last key
     2091     4582                    of the file.
     2092     4583                If the start of the range to delete is BOF, do an M$PFIL
     2093     4584                    then M$PRECORD to get the first key of the file.
     2094     4585                If the start isn't EOF and the end isn't BOF, and the
     2095     4586                    positionings above didn't find an empty file, do the
     2096     4587                    M$DELREC.
     2097     4588                Position the port to the record following the end of the range.
     2098     4589        */
     2099     4590
     2100     4591    1   DELETE_EXTERNAL: PROC ALTRET;
     2101     4592
     2102     4593
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:251  
     2103     4594    2   DCL DO_DELREC BIT(1) ALIGNED;
     2104     4595    2   DCL PORT_DCB$ PTR;
     2105     4596    2   DCL DEL_START_KEY$ PTR;
     2106     4597    2   DCL DEL_END_KEY$ PTR;
     2107     4598        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
     2108     4613        %VD$ERR_CODE (NAME=START_BOF_ERR_CODE, STCLASS=AUTO);
     2109     4628        %FPT_PFIL (FPTN=FPT_PFIL, STCLASS=AUTO);
     2110     4643        %FPT_PRECORD (STCLASS=AUTO);
     2111     4664        %FPT_DELREC (FPTN=FPT_DELREC, STCLASS=AUTO);
     2112     4683    2   DCL VD_ERR$ PTR;
     2113     4684
     2114     4685
     2115     4686        %F$DCB (DCBN=PORT$DCB, STCLASS="BASED(PORT_DCB$)");
     2116     4743        %VD$TEXTC (NAME=DEL$START_KEY, STCLASS="BASED(DEL_START_KEY$)");
     2117     4766        %VD$TEXTC (NAME=DEL$END_KEY, STCLASS="BASED(DEL_END_KEY$)");
     2118     4789        %VD$TEXTC_REMOTE;
     2119     4850        %VD$BUFFER;
     2120     4908        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2121     4961
     2122     4962
     2123     4963
     2124     4964    2           COUNT = 0;
     2125     4965    2           DO_DELREC = %TRUE;  /* Assume there's something to delete */
     2126     4966    2           PORT_DCB$ = DCBADDR(PORT.DCB#);
     2127     4967
     2128     4968    2           FPT_PFIL = CONST_FPT_PFIL;
     2129     4969    2           FPT_PFIL.V_ = VECTOR(FPT_PFIL.V);
     2130     4970    2           FPT_PFIL.V.DCB# = PORT.DCB#;
     2131     4971
     2132     4972    2           FPT_PRECORD = CONST_FPT_PRECORD;
     2133     4973    2           FPT_PRECORD.V_ = VECTOR(FPT_PRECORD.V);
     2134     4974    2           FPT_PRECORD.V.DCB# = PORT.DCB#;
     2135     4975
     2136     4976    2           FPT_DELREC = CONST_FPT_DELREC;
     2137     4977    2           FPT_DELREC.V_ = VECTOR(FPT_DELREC.V);
     2138     4978    2           FPT_DELREC.V.DCB# = PORT.DCB#;
     2139     4979
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:252  
     2140     4980                /*
     2141     4981                *   First, resolve the end-location of the range to a record
     2142     4982                *       key, and setup FPT_DELREC's end-key.
     2143     4983                */
     2144     4984    2           IF RANGE.ENDD.EOF THEN
     2145     4985    3   FIND_EOF_KEY: DO;
     2146     4986                   /* Read end-key into last half of VD_STATIC_TEMP */
     2147     4987    4              DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2148     4988    4               CASE (%ORG_CONSEC);
     2149     4989    4                 FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_END_NUM);
     2150     4990    4               CASE (%ORG_KEYED);
     2151     4991    4                 FPT_PRECORD.KEY_ = VECTOR(VD_STATIC_TEMP.END_KEY);
     2152     4992    4               CASE (%ORG_INDEXED);
     2153     4993    4                 FIXED_KEY_LEN = PORT$DCB.KEYL#;
     2154     4994    4                 FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_END_FIXED.BYTES);
     2155     4995    4               CASE (ELSE);
     2156     4996    4                 CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2157     4997    4               END;
     2158     4998    3              FPT_DELREC.LKEY_ = FPT_PRECORD.KEY_;
     2159     4999
     2160     5000    3              FPT_PFIL.V.BOF# = %FALSE;
     2161     5001    3              PORT.LAST_OP# = %ACCOP_LOCATION;
     2162     5002    3              CALL M$PFIL (FPT_PFIL)
     2163     5003    3                ALTRET (PFIL_FAILED);
     2164     5004    3              FPT_PRECORD.V.N# = -1;
     2165     5005    3              CALL M$PRECORD (FPT_PRECORD)
     2166     5006    4              WHENALTRETURN DO;
     2167     5007    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
     2168     5008    4                 IF ERR_CODE.CODE# = %E$BOF THEN
     2169     5009    4                    DO_DELREC = %FALSE;    /* File is empty */
     2170     5010    4                 ELSE
     2171     5011    4                    GOTO PRECORD_FAILED;
     2172     5012    4                 END;
     2173     5013    3              IF VD_$$MON_ACC.V# > 10 THEN
     2174     5014    3                 CALL VDG$MACC_PDELETE_EOF_KEY (FPT_PRECORD.V.DCB#,
     2175     5015    3                   FPT_PRECORD.KEY_, ERR_CODE);
     2176     5016    3              END FIND_EOF_KEY;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:253  
     2177     5017    3           ELSE DO;
     2178     5018    3              IF RANGE.ENDD.KEY (%(LVL_EXT_REC-1)) = %CLEAR THEN
     2179     5019    3                 DO_DELREC = %FALSE;   /* End=BOF: nothing to delete */
     2180     5020    4              ELSE DO;
     2181     5021                      %GETKEY (KEY=RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
     2182     5022                      PTR=DEL_END_KEY$);
     2183     5032    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2184     5033    5                  CASE (%ORG_CONSEC);
     2185     5034    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY);
     2186     5035    5                  CASE (%ORG_KEYED);
     2187     5036    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY);
     2188     5037    5                  CASE (%ORG_INDEXED);
     2189     5038    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY.BYTES);
     2190     5039    5                  CASE (ELSE);
     2191     5040    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2192     5041    5                  END;
     2193     5042    4                 END;
     2194     5043    3              END;
     2195     5044
     2196     5045
     2197     5046                /*
     2198     5047                *   Set up FPT_PRECORD to KEYR into VD_STATIC_TEMP.
     2199     5048                *   We set this up even if we don't have to PRECORD to get
     2200     5049                *       the start key, 'cause after the DELREC we'll have to
     2201     5050                *       PRECORD to find out where the DCB is positioned.
     2202     5051                */
     2203     5052    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2204     5053    3            CASE (%ORG_CONSEC);
     2205     5054    3              FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_START_NUM);
     2206     5055    3            CASE (%ORG_KEYED);
     2207     5056    3              FPT_PRECORD.KEY_ = VECTOR(VD_STATIC_TEMP.START_KEY);
     2208     5057    3            CASE (%ORG_INDEXED);
     2209     5058    3              FIXED_KEY_LEN = PORT$DCB.KEYL#;
     2210     5059    3              FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_START_FIXED.BYTES);
     2211     5060    3            CASE (ELSE);
     2212     5061    3              CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2213     5062    3            END;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:254  
     2214     5063
     2215     5064
     2216     5065                /*
     2217     5066                *   Resolve the start-location of the range to a record key,
     2218     5067                *       and setup FPT_DELREC's start-key.
     2219     5068                */
     2220     5069    2           IF RANGE.START = %CLEAR THEN
     2221     5070    3   FIND_BOF_KEY: DO;
     2222     5071    3              FPT_DELREC.KEY_ = FPT_PRECORD.KEY_;
     2223     5072    3              FPT_PFIL.V.BOF# = %TRUE;
     2224     5073    3              PORT.LAST_OP# = %ACCOP_LOCATION;
     2225     5074    3              CALL M$PFIL (FPT_PFIL)
     2226     5075    3                ALTRET (PFIL_FAILED);
     2227     5076    3              FPT_PRECORD.V.N# = 0;
     2228     5077    3              START_BOF_ERR_CODE = %CLEAR;
     2229     5078    3              CALL M$PRECORD (FPT_PRECORD)
     2230     5079    4              WHENALTRETURN DO;
     2231     5080    4                 START_BOF_ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
     2232     5081    4                 END;
     2233     5082    3              IF VD_$$MON_ACC.V# > 10 THEN
     2234     5083    3                 CALL VDG$MACC_PDELETE_BOF_KEY (FPT_PRECORD.V.DCB#,
     2235     5084    3                   FPT_PRECORD.KEY_, START_BOF_ERR_CODE);
     2236     5085    3              IF START_BOF_ERR_CODE.CODE# = %E$EOF THEN
     2237     5086    3                 DO_DELREC = %FALSE;
     2238     5087    3              ELSE IF START_BOF_ERR_CODE.CODE# ~= 0 THEN
     2239     5088    3                    GOTO PRECORD_FAILED;
     2240     5089    4                 ELSE DO;
     2241     5090                         /* Check for empty-file:  KEYR key = "clear" */
     2242     5091    5                    DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2243     5092    5                     CASE (%ORG_CONSEC);
     2244     5093    5                       ;   /* No way to tell EOF on consec files */
     2245     5094    5                     CASE (%ORG_KEYED);
     2246     5095    5                       IF STATIC$TEMP_START_KEY.LENGTH# = 0 THEN
     2247     5096    5                          DO_DELREC = %FALSE;
     2248     5097    5                     CASE (%ORG_INDEXED);
     2249     5098    5                       IF STATIC$TEMP_START_FIXED = %CLEAR THEN
     2250     5099    5                          DO_DELREC = %FALSE;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:255  
     2251     5100    5                     CASE (ELSE);
     2252     5101    5                       CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2253     5102    5                     END;
     2254     5103    4                    END;
     2255     5104    3              END FIND_BOF_KEY;
     2256     5105    3           ELSE DO;
     2257     5106    3              IF RANGE.START.EOF THEN
     2258     5107    3                 DO_DELREC = %FALSE;       /* Nothing to delete */
     2259     5108    4              ELSE DO;
     2260     5109                      %GETKEY (KEY=RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)",
     2261     5110                      PTR=DEL_START_KEY$);
     2262     5120    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2263     5121    5                  CASE (%ORG_CONSEC);
     2264     5122    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY);
     2265     5123    5                  CASE (%ORG_KEYED);
     2266     5124    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY);
     2267     5125    5                  CASE (%ORG_INDEXED);
     2268     5126    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY.BYTES);
     2269     5127    5                  CASE (ELSE);
     2270     5128    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2271     5129    5                  END;
     2272     5130    4                 END;
     2273     5131    3              END;
     2274     5132
     2275     5133
     2276     5134                /*
     2277     5135                *   Prepare to reposition the port.
     2278     5136                */
     2279     5137
     2280     5138    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)
     2281     5139    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2282     5140                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC);
     2283     5150    3           IF PORT.LEVEL.DATA$ (%LVL_EXT_REC) ~= ADDR(NIL) THEN DO;
     2284     5151    3              CALL VDG$OFREE (PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER)
     2285     5152    3                ALTRET (OFREE_FAILED);
     2286     5153    3              PORT.LEVEL.DATA$ (%LVL_EXT_REC) = ADDR(NIL);
     2287     5154    3              END;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:256  
     2288     5155
     2289     5156
     2290     5157    2           IF DO_DELREC THEN
     2291     5158    3   DELREC_AND_POSITION_PORT: DO;
     2292     5159    3              PORT.LAST_OP# = %ACCOP_DELETE;
     2293     5160    3              IF VD_$$MON_ACC.V# > 10 THEN
     2294     5161    3                 CALL VDG$MACC_PDELETE_DELREC (FPT_DELREC.V.DCB#,
     2295     5162    3                   FPT_DELREC.KEY_, FPT_DELREC.LKEY_);
     2296     5163    3              CALL M$DELREC (FPT_DELREC)
     2297     5164    3                ALTRET (DELREC_FAILED);
     2298     5165    3              COUNT = PORT$DCB.ARS#;
     2299     5166                   /*
     2300     5167                   *   Since we did the M$DELREC, we can just M$PRECORD to find
     2301     5168                   *       out where the DCB is positioned.  (FPT_PRECORD should
     2302     5169                   *       still be setup to read key into VD_STATIC_TEMP.START.)
     2303     5170                   */
     2304     5171    3              FPT_PRECORD.V.N# = 0;
     2305     5172    3              ERR_CODE = %CLEAR;
     2306     5173    3              PORT.LAST_OP# = %ACCOP_LOCATION;
     2307     5174    3              CALL M$PRECORD (FPT_PRECORD)
     2308     5175    4              WHENALTRETURN DO;
     2309     5176    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
     2310     5177    4                 END;
     2311     5178    3              IF VD_$$MON_ACC.V# > 10 THEN
     2312     5179    3                 CALL VDG$MACC_PDELETE_DCB_POS (FPT_PRECORD.V.DCB#,
     2313     5180    3                   FPT_PRECORD.KEY_, ERR_CODE);
     2314     5181    3              CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP.START_KEY,
     2315     5182    3                PORT.LEVEL.ORG# (%LVL_EXT_REC),
     2316     5183    3                PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
     2317     5184    3                PORT.CURRENT)
     2318     5185    3                ALTRET (BUILD_LOCATION_FAILED);
     2319     5186    3              END DELREC_AND_POSITION_PORT;
     2320     5187    2           ELSE
     2321     5188    3   JUST_POSITION_PORT: DO;
     2322     5189                   /*
     2323     5190                   *   If we didn't do the M$DELREC, it's due to one of two things:
     2324     5191                   *     1. The file is empty:  set port position to EOF.
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:257  
     2325     5192                   *  or 2. RANGE showed nothing to delete:  BOF thru BOF or
     2326     5193                   *           EOF thru EOF.  If RANGE.END = EOF, set port position
     2327     5194                   *           to EOF.  If RANGE.END = BOF, then .START must have
     2328     5195                   *           been BOF too, and we've already got the key of
     2329     5196                   *           the first record in the file (if any) in
     2330     5197                   *           VD_STATIC_TEMP.START_KEY.
     2331     5198                   */
     2332     5199
     2333     5200    4              IF RANGE.ENDD ~= %CLEAR THEN DO;
     2334     5201    4                 PORT.CURRENT.EOF = %TRUE;
     2335     5202    4                 END;
     2336     5203    4              ELSE DO;
     2337     5204                      /* Check for empty-file:  KEYR key = "clear" */
     2338     5205    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2339     5206    5                  CASE (%ORG_CONSEC);
     2340     5207    5                    ; /* No way to tell EOF on consec files */
     2341     5208    5                  CASE (%ORG_KEYED);
     2342     5209    5                    IF STATIC$TEMP_START_KEY.LENGTH# = 0 THEN
     2343     5210    5                       PORT.CURRENT.EOF = %TRUE;
     2344     5211    5                  CASE (%ORG_INDEXED);
     2345     5212    5                    IF STATIC$TEMP_START_FIXED = %CLEAR THEN
     2346     5213    5                       PORT.CURRENT.EOF = %TRUE;
     2347     5214    5                  CASE (ELSE);
     2348     5215    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     2349     5216    5                  END;
     2350     5217
     2351     5218    5                 IF NOT PORT.CURRENT.EOF THEN DO;
     2352     5219    5                    CALL VDG$BUILD_LOCATION (START_BOF_ERR_CODE,
     2353     5220    5                      VD_STATIC_TEMP.START_KEY, PORT.LEVEL.ORG# (%LVL_EXT_REC),
     2354     5221    5                      PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
     2355     5222    5                      PORT.CURRENT)
     2356     5223    5                      ALTRET (BUILD_LOCATION_FAILED);
     2357     5224    5                    END;
     2358     5225    4                 END;
     2359     5226    3              END JUST_POSITION_PORT;
     2360     5227
     2361     5228
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:258  
     2362     5229    2           RETURN;
     2363     5230
     2364     5231
     2365     5232
     2366     5233    2   PFIL_FAILED: ;
     2367     5234    2   PRECORD_FAILED: ;
     2368     5235    2   DELREC_FAILED: ;
     2369     5236    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2370     5237    2             ALTRET (OALLOC_FAILED);
     2371     5238    2           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
     2372     5239    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2373     5240    2           VD$ERR.DCB# = PORT.DCB#;
     2374     5241    2           ALTRETURN;
     2375     5242
     2376     5243
     2377     5244    2   OALLOC_FAILED: ;
     2378     5245    2   OFREE_FAILED: ;
     2379     5246    2   OCLEAR_LOCATION_FAILED: ;
     2380     5247    2   BUILD_LOCATION_FAILED: ;
     2381     5248    2           ALTRETURN;
     2382     5249
     2383     5250    2   END DELETE_EXTERNAL;
     2384     5251
     2385     5252    1   END VDA$PDELETE;

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:259  
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PDELETE.

   Procedure VDA$PDELETE requires 680 words for executable code.
   Procedure VDA$PDELETE requires 48 words of local(AUTO) storage.

    No errors detected in file VDA$PORT.:VDA5TSI    .

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:260  

 Object Unit name= VDA$PDELETE                                File name= VDA$PORT.:VDA5TOU
 UTS= JUL 04 '97 11:08:10.68 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     26     32  VDA$PDELETE
    2   Proc  even  none   680   1250  VDA$PDELETE
    3  RoData even  none    15     17  VDA$PDELETE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        4  VDA$PDELETE
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:261  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       6 VDA$PREAD
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$MACC_PDELETE_EOF_KEY
 yes     yes           Std       6 VDG$BUILD_LOCATION
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$MACC_PDELETE_DCB_POS
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
         yes           Std       3 VDG$MACC_PDELETE_DELREC
         yes           Std       3 VDG$MACC_PDELETE_BOF_KEY
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_STATIC_TEMP
     B$TCB$                                VD_$$MON_ACC                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:262  


     1821        1        /*T***********************************************************/
     1822        2        /*T*                                                         */
     1823        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1824        4        /*T*                                                         */
     1825        5        /*T***********************************************************/
     1826        6
     1827        7        /*D* NAME: VDA$PDELETE
     1828        8            PARAMETERS:
     1829        9                PORT - VD$PORT to use.  This Port must already be open,
     1830       10                    to either an external or internal file.
     1831       11                RANGE - VD$RANGE specifying the range of nodes to delete.
     1832       12                    This is an inclusive range:  RANGE.START specifies the first
     1833       13                    node to delete and RANGE.ENDD specifies the last node to
     1834       14                    delete.
     1835       15                    RANGE must be one of the following:
     1836       16                    BOF, EOF, or specific nodes, specified as follows:
     1837       17                    If .START or .ENDD = %CLEAR, this specifies BOF;
     1838       18                    If .START.EOF or .ENDD.EOF is set, this specifies EOF;
     1839       19                    Else .START.KEY or .ENDD.KEY (%(LVL_LOWER-1)) thru (n) must
     1840       20                        be given:  these are keys for levels %LVL_LOWER thru (n+1)
     1841       21                        of the file.
     1842       22
     1843       23                    Basic rule for RANGE:  we only allow deletion within one
     1844       24                    parent node, of one or more of that parent's kids -- you
     1845       25                    can't delete from some kid of node "A" thru some kid of
     1846       26                    node "B".
     1847       27                    Therefore:
     1848       28                        If RANGE.START = %CLEAR, then .ENDD must be either
     1849       29                            %CLEAR, .ENDD.EOF, or exactly one .ENDD.KEY given.
     1850       30                        If RANGE.ENDD.EOF is set, then .START must be either
     1851       31                            %CLEAR, .START.EOF, or exactly one .START.KEY given.
     1852       32                        Of course, if .START.EOF is set then the only valid
     1853       33                            .ENDD is .ENDD.EOF; if .ENDD = %CLEAR, then the
     1854       34                            only valid .START is %CLEAR.  In either case,
     1855       35                            nothing will be deleted.
     1856       36                        If neither .START nor .END specify BOF or EOF, then
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:263  
     1857       37                            the number of keys in .START.KEY and .ENDD.KEY
     1858       38                            must be equal, and all .START.KEYs except the last
     1859       39                            must equal their counterpart in .ENDD.KEY.
     1860       40                            If the file has more than two levels, deletion will
     1861       41                            be at the lowest level given; for example, if the
     1862       42                            file has 5 levels but keys are only given for levels
     1863       43                            1 and 2, we will delete nodes at levels 2 thru 5:
     1864       44                            the specified node(s) at level 2, and all children
     1865       45                            of deleted level 2 nodes.
     1866       46                DEL_LEVEL - Top-most level in file structure at which to
     1867       47                    delete; we'll delete specified nodes at DEL_LEVEL and
     1868       48                    all children of the deleted DEL_LEVEL nodes.
     1869       49                    DEL_LEVEL must be > %LVL_FILE;
     1870       50                    for external files, DEL_LEVEL must be %LVL_EXT_REC.
     1871       51                COUNT - Uninitialized SBIN.
     1872       52            INPUT:
     1873       53            SCRATCH
     1874       54                VD_STATIC_TEMP
     1875       55            OUTPUT:
     1876       56                COUNT will contain the number of nodes at DEL_LEVEL which
     1877       57                    were actually deleted; this may be 0.
     1878       58                PORT will be repositioned to the node following the last
     1879       59                    node deleted, or eof.
     1880       60            DESCRIPTION:
     1881       61                Use different procedures for internal and external files.
     1882       62        */
     1883       63
     1884       64        VDA$PDELETE: PROC (PORT, RANGE, DEL_LEVEL, COUNT) ALTRET;

     64  2 000000   000000 700200 xent  VDA$PDELETE  TSX0  ! X66_AUTO_4
         2 000001   000060 000004                    ZERO    48,4

     1885       65
     1886       66
     1887       67        %INCLUDE VD_MACROS_M;
     1888     2282        %INCLUDE VD_PERR_C;
     1889     2430        %INCLUDE CP_6;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:264  
     1890     2511        %INCLUDE B_ERRORS_C;
     1891     3637
     1892     3638
     1893     3639        %VD$PORT (NAME=PORT, STCLASS=PARAM);
     1894     3737        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     1895     3806    1   DCL DEL_LEVEL SBIN;
     1896     3807    1   DCL COUNT SBIN;
     1897     3808
     1898     3809
     1899     3810
     1900     3811    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
     1901     3812    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1902     3813    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1903     3814    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1904     3815    1   DCL VDG$BUILD_LOCATION  ENTRY (6) ALTRET;
     1905     3816    1   DCL VDG$ESCREECH        ENTRY (3);
     1906     3817    1   DCL VDG$MACC_PDELETE_EOF_KEY ENTRY (3);
     1907     3818    1   DCL VDG$MACC_PDELETE_BOF_KEY ENTRY (3);
     1908     3819    1   DCL VDG$MACC_PDELETE_DELREC ENTRY (3);
     1909     3820    1   DCL VDG$MACC_PDELETE_DCB_POS ENTRY (3);
     1910     3821
     1911     3822
     1912     3823        %VD_6E (STCLASS=SYMREF);
     1913     3859    1   DCL 1 VD_STATIC_TEMP SYMREF,
     1914     3860    1         2 START_KEY CHAR(%(MXNB_KEY+1)) ALIGNED,
     1915     3861    1         2 END_KEY CHAR(%(MXNB_KEY+1)) ALIGNED;
     1916     3862    1   DCL B$TCB$ PTR SYMREF;
     1917     3863        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1918     3908
     1919     3909
     1920     3910        %FPT_PFIL (FPTN=CONST_FPT_PFIL, STCLASS=CONSTANT);
     1921     3925        %FPT_PRECORD (FPTN=CONST_FPT_PRECORD, STCLASS=CONSTANT, KEYS=NO,
     1922     3926                KEYR=YES);
     1923     3947        %FPT_DELREC (FPTN=CONST_FPT_DELREC, STCLASS=CONSTANT);
     1924     3966    1   DCL STATIC_TEMP_START$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP.START_KEY));
     1925     3967    1   DCL STATIC_TEMP_END$ PTR CONSTANT INIT(ADDR(VD_STATIC_TEMP.END_KEY));
     1926     3968
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:265  
     1927     3969
     1928     3970
     1929     3971    1   DCL FIXED_KEY_LEN SBIN;
     1930     3972
     1931     3973
     1932     3974        %VD$TEXTC (NAME=STATIC$TEMP_START_KEY, STCLASS="BASED(STATIC_TEMP_START$)");
     1933     3997    1   DCL STATIC$TEMP_START_NUM SBIN BASED(STATIC_TEMP_START$);
     1934     3998    1   DCL STATIC$TEMP_END_NUM SBIN BASED(STATIC_TEMP_END$);
     1935     3999    1   DCL 1 STATIC$TEMP_START_FIXED BASED(STATIC_TEMP_START$),
     1936     4000    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1937     4001    1   DCL 1 STATIC$TEMP_END_FIXED BASED(STATIC_TEMP_END$),
     1938     4002    1         2 BYTES CHAR(FIXED_KEY_LEN);
     1939     4003        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     1940     4006        %B$ALT;
     1941     4014
     1942     4015
     1943     4016
     1944     4017    1           IF PORT.EXIST# = 0

   4017  2 000002   200003 470500                    LDP0    @PORT,,AUTO
         2 000003   000003 720100                    LXL0    3,,PR0
         2 000004   000010 600000 2                  TZE     s:4019
         2 000005   200005 471500                    LDP1    @DEL_LEVEL,,AUTO
         2 000006   100000 235100                    LDA     0,,PR1
         2 000007   000021 605400 2                  TPNZ    s:4021

     1945     4018    1             OR DEL_LEVEL <= %LVL_FILE THEN
     1946     4019    1              CALL VDG$ESCREECH (PORT.EXIST#, DEL_LEVEL);

   4019  2 000010   200005 236100                    LDQ     @DEL_LEVEL,,AUTO
         2 000011   200053 756100                    STQ     VD_ERR$+3,,AUTO
         2 000012   200003 236100                    LDQ     @PORT,,AUTO
         2 000013   000000 036000 3                  ADLQ    0
         2 000014   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000015   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000016   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000017   000000 701000 xent               TSX1    VDG$ESCREECH
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:266  
         2 000020   000000 011000                    NOP     0

     1947     4020
     1948     4021    1           IF PORT.DCB# = 0 THEN

   4021  2 000021   200003 470500                    LDP0    @PORT,,AUTO
         2 000022   000004 720100                    LXL0    4,,PR0
         2 000023   000027 601000 2                  TNZ     s:4025

     1949     4022    1              CALL DELETE_INTERNAL

   4022  2 000024   000033 701000 2                  TSX1    DELETE_INTERNAL
         2 000025   000032 702000 2                  TSX2    DELETE_INTERNAL_FAILED
         2 000026   000031 710000 2                  TRA     s:4028

     1950     4023    1                ALTRET (DELETE_INTERNAL_FAILED);
     1951     4024    1           ELSE
     1952     4025    1              CALL DELETE_EXTERNAL

   4025  2 000027   000203 701000 2                  TSX1    DELETE_EXTERNAL
         2 000030   000032 702000 2                  TSX2    DELETE_INTERNAL_FAILED

     1953     4026    1                ALTRET (DELETE_EXTERNAL_FAILED);
     1954     4027
     1955     4028    1           RETURN;

   4028  2 000031   000000 702200 xent               TSX2  ! X66_ARET

   4021  2 000032                       DELETE_INTE* null
   4021  2 000032                       DELETE_EXTE* null
     1956     4029
     1957     4030
     1958     4031
     1959     4032    1   DELETE_INTERNAL_FAILED: ;
     1960     4033    1   DELETE_EXTERNAL_FAILED: ;
     1961     4034    1           ALTRETURN;

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:267  
   4034  2 000032   000000 702200 xent               TSX2  ! X66_AALT

     1962     4035
     1963     4036                %BOX (TITLE=DELETE_INTERNAL, PAGE=YES);
              4044    1
              4048    1   /***************************************************************************
              4050    1    *                                                                         *
              4054    1            *                              DELETE_INTERNAL                           *
              4056    1            *                                                                        *
              4058    1          ***************************************************************************/

     1964     4062
     1965     4063        /*I* NAME: DELETE_INTERNAL
     1966     4064            PARAMETERS:
     1967     4065                None.
     1968     4066            INPUT:
     1969     4067                PORT - VD$PORT to use.  If it contained any .SPEC/DATA_MODIFIED
     1970     4068                    nodes, they must already have been flushed to the file.
     1971     4069                DEL_LEVEL - Top-most level in file structure at which to
     1972     4070                    delete; we'll delete specified nodes at DEL_LEVEL and all
     1973     4071                    children of the deleted DEL_LEVEL nodes.
     1974     4072                RANGE - Range to delete (inclusive).
     1975     4073            OUTPUT:
     1976     4074                COUNT will contain the number of nodes at DEL_LEVEL
     1977     4075                    which were actually deleted.
     1978     4076                PORT.CURRENT will specify the node following
     1979     4077                    the last node deleted, or if none, eof.
     1980     4078            DESCRIPTION:
     1981     4079                Call VDA$PREAD to find the first node to delete; remember
     1982     4080                    the node.
     1983     4081                Call VDA$PREAD again to find the node following the last node
     1984     4082                    to delete (and incidentally to count the nodes in between).
     1985     4083                If there are any nodes to delete:
     1986     4084                    Delink the nodes from the file tree.
     1987     4085                    Loop thru the nodes, calling VDG$OFREE to free them.
     1988     4086        */
     1989     4087
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:268  
     1990     4088    1   DELETE_INTERNAL: PROC ALTRET;

   4088  2 000033   200010 741300       DELETE_INTE* STX1  ! FIXED_KEY_LEN+1,,AUTO

     1991     4089
     1992     4090
     1993     4091    2   DCL AT_EOF BIT(1) ALIGNED;
     1994     4092    2   DCL DEL_PARENT$ PTR;
     1995     4093    2   DCL DEL_START$ PTR;
     1996     4094    2   DCL DEL_END$ PTR;
     1997     4095
     1998     4096
     1999     4097        %VD$FILE_NODE (NAME=DEL$PARENT, STCLASS="BASED(DEL_PARENT$)");
     2000     4190        %VD$FILE_NODE (NAME=DEL$START, STCLASS="BASED(DEL_START$)");
     2001     4283        %VD$FILE_NODE (NAME=DEL$END, STCLASS="BASED(DEL_END$)");
     2002     4376        %VD$FILE_NODE;
     2003     4469
     2004     4470
     2005     4471
     2006     4472    2           COUNT = 0;

   4472  2 000034   200006 470500                    LDP0    @COUNT,,AUTO
         2 000035   000000 450100                    STZ     0,,PR0

     2007     4473
     2008     4474    2           CALL VDA$PREAD (PORT, RANGE.START, 0, %FALSE)

   4474  2 000036   000002 237000 3                  LDAQ    2
         2 000037   200054 757100                    STAQ    VD_ERR$+4,,AUTO
         2 000040   200004 236100                    LDQ     @RANGE,,AUTO
         2 000041   200003 235100                    LDA     @PORT,,AUTO
         2 000042   200052 757100                    STAQ    VD_ERR$+2,,AUTO
         2 000043   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000044   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000045   000000 701000 xent               TSX1    VDA$PREAD
         2 000046   000201 702000 2                  TSX2    PREAD_FAILED

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:269  
     2009     4475    2             ALTRET (PREAD_FAILED);
     2010     4476    2           IF PORT.CURRENT.EOF THEN

   4476  2 000047   200003 470500                    LDP0    @PORT,,AUTO
         2 000050   000022 236100                    LDQ     18,,PR0
         2 000051   400000 316007                    CANQ    -131072,DL
         2 000052   000055 600000 2                  TZE     s:4478

     2011     4477    2              RETURN;      /* Nothing to delete */

   4477  2 000053   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 000054   000001 702211                    TSX2  ! 1,X1

     2012     4478    2           DEL_START$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL);

   4478  2 000055   200005 471500                    LDP1    @DEL_LEVEL,,AUTO
         2 000056   100000 236100                    LDQ     0,,PR1
         2 000057   000007 402007                    MPY     7,DL
         2 000060   000031 236106                    LDQ     25,QL,PR0
         2 000061   200013 756100                    STQ     DEL_START$,,AUTO

     2013     4479    2           DEL_PARENT$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL - 1);

   4479  2 000062   100000 236100                    LDQ     0,,PR1
         2 000063   000007 402007                    MPY     7,DL
         2 000064   000022 236106                    LDQ     18,QL,PR0
         2 000065   200012 756100                    STQ     DEL_PARENT$,,AUTO

     2014     4480
     2015     4481    2           CALL VDA$PREAD (PORT, RANGE.ENDD, 1, %FALSE, , COUNT)

   4481  2 000066   200006 236100                    LDQ     @COUNT,,AUTO
         2 000067   000001 235000 xsym               LDA     B_VECTNIL+1
         2 000070   200056 757100                    STAQ    VD_ERR$+6,,AUTO
         2 000071   000004 237000 3                  LDAQ    4
         2 000072   200054 757100                    STAQ    VD_ERR$+4,,AUTO
         2 000073   200004 236100                    LDQ     @RANGE,,AUTO
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:270  
         2 000074   000011 036003                    ADLQ    9,DU
         2 000075   200003 235100                    LDA     @PORT,,AUTO
         2 000076   200052 757100                    STAQ    VD_ERR$+2,,AUTO
         2 000077   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000100   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 000101   000000 701000 xent               TSX1    VDA$PREAD
         2 000102   000201 702000 2                  TSX2    PREAD_FAILED

     2016     4482    2             ALTRET (PREAD_FAILED);
     2017     4483    2           DEL_END$ = PORT.LEVEL.INTERNAL$ (DEL_LEVEL);

   4483  2 000103   200005 470500                    LDP0    @DEL_LEVEL,,AUTO
         2 000104   000000 236100                    LDQ     0,,PR0
         2 000105   000007 402007                    MPY     7,DL
         2 000106   200003 471500                    LDP1    @PORT,,AUTO
         2 000107   100031 236106                    LDQ     25,QL,PR1
         2 000110   200014 756100                    STQ     DEL_END$,,AUTO

     2018     4484                /* DEL_END$ points to node FOLLOWING last node to delete */
     2019     4485
     2020     4486    2           IF COUNT > 0

   4486  2 000111   200006 473500                    LDP3    @COUNT,,AUTO
         2 000112   300000 235100                    LDA     0,,PR3
         2 000113   000116 605400 2                  TPNZ    DELETE_NODES
         2 000114   200013 116100                    CMPQ    DEL_START$,,AUTO
         2 000115   000174 601000 2                  TNZ     s:4526

     2021     4487    2             OR DEL_START$ = DEL_END$ THEN
     2022     4488    3   DELETE_NODES: DO;

   4488  2 000116                       DELETE_NODES null
     2023     4489    3              VD_6E.STATS# (%STG_ACC_INT_DELETIONS) =

   4489  2 000116   000127 236000 xsym               LDQ     VD_6E+87
         2 000117   300000 036100                    ADLQ    0,,PR3
         2 000120   000127 756000 xsym               STQ     VD_6E+87
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:271  

     2024     4490    3                VD_6E.STATS# (%STG_ACC_INT_DELETIONS) + COUNT;
     2025     4491                   /*
     2026     4492                   *    When deleting nodes which are contiguous kids of one
     2027     4493                   *    parent, we first delink the nodes from the file
     2028     4494                   *    tree, then free them.
     2029     4495                   *    To delink the nodes from the file tree, there are
     2030     4496                   *    four pointers which need to be adjusted:
     2031     4497                   *        o The forward and backward pointers into the
     2032     4498                   *            nodes to be delinked; these may be sibling
     2033     4499                   *            pointers (.FLINK$/.BLINK$) or parent-child
     2034     4500                   *            pointers (.HEAD$/.TAIL$).
     2035     4501                   *        o The backward link from the first delinked node.
     2036     4502                   *        o The forward link from the last delinked node.
     2037     4503                   */
     2038     4504
     2039     4505    3              IF DEL$START.BLINK$ = ADDR(NIL) THEN

   4505  2 000121   200013 474500                    LDP4    DEL_START$,,AUTO
         2 000122   400001 236100                    LDQ     1,,PR4
         2 000123   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000124   000131 601000 2                  TNZ     s:4508

     2040     4506    3                 DEL$PARENT.HEAD$ = DEL_END$;

   4506  2 000125   200014 236100                    LDQ     DEL_END$,,AUTO
         2 000126   200012 475500                    LDP5    DEL_PARENT$,,AUTO
         2 000127   500012 756100                    STQ     10,,PR5
         2 000130   000134 710000 2                  TRA     s:4509

     2041     4507    3              ELSE
     2042     4508    3                 DEL$START.BLINK$ -> VD$FILE_NODE.FLINK$ = DEL_END$;

   4508  2 000131   400001 475500                    LDP5    1,,PR4
         2 000132   200014 236100                    LDQ     DEL_END$,,AUTO
         2 000133   500002 756100                    STQ     2,,PR5

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:272  
     2043     4509    3              IF DEL_END$ = ADDR(NIL) THEN

   4509  2 000134   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000135   000142 601000 2                  TNZ     s:4512

     2044     4510    3                 DEL$PARENT.TAIL$ = DEL$START.BLINK$;

   4510  2 000136   400001 236100                    LDQ     1,,PR4
         2 000137   200012 475500                    LDP5    DEL_PARENT$,,AUTO
         2 000140   500013 756100                    STQ     11,,PR5
         2 000141   000150 710000 2                  TRA     s:4515

     2045     4511    4              ELSE DO;

     2046     4512    4                 DEL$END.BLINK$ -> VD$FILE_NODE.FLINK$ = ADDR(NIL);

   4512  2 000142   200014 475500                    LDP5    DEL_END$,,AUTO
         2 000143   500001 476500                    LDP6    1,,PR5
         2 000144   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000145   600002 756100                    STQ     2,,PR6

     2047     4513    4                 DEL$END.BLINK$ = DEL$START.BLINK$;

   4513  2 000146   400001 236100                    LDQ     1,,PR4
         2 000147   500001 756100                    STQ     1,,PR5

     2048     4514    4                 END;

     2049     4515    3              DEL$START.BLINK$ = ADDR(NIL);

   4515  2 000150   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000151   400001 756100                    STQ     1,,PR4

     2050     4516
     2051     4517    3              DEL$PARENT.COUNT# = DEL$PARENT.COUNT# - COUNT;

   4517  2 000152   200012 475500                    LDP5    DEL_PARENT$,,AUTO
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:273  
         2 000153   500014 236100                    LDQ     12,,PR5
         2 000154   300000 136100                    SBLQ    0,,PR3
         2 000155   500014 756100                    STQ     12,,PR5

     2052     4518    3              IF DEL$PARENT.COUNT# < 0 THEN

   4518  2 000156   000170 605000 2                  TPL     s:4522

     2053     4519    3                 CALL VDG$ESCREECH (DEL$PARENT.COUNT#, COUNT);

   4519  2 000157   200006 236100                    LDQ     @COUNT,,AUTO
         2 000160   200053 756100                    STQ     VD_ERR$+3,,AUTO
         2 000161   200012 236100                    LDQ     DEL_PARENT$,,AUTO
         2 000162   000014 036003                    ADLQ    12,DU
         2 000163   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000164   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000165   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000166   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000167   000000 011000                    NOP     0

     2054     4520
     2055     4521                   /* VDG$OFREE will delete DEL$START and all its .FLINK$s */
     2056     4522    3              CALL VDG$OFREE (DEL$START)

   4522  2 000170   200013 630500                    EPPR0   DEL_START$,,AUTO
         2 000171   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000172   000000 701000 xent               TSX1    VDG$OFREE
         2 000173   000201 702000 2                  TSX2    PREAD_FAILED

     2057     4523    3                ALTRET (OFREE_FAILED);
     2058     4524    3              END DELETE_NODES;

     2059     4525
     2060     4526    2           PORT.LAST_OP# = %ACCOP_DELETE;

   4526  2 000174   000006 220003                    LDX0    6,DU
         2 000175   200003 470500                    LDP0    @PORT,,AUTO
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:274  
         2 000176   000007 740100                    STX0    7,,PR0

     2061     4527
     2062     4528    2           RETURN;

   4528  2 000177   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 000200   000001 702211                    TSX2  ! 1,X1

   4526  2 000201                       PREAD_FAILED null
   4526  2 000201                       OFREE_FAILED null
     2063     4529
     2064     4530
     2065     4531
     2066     4532    2   PREAD_FAILED: ;
     2067     4533    2   OFREE_FAILED: ;
     2068     4534    2           ALTRETURN;

   4534  2 000201   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 000202   000000 702211                    TSX2  ! 0,X1

     2069     4535
     2070     4536    2   END DELETE_INTERNAL;
     2071     4537
     2072     4538
     2073     4539                %BOX (TITLE=DELETE_EXTERNAL, PAGE=YES);
              4547    2
              4551    2   /***************************************************************************
              4553    2    *                                                                         *
              4557    2            *                              DELETE_EXTERNAL                           *
              4559    2            *                                                                        *
              4561    2          ***************************************************************************/

     2074     4565
     2075     4566        /*I* NAME: DELETE_EXTERNAL
     2076     4567            PARAMETERS:
     2077     4568            INPUT:
     2078     4569                PORT - VD$PORT to use.  If it contained any .SPEC/DATA_MODIFIED
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:275  
     2079     4570                    nodes, they must already have been flushed to the file.
     2080     4571                DEL_LEVEL - Top-most level in file structure at which to
     2081     4572                    delete.
     2082     4573                    NOTE:  DEL_LEVEL must = %LVL_EXT_REC.
     2083     4574                RANGE - Range to delete (inclusive).
     2084     4575            OUTPUT:
     2085     4576                COUNT will contain the number of records deleted.
     2086     4577                PORT.CURRENTs will specify the record following
     2087     4578                    the last record deleted, or if none, eof.
     2088     4579            DESCRIPTION:
     2089     4580                If the end of the range to delete is EOF and the start isn't
     2090     4581                    also EOF, do an M$PFIL then M$PRECORD to get the last key
     2091     4582                    of the file.
     2092     4583                If the start of the range to delete is BOF, do an M$PFIL
     2093     4584                    then M$PRECORD to get the first key of the file.
     2094     4585                If the start isn't EOF and the end isn't BOF, and the
     2095     4586                    positionings above didn't find an empty file, do the
     2096     4587                    M$DELREC.
     2097     4588                Position the port to the record following the end of the range.
     2098     4589        */
     2099     4590
     2100     4591    1   DELETE_EXTERNAL: PROC ALTRET;

   4591  2 000203   200010 741300       DELETE_EXTE* STX1  ! FIXED_KEY_LEN+1,,AUTO

     2101     4592
     2102     4593
     2103     4594    2   DCL DO_DELREC BIT(1) ALIGNED;
     2104     4595    2   DCL PORT_DCB$ PTR;
     2105     4596    2   DCL DEL_START_KEY$ PTR;
     2106     4597    2   DCL DEL_END_KEY$ PTR;
     2107     4598        %VD$ERR_CODE (NAME=ERR_CODE, STCLASS=AUTO);
     2108     4613        %VD$ERR_CODE (NAME=START_BOF_ERR_CODE, STCLASS=AUTO);
     2109     4628        %FPT_PFIL (FPTN=FPT_PFIL, STCLASS=AUTO);
     2110     4643        %FPT_PRECORD (STCLASS=AUTO);
     2111     4664        %FPT_DELREC (FPTN=FPT_DELREC, STCLASS=AUTO);
     2112     4683    2   DCL VD_ERR$ PTR;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:276  
     2113     4684
     2114     4685
     2115     4686        %F$DCB (DCBN=PORT$DCB, STCLASS="BASED(PORT_DCB$)");
     2116     4743        %VD$TEXTC (NAME=DEL$START_KEY, STCLASS="BASED(DEL_START_KEY$)");
     2117     4766        %VD$TEXTC (NAME=DEL$END_KEY, STCLASS="BASED(DEL_END_KEY$)");
     2118     4789        %VD$TEXTC_REMOTE;
     2119     4850        %VD$BUFFER;
     2120     4908        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2121     4961
     2122     4962
     2123     4963
     2124     4964    2           COUNT = 0;

   4964  2 000204   200006 470500                    LDP0    @COUNT,,AUTO
         2 000205   000000 450100                    STZ     0,,PR0

     2125     4965    2           DO_DELREC = %TRUE;  /* Assume there's something to delete */

   4965  2 000206   400000 236003                    LDQ     -131072,DU
         2 000207   200011 756100                    STQ     DO_DELREC,,AUTO

     2126     4966    2           PORT_DCB$ = DCBADDR(PORT.DCB#);

   4966  2 000210   000001 471400 3                  LDP1    1
         2 000211   100000 473500                    LDP3    0,,PR1
         2 000212   200003 474500                    LDP4    @PORT,,AUTO
         2 000213   400004 720100                    LXL0    4,,PR4
         2 000214   300000 236110                    LDQ     0,X0,PR3
         2 000215   200012 756100                    STQ     PORT_DCB$,,AUTO

     2127     4967
     2128     4968    2           FPT_PFIL = CONST_FPT_PFIL;

   4968  2 000216   000100 100400                    MLR     fill='000'O
         2 000217   000000 000020 1                  ADSC9   CONST_FPT_PFIL           cn=0,n=16
         2 000220   200020 000020                    ADSC9   FPT_PFIL,,AUTO           cn=0,n=16

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:277  
     2129     4969    2           FPT_PFIL.V_ = VECTOR(FPT_PFIL.V);

   4969  2 000221   000006 235000 3                  LDA     6
         2 000222   200052 452500                    STP2    VD_ERR$+2,,AUTO
         2 000223   200052 236100                    LDQ     VD_ERR$+2,,AUTO
         2 000224   000022 036003                    ADLQ    18,DU
         2 000225   200020 757100                    STAQ    FPT_PFIL,,AUTO

     2130     4970    2           FPT_PFIL.V.DCB# = PORT.DCB#;

   4970  2 000226   400004 720100                    LXL0    4,,PR4
         2 000227   200022 740100                    STX0    FPT_PFIL+2,,AUTO

     2131     4971
     2132     4972    2           FPT_PRECORD = CONST_FPT_PRECORD;

   4972  2 000230   000100 100400                    MLR     fill='000'O
         2 000231   000004 000050 1                  ADSC9   CONST_FPT_PRECORD        cn=0,n=40
         2 000232   200024 000050                    ADSC9   FPT_PRECORD,,AUTO        cn=0,n=40

     2133     4973    2           FPT_PRECORD.V_ = VECTOR(FPT_PRECORD.V);

   4973  2 000233   000007 235000 3                  LDA     7
         2 000234   200052 452500                    STP2    VD_ERR$+2,,AUTO
         2 000235   200052 236100                    LDQ     VD_ERR$+2,,AUTO
         2 000236   000032 036003                    ADLQ    26,DU
         2 000237   200024 757100                    STAQ    FPT_PRECORD,,AUTO

     2134     4974    2           FPT_PRECORD.V.DCB# = PORT.DCB#;

   4974  2 000240   400004 721100                    LXL1    4,,PR4
         2 000241   200032 741100                    STX1    FPT_PRECORD+6,,AUTO

     2135     4975
     2136     4976    2           FPT_DELREC = CONST_FPT_DELREC;

   4976  2 000242   000100 100400                    MLR     fill='000'O
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:278  
         2 000243   000016 000050 1                  ADSC9   CONST_FPT_DELREC         cn=0,n=40
         2 000244   200036 000050                    ADSC9   FPT_DELREC,,AUTO         cn=0,n=40

     2137     4977    2           FPT_DELREC.V_ = VECTOR(FPT_DELREC.V);

   4977  2 000245   000006 235000 3                  LDA     6
         2 000246   200052 452500                    STP2    VD_ERR$+2,,AUTO
         2 000247   200052 236100                    LDQ     VD_ERR$+2,,AUTO
         2 000250   000046 036003                    ADLQ    38,DU
         2 000251   200036 757100                    STAQ    FPT_DELREC,,AUTO

     2138     4978    2           FPT_DELREC.V.DCB# = PORT.DCB#;

   4978  2 000252   400004 722100                    LXL2    4,,PR4
         2 000253   200046 742100                    STX2    FPT_DELREC+8,,AUTO

     2139     4979
     2140     4980                /*
     2141     4981                *   First, resolve the end-location of the range to a record
     2142     4982                *       key, and setup FPT_DELREC's end-key.
     2143     4983                */
     2144     4984    2           IF RANGE.ENDD.EOF THEN

   4984  2 000254   200004 475500                    LDP5    @RANGE,,AUTO
         2 000255   500021 236100                    LDQ     17,,PR5
         2 000256   400000 316007                    CANQ    -131072,DL
         2 000257   000373 600000 2                  TZE     s:5018

     2145     4985    3   FIND_EOF_KEY: DO;

   4985  2 000260                       FIND_EOF_KEY null
     2146     4986                   /* Read end-key into last half of VD_STATIC_TEMP */
     2147     4987    4              DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   4987  2 000260   400032 223100                    LDX3    26,,PR4
         2 000261   000004 103003                    CMPX3   4,DU
         2 000262   000264 602013 2                  TNC     FIND_EOF_KEY+4,X3
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:279  
         2 000263   000312 710000 2                  TRA     s:4996
         2 000264   000312 710000 2                  TRA     s:4996
         2 000265   000270 710000 2                  TRA     s:4989
         2 000266   000274 710000 2                  TRA     s:4991
         2 000267   000277 710000 2                  TRA     s:4993

     2148     4988    4               CASE (%ORG_CONSEC);

     2149     4989    4                 FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_END_NUM);

   4989  2 000270   777640 235007                    LDA     -96,DL
         2 000271   000031 236000 1                  LDQ     STATIC_TEMP_END$
         2 000272   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000273   000321 710000 2                  TRA     s:4998

     2150     4990    4               CASE (%ORG_KEYED);

     2151     4991    4                 FPT_PRECORD.KEY_ = VECTOR(VD_STATIC_TEMP.END_KEY);

   4991  2 000274   000010 237000 3                  LDAQ    8
         2 000275   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000276   000321 710000 2                  TRA     s:4998

     2152     4992    4               CASE (%ORG_INDEXED);

     2153     4993    4                 FIXED_KEY_LEN = PORT$DCB.KEYL#;

   4993  2 000277   200012 476500                    LDP6    PORT_DCB$,,AUTO
         2 000300   600036 236100                    LDQ     30,,PR6
         2 000301   000011 772000                    QRL     9
         2 000302   000777 376007                    ANQ     511,DL
         2 000303   200007 756100                    STQ     FIXED_KEY_LEN,,AUTO

     2154     4994    4                 FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_END_FIXED.BYTES);

   4994  2 000304   200007 235100                    LDA     FIXED_KEY_LEN,,AUTO
         2 000305   000020 735000                    ALS     16
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:280  
         2 000306   000140 135007                    SBLA    96,DL
         2 000307   000031 236000 1                  LDQ     STATIC_TEMP_END$
         2 000310   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000311   000321 710000 2                  TRA     s:4998

     2155     4995    4               CASE (ELSE);

     2156     4996    4                 CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   4996  2 000312   200003 236100                    LDQ     @PORT,,AUTO
         2 000313   000032 036003                    ADLQ    26,DU
         2 000314   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000315   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000316   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000317   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000320   000000 011000                    NOP     0

     2157     4997    4               END;

     2158     4998    3              FPT_DELREC.LKEY_ = FPT_PRECORD.KEY_;

   4998  2 000321   200026 237100                    LDAQ    FPT_PRECORD+2,,AUTO
         2 000322   200042 757100                    STAQ    FPT_DELREC+4,,AUTO

     2159     4999
     2160     5000    3              FPT_PFIL.V.BOF# = %FALSE;

   5000  2 000323   000012 236000 3                  LDQ     10
         2 000324   200022 356100                    ANSQ    FPT_PFIL+2,,AUTO

     2161     5001    3              PORT.LAST_OP# = %ACCOP_LOCATION;

   5001  2 000325   000002 220003                    LDX0    2,DU
         2 000326   200003 470500                    LDP0    @PORT,,AUTO
         2 000327   000007 740100                    STX0    7,,PR0

     2162     5002    3              CALL M$PFIL (FPT_PFIL)
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:281  

   5002  2 000330   200020 630500                    EPPR0   FPT_PFIL,,AUTO
         2 000331   440004 713400                    CLIMB   alt,+16388
         2 000332   400000 401760                    pmme    nvectors=1
         2 000333   001220 702000 2                  TSX2    PFIL_FAILED

     2163     5003    3                ALTRET (PFIL_FAILED);
     2164     5004    3              FPT_PRECORD.V.N# = -1;

   5004  2 000334   000001 335007                    LCA     1,DL
         2 000335   200033 755100                    STA     FPT_PRECORD+7,,AUTO

     2165     5005    3              CALL M$PRECORD (FPT_PRECORD)

   5005  2 000336   200024 630500                    EPPR0   FPT_PRECORD,,AUTO
         2 000337   440003 713400                    CLIMB   alt,+16387
         2 000340   401000 401760                    pmme    nvectors=3
         2 000341   000343 702000 2                  TSX2    s:5007
         2 000342   000355 710000 2                  TRA     s:5013

     2166     5006    4              WHENALTRETURN DO;

     2167     5007    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5007  2 000343   000000 470400 xsym               LDP0    B$TCB$
         2 000344   000000 471500                    LDP1    0,,PR0
         2 000345   100102 236100                    LDQ     66,,PR1
         2 000346   200015 756100                    STQ     ERR_CODE,,AUTO

     2168     5008    4                 IF ERR_CODE.CODE# = %E$BOF THEN

   5008  2 000347   200015 236100                    LDQ     ERR_CODE,,AUTO
         2 000350   377770 376007                    ANQ     131064,DL
         2 000351   000040 116007                    CMPQ    32,DL
         2 000352   001220 601000 2                  TNZ     PFIL_FAILED

     2169     5009    4                    DO_DELREC = %FALSE;    /* File is empty */
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:282  

   5009  2 000353   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000354   000355 710000 2                  TRA     s:5013

     2170     5010    4                 ELSE
     2171     5011    4                    GOTO PRECORD_FAILED;
     2172     5012    4                 END;
     2173     5013    3              IF VD_$$MON_ACC.V# > 10 THEN

   5013  2 000355   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 000356   000012 115007                    CMPA    10,DL
         2 000357   000467 604400 2                  TMOZ    s:5052

     2174     5014    3                 CALL VDG$MACC_PDELETE_EOF_KEY (FPT_PRECORD.V.DCB#,

   5014  2 000360   200015 630500                    EPPR0   ERR_CODE,,AUTO
         2 000361   200054 450500                    STP0    VD_ERR$+4,,AUTO
         2 000362   200026 631500                    EPPR1   FPT_PRECORD+2,,AUTO
         2 000363   200053 451500                    STP1    VD_ERR$+3,,AUTO
         2 000364   200032 633500                    EPPR3   FPT_PRECORD+6,,AUTO
         2 000365   200052 453500                    STP3    VD_ERR$+2,,AUTO
         2 000366   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000367   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000370   000000 701000 xent               TSX1    VDG$MACC_PDELETE_EOF_KEY
         2 000371   000000 011000                    NOP     0

     2175     5015    3                   FPT_PRECORD.KEY_, ERR_CODE);
     2176     5016    3              END FIND_EOF_KEY;

   5016  2 000372   000467 710000 2                  TRA     s:5052

     2177     5017    3           ELSE DO;

     2178     5018    3              IF RANGE.ENDD.KEY (%(LVL_EXT_REC-1)) = %CLEAR THEN

   5018  2 000373   000000 106500                    CMPC    fill='000'O
         2 000374   500011 000010                    ADSC9   9,,PR5                   cn=0,n=8
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:283  
         2 000375   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000376   000401 601000 2                  TNZ     s:5029

     2179     5019    3                 DO_DELREC = %FALSE;   /* End=BOF: nothing to delete */

   5019  2 000377   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000400   000467 710000 2                  TRA     s:5052

     2180     5020    4              ELSE DO;

     2181     5021                      %GETKEY (KEY=RANGE.ENDD.KEY, INDX="%(LVL_EXT_REC-1)",
     2182     5022                      PTR=DEL_END_KEY$);

   5029  2 000401   500011 723100                    LXL3    9,,PR5
         2 000402   000002 103003                    CMPX3   2,DU
         2 000403   000410 601000 2                  TNZ     s:5029+7

   5029  2 000404   500012 476500                    LDP6    10,,PR5
         2 000405   600002 637500                    EPPR7   2,,PR6
         2 000406   200014 457500                    STP7    DEL_END_KEY$,,AUTO
         2 000407   000413 710000 2                  TRA     s:5032

   5029  2 000410   200004 236100                    LDQ     @RANGE,,AUTO
         2 000411   000012 036003                    ADLQ    10,DU
         2 000412   200014 756100                    STQ     DEL_END_KEY$,,AUTO

     2183     5032    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5032  2 000413   400032 224100                    LDX4    26,,PR4
         2 000414   000004 104003                    CMPX4   4,DU
         2 000415   000417 602014 2                  TNC     s:5032+4,X4
         2 000416   000460 710000 2                  TRA     s:5040
         2 000417   000460 710000 2                  TRA     s:5040
         2 000420   000423 710000 2                  TRA     s:5034
         2 000421   000435 710000 2                  TRA     s:5036
         2 000422   000447 710000 2                  TRA     s:5038

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:284  
     2184     5033    5                  CASE (%ORG_CONSEC);

     2185     5034    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY);

   5034  2 000423   200014 476500                    LDP6    DEL_END_KEY$,,AUTO
         2 000424   600000 236100                    LDQ     0,,PR6
         2 000425   000033 772000                    QRL     27
         2 000426   000001 625006                    EAX5    1,QL
         2 000427   000000 635015                    EAA     0,X5
         2 000430   000002 771000                    ARL     2
         2 000431   000140 135007                    SBLA    96,DL
         2 000432   200014 236100                    LDQ     DEL_END_KEY$,,AUTO
         2 000433   200042 757100                    STAQ    FPT_DELREC+4,,AUTO
         2 000434   000467 710000 2                  TRA     s:5052

     2186     5035    5                  CASE (%ORG_KEYED);

     2187     5036    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY);

   5036  2 000435   200014 476500                    LDP6    DEL_END_KEY$,,AUTO
         2 000436   600000 236100                    LDQ     0,,PR6
         2 000437   000033 772000                    QRL     27
         2 000440   000001 625006                    EAX5    1,QL
         2 000441   000000 635015                    EAA     0,X5
         2 000442   000002 771000                    ARL     2
         2 000443   000140 135007                    SBLA    96,DL
         2 000444   200014 236100                    LDQ     DEL_END_KEY$,,AUTO
         2 000445   200042 757100                    STAQ    FPT_DELREC+4,,AUTO
         2 000446   000467 710000 2                  TRA     s:5052

     2188     5037    5                  CASE (%ORG_INDEXED);

     2189     5038    5                    FPT_DELREC.LKEY_ = VECTOR(DEL$END_KEY.BYTES);

   5038  2 000447   200014 476500                    LDP6    DEL_END_KEY$,,AUTO
         2 000450   600000 236100                    LDQ     0,,PR6
         2 000451   000033 772000                    QRL     27
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:285  
         2 000452   000064 737000                    LLS     52
         2 000453   000140 135007                    SBLA    96,DL
         2 000454   200014 236100                    LDQ     DEL_END_KEY$,,AUTO
         2 000455   200000 036007                    ADLQ    65536,DL
         2 000456   200042 757100                    STAQ    FPT_DELREC+4,,AUTO
         2 000457   000467 710000 2                  TRA     s:5052

     2190     5039    5                  CASE (ELSE);

     2191     5040    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5040  2 000460   200003 236100                    LDQ     @PORT,,AUTO
         2 000461   000032 036003                    ADLQ    26,DU
         2 000462   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000463   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000464   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000465   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000466   000000 011000                    NOP     0

     2192     5041    5                  END;

     2193     5042    4                 END;

     2194     5043    3              END;

     2195     5044
     2196     5045
     2197     5046                /*
     2198     5047                *   Set up FPT_PRECORD to KEYR into VD_STATIC_TEMP.
     2199     5048                *   We set this up even if we don't have to PRECORD to get
     2200     5049                *       the start key, 'cause after the DELREC we'll have to
     2201     5050                *       PRECORD to find out where the DCB is positioned.
     2202     5051                */
     2203     5052    3           DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5052  2 000467   200003 470500                    LDP0    @PORT,,AUTO
         2 000470   000032 220100                    LDX0    26,,PR0
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:286  
         2 000471   000004 100003                    CMPX0   4,DU
         2 000472   000474 602010 2                  TNC     s:5052+5,X0
         2 000473   000522 710000 2                  TRA     s:5061
         2 000474   000522 710000 2                  TRA     s:5061
         2 000475   000500 710000 2                  TRA     s:5054
         2 000476   000504 710000 2                  TRA     s:5056
         2 000477   000507 710000 2                  TRA     s:5058

     2204     5053    3            CASE (%ORG_CONSEC);

     2205     5054    3              FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_START_NUM);

   5054  2 000500   777640 235007                    LDA     -96,DL
         2 000501   000030 236000 1                  LDQ     STATIC_TEMP_START$
         2 000502   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000503   000531 710000 2                  TRA     s:5069

     2206     5055    3            CASE (%ORG_KEYED);

     2207     5056    3              FPT_PRECORD.KEY_ = VECTOR(VD_STATIC_TEMP.START_KEY);

   5056  2 000504   000014 237000 3                  LDAQ    12
         2 000505   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000506   000531 710000 2                  TRA     s:5069

     2208     5057    3            CASE (%ORG_INDEXED);

     2209     5058    3              FIXED_KEY_LEN = PORT$DCB.KEYL#;

   5058  2 000507   200012 471500                    LDP1    PORT_DCB$,,AUTO
         2 000510   100036 236100                    LDQ     30,,PR1
         2 000511   000011 772000                    QRL     9
         2 000512   000777 376007                    ANQ     511,DL
         2 000513   200007 756100                    STQ     FIXED_KEY_LEN,,AUTO

     2210     5059    3              FPT_PRECORD.KEY_ = VECTOR(STATIC$TEMP_START_FIXED.BYTES);

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:287  
   5059  2 000514   200007 235100                    LDA     FIXED_KEY_LEN,,AUTO
         2 000515   000020 735000                    ALS     16
         2 000516   000140 135007                    SBLA    96,DL
         2 000517   000030 236000 1                  LDQ     STATIC_TEMP_START$
         2 000520   200026 757100                    STAQ    FPT_PRECORD+2,,AUTO
         2 000521   000531 710000 2                  TRA     s:5069

     2211     5060    3            CASE (ELSE);

     2212     5061    3              CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5061  2 000522   200003 236100                    LDQ     @PORT,,AUTO
         2 000523   000032 036003                    ADLQ    26,DU
         2 000524   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000525   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000526   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000527   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000530   000000 011000                    NOP     0

     2213     5062    3            END;

     2214     5063
     2215     5064
     2216     5065                /*
     2217     5066                *   Resolve the start-location of the range to a record key,
     2218     5067                *       and setup FPT_DELREC's start-key.
     2219     5068                */
     2220     5069    2           IF RANGE.START = %CLEAR THEN

   5069  2 000531   200004 470500                    LDP0    @RANGE,,AUTO
         2 000532   000000 106500                    CMPC    fill='000'O
         2 000533   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
         2 000534   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000535   000651 601000 2                  TNZ     s:5106

     2221     5070    3   FIND_BOF_KEY: DO;

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:288  
   5070  2 000536                       FIND_BOF_KEY null
     2222     5071    3              FPT_DELREC.KEY_ = FPT_PRECORD.KEY_;

   5071  2 000536   200026 237100                    LDAQ    FPT_PRECORD+2,,AUTO
         2 000537   200040 757100                    STAQ    FPT_DELREC+2,,AUTO

     2223     5072    3              FPT_PFIL.V.BOF# = %TRUE;

   5072  2 000540   400000 236007                    LDQ     -131072,DL
         2 000541   200022 256100                    ORSQ    FPT_PFIL+2,,AUTO

     2224     5073    3              PORT.LAST_OP# = %ACCOP_LOCATION;

   5073  2 000542   000002 220003                    LDX0    2,DU
         2 000543   200003 471500                    LDP1    @PORT,,AUTO
         2 000544   100007 740100                    STX0    7,,PR1

     2225     5074    3              CALL M$PFIL (FPT_PFIL)

   5074  2 000545   200020 630500                    EPPR0   FPT_PFIL,,AUTO
         2 000546   440004 713400                    CLIMB   alt,+16388
         2 000547   400000 401760                    pmme    nvectors=1
         2 000550   001220 702000 2                  TSX2    PFIL_FAILED

     2226     5075    3                ALTRET (PFIL_FAILED);
     2227     5076    3              FPT_PRECORD.V.N# = 0;

   5076  2 000551   200033 450100                    STZ     FPT_PRECORD+7,,AUTO

     2228     5077    3              START_BOF_ERR_CODE = %CLEAR;

   5077  2 000552   200016 450100                    STZ     START_BOF_ERR_CODE,,AUTO

     2229     5078    3              CALL M$PRECORD (FPT_PRECORD)

   5078  2 000553   200024 630500                    EPPR0   FPT_PRECORD,,AUTO
         2 000554   440003 713400                    CLIMB   alt,+16387
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:289  
         2 000555   401000 401760                    pmme    nvectors=3
         2 000556   000560 702000 2                  TSX2    s:5080
         2 000557   000564 710000 2                  TRA     s:5082

     2230     5079    4              WHENALTRETURN DO;

     2231     5080    4                 START_BOF_ERR_CODE = B$TCB.ALT$->B$ALT.ERR;

   5080  2 000560   000000 470400 xsym               LDP0    B$TCB$
         2 000561   000000 471500                    LDP1    0,,PR0
         2 000562   100102 236100                    LDQ     66,,PR1
         2 000563   200016 756100                    STQ     START_BOF_ERR_CODE,,AUTO

     2232     5081    4                 END;

     2233     5082    3              IF VD_$$MON_ACC.V# > 10 THEN

   5082  2 000564   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 000565   000012 115007                    CMPA    10,DL
         2 000566   000601 604400 2                  TMOZ    s:5085

     2234     5083    3                 CALL VDG$MACC_PDELETE_BOF_KEY (FPT_PRECORD.V.DCB#,

   5083  2 000567   200016 630500                    EPPR0   START_BOF_ERR_CODE,,AUTO
         2 000570   200054 450500                    STP0    VD_ERR$+4,,AUTO
         2 000571   200026 631500                    EPPR1   FPT_PRECORD+2,,AUTO
         2 000572   200053 451500                    STP1    VD_ERR$+3,,AUTO
         2 000573   200032 633500                    EPPR3   FPT_PRECORD+6,,AUTO
         2 000574   200052 453500                    STP3    VD_ERR$+2,,AUTO
         2 000575   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000576   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000577   000000 701000 xent               TSX1    VDG$MACC_PDELETE_BOF_KEY
         2 000600   000000 011000                    NOP     0

     2235     5084    3                   FPT_PRECORD.KEY_, START_BOF_ERR_CODE);
     2236     5085    3              IF START_BOF_ERR_CODE.CODE# = %E$EOF THEN

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:290  
   5085  2 000601   200016 236100                    LDQ     START_BOF_ERR_CODE,,AUTO
         2 000602   377770 376007                    ANQ     131064,DL
         2 000603   000060 116007                    CMPQ    48,DL
         2 000604   000607 601000 2                  TNZ     s:5087

     2237     5086    3                 DO_DELREC = %FALSE;

   5086  2 000605   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000606   000745 710000 2                  TRA     s:5138

     2238     5087    3              ELSE IF START_BOF_ERR_CODE.CODE# ~= 0 THEN

   5087  2 000607   200016 236100                    LDQ     START_BOF_ERR_CODE,,AUTO
         2 000610   377770 316007                    CANQ    131064,DL
         2 000611   001220 601000 2                  TNZ     PFIL_FAILED

     2239     5088    3                    GOTO PRECORD_FAILED;
     2240     5089    4                 ELSE DO;

     2241     5090                         /* Check for empty-file:  KEYR key = "clear" */
     2242     5091    5                    DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5091  2 000612   200003 470500                    LDP0    @PORT,,AUTO
         2 000613   000032 220100                    LDX0    26,,PR0
         2 000614   000004 100003                    CMPX0   4,DU
         2 000615   000617 602010 2                  TNC     s:5091+5,X0
         2 000616   000641 710000 2                  TRA     s:5101
         2 000617   000641 710000 2                  TRA     s:5101
         2 000620   000650 710000 2                  TRA     s:5104
         2 000621   000623 710000 2                  TRA     s:5095
         2 000622   000631 710000 2                  TRA     s:5098

     2243     5092    5                     CASE (%ORG_CONSEC);

     2244     5093    5                       ;   /* No way to tell EOF on consec files */
     2245     5094    5                     CASE (%ORG_KEYED);

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:291  
     2246     5095    5                       IF STATIC$TEMP_START_KEY.LENGTH# = 0 THEN

   5095  2 000623   000030 471400 1                  LDP1    STATIC_TEMP_START$
         2 000624   100000 236100                    LDQ     0,,PR1
         2 000625   777000 316003                    CANQ    -512,DU
         2 000626   000745 601000 2                  TNZ     s:5138

     2247     5096    5                          DO_DELREC = %FALSE;

   5096  2 000627   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000630   000745 710000 2                  TRA     s:5138

     2248     5097    5                     CASE (%ORG_INDEXED);

     2249     5098    5                       IF STATIC$TEMP_START_FIXED = %CLEAR THEN

   5098  2 000631   000030 471400 1                  LDP1    STATIC_TEMP_START$
         2 000632   200007 721100                    LXL1    FIXED_KEY_LEN,,AUTO
         2 000633   000000 106540                    CMPC    fill='000'O
         2 000634   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
         2 000635   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 000636   000745 601000 2                  TNZ     s:5138

     2250     5099    5                          DO_DELREC = %FALSE;

   5099  2 000637   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000640   000745 710000 2                  TRA     s:5138

     2251     5100    5                     CASE (ELSE);

     2252     5101    5                       CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5101  2 000641   200003 236100                    LDQ     @PORT,,AUTO
         2 000642   000032 036003                    ADLQ    26,DU
         2 000643   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000644   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000645   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:292  
         2 000646   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000647   000000 011000                    NOP     0

     2253     5102    5                     END;

     2254     5103    4                    END;

     2255     5104    3              END FIND_BOF_KEY;

   5104  2 000650   000745 710000 2                  TRA     s:5138

     2256     5105    3           ELSE DO;

     2257     5106    3              IF RANGE.START.EOF THEN

   5106  2 000651   000010 236100                    LDQ     8,,PR0
         2 000652   400000 316007                    CANQ    -131072,DL
         2 000653   000656 600000 2                  TZE     s:5117

     2258     5107    3                 DO_DELREC = %FALSE;       /* Nothing to delete */

   5107  2 000654   200011 450100                    STZ     DO_DELREC,,AUTO
         2 000655   000745 710000 2                  TRA     s:5138

     2259     5108    4              ELSE DO;

     2260     5109                      %GETKEY (KEY=RANGE.START.KEY, INDX="%(LVL_EXT_REC-1)",
     2261     5110                      PTR=DEL_START_KEY$);

   5117  2 000656   000000 720100                    LXL0    0,,PR0
         2 000657   000002 100003                    CMPX0   2,DU
         2 000660   000665 601000 2                  TNZ     s:5117+7

   5117  2 000661   000001 471500                    LDP1    1,,PR0
         2 000662   100002 633500                    EPPR3   2,,PR1
         2 000663   200013 453500                    STP3    DEL_START_KEY$,,AUTO
         2 000664   000670 710000 2                  TRA     s:5120
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:293  

   5117  2 000665   200004 236100                    LDQ     @RANGE,,AUTO
         2 000666   000001 036003                    ADLQ    1,DU
         2 000667   200013 756100                    STQ     DEL_START_KEY$,,AUTO

     2262     5120    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5120  2 000670   200003 471500                    LDP1    @PORT,,AUTO
         2 000671   100032 221100                    LDX1    26,,PR1
         2 000672   000004 101003                    CMPX1   4,DU
         2 000673   000675 602011 2                  TNC     s:5120+5,X1
         2 000674   000736 710000 2                  TRA     s:5128
         2 000675   000736 710000 2                  TRA     s:5128
         2 000676   000701 710000 2                  TRA     s:5122
         2 000677   000713 710000 2                  TRA     s:5124
         2 000700   000725 710000 2                  TRA     s:5126

     2263     5121    5                  CASE (%ORG_CONSEC);

     2264     5122    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY);

   5122  2 000701   200013 473500                    LDP3    DEL_START_KEY$,,AUTO
         2 000702   300000 236100                    LDQ     0,,PR3
         2 000703   000033 772000                    QRL     27
         2 000704   000001 622006                    EAX2    1,QL
         2 000705   000000 635012                    EAA     0,X2
         2 000706   000002 771000                    ARL     2
         2 000707   000140 135007                    SBLA    96,DL
         2 000710   200013 236100                    LDQ     DEL_START_KEY$,,AUTO
         2 000711   200040 757100                    STAQ    FPT_DELREC+2,,AUTO
         2 000712   000745 710000 2                  TRA     s:5138

     2265     5123    5                  CASE (%ORG_KEYED);

     2266     5124    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY);

   5124  2 000713   200013 473500                    LDP3    DEL_START_KEY$,,AUTO
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:294  
         2 000714   300000 236100                    LDQ     0,,PR3
         2 000715   000033 772000                    QRL     27
         2 000716   000001 622006                    EAX2    1,QL
         2 000717   000000 635012                    EAA     0,X2
         2 000720   000002 771000                    ARL     2
         2 000721   000140 135007                    SBLA    96,DL
         2 000722   200013 236100                    LDQ     DEL_START_KEY$,,AUTO
         2 000723   200040 757100                    STAQ    FPT_DELREC+2,,AUTO
         2 000724   000745 710000 2                  TRA     s:5138

     2267     5125    5                  CASE (%ORG_INDEXED);

     2268     5126    5                    FPT_DELREC.KEY_ = VECTOR(DEL$START_KEY.BYTES);

   5126  2 000725   200013 473500                    LDP3    DEL_START_KEY$,,AUTO
         2 000726   300000 236100                    LDQ     0,,PR3
         2 000727   000033 772000                    QRL     27
         2 000730   000064 737000                    LLS     52
         2 000731   000140 135007                    SBLA    96,DL
         2 000732   200013 236100                    LDQ     DEL_START_KEY$,,AUTO
         2 000733   200000 036007                    ADLQ    65536,DL
         2 000734   200040 757100                    STAQ    FPT_DELREC+2,,AUTO
         2 000735   000745 710000 2                  TRA     s:5138

     2269     5127    5                  CASE (ELSE);

     2270     5128    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5128  2 000736   200003 236100                    LDQ     @PORT,,AUTO
         2 000737   000032 036003                    ADLQ    26,DU
         2 000740   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000741   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000742   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000743   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000744   000000 011000                    NOP     0

     2271     5129    5                  END;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:295  

     2272     5130    4                 END;

     2273     5131    3              END;

     2274     5132
     2275     5133
     2276     5134                /*
     2277     5135                *   Prepare to reposition the port.
     2278     5136                */
     2279     5137
     2280     5138    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)

   5138  2 000745   200003 236100                    LDQ     @PORT,,AUTO
         2 000746   000012 036003                    ADLQ    10,DU
         2 000747   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 000750   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000751   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000752   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         2 000753   001246 702000 2                  TSX2    OALLOC_FAILED

     2281     5139    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2282     5140                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=%LVL_EXT_REC);

   5147  2 000754   200003 470500                    LDP0    @PORT,,AUTO
         2 000755   000034 720100                    LXL0    28,,PR0
         2 000756   000002 100003                    CMPX0   2,DU
         2 000757   000771 601000 2                  TNZ     s:5148+2

   5147  2 000760   000035 471500                    LDP1    29,,PR0
         2 000761   200052 451500                    STP1    VD_ERR$+2,,AUTO
         2 000762   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000763   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000764   000000 701000 xent               TSX1    VDG$OFREE
         2 000765   000767 702000 2                  TSX2    s:5148
         2 000766   000771 710000 2                  TRA     s:5148+2

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:296  
   5148  2 000767   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 000770   000000 702211                    TSX2  ! 0,X1

   5148  2 000771   200003 470500                    LDP0    @PORT,,AUTO
         2 000772   000034 450100                    STZ     28,,PR0
         2 000773   000035 450100                    STZ     29,,PR0

     2283     5150    3           IF PORT.LEVEL.DATA$ (%LVL_EXT_REC) ~= ADDR(NIL) THEN DO;

   5150  2 000774   000036 236100                    LDQ     30,,PR0
         2 000775   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000776   001010 600000 2                  TZE     s:5157

     2284     5151    3              CALL VDG$OFREE (PORT.LEVEL.DATA$ (%LVL_EXT_REC) -> VD$BUFFER)

   5151  2 000777   000036 471500                    LDP1    30,,PR0
         2 001000   200052 451500                    STP1    VD_ERR$+2,,AUTO
         2 001001   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001002   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001003   000000 701000 xent               TSX1    VDG$OFREE
         2 001004   001246 702000 2                  TSX2    OALLOC_FAILED

     2285     5152    3                ALTRET (OFREE_FAILED);
     2286     5153    3              PORT.LEVEL.DATA$ (%LVL_EXT_REC) = ADDR(NIL);

   5153  2 001005   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001006   200003 470500                    LDP0    @PORT,,AUTO
         2 001007   000036 756100                    STQ     30,,PR0

     2287     5154    3              END;

     2288     5155
     2289     5156
     2290     5157    2           IF DO_DELREC THEN

   5157  2 001010   200011 234100                    SZN     DO_DELREC,,AUTO
         2 001011   001120 605000 2                  TPL     JUST_POSITION_PORT
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:297  

     2291     5158    3   DELREC_AND_POSITION_PORT: DO;

   5158  2 001012                       DELREC_AND_* null
     2292     5159    3              PORT.LAST_OP# = %ACCOP_DELETE;

   5159  2 001012   000006 220003                    LDX0    6,DU
         2 001013   000007 740100                    STX0    7,,PR0

     2293     5160    3              IF VD_$$MON_ACC.V# > 10 THEN

   5160  2 001014   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001015   000012 115007                    CMPA    10,DL
         2 001016   001031 604400 2                  TMOZ    s:5163

     2294     5161    3                 CALL VDG$MACC_PDELETE_DELREC (FPT_DELREC.V.DCB#,

   5161  2 001017   200042 631500                    EPPR1   FPT_DELREC+4,,AUTO
         2 001020   200054 451500                    STP1    VD_ERR$+4,,AUTO
         2 001021   200040 633500                    EPPR3   FPT_DELREC+2,,AUTO
         2 001022   200053 453500                    STP3    VD_ERR$+3,,AUTO
         2 001023   200046 634500                    EPPR4   FPT_DELREC+8,,AUTO
         2 001024   200052 454500                    STP4    VD_ERR$+2,,AUTO
         2 001025   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001026   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001027   000000 701000 xent               TSX1    VDG$MACC_PDELETE_DELREC
         2 001030   000000 011000                    NOP     0

     2295     5162    3                   FPT_DELREC.KEY_, FPT_DELREC.LKEY_);
     2296     5163    3              CALL M$DELREC (FPT_DELREC)

   5163  2 001031   200036 630500                    EPPR0   FPT_DELREC,,AUTO
         2 001032   440002 713400                    CLIMB   alt,+16386
         2 001033   401400 401760                    pmme    nvectors=4
         2 001034   001220 702000 2                  TSX2    PFIL_FAILED

     2297     5164    3                ALTRET (DELREC_FAILED);
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:298  
     2298     5165    3              COUNT = PORT$DCB.ARS#;

   5165  2 001035   200012 470500                    LDP0    PORT_DCB$,,AUTO
         2 001036   200006 471500                    LDP1    @COUNT,,AUTO
         2 001037   000000 235100                    LDA     0,,PR0
         2 001040   100000 755100                    STA     0,,PR1

     2299     5166                   /*
     2300     5167                   *   Since we did the M$DELREC, we can just M$PRECORD to find
     2301     5168                   *       out where the DCB is positioned.  (FPT_PRECORD should
     2302     5169                   *       still be setup to read key into VD_STATIC_TEMP.START.)
     2303     5170                   */
     2304     5171    3              FPT_PRECORD.V.N# = 0;

   5171  2 001041   200033 450100                    STZ     FPT_PRECORD+7,,AUTO

     2305     5172    3              ERR_CODE = %CLEAR;

   5172  2 001042   200015 450100                    STZ     ERR_CODE,,AUTO

     2306     5173    3              PORT.LAST_OP# = %ACCOP_LOCATION;

   5173  2 001043   000002 220003                    LDX0    2,DU
         2 001044   200003 473500                    LDP3    @PORT,,AUTO
         2 001045   300007 740100                    STX0    7,,PR3

     2307     5174    3              CALL M$PRECORD (FPT_PRECORD)

   5174  2 001046   200024 630500                    EPPR0   FPT_PRECORD,,AUTO
         2 001047   440003 713400                    CLIMB   alt,+16387
         2 001050   401000 401760                    pmme    nvectors=3
         2 001051   001053 702000 2                  TSX2    s:5176
         2 001052   001057 710000 2                  TRA     s:5178

     2308     5175    4              WHENALTRETURN DO;

     2309     5176    4                 ERR_CODE = B$TCB.ALT$->B$ALT.ERR;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:299  

   5176  2 001053   000000 470400 xsym               LDP0    B$TCB$
         2 001054   000000 471500                    LDP1    0,,PR0
         2 001055   100102 236100                    LDQ     66,,PR1
         2 001056   200015 756100                    STQ     ERR_CODE,,AUTO

     2310     5177    4                 END;

     2311     5178    3              IF VD_$$MON_ACC.V# > 10 THEN

   5178  2 001057   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 001060   000012 115007                    CMPA    10,DL
         2 001061   001074 604400 2                  TMOZ    s:5181

     2312     5179    3                 CALL VDG$MACC_PDELETE_DCB_POS (FPT_PRECORD.V.DCB#,

   5179  2 001062   200015 630500                    EPPR0   ERR_CODE,,AUTO
         2 001063   200054 450500                    STP0    VD_ERR$+4,,AUTO
         2 001064   200026 631500                    EPPR1   FPT_PRECORD+2,,AUTO
         2 001065   200053 451500                    STP1    VD_ERR$+3,,AUTO
         2 001066   200032 633500                    EPPR3   FPT_PRECORD+6,,AUTO
         2 001067   200052 453500                    STP3    VD_ERR$+2,,AUTO
         2 001070   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001071   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001072   000000 701000 xent               TSX1    VDG$MACC_PDELETE_DCB_POS
         2 001073   000000 011000                    NOP     0

     2313     5180    3                   FPT_PRECORD.KEY_, ERR_CODE);
     2314     5181    3              CALL VDG$BUILD_LOCATION (ERR_CODE, VD_STATIC_TEMP.START_KEY,

   5181  2 001074   200003 236100                    LDQ     @PORT,,AUTO
         2 001075   000012 036003                    ADLQ    10,DU
         2 001076   200057 756100                    STQ     VD_ERR$+7,,AUTO
         2 001077   200007 630500                    EPPR0   FIXED_KEY_LEN,,AUTO
         2 001100   200056 450500                    STP0    VD_ERR$+6,,AUTO
         2 001101   200003 236100                    LDQ     @PORT,,AUTO
         2 001102   000013 036000 3                  ADLQ    11
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:300  
         2 001103   200055 756100                    STQ     VD_ERR$+5,,AUTO
         2 001104   200003 236100                    LDQ     @PORT,,AUTO
         2 001105   000032 036003                    ADLQ    26,DU
         2 001106   200054 756100                    STQ     VD_ERR$+4,,AUTO
         2 001107   000015 236000 3                  LDQ     13
         2 001110   200053 756100                    STQ     VD_ERR$+3,,AUTO
         2 001111   200015 631500                    EPPR1   ERR_CODE,,AUTO
         2 001112   200052 451500                    STP1    VD_ERR$+2,,AUTO
         2 001113   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001114   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001115   000000 701000 xent               TSX1    VDG$BUILD_LOCATION
         2 001116   001246 702000 2                  TSX2    OALLOC_FAILED

     2315     5182    3                PORT.LEVEL.ORG# (%LVL_EXT_REC),
     2316     5183    3                PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
     2317     5184    3                PORT.CURRENT)
     2318     5185    3                ALTRET (BUILD_LOCATION_FAILED);
     2319     5186    3              END DELREC_AND_POSITION_PORT;

   5186  2 001117   001216 710000 2                  TRA     s:5229

     2320     5187    2           ELSE
     2321     5188    3   JUST_POSITION_PORT: DO;

   5188  2 001120                       JUST_POSITI* null
     2322     5189                   /*
     2323     5190                   *   If we didn't do the M$DELREC, it's due to one of two things:
     2324     5191                   *     1. The file is empty:  set port position to EOF.
     2325     5192                   *  or 2. RANGE showed nothing to delete:  BOF thru BOF or
     2326     5193                   *           EOF thru EOF.  If RANGE.END = EOF, set port position
     2327     5194                   *           to EOF.  If RANGE.END = BOF, then .START must have
     2328     5195                   *           been BOF too, and we've already got the key of
     2329     5196                   *           the first record in the file (if any) in
     2330     5197                   *           VD_STATIC_TEMP.START_KEY.
     2331     5198                   */
     2332     5199
     2333     5200    4              IF RANGE.ENDD ~= %CLEAR THEN DO;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:301  

   5200  2 001120   200004 471500                    LDP1    @RANGE,,AUTO
         2 001121   000000 106500                    CMPC    fill='000'O
         2 001122   100011 000044                    ADSC9   9,,PR1                   cn=0,n=36
         2 001123   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 001124   001130 600000 2                  TZE     s:5205

     2334     5201    4                 PORT.CURRENT.EOF = %TRUE;

   5201  2 001125   400000 236007                    LDQ     -131072,DL
         2 001126   000022 256100                    ORSQ    18,,PR0

     2335     5202    4                 END;

   5202  2 001127   001216 710000 2                  TRA     s:5229

     2336     5203    4              ELSE DO;

     2337     5204                      /* Check for empty-file:  KEYR key = "clear" */
     2338     5205    5                 DO CASE (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5205  2 001130   000032 220100                    LDX0    26,,PR0
         2 001131   000004 100003                    CMPX0   4,DU
         2 001132   001134 602010 2                  TNC     s:5205+4,X0
         2 001133   001160 710000 2                  TRA     s:5215
         2 001134   001160 710000 2                  TRA     s:5215
         2 001135   001167 710000 2                  TRA     s:5218
         2 001136   001140 710000 2                  TRA     s:5209
         2 001137   001147 710000 2                  TRA     s:5212

     2339     5206    5                  CASE (%ORG_CONSEC);

     2340     5207    5                    ; /* No way to tell EOF on consec files */
     2341     5208    5                  CASE (%ORG_KEYED);

     2342     5209    5                    IF STATIC$TEMP_START_KEY.LENGTH# = 0 THEN

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:302  
   5209  2 001140   000030 473400 1                  LDP3    STATIC_TEMP_START$
         2 001141   300000 236100                    LDQ     0,,PR3
         2 001142   777000 316003                    CANQ    -512,DU
         2 001143   001167 601000 2                  TNZ     s:5218

     2343     5210    5                       PORT.CURRENT.EOF = %TRUE;

   5210  2 001144   400000 236007                    LDQ     -131072,DL
         2 001145   000022 256100                    ORSQ    18,,PR0
         2 001146   001167 710000 2                  TRA     s:5218

     2344     5211    5                  CASE (%ORG_INDEXED);

     2345     5212    5                    IF STATIC$TEMP_START_FIXED = %CLEAR THEN

   5212  2 001147   000030 473400 1                  LDP3    STATIC_TEMP_START$
         2 001150   200007 721100                    LXL1    FIXED_KEY_LEN,,AUTO
         2 001151   000000 106540                    CMPC    fill='000'O
         2 001152   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1
         2 001153   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 001154   001167 601000 2                  TNZ     s:5218

     2346     5213    5                       PORT.CURRENT.EOF = %TRUE;

   5213  2 001155   400000 236007                    LDQ     -131072,DL
         2 001156   000022 256100                    ORSQ    18,,PR0
         2 001157   001167 710000 2                  TRA     s:5218

     2347     5214    5                  CASE (ELSE);

     2348     5215    5                    CALL VDG$ESCREECH (PORT.LEVEL.ORG# (%LVL_EXT_REC));

   5215  2 001160   200003 236100                    LDQ     @PORT,,AUTO
         2 001161   000032 036003                    ADLQ    26,DU
         2 001162   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 001163   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001164   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:303  
         2 001165   000000 701000 xent               TSX1    VDG$ESCREECH
         2 001166   000000 011000                    NOP     0

     2349     5216    5                  END;

     2350     5217
     2351     5218    5                 IF NOT PORT.CURRENT.EOF THEN DO;

   5218  2 001167   200003 470500                    LDP0    @PORT,,AUTO
         2 001170   000022 236100                    LDQ     18,,PR0
         2 001171   400000 316007                    CANQ    -131072,DL
         2 001172   001216 601000 2                  TNZ     s:5229

     2352     5219    5                    CALL VDG$BUILD_LOCATION (START_BOF_ERR_CODE,

   5219  2 001173   200003 236100                    LDQ     @PORT,,AUTO
         2 001174   000012 036003                    ADLQ    10,DU
         2 001175   200057 756100                    STQ     VD_ERR$+7,,AUTO
         2 001176   200007 631500                    EPPR1   FIXED_KEY_LEN,,AUTO
         2 001177   200056 451500                    STP1    VD_ERR$+6,,AUTO
         2 001200   200003 236100                    LDQ     @PORT,,AUTO
         2 001201   000013 036000 3                  ADLQ    11
         2 001202   200055 756100                    STQ     VD_ERR$+5,,AUTO
         2 001203   200003 236100                    LDQ     @PORT,,AUTO
         2 001204   000032 036003                    ADLQ    26,DU
         2 001205   200054 756100                    STQ     VD_ERR$+4,,AUTO
         2 001206   000015 236000 3                  LDQ     13
         2 001207   200053 756100                    STQ     VD_ERR$+3,,AUTO
         2 001210   200016 633500                    EPPR3   START_BOF_ERR_CODE,,AUTO
         2 001211   200052 453500                    STP3    VD_ERR$+2,,AUTO
         2 001212   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001213   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001214   000000 701000 xent               TSX1    VDG$BUILD_LOCATION
         2 001215   001246 702000 2                  TSX2    OALLOC_FAILED

     2353     5220    5                      VD_STATIC_TEMP.START_KEY, PORT.LEVEL.ORG# (%LVL_EXT_REC),
     2354     5221    5                      PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC), FIXED_KEY_LEN,
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:304  
     2355     5222    5                      PORT.CURRENT)
     2356     5223    5                      ALTRET (BUILD_LOCATION_FAILED);
     2357     5224    5                    END;

     2358     5225    4                 END;

     2359     5226    3              END JUST_POSITION_PORT;

     2360     5227
     2361     5228
     2362     5229    2           RETURN;

   5229  2 001216   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 001217   000001 702211                    TSX2  ! 1,X1

   5223  2 001220                       PFIL_FAILED  null
   5223  2 001220                       PRECORD_FAI* null
   5223  2 001220                       DELREC_FAIL* null
     2363     5230
     2364     5231
     2365     5232
     2366     5233    2   PFIL_FAILED: ;
     2367     5234    2   PRECORD_FAILED: ;
     2368     5235    2   DELREC_FAILED: ;
     2369     5236    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5236  2 001220   200050 630500                    EPPR0   VD_ERR$,,AUTO
         2 001221   200053 450500                    STP0    VD_ERR$+3,,AUTO
         2 001222   000016 236000 3                  LDQ     14
         2 001223   200052 756100                    STQ     VD_ERR$+2,,AUTO
         2 001224   200052 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 001225   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001226   000000 701000 xent               TSX1    VDG$OALLOC
         2 001227   001246 702000 2                  TSX2    OALLOC_FAILED

     2370     5237    2             ALTRET (OALLOC_FAILED);
     2371     5238    2           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:305  

   5238  2 001230   000000 470400 xsym               LDP0    B$TCB$
         2 001231   000000 471500                    LDP1    0,,PR0
         2 001232   100102 236100                    LDQ     66,,PR1
         2 001233   200050 473500                    LDP3    VD_ERR$,,AUTO
         2 001234   300002 756100                    STQ     2,,PR3

     2372     5239    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5239  2 001235   000003 220003                    LDX0    3,DU
         2 001236   200050 471500                    LDP1    VD_ERR$,,AUTO
         2 001237   100003 740100                    STX0    3,,PR1

     2373     5240    2           VD$ERR.DCB# = PORT.DCB#;

   5240  2 001240   200003 471500                    LDP1    @PORT,,AUTO
         2 001241   100004 721100                    LXL1    4,,PR1
         2 001242   200050 473500                    LDP3    VD_ERR$,,AUTO
         2 001243   300004 741100                    STX1    4,,PR3

     2374     5241    2           ALTRETURN;

   5241  2 001244   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 001245   000000 702211                    TSX2  ! 0,X1

   5240  2 001246                       OALLOC_FAIL* null
   5240  2 001246                       OFREE_FAILED null
   5240  2 001246                       OCLEAR_LOCA* null
   5240  2 001246                       BUILD_LOCAT* null
     2375     5242
     2376     5243
     2377     5244    2   OALLOC_FAILED: ;
     2378     5245    2   OFREE_FAILED: ;
     2379     5246    2   OCLEAR_LOCATION_FAILED: ;
     2380     5247    2   BUILD_LOCATION_FAILED: ;
     2381     5248    2           ALTRETURN;

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:306  
   5248  2 001246   200010 221300                    LDX1  ! FIXED_KEY_LEN+1,,AUTO
         2 001247   000000 702211                    TSX2  ! 0,X1
     2382     5249
     2383     5250    2   END DELETE_EXTERNAL;
     2384     5251
     2385     5252    1   END VDA$PDELETE;

PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:307  
--  Include file information  --

   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$PDELETE.
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:308  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$PDELETE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/d STRC(360)   r     1 CONST_FPT_DELREC           0-0-0/d STRC(144)   r     1 CONST_FPT_PFIL
     4-0-0/d STRC(360)   r     1 CONST_FPT_PRECORD         31-0-0/w PTR         r     1 STATIC_TEMP_END$
    30-0-0/w PTR         r     1 STATIC_TEMP_START$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @COUNT                     5-0-0/w PTR         r     1 @DEL_LEVEL
     3-0-0/w PTR         r     1 @PORT                      4-0-0/w PTR         r     1 @RANGE
    *0-0-0/w SBIN        r     1 COUNT                     14-0-0/w PTR         r     1 DEL_END$
    14-0-0/w PTR         r     1 DEL_END_KEY$              *0-0-0/w SBIN        r     1 DEL_LEVEL
    12-0-0/w PTR         r     1 DEL_PARENT$               13-0-0/w PTR         r     1 DEL_START$
    13-0-0/w PTR         r     1 DEL_START_KEY$            11-0-0/w BIT         r     1 DO_DELREC
    15-0-0/w STRC        r     1 ERR_CODE                   7-0-0/w SBIN        r     1 FIXED_KEY_LEN
    36-0-0/d STRC(360)   r     1 FPT_DELREC                20-0-0/d STRC(144)   r     1 FPT_PFIL
    24-0-0/d STRC(360)   r     1 FPT_PRECORD               *0-0-0/w STRC(1944)  r     1 PORT
    12-0-0/w PTR         r     1 PORT_DCB$                 *0-0-0/w STRC(648)   r     1 RANGE
    16-0-0/w STRC        r     1 START_BOF_ERR_CODE        50-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(4608)  r     1 VD_STATIC_TEMP

  ****  BASED and DCB variables  ****
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:309  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(468)   r     1 DEL$END                    0-0-0/w ASTR(9)     r     1 DEL$END_KEY
     0-0-0/w STRC(468)   r     1 DEL$PARENT                 0-0-0/w STRC(468)   r     1 DEL$START
     0-0-0/w ASTR(9)     r     1 DEL$START_KEY              0-0-0/d ASTR(3528)  r     1 PORT$DCB
     0-0-0/c ASTR(0)     r     1 STATIC$TEMP_END_FIXED
     0-0-0/w SBIN        r     1 STATIC$TEMP_END_NUM
     0-0-0/c ASTR(0)     r     1 STATIC$TEMP_START_FIXED
     0-0-0/w ASTR(9)     r     1 STATIC$TEMP_START_KEY
     0-0-0/w SBIN        r     1 STATIC$TEMP_START_NUM
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$PDELETE requires 680 words for executable code.
   Procedure VDA$PDELETE requires 48 words of local(AUTO) storage.

    No errors detected in file VDA$PORT.:VDA5TSI    .
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:310  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:311  
          MINI XREF LISTING

B$ALT.CODE
      4008**DCL      4008--REDEF    4009--REDEF    4009--REDEF
B$ALT.ERR
      4009**DCL      5007>>ASSIGN   5080>>ASSIGN   5176>>ASSIGN   5238>>ASSIGN
B$ALT.ERR.ERR#
      4010**DCL      4010--REDEF
B$ALT.EVID
      4009**DCL      4009--REDEF    4009--REDEF
B$TCB.ALT$
      4004**DCL      5007>>ASSIGN   5080>>ASSIGN   5176>>ASSIGN   5238>>ASSIGN
B$TCB$
      3862**DCL      4004--IMP-PTR  5007>>ASSIGN   5080>>ASSIGN   5176>>ASSIGN   5238>>ASSIGN
BUILD_LOCATION_FAILED IN PROCEDURE DELETE_EXTERNAL
      5240**LABEL    5181--CALLALT  5219--CALLALT
CONST_FPT_DELREC
      3958**DCL      4976>>ASSIGN
CONST_FPT_DELREC.V
      3961**DCL      3958--DCLINIT
CONST_FPT_PFIL
      3921**DCL      4968>>ASSIGN
CONST_FPT_PFIL.V
      3921**DCL      3921--DCLINIT
CONST_FPT_PRECORD
      3937**DCL      4972>>ASSIGN
CONST_FPT_PRECORD.V
      3939**DCL      3937--DCLINIT
COUNT
      3807**DCL        64--PROC     4472<<ASSIGN   4481<>CALL     4486>>IF       4489>>ASSIGN   4517>>ASSIGN
      4519<>CALL     4964<<ASSIGN   5165<<ASSIGN
DEL$END.BLINK$ IN PROCEDURE DELETE_INTERNAL
      4317**DCL      4512>>ASSIGN   4513<<ASSIGN
DEL$END_KEY IN PROCEDURE DELETE_EXTERNAL
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:312  
      4774**DCL      5034--ASSIGN   5036--ASSIGN
DEL$END_KEY.BYTES IN PROCEDURE DELETE_EXTERNAL
      4784**DCL      5038--ASSIGN
DEL$END_KEY.LENGTH# IN PROCEDURE DELETE_EXTERNAL
      4782**DCL      4784--IMP-SIZ  5034>>ASSIGN   5036>>ASSIGN   5038>>ASSIGN
DEL$PARENT.COUNT# IN PROCEDURE DELETE_INTERNAL
      4188**DCL      4517<<ASSIGN   4517>>ASSIGN   4518>>IF       4519<>CALL
DEL$PARENT.HEAD$ IN PROCEDURE DELETE_INTERNAL
      4188**DCL      4506<<ASSIGN
DEL$PARENT.TAIL$ IN PROCEDURE DELETE_INTERNAL
      4188**DCL      4510<<ASSIGN
DEL$START IN PROCEDURE DELETE_INTERNAL
      4198**DCL      4522<>CALL
DEL$START.BLINK$ IN PROCEDURE DELETE_INTERNAL
      4224**DCL      4505>>IF       4508>>ASSIGN   4510>>ASSIGN   4513>>ASSIGN   4515<<ASSIGN
DEL$START_KEY IN PROCEDURE DELETE_EXTERNAL
      4751**DCL      5122--ASSIGN   5124--ASSIGN
DEL$START_KEY.BYTES IN PROCEDURE DELETE_EXTERNAL
      4761**DCL      5126--ASSIGN
DEL$START_KEY.LENGTH# IN PROCEDURE DELETE_EXTERNAL
      4759**DCL      4761--IMP-SIZ  5122>>ASSIGN   5124>>ASSIGN   5126>>ASSIGN
DELETE_EXTERNAL
      4591**PROC     4025--CALL
DELETE_EXTERNAL_FAILED
      4021**LABEL    4025--CALLALT
DELETE_INTERNAL
      4088**PROC     4022--CALL
DELETE_INTERNAL_FAILED
      4021**LABEL    4022--CALLALT
DELREC_FAILED IN PROCEDURE DELETE_EXTERNAL
      5223**LABEL    5163--CALLALT
DEL_END$ IN PROCEDURE DELETE_INTERNAL
      4094**DCL      4291--IMP-PTR  4483<<ASSIGN   4486>>IF       4506>>ASSIGN   4508>>ASSIGN   4509>>IF
      4512>>ASSIGN   4513>>ASSIGN
DEL_END_KEY$ IN PROCEDURE DELETE_EXTERNAL
      4597**DCL      4774--IMP-PTR  5029<<ASSIGN   5029<<ASSIGN   5034>>ASSIGN   5034>>ASSIGN   5036>>ASSIGN
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:313  
      5036>>ASSIGN   5038>>ASSIGN   5038>>ASSIGN
DEL_LEVEL
      3806**DCL        64--PROC     4017>>IF       4019<>CALL     4478>>ASSIGN   4479>>ASSIGN   4483>>ASSIGN
DEL_PARENT$ IN PROCEDURE DELETE_INTERNAL
      4092**DCL      4105--IMP-PTR  4479<<ASSIGN   4506>>ASSIGN   4510>>ASSIGN   4517>>ASSIGN   4517>>ASSIGN
      4518>>IF       4519>>CALL
DEL_START$ IN PROCEDURE DELETE_INTERNAL
      4093**DCL      4198--IMP-PTR  4478<<ASSIGN   4486>>IF       4505>>IF       4508>>ASSIGN   4510>>ASSIGN
      4513>>ASSIGN   4515>>ASSIGN   4522>>CALL
DEL_START_KEY$ IN PROCEDURE DELETE_EXTERNAL
      4596**DCL      4751--IMP-PTR  5117<<ASSIGN   5117<<ASSIGN   5122>>ASSIGN   5122>>ASSIGN   5124>>ASSIGN
      5124>>ASSIGN   5126>>ASSIGN   5126>>ASSIGN
DO_DELREC IN PROCEDURE DELETE_EXTERNAL
      4594**DCL      4965<<ASSIGN   5009<<ASSIGN   5019<<ASSIGN   5086<<ASSIGN   5096<<ASSIGN   5099<<ASSIGN
      5107<<ASSIGN   5157>>IF
ERR_CODE IN PROCEDURE DELETE_EXTERNAL
      4606**DCL      5007<<ASSIGN   5014<>CALL     5172<<ASSIGN   5176<<ASSIGN   5179<>CALL     5181<>CALL
ERR_CODE.CODE# IN PROCEDURE DELETE_EXTERNAL
      4610**DCL      5008>>IF
FIXED_KEY_LEN
      3971**DCL      4000--IMP-SIZ  4002--IMP-SIZ  4993<<ASSIGN   4994>>ASSIGN   5058<<ASSIGN   5059>>ASSIGN
      5098>>IF       5181<>CALL     5212>>IF       5219<>CALL
FPT_DELREC IN PROCEDURE DELETE_EXTERNAL
      4675**DCL      4976<<ASSIGN   5163<>CALL
FPT_DELREC.KEY_ IN PROCEDURE DELETE_EXTERNAL
      4675**DCL      5071<<ASSIGN   5122<<ASSIGN   5124<<ASSIGN   5126<<ASSIGN   5161<>CALL
FPT_DELREC.LKEY_ IN PROCEDURE DELETE_EXTERNAL
      4677**DCL      4998<<ASSIGN   5034<<ASSIGN   5036<<ASSIGN   5038<<ASSIGN   5161<>CALL
FPT_DELREC.V IN PROCEDURE DELETE_EXTERNAL
      4678**DCL      4977--ASSIGN
FPT_DELREC.V.DCB# IN PROCEDURE DELETE_EXTERNAL
      4679**DCL      4978<<ASSIGN   5161<>CALL
FPT_DELREC.V_ IN PROCEDURE DELETE_EXTERNAL
      4675**DCL      4977<<ASSIGN
FPT_PFIL IN PROCEDURE DELETE_EXTERNAL
      4639**DCL      4968<<ASSIGN   5002<>CALL     5074<>CALL
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:314  
FPT_PFIL.V IN PROCEDURE DELETE_EXTERNAL
      4639**DCL      4969--ASSIGN
FPT_PFIL.V.BOF# IN PROCEDURE DELETE_EXTERNAL
      4640**DCL      5000<<ASSIGN   5072<<ASSIGN
FPT_PFIL.V.DCB# IN PROCEDURE DELETE_EXTERNAL
      4639**DCL      4970<<ASSIGN
FPT_PFIL.V_ IN PROCEDURE DELETE_EXTERNAL
      4639**DCL      4969<<ASSIGN
FPT_PRECORD IN PROCEDURE DELETE_EXTERNAL
      4654**DCL      4972<<ASSIGN   5005<>CALL     5078<>CALL     5174<>CALL
FPT_PRECORD.KEY_ IN PROCEDURE DELETE_EXTERNAL
      4654**DCL      4989<<ASSIGN   4991<<ASSIGN   4994<<ASSIGN   4998>>ASSIGN   5014<>CALL     5054<<ASSIGN
      5056<<ASSIGN   5059<<ASSIGN   5071>>ASSIGN   5083<>CALL     5179<>CALL
FPT_PRECORD.V IN PROCEDURE DELETE_EXTERNAL
      4656**DCL      4973--ASSIGN
FPT_PRECORD.V.DCB# IN PROCEDURE DELETE_EXTERNAL
      4656**DCL      4974<<ASSIGN   5014<>CALL     5083<>CALL     5179<>CALL
FPT_PRECORD.V.N# IN PROCEDURE DELETE_EXTERNAL
      4660**DCL      5004<<ASSIGN   5076<<ASSIGN   5171<<ASSIGN
FPT_PRECORD.V_ IN PROCEDURE DELETE_EXTERNAL
      4654**DCL      4973<<ASSIGN
M$DELREC
      2441**DCL-ENT  5163--CALL
M$PFIL
      2441**DCL-ENT  5002--CALL     5074--CALL
M$PRECORD
      2443**DCL-ENT  5005--CALL     5078--CALL     5174--CALL
OALLOC_FAILED IN PROCEDURE DELETE_EXTERNAL
      5240**LABEL    5236--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE DELETE_EXTERNAL
      5240**LABEL    5138--CALLALT
OFREE_FAILED IN PROCEDURE DELETE_EXTERNAL
      5240**LABEL    5151--CALLALT
OFREE_FAILED IN PROCEDURE DELETE_INTERNAL
      4526**LABEL    4522--CALLALT
PFIL_FAILED IN PROCEDURE DELETE_EXTERNAL
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:315  
      5223**LABEL    5002--CALLALT  5074--CALLALT
PORT
      3647**DCL        64--PROC     4474<>CALL     4481<>CALL
PORT.CURRENT
      3700**DCL      5138<>CALL     5181<>CALL     5219<>CALL
PORT.CURRENT.EOF
      3716**DCL      4476>>IF       5201<<ASSIGN   5210<<ASSIGN   5213<<ASSIGN   5218>>IF
PORT.DCB#
      3674**DCL      4021>>IF       4966--ASSIGN   4970>>ASSIGN   4974>>ASSIGN   4978>>ASSIGN   5240>>ASSIGN
PORT.EXIST#
      3673**DCL      4017>>IF       4019<>CALL
PORT.LAST_OP#
      3675**DCL      4526<<ASSIGN   5001<<ASSIGN   5073<<ASSIGN   5159<<ASSIGN   5173<<ASSIGN
PORT.LEVEL.DATA$
      3734**DCL      5150>>IF       5151>>CALL     5151>>CALL     5153<<ASSIGN
PORT.LEVEL.INTERNAL$
      3734**DCL      4478>>ASSIGN   4479>>ASSIGN   4483>>ASSIGN
PORT.LEVEL.KEY_TYPE#
      3718**DCL      5181<>CALL     5219<>CALL
PORT.LEVEL.ORG#
      3718**DCL      4987>>DOCASE   4996<>CALL     5032>>DOCASE   5040<>CALL     5052>>DOCASE   5061<>CALL
      5091>>DOCASE   5101<>CALL     5120>>DOCASE   5128<>CALL     5181<>CALL     5205>>DOCASE   5215<>CALL
      5219<>CALL
PORT.LEVEL.SPEC
      3730**DCL      5148<<ASSIGN
PORT.LEVEL.SPEC.REP#
      3732**DCL      5147>>IF
PORT.LEVEL.SPEC.V$
      3732**DCL      5147>>CALL     5147>>CALL
PORT$DCB.ACTPOS IN PROCEDURE DELETE_EXTERNAL
      4719**DCL      4719--REDEF
PORT$DCB.ARS# IN PROCEDURE DELETE_EXTERNAL
      4693**DCL      4693--REDEF    5165>>ASSIGN
PORT$DCB.ATTR IN PROCEDURE DELETE_EXTERNAL
      4712**DCL      4713--REDEF
PORT$DCB.BORROW IN PROCEDURE DELETE_EXTERNAL
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:316  
      4727**DCL      4727--REDEF    4727--REDEF    4727--REDEF
PORT$DCB.DCBNAME.L IN PROCEDURE DELETE_EXTERNAL
      4741**DCL      4741--IMP-SIZ
PORT$DCB.EOMCHAR# IN PROCEDURE DELETE_EXTERNAL
      4697**DCL      4697--REDEF
PORT$DCB.FLDID IN PROCEDURE DELETE_EXTERNAL
      4722**DCL      4722--REDEF
PORT$DCB.FORM$ IN PROCEDURE DELETE_EXTERNAL
      4716**DCL      4716--REDEF
PORT$DCB.FSECT IN PROCEDURE DELETE_EXTERNAL
      4732**DCL      4732--REDEF
PORT$DCB.FSN# IN PROCEDURE DELETE_EXTERNAL
      4709**DCL      4709--REDEF    4709--REDEF    4710--REDEF
PORT$DCB.HEADER$ IN PROCEDURE DELETE_EXTERNAL
      4715**DCL      4715--REDEF
PORT$DCB.IXTNSIZE# IN PROCEDURE DELETE_EXTERNAL
      4713**DCL      4713--REDEF
PORT$DCB.KEYL# IN PROCEDURE DELETE_EXTERNAL
      4710**DCL      4993>>ASSIGN   5058>>ASSIGN
PORT$DCB.LASTSTA$ IN PROCEDURE DELETE_EXTERNAL
      4702**DCL      4702--REDEF
PORT$DCB.LVL IN PROCEDURE DELETE_EXTERNAL
      4728**DCL      4728--REDEF
PORT$DCB.NAME#.C IN PROCEDURE DELETE_EXTERNAL
      4703**DCL      4703--REDEF
PORT$DCB.NOEOF IN PROCEDURE DELETE_EXTERNAL
      4725**DCL      4725--REDEF
PORT$DCB.NRECS# IN PROCEDURE DELETE_EXTERNAL
      4714**DCL      4714--REDEF
PORT$DCB.NRECX IN PROCEDURE DELETE_EXTERNAL
      4733**DCL      4733--REDEF
PORT$DCB.OHDR IN PROCEDURE DELETE_EXTERNAL
      4725**DCL      4725--REDEF
PORT$DCB.ORG# IN PROCEDURE DELETE_EXTERNAL
      4708**DCL      4708--REDEF
PORT$DCB.PRECNO IN PROCEDURE DELETE_EXTERNAL
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:317  
      4731**DCL      4731--REDEF
PORT$DCB.RCSZ IN PROCEDURE DELETE_EXTERNAL
      4737**DCL      4737--REDEF
PORT$DCB.RES# IN PROCEDURE DELETE_EXTERNAL
      4704**DCL      4704--REDEF
PORT$DCB.SETX IN PROCEDURE DELETE_EXTERNAL
      4716**DCL      4716--REDEF
PORT$DCB.TAB$ IN PROCEDURE DELETE_EXTERNAL
      4716**DCL      4716--REDEF
PORT$DCB.TDA IN PROCEDURE DELETE_EXTERNAL
      4730**DCL      4731--REDEF
PORT$DCB.WSN# IN PROCEDURE DELETE_EXTERNAL
      4704**DCL      4704--REDEF
PORT_DCB$ IN PROCEDURE DELETE_EXTERNAL
      4595**DCL      4687--IMP-PTR  4966<<ASSIGN   4993>>ASSIGN   5058>>ASSIGN   5165>>ASSIGN
PREAD_FAILED IN PROCEDURE DELETE_INTERNAL
      4526**LABEL    4474--CALLALT  4481--CALLALT
PRECORD_FAILED IN PROCEDURE DELETE_EXTERNAL
      5223**LABEL    5011--GOTO     5088--GOTO
RANGE
      3745**DCL        64--PROC
RANGE.ENDD
      3787**DCL      4481<>CALL     5200>>IF
RANGE.ENDD.EOF
      3803**DCL      4984>>IF
RANGE.ENDD.KEY
      3799**DCL      5018>>IF
RANGE.ENDD.KEY.REP#
      3801**DCL      5029>>IF
RANGE.ENDD.KEY.V$
      3801**DCL      5029>>ASSIGN   5029--ASSIGN
RANGE.START
      3759**DCL      4474<>CALL     5069>>IF
RANGE.START.EOF
      3775**DCL      5106>>IF
RANGE.START.KEY.REP#
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:318  
      3773**DCL      5117>>IF
RANGE.START.KEY.V$
      3773**DCL      5117>>ASSIGN   5117--ASSIGN
START_BOF_ERR_CODE IN PROCEDURE DELETE_EXTERNAL
      4621**DCL      5077<<ASSIGN   5080<<ASSIGN   5083<>CALL     5219<>CALL
START_BOF_ERR_CODE.CODE# IN PROCEDURE DELETE_EXTERNAL
      4625**DCL      5085>>IF       5087>>IF
STATIC$TEMP_END_FIXED.BYTES
      4002**DCL      4994--ASSIGN
STATIC$TEMP_END_NUM
      3998**DCL      4989--ASSIGN
STATIC$TEMP_START_FIXED
      3999**DCL      5098>>IF       5212>>IF
STATIC$TEMP_START_FIXED.BYTES
      4000**DCL      5059--ASSIGN
STATIC$TEMP_START_KEY.LENGTH#
      3990**DCL      3992--IMP-SIZ  5095>>IF       5209>>IF
STATIC$TEMP_START_NUM
      3997**DCL      5054--ASSIGN
STATIC_TEMP_END$
      3967**DCL      3998--IMP-PTR  4001--IMP-PTR  4989>>ASSIGN   4994>>ASSIGN
STATIC_TEMP_START$
      3966**DCL      3982--IMP-PTR  3997--IMP-PTR  3999--IMP-PTR  5054>>ASSIGN   5059>>ASSIGN   5095>>IF
      5098>>IF       5209>>IF       5212>>IF
VD$BUFFER IN PROCEDURE DELETE_EXTERNAL
      4875**DCL      5151<>CALL
VD$BUFFER.LENGTH# IN PROCEDURE DELETE_EXTERNAL
      4901**DCL      4903--IMP-SIZ  5151>>CALL
VD$ERR.DCB# IN PROCEDURE DELETE_EXTERNAL
      4958**DCL      5240<<ASSIGN
VD$ERR.ERR IN PROCEDURE DELETE_EXTERNAL
      4953**DCL      5238<<ASSIGN
VD$ERR.FLAGLEV# IN PROCEDURE DELETE_EXTERNAL
      4958**DCL      5239<<ASSIGN
VD$FILE_NODE.FLINK$ IN PROCEDURE DELETE_INTERNAL
      4410**DCL      4508<<ASSIGN   4512<<ASSIGN
PL6.E3A0      #004=VDA$PDELETE File=VDA$PORT.:VDA5TSI                            FRI 07/04/97 11:08 Page:319  
VD$TEXTC_REMOTE IN PROCEDURE DELETE_EXTERNAL
      4814**DCL      5147<>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE DELETE_EXTERNAL
      4843**DCL      4845--IMP-SIZ  5029--ASSIGN   5117--ASSIGN   5147>>CALL
VDA$PREAD
      3811**DCL-ENT  4474--CALL     4481--CALL
VDG$BUILD_LOCATION
      3815**DCL-ENT  5181--CALL     5219--CALL
VDG$ESCREECH
      3816**DCL-ENT  4019--CALL     4519--CALL     4996--CALL     5040--CALL     5061--CALL     5101--CALL
      5128--CALL     5215--CALL
VDG$MACC_PDELETE_BOF_KEY
      3818**DCL-ENT  5083--CALL
VDG$MACC_PDELETE_DCB_POS
      3820**DCL-ENT  5179--CALL
VDG$MACC_PDELETE_DELREC
      3819**DCL-ENT  5161--CALL
VDG$MACC_PDELETE_EOF_KEY
      3817**DCL-ENT  5014--CALL
VDG$OALLOC
      3812**DCL-ENT  5236--CALL
VDG$OCLEAR_LOCATION
      3814**DCL-ENT  5138--CALL
VDG$OFREE
      3813**DCL-ENT  4522--CALL     5147--CALL     5151--CALL
VD_$$MON_ACC.V#
      3905**DCL      5013>>IF       5082>>IF       5160>>IF       5178>>IF
VD_6E.STATS#
      3856**DCL      4489<<ASSIGN   4489>>ASSIGN
VD_ERR$ IN PROCEDURE DELETE_EXTERNAL
      4683**DCL      4916--IMP-PTR  5236<>CALL     5238>>ASSIGN   5239>>ASSIGN   5240>>ASSIGN
VD_STATIC_TEMP.END_KEY
      3861**DCL      3967--DCLINIT  4991--ASSIGN
VD_STATIC_TEMP.START_KEY
      3860**DCL      3966--DCLINIT  5056--ASSIGN   5181<>CALL     5219<>CALL
