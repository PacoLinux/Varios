VERSION A05

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:1    
        1        1        /*M* VDE$PARSE - Process the ParseTree for a block expression */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDE$PARSE
       12       12            PURPOSE:  Process the ParseTree for a block expression.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDE$PBLOCK_EXPR
       17       17                Parses an entire block expression, turning it into an InTree.
       18       18
       19       19                VDE$PPATTERN
       20       20                Given a T_PATTERN node from the parse tree, will
       21       21                compile the pattern into a VD$PATTERN structure.
       22       22
       23       23                VDE$PPATT_STRING and VDE$PPATT_STRING_EXPR
       24       24                Builds a VD$PATTERN from a pattern string.  This routine is
       25       25                made external so it can call itself recursively.
       26       26
       27       27                VDE$PXUE_EXP
       28       28                Parses string expressions (X$EVAL).  Contains two entry-points:
       29       29                    VDE$PNUMBER evaluates an expression and converts it
       30       30                        to an SBIN word.  Doesn't support $CONTROL-functions
       31       31                        in the expression.
       32       32                    VDE$PSTRING evaluates an expression and converts it
       33       33                        to a set of VD$BUFFERs.  Each call to VDE$PSTRING
       34       34                        returns the next VD$BUFFER for the expression.
       35       35                        Supports $CONTROL-functions in the expression.
       36       36
       37       37                VDE$PNUMERIC_KEY
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:2    
       38       38                Parses numeric keys.  These may be consecutive record
       39       39                numbers or edit keys:  at parse time we don't know which
       40       40                kind of key the user gave us.
       41       41
       42       42                VDE$PFILE_TO_EDIT
       43       43                Parses a fid for a file to edit.  M$FIDs it into constituent parts
       44       44                and builds a VD$FILE_KEY for the fid.  Optionally sets up a VD$RANGE
       45       45                covering the entire file.
       46       46
       47       47                VDE$PREAD_LO_NAME
       48       48                Look up a name in the Locations file.  If found, return a pointer
       49       49                to its VD$BLOCK_DESC (unwinds any indirect representations, like
       50       50                VD$POINTER, or VD$BUFFER containing the VD$BLOCK_DESC, etc).
       51       51
       52       52                VDE$PREAD_NAME_FOR_EVAL
       53       53                When X$EVAL sees a name reference in a string expression,
       54       54                it calls this routine to find the value of the name.
       55       55                This routine reads the Equals *N* and Locations *N* files
       56       56                for the name, and returns its value to X$EVAL.
       57       57
       58       58                VDE$PFUNCTIONS
       59       59                When X$EVAL sees a 6Edit function invocation in a string expression,
       60       60                it calls this routine to compute the value of the function.
       61       61        */
       62       62
       63       63        /*D* NAME: VDE$PBLOCK_EXPR
       64       64            PARAMETERS:
       65       65                PT_BLOCK_EXPR - %PARSE$OUT which is root node of the ParseTree
       66       66                    for the block expression to evaluate.  Must have a
       67       67                    .CODE of either %T_BLOCK_EXPR or %T_STRING_EXPR.
       68       68            INPUT:
       69       69                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       70       70                    Windows internal file.  The Spec for this node points to
       71       71                    the VD$WINDOW_SPEC for the current editing window.  There
       72       72                    must be such a window, tho it needn't be editing anything
       73       73                    yet (no EditBlock, Selecting, or InTree).
       74       74                CURR$WINDOW.OPERAND.INTREE$ must be NIL at entry.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:3    
       75       75                CURR$WINDOW.OPERAND.EDIT_BLOCK$ will be nil if there
       76       76                    is no EditBlock yet; non-nil otherwise.
       77       77                CURR$WINDOW.OPERAND.EVAL$ will be nil if there
       78       78                    is no EditBlock yet; non-nil otherwise.
       79       79                    If non-nil, it's VD$EVAL has the range left by the
       80       80                    VDE$Ixxx routines after evaluating the block expr
       81       81                    of the previous command, with a state of
       82       82                    %EVST_INITIAL.  None of the VDE$Pxxx routines will
       83       83                    refer to this VD$EVAL.
       84       84            OUTPUT:
       85       85                The current window will be modified to reflect the new block
       86       86                    expression.  Specifically:
       87       87                    o Ptr to the InTree for the range of the block
       88       88                        expression.  This InTree will contain at least
       89       89                        a VD$IT_BLOCK_EXPR node.  It's .OPTIONS will be
       90       90                        filled in, either from user input or from defaults.
       91       91                    o If this block expression legally specifies a different
       92       92                        domain than the window's current EditBlock, then
       93       93                        IT_BLOCK_EXPR.DOMAINN will be non-%CLEAR.
       94       94                    o If this block expression has moved beyond the
       95       95                        DOMAIN_OPERAND portion of the block expression
       96       96                        syntax, then IT_BLOCK_EXPR.SELECTS$ will be non-nil.
       97       97                    The window in this form is ready for VDE$IOPEN.
       98       98                If any recoverable errors are found, the entire InTree will be
       99       99                    freed.
      100      100            DESCRIPTION:
      101      101                PT_BLOCK_EXPR is either a %T_STRING_EXPR node or a
      102      102                %T_BLOCK_EXPR node with one or more children, as shown below:
      103      103
      104      104                STRING_EXPR
      105      105                    |
      106      106                 XUE_EXP
      107      107
      108      108                or:
      109      109
      110      110                                       BLOCK_EXPR
      111      111                                            |
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:4    
      112      112                   ----------------------------------------------------->
      113      113                   |           |            |
      114      114                PROTECT    STRUCTURE      one of:
      115      115                   |           |         o NEXT
      116      116                  DONT        name       o PREVIOUS
      117      117                \__in either order__/    o LO_NAME
      118      118                                              |
      119      119                                             name
      120      120
      121      121                                           { NEW }
      122      122                                         o { OLD }  FILE_FID
      123      123                                           { ANY }     |
      124      124                                                      fid
      125      125
      126      126
      127      127                >----------------------------------------------------
      128      128                   |          |          |             |            |
      129      129                MOVEMENT    one of:   MOVEMENT   SELECT_CLAUSE   KEY_INCR
      130      130                           o THRU                      |
      131      131                           o ADJUST                  REPEAT
      132      132                          \__________________/         |
      133      133                             may be repeated      STRING_EXPR
      134      134                \                                            /
      135      135                 \__________________________________________/
      136      136                            may be repeated
      137      137
      138      138                o All of the child-nodes of T_BLOCK_EXPR are optional,
      139      139                    except that at least one will always be present if
      140      140                    T_BLOCK_EXPR is present.
      141      141                o The MOVEMENT's above may be repeated any number of times.
      142      142                o If the MOVEMENT's following THRU and ADJUST are present,
      143      143                    then the THRU or ADJUST nodes must precede them.
      144      144                o The DONT child of PROTECT is optional.
      145      145                o The REPEAT child of SELECT_CLAUSE is optional.  If present,
      146      146                    its STRING_EXPR child is optional.
      147      147
      148      148                Procedure:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:5    
      149      149                Setup the global data refs:
      150      150                    CURR$WINDOW - VD$WINDOW_SPEC for the current editing window.
      151      151                    EDIT$BLOCK - VD$BLOCK_DESC for the window's EditBlock (if any).
      152      152                Allocate an IT_BLOCK_EXPR node.
      153      153                If PT_BLOCK_EXPR is actually a %T_STRING_EXPR node:
      154      154                    Call XUE$EVAL to evaluate the XUE_EXP expression into
      155      155                        record buffers, and write them to the Scratch Source
      156      156                        file.
      157      157                    Build an IT_OPERAND node referring to the file just
      158      158                        written, and attach it to the InTree.
      159      159                    Load IT$BLOCK_EXPR.DOMAINN and .OPTIONS with the info on
      160      160                        the Scratch Source file.
      161      161                    Return.
      162      162
      163      163                Otherwise, loop thru the children of the PT_BLOCK_EXPR node,
      164      164                    processing the nodes as they appear:
      165      165                o For any processing options (ie, PROTECT, STRUCTURE, NEW,
      166      166                    OLD, ANY):
      167      167                    Set the appropriate value or flag in the IT$BLOCK_EXPR
      168      168                    node.
      169      169                o For any DOMAIN_OPERAND (ie, NEXT, PREVIOUS, FILE_FID,
      170      170                    LO_NAME referring to a different file):
      171      171                    Guarantee that both an IT_SELECT and an IT_ADJUST
      172      172                    node is available.  Call DOMAIN_OPERAND to build
      173      173                    an IT_OPERAND node and attach it to the InTree, and
      174      174                    to load IT$BLOCK_EXPR.DOMAINN with the domain info.
      175      175                o For each MOVEMENT:
      176      176                    Guarantee that both an IT_SELECT and an IT_ADJUST
      177      177                    node is available.  Call MOVEMENTS to build
      178      178                    and attach IT_OPERAND, IT_OPERATOR, and/or IT_COMMAND
      179      179                    nodes.
      180      180                o For THRU or ADJUST:
      181      181                    Guarantee that an IT_SELECT node is available;
      182      182                    allocate a new IT_ADJUST node and append it to the
      183      183                    InTree.  Flag the type of state change to perform:
      184      184                    for THRU, always change to %EVST_END; for ADJUST,
      185      185                    toggle the evaluation state.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:6    
      186      186                o For SELECT:
      187      187                    Allocate a new IT_SELECT node and append it to the InTree.
      188      188        *??*         If there are no IT_SELECT children
      189      189        *??*         of the IT_BLOCK_EXPR node yet, and if this is
      190      190        *??*         not a REPEAT SELECT node, and if HERE has a value
      191      191        *??*         currently, then we want to attach the current value
      192      192        *??*         of the HERE predefined name as the first IT_OPERAND
      193      193        *??*         of the new IT_SELECT node.
      194      194                    Evaluate the possible children of the T_SELECT
      195      195                    node, filling their info into the IT_SELECT node
      196      196                    just built.
      197      197                o For KEY_INCR:
      198      198                    Set the appropriate value in the IT_BLOCK_EXPR node.
      199      199
      200      200                If a recoverable error is detected, we want to free the
      201      201                    InTree.
      202      202        */
      203      203
      204      204        VDE$PBLOCK_EXPR: PROC (PT_BLOCK_EXPR) ALTRET;
      205      205
      206      206        %INCLUDE VD_MACROS_M;
      207     2421        %INCLUDE VD_PERR_C;
      208     2569        %INCLUDE VD_NODES0_E;
      209     2661        %INCLUDE XU_MACRO_C;
      210     5755        %INCLUDE XUE_MACRO_C;
      211     6499
      212     6500
      213     6501        %PARSE$OUT (NAME=PT_BLOCK_EXPR, STCLASS=PARAM);
      214     6546
      215     6547
      216     6548
      217     6549    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
      218     6550    1   DCL VDE$PNUMBER         ENTRY (2) ALTRET;
      219     6551    1   DCL VDE$PNUMERIC_KEY    ENTRY (2) ALTRET;
      220     6552    1   DCL VDE$PFILE_TO_EDIT   ENTRY (3) ALTRET;
      221     6553    1   DCL VDE$PPATTERN        ENTRY (2) ALTRET;
      222     6554    1   DCL VDE$PREAD_LO_NAME   ENTRY (3) ALTRET;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:7    
      223     6555    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
      224     6556    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      225     6557    1   DCL VDA$LDELETE         ENTRY (2) ALTRET;
      226     6558    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
      227     6559    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      228     6560    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      229     6561    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
      230     6562    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      231     6563    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      232     6564    1   DCL VDG$ESCREECH        ENTRY (3);
      233     6565    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
      234     6566
      235     6567
      236     6568        %VD_6E (STCLASS=SYMREF);
      237     6604    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      238     6605        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
      239     6807        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
      240     6821        %VD$NUMBER (NAME=VD_$COMPONENT, STCLASS=SYMREF);
      241     6866        %VD$NUMBER (NAME=VD_$DIRECTION, STCLASS=SYMREF);
      242     6911        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
      243     6956        %VD$NUMBER (NAME=VD_$POINT, STCLASS=SYMREF);
      244     7001        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
      245     7046        %VD$NUMBER (NAME=VD_$SEARCH, STCLASS=SYMREF);
      246     7091        %VD$NUMBER (NAME=VD_$SKIP, STCLASS=SYMREF);
      247     7136        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
      248     7181    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      249     7182              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      250     7196        %VD_FILE_KEY (NAME=VD_FKEY_SCRATCH_SOURCE, STCLASS=SYMREF);
      251     7248        %VD_KEY (NAME=VD_KEY_SCRATCH_SOURCE, STCLASS=SYMREF);
      252     7284    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      253     7285
      254     7286
      255     7287
      256     7288    1   DCL CURR_WINDOW$ PTR;
      257     7289    1   DCL EDIT_BLOCK$ PTR;
      258     7290    1   DCL IT_BLOCK_EXPR$ PTR;
      259     7291    1   DCL LAST_SELECT$ PTR;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:8    
      260     7292    1   DCL LAST_ADJUST$ PTR;
      261     7293    1   DCL LAST_MOVEMENT$ PTR;
      262     7294    1   DCL PREV_CHILD_INDEX SBIN;
      263     7295    1   DCL CHILD_INDEX SBIN;
      264     7296    1   DCL CHILD$ PTR;
      265     7297    1   DCL ERR_SUBST$ PTR;
      266     7298    1   DCL T$ PTR; /* For calling VDG$OALLOC */
      267     7299
      268     7300
      269     7301        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      270     7367        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      271     7514        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      272     7664        %VD$IT_SELECT (NAME=LAST$SELECT, STCLASS="BASED(LAST_SELECT$)");
      273     7701        %VD$IT_ADJUST (NAME=LAST$ADJUST, STCLASS="BASED(LAST_ADJUST$)");
      274     7738        %VD$IT_OPERAND (NAME=LAST$MOVEMENT, STCLASS="BASED(LAST_MOVEMENT$)");
      275     7804        %PARSE$OUT (NAME=CHILD, STCLASS="BASED(CHILD$)");
      276     7849        %VD$KEY_NUMBER;
      277     7864        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      278     7917        %VD$ERR (NAME=LAST$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      279     7970        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      280     8015        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      281     8060        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
      282     8166        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
      283     8272        %VD$FILE_NODE;
      284     8365        %VD$IT_SELECT;
      285     8402        %VD$IT_ADJUST;
      286     8439        %VD$IT_OPERAND;
      287     8505        %VD$TEXTC_REMOTE;
      288     8566        %VD$STRING_HEADER;
      289     8602        %VD$PORT;
      290     8700
      291     8701
      292     8702
      293     8703    1           IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN
      294     8704    1              CALL VDG$ESCREECH;
      295     8705    1           CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      296     8706    1           IF CURR_WINDOW$ = ADDR(NIL) THEN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:9    
      297     8707    1              CALL VDG$ESCREECH;
      298     8708    1           EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;
      299     8709
      300     8710    1           IF CURR$WINDOW.OPERAND.INTREE$ ~= ADDR(NIL) THEN
      301     8711    1              CALL VDG$ESCREECH;
      302     8712
      303     8713    1           CALL VDG$OALLOC (%CLS_IT_BLOCK_EXPR, CURR$WINDOW.OPERAND.INTREE$)
      304     8714    1             ALTRET (OALLOC_FAILED);
      305     8715    1           IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;
      306     8716    1           LAST_SELECT$ = ADDR(NIL);
      307     8717    1           LAST_ADJUST$ = ADDR(NIL);
      308     8718    1           LAST_MOVEMENT$ = ADDR(NIL);
      309     8719
      310     8720                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="PT_BLOCK_EXPR.CODE - %VD_BASE#");
      311     8723
      312     8724    2           IF PT_BLOCK_EXPR.CODE = %T_STRING_EXPR THEN DO;
      313     8725    2              CALL STRING_EXPRESSION
      314     8726    2                ALTRET (STRING_EXPRESSION_FAILED);
      315     8727    2              RETURN;
      316     8728    2              END;
      317     8729
      318     8730    1           CHILD_INDEX = 0;
      319     8731    1           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
      320     8732
      321     8733    1           CALL PROCESSING_OPTIONS
      322     8734    1             ALTRET (PROCESSING_OPTIONS_FAILED);
      323     8735    1           CALL DOMAIN_OPERAND
      324     8736    1             ALTRET (DOMAIN_OPERAND_FAILED);
      325     8737
      326     8738                /*
      327     8739                *   At this point:
      328     8740                *   If the user explicitly specified any processing
      329     8741                *       options, they're in IT$BLOCK_EXPR.OPTIONS.
      330     8742                *   If the user explicitly specified a domain operand,
      331     8743                *       IT$BLOCK_EXPR.DOMAINN is non-%CLEAR.
      332     8744                *   If no domain was given but there is no current EditBlock
      333     8745                *       for this window, and we still have some children of
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:10   
      334     8746                *       PT_BLOCK_EXPR yet to process, then error out.
      335     8747                */
      336     8748
      337     8749    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;
      338     8750    2              IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL)
      339     8751    2                AND CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN
      340     8752    2                 GOTO NO_EDIT_BLOCK_FAILURE;
      341     8753    2              END;
      342     8754
      343     8755    1           PREV_CHILD_INDEX = -1;
      344     8756    1   SELECT_CLAUSE_LOOP:
      345     8757    2           DO WHILE CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS
      346     8758    2             AND CHILD_INDEX > PREV_CHILD_INDEX;
      347     8759    2              PREV_CHILD_INDEX = CHILD_INDEX;
      348     8760    2              CALL MOVEMENTS
      349     8761    2                ALTRET (MOVEMENTS_FAILED);
      350     8762
      351     8763    2              CALL ADJUST_LIST
      352     8764    2                ALTRET (ADJUST_LIST_FAILED);
      353     8765
      354     8766    2              CALL SELECT_CLAUSE
      355     8767    2                ALTRET (SELECT_CLAUSE_FAILED);
      356     8768
      357     8769    3              IF CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN DO;
      358     8770    3                 CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
      359     8771    4                 IF CHILD.CODE = %T_KEY_INCR THEN DO;
      360     8772    4                    CALL VDE$PNUMERIC_KEY (CHILD, IT$BLOCK_EXPR.OPTIONS.KEY_INCR)
      361     8773    4                      ALTRET (PNUMERIC_KEY_FAILED);
      362     8774    4                    IF ADDR(IT$BLOCK_EXPR.OPTIONS.KEY_INCR) ->
      363     8775    4                      VD$KEY_NUMBER.BYTES# > 65534 THEN
      364     8776    4                       GOTO BAD_KEY_INCR;
      365     8777    4                    CHILD_INDEX = CHILD_INDEX + 1;
      366     8778    4                    EXIT SELECT_CLAUSE_LOOP;
      367     8779    4                    END;
      368     8780    3                 END;
      369     8781    2              END SELECT_CLAUSE_LOOP;
      370     8782
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:11   
      371     8783    1           IF CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN
      372     8784    1              GOTO UNPROCESSED_NODE_FAILURE;
      373     8785
      374     8786    1           RETURN;
      375     8787
      376     8788
      377     8789                %BOX (TITLE="Error Handlers");

              8801    1   /***************************************************************************
              8803    1    *                                                                         *
              8807    1            *                               Error Handlers                            *
              8809    1            *                                                                         *
              8811    1           ***************************************************************************/

      378     8815
      379     8816        /*STRING_NOT_ONLY_OPAND_FAILURE:                                    */
      380     8817        /*      CALL VDG$ERRMSG (%E$STRING_NOT_ONLY_OPAND) ALTRET (OTHER_FAILURE); */
      381     8818        /*      GOTO CMDLINE_ERR;                                                  */
      382     8819
      383     8820
      384     8821    1   BAD_KEY_INCR: ;
      385     8822    1           CALL VDG$ERRMSG (%E$BAD_KEY_INCR) ALTRET (OTHER_FAILURE);
      386     8823    1           GOTO CMDLINE_ERR;
      387     8824
      388     8825
      389     8826    1   NO_EDIT_BLOCK_FAILURE:
      390     8827    1           CALL VDG$ERRMSG (%E$NO_EDIT_BLOCK) ALTRET (OTHER_FAILURE);
      391     8828    1           GOTO CMDLINE_ERR;
      392     8829
      393     8830
      394     8831    1   UNPROCESSED_NODE_FAILURE:
      395     8832    1           CALL VDG$ERRMSG (%E$HUH) ALTRET (OTHER_FAILURE);
      396     8833
      397     8834    1           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
      398     8835    2           DO CASE (CHILD.CODE);
      399     8836    2            CASE (%T_PROTECT, %T_STRUCTURE);
      400     8837                   /* Processing option given but not at start of blk expr */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:12   
      401     8838    2              LAST$ERR.ERR.CODE# = %E$PROC_OPT_NOT_1ST;
      402     8839
      403     8840    2            CASE (%T_NEXT, %T_PREVIOUS, %T_NEW, %T_OLD, %T_ANY,
      404     8841    2                %T_FILE_FID, %T_LO_NAME);
      405     8842                   /* Domain operand given but not as 1st in blk expr */
      406     8843    2              LAST$ERR.ERR.CODE# = %E$DOMAIN_OPAND_NOT_1ST;
      407     8844
      408     8845    2            CASE (ELSE);
      409     8846    2              CALL VDG$ESCREECH (CHILD.CODE);
      410     8847    2            END;
      411     8848
      412     8849    1   CMDLINE_ERR: ;
      413     8850    1           LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;
      414     8851
      415     8852
      416     8853    1   STRING_EXPRESSION_FAILED: ;
      417     8854    1   PROCESSING_OPTIONS_FAILED: ;
      418     8855    1   DOMAIN_OPERAND_FAILED: ;
      419     8856    1   MOVEMENTS_FAILED: ;
      420     8857    1   ADJUST_LIST_FAILED: ;
      421     8858    1   SELECT_CLAUSE_FAILED: ;
      422     8859    1   PNUMERIC_KEY_FAILED: ;
      423     8860
      424     8861    1   OTHER_FAILURE:
      425     8862    1           IF FATAL$ERR.ERR ~= %CLEAR THEN
      426     8863    1              ALTRETURN;
      427     8864    1           CALL VDG$OFREE (IT$BLOCK_EXPR)
      428     8865    1             ALTRET (OFREE_FAILED);
      429     8866    1           CURR$WINDOW.OPERAND.INTREE$ = ADDR(NIL);
      430     8867    1           ALTRETURN;
      431     8868
      432     8869
      433     8870    1   GUAR_LAST_SELECT_FAILED: ;
      434     8871    1   OALLOC_FAILED: ;
      435     8872    1   OFREE_FAILED: ;
      436     8873    1           ALTRETURN;
      437     8874
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:13   
      438     8875        %BOX (TITLE=PROCESSING_OPTIONS, PAGE=YES);
              8883    1
              8887    1   /***************************************************************************
              8889    1    *                                                                         *
              8893    1            *                             PROCESSING_OPTIONS                          *
              8895    1            *                                                                         *
              8897    1           ***************************************************************************/

      439     8901
      440     8902        /*I* NAME: PROCESSING_OPTIONS
      441     8903            PARAMETERS:
      442     8904                None.
      443     8905            INPUT:
      444     8906                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR
      445     8907                    to process.
      446     8908                IT$BLOCK_EXPR - Root node of InTree.  It should not have
      447     8909                    any .OPTIONS yet:  its .OPTIONS must be "clear"
      448     8910                    (%CLEAR except pointers are NIL).
      449     8911                VD_$STRUCTURE, VD_$LEVEL, VD_$COMPONENT, VD_$PROTECT, and
      450     8912                    VD_$EXIST must specify the defaults for these options.
      451     8913            OUTPUT:
      452     8914                IT$BLOCK_EXPR.OPTIONS will have in it any options seen.
      453     8915                CHILD_INDEX will be incremented beyond any processed nodes.
      454     8916            SCRATCH:
      455     8917                CHILD$.
      456     8918            DESCRIPTION:
      457     8919                Loop thru PT_BLOCK_EXPR's children while we see one of:
      458     8920                T_PROTECT
      459     8921                    Set .OPTIONS.PROTECT# to %PROTECT or %DONT_PROTECT,
      460     8922                        depending on a T_DONT dangling from the T_PROTECT.
      461     8923        *N*     T_STRUCTURE
      462     8924        *N*         Find the named structure, and point .OPTIONS.STRUCTURE$
      463     8925        *N*             to it's level-1 FileNode in the Structures file.
      464     8926                T_NEW, T_OLD, or T_ANY
      465     8927                    Set the .OPTIONS.EXIST# value.
      466     8928
      467     8929                When done, if we saw any processing options, update the
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:14   
      468     8930                    InTree's options.
      469     8931        */
      470     8932
      471     8933    1   PROCESSING_OPTIONS: PROC ALTRET;
      472     8934
      473     8935
      474     8936
      475     8937        %VD$ACCESS_OPTIONS (NAME=OPTIONS, STCLASS=AUTO);
      476     8966
      477     8967
      478     8968
      479     8969    2           OPTIONS = IT$BLOCK_EXPR.OPTIONS;
      480     8970
      481     8971    2   OPTION_LOOP:
      482     8972    3           DO WHILE CHILD_INDEX <= PT_BLOCK_EXPR.NSUBLKS;
      483     8973    3              CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
      484     8974
      485     8975    4              DO CASE (CHILD.CODE);
      486     8976    4               CASE (%T_PROTECT);
      487     8977    4                 IF OPTIONS.PROTECT# ~= 0 THEN
      488     8978    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      489     8979    4                 IF CHILD.NSUBLKS > 0 THEN
      490     8980    4                    OPTIONS.PROTECT# = %DONT_PROTECT;
      491     8981    4                 ELSE
      492     8982    4                    OPTIONS.PROTECT# = %PROTECT;
      493     8983
      494     8984    4               CASE (%T_STRUCTURE);
      495     8985    4                 IF OPTIONS.STRUCTURE$ ~= ADDR(NIL) THEN
      496     8986    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      497     8987
      498     8988    5                 DO CASE (CHILD.SUBLK$(0) -> CHILD.CODE);
      499     8989    5                  CASE (%T_STRING_KEY);
      500     8990    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_STRINGKEY$;
      501     8991
      502     8992    5                  CASE (%T_NUMERIC_KEY);
      503     8993    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_EDITKEY$;
      504     8994
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:15   
      505     8995    5                  CASE (ELSE);
      506     8996    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SEQUENTIAL$;
      507     8997
      508     8998    5                  END;
      509     8999
      510     9000    4               CASE (%T_NEW);
      511     9001    4                 IF OPTIONS.EXIST# ~= 0 THEN
      512     9002    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      513     9003    4                 OPTIONS.EXIST# = %EX_NEW;
      514     9004
      515     9005    4               CASE (%T_OLD);
      516     9006    4                 IF OPTIONS.EXIST# ~= 0 THEN
      517     9007    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      518     9008    4                 OPTIONS.EXIST# = %EX_OLD;
      519     9009
      520     9010    4               CASE (%T_ANY);
      521     9011    4                 IF OPTIONS.EXIST# ~= 0 THEN
      522     9012    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      523     9013    4                 OPTIONS.EXIST# = %EX_ANY;
      524     9014
      525     9015    4               CASE (ELSE);
      526     9016    4                 EXIT OPTION_LOOP;     /* End of processing options */
      527     9017
      528     9018    4               END;
      529     9019
      530     9020    3              CHILD_INDEX = CHILD_INDEX + 1;
      531     9021    3              END OPTION_LOOP;
      532     9022
      533     9023    2           IT$BLOCK_EXPR.OPTIONS = OPTIONS;
      534     9024
      535     9025    2           RETURN;
      536     9026
      537     9027
      538     9028    2   TOO_MANY_PROC_OPTS_FAILURE:
      539     9029    2           CALL VDG$ERRMSG (%E$TOO_MANY_PROC_OPTS);
      540     9030    2           ALTRETURN;
      541     9031
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:16   
      542     9032    2   END PROCESSING_OPTIONS;
      543     9033
      544     9034        %BOX (TITLE=STRING_EXPRESSION, PAGE=YES);
              9042    2
              9046    2   /***************************************************************************
              9048    2    *                                                                         *
              9052    2            *                             STRING_EXPRESSION                           *
              9054    2            *                                                                         *
              9056    2           ***************************************************************************/

      545     9060
      546     9061        /*I* NAME: STRING_EXPRESSION
      547     9062            PARAMETERS:
      548     9063                None.
      549     9064            INPUT:
      550     9065                PT_BLOCK_EXPR must be a PARSE$OUT node whose
      551     9066                    .CODE = %T_STRING_EXPR.
      552     9067                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
      553     9068                IT$BLOCK_EXPR must exist, but must have no children.
      554     9069                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must be nil:
      555     9070                    there should be no nodes in the InTree yet.
      556     9071                VD_6E.STRUCTURE_SCRATCH$ must point to the level-1 node in
      557     9072                    the Structures file for the "Scratch" structure.
      558     9073            OUTPUT:
      559     9074                An IT_OPERAND node (%OPAND_FILE) will be attached to
      560     9075                    IT$BLOCK_EXPR.  An IT_SELECT node and an IT_ADJUST node
      561     9076                    for the IT_OPERAND node will be attached also.
      562     9077                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ will be set
      563     9078                    to point to the newly-allocated InTree nodes.
      564     9079                IT$BLOCK_EXPR.DOMAINN will be filled in:  it will refer to
      565     9080                    the entire Scratch Source file.
      566     9081                IT$BLOCK_EXPR.OPTIONS will be filled in, for referencing
      567     9082                    the Data component of a protected, existing Scratch file.
      568     9083            DESCRIPTION:
      569     9084                Call VDE$PXUE_EXP to evaluate the string expression and
      570     9085                    build VD$BUFFERs for it.  Delete any current Scratch
      571     9086                    Source file, and write the buffers to the file.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:17   
      572     9087                Build the IT_OPERAND node, pointing to a VD$FILE_KEY for
      573     9088                    the Scratch Source file.
      574     9089                Allocate IT_SELECT and IT_ADJUST nodes, then attach the
      575     9090                    IT_OPERAND node to them.
      576     9091                Fill in IT$BLOCK_EXPR.DOMAINN and .OPTIONS for the Scratch
      577     9092                    Source file.
      578     9093        */
      579     9094
      580     9095    1   STRING_EXPRESSION: PROC ALTRET;
      581     9096
      582     9097
      583     9098    2   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
      584     9099              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      585     9113    2   DCL STRING_STREAM$ PTR;
      586     9114        %VD$ACCESS_OPTIONS (NAME=OPEN_OPTIONS, STCLASS=AUTO);
      587     9143        %VD$LOCATION (NAME=STRING_LOC, STCLASS=AUTO);
      588     9171    2   DCL XUE_EXP$ PTR;
      589     9172    2   DCL STR_INDEX SBIN;
      590     9173    2   DCL BUFFER$ PTR;
      591     9174    2   DCL RET_CODE CHAR(1) CALIGNED;
      592     9175    2   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
      593     9176    2   DCL WRITTEN_NODE$ PTR;
      594     9177    2   DCL IT_OPERAND$ PTR;
      595     9178    2   DCL WILD_STRING$ PTR;
      596     9179
      597     9180
      598     9181        %VD$STREAM (NAME=STRING$STREAM, STCLASS="BASED(STRING_STREAM$)");
      599     9287        %PARSE$OUT (NAME=XUE$EXP, STCLASS="BASED(XUE_EXP$)");
      600     9332        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
      601     9390        %VD$FILE_NODE (NAME=WRITTEN$NODE, STCLASS="BASED(WRITTEN_NODE$)");
      602     9483        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
      603     9549        %VD$WILD_STRINGS (NAME=WILD$STRINGS, STCLASS="BASED(VD_6E.WILD_STRINGS$)");
      604     9664        %VD$WILD_STRINGS (NAME=WILD$STRING, STCLASS="BASED(WILD_STRING$)");
      605     9779        %VD$KEY_NUMBER;
      606     9794        %VD$TEXTC;
      607     9817
      608     9818
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:18   
      609     9819
      610     9820                /*
      611     9821                *   Open a stream to the Scratch Source file.
      612     9822                */
      613     9823
      614     9824    2           STRING_STREAM$ = ADDR(NIL);
      615     9825    2           CALL VDG$OALLOC (%CLS_STREAM, STRING_STREAM$)
      616     9826    2             ALTRET (OALLOC_FAILED);
      617     9827
      618     9828    2           OPEN_OPTIONS = %CLEAR;
      619     9829    2           OPEN_OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;
      620     9830    2           OPEN_OPTIONS.PROTECT# = %DONT_PROTECT;
      621     9831    2           OPEN_OPTIONS.EXIST# = %EX_ANY;
      622     9832
      623     9833                /*
      624     9834                *           !!! CAUTION !!!
      625     9835                *   We're about to reset VD_ACCESSOR_PRIV.  Any premature
      626     9836                *       exits between now and the call to FCLOSE must
      627     9837                *       restore VD_ACCESSOR_PRIV!!!
      628     9838                */
      629     9839
      630     9840    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;
      631     9841    2           VD_ACCESSOR_PRIV = %NAC_ALL_BITS;
      632     9842    2           CALL VDA$FOPEN (STRING$STREAM, VD_KEY_SCRATCH_SOURCE, 0,
      633     9843    2             OPEN_OPTIONS)
      634     9844    2             ALTRET (FOPEN_FAILED);
      635     9845
      636     9846                /*
      637     9847                *   Update the new-domain and options info in IT$BLOCK_EXPR.
      638     9848                */
      639     9849    2           IT$BLOCK_EXPR.DOMAINN.FILE_KEY = VD_KEY_SCRATCH_SOURCE;
      640     9850    2           IT$BLOCK_EXPR.DOMAINN.RANGE = %CLEAR;
      641     9851    2           IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =
      642     9852    2             VD_KEY_NUMERIC_BOF; /* Scratch files have numeric keys */
      643     9853    2           IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;
      644     9854
      645     9855    2           IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:19   
      646     9856    2           IT$BLOCK_EXPR.OPTIONS.LEVEL# = %LVL_EXT_REC;
      647     9857    2           IT$BLOCK_EXPR.OPTIONS.COMPONENT# = %CO_DATA;
      648     9858                /* Strings can't be changed: flag it protected */
      649     9859    2           IT$BLOCK_EXPR.OPTIONS.PROTECT# = %PROTECT;
      650     9860    2           IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD;
      651     9861
      652     9862                /* Delete the old file contents, if any */
      653     9863    2           CALL VDA$LDELETE (STRING$STREAM, IT$BLOCK_EXPR.DOMAINN.RANGE)
      654     9864    2             ALTRET (LDELETE_FAILED);
      655     9865
      656     9866
      657     9867                /* Reset any matching wildcard locations */
      658     9868    2           IF VD_6E.WILD_STRINGS$ ~= ADDR(NIL) THEN
      659     9869    2              WILD$STRINGS.N_WILDCARDS# = 0;
      660     9870
      661     9871    2           STRING_LOC = VD_KEY_NUMERIC_BOF;
      662     9872
      663     9873                /*
      664     9874                *   Evaluate the XUE_EXP# node and write it's buffers to the
      665     9875                *       Scratch Source file.
      666     9876                */
      667     9877
      668     9878    2           XUE_EXP$ = PT_BLOCK_EXPR.SUBLK$ (0);
      669     9879    2           STR_INDEX = 0;
      670     9880    3           DO UNTIL STR_INDEX >= XUE_ECB.OUT$->VD$TEXTC.LENGTH#;
      671     9881    3              CALL VDE$PSTRING (XUE$EXP, STR_INDEX, BUFFER$, RET_CODE,
      672     9882    3                CTRL_ARGS)
      673     9883    3                ALTRET (PSTRING_FAILED);
      674     9884    3              IF XUE_EXP$ ~= ADDR(NIL) THEN
      675     9885    3                 XUE_EXP$ = ADDR(NIL);    /* NIL on 2nd thru nth calls */
      676     9886    4              ELSE DO;
      677     9887    4                 ADDR(STRING_LOC.KEY (%(LVL_EXT_REC-1))) ->
      678     9888    4                   VD$KEY_NUMBER.BYTES# =
      679     9889    4                   ADDR(STRING_LOC.KEY (%(LVL_EXT_REC-1))) ->
      680     9890    4                   VD$KEY_NUMBER.BYTES# + 1000;
      681     9891    4                 END;
      682     9892
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:20   
      683     9893    4              IF BUFFER$ = ADDR(NIL) THEN DO;
      684     9894    4                 CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,
      685     9895    4                   POFFW(PALIGNW(ADDR(BUFFER.BYTES)), BUFFER$))
      686     9896    4                   ALTRET (OALLOC_FAILED);
      687     9897    4                 BUFFER.LENGTH# = 0;   /* Build 0-length buffer */
      688     9898    4                 END;
      689     9899
      690     9900                   /*
      691     9901                   *   If we encountered a wildcard, save its position in
      692     9902                   *   WILD$STRINGS
      693     9903                   */
      694     9904
      695     9905    3              IF RET_CODE = %FNID_WILD_CHAR
      696     9906    4                OR RET_CODE = %FNID_WILD_STRING THEN DO;
      697     9907    4                 IF RET_CODE = %FNID_WILD_STRING THEN
      698     9908    4                    CTRL_ARGS(0) = 1;
      699     9909    4                 ELSE IF CTRL_ARGS(1) ~= CTRL_ARGS(0) THEN
      700     9910    4                       GOTO BAD_CTRL_IN_LITERAL_FAILURE;
      701     9911
      702     9912    4                 IF CTRL_ARGS(0) <= 0 THEN
      703     9913    4                    CTRL_ARGS(0) = 1;
      704     9914
      705     9915    5                 IF VD_6E.WILD_STRINGS$ = ADDR(NIL) THEN DO;
      706     9916    5                    CALL VDG$OALLOC (%CLS_BUFFER, T$, SIZEW(WILD$STRINGS) +
      707     9917    5                      %(MX_WILD_STRINGS-1)*SIZEW(WILD$STRINGS.W))
      708     9918    5                      ALTRET (OALLOC_FAILED);
      709     9919    5                    VD_6E.WILD_STRINGS$ = T$;
      710     9920    5                    WILD$STRINGS.N_WILDCARDS# = 0;
      711     9921    5                    END;
      712     9922
      713     9923    4                 IF WILD$STRINGS.N_WILDCARDS# = %MX_WILD_STRINGS THEN
      714     9924    4                    GOTO TOO_MANY_WILD_STRINGS_FAILURE;
      715     9925
      716     9926    4                 WILD_STRING$ = PINCRW (VD_6E.WILD_STRINGS$,
      717     9927    4                   SIZEW(WILD$STRING.W) * WILD$STRINGS.N_WILDCARDS#);
      718     9928    4                 WILD$STRINGS.N_WILDCARDS# = WILD$STRINGS.N_WILDCARDS# + 1;
      719     9929
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:21   
      720     9930    4                 WILD$STRING.W.N# = CTRL_ARGS(0);
      721     9931    4                 WILD$STRING.W.RANGE.START = STRING_LOC;
      722     9932    4                 WILD$STRING.W.RANGE.START.POSITION# = BUFFER.LENGTH#;
      723     9933    4                 WILD$STRING.W.RANGE.ENDD = WILD$STRING.W.RANGE.START;
      724     9934
      725     9935    4                 IF STR_INDEX >= XUE_ECB.OUT$->VD$TEXTC.LENGTH# THEN EXIT;
      726     9936    4                 ADDR (WILD$STRING.W.RANGE.ENDD) -> VD$KEY_NUMBER.BYTES# =
      727     9937    4                   ADDR (WILD$STRING.W.RANGE.ENDD) -> VD$KEY_NUMBER.BYTES# + 1;
      728     9938    4                 RET_CODE = %FNID_RECORD;
      729     9939    4                 END;
      730     9940
      731     9941    3              ELSE IF RET_CODE ~= %CHR_SPACE
      732     9942    3                   AND RET_CODE ~= %FNID_RECORD THEN
      733     9943    3                    GOTO BAD_CTRL_IN_LITERAL_FAILURE;
      734     9944
      735     9945    3              CALL VDA$LWRITE (STRING$STREAM, STRING_LOC, , BUFFER)
      736     9946    3                ALTRET (LWRITE_FAILED);
      737     9947    4              IF RET_CODE ~= %FNID_RECORD THEN DO;
      738     9948    4                 WRITTEN_NODE$ = STRING$STREAM.PORT$ ->
      739     9949    4                   VD$PORT.LEVEL.INTERNAL$ (%LVL_EXT_REC);
      740     9950    4                 WRITTEN$NODE.DESC.EOR = %FALSE;
      741     9951    4                 END;
      742     9952    3              END;
      743     9953                /*
      744     9954                *   Make final adjustments in domain info of IT$BLOCK_EXPR
      745     9955                */
      746     9956    3           IF RET_CODE ~= %FNID_RECORD THEN DO;
      747     9957    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.POSITION# =
      748     9958    3                WRITTEN$NODE.DESC.DATA$ -> BUFFER.LENGTH#;
      749     9959    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.KEY (%LVL_LOWER-1) =
      750     9960    3                STRING_LOC.KEY (%LVL_EXT_REC - 1);
      751     9961    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %FALSE;
      752     9962    3              END;
      753     9963
      754     9964    2           CALL VDA$FCLOSE (STRING$STREAM)
      755     9965    2             ALTRET (FCLOSE_FAILED);
      756     9966    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:22   
      757     9967
      758     9968                /*
      759     9969                *   Now build the IT_OPERAND node for the Scratch Source file.
      760     9970                */
      761     9971
      762     9972    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
      763     9973    2             ALTRET (OALLOC_FAILED);
      764     9974    2           IT_OPERAND$ = T$;
      765     9975    2           IT$OPERAND.OPTIONS.POINT# = %PNT_AO;
      766     9976    2           IT$OPERAND.CODE# = %OPAND_FILE;
      767     9977    2           IT$OPERAND.PARAM$ = ADDR(VD_FKEY_SCRATCH_SOURCE);
      768     9978
      769     9979                /*
      770     9980                *   Link IT$OPERAND into the InTree.
      771     9981                */
      772     9982
      773     9983    2           CALL GUAR_LAST_ADJUST
      774     9984    2             ALTRET (GUAR_LAST_ADJUST_FAILED);
      775     9985    2           IT$OPERAND.PARENT$ = LAST_ADJUST$;
      776     9986                /* LAST_MOVEMENT$ should be ADDR(NIL) */
      777     9987    2           LAST_MOVEMENT$ = IT_OPERAND$;
      778     9988    2           LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;
      779     9989    2           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;
      780     9990
      781     9991    2           CALL VDG$OFREE (STRING$STREAM);
      782     9992    2           RETURN;
      783     9993
      784     9994
      785     9995
      786     9996    2   BAD_CTRL_IN_LITERAL_FAILURE:
      787     9997    3           CALL VDG$ERRMSG (%E$HUH) WHENRETURN DO;
      788     9998    4              DO SELECT ASCBIN(RET_CODE);
      789     9999    4                 SELECT (%ASCBIN(FNID_VALUE));
      790    10000    4                 LAST$ERR.ERR.CODE# = %E$TOO_MANY_CTRLFN_VALUE_PARAMS;
      791    10001    4                 SELECT (%ASCBIN(FNID_CURRENT));
      792    10002    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_CURR_CONFLICTS_W_LIT;
      793    10003    4                 SELECT (%ASCBIN(FNID_WILD_CHAR));
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:23   
      794    10004    4                 LAST$ERR.ERR.CODE# = %E$TOO_MANY_CTRLFN_WILDC_PARAMS;
      795    10005    4                 SELECT (%ASCBIN(FNID_BO_MATCH));
      796    10006    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_BOM_CONFLICTS_W_LIT;
      797    10007    4                 SELECT (%ASCBIN(FNID_EO_MATCH));
      798    10008    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_EOM_CONFLICTS_W_LIT;
      799    10009    4                 END;
      800    10010    3              END;
      801    10011    2           GOTO FREE_BUFFER;
      802    10012
      803    10013
      804    10014    2   TOO_MANY_WILD_STRINGS_FAILURE: ;
      805    10015    2           CALL VDG$ERRMSG (%E$TOO_MANY_WILD_STRINGS, %MX_WILD_STRINGS);
      806    10016
      807    10017
      808    10018    2   LWRITE_FAILED: ;
      809    10019    2   FREE_BUFFER:
      810    10020    2           CALL VDG$OFREE (BUFFER)
      811    10021    2             ALTRET (OFREE_FAILED);
      812    10022
      813    10023
      814    10024    2   FOPEN_FAILED: ;
      815    10025    2   LDELETE_FAILED: ;
      816    10026    2   PSTRING_FAILED: ;
      817    10027    2   FCLOSE_FAILED: ;
      818    10028    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
      819    10029
      820    10030
      821    10031    2   GUAR_LAST_ADJUST_FAILED: ;
      822    10032    2   OALLOC_FAILED: ;
      823    10033    2   OFREE_FAILED: ;
      824    10034    2           CALL VDG$OFREE (STRING$STREAM);
      825    10035    2           ALTRETURN;
      826    10036
      827    10037    2   END STRING_EXPRESSION;
      828    10038
      829    10039        %BOX (TITLE=DOMAIN_OPERAND, PAGE=YES);
             10047    2
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:24   
             10051    2   /***************************************************************************
             10053    2    *                                                                         *
             10057    2            *                               DOMAIN_OPERAND                            *
             10059    2            *                                                                         *
             10061    2           ***************************************************************************/

      830    10065
      831    10066        /*I* NAME: DOMAIN_OPERAND
      832    10067            PARAMETERS:
      833    10068                OPTIONS - VD$ACCESS_OPTIONS containing only those options
      834    10069                    specified by the user explicitly for this block expression.
      835    10070            INPUT:
      836    10071                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
      837    10072                    process.
      838    10073                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
      839    10074                EDIT$BLOCK must be the VD$BLOCK_DESC for the current
      840    10075                    EditBlock.  If none, CURR$WINDOW.OPERAND.EDIT_BLOCK$ must
      841    10076                    be NIL.
      842    10077                IT$BLOCK_EXPR must exist, but must have no children.
      843    10078                    Its .OPTIONS must contain only those options explicitly
      844    10079                    given by the user for this block expression.
      845    10080                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must be nil:
      846    10081                    there should be no nodes in the InTree yet.
      847    10082            OUTPUT:
      848    10083                If the CHILD_INDEX child represents a new explicit domain:
      849    10084                    IT$BLOCK_EXPR.DOMAINN will contain the new domain's file
      850    10085                        key and range.
      851    10086                    IT$BLOCK_EXPR.OPTIONS will have any vacant fields filled
      852    10087                        in from the new domain (if the new domain is a
      853    10088                        BlockDescriptor).
      854    10089                    CHILD_INDEX will be incremented beyond any processed nodes.
      855    10090                    A VD$IT_OPERAND will be appended to the InTree.
      856    10091                    LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ will be set
      857    10092                        to point to the newly-allocated InTree nodes.
      858    10093            SCRATCH:
      859    10094                CHILD$, CHILD.
      860    10095            DESCRIPTION:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:25   
      861    10096                If CHILD_INDEX is a T_LO_NAME node, and the name's value is a
      862    10097                    block which is in the same file as the current EditBlock,
      863    10098                    then this is not a domain operand:  ignore it and return.
      864    10099                If the CHILD_INDEX node isn't one of the other domain operand
      865    10100                    codes, ignore it and return.
      866    10101                For:
      867    10102                    T_NEXT, T_PREVIOUS:
      868    10103                        Build the IT_OPERAND for these codes.
      869    10104                        Flag IT$BLOCK_EXPR.DOMAINN.NEXT or .PREVIOUS.
      870    10105                    T_FILE_FID:
      871    10106                        Build the IT_OPERAND for this code.  IT_OPERAND.PARAM$
      872    10107                            will point to a VD$FILE_KEY object.
      873    10108                        Set IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE.
      874    10109                    T_LO_NAME:
      875    10110                        Build the IT_OPERAND for this code.  IT_OPERAND.PARAM$
      876    10111                            will point to a VD$BLOCK_DESC object specifying
      877    10112                            the Location-name's value.
      878    10113                        Set IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE.
      879    10114
      880    10115                Build both an IT_SELECT and an IT_ADJUST node in the InTree.
      881    10116                Append the IT_OPERAND node with the explicit domain to
      882    10117                    the current last IT_ADJUST node.
      883    10118                Fill in CURR$WINDOW.DOMAINN for the new domain.
      884    10119        */
      885    10120
      886    10121    1   DOMAIN_OPERAND: PROC ALTRET;
      887    10122
      888    10123
      889    10124
      890    10125    2   DCL NAME_DESC$ PTR;
      891    10126    2   DCL NAME_FILE_KEY$ PTR;
      892    10127    2   DCL CURRENT_FILE_KEY$ PTR;
      893    10128    2   DCL IT_OPERAND$ PTR;
      894    10129    2   DCL FILE_KEY$ PTR;
      895    10130    2   DCL VD_PARSED_PREDEF_FILE$ PTR;
      896    10131    2   DCL KEYLENGTH UBIN;
      897    10132
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:26   
      898    10133
      899    10134
      900    10135        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
      901    10173        %VD$BLOCK_DESC (NAME=NAME$DESC, STCLASS="BASED(NAME_DESC$)");
      902    10320        %VD$TEXTC (NAME=NAME$FILE_KEY, STCLASS="BASED(NAME_FILE_KEY$)");
      903    10343        %VD$TEXTC (NAME=CURRENT$FILE_KEY, STCLASS="BASED(CURRENT_FILE_KEY$)");
      904    10366        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
      905    10432        %VD$FILE_KEY (STCLASS="BASED(FILE_KEY$)");
      906    10481        %VD$DIR_NODE (NAME=PREDEF$NODE, STCLASS="BASED(VD_PARSED_PREDEF_FILE$)");
      907    10519        %VD$FILE_KEY (NAME=PREDEF$KEY, STCLASS="BASED(VD_PARSED_PREDEF_FILE$)");
      908    10568        %VD$TEXTC;
      909    10591
      910    10592
      911    10593
      912    10594
      913    10595    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
      914    10596    2           IF CHILD.CODE = %T_MOVEMENT AND CHILD.NSUBLKS = 1 THEN
      915    10597    2              CHILD$ = CHILD.SUBLK$(0);
      916    10598
      917    10599    2           IF CHILD.CODE = %T_LO_NAME
      918    10600    3             AND CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
      919    10601    3              CALL VDE$PREAD_LO_NAME (CHILD.SUBLK$(0) -> OUT$SYM.TEXTC$ ->
      920    10602    3                VD$TEXTC, NAME_DESC$)
      921    10603    3                ALTRET (PREAD_LO_NAME_FAILED);
      922    10604                   %GETKEY (KEY=NAME$DESC.FILE_KEY, PTR=NAME_FILE_KEY$);
      923    10614                   %GETKEY (KEY=EDIT$BLOCK.FILE_KEY, PTR=CURRENT_FILE_KEY$);
      924    10624    3              IF NAME$FILE_KEY.BYTES = CURRENT$FILE_KEY.BYTES THEN
      925    10625    3                 RETURN;       /* LO-name is not a new domain */
      926    10626    3              END;
      927    10627    2           ELSE IF CHILD.CODE ~= %T_NEXT
      928    10628    2                AND CHILD.CODE ~= %T_PREVIOUS
      929    10629    2                AND CHILD.CODE ~= %T_FILE_FID
      930    10630    2                AND CHILD.CODE ~= %T_PREDEF_FILE_NAME THEN
      931    10631    2                 RETURN;      /* Not a domain operand */
      932    10632
      933    10633                %BOX (TITLE="CHILD is a new domain specification");

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:27   
             10645    2   /***************************************************************************
             10647    2    *                                                                         *
             10651    2            *                    CHILD is a new domain specification                  *
             10653    2            *                                                                         *
             10655    2           ***************************************************************************/

      934    10659
      935    10660    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
      936    10661    2             ALTRET (OALLOC_FAILED);
      937    10662    2           IT_OPERAND$ = T$;
      938    10663    2           IT$OPERAND.OPTIONS.POINT# = %PNT_AO;
      939    10664
      940    10665    3           DO CASE (CHILD.CODE);
      941    10666    3            CASE (%T_NEXT);
      942    10667    3              IT$OPERAND.CODE# = %OPAND_NEXT;
      943    10668    3              IT$BLOCK_EXPR.DOMAINN.NEXT = %TRUE;
      944    10669
      945    10670    3            CASE (%T_PREVIOUS);
      946    10671    3              IT$OPERAND.CODE# = %OPAND_PREVIOUS;
      947    10672    3              IT$BLOCK_EXPR.DOMAINN.PREVIOUS = %TRUE;
      948    10673
      949    10674    3            CASE (%T_FILE_FID);
      950    10675    3              CALL VDE$PFILE_TO_EDIT (CHILD.SUBLK$(0)->OUT$SYM.TEXTC$->VD$TEXTC,
      951    10676    3                IT$BLOCK_EXPR.DOMAINN.FILE_KEY)
      952    10677    3                ALTRET (PFILE_TO_EDIT_FAILED);
      953    10678    3              GOTO FILE_COMMON;
      954    10679
      955    10680    3            CASE (%T_PREDEF_FILE_NAME);
      956    10681    3              CALL VDG$OALLOC (%CLS_FILE_KEY, IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$)
      957    10682    3                ALTRET (OALLOC_FAILED);
      958    10683    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY.TYPE# = %KT_STRING;
      959    10684    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY.REP# = %REP_REMOTE;
      960    10685    3              FILE_KEY$ = IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$;
      961    10686    3              VD_PARSED_PREDEF_FILE$ =
      962    10687    3                PINCRW(EQUALS$STREAM.FILE_KEY.V$,CHILD.SCRITCH);
      963    10688    3              IF PREDEF$KEY.OBJECT.CLASS# = %CLS_FILE_KEY THEN
      964    10689    3                 VD$FILE_KEY.UNIQUE.FNAME.BYTES = PREDEF$KEY.UNIQUE.FNAME.BYTES;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:28   
      965    10690    3              ELSE
      966    10691    3                 CALL CONCAT (VD$FILE_KEY.UNIQUE.FNAME.BYTES,
      967    10692    3                   PREDEF$NODE.FILE_STCLASS, %PFK_CONSTANT, PREDEF$NODE.KEY);
      968    10693    3              CALL INDEX (KEYLENGTH, ' ', VD$FILE_KEY.UNIQUE.FNAME.BYTES);
      969    10694    3              VD$FILE_KEY.UNIQUE.FNAME.LENGTH# = KEYLENGTH;
      970    10695    3              VD$FILE_KEY.LENGTH# = KEYLENGTH + 9;
      971    10696    3   FILE_COMMON:;
      972    10697    3              IT$OPERAND.CODE# = %OPAND_FILE;
      973    10698    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;
      974    10699    3              IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =
      975    10700    3                VD_KEY_NUMERIC_BOF;
      976    10701    3              CALL VDG$OCOPY (IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$->VD$FILE_KEY,
      977    10702    3                IT$OPERAND.PARAM$)
      978    10703    3                ALTRET (OCOPY_FAILED);
      979    10704    3              IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN
      980    10705    3                 IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = VD_$STRUCTURE.V$;
      981    10706    3              IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN
      982    10707    3                 IT$BLOCK_EXPR.OPTIONS.LEVEL# = %LVL_LOWER;
      983    10708    3              IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN
      984    10709    3                 IT$BLOCK_EXPR.OPTIONS.COMPONENT# = VD_$COMPONENT.V#;
      985    10710    3              IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN
      986    10711    3                 IT$BLOCK_EXPR.OPTIONS.PROTECT# = VD_$PROTECT.V#;
      987    10712    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN
      988    10713    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = VD_$EXIST.V#;
      989    10714
      990    10715    3            CASE (%T_LO_NAME);
      991    10716                   /*
      992    10717                   *   At the start of this routine, we read the name's
      993    10718                   *     value; NAME_DESC$ points to the VD$BLOCK_DESC for
      994    10719                   *     the name.
      995    10720                   */
      996    10721    3              IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;
      997    10722    3              CALL VDG$OCOPY (NAME$DESC, IT$OPERAND.PARAM$)
      998    10723    3                ALTRET (OCOPY_FAILED);
      999    10724
     1000    10725    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY = %CLEAR;
     1001    10726                   %COPYKEY (FKEY=NAME$DESC.FILE_KEY,
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:29   
     1002    10727                   TKEY=IT$BLOCK_EXPR.DOMAINN.FILE_KEY);
     1003    10743                   /* EditBlock is the entire file the LO-name points to */
     1004    10744    3              IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =
     1005    10745    3                VD_KEY_NUMERIC_BOF;
     1006    10746    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;
     1007    10747                   /*
     1008    10748                   *  Merge the access options from the LO-name's BlockDescriptor
     1009    10749                   *    into any unspecified fields in IT$BLOCK_EXPR.OPTIONS.
     1010    10750                   */
     1011    10751    3              IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN
     1012    10752    3                 IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ =
     1013    10753    3                   NAME$DESC.OPTIONS.STRUCTURE$;
     1014    10754    3              IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN
     1015    10755    3                 IT$BLOCK_EXPR.OPTIONS.LEVEL# = NAME$DESC.OPTIONS.LEVEL#;
     1016    10756    3              IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN
     1017    10757    3                 IT$BLOCK_EXPR.OPTIONS.COMPONENT# =
     1018    10758    3                   NAME$DESC.OPTIONS.COMPONENT#;
     1019    10759    3              IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN
     1020    10760    3                 IT$BLOCK_EXPR.OPTIONS.PROTECT# = NAME$DESC.OPTIONS.PROTECT#;
     1021    10761    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN
     1022    10762    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = NAME$DESC.OPTIONS.EXIST#;
     1023    10763
     1024    10764    3            CASE (ELSE);
     1025    10765    3              CALL VDG$ESCREECH;
     1026    10766    3            END;
     1027    10767
     1028    10768                /* We've successfully processed the CHILD_INDEX node */
     1029    10769    2           CHILD_INDEX = CHILD_INDEX + 1;
     1030    10770
     1031    10771                /*
     1032    10772                *   Link IT$OPERAND into the InTree.
     1033    10773                */
     1034    10774
     1035    10775    2           CALL GUAR_LAST_ADJUST
     1036    10776    2             ALTRET (GUAR_LAST_ADJUST_FAILED);
     1037    10777    2           IT$OPERAND.PARENT$ = LAST_ADJUST$;
     1038    10778                /* LAST_MOVEMENT$ should be ADDR(NIL) */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:30   
     1039    10779    2           LAST_MOVEMENT$ = IT_OPERAND$;
     1040    10780    2           LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;
     1041    10781    2           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;
     1042    10782
     1043    10783    2           RETURN;
     1044    10784
     1045    10785
     1046    10786
     1047    10787    2   PFILE_TO_EDIT_FAILED:
     1048    10788    2           LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;
     1049    10789    2           CALL VDG$OFREE (IT$OPERAND)
     1050    10790    2             ALTRET (OFREE_FAILED);
     1051    10791    2           ALTRETURN;
     1052    10792
     1053    10793
     1054    10794    2   PREAD_LO_NAME_FAILED: ;
     1055    10795    2   OALLOC_FAILED: ;
     1056    10796    2   OFREE_FAILED: ;
     1057    10797    2   OCOPY_FAILED: ;
     1058    10798    2   OCOPY_RANGE_FAILED: ;
     1059    10799    2   GUAR_LAST_ADJUST_FAILED: ;
     1060    10800    2           ALTRETURN;
     1061    10801
     1062    10802    2   END DOMAIN_OPERAND;
     1063    10803
     1064    10804        %BOX (TITLE=SELECT_CLAUSE, PAGE=YES);
             10812    2
             10816    2   /***************************************************************************
             10818    2    *                                                                         *
             10822    2            *                               SELECT_CLAUSE                             *
             10824    2            *                                                                         *
             10826    2           ***************************************************************************/

     1065    10830
     1066    10831        /*I* NAME: SELECT_CLAUSE
     1067    10832            PARAMETERS:
     1068    10833                None.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:31   
     1069    10834            INPUT:
     1070    10835                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1071    10836                    process.
     1072    10837                IT$BLOCK_EXPR must exist.
     1073    10838                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1074    10839                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1075    10840                    levels of the InTree.  Each should be NIL if there are no
     1076    10841                    nodes at that level.
     1077    10842            OUTPUT:
     1078    10843                If the CHILD_INDEX child is a T_SELECT_CLAUSE node:
     1079    10844                    A new IT_SELECT node will be allocated an attached to
     1080    10845                        the InTree.
     1081    10846                    LAST_SELECT$ will be updated to point to the new node.
     1082    10847                    LAST_ADJUST$ and LAST_MOVEMENT$ will be NIL'd.
     1083    10848                    CHILD_INDEX will be incremented beyond the processed nodes.
     1084    10849            SCRATCH:
     1085    10850                CHILD$, CHILD.
     1086    10851            DESCRIPTION:
     1087    10852                If the CHILD_INDEX node is a T_SELECT_CLAUSE node,
     1088    10853                allocate a new IT_SELECT node and link it into the InTree.
     1089    10854                If the T_SELECT_CLAUSE node has a T_REPEAT node as a child,
     1090    10855                set the appropriate flag in the new IT_SELECT node.
     1091    10856        */
     1092    10857
     1093    10858    1   SELECT_CLAUSE: PROC ALTRET;
     1094    10859
     1095    10860
     1096    10861    2   DCL RPT_COUNT SBIN;
     1097    10862
     1098    10863
     1099    10864
     1100    10865    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN
     1101    10866    2              RETURN;
     1102    10867    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
     1103    10868    2           IF CHILD.CODE ~= %T_SELECT_CLAUSE THEN
     1104    10869    2              RETURN;
     1105    10870
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:32   
     1106    10871    2           CALL ALLOC_IT_SELECT
     1107    10872    2             ALTRET (ALLOC_IT_SELECT_FAILED);
     1108    10873
     1109    10874    2           IF CHILD.NSUBLKS = 0 THEN
     1110    10875    2              LAST$SELECT.RPT_COUNT# = 1;
     1111    10876    3           ELSE DO;
     1112    10877                   /* Got some sort of repetition */
     1113    10878    3              IF CHILD.SUBLK$ (0) -> CHILD.NSUBLKS = 0 THEN
     1114    10879    3                 LAST$SELECT.RPT_ALL = %TRUE;
     1115    10880    4              ELSE DO;
     1116    10881    4                 CALL VDE$PNUMBER (CHILD.SUBLK$ (0) ->
     1117    10882    4                   CHILD.SUBLK$ (0) -> CHILD, RPT_COUNT)
     1118    10883    4                   ALTRET (PNUMBER_FAILED);
     1119    10884    4                 IF RPT_COUNT < %MN_REPEAT_COUNT
     1120    10885    4                   OR RPT_COUNT > %MX_REPEAT_COUNT THEN
     1121    10886    4                    GOTO RPT_COUNT_NOT_IN_RANGE_FAILURE;
     1122    10887    4                 LAST$SELECT.RPT_COUNT# = RPT_COUNT;
     1123    10888    4                 END;
     1124    10889    3              END;
     1125    10890
     1126    10891        /*??*    IF NOT LAST$SELECT.RPT_ALL#                                 */
     1127    10892        /*??*      AND IT$BLOCK_EXPR.SELECT$ = LAST_SELECT$ THEN DO;         */
     1128    10893        /*??*       CALL ATTACH_HERE_TO_SELECT (LAST$SELECT)                 */
     1129    10894        /*??*         ALTRET (ATTACH_HERE_TO_SELECT_FAILED);                 */
     1130    10895        /*??*       END;                                                     */
     1131    10896
     1132    10897    2           CHILD_INDEX = CHILD_INDEX + 1;
     1133    10898
     1134    10899    2           RETURN;
     1135    10900
     1136    10901
     1137    10902    2   RPT_COUNT_NOT_IN_RANGE_FAILURE:
     1138    10903    3           CALL VDG$ERRMSG (%E$REPEAT_COUNT_NOT_IN_RANGE) WHENRETURN DO;
     1139    10904    3              LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;
     1140    10905    3              END;
     1141    10906
     1142    10907
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:33   
     1143    10908    2   ALLOC_IT_SELECT_FAILED: ;
     1144    10909    2   PNUMBER_FAILED: ;
     1145    10910    2   OALLOC_FAILED: ;
     1146    10911    2           ALTRETURN;
     1147    10912
     1148    10913    2   END SELECT_CLAUSE;
     1149    10914
     1150    10915        %BOX (TITLE=ADJUST_LIST, PAGE=YES);
             10923    2
             10927    2   /***************************************************************************
             10929    2    *                                                                         *
             10933    2            *                                ADJUST_LIST                              *
             10935    2            *                                                                         *
             10937    2           ***************************************************************************/

     1151    10941
     1152    10942        /*I* NAME: ADJUST_LIST
     1153    10943            PARAMETERS:
     1154    10944                None.
     1155    10945            INPUT:
     1156    10946                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1157    10947                    process.
     1158    10948                IT$BLOCK_EXPR must exist.
     1159    10949                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1160    10950                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1161    10951                    levels of the InTree.  Each should be NIL if there are no
     1162    10952                    nodes at that level.
     1163    10953            OUTPUT:
     1164    10954                If the CHILD_INDEX child is a T_THRU or T_ADJUST node:
     1165    10955                    A new IT_ADJUST node will be allocated an attached to
     1166    10956                        the InTree.
     1167    10957                    LAST_ADJUST$ will be updated to point to the new node.
     1168    10958                    IT_OPERAND, IT_OPERATOR, and IT_COMMAND nodes may also
     1169    10959                        be attached to the InTree.
     1170    10960                    LAST_MOVEMENT$ will be NIL'd.
     1171    10961                    CHILD_INDEX will be incremented beyond the processed nodes.
     1172    10962            SCRATCH:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:34   
     1173    10963                CHILD$, CHILD.
     1174    10964            DESCRIPTION:
     1175    10965                If the CHILD_INDEX node is a T_THRU or T_ADJUST node,
     1176    10966                allocate a new IT_ADJUST node and link it into the InTree.
     1177    10967                For T_THRU, set VD$IT_ADJUST.NEW_STATE# to %EVST_END.
     1178    10968                For T_ADJUST, set VD$IT_ADJUST.NEW_STATE# to %EVST_TOGGLE.
     1179    10969                Process all T_MOVEMENT nodes following the THRU/ADJUST node.
     1180    10970        */
     1181    10971
     1182    10972    1   ADJUST_LIST: PROC ALTRET;
     1183    10973
     1184    10974
     1185    10975    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN
     1186    10976    2              RETURN;
     1187    10977    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
     1188    10978    2           IF CHILD.CODE ~= %T_THRU AND CHILD.CODE ~= %T_ADJUST THEN
     1189    10979    2              RETURN;
     1190    10980
     1191    10981    2           CALL GUAR_LAST_SELECT
     1192    10982    2             ALTRET (GUAR_LAST_SELECT_FAILED);
     1193    10983    2           CALL ALLOC_IT_ADJUST
     1194    10984    2             ALTRET (ALLOC_IT_ADJUST_FAILED);
     1195    10985    2           IF CHILD.CODE = %T_THRU THEN
     1196    10986    2              LAST$ADJUST.NEW_STATE# = %EVST_END;
     1197    10987    2           ELSE
     1198    10988    2              LAST$ADJUST.NEW_STATE# = %EVST_TOGGLE;
     1199    10989
     1200    10990    2           CHILD_INDEX = CHILD_INDEX + 1;
     1201    10991
     1202    10992    2           CALL MOVEMENTS
     1203    10993    2             ALTRET (MOVEMENTS_FAILED);
     1204    10994
     1205    10995    2           RETURN;
     1206    10996
     1207    10997
     1208    10998
     1209    10999    2   GUAR_LAST_SELECT_FAILED: ;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:35   
     1210    11000    2   ALLOC_IT_ADJUST_FAILED: ;
     1211    11001    2   MOVEMENTS_FAILED: ;
     1212    11002    2           ALTRETURN;
     1213    11003
     1214    11004    2   END ADJUST_LIST;
     1215    11005
     1216    11006        %BOX (TITLE=MOVEMENTS, PAGE=YES);
             11014    2
             11018    2   /***************************************************************************
             11020    2    *                                                                         *
             11024    2            *                                 MOVEMENTS                               *
             11026    2            *                                                                         *
             11028    2           ***************************************************************************/

     1217    11032
     1218    11033        /*I* NAME: MOVEMENTS
     1219    11034            PARAMETERS:
     1220    11035                None.
     1221    11036            INPUT:
     1222    11037                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1223    11038                    process.
     1224    11039                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
     1225    11040                EDIT$BLOCK must be the VD$BLOCK_DESC for the current
     1226    11041                    EditBlock.  If none, CURR$WINDOW.OPERAND.EDIT_BLOCK$ must
     1227    11042                    be NIL.
     1228    11043                IT$BLOCK_EXPR must exist.
     1229    11044                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1230    11045                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1231    11046                    levels of the InTree.  Each should be NIL if there are no
     1232    11047                    nodes at that level.
     1233    11048            OUTPUT:
     1234    11049                If the CHILD_INDEX node is a T_MOVEMENT or T_LO_NAME node:
     1235    11050                    One or more IT_OPERAND, IT_OPERATOR, and/or IT_COMMAND
     1236    11051                        nodes will be attached to IT$BLOCK_EXPR.  If none
     1237    11052                        yet, an IT_SELECT node and an IT_ADJUST node
     1238    11053                        will be attached also.
     1239    11054                    LAST_MOVEMENT$ will be updated to point to the last of
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:36   
     1240    11055                        the added nodes.
     1241    11056                CHILD_INDEX will be incremented beyond the processed nodes.
     1242    11057            SCRATCH:
     1243    11058                CHILD$, CHILD.
     1244    11059            DESCRIPTION:
     1245    11060                At entry, the CHILD_INDEX child may be either a T_MOVEMENT
     1246    11061                    node or a PLO_NAME node; it'll be PLO_NAME if a
     1247    11062                    Location-name was given as the first item in a block
     1248    11063                    expression (and so looked like a domain operand) but
     1249    11064                    the value of the name didn't specify a new domain.
     1250    11065                    Processing of such a Location-name would be deferred
     1251    11066                    for handling by this routine since it really is just
     1252    11067                    an absolute movement operand, not a domain operand.
     1253    11068                Loop while the CHILD_INDEX child is a T_MOVEMENT node:
     1254    11069                The T_MOVEMENT node must have from one to four children:
     1255    11070
     1256    11071                                    MOVEMENT
     1257    11072                                       |
     1258    11073                 --------------------------------------------
     1259    11074                 |            |      |                      |
     1260    11075                SKIP       FORWARD   AO        NUMERIC_KEY <INTEGER,FRACT>
     1261    11076                 |           or      or                     or
     1262    11077            STRING_EXPR   BACKWARD   BO   STRING_KEY <STRING_EXPR <XUE_EXP#> >
     1263    11078                 |                   or                     or
     1264    11079              XUE_EXP#               EO                LEVEL_NAME
     1265    11080                                                            or
     1266    11081                                                        POSITIONS
     1267    11082                                                            or
     1268    11083                                                   POSITIONS <.Decimal>
     1269    11084                                                            or
     1270    11085                                           POSITIONS <STRING_EXPR <XUE_EXP#> >
     1271    11086                                                            or
     1272    11087                                                     PATTERN <.Dstring>
     1273    11088                                                            or
     1274    11089                                             PATTERN <STRING_EXPR <XUE_EXP#> >
     1275    11090                                                            or
     1276    11091                                                    LO_NAME <.symbol>
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:37   
     1277    11092
     1278    11093                The first three children may appear in any order, and each
     1279    11094                    is optional.  The last child must appear and must be the
     1280    11095                    last child of the T_MOVEMENT node.
     1281    11096                For NUMERIC_KEY, either one or both children may be present.
     1282    11097                For the remainder, all children shown are mandatory.
     1283    11098
     1284    11099                This routine processes any number of successive T_MOVEMENT nodes.
     1285    11100        */
     1286    11101
     1287    11102    1   MOVEMENTS: PROC ALTRET;
     1288    11103
     1289    11104
     1290    11105    2   DCL IT_OPERAND$ PTR;
     1291    11106        %VD$EVAL_OPTIONS (NAME=EVAL_OPTIONS, STCLASS=AUTO);
     1292    11121    2   DCL SRCH_SEEN BIT(1) ALIGNED;
     1293    11122    2   DCL SKIP_SEEN BIT(1) ALIGNED;
     1294    11123
     1295    11124
     1296    11125        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
     1297    11191        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
     1298    11236        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
     1299    11274
     1300    11275
     1301    11276
     1302    11277    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN
     1303    11278    2              RETURN;
     1304    11279
     1305    11280    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
     1306    11281    3           IF CHILD.CODE = %T_LO_NAME THEN DO;
     1307    11282    3              EVAL_OPTIONS = %CLEAR;
     1308    11283    3              SRCH_SEEN = %FALSE;
     1309    11284    3              SKIP_SEEN = %FALSE;
     1310    11285    3              CALL MOVEMENT_OPERAND (CHILD)
     1311    11286    3                ALTRET (MOVEMENT_OPERAND_FAILED);
     1312    11287    3              CHILD_INDEX = CHILD_INDEX + 1;
     1313    11288    3              END;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:38   
     1314    11289
     1315    11290    2   EACH_MOVEMENT:
     1316    11291    3           DO WHILE CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS;
     1317    11292    3              CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);
     1318    11293    3              IF CHILD.CODE ~= %T_MOVEMENT THEN
     1319    11294    3                 EXIT EACH_MOVEMENT;
     1320    11295    3              EVAL_OPTIONS = %CLEAR;
     1321    11296    3              SRCH_SEEN = %FALSE;
     1322    11297    3              SKIP_SEEN = %FALSE;
     1323    11298    3              CALL MOVEMENT_OPTIONS (CHILD)
     1324    11299    3                ALTRET (MOVEMENT_OPTIONS_FAILED);
     1325    11300    3              CALL MOVEMENT_OPERAND (CHILD.SUBLK$ (CHILD.NSUBLKS-1) -> OUT$BLK)
     1326    11301    3                ALTRET (MOVEMENT_OPERAND_FAILED);
     1327    11302    3              CHILD_INDEX = CHILD_INDEX + 1;
     1328    11303    3              END EACH_MOVEMENT;
     1329    11304
     1330    11305    2           RETURN;
     1331    11306
     1332    11307
     1333    11308
     1334    11309    2   MOVEMENT_OPTIONS_FAILED: ;
     1335    11310    2   MOVEMENT_OPERAND_FAILED: ;
     1336    11311    2           ALTRETURN;
     1337    11312
     1338    11313                %BOX (TITLE=MOVEMENT_OPTIONS);

             11325    2   /***************************************************************************
             11327    2    *                                                                         *
             11331    2            *                              MOVEMENT_OPTIONS                           *
             11333    2            *                                                                         *
             11335    2           ***************************************************************************/

     1339    11339
     1340    11340        /*I** NAME: MOVEMENT_OPTIONS
     1341    11341            PARAMETERS:
     1342    11342                PT_MOVEMENT - PARSE$OUT block whose code is %T_MOVEMENT.
     1343    11343            INPUT:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:39   
     1344    11344                Same as for MOVEMENTS.
     1345    11345                EVAL_OPTIONS, SRCH_SEEN, and SKIP_SEEN should be %CLEAR at entry.
     1346    11346            OUTPUT:
     1347    11347                Same as for MOVEMENTS.  All children of PT_MOVEMENT will
     1348    11348                    be processed except the last one.
     1349    11349                EVAL_OPTIONS, SRCH_SEEN, and SKIP_SEEN will be set based on
     1350    11350                    the options processed.
     1351    11351            DESCRIPTION:
     1352    11352                Same as for MOVEMENTS.
     1353    11353        */
     1354    11354
     1355    11355    2   MOVEMENT_OPTIONS: PROC (PT_MOVEMENT) ALTRET;
     1356    11356
     1357    11357        %PARSE$OUT (NAME=PT_MOVEMENT, STCLASS=PARAM);
     1358    11402
     1359    11403
     1360    11404    3   DCL MOVE_CHILD_INDEX SBIN;
     1361    11405    3   DCL MOVE_CHILD$ PTR;
     1362    11406    3   DCL NUMBER SBIN;
     1363    11407    3   DCL ERR_CODE SBIN;
     1364    11408
     1365    11409
     1366    11410        %PARSE$OUT (NAME=MOVE$CHILD, STCLASS="BASED(MOVE_CHILD$)");
     1367    11455
     1368    11456
     1369    11457
     1370    11458    3   EACH_MOVE_CHILD_EXCEPT_LAST:
     1371    11459    4           DO MOVE_CHILD_INDEX = 0 TO (PT_MOVEMENT.NSUBLKS - 2);
     1372    11460    4              MOVE_CHILD$ = PT_MOVEMENT.SUBLK$ (MOVE_CHILD_INDEX);
     1373    11461                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="MOVE$CHILD.CODE - %VD_BASE#");
     1374    11464
     1375    11465    5              DO CASE (MOVE$CHILD.CODE);
     1376    11466
     1377    11467    5               CASE (%T_SKIP);
     1378    11468    5                 IF SKIP_SEEN THEN
     1379    11469    5                    GOTO TOO_MANY_SKIPS_FAILURE;
     1380    11470    5                 SKIP_SEEN = %TRUE;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:40   
     1381    11471    5                 IF MOVE$CHILD.SUBLK$(0)->OUT$BLK.CODE =
     1382    11472    6                   %T_STRING_EXPR THEN DO;
     1383    11473    6                    CALL VDE$PNUMBER (MOVE$CHILD.SUBLK$(0)->
     1384    11474    6                      OUT$BLK.SUBLK$(0)->OUT$BLK, NUMBER)
     1385    11475    6                      ALTRET (PNUMBER_FAILED);
     1386    11476    6                    IF NUMBER < %MN_SKIP_COUNT
     1387    11477    6                      OR NUMBER > %MX_SKIP_COUNT THEN
     1388    11478    6                       GOTO SKIP_NOT_IN_RANGE_FAILURE;
     1389    11479    6                    EVAL_OPTIONS.SKIP# = NUMBER;
     1390    11480    6                    END;
     1391    11481
     1392    11482    5               CASE (%T_FORWARD);
     1393    11483    5                 IF EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1394    11484    5                    GOTO TOO_MANY_DIRECTIONS_FAILURE;
     1395    11485    5                 EVAL_OPTIONS.DIRECTION# = %DIR_FORWARD;
     1396    11486
     1397    11487    5               CASE (%T_BACKWARD);
     1398    11488    5                 IF EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1399    11489    5                    GOTO TOO_MANY_DIRECTIONS_FAILURE;
     1400    11490    5                 EVAL_OPTIONS.DIRECTION# = %DIR_BACKWARD;
     1401    11491
     1402    11492    5               CASE (%T_AO);
     1403    11493    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN
     1404    11494    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1405    11495    5                 EVAL_OPTIONS.POINT# = %PNT_AO;
     1406    11496
     1407    11497    5               CASE (%T_BO);
     1408    11498    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN
     1409    11499    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1410    11500    5                 EVAL_OPTIONS.POINT# = %PNT_BO;
     1411    11501
     1412    11502    5               CASE (%T_EO);
     1413    11503    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN
     1414    11504    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1415    11505    5                 EVAL_OPTIONS.POINT# = %PNT_EO;
     1416    11506
     1417    11507    5               CASE (ELSE);
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:41   
     1418    11508    5                 CALL VDG$ESCREECH (MOVE$CHILD.CODE);
     1419    11509
     1420    11510    5               END;
     1421    11511
     1422    11512    4              END EACH_MOVE_CHILD_EXCEPT_LAST;
     1423    11513
     1424    11514    3           RETURN;
     1425    11515
     1426    11516
     1427    11517                %BOX (TITLE="Error Handlers");

             11529    3   /***************************************************************************
             11531    3    *                                                                         *
             11535    3            *                               Error Handlers                            *
             11537    3            *                                                                         *
             11539    3           ***************************************************************************/

     1428    11543
     1429    11544    3   TOO_MANY_SKIPS_FAILURE:
     1430    11545    3           ERR_CODE = %E$TOO_MANY_SKIPS;
     1431    11546    3           GOTO SERIOUS_USER_ERROR;
     1432    11547
     1433    11548    3   SKIP_NOT_IN_RANGE_FAILURE:
     1434    11549    3           ERR_CODE = %E$SKIP_COUNT_NOT_IN_RANGE;
     1435    11550    3           GOTO SERIOUS_USER_ERROR;
     1436    11551
     1437    11552    3   TOO_MANY_DIRECTIONS_FAILURE:
     1438    11553    3           ERR_CODE = %E$TOO_MANY_DIRECTIONS;
     1439    11554    3           GOTO SERIOUS_USER_ERROR;
     1440    11555
     1441    11556    3   TOO_MANY_POINTS_FAILURE:
     1442    11557    3           ERR_CODE = %E$TOO_MANY_POINTS;
     1443    11558    3           GOTO SERIOUS_USER_ERROR;
     1444    11559
     1445    11560
     1446    11561    3   SERIOUS_USER_ERROR:
     1447    11562    4           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:42   
     1448    11563    4              LAST$ERR.CMDLINE_INDEX# = MOVE$CHILD.CPOS;
     1449    11564    4              END;
     1450    11565
     1451    11566
     1452    11567    3   PNUMBER_FAILED: ;
     1453    11568    3   OALLOC_FAILED: ;
     1454    11569    3           ALTRETURN;
     1455    11570
     1456    11571    3   END MOVEMENT_OPTIONS;
     1457    11572
     1458    11573        %BOX (TITLE=MOVEMENT_OPERAND);

             11585    3   /***************************************************************************
             11587    3    *                                                                         *
             11591    3            *                              MOVEMENT_OPERAND                           *
             11593    3            *                                                                         *
             11595    3           ***************************************************************************/

     1459    11599
     1460    11600        /*I** NAME: MOVEMENT_OPERAND
     1461    11601            PARAMETERS:
     1462    11602                OPERAND - PARSE$OUT node for the operand to process.  Usually
     1463    11603                    this is the last child of a %T_MOVEMENT node; however,
     1464    11604                    it can also be a %T_LO_NAME node which appeared as the
     1465    11605                    first operand in a block expression (and so looked like
     1466    11606                    a domain operand), but whose value didn't specify a new
     1467    11607                    domain (and so wasn't processed earlier with the domain
     1468    11608                    operand).
     1469    11609            INPUT:
     1470    11610                Same as for MOVEMENTS.
     1471    11611                EVAL_OPTIONS must have been cleared, then filled with any
     1472    11612                    evaluation options seen for this operand.
     1473    11613                SRCH_SEEN and SKIP_SEEN must be set based on any SKIP or
     1474    11614                    FIND/MATCH options seen for this operand.
     1475    11615            OUTPUT:
     1476    11616                Same as for MOVEMENTS.
     1477    11617                IT_OPERAND$ and LAST_MOVEMENT$ will point to the VD$IT_OPERAND
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:43   
     1478    11618                    node for OPERAND.  It will be linked into the InTree;
     1479    11619                    its .OPTIONS will contain EVAL_OPTIONS.
     1480    11620            DESCRIPTION:
     1481    11621                See MOVEMENTS.
     1482    11622        */
     1483    11623
     1484    11624    2   MOVEMENT_OPERAND: PROC (OPERAND) ALTRET;
     1485    11625
     1486    11626        %PARSE$OUT (NAME=OPERAND, STCLASS=PARAM);
     1487    11671
     1488    11672
     1489    11673    3   DCL NUMBER SBIN;
     1490    11674    3   DCL ABS_MOVEMENT BIT(1) ALIGNED;
     1491    11675        %VD$KEY (NAME=KEY, STCLASS=AUTO);
     1492    11689    3   DCL KEY_BUFFER$ PTR;
     1493    11690    3   DCL RET_CODE CHAR(1) CALIGNED;
     1494    11691    3   DCL CTRL_ARGS(0:%(MX_CTRL_FN_ARGS-1)) UBIN;
     1495    11692    3   DCL ERR_CODE SBIN;
     1496    11693
     1497    11694
     1498    11695        %VD$KEY_NUMBER;
     1499    11710        %VD$BUFFER (NAME=KEY$BUFFER, STCLASS="BASED(KEY_BUFFER$)");
     1500    11768
     1501    11769                /*
     1502    11770                *   Fill in the "point" evaluation option:  it's common
     1503    11771                *       to all operands.
     1504    11772                */
     1505    11773
     1506    11774    3           IF EVAL_OPTIONS.POINT# = 0 THEN
     1507    11775    3              EVAL_OPTIONS.POINT# = VD_$POINT.V#;
     1508    11776
     1509    11777
     1510    11778                /*
     1511    11779                *   Process the operand to move over.
     1512    11780                */
     1513    11781
     1514    11782    3           CALL GUAR_LAST_ADJUST
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:44   
     1515    11783    3             ALTRET (GUAR_LAST_ADJUST_FAILED);
     1516    11784                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="OPERAND.CODE - %VD_BASE#");
     1517    11787    3           ABS_MOVEMENT = %FALSE;
     1518    11788    3           IT_OPERAND$ = ADDR(NIL);
     1519    11789
     1520    11790    3   MOVE_CHILD_CODE_CASES:
     1521    11791    4           DO CASE (OPERAND.CODE);
     1522    11792
     1523    11793    4            CASE (%T_LO_NAME);
     1524    11794    4              IF SKIP_SEEN
     1525    11795    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1526    11796    4                 GOTO LO_NAME_OPTS_NOT_LEGAL_FAILURE;
     1527    11797    4              CALL PLO_NAME (OPERAND)
     1528    11798    4                ALTRET (PLO_NAME_FAILED);
     1529    11799    4              ABS_MOVEMENT = %TRUE;
     1530    11800
     1531    11801
     1532    11802    4            CASE (%T_NUMERIC_KEY);
     1533    11803    4              IF SKIP_SEEN
     1534    11804    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1535    11805    4                 GOTO KEY_OPTIONS_NOT_LEGAL_FAILURE;
     1536    11806    4              CALL VDE$PNUMERIC_KEY (OPERAND, KEY)
     1537    11807    4                ALTRET (PNUMERIC_KEY_FAILED);
     1538    11808    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1539    11809    4                ALTRET (OALLOC_FAILED);
     1540    11810    4              IT_OPERAND$ = T$;
     1541    11811    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1542    11812    4              IT$OPERAND.CODE# = %OPAND_NODE;
     1543    11813    4              IT$OPERAND.KEY = KEY;
     1544    11814    4              ABS_MOVEMENT = %TRUE;
     1545    11815
     1546    11816
     1547    11817    4            CASE (%T_STRING_KEY);
     1548    11818    4              IF SKIP_SEEN
     1549    11819    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1550    11820    4                 GOTO KEY_OPTIONS_NOT_LEGAL_FAILURE;
     1551    11821                   /*
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:45   
     1552    11822                   *  Note that we don't know what kind of file this key is for;
     1553    11823                   *N*   it could be for a string-keyed file, or
     1554    11824                   *    it could be for a numeric-keyed file.  We'll just
     1555    11825                   *    store it as a string-key in the InTree; later, when the InTree
     1556    11826                   *    is evaluated, if the file is numeric keyed, we'll convert
     1557    11827                   *    the string key to a numeric key.
     1558    11828                   *  OPERAND is the T_STRING_KEY node below:
     1559    11829                   *
     1560    11830                   *                T_STRING_KEY
     1561    11831                   *                    |
     1562    11832                   *                T_STRING_EXPR
     1563    11833                   *                    |
     1564    11834                   *                 XUE_EXP
     1565    11835                   */
     1566    11836    4              KEY = %CLEAR;
     1567    11837    4              KEY.TYPE# = %KT_STRING;
     1568    11838    4              KEY.REP# = %REP_REMOTE;
     1569    11839    4              KEY.V$ = ADDR(NIL);
     1570    11840    4              KEY_BUFFER$ = ADDR(NIL);
     1571    11841    4              CALL VDE$PSTRING (OPERAND.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$BLK,
     1572    11842    4                NUMBER, KEY_BUFFER$, RET_CODE, CTRL_ARGS)
     1573    11843    5              WHENALTRETURN DO;
     1574    11844    5                 CALL VDG$OFREE (KEY$BUFFER)
     1575    11845    5                   ALTRET (OFREE_FAILED);
     1576    11846    5                 GOTO PSTRING_FAILED;
     1577    11847    5                 END;
     1578    11848    5              IF RET_CODE ~= %CHR_SPACE THEN DO;
     1579    11849    5                 CALL VDG$OFREE (KEY$BUFFER)
     1580    11850    5                   ALTRET (OFREE_FAILED);
     1581    11851    5                 GOTO CTRLFN_CONFLICTS_W_KEY_FAILURE;
     1582    11852    5                 END;
     1583    11853                   /* KEY.V$ must point to a VD$TEXTC_REMOTE, not a VD$BUFFER */
     1584    11854    4              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, KEY.V$,
     1585    11855    4                (LENGTHC(VD$STRING_HEADER) + KEY$BUFFER.LENGTH# +
     1586    11856    4                (%NB_PER_WORD-1)) / %NB_PER_WORD)
     1587    11857    4                ALTRET (OALLOC_FAILED);
     1588    11858    4              KEY.V$->VD$TEXTC_REMOTE.LENGTH# = KEY$BUFFER.LENGTH#;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:46   
     1589    11859    4              KEY.V$->VD$TEXTC_REMOTE.BYTES = KEY$BUFFER.BYTES;
     1590    11860    4              CALL VDG$OFREE (KEY$BUFFER)
     1591    11861    4                ALTRET (OFREE_FAILED);
     1592    11862
     1593    11863    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1594    11864    4                ALTRET (OALLOC_FAILED);
     1595    11865    4              IT_OPERAND$ = T$;
     1596    11866    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1597    11867    4              IT$OPERAND.CODE# = %OPAND_NODE;
     1598    11868    4              IT$OPERAND.KEY = KEY;
     1599    11869    4              ABS_MOVEMENT = %TRUE;
     1600    11870
     1601    11871
     1602    11872    4            CASE (%T_LEVEL_NAME);
     1603    11873                   /* Fill in the default options for relative operands */
     1604    11874    4              IF NOT SRCH_SEEN THEN
     1605    11875    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);
     1606    11876    4              IF NOT SKIP_SEEN THEN
     1607    11877    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;
     1608    11878    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN
     1609    11879    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;
     1610    11880
     1611    11881    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1612    11882    4                ALTRET (OALLOC_FAILED);
     1613    11883    4              IT_OPERAND$ = T$;
     1614    11884    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1615    11885    4              IT$OPERAND.CODE# = %OPAND_NODE;
     1616    11886
     1617    11887
     1618    11888    4            CASE (%T_POSITIONS);
     1619    11889                   /* Fill in the default options for relative operands */
     1620    11890    4              IF NOT SRCH_SEEN THEN
     1621    11891    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);
     1622    11892    4              IF NOT SKIP_SEEN THEN
     1623    11893    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;
     1624    11894    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN
     1625    11895    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:47   
     1626    11896
     1627    11897    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1628    11898    4                ALTRET (OALLOC_FAILED);
     1629    11899    4              IT_OPERAND$ = T$;
     1630    11900    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1631    11901    4              IT$OPERAND.CODE# = %OPAND_POSITION;
     1632    11902
     1633    11903    5              IF OPERAND.NSUBLKS > 0 THEN DO;
     1634    11904                      /* This is a specific position # */
     1635    11905    5                 IF OPERAND.SUBLK$(0)->OUT$BLK.CODE =
     1636    11906    6                   %T_STRING_EXPR THEN DO;
     1637    11907    6                    CALL VDE$PNUMBER (OPERAND.SUBLK$(0)->OUT$BLK,
     1638    11908    6                      NUMBER)
     1639    11909    7                    WHENALTRETURN DO;
     1640    11910    7                       CALL VDG$OFREE (IT$OPERAND)
     1641    11911    7                         ALTRET (OFREE_FAILED);
     1642    11912    7                       GOTO PNUMBER_FAILED;
     1643    11913    7                       END;
     1644    11914    6                    END;
     1645    11915    6                 ELSE DO;
     1646    11916    6                    CALL X$DEC_CONVERT (OPERAND.SUBLK$(0)->OUT$SYM.TEXTC$,
     1647    11917    6                      NUMBER)
     1648    11918    7                    WHENALTRETURN DO;
     1649    11919    7                       CALL VDG$OFREE (IT$OPERAND)
     1650    11920    7                         ALTRET (OFREE_FAILED);
     1651    11921    7                       GOTO DEC_CONVERT_FAILED;
     1652    11922    7                       END;
     1653    11923    6                    END;
     1654    11924    5                 IF NUMBER <= 0
     1655    11925    5                   OR NUMBER > %MXNB_DATA THEN
     1656    11926    5                    GOTO POSITION_NOT_IN_RANGE_FAILURE;
     1657    11927    5                 IT$OPERAND.KEY = %CLEAR;
     1658    11928    5                 IT$OPERAND.KEY.TYPE# = %KT_NUMBER;
     1659    11929    5                 IT$OPERAND.KEY.REP# = %REP_LOCAL;
     1660    11930    5                 ADDR(IT$OPERAND.KEY)->VD$KEY_NUMBER.LENGTH# = %NB_NUMERIC_KEY;
     1661    11931    5                 ADDR(IT$OPERAND.KEY)->VD$KEY_NUMBER.BYTES# = NUMBER - 1;
     1662    11932    5                 END;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:48   
     1663    11933
     1664    11934
     1665    11935    4            CASE (%T_PATTERN);
     1666    11936                   /* Fill in the default options for relative operands */
     1667    11937    4              IF NOT SRCH_SEEN THEN
     1668    11938    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);
     1669    11939    4              IF NOT SKIP_SEEN THEN
     1670    11940    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;
     1671    11941    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN
     1672    11942    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;
     1673    11943
     1674    11944    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1675    11945    4                ALTRET (OALLOC_FAILED);
     1676    11946    4              IT_OPERAND$ = T$;
     1677    11947    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1678    11948    4              IT$OPERAND.CODE# = %OPAND_PATTERN;
     1679    11949    4              CALL VDE$PPATTERN (OPERAND, IT$OPERAND.PARAM$)
     1680    11950    4                ALTRET (PPATTERN_FAILED);
     1681    11951
     1682    11952
     1683    11953    4            CASE (ELSE);
     1684    11954    4              CALL VDG$ESCREECH (OPERAND.CODE);
     1685    11955
     1686    11956    4            END MOVE_CHILD_CODE_CASES;
     1687    11957
     1688    11958
     1689    11959                /*
     1690    11960                *   Link the new IT$OPERAND node into InTree.
     1691    11961                */
     1692    11962
     1693    11963    4           IF ABS_MOVEMENT THEN DO;
     1694    11964    4              CALL ABS_IT_OPERAND
     1695    11965    4                ALTRET (ABS_IT_OPERAND_FAILED);
     1696    11966    4              END;
     1697    11967
     1698    11968    3           IT$OPERAND.PARENT$ = LAST_ADJUST$;
     1699    11969    3           IF LAST_MOVEMENT$ = ADDR(NIL) THEN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:49   
     1700    11970    3              LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;
     1701    11971    3           ELSE
     1702    11972    3              LAST$MOVEMENT.FLINK$ = IT_OPERAND$;
     1703    11973    3           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;
     1704    11974    3           LAST_MOVEMENT$ = IT_OPERAND$;
     1705    11975
     1706    11976    3           RETURN;
     1707    11977
     1708    11978
     1709    11979                %BOX (TITLE="Error Handlers");

             11991    3   /***************************************************************************
             11993    3    *                                                                         *
             11997    3            *                               Error Handlers                            *
             11999    3            *                                                                         *
             12001    3           ***************************************************************************/

     1710    12005
     1711    12006    3   LO_NAME_OPTS_NOT_LEGAL_FAILURE:
     1712    12007    3           ERR_CODE = %E$LO_NAME_OPTIONS_NOT_LEGAL;
     1713    12008    3           GOTO SERIOUS_USER_ERROR;
     1714    12009
     1715    12010    3   KEY_OPTIONS_NOT_LEGAL_FAILURE:
     1716    12011    3           ERR_CODE = %E$KEY_OPTIONS_NOT_LEGAL;
     1717    12012    3           GOTO SERIOUS_USER_ERROR;
     1718    12013
     1719    12014    3   CTRLFN_CONFLICTS_W_KEY_FAILURE:
     1720    12015    3           ERR_CODE = %E$CTRLFN_CONFLICTS_W_KEY;
     1721    12016    3           GOTO SERIOUS_USER_ERROR;
     1722    12017
     1723    12018    3   POSITION_NOT_IN_RANGE_FAILURE:
     1724    12019    3           ERR_CODE = %E$POSITION_VALUE_NOT_IN_RANGE;
     1725    12020    3           GOTO SERIOUS_USER_ERROR;
     1726    12021
     1727    12022
     1728    12023    3   SERIOUS_USER_ERROR:
     1729    12024    4           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:50   
     1730    12025    4              LAST$ERR.CMDLINE_INDEX# = OPERAND.CPOS;
     1731    12026    4              END;
     1732    12027
     1733    12028
     1734    12029    3   PPATTERN_FAILED:
     1735    12030    3           CALL VDG$OFREE (IT$OPERAND)
     1736    12031    3             ALTRET (OFREE_FAILED);
     1737    12032    3           ALTRETURN;
     1738    12033
     1739    12034
     1740    12035    3   GUAR_LAST_ADJUST_FAILED: ;
     1741    12036    3   PNUMBER_FAILED: ;
     1742    12037    3   PSTRING_FAILED: ;
     1743    12038    3   DEC_CONVERT_FAILED: ;
     1744    12039    3   PLO_NAME_FAILED: ;
     1745    12040    3   PNUMERIC_KEY_FAILED: ;
     1746    12041    3   ABS_IT_OPERAND_FAILED: ;
     1747    12042    3   OFREE_FAILED: ;
     1748    12043    3   OALLOC_FAILED: ;
     1749    12044    3           ALTRETURN;
     1750    12045
     1751    12046
     1752    12047                %BOX (TITLE=PLO_NAME);

             12059    3   /***************************************************************************
             12061    3    *                                                                         *
             12065    3            *                                  PLO_NAME                               *
             12067    3            *                                                                         *
             12069    3           ***************************************************************************/

     1753    12073
     1754    12074        /*I*** NAME: PLO_NAME
     1755    12075            PARAMETERS:
     1756    12076                PT_LO_NAME - PARSE$OUT node whose code is %T_LO_NAME.
     1757    12077            INPUT:
     1758    12078                EVAL_OPTIONS - VD$EVAL_OPTIONS containing values from the
     1759    12079                    T_MOVEMENT clause evaluation options seen so far.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:51   
     1760    12080                IT$BLOCK_EXPR - The VD$IT_BLOCK_EXPR root node of the InTree.
     1761    12081                    Its .DOMAINN must be %CLEAR, or must specify the domain
     1762    12082                    for this block expression.
     1763    12083                EDIT$BLOCK - If IT$BLOCK_EXPR.DOMAINN is %CLEAR, then EDIT$BLOCK
     1764    12084                    must specifiy the domain for this block expression.
     1765    12085                LAST$SELECT, LAST$ADJUST - The last IT_SELECT and IT_ADJUST
     1766    12086                    nodes in the InTree currently.  They must exist.
     1767    12087            OUTPUT:
     1768    12088                If no errors found:
     1769    12089                    IT_OPERAND$ and LAST_MOVEMENT$ will point to the VD$IT_OPERAND
     1770    12090                        node for the LO-name.  It will NOT be linked into the
     1771    12091                        InTree yet; its .OPTIONS will contain EVAL_OPTIONS.
     1772    12092                        Its .CODE# will be either:
     1773    12093                        o %OPAND_LO_NAME; its .KEY will be the key for level 1
     1774    12094                            of the Locations-file for the name.
     1775    12095                        o %OPAND_BLOCK_DESC; its .PARAM$ will point to the
     1776    12096                            VD_BLOCK_DESC which is the value of this operand.
     1777    12097            DESCRIPTION:
     1778    12098                The PT_LO_NAME node must have one child:  an OUT$SYM node
     1779    12099                containing the Location-name.
     1780    12100
     1781    12101                Procedure:
     1782    12102                During the parse, VDI$PUSER_PARSE_RTN should have verified
     1783    12103                    that the name exists in the Locations-file before
     1784    12104                    accepting the T_LO_NAME parse node.
     1785    12105                Read the name from the Locations-file.
     1786    12106                Verify that the file containing the name's value is the same
     1787    12107                    as the file containing the domain of the current block
     1788    12108                    expression.
     1789    12109                Allocate an IT$OPERAND node, and store the name as a key
     1790    12110                    into the Locations-file in the IT$OPERAND node.
     1791    12111                If the name isn't writable by the user and doesn't start
     1792    12112                    with a dollar sign, then make a copy of the name's
     1793    12113                    value (a VD$BLOCK_DESC) and point IT$OPERAND to the copy.
     1794    12114                    This is done for CURRENT, HERE, and THAT because they
     1795    12115                    refer to the respective value at the start of command
     1796    12116                    processing.  Other LO-name references are dynamically
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:52   
     1797    12117                    re-evaluated (re-read from the Locations-file) each
     1798    12118                    time they're referenced during block expression evaluation.
     1799    12119                    (This is useful both for the $ENCLOSING, $FP, and $RANGE
     1800    12120                    names, whose values change during evaluation, and for
     1801    12121                    user-defined names in repeated block expressions, whose
     1802    12122                    values may change for each repetition of the evaluation
     1803    12123                    of the block expression.)
     1804    12124        */
     1805    12125
     1806    12126    3   PLO_NAME: PROC (PT_LO_NAME) ALTRET;
     1807    12127
     1808    12128        %PARSE$OUT (NAME=PT_LO_NAME, STCLASS=PARAM);
     1809    12173
     1810    12174
     1811    12175    4   DCL PT_SYMBOL$ PTR;
     1812    12176    4   DCL BLOCK_DESC$ PTR;
     1813    12177    4   DCL NAME_NODE$ PTR;
     1814    12178    4   DCL LO_NAME_FILE_KEY$ PTR;
     1815    12179    4   DCL DOMAIN_FILE_KEY$ PTR;
     1816    12180    4   DCL INDX SBIN;
     1817    12181
     1818    12182
     1819    12183        %PARSE$SYM (NAME=PT$SYMBOL, STCLASS="BASED(PT_SYMBOL$)");
     1820    12221        %VD$BLOCK_DESC (NAME=BLOCK$DESC, STCLASS="BASED(BLOCK_DESC$)");
     1821    12368        %VD$FILE_NODE (NAME=NAME$NODE, STCLASS="BASED(NAME_NODE$)");
     1822    12461        %VD$TEXTC (NAME=LO$NAME_FILE_KEY, STCLASS="BASED(LO_NAME_FILE_KEY$)");
     1823    12484        %VD$TEXTC (NAME=DOMAIN$FILE_KEY, STCLASS="BASED(DOMAIN_FILE_KEY$)");
     1824    12507        %VD$TEXTC;
     1825    12530
     1826    12531
     1827    12532
     1828    12533    4           PT_SYMBOL$ = PT_LO_NAME.SUBLK$ (0);
     1829    12534    4           CALL VDE$PREAD_LO_NAME (PT$SYMBOL.TEXTC$->VD$TEXTC,
     1830    12535    4             BLOCK_DESC$, NAME_NODE$)
     1831    12536    4             ALTRET (PREAD_LO_NAME_FAILED);
     1832    12537
     1833    12538                %GETKEY (KEY=BLOCK$DESC.FILE_KEY, PTR=LO_NAME_FILE_KEY$);
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:53   
     1834    12548    5           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;
     1835    12549                   %GETKEY (KEY=EDIT$BLOCK.FILE_KEY, PTR=DOMAIN_FILE_KEY$);
     1836    12559    5              END;
     1837    12560    5           ELSE DO;
     1838    12561                   %GETKEY (KEY=IT$BLOCK_EXPR.DOMAINN.FILE_KEY,
     1839    12562                   PTR=DOMAIN_FILE_KEY$);
     1840    12572    5              END;
     1841    12573    4           IF LO$NAME_FILE_KEY.BYTES ~= DOMAIN$FILE_KEY.BYTES THEN
     1842    12574    4              GOTO DOMAIN_OPAND_NOT_1ST_FAILURE;
     1843    12575
     1844    12576    4           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
     1845    12577    4             ALTRET (OALLOC_FAILED);
     1846    12578    4           IT_OPERAND$ = T$;
     1847    12579    4           IT$OPERAND.OPTIONS = EVAL_OPTIONS;
     1848    12580
     1849    12581    4           IF NAME$NODE.ACCESS (%NAC_WRITE)
     1850    12582    5             OR SUBSTR(PT$SYMBOL.TEXT, 0, 1) = %CHR_DOLLAR THEN DO;
     1851    12583    5              IT$OPERAND.CODE# = %OPAND_LO_NAME;
     1852    12584    5              IT$OPERAND.KEY.TYPE# = %KT_STRING;
     1853    12585    5              IT$OPERAND.KEY.REP# = %REP_REMOTE;
     1854    12586    5              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, IT$OPERAND.KEY.V$,
     1855    12587    5                (LENGTHC(VD$STRING_HEADER) + PT$SYMBOL.COUNT + %NB_PER_WORD-1) /
     1856    12588    5                %NB_PER_WORD)
     1857    12589    5                ALTRET (OALLOC_FAILED);
     1858    12590    5              IT$OPERAND.KEY.V$->VD$TEXTC_REMOTE.LENGTH# = PT$SYMBOL.COUNT;
     1859    12591    5              IT$OPERAND.KEY.V$->VD$TEXTC_REMOTE.BYTES = PT$SYMBOL.TEXT;
     1860    12592    5              END;
     1861    12593    5           ELSE DO;
     1862    12594                   /* Name refers to value at start of command:  save current value */
     1863    12595    5              IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;
     1864    12596    5              CALL VDG$OCOPY (BLOCK$DESC, IT$OPERAND.PARAM$)
     1865    12597    5                ALTRET (OCOPY_FAILED);
     1866    12598    5              END;
     1867    12599
     1868    12600    4           RETURN;
     1869    12601
     1870    12602
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:54   
     1871    12603
     1872    12604    4   DOMAIN_OPAND_NOT_1ST_FAILURE:
     1873    12605
     1874    12606    4           INDX = 0;
     1875    12607    5           DO WHILE INDX < %(MX_CMD_OBJECTS-1)
     1876    12608    5             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     1877    12609    5              INDX = INDX + 1;
     1878    12610    5              END;
     1879    12611    4           IF INDX >= %MX_CMD_OBJECTS - 1 THEN
     1880    12612    4              CALL VDG$ESCREECH;
     1881    12613    4           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, T$,
     1882    12614    4             (LENGTHC(VD$STRING_HEADER) + PT$SYMBOL.COUNT + %NB_PER_WORD-1) /
     1883    12615    4             %NB_PER_WORD)
     1884    12616    4             ALTRET (OALLOC_FAILED);
     1885    12617    4           VD_CMD_OBJECTS$ (INDX) = T$;
     1886    12618    4           VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.LENGTH# = PT$SYMBOL.COUNT;
     1887    12619    4           VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.BYTES = PT$SYMBOL.TEXT;
     1888    12620    4           CALL VDG$ERRMSG (%E$DOMAIN_OPAND_NOT_1ST,
     1889    12621    5             VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.LENGTH#) WHENRETURN DO;
     1890    12622    5              LAST$ERR.CMDLINE_INDEX# = PT_LO_NAME.CPOS;
     1891    12623    5              END;
     1892    12624
     1893    12625
     1894    12626    4   PREAD_LO_NAME_FAILED: ;
     1895    12627    4   OCOPY_FAILED: ;
     1896    12628    4   OALLOC_FAILED: ;
     1897    12629    4           ALTRETURN;
     1898    12630
     1899    12631
     1900    12632    4   END PLO_NAME;
     1901    12633
     1902    12634                %BOX (TITLE=ABS_IT_OPERAND);

             12646    4   /***************************************************************************
             12648    4    *                                                                         *
             12652    4            *                               ABS_IT_OPERAND                            *
             12654    4            *                                                                         *
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:55   
             12656    4           ***************************************************************************/

     1903    12660
     1904    12661        /*I*** NAME: ABS_IT_OPERAND
     1905    12662            PARAMETERS:
     1906    12663                None.
     1907    12664            INPUT:
     1908    12665                IT$BLOCK_EXPR - The IT_BLOCK_EXPR root node for the InTree.
     1909    12666                LAST_SELECT$, LAST$SELECT - (Ptr to) last IT_SELECT node in
     1910    12667                    InTree (it must exist).
     1911    12668                LAST_ADJUST$, LAST$ADJUST - (Ptr to) last child of LAST$SELECT
     1912    12669                    (it must exist).
     1913    12670                LAST_MOVEMENT$, LAST$MOVEMENT - (Ptr to) last child of
     1914    12671                    LAST$ADJUST; NIL if none.
     1915    12672                IT$OPERAND - The movement-level node for the absolute movement
     1916    12673                    request.  It must not yet be linked to the InTree.
     1917    12674                    It must represent an absolute movement operand (a node-key,
     1918    12675                    or a LOCATION-name or block descriptor whose domain matches
     1919    12676                    the current domain for the InTree).
     1920    12677            OUTPUT:
     1921    12678                The InTree will be altered.
     1922    12679                LAST_MOVEMENT$ and SAVED_LAST_MOVEMENT$ will be changed
     1923    12680                    to reflect the modified InTree.
     1924    12681            DESCRIPTION:
     1925    12682                Free the movement-level nodes which are the children of
     1926    12683                    LAST$ADJUST.
     1927    12684                    This discards any previous absolute or relative movement
     1928    12685                    operands for this adjustment of this SELECT clause.
     1929    12686                    However, if:
     1930    12687                    o IT$OPERAND doesn't include a domain spec (ie, is a key
     1931    12688                        spec only);
     1932    12689                    o AND there is only one IT_SELECT node and only one
     1933    12690                        IT_ADJUST node in the entire InTree;
     1934    12691                    o AND the first IT$OPERAND node in the InTree is an explicit
     1935    12692                        domain spec (ie, file, block descriptor, or LOCATION-name);
     1936    12693                    then don't free that first IT$OPERAND node in the InTree.
     1937    12694                    This preserves any domain-spec info given for the block
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:56   
     1938    12695                    expression.
     1939    12696        */
     1940    12697
     1941    12698    3   ABS_IT_OPERAND: PROC ALTRET;
     1942    12699
     1943    12700
     1944    12701    4   DCL CURR_MOVE$ PTR;
     1945    12702
     1946    12703
     1947    12704        %VD$IT_OPERAND (NAME=CURR$MOVE, STCLASS="BASED(CURR_MOVE$)");
     1948    12770
     1949    12771
     1950    12772
     1951    12773    4           IF IT$BLOCK_EXPR.SELECTS$ ~= LAST_SELECT$ THEN
     1952    12774    4              GOTO ABS_SEL_NOT_1ST_FAILURE;
     1953    12775    4           IF IT$OPERAND.CODE# = %OPAND_NODE
     1954    12776    4             AND LAST$SELECT.ADJUSTS$ = LAST_ADJUST$
     1955    12777    5             AND LAST$ADJUST.MOVEMENTS$ ~= ADDR(NIL) THEN DO;
     1956    12778    5              CURR_MOVE$ = LAST$ADJUST.MOVEMENTS$;
     1957    12779    5              IF CURR$MOVE.CODE# = %OPAND_FILE
     1958    12780    5                OR CURR$MOVE.CODE# = %OPAND_LO_NAME
     1959    12781    5                OR CURR$MOVE.CODE# = %OPAND_BLOCK_DESC THEN
     1960    12782    6   FIRST_MOVEMENT_IS_DOMAIN: DO;
     1961    12783    6                 CALL VDG$OFREE (CURR$MOVE.FLINK$->VD$IT_OPERAND)
     1962    12784    6                   ALTRET (OFREE_FAILED);
     1963    12785    6                 CURR$MOVE.FLINK$ = ADDR(NIL);
     1964    12786    6                 LAST$ADJUST.MOVEMENTS_TAIL$ = CURR_MOVE$;
     1965    12787    6                 LAST_MOVEMENT$ = CURR_MOVE$;
     1966    12788    6                 END FIRST_MOVEMENT_IS_DOMAIN;
     1967    12789    5              END;
     1968    12790    4           ELSE
     1969    12791    5   PRUNE_ALL_MOVEMENTS: DO;
     1970    12792    5              CALL VDG$OFREE (LAST$ADJUST.MOVEMENTS$ -> VD$IT_OPERAND)
     1971    12793    5                ALTRET (OFREE_FAILED);
     1972    12794    5              LAST$ADJUST.MOVEMENTS$ = ADDR(NIL);
     1973    12795    5              LAST$ADJUST.MOVEMENTS_TAIL$ = ADDR(NIL);
     1974    12796    5              LAST_MOVEMENT$ = ADDR(NIL);
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:57   
     1975    12797    5              END PRUNE_ALL_MOVEMENTS;
     1976    12798    4           RETURN;
     1977    12799
     1978    12800
     1979    12801
     1980    12802    4   ABS_SEL_NOT_1ST_FAILURE:
     1981    12803    4           CALL VDG$ERRMSG (%E$ABS_SEL_NOT_1ST);
     1982    12804
     1983    12805
     1984    12806    4   OFREE_FAILED: ;
     1985    12807    4           ALTRETURN;
     1986    12808
     1987    12809    4   END ABS_IT_OPERAND;
     1988    12810
     1989    12811    3   END MOVEMENT_OPERAND;
     1990    12812
     1991    12813    2   END MOVEMENTS;
     1992    12814
     1993    12815                %BOX (TITLE=GUAR_LAST_ADJ, PAGE=YES);
             12823    2
             12827    2   /***************************************************************************
             12829    2    *                                                                         *
             12833    2            *                               GUAR_LAST_ADJ                             *
             12835    2            *                                                                         *
             12837    2           ***************************************************************************/

     1994    12841
     1995    12842        /*I* NAME: GUAR_LAST_ADJUST
     1996    12843            PARAMETERS:
     1997    12844                None.
     1998    12845            INPUT:
     1999    12846                IT$BLOCK_EXPR - Root VD$IT_BLOCK_EXPR node of the InTree.  It
     2000    12847                    must exist.
     2001    12848                LAST_SELECT$, LAST$SELECT - (Ptr to) last VD$IT_SELECT node in
     2002    12849                    the InTree.  If none yet, LAST_SELECT$ must be NIL.
     2003    12850                LAST_ADJUST$, LAST$ADJUST - (Ptr to) last VD$IT_ADJUST node in
     2004    12851                    the InTree.  If none yet, LAST_ADJUST$ must be NIL.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:58   
     2005    12852            OUTPUT:
     2006    12853                LAST_SELECT$ will contain a ptr to the last IT_SELECT node
     2007    12854                    in the InTree.  If there was none before, there will be
     2008    12855                    one now, linked to the InTree as the first IT_SELECT node.
     2009    12856                LAST_ADJUST$ will contain a ptr to the last IT_ADJUST child of
     2010    12857                    the last IT_SELECT node in the InTree.  If there was
     2011    12858                    none before, there will be one now, linked to the InTree as
     2012    12859                    the first IT_ADJUST child of the current last IT_SELECT node.
     2013    12860        *??*         If we had to create a new IT_SELECT node, then LAST$ADJUST
     2014    12861        *??*         will have a copy of HERE's current value as its first
     2015    12862        *??*         IT_OPERAND node.
     2016    12863            DESCRIPTION:
     2017    12864                Guarantee that an IT_SELECT node exists in the InTree.
     2018    12865
     2019    12866                If the last IT_SELECT node in the InTree has no IT_ADJUST
     2020    12867                children, allocate an IT_ADJUST node.
     2021    12868        */
     2022    12869
     2023    12870    1   GUAR_LAST_ADJUST: PROC ALTRET;
     2024    12871
     2025    12872
     2026    12873
     2027    12874    2           CALL GUAR_LAST_SELECT
     2028    12875    2             ALTRET (GUAR_LAST_SELECT_FAILED);
     2029    12876
     2030    12877    3           IF LAST_ADJUST$ = ADDR(NIL) THEN DO;
     2031    12878    3              CALL ALLOC_IT_ADJUST
     2032    12879    3                ALTRET (ALLOC_IT_ADJUST_FAILED);
     2033    12880    3              END;
     2034    12881
     2035    12882    2           RETURN;
     2036    12883
     2037    12884
     2038    12885
     2039    12886    2   GUAR_LAST_SELECT_FAILED: ;
     2040    12887    2   ALLOC_IT_ADJUST_FAILED:
     2041    12888    2           ALTRETURN;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:59   
     2042    12889
     2043    12890    2   END GUAR_LAST_ADJUST;
     2044    12891
     2045    12892
     2046    12893                %BOX (TITLE=GUAR_LAST_SELECT, PAGE=YES);
             12901    2
             12905    2   /***************************************************************************
             12907    2    *                                                                         *
             12911    2            *                              GUAR_LAST_SELECT                           *
             12913    2            *                                                                         *
             12915    2           ***************************************************************************/

     2047    12919
     2048    12920        /*I* NAME: GUAR_LAST_SELECT
     2049    12921            PARAMETERS:
     2050    12922                None.
     2051    12923            INPUT:
     2052    12924                IT$BLOCK_EXPR - Root VD$IT_BLOCK_EXPR node of the InTree.  It
     2053    12925                    must exist.
     2054    12926                LAST_SELECT$, LAST$SELECT - (Ptr to) last VD$IT_SELECT node in
     2055    12927                    the InTree.  If none yet, LAST_SELECT$ must be NIL.
     2056    12928            OUTPUT:
     2057    12929                LAST_SELECT$ will contain a ptr to the last IT_SELECT node
     2058    12930                    in the InTree.  If there was none before, there will be
     2059    12931                    one now, linked to the InTree as the first IT_SELECT node,
     2060    12932                    with a repeat count of 1.
     2061    12933                LAST_ADJUST$, LAST_MOVEMENT$ - If we had to create a new
     2062    12934                    IT_SELECT node, these pointers will be NIL.
     2063    12935        *??*         If we had to create a new IT_SELECT node, then LAST$ADJUST
     2064    12936        *??*         will have a copy of HERE's current value as its first
     2065    12937        *??*         IT_OPERAND node, which will be LAST$MOVEMENT.
     2066    12938            DESCRIPTION:
     2067    12939                If there is no last IT_SELECT node in the Intree, allocate one.
     2068    12940        *??*     Allocate an IT_ADJUST and IT_OPERAND for it which point
     2069    12941        *??*     to a copy of HERE's current value.
     2070    12942        */
     2071    12943
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:60   
     2072    12944    1   GUAR_LAST_SELECT: PROC ALTRET;
     2073    12945
     2074    12946
     2075    12947
     2076    12948    3           IF LAST_SELECT$ = ADDR(NIL) THEN DO;
     2077    12949    3              CALL ALLOC_IT_SELECT
     2078    12950    3                ALTRET (ALLOC_IT_SELECT_FAILED);
     2079    12951    3              LAST$SELECT.RPT_COUNT# = 1;
     2080    12952        /*??*         CALL ATTACH_HERE_TO_SELECT (LAST_SELECT$->LAST$SELECT) */
     2081    12953        /*??*           ALTRET (ATTACH_HERE_TO_SELECT_FAILED);               */
     2082    12954    3              END;
     2083    12955
     2084    12956    2           RETURN;
     2085    12957
     2086    12958
     2087    12959
     2088    12960    2   ALLOC_IT_SELECT_FAILED: ;
     2089    12961        /* ATTACH_HERE_TO_SELECT_FAILED: ;  */
     2090    12962    2           ALTRETURN;
     2091    12963
     2092    12964    2   END GUAR_LAST_SELECT;
     2093    12965
     2094    12966        %BOX (TITLE=ALLOC_IT_ADJUST, PAGE=YES);
             12974    2
             12978    2   /***************************************************************************
             12980    2    *                                                                         *
             12984    2            *                              ALLOC_IT_ADJUST                            *
             12986    2            *                                                                         *
             12988    2           ***************************************************************************/

     2095    12992
     2096    12993        /*I* NAME: ALLOC_IT_ADJUST
     2097    12994            PARAMETERS:
     2098    12995                None.
     2099    12996            INPUT:
     2100    12997                LAST$SELECT - The IT_SELECT node for which this IT_ADJUST
     2101    12998                    node is to be allocated.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:61   
     2102    12999                LAST_ADJUST$ - Ptr to current last IT_ADJUST node in the
     2103    13000                    InTree.  If none, LAST_ADJUST$ must be NIL.
     2104    13001            OUTPUT:
     2105    13002                LAST_ADJUST$ will contain a pointer to the newly-allocated
     2106    13003                    and initialized IT_ADJUST node.
     2107    13004                LAST_MOVEMENT$ will be NIL'd.
     2108    13005            DESCRIPTION:
     2109    13006                Allocate an IT_ADJUST node.  Link it as either
     2110    13007                the sibling of the LAST_ADJUST$, or if that's NIL,
     2111    13008                as the child of IT$SELECT.
     2112    13009        */
     2113    13010
     2114    13011    1   ALLOC_IT_ADJUST: PROC ALTRET;
     2115    13012
     2116    13013
     2117    13014    2   DCL NEW_ADJUST$ PTR;
     2118    13015
     2119    13016
     2120    13017        %VD$IT_ADJUST (NAME=NEW$ADJUST, STCLASS="BASED(NEW_ADJUST$)");
     2121    13054
     2122    13055
     2123    13056
     2124    13057    2           CALL VDG$OALLOC (%CLS_IT_ADJUST, T$)
     2125    13058    2             ALTRET (OALLOC_FAILED);
     2126    13059    2           NEW_ADJUST$ = T$;
     2127    13060
     2128    13061    2           NEW$ADJUST.PARENT$ = LAST_SELECT$;
     2129    13062    2           IF LAST_ADJUST$ = ADDR(NIL) THEN
     2130    13063    2              LAST$SELECT.ADJUSTS$ = NEW_ADJUST$;
     2131    13064    2           ELSE
     2132    13065    2              LAST$ADJUST.FLINK$ = NEW_ADJUST$;
     2133    13066    2           LAST$SELECT.ADJUSTS_TAIL$ = NEW_ADJUST$;
     2134    13067    2           LAST_ADJUST$ = NEW_ADJUST$;
     2135    13068    2           LAST_MOVEMENT$ = ADDR(NIL);
     2136    13069
     2137    13070    2           RETURN;
     2138    13071
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:62   
     2139    13072
     2140    13073    2   OALLOC_FAILED:
     2141    13074    2           ALTRETURN;
     2142    13075
     2143    13076    2   END ALLOC_IT_ADJUST;
     2144    13077
     2145    13078        %BOX (TITLE=ALLOC_IT_SELECT, PAGE=YES);
             13086    2
             13090    2   /***************************************************************************
             13092    2    *                                                                         *
             13096    2            *                              ALLOC_IT_SELECT                            *
             13098    2            *                                                                         *
             13100    2           ***************************************************************************/

     2146    13104
     2147    13105        /*I* NAME: ALLOC_IT_SELECT
     2148    13106            PARAMETERS:
     2149    13107                None.
     2150    13108            INPUT:
     2151    13109                IT$BLOCK_EXPR - The IT_BLOCK_EXPR node for which this IT_SELECT
     2152    13110                    node is to be allocated.
     2153    13111                LAST_SELECT$ - Ptr to current last IT_SELECT node in the
     2154    13112                    InTree.  If none, LAST_SELECT$ must be NIL.
     2155    13113            OUTPUT:
     2156    13114                LAST_SELECT$ will contain a pointer to the newly-allocated
     2157    13115                    and initialized IT_SELECT node.
     2158    13116                LAST_ADJUST$ and LAST_MOVEMENT$ will be NIL'd.
     2159    13117            DESCRIPTION:
     2160    13118                Allocate an IT_SELECT node.  Link it as either
     2161    13119                the sibling of LAST_SELECT$, or if that's NIL,
     2162    13120                as the child of IT$BLOCK_EXPR.
     2163    13121        */
     2164    13122
     2165    13123    1   ALLOC_IT_SELECT: PROC ALTRET;
     2166    13124
     2167    13125
     2168    13126    2   DCL NEW_SELECT$ PTR;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:63   
     2169    13127
     2170    13128
     2171    13129        %VD$IT_SELECT (NAME=NEW$SELECT, STCLASS="BASED(NEW_SELECT$)");
     2172    13166
     2173    13167
     2174    13168
     2175    13169    2           CALL VDG$OALLOC (%CLS_IT_SELECT, T$)
     2176    13170    2             ALTRET (OALLOC_FAILED);
     2177    13171    2           NEW_SELECT$ = T$;
     2178    13172
     2179    13173    2           NEW$SELECT.PARENT$ = IT_BLOCK_EXPR$;
     2180    13174    2           IF LAST_SELECT$ = ADDR(NIL) THEN
     2181    13175    2              IT$BLOCK_EXPR.SELECTS$ = NEW_SELECT$;
     2182    13176    2           ELSE
     2183    13177    2              LAST$SELECT.FLINK$ = NEW_SELECT$;
     2184    13178    2           IT$BLOCK_EXPR.SELECTS_TAIL$ = NEW_SELECT$;
     2185    13179    2           LAST_SELECT$ = NEW_SELECT$;
     2186    13180    2           LAST_ADJUST$ = ADDR(NIL);
     2187    13181    2           LAST_MOVEMENT$ = ADDR(NIL);
     2188    13182
     2189    13183    2           RETURN;
     2190    13184
     2191    13185
     2192    13186
     2193    13187    2   OALLOC_FAILED: ;
     2194    13188    2           ALTRETURN;
     2195    13189
     2196    13190    2   END ALLOC_IT_SELECT;
     2197    13191
     2198    13192    1   END VDE$PBLOCK_EXPR;
     2199    13193        %EOD;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:64   
--  Include file information  --

   XUE_MACRO_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PBLOCK_EXPR.

   Procedure VDE$PBLOCK_EXPR requires 2035 words for executable code.
   Procedure VDE$PBLOCK_EXPR requires 54 words of local(AUTO) storage.

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:65   

 Object Unit name= VDE$PBLOCK_EXPR                            File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:13:47.52 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      2      2  VDE$PBLOCK_EXPR
    1   Proc  even  none  2035   3763  VDE$PBLOCK_EXPR
    2  RoData even  none    40     50  VDE$PBLOCK_EXPR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  VDE$PBLOCK_EXPR
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:66   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 VDE$PNUMERIC_KEY
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       4 VDA$FOPEN
 yes     yes           Std       2 VDA$LDELETE
 yes     yes           Std       5 VDE$PSTRING
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       3 VDE$PREAD_LO_NAME
 yes     yes           Std       3 VDE$PFILE_TO_EDIT
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       2 VDE$PNUMBER
 yes     yes           Std       2 VDE$PPATTERN
 yes     yes           Std       2 X$DEC_CONVERT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_CURRENT_WINDOW$                    XUE_ECB
     VD_KEY_NUMERIC_BOF                    VD_$COMPONENT                         VD_$DIRECTION
     VD_$EXIST                             VD_$POINT                             VD_$PROTECT
     VD_$SEARCH                            VD_$SKIP                              VD_$STRUCTURE
     VD_ACCESSOR_PRIV                      VD_FKEY_SCRATCH_SOURCE                VD_KEY_SCRATCH_SOURCE
     VD_CMD_OBJECTS$                       B_VECTNIL
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:67   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:68   


        1        1        /*M* VDE$PARSE - Process the ParseTree for a block expression */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDE$PARSE
       12       12            PURPOSE:  Process the ParseTree for a block expression.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDE$PBLOCK_EXPR
       17       17                Parses an entire block expression, turning it into an InTree.
       18       18
       19       19                VDE$PPATTERN
       20       20                Given a T_PATTERN node from the parse tree, will
       21       21                compile the pattern into a VD$PATTERN structure.
       22       22
       23       23                VDE$PPATT_STRING and VDE$PPATT_STRING_EXPR
       24       24                Builds a VD$PATTERN from a pattern string.  This routine is
       25       25                made external so it can call itself recursively.
       26       26
       27       27                VDE$PXUE_EXP
       28       28                Parses string expressions (X$EVAL).  Contains two entry-points:
       29       29                    VDE$PNUMBER evaluates an expression and converts it
       30       30                        to an SBIN word.  Doesn't support $CONTROL-functions
       31       31                        in the expression.
       32       32                    VDE$PSTRING evaluates an expression and converts it
       33       33                        to a set of VD$BUFFERs.  Each call to VDE$PSTRING
       34       34                        returns the next VD$BUFFER for the expression.
       35       35                        Supports $CONTROL-functions in the expression.
       36       36
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:69   
       37       37                VDE$PNUMERIC_KEY
       38       38                Parses numeric keys.  These may be consecutive record
       39       39                numbers or edit keys:  at parse time we don't know which
       40       40                kind of key the user gave us.
       41       41
       42       42                VDE$PFILE_TO_EDIT
       43       43                Parses a fid for a file to edit.  M$FIDs it into constituent parts
       44       44                and builds a VD$FILE_KEY for the fid.  Optionally sets up a VD$RANGE
       45       45                covering the entire file.
       46       46
       47       47                VDE$PREAD_LO_NAME
       48       48                Look up a name in the Locations file.  If found, return a pointer
       49       49                to its VD$BLOCK_DESC (unwinds any indirect representations, like
       50       50                VD$POINTER, or VD$BUFFER containing the VD$BLOCK_DESC, etc).
       51       51
       52       52                VDE$PREAD_NAME_FOR_EVAL
       53       53                When X$EVAL sees a name reference in a string expression,
       54       54                it calls this routine to find the value of the name.
       55       55                This routine reads the Equals *N* and Locations *N* files
       56       56                for the name, and returns its value to X$EVAL.
       57       57
       58       58                VDE$PFUNCTIONS
       59       59                When X$EVAL sees a 6Edit function invocation in a string expression,
       60       60                it calls this routine to compute the value of the function.
       61       61        */
       62       62
       63       63        /*D* NAME: VDE$PBLOCK_EXPR
       64       64            PARAMETERS:
       65       65                PT_BLOCK_EXPR - %PARSE$OUT which is root node of the ParseTree
       66       66                    for the block expression to evaluate.  Must have a
       67       67                    .CODE of either %T_BLOCK_EXPR or %T_STRING_EXPR.
       68       68            INPUT:
       69       69                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
       70       70                    Windows internal file.  The Spec for this node points to
       71       71                    the VD$WINDOW_SPEC for the current editing window.  There
       72       72                    must be such a window, tho it needn't be editing anything
       73       73                    yet (no EditBlock, Selecting, or InTree).
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:70   
       74       74                CURR$WINDOW.OPERAND.INTREE$ must be NIL at entry.
       75       75                CURR$WINDOW.OPERAND.EDIT_BLOCK$ will be nil if there
       76       76                    is no EditBlock yet; non-nil otherwise.
       77       77                CURR$WINDOW.OPERAND.EVAL$ will be nil if there
       78       78                    is no EditBlock yet; non-nil otherwise.
       79       79                    If non-nil, it's VD$EVAL has the range left by the
       80       80                    VDE$Ixxx routines after evaluating the block expr
       81       81                    of the previous command, with a state of
       82       82                    %EVST_INITIAL.  None of the VDE$Pxxx routines will
       83       83                    refer to this VD$EVAL.
       84       84            OUTPUT:
       85       85                The current window will be modified to reflect the new block
       86       86                    expression.  Specifically:
       87       87                    o Ptr to the InTree for the range of the block
       88       88                        expression.  This InTree will contain at least
       89       89                        a VD$IT_BLOCK_EXPR node.  It's .OPTIONS will be
       90       90                        filled in, either from user input or from defaults.
       91       91                    o If this block expression legally specifies a different
       92       92                        domain than the window's current EditBlock, then
       93       93                        IT_BLOCK_EXPR.DOMAINN will be non-%CLEAR.
       94       94                    o If this block expression has moved beyond the
       95       95                        DOMAIN_OPERAND portion of the block expression
       96       96                        syntax, then IT_BLOCK_EXPR.SELECTS$ will be non-nil.
       97       97                    The window in this form is ready for VDE$IOPEN.
       98       98                If any recoverable errors are found, the entire InTree will be
       99       99                    freed.
      100      100            DESCRIPTION:
      101      101                PT_BLOCK_EXPR is either a %T_STRING_EXPR node or a
      102      102                %T_BLOCK_EXPR node with one or more children, as shown below:
      103      103
      104      104                STRING_EXPR
      105      105                    |
      106      106                 XUE_EXP
      107      107
      108      108                or:
      109      109
      110      110                                       BLOCK_EXPR
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:71   
      111      111                                            |
      112      112                   ----------------------------------------------------->
      113      113                   |           |            |
      114      114                PROTECT    STRUCTURE      one of:
      115      115                   |           |         o NEXT
      116      116                  DONT        name       o PREVIOUS
      117      117                \__in either order__/    o LO_NAME
      118      118                                              |
      119      119                                             name
      120      120
      121      121                                           { NEW }
      122      122                                         o { OLD }  FILE_FID
      123      123                                           { ANY }     |
      124      124                                                      fid
      125      125
      126      126
      127      127                >----------------------------------------------------
      128      128                   |          |          |             |            |
      129      129                MOVEMENT    one of:   MOVEMENT   SELECT_CLAUSE   KEY_INCR
      130      130                           o THRU                      |
      131      131                           o ADJUST                  REPEAT
      132      132                          \__________________/         |
      133      133                             may be repeated      STRING_EXPR
      134      134                \                                            /
      135      135                 \__________________________________________/
      136      136                            may be repeated
      137      137
      138      138                o All of the child-nodes of T_BLOCK_EXPR are optional,
      139      139                    except that at least one will always be present if
      140      140                    T_BLOCK_EXPR is present.
      141      141                o The MOVEMENT's above may be repeated any number of times.
      142      142                o If the MOVEMENT's following THRU and ADJUST are present,
      143      143                    then the THRU or ADJUST nodes must precede them.
      144      144                o The DONT child of PROTECT is optional.
      145      145                o The REPEAT child of SELECT_CLAUSE is optional.  If present,
      146      146                    its STRING_EXPR child is optional.
      147      147
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:72   
      148      148                Procedure:
      149      149                Setup the global data refs:
      150      150                    CURR$WINDOW - VD$WINDOW_SPEC for the current editing window.
      151      151                    EDIT$BLOCK - VD$BLOCK_DESC for the window's EditBlock (if any).
      152      152                Allocate an IT_BLOCK_EXPR node.
      153      153                If PT_BLOCK_EXPR is actually a %T_STRING_EXPR node:
      154      154                    Call XUE$EVAL to evaluate the XUE_EXP expression into
      155      155                        record buffers, and write them to the Scratch Source
      156      156                        file.
      157      157                    Build an IT_OPERAND node referring to the file just
      158      158                        written, and attach it to the InTree.
      159      159                    Load IT$BLOCK_EXPR.DOMAINN and .OPTIONS with the info on
      160      160                        the Scratch Source file.
      161      161                    Return.
      162      162
      163      163                Otherwise, loop thru the children of the PT_BLOCK_EXPR node,
      164      164                    processing the nodes as they appear:
      165      165                o For any processing options (ie, PROTECT, STRUCTURE, NEW,
      166      166                    OLD, ANY):
      167      167                    Set the appropriate value or flag in the IT$BLOCK_EXPR
      168      168                    node.
      169      169                o For any DOMAIN_OPERAND (ie, NEXT, PREVIOUS, FILE_FID,
      170      170                    LO_NAME referring to a different file):
      171      171                    Guarantee that both an IT_SELECT and an IT_ADJUST
      172      172                    node is available.  Call DOMAIN_OPERAND to build
      173      173                    an IT_OPERAND node and attach it to the InTree, and
      174      174                    to load IT$BLOCK_EXPR.DOMAINN with the domain info.
      175      175                o For each MOVEMENT:
      176      176                    Guarantee that both an IT_SELECT and an IT_ADJUST
      177      177                    node is available.  Call MOVEMENTS to build
      178      178                    and attach IT_OPERAND, IT_OPERATOR, and/or IT_COMMAND
      179      179                    nodes.
      180      180                o For THRU or ADJUST:
      181      181                    Guarantee that an IT_SELECT node is available;
      182      182                    allocate a new IT_ADJUST node and append it to the
      183      183                    InTree.  Flag the type of state change to perform:
      184      184                    for THRU, always change to %EVST_END; for ADJUST,
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:73   
      185      185                    toggle the evaluation state.
      186      186                o For SELECT:
      187      187                    Allocate a new IT_SELECT node and append it to the InTree.
      188      188        *??*         If there are no IT_SELECT children
      189      189        *??*         of the IT_BLOCK_EXPR node yet, and if this is
      190      190        *??*         not a REPEAT SELECT node, and if HERE has a value
      191      191        *??*         currently, then we want to attach the current value
      192      192        *??*         of the HERE predefined name as the first IT_OPERAND
      193      193        *??*         of the new IT_SELECT node.
      194      194                    Evaluate the possible children of the T_SELECT
      195      195                    node, filling their info into the IT_SELECT node
      196      196                    just built.
      197      197                o For KEY_INCR:
      198      198                    Set the appropriate value in the IT_BLOCK_EXPR node.
      199      199
      200      200                If a recoverable error is detected, we want to free the
      201      201                    InTree.
      202      202        */
      203      203
      204      204        VDE$PBLOCK_EXPR: PROC (PT_BLOCK_EXPR) ALTRET;

    204  1 000000   000000 700200 xent  VDE$PBLOCK_* TSX0  ! X66_AUTO_1
         1 000001   000066 000001                    ZERO    54,1

      205      205
      206      206        %INCLUDE VD_MACROS_M;
      207     2421        %INCLUDE VD_PERR_C;
      208     2569        %INCLUDE VD_NODES0_E;
      209     2661        %INCLUDE XU_MACRO_C;
      210     5755        %INCLUDE XUE_MACRO_C;
      211     6499
      212     6500
      213     6501        %PARSE$OUT (NAME=PT_BLOCK_EXPR, STCLASS=PARAM);
      214     6546
      215     6547
      216     6548
      217     6549    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:74   
      218     6550    1   DCL VDE$PNUMBER         ENTRY (2) ALTRET;
      219     6551    1   DCL VDE$PNUMERIC_KEY    ENTRY (2) ALTRET;
      220     6552    1   DCL VDE$PFILE_TO_EDIT   ENTRY (3) ALTRET;
      221     6553    1   DCL VDE$PPATTERN        ENTRY (2) ALTRET;
      222     6554    1   DCL VDE$PREAD_LO_NAME   ENTRY (3) ALTRET;
      223     6555    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
      224     6556    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      225     6557    1   DCL VDA$LDELETE         ENTRY (2) ALTRET;
      226     6558    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
      227     6559    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      228     6560    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      229     6561    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
      230     6562    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      231     6563    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      232     6564    1   DCL VDG$ESCREECH        ENTRY (3);
      233     6565    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
      234     6566
      235     6567
      236     6568        %VD_6E (STCLASS=SYMREF);
      237     6604    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      238     6605        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
      239     6807        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
      240     6821        %VD$NUMBER (NAME=VD_$COMPONENT, STCLASS=SYMREF);
      241     6866        %VD$NUMBER (NAME=VD_$DIRECTION, STCLASS=SYMREF);
      242     6911        %VD$NUMBER (NAME=VD_$EXIST, STCLASS=SYMREF);
      243     6956        %VD$NUMBER (NAME=VD_$POINT, STCLASS=SYMREF);
      244     7001        %VD$NUMBER (NAME=VD_$PROTECT, STCLASS=SYMREF);
      245     7046        %VD$NUMBER (NAME=VD_$SEARCH, STCLASS=SYMREF);
      246     7091        %VD$NUMBER (NAME=VD_$SKIP, STCLASS=SYMREF);
      247     7136        %VD$POINTER (NAME=VD_$STRUCTURE, STCLASS=SYMREF);
      248     7181    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      249     7182              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      250     7196        %VD_FILE_KEY (NAME=VD_FKEY_SCRATCH_SOURCE, STCLASS=SYMREF);
      251     7248        %VD_KEY (NAME=VD_KEY_SCRATCH_SOURCE, STCLASS=SYMREF);
      252     7284    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
      253     7285
      254     7286
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:75   
      255     7287
      256     7288    1   DCL CURR_WINDOW$ PTR;
      257     7289    1   DCL EDIT_BLOCK$ PTR;
      258     7290    1   DCL IT_BLOCK_EXPR$ PTR;
      259     7291    1   DCL LAST_SELECT$ PTR;
      260     7292    1   DCL LAST_ADJUST$ PTR;
      261     7293    1   DCL LAST_MOVEMENT$ PTR;
      262     7294    1   DCL PREV_CHILD_INDEX SBIN;
      263     7295    1   DCL CHILD_INDEX SBIN;
      264     7296    1   DCL CHILD$ PTR;
      265     7297    1   DCL ERR_SUBST$ PTR;
      266     7298    1   DCL T$ PTR; /* For calling VDG$OALLOC */
      267     7299
      268     7300
      269     7301        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      270     7367        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      271     7514        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      272     7664        %VD$IT_SELECT (NAME=LAST$SELECT, STCLASS="BASED(LAST_SELECT$)");
      273     7701        %VD$IT_ADJUST (NAME=LAST$ADJUST, STCLASS="BASED(LAST_ADJUST$)");
      274     7738        %VD$IT_OPERAND (NAME=LAST$MOVEMENT, STCLASS="BASED(LAST_MOVEMENT$)");
      275     7804        %PARSE$OUT (NAME=CHILD, STCLASS="BASED(CHILD$)");
      276     7849        %VD$KEY_NUMBER;
      277     7864        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      278     7917        %VD$ERR (NAME=LAST$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      279     7970        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      280     8015        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      281     8060        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
      282     8166        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
      283     8272        %VD$FILE_NODE;
      284     8365        %VD$IT_SELECT;
      285     8402        %VD$IT_ADJUST;
      286     8439        %VD$IT_OPERAND;
      287     8505        %VD$TEXTC_REMOTE;
      288     8566        %VD$STRING_HEADER;
      289     8602        %VD$PORT;
      290     8700
      291     8701
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:76   
      292     8702
      293     8703    1           IF VD_CURRENT_WINDOW$ = ADDR(NIL) THEN

   8703  1 000002   000000 236000 xsym               LDQ     VD_CURRENT_WINDOW$
         1 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000004   000010 601000 1                  TNZ     s:8705

      294     8704    1              CALL VDG$ESCREECH;

   8704  1 000005   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000006   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000007   000000 011000                    NOP     0

      295     8705    1           CURR_WINDOW$ = VD_CURRENT_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   8705  1 000010   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000011   000007 236100                    LDQ     7,,PR0
         1 000012   200004 756100                    STQ     CURR_WINDOW$,,AUTO

      296     8706    1           IF CURR_WINDOW$ = ADDR(NIL) THEN

   8706  1 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000014   000020 601000 1                  TNZ     s:8708

      297     8707    1              CALL VDG$ESCREECH;

   8707  1 000015   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000016   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000017   000000 011000                    NOP     0

      298     8708    1           EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;

   8708  1 000020   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000021   000012 236100                    LDQ     10,,PR0
         1 000022   200005 756100                    STQ     EDIT_BLOCK$,,AUTO

      299     8709
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:77   
      300     8710    1           IF CURR$WINDOW.OPERAND.INTREE$ ~= ADDR(NIL) THEN

   8710  1 000023   000011 236100                    LDQ     9,,PR0
         1 000024   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000025   000031 600000 1                  TZE     s:8713

      301     8711    1              CALL VDG$ESCREECH;

   8711  1 000026   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000027   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000030   000000 011000                    NOP     0

      302     8712
      303     8713    1           CALL VDG$OALLOC (%CLS_IT_BLOCK_EXPR, CURR$WINDOW.OPERAND.INTREE$)

   8713  1 000031   200004 236100                    LDQ     CURR_WINDOW$,,AUTO
         1 000032   000011 036003                    ADLQ    9,DU
         1 000033   000001 235000 2                  LDA     1
         1 000034   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 000035   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000036   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000037   000000 701000 xent               TSX1    VDG$OALLOC
         1 000040   000326 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

      304     8714    1             ALTRET (OALLOC_FAILED);
      305     8715    1           IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;

   8715  1 000041   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000042   000011 236100                    LDQ     9,,PR0
         1 000043   200006 756100                    STQ     IT_BLOCK_EXPR$,,AUTO

      306     8716    1           LAST_SELECT$ = ADDR(NIL);

   8716  1 000044   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000045   200007 756100                    STQ     LAST_SELECT$,,AUTO

      307     8717    1           LAST_ADJUST$ = ADDR(NIL);
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:78   

   8717  1 000046   200010 756100                    STQ     LAST_ADJUST$,,AUTO

      308     8718    1           LAST_MOVEMENT$ = ADDR(NIL);

   8718  1 000047   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

      309     8719
      310     8720                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="PT_BLOCK_EXPR.CODE - %VD_BASE#");

   8721  1 000050   200003 471500                    LDP1    @PT_BLOCK_EXPR,,AUTO
         1 000051   100000 720100                    LXL0    0,,PR1
         1 000052   776375 054010 xsym               AOS     VD_6E-771,X0

      311     8723
      312     8724    2           IF PT_BLOCK_EXPR.CODE = %T_STRING_EXPR THEN DO;

   8724  1 000053   100000 720100                    LXL0    0,,PR1
         1 000054   002056 100003                    CMPX0   1070,DU
         1 000055   000061 601000 1                  TNZ     s:8730

      313     8725    2              CALL STRING_EXPRESSION

   8725  1 000056   000512 701000 1                  TSX1    STRING_EXPRESSION
         1 000057   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      314     8726    2                ALTRET (STRING_EXPRESSION_FAILED);
      315     8727    2              RETURN;

   8727  1 000060   000000 702200 xent               TSX2  ! X66_ARET

      316     8728    2              END;
      317     8729
      318     8730    1           CHILD_INDEX = 0;

   8730  1 000061   200013 450100                    STZ     CHILD_INDEX,,AUTO

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:79   
      319     8731    1           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

   8731  1 000062   200013 721100                    LXL1    CHILD_INDEX,,AUTO
         1 000063   100003 236111                    LDQ     3,X1,PR1
         1 000064   200014 756100                    STQ     CHILD$,,AUTO

      320     8732
      321     8733    1           CALL PROCESSING_OPTIONS

   8733  1 000065   000327 701000 1                  TSX1    PROCESSING_OPTIONS
         1 000066   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      322     8734    1             ALTRET (PROCESSING_OPTIONS_FAILED);
      323     8735    1           CALL DOMAIN_OPERAND

   8735  1 000067   001255 701000 1                  TSX1    DOMAIN_OPERAND
         1 000070   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      324     8736    1             ALTRET (DOMAIN_OPERAND_FAILED);
      325     8737
      326     8738                /*
      327     8739                *   At this point:
      328     8740                *   If the user explicitly specified any processing
      329     8741                *       options, they're in IT$BLOCK_EXPR.OPTIONS.
      330     8742                *   If the user explicitly specified a domain operand,
      331     8743                *       IT$BLOCK_EXPR.DOMAINN is non-%CLEAR.
      332     8744                *   If no domain was given but there is no current EditBlock
      333     8745                *       for this window, and we still have some children of
      334     8746                *       PT_BLOCK_EXPR yet to process, then error out.
      335     8747                */
      336     8748
      337     8749    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;

   8749  1 000071   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000072   000000 106500                    CMPC    fill='000'O
         1 000073   000003 000124                    ADSC9   3,,PR0                   cn=0,n=84
         1 000074   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:80   
         1 000075   000107 601000 1                  TNZ     s:8755

      338     8750    2              IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL)

   8750  1 000076   200004 471500                    LDP1    CURR_WINDOW$,,AUTO
         1 000077   100012 236100                    LDQ     10,,PR1
         1 000100   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000101   000107 601000 1                  TNZ     s:8755
         1 000102   200003 473500                    LDP3    @PT_BLOCK_EXPR,,AUTO
         1 000103   300001 236100                    LDQ     1,,PR3
         1 000104   000022 772000                    QRL     18
         1 000105   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000106   000200 605400 1                  TPNZ    NO_EDIT_BLOCK_FAILURE

      339     8751    2                AND CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN
      340     8752    2                 GOTO NO_EDIT_BLOCK_FAILURE;
      341     8753    2              END;

      342     8754
      343     8755    1           PREV_CHILD_INDEX = -1;

   8755  1 000107   000001 335007                    LCA     1,DL
         1 000110   200012 755100                    STA     PREV_CHILD_INDEX,,AUTO

      344     8756    1   SELECT_CLAUSE_LOOP:
      345     8757    2           DO WHILE CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS

   8757  1 000111   000155 710000 1     SELECT_CLAU* TRA     s:8781

      346     8758    2             AND CHILD_INDEX > PREV_CHILD_INDEX;
      347     8759    2              PREV_CHILD_INDEX = CHILD_INDEX;

   8759  1 000112   200013 235100                    LDA     CHILD_INDEX,,AUTO
         1 000113   200012 755100                    STA     PREV_CHILD_INDEX,,AUTO

      348     8760    2              CALL MOVEMENTS

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:81   
   8760  1 000114   002147 701000 1                  TSX1    MOVEMENTS
         1 000115   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      349     8761    2                ALTRET (MOVEMENTS_FAILED);
      350     8762
      351     8763    2              CALL ADJUST_LIST

   8763  1 000116   002100 701000 1                  TSX1    ADJUST_LIST
         1 000117   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      352     8764    2                ALTRET (ADJUST_LIST_FAILED);
      353     8765
      354     8766    2              CALL SELECT_CLAUSE

   8766  1 000120   002005 701000 1                  TSX1    SELECT_CLAUSE
         1 000121   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      355     8767    2                ALTRET (SELECT_CLAUSE_FAILED);
      356     8768
      357     8769    3              IF CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN DO;

   8769  1 000122   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000123   000001 236100                    LDQ     1,,PR0
         1 000124   000022 772000                    QRL     18
         1 000125   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000126   000155 604400 1                  TMOZ    s:8781

      358     8770    3                 CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

   8770  1 000127   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 000130   000003 236110                    LDQ     3,X0,PR0
         1 000131   200014 756100                    STQ     CHILD$,,AUTO

      359     8771    4                 IF CHILD.CODE = %T_KEY_INCR THEN DO;

   8771  1 000132   200014 471500                    LDP1    CHILD$,,AUTO
         1 000133   100000 721100                    LXL1    0,,PR1
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:82   
         1 000134   002017 101003                    CMPX1   1039,DU
         1 000135   000155 601000 1                  TNZ     s:8781

      360     8772    4                    CALL VDE$PNUMERIC_KEY (CHILD, IT$BLOCK_EXPR.OPTIONS.KEY_INCR)

   8772  1 000136   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 000137   000033 036003                    ADLQ    27,DU
         1 000140   200014 235100                    LDA     CHILD$,,AUTO
         1 000141   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 000142   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000143   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000144   000000 701000 xent               TSX1    VDE$PNUMERIC_KEY
         1 000145   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      361     8773    4                      ALTRET (PNUMERIC_KEY_FAILED);
      362     8774    4                    IF ADDR(IT$BLOCK_EXPR.OPTIONS.KEY_INCR) ->

   8774  1 000146   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000147   000034 236100                    LDQ     28,,PR0
         1 000150   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000151   177777 116007                    CMPQ    65535,DL
         1 000152   000173 603000 1                  TRC     BAD_KEY_INCR

      363     8775    4                      VD$KEY_NUMBER.BYTES# > 65534 THEN
      364     8776    4                       GOTO BAD_KEY_INCR;
      365     8777    4                    CHILD_INDEX = CHILD_INDEX + 1;

   8777  1 000153   200013 054100                    AOS     CHILD_INDEX,,AUTO

      366     8778    4                    EXIT SELECT_CLAUSE_LOOP;

   8778  1 000154   000165 710000 1                  TRA     s:8783

      367     8779    4                    END;
      368     8780    3                 END;
      369     8781    2              END SELECT_CLAUSE_LOOP;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:83   
   8781  1 000155   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000156   000001 236100                    LDQ     1,,PR0
         1 000157   000022 772000                    QRL     18
         1 000160   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000161   000165 604400 1                  TMOZ    s:8783
         1 000162   200013 236100                    LDQ     CHILD_INDEX,,AUTO
         1 000163   200012 116100                    CMPQ    PREV_CHILD_INDEX,,AUTO
         1 000164   000112 605400 1                  TPNZ    s:8759

      370     8782
      371     8783    1           IF CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS THEN

   8783  1 000165   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000166   000001 236100                    LDQ     1,,PR0
         1 000167   000022 772000                    QRL     18
         1 000170   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000171   000205 605400 1                  TPNZ    UNPROCESSED_NODE_FAILURE

      372     8784    1              GOTO UNPROCESSED_NODE_FAILURE;
      373     8785
      374     8786    1           RETURN;

   8786  1 000172   000000 702200 xent               TSX2  ! X66_ARET

   8783  1 000173                       BAD_KEY_INCR null
      375     8787
      376     8788
      377     8789                %BOX (TITLE="Error Handlers");

              8801    1   /***************************************************************************
              8803    1    *                                                                         *
              8807    1            *                               Error Handlers                           *
              8809    1            *                                                                        *
              8811    1          ***************************************************************************/

      378     8815
      379     8816        /*STRING_NOT_ONLY_OPAND_FAILURE:                                    */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:84   
      380     8817        /*      CALL VDG$ERRMSG (%E$STRING_NOT_ONLY_OPAND) ALTRET (OTHER_FAILURE); */
      381     8818        /*      GOTO CMDLINE_ERR;                                                  */
      382     8819
      383     8820
      384     8821    1   BAD_KEY_INCR: ;
      385     8822    1           CALL VDG$ERRMSG (%E$BAD_KEY_INCR) ALTRET (OTHER_FAILURE);

   8822  1 000173   000003 630400 2                  EPPR0   3
         1 000174   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000175   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000176   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      386     8823    1           GOTO CMDLINE_ERR;

   8823  1 000177   000306 710000 1                  TRA     CMDLINE_ERR

      387     8824
      388     8825
      389     8826    1   NO_EDIT_BLOCK_FAILURE:
      390     8827    1           CALL VDG$ERRMSG (%E$NO_EDIT_BLOCK) ALTRET (OTHER_FAILURE);

   8827  1 000200   000005 630400 2     NO_EDIT_BLO* EPPR0   5
         1 000201   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000202   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000203   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      391     8828    1           GOTO CMDLINE_ERR;

   8828  1 000204   000306 710000 1                  TRA     CMDLINE_ERR

      392     8829
      393     8830
      394     8831    1   UNPROCESSED_NODE_FAILURE:
      395     8832    1           CALL VDG$ERRMSG (%E$HUH) ALTRET (OTHER_FAILURE);

   8832  1 000205   000006 630400 2     UNPROCESSED* EPPR0   6
         1 000206   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:85   
         1 000207   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000210   000312 702000 1                  TSX2    STRING_EXPRESSION_FAILED

      396     8833
      397     8834    1           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

   8834  1 000211   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000212   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 000213   000003 236110                    LDQ     3,X0,PR0
         1 000214   200014 756100                    STQ     CHILD$,,AUTO

      398     8835    2           DO CASE (CHILD.CODE);

   8835  1 000215   200014 471500                    LDP1    CHILD$,,AUTO
         1 000216   100000 236100                    LDQ     0,,PR1
         1 000217   777777 376007                    ANQ     -1,DL
         1 000220   002011 136007                    SBLQ    1033,DL
         1 000221   000037 116007                    CMPQ    31,DL
         1 000222   000224 602006 1                  TNC     s:8835+7,QL
         1 000223   000277 710000 1                  TRA     s:8846
         1 000224   000263 710000 1                  TRA     s:8838
         1 000225   000277 710000 1                  TRA     s:8846
         1 000226   000263 710000 1                  TRA     s:8838
         1 000227   000277 710000 1                  TRA     s:8846
         1 000230   000277 710000 1                  TRA     s:8846
         1 000231   000277 710000 1                  TRA     s:8846
         1 000232   000277 710000 1                  TRA     s:8846
         1 000233   000277 710000 1                  TRA     s:8846
         1 000234   000277 710000 1                  TRA     s:8846
         1 000235   000277 710000 1                  TRA     s:8846
         1 000236   000277 710000 1                  TRA     s:8846
         1 000237   000277 710000 1                  TRA     s:8846
         1 000240   000277 710000 1                  TRA     s:8846
         1 000241   000277 710000 1                  TRA     s:8846
         1 000242   000277 710000 1                  TRA     s:8846
         1 000243   000277 710000 1                  TRA     s:8846
         1 000244   000277 710000 1                  TRA     s:8846
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:86   
         1 000245   000277 710000 1                  TRA     s:8846
         1 000246   000277 710000 1                  TRA     s:8846
         1 000247   000277 710000 1                  TRA     s:8846
         1 000250   000277 710000 1                  TRA     s:8846
         1 000251   000277 710000 1                  TRA     s:8846
         1 000252   000277 710000 1                  TRA     s:8846
         1 000253   000277 710000 1                  TRA     s:8846
         1 000254   000271 710000 1                  TRA     s:8843
         1 000255   000271 710000 1                  TRA     s:8843
         1 000256   000271 710000 1                  TRA     s:8843
         1 000257   000271 710000 1                  TRA     s:8843
         1 000260   000271 710000 1                  TRA     s:8843
         1 000261   000271 710000 1                  TRA     s:8843
         1 000262   000271 710000 1                  TRA     s:8843

      399     8836    2            CASE (%T_PROTECT, %T_STRUCTURE);

      400     8837                   /* Processing option given but not at start of blk expr */
      401     8838    2              LAST$ERR.ERR.CODE# = %E$PROC_OPT_NOT_1ST;

   8838  1 000263   000032 473400 xsym               LDP3    VD_6E+26
         1 000264   300002 236100                    LDQ     2,,PR3
         1 000265   000007 376000 2                  ANQ     7
         1 000266   001270 276007                    ORQ     696,DL
         1 000267   300002 756100                    STQ     2,,PR3
         1 000270   000306 710000 1                  TRA     CMDLINE_ERR

      402     8839
      403     8840    2            CASE (%T_NEXT, %T_PREVIOUS, %T_NEW, %T_OLD, %T_ANY,

      404     8841    2                %T_FILE_FID, %T_LO_NAME);
      405     8842                   /* Domain operand given but not as 1st in blk expr */
      406     8843    2              LAST$ERR.ERR.CODE# = %E$DOMAIN_OPAND_NOT_1ST;

   8843  1 000271   000032 473400 xsym               LDP3    VD_6E+26
         1 000272   300002 236100                    LDQ     2,,PR3
         1 000273   000007 376000 2                  ANQ     7
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:87   
         1 000274   001300 276007                    ORQ     704,DL
         1 000275   300002 756100                    STQ     2,,PR3
         1 000276   000306 710000 1                  TRA     CMDLINE_ERR

      407     8844
      408     8845    2            CASE (ELSE);

      409     8846    2              CALL VDG$ESCREECH (CHILD.CODE);

   8846  1 000277   200014 236100                    LDQ     CHILD$,,AUTO
         1 000300   400000 036007                    ADLQ    -131072,DL
         1 000301   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 000302   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000303   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000304   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000305   000000 011000                    NOP     0

      410     8847    2            END;

   8845  1 000306                       CMDLINE_ERR  null
      411     8848
      412     8849    1   CMDLINE_ERR: ;
      413     8850    1           LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;

   8850  1 000306   200014 470500                    LDP0    CHILD$,,AUTO
         1 000307   000002 720100                    LXL0    2,,PR0
         1 000310   000032 471400 xsym               LDP1    VD_6E+26
         1 000311   100003 440100                    SXL0    3,,PR1

   8850  1 000312                       STRING_EXPR* null
   8850  1 000312                       PROCESSING_* null
   8850  1 000312                       DOMAIN_OPER* null
   8850  1 000312                       MOVEMENTS_F* null
   8850  1 000312                       ADJUST_LIST* null
   8850  1 000312                       SELECT_CLAU* null
   8850  1 000312                       PNUMERIC_KE* null
      414     8851
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:88   
      415     8852
      416     8853    1   STRING_EXPRESSION_FAILED: ;
      417     8854    1   PROCESSING_OPTIONS_FAILED: ;
      418     8855    1   DOMAIN_OPERAND_FAILED: ;
      419     8856    1   MOVEMENTS_FAILED: ;
      420     8857    1   ADJUST_LIST_FAILED: ;
      421     8858    1   SELECT_CLAUSE_FAILED: ;
      422     8859    1   PNUMERIC_KEY_FAILED: ;
      423     8860
      424     8861    1   OTHER_FAILURE:
      425     8862    1           IF FATAL$ERR.ERR ~= %CLEAR THEN

   8862  1 000312   000031 470400 xsym  OTHER_FAILU* LDP0    VD_6E+25
         1 000313   000002 235100                    LDA     2,,PR0
         1 000314   000316 600000 1                  TZE     s:8864

      426     8863    1              ALTRETURN;

   8863  1 000315   000000 702200 xent               TSX2  ! X66_AALT

      427     8864    1           CALL VDG$OFREE (IT$BLOCK_EXPR)

   8864  1 000316   200006 630500                    EPPR0   IT_BLOCK_EXPR$,,AUTO
         1 000317   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000320   000000 701000 xent               TSX1    VDG$OFREE
         1 000321   000326 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

      428     8865    1             ALTRET (OFREE_FAILED);
      429     8866    1           CURR$WINDOW.OPERAND.INTREE$ = ADDR(NIL);

   8866  1 000322   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000323   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000324   000011 756100                    STQ     9,,PR0

      430     8867    1           ALTRETURN;

   8867  1 000325   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:89   

   8866  1 000326                       GUAR_LAST_S* null
   8866  1 000326                       OALLOC_FAIL* null
   8866  1 000326                       OFREE_FAILED null
      431     8868
      432     8869
      433     8870    1   GUAR_LAST_SELECT_FAILED: ;
      434     8871    1   OALLOC_FAILED: ;
      435     8872    1   OFREE_FAILED: ;
      436     8873    1           ALTRETURN;

   8873  1 000326   000000 702200 xent               TSX2  ! X66_AALT

      437     8874
      438     8875        %BOX (TITLE=PROCESSING_OPTIONS, PAGE=YES);
              8883    1
              8887    1   /***************************************************************************
              8889    1    *                                                                         *
              8893    1            *                             PROCESSING_OPTIONS                         *
              8895    1            *                                                                        *
              8897    1          ***************************************************************************/

      439     8901
      440     8902        /*I* NAME: PROCESSING_OPTIONS
      441     8903            PARAMETERS:
      442     8904                None.
      443     8905            INPUT:
      444     8906                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR
      445     8907                    to process.
      446     8908                IT$BLOCK_EXPR - Root node of InTree.  It should not have
      447     8909                    any .OPTIONS yet:  its .OPTIONS must be "clear"
      448     8910                    (%CLEAR except pointers are NIL).
      449     8911                VD_$STRUCTURE, VD_$LEVEL, VD_$COMPONENT, VD_$PROTECT, and
      450     8912                    VD_$EXIST must specify the defaults for these options.
      451     8913            OUTPUT:
      452     8914                IT$BLOCK_EXPR.OPTIONS will have in it any options seen.
      453     8915                CHILD_INDEX will be incremented beyond any processed nodes.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:90   
      454     8916            SCRATCH:
      455     8917                CHILD$.
      456     8918            DESCRIPTION:
      457     8919                Loop thru PT_BLOCK_EXPR's children while we see one of:
      458     8920                T_PROTECT
      459     8921                    Set .OPTIONS.PROTECT# to %PROTECT or %DONT_PROTECT,
      460     8922                        depending on a T_DONT dangling from the T_PROTECT.
      461     8923        *N*     T_STRUCTURE
      462     8924        *N*         Find the named structure, and point .OPTIONS.STRUCTURE$
      463     8925        *N*             to it's level-1 FileNode in the Structures file.
      464     8926                T_NEW, T_OLD, or T_ANY
      465     8927                    Set the .OPTIONS.EXIST# value.
      466     8928
      467     8929                When done, if we saw any processing options, update the
      468     8930                    InTree's options.
      469     8931        */
      470     8932
      471     8933    1   PROCESSING_OPTIONS: PROC ALTRET;

   8933  1 000327   200020 741300       PROCESSING_* STX1  ! T$+2,,AUTO

      472     8934
      473     8935
      474     8936
      475     8937        %VD$ACCESS_OPTIONS (NAME=OPTIONS, STCLASS=AUTO);
      476     8966
      477     8967
      478     8968
      479     8969    2           OPTIONS = IT$BLOCK_EXPR.OPTIONS;

   8969  1 000330   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000331   000100 100500                    MLR     fill='000'O
         1 000332   000030 000024                    ADSC9   24,,PR0                  cn=0,n=20
         1 000333   200021 000024                    ADSC9   OPTIONS,,AUTO            cn=0,n=20

      480     8970
      481     8971    2   OPTION_LOOP:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:91   
      482     8972    3           DO WHILE CHILD_INDEX <= PT_BLOCK_EXPR.NSUBLKS;

   8972  1 000334   200003 471500       OPTION_LOOP  LDP1    @PT_BLOCK_EXPR,,AUTO
         1 000335   100001 236100                    LDQ     1,,PR1
         1 000336   000022 772000                    QRL     18
         1 000337   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000340   000476 604000 1                  TMI     s:9023

      483     8973    3              CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

   8973  1 000341   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000342   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 000343   000003 236110                    LDQ     3,X0,PR0
         1 000344   200014 756100                    STQ     CHILD$,,AUTO

      484     8974
      485     8975    4              DO CASE (CHILD.CODE);

   8975  1 000345   200014 471500                    LDP1    CHILD$,,AUTO
         1 000346   100000 236100                    LDQ     0,,PR1
         1 000347   777777 376007                    ANQ     -1,DL
         1 000350   002011 136007                    SBLQ    1033,DL
         1 000351   000036 116007                    CMPQ    30,DL
         1 000352   000354 602006 1                  TNC     s:8975+7,QL
         1 000353   000470 710000 1                  TRA     s:9016
         1 000354   000412 710000 1                  TRA     s:8977
         1 000355   000470 710000 1                  TRA     s:9016
         1 000356   000424 710000 1                  TRA     s:8985
         1 000357   000470 710000 1                  TRA     s:9016
         1 000360   000470 710000 1                  TRA     s:9016
         1 000361   000470 710000 1                  TRA     s:9016
         1 000362   000470 710000 1                  TRA     s:9016
         1 000363   000470 710000 1                  TRA     s:9016
         1 000364   000470 710000 1                  TRA     s:9016
         1 000365   000470 710000 1                  TRA     s:9016
         1 000366   000470 710000 1                  TRA     s:9016
         1 000367   000470 710000 1                  TRA     s:9016
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:92   
         1 000370   000470 710000 1                  TRA     s:9016
         1 000371   000470 710000 1                  TRA     s:9016
         1 000372   000470 710000 1                  TRA     s:9016
         1 000373   000470 710000 1                  TRA     s:9016
         1 000374   000470 710000 1                  TRA     s:9016
         1 000375   000470 710000 1                  TRA     s:9016
         1 000376   000470 710000 1                  TRA     s:9016
         1 000377   000470 710000 1                  TRA     s:9016
         1 000400   000470 710000 1                  TRA     s:9016
         1 000401   000470 710000 1                  TRA     s:9016
         1 000402   000470 710000 1                  TRA     s:9016
         1 000403   000470 710000 1                  TRA     s:9016
         1 000404   000470 710000 1                  TRA     s:9016
         1 000405   000470 710000 1                  TRA     s:9016
         1 000406   000470 710000 1                  TRA     s:9016
         1 000407   000451 710000 1                  TRA     s:9001
         1 000410   000456 710000 1                  TRA     s:9006
         1 000411   000463 710000 1                  TRA     s:9011

      486     8976    4               CASE (%T_PROTECT);

      487     8977    4                 IF OPTIONS.PROTECT# ~= 0 THEN

   8977  1 000412   200023 221100                    LDX1    NAME_FILE_KEY$+1,,AUTO
         1 000413   000504 601000 1                  TNZ     TOO_MANY_PROC_OPTS_FAILURE

      488     8978    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      489     8979    4                 IF CHILD.NSUBLKS > 0 THEN

   8979  1 000414   100001 222100                    LDX2    1,,PR1
         1 000415   000421 600000 1                  TZE     s:8982

      490     8980    4                    OPTIONS.PROTECT# = %DONT_PROTECT;

   8980  1 000416   000002 223003                    LDX3    2,DU
         1 000417   200023 743100                    STX3    NAME_FILE_KEY$+1,,AUTO
         1 000420   000471 710000 1                  TRA     s:9020
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:93   

      491     8981    4                 ELSE
      492     8982    4                    OPTIONS.PROTECT# = %PROTECT;

   8982  1 000421   000001 223003                    LDX3    1,DU
         1 000422   200023 743100                    STX3    NAME_FILE_KEY$+1,,AUTO
         1 000423   000471 710000 1                  TRA     s:9020

      493     8983
      494     8984    4               CASE (%T_STRUCTURE);

      495     8985    4                 IF OPTIONS.STRUCTURE$ ~= ADDR(NIL) THEN

   8985  1 000424   200021 236100                    LDQ     OPTIONS,,AUTO
         1 000425   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000426   000504 601000 1                  TNZ     TOO_MANY_PROC_OPTS_FAILURE

      496     8986    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      497     8987
      498     8988    5                 DO CASE (CHILD.SUBLK$(0) -> CHILD.CODE);

   8988  1 000427   100003 473500                    LDP3    3,,PR1
         1 000430   300000 236100                    LDQ     0,,PR3
         1 000431   777777 376007                    ANQ     -1,DL
         1 000432   002050 136007                    SBLQ    1064,DL
         1 000433   000002 116007                    CMPQ    2,DL
         1 000434   000436 602006 1                  TNC     s:8988+7,QL
         1 000435   000446 710000 1                  TRA     s:8996
         1 000436   000443 710000 1                  TRA     s:8993
         1 000437   000440 710000 1                  TRA     s:8990

      499     8989    5                  CASE (%T_STRING_KEY);

      500     8990    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_STRINGKEY$;

   8990  1 000440   000014 236000 xsym               LDQ     VD_6E+12
         1 000441   200021 756100                    STQ     OPTIONS,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:94   
         1 000442   000471 710000 1                  TRA     s:9020

      501     8991
      502     8992    5                  CASE (%T_NUMERIC_KEY);

      503     8993    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_EDITKEY$;

   8993  1 000443   000007 236000 xsym               LDQ     VD_6E+7
         1 000444   200021 756100                    STQ     OPTIONS,,AUTO
         1 000445   000471 710000 1                  TRA     s:9020

      504     8994
      505     8995    5                  CASE (ELSE);

      506     8996    5                    OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SEQUENTIAL$;

   8996  1 000446   000013 236000 xsym               LDQ     VD_6E+11
         1 000447   200021 756100                    STQ     OPTIONS,,AUTO

      507     8997
      508     8998    5                  END;

   8998  1 000450   000471 710000 1                  TRA     s:9020

      509     8999
      510     9000    4               CASE (%T_NEW);

      511     9001    4                 IF OPTIONS.EXIST# ~= 0 THEN

   9001  1 000451   200023 721100                    LXL1    NAME_FILE_KEY$+1,,AUTO
         1 000452   000504 601000 1                  TNZ     TOO_MANY_PROC_OPTS_FAILURE

      512     9002    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      513     9003    4                 OPTIONS.EXIST# = %EX_NEW;

   9003  1 000453   000001 222003                    LDX2    1,DU
         1 000454   200023 442100                    SXL2    NAME_FILE_KEY$+1,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:95   
         1 000455   000471 710000 1                  TRA     s:9020

      514     9004
      515     9005    4               CASE (%T_OLD);

      516     9006    4                 IF OPTIONS.EXIST# ~= 0 THEN

   9006  1 000456   200023 721100                    LXL1    NAME_FILE_KEY$+1,,AUTO
         1 000457   000504 601000 1                  TNZ     TOO_MANY_PROC_OPTS_FAILURE

      517     9007    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      518     9008    4                 OPTIONS.EXIST# = %EX_OLD;

   9008  1 000460   000002 222003                    LDX2    2,DU
         1 000461   200023 442100                    SXL2    NAME_FILE_KEY$+1,,AUTO
         1 000462   000471 710000 1                  TRA     s:9020

      519     9009
      520     9010    4               CASE (%T_ANY);

      521     9011    4                 IF OPTIONS.EXIST# ~= 0 THEN

   9011  1 000463   200023 721100                    LXL1    NAME_FILE_KEY$+1,,AUTO
         1 000464   000504 601000 1                  TNZ     TOO_MANY_PROC_OPTS_FAILURE

      522     9012    4                    GOTO TOO_MANY_PROC_OPTS_FAILURE;
      523     9013    4                 OPTIONS.EXIST# = %EX_ANY;

   9013  1 000465   000003 222003                    LDX2    3,DU
         1 000466   200023 442100                    SXL2    NAME_FILE_KEY$+1,,AUTO
         1 000467   000471 710000 1                  TRA     s:9020

      524     9014
      525     9015    4               CASE (ELSE);

      526     9016    4                 EXIT OPTION_LOOP;     /* End of processing options */

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:96   
   9016  1 000470   000476 710000 1                  TRA     s:9023

      527     9017
      528     9018    4               END;

      529     9019
      530     9020    3              CHILD_INDEX = CHILD_INDEX + 1;

   9020  1 000471   200013 054100                    AOS     CHILD_INDEX,,AUTO

      531     9021    3              END OPTION_LOOP;

   9021  1 000472   000001 236100                    LDQ     1,,PR0
         1 000473   000022 772000                    QRL     18
         1 000474   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 000475   000341 605000 1                  TPL     s:8973

      532     9022
      533     9023    2           IT$BLOCK_EXPR.OPTIONS = OPTIONS;

   9023  1 000476   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000477   000100 100500                    MLR     fill='000'O
         1 000500   200021 000024                    ADSC9   OPTIONS,,AUTO            cn=0,n=20
         1 000501   000030 000024                    ADSC9   24,,PR0                  cn=0,n=20

      534     9024
      535     9025    2           RETURN;

   9025  1 000502   200020 221300                    LDX1  ! T$+2,,AUTO
         1 000503   000001 702211                    TSX2  ! 1,X1

      536     9026
      537     9027
      538     9028    2   TOO_MANY_PROC_OPTS_FAILURE:
      539     9029    2           CALL VDG$ERRMSG (%E$TOO_MANY_PROC_OPTS);

   9029  1 000504   000011 630400 2     TOO_MANY_PR* EPPR0   9
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:97   
         1 000505   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000506   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000507   000000 011000                    NOP     0

      540     9030    2           ALTRETURN;

   9030  1 000510   200020 221300                    LDX1  ! T$+2,,AUTO
         1 000511   000000 702211                    TSX2  ! 0,X1

      541     9031
      542     9032    2   END PROCESSING_OPTIONS;
      543     9033
      544     9034        %BOX (TITLE=STRING_EXPRESSION, PAGE=YES);
              9042    2
              9046    2   /***************************************************************************
              9048    2    *                                                                         *
              9052    2            *                             STRING_EXPRESSION                          *
              9054    2            *                                                                        *
              9056    2          ***************************************************************************/

      545     9060
      546     9061        /*I* NAME: STRING_EXPRESSION
      547     9062            PARAMETERS:
      548     9063                None.
      549     9064            INPUT:
      550     9065                PT_BLOCK_EXPR must be a PARSE$OUT node whose
      551     9066                    .CODE = %T_STRING_EXPR.
      552     9067                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
      553     9068                IT$BLOCK_EXPR must exist, but must have no children.
      554     9069                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must be nil:
      555     9070                    there should be no nodes in the InTree yet.
      556     9071                VD_6E.STRUCTURE_SCRATCH$ must point to the level-1 node in
      557     9072                    the Structures file for the "Scratch" structure.
      558     9073            OUTPUT:
      559     9074                An IT_OPERAND node (%OPAND_FILE) will be attached to
      560     9075                    IT$BLOCK_EXPR.  An IT_SELECT node and an IT_ADJUST node
      561     9076                    for the IT_OPERAND node will be attached also.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:98   
      562     9077                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ will be set
      563     9078                    to point to the newly-allocated InTree nodes.
      564     9079                IT$BLOCK_EXPR.DOMAINN will be filled in:  it will refer to
      565     9080                    the entire Scratch Source file.
      566     9081                IT$BLOCK_EXPR.OPTIONS will be filled in, for referencing
      567     9082                    the Data component of a protected, existing Scratch file.
      568     9083            DESCRIPTION:
      569     9084                Call VDE$PXUE_EXP to evaluate the string expression and
      570     9085                    build VD$BUFFERs for it.  Delete any current Scratch
      571     9086                    Source file, and write the buffers to the file.
      572     9087                Build the IT_OPERAND node, pointing to a VD$FILE_KEY for
      573     9088                    the Scratch Source file.
      574     9089                Allocate IT_SELECT and IT_ADJUST nodes, then attach the
      575     9090                    IT_OPERAND node to them.
      576     9091                Fill in IT$BLOCK_EXPR.DOMAINN and .OPTIONS for the Scratch
      577     9092                    Source file.
      578     9093        */
      579     9094
      580     9095    1   STRING_EXPRESSION: PROC ALTRET;

   9095  1 000512   200020 741300       STRING_EXPR* STX1  ! T$+2,,AUTO

      581     9096
      582     9097
      583     9098    2   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
      584     9099              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      585     9113    2   DCL STRING_STREAM$ PTR;
      586     9114        %VD$ACCESS_OPTIONS (NAME=OPEN_OPTIONS, STCLASS=AUTO);
      587     9143        %VD$LOCATION (NAME=STRING_LOC, STCLASS=AUTO);
      588     9171    2   DCL XUE_EXP$ PTR;
      589     9172    2   DCL STR_INDEX SBIN;
      590     9173    2   DCL BUFFER$ PTR;
      591     9174    2   DCL RET_CODE CHAR(1) CALIGNED;
      592     9175    2   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
      593     9176    2   DCL WRITTEN_NODE$ PTR;
      594     9177    2   DCL IT_OPERAND$ PTR;
      595     9178    2   DCL WILD_STRING$ PTR;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:99   
      596     9179
      597     9180
      598     9181        %VD$STREAM (NAME=STRING$STREAM, STCLASS="BASED(STRING_STREAM$)");
      599     9287        %PARSE$OUT (NAME=XUE$EXP, STCLASS="BASED(XUE_EXP$)");
      600     9332        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
      601     9390        %VD$FILE_NODE (NAME=WRITTEN$NODE, STCLASS="BASED(WRITTEN_NODE$)");
      602     9483        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
      603     9549        %VD$WILD_STRINGS (NAME=WILD$STRINGS, STCLASS="BASED(VD_6E.WILD_STRINGS$)");
      604     9664        %VD$WILD_STRINGS (NAME=WILD$STRING, STCLASS="BASED(WILD_STRING$)");
      605     9779        %VD$KEY_NUMBER;
      606     9794        %VD$TEXTC;
      607     9817
      608     9818
      609     9819
      610     9820                /*
      611     9821                *   Open a stream to the Scratch Source file.
      612     9822                */
      613     9823
      614     9824    2           STRING_STREAM$ = ADDR(NIL);

   9824  1 000513   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000514   200022 756100                    STQ     STRING_STREAM$,,AUTO

      615     9825    2           CALL VDG$OALLOC (%CLS_STREAM, STRING_STREAM$)

   9825  1 000515   200022 630500                    EPPR0   STRING_STREAM$,,AUTO
         1 000516   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 000517   000013 236000 2                  LDQ     11
         1 000520   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 000521   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000522   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000523   000000 701000 xent               TSX1    VDG$OALLOC
         1 000524   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

      616     9826    2             ALTRET (OALLOC_FAILED);
      617     9827
      618     9828    2           OPEN_OPTIONS = %CLEAR;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:100  

   9828  1 000525   000100 100400                    MLR     fill='000'O
         1 000526   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000527   200023 000024                    ADSC9   OPEN_OPTIONS,,AUTO       cn=0,n=20

      619     9829    2           OPEN_OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;

   9829  1 000530   000012 236000 xsym               LDQ     VD_6E+10
         1 000531   200023 756100                    STQ     OPEN_OPTIONS,,AUTO

      620     9830    2           OPEN_OPTIONS.PROTECT# = %DONT_PROTECT;

   9830  1 000532   000002 220003                    LDX0    2,DU
         1 000533   200025 740100                    STX0    EVAL_OPTIONS+1,,AUTO

      621     9831    2           OPEN_OPTIONS.EXIST# = %EX_ANY;

   9831  1 000534   000003 221003                    LDX1    3,DU
         1 000535   200025 441100                    SXL1    EVAL_OPTIONS+1,,AUTO

      622     9832
      623     9833                /*
      624     9834                *           !!! CAUTION !!!
      625     9835                *   We're about to reset VD_ACCESSOR_PRIV.  Any premature
      626     9836                *       exits between now and the call to FCLOSE must
      627     9837                *       restore VD_ACCESSOR_PRIV!!!
      628     9838                */
      629     9839
      630     9840    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;

   9840  1 000536   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         1 000537   777000 376003                    ANQ     -512,DU
         1 000540   200021 756100                    STQ     SAVE_ACCESSOR_PRIV,,AUTO

      631     9841    2           VD_ACCESSOR_PRIV = %NAC_ALL_BITS;

   9841  1 000541   777000 236003                    LDQ     -512,DU
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:101  
         1 000542   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

      632     9842    2           CALL VDA$FOPEN (STRING$STREAM, VD_KEY_SCRATCH_SOURCE, 0,

   9842  1 000543   200023 630500                    EPPR0   OPEN_OPTIONS,,AUTO
         1 000544   200063 450500                    STP0    NEW_SELECT$+4,,AUTO
         1 000545   000014 236000 2                  LDQ     12
         1 000546   200062 756100                    STQ     NEW_SELECT$+3,,AUTO
         1 000547   000015 236000 2                  LDQ     13
         1 000550   200022 235100                    LDA     STRING_STREAM$,,AUTO
         1 000551   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 000552   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000553   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000554   000000 701000 xent               TSX1    VDA$FOPEN
         1 000555   001244 702000 1                  TSX2    FOPEN_FAILED

      633     9843    2             OPEN_OPTIONS)
      634     9844    2             ALTRET (FOPEN_FAILED);
      635     9845
      636     9846                /*
      637     9847                *   Update the new-domain and options info in IT$BLOCK_EXPR.
      638     9848                */
      639     9849    2           IT$BLOCK_EXPR.DOMAINN.FILE_KEY = VD_KEY_SCRATCH_SOURCE;

   9849  1 000556   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000557   000100 100400                    MLR     fill='000'O
         1 000560   000000 000010 xsym               ADSC9   VD_KEY_SCRATCH_SOURCE    cn=0,n=8
         1 000561   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8

      640     9850    2           IT$BLOCK_EXPR.DOMAINN.RANGE = %CLEAR;

   9850  1 000562   000100 100400                    MLR     fill='000'O
         1 000563   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000564   000006 000110                    ADSC9   6,,PR0                   cn=0,n=72

      641     9851    2           IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:102  
   9851  1 000565   000100 100400                    MLR     fill='000'O
         1 000566   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 000567   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8

      642     9852    2             VD_KEY_NUMERIC_BOF; /* Scratch files have numeric keys */
      643     9853    2           IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;

   9853  1 000570   400000 236007                    LDQ     -131072,DL
         1 000571   000027 256100                    ORSQ    23,,PR0

      644     9854
      645     9855    2           IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = VD_6E.STRUCTURE_SCRATCH$;

   9855  1 000572   000012 236000 xsym               LDQ     VD_6E+10
         1 000573   000030 756100                    STQ     24,,PR0

      646     9856    2           IT$BLOCK_EXPR.OPTIONS.LEVEL# = %LVL_EXT_REC;

   9856  1 000574   000001 220003                    LDX0    1,DU
         1 000575   000031 740100                    STX0    25,,PR0

      647     9857    2           IT$BLOCK_EXPR.OPTIONS.COMPONENT# = %CO_DATA;

   9857  1 000576   000003 221003                    LDX1    3,DU
         1 000577   000031 441100                    SXL1    25,,PR0

      648     9858                /* Strings can't be changed: flag it protected */
      649     9859    2           IT$BLOCK_EXPR.OPTIONS.PROTECT# = %PROTECT;

   9859  1 000600   000032 740100                    STX0    26,,PR0

      650     9860    2           IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD;

   9860  1 000601   000002 222003                    LDX2    2,DU
         1 000602   000032 442100                    SXL2    26,,PR0

      651     9861
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:103  
      652     9862                /* Delete the old file contents, if any */
      653     9863    2           CALL VDA$LDELETE (STRING$STREAM, IT$BLOCK_EXPR.DOMAINN.RANGE)

   9863  1 000603   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 000604   000006 036003                    ADLQ    6,DU
         1 000605   200022 235100                    LDA     STRING_STREAM$,,AUTO
         1 000606   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 000607   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000610   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000611   000000 701000 xent               TSX1    VDA$LDELETE
         1 000612   001244 702000 1                  TSX2    FOPEN_FAILED

      654     9864    2             ALTRET (LDELETE_FAILED);
      655     9865
      656     9866
      657     9867                /* Reset any matching wildcard locations */
      658     9868    2           IF VD_6E.WILD_STRINGS$ ~= ADDR(NIL) THEN

   9868  1 000613   000025 236000 xsym               LDQ     VD_6E+21
         1 000614   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000615   000621 600000 1                  TZE     s:9871

      659     9869    2              WILD$STRINGS.N_WILDCARDS# = 0;

   9869  1 000616   000000 220003                    LDX0    0,DU
         1 000617   000025 470400 xsym               LDP0    VD_6E+21
         1 000620   000002 440100                    SXL0    2,,PR0

      660     9870
      661     9871    2           STRING_LOC = VD_KEY_NUMERIC_BOF;

   9871  1 000621   000100 100400                    MLR     fill='000'O
         1 000622   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 000623   200030 000044                    ADSC9   STRING_LOC,,AUTO         cn=0,n=36

      662     9872
      663     9873                /*
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:104  
      664     9874                *   Evaluate the XUE_EXP# node and write it's buffers to the
      665     9875                *       Scratch Source file.
      666     9876                */
      667     9877
      668     9878    2           XUE_EXP$ = PT_BLOCK_EXPR.SUBLK$ (0);

   9878  1 000624   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 000625   000003 236100                    LDQ     3,,PR0
         1 000626   200041 756100                    STQ     XUE_EXP$,,AUTO

      669     9879    2           STR_INDEX = 0;

   9879  1 000627   200042 450100                    STZ     STR_INDEX,,AUTO

      670     9880    3           DO UNTIL STR_INDEX >= XUE_ECB.OUT$->VD$TEXTC.LENGTH#;

      671     9881    3              CALL VDE$PSTRING (XUE$EXP, STR_INDEX, BUFFER$, RET_CODE,

   9881  1 000630   200045 630500                    EPPR0   CTRL_ARGS,,AUTO
         1 000631   200064 450500                    STP0    NEW_SELECT$+5,,AUTO
         1 000632   200044 631500                    EPPR1   RET_CODE,,AUTO
         1 000633   200063 451500                    STP1    NEW_SELECT$+4,,AUTO
         1 000634   200043 633500                    EPPR3   BUFFER$,,AUTO
         1 000635   200062 453500                    STP3    NEW_SELECT$+3,,AUTO
         1 000636   200042 634500                    EPPR4   STR_INDEX,,AUTO
         1 000637   200061 454500                    STP4    NEW_SELECT$+2,,AUTO
         1 000640   200041 236100                    LDQ     XUE_EXP$,,AUTO
         1 000641   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 000642   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000643   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000644   000000 701000 xent               TSX1    VDE$PSTRING
         1 000645   001244 702000 1                  TSX2    FOPEN_FAILED

      672     9882    3                CTRL_ARGS)
      673     9883    3                ALTRET (PSTRING_FAILED);
      674     9884    3              IF XUE_EXP$ ~= ADDR(NIL) THEN

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:105  
   9884  1 000646   200041 236100                    LDQ     XUE_EXP$,,AUTO
         1 000647   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000650   000654 600000 1                  TZE     s:9887

      675     9885    3                 XUE_EXP$ = ADDR(NIL);    /* NIL on 2nd thru nth calls */

   9885  1 000651   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000652   200041 756100                    STQ     XUE_EXP$,,AUTO
         1 000653   000657 710000 1                  TRA     s:9893

      676     9886    4              ELSE DO;

      677     9887    4                 ADDR(STRING_LOC.KEY (%(LVL_EXT_REC-1))) ->

   9887  1 000654   200031 236100                    LDQ     STRING_LOC+1,,AUTO
         1 000655   001750 036007                    ADLQ    1000,DL
         1 000656   200031 552134                    STBQ    STRING_LOC+1,'34'O,AUTO

      678     9888    4                   VD$KEY_NUMBER.BYTES# =
      679     9889    4                   ADDR(STRING_LOC.KEY (%(LVL_EXT_REC-1))) ->
      680     9890    4                   VD$KEY_NUMBER.BYTES# + 1000;
      681     9891    4                 END;

      682     9892
      683     9893    4              IF BUFFER$ = ADDR(NIL) THEN DO;

   9893  1 000657   200043 236100                    LDQ     BUFFER$,,AUTO
         1 000660   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000661   000710 601000 1                  TNZ     s:9905

      684     9894    4                 CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,

   9894  1 000662   000016 036000 2                  ADLQ    14
         1 000663   770000 036007                    ADLQ    -4096,DL
         1 000664   000017 376000 2                  ANQ     15
         1 000665   000022 772000                    QRL     18
         1 000666   200043 235100                    LDA     BUFFER$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:106  
         1 000667   000022 771000                    ARL     18
         1 000670   200060 755100                    STA     NEW_SELECT$+1,,AUTO
         1 000671   200060 136100                    SBLQ    NEW_SELECT$+1,,AUTO
         1 000672   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 000673   200061 630500                    EPPR0   NEW_SELECT$+2,,AUTO
         1 000674   200064 450500                    STP0    NEW_SELECT$+5,,AUTO
         1 000675   200043 631500                    EPPR1   BUFFER$,,AUTO
         1 000676   200063 451500                    STP1    NEW_SELECT$+4,,AUTO
         1 000677   000020 236000 2                  LDQ     16
         1 000700   200062 756100                    STQ     NEW_SELECT$+3,,AUTO
         1 000701   200062 630500                    EPPR0   NEW_SELECT$+3,,AUTO
         1 000702   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000703   000000 701000 xent               TSX1    VDG$OALLOC
         1 000704   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

      685     9895    4                   POFFW(PALIGNW(ADDR(BUFFER.BYTES)), BUFFER$))
      686     9896    4                   ALTRET (OALLOC_FAILED);
      687     9897    4                 BUFFER.LENGTH# = 0;   /* Build 0-length buffer */

   9897  1 000705   000000 220003                    LDX0    0,DU
         1 000706   200043 470500                    LDP0    BUFFER$,,AUTO
         1 000707   000002 740100                    STX0    2,,PR0

      688     9898    4                 END;

      689     9899
      690     9900                   /*
      691     9901                   *   If we encountered a wildcard, save its position in
      692     9902                   *   WILD$STRINGS
      693     9903                   */
      694     9904
      695     9905    3              IF RET_CODE = %FNID_WILD_CHAR

   9905  1 000710   200044 236100                    LDQ     RET_CODE,,AUTO
         1 000711   777000 376003                    ANQ     -512,DU
         1 000712   127000 116003                    CMPQ    44544,DU
         1 000713   000720 600000 1                  TZE     s:9907
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:107  
         1 000714   200044 236100                    LDQ     RET_CODE,,AUTO
         1 000715   777000 376003                    ANQ     -512,DU
         1 000716   077000 116003                    CMPQ    32256,DU
         1 000717   001021 601000 1                  TNZ     s:9941

      696     9906    4                OR RET_CODE = %FNID_WILD_STRING THEN DO;

      697     9907    4                 IF RET_CODE = %FNID_WILD_STRING THEN

   9907  1 000720   200044 236100                    LDQ     RET_CODE,,AUTO
         1 000721   777000 376003                    ANQ     -512,DU
         1 000722   077000 116003                    CMPQ    32256,DU
         1 000723   000727 601000 1                  TNZ     s:9909

      698     9908    4                    CTRL_ARGS(0) = 1;

   9908  1 000724   000001 235007                    LDA     1,DL
         1 000725   200045 755100                    STA     CTRL_ARGS,,AUTO
         1 000726   000732 710000 1                  TRA     s:9912

      699     9909    4                 ELSE IF CTRL_ARGS(1) ~= CTRL_ARGS(0) THEN

   9909  1 000727   200046 236100                    LDQ     CURR_MOVE$+1,,AUTO
         1 000730   200045 116100                    CMPQ    CTRL_ARGS,,AUTO
         1 000731   001151 601000 1                  TNZ     BAD_CTRL_IN_LITERAL_FAILURE

      700     9910    4                       GOTO BAD_CTRL_IN_LITERAL_FAILURE;
      701     9911
      702     9912    4                 IF CTRL_ARGS(0) <= 0 THEN

   9912  1 000732   200045 235100                    LDA     CTRL_ARGS,,AUTO
         1 000733   000736 605400 1                  TPNZ    s:9915

      703     9913    4                    CTRL_ARGS(0) = 1;

   9913  1 000734   000001 236007                    LDQ     1,DL
         1 000735   200045 756100                    STQ     CTRL_ARGS,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:108  

      704     9914
      705     9915    5                 IF VD_6E.WILD_STRINGS$ = ADDR(NIL) THEN DO;

   9915  1 000736   000025 236000 xsym               LDQ     VD_6E+21
         1 000737   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000740   000760 601000 1                  TNZ     s:9923

      706     9916    5                    CALL VDG$OALLOC (%CLS_BUFFER, T$, SIZEW(WILD$STRINGS) +

   9916  1 000741   000022 236000 2                  LDQ     18
         1 000742   200062 756100                    STQ     NEW_SELECT$+3,,AUTO
         1 000743   200016 630500                    EPPR0   T$,,AUTO
         1 000744   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 000745   000020 236000 2                  LDQ     16
         1 000746   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 000747   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 000750   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000751   000000 701000 xent               TSX1    VDG$OALLOC
         1 000752   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

      707     9917    5                      %(MX_WILD_STRINGS-1)*SIZEW(WILD$STRINGS.W))
      708     9918    5                      ALTRET (OALLOC_FAILED);
      709     9919    5                    VD_6E.WILD_STRINGS$ = T$;

   9919  1 000753   200016 236100                    LDQ     T$,,AUTO
         1 000754   000025 756000 xsym               STQ     VD_6E+21

      710     9920    5                    WILD$STRINGS.N_WILDCARDS# = 0;

   9920  1 000755   000000 220003                    LDX0    0,DU
         1 000756   000025 470400 xsym               LDP0    VD_6E+21
         1 000757   000002 440100                    SXL0    2,,PR0

      711     9921    5                    END;

      712     9922
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:109  
      713     9923    4                 IF WILD$STRINGS.N_WILDCARDS# = %MX_WILD_STRINGS THEN

   9923  1 000760   000025 470400 xsym               LDP0    VD_6E+21
         1 000761   000002 720100                    LXL0    2,,PR0
         1 000762   000012 100003                    CMPX0   10,DU
         1 000763   001234 600000 1                  TZE     TOO_MANY_WILD_STRINGS_FAILURE

      714     9924    4                    GOTO TOO_MANY_WILD_STRINGS_FAILURE;
      715     9925
      716     9926    4                 WILD_STRING$ = PINCRW (VD_6E.WILD_STRINGS$,

   9926  1 000764   000000 636010                    EAQ     0,X0
         1 000765   000023 402007                    MPY     19,DL
         1 000766   000025 036000 xsym               ADLQ    VD_6E+21
         1 000767   200051 756100                    STQ     WILD_STRING$,,AUTO

      717     9927    4                   SIZEW(WILD$STRING.W) * WILD$STRINGS.N_WILDCARDS#);
      718     9928    4                 WILD$STRINGS.N_WILDCARDS# = WILD$STRINGS.N_WILDCARDS# + 1;

   9928  1 000770   000001 621010                    EAX1    1,X0
         1 000771   000002 441100                    SXL1    2,,PR0

      719     9929
      720     9930    4                 WILD$STRING.W.N# = CTRL_ARGS(0);

   9930  1 000772   200051 470500                    LDP0    WILD_STRING$,,AUTO
         1 000773   200045 235100                    LDA     CTRL_ARGS,,AUTO
         1 000774   000003 755100                    STA     3,,PR0

      721     9931    4                 WILD$STRING.W.RANGE.START = STRING_LOC;

   9931  1 000775   000100 100500                    MLR     fill='000'O
         1 000776   200030 000044                    ADSC9   STRING_LOC,,AUTO         cn=0,n=36
         1 000777   000004 000044                    ADSC9   4,,PR0                   cn=0,n=36

      722     9932    4                 WILD$STRING.W.RANGE.START.POSITION# = BUFFER.LENGTH#;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:110  
   9932  1 001000   200043 471500                    LDP1    BUFFER$,,AUTO
         1 001001   100002 220100                    LDX0    2,,PR1
         1 001002   000014 740100                    STX0    12,,PR0

      723     9933    4                 WILD$STRING.W.RANGE.ENDD = WILD$STRING.W.RANGE.START;

   9933  1 001003   000100 100500                    MLR     fill='000'O
         1 001004   000004 000044                    ADSC9   4,,PR0                   cn=0,n=36
         1 001005   000015 000044                    ADSC9   13,,PR0                  cn=0,n=36

      724     9934
      725     9935    4                 IF STR_INDEX >= XUE_ECB.OUT$->VD$TEXTC.LENGTH# THEN EXIT;

   9935  1 001006   000004 471400 xsym               LDP1    XUE_ECB+4
         1 001007   100000 236100                    LDQ     0,,PR1
         1 001010   000033 772000                    QRL     27
         1 001011   200042 116100                    CMPQ    STR_INDEX,,AUTO
         1 001012   001020 604400 1                  TMOZ    s:9939

      726     9936    4                 ADDR (WILD$STRING.W.RANGE.ENDD) -> VD$KEY_NUMBER.BYTES# =

   9936  1 001013   000016 236100                    LDQ     14,,PR0
         1 001014   000001 036007                    ADLQ    1,DL
         1 001015   000016 552134                    STBQ    14,'34'O,PR0

      727     9937    4                   ADDR (WILD$STRING.W.RANGE.ENDD) -> VD$KEY_NUMBER.BYTES# + 1;
      728     9938    4                 RET_CODE = %FNID_RECORD;

   9938  1 001016   122000 236003                    LDQ     41984,DU
         1 001017   200044 756100                    STQ     RET_CODE,,AUTO

      729     9939    4                 END;

   9939  1 001020   001031 710000 1                  TRA     s:9945

      730     9940
      731     9941    3              ELSE IF RET_CODE ~= %CHR_SPACE
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:111  

   9941  1 001021   200044 236100                    LDQ     RET_CODE,,AUTO
         1 001022   777000 376003                    ANQ     -512,DU
         1 001023   040000 116003                    CMPQ    16384,DU
         1 001024   001031 600000 1                  TZE     s:9945
         1 001025   200044 236100                    LDQ     RET_CODE,,AUTO
         1 001026   777000 376003                    ANQ     -512,DU
         1 001027   122000 116003                    CMPQ    41984,DU
         1 001030   001151 601000 1                  TNZ     BAD_CTRL_IN_LITERAL_FAILURE

      732     9942    3                   AND RET_CODE ~= %FNID_RECORD THEN
      733     9943    3                    GOTO BAD_CTRL_IN_LITERAL_FAILURE;
      734     9944
      735     9945    3              CALL VDA$LWRITE (STRING$STREAM, STRING_LOC, , BUFFER)

   9945  1 001031   200043 236100                    LDQ     BUFFER$,,AUTO
         1 001032   000001 235000 xsym               LDA     B_VECTNIL+1
         1 001033   200062 757100                    STAQ    NEW_SELECT$+3,,AUTO
         1 001034   200030 630500                    EPPR0   STRING_LOC,,AUTO
         1 001035   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 001036   200022 236100                    LDQ     STRING_STREAM$,,AUTO
         1 001037   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 001040   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001041   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001042   000000 701000 xent               TSX1    VDA$LWRITE
         1 001043   001240 702000 1                  TSX2    LWRITE_FAILED

      736     9946    3                ALTRET (LWRITE_FAILED);
      737     9947    4              IF RET_CODE ~= %FNID_RECORD THEN DO;

   9947  1 001044   200044 236100                    LDQ     RET_CODE,,AUTO
         1 001045   777000 376003                    ANQ     -512,DU
         1 001046   122000 116003                    CMPQ    41984,DU
         1 001047   001057 600000 1                  TZE     s:9952

      738     9948    4                 WRITTEN_NODE$ = STRING$STREAM.PORT$ ->

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:112  
   9948  1 001050   200022 470500                    LDP0    STRING_STREAM$,,AUTO
         1 001051   000001 471500                    LDP1    1,,PR0
         1 001052   100040 236100                    LDQ     32,,PR1
         1 001053   200047 756100                    STQ     WRITTEN_NODE$,,AUTO

      739     9949    4                   VD$PORT.LEVEL.INTERNAL$ (%LVL_EXT_REC);
      740     9950    4                 WRITTEN$NODE.DESC.EOR = %FALSE;

   9950  1 001054   200047 473500                    LDP3    WRITTEN_NODE$,,AUTO
         1 001055   000031 236000 xsym               LDQ     B_VECTNIL+25
         1 001056   300011 356100                    ANSQ    9,,PR3

      741     9951    4                 END;

      742     9952    3              END;

   9952  1 001057   000004 470400 xsym               LDP0    XUE_ECB+4
         1 001060   000000 236100                    LDQ     0,,PR0
         1 001061   000033 772000                    QRL     27
         1 001062   200042 116100                    CMPQ    STR_INDEX,,AUTO
         1 001063   000630 605400 1                  TPNZ    s:9881

      743     9953                /*
      744     9954                *   Make final adjustments in domain info of IT$BLOCK_EXPR
      745     9955                */
      746     9956    3           IF RET_CODE ~= %FNID_RECORD THEN DO;

   9956  1 001064   200044 236100                    LDQ     RET_CODE,,AUTO
         1 001065   777000 376003                    ANQ     -512,DU
         1 001066   122000 116003                    CMPQ    41984,DU
         1 001067   001102 600000 1                  TZE     s:9964

      747     9957    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.POSITION# =

   9957  1 001070   200047 471500                    LDP1    WRITTEN_NODE$,,AUTO
         1 001071   100010 473500                    LDP3    8,,PR1
         1 001072   300002 220100                    LDX0    2,,PR3
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:113  
         1 001073   200006 474500                    LDP4    IT_BLOCK_EXPR$,,AUTO
         1 001074   400027 740100                    STX0    23,,PR4

      748     9958    3                WRITTEN$NODE.DESC.DATA$ -> BUFFER.LENGTH#;
      749     9959    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.KEY (%LVL_LOWER-1) =

   9959  1 001075   200030 237100                    LDAQ    STRING_LOC,,AUTO
         1 001076   400017 755100                    STA     15,,PR4
         1 001077   400020 756100                    STQ     16,,PR4

      750     9960    3                STRING_LOC.KEY (%LVL_EXT_REC - 1);
      751     9961    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %FALSE;

   9961  1 001100   000023 236000 2                  LDQ     19
         1 001101   400027 356100                    ANSQ    23,,PR4

      752     9962    3              END;

      753     9963
      754     9964    2           CALL VDA$FCLOSE (STRING$STREAM)

   9964  1 001102   200022 630500                    EPPR0   STRING_STREAM$,,AUTO
         1 001103   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001104   000000 701000 xent               TSX1    VDA$FCLOSE
         1 001105   001244 702000 1                  TSX2    FOPEN_FAILED

      755     9965    2             ALTRET (FCLOSE_FAILED);
      756     9966    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   9966  1 001106   200021 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 001107   777000 376003                    ANQ     -512,DU
         1 001110   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

      757     9967
      758     9968                /*
      759     9969                *   Now build the IT_OPERAND node for the Scratch Source file.
      760     9970                */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:114  
      761     9971
      762     9972    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

   9972  1 001111   200016 630500                    EPPR0   T$,,AUTO
         1 001112   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 001113   000025 236000 2                  LDQ     21
         1 001114   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 001115   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001116   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001117   000000 701000 xent               TSX1    VDG$OALLOC
         1 001120   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

      763     9973    2             ALTRET (OALLOC_FAILED);
      764     9974    2           IT_OPERAND$ = T$;

   9974  1 001121   200016 236100                    LDQ     T$,,AUTO
         1 001122   200050 756100                    STQ     IT_OPERAND$,,AUTO

      765     9975    2           IT$OPERAND.OPTIONS.POINT# = %PNT_AO;

   9975  1 001123   000001 220003                    LDX0    1,DU
         1 001124   200050 470500                    LDP0    IT_OPERAND$,,AUTO
         1 001125   000005 740100                    STX0    5,,PR0

      766     9976    2           IT$OPERAND.CODE# = %OPAND_FILE;

   9976  1 001126   000003 740100                    STX0    3,,PR0

      767     9977    2           IT$OPERAND.PARAM$ = ADDR(VD_FKEY_SCRATCH_SOURCE);

   9977  1 001127   000026 236000 2                  LDQ     22
         1 001130   000010 756100                    STQ     8,,PR0

      768     9978
      769     9979                /*
      770     9980                *   Link IT$OPERAND into the InTree.
      771     9981                */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:115  
      772     9982
      773     9983    2           CALL GUAR_LAST_ADJUST

   9983  1 001131   003627 701000 1                  TSX1    GUAR_LAST_ADJUST
         1 001132   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

      774     9984    2             ALTRET (GUAR_LAST_ADJUST_FAILED);
      775     9985    2           IT$OPERAND.PARENT$ = LAST_ADJUST$;

   9985  1 001133   200010 236100                    LDQ     LAST_ADJUST$,,AUTO
         1 001134   200050 470500                    LDP0    IT_OPERAND$,,AUTO
         1 001135   000001 756100                    STQ     1,,PR0

      776     9986                /* LAST_MOVEMENT$ should be ADDR(NIL) */
      777     9987    2           LAST_MOVEMENT$ = IT_OPERAND$;

   9987  1 001136   200050 236100                    LDQ     IT_OPERAND$,,AUTO
         1 001137   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

      778     9988    2           LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;

   9988  1 001140   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 001141   100004 756100                    STQ     4,,PR1

      779     9989    2           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;

   9989  1 001142   100005 756100                    STQ     5,,PR1

      780     9990
      781     9991    2           CALL VDG$OFREE (STRING$STREAM);

   9991  1 001143   200022 630500                    EPPR0   STRING_STREAM$,,AUTO
         1 001144   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001145   000000 701000 xent               TSX1    VDG$OFREE
         1 001146   000000 011000                    NOP     0

      782     9992    2           RETURN;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:116  

   9992  1 001147   200020 221300                    LDX1  ! T$+2,,AUTO
         1 001150   000001 702211                    TSX2  ! 1,X1

      783     9993
      784     9994
      785     9995
      786     9996    2   BAD_CTRL_IN_LITERAL_FAILURE:
      787     9997    3           CALL VDG$ERRMSG (%E$HUH) WHENRETURN DO;

   9997  1 001151   000006 630400 2     BAD_CTRL_IN* EPPR0   6
         1 001152   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001153   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001154   001233 702000 1                  TSX2    s:10011

      788     9998    4              DO SELECT ASCBIN(RET_CODE);

   9998  1 001155   200044 236100                    LDQ     RET_CODE,,AUTO
         1 001156   000033 772000                    QRL     27
         1 001157   000126 116007                    CMPQ    86,DL
         1 001160   001165 602000 1                  TNC     s:9998+8
         1 001161   001176 600000 1                  TZE     s:10000
         1 001162   000127 116007                    CMPQ    87,DL
         1 001163   001233 601000 1                  TNZ     s:10011
         1 001164   001212 710000 1                  TRA     s:10004
         1 001165   000103 116007                    CMPQ    67,DL
         1 001166   001173 602000 1                  TNC     s:9998+14
         1 001167   001204 600000 1                  TZE     s:10002
         1 001170   000105 116007                    CMPQ    69,DL
         1 001171   001233 601000 1                  TNZ     s:10011
         1 001172   001226 710000 1                  TRA     s:10008
         1 001173   000102 116007                    CMPQ    66,DL
         1 001174   001233 601000 1                  TNZ     s:10011
         1 001175   001220 710000 1                  TRA     s:10006

      789     9999    4                 SELECT (%ASCBIN(FNID_VALUE));

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:117  
      790    10000    4                 LAST$ERR.ERR.CODE# = %E$TOO_MANY_CTRLFN_VALUE_PARAMS;

  10000  1 001176   000032 470400 xsym               LDP0    VD_6E+26
         1 001177   000002 236100                    LDQ     2,,PR0
         1 001200   000007 376000 2                  ANQ     7
         1 001201   000770 276007                    ORQ     504,DL
         1 001202   000002 756100                    STQ     2,,PR0
         1 001203   001233 710000 1                  TRA     s:10011

      791    10001    4                 SELECT (%ASCBIN(FNID_CURRENT));

      792    10002    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_CURR_CONFLICTS_W_LIT;

  10002  1 001204   000032 470400 xsym               LDP0    VD_6E+26
         1 001205   000002 236100                    LDQ     2,,PR0
         1 001206   000007 376000 2                  ANQ     7
         1 001207   001020 276007                    ORQ     528,DL
         1 001210   000002 756100                    STQ     2,,PR0
         1 001211   001233 710000 1                  TRA     s:10011

      793    10003    4                 SELECT (%ASCBIN(FNID_WILD_CHAR));

      794    10004    4                 LAST$ERR.ERR.CODE# = %E$TOO_MANY_CTRLFN_WILDC_PARAMS;

  10004  1 001212   000032 470400 xsym               LDP0    VD_6E+26
         1 001213   000002 236100                    LDQ     2,,PR0
         1 001214   000007 376000 2                  ANQ     7
         1 001215   001000 276007                    ORQ     512,DL
         1 001216   000002 756100                    STQ     2,,PR0
         1 001217   001233 710000 1                  TRA     s:10011

      795    10005    4                 SELECT (%ASCBIN(FNID_BO_MATCH));

      796    10006    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_BOM_CONFLICTS_W_LIT;

  10006  1 001220   000032 470400 xsym               LDP0    VD_6E+26
         1 001221   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:118  
         1 001222   000007 376000 2                  ANQ     7
         1 001223   001010 276007                    ORQ     520,DL
         1 001224   000002 756100                    STQ     2,,PR0
         1 001225   001233 710000 1                  TRA     s:10011

      797    10007    4                 SELECT (%ASCBIN(FNID_EO_MATCH));

      798    10008    4                 LAST$ERR.ERR.CODE# = %E$CTRLFN_EOM_CONFLICTS_W_LIT;

  10008  1 001226   000032 470400 xsym               LDP0    VD_6E+26
         1 001227   000002 236100                    LDQ     2,,PR0
         1 001230   000007 376000 2                  ANQ     7
         1 001231   001050 276007                    ORQ     552,DL
         1 001232   000002 756100                    STQ     2,,PR0

      799    10009    4                 END;

      800    10010    3              END;

      801    10011    2           GOTO FREE_BUFFER;

  10011  1 001233   001240 710000 1                  TRA     LWRITE_FAILED

  10002  1 001234                       TOO_MANY_WI* null
      802    10012
      803    10013
      804    10014    2   TOO_MANY_WILD_STRINGS_FAILURE: ;
      805    10015    2           CALL VDG$ERRMSG (%E$TOO_MANY_WILD_STRINGS, %MX_WILD_STRINGS);

  10015  1 001234   000030 630400 2                  EPPR0   24
         1 001235   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001236   000000 701000 xent               TSX1    VDG$ERRMSG
         1 001237   000000 011000                    NOP     0

  10015  1 001240                       LWRITE_FAIL* null
      806    10016
      807    10017
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:119  
      808    10018    2   LWRITE_FAILED: ;
      809    10019    2   FREE_BUFFER:
      810    10020    2           CALL VDG$OFREE (BUFFER)

  10020  1 001240   200043 630500       FREE_BUFFER  EPPR0   BUFFER$,,AUTO
         1 001241   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001242   000000 701000 xent               TSX1    VDG$OFREE
         1 001243   001247 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

  10015  1 001244                       FOPEN_FAILED null
  10015  1 001244                       LDELETE_FAI* null
  10015  1 001244                       PSTRING_FAI* null
  10015  1 001244                       FCLOSE_FAIL* null
      811    10021    2             ALTRET (OFREE_FAILED);
      812    10022
      813    10023
      814    10024    2   FOPEN_FAILED: ;
      815    10025    2   LDELETE_FAILED: ;
      816    10026    2   PSTRING_FAILED: ;
      817    10027    2   FCLOSE_FAILED: ;
      818    10028    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

  10028  1 001244   200021 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 001245   777000 376003                    ANQ     -512,DU
         1 001246   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

  10028  1 001247                       GUAR_LAST_A* null
  10028  1 001247                       OALLOC_FAIL* null
  10028  1 001247                       OFREE_FAILED null
      819    10029
      820    10030
      821    10031    2   GUAR_LAST_ADJUST_FAILED: ;
      822    10032    2   OALLOC_FAILED: ;
      823    10033    2   OFREE_FAILED: ;
      824    10034    2           CALL VDG$OFREE (STRING$STREAM);

  10034  1 001247   200022 630500                    EPPR0   STRING_STREAM$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:120  
         1 001250   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001251   000000 701000 xent               TSX1    VDG$OFREE
         1 001252   000000 011000                    NOP     0

      825    10035    2           ALTRETURN;

  10035  1 001253   200020 221300                    LDX1  ! T$+2,,AUTO
         1 001254   000000 702211                    TSX2  ! 0,X1

      826    10036
      827    10037    2   END STRING_EXPRESSION;
      828    10038
      829    10039        %BOX (TITLE=DOMAIN_OPERAND, PAGE=YES);
             10047    2
             10051    2   /***************************************************************************
             10053    2    *                                                                         *
             10057    2            *                               DOMAIN_OPERAND                           *
             10059    2            *                                                                        *
             10061    2          ***************************************************************************/

      830    10065
      831    10066        /*I* NAME: DOMAIN_OPERAND
      832    10067            PARAMETERS:
      833    10068                OPTIONS - VD$ACCESS_OPTIONS containing only those options
      834    10069                    specified by the user explicitly for this block expression.
      835    10070            INPUT:
      836    10071                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
      837    10072                    process.
      838    10073                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
      839    10074                EDIT$BLOCK must be the VD$BLOCK_DESC for the current
      840    10075                    EditBlock.  If none, CURR$WINDOW.OPERAND.EDIT_BLOCK$ must
      841    10076                    be NIL.
      842    10077                IT$BLOCK_EXPR must exist, but must have no children.
      843    10078                    Its .OPTIONS must contain only those options explicitly
      844    10079                    given by the user for this block expression.
      845    10080                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must be nil:
      846    10081                    there should be no nodes in the InTree yet.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:121  
      847    10082            OUTPUT:
      848    10083                If the CHILD_INDEX child represents a new explicit domain:
      849    10084                    IT$BLOCK_EXPR.DOMAINN will contain the new domain's file
      850    10085                        key and range.
      851    10086                    IT$BLOCK_EXPR.OPTIONS will have any vacant fields filled
      852    10087                        in from the new domain (if the new domain is a
      853    10088                        BlockDescriptor).
      854    10089                    CHILD_INDEX will be incremented beyond any processed nodes.
      855    10090                    A VD$IT_OPERAND will be appended to the InTree.
      856    10091                    LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ will be set
      857    10092                        to point to the newly-allocated InTree nodes.
      858    10093            SCRATCH:
      859    10094                CHILD$, CHILD.
      860    10095            DESCRIPTION:
      861    10096                If CHILD_INDEX is a T_LO_NAME node, and the name's value is a
      862    10097                    block which is in the same file as the current EditBlock,
      863    10098                    then this is not a domain operand:  ignore it and return.
      864    10099                If the CHILD_INDEX node isn't one of the other domain operand
      865    10100                    codes, ignore it and return.
      866    10101                For:
      867    10102                    T_NEXT, T_PREVIOUS:
      868    10103                        Build the IT_OPERAND for these codes.
      869    10104                        Flag IT$BLOCK_EXPR.DOMAINN.NEXT or .PREVIOUS.
      870    10105                    T_FILE_FID:
      871    10106                        Build the IT_OPERAND for this code.  IT_OPERAND.PARAM$
      872    10107                            will point to a VD$FILE_KEY object.
      873    10108                        Set IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE.
      874    10109                    T_LO_NAME:
      875    10110                        Build the IT_OPERAND for this code.  IT_OPERAND.PARAM$
      876    10111                            will point to a VD$BLOCK_DESC object specifying
      877    10112                            the Location-name's value.
      878    10113                        Set IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE.
      879    10114
      880    10115                Build both an IT_SELECT and an IT_ADJUST node in the InTree.
      881    10116                Append the IT_OPERAND node with the explicit domain to
      882    10117                    the current last IT_ADJUST node.
      883    10118                Fill in CURR$WINDOW.DOMAINN for the new domain.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:122  
      884    10119        */
      885    10120
      886    10121    1   DOMAIN_OPERAND: PROC ALTRET;

  10121  1 001255   200020 741300       DOMAIN_OPER* STX1  ! T$+2,,AUTO

      887    10122
      888    10123
      889    10124
      890    10125    2   DCL NAME_DESC$ PTR;
      891    10126    2   DCL NAME_FILE_KEY$ PTR;
      892    10127    2   DCL CURRENT_FILE_KEY$ PTR;
      893    10128    2   DCL IT_OPERAND$ PTR;
      894    10129    2   DCL FILE_KEY$ PTR;
      895    10130    2   DCL VD_PARSED_PREDEF_FILE$ PTR;
      896    10131    2   DCL KEYLENGTH UBIN;
      897    10132
      898    10133
      899    10134
      900    10135        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
      901    10173        %VD$BLOCK_DESC (NAME=NAME$DESC, STCLASS="BASED(NAME_DESC$)");
      902    10320        %VD$TEXTC (NAME=NAME$FILE_KEY, STCLASS="BASED(NAME_FILE_KEY$)");
      903    10343        %VD$TEXTC (NAME=CURRENT$FILE_KEY, STCLASS="BASED(CURRENT_FILE_KEY$)");
      904    10366        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
      905    10432        %VD$FILE_KEY (STCLASS="BASED(FILE_KEY$)");
      906    10481        %VD$DIR_NODE (NAME=PREDEF$NODE, STCLASS="BASED(VD_PARSED_PREDEF_FILE$)");
      907    10519        %VD$FILE_KEY (NAME=PREDEF$KEY, STCLASS="BASED(VD_PARSED_PREDEF_FILE$)");
      908    10568        %VD$TEXTC;
      909    10591
      910    10592
      911    10593
      912    10594
      913    10595    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

  10595  1 001256   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 001257   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 001260   000003 236110                    LDQ     3,X0,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:123  
         1 001261   200014 756100                    STQ     CHILD$,,AUTO

      914    10596    2           IF CHILD.CODE = %T_MOVEMENT AND CHILD.NSUBLKS = 1 THEN

  10596  1 001262   200014 471500                    LDP1    CHILD$,,AUTO
         1 001263   100000 722100                    LXL2    0,,PR1
         1 001264   002030 102003                    CMPX2   1048,DU
         1 001265   001273 601000 1                  TNZ     s:10599
         1 001266   100001 223100                    LDX3    1,,PR1
         1 001267   000001 103003                    CMPX3   1,DU
         1 001270   001273 601000 1                  TNZ     s:10599

      915    10597    2              CHILD$ = CHILD.SUBLK$(0);

  10597  1 001271   100003 236100                    LDQ     3,,PR1
         1 001272   200014 756100                    STQ     CHILD$,,AUTO

      916    10598
      917    10599    2           IF CHILD.CODE = %T_LO_NAME

  10599  1 001273   200014 471500                    LDP1    CHILD$,,AUTO
         1 001274   100000 722100                    LXL2    0,,PR1
         1 001275   002047 102003                    CMPX2   1063,DU
         1 001276   001360 601000 1                  TNZ     s:10627
         1 001277   200004 473500                    LDP3    CURR_WINDOW$,,AUTO
         1 001300   300012 236100                    LDQ     10,,PR3
         1 001301   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001302   001360 600000 1                  TZE     s:10627

      918    10600    3             AND CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

      919    10601    3              CALL VDE$PREAD_LO_NAME (CHILD.SUBLK$(0) -> OUT$SYM.TEXTC$ ->

  10601  1 001303   100003 474500                    LDP4    3,,PR1
         1 001304   400003 475500                    LDP5    3,,PR4
         1 001305   200021 636500                    EPPR6   NAME_DESC$,,AUTO
         1 001306   200061 456500                    STP6    NEW_SELECT$+2,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:124  
         1 001307   200060 455500                    STP5    NEW_SELECT$+1,,AUTO
         1 001310   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001311   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001312   000000 701000 xent               TSX1    VDE$PREAD_LO_NAME
         1 001313   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

      920    10602    3                VD$TEXTC, NAME_DESC$)
      921    10603    3                ALTRET (PREAD_LO_NAME_FAILED);
      922    10604                   %GETKEY (KEY=NAME$DESC.FILE_KEY, PTR=NAME_FILE_KEY$);

  10611  1 001314   200021 470500                    LDP0    NAME_DESC$,,AUTO
         1 001315   000001 720100                    LXL0    1,,PR0
         1 001316   000002 100003                    CMPX0   2,DU
         1 001317   001324 601000 1                  TNZ     s:10611+8

  10611  1 001320   000002 471500                    LDP1    2,,PR0
         1 001321   100002 633500                    EPPR3   2,,PR1
         1 001322   200022 453500                    STP3    NAME_FILE_KEY$,,AUTO
         1 001323   001327 710000 1                  TRA     s:10621

  10611  1 001324   200021 236100                    LDQ     NAME_DESC$,,AUTO
         1 001325   000002 036003                    ADLQ    2,DU
         1 001326   200022 756100                    STQ     NAME_FILE_KEY$,,AUTO

      923    10614                   %GETKEY (KEY=EDIT$BLOCK.FILE_KEY, PTR=CURRENT_FILE_KEY$);

  10621  1 001327   200005 471500                    LDP1    EDIT_BLOCK$,,AUTO
         1 001330   100001 721100                    LXL1    1,,PR1
         1 001331   000002 101003                    CMPX1   2,DU
         1 001332   001337 601000 1                  TNZ     s:10621+8

  10621  1 001333   100002 473500                    LDP3    2,,PR1
         1 001334   300002 634500                    EPPR4   2,,PR3
         1 001335   200023 454500                    STP4    CURRENT_FILE_KEY$,,AUTO
         1 001336   001342 710000 1                  TRA     s:10624

  10621  1 001337   200005 236100                    LDQ     EDIT_BLOCK$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:125  
         1 001340   000002 036003                    ADLQ    2,DU
         1 001341   200023 756100                    STQ     CURRENT_FILE_KEY$,,AUTO

      924    10624    3              IF NAME$FILE_KEY.BYTES = CURRENT$FILE_KEY.BYTES THEN

  10624  1 001342   200022 473500                    LDP3    NAME_FILE_KEY$,,AUTO
         1 001343   300000 236100                    LDQ     0,,PR3
         1 001344   000033 772000                    QRL     27
         1 001345   200023 474500                    LDP4    CURRENT_FILE_KEY$,,AUTO
         1 001346   000000 622006                    EAX2    0,QL
         1 001347   400000 236100                    LDQ     0,,PR4
         1 001350   000033 772000                    QRL     27
         1 001351   000000 623006                    EAX3    0,QL
         1 001352   040140 106540                    CMPC    fill='040'O
         1 001353   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 001354   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         1 001355   001371 601000 1                  TNZ     s:10660

      925    10625    3                 RETURN;       /* LO-name is not a new domain */

  10625  1 001356   200020 221300                    LDX1  ! T$+2,,AUTO
         1 001357   000001 702211                    TSX2  ! 1,X1

      926    10626    3              END;
      927    10627    2           ELSE IF CHILD.CODE ~= %T_NEXT

  10627  1 001360   002041 102003                    CMPX2   1057,DU
         1 001361   001371 600000 1                  TZE     s:10660
         1 001362   002042 102003                    CMPX2   1058,DU
         1 001363   001371 600000 1                  TZE     s:10660
         1 001364   002043 102003                    CMPX2   1059,DU
         1 001365   001371 600000 1                  TZE     s:10660
         1 001366   002000 102003                    CMPX2   1024,DU
         1 001367   001371 600000 1                  TZE     s:10660

      928    10628    2                AND CHILD.CODE ~= %T_PREVIOUS
      929    10629    2                AND CHILD.CODE ~= %T_FILE_FID
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:126  
      930    10630    2                AND CHILD.CODE ~= %T_PREDEF_FILE_NAME THEN
      931    10631    2                 RETURN;      /* Not a domain operand */

  10631  1 001370   000001 702211                    TSX2  ! 1,X1

      932    10632
      933    10633                %BOX (TITLE="CHILD is a new domain specification");

             10645    2   /***************************************************************************
             10647    2    *                                                                         *
             10651    2            *                    CHILD is a new domain specification                 *
             10653    2            *                                                                        *
             10655    2          ***************************************************************************/

      934    10659
      935    10660    2           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  10660  1 001371   200016 630500                    EPPR0   T$,,AUTO
         1 001372   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 001373   000025 236000 2                  LDQ     21
         1 001374   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 001375   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001376   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001377   000000 701000 xent               TSX1    VDG$OALLOC
         1 001400   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

      936    10661    2             ALTRET (OALLOC_FAILED);
      937    10662    2           IT_OPERAND$ = T$;

  10662  1 001401   200016 236100                    LDQ     T$,,AUTO
         1 001402   200024 756100                    STQ     IT_OPERAND$,,AUTO

      938    10663    2           IT$OPERAND.OPTIONS.POINT# = %PNT_AO;

  10663  1 001403   000001 220003                    LDX0    1,DU
         1 001404   200024 470500                    LDP0    IT_OPERAND$,,AUTO
         1 001405   000005 740100                    STX0    5,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:127  

      939    10664
      940    10665    3           DO CASE (CHILD.CODE);

  10665  1 001406   200014 471500                    LDP1    CHILD$,,AUTO
         1 001407   100000 236100                    LDQ     0,,PR1
         1 001410   777777 376007                    ANQ     -1,DL
         1 001411   002000 136007                    SBLQ    1024,DL
         1 001412   000050 116007                    CMPQ    40,DL
         1 001413   001415 602006 1                  TNC     s:10665+7,QL
         1 001414   001751 710000 1                  TRA     s:10765
         1 001415   001514 710000 1                  TRA     s:10681
         1 001416   001751 710000 1                  TRA     s:10765
         1 001417   001751 710000 1                  TRA     s:10765
         1 001420   001751 710000 1                  TRA     s:10765
         1 001421   001751 710000 1                  TRA     s:10765
         1 001422   001751 710000 1                  TRA     s:10765
         1 001423   001751 710000 1                  TRA     s:10765
         1 001424   001751 710000 1                  TRA     s:10765
         1 001425   001751 710000 1                  TRA     s:10765
         1 001426   001751 710000 1                  TRA     s:10765
         1 001427   001751 710000 1                  TRA     s:10765
         1 001430   001751 710000 1                  TRA     s:10765
         1 001431   001751 710000 1                  TRA     s:10765
         1 001432   001751 710000 1                  TRA     s:10765
         1 001433   001751 710000 1                  TRA     s:10765
         1 001434   001751 710000 1                  TRA     s:10765
         1 001435   001751 710000 1                  TRA     s:10765
         1 001436   001751 710000 1                  TRA     s:10765
         1 001437   001751 710000 1                  TRA     s:10765
         1 001440   001751 710000 1                  TRA     s:10765
         1 001441   001751 710000 1                  TRA     s:10765
         1 001442   001751 710000 1                  TRA     s:10765
         1 001443   001751 710000 1                  TRA     s:10765
         1 001444   001751 710000 1                  TRA     s:10765
         1 001445   001751 710000 1                  TRA     s:10765
         1 001446   001751 710000 1                  TRA     s:10765
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:128  
         1 001447   001751 710000 1                  TRA     s:10765
         1 001450   001751 710000 1                  TRA     s:10765
         1 001451   001751 710000 1                  TRA     s:10765
         1 001452   001751 710000 1                  TRA     s:10765
         1 001453   001751 710000 1                  TRA     s:10765
         1 001454   001751 710000 1                  TRA     s:10765
         1 001455   001751 710000 1                  TRA     s:10765
         1 001456   001465 710000 1                  TRA     s:10667
         1 001457   001473 710000 1                  TRA     s:10671
         1 001460   001501 710000 1                  TRA     s:10675
         1 001461   001751 710000 1                  TRA     s:10765
         1 001462   001751 710000 1                  TRA     s:10765
         1 001463   001751 710000 1                  TRA     s:10765
         1 001464   001647 710000 1                  TRA     s:10721

      941    10666    3            CASE (%T_NEXT);

      942    10667    3              IT$OPERAND.CODE# = %OPAND_NEXT;

  10667  1 001465   000003 221003                    LDX1    3,DU
         1 001466   000003 741100                    STX1    3,,PR0

      943    10668    3              IT$BLOCK_EXPR.DOMAINN.NEXT = %TRUE;

  10668  1 001467   200006 473500                    LDP3    IT_BLOCK_EXPR$,,AUTO
         1 001470   400000 236003                    LDQ     -131072,DU
         1 001471   300003 256100                    ORSQ    3,,PR3
         1 001472   001754 710000 1                  TRA     s:10769

      944    10669
      945    10670    3            CASE (%T_PREVIOUS);

      946    10671    3              IT$OPERAND.CODE# = %OPAND_PREVIOUS;

  10671  1 001473   000004 221003                    LDX1    4,DU
         1 001474   000003 741100                    STX1    3,,PR0

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:129  
      947    10672    3              IT$BLOCK_EXPR.DOMAINN.PREVIOUS = %TRUE;

  10672  1 001475   200006 473500                    LDP3    IT_BLOCK_EXPR$,,AUTO
         1 001476   200000 236003                    LDQ     65536,DU
         1 001477   300003 256100                    ORSQ    3,,PR3
         1 001500   001754 710000 1                  TRA     s:10769

      948    10673
      949    10674    3            CASE (%T_FILE_FID);

      950    10675    3              CALL VDE$PFILE_TO_EDIT (CHILD.SUBLK$(0)->OUT$SYM.TEXTC$->VD$TEXTC,

  10675  1 001501   100003 473500                    LDP3    3,,PR1
         1 001502   300003 474500                    LDP4    3,,PR3
         1 001503   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 001504   000004 036003                    ADLQ    4,DU
         1 001505   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 001506   200060 454500                    STP4    NEW_SELECT$+1,,AUTO
         1 001507   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001510   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001511   000000 701000 xent               TSX1    VDE$PFILE_TO_EDIT
         1 001512   001771 702000 1                  TSX2    PFILE_TO_EDIT_FAILED

      951    10676    3                IT$BLOCK_EXPR.DOMAINN.FILE_KEY)
      952    10677    3                ALTRET (PFILE_TO_EDIT_FAILED);
      953    10678    3              GOTO FILE_COMMON;

  10678  1 001513   001576 710000 1                  TRA     FILE_COMMON

      954    10679
      955    10680    3            CASE (%T_PREDEF_FILE_NAME);

      956    10681    3              CALL VDG$OALLOC (%CLS_FILE_KEY, IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$)

  10681  1 001514   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 001515   000005 036003                    ADLQ    5,DU
         1 001516   000033 235000 2                  LDA     27
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:130  
         1 001517   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 001520   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001521   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001522   000000 701000 xent               TSX1    VDG$OALLOC
         1 001523   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

      957    10682    3                ALTRET (OALLOC_FAILED);
      958    10683    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY.TYPE# = %KT_STRING;

  10683  1 001524   000002 220003                    LDX0    2,DU
         1 001525   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 001526   000004 740100                    STX0    4,,PR0

      959    10684    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY.REP# = %REP_REMOTE;

  10684  1 001527   000004 440100                    SXL0    4,,PR0

      960    10685    3              FILE_KEY$ = IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$;

  10685  1 001530   000005 236100                    LDQ     5,,PR0
         1 001531   200025 756100                    STQ     FILE_KEY$,,AUTO

      961    10686    3              VD_PARSED_PREDEF_FILE$ =

  10686  1 001532   200014 471500                    LDP1    CHILD$,,AUTO
         1 001533   100001 721100                    LXL1    1,,PR1
         1 001534   000001 473400 xsym               LDP3    VD_6E+1
         1 001535   300005 474500                    LDP4    5,,PR3
         1 001536   400000 635511                    EPPR5   0,X1,PR4
         1 001537   200026 455500                    STP5    VD_PARSED_PREDEF_FILE$,,AUTO

      962    10687    3                PINCRW(EQUALS$STREAM.FILE_KEY.V$,CHILD.SCRITCH);
      963    10688    3              IF PREDEF$KEY.OBJECT.CLASS# = %CLS_FILE_KEY THEN

  10688  1 001540   500000 222100                    LDX2    0,,PR5
         1 001541   000016 102003                    CMPX2   14,DU
         1 001542   001550 601000 1                  TNZ     s:10691
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:131  

      964    10689    3                 VD$FILE_KEY.UNIQUE.FNAME.BYTES = PREDEF$KEY.UNIQUE.FNAME.BYTES;

  10689  1 001543   200025 476500                    LDP6    FILE_KEY$,,AUTO
         1 001544   040100 100500                    MLR     fill='040'O
         1 001545   500004 400037                    ADSC9   4,,PR5                   cn=2,n=31
         1 001546   600004 400037                    ADSC9   4,,PR6                   cn=2,n=31
         1 001547   001562 710000 1                  TRA     s:10693

      965    10690    3              ELSE
      966    10691    3                 CALL CONCAT (VD$FILE_KEY.UNIQUE.FNAME.BYTES,

  10691  1 001550   200025 476500                    LDP6    FILE_KEY$,,AUTO
         1 001551   500013 236100                    LDQ     11,,PR5
         1 001552   000022 772000                    QRL     18
         1 001553   600004 552110                    STBQ    4,'10'O,PR6
         1 001554   040100 100400                    MLR     fill='040'O
         1 001555   000000 000006 0                  ADSC9   0                        cn=0,n=6
         1 001556   600004 600006                    ADSC9   4,,PR6                   cn=3,n=6
         1 001557   040100 100500                    MLR     fill='040'O
         1 001560   500003 000030                    ADSC9   3,,PR5                   cn=0,n=24
         1 001561   600006 200030                    ADSC9   6,,PR6                   cn=1,n=24

      967    10692    3                   PREDEF$NODE.FILE_STCLASS, %PFK_CONSTANT, PREDEF$NODE.KEY);
      968    10693    3              CALL INDEX (KEYLENGTH, ' ', VD$FILE_KEY.UNIQUE.FNAME.BYTES);

  10693  1 001562   200025 470500                    LDP0    FILE_KEY$,,AUTO
         1 001563   000000 124500                    SCM     mask='000'O
         1 001564   000004 400037                    ADSC9   4,,PR0                   cn=2,n=31
         1 001565   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 001566   200027 000100                    ARG     KEYLENGTH,,AUTO

      969    10694    3              VD$FILE_KEY.UNIQUE.FNAME.LENGTH# = KEYLENGTH;

  10694  1 001567   200027 236100                    LDQ     KEYLENGTH,,AUTO
         1 001570   000022 736000                    QLS     18
         1 001571   000004 552120                    STBQ    4,'20'O,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:132  

      970    10695    3              VD$FILE_KEY.LENGTH# = KEYLENGTH + 9;

  10695  1 001572   200027 236100                    LDQ     KEYLENGTH,,AUTO
         1 001573   000011 036007                    ADLQ    9,DL
         1 001574   000033 736000                    QLS     27
         1 001575   000002 552140                    STBQ    2,'40'O,PR0

  10695  1 001576                       FILE_COMMON  null
      971    10696    3   FILE_COMMON:;
      972    10697    3              IT$OPERAND.CODE# = %OPAND_FILE;

  10697  1 001576   000001 220003                    LDX0    1,DU
         1 001577   200024 470500                    LDP0    IT_OPERAND$,,AUTO
         1 001600   000003 740100                    STX0    3,,PR0

      973    10698    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;

  10698  1 001601   200006 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 001602   400000 236007                    LDQ     -131072,DL
         1 001603   100027 256100                    ORSQ    23,,PR1

      974    10699    3              IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =

  10699  1 001604   000100 100400                    MLR     fill='000'O
         1 001605   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 001606   100006 000010                    ADSC9   6,,PR1                   cn=0,n=8

      975    10700    3                VD_KEY_NUMERIC_BOF;
      976    10701    3              CALL VDG$OCOPY (IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$->VD$FILE_KEY,

  10701  1 001607   100005 473500                    LDP3    5,,PR1
         1 001610   200024 236100                    LDQ     IT_OPERAND$,,AUTO
         1 001611   000010 036003                    ADLQ    8,DU
         1 001612   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 001613   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 001614   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:133  
         1 001615   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001616   000000 701000 xent               TSX1    VDG$OCOPY
         1 001617   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

      977    10702    3                IT$OPERAND.PARAM$)
      978    10703    3                ALTRET (OCOPY_FAILED);
      979    10704    3              IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN

  10704  1 001620   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 001621   000030 236100                    LDQ     24,,PR0
         1 001622   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001623   001626 601000 1                  TNZ     s:10706

      980    10705    3                 IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = VD_$STRUCTURE.V$;

  10705  1 001624   000003 236000 xsym               LDQ     VD_$STRUCTURE+3
         1 001625   000030 756100                    STQ     24,,PR0

      981    10706    3              IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN

  10706  1 001626   000031 220100                    LDX0    25,,PR0
         1 001627   001632 601000 1                  TNZ     s:10708

      982    10707    3                 IT$BLOCK_EXPR.OPTIONS.LEVEL# = %LVL_LOWER;

  10707  1 001630   000001 221003                    LDX1    1,DU
         1 001631   000031 741100                    STX1    25,,PR0

      983    10708    3              IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN

  10708  1 001632   000031 720100                    LXL0    25,,PR0
         1 001633   001636 601000 1                  TNZ     s:10710

      984    10709    3                 IT$BLOCK_EXPR.OPTIONS.COMPONENT# = VD_$COMPONENT.V#;

  10709  1 001634   000003 721000 xsym               LXL1    VD_$COMPONENT+3
         1 001635   000031 441100                    SXL1    25,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:134  

      985    10710    3              IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN

  10710  1 001636   000032 220100                    LDX0    26,,PR0
         1 001637   001642 601000 1                  TNZ     s:10712

      986    10711    3                 IT$BLOCK_EXPR.OPTIONS.PROTECT# = VD_$PROTECT.V#;

  10711  1 001640   000003 721000 xsym               LXL1    VD_$PROTECT+3
         1 001641   000032 741100                    STX1    26,,PR0

      987    10712    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN

  10712  1 001642   000032 720100                    LXL0    26,,PR0
         1 001643   001754 601000 1                  TNZ     s:10769

      988    10713    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = VD_$EXIST.V#;

  10713  1 001644   000003 721000 xsym               LXL1    VD_$EXIST+3
         1 001645   000032 441100                    SXL1    26,,PR0
         1 001646   001754 710000 1                  TRA     s:10769

      989    10714
      990    10715    3            CASE (%T_LO_NAME);

      991    10716                   /*
      992    10717                   *   At the start of this routine, we read the name's
      993    10718                   *     value; NAME_DESC$ points to the VD$BLOCK_DESC for
      994    10719                   *     the name.
      995    10720                   */
      996    10721    3              IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;

  10721  1 001647   000005 221003                    LDX1    5,DU
         1 001650   000003 741100                    STX1    3,,PR0

      997    10722    3              CALL VDG$OCOPY (NAME$DESC, IT$OPERAND.PARAM$)

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:135  
  10722  1 001651   200024 236100                    LDQ     IT_OPERAND$,,AUTO
         1 001652   000010 036003                    ADLQ    8,DU
         1 001653   200021 235100                    LDA     NAME_DESC$,,AUTO
         1 001654   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 001655   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001656   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001657   000000 701000 xent               TSX1    VDG$OCOPY
         1 001660   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

      998    10723    3                ALTRET (OCOPY_FAILED);
      999    10724
     1000    10725    3              IT$BLOCK_EXPR.DOMAINN.FILE_KEY = %CLEAR;

  10725  1 001661   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 001662   000004 450100                    STZ     4,,PR0
         1 001663   000005 450100                    STZ     5,,PR0

     1001    10726                   %COPYKEY (FKEY=NAME$DESC.FILE_KEY,
     1002    10727                   TKEY=IT$BLOCK_EXPR.DOMAINN.FILE_KEY);

  10740  1 001664   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001665   000100 100500                    MLR     fill='000'O
         1 001666   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8
         1 001667   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8

  10740  1 001670   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001671   100001 720100                    LXL0    1,,PR1
         1 001672   000002 100003                    CMPX0   2,DU
         1 001673   001710 601000 1                  TNZ     s:10744

  10740  1 001674   100002 473500                    LDP3    2,,PR1
         1 001675   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 001676   000005 036003                    ADLQ    5,DU
         1 001677   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 001700   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 001701   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 001702   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:136  
         1 001703   000000 701000 xent               TSX1    VDG$OCOPY
         1 001704   001706 702000 1                  TSX2    s:10741
         1 001705   001710 710000 1                  TRA     s:10744

  10741  1 001706   200020 221300                    LDX1  ! T$+2,,AUTO
         1 001707   000000 702211                    TSX2  ! 0,X1

     1003    10743                   /* EditBlock is the entire file the LO-name points to */
     1004    10744    3              IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY (%LVL_LOWER-1) =

  10744  1 001710   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 001711   000100 100400                    MLR     fill='000'O
         1 001712   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 001713   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8

     1005    10745    3                VD_KEY_NUMERIC_BOF;
     1006    10746    3              IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF = %TRUE;

  10746  1 001714   400000 236007                    LDQ     -131072,DL
         1 001715   000027 256100                    ORSQ    23,,PR0

     1007    10747                   /*
     1008    10748                   *  Merge the access options from the LO-name's BlockDescriptor
     1009    10749                   *    into any unspecified fields in IT$BLOCK_EXPR.OPTIONS.
     1010    10750                   */
     1011    10751    3              IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN

  10751  1 001716   000030 236100                    LDQ     24,,PR0
         1 001717   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001720   001724 601000 1                  TNZ     s:10754

     1012    10752    3                 IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ =

  10752  1 001721   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001722   100025 236100                    LDQ     21,,PR1
         1 001723   000030 756100                    STQ     24,,PR0

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:137  
     1013    10753    3                   NAME$DESC.OPTIONS.STRUCTURE$;
     1014    10754    3              IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN

  10754  1 001724   000031 220100                    LDX0    25,,PR0
         1 001725   001731 601000 1                  TNZ     s:10756

     1015    10755    3                 IT$BLOCK_EXPR.OPTIONS.LEVEL# = NAME$DESC.OPTIONS.LEVEL#;

  10755  1 001726   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001727   100026 221100                    LDX1    22,,PR1
         1 001730   000031 741100                    STX1    25,,PR0

     1016    10756    3              IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN

  10756  1 001731   000031 720100                    LXL0    25,,PR0
         1 001732   001736 601000 1                  TNZ     s:10759

     1017    10757    3                 IT$BLOCK_EXPR.OPTIONS.COMPONENT# =

  10757  1 001733   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001734   100026 721100                    LXL1    22,,PR1
         1 001735   000031 441100                    SXL1    25,,PR0

     1018    10758    3                   NAME$DESC.OPTIONS.COMPONENT#;
     1019    10759    3              IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN

  10759  1 001736   000032 220100                    LDX0    26,,PR0
         1 001737   001743 601000 1                  TNZ     s:10761

     1020    10760    3                 IT$BLOCK_EXPR.OPTIONS.PROTECT# = NAME$DESC.OPTIONS.PROTECT#;

  10760  1 001740   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001741   100027 221100                    LDX1    23,,PR1
         1 001742   000032 741100                    STX1    26,,PR0

     1021    10761    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:138  
  10761  1 001743   000032 720100                    LXL0    26,,PR0
         1 001744   001754 601000 1                  TNZ     s:10769

     1022    10762    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = NAME$DESC.OPTIONS.EXIST#;

  10762  1 001745   200021 471500                    LDP1    NAME_DESC$,,AUTO
         1 001746   100027 721100                    LXL1    23,,PR1
         1 001747   000032 441100                    SXL1    26,,PR0
         1 001750   001754 710000 1                  TRA     s:10769

     1023    10763
     1024    10764    3            CASE (ELSE);

     1025    10765    3              CALL VDG$ESCREECH;

  10765  1 001751   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001752   000000 701000 xent               TSX1    VDG$ESCREECH
         1 001753   000000 011000                    NOP     0

     1026    10766    3            END;

     1027    10767
     1028    10768                /* We've successfully processed the CHILD_INDEX node */
     1029    10769    2           CHILD_INDEX = CHILD_INDEX + 1;

  10769  1 001754   200013 054100                    AOS     CHILD_INDEX,,AUTO

     1030    10770
     1031    10771                /*
     1032    10772                *   Link IT$OPERAND into the InTree.
     1033    10773                */
     1034    10774
     1035    10775    2           CALL GUAR_LAST_ADJUST

  10775  1 001755   003627 701000 1                  TSX1    GUAR_LAST_ADJUST
         1 001756   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:139  
     1036    10776    2             ALTRET (GUAR_LAST_ADJUST_FAILED);
     1037    10777    2           IT$OPERAND.PARENT$ = LAST_ADJUST$;

  10777  1 001757   200010 236100                    LDQ     LAST_ADJUST$,,AUTO
         1 001760   200024 470500                    LDP0    IT_OPERAND$,,AUTO
         1 001761   000001 756100                    STQ     1,,PR0

     1038    10778                /* LAST_MOVEMENT$ should be ADDR(NIL) */
     1039    10779    2           LAST_MOVEMENT$ = IT_OPERAND$;

  10779  1 001762   200024 236100                    LDQ     IT_OPERAND$,,AUTO
         1 001763   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     1040    10780    2           LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;

  10780  1 001764   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 001765   100004 756100                    STQ     4,,PR1

     1041    10781    2           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;

  10781  1 001766   100005 756100                    STQ     5,,PR1

     1042    10782
     1043    10783    2           RETURN;

  10783  1 001767   200020 221300                    LDX1  ! T$+2,,AUTO
         1 001770   000001 702211                    TSX2  ! 1,X1

     1044    10784
     1045    10785
     1046    10786
     1047    10787    2   PFILE_TO_EDIT_FAILED:
     1048    10788    2           LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;

  10788  1 001771   200014 470500       PFILE_TO_ED* LDP0    CHILD$,,AUTO
         1 001772   000002 720100                    LXL0    2,,PR0
         1 001773   000032 471400 xsym               LDP1    VD_6E+26
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:140  
         1 001774   100003 440100                    SXL0    3,,PR1

     1049    10789    2           CALL VDG$OFREE (IT$OPERAND)

  10789  1 001775   200024 630500                    EPPR0   IT_OPERAND$,,AUTO
         1 001776   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001777   000000 701000 xent               TSX1    VDG$OFREE
         1 002000   002003 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1050    10790    2             ALTRET (OFREE_FAILED);
     1051    10791    2           ALTRETURN;

  10791  1 002001   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002002   000000 702211                    TSX2  ! 0,X1

  10781  1 002003                       PREAD_LO_NA* null
  10781  1 002003                       OALLOC_FAIL* null
  10781  1 002003                       OFREE_FAILED null
  10781  1 002003                       OCOPY_FAILED null
  10781  1 002003                       OCOPY_RANGE* null
  10781  1 002003                       GUAR_LAST_A* null
     1052    10792
     1053    10793
     1054    10794    2   PREAD_LO_NAME_FAILED: ;
     1055    10795    2   OALLOC_FAILED: ;
     1056    10796    2   OFREE_FAILED: ;
     1057    10797    2   OCOPY_FAILED: ;
     1058    10798    2   OCOPY_RANGE_FAILED: ;
     1059    10799    2   GUAR_LAST_ADJUST_FAILED: ;
     1060    10800    2           ALTRETURN;

  10800  1 002003   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002004   000000 702211                    TSX2  ! 0,X1

     1061    10801
     1062    10802    2   END DOMAIN_OPERAND;
     1063    10803
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:141  
     1064    10804        %BOX (TITLE=SELECT_CLAUSE, PAGE=YES);
             10812    2
             10816    2   /***************************************************************************
             10818    2    *                                                                         *
             10822    2            *                               SELECT_CLAUSE                            *
             10824    2            *                                                                        *
             10826    2          ***************************************************************************/

     1065    10830
     1066    10831        /*I* NAME: SELECT_CLAUSE
     1067    10832            PARAMETERS:
     1068    10833                None.
     1069    10834            INPUT:
     1070    10835                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1071    10836                    process.
     1072    10837                IT$BLOCK_EXPR must exist.
     1073    10838                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1074    10839                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1075    10840                    levels of the InTree.  Each should be NIL if there are no
     1076    10841                    nodes at that level.
     1077    10842            OUTPUT:
     1078    10843                If the CHILD_INDEX child is a T_SELECT_CLAUSE node:
     1079    10844                    A new IT_SELECT node will be allocated an attached to
     1080    10845                        the InTree.
     1081    10846                    LAST_SELECT$ will be updated to point to the new node.
     1082    10847                    LAST_ADJUST$ and LAST_MOVEMENT$ will be NIL'd.
     1083    10848                    CHILD_INDEX will be incremented beyond the processed nodes.
     1084    10849            SCRATCH:
     1085    10850                CHILD$, CHILD.
     1086    10851            DESCRIPTION:
     1087    10852                If the CHILD_INDEX node is a T_SELECT_CLAUSE node,
     1088    10853                allocate a new IT_SELECT node and link it into the InTree.
     1089    10854                If the T_SELECT_CLAUSE node has a T_REPEAT node as a child,
     1090    10855                set the appropriate flag in the new IT_SELECT node.
     1091    10856        */
     1092    10857
     1093    10858    1   SELECT_CLAUSE: PROC ALTRET;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:142  

  10858  1 002005   200020 741300       SELECT_CLAU* STX1  ! T$+2,,AUTO

     1094    10859
     1095    10860
     1096    10861    2   DCL RPT_COUNT SBIN;
     1097    10862
     1098    10863
     1099    10864
     1100    10865    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN

  10865  1 002006   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002007   000001 236100                    LDQ     1,,PR0
         1 002010   000022 772000                    QRL     18
         1 002011   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 002012   002014 605400 1                  TPNZ    s:10867

     1101    10866    2              RETURN;

  10866  1 002013   000001 702211                    TSX2  ! 1,X1

     1102    10867    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

  10867  1 002014   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 002015   000003 236110                    LDQ     3,X0,PR0
         1 002016   200014 756100                    STQ     CHILD$,,AUTO

     1103    10868    2           IF CHILD.CODE ~= %T_SELECT_CLAUSE THEN

  10868  1 002017   200014 471500                    LDP1    CHILD$,,AUTO
         1 002020   100000 722100                    LXL2    0,,PR1
         1 002021   002020 102003                    CMPX2   1040,DU
         1 002022   002024 600000 1                  TZE     s:10871

     1104    10869    2              RETURN;

  10869  1 002023   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:143  

     1105    10870
     1106    10871    2           CALL ALLOC_IT_SELECT

  10871  1 002024   003721 701000 1                  TSX1    ALLOC_IT_SELECT
         1 002025   002076 702000 1                  TSX2    ALLOC_IT_SELECT_FAILED

     1107    10872    2             ALTRET (ALLOC_IT_SELECT_FAILED);
     1108    10873
     1109    10874    2           IF CHILD.NSUBLKS = 0 THEN

  10874  1 002026   200014 470500                    LDP0    CHILD$,,AUTO
         1 002027   000001 220100                    LDX0    1,,PR0
         1 002030   002035 601000 1                  TNZ     s:10878

     1110    10875    2              LAST$SELECT.RPT_COUNT# = 1;

  10875  1 002031   000001 221003                    LDX1    1,DU
         1 002032   200007 471500                    LDP1    LAST_SELECT$,,AUTO
         1 002033   100003 441100                    SXL1    3,,PR1
         1 002034   002063 710000 1                  TRA     s:10897

     1111    10876    3           ELSE DO;

     1112    10877                   /* Got some sort of repetition */
     1113    10878    3              IF CHILD.SUBLK$ (0) -> CHILD.NSUBLKS = 0 THEN

  10878  1 002035   000003 471500                    LDP1    3,,PR0
         1 002036   100001 221100                    LDX1    1,,PR1
         1 002037   002044 601000 1                  TNZ     s:10881

     1114    10879    3                 LAST$SELECT.RPT_ALL = %TRUE;

  10879  1 002040   200007 473500                    LDP3    LAST_SELECT$,,AUTO
         1 002041   400000 236003                    LDQ     -131072,DU
         1 002042   300003 256100                    ORSQ    3,,PR3
         1 002043   002063 710000 1                  TRA     s:10897
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:144  

     1115    10880    4              ELSE DO;

     1116    10881    4                 CALL VDE$PNUMBER (CHILD.SUBLK$ (0) ->

  10881  1 002044   100003 473500                    LDP3    3,,PR1
         1 002045   200021 634500                    EPPR4   RPT_COUNT,,AUTO
         1 002046   200061 454500                    STP4    NEW_SELECT$+2,,AUTO
         1 002047   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 002050   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002051   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002052   000000 701000 xent               TSX1    VDE$PNUMBER
         1 002053   002076 702000 1                  TSX2    ALLOC_IT_SELECT_FAILED

     1117    10882    4                   CHILD.SUBLK$ (0) -> CHILD, RPT_COUNT)
     1118    10883    4                   ALTRET (PNUMBER_FAILED);
     1119    10884    4                 IF RPT_COUNT < %MN_REPEAT_COUNT

  10884  1 002054   200021 235100                    LDA     RPT_COUNT,,AUTO
         1 002055   002066 604000 1                  TMI     RPT_COUNT_NOT_IN_RANGE_FAILURE
         1 002056   377777 115007                    CMPA    131071,DL
         1 002057   002066 605400 1                  TPNZ    RPT_COUNT_NOT_IN_RANGE_FAILURE

     1120    10885    4                   OR RPT_COUNT > %MX_REPEAT_COUNT THEN
     1121    10886    4                    GOTO RPT_COUNT_NOT_IN_RANGE_FAILURE;
     1122    10887    4                 LAST$SELECT.RPT_COUNT# = RPT_COUNT;

  10887  1 002060   000000 620005                    EAX0    0,AL
         1 002061   200007 470500                    LDP0    LAST_SELECT$,,AUTO
         1 002062   000003 440100                    SXL0    3,,PR0

     1123    10888    4                 END;

     1124    10889    3              END;

     1125    10890
     1126    10891        /*??*    IF NOT LAST$SELECT.RPT_ALL#                                 */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:145  
     1127    10892        /*??*      AND IT$BLOCK_EXPR.SELECT$ = LAST_SELECT$ THEN DO;         */
     1128    10893        /*??*       CALL ATTACH_HERE_TO_SELECT (LAST$SELECT)                 */
     1129    10894        /*??*         ALTRET (ATTACH_HERE_TO_SELECT_FAILED);                 */
     1130    10895        /*??*       END;                                                     */
     1131    10896
     1132    10897    2           CHILD_INDEX = CHILD_INDEX + 1;

  10897  1 002063   200013 054100                    AOS     CHILD_INDEX,,AUTO

     1133    10898
     1134    10899    2           RETURN;

  10899  1 002064   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002065   000001 702211                    TSX2  ! 1,X1

     1135    10900
     1136    10901
     1137    10902    2   RPT_COUNT_NOT_IN_RANGE_FAILURE:
     1138    10903    3           CALL VDG$ERRMSG (%E$REPEAT_COUNT_NOT_IN_RANGE) WHENRETURN DO;

  10903  1 002066   000035 630400 2     RPT_COUNT_N* EPPR0   29
         1 002067   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002070   000000 701000 xent               TSX1    VDG$ERRMSG
         1 002071   002076 702000 1                  TSX2    ALLOC_IT_SELECT_FAILED

     1139    10904    3              LAST$ERR.CMDLINE_INDEX# = CHILD.CPOS;

  10904  1 002072   200014 470500                    LDP0    CHILD$,,AUTO
         1 002073   000002 720100                    LXL0    2,,PR0
         1 002074   000032 471400 xsym               LDP1    VD_6E+26
         1 002075   100003 440100                    SXL0    3,,PR1

     1140    10905    3              END;

  10897  1 002076                       ALLOC_IT_SE* null
  10897  1 002076                       PNUMBER_FAI* null
  10897  1 002076                       OALLOC_FAIL* null
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:146  
     1141    10906
     1142    10907
     1143    10908    2   ALLOC_IT_SELECT_FAILED: ;
     1144    10909    2   PNUMBER_FAILED: ;
     1145    10910    2   OALLOC_FAILED: ;
     1146    10911    2           ALTRETURN;

  10911  1 002076   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002077   000000 702211                    TSX2  ! 0,X1

     1147    10912
     1148    10913    2   END SELECT_CLAUSE;
     1149    10914
     1150    10915        %BOX (TITLE=ADJUST_LIST, PAGE=YES);
             10923    2
             10927    2   /***************************************************************************
             10929    2    *                                                                         *
             10933    2            *                                ADJUST_LIST                             *
             10935    2            *                                                                        *
             10937    2          ***************************************************************************/

     1151    10941
     1152    10942        /*I* NAME: ADJUST_LIST
     1153    10943            PARAMETERS:
     1154    10944                None.
     1155    10945            INPUT:
     1156    10946                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1157    10947                    process.
     1158    10948                IT$BLOCK_EXPR must exist.
     1159    10949                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1160    10950                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1161    10951                    levels of the InTree.  Each should be NIL if there are no
     1162    10952                    nodes at that level.
     1163    10953            OUTPUT:
     1164    10954                If the CHILD_INDEX child is a T_THRU or T_ADJUST node:
     1165    10955                    A new IT_ADJUST node will be allocated an attached to
     1166    10956                        the InTree.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:147  
     1167    10957                    LAST_ADJUST$ will be updated to point to the new node.
     1168    10958                    IT_OPERAND, IT_OPERATOR, and IT_COMMAND nodes may also
     1169    10959                        be attached to the InTree.
     1170    10960                    LAST_MOVEMENT$ will be NIL'd.
     1171    10961                    CHILD_INDEX will be incremented beyond the processed nodes.
     1172    10962            SCRATCH:
     1173    10963                CHILD$, CHILD.
     1174    10964            DESCRIPTION:
     1175    10965                If the CHILD_INDEX node is a T_THRU or T_ADJUST node,
     1176    10966                allocate a new IT_ADJUST node and link it into the InTree.
     1177    10967                For T_THRU, set VD$IT_ADJUST.NEW_STATE# to %EVST_END.
     1178    10968                For T_ADJUST, set VD$IT_ADJUST.NEW_STATE# to %EVST_TOGGLE.
     1179    10969                Process all T_MOVEMENT nodes following the THRU/ADJUST node.
     1180    10970        */
     1181    10971
     1182    10972    1   ADJUST_LIST: PROC ALTRET;

  10972  1 002100   200020 741300       ADJUST_LIST  STX1  ! T$+2,,AUTO

     1183    10973
     1184    10974
     1185    10975    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN

  10975  1 002101   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002102   000001 236100                    LDQ     1,,PR0
         1 002103   000022 772000                    QRL     18
         1 002104   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 002105   002107 605400 1                  TPNZ    s:10977

     1186    10976    2              RETURN;

  10976  1 002106   000001 702211                    TSX2  ! 1,X1

     1187    10977    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

  10977  1 002107   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 002110   000003 236110                    LDQ     3,X0,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:148  
         1 002111   200014 756100                    STQ     CHILD$,,AUTO

     1188    10978    2           IF CHILD.CODE ~= %T_THRU AND CHILD.CODE ~= %T_ADJUST THEN

  10978  1 002112   200014 471500                    LDP1    CHILD$,,AUTO
         1 002113   100000 722100                    LXL2    0,,PR1
         1 002114   002022 102003                    CMPX2   1042,DU
         1 002115   002121 600000 1                  TZE     s:10981
         1 002116   002023 102003                    CMPX2   1043,DU
         1 002117   002121 600000 1                  TZE     s:10981

     1189    10979    2              RETURN;

  10979  1 002120   000001 702211                    TSX2  ! 1,X1

     1190    10980
     1191    10981    2           CALL GUAR_LAST_SELECT

  10981  1 002121   003643 701000 1                  TSX1    GUAR_LAST_SELECT
         1 002122   002145 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

     1192    10982    2             ALTRET (GUAR_LAST_SELECT_FAILED);
     1193    10983    2           CALL ALLOC_IT_ADJUST

  10983  1 002123   003660 701000 1                  TSX1    ALLOC_IT_ADJUST
         1 002124   002145 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

     1194    10984    2             ALTRET (ALLOC_IT_ADJUST_FAILED);
     1195    10985    2           IF CHILD.CODE = %T_THRU THEN

  10985  1 002125   200014 470500                    LDP0    CHILD$,,AUTO
         1 002126   000000 720100                    LXL0    0,,PR0
         1 002127   002022 100003                    CMPX0   1042,DU
         1 002130   002135 601000 1                  TNZ     s:10988

     1196    10986    2              LAST$ADJUST.NEW_STATE# = %EVST_END;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:149  
  10986  1 002131   000003 221003                    LDX1    3,DU
         1 002132   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 002133   100003 741100                    STX1    3,,PR1
         1 002134   002140 710000 1                  TRA     s:10990

     1197    10987    2           ELSE
     1198    10988    2              LAST$ADJUST.NEW_STATE# = %EVST_TOGGLE;

  10988  1 002135   000004 221003                    LDX1    4,DU
         1 002136   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 002137   100003 741100                    STX1    3,,PR1

     1199    10989
     1200    10990    2           CHILD_INDEX = CHILD_INDEX + 1;

  10990  1 002140   200013 054100                    AOS     CHILD_INDEX,,AUTO

     1201    10991
     1202    10992    2           CALL MOVEMENTS

  10992  1 002141   002147 701000 1                  TSX1    MOVEMENTS
         1 002142   002145 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

     1203    10993    2             ALTRET (MOVEMENTS_FAILED);
     1204    10994
     1205    10995    2           RETURN;

  10995  1 002143   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002144   000001 702211                    TSX2  ! 1,X1

  10990  1 002145                       GUAR_LAST_S* null
  10990  1 002145                       ALLOC_IT_AD* null
  10990  1 002145                       MOVEMENTS_F* null
     1206    10996
     1207    10997
     1208    10998
     1209    10999    2   GUAR_LAST_SELECT_FAILED: ;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:150  
     1210    11000    2   ALLOC_IT_ADJUST_FAILED: ;
     1211    11001    2   MOVEMENTS_FAILED: ;
     1212    11002    2           ALTRETURN;

  11002  1 002145   200020 221300                    LDX1  ! T$+2,,AUTO
         1 002146   000000 702211                    TSX2  ! 0,X1

     1213    11003
     1214    11004    2   END ADJUST_LIST;
     1215    11005
     1216    11006        %BOX (TITLE=MOVEMENTS, PAGE=YES);
             11014    2
             11018    2   /***************************************************************************
             11020    2    *                                                                         *
             11024    2            *                                 MOVEMENTS                              *
             11026    2            *                                                                        *
             11028    2          ***************************************************************************/

     1217    11032
     1218    11033        /*I* NAME: MOVEMENTS
     1219    11034            PARAMETERS:
     1220    11035                None.
     1221    11036            INPUT:
     1222    11037                CHILD_INDEX refers to the next child of PT_BLOCK_EXPR to
     1223    11038                    process.
     1224    11039                CURR$WINDOW must be the current editing VD$WINDOW_SPEC.
     1225    11040                EDIT$BLOCK must be the VD$BLOCK_DESC for the current
     1226    11041                    EditBlock.  If none, CURR$WINDOW.OPERAND.EDIT_BLOCK$ must
     1227    11042                    be NIL.
     1228    11043                IT$BLOCK_EXPR must exist.
     1229    11044                LAST_SELECT$, LAST_ADJUST$, and LAST_MOVEMENT$ must point
     1230    11045                    to the last nodes at the SELECT, ADJUST, and movement_expr
     1231    11046                    levels of the InTree.  Each should be NIL if there are no
     1232    11047                    nodes at that level.
     1233    11048            OUTPUT:
     1234    11049                If the CHILD_INDEX node is a T_MOVEMENT or T_LO_NAME node:
     1235    11050                    One or more IT_OPERAND, IT_OPERATOR, and/or IT_COMMAND
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:151  
     1236    11051                        nodes will be attached to IT$BLOCK_EXPR.  If none
     1237    11052                        yet, an IT_SELECT node and an IT_ADJUST node
     1238    11053                        will be attached also.
     1239    11054                    LAST_MOVEMENT$ will be updated to point to the last of
     1240    11055                        the added nodes.
     1241    11056                CHILD_INDEX will be incremented beyond the processed nodes.
     1242    11057            SCRATCH:
     1243    11058                CHILD$, CHILD.
     1244    11059            DESCRIPTION:
     1245    11060                At entry, the CHILD_INDEX child may be either a T_MOVEMENT
     1246    11061                    node or a PLO_NAME node; it'll be PLO_NAME if a
     1247    11062                    Location-name was given as the first item in a block
     1248    11063                    expression (and so looked like a domain operand) but
     1249    11064                    the value of the name didn't specify a new domain.
     1250    11065                    Processing of such a Location-name would be deferred
     1251    11066                    for handling by this routine since it really is just
     1252    11067                    an absolute movement operand, not a domain operand.
     1253    11068                Loop while the CHILD_INDEX child is a T_MOVEMENT node:
     1254    11069                The T_MOVEMENT node must have from one to four children:
     1255    11070
     1256    11071                                    MOVEMENT
     1257    11072                                       |
     1258    11073                 --------------------------------------------
     1259    11074                 |            |      |                      |
     1260    11075                SKIP       FORWARD   AO        NUMERIC_KEY <INTEGER,FRACT>
     1261    11076                 |           or      or                     or
     1262    11077            STRING_EXPR   BACKWARD   BO   STRING_KEY <STRING_EXPR <XUE_EXP#> >
     1263    11078                 |                   or                     or
     1264    11079              XUE_EXP#               EO                LEVEL_NAME
     1265    11080                                                            or
     1266    11081                                                        POSITIONS
     1267    11082                                                            or
     1268    11083                                                   POSITIONS <.Decimal>
     1269    11084                                                            or
     1270    11085                                           POSITIONS <STRING_EXPR <XUE_EXP#> >
     1271    11086                                                            or
     1272    11087                                                     PATTERN <.Dstring>
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:152  
     1273    11088                                                            or
     1274    11089                                             PATTERN <STRING_EXPR <XUE_EXP#> >
     1275    11090                                                            or
     1276    11091                                                    LO_NAME <.symbol>
     1277    11092
     1278    11093                The first three children may appear in any order, and each
     1279    11094                    is optional.  The last child must appear and must be the
     1280    11095                    last child of the T_MOVEMENT node.
     1281    11096                For NUMERIC_KEY, either one or both children may be present.
     1282    11097                For the remainder, all children shown are mandatory.
     1283    11098
     1284    11099                This routine processes any number of successive T_MOVEMENT nodes.
     1285    11100        */
     1286    11101
     1287    11102    1   MOVEMENTS: PROC ALTRET;

  11102  1 002147   200022 741300       MOVEMENTS    STX1  ! NAME_FILE_KEY$,,AUTO

     1288    11103
     1289    11104
     1290    11105    2   DCL IT_OPERAND$ PTR;
     1291    11106        %VD$EVAL_OPTIONS (NAME=EVAL_OPTIONS, STCLASS=AUTO);
     1292    11121    2   DCL SRCH_SEEN BIT(1) ALIGNED;
     1293    11122    2   DCL SKIP_SEEN BIT(1) ALIGNED;
     1294    11123
     1295    11124
     1296    11125        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_OPERAND$)");
     1297    11191        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
     1298    11236        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
     1299    11274
     1300    11275
     1301    11276
     1302    11277    2           IF CHILD_INDEX >= PT_BLOCK_EXPR.NSUBLKS THEN

  11277  1 002150   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002151   000001 236100                    LDQ     1,,PR0
         1 002152   000022 772000                    QRL     18
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:153  
         1 002153   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 002154   002156 605400 1                  TPNZ    s:11280

     1303    11278    2              RETURN;

  11278  1 002155   000001 702211                    TSX2  ! 1,X1

     1304    11279
     1305    11280    2           CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

  11280  1 002156   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 002157   000003 236110                    LDQ     3,X0,PR0
         1 002160   200014 756100                    STQ     CHILD$,,AUTO

     1306    11281    3           IF CHILD.CODE = %T_LO_NAME THEN DO;

  11281  1 002161   200014 471500                    LDP1    CHILD$,,AUTO
         1 002162   100000 722100                    LXL2    0,,PR1
         1 002163   002047 102003                    CMPX2   1063,DU
         1 002164   002177 601000 1                  TNZ     EACH_MOVEMENT

     1307    11282    3              EVAL_OPTIONS = %CLEAR;

  11282  1 002165   000000 235003                    LDA     0,DU
         1 002166   000000 236003                    LDQ     0,DU
         1 002167   200024 757100                    STAQ    EVAL_OPTIONS,,AUTO

     1308    11283    3              SRCH_SEEN = %FALSE;

  11283  1 002170   200026 450100                    STZ     SRCH_SEEN,,AUTO

     1309    11284    3              SKIP_SEEN = %FALSE;

  11284  1 002171   200027 450100                    STZ     SKIP_SEEN,,AUTO

     1310    11285    3              CALL MOVEMENT_OPERAND (CHILD)

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:154  
  11285  1 002172   200014 236100                    LDQ     CHILD$,,AUTO
         1 002173   200031 756100                    STQ     STRING_LOC+1,,AUTO
         1 002174   002423 701000 1                  TSX1    MOVEMENT_OPERAND
         1 002175   002243 702000 1                  TSX2    MOVEMENT_OPTIONS_FAILED

     1311    11286    3                ALTRET (MOVEMENT_OPERAND_FAILED);
     1312    11287    3              CHILD_INDEX = CHILD_INDEX + 1;

  11287  1 002176   200013 054100                    AOS     CHILD_INDEX,,AUTO

     1313    11288    3              END;

     1314    11289
     1315    11290    2   EACH_MOVEMENT:
     1316    11291    3           DO WHILE CHILD_INDEX < PT_BLOCK_EXPR.NSUBLKS;

  11291  1 002177   200003 470500       EACH_MOVEME* LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002200   000001 236100                    LDQ     1,,PR0
         1 002201   000022 772000                    QRL     18
         1 002202   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 002203   002241 604400 1                  TMOZ    s:11305

     1317    11292    3              CHILD$ = PT_BLOCK_EXPR.SUBLK$ (CHILD_INDEX);

  11292  1 002204   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002205   200013 720100                    LXL0    CHILD_INDEX,,AUTO
         1 002206   000003 236110                    LDQ     3,X0,PR0
         1 002207   200014 756100                    STQ     CHILD$,,AUTO

     1318    11293    3              IF CHILD.CODE ~= %T_MOVEMENT THEN

  11293  1 002210   200014 471500                    LDP1    CHILD$,,AUTO
         1 002211   100000 721100                    LXL1    0,,PR1
         1 002212   002030 101003                    CMPX1   1048,DU
         1 002213   002241 601000 1                  TNZ     s:11305

     1319    11294    3                 EXIT EACH_MOVEMENT;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:155  
     1320    11295    3              EVAL_OPTIONS = %CLEAR;

  11295  1 002214   000000 235003                    LDA     0,DU
         1 002215   000000 236003                    LDQ     0,DU
         1 002216   200024 757100                    STAQ    EVAL_OPTIONS,,AUTO

     1321    11296    3              SRCH_SEEN = %FALSE;

  11296  1 002217   200026 450100                    STZ     SRCH_SEEN,,AUTO

     1322    11297    3              SKIP_SEEN = %FALSE;

  11297  1 002220   200027 450100                    STZ     SKIP_SEEN,,AUTO

     1323    11298    3              CALL MOVEMENT_OPTIONS (CHILD)

  11298  1 002221   200014 236100                    LDQ     CHILD$,,AUTO
         1 002222   200031 756100                    STQ     STRING_LOC+1,,AUTO
         1 002223   002245 701000 1                  TSX1    MOVEMENT_OPTIONS
         1 002224   002243 702000 1                  TSX2    MOVEMENT_OPTIONS_FAILED

     1324    11299    3                ALTRET (MOVEMENT_OPTIONS_FAILED);
     1325    11300    3              CALL MOVEMENT_OPERAND (CHILD.SUBLK$ (CHILD.NSUBLKS-1) -> OUT$BLK)

  11300  1 002225   200014 470500                    LDP0    CHILD$,,AUTO
         1 002226   000001 220100                    LDX0    1,,PR0
         1 002227   000002 471510                    LDP1    2,X0,PR0
         1 002230   200031 451500                    STP1    STRING_LOC+1,,AUTO
         1 002231   002423 701000 1                  TSX1    MOVEMENT_OPERAND
         1 002232   002243 702000 1                  TSX2    MOVEMENT_OPTIONS_FAILED

     1326    11301    3                ALTRET (MOVEMENT_OPERAND_FAILED);
     1327    11302    3              CHILD_INDEX = CHILD_INDEX + 1;

  11302  1 002233   200013 054100                    AOS     CHILD_INDEX,,AUTO

     1328    11303    3              END EACH_MOVEMENT;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:156  

  11303  1 002234   200003 470500                    LDP0    @PT_BLOCK_EXPR,,AUTO
         1 002235   000001 236100                    LDQ     1,,PR0
         1 002236   000022 772000                    QRL     18
         1 002237   200013 116100                    CMPQ    CHILD_INDEX,,AUTO
         1 002240   002204 605400 1                  TPNZ    s:11292

     1329    11304
     1330    11305    2           RETURN;

  11305  1 002241   200022 221300                    LDX1  ! NAME_FILE_KEY$,,AUTO
         1 002242   000001 702211                    TSX2  ! 1,X1

  11300  1 002243                       MOVEMENT_OP* null
  11300  1 002243                       MOVEMENT_OP* null
     1331    11306
     1332    11307
     1333    11308
     1334    11309    2   MOVEMENT_OPTIONS_FAILED: ;
     1335    11310    2   MOVEMENT_OPERAND_FAILED: ;
     1336    11311    2           ALTRETURN;

  11311  1 002243   200022 221300                    LDX1  ! NAME_FILE_KEY$,,AUTO
         1 002244   000000 702211                    TSX2  ! 0,X1

     1337    11312
     1338    11313                %BOX (TITLE=MOVEMENT_OPTIONS);

             11325    2   /***************************************************************************
             11327    2    *                                                                         *
             11331    2            *                              MOVEMENT_OPTIONS                          *
             11333    2            *                                                                        *
             11335    2          ***************************************************************************/

     1339    11339
     1340    11340        /*I** NAME: MOVEMENT_OPTIONS
     1341    11341            PARAMETERS:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:157  
     1342    11342                PT_MOVEMENT - PARSE$OUT block whose code is %T_MOVEMENT.
     1343    11343            INPUT:
     1344    11344                Same as for MOVEMENTS.
     1345    11345                EVAL_OPTIONS, SRCH_SEEN, and SKIP_SEEN should be %CLEAR at entry.
     1346    11346            OUTPUT:
     1347    11347                Same as for MOVEMENTS.  All children of PT_MOVEMENT will
     1348    11348                    be processed except the last one.
     1349    11349                EVAL_OPTIONS, SRCH_SEEN, and SKIP_SEEN will be set based on
     1350    11350                    the options processed.
     1351    11351            DESCRIPTION:
     1352    11352                Same as for MOVEMENTS.
     1353    11353        */
     1354    11354
     1355    11355    2   MOVEMENT_OPTIONS: PROC (PT_MOVEMENT) ALTRET;

  11355  1 002245   200030 741300       MOVEMENT_OP* STX1  ! STRING_LOC,,AUTO

     1356    11356
     1357    11357        %PARSE$OUT (NAME=PT_MOVEMENT, STCLASS=PARAM);
     1358    11402
     1359    11403
     1360    11404    3   DCL MOVE_CHILD_INDEX SBIN;
     1361    11405    3   DCL MOVE_CHILD$ PTR;
     1362    11406    3   DCL NUMBER SBIN;
     1363    11407    3   DCL ERR_CODE SBIN;
     1364    11408
     1365    11409
     1366    11410        %PARSE$OUT (NAME=MOVE$CHILD, STCLASS="BASED(MOVE_CHILD$)");
     1367    11455
     1368    11456
     1369    11457
     1370    11458    3   EACH_MOVE_CHILD_EXCEPT_LAST:
     1371    11459    4           DO MOVE_CHILD_INDEX = 0 TO (PT_MOVEMENT.NSUBLKS - 2);

  11459  1 002246   200032 450100       EACH_MOVE_C* STZ     MOVE_CHILD_INDEX,,AUTO
         1 002247   002363 710000 1                  TRA     s:11512+1

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:158  
     1372    11460    4              MOVE_CHILD$ = PT_MOVEMENT.SUBLK$ (MOVE_CHILD_INDEX);

  11460  1 002250   200031 470500                    LDP0    @PT_MOVEMENT,,AUTO
         1 002251   200032 720100                    LXL0    MOVE_CHILD_INDEX,,AUTO
         1 002252   000003 236110                    LDQ     3,X0,PR0
         1 002253   200033 756100                    STQ     MOVE_CHILD$,,AUTO

     1373    11461                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="MOVE$CHILD.CODE - %VD_BASE#");

  11462  1 002254   200033 471500                    LDP1    MOVE_CHILD$,,AUTO
         1 002255   100000 721100                    LXL1    0,,PR1
         1 002256   776375 054011 xsym               AOS     VD_6E-771,X1

     1374    11464
     1375    11465    5              DO CASE (MOVE$CHILD.CODE);

  11465  1 002257   100000 236100                    LDQ     0,,PR1
         1 002260   777777 376007                    ANQ     -1,DL
         1 002261   002033 136007                    SBLQ    1051,DL
         1 002262   000006 116007                    CMPQ    6,DL
         1 002263   002265 602006 1                  TNC     s:11465+6,QL
         1 002264   002353 710000 1                  TRA     s:11508
         1 002265   002273 710000 1                  TRA     s:11468
         1 002266   002322 710000 1                  TRA     s:11483
         1 002267   002327 710000 1                  TRA     s:11488
         1 002270   002341 710000 1                  TRA     s:11498
         1 002271   002334 710000 1                  TRA     s:11493
         1 002272   002346 710000 1                  TRA     s:11503

     1376    11466
     1377    11467    5               CASE (%T_SKIP);

     1378    11468    5                 IF SKIP_SEEN THEN

  11468  1 002273   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002274   002373 604000 1                  TMI     TOO_MANY_SKIPS_FAILURE

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:159  
     1379    11469    5                    GOTO TOO_MANY_SKIPS_FAILURE;
     1380    11470    5                 SKIP_SEEN = %TRUE;

  11470  1 002275   400000 236003                    LDQ     -131072,DU
         1 002276   200027 756100                    STQ     SKIP_SEEN,,AUTO

     1381    11471    5                 IF MOVE$CHILD.SUBLK$(0)->OUT$BLK.CODE =

  11471  1 002277   100003 473500                    LDP3    3,,PR1
         1 002300   300000 721100                    LXL1    0,,PR3
         1 002301   002056 101003                    CMPX1   1070,DU
         1 002302   002362 601000 1                  TNZ     s:11512

     1382    11472    6                   %T_STRING_EXPR THEN DO;

     1383    11473    6                    CALL VDE$PNUMBER (MOVE$CHILD.SUBLK$(0)->

  11473  1 002303   300003 474500                    LDP4    3,,PR3
         1 002304   200034 635500                    EPPR5   NUMBER,,AUTO
         1 002305   200061 455500                    STP5    NEW_SELECT$+2,,AUTO
         1 002306   200060 454500                    STP4    NEW_SELECT$+1,,AUTO
         1 002307   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002310   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002311   000000 701000 xent               TSX1    VDE$PNUMBER
         1 002312   002421 702000 1                  TSX2    PNUMBER_FAILED

     1384    11474    6                      OUT$BLK.SUBLK$(0)->OUT$BLK, NUMBER)
     1385    11475    6                      ALTRET (PNUMBER_FAILED);
     1386    11476    6                    IF NUMBER < %MN_SKIP_COUNT

  11476  1 002313   200034 235100                    LDA     NUMBER,,AUTO
         1 002314   002376 604000 1                  TMI     SKIP_NOT_IN_RANGE_FAILURE
         1 002315   377777 115007                    CMPA    131071,DL
         1 002316   002376 605400 1                  TPNZ    SKIP_NOT_IN_RANGE_FAILURE

     1387    11477    6                      OR NUMBER > %MX_SKIP_COUNT THEN
     1388    11478    6                       GOTO SKIP_NOT_IN_RANGE_FAILURE;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:160  
     1389    11479    6                    EVAL_OPTIONS.SKIP# = NUMBER;

  11479  1 002317   000000 620005                    EAX0    0,AL
         1 002320   200024 440100                    SXL0    EVAL_OPTIONS,,AUTO

     1390    11480    6                    END;

  11480  1 002321   002362 710000 1                  TRA     s:11512

     1391    11481
     1392    11482    5               CASE (%T_FORWARD);

     1393    11483    5                 IF EVAL_OPTIONS.DIRECTION# ~= 0 THEN

  11483  1 002322   200025 721100                    LXL1    FILE_KEY$,,AUTO
         1 002323   002401 601000 1                  TNZ     TOO_MANY_DIRECTIONS_FAILURE

     1394    11484    5                    GOTO TOO_MANY_DIRECTIONS_FAILURE;
     1395    11485    5                 EVAL_OPTIONS.DIRECTION# = %DIR_FORWARD;

  11485  1 002324   000001 222003                    LDX2    1,DU
         1 002325   200025 442100                    SXL2    FILE_KEY$,,AUTO
         1 002326   002362 710000 1                  TRA     s:11512

     1396    11486
     1397    11487    5               CASE (%T_BACKWARD);

     1398    11488    5                 IF EVAL_OPTIONS.DIRECTION# ~= 0 THEN

  11488  1 002327   200025 721100                    LXL1    FILE_KEY$,,AUTO
         1 002330   002401 601000 1                  TNZ     TOO_MANY_DIRECTIONS_FAILURE

     1399    11489    5                    GOTO TOO_MANY_DIRECTIONS_FAILURE;
     1400    11490    5                 EVAL_OPTIONS.DIRECTION# = %DIR_BACKWARD;

  11490  1 002331   000002 222003                    LDX2    2,DU
         1 002332   200025 442100                    SXL2    FILE_KEY$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:161  
         1 002333   002362 710000 1                  TRA     s:11512

     1401    11491
     1402    11492    5               CASE (%T_AO);

     1403    11493    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN

  11493  1 002334   200025 221100                    LDX1    FILE_KEY$,,AUTO
         1 002335   002404 601000 1                  TNZ     TOO_MANY_POINTS_FAILURE

     1404    11494    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1405    11495    5                 EVAL_OPTIONS.POINT# = %PNT_AO;

  11495  1 002336   000001 222003                    LDX2    1,DU
         1 002337   200025 742100                    STX2    FILE_KEY$,,AUTO
         1 002340   002362 710000 1                  TRA     s:11512

     1406    11496
     1407    11497    5               CASE (%T_BO);

     1408    11498    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN

  11498  1 002341   200025 221100                    LDX1    FILE_KEY$,,AUTO
         1 002342   002404 601000 1                  TNZ     TOO_MANY_POINTS_FAILURE

     1409    11499    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1410    11500    5                 EVAL_OPTIONS.POINT# = %PNT_BO;

  11500  1 002343   000002 222003                    LDX2    2,DU
         1 002344   200025 742100                    STX2    FILE_KEY$,,AUTO
         1 002345   002362 710000 1                  TRA     s:11512

     1411    11501
     1412    11502    5               CASE (%T_EO);

     1413    11503    5                 IF EVAL_OPTIONS.POINT# ~= 0 THEN

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:162  
  11503  1 002346   200025 221100                    LDX1    FILE_KEY$,,AUTO
         1 002347   002404 601000 1                  TNZ     TOO_MANY_POINTS_FAILURE

     1414    11504    5                    GOTO TOO_MANY_POINTS_FAILURE;
     1415    11505    5                 EVAL_OPTIONS.POINT# = %PNT_EO;

  11505  1 002350   000003 222003                    LDX2    3,DU
         1 002351   200025 742100                    STX2    FILE_KEY$,,AUTO
         1 002352   002362 710000 1                  TRA     s:11512

     1416    11506
     1417    11507    5               CASE (ELSE);

     1418    11508    5                 CALL VDG$ESCREECH (MOVE$CHILD.CODE);

  11508  1 002353   200033 236100                    LDQ     MOVE_CHILD$,,AUTO
         1 002354   400000 036007                    ADLQ    -131072,DL
         1 002355   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002356   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002357   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002360   000000 701000 xent               TSX1    VDG$ESCREECH
         1 002361   000000 011000                    NOP     0

     1419    11509
     1420    11510    5               END;

     1421    11511
     1422    11512    4              END EACH_MOVE_CHILD_EXCEPT_LAST;

  11512  1 002362   200032 054100                    AOS     MOVE_CHILD_INDEX,,AUTO
         1 002363   200031 470500                    LDP0    @PT_MOVEMENT,,AUTO
         1 002364   000001 236100                    LDQ     1,,PR0
         1 002365   000022 772000                    QRL     18
         1 002366   000002 136007                    SBLQ    2,DL
         1 002367   200032 116100                    CMPQ    MOVE_CHILD_INDEX,,AUTO
         1 002370   002250 605000 1                  TPL     s:11460

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:163  
     1423    11513
     1424    11514    3           RETURN;

  11514  1 002371   200030 221300                    LDX1  ! STRING_LOC,,AUTO
         1 002372   000001 702211                    TSX2  ! 1,X1

     1425    11515
     1426    11516
     1427    11517                %BOX (TITLE="Error Handlers");

             11529    3   /***************************************************************************
             11531    3    *                                                                         *
             11535    3            *                               Error Handlers                           *
             11537    3            *                                                                        *
             11539    3          ***************************************************************************/

     1428    11543
     1429    11544    3   TOO_MANY_SKIPS_FAILURE:
     1430    11545    3           ERR_CODE = %E$TOO_MANY_SKIPS;

  11545  1 002373   000121 235007       TOO_MANY_SK* LDA     81,DL
         1 002374   200035 755100                    STA     ERR_CODE,,AUTO

     1431    11546    3           GOTO SERIOUS_USER_ERROR;

  11546  1 002375   002407 710000 1                  TRA     SERIOUS_USER_ERROR

     1432    11547
     1433    11548    3   SKIP_NOT_IN_RANGE_FAILURE:
     1434    11549    3           ERR_CODE = %E$SKIP_COUNT_NOT_IN_RANGE;

  11549  1 002376   000122 236007       SKIP_NOT_IN* LDQ     82,DL
         1 002377   200035 756100                    STQ     ERR_CODE,,AUTO

     1435    11550    3           GOTO SERIOUS_USER_ERROR;

  11550  1 002400   002407 710000 1                  TRA     SERIOUS_USER_ERROR
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:164  

     1436    11551
     1437    11552    3   TOO_MANY_DIRECTIONS_FAILURE:
     1438    11553    3           ERR_CODE = %E$TOO_MANY_DIRECTIONS;

  11553  1 002401   000124 235007       TOO_MANY_DI* LDA     84,DL
         1 002402   200035 755100                    STA     ERR_CODE,,AUTO

     1439    11554    3           GOTO SERIOUS_USER_ERROR;

  11554  1 002403   002407 710000 1                  TRA     SERIOUS_USER_ERROR

     1440    11555
     1441    11556    3   TOO_MANY_POINTS_FAILURE:
     1442    11557    3           ERR_CODE = %E$TOO_MANY_POINTS;

  11557  1 002404   000125 235007       TOO_MANY_PO* LDA     85,DL
         1 002405   200035 755100                    STA     ERR_CODE,,AUTO

     1443    11558    3           GOTO SERIOUS_USER_ERROR;

  11558  1 002406   002407 710000 1                  TRA     SERIOUS_USER_ERROR

     1444    11559
     1445    11560
     1446    11561    3   SERIOUS_USER_ERROR:
     1447    11562    4           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;

  11562  1 002407   200035 630500       SERIOUS_USE* EPPR0   ERR_CODE,,AUTO
         1 002410   200060 450500                    STP0    NEW_SELECT$+1,,AUTO
         1 002411   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002412   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002413   000000 701000 xent               TSX1    VDG$ERRMSG
         1 002414   002421 702000 1                  TSX2    PNUMBER_FAILED

     1448    11563    4              LAST$ERR.CMDLINE_INDEX# = MOVE$CHILD.CPOS;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:165  
  11563  1 002415   200033 470500                    LDP0    MOVE_CHILD$,,AUTO
         1 002416   000002 720100                    LXL0    2,,PR0
         1 002417   000032 471400 xsym               LDP1    VD_6E+26
         1 002420   100003 440100                    SXL0    3,,PR1

     1449    11564    4              END;

  11563  1 002421                       PNUMBER_FAI* null
  11563  1 002421                       OALLOC_FAIL* null
     1450    11565
     1451    11566
     1452    11567    3   PNUMBER_FAILED: ;
     1453    11568    3   OALLOC_FAILED: ;
     1454    11569    3           ALTRETURN;

  11569  1 002421   200030 221300                    LDX1  ! STRING_LOC,,AUTO
         1 002422   000000 702211                    TSX2  ! 0,X1

     1455    11570
     1456    11571    3   END MOVEMENT_OPTIONS;
     1457    11572
     1458    11573        %BOX (TITLE=MOVEMENT_OPERAND);

             11585    3   /***************************************************************************
             11587    3    *                                                                         *
             11591    3            *                              MOVEMENT_OPERAND                          *
             11593    3            *                                                                        *
             11595    3          ***************************************************************************/

     1459    11599
     1460    11600        /*I** NAME: MOVEMENT_OPERAND
     1461    11601            PARAMETERS:
     1462    11602                OPERAND - PARSE$OUT node for the operand to process.  Usually
     1463    11603                    this is the last child of a %T_MOVEMENT node; however,
     1464    11604                    it can also be a %T_LO_NAME node which appeared as the
     1465    11605                    first operand in a block expression (and so looked like
     1466    11606                    a domain operand), but whose value didn't specify a new
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:166  
     1467    11607                    domain (and so wasn't processed earlier with the domain
     1468    11608                    operand).
     1469    11609            INPUT:
     1470    11610                Same as for MOVEMENTS.
     1471    11611                EVAL_OPTIONS must have been cleared, then filled with any
     1472    11612                    evaluation options seen for this operand.
     1473    11613                SRCH_SEEN and SKIP_SEEN must be set based on any SKIP or
     1474    11614                    FIND/MATCH options seen for this operand.
     1475    11615            OUTPUT:
     1476    11616                Same as for MOVEMENTS.
     1477    11617                IT_OPERAND$ and LAST_MOVEMENT$ will point to the VD$IT_OPERAND
     1478    11618                    node for OPERAND.  It will be linked into the InTree;
     1479    11619                    its .OPTIONS will contain EVAL_OPTIONS.
     1480    11620            DESCRIPTION:
     1481    11621                See MOVEMENTS.
     1482    11622        */
     1483    11623
     1484    11624    2   MOVEMENT_OPERAND: PROC (OPERAND) ALTRET;

  11624  1 002423   200030 741300       MOVEMENT_OP* STX1  ! STRING_LOC,,AUTO

     1485    11625
     1486    11626        %PARSE$OUT (NAME=OPERAND, STCLASS=PARAM);
     1487    11671
     1488    11672
     1489    11673    3   DCL NUMBER SBIN;
     1490    11674    3   DCL ABS_MOVEMENT BIT(1) ALIGNED;
     1491    11675        %VD$KEY (NAME=KEY, STCLASS=AUTO);
     1492    11689    3   DCL KEY_BUFFER$ PTR;
     1493    11690    3   DCL RET_CODE CHAR(1) CALIGNED;
     1494    11691    3   DCL CTRL_ARGS(0:%(MX_CTRL_FN_ARGS-1)) UBIN;
     1495    11692    3   DCL ERR_CODE SBIN;
     1496    11693
     1497    11694
     1498    11695        %VD$KEY_NUMBER;
     1499    11710        %VD$BUFFER (NAME=KEY$BUFFER, STCLASS="BASED(KEY_BUFFER$)");
     1500    11768
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:167  
     1501    11769                /*
     1502    11770                *   Fill in the "point" evaluation option:  it's common
     1503    11771                *       to all operands.
     1504    11772                */
     1505    11773
     1506    11774    3           IF EVAL_OPTIONS.POINT# = 0 THEN

  11774  1 002424   200025 220100                    LDX0    FILE_KEY$,,AUTO
         1 002425   002430 601000 1                  TNZ     s:11782

     1507    11775    3              EVAL_OPTIONS.POINT# = VD_$POINT.V#;

  11775  1 002426   000003 722000 xsym               LXL2    VD_$POINT+3
         1 002427   200025 742100                    STX2    FILE_KEY$,,AUTO

     1508    11776
     1509    11777
     1510    11778                /*
     1511    11779                *   Process the operand to move over.
     1512    11780                */
     1513    11781
     1514    11782    3           CALL GUAR_LAST_ADJUST

  11782  1 002430   003627 701000 1                  TSX1    GUAR_LAST_ADJUST
         1 002431   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1515    11783    3             ALTRET (GUAR_LAST_ADJUST_FAILED);
     1516    11784                %INCREMENT (ARRAY=STATS_TOKENS#, INDX="OPERAND.CODE - %VD_BASE#");

  11785  1 002432   200031 470500                    LDP0    @OPERAND,,AUTO
         1 002433   000000 720100                    LXL0    0,,PR0
         1 002434   776375 054010 xsym               AOS     VD_6E-771,X0

     1517    11787    3           ABS_MOVEMENT = %FALSE;

  11787  1 002435   200033 450100                    STZ     ABS_MOVEMENT,,AUTO

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:168  
     1518    11788    3           IT_OPERAND$ = ADDR(NIL);

  11788  1 002436   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 002437   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1519    11789
     1520    11790    3   MOVE_CHILD_CODE_CASES:
     1521    11791    4           DO CASE (OPERAND.CODE);

  11791  1 002440   000000 236100       MOVE_CHILD_* LDQ     0,,PR0
         1 002441   777777 376007                    ANQ     -1,DL
         1 002442   002047 136007                    SBLQ    1063,DL
         1 002443   000006 116007                    CMPQ    6,DL
         1 002444   002446 602006 1                  TNC     MOVE_CHILD_CODE_CASES+6,QL
         1 002445   003126 710000 1                  TRA     s:11954
         1 002446   002454 710000 1                  TRA     s:11794
         1 002447   002467 710000 1                  TRA     s:11803
         1 002450   002531 710000 1                  TRA     s:11818
         1 002451   003056 710000 1                  TRA     s:11937
         1 002452   002734 710000 1                  TRA     s:11890
         1 002453   002674 710000 1                  TRA     s:11874

     1522    11792
     1523    11793    4            CASE (%T_LO_NAME);

     1524    11794    4              IF SKIP_SEEN

  11794  1 002454   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002455   003163 604000 1                  TMI     LO_NAME_OPTS_NOT_LEGAL_FAILURE
         1 002456   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 002457   003163 601000 1                  TNZ     LO_NAME_OPTS_NOT_LEGAL_FAILURE

     1525    11795    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1526    11796    4                 GOTO LO_NAME_OPTS_NOT_LEGAL_FAILURE;
     1527    11797    4              CALL PLO_NAME (OPERAND)

  11797  1 002460   200031 236100                    LDQ     @OPERAND,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:169  
         1 002461   200045 756100                    STQ     CTRL_ARGS,,AUTO
         1 002462   003221 701000 1                  TSX1    PLO_NAME
         1 002463   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1528    11798    4                ALTRET (PLO_NAME_FAILED);
     1529    11799    4              ABS_MOVEMENT = %TRUE;

  11799  1 002464   400000 236003                    LDQ     -131072,DU
         1 002465   200033 756100                    STQ     ABS_MOVEMENT,,AUTO
         1 002466   003135 710000 1                  TRA     s:11963

     1530    11800
     1531    11801
     1532    11802    4            CASE (%T_NUMERIC_KEY);

     1533    11803    4              IF SKIP_SEEN

  11803  1 002467   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002470   003166 604000 1                  TMI     KEY_OPTIONS_NOT_LEGAL_FAILURE
         1 002471   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 002472   003166 601000 1                  TNZ     KEY_OPTIONS_NOT_LEGAL_FAILURE

     1534    11804    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1535    11805    4                 GOTO KEY_OPTIONS_NOT_LEGAL_FAILURE;
     1536    11806    4              CALL VDE$PNUMERIC_KEY (OPERAND, KEY)

  11806  1 002473   200034 631500                    EPPR1   KEY,,AUTO
         1 002474   200061 451500                    STP1    NEW_SELECT$+2,,AUTO
         1 002475   200031 236100                    LDQ     @OPERAND,,AUTO
         1 002476   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002477   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002500   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002501   000000 701000 xent               TSX1    VDE$PNUMERIC_KEY
         1 002502   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1537    11807    4                ALTRET (PNUMERIC_KEY_FAILED);
     1538    11808    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:170  

  11808  1 002503   200016 630500                    EPPR0   T$,,AUTO
         1 002504   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 002505   000025 236000 2                  LDQ     21
         1 002506   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002507   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002510   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002511   000000 701000 xent               TSX1    VDG$OALLOC
         1 002512   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1539    11809    4                ALTRET (OALLOC_FAILED);
     1540    11810    4              IT_OPERAND$ = T$;

  11810  1 002513   200016 236100                    LDQ     T$,,AUTO
         1 002514   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1541    11811    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  11811  1 002515   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 002516   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 002517   000004 755100                    STA     4,,PR0
         1 002520   000005 756100                    STQ     5,,PR0

     1542    11812    4              IT$OPERAND.CODE# = %OPAND_NODE;

  11812  1 002521   000006 220003                    LDX0    6,DU
         1 002522   000003 740100                    STX0    3,,PR0

     1543    11813    4              IT$OPERAND.KEY = KEY;

  11813  1 002523   200034 237100                    LDAQ    KEY,,AUTO
         1 002524   000006 755100                    STA     6,,PR0
         1 002525   000007 756100                    STQ     7,,PR0

     1544    11814    4              ABS_MOVEMENT = %TRUE;

  11814  1 002526   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:171  
         1 002527   200033 756100                    STQ     ABS_MOVEMENT,,AUTO
         1 002530   003135 710000 1                  TRA     s:11963

     1545    11815
     1546    11816
     1547    11817    4            CASE (%T_STRING_KEY);

     1548    11818    4              IF SKIP_SEEN

  11818  1 002531   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002532   003166 604000 1                  TMI     KEY_OPTIONS_NOT_LEGAL_FAILURE
         1 002533   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 002534   003166 601000 1                  TNZ     KEY_OPTIONS_NOT_LEGAL_FAILURE

     1549    11819    4                OR EVAL_OPTIONS.DIRECTION# ~= 0 THEN
     1550    11820    4                 GOTO KEY_OPTIONS_NOT_LEGAL_FAILURE;
     1551    11821                   /*
     1552    11822                   *  Note that we don't know what kind of file this key is for;
     1553    11823                   *N*   it could be for a string-keyed file, or
     1554    11824                   *    it could be for a numeric-keyed file.  We'll just
     1555    11825                   *    store it as a string-key in the InTree; later, when the InTree
     1556    11826                   *    is evaluated, if the file is numeric keyed, we'll convert
     1557    11827                   *    the string key to a numeric key.
     1558    11828                   *  OPERAND is the T_STRING_KEY node below:
     1559    11829                   *
     1560    11830                   *                T_STRING_KEY
     1561    11831                   *                    |
     1562    11832                   *                T_STRING_EXPR
     1563    11833                   *                    |
     1564    11834                   *                 XUE_EXP
     1565    11835                   */
     1566    11836    4              KEY = %CLEAR;

  11836  1 002535   000000 235003                    LDA     0,DU
         1 002536   000000 236003                    LDQ     0,DU
         1 002537   200034 757100                    STAQ    KEY,,AUTO

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:172  
     1567    11837    4              KEY.TYPE# = %KT_STRING;

  11837  1 002540   000002 221003                    LDX1    2,DU
         1 002541   200034 741100                    STX1    KEY,,AUTO

     1568    11838    4              KEY.REP# = %REP_REMOTE;

  11838  1 002542   200034 441100                    SXL1    KEY,,AUTO

     1569    11839    4              KEY.V$ = ADDR(NIL);

  11839  1 002543   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 002544   200035 756100                    STQ     ERR_CODE,,AUTO

     1570    11840    4              KEY_BUFFER$ = ADDR(NIL);

  11840  1 002545   200036 756100                    STQ     KEY_BUFFER$,,AUTO

     1571    11841    4              CALL VDE$PSTRING (OPERAND.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$BLK,

  11841  1 002546   000003 471500                    LDP1    3,,PR0
         1 002547   100003 473500                    LDP3    3,,PR1
         1 002550   200040 634500                    EPPR4   CTRL_ARGS,,AUTO
         1 002551   200064 454500                    STP4    NEW_SELECT$+5,,AUTO
         1 002552   200037 631500                    EPPR1   RET_CODE,,AUTO
         1 002553   200063 451500                    STP1    NEW_SELECT$+4,,AUTO
         1 002554   200036 635500                    EPPR5   KEY_BUFFER$,,AUTO
         1 002555   200062 455500                    STP5    NEW_SELECT$+3,,AUTO
         1 002556   200032 636500                    EPPR6   NUMBER,,AUTO
         1 002557   200061 456500                    STP6    NEW_SELECT$+2,,AUTO
         1 002560   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 002561   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002562   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 002563   000000 701000 xent               TSX1    VDE$PSTRING
         1 002564   002566 702000 1                  TSX2    s:11844
         1 002565   002573 710000 1                  TRA     s:11848

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:173  
     1572    11842    4                NUMBER, KEY_BUFFER$, RET_CODE, CTRL_ARGS)
     1573    11843    5              WHENALTRETURN DO;

     1574    11844    5                 CALL VDG$OFREE (KEY$BUFFER)

  11844  1 002566   200036 630500                    EPPR0   KEY_BUFFER$,,AUTO
         1 002567   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002570   000000 701000 xent               TSX1    VDG$OFREE
         1 002571   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1575    11845    5                   ALTRET (OFREE_FAILED);
     1576    11846    5                 GOTO PSTRING_FAILED;

  11846  1 002572   003217 710000 1                  TRA     GUAR_LAST_ADJUST_FAILED

     1577    11847    5                 END;
     1578    11848    5              IF RET_CODE ~= %CHR_SPACE THEN DO;

  11848  1 002573   200037 236100                    LDQ     RET_CODE,,AUTO
         1 002574   777000 376003                    ANQ     -512,DU
         1 002575   040000 116003                    CMPQ    16384,DU
         1 002576   002604 600000 1                  TZE     s:11854

     1579    11849    5                 CALL VDG$OFREE (KEY$BUFFER)

  11849  1 002577   200036 630500                    EPPR0   KEY_BUFFER$,,AUTO
         1 002600   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002601   000000 701000 xent               TSX1    VDG$OFREE
         1 002602   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1580    11850    5                   ALTRET (OFREE_FAILED);
     1581    11851    5                 GOTO CTRLFN_CONFLICTS_W_KEY_FAILURE;

  11851  1 002603   003171 710000 1                  TRA     CTRLFN_CONFLICTS_W_KEY_FAILURE

     1582    11852    5                 END;
     1583    11853                   /* KEY.V$ must point to a VD$TEXTC_REMOTE, not a VD$BUFFER */
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:174  
     1584    11854    4              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, KEY.V$,

  11854  1 002604   200036 470500                    LDP0    KEY_BUFFER$,,AUTO
         1 002605   000002 236100                    LDQ     2,,PR0
         1 002606   000022 732000                    QRS     18
         1 002607   000014 036007                    ADLQ    12,DL
         1 002610   000004 506007                    DIV     4,DL
         1 002611   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002612   200060 631500                    EPPR1   NEW_SELECT$+1,,AUTO
         1 002613   200063 451500                    STP1    NEW_SELECT$+4,,AUTO
         1 002614   200035 633500                    EPPR3   ERR_CODE,,AUTO
         1 002615   200062 453500                    STP3    NEW_SELECT$+3,,AUTO
         1 002616   000037 236000 2                  LDQ     31
         1 002617   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 002620   200061 630500                    EPPR0   NEW_SELECT$+2,,AUTO
         1 002621   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 002622   000000 701000 xent               TSX1    VDG$OALLOC
         1 002623   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1585    11855    4                (LENGTHC(VD$STRING_HEADER) + KEY$BUFFER.LENGTH# +
     1586    11856    4                (%NB_PER_WORD-1)) / %NB_PER_WORD)
     1587    11857    4                ALTRET (OALLOC_FAILED);
     1588    11858    4              KEY.V$->VD$TEXTC_REMOTE.LENGTH# = KEY$BUFFER.LENGTH#;

  11858  1 002624   200035 470500                    LDP0    ERR_CODE,,AUTO
         1 002625   200036 471500                    LDP1    KEY_BUFFER$,,AUTO
         1 002626   100002 236100                    LDQ     2,,PR1
         1 002627   000011 736000                    QLS     9
         1 002630   000002 552140                    STBQ    2,'40'O,PR0

     1589    11859    4              KEY.V$->VD$TEXTC_REMOTE.BYTES = KEY$BUFFER.BYTES;

  11859  1 002631   200035 470500                    LDP0    ERR_CODE,,AUTO
         1 002632   000002 236100                    LDQ     2,,PR0
         1 002633   000033 772000                    QRL     27
         1 002634   200036 471500                    LDP1    KEY_BUFFER$,,AUTO
         1 002635   100002 220100                    LDX0    2,,PR1
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:175  
         1 002636   000000 621006                    EAX1    0,QL
         1 002637   040140 100540                    MLR     fill='040'O
         1 002640   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0
         1 002641   000002 200011                    ADSC9   2,,PR0                   cn=1,n=*X1

     1590    11860    4              CALL VDG$OFREE (KEY$BUFFER)

  11860  1 002642   200036 630500                    EPPR0   KEY_BUFFER$,,AUTO
         1 002643   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 002644   000000 701000 xent               TSX1    VDG$OFREE
         1 002645   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1591    11861    4                ALTRET (OFREE_FAILED);
     1592    11862
     1593    11863    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  11863  1 002646   200016 630500                    EPPR0   T$,,AUTO
         1 002647   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 002650   000025 236000 2                  LDQ     21
         1 002651   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002652   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002653   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002654   000000 701000 xent               TSX1    VDG$OALLOC
         1 002655   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1594    11864    4                ALTRET (OALLOC_FAILED);
     1595    11865    4              IT_OPERAND$ = T$;

  11865  1 002656   200016 236100                    LDQ     T$,,AUTO
         1 002657   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1596    11866    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  11866  1 002660   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 002661   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 002662   000004 755100                    STA     4,,PR0
         1 002663   000005 756100                    STQ     5,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:176  

     1597    11867    4              IT$OPERAND.CODE# = %OPAND_NODE;

  11867  1 002664   000006 220003                    LDX0    6,DU
         1 002665   000003 740100                    STX0    3,,PR0

     1598    11868    4              IT$OPERAND.KEY = KEY;

  11868  1 002666   200034 237100                    LDAQ    KEY,,AUTO
         1 002667   000006 755100                    STA     6,,PR0
         1 002670   000007 756100                    STQ     7,,PR0

     1599    11869    4              ABS_MOVEMENT = %TRUE;

  11869  1 002671   400000 236003                    LDQ     -131072,DU
         1 002672   200033 756100                    STQ     ABS_MOVEMENT,,AUTO
         1 002673   003135 710000 1                  TRA     s:11963

     1600    11870
     1601    11871
     1602    11872    4            CASE (%T_LEVEL_NAME);

     1603    11873                   /* Fill in the default options for relative operands */
     1604    11874    4              IF NOT SRCH_SEEN THEN

  11874  1 002674   200026 234100                    SZN     SRCH_SEEN,,AUTO
         1 002675   002703 604000 1                  TMI     s:11876

     1605    11875    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);

  11875  1 002676   000003 236000 xsym               LDQ     VD_$SEARCH+3
         1 002677   000043 736000                    QLS     35
         1 002700   200024 676100                    ERQ     EVAL_OPTIONS,,AUTO
         1 002701   400000 376003                    ANQ     -131072,DU
         1 002702   200024 656100                    ERSQ    EVAL_OPTIONS,,AUTO

     1606    11876    4              IF NOT SKIP_SEEN THEN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:177  

  11876  1 002703   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002704   002707 604000 1                  TMI     s:11878

     1607    11877    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;

  11877  1 002705   000003 720000 xsym               LXL0    VD_$SKIP+3
         1 002706   200024 440100                    SXL0    EVAL_OPTIONS,,AUTO

     1608    11878    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN

  11878  1 002707   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 002710   002713 601000 1                  TNZ     s:11881

     1609    11879    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;

  11879  1 002711   000003 721000 xsym               LXL1    VD_$DIRECTION+3
         1 002712   200025 441100                    SXL1    FILE_KEY$,,AUTO

     1610    11880
     1611    11881    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  11881  1 002713   200016 631500                    EPPR1   T$,,AUTO
         1 002714   200061 451500                    STP1    NEW_SELECT$+2,,AUTO
         1 002715   000025 236000 2                  LDQ     21
         1 002716   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002717   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002720   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002721   000000 701000 xent               TSX1    VDG$OALLOC
         1 002722   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1612    11882    4                ALTRET (OALLOC_FAILED);
     1613    11883    4              IT_OPERAND$ = T$;

  11883  1 002723   200016 236100                    LDQ     T$,,AUTO
         1 002724   200023 756100                    STQ     IT_OPERAND$,,AUTO

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:178  
     1614    11884    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  11884  1 002725   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 002726   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 002727   000004 755100                    STA     4,,PR0
         1 002730   000005 756100                    STQ     5,,PR0

     1615    11885    4              IT$OPERAND.CODE# = %OPAND_NODE;

  11885  1 002731   000006 220003                    LDX0    6,DU
         1 002732   000003 740100                    STX0    3,,PR0
         1 002733   003135 710000 1                  TRA     s:11963

     1616    11886
     1617    11887
     1618    11888    4            CASE (%T_POSITIONS);

     1619    11889                   /* Fill in the default options for relative operands */
     1620    11890    4              IF NOT SRCH_SEEN THEN

  11890  1 002734   200026 234100                    SZN     SRCH_SEEN,,AUTO
         1 002735   002743 604000 1                  TMI     s:11892

     1621    11891    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);

  11891  1 002736   000003 236000 xsym               LDQ     VD_$SEARCH+3
         1 002737   000043 736000                    QLS     35
         1 002740   200024 676100                    ERQ     EVAL_OPTIONS,,AUTO
         1 002741   400000 376003                    ANQ     -131072,DU
         1 002742   200024 656100                    ERSQ    EVAL_OPTIONS,,AUTO

     1622    11892    4              IF NOT SKIP_SEEN THEN

  11892  1 002743   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 002744   002747 604000 1                  TMI     s:11894

     1623    11893    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:179  

  11893  1 002745   000003 720000 xsym               LXL0    VD_$SKIP+3
         1 002746   200024 440100                    SXL0    EVAL_OPTIONS,,AUTO

     1624    11894    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN

  11894  1 002747   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 002750   002753 601000 1                  TNZ     s:11897

     1625    11895    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;

  11895  1 002751   000003 721000 xsym               LXL1    VD_$DIRECTION+3
         1 002752   200025 441100                    SXL1    FILE_KEY$,,AUTO

     1626    11896
     1627    11897    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  11897  1 002753   200016 631500                    EPPR1   T$,,AUTO
         1 002754   200061 451500                    STP1    NEW_SELECT$+2,,AUTO
         1 002755   000025 236000 2                  LDQ     21
         1 002756   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 002757   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 002760   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 002761   000000 701000 xent               TSX1    VDG$OALLOC
         1 002762   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1628    11898    4                ALTRET (OALLOC_FAILED);
     1629    11899    4              IT_OPERAND$ = T$;

  11899  1 002763   200016 236100                    LDQ     T$,,AUTO
         1 002764   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1630    11900    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  11900  1 002765   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 002766   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 002767   000004 755100                    STA     4,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:180  
         1 002770   000005 756100                    STQ     5,,PR0

     1631    11901    4              IT$OPERAND.CODE# = %OPAND_POSITION;

  11901  1 002771   000007 220003                    LDX0    7,DU
         1 002772   000003 740100                    STX0    3,,PR0

     1632    11902
     1633    11903    5              IF OPERAND.NSUBLKS > 0 THEN DO;

  11903  1 002773   200031 471500                    LDP1    @OPERAND,,AUTO
         1 002774   100001 221100                    LDX1    1,,PR1
         1 002775   003135 600000 1                  TZE     s:11963

     1634    11904                      /* This is a specific position # */
     1635    11905    5                 IF OPERAND.SUBLK$(0)->OUT$BLK.CODE =

  11905  1 002776   100003 473500                    LDP3    3,,PR1
         1 002777   300000 722100                    LXL2    0,,PR3
         1 003000   002056 102003                    CMPX2   1070,DU
         1 003001   003020 601000 1                  TNZ     s:11916

     1636    11906    6                   %T_STRING_EXPR THEN DO;

     1637    11907    6                    CALL VDE$PNUMBER (OPERAND.SUBLK$(0)->OUT$BLK,

  11907  1 003002   200032 634500                    EPPR4   NUMBER,,AUTO
         1 003003   200061 454500                    STP4    NEW_SELECT$+2,,AUTO
         1 003004   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 003005   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003007   000000 701000 xent               TSX1    VDE$PNUMBER
         1 003010   003012 702000 1                  TSX2    s:11910
         1 003011   003017 710000 1                  TRA     s:11914

     1638    11908    6                      NUMBER)
     1639    11909    7                    WHENALTRETURN DO;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:181  

     1640    11910    7                       CALL VDG$OFREE (IT$OPERAND)

  11910  1 003012   200023 630500                    EPPR0   IT_OPERAND$,,AUTO
         1 003013   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003014   000000 701000 xent               TSX1    VDG$OFREE
         1 003015   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1641    11911    7                         ALTRET (OFREE_FAILED);
     1642    11912    7                       GOTO PNUMBER_FAILED;

  11912  1 003016   003217 710000 1                  TRA     GUAR_LAST_ADJUST_FAILED

     1643    11913    7                       END;
     1644    11914    6                    END;

  11914  1 003017   003036 710000 1                  TRA     s:11924

     1645    11915    6                 ELSE DO;

     1646    11916    6                    CALL X$DEC_CONVERT (OPERAND.SUBLK$(0)->OUT$SYM.TEXTC$,

  11916  1 003020   200032 634500                    EPPR4   NUMBER,,AUTO
         1 003021   200061 454500                    STP4    NEW_SELECT$+2,,AUTO
         1 003022   300003 635500                    EPPR5   3,,PR3
         1 003023   200060 455500                    STP5    NEW_SELECT$+1,,AUTO
         1 003024   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003025   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003026   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 003027   003031 702000 1                  TSX2    s:11919
         1 003030   003036 710000 1                  TRA     s:11924

     1647    11917    6                      NUMBER)
     1648    11918    7                    WHENALTRETURN DO;

     1649    11919    7                       CALL VDG$OFREE (IT$OPERAND)

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:182  
  11919  1 003031   200023 630500                    EPPR0   IT_OPERAND$,,AUTO
         1 003032   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003033   000000 701000 xent               TSX1    VDG$OFREE
         1 003034   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1650    11920    7                         ALTRET (OFREE_FAILED);
     1651    11921    7                       GOTO DEC_CONVERT_FAILED;

  11921  1 003035   003217 710000 1                  TRA     GUAR_LAST_ADJUST_FAILED

     1652    11922    7                       END;
     1653    11923    6                    END;

     1654    11924    5                 IF NUMBER <= 0

  11924  1 003036   200032 235100                    LDA     NUMBER,,AUTO
         1 003037   003174 604400 1                  TMOZ    POSITION_NOT_IN_RANGE_FAILURE
         1 003040   004000 115007                    CMPA    2048,DL
         1 003041   003174 605400 1                  TPNZ    POSITION_NOT_IN_RANGE_FAILURE

     1655    11925    5                   OR NUMBER > %MXNB_DATA THEN
     1656    11926    5                    GOTO POSITION_NOT_IN_RANGE_FAILURE;
     1657    11927    5                 IT$OPERAND.KEY = %CLEAR;

  11927  1 003042   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 003043   000006 450100                    STZ     6,,PR0
         1 003044   000007 450100                    STZ     7,,PR0

     1658    11928    5                 IT$OPERAND.KEY.TYPE# = %KT_NUMBER;

  11928  1 003045   000001 220003                    LDX0    1,DU
         1 003046   000006 740100                    STX0    6,,PR0

     1659    11929    5                 IT$OPERAND.KEY.REP# = %REP_LOCAL;

  11929  1 003047   000006 440100                    SXL0    6,,PR0

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:183  
     1660    11930    5                 ADDR(IT$OPERAND.KEY)->VD$KEY_NUMBER.LENGTH# = %NB_NUMERIC_KEY;

  11930  1 003050   003000 236003                    LDQ     1536,DU
         1 003051   000007 552140                    STBQ    7,'40'O,PR0

     1661    11931    5                 ADDR(IT$OPERAND.KEY)->VD$KEY_NUMBER.BYTES# = NUMBER - 1;

  11931  1 003052   200032 236100                    LDQ     NUMBER,,AUTO
         1 003053   000001 136007                    SBLQ    1,DL
         1 003054   000007 552134                    STBQ    7,'34'O,PR0

     1662    11932    5                 END;

  11932  1 003055   003135 710000 1                  TRA     s:11963

     1663    11933
     1664    11934
     1665    11935    4            CASE (%T_PATTERN);

     1666    11936                   /* Fill in the default options for relative operands */
     1667    11937    4              IF NOT SRCH_SEEN THEN

  11937  1 003056   200026 234100                    SZN     SRCH_SEEN,,AUTO
         1 003057   003065 604000 1                  TMI     s:11939

     1668    11938    4                 EVAL_OPTIONS.SRCH = BINBIT(VD_$SEARCH.V#, 1);

  11938  1 003060   000003 236000 xsym               LDQ     VD_$SEARCH+3
         1 003061   000043 736000                    QLS     35
         1 003062   200024 676100                    ERQ     EVAL_OPTIONS,,AUTO
         1 003063   400000 376003                    ANQ     -131072,DU
         1 003064   200024 656100                    ERSQ    EVAL_OPTIONS,,AUTO

     1669    11939    4              IF NOT SKIP_SEEN THEN

  11939  1 003065   200027 234100                    SZN     SKIP_SEEN,,AUTO
         1 003066   003071 604000 1                  TMI     s:11941
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:184  

     1670    11940    4                 EVAL_OPTIONS.SKIP# = VD_$SKIP.V#;

  11940  1 003067   000003 720000 xsym               LXL0    VD_$SKIP+3
         1 003070   200024 440100                    SXL0    EVAL_OPTIONS,,AUTO

     1671    11941    4              IF EVAL_OPTIONS.DIRECTION# = 0 THEN

  11941  1 003071   200025 720100                    LXL0    FILE_KEY$,,AUTO
         1 003072   003075 601000 1                  TNZ     s:11944

     1672    11942    4                 EVAL_OPTIONS.DIRECTION# = VD_$DIRECTION.V#;

  11942  1 003073   000003 721000 xsym               LXL1    VD_$DIRECTION+3
         1 003074   200025 441100                    SXL1    FILE_KEY$,,AUTO

     1673    11943
     1674    11944    4              CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  11944  1 003075   200016 631500                    EPPR1   T$,,AUTO
         1 003076   200061 451500                    STP1    NEW_SELECT$+2,,AUTO
         1 003077   000025 236000 2                  LDQ     21
         1 003100   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003101   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003102   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003103   000000 701000 xent               TSX1    VDG$OALLOC
         1 003104   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1675    11945    4                ALTRET (OALLOC_FAILED);
     1676    11946    4              IT_OPERAND$ = T$;

  11946  1 003105   200016 236100                    LDQ     T$,,AUTO
         1 003106   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1677    11947    4              IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  11947  1 003107   200023 470500                    LDP0    IT_OPERAND$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:185  
         1 003110   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 003111   000004 755100                    STA     4,,PR0
         1 003112   000005 756100                    STQ     5,,PR0

     1678    11948    4              IT$OPERAND.CODE# = %OPAND_PATTERN;

  11948  1 003113   000010 220003                    LDX0    8,DU
         1 003114   000003 740100                    STX0    3,,PR0

     1679    11949    4              CALL VDE$PPATTERN (OPERAND, IT$OPERAND.PARAM$)

  11949  1 003115   200023 236100                    LDQ     IT_OPERAND$,,AUTO
         1 003116   000010 036003                    ADLQ    8,DU
         1 003117   200031 235100                    LDA     @OPERAND,,AUTO
         1 003120   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 003121   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003122   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003123   000000 701000 xent               TSX1    VDE$PPATTERN
         1 003124   003211 702000 1                  TSX2    PPATTERN_FAILED
         1 003125   003135 710000 1                  TRA     s:11963

     1680    11950    4                ALTRET (PPATTERN_FAILED);
     1681    11951
     1682    11952
     1683    11953    4            CASE (ELSE);

     1684    11954    4              CALL VDG$ESCREECH (OPERAND.CODE);

  11954  1 003126   200031 236100                    LDQ     @OPERAND,,AUTO
         1 003127   400000 036007                    ADLQ    -131072,DL
         1 003130   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003131   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003132   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003133   000000 701000 xent               TSX1    VDG$ESCREECH
         1 003134   000000 011000                    NOP     0

     1685    11955
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:186  
     1686    11956    4            END MOVE_CHILD_CODE_CASES;

     1687    11957
     1688    11958
     1689    11959                /*
     1690    11960                *   Link the new IT$OPERAND node into InTree.
     1691    11961                */
     1692    11962
     1693    11963    4           IF ABS_MOVEMENT THEN DO;

  11963  1 003135   200033 234100                    SZN     ABS_MOVEMENT,,AUTO
         1 003136   003141 605000 1                  TPL     s:11968

     1694    11964    4              CALL ABS_IT_OPERAND

  11964  1 003137   003533 701000 1                  TSX1    ABS_IT_OPERAND
         1 003140   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

     1695    11965    4                ALTRET (ABS_IT_OPERAND_FAILED);
     1696    11966    4              END;

     1697    11967
     1698    11968    3           IT$OPERAND.PARENT$ = LAST_ADJUST$;

  11968  1 003141   200010 236100                    LDQ     LAST_ADJUST$,,AUTO
         1 003142   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 003143   000001 756100                    STQ     1,,PR0

     1699    11969    3           IF LAST_MOVEMENT$ = ADDR(NIL) THEN

  11969  1 003144   200011 236100                    LDQ     LAST_MOVEMENT$,,AUTO
         1 003145   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003146   003153 601000 1                  TNZ     s:11972

     1700    11970    3              LAST$ADJUST.MOVEMENTS$ = IT_OPERAND$;

  11970  1 003147   200023 236100                    LDQ     IT_OPERAND$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:187  
         1 003150   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 003151   100004 756100                    STQ     4,,PR1
         1 003152   003156 710000 1                  TRA     s:11973

     1701    11971    3           ELSE
     1702    11972    3              LAST$MOVEMENT.FLINK$ = IT_OPERAND$;

  11972  1 003153   200023 236100                    LDQ     IT_OPERAND$,,AUTO
         1 003154   200011 471500                    LDP1    LAST_MOVEMENT$,,AUTO
         1 003155   100002 756100                    STQ     2,,PR1

     1703    11973    3           LAST$ADJUST.MOVEMENTS_TAIL$ = IT_OPERAND$;

  11973  1 003156   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 003157   100005 756100                    STQ     5,,PR1

     1704    11974    3           LAST_MOVEMENT$ = IT_OPERAND$;

  11974  1 003160   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     1705    11975
     1706    11976    3           RETURN;

  11976  1 003161   200030 221300                    LDX1  ! STRING_LOC,,AUTO
         1 003162   000001 702211                    TSX2  ! 1,X1

     1707    11977
     1708    11978
     1709    11979                %BOX (TITLE="Error Handlers");

             11991    3   /***************************************************************************
             11993    3    *                                                                         *
             11997    3            *                               Error Handlers                           *
             11999    3            *                                                                        *
             12001    3          ***************************************************************************/

     1710    12005
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:188  
     1711    12006    3   LO_NAME_OPTS_NOT_LEGAL_FAILURE:
     1712    12007    3           ERR_CODE = %E$LO_NAME_OPTIONS_NOT_LEGAL;

  12007  1 003163   000117 235007       LO_NAME_OPT* LDA     79,DL
         1 003164   200042 755100                    STA     ERR_CODE,,AUTO

     1713    12008    3           GOTO SERIOUS_USER_ERROR;

  12008  1 003165   003177 710000 1                  TRA     SERIOUS_USER_ERROR

     1714    12009
     1715    12010    3   KEY_OPTIONS_NOT_LEGAL_FAILURE:
     1716    12011    3           ERR_CODE = %E$KEY_OPTIONS_NOT_LEGAL;

  12011  1 003166   000116 235007       KEY_OPTIONS* LDA     78,DL
         1 003167   200042 755100                    STA     ERR_CODE,,AUTO

     1717    12012    3           GOTO SERIOUS_USER_ERROR;

  12012  1 003170   003177 710000 1                  TRA     SERIOUS_USER_ERROR

     1718    12013
     1719    12014    3   CTRLFN_CONFLICTS_W_KEY_FAILURE:
     1720    12015    3           ERR_CODE = %E$CTRLFN_CONFLICTS_W_KEY;

  12015  1 003171   000132 235007       CTRLFN_CONF* LDA     90,DL
         1 003172   200042 755100                    STA     ERR_CODE,,AUTO

     1721    12016    3           GOTO SERIOUS_USER_ERROR;

  12016  1 003173   003177 710000 1                  TRA     SERIOUS_USER_ERROR

     1722    12017
     1723    12018    3   POSITION_NOT_IN_RANGE_FAILURE:
     1724    12019    3           ERR_CODE = %E$POSITION_VALUE_NOT_IN_RANGE;

  12019  1 003174   000123 236007       POSITION_NO* LDQ     83,DL
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:189  
         1 003175   200042 756100                    STQ     ERR_CODE,,AUTO

     1725    12020    3           GOTO SERIOUS_USER_ERROR;

  12020  1 003176   003177 710000 1                  TRA     SERIOUS_USER_ERROR

     1726    12021
     1727    12022
     1728    12023    3   SERIOUS_USER_ERROR:
     1729    12024    4           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;

  12024  1 003177   200042 630500       SERIOUS_USE* EPPR0   ERR_CODE,,AUTO
         1 003200   200060 450500                    STP0    NEW_SELECT$+1,,AUTO
         1 003201   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003202   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003203   000000 701000 xent               TSX1    VDG$ERRMSG
         1 003204   003211 702000 1                  TSX2    PPATTERN_FAILED

     1730    12025    4              LAST$ERR.CMDLINE_INDEX# = OPERAND.CPOS;

  12025  1 003205   200031 470500                    LDP0    @OPERAND,,AUTO
         1 003206   000002 720100                    LXL0    2,,PR0
         1 003207   000032 471400 xsym               LDP1    VD_6E+26
         1 003210   100003 440100                    SXL0    3,,PR1

     1731    12026    4              END;

     1732    12027
     1733    12028
     1734    12029    3   PPATTERN_FAILED:
     1735    12030    3           CALL VDG$OFREE (IT$OPERAND)

  12030  1 003211   200023 630500       PPATTERN_FA* EPPR0   IT_OPERAND$,,AUTO
         1 003212   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003213   000000 701000 xent               TSX1    VDG$OFREE
         1 003214   003217 702000 1                  TSX2    GUAR_LAST_ADJUST_FAILED

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:190  
     1736    12031    3             ALTRET (OFREE_FAILED);
     1737    12032    3           ALTRETURN;

  12032  1 003215   200030 221300                    LDX1  ! STRING_LOC,,AUTO
         1 003216   000000 702211                    TSX2  ! 0,X1

  12025  1 003217                       GUAR_LAST_A* null
  12025  1 003217                       PNUMBER_FAI* null
  12025  1 003217                       PSTRING_FAI* null
  12025  1 003217                       DEC_CONVERT* null
  12025  1 003217                       PLO_NAME_FA* null
  12025  1 003217                       PNUMERIC_KE* null
  12025  1 003217                       ABS_IT_OPER* null
  12025  1 003217                       OFREE_FAILED null
  12025  1 003217                       OALLOC_FAIL* null
     1738    12033
     1739    12034
     1740    12035    3   GUAR_LAST_ADJUST_FAILED: ;
     1741    12036    3   PNUMBER_FAILED: ;
     1742    12037    3   PSTRING_FAILED: ;
     1743    12038    3   DEC_CONVERT_FAILED: ;
     1744    12039    3   PLO_NAME_FAILED: ;
     1745    12040    3   PNUMERIC_KEY_FAILED: ;
     1746    12041    3   ABS_IT_OPERAND_FAILED: ;
     1747    12042    3   OFREE_FAILED: ;
     1748    12043    3   OALLOC_FAILED: ;
     1749    12044    3           ALTRETURN;

  12044  1 003217   200030 221300                    LDX1  ! STRING_LOC,,AUTO
         1 003220   000000 702211                    TSX2  ! 0,X1

     1750    12045
     1751    12046
     1752    12047                %BOX (TITLE=PLO_NAME);

             12059    3   /***************************************************************************
             12061    3    *                                                                         *
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:191  
             12065    3            *                                  PLO_NAME                              *
             12067    3            *                                                                        *
             12069    3          ***************************************************************************/

     1753    12073
     1754    12074        /*I*** NAME: PLO_NAME
     1755    12075            PARAMETERS:
     1756    12076                PT_LO_NAME - PARSE$OUT node whose code is %T_LO_NAME.
     1757    12077            INPUT:
     1758    12078                EVAL_OPTIONS - VD$EVAL_OPTIONS containing values from the
     1759    12079                    T_MOVEMENT clause evaluation options seen so far.
     1760    12080                IT$BLOCK_EXPR - The VD$IT_BLOCK_EXPR root node of the InTree.
     1761    12081                    Its .DOMAINN must be %CLEAR, or must specify the domain
     1762    12082                    for this block expression.
     1763    12083                EDIT$BLOCK - If IT$BLOCK_EXPR.DOMAINN is %CLEAR, then EDIT$BLOCK
     1764    12084                    must specifiy the domain for this block expression.
     1765    12085                LAST$SELECT, LAST$ADJUST - The last IT_SELECT and IT_ADJUST
     1766    12086                    nodes in the InTree currently.  They must exist.
     1767    12087            OUTPUT:
     1768    12088                If no errors found:
     1769    12089                    IT_OPERAND$ and LAST_MOVEMENT$ will point to the VD$IT_OPERAND
     1770    12090                        node for the LO-name.  It will NOT be linked into the
     1771    12091                        InTree yet; its .OPTIONS will contain EVAL_OPTIONS.
     1772    12092                        Its .CODE# will be either:
     1773    12093                        o %OPAND_LO_NAME; its .KEY will be the key for level 1
     1774    12094                            of the Locations-file for the name.
     1775    12095                        o %OPAND_BLOCK_DESC; its .PARAM$ will point to the
     1776    12096                            VD_BLOCK_DESC which is the value of this operand.
     1777    12097            DESCRIPTION:
     1778    12098                The PT_LO_NAME node must have one child:  an OUT$SYM node
     1779    12099                containing the Location-name.
     1780    12100
     1781    12101                Procedure:
     1782    12102                During the parse, VDI$PUSER_PARSE_RTN should have verified
     1783    12103                    that the name exists in the Locations-file before
     1784    12104                    accepting the T_LO_NAME parse node.
     1785    12105                Read the name from the Locations-file.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:192  
     1786    12106                Verify that the file containing the name's value is the same
     1787    12107                    as the file containing the domain of the current block
     1788    12108                    expression.
     1789    12109                Allocate an IT$OPERAND node, and store the name as a key
     1790    12110                    into the Locations-file in the IT$OPERAND node.
     1791    12111                If the name isn't writable by the user and doesn't start
     1792    12112                    with a dollar sign, then make a copy of the name's
     1793    12113                    value (a VD$BLOCK_DESC) and point IT$OPERAND to the copy.
     1794    12114                    This is done for CURRENT, HERE, and THAT because they
     1795    12115                    refer to the respective value at the start of command
     1796    12116                    processing.  Other LO-name references are dynamically
     1797    12117                    re-evaluated (re-read from the Locations-file) each
     1798    12118                    time they're referenced during block expression evaluation.
     1799    12119                    (This is useful both for the $ENCLOSING, $FP, and $RANGE
     1800    12120                    names, whose values change during evaluation, and for
     1801    12121                    user-defined names in repeated block expressions, whose
     1802    12122                    values may change for each repetition of the evaluation
     1803    12123                    of the block expression.)
     1804    12124        */
     1805    12125
     1806    12126    3   PLO_NAME: PROC (PT_LO_NAME) ALTRET;

  12126  1 003221   200044 741300       PLO_NAME     STX1  ! RET_CODE,,AUTO

     1807    12127
     1808    12128        %PARSE$OUT (NAME=PT_LO_NAME, STCLASS=PARAM);
     1809    12173
     1810    12174
     1811    12175    4   DCL PT_SYMBOL$ PTR;
     1812    12176    4   DCL BLOCK_DESC$ PTR;
     1813    12177    4   DCL NAME_NODE$ PTR;
     1814    12178    4   DCL LO_NAME_FILE_KEY$ PTR;
     1815    12179    4   DCL DOMAIN_FILE_KEY$ PTR;
     1816    12180    4   DCL INDX SBIN;
     1817    12181
     1818    12182
     1819    12183        %PARSE$SYM (NAME=PT$SYMBOL, STCLASS="BASED(PT_SYMBOL$)");
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:193  
     1820    12221        %VD$BLOCK_DESC (NAME=BLOCK$DESC, STCLASS="BASED(BLOCK_DESC$)");
     1821    12368        %VD$FILE_NODE (NAME=NAME$NODE, STCLASS="BASED(NAME_NODE$)");
     1822    12461        %VD$TEXTC (NAME=LO$NAME_FILE_KEY, STCLASS="BASED(LO_NAME_FILE_KEY$)");
     1823    12484        %VD$TEXTC (NAME=DOMAIN$FILE_KEY, STCLASS="BASED(DOMAIN_FILE_KEY$)");
     1824    12507        %VD$TEXTC;
     1825    12530
     1826    12531
     1827    12532
     1828    12533    4           PT_SYMBOL$ = PT_LO_NAME.SUBLK$ (0);

  12533  1 003222   200045 470500                    LDP0    @PT_LO_NAME,,AUTO
         1 003223   000003 236100                    LDQ     3,,PR0
         1 003224   200046 756100                    STQ     PT_SYMBOL$,,AUTO

     1829    12534    4           CALL VDE$PREAD_LO_NAME (PT$SYMBOL.TEXTC$->VD$TEXTC,

  12534  1 003225   200046 471500                    LDP1    PT_SYMBOL$,,AUTO
         1 003226   100003 473500                    LDP3    3,,PR1
         1 003227   200050 634500                    EPPR4   NAME_NODE$,,AUTO
         1 003230   200062 454500                    STP4    NEW_SELECT$+3,,AUTO
         1 003231   200047 635500                    EPPR5   BLOCK_DESC$,,AUTO
         1 003232   200061 455500                    STP5    NEW_SELECT$+2,,AUTO
         1 003233   200060 453500                    STP3    NEW_SELECT$+1,,AUTO
         1 003234   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003235   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 003236   000000 701000 xent               TSX1    VDE$PREAD_LO_NAME
         1 003237   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1830    12535    4             BLOCK_DESC$, NAME_NODE$)
     1831    12536    4             ALTRET (PREAD_LO_NAME_FAILED);
     1832    12537
     1833    12538                %GETKEY (KEY=BLOCK$DESC.FILE_KEY, PTR=LO_NAME_FILE_KEY$);

  12545  1 003240   200047 470500                    LDP0    BLOCK_DESC$,,AUTO
         1 003241   000001 720100                    LXL0    1,,PR0
         1 003242   000002 100003                    CMPX0   2,DU
         1 003243   003250 601000 1                  TNZ     s:12545+8
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:194  

  12545  1 003244   000002 471500                    LDP1    2,,PR0
         1 003245   100002 633500                    EPPR3   2,,PR1
         1 003246   200051 453500                    STP3    LO_NAME_FILE_KEY$,,AUTO
         1 003247   003253 710000 1                  TRA     s:12548

  12545  1 003250   200047 236100                    LDQ     BLOCK_DESC$,,AUTO
         1 003251   000002 036003                    ADLQ    2,DU
         1 003252   200051 756100                    STQ     LO_NAME_FILE_KEY$,,AUTO

     1834    12548    5           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;

  12548  1 003253   200006 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 003254   000000 106500                    CMPC    fill='000'O
         1 003255   100003 000124                    ADSC9   3,,PR1                   cn=0,n=84
         1 003256   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 003257   003274 601000 1                  TNZ     s:12569

     1835    12549                   %GETKEY (KEY=EDIT$BLOCK.FILE_KEY, PTR=DOMAIN_FILE_KEY$);

  12556  1 003260   200005 473500                    LDP3    EDIT_BLOCK$,,AUTO
         1 003261   300001 721100                    LXL1    1,,PR3
         1 003262   000002 101003                    CMPX1   2,DU
         1 003263   003270 601000 1                  TNZ     s:12556+8

  12556  1 003264   300002 474500                    LDP4    2,,PR3
         1 003265   400002 635500                    EPPR5   2,,PR4
         1 003266   200052 455500                    STP5    DOMAIN_FILE_KEY$,,AUTO
         1 003267   003306 710000 1                  TRA     s:12573

  12556  1 003270   200005 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 003271   000002 036003                    ADLQ    2,DU
         1 003272   200052 756100                    STQ     DOMAIN_FILE_KEY$,,AUTO

     1836    12559    5              END;

  12559  1 003273   003306 710000 1                  TRA     s:12573
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:195  

     1837    12560    5           ELSE DO;

     1838    12561                   %GETKEY (KEY=IT$BLOCK_EXPR.DOMAINN.FILE_KEY,
     1839    12562                   PTR=DOMAIN_FILE_KEY$);

  12569  1 003274   100004 721100                    LXL1    4,,PR1
         1 003275   000002 101003                    CMPX1   2,DU
         1 003276   003303 601000 1                  TNZ     s:12569+7

  12569  1 003277   100005 473500                    LDP3    5,,PR1
         1 003300   300002 634500                    EPPR4   2,,PR3
         1 003301   200052 454500                    STP4    DOMAIN_FILE_KEY$,,AUTO
         1 003302   003306 710000 1                  TRA     s:12573

  12569  1 003303   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 003304   000005 036003                    ADLQ    5,DU
         1 003305   200052 756100                    STQ     DOMAIN_FILE_KEY$,,AUTO

     1840    12572    5              END;

     1841    12573    4           IF LO$NAME_FILE_KEY.BYTES ~= DOMAIN$FILE_KEY.BYTES THEN

  12573  1 003306   200051 473500                    LDP3    LO_NAME_FILE_KEY$,,AUTO
         1 003307   300000 236100                    LDQ     0,,PR3
         1 003310   000033 772000                    QRL     27
         1 003311   200052 474500                    LDP4    DOMAIN_FILE_KEY$,,AUTO
         1 003312   000000 621006                    EAX1    0,QL
         1 003313   400000 236100                    LDQ     0,,PR4
         1 003314   000033 772000                    QRL     27
         1 003315   000000 622006                    EAX2    0,QL
         1 003316   040140 106540                    CMPC    fill='040'O
         1 003317   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 003320   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         1 003321   003434 601000 1                  TNZ     DOMAIN_OPAND_NOT_1ST_FAILURE

     1842    12574    4              GOTO DOMAIN_OPAND_NOT_1ST_FAILURE;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:196  
     1843    12575
     1844    12576    4           CALL VDG$OALLOC (%CLS_IT_OPERAND, T$)

  12576  1 003322   200016 635500                    EPPR5   T$,,AUTO
         1 003323   200061 455500                    STP5    NEW_SELECT$+2,,AUTO
         1 003324   000025 236000 2                  LDQ     21
         1 003325   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003326   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003327   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003330   000000 701000 xent               TSX1    VDG$OALLOC
         1 003331   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1845    12577    4             ALTRET (OALLOC_FAILED);
     1846    12578    4           IT_OPERAND$ = T$;

  12578  1 003332   200016 236100                    LDQ     T$,,AUTO
         1 003333   200023 756100                    STQ     IT_OPERAND$,,AUTO

     1847    12579    4           IT$OPERAND.OPTIONS = EVAL_OPTIONS;

  12579  1 003334   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 003335   200024 237100                    LDAQ    EVAL_OPTIONS,,AUTO
         1 003336   000004 755100                    STA     4,,PR0
         1 003337   000005 756100                    STQ     5,,PR0

     1848    12580
     1849    12581    4           IF NAME$NODE.ACCESS (%NAC_WRITE)

  12581  1 003340   200050 471500                    LDP1    NAME_NODE$,,AUTO
         1 003341   100003 236100                    LDQ     3,,PR1
         1 003342   100000 316003                    CANQ    32768,DU
         1 003343   003353 601000 1                  TNZ     s:12583
         1 003344   200046 473500                    LDP3    PT_SYMBOL$,,AUTO
         1 003345   300004 236100                    LDQ     4,,PR3
         1 003346   000033 772000                    QRL     27
         1 003347   300004 236100                    LDQ     4,,PR3
         1 003350   000777 376003                    ANQ     511,DU
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:197  
         1 003351   000044 116003                    CMPQ    36,DU
         1 003352   003420 601000 1                  TNZ     s:12595

     1850    12582    5             OR SUBSTR(PT$SYMBOL.TEXT, 0, 1) = %CHR_DOLLAR THEN DO;

     1851    12583    5              IT$OPERAND.CODE# = %OPAND_LO_NAME;

  12583  1 003353   000002 220003                    LDX0    2,DU
         1 003354   000003 740100                    STX0    3,,PR0

     1852    12584    5              IT$OPERAND.KEY.TYPE# = %KT_STRING;

  12584  1 003355   000006 740100                    STX0    6,,PR0

     1853    12585    5              IT$OPERAND.KEY.REP# = %REP_REMOTE;

  12585  1 003356   000006 440100                    SXL0    6,,PR0

     1854    12586    5              CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, IT$OPERAND.KEY.V$,

  12586  1 003357   200046 471500                    LDP1    PT_SYMBOL$,,AUTO
         1 003360   100004 236100                    LDQ     4,,PR1
         1 003361   000033 772000                    QRL     27
         1 003362   000014 036007                    ADLQ    12,DL
         1 003363   000002 772000                    QRL     2
         1 003364   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003365   200060 633500                    EPPR3   NEW_SELECT$+1,,AUTO
         1 003366   200063 453500                    STP3    NEW_SELECT$+4,,AUTO
         1 003367   200023 236100                    LDQ     IT_OPERAND$,,AUTO
         1 003370   000007 036003                    ADLQ    7,DU
         1 003371   200062 756100                    STQ     NEW_SELECT$+3,,AUTO
         1 003372   000037 236000 2                  LDQ     31
         1 003373   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 003374   200061 630500                    EPPR0   NEW_SELECT$+2,,AUTO
         1 003375   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 003376   000000 701000 xent               TSX1    VDG$OALLOC
         1 003377   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:198  

     1855    12587    5                (LENGTHC(VD$STRING_HEADER) + PT$SYMBOL.COUNT + %NB_PER_WORD-1) /
     1856    12588    5                %NB_PER_WORD)
     1857    12589    5                ALTRET (OALLOC_FAILED);
     1858    12590    5              IT$OPERAND.KEY.V$->VD$TEXTC_REMOTE.LENGTH# = PT$SYMBOL.COUNT;

  12590  1 003400   200023 470500                    LDP0    IT_OPERAND$,,AUTO
         1 003401   000007 471500                    LDP1    7,,PR0
         1 003402   200046 473500                    LDP3    PT_SYMBOL$,,AUTO
         1 003403   300004 236100                    LDQ     4,,PR3
         1 003404   100002 552140                    STBQ    2,'40'O,PR1

     1859    12591    5              IT$OPERAND.KEY.V$->VD$TEXTC_REMOTE.BYTES = PT$SYMBOL.TEXT;

  12591  1 003405   000007 471500                    LDP1    7,,PR0
         1 003406   100002 236100                    LDQ     2,,PR1
         1 003407   000033 772000                    QRL     27
         1 003410   000000 620006                    EAX0    0,QL
         1 003411   300004 236100                    LDQ     4,,PR3
         1 003412   000033 772000                    QRL     27
         1 003413   000000 621006                    EAX1    0,QL
         1 003414   040140 100540                    MLR     fill='040'O
         1 003415   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
         1 003416   100002 200010                    ADSC9   2,,PR1                   cn=1,n=*X0

     1860    12592    5              END;

  12592  1 003417   003432 710000 1                  TRA     s:12600

     1861    12593    5           ELSE DO;

     1862    12594                   /* Name refers to value at start of command:  save current value */
     1863    12595    5              IT$OPERAND.CODE# = %OPAND_BLOCK_DESC;

  12595  1 003420   000005 220003                    LDX0    5,DU
         1 003421   000003 740100                    STX0    3,,PR0

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:199  
     1864    12596    5              CALL VDG$OCOPY (BLOCK$DESC, IT$OPERAND.PARAM$)

  12596  1 003422   200023 236100                    LDQ     IT_OPERAND$,,AUTO
         1 003423   000010 036003                    ADLQ    8,DU
         1 003424   200047 235100                    LDA     BLOCK_DESC$,,AUTO
         1 003425   200060 757100                    STAQ    NEW_SELECT$+1,,AUTO
         1 003426   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003427   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003430   000000 701000 xent               TSX1    VDG$OCOPY
         1 003431   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1865    12597    5                ALTRET (OCOPY_FAILED);
     1866    12598    5              END;

     1867    12599
     1868    12600    4           RETURN;

  12600  1 003432   200044 221300                    LDX1  ! RET_CODE,,AUTO
         1 003433   000001 702211                    TSX2  ! 1,X1

     1869    12601
     1870    12602
     1871    12603
     1872    12604    4   DOMAIN_OPAND_NOT_1ST_FAILURE:
     1873    12605
     1874    12606    4           INDX = 0;

  12606  1 003434   200053 450100       DOMAIN_OPAN* STZ     INDX,,AUTO

     1875    12607    5           DO WHILE INDX < %(MX_CMD_OBJECTS-1)

  12607  1 003435   003437 710000 1                  TRA     s:12610

     1876    12608    5             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     1877    12609    5              INDX = INDX + 1;

  12609  1 003436   200053 054100                    AOS     INDX,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:200  

     1878    12610    5              END;

  12610  1 003437   200053 235100                    LDA     INDX,,AUTO
         1 003440   000061 115007                    CMPA    49,DL
         1 003441   003445 605000 1                  TPL     s:12611
         1 003442   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         1 003443   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003444   003436 601000 1                  TNZ     s:12609

     1879    12611    4           IF INDX >= %MX_CMD_OBJECTS - 1 THEN

  12611  1 003445   200053 235100                    LDA     INDX,,AUTO
         1 003446   000061 115007                    CMPA    49,DL
         1 003447   003453 604000 1                  TMI     s:12613

     1880    12612    4              CALL VDG$ESCREECH;

  12612  1 003450   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 003451   000000 701000 xent               TSX1    VDG$ESCREECH
         1 003452   000000 011000                    NOP     0

     1881    12613    4           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, T$,

  12613  1 003453   200046 470500                    LDP0    PT_SYMBOL$,,AUTO
         1 003454   000004 236100                    LDQ     4,,PR0
         1 003455   000033 772000                    QRL     27
         1 003456   000014 036007                    ADLQ    12,DL
         1 003457   000002 772000                    QRL     2
         1 003460   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003461   200060 631500                    EPPR1   NEW_SELECT$+1,,AUTO
         1 003462   200063 451500                    STP1    NEW_SELECT$+4,,AUTO
         1 003463   200016 633500                    EPPR3   T$,,AUTO
         1 003464   200062 453500                    STP3    NEW_SELECT$+3,,AUTO
         1 003465   000037 236000 2                  LDQ     31
         1 003466   200061 756100                    STQ     NEW_SELECT$+2,,AUTO
         1 003467   200061 630500                    EPPR0   NEW_SELECT$+2,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:201  
         1 003470   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 003471   000000 701000 xent               TSX1    VDG$OALLOC
         1 003472   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1882    12614    4             (LENGTHC(VD$STRING_HEADER) + PT$SYMBOL.COUNT + %NB_PER_WORD-1) /
     1883    12615    4             %NB_PER_WORD)
     1884    12616    4             ALTRET (OALLOC_FAILED);
     1885    12617    4           VD_CMD_OBJECTS$ (INDX) = T$;

  12617  1 003473   200016 236100                    LDQ     T$,,AUTO
         1 003474   200053 720100                    LXL0    INDX,,AUTO
         1 003475   000000 756010 xsym               STQ     VD_CMD_OBJECTS$,X0

     1886    12618    4           VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.LENGTH# = PT$SYMBOL.COUNT;

  12618  1 003476   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 003477   200046 471500                    LDP1    PT_SYMBOL$,,AUTO
         1 003500   100004 236100                    LDQ     4,,PR1
         1 003501   000002 552140                    STBQ    2,'40'O,PR0

     1887    12619    4           VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.BYTES = PT$SYMBOL.TEXT;

  12619  1 003502   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 003503   000002 236100                    LDQ     2,,PR0
         1 003504   000033 772000                    QRL     27
         1 003505   000000 621006                    EAX1    0,QL
         1 003506   100004 236100                    LDQ     4,,PR1
         1 003507   000033 772000                    QRL     27
         1 003510   000000 622006                    EAX2    0,QL
         1 003511   040140 100540                    MLR     fill='040'O
         1 003512   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         1 003513   000002 200011                    ADSC9   2,,PR0                   cn=1,n=*X1

     1888    12620    4           CALL VDG$ERRMSG (%E$DOMAIN_OPAND_NOT_1ST,

  12620  1 003514   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 003515   000002 633500                    EPPR3   2,,PR0
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:202  
         1 003516   200061 453500                    STP3    NEW_SELECT$+2,,AUTO
         1 003517   000041 236000 2                  LDQ     33
         1 003520   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003521   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003522   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003523   000000 701000 xent               TSX1    VDG$ERRMSG
         1 003524   003531 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1889    12621    5             VD_CMD_OBJECTS$(INDX)->VD$TEXTC_REMOTE.LENGTH#) WHENRETURN DO;

     1890    12622    5              LAST$ERR.CMDLINE_INDEX# = PT_LO_NAME.CPOS;

  12622  1 003525   200045 470500                    LDP0    @PT_LO_NAME,,AUTO
         1 003526   000002 720100                    LXL0    2,,PR0
         1 003527   000032 471400 xsym               LDP1    VD_6E+26
         1 003530   100003 440100                    SXL0    3,,PR1

     1891    12623    5              END;

  12619  1 003531                       PREAD_LO_NA* null
  12619  1 003531                       OCOPY_FAILED null
  12619  1 003531                       OALLOC_FAIL* null
     1892    12624
     1893    12625
     1894    12626    4   PREAD_LO_NAME_FAILED: ;
     1895    12627    4   OCOPY_FAILED: ;
     1896    12628    4   OALLOC_FAILED: ;
     1897    12629    4           ALTRETURN;

  12629  1 003531   200044 221300                    LDX1  ! RET_CODE,,AUTO
         1 003532   000000 702211                    TSX2  ! 0,X1

     1898    12630
     1899    12631
     1900    12632    4   END PLO_NAME;
     1901    12633
     1902    12634                %BOX (TITLE=ABS_IT_OPERAND);
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:203  

             12646    4   /***************************************************************************
             12648    4    *                                                                         *
             12652    4            *                               ABS_IT_OPERAND                           *
             12654    4            *                                                                        *
             12656    4          ***************************************************************************/

     1903    12660
     1904    12661        /*I*** NAME: ABS_IT_OPERAND
     1905    12662            PARAMETERS:
     1906    12663                None.
     1907    12664            INPUT:
     1908    12665                IT$BLOCK_EXPR - The IT_BLOCK_EXPR root node for the InTree.
     1909    12666                LAST_SELECT$, LAST$SELECT - (Ptr to) last IT_SELECT node in
     1910    12667                    InTree (it must exist).
     1911    12668                LAST_ADJUST$, LAST$ADJUST - (Ptr to) last child of LAST$SELECT
     1912    12669                    (it must exist).
     1913    12670                LAST_MOVEMENT$, LAST$MOVEMENT - (Ptr to) last child of
     1914    12671                    LAST$ADJUST; NIL if none.
     1915    12672                IT$OPERAND - The movement-level node for the absolute movement
     1916    12673                    request.  It must not yet be linked to the InTree.
     1917    12674                    It must represent an absolute movement operand (a node-key,
     1918    12675                    or a LOCATION-name or block descriptor whose domain matches
     1919    12676                    the current domain for the InTree).
     1920    12677            OUTPUT:
     1921    12678                The InTree will be altered.
     1922    12679                LAST_MOVEMENT$ and SAVED_LAST_MOVEMENT$ will be changed
     1923    12680                    to reflect the modified InTree.
     1924    12681            DESCRIPTION:
     1925    12682                Free the movement-level nodes which are the children of
     1926    12683                    LAST$ADJUST.
     1927    12684                    This discards any previous absolute or relative movement
     1928    12685                    operands for this adjustment of this SELECT clause.
     1929    12686                    However, if:
     1930    12687                    o IT$OPERAND doesn't include a domain spec (ie, is a key
     1931    12688                        spec only);
     1932    12689                    o AND there is only one IT_SELECT node and only one
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:204  
     1933    12690                        IT_ADJUST node in the entire InTree;
     1934    12691                    o AND the first IT$OPERAND node in the InTree is an explicit
     1935    12692                        domain spec (ie, file, block descriptor, or LOCATION-name);
     1936    12693                    then don't free that first IT$OPERAND node in the InTree.
     1937    12694                    This preserves any domain-spec info given for the block
     1938    12695                    expression.
     1939    12696        */
     1940    12697
     1941    12698    3   ABS_IT_OPERAND: PROC ALTRET;

  12698  1 003533   200044 741300       ABS_IT_OPER* STX1  ! RET_CODE,,AUTO

     1942    12699
     1943    12700
     1944    12701    4   DCL CURR_MOVE$ PTR;
     1945    12702
     1946    12703
     1947    12704        %VD$IT_OPERAND (NAME=CURR$MOVE, STCLASS="BASED(CURR_MOVE$)");
     1948    12770
     1949    12771
     1950    12772
     1951    12773    4           IF IT$BLOCK_EXPR.SELECTS$ ~= LAST_SELECT$ THEN

  12773  1 003534   200006 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 003535   000035 236100                    LDQ     29,,PR0
         1 003536   200007 116100                    CMPQ    LAST_SELECT$,,AUTO
         1 003537   003621 601000 1                  TNZ     ABS_SEL_NOT_1ST_FAILURE

     1952    12774    4              GOTO ABS_SEL_NOT_1ST_FAILURE;
     1953    12775    4           IF IT$OPERAND.CODE# = %OPAND_NODE

  12775  1 003540   200023 471500                    LDP1    IT_OPERAND$,,AUTO
         1 003541   100003 220100                    LDX0    3,,PR1
         1 003542   000006 100003                    CMPX0   6,DU
         1 003543   003603 601000 1                  TNZ     PRUNE_ALL_MOVEMENTS
         1 003544   200007 473500                    LDP3    LAST_SELECT$,,AUTO
         1 003545   300004 236100                    LDQ     4,,PR3
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:205  
         1 003546   200010 116100                    CMPQ    LAST_ADJUST$,,AUTO
         1 003547   003603 601000 1                  TNZ     PRUNE_ALL_MOVEMENTS
         1 003550   200010 474500                    LDP4    LAST_ADJUST$,,AUTO
         1 003551   400004 236100                    LDQ     4,,PR4
         1 003552   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003553   003603 600000 1                  TZE     PRUNE_ALL_MOVEMENTS

     1954    12776    4             AND LAST$SELECT.ADJUSTS$ = LAST_ADJUST$
     1955    12777    5             AND LAST$ADJUST.MOVEMENTS$ ~= ADDR(NIL) THEN DO;

     1956    12778    5              CURR_MOVE$ = LAST$ADJUST.MOVEMENTS$;

  12778  1 003554   200045 756100                    STQ     CURR_MOVE$,,AUTO

     1957    12779    5              IF CURR$MOVE.CODE# = %OPAND_FILE

  12779  1 003555   200045 475500                    LDP5    CURR_MOVE$,,AUTO
         1 003556   500003 222100                    LDX2    3,,PR5
         1 003557   000001 102003                    CMPX2   1,DU
         1 003560   003565 600000 1                  TZE     FIRST_MOVEMENT_IS_DOMAIN
         1 003561   000002 102003                    CMPX2   2,DU
         1 003562   003565 600000 1                  TZE     FIRST_MOVEMENT_IS_DOMAIN
         1 003563   000005 102003                    CMPX2   5,DU
         1 003564   003617 601000 1                  TNZ     s:12798

     1958    12780    5                OR CURR$MOVE.CODE# = %OPAND_LO_NAME
     1959    12781    5                OR CURR$MOVE.CODE# = %OPAND_BLOCK_DESC THEN
     1960    12782    6   FIRST_MOVEMENT_IS_DOMAIN: DO;

  12782  1 003565                       FIRST_MOVEM* null
     1961    12783    6                 CALL VDG$OFREE (CURR$MOVE.FLINK$->VD$IT_OPERAND)

  12783  1 003565   500002 476500                    LDP6    2,,PR5
         1 003566   200060 456500                    STP6    NEW_SELECT$+1,,AUTO
         1 003567   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003570   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003571   000000 701000 xent               TSX1    VDG$OFREE
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:206  
         1 003572   003625 702000 1                  TSX2    OFREE_FAILED

     1962    12784    6                   ALTRET (OFREE_FAILED);
     1963    12785    6                 CURR$MOVE.FLINK$ = ADDR(NIL);

  12785  1 003573   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 003574   200045 470500                    LDP0    CURR_MOVE$,,AUTO
         1 003575   000002 756100                    STQ     2,,PR0

     1964    12786    6                 LAST$ADJUST.MOVEMENTS_TAIL$ = CURR_MOVE$;

  12786  1 003576   200045 236100                    LDQ     CURR_MOVE$,,AUTO
         1 003577   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 003600   100005 756100                    STQ     5,,PR1

     1965    12787    6                 LAST_MOVEMENT$ = CURR_MOVE$;

  12787  1 003601   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     1966    12788    6                 END FIRST_MOVEMENT_IS_DOMAIN;

     1967    12789    5              END;

  12789  1 003602   003617 710000 1                  TRA     s:12798

     1968    12790    4           ELSE
     1969    12791    5   PRUNE_ALL_MOVEMENTS: DO;

  12791  1 003603                       PRUNE_ALL_M* null
     1970    12792    5              CALL VDG$OFREE (LAST$ADJUST.MOVEMENTS$ -> VD$IT_OPERAND)

  12792  1 003603   200010 473500                    LDP3    LAST_ADJUST$,,AUTO
         1 003604   300004 474500                    LDP4    4,,PR3
         1 003605   200060 454500                    STP4    NEW_SELECT$+1,,AUTO
         1 003606   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003607   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003610   000000 701000 xent               TSX1    VDG$OFREE
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:207  
         1 003611   003625 702000 1                  TSX2    OFREE_FAILED

     1971    12793    5                ALTRET (OFREE_FAILED);
     1972    12794    5              LAST$ADJUST.MOVEMENTS$ = ADDR(NIL);

  12794  1 003612   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 003613   200010 470500                    LDP0    LAST_ADJUST$,,AUTO
         1 003614   000004 756100                    STQ     4,,PR0

     1973    12795    5              LAST$ADJUST.MOVEMENTS_TAIL$ = ADDR(NIL);

  12795  1 003615   000005 756100                    STQ     5,,PR0

     1974    12796    5              LAST_MOVEMENT$ = ADDR(NIL);

  12796  1 003616   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     1975    12797    5              END PRUNE_ALL_MOVEMENTS;

     1976    12798    4           RETURN;

  12798  1 003617   200044 221300                    LDX1  ! RET_CODE,,AUTO
         1 003620   000001 702211                    TSX2  ! 1,X1

     1977    12799
     1978    12800
     1979    12801
     1980    12802    4   ABS_SEL_NOT_1ST_FAILURE:
     1981    12803    4           CALL VDG$ERRMSG (%E$ABS_SEL_NOT_1ST);

  12803  1 003621   000043 630400 2     ABS_SEL_NOT* EPPR0   35
         1 003622   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 003623   000000 701000 xent               TSX1    VDG$ERRMSG
         1 003624   000000 011000                    NOP     0

  12792  1 003625                       OFREE_FAILED null
     1982    12804
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:208  
     1983    12805
     1984    12806    4   OFREE_FAILED: ;
     1985    12807    4           ALTRETURN;

  12807  1 003625   200044 221300                    LDX1  ! RET_CODE,,AUTO
         1 003626   000000 702211                    TSX2  ! 0,X1

     1986    12808
     1987    12809    4   END ABS_IT_OPERAND;
     1988    12810
     1989    12811    3   END MOVEMENT_OPERAND;
     1990    12812
     1991    12813    2   END MOVEMENTS;
     1992    12814
     1993    12815                %BOX (TITLE=GUAR_LAST_ADJ, PAGE=YES);
             12823    2
             12827    2   /***************************************************************************
             12829    2    *                                                                         *
             12833    2            *                               GUAR_LAST_ADJ                            *
             12835    2            *                                                                        *
             12837    2          ***************************************************************************/

     1994    12841
     1995    12842        /*I* NAME: GUAR_LAST_ADJUST
     1996    12843            PARAMETERS:
     1997    12844                None.
     1998    12845            INPUT:
     1999    12846                IT$BLOCK_EXPR - Root VD$IT_BLOCK_EXPR node of the InTree.  It
     2000    12847                    must exist.
     2001    12848                LAST_SELECT$, LAST$SELECT - (Ptr to) last VD$IT_SELECT node in
     2002    12849                    the InTree.  If none yet, LAST_SELECT$ must be NIL.
     2003    12850                LAST_ADJUST$, LAST$ADJUST - (Ptr to) last VD$IT_ADJUST node in
     2004    12851                    the InTree.  If none yet, LAST_ADJUST$ must be NIL.
     2005    12852            OUTPUT:
     2006    12853                LAST_SELECT$ will contain a ptr to the last IT_SELECT node
     2007    12854                    in the InTree.  If there was none before, there will be
     2008    12855                    one now, linked to the InTree as the first IT_SELECT node.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:209  
     2009    12856                LAST_ADJUST$ will contain a ptr to the last IT_ADJUST child of
     2010    12857                    the last IT_SELECT node in the InTree.  If there was
     2011    12858                    none before, there will be one now, linked to the InTree as
     2012    12859                    the first IT_ADJUST child of the current last IT_SELECT node.
     2013    12860        *??*         If we had to create a new IT_SELECT node, then LAST$ADJUST
     2014    12861        *??*         will have a copy of HERE's current value as its first
     2015    12862        *??*         IT_OPERAND node.
     2016    12863            DESCRIPTION:
     2017    12864                Guarantee that an IT_SELECT node exists in the InTree.
     2018    12865
     2019    12866                If the last IT_SELECT node in the InTree has no IT_ADJUST
     2020    12867                children, allocate an IT_ADJUST node.
     2021    12868        */
     2022    12869
     2023    12870    1   GUAR_LAST_ADJUST: PROC ALTRET;

  12870  1 003627   200052 741300       GUAR_LAST_A* STX1  ! DOMAIN_FILE_KEY$,,AUTO

     2024    12871
     2025    12872
     2026    12873
     2027    12874    2           CALL GUAR_LAST_SELECT

  12874  1 003630   003643 701000 1                  TSX1    GUAR_LAST_SELECT
         1 003631   003641 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

     2028    12875    2             ALTRET (GUAR_LAST_SELECT_FAILED);
     2029    12876
     2030    12877    3           IF LAST_ADJUST$ = ADDR(NIL) THEN DO;

  12877  1 003632   200010 236100                    LDQ     LAST_ADJUST$,,AUTO
         1 003633   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003634   003637 601000 1                  TNZ     s:12882

     2031    12878    3              CALL ALLOC_IT_ADJUST

  12878  1 003635   003660 701000 1                  TSX1    ALLOC_IT_ADJUST
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:210  
         1 003636   003641 702000 1                  TSX2    GUAR_LAST_SELECT_FAILED

     2032    12879    3                ALTRET (ALLOC_IT_ADJUST_FAILED);
     2033    12880    3              END;

     2034    12881
     2035    12882    2           RETURN;

  12882  1 003637   200052 221300                    LDX1  ! DOMAIN_FILE_KEY$,,AUTO
         1 003640   000001 702211                    TSX2  ! 1,X1

  12877  1 003641                       GUAR_LAST_S* null
     2036    12883
     2037    12884
     2038    12885
     2039    12886    2   GUAR_LAST_SELECT_FAILED: ;
     2040    12887    2   ALLOC_IT_ADJUST_FAILED:
     2041    12888    2           ALTRETURN;

  12888  1 003641   200052 221300       ALLOC_IT_AD* LDX1  ! DOMAIN_FILE_KEY$,,AUTO
         1 003642   000000 702211                    TSX2  ! 0,X1

     2042    12889
     2043    12890    2   END GUAR_LAST_ADJUST;
     2044    12891
     2045    12892
     2046    12893                %BOX (TITLE=GUAR_LAST_SELECT, PAGE=YES);
             12901    2
             12905    2   /***************************************************************************
             12907    2    *                                                                         *
             12911    2            *                              GUAR_LAST_SELECT                          *
             12913    2            *                                                                        *
             12915    2          ***************************************************************************/

     2047    12919
     2048    12920        /*I* NAME: GUAR_LAST_SELECT
     2049    12921            PARAMETERS:
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:211  
     2050    12922                None.
     2051    12923            INPUT:
     2052    12924                IT$BLOCK_EXPR - Root VD$IT_BLOCK_EXPR node of the InTree.  It
     2053    12925                    must exist.
     2054    12926                LAST_SELECT$, LAST$SELECT - (Ptr to) last VD$IT_SELECT node in
     2055    12927                    the InTree.  If none yet, LAST_SELECT$ must be NIL.
     2056    12928            OUTPUT:
     2057    12929                LAST_SELECT$ will contain a ptr to the last IT_SELECT node
     2058    12930                    in the InTree.  If there was none before, there will be
     2059    12931                    one now, linked to the InTree as the first IT_SELECT node,
     2060    12932                    with a repeat count of 1.
     2061    12933                LAST_ADJUST$, LAST_MOVEMENT$ - If we had to create a new
     2062    12934                    IT_SELECT node, these pointers will be NIL.
     2063    12935        *??*         If we had to create a new IT_SELECT node, then LAST$ADJUST
     2064    12936        *??*         will have a copy of HERE's current value as its first
     2065    12937        *??*         IT_OPERAND node, which will be LAST$MOVEMENT.
     2066    12938            DESCRIPTION:
     2067    12939                If there is no last IT_SELECT node in the Intree, allocate one.
     2068    12940        *??*     Allocate an IT_ADJUST and IT_OPERAND for it which point
     2069    12941        *??*     to a copy of HERE's current value.
     2070    12942        */
     2071    12943
     2072    12944    1   GUAR_LAST_SELECT: PROC ALTRET;

  12944  1 003643   200054 741300       GUAR_LAST_S* STX1  ! INDX+1,,AUTO

     2073    12945
     2074    12946
     2075    12947
     2076    12948    3           IF LAST_SELECT$ = ADDR(NIL) THEN DO;

  12948  1 003644   200007 236100                    LDQ     LAST_SELECT$,,AUTO
         1 003645   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003646   003654 601000 1                  TNZ     s:12956

     2077    12949    3              CALL ALLOC_IT_SELECT

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:212  
  12949  1 003647   003721 701000 1                  TSX1    ALLOC_IT_SELECT
         1 003650   003656 702000 1                  TSX2    ALLOC_IT_SELECT_FAILED

     2078    12950    3                ALTRET (ALLOC_IT_SELECT_FAILED);
     2079    12951    3              LAST$SELECT.RPT_COUNT# = 1;

  12951  1 003651   000001 220003                    LDX0    1,DU
         1 003652   200007 470500                    LDP0    LAST_SELECT$,,AUTO
         1 003653   000003 440100                    SXL0    3,,PR0

     2080    12952        /*??*         CALL ATTACH_HERE_TO_SELECT (LAST_SELECT$->LAST$SELECT) */
     2081    12953        /*??*           ALTRET (ATTACH_HERE_TO_SELECT_FAILED);               */
     2082    12954    3              END;

     2083    12955
     2084    12956    2           RETURN;

  12956  1 003654   200054 221300                    LDX1  ! INDX+1,,AUTO
         1 003655   000001 702211                    TSX2  ! 1,X1

  12948  1 003656                       ALLOC_IT_SE* null
     2085    12957
     2086    12958
     2087    12959
     2088    12960    2   ALLOC_IT_SELECT_FAILED: ;
     2089    12961        /* ATTACH_HERE_TO_SELECT_FAILED: ;  */
     2090    12962    2           ALTRETURN;

  12962  1 003656   200054 221300                    LDX1  ! INDX+1,,AUTO
         1 003657   000000 702211                    TSX2  ! 0,X1

     2091    12963
     2092    12964    2   END GUAR_LAST_SELECT;
     2093    12965
     2094    12966        %BOX (TITLE=ALLOC_IT_ADJUST, PAGE=YES);
             12974    2
             12978    2   /***************************************************************************
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:213  
             12980    2    *                                                                         *
             12984    2            *                              ALLOC_IT_ADJUST                           *
             12986    2            *                                                                        *
             12988    2          ***************************************************************************/

     2095    12992
     2096    12993        /*I* NAME: ALLOC_IT_ADJUST
     2097    12994            PARAMETERS:
     2098    12995                None.
     2099    12996            INPUT:
     2100    12997                LAST$SELECT - The IT_SELECT node for which this IT_ADJUST
     2101    12998                    node is to be allocated.
     2102    12999                LAST_ADJUST$ - Ptr to current last IT_ADJUST node in the
     2103    13000                    InTree.  If none, LAST_ADJUST$ must be NIL.
     2104    13001            OUTPUT:
     2105    13002                LAST_ADJUST$ will contain a pointer to the newly-allocated
     2106    13003                    and initialized IT_ADJUST node.
     2107    13004                LAST_MOVEMENT$ will be NIL'd.
     2108    13005            DESCRIPTION:
     2109    13006                Allocate an IT_ADJUST node.  Link it as either
     2110    13007                the sibling of the LAST_ADJUST$, or if that's NIL,
     2111    13008                as the child of IT$SELECT.
     2112    13009        */
     2113    13010
     2114    13011    1   ALLOC_IT_ADJUST: PROC ALTRET;

  13011  1 003660   200054 741300       ALLOC_IT_AD* STX1  ! INDX+1,,AUTO

     2115    13012
     2116    13013
     2117    13014    2   DCL NEW_ADJUST$ PTR;
     2118    13015
     2119    13016
     2120    13017        %VD$IT_ADJUST (NAME=NEW$ADJUST, STCLASS="BASED(NEW_ADJUST$)");
     2121    13054
     2122    13055
     2123    13056
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:214  
     2124    13057    2           CALL VDG$OALLOC (%CLS_IT_ADJUST, T$)

  13057  1 003661   200016 630500                    EPPR0   T$,,AUTO
         1 003662   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 003663   000045 236000 2                  LDQ     37
         1 003664   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003665   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003666   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003667   000000 701000 xent               TSX1    VDG$OALLOC
         1 003670   003717 702000 1                  TSX2    OALLOC_FAILED

     2125    13058    2             ALTRET (OALLOC_FAILED);
     2126    13059    2           NEW_ADJUST$ = T$;

  13059  1 003671   200016 236100                    LDQ     T$,,AUTO
         1 003672   200055 756100                    STQ     NEW_ADJUST$,,AUTO

     2127    13060
     2128    13061    2           NEW$ADJUST.PARENT$ = LAST_SELECT$;

  13061  1 003673   200007 236100                    LDQ     LAST_SELECT$,,AUTO
         1 003674   200055 470500                    LDP0    NEW_ADJUST$,,AUTO
         1 003675   000001 756100                    STQ     1,,PR0

     2129    13062    2           IF LAST_ADJUST$ = ADDR(NIL) THEN

  13062  1 003676   200010 236100                    LDQ     LAST_ADJUST$,,AUTO
         1 003677   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003700   003705 601000 1                  TNZ     s:13065

     2130    13063    2              LAST$SELECT.ADJUSTS$ = NEW_ADJUST$;

  13063  1 003701   200055 236100                    LDQ     NEW_ADJUST$,,AUTO
         1 003702   200007 471500                    LDP1    LAST_SELECT$,,AUTO
         1 003703   100004 756100                    STQ     4,,PR1
         1 003704   003710 710000 1                  TRA     s:13066

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:215  
     2131    13064    2           ELSE
     2132    13065    2              LAST$ADJUST.FLINK$ = NEW_ADJUST$;

  13065  1 003705   200055 236100                    LDQ     NEW_ADJUST$,,AUTO
         1 003706   200010 471500                    LDP1    LAST_ADJUST$,,AUTO
         1 003707   100002 756100                    STQ     2,,PR1

     2133    13066    2           LAST$SELECT.ADJUSTS_TAIL$ = NEW_ADJUST$;

  13066  1 003710   200007 471500                    LDP1    LAST_SELECT$,,AUTO
         1 003711   100005 756100                    STQ     5,,PR1

     2134    13067    2           LAST_ADJUST$ = NEW_ADJUST$;

  13067  1 003712   200010 756100                    STQ     LAST_ADJUST$,,AUTO

     2135    13068    2           LAST_MOVEMENT$ = ADDR(NIL);

  13068  1 003713   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 003714   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     2136    13069
     2137    13070    2           RETURN;

  13070  1 003715   200054 221300                    LDX1  ! INDX+1,,AUTO
         1 003716   000001 702211                    TSX2  ! 1,X1

     2138    13071
     2139    13072
     2140    13073    2   OALLOC_FAILED:
     2141    13074    2           ALTRETURN;

  13074  1 003717   200054 221300       OALLOC_FAIL* LDX1  ! INDX+1,,AUTO
         1 003720   000000 702211                    TSX2  ! 0,X1

     2142    13075
     2143    13076    2   END ALLOC_IT_ADJUST;
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:216  
     2144    13077
     2145    13078        %BOX (TITLE=ALLOC_IT_SELECT, PAGE=YES);
             13086    2
             13090    2   /***************************************************************************
             13092    2    *                                                                         *
             13096    2            *                              ALLOC_IT_SELECT                           *
             13098    2            *                                                                        *
             13100    2          ***************************************************************************/

     2146    13104
     2147    13105        /*I* NAME: ALLOC_IT_SELECT
     2148    13106            PARAMETERS:
     2149    13107                None.
     2150    13108            INPUT:
     2151    13109                IT$BLOCK_EXPR - The IT_BLOCK_EXPR node for which this IT_SELECT
     2152    13110                    node is to be allocated.
     2153    13111                LAST_SELECT$ - Ptr to current last IT_SELECT node in the
     2154    13112                    InTree.  If none, LAST_SELECT$ must be NIL.
     2155    13113            OUTPUT:
     2156    13114                LAST_SELECT$ will contain a pointer to the newly-allocated
     2157    13115                    and initialized IT_SELECT node.
     2158    13116                LAST_ADJUST$ and LAST_MOVEMENT$ will be NIL'd.
     2159    13117            DESCRIPTION:
     2160    13118                Allocate an IT_SELECT node.  Link it as either
     2161    13119                the sibling of LAST_SELECT$, or if that's NIL,
     2162    13120                as the child of IT$BLOCK_EXPR.
     2163    13121        */
     2164    13122
     2165    13123    1   ALLOC_IT_SELECT: PROC ALTRET;

  13123  1 003721   200056 741300       ALLOC_IT_SE* STX1  ! NEW_ADJUST$+1,,AUTO

     2166    13124
     2167    13125
     2168    13126    2   DCL NEW_SELECT$ PTR;
     2169    13127
     2170    13128
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:217  
     2171    13129        %VD$IT_SELECT (NAME=NEW$SELECT, STCLASS="BASED(NEW_SELECT$)");
     2172    13166
     2173    13167
     2174    13168
     2175    13169    2           CALL VDG$OALLOC (%CLS_IT_SELECT, T$)

  13169  1 003722   200016 630500                    EPPR0   T$,,AUTO
         1 003723   200061 450500                    STP0    NEW_SELECT$+2,,AUTO
         1 003724   000047 236000 2                  LDQ     39
         1 003725   200060 756100                    STQ     NEW_SELECT$+1,,AUTO
         1 003726   200060 630500                    EPPR0   NEW_SELECT$+1,,AUTO
         1 003727   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 003730   000000 701000 xent               TSX1    VDG$OALLOC
         1 003731   003761 702000 1                  TSX2    OALLOC_FAILED

     2176    13170    2             ALTRET (OALLOC_FAILED);
     2177    13171    2           NEW_SELECT$ = T$;

  13171  1 003732   200016 236100                    LDQ     T$,,AUTO
         1 003733   200057 756100                    STQ     NEW_SELECT$,,AUTO

     2178    13172
     2179    13173    2           NEW$SELECT.PARENT$ = IT_BLOCK_EXPR$;

  13173  1 003734   200006 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 003735   200057 470500                    LDP0    NEW_SELECT$,,AUTO
         1 003736   000001 756100                    STQ     1,,PR0

     2180    13174    2           IF LAST_SELECT$ = ADDR(NIL) THEN

  13174  1 003737   200007 236100                    LDQ     LAST_SELECT$,,AUTO
         1 003740   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 003741   003746 601000 1                  TNZ     s:13177

     2181    13175    2              IT$BLOCK_EXPR.SELECTS$ = NEW_SELECT$;

  13175  1 003742   200057 236100                    LDQ     NEW_SELECT$,,AUTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:218  
         1 003743   200006 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 003744   100035 756100                    STQ     29,,PR1
         1 003745   003751 710000 1                  TRA     s:13178

     2182    13176    2           ELSE
     2183    13177    2              LAST$SELECT.FLINK$ = NEW_SELECT$;

  13177  1 003746   200057 236100                    LDQ     NEW_SELECT$,,AUTO
         1 003747   200007 471500                    LDP1    LAST_SELECT$,,AUTO
         1 003750   100002 756100                    STQ     2,,PR1

     2184    13178    2           IT$BLOCK_EXPR.SELECTS_TAIL$ = NEW_SELECT$;

  13178  1 003751   200006 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 003752   100036 756100                    STQ     30,,PR1

     2185    13179    2           LAST_SELECT$ = NEW_SELECT$;

  13179  1 003753   200007 756100                    STQ     LAST_SELECT$,,AUTO

     2186    13180    2           LAST_ADJUST$ = ADDR(NIL);

  13180  1 003754   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 003755   200010 756100                    STQ     LAST_ADJUST$,,AUTO

     2187    13181    2           LAST_MOVEMENT$ = ADDR(NIL);

  13181  1 003756   200011 756100                    STQ     LAST_MOVEMENT$,,AUTO

     2188    13182
     2189    13183    2           RETURN;

  13183  1 003757   200056 221300                    LDX1  ! NEW_ADJUST$+1,,AUTO
         1 003760   000001 702211                    TSX2  ! 1,X1

  13181  1 003761                       OALLOC_FAIL* null
     2190    13184
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:219  
     2191    13185
     2192    13186
     2193    13187    2   OALLOC_FAILED: ;
     2194    13188    2           ALTRETURN;

  13188  1 003761   200056 221300                    LDX1  ! NEW_ADJUST$+1,,AUTO
         1 003762   000000 702211                    TSX2  ! 0,X1
     2195    13189
     2196    13190    2   END ALLOC_IT_SELECT;
     2197    13191
     2198    13192    1   END VDE$PBLOCK_EXPR;
     2199    13193        %EOD;

PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:220  
--  Include file information  --

   XUE_MACRO_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PBLOCK_EXPR.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:221  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    31-0-0/w PTR         r     1 @OPERAND                   3-0-0/w PTR         r     1 @PT_BLOCK_EXPR
    45-0-0/w PTR         r     1 @PT_LO_NAME               31-0-0/w PTR         r     1 @PT_MOVEMENT
    33-0-0/w BIT         r     1 ABS_MOVEMENT              47-0-0/w PTR         r     1 BLOCK_DESC$
    43-0-0/w PTR         r     1 BUFFER$                   14-0-0/w PTR         r     1 CHILD$
    13-0-0/w SBIN        r     1 CHILD_INDEX
    45-0-0/w SBIN        r     1 CTRL_ARGS(0:1)
    40-0-0/w UBIN        r     1 CTRL_ARGS(0:1)
    23-0-0/w PTR         r     1 CURRENT_FILE_KEY$         45-0-0/w PTR         r     1 CURR_MOVE$
     4-0-0/w PTR         r     1 CURR_WINDOW$              52-0-0/w PTR         r     1 DOMAIN_FILE_KEY$
     5-0-0/w PTR         r     1 EDIT_BLOCK$               35-0-0/w SBIN        r     1 ERR_CODE
    42-0-0/w SBIN        r     1 ERR_CODE                  15-0-0/w PTR         r     1 ERR_SUBST$
    24-0-0/w STRC(72)    r     1 EVAL_OPTIONS              25-0-0/w PTR         r     1 FILE_KEY$
    53-0-0/w SBIN        r     1 INDX                       6-0-0/w PTR         r     1 IT_BLOCK_EXPR$
    50-0-0/w PTR         r     1 IT_OPERAND$               24-0-0/w PTR         r     1 IT_OPERAND$
    23-0-0/w PTR         r     1 IT_OPERAND$               34-0-0/w STRC(72)    r     1 KEY
    27-0-0/w UBIN        r     1 KEYLENGTH                 36-0-0/w PTR         r     1 KEY_BUFFER$
    10-0-0/w PTR         r     1 LAST_ADJUST$              11-0-0/w PTR         r     1 LAST_MOVEMENT$
     7-0-0/w PTR         r     1 LAST_SELECT$              51-0-0/w PTR         r     1 LO_NAME_FILE_KEY$
    33-0-0/w PTR         r     1 MOVE_CHILD$               32-0-0/w SBIN        r     1 MOVE_CHILD_INDEX
    21-0-0/w PTR         r     1 NAME_DESC$                22-0-0/w PTR         r     1 NAME_FILE_KEY$
    50-0-0/w PTR         r     1 NAME_NODE$                55-0-0/w PTR         r     1 NEW_ADJUST$
    57-0-0/w PTR         r     1 NEW_SELECT$               34-0-0/w SBIN        r     1 NUMBER
    32-0-0/w SBIN        r     1 NUMBER                    23-0-0/w STRC(180)   r     1 OPEN_OPTIONS
    *0-0-0/w STRC(144)   r     1 OPERAND                   21-0-0/w STRC(180)   r     1 OPTIONS
    12-0-0/w SBIN        r     1 PREV_CHILD_INDEX          *0-0-0/w STRC(144)   r     1 PT_BLOCK_EXPR
    *0-0-0/w STRC(144)   r     1 PT_LO_NAME                *0-0-0/w STRC(144)   r     1 PT_MOVEMENT
    46-0-0/w PTR         r     1 PT_SYMBOL$                44-0-0/c CHAR        r     1 RET_CODE
    37-0-0/c CHAR        r     1 RET_CODE                  21-0-0/w SBIN        r     1 RPT_COUNT
    21-0-0/w STRC(9)     r     1 SAVE_ACCESSOR_PRIV        27-0-0/w BIT         r     1 SKIP_SEEN
    26-0-0/w BIT         r     1 SRCH_SEEN                 30-0-0/w STRC(324)   r     1 STRING_LOC
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:222  
    22-0-0/w PTR         r     1 STRING_STREAM$            42-0-0/w SBIN        r     1 STR_INDEX
    16-0-0/w PTR         r     1 T$
    26-0-0/w PTR         r     1 VD_PARSED_PREDEF_FILE$
    51-0-0/w PTR         r     1 WILD_STRING$              47-0-0/w PTR         r     1 WRITTEN_NODE$
    41-0-0/w PTR         r     1 XUE_EXP$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$COMPONENT              0-0-0/w STRC(144)   r     1 VD_$DIRECTION
     0-0-0/w STRC(144)   r     1 VD_$EXIST                  0-0-0/w STRC(144)   r     1 VD_$POINT
     0-0-0/w STRC(144)   r     1 VD_$PROTECT                0-0-0/w STRC(144)   r     1 VD_$SEARCH
     0-0-0/w STRC(144)   r     1 VD_$SKIP                   0-0-0/w STRC(144)   r     1 VD_$STRUCTURE
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$
     0-0-0/w STRC(648)   r     1 VD_FKEY_SCRATCH_SOURCE
     0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF
     0-0-0/w STRC(72)    r     1 VD_KEY_SCRATCH_SOURCE
     0-0-0/d STRC(1008)  r     1 XUE_ECB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(936)   r     1 BLOCK$DESC                 0-0-0/w ASTR(90)    r     1 BUFFER
     0-0-0/w STRC(144)   r     1 CHILD                      0-0-0/w STRC(324)   r     1 CURR$MOVE
     0-0-0/w STRC(900)   r     1 CURR$WINDOW                0-0-0/w ASTR(9)     r     1 CURRENT$FILE_KEY
     0-0-0/w ASTR(9)     r     1 DOMAIN$FILE_KEY            0-0-0/w STRC(936)   r     1 EDIT$BLOCK
     0-0-0/w STRC(864)   r     1 EQUALS$STREAM              0-0-0/w STRC(180)   r     1 FATAL$ERR
     0-0-0/w STRC(1116)  r     1 IT$BLOCK_EXPR              0-0-0/w STRC(324)   r     1 IT$OPERAND
     0-0-0/w STRC(324)   r     1 IT$OPERAND                 0-0-0/w STRC(324)   r     1 IT$OPERAND
     0-0-0/w ASTR(90)    r     1 KEY$BUFFER                 0-0-0/w STRC(216)   r     1 LAST$ADJUST
     0-0-0/w STRC(180)   r     1 LAST$ERR                   0-0-0/w STRC(324)   r     1 LAST$MOVEMENT
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:223  
     0-0-0/w STRC(216)   r     1 LAST$SELECT                0-0-0/w ASTR(9)     r     1 LO$NAME_FILE_KEY
     0-0-0/w STRC(144)   r     1 MOVE$CHILD                 0-0-0/w STRC(936)   r     1 NAME$DESC
     0-0-0/w ASTR(9)     r     1 NAME$FILE_KEY              0-0-0/w STRC(468)   r     1 NAME$NODE
     0-0-0/w STRC(216)   r     1 NEW$ADJUST                 0-0-0/w STRC(216)   r     1 NEW$SELECT
     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/w ASTR(153)   r     1 OUT$SYM                    0-0-0/w STRC(648)   r     1 PREDEF$KEY
     0-0-0/w STRC(576)   r     1 PREDEF$NODE                0-0-0/w ASTR(153)   r     1 PT$SYMBOL
     0-0-0/w STRC(864)   r     1 STRING$STREAM              0-0-0/w STRC(648)   r     1 VD$FILE_KEY
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(324)   r     1 VD$IT_OPERAND
     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER              0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER              0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w STRC(81)    r     1 VD$STRING_HEADER           0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(9)     r     1 VD$TEXTC                   0-0-0/w ASTR(9)     r     1 VD$TEXTC
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w STRC(792)   r     1 WILD$STRING
     0-0-0/w STRC(792)   r     1 WILD$STRINGS               0-0-0/w STRC(468)   r     1 WRITTEN$NODE
     0-0-0/w STRC(144)   r     1 XUE$EXP


   Procedure VDE$PBLOCK_EXPR requires 2035 words for executable code.
   Procedure VDE$PBLOCK_EXPR requires 54 words of local(AUTO) storage.
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:224  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:225  
          MINI XREF LISTING

ABS_IT_OPERAND IN PROCEDURE MOVEMENT_OPERAND
     12698**PROC    11964--CALL
ABS_IT_OPERAND_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11964--CALLALT
ABS_MOVEMENT IN PROCEDURE MOVEMENT_OPERAND
     11674**DCL     11787<<ASSIGN  11799<<ASSIGN  11814<<ASSIGN  11869<<ASSIGN  11963>>IF
ABS_SEL_NOT_1ST_FAILURE IN PROCEDURE ABS_IT_OPERAND
     12803**LABEL   12774--GOTO
ADJUST_LIST
     10972**PROC     8763--CALL
ADJUST_LIST_FAILED
      8850**LABEL    8763--CALLALT
ALLOC_IT_ADJUST
     13011**PROC    10983--CALL    12878--CALL
ALLOC_IT_ADJUST_FAILED IN PROCEDURE ADJUST_LIST
     10990**LABEL   10983--CALLALT
ALLOC_IT_ADJUST_FAILED IN PROCEDURE GUAR_LAST_ADJUST
     12888**LABEL   12878--CALLALT
ALLOC_IT_SELECT
     13123**PROC    10871--CALL    12949--CALL
ALLOC_IT_SELECT_FAILED IN PROCEDURE GUAR_LAST_SELECT
     12948**LABEL   12949--CALLALT
ALLOC_IT_SELECT_FAILED IN PROCEDURE SELECT_CLAUSE
     10897**LABEL   10871--CALLALT
BAD_CTRL_IN_LITERAL_FAILURE IN PROCEDURE STRING_EXPRESSION
      9997**LABEL    9910--GOTO     9943--GOTO
BAD_KEY_INCR
      8783**LABEL    8776--GOTO
BLOCK$DESC IN PROCEDURE PLO_NAME
     12229**DCL     12596<>CALL
BLOCK$DESC.FILE_KEY.REP# IN PROCEDURE PLO_NAME
     12267**DCL     12545>>IF
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:226  
BLOCK$DESC.FILE_KEY.V$ IN PROCEDURE PLO_NAME
     12267**DCL     12545>>ASSIGN  12545--ASSIGN
BLOCK_DESC$ IN PROCEDURE PLO_NAME
     12176**DCL     12229--IMP-PTR 12534<>CALL    12545>>IF      12545>>ASSIGN  12545>>ASSIGN  12596>>CALL
BUFFER IN PROCEDURE STRING_EXPRESSION
      9357**DCL      9945<>CALL    10020<>CALL
BUFFER.BYTES IN PROCEDURE STRING_EXPRESSION
      9385**DCL      9894--CALL
BUFFER.LENGTH# IN PROCEDURE STRING_EXPRESSION
      9383**DCL      9385--IMP-SIZ  9897<<ASSIGN   9932>>ASSIGN   9945>>CALL     9957>>ASSIGN  10020>>CALL
BUFFER$ IN PROCEDURE STRING_EXPRESSION
      9173**DCL      9357--IMP-PTR  9881<>CALL     9893>>IF       9894<>CALL     9894>>CALL     9894>>CALL
      9897>>ASSIGN   9932>>ASSIGN   9945>>CALL     9945>>CALL    10020>>CALL    10020>>CALL
CHILD
      7810**DCL      8772<>CALL    10881<>CALL    11285<>CALL    11298<>CALL
CHILD.CODE
      7818**DCL      8771>>IF       8835>>DOCASE   8846<>CALL     8975>>DOCASE   8988>>DOCASE  10596>>IF
     10599>>IF      10627>>IF      10627>>IF      10627>>IF      10627>>IF      10665>>DOCASE  10868>>IF
     10978>>IF      10978>>IF      10985>>IF      11281>>IF      11293>>IF
CHILD.CPOS
      7836**DCL      8850>>ASSIGN  10788>>ASSIGN  10904>>ASSIGN
CHILD.NSUBLKS
      7822**DCL      8979>>IF      10596>>IF      10874>>IF      10878>>IF      11300>>CALL
CHILD.SCRITCH
      7826**DCL     10686>>ASSIGN
CHILD.SUBLK$
      7843**DCL      8988>>DOCASE  10597>>ASSIGN  10601>>CALL    10601>>CALL    10675>>CALL    10675>>CALL
     10878>>IF      10881>>CALL    10881>>CALL    11300>>CALL
CHILD$
      7296**DCL      7810--IMP-PTR  8731<<ASSIGN   8770<<ASSIGN   8771>>IF       8772>>CALL     8834<<ASSIGN
      8835>>DOCASE   8846>>CALL     8850>>ASSIGN   8973<<ASSIGN   8975>>DOCASE   8979>>IF       8988>>DOCASE
     10595<<ASSIGN  10596>>IF      10596>>IF      10597<<ASSIGN  10597>>ASSIGN  10599>>IF      10601>>CALL
     10601>>CALL    10627>>IF      10627>>IF      10627>>IF      10627>>IF      10665>>DOCASE  10675>>CALL
     10675>>CALL    10686>>ASSIGN  10788>>ASSIGN  10867<<ASSIGN  10868>>IF      10874>>IF      10878>>IF
     10881>>CALL    10904>>ASSIGN  10977<<ASSIGN  10978>>IF      10978>>IF      10985>>IF      11280<<ASSIGN
     11281>>IF      11285>>CALL    11292<<ASSIGN  11293>>IF      11298>>CALL    11300>>CALL    11300>>CALL
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:227  
CHILD_INDEX
      7295**DCL      8730<<ASSIGN   8731>>ASSIGN   8750>>IF       8757>>DOWHILE  8757>>DOWHILE  8759>>ASSIGN
      8769>>IF       8770>>ASSIGN   8777<<ASSIGN   8777>>ASSIGN   8783>>IF       8834>>ASSIGN   8972>>DOWHILE
      8973>>ASSIGN   9020<<ASSIGN   9020>>ASSIGN  10595>>ASSIGN  10769<<ASSIGN  10769>>ASSIGN  10865>>IF
     10867>>ASSIGN  10897<<ASSIGN  10897>>ASSIGN  10975>>IF      10977>>ASSIGN  10990<<ASSIGN  10990>>ASSIGN
     11277>>IF      11280>>ASSIGN  11287<<ASSIGN  11287>>ASSIGN  11291>>DOWHILE 11292>>ASSIGN  11302<<ASSIGN
     11302>>ASSIGN
CMDLINE_ERR
      8845**LABEL    8823--GOTO     8828--GOTO
CTRLFN_CONFLICTS_W_KEY_FAILURE IN PROCEDURE MOVEMENT_OPERAND
     12015**LABEL   11851--GOTO
CTRL_ARGS IN PROCEDURE MOVEMENT_OPERAND
     11691**DCL     11841<>CALL
CTRL_ARGS IN PROCEDURE STRING_EXPRESSION
      9175**DCL      9881<>CALL     9908<<ASSIGN   9909>>IF       9909>>IF       9912>>IF       9913<<ASSIGN
      9930>>ASSIGN
CURR$MOVE.CODE# IN PROCEDURE ABS_IT_OPERAND
     12738**DCL     12779>>IF      12779>>IF      12779>>IF
CURR$MOVE.FLINK$ IN PROCEDURE ABS_IT_OPERAND
     12738**DCL     12783>>CALL    12785<<ASSIGN
CURR$WINDOW.OPERAND.EDIT_BLOCK$
      7350**DCL      8708>>ASSIGN   8750>>IF      10599>>IF
CURR$WINDOW.OPERAND.INTREE$
      7350**DCL      8710>>IF       8713<>CALL     8715>>ASSIGN   8866<<ASSIGN
CURRENT$FILE_KEY.BYTES IN PROCEDURE DOMAIN_OPERAND
     10361**DCL     10624>>IF
CURRENT$FILE_KEY.LENGTH# IN PROCEDURE DOMAIN_OPERAND
     10359**DCL     10361--IMP-SIZ 10624>>IF
CURRENT_FILE_KEY$ IN PROCEDURE DOMAIN_OPERAND
     10127**DCL     10351--IMP-PTR 10621<<ASSIGN  10621<<ASSIGN  10624>>IF      10624>>IF
CURR_MOVE$ IN PROCEDURE ABS_IT_OPERAND
     12701**DCL     12712--IMP-PTR 12778<<ASSIGN  12779>>IF      12779>>IF      12779>>IF      12783>>CALL
     12785>>ASSIGN  12786>>ASSIGN  12787>>ASSIGN
CURR_WINDOW$
      7288**DCL      7309--IMP-PTR  8705<<ASSIGN   8706>>IF       8708>>ASSIGN   8710>>IF       8713>>CALL
      8715>>ASSIGN   8750>>IF       8866>>ASSIGN  10599>>IF
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:228  
DEC_CONVERT_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11921--GOTO
DOMAIN$FILE_KEY.BYTES IN PROCEDURE PLO_NAME
     12502**DCL     12573>>IF
DOMAIN$FILE_KEY.LENGTH# IN PROCEDURE PLO_NAME
     12500**DCL     12502--IMP-SIZ 12573>>IF
DOMAIN_FILE_KEY$ IN PROCEDURE PLO_NAME
     12179**DCL     12492--IMP-PTR 12556<<ASSIGN  12556<<ASSIGN  12569<<ASSIGN  12569<<ASSIGN  12573>>IF
     12573>>IF
DOMAIN_OPAND_NOT_1ST_FAILURE IN PROCEDURE PLO_NAME
     12606**LABEL   12574--GOTO
DOMAIN_OPERAND
     10121**PROC     8735--CALL
DOMAIN_OPERAND_FAILED
      8850**LABEL    8735--CALLALT
EACH_MOVEMENT IN PROCEDURE MOVEMENTS
     11291**LABEL   11294--EXIT
EDIT$BLOCK.FILE_KEY.REP#
      7413**DCL     10621>>IF      12556>>IF
EDIT$BLOCK.FILE_KEY.V$
      7413**DCL     10621>>ASSIGN  10621--ASSIGN  12556>>ASSIGN  12556--ASSIGN
EDIT_BLOCK$
      7289**DCL      7375--IMP-PTR  8708<<ASSIGN  10621>>IF      10621>>ASSIGN  10621>>ASSIGN  12556>>IF
     12556>>ASSIGN  12556>>ASSIGN
EQUALS$STREAM.FILE_KEY.V$
      8213**DCL     10686>>ASSIGN
ERR_CODE IN PROCEDURE MOVEMENT_OPERAND
     11692**DCL     12007<<ASSIGN  12011<<ASSIGN  12015<<ASSIGN  12019<<ASSIGN  12024<>CALL
ERR_CODE IN PROCEDURE MOVEMENT_OPTIONS
     11407**DCL     11545<<ASSIGN  11549<<ASSIGN  11553<<ASSIGN  11557<<ASSIGN  11562<>CALL
ERR_SUBST$
      7297**DCL      7978--IMP-PTR  8031--IMP-PTR
EVAL_OPTIONS IN PROCEDURE MOVEMENTS
     11114**DCL     11282<<ASSIGN  11295<<ASSIGN  11811>>ASSIGN  11866>>ASSIGN  11884>>ASSIGN  11900>>ASSIGN
     11947>>ASSIGN  12579>>ASSIGN
EVAL_OPTIONS.DIRECTION# IN PROCEDURE MOVEMENTS
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:229  
     11118**DCL     11483>>IF      11485<<ASSIGN  11488>>IF      11490<<ASSIGN  11794>>IF      11803>>IF
     11818>>IF      11878>>IF      11879<<ASSIGN  11894>>IF      11895<<ASSIGN  11941>>IF      11942<<ASSIGN
EVAL_OPTIONS.POINT# IN PROCEDURE MOVEMENTS
     11118**DCL     11493>>IF      11495<<ASSIGN  11498>>IF      11500<<ASSIGN  11503>>IF      11505<<ASSIGN
     11774>>IF      11775<<ASSIGN
EVAL_OPTIONS.SKIP# IN PROCEDURE MOVEMENTS
     11118**DCL     11479<<ASSIGN  11877<<ASSIGN  11893<<ASSIGN  11940<<ASSIGN
EVAL_OPTIONS.SRCH IN PROCEDURE MOVEMENTS
     11118**DCL     11875<<ASSIGN  11891<<ASSIGN  11938<<ASSIGN
FATAL$ERR.ERR
      7909**DCL      8862>>IF
FCLOSE_FAILED IN PROCEDURE STRING_EXPRESSION
     10015**LABEL    9964--CALLALT
FILE_COMMON IN PROCEDURE DOMAIN_OPERAND
     10695**LABEL   10678--GOTO
FILE_KEY$ IN PROCEDURE DOMAIN_OPERAND
     10129**DCL     10448--IMP-PTR 10685<<ASSIGN  10689>>ASSIGN  10691>>CALLBLT 10693>>CALLBLT 10694>>ASSIGN
     10695>>ASSIGN
FOPEN_FAILED IN PROCEDURE STRING_EXPRESSION
     10015**LABEL    9842--CALLALT
FREE_BUFFER IN PROCEDURE STRING_EXPRESSION
     10020**LABEL   10011--GOTO
GUAR_LAST_ADJUST
     12870**PROC     9983--CALL    10775--CALL    11782--CALL
GUAR_LAST_ADJUST_FAILED IN PROCEDURE DOMAIN_OPERAND
     10781**LABEL   10775--CALLALT
GUAR_LAST_ADJUST_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11782--CALLALT
GUAR_LAST_ADJUST_FAILED IN PROCEDURE STRING_EXPRESSION
     10028**LABEL    9983--CALLALT
GUAR_LAST_SELECT
     12944**PROC    10981--CALL    12874--CALL
GUAR_LAST_SELECT_FAILED IN PROCEDURE ADJUST_LIST
     10990**LABEL   10981--CALLALT
GUAR_LAST_SELECT_FAILED IN PROCEDURE GUAR_LAST_ADJUST
     12877**LABEL   12874--CALLALT
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:230  
INDX IN PROCEDURE PLO_NAME
     12180**DCL     12606<<ASSIGN  12607>>DOWHILE 12607>>DOWHILE 12609<<ASSIGN  12609>>ASSIGN  12611>>IF
     12617>>ASSIGN  12618>>ASSIGN  12619>>ASSIGN  12619>>ASSIGN  12620>>CALL
IT$BLOCK_EXPR
      7522**DCL      8864<>CALL
IT$BLOCK_EXPR.DOMAINN
      7548**DCL      8749>>IF      12548>>IF
IT$BLOCK_EXPR.DOMAINN.FILE_KEY
      7560**DCL      9849<<ASSIGN  10675<>CALL    10725<<ASSIGN  10740<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.FILE_KEY.REP#
      7562**DCL     10684<<ASSIGN  12569>>IF
IT$BLOCK_EXPR.DOMAINN.FILE_KEY.TYPE#
      7562**DCL     10683<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$
      7562**DCL     10681<>CALL    10685>>ASSIGN  10701>>CALL    10740<>CALL    12569>>ASSIGN  12569--ASSIGN
IT$BLOCK_EXPR.DOMAINN.NEXT
      7548**DCL     10668<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.PREVIOUS
      7548**DCL     10672<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.RANGE
      7574**DCL      9850<<ASSIGN   9863<>CALL
IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.EOF
      7630**DCL      9853<<ASSIGN   9961<<ASSIGN  10698<<ASSIGN  10746<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.KEY
      7626**DCL      9959<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.RANGE.ENDD.POSITION#
      7630**DCL      9957<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.RANGE.START.KEY
      7598**DCL      9851<<ASSIGN  10699<<ASSIGN  10744<<ASSIGN
IT$BLOCK_EXPR.OPTIONS
      7643**DCL      8969>>ASSIGN   9023<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.COMPONENT#
      7645**DCL      9857<<ASSIGN  10708>>IF      10709<<ASSIGN  10756>>IF      10757<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.EXIST#
      7646**DCL      9860<<ASSIGN  10712>>IF      10713<<ASSIGN  10761>>IF      10762<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.KEY_INCR
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:231  
      7657**DCL      8772<>CALL     8774--IF
IT$BLOCK_EXPR.OPTIONS.LEVEL#
      7645**DCL      9856<<ASSIGN  10706>>IF      10707<<ASSIGN  10754>>IF      10755<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.PROTECT#
      7645**DCL      9859<<ASSIGN  10710>>IF      10711<<ASSIGN  10759>>IF      10760<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.STRUCTURE$
      7645**DCL      9855<<ASSIGN  10704>>IF      10705<<ASSIGN  10751>>IF      10752<<ASSIGN
IT$BLOCK_EXPR.SELECTS$
      7662**DCL     12773>>IF      13175<<ASSIGN
IT$BLOCK_EXPR.SELECTS_TAIL$
      7662**DCL     13178<<ASSIGN
IT$OPERAND IN PROCEDURE DOMAIN_OPERAND
     10374**DCL     10789<>CALL
IT$OPERAND.CODE# IN PROCEDURE DOMAIN_OPERAND
     10400**DCL     10667<<ASSIGN  10671<<ASSIGN  10697<<ASSIGN  10721<<ASSIGN
IT$OPERAND.OPTIONS.POINT# IN PROCEDURE DOMAIN_OPERAND
     10413**DCL     10663<<ASSIGN
IT$OPERAND.PARAM$ IN PROCEDURE DOMAIN_OPERAND
     10430**DCL     10701<>CALL    10722<>CALL
IT$OPERAND.PARENT$ IN PROCEDURE DOMAIN_OPERAND
     10400**DCL     10777<<ASSIGN
IT$OPERAND IN PROCEDURE MOVEMENTS
     11133**DCL     11910<>CALL    11919<>CALL    12030<>CALL
IT$OPERAND.CODE# IN PROCEDURE MOVEMENTS
     11159**DCL     11812<<ASSIGN  11867<<ASSIGN  11885<<ASSIGN  11901<<ASSIGN  11948<<ASSIGN  12583<<ASSIGN
     12595<<ASSIGN  12775>>IF
IT$OPERAND.KEY IN PROCEDURE MOVEMENTS
     11185**DCL     11813<<ASSIGN  11868<<ASSIGN  11927<<ASSIGN  11930--ASSIGN  11931--ASSIGN
IT$OPERAND.KEY.REP# IN PROCEDURE MOVEMENTS
     11187**DCL     11929<<ASSIGN  12585<<ASSIGN
IT$OPERAND.KEY.TYPE# IN PROCEDURE MOVEMENTS
     11187**DCL     11928<<ASSIGN  12584<<ASSIGN
IT$OPERAND.KEY.V$ IN PROCEDURE MOVEMENTS
     11187**DCL     12586<>CALL    12590>>ASSIGN  12591>>ASSIGN  12591>>ASSIGN
IT$OPERAND.OPTIONS IN PROCEDURE MOVEMENTS
     11170**DCL     11811<<ASSIGN  11866<<ASSIGN  11884<<ASSIGN  11900<<ASSIGN  11947<<ASSIGN  12579<<ASSIGN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:232  
IT$OPERAND.PARAM$ IN PROCEDURE MOVEMENTS
     11189**DCL     11949<>CALL    12596<>CALL
IT$OPERAND.PARENT$ IN PROCEDURE MOVEMENTS
     11159**DCL     11968<<ASSIGN
IT$OPERAND.CODE# IN PROCEDURE STRING_EXPRESSION
      9517**DCL      9976<<ASSIGN
IT$OPERAND.OPTIONS.POINT# IN PROCEDURE STRING_EXPRESSION
      9530**DCL      9975<<ASSIGN
IT$OPERAND.PARAM$ IN PROCEDURE STRING_EXPRESSION
      9547**DCL      9977<<ASSIGN
IT$OPERAND.PARENT$ IN PROCEDURE STRING_EXPRESSION
      9517**DCL      9985<<ASSIGN
IT_BLOCK_EXPR$
      7290**DCL      7522--IMP-PTR  8715<<ASSIGN   8749>>IF       8772>>CALL     8774>>IF       8864>>CALL
      8969>>ASSIGN   9023>>ASSIGN   9849>>ASSIGN   9850>>ASSIGN   9851>>ASSIGN   9853>>ASSIGN   9855>>ASSIGN
      9856>>ASSIGN   9857>>ASSIGN   9859>>ASSIGN   9860>>ASSIGN   9863>>CALL     9957>>ASSIGN   9959>>ASSIGN
      9961>>ASSIGN  10668>>ASSIGN  10672>>ASSIGN  10675>>CALL    10681>>CALL    10683>>ASSIGN  10684>>ASSIGN
     10685>>ASSIGN  10698>>ASSIGN  10699>>ASSIGN  10701>>CALL    10704>>IF      10705>>ASSIGN  10706>>IF
     10707>>ASSIGN  10708>>IF      10709>>ASSIGN  10710>>IF      10711>>ASSIGN  10712>>IF      10713>>ASSIGN
     10725>>ASSIGN  10740>>ASSIGN  10740>>CALL    10744>>ASSIGN  10746>>ASSIGN  10751>>IF      10752>>ASSIGN
     10754>>IF      10755>>ASSIGN  10756>>IF      10757>>ASSIGN  10759>>IF      10760>>ASSIGN  10761>>IF
     10762>>ASSIGN  12548>>IF      12569>>IF      12569>>ASSIGN  12569>>ASSIGN  12773>>IF      13173>>ASSIGN
     13175>>ASSIGN  13178>>ASSIGN
IT_OPERAND$ IN PROCEDURE DOMAIN_OPERAND
     10128**DCL     10374--IMP-PTR 10662<<ASSIGN  10663>>ASSIGN  10667>>ASSIGN  10671>>ASSIGN  10697>>ASSIGN
     10701>>CALL    10721>>ASSIGN  10722>>CALL    10777>>ASSIGN  10779>>ASSIGN  10780>>ASSIGN  10781>>ASSIGN
     10789>>CALL
IT_OPERAND$ IN PROCEDURE MOVEMENTS
     11105**DCL     11133--IMP-PTR 11788<<ASSIGN  11810<<ASSIGN  11811>>ASSIGN  11812>>ASSIGN  11813>>ASSIGN
     11865<<ASSIGN  11866>>ASSIGN  11867>>ASSIGN  11868>>ASSIGN  11883<<ASSIGN  11884>>ASSIGN  11885>>ASSIGN
     11899<<ASSIGN  11900>>ASSIGN  11901>>ASSIGN  11910>>CALL    11919>>CALL    11927>>ASSIGN  11928>>ASSIGN
     11929>>ASSIGN  11930>>ASSIGN  11931>>ASSIGN  11946<<ASSIGN  11947>>ASSIGN  11948>>ASSIGN  11949>>CALL
     11968>>ASSIGN  11970>>ASSIGN  11972>>ASSIGN  11973>>ASSIGN  11974>>ASSIGN  12030>>CALL    12578<<ASSIGN
     12579>>ASSIGN  12583>>ASSIGN  12584>>ASSIGN  12585>>ASSIGN  12586>>CALL    12590>>ASSIGN  12591>>ASSIGN
     12591>>ASSIGN  12595>>ASSIGN  12596>>CALL    12775>>IF
IT_OPERAND$ IN PROCEDURE STRING_EXPRESSION
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:233  
      9177**DCL      9491--IMP-PTR  9974<<ASSIGN   9975>>ASSIGN   9976>>ASSIGN   9977>>ASSIGN   9985>>ASSIGN
      9987>>ASSIGN   9988>>ASSIGN   9989>>ASSIGN
KEY IN PROCEDURE MOVEMENT_OPERAND
     11683**DCL     11806<>CALL    11813>>ASSIGN  11836<<ASSIGN  11868>>ASSIGN
KEY.REP# IN PROCEDURE MOVEMENT_OPERAND
     11687**DCL     11838<<ASSIGN
KEY.TYPE# IN PROCEDURE MOVEMENT_OPERAND
     11687**DCL     11837<<ASSIGN
KEY.V$ IN PROCEDURE MOVEMENT_OPERAND
     11687**DCL     11839<<ASSIGN  11854<>CALL    11858>>ASSIGN  11859>>ASSIGN  11859>>ASSIGN
KEY$BUFFER IN PROCEDURE MOVEMENT_OPERAND
     11735**DCL     11844<>CALL    11849<>CALL    11860<>CALL
KEY$BUFFER.BYTES IN PROCEDURE MOVEMENT_OPERAND
     11763**DCL     11859>>ASSIGN
KEY$BUFFER.LENGTH# IN PROCEDURE MOVEMENT_OPERAND
     11761**DCL     11763--IMP-SIZ 11844>>CALL    11849>>CALL    11854>>CALL    11858>>ASSIGN  11859>>ASSIGN
     11860>>CALL
KEYLENGTH IN PROCEDURE DOMAIN_OPERAND
     10131**DCL     10693<<CALLBLT 10694>>ASSIGN  10695>>ASSIGN
KEY_BUFFER$ IN PROCEDURE MOVEMENT_OPERAND
     11689**DCL     11735--IMP-PTR 11840<<ASSIGN  11841<>CALL    11844>>CALL    11844>>CALL    11849>>CALL
     11849>>CALL    11854>>CALL    11858>>ASSIGN  11859>>ASSIGN  11859>>ASSIGN  11860>>CALL    11860>>CALL
KEY_OPTIONS_NOT_LEGAL_FAILURE IN PROCEDURE MOVEMENT_OPERAND
     12011**LABEL   11805--GOTO    11820--GOTO
LAST$ADJUST.FLINK$
      7735**DCL     13065<<ASSIGN
LAST$ADJUST.MOVEMENTS$
      7735**DCL      9988<<ASSIGN  10780<<ASSIGN  11970<<ASSIGN  12775>>IF      12778>>ASSIGN  12792>>CALL
     12794<<ASSIGN
LAST$ADJUST.MOVEMENTS_TAIL$
      7736**DCL      9989<<ASSIGN  10781<<ASSIGN  11973<<ASSIGN  12786<<ASSIGN  12795<<ASSIGN
LAST$ADJUST.NEW_STATE#
      7735**DCL     10986<<ASSIGN  10988<<ASSIGN
LAST$ERR.CMDLINE_INDEX#
      7967**DCL      8850<<ASSIGN  10788<<ASSIGN  10904<<ASSIGN  11563<<ASSIGN  12025<<ASSIGN  12622<<ASSIGN
LAST$ERR.ERR.CODE#
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:234  
      7964**DCL      8838<<ASSIGN   8843<<ASSIGN  10000<<ASSIGN  10002<<ASSIGN  10004<<ASSIGN  10006<<ASSIGN
     10008<<ASSIGN
LAST$MOVEMENT.FLINK$
      7772**DCL     11972<<ASSIGN
LAST$SELECT.ADJUSTS$
      7699**DCL     12775>>IF      13063<<ASSIGN
LAST$SELECT.ADJUSTS_TAIL$
      7699**DCL     13066<<ASSIGN
LAST$SELECT.FLINK$
      7698**DCL     13177<<ASSIGN
LAST$SELECT.RPT_ALL
      7698**DCL     10879<<ASSIGN
LAST$SELECT.RPT_COUNT#
      7698**DCL     10875<<ASSIGN  10887<<ASSIGN  12951<<ASSIGN
LAST_ADJUST$
      7292**DCL      7709--IMP-PTR  8717<<ASSIGN   9985>>ASSIGN   9988>>ASSIGN   9989>>ASSIGN  10777>>ASSIGN
     10780>>ASSIGN  10781>>ASSIGN  10986>>ASSIGN  10988>>ASSIGN  11968>>ASSIGN  11970>>ASSIGN  11973>>ASSIGN
     12775>>IF      12775>>IF      12778>>ASSIGN  12786>>ASSIGN  12792>>CALL    12794>>ASSIGN  12795>>ASSIGN
     12877>>IF      13062>>IF      13065>>ASSIGN  13067<<ASSIGN  13180<<ASSIGN
LAST_MOVEMENT$
      7293**DCL      7746--IMP-PTR  8718<<ASSIGN   9987<<ASSIGN  10779<<ASSIGN  11969>>IF      11972>>ASSIGN
     11974<<ASSIGN  12787<<ASSIGN  12796<<ASSIGN  13068<<ASSIGN  13181<<ASSIGN
LAST_SELECT$
      7291**DCL      7672--IMP-PTR  8716<<ASSIGN  10875>>ASSIGN  10879>>ASSIGN  10887>>ASSIGN  12773>>IF
     12775>>IF      12948>>IF      12951>>ASSIGN  13061>>ASSIGN  13063>>ASSIGN  13066>>ASSIGN  13174>>IF
     13177>>ASSIGN  13179<<ASSIGN
LDELETE_FAILED IN PROCEDURE STRING_EXPRESSION
     10015**LABEL    9863--CALLALT
LO$NAME_FILE_KEY.BYTES IN PROCEDURE PLO_NAME
     12479**DCL     12573>>IF
LO$NAME_FILE_KEY.LENGTH# IN PROCEDURE PLO_NAME
     12477**DCL     12479--IMP-SIZ 12573>>IF
LO_NAME_FILE_KEY$ IN PROCEDURE PLO_NAME
     12178**DCL     12469--IMP-PTR 12545<<ASSIGN  12545<<ASSIGN  12573>>IF      12573>>IF
LO_NAME_OPTS_NOT_LEGAL_FAILURE IN PROCEDURE MOVEMENT_OPERAND
     12007**LABEL   11796--GOTO
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:235  
LWRITE_FAILED IN PROCEDURE STRING_EXPRESSION
     10015**LABEL    9945--CALLALT
MOVE$CHILD.CODE IN PROCEDURE MOVEMENT_OPTIONS
     11424**DCL     11462>>ASSIGN  11462>>ASSIGN  11465>>DOCASE  11508<>CALL
MOVE$CHILD.CPOS IN PROCEDURE MOVEMENT_OPTIONS
     11442**DCL     11563>>ASSIGN
MOVE$CHILD.SUBLK$ IN PROCEDURE MOVEMENT_OPTIONS
     11449**DCL     11471>>IF      11473>>CALL
MOVEMENTS
     11102**PROC     8760--CALL    10992--CALL
MOVEMENTS_FAILED
      8850**LABEL    8760--CALLALT
MOVEMENTS_FAILED IN PROCEDURE ADJUST_LIST
     10990**LABEL   10992--CALLALT
MOVEMENT_OPERAND IN PROCEDURE MOVEMENTS
     11624**PROC    11285--CALL    11300--CALL
MOVEMENT_OPERAND_FAILED IN PROCEDURE MOVEMENTS
     11300**LABEL   11285--CALLALT 11300--CALLALT
MOVEMENT_OPTIONS IN PROCEDURE MOVEMENTS
     11355**PROC    11298--CALL
MOVEMENT_OPTIONS_FAILED IN PROCEDURE MOVEMENTS
     11300**LABEL   11298--CALLALT
MOVE_CHILD$ IN PROCEDURE MOVEMENT_OPTIONS
     11405**DCL     11416--IMP-PTR 11460<<ASSIGN  11462>>ASSIGN  11462>>ASSIGN  11465>>DOCASE  11471>>IF
     11473>>CALL    11508>>CALL    11563>>ASSIGN
MOVE_CHILD_INDEX IN PROCEDURE MOVEMENT_OPTIONS
     11404**DCL     11459<<DOINDEX 11460>>ASSIGN
NAME$DESC IN PROCEDURE DOMAIN_OPERAND
     10181**DCL     10722<>CALL
NAME$DESC.FILE_KEY IN PROCEDURE DOMAIN_OPERAND
     10217**DCL     10740>>ASSIGN
NAME$DESC.FILE_KEY.REP# IN PROCEDURE DOMAIN_OPERAND
     10219**DCL     10611>>IF      10740>>IF
NAME$DESC.FILE_KEY.V$ IN PROCEDURE DOMAIN_OPERAND
     10219**DCL     10611>>ASSIGN  10611--ASSIGN  10740>>CALL    10740>>CALL
NAME$DESC.OPTIONS.COMPONENT# IN PROCEDURE DOMAIN_OPERAND
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:236  
     10302**DCL     10757>>ASSIGN
NAME$DESC.OPTIONS.EXIST# IN PROCEDURE DOMAIN_OPERAND
     10303**DCL     10762>>ASSIGN
NAME$DESC.OPTIONS.LEVEL# IN PROCEDURE DOMAIN_OPERAND
     10302**DCL     10755>>ASSIGN
NAME$DESC.OPTIONS.PROTECT# IN PROCEDURE DOMAIN_OPERAND
     10302**DCL     10760>>ASSIGN
NAME$DESC.OPTIONS.STRUCTURE$ IN PROCEDURE DOMAIN_OPERAND
     10302**DCL     10752>>ASSIGN
NAME$FILE_KEY.BYTES IN PROCEDURE DOMAIN_OPERAND
     10338**DCL     10624>>IF
NAME$FILE_KEY.LENGTH# IN PROCEDURE DOMAIN_OPERAND
     10336**DCL     10338--IMP-SIZ 10624>>IF
NAME$NODE.ACCESS IN PROCEDURE PLO_NAME
     12414**DCL     12581>>IF
NAME_DESC$ IN PROCEDURE DOMAIN_OPERAND
     10125**DCL     10181--IMP-PTR 10601<>CALL    10611>>IF      10611>>ASSIGN  10611>>ASSIGN  10722>>CALL
     10740>>ASSIGN  10740>>IF      10740>>CALL    10740>>CALL    10752>>ASSIGN  10755>>ASSIGN  10757>>ASSIGN
     10760>>ASSIGN  10762>>ASSIGN
NAME_FILE_KEY$ IN PROCEDURE DOMAIN_OPERAND
     10126**DCL     10328--IMP-PTR 10611<<ASSIGN  10611<<ASSIGN  10624>>IF      10624>>IF
NAME_NODE$ IN PROCEDURE PLO_NAME
     12177**DCL     12376--IMP-PTR 12534<>CALL    12581>>IF
NEW$ADJUST.PARENT$ IN PROCEDURE ALLOC_IT_ADJUST
     13051**DCL     13061<<ASSIGN
NEW$SELECT.PARENT$ IN PROCEDURE ALLOC_IT_SELECT
     13163**DCL     13173<<ASSIGN
NEW_ADJUST$ IN PROCEDURE ALLOC_IT_ADJUST
     13014**DCL     13025--IMP-PTR 13059<<ASSIGN  13061>>ASSIGN  13063>>ASSIGN  13065>>ASSIGN  13066>>ASSIGN
     13067>>ASSIGN
NEW_SELECT$ IN PROCEDURE ALLOC_IT_SELECT
     13126**DCL     13137--IMP-PTR 13171<<ASSIGN  13173>>ASSIGN  13175>>ASSIGN  13177>>ASSIGN  13178>>ASSIGN
     13179>>ASSIGN
NO_EDIT_BLOCK_FAILURE
      8827**LABEL    8752--GOTO
NUMBER IN PROCEDURE MOVEMENT_OPERAND
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:237  
     11673**DCL     11841<>CALL    11907<>CALL    11916<>CALL    11924>>IF      11924>>IF      11931>>ASSIGN
NUMBER IN PROCEDURE MOVEMENT_OPTIONS
     11406**DCL     11473<>CALL    11476>>IF      11476>>IF      11479>>ASSIGN
OALLOC_FAILED
      8866**LABEL    8713--CALLALT
OALLOC_FAILED IN PROCEDURE ALLOC_IT_ADJUST
     13074**LABEL   13057--CALLALT
OALLOC_FAILED IN PROCEDURE ALLOC_IT_SELECT
     13181**LABEL   13169--CALLALT
OALLOC_FAILED IN PROCEDURE DOMAIN_OPERAND
     10781**LABEL   10660--CALLALT 10681--CALLALT
OALLOC_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11808--CALLALT 11854--CALLALT 11863--CALLALT 11881--CALLALT 11897--CALLALT 11944--CALLALT
OALLOC_FAILED IN PROCEDURE PLO_NAME
     12619**LABEL   12576--CALLALT 12586--CALLALT 12613--CALLALT
OALLOC_FAILED IN PROCEDURE STRING_EXPRESSION
     10028**LABEL    9825--CALLALT  9894--CALLALT  9916--CALLALT  9972--CALLALT
OCOPY_FAILED IN PROCEDURE DOMAIN_OPERAND
     10781**LABEL   10701--CALLALT 10722--CALLALT
OCOPY_FAILED IN PROCEDURE PLO_NAME
     12619**LABEL   12596--CALLALT
OFREE_FAILED
      8866**LABEL    8864--CALLALT
OFREE_FAILED IN PROCEDURE ABS_IT_OPERAND
     12792**LABEL   12783--CALLALT 12792--CALLALT
OFREE_FAILED IN PROCEDURE DOMAIN_OPERAND
     10781**LABEL   10789--CALLALT
OFREE_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11844--CALLALT 11849--CALLALT 11860--CALLALT 11910--CALLALT 11919--CALLALT 12030--CALLALT
OFREE_FAILED IN PROCEDURE STRING_EXPRESSION
     10028**LABEL   10020--CALLALT
OPEN_OPTIONS IN PROCEDURE STRING_EXPRESSION
      9122**DCL      9828<<ASSIGN   9842<>CALL
OPEN_OPTIONS.EXIST# IN PROCEDURE STRING_EXPRESSION
      9127**DCL      9831<<ASSIGN
OPEN_OPTIONS.PROTECT# IN PROCEDURE STRING_EXPRESSION
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:238  
      9126**DCL      9830<<ASSIGN
OPEN_OPTIONS.STRUCTURE$ IN PROCEDURE STRING_EXPRESSION
      9126**DCL      9829<<ASSIGN
OPERAND IN PROCEDURE MOVEMENT_OPERAND
     11632**DCL     11624--PROC    11797<>CALL    11806<>CALL    11949<>CALL
OPERAND.CODE IN PROCEDURE MOVEMENT_OPERAND
     11640**DCL     11785>>ASSIGN  11785>>ASSIGN  11791>>DOCASE  11954<>CALL
OPERAND.CPOS IN PROCEDURE MOVEMENT_OPERAND
     11658**DCL     12025>>ASSIGN
OPERAND.NSUBLKS IN PROCEDURE MOVEMENT_OPERAND
     11644**DCL     11903>>IF
OPERAND.SUBLK$ IN PROCEDURE MOVEMENT_OPERAND
     11665**DCL     11841>>CALL    11905>>IF      11907>>CALL    11916>>CALL
OPTIONS IN PROCEDURE PROCESSING_OPTIONS
      8945**DCL      8969<<ASSIGN   9023>>ASSIGN
OPTIONS.EXIST# IN PROCEDURE PROCESSING_OPTIONS
      8950**DCL      9001>>IF       9003<<ASSIGN   9006>>IF       9008<<ASSIGN   9011>>IF       9013<<ASSIGN
OPTIONS.PROTECT# IN PROCEDURE PROCESSING_OPTIONS
      8949**DCL      8977>>IF       8980<<ASSIGN   8982<<ASSIGN
OPTIONS.STRUCTURE$ IN PROCEDURE PROCESSING_OPTIONS
      8949**DCL      8985>>IF       8990<<ASSIGN   8993<<ASSIGN   8996<<ASSIGN
OPTION_LOOP IN PROCEDURE PROCESSING_OPTIONS
      8972**LABEL    9016--EXIT
OTHER_FAILURE
      8862**LABEL    8822--CALLALT  8827--CALLALT  8832--CALLALT
OUT$BLK IN PROCEDURE MOVEMENTS
     11197**DCL     11300<>CALL    11473<>CALL    11841<>CALL    11907<>CALL
OUT$BLK.CODE IN PROCEDURE MOVEMENTS
     11205**DCL     11471>>IF      11905>>IF
OUT$BLK.SUBLK$ IN PROCEDURE MOVEMENTS
     11230**DCL     11473>>CALL    11841>>CALL
OUT$SYM.COUNT IN PROCEDURE DOMAIN_OPERAND
     10165**DCL     10168--IMP-SIZ
OUT$SYM.TEXTC$ IN PROCEDURE DOMAIN_OPERAND
     10160**DCL     10601>>CALL    10601>>CALL    10675>>CALL    10675>>CALL
OUT$SYM.COUNT IN PROCEDURE MOVEMENTS
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:239  
     11266**DCL     11269--IMP-SIZ
OUT$SYM.TEXTC$ IN PROCEDURE MOVEMENTS
     11261**DCL     11916<>CALL
PFILE_TO_EDIT_FAILED IN PROCEDURE DOMAIN_OPERAND
     10788**LABEL   10675--CALLALT
PLO_NAME IN PROCEDURE MOVEMENT_OPERAND
     12126**PROC    11797--CALL
PLO_NAME_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11797--CALLALT
PNUMBER_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11912--GOTO
PNUMBER_FAILED IN PROCEDURE MOVEMENT_OPTIONS
     11563**LABEL   11473--CALLALT
PNUMBER_FAILED IN PROCEDURE SELECT_CLAUSE
     10897**LABEL   10881--CALLALT
PNUMERIC_KEY_FAILED
      8850**LABEL    8772--CALLALT
PNUMERIC_KEY_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11806--CALLALT
POSITION_NOT_IN_RANGE_FAILURE IN PROCEDURE MOVEMENT_OPERAND
     12019**LABEL   11926--GOTO
PPATTERN_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12030**LABEL   11949--CALLALT
PREAD_LO_NAME_FAILED IN PROCEDURE DOMAIN_OPERAND
     10781**LABEL   10601--CALLALT
PREAD_LO_NAME_FAILED IN PROCEDURE PLO_NAME
     12619**LABEL   12534--CALLALT
PREDEF$KEY.OBJECT.CLASS# IN PROCEDURE DOMAIN_OPERAND
     10560**DCL     10688>>IF
PREDEF$KEY.UNIQUE.FNAME.BYTES IN PROCEDURE DOMAIN_OPERAND
     10564**DCL     10689>>ASSIGN
PREDEF$NODE.FILE_STCLASS IN PROCEDURE DOMAIN_OPERAND
     10516**DCL     10691>>CALLBLT
PREDEF$NODE.KEY IN PROCEDURE DOMAIN_OPERAND
     10515**DCL     10691>>CALLBLT
PREV_CHILD_INDEX
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:240  
      7294**DCL      8755<<ASSIGN   8757>>DOWHILE  8759<<ASSIGN
PROCESSING_OPTIONS
      8933**PROC     8733--CALL
PROCESSING_OPTIONS_FAILED
      8850**LABEL    8733--CALLALT
PSTRING_FAILED IN PROCEDURE MOVEMENT_OPERAND
     12025**LABEL   11846--GOTO
PSTRING_FAILED IN PROCEDURE STRING_EXPRESSION
     10015**LABEL    9881--CALLALT
PT$SYMBOL.COUNT IN PROCEDURE PLO_NAME
     12213**DCL     12216--IMP-SIZ 12581>>IF      12586>>CALL    12590>>ASSIGN  12591>>ASSIGN  12613>>CALL
     12618>>ASSIGN  12619>>ASSIGN
PT$SYMBOL.TEXT IN PROCEDURE PLO_NAME
     12216**DCL     12581>>IF      12591>>ASSIGN  12619>>ASSIGN
PT$SYMBOL.TEXTC$ IN PROCEDURE PLO_NAME
     12208**DCL     12534>>CALL    12534>>CALL
PT_BLOCK_EXPR
      6507**DCL       204--PROC
PT_BLOCK_EXPR.CODE
      6515**DCL      8721>>ASSIGN   8721>>ASSIGN   8724>>IF
PT_BLOCK_EXPR.NSUBLKS
      6519**DCL      8750>>IF       8757>>DOWHILE  8769>>IF       8783>>IF       8972>>DOWHILE 10865>>IF
     10975>>IF      11277>>IF      11291>>DOWHILE
PT_BLOCK_EXPR.SUBLK$
      6540**DCL      8731>>ASSIGN   8770>>ASSIGN   8834>>ASSIGN   8973>>ASSIGN   9878>>ASSIGN  10595>>ASSIGN
     10867>>ASSIGN  10977>>ASSIGN  11280>>ASSIGN  11292>>ASSIGN
PT_LO_NAME IN PROCEDURE PLO_NAME
     12134**DCL     12126--PROC
PT_LO_NAME.CPOS IN PROCEDURE PLO_NAME
     12160**DCL     12622>>ASSIGN
PT_LO_NAME.SUBLK$ IN PROCEDURE PLO_NAME
     12167**DCL     12533>>ASSIGN
PT_MOVEMENT IN PROCEDURE MOVEMENT_OPTIONS
     11363**DCL     11355--PROC
PT_MOVEMENT.NSUBLKS IN PROCEDURE MOVEMENT_OPTIONS
     11375**DCL     11459>>DOINDEX
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:241  
PT_MOVEMENT.SUBLK$ IN PROCEDURE MOVEMENT_OPTIONS
     11396**DCL     11460>>ASSIGN
PT_SYMBOL$ IN PROCEDURE PLO_NAME
     12175**DCL     12190--IMP-PTR 12533<<ASSIGN  12534>>CALL    12534>>CALL    12581>>IF      12581>>IF
     12586>>CALL    12590>>ASSIGN  12591>>ASSIGN  12591>>ASSIGN  12613>>CALL    12618>>ASSIGN  12619>>ASSIGN
     12619>>ASSIGN
RET_CODE IN PROCEDURE MOVEMENT_OPERAND
     11690**DCL     11841<>CALL    11848>>IF
RET_CODE IN PROCEDURE STRING_EXPRESSION
      9174**DCL      9881<>CALL     9905>>IF       9905>>IF       9907>>IF       9938<<ASSIGN   9941>>IF
      9941>>IF       9947>>IF       9956>>IF       9998>>DOSELCT
RPT_COUNT IN PROCEDURE SELECT_CLAUSE
     10861**DCL     10881<>CALL    10884>>IF      10884>>IF      10887>>ASSIGN
RPT_COUNT_NOT_IN_RANGE_FAILURE IN PROCEDURE SELECT_CLAUSE
     10903**LABEL   10886--GOTO
SAVE_ACCESSOR_PRIV IN PROCEDURE STRING_EXPRESSION
      9098**DCL      9840<<ASSIGN   9966>>ASSIGN  10028>>ASSIGN
SELECT_CLAUSE
     10858**PROC     8766--CALL
SELECT_CLAUSE_FAILED
      8850**LABEL    8766--CALLALT
SELECT_CLAUSE_LOOP
      8757**LABEL    8778--EXIT
SERIOUS_USER_ERROR IN PROCEDURE MOVEMENT_OPERAND
     12024**LABEL   12008--GOTO    12012--GOTO    12016--GOTO    12020--GOTO
SERIOUS_USER_ERROR IN PROCEDURE MOVEMENT_OPTIONS
     11562**LABEL   11546--GOTO    11550--GOTO    11554--GOTO    11558--GOTO
SKIP_NOT_IN_RANGE_FAILURE IN PROCEDURE MOVEMENT_OPTIONS
     11549**LABEL   11478--GOTO
SKIP_SEEN IN PROCEDURE MOVEMENTS
     11122**DCL     11284<<ASSIGN  11297<<ASSIGN  11468>>IF      11470<<ASSIGN  11794>>IF      11803>>IF
     11818>>IF      11876>>IF      11892>>IF      11939>>IF
SRCH_SEEN IN PROCEDURE MOVEMENTS
     11121**DCL     11283<<ASSIGN  11296<<ASSIGN  11874>>IF      11890>>IF      11937>>IF
STRING$STREAM IN PROCEDURE STRING_EXPRESSION
      9189**DCL      9842<>CALL     9863<>CALL     9945<>CALL     9964<>CALL     9991<>CALL    10034<>CALL
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:242  
STRING$STREAM.PORT$ IN PROCEDURE STRING_EXPRESSION
      9215**DCL      9948>>ASSIGN
STRING_EXPRESSION
      9095**PROC     8725--CALL
STRING_EXPRESSION_FAILED
      8850**LABEL    8725--CALLALT
STRING_LOC IN PROCEDURE STRING_EXPRESSION
      9151**DCL      9871<<ASSIGN   9931>>ASSIGN   9945<>CALL
STRING_LOC.KEY IN PROCEDURE STRING_EXPRESSION
      9165**DCL      9887--ASSIGN   9887--ASSIGN   9959>>ASSIGN
STRING_STREAM$ IN PROCEDURE STRING_EXPRESSION
      9113**DCL      9189--IMP-PTR  9824<<ASSIGN   9825<>CALL     9842>>CALL     9863>>CALL     9945>>CALL
      9948>>ASSIGN   9964>>CALL     9991>>CALL    10034>>CALL
STR_INDEX IN PROCEDURE STRING_EXPRESSION
      9172**DCL      9879<<ASSIGN   9880>>DOUNTIL  9881<>CALL     9935>>IF
T$
      7298**DCL      9916<>CALL     9919>>ASSIGN   9972<>CALL     9974>>ASSIGN  10660<>CALL    10662>>ASSIGN
     11808<>CALL    11810>>ASSIGN  11863<>CALL    11865>>ASSIGN  11881<>CALL    11883>>ASSIGN  11897<>CALL
     11899>>ASSIGN  11944<>CALL    11946>>ASSIGN  12576<>CALL    12578>>ASSIGN  12613<>CALL    12617>>ASSIGN
     13057<>CALL    13059>>ASSIGN  13169<>CALL    13171>>ASSIGN
TOO_MANY_DIRECTIONS_FAILURE IN PROCEDURE MOVEMENT_OPTIONS
     11553**LABEL   11484--GOTO    11489--GOTO
TOO_MANY_POINTS_FAILURE IN PROCEDURE MOVEMENT_OPTIONS
     11557**LABEL   11494--GOTO    11499--GOTO    11504--GOTO
TOO_MANY_PROC_OPTS_FAILURE IN PROCEDURE PROCESSING_OPTIONS
      9029**LABEL    8978--GOTO     8986--GOTO     9002--GOTO     9007--GOTO     9012--GOTO
TOO_MANY_SKIPS_FAILURE IN PROCEDURE MOVEMENT_OPTIONS
     11545**LABEL   11469--GOTO
TOO_MANY_WILD_STRINGS_FAILURE IN PROCEDURE STRING_EXPRESSION
     10002**LABEL    9924--GOTO
UNPROCESSED_NODE_FAILURE
      8832**LABEL    8784--GOTO
VD$FILE_KEY IN PROCEDURE DOMAIN_OPERAND
     10448**DCL     10701<>CALL
VD$FILE_KEY.LENGTH# IN PROCEDURE DOMAIN_OPERAND
     10475**DCL     10695<<ASSIGN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:243  
VD$FILE_KEY.UNIQUE.FNAME.BYTES IN PROCEDURE DOMAIN_OPERAND
     10477**DCL     10689<<ASSIGN  10691<<CALLBLT 10693>>CALLBLT
VD$FILE_KEY.UNIQUE.FNAME.LENGTH# IN PROCEDURE DOMAIN_OPERAND
     10476**DCL     10694<<ASSIGN
VD$FILE_NODE.DESC.SPEC.V$
      8359**DCL      8705>>ASSIGN
VD$IT_OPERAND
      8447**DCL     12783<>CALL    12792<>CALL
VD$KEY_NUMBER.BYTES#
      7861**DCL      8774>>IF
VD$KEY_NUMBER.BYTES# IN PROCEDURE MOVEMENT_OPERAND
     11707**DCL     11931<<ASSIGN
VD$KEY_NUMBER.LENGTH# IN PROCEDURE MOVEMENT_OPERAND
     11707**DCL     11930<<ASSIGN
VD$KEY_NUMBER.BYTES# IN PROCEDURE STRING_EXPRESSION
      9791**DCL      9887<<ASSIGN   9887>>ASSIGN   9936<<ASSIGN   9936>>ASSIGN
VD$PORT.LEVEL.INTERNAL$
      8697**DCL      9948>>ASSIGN
VD$STRING_HEADER
      8574**DCL     11854--CALL    12586--CALL    12613--CALL
VD$TEXTC IN PROCEDURE DOMAIN_OPERAND
     10576**DCL     10601<>CALL    10675<>CALL
VD$TEXTC.LENGTH# IN PROCEDURE DOMAIN_OPERAND
     10584**DCL     10586--IMP-SIZ 10601>>CALL    10675>>CALL
VD$TEXTC IN PROCEDURE PLO_NAME
     12515**DCL     12534<>CALL
VD$TEXTC.LENGTH# IN PROCEDURE PLO_NAME
     12523**DCL     12525--IMP-SIZ 12534>>CALL
VD$TEXTC.LENGTH# IN PROCEDURE STRING_EXPRESSION
      9810**DCL      9812--IMP-SIZ  9880>>DOUNTIL  9935>>IF
VD$TEXTC_REMOTE
      8530**DCL     10740<>CALL
VD$TEXTC_REMOTE.BYTES
      8561**DCL     11859<<ASSIGN  12591<<ASSIGN  12619<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      8559**DCL      8561--IMP-SIZ 10611--ASSIGN  10621--ASSIGN  10740>>CALL    11858<<ASSIGN  11859>>ASSIGN
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:244  
     12545--ASSIGN  12556--ASSIGN  12569--ASSIGN  12590<<ASSIGN  12591>>ASSIGN  12618<<ASSIGN  12619>>ASSIGN
     12620<>CALL
VDA$FCLOSE
      6558**DCL-ENT  9964--CALL
VDA$FOPEN
      6555**DCL-ENT  9842--CALL
VDA$LDELETE
      6557**DCL-ENT  9863--CALL
VDA$LWRITE
      6556**DCL-ENT  9945--CALL
VDE$PFILE_TO_EDIT
      6552**DCL-ENT 10675--CALL
VDE$PNUMBER
      6550**DCL-ENT 10881--CALL    11473--CALL    11907--CALL
VDE$PNUMERIC_KEY
      6551**DCL-ENT  8772--CALL    11806--CALL
VDE$PPATTERN
      6553**DCL-ENT 11949--CALL
VDE$PREAD_LO_NAME
      6554**DCL-ENT 10601--CALL    12534--CALL
VDE$PSTRING
      6549**DCL-ENT  9881--CALL    11841--CALL
VDG$ERRMSG
      6559**DCL-ENT  8822--CALL     8827--CALL     8832--CALL     9029--CALL     9997--CALL    10015--CALL
     10903--CALL    11562--CALL    12024--CALL    12620--CALL    12803--CALL
VDG$ESCREECH
      6564**DCL-ENT  8704--CALL     8707--CALL     8711--CALL     8846--CALL    10765--CALL    11508--CALL
     11954--CALL    12612--CALL
VDG$OALLOC
      6562**DCL-ENT  8713--CALL     9825--CALL     9894--CALL     9916--CALL     9972--CALL    10660--CALL
     10681--CALL    11808--CALL    11854--CALL    11863--CALL    11881--CALL    11897--CALL    11944--CALL
     12576--CALL    12586--CALL    12613--CALL    13057--CALL    13169--CALL
VDG$OCOPY
      6560**DCL-ENT 10701--CALL    10722--CALL    10740--CALL    12596--CALL
VDG$OFREE
      6563**DCL-ENT  8864--CALL     9991--CALL    10020--CALL    10034--CALL    10789--CALL    11844--CALL
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:245  
     11849--CALL    11860--CALL    11910--CALL    11919--CALL    12030--CALL    12783--CALL    12792--CALL
VD_$COMPONENT.V#
      6863**DCL     10709>>ASSIGN
VD_$DIRECTION.V#
      6908**DCL     11879>>ASSIGN  11895>>ASSIGN  11942>>ASSIGN
VD_$EXIST.V#
      6953**DCL     10713>>ASSIGN
VD_$POINT.V#
      6998**DCL     11775>>ASSIGN
VD_$PROTECT.V#
      7043**DCL     10711>>ASSIGN
VD_$SEARCH.V#
      7088**DCL     11875>>ASSIGN  11891>>ASSIGN  11938>>ASSIGN
VD_$SKIP.V#
      7133**DCL     11877>>ASSIGN  11893>>ASSIGN  11940>>ASSIGN
VD_$STRUCTURE.V$
      7178**DCL     10705>>ASSIGN
VD_6E.EQUALS$
      6581**DCL      8174--IMP-PTR 10686>>ASSIGN
VD_6E.ERR_HEAD$
      6600**DCL      7872--IMP-PTR  8862>>IF
VD_6E.ERR_TAIL$
      6600**DCL      7925--IMP-PTR  8838>>ASSIGN   8843>>ASSIGN   8850>>ASSIGN  10000>>ASSIGN  10002>>ASSIGN
     10004>>ASSIGN  10006>>ASSIGN  10008>>ASSIGN  10788>>ASSIGN  10904>>ASSIGN  11563>>ASSIGN  12025>>ASSIGN
     12622>>ASSIGN
VD_6E.LOCATIONS$
      6581**DCL      8068--IMP-PTR
VD_6E.STATS_TOKENS#
      6602**DCL      8721<<ASSIGN   8721>>ASSIGN  11462<<ASSIGN  11462>>ASSIGN  11785<<ASSIGN  11785>>ASSIGN
VD_6E.STRUCTURE_EDITKEY$
      6582**DCL      8993>>ASSIGN
VD_6E.STRUCTURE_SCRATCH$
      6583**DCL      9829>>ASSIGN   9855>>ASSIGN
VD_6E.STRUCTURE_SEQUENTIAL$
      6583**DCL      8996>>ASSIGN
VD_6E.STRUCTURE_STRINGKEY$
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:246  
      6583**DCL      8990>>ASSIGN
VD_6E.WILD_STRINGS$
      6599**DCL      9564--IMP-PTR  9868>>IF       9869>>ASSIGN   9915>>IF       9919<<ASSIGN   9920>>ASSIGN
      9923>>IF       9926>>ASSIGN   9926>>ASSIGN   9928>>ASSIGN   9928>>ASSIGN
VD_ACCESSOR_PRIV
      7181**DCL      9840>>ASSIGN   9841<<ASSIGN   9966<<ASSIGN  10028<<ASSIGN
VD_CMD_OBJECTS$
      7284**DCL     12607>>DOWHILE 12617<<ASSIGN  12618>>ASSIGN  12619>>ASSIGN  12619>>ASSIGN  12620>>CALL
VD_CURRENT_WINDOW$
      6604**DCL      8703>>IF       8705>>ASSIGN
VD_FKEY_SCRATCH_SOURCE
      7214**DCL      9977--ASSIGN
VD_KEY_NUMERIC_BOF
      6815**DCL      9851>>ASSIGN   9871>>ASSIGN  10699>>ASSIGN  10744>>ASSIGN
VD_KEY_SCRATCH_SOURCE
      7259**DCL      9842<>CALL     9849>>ASSIGN
VD_PARSED_PREDEF_FILE$ IN PROCEDURE DOMAIN_OPERAND
     10130**DCL     10489--IMP-PTR 10535--IMP-PTR 10686<<ASSIGN  10688>>IF      10689>>ASSIGN  10691>>CALLBLT
     10691>>CALLBLT
WILD$STRING.W IN PROCEDURE STRING_EXPRESSION
      9707**DCL      9926--ASSIGN
WILD$STRING.W.N# IN PROCEDURE STRING_EXPRESSION
      9707**DCL      9930<<ASSIGN
WILD$STRING.W.RANGE.ENDD IN PROCEDURE STRING_EXPRESSION
      9759**DCL      9933<<ASSIGN   9936--ASSIGN   9936--ASSIGN
WILD$STRING.W.RANGE.START IN PROCEDURE STRING_EXPRESSION
      9731**DCL      9931<<ASSIGN   9933>>ASSIGN
WILD$STRING.W.RANGE.START.POSITION# IN PROCEDURE STRING_EXPRESSION
      9747**DCL      9932<<ASSIGN
WILD$STRINGS IN PROCEDURE STRING_EXPRESSION
      9564**DCL      9916--CALL
WILD$STRINGS.N_WILDCARDS# IN PROCEDURE STRING_EXPRESSION
      9592**DCL      9869<<ASSIGN   9920<<ASSIGN   9923>>IF       9926>>ASSIGN   9928<<ASSIGN   9928>>ASSIGN
WILD$STRINGS.W IN PROCEDURE STRING_EXPRESSION
      9592**DCL      9916--CALL
WILD_STRING$ IN PROCEDURE STRING_EXPRESSION
PL6.E3A0      #001=VDE$PBLOCK_EXPR File=VDE$PARSE.:VDA5TSI                       FRI 07/04/97 11:13 Page:247  
      9178**DCL      9679--IMP-PTR  9926<<ASSIGN   9930>>ASSIGN   9931>>ASSIGN   9932>>ASSIGN   9933>>ASSIGN
      9933>>ASSIGN   9936>>ASSIGN   9936>>ASSIGN
WRITTEN$NODE.DESC.DATA$ IN PROCEDURE STRING_EXPRESSION
      9479**DCL      9957>>ASSIGN
WRITTEN$NODE.DESC.EOR IN PROCEDURE STRING_EXPRESSION
      9479**DCL      9950<<ASSIGN
WRITTEN_NODE$ IN PROCEDURE STRING_EXPRESSION
      9176**DCL      9398--IMP-PTR  9948<<ASSIGN   9950>>ASSIGN   9957>>ASSIGN
X$DEC_CONVERT
      6565**DCL-ENT 11916--CALL
XUE$EXP IN PROCEDURE STRING_EXPRESSION
      9293**DCL      9881<>CALL
XUE_ECB.OUT$
      6651**DCL      9880>>DOUNTIL  9935>>IF
XUE_EXP$ IN PROCEDURE STRING_EXPRESSION
      9171**DCL      9293--IMP-PTR  9878<<ASSIGN   9881>>CALL     9884>>IF       9885<<ASSIGN

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:248  
     2200        1        /*T***********************************************************/
     2201        2        /*T*                                                         */
     2202        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2203        4        /*T*                                                         */
     2204        5        /*T***********************************************************/
     2205        6
     2206        7        /*D* NAME: VDE$PPATTERN
     2207        8            PARAMETERS:
     2208        9                PT_PATTERN - The T_PATTERN node.  This node must be either
     2209       10                    a .QUOTE node, or the root of a string expression.
     2210       11                PATTERN$ - An uninitialized pointer.
     2211       12            INPUT:
     2212       13                VD_$PATTERN - A VD$POINTER for the predefined name "$PATTERN".
     2213       14                    The value of this name must be either NIL or a pointer to
     2214       15                    a VD$PATTERN structure for the last pattern searched for.
     2215       16            OUTPUT:
     2216       17                PATTERN$ will contain a ptr to a VD$PATTERN structure
     2217       18                    containing the compiled pattern.
     2218       19                VD_$PATTERN.V$ will point to a copy of the VD$PATTERN for
     2219       20                    this pattern string.  Any structure pointed-to by
     2220       21                    VD_$PATTERN.V$ at entry will be freed.
     2221       22            DESCRIPTION:
     2222       23                The ParseTree for PT_PATTERN is:
     2223       24
     2224       25                   T_PATTERN                      T_PATTERN
     2225       26                       |          -- or --            |
     2226       27                    dstring                     T_STRING_EXPR
     2227       28                                                      |
     2228       29                                                   XUE_EXP#
     2229       30
     2230       31
     2231       32                If we have a dstring, set up to use the textc in the dstring node.
     2232       33                If we have an %XUE_EXP node, call VDE$PSTRING to evaluate it.
     2233       34                    By not passing a BUFFER$ parameter to VDE$PSTRING, we're
     2234       35                    telling it to just evaluate the expression.  Then
     2235       36                    set up to use the textc in XUE_ECB.
     2236       37                If the textc for the pattern string is an empty string
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:249  
     2237       38                and VD_$PATTERN.V$ is non-NIL:
     2238       39                    Skip the compilation process altogether.  Just use the
     2239       40                        VD$PATTERN pointed-to by VD_$PATTERN.V$ as
     2240       41                        the pattern to search for.
     2241       42                Otherwise, compile the pattern expression into a VD$PATTERN
     2242       43                structure:
     2243       44                    Allocate and initialize the VD$PATTERN structure.
     2244       45                        We'll just make a guess as to how much storage to
     2245       46                        allocate; if it isn't enough, we'll free the old
     2246       47                        one, allocate a bigger one and try again.
     2247       48                    Call VDE$PPATT_STRING to build the VD$PATTERN from the textc
     2248       49                        for the pattern string.
     2249       50                Free any VD$PATTERN pointed-to by VD_$PATTERN.V$, and point
     2250       51                     VD_$PATTERN.V$ to a copy the VD$PATTERN just built.
     2251       52        */
     2252       53
     2253       54        VDE$PPATTERN: PROC (PT_PATTERN, PATTERN$) ALTRET;
     2254       55
     2255       56        %INCLUDE VD_MACROS_M;
     2256     2271        %INCLUDE VD_PERR_C;
     2257     2419        %INCLUDE VD_NODES0_E;
     2258     2511        %INCLUDE XU_MACRO_C;
     2259     5605        %INCLUDE XU_SUBS_C;
     2260     5697        %INCLUDE XUE_MACRO_C;
     2261     6441
     2262     6442        %PARSE$OUT (NAME=PT_PATTERN, STCLASS="");
     2263     6487    1   DCL PATTERN$ PTR;
     2264     6488
     2265     6489
     2266     6490    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
     2267     6491    1   DCL VDE$PPATT_STRING    ENTRY (4) ALTRET;
     2268     6492    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2269     6493    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2270     6494    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2271     6495    1   DCL VDG$ESCREECH        ENTRY (3);
     2272     6496
     2273     6497
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:250  
     2274     6498        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     2275     6700        %VD$POINTER (NAME=VD_$PATTERN, STCLASS=SYMREF);
     2276     6745
     2277     6746
     2278     6747
     2279     6748    1   DCL PATT_STRING$ PTR;
     2280     6749    1   DCL MX_ENTRIES SBIN;
     2281     6750    1   DCL SCAN_INDEX SBIN;
     2282     6751    1   DCL NEED_MORE_ENTRIES BIT(1) ALIGNED;
     2283     6752
     2284     6753
     2285     6754        %VD$PATTERN (NAME=PATTERN, STCLASS="BASED(PATTERN$)");
     2286     6805        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
     2287     6843        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
     2288     6888        %VD$TEXTC (NAME=PATT$STRING, STCLASS="BASED(PATT_STRING$)");
     2289     6911
     2290     6912
     2291     6913
     2292     6914    1           PATTERN$ = ADDR(NIL);
     2293     6915    1           MX_ENTRIES = %N_PATTERN_ENTRIES_INCR;
     2294     6916
     2295     6917    1           IF PT_PATTERN.SUBLK$ (0) -> OUT$SYM.NDTYPE = %DSTRING# THEN
     2296     6918    1              PATT_STRING$ = PT_PATTERN.SUBLK$ (0) -> OUT$SYM.TEXTC$;
     2297     6919    2           ELSE DO;
     2298     6920    2              SCAN_INDEX = 0;
     2299     6921    2              CALL VDE$PSTRING (PT_PATTERN.SUBLK$(0)->OUT$BLK.SUBLK$(0)->
     2300     6922    2                OUT$BLK, SCAN_INDEX)
     2301     6923    2                ALTRET (PSTRING_FAILED);
     2302     6924    2              PATT_STRING$ = XUE_ECB.OUT$;
     2303     6925    2              END;
     2304     6926
     2305     6927    1           IF PATT$STRING.LENGTH# = 0 THEN
     2306     6928    2   USE_LAST_PATTERN: DO;
     2307     6929    2              PATTERN$ = VD_$PATTERN.V$;
     2308     6930    2              VD_$PATTERN.V$ = ADDR(NIL);
     2309     6931    2              END USE_LAST_PATTERN;
     2310     6932
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:251  
     2311     6933
     2312     6934    1   BUILD_PATTERN:
     2313     6935    2           DO WHILE PATTERN$ = ADDR(NIL);
     2314     6936    2              CALL VDG$OALLOC (%CLS_PATTERN, PATTERN$,
     2315     6937    2                POFFW(ADDR(PATTERN.ENTRIES), ADDR(PATTERN)) +
     2316     6938    2                (MX_ENTRIES * SIZEW(PATTERN.ENTRIES)))
     2317     6939    2                ALTRET (OALLOC_FAILED);
     2318     6940    2              IF PATTERN.MX_ENTRIES# ~= MX_ENTRIES THEN
     2319     6941    2                 CALL VDG$ESCREECH (PATTERN.MX_ENTRIES#, MX_ENTRIES);
     2320     6942
     2321     6943    2              SCAN_INDEX = 0;
     2322     6944    2              CALL VDE$PPATT_STRING (PATT$STRING, SCAN_INDEX,
     2323     6945    2                PATTERN, NEED_MORE_ENTRIES)
     2324     6946    2                ALTRET (PPATT_STRING_FAILED);
     2325     6947    3              IF NEED_MORE_ENTRIES THEN DO;
     2326     6948    3                 CALL VDG$OFREE (PATTERN)
     2327     6949    3                   ALTRET (OFREE_FAILED);
     2328     6950    3                 PATTERN$ = ADDR(NIL);
     2329     6951    3                 MX_ENTRIES = MX_ENTRIES + %N_PATTERN_ENTRIES_INCR;
     2330     6952    3                 END;
     2331     6953    2              END BUILD_PATTERN;
     2332     6954
     2333     6955
     2334     6956    2           IF VD_$PATTERN.V$ ~= ADDR(NIL) THEN DO;
     2335     6957    2              CALL VDG$OFREE (VD_$PATTERN.V$ -> PATTERN)
     2336     6958    2                ALTRET (OFREE_FAILED);
     2337     6959    2              END;
     2338     6960    1           CALL VDG$OCOPY (PATTERN, VD_$PATTERN.V$)
     2339     6961    1             ALTRET (OCOPY_FAILED);
     2340     6962
     2341     6963    1           RETURN;
     2342     6964
     2343     6965
     2344     6966
     2345     6967    1   PPATT_STRING_FAILED:
     2346     6968    2           IF PATTERN$ ~= ADDR(NIL) THEN DO;
     2347     6969    2              CALL VDG$OFREE (PATTERN)
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:252  
     2348     6970    2                ALTRET (OFREE_FAILED);
     2349     6971    2              PATTERN$ = ADDR(NIL);
     2350     6972    2              END;
     2351     6973    1           ALTRETURN;
     2352     6974
     2353     6975
     2354     6976    1   PSTRING_FAILED: ;
     2355     6977    1   OALLOC_FAILED: ;
     2356     6978    1   OFREE_FAILED: ;
     2357     6979    1   OCOPY_FAILED: ;
     2358     6980    1           ALTRETURN;
     2359     6981
     2360     6982    1   END VDE$PPATTERN;
     2361     6983        %EOD;

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:253  
--  Include file information  --

   XUE_MACRO_C.:LIBRARY  is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PPATTERN.

   Procedure VDE$PPATTERN requires 145 words for executable code.
   Procedure VDE$PPATTERN requires 18 words of local(AUTO) storage.

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:254  

 Object Unit name= VDE$PPATTERN                               File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:14:51.60 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   145    221  VDE$PPATTERN
    1  RoData even  none     4      4  VDE$PPATTERN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  VDE$PPATTERN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       5 VDE$PSTRING
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       4 VDE$PPATT_STRING
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:255  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XUE_ECB                               VD_$PATTERN                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:256  


     2200        1        /*T***********************************************************/
     2201        2        /*T*                                                         */
     2202        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2203        4        /*T*                                                         */
     2204        5        /*T***********************************************************/
     2205        6
     2206        7        /*D* NAME: VDE$PPATTERN
     2207        8            PARAMETERS:
     2208        9                PT_PATTERN - The T_PATTERN node.  This node must be either
     2209       10                    a .QUOTE node, or the root of a string expression.
     2210       11                PATTERN$ - An uninitialized pointer.
     2211       12            INPUT:
     2212       13                VD_$PATTERN - A VD$POINTER for the predefined name "$PATTERN".
     2213       14                    The value of this name must be either NIL or a pointer to
     2214       15                    a VD$PATTERN structure for the last pattern searched for.
     2215       16            OUTPUT:
     2216       17                PATTERN$ will contain a ptr to a VD$PATTERN structure
     2217       18                    containing the compiled pattern.
     2218       19                VD_$PATTERN.V$ will point to a copy of the VD$PATTERN for
     2219       20                    this pattern string.  Any structure pointed-to by
     2220       21                    VD_$PATTERN.V$ at entry will be freed.
     2221       22            DESCRIPTION:
     2222       23                The ParseTree for PT_PATTERN is:
     2223       24
     2224       25                   T_PATTERN                      T_PATTERN
     2225       26                       |          -- or --            |
     2226       27                    dstring                     T_STRING_EXPR
     2227       28                                                      |
     2228       29                                                   XUE_EXP#
     2229       30
     2230       31
     2231       32                If we have a dstring, set up to use the textc in the dstring node.
     2232       33                If we have an %XUE_EXP node, call VDE$PSTRING to evaluate it.
     2233       34                    By not passing a BUFFER$ parameter to VDE$PSTRING, we're
     2234       35                    telling it to just evaluate the expression.  Then
     2235       36                    set up to use the textc in XUE_ECB.
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:257  
     2236       37                If the textc for the pattern string is an empty string
     2237       38                and VD_$PATTERN.V$ is non-NIL:
     2238       39                    Skip the compilation process altogether.  Just use the
     2239       40                        VD$PATTERN pointed-to by VD_$PATTERN.V$ as
     2240       41                        the pattern to search for.
     2241       42                Otherwise, compile the pattern expression into a VD$PATTERN
     2242       43                structure:
     2243       44                    Allocate and initialize the VD$PATTERN structure.
     2244       45                        We'll just make a guess as to how much storage to
     2245       46                        allocate; if it isn't enough, we'll free the old
     2246       47                        one, allocate a bigger one and try again.
     2247       48                    Call VDE$PPATT_STRING to build the VD$PATTERN from the textc
     2248       49                        for the pattern string.
     2249       50                Free any VD$PATTERN pointed-to by VD_$PATTERN.V$, and point
     2250       51                     VD_$PATTERN.V$ to a copy the VD$PATTERN just built.
     2251       52        */
     2252       53
     2253       54        VDE$PPATTERN: PROC (PT_PATTERN, PATTERN$) ALTRET;

     54  0 000000   000000 700200 xent  VDE$PPATTERN TSX0  ! X66_AUTO_2
         0 000001   000022 000002                    ZERO    18,2

     2254       55
     2255       56        %INCLUDE VD_MACROS_M;
     2256     2271        %INCLUDE VD_PERR_C;
     2257     2419        %INCLUDE VD_NODES0_E;
     2258     2511        %INCLUDE XU_MACRO_C;
     2259     5605        %INCLUDE XU_SUBS_C;
     2260     5697        %INCLUDE XUE_MACRO_C;
     2261     6441
     2262     6442        %PARSE$OUT (NAME=PT_PATTERN, STCLASS="");
     2263     6487    1   DCL PATTERN$ PTR;
     2264     6488
     2265     6489
     2266     6490    1   DCL VDE$PSTRING         ENTRY (5) ALTRET;
     2267     6491    1   DCL VDE$PPATT_STRING    ENTRY (4) ALTRET;
     2268     6492    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:258  
     2269     6493    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2270     6494    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2271     6495    1   DCL VDG$ESCREECH        ENTRY (3);
     2272     6496
     2273     6497
     2274     6498        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     2275     6700        %VD$POINTER (NAME=VD_$PATTERN, STCLASS=SYMREF);
     2276     6745
     2277     6746
     2278     6747
     2279     6748    1   DCL PATT_STRING$ PTR;
     2280     6749    1   DCL MX_ENTRIES SBIN;
     2281     6750    1   DCL SCAN_INDEX SBIN;
     2282     6751    1   DCL NEED_MORE_ENTRIES BIT(1) ALIGNED;
     2283     6752
     2284     6753
     2285     6754        %VD$PATTERN (NAME=PATTERN, STCLASS="BASED(PATTERN$)");
     2286     6805        %PARSE$SYM (NAME=OUT$SYM, STCLASS=BASED);
     2287     6843        %PARSE$OUT (NAME=OUT$BLK, STCLASS=BASED);
     2288     6888        %VD$TEXTC (NAME=PATT$STRING, STCLASS="BASED(PATT_STRING$)");
     2289     6911
     2290     6912
     2291     6913
     2292     6914    1           PATTERN$ = ADDR(NIL);

   6914  0 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000003   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000004   000000 756100                    STQ     0,,PR0

     2293     6915    1           MX_ENTRIES = %N_PATTERN_ENTRIES_INCR;

   6915  0 000005   000024 235007                    LDA     20,DL
         0 000006   200006 755100                    STA     MX_ENTRIES,,AUTO

     2294     6916
     2295     6917    1           IF PT_PATTERN.SUBLK$ (0) -> OUT$SYM.NDTYPE = %DSTRING# THEN

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:259  
   6917  0 000007   200003 471500                    LDP1    @PT_PATTERN,,AUTO
         0 000010   100003 473500                    LDP3    3,,PR1
         0 000011   300000 236100                    LDQ     0,,PR3
         0 000012   000077 376003                    ANQ     63,DU
         0 000013   000005 116003                    CMPQ    5,DU
         0 000014   000020 601000 0                  TNZ     s:6920

     2296     6918    1              PATT_STRING$ = PT_PATTERN.SUBLK$ (0) -> OUT$SYM.TEXTC$;

   6918  0 000015   300003 236100                    LDQ     3,,PR3
         0 000016   200005 756100                    STQ     PATT_STRING$,,AUTO
         0 000017   000034 710000 0                  TRA     s:6927

     2297     6919    2           ELSE DO;

     2298     6920    2              SCAN_INDEX = 0;

   6920  0 000020   200007 450100                    STZ     SCAN_INDEX,,AUTO

     2299     6921    2              CALL VDE$PSTRING (PT_PATTERN.SUBLK$(0)->OUT$BLK.SUBLK$(0)->

   6921  0 000021   100003 473500                    LDP3    3,,PR1
         0 000022   300003 474500                    LDP4    3,,PR3
         0 000023   200007 635500                    EPPR5   SCAN_INDEX,,AUTO
         0 000024   200013 455500                    STP5    NEED_MORE_ENTRIES+3,,AUTO
         0 000025   200012 454500                    STP4    NEED_MORE_ENTRIES+2,,AUTO
         0 000026   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000027   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000030   000000 701000 xent               TSX1    VDE$PSTRING
         0 000031   000220 702000 0                  TSX2    PSTRING_FAILED

     2300     6922    2                OUT$BLK, SCAN_INDEX)
     2301     6923    2                ALTRET (PSTRING_FAILED);
     2302     6924    2              PATT_STRING$ = XUE_ECB.OUT$;

   6924  0 000032   000004 236000 xsym               LDQ     XUE_ECB+4
         0 000033   200005 756100                    STQ     PATT_STRING$,,AUTO
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:260  

     2303     6925    2              END;

     2304     6926
     2305     6927    1           IF PATT$STRING.LENGTH# = 0 THEN

   6927  0 000034   200005 470500                    LDP0    PATT_STRING$,,AUTO
         0 000035   000000 236100                    LDQ     0,,PR0
         0 000036   777000 316003                    CANQ    -512,DU
         0 000037   000045 601000 0                  TNZ     BUILD_PATTERN

     2306     6928    2   USE_LAST_PATTERN: DO;

   6928  0 000040                       USE_LAST_PA* null
     2307     6929    2              PATTERN$ = VD_$PATTERN.V$;

   6929  0 000040   000003 236000 xsym               LDQ     VD_$PATTERN+3
         0 000041   200004 471500                    LDP1    @PATTERN$,,AUTO
         0 000042   100000 756100                    STQ     0,,PR1

     2308     6930    2              VD_$PATTERN.V$ = ADDR(NIL);

   6930  0 000043   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000044   000003 756000 xsym               STQ     VD_$PATTERN+3

     2309     6931    2              END USE_LAST_PATTERN;

     2310     6932
     2311     6933
     2312     6934    1   BUILD_PATTERN:
     2313     6935    2           DO WHILE PATTERN$ = ADDR(NIL);

   6935  0 000045   000155 710000 0     BUILD_PATTE* TRA     s:6953

     2314     6936    2              CALL VDG$OALLOC (%CLS_PATTERN, PATTERN$,

   6936  0 000046   200004 470500                    LDP0    @PATTERN$,,AUTO
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:261  
         0 000047   000000 471500                    LDP1    0,,PR0
         0 000050   200012 451500                    STP1    NEED_MORE_ENTRIES+2,,AUTO
         0 000051   200012 236100                    LDQ     NEED_MORE_ENTRIES+2,,AUTO
         0 000052   000022 772000                    QRL     18
         0 000053   200013 451500                    STP1    NEED_MORE_ENTRIES+3,,AUTO
         0 000054   200014 756100                    STQ     NEED_MORE_ENTRIES+4,,AUTO
         0 000055   200013 236100                    LDQ     NEED_MORE_ENTRIES+3,,AUTO
         0 000056   000003 036003                    ADLQ    3,DU
         0 000057   000022 772000                    QRL     18
         0 000060   200014 136100                    SBLQ    NEED_MORE_ENTRIES+4,,AUTO
         0 000061   200015 756100                    STQ     NEED_MORE_ENTRIES+5,,AUTO
         0 000062   200006 236100                    LDQ     MX_ENTRIES,,AUTO
         0 000063   000002 736000                    QLS     2
         0 000064   200015 036100                    ADLQ    NEED_MORE_ENTRIES+5,,AUTO
         0 000065   200016 756100                    STQ     NEED_MORE_ENTRIES+6,,AUTO
         0 000066   200016 633500                    EPPR3   NEED_MORE_ENTRIES+6,,AUTO
         0 000067   200021 453500                    STP3    NEED_MORE_ENTRIES+9,,AUTO
         0 000070   200004 236100                    LDQ     @PATTERN$,,AUTO
         0 000071   200020 756100                    STQ     NEED_MORE_ENTRIES+8,,AUTO
         0 000072   000001 236000 1                  LDQ     1
         0 000073   200017 756100                    STQ     NEED_MORE_ENTRIES+7,,AUTO
         0 000074   200017 630500                    EPPR0   NEED_MORE_ENTRIES+7,,AUTO
         0 000075   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000076   000000 701000 xent               TSX1    VDG$OALLOC
         0 000077   000220 702000 0                  TSX2    PSTRING_FAILED

     2315     6937    2                POFFW(ADDR(PATTERN.ENTRIES), ADDR(PATTERN)) +
     2316     6938    2                (MX_ENTRIES * SIZEW(PATTERN.ENTRIES)))
     2317     6939    2                ALTRET (OALLOC_FAILED);
     2318     6940    2              IF PATTERN.MX_ENTRIES# ~= MX_ENTRIES THEN

   6940  0 000100   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000101   000000 471500                    LDP1    0,,PR0
         0 000102   100002 236100                    LDQ     2,,PR1
         0 000103   000022 736000                    QLS     18
         0 000104   000022 732000                    QRS     18
         0 000105   200006 116100                    CMPQ    MX_ENTRIES,,AUTO
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:262  
         0 000106   000121 600000 0                  TZE     s:6943

     2319     6941    2                 CALL VDG$ESCREECH (PATTERN.MX_ENTRIES#, MX_ENTRIES);

   6941  0 000107   200006 633500                    EPPR3   MX_ENTRIES,,AUTO
         0 000110   200013 453500                    STP3    NEED_MORE_ENTRIES+3,,AUTO
         0 000111   200014 451500                    STP1    NEED_MORE_ENTRIES+4,,AUTO
         0 000112   200014 236100                    LDQ     NEED_MORE_ENTRIES+4,,AUTO
         0 000113   000002 036000 1                  ADLQ    2
         0 000114   200012 756100                    STQ     NEED_MORE_ENTRIES+2,,AUTO
         0 000115   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000116   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000117   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000120   000000 011000                    NOP     0

     2320     6942
     2321     6943    2              SCAN_INDEX = 0;

   6943  0 000121   200007 450100                    STZ     SCAN_INDEX,,AUTO

     2322     6944    2              CALL VDE$PPATT_STRING (PATT$STRING, SCAN_INDEX,

   6944  0 000122   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000123   000000 471500                    LDP1    0,,PR0
         0 000124   200010 633500                    EPPR3   NEED_MORE_ENTRIES,,AUTO
         0 000125   200015 453500                    STP3    NEED_MORE_ENTRIES+5,,AUTO
         0 000126   200014 451500                    STP1    NEED_MORE_ENTRIES+4,,AUTO
         0 000127   200007 634500                    EPPR4   SCAN_INDEX,,AUTO
         0 000130   200013 454500                    STP4    NEED_MORE_ENTRIES+3,,AUTO
         0 000131   200005 236100                    LDQ     PATT_STRING$,,AUTO
         0 000132   200012 756100                    STQ     NEED_MORE_ENTRIES+2,,AUTO
         0 000133   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000134   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000135   000000 701000 xent               TSX1    VDE$PPATT_STRING
         0 000136   000202 702000 0                  TSX2    PPATT_STRING_FAILED

     2323     6945    2                PATTERN, NEED_MORE_ENTRIES)
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:263  
     2324     6946    2                ALTRET (PPATT_STRING_FAILED);
     2325     6947    3              IF NEED_MORE_ENTRIES THEN DO;

   6947  0 000137   200010 234100                    SZN     NEED_MORE_ENTRIES,,AUTO
         0 000140   000155 605000 0                  TPL     s:6953

     2326     6948    3                 CALL VDG$OFREE (PATTERN)

   6948  0 000141   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000142   000000 471500                    LDP1    0,,PR0
         0 000143   200012 451500                    STP1    NEED_MORE_ENTRIES+2,,AUTO
         0 000144   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000145   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000146   000000 701000 xent               TSX1    VDG$OFREE
         0 000147   000220 702000 0                  TSX2    PSTRING_FAILED

     2327     6949    3                   ALTRET (OFREE_FAILED);
     2328     6950    3                 PATTERN$ = ADDR(NIL);

   6950  0 000150   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000151   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000152   000000 756100                    STQ     0,,PR0

     2329     6951    3                 MX_ENTRIES = MX_ENTRIES + %N_PATTERN_ENTRIES_INCR;

   6951  0 000153   000024 236007                    LDQ     20,DL
         0 000154   200006 056100                    ASQ     MX_ENTRIES,,AUTO

     2330     6952    3                 END;

     2331     6953    2              END BUILD_PATTERN;

   6953  0 000155   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000156   000000 236100                    LDQ     0,,PR0
         0 000157   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000160   000046 600000 0                  TZE     s:6936

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:264  
     2332     6954
     2333     6955
     2334     6956    2           IF VD_$PATTERN.V$ ~= ADDR(NIL) THEN DO;

   6956  0 000161   000003 236000 xsym               LDQ     VD_$PATTERN+3
         0 000162   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000163   000170 600000 0                  TZE     s:6960

     2335     6957    2              CALL VDG$OFREE (VD_$PATTERN.V$ -> PATTERN)

   6957  0 000164   000003 630400 xsym               EPPR0   VD_$PATTERN+3
         0 000165   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000166   000000 701000 xent               TSX1    VDG$OFREE
         0 000167   000220 702000 0                  TSX2    PSTRING_FAILED

     2336     6958    2                ALTRET (OFREE_FAILED);
     2337     6959    2              END;

     2338     6960    1           CALL VDG$OCOPY (PATTERN, VD_$PATTERN.V$)

   6960  0 000170   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000171   000000 471500                    LDP1    0,,PR0
         0 000172   000003 236000 1                  LDQ     3
         0 000173   200013 756100                    STQ     NEED_MORE_ENTRIES+3,,AUTO
         0 000174   200012 451500                    STP1    NEED_MORE_ENTRIES+2,,AUTO
         0 000175   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000176   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000177   000000 701000 xent               TSX1    VDG$OCOPY
         0 000200   000220 702000 0                  TSX2    PSTRING_FAILED

     2339     6961    1             ALTRET (OCOPY_FAILED);
     2340     6962
     2341     6963    1           RETURN;

   6963  0 000201   000000 702200 xent               TSX2  ! X66_ARET

     2342     6964
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:265  
     2343     6965
     2344     6966
     2345     6967    1   PPATT_STRING_FAILED:
     2346     6968    2           IF PATTERN$ ~= ADDR(NIL) THEN DO;

   6968  0 000202   200004 470500       PPATT_STRIN* LDP0    @PATTERN$,,AUTO
         0 000203   000000 236100                    LDQ     0,,PR0
         0 000204   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000205   000217 600000 0                  TZE     s:6973

     2347     6969    2              CALL VDG$OFREE (PATTERN)

   6969  0 000206   000000 471500                    LDP1    0,,PR0
         0 000207   200012 451500                    STP1    NEED_MORE_ENTRIES+2,,AUTO
         0 000210   200012 630500                    EPPR0   NEED_MORE_ENTRIES+2,,AUTO
         0 000211   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000212   000000 701000 xent               TSX1    VDG$OFREE
         0 000213   000220 702000 0                  TSX2    PSTRING_FAILED

     2348     6970    2                ALTRET (OFREE_FAILED);
     2349     6971    2              PATTERN$ = ADDR(NIL);

   6971  0 000214   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000215   200004 470500                    LDP0    @PATTERN$,,AUTO
         0 000216   000000 756100                    STQ     0,,PR0

     2350     6972    2              END;

     2351     6973    1           ALTRETURN;

   6973  0 000217   000000 702200 xent               TSX2  ! X66_AALT

   6968  0 000220                       PSTRING_FAI* null
   6968  0 000220                       OALLOC_FAIL* null
   6968  0 000220                       OFREE_FAILED null
   6968  0 000220                       OCOPY_FAILED null
     2352     6974
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:266  
     2353     6975
     2354     6976    1   PSTRING_FAILED: ;
     2355     6977    1   OALLOC_FAILED: ;
     2356     6978    1   OFREE_FAILED: ;
     2357     6979    1   OCOPY_FAILED: ;
     2358     6980    1           ALTRETURN;

   6980  0 000220   000000 702200 xent               TSX2  ! X66_AALT
     2359     6981
     2360     6982    1   END VDE$PPATTERN;
     2361     6983        %EOD;

PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:267  
--  Include file information  --

   XUE_MACRO_C.:LIBRARY  is referenced.
   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PPATTERN.
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:268  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @PATTERN$                  3-0-0/w PTR         r     1 @PT_PATTERN
     6-0-0/w SBIN        r     1 MX_ENTRIES                10-0-0/w BIT         r     1 NEED_MORE_ENTRIES
    *0-0-0/w PTR         r     1 PATTERN$                   5-0-0/w PTR         r     1 PATT_STRING$
    *0-0-0/w STRC(144)   r     1 PT_PATTERN                 7-0-0/w SBIN        r     1 SCAN_INDEX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$PATTERN                0-0-0/d STRC(1008)  r     1 XUE_ECB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/w ASTR(9)     r     1 PATT$STRING                0-0-0/w STRC(252)   r     1 PATTERN


   Procedure VDE$PPATTERN requires 145 words for executable code.
   Procedure VDE$PPATTERN requires 18 words of local(AUTO) storage.
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:269  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:270  
          MINI XREF LISTING

MX_ENTRIES
      6749**DCL      6915<<ASSIGN   6936>>CALL     6940>>IF       6941<>CALL     6951<<ASSIGN   6951>>ASSIGN
NEED_MORE_ENTRIES
      6751**DCL      6944<>CALL     6947>>IF
OALLOC_FAILED
      6968**LABEL    6936--CALLALT
OCOPY_FAILED
      6968**LABEL    6960--CALLALT
OFREE_FAILED
      6968**LABEL    6948--CALLALT  6957--CALLALT  6969--CALLALT
OUT$BLK
      6849**DCL      6921<>CALL
OUT$BLK.SUBLK$
      6882**DCL      6921>>CALL
OUT$SYM.COUNT
      6835**DCL      6838--IMP-SIZ
OUT$SYM.NDTYPE
      6815**DCL      6917>>IF
OUT$SYM.TEXTC$
      6830**DCL      6918>>ASSIGN
PATT$STRING
      6896**DCL      6944<>CALL
PATT$STRING.LENGTH#
      6904**DCL      6906--IMP-SIZ  6927>>IF       6944>>CALL
PATTERN
      6762**DCL      6936--CALL     6944<>CALL     6948<>CALL     6957<>CALL     6960<>CALL     6969<>CALL
PATTERN.ENTRIES
      6799**DCL      6936--CALL     6936--CALL
PATTERN.MX_ENTRIES#
      6788**DCL      6940>>IF       6941<>CALL
PATTERN$
      6487**DCL        54--PROC     6762--IMP-PTR  6914<<ASSIGN   6929<<ASSIGN   6935>>DOWHILE  6936<>CALL
PL6.E3A0      #002=VDE$PPATTERN File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:14 Page:271  
      6936>>CALL     6936>>CALL     6940>>IF       6941>>CALL     6944>>CALL     6948>>CALL     6950<<ASSIGN
      6960>>CALL     6968>>IF       6969>>CALL     6971<<ASSIGN
PATT_STRING$
      6748**DCL      6896--IMP-PTR  6918<<ASSIGN   6924<<ASSIGN   6927>>IF       6944>>CALL     6944>>CALL
PPATT_STRING_FAILED
      6968**LABEL    6944--CALLALT
PSTRING_FAILED
      6968**LABEL    6921--CALLALT
PT_PATTERN
      6448**DCL        54--PROC
PT_PATTERN.SUBLK$
      6481**DCL      6917>>IF       6918>>ASSIGN   6921>>CALL
SCAN_INDEX
      6750**DCL      6920<<ASSIGN   6921<>CALL     6943<<ASSIGN   6944<>CALL
VDE$PPATT_STRING
      6491**DCL-ENT  6944--CALL
VDE$PSTRING
      6490**DCL-ENT  6921--CALL
VDG$ESCREECH
      6495**DCL-ENT  6941--CALL
VDG$OALLOC
      6492**DCL-ENT  6936--CALL
VDG$OCOPY
      6494**DCL-ENT  6960--CALL
VDG$OFREE
      6493**DCL-ENT  6948--CALL     6957--CALL     6969--CALL
VD_$PATTERN.V$
      6742**DCL      6929>>ASSIGN   6930<<ASSIGN   6956>>IF       6957>>CALL     6960<>CALL
XUE_ECB.OUT$
      6544**DCL      6924>>ASSIGN

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:272  
     2362        1        /*T***********************************************************/
     2363        2        /*T*                                                         */
     2364        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2365        4        /*T*                                                         */
     2366        5        /*T***********************************************************/
     2367        6
     2368        7        /*D* NAME: VDE$PPATT_STRING
     2369        8            PARAMETERS:
     2370        9                PATT_STRING - VD$TEXTC containing the pattern string.
     2371       10                SCAN_INDEX - Index into PATT_STRING.BYTES of the next byte to
     2372       11                    process.
     2373       12                PATTERN - A %VD$PATTERN structure for the pattern so far.
     2374       13                NEED_MORE_ENTRIES - Uninitialized BIT(1) ALIGNED flag.
     2375       14            INPUT:
     2376       15            OUTPUT:
     2377       16                SCAN_INDEX will contain the index into PATT_STRING.BYTES of
     2378       17                    the next byte to process.
     2379       18                PATTERN.N_ENTRIES# and the appropriate .ENTRIES will be filled
     2380       19                    from the pattern string specified by PATT_STRING.
     2381       20                NEED_MORE_ENTRIES will be %TRUE if we ran out of room for
     2382       21                    new entries in PATTERN; else %FALSE.
     2383       22            DESCRIPTION:
     2384       23                Find the next $CONTROL-function in the pattern string.
     2385       24                Call VDG$EXEC_CONTROL to execute the function.  If the
     2386       25                    function is executed entirely by VDG$EXEC_CONTROL,
     2387       26                    loop to find the next $CONTROL function (if any).
     2388       27                When we find a $CONTROL_FUNCTION which VDG$EXEC_CONTROL
     2389       28                    doesn't execute entirely, add a %PS_LITERAL entry to
     2390       29                    PATTERN for the characters of PATT_STRING between the
     2391       30                    last $CONTROL pattern-function and this one.
     2392       31                    Then build a PATTERN entry for the pattern-function:
     2393       32                    $CONTROL-Value - If it has less than two parameters,
     2394       33                        VDG$EXEC_CONTROL will have executed it; if we get
     2395       34                        control, the function has two parameters.
     2396       35                        Build a %PS_VALUE entry for it.
     2397       36                    $CONTROL-Record - Build a %PS_RECORD entry.
     2398       37                    $CONTROL-Current - Build a %PS_CURRENT entry.
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:273  
     2399       38                    $CONTROL-Wild String (%?) - Build a %PS_WILD_STRING entry
     2400       39                        with .M = 0 and .N = %INFINITY.
     2401       40                    $CONTROL-Wild Char (?W) - Build a %PS_WILD_STRING entry
     2402       41                        with .M and .N as given in the function invocation.
     2403       42        *N*         $CONTROL-Set of Sequences or -Cases or whatever we
     2404       43        *N*             eventually decide on:
     2405       44        *N*             If this is the "end-of-set" function, just return.
     2406       45        *N*             If this is the "start-of-set" function, allocate
     2407       46        *N*             a new VD$PATTERN and build a %PS_PATTERN entry in
     2408       47        *N*             PATTERN to point to it, then call myself recursively
     2409       48        *N*             to build the nested pattern.
     2410       49        *N*             If this is the "next-case" function, allocate a
     2411       50        *N*             new VD$PATTERN and build a %PS_PATTERN entry in
     2412       51        *N*             PATTERN to point to it, with the ALTERNATIVE bit set.
     2413       52        *N*             Then call myself recursively to build the nested
     2414       53        *N*             pattern alternative.
     2415       54                    $CONTROL-BO Match - Build a %PS_BO_MATCH entry.
     2416       55                    $CONTROL-EO Match - Build a %PS_EO_MATCH entry.
     2417       56                Continue to scan for $CONTROL functions, processing the
     2418       57                    intervening characters as %PS_LITERAL entries and the
     2419       58                    $CONTROL functions as described above.
     2420       59        */
     2421       60
     2422       61        VDE$PPATT_STRING: PROC (PATT_STRING, SCAN_INDEX, PATTERN,
     2423       62                  NEED_MORE_ENTRIES) ALTRET;
     2424       63
     2425       64        %INCLUDE VD_MACROS_M;
     2426     2279        %INCLUDE VD_PERR_C;
     2427     2427        %INCLUDE XU_MACRO_C;
     2428     5521        %INCLUDE XU_SUBS_C;
     2429     5613
     2430     5614
     2431     5615        %VD$TEXTC (NAME=PATT_STRING, STCLASS=PARAM);
     2432     5638    1   DCL SCAN_INDEX SBIN;
     2433     5639        %VD$PATTERN (NAME=PATTERN, STCLASS=PARAM);
     2434     5690    1   DCL NEED_MORE_ENTRIES BIT(1) ALIGNED;
     2435     5691
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:274  
     2436     5692
     2437     5693    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
     2438     5694    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2439     5695    1   DCL VDG$ESCREECH        ENTRY (3);
     2440     5696
     2441     5697
     2442     5698        %VD_6E (STCLASS=SYMREF);
     2443     5734        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2444     5794
     2445     5795
     2446     5796    1   DCL CONTROL_VALUE$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2447     5797
     2448     5798
     2449     5799
     2450     5800    1   DCL SEEN_EO_MATCH BIT(1) ALIGNED;
     2451     5801    1   DCL BO_STRING_INDEX SBIN;
     2452     5802    1   DCL EO_STRING_INDEX SBIN;
     2453     5803    1   DCL CONTROL_INDEX SBIN;
     2454     5804    1   DCL NB_STRING SBIN;
     2455     5805    1   DCL RET_CODE CHAR(1) CALIGNED;
     2456     5806    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2457     5807    1   DCL PATT_ENTRY$ PTR;
     2458     5808    1   DCL VD_ERR$ PTR;
     2459     5809    1   DCL SUBST_FIELD$ PTR;
     2460     5810
     2461     5811
     2462     5812        %VD$BUFFER (NAME=CONTROL$VALUE, STCLASS="BASED(CONTROL_VALUE$)");
     2463     5870        %VD$PATT_ENTRY (NAME=PATT$ENTRY, STCLASS="BASED(PATT_ENTRY$)");
     2464     5885        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2465     5938        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2466     5983        %VD$TEXTC_REMOTE;
     2467     6044        %VD$STRING_HEADER;
     2468     6080
     2469     6081
     2470     6082
     2471     6083    1           NEED_MORE_ENTRIES = %FALSE;
     2472     6084    1           SEEN_EO_MATCH = %FALSE;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:275  
     2473     6085
     2474     6086    1   EACH_PS_LITERAL_AND_$CONTROL:
     2475     6087    2           DO WHILE SCAN_INDEX < PATT_STRING.LENGTH#;
     2476     6088    2              BO_STRING_INDEX = SCAN_INDEX;
     2477     6089    2              RET_CODE = %CHR_SPACE;
     2478     6090    2              IF VD_$CONTROL.LENGTH# = 0 THEN
     2479     6091    2                 SCAN_INDEX = PATT_STRING.LENGTH#;
     2480     6092    3              DO WHILE SCAN_INDEX < PATT_STRING.LENGTH#
     2481     6093    3                AND RET_CODE = %CHR_SPACE;
     2482     6094    3                 CALL INDEX (CONTROL_INDEX, CONTROL$VALUE.BYTES,
     2483     6095    3                   PATT_STRING.BYTES, SCAN_INDEX);
     2484     6096    3                 SCAN_INDEX = CONTROL_INDEX;
     2485     6097    4                 IF CONTROL_INDEX < PATT_STRING.LENGTH# THEN DO;
     2486     6098    4                    NB_STRING = PATT_STRING.LENGTH#;
     2487     6099    4                    CALL VDG$EXEC_CONTROL (NB_STRING, PATT_STRING.BYTES,
     2488     6100    4                      SCAN_INDEX, RET_CODE, CTRL_ARGS)
     2489     6101    4                      ALTRET (EXEC_CONTROL_FAILED);
     2490     6102    4                    PATT_STRING.LENGTH# = NB_STRING;
     2491     6103    4                    END;
     2492     6104    3                 END;
     2493     6105
     2494     6106    2              IF RET_CODE = %CHR_SPACE THEN
     2495     6107    2                 EO_STRING_INDEX = SCAN_INDEX;
     2496     6108    2              ELSE
     2497     6109    2                 EO_STRING_INDEX = CONTROL_INDEX;
     2498     6110    3              IF EO_STRING_INDEX - BO_STRING_INDEX > 0 THEN DO;
     2499     6111    3                 CALL APPEND_LITERAL (BO_STRING_INDEX, EO_STRING_INDEX)
     2500     6112    3                   ALTRET (APPEND_LITERAL_FAILED);
     2501     6113    3                 IF NEED_MORE_ENTRIES THEN
     2502     6114    3                    RETURN;
     2503     6115    3                 END;
     2504     6116
     2505     6117    2              IF RET_CODE ~= %CHR_SPACE THEN
     2506     6118    3   BUILD_PATTERN_ENTRY: DO;
     2507     6119                      /* We found a pattern function */
     2508     6120    4                 IF PATTERN.N_ENTRIES# >= PATTERN.MX_ENTRIES# THEN DO;
     2509     6121    4                    NEED_MORE_ENTRIES = %TRUE;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:276  
     2510     6122    4                    RETURN;
     2511     6123    4                    END;
     2512     6124    3                 PATT_ENTRY$ = ADDR(PATTERN.ENTRIES (PATTERN.N_ENTRIES#));
     2513     6125    3                 PATTERN.N_ENTRIES# = PATTERN.N_ENTRIES# + 1;
     2514     6126
     2515     6127    4                 DO SELECT ASCBIN(RET_CODE);
     2516     6128    4                    SELECT (%ASCBIN(FNID_VALUE));
     2517     6129                         /* This is a $CONTROL-Value function with 2 params */
     2518     6130    4                    PATT$ENTRY.CODE# = %PS_VALUE;
     2519     6131    4                    PATT$ENTRY.M# = CTRL_ARGS (0);
     2520     6132    4                    PATT$ENTRY.N# = CTRL_ARGS (1);
     2521     6133
     2522     6134    4                    SELECT (%ASCBIN(FNID_RECORD));
     2523     6135    4                    PATT$ENTRY.CODE# = %PS_RECORD;
     2524     6136
     2525     6137    4                    SELECT (%ASCBIN(FNID_CURRENT));
     2526     6138    4                    IF CONTROL_INDEX ~= 0
     2527     6139    4                      AND SCAN_INDEX ~= PATT_STRING.LENGTH# THEN
     2528     6140    4                       GOTO CTRLFN_CURR_CONFLICTS_W_MID;
     2529     6141    4                    PATT$ENTRY.CODE# = %PS_CURRENT;
     2530     6142
     2531     6143    4                    SELECT (%ASCBIN(FNID_WILD_STRING));
     2532     6144    4                    PATT$ENTRY.CODE# = %PS_WILD_STRING;
     2533     6145    4                    PATT$ENTRY.M# = 0;
     2534     6146    4                    PATT$ENTRY.N# = %INFINITY;
     2535     6147
     2536     6148    4                    SELECT (%ASCBIN(FNID_WILD_CHAR));
     2537     6149    4                    PATT$ENTRY.CODE# = %PS_WILD_STRING;
     2538     6150    4                    PATT$ENTRY.M# = CTRL_ARGS (0);
     2539     6151    4                    PATT$ENTRY.N# = CTRL_ARGS (1);
     2540     6152
     2541     6153    4                    SELECT (%ASCBIN(FNID_BO_MATCH));
     2542     6154    4                    IF SEEN_EO_MATCH THEN
     2543     6155    4                       GOTO CTRLFN_BOM_NOT_BEFORE_EOM;
     2544     6156    4                    PATT$ENTRY.CODE# = %PS_BO_MATCH;
     2545     6157
     2546     6158    4                    SELECT (%ASCBIN(FNID_EO_MATCH));
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:277  
     2547     6159    4                    PATT$ENTRY.CODE# = %PS_EO_MATCH;
     2548     6160    4                    SEEN_EO_MATCH = %TRUE;
     2549     6161
     2550     6162    4                    SELECT (ELSE);
     2551     6163    4                 CALL VDG$ESCREECH (RET_CODE);
     2552     6164    4                    END;
     2553     6165    3                 END BUILD_PATTERN_ENTRY;
     2554     6166    2              END EACH_PS_LITERAL_AND_$CONTROL;
     2555     6167
     2556     6168    1           RETURN;
     2557     6169
     2558     6170
     2559     6171
     2560     6172    1   CTRLFN_CURR_CONFLICTS_W_MID:
     2561     6173    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2562     6174    1             ALTRET (OALLOC_FAILED);
     2563     6175    1           VD$ERR.ERR.CODE# = %E$CTRLFN_CURR_CONFLICTS_W_MID;
     2564     6176    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2565     6177    1           ALTRETURN;
     2566     6178
     2567     6179
     2568     6180    1   EXEC_CONTROL_FAILED:
     2569     6181    2           IF VD_6E.ERR_HEAD$ ~= VD_6E.ERR_TAIL$ THEN DO;
     2570     6182    2              SUBST_FIELD$ = PINCRW(VD_6E.ERR_HEAD$, SIZEW(VD$ERR));
     2571     6183    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;
     2572     6184    2              SUBST$NUMBER.V# (0) = CONTROL_INDEX;
     2573     6185    2              END;
     2574     6186    1           ALTRETURN;
     2575     6187
     2576     6188
     2577     6189    1   CTRLFN_BOM_NOT_BEFORE_EOM:
     2578     6190    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2579     6191    1             ALTRET (OALLOC_FAILED);
     2580     6192    1           VD$ERR.ERR.CODE# = %E$CTRLFN_BOM_NOT_BEFORE_EOM;
     2581     6193    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2582     6194    1           ALTRETURN;
     2583     6195
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:278  
     2584     6196
     2585     6197    1   APPEND_LITERAL_FAILED: ;
     2586     6198    1   OALLOC_FAILED: ;
     2587     6199    1           ALTRETURN;
     2588     6200
     2589     6201
     2590     6202                %BOX (TITLE=APPEND_LITERAL, PAGE=YES);
              6210    1
              6214    1   /***************************************************************************
              6216    1    *                                                                         *
              6220    1            *                               APPEND_LITERAL                            *
              6222    1            *                                                                         *
              6224    1           ***************************************************************************/

     2591     6228
     2592     6229        /*I* NAME: APPEND_LITERAL
     2593     6230            PARAMETERS:
     2594     6231                START_INDEX - Index into PATT_STRING.BYTES of the start
     2595     6232                    of the string to build the %PS_LITERAL entry for.
     2596     6233                END_INDEX - Index into PATT_STRING.BYTES of the byte following
     2597     6234                    the last byte of the string to build the %PS_LITERAL entry for.
     2598     6235            INPUT:
     2599     6236                PATTERN - The VD$PATTERN built so far.
     2600     6237                PATT_STRING.BYTES - Char string from which a string for a
     2601     6238                    %PS_LITERAL symbol is to be made.
     2602     6239            OUTPUT:
     2603     6240                NEED_MORE_ENTRIES may be set.
     2604     6241                PATTERN will have an entry appended to it.
     2605     6242            DESCRIPTION:
     2606     6243                Add an entry to PATTERN pointing to a VD$TEXTC_REMOTE
     2607     6244                    containing the literal string.
     2608     6245        */
     2609     6246
     2610     6247    1   APPEND_LITERAL: PROC (START_INDEX, END_INDEX) ALTRET;
     2611     6248
     2612     6249    2   DCL START_INDEX SBIN;
     2613     6250    2   DCL END_INDEX SBIN;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:279  
     2614     6251
     2615     6252
     2616     6253
     2617     6254    2   DCL PATT_ENTRY$ PTR;
     2618     6255
     2619     6256
     2620     6257        %VD$PATT_ENTRY (NAME=PATT$ENTRY, STCLASS="BASED(PATT_ENTRY$)");
     2621     6272
     2622     6273
     2623     6274
     2624     6275    3           IF PATTERN.N_ENTRIES# >= PATTERN.MX_ENTRIES# THEN DO;
     2625     6276    3              NEED_MORE_ENTRIES = %TRUE;
     2626     6277    3              RETURN;
     2627     6278    3              END;
     2628     6279
     2629     6280    2           PATT_ENTRY$ = ADDR(PATTERN.ENTRIES (PATTERN.N_ENTRIES#));
     2630     6281    2           PATTERN.N_ENTRIES# = PATTERN.N_ENTRIES# + 1;
     2631     6282
     2632     6283    2           PATT$ENTRY.CODE# = %PS_LITERAL;
     2633     6284    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, PATT$ENTRY.MATCH$,
     2634     6285    2             (LENGTHC(VD$STRING_HEADER) + (END_INDEX - START_INDEX) +
     2635     6286    2             %(NB_PER_WORD-1)) / %NB_PER_WORD)
     2636     6287    2             ALTRET (OALLOC_FAILED);
     2637     6288    2           PATT$ENTRY.MATCH$->VD$TEXTC_REMOTE.LENGTH# =
     2638     6289    2             END_INDEX - START_INDEX;
     2639     6290    2           PATT$ENTRY.MATCH$->VD$TEXTC_REMOTE.BYTES =
     2640     6291    2             SUBSTR(PATT_STRING.BYTES, START_INDEX, END_INDEX - START_INDEX);
     2641     6292
     2642     6293    2           RETURN;
     2643     6294
     2644     6295
     2645     6296    2   OALLOC_FAILED:
     2646     6297    2           ALTRETURN;
     2647     6298
     2648     6299    2   END APPEND_LITERAL;
     2649     6300
     2650     6301    1   END VDE$PPATT_STRING;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:280  
     2651     6302        %EOD;

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:281  
--  Include file information  --

   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PPATT_STRING.

   Procedure VDE$PPATT_STRING requires 323 words for executable code.
   Procedure VDE$PPATT_STRING requires 28 words of local(AUTO) storage.

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:282  

 Object Unit name= VDE$PPATT_STRING                           File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:15:02.40 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  VDE$PPATT_STRING
    1   Proc  even  none   323    503  VDE$PPATT_STRING
    2  RoData even  none     5      5  VDE$PPATT_STRING

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  VDE$PPATT_STRING

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       5 VDG$EXEC_CONTROL
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_INDEX
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:283  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_$CONTROL                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:284  


     2362        1        /*T***********************************************************/
     2363        2        /*T*                                                         */
     2364        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2365        4        /*T*                                                         */
     2366        5        /*T***********************************************************/
     2367        6
     2368        7        /*D* NAME: VDE$PPATT_STRING
     2369        8            PARAMETERS:
     2370        9                PATT_STRING - VD$TEXTC containing the pattern string.
     2371       10                SCAN_INDEX - Index into PATT_STRING.BYTES of the next byte to
     2372       11                    process.
     2373       12                PATTERN - A %VD$PATTERN structure for the pattern so far.
     2374       13                NEED_MORE_ENTRIES - Uninitialized BIT(1) ALIGNED flag.
     2375       14            INPUT:
     2376       15            OUTPUT:
     2377       16                SCAN_INDEX will contain the index into PATT_STRING.BYTES of
     2378       17                    the next byte to process.
     2379       18                PATTERN.N_ENTRIES# and the appropriate .ENTRIES will be filled
     2380       19                    from the pattern string specified by PATT_STRING.
     2381       20                NEED_MORE_ENTRIES will be %TRUE if we ran out of room for
     2382       21                    new entries in PATTERN; else %FALSE.
     2383       22            DESCRIPTION:
     2384       23                Find the next $CONTROL-function in the pattern string.
     2385       24                Call VDG$EXEC_CONTROL to execute the function.  If the
     2386       25                    function is executed entirely by VDG$EXEC_CONTROL,
     2387       26                    loop to find the next $CONTROL function (if any).
     2388       27                When we find a $CONTROL_FUNCTION which VDG$EXEC_CONTROL
     2389       28                    doesn't execute entirely, add a %PS_LITERAL entry to
     2390       29                    PATTERN for the characters of PATT_STRING between the
     2391       30                    last $CONTROL pattern-function and this one.
     2392       31                    Then build a PATTERN entry for the pattern-function:
     2393       32                    $CONTROL-Value - If it has less than two parameters,
     2394       33                        VDG$EXEC_CONTROL will have executed it; if we get
     2395       34                        control, the function has two parameters.
     2396       35                        Build a %PS_VALUE entry for it.
     2397       36                    $CONTROL-Record - Build a %PS_RECORD entry.
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:285  
     2398       37                    $CONTROL-Current - Build a %PS_CURRENT entry.
     2399       38                    $CONTROL-Wild String (%?) - Build a %PS_WILD_STRING entry
     2400       39                        with .M = 0 and .N = %INFINITY.
     2401       40                    $CONTROL-Wild Char (?W) - Build a %PS_WILD_STRING entry
     2402       41                        with .M and .N as given in the function invocation.
     2403       42        *N*         $CONTROL-Set of Sequences or -Cases or whatever we
     2404       43        *N*             eventually decide on:
     2405       44        *N*             If this is the "end-of-set" function, just return.
     2406       45        *N*             If this is the "start-of-set" function, allocate
     2407       46        *N*             a new VD$PATTERN and build a %PS_PATTERN entry in
     2408       47        *N*             PATTERN to point to it, then call myself recursively
     2409       48        *N*             to build the nested pattern.
     2410       49        *N*             If this is the "next-case" function, allocate a
     2411       50        *N*             new VD$PATTERN and build a %PS_PATTERN entry in
     2412       51        *N*             PATTERN to point to it, with the ALTERNATIVE bit set.
     2413       52        *N*             Then call myself recursively to build the nested
     2414       53        *N*             pattern alternative.
     2415       54                    $CONTROL-BO Match - Build a %PS_BO_MATCH entry.
     2416       55                    $CONTROL-EO Match - Build a %PS_EO_MATCH entry.
     2417       56                Continue to scan for $CONTROL functions, processing the
     2418       57                    intervening characters as %PS_LITERAL entries and the
     2419       58                    $CONTROL functions as described above.
     2420       59        */
     2421       60
     2422       61        VDE$PPATT_STRING: PROC (PATT_STRING, SCAN_INDEX, PATTERN,

     61  1 000000   000000 700200 xent  VDE$PPATT_S* TSX0  ! X66_AUTO_4
         1 000001   000034 000004                    ZERO    28,4

     2423       62                  NEED_MORE_ENTRIES) ALTRET;
     2424       63
     2425       64        %INCLUDE VD_MACROS_M;
     2426     2279        %INCLUDE VD_PERR_C;
     2427     2427        %INCLUDE XU_MACRO_C;
     2428     5521        %INCLUDE XU_SUBS_C;
     2429     5613
     2430     5614
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:286  
     2431     5615        %VD$TEXTC (NAME=PATT_STRING, STCLASS=PARAM);
     2432     5638    1   DCL SCAN_INDEX SBIN;
     2433     5639        %VD$PATTERN (NAME=PATTERN, STCLASS=PARAM);
     2434     5690    1   DCL NEED_MORE_ENTRIES BIT(1) ALIGNED;
     2435     5691
     2436     5692
     2437     5693    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
     2438     5694    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2439     5695    1   DCL VDG$ESCREECH        ENTRY (3);
     2440     5696
     2441     5697
     2442     5698        %VD_6E (STCLASS=SYMREF);
     2443     5734        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2444     5794
     2445     5795
     2446     5796    1   DCL CONTROL_VALUE$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2447     5797
     2448     5798
     2449     5799
     2450     5800    1   DCL SEEN_EO_MATCH BIT(1) ALIGNED;
     2451     5801    1   DCL BO_STRING_INDEX SBIN;
     2452     5802    1   DCL EO_STRING_INDEX SBIN;
     2453     5803    1   DCL CONTROL_INDEX SBIN;
     2454     5804    1   DCL NB_STRING SBIN;
     2455     5805    1   DCL RET_CODE CHAR(1) CALIGNED;
     2456     5806    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2457     5807    1   DCL PATT_ENTRY$ PTR;
     2458     5808    1   DCL VD_ERR$ PTR;
     2459     5809    1   DCL SUBST_FIELD$ PTR;
     2460     5810
     2461     5811
     2462     5812        %VD$BUFFER (NAME=CONTROL$VALUE, STCLASS="BASED(CONTROL_VALUE$)");
     2463     5870        %VD$PATT_ENTRY (NAME=PATT$ENTRY, STCLASS="BASED(PATT_ENTRY$)");
     2464     5885        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2465     5938        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2466     5983        %VD$TEXTC_REMOTE;
     2467     6044        %VD$STRING_HEADER;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:287  
     2468     6080
     2469     6081
     2470     6082
     2471     6083    1           NEED_MORE_ENTRIES = %FALSE;

   6083  1 000002   200006 470500                    LDP0    @NEED_MORE_ENTRIES,,AUTO
         1 000003   000000 450100                    STZ     0,,PR0

     2472     6084    1           SEEN_EO_MATCH = %FALSE;

   6084  1 000004   200007 450100                    STZ     SEEN_EO_MATCH,,AUTO

     2473     6085
     2474     6086    1   EACH_PS_LITERAL_AND_$CONTROL:
     2475     6087    2           DO WHILE SCAN_INDEX < PATT_STRING.LENGTH#;

   6087  1 000005   200004 471500       EACH_PS_LIT* LDP1    @SCAN_INDEX,,AUTO
         1 000006   200003 473500                    LDP3    @PATT_STRING,,AUTO
         1 000007   300000 236100                    LDQ     0,,PR3
         1 000010   000033 772000                    QRL     27
         1 000011   100000 116100                    CMPQ    0,,PR1
         1 000012   000320 604400 1                  TMOZ    s:6168

     2476     6088    2              BO_STRING_INDEX = SCAN_INDEX;

   6088  1 000013   200004 470500                    LDP0    @SCAN_INDEX,,AUTO
         1 000014   000000 235100                    LDA     0,,PR0
         1 000015   200010 755100                    STA     BO_STRING_INDEX,,AUTO

     2477     6089    2              RET_CODE = %CHR_SPACE;

   6089  1 000016   040000 236003                    LDQ     16384,DU
         1 000017   200014 756100                    STQ     RET_CODE,,AUTO

     2478     6090    2              IF VD_$CONTROL.LENGTH# = 0 THEN

   6090  1 000020   000002 220000 xsym               LDX0    VD_$CONTROL+2
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:288  
         1 000021   000026 601000 1                  TNZ     s:6092

     2479     6091    2                 SCAN_INDEX = PATT_STRING.LENGTH#;

   6091  1 000022   200003 471500                    LDP1    @PATT_STRING,,AUTO
         1 000023   100000 236100                    LDQ     0,,PR1
         1 000024   000033 772000                    QRL     27
         1 000025   000000 756100                    STQ     0,,PR0

     2480     6092    3              DO WHILE SCAN_INDEX < PATT_STRING.LENGTH#

   6092  1 000026   000104 710000 1                  TRA     s:6104

     2481     6093    3                AND RET_CODE = %CHR_SPACE;
     2482     6094    3                 CALL INDEX (CONTROL_INDEX, CONTROL$VALUE.BYTES,

   6094  1 000027   000000 470400 0                  LDP0    CONTROL_VALUE$
         1 000030   000002 220100                    LDX0    2,,PR0
         1 000031   200003 471500                    LDP1    @PATT_STRING,,AUTO
         1 000032   100000 236100                    LDQ     0,,PR1
         1 000033   000033 772000                    QRL     27
         1 000034   200012 631500                    EPPR1   CONTROL_INDEX,,AUTO
         1 000035   000000 633500                    EPPR3   0,,PR0
         1 000036   000012 221003                    LDX1    10,DU
         1 000037   300000 500511                    A9BD    0,X1,PR3
         1 000040   000000 623010                    EAX3    0,X0
         1 000041   200003 470500                    LDP0    @PATT_STRING,,AUTO
         1 000042   000001 220003                    LDX0    1,DU
         1 000043   000000 500510                    A9BD    0,X0,PR0
         1 000044   000000 620006                    EAX0    0,QL
         1 000045   200004 474500                    LDP4    @SCAN_INDEX,,AUTO
         1 000046   400000 236100                    LDQ     0,,PR4
         1 000047   000000 701000 xent               TSX1    X66_INDEX
         1 000050   000000 011000                    NOP     0

     2483     6095    3                   PATT_STRING.BYTES, SCAN_INDEX);
     2484     6096    3                 SCAN_INDEX = CONTROL_INDEX;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:289  

   6096  1 000051   200012 235100                    LDA     CONTROL_INDEX,,AUTO
         1 000052   400000 755100                    STA     0,,PR4

     2485     6097    4                 IF CONTROL_INDEX < PATT_STRING.LENGTH# THEN DO;

   6097  1 000053   200003 470500                    LDP0    @PATT_STRING,,AUTO
         1 000054   000000 236100                    LDQ     0,,PR0
         1 000055   000033 772000                    QRL     27
         1 000056   200012 116100                    CMPQ    CONTROL_INDEX,,AUTO
         1 000057   000104 604400 1                  TMOZ    s:6104

     2486     6098    4                    NB_STRING = PATT_STRING.LENGTH#;

   6098  1 000060   200013 756100                    STQ     NB_STRING,,AUTO

     2487     6099    4                    CALL VDG$EXEC_CONTROL (NB_STRING, PATT_STRING.BYTES,

   6099  1 000061   200015 631500                    EPPR1   CTRL_ARGS,,AUTO
         1 000062   200032 451500                    STP1    PATT_ENTRY$+5,,AUTO
         1 000063   200014 633500                    EPPR3   RET_CODE,,AUTO
         1 000064   200031 453500                    STP3    PATT_ENTRY$+4,,AUTO
         1 000065   200004 236100                    LDQ     @SCAN_INDEX,,AUTO
         1 000066   200030 756100                    STQ     PATT_ENTRY$+3,,AUTO
         1 000067   200003 236100                    LDQ     @PATT_STRING,,AUTO
         1 000070   200000 036007                    ADLQ    65536,DL
         1 000071   200027 756100                    STQ     PATT_ENTRY$+2,,AUTO
         1 000072   200013 635500                    EPPR5   NB_STRING,,AUTO
         1 000073   200026 455500                    STP5    PATT_ENTRY$+1,,AUTO
         1 000074   200026 630500                    EPPR0   PATT_ENTRY$+1,,AUTO
         1 000075   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000076   000000 701000 xent               TSX1    VDG$EXEC_CONTROL
         1 000077   000342 702000 1                  TSX2    EXEC_CONTROL_FAILED

     2488     6100    4                      SCAN_INDEX, RET_CODE, CTRL_ARGS)
     2489     6101    4                      ALTRET (EXEC_CONTROL_FAILED);
     2490     6102    4                    PATT_STRING.LENGTH# = NB_STRING;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:290  

   6102  1 000100   200003 470500                    LDP0    @PATT_STRING,,AUTO
         1 000101   200013 236100                    LDQ     NB_STRING,,AUTO
         1 000102   000033 736000                    QLS     27
         1 000103   000000 552140                    STBQ    0,'40'O,PR0

     2491     6103    4                    END;

     2492     6104    3                 END;

   6104  1 000104   200004 470500                    LDP0    @SCAN_INDEX,,AUTO
         1 000105   200003 471500                    LDP1    @PATT_STRING,,AUTO
         1 000106   100000 236100                    LDQ     0,,PR1
         1 000107   000033 772000                    QRL     27
         1 000110   000000 116100                    CMPQ    0,,PR0
         1 000111   000116 604400 1                  TMOZ    s:6106
         1 000112   200014 236100                    LDQ     RET_CODE,,AUTO
         1 000113   777000 376003                    ANQ     -512,DU
         1 000114   040000 116003                    CMPQ    16384,DU
         1 000115   000027 600000 1                  TZE     s:6094

     2493     6105
     2494     6106    2              IF RET_CODE = %CHR_SPACE THEN

   6106  1 000116   200014 236100                    LDQ     RET_CODE,,AUTO
         1 000117   777000 376003                    ANQ     -512,DU
         1 000120   040000 116003                    CMPQ    16384,DU
         1 000121   000125 601000 1                  TNZ     s:6109

     2495     6107    2                 EO_STRING_INDEX = SCAN_INDEX;

   6107  1 000122   000000 235100                    LDA     0,,PR0
         1 000123   200011 755100                    STA     EO_STRING_INDEX,,AUTO
         1 000124   000127 710000 1                  TRA     s:6110

     2496     6108    2              ELSE
     2497     6109    2                 EO_STRING_INDEX = CONTROL_INDEX;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:291  

   6109  1 000125   200012 235100                    LDA     CONTROL_INDEX,,AUTO
         1 000126   200011 755100                    STA     EO_STRING_INDEX,,AUTO

     2498     6110    3              IF EO_STRING_INDEX - BO_STRING_INDEX > 0 THEN DO;

   6110  1 000127   200011 236100                    LDQ     EO_STRING_INDEX,,AUTO
         1 000130   200010 136100                    SBLQ    BO_STRING_INDEX,,AUTO
         1 000131   000144 604400 1                  TMOZ    s:6117

     2499     6111    3                 CALL APPEND_LITERAL (BO_STRING_INDEX, EO_STRING_INDEX)

   6111  1 000132   200011 633500                    EPPR3   EO_STRING_INDEX,,AUTO
         1 000133   200024 453500                    STP3    @START_INDEX+1,,AUTO
         1 000134   200010 634500                    EPPR4   BO_STRING_INDEX,,AUTO
         1 000135   200023 454500                    STP4    SUBST_FIELD$+2,,AUTO
         1 000136   000377 701000 1                  TSX1    APPEND_LITERAL
         1 000137   000376 702000 1                  TSX2    APPEND_LITERAL_FAILED

     2500     6112    3                   ALTRET (APPEND_LITERAL_FAILED);
     2501     6113    3                 IF NEED_MORE_ENTRIES THEN

   6113  1 000140   200006 470500                    LDP0    @NEED_MORE_ENTRIES,,AUTO
         1 000141   000000 234100                    SZN     0,,PR0
         1 000142   000144 605000 1                  TPL     s:6117

     2502     6114    3                    RETURN;

   6114  1 000143   000000 702200 xent               TSX2  ! X66_ARET

     2503     6115    3                 END;
     2504     6116
     2505     6117    2              IF RET_CODE ~= %CHR_SPACE THEN

   6117  1 000144   200014 236100                    LDQ     RET_CODE,,AUTO
         1 000145   777000 376003                    ANQ     -512,DU
         1 000146   040000 116003                    CMPQ    16384,DU
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:292  
         1 000147   000312 600000 1                  TZE     s:6166

     2506     6118    3   BUILD_PATTERN_ENTRY: DO;

   6118  1 000150                       BUILD_PATTE* null
     2507     6119                      /* We found a pattern function */
     2508     6120    4                 IF PATTERN.N_ENTRIES# >= PATTERN.MX_ENTRIES# THEN DO;

   6120  1 000150   200005 470500                    LDP0    @PATTERN,,AUTO
         1 000151   000002 720100                    LXL0    2,,PR0
         1 000152   000002 100100                    CMPX0   2,,PR0
         1 000153   000160 605400 1                  TPNZ    s:6124

     2509     6121    4                    NEED_MORE_ENTRIES = %TRUE;

   6121  1 000154   400000 236003                    LDQ     -131072,DU
         1 000155   200006 471500                    LDP1    @NEED_MORE_ENTRIES,,AUTO
         1 000156   100000 756100                    STQ     0,,PR1

     2510     6122    4                    RETURN;

   6122  1 000157   000000 702200 xent               TSX2  ! X66_ARET

     2511     6123    4                    END;
     2512     6124    3                 PATT_ENTRY$ = ADDR(PATTERN.ENTRIES (PATTERN.N_ENTRIES#));

   6124  1 000160   000002 236100                    LDQ     2,,PR0
         1 000161   000020 732000                    QRS     16
         1 000162   000000 376000 2                  ANQ     0
         1 000163   000022 736000                    QLS     18
         1 000164   000003 036003                    ADLQ    3,DU
         1 000165   200005 036100                    ADLQ    @PATTERN,,AUTO
         1 000166   200017 756100                    STQ     PATT_ENTRY$,,AUTO

     2513     6125    3                 PATTERN.N_ENTRIES# = PATTERN.N_ENTRIES# + 1;

   6125  1 000167   000002 221100                    LDX1    2,,PR0
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:293  
         1 000170   000001 622011                    EAX2    1,X1
         1 000171   000002 742100                    STX2    2,,PR0

     2514     6126
     2515     6127    4                 DO SELECT ASCBIN(RET_CODE);

   6127  1 000172   200014 236100                    LDQ     RET_CODE,,AUTO
         1 000173   000033 772000                    QRL     27
         1 000174   000122 116007                    CMPQ    82,DL
         1 000175   000205 602000 1                  TNC     s:6127+11
         1 000176   000231 600000 1                  TZE     s:6135
         1 000177   000126 116007                    CMPQ    86,DL
         1 000200   000304 602000 1                  TNC     s:6163
         1 000201   000221 600000 1                  TZE     s:6130
         1 000202   000127 116007                    CMPQ    87,DL
         1 000203   000304 601000 1                  TNZ     s:6163
         1 000204   000260 710000 1                  TRA     s:6149
         1 000205   000102 116007                    CMPQ    66,DL
         1 000206   000216 602000 1                  TNC     s:6127+20
         1 000207   000270 600000 1                  TZE     s:6154
         1 000210   000103 116007                    CMPQ    67,DL
         1 000211   000304 602000 1                  TNC     s:6163
         1 000212   000235 600000 1                  TZE     s:6138
         1 000213   000105 116007                    CMPQ    69,DL
         1 000214   000304 601000 1                  TNZ     s:6163
         1 000215   000276 710000 1                  TRA     s:6159
         1 000216   000077 116007                    CMPQ    63,DL
         1 000217   000304 601000 1                  TNZ     s:6163
         1 000220   000251 710000 1                  TRA     s:6144

     2516     6128    4                    SELECT (%ASCBIN(FNID_VALUE));

     2517     6129                         /* This is a $CONTROL-Value function with 2 params */
     2518     6130    4                    PATT$ENTRY.CODE# = %PS_VALUE;

   6130  1 000221   000002 221003                    LDX1    2,DU
         1 000222   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:294  
         1 000223   100000 441100                    SXL1    0,,PR1

     2519     6131    4                    PATT$ENTRY.M# = CTRL_ARGS (0);

   6131  1 000224   200015 235100                    LDA     CTRL_ARGS,,AUTO
         1 000225   100001 755100                    STA     1,,PR1

     2520     6132    4                    PATT$ENTRY.N# = CTRL_ARGS (1);

   6132  1 000226   200016 236100                    LDQ     CTRL_ARGS+1,,AUTO
         1 000227   100002 756100                    STQ     2,,PR1
         1 000230   000312 710000 1                  TRA     s:6166

     2521     6133
     2522     6134    4                    SELECT (%ASCBIN(FNID_RECORD));

     2523     6135    4                    PATT$ENTRY.CODE# = %PS_RECORD;

   6135  1 000231   000005 221003                    LDX1    5,DU
         1 000232   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000233   100000 441100                    SXL1    0,,PR1
         1 000234   000312 710000 1                  TRA     s:6166

     2524     6136
     2525     6137    4                    SELECT (%ASCBIN(FNID_CURRENT));

     2526     6138    4                    IF CONTROL_INDEX ~= 0

   6138  1 000235   200012 235100                    LDA     CONTROL_INDEX,,AUTO
         1 000236   000245 600000 1                  TZE     s:6141
         1 000237   200004 471500                    LDP1    @SCAN_INDEX,,AUTO
         1 000240   200003 473500                    LDP3    @PATT_STRING,,AUTO
         1 000241   300000 236100                    LDQ     0,,PR3
         1 000242   000033 772000                    QRL     27
         1 000243   100000 116100                    CMPQ    0,,PR1
         1 000244   000321 601000 1                  TNZ     CTRLFN_CURR_CONFLICTS_W_MID

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:295  
     2527     6139    4                      AND SCAN_INDEX ~= PATT_STRING.LENGTH# THEN
     2528     6140    4                       GOTO CTRLFN_CURR_CONFLICTS_W_MID;
     2529     6141    4                    PATT$ENTRY.CODE# = %PS_CURRENT;

   6141  1 000245   000006 221003                    LDX1    6,DU
         1 000246   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000247   100000 441100                    SXL1    0,,PR1
         1 000250   000312 710000 1                  TRA     s:6166

     2530     6142
     2531     6143    4                    SELECT (%ASCBIN(FNID_WILD_STRING));

     2532     6144    4                    PATT$ENTRY.CODE# = %PS_WILD_STRING;

   6144  1 000251   000003 221003                    LDX1    3,DU
         1 000252   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000253   100000 441100                    SXL1    0,,PR1

     2533     6145    4                    PATT$ENTRY.M# = 0;

   6145  1 000254   100001 450100                    STZ     1,,PR1

     2534     6146    4                    PATT$ENTRY.N# = %INFINITY;

   6146  1 000255   000031 235000 xsym               LDA     B_VECTNIL+25
         1 000256   100002 755100                    STA     2,,PR1
         1 000257   000312 710000 1                  TRA     s:6166

     2535     6147
     2536     6148    4                    SELECT (%ASCBIN(FNID_WILD_CHAR));

     2537     6149    4                    PATT$ENTRY.CODE# = %PS_WILD_STRING;

   6149  1 000260   000003 221003                    LDX1    3,DU
         1 000261   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000262   100000 441100                    SXL1    0,,PR1

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:296  
     2538     6150    4                    PATT$ENTRY.M# = CTRL_ARGS (0);

   6150  1 000263   200015 235100                    LDA     CTRL_ARGS,,AUTO
         1 000264   100001 755100                    STA     1,,PR1

     2539     6151    4                    PATT$ENTRY.N# = CTRL_ARGS (1);

   6151  1 000265   200016 236100                    LDQ     CTRL_ARGS+1,,AUTO
         1 000266   100002 756100                    STQ     2,,PR1
         1 000267   000312 710000 1                  TRA     s:6166

     2540     6152
     2541     6153    4                    SELECT (%ASCBIN(FNID_BO_MATCH));

     2542     6154    4                    IF SEEN_EO_MATCH THEN

   6154  1 000270   200007 234100                    SZN     SEEN_EO_MATCH,,AUTO
         1 000271   000355 604000 1                  TMI     CTRLFN_BOM_NOT_BEFORE_EOM

     2543     6155    4                       GOTO CTRLFN_BOM_NOT_BEFORE_EOM;
     2544     6156    4                    PATT$ENTRY.CODE# = %PS_BO_MATCH;

   6156  1 000272   000007 221003                    LDX1    7,DU
         1 000273   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000274   100000 441100                    SXL1    0,,PR1
         1 000275   000312 710000 1                  TRA     s:6166

     2545     6157
     2546     6158    4                    SELECT (%ASCBIN(FNID_EO_MATCH));

     2547     6159    4                    PATT$ENTRY.CODE# = %PS_EO_MATCH;

   6159  1 000276   000010 221003                    LDX1    8,DU
         1 000277   200017 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000300   100000 441100                    SXL1    0,,PR1

     2548     6160    4                    SEEN_EO_MATCH = %TRUE;
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:297  

   6160  1 000301   400000 236003                    LDQ     -131072,DU
         1 000302   200007 756100                    STQ     SEEN_EO_MATCH,,AUTO
         1 000303   000312 710000 1                  TRA     s:6166

     2549     6161
     2550     6162    4                    SELECT (ELSE);

     2551     6163    4                 CALL VDG$ESCREECH (RET_CODE);

   6163  1 000304   200014 631500                    EPPR1   RET_CODE,,AUTO
         1 000305   200026 451500                    STP1    PATT_ENTRY$+1,,AUTO
         1 000306   200026 630500                    EPPR0   PATT_ENTRY$+1,,AUTO
         1 000307   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000310   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000311   000000 011000                    NOP     0

     2552     6164    4                    END;

     2553     6165    3                 END BUILD_PATTERN_ENTRY;

     2554     6166    2              END EACH_PS_LITERAL_AND_$CONTROL;

   6166  1 000312   200004 470500                    LDP0    @SCAN_INDEX,,AUTO
         1 000313   200003 471500                    LDP1    @PATT_STRING,,AUTO
         1 000314   100000 236100                    LDQ     0,,PR1
         1 000315   000033 772000                    QRL     27
         1 000316   000000 116100                    CMPQ    0,,PR0
         1 000317   000013 605400 1                  TPNZ    s:6088

     2555     6167
     2556     6168    1           RETURN;

   6168  1 000320   000000 702200 xent               TSX2  ! X66_ARET

     2557     6169
     2558     6170
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:298  
     2559     6171
     2560     6172    1   CTRLFN_CURR_CONFLICTS_W_MID:
     2561     6173    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   6173  1 000321   200020 634500       CTRLFN_CURR* EPPR4   VD_ERR$,,AUTO
         1 000322   200027 454500                    STP4    PATT_ENTRY$+2,,AUTO
         1 000323   000001 236000 2                  LDQ     1
         1 000324   200026 756100                    STQ     PATT_ENTRY$+1,,AUTO
         1 000325   200026 630500                    EPPR0   PATT_ENTRY$+1,,AUTO
         1 000326   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000327   000000 701000 xent               TSX1    VDG$OALLOC
         1 000330   000376 702000 1                  TSX2    APPEND_LITERAL_FAILED

     2562     6174    1             ALTRET (OALLOC_FAILED);
     2563     6175    1           VD$ERR.ERR.CODE# = %E$CTRLFN_CURR_CONFLICTS_W_MID;

   6175  1 000331   200020 470500                    LDP0    VD_ERR$,,AUTO
         1 000332   000002 236100                    LDQ     2,,PR0
         1 000333   000002 376000 2                  ANQ     2
         1 000334   001110 276007                    ORQ     584,DL
         1 000335   000002 756100                    STQ     2,,PR0

     2564     6176    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   6176  1 000336   000003 220003                    LDX0    3,DU
         1 000337   200020 470500                    LDP0    VD_ERR$,,AUTO
         1 000340   000003 740100                    STX0    3,,PR0

     2565     6177    1           ALTRETURN;

   6177  1 000341   000000 702200 xent               TSX2  ! X66_AALT

     2566     6178
     2567     6179
     2568     6180    1   EXEC_CONTROL_FAILED:
     2569     6181    2           IF VD_6E.ERR_HEAD$ ~= VD_6E.ERR_TAIL$ THEN DO;

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:299  
   6181  1 000342   000031 236000 xsym  EXEC_CONTRO* LDQ     VD_6E+25
         1 000343   000032 116000 xsym               CMPQ    VD_6E+26
         1 000344   000354 600000 1                  TZE     s:6186

     2570     6182    2              SUBST_FIELD$ = PINCRW(VD_6E.ERR_HEAD$, SIZEW(VD$ERR));

   6182  1 000345   000005 036003                    ADLQ    5,DU
         1 000346   200021 756100                    STQ     SUBST_FIELD$,,AUTO

     2571     6183    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;

   6183  1 000347   000033 220003                    LDX0    27,DU
         1 000350   200021 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000351   000000 740100                    STX0    0,,PR0

     2572     6184    2              SUBST$NUMBER.V# (0) = CONTROL_INDEX;

   6184  1 000352   200012 235100                    LDA     CONTROL_INDEX,,AUTO
         1 000353   000003 755100                    STA     3,,PR0

     2573     6185    2              END;

     2574     6186    1           ALTRETURN;

   6186  1 000354   000000 702200 xent               TSX2  ! X66_AALT

     2575     6187
     2576     6188
     2577     6189    1   CTRLFN_BOM_NOT_BEFORE_EOM:
     2578     6190    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   6190  1 000355   200020 631500       CTRLFN_BOM_* EPPR1   VD_ERR$,,AUTO
         1 000356   200027 451500                    STP1    PATT_ENTRY$+2,,AUTO
         1 000357   000001 236000 2                  LDQ     1
         1 000360   200026 756100                    STQ     PATT_ENTRY$+1,,AUTO
         1 000361   200026 630500                    EPPR0   PATT_ENTRY$+1,,AUTO
         1 000362   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:300  
         1 000363   000000 701000 xent               TSX1    VDG$OALLOC
         1 000364   000376 702000 1                  TSX2    APPEND_LITERAL_FAILED

     2579     6191    1             ALTRET (OALLOC_FAILED);
     2580     6192    1           VD$ERR.ERR.CODE# = %E$CTRLFN_BOM_NOT_BEFORE_EOM;

   6192  1 000365   200020 470500                    LDP0    VD_ERR$,,AUTO
         1 000366   000002 236100                    LDQ     2,,PR0
         1 000367   000002 376000 2                  ANQ     2
         1 000370   001140 276007                    ORQ     608,DL
         1 000371   000002 756100                    STQ     2,,PR0

     2581     6193    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   6193  1 000372   000003 220003                    LDX0    3,DU
         1 000373   200020 470500                    LDP0    VD_ERR$,,AUTO
         1 000374   000003 740100                    STX0    3,,PR0

     2582     6194    1           ALTRETURN;

   6194  1 000375   000000 702200 xent               TSX2  ! X66_AALT

   6193  1 000376                       APPEND_LITE* null
   6193  1 000376                       OALLOC_FAIL* null
     2583     6195
     2584     6196
     2585     6197    1   APPEND_LITERAL_FAILED: ;
     2586     6198    1   OALLOC_FAILED: ;
     2587     6199    1           ALTRETURN;

   6199  1 000376   000000 702200 xent               TSX2  ! X66_AALT

     2588     6200
     2589     6201
     2590     6202                %BOX (TITLE=APPEND_LITERAL, PAGE=YES);
              6210    1
              6214    1   /***************************************************************************
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:301  
              6216    1    *                                                                         *
              6220    1            *                               APPEND_LITERAL                           *
              6222    1            *                                                                        *
              6224    1          ***************************************************************************/

     2591     6228
     2592     6229        /*I* NAME: APPEND_LITERAL
     2593     6230            PARAMETERS:
     2594     6231                START_INDEX - Index into PATT_STRING.BYTES of the start
     2595     6232                    of the string to build the %PS_LITERAL entry for.
     2596     6233                END_INDEX - Index into PATT_STRING.BYTES of the byte following
     2597     6234                    the last byte of the string to build the %PS_LITERAL entry for.
     2598     6235            INPUT:
     2599     6236                PATTERN - The VD$PATTERN built so far.
     2600     6237                PATT_STRING.BYTES - Char string from which a string for a
     2601     6238                    %PS_LITERAL symbol is to be made.
     2602     6239            OUTPUT:
     2603     6240                NEED_MORE_ENTRIES may be set.
     2604     6241                PATTERN will have an entry appended to it.
     2605     6242            DESCRIPTION:
     2606     6243                Add an entry to PATTERN pointing to a VD$TEXTC_REMOTE
     2607     6244                    containing the literal string.
     2608     6245        */
     2609     6246
     2610     6247    1   APPEND_LITERAL: PROC (START_INDEX, END_INDEX) ALTRET;

   6247  1 000377   200022 741300       APPEND_LITE* STX1  ! SUBST_FIELD$+1,,AUTO

     2611     6248
     2612     6249    2   DCL START_INDEX SBIN;
     2613     6250    2   DCL END_INDEX SBIN;
     2614     6251
     2615     6252
     2616     6253
     2617     6254    2   DCL PATT_ENTRY$ PTR;
     2618     6255
     2619     6256
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:302  
     2620     6257        %VD$PATT_ENTRY (NAME=PATT$ENTRY, STCLASS="BASED(PATT_ENTRY$)");
     2621     6272
     2622     6273
     2623     6274
     2624     6275    3           IF PATTERN.N_ENTRIES# >= PATTERN.MX_ENTRIES# THEN DO;

   6275  1 000400   200005 470500                    LDP0    @PATTERN,,AUTO
         1 000401   000002 720100                    LXL0    2,,PR0
         1 000402   000002 100100                    CMPX0   2,,PR0
         1 000403   000411 605400 1                  TPNZ    s:6280

     2625     6276    3              NEED_MORE_ENTRIES = %TRUE;

   6276  1 000404   400000 236003                    LDQ     -131072,DU
         1 000405   200006 471500                    LDP1    @NEED_MORE_ENTRIES,,AUTO
         1 000406   100000 756100                    STQ     0,,PR1

     2626     6277    3              RETURN;

   6277  1 000407   200022 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000410   000001 702211                    TSX2  ! 1,X1

     2627     6278    3              END;
     2628     6279
     2629     6280    2           PATT_ENTRY$ = ADDR(PATTERN.ENTRIES (PATTERN.N_ENTRIES#));

   6280  1 000411   000002 236100                    LDQ     2,,PR0
         1 000412   000020 732000                    QRS     16
         1 000413   000000 376000 2                  ANQ     0
         1 000414   000022 736000                    QLS     18
         1 000415   000003 036003                    ADLQ    3,DU
         1 000416   200005 036100                    ADLQ    @PATTERN,,AUTO
         1 000417   200025 756100                    STQ     PATT_ENTRY$,,AUTO

     2630     6281    2           PATTERN.N_ENTRIES# = PATTERN.N_ENTRIES# + 1;

   6281  1 000420   000002 222100                    LDX2    2,,PR0
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:303  
         1 000421   000001 623012                    EAX3    1,X2
         1 000422   000002 743100                    STX3    2,,PR0

     2631     6282
     2632     6283    2           PATT$ENTRY.CODE# = %PS_LITERAL;

   6283  1 000423   000001 221003                    LDX1    1,DU
         1 000424   200025 471500                    LDP1    PATT_ENTRY$,,AUTO
         1 000425   100000 441100                    SXL1    0,,PR1

     2633     6284    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, PATT$ENTRY.MATCH$,

   6284  1 000426   200023 473500                    LDP3    @START_INDEX,,AUTO
         1 000427   200024 474500                    LDP4    @END_INDEX,,AUTO
         1 000430   400000 236100                    LDQ     0,,PR4
         1 000431   300000 136100                    SBLQ    0,,PR3
         1 000432   000014 036007                    ADLQ    12,DL
         1 000433   000004 506007                    DIV     4,DL
         1 000434   200026 756100                    STQ     PATT_ENTRY$+1,,AUTO
         1 000435   200026 635500                    EPPR5   PATT_ENTRY$+1,,AUTO
         1 000436   200031 455500                    STP5    PATT_ENTRY$+4,,AUTO
         1 000437   200025 236100                    LDQ     PATT_ENTRY$,,AUTO
         1 000440   000003 036003                    ADLQ    3,DU
         1 000441   200030 756100                    STQ     PATT_ENTRY$+3,,AUTO
         1 000442   000004 236000 2                  LDQ     4
         1 000443   200027 756100                    STQ     PATT_ENTRY$+2,,AUTO
         1 000444   200027 630500                    EPPR0   PATT_ENTRY$+2,,AUTO
         1 000445   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000446   000000 701000 xent               TSX1    VDG$OALLOC
         1 000447   000501 702000 1                  TSX2    OALLOC_FAILED

     2634     6285    2             (LENGTHC(VD$STRING_HEADER) + (END_INDEX - START_INDEX) +
     2635     6286    2             %(NB_PER_WORD-1)) / %NB_PER_WORD)
     2636     6287    2             ALTRET (OALLOC_FAILED);
     2637     6288    2           PATT$ENTRY.MATCH$->VD$TEXTC_REMOTE.LENGTH# =

   6288  1 000450   200025 470500                    LDP0    PATT_ENTRY$,,AUTO
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:304  
         1 000451   000003 471500                    LDP1    3,,PR0
         1 000452   200023 473500                    LDP3    @START_INDEX,,AUTO
         1 000453   200024 474500                    LDP4    @END_INDEX,,AUTO
         1 000454   400000 236100                    LDQ     0,,PR4
         1 000455   300000 136100                    SBLQ    0,,PR3
         1 000456   000033 736000                    QLS     27
         1 000457   100002 552140                    STBQ    2,'40'O,PR1

     2638     6289    2             END_INDEX - START_INDEX;
     2639     6290    2           PATT$ENTRY.MATCH$->VD$TEXTC_REMOTE.BYTES =

   6290  1 000460   000003 471500                    LDP1    3,,PR0
         1 000461   100002 236100                    LDQ     2,,PR1
         1 000462   000033 772000                    QRL     27
         1 000463   200003 475500                    LDP5    @PATT_STRING,,AUTO
         1 000464   000000 620006                    EAX0    0,QL
         1 000465   500000 236100                    LDQ     0,,PR5
         1 000466   000033 772000                    QRL     27
         1 000467   000000 621006                    EAX1    0,QL
         1 000470   400000 236100                    LDQ     0,,PR4
         1 000471   300000 136100                    SBLQ    0,,PR3
         1 000472   300000 235100                    LDA     0,,PR3
         1 000473   000000 622006                    EAX2    0,QL
         1 000474   040140 100545                    MLR     fill='040'O
         1 000475   500000 200012                    ADSC9   0,A,PR5                  cn=1,n=*X2
         1 000476   100002 200010                    ADSC9   2,,PR1                   cn=1,n=*X0

     2640     6291    2             SUBSTR(PATT_STRING.BYTES, START_INDEX, END_INDEX - START_INDEX);
     2641     6292
     2642     6293    2           RETURN;

   6293  1 000477   200022 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000500   000001 702211                    TSX2  ! 1,X1

     2643     6294
     2644     6295
     2645     6296    2   OALLOC_FAILED:
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:305  
     2646     6297    2           ALTRETURN;

   6297  1 000501   200022 221300       OALLOC_FAIL* LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000502   000000 702211                    TSX2  ! 0,X1
     2647     6298
     2648     6299    2   END APPEND_LITERAL;
     2649     6300
     2650     6301    1   END VDE$PPATT_STRING;
     2651     6302        %EOD;

PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:306  
--  Include file information  --

   XU_SUBS_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PPATT_STRING.
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:307  

 **** Variables and constants ****

  ****  Section 000 RoData VDE$PPATT_STRING

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CONTROL_VALUE$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    24-0-0/w PTR         r     1 @END_INDEX                 6-0-0/w PTR         r     1 @NEED_MORE_ENTRIES
     5-0-0/w PTR         r     1 @PATTERN                   3-0-0/w PTR         r     1 @PATT_STRING
     4-0-0/w PTR         r     1 @SCAN_INDEX               23-0-0/w PTR         r     1 @START_INDEX
    10-0-0/w SBIN        r     1 BO_STRING_INDEX           12-0-0/w SBIN        r     1 CONTROL_INDEX
    15-0-0/w SBIN        r     1 CTRL_ARGS(0:1)
    *0-0-0/w SBIN        r     1 END_INDEX                 11-0-0/w SBIN        r     1 EO_STRING_INDEX
    13-0-0/w SBIN        r     1 NB_STRING                 *0-0-0/w BIT         r     1 NEED_MORE_ENTRIES
    *0-0-0/w STRC(252)   r     1 PATTERN                   17-0-0/w PTR         r     1 PATT_ENTRY$
    25-0-0/w PTR         r     1 PATT_ENTRY$               *0-0-0/w ASTR(9)     r     1 PATT_STRING
    14-0-0/c CHAR        r     1 RET_CODE                  *0-0-0/w SBIN        r     1 SCAN_INDEX
     7-0-0/w BIT         r     1 SEEN_EO_MATCH             *0-0-0/w SBIN        r     1 START_INDEX
    21-0-0/w PTR         r     1 SUBST_FIELD$              20-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 VD_$CONTROL                0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:308  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 CONTROL$VALUE              0-0-0/w STRC(144)   r     1 PATT$ENTRY
     0-0-0/w STRC(144)   r     1 PATT$ENTRY
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(81)    r     1 VD$STRING_HEADER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDE$PPATT_STRING requires 323 words for executable code.
   Procedure VDE$PPATT_STRING requires 28 words of local(AUTO) storage.
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:309  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:310  
          MINI XREF LISTING

APPEND_LITERAL
      6247**PROC     6111--CALL
APPEND_LITERAL_FAILED
      6193**LABEL    6111--CALLALT
BO_STRING_INDEX
      5801**DCL      6088<<ASSIGN   6110>>IF       6111<>CALL
CONTROL$VALUE.BYTES
      5865**DCL      6094>>CALLBLT
CONTROL$VALUE.LENGTH#
      5863**DCL      5865--IMP-SIZ  6094>>CALLBLT
CONTROL_INDEX
      5803**DCL      6094<<CALLBLT  6096>>ASSIGN   6097>>IF       6109>>ASSIGN   6138>>IF       6184>>ASSIGN
CONTROL_VALUE$
      5796**DCL      5837--IMP-PTR  6094>>CALLBLT  6094>>CALLBLT
CTRLFN_BOM_NOT_BEFORE_EOM
      6190**LABEL    6155--GOTO
CTRLFN_CURR_CONFLICTS_W_MID
      6173**LABEL    6140--GOTO
CTRL_ARGS
      5806**DCL      6099<>CALL     6131>>ASSIGN   6132>>ASSIGN   6150>>ASSIGN   6151>>ASSIGN
END_INDEX IN PROCEDURE APPEND_LITERAL
      6250**DCL      6247--PROC     6284>>CALL     6288>>ASSIGN   6290>>ASSIGN
EO_STRING_INDEX
      5802**DCL      6107<<ASSIGN   6109<<ASSIGN   6110>>IF       6111<>CALL
EXEC_CONTROL_FAILED
      6181**LABEL    6099--CALLALT
NB_STRING
      5804**DCL      6098<<ASSIGN   6099<>CALL     6102>>ASSIGN
NEED_MORE_ENTRIES
      5690**DCL        61--PROC     6083<<ASSIGN   6113>>IF       6121<<ASSIGN   6276<<ASSIGN
OALLOC_FAILED
      6193**LABEL    6173--CALLALT  6190--CALLALT
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:311  
OALLOC_FAILED IN PROCEDURE APPEND_LITERAL
      6297**LABEL    6284--CALLALT
PATT$ENTRY.CODE#
      5882**DCL      6130<<ASSIGN   6135<<ASSIGN   6141<<ASSIGN   6144<<ASSIGN   6149<<ASSIGN   6156<<ASSIGN
      6159<<ASSIGN
PATT$ENTRY.M#
      5882**DCL      6131<<ASSIGN   6145<<ASSIGN   6150<<ASSIGN
PATT$ENTRY.N#
      5882**DCL      6132<<ASSIGN   6146<<ASSIGN   6151<<ASSIGN
PATT$ENTRY.CODE# IN PROCEDURE APPEND_LITERAL
      6269**DCL      6283<<ASSIGN
PATT$ENTRY.MATCH$ IN PROCEDURE APPEND_LITERAL
      6270**DCL      6284<>CALL     6288>>ASSIGN   6290>>ASSIGN   6290>>ASSIGN
PATTERN
      5647**DCL        61--PROC
PATTERN.ENTRIES
      5684**DCL      6124--ASSIGN   6280--ASSIGN
PATTERN.MX_ENTRIES#
      5673**DCL      6120>>IF       6275>>IF
PATTERN.N_ENTRIES#
      5673**DCL      6120>>IF       6124>>ASSIGN   6125<<ASSIGN   6125>>ASSIGN   6275>>IF       6280>>ASSIGN
      6281<<ASSIGN   6281>>ASSIGN
PATT_ENTRY$
      5807**DCL      5878--IMP-PTR  6124<<ASSIGN   6130>>ASSIGN   6131>>ASSIGN   6132>>ASSIGN   6135>>ASSIGN
      6141>>ASSIGN   6144>>ASSIGN   6145>>ASSIGN   6146>>ASSIGN   6149>>ASSIGN   6150>>ASSIGN   6151>>ASSIGN
      6156>>ASSIGN   6159>>ASSIGN
PATT_ENTRY$ IN PROCEDURE APPEND_LITERAL
      6254**DCL      6265--IMP-PTR  6280<<ASSIGN   6283>>ASSIGN   6284>>CALL     6288>>ASSIGN   6290>>ASSIGN
      6290>>ASSIGN
PATT_STRING
      5623**DCL        61--PROC
PATT_STRING.BYTES
      5633**DCL      6094>>CALLBLT  6099<>CALL     6290>>ASSIGN
PATT_STRING.LENGTH#
      5631**DCL      5633--IMP-SIZ  6087>>DOWHILE  6091>>ASSIGN   6092>>DOWHILE  6094>>CALLBLT  6097>>IF
      6098>>ASSIGN   6099>>CALL     6102<<ASSIGN   6138>>IF       6290>>ASSIGN
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:312  
RET_CODE
      5805**DCL      6089<<ASSIGN   6092>>DOWHILE  6099<>CALL     6106>>IF       6117>>IF       6127>>DOSELCT
      6163<>CALL
SCAN_INDEX
      5638**DCL        61--PROC     6087>>DOWHILE  6088>>ASSIGN   6091<<ASSIGN   6092>>DOWHILE  6094>>CALLBLT
      6096<<ASSIGN   6099<>CALL     6107>>ASSIGN   6138>>IF
SEEN_EO_MATCH
      5800**DCL      6084<<ASSIGN   6154>>IF       6160<<ASSIGN
START_INDEX IN PROCEDURE APPEND_LITERAL
      6249**DCL      6247--PROC     6284>>CALL     6288>>ASSIGN   6290>>ASSIGN   6290>>ASSIGN
SUBST$NUMBER.OBJECT.CLASS#
      5978**DCL      6183<<ASSIGN
SUBST$NUMBER.V#
      5980**DCL      6184<<ASSIGN
SUBST_FIELD$
      5809**DCL      5946--IMP-PTR  6182<<ASSIGN   6183>>ASSIGN   6184>>ASSIGN
VD$ERR
      5893**DCL      6182--ASSIGN
VD$ERR.ERR.CODE#
      5932**DCL      6175<<ASSIGN   6192<<ASSIGN
VD$ERR.FLAGLEV#
      5935**DCL      6176<<ASSIGN   6193<<ASSIGN
VD$STRING_HEADER
      6052**DCL      6284--CALL
VD$TEXTC_REMOTE.BYTES
      6039**DCL      6290<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      6037**DCL      6039--IMP-SIZ  6288<<ASSIGN   6290>>ASSIGN
VDG$ESCREECH
      5695**DCL-ENT  6163--CALL
VDG$EXEC_CONTROL
      5693**DCL-ENT  6099--CALL
VDG$OALLOC
      5694**DCL-ENT  6173--CALL     6190--CALL     6284--CALL
VD_$CONTROL
      5760**DCL      5796--DCLINIT
PL6.E3A0      #003=VDE$PPATT_STRING File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:313  
VD_$CONTROL.LENGTH#
      5786**DCL      5788--IMP-SIZ  6090>>IF
VD_6E.ERR_HEAD$
      5730**DCL      6181>>IF       6182>>ASSIGN
VD_6E.ERR_TAIL$
      5730**DCL      6181>>IF
VD_ERR$
      5808**DCL      5893--IMP-PTR  6173<>CALL     6175>>ASSIGN   6176>>ASSIGN   6190<>CALL     6192>>ASSIGN
      6193>>ASSIGN

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:314  
     2652        1        /*T***********************************************************/
     2653        2        /*T*                                                         */
     2654        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2655        4        /*T*                                                         */
     2656        5        /*T***********************************************************/
     2657        6
     2658        7        /*D* NAME: VDE$PXUE_EXP
     2659        8            PARAMETERS:
     2660        9                PT_XUE_EXP - XUE_EXP# ParseTree node.
     2661       10                NUMBER - Uninitialized SBIN.
     2662       11                BUFFER$ - Optional uninitialized ptr.
     2663       12                RET_CODE - Optional uninitialized CHAR(1) CALIGNED.
     2664       13                CTRL_ARGS - Optional uninitialized array (0:%(MX_CTRL_FN_ARGS-1)
     2665       14                    of words.
     2666       15            INPUT:
     2667       16                XUE_ECB - Static control block for X$EVAL.  It must
     2668       17                    already have a workspace VD$BUFFER allocated for it.
     2669       18                    If PT_XUE_EXP is not passed, XUE_ECB.OUT$ must point to
     2670       19                    the VD$TEXTC value of the string expression.
     2671       20                VD_$CONTROL - The VD$BUFFER for the $CONTROL predefined
     2672       21                    name.  Value's length may be 0.
     2673       22            OUTPUT:
     2674       23                Depends on entry-point.
     2675       24            DESCRIPTION:
     2676       25                This routine contains two entry points:  call VDE$PSTRING
     2677       26                to evaluate the XUE_EXP# node to a string (file of records).
     2678       27                Call VDE$PNUMBER to evaluate the XUE_EXP# node to a number.
     2679       28                $CONTROL-functions are supported for VDE$PSTRING, but not
     2680       29                for VDE$PNUMBER.
     2681       30        */
     2682       31
     2683       32        VDE$PXUE_EXP: PROC (PT_XUE_EXP, NUMBER, BUFFER$, RET_CODE, CTRL_ARGS)
     2684       33                  ALTRET;
     2685       34
     2686       35        %INCLUDE VD_MACROS_M;
     2687     2250        %INCLUDE VD_PERR_C;
     2688     2398        %INCLUDE XUE_MACRO_C;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:315  
     2689     3142        %INCLUDE XU_MACRO_C;
     2690     6236        %INCLUDE XU_PERR_C;
     2691     6427
     2692     6428
     2693     6429        %PARSE$OUT (NAME=PT_XUE_EXP, STCLASS=PARAM);
     2694     6474    1   DCL NUMBER SBIN;
     2695     6475    1   DCL BUFFER$ PTR;
     2696     6476    1   DCL RET_CODE CHAR(1) CALIGNED;
     2697     6477    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2698     6478
     2699     6479
     2700     6480    1   DCL X$EVAL              ENTRY (1) ALTRET;
     2701     6481    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2702     6482    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2703     6483    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
     2704     6484    1   DCL VDG$ESCREECH        ENTRY (3);
     2705     6485    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     2706     6486
     2707     6487
     2708     6488        %VD_6E (STCLASS=SYMREF);
     2709     6524        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2710     6584        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     2711     6786    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     2712     6787
     2713     6788
     2714     6789    1   DCL CONTROL_VALUE$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2715     6790
     2716     6791
     2717     6792
     2718     6793    1   DCL NB_STRING SBIN;
     2719     6794    1   DCL START_NUMBER SBIN;
     2720     6795    1   DCL PARTIAL_LENGTH SBIN;
     2721     6796    1   DCL STRING$ PTR;
     2722     6797    1   DCL VD_ERR$ PTR;
     2723     6798    1   DCL SUBST_FIELD$ PTR;
     2724     6799    1   DCL INDX SBIN;
     2725     6800
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:316  
     2726     6801
     2727     6802        %VD$TEXTC (NAME=STRING, STCLASS="BASED(XUE_ECB.OUT$)");
     2728     6825        %VD$BUFFER (NAME=CONTROL$VALUE, STCLASS="BASED(CONTROL_VALUE$)");
     2729     6883        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
     2730     6941        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2731     6994        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
     2732     7047        %VD$ERR (NAME=VD$ERR_LAST, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     2733     7100        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2734     7145        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2735     7190        %VD$BUFFER_HEADER;
     2736     7226        %VD$STRING_HEADER;
     2737     7262        %VD$TEXTC_REMOTE;
     2738     7323
     2739     7324
     2740     7325
     2741     7326        /*D* NAME: VDE$PSTRING
     2742     7327            PARAMETERS:
     2743     7328                PT_XUE_EXP - Optional XUE_EXP# PT node.
     2744     7329                NUMBER - Index into string which is value of PT_XUE_EXP
     2745     7330                    node of next character to process.  If PT_XUE_EXP is
     2746     7331                    passed, NUMBER need not be initialized; else, NUMBER
     2747     7332                    is an index into XUE_ECB.OUT$->VD$TEXTC.BYTES.
     2748     7333                BUFFER$ - Optional uninitialized ptr.
     2749     7334                RET_CODE - Optional uninitialized CHAR(1) CALIGNED.
     2750     7335                CTRL_ARGS - Optional uninitialized array (0:%(MX_CTRL_FN_ARGS-1)
     2751     7336                    of words.
     2752     7337            INPUT:
     2753     7338                Same as for main routine.
     2754     7339            OUTPUT:
     2755     7340                NUMBER will be modified to point to the next character
     2756     7341                    to process.
     2757     7342                If BUFFER$ is not passed, then BUFFER$, RET_CODE, and
     2758     7343                    CTRL_ARGS will be ignored.
     2759     7344                If BUFFER$ is passed:
     2760     7345                    BUFFER$ will contain ADDR(NIL) if there were no characters
     2761     7346                        between NUMBER at entry and either the next $CONTROL
     2762     7347                        function or the end of the string.  Otherwise, BUFFER$
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:317  
     2763     7348                        will point to a VD$BUFFER containing those characters.
     2764     7349                    RET_CODE will contain an %FNID_ value, indicating the
     2765     7350                        type of $CONTROL-function found; if none found or
     2766     7351                        it was handled entirely internally, RET_CODE will
     2767     7352                        contain %CHR_SPACE.
     2768     7353                    CTRL_ARGS (if supplied) will be cleared.
     2769     7354                            For the following RET_CODE values, CTRL_ARGS will
     2770     7355                            contain the specified or default values for
     2771     7356                            arguments of the function:
     2772     7357                        %FNID_WILD_CHAR: CTRL_ARGS (0) = minimum # chars to
     2773     7358                            match, CTRL_ARGS (1) = maximum # chars to match.
     2774     7359        *N**N*          %FNID_SET_OF_SEQUENCES: CTRL_ARGS (0) = # chars to match.
     2775     7360                If we ALTRETURN due to a recoverable error, we'll set
     2776     7361                    the "%U1" substitution field of the last VD$ERR to
     2777     7362                    the index into the PT_XUE_EXP node's string value of
     2778     7363                    the error.
     2779     7364                    The caller should set .CMDLINE_INDEX# in that VD$ERR to
     2780     7365                    PT_XUE_EXP's .HI_CHAR.
     2781     7366            DESCRIPTION:
     2782     7367                If PT_XUE_EXP given, call X$EVAL to evaluate it.  If
     2783     7368                    the workspace is too small, release it and allocate a
     2784     7369                    larger one.
     2785     7370                If BUFFER$ is not given, return now.  Otherwise, build a
     2786     7371                    VD$BUFFER for the next portion of the string:
     2787     7372                Find the next $CONTROL-function invocation in the literal:
     2788     7373                Call VDG$EXEC_CONTROL to execute the function.  If
     2789     7374                    VDG$EXEC_CONTROL couldn't execute the entire function,
     2790     7375                    build a VD$BUFFER containing any characters
     2791     7376                    seen up to this invocation, and return an appropriate
     2792     7377                    %FNID_ value in RET_CODE.
     2793     7378                If VDG$EXEC_CONTROL could execute the $CONTROL function
     2794     7379                    entirely, then loop on calling it.
     2795     7380        */
     2796     7381
     2797     7382    1   VDE$PSTRING: ENTRY (PT_XUE_EXP, NUMBER, BUFFER$, RET_CODE, CTRL_ARGS)
     2798     7383    1             ALTRET;
     2799     7384
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:318  
     2800     7385
     2801     7386    2           IF ADDR(BUFFER$) ~= ADDR(NIL) THEN DO;
     2802     7387    2              BUFFER$ = ADDR(NIL);
     2803     7388    2              RET_CODE = %CHR_SPACE;
     2804     7389    2              CTRL_ARGS = %CLEAR;
     2805     7390    2              END;
     2806     7391
     2807     7392    2           IF ADDR(PT_XUE_EXP) ~= ADDR(NIL) THEN DO;
     2808     7393    2              CALL EVAL_PT_XUE_EXP
     2809     7394    2                ALTRET (EVAL_PT_XUE_EXP_FAILED);
     2810     7395    2              NUMBER = 0;
     2811     7396    2              END;
     2812     7397    1           IF ADDR(BUFFER$) = ADDR(NIL) THEN
     2813     7398    1              RETURN;
     2814     7399
     2815     7400    1           START_NUMBER = NUMBER;
     2816     7401    1           STRING$ = XUE_ECB.OUT$;
     2817     7402
     2818     7403    1           IF VD_$CONTROL.LENGTH# = 0 THEN
     2819     7404    1              NUMBER = STRING.LENGTH#;
     2820     7405    2           DO WHILE NUMBER < STRING.LENGTH#
     2821     7406    2             AND RET_CODE = %CHR_SPACE;
     2822     7407    2              CALL INDEX (PARTIAL_LENGTH, CONTROL$VALUE.BYTES, STRING.BYTES,
     2823     7408    2                NUMBER);
     2824     7409    2              NUMBER = PARTIAL_LENGTH;
     2825     7410    3              IF NUMBER < STRING.LENGTH# THEN DO;
     2826     7411    3                 NB_STRING = STRING.LENGTH#;
     2827     7412    3                 CALL VDG$EXEC_CONTROL (NB_STRING, STRING.BYTES,
     2828     7413    3                   NUMBER, RET_CODE, CTRL_ARGS)
     2829     7414    3                   ALTRET (EXEC_CONTROL_FAILED);
     2830     7415    3                 STRING.LENGTH# = NB_STRING;
     2831     7416    3                 END;
     2832     7417    2              END;
     2833     7418
     2834     7419    1           IF RET_CODE = %CHR_SPACE THEN
     2835     7420    1              PARTIAL_LENGTH = NUMBER;
     2836     7421    2           IF PARTIAL_LENGTH - START_NUMBER > 0 THEN DO;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:319  
     2837     7422    2              NB_STRING = PARTIAL_LENGTH - START_NUMBER;
     2838     7423    2              CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,
     2839     7424    2                (LENGTHC(VD$BUFFER_HEADER) + NB_STRING + %NB_PER_WORD-1) /
     2840     7425    2                %NB_PER_WORD)
     2841     7426    2                ALTRET (OALLOC_FAILED);
     2842     7427    2              BUFFER.LENGTH# = NB_STRING;
     2843     7428    2              BUFFER.BYTES = SUBSTR(STRING.BYTES, START_NUMBER,
     2844     7429    2                NB_STRING);
     2845     7430    2              END;
     2846     7431
     2847     7432    1           RETURN;
     2848     7433
     2849     7434
     2850     7435
     2851     7436    1   EXEC_CONTROL_FAILED:
     2852     7437    2           IF VD_6E.ERR_HEAD$ ~= VD_6E.ERR_TAIL$ THEN DO;
     2853     7438    2              SUBST_FIELD$ = PINCRW(VD_6E.ERR_TAIL$, LENGTHW(VD$ERR));
     2854     7439    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;
     2855     7440    2              SUBST$NUMBER.V# (0) = NUMBER;
     2856     7441    2              END;
     2857     7442    1           ALTRETURN;
     2858     7443
     2859     7444    1   EVAL_PT_XUE_EXP_FAILED: ;
     2860     7445    1   OALLOC_FAILED: ;
     2861     7446    1           ALTRETURN;
     2862     7447
     2863     7448        /*D* NAME: VDE$PNUMBER
     2864     7449            PARAMETERS:
     2865     7450                PT_XUE_EXP - Parse node for %XUE_EXP#.
     2866     7451                NUMBER - Uninitialized SBIN.
     2867     7452            INPUT:
     2868     7453                Same as for main routine.
     2869     7454            OUTPUT:
     2870     7455                NUMBER will contain the numeric value of the evaluated
     2871     7456                    expression.
     2872     7457            DESCRIPTION:
     2873     7458                Call X$EVAL to evaluate the expression into a textc string.
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:320  
     2874     7459                Call X$DEC_CONVERT to convert the string to a number.
     2875     7460        */
     2876     7461
     2877     7462    1   VDE$PNUMBER: ENTRY (PT_XUE_EXP, NUMBER) ALTRET;
     2878     7463
     2879     7464
     2880     7465    1           NUMBER = 0;
     2881     7466    1           CALL EVAL_PT_XUE_EXP
     2882     7467    1             ALTRET (EVAL_PT_XUE_EXP_FAILED);
     2883     7468
     2884     7469    1           CALL X$DEC_CONVERT (XUE_ECB.OUT$, NUMBER)
     2885     7470    1             ALTRET (DEC_CONVERT_FAILED);
     2886     7471
     2887     7472    1           RETURN;
     2888     7473
     2889     7474
     2890     7475    1   DEC_CONVERT_FAILED:
     2891     7476    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2892     7477    1             ALTRET (OALLOC_FAILED);
     2893     7478    1           VD$ERR.ERR.CODE# = %E$DECIMAL_NOT_LEGAL;
     2894     7479    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2895     7480    1           VD$ERR.CMDLINE_INDEX# = PT_XUE_EXP.CPOS;
     2896     7481
     2897     7482    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     2898     7483    1           INDX = 0;
     2899     7484    2           DO WHILE INDX < %MX_CMD_OBJECTS
     2900     7485    2             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2901     7486    2              INDX = INDX + 1;
     2902     7487    2              END;
     2903     7488    1           IF INDX >= %MX_CMD_OBJECTS THEN
     2904     7489    1              CALL VDG$ESCREECH (INDX);
     2905     7490    1           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),
     2906     7491    1             (LENGTHC(VD$STRING_HEADER) + STRING.LENGTH# + %NB_PER_WORD-1) /
     2907     7492    1             %NB_PER_WORD)
     2908     7493    1             ALTRET (OALLOC_FAILED);
     2909     7494    1           VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH# = STRING.LENGTH#;
     2910     7495    1           VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.BYTES = STRING.BYTES;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:321  
     2911     7496    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
     2912     7497    1           SUBST$POINTER.V$ (0) =
     2913     7498    1             ADDR(VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH#);
     2914     7499    1           ALTRETURN;
     2915     7500
     2916     7501        %BOX (TITLE=EVAL_PT_XUE_EXP, PAGE=YES);
              7509    1
              7513    1   /***************************************************************************
              7515    1    *                                                                         *
              7519    1            *                              EVAL_PT_XUE_EXP                            *
              7521    1            *                                                                         *
              7523    1           ***************************************************************************/

     2917     7527
     2918     7528        /*I* NAME: EVAL_PT_XUE_EXP
     2919     7529            PARAMETERS:
     2920     7530                None.
     2921     7531            INPUT:
     2922     7532                PT_XUE_EXP - Parse node for %XUE_EXP#.
     2923     7533                XUE_ECB - Eval control block for X$EVAL.
     2924     7534            OUTPUT:
     2925     7535                XUE_ECB.OUT$ will point to a VD$TEXTC (owned by X$EVAL)
     2926     7536                    containing the value of the string expression.
     2927     7537                XUE_ECB.WKSZ and .WORK$ may be changed.
     2928     7538            DESCRIPTION:
     2929     7539                Evaluate the expression.
     2930     7540        */
     2931     7541
     2932     7542    1   EVAL_PT_XUE_EXP: PROC ALTRET;
     2933     7543
     2934     7544
     2935     7545    2   DCL WORK_BUFFER$ PTR;
     2936     7546    2   DCL WKSZ SBIN;
     2937     7547
     2938     7548
     2939     7549        %VD$BUFFER (NAME=WORK$BUFFER, STCLASS="BASED(WORK_BUFFER$)");
     2940     7607
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:322  
     2941     7608
     2942     7609
     2943     7610    2           XUE_ECB.TREE$ = ADDR(PT_XUE_EXP);
     2944     7611
     2945     7612    2   RE_EVAL:
     2946     7613    2           CALL X$EVAL (XUE_ECB)
     2947     7614    3           WHENRETURN DO; RETURN; END;
     2948     7615
     2949     7616                /*
     2950     7617                *   Got an error from X$EVAL:  is it ours or X$EVAL's?
     2951     7618                *   Our subroutines (eg, VDE$PREAD_NAME_FOR_EVAL and
     2952     7619                *       VDE$PFUNCTIONS) push a VD$ERR onto the error chain
     2953     7620                *       and set (or get set for them) XUE_ECB.ERR.CODE --
     2954     7621                *       but not .ERR.FCG.  However, if it is a monitor error,
     2955     7622                *       they'll push the VD$ERR and set all fields of
     2956     7623                *       XUE_ECB.ERR -- including the .MON bit.
     2957     7624                *   If X$EVAL finds an error, it'll set all fields of
     2958     7625                *       XUE_ECB.ERR -- except the .MON bit.  Also, of course,
     2959     7626                *       it won't push a VD$ERR.
     2960     7627                */
     2961     7628
     2962     7629    3           IF XUE_ECB.ERR.CODE = %E$XUE#SMALLWORK THEN DO;
     2963     7630                   %INCREMENT (INDX=%STG_EXPAND_EVAL);
     2964     7633    4              IF XUE_ECB.WORK$ ~= ADDR(NIL) THEN DO;
     2965     7634    4                 WORK_BUFFER$ = PINCRW(XUE_ECB.WORK$, - SIZEW(VD$BUFFER_HEADER));
     2966     7635    4                 CALL VDG$OFREE (WORK$BUFFER)
     2967     7636    4                   ALTRET (OFREE_FAILED);
     2968     7637    4                 END;
     2969     7638    3              XUE_ECB.WKSZ# = XUE_ECB.WKSZ# + %NW_EVAL_WORK;
     2970     7639    3              WKSZ = SIZEW(VD$BUFFER_HEADER) + XUE_ECB.WKSZ#;
     2971     7640    3              CALL VDG$OALLOC (%CLS_BUFFER, WORK_BUFFER$, WKSZ)
     2972     7641    3                ALTRET (OALLOC_FAILED);
     2973     7642    3              WORK$BUFFER.LENGTH# = (WORK$BUFFER.OBJECT.SIZE# * %NB_PER_WORD) -
     2974     7643    3                LENGTHC(VD$BUFFER_HEADER);
     2975     7644    3              XUE_ECB.WORK$ = PALIGNW(ADDR(WORK$BUFFER.BYTES));
     2976     7645    3              GOTO RE_EVAL;
     2977     7646    3              END;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:323  
     2978     7647
     2979     7648    2           IF XUE_ECB.ERR.FCG ~= %CLEAR
     2980     7649    3             AND XUE_ECB.ERR.MON = %FALSE THEN DO;
     2981     7650                   /* Error is X$EVAL's */
     2982     7651    3              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2983     7652    3                ALTRET (OALLOC_FAILED);
     2984     7653    3              VD$ERR.ERR = XUE_ECB.ERR;
     2985     7654    3              VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2986     7655    3              VD$ERR_LAST.CMDLINE_INDEX# = XUE_ECB.ERR_POS#;
     2987     7656    3              END;
     2988     7657    2           ALTRETURN;
     2989     7658
     2990     7659
     2991     7660    2   OALLOC_FAILED: ;
     2992     7661    2   OFREE_FAILED: ;
     2993     7662    2           ALTRETURN;
     2994     7663
     2995     7664    2   END EVAL_PT_XUE_EXP;
     2996     7665
     2997     7666
     2998     7667    1   END VDE$PXUE_EXP;
     2999     7668        %EOD;

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:324  
--  Include file information  --

   XU_PERR_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PXUE_EXP.

   Procedure VDE$PXUE_EXP requires 324 words for executable code.
   Procedure VDE$PXUE_EXP requires 26 words of local(AUTO) storage.

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:325  

 Object Unit name= VDE$PXUE_EXP                               File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:15:16.28 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  VDE$PXUE_EXP
    1   Proc  even  none   324    504  VDE$PXUE_EXP
    2  RoData even  none     9     11  VDE$PXUE_EXP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  VDE$PXUE_EXP
     1      3          yes     yes      Std        5  VDE$PSTRING
     1    227          yes     yes      Std        2  VDE$PNUMBER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       2 X$DEC_CONVERT
 yes     yes           Std       5 VDG$EXEC_CONTROL
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 X$EVAL
 yes     yes           Std       1 VDG$OFREE
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_INDEX
                       nStd      0 X66_AALT
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:326  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_$CONTROL                           XUE_ECB
     VD_CMD_OBJECTS$                       B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:327  


     2652        1        /*T***********************************************************/
     2653        2        /*T*                                                         */
     2654        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2655        4        /*T*                                                         */
     2656        5        /*T***********************************************************/
     2657        6
     2658        7        /*D* NAME: VDE$PXUE_EXP
     2659        8            PARAMETERS:
     2660        9                PT_XUE_EXP - XUE_EXP# ParseTree node.
     2661       10                NUMBER - Uninitialized SBIN.
     2662       11                BUFFER$ - Optional uninitialized ptr.
     2663       12                RET_CODE - Optional uninitialized CHAR(1) CALIGNED.
     2664       13                CTRL_ARGS - Optional uninitialized array (0:%(MX_CTRL_FN_ARGS-1)
     2665       14                    of words.
     2666       15            INPUT:
     2667       16                XUE_ECB - Static control block for X$EVAL.  It must
     2668       17                    already have a workspace VD$BUFFER allocated for it.
     2669       18                    If PT_XUE_EXP is not passed, XUE_ECB.OUT$ must point to
     2670       19                    the VD$TEXTC value of the string expression.
     2671       20                VD_$CONTROL - The VD$BUFFER for the $CONTROL predefined
     2672       21                    name.  Value's length may be 0.
     2673       22            OUTPUT:
     2674       23                Depends on entry-point.
     2675       24            DESCRIPTION:
     2676       25                This routine contains two entry points:  call VDE$PSTRING
     2677       26                to evaluate the XUE_EXP# node to a string (file of records).
     2678       27                Call VDE$PNUMBER to evaluate the XUE_EXP# node to a number.
     2679       28                $CONTROL-functions are supported for VDE$PSTRING, but not
     2680       29                for VDE$PNUMBER.
     2681       30        */
     2682       31
     2683       32        VDE$PXUE_EXP: PROC (PT_XUE_EXP, NUMBER, BUFFER$, RET_CODE, CTRL_ARGS)

     32  1 000000   000000 700200 xent  VDE$PXUE_EXP TSX0  ! X66_AUTO_5
         1 000001   000032 000005                    ZERO    26,5
         1 000002   000005 710000 1                  TRA     s:7386
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:328  

     2684       33                  ALTRET;
     2685       34
     2686       35        %INCLUDE VD_MACROS_M;
     2687     2250        %INCLUDE VD_PERR_C;
     2688     2398        %INCLUDE XUE_MACRO_C;
     2689     3142        %INCLUDE XU_MACRO_C;
     2690     6236        %INCLUDE XU_PERR_C;
     2691     6427
     2692     6428
     2693     6429        %PARSE$OUT (NAME=PT_XUE_EXP, STCLASS=PARAM);
     2694     6474    1   DCL NUMBER SBIN;
     2695     6475    1   DCL BUFFER$ PTR;
     2696     6476    1   DCL RET_CODE CHAR(1) CALIGNED;
     2697     6477    1   DCL CTRL_ARGS (0:%(MX_CTRL_FN_ARGS-1)) SBIN ALIGNED;
     2698     6478
     2699     6479
     2700     6480    1   DCL X$EVAL              ENTRY (1) ALTRET;
     2701     6481    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     2702     6482    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2703     6483    1   DCL VDG$EXEC_CONTROL    ENTRY (5) ALTRET;
     2704     6484    1   DCL VDG$ESCREECH        ENTRY (3);
     2705     6485    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     2706     6486
     2707     6487
     2708     6488        %VD_6E (STCLASS=SYMREF);
     2709     6524        %VD_BUFFER (NAME=VD_$CONTROL, STCLASS=SYMREF, MXNB=%MXNB_$CONTROL);
     2710     6584        %XUE_ECB (NAME=XUE_ECB, STCLASS=SYMREF);
     2711     6786    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     2712     6787
     2713     6788
     2714     6789    1   DCL CONTROL_VALUE$ PTR CONSTANT INIT(ADDR(VD_$CONTROL));
     2715     6790
     2716     6791
     2717     6792
     2718     6793    1   DCL NB_STRING SBIN;
     2719     6794    1   DCL START_NUMBER SBIN;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:329  
     2720     6795    1   DCL PARTIAL_LENGTH SBIN;
     2721     6796    1   DCL STRING$ PTR;
     2722     6797    1   DCL VD_ERR$ PTR;
     2723     6798    1   DCL SUBST_FIELD$ PTR;
     2724     6799    1   DCL INDX SBIN;
     2725     6800
     2726     6801
     2727     6802        %VD$TEXTC (NAME=STRING, STCLASS="BASED(XUE_ECB.OUT$)");
     2728     6825        %VD$BUFFER (NAME=CONTROL$VALUE, STCLASS="BASED(CONTROL_VALUE$)");
     2729     6883        %VD$BUFFER (NAME=BUFFER, STCLASS="BASED(BUFFER$)");
     2730     6941        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     2731     6994        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
     2732     7047        %VD$ERR (NAME=VD$ERR_LAST, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     2733     7100        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2734     7145        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     2735     7190        %VD$BUFFER_HEADER;
     2736     7226        %VD$STRING_HEADER;
     2737     7262        %VD$TEXTC_REMOTE;
     2738     7323
     2739     7324
     2740     7325
     2741     7326        /*D* NAME: VDE$PSTRING
     2742     7327            PARAMETERS:
     2743     7328                PT_XUE_EXP - Optional XUE_EXP# PT node.
     2744     7329                NUMBER - Index into string which is value of PT_XUE_EXP
     2745     7330                    node of next character to process.  If PT_XUE_EXP is
     2746     7331                    passed, NUMBER need not be initialized; else, NUMBER
     2747     7332                    is an index into XUE_ECB.OUT$->VD$TEXTC.BYTES.
     2748     7333                BUFFER$ - Optional uninitialized ptr.
     2749     7334                RET_CODE - Optional uninitialized CHAR(1) CALIGNED.
     2750     7335                CTRL_ARGS - Optional uninitialized array (0:%(MX_CTRL_FN_ARGS-1)
     2751     7336                    of words.
     2752     7337            INPUT:
     2753     7338                Same as for main routine.
     2754     7339            OUTPUT:
     2755     7340                NUMBER will be modified to point to the next character
     2756     7341                    to process.
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:330  
     2757     7342                If BUFFER$ is not passed, then BUFFER$, RET_CODE, and
     2758     7343                    CTRL_ARGS will be ignored.
     2759     7344                If BUFFER$ is passed:
     2760     7345                    BUFFER$ will contain ADDR(NIL) if there were no characters
     2761     7346                        between NUMBER at entry and either the next $CONTROL
     2762     7347                        function or the end of the string.  Otherwise, BUFFER$
     2763     7348                        will point to a VD$BUFFER containing those characters.
     2764     7349                    RET_CODE will contain an %FNID_ value, indicating the
     2765     7350                        type of $CONTROL-function found; if none found or
     2766     7351                        it was handled entirely internally, RET_CODE will
     2767     7352                        contain %CHR_SPACE.
     2768     7353                    CTRL_ARGS (if supplied) will be cleared.
     2769     7354                            For the following RET_CODE values, CTRL_ARGS will
     2770     7355                            contain the specified or default values for
     2771     7356                            arguments of the function:
     2772     7357                        %FNID_WILD_CHAR: CTRL_ARGS (0) = minimum # chars to
     2773     7358                            match, CTRL_ARGS (1) = maximum # chars to match.
     2774     7359        *N**N*          %FNID_SET_OF_SEQUENCES: CTRL_ARGS (0) = # chars to match.
     2775     7360                If we ALTRETURN due to a recoverable error, we'll set
     2776     7361                    the "%U1" substitution field of the last VD$ERR to
     2777     7362                    the index into the PT_XUE_EXP node's string value of
     2778     7363                    the error.
     2779     7364                    The caller should set .CMDLINE_INDEX# in that VD$ERR to
     2780     7365                    PT_XUE_EXP's .HI_CHAR.
     2781     7366            DESCRIPTION:
     2782     7367                If PT_XUE_EXP given, call X$EVAL to evaluate it.  If
     2783     7368                    the workspace is too small, release it and allocate a
     2784     7369                    larger one.
     2785     7370                If BUFFER$ is not given, return now.  Otherwise, build a
     2786     7371                    VD$BUFFER for the next portion of the string:
     2787     7372                Find the next $CONTROL-function invocation in the literal:
     2788     7373                Call VDG$EXEC_CONTROL to execute the function.  If
     2789     7374                    VDG$EXEC_CONTROL couldn't execute the entire function,
     2790     7375                    build a VD$BUFFER containing any characters
     2791     7376                    seen up to this invocation, and return an appropriate
     2792     7377                    %FNID_ value in RET_CODE.
     2793     7378                If VDG$EXEC_CONTROL could execute the $CONTROL function
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:331  
     2794     7379                    entirely, then loop on calling it.
     2795     7380        */
     2796     7381
     2797     7382    1   VDE$PSTRING: ENTRY (PT_XUE_EXP, NUMBER, BUFFER$, RET_CODE, CTRL_ARGS)

   7382  1 000003   000000 700200 xent  VDE$PSTRING  TSX0  ! X66_AUTO_5
         1 000004   000032 000005                    ZERO    26,5

     2798     7383    1             ALTRET;
     2799     7384
     2800     7385
     2801     7386    2           IF ADDR(BUFFER$) ~= ADDR(NIL) THEN DO;

   7386  1 000005   200005 236100                    LDQ     @BUFFER$,,AUTO
         1 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000007   000022 600000 1                  TZE     s:7392

     2802     7387    2              BUFFER$ = ADDR(NIL);

   7387  1 000010   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000011   200005 470500                    LDP0    @BUFFER$,,AUTO
         1 000012   000000 756100                    STQ     0,,PR0

     2803     7388    2              RET_CODE = %CHR_SPACE;

   7388  1 000013   200006 471500                    LDP1    @RET_CODE,,AUTO
         1 000014   040100 100400                    MLR     fill='040'O
         1 000015   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000016   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2804     7389    2              CTRL_ARGS = %CLEAR;

   7389  1 000017   200007 473500                    LDP3    @CTRL_ARGS,,AUTO
         1 000020   300000 450100                    STZ     0,,PR3
         1 000021   300001 450100                    STZ     1,,PR3

     2805     7390    2              END;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:332  

     2806     7391
     2807     7392    2           IF ADDR(PT_XUE_EXP) ~= ADDR(NIL) THEN DO;

   7392  1 000022   200003 236100                    LDQ     @PT_XUE_EXP,,AUTO
         1 000023   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000024   000031 600000 1                  TZE     s:7397

     2808     7393    2              CALL EVAL_PT_XUE_EXP

   7393  1 000025   000370 701000 1                  TSX1    EVAL_PT_XUE_EXP
         1 000026   000226 702000 1                  TSX2    EVAL_PT_XUE_EXP_FAILED

     2809     7394    2                ALTRET (EVAL_PT_XUE_EXP_FAILED);
     2810     7395    2              NUMBER = 0;

   7395  1 000027   200004 470500                    LDP0    @NUMBER,,AUTO
         1 000030   000000 450100                    STZ     0,,PR0

     2811     7396    2              END;

     2812     7397    1           IF ADDR(BUFFER$) = ADDR(NIL) THEN

   7397  1 000031   200005 236100                    LDQ     @BUFFER$,,AUTO
         1 000032   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000033   000035 601000 1                  TNZ     s:7400

     2813     7398    1              RETURN;

   7398  1 000034   000000 702200 xent               TSX2  ! X66_ARET

     2814     7399
     2815     7400    1           START_NUMBER = NUMBER;

   7400  1 000035   200004 470500                    LDP0    @NUMBER,,AUTO
         1 000036   000000 235100                    LDA     0,,PR0
         1 000037   200011 755100                    STA     START_NUMBER,,AUTO
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:333  

     2816     7401    1           STRING$ = XUE_ECB.OUT$;

   7401  1 000040   000004 236000 xsym               LDQ     XUE_ECB+4
         1 000041   200013 756100                    STQ     STRING$,,AUTO

     2817     7402
     2818     7403    1           IF VD_$CONTROL.LENGTH# = 0 THEN

   7403  1 000042   000002 220000 xsym               LDX0    VD_$CONTROL+2
         1 000043   000050 601000 1                  TNZ     s:7405

     2819     7404    1              NUMBER = STRING.LENGTH#;

   7404  1 000044   000004 471400 xsym               LDP1    XUE_ECB+4
         1 000045   100000 236100                    LDQ     0,,PR1
         1 000046   000033 772000                    QRL     27
         1 000047   000000 756100                    STQ     0,,PR0

     2820     7405    2           DO WHILE NUMBER < STRING.LENGTH#

   7405  1 000050   000125 710000 1                  TRA     s:7417

     2821     7406    2             AND RET_CODE = %CHR_SPACE;
     2822     7407    2              CALL INDEX (PARTIAL_LENGTH, CONTROL$VALUE.BYTES, STRING.BYTES,

   7407  1 000051   000000 470400 0                  LDP0    CONTROL_VALUE$
         1 000052   000002 220100                    LDX0    2,,PR0
         1 000053   000004 471400 xsym               LDP1    XUE_ECB+4
         1 000054   100000 236100                    LDQ     0,,PR1
         1 000055   000033 772000                    QRL     27
         1 000056   200012 631500                    EPPR1   PARTIAL_LENGTH,,AUTO
         1 000057   000000 633500                    EPPR3   0,,PR0
         1 000060   000012 221003                    LDX1    10,DU
         1 000061   300000 500511                    A9BD    0,X1,PR3
         1 000062   000000 623010                    EAX3    0,X0
         1 000063   000004 470400 xsym               LDP0    XUE_ECB+4
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:334  
         1 000064   000001 220003                    LDX0    1,DU
         1 000065   000000 500510                    A9BD    0,X0,PR0
         1 000066   000000 620006                    EAX0    0,QL
         1 000067   200004 474500                    LDP4    @NUMBER,,AUTO
         1 000070   400000 236100                    LDQ     0,,PR4
         1 000071   000000 701000 xent               TSX1    X66_INDEX
         1 000072   000000 011000                    NOP     0

     2823     7408    2                NUMBER);
     2824     7409    2              NUMBER = PARTIAL_LENGTH;

   7409  1 000073   200012 235100                    LDA     PARTIAL_LENGTH,,AUTO
         1 000074   400000 755100                    STA     0,,PR4

     2825     7410    3              IF NUMBER < STRING.LENGTH# THEN DO;

   7410  1 000075   000004 470400 xsym               LDP0    XUE_ECB+4
         1 000076   000000 236100                    LDQ     0,,PR0
         1 000077   000033 772000                    QRL     27
         1 000100   400000 116100                    CMPQ    0,,PR4
         1 000101   000125 604400 1                  TMOZ    s:7417

     2826     7411    3                 NB_STRING = STRING.LENGTH#;

   7411  1 000102   200010 756100                    STQ     NB_STRING,,AUTO

     2827     7412    3                 CALL VDG$EXEC_CONTROL (NB_STRING, STRING.BYTES,

   7412  1 000103   200007 236100                    LDQ     @CTRL_ARGS,,AUTO
         1 000104   200030 756100                    STQ     WKSZ+6,,AUTO
         1 000105   200006 236100                    LDQ     @RET_CODE,,AUTO
         1 000106   200004 235100                    LDA     @NUMBER,,AUTO
         1 000107   200026 757100                    STAQ    WKSZ+4,,AUTO
         1 000110   000004 236000 xsym               LDQ     XUE_ECB+4
         1 000111   200000 036007                    ADLQ    65536,DL
         1 000112   200025 756100                    STQ     WKSZ+3,,AUTO
         1 000113   200010 631500                    EPPR1   NB_STRING,,AUTO
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:335  
         1 000114   200024 451500                    STP1    WKSZ+2,,AUTO
         1 000115   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000116   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000117   000000 701000 xent               TSX1    VDG$EXEC_CONTROL
         1 000120   000211 702000 1                  TSX2    EXEC_CONTROL_FAILED

     2828     7413    3                   NUMBER, RET_CODE, CTRL_ARGS)
     2829     7414    3                   ALTRET (EXEC_CONTROL_FAILED);
     2830     7415    3                 STRING.LENGTH# = NB_STRING;

   7415  1 000121   000004 470400 xsym               LDP0    XUE_ECB+4
         1 000122   200010 236100                    LDQ     NB_STRING,,AUTO
         1 000123   000033 736000                    QLS     27
         1 000124   000000 552140                    STBQ    0,'40'O,PR0

     2831     7416    3                 END;

     2832     7417    2              END;

   7417  1 000125   200004 470500                    LDP0    @NUMBER,,AUTO
         1 000126   000004 471400 xsym               LDP1    XUE_ECB+4
         1 000127   100000 236100                    LDQ     0,,PR1
         1 000130   000033 772000                    QRL     27
         1 000131   000000 116100                    CMPQ    0,,PR0
         1 000132   000140 604400 1                  TMOZ    s:7419
         1 000133   200006 473500                    LDP3    @RET_CODE,,AUTO
         1 000134   040000 106500                    CMPC    fill='040'O
         1 000135   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         1 000136   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000137   000051 600000 1                  TZE     s:7407

     2833     7418
     2834     7419    1           IF RET_CODE = %CHR_SPACE THEN

   7419  1 000140   200006 473500                    LDP3    @RET_CODE,,AUTO
         1 000141   040000 106500                    CMPC    fill='040'O
         1 000142   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:336  
         1 000143   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000144   000147 601000 1                  TNZ     s:7421

     2835     7420    1              PARTIAL_LENGTH = NUMBER;

   7420  1 000145   000000 235100                    LDA     0,,PR0
         1 000146   200012 755100                    STA     PARTIAL_LENGTH,,AUTO

     2836     7421    2           IF PARTIAL_LENGTH - START_NUMBER > 0 THEN DO;

   7421  1 000147   200012 236100                    LDQ     PARTIAL_LENGTH,,AUTO
         1 000150   200011 136100                    SBLQ    START_NUMBER,,AUTO
         1 000151   000210 604400 1                  TMOZ    s:7432

     2837     7422    2              NB_STRING = PARTIAL_LENGTH - START_NUMBER;

   7422  1 000152   200012 236100                    LDQ     PARTIAL_LENGTH,,AUTO
         1 000153   200011 136100                    SBLQ    START_NUMBER,,AUTO
         1 000154   200010 756100                    STQ     NB_STRING,,AUTO

     2838     7423    2              CALL VDG$OALLOC (%CLS_BUFFER, BUFFER$,

   7423  1 000155   000015 036007                    ADLQ    13,DL
         1 000156   000004 506007                    DIV     4,DL
         1 000157   200024 756100                    STQ     WKSZ+2,,AUTO
         1 000160   200024 634500                    EPPR4   WKSZ+2,,AUTO
         1 000161   200027 454500                    STP4    WKSZ+5,,AUTO
         1 000162   200005 236100                    LDQ     @BUFFER$,,AUTO
         1 000163   200026 756100                    STQ     WKSZ+4,,AUTO
         1 000164   000000 236000 2                  LDQ     0
         1 000165   200025 756100                    STQ     WKSZ+3,,AUTO
         1 000166   200025 630500                    EPPR0   WKSZ+3,,AUTO
         1 000167   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000170   000000 701000 xent               TSX1    VDG$OALLOC
         1 000171   000226 702000 1                  TSX2    EVAL_PT_XUE_EXP_FAILED

     2839     7424    2                (LENGTHC(VD$BUFFER_HEADER) + NB_STRING + %NB_PER_WORD-1) /
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:337  
     2840     7425    2                %NB_PER_WORD)
     2841     7426    2                ALTRET (OALLOC_FAILED);
     2842     7427    2              BUFFER.LENGTH# = NB_STRING;

   7427  1 000172   200005 470500                    LDP0    @BUFFER$,,AUTO
         1 000173   000000 471500                    LDP1    0,,PR0
         1 000174   200010 720100                    LXL0    NB_STRING,,AUTO
         1 000175   100002 740100                    STX0    2,,PR1

     2843     7428    2              BUFFER.BYTES = SUBSTR(STRING.BYTES, START_NUMBER,

   7428  1 000176   000000 471500                    LDP1    0,,PR0
         1 000177   100002 220100                    LDX0    2,,PR1
         1 000200   000004 473400 xsym               LDP3    XUE_ECB+4
         1 000201   300000 236100                    LDQ     0,,PR3
         1 000202   000033 772000                    QRL     27
         1 000203   200010 721100                    LXL1    NB_STRING,,AUTO
         1 000204   200011 235100                    LDA     START_NUMBER,,AUTO
         1 000205   040140 100545                    MLR     fill='040'O
         1 000206   300000 200011                    ADSC9   0,A,PR3                  cn=1,n=*X1
         1 000207   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0

     2844     7429    2                NB_STRING);
     2845     7430    2              END;

     2846     7431
     2847     7432    1           RETURN;

   7432  1 000210   000000 702200 xent               TSX2  ! X66_ARET

     2848     7433
     2849     7434
     2850     7435
     2851     7436    1   EXEC_CONTROL_FAILED:
     2852     7437    2           IF VD_6E.ERR_HEAD$ ~= VD_6E.ERR_TAIL$ THEN DO;

   7437  1 000211   000031 236000 xsym  EXEC_CONTRO* LDQ     VD_6E+25
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:338  
         1 000212   000032 116000 xsym               CMPQ    VD_6E+26
         1 000213   000225 600000 1                  TZE     s:7442

     2853     7438    2              SUBST_FIELD$ = PINCRW(VD_6E.ERR_TAIL$, LENGTHW(VD$ERR));

   7438  1 000214   000032 236000 xsym               LDQ     VD_6E+26
         1 000215   000005 036003                    ADLQ    5,DU
         1 000216   200015 756100                    STQ     SUBST_FIELD$,,AUTO

     2854     7439    2              SUBST$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;

   7439  1 000217   000033 220003                    LDX0    27,DU
         1 000220   200015 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000221   000000 740100                    STX0    0,,PR0

     2855     7440    2              SUBST$NUMBER.V# (0) = NUMBER;

   7440  1 000222   200004 471500                    LDP1    @NUMBER,,AUTO
         1 000223   100000 235100                    LDA     0,,PR1
         1 000224   000003 755100                    STA     3,,PR0

     2856     7441    2              END;

     2857     7442    1           ALTRETURN;

   7442  1 000225   000000 702200 xent               TSX2  ! X66_AALT

   7437  1 000226                       EVAL_PT_XUE* null
     2858     7443
     2859     7444    1   EVAL_PT_XUE_EXP_FAILED: ;
     2860     7445    1   OALLOC_FAILED: ;

   7445  1 000226                       OALLOC_FAIL* null
     2861     7446    1           ALTRETURN;

   7446  1 000226   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:339  
     2862     7447
     2863     7448        /*D* NAME: VDE$PNUMBER
     2864     7449            PARAMETERS:
     2865     7450                PT_XUE_EXP - Parse node for %XUE_EXP#.
     2866     7451                NUMBER - Uninitialized SBIN.
     2867     7452            INPUT:
     2868     7453                Same as for main routine.
     2869     7454            OUTPUT:
     2870     7455                NUMBER will contain the numeric value of the evaluated
     2871     7456                    expression.
     2872     7457            DESCRIPTION:
     2873     7458                Call X$EVAL to evaluate the expression into a textc string.
     2874     7459                Call X$DEC_CONVERT to convert the string to a number.
     2875     7460        */
     2876     7461
     2877     7462    1   VDE$PNUMBER: ENTRY (PT_XUE_EXP, NUMBER) ALTRET;

   7462  1 000227   000000 700200 xent  VDE$PNUMBER  TSX0  ! X66_AUTO_5
         1 000230   000032 000005                    ZERO    26,5

     2878     7463
     2879     7464
     2880     7465    1           NUMBER = 0;

   7465  1 000231   200004 470500                    LDP0    @NUMBER,,AUTO
         1 000232   000000 450100                    STZ     0,,PR0

     2881     7466    1           CALL EVAL_PT_XUE_EXP

   7466  1 000233   000370 701000 1                  TSX1    EVAL_PT_XUE_EXP
         1 000234   000226 702000 1                  TSX2    EVAL_PT_XUE_EXP_FAILED

     2882     7467    1             ALTRET (EVAL_PT_XUE_EXP_FAILED);
     2883     7468
     2884     7469    1           CALL X$DEC_CONVERT (XUE_ECB.OUT$, NUMBER)

   7469  1 000235   200004 236100                    LDQ     @NUMBER,,AUTO
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:340  
         1 000236   000001 235000 2                  LDA     1
         1 000237   200024 757100                    STAQ    WKSZ+2,,AUTO
         1 000240   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000241   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000242   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 000243   000245 702000 1                  TSX2    DEC_CONVERT_FAILED

     2885     7470    1             ALTRET (DEC_CONVERT_FAILED);
     2886     7471
     2887     7472    1           RETURN;

   7472  1 000244   000000 702200 xent               TSX2  ! X66_ARET

     2888     7473
     2889     7474
     2890     7475    1   DEC_CONVERT_FAILED:
     2891     7476    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   7476  1 000245   200014 630500       DEC_CONVERT* EPPR0   VD_ERR$,,AUTO
         1 000246   200025 450500                    STP0    WKSZ+3,,AUTO
         1 000247   000002 236000 2                  LDQ     2
         1 000250   200024 756100                    STQ     WKSZ+2,,AUTO
         1 000251   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000252   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000253   000000 701000 xent               TSX1    VDG$OALLOC
         1 000254   000226 702000 1                  TSX2    EVAL_PT_XUE_EXP_FAILED

     2892     7477    1             ALTRET (OALLOC_FAILED);
     2893     7478    1           VD$ERR.ERR.CODE# = %E$DECIMAL_NOT_LEGAL;

   7478  1 000255   200014 470500                    LDP0    VD_ERR$,,AUTO
         1 000256   000002 236100                    LDQ     2,,PR0
         1 000257   000003 376000 2                  ANQ     3
         1 000260   000730 276007                    ORQ     472,DL
         1 000261   000002 756100                    STQ     2,,PR0

     2894     7479    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:341  

   7479  1 000262   000003 220003                    LDX0    3,DU
         1 000263   200014 470500                    LDP0    VD_ERR$,,AUTO
         1 000264   000003 740100                    STX0    3,,PR0

     2895     7480    1           VD$ERR.CMDLINE_INDEX# = PT_XUE_EXP.CPOS;

   7480  1 000265   200003 470500                    LDP0    @PT_XUE_EXP,,AUTO
         1 000266   000002 721100                    LXL1    2,,PR0
         1 000267   200014 471500                    LDP1    VD_ERR$,,AUTO
         1 000270   100003 441100                    SXL1    3,,PR1

     2896     7481
     2897     7482    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   7482  1 000271   200014 236100                    LDQ     VD_ERR$,,AUTO
         1 000272   000005 036003                    ADLQ    5,DU
         1 000273   200015 756100                    STQ     SUBST_FIELD$,,AUTO

     2898     7483    1           INDX = 0;

   7483  1 000274   200016 450100                    STZ     INDX,,AUTO

     2899     7484    2           DO WHILE INDX < %MX_CMD_OBJECTS

   7484  1 000275   000277 710000 1                  TRA     s:7487

     2900     7485    2             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2901     7486    2              INDX = INDX + 1;

   7486  1 000276   200016 054100                    AOS     INDX,,AUTO

     2902     7487    2              END;

   7487  1 000277   200016 235100                    LDA     INDX,,AUTO
         1 000300   000062 115007                    CMPA    50,DL
         1 000301   000305 605000 1                  TPL     s:7488
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:342  
         1 000302   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         1 000303   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000304   000276 601000 1                  TNZ     s:7486

     2903     7488    1           IF INDX >= %MX_CMD_OBJECTS THEN

   7488  1 000305   200016 235100                    LDA     INDX,,AUTO
         1 000306   000062 115007                    CMPA    50,DL
         1 000307   000316 604000 1                  TMI     s:7490

     2904     7489    1              CALL VDG$ESCREECH (INDX);

   7489  1 000310   200016 630500                    EPPR0   INDX,,AUTO
         1 000311   200024 450500                    STP0    WKSZ+2,,AUTO
         1 000312   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000313   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000314   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000315   000000 011000                    NOP     0

     2905     7490    1           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),

   7490  1 000316   000004 470400 xsym               LDP0    XUE_ECB+4
         1 000317   000000 236100                    LDQ     0,,PR0
         1 000320   000033 772000                    QRL     27
         1 000321   000014 036007                    ADLQ    12,DL
         1 000322   000002 772000                    QRL     2
         1 000323   200024 756100                    STQ     WKSZ+2,,AUTO
         1 000324   200024 631500                    EPPR1   WKSZ+2,,AUTO
         1 000325   200027 451500                    STP1    WKSZ+5,,AUTO
         1 000326   200016 720100                    LXL0    INDX,,AUTO
         1 000327   000000 633410 xsym               EPPR3   VD_CMD_OBJECTS$,X0
         1 000330   200026 453500                    STP3    WKSZ+4,,AUTO
         1 000331   000005 236000 2                  LDQ     5
         1 000332   200025 756100                    STQ     WKSZ+3,,AUTO
         1 000333   200025 630500                    EPPR0   WKSZ+3,,AUTO
         1 000334   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000335   000000 701000 xent               TSX1    VDG$OALLOC
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:343  
         1 000336   000226 702000 1                  TSX2    EVAL_PT_XUE_EXP_FAILED

     2906     7491    1             (LENGTHC(VD$STRING_HEADER) + STRING.LENGTH# + %NB_PER_WORD-1) /
     2907     7492    1             %NB_PER_WORD)
     2908     7493    1             ALTRET (OALLOC_FAILED);
     2909     7494    1           VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH# = STRING.LENGTH#;

   7494  1 000337   200016 720100                    LXL0    INDX,,AUTO
         1 000340   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 000341   000004 471400 xsym               LDP1    XUE_ECB+4
         1 000342   100000 236100                    LDQ     0,,PR1
         1 000343   000002 552140                    STBQ    2,'40'O,PR0

     2910     7495    1           VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.BYTES = STRING.BYTES;

   7495  1 000344   200016 720100                    LXL0    INDX,,AUTO
         1 000345   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 000346   000002 236100                    LDQ     2,,PR0
         1 000347   000033 772000                    QRL     27
         1 000350   000004 471400 xsym               LDP1    XUE_ECB+4
         1 000351   000000 621006                    EAX1    0,QL
         1 000352   100000 236100                    LDQ     0,,PR1
         1 000353   000033 772000                    QRL     27
         1 000354   000000 622006                    EAX2    0,QL
         1 000355   040140 100540                    MLR     fill='040'O
         1 000356   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         1 000357   000002 200011                    ADSC9   2,,PR0                   cn=1,n=*X1

     2911     7496    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   7496  1 000360   000045 220003                    LDX0    37,DU
         1 000361   200015 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000362   000000 740100                    STX0    0,,PR0

     2912     7497    1           SUBST$POINTER.V$ (0) =

   7497  1 000363   200016 721100                    LXL1    INDX,,AUTO
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:344  
         1 000364   000000 471411 xsym               LDP1    VD_CMD_OBJECTS$,X1
         1 000365   100002 633500                    EPPR3   2,,PR1
         1 000366   000003 453500                    STP3    3,,PR0

     2913     7498    1             ADDR(VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH#);
     2914     7499    1           ALTRETURN;

   7499  1 000367   000000 702200 xent               TSX2  ! X66_AALT

     2915     7500
     2916     7501        %BOX (TITLE=EVAL_PT_XUE_EXP, PAGE=YES);
              7509    1
              7513    1   /***************************************************************************
              7515    1    *                                                                         *
              7519    1            *                              EVAL_PT_XUE_EXP                           *
              7521    1            *                                                                        *
              7523    1          ***************************************************************************/

     2917     7527
     2918     7528        /*I* NAME: EVAL_PT_XUE_EXP
     2919     7529            PARAMETERS:
     2920     7530                None.
     2921     7531            INPUT:
     2922     7532                PT_XUE_EXP - Parse node for %XUE_EXP#.
     2923     7533                XUE_ECB - Eval control block for X$EVAL.
     2924     7534            OUTPUT:
     2925     7535                XUE_ECB.OUT$ will point to a VD$TEXTC (owned by X$EVAL)
     2926     7536                    containing the value of the string expression.
     2927     7537                XUE_ECB.WKSZ and .WORK$ may be changed.
     2928     7538            DESCRIPTION:
     2929     7539                Evaluate the expression.
     2930     7540        */
     2931     7541
     2932     7542    1   EVAL_PT_XUE_EXP: PROC ALTRET;

   7542  1 000370   200020 741300       EVAL_PT_XUE* STX1  ! INDX+2,,AUTO

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:345  
     2933     7543
     2934     7544
     2935     7545    2   DCL WORK_BUFFER$ PTR;
     2936     7546    2   DCL WKSZ SBIN;
     2937     7547
     2938     7548
     2939     7549        %VD$BUFFER (NAME=WORK$BUFFER, STCLASS="BASED(WORK_BUFFER$)");
     2940     7607
     2941     7608
     2942     7609
     2943     7610    2           XUE_ECB.TREE$ = ADDR(PT_XUE_EXP);

   7610  1 000371   200003 236100                    LDQ     @PT_XUE_EXP,,AUTO
         1 000372   000000 756000 xsym               STQ     XUE_ECB

     2944     7611
     2945     7612    2   RE_EVAL:
     2946     7613    2           CALL X$EVAL (XUE_ECB)

   7613  1 000373   000006 630400 2     RE_EVAL      EPPR0   6
         1 000374   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000375   000000 701000 xent               TSX1    X$EVAL
         1 000376   000401 702000 1                  TSX2    s:7629

     2947     7614    3           WHENRETURN DO; RETURN; END;

   7614  1 000377   200020 221300                    LDX1  ! INDX+2,,AUTO
         1 000400   000001 702211                    TSX2  ! 1,X1

     2948     7615
     2949     7616                /*
     2950     7617                *   Got an error from X$EVAL:  is it ours or X$EVAL's?
     2951     7618                *   Our subroutines (eg, VDE$PREAD_NAME_FOR_EVAL and
     2952     7619                *       VDE$PFUNCTIONS) push a VD$ERR onto the error chain
     2953     7620                *       and set (or get set for them) XUE_ECB.ERR.CODE --
     2954     7621                *       but not .ERR.FCG.  However, if it is a monitor error,
     2955     7622                *       they'll push the VD$ERR and set all fields of
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:346  
     2956     7623                *       XUE_ECB.ERR -- including the .MON bit.
     2957     7624                *   If X$EVAL finds an error, it'll set all fields of
     2958     7625                *       XUE_ECB.ERR -- except the .MON bit.  Also, of course,
     2959     7626                *       it won't push a VD$ERR.
     2960     7627                */
     2961     7628
     2962     7629    3           IF XUE_ECB.ERR.CODE = %E$XUE#SMALLWORK THEN DO;

   7629  1 000401   000011 236000 xsym               LDQ     XUE_ECB+9
         1 000402   377770 376007                    ANQ     131064,DL
         1 000403   011510 116007                    CMPQ    4936,DL
         1 000404   000452 601000 1                  TNZ     s:7648

     2963     7630                   %INCREMENT (INDX=%STG_EXPAND_EVAL);

   7631  1 000405   000051 054000 xsym               AOS     VD_6E+41

     2964     7633    4              IF XUE_ECB.WORK$ ~= ADDR(NIL) THEN DO;

   7633  1 000406   000001 236000 xsym               LDQ     XUE_ECB+1
         1 000407   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000410   000417 600000 1                  TZE     s:7638

     2965     7634    4                 WORK_BUFFER$ = PINCRW(XUE_ECB.WORK$, - SIZEW(VD$BUFFER_HEADER));

   7634  1 000411   777775 036003                    ADLQ    -3,DU
         1 000412   200021 756100                    STQ     WORK_BUFFER$,,AUTO

     2966     7635    4                 CALL VDG$OFREE (WORK$BUFFER)

   7635  1 000413   200021 630500                    EPPR0   WORK_BUFFER$,,AUTO
         1 000414   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000415   000000 701000 xent               TSX1    VDG$OFREE
         1 000416   000502 702000 1                  TSX2    OALLOC_FAILED

     2967     7636    4                   ALTRET (OFREE_FAILED);
     2968     7637    4                 END;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:347  

     2969     7638    3              XUE_ECB.WKSZ# = XUE_ECB.WKSZ# + %NW_EVAL_WORK;

   7638  1 000417   000002 235000 xsym               LDA     XUE_ECB+2
         1 000420   000226 035007                    ADLA    150,DL
         1 000421   000002 755000 xsym               STA     XUE_ECB+2

     2970     7639    3              WKSZ = SIZEW(VD$BUFFER_HEADER) + XUE_ECB.WKSZ#;

   7639  1 000422   000003 035007                    ADLA    3,DL
         1 000423   200022 755100                    STA     WKSZ,,AUTO

     2971     7640    3              CALL VDG$OALLOC (%CLS_BUFFER, WORK_BUFFER$, WKSZ)

   7640  1 000424   200022 630500                    EPPR0   WKSZ,,AUTO
         1 000425   200026 450500                    STP0    WKSZ+4,,AUTO
         1 000426   200021 631500                    EPPR1   WORK_BUFFER$,,AUTO
         1 000427   200025 451500                    STP1    WKSZ+3,,AUTO
         1 000430   000000 236000 2                  LDQ     0
         1 000431   200024 756100                    STQ     WKSZ+2,,AUTO
         1 000432   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000433   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000434   000000 701000 xent               TSX1    VDG$OALLOC
         1 000435   000502 702000 1                  TSX2    OALLOC_FAILED

     2972     7641    3                ALTRET (OALLOC_FAILED);
     2973     7642    3              WORK$BUFFER.LENGTH# = (WORK$BUFFER.OBJECT.SIZE# * %NB_PER_WORD) -

   7642  1 000436   200021 470500                    LDP0    WORK_BUFFER$,,AUTO
         1 000437   000000 236100                    LDQ     0,,PR0
         1 000440   000022 736000                    QLS     18
         1 000441   000020 732000                    QRS     16
         1 000442   777766 620006                    EAX0    -10,QL
         1 000443   000002 740100                    STX0    2,,PR0

     2974     7643    3                LENGTHC(VD$BUFFER_HEADER);
     2975     7644    3              XUE_ECB.WORK$ = PALIGNW(ADDR(WORK$BUFFER.BYTES));
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:348  

   7644  1 000444   200021 236100                    LDQ     WORK_BUFFER$,,AUTO
         1 000445   000007 036000 2                  ADLQ    7
         1 000446   770000 036007                    ADLQ    -4096,DL
         1 000447   000010 376000 2                  ANQ     8
         1 000450   000001 756000 xsym               STQ     XUE_ECB+1

     2976     7645    3              GOTO RE_EVAL;

   7645  1 000451   000373 710000 1                  TRA     RE_EVAL

     2977     7646    3              END;
     2978     7647
     2979     7648    2           IF XUE_ECB.ERR.FCG ~= %CLEAR

   7648  1 000452   000011 236000 xsym               LDQ     XUE_ECB+9
         1 000453   777700 316003                    CANQ    -64,DU
         1 000454   000500 600000 1                  TZE     s:7657
         1 000455   400000 316007                    CANQ    -131072,DL
         1 000456   000500 601000 1                  TNZ     s:7657

     2980     7649    3             AND XUE_ECB.ERR.MON = %FALSE THEN DO;

     2981     7650                   /* Error is X$EVAL's */
     2982     7651    3              CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   7651  1 000457   200014 630500                    EPPR0   VD_ERR$,,AUTO
         1 000460   200025 450500                    STP0    WKSZ+3,,AUTO
         1 000461   000002 236000 2                  LDQ     2
         1 000462   200024 756100                    STQ     WKSZ+2,,AUTO
         1 000463   200024 630500                    EPPR0   WKSZ+2,,AUTO
         1 000464   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000465   000000 701000 xent               TSX1    VDG$OALLOC
         1 000466   000502 702000 1                  TSX2    OALLOC_FAILED

     2983     7652    3                ALTRET (OALLOC_FAILED);
     2984     7653    3              VD$ERR.ERR = XUE_ECB.ERR;
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:349  

   7653  1 000467   000011 236000 xsym               LDQ     XUE_ECB+9
         1 000470   200014 470500                    LDP0    VD_ERR$,,AUTO
         1 000471   000002 756100                    STQ     2,,PR0

     2985     7654    3              VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   7654  1 000472   000003 220003                    LDX0    3,DU
         1 000473   200014 470500                    LDP0    VD_ERR$,,AUTO
         1 000474   000003 740100                    STX0    3,,PR0

     2986     7655    3              VD$ERR_LAST.CMDLINE_INDEX# = XUE_ECB.ERR_POS#;

   7655  1 000475   000010 221000 xsym               LDX1    XUE_ECB+8
         1 000476   000032 470400 xsym               LDP0    VD_6E+26
         1 000477   000003 441100                    SXL1    3,,PR0

     2987     7656    3              END;

     2988     7657    2           ALTRETURN;

   7657  1 000500   200020 221300                    LDX1  ! INDX+2,,AUTO
         1 000501   000000 702211                    TSX2  ! 0,X1

   7655  1 000502                       OALLOC_FAIL* null
   7655  1 000502                       OFREE_FAILED null
     2989     7658
     2990     7659
     2991     7660    2   OALLOC_FAILED: ;
     2992     7661    2   OFREE_FAILED: ;
     2993     7662    2           ALTRETURN;

   7662  1 000502   200020 221300                    LDX1  ! INDX+2,,AUTO
         1 000503   000000 702211                    TSX2  ! 0,X1
     2994     7663
     2995     7664    2   END EVAL_PT_XUE_EXP;
     2996     7665
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:350  
     2997     7666
     2998     7667    1   END VDE$PXUE_EXP;
     2999     7668        %EOD;

PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:351  
--  Include file information  --

   XU_PERR_C.:LIBRARY  is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PXUE_EXP.
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:352  

 **** Variables and constants ****

  ****  Section 000 RoData VDE$PXUE_EXP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CONTROL_VALUE$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUFFER$                   7-0-0/w PTR         r     1 @CTRL_ARGS
     4-0-0/w PTR         r     1 @NUMBER                    3-0-0/w PTR         r     1 @PT_XUE_EXP
     6-0-0/w PTR         r     1 @RET_CODE                 *0-0-0/w PTR         r     1 BUFFER$
    *0-0-0/w SBIN        r     1 CTRL_ARGS(0:1)
    16-0-0/w SBIN        r     1 INDX                      10-0-0/w SBIN        r     1 NB_STRING
    *0-0-0/w SBIN        r     1 NUMBER                    12-0-0/w SBIN        r     1 PARTIAL_LENGTH
    *0-0-0/w STRC(144)   r     1 PT_XUE_EXP                *0-0-0/c CHAR        r     1 RET_CODE
    11-0-0/w SBIN        r     1 START_NUMBER              13-0-0/w PTR         r     1 STRING$
    15-0-0/w PTR         r     1 SUBST_FIELD$              14-0-0/w PTR         r     1 VD_ERR$
    22-0-0/w SBIN        r     1 WKSZ                      21-0-0/w PTR         r     1 WORK_BUFFER$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 VD_$CONTROL                0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/d STRC(1008)  r     1 XUE_ECB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:353  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(90)    r     1 BUFFER                     0-0-0/w ASTR(90)    r     1 CONTROL$VALUE
     0-0-0/w ASTR(9)     r     1 STRING
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(180)   r     1 VD$ERR_LAST                0-0-0/w STRC(81)    r     1 VD$STRING_HEADER
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w ASTR(90)    r     1 WORK$BUFFER


   Procedure VDE$PXUE_EXP requires 324 words for executable code.
   Procedure VDE$PXUE_EXP requires 26 words of local(AUTO) storage.
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:354  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:355  
          MINI XREF LISTING

BUFFER.BYTES
      6936**DCL      7428<<ASSIGN
BUFFER.LENGTH#
      6934**DCL      6936--IMP-SIZ  7427<<ASSIGN   7428>>ASSIGN
BUFFER$
      6475**DCL        32--PROC     6908--IMP-PTR  7382--ENTRY    7386--IF       7387<<ASSIGN   7397--IF
      7423<>CALL     7427>>ASSIGN   7428>>ASSIGN   7428>>ASSIGN
CONTROL$VALUE.BYTES
      6878**DCL      7407>>CALLBLT
CONTROL$VALUE.LENGTH#
      6876**DCL      6878--IMP-SIZ  7407>>CALLBLT
CONTROL_VALUE$
      6789**DCL      6850--IMP-PTR  7407>>CALLBLT  7407>>CALLBLT
CTRL_ARGS
      6477**DCL        32--PROC     7382--ENTRY    7389<<ASSIGN   7412<>CALL
DEC_CONVERT_FAILED
      7476**LABEL    7469--CALLALT
EVAL_PT_XUE_EXP
      7542**PROC     7393--CALL     7466--CALL
EVAL_PT_XUE_EXP_FAILED
      7437**LABEL    7393--CALLALT  7466--CALLALT
EXEC_CONTROL_FAILED
      7437**LABEL    7412--CALLALT
INDX
      6799**DCL      7483<<ASSIGN   7484>>DOWHILE  7484>>DOWHILE  7486<<ASSIGN   7486>>ASSIGN   7488>>IF
      7489<>CALL     7490>>CALL     7494>>ASSIGN   7495>>ASSIGN   7495>>ASSIGN   7497>>ASSIGN
NB_STRING
      6793**DCL      7411<<ASSIGN   7412<>CALL     7415>>ASSIGN   7422<<ASSIGN   7423>>CALL     7427>>ASSIGN
      7428>>ASSIGN
NUMBER
      6474**DCL        32--PROC     7382--ENTRY    7395<<ASSIGN   7400>>ASSIGN   7404<<ASSIGN   7405>>DOWHILE
      7407>>CALLBLT  7409<<ASSIGN   7410>>IF       7412<>CALL     7420>>ASSIGN   7440>>ASSIGN   7462--ENTRY
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:356  
      7465<<ASSIGN   7469<>CALL
OALLOC_FAILED
      7445**LABEL    7423--CALLALT  7476--CALLALT  7490--CALLALT
OALLOC_FAILED IN PROCEDURE EVAL_PT_XUE_EXP
      7655**LABEL    7640--CALLALT  7651--CALLALT
OFREE_FAILED IN PROCEDURE EVAL_PT_XUE_EXP
      7655**LABEL    7635--CALLALT
PARTIAL_LENGTH
      6795**DCL      7407<<CALLBLT  7409>>ASSIGN   7420<<ASSIGN   7421>>IF       7422>>ASSIGN
PT_XUE_EXP
      6435**DCL        32--PROC     7382--ENTRY    7392--IF       7462--ENTRY    7610--ASSIGN
PT_XUE_EXP.CPOS
      6461**DCL      7480>>ASSIGN
RET_CODE
      6476**DCL        32--PROC     7382--ENTRY    7388<<ASSIGN   7405>>DOWHILE  7412<>CALL     7419>>IF
RE_EVAL IN PROCEDURE EVAL_PT_XUE_EXP
      7613**LABEL    7645--GOTO
START_NUMBER
      6794**DCL      7400<<ASSIGN   7421>>IF       7422>>ASSIGN   7428>>ASSIGN
STRING.BYTES
      6820**DCL      7407>>CALLBLT  7412<>CALL     7428>>ASSIGN   7495>>ASSIGN
STRING.LENGTH#
      6818**DCL      6820--IMP-SIZ  7404>>ASSIGN   7405>>DOWHILE  7407>>CALLBLT  7410>>IF       7411>>ASSIGN
      7412>>CALL     7415<<ASSIGN   7428>>ASSIGN   7490>>CALL     7494>>ASSIGN   7495>>ASSIGN
STRING$
      6796**DCL      7401<<ASSIGN
SUBST$NUMBER.OBJECT.CLASS#
      7140**DCL      7439<<ASSIGN
SUBST$NUMBER.V#
      7142**DCL      7440<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      7185**DCL      7496<<ASSIGN
SUBST$POINTER.V$
      7187**DCL      7497<<ASSIGN
SUBST_FIELD$
      6798**DCL      7108--IMP-PTR  7161--IMP-PTR  7438<<ASSIGN   7439>>ASSIGN   7440>>ASSIGN   7482<<ASSIGN
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:357  
      7496>>ASSIGN   7497>>ASSIGN
VD$BUFFER_HEADER
      7198**DCL      7423--CALL     7634--ASSIGN   7639--ASSIGN   7642--ASSIGN
VD$ERR
      6949**DCL      7438--ASSIGN   7482--ASSIGN
VD$ERR.CMDLINE_INDEX#
      6991**DCL      7480<<ASSIGN
VD$ERR.ERR
      6986**DCL      7653<<ASSIGN
VD$ERR.ERR.CODE#
      6988**DCL      7478<<ASSIGN
VD$ERR.FLAGLEV#
      6991**DCL      7479<<ASSIGN   7654<<ASSIGN
VD$ERR_LAST.CMDLINE_INDEX#
      7097**DCL      7655<<ASSIGN
VD$STRING_HEADER
      7234**DCL      7490--CALL
VD$TEXTC_REMOTE.BYTES
      7318**DCL      7495<<ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      7316**DCL      7318--IMP-SIZ  7494<<ASSIGN   7495>>ASSIGN   7497--ASSIGN
VDG$ESCREECH
      6484**DCL-ENT  7489--CALL
VDG$EXEC_CONTROL
      6483**DCL-ENT  7412--CALL
VDG$OALLOC
      6481**DCL-ENT  7423--CALL     7476--CALL     7490--CALL     7640--CALL     7651--CALL
VDG$OFREE
      6482**DCL-ENT  7635--CALL
VD_$CONTROL
      6550**DCL      6789--DCLINIT
VD_$CONTROL.LENGTH#
      6576**DCL      6578--IMP-SIZ  7403>>IF
VD_6E.ERR_HEAD$
      6520**DCL      7002--IMP-PTR  7437>>IF
VD_6E.ERR_TAIL$
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:358  
      6520**DCL      7055--IMP-PTR  7437>>IF       7438>>ASSIGN   7655>>ASSIGN
VD_6E.STATS#
      6521**DCL      7631<<ASSIGN   7631>>ASSIGN
VD_CMD_OBJECTS$
      6786**DCL      7484>>DOWHILE  7490<>CALL     7494>>ASSIGN   7495>>ASSIGN   7495>>ASSIGN   7497>>ASSIGN
VD_ERR$
      6797**DCL      6949--IMP-PTR  7476<>CALL     7478>>ASSIGN   7479>>ASSIGN   7480>>ASSIGN   7482>>ASSIGN
      7651<>CALL     7653>>ASSIGN   7654>>ASSIGN
WKSZ IN PROCEDURE EVAL_PT_XUE_EXP
      7546**DCL      7639<<ASSIGN   7640<>CALL
WORK$BUFFER IN PROCEDURE EVAL_PT_XUE_EXP
      7574**DCL      7635<>CALL
WORK$BUFFER.BYTES IN PROCEDURE EVAL_PT_XUE_EXP
      7602**DCL      7644--ASSIGN
WORK$BUFFER.LENGTH# IN PROCEDURE EVAL_PT_XUE_EXP
      7600**DCL      7602--IMP-SIZ  7635>>CALL     7642<<ASSIGN
WORK$BUFFER.OBJECT.SIZE# IN PROCEDURE EVAL_PT_XUE_EXP
      7598**DCL      7642>>ASSIGN
WORK_BUFFER$ IN PROCEDURE EVAL_PT_XUE_EXP
      7545**DCL      7574--IMP-PTR  7634<<ASSIGN   7635>>CALL     7635>>CALL     7640<>CALL     7642>>ASSIGN
      7642>>ASSIGN   7644>>ASSIGN
X$DEC_CONVERT
      6485**DCL-ENT  7469--CALL
X$EVAL
      6480**DCL-ENT  7613--CALL
XUE_ECB
      6598**DCL      7613<>CALL
XUE_ECB.ERR
      6682**DCL      7653>>ASSIGN
XUE_ECB.ERR.CODE
      6686**DCL      7629>>IF
XUE_ECB.ERR.FCG
      6683**DCL      7648>>IF
XUE_ECB.ERR.MON
      6685**DCL      7648>>IF
XUE_ECB.ERR_POS#
PL6.E3A0      #004=VDE$PXUE_EXP File=VDE$PARSE.:VDA5TSI                          FRI 07/04/97 11:15 Page:359  
      6665**DCL      7655>>ASSIGN
XUE_ECB.OUT$
      6630**DCL      6810--IMP-PTR  7401>>ASSIGN   7404>>ASSIGN   7405>>DOWHILE  7407>>CALLBLT  7407>>CALLBLT
      7410>>IF       7411>>ASSIGN   7412>>CALL     7412>>CALL     7415>>ASSIGN   7428>>ASSIGN   7428>>ASSIGN
      7469<>CALL     7490>>CALL     7494>>ASSIGN   7495>>ASSIGN   7495>>ASSIGN
XUE_ECB.TREE$
      6602**DCL      7610<<ASSIGN
XUE_ECB.WKSZ#
      6613**DCL      7638<<ASSIGN   7638>>ASSIGN   7639>>ASSIGN
XUE_ECB.WORK$
      6608**DCL      7633>>IF       7634>>ASSIGN   7644<<ASSIGN

PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:360  
     3000        1        /*T***********************************************************/
     3001        2        /*T*                                                         */
     3002        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3003        4        /*T*                                                         */
     3004        5        /*T***********************************************************/
     3005        6
     3006        7        /*D* NAME: VDE$PNUMERIC_KEY
     3007        8            PARAMETERS:
     3008        9                PT_NUMBER - The NUMBER ParseTree node.  Note that there is
     3009       10                    no %T_NUMBER code, but that other codes (%T_KEY_INCR,
     3010       11                    %T_NUMERIC_KEY) are actually NUMBER nodes.
     3011       12                KEY - Uninitialized VD$KEY.
     3012       13            INPUT:
     3013       14                None.
     3014       15            OUTPUT:
     3015       16                KEY will contain the key specified by the ParseTree nodes.
     3016       17            DESCRIPTION:
     3017       18                The PT_NUMBER node must have one or two children:  T_INTEGER
     3018       19                and/or T_FRACT; either may be omitted but not both; if both
     3019       20                appear, T_INTEGER must be first.  T_INTEGER (if it appears)
     3020       21                is a .DECIMAL PARSE$SYM node; T_FRACT (if it appears) also
     3021       22                is a .DECIMAL PARSE$SYM node.
     3022       23
     3023       24                T_INTEGER's value is multiplied by 1000, and T_FRACT's value
     3024       25                added to it.  The result is stored in KEY as a local
     3025       26                numeric key.
     3026       27                Error if T_INTEGER's value is > %MX_CONSEC_RECORDS.
     3027       28                Error if T_FRACT's value is > %MX_EDITKEY_FRACT.
     3028       29        *N**N*  Note that this routine doesn't know if the key being
     3029       30        *N**N*      specified is for an edit-keyed file or a consecutive
     3030       31        *N**N*      file:  if for a consecutive file, values larger than
     3031       32        *N**N*      99999 should be accepted.  In future, we need some
     3032       33        *N**N*      way to store large numbers as keys in the InTree before
     3033       34        *N**N*      knowing if they should be multiplied by 1000 or not.
     3034       35        *N**N*      For now, we guarantee the integer part is <= 99999, so
     3035       36        *N**N*      we can multiply the value by 1000 without overflowing our
     3036       37        *N**N*      27-bit field in KEY.
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:361  
     3037       38                When the InTree is evaluated, we'll know whether the keys
     3038       39                    should be edit-keys or consecutive keys.  At that time,
     3039       40                    we'll check to see that the key isn't too large for
     3040       41                    an edit-key (this module checks that it's not to large
     3041       42                    for a consecutive key), and that a fraction isn't given
     3042       43                    for a consecutive key.
     3043       44        */
     3044       45
     3045       46        VDE$PNUMERIC_KEY: PROC (PT_NUMBER, KEY) ALTRET;
     3046       47
     3047       48
     3048       49        %INCLUDE VD_MACROS_M;
     3049     2264        %INCLUDE VD_PERR_C;
     3050     2412        %INCLUDE VD_NODES0_E;
     3051     2504        %INCLUDE XU_MACRO_C;
     3052     5598
     3053     5599
     3054     5600        %PARSE$OUT (NAME=PT_NUMBER, STCLASS=PARAM);
     3055     5645        %VD$KEY_NUMBER (NAME=KEY, STCLASS=PARAM);
     3056     5660
     3057     5661
     3058     5662    1   DCL VDG$ERRMSG              ENTRY (4) ALTRET;
     3059     5663
     3060     5664
     3061     5665        %VD_6E (STCLASS=SYMREF);
     3062     5701
     3063     5702
     3064     5703    1   DCL SBIN_VALUE SBIN;
     3065     5704    1   DCL SYM_INT$ PTR;
     3066     5705    1   DCL X SBIN;
     3067     5706    1   DCL FRACTMULT(0:3) SBIN CONSTANT INIT(0,100,10,1);
     3068     5707    1   DCL ERR_CODE UBIN;
     3069     5708
     3070     5709
     3071     5710        %PARSE$SYM (NAME=SYM$INT, STCLASS="BASED(SYM_INT$)");
     3072     5748        %VD$ERR (STCLASS="BASED(VD_6E.ERR_TAIL$)");
     3073     5801
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:362  
     3074     5802
     3075     5803
     3076     5804    1           KEY = %CLEAR;
     3077     5805    1           KEY.TYPE# = %KT_EDITKEY;
     3078     5806    1           KEY.REP# = %REP_LOCAL;
     3079     5807    1           KEY.LENGTH# = %NB_NUMERIC_KEY;
     3080     5808
     3081     5809    2           DO X=0 TO PT_NUMBER.NSUBLKS-1;
     3082     5810    2              SYM_INT$ = PT_NUMBER.SUBLK$ (X);
     3083     5811                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$INT.CODE - %VD_BASE#");
     3084     5814
     3085     5815    2              CALL CHARBIN (SBIN_VALUE, SYM$INT.TEXT);
     3086     5816    3              IF SYM$INT.CODE = %T_INTEGER THEN DO;
     3087     5817    4                 IF SYM$INT.COUNT > 5 THEN DO;
     3088     5818    4                    IF PT_NUMBER.NSUBLKS > 1 THEN
     3089     5819    4                       GOTO ILL_NUMKEY_INTEGER_FAILURE;
     3090     5820    4                    IF SYM$INT.COUNT > 9 OR SBIN_VALUE > %MX_CONSEC_RECORDS THEN
     3091     5821    4                       GOTO CONSEC_KEY_TOO_BIG_FAILURE;
     3092     5822    4                    KEY.BYTES# = SBIN_VALUE;
     3093     5823    4                    KEY.TYPE# = %KT_NUMBER;
     3094     5824    4                    END;
     3095     5825    3                 ELSE
     3096     5826    3                    KEY.BYTES# = SBIN_VALUE * 1000;
     3097     5827    3                 END;
     3098     5828
     3099     5829    3              ELSE DO;
     3100     5830    3                 IF SYM$INT.COUNT > 3 THEN
     3101     5831    3                    GOTO ILL_EDITKEY_FRACT_FAILURE;
     3102     5832    3                 KEY.BYTES# = KEY.BYTES# + SBIN_VALUE * FRACTMULT (SYM$INT.COUNT);
     3103     5833    3                 END;
     3104     5834    2              END;
     3105     5835
     3106     5836    1           RETURN;
     3107     5837
     3108     5838
     3109     5839    1   CONSEC_KEY_TOO_BIG_FAILURE: ;
     3110     5840    1           ERR_CODE = %E$CONSEC_KEY_TOO_BIG;
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:363  
     3111     5841    1           GOTO SERIOUS_ERROR;
     3112     5842
     3113     5843
     3114     5844    1   ILL_NUMKEY_INTEGER_FAILURE:
     3115     5845    1           ERR_CODE = %E$NUMKEY_INTEGER_NOT_LEGAL;
     3116     5846    1           GOTO SERIOUS_ERROR;
     3117     5847
     3118     5848
     3119     5849    1   ILL_EDITKEY_FRACT_FAILURE:
     3120     5850    1           ERR_CODE = %E$EDITKEY_FRACT_NOT_LEGAL;
     3121     5851    1           GOTO SERIOUS_ERROR;
     3122     5852
     3123     5853
     3124     5854    1   SERIOUS_ERROR:
     3125     5855    1           KEY = %CLEAR;
     3126     5856    2           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;
     3127     5857    2              VD$ERR.CMDLINE_INDEX# = PT_NUMBER.CPOS;
     3128     5858    2              END;
     3129     5859    1           ALTRETURN;
     3130     5860
     3131     5861
     3132     5862    1   END VDE$PNUMERIC_KEY;
     3133     5863        %EOD;

PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:364  
--  Include file information  --

   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PNUMERIC_KEY.

   Procedure VDE$PNUMERIC_KEY requires 94 words for executable code.
   Procedure VDE$PNUMERIC_KEY requires 12 words of local(AUTO) storage.

PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:365  

 Object Unit name= VDE$PNUMERIC_KEY                           File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:15:32.44 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      4      4  VDE$PNUMERIC_KEY
    1   Proc  even  none    94    136  VDE$PNUMERIC_KEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  VDE$PNUMERIC_KEY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VDG$ERRMSG
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:366  


     3000        1        /*T***********************************************************/
     3001        2        /*T*                                                         */
     3002        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3003        4        /*T*                                                         */
     3004        5        /*T***********************************************************/
     3005        6
     3006        7        /*D* NAME: VDE$PNUMERIC_KEY
     3007        8            PARAMETERS:
     3008        9                PT_NUMBER - The NUMBER ParseTree node.  Note that there is
     3009       10                    no %T_NUMBER code, but that other codes (%T_KEY_INCR,
     3010       11                    %T_NUMERIC_KEY) are actually NUMBER nodes.
     3011       12                KEY - Uninitialized VD$KEY.
     3012       13            INPUT:
     3013       14                None.
     3014       15            OUTPUT:
     3015       16                KEY will contain the key specified by the ParseTree nodes.
     3016       17            DESCRIPTION:
     3017       18                The PT_NUMBER node must have one or two children:  T_INTEGER
     3018       19                and/or T_FRACT; either may be omitted but not both; if both
     3019       20                appear, T_INTEGER must be first.  T_INTEGER (if it appears)
     3020       21                is a .DECIMAL PARSE$SYM node; T_FRACT (if it appears) also
     3021       22                is a .DECIMAL PARSE$SYM node.
     3022       23
     3023       24                T_INTEGER's value is multiplied by 1000, and T_FRACT's value
     3024       25                added to it.  The result is stored in KEY as a local
     3025       26                numeric key.
     3026       27                Error if T_INTEGER's value is > %MX_CONSEC_RECORDS.
     3027       28                Error if T_FRACT's value is > %MX_EDITKEY_FRACT.
     3028       29        *N**N*  Note that this routine doesn't know if the key being
     3029       30        *N**N*      specified is for an edit-keyed file or a consecutive
     3030       31        *N**N*      file:  if for a consecutive file, values larger than
     3031       32        *N**N*      99999 should be accepted.  In future, we need some
     3032       33        *N**N*      way to store large numbers as keys in the InTree before
     3033       34        *N**N*      knowing if they should be multiplied by 1000 or not.
     3034       35        *N**N*      For now, we guarantee the integer part is <= 99999, so
     3035       36        *N**N*      we can multiply the value by 1000 without overflowing our
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:367  
     3036       37        *N**N*      27-bit field in KEY.
     3037       38                When the InTree is evaluated, we'll know whether the keys
     3038       39                    should be edit-keys or consecutive keys.  At that time,
     3039       40                    we'll check to see that the key isn't too large for
     3040       41                    an edit-key (this module checks that it's not to large
     3041       42                    for a consecutive key), and that a fraction isn't given
     3042       43                    for a consecutive key.
     3043       44        */
     3044       45
     3045       46        VDE$PNUMERIC_KEY: PROC (PT_NUMBER, KEY) ALTRET;

     46  1 000000   000000 700200 xent  VDE$PNUMERI* TSX0  ! X66_AUTO_2
         1 000001   000014 000002                    ZERO    12,2

     3046       47
     3047       48
     3048       49        %INCLUDE VD_MACROS_M;
     3049     2264        %INCLUDE VD_PERR_C;
     3050     2412        %INCLUDE VD_NODES0_E;
     3051     2504        %INCLUDE XU_MACRO_C;
     3052     5598
     3053     5599
     3054     5600        %PARSE$OUT (NAME=PT_NUMBER, STCLASS=PARAM);
     3055     5645        %VD$KEY_NUMBER (NAME=KEY, STCLASS=PARAM);
     3056     5660
     3057     5661
     3058     5662    1   DCL VDG$ERRMSG              ENTRY (4) ALTRET;
     3059     5663
     3060     5664
     3061     5665        %VD_6E (STCLASS=SYMREF);
     3062     5701
     3063     5702
     3064     5703    1   DCL SBIN_VALUE SBIN;
     3065     5704    1   DCL SYM_INT$ PTR;
     3066     5705    1   DCL X SBIN;
     3067     5706    1   DCL FRACTMULT(0:3) SBIN CONSTANT INIT(0,100,10,1);
     3068     5707    1   DCL ERR_CODE UBIN;
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:368  
     3069     5708
     3070     5709
     3071     5710        %PARSE$SYM (NAME=SYM$INT, STCLASS="BASED(SYM_INT$)");
     3072     5748        %VD$ERR (STCLASS="BASED(VD_6E.ERR_TAIL$)");
     3073     5801
     3074     5802
     3075     5803
     3076     5804    1           KEY = %CLEAR;

   5804  1 000002   200004 470500                    LDP0    @KEY,,AUTO
         1 000003   000000 450100                    STZ     0,,PR0
         1 000004   000001 450100                    STZ     1,,PR0

     3077     5805    1           KEY.TYPE# = %KT_EDITKEY;

   5805  1 000005   000003 220003                    LDX0    3,DU
         1 000006   000000 740100                    STX0    0,,PR0

     3078     5806    1           KEY.REP# = %REP_LOCAL;

   5806  1 000007   000001 221003                    LDX1    1,DU
         1 000010   000000 441100                    SXL1    0,,PR0

     3079     5807    1           KEY.LENGTH# = %NB_NUMERIC_KEY;

   5807  1 000011   003000 236003                    LDQ     1536,DU
         1 000012   000001 552140                    STBQ    1,'40'O,PR0

     3080     5808
     3081     5809    2           DO X=0 TO PT_NUMBER.NSUBLKS-1;

   5809  1 000013   200007 450100                    STZ     X,,AUTO
         1 000014   000101 710000 1                  TRA     s:5834+1

     3082     5810    2              SYM_INT$ = PT_NUMBER.SUBLK$ (X);

   5810  1 000015   200003 470500                    LDP0    @PT_NUMBER,,AUTO
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:369  
         1 000016   200007 720100                    LXL0    X,,AUTO
         1 000017   000003 236110                    LDQ     3,X0,PR0
         1 000020   200006 756100                    STQ     SYM_INT$,,AUTO

     3083     5811                   %INCREMENT (ARRAY=STATS_TOKENS#, INDX="SYM$INT.CODE - %VD_BASE#");

   5812  1 000021   200006 471500                    LDP1    SYM_INT$,,AUTO
         1 000022   100000 721100                    LXL1    0,,PR1
         1 000023   776375 054011 xsym               AOS     VD_6E-771,X1

     3084     5814
     3085     5815    2              CALL CHARBIN (SBIN_VALUE, SYM$INT.TEXT);

   5815  1 000024   100004 236100                    LDQ     4,,PR1
         1 000025   000033 772000                    QRL     27
         1 000026   000000 621006                    EAX1    0,QL
         1 000027   000100 305540                    DTB
         1 000030   100004 230011                    NDSC9   4,,PR1                   cn=1,s=nosgn,sf=0,n=*X1
         1 000031   200005 000004                    NDSC9   SBIN_VALUE,,AUTO         cn=0,s=lsgnf,sf=0,n=4

     3086     5816    3              IF SYM$INT.CODE = %T_INTEGER THEN DO;

   5816  1 000032   100000 722100                    LXL2    0,,PR1
         1 000033   002061 102003                    CMPX2   1073,DU
         1 000034   000063 601000 1                  TNZ     s:5830

     3087     5817    4                 IF SYM$INT.COUNT > 5 THEN DO;

   5817  1 000035   000033 736000                    QLS     27
         1 000036   006000 116003                    CMPQ    3072,DU
         1 000037   000056 602000 1                  TNC     s:5826

     3088     5818    4                    IF PT_NUMBER.NSUBLKS > 1 THEN

   5818  1 000040   000001 223100                    LDX3    1,,PR0
         1 000041   000002 103003                    CMPX3   2,DU
         1 000042   000112 603000 1                  TRC     ILL_NUMKEY_INTEGER_FAILURE
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:370  

     3089     5819    4                       GOTO ILL_NUMKEY_INTEGER_FAILURE;
     3090     5820    4                    IF SYM$INT.COUNT > 9 OR SBIN_VALUE > %MX_CONSEC_RECORDS THEN

   5820  1 000043   012000 116003                    CMPQ    5120,DU
         1 000044   000107 603000 1                  TRC     CONSEC_KEY_TOO_BIG_FAILURE
         1 000045   200005 235100                    LDA     SBIN_VALUE,,AUTO
         1 000046   000032 115000 xsym               CMPA    B_VECTNIL+26
         1 000047   000107 605400 1                  TPNZ    CONSEC_KEY_TOO_BIG_FAILURE

     3091     5821    4                       GOTO CONSEC_KEY_TOO_BIG_FAILURE;
     3092     5822    4                    KEY.BYTES# = SBIN_VALUE;

   5822  1 000050   200004 473500                    LDP3    @KEY,,AUTO
         1 000051   200005 236100                    LDQ     SBIN_VALUE,,AUTO
         1 000052   300001 552134                    STBQ    1,'34'O,PR3

     3093     5823    4                    KEY.TYPE# = %KT_NUMBER;

   5823  1 000053   000001 221003                    LDX1    1,DU
         1 000054   300000 741100                    STX1    0,,PR3

     3094     5824    4                    END;

   5824  1 000055   000100 710000 1                  TRA     s:5834

     3095     5825    3                 ELSE
     3096     5826    3                    KEY.BYTES# = SBIN_VALUE * 1000;

   5826  1 000056   200004 473500                    LDP3    @KEY,,AUTO
         1 000057   200005 236100                    LDQ     SBIN_VALUE,,AUTO
         1 000060   001750 402007                    MPY     1000,DL
         1 000061   300001 552134                    STBQ    1,'34'O,PR3

     3097     5827    3                 END;

   5827  1 000062   000100 710000 1                  TRA     s:5834
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:371  

     3098     5828
     3099     5829    3              ELSE DO;

     3100     5830    3                 IF SYM$INT.COUNT > 3 THEN

   5830  1 000063   000033 736000                    QLS     27
         1 000064   004000 116003                    CMPQ    2048,DU
         1 000065   000115 603000 1                  TRC     ILL_EDITKEY_FRACT_FAILURE

     3101     5831    3                    GOTO ILL_EDITKEY_FRACT_FAILURE;
     3102     5832    3                 KEY.BYTES# = KEY.BYTES# + SBIN_VALUE * FRACTMULT (SYM$INT.COUNT);

   5832  1 000066   200005 236100                    LDQ     SBIN_VALUE,,AUTO
         1 000067   000000 402011 0                  MPY     FRACTMULT,X1
         1 000070   200004 473500                    LDP3    @KEY,,AUTO
         1 000071   200012 756100                    STQ     ERR_CODE+2,,AUTO
         1 000072   300001 236100                    LDQ     1,,PR3
         1 000073   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000074   200013 756100                    STQ     ERR_CODE+3,,AUTO
         1 000075   200012 236100                    LDQ     ERR_CODE+2,,AUTO
         1 000076   200013 036100                    ADLQ    ERR_CODE+3,,AUTO
         1 000077   300001 552134                    STBQ    1,'34'O,PR3

     3103     5833    3                 END;

     3104     5834    2              END;

   5834  1 000100   200007 054100                    AOS     X,,AUTO
         1 000101   200003 470500                    LDP0    @PT_NUMBER,,AUTO
         1 000102   000001 236100                    LDQ     1,,PR0
         1 000103   000022 772000                    QRL     18
         1 000104   200007 116100                    CMPQ    X,,AUTO
         1 000105   000015 605400 1                  TPNZ    s:5810

     3105     5835
     3106     5836    1           RETURN;
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:372  

   5836  1 000106   000000 702200 xent               TSX2  ! X66_ARET

   5826  1 000107                       CONSEC_KEY_* null
     3107     5837
     3108     5838
     3109     5839    1   CONSEC_KEY_TOO_BIG_FAILURE: ;
     3110     5840    1           ERR_CODE = %E$CONSEC_KEY_TOO_BIG;

   5840  1 000107   000425 235007                    LDA     277,DL
         1 000110   200010 755100                    STA     ERR_CODE,,AUTO

     3111     5841    1           GOTO SERIOUS_ERROR;

   5841  1 000111   000120 710000 1                  TRA     SERIOUS_ERROR

     3112     5842
     3113     5843
     3114     5844    1   ILL_NUMKEY_INTEGER_FAILURE:
     3115     5845    1           ERR_CODE = %E$NUMKEY_INTEGER_NOT_LEGAL;

   5845  1 000112   000076 235007       ILL_NUMKEY_* LDA     62,DL
         1 000113   200010 755100                    STA     ERR_CODE,,AUTO

     3116     5846    1           GOTO SERIOUS_ERROR;

   5846  1 000114   000120 710000 1                  TRA     SERIOUS_ERROR

     3117     5847
     3118     5848
     3119     5849    1   ILL_EDITKEY_FRACT_FAILURE:
     3120     5850    1           ERR_CODE = %E$EDITKEY_FRACT_NOT_LEGAL;

   5850  1 000115   000075 235007       ILL_EDITKEY* LDA     61,DL
         1 000116   200010 755100                    STA     ERR_CODE,,AUTO

     3121     5851    1           GOTO SERIOUS_ERROR;
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:373  

   5851  1 000117   000120 710000 1                  TRA     SERIOUS_ERROR

     3122     5852
     3123     5853
     3124     5854    1   SERIOUS_ERROR:
     3125     5855    1           KEY = %CLEAR;

   5855  1 000120   200004 473500       SERIOUS_ERR* LDP3    @KEY,,AUTO
         1 000121   300000 450100                    STZ     0,,PR3
         1 000122   300001 450100                    STZ     1,,PR3

     3126     5856    2           CALL VDG$ERRMSG (ERR_CODE) WHENRETURN DO;

   5856  1 000123   200010 634500                    EPPR4   ERR_CODE,,AUTO
         1 000124   200012 454500                    STP4    ERR_CODE+2,,AUTO
         1 000125   200012 630500                    EPPR0   ERR_CODE+2,,AUTO
         1 000126   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000127   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000130   000135 702000 1                  TSX2    s:5859

     3127     5857    2              VD$ERR.CMDLINE_INDEX# = PT_NUMBER.CPOS;

   5857  1 000131   200003 470500                    LDP0    @PT_NUMBER,,AUTO
         1 000132   000002 720100                    LXL0    2,,PR0
         1 000133   000032 471400 xsym               LDP1    VD_6E+26
         1 000134   100003 440100                    SXL0    3,,PR1

     3128     5858    2              END;

     3129     5859    1           ALTRETURN;

   5859  1 000135   000000 702200 xent               TSX2  ! X66_AALT
     3130     5860
     3131     5861
     3132     5862    1   END VDE$PNUMERIC_KEY;
     3133     5863        %EOD;
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:374  

PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:375  
--  Include file information  --

   XU_MACRO_C.:LIBRARY  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PNUMERIC_KEY.
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:376  

 **** Variables and constants ****

  ****  Section 000 RoData VDE$PNUMERIC_KEY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 FRACTMULT(0:3)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @KEY                       3-0-0/w PTR         r     1 @PT_NUMBER
    10-0-0/w UBIN        r     1 ERR_CODE                  *0-0-0/w STRC(72)    r     1 KEY
    *0-0-0/w STRC(144)   r     1 PT_NUMBER                  5-0-0/w SBIN        r     1 SBIN_VALUE
     6-0-0/w PTR         r     1 SYM_INT$                   7-0-0/w SBIN        r     1 X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(153)   r     1 SYM$INT                    0-0-0/w STRC(180)   r     1 VD$ERR


   Procedure VDE$PNUMERIC_KEY requires 94 words for executable code.
   Procedure VDE$PNUMERIC_KEY requires 12 words of local(AUTO) storage.
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:377  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:378  
          MINI XREF LISTING

CONSEC_KEY_TOO_BIG_FAILURE
      5826**LABEL    5821--GOTO
ERR_CODE
      5707**DCL      5840<<ASSIGN   5845<<ASSIGN   5850<<ASSIGN   5856<>CALL
FRACTMULT
      5706**DCL      5832>>ASSIGN
ILL_EDITKEY_FRACT_FAILURE
      5850**LABEL    5831--GOTO
ILL_NUMKEY_INTEGER_FAILURE
      5845**LABEL    5819--GOTO
KEY
      5653**DCL        46--PROC     5804<<ASSIGN   5855<<ASSIGN
KEY.BYTES#
      5657**DCL      5822<<ASSIGN   5826<<ASSIGN   5832<<ASSIGN   5832>>ASSIGN
KEY.LENGTH#
      5657**DCL      5807<<ASSIGN
KEY.REP#
      5657**DCL      5806<<ASSIGN
KEY.TYPE#
      5657**DCL      5805<<ASSIGN   5823<<ASSIGN
PT_NUMBER
      5606**DCL        46--PROC
PT_NUMBER.CPOS
      5632**DCL      5857>>ASSIGN
PT_NUMBER.NSUBLKS
      5618**DCL      5809>>DOINDEX  5818>>IF
PT_NUMBER.SUBLK$
      5639**DCL      5810>>ASSIGN
SBIN_VALUE
      5703**DCL      5815<<CALLBLT  5820>>IF       5822>>ASSIGN   5826>>ASSIGN   5832>>ASSIGN
SERIOUS_ERROR
      5855**LABEL    5841--GOTO     5846--GOTO     5851--GOTO
PL6.E3A0      #005=VDE$PNUMERIC_KEY File=VDE$PARSE.:VDA5TSI                      FRI 07/04/97 11:15 Page:379  
SYM$INT.CODE
      5723**DCL      5812>>ASSIGN   5812>>ASSIGN   5816>>IF
SYM$INT.COUNT
      5740**DCL      5743--IMP-SIZ  5815>>CALLBLT  5817>>IF       5820>>IF       5830>>IF       5832>>ASSIGN
SYM$INT.TEXT
      5743**DCL      5815>>CALLBLT
SYM_INT$
      5704**DCL      5717--IMP-PTR  5810<<ASSIGN   5812>>ASSIGN   5812>>ASSIGN   5815>>CALLBLT  5815>>CALLBLT
      5816>>IF       5817>>IF       5820>>IF       5830>>IF       5832>>ASSIGN
VD$ERR.CMDLINE_INDEX#
      5798**DCL      5857<<ASSIGN
VDG$ERRMSG
      5662**DCL-ENT  5856--CALL
VD_6E.ERR_TAIL$
      5697**DCL      5756--IMP-PTR  5857>>ASSIGN
VD_6E.STATS_TOKENS#
      5699**DCL      5812<<ASSIGN   5812>>ASSIGN
X
      5705**DCL      5809<<DOINDEX  5810>>ASSIGN

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:380  
     3134        1        /*T***********************************************************/
     3135        2        /*T*                                                         */
     3136        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3137        4        /*T*                                                         */
     3138        5        /*T***********************************************************/
     3139        6
     3140        7        /*D* NAME: VDE$PFILE_TO_EDIT
     3141        8            PARAMETERS:
     3142        9                FID - VD$TEXTC containing the fid of the file to edit.
     3143       10                FILE_KEY - Uninitialized VD$KEY.
     3144       11                RANGE - Optional param; if given, should be an uninitialized VD$RANGE.
     3145       12            INPUT:
     3146       13            OUTPUT:
     3147       14                FILE_KEY will refer to a VD$FILE_KEY specifying the fid.
     3148       15                RANGE (if passed) will be set to BOF thru EOF.
     3149       16            DESCRIPTION:
     3150       17                M$FID the fid into its constituent parts.  Build a VD$FILE_KEY
     3151       18                for them, and setup FILE_KEY to refer to the VD$FILE_KEY.
     3152       19                If RANGE was passed, initialize it to specify BOF thru EOF.
     3153       20        */
     3154       21
     3155       22        VDE$PFILE_TO_EDIT: PROC (FID, FILE_KEY, RANGE) ALTRET;
     3156       23
     3157       24        %INCLUDE VD_MACROS_M;
     3158     2239        %INCLUDE VD_PERR_C;
     3159     2387        %INCLUDE CP_6;
     3160     2468        %INCLUDE CP_6_SUBS;
     3161     3008    1   DCL B$JIT$ PTR SYMREF;
     3162     3009        %INCLUDE B$JIT;
     3163     3299
     3164     3300
     3165     3301        %VD$TEXTC (NAME=FID, STCLASS=PARAM);
     3166     3324        %VD$KEY (NAME=FILE_KEY, STCLASS=PARAM);
     3167     3338        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     3168     3407
     3169     3408
     3170     3409    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:381  
     3171     3410    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     3172     3411
     3173     3412
     3174     3413        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     3175     3427    1   DCL B$TCB$ PTR SYMREF;
     3176     3428
     3177     3429
     3178     3430
     3179     3431    1   DCL FILE_KEY$ PTR;
     3180     3432        %FPT_FID (STCLASS=AUTO);
     3181     3455        %VLP_SN (STCLASS=AUTO);
     3182     3468        %VLP_WSN (STCLASS=AUTO);
     3183     3481    1   DCL VD_ERR$ PTR;
     3184     3482    1   DCL ERR_SUBST$ PTR;
     3185     3483
     3186     3484
     3187     3485        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     3188     3534        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3189     3587        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3190     3632        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     3191     3635        %B$ALT;
     3192     3643
     3193     3644
     3194     3645
     3195     3646    1           FILE_KEY = %CLEAR;
     3196     3647    1           FILE_KEY.TYPE# = %KT_STRING;
     3197     3648    1           FILE_KEY.REP# = %REP_REMOTE;
     3198     3649    1           CALL VDG$OALLOC (%CLS_FILE_KEY, FILE_KEY.V$)
     3199     3650    1             ALTRET (OALLOC_FAILED);
     3200     3651    1           FILE_KEY$ = FILE_KEY.V$;
     3201     3652
     3202     3653    1           FPT_FID = %CLEAR;
     3203     3654    1           FPT_FID.V_ = VECTOR(FPT_FID.V);
     3204     3655    1           FPT_FID.RESULTS_ = VECTOR(NIL);
     3205     3656    1           FPT_FID.TEXTFID_ = VECTOR(FID.BYTES);
     3206     3657    1           FPT_FID.NAME_ = VECTOR(FILE$KEY.UNIQUE.FNAME);
     3207     3658    1           FPT_FID.ACCT_ = VECTOR(FILE$KEY.UNIQUE.ACCT);
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:382  
     3208     3659    1           FPT_FID.PASS_ = VECTOR(FILE$KEY.PASS);
     3209     3660    1           FPT_FID.SN_ = VECTOR(VLP_SN);
     3210     3661    1           VLP_SN = %CLEAR;
     3211     3662    1           VLP_SN.NUM# = 1;
     3212     3663    1           FPT_FID.WSN_ = VECTOR(VLP_WSN);
     3213     3664    1           FPT_FID.ASN_ = VECTOR(FILE$KEY.ASN#);
     3214     3665    1           FPT_FID.RES_ = VECTOR(FILE$KEY.RES);
     3215     3666    1           FPT_FID.V.SCRUB.SNAME# = %TRUE;
     3216     3667    1           FPT_FID.V.SCRUB.SACCT# = %TRUE;
     3217     3668    1           FPT_FID.V.SCRUB.SPASS# = %TRUE;
     3218     3669    1           FPT_FID.V.SCRUB.SSN# = %TRUE;
     3219     3670    1           FPT_FID.V.SCRUB.SRES# = %TRUE;
     3220     3671
     3221     3672    1           CALL M$FID (FPT_FID)
     3222     3673    1             ALTRET (FID_FAILED);
     3223     3674
     3224     3675    1           IF FILE$KEY.ASN# ~= %FILE# THEN
     3225     3676    1              GOTO BAD_FILE_ASN_FAILURE;
     3226     3677
     3227     3678    1           FILE$KEY.PSN = VLP_SN.SN# (0);
     3228     3679    2           IF FILE$KEY.UNIQUE.ACCT = ' ' THEN DO;
     3229     3680    2              IF FILE$KEY.UNIQUE.FNAME.LENGTH# >= 1
     3230     3681    2                AND SUBSTR(FILE$KEY.UNIQUE.FNAME.BYTES, 0, 1) =
     3231     3682    2                %CHR_TEMP_FILE THEN
     3232     3683    2                 FILE$KEY.UNIQUE.ACCT = B$JIT.ACCN;
     3233     3684    2              ELSE
     3234     3685    2                 FILE$KEY.UNIQUE.ACCT = B$JIT.FACCN;
     3235     3686    2              IF FILE$KEY.PSN = ' ' THEN
     3236     3687    2                 FILE$KEY.PSN = B$JIT.FPSN;
     3237     3688    2              END;
     3238     3689
     3239     3690    1           FILE$KEY.LENGTH# = LENGTHC(FILE$KEY.UNIQUE.ACCT) +
     3240     3691    1             LENGTHC(FILE$KEY.UNIQUE.FNAME.LENGTH#) +
     3241     3692    1             FILE$KEY.UNIQUE.FNAME.LENGTH#;
     3242     3693
     3243     3694    2           IF ADDR(RANGE) ~= ADDR(NIL) THEN DO;
     3244     3695    2              RANGE = %CLEAR;
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:383  
     3245     3696                   /*N*
     3246     3697                   *N*  Need some way of determining--now or later--whether
     3247     3698                   *N*    the file's keys are numeric or string, 'cause
     3248     3699                   *N*    BOF is represented differently in the two cases.
     3249     3700                   *N*  For now, assume numeric.
     3250     3701                   *N*/
     3251     3702    2              RANGE.START.KEY (%LVL_LOWER-1) = VD_KEY_NUMERIC_BOF;
     3252     3703    2              RANGE.ENDD.EOF = %TRUE;
     3253     3704    2              END;
     3254     3705
     3255     3706    1           RETURN;
     3256     3707
     3257     3708
     3258     3709
     3259     3710    1   FID_FAILED:
     3260     3711    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3261     3712    1             ALTRET (OALLOC_FAILED);
     3262     3713    1           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
     3263     3714    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3264     3715    1           GOTO FREE_OBJECTS;
     3265     3716
     3266     3717
     3267     3718    1   BAD_FILE_ASN_FAILURE:
     3268     3719    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3269     3720    1             ALTRET (OALLOC_FAILED);
     3270     3721    1           VD$ERR.ERR.CODE# = %E$FILE_ASN_NOT_ACCESSABLE;
     3271     3722    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3272     3723    1           ERR_SUBST$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));
     3273     3724    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
     3274     3725    1           SUBST$POINTER.V$ (0) = ADDR(FID);
     3275     3726    1           GOTO FREE_OBJECTS;
     3276     3727
     3277     3728
     3278     3729    1   FREE_OBJECTS:
     3279     3730    1           FILE_KEY = %CLEAR;
     3280     3731    1           CALL VDG$OFREE (FILE$KEY)
     3281     3732    1             ALTRET (OFREE_FAILED);
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:384  
     3282     3733    1           ALTRETURN;
     3283     3734
     3284     3735
     3285     3736    1   OALLOC_FAILED: ;
     3286     3737    1   OFREE_FAILED: ;
     3287     3738    1           ALTRETURN;
     3288     3739
     3289     3740    1   END VDE$PFILE_TO_EDIT;
     3290     3741        %EOD;

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:385  
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDE$PFILE_TO_EDIT.

   Procedure VDE$PFILE_TO_EDIT requires 190 words for executable code.
   Procedure VDE$PFILE_TO_EDIT requires 42 words of local(AUTO) storage.

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:386  

 Object Unit name= VDE$PFILE_TO_EDIT                          File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:15:41.32 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   190    276  VDE$PFILE_TO_EDIT
    2  RoData even  none    13     15  VDE$PFILE_TO_EDIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  VDE$PFILE_TO_EDIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OFREE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:387  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                VD_KEY_NUMERIC_BOF
     B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:388  


     3134        1        /*T***********************************************************/
     3135        2        /*T*                                                         */
     3136        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3137        4        /*T*                                                         */
     3138        5        /*T***********************************************************/
     3139        6
     3140        7        /*D* NAME: VDE$PFILE_TO_EDIT
     3141        8            PARAMETERS:
     3142        9                FID - VD$TEXTC containing the fid of the file to edit.
     3143       10                FILE_KEY - Uninitialized VD$KEY.
     3144       11                RANGE - Optional param; if given, should be an uninitialized VD$RANGE.
     3145       12            INPUT:
     3146       13            OUTPUT:
     3147       14                FILE_KEY will refer to a VD$FILE_KEY specifying the fid.
     3148       15                RANGE (if passed) will be set to BOF thru EOF.
     3149       16            DESCRIPTION:
     3150       17                M$FID the fid into its constituent parts.  Build a VD$FILE_KEY
     3151       18                for them, and setup FILE_KEY to refer to the VD$FILE_KEY.
     3152       19                If RANGE was passed, initialize it to specify BOF thru EOF.
     3153       20        */
     3154       21
     3155       22        VDE$PFILE_TO_EDIT: PROC (FID, FILE_KEY, RANGE) ALTRET;

     22  1 000000   000000 700200 xent  VDE$PFILE_T* TSX0  ! X66_AUTO_3
         1 000001   000052 000003                    ZERO    42,3

     3156       23
     3157       24        %INCLUDE VD_MACROS_M;
     3158     2239        %INCLUDE VD_PERR_C;
     3159     2387        %INCLUDE CP_6;
     3160     2468        %INCLUDE CP_6_SUBS;
     3161     3008    1   DCL B$JIT$ PTR SYMREF;
     3162     3009        %INCLUDE B$JIT;
     3163     3299
     3164     3300
     3165     3301        %VD$TEXTC (NAME=FID, STCLASS=PARAM);
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:389  
     3166     3324        %VD$KEY (NAME=FILE_KEY, STCLASS=PARAM);
     3167     3338        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     3168     3407
     3169     3408
     3170     3409    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3171     3410    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     3172     3411
     3173     3412
     3174     3413        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     3175     3427    1   DCL B$TCB$ PTR SYMREF;
     3176     3428
     3177     3429
     3178     3430
     3179     3431    1   DCL FILE_KEY$ PTR;
     3180     3432        %FPT_FID (STCLASS=AUTO);
     3181     3455        %VLP_SN (STCLASS=AUTO);
     3182     3468        %VLP_WSN (STCLASS=AUTO);
     3183     3481    1   DCL VD_ERR$ PTR;
     3184     3482    1   DCL ERR_SUBST$ PTR;
     3185     3483
     3186     3484
     3187     3485        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
     3188     3534        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3189     3587        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3190     3632        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     3191     3635        %B$ALT;
     3192     3643
     3193     3644
     3194     3645
     3195     3646    1           FILE_KEY = %CLEAR;

   3646  1 000002   200004 470500                    LDP0    @FILE_KEY,,AUTO
         1 000003   000000 450100                    STZ     0,,PR0
         1 000004   000001 450100                    STZ     1,,PR0

     3196     3647    1           FILE_KEY.TYPE# = %KT_STRING;

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:390  
   3647  1 000005   000002 220003                    LDX0    2,DU
         1 000006   000000 740100                    STX0    0,,PR0

     3197     3648    1           FILE_KEY.REP# = %REP_REMOTE;

   3648  1 000007   000000 440100                    SXL0    0,,PR0

     3198     3649    1           CALL VDG$OALLOC (%CLS_FILE_KEY, FILE_KEY.V$)

   3649  1 000010   200004 236100                    LDQ     @FILE_KEY,,AUTO
         1 000011   000001 036003                    ADLQ    1,DU
         1 000012   000001 235000 2                  LDA     1
         1 000013   200050 757100                    STAQ    ERR_SUBST$+1,,AUTO
         1 000014   200050 630500                    EPPR0   ERR_SUBST$+1,,AUTO
         1 000015   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000016   000000 701000 xent               TSX1    VDG$OALLOC
         1 000017   000275 702000 1                  TSX2    OALLOC_FAILED

     3199     3650    1             ALTRET (OALLOC_FAILED);
     3200     3651    1           FILE_KEY$ = FILE_KEY.V$;

   3651  1 000020   200004 470500                    LDP0    @FILE_KEY,,AUTO
         1 000021   000001 236100                    LDQ     1,,PR0
         1 000022   200006 756100                    STQ     FILE_KEY$,,AUTO

     3201     3652
     3202     3653    1           FPT_FID = %CLEAR;

   3653  1 000023   000100 100400                    MLR     fill='000'O
         1 000024   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000025   200010 000140                    ADSC9   FPT_FID,,AUTO            cn=0,n=96

     3203     3654    1           FPT_FID.V_ = VECTOR(FPT_FID.V);

   3654  1 000026   000002 235000 2                  LDA     2
         1 000027   200050 452500                    STP2    ERR_SUBST$+1,,AUTO
         1 000030   200050 236100                    LDQ     ERR_SUBST$+1,,AUTO
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:391  
         1 000031   000034 036003                    ADLQ    28,DU
         1 000032   200010 757100                    STAQ    FPT_FID,,AUTO

     3204     3655    1           FPT_FID.RESULTS_ = VECTOR(NIL);

   3655  1 000033   000004 237000 2                  LDAQ    4
         1 000034   200032 757100                    STAQ    FPT_FID+18,,AUTO

     3205     3656    1           FPT_FID.TEXTFID_ = VECTOR(FID.BYTES);

   3656  1 000035   200003 471500                    LDP1    @FID,,AUTO
         1 000036   100000 236100                    LDQ     0,,PR1
         1 000037   000033 772000                    QRL     27
         1 000040   000064 737000                    LLS     52
         1 000041   000140 135007                    SBLA    96,DL
         1 000042   200003 236100                    LDQ     @FID,,AUTO
         1 000043   200000 036007                    ADLQ    65536,DL
         1 000044   200012 757100                    STAQ    FPT_FID+2,,AUTO

     3206     3657    1           FPT_FID.NAME_ = VECTOR(FILE$KEY.UNIQUE.FNAME);

   3657  1 000045   000003 235000 2                  LDA     3
         1 000046   200006 236100                    LDQ     FILE_KEY$,,AUTO
         1 000047   000006 036000 2                  ADLQ    6
         1 000050   200014 757100                    STAQ    FPT_FID+4,,AUTO

     3207     3658    1           FPT_FID.ACCT_ = VECTOR(FILE$KEY.UNIQUE.ACCT);

   3658  1 000051   000007 235000 2                  LDA     7
         1 000052   200006 236100                    LDQ     FILE_KEY$,,AUTO
         1 000053   000010 036000 2                  ADLQ    8
         1 000054   200016 757100                    STAQ    FPT_FID+6,,AUTO

     3208     3659    1           FPT_FID.PASS_ = VECTOR(FILE$KEY.PASS);

   3659  1 000055   000007 235000 2                  LDA     7
         1 000056   200006 236100                    LDQ     FILE_KEY$,,AUTO
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:392  
         1 000057   000017 036003                    ADLQ    15,DU
         1 000060   200020 757100                    STAQ    FPT_FID+8,,AUTO

     3209     3660    1           FPT_FID.SN_ = VECTOR(VLP_SN);

   3660  1 000061   000002 235000 2                  LDA     2
         1 000062   200050 452500                    STP2    ERR_SUBST$+1,,AUTO
         1 000063   200050 236100                    LDQ     ERR_SUBST$+1,,AUTO
         1 000064   000040 036003                    ADLQ    32,DU
         1 000065   200022 757100                    STAQ    FPT_FID+10,,AUTO

     3210     3661    1           VLP_SN = %CLEAR;

   3661  1 000066   000100 100400                    MLR     fill='000'O
         1 000067   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000070   200040 000012                    ADSC9   VLP_SN,,AUTO             cn=0,n=10

     3211     3662    1           VLP_SN.NUM# = 1;

   3662  1 000071   000001 235007                    LDA     1,DL
         1 000072   200040 755100                    STA     VLP_SN,,AUTO

     3212     3663    1           FPT_FID.WSN_ = VECTOR(VLP_WSN);

   3663  1 000073   000007 235000 2                  LDA     7
         1 000074   200050 452500                    STP2    ERR_SUBST$+1,,AUTO
         1 000075   200050 236100                    LDQ     ERR_SUBST$+1,,AUTO
         1 000076   000044 036003                    ADLQ    36,DU
         1 000077   200024 757100                    STAQ    FPT_FID+12,,AUTO

     3213     3664    1           FPT_FID.ASN_ = VECTOR(FILE$KEY.ASN#);

   3664  1 000100   177640 235007                    LDA     65440,DL
         1 000101   200006 236100                    LDQ     FILE_KEY$,,AUTO
         1 000102   000011 036000 2                  ADLQ    9
         1 000103   200026 757100                    STAQ    FPT_FID+14,,AUTO

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:393  
     3214     3665    1           FPT_FID.RES_ = VECTOR(FILE$KEY.RES);

   3665  1 000104   777640 235007                    LDA     -96,DL
         1 000105   200006 236100                    LDQ     FILE_KEY$,,AUTO
         1 000106   000012 036000 2                  ADLQ    10
         1 000107   200030 757100                    STAQ    FPT_FID+16,,AUTO

     3215     3666    1           FPT_FID.V.SCRUB.SNAME# = %TRUE;

   3666  1 000110   400000 236003                    LDQ     -131072,DU
         1 000111   200034 256100                    ORSQ    FPT_FID+20,,AUTO

     3216     3667    1           FPT_FID.V.SCRUB.SACCT# = %TRUE;

   3667  1 000112   200000 236003                    LDQ     65536,DU
         1 000113   200034 256100                    ORSQ    FPT_FID+20,,AUTO

     3217     3668    1           FPT_FID.V.SCRUB.SPASS# = %TRUE;

   3668  1 000114   100000 236003                    LDQ     32768,DU
         1 000115   200034 256100                    ORSQ    FPT_FID+20,,AUTO

     3218     3669    1           FPT_FID.V.SCRUB.SSN# = %TRUE;

   3669  1 000116   040000 236003                    LDQ     16384,DU
         1 000117   200034 256100                    ORSQ    FPT_FID+20,,AUTO

     3219     3670    1           FPT_FID.V.SCRUB.SRES# = %TRUE;

   3670  1 000120   010000 236003                    LDQ     4096,DU
         1 000121   200034 256100                    ORSQ    FPT_FID+20,,AUTO

     3220     3671
     3221     3672    1           CALL M$FID (FPT_FID)

   3672  1 000122   200010 630500                    EPPR0   FPT_FID,,AUTO
         1 000123   420001 713400                    CLIMB   alt,+8193
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:394  
         1 000124   404400 401760                    pmme    nvectors=10
         1 000125   000213 702000 1                  TSX2    FID_FAILED

     3222     3673    1             ALTRET (FID_FAILED);
     3223     3674
     3224     3675    1           IF FILE$KEY.ASN# ~= %FILE# THEN

   3675  1 000126   200006 470500                    LDP0    FILE_KEY$,,AUTO
         1 000127   000014 236100                    LDQ     12,,PR0
         1 000130   000777 376003                    ANQ     511,DU
         1 000131   000001 116003                    CMPQ    1,DU
         1 000132   000234 601000 1                  TNZ     BAD_FILE_ASN_FAILURE

     3225     3676    1              GOTO BAD_FILE_ASN_FAILURE;
     3226     3677
     3227     3678    1           FILE$KEY.PSN = VLP_SN.SN# (0);

   3678  1 000133   040100 100500                    MLR     fill='040'O
         1 000134   200041 000006                    ADSC9   VLP_SN+1,,AUTO           cn=0,n=6
         1 000135   000015 400006                    ADSC9   13,,PR0                  cn=2,n=6

     3228     3679    2           IF FILE$KEY.UNIQUE.ACCT = ' ' THEN DO;

   3679  1 000136   040000 106500                    CMPC    fill='040'O
         1 000137   000002 200010                    ADSC9   2,,PR0                   cn=1,n=8
         1 000140   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000141   000170 601000 1                  TNZ     s:3690

     3229     3680    2              IF FILE$KEY.UNIQUE.FNAME.LENGTH# >= 1

   3680  1 000142   000004 236100                    LDQ     4,,PR0
         1 000143   000777 316003                    CANQ    511,DU
         1 000144   000155 600000 1                  TZE     s:3685
         1 000145   777000 376007                    ANQ     -512,DL
         1 000146   052000 116007                    CMPQ    21504,DL
         1 000147   000155 601000 1                  TNZ     s:3685

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:395  
     3230     3681    2                AND SUBSTR(FILE$KEY.UNIQUE.FNAME.BYTES, 0, 1) =
     3231     3682    2                %CHR_TEMP_FILE THEN
     3232     3683    2                 FILE$KEY.UNIQUE.ACCT = B$JIT.ACCN;

   3683  1 000150   000000 471400 xsym               LDP1    B$JIT$
         1 000151   040100 100500                    MLR     fill='040'O
         1 000152   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8
         1 000153   000002 200010                    ADSC9   2,,PR0                   cn=1,n=8
         1 000154   000161 710000 1                  TRA     s:3686

     3233     3684    2              ELSE
     3234     3685    2                 FILE$KEY.UNIQUE.ACCT = B$JIT.FACCN;

   3685  1 000155   000000 471400 xsym               LDP1    B$JIT$
         1 000156   040100 100500                    MLR     fill='040'O
         1 000157   100006 000010                    ADSC9   6,,PR1                   cn=0,n=8
         1 000160   000002 200010                    ADSC9   2,,PR0                   cn=1,n=8

     3235     3686    2              IF FILE$KEY.PSN = ' ' THEN

   3686  1 000161   040000 106500                    CMPC    fill='040'O
         1 000162   000015 400006                    ADSC9   13,,PR0                  cn=2,n=6
         1 000163   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000164   000170 601000 1                  TNZ     s:3690

     3236     3687    2                 FILE$KEY.PSN = B$JIT.FPSN;

   3687  1 000165   040100 100500                    MLR     fill='040'O
         1 000166   100021 000006                    ADSC9   17,,PR1                  cn=0,n=6
         1 000167   000015 400006                    ADSC9   13,,PR0                  cn=2,n=6

     3237     3688    2              END;

     3238     3689
     3239     3690    1           FILE$KEY.LENGTH# = LENGTHC(FILE$KEY.UNIQUE.ACCT) +

   3690  1 000170   000004 236100                    LDQ     4,,PR0
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:396  
         1 000171   000022 772000                    QRL     18
         1 000172   000777 376007                    ANQ     511,DL
         1 000173   000011 036007                    ADLQ    9,DL
         1 000174   000033 736000                    QLS     27
         1 000175   000002 552140                    STBQ    2,'40'O,PR0

     3240     3691    1             LENGTHC(FILE$KEY.UNIQUE.FNAME.LENGTH#) +
     3241     3692    1             FILE$KEY.UNIQUE.FNAME.LENGTH#;
     3242     3693
     3243     3694    2           IF ADDR(RANGE) ~= ADDR(NIL) THEN DO;

   3694  1 000176   200005 236100                    LDQ     @RANGE,,AUTO
         1 000177   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000200   000212 600000 1                  TZE     s:3706

     3244     3695    2              RANGE = %CLEAR;

   3695  1 000201   200005 471500                    LDP1    @RANGE,,AUTO
         1 000202   000100 100400                    MLR     fill='000'O
         1 000203   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000204   100000 000110                    ADSC9   0,,PR1                   cn=0,n=72

     3245     3696                   /*N*
     3246     3697                   *N*  Need some way of determining--now or later--whether
     3247     3698                   *N*    the file's keys are numeric or string, 'cause
     3248     3699                   *N*    BOF is represented differently in the two cases.
     3249     3700                   *N*  For now, assume numeric.
     3250     3701                   *N*/
     3251     3702    2              RANGE.START.KEY (%LVL_LOWER-1) = VD_KEY_NUMERIC_BOF;

   3702  1 000205   000100 100400                    MLR     fill='000'O
         1 000206   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 000207   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

     3252     3703    2              RANGE.ENDD.EOF = %TRUE;

   3703  1 000210   400000 236007                    LDQ     -131072,DL
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:397  
         1 000211   100021 256100                    ORSQ    17,,PR1

     3253     3704    2              END;

     3254     3705
     3255     3706    1           RETURN;

   3706  1 000212   000000 702200 xent               TSX2  ! X66_ARET

     3256     3707
     3257     3708
     3258     3709
     3259     3710    1   FID_FAILED:
     3260     3711    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   3711  1 000213   200046 630500       FID_FAILED   EPPR0   VD_ERR$,,AUTO
         1 000214   200051 450500                    STP0    ERR_SUBST$+2,,AUTO
         1 000215   000013 236000 2                  LDQ     11
         1 000216   200050 756100                    STQ     ERR_SUBST$+1,,AUTO
         1 000217   200050 630500                    EPPR0   ERR_SUBST$+1,,AUTO
         1 000220   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000221   000000 701000 xent               TSX1    VDG$OALLOC
         1 000222   000275 702000 1                  TSX2    OALLOC_FAILED

     3261     3712    1             ALTRET (OALLOC_FAILED);
     3262     3713    1           VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

   3713  1 000223   000000 470400 xsym               LDP0    B$TCB$
         1 000224   000000 471500                    LDP1    0,,PR0
         1 000225   100102 236100                    LDQ     66,,PR1
         1 000226   200046 473500                    LDP3    VD_ERR$,,AUTO
         1 000227   300002 756100                    STQ     2,,PR3

     3263     3714    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   3714  1 000230   000003 220003                    LDX0    3,DU
         1 000231   200046 471500                    LDP1    VD_ERR$,,AUTO
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:398  
         1 000232   100003 740100                    STX0    3,,PR1

     3264     3715    1           GOTO FREE_OBJECTS;

   3715  1 000233   000265 710000 1                  TRA     FREE_OBJECTS

     3265     3716
     3266     3717
     3267     3718    1   BAD_FILE_ASN_FAILURE:
     3268     3719    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   3719  1 000234   200046 631500       BAD_FILE_AS* EPPR1   VD_ERR$,,AUTO
         1 000235   200051 451500                    STP1    ERR_SUBST$+2,,AUTO
         1 000236   000013 236000 2                  LDQ     11
         1 000237   200050 756100                    STQ     ERR_SUBST$+1,,AUTO
         1 000240   200050 630500                    EPPR0   ERR_SUBST$+1,,AUTO
         1 000241   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000242   000000 701000 xent               TSX1    VDG$OALLOC
         1 000243   000275 702000 1                  TSX2    OALLOC_FAILED

     3269     3720    1             ALTRET (OALLOC_FAILED);
     3270     3721    1           VD$ERR.ERR.CODE# = %E$FILE_ASN_NOT_ACCESSABLE;

   3721  1 000244   200046 470500                    LDP0    VD_ERR$,,AUTO
         1 000245   000002 236100                    LDQ     2,,PR0
         1 000246   000014 376000 2                  ANQ     12
         1 000247   004270 276007                    ORQ     2232,DL
         1 000250   000002 756100                    STQ     2,,PR0

     3271     3722    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   3722  1 000251   000003 220003                    LDX0    3,DU
         1 000252   200046 470500                    LDP0    VD_ERR$,,AUTO
         1 000253   000003 740100                    STX0    3,,PR0

     3272     3723    1           ERR_SUBST$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:399  
   3723  1 000254   200046 236100                    LDQ     VD_ERR$,,AUTO
         1 000255   000005 036003                    ADLQ    5,DU
         1 000256   200047 756100                    STQ     ERR_SUBST$,,AUTO

     3273     3724    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   3724  1 000257   000045 221003                    LDX1    37,DU
         1 000260   200047 470500                    LDP0    ERR_SUBST$,,AUTO
         1 000261   000000 741100                    STX1    0,,PR0

     3274     3725    1           SUBST$POINTER.V$ (0) = ADDR(FID);

   3725  1 000262   200003 236100                    LDQ     @FID,,AUTO
         1 000263   000003 756100                    STQ     3,,PR0

     3275     3726    1           GOTO FREE_OBJECTS;

   3726  1 000264   000265 710000 1                  TRA     FREE_OBJECTS

     3276     3727
     3277     3728
     3278     3729    1   FREE_OBJECTS:
     3279     3730    1           FILE_KEY = %CLEAR;

   3730  1 000265   200004 470500       FREE_OBJECTS LDP0    @FILE_KEY,,AUTO
         1 000266   000000 450100                    STZ     0,,PR0
         1 000267   000001 450100                    STZ     1,,PR0

     3280     3731    1           CALL VDG$OFREE (FILE$KEY)

   3731  1 000270   200006 630500                    EPPR0   FILE_KEY$,,AUTO
         1 000271   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000272   000000 701000 xent               TSX1    VDG$OFREE
         1 000273   000275 702000 1                  TSX2    OALLOC_FAILED

     3281     3732    1             ALTRET (OFREE_FAILED);
     3282     3733    1           ALTRETURN;
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:400  

   3733  1 000274   000000 702200 xent               TSX2  ! X66_AALT

   3725  1 000275                       OALLOC_FAIL* null
   3725  1 000275                       OFREE_FAILED null
     3283     3734
     3284     3735
     3285     3736    1   OALLOC_FAILED: ;
     3286     3737    1   OFREE_FAILED: ;
     3287     3738    1           ALTRETURN;

   3738  1 000275   000000 702200 xent               TSX2  ! X66_AALT
     3288     3739
     3289     3740    1   END VDE$PFILE_TO_EDIT;
     3290     3741        %EOD;

PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:401  
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDE$PFILE_TO_EDIT.
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:402  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FID                       4-0-0/w PTR         r     1 @FILE_KEY
     5-0-0/w PTR         r     1 @RANGE                    47-0-0/w PTR         r     1 ERR_SUBST$
    *0-0-0/w ASTR(9)     r     1 FID                       *0-0-0/w STRC(72)    r     1 FILE_KEY
     6-0-0/w PTR         r     1 FILE_KEY$                 10-0-0/d STRC(864)   r     1 FPT_FID
    *0-0-0/w STRC(648)   r     1 RANGE                     46-0-0/w PTR         r     1 VD_ERR$
    40-0-0/d STRC(90)    r     1 VLP_SN                    44-0-0/c STRC(72)    r     1 VLP_WSN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w STRC(648)   r     1 FILE$KEY
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w STRC(180)   r     1 VD$ERR


   Procedure VDE$PFILE_TO_EDIT requires 190 words for executable code.
   Procedure VDE$PFILE_TO_EDIT requires 42 words of local(AUTO) storage.
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:403  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:404  
          MINI XREF LISTING

B$ALT.CODE
      3637**DCL      3637--REDEF    3638--REDEF    3638--REDEF
B$ALT.ERR
      3638**DCL      3713>>ASSIGN
B$ALT.ERR.ERR#
      3639**DCL      3639--REDEF
B$ALT.EVID
      3638**DCL      3638--REDEF    3638--REDEF
B$JIT.ACCN
      3023**DCL      3683>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      3117**DCL      3117--REDEF
B$JIT.ERR.MID
      3024**DCL      3024--REDEF
B$JIT.FACCN
      3023**DCL      3685>>ASSIGN
B$JIT.FPSN
      3104**DCL      3687>>ASSIGN
B$JIT.JRESPEAK
      3185**DCL      3186--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      3294**DCL      3294--REDEF    3295--REDEF
B$JIT.PNR
      3198**DCL      3198--REDEF
B$JIT.TSLINE
      3292**DCL      3293--REDEF
B$JIT$
      3008**DCL      3018--IMP-PTR  3683>>ASSIGN   3685>>ASSIGN   3687>>ASSIGN
B$TCB.ALT$
      3633**DCL      3713>>ASSIGN
B$TCB$
      3427**DCL      3633--IMP-PTR  3713>>ASSIGN
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:405  
BAD_FILE_ASN_FAILURE
      3719**LABEL    3676--GOTO
ERR_SUBST$
      3482**DCL      3603--IMP-PTR  3723<<ASSIGN   3724>>ASSIGN   3725>>ASSIGN
FID
      3309**DCL        22--PROC     3725--ASSIGN
FID.BYTES
      3319**DCL      3656--ASSIGN
FID.LENGTH#
      3317**DCL      3319--IMP-SIZ  3656>>ASSIGN
FID_FAILED
      3711**LABEL    3672--CALLALT
FILE$KEY
      3501**DCL      3731<>CALL
FILE$KEY.ASN#
      3530**DCL      3664--ASSIGN   3675>>IF
FILE$KEY.LENGTH#
      3528**DCL      3690<<ASSIGN
FILE$KEY.PASS
      3531**DCL      3659--ASSIGN
FILE$KEY.PSN
      3531**DCL      3678<<ASSIGN   3686>>IF       3687<<ASSIGN
FILE$KEY.RES
      3530**DCL      3665--ASSIGN
FILE$KEY.UNIQUE.ACCT
      3529**DCL      3658--ASSIGN   3679>>IF       3683<<ASSIGN   3685<<ASSIGN   3690--ASSIGN
FILE$KEY.UNIQUE.FNAME
      3529**DCL      3657--ASSIGN
FILE$KEY.UNIQUE.FNAME.BYTES
      3530**DCL      3680>>IF
FILE$KEY.UNIQUE.FNAME.LENGTH#
      3529**DCL      3680>>IF       3690--ASSIGN   3690>>ASSIGN
FILE_KEY
      3332**DCL        22--PROC     3646<<ASSIGN   3730<<ASSIGN
FILE_KEY.REP#
      3336**DCL      3648<<ASSIGN
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:406  
FILE_KEY.TYPE#
      3336**DCL      3647<<ASSIGN
FILE_KEY.V$
      3336**DCL      3649<>CALL     3651>>ASSIGN
FILE_KEY$
      3431**DCL      3501--IMP-PTR  3651<<ASSIGN   3657>>ASSIGN   3658>>ASSIGN   3659>>ASSIGN   3664>>ASSIGN
      3665>>ASSIGN   3675>>IF       3678>>ASSIGN   3679>>IF       3680>>IF       3680>>IF       3683>>ASSIGN
      3685>>ASSIGN   3686>>IF       3687>>ASSIGN   3690>>ASSIGN   3690>>ASSIGN   3731>>CALL
FPT_FID
      3443**DCL      3653<<ASSIGN   3672<>CALL
FPT_FID.ACCT_
      3444**DCL      3658<<ASSIGN
FPT_FID.ASN_
      3446**DCL      3664<<ASSIGN
FPT_FID.NAME_
      3444**DCL      3657<<ASSIGN
FPT_FID.PASS_
      3444**DCL      3659<<ASSIGN
FPT_FID.RESULTS_
      3446**DCL      3655<<ASSIGN
FPT_FID.RES_
      3446**DCL      3665<<ASSIGN
FPT_FID.SN_
      3445**DCL      3660<<ASSIGN
FPT_FID.TEXTFID_
      3443**DCL      3656<<ASSIGN
FPT_FID.V
      3447**DCL      3654--ASSIGN
FPT_FID.V.SCRUB.SACCT#
      3447**DCL      3667<<ASSIGN
FPT_FID.V.SCRUB.SNAME#
      3447**DCL      3666<<ASSIGN
FPT_FID.V.SCRUB.SPASS#
      3448**DCL      3668<<ASSIGN
FPT_FID.V.SCRUB.SRES#
      3449**DCL      3670<<ASSIGN
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:407  
FPT_FID.V.SCRUB.SSN#
      3448**DCL      3669<<ASSIGN
FPT_FID.V_
      3443**DCL      3654<<ASSIGN
FPT_FID.WSN_
      3445**DCL      3663<<ASSIGN
FREE_OBJECTS
      3730**LABEL    3715--GOTO     3726--GOTO
M$FID
      2459**DCL-ENT  3672--CALL
OALLOC_FAILED
      3725**LABEL    3649--CALLALT  3711--CALLALT  3719--CALLALT
OFREE_FAILED
      3725**LABEL    3731--CALLALT
RANGE
      3346**DCL        22--PROC     3694--IF       3695<<ASSIGN
RANGE.ENDD.EOF
      3404**DCL      3703<<ASSIGN
RANGE.START.KEY
      3372**DCL      3702<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      3627**DCL      3724<<ASSIGN
SUBST$POINTER.V$
      3629**DCL      3725<<ASSIGN
VD$ERR
      3542**DCL      3723--ASSIGN
VD$ERR.ERR
      3579**DCL      3713<<ASSIGN
VD$ERR.ERR.CODE#
      3581**DCL      3721<<ASSIGN
VD$ERR.FLAGLEV#
      3584**DCL      3714<<ASSIGN   3722<<ASSIGN
VDG$OALLOC
      3409**DCL-ENT  3649--CALL     3711--CALL     3719--CALL
VDG$OFREE
      3410**DCL-ENT  3731--CALL
PL6.E3A0      #006=VDE$PFILE_TO_EDIT File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:408  
VD_ERR$
      3481**DCL      3542--IMP-PTR  3711<>CALL     3713>>ASSIGN   3714>>ASSIGN   3719<>CALL     3721>>ASSIGN
      3722>>ASSIGN   3723>>ASSIGN
VD_KEY_NUMERIC_BOF
      3421**DCL      3702>>ASSIGN
VLP_SN
      3466**DCL      3660--ASSIGN   3661<<ASSIGN
VLP_SN.NUM#
      3466**DCL      3662<<ASSIGN
VLP_SN.SN#
      3466**DCL      3678>>ASSIGN
VLP_WSN
      3479**DCL      3663--ASSIGN

PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:409  
     3291        1        /*T***********************************************************/
     3292        2        /*T*                                                         */
     3293        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3294        4        /*T*                                                         */
     3295        5        /*T***********************************************************/
     3296        6
     3297        7        /*D* NAME: VDE$PREAD_LO_NAME
     3298        8            PARAMETERS:
     3299        9                LO_NAME - VD$TEXTC containing the LO-name.
     3300       10                NAME_DESC$ - Uninitialized ptr.
     3301       11                NAME_NODE$ - Optional uninitialized ptr.
     3302       12            INPUT:
     3303       13                LOCATIONS$STREAM - VD$STREAM open to the Locations Name-file.
     3304       14            OUTPUT:
     3305       15                NAME_DESC$ will point to the VD$BLOCK_DESC which is the
     3306       16                    name's value.
     3307       17                NAME_NODE$, if passed, will point to the VD$FILE_NODE for the
     3308       18                    name in the Locations file.
     3309       19                If we can't find the name in the Locations file, or if the
     3310       20                    name has no value currently, we'll build a VD$ERR and
     3311       21                    altreturn.
     3312       22            DESCRIPTION:
     3313       23                Look up the name in the Locations file.  If found, return
     3314       24                a pointer to its VD$BLOCK_DESC.
     3315       25        */
     3316       26
     3317       27        VDE$PREAD_LO_NAME: PROC (LO_NAME, NAME_DESC$, NAME_NODE$) ALTRET;
     3318       28
     3319       29
     3320       30        %INCLUDE VD_MACROS_M;
     3321     2245        %INCLUDE VD_PERR_C;
     3322     2393        %INCLUDE XU_MACRO_C;
     3323     5487        %INCLUDE B$TABLES_C;
     3324     5595
     3325     5596
     3326     5597        %VD$TEXTC (NAME=LO_NAME, STCLASS=PARAM);
     3327     5620    1   DCL NAME_DESC$ PTR;
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:410  
     3328     5621    1   DCL NAME_NODE$ PTR;
     3329     5622
     3330     5623
     3331     5624    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     3332     5625    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3333     5626    1   DCL VDG$ESCREECH        ENTRY (3);
     3334     5627
     3335     5628
     3336     5629        %VD_6E (STCLASS=SYMREF);
     3337     5665        %B$XL_UPPER;
     3338     5669
     3339     5670
     3340     5671        /* UC_NAME is in STATIC in case we need to report an error */
     3341     5672        %VD_TEXTC_REMOTE (NAME=UC_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3342     5735
     3343     5736        /* Since UC_NAME is static, LO_LOC can be constant! */
     3344     5737        %VD_LOCATION (NAME=LO_LOC, STCLASS=CONSTANT, INITS=1,
     3345     5738            ITYPE1=%KT_STRING, IREP1=%REP_REMOTE, IBYTES1=UC_NAME);
     3346     5813
     3347     5814
     3348     5815
     3349     5816    1   DCL PORT_KEY$ PTR;
     3350     5817    1   DCL NAME_DATA$ PTR;
     3351     5818    1   DCL VD_ERR$ PTR;
     3352     5819    1   DCL ERR_SUBST$ PTR;
     3353     5820
     3354     5821
     3355     5822        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     3356     5928        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3357     5951        %VD$OBJECT_HEADER (NAME=NAME$DATA, STCLASS="BASED(NAME_DATA$)");
     3358     5973        %VD$POINTER (NAME=NAME$DATA_POINTER, STCLASS="BASED(NAME_DATA$)");
     3359     6018        %VD$BUFFER (NAME=NAME$DATA_BUFFER, STCLASS="BASED(NAME_DATA$)");
     3360     6076        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3361     6129        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3362     6174        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3363     6219        %VD$TEXTC_REMOTE;
     3364     6280        %VD$PORT;
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:411  
     3365     6378
     3366     6379
     3367     6380
     3368     6381    1           NAME_DESC$ = ADDR(NIL);
     3369     6382    1           UC_NAME = %CLEAR;
     3370     6383    1           UC_NAME.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;
     3371     6384    1           UC_NAME.LENGTH# = LO_NAME.LENGTH#;
     3372     6385    1           CALL XLATE (SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#),
     3373     6386    1             B$XL_UPPER, LO_NAME.BYTES);
     3374     6387    1           CALL VDA$LREAD (LOCATIONS$STREAM, LO_LOC, 0, %TRUE)
     3375     6388    1             ALTRET (LREAD_FAILED);
     3376     6389
     3377     6390                %GETKEY (KEY=LOCATIONS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3378     6391                INDX="%(LVL_EXT_REC-1)", PTR=PORT_KEY$);
     3379     6401    1           NAME_DATA$ = LOCATIONS$STREAM.PORT$ ->
     3380     6402    1             VD$PORT.LEVEL.DATA$ (%LVL_EXT_REC);
     3381     6403    1           IF PORT$KEY.BYTES ~= SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#)
     3382     6404    1             OR NAME_DATA$ = ADDR(NIL) THEN
     3383     6405    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3384     6406    1           IF ADDR(NAME_NODE$) ~= ADDR(NIL) THEN
     3385     6407    1              NAME_NODE$ = LOCATIONS$STREAM.PORT$ ->
     3386     6408    1                VD$PORT.LEVEL.INTERNAL$ (%LVL_EXT_REC);
     3387     6409
     3388     6410    2           DO CASE (NAME$DATA.CLASS#);
     3389     6411    2            CASE (%CLS_PTR_BLOCK_DESC);
     3390     6412    2              NAME_DESC$ = NAME$DATA_POINTER.V$;
     3391     6413    2            CASE (%CLS_BLOCK_BUFFER);
     3392     6414    2              NAME_DESC$ = PALIGNW(ADDR(NAME$DATA_BUFFER.BYTES));
     3393     6415    2            CASE (ELSE);
     3394     6416    2              CALL VDG$ESCREECH (NAME$DATA.CLASS#);
     3395     6417    2            END;
     3396     6418
     3397     6419    1           IF NAME_DESC$ = ADDR(NIL) THEN
     3398     6420    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3399     6421
     3400     6422    1           RETURN;
     3401     6423
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:412  
     3402     6424
     3403     6425
     3404     6426    1   NAME_HAS_NO_VALUE_FAILURE:
     3405     6427    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3406     6428    1             ALTRET (OALLOC_FAILED);
     3407     6429    1           VD$ERR.ERR.CODE# = %E$NAME_HAS_NO_VALUE;
     3408     6430    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3409     6431    1           ERR_SUBST$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));
     3410     6432    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
     3411     6433    1           SUBST$POINTER.V$ (0) = ADDR(UC_NAME.LENGTH#);
     3412     6434    1           SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;
     3413     6435    1           SUBST$NUMBER.V# (1) = %NDT_LOCATION;
     3414     6436    1           ALTRETURN;
     3415     6437
     3416     6438
     3417     6439    1   LREAD_FAILED: ;
     3418     6440    1   OALLOC_FAILED: ;
     3419     6441    1           ALTRETURN;
     3420     6442
     3421     6443    1   END VDE$PREAD_LO_NAME;
     3422     6444        %EOD;

PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:413  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PREAD_LO_NAME.

   Procedure VDE$PREAD_LO_NAME requires 154 words for executable code.
   Procedure VDE$PREAD_LO_NAME requires 14 words of local(AUTO) storage.

PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:414  

 Object Unit name= VDE$PREAD_LO_NAME                          File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:15:53.96 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    10     12  VDE$PREAD_LO_NAME
    1  RoData even  UTS      9     11  VDE$PREAD_LO_NAME
    2   Proc  even  none   154    232  VDE$PREAD_LO_NAME
    3  RoData even  none     8     10  VDE$PREAD_LO_NAME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        3  VDE$PREAD_LO_NAME

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       4 VDA$LREAD
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:415  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                            r    B$XL_UPPER$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:416  


     3291        1        /*T***********************************************************/
     3292        2        /*T*                                                         */
     3293        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3294        4        /*T*                                                         */
     3295        5        /*T***********************************************************/
     3296        6
     3297        7        /*D* NAME: VDE$PREAD_LO_NAME
     3298        8            PARAMETERS:
     3299        9                LO_NAME - VD$TEXTC containing the LO-name.
     3300       10                NAME_DESC$ - Uninitialized ptr.
     3301       11                NAME_NODE$ - Optional uninitialized ptr.
     3302       12            INPUT:
     3303       13                LOCATIONS$STREAM - VD$STREAM open to the Locations Name-file.
     3304       14            OUTPUT:
     3305       15                NAME_DESC$ will point to the VD$BLOCK_DESC which is the
     3306       16                    name's value.
     3307       17                NAME_NODE$, if passed, will point to the VD$FILE_NODE for the
     3308       18                    name in the Locations file.
     3309       19                If we can't find the name in the Locations file, or if the
     3310       20                    name has no value currently, we'll build a VD$ERR and
     3311       21                    altreturn.
     3312       22            DESCRIPTION:
     3313       23                Look up the name in the Locations file.  If found, return
     3314       24                a pointer to its VD$BLOCK_DESC.
     3315       25        */
     3316       26
     3317       27        VDE$PREAD_LO_NAME: PROC (LO_NAME, NAME_DESC$, NAME_NODE$) ALTRET;

     27  2 000000   000000 700200 xent  VDE$PREAD_L* TSX0  ! X66_AUTO_3
         2 000001   000016 000003                    ZERO    14,3

     3318       28
     3319       29
     3320       30        %INCLUDE VD_MACROS_M;
     3321     2245        %INCLUDE VD_PERR_C;
     3322     2393        %INCLUDE XU_MACRO_C;
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:417  
     3323     5487        %INCLUDE B$TABLES_C;
     3324     5595
     3325     5596
     3326     5597        %VD$TEXTC (NAME=LO_NAME, STCLASS=PARAM);
     3327     5620    1   DCL NAME_DESC$ PTR;
     3328     5621    1   DCL NAME_NODE$ PTR;
     3329     5622
     3330     5623
     3331     5624    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     3332     5625    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3333     5626    1   DCL VDG$ESCREECH        ENTRY (3);
     3334     5627
     3335     5628
     3336     5629        %VD_6E (STCLASS=SYMREF);
     3337     5665        %B$XL_UPPER;
     3338     5669
     3339     5670
     3340     5671        /* UC_NAME is in STATIC in case we need to report an error */
     3341     5672        %VD_TEXTC_REMOTE (NAME=UC_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3342     5735
     3343     5736        /* Since UC_NAME is static, LO_LOC can be constant! */
     3344     5737        %VD_LOCATION (NAME=LO_LOC, STCLASS=CONSTANT, INITS=1,
     3345     5738            ITYPE1=%KT_STRING, IREP1=%REP_REMOTE, IBYTES1=UC_NAME);
     3346     5813
     3347     5814
     3348     5815
     3349     5816    1   DCL PORT_KEY$ PTR;
     3350     5817    1   DCL NAME_DATA$ PTR;
     3351     5818    1   DCL VD_ERR$ PTR;
     3352     5819    1   DCL ERR_SUBST$ PTR;
     3353     5820
     3354     5821
     3355     5822        %VD$STREAM (NAME=LOCATIONS$STREAM, STCLASS="BASED(VD_6E.LOCATIONS$)");
     3356     5928        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3357     5951        %VD$OBJECT_HEADER (NAME=NAME$DATA, STCLASS="BASED(NAME_DATA$)");
     3358     5973        %VD$POINTER (NAME=NAME$DATA_POINTER, STCLASS="BASED(NAME_DATA$)");
     3359     6018        %VD$BUFFER (NAME=NAME$DATA_BUFFER, STCLASS="BASED(NAME_DATA$)");
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:418  
     3360     6076        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3361     6129        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3362     6174        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
     3363     6219        %VD$TEXTC_REMOTE;
     3364     6280        %VD$PORT;
     3365     6378
     3366     6379
     3367     6380
     3368     6381    1           NAME_DESC$ = ADDR(NIL);

   6381  2 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000003   200004 470500                    LDP0    @NAME_DESC$,,AUTO
         2 000004   000000 756100                    STQ     0,,PR0

     3369     6382    1           UC_NAME = %CLEAR;

   6382  2 000005   000000 100400                    MLR     fill='000'O
         2 000006   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000007   000000 000050 0                  ADSC9   UC_NAME                  cn=0,n=40

     3370     6383    1           UC_NAME.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;

   6383  2 000010   000053 220003                    LDX0    43,DU
         2 000011   000000 740000 0                  STX0    UC_NAME

     3371     6384    1           UC_NAME.LENGTH# = LO_NAME.LENGTH#;

   6384  2 000012   200003 471500                    LDP1    @LO_NAME,,AUTO
         2 000013   100000 236100                    LDQ     0,,PR1
         2 000014   000002 552040 0                  STBQ    UC_NAME+2,'40'O

     3372     6385    1           CALL XLATE (SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#),

   6385  2 000015   000002 236000 0                  LDQ     UC_NAME+2
         2 000016   000033 772000                    QRL     27
         2 000017   000000 621006                    EAX1    0,QL
         2 000020   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:419  
         2 000021   000033 772000                    QRL     27
         2 000022   000000 622006                    EAX2    0,QL
         2 000023   000000 473400 xsym               LDP3    B$XL_UPPER$
         2 000024   040040 160540                    MVT     fill='040'O
         2 000025   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         2 000026   000002 200011 0                  ADSC9   UC_NAME+2                cn=1,n=*X1
         2 000027   300000 000100                    ARG     0,,PR3

     3373     6386    1             B$XL_UPPER, LO_NAME.BYTES);
     3374     6387    1           CALL VDA$LREAD (LOCATIONS$STREAM, LO_LOC, 0, %TRUE)

   6387  2 000030   000000 237000 3                  LDAQ    0
         2 000031   200014 757100                    STAQ    ERR_SUBST$+3,,AUTO
         2 000032   000002 236000 3                  LDQ     2
         2 000033   000002 235000 xsym               LDA     VD_6E+2
         2 000034   200012 757100                    STAQ    ERR_SUBST$+1,,AUTO
         2 000035   200012 630500                    EPPR0   ERR_SUBST$+1,,AUTO
         2 000036   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000037   000000 701000 xent               TSX1    VDA$LREAD
         2 000040   000231 702000 2                  TSX2    LREAD_FAILED

     3375     6388    1             ALTRET (LREAD_FAILED);
     3376     6389
     3377     6390                %GETKEY (KEY=LOCATIONS$STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3378     6391                INDX="%(LVL_EXT_REC-1)", PTR=PORT_KEY$);

   6398  2 000041   000002 470400 xsym               LDP0    VD_6E+2
         2 000042   000001 471500                    LDP1    1,,PR0
         2 000043   100012 720100                    LXL0    10,,PR1
         2 000044   000002 100003                    CMPX0   2,DU
         2 000045   000052 601000 2                  TNZ     s:6398+9

   6398  2 000046   100013 473500                    LDP3    11,,PR1
         2 000047   300002 634500                    EPPR4   2,,PR3
         2 000050   200006 454500                    STP4    PORT_KEY$,,AUTO
         2 000051   000054 710000 2                  TRA     s:6401

PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:420  
   6398  2 000052   100013 633500                    EPPR3   11,,PR1
         2 000053   200006 453500                    STP3    PORT_KEY$,,AUTO

     3379     6401    1           NAME_DATA$ = LOCATIONS$STREAM.PORT$ ->

   6401  2 000054   100036 236100                    LDQ     30,,PR1
         2 000055   200007 756100                    STQ     NAME_DATA$,,AUTO

     3380     6402    1             VD$PORT.LEVEL.DATA$ (%LVL_EXT_REC);
     3381     6403    1           IF PORT$KEY.BYTES ~= SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#)

   6403  2 000056   200006 473500                    LDP3    PORT_KEY$,,AUTO
         2 000057   300000 236100                    LDQ     0,,PR3
         2 000060   000033 772000                    QRL     27
         2 000061   000000 621006                    EAX1    0,QL
         2 000062   000002 236000 0                  LDQ     UC_NAME+2
         2 000063   000033 772000                    QRL     27
         2 000064   000000 622006                    EAX2    0,QL
         2 000065   040040 106540                    CMPC    fill='040'O
         2 000066   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 000067   000002 200012 0                  ADSC9   UC_NAME+2                cn=1,n=*X2
         2 000070   000174 601000 2                  TNZ     NAME_HAS_NO_VALUE_FAILURE
         2 000071   200007 236100                    LDQ     NAME_DATA$,,AUTO
         2 000072   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000073   000174 600000 2                  TZE     NAME_HAS_NO_VALUE_FAILURE

     3382     6404    1             OR NAME_DATA$ = ADDR(NIL) THEN
     3383     6405    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3384     6406    1           IF ADDR(NAME_NODE$) ~= ADDR(NIL) THEN

   6406  2 000074   200005 236100                    LDQ     @NAME_NODE$,,AUTO
         2 000075   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000076   000102 600000 2                  TZE     s:6410

     3385     6407    1              NAME_NODE$ = LOCATIONS$STREAM.PORT$ ->

   6407  2 000077   100040 236100                    LDQ     32,,PR1
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:421  
         2 000100   200005 474500                    LDP4    @NAME_NODE$,,AUTO
         2 000101   400000 756100                    STQ     0,,PR4

     3386     6408    1                VD$PORT.LEVEL.INTERNAL$ (%LVL_EXT_REC);
     3387     6409
     3388     6410    2           DO CASE (NAME$DATA.CLASS#);

   6410  2 000102   200007 470500                    LDP0    NAME_DATA$,,AUTO
         2 000103   000000 220100                    LDX0    0,,PR0
         2 000104   000041 100003                    CMPX0   33,DU
         2 000105   000107 602010 2                  TNC     s:6410+5,X0
         2 000106   000163 710000 2                  TRA     s:6416
         2 000107   000163 710000 2                  TRA     s:6416
         2 000110   000154 710000 2                  TRA     s:6414
         2 000111   000163 710000 2                  TRA     s:6416
         2 000112   000163 710000 2                  TRA     s:6416
         2 000113   000163 710000 2                  TRA     s:6416
         2 000114   000163 710000 2                  TRA     s:6416
         2 000115   000163 710000 2                  TRA     s:6416
         2 000116   000163 710000 2                  TRA     s:6416
         2 000117   000163 710000 2                  TRA     s:6416
         2 000120   000163 710000 2                  TRA     s:6416
         2 000121   000163 710000 2                  TRA     s:6416
         2 000122   000163 710000 2                  TRA     s:6416
         2 000123   000163 710000 2                  TRA     s:6416
         2 000124   000163 710000 2                  TRA     s:6416
         2 000125   000163 710000 2                  TRA     s:6416
         2 000126   000163 710000 2                  TRA     s:6416
         2 000127   000163 710000 2                  TRA     s:6416
         2 000130   000163 710000 2                  TRA     s:6416
         2 000131   000163 710000 2                  TRA     s:6416
         2 000132   000163 710000 2                  TRA     s:6416
         2 000133   000163 710000 2                  TRA     s:6416
         2 000134   000163 710000 2                  TRA     s:6416
         2 000135   000163 710000 2                  TRA     s:6416
         2 000136   000163 710000 2                  TRA     s:6416
         2 000137   000163 710000 2                  TRA     s:6416
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:422  
         2 000140   000163 710000 2                  TRA     s:6416
         2 000141   000163 710000 2                  TRA     s:6416
         2 000142   000163 710000 2                  TRA     s:6416
         2 000143   000163 710000 2                  TRA     s:6416
         2 000144   000163 710000 2                  TRA     s:6416
         2 000145   000163 710000 2                  TRA     s:6416
         2 000146   000163 710000 2                  TRA     s:6416
         2 000147   000150 710000 2                  TRA     s:6412

     3389     6411    2            CASE (%CLS_PTR_BLOCK_DESC);

     3390     6412    2              NAME_DESC$ = NAME$DATA_POINTER.V$;

   6412  2 000150   000003 236100                    LDQ     3,,PR0
         2 000151   200004 471500                    LDP1    @NAME_DESC$,,AUTO
         2 000152   100000 756100                    STQ     0,,PR1
         2 000153   000167 710000 2                  TRA     s:6419

     3391     6413    2            CASE (%CLS_BLOCK_BUFFER);

     3392     6414    2              NAME_DESC$ = PALIGNW(ADDR(NAME$DATA_BUFFER.BYTES));

   6414  2 000154   200007 236100                    LDQ     NAME_DATA$,,AUTO
         2 000155   000003 036000 3                  ADLQ    3
         2 000156   770000 036007                    ADLQ    -4096,DL
         2 000157   000004 376000 3                  ANQ     4
         2 000160   200004 471500                    LDP1    @NAME_DESC$,,AUTO
         2 000161   100000 756100                    STQ     0,,PR1
         2 000162   000167 710000 2                  TRA     s:6419

     3393     6415    2            CASE (ELSE);

     3394     6416    2              CALL VDG$ESCREECH (NAME$DATA.CLASS#);

   6416  2 000163   200007 630500                    EPPR0   NAME_DATA$,,AUTO
         2 000164   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000165   000000 701000 xent               TSX1    VDG$ESCREECH
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:423  
         2 000166   000000 011000                    NOP     0

     3395     6417    2            END;

     3396     6418
     3397     6419    1           IF NAME_DESC$ = ADDR(NIL) THEN

   6419  2 000167   200004 470500                    LDP0    @NAME_DESC$,,AUTO
         2 000170   000000 236100                    LDQ     0,,PR0
         2 000171   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000172   000174 600000 2                  TZE     NAME_HAS_NO_VALUE_FAILURE

     3398     6420    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3399     6421
     3400     6422    1           RETURN;

   6422  2 000173   000000 702200 xent               TSX2  ! X66_ARET

     3401     6423
     3402     6424
     3403     6425
     3404     6426    1   NAME_HAS_NO_VALUE_FAILURE:
     3405     6427    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   6427  2 000174   200010 630500       NAME_HAS_NO* EPPR0   VD_ERR$,,AUTO
         2 000175   200013 450500                    STP0    ERR_SUBST$+2,,AUTO
         2 000176   000005 236000 3                  LDQ     5
         2 000177   200012 756100                    STQ     ERR_SUBST$+1,,AUTO
         2 000200   200012 630500                    EPPR0   ERR_SUBST$+1,,AUTO
         2 000201   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000202   000000 701000 xent               TSX1    VDG$OALLOC
         2 000203   000231 702000 2                  TSX2    LREAD_FAILED

     3406     6428    1             ALTRET (OALLOC_FAILED);
     3407     6429    1           VD$ERR.ERR.CODE# = %E$NAME_HAS_NO_VALUE;

   6429  2 000204   200010 470500                    LDP0    VD_ERR$,,AUTO
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:424  
         2 000205   000002 236100                    LDQ     2,,PR0
         2 000206   000006 376000 3                  ANQ     6
         2 000207   001520 276007                    ORQ     848,DL
         2 000210   000002 756100                    STQ     2,,PR0

     3408     6430    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   6430  2 000211   000003 220003                    LDX0    3,DU
         2 000212   200010 470500                    LDP0    VD_ERR$,,AUTO
         2 000213   000003 740100                    STX0    3,,PR0

     3409     6431    1           ERR_SUBST$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));

   6431  2 000214   200010 236100                    LDQ     VD_ERR$,,AUTO
         2 000215   000005 036003                    ADLQ    5,DU
         2 000216   200011 756100                    STQ     ERR_SUBST$,,AUTO

     3410     6432    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   6432  2 000217   000045 221003                    LDX1    37,DU
         2 000220   200011 470500                    LDP0    ERR_SUBST$,,AUTO
         2 000221   000000 741100                    STX1    0,,PR0

     3411     6433    1           SUBST$POINTER.V$ (0) = ADDR(UC_NAME.LENGTH#);

   6433  2 000222   000007 236000 3                  LDQ     7
         2 000223   000003 756100                    STQ     3,,PR0

     3412     6434    1           SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;

   6434  2 000224   000031 222003                    LDX2    25,DU
         2 000225   000004 742100                    STX2    4,,PR0

     3413     6435    1           SUBST$NUMBER.V# (1) = %NDT_LOCATION;

   6435  2 000226   000002 235007                    LDA     2,DL
         2 000227   000007 755100                    STA     7,,PR0
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:425  

     3414     6436    1           ALTRETURN;

   6436  2 000230   000000 702200 xent               TSX2  ! X66_AALT

   6435  2 000231                       LREAD_FAILED null
   6435  2 000231                       OALLOC_FAIL* null
     3415     6437
     3416     6438
     3417     6439    1   LREAD_FAILED: ;
     3418     6440    1   OALLOC_FAILED: ;
     3419     6441    1           ALTRETURN;

   6441  2 000231   000000 702200 xent               TSX2  ! X66_AALT
     3420     6442
     3421     6443    1   END VDE$PREAD_LO_NAME;
     3422     6444        %EOD;

PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:426  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PREAD_LO_NAME.
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:427  

 **** Variables and constants ****

  ****  Section 000  Data  VDE$PREAD_LO_NAME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(360)   r     1 UC_NAME

  ****  Section 001 RoData VDE$PREAD_LO_NAME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 LO_LOC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @LO_NAME                   4-0-0/w PTR         r     1 @NAME_DESC$
     5-0-0/w PTR         r     1 @NAME_NODE$               11-0-0/w PTR         r     1 ERR_SUBST$
    *0-0-0/w ASTR(9)     r     1 LO_NAME                    7-0-0/w PTR         r     1 NAME_DATA$
    *0-0-0/w PTR         r     1 NAME_DESC$                *0-0-0/w PTR         r     1 NAME_NODE$
     6-0-0/w PTR         r     1 PORT_KEY$                 10-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:428  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$XL_UPPER                 0-0-0/w STRC(864)   r     1 LOCATIONS$STREAM
     0-0-0/w STRC        r     1 NAME$DATA                  0-0-0/w ASTR(90)    r     1 NAME$DATA_BUFFER
     0-0-0/w STRC(144)   r     1 NAME$DATA_POINTER          0-0-0/w ASTR(9)     r     1 PORT$KEY
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDE$PREAD_LO_NAME requires 154 words for executable code.
   Procedure VDE$PREAD_LO_NAME requires 14 words of local(AUTO) storage.
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:429  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:430  
          MINI XREF LISTING

B$XL_UPPER
      5667**DCL      6385>>CALLBLT
B$XL_UPPER$
      5666**DCL      5667--IMP-PTR  6385>>CALLBLT
ERR_SUBST$
      5819**DCL      6137--IMP-PTR  6190--IMP-PTR  6431<<ASSIGN   6432>>ASSIGN   6433>>ASSIGN   6434>>ASSIGN
      6435>>ASSIGN
LOCATIONS$STREAM
      5830**DCL      6387<>CALL
LOCATIONS$STREAM.PORT$
      5856**DCL      6398>>IF       6398>>ASSIGN   6398>>ASSIGN   6401>>ASSIGN   6407>>ASSIGN
LO_LOC
      5749**DCL      6387<>CALL
LO_NAME
      5605**DCL        27--PROC
LO_NAME.BYTES
      5615**DCL      6385>>CALLBLT
LO_NAME.LENGTH#
      5613**DCL      5615--IMP-SIZ  6384>>ASSIGN   6385>>CALLBLT
LREAD_FAILED
      6435**LABEL    6387--CALLALT
NAME$DATA.CLASS#
      5971**DCL      6410>>DOCASE   6416<>CALL
NAME$DATA_BUFFER.BYTES
      6071**DCL      6414--ASSIGN
NAME$DATA_BUFFER.LENGTH#
      6069**DCL      6071--IMP-SIZ
NAME$DATA_POINTER.V$
      6015**DCL      6412>>ASSIGN
NAME_DATA$
      5817**DCL      5967--IMP-PTR  5989--IMP-PTR  6043--IMP-PTR  6401<<ASSIGN   6403>>IF       6410>>DOCASE
      6412>>ASSIGN   6414>>ASSIGN   6416>>CALL
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:431  
NAME_DESC$
      5620**DCL        27--PROC     6381<<ASSIGN   6412<<ASSIGN   6414<<ASSIGN   6419>>IF
NAME_HAS_NO_VALUE_FAILURE
      6427**LABEL    6405--GOTO     6420--GOTO
NAME_NODE$
      5621**DCL        27--PROC     6406--IF       6407<<ASSIGN
OALLOC_FAILED
      6435**LABEL    6427--CALLALT
PORT$KEY.BYTES
      5946**DCL      6403>>IF
PORT$KEY.LENGTH#
      5944**DCL      5946--IMP-SIZ  6403>>IF
PORT_KEY$
      5816**DCL      5936--IMP-PTR  6398<<ASSIGN   6398<<ASSIGN   6403>>IF       6403>>IF
SUBST$NUMBER.OBJECT.CLASS#
      6169**DCL      6434<<ASSIGN
SUBST$NUMBER.V#
      6171**DCL      6435<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      6214**DCL      6432<<ASSIGN
SUBST$POINTER.V$
      6216**DCL      6433<<ASSIGN
UC_NAME
      5698**DCL      5789--DCLINIT  6382<<ASSIGN
UC_NAME.BYTES
      5731**DCL      6385<<CALLBLT  6403>>IF
UC_NAME.LENGTH#
      5727**DCL      6384<<ASSIGN   6385>>CALLBLT  6403>>IF       6433--ASSIGN
UC_NAME.OBJECT.CLASS#
      5725**DCL      6383<<ASSIGN
VD$ERR
      6084**DCL      6431--ASSIGN
VD$ERR.ERR.CODE#
      6123**DCL      6429<<ASSIGN
VD$ERR.FLAGLEV#
      6126**DCL      6430<<ASSIGN
PL6.E3A0      #007=VDE$PREAD_LO_NAME File=VDE$PARSE.:VDA5TSI                     FRI 07/04/97 11:15 Page:432  
VD$PORT.CURRENT.KEY.REP#
      6355**DCL      6398>>IF
VD$PORT.CURRENT.KEY.V$
      6355**DCL      6398>>ASSIGN   6398--ASSIGN
VD$PORT.LEVEL.DATA$
      6375**DCL      6401>>ASSIGN
VD$PORT.LEVEL.INTERNAL$
      6375**DCL      6407>>ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      6273**DCL      6275--IMP-SIZ  6398--ASSIGN
VDA$LREAD
      5624**DCL-ENT  6387--CALL
VDG$ESCREECH
      5626**DCL-ENT  6416--CALL
VDG$OALLOC
      5625**DCL-ENT  6427--CALL
VD_6E.LOCATIONS$
      5642**DCL      5830--IMP-PTR  6387>>CALL     6398>>IF       6398>>ASSIGN   6398>>ASSIGN   6401>>ASSIGN
      6407>>ASSIGN
VD_ERR$
      5818**DCL      6084--IMP-PTR  6427<>CALL     6429>>ASSIGN   6430>>ASSIGN   6431>>ASSIGN

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:433  
     3423        1        /*T***********************************************************/
     3424        2        /*T*                                                         */
     3425        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3426        4        /*T*                                                         */
     3427        5        /*T***********************************************************/
     3428        6
     3429        7        /*D* NAME: VDE$PREAD_NAME_FOR_EVAL
     3430        8            PARAMETERS:
     3431        9                VARPARAM - An XUE_VARPARAM structure for the name to find.
     3432       10            INPUT:
     3433       11            OUTPUT:
     3434       12                If the name is found:
     3435       13                    VARPARAM.VALUE$'s buffer will contain a TEXTC string
     3436       14                        representing the name's value.
     3437       15                If the name is not found:
     3438       16                    VARPARAM.ERR.CODE will be set, and a VD$ERR will be
     3439       17                        pushed onto the error chain specifying the error.
     3440       18            DESCRIPTION:
     3441       19                Force the name to upper-case.
     3442       20                Read for the name in each of the Names files--well, some
     3443       21                    of them, anyway.  We'll never see Keyins or Synonyms
     3444       22                    at this point, so just look in Equals and Locations.
     3445       23                    If the name is a Location name, build a string which is a textual
     3446       24                    description of the location-name's block location, and return
     3447       25                    this as the name's value.
     3448       26                    For now, if the name appears in the location file,
     3449       27                    return an error.
     3450       28        */
     3451       29
     3452       30        VDE$PREAD_NAME_FOR_EVAL: PROC (VARPARAM) ALTRET;
     3453       31
     3454       32
     3455       33        %INCLUDE VD_MACROS_M;
     3456     2248        %INCLUDE VD_PERR_C;
     3457     2396        %INCLUDE XUE_MACRO_C;
     3458     3140        %INCLUDE XUE_SUBS_C;
     3459     3320        %INCLUDE B$TABLES_C;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:434  
     3460     3428
     3461     3429
     3462     3430        %XUE_VARPARAM (NAME=VARPARAM, STCLASS="");
     3463     3532
     3464     3533
     3465     3534    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     3466     3535    1   DCL VDG$FORMAT_NUMBER   ENTRY (6);
     3467     3536    1   DCL VDG$FORMAT_BLOCK_DESC ENTRY (5);
     3468     3537    1   DCL VDG$FORMAT_KEY      ENTRY (5);
     3469     3538    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3470     3539    1   DCL VDG$ESCREECH        ENTRY (3);
     3471     3540
     3472     3541
     3473     3542        %VD_6E (STCLASS=SYMREF);
     3474     3578        %B$XL_UPPER;
     3475     3582        %VD$NUMBER (NAME=VD_$$INCANTATION, STCLASS=SYMREF);
     3476     3627
     3477     3628
     3478     3629        /* UC_NAME is in STATIC in case we need to report an error */
     3479     3630        %VD_TEXTC_REMOTE (NAME=UC_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3480     3693
     3481     3694        /* Since UC_NAME is static, NAME_LOC can be constant! */
     3482     3695        %VD_LOCATION (NAME=NAME_LOC, STCLASS=CONSTANT, INITS=1,
     3483     3696            ITYPE1=%KT_STRING, IREP1=%REP_REMOTE, IBYTES1=UC_NAME);
     3484     3771
     3485     3772
     3486     3773
     3487     3774    1   DCL PORT_KEY$ PTR;
     3488     3775    1   DCL FILE_NODE$ PTR;
     3489     3776    1   DCL NAME_VALUE$ PTR;
     3490     3777    1   DCL NDT SBIN;
     3491     3778    1   DCL NB_VALUE SBIN;
     3492     3779    1   DCL NODE_KEY$ PTR;
     3493     3780    1   DCL BLOCK_DESC$ PTR;
     3494     3781    1   DCL VD_ERR$ PTR;
     3495     3782    1   DCL SUBST_FIELD$ PTR;
     3496     3783    1   DCL STREAM$ PTR;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:435  
     3497     3784
     3498     3785
     3499     3786        %VD$STREAM (NAME=STREAM, STCLASS="BASED(STREAM$)");
     3500     3892        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3501     3915        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     3502     4008        %VD$TEXTC (NAME=VARPARAM$VALUE, STCLASS="BASED(VARPARAM.VALUE$)");
     3503     4031        %VD$BUFFER (NAME=NAME$VALUE, STCLASS="BASED(NAME_VALUE$)");
     3504     4089        %VD$NUMBER (NAME=NAME$NUMBER, STCLASS="BASED(NAME_VALUE$)");
     3505     4134        %VD$POINTER (NAME=NAME$POINTER, STCLASS="BASED(NAME_VALUE$)");
     3506     4179        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
     3507     4202        %VD$BLOCK_DESC (NAME=BLOCK$DESC, STCLASS="BASED(BLOCK_DESC$)");
     3508     4349        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3509     4402        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     3510     4447        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     3511     4492        %VD$PORT;
     3512     4590        %VD$TEXTC_REMOTE;
     3513     4651        %VD$BUFFER_HEADER;
     3514     4687        %VD$KEY;
     3515     4701        %VD$TEXTC;
     3516     4724        %VD$FILE_NODE;
     3517     4817        %XUE_FUNPARAM (NAME=FUNPARAM, STCLASS=BASED);
     3518     4921        %XUE_OPTION (NAME=XUE$OPTION, STCLASS=BASED);
     3519     4977
     3520     4978
     3521     4979
     3522     4980    1           IF VARPARAM.CODE#~=%XUE_FETCH# THEN RETURN;
     3523     4981
     3524     4982    1           UC_NAME = %CLEAR;
     3525     4983    1           UC_NAME.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;
     3526     4984    1           UC_NAME.LENGTH# = VARPARAM.VARIABLE.COUNT#;
     3527     4985    1           CALL XLATE (SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#),
     3528     4986    1             B$XL_UPPER, VARPARAM.VARIABLE.TEXT#);
     3529     4987    1           GOTO COMMON;
     3530     4988        %EJECT;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:436  
     3531     4989        /*D* NAME: VDE$PREAD_NAME_FOR_FUNCTION
     3532     4990            PARAMETERS:
     3533     4991                FUNPARAM - An XUE_FUNPARAM structure for the name to find.
     3534     4992                           The (single) option contains the name.
     3535     4993            INPUT:
     3536     4994            OUTPUT:
     3537     4995                If the name is found:
     3538     4996                    FUNPARAM.OUT$'s buffer will contain a TEXTC string
     3539     4997                        representing the name's value.
     3540     4998                If the name is not found:
     3541     4999                    FUNPARAM.ERR.CODE will be set, and a VD$ERR will be
     3542     5000                        pushed onto the error chain specifying the error.
     3543     5001            DESCRIPTION:
     3544     5002                Force the name to uppercase.
     3545     5003                Read for the name in each of the Names files--well, some
     3546     5004                    of them, anyway.  We'll never see Keyins or Synonyms
     3547     5005                    at this point, so just look in Equals and Locations.
     3548     5006                    If the name is a Location name, build a string which is a textual
     3549     5007                    description of the location-name's block location, and return
     3550     5008                    this as the name's value.
     3551     5009                    For now, if the name appears in the location file,
     3552     5010                    return an error.
     3553     5011        */
     3554     5012
     3555     5013    1   VDE$PREAD_NAME_FOR_FUNCTION: ENTRY (VARPARAM) ALTRET;
     3556     5014
     3557     5015    1           UC_NAME.LENGTH# =
     3558     5016    1             ADDR(VARPARAM) -> FUNPARAM.OPTION$(0) -> XUE$OPTION.COUNT#;
     3559     5017    1           CALL XLATE (UC_NAME.BYTES, B$XL_UPPER,
     3560     5018    1             ADDR(VARPARAM) -> FUNPARAM.OPTION$(0) -> XUE$OPTION.TEXT#);
     3561     5019
     3562     5020    1   COMMON: ;
     3563     5021                %INCREMENT (INDX=%STG_NAME_READS);
     3564     5024    1           NDT = %NDT_EQUALS;
     3565     5025    1           STREAM$ = VD_6E.EQUALS$;
     3566     5026    1           NAME_VALUE$ = ADDR(NIL);
     3567     5027
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:437  
     3568     5028                /*
     3569     5029                *   Look for the name in the Equals file.
     3570     5030                */
     3571     5031    2   LOOKUP_NAME: DO WHILE '1'B;
     3572     5032    2              CALL VDA$LREAD (STREAM, NAME_LOC, 0, %TRUE)
     3573     5033    2                ALTRET (LREAD_FAILED);
     3574     5034
     3575     5035                   %GETKEY (KEY=STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3576     5036                   INDX=%LVL_LOWER-1, PTR=PORT_KEY$);
     3577     5046    2              IF PORT$KEY.BYTES =
     3578     5047    2                SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#) THEN
     3579     5048    3   FOUND_THE_NAME: DO;
     3580     5049    3                 FILE_NODE$ = STREAM.PORT$ ->
     3581     5050    3                   VD$PORT.LEVEL.INTERNAL$ (%LVL_LOWER);
     3582     5051    4                 IF FILE_NODE$ ~= ADDR(NIL) THEN DO;
     3583     5052    4                    IF (NOT FILE$NODE.ACCESS (%NAC_READ))
     3584     5053    4                      AND VD_$$INCANTATION.V# <= 0 THEN
     3585     5054    4                       GOTO CANT_ACCESS_NODE_FAILURE;
     3586     5055    4                    END;
     3587     5056    3                 NAME_VALUE$ = STREAM.PORT$ ->
     3588     5057    3                   VD$PORT.LEVEL.DATA$ (%LVL_LOWER);
     3589     5058    3                 EXIT LOOKUP_NAME;
     3590     5059    3                 END FOUND_THE_NAME;
     3591     5060    2              ELSE
     3592     5061    3   TRY_LOCATIONS_FILE: DO;
     3593     5062                   /*
     3594     5063                   *   Look for the name in the Locations file.
     3595     5064                   */
     3596     5065    4                 IF NDT = %NDT_LOCATION THEN DO;
     3597     5066    4                    NDT = 0;
     3598     5067    4                    GOTO NAME_HAS_NO_VALUE_FAILURE;
     3599     5068    4                    END;
     3600     5069    3                 STREAM$ = VD_6E.LOCATIONS$;
     3601     5070    3                 NDT = %NDT_LOCATION;
     3602     5071    3                 END TRY_LOCATIONS_FILE;
     3603     5072    2              END LOOKUP_NAME;
     3604     5073
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:438  
     3605     5074    1           IF NAME_VALUE$ = ADDR(NIL) THEN
     3606     5075    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3607     5076
     3608     5077    1           VARPARAM$VALUE.LENGTH# = %MXNB_NAME_VALUE;
     3609     5078    2           DO CASE (NAME$VALUE.OBJECT.CLASS#);
     3610     5079    2            CASE (%CLS_BUFFER, %CLS_FILE_STCLASS);
     3611     5080    2              VARPARAM$VALUE.LENGTH# = MINIMUM (%MXNB_NAME_VALUE,
     3612     5081    2                NAME$VALUE.LENGTH#);
     3613     5082    2              VARPARAM$VALUE.BYTES = NAME$VALUE.BYTES;
     3614     5083
     3615     5084    2            CASE (%CLS_BLOCK_BUFFER, %CLS_PTR_BLOCK_DESC);
     3616     5085    2              IF NAME$VALUE.OBJECT.CLASS# = %CLS_PTR_BLOCK_DESC THEN
     3617     5086    2                 BLOCK_DESC$ = NAME$POINTER.V$;
     3618     5087    2              ELSE
     3619     5088    2                 BLOCK_DESC$ = PINCRW(NAME_VALUE$, SIZEW(VD$BUFFER_HEADER));
     3620     5089    2              CALL VDG$FORMAT_BLOCK_DESC (BLOCK$DESC, %MXNB_NAME_VALUE,
     3621     5090    2                VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3622     5091    2              VARPARAM$VALUE.LENGTH# = NB_VALUE;
     3623     5092
     3624     5093                /*
     3625     5094                *  Value is binary or structured:  translate to ASCII.
     3626     5095                *  Note that boolean and enumerated object-classes will be
     3627     5096                *    translated into their numbers; however, structured
     3628     5097                *    object-classes will be translated into textual descriptions.
     3629     5098                */
     3630     5099
     3631     5100    2            CASE (%CLS_NUMBER, %CLS_BOOLEAN, %CLS_ORG, %CLS_KEY_TYPE,
     3632     5101    2                %CLS_EXIST, %CLS_NAME_DATA_TYPE, %CLS_COMPONENT, %CLS_POINT,
     3633     5102    2                %CLS_DIRECTION);
     3634     5103                   /* Force ASCII-decimal output by passing %CLS_NUMBER */
     3635     5104    2              CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, NAME$NUMBER.V#,
     3636     5105    2                %MXNB_NAME_VALUE, VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3637     5106    2              VARPARAM$VALUE.LENGTH# = NB_VALUE;
     3638     5107
     3639     5108    2            CASE (%CLS_PTR_KEY);
     3640     5109                   /*N*
     3641     5110                   *N*  VDG$FORMAT_KEY only works for string keys and
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:439  
     3642     5111                   *N*      edit keys.  For consec files, we should call
     3643     5112                   *N*      VDG$FORMAT_NUMBER.  But who knows what type of
     3644     5113                   *N*      numeric key this is at this point???
     3645     5114                   *N*/
     3646     5115    2              CALL VDG$FORMAT_KEY (NAME$POINTER.V$->VD$KEY,
     3647     5116    2                %MXNB_NAME_VALUE, VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3648     5117    2              VARPARAM$VALUE.BYTES = NAME$VALUE.BYTES;
     3649     5118
     3650     5119    2            CASE (%CLS_PTR_TEXTC);
     3651     5120    2              VARPARAM$VALUE.LENGTH# = NAME$POINTER.V$->VD$TEXTC.LENGTH#;
     3652     5121    2              VARPARAM$VALUE.BYTES = NAME$POINTER.V$->VD$TEXTC.BYTES;
     3653     5122
     3654     5123    2            CASE (%CLS_PTR_FILE_NODE);
     3655     5124                   %GETKEY (KEY=NAME$POINTER.V$->VD$FILE_NODE.DESC.KEY,
     3656     5125                   PTR=NODE_KEY$);
     3657     5135    2              VARPARAM$VALUE.LENGTH# = NODE$KEY.LENGTH#;
     3658     5136    2              VARPARAM$VALUE.BYTES = NODE$KEY.BYTES;
     3659     5137
     3660     5138    2            CASE (ELSE);
     3661     5139    2              VARPARAM$VALUE.LENGTH# = LENGTHC(%CHR_BAD_VALUE);
     3662     5140    2              VARPARAM$VALUE.BYTES = %CHR_BAD_VALUE;
     3663     5141    2            END;
     3664     5142
     3665     5143    1           RETURN;
     3666     5144
     3667     5145
     3668     5146
     3669     5147    1   NAME_HAS_NO_VALUE_FAILURE:
     3670     5148    1           VARPARAM.ERR.CODE = %E$NAME_HAS_NO_VALUE;
     3671     5149    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3672     5150    1             ALTRET (OALLOC_FAILED);
     3673     5151    1           VD$ERR.ERR.CODE# = %E$NAME_HAS_NO_VALUE;
     3674     5152    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3675     5153    1           VD$ERR.CMDLINE_INDEX# = VARPARAM.CPOS#;
     3676     5154    1           SUBST_FIELD$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));
     3677     5155    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
     3678     5156    1           SUBST$POINTER.V$ (0) = ADDR(UC_NAME.LENGTH#);
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:440  
     3679     5157    2           IF NDT ~= 0 THEN DO;
     3680     5158    2              SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;
     3681     5159    2              SUBST$NUMBER.V# (1) = NDT;
     3682     5160    2              END;
     3683     5161    1           ALTRETURN;
     3684     5162
     3685     5163
     3686     5164    1   CANT_ACCESS_NODE_FAILURE:
     3687     5165    1           VARPARAM.ERR.CODE = %E$CANT_ACCESS_NODE;
     3688     5166    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3689     5167    1             ALTRET (OALLOC_FAILED);
     3690     5168    1           VD$ERR.ERR.CODE# = %E$CANT_ACCESS_NODE;
     3691     5169    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3692     5170    1           VD$ERR.CMDLINE_INDEX# = VARPARAM.CPOS#;
     3693     5171    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     3694     5172    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
     3695     5173    1           SUBST$POINTER.V$ (0) = ADDR(FILE$NODE.DESC.KEY);
     3696     5174    1           ALTRETURN;
     3697     5175
     3698     5176
     3699     5177    1   LREAD_FAILED: ;
     3700     5178    1   OALLOC_FAILED: ;
     3701     5179    1           VARPARAM.ERR = VD_6E.ERR_TAIL$->VD$ERR.ERR;
     3702     5180    1           ALTRETURN;
     3703     5181
     3704     5182
     3705     5183    1   END VDE$PREAD_NAME_FOR_EVAL;
     3706     5184        %EOD;

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:441  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_SUBS_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PREAD_NAME_FOR_EVAL.

   Procedure VDE$PREAD_NAME_FOR_EVAL requires 380 words for executable code.
   Procedure VDE$PREAD_NAME_FOR_EVAL requires 22 words of local(AUTO) storage.

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:442  

 Object Unit name= VDE$PREAD_NAME_FOR_EVAL                    File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:16:06.20 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    10     12  VDE$PREAD_NAME_FOR_EVAL
    1  RoData even  UTS     10     12  VDE$PREAD_NAME_FOR_EVAL
    2   Proc  even  none   380    574  VDE$PREAD_NAME_FOR_EVAL
    3  RoData even  none    10     12  VDE$PREAD_NAME_FOR_EVAL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  VDE$PREAD_NAME_FOR_EVAL
     2     32          yes     yes      Std        1  VDE$PREAD_NAME_FOR_FUNCTION

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       4 VDA$LREAD
         yes           Std       5 VDG$FORMAT_BLOCK_DESC
         yes           Std       6 VDG$FORMAT_NUMBER
         yes           Std       5 VDG$FORMAT_KEY
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:443  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                            r    B$XL_UPPER$                           VD_$$INCANTATION
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:444  


     3423        1        /*T***********************************************************/
     3424        2        /*T*                                                         */
     3425        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3426        4        /*T*                                                         */
     3427        5        /*T***********************************************************/
     3428        6
     3429        7        /*D* NAME: VDE$PREAD_NAME_FOR_EVAL
     3430        8            PARAMETERS:
     3431        9                VARPARAM - An XUE_VARPARAM structure for the name to find.
     3432       10            INPUT:
     3433       11            OUTPUT:
     3434       12                If the name is found:
     3435       13                    VARPARAM.VALUE$'s buffer will contain a TEXTC string
     3436       14                        representing the name's value.
     3437       15                If the name is not found:
     3438       16                    VARPARAM.ERR.CODE will be set, and a VD$ERR will be
     3439       17                        pushed onto the error chain specifying the error.
     3440       18            DESCRIPTION:
     3441       19                Force the name to upper-case.
     3442       20                Read for the name in each of the Names files--well, some
     3443       21                    of them, anyway.  We'll never see Keyins or Synonyms
     3444       22                    at this point, so just look in Equals and Locations.
     3445       23                    If the name is a Location name, build a string which is a textual
     3446       24                    description of the location-name's block location, and return
     3447       25                    this as the name's value.
     3448       26                    For now, if the name appears in the location file,
     3449       27                    return an error.
     3450       28        */
     3451       29
     3452       30        VDE$PREAD_NAME_FOR_EVAL: PROC (VARPARAM) ALTRET;

     30  2 000000   000000 700200 xent  VDE$PREAD_N* TSX0  ! X66_AUTO_1
         2 000001   000026 000001                    ZERO    22,1

     3453       31
     3454       32
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:445  
     3455       33        %INCLUDE VD_MACROS_M;
     3456     2248        %INCLUDE VD_PERR_C;
     3457     2396        %INCLUDE XUE_MACRO_C;
     3458     3140        %INCLUDE XUE_SUBS_C;
     3459     3320        %INCLUDE B$TABLES_C;
     3460     3428
     3461     3429
     3462     3430        %XUE_VARPARAM (NAME=VARPARAM, STCLASS="");
     3463     3532
     3464     3533
     3465     3534    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     3466     3535    1   DCL VDG$FORMAT_NUMBER   ENTRY (6);
     3467     3536    1   DCL VDG$FORMAT_BLOCK_DESC ENTRY (5);
     3468     3537    1   DCL VDG$FORMAT_KEY      ENTRY (5);
     3469     3538    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3470     3539    1   DCL VDG$ESCREECH        ENTRY (3);
     3471     3540
     3472     3541
     3473     3542        %VD_6E (STCLASS=SYMREF);
     3474     3578        %B$XL_UPPER;
     3475     3582        %VD$NUMBER (NAME=VD_$$INCANTATION, STCLASS=SYMREF);
     3476     3627
     3477     3628
     3478     3629        /* UC_NAME is in STATIC in case we need to report an error */
     3479     3630        %VD_TEXTC_REMOTE (NAME=UC_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3480     3693
     3481     3694        /* Since UC_NAME is static, NAME_LOC can be constant! */
     3482     3695        %VD_LOCATION (NAME=NAME_LOC, STCLASS=CONSTANT, INITS=1,
     3483     3696            ITYPE1=%KT_STRING, IREP1=%REP_REMOTE, IBYTES1=UC_NAME);
     3484     3771
     3485     3772
     3486     3773
     3487     3774    1   DCL PORT_KEY$ PTR;
     3488     3775    1   DCL FILE_NODE$ PTR;
     3489     3776    1   DCL NAME_VALUE$ PTR;
     3490     3777    1   DCL NDT SBIN;
     3491     3778    1   DCL NB_VALUE SBIN;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:446  
     3492     3779    1   DCL NODE_KEY$ PTR;
     3493     3780    1   DCL BLOCK_DESC$ PTR;
     3494     3781    1   DCL VD_ERR$ PTR;
     3495     3782    1   DCL SUBST_FIELD$ PTR;
     3496     3783    1   DCL STREAM$ PTR;
     3497     3784
     3498     3785
     3499     3786        %VD$STREAM (NAME=STREAM, STCLASS="BASED(STREAM$)");
     3500     3892        %VD$TEXTC (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     3501     3915        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
     3502     4008        %VD$TEXTC (NAME=VARPARAM$VALUE, STCLASS="BASED(VARPARAM.VALUE$)");
     3503     4031        %VD$BUFFER (NAME=NAME$VALUE, STCLASS="BASED(NAME_VALUE$)");
     3504     4089        %VD$NUMBER (NAME=NAME$NUMBER, STCLASS="BASED(NAME_VALUE$)");
     3505     4134        %VD$POINTER (NAME=NAME$POINTER, STCLASS="BASED(NAME_VALUE$)");
     3506     4179        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
     3507     4202        %VD$BLOCK_DESC (NAME=BLOCK$DESC, STCLASS="BASED(BLOCK_DESC$)");
     3508     4349        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3509     4402        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     3510     4447        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     3511     4492        %VD$PORT;
     3512     4590        %VD$TEXTC_REMOTE;
     3513     4651        %VD$BUFFER_HEADER;
     3514     4687        %VD$KEY;
     3515     4701        %VD$TEXTC;
     3516     4724        %VD$FILE_NODE;
     3517     4817        %XUE_FUNPARAM (NAME=FUNPARAM, STCLASS=BASED);
     3518     4921        %XUE_OPTION (NAME=XUE$OPTION, STCLASS=BASED);
     3519     4977
     3520     4978
     3521     4979
     3522     4980    1           IF VARPARAM.CODE#~=%XUE_FETCH# THEN RETURN;

   4980  2 000002   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000003   000000 235100                    LDA     0,,PR0
         2 000004   000001 115007                    CMPA    1,DL
         2 000005   000007 600000 2                  TZE     s:4982

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:447  
   4980  2 000006   000000 702200 xent               TSX2  ! X66_ARET

     3523     4981
     3524     4982    1           UC_NAME = %CLEAR;

   4982  2 000007   000000 100400                    MLR     fill='000'O
         2 000010   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000011   000000 000050 0                  ADSC9   UC_NAME                  cn=0,n=40

     3525     4983    1           UC_NAME.OBJECT.CLASS# = %CLS_TEXTC_REMOTE;

   4983  2 000012   000053 220003                    LDX0    43,DU
         2 000013   000000 740000 0                  STX0    UC_NAME

     3526     4984    1           UC_NAME.LENGTH# = VARPARAM.VARIABLE.COUNT#;

   4984  2 000014   000006 236100                    LDQ     6,,PR0
         2 000015   000002 552040 0                  STBQ    UC_NAME+2,'40'O

     3527     4985    1           CALL XLATE (SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#),

   4985  2 000016   000002 236000 0                  LDQ     UC_NAME+2
         2 000017   000033 772000                    QRL     27
         2 000020   000000 621006                    EAX1    0,QL
         2 000021   000006 236100                    LDQ     6,,PR0
         2 000022   000033 772000                    QRL     27
         2 000023   000000 622006                    EAX2    0,QL
         2 000024   000000 471400 xsym               LDP1    B$XL_UPPER$
         2 000025   040040 160540                    MVT     fill='040'O
         2 000026   000006 200012                    ADSC9   6,,PR0                   cn=1,n=*X2
         2 000027   000002 200011 0                  ADSC9   UC_NAME+2                cn=1,n=*X1
         2 000030   100000 000100                    ARG     0,,PR1

     3528     4986    1             B$XL_UPPER, VARPARAM.VARIABLE.TEXT#);
     3529     4987    1           GOTO COMMON;

   4987  2 000031   000050 710000 2                  TRA     COMMON
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:448  

     3530     4988        %EJECT;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:449  
     3531     4989        /*D* NAME: VDE$PREAD_NAME_FOR_FUNCTION
     3532     4990            PARAMETERS:
     3533     4991                FUNPARAM - An XUE_FUNPARAM structure for the name to find.
     3534     4992                           The (single) option contains the name.
     3535     4993            INPUT:
     3536     4994            OUTPUT:
     3537     4995                If the name is found:
     3538     4996                    FUNPARAM.OUT$'s buffer will contain a TEXTC string
     3539     4997                        representing the name's value.
     3540     4998                If the name is not found:
     3541     4999                    FUNPARAM.ERR.CODE will be set, and a VD$ERR will be
     3542     5000                        pushed onto the error chain specifying the error.
     3543     5001            DESCRIPTION:
     3544     5002                Force the name to uppercase.
     3545     5003                Read for the name in each of the Names files--well, some
     3546     5004                    of them, anyway.  We'll never see Keyins or Synonyms
     3547     5005                    at this point, so just look in Equals and Locations.
     3548     5006                    If the name is a Location name, build a string which is a textual
     3549     5007                    description of the location-name's block location, and return
     3550     5008                    this as the name's value.
     3551     5009                    For now, if the name appears in the location file,
     3552     5010                    return an error.
     3553     5011        */
     3554     5012
     3555     5013    1   VDE$PREAD_NAME_FOR_FUNCTION: ENTRY (VARPARAM) ALTRET;

   5013  2 000032   000000 700200 xent  VDE$PREAD_N* TSX0  ! X66_AUTO_1
         2 000033   000026 000001                    ZERO    22,1

     3556     5014
     3557     5015    1           UC_NAME.LENGTH# =

   5015  2 000034   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000035   000007 471500                    LDP1    7,,PR0
         2 000036   100002 236100                    LDQ     2,,PR1
         2 000037   000002 552040 0                  STBQ    UC_NAME+2,'40'O

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:450  
     3558     5016    1             ADDR(VARPARAM) -> FUNPARAM.OPTION$(0) -> XUE$OPTION.COUNT#;
     3559     5017    1           CALL XLATE (UC_NAME.BYTES, B$XL_UPPER,

   5017  2 000040   100002 236100                    LDQ     2,,PR1
         2 000041   000033 772000                    QRL     27
         2 000042   000000 620006                    EAX0    0,QL
         2 000043   000000 473400 xsym               LDP3    B$XL_UPPER$
         2 000044   040000 160540                    MVT     fill='040'O
         2 000045   100002 200010                    ADSC9   2,,PR1                   cn=1,n=*X0
         2 000046   000002 200037 0                  ADSC9   UC_NAME+2                cn=1,n=31
         2 000047   300000 000100                    ARG     0,,PR3

   5017  2 000050                       COMMON       null
     3560     5018    1             ADDR(VARPARAM) -> FUNPARAM.OPTION$(0) -> XUE$OPTION.TEXT#);
     3561     5019
     3562     5020    1   COMMON: ;
     3563     5021                %INCREMENT (INDX=%STG_NAME_READS);

   5022  2 000050   000100 054000 xsym               AOS     VD_6E+64

     3564     5024    1           NDT = %NDT_EQUALS;

   5024  2 000051   000001 235007                    LDA     1,DL
         2 000052   200007 755100                    STA     NDT,,AUTO

     3565     5025    1           STREAM$ = VD_6E.EQUALS$;

   5025  2 000053   000001 236000 xsym               LDQ     VD_6E+1
         2 000054   200015 756100                    STQ     STREAM$,,AUTO

     3566     5026    1           NAME_VALUE$ = ADDR(NIL);

   5026  2 000055   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000056   200006 756100                    STQ     NAME_VALUE$,,AUTO

     3567     5027
     3568     5028                /*
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:451  
     3569     5029                *   Look for the name in the Equals file.
     3570     5030                */
     3571     5031    2   LOOKUP_NAME: DO WHILE '1'B;

   5031  2 000057                       LOOKUP_NAME  null
     3572     5032    2              CALL VDA$LREAD (STREAM, NAME_LOC, 0, %TRUE)

   5032  2 000057   000000 237000 3                  LDAQ    0
         2 000060   200020 757100                    STAQ    STREAM$+3,,AUTO
         2 000061   000002 236000 3                  LDQ     2
         2 000062   200015 235100                    LDA     STREAM$,,AUTO
         2 000063   200016 757100                    STAQ    STREAM$+1,,AUTO
         2 000064   200016 630500                    EPPR0   STREAM$+1,,AUTO
         2 000065   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000066   000000 701000 xent               TSX1    VDA$LREAD
         2 000067   000567 702000 2                  TSX2    LREAD_FAILED

     3573     5033    2                ALTRET (LREAD_FAILED);
     3574     5034
     3575     5035                   %GETKEY (KEY=STREAM.PORT$->VD$PORT.CURRENT.KEY,
     3576     5036                   INDX=%LVL_LOWER-1, PTR=PORT_KEY$);

   5043  2 000070   200015 470500                    LDP0    STREAM$,,AUTO
         2 000071   000001 471500                    LDP1    1,,PR0
         2 000072   100012 720100                    LXL0    10,,PR1
         2 000073   000002 100003                    CMPX0   2,DU
         2 000074   000101 601000 2                  TNZ     s:5043+9

   5043  2 000075   100013 473500                    LDP3    11,,PR1
         2 000076   300002 634500                    EPPR4   2,,PR3
         2 000077   200004 454500                    STP4    PORT_KEY$,,AUTO
         2 000100   000103 710000 2                  TRA     s:5046

   5043  2 000101   100013 633500                    EPPR3   11,,PR1
         2 000102   200004 453500                    STP3    PORT_KEY$,,AUTO

     3577     5046    2              IF PORT$KEY.BYTES =
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:452  

   5046  2 000103   200004 473500                    LDP3    PORT_KEY$,,AUTO
         2 000104   300000 236100                    LDQ     0,,PR3
         2 000105   000033 772000                    QRL     27
         2 000106   000000 621006                    EAX1    0,QL
         2 000107   000002 236000 0                  LDQ     UC_NAME+2
         2 000110   000033 772000                    QRL     27
         2 000111   000000 622006                    EAX2    0,QL
         2 000112   040040 106540                    CMPC    fill='040'O
         2 000113   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 000114   000002 200012 0                  ADSC9   UC_NAME+2                cn=1,n=*X2
         2 000115   000133 601000 2                  TNZ     TRY_LOCATIONS_FILE

     3578     5047    2                SUBSTR(UC_NAME.BYTES, 0, UC_NAME.LENGTH#) THEN
     3579     5048    3   FOUND_THE_NAME: DO;

   5048  2 000116                       FOUND_THE_N* null
     3580     5049    3                 FILE_NODE$ = STREAM.PORT$ ->

   5049  2 000116   100040 236100                    LDQ     32,,PR1
         2 000117   200005 756100                    STQ     FILE_NODE$,,AUTO

     3581     5050    3                   VD$PORT.LEVEL.INTERNAL$ (%LVL_LOWER);
     3582     5051    4                 IF FILE_NODE$ ~= ADDR(NIL) THEN DO;

   5051  2 000120   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000121   000130 600000 2                  TZE     s:5056

     3583     5052    4                    IF (NOT FILE$NODE.ACCESS (%NAC_READ))

   5052  2 000122   200005 474500                    LDP4    FILE_NODE$,,AUTO
         2 000123   400003 236100                    LDQ     3,,PR4
         2 000124   200000 316003                    CANQ    65536,DU
         2 000125   000130 601000 2                  TNZ     s:5056
         2 000126   000003 235000 xsym               LDA     VD_$$INCANTATION+3
         2 000127   000524 604400 2                  TMOZ    CANT_ACCESS_NODE_FAILURE

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:453  
     3584     5053    4                      AND VD_$$INCANTATION.V# <= 0 THEN
     3585     5054    4                       GOTO CANT_ACCESS_NODE_FAILURE;
     3586     5055    4                    END;

     3587     5056    3                 NAME_VALUE$ = STREAM.PORT$ ->

   5056  2 000130   100036 236100                    LDQ     30,,PR1
         2 000131   200006 756100                    STQ     NAME_VALUE$,,AUTO

     3588     5057    3                   VD$PORT.LEVEL.DATA$ (%LVL_LOWER);
     3589     5058    3                 EXIT LOOKUP_NAME;

   5058  2 000132   000145 710000 2                  TRA     s:5074

     3590     5059    3                 END FOUND_THE_NAME;
     3591     5060    2              ELSE
     3592     5061    3   TRY_LOCATIONS_FILE: DO;

   5061  2 000133                       TRY_LOCATIO* null
     3593     5062                   /*
     3594     5063                   *   Look for the name in the Locations file.
     3595     5064                   */
     3596     5065    4                 IF NDT = %NDT_LOCATION THEN DO;

   5065  2 000133   200007 235100                    LDA     NDT,,AUTO
         2 000134   000002 115007                    CMPA    2,DL
         2 000135   000140 601000 2                  TNZ     s:5069

     3597     5066    4                    NDT = 0;

   5066  2 000136   200007 450100                    STZ     NDT,,AUTO

     3598     5067    4                    GOTO NAME_HAS_NO_VALUE_FAILURE;

   5067  2 000137   000455 710000 2                  TRA     NAME_HAS_NO_VALUE_FAILURE

     3599     5068    4                    END;
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:454  
     3600     5069    3                 STREAM$ = VD_6E.LOCATIONS$;

   5069  2 000140   000002 236000 xsym               LDQ     VD_6E+2
         2 000141   200015 756100                    STQ     STREAM$,,AUTO

     3601     5070    3                 NDT = %NDT_LOCATION;

   5070  2 000142   000002 235007                    LDA     2,DL
         2 000143   200007 755100                    STA     NDT,,AUTO

     3602     5071    3                 END TRY_LOCATIONS_FILE;

     3603     5072    2              END LOOKUP_NAME;

   5072  2 000144   000057 710000 2                  TRA     LOOKUP_NAME

     3604     5073
     3605     5074    1           IF NAME_VALUE$ = ADDR(NIL) THEN

   5074  2 000145   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000146   000455 600000 2                  TZE     NAME_HAS_NO_VALUE_FAILURE

     3606     5075    1              GOTO NAME_HAS_NO_VALUE_FAILURE;
     3607     5076
     3608     5077    1           VARPARAM$VALUE.LENGTH# = %MXNB_NAME_VALUE;

   5077  2 000147   200003 474500                    LDP4    @VARPARAM,,AUTO
         2 000150   400004 475500                    LDP5    4,,PR4
         2 000151   777000 236003                    LDQ     -512,DU
         2 000152   500000 552140                    STBQ    0,'40'O,PR5

     3609     5078    2           DO CASE (NAME$VALUE.OBJECT.CLASS#);

   5078  2 000153   200006 471500                    LDP1    NAME_VALUE$,,AUTO
         2 000154   100000 220100                    LDX0    0,,PR1
         2 000155   000046 100003                    CMPX0   38,DU
         2 000156   000160 602010 2                  TNC     s:5078+5,X0
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:455  
         2 000157   000442 710000 2                  TRA     s:5139
         2 000160   000442 710000 2                  TRA     s:5139
         2 000161   000247 710000 2                  TRA     s:5085
         2 000162   000442 710000 2                  TRA     s:5139
         2 000163   000305 710000 2                  TRA     s:5104
         2 000164   000226 710000 2                  TRA     s:5080
         2 000165   000442 710000 2                  TRA     s:5139
         2 000166   000305 710000 2                  TRA     s:5104
         2 000167   000305 710000 2                  TRA     s:5104
         2 000170   000442 710000 2                  TRA     s:5139
         2 000171   000442 710000 2                  TRA     s:5139
         2 000172   000442 710000 2                  TRA     s:5139
         2 000173   000442 710000 2                  TRA     s:5139
         2 000174   000442 710000 2                  TRA     s:5139
         2 000175   000305 710000 2                  TRA     s:5104
         2 000176   000442 710000 2                  TRA     s:5139
         2 000177   000442 710000 2                  TRA     s:5139
         2 000200   000226 710000 2                  TRA     s:5080
         2 000201   000442 710000 2                  TRA     s:5139
         2 000202   000442 710000 2                  TRA     s:5139
         2 000203   000442 710000 2                  TRA     s:5139
         2 000204   000442 710000 2                  TRA     s:5139
         2 000205   000442 710000 2                  TRA     s:5139
         2 000206   000442 710000 2                  TRA     s:5139
         2 000207   000442 710000 2                  TRA     s:5139
         2 000210   000305 710000 2                  TRA     s:5104
         2 000211   000305 710000 2                  TRA     s:5104
         2 000212   000442 710000 2                  TRA     s:5139
         2 000213   000305 710000 2                  TRA     s:5104
         2 000214   000305 710000 2                  TRA     s:5104
         2 000215   000442 710000 2                  TRA     s:5139
         2 000216   000305 710000 2                  TRA     s:5104
         2 000217   000442 710000 2                  TRA     s:5139
         2 000220   000247 710000 2                  TRA     s:5085
         2 000221   000411 710000 2                  TRA     s:5132
         2 000222   000442 710000 2                  TRA     s:5139
         2 000223   000335 710000 2                  TRA     s:5115
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:456  
         2 000224   000442 710000 2                  TRA     s:5139
         2 000225   000371 710000 2                  TRA     s:5120

     3610     5079    2            CASE (%CLS_BUFFER, %CLS_FILE_STCLASS);

     3611     5080    2              VARPARAM$VALUE.LENGTH# = MINIMUM (%MXNB_NAME_VALUE,

   5080  2 000226   400004 475500                    LDP5    4,,PR4
         2 000227   100002 236100                    LDQ     2,,PR1
         2 000230   000022 732000                    QRS     18
         2 000231   000777 116007                    CMPQ    511,DL
         2 000232   000234 604400 2                  TMOZ    s:5080+6
         2 000233   000777 236007                    LDQ     511,DL
         2 000234   000033 736000                    QLS     27
         2 000235   500000 552140                    STBQ    0,'40'O,PR5

     3612     5081    2                NAME$VALUE.LENGTH#);
     3613     5082    2              VARPARAM$VALUE.BYTES = NAME$VALUE.BYTES;

   5082  2 000236   400004 475500                    LDP5    4,,PR4
         2 000237   500000 236100                    LDQ     0,,PR5
         2 000240   000033 772000                    QRL     27
         2 000241   100002 220100                    LDX0    2,,PR1
         2 000242   000000 621006                    EAX1    0,QL
         2 000243   040140 100540                    MLR     fill='040'O
         2 000244   100002 400010                    ADSC9   2,,PR1                   cn=2,n=*X0
         2 000245   500000 200011                    ADSC9   0,,PR5                   cn=1,n=*X1
         2 000246   000454 710000 2                  TRA     s:5143

     3614     5083
     3615     5084    2            CASE (%CLS_BLOCK_BUFFER, %CLS_PTR_BLOCK_DESC);

     3616     5085    2              IF NAME$VALUE.OBJECT.CLASS# = %CLS_PTR_BLOCK_DESC THEN

   5085  2 000247   000040 100003                    CMPX0   32,DU
         2 000250   000254 601000 2                  TNZ     s:5088

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:457  
     3617     5086    2                 BLOCK_DESC$ = NAME$POINTER.V$;

   5086  2 000251   100003 236100                    LDQ     3,,PR1
         2 000252   200012 756100                    STQ     BLOCK_DESC$,,AUTO
         2 000253   000257 710000 2                  TRA     s:5089

     3618     5087    2              ELSE
     3619     5088    2                 BLOCK_DESC$ = PINCRW(NAME_VALUE$, SIZEW(VD$BUFFER_HEADER));

   5088  2 000254   200006 236100                    LDQ     NAME_VALUE$,,AUTO
         2 000255   000003 036003                    ADLQ    3,DU
         2 000256   200012 756100                    STQ     BLOCK_DESC$,,AUTO

     3620     5089    2              CALL VDG$FORMAT_BLOCK_DESC (BLOCK$DESC, %MXNB_NAME_VALUE,

   5089  2 000257   400004 475500                    LDP5    4,,PR4
         2 000260   200010 636500                    EPPR6   NB_VALUE,,AUTO
         2 000261   200022 456500                    STP6    STREAM$+5,,AUTO
         2 000262   000000 236000 3                  LDQ     0
         2 000263   200021 756100                    STQ     STREAM$+4,,AUTO
         2 000264   200023 455500                    STP5    STREAM$+6,,AUTO
         2 000265   200023 236100                    LDQ     STREAM$+6,,AUTO
         2 000266   200000 036007                    ADLQ    65536,DL
         2 000267   200020 756100                    STQ     STREAM$+3,,AUTO
         2 000270   000004 236000 3                  LDQ     4
         2 000271   200012 235100                    LDA     BLOCK_DESC$,,AUTO
         2 000272   200016 757100                    STAQ    STREAM$+1,,AUTO
         2 000273   200016 630500                    EPPR0   STREAM$+1,,AUTO
         2 000274   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000275   000000 701000 xent               TSX1    VDG$FORMAT_BLOCK_DESC
         2 000276   000000 011000                    NOP     0

     3621     5090    2                VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3622     5091    2              VARPARAM$VALUE.LENGTH# = NB_VALUE;

   5091  2 000277   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000300   000004 471500                    LDP1    4,,PR0
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:458  
         2 000301   200010 236100                    LDQ     NB_VALUE,,AUTO
         2 000302   000033 736000                    QLS     27
         2 000303   100000 552140                    STBQ    0,'40'O,PR1
         2 000304   000454 710000 2                  TRA     s:5143

     3623     5092
     3624     5093                /*
     3625     5094                *  Value is binary or structured:  translate to ASCII.
     3626     5095                *  Note that boolean and enumerated object-classes will be
     3627     5096                *    translated into their numbers; however, structured
     3628     5097                *    object-classes will be translated into textual descriptions.
     3629     5098                */
     3630     5099
     3631     5100    2            CASE (%CLS_NUMBER, %CLS_BOOLEAN, %CLS_ORG, %CLS_KEY_TYPE,

     3632     5101    2                %CLS_EXIST, %CLS_NAME_DATA_TYPE, %CLS_COMPONENT, %CLS_POINT,
     3633     5102    2                %CLS_DIRECTION);
     3634     5103                   /* Force ASCII-decimal output by passing %CLS_NUMBER */
     3635     5104    2              CALL VDG$FORMAT_NUMBER (%CLS_NUMBER, NAME$NUMBER.V#,

   5104  2 000305   400004 475500                    LDP5    4,,PR4
         2 000306   200010 636500                    EPPR6   NB_VALUE,,AUTO
         2 000307   200023 456500                    STP6    STREAM$+6,,AUTO
         2 000310   000000 236000 3                  LDQ     0
         2 000311   200022 756100                    STQ     STREAM$+5,,AUTO
         2 000312   200024 455500                    STP5    STREAM$+7,,AUTO
         2 000313   200024 236100                    LDQ     STREAM$+7,,AUTO
         2 000314   200000 036007                    ADLQ    65536,DL
         2 000315   000004 235000 3                  LDA     4
         2 000316   200020 757100                    STAQ    STREAM$+3,,AUTO
         2 000317   200006 236100                    LDQ     NAME_VALUE$,,AUTO
         2 000320   000003 036003                    ADLQ    3,DU
         2 000321   000006 235000 3                  LDA     6
         2 000322   200016 757100                    STAQ    STREAM$+1,,AUTO
         2 000323   200016 630500                    EPPR0   STREAM$+1,,AUTO
         2 000324   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 000325   000000 701000 xent               TSX1    VDG$FORMAT_NUMBER
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:459  
         2 000326   000000 011000                    NOP     0

     3636     5105    2                %MXNB_NAME_VALUE, VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3637     5106    2              VARPARAM$VALUE.LENGTH# = NB_VALUE;

   5106  2 000327   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000330   000004 471500                    LDP1    4,,PR0
         2 000331   200010 236100                    LDQ     NB_VALUE,,AUTO
         2 000332   000033 736000                    QLS     27
         2 000333   100000 552140                    STBQ    0,'40'O,PR1
         2 000334   000454 710000 2                  TRA     s:5143

     3638     5107
     3639     5108    2            CASE (%CLS_PTR_KEY);

     3640     5109                   /*N*
     3641     5110                   *N*  VDG$FORMAT_KEY only works for string keys and
     3642     5111                   *N*      edit keys.  For consec files, we should call
     3643     5112                   *N*      VDG$FORMAT_NUMBER.  But who knows what type of
     3644     5113                   *N*      numeric key this is at this point???
     3645     5114                   *N*/
     3646     5115    2              CALL VDG$FORMAT_KEY (NAME$POINTER.V$->VD$KEY,

   5115  2 000335   100003 475500                    LDP5    3,,PR1
         2 000336   400004 476500                    LDP6    4,,PR4
         2 000337   200010 637500                    EPPR7   NB_VALUE,,AUTO
         2 000340   200022 457500                    STP7    STREAM$+5,,AUTO
         2 000341   000000 236000 3                  LDQ     0
         2 000342   200021 756100                    STQ     STREAM$+4,,AUTO
         2 000343   200023 456500                    STP6    STREAM$+6,,AUTO
         2 000344   200023 236100                    LDQ     STREAM$+6,,AUTO
         2 000345   200000 036007                    ADLQ    65536,DL
         2 000346   200020 756100                    STQ     STREAM$+3,,AUTO
         2 000347   000004 236000 3                  LDQ     4
         2 000350   200017 756100                    STQ     STREAM$+2,,AUTO
         2 000351   200016 455500                    STP5    STREAM$+1,,AUTO
         2 000352   200016 630500                    EPPR0   STREAM$+1,,AUTO
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:460  
         2 000353   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000354   000000 701000 xent               TSX1    VDG$FORMAT_KEY
         2 000355   000000 011000                    NOP     0

     3647     5116    2                %MXNB_NAME_VALUE, VARPARAM$VALUE.BYTES, 0, NB_VALUE);
     3648     5117    2              VARPARAM$VALUE.BYTES = NAME$VALUE.BYTES;

   5117  2 000356   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000357   000004 471500                    LDP1    4,,PR0
         2 000360   100000 236100                    LDQ     0,,PR1
         2 000361   000033 772000                    QRL     27
         2 000362   200006 473500                    LDP3    NAME_VALUE$,,AUTO
         2 000363   300002 220100                    LDX0    2,,PR3
         2 000364   000000 621006                    EAX1    0,QL
         2 000365   040140 100540                    MLR     fill='040'O
         2 000366   300002 400010                    ADSC9   2,,PR3                   cn=2,n=*X0
         2 000367   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         2 000370   000454 710000 2                  TRA     s:5143

     3649     5118
     3650     5119    2            CASE (%CLS_PTR_TEXTC);

     3651     5120    2              VARPARAM$VALUE.LENGTH# = NAME$POINTER.V$->VD$TEXTC.LENGTH#;

   5120  2 000371   400004 475500                    LDP5    4,,PR4
         2 000372   100003 476500                    LDP6    3,,PR1
         2 000373   600000 236100                    LDQ     0,,PR6
         2 000374   500000 552140                    STBQ    0,'40'O,PR5

     3652     5121    2              VARPARAM$VALUE.BYTES = NAME$POINTER.V$->VD$TEXTC.BYTES;

   5121  2 000375   400004 475500                    LDP5    4,,PR4
         2 000376   500000 236100                    LDQ     0,,PR5
         2 000377   000033 772000                    QRL     27
         2 000400   100003 476500                    LDP6    3,,PR1
         2 000401   000000 620006                    EAX0    0,QL
         2 000402   600000 236100                    LDQ     0,,PR6
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:461  
         2 000403   000033 772000                    QRL     27
         2 000404   000000 621006                    EAX1    0,QL
         2 000405   040140 100540                    MLR     fill='040'O
         2 000406   600000 200011                    ADSC9   0,,PR6                   cn=1,n=*X1
         2 000407   500000 200010                    ADSC9   0,,PR5                   cn=1,n=*X0
         2 000410   000454 710000 2                  TRA     s:5143

     3653     5122
     3654     5123    2            CASE (%CLS_PTR_FILE_NODE);

     3655     5124                   %GETKEY (KEY=NAME$POINTER.V$->VD$FILE_NODE.DESC.KEY,
     3656     5125                   PTR=NODE_KEY$);

   5132  2 000411   100003 475500                    LDP5    3,,PR1
         2 000412   500004 721100                    LXL1    4,,PR5
         2 000413   000002 101003                    CMPX1   2,DU
         2 000414   000421 601000 2                  TNZ     s:5132+8

   5132  2 000415   500005 476500                    LDP6    5,,PR5
         2 000416   600002 637500                    EPPR7   2,,PR6
         2 000417   200011 457500                    STP7    NODE_KEY$,,AUTO
         2 000420   000423 710000 2                  TRA     s:5135

   5132  2 000421   500005 636500                    EPPR6   5,,PR5
         2 000422   200011 456500                    STP6    NODE_KEY$,,AUTO

     3657     5135    2              VARPARAM$VALUE.LENGTH# = NODE$KEY.LENGTH#;

   5135  2 000423   400004 476500                    LDP6    4,,PR4
         2 000424   200011 477500                    LDP7    NODE_KEY$,,AUTO
         2 000425   700000 236100                    LDQ     0,,PR7
         2 000426   600000 552140                    STBQ    0,'40'O,PR6

     3658     5136    2              VARPARAM$VALUE.BYTES = NODE$KEY.BYTES;

   5136  2 000427   400004 475500                    LDP5    4,,PR4
         2 000430   500000 236100                    LDQ     0,,PR5
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:462  
         2 000431   000033 772000                    QRL     27
         2 000432   000000 620006                    EAX0    0,QL
         2 000433   700000 236100                    LDQ     0,,PR7
         2 000434   000033 772000                    QRL     27
         2 000435   000000 621006                    EAX1    0,QL
         2 000436   040140 100540                    MLR     fill='040'O
         2 000437   700000 200011                    ADSC9   0,,PR7                   cn=1,n=*X1
         2 000440   500000 200010                    ADSC9   0,,PR5                   cn=1,n=*X0
         2 000441   000454 710000 2                  TRA     s:5143

     3659     5137
     3660     5138    2            CASE (ELSE);

     3661     5139    2              VARPARAM$VALUE.LENGTH# = LENGTHC(%CHR_BAD_VALUE);

   5139  2 000442   400004 475500                    LDP5    4,,PR4
         2 000443   002000 236003                    LDQ     1024,DU
         2 000444   500000 552140                    STBQ    0,'40'O,PR5

     3662     5140    2              VARPARAM$VALUE.BYTES = %CHR_BAD_VALUE;

   5140  2 000445   400004 475500                    LDP5    4,,PR4
         2 000446   500000 236100                    LDQ     0,,PR5
         2 000447   000033 772000                    QRL     27
         2 000450   000000 620006                    EAX0    0,QL
         2 000451   040140 100400                    MLR     fill='040'O
         2 000452   000011 000002 1                  ADSC9   NAME_LOC+9               cn=0,n=2
         2 000453   500000 200010                    ADSC9   0,,PR5                   cn=1,n=*X0

     3663     5141    2            END;

     3664     5142
     3665     5143    1           RETURN;

   5143  2 000454   000000 702200 xent               TSX2  ! X66_ARET

     3666     5144
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:463  
     3667     5145
     3668     5146
     3669     5147    1   NAME_HAS_NO_VALUE_FAILURE:
     3670     5148    1           VARPARAM.ERR.CODE = %E$NAME_HAS_NO_VALUE;

   5148  2 000455   200003 474500       NAME_HAS_NO* LDP4    @VARPARAM,,AUTO
         2 000456   400003 236100                    LDQ     3,,PR4
         2 000457   000007 376000 3                  ANQ     7
         2 000460   001520 276007                    ORQ     848,DL
         2 000461   400003 756100                    STQ     3,,PR4

     3671     5149    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5149  2 000462   200013 631500                    EPPR1   VD_ERR$,,AUTO
         2 000463   200017 451500                    STP1    STREAM$+2,,AUTO
         2 000464   000010 236000 3                  LDQ     8
         2 000465   200016 756100                    STQ     STREAM$+1,,AUTO
         2 000466   200016 630500                    EPPR0   STREAM$+1,,AUTO
         2 000467   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000470   000000 701000 xent               TSX1    VDG$OALLOC
         2 000471   000567 702000 2                  TSX2    LREAD_FAILED

     3672     5150    1             ALTRET (OALLOC_FAILED);
     3673     5151    1           VD$ERR.ERR.CODE# = %E$NAME_HAS_NO_VALUE;

   5151  2 000472   200013 470500                    LDP0    VD_ERR$,,AUTO
         2 000473   000002 236100                    LDQ     2,,PR0
         2 000474   000007 376000 3                  ANQ     7
         2 000475   001520 276007                    ORQ     848,DL
         2 000476   000002 756100                    STQ     2,,PR0

     3674     5152    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5152  2 000477   000003 220003                    LDX0    3,DU
         2 000500   200013 470500                    LDP0    VD_ERR$,,AUTO
         2 000501   000003 740100                    STX0    3,,PR0

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:464  
     3675     5153    1           VD$ERR.CMDLINE_INDEX# = VARPARAM.CPOS#;

   5153  2 000502   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000503   000001 721100                    LXL1    1,,PR0
         2 000504   200013 471500                    LDP1    VD_ERR$,,AUTO
         2 000505   100003 441100                    SXL1    3,,PR1

     3676     5154    1           SUBST_FIELD$ = PINCRW(VD_ERR$, LENGTHW(VD$ERR));

   5154  2 000506   200013 236100                    LDQ     VD_ERR$,,AUTO
         2 000507   000005 036003                    ADLQ    5,DU
         2 000510   200014 756100                    STQ     SUBST_FIELD$,,AUTO

     3677     5155    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   5155  2 000511   000045 221003                    LDX1    37,DU
         2 000512   200014 471500                    LDP1    SUBST_FIELD$,,AUTO
         2 000513   100000 741100                    STX1    0,,PR1

     3678     5156    1           SUBST$POINTER.V$ (0) = ADDR(UC_NAME.LENGTH#);

   5156  2 000514   000011 236000 3                  LDQ     9
         2 000515   100003 756100                    STQ     3,,PR1

     3679     5157    2           IF NDT ~= 0 THEN DO;

   5157  2 000516   200007 235100                    LDA     NDT,,AUTO
         2 000517   000523 600000 2                  TZE     s:5161

     3680     5158    2              SUBST$NUMBER.OBJECT.CLASS# (1) = %CLS_NAME_DATA_TYPE;

   5158  2 000520   000031 222003                    LDX2    25,DU
         2 000521   100004 742100                    STX2    4,,PR1

     3681     5159    2              SUBST$NUMBER.V# (1) = NDT;

   5159  2 000522   100007 755100                    STA     7,,PR1
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:465  

     3682     5160    2              END;

     3683     5161    1           ALTRETURN;

   5161  2 000523   000000 702200 xent               TSX2  ! X66_AALT

     3684     5162
     3685     5163
     3686     5164    1   CANT_ACCESS_NODE_FAILURE:
     3687     5165    1           VARPARAM.ERR.CODE = %E$CANT_ACCESS_NODE;

   5165  2 000524   200003 475500       CANT_ACCESS* LDP5    @VARPARAM,,AUTO
         2 000525   500003 236100                    LDQ     3,,PR5
         2 000526   000007 376000 3                  ANQ     7
         2 000527   003770 276007                    ORQ     2040,DL
         2 000530   500003 756100                    STQ     3,,PR5

     3688     5166    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5166  2 000531   200013 631500                    EPPR1   VD_ERR$,,AUTO
         2 000532   200017 451500                    STP1    STREAM$+2,,AUTO
         2 000533   000010 236000 3                  LDQ     8
         2 000534   200016 756100                    STQ     STREAM$+1,,AUTO
         2 000535   200016 630500                    EPPR0   STREAM$+1,,AUTO
         2 000536   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000537   000000 701000 xent               TSX1    VDG$OALLOC
         2 000540   000567 702000 2                  TSX2    LREAD_FAILED

     3689     5167    1             ALTRET (OALLOC_FAILED);
     3690     5168    1           VD$ERR.ERR.CODE# = %E$CANT_ACCESS_NODE;

   5168  2 000541   200013 470500                    LDP0    VD_ERR$,,AUTO
         2 000542   000002 236100                    LDQ     2,,PR0
         2 000543   000007 376000 3                  ANQ     7
         2 000544   003770 276007                    ORQ     2040,DL
         2 000545   000002 756100                    STQ     2,,PR0
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:466  

     3691     5169    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5169  2 000546   000003 220003                    LDX0    3,DU
         2 000547   200013 470500                    LDP0    VD_ERR$,,AUTO
         2 000550   000003 740100                    STX0    3,,PR0

     3692     5170    1           VD$ERR.CMDLINE_INDEX# = VARPARAM.CPOS#;

   5170  2 000551   200003 470500                    LDP0    @VARPARAM,,AUTO
         2 000552   000001 721100                    LXL1    1,,PR0
         2 000553   200013 471500                    LDP1    VD_ERR$,,AUTO
         2 000554   100003 441100                    SXL1    3,,PR1

     3693     5171    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   5171  2 000555   200013 236100                    LDQ     VD_ERR$,,AUTO
         2 000556   000005 036003                    ADLQ    5,DU
         2 000557   200014 756100                    STQ     SUBST_FIELD$,,AUTO

     3694     5172    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   5172  2 000560   000043 221003                    LDX1    35,DU
         2 000561   200014 471500                    LDP1    SUBST_FIELD$,,AUTO
         2 000562   100000 741100                    STX1    0,,PR1

     3695     5173    1           SUBST$POINTER.V$ (0) = ADDR(FILE$NODE.DESC.KEY);

   5173  2 000563   200005 236100                    LDQ     FILE_NODE$,,AUTO
         2 000564   000004 036003                    ADLQ    4,DU
         2 000565   100003 756100                    STQ     3,,PR1

     3696     5174    1           ALTRETURN;

   5174  2 000566   000000 702200 xent               TSX2  ! X66_AALT

   5173  2 000567                       LREAD_FAILED null
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:467  
   5173  2 000567                       OALLOC_FAIL* null
     3697     5175
     3698     5176
     3699     5177    1   LREAD_FAILED: ;
     3700     5178    1   OALLOC_FAILED: ;
     3701     5179    1           VARPARAM.ERR = VD_6E.ERR_TAIL$->VD$ERR.ERR;

   5179  2 000567   000032 470400 xsym               LDP0    VD_6E+26
         2 000570   000002 236100                    LDQ     2,,PR0
         2 000571   200003 471500                    LDP1    @VARPARAM,,AUTO
         2 000572   100003 756100                    STQ     3,,PR1

     3702     5180    1           ALTRETURN;

   5180  2 000573   000000 702200 xent               TSX2  ! X66_AALT
     3703     5181
     3704     5182
     3705     5183    1   END VDE$PREAD_NAME_FOR_EVAL;
     3706     5184        %EOD;

PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:468  
--  Include file information  --

   B$TABLES_C.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_SUBS_C.:LIBRARY  is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$PREAD_NAME_FOR_EVAL.
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:469  

 **** Variables and constants ****

  ****  Section 000  Data  VDE$PREAD_NAME_FOR_EVAL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(360)   r     1 UC_NAME

  ****  Section 001 RoData VDE$PREAD_NAME_FOR_EVAL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 NAME_LOC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @VARPARAM                 12-0-0/w PTR         r     1 BLOCK_DESC$
     5-0-0/w PTR         r     1 FILE_NODE$                 6-0-0/w PTR         r     1 NAME_VALUE$
    10-0-0/w SBIN        r     1 NB_VALUE                   7-0-0/w SBIN        r     1 NDT
    11-0-0/w PTR         r     1 NODE_KEY$                  4-0-0/w PTR         r     1 PORT_KEY$
    15-0-0/w PTR         r     1 STREAM$                   14-0-0/w PTR         r     1 SUBST_FIELD$
    *0-0-0/w ASTR(225)   r     1 VARPARAM                  13-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/w STRC(144)   r     1 VD_$$INCANTATION
     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:470  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$XL_UPPER                 0-0-0/w STRC(936)   r     1 BLOCK$DESC
     0-0-0/w STRC(468)   r     1 FILE$NODE                  0-0-0/w STRC(288)   r     1 FUNPARAM
     0-0-0/w STRC(144)   r     1 NAME$NUMBER                0-0-0/w STRC(144)   r     1 NAME$POINTER
     0-0-0/w ASTR(90)    r     1 NAME$VALUE                 0-0-0/w ASTR(9)     r     1 NODE$KEY
     0-0-0/w ASTR(9)     r     1 PORT$KEY                   0-0-0/w STRC(864)   r     1 STREAM
     0-0-0/w STRC(144)   r     1 SUBST$NUMBER(0:2)
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w ASTR(9)     r     1 VARPARAM$VALUE             0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(468)   r     1 VD$FILE_NODE
     0-0-0/w STRC(72)    r     1 VD$KEY                     0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(9)     r     1 VD$TEXTC                   0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w ASTR(81)    r     1 XUE$OPTION


   Procedure VDE$PREAD_NAME_FOR_EVAL requires 380 words for executable code.
   Procedure VDE$PREAD_NAME_FOR_EVAL requires 22 words of local(AUTO) storage.
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:471  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:472  
          MINI XREF LISTING

B$XL_UPPER
      3580**DCL      4985>>CALLBLT  5017>>CALLBLT
B$XL_UPPER$
      3579**DCL      3580--IMP-PTR  4985>>CALLBLT  5017>>CALLBLT
BLOCK$DESC
      4210**DCL      5089<>CALL
BLOCK_DESC$
      3780**DCL      4210--IMP-PTR  5086<<ASSIGN   5088<<ASSIGN   5089>>CALL
CANT_ACCESS_NODE_FAILURE
      5165**LABEL    5054--GOTO
COMMON
      5017**LABEL    4987--GOTO
FILE$NODE.ACCESS
      3961**DCL      5052>>IF
FILE$NODE.DESC.KEY
      3986**DCL      5173--ASSIGN
FILE_NODE$
      3775**DCL      3923--IMP-PTR  5049<<ASSIGN   5051>>IF       5052>>IF       5173>>ASSIGN
FUNPARAM.OPTION$
      4911**DCL      5015>>ASSIGN   5017>>CALLBLT  5017>>CALLBLT
LOOKUP_NAME
      5031**LABEL    5058--EXIT
LREAD_FAILED
      5173**LABEL    5032--CALLALT
NAME$NUMBER.V#
      4131**DCL      5104<>CALL
NAME$POINTER.V$
      4176**DCL      5086>>ASSIGN   5115>>CALL     5120>>ASSIGN   5121>>ASSIGN   5121>>ASSIGN   5132>>IF
      5132>>ASSIGN   5132>>ASSIGN
NAME$VALUE.BYTES
      4084**DCL      5082>>ASSIGN   5117>>ASSIGN
NAME$VALUE.LENGTH#
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:473  
      4082**DCL      4084--IMP-SIZ  5080>>ASSIGN   5082>>ASSIGN   5117>>ASSIGN
NAME$VALUE.OBJECT.CLASS#
      4080**DCL      5078>>DOCASE   5085>>IF
NAME_HAS_NO_VALUE_FAILURE
      5148**LABEL    5067--GOTO     5075--GOTO
NAME_LOC
      3707**DCL      5032<>CALL
NAME_VALUE$
      3776**DCL      4056--IMP-PTR  4097--IMP-PTR  4150--IMP-PTR  5026<<ASSIGN   5056<<ASSIGN   5074>>IF
      5078>>DOCASE   5080>>ASSIGN   5082>>ASSIGN   5082>>ASSIGN   5085>>IF       5086>>ASSIGN   5088>>ASSIGN
      5104>>CALL     5115>>CALL     5117>>ASSIGN   5117>>ASSIGN   5120>>ASSIGN   5121>>ASSIGN   5121>>ASSIGN
      5132>>IF       5132>>ASSIGN   5132>>ASSIGN
NB_VALUE
      3778**DCL      5089<>CALL     5091>>ASSIGN   5104<>CALL     5106>>ASSIGN   5115<>CALL
NDT
      3777**DCL      5024<<ASSIGN   5065>>IF       5066<<ASSIGN   5070<<ASSIGN   5157>>IF       5159>>ASSIGN
NODE$KEY.BYTES
      4197**DCL      5136>>ASSIGN
NODE$KEY.LENGTH#
      4195**DCL      4197--IMP-SIZ  5135>>ASSIGN   5136>>ASSIGN
NODE_KEY$
      3779**DCL      4187--IMP-PTR  5132<<ASSIGN   5132<<ASSIGN   5135>>ASSIGN   5136>>ASSIGN   5136>>ASSIGN
OALLOC_FAILED
      5173**LABEL    5149--CALLALT  5166--CALLALT
PORT$KEY.BYTES
      3910**DCL      5046>>IF
PORT$KEY.LENGTH#
      3908**DCL      3910--IMP-SIZ  5046>>IF
PORT_KEY$
      3774**DCL      3900--IMP-PTR  5043<<ASSIGN   5043<<ASSIGN   5046>>IF       5046>>IF
STREAM
      3794**DCL      5032<>CALL
STREAM.PORT$
      3820**DCL      5043>>IF       5043>>ASSIGN   5043>>ASSIGN   5049>>ASSIGN   5056>>ASSIGN
STREAM$
      3783**DCL      3794--IMP-PTR  5025<<ASSIGN   5032>>CALL     5043>>IF       5043>>ASSIGN   5043>>ASSIGN
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:474  
      5049>>ASSIGN   5056>>ASSIGN   5069<<ASSIGN
SUBST$NUMBER.OBJECT.CLASS#
      4487**DCL      5158<<ASSIGN
SUBST$NUMBER.V#
      4489**DCL      5159<<ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      4442**DCL      5155<<ASSIGN   5172<<ASSIGN
SUBST$POINTER.V$
      4444**DCL      5156<<ASSIGN   5173<<ASSIGN
SUBST_FIELD$
      3782**DCL      4418--IMP-PTR  4455--IMP-PTR  5154<<ASSIGN   5155>>ASSIGN   5156>>ASSIGN   5158>>ASSIGN
      5159>>ASSIGN   5171<<ASSIGN   5172>>ASSIGN   5173>>ASSIGN
UC_NAME
      3656**DCL      3747--DCLINIT  4982<<ASSIGN
UC_NAME.BYTES
      3689**DCL      4985<<CALLBLT  5017<<CALLBLT  5046>>IF
UC_NAME.LENGTH#
      3685**DCL      4984<<ASSIGN   4985>>CALLBLT  5015<<ASSIGN   5046>>IF       5156--ASSIGN
UC_NAME.OBJECT.CLASS#
      3683**DCL      4983<<ASSIGN
VARPARAM
      3444**DCL        30--PROC     5013--ENTRY    5015--ASSIGN   5017--CALLBLT  5017--CALLBLT
VARPARAM.CODE#
      3448**DCL      4980>>IF
VARPARAM.CPOS#
      3454**DCL      5153>>ASSIGN   5170>>ASSIGN
VARPARAM.ERR
      3475**DCL      5179<<ASSIGN
VARPARAM.ERR.CODE
      3479**DCL      5148<<ASSIGN   5165<<ASSIGN
VARPARAM.VALUE$
      3489**DCL      4016--IMP-PTR  5077>>ASSIGN   5080>>ASSIGN   5082>>ASSIGN   5082>>ASSIGN   5089>>CALL
      5089>>CALL     5091>>ASSIGN   5104>>CALL     5104>>CALL     5106>>ASSIGN   5115>>CALL     5115>>CALL
      5117>>ASSIGN   5117>>ASSIGN   5120>>ASSIGN   5121>>ASSIGN   5121>>ASSIGN   5135>>ASSIGN   5136>>ASSIGN
      5136>>ASSIGN   5139>>ASSIGN   5140>>ASSIGN   5140>>ASSIGN
VARPARAM.VARIABLE.COUNT#
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:475  
      3509**DCL      3523--IMP-SIZ  4984>>ASSIGN   4985>>CALLBLT
VARPARAM.VARIABLE.TEXT#
      3523**DCL      4985>>CALLBLT
VARPARAM$VALUE.BYTES
      4026**DCL      5082<<ASSIGN   5089<>CALL     5104<>CALL     5115<>CALL     5117<<ASSIGN   5121<<ASSIGN
      5136<<ASSIGN   5140<<ASSIGN
VARPARAM$VALUE.LENGTH#
      4024**DCL      4026--IMP-SIZ  5077<<ASSIGN   5080<<ASSIGN   5082>>ASSIGN   5089>>CALL     5091<<ASSIGN
      5104>>CALL     5106<<ASSIGN   5115>>CALL     5117>>ASSIGN   5120<<ASSIGN   5121>>ASSIGN   5135<<ASSIGN
      5136>>ASSIGN   5139<<ASSIGN   5140>>ASSIGN
VD$BUFFER_HEADER
      4659**DCL      5088--ASSIGN
VD$ERR
      4357**DCL      5154--ASSIGN   5171--ASSIGN
VD$ERR.CMDLINE_INDEX#
      4399**DCL      5153<<ASSIGN   5170<<ASSIGN
VD$ERR.ERR
      4394**DCL      5179>>ASSIGN
VD$ERR.ERR.CODE#
      4396**DCL      5151<<ASSIGN   5168<<ASSIGN
VD$ERR.FLAGLEV#
      4399**DCL      5152<<ASSIGN   5169<<ASSIGN
VD$FILE_NODE.DESC.KEY.REP#
      4797**DCL      5132>>IF
VD$FILE_NODE.DESC.KEY.V$
      4797**DCL      5132>>ASSIGN   5132--ASSIGN
VD$KEY
      4695**DCL      5115<>CALL
VD$PORT.CURRENT.KEY.REP#
      4567**DCL      5043>>IF
VD$PORT.CURRENT.KEY.V$
      4567**DCL      5043>>ASSIGN   5043--ASSIGN
VD$PORT.LEVEL.DATA$
      4587**DCL      5056>>ASSIGN
VD$PORT.LEVEL.INTERNAL$
      4587**DCL      5049>>ASSIGN
PL6.E3A0      #008=VDE$PREAD_NAME_FOR_EVAL File=VDE$PARSE.:VDA5TSI               FRI 07/04/97 11:16 Page:476  
VD$TEXTC.BYTES
      4719**DCL      5121>>ASSIGN
VD$TEXTC.LENGTH#
      4717**DCL      4719--IMP-SIZ  5120>>ASSIGN   5121>>ASSIGN
VD$TEXTC_REMOTE.LENGTH#
      4644**DCL      4646--IMP-SIZ  5043--ASSIGN   5132--ASSIGN
VDA$LREAD
      3534**DCL-ENT  5032--CALL
VDG$FORMAT_BLOCK_DESC
      3536**DCL-ENT  5089--CALL
VDG$FORMAT_KEY
      3537**DCL-ENT  5115--CALL
VDG$FORMAT_NUMBER
      3535**DCL-ENT  5104--CALL
VDG$OALLOC
      3538**DCL-ENT  5149--CALL     5166--CALL
VD_$$INCANTATION.V#
      3624**DCL      5052>>IF
VD_6E.EQUALS$
      3555**DCL      5025>>ASSIGN
VD_6E.ERR_TAIL$
      3574**DCL      5179>>ASSIGN
VD_6E.LOCATIONS$
      3555**DCL      5069>>ASSIGN
VD_6E.STATS#
      3575**DCL      5022<<ASSIGN   5022>>ASSIGN
VD_ERR$
      3781**DCL      4357--IMP-PTR  5149<>CALL     5151>>ASSIGN   5152>>ASSIGN   5153>>ASSIGN   5154>>ASSIGN
      5166<>CALL     5168>>ASSIGN   5169>>ASSIGN   5170>>ASSIGN   5171>>ASSIGN
XUE$OPTION.COUNT#
      4952**DCL      4967--IMP-SIZ  5015>>ASSIGN   5017>>CALLBLT
XUE$OPTION.TEXT#
      4967**DCL      5017>>CALLBLT

PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:477  
     3707        1        /*T***********************************************************/
     3708        2        /*T*                                                         */
     3709        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3710        4        /*T*                                                         */
     3711        5        /*T***********************************************************/
     3712        6
     3713        7        /*D* NAME: VDE$PFUNCTIONS
     3714        8            PARAMETERS:
     3715        9                FUNPARAM - An %XUE_FUNPARAM structure specifying the function
     3716       10                    invocation:
     3717       11                    .CODE# is the %T_FN_xxx code for the function to perform.
     3718       12                    .NOPTS# is the number of valid pointers in .OPTION$.
     3719       13                    .OPTION$ is an array of pointers to XUE_OPTION structures.
     3720       14                        Each entry is for a corresponding parameter of the
     3721       15                        function.
     3722       16                    .CPOS# is the char position of the function invocation
     3723       17                        in the command line (for error reporting).
     3724       18                FUNPARAM.OUT$ points to an uninitialized 512-byte buffer.
     3725       19            INPUT:
     3726       20            OUTPUT:
     3727       21                The buffer at FUNPARAM.OUT$ will contain a TEXTC field containing
     3728       22                    the value of the function.
     3729       23                If an error is found:
     3730       24                    FUNPARAM.ERR will contain the error code word, and a
     3731       25                        VD$ERR will be pushed onto the error chain specifying
     3732       26                        the error encountered.
     3733       27            DESCRIPTION:
     3734       28                This routine is called by X$EVAL when it sees the invocation
     3735       29                of a 6Edit-defined function.  This routine evaluates the
     3736       30                function and returns a value to X$EVAL.  What this routine
     3737       31                does depends on the function:
     3738       32
     3739       33                T_FN_CMDVAR
     3740       34                    Call M$CMDVAR to get the value of the IBEX command variable,
     3741       35                        and return the value to X$EVAL.
     3742       36
     3743       37                T_DEF_NAME
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:478  
     3744       38                    Call VDE$PREAD_NAME_FOR_FUNCTION to get the value of an
     3745       39                        internal variable whose name starts with a "$", and
     3746       40                        return the value to X$EVAL.
     3747       41        */
     3748       42
     3749       43        VDE$PFUNCTIONS: PROC (FUNPARAM) ALTRET;
     3750       44
     3751       45
     3752       46        %INCLUDE VD_MACROS_M;
     3753     2261        %INCLUDE VD_NODES0_E;
     3754     2353        %INCLUDE VD_PERR_C;
     3755     2501        %INCLUDE XUE_MACRO_C;
     3756     3245        %INCLUDE CP_6;
     3757     3326
     3758     3327
     3759     3328        %XUE_FUNPARAM (NAME=FUNPARAM, STCLASS=PARAM);
     3760     3432
     3761     3433
     3762     3434    1   DCL I SBIN;
     3763     3435
     3764     3436
     3765     3437    1   DCL VDE$PREAD_NAME_FOR_FUNCTION ENTRY(1) ALTRET;
     3766     3438    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3767     3439    1   DCL VDG$ESCREECH        ENTRY (3);
     3768     3440
     3769     3441
     3770     3442        %VD_6E (STCLASS=SYMREF);
     3771     3478    1   DCL B$TCB$ PTR SYMREF;
     3772     3479
     3773     3480
     3774     3481        %FPT_CMDVAR (FUN=FETCH, NAME=CV_NAME, PRIVATE=NO, STCLASS=STATIC);
     3775     3498        /* CV_NAME is in static in case we have to report an error */
     3776     3499        %VD_TEXTC (NAME=CV_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3777     3640
     3778     3641
     3779     3642
     3780     3643    1   DCL XUE_OPTION$ PTR;
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:479  
     3781     3644    1   DCL VD_ERR$ PTR;
     3782     3645
     3783     3646
     3784     3647        %XUE_OPTION (NAME=XUE$OPTION, STCLASS="BASED(XUE_OPTION$)");
     3785     3703        %VD_TEXTC (NAME=VALUE$TEXTC, STCLASS="BASED(FUNPARAM.OUT$)",
     3786     3704            MXNB=%MXNB_NAME_VALUE);
     3787     3845        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3788     3898        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     3789     3901        %B$ALT;
     3790     3909
     3791     3910
     3792     3911
     3793     3912    1           XUE_OPTION$ = FUNPARAM.OPTION$ (0);
     3794     3913    2           DO CASE (FUNPARAM.CODE#);
     3795     3914
     3796     3915    2            CASE (%T_FN_CMDVAR);
     3797     3916    2              IF FUNPARAM.NOPTS# ~= 1 THEN
     3798     3917    2                 CALL VDG$ESCREECH (FUNPARAM.NOPTS#);
     3799     3918    2              CV_NAME.LENGTH# = XUE$OPTION.COUNT#;
     3800     3919    2              CV_NAME.BYTES = XUE$OPTION.TEXT#;
     3801     3920
     3802     3921    2              FPT_CMDVAR.VALUE_ = VECTOR(VALUE$TEXTC);
     3803     3922    2              CALL M$CMDVAR (FPT_CMDVAR)
     3804     3923    2                ALTRET (CMDVAR_FAILED);
     3805     3924
     3806     3925    2            CASE (%T_DEF_NAME);
     3807     3926    2              CALL VDE$PREAD_NAME_FOR_FUNCTION (FUNPARAM)
     3808     3927    3              WHENALTRETURN DO; ALTRETURN; END;
     3809     3928
     3810     3929    2            CASE (%T_FUNKEY_EXP);
     3811     3930    2              VALUE$TEXTC.LENGTH# = 1;
     3812     3931    3              DO CASE (XUE$OPTION.CODE#);
     3813     3932    3               CASE(ELSE);
     3814     3933    3                 SUBSTR (VALUE$TEXTC.BYTES,0,1) = BINASC(XUE$OPTION.CODE#);
     3815     3934    3                 RETURN;
     3816     3935    3               CASE(511,513); /* BREAK and the "escape" keyname */
     3817     3936    3                 VALUE$TEXTC.LENGTH# = 2; /* Result is an escape sequence */
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:480  
     3818     3937    3                 SUBSTR (VALUE$TEXTC.BYTES,1,1) = BINASC(XUE$OPTION.CODE#);
     3819     3938    3                 SUBSTR (VALUE$TEXTC.BYTES,0,1) = BINASC(511);
     3820     3939    3                 RETURN;
     3821     3940    3               CASE(512); /* Illegal format ($key(X'nn')) */
     3822     3941        /*            FUNPARAM.ERR.CODE = %E$KEYNAME_NOT_SIMPLE;
     3823     3942                      GOTO REPORT_ERROR; */
     3824     3943    3               CASE(514); /* Illegal position (not first) */
     3825     3944    3                 FUNPARAM.ERR.CODE = %E$KEYNAME_NOT_FIRST;
     3826     3945    3                 GOTO REPORT_ERROR;
     3827     3946    3               END;
     3828     3947
     3829     3948    2            CASE (%T_CNTL_EXP);
     3830     3949    2              I = XUE$OPTION.COUNT#;
     3831     3950    2              VALUE$TEXTC.LENGTH# = I;
     3832     3951    3              DO WHILE I>0;
     3833     3952    3                 I = I-1;
     3834     3953    3                 SUBSTR (VALUE$TEXTC.BYTES,I,1) = BITASC ('037'O & ASCBIT (
     3835     3954    3                   SUBSTR (XUE$OPTION.TEXT#,I,1) ) );
     3836     3955    3                 END;
     3837     3956
     3838     3957    2            CASE (ELSE);
     3839     3958    2              CALL VDG$ESCREECH (FUNPARAM.CODE#);
     3840     3959    2            END;
     3841     3960
     3842     3961    1           RETURN;
     3843     3962
     3844     3963
     3845     3964    1   CMDVAR_FAILED:
     3846     3965    1           FUNPARAM.ERR_POS# = FUNPARAM.CPOS#;
     3847     3966    1           FUNPARAM.ERR = B$TCB.ALT$->B$ALT.ERR;
     3848     3967    1   REPORT_ERROR: ;
     3849     3968    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     3850     3969    1             ALTRET (OALLOC_FAILED);
     3851     3970    1           VD$ERR.ERR = FUNPARAM.ERR;
     3852     3971    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     3853     3972    1           VD$ERR.CMDLINE_INDEX# = FUNPARAM.CPOS#;
     3854     3973    1           ALTRETURN;
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:481  
     3855     3974
     3856     3975
     3857     3976    1   OALLOC_FAILED: ;
     3858     3977    1           FUNPARAM.ERR = VD_6E.ERR_TAIL$->VD$ERR.ERR;
     3859     3978    1           ALTRETURN;
     3860     3979
     3861     3980    1   END VDE$PFUNCTIONS;

PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:482  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDE$PFUNCTIONS.

   Procedure VDE$PFUNCTIONS requires 175 words for executable code.
   Procedure VDE$PFUNCTIONS requires 10 words of local(AUTO) storage.

    No errors detected in file VDE$PARSE.:VDA5TSI    .

PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:483  

 Object Unit name= VDE$PFUNCTIONS                             File name= VDE$PARSE.:VDA5TOU
 UTS= JUL 04 '97 11:16:21.84 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    22     26  VDE$PFUNCTIONS
    2   Proc  even  none   175    257  VDE$PFUNCTIONS
    3  RoData even  none     5      5  VDE$PFUNCTIONS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  VDE$PFUNCTIONS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDE$PREAD_NAME_FOR_FUNCTION
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:484  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 B$TCB$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:485  


     3707        1        /*T***********************************************************/
     3708        2        /*T*                                                         */
     3709        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3710        4        /*T*                                                         */
     3711        5        /*T***********************************************************/
     3712        6
     3713        7        /*D* NAME: VDE$PFUNCTIONS
     3714        8            PARAMETERS:
     3715        9                FUNPARAM - An %XUE_FUNPARAM structure specifying the function
     3716       10                    invocation:
     3717       11                    .CODE# is the %T_FN_xxx code for the function to perform.
     3718       12                    .NOPTS# is the number of valid pointers in .OPTION$.
     3719       13                    .OPTION$ is an array of pointers to XUE_OPTION structures.
     3720       14                        Each entry is for a corresponding parameter of the
     3721       15                        function.
     3722       16                    .CPOS# is the char position of the function invocation
     3723       17                        in the command line (for error reporting).
     3724       18                FUNPARAM.OUT$ points to an uninitialized 512-byte buffer.
     3725       19            INPUT:
     3726       20            OUTPUT:
     3727       21                The buffer at FUNPARAM.OUT$ will contain a TEXTC field containing
     3728       22                    the value of the function.
     3729       23                If an error is found:
     3730       24                    FUNPARAM.ERR will contain the error code word, and a
     3731       25                        VD$ERR will be pushed onto the error chain specifying
     3732       26                        the error encountered.
     3733       27            DESCRIPTION:
     3734       28                This routine is called by X$EVAL when it sees the invocation
     3735       29                of a 6Edit-defined function.  This routine evaluates the
     3736       30                function and returns a value to X$EVAL.  What this routine
     3737       31                does depends on the function:
     3738       32
     3739       33                T_FN_CMDVAR
     3740       34                    Call M$CMDVAR to get the value of the IBEX command variable,
     3741       35                        and return the value to X$EVAL.
     3742       36
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:486  
     3743       37                T_DEF_NAME
     3744       38                    Call VDE$PREAD_NAME_FOR_FUNCTION to get the value of an
     3745       39                        internal variable whose name starts with a "$", and
     3746       40                        return the value to X$EVAL.
     3747       41        */
     3748       42
     3749       43        VDE$PFUNCTIONS: PROC (FUNPARAM) ALTRET;

     43  2 000000   000000 700200 xent  VDE$PFUNCTI* TSX0  ! X66_AUTO_1
         2 000001   000012 000001                    ZERO    10,1

     3750       44
     3751       45
     3752       46        %INCLUDE VD_MACROS_M;
     3753     2261        %INCLUDE VD_NODES0_E;
     3754     2353        %INCLUDE VD_PERR_C;
     3755     2501        %INCLUDE XUE_MACRO_C;
     3756     3245        %INCLUDE CP_6;
     3757     3326
     3758     3327
     3759     3328        %XUE_FUNPARAM (NAME=FUNPARAM, STCLASS=PARAM);
     3760     3432
     3761     3433
     3762     3434    1   DCL I SBIN;
     3763     3435
     3764     3436
     3765     3437    1   DCL VDE$PREAD_NAME_FOR_FUNCTION ENTRY(1) ALTRET;
     3766     3438    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     3767     3439    1   DCL VDG$ESCREECH        ENTRY (3);
     3768     3440
     3769     3441
     3770     3442        %VD_6E (STCLASS=SYMREF);
     3771     3478    1   DCL B$TCB$ PTR SYMREF;
     3772     3479
     3773     3480
     3774     3481        %FPT_CMDVAR (FUN=FETCH, NAME=CV_NAME, PRIVATE=NO, STCLASS=STATIC);
     3775     3498        /* CV_NAME is in static in case we have to report an error */
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:487  
     3776     3499        %VD_TEXTC (NAME=CV_NAME, STCLASS=STATIC, MXNB=%MXNB_NAME);
     3777     3640
     3778     3641
     3779     3642
     3780     3643    1   DCL XUE_OPTION$ PTR;
     3781     3644    1   DCL VD_ERR$ PTR;
     3782     3645
     3783     3646
     3784     3647        %XUE_OPTION (NAME=XUE$OPTION, STCLASS="BASED(XUE_OPTION$)");
     3785     3703        %VD_TEXTC (NAME=VALUE$TEXTC, STCLASS="BASED(FUNPARAM.OUT$)",
     3786     3704            MXNB=%MXNB_NAME_VALUE);
     3787     3845        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     3788     3898        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
     3789     3901        %B$ALT;
     3790     3909
     3791     3910
     3792     3911
     3793     3912    1           XUE_OPTION$ = FUNPARAM.OPTION$ (0);

   3912  2 000002   200003 470500                    LDP0    @FUNPARAM,,AUTO
         2 000003   000007 236100                    LDQ     7,,PR0
         2 000004   200005 756100                    STQ     XUE_OPTION$,,AUTO

     3794     3913    2           DO CASE (FUNPARAM.CODE#);

   3913  2 000005   000000 235100                    LDA     0,,PR0
         2 000006   002057 135007                    SBLA    1071,DL
         2 000007   000015 115007                    CMPA    13,DL
         2 000010   000012 602005 2                  TNC     s:3913+5,AL
         2 000011   000213 710000 2                  TRA     s:3958
         2 000012   000027 710000 2                  TRA     s:3916
         2 000013   000065 710000 2                  TRA     s:3926
         2 000014   000213 710000 2                  TRA     s:3958
         2 000015   000213 710000 2                  TRA     s:3958
         2 000016   000213 710000 2                  TRA     s:3958
         2 000017   000213 710000 2                  TRA     s:3958
         2 000020   000213 710000 2                  TRA     s:3958
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:488  
         2 000021   000213 710000 2                  TRA     s:3958
         2 000022   000213 710000 2                  TRA     s:3958
         2 000023   000213 710000 2                  TRA     s:3958
         2 000024   000213 710000 2                  TRA     s:3958
         2 000025   000074 710000 2                  TRA     s:3930
         2 000026   000152 710000 2                  TRA     s:3949

     3795     3914
     3796     3915    2            CASE (%T_FN_CMDVAR);

     3797     3916    2              IF FUNPARAM.NOPTS# ~= 1 THEN

   3916  2 000027   000006 235100                    LDA     6,,PR0
         2 000030   000001 115007                    CMPA    1,DL
         2 000031   000041 600000 2                  TZE     s:3918

     3798     3917    2                 CALL VDG$ESCREECH (FUNPARAM.NOPTS#);

   3917  2 000032   200003 236100                    LDQ     @FUNPARAM,,AUTO
         2 000033   000006 036003                    ADLQ    6,DU
         2 000034   200010 756100                    STQ     VD_ERR$+2,,AUTO
         2 000035   200010 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000036   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000037   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000040   000000 011000                    NOP     0

     3799     3918    2              CV_NAME.LENGTH# = XUE$OPTION.COUNT#;

   3918  2 000041   200005 470500                    LDP0    XUE_OPTION$,,AUTO
         2 000042   000002 236100                    LDQ     2,,PR0
         2 000043   000016 552040 1                  STBQ    CV_NAME,'40'O

     3800     3919    2              CV_NAME.BYTES = XUE$OPTION.TEXT#;

   3919  2 000044   000002 236100                    LDQ     2,,PR0
         2 000045   000033 772000                    QRL     27
         2 000046   000000 620006                    EAX0    0,QL
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:489  
         2 000047   040000 100540                    MLR     fill='040'O
         2 000050   000002 200010                    ADSC9   2,,PR0                   cn=1,n=*X0
         2 000051   000016 200037 1                  ADSC9   CV_NAME                  cn=1,n=31

     3801     3920
     3802     3921    2              FPT_CMDVAR.VALUE_ = VECTOR(VALUE$TEXTC);

   3921  2 000052   200003 471500                    LDP1    @FUNPARAM,,AUTO
         2 000053   100004 473500                    LDP3    4,,PR1
         2 000054   000000 235000 3                  LDA     0
         2 000055   200010 453500                    STP3    VD_ERR$+2,,AUTO
         2 000056   200010 236100                    LDQ     VD_ERR$+2,,AUTO
         2 000057   000004 757000 1                  STAQ    FPT_CMDVAR+4

     3803     3922    2              CALL M$CMDVAR (FPT_CMDVAR)

   3922  2 000060   000000 630400 1                  EPPR0   FPT_CMDVAR
         2 000061   420025 713400                    CLIMB   alt,+8213
         2 000062   402400 401760                    pmme    nvectors=6
         2 000063   000220 702000 2                  TSX2    CMDVAR_FAILED
         2 000064   000217 710000 2                  TRA     s:3961

     3804     3923    2                ALTRET (CMDVAR_FAILED);
     3805     3924
     3806     3925    2            CASE (%T_DEF_NAME);

     3807     3926    2              CALL VDE$PREAD_NAME_FOR_FUNCTION (FUNPARAM)

   3926  2 000065   200003 630500                    EPPR0   @FUNPARAM,,AUTO
         2 000066   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000067   000000 701000 xent               TSX1    VDE$PREAD_NAME_FOR_FUNCTION
         2 000070   000072 702000 2                  TSX2    s:3927
         2 000071   000073 710000 2                  TRA     s:3927+1

     3808     3927    3              WHENALTRETURN DO; ALTRETURN; END;

   3927  2 000072   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:490  
         2 000073   000217 710000 2                  TRA     s:3961

     3809     3928
     3810     3929    2            CASE (%T_FUNKEY_EXP);

     3811     3930    2              VALUE$TEXTC.LENGTH# = 1;

   3930  2 000074   000004 471500                    LDP1    4,,PR0
         2 000075   000100 101400                    MRL     fill='000'O
         2 000076   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000077   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     3812     3931    3              DO CASE (XUE$OPTION.CODE#);

   3931  2 000100   200005 471500                    LDP1    XUE_OPTION$,,AUTO
         2 000101   100000 235100                    LDA     0,,PR1
         2 000102   000777 135007                    SBLA    511,DL
         2 000103   000004 115007                    CMPA    4,DL
         2 000104   000106 602005 2                  TNC     s:3931+6,AL
         2 000105   000112 710000 2                  TRA     s:3933
         2 000106   000123 710000 2                  TRA     s:3936
         2 000107   000151 710000 2                  TRA     s:3946
         2 000110   000123 710000 2                  TRA     s:3936
         2 000111   000144 710000 2                  TRA     s:3944

     3813     3932    3               CASE(ELSE);

     3814     3933    3                 SUBSTR (VALUE$TEXTC.BYTES,0,1) = BINASC(XUE$OPTION.CODE#);

   3933  2 000112   000004 473500                    LDP3    4,,PR0
         2 000113   100000 236100                    LDQ     0,,PR1
         2 000114   000033 736000                    QLS     27
         2 000115   000001 276000 3                  ORQ     1
         2 000116   200010 756100                    STQ     VD_ERR$+2,,AUTO
         2 000117   040100 100500                    MLR     fill='040'O
         2 000120   200010 000004                    ADSC9   VD_ERR$+2,,AUTO          cn=0,n=4
         2 000121   300000 200001                    ADSC9   0,,PR3                   cn=1,n=1
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:491  

     3815     3934    3                 RETURN;

   3934  2 000122   000000 702200 xent               TSX2  ! X66_ARET

     3816     3935    3               CASE(511,513); /* BREAK and the "escape" keyname */

     3817     3936    3                 VALUE$TEXTC.LENGTH# = 2; /* Result is an escape sequence */

   3936  2 000123   000004 473500                    LDP3    4,,PR0
         2 000124   000100 101400                    MRL     fill='000'O
         2 000125   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         2 000126   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     3818     3937    3                 SUBSTR (VALUE$TEXTC.BYTES,1,1) = BINASC(XUE$OPTION.CODE#);

   3937  2 000127   000004 473500                    LDP3    4,,PR0
         2 000130   100000 236100                    LDQ     0,,PR1
         2 000131   000033 736000                    QLS     27
         2 000132   000001 276000 3                  ORQ     1
         2 000133   200010 756100                    STQ     VD_ERR$+2,,AUTO
         2 000134   040100 100500                    MLR     fill='040'O
         2 000135   200010 000004                    ADSC9   VD_ERR$+2,,AUTO          cn=0,n=4
         2 000136   300000 400001                    ADSC9   0,,PR3                   cn=2,n=1

     3819     3938    3                 SUBSTR (VALUE$TEXTC.BYTES,0,1) = BINASC(511);

   3938  2 000137   000004 473500                    LDP3    4,,PR0
         2 000140   040100 100400                    MLR     fill='040'O
         2 000141   000002 000001 3                  ADSC9   2                        cn=0,n=1
         2 000142   300000 200001                    ADSC9   0,,PR3                   cn=1,n=1

     3820     3939    3                 RETURN;

   3939  2 000143   000000 702200 xent               TSX2  ! X66_ARET

     3821     3940    3               CASE(512); /* Illegal format ($key(X'nn')) */
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:492  

     3822     3941        /*            FUNPARAM.ERR.CODE = %E$KEYNAME_NOT_SIMPLE;
     3823     3942                      GOTO REPORT_ERROR; */
     3824     3943    3               CASE(514); /* Illegal position (not first) */

     3825     3944    3                 FUNPARAM.ERR.CODE = %E$KEYNAME_NOT_FIRST;

   3944  2 000144   000003 236100                    LDQ     3,,PR0
         2 000145   000003 376000 3                  ANQ     3
         2 000146   001330 276007                    ORQ     728,DL
         2 000147   000003 756100                    STQ     3,,PR0

     3826     3945    3                 GOTO REPORT_ERROR;

   3945  2 000150   000227 710000 2                  TRA     REPORT_ERROR

     3827     3946    3               END;

   3946  2 000151   000217 710000 2                  TRA     s:3961

     3828     3947
     3829     3948    2            CASE (%T_CNTL_EXP);

     3830     3949    2              I = XUE$OPTION.COUNT#;

   3949  2 000152   200005 471500                    LDP1    XUE_OPTION$,,AUTO
         2 000153   100002 236100                    LDQ     2,,PR1
         2 000154   000033 772000                    QRL     27
         2 000155   200004 756100                    STQ     I,,AUTO

     3831     3950    2              VALUE$TEXTC.LENGTH# = I;

   3950  2 000156   000004 473500                    LDP3    4,,PR0
         2 000157   000100 101500                    MRL     fill='000'O
         2 000160   200004 000004                    ADSC9   I,,AUTO                  cn=0,n=4
         2 000161   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:493  
     3832     3951    3              DO WHILE I>0;

   3951  2 000162   000217 604400 2                  TMOZ    s:3961

     3833     3952    3                 I = I-1;

   3952  2 000163   000001 336007                    LCQ     1,DL
         2 000164   200004 056100                    ASQ     I,,AUTO

     3834     3953    3                 SUBSTR (VALUE$TEXTC.BYTES,I,1) = BITASC ('037'O & ASCBIT (

   3953  2 000165   200003 470500                    LDP0    @FUNPARAM,,AUTO
         2 000166   000004 471500                    LDP1    4,,PR0
         2 000167   200005 473500                    LDP3    XUE_OPTION$,,AUTO
         2 000170   300002 236100                    LDQ     2,,PR3
         2 000171   000033 772000                    QRL     27
         2 000172   200004 235100                    LDA     I,,AUTO
         2 000173   000100 100505                    MLR     fill='000'O
         2 000174   300002 200001                    ADSC9   2,A,PR3                  cn=1,n=1
         2 000175   200010 000004                    ADSC9   VD_ERR$+2,,AUTO          cn=0,n=4
         2 000176   200010 236100                    LDQ     VD_ERR$+2,,AUTO
         2 000177   000022 772000                    QRL     18
         2 000200   000000 620006                    EAX0    0,QL
         2 000201   037000 360003                    ANX0    15872,DU
         2 000202   000000 636010                    EAQ     0,X0
         2 000203   000001 276000 3                  ORQ     1
         2 000204   200011 756100                    STQ     VD_ERR$+3,,AUTO
         2 000205   040105 100500                    MLR     fill='040'O
         2 000206   200011 000004                    ADSC9   VD_ERR$+3,,AUTO          cn=0,n=4
         2 000207   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1

     3835     3954    3                   SUBSTR (XUE$OPTION.TEXT#,I,1) ) );
     3836     3955    3                 END;

   3955  2 000210   000000 115003                    CMPA    0,DU
         2 000211   000163 605400 2                  TPNZ    s:3952
         2 000212   000217 710000 2                  TRA     s:3961
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:494  

     3837     3956
     3838     3957    2            CASE (ELSE);

     3839     3958    2              CALL VDG$ESCREECH (FUNPARAM.CODE#);

   3958  2 000213   200003 630500                    EPPR0   @FUNPARAM,,AUTO
         2 000214   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000215   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000216   000000 011000                    NOP     0

     3840     3959    2            END;

     3841     3960
     3842     3961    1           RETURN;

   3961  2 000217   000000 702200 xent               TSX2  ! X66_ARET

     3843     3962
     3844     3963
     3845     3964    1   CMDVAR_FAILED:
     3846     3965    1           FUNPARAM.ERR_POS# = FUNPARAM.CPOS#;

   3965  2 000220   200003 470500       CMDVAR_FAIL* LDP0    @FUNPARAM,,AUTO
         2 000221   000001 720100                    LXL0    1,,PR0
         2 000222   000002 740100                    STX0    2,,PR0

     3847     3966    1           FUNPARAM.ERR = B$TCB.ALT$->B$ALT.ERR;

   3966  2 000223   000000 471400 xsym               LDP1    B$TCB$
         2 000224   100000 473500                    LDP3    0,,PR1
         2 000225   300102 236100                    LDQ     66,,PR3
         2 000226   000003 756100                    STQ     3,,PR0

   3966  2 000227                       REPORT_ERROR null
     3848     3967    1   REPORT_ERROR: ;
     3849     3968    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:495  

   3968  2 000227   200006 631500                    EPPR1   VD_ERR$,,AUTO
         2 000230   200011 451500                    STP1    VD_ERR$+3,,AUTO
         2 000231   000004 236000 3                  LDQ     4
         2 000232   200010 756100                    STQ     VD_ERR$+2,,AUTO
         2 000233   200010 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000234   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000235   000000 701000 xent               TSX1    VDG$OALLOC
         2 000236   000252 702000 2                  TSX2    OALLOC_FAILED

     3850     3969    1             ALTRET (OALLOC_FAILED);
     3851     3970    1           VD$ERR.ERR = FUNPARAM.ERR;

   3970  2 000237   200003 470500                    LDP0    @FUNPARAM,,AUTO
         2 000240   000003 236100                    LDQ     3,,PR0
         2 000241   200006 471500                    LDP1    VD_ERR$,,AUTO
         2 000242   100002 756100                    STQ     2,,PR1

     3852     3971    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   3971  2 000243   000003 220003                    LDX0    3,DU
         2 000244   200006 471500                    LDP1    VD_ERR$,,AUTO
         2 000245   100003 740100                    STX0    3,,PR1

     3853     3972    1           VD$ERR.CMDLINE_INDEX# = FUNPARAM.CPOS#;

   3972  2 000246   000001 721100                    LXL1    1,,PR0
         2 000247   200006 471500                    LDP1    VD_ERR$,,AUTO
         2 000250   100003 441100                    SXL1    3,,PR1

     3854     3973    1           ALTRETURN;

   3973  2 000251   000000 702200 xent               TSX2  ! X66_AALT

   3972  2 000252                       OALLOC_FAIL* null
     3855     3974
     3856     3975
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:496  
     3857     3976    1   OALLOC_FAILED: ;
     3858     3977    1           FUNPARAM.ERR = VD_6E.ERR_TAIL$->VD$ERR.ERR;

   3977  2 000252   000032 470400 xsym               LDP0    VD_6E+26
         2 000253   000002 236100                    LDQ     2,,PR0
         2 000254   200003 471500                    LDP1    @FUNPARAM,,AUTO
         2 000255   100003 756100                    STQ     3,,PR1

     3859     3978    1           ALTRETURN;

   3978  2 000256   000000 702200 xent               TSX2  ! X66_AALT
     3860     3979
     3861     3980    1   END VDE$PFUNCTIONS;

PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:497  
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   XUE_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_NODES0_E.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDE$PFUNCTIONS.
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:498  

 **** Variables and constants ****

  ****  Section 001  Data  VDE$PFUNCTIONS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/c STRC(288)   r     1 CV_NAME                    0-0-0/d STRC(504)   r     1 FPT_CMDVAR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FUNPARAM                 *0-0-0/w STRC(288)   r     1 FUNPARAM
     4-0-0/w SBIN        r     1 I                          6-0-0/w PTR         r     1 VD_ERR$
     5-0-0/w PTR         r     1 XUE_OPTION$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/c STRC(4608)  r     1 VALUE$TEXTC                0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w ASTR(81)    r     1 XUE$OPTION


   Procedure VDE$PFUNCTIONS requires 175 words for executable code.
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:499  
   Procedure VDE$PFUNCTIONS requires 10 words of local(AUTO) storage.

    No errors detected in file VDE$PARSE.:VDA5TSI    .
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:500  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:501  
          MINI XREF LISTING

B$ALT.CODE
      3903**DCL      3903--REDEF    3904--REDEF    3904--REDEF
B$ALT.ERR
      3904**DCL      3966>>ASSIGN
B$ALT.ERR.ERR#
      3905**DCL      3905--REDEF
B$ALT.EVID
      3904**DCL      3904--REDEF    3904--REDEF
B$TCB.ALT$
      3899**DCL      3966>>ASSIGN
B$TCB$
      3478**DCL      3899--IMP-PTR  3966>>ASSIGN
CMDVAR_FAILED
      3965**LABEL    3922--CALLALT
CV_NAME
      3633**DCL      3492--DCLINIT
CV_NAME.BYTES
      3637**DCL      3919<<ASSIGN
CV_NAME.LENGTH#
      3637**DCL      3918<<ASSIGN
FPT_CMDVAR
      3492**DCL      3922<>CALL
FPT_CMDVAR.V
      3494**DCL      3492--DCLINIT
FPT_CMDVAR.VALUE_
      3492**DCL      3921<<ASSIGN
FUNPARAM
      3342**DCL        43--PROC     3926<>CALL
FUNPARAM.CODE#
      3346**DCL      3913>>DOCASE   3958<>CALL
FUNPARAM.CPOS#
      3353**DCL      3965>>ASSIGN   3972>>ASSIGN
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:502  
FUNPARAM.ERR
      3376**DCL      3966<<ASSIGN   3970>>ASSIGN   3977<<ASSIGN
FUNPARAM.ERR.CODE
      3380**DCL      3944<<ASSIGN
FUNPARAM.ERR_POS#
      3359**DCL      3965<<ASSIGN
FUNPARAM.NOPTS#
      3408**DCL      3916>>IF       3917<>CALL
FUNPARAM.OPTION$
      3422**DCL      3912>>ASSIGN
FUNPARAM.OUT$
      3391**DCL      3838--IMP-PTR  3921>>ASSIGN   3930>>ASSIGN   3933>>ASSIGN   3936>>ASSIGN   3937>>ASSIGN
      3938>>ASSIGN   3950>>ASSIGN   3953>>ASSIGN
I
      3434**DCL      3949<<ASSIGN   3950>>ASSIGN   3951>>DOWHILE  3952<<ASSIGN   3952>>ASSIGN   3953>>ASSIGN
      3953>>ASSIGN
M$CMDVAR
      3323**DCL-ENT  3922--CALL
OALLOC_FAILED
      3972**LABEL    3968--CALLALT
REPORT_ERROR
      3966**LABEL    3945--GOTO
VALUE$TEXTC
      3838**DCL      3921--ASSIGN
VALUE$TEXTC.BYTES
      3842**DCL      3933<<ASSIGN   3937<<ASSIGN   3938<<ASSIGN   3953<<ASSIGN
VALUE$TEXTC.LENGTH#
      3842**DCL      3930<<ASSIGN   3936<<ASSIGN   3950<<ASSIGN
VD$ERR.CMDLINE_INDEX#
      3895**DCL      3972<<ASSIGN
VD$ERR.ERR
      3890**DCL      3970<<ASSIGN   3977>>ASSIGN
VD$ERR.FLAGLEV#
      3895**DCL      3971<<ASSIGN
VDE$PREAD_NAME_FOR_FUNCTION
      3437**DCL-ENT  3926--CALL
PL6.E3A0      #009=VDE$PFUNCTIONS File=VDE$PARSE.:VDA5TSI                        FRI 07/04/97 11:16 Page:503  
VDG$ESCREECH
      3439**DCL-ENT  3917--CALL     3958--CALL
VDG$OALLOC
      3438**DCL-ENT  3968--CALL
VD_6E.ERR_TAIL$
      3474**DCL      3977>>ASSIGN
VD_ERR$
      3644**DCL      3853--IMP-PTR  3968<>CALL     3970>>ASSIGN   3971>>ASSIGN   3972>>ASSIGN
XUE$OPTION.CODE#
      3665**DCL      3931>>DOCASE   3933>>ASSIGN   3937>>ASSIGN
XUE$OPTION.COUNT#
      3678**DCL      3693--IMP-SIZ  3918>>ASSIGN   3919>>ASSIGN   3949>>ASSIGN   3953>>ASSIGN
XUE$OPTION.TEXT#
      3693**DCL      3919>>ASSIGN   3953>>ASSIGN
XUE_OPTION$
      3643**DCL      3661--IMP-PTR  3912<<ASSIGN   3918>>ASSIGN   3919>>ASSIGN   3919>>ASSIGN   3931>>DOCASE
      3933>>ASSIGN   3937>>ASSIGN   3949>>ASSIGN   3953>>ASSIGN   3953>>ASSIGN
