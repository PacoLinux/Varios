VERSION A05

PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:1    
        1        1        /*M* VDG$ENVIRONMENT - Environment control routines for 6Edit */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDG$ENVIRONMENT
       12       12            PURPOSE:  Routines to control 6Edit's operating environment.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDG$EXCON
       17       17                Asynchronous procedure to handle abnormal exits from 6Edit.  VDG$EXCON
       18       18                gets called on any exit; it ignores exits due to M$EXIT or M$ERR.
       19       19                For other exits (such as <CTRL-Y> Quit), we simply call
       20       20                VDG$MTERMINATE_FORCED.
       21       21
       22       22                VDG$EBREAK
       23       23                Asynchronous procedure to handle BREAK-key interrupts.
       24       24                Sets a flag and starts a timer, so if we don't honor the
       25       25                break within a reasonable time, VDG$ETIMER will get
       26       26                us out.
       27       27
       28       28                VDG$EBREAK_ACKNOWLEDGE
       29       29                Synchronous procedure, called by other routines in 6Edit
       30       30                (usually in the Accessor) when they see the break-flag
       31       31                set.  Stops the break-acknowledgement timer and builds
       32       32                a VD$ERR for the break message.
       33       33
       34       34                VDG$ETIMER
       35       35                Asynchronous procedure to handle timer interrupts.  The
       36       36                timer is used to time-out our response to a BREAK-key
       37       37                interrupt,
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:2    
       38       38        *N**N*  and to give the user a "Working..." message if we think
       39       39        *N**N*  too long with no change on the screen.
       40       40
       41       41                VDG$ETRAP
       42       42                Asynchronous procedure to handle hardware fault interrupts.
       43       43
       44       44                VDG$ESCREECH
       45       45                When 6Edit detects an internal error (logical inconsistency or
       46       46                something which simply shouldn't happen), VDG$ESCREECH will
       47       47                be called.  Normally, we never return from VDG$ESCREECH;
       48       48                however, if VDG$ETRAP called us to report a hardware
       49       49                fault, we want to return to him so he can do his funny
       50       50                ASYNC-return (which will retry the instruction and force
       51       51                the monitor to report the error also).
       52       52
       53       53                VDG$EREPORT_ERROR
       54       54                Given an error code and optional other info in a linked
       55       55                chain of VD$ERR structures (whose root is in VD_6E),
       56       56                report the errors to the user.
       57       57                Chains of VD$ERRs are used to report multiple or complex
       58       58                error conditions comprising several distinct error messages.
       59       59                Fatal errors and errors detected during
       60       60                initialization are not displayed yet; instead, VDG$MTERMINATE
       61       61                is called to clean things up and then display the fatal
       62       62                error message.
       63       63                Chains of error reports will be saved
       64       64                in case the user later types a question-mark command (? or ??).
       65       65        */
       66       66
       67       67        /*D* NAME: VDG$EXCON
       68       68            PARAMETERS:
       69       69                None.
       70       70            INPUT:
       71       71                B$ECCB.XCONF must tell if the exit control frame is on the exceptional-
       72       72                    condition stack or if it's in the altret frame of the TCB.
       73       73                An exit control frame (B$XCON) must be on the exceptional-condition
       74       74                    stack in the TCB (B$TCB.STK$) -- or, if no room there, in the
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:3    
       75       75                    altret frame of the TCB (B$TCB.ALT$).
       76       76                    The B$XCON frame must describe why 6Edit is being exited.
       77       77            OUTPUT:
       78       78            DESCRIPTION:
       79       79                If we're exiting because of an M$EXIT or M$ERR, just continue -- let
       80       80                    the monitor continue running us down.
       81       81                Else, call VDG$MTERMINATE_FORCED to restore the terminal environment,
       82       82                    etc.
       83       83        */
       84       84
       85       85        VDG$EXCON: PROC ASYNC;
       86       86
       87       87        %INCLUDE CP_6;
       88      168
       89      169    1   DCL VDG$MTERMINATE_FORCED ENTRY;
       90      170
       91      171    1   DCL B$ECCB$ PTR SYMREF;
       92      172    1   DCL B$TCB$ PTR SYMREF;
       93      173
       94      174
       95      175        %FPT_XCON (STCLASS=CONSTANT, UENTRY=NIL);   /* Revoke exit control */
       96      189
       97      190
       98      191    1   DCL B_XCON$ PTR;
       99      192
      100      193
      101      194        %B$TCB (STCLASS="BASED(B$TCB$)");
      102      197        %B$ECCB (STCLASS="BASED(B$ECCB$)");
      103      205        %B$XCON (STCLASS="BASED(B_XCON$)");
      104      215
      105      216
      106      217    1           IF B$ECCB.XCONF.NOTCB THEN
      107      218    1              B_XCON$ = B$TCB.ALT$;
      108      219    1           ELSE
      109      220    1              B_XCON$ = B$TCB.STK$;
      110      221
      111      222    2           IF (NOT B$XCON.RNST.XXX) AND (NOT B$XCON.RNST.ERR) THEN DO;
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:4    
      112      223                   /* Abnormal abort:  force termination */
      113      224    2              CALL VDG$MTERMINATE_FORCED;
      114      225    2              END;
      115      226
      116      227                /* Otherwise, just continue exiting normally */
      117      228    1           CALL M$XCON (FPT_XCON);
      118      229
      119      230    1   END VDG$EXCON;
      120      231        %EOD;

PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:5    
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EXCON.

   Procedure VDG$EXCON requires 26 words for executable code.
   Procedure VDG$EXCON requires 4 words of local(AUTO) storage.

PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:6    

 Object Unit name= VDG$EXCON                                  File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:25.20 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      6      6  VDG$EXCON
    2   Proc  even  none    26     32  VDG$EXCON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  VDG$EXCON

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 VDG$MTERMINATE_FORCED
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$ECCB$                               B$TCB$
     B_VECTNIL
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:7    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:8    


        1        1        /*M* VDG$ENVIRONMENT - Environment control routines for 6Edit */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDG$ENVIRONMENT
       12       12            PURPOSE:  Routines to control 6Edit's operating environment.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDG$EXCON
       17       17                Asynchronous procedure to handle abnormal exits from 6Edit.  VDG$EXCON
       18       18                gets called on any exit; it ignores exits due to M$EXIT or M$ERR.
       19       19                For other exits (such as <CTRL-Y> Quit), we simply call
       20       20                VDG$MTERMINATE_FORCED.
       21       21
       22       22                VDG$EBREAK
       23       23                Asynchronous procedure to handle BREAK-key interrupts.
       24       24                Sets a flag and starts a timer, so if we don't honor the
       25       25                break within a reasonable time, VDG$ETIMER will get
       26       26                us out.
       27       27
       28       28                VDG$EBREAK_ACKNOWLEDGE
       29       29                Synchronous procedure, called by other routines in 6Edit
       30       30                (usually in the Accessor) when they see the break-flag
       31       31                set.  Stops the break-acknowledgement timer and builds
       32       32                a VD$ERR for the break message.
       33       33
       34       34                VDG$ETIMER
       35       35                Asynchronous procedure to handle timer interrupts.  The
       36       36                timer is used to time-out our response to a BREAK-key
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:9    
       37       37                interrupt,
       38       38        *N**N*  and to give the user a "Working..." message if we think
       39       39        *N**N*  too long with no change on the screen.
       40       40
       41       41                VDG$ETRAP
       42       42                Asynchronous procedure to handle hardware fault interrupts.
       43       43
       44       44                VDG$ESCREECH
       45       45                When 6Edit detects an internal error (logical inconsistency or
       46       46                something which simply shouldn't happen), VDG$ESCREECH will
       47       47                be called.  Normally, we never return from VDG$ESCREECH;
       48       48                however, if VDG$ETRAP called us to report a hardware
       49       49                fault, we want to return to him so he can do his funny
       50       50                ASYNC-return (which will retry the instruction and force
       51       51                the monitor to report the error also).
       52       52
       53       53                VDG$EREPORT_ERROR
       54       54                Given an error code and optional other info in a linked
       55       55                chain of VD$ERR structures (whose root is in VD_6E),
       56       56                report the errors to the user.
       57       57                Chains of VD$ERRs are used to report multiple or complex
       58       58                error conditions comprising several distinct error messages.
       59       59                Fatal errors and errors detected during
       60       60                initialization are not displayed yet; instead, VDG$MTERMINATE
       61       61                is called to clean things up and then display the fatal
       62       62                error message.
       63       63                Chains of error reports will be saved
       64       64                in case the user later types a question-mark command (? or ??).
       65       65        */
       66       66
       67       67        /*D* NAME: VDG$EXCON
       68       68            PARAMETERS:
       69       69                None.
       70       70            INPUT:
       71       71                B$ECCB.XCONF must tell if the exit control frame is on the exceptional-
       72       72                    condition stack or if it's in the altret frame of the TCB.
       73       73                An exit control frame (B$XCON) must be on the exceptional-condition
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:10   
       74       74                    stack in the TCB (B$TCB.STK$) -- or, if no room there, in the
       75       75                    altret frame of the TCB (B$TCB.ALT$).
       76       76                    The B$XCON frame must describe why 6Edit is being exited.
       77       77            OUTPUT:
       78       78            DESCRIPTION:
       79       79                If we're exiting because of an M$EXIT or M$ERR, just continue -- let
       80       80                    the monitor continue running us down.
       81       81                Else, call VDG$MTERMINATE_FORCED to restore the terminal environment,
       82       82                    etc.
       83       83        */
       84       84
       85       85        VDG$EXCON: PROC ASYNC;

     85  2 000000   000000 700200 xent  VDG$EXCON    TSX0  ! X66_AAUTO
         2 000001   000004 000000                    ZERO    4,0

       86       86
       87       87        %INCLUDE CP_6;
       88      168
       89      169    1   DCL VDG$MTERMINATE_FORCED ENTRY;
       90      170
       91      171    1   DCL B$ECCB$ PTR SYMREF;
       92      172    1   DCL B$TCB$ PTR SYMREF;
       93      173
       94      174
       95      175        %FPT_XCON (STCLASS=CONSTANT, UENTRY=NIL);   /* Revoke exit control */
       96      189
       97      190
       98      191    1   DCL B_XCON$ PTR;
       99      192
      100      193
      101      194        %B$TCB (STCLASS="BASED(B$TCB$)");
      102      197        %B$ECCB (STCLASS="BASED(B$ECCB$)");
      103      205        %B$XCON (STCLASS="BASED(B_XCON$)");
      104      215
      105      216
      106      217    1           IF B$ECCB.XCONF.NOTCB THEN
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:11   

    217  2 000002   000000 470400 xsym               LDP0    B$ECCB$
         2 000003   000004 236100                    LDQ     4,,PR0
         2 000004   000200 316003                    CANQ    128,DU
         2 000005   000012 600000 2                  TZE     s:220

      107      218    1              B_XCON$ = B$TCB.ALT$;

    218  2 000006   000000 471400 xsym               LDP1    B$TCB$
         2 000007   100000 236100                    LDQ     0,,PR1
         2 000010   200003 756100                    STQ     B_XCON$,,AUTO
         2 000011   000015 710000 2                  TRA     s:222

      108      219    1           ELSE
      109      220    1              B_XCON$ = B$TCB.STK$;

    220  2 000012   000000 471400 xsym               LDP1    B$TCB$
         2 000013   100001 236100                    LDQ     1,,PR1
         2 000014   200003 756100                    STQ     B_XCON$,,AUTO

      110      221
      111      222    2           IF (NOT B$XCON.RNST.XXX) AND (NOT B$XCON.RNST.ERR) THEN DO;

    222  2 000015   200003 473500                    LDP3    B_XCON$,,AUTO
         2 000016   300101 236100                    LDQ     65,,PR3
         2 000017   002000 316003                    CANQ    1024,DU
         2 000020   000026 601000 2                  TNZ     s:228
         2 000021   300101 430100                    FSZN    65,,PR3
         2 000022   000026 604000 2                  TMI     s:228

      112      223                   /* Abnormal abort:  force termination */
      113      224    2              CALL VDG$MTERMINATE_FORCED;

    224  2 000023   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000024   000000 701000 xent               TSX1    VDG$MTERMINATE_FORCED
         2 000025   000000 011000                    NOP     0

PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:12   
      114      225    2              END;

      115      226
      116      227                /* Otherwise, just continue exiting normally */
      117      228    1           CALL M$XCON (FPT_XCON);

    228  2 000026   000000 630400 1                  EPPR0   FPT_XCON
         2 000027   010003 713400                    CLIMB   4099
         2 000030   400400 401760                    pmme    nvectors=2

      118      229
      119      230    1   END VDG$EXCON;

    230  2 000031   000000 702200 xent               TSX2  ! X66_AARET
      120      231        %EOD;

PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:13   
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EXCON.
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:14   

 **** Variables and constants ****

  ****  Section 001 RoData VDG$EXCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_XCON

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 B_XCON$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$ECCB$                    0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$ECCB                     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(2448)  r     1 B$XCON


   Procedure VDG$EXCON requires 26 words for executable code.
   Procedure VDG$EXCON requires 4 words of local(AUTO) storage.
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDG$EXCON File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:16   
          MINI XREF LISTING

B$ECCB.XCONF.NOTCB
       200**DCL       217>>IF
B$ECCB$
       171**DCL       198--IMP-PTR   217>>IF
B$TCB.ALT$
       195**DCL       218>>ASSIGN
B$TCB.STK$
       195**DCL       220>>ASSIGN
B$TCB$
       172**DCL       195--IMP-PTR   218>>ASSIGN    220>>ASSIGN
B$XCON.ERR.ERR#
       212**DCL       212--REDEF
B$XCON.LIMIT.MEM
       210**DCL       210--REDEF
B$XCON.RNST.ERR
       208**DCL       222>>IF
B$XCON.RNST.XXX
       208**DCL       222>>IF
B_XCON$
       191**DCL       206--IMP-PTR   218<<ASSIGN    220<<ASSIGN    222>>IF        222>>IF
FPT_XCON
       186**DCL       228<>CALL
FPT_XCON.V
       187**DCL       186--DCLINIT
M$XCON
       151**DCL-ENT   228--CALL
VDG$MTERMINATE_FORCED
       169**DCL-ENT   224--CALL

PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:17   
      121        1        /*T***********************************************************/
      122        2        /*T*                                                         */
      123        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      124        4        /*T*                                                         */
      125        5        /*T***********************************************************/
      126        6
      127        7        /*D* NAME: VDG$EBREAK
      128        8            PARAMETERS:
      129        9                None.
      130       10            INPUT:
      131       11                VD_6E.INTERRUPT must be initialized:
      132       12                    .STATE = %INST_PROCESSING or %INST_READING to recognize BREAKs.
      133       13                    .STATE = %INST_BREAK_QUEUED:  the user has hit BREAK once already,
      134       14                        but the mainline code hasn't yet acknowledged it.
      135       15                        Ignore this BREAK; if the mainline code is ignoring the
      136       16                        BREAKs, the timer will eventually run out and force the
      137       17                        mainline code to abort.
      138       18                    .STATE = %INST_HW_TRAPPED:  the hardward has faulted.  Ignore
      139       19                        BREAKs.
      140       20                    .STATE = %INST_SCREECHING:  someone has called VDG$ESCREECH and
      141       21                        we're in the process of reporting the screech.  Ignore BREAKs.
      142       22            OUTPUT:
      143       23                VD_6E.INTERRUPT will be set to the BREAK_QUEUED state.
      144       24            DESCRIPTION:
      145       25                Set the appropriate state in VD_6E.INTERRUPT.
      146       26                Start a timer; if the mainline code doesn't acknowledge the BREAK
      147       27                    within a fixed response time, then VDG$ETIMER will abort us
      148       28                    cleanly.
      149       29        */
      150       30
      151       31        VDG$EBREAK: PROC ASYNC;
      152       32
      153       33        %INCLUDE CP_6;
      154      114        %INCLUDE VD_MACROS_M;
      155     2329
      156     2330
      157     2331    1   DCL VDG$MTERMINATE          ENTRY;
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:18   
      158     2332    1   DCL VDG$ETIMER              ENTRY ASYNC;
      159     2333    1   DCL VDG$ESCREECH            ENTRY (3);
      160     2334
      161     2335
      162     2336        %VD_6E (STCLASS=SYMREF);
      163     2372
      164     2373        %FPT_TRMPRG (RSTBRK=YES);
      165     2402        %FPT_STIMER (UENTRY=VDG$ETIMER, UNITS=%MX_INT_RESPONSE,
      166     2403            UTYPE=TUN);
      167     2418
      168     2419
      169     2420
      170     2421                %INCREMENT (INDX=%STG_BREAK_HIT);
      171     2424
      172     2425    1           CALL M$TRMPRG (FPT_TRMPRG)
      173     2426    2           WHENALTRETURN DO;
      174     2427    2              CALL VDG$ESCREECH;
      175     2428    2              END;
      176     2429
      177     2430    1   STATE_CASES:
      178     2431    2           DO CASE VD_6E.INTERRUPT.STATE#;
      179     2432
      180     2433    2            CASE (%INST_PROCESSING, %INST_READING);
      181     2434    2              VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED;
      182     2435    2              CALL M$STIMER (FPT_STIMER)
      183     2436    3              WHENALTRETURN DO;
      184     2437    3                 CALL VDG$ESCREECH;
      185     2438    3                 END;
      186     2439
      187     2440    2            CASE (%INST_HW_TRAPPED, %INST_SCREECHING, %INST_BREAK_QUEUED);
      188     2441                   /* Ignore */
      189     2442    2            CASE (ELSE);
      190     2443    2              CALL VDG$MTERMINATE;
      191     2444
      192     2445    2            END STATE_CASES;
      193     2446
      194     2447
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:19   
      195     2448
      196     2449    1   END VDG$EBREAK;
      197     2450        %EOD;

PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:20   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EBREAK.

   Procedure VDG$EBREAK requires 36 words for executable code.
   Procedure VDG$EBREAK requires 4 words of local(AUTO) storage.

PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:21   

 Object Unit name= VDG$EBREAK                                 File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:29.72 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    12     14  VDG$EBREAK
    2   Proc  even  none    36     44  VDG$EBREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  VDG$EBREAK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 VDG$ETIMER
         yes           Std       3 VDG$ESCREECH
         yes           Std       0 VDG$MTERMINATE
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 B_VECTNIL
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:22   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:23   


      121        1        /*T***********************************************************/
      122        2        /*T*                                                         */
      123        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      124        4        /*T*                                                         */
      125        5        /*T***********************************************************/
      126        6
      127        7        /*D* NAME: VDG$EBREAK
      128        8            PARAMETERS:
      129        9                None.
      130       10            INPUT:
      131       11                VD_6E.INTERRUPT must be initialized:
      132       12                    .STATE = %INST_PROCESSING or %INST_READING to recognize BREAKs.
      133       13                    .STATE = %INST_BREAK_QUEUED:  the user has hit BREAK once already,
      134       14                        but the mainline code hasn't yet acknowledged it.
      135       15                        Ignore this BREAK; if the mainline code is ignoring the
      136       16                        BREAKs, the timer will eventually run out and force the
      137       17                        mainline code to abort.
      138       18                    .STATE = %INST_HW_TRAPPED:  the hardward has faulted.  Ignore
      139       19                        BREAKs.
      140       20                    .STATE = %INST_SCREECHING:  someone has called VDG$ESCREECH and
      141       21                        we're in the process of reporting the screech.  Ignore BREAKs.
      142       22            OUTPUT:
      143       23                VD_6E.INTERRUPT will be set to the BREAK_QUEUED state.
      144       24            DESCRIPTION:
      145       25                Set the appropriate state in VD_6E.INTERRUPT.
      146       26                Start a timer; if the mainline code doesn't acknowledge the BREAK
      147       27                    within a fixed response time, then VDG$ETIMER will abort us
      148       28                    cleanly.
      149       29        */
      150       30
      151       31        VDG$EBREAK: PROC ASYNC;

     31  2 000000   000000 700200 xent  VDG$EBREAK   TSX0  ! X66_AAUTO
         2 000001   000004 000000                    ZERO    4,0

      152       32
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:24   
      153       33        %INCLUDE CP_6;
      154      114        %INCLUDE VD_MACROS_M;
      155     2329
      156     2330
      157     2331    1   DCL VDG$MTERMINATE          ENTRY;
      158     2332    1   DCL VDG$ETIMER              ENTRY ASYNC;
      159     2333    1   DCL VDG$ESCREECH            ENTRY (3);
      160     2334
      161     2335
      162     2336        %VD_6E (STCLASS=SYMREF);
      163     2372
      164     2373        %FPT_TRMPRG (RSTBRK=YES);
      165     2402        %FPT_STIMER (UENTRY=VDG$ETIMER, UNITS=%MX_INT_RESPONSE,
      166     2403            UTYPE=TUN);
      167     2418
      168     2419
      169     2420
      170     2421                %INCREMENT (INDX=%STG_BREAK_HIT);

   2422  2 000002   000036 054000 xsym               AOS     VD_6E+30

      171     2424
      172     2425    1           CALL M$TRMPRG (FPT_TRMPRG)

   2425  2 000003   000000 630400 1                  EPPR0   FPT_TRMPRG
         2 000004   560004 713400                    CLIMB   alt,+57348
         2 000005   400400 401760                    pmme    nvectors=2
         2 000006   000010 702000 2                  TSX2    s:2427
         2 000007   000013 710000 2                  TRA     STATE_CASES

      173     2426    2           WHENALTRETURN DO;

      174     2427    2              CALL VDG$ESCREECH;

   2427  2 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000011   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000012   000000 011000                    NOP     0
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:25   

      175     2428    2              END;

      176     2429
      177     2430    1   STATE_CASES:
      178     2431    2           DO CASE VD_6E.INTERRUPT.STATE#;

   2431  2 000013   000027 220000 xsym  STATE_CASES  LDX0    VD_6E+23
         2 000014   000006 100003                    CMPX0   6,DU
         2 000015   000017 602010 2                  TNC     STATE_CASES+4,X0
         2 000016   000040 710000 2                  TRA     s:2443
         2 000017   000040 710000 2                  TRA     s:2443
         2 000020   000025 710000 2                  TRA     s:2434
         2 000021   000025 710000 2                  TRA     s:2434
         2 000022   000043 710000 2                  TRA     s:2449
         2 000023   000043 710000 2                  TRA     s:2449
         2 000024   000043 710000 2                  TRA     s:2449

      179     2432
      180     2433    2            CASE (%INST_PROCESSING, %INST_READING);

      181     2434    2              VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED;

   2434  2 000025   000003 221003                    LDX1    3,DU
         2 000026   000027 741000 xsym               STX1    VD_6E+23

      182     2435    2              CALL M$STIMER (FPT_STIMER)

   2435  2 000027   000010 630400 1                  EPPR0   FPT_STIMER
         2 000030   410000 713400                    CLIMB   alt,+4096
         2 000031   400000 401760                    pmme    nvectors=1
         2 000032   000034 702000 2                  TSX2    s:2437
         2 000033   000037 710000 2                  TRA     s:2438

      183     2436    3              WHENALTRETURN DO;

      184     2437    3                 CALL VDG$ESCREECH;
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:26   

   2437  2 000034   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000035   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000036   000000 011000                    NOP     0

      185     2438    3                 END;

   2438  2 000037   000043 710000 2                  TRA     s:2449

      186     2439
      187     2440    2            CASE (%INST_HW_TRAPPED, %INST_SCREECHING, %INST_BREAK_QUEUED);

      188     2441                   /* Ignore */
      189     2442    2            CASE (ELSE);

      190     2443    2              CALL VDG$MTERMINATE;

   2443  2 000040   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000041   000000 701000 xent               TSX1    VDG$MTERMINATE
         2 000042   000000 011000                    NOP     0

      191     2444
      192     2445    2            END STATE_CASES;

      193     2446
      194     2447
      195     2448
      196     2449    1   END VDG$EBREAK;

   2449  2 000043   000000 702200 xent               TSX2  ! X66_AARET
      197     2450        %EOD;

PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:27   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EBREAK.
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:28   

 **** Variables and constants ****

  ****  Section 001  Data  VDG$EBREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/d STRC(144)   r     1 FPT_STIMER                 0-0-0/d STRC(288)   r     1 FPT_TRMPRG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure VDG$EBREAK requires 36 words for executable code.
   Procedure VDG$EBREAK requires 4 words of local(AUTO) storage.
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:29   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDG$EBREAK File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:30   
          MINI XREF LISTING

FPT_STIMER
      2414**DCL      2435<>CALL
FPT_STIMER.V
      2414**DCL      2414--DCLINIT
FPT_TRMPRG
      2389**DCL      2425<>CALL
FPT_TRMPRG.V
      2396**DCL      2391--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
      2397**DCL      2398--REDEF
M$STIMER
        96**DCL-ENT  2435--CALL
M$TRMPRG
        67**DCL-ENT  2425--CALL
VDG$ESCREECH
      2333**DCL-ENT  2427--CALL     2437--CALL
VDG$ETIMER
      2332**DCL-ENT  2414--DCLINIT
VDG$MTERMINATE
      2331**DCL-ENT  2443--CALL
VD_6E.INTERRUPT.STATE#
      2368**DCL      2431>>DOCASE   2434<<ASSIGN
VD_6E.STATS#
      2369**DCL      2422<<ASSIGN   2422>>ASSIGN

PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:31   
      198        1        /*T***********************************************************/
      199        2        /*T*                                                         */
      200        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      201        4        /*T*                                                         */
      202        5        /*T***********************************************************/
      203        6
      204        7        /*D* NAME: VDG$EBREAK_ACKNOWLEDGE
      205        8            PARAMETERS:
      206        9                ERR_CODE - An optional SBIN:  either 0, or a %E$xxx error code
      207       10                    (usually %E$BREAK_HIT).  If ERR_CODE is omitted or if 0 is passed,
      208       11                    then no error will be generated.
      209       12            INPUT:
      210       13                VD_6E.INTERRUPT.STATE# should contain %INST_BREAK_QUEUED.
      211       14                A timer should have been started when the break interrupt occurred.
      212       15            OUTPUT:
      213       16                VD_6E.INTERRUPT.STATE# will be set to %INST_PROCESSING.
      214       17                The timer will have been stopped.
      215       18                If ERR_CODE is non-0, an error for it will have been queued.
      216       19            DESCRIPTION:
      217       20                Stop the break-acknowledgement timer, reset the interrupt state, and
      218       21                    optionally build the error.
      219       22                We will just return normally to the caller; however, if the caller
      220       23                    requested that we build an error, he should ALTRETURN to his
      221       24                    caller, to be sure that the error is reported.
      222       25        */
      223       26
      224       27        VDG$EBREAK_ACKNOWLEDGE: PROC (ERR_CODE);
      225       28
      226       29        %INCLUDE VD_MACROS_M;
      227     2244        %INCLUDE VD_PERR_C;
      228     2392        %INCLUDE CP_6;
      229     2473
      230     2474
      231     2475    1   DCL ERR_CODE SBIN;
      232     2476
      233     2477
      234     2478    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:32   
      235     2479    1   DCL VDG$ESCREECH        ENTRY (3);
      236     2480
      237     2481
      238     2482        %VD_6E (STCLASS=SYMREF);
      239     2518    1   DCL B$TCB$ PTR SYMREF;
      240     2519
      241     2520
      242     2521        %FPT_TTIMER (FPTN=STOP_TIMER, CANCEL=YES);
      243     2536
      244     2537
      245     2538    1   DCL VD_ERR$ PTR;
      246     2539
      247     2540
      248     2541        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      249     2594        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      250     2597        %B$ALT;
      251     2605
      252     2606
      253     2607
      254     2608    1           CALL M$TTIMER (STOP_TIMER)
      255     2609    2           WHENALTRETURN DO;
      256     2610    2              CALL VDG$ESCREECH (B$TCB.ALT$->B$ALT.ERR.CODE);
      257     2611    2              END;
      258     2612
      259     2613    1           VD_6E.INTERRUPT.STATE# = %INST_PROCESSING;
      260     2614
      261     2615    1           IF ADDR(ERR_CODE) ~= ADDR(NIL) THEN
      262     2616    2              IF ERR_CODE ~= 0 THEN DO;
      263     2617    2                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
      264     2618    3                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;
      265     2619    2                 VD$ERR.ERR.CODE# = ERR_CODE;
      266     2620    2                 VD$ERR.FLAGLEV# = %FLV_SERIOUS;
      267     2621    2                 END;
      268     2622
      269     2623    1           RETURN;
      270     2624
      271     2625    1   END VDG$EBREAK_ACKNOWLEDGE;
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:33   
      272     2626        %EOD;

PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:34   
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EBREAK_ACKNOWLEDGE.

   Procedure VDG$EBREAK_ACKNOWLEDGE requires 48 words for executable code.
   Procedure VDG$EBREAK_ACKNOWLEDGE requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:35   

 Object Unit name= VDG$EBREAK_ACKNOWLEDGE                     File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:35.84 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  VDG$EBREAK_ACKNOWLEDGE
    2   Proc  even  none    48     60  VDG$EBREAK_ACKNOWLEDGE
    3  RoData even  none     2      2  VDG$EBREAK_ACKNOWLEDGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  VDG$EBREAK_ACKNOWLEDGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$OALLOC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:36   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 B$TCB$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:37   


      198        1        /*T***********************************************************/
      199        2        /*T*                                                         */
      200        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      201        4        /*T*                                                         */
      202        5        /*T***********************************************************/
      203        6
      204        7        /*D* NAME: VDG$EBREAK_ACKNOWLEDGE
      205        8            PARAMETERS:
      206        9                ERR_CODE - An optional SBIN:  either 0, or a %E$xxx error code
      207       10                    (usually %E$BREAK_HIT).  If ERR_CODE is omitted or if 0 is passed,
      208       11                    then no error will be generated.
      209       12            INPUT:
      210       13                VD_6E.INTERRUPT.STATE# should contain %INST_BREAK_QUEUED.
      211       14                A timer should have been started when the break interrupt occurred.
      212       15            OUTPUT:
      213       16                VD_6E.INTERRUPT.STATE# will be set to %INST_PROCESSING.
      214       17                The timer will have been stopped.
      215       18                If ERR_CODE is non-0, an error for it will have been queued.
      216       19            DESCRIPTION:
      217       20                Stop the break-acknowledgement timer, reset the interrupt state, and
      218       21                    optionally build the error.
      219       22                We will just return normally to the caller; however, if the caller
      220       23                    requested that we build an error, he should ALTRETURN to his
      221       24                    caller, to be sure that the error is reported.
      222       25        */
      223       26
      224       27        VDG$EBREAK_ACKNOWLEDGE: PROC (ERR_CODE);

     27  2 000000   000000 700200 xent  VDG$EBREAK_* TSX0  ! X66_AUTO_1
         2 000001   000010 000001                    ZERO    8,1

      225       28
      226       29        %INCLUDE VD_MACROS_M;
      227     2244        %INCLUDE VD_PERR_C;
      228     2392        %INCLUDE CP_6;
      229     2473
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:38   
      230     2474
      231     2475    1   DCL ERR_CODE SBIN;
      232     2476
      233     2477
      234     2478    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      235     2479    1   DCL VDG$ESCREECH        ENTRY (3);
      236     2480
      237     2481
      238     2482        %VD_6E (STCLASS=SYMREF);
      239     2518    1   DCL B$TCB$ PTR SYMREF;
      240     2519
      241     2520
      242     2521        %FPT_TTIMER (FPTN=STOP_TIMER, CANCEL=YES);
      243     2536
      244     2537
      245     2538    1   DCL VD_ERR$ PTR;
      246     2539
      247     2540
      248     2541        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      249     2594        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      250     2597        %B$ALT;
      251     2605
      252     2606
      253     2607
      254     2608    1           CALL M$TTIMER (STOP_TIMER)

   2608  2 000002   000000 630400 1                  EPPR0   STOP_TIMER
         2 000003   410006 713400                    CLIMB   alt,+4102
         2 000004   400400 401760                    pmme    nvectors=2
         2 000005   000007 702000 2                  TSX2    s:2610
         2 000006   000021 710000 2                  TRA     s:2613

      255     2609    2           WHENALTRETURN DO;

      256     2610    2              CALL VDG$ESCREECH (B$TCB.ALT$->B$ALT.ERR.CODE);

   2610  2 000007   000000 470400 xsym               LDP0    B$TCB$
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:39   
         2 000010   000000 471500                    LDP1    0,,PR0
         2 000011   200007 451500                    STP1    VD_ERR$+3,,AUTO
         2 000012   200007 236100                    LDQ     VD_ERR$+3,,AUTO
         2 000013   000000 036000 3                  ADLQ    0
         2 000014   200006 756100                    STQ     VD_ERR$+2,,AUTO
         2 000015   200006 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000016   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000017   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000020   000000 011000                    NOP     0

      257     2611    2              END;

      258     2612
      259     2613    1           VD_6E.INTERRUPT.STATE# = %INST_PROCESSING;

   2613  2 000021   000001 220003                    LDX0    1,DU
         2 000022   000027 740000 xsym               STX0    VD_6E+23

      260     2614
      261     2615    1           IF ADDR(ERR_CODE) ~= ADDR(NIL) THEN

   2615  2 000023   200003 236100                    LDQ     @ERR_CODE,,AUTO
         2 000024   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000025   000057 600000 2                  TZE     s:2623

      262     2616    2              IF ERR_CODE ~= 0 THEN DO;

   2616  2 000026   200003 470500                    LDP0    @ERR_CODE,,AUTO
         2 000027   000000 235100                    LDA     0,,PR0
         2 000030   000057 600000 2                  TZE     s:2623

      263     2617    2                 CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   2617  2 000031   200004 631500                    EPPR1   VD_ERR$,,AUTO
         2 000032   200007 451500                    STP1    VD_ERR$+3,,AUTO
         2 000033   000001 236000 3                  LDQ     1
         2 000034   200006 756100                    STQ     VD_ERR$+2,,AUTO
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:40   
         2 000035   200006 630500                    EPPR0   VD_ERR$+2,,AUTO
         2 000036   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000037   000000 701000 xent               TSX1    VDG$OALLOC
         2 000040   000042 702000 2                  TSX2    s:2618
         2 000041   000045 710000 2                  TRA     s:2619

      264     2618    3                 WHENALTRETURN DO; CALL VDG$ESCREECH; END;

   2618  2 000042   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000043   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000044   000000 011000                    NOP     0

      265     2619    2                 VD$ERR.ERR.CODE# = ERR_CODE;

   2619  2 000045   200004 470500                    LDP0    VD_ERR$,,AUTO
         2 000046   200003 471500                    LDP1    @ERR_CODE,,AUTO
         2 000047   100000 236100                    LDQ     0,,PR1
         2 000050   000003 736000                    QLS     3
         2 000051   000002 676100                    ERQ     2,,PR0
         2 000052   377770 376007                    ANQ     131064,DL
         2 000053   000002 656100                    ERSQ    2,,PR0

      266     2620    2                 VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   2620  2 000054   000003 220003                    LDX0    3,DU
         2 000055   200004 470500                    LDP0    VD_ERR$,,AUTO
         2 000056   000003 740100                    STX0    3,,PR0

      267     2621    2                 END;

      268     2622
      269     2623    1           RETURN;

   2623  2 000057   000000 702200 xent               TSX2  ! X66_ARET
      270     2624
      271     2625    1   END VDG$EBREAK_ACKNOWLEDGE;
      272     2626        %EOD;
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:41   

PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:42   
--  Include file information  --

   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EBREAK_ACKNOWLEDGE.
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:43   

 **** Variables and constants ****

  ****  Section 001  Data  VDG$EBREAK_ACKNOWLEDGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 STOP_TIMER

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR_CODE                 *0-0-0/w SBIN        r     1 ERR_CODE
     4-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(180)   r     1 VD$ERR


   Procedure VDG$EBREAK_ACKNOWLEDGE requires 48 words for executable code.
   Procedure VDG$EBREAK_ACKNOWLEDGE requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:44   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDG$EBREAK_ACKNOWLEDGE File=VDG$ENVIRONMENT.:VDA5TSI          FRI 07/04/97 11:17 Page:45   
          MINI XREF LISTING

B$ALT.CODE
      2599**DCL      2599--REDEF    2600--REDEF    2600--REDEF
B$ALT.ERR.CODE
      2601**DCL      2610<>CALL
B$ALT.ERR.ERR#
      2601**DCL      2601--REDEF
B$ALT.EVID
      2600**DCL      2600--REDEF    2600--REDEF
B$TCB.ALT$
      2595**DCL      2610>>CALL
B$TCB$
      2518**DCL      2595--IMP-PTR  2610>>CALL
ERR_CODE
      2475**DCL        27--PROC     2615--IF       2616>>IF       2619>>ASSIGN
M$TTIMER
      2455**DCL-ENT  2608--CALL
STOP_TIMER
      2532**DCL      2608<>CALL
STOP_TIMER.V
      2533**DCL      2532--DCLINIT
VD$ERR.ERR.CODE#
      2588**DCL      2619<<ASSIGN
VD$ERR.FLAGLEV#
      2591**DCL      2620<<ASSIGN
VDG$ESCREECH
      2479**DCL-ENT  2610--CALL     2618--CALL
VDG$OALLOC
      2478**DCL-ENT  2617--CALL
VD_6E.INTERRUPT.STATE#
      2514**DCL      2613<<ASSIGN
VD_ERR$
      2538**DCL      2549--IMP-PTR  2617<>CALL     2619>>ASSIGN   2620>>ASSIGN

PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:46   
      273        1        /*T***********************************************************/
      274        2        /*T*                                                         */
      275        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      276        4        /*T*                                                         */
      277        5        /*T***********************************************************/
      278        6
      279        7        /*D* NAME: VDG$ETIMER
      280        8            PARAMETERS:
      281        9                None.
      282       10            INPUT:
      283       11                VD_6E.INTERRUPT should contain info about the state of asynchronous
      284       12                    interrupts.
      285       13            OUTPUT:
      286       14            DESCRIPTION:
      287       15                If the last interrupt received was BREAK, then the timer
      288       16                    running out indicates that we didn't respond to the
      289       17                    BREAK in time -- therefore, call VDG$ESCREECH to stop
      290       18                    everything and restore the user's terminal.
      291       19        */
      292       20
      293       21        VDG$ETIMER: PROC ASYNC;
      294       22
      295       23        %INCLUDE VD_MACROS_M;
      296     2238
      297     2239
      298     2240    1   DCL VDG$ESCREECH            ENTRY (3);
      299     2241
      300     2242
      301     2243        %VD_6E (STCLASS=SYMREF);
      302     2279
      303     2280
      304     2281
      305     2282    1           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN
      306     2283    1              CALL VDG$ESCREECH;
      307     2284    1           RETURN;
      308     2285
      309     2286
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:47   
      310     2287    1   END VDG$ETIMER;
      311     2288        %EOD;

PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:48   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ETIMER.

   Procedure VDG$ETIMER requires 9 words for executable code.
   Procedure VDG$ETIMER requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:49   

 Object Unit name= VDG$ETIMER                                 File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:42.36 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none     9     11  VDG$ETIMER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes     Async       0  VDG$ETIMER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:50   


      273        1        /*T***********************************************************/
      274        2        /*T*                                                         */
      275        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      276        4        /*T*                                                         */
      277        5        /*T***********************************************************/
      278        6
      279        7        /*D* NAME: VDG$ETIMER
      280        8            PARAMETERS:
      281        9                None.
      282       10            INPUT:
      283       11                VD_6E.INTERRUPT should contain info about the state of asynchronous
      284       12                    interrupts.
      285       13            OUTPUT:
      286       14            DESCRIPTION:
      287       15                If the last interrupt received was BREAK, then the timer
      288       16                    running out indicates that we didn't respond to the
      289       17                    BREAK in time -- therefore, call VDG$ESCREECH to stop
      290       18                    everything and restore the user's terminal.
      291       19        */
      292       20
      293       21        VDG$ETIMER: PROC ASYNC;

     21  0 000000   000000 700200 xent  VDG$ETIMER   TSX0  ! X66_AAUTO
         0 000001   000004 000000                    ZERO    4,0

      294       22
      295       23        %INCLUDE VD_MACROS_M;
      296     2238
      297     2239
      298     2240    1   DCL VDG$ESCREECH            ENTRY (3);
      299     2241
      300     2242
      301     2243        %VD_6E (STCLASS=SYMREF);
      302     2279
      303     2280
      304     2281
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:51   
      305     2282    1           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN

   2282  0 000002   000027 220000 xsym               LDX0    VD_6E+23
         0 000003   000003 100003                    CMPX0   3,DU
         0 000004   000010 601000 0                  TNZ     s:2284

      306     2283    1              CALL VDG$ESCREECH;

   2283  0 000005   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000006   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000007   000000 011000                    NOP     0

      307     2284    1           RETURN;

   2284  0 000010   000000 702200 xent               TSX2  ! X66_AARET
      308     2285
      309     2286
      310     2287    1   END VDG$ETIMER;
      311     2288        %EOD;

PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:52   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ETIMER.
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:53   

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E


   Procedure VDG$ETIMER requires 9 words for executable code.
   Procedure VDG$ETIMER requires 4 words of local(AUTO) storage.
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:54   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDG$ETIMER File=VDG$ENVIRONMENT.:VDA5TSI                      FRI 07/04/97 11:17 Page:55   
          MINI XREF LISTING

VDG$ESCREECH
      2240**DCL-ENT  2283--CALL
VD_6E.INTERRUPT.STATE#
      2275**DCL      2282>>IF

PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:56   
      312        1        /*T***********************************************************/
      313        2        /*T*                                                         */
      314        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      315        4        /*T*                                                         */
      316        5        /*T***********************************************************/
      317        6
      318        7        /*D* NAME: VDG$ETRAP
      319        8            PARAMETERS:
      320        9                None.
      321       10            INPUT:
      322       11                An exceptional condition frame (B$EXCFR) must be on the
      323       12                    exceptional-condition stack in the TCB (B$TCB.STK$).
      324       13                    This frame must describe the hardware fault which
      325       14                    was detected and caused the asynchronous event.
      326       15            OUTPUT:
      327       16            DESCRIPTION:
      328       17                Hardware traps are reset (so we can't loop).
      329       18                VDG$ESCREECH is called, with the IC at which the fault
      330       19                    occurred.
      331       20        */
      332       21
      333       22        VDG$ETRAP: PROC ASYNC;
      334       23
      335       24        %INCLUDE CP_6;
      336      105        %INCLUDE VD_MACROS_M;
      337     2320
      338     2321    1   DCL VDG$ESCREECH            ENTRY (3);
      339     2322
      340     2323    1   DCL B$TCB$ PTR SYMREF;
      341     2324        %VD_6E (STCLASS=SYMREF);
      342     2360
      343     2361
      344     2362        %FPT_TRAP (FPTN=DONT_TRAP, STCLASS=CONSTANT,
      345     2363            DIVIDE_CHECK=ABORT, OVERFLOW=ABORT, COMMAND=ABORT,
      346     2364            IPR=ABORT, LOCKUP=ABORT, MEMORY=ABORT, MISSING_PAGE=ABORT,
      347     2365            MISSING_SEG=ABORT, SECURITY_1=ABORT, SECURITY_2=ABORT);
      348     2388
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:57   
      349     2389
      350     2390
      351     2391    1   DCL IC UBIN;
      352     2392    1   DCL SUBC UBIN;
      353     2393
      354     2394
      355     2395        %B$TCB;
      356     2398        %B$EXCFR (STCLASS=BASED);
      357     2416
      358     2417
      359     2418
      360     2419    1           CALL M$TRAP (DONT_TRAP)
      361     2420    2           WHENALTRETURN DO; ; END;
      362     2421
      363     2422    1           IC = B$TCB$->B$TCB.STK$->B$EXCFR.IC;
      364     2423    1           SUBC = B$TCB$->B$TCB.STK$->B$EXCFR.SUBC;
      365     2424
      366     2425    1           VD_6E.INTERRUPT.STATE# = %INST_HW_TRAPPED;
      367     2426    1           CALL VDG$ESCREECH (IC, SUBC);
      368     2427
      369     2428    1   END VDG$ETRAP;
      370     2429        %EOD;

PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:58   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$ETRAP.

   Procedure VDG$ETRAP requires 27 words for executable code.
   Procedure VDG$ETRAP requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:59   

 Object Unit name= VDG$ETRAP                                  File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:46.52 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     10     12  VDG$ETRAP
    2   Proc  even  none    27     33  VDG$ETRAP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  VDG$ETRAP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                VD_6E
     B_VECTNIL
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:60   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:61   


      312        1        /*T***********************************************************/
      313        2        /*T*                                                         */
      314        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      315        4        /*T*                                                         */
      316        5        /*T***********************************************************/
      317        6
      318        7        /*D* NAME: VDG$ETRAP
      319        8            PARAMETERS:
      320        9                None.
      321       10            INPUT:
      322       11                An exceptional condition frame (B$EXCFR) must be on the
      323       12                    exceptional-condition stack in the TCB (B$TCB.STK$).
      324       13                    This frame must describe the hardware fault which
      325       14                    was detected and caused the asynchronous event.
      326       15            OUTPUT:
      327       16            DESCRIPTION:
      328       17                Hardware traps are reset (so we can't loop).
      329       18                VDG$ESCREECH is called, with the IC at which the fault
      330       19                    occurred.
      331       20        */
      332       21
      333       22        VDG$ETRAP: PROC ASYNC;

     22  2 000000   000000 700200 xent  VDG$ETRAP    TSX0  ! X66_AAUTO
         2 000001   000010 000000                    ZERO    8,0

      334       23
      335       24        %INCLUDE CP_6;
      336      105        %INCLUDE VD_MACROS_M;
      337     2320
      338     2321    1   DCL VDG$ESCREECH            ENTRY (3);
      339     2322
      340     2323    1   DCL B$TCB$ PTR SYMREF;
      341     2324        %VD_6E (STCLASS=SYMREF);
      342     2360
      343     2361
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:62   
      344     2362        %FPT_TRAP (FPTN=DONT_TRAP, STCLASS=CONSTANT,
      345     2363            DIVIDE_CHECK=ABORT, OVERFLOW=ABORT, COMMAND=ABORT,
      346     2364            IPR=ABORT, LOCKUP=ABORT, MEMORY=ABORT, MISSING_PAGE=ABORT,
      347     2365            MISSING_SEG=ABORT, SECURITY_1=ABORT, SECURITY_2=ABORT);
      348     2388
      349     2389
      350     2390
      351     2391    1   DCL IC UBIN;
      352     2392    1   DCL SUBC UBIN;
      353     2393
      354     2394
      355     2395        %B$TCB;
      356     2398        %B$EXCFR (STCLASS=BASED);
      357     2416
      358     2417
      359     2418
      360     2419    1           CALL M$TRAP (DONT_TRAP)

   2419  2 000002   000000 630400 1                  EPPR0   DONT_TRAP
         2 000003   410004 713400                    CLIMB   alt,+4100
         2 000004   400400 401760                    pmme    nvectors=2
         2 000005   000007 702000 2                  TSX2    s:2422
         2 000006   000007 710000 2                  TRA     s:2422

      361     2420    2           WHENALTRETURN DO; ; END;

      362     2421
      363     2422    1           IC = B$TCB$->B$TCB.STK$->B$EXCFR.IC;

   2422  2 000007   000000 470400 xsym               LDP0    B$TCB$
         2 000010   000001 471500                    LDP1    1,,PR0
         2 000011   100004 236100                    LDQ     4,,PR1
         2 000012   000022 772000                    QRL     18
         2 000013   200003 756100                    STQ     IC,,AUTO

      364     2423    1           SUBC = B$TCB$->B$TCB.STK$->B$EXCFR.SUBC;

PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:63   
   2423  2 000014   000001 471500                    LDP1    1,,PR0
         2 000015   100100 236100                    LDQ     64,,PR1
         2 000016   777777 376007                    ANQ     -1,DL
         2 000017   200004 756100                    STQ     SUBC,,AUTO

      365     2424
      366     2425    1           VD_6E.INTERRUPT.STATE# = %INST_HW_TRAPPED;

   2425  2 000020   000004 220003                    LDX0    4,DU
         2 000021   000027 740000 xsym               STX0    VD_6E+23

      367     2426    1           CALL VDG$ESCREECH (IC, SUBC);

   2426  2 000022   200004 631500                    EPPR1   SUBC,,AUTO
         2 000023   200007 451500                    STP1    SUBC+3,,AUTO
         2 000024   200003 633500                    EPPR3   IC,,AUTO
         2 000025   200006 453500                    STP3    SUBC+2,,AUTO
         2 000026   200006 630500                    EPPR0   SUBC+2,,AUTO
         2 000027   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000030   000000 701000 xent               TSX1    VDG$ESCREECH
         2 000031   000000 011000                    NOP     0

      368     2427
      369     2428    1   END VDG$ETRAP;

   2428  2 000032   000000 702200 xent               TSX2  ! X66_AARET
      370     2429        %EOD;

PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:64   
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$ETRAP.
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:65   

 **** Variables and constants ****

  ****  Section 001 RoData VDG$ETRAP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 DONT_TRAP

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 IC                         4-0-0/w UBIN        r     1 SUBC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/w STRC(144)   r     1 B$TCB


   Procedure VDG$ETRAP requires 27 words for executable code.
   Procedure VDG$ETRAP requires 8 words of local(AUTO) storage.
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:66   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VDG$ETRAP File=VDG$ENVIRONMENT.:VDA5TSI                       FRI 07/04/97 11:17 Page:67   
          MINI XREF LISTING

B$EXCFR.ASL
      2399**DCL      2399--REDEF
B$EXCFR.ERR.ERR#
      2413**DCL      2413--REDEF
B$EXCFR.EVID
      2412**DCL      2412--REDEF    2413--REDEF
B$EXCFR.IC
      2400**DCL      2422>>ASSIGN
B$EXCFR.IR
      2400**DCL      2400--REDEF
B$EXCFR.PREVSZ
      2399**DCL      2399--REDEF
B$EXCFR.SUBC
      2411**DCL      2411--REDEF    2412--REDEF    2412--REDEF    2423>>ASSIGN
B$TCB.STK$
      2396**DCL      2422>>ASSIGN   2423>>ASSIGN
B$TCB$
      2323**DCL      2422>>ASSIGN   2423>>ASSIGN
DONT_TRAP
      2376**DCL      2419<>CALL
DONT_TRAP.V
      2376**DCL      2376--DCLINIT
IC
      2391**DCL      2422<<ASSIGN   2426<>CALL
M$TRAP
        87**DCL-ENT  2419--CALL
SUBC
      2392**DCL      2423<<ASSIGN   2426<>CALL
VDG$ESCREECH
      2321**DCL-ENT  2426--CALL
VD_6E.INTERRUPT.STATE#
      2356**DCL      2425<<ASSIGN

PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:68   
      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6
      377        7        /*D* NAME: VDG$ESCREECH
      378        8            PARAMETERS:
      379        9                U1, U2, U3 - Optional data words.  These will be converted to
      380       10                    decimal and substituted into the error message, for
      381       11                    diagnostic purposes.
      382       12            INPUT:
      383       13                VD_6E.ERR_HEAD$ must point to a VD$ERR.  This VD$ERR must
      384       14                    always exist (in static storage),
      385       15                    so we can report a fatal error.  (Fatal errors are
      386       16                    always inserted at the head of the VD$ERR chain.)
      387       17                VD_6E.INTERRUPT.STATE - If we're in the process of reporting a fatal
      388       18                    error already, .STATE should contain %INST_SCREECHING.
      389       19            OUTPUT:
      390       20                VD_6E.ERR_HEAD$'s VD$ERR will contain the screech error code.
      391       21                VD_6E.INTERRUPT.STATE will contain %INST_SCREECHING.
      392       22            DESCRIPTION:
      393       23                If we're already reporting a screech, force us to exit
      394       24                    by calling VDG$MTERMINATE_FORCED.
      395       25                Store the info in the "fatal" VD$ERR, and call
      396       26                    VDG$EREPORT_ERROR.
      397       27        */
      398       28
      399       29        VDG$ESCREECH: PROC (U1, U2, U3);
      400       30
      401       31    1   DCL U1 SBIN;
      402       32    1   DCL U2 SBIN;
      403       33    1   DCL U3 SBIN;
      404       34
      405       35        %INCLUDE VD_MACROS_M;
      406     2250        %INCLUDE VD_PERR_C;
      407     2398
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:69   
      408     2399
      409     2400    1   DCL VDG$EREPORT_ERROR       ENTRY (1);
      410     2401    1   DCL VDG$MTERMINATE_FORCED   ENTRY;
      411     2402
      412     2403
      413     2404        %VD_6E (STCLASS=SYMREF);
      414     2440
      415     2441
      416     2442
      417     2443    1   DCL FATAL_NUMBER$ PTR;
      418     2444
      419     2445
      420     2446        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      421     2499        %VD$NUMBER (NAME=FATAL$NUMBER, DIM="(0:2)",
      422     2500            STCLASS="BASED(FATAL_NUMBER$)");
      423     2545    1   DCL BASED$SBIN SBIN BASED;
      424     2546
      425     2547
      426     2548
      427     2549    1           IF FATAL$ERR.ERR ~= %CLEAR
      428     2550    2             OR VD_6E.INTERRUPT.STATE# = %INST_SCREECHING THEN DO;
      429     2551                   /* While processing a screech, we called screech again */
      430     2552    2              CALL VDG$MTERMINATE_FORCED;
      431     2553    2              RETURN;      /* Will only return if handling hardware fault */
      432     2554    2              END;
      433     2555
      434     2556    1           VD_6E.INTERRUPT.STATE# = %INST_SCREECHING;
      435     2557    1           FATAL$ERR.ERR.CODE# = %E$HUH;
      436     2558    1           FATAL$ERR.FLAGLEV# = %FLV_FATAL;
      437     2559
      438     2560    1           FATAL_NUMBER$ = PINCRW(ADDR(FATAL$ERR), SIZEW(FATAL$ERR));
      439     2561
      440     2562    2           IF ADDR(U1) ~= ADDR(NIL) THEN DO;
      441     2563    2              FATAL$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;
      442     2564    2              FATAL$NUMBER.V# (0) = U1;
      443     2565    2              END;
      444     2566
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:70   
      445     2567    2           IF ADDR(U2) ~= ADDR(NIL) THEN DO;
      446     2568    2              FATAL$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;
      447     2569    2              FATAL$NUMBER.V# (1) = U2;
      448     2570    2              END;
      449     2571
      450     2572    2           IF ADDR(U3) ~= ADDR(NIL) THEN DO;
      451     2573    2              FATAL$NUMBER.OBJECT.CLASS# (2) = %CLS_NUMBER;
      452     2574    2              FATAL$NUMBER.V# (2) = U3;
      453     2575    2              END;
      454     2576
      455     2577    1           CALL VDG$EREPORT_ERROR;
      456     2578    1           RETURN;     /* Will only return if reporting hardware fault */
      457     2579
      458     2580
      459     2581    1   END VDG$ESCREECH;
      460     2582        %EOD;

PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:71   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ESCREECH.

   Procedure VDG$ESCREECH requires 55 words for executable code.
   Procedure VDG$ESCREECH requires 8 words of local(AUTO) storage.

PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:72   

 Object Unit name= VDG$ESCREECH                               File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:52.84 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    55     67  VDG$ESCREECH
    1  RoData even  none     1      1  VDG$ESCREECH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        3  VDG$ESCREECH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 VDG$MTERMINATE_FORCED
         yes           Std       1 VDG$EREPORT_ERROR
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:73   


      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6
      377        7        /*D* NAME: VDG$ESCREECH
      378        8            PARAMETERS:
      379        9                U1, U2, U3 - Optional data words.  These will be converted to
      380       10                    decimal and substituted into the error message, for
      381       11                    diagnostic purposes.
      382       12            INPUT:
      383       13                VD_6E.ERR_HEAD$ must point to a VD$ERR.  This VD$ERR must
      384       14                    always exist (in static storage),
      385       15                    so we can report a fatal error.  (Fatal errors are
      386       16                    always inserted at the head of the VD$ERR chain.)
      387       17                VD_6E.INTERRUPT.STATE - If we're in the process of reporting a fatal
      388       18                    error already, .STATE should contain %INST_SCREECHING.
      389       19            OUTPUT:
      390       20                VD_6E.ERR_HEAD$'s VD$ERR will contain the screech error code.
      391       21                VD_6E.INTERRUPT.STATE will contain %INST_SCREECHING.
      392       22            DESCRIPTION:
      393       23                If we're already reporting a screech, force us to exit
      394       24                    by calling VDG$MTERMINATE_FORCED.
      395       25                Store the info in the "fatal" VD$ERR, and call
      396       26                    VDG$EREPORT_ERROR.
      397       27        */
      398       28
      399       29        VDG$ESCREECH: PROC (U1, U2, U3);

     29  0 000000   000000 700200 xent  VDG$ESCREECH TSX0  ! X66_AUTO_3
         0 000001   000010 000003                    ZERO    8,3

      400       30
      401       31    1   DCL U1 SBIN;
      402       32    1   DCL U2 SBIN;
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:74   
      403       33    1   DCL U3 SBIN;
      404       34
      405       35        %INCLUDE VD_MACROS_M;
      406     2250        %INCLUDE VD_PERR_C;
      407     2398
      408     2399
      409     2400    1   DCL VDG$EREPORT_ERROR       ENTRY (1);
      410     2401    1   DCL VDG$MTERMINATE_FORCED   ENTRY;
      411     2402
      412     2403
      413     2404        %VD_6E (STCLASS=SYMREF);
      414     2440
      415     2441
      416     2442
      417     2443    1   DCL FATAL_NUMBER$ PTR;
      418     2444
      419     2445
      420     2446        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      421     2499        %VD$NUMBER (NAME=FATAL$NUMBER, DIM="(0:2)",
      422     2500            STCLASS="BASED(FATAL_NUMBER$)");
      423     2545    1   DCL BASED$SBIN SBIN BASED;
      424     2546
      425     2547
      426     2548
      427     2549    1           IF FATAL$ERR.ERR ~= %CLEAR

   2549  0 000002   000031 470400 xsym               LDP0    VD_6E+25
         0 000003   000002 235100                    LDA     2,,PR0
         0 000004   000010 601000 0                  TNZ     s:2552
         0 000005   000027 220000 xsym               LDX0    VD_6E+23
         0 000006   000005 100003                    CMPX0   5,DU
         0 000007   000014 601000 0                  TNZ     s:2556

      428     2550    2             OR VD_6E.INTERRUPT.STATE# = %INST_SCREECHING THEN DO;

      429     2551                   /* While processing a screech, we called screech again */
      430     2552    2              CALL VDG$MTERMINATE_FORCED;
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:75   

   2552  0 000010   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000011   000000 701000 xent               TSX1    VDG$MTERMINATE_FORCED
         0 000012   000000 011000                    NOP     0

      431     2553    2              RETURN;      /* Will only return if handling hardware fault */

   2553  0 000013   000000 702200 xent               TSX2  ! X66_ARET

      432     2554    2              END;
      433     2555
      434     2556    1           VD_6E.INTERRUPT.STATE# = %INST_SCREECHING;

   2556  0 000014   000005 221003                    LDX1    5,DU
         0 000015   000027 741000 xsym               STX1    VD_6E+23

      435     2557    1           FATAL$ERR.ERR.CODE# = %E$HUH;

   2557  0 000016   000002 236100                    LDQ     2,,PR0
         0 000017   000000 376000 1                  ANQ     0
         0 000020   000010 276007                    ORQ     8,DL
         0 000021   000002 756100                    STQ     2,,PR0

      436     2558    1           FATAL$ERR.FLAGLEV# = %FLV_FATAL;

   2558  0 000022   000004 220003                    LDX0    4,DU
         0 000023   000031 470400 xsym               LDP0    VD_6E+25
         0 000024   000003 740100                    STX0    3,,PR0

      437     2559
      438     2560    1           FATAL_NUMBER$ = PINCRW(ADDR(FATAL$ERR), SIZEW(FATAL$ERR));

   2560  0 000025   000031 236000 xsym               LDQ     VD_6E+25
         0 000026   000005 036003                    ADLQ    5,DU
         0 000027   200006 756100                    STQ     FATAL_NUMBER$,,AUTO

      439     2561
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:76   
      440     2562    2           IF ADDR(U1) ~= ADDR(NIL) THEN DO;

   2562  0 000030   200003 236100                    LDQ     @U1,,AUTO
         0 000031   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000032   000041 600000 0                  TZE     s:2567

      441     2563    2              FATAL$NUMBER.OBJECT.CLASS# (0) = %CLS_NUMBER;

   2563  0 000033   000033 222003                    LDX2    27,DU
         0 000034   200006 470500                    LDP0    FATAL_NUMBER$,,AUTO
         0 000035   000000 742100                    STX2    0,,PR0

      442     2564    2              FATAL$NUMBER.V# (0) = U1;

   2564  0 000036   200003 471500                    LDP1    @U1,,AUTO
         0 000037   100000 235100                    LDA     0,,PR1
         0 000040   000003 755100                    STA     3,,PR0

      443     2565    2              END;

      444     2566
      445     2567    2           IF ADDR(U2) ~= ADDR(NIL) THEN DO;

   2567  0 000041   200004 236100                    LDQ     @U2,,AUTO
         0 000042   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000043   000052 600000 0                  TZE     s:2572

      446     2568    2              FATAL$NUMBER.OBJECT.CLASS# (1) = %CLS_NUMBER;

   2568  0 000044   000033 222003                    LDX2    27,DU
         0 000045   200006 470500                    LDP0    FATAL_NUMBER$,,AUTO
         0 000046   000004 742100                    STX2    4,,PR0

      447     2569    2              FATAL$NUMBER.V# (1) = U2;

   2569  0 000047   200004 471500                    LDP1    @U2,,AUTO
         0 000050   100000 235100                    LDA     0,,PR1
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:77   
         0 000051   000007 755100                    STA     7,,PR0

      448     2570    2              END;

      449     2571
      450     2572    2           IF ADDR(U3) ~= ADDR(NIL) THEN DO;

   2572  0 000052   200005 236100                    LDQ     @U3,,AUTO
         0 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000054   000063 600000 0                  TZE     s:2577

      451     2573    2              FATAL$NUMBER.OBJECT.CLASS# (2) = %CLS_NUMBER;

   2573  0 000055   000033 222003                    LDX2    27,DU
         0 000056   200006 470500                    LDP0    FATAL_NUMBER$,,AUTO
         0 000057   000010 742100                    STX2    8,,PR0

      452     2574    2              FATAL$NUMBER.V# (2) = U3;

   2574  0 000060   200005 471500                    LDP1    @U3,,AUTO
         0 000061   100000 235100                    LDA     0,,PR1
         0 000062   000013 755100                    STA     11,,PR0

      453     2575    2              END;

      454     2576
      455     2577    1           CALL VDG$EREPORT_ERROR;

   2577  0 000063   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000064   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         0 000065   000000 011000                    NOP     0

      456     2578    1           RETURN;     /* Will only return if reporting hardware fault */

   2578  0 000066   000000 702200 xent               TSX2  ! X66_ARET
      457     2579
      458     2580
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:78   
      459     2581    1   END VDG$ESCREECH;
      460     2582        %EOD;

PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:79   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDG$ESCREECH.
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:80   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @U1                        4-0-0/w PTR         r     1 @U2
     5-0-0/w PTR         r     1 @U3                        6-0-0/w PTR         r     1 FATAL_NUMBER$
    *0-0-0/w SBIN        r     1 U1                        *0-0-0/w SBIN        r     1 U2
    *0-0-0/w SBIN        r     1 U3

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 FATAL$ERR
     0-0-0/w STRC(144)   r     1 FATAL$NUMBER(0:2)


   Procedure VDG$ESCREECH requires 55 words for executable code.
   Procedure VDG$ESCREECH requires 8 words of local(AUTO) storage.
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:81   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VDG$ESCREECH File=VDG$ENVIRONMENT.:VDA5TSI                    FRI 07/04/97 11:17 Page:82   
          MINI XREF LISTING

FATAL$ERR
      2454**DCL      2560--ASSIGN   2560--ASSIGN
FATAL$ERR.ERR
      2491**DCL      2549>>IF
FATAL$ERR.ERR.CODE#
      2493**DCL      2557<<ASSIGN
FATAL$ERR.FLAGLEV#
      2496**DCL      2558<<ASSIGN
FATAL$NUMBER.OBJECT.CLASS#
      2540**DCL      2563<<ASSIGN   2568<<ASSIGN   2573<<ASSIGN
FATAL$NUMBER.V#
      2542**DCL      2564<<ASSIGN   2569<<ASSIGN   2574<<ASSIGN
FATAL_NUMBER$
      2443**DCL      2508--IMP-PTR  2560<<ASSIGN   2563>>ASSIGN   2564>>ASSIGN   2568>>ASSIGN   2569>>ASSIGN
      2573>>ASSIGN   2574>>ASSIGN
U1
        31**DCL        29--PROC     2562--IF       2564>>ASSIGN
U2
        32**DCL        29--PROC     2567--IF       2569>>ASSIGN
U3
        33**DCL        29--PROC     2572--IF       2574>>ASSIGN
VDG$EREPORT_ERROR
      2400**DCL-ENT  2577--CALL
VDG$MTERMINATE_FORCED
      2401**DCL-ENT  2552--CALL
VD_6E.ERR_HEAD$
      2436**DCL      2454--IMP-PTR  2549>>IF       2557>>ASSIGN   2558>>ASSIGN   2560>>ASSIGN
VD_6E.INTERRUPT.STATE#
      2436**DCL      2549>>IF       2556<<ASSIGN

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:83   
      461        1        /*T***********************************************************/
      462        2        /*T*                                                         */
      463        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      464        4        /*T*                                                         */
      465        5        /*T***********************************************************/
      466        6
      467        7        /*D* NAME: VDG$EREPORT_ERROR
      468        8            PARAMETERS:
      469        9                MAX_FLAGLEV - An optional uninitialized UBIN WORD.  Need
      470       10                    not be included in call.
      471       11            INPUT:
      472       12                VD_6E.ERR_HEAD$ must point to the head of a chain of VD$ERRs.
      473       13                    The first VD$ERR in the chain is static; the rest are
      474       14                    allocated dynamically.  Dynamically-allocated VD$ERRs
      475       15                    may not contain fatal or initialization errors,
      476       16                    and only one may contain a non-zero .CMDLINE_INDEX#
      477       17                    (for reporting errors in command lines).  However,
      478       18                    informational, warning, and serious messages may be mixed
      479       19                    freely in the chain.
      480       20                The head, or static, VD$ERR structure may only contain
      481       21                    a fatal error.  If there is no fatal error to be
      482       22                    reported, then the head VD$ERR's .FLINK$ points to the
      483       23                    first dynamic VD$ERR for the recoverable errors.  This
      484       24                    guarantees that, no matter how many non-fatal errors
      485       25                    we've already put on the VD$ERR chain, we always have
      486       26                    a place--at the front of the chain--to put a fatal
      487       27                    error specification.
      488       28                Each VD$ERR is immediately followed by an array of 3
      489       29                    VD$NUMBERs/VD$POINTERs.  These specify the substitution
      490       30                    fields for the error message.
      491       31                Each VD$ERR in the chain must also contain:
      492       32                    o .ERR.CODE# and .FLAGLEV# set appropriately.  If we're still
      493       33                        in initialization and so can't (de)allocate dynamic storage
      494       34                        yet, .FLAGLEV# must be %FLV_FATAL.
      495       35                    o If this is a monitor error, the entire .ERR
      496       36                        should be filled (FCG, MON, SEV, etc.).
      497       37                    o DCB# should specify the DCB for any I/O-related errors.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:84   
      498       38                    o .CMDLINE_INDEX# may contain a non-zero value, to
      499       39                        reference text in the command line which is related
      500       40                        to the error.
      501       41                VD_6E.ERR_TAIL$ points to the last VD$ERR in the chain.
      502       42                VD_6E.CMD_STREAM$->.RECORD$ must point to a VD$BUFFER containing
      503       43                    the command being processed when the error was detected.
      504       44                    Used only if the error is not fatal and
      505       45                    VD$ERR.CMDLINE_INDEX a non-zero value.
      506       46                VD_6E.STATS_ERRORS should contain the error message statistics
      507       47                    for this session.
      508       48                VD_COMMAND_WINDOW$ - May be NIL if we don't have a command window yet
      509       49                    (we're in initialization); else it must point to the
      510       50                    VD$FILE_NODE for the command window, which must have a
      511       51                    VD$WINDOW_SPEC attached whose .DCB# refers to the DCB for the
      512       52                    command window.  If this DCB is open in 2Dim form, the DCB's
      513       53                    UOPT0 must be set; else it must be reset.
      514       54                VD_$MAX_COMMAND must contain the max height to which the
      515       55                    user wants the command window expanded.
      516       56                VD_WORST_FLAGLEV must contain the worst (largest) "flag level"
      517       57                    (%FLV_ value) reported so far in this 6Edit session.
      518       58                    If we haven't written any messages yet, VD_WORST_FLAGLEV
      519       59                    must be 0.
      520       60                VD_$SCREEN must contain the height of the screen 6Edit is to use.
      521       61            OUTPUT:
      522       62                MAX_FLAGLEV, if passed, will contain the maximum (worst)
      523       63                    "flag level" (see %FLV_ definitions) found in the
      524       64                    VD$ERR chain.  Note that MAX_FLAGLEV will never contain
      525       65                    %FLV_FATAL, since VDG$EREPORT_ERROR doesn't return if
      526       66                    it finds a fatal error.
      527       67                VD_WORST_FLAGLEV will be updated if any VD$ERR in this chain
      528       68                    specifies a larger "flaglev" value.
      529       69                VD_6E.ERR_HEAD$ and _TAIL$ will point to the static VD$ERR.
      530       70                If no fatal error is present, we may tell the Presenter
      531       71                VD_LAST_CWIN_ACTIVITY may be set to indicate (via an %LCA_ value) what
      532       72                    we did to/in the command window.
      533       73                    to erase or expand the command window.
      534       74                VD_FORCE_READ_FROM will be set to %RF_COMMAND_WINDOW if we wrote a
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:85   
      535       75                    message to an expanded 2Dim command window at some position other
      536       76                    than the top of the window.  By forcing another command-window
      537       77                    read, the user has a chance to read the message before the command
      538       78                    window is shrunk for an editing-window read.
      539       79                If the static VD$ERR specifies a fatal error (%FLV_FATAL or
      540       80                        not yet initialized):
      541       81                    We'll call VDG$MTERMINATE directly.  We won't call XUG
      542       82                        to display the error message; instead,
      543       83                        VDG$MTERMINATE will display it.
      544       84                        Normally, VDG$MTERMINATE will not return to
      545       85                        us; however, if we're reporting a hardware fault,
      546       86                        we will be returned-to and should in turn return.
      547       87            DESCRIPTION:
      548       88                If we have a command window and it's open in 2Dim form, then we
      549       89                may want to adjust its size before writing the message.  The decision
      550       90                on what to do looks like this:
      551       91                    If command window height isn't expanded to its max height:
      552       92                        If there's only 1 error to report and its not serious:
      553       93                            Just erase the command window, so msg appears at top line.
      554       94                        Else
      555       95                            Expand the command window to its max height.
      556       96                            Force the next read to be from the command window.
      557       97                    Else
      558       98                        Force the next read to be from the command window.
      559       99
      560      100                For each VD$ERR in the current chain:
      561      101                    If the error code is incomplete, fill in the FCG, MID,
      562      102                        and SEV fields.
      563      103                    Fill in XUG_GETCMD from the VD$ERR.
      564      104                    If this is a fatal error (.FLAGLEV# = %FLV_FATAL) or if it
      565      105                            was detected during initialization:
      566      106                        Set VD_EXIT's STEPCC and error-code-pointer.
      567      107                        Call VDG$MTERMINATE to clean up, display the error
      568      108                            message, and return to the monitor.
      569      109                    Else call XUG$ERRMSG to write the error message.
      570      110                    If this VD$ERR's .FLINK$ is non-NIL, then continue
      571      111                        with the next VD$ERR in the chain.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:86   
      572      112                When all done, just before returning (on non-fatal errors, of
      573      113                course):
      574      114                    Reset VD_6E.ERR_TAIL$ to point to the static VD$ERR.
      575      115        */
      576      116
      577      117        VDG$EREPORT_ERROR: PROC (MAX_FLAGLEV);
      578      118    1   DCL MAX_FLAGLEV UBIN;
      579      119
      580      120
      581      121        %INCLUDE CP_6;
      582      202        %INCLUDE CP_6_SUBS;
      583      742        %INCLUDE VD_MACROS_M;
      584     2957        %INCLUDE VD_PERR_C;
      585     3105        %INCLUDE XU_MACRO_C;
      586     6199        %INCLUDE XUG_ENTRY;
      587     6230
      588     6231
      589     6232    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
      590     6233    1   DCL VDG$ERASE_COMMAND_WINDOW ENTRY ALTRET;
      591     6234    1   DCL VDG$MTERMINATE          ENTRY;
      592     6235    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
      593     6236    1   DCL VDG$FORMAT_NUMBER       ENTRY (6);
      594     6237    1   DCL VDG$FORMAT_KEY          ENTRY (5);
      595     6238    1   DCL VDG$FORMAT_LOCATION     ENTRY (5);
      596     6239    1   DCL VDG$FORMAT_BLOCK_DESC   ENTRY (5);
      597     6240
      598     6241
      599     6242    1   DCL M$ME DCB;
      600     6243    1   DCL M$DO DCB;
      601     6244    1   DCL M$EI DCB;
      602     6245    1   DCL M$LO DCB;
      603     6246    1   DCL M$SI DCB;
      604     6247        %VD_6E (STCLASS=SYMREF);
      605     6283    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      606     6284        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      607     6329        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      608     6374        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:87   
      609     6419        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      610     6464    1   DCL 1 VD_STATIC_TEMP ALIGNED SYMREF,
      611     6465    1         2 BUFFER (0:3) CHAR(%(MXNB_ERR_SUBST+1)) CALIGNED;
      612     6466    1   DCL VD_WORST_FLAGLEV SBIN SYMREF;
      613     6467    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
      614     6468    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
      615     6469        %VD_TEXTC (NAME=B_VERSION, STCLASS=SYMREF, MXNB=%NB_VERSION);
      616     6610        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
      617     6948        %FPT_EXIT (FPTN=VD_EXIT, STCLASS=SYMREF);
      618     6963    1   DCL B$TCB$ PTR SYMREF;
      619     6964
      620     6965
      621     6966
      622     6967    1   DCL MX_FLAGLEV UBIN;
      623     6968    1   DCL RECOV_ERR_HEAD$ PTR;
      624     6969    1   DCL CURR_ERR$ PTR;
      625     6970    1   DCL CWIN_SPEC$ PTR;
      626     6971    1   DCL JUST_ERASE BIT(1) ALIGNED;
      627     6972        %VD$ERR_CODE (NAME=FATAL_ERR_CODE, STCLASS=AUTO);
      628     6987
      629     6988        /*****                !! CAUTION !!               *****/
      630     6989        /***** !! The next three dcls must be together !! *****/
      631     6990        %VD$ERR (NAME=AUTO_ERR, STCLASS=AUTO);
      632     7043        %VD$POINTER (NAME=AUTO_ERR_PTRS, DIM="(0:2)", STCLASS=AUTO);
      633     7088        %VD$NUMBER (NAME=AUTO_ERR_NUMS, DIM="(0:2) REDEF AUTO_ERR_PTRS", STCLASS="");
      634     7133
      635     7134
      636     7135
      637     7136        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      638     7189        %VD$ERR (NAME=CURR$ERR, STCLASS="BASED(CURR_ERR$)");
      639     7242        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
      640     7281        %VD$WINDOW_SPEC (NAME=CWIN$SPEC, STCLASS="BASED(CWIN_SPEC$)");
      641     7347        %VD$ERR;
      642     7400        %VD$FILE_NODE;
      643     7493        %F$DCB;
      644     7550        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      645     7553        %B$ALT;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:88   
      646     7561
      647     7562
      648     7563
      649     7564    1           MX_FLAGLEV = 0;
      650     7565    1           RECOV_ERR_HEAD$ = FATAL$ERR.FLINK$;
      651     7566
      652     7567    1   REPORT_ERROR:
      653     7568    2           IF FATAL$ERR.ERR ~= %CLEAR THEN DO;
      654     7569    2              CURR_ERR$ = ADDR(FATAL$ERR);
      655     7570                   /* FATAL$ERR must specify a fatal error */
      656     7571    2              FATAL$ERR.FLAGLEV# = %FLV_FATAL;
      657     7572    2              END;
      658     7573    2           ELSE DO;
      659     7574                   /* No fatal errors to report;
      660     7575                   *     see if there are any recoverable errors to report */
      661     7576    2              CURR_ERR$ = FATAL$ERR.FLINK$;
      662     7577
      663     7578    3              IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;
      664     7579    3                 CWIN_SPEC$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;
      665     7580    3                 IF DCBADDR(CWIN$SPEC.DCB#)->F$DCB.UOPT#(0) THEN
      666     7581    4   ADJUST_2DIM_COMMAND_WINDOW: DO;
      667     7582    5                    IF CWIN$SPEC.COORDS.HEIGHT# < VD_$MAX_COMMAND.V# THEN DO;
      668     7583                            /* Normally, we'd expand the command window; but ... */
      669     7584    5                       JUST_ERASE = %FALSE;
      670     7585    5                       IF (VD_LAST_CWIN_ACTIVITY = %LCA_READ
      671     7586    5                         OR VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH)
      672     7587    6                         AND CURR_ERR$ = VD_6E.ERR_TAIL$ THEN DO;
      673     7588    6                          IF CURR$ERR.FLAGLEV# < %FLV_SERIOUS THEN
      674     7589    6                             JUST_ERASE = %TRUE;
      675     7590    6                          END;
      676     7591    6                       IF JUST_ERASE THEN DO;
      677     7592                               /*
      678     7593                               *  Only 1 info or warning error:  don't expand the
      679     7594                               *     command window, just erase it so msg is at top.
      680     7595                               */
      681     7596    6                          CALL VDG$ERASE_COMMAND_WINDOW
      682     7597    7                          WHENALTRETURN DO;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:89   
      683     7598    7                             FATAL_ERR_CODE = VD_6E.ERR_TAIL$->VD$ERR.ERR;
      684     7599    7                             GOTO FORCE_FATAL_ERROR;
      685     7600    7                             END;
      686     7601    6                          VD_LAST_CWIN_ACTIVITY = %LCA_1_INFO_WARN;
      687     7602    6                          END;
      688     7603    6                       ELSE DO;
      689     7604                               /* Expand the command window to it's max height */
      690     7605    6                          IF NOT DCBADDR(CWIN$SPEC.DCB#) -> F$DCB.FCD# THEN
      691     7606    6                             CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);
      692     7607    6                          ELSE /* If the window's gone, use the whole screen */
      693     7608    6                             CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MAX_COMMAND.V#)
      694     7609    7                             WHENALTRETURN DO;
      695     7610    7                                FATAL_ERR_CODE.CODE# = %E$HUH;
      696     7611    7                                GOTO FORCE_FATAL_ERROR;
      697     7612    7                                END;
      698     7613    6                          VD_LAST_CWIN_ACTIVITY = %LCA_UNACKD_ERROR;
      699     7614    6                          VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;
      700     7615    6                          END;
      701     7616    5                       END;
      702     7617    5                    ELSE DO;
      703     7618                            /* Command window is already expanded */
      704     7619    5                       VD_LAST_CWIN_ACTIVITY = %LCA_UNACKD_ERROR;
      705     7620    5                       VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;
      706     7621    5                       END;
      707     7622    4                    END ADJUST_2DIM_COMMAND_WINDOW;
      708     7623    3                 END;
      709     7624    2              END;
      710     7625
      711     7626                /* Main error reporting loop */
      712     7627
      713     7628    1   EACH_ERR_IN_CHAIN:
      714     7629    2           DO WHILE CURR_ERR$ ~= ADDR(NIL);
      715     7630    2              IF CURR$ERR.FLAGLEV# > MX_FLAGLEV THEN
      716     7631    2                 MX_FLAGLEV = CURR$ERR.FLAGLEV#;
      717     7632                   /*
      718     7633                   *  If we haven't reported any messages yet, precede the first message
      719     7634                   *    with the "6Edit Here" banner message.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:90   
      720     7635                   */
      721     7636    3              IF VD_WORST_FLAGLEV = 0 THEN DO;
      722     7637    3                 AUTO_ERR = %CLEAR;
      723     7638    3                 AUTO_ERR.ERR.CODE# = %E$INFO_BANNER;
      724     7639    3                 AUTO_ERR.FLAGLEV# = %FLV_INFO;
      725     7640    3                 AUTO_ERR_PTRS.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;
      726     7641    3                 AUTO_ERR_PTRS.V$ (0) = ADDR(B_VERSION);
      727     7642    3                 CALL REPORT_A_VD$ERR (AUTO_ERR, FATAL_ERR_CODE)
      728     7643    3                   ALTRET (REPORT_A_VD$ERR_FAILED);
      729     7644    3                 END;
      730     7645
      731     7646    2              CALL REPORT_A_VD$ERR (CURR$ERR, FATAL_ERR_CODE)
      732     7647    2                ALTRET (REPORT_A_VD$ERR_FAILED);
      733     7648
      734     7649                   /*
      735     7650                   *  If we reported a warning message and the current
      736     7651                   *    command stream is %CS_FILE or %CS_DCB, tell the user
      737     7652                   *    what record the error occurred at.
      738     7653                   */
      739     7654    2              IF CURR$ERR.FLAGLEV# = %FLV_WARN
      740     7655    2                AND VD_6E.CMD_STREAM$ ~= ADDR(NIL) THEN
      741     7656    2                 IF (CMD$STREAM.TYPE# = %CS_FILE
      742     7657    2                   OR CMD$STREAM.TYPE# = %CS_DCB)
      743     7658    2                   AND CMD$STREAM.REC_NUM# > 0 THEN
      744     7659    3   INFO_READ_FILE_AT: DO;
      745     7660    3                    IF VD_$$QUAC.V#~=0 AND CMD$STREAM.DCB#=DCBNUM(M$SI)
      746     7661    3                    THEN EXIT INFO_READ_FILE_AT;
      747     7662    3                    AUTO_ERR = %CLEAR;
      748     7663    3                    AUTO_ERR.CMDLINE_INDEX# = -1;
      749     7664    3                    AUTO_ERR.ERR.CODE# = %E$INFO_READ_FILE_AT;
      750     7665    3                    AUTO_ERR.FLAGLEV# = %FLV_INFO;
      751     7666    3                    IF CMD$STREAM.TYPE# = %CS_FILE THEN
      752     7667    3                       AUTO_ERR.DCB# = DCBNUM(M$EI);
      753     7668    3                    ELSE
      754     7669    3                       AUTO_ERR.DCB# = CMD$STREAM.DCB#;
      755     7670    3                    AUTO_ERR_NUMS.OBJECT.CLASS# (0) = %CLS_NUMBER;
      756     7671    3                    AUTO_ERR_NUMS.V# (0) = CMD$STREAM.REC_NUM#;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:91   
      757     7672    3                    CALL REPORT_A_VD$ERR (AUTO_ERR, FATAL_ERR_CODE)
      758     7673    3                      ALTRET (REPORT_A_VD$ERR_FAILED);
      759     7674    3                    END INFO_READ_FILE_AT;
      760     7675
      761     7676    2              CURR_ERR$ = CURR$ERR.FLINK$;
      762     7677    2              END EACH_ERR_IN_CHAIN;
      763     7678
      764     7679
      765     7680    1           FATAL$ERR = %CLEAR;
      766     7681    1           FATAL$ERR.OBJECT.CLASS# = %CLS_ERR;
      767     7682    1           FATAL$ERR.FLINK$ = ADDR(NIL);
      768     7683    1           VD_6E.ERR_TAIL$ = ADDR(FATAL$ERR);
      769     7684
      770     7685    1           CALL VDG$OFREE (RECOV_ERR_HEAD$->VD$ERR)
      771     7686    1             ALTRET (OFREE_FAILED);
      772     7687
      773     7688    1           IF ADDR(MAX_FLAGLEV) ~= ADDR(NIL) THEN
      774     7689    1              MAX_FLAGLEV = MX_FLAGLEV;
      775     7690    1           RETURN;
      776     7691
      777     7692
      778     7693                /*
      779     7694                *   All errors detected during VDG$EREPORT_ERROR are presumed
      780     7695                *       to be fatal errors.  We simply go back to the start
      781     7696                *       of the routine and process the new error; this should
      782     7697                *       get us very quickly to VDG$MTERMINATE.
      783     7698                */
      784     7699
      785     7700    1   REPORT_A_VD$ERR_FAILED: ;
      786     7701    1   FORCE_FATAL_ERROR: ;
      787     7702    1           IF FATAL$ERR.ERR = %CLEAR THEN
      788     7703    1              FATAL$ERR.ERR = FATAL_ERR_CODE;
      789     7704    1   OFREE_FAILED:
      790     7705    1           FATAL$ERR.FLAGLEV# = %FLV_FATAL;
      791     7706    1           GOTO REPORT_ERROR;
      792     7707
      793     7708        %BOX (TITLE=REPORT_A_VD$ERR, PAGE=YES);
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:92   
              7716    1
              7720    1   /***************************************************************************
              7722    1    *                                                                         *
              7726    1            *                              REPORT_A_VD$ERR                            *
              7728    1            *                                                                         *
              7730    1           ***************************************************************************/

      794     7734
      795     7735        /*I* NAME: REPORT_A_VD$ERR
      796     7736            PARAMETERS:
      797     7737                ERR - VD$ERR to report.
      798     7738                FATAL_CODE - Uninitialized VD$ERR_CODE.
      799     7739            INPUT:
      800     7740            OUTPUT:
      801     7741                If we detect any error in the reporting of the message, we'll
      802     7742                    altreturn and FATAL_CODE will contain the error code (may be a
      803     7743                    monitor code or one of ours (usually E$HUH)).
      804     7744                VD_WORST_FLAGLEV will be updated if ERR's .FLAGLEV is larger.
      805     7745            DESCRIPTION:
      806     7746                Report the message specified in ERR.
      807     7747        */
      808     7748
      809     7749    1   REPORT_A_VD$ERR: PROC (ERR, FATAL_CODE) ALTRET;
      810     7750
      811     7751        %VD$ERR (NAME=ERR, STCLASS=PARAM);
      812     7804        %VD$ERR_CODE (NAME=FATAL_CODE, STCLASS=PARAM);
      813     7819
      814     7820
      815     7821        %INCLUDE B$JIT;
      816     8111    2   DCL B$JIT$ PTR SYMREF;
      817     8112    2   DCL ERR_SUBST$ PTR;
      818     8113
      819     8114
      820     8115        %VD$NUMBER (NAME=ERR$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      821     8160        %VD$POINTER (NAME=ERR$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      822     8205        %VD$FILE_NODE;
      823     8298        %VD$WINDOW_SPEC;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:93   
      824     8364
      825     8365
      826     8366
      827     8367    2           FATAL_CODE = %CLEAR;
      828     8368
      829     8369    3           IF ERR.ERR.FCG = %CLEAR THEN DO;
      830     8370    3              ERR.ERR.FCG = %FCG;
      831     8371    3              ERR.ERR.MID = %FCG_MID_GLOBAL;
      832     8372    3              ERR.ERR.MON = %FALSE;
      833     8373    3              ERR.ERR.SEV# = 0;
      834     8374                   %INCREMENT (ARRAY=STATS_ERRORS#, INDX=ERR.ERR.CODE#);
      835     8377                   %INCREMENT (ARRAY=STATS_ERRORS#, INDX=0);
      836     8380    3              END;
      837     8381
      838     8382    2           XUG_GETCMD.ERR_CODE = ERR.ERR;
      839     8383    2           XUG_GETCMD.FLGLEV# = ERR.FLAGLEV#;
      840     8384    3           IF ERR.CMDLINE_INDEX# >= 0 THEN DO;
      841     8385    3              XUG_GETCMD.USE_EPOS# = %TRUE;
      842     8386    3              XUG_GETCMD.EPOS# = ERR.CMDLINE_INDEX#;
      843     8387    3              END;
      844     8388    2           ELSE
      845     8389    2              XUG_GETCMD.USE_EPOS# = %FALSE;
      846     8390    2           IF ERR.DCB#~=0 THEN XUG_GETCMD.ERRDCB# = ERR.DCB#;
      847     8391        /* Save %U1 in case this is an INFO message, so ? works later */
      848     8392    2           VD_STATIC_TEMP.BUFFER(3) = VD_STATIC_TEMP.BUFFER(0);
      849     8393
      850     8394    2           ERR_SUBST$ = PINCRW(ADDR(ERR), SIZEW(ERR));
      851     8395    2           XUG_GETCMD.F1_ = VECTOR(NIL);
      852     8396    2           XUG_GETCMD.F2_ = VECTOR(NIL);
      853     8397    2           XUG_GETCMD.F3_ = VECTOR(NIL);
      854     8398    3           IF ERR$NUMBER.OBJECT.CLASS# (0) ~= 0 THEN DO;
      855     8399    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (0),
      856     8400    3                VD_STATIC_TEMP.BUFFER (0));
      857     8401    3              XUG_GETCMD.F1_ = VECTOR(VD_STATIC_TEMP.BUFFER (0));
      858     8402    3              END;
      859     8403    3           IF ERR$NUMBER.OBJECT.CLASS# (1) ~= 0 THEN DO;
      860     8404    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (1),
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:94   
      861     8405    3                VD_STATIC_TEMP.BUFFER (1));
      862     8406    3              XUG_GETCMD.F2_ = VECTOR(VD_STATIC_TEMP.BUFFER (1));
      863     8407    3              END;
      864     8408    3           IF ERR$NUMBER.OBJECT.CLASS# (2) ~= 0 THEN DO;
      865     8409    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (2),
      866     8410    3                VD_STATIC_TEMP.BUFFER (2));
      867     8411    3              XUG_GETCMD.F3_ = VECTOR(VD_STATIC_TEMP.BUFFER (2));
      868     8412    3              END;
      869     8413
      870     8414
      871     8415    2           XUG_GETCMD.DCB2_PARAM# = 0;
      872     8416    3           IF ERR.FLAGLEV# = %FLV_INFO THEN DO;
      873     8417    3              XUG_GETCMD.INFOMSG# = %TRUE;
      874     8418    3              XUG_GETCMD.DCB_PARAM# = DCBNUM(M$ME);
      875     8419    3              IF VD_$$QUAC.V#~=0 AND VD_$COMMAND.V#=1
      876     8420    3              THEN XUG_GETCMD.DCB_PARAM# = DCBNUM(M$LO);
      877     8421    3              END;
      878     8422    3           ELSE DO;
      879     8423    4              CALL XUG$CORRES (DCBNUM(M$DO), DCBNUM(M$LO)) WHENRETURN DO;
      880     8424    4                 XUG_GETCMD.DCB2_PARAM# = DCBNUM(M$DO);
      881     8425    4                 XUG_GETCMD.DCB_PARAM# = DCBNUM(M$DO);
      882     8426    4                 IF XUG_GETCMD.EOMCHAR#~=' ' THEN
      883     8427    4                    CALL XUG$ECHO (XUG_GETCMD);
      884     8428    4                 END;
      885     8429    3              XUG_GETCMD.DCB_PARAM# = DCBNUM(M$LO);
      886     8430    3              IF XUG_GETCMD.EOMCHAR#=%EOM_EOR#
      887     8431    3                AND (XUG_GETCMD.TREAD# OR NOT B$JIT.CPFLAGS1&%CP_ECHO#) THEN
      888     8432    3                 CALL XUG$ECHO (XUG_GETCMD);
      889     8433    3              END;
      890     8434
      891     8435    2           XUG_GETCMD.EOMCHAR# = ' ';
      892     8436
      893     8437    3           IF XUG_GETCMD.USE_EPOS# THEN DO;
      894     8438                    /* If we get a syntax error, show it to the user */
      895     8439
      896     8440    3              CALL XUG$ERRPTR (XUG_GETCMD);
      897     8441    3              END;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:95   
      898     8442    2           CALL XUG$ERRMSG (XUG_GETCMD);
      899     8443
      900     8444    2           IF ERR.FLAGLEV# = %FLV_INFO THEN
      901     8445    2              VD_STATIC_TEMP.BUFFER(0) = VD_STATIC_TEMP.BUFFER(3);
      902     8446
      903     8447    2           IF ERR.FLAGLEV# > VD_WORST_FLAGLEV THEN
      904     8448    2              VD_WORST_FLAGLEV = ERR.FLAGLEV#;
      905     8449    3           IF ERR.FLAGLEV# >= %FLV_FATAL THEN DO;
      906     8450    3              ERR.ERR = '0'B; /* Don't report the error twice */
      907     8451    3              VD_EXIT.V.STEPCC# = %STEPCC_ERROR;
      908     8452    3              CALL VDG$MTERMINATE;
      909     8453                   /*
      910     8454                   *  Usually, we'd never return from VDG$MTERMINATE.
      911     8455                   *  However, if we're reporting a hardware trap, then we're in the
      912     8456                   *     middle of exception handling, so VDG$MTERMINATE will indeed
      913     8457                   *     return to us.  We should simply return to the trap handler
      914     8458                   *     that called us.
      915     8459                   */
      916     8460    3              END;
      917     8461
      918     8462    2           RETURN;
      919     8463
      920     8464
      921     8465    2   END REPORT_A_VD$ERR;
      922     8466
      923     8467                %BOX (TITLE="SUBST_TO_TEXTC", PAGE=YES);
              8475    2
              8479    2   /***************************************************************************
              8481    2    *                                                                         *
              8485    2            *                               SUBST_TO_TEXTC                            *
              8487    2            *                                                                         *
              8489    2           ***************************************************************************/

      924     8493
      925     8494        /*I* NAME: SUBST_TO_TEXTC
      926     8495            PARAMETERS:
      927     8496                SUBST - A VD$NUMBER or VD$POINTER structure to process.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:96   
      928     8497                TEXTC - A VD$TEXTC with MXNB >= %MXNB_ERR_SUBST to use
      929     8498                    for the TEXTC result.
      930     8499            INPUT:
      931     8500            OUTPUT:
      932     8501                TEXTC will contain the TEXTC string for the substitution
      933     8502                    field.
      934     8503            DESCRIPTION:
      935     8504                Based on the OBJECT.CLASS# of SUBST, build the textc string:
      936     8505                    o If SUBST is unused, return a 0-length string.
      937     8506                    o If %CLS_PTR_TEXTC, just copy the textc string to TEXTC.
      938     8507                    o If %CLS_NUMBER, %CLS_BOOLEAN, or any of the enumerated
      939     8508                        object classes, call VDG$FORMAT_NUMBER to format the value
      940     8509                        into TEXTC.
      941     8510                    o If %CLS_PTR_KEY, %CLS_PTR_LOCATION, or
      942     8511                         %CLS_BLOCK_DESC, call the appropriate VDG$FORMAT_...
      943     8512                        routine to format the value into TEXTC.
      944     8513        */
      945     8514
      946     8515    1   SUBST_TO_TEXTC: PROC (SUBST, TEXTC);
      947     8516        %VD$NUMBER (NAME=SUBST, STCLASS=PARAM);
      948     8561        %VD$POINTER (NAME=SUBST_PTR, STCLASS="REDEF SUBST");
      949     8606        %VD$TEXTC (NAME=TEXTC, STCLASS=PARAM);
      950     8629
      951     8630
      952     8631
      953     8632    2   DCL END_INDEX SBIN;
      954     8633    2   DCL OBJECT_CLASS SBIN;
      955     8634
      956     8635
      957     8636        %VD$TEXTC (NAME=SUBST$TEXTC, STCLASS="BASED(SUBST_PTR.V$)",
      958     8637            ALIGNMENT=CALIGNED);
      959     8660        %VD$KEY (NAME=SUBST$KEY, STCLASS="BASED(SUBST_PTR.V$)");
      960     8674        %VD$LOCATION (NAME=SUBST$LOCATION, STCLASS="BASED(SUBST_PTR.V$)");
      961     8702        %VD$BLOCK_DESC (NAME=SUBST$BLOCK_DESC, STCLASS="BASED(SUBST_PTR.V$)");
      962     8849
      963     8850
      964     8851
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:97   
      965     8852    3           DO CASE (SUBST.OBJECT.CLASS#);
      966     8853
      967     8854    3            CASE (%CLS_PTR_TEXTC);
      968     8855    3              TEXTC.LENGTH# = MINIMUM (SUBST$TEXTC.LENGTH#, %MXNB_ERR_SUBST);
      969     8856    3              TEXTC.BYTES = SUBSTR (SUBST$TEXTC.BYTES,0,TEXTC.LENGTH#);
      970     8857
      971     8858    3            CASE (%CLS_PTR_KEY);
      972     8859    3              CALL VDG$FORMAT_KEY (SUBST$KEY, %MXNB_ERR_SUBST, TEXTC.BYTES, 0,
      973     8860    3                END_INDEX);
      974     8861    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);
      975     8862
      976     8863    3            CASE (%CLS_PTR_LOCATION);
      977     8864    3              CALL VDG$FORMAT_LOCATION (SUBST$LOCATION, %MXNB_ERR_SUBST,
      978     8865    3                TEXTC.BYTES, 0, END_INDEX);
      979     8866    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);
      980     8867
      981     8868    3            CASE (%CLS_PTR_BLOCK_DESC);
      982     8869    3              CALL VDG$FORMAT_BLOCK_DESC (SUBST$BLOCK_DESC, %MXNB_ERR_SUBST,
      983     8870    3                TEXTC.BYTES, 0, END_INDEX);
      984     8871    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);
      985     8872
      986     8873    3            CASE (ELSE);
      987     8874    3              OBJECT_CLASS = SUBST.OBJECT.CLASS#;
      988     8875    3              IF OBJECT_CLASS = 0 THEN TEXTC.LENGTH# = 0;
      989     8876    3              ELSE CALL VDG$FORMAT_NUMBER (OBJECT_CLASS, SUBST.V#,
      990     8877    3                   %MXNB_ERR_SUBST, TEXTC.BYTES, 0, END_INDEX);
      991     8878    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);
      992     8879
      993     8880    3            END;
      994     8881
      995     8882    2           RETURN;
      996     8883
      997     8884    2   END SUBST_TO_TEXTC;
      998     8885
      999     8886    1   END VDG$EREPORT_ERROR;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:98   
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EREPORT_ERROR.

   Procedure VDG$EREPORT_ERROR requires 548 words for executable code.
   Procedure VDG$EREPORT_ERROR requires 44 words of local(AUTO) storage.

    No errors detected in file VDG$ENVIRONMENT.:VDA5TSI    .

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:99   

 Object Unit name= VDG$EREPORT_ERROR                          File name= VDG$ENVIRONMENT.:VDA5TOU
 UTS= JUL 04 '97 11:17:58.56 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$ME
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$EI
    4   DCB   even  none     0      0  M$LO
    5   DCB   even  none     0      0  M$SI
    6   Proc  even  none   548   1044  VDG$EREPORT_ERROR
    7  RoData even  none    24     30  VDG$EREPORT_ERROR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     6      0   yes            yes      Std        1  VDG$EREPORT_ERROR
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:100  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 VDG$ERASE_COMMAND_WINDOW
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       1 VDG$EXPAND_COMMAND_WINDOW
 yes     yes           Std       2 XUG$CORRES
 yes     yes           Std       1 XUG$ECHO
         yes           Std       0 VDG$MTERMINATE
 yes     yes           Std       1 XUG$ERRPTR
 yes     yes           Std       1 XUG$ERRMSG
         yes           Std       5 VDG$FORMAT_KEY
         yes           Std       5 VDG$FORMAT_BLOCK_DESC
         yes           Std       6 VDG$FORMAT_NUMBER
         yes           Std       5 VDG$FORMAT_LOCATION
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$ME                                  M$DO
     M$EI                                  M$LO                                  M$SI
     VD_6E                                 VD_COMMAND_WINDOW$                    VD_$MAX_COMMAND
     VD_$COMMAND                           VD_$$QUAC                             VD_$SCREEN
     VD_STATIC_TEMP                        VD_WORST_FLAGLEV                      VD_FORCE_READ_FROM
     VD_LAST_CWIN_ACTIVITY                 B_VERSION                             XUG_GETCMD
     VD_EXIT                               B$TCB$                                B$JIT$
     B_VECTNIL
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:101  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID                                 NULLSID                               ISSID
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:102  


      461        1        /*T***********************************************************/
      462        2        /*T*                                                         */
      463        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      464        4        /*T*                                                         */
      465        5        /*T***********************************************************/
      466        6
      467        7        /*D* NAME: VDG$EREPORT_ERROR
      468        8            PARAMETERS:
      469        9                MAX_FLAGLEV - An optional uninitialized UBIN WORD.  Need
      470       10                    not be included in call.
      471       11            INPUT:
      472       12                VD_6E.ERR_HEAD$ must point to the head of a chain of VD$ERRs.
      473       13                    The first VD$ERR in the chain is static; the rest are
      474       14                    allocated dynamically.  Dynamically-allocated VD$ERRs
      475       15                    may not contain fatal or initialization errors,
      476       16                    and only one may contain a non-zero .CMDLINE_INDEX#
      477       17                    (for reporting errors in command lines).  However,
      478       18                    informational, warning, and serious messages may be mixed
      479       19                    freely in the chain.
      480       20                The head, or static, VD$ERR structure may only contain
      481       21                    a fatal error.  If there is no fatal error to be
      482       22                    reported, then the head VD$ERR's .FLINK$ points to the
      483       23                    first dynamic VD$ERR for the recoverable errors.  This
      484       24                    guarantees that, no matter how many non-fatal errors
      485       25                    we've already put on the VD$ERR chain, we always have
      486       26                    a place--at the front of the chain--to put a fatal
      487       27                    error specification.
      488       28                Each VD$ERR is immediately followed by an array of 3
      489       29                    VD$NUMBERs/VD$POINTERs.  These specify the substitution
      490       30                    fields for the error message.
      491       31                Each VD$ERR in the chain must also contain:
      492       32                    o .ERR.CODE# and .FLAGLEV# set appropriately.  If we're still
      493       33                        in initialization and so can't (de)allocate dynamic storage
      494       34                        yet, .FLAGLEV# must be %FLV_FATAL.
      495       35                    o If this is a monitor error, the entire .ERR
      496       36                        should be filled (FCG, MON, SEV, etc.).
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:103  
      497       37                    o DCB# should specify the DCB for any I/O-related errors.
      498       38                    o .CMDLINE_INDEX# may contain a non-zero value, to
      499       39                        reference text in the command line which is related
      500       40                        to the error.
      501       41                VD_6E.ERR_TAIL$ points to the last VD$ERR in the chain.
      502       42                VD_6E.CMD_STREAM$->.RECORD$ must point to a VD$BUFFER containing
      503       43                    the command being processed when the error was detected.
      504       44                    Used only if the error is not fatal and
      505       45                    VD$ERR.CMDLINE_INDEX a non-zero value.
      506       46                VD_6E.STATS_ERRORS should contain the error message statistics
      507       47                    for this session.
      508       48                VD_COMMAND_WINDOW$ - May be NIL if we don't have a command window yet
      509       49                    (we're in initialization); else it must point to the
      510       50                    VD$FILE_NODE for the command window, which must have a
      511       51                    VD$WINDOW_SPEC attached whose .DCB# refers to the DCB for the
      512       52                    command window.  If this DCB is open in 2Dim form, the DCB's
      513       53                    UOPT0 must be set; else it must be reset.
      514       54                VD_$MAX_COMMAND must contain the max height to which the
      515       55                    user wants the command window expanded.
      516       56                VD_WORST_FLAGLEV must contain the worst (largest) "flag level"
      517       57                    (%FLV_ value) reported so far in this 6Edit session.
      518       58                    If we haven't written any messages yet, VD_WORST_FLAGLEV
      519       59                    must be 0.
      520       60                VD_$SCREEN must contain the height of the screen 6Edit is to use.
      521       61            OUTPUT:
      522       62                MAX_FLAGLEV, if passed, will contain the maximum (worst)
      523       63                    "flag level" (see %FLV_ definitions) found in the
      524       64                    VD$ERR chain.  Note that MAX_FLAGLEV will never contain
      525       65                    %FLV_FATAL, since VDG$EREPORT_ERROR doesn't return if
      526       66                    it finds a fatal error.
      527       67                VD_WORST_FLAGLEV will be updated if any VD$ERR in this chain
      528       68                    specifies a larger "flaglev" value.
      529       69                VD_6E.ERR_HEAD$ and _TAIL$ will point to the static VD$ERR.
      530       70                If no fatal error is present, we may tell the Presenter
      531       71                VD_LAST_CWIN_ACTIVITY may be set to indicate (via an %LCA_ value) what
      532       72                    we did to/in the command window.
      533       73                    to erase or expand the command window.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:104  
      534       74                VD_FORCE_READ_FROM will be set to %RF_COMMAND_WINDOW if we wrote a
      535       75                    message to an expanded 2Dim command window at some position other
      536       76                    than the top of the window.  By forcing another command-window
      537       77                    read, the user has a chance to read the message before the command
      538       78                    window is shrunk for an editing-window read.
      539       79                If the static VD$ERR specifies a fatal error (%FLV_FATAL or
      540       80                        not yet initialized):
      541       81                    We'll call VDG$MTERMINATE directly.  We won't call XUG
      542       82                        to display the error message; instead,
      543       83                        VDG$MTERMINATE will display it.
      544       84                        Normally, VDG$MTERMINATE will not return to
      545       85                        us; however, if we're reporting a hardware fault,
      546       86                        we will be returned-to and should in turn return.
      547       87            DESCRIPTION:
      548       88                If we have a command window and it's open in 2Dim form, then we
      549       89                may want to adjust its size before writing the message.  The decision
      550       90                on what to do looks like this:
      551       91                    If command window height isn't expanded to its max height:
      552       92                        If there's only 1 error to report and its not serious:
      553       93                            Just erase the command window, so msg appears at top line.
      554       94                        Else
      555       95                            Expand the command window to its max height.
      556       96                            Force the next read to be from the command window.
      557       97                    Else
      558       98                        Force the next read to be from the command window.
      559       99
      560      100                For each VD$ERR in the current chain:
      561      101                    If the error code is incomplete, fill in the FCG, MID,
      562      102                        and SEV fields.
      563      103                    Fill in XUG_GETCMD from the VD$ERR.
      564      104                    If this is a fatal error (.FLAGLEV# = %FLV_FATAL) or if it
      565      105                            was detected during initialization:
      566      106                        Set VD_EXIT's STEPCC and error-code-pointer.
      567      107                        Call VDG$MTERMINATE to clean up, display the error
      568      108                            message, and return to the monitor.
      569      109                    Else call XUG$ERRMSG to write the error message.
      570      110                    If this VD$ERR's .FLINK$ is non-NIL, then continue
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:105  
      571      111                        with the next VD$ERR in the chain.
      572      112                When all done, just before returning (on non-fatal errors, of
      573      113                course):
      574      114                    Reset VD_6E.ERR_TAIL$ to point to the static VD$ERR.
      575      115        */
      576      116
      577      117        VDG$EREPORT_ERROR: PROC (MAX_FLAGLEV);

    117  6 000000   000000 700200 xent  VDG$EREPORT* TSX0  ! X66_AUTO_1
         6 000001   000054 000001                    ZERO    44,1

      578      118    1   DCL MAX_FLAGLEV UBIN;
      579      119
      580      120
      581      121        %INCLUDE CP_6;
      582      202        %INCLUDE CP_6_SUBS;
      583      742        %INCLUDE VD_MACROS_M;
      584     2957        %INCLUDE VD_PERR_C;
      585     3105        %INCLUDE XU_MACRO_C;
      586     6199        %INCLUDE XUG_ENTRY;
      587     6230
      588     6231
      589     6232    1   DCL VDG$EXPAND_COMMAND_WINDOW ENTRY (1) ALTRET;
      590     6233    1   DCL VDG$ERASE_COMMAND_WINDOW ENTRY ALTRET;
      591     6234    1   DCL VDG$MTERMINATE          ENTRY;
      592     6235    1   DCL VDG$OFREE               ENTRY (1) ALTRET;
      593     6236    1   DCL VDG$FORMAT_NUMBER       ENTRY (6);
      594     6237    1   DCL VDG$FORMAT_KEY          ENTRY (5);
      595     6238    1   DCL VDG$FORMAT_LOCATION     ENTRY (5);
      596     6239    1   DCL VDG$FORMAT_BLOCK_DESC   ENTRY (5);
      597     6240
      598     6241
      599     6242    1   DCL M$ME DCB;
      600     6243    1   DCL M$DO DCB;
      601     6244    1   DCL M$EI DCB;
      602     6245    1   DCL M$LO DCB;
      603     6246    1   DCL M$SI DCB;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:106  
      604     6247        %VD_6E (STCLASS=SYMREF);
      605     6283    1   DCL VD_COMMAND_WINDOW$ PTR SYMREF;
      606     6284        %VD$NUMBER (NAME=VD_$MAX_COMMAND, STCLASS=SYMREF);
      607     6329        %VD$NUMBER (NAME=VD_$COMMAND, STCLASS=SYMREF);
      608     6374        %VD$NUMBER (NAME=VD_$$QUAC, STCLASS=SYMREF);
      609     6419        %VD$NUMBER (NAME=VD_$SCREEN, STCLASS=SYMREF);
      610     6464    1   DCL 1 VD_STATIC_TEMP ALIGNED SYMREF,
      611     6465    1         2 BUFFER (0:3) CHAR(%(MXNB_ERR_SUBST+1)) CALIGNED;
      612     6466    1   DCL VD_WORST_FLAGLEV SBIN SYMREF;
      613     6467    1   DCL VD_FORCE_READ_FROM UBIN SYMREF;
      614     6468    1   DCL VD_LAST_CWIN_ACTIVITY UBIN SYMREF;
      615     6469        %VD_TEXTC (NAME=B_VERSION, STCLASS=SYMREF, MXNB=%NB_VERSION);
      616     6610        %XUG_GETCMD (NAME=XUG_GETCMD, STCLASS=SYMREF);
      617     6948        %FPT_EXIT (FPTN=VD_EXIT, STCLASS=SYMREF);
      618     6963    1   DCL B$TCB$ PTR SYMREF;
      619     6964
      620     6965
      621     6966
      622     6967    1   DCL MX_FLAGLEV UBIN;
      623     6968    1   DCL RECOV_ERR_HEAD$ PTR;
      624     6969    1   DCL CURR_ERR$ PTR;
      625     6970    1   DCL CWIN_SPEC$ PTR;
      626     6971    1   DCL JUST_ERASE BIT(1) ALIGNED;
      627     6972        %VD$ERR_CODE (NAME=FATAL_ERR_CODE, STCLASS=AUTO);
      628     6987
      629     6988        /*****                !! CAUTION !!               *****/
      630     6989        /***** !! The next three dcls must be together !! *****/
      631     6990        %VD$ERR (NAME=AUTO_ERR, STCLASS=AUTO);
      632     7043        %VD$POINTER (NAME=AUTO_ERR_PTRS, DIM="(0:2)", STCLASS=AUTO);
      633     7088        %VD$NUMBER (NAME=AUTO_ERR_NUMS, DIM="(0:2) REDEF AUTO_ERR_PTRS", STCLASS="");
      634     7133
      635     7134
      636     7135
      637     7136        %VD$ERR (NAME=FATAL$ERR, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      638     7189        %VD$ERR (NAME=CURR$ERR, STCLASS="BASED(CURR_ERR$)");
      639     7242        %VD$CMD_STREAM (NAME=CMD$STREAM, STCLASS="BASED(VD_6E.CMD_STREAM$)");
      640     7281        %VD$WINDOW_SPEC (NAME=CWIN$SPEC, STCLASS="BASED(CWIN_SPEC$)");
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:107  
      641     7347        %VD$ERR;
      642     7400        %VD$FILE_NODE;
      643     7493        %F$DCB;
      644     7550        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      645     7553        %B$ALT;
      646     7561
      647     7562
      648     7563
      649     7564    1           MX_FLAGLEV = 0;

   7564  6 000002   200004 450100                    STZ     MX_FLAGLEV,,AUTO

      650     7565    1           RECOV_ERR_HEAD$ = FATAL$ERR.FLINK$;

   7565  6 000003   000031 470400 xsym               LDP0    VD_6E+25
         6 000004   000001 236100                    LDQ     1,,PR0
         6 000005   200005 756100                    STQ     RECOV_ERR_HEAD$,,AUTO

      651     7566
      652     7567    1   REPORT_ERROR:
      653     7568    2           IF FATAL$ERR.ERR ~= %CLEAR THEN DO;

   7568  6 000006   000031 470400 xsym  REPORT_ERROR LDP0    VD_6E+25
         6 000007   000002 235100                    LDA     2,,PR0
         6 000010   000016 600000 6                  TZE     s:7576

      654     7569    2              CURR_ERR$ = ADDR(FATAL$ERR);

   7569  6 000011   000031 236000 xsym               LDQ     VD_6E+25
         6 000012   200006 756100                    STQ     CURR_ERR$,,AUTO

      655     7570                   /* FATAL$ERR must specify a fatal error */
      656     7571    2              FATAL$ERR.FLAGLEV# = %FLV_FATAL;

   7571  6 000013   000004 220003                    LDX0    4,DU
         6 000014   000003 740100                    STX0    3,,PR0

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:108  
      657     7572    2              END;

   7572  6 000015   000130 710000 6                  TRA     EACH_ERR_IN_CHAIN

      658     7573    2           ELSE DO;

      659     7574                   /* No fatal errors to report;
      660     7575                   *     see if there are any recoverable errors to report */
      661     7576    2              CURR_ERR$ = FATAL$ERR.FLINK$;

   7576  6 000016   000001 236100                    LDQ     1,,PR0
         6 000017   200006 756100                    STQ     CURR_ERR$,,AUTO

      662     7577
      663     7578    3              IF VD_COMMAND_WINDOW$ ~= ADDR(NIL) THEN DO;

   7578  6 000020   000000 236000 xsym               LDQ     VD_COMMAND_WINDOW$
         6 000021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000022   000130 600000 6                  TZE     EACH_ERR_IN_CHAIN

      664     7579    3                 CWIN_SPEC$ = VD_COMMAND_WINDOW$->VD$FILE_NODE.DESC.SPEC.V$;

   7579  6 000023   000000 471400 xsym               LDP1    VD_COMMAND_WINDOW$
         6 000024   100007 236100                    LDQ     7,,PR1
         6 000025   200007 756100                    STQ     CWIN_SPEC$,,AUTO

      665     7580    3                 IF DCBADDR(CWIN$SPEC.DCB#)->F$DCB.UOPT#(0) THEN

   7580  6 000026   000000 473400 7                  LDP3    0
         6 000027   300000 474500                    LDP4    0,,PR3
         6 000030   200007 475500                    LDP5    CWIN_SPEC$,,AUTO
         6 000031   500014 720100                    LXL0    12,,PR5
         6 000032   400000 476510                    LDP6    0,X0,PR4
         6 000033   600031 236100                    LDQ     25,,PR6
         6 000034   000400 316003                    CANQ    256,DU
         6 000035   000130 600000 6                  TZE     EACH_ERR_IN_CHAIN

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:109  
      666     7581    4   ADJUST_2DIM_COMMAND_WINDOW: DO;

   7581  6 000036                       ADJUST_2DIM* null
      667     7582    5                    IF CWIN$SPEC.COORDS.HEIGHT# < VD_$MAX_COMMAND.V# THEN DO;

   7582  6 000036   500005 236100                    LDQ     5,,PR5
         6 000037   000003 116000 xsym               CMPQ    VD_$MAX_COMMAND+3
         6 000040   000124 605000 6                  TPL     s:7619

      668     7583                            /* Normally, we'd expand the command window; but ... */
      669     7584    5                       JUST_ERASE = %FALSE;

   7584  6 000041   200010 450100                    STZ     JUST_ERASE,,AUTO

      670     7585    5                       IF (VD_LAST_CWIN_ACTIVITY = %LCA_READ

   7585  6 000042   000000 235000 xsym               LDA     VD_LAST_CWIN_ACTIVITY
         6 000043   000001 115007                    CMPA    1,DL
         6 000044   000047 600000 6                  TZE     s:7585+5
         6 000045   000004 115007                    CMPA    4,DL
         6 000046   000060 601000 6                  TNZ     s:7591
         6 000047   200006 236100                    LDQ     CURR_ERR$,,AUTO
         6 000050   000032 116000 xsym               CMPQ    VD_6E+26
         6 000051   000060 601000 6                  TNZ     s:7591

      671     7586    5                         OR VD_LAST_CWIN_ACTIVITY = %LCA_SWITCH)
      672     7587    6                         AND CURR_ERR$ = VD_6E.ERR_TAIL$ THEN DO;

      673     7588    6                          IF CURR$ERR.FLAGLEV# < %FLV_SERIOUS THEN

   7588  6 000052   200006 477500                    LDP7    CURR_ERR$,,AUTO
         6 000053   700003 221100                    LDX1    3,,PR7
         6 000054   000003 101003                    CMPX1   3,DU
         6 000055   000060 603000 6                  TRC     s:7591

      674     7589    6                             JUST_ERASE = %TRUE;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:110  
   7589  6 000056   400000 236003                    LDQ     -131072,DU
         6 000057   200010 756100                    STQ     JUST_ERASE,,AUTO

      675     7590    6                          END;

      676     7591    6                       IF JUST_ERASE THEN DO;

   7591  6 000060   200010 234100                    SZN     JUST_ERASE,,AUTO
         6 000061   000075 605000 6                  TPL     s:7605

      677     7592                               /*
      678     7593                               *  Only 1 info or warning error:  don't expand the
      679     7594                               *     command window, just erase it so msg is at top.
      680     7595                               */
      681     7596    6                          CALL VDG$ERASE_COMMAND_WINDOW

   7596  6 000062   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000063   000000 701000 xent               TSX1    VDG$ERASE_COMMAND_WINDOW
         6 000064   000066 702000 6                  TSX2    s:7598
         6 000065   000072 710000 6                  TRA     s:7601

      682     7597    7                          WHENALTRETURN DO;

      683     7598    7                             FATAL_ERR_CODE = VD_6E.ERR_TAIL$->VD$ERR.ERR;

   7598  6 000066   000032 470400 xsym               LDP0    VD_6E+26
         6 000067   000002 236100                    LDQ     2,,PR0
         6 000070   200011 756100                    STQ     FATAL_ERR_CODE,,AUTO

      684     7599    7                             GOTO FORCE_FATAL_ERROR;

   7599  6 000071   000315 710000 6                  TRA     REPORT_A_VD$ERR_FAILED

      685     7600    7                             END;
      686     7601    6                          VD_LAST_CWIN_ACTIVITY = %LCA_1_INFO_WARN;

   7601  6 000072   000002 235007                    LDA     2,DL
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:111  
         6 000073   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      687     7602    6                          END;

   7602  6 000074   000130 710000 6                  TRA     EACH_ERR_IN_CHAIN

      688     7603    6                       ELSE DO;

      689     7604                               /* Expand the command window to it's max height */
      690     7605    6                          IF NOT DCBADDR(CWIN$SPEC.DCB#) -> F$DCB.FCD# THEN

   7605  6 000075   600031 236100                    LDQ     25,,PR6
         6 000076   020000 316007                    CANQ    8192,DL
         6 000077   000105 601000 6                  TNZ     s:7608

      691     7606    6                             CALL VDG$EXPAND_COMMAND_WINDOW (VD_$SCREEN.V#);

   7606  6 000100   000001 630400 7                  EPPR0   1
         6 000101   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000102   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 000103   000000 011000                    NOP     0
         6 000104   000117 710000 6                  TRA     s:7613

      692     7607    6                          ELSE /* If the window's gone, use the whole screen */
      693     7608    6                             CALL VDG$EXPAND_COMMAND_WINDOW (VD_$MAX_COMMAND.V#)

   7608  6 000105   000002 630400 7                  EPPR0   2
         6 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000107   000000 701000 xent               TSX1    VDG$EXPAND_COMMAND_WINDOW
         6 000110   000112 702000 6                  TSX2    s:7610
         6 000111   000117 710000 6                  TRA     s:7613

      694     7609    7                             WHENALTRETURN DO;

      695     7610    7                                FATAL_ERR_CODE.CODE# = %E$HUH;

   7610  6 000112   200011 236100                    LDQ     FATAL_ERR_CODE,,AUTO
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:112  
         6 000113   000003 376000 7                  ANQ     3
         6 000114   000010 276007                    ORQ     8,DL
         6 000115   200011 756100                    STQ     FATAL_ERR_CODE,,AUTO

      696     7611    7                                GOTO FORCE_FATAL_ERROR;

   7611  6 000116   000315 710000 6                  TRA     REPORT_A_VD$ERR_FAILED

      697     7612    7                                END;
      698     7613    6                          VD_LAST_CWIN_ACTIVITY = %LCA_UNACKD_ERROR;

   7613  6 000117   000003 235007                    LDA     3,DL
         6 000120   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      699     7614    6                          VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;

   7614  6 000121   000001 236007                    LDQ     1,DL
         6 000122   000000 756000 xsym               STQ     VD_FORCE_READ_FROM

      700     7615    6                          END;

      701     7616    5                       END;

   7616  6 000123   000130 710000 6                  TRA     EACH_ERR_IN_CHAIN

      702     7617    5                    ELSE DO;

      703     7618                            /* Command window is already expanded */
      704     7619    5                       VD_LAST_CWIN_ACTIVITY = %LCA_UNACKD_ERROR;

   7619  6 000124   000003 235007                    LDA     3,DL
         6 000125   000000 755000 xsym               STA     VD_LAST_CWIN_ACTIVITY

      705     7620    5                       VD_FORCE_READ_FROM = %RF_COMMAND_WINDOW;

   7620  6 000126   000001 235007                    LDA     1,DL
         6 000127   000000 755000 xsym               STA     VD_FORCE_READ_FROM
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:113  

      706     7621    5                       END;

      707     7622    4                    END ADJUST_2DIM_COMMAND_WINDOW;

      708     7623    3                 END;

      709     7624    2              END;

      710     7625
      711     7626                /* Main error reporting loop */
      712     7627
      713     7628    1   EACH_ERR_IN_CHAIN:
      714     7629    2           DO WHILE CURR_ERR$ ~= ADDR(NIL);

   7629  6 000130   000263 710000 6     EACH_ERR_IN* TRA     s:7677

      715     7630    2              IF CURR$ERR.FLAGLEV# > MX_FLAGLEV THEN

   7630  6 000131   200006 470500                    LDP0    CURR_ERR$,,AUTO
         6 000132   000003 236100                    LDQ     3,,PR0
         6 000133   000022 772000                    QRL     18
         6 000134   200004 116100                    CMPQ    MX_FLAGLEV,,AUTO
         6 000135   000140 602000 6                  TNC     s:7636
         6 000136   000140 600000 6                  TZE     s:7636

      716     7631    2                 MX_FLAGLEV = CURR$ERR.FLAGLEV#;

   7631  6 000137   200004 756100                    STQ     MX_FLAGLEV,,AUTO

      717     7632                   /*
      718     7633                   *  If we haven't reported any messages yet, precede the first message
      719     7634                   *    with the "6Edit Here" banner message.
      720     7635                   */
      721     7636    3              IF VD_WORST_FLAGLEV = 0 THEN DO;

   7636  6 000140   000000 235000 xsym               LDA     VD_WORST_FLAGLEV
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:114  
         6 000141   000165 601000 6                  TNZ     s:7646

      722     7637    3                 AUTO_ERR = %CLEAR;

   7637  6 000142   000100 100400                    MLR     fill='000'O
         6 000143   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         6 000144   200012 000024                    ADSC9   AUTO_ERR,,AUTO           cn=0,n=20

      723     7638    3                 AUTO_ERR.ERR.CODE# = %E$INFO_BANNER;

   7638  6 000145   200014 236100                    LDQ     AUTO_ERR+2,,AUTO
         6 000146   000003 376000 7                  ANQ     3
         6 000147   000050 276007                    ORQ     40,DL
         6 000150   200014 756100                    STQ     AUTO_ERR+2,,AUTO

      724     7639    3                 AUTO_ERR.FLAGLEV# = %FLV_INFO;

   7639  6 000151   000001 220003                    LDX0    1,DU
         6 000152   200015 740100                    STX0    AUTO_ERR+3,,AUTO

      725     7640    3                 AUTO_ERR_PTRS.OBJECT.CLASS# (0) = %CLS_PTR_TEXTC;

   7640  6 000153   000045 221003                    LDX1    37,DU
         6 000154   200017 741100                    STX1    AUTO_ERR_PTRS,,AUTO

      726     7641    3                 AUTO_ERR_PTRS.V$ (0) = ADDR(B_VERSION);

   7641  6 000155   000004 236000 7                  LDQ     4
         6 000156   200022 756100                    STQ     AUTO_ERR_PTRS+3,,AUTO

      727     7642    3                 CALL REPORT_A_VD$ERR (AUTO_ERR, FATAL_ERR_CODE)

   7642  6 000157   200011 631500                    EPPR1   FATAL_ERR_CODE,,AUTO
         6 000160   200036 451500                    STP1    @ERR+1,,AUTO
         6 000161   200012 633500                    EPPR3   AUTO_ERR,,AUTO
         6 000162   200035 453500                    STP3    AUTO_ERR_PTRS+14,,AUTO
         6 000163   000326 701000 6                  TSX1    REPORT_A_VD$ERR
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:115  
         6 000164   000315 702000 6                  TSX2    REPORT_A_VD$ERR_FAILED

      728     7643    3                   ALTRET (REPORT_A_VD$ERR_FAILED);
      729     7644    3                 END;

      730     7645
      731     7646    2              CALL REPORT_A_VD$ERR (CURR$ERR, FATAL_ERR_CODE)

   7646  6 000165   200011 630500                    EPPR0   FATAL_ERR_CODE,,AUTO
         6 000166   200036 450500                    STP0    @ERR+1,,AUTO
         6 000167   200006 236100                    LDQ     CURR_ERR$,,AUTO
         6 000170   200035 756100                    STQ     AUTO_ERR_PTRS+14,,AUTO
         6 000171   000326 701000 6                  TSX1    REPORT_A_VD$ERR
         6 000172   000315 702000 6                  TSX2    REPORT_A_VD$ERR_FAILED

      732     7647    2                ALTRET (REPORT_A_VD$ERR_FAILED);
      733     7648
      734     7649                   /*
      735     7650                   *  If we reported a warning message and the current
      736     7651                   *    command stream is %CS_FILE or %CS_DCB, tell the user
      737     7652                   *    what record the error occurred at.
      738     7653                   */
      739     7654    2              IF CURR$ERR.FLAGLEV# = %FLV_WARN

   7654  6 000173   200006 470500                    LDP0    CURR_ERR$,,AUTO
         6 000174   000003 220100                    LDX0    3,,PR0
         6 000175   000002 100003                    CMPX0   2,DU
         6 000176   000260 601000 6                  TNZ     s:7676
         6 000177   000026 236000 xsym               LDQ     VD_6E+22
         6 000200   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000201   000260 600000 6                  TZE     s:7676

      740     7655    2                AND VD_6E.CMD_STREAM$ ~= ADDR(NIL) THEN
      741     7656    2                 IF (CMD$STREAM.TYPE# = %CS_FILE

   7656  6 000202   000026 471400 xsym               LDP1    VD_6E+22
         6 000203   100002 221100                    LDX1    2,,PR1
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:116  
         6 000204   000003 101003                    CMPX1   3,DU
         6 000205   000210 600000 6                  TZE     s:7656+6
         6 000206   000004 101003                    CMPX1   4,DU
         6 000207   000260 601000 6                  TNZ     s:7676
         6 000210   100030 235100                    LDA     24,,PR1
         6 000211   000260 604400 6                  TMOZ    s:7676

      742     7657    2                   OR CMD$STREAM.TYPE# = %CS_DCB)
      743     7658    2                   AND CMD$STREAM.REC_NUM# > 0 THEN
      744     7659    3   INFO_READ_FILE_AT: DO;

   7659  6 000212                       INFO_READ_F* null
      745     7660    3                    IF VD_$$QUAC.V#~=0 AND CMD$STREAM.DCB#=DCBNUM(M$SI)

   7660  6 000212   000003 235000 xsym               LDA     VD_$$QUAC+3
         6 000213   000222 600000 6                  TZE     s:7662
         6 000214   000000 236007 xsym               LDQ     M$SI,DL
         6 000215   200046 756100                    STQ     OBJECT_CLASS+2,,AUTO
         6 000216   100024 236100                    LDQ     20,,PR1
         6 000217   000022 772000                    QRL     18
         6 000220   200046 116100                    CMPQ    OBJECT_CLASS+2,,AUTO
         6 000221   000260 600000 6                  TZE     s:7676

      746     7661    3                    THEN EXIT INFO_READ_FILE_AT;
      747     7662    3                    AUTO_ERR = %CLEAR;

   7662  6 000222   000100 100400                    MLR     fill='000'O
         6 000223   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         6 000224   200012 000024                    ADSC9   AUTO_ERR,,AUTO           cn=0,n=20

      748     7663    3                    AUTO_ERR.CMDLINE_INDEX# = -1;

   7663  6 000225   777777 220003                    LDX0    -1,DU
         6 000226   200015 440100                    SXL0    AUTO_ERR+3,,AUTO

      749     7664    3                    AUTO_ERR.ERR.CODE# = %E$INFO_READ_FILE_AT;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:117  
   7664  6 000227   200014 236100                    LDQ     AUTO_ERR+2,,AUTO
         6 000230   000003 376000 7                  ANQ     3
         6 000231   001120 276007                    ORQ     592,DL
         6 000232   200014 756100                    STQ     AUTO_ERR+2,,AUTO

      750     7665    3                    AUTO_ERR.FLAGLEV# = %FLV_INFO;

   7665  6 000233   000001 221003                    LDX1    1,DU
         6 000234   200015 741100                    STX1    AUTO_ERR+3,,AUTO

      751     7666    3                    IF CMD$STREAM.TYPE# = %CS_FILE THEN

   7666  6 000235   100002 222100                    LDX2    2,,PR1
         6 000236   000003 102003                    CMPX2   3,DU
         6 000237   000244 601000 6                  TNZ     s:7669

      752     7667    3                       AUTO_ERR.DCB# = DCBNUM(M$EI);

   7667  6 000240   000000 236007 xsym               LDQ     M$EI,DL
         6 000241   000000 623006                    EAX3    0,QL
         6 000242   200016 743100                    STX3    AUTO_ERR+4,,AUTO
         6 000243   000246 710000 6                  TRA     s:7670

      753     7668    3                    ELSE
      754     7669    3                       AUTO_ERR.DCB# = CMD$STREAM.DCB#;

   7669  6 000244   100024 223100                    LDX3    20,,PR1
         6 000245   200016 743100                    STX3    AUTO_ERR+4,,AUTO

      755     7670    3                    AUTO_ERR_NUMS.OBJECT.CLASS# (0) = %CLS_NUMBER;

   7670  6 000246   000033 222003                    LDX2    27,DU
         6 000247   200017 742100                    STX2    AUTO_ERR_PTRS,,AUTO

      756     7671    3                    AUTO_ERR_NUMS.V# (0) = CMD$STREAM.REC_NUM#;

   7671  6 000250   100030 235100                    LDA     24,,PR1
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:118  
         6 000251   200022 755100                    STA     AUTO_ERR_PTRS+3,,AUTO

      757     7672    3                    CALL REPORT_A_VD$ERR (AUTO_ERR, FATAL_ERR_CODE)

   7672  6 000252   200011 633500                    EPPR3   FATAL_ERR_CODE,,AUTO
         6 000253   200036 453500                    STP3    @ERR+1,,AUTO
         6 000254   200012 634500                    EPPR4   AUTO_ERR,,AUTO
         6 000255   200035 454500                    STP4    AUTO_ERR_PTRS+14,,AUTO
         6 000256   000326 701000 6                  TSX1    REPORT_A_VD$ERR
         6 000257   000315 702000 6                  TSX2    REPORT_A_VD$ERR_FAILED

      758     7673    3                      ALTRET (REPORT_A_VD$ERR_FAILED);
      759     7674    3                    END INFO_READ_FILE_AT;

      760     7675
      761     7676    2              CURR_ERR$ = CURR$ERR.FLINK$;

   7676  6 000260   200006 470500                    LDP0    CURR_ERR$,,AUTO
         6 000261   000001 236100                    LDQ     1,,PR0
         6 000262   200006 756100                    STQ     CURR_ERR$,,AUTO

      762     7677    2              END EACH_ERR_IN_CHAIN;

   7677  6 000263   200006 236100                    LDQ     CURR_ERR$,,AUTO
         6 000264   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000265   000131 601000 6                  TNZ     s:7630

      763     7678
      764     7679
      765     7680    1           FATAL$ERR = %CLEAR;

   7680  6 000266   000031 470400 xsym               LDP0    VD_6E+25
         6 000267   000100 100400                    MLR     fill='000'O
         6 000270   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         6 000271   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

      766     7681    1           FATAL$ERR.OBJECT.CLASS# = %CLS_ERR;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:119  

   7681  6 000272   000012 220003                    LDX0    10,DU
         6 000273   000031 470400 xsym               LDP0    VD_6E+25
         6 000274   000000 740100                    STX0    0,,PR0

      767     7682    1           FATAL$ERR.FLINK$ = ADDR(NIL);

   7682  6 000275   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000276   000031 470400 xsym               LDP0    VD_6E+25
         6 000277   000001 756100                    STQ     1,,PR0

      768     7683    1           VD_6E.ERR_TAIL$ = ADDR(FATAL$ERR);

   7683  6 000300   000031 236000 xsym               LDQ     VD_6E+25
         6 000301   000032 756000 xsym               STQ     VD_6E+26

      769     7684
      770     7685    1           CALL VDG$OFREE (RECOV_ERR_HEAD$->VD$ERR)

   7685  6 000302   200005 630500                    EPPR0   RECOV_ERR_HEAD$,,AUTO
         6 000303   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000304   000000 701000 xent               TSX1    VDG$OFREE
         6 000305   000322 702000 6                  TSX2    OFREE_FAILED

      771     7686    1             ALTRET (OFREE_FAILED);
      772     7687
      773     7688    1           IF ADDR(MAX_FLAGLEV) ~= ADDR(NIL) THEN

   7688  6 000306   200003 236100                    LDQ     @MAX_FLAGLEV,,AUTO
         6 000307   000001 116000 xsym               CMPQ    B_VECTNIL+1
         6 000310   000314 600000 6                  TZE     s:7690

      774     7689    1              MAX_FLAGLEV = MX_FLAGLEV;

   7689  6 000311   200003 470500                    LDP0    @MAX_FLAGLEV,,AUTO
         6 000312   200004 235100                    LDA     MX_FLAGLEV,,AUTO
         6 000313   000000 755100                    STA     0,,PR0
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:120  

      775     7690    1           RETURN;

   7690  6 000314   000000 702200 xent               TSX2  ! X66_ARET

   7688  6 000315                       REPORT_A_VD* null
   7688  6 000315                       FORCE_FATAL* null
      776     7691
      777     7692
      778     7693                /*
      779     7694                *   All errors detected during VDG$EREPORT_ERROR are presumed
      780     7695                *       to be fatal errors.  We simply go back to the start
      781     7696                *       of the routine and process the new error; this should
      782     7697                *       get us very quickly to VDG$MTERMINATE.
      783     7698                */
      784     7699
      785     7700    1   REPORT_A_VD$ERR_FAILED: ;
      786     7701    1   FORCE_FATAL_ERROR: ;
      787     7702    1           IF FATAL$ERR.ERR = %CLEAR THEN

   7702  6 000315   000031 470400 xsym               LDP0    VD_6E+25
         6 000316   000002 235100                    LDA     2,,PR0
         6 000317   000322 601000 6                  TNZ     OFREE_FAILED

      788     7703    1              FATAL$ERR.ERR = FATAL_ERR_CODE;

   7703  6 000320   200011 236100                    LDQ     FATAL_ERR_CODE,,AUTO
         6 000321   000002 756100                    STQ     2,,PR0

      789     7704    1   OFREE_FAILED:
      790     7705    1           FATAL$ERR.FLAGLEV# = %FLV_FATAL;

   7705  6 000322   000004 220003       OFREE_FAILED LDX0    4,DU
         6 000323   000031 470400 xsym               LDP0    VD_6E+25
         6 000324   000003 740100                    STX0    3,,PR0

      791     7706    1           GOTO REPORT_ERROR;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:121  

   7706  6 000325   000006 710000 6                  TRA     REPORT_ERROR

      792     7707
      793     7708        %BOX (TITLE=REPORT_A_VD$ERR, PAGE=YES);
              7716    1
              7720    1   /***************************************************************************
              7722    1    *                                                                         *
              7726    1            *                              REPORT_A_VD$ERR                           *
              7728    1            *                                                                        *
              7730    1          ***************************************************************************/

      794     7734
      795     7735        /*I* NAME: REPORT_A_VD$ERR
      796     7736            PARAMETERS:
      797     7737                ERR - VD$ERR to report.
      798     7738                FATAL_CODE - Uninitialized VD$ERR_CODE.
      799     7739            INPUT:
      800     7740            OUTPUT:
      801     7741                If we detect any error in the reporting of the message, we'll
      802     7742                    altreturn and FATAL_CODE will contain the error code (may be a
      803     7743                    monitor code or one of ours (usually E$HUH)).
      804     7744                VD_WORST_FLAGLEV will be updated if ERR's .FLAGLEV is larger.
      805     7745            DESCRIPTION:
      806     7746                Report the message specified in ERR.
      807     7747        */
      808     7748
      809     7749    1   REPORT_A_VD$ERR: PROC (ERR, FATAL_CODE) ALTRET;

   7749  6 000326   200034 741300       REPORT_A_VD* STX1  ! AUTO_ERR_PTRS+13,,AUTO

      810     7750
      811     7751        %VD$ERR (NAME=ERR, STCLASS=PARAM);
      812     7804        %VD$ERR_CODE (NAME=FATAL_CODE, STCLASS=PARAM);
      813     7819
      814     7820
      815     7821        %INCLUDE B$JIT;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:122  
      816     8111    2   DCL B$JIT$ PTR SYMREF;
      817     8112    2   DCL ERR_SUBST$ PTR;
      818     8113
      819     8114
      820     8115        %VD$NUMBER (NAME=ERR$NUMBER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      821     8160        %VD$POINTER (NAME=ERR$POINTER, DIM="(0:2)", STCLASS="BASED(ERR_SUBST$)");
      822     8205        %VD$FILE_NODE;
      823     8298        %VD$WINDOW_SPEC;
      824     8364
      825     8365
      826     8366
      827     8367    2           FATAL_CODE = %CLEAR;

   8367  6 000327   200036 470500                    LDP0    @FATAL_CODE,,AUTO
         6 000330   000000 450100                    STZ     0,,PR0

      828     8368
      829     8369    3           IF ERR.ERR.FCG = %CLEAR THEN DO;

   8369  6 000331   200035 471500                    LDP1    @ERR,,AUTO
         6 000332   100002 236100                    LDQ     2,,PR1
         6 000333   777700 316003                    CANQ    -64,DU
         6 000334   000352 601000 6                  TNZ     s:8382

      830     8370    3              ERR.ERR.FCG = %FCG;

   8370  6 000335   260400 236003                    LDQ     90368,DU
         6 000336   100002 752160                    STCQ    2,'60'O,PR1

      831     8371    3              ERR.ERR.MID = %FCG_MID_GLOBAL;

   8371  6 000337   000007 236003                    LDQ     7,DU
         6 000340   100002 752110                    STCQ    2,'10'O,PR1

      832     8372    3              ERR.ERR.MON = %FALSE;

   8372  6 000341   000005 236000 7                  LDQ     5
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:123  
         6 000342   100002 356100                    ANSQ    2,,PR1

      833     8373    3              ERR.ERR.SEV# = 0;

   8373  6 000343   000006 236000 7                  LDQ     6
         6 000344   100002 356100                    ANSQ    2,,PR1

      834     8374                   %INCREMENT (ARRAY=STATS_ERRORS#, INDX=ERR.ERR.CODE#);

   8375  6 000345   100002 236100                    LDQ     2,,PR1
         6 000346   000003 772000                    QRL     3
         6 000347   037777 376007                    ANQ     16383,DL
         6 000350   000511 054006 xsym               AOS     VD_6E+329,QL

      835     8377                   %INCREMENT (ARRAY=STATS_ERRORS#, INDX=0);

   8378  6 000351   000511 054000 xsym               AOS     VD_6E+329

      836     8380    3              END;

      837     8381
      838     8382    2           XUG_GETCMD.ERR_CODE = ERR.ERR;

   8382  6 000352   100002 236100                    LDQ     2,,PR1
         6 000353   000010 756000 xsym               STQ     XUG_GETCMD+8

      839     8383    2           XUG_GETCMD.FLGLEV# = ERR.FLAGLEV#;

   8383  6 000354   100003 236100                    LDQ     3,,PR1
         6 000355   000006 552020 xsym               STBQ    XUG_GETCMD+6,'20'O

      840     8384    3           IF ERR.CMDLINE_INDEX# >= 0 THEN DO;

   8384  6 000356   100003 720100                    LXL0    3,,PR1
         6 000357   000365 604000 6                  TMI     s:8389

      841     8385    3              XUG_GETCMD.USE_EPOS# = %TRUE;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:124  

   8385  6 000360   400000 236003                    LDQ     -131072,DU
         6 000361   000006 256000 xsym               ORSQ    XUG_GETCMD+6

      842     8386    3              XUG_GETCMD.EPOS# = ERR.CMDLINE_INDEX#;

   8386  6 000362   100003 720100                    LXL0    3,,PR1
         6 000363   000006 440000 xsym               SXL0    XUG_GETCMD+6

      843     8387    3              END;

   8387  6 000364   000367 710000 6                  TRA     s:8390

      844     8388    2           ELSE
      845     8389    2              XUG_GETCMD.USE_EPOS# = %FALSE;

   8389  6 000365   000031 236000 xsym               LDQ     B_VECTNIL+25
         6 000366   000006 356000 xsym               ANSQ    XUG_GETCMD+6

      846     8390    2           IF ERR.DCB#~=0 THEN XUG_GETCMD.ERRDCB# = ERR.DCB#;

   8390  6 000367   100004 220100                    LDX0    4,,PR1
         6 000370   000374 600000 6                  TZE     s:8392

   8390  6 000371   100004 236100                    LDQ     4,,PR1
         6 000372   000022 772000                    QRL     18
         6 000373   000011 756000 xsym               STQ     XUG_GETCMD+9

      847     8391        /* Save %U1 in case this is an INFO message, so ? works later */
      848     8392    2           VD_STATIC_TEMP.BUFFER(3) = VD_STATIC_TEMP.BUFFER(0);

   8392  6 000374   040000 100400                    MLR     fill='040'O
         6 000375   000000 000040 xsym               ADSC9   VD_STATIC_TEMP           cn=0,n=32
         6 000376   000030 000040 xsym               ADSC9   VD_STATIC_TEMP+24        cn=0,n=32

      849     8393
      850     8394    2           ERR_SUBST$ = PINCRW(ADDR(ERR), SIZEW(ERR));
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:125  

   8394  6 000377   200035 236100                    LDQ     @ERR,,AUTO
         6 000400   000005 036003                    ADLQ    5,DU
         6 000401   200037 756100                    STQ     ERR_SUBST$,,AUTO

      851     8395    2           XUG_GETCMD.F1_ = VECTOR(NIL);

   8395  6 000402   000010 237000 7                  LDAQ    8
         6 000403   000017 755000 xsym               STA     XUG_GETCMD+15
         6 000404   000020 756000 xsym               STQ     XUG_GETCMD+16

      852     8396    2           XUG_GETCMD.F2_ = VECTOR(NIL);

   8396  6 000405   000010 237000 7                  LDAQ    8
         6 000406   000021 755000 xsym               STA     XUG_GETCMD+17
         6 000407   000022 756000 xsym               STQ     XUG_GETCMD+18

      853     8397    2           XUG_GETCMD.F3_ = VECTOR(NIL);

   8397  6 000410   000010 237000 7                  LDAQ    8
         6 000411   000023 755000 xsym               STA     XUG_GETCMD+19
         6 000412   000024 756000 xsym               STQ     XUG_GETCMD+20

      854     8398    3           IF ERR$NUMBER.OBJECT.CLASS# (0) ~= 0 THEN DO;

   8398  6 000413   200037 473500                    LDP3    ERR_SUBST$,,AUTO
         6 000414   300000 220100                    LDX0    0,,PR3
         6 000415   000427 600000 6                  TZE     s:8403

      855     8399    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (0),

   8399  6 000416   000007 236000 7                  LDQ     7
         6 000417   200042 756100                    STQ     @SUBST+1,,AUTO
         6 000420   200037 236100                    LDQ     ERR_SUBST$,,AUTO
         6 000421   200041 756100                    STQ     ERR_SUBST$+2,,AUTO
         6 000422   000620 701000 6                  TSX1    SUBST_TO_TEXTC
         6 000423   000000 011000                    NOP     0
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:126  

      856     8400    3                VD_STATIC_TEMP.BUFFER (0));
      857     8401    3              XUG_GETCMD.F1_ = VECTOR(VD_STATIC_TEMP.BUFFER (0));

   8401  6 000424   000012 237000 7                  LDAQ    10
         6 000425   000017 755000 xsym               STA     XUG_GETCMD+15
         6 000426   000020 756000 xsym               STQ     XUG_GETCMD+16

      858     8402    3              END;

      859     8403    3           IF ERR$NUMBER.OBJECT.CLASS# (1) ~= 0 THEN DO;

   8403  6 000427   200037 470500                    LDP0    ERR_SUBST$,,AUTO
         6 000430   000004 220100                    LDX0    4,,PR0
         6 000431   000444 600000 6                  TZE     s:8408

      860     8404    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (1),

   8404  6 000432   000014 236000 7                  LDQ     12
         6 000433   200042 756100                    STQ     @SUBST+1,,AUTO
         6 000434   200037 236100                    LDQ     ERR_SUBST$,,AUTO
         6 000435   000004 036003                    ADLQ    4,DU
         6 000436   200041 756100                    STQ     ERR_SUBST$+2,,AUTO
         6 000437   000620 701000 6                  TSX1    SUBST_TO_TEXTC
         6 000440   000000 011000                    NOP     0

      861     8405    3                VD_STATIC_TEMP.BUFFER (1));
      862     8406    3              XUG_GETCMD.F2_ = VECTOR(VD_STATIC_TEMP.BUFFER (1));

   8406  6 000441   000016 237000 7                  LDAQ    14
         6 000442   000021 755000 xsym               STA     XUG_GETCMD+17
         6 000443   000022 756000 xsym               STQ     XUG_GETCMD+18

      863     8407    3              END;

      864     8408    3           IF ERR$NUMBER.OBJECT.CLASS# (2) ~= 0 THEN DO;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:127  
   8408  6 000444   200037 470500                    LDP0    ERR_SUBST$,,AUTO
         6 000445   000010 220100                    LDX0    8,,PR0
         6 000446   000461 600000 6                  TZE     s:8415

      865     8409    3              CALL SUBST_TO_TEXTC (ERR$NUMBER (2),

   8409  6 000447   000020 236000 7                  LDQ     16
         6 000450   200042 756100                    STQ     @SUBST+1,,AUTO
         6 000451   200037 236100                    LDQ     ERR_SUBST$,,AUTO
         6 000452   000010 036003                    ADLQ    8,DU
         6 000453   200041 756100                    STQ     ERR_SUBST$+2,,AUTO
         6 000454   000620 701000 6                  TSX1    SUBST_TO_TEXTC
         6 000455   000000 011000                    NOP     0

      866     8410    3                VD_STATIC_TEMP.BUFFER (2));
      867     8411    3              XUG_GETCMD.F3_ = VECTOR(VD_STATIC_TEMP.BUFFER (2));

   8411  6 000456   000022 237000 7                  LDAQ    18
         6 000457   000023 755000 xsym               STA     XUG_GETCMD+19
         6 000460   000024 756000 xsym               STQ     XUG_GETCMD+20

      868     8412    3              END;

      869     8413
      870     8414
      871     8415    2           XUG_GETCMD.DCB2_PARAM# = 0;

   8415  6 000461   000015 450000 xsym               STZ     XUG_GETCMD+13

      872     8416    3           IF ERR.FLAGLEV# = %FLV_INFO THEN DO;

   8416  6 000462   200035 470500                    LDP0    @ERR,,AUTO
         6 000463   000003 220100                    LDX0    3,,PR0
         6 000464   000001 100003                    CMPX0   1,DU
         6 000465   000502 601000 6                  TNZ     s:8423

      873     8417    3              XUG_GETCMD.INFOMSG# = %TRUE;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:128  

   8417  6 000466   001000 236003                    LDQ     512,DU
         6 000467   000006 256000 xsym               ORSQ    XUG_GETCMD+6

      874     8418    3              XUG_GETCMD.DCB_PARAM# = DCBNUM(M$ME);

   8418  6 000470   000000 236007 xsym               LDQ     M$ME,DL
         6 000471   000014 756000 xsym               STQ     XUG_GETCMD+12

      875     8419    3              IF VD_$$QUAC.V#~=0 AND VD_$COMMAND.V#=1

   8419  6 000472   000003 235000 xsym               LDA     VD_$$QUAC+3
         6 000473   000555 600000 6                  TZE     s:8435
         6 000474   000003 235000 xsym               LDA     VD_$COMMAND+3
         6 000475   000001 115007                    CMPA    1,DL
         6 000476   000555 601000 6                  TNZ     s:8435

      876     8420    3              THEN XUG_GETCMD.DCB_PARAM# = DCBNUM(M$LO);

   8420  6 000477   000000 236007 xsym               LDQ     M$LO,DL
         6 000500   000014 756000 xsym               STQ     XUG_GETCMD+12

      877     8421    3              END;

   8421  6 000501   000555 710000 6                  TRA     s:8435

      878     8422    3           ELSE DO;

      879     8423    4              CALL XUG$CORRES (DCBNUM(M$DO), DCBNUM(M$LO)) WHENRETURN DO;

   8423  6 000502   000000 236007 xsym               LDQ     M$DO,DL
         6 000503   200046 756100                    STQ     OBJECT_CLASS+2,,AUTO
         6 000504   000000 236007 xsym               LDQ     M$LO,DL
         6 000505   200046 235100                    LDA     OBJECT_CLASS+2,,AUTO
         6 000506   200047 755100                    STA     OBJECT_CLASS+3,,AUTO
         6 000507   200050 756100                    STQ     OBJECT_CLASS+4,,AUTO
         6 000510   200050 631500                    EPPR1   OBJECT_CLASS+4,,AUTO
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:129  
         6 000511   200053 451500                    STP1    OBJECT_CLASS+7,,AUTO
         6 000512   200047 633500                    EPPR3   OBJECT_CLASS+3,,AUTO
         6 000513   200052 453500                    STP3    OBJECT_CLASS+6,,AUTO
         6 000514   200052 630500                    EPPR0   OBJECT_CLASS+6,,AUTO
         6 000515   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000516   000000 701000 xent               TSX1    XUG$CORRES
         6 000517   000534 702000 6                  TSX2    s:8429

      880     8424    4                 XUG_GETCMD.DCB2_PARAM# = DCBNUM(M$DO);

   8424  6 000520   000000 236007 xsym               LDQ     M$DO,DL
         6 000521   000015 756000 xsym               STQ     XUG_GETCMD+13

      881     8425    4                 XUG_GETCMD.DCB_PARAM# = DCBNUM(M$DO);

   8425  6 000522   000000 236007 xsym               LDQ     M$DO,DL
         6 000523   000014 756000 xsym               STQ     XUG_GETCMD+12

      882     8426    4                 IF XUG_GETCMD.EOMCHAR#~=' ' THEN

   8426  6 000524   000007 236000 xsym               LDQ     XUG_GETCMD+7
         6 000525   777000 376007                    ANQ     -512,DL
         6 000526   040000 116007                    CMPQ    16384,DL
         6 000527   000534 600000 6                  TZE     s:8429

      883     8427    4                    CALL XUG$ECHO (XUG_GETCMD);

   8427  6 000530   000024 630400 7                  EPPR0   20
         6 000531   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000532   000000 701000 xent               TSX1    XUG$ECHO
         6 000533   000000 011000                    NOP     0

      884     8428    4                 END;

      885     8429    3              XUG_GETCMD.DCB_PARAM# = DCBNUM(M$LO);

   8429  6 000534   000000 236007 xsym               LDQ     M$LO,DL
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:130  
         6 000535   000014 756000 xsym               STQ     XUG_GETCMD+12

      886     8430    3              IF XUG_GETCMD.EOMCHAR#=%EOM_EOR#

   8430  6 000536   000007 236000 xsym               LDQ     XUG_GETCMD+7
         6 000537   777000 376007                    ANQ     -512,DL
         6 000540   501000 116007                    CMPQ    -97792,DL
         6 000541   000555 601000 6                  TNZ     s:8435
         6 000542   000006 236000 xsym               LDQ     XUG_GETCMD+6
         6 000543   200000 316003                    CANQ    65536,DU
         6 000544   000551 601000 6                  TNZ     s:8432
         6 000545   000000 470400 xsym               LDP0    B$JIT$
         6 000546   000143 236100                    LDQ     99,,PR0
         6 000547   000012 376000 xsym               ANQ     B_VECTNIL+10
         6 000550   000555 601000 6                  TNZ     s:8435

      887     8431    3                AND (XUG_GETCMD.TREAD# OR NOT B$JIT.CPFLAGS1&%CP_ECHO#) THEN
      888     8432    3                 CALL XUG$ECHO (XUG_GETCMD);

   8432  6 000551   000024 630400 7                  EPPR0   20
         6 000552   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000553   000000 701000 xent               TSX1    XUG$ECHO
         6 000554   000000 011000                    NOP     0

      889     8433    3              END;

      890     8434
      891     8435    2           XUG_GETCMD.EOMCHAR# = ' ';

   8435  6 000555   040000 236007                    LDQ     16384,DL
         6 000556   000007 552010 xsym               STBQ    XUG_GETCMD+7,'10'O

      892     8436
      893     8437    3           IF XUG_GETCMD.USE_EPOS# THEN DO;

   8437  6 000557   000006 234000 xsym               SZN     XUG_GETCMD+6
         6 000560   000565 605000 6                  TPL     s:8442
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:131  

      894     8438                    /* If we get a syntax error, show it to the user */
      895     8439
      896     8440    3              CALL XUG$ERRPTR (XUG_GETCMD);

   8440  6 000561   000024 630400 7                  EPPR0   20
         6 000562   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000563   000000 701000 xent               TSX1    XUG$ERRPTR
         6 000564   000000 011000                    NOP     0

      897     8441    3              END;

      898     8442    2           CALL XUG$ERRMSG (XUG_GETCMD);

   8442  6 000565   000024 630400 7                  EPPR0   20
         6 000566   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000567   000000 701000 xent               TSX1    XUG$ERRMSG
         6 000570   000000 011000                    NOP     0

      899     8443
      900     8444    2           IF ERR.FLAGLEV# = %FLV_INFO THEN

   8444  6 000571   200035 470500                    LDP0    @ERR,,AUTO
         6 000572   000003 220100                    LDX0    3,,PR0
         6 000573   000001 100003                    CMPX0   1,DU
         6 000574   000600 601000 6                  TNZ     s:8447

      901     8445    2              VD_STATIC_TEMP.BUFFER(0) = VD_STATIC_TEMP.BUFFER(3);

   8445  6 000575   040000 100400                    MLR     fill='040'O
         6 000576   000030 000040 xsym               ADSC9   VD_STATIC_TEMP+24        cn=0,n=32
         6 000577   000000 000040 xsym               ADSC9   VD_STATIC_TEMP           cn=0,n=32

      902     8446
      903     8447    2           IF ERR.FLAGLEV# > VD_WORST_FLAGLEV THEN

   8447  6 000600   000003 236100                    LDQ     3,,PR0
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:132  
         6 000601   000022 772000                    QRL     18
         6 000602   000000 116000 xsym               CMPQ    VD_WORST_FLAGLEV
         6 000603   000605 604400 6                  TMOZ    s:8449

      904     8448    2              VD_WORST_FLAGLEV = ERR.FLAGLEV#;

   8448  6 000604   000000 756000 xsym               STQ     VD_WORST_FLAGLEV

      905     8449    3           IF ERR.FLAGLEV# >= %FLV_FATAL THEN DO;

   8449  6 000605   000003 220100                    LDX0    3,,PR0
         6 000606   000004 100003                    CMPX0   4,DU
         6 000607   000616 602000 6                  TNC     s:8462

      906     8450    3              ERR.ERR = '0'B; /* Don't report the error twice */

   8450  6 000610   000002 450100                    STZ     2,,PR0

      907     8451    3              VD_EXIT.V.STEPCC# = %STEPCC_ERROR;

   8451  6 000611   004000 236003                    LDQ     2048,DU
         6 000612   000004 552040 xsym               STBQ    VD_EXIT+4,'40'O

      908     8452    3              CALL VDG$MTERMINATE;

   8452  6 000613   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000614   000000 701000 xent               TSX1    VDG$MTERMINATE
         6 000615   000000 011000                    NOP     0

      909     8453                   /*
      910     8454                   *  Usually, we'd never return from VDG$MTERMINATE.
      911     8455                   *  However, if we're reporting a hardware trap, then we're in the
      912     8456                   *     middle of exception handling, so VDG$MTERMINATE will indeed
      913     8457                   *     return to us.  We should simply return to the trap handler
      914     8458                   *     that called us.
      915     8459                   */
      916     8460    3              END;
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:133  

      917     8461
      918     8462    2           RETURN;

   8462  6 000616   200034 221300                    LDX1  ! AUTO_ERR_PTRS+13,,AUTO
         6 000617   000001 702211                    TSX2  ! 1,X1

      919     8463
      920     8464
      921     8465    2   END REPORT_A_VD$ERR;
      922     8466
      923     8467                %BOX (TITLE="SUBST_TO_TEXTC", PAGE=YES);
              8475    2
              8479    2   /***************************************************************************
              8481    2    *                                                                         *
              8485    2            *                               SUBST_TO_TEXTC                           *
              8487    2            *                                                                        *
              8489    2          ***************************************************************************/

      924     8493
      925     8494        /*I* NAME: SUBST_TO_TEXTC
      926     8495            PARAMETERS:
      927     8496                SUBST - A VD$NUMBER or VD$POINTER structure to process.
      928     8497                TEXTC - A VD$TEXTC with MXNB >= %MXNB_ERR_SUBST to use
      929     8498                    for the TEXTC result.
      930     8499            INPUT:
      931     8500            OUTPUT:
      932     8501                TEXTC will contain the TEXTC string for the substitution
      933     8502                    field.
      934     8503            DESCRIPTION:
      935     8504                Based on the OBJECT.CLASS# of SUBST, build the textc string:
      936     8505                    o If SUBST is unused, return a 0-length string.
      937     8506                    o If %CLS_PTR_TEXTC, just copy the textc string to TEXTC.
      938     8507                    o If %CLS_NUMBER, %CLS_BOOLEAN, or any of the enumerated
      939     8508                        object classes, call VDG$FORMAT_NUMBER to format the value
      940     8509                        into TEXTC.
      941     8510                    o If %CLS_PTR_KEY, %CLS_PTR_LOCATION, or
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:134  
      942     8511                         %CLS_BLOCK_DESC, call the appropriate VDG$FORMAT_...
      943     8512                        routine to format the value into TEXTC.
      944     8513        */
      945     8514
      946     8515    1   SUBST_TO_TEXTC: PROC (SUBST, TEXTC);

   8515  6 000620   200040 741300       SUBST_TO_TE* STX1  ! ERR_SUBST$+1,,AUTO

      947     8516        %VD$NUMBER (NAME=SUBST, STCLASS=PARAM);
      948     8561        %VD$POINTER (NAME=SUBST_PTR, STCLASS="REDEF SUBST");
      949     8606        %VD$TEXTC (NAME=TEXTC, STCLASS=PARAM);
      950     8629
      951     8630
      952     8631
      953     8632    2   DCL END_INDEX SBIN;
      954     8633    2   DCL OBJECT_CLASS SBIN;
      955     8634
      956     8635
      957     8636        %VD$TEXTC (NAME=SUBST$TEXTC, STCLASS="BASED(SUBST_PTR.V$)",
      958     8637            ALIGNMENT=CALIGNED);
      959     8660        %VD$KEY (NAME=SUBST$KEY, STCLASS="BASED(SUBST_PTR.V$)");
      960     8674        %VD$LOCATION (NAME=SUBST$LOCATION, STCLASS="BASED(SUBST_PTR.V$)");
      961     8702        %VD$BLOCK_DESC (NAME=SUBST$BLOCK_DESC, STCLASS="BASED(SUBST_PTR.V$)");
      962     8849
      963     8850
      964     8851
      965     8852    3           DO CASE (SUBST.OBJECT.CLASS#);

   8852  6 000621   200041 470500                    LDP0    @SUBST,,AUTO
         6 000622   000000 236100                    LDQ     0,,PR0
         6 000623   000022 772000                    QRL     18
         6 000624   000040 136007                    SBLQ    32,DL
         6 000625   000006 116007                    CMPQ    6,DL
         6 000626   000630 602006 6                  TNC     s:8852+7,QL
         6 000627   001001 710000 6                  TRA     s:8874
         6 000630   000751 710000 6                  TRA     s:8869
         6 000631   001001 710000 6                  TRA     s:8874
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:135  
         6 000632   001001 710000 6                  TRA     s:8874
         6 000633   000671 710000 6                  TRA     s:8859
         6 000634   000721 710000 6                  TRA     s:8864
         6 000635   000636 710000 6                  TRA     s:8855

      966     8853
      967     8854    3            CASE (%CLS_PTR_TEXTC);

      968     8855    3              TEXTC.LENGTH# = MINIMUM (SUBST$TEXTC.LENGTH#, %MXNB_ERR_SUBST);

   8855  6 000636   000003 471500                    LDP1    3,,PR0
         6 000637   000100 101500                    MRL     fill='000'O
         6 000640   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         6 000641   200046 000004                    ADSC9   OBJECT_CLASS+2,,AUTO     cn=0,n=4
         6 000642   200046 236100                    LDQ     OBJECT_CLASS+2,,AUTO
         6 000643   000037 116007                    CMPQ    31,DL
         6 000644   000647 602000 6                  TNC     s:8855+9
         6 000645   000647 600000 6                  TZE     s:8855+9
         6 000646   000037 236007                    LDQ     31,DL
         6 000647   200042 471500                    LDP1    @TEXTC,,AUTO
         6 000650   000033 736000                    QLS     27
         6 000651   100000 552140                    STBQ    0,'40'O,PR1

      969     8856    3              TEXTC.BYTES = SUBSTR (SUBST$TEXTC.BYTES,0,TEXTC.LENGTH#);

   8856  6 000652   100000 236100                    LDQ     0,,PR1
         6 000653   000033 772000                    QRL     27
         6 000654   000003 473500                    LDP3    3,,PR0
         6 000655   000100 101500                    MRL     fill='000'O
         6 000656   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         6 000657   200046 000002                    ADSC9   OBJECT_CLASS+2,,AUTO     cn=0,n=2
         6 000660   200046 220100                    LDX0    OBJECT_CLASS+2,,AUTO
         6 000661   000000 621006                    EAX1    0,QL
         6 000662   100000 236100                    LDQ     0,,PR1
         6 000663   000033 772000                    QRL     27
         6 000664   000000 622006                    EAX2    0,QL
         6 000665   040140 100540                    MLR     fill='040'O
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:136  
         6 000666   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         6 000667   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         6 000670   001042 710000 6                  TRA     s:8882

      970     8857
      971     8858    3            CASE (%CLS_PTR_KEY);

      972     8859    3              CALL VDG$FORMAT_KEY (SUBST$KEY, %MXNB_ERR_SUBST, TEXTC.BYTES, 0,

   8859  6 000671   000003 471500                    LDP1    3,,PR0
         6 000672   200043 633500                    EPPR3   END_INDEX,,AUTO
         6 000673   200052 453500                    STP3    OBJECT_CLASS+6,,AUTO
         6 000674   000026 236000 7                  LDQ     22
         6 000675   200051 756100                    STQ     OBJECT_CLASS+5,,AUTO
         6 000676   200042 236100                    LDQ     @TEXTC,,AUTO
         6 000677   200000 036007                    ADLQ    65536,DL
         6 000700   200050 756100                    STQ     OBJECT_CLASS+4,,AUTO
         6 000701   000027 236000 7                  LDQ     23
         6 000702   200047 756100                    STQ     OBJECT_CLASS+3,,AUTO
         6 000703   200046 451500                    STP1    OBJECT_CLASS+2,,AUTO
         6 000704   200046 630500                    EPPR0   OBJECT_CLASS+2,,AUTO
         6 000705   000023 631400 xsym               EPPR1   B_VECTNIL+19
         6 000706   000000 701000 xent               TSX1    VDG$FORMAT_KEY
         6 000707   000000 011000                    NOP     0

      973     8860    3                END_INDEX);
      974     8861    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);

   8861  6 000710   000037 236007                    LDQ     31,DL
         6 000711   000714 604000 6                  TMI     s:8861+4
         6 000712   200043 116100                    CMPQ    END_INDEX,,AUTO
         6 000713   000715 604400 6                  TMOZ    s:8861+5
         6 000714   200043 236100                    LDQ     END_INDEX,,AUTO
         6 000715   200042 470500                    LDP0    @TEXTC,,AUTO
         6 000716   000033 736000                    QLS     27
         6 000717   000000 552140                    STBQ    0,'40'O,PR0
         6 000720   001042 710000 6                  TRA     s:8882
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:137  

      975     8862
      976     8863    3            CASE (%CLS_PTR_LOCATION);

      977     8864    3              CALL VDG$FORMAT_LOCATION (SUBST$LOCATION, %MXNB_ERR_SUBST,

   8864  6 000721   000003 471500                    LDP1    3,,PR0
         6 000722   200043 633500                    EPPR3   END_INDEX,,AUTO
         6 000723   200052 453500                    STP3    OBJECT_CLASS+6,,AUTO
         6 000724   000026 236000 7                  LDQ     22
         6 000725   200051 756100                    STQ     OBJECT_CLASS+5,,AUTO
         6 000726   200042 236100                    LDQ     @TEXTC,,AUTO
         6 000727   200000 036007                    ADLQ    65536,DL
         6 000730   200050 756100                    STQ     OBJECT_CLASS+4,,AUTO
         6 000731   000027 236000 7                  LDQ     23
         6 000732   200047 756100                    STQ     OBJECT_CLASS+3,,AUTO
         6 000733   200046 451500                    STP1    OBJECT_CLASS+2,,AUTO
         6 000734   200046 630500                    EPPR0   OBJECT_CLASS+2,,AUTO
         6 000735   000023 631400 xsym               EPPR1   B_VECTNIL+19
         6 000736   000000 701000 xent               TSX1    VDG$FORMAT_LOCATION
         6 000737   000000 011000                    NOP     0

      978     8865    3                TEXTC.BYTES, 0, END_INDEX);
      979     8866    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);

   8866  6 000740   000037 236007                    LDQ     31,DL
         6 000741   000744 604000 6                  TMI     s:8866+4
         6 000742   200043 116100                    CMPQ    END_INDEX,,AUTO
         6 000743   000745 604400 6                  TMOZ    s:8866+5
         6 000744   200043 236100                    LDQ     END_INDEX,,AUTO
         6 000745   200042 470500                    LDP0    @TEXTC,,AUTO
         6 000746   000033 736000                    QLS     27
         6 000747   000000 552140                    STBQ    0,'40'O,PR0
         6 000750   001042 710000 6                  TRA     s:8882

      980     8867
      981     8868    3            CASE (%CLS_PTR_BLOCK_DESC);
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:138  

      982     8869    3              CALL VDG$FORMAT_BLOCK_DESC (SUBST$BLOCK_DESC, %MXNB_ERR_SUBST,

   8869  6 000751   000003 471500                    LDP1    3,,PR0
         6 000752   200043 633500                    EPPR3   END_INDEX,,AUTO
         6 000753   200052 453500                    STP3    OBJECT_CLASS+6,,AUTO
         6 000754   000026 236000 7                  LDQ     22
         6 000755   200051 756100                    STQ     OBJECT_CLASS+5,,AUTO
         6 000756   200042 236100                    LDQ     @TEXTC,,AUTO
         6 000757   200000 036007                    ADLQ    65536,DL
         6 000760   200050 756100                    STQ     OBJECT_CLASS+4,,AUTO
         6 000761   000027 236000 7                  LDQ     23
         6 000762   200047 756100                    STQ     OBJECT_CLASS+3,,AUTO
         6 000763   200046 451500                    STP1    OBJECT_CLASS+2,,AUTO
         6 000764   200046 630500                    EPPR0   OBJECT_CLASS+2,,AUTO
         6 000765   000023 631400 xsym               EPPR1   B_VECTNIL+19
         6 000766   000000 701000 xent               TSX1    VDG$FORMAT_BLOCK_DESC
         6 000767   000000 011000                    NOP     0

      983     8870    3                TEXTC.BYTES, 0, END_INDEX);
      984     8871    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);

   8871  6 000770   000037 236007                    LDQ     31,DL
         6 000771   000774 604000 6                  TMI     s:8871+4
         6 000772   200043 116100                    CMPQ    END_INDEX,,AUTO
         6 000773   000775 604400 6                  TMOZ    s:8871+5
         6 000774   200043 236100                    LDQ     END_INDEX,,AUTO
         6 000775   200042 470500                    LDP0    @TEXTC,,AUTO
         6 000776   000033 736000                    QLS     27
         6 000777   000000 552140                    STBQ    0,'40'O,PR0
         6 001000   001042 710000 6                  TRA     s:8882

      985     8872
      986     8873    3            CASE (ELSE);

      987     8874    3              OBJECT_CLASS = SUBST.OBJECT.CLASS#;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:139  
   8874  6 001001   000000 236100                    LDQ     0,,PR0
         6 001002   000022 772000                    QRL     18
         6 001003   200044 756100                    STQ     OBJECT_CLASS,,AUTO

      988     8875    3              IF OBJECT_CLASS = 0 THEN TEXTC.LENGTH# = 0;

   8875  6 001004   001011 601000 6                  TNZ     s:8876

   8875  6 001005   200042 471500                    LDP1    @TEXTC,,AUTO
         6 001006   000000 236003                    LDQ     0,DU
         6 001007   100000 552140                    STBQ    0,'40'O,PR1
         6 001010   001032 710000 6                  TRA     s:8878

      989     8876    3              ELSE CALL VDG$FORMAT_NUMBER (OBJECT_CLASS, SUBST.V#,

   8876  6 001011   200043 631500                    EPPR1   END_INDEX,,AUTO
         6 001012   200053 451500                    STP1    OBJECT_CLASS+7,,AUTO
         6 001013   000026 236000 7                  LDQ     22
         6 001014   200052 756100                    STQ     OBJECT_CLASS+6,,AUTO
         6 001015   200042 236100                    LDQ     @TEXTC,,AUTO
         6 001016   200000 036007                    ADLQ    65536,DL
         6 001017   000027 235000 7                  LDA     23
         6 001020   200050 757100                    STAQ    OBJECT_CLASS+4,,AUTO
         6 001021   200041 236100                    LDQ     @SUBST,,AUTO
         6 001022   000003 036003                    ADLQ    3,DU
         6 001023   200047 756100                    STQ     OBJECT_CLASS+3,,AUTO
         6 001024   200044 633500                    EPPR3   OBJECT_CLASS,,AUTO
         6 001025   200046 453500                    STP3    OBJECT_CLASS+2,,AUTO
         6 001026   200046 630500                    EPPR0   OBJECT_CLASS+2,,AUTO
         6 001027   000024 631400 xsym               EPPR1   B_VECTNIL+20
         6 001030   000000 701000 xent               TSX1    VDG$FORMAT_NUMBER
         6 001031   000000 011000                    NOP     0

      990     8877    3                   %MXNB_ERR_SUBST, TEXTC.BYTES, 0, END_INDEX);
      991     8878    3              TEXTC.LENGTH# = MINIMUM(END_INDEX, %MXNB_ERR_SUBST);

   8878  6 001032   000037 236007                    LDQ     31,DL
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:140  
         6 001033   001036 604000 6                  TMI     s:8878+4
         6 001034   200043 116100                    CMPQ    END_INDEX,,AUTO
         6 001035   001037 604400 6                  TMOZ    s:8878+5
         6 001036   200043 236100                    LDQ     END_INDEX,,AUTO
         6 001037   200042 470500                    LDP0    @TEXTC,,AUTO
         6 001040   000033 736000                    QLS     27
         6 001041   000000 552140                    STBQ    0,'40'O,PR0

      992     8879
      993     8880    3            END;

      994     8881
      995     8882    2           RETURN;

   8882  6 001042   200040 221300                    LDX1  ! ERR_SUBST$+1,,AUTO
         6 001043   000001 702211                    TSX2  ! 1,X1
      996     8883
      997     8884    2   END SUBST_TO_TEXTC;
      998     8885
      999     8886    1   END VDG$EREPORT_ERROR;

PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:141  
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDG$EREPORT_ERROR.
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:142  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    35-0-0/w PTR         r     1 @ERR                      36-0-0/w PTR         r     1 @FATAL_CODE
     3-0-0/w PTR         r     1 @MAX_FLAGLEV              41-0-0/w PTR         r     1 @SUBST
    42-0-0/w PTR         r     1 @TEXTC                    12-0-0/w STRC(180)   r     1 AUTO_ERR
    17-0-0/w STRC(144)   r     1 AUTO_ERR_NUMS(0:2)
    17-0-0/w STRC(144)   r     1 AUTO_ERR_PTRS(0:2)
     6-0-0/w PTR         r     1 CURR_ERR$                  7-0-0/w PTR         r     1 CWIN_SPEC$
    43-0-0/w SBIN        r     1 END_INDEX                 *0-0-0/w STRC(180)   r     1 ERR
    37-0-0/w PTR         r     1 ERR_SUBST$                *0-0-0/w STRC        r     1 FATAL_CODE
    11-0-0/w STRC        r     1 FATAL_ERR_CODE            10-0-0/w BIT         r     1 JUST_ERASE
    *0-0-0/w UBIN        r     1 MAX_FLAGLEV                4-0-0/w UBIN        r     1 MX_FLAGLEV
    44-0-0/w SBIN        r     1 OBJECT_CLASS               5-0-0/w PTR         r     1 RECOV_ERR_HEAD$
    *0-0-0/w STRC(144)   r     1 SUBST                     *0-0-0/w STRC(144)   r     1 SUBST_PTR
    *0-0-0/w ASTR(9)     r     1 TEXTC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c STRC(63)    r     1 B_VERSION                  0-0-0/w STRC(144)   r     1 VD_$$QUAC
     0-0-0/w STRC(144)   r     1 VD_$COMMAND                0-0-0/w STRC(144)   r     1 VD_$MAX_COMMAND
     0-0-0/w STRC(144)   r     1 VD_$SCREEN                 0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w PTR         r     1 VD_COMMAND_WINDOW$         0-0-0/d STRC(216)   r     1 VD_EXIT
     0-0-0/w UBIN        r     1 VD_FORCE_READ_FROM
     0-0-0/w UBIN        r     1 VD_LAST_CWIN_ACTIVITY
     0-0-0/w STRC(1152)  r     1 VD_STATIC_TEMP             0-0-0/w SBIN        r     1 VD_WORST_FLAGLEV
     0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  BASED and DCB variables  ****
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:143  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC(900)   r     1 CMD$STREAM
     0-0-0/w STRC(180)   r     1 CURR$ERR                   0-0-0/w STRC(900)   r     1 CWIN$SPEC
     0-0-0/w STRC(144)   r     1 ERR$NUMBER(0:2)
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(180)   r     1 FATAL$ERR
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$EI
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$SI                       0-0-0/w STRC(936)   r     1 SUBST$BLOCK_DESC
     0-0-0/w STRC(72)    r     1 SUBST$KEY                  0-0-0/w STRC(324)   r     1 SUBST$LOCATION
     0-0-0/c ASTR(9)     r     1 SUBST$TEXTC                0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE


   Procedure VDG$EREPORT_ERROR requires 548 words for executable code.
   Procedure VDG$EREPORT_ERROR requires 44 words of local(AUTO) storage.

    No errors detected in file VDG$ENVIRONMENT.:VDA5TSI    .
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:144  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:145  
          MINI XREF LISTING

AUTO_ERR
      6998**DCL      7637<<ASSIGN   7642<>CALL     7662<<ASSIGN   7672<>CALL
AUTO_ERR.CMDLINE_INDEX#
      7040**DCL      7663<<ASSIGN
AUTO_ERR.DCB#
      7040**DCL      7667<<ASSIGN   7669<<ASSIGN
AUTO_ERR.ERR.CODE#
      7037**DCL      7638<<ASSIGN   7664<<ASSIGN
AUTO_ERR.FLAGLEV#
      7040**DCL      7639<<ASSIGN   7665<<ASSIGN
AUTO_ERR_NUMS.OBJECT.CLASS#
      7128**DCL      7670<<ASSIGN
AUTO_ERR_NUMS.V#
      7130**DCL      7671<<ASSIGN
AUTO_ERR_PTRS
      7059**DCL      7096--REDEF
AUTO_ERR_PTRS.OBJECT.CLASS#
      7083**DCL      7640<<ASSIGN
AUTO_ERR_PTRS.V$
      7085**DCL      7641<<ASSIGN
B$ALT.CODE
      7555**DCL      7555--REDEF    7556--REDEF    7556--REDEF
B$ALT.ERR.ERR#
      7557**DCL      7557--REDEF
B$ALT.EVID
      7556**DCL      7556--REDEF    7556--REDEF
B$JIT.CPFLAGS1 IN PROCEDURE REPORT_A_VD$ERR
      7924**DCL      8430>>IF
B$JIT.CPFLAGS1.SLEAZE IN PROCEDURE REPORT_A_VD$ERR
      7929**DCL      7929--REDEF
B$JIT.ERR.MID IN PROCEDURE REPORT_A_VD$ERR
      7836**DCL      7836--REDEF
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:146  
B$JIT.JRESPEAK IN PROCEDURE REPORT_A_VD$ERR
      7997**DCL      7998--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR IN PROCEDURE REPORT_A_VD$ERR
      8106**DCL      8106--REDEF    8107--REDEF
B$JIT.PNR IN PROCEDURE REPORT_A_VD$ERR
      8010**DCL      8010--REDEF
B$JIT.TSLINE IN PROCEDURE REPORT_A_VD$ERR
      8104**DCL      8105--REDEF
B$JIT$ IN PROCEDURE REPORT_A_VD$ERR
      8111**DCL      7830--IMP-PTR  8430>>IF
B$TCB$
      6963**DCL      7551--IMP-PTR
B_VERSION
      6603**DCL      7641--ASSIGN
CMD$STREAM.DCB#
      7277**DCL      7660>>IF       7669>>ASSIGN
CMD$STREAM.REC_NUM#
      7279**DCL      7656>>IF       7671>>ASSIGN
CMD$STREAM.TYPE#
      7276**DCL      7656>>IF       7656>>IF       7666>>IF
CURR$ERR
      7197**DCL      7646<>CALL
CURR$ERR.FLAGLEV#
      7239**DCL      7588>>IF       7630>>IF       7631>>ASSIGN   7654>>IF
CURR$ERR.FLINK$
      7223**DCL      7676>>ASSIGN
CURR_ERR$
      6969**DCL      7197--IMP-PTR  7569<<ASSIGN   7576<<ASSIGN   7585>>IF       7588>>IF       7629>>DOWHILE
      7630>>IF       7631>>ASSIGN   7646>>CALL     7654>>IF       7676<<ASSIGN   7676>>ASSIGN
CWIN$SPEC.COORDS.HEIGHT#
      7316**DCL      7582>>IF
CWIN$SPEC.DCB#
      7332**DCL      7580--IF       7605--IF
CWIN_SPEC$
      6970**DCL      7289--IMP-PTR  7579<<ASSIGN   7580>>IF       7582>>IF       7605>>IF
END_INDEX IN PROCEDURE SUBST_TO_TEXTC
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:147  
      8632**DCL      8859<>CALL     8861>>ASSIGN   8864<>CALL     8866>>ASSIGN   8869<>CALL     8871>>ASSIGN
      8876<>CALL     8878>>ASSIGN
ERR IN PROCEDURE REPORT_A_VD$ERR
      7759**DCL      7749--PROC     8394--ASSIGN   8394--ASSIGN
ERR.CMDLINE_INDEX# IN PROCEDURE REPORT_A_VD$ERR
      7801**DCL      8384>>IF       8386>>ASSIGN
ERR.DCB# IN PROCEDURE REPORT_A_VD$ERR
      7801**DCL      8390>>IF       8390>>ASSIGN
ERR.ERR IN PROCEDURE REPORT_A_VD$ERR
      7796**DCL      8382>>ASSIGN   8450<<ASSIGN
ERR.ERR.CODE# IN PROCEDURE REPORT_A_VD$ERR
      7798**DCL      8375>>ASSIGN   8375>>ASSIGN
ERR.ERR.FCG IN PROCEDURE REPORT_A_VD$ERR
      7798**DCL      8369>>IF       8370<<ASSIGN
ERR.ERR.MID IN PROCEDURE REPORT_A_VD$ERR
      7798**DCL      8371<<ASSIGN
ERR.ERR.MON IN PROCEDURE REPORT_A_VD$ERR
      7798**DCL      8372<<ASSIGN
ERR.ERR.SEV# IN PROCEDURE REPORT_A_VD$ERR
      7798**DCL      8373<<ASSIGN
ERR.FLAGLEV# IN PROCEDURE REPORT_A_VD$ERR
      7801**DCL      8383>>ASSIGN   8416>>IF       8444>>IF       8447>>IF       8448>>ASSIGN   8449>>IF
ERR$NUMBER IN PROCEDURE REPORT_A_VD$ERR
      8123**DCL      8399<>CALL     8404<>CALL     8409<>CALL
ERR$NUMBER.OBJECT.CLASS# IN PROCEDURE REPORT_A_VD$ERR
      8155**DCL      8398>>IF       8403>>IF       8408>>IF
ERR_SUBST$ IN PROCEDURE REPORT_A_VD$ERR
      8112**DCL      8123--IMP-PTR  8176--IMP-PTR  8394<<ASSIGN   8398>>IF       8399>>CALL     8403>>IF
      8404>>CALL     8408>>IF       8409>>CALL
F$DCB.ACTPOS
      7526**DCL      7526--REDEF
F$DCB.ARS#
      7500**DCL      7500--REDEF
F$DCB.ATTR
      7519**DCL      7520--REDEF
F$DCB.BORROW
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:148  
      7534**DCL      7534--REDEF    7534--REDEF    7534--REDEF
F$DCB.DCBNAME.L
      7548**DCL      7548--IMP-SIZ
F$DCB.EOMCHAR#
      7504**DCL      7504--REDEF
F$DCB.FCD#
      7513**DCL      7605>>IF
F$DCB.FLDID
      7529**DCL      7529--REDEF
F$DCB.FORM$
      7523**DCL      7523--REDEF
F$DCB.FSECT
      7539**DCL      7539--REDEF
F$DCB.FSN#
      7516**DCL      7516--REDEF    7516--REDEF    7517--REDEF
F$DCB.HEADER$
      7522**DCL      7522--REDEF
F$DCB.IXTNSIZE#
      7520**DCL      7520--REDEF
F$DCB.LASTSTA$
      7509**DCL      7509--REDEF
F$DCB.LVL
      7535**DCL      7535--REDEF
F$DCB.NAME#.C
      7510**DCL      7510--REDEF
F$DCB.NOEOF
      7532**DCL      7532--REDEF
F$DCB.NRECS#
      7521**DCL      7521--REDEF
F$DCB.NRECX
      7540**DCL      7540--REDEF
F$DCB.OHDR
      7532**DCL      7532--REDEF
F$DCB.ORG#
      7515**DCL      7515--REDEF
F$DCB.PRECNO
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:149  
      7538**DCL      7538--REDEF
F$DCB.RCSZ
      7544**DCL      7544--REDEF
F$DCB.RES#
      7511**DCL      7511--REDEF
F$DCB.SETX
      7523**DCL      7523--REDEF
F$DCB.TAB$
      7523**DCL      7523--REDEF
F$DCB.TDA
      7537**DCL      7538--REDEF
F$DCB.UOPT#
      7513**DCL      7580>>IF
F$DCB.WSN#
      7511**DCL      7511--REDEF
FATAL$ERR
      7144**DCL      7569--ASSIGN   7680<<ASSIGN   7683--ASSIGN
FATAL$ERR.ERR
      7181**DCL      7568>>IF       7702>>IF       7703<<ASSIGN
FATAL$ERR.FLAGLEV#
      7186**DCL      7571<<ASSIGN   7705<<ASSIGN
FATAL$ERR.FLINK$
      7170**DCL      7565>>ASSIGN   7576>>ASSIGN   7682<<ASSIGN
FATAL$ERR.OBJECT.CLASS#
      7168**DCL      7681<<ASSIGN
FATAL_CODE IN PROCEDURE REPORT_A_VD$ERR
      7812**DCL      7749--PROC     8367<<ASSIGN
FATAL_ERR_CODE
      6980**DCL      7598<<ASSIGN   7642<>CALL     7646<>CALL     7672<>CALL     7703>>ASSIGN
FATAL_ERR_CODE.CODE#
      6984**DCL      7610<<ASSIGN
FORCE_FATAL_ERROR
      7688**LABEL    7599--GOTO     7611--GOTO
INFO_READ_FILE_AT
      7659**LABEL    7661--EXIT
JUST_ERASE
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:150  
      6971**DCL      7584<<ASSIGN   7589<<ASSIGN   7591>>IF
M$DO
      6243**DCL      8423<>CALL     8424>>ASSIGN   8425>>ASSIGN
M$EI
      6244**DCL      7667>>ASSIGN
M$LO
      6245**DCL      8420>>ASSIGN   8423<>CALL     8429>>ASSIGN
M$ME
      6242**DCL      8418>>ASSIGN
M$SI
      6246**DCL      7660>>IF
MAX_FLAGLEV
       118**DCL       117--PROC     7688--IF       7689<<ASSIGN
MX_FLAGLEV
      6967**DCL      7564<<ASSIGN   7630>>IF       7631<<ASSIGN   7689>>ASSIGN
OBJECT_CLASS IN PROCEDURE SUBST_TO_TEXTC
      8633**DCL      8874<<ASSIGN   8875>>IF       8876<>CALL
OFREE_FAILED
      7705**LABEL    7685--CALLALT
RECOV_ERR_HEAD$
      6968**DCL      7565<<ASSIGN   7685>>CALL
REPORT_A_VD$ERR
      7749**PROC     7642--CALL     7646--CALL     7672--CALL
REPORT_A_VD$ERR_FAILED
      7688**LABEL    7642--CALLALT  7646--CALLALT  7672--CALLALT
REPORT_ERROR
      7568**LABEL    7706--GOTO
SUBST IN PROCEDURE SUBST_TO_TEXTC
      8524**DCL      8515--PROC     8577--REDEF
SUBST.OBJECT.CLASS# IN PROCEDURE SUBST_TO_TEXTC
      8556**DCL      8852>>DOCASE   8874>>ASSIGN
SUBST.V# IN PROCEDURE SUBST_TO_TEXTC
      8558**DCL      8876<>CALL
SUBST$BLOCK_DESC IN PROCEDURE SUBST_TO_TEXTC
      8710**DCL      8869<>CALL
SUBST$KEY IN PROCEDURE SUBST_TO_TEXTC
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:151  
      8668**DCL      8859<>CALL
SUBST$LOCATION IN PROCEDURE SUBST_TO_TEXTC
      8682**DCL      8864<>CALL
SUBST$TEXTC.BYTES IN PROCEDURE SUBST_TO_TEXTC
      8655**DCL      8856>>ASSIGN
SUBST$TEXTC.LENGTH# IN PROCEDURE SUBST_TO_TEXTC
      8653**DCL      8655--IMP-SIZ  8855>>ASSIGN   8856>>ASSIGN
SUBST_PTR.V$ IN PROCEDURE SUBST_TO_TEXTC
      8603**DCL      8645--IMP-PTR  8668--IMP-PTR  8682--IMP-PTR  8710--IMP-PTR  8855>>ASSIGN   8856>>ASSIGN
      8856>>ASSIGN   8859>>CALL     8864>>CALL     8869>>CALL
SUBST_TO_TEXTC
      8515**PROC     8399--CALL     8404--CALL     8409--CALL
TEXTC IN PROCEDURE SUBST_TO_TEXTC
      8614**DCL      8515--PROC
TEXTC.BYTES IN PROCEDURE SUBST_TO_TEXTC
      8624**DCL      8856<<ASSIGN   8859<>CALL     8864<>CALL     8869<>CALL     8876<>CALL
TEXTC.LENGTH# IN PROCEDURE SUBST_TO_TEXTC
      8622**DCL      8624--IMP-SIZ  8855<<ASSIGN   8856>>ASSIGN   8856>>ASSIGN   8859>>CALL     8861<<ASSIGN
      8864>>CALL     8866<<ASSIGN   8869>>CALL     8871<<ASSIGN   8875<<ASSIGN   8876>>CALL     8878<<ASSIGN
VD$ERR
      7355**DCL      7685<>CALL
VD$ERR.ERR
      7392**DCL      7598>>ASSIGN
VD$FILE_NODE.DESC.SPEC.V$
      7487**DCL      7579>>ASSIGN
VDG$ERASE_COMMAND_WINDOW
      6233**DCL-ENT  7596--CALL
VDG$EXPAND_COMMAND_WINDOW
      6232**DCL-ENT  7606--CALL     7608--CALL
VDG$FORMAT_BLOCK_DESC
      6239**DCL-ENT  8869--CALL
VDG$FORMAT_KEY
      6237**DCL-ENT  8859--CALL
VDG$FORMAT_LOCATION
      6238**DCL-ENT  8864--CALL
VDG$FORMAT_NUMBER
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:152  
      6236**DCL-ENT  8876--CALL
VDG$MTERMINATE
      6234**DCL-ENT  8452--CALL
VDG$OFREE
      6235**DCL-ENT  7685--CALL
VD_$$QUAC.V#
      6416**DCL      7660>>IF       8419>>IF
VD_$COMMAND.V#
      6371**DCL      8419>>IF
VD_$MAX_COMMAND.V#
      6326**DCL      7582>>IF       7608<>CALL
VD_$SCREEN.V#
      6461**DCL      7606<>CALL
VD_6E.CMD_STREAM$
      6278**DCL      7250--IMP-PTR  7654>>IF       7656>>IF       7656>>IF       7656>>IF       7660>>IF
      7666>>IF       7669>>ASSIGN   7671>>ASSIGN
VD_6E.ERR_HEAD$
      6279**DCL      7144--IMP-PTR  7565>>ASSIGN   7568>>IF       7569>>ASSIGN   7571>>ASSIGN   7576>>ASSIGN
      7680>>ASSIGN   7681>>ASSIGN   7682>>ASSIGN   7683>>ASSIGN   7702>>IF       7703>>ASSIGN   7705>>ASSIGN
VD_6E.ERR_TAIL$
      6279**DCL      7585>>IF       7598>>ASSIGN   7683<<ASSIGN
VD_6E.STATS_ERRORS#
      6281**DCL      8375<<ASSIGN   8375>>ASSIGN   8378<<ASSIGN   8378>>ASSIGN
VD_COMMAND_WINDOW$
      6283**DCL      7578>>IF       7579>>ASSIGN
VD_EXIT.V.STEPCC#
      6960**DCL      6960--REDEF    8451<<ASSIGN
VD_FORCE_READ_FROM
      6467**DCL      7614<<ASSIGN   7620<<ASSIGN
VD_LAST_CWIN_ACTIVITY
      6468**DCL      7585>>IF       7585>>IF       7601<<ASSIGN   7613<<ASSIGN   7619<<ASSIGN
VD_STATIC_TEMP.BUFFER
      6465**DCL      8392<<ASSIGN   8392>>ASSIGN   8399<>CALL     8401--ASSIGN   8404<>CALL     8406--ASSIGN
      8409<>CALL     8411--ASSIGN   8445<<ASSIGN   8445>>ASSIGN
VD_WORST_FLAGLEV
      6466**DCL      7636>>IF       8447>>IF       8448<<ASSIGN
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:153  
XUG$CORRES
      6211**DCL-ENT  8423--CALL
XUG$ECHO
      6209**DCL-ENT  8427--CALL     8432--CALL
XUG$ERRMSG
      6213**DCL-ENT  8442--CALL
XUG$ERRPTR
      6207**DCL-ENT  8440--CALL
XUG_GETCMD
      6623**DCL      8427<>CALL     8432<>CALL     8440<>CALL     8442<>CALL
XUG_GETCMD.DCB2_PARAM#
      6808**DCL      8415<<ASSIGN   8424<<ASSIGN
XUG_GETCMD.DCB_PARAM#
      6803**DCL      8418<<ASSIGN   8420<<ASSIGN   8425<<ASSIGN   8429<<ASSIGN
XUG_GETCMD.EOMCHAR#
      6763**DCL      8426>>IF       8430>>IF       8435<<ASSIGN
XUG_GETCMD.EPOS#
      6733**DCL      8386<<ASSIGN
XUG_GETCMD.ERRDCB#
      6782**DCL      8390<<ASSIGN
XUG_GETCMD.ERR_CODE
      6771**DCL      8382<<ASSIGN
XUG_GETCMD.F1_
      6820**DCL      8395<<ASSIGN   8401<<ASSIGN
XUG_GETCMD.F2_
      6824**DCL      8396<<ASSIGN   8406<<ASSIGN
XUG_GETCMD.F3_
      6828**DCL      8397<<ASSIGN   8411<<ASSIGN
XUG_GETCMD.FLGLEV#
      6728**DCL      8383<<ASSIGN
XUG_GETCMD.INFOMSG#
      6719**DCL      8417<<ASSIGN
XUG_GETCMD.OUT$
      6628**DCL      6634--REDEF
XUG_GETCMD.TREAD#
      6672**DCL      8430>>IF
PL6.E3A0      #007=VDG$EREPORT_ERROR File=VDG$ENVIRONMENT.:VDA5TSI               FRI 07/04/97 11:17 Page:154  
XUG_GETCMD.USE_EPOS#
      6666**DCL      8385<<ASSIGN   8389<<ASSIGN   8437>>IF
