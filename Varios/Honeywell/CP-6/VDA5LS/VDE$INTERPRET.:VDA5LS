VERSION A05

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:1    
        1        1        /*M* VDE$INTERPRET - Interpret a window's InTree */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDE$INTERPRET
       12       12            PURPOSE:  Interpret a window's InTree.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDE$IOPEN
       17       17                Given an editing window, will initialize the window's
       18       18                evaluation stack for the first call to VDE$IRANGE, then open
       19       19                the window's stream to the InTree's domain.
       20       20
       21       21                VDE$IOPEN_SOURCE
       22       22                Version of VDE$IOPEN for opening the source operand.
       23       23                Initializes the source operand for the first call to
       24       24                VDE$IRANGE, except that it doesn't open the stream yet.
       25       25
       26       26                VDE$IRANGE
       27       27                Given an operand whose stream has already been opened to
       28       28                the operand's InTree's domain, VDE$IRANGE will evaluate the
       29       29                InTree, call the Accessor to find the
       30       30                exact record key and position within the record of the
       31       31                start and end bounds of the range, and store that info
       32       32                in the operand's .EVAL.  To perform a
       33       33                repeated operation, the caller should first open the
       34       34                operand to the InTree's domain, then call VDE$IRANGE
       35       35                repeatedly:  VDE$IRANGE will either return a false signal, or
       36       36                will return a true signal and the evaluated range of the InTree.
       37       37
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:2    
       38       38                VDE$IADJUST
       39       39                Given an IT_ADJUST InTree node for an operand, will
       40       40                evaluate the children of the IT_ADJUST node and return a
       41       41                spec of the location to which they move the FilePointer,
       42       42                and a signal indicating success or failure of the evaluation.
       43       43
       44       44                VDE$IMOVE_BY_POSITIONS
       45       45                Given an open stream and a number of positions to move from a
       46       46                starting location, will find the location which is that number
       47       47                of existing data-component bytes away from the starting location,
       48       48                moving either forward or backward.
       49       49
       50       50                VDE$IGUAR_RANGE_IN_RANGE
       51       51                Given two two VD$RANGEs, one representing a range to check
       52       52                and the other representing the limits against which to check
       53       53                the first range, guarantee that the first range lies within
       54       54                the second range.  Will truncate the range to make it fit,
       55       55                even to the point of yielding an empty range.
       56       56        */
       57       57
       58       58        /*D* NAME:  VDE$IOPEN
       59       59            INPUT:
       60       60                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file
       61       61                    for the window to open.  Pointed to by VD_CURRENT_WINDOW$.
       62       62                OPERAND - VD$OPERAND to open; must be WINDOW_NODE's
       63       63                        VD$WINDOW_SPEC.OPERAND:
       64       64                    .STREAM$ must be non-NIL, tho the stream need not be
       65       65                        open yet.
       66       66                    .INTREE$ must point to a VD$IT_BLOCK_EXPR:
       67       67                        If .DOMAINN is %CLEAR, this indicates that the domain
       68       68                            of the block expression is the same as OPERAND's
       69       69                            EditBlock.  OPERAND.EDIT_BLOCK$ must not be NIL.
       70       70                            The InTree's .OPTIONS must contain only those
       71       71                            processing/access options explicitly given by
       72       72                            the user.
       73       73                        If .DOMAINN is not %CLEAR, it must specify the new
       74       74                            EditBlock for the operand.  .OPERAND.EDIT_BLOCK$
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:3    
       75       75                            may or may not be NIL.  The InTree's .OPTIONS must
       76       76                            contain a complete set of options, unless
       77       77                            .DOMAINN.NEXT or .PREVIOUS is set, in which case
       78       78                            only the options explicitly given by the user
       79       79                            should be set.
       80       80                    .EVAL$ may or may not be NIL.
       81       81            OUTPUT:
       82       82                If OPERAND's InTree's .DOMAINN was non-%CLEAR, an implicit
       83       83                    EDIT command will have been performed for this operand:
       84       84                    OPERAND.EDIT_BLOCK will have a new block-descriptor value.
       85       85                        However, if any errors are encountered, it will have no
       86       86                        value.
       87       87                    WINDOW_NODE's children will be mucked with:
       88       88                    If .DOMAINN.NEXT and .PREVIOUS are %FALSE, WINDOW_NODE's current
       89       89                        child (VD$WINDOW_BLOCK) will contain WINDOW_NODE's old
       90       90                        .OPERAND; also, if that .OPERAND is non-NIL, a new child will
       91       91                        be allocated for the new EditBlock.
       92       92                    If .DOMAINN.NEXT or .PREVIOUS is set, then the
       93       93                        VD$WINDOW_SPEC.CURR_INDEX# will be incremented or
       94       94                        decremented, as appropriate.
       95       95                OPERAND.EVAL$ will be initialized:
       96       96                    OPERAND.EVAL$ will not be NIL.  It's:
       97       97                    .ENCLOSING will be the range from the (possibly new)
       98       98                        EditBlock.
       99       99                    .RANGE will be either:
      100      100                        New domain:  the start boundary of the new EditBlock.
      101      101                        Old domain:  untouched (and so should be the range of
      102      102                            the last SelectedBlock).
      103      103                    .LAST_FOUND_RANGE will be cleared.
      104      104                    .NODE$ will point to the first IT_SELECT node in the
      105      105                        InTree (if any).
      106      106                    .REMAINING# will be set from that IT_SELECT node's
      107      107                        repeat-count (or 0 if no IT_SELECT node).
      108      108                OPERAND.INTREE$'s .DOMAINN will be %CLEAR.
      109      109                    Also, its .OPTIONS will be filled in, if they aren't
      110      110                    already, from the (possibly new) EditBlock's options.
      111      111            DESCRIPTION:
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:4    
      112      112        *N*     If .DOMAINN is %CLEAR, check the IT$BLOCK_EXPR.OPTIONS:
      113      113        *N*     if any are non-0/CLEAR/NIL (ie, explicitly given by user),
      114      114        *N*     update the current EDIT$BLOCK to reflect the change:
      115      115        *N*         If .STRUCTURE$ given, the new Structure's accessor-
      116      116        *N*             structure must be the same as the old Structure's
      117      117        *N*             accessor-structure.
      118      118        *N*         If the level or component options change and
      119      119        *N*             WINDOW_NODE is passed, tell the Presenter to
      120      120        *N*             erase the window (it'll repaint it properly on
      121      121        *N*             the next read).
      122      122        *N*         If the protect option changes, close and reopen the
      123      123        *N*             file.
      124      124        *N*         Ignore existence option changes between ANY and OLD,
      125      125        *N*             but reject an IT$BLOCK_EXPR.OPTION of NEW when
      126      126        *N*             the EDIT$BLOCK shows ANY or OLD.
      127      127                If the InTree's .DOMAINN is non-%CLEAR, then do an
      128      128                implicit EDIT command:
      129      129                    If .DOMAINN.PREVIOUS is set, save WINDOW$SPEC.OPERAND's
      130      130                        current EditBlock and evaluation stack in the
      131      131                        current WindowBlock, decrement the WindowBlock
      132      132                        index, and reload the EditBlock and evaluation
      133      133                        stack from that WindowBlock.
      134      134                    If .DOMAINN.NEXT is set, do analogous actions in the
      135      135                        forward direction.
      136      136                    Else we've got a whole new EditBlock:
      137      137                        Delete any WindowBlock's after the current one.
      138      138                        Save WINDOW$SPEC.OPERAND's current EditBlock and
      139      139                            evaluation stack in the current WindowBlock.
      140      140                        Allocate a new EditBlock, and initialize it to the InTree's
      141      141                            .DOMAINN.
      142      142                        Set WINDOW$SPEC.OPERAND.EVAL$'s .RANGE to the new EditBlock.
      143      143                        If the window's current child is occupied (ie, if the prior
      144      144                            .OPERAND was non-NIL), then write a new child to this
      145      145                            window containing the window's current EditBlock and
      146      146                            evaluation stack.
      147      147                        Else (if the window's current child is unoccupied), save the
      148      148                            window's current EditBlock and evaluation stack in the
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:5    
      149      149                            current child.
      150      150                    Open OPERAND's Stream to the EditBlock's file.
      151      151                Initialize OPERAND.EVAL$ for the first call to VDE$IRANGE.
      152      152                    Set its .ENCLOSING from OPERAND.EDIT_BLOCK$'s range.
      153      153        */
      154      154
      155      155        VDE$IOPEN: PROC ALTRET;
      156      156
      157      157        %INCLUDE VD_MACROS_M;
      158     2372        %INCLUDE VD_PERR_C;
      159     2520
      160     2521
      161     2522        %VD$FILE_NODE (NAME=WINDOW_NODE, STCLASS="BASED(VD_CURRENT_WINDOW$)");
      162     2615        %VD$OPERAND (NAME=OPERAND, STCLASS="BASED(OPERAND$)");
      163     2629
      164     2630
      165     2631        /*
      166     2632        *   Local equates.
      167     2633        */
      168     2634        %EQU SCRATCH_FNAME = CONCAT(FSTCL_INTERNAL, PFK_CONSTANT, DK_SCRATCH);
      169     2635
      170     2636
      171     2637
      172     2638    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      173     2639    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      174     2640    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      175     2641    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
      176     2642    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
      177     2643    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      178     2644    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
      179     2645    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      180     2646    1   DCL VDA$LDELETE         ENTRY (2) ALTRET;
      181     2647    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      182     2648    1   DCL VDI$PREMOVE_EDIT_BLOCK  ENTRY ALTRET;
      183     2649    1   DCL VDG$ESCREECH        ENTRY (3);
      184     2650    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      185     2651    1   DCL VDG$INFOMSG         ENTRY (4) ALTRET;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:6    
      186     2652
      187     2653
      188     2654        %VD_6E (STCLASS=SYMREF);
      189     2690    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      190     2691
      191     2692
      192     2693
      193     2694    1   DCL OPERAND$ PTR;
      194     2695    1   DCL CURR_WINDOW$ PTR;
      195     2696    1   DCL IT_BLOCK_EXPR$ PTR;
      196     2697    1   DCL IT_SELECT$ PTR;
      197     2698    1   DCL TOS_EVAL$ PTR;
      198     2699    1   DCL EDIT_BLOCK$ PTR;
      199     2700    1   DCL DOMAIN_KEY$ PTR;
      200     2701    1   DCL VD_ERR$ PTR;
      201     2702
      202     2703
      203     2704        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      204     2854        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
      205     2891        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
      206     3136        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      207     3242        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      208     3389        %VD$FILE_KEY (NAME=DOMAIN$KEY, STCLASS="BASED(DOMAIN_KEY$)");
      209     3438        %VD$TEXTC_REMOTE;
      210     3499        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      211     3565        %VD$ERR (NAME=VD$ERR_LAST, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      212     3618        %VD$ERR (NAME=VD$ERR_FIRST, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      213     3671        %VD$PORT;
      214     3769
      215     3770
      216     3771
      217     3772    1           CURR_WINDOW$ = WINDOW_NODE.DESC.SPEC.V$;
      218     3773    1           OPERAND$ = ADDR(CURR$WINDOW.OPERAND);
      219     3774    1           IT_BLOCK_EXPR$ = OPERAND.INTREE$;
      220     3775
      221     3776    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;
      222     3777                   %INCREMENT (INDX=%STG_BLOCK_IN_EDITBLOCK);
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:7    
      223     3780    2              CALL UPDATE_OPTIONS
      224     3781    2                ALTRET (UPDATE_OPTIONS_FAILED);
      225     3782    2              END;
      226     3783    2           ELSE DO;
      227     3784    2              IF IT$BLOCK_EXPR.DOMAINN.NEXT
      228     3785    3                OR IT$BLOCK_EXPR.DOMAINN.PREVIOUS THEN DO;
      229     3786    3                 CALL NEXT_PREV_DOMAIN
      230     3787    3                   ALTRET (NEXT_PREV_DOMAIN_FAILED);
      231     3788    3                 END;
      232     3789    3              ELSE DO;
      233     3790                      /*
      234     3791                      *   If the new domain is a Scratch file, it's an error:
      235     3792                      *     only source blocks can be Scratch files, and source
      236     3793                      *     blocks go through VDE$IOPEN_SOURCE, never VDE$IOPEN.
      237     3794                      *N*  Someday, may want to allow editing scratch files???
      238     3795                      */
      239     3796    3                 DOMAIN_KEY$ = IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$;
      240     3797    3                 IF DOMAIN$KEY.UNIQUE.FNAME.LENGTH# >= %LENGTHC(SCRATCH_FNAME)
      241     3798    3                   AND SUBSTR(DOMAIN$KEY.UNIQUE.FNAME.BYTES,
      242     3799    3                   0, %LENGTHC(SCRATCH_FNAME)) = %SCRATCH_FNAME THEN
      243     3800    3                    GOTO CANT_EDIT_SCRATCH_FAILURE;
      244     3801    3                 CALL NEW_EDIT_BLOCK
      245     3802    3                   ALTRET (NEW_EDIT_BLOCK_FAILED);
      246     3803    3                 END;
      247     3804    2              END;
      248     3805
      249     3806    1           GOTO COMMON_FINISH;
      250     3807        %EJECT;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:8    
      251     3808        /*D* NAME:  VDE$IOPEN_SOURCE
      252     3809            INPUT:
      253     3810                VD_6E.SOURCE.OPERAND - The VD$OPERAND to open:
      254     3811                    .STREAM$ must be non-NIL, tho the stream need not be
      255     3812                        open yet.
      256     3813                    .INTREE$, .EDIT_BLOCK$, and .EVAL$ may be non-NIL; their
      257     3814                        values at entry are discarded.
      258     3815                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
      259     3816                    Windows file, for the current editing window.  In this
      260     3817                    window's VD$WINDOW_SPEC.OPERAND:
      261     3818                    .INTREE$ must point to a VD$IT_BLOCK_EXPR:
      262     3819                        If .DOMAINN is %CLEAR, this indicates that the domain
      263     3820                            of the block expression is the same as OPERAND's
      264     3821                            EditBlock.  OPERAND.EDIT_BLOCK$ must not be NIL.
      265     3822                            The InTree's .OPTIONS must contain only those
      266     3823                            processing/access options explicitly given by
      267     3824                            the user.
      268     3825                        If .DOMAINN is not %CLEAR, it must specify the new
      269     3826                            EditBlock for the operand.  .OPERAND.EDIT_BLOCK$
      270     3827                            may or may not be NIL.  The InTree's .OPTIONS must
      271     3828                            contain a complete set of options, unless
      272     3829                            .DOMAINN.NEXT or .PREVIOUS is set, in which case
      273     3830                            only the options explicitly given by the user
      274     3831                            should be set.
      275     3832                    .EVAL$ may or may not be NIL.
      276     3833            OUTPUT:
      277     3834                VD_6E.SOURCE.OPERAND:
      278     3835                    .INTREE$ will now point to (and "own") the editing window's
      279     3836                        InTree.
      280     3837                    .EDIT_BLOCK$ will point to a new VD$BLOCK_DESC for the
      281     3838                        enclosing block for the source operand.
      282     3839                    .EVAL$ will point to a new VD$EVAL:
      283     3840                        .ENCLOSING will be the range from the (possibly new)
      284     3841                            EditBlock.
      285     3842                        .RANGE will be either:
      286     3843                            New domain:  the start boundary of the new EditBlock.
      287     3844                            Old domain:  untouched (and so should be the range of
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:9    
      288     3845                                the last SelectedBlock).
      289     3846                    .LAST_FOUND_RANGE will be cleared.
      290     3847                        .NODE$ will point to the first IT_SELECT node in the
      291     3848                            InTree (if any).
      292     3849                        .REMAINING# will be set from that IT_SELECT node's
      293     3850                            repeat-count (or 0 if no IT_SELECT node).
      294     3851                    .INTREE$'s .DOMAINN will be %CLEAR.
      295     3852                        Also, its .OPTIONS will be filled in, if they aren't
      296     3853                        already, from the (possibly new) EditBlock's options.
      297     3854                The current editing window's .OPERAND.INTREE$ will be NIL.
      298     3855            DESCRIPTION:
      299     3856                Free the objects currently pointed-to by VD_6E.SOURCE.OPERAND's
      300     3857                    .INTREE$, .EDIT_BLOCK$, and .EVAL$.
      301     3858                Move the InTree from the editing window's .OPERAND to
      302     3859                    VD_6E.SOURCE.OPERAND.
      303     3860                If the InTree's .DOMAINN is clear:
      304     3861                    Copy the editing window's .EDIT_BLOCK$ to VD_6E.SOURCE.
      305     3862                    Copy just the top entry of the editing window's evaluation
      306     3863                        stack (.OPERAND.EVAL$) to VD_6E.SOURCE.
      307     3864        *N*         Check the IT$BLOCK_EXPR.OPTIONS:
      308     3865        *N*         if any are non-0/CLEAR/NIL (ie, explicitly given by user),
      309     3866        *N*         update VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ to reflect the
      310     3867        *N*         change:
      311     3868        *N*             If .STRUCTURE$ given, the new Structure's accessor-
      312     3869        *N*                 structure must be the same as the old Structure's
      313     3870        *N*                 accessor-structure.
      314     3871        *N*             Ignore existence option changes between ANY and OLD,
      315     3872        *N*                 but reject an IT$BLOCK_EXPR.OPTION of NEW when
      316     3873        *N*                 the EDIT$BLOCK shows ANY or OLD.
      317     3874                If the InTree's .DOMAINN is non-%CLEAR, build a new
      318     3875                VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ and .EVAL$:
      319     3876                    If .DOMAINN.NEXT or .PREVIOUS is set, build the new
      320     3877                        EditBlock and .EVAL from the next or previous
      321     3878                        WindowBlock in the editing window's EditBlock stack.
      322     3879                    Else build the new EditBlock from .DOMAINN.FILE_KEY and
      323     3880                        .RANGE, and the new .EVAL from the new EditBlock.
      324     3881                Initialize VD_6E.SOURCE.OPERAND.EVAL$ for the first call to
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:10   
      325     3882                    VDE$IRANGE.  Set its .ENCLOSING from
      326     3883                    VD_6E.SOURCE.OPERAND.EDIT_BLOCK$'s range.
      327     3884        */
      328     3885
      329     3886    1   VDE$IOPEN_SOURCE: ENTRY ALTRET;
      330     3887    1           CURR_WINDOW$ = WINDOW_NODE.DESC.SPEC.V$;
      331     3888    1           OPERAND$ = ADDR(VD_6E.SOURCE.OPERAND);
      332     3889
      333     3890    1           CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.INTREE$ -> IT$BLOCK_EXPR)
      334     3891    1             ALTRET (OFREE_FAILED);
      335     3892    1           VD_6E.SOURCE.OPERAND.INTREE$ = CURR$WINDOW.OPERAND.INTREE$;
      336     3893    1           IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;
      337     3894    1           CURR$WINDOW.OPERAND.INTREE$ = ADDR(NIL);
      338     3895
      339     3896    1           CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ -> EDIT$BLOCK)
      340     3897    1             ALTRET (OFREE_FAILED);
      341     3898    1           VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ = ADDR(NIL);
      342     3899
      343     3900    2           DO WHILE VD_6E.SOURCE.OPERAND.EVAL$ ~= ADDR(NIL);
      344     3901    2              TOS_EVAL$ = VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.BLINK$;
      345     3902    2              CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL)
      346     3903    2                ALTRET (OFREE_FAILED);
      347     3904    2              VD_6E.SOURCE.OPERAND.EVAL$ = TOS_EVAL$;
      348     3905    2              END;
      349     3906
      350     3907
      351     3908    1           IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD; /* Source must exist */
      352     3909    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;
      353     3910    2              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EDIT_BLOCK$->EDIT$BLOCK,
      354     3911    2                VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)
      355     3912    2                ALTRET (OCOPY_FAILED);
      356     3913    2              EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;
      357     3914    2              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EVAL$->TOS$EVAL,
      358     3915    2                VD_6E.SOURCE.OPERAND.EVAL$)
      359     3916    2                ALTRET (OCOPY_FAILED);
      360     3917    2              CALL UPDATE_OPTIONS
      361     3918    2                ALTRET (UPDATE_OPTIONS_FAILED);
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:11   
      362     3919    2              END;
      363     3920    2           ELSE DO;
      364     3921    2              IF IT$BLOCK_EXPR.DOMAINN.NEXT
      365     3922    3                OR IT$BLOCK_EXPR.DOMAINN.PREVIOUS THEN DO;
      366     3923    3                 CALL NEXT_PREV_DOMAIN
      367     3924    3                   ALTRET (NEXT_PREV_DOMAIN_FAILED);
      368     3925    3                 END;
      369     3926    3              ELSE DO;
      370     3927    3                 CALL VDG$OALLOC (%CLS_BLOCK_DESC,
      371     3928    3                   VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)
      372     3929    3                   ALTRET (OALLOC_FAILED);
      373     3930    3                 EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;
      374     3931    3                 EDIT$BLOCK.FILE_KEY = IT$BLOCK_EXPR.DOMAINN.FILE_KEY;
      375     3932    3                 EDIT$BLOCK.RANGE = IT$BLOCK_EXPR.DOMAINN.RANGE;
      376     3933    3                 IT$BLOCK_EXPR.DOMAINN = %CLEAR;
      377     3934    3                 EDIT$BLOCK.OPTIONS = IT$BLOCK_EXPR.OPTIONS;
      378     3935                      %COPYKEY (FKEY=IT$BLOCK_EXPR.OPTIONS.KEY_INCR,
      379     3936                      TKEY=EDIT$BLOCK.OPTIONS.KEY_INCR);
      380     3952
      381     3953    3                 CALL VDG$OALLOC (%CLS_EVAL, VD_6E.SOURCE.OPERAND.EVAL$)
      382     3954    3                   ALTRET (OALLOC_FAILED);
      383     3955    3                 CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE,
      384     3956    3                   VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.RANGE)
      385     3957    3                   ALTRET (OCOPY_RANGE_FAILED);
      386     3958    3                 END;
      387     3959    2              END;
      388     3960    1           VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.STATE# = %EVST_INITIAL;
      389     3961
      390     3962        %EJECT;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:12   
      391     3963    1   COMMON_FINISH: ;
      392     3964
      393     3965    1           IT_SELECT$ = IT$BLOCK_EXPR.SELECTS$;
      394     3966    1           TOS_EVAL$ = OPERAND.EVAL$;
      395     3967    2           IF TOS_EVAL$ = ADDR(NIL) THEN DO;
      396     3968    2              CALL VDG$OALLOC (%CLS_EVAL, OPERAND.EVAL$)
      397     3969    2                ALTRET (OALLOC_FAILED);
      398     3970    2              TOS_EVAL$ = OPERAND.EVAL$;
      399     3971    2              TOS$EVAL.STATE# = %EVST_INITIAL;
      400     3972    2              END;
      401     3973
      402     3974    1           TOS$EVAL.NODE$ = IT_SELECT$;
      403     3975    2           IF IT_SELECT$ ~= ADDR(NIL) THEN DO;
      404     3976    2              IF IT$SELECT.RPT_ALL THEN
      405     3977    2                 TOS$EVAL.REMAINING# = %MX_REPEAT_COUNT;
      406     3978    2              ELSE
      407     3979    2                 TOS$EVAL.REMAINING# = IT$SELECT.RPT_COUNT#;
      408     3980    2              END;
      409     3981    1           ELSE
      410     3982    1              TOS$EVAL.REMAINING# = 0;
      411     3983
      412     3984    1           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;
      413     3985    1           CALL VDG$OCLEAR_RANGE (TOS$EVAL.ENCLOSING)
      414     3986    1             ALTRET (OCLEAR_RANGE_FAILED);
      415     3987    1           CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, TOS$EVAL.ENCLOSING)
      416     3988    1             ALTRET (OCOPY_RANGE_FAILED);
      417     3989
      418     3990    1           CALL VDG$OCLEAR_RANGE (TOS$EVAL.LAST_FOUND_RANGE)
      419     3991    1             ALTRET (OCLEAR_RANGE_FAILED);
      420     3992
      421     3993    1           RETURN;
      422     3994
      423     3995
      424     3996
      425     3997    1   CANT_EDIT_SCRATCH_FAILURE:
      426     3998    1           CALL VDG$ERRMSG (%E$CANT_EDIT_SCRATCH);
      427     3999
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:13   
      428     4000
      429     4001    1   OCOPY_FAILED: ;
      430     4002    1   OFREE_FAILED: ;
      431     4003    1   UPDATE_OPTIONS_FAILED: ;
      432     4004    1   NEXT_PREV_DOMAIN_FAILED: ;
      433     4005    1   NEW_EDIT_BLOCK_FAILED: ;
      434     4006    1   OALLOC_FAILED: ;
      435     4007    1   OCLEAR_RANGE_FAILED: ;
      436     4008    1   OCOPY_RANGE_FAILED: ;
      437     4009    1           ALTRETURN;
      438     4010
      439     4011        %BOX (TITLE=UPDATE_OPTIONS, PAGE=YES);
              4019    1
              4023    1   /***************************************************************************
              4025    1    *                                                                         *
              4029    1            *                               UPDATE_OPTIONS                            *
              4031    1            *                                                                         *
              4033    1           ***************************************************************************/

      440     4037
      441     4038        /*I* NAME: UPDATE_OPTIONS
      442     4039            PARAMETERS:
      443     4040                None.
      444     4041            INPUT:
      445     4042                IT$BLOCK_EXPR.OPTIONS must contain only those processing
      446     4043                    options which were explicitly given by the user; the
      447     4044                    other fields should be %CLEAR/NIL.
      448     4045                    Also, .DOMAINN should be %CLEAR in order to get here
      449     4046                    at all.
      450     4047                OPERAND.EDIT_BLOCK$ must point to the current EditBlock
      451     4048                    for this operand.  There must be such a block, whose
      452     4049                    .OPTIONS must be completely filled in and valid.
      453     4050                WINDOW_NODE specifies the window whose operand we're opening.
      454     4051            OUTPUT:
      455     4052                IT$BLOCK_EXPR.OPTIONS will be completely filled in.  Any
      456     4053                    missing fields will be filled in from the EDIT$BLOCK's
      457     4054                    options.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:14   
      458     4055        *N*     If the user explicitly gave structure, level, component,
      459     4056        *N*         or protect options, the EditBlock and OPERAND's
      460     4057        *N*         Stream will be updated to reflect the new processing
      461     4058        *N*         status.
      462     4059            DESCRIPTION:
      463     4060        *N*     If the user gave any options, update the EDIT$BLOCK, the
      464     4061        *N*         operand's stream, and the window to reflect the new
      465     4062        *N*         processing status.
      466     4063                If IT$BLOCK_EXPR.OPTIONS has any missing fields, fill them
      467     4064                    in from the EDIT$BLOCK.
      468     4065        */
      469     4066
      470     4067    1   UPDATE_OPTIONS: PROC ALTRET;
      471     4068
      472     4069
      473     4070    2   DCL EDIT_BLOCK$ PTR;
      474     4071
      475     4072
      476     4073        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      477     4220
      478     4221
      479     4222
      480     4223    2           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;
      481     4224
      482     4225    2           IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN
      483     4226    2              IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = EDIT$BLOCK.OPTIONS.STRUCTURE$;
      484     4227    2           ELSE
      485     4228    2              EDIT$BLOCK.OPTIONS.STRUCTURE$ = IT$BLOCK_EXPR.OPTIONS.STRUCTURE$;
      486     4229
      487     4230    2           IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN
      488     4231    2              IT$BLOCK_EXPR.OPTIONS.LEVEL# = EDIT$BLOCK.OPTIONS.LEVEL#;
      489     4232    2           ELSE
      490     4233    2              EDIT$BLOCK.OPTIONS.LEVEL# = IT$BLOCK_EXPR.OPTIONS.LEVEL#;
      491     4234
      492     4235    2           IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN
      493     4236    2              IT$BLOCK_EXPR.OPTIONS.COMPONENT# = EDIT$BLOCK.OPTIONS.COMPONENT#;
      494     4237    2           ELSE
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:15   
      495     4238    2              EDIT$BLOCK.OPTIONS.COMPONENT# = IT$BLOCK_EXPR.OPTIONS.COMPONENT#;
      496     4239
      497     4240    2           IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN
      498     4241    2              IT$BLOCK_EXPR.OPTIONS.PROTECT# = EDIT$BLOCK.OPTIONS.PROTECT#;
      499     4242    2           ELSE
      500     4243    2              EDIT$BLOCK.OPTIONS.PROTECT# = IT$BLOCK_EXPR.OPTIONS.PROTECT#;
      501     4244
      502     4245    2           IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN
      503     4246    2              IT$BLOCK_EXPR.OPTIONS.EXIST# = EDIT$BLOCK.OPTIONS.EXIST#;
      504     4247    2           ELSE
      505     4248    2              EDIT$BLOCK.OPTIONS.EXIST# = IT$BLOCK_EXPR.OPTIONS.EXIST#;
      506     4249
      507     4250    2           IF IT$BLOCK_EXPR.OPTIONS.KEY_INCR = %CLEAR THEN
      508     4251    2              IT$BLOCK_EXPR.OPTIONS.KEY_INCR = EDIT$BLOCK.OPTIONS.KEY_INCR;
      509     4252
      510     4253    2           RETURN;
      511     4254
      512     4255    2   END UPDATE_OPTIONS;
      513     4256
      514     4257        %BOX (TITLE=NEXT_PREV_DOMAIN, PAGE=YES);
              4265    2
              4269    2   /***************************************************************************
              4271    2    *                                                                         *
              4275    2            *                              NEXT_PREV_DOMAIN                           *
              4277    2            *                                                                         *
              4279    2           ***************************************************************************/

      515     4283
      516     4284        /*I* NAME: NEXT_PREV_DOMAIN
      517     4285            PARAMETERS:
      518     4286                None.
      519     4287            INPUT:
      520     4288                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file.
      521     4289                IT$BLOCK_EXPR.DOMAINN.NEXT or .PREVIOUS must be set:
      522     4290                    one or the other.
      523     4291                IT$BLOCK_EXPR.OPTIONS must contain only those processing/access
      524     4292                    options which have been explicitly given by the user.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:16   
      525     4293            OUTPUT:
      526     4294                WINDOW_NODE's VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$ and
      527     4295                    .EVAL$ will be modified:  they'll be the new values
      528     4296                    for the new EditBlock.
      529     4297                    Also, the VD$WINDOW_SPEC.CURR_INDEX# will be incremented
      530     4298                    or decremented.
      531     4299                WINDOW_NODE's children will be mucked with:  the
      532     4300                    VD$WINDOW_BLOCK for the EditBlock at entry will be
      533     4301                    updated with the at-entry values from .OPERAND.
      534     4302                IT$BLOCK_EXPR.DOMAINN will be %CLEARed.
      535     4303                IT$BLOCK_EXPR.OPTIONS - Any missing fields will be filled in
      536     4304                    from the new EditBlock.
      537     4305            DESCRIPTION:
      538     4306                Find the VD$WINDOW_BLOCK for the current EditBlock,
      539     4307                    and the one for the new EditBlock (next or previous).
      540     4308                Clear CURR$BLOCK's pointers, and move the EditBlock and
      541     4309                    evaluation stack from the VD$WINDOW_SPEC to CURR$BLOCK.
      542     4310                Call VDI$PREMOVE_EDIT_BLOCK just to make sure we do all
      543     4311                    the things that need to be done when removing an
      544     4312                    EditBlock (tell the Presenter, etc).
      545     4313                Copy the EditBlock and evaluation stack from NEW$BLOCK to
      546     4314                    the VD$WINDOW_SPEC.  If there is now no EditBlock
      547     4315                    (NEW$BLOCK had nil pointers), this is an error.
      548     4316                    However, after building the error message, proceed
      549     4317                    with the remaining steps; but don't return at the
      550     4318                    end, ALTRETURN.
      551     4319                If there is now an EditBlock, open the window's stream to it.
      552     4320                    If the open fails, remove the EditBlock again, and set up
      553     4321                    to ALTRETURN at the end.
      554     4322                Clear IT$BLOCK_EXPR.DOMAINN, so when/if we copy this InTree
      555     4323                    to the Source operand and try to open it there, we don't
      556     4324                    try doing all this again.
      557     4325        */
      558     4326
      559     4327    1   NEXT_PREV_DOMAIN: PROC ALTRET;
      560     4328
      561     4329
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:17   
      562     4330    2   DCL L2_NODE$ PTR;
      563     4331    2   DCL INDX SBIN;
      564     4332    2   DCL CURR_BLOCK$ PTR;
      565     4333    2   DCL NEW_BLOCK$ PTR;
      566     4334    2   DCL CURR_EVAL$ PTR;
      567     4335    2   DCL NEXT_EVAL$ PTR;
      568     4336
      569     4337
      570     4338        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
      571     4431        %VD$WINDOW_BLOCK (NAME=CURR$BLOCK, STCLASS="BASED(CURR_BLOCK$)");
      572     4468        %VD$WINDOW_BLOCK (NAME=NEW$BLOCK, STCLASS="BASED(NEW_BLOCK$)");
      573     4505        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
      574     4750        %VD$STREAM;
      575     4856        %VD$BLOCK_DESC;
      576     5003        %VD$EVAL;
      577     5248
      578     5249
      579     5250
      580     5251
      581     5252    2           L2_NODE$ = WINDOW_NODE.HEAD$;
      582     5253    2           INDX = 0;
      583     5254    3           DO WHILE L2_NODE$ ~= ADDR(NIL)
      584     5255    3             AND INDX < CURR$WINDOW.CURR_INDEX#;
      585     5256    3              L2_NODE$ = L2$NODE.FLINK$;
      586     5257    3              INDX = INDX + 1;
      587     5258    3              END;
      588     5259
      589     5260    2           IF L2_NODE$ = ADDR(NIL) THEN
      590     5261    2              GOTO NO_NEXT_PREV_EDIT_BL_FAILURE;
      591     5262
      592     5263    2           CURR_BLOCK$ = L2$NODE.DESC.SPEC.V$;
      593     5264
      594     5265    2           IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN
      595     5266    2              L2_NODE$ = L2$NODE.FLINK$;
      596     5267    2           ELSE
      597     5268    2              L2_NODE$ = L2$NODE.BLINK$;
      598     5269    2           IF L2_NODE$ = ADDR(NIL) THEN
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:18   
      599     5270    2              GOTO NO_NEXT_PREV_EDIT_BL_FAILURE;
      600     5271    2           NEW_BLOCK$ = L2$NODE.DESC.SPEC.V$;
      601     5272
      602     5273    3           IF OPERAND$ ~= ADDR(VD_6E.SOURCE.OPERAND) THEN DO;
      603     5274    3              IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN
      604     5275    3                 CURR$WINDOW.CURR_INDEX# = CURR$WINDOW.CURR_INDEX# + 1;
      605     5276    3              ELSE
      606     5277    3                 CURR$WINDOW.CURR_INDEX# = CURR$WINDOW.CURR_INDEX# - 1;
      607     5278
      608     5279    3              CALL VDG$OFREE (CURR$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC)
      609     5280    3                ALTRET (OFREE_FAILED);
      610     5281    3              CURR_EVAL$ = CURR$BLOCK.EVAL$;
      611     5282    4              DO WHILE CURR_EVAL$ ~= ADDR(NIL);
      612     5283    4                 NEXT_EVAL$ = CURR$EVAL.BLINK$;
      613     5284    4                 CALL VDG$OFREE (CURR$EVAL)
      614     5285    4                   ALTRET (OFREE_FAILED);
      615     5286    4                 CURR_EVAL$ = NEXT_EVAL$;
      616     5287    4                 END;
      617     5288
      618     5289    3              CURR$BLOCK.EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;
      619     5290    3              CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);
      620     5291    3              CURR$BLOCK.EVAL$ = CURR$WINDOW.OPERAND.EVAL$;
      621     5292    3              CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);
      622     5293    3              CALL VDI$PREMOVE_EDIT_BLOCK
      623     5294    3                ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      624     5295    3              END;
      625     5296
      626     5297    2           IT$BLOCK_EXPR.DOMAINN = %CLEAR;
      627     5298
      628     5299    3           IF NEW$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
      629     5300    3              CALL VDG$OCOPY (NEW$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC,
      630     5301    3                OPERAND.EDIT_BLOCK$)
      631     5302    3                ALTRET (OCOPY_FAILED);
      632     5303    3              END;
      633     5304    3           ELSE DO;
      634     5305    3              CALL VDG$ERRMSG (%E$NO_CURRENT_EDIT_BLOCK);
      635     5306    3              ALTRETURN;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:19   
      636     5307    3              END;
      637     5308    3           IF NEW$BLOCK.EVAL$ ~= ADDR(NIL) THEN DO;
      638     5309    3              CALL VDG$OCOPY (NEW$BLOCK.EVAL$->VD$EVAL,
      639     5310    3                OPERAND.EVAL$)
      640     5311    3                ALTRET (OCOPY_FAILED);
      641     5312    3              END;
      642     5313
      643     5314    2           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;
      644     5315    2           CALL UPDATE_OPTIONS;
      645     5316
      646     5317    3           IF OPERAND$ ~= ADDR(VD_6E.SOURCE.OPERAND) THEN DO;
      647     5318
      648     5319    3              CALL VDA$FOPEN (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM,
      649     5320    3                EDIT$BLOCK.FILE_KEY, 0, EDIT$BLOCK.OPTIONS)
      650     5321    4              WHENRETURN DO;
      651     5322    4                 IF EDIT$BLOCK.OPTIONS.EXIST# = %EX_NEW THEN
      652     5323    4                    EDIT$BLOCK.OPTIONS.EXIST# = %EX_OLD;
      653     5324    4                 END;
      654     5325    4              WHENALTRETURN DO;
      655     5326    4                 CALL VDI$PREMOVE_EDIT_BLOCK
      656     5327    4                   ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      657     5328    4                 ALTRETURN;
      658     5329    4                 END;
      659     5330    3              END;
      660     5331
      661     5332    2           RETURN;
      662     5333
      663     5334
      664     5335
      665     5336    2   NO_NEXT_PREV_EDIT_BL_FAILURE:
      666     5337    2           IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN
      667     5338    2              CALL VDG$ERRMSG (%E$NO_NEXT_EDIT_BLOCK);
      668     5339    2           ELSE
      669     5340    2              CALL VDG$ERRMSG (%E$NO_PREV_EDIT_BLOCK);
      670     5341    2           IT$BLOCK_EXPR.DOMAINN = %CLEAR;
      671     5342
      672     5343
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:20   
      673     5344    2   OFREE_FAILED: ;
      674     5345    2   PREMOVE_EDIT_BLOCK_FAILED: ;
      675     5346    2   OCOPY_FAILED: ;
      676     5347    2   OALLOC_FAILED: ;
      677     5348    2           ALTRETURN;
      678     5349
      679     5350    2   END NEXT_PREV_DOMAIN;
      680     5351
      681     5352        %BOX (TITLE=NEW_EDIT_BLOCK, PAGE=YES);
              5360    2
              5364    2   /***************************************************************************
              5366    2    *                                                                         *
              5370    2            *                               NEW_EDIT_BLOCK                            *
              5372    2            *                                                                         *
              5374    2           ***************************************************************************/

      682     5378
      683     5379        /*I* NAME: NEW_EDIT_BLOCK
      684     5380            PARAMETERS:
      685     5381                None.
      686     5382            INPUT:
      687     5383                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file.
      688     5384                IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE must be set.
      689     5385            OUTPUT:
      690     5386                WINDOW_NODE's VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$ and
      691     5387                    .EVAL$ will be modified:  they'll be the new values
      692     5388                    for the new EditBlock.
      693     5389                    Also, the VD$WINDOW_SPEC.CURR_INDEX# may be incremented.
      694     5390                WINDOW_NODE's children will be mucked with:  the VD$WINDOW_BLOCK
      695     5391                    for the EditBlock at entry will be updated with the at-entry
      696     5392                    values from .OPERAND.
      697     5393                    Also, any VD$WINDOW_BLOCKs after the current one will be deleted
      698     5394                    from the Windows file.
      699     5395                    If the current VD$WINDOW_BLOCK is occupied (non-NIL .OPERAND),
      700     5396                    a new one will be appended with the new EditBlock specification.
      701     5397                IT$BLOCK_EXPR.DOMAINN will be %CLEARed.
      702     5398            DESCRIPTION:
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:21   
      703     5399                Find the VD$WINDOW_BLOCK for the current EditBlock; there
      704     5400                    must always be a VD$WINDOW_BLOCK, even if there is no
      705     5401                    EditBlock currently.
      706     5402                Delete all VD$WINDOW_BLOCKs after the current one.
      707     5403                Clear CURR$BLOCK's pointers, and move the EditBlock and
      708     5404                    evaluation stack from the VD$WINDOW_SPEC to CURR$BLOCK.
      709     5405                Call VDI$PREMOVE_EDIT_BLOCK just to make sure we do all
      710     5406                    the things that need to be done when removing an
      711     5407                    EditBlock (tell the Presenter, etc).
      712     5408                Open the new EditBlock; if the open fails, we'll remain
      713     5409                    with no current EditBlock (the user can EDIT PREVIOUS
      714     5410                    to get the old one back).
      715     5411                    If the open succeeds, allocate a new EditBlock and VD$EVAL,
      716     5412                    and initialize them to the InTree's new domain.
      717     5413                If the current VD$WINDOW_BLOCK child is occupied, write a new one
      718     5414                    to this window; otherwise, use the current child.
      719     5415                    Save the new EditBlock (or lack thereof) in the new/current child.
      720     5416        */
      721     5417
      722     5418    1   NEW_EDIT_BLOCK: PROC ALTRET;
      723     5419
      724     5420
      725     5421    2   DCL L2_NODE$ PTR;
      726     5422    2   DCL INDX SBIN;
      727     5423    2   DCL CURR_BLOCK$ PTR;
      728     5424    2   DCL CURR_EVAL$ PTR;
      729     5425    2   DCL NEXT_EVAL$ PTR;
      730     5426        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      731     5495    2   DCL OPEN_SUCCEEDED BIT(1) ALIGNED;
      732     5496    2   DCL NEW_CHILD_ALLOCATED BIT(1) ALIGNED;
      733     5497        %VD$SPEC (NAME=WBLOCK_SPEC, STCLASS=AUTO);
      734     5511        %VD$LOCATION (NAME=WBLOCK_LOC, STCLASS=AUTO);
      735     5539
      736     5540
      737     5541        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
      738     5634        %VD$WINDOW_BLOCK (NAME=CURR$BLOCK, STCLASS="BASED(CURR_BLOCK$)");
      739     5671        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:22   
      740     5916        %VD$BLOCK_DESC;
      741     6063        %VD$KEY_NUMBER;
      742     6078        %VD$STREAM;
      743     6184        %VD$EVAL;
      744     6429
      745     6430
      746     6431
      747     6432    2           L2_NODE$ = WINDOW_NODE.HEAD$;
      748     6433    2           INDX = 0;
      749     6434    3           DO WHILE L2_NODE$ ~= ADDR(NIL)
      750     6435    3             AND INDX < CURR$WINDOW.CURR_INDEX#;
      751     6436    3              L2_NODE$ = L2$NODE.FLINK$;
      752     6437    3              INDX = INDX + 1;
      753     6438    3              END;
      754     6439    2           CURR_BLOCK$ = L2$NODE.DESC.SPEC.V$;
      755     6440
      756     6441    2           CALL VDG$OFREE (CURR$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC)
      757     6442    2             ALTRET (OFREE_FAILED);
      758     6443    2           CURR_EVAL$ = CURR$BLOCK.EVAL$;
      759     6444    3           DO WHILE CURR_EVAL$ ~= ADDR(NIL);
      760     6445    3              NEXT_EVAL$ = CURR$EVAL.BLINK$;
      761     6446    3              CALL VDG$OFREE (CURR$EVAL)
      762     6447    3                ALTRET (OFREE_FAILED);
      763     6448    3              CURR_EVAL$ = NEXT_EVAL$;
      764     6449    3              END;
      765     6450
      766     6451    2           CURR$BLOCK.EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;
      767     6452    2           CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);
      768     6453    2           CURR$BLOCK.EVAL$ = CURR$WINDOW.OPERAND.EVAL$;
      769     6454    2           CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);
      770     6455    2           CALL VDI$PREMOVE_EDIT_BLOCK
      771     6456    2             ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      772     6457
      773     6458    2           DEL_RANGE = %CLEAR;
      774     6459    2           DEL_RANGE.START.KEY (%LVL_LOWER-1) = WINDOW_NODE.DESC.KEY;
      775     6460    2           DEL_RANGE.START.KEY (%LVL_LOWER) = L2$NODE.DESC.KEY;
      776     6461    2           ADDR(DEL_RANGE.START.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:23   
      777     6462    2             ADDR(DEL_RANGE.START.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# +
      778     6463    2             1;
      779     6464    2           DEL_RANGE.ENDD = DEL_RANGE.START;
      780     6465    2           ADDR(DEL_RANGE.ENDD.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =
      781     6466    2             %MX_CONSEC_RECORDS;
      782     6467    2           CALL VDA$LDELETE (WINDOWS$STREAM, DEL_RANGE)
      783     6468    2             ALTRET (LDELETE_FAILED);
      784     6469
      785     6470    2           CALL VDA$FOPEN (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM,
      786     6471    2             IT$BLOCK_EXPR.DOMAINN.FILE_KEY, 0, IT$BLOCK_EXPR.OPTIONS)
      787     6472    3           WHENRETURN DO;
      788     6473    3              OPEN_SUCCEEDED = %TRUE;
      789     6474    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_NEW THEN
      790     6475    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD;
      791     6476    3              END;
      792     6477    3           WHENALTRETURN DO;
      793     6478    3              OPEN_SUCCEEDED = %FALSE;
      794     6479    4              IF CURR$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
      795     6480    4                 CALL VDG$INFOMSG (%E$INFO_PUSHED_OLD_EDIT_BLOCK);
      796     6481    4                 END;
      797     6482    3              END;
      798     6483
      799     6484    3           IF OPEN_SUCCEEDED THEN DO;
      800     6485                   %INCREMENT (INDX=%STG_BLOCK_NIN_EDITBLOCK);
      801     6488    3              CALL VDG$OALLOC (%CLS_BLOCK_DESC, CURR$WINDOW.OPERAND.EDIT_BLOCK$)
      802     6489    3                ALTRET (OALLOC_FAILED);
      803     6490    3              EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;
      804     6491    3              EDIT$BLOCK.FILE_KEY = IT$BLOCK_EXPR.DOMAINN.FILE_KEY;
      805     6492    3              EDIT$BLOCK.RANGE = IT$BLOCK_EXPR.DOMAINN.RANGE;
      806     6493    3              IT$BLOCK_EXPR.DOMAINN = %CLEAR;
      807     6494    3              EDIT$BLOCK.OPTIONS = IT$BLOCK_EXPR.OPTIONS;
      808     6495
      809     6496    3              CALL VDG$OALLOC (%CLS_EVAL, CURR$WINDOW.OPERAND.EVAL$)
      810     6497    3                ALTRET (OALLOC_FAILED);
      811     6498    3              CURR_EVAL$ = CURR$WINDOW.OPERAND.EVAL$;
      812     6499    3              CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, CURR$EVAL.ENCLOSING)
      813     6500    3                ALTRET (OCOPY_RANGE_FAILED);
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:24   
      814     6501    3              CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, CURR$EVAL.RANGE)
      815     6502    3                ALTRET (OCOPY_RANGE_FAILED);
      816     6503    3              CURR$EVAL.STATE# = %EVST_INITIAL;
      817     6504    3              END;
      818     6505
      819     6506    2           NEW_CHILD_ALLOCATED = %FALSE;
      820     6507    3           IF CURR$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
      821     6508    3              CALL VDG$OALLOC (%CLS_WINDOW_BLOCK, CURR_BLOCK$)
      822     6509    3                ALTRET (OALLOC_FAILED);
      823     6510    3              NEW_CHILD_ALLOCATED = %TRUE;
      824     6511    3              END;
      825     6512
      826     6513    3           IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;
      827     6514    3              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EDIT_BLOCK$->VD$BLOCK_DESC,
      828     6515    3                CURR$BLOCK.EDIT_BLOCK$)
      829     6516    3                ALTRET (OCOPY_FAILED);
      830     6517    3              END;
      831     6518    3           IF CURR$WINDOW.OPERAND.EVAL$ ~= ADDR(NIL) THEN DO;
      832     6519    3              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EVAL$ -> VD$EVAL,
      833     6520    3                CURR$BLOCK.EVAL$)
      834     6521    3                ALTRET (OCOPY_FAILED);
      835     6522    3              END;
      836     6523
      837     6524    3           IF NEW_CHILD_ALLOCATED THEN DO;
      838     6525    3              WBLOCK_SPEC = %CLEAR;
      839     6526    3              WBLOCK_SPEC.TYPE# = %SPT_WINDOW_BLOCK;
      840     6527    3              WBLOCK_SPEC.REP# = %REP_REMOTE;
      841     6528    3              WBLOCK_SPEC.V$ = CURR_BLOCK$;
      842     6529    3              WBLOCK_LOC = %CLEAR;
      843     6530    3              WBLOCK_LOC.KEY (%LVL_LOWER-1) = WINDOW_NODE.DESC.KEY;
      844     6531    3              WBLOCK_LOC.KEY.TYPE# (%LVL_LOWER) = %KT_NUMBER;
      845     6532    3              WBLOCK_LOC.KEY.REP# (%LVL_LOWER) = %REP_LOCAL;
      846     6533    3              ADDR(WBLOCK_LOC.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.LENGTH# =
      847     6534    3                %NB_NUMERIC_KEY;
      848     6535    3              ADDR(WBLOCK_LOC.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =
      849     6536    3                WINDOW_NODE.COUNT#;     /* Key for new level-2 child */
      850     6537    3              CURR$WINDOW.CURR_INDEX# = WINDOW_NODE.COUNT#;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:25   
      851     6538    3              CALL VDA$LWRITE (WINDOWS$STREAM, WBLOCK_LOC, WBLOCK_SPEC)
      852     6539    3                ALTRET (LWRITE_FAILED);
      853     6540    3              CALL VDA$PFLUSH (WINDOWS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
      854     6541    3                ALTRET (PFLUSH_FAILED);
      855     6542    3              END;
      856     6543
      857     6544    2           IF NOT OPEN_SUCCEEDED THEN
      858     6545    2              ALTRETURN;
      859     6546    2           RETURN;
      860     6547
      861     6548
      862     6549
      863     6550    2   LWRITE_FAILED:
      864     6551    2           CALL VDG$OFREE (CURR$BLOCK)
      865     6552    2             ALTRET (OFREE_FAILED);
      866     6553    2           ALTRETURN;
      867     6554
      868     6555
      869     6556    2   LDELETE_FAILED:
      870     6557                /* Make this a fatal error (which must be first in chain) */
      871     6558    3           IF VD_6E.ERR_TAIL$ ~= VD_6E.ERR_HEAD$ THEN DO;
      872     6559    3              VD$ERR_FIRST = VD$ERR_LAST;
      873     6560    3              VD$ERR_FIRST.FLAGLEV# = %FLV_FATAL;
      874     6561    3              END;
      875     6562    2           ALTRETURN;
      876     6563
      877     6564
      878     6565    2   OFREE_FAILED: ;
      879     6566    2   PREMOVE_EDIT_BLOCK_FAILED: ;
      880     6567    2   PFLUSH_FAILED: ;
      881     6568    2   OALLOC_FAILED: ;
      882     6569    2   OCOPY_RANGE_FAILED: ;
      883     6570    2   OCOPY_LOCATION_FAILED: ;
      884     6571    2   OCOPY_FAILED: ;
      885     6572    2           ALTRETURN;
      886     6573
      887     6574    2   END NEW_EDIT_BLOCK;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:26   
      888     6575
      889     6576    1   END VDE$IOPEN;
      890     6577        %EOD;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:27   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IOPEN.

   Procedure VDE$IOPEN requires 754 words for executable code.
   Procedure VDE$IOPEN requires 54 words of local(AUTO) storage.

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:28   

 Object Unit name= VDE$IOPEN                                  File name= VDE$INTERPRET.:VDA5TOU
 UTS= JUL 04 '97 11:11:05.48 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      4      4  VDE$IOPEN
    1   Proc  even  none   754   1362  VDE$IOPEN
    2  RoData even  none    20     24  VDE$IOPEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        0  VDE$IOPEN
     1     51          yes     yes      Std        0  VDE$IOPEN_SOURCE
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:29   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OCLEAR_RANGE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       2 VDG$OCOPY_RANGE
 yes     yes           Std       0 VDI$PREMOVE_EDIT_BLOCK
 yes     yes           Std       4 VDA$FOPEN
 yes     yes           Std       2 VDA$LDELETE
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       4 VDG$INFOMSG
 yes     yes           Std       2 VDA$PFLUSH
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_CURRENT_WINDOW$                    B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:30   


        1        1        /*M* VDE$INTERPRET - Interpret a window's InTree */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME:  VDE$INTERPRET
       12       12            PURPOSE:  Interpret a window's InTree.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDE$IOPEN
       17       17                Given an editing window, will initialize the window's
       18       18                evaluation stack for the first call to VDE$IRANGE, then open
       19       19                the window's stream to the InTree's domain.
       20       20
       21       21                VDE$IOPEN_SOURCE
       22       22                Version of VDE$IOPEN for opening the source operand.
       23       23                Initializes the source operand for the first call to
       24       24                VDE$IRANGE, except that it doesn't open the stream yet.
       25       25
       26       26                VDE$IRANGE
       27       27                Given an operand whose stream has already been opened to
       28       28                the operand's InTree's domain, VDE$IRANGE will evaluate the
       29       29                InTree, call the Accessor to find the
       30       30                exact record key and position within the record of the
       31       31                start and end bounds of the range, and store that info
       32       32                in the operand's .EVAL.  To perform a
       33       33                repeated operation, the caller should first open the
       34       34                operand to the InTree's domain, then call VDE$IRANGE
       35       35                repeatedly:  VDE$IRANGE will either return a false signal, or
       36       36                will return a true signal and the evaluated range of the InTree.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:31   
       37       37
       38       38                VDE$IADJUST
       39       39                Given an IT_ADJUST InTree node for an operand, will
       40       40                evaluate the children of the IT_ADJUST node and return a
       41       41                spec of the location to which they move the FilePointer,
       42       42                and a signal indicating success or failure of the evaluation.
       43       43
       44       44                VDE$IMOVE_BY_POSITIONS
       45       45                Given an open stream and a number of positions to move from a
       46       46                starting location, will find the location which is that number
       47       47                of existing data-component bytes away from the starting location,
       48       48                moving either forward or backward.
       49       49
       50       50                VDE$IGUAR_RANGE_IN_RANGE
       51       51                Given two two VD$RANGEs, one representing a range to check
       52       52                and the other representing the limits against which to check
       53       53                the first range, guarantee that the first range lies within
       54       54                the second range.  Will truncate the range to make it fit,
       55       55                even to the point of yielding an empty range.
       56       56        */
       57       57
       58       58        /*D* NAME:  VDE$IOPEN
       59       59            INPUT:
       60       60                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file
       61       61                    for the window to open.  Pointed to by VD_CURRENT_WINDOW$.
       62       62                OPERAND - VD$OPERAND to open; must be WINDOW_NODE's
       63       63                        VD$WINDOW_SPEC.OPERAND:
       64       64                    .STREAM$ must be non-NIL, tho the stream need not be
       65       65                        open yet.
       66       66                    .INTREE$ must point to a VD$IT_BLOCK_EXPR:
       67       67                        If .DOMAINN is %CLEAR, this indicates that the domain
       68       68                            of the block expression is the same as OPERAND's
       69       69                            EditBlock.  OPERAND.EDIT_BLOCK$ must not be NIL.
       70       70                            The InTree's .OPTIONS must contain only those
       71       71                            processing/access options explicitly given by
       72       72                            the user.
       73       73                        If .DOMAINN is not %CLEAR, it must specify the new
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:32   
       74       74                            EditBlock for the operand.  .OPERAND.EDIT_BLOCK$
       75       75                            may or may not be NIL.  The InTree's .OPTIONS must
       76       76                            contain a complete set of options, unless
       77       77                            .DOMAINN.NEXT or .PREVIOUS is set, in which case
       78       78                            only the options explicitly given by the user
       79       79                            should be set.
       80       80                    .EVAL$ may or may not be NIL.
       81       81            OUTPUT:
       82       82                If OPERAND's InTree's .DOMAINN was non-%CLEAR, an implicit
       83       83                    EDIT command will have been performed for this operand:
       84       84                    OPERAND.EDIT_BLOCK will have a new block-descriptor value.
       85       85                        However, if any errors are encountered, it will have no
       86       86                        value.
       87       87                    WINDOW_NODE's children will be mucked with:
       88       88                    If .DOMAINN.NEXT and .PREVIOUS are %FALSE, WINDOW_NODE's current
       89       89                        child (VD$WINDOW_BLOCK) will contain WINDOW_NODE's old
       90       90                        .OPERAND; also, if that .OPERAND is non-NIL, a new child will
       91       91                        be allocated for the new EditBlock.
       92       92                    If .DOMAINN.NEXT or .PREVIOUS is set, then the
       93       93                        VD$WINDOW_SPEC.CURR_INDEX# will be incremented or
       94       94                        decremented, as appropriate.
       95       95                OPERAND.EVAL$ will be initialized:
       96       96                    OPERAND.EVAL$ will not be NIL.  It's:
       97       97                    .ENCLOSING will be the range from the (possibly new)
       98       98                        EditBlock.
       99       99                    .RANGE will be either:
      100      100                        New domain:  the start boundary of the new EditBlock.
      101      101                        Old domain:  untouched (and so should be the range of
      102      102                            the last SelectedBlock).
      103      103                    .LAST_FOUND_RANGE will be cleared.
      104      104                    .NODE$ will point to the first IT_SELECT node in the
      105      105                        InTree (if any).
      106      106                    .REMAINING# will be set from that IT_SELECT node's
      107      107                        repeat-count (or 0 if no IT_SELECT node).
      108      108                OPERAND.INTREE$'s .DOMAINN will be %CLEAR.
      109      109                    Also, its .OPTIONS will be filled in, if they aren't
      110      110                    already, from the (possibly new) EditBlock's options.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:33   
      111      111            DESCRIPTION:
      112      112        *N*     If .DOMAINN is %CLEAR, check the IT$BLOCK_EXPR.OPTIONS:
      113      113        *N*     if any are non-0/CLEAR/NIL (ie, explicitly given by user),
      114      114        *N*     update the current EDIT$BLOCK to reflect the change:
      115      115        *N*         If .STRUCTURE$ given, the new Structure's accessor-
      116      116        *N*             structure must be the same as the old Structure's
      117      117        *N*             accessor-structure.
      118      118        *N*         If the level or component options change and
      119      119        *N*             WINDOW_NODE is passed, tell the Presenter to
      120      120        *N*             erase the window (it'll repaint it properly on
      121      121        *N*             the next read).
      122      122        *N*         If the protect option changes, close and reopen the
      123      123        *N*             file.
      124      124        *N*         Ignore existence option changes between ANY and OLD,
      125      125        *N*             but reject an IT$BLOCK_EXPR.OPTION of NEW when
      126      126        *N*             the EDIT$BLOCK shows ANY or OLD.
      127      127                If the InTree's .DOMAINN is non-%CLEAR, then do an
      128      128                implicit EDIT command:
      129      129                    If .DOMAINN.PREVIOUS is set, save WINDOW$SPEC.OPERAND's
      130      130                        current EditBlock and evaluation stack in the
      131      131                        current WindowBlock, decrement the WindowBlock
      132      132                        index, and reload the EditBlock and evaluation
      133      133                        stack from that WindowBlock.
      134      134                    If .DOMAINN.NEXT is set, do analogous actions in the
      135      135                        forward direction.
      136      136                    Else we've got a whole new EditBlock:
      137      137                        Delete any WindowBlock's after the current one.
      138      138                        Save WINDOW$SPEC.OPERAND's current EditBlock and
      139      139                            evaluation stack in the current WindowBlock.
      140      140                        Allocate a new EditBlock, and initialize it to the InTree's
      141      141                            .DOMAINN.
      142      142                        Set WINDOW$SPEC.OPERAND.EVAL$'s .RANGE to the new EditBlock.
      143      143                        If the window's current child is occupied (ie, if the prior
      144      144                            .OPERAND was non-NIL), then write a new child to this
      145      145                            window containing the window's current EditBlock and
      146      146                            evaluation stack.
      147      147                        Else (if the window's current child is unoccupied), save the
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:34   
      148      148                            window's current EditBlock and evaluation stack in the
      149      149                            current child.
      150      150                    Open OPERAND's Stream to the EditBlock's file.
      151      151                Initialize OPERAND.EVAL$ for the first call to VDE$IRANGE.
      152      152                    Set its .ENCLOSING from OPERAND.EDIT_BLOCK$'s range.
      153      153        */
      154      154
      155      155        VDE$IOPEN: PROC ALTRET;

    155  1 000000   000000 700200 xent  VDE$IOPEN    TSX0  ! X66_AUTO_0
         1 000001   000066 000000                    ZERO    54,0

      156      156
      157      157        %INCLUDE VD_MACROS_M;
      158     2372        %INCLUDE VD_PERR_C;
      159     2520
      160     2521
      161     2522        %VD$FILE_NODE (NAME=WINDOW_NODE, STCLASS="BASED(VD_CURRENT_WINDOW$)");
      162     2615        %VD$OPERAND (NAME=OPERAND, STCLASS="BASED(OPERAND$)");
      163     2629
      164     2630
      165     2631        /*
      166     2632        *   Local equates.
      167     2633        */
      168     2634        %EQU SCRATCH_FNAME = CONCAT(FSTCL_INTERNAL, PFK_CONSTANT, DK_SCRATCH);
      169     2635
      170     2636
      171     2637
      172     2638    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      173     2639    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      174     2640    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      175     2641    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
      176     2642    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
      177     2643    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      178     2644    1   DCL VDA$FOPEN           ENTRY (4) ALTRET;
      179     2645    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
      180     2646    1   DCL VDA$LDELETE         ENTRY (2) ALTRET;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:35   
      181     2647    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      182     2648    1   DCL VDI$PREMOVE_EDIT_BLOCK  ENTRY ALTRET;
      183     2649    1   DCL VDG$ESCREECH        ENTRY (3);
      184     2650    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      185     2651    1   DCL VDG$INFOMSG         ENTRY (4) ALTRET;
      186     2652
      187     2653
      188     2654        %VD_6E (STCLASS=SYMREF);
      189     2690    1   DCL VD_CURRENT_WINDOW$ PTR SYMREF;
      190     2691
      191     2692
      192     2693
      193     2694    1   DCL OPERAND$ PTR;
      194     2695    1   DCL CURR_WINDOW$ PTR;
      195     2696    1   DCL IT_BLOCK_EXPR$ PTR;
      196     2697    1   DCL IT_SELECT$ PTR;
      197     2698    1   DCL TOS_EVAL$ PTR;
      198     2699    1   DCL EDIT_BLOCK$ PTR;
      199     2700    1   DCL DOMAIN_KEY$ PTR;
      200     2701    1   DCL VD_ERR$ PTR;
      201     2702
      202     2703
      203     2704        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
      204     2854        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
      205     2891        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
      206     3136        %VD$STREAM (NAME=WINDOWS$STREAM, STCLASS="BASED(VD_6E.WINDOWS$)");
      207     3242        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      208     3389        %VD$FILE_KEY (NAME=DOMAIN$KEY, STCLASS="BASED(DOMAIN_KEY$)");
      209     3438        %VD$TEXTC_REMOTE;
      210     3499        %VD$WINDOW_SPEC (NAME=CURR$WINDOW, STCLASS="BASED(CURR_WINDOW$)");
      211     3565        %VD$ERR (NAME=VD$ERR_LAST, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      212     3618        %VD$ERR (NAME=VD$ERR_FIRST, STCLASS="BASED(VD_6E.ERR_HEAD$)");
      213     3671        %VD$PORT;
      214     3769
      215     3770
      216     3771
      217     3772    1           CURR_WINDOW$ = WINDOW_NODE.DESC.SPEC.V$;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:36   

   3772  1 000002   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000003   000007 236100                    LDQ     7,,PR0
         1 000004   200004 756100                    STQ     CURR_WINDOW$,,AUTO

      218     3773    1           OPERAND$ = ADDR(CURR$WINDOW.OPERAND);

   3773  1 000005   000010 036003                    ADLQ    8,DU
         1 000006   200003 756100                    STQ     OPERAND$,,AUTO

      219     3774    1           IT_BLOCK_EXPR$ = OPERAND.INTREE$;

   3774  1 000007   200003 471500                    LDP1    OPERAND$,,AUTO
         1 000010   100001 236100                    LDQ     1,,PR1
         1 000011   200005 756100                    STQ     IT_BLOCK_EXPR$,,AUTO

      220     3775
      221     3776    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;

   3776  1 000012   200005 473500                    LDP3    IT_BLOCK_EXPR$,,AUTO
         1 000013   000000 106500                    CMPC    fill='000'O
         1 000014   300003 000124                    ADSC9   3,,PR3                   cn=0,n=84
         1 000015   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000016   000023 601000 1                  TNZ     s:3784

      222     3777                   %INCREMENT (INDX=%STG_BLOCK_IN_EDITBLOCK);

   3778  1 000017   000041 054000 xsym               AOS     VD_6E+33

      223     3780    2              CALL UPDATE_OPTIONS

   3780  1 000020   000361 701000 1                  TSX1    UPDATE_OPTIONS
         1 000021   000360 702000 1                  TSX2    OCOPY_FAILED

      224     3781    2                ALTRET (UPDATE_OPTIONS_FAILED);
      225     3782    2              END;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:37   
   3782  1 000022   000050 710000 1                  TRA     s:3806

      226     3783    2           ELSE DO;

      227     3784    2              IF IT$BLOCK_EXPR.DOMAINN.NEXT

   3784  1 000023   300003 234100                    SZN     3,,PR3
         1 000024   000030 604000 1                  TMI     s:3786
         1 000025   300003 236100                    LDQ     3,,PR3
         1 000026   200000 316003                    CANQ    65536,DU
         1 000027   000033 600000 1                  TZE     s:3796

      228     3785    3                OR IT$BLOCK_EXPR.DOMAINN.PREVIOUS THEN DO;

      229     3786    3                 CALL NEXT_PREV_DOMAIN

   3786  1 000030   000437 701000 1                  TSX1    NEXT_PREV_DOMAIN
         1 000031   000360 702000 1                  TSX2    OCOPY_FAILED

      230     3787    3                   ALTRET (NEXT_PREV_DOMAIN_FAILED);
      231     3788    3                 END;

   3788  1 000032   000050 710000 1                  TRA     s:3806

      232     3789    3              ELSE DO;

      233     3790                      /*
      234     3791                      *   If the new domain is a Scratch file, it's an error:
      235     3792                      *     only source blocks can be Scratch files, and source
      236     3793                      *     blocks go through VDE$IOPEN_SOURCE, never VDE$IOPEN.
      237     3794                      *N*  Someday, may want to allow editing scratch files???
      238     3795                      */
      239     3796    3                 DOMAIN_KEY$ = IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$;

   3796  1 000033   300005 236100                    LDQ     5,,PR3
         1 000034   200011 756100                    STQ     DOMAIN_KEY$,,AUTO

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:38   
      240     3797    3                 IF DOMAIN$KEY.UNIQUE.FNAME.LENGTH# >= %LENGTHC(SCRATCH_FNAME)

   3797  1 000035   200011 474500                    LDP4    DOMAIN_KEY$,,AUTO
         1 000036   400004 236100                    LDQ     4,,PR4
         1 000037   000777 376003                    ANQ     511,DU
         1 000040   000016 116003                    CMPQ    14,DU
         1 000041   000046 602000 1                  TNC     s:3801
         1 000042   040000 106500                    CMPC    fill='040'O
         1 000043   400004 400016                    ADSC9   4,,PR4                   cn=2,n=14
         1 000044   000000 000016 0                  ADSC9   0                        cn=0,n=14
         1 000045   000354 600000 1                  TZE     CANT_EDIT_SCRATCH_FAILURE

      241     3798    3                   AND SUBSTR(DOMAIN$KEY.UNIQUE.FNAME.BYTES,
      242     3799    3                   0, %LENGTHC(SCRATCH_FNAME)) = %SCRATCH_FNAME THEN
      243     3800    3                    GOTO CANT_EDIT_SCRATCH_FAILURE;
      244     3801    3                 CALL NEW_EDIT_BLOCK

   3801  1 000046   000717 701000 1                  TSX1    NEW_EDIT_BLOCK
         1 000047   000360 702000 1                  TSX2    OCOPY_FAILED

      245     3802    3                   ALTRET (NEW_EDIT_BLOCK_FAILED);
      246     3803    3                 END;

      247     3804    2              END;

      248     3805
      249     3806    1           GOTO COMMON_FINISH;

   3806  1 000050   000251 710000 1                  TRA     COMMON_FINISH

      250     3807        %EJECT;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:39   
      251     3808        /*D* NAME:  VDE$IOPEN_SOURCE
      252     3809            INPUT:
      253     3810                VD_6E.SOURCE.OPERAND - The VD$OPERAND to open:
      254     3811                    .STREAM$ must be non-NIL, tho the stream need not be
      255     3812                        open yet.
      256     3813                    .INTREE$, .EDIT_BLOCK$, and .EVAL$ may be non-NIL; their
      257     3814                        values at entry are discarded.
      258     3815                VD_CURRENT_WINDOW$ - Ptr to VD$FILE_NODE at level 1 of the
      259     3816                    Windows file, for the current editing window.  In this
      260     3817                    window's VD$WINDOW_SPEC.OPERAND:
      261     3818                    .INTREE$ must point to a VD$IT_BLOCK_EXPR:
      262     3819                        If .DOMAINN is %CLEAR, this indicates that the domain
      263     3820                            of the block expression is the same as OPERAND's
      264     3821                            EditBlock.  OPERAND.EDIT_BLOCK$ must not be NIL.
      265     3822                            The InTree's .OPTIONS must contain only those
      266     3823                            processing/access options explicitly given by
      267     3824                            the user.
      268     3825                        If .DOMAINN is not %CLEAR, it must specify the new
      269     3826                            EditBlock for the operand.  .OPERAND.EDIT_BLOCK$
      270     3827                            may or may not be NIL.  The InTree's .OPTIONS must
      271     3828                            contain a complete set of options, unless
      272     3829                            .DOMAINN.NEXT or .PREVIOUS is set, in which case
      273     3830                            only the options explicitly given by the user
      274     3831                            should be set.
      275     3832                    .EVAL$ may or may not be NIL.
      276     3833            OUTPUT:
      277     3834                VD_6E.SOURCE.OPERAND:
      278     3835                    .INTREE$ will now point to (and "own") the editing window's
      279     3836                        InTree.
      280     3837                    .EDIT_BLOCK$ will point to a new VD$BLOCK_DESC for the
      281     3838                        enclosing block for the source operand.
      282     3839                    .EVAL$ will point to a new VD$EVAL:
      283     3840                        .ENCLOSING will be the range from the (possibly new)
      284     3841                            EditBlock.
      285     3842                        .RANGE will be either:
      286     3843                            New domain:  the start boundary of the new EditBlock.
      287     3844                            Old domain:  untouched (and so should be the range of
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:40   
      288     3845                                the last SelectedBlock).
      289     3846                    .LAST_FOUND_RANGE will be cleared.
      290     3847                        .NODE$ will point to the first IT_SELECT node in the
      291     3848                            InTree (if any).
      292     3849                        .REMAINING# will be set from that IT_SELECT node's
      293     3850                            repeat-count (or 0 if no IT_SELECT node).
      294     3851                    .INTREE$'s .DOMAINN will be %CLEAR.
      295     3852                        Also, its .OPTIONS will be filled in, if they aren't
      296     3853                        already, from the (possibly new) EditBlock's options.
      297     3854                The current editing window's .OPERAND.INTREE$ will be NIL.
      298     3855            DESCRIPTION:
      299     3856                Free the objects currently pointed-to by VD_6E.SOURCE.OPERAND's
      300     3857                    .INTREE$, .EDIT_BLOCK$, and .EVAL$.
      301     3858                Move the InTree from the editing window's .OPERAND to
      302     3859                    VD_6E.SOURCE.OPERAND.
      303     3860                If the InTree's .DOMAINN is clear:
      304     3861                    Copy the editing window's .EDIT_BLOCK$ to VD_6E.SOURCE.
      305     3862                    Copy just the top entry of the editing window's evaluation
      306     3863                        stack (.OPERAND.EVAL$) to VD_6E.SOURCE.
      307     3864        *N*         Check the IT$BLOCK_EXPR.OPTIONS:
      308     3865        *N*         if any are non-0/CLEAR/NIL (ie, explicitly given by user),
      309     3866        *N*         update VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ to reflect the
      310     3867        *N*         change:
      311     3868        *N*             If .STRUCTURE$ given, the new Structure's accessor-
      312     3869        *N*                 structure must be the same as the old Structure's
      313     3870        *N*                 accessor-structure.
      314     3871        *N*             Ignore existence option changes between ANY and OLD,
      315     3872        *N*                 but reject an IT$BLOCK_EXPR.OPTION of NEW when
      316     3873        *N*                 the EDIT$BLOCK shows ANY or OLD.
      317     3874                If the InTree's .DOMAINN is non-%CLEAR, build a new
      318     3875                VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ and .EVAL$:
      319     3876                    If .DOMAINN.NEXT or .PREVIOUS is set, build the new
      320     3877                        EditBlock and .EVAL from the next or previous
      321     3878                        WindowBlock in the editing window's EditBlock stack.
      322     3879                    Else build the new EditBlock from .DOMAINN.FILE_KEY and
      323     3880                        .RANGE, and the new .EVAL from the new EditBlock.
      324     3881                Initialize VD_6E.SOURCE.OPERAND.EVAL$ for the first call to
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:41   
      325     3882                    VDE$IRANGE.  Set its .ENCLOSING from
      326     3883                    VD_6E.SOURCE.OPERAND.EDIT_BLOCK$'s range.
      327     3884        */
      328     3885
      329     3886    1   VDE$IOPEN_SOURCE: ENTRY ALTRET;

   3886  1 000051   000000 700200 xent  VDE$IOPEN_S* TSX0  ! X66_AUTO_0
         1 000052   000066 000000                    ZERO    54,0

      330     3887    1           CURR_WINDOW$ = WINDOW_NODE.DESC.SPEC.V$;

   3887  1 000053   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000054   000007 236100                    LDQ     7,,PR0
         1 000055   200004 756100                    STQ     CURR_WINDOW$,,AUTO

      331     3888    1           OPERAND$ = ADDR(VD_6E.SOURCE.OPERAND);

   3888  1 000056   000000 236000 2                  LDQ     0
         1 000057   200003 756100                    STQ     OPERAND$,,AUTO

      332     3889
      333     3890    1           CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.INTREE$ -> IT$BLOCK_EXPR)

   3890  1 000060   000021 630400 xsym               EPPR0   VD_6E+17
         1 000061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000062   000000 701000 xent               TSX1    VDG$OFREE
         1 000063   000360 702000 1                  TSX2    OCOPY_FAILED

      334     3891    1             ALTRET (OFREE_FAILED);
      335     3892    1           VD_6E.SOURCE.OPERAND.INTREE$ = CURR$WINDOW.OPERAND.INTREE$;

   3892  1 000064   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000065   000011 236100                    LDQ     9,,PR0
         1 000066   000021 756000 xsym               STQ     VD_6E+17

      336     3893    1           IT_BLOCK_EXPR$ = CURR$WINDOW.OPERAND.INTREE$;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:42   
   3893  1 000067   000011 236100                    LDQ     9,,PR0
         1 000070   200005 756100                    STQ     IT_BLOCK_EXPR$,,AUTO

      337     3894    1           CURR$WINDOW.OPERAND.INTREE$ = ADDR(NIL);

   3894  1 000071   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000072   000011 756100                    STQ     9,,PR0

      338     3895
      339     3896    1           CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ -> EDIT$BLOCK)

   3896  1 000073   000022 630400 xsym               EPPR0   VD_6E+18
         1 000074   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000075   000000 701000 xent               TSX1    VDG$OFREE
         1 000076   000360 702000 1                  TSX2    OCOPY_FAILED

      340     3897    1             ALTRET (OFREE_FAILED);
      341     3898    1           VD_6E.SOURCE.OPERAND.EDIT_BLOCK$ = ADDR(NIL);

   3898  1 000077   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000100   000022 756000 xsym               STQ     VD_6E+18

      342     3899
      343     3900    2           DO WHILE VD_6E.SOURCE.OPERAND.EVAL$ ~= ADDR(NIL);

   3900  1 000101   000113 710000 1                  TRA     s:3905

      344     3901    2              TOS_EVAL$ = VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.BLINK$;

   3901  1 000102   000023 470400 xsym               LDP0    VD_6E+19
         1 000103   000001 236100                    LDQ     1,,PR0
         1 000104   200007 756100                    STQ     TOS_EVAL$,,AUTO

      345     3902    2              CALL VDG$OFREE (VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL)

   3902  1 000105   000023 630400 xsym               EPPR0   VD_6E+19
         1 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:43   
         1 000107   000000 701000 xent               TSX1    VDG$OFREE
         1 000110   000360 702000 1                  TSX2    OCOPY_FAILED

      346     3903    2                ALTRET (OFREE_FAILED);
      347     3904    2              VD_6E.SOURCE.OPERAND.EVAL$ = TOS_EVAL$;

   3904  1 000111   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000112   000023 756000 xsym               STQ     VD_6E+19

      348     3905    2              END;

   3905  1 000113   000023 236000 xsym               LDQ     VD_6E+19
         1 000114   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000115   000102 601000 1                  TNZ     s:3901

      349     3906
      350     3907
      351     3908    1           IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD; /* Source must exist */

   3908  1 000116   000002 220003                    LDX0    2,DU
         1 000117   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000120   000032 440100                    SXL0    26,,PR0

      352     3909    2           IF IT$BLOCK_EXPR.DOMAINN = %CLEAR THEN DO;

   3909  1 000121   000000 106500                    CMPC    fill='000'O
         1 000122   000003 000124                    ADSC9   3,,PR0                   cn=0,n=84
         1 000123   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000124   000154 601000 1                  TNZ     s:3921

      353     3910    2              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EDIT_BLOCK$->EDIT$BLOCK,

   3910  1 000125   200004 471500                    LDP1    CURR_WINDOW$,,AUTO
         1 000126   100012 473500                    LDP3    10,,PR1
         1 000127   000001 236000 2                  LDQ     1
         1 000130   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000131   200062 453500                    STP3    WBLOCK_LOC+10,,AUTO
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:44   
         1 000132   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000133   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000134   000000 701000 xent               TSX1    VDG$OCOPY
         1 000135   000360 702000 1                  TSX2    OCOPY_FAILED

      354     3911    2                VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)
      355     3912    2                ALTRET (OCOPY_FAILED);
      356     3913    2              EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;

   3913  1 000136   000022 236000 xsym               LDQ     VD_6E+18
         1 000137   200010 756100                    STQ     EDIT_BLOCK$,,AUTO

      357     3914    2              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EVAL$->TOS$EVAL,

   3914  1 000140   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000141   000013 471500                    LDP1    11,,PR0
         1 000142   000002 236000 2                  LDQ     2
         1 000143   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000144   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 000145   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000146   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000147   000000 701000 xent               TSX1    VDG$OCOPY
         1 000150   000360 702000 1                  TSX2    OCOPY_FAILED

      358     3915    2                VD_6E.SOURCE.OPERAND.EVAL$)
      359     3916    2                ALTRET (OCOPY_FAILED);
      360     3917    2              CALL UPDATE_OPTIONS

   3917  1 000151   000361 701000 1                  TSX1    UPDATE_OPTIONS
         1 000152   000360 702000 1                  TSX2    OCOPY_FAILED

      361     3918    2                ALTRET (UPDATE_OPTIONS_FAILED);
      362     3919    2              END;

   3919  1 000153   000246 710000 1                  TRA     s:3960

      363     3920    2           ELSE DO;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:45   

      364     3921    2              IF IT$BLOCK_EXPR.DOMAINN.NEXT

   3921  1 000154   000003 234100                    SZN     3,,PR0
         1 000155   000161 604000 1                  TMI     s:3923
         1 000156   000003 236100                    LDQ     3,,PR0
         1 000157   200000 316003                    CANQ    65536,DU
         1 000160   000164 600000 1                  TZE     s:3927

      365     3922    3                OR IT$BLOCK_EXPR.DOMAINN.PREVIOUS THEN DO;

      366     3923    3                 CALL NEXT_PREV_DOMAIN

   3923  1 000161   000437 701000 1                  TSX1    NEXT_PREV_DOMAIN
         1 000162   000360 702000 1                  TSX2    OCOPY_FAILED

      367     3924    3                   ALTRET (NEXT_PREV_DOMAIN_FAILED);
      368     3925    3                 END;

   3925  1 000163   000246 710000 1                  TRA     s:3960

      369     3926    3              ELSE DO;

      370     3927    3                 CALL VDG$OALLOC (%CLS_BLOCK_DESC,

   3927  1 000164   000003 630400 2                  EPPR0   3
         1 000165   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000166   000000 701000 xent               TSX1    VDG$OALLOC
         1 000167   000360 702000 1                  TSX2    OCOPY_FAILED

      371     3928    3                   VD_6E.SOURCE.OPERAND.EDIT_BLOCK$)
      372     3929    3                   ALTRET (OALLOC_FAILED);
      373     3930    3                 EDIT_BLOCK$ = VD_6E.SOURCE.OPERAND.EDIT_BLOCK$;

   3930  1 000170   000022 236000 xsym               LDQ     VD_6E+18
         1 000171   200010 756100                    STQ     EDIT_BLOCK$,,AUTO

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:46   
      374     3931    3                 EDIT$BLOCK.FILE_KEY = IT$BLOCK_EXPR.DOMAINN.FILE_KEY;

   3931  1 000172   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000173   200010 471500                    LDP1    EDIT_BLOCK$,,AUTO
         1 000174   000100 100500                    MLR     fill='000'O
         1 000175   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         1 000176   100001 000010                    ADSC9   1,,PR1                   cn=0,n=8

      375     3932    3                 EDIT$BLOCK.RANGE = IT$BLOCK_EXPR.DOMAINN.RANGE;

   3932  1 000177   000100 100500                    MLR     fill='000'O
         1 000200   000006 000110                    ADSC9   6,,PR0                   cn=0,n=72
         1 000201   100003 000110                    ADSC9   3,,PR1                   cn=0,n=72

      376     3933    3                 IT$BLOCK_EXPR.DOMAINN = %CLEAR;

   3933  1 000202   000100 100400                    MLR     fill='000'O
         1 000203   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000204   000003 000124                    ADSC9   3,,PR0                   cn=0,n=84

      377     3934    3                 EDIT$BLOCK.OPTIONS = IT$BLOCK_EXPR.OPTIONS;

   3934  1 000205   000100 100500                    MLR     fill='000'O
         1 000206   000030 000024                    ADSC9   24,,PR0                  cn=0,n=20
         1 000207   100025 000024                    ADSC9   21,,PR1                  cn=0,n=20

      378     3935                      %COPYKEY (FKEY=IT$BLOCK_EXPR.OPTIONS.KEY_INCR,
      379     3936                      TKEY=EDIT$BLOCK.OPTIONS.KEY_INCR);

   3949  1 000210   000100 100500                    MLR     fill='000'O
         1 000211   000033 000010                    ADSC9   27,,PR0                  cn=0,n=8
         1 000212   100030 000010                    ADSC9   24,,PR1                  cn=0,n=8

   3949  1 000213   000033 720100                    LXL0    27,,PR0
         1 000214   000002 100003                    CMPX0   2,DU
         1 000215   000230 601000 1                  TNZ     s:3953

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:47   
   3949  1 000216   000034 473500                    LDP3    28,,PR0
         1 000217   000031 036003                    ADLQ    25,DU
         1 000220   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000221   200062 453500                    STP3    WBLOCK_LOC+10,,AUTO
         1 000222   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000223   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000224   000000 701000 xent               TSX1    VDG$OCOPY
         1 000225   000227 702000 1                  TSX2    s:3950
         1 000226   000230 710000 1                  TRA     s:3953

   3950  1 000227   000000 702200 xent               TSX2  ! X66_AALT

      380     3952
      381     3953    3                 CALL VDG$OALLOC (%CLS_EVAL, VD_6E.SOURCE.OPERAND.EVAL$)

   3953  1 000230   000005 630400 2                  EPPR0   5
         1 000231   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000232   000000 701000 xent               TSX1    VDG$OALLOC
         1 000233   000360 702000 1                  TSX2    OCOPY_FAILED

      382     3954    3                   ALTRET (OALLOC_FAILED);
      383     3955    3                 CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE,

   3955  1 000234   000023 236000 xsym               LDQ     VD_6E+19
         1 000235   000024 036003                    ADLQ    20,DU
         1 000236   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000237   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000240   000003 036003                    ADLQ    3,DU
         1 000241   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 000242   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000243   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000244   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 000245   000360 702000 1                  TSX2    OCOPY_FAILED

      384     3956    3                   VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.RANGE)
      385     3957    3                   ALTRET (OCOPY_RANGE_FAILED);
      386     3958    3                 END;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:48   

      387     3959    2              END;

      388     3960    1           VD_6E.SOURCE.OPERAND.EVAL$ -> TOS$EVAL.STATE# = %EVST_INITIAL;

   3960  1 000246   000001 220003                    LDX0    1,DU
         1 000247   000023 470400 xsym               LDP0    VD_6E+19
         1 000250   000070 740100                    STX0    56,,PR0

   3960  1 000251                       COMMON_FINI* null
      389     3961
      390     3962        %EJECT;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:49   
      391     3963    1   COMMON_FINISH: ;
      392     3964
      393     3965    1           IT_SELECT$ = IT$BLOCK_EXPR.SELECTS$;

   3965  1 000251   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000252   000035 236100                    LDQ     29,,PR0
         1 000253   200006 756100                    STQ     IT_SELECT$,,AUTO

      394     3966    1           TOS_EVAL$ = OPERAND.EVAL$;

   3966  1 000254   200003 471500                    LDP1    OPERAND$,,AUTO
         1 000255   100003 236100                    LDQ     3,,PR1
         1 000256   200007 756100                    STQ     TOS_EVAL$,,AUTO

      395     3967    2           IF TOS_EVAL$ = ADDR(NIL) THEN DO;

   3967  1 000257   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000260   000277 601000 1                  TNZ     s:3974

      396     3968    2              CALL VDG$OALLOC (%CLS_EVAL, OPERAND.EVAL$)

   3968  1 000261   200003 236100                    LDQ     OPERAND$,,AUTO
         1 000262   000003 036003                    ADLQ    3,DU
         1 000263   000005 235000 2                  LDA     5
         1 000264   200062 757100                    STAQ    WBLOCK_LOC+10,,AUTO
         1 000265   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000266   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000267   000000 701000 xent               TSX1    VDG$OALLOC
         1 000270   000360 702000 1                  TSX2    OCOPY_FAILED

      397     3969    2                ALTRET (OALLOC_FAILED);
      398     3970    2              TOS_EVAL$ = OPERAND.EVAL$;

   3970  1 000271   200003 470500                    LDP0    OPERAND$,,AUTO
         1 000272   000003 236100                    LDQ     3,,PR0
         1 000273   200007 756100                    STQ     TOS_EVAL$,,AUTO

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:50   
      399     3971    2              TOS$EVAL.STATE# = %EVST_INITIAL;

   3971  1 000274   000001 220003                    LDX0    1,DU
         1 000275   200007 471500                    LDP1    TOS_EVAL$,,AUTO
         1 000276   100070 740100                    STX0    56,,PR1

      400     3972    2              END;

      401     3973
      402     3974    1           TOS$EVAL.NODE$ = IT_SELECT$;

   3974  1 000277   200006 236100                    LDQ     IT_SELECT$,,AUTO
         1 000300   200007 470500                    LDP0    TOS_EVAL$,,AUTO
         1 000301   000071 756100                    STQ     57,,PR0

      403     3975    2           IF IT_SELECT$ ~= ADDR(NIL) THEN DO;

   3975  1 000302   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000303   000317 600000 1                  TZE     s:3982

      404     3976    2              IF IT$SELECT.RPT_ALL THEN

   3976  1 000304   200006 471500                    LDP1    IT_SELECT$,,AUTO
         1 000305   100003 234100                    SZN     3,,PR1
         1 000306   000312 605000 1                  TPL     s:3979

      405     3977    2                 TOS$EVAL.REMAINING# = %MX_REPEAT_COUNT;

   3977  1 000307   377777 235007                    LDA     131071,DL
         1 000310   000072 755100                    STA     58,,PR0
         1 000311   000320 710000 1                  TRA     s:3984

      406     3978    2              ELSE
      407     3979    2                 TOS$EVAL.REMAINING# = IT$SELECT.RPT_COUNT#;

   3979  1 000312   100003 236100                    LDQ     3,,PR1
         1 000313   000022 736000                    QLS     18
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:51   
         1 000314   000022 732000                    QRS     18
         1 000315   000072 756100                    STQ     58,,PR0

      408     3980    2              END;

   3980  1 000316   000320 710000 1                  TRA     s:3984

      409     3981    1           ELSE
      410     3982    1              TOS$EVAL.REMAINING# = 0;

   3982  1 000317   000072 450100                    STZ     58,,PR0

      411     3983
      412     3984    1           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;

   3984  1 000320   200003 471500                    LDP1    OPERAND$,,AUTO
         1 000321   100002 236100                    LDQ     2,,PR1
         1 000322   200010 756100                    STQ     EDIT_BLOCK$,,AUTO

      413     3985    1           CALL VDG$OCLEAR_RANGE (TOS$EVAL.ENCLOSING)

   3985  1 000323   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000324   000002 036003                    ADLQ    2,DU
         1 000325   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 000326   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000327   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000330   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         1 000331   000360 702000 1                  TSX2    OCOPY_FAILED

      414     3986    1             ALTRET (OCLEAR_RANGE_FAILED);
      415     3987    1           CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, TOS$EVAL.ENCLOSING)

   3987  1 000332   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000333   000002 036003                    ADLQ    2,DU
         1 000334   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000335   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000336   000003 036003                    ADLQ    3,DU
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:52   
         1 000337   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 000340   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000341   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000342   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 000343   000360 702000 1                  TSX2    OCOPY_FAILED

      416     3988    1             ALTRET (OCOPY_RANGE_FAILED);
      417     3989
      418     3990    1           CALL VDG$OCLEAR_RANGE (TOS$EVAL.LAST_FOUND_RANGE)

   3990  1 000344   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000345   000046 036003                    ADLQ    38,DU
         1 000346   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 000347   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000350   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000351   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         1 000352   000360 702000 1                  TSX2    OCOPY_FAILED

      419     3991    1             ALTRET (OCLEAR_RANGE_FAILED);
      420     3992
      421     3993    1           RETURN;

   3993  1 000353   000000 702200 xent               TSX2  ! X66_ARET

      422     3994
      423     3995
      424     3996
      425     3997    1   CANT_EDIT_SCRATCH_FAILURE:
      426     3998    1           CALL VDG$ERRMSG (%E$CANT_EDIT_SCRATCH);

   3998  1 000354   000010 630400 2     CANT_EDIT_S* EPPR0   8
         1 000355   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000356   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000357   000000 011000                    NOP     0

   3998  1 000360                       OCOPY_FAILED null
   3998  1 000360                       OFREE_FAILED null
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:53   
   3998  1 000360                       UPDATE_OPTI* null
   3998  1 000360                       NEXT_PREV_D* null
   3998  1 000360                       NEW_EDIT_BL* null
   3998  1 000360                       OALLOC_FAIL* null
   3998  1 000360                       OCLEAR_RANG* null
   3998  1 000360                       OCOPY_RANGE* null
      427     3999
      428     4000
      429     4001    1   OCOPY_FAILED: ;
      430     4002    1   OFREE_FAILED: ;
      431     4003    1   UPDATE_OPTIONS_FAILED: ;
      432     4004    1   NEXT_PREV_DOMAIN_FAILED: ;
      433     4005    1   NEW_EDIT_BLOCK_FAILED: ;
      434     4006    1   OALLOC_FAILED: ;
      435     4007    1   OCLEAR_RANGE_FAILED: ;
      436     4008    1   OCOPY_RANGE_FAILED: ;
      437     4009    1           ALTRETURN;

   4009  1 000360   000000 702200 xent               TSX2  ! X66_AALT

      438     4010
      439     4011        %BOX (TITLE=UPDATE_OPTIONS, PAGE=YES);
              4019    1
              4023    1   /***************************************************************************
              4025    1    *                                                                         *
              4029    1            *                               UPDATE_OPTIONS                           *
              4031    1            *                                                                        *
              4033    1          ***************************************************************************/

      440     4037
      441     4038        /*I* NAME: UPDATE_OPTIONS
      442     4039            PARAMETERS:
      443     4040                None.
      444     4041            INPUT:
      445     4042                IT$BLOCK_EXPR.OPTIONS must contain only those processing
      446     4043                    options which were explicitly given by the user; the
      447     4044                    other fields should be %CLEAR/NIL.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:54   
      448     4045                    Also, .DOMAINN should be %CLEAR in order to get here
      449     4046                    at all.
      450     4047                OPERAND.EDIT_BLOCK$ must point to the current EditBlock
      451     4048                    for this operand.  There must be such a block, whose
      452     4049                    .OPTIONS must be completely filled in and valid.
      453     4050                WINDOW_NODE specifies the window whose operand we're opening.
      454     4051            OUTPUT:
      455     4052                IT$BLOCK_EXPR.OPTIONS will be completely filled in.  Any
      456     4053                    missing fields will be filled in from the EDIT$BLOCK's
      457     4054                    options.
      458     4055        *N*     If the user explicitly gave structure, level, component,
      459     4056        *N*         or protect options, the EditBlock and OPERAND's
      460     4057        *N*         Stream will be updated to reflect the new processing
      461     4058        *N*         status.
      462     4059            DESCRIPTION:
      463     4060        *N*     If the user gave any options, update the EDIT$BLOCK, the
      464     4061        *N*         operand's stream, and the window to reflect the new
      465     4062        *N*         processing status.
      466     4063                If IT$BLOCK_EXPR.OPTIONS has any missing fields, fill them
      467     4064                    in from the EDIT$BLOCK.
      468     4065        */
      469     4066
      470     4067    1   UPDATE_OPTIONS: PROC ALTRET;

   4067  1 000361   200024 741300       UPDATE_OPTI* STX1  ! DEL_RANGE+2,,AUTO

      471     4068
      472     4069
      473     4070    2   DCL EDIT_BLOCK$ PTR;
      474     4071
      475     4072
      476     4073        %VD$BLOCK_DESC (NAME=EDIT$BLOCK, STCLASS="BASED(EDIT_BLOCK$)");
      477     4220
      478     4221
      479     4222
      480     4223    2           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:55   
   4223  1 000362   200003 470500                    LDP0    OPERAND$,,AUTO
         1 000363   000002 236100                    LDQ     2,,PR0
         1 000364   200025 756100                    STQ     EDIT_BLOCK$,,AUTO

      481     4224
      482     4225    2           IF IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = ADDR(NIL) THEN

   4225  1 000365   200005 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 000366   100030 236100                    LDQ     24,,PR1
         1 000367   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000370   000375 601000 1                  TNZ     s:4228

      483     4226    2              IT$BLOCK_EXPR.OPTIONS.STRUCTURE$ = EDIT$BLOCK.OPTIONS.STRUCTURE$;

   4226  1 000371   200025 473500                    LDP3    EDIT_BLOCK$,,AUTO
         1 000372   300025 236100                    LDQ     21,,PR3
         1 000373   100030 756100                    STQ     24,,PR1
         1 000374   000377 710000 1                  TRA     s:4230

      484     4227    2           ELSE
      485     4228    2              EDIT$BLOCK.OPTIONS.STRUCTURE$ = IT$BLOCK_EXPR.OPTIONS.STRUCTURE$;

   4228  1 000375   200025 473500                    LDP3    EDIT_BLOCK$,,AUTO
         1 000376   300025 756100                    STQ     21,,PR3

      486     4229
      487     4230    2           IF IT$BLOCK_EXPR.OPTIONS.LEVEL# = 0 THEN

   4230  1 000377   100031 220100                    LDX0    25,,PR1
         1 000400   000404 601000 1                  TNZ     s:4233

      488     4231    2              IT$BLOCK_EXPR.OPTIONS.LEVEL# = EDIT$BLOCK.OPTIONS.LEVEL#;

   4231  1 000401   300026 222100                    LDX2    22,,PR3
         1 000402   100031 742100                    STX2    25,,PR1
         1 000403   000405 710000 1                  TRA     s:4235

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:56   
      489     4232    2           ELSE
      490     4233    2              EDIT$BLOCK.OPTIONS.LEVEL# = IT$BLOCK_EXPR.OPTIONS.LEVEL#;

   4233  1 000404   300026 740100                    STX0    22,,PR3

      491     4234
      492     4235    2           IF IT$BLOCK_EXPR.OPTIONS.COMPONENT# = 0 THEN

   4235  1 000405   100031 720100                    LXL0    25,,PR1
         1 000406   000412 601000 1                  TNZ     s:4238

      493     4236    2              IT$BLOCK_EXPR.OPTIONS.COMPONENT# = EDIT$BLOCK.OPTIONS.COMPONENT#;

   4236  1 000407   300026 722100                    LXL2    22,,PR3
         1 000410   100031 442100                    SXL2    25,,PR1
         1 000411   000413 710000 1                  TRA     s:4240

      494     4237    2           ELSE
      495     4238    2              EDIT$BLOCK.OPTIONS.COMPONENT# = IT$BLOCK_EXPR.OPTIONS.COMPONENT#;

   4238  1 000412   300026 440100                    SXL0    22,,PR3

      496     4239
      497     4240    2           IF IT$BLOCK_EXPR.OPTIONS.PROTECT# = 0 THEN

   4240  1 000413   100032 220100                    LDX0    26,,PR1
         1 000414   000420 601000 1                  TNZ     s:4243

      498     4241    2              IT$BLOCK_EXPR.OPTIONS.PROTECT# = EDIT$BLOCK.OPTIONS.PROTECT#;

   4241  1 000415   300027 222100                    LDX2    23,,PR3
         1 000416   100032 742100                    STX2    26,,PR1
         1 000417   000421 710000 1                  TRA     s:4245

      499     4242    2           ELSE
      500     4243    2              EDIT$BLOCK.OPTIONS.PROTECT# = IT$BLOCK_EXPR.OPTIONS.PROTECT#;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:57   
   4243  1 000420   300027 740100                    STX0    23,,PR3

      501     4244
      502     4245    2           IF IT$BLOCK_EXPR.OPTIONS.EXIST# = 0 THEN

   4245  1 000421   100032 720100                    LXL0    26,,PR1
         1 000422   000426 601000 1                  TNZ     s:4248

      503     4246    2              IT$BLOCK_EXPR.OPTIONS.EXIST# = EDIT$BLOCK.OPTIONS.EXIST#;

   4246  1 000423   300027 722100                    LXL2    23,,PR3
         1 000424   100032 442100                    SXL2    26,,PR1
         1 000425   000427 710000 1                  TRA     s:4250

      504     4247    2           ELSE
      505     4248    2              EDIT$BLOCK.OPTIONS.EXIST# = IT$BLOCK_EXPR.OPTIONS.EXIST#;

   4248  1 000426   300027 440100                    SXL0    23,,PR3

      506     4249
      507     4250    2           IF IT$BLOCK_EXPR.OPTIONS.KEY_INCR = %CLEAR THEN

   4250  1 000427   000000 106500                    CMPC    fill='000'O
         1 000430   100033 000010                    ADSC9   27,,PR1                  cn=0,n=8
         1 000431   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000432   000436 601000 1                  TNZ     s:4253

      508     4251    2              IT$BLOCK_EXPR.OPTIONS.KEY_INCR = EDIT$BLOCK.OPTIONS.KEY_INCR;

   4251  1 000433   000100 100500                    MLR     fill='000'O
         1 000434   300030 000010                    ADSC9   24,,PR3                  cn=0,n=8
         1 000435   100033 000010                    ADSC9   27,,PR1                  cn=0,n=8

      509     4252
      510     4253    2           RETURN;

   4253  1 000436   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:58   

      511     4254
      512     4255    2   END UPDATE_OPTIONS;
      513     4256
      514     4257        %BOX (TITLE=NEXT_PREV_DOMAIN, PAGE=YES);
              4265    2
              4269    2   /***************************************************************************
              4271    2    *                                                                         *
              4275    2            *                              NEXT_PREV_DOMAIN                          *
              4277    2            *                                                                        *
              4279    2          ***************************************************************************/

      515     4283
      516     4284        /*I* NAME: NEXT_PREV_DOMAIN
      517     4285            PARAMETERS:
      518     4286                None.
      519     4287            INPUT:
      520     4288                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file.
      521     4289                IT$BLOCK_EXPR.DOMAINN.NEXT or .PREVIOUS must be set:
      522     4290                    one or the other.
      523     4291                IT$BLOCK_EXPR.OPTIONS must contain only those processing/access
      524     4292                    options which have been explicitly given by the user.
      525     4293            OUTPUT:
      526     4294                WINDOW_NODE's VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$ and
      527     4295                    .EVAL$ will be modified:  they'll be the new values
      528     4296                    for the new EditBlock.
      529     4297                    Also, the VD$WINDOW_SPEC.CURR_INDEX# will be incremented
      530     4298                    or decremented.
      531     4299                WINDOW_NODE's children will be mucked with:  the
      532     4300                    VD$WINDOW_BLOCK for the EditBlock at entry will be
      533     4301                    updated with the at-entry values from .OPERAND.
      534     4302                IT$BLOCK_EXPR.DOMAINN will be %CLEARed.
      535     4303                IT$BLOCK_EXPR.OPTIONS - Any missing fields will be filled in
      536     4304                    from the new EditBlock.
      537     4305            DESCRIPTION:
      538     4306                Find the VD$WINDOW_BLOCK for the current EditBlock,
      539     4307                    and the one for the new EditBlock (next or previous).
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:59   
      540     4308                Clear CURR$BLOCK's pointers, and move the EditBlock and
      541     4309                    evaluation stack from the VD$WINDOW_SPEC to CURR$BLOCK.
      542     4310                Call VDI$PREMOVE_EDIT_BLOCK just to make sure we do all
      543     4311                    the things that need to be done when removing an
      544     4312                    EditBlock (tell the Presenter, etc).
      545     4313                Copy the EditBlock and evaluation stack from NEW$BLOCK to
      546     4314                    the VD$WINDOW_SPEC.  If there is now no EditBlock
      547     4315                    (NEW$BLOCK had nil pointers), this is an error.
      548     4316                    However, after building the error message, proceed
      549     4317                    with the remaining steps; but don't return at the
      550     4318                    end, ALTRETURN.
      551     4319                If there is now an EditBlock, open the window's stream to it.
      552     4320                    If the open fails, remove the EditBlock again, and set up
      553     4321                    to ALTRETURN at the end.
      554     4322                Clear IT$BLOCK_EXPR.DOMAINN, so when/if we copy this InTree
      555     4323                    to the Source operand and try to open it there, we don't
      556     4324                    try doing all this again.
      557     4325        */
      558     4326
      559     4327    1   NEXT_PREV_DOMAIN: PROC ALTRET;

   4327  1 000437   200014 741300       NEXT_PREV_D* STX1  ! DOMAIN_KEY$+3,,AUTO

      560     4328
      561     4329
      562     4330    2   DCL L2_NODE$ PTR;
      563     4331    2   DCL INDX SBIN;
      564     4332    2   DCL CURR_BLOCK$ PTR;
      565     4333    2   DCL NEW_BLOCK$ PTR;
      566     4334    2   DCL CURR_EVAL$ PTR;
      567     4335    2   DCL NEXT_EVAL$ PTR;
      568     4336
      569     4337
      570     4338        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
      571     4431        %VD$WINDOW_BLOCK (NAME=CURR$BLOCK, STCLASS="BASED(CURR_BLOCK$)");
      572     4468        %VD$WINDOW_BLOCK (NAME=NEW$BLOCK, STCLASS="BASED(NEW_BLOCK$)");
      573     4505        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:60   
      574     4750        %VD$STREAM;
      575     4856        %VD$BLOCK_DESC;
      576     5003        %VD$EVAL;
      577     5248
      578     5249
      579     5250
      580     5251
      581     5252    2           L2_NODE$ = WINDOW_NODE.HEAD$;

   5252  1 000440   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000441   000012 236100                    LDQ     10,,PR0
         1 000442   200015 756100                    STQ     L2_NODE$,,AUTO

      582     5253    2           INDX = 0;

   5253  1 000443   200016 450100                    STZ     INDX,,AUTO

      583     5254    3           DO WHILE L2_NODE$ ~= ADDR(NIL)

   5254  1 000444   000451 710000 1                  TRA     s:5258

      584     5255    3             AND INDX < CURR$WINDOW.CURR_INDEX#;
      585     5256    3              L2_NODE$ = L2$NODE.FLINK$;

   5256  1 000445   200015 470500                    LDP0    L2_NODE$,,AUTO
         1 000446   000002 236100                    LDQ     2,,PR0
         1 000447   200015 756100                    STQ     L2_NODE$,,AUTO

      586     5257    3              INDX = INDX + 1;

   5257  1 000450   200016 054100                    AOS     INDX,,AUTO

      587     5258    3              END;

   5258  1 000451   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000452   000460 600000 1                  TZE     s:5260
         1 000453   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:61   
         1 000454   000014 236100                    LDQ     12,,PR0
         1 000455   000022 732000                    QRS     18
         1 000456   200016 116100                    CMPQ    INDX,,AUTO
         1 000457   000445 605400 1                  TPNZ    s:5256

      588     5259
      589     5260    2           IF L2_NODE$ = ADDR(NIL) THEN

   5260  1 000460   200015 236100                    LDQ     L2_NODE$,,AUTO
         1 000461   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000462   000675 600000 1                  TZE     NO_NEXT_PREV_EDIT_BL_FAILURE

      590     5261    2              GOTO NO_NEXT_PREV_EDIT_BL_FAILURE;
      591     5262
      592     5263    2           CURR_BLOCK$ = L2$NODE.DESC.SPEC.V$;

   5263  1 000463   200015 470500                    LDP0    L2_NODE$,,AUTO
         1 000464   000007 236100                    LDQ     7,,PR0
         1 000465   200017 756100                    STQ     CURR_BLOCK$,,AUTO

      593     5264
      594     5265    2           IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN

   5265  1 000466   200005 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 000467   100003 234100                    SZN     3,,PR1
         1 000470   000474 605000 1                  TPL     s:5268

      595     5266    2              L2_NODE$ = L2$NODE.FLINK$;

   5266  1 000471   000002 236100                    LDQ     2,,PR0
         1 000472   200015 756100                    STQ     L2_NODE$,,AUTO
         1 000473   000476 710000 1                  TRA     s:5269

      596     5267    2           ELSE
      597     5268    2              L2_NODE$ = L2$NODE.BLINK$;

   5268  1 000474   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:62   
         1 000475   200015 756100                    STQ     L2_NODE$,,AUTO

      598     5269    2           IF L2_NODE$ = ADDR(NIL) THEN

   5269  1 000476   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000477   000675 600000 1                  TZE     NO_NEXT_PREV_EDIT_BL_FAILURE

      599     5270    2              GOTO NO_NEXT_PREV_EDIT_BL_FAILURE;
      600     5271    2           NEW_BLOCK$ = L2$NODE.DESC.SPEC.V$;

   5271  1 000500   200015 470500                    LDP0    L2_NODE$,,AUTO
         1 000501   000007 236100                    LDQ     7,,PR0
         1 000502   200020 756100                    STQ     NEW_BLOCK$,,AUTO

      601     5272
      602     5273    3           IF OPERAND$ ~= ADDR(VD_6E.SOURCE.OPERAND) THEN DO;

   5273  1 000503   000000 236000 2                  LDQ     0
         1 000504   200003 116100                    CMPQ    OPERAND$,,AUTO
         1 000505   000564 600000 1                  TZE     s:5297

      603     5274    3              IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN

   5274  1 000506   100003 234100                    SZN     3,,PR1
         1 000507   000515 605000 1                  TPL     s:5277

      604     5275    3                 CURR$WINDOW.CURR_INDEX# = CURR$WINDOW.CURR_INDEX# + 1;

   5275  1 000510   200004 473500                    LDP3    CURR_WINDOW$,,AUTO
         1 000511   300014 220100                    LDX0    12,,PR3
         1 000512   000001 621010                    EAX1    1,X0
         1 000513   300014 741100                    STX1    12,,PR3
         1 000514   000521 710000 1                  TRA     s:5279

      605     5276    3              ELSE
      606     5277    3                 CURR$WINDOW.CURR_INDEX# = CURR$WINDOW.CURR_INDEX# - 1;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:63   
   5277  1 000515   200004 473500                    LDP3    CURR_WINDOW$,,AUTO
         1 000516   300014 220100                    LDX0    12,,PR3
         1 000517   777777 621010                    EAX1    -1,X0
         1 000520   300014 741100                    STX1    12,,PR3

      607     5278
      608     5279    3              CALL VDG$OFREE (CURR$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC)

   5279  1 000521   200017 474500                    LDP4    CURR_BLOCK$,,AUTO
         1 000522   400003 475500                    LDP5    3,,PR4
         1 000523   200062 455500                    STP5    WBLOCK_LOC+10,,AUTO
         1 000524   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000525   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000526   000000 701000 xent               TSX1    VDG$OFREE
         1 000527   000715 702000 1                  TSX2    OFREE_FAILED

      609     5280    3                ALTRET (OFREE_FAILED);
      610     5281    3              CURR_EVAL$ = CURR$BLOCK.EVAL$;

   5281  1 000530   200017 470500                    LDP0    CURR_BLOCK$,,AUTO
         1 000531   000004 236100                    LDQ     4,,PR0
         1 000532   200021 756100                    STQ     CURR_EVAL$,,AUTO

      611     5282    4              DO WHILE CURR_EVAL$ ~= ADDR(NIL);

   5282  1 000533   000545 710000 1                  TRA     s:5287

      612     5283    4                 NEXT_EVAL$ = CURR$EVAL.BLINK$;

   5283  1 000534   200021 470500                    LDP0    CURR_EVAL$,,AUTO
         1 000535   000001 236100                    LDQ     1,,PR0
         1 000536   200022 756100                    STQ     NEXT_EVAL$,,AUTO

      613     5284    4                 CALL VDG$OFREE (CURR$EVAL)

   5284  1 000537   200021 630500                    EPPR0   CURR_EVAL$,,AUTO
         1 000540   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:64   
         1 000541   000000 701000 xent               TSX1    VDG$OFREE
         1 000542   000715 702000 1                  TSX2    OFREE_FAILED

      614     5285    4                   ALTRET (OFREE_FAILED);
      615     5286    4                 CURR_EVAL$ = NEXT_EVAL$;

   5286  1 000543   200022 236100                    LDQ     NEXT_EVAL$,,AUTO
         1 000544   200021 756100                    STQ     CURR_EVAL$,,AUTO

      616     5287    4                 END;

   5287  1 000545   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000546   000534 601000 1                  TNZ     s:5283

      617     5288
      618     5289    3              CURR$BLOCK.EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;

   5289  1 000547   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000550   000012 236100                    LDQ     10,,PR0
         1 000551   200017 471500                    LDP1    CURR_BLOCK$,,AUTO
         1 000552   100003 756100                    STQ     3,,PR1

      619     5290    3              CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);

   5290  1 000553   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000554   000012 756100                    STQ     10,,PR0

      620     5291    3              CURR$BLOCK.EVAL$ = CURR$WINDOW.OPERAND.EVAL$;

   5291  1 000555   000013 236100                    LDQ     11,,PR0
         1 000556   100004 756100                    STQ     4,,PR1

      621     5292    3              CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);

   5292  1 000557   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000560   000013 756100                    STQ     11,,PR0

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:65   
      622     5293    3              CALL VDI$PREMOVE_EDIT_BLOCK

   5293  1 000561   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000562   000000 701000 xent               TSX1    VDI$PREMOVE_EDIT_BLOCK
         1 000563   000715 702000 1                  TSX2    OFREE_FAILED

      623     5294    3                ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      624     5295    3              END;

      625     5296
      626     5297    2           IT$BLOCK_EXPR.DOMAINN = %CLEAR;

   5297  1 000564   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000565   000100 100400                    MLR     fill='000'O
         1 000566   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000567   000003 000124                    ADSC9   3,,PR0                   cn=0,n=84

      627     5298
      628     5299    3           IF NEW$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   5299  1 000570   200020 471500                    LDP1    NEW_BLOCK$,,AUTO
         1 000571   100003 236100                    LDQ     3,,PR1
         1 000572   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000573   000606 600000 1                  TZE     s:5305

      629     5300    3              CALL VDG$OCOPY (NEW$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC,

   5300  1 000574   100003 473500                    LDP3    3,,PR1
         1 000575   200003 236100                    LDQ     OPERAND$,,AUTO
         1 000576   000002 036003                    ADLQ    2,DU
         1 000577   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000600   200062 453500                    STP3    WBLOCK_LOC+10,,AUTO
         1 000601   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000602   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000603   000000 701000 xent               TSX1    VDG$OCOPY
         1 000604   000715 702000 1                  TSX2    OFREE_FAILED

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:66   
      630     5301    3                OPERAND.EDIT_BLOCK$)
      631     5302    3                ALTRET (OCOPY_FAILED);
      632     5303    3              END;

   5303  1 000605   000614 710000 1                  TRA     s:5308

      633     5304    3           ELSE DO;

      634     5305    3              CALL VDG$ERRMSG (%E$NO_CURRENT_EDIT_BLOCK);

   5305  1 000606   000012 630400 2                  EPPR0   10
         1 000607   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000610   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000611   000000 011000                    NOP     0

      635     5306    3              ALTRETURN;

   5306  1 000612   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 000613   000000 702211                    TSX2  ! 0,X1

      636     5307    3              END;
      637     5308    3           IF NEW$BLOCK.EVAL$ ~= ADDR(NIL) THEN DO;

   5308  1 000614   200020 470500                    LDP0    NEW_BLOCK$,,AUTO
         1 000615   000004 236100                    LDQ     4,,PR0
         1 000616   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000617   000631 600000 1                  TZE     s:5314

      638     5309    3              CALL VDG$OCOPY (NEW$BLOCK.EVAL$->VD$EVAL,

   5309  1 000620   000004 471500                    LDP1    4,,PR0
         1 000621   200003 236100                    LDQ     OPERAND$,,AUTO
         1 000622   000003 036003                    ADLQ    3,DU
         1 000623   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000624   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 000625   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000626   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:67   
         1 000627   000000 701000 xent               TSX1    VDG$OCOPY
         1 000630   000715 702000 1                  TSX2    OFREE_FAILED

      639     5310    3                OPERAND.EVAL$)
      640     5311    3                ALTRET (OCOPY_FAILED);
      641     5312    3              END;

      642     5313
      643     5314    2           EDIT_BLOCK$ = OPERAND.EDIT_BLOCK$;

   5314  1 000631   200003 470500                    LDP0    OPERAND$,,AUTO
         1 000632   000002 236100                    LDQ     2,,PR0
         1 000633   200010 756100                    STQ     EDIT_BLOCK$,,AUTO

      644     5315    2           CALL UPDATE_OPTIONS;

   5315  1 000634   000361 701000 1                  TSX1    UPDATE_OPTIONS
         1 000635   000000 011000                    NOP     0

      645     5316
      646     5317    3           IF OPERAND$ ~= ADDR(VD_6E.SOURCE.OPERAND) THEN DO;

   5317  1 000636   000000 236000 2                  LDQ     0
         1 000637   200003 116100                    CMPQ    OPERAND$,,AUTO
         1 000640   000673 600000 1                  TZE     s:5332

      647     5318
      648     5319    3              CALL VDA$FOPEN (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM,

   5319  1 000641   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000642   000010 471500                    LDP1    8,,PR0
         1 000643   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000644   000025 036003                    ADLQ    21,DU
         1 000645   000013 235000 2                  LDA     11
         1 000646   200064 757100                    STAQ    WBLOCK_LOC+12,,AUTO
         1 000647   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 000650   000001 036003                    ADLQ    1,DU
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:68   
         1 000651   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 000652   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 000653   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000654   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000655   000000 701000 xent               TSX1    VDA$FOPEN
         1 000656   000666 702000 1                  TSX2    s:5326

      649     5320    3                EDIT$BLOCK.FILE_KEY, 0, EDIT$BLOCK.OPTIONS)
      650     5321    4              WHENRETURN DO;

      651     5322    4                 IF EDIT$BLOCK.OPTIONS.EXIST# = %EX_NEW THEN

   5322  1 000657   200010 470500                    LDP0    EDIT_BLOCK$,,AUTO
         1 000660   000027 720100                    LXL0    23,,PR0
         1 000661   000001 100003                    CMPX0   1,DU
         1 000662   000665 601000 1                  TNZ     s:5324

      652     5323    4                    EDIT$BLOCK.OPTIONS.EXIST# = %EX_OLD;

   5323  1 000663   000002 221003                    LDX1    2,DU
         1 000664   000027 441100                    SXL1    23,,PR0

      653     5324    4                 END;

   5324  1 000665   000673 710000 1                  TRA     s:5332

      654     5325    4              WHENALTRETURN DO;

      655     5326    4                 CALL VDI$PREMOVE_EDIT_BLOCK

   5326  1 000666   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000667   000000 701000 xent               TSX1    VDI$PREMOVE_EDIT_BLOCK
         1 000670   000715 702000 1                  TSX2    OFREE_FAILED

      656     5327    4                   ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      657     5328    4                 ALTRETURN;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:69   
   5328  1 000671   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 000672   000000 702211                    TSX2  ! 0,X1

      658     5329    4                 END;
      659     5330    3              END;

      660     5331
      661     5332    2           RETURN;

   5332  1 000673   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 000674   000001 702211                    TSX2  ! 1,X1

      662     5333
      663     5334
      664     5335
      665     5336    2   NO_NEXT_PREV_EDIT_BL_FAILURE:
      666     5337    2           IF IT$BLOCK_EXPR.DOMAINN.NEXT THEN

   5337  1 000675   200005 470500       NO_NEXT_PRE* LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000676   000003 234100                    SZN     3,,PR0
         1 000677   000705 605000 1                  TPL     s:5340

      667     5338    2              CALL VDG$ERRMSG (%E$NO_NEXT_EDIT_BLOCK);

   5338  1 000700   000015 630400 2                  EPPR0   13
         1 000701   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000702   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000703   000000 011000                    NOP     0
         1 000704   000711 710000 1                  TRA     s:5341

      668     5339    2           ELSE
      669     5340    2              CALL VDG$ERRMSG (%E$NO_PREV_EDIT_BLOCK);

   5340  1 000705   000017 630400 2                  EPPR0   15
         1 000706   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000707   000000 701000 xent               TSX1    VDG$ERRMSG
         1 000710   000000 011000                    NOP     0
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:70   

      670     5341    2           IT$BLOCK_EXPR.DOMAINN = %CLEAR;

   5341  1 000711   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 000712   000100 100400                    MLR     fill='000'O
         1 000713   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000714   000003 000124                    ADSC9   3,,PR0                   cn=0,n=84

   5341  1 000715                       OFREE_FAILED null
   5341  1 000715                       PREMOVE_EDI* null
   5341  1 000715                       OCOPY_FAILED null
   5341  1 000715                       OALLOC_FAIL* null
      671     5342
      672     5343
      673     5344    2   OFREE_FAILED: ;
      674     5345    2   PREMOVE_EDIT_BLOCK_FAILED: ;
      675     5346    2   OCOPY_FAILED: ;
      676     5347    2   OALLOC_FAILED: ;
      677     5348    2           ALTRETURN;

   5348  1 000715   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 000716   000000 702211                    TSX2  ! 0,X1

      678     5349
      679     5350    2   END NEXT_PREV_DOMAIN;
      680     5351
      681     5352        %BOX (TITLE=NEW_EDIT_BLOCK, PAGE=YES);
              5360    2
              5364    2   /***************************************************************************
              5366    2    *                                                                         *
              5370    2            *                               NEW_EDIT_BLOCK                           *
              5372    2            *                                                                        *
              5374    2          ***************************************************************************/

      682     5378
      683     5379        /*I* NAME: NEW_EDIT_BLOCK
      684     5380            PARAMETERS:
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:71   
      685     5381                None.
      686     5382            INPUT:
      687     5383                WINDOW_NODE - VD$FILE_NODE at level-1 of the Windows file.
      688     5384                IT$BLOCK_EXPR.DOMAINN.FILE_KEY and .RANGE must be set.
      689     5385            OUTPUT:
      690     5386                WINDOW_NODE's VD$WINDOW_SPEC.OPERAND.EDIT_BLOCK$ and
      691     5387                    .EVAL$ will be modified:  they'll be the new values
      692     5388                    for the new EditBlock.
      693     5389                    Also, the VD$WINDOW_SPEC.CURR_INDEX# may be incremented.
      694     5390                WINDOW_NODE's children will be mucked with:  the VD$WINDOW_BLOCK
      695     5391                    for the EditBlock at entry will be updated with the at-entry
      696     5392                    values from .OPERAND.
      697     5393                    Also, any VD$WINDOW_BLOCKs after the current one will be deleted
      698     5394                    from the Windows file.
      699     5395                    If the current VD$WINDOW_BLOCK is occupied (non-NIL .OPERAND),
      700     5396                    a new one will be appended with the new EditBlock specification.
      701     5397                IT$BLOCK_EXPR.DOMAINN will be %CLEARed.
      702     5398            DESCRIPTION:
      703     5399                Find the VD$WINDOW_BLOCK for the current EditBlock; there
      704     5400                    must always be a VD$WINDOW_BLOCK, even if there is no
      705     5401                    EditBlock currently.
      706     5402                Delete all VD$WINDOW_BLOCKs after the current one.
      707     5403                Clear CURR$BLOCK's pointers, and move the EditBlock and
      708     5404                    evaluation stack from the VD$WINDOW_SPEC to CURR$BLOCK.
      709     5405                Call VDI$PREMOVE_EDIT_BLOCK just to make sure we do all
      710     5406                    the things that need to be done when removing an
      711     5407                    EditBlock (tell the Presenter, etc).
      712     5408                Open the new EditBlock; if the open fails, we'll remain
      713     5409                    with no current EditBlock (the user can EDIT PREVIOUS
      714     5410                    to get the old one back).
      715     5411                    If the open succeeds, allocate a new EditBlock and VD$EVAL,
      716     5412                    and initialize them to the InTree's new domain.
      717     5413                If the current VD$WINDOW_BLOCK child is occupied, write a new one
      718     5414                    to this window; otherwise, use the current child.
      719     5415                    Save the new EditBlock (or lack thereof) in the new/current child.
      720     5416        */
      721     5417
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:72   
      722     5418    1   NEW_EDIT_BLOCK: PROC ALTRET;

   5418  1 000717   200014 741300       NEW_EDIT_BL* STX1  ! DOMAIN_KEY$+3,,AUTO

      723     5419
      724     5420
      725     5421    2   DCL L2_NODE$ PTR;
      726     5422    2   DCL INDX SBIN;
      727     5423    2   DCL CURR_BLOCK$ PTR;
      728     5424    2   DCL CURR_EVAL$ PTR;
      729     5425    2   DCL NEXT_EVAL$ PTR;
      730     5426        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
      731     5495    2   DCL OPEN_SUCCEEDED BIT(1) ALIGNED;
      732     5496    2   DCL NEW_CHILD_ALLOCATED BIT(1) ALIGNED;
      733     5497        %VD$SPEC (NAME=WBLOCK_SPEC, STCLASS=AUTO);
      734     5511        %VD$LOCATION (NAME=WBLOCK_LOC, STCLASS=AUTO);
      735     5539
      736     5540
      737     5541        %VD$FILE_NODE (NAME=L2$NODE, STCLASS="BASED(L2_NODE$)");
      738     5634        %VD$WINDOW_BLOCK (NAME=CURR$BLOCK, STCLASS="BASED(CURR_BLOCK$)");
      739     5671        %VD$EVAL (NAME=CURR$EVAL, STCLASS="BASED(CURR_EVAL$)");
      740     5916        %VD$BLOCK_DESC;
      741     6063        %VD$KEY_NUMBER;
      742     6078        %VD$STREAM;
      743     6184        %VD$EVAL;
      744     6429
      745     6430
      746     6431
      747     6432    2           L2_NODE$ = WINDOW_NODE.HEAD$;

   6432  1 000720   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 000721   000012 236100                    LDQ     10,,PR0
         1 000722   200015 756100                    STQ     L2_NODE$,,AUTO

      748     6433    2           INDX = 0;

   6433  1 000723   200016 450100                    STZ     INDX,,AUTO
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:73   

      749     6434    3           DO WHILE L2_NODE$ ~= ADDR(NIL)

   6434  1 000724   000731 710000 1                  TRA     s:6438

      750     6435    3             AND INDX < CURR$WINDOW.CURR_INDEX#;
      751     6436    3              L2_NODE$ = L2$NODE.FLINK$;

   6436  1 000725   200015 470500                    LDP0    L2_NODE$,,AUTO
         1 000726   000002 236100                    LDQ     2,,PR0
         1 000727   200015 756100                    STQ     L2_NODE$,,AUTO

      752     6437    3              INDX = INDX + 1;

   6437  1 000730   200016 054100                    AOS     INDX,,AUTO

      753     6438    3              END;

   6438  1 000731   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000732   000740 600000 1                  TZE     s:6439
         1 000733   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000734   000014 236100                    LDQ     12,,PR0
         1 000735   000022 732000                    QRS     18
         1 000736   200016 116100                    CMPQ    INDX,,AUTO
         1 000737   000725 605400 1                  TPNZ    s:6436

      754     6439    2           CURR_BLOCK$ = L2$NODE.DESC.SPEC.V$;

   6439  1 000740   200015 470500                    LDP0    L2_NODE$,,AUTO
         1 000741   000007 236100                    LDQ     7,,PR0
         1 000742   200017 756100                    STQ     CURR_BLOCK$,,AUTO

      755     6440
      756     6441    2           CALL VDG$OFREE (CURR$BLOCK.EDIT_BLOCK$->VD$BLOCK_DESC)

   6441  1 000743   200017 471500                    LDP1    CURR_BLOCK$,,AUTO
         1 000744   100003 473500                    LDP3    3,,PR1
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:74   
         1 000745   200062 453500                    STP3    WBLOCK_LOC+10,,AUTO
         1 000746   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 000747   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000750   000000 701000 xent               TSX1    VDG$OFREE
         1 000751   001360 702000 1                  TSX2    OFREE_FAILED

      757     6442    2             ALTRET (OFREE_FAILED);
      758     6443    2           CURR_EVAL$ = CURR$BLOCK.EVAL$;

   6443  1 000752   200017 470500                    LDP0    CURR_BLOCK$,,AUTO
         1 000753   000004 236100                    LDQ     4,,PR0
         1 000754   200020 756100                    STQ     CURR_EVAL$,,AUTO

      759     6444    3           DO WHILE CURR_EVAL$ ~= ADDR(NIL);

   6444  1 000755   000767 710000 1                  TRA     s:6449

      760     6445    3              NEXT_EVAL$ = CURR$EVAL.BLINK$;

   6445  1 000756   200020 470500                    LDP0    CURR_EVAL$,,AUTO
         1 000757   000001 236100                    LDQ     1,,PR0
         1 000760   200021 756100                    STQ     NEXT_EVAL$,,AUTO

      761     6446    3              CALL VDG$OFREE (CURR$EVAL)

   6446  1 000761   200020 630500                    EPPR0   CURR_EVAL$,,AUTO
         1 000762   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000763   000000 701000 xent               TSX1    VDG$OFREE
         1 000764   001360 702000 1                  TSX2    OFREE_FAILED

      762     6447    3                ALTRET (OFREE_FAILED);
      763     6448    3              CURR_EVAL$ = NEXT_EVAL$;

   6448  1 000765   200021 236100                    LDQ     NEXT_EVAL$,,AUTO
         1 000766   200020 756100                    STQ     CURR_EVAL$,,AUTO

      764     6449    3              END;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:75   

   6449  1 000767   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000770   000756 601000 1                  TNZ     s:6445

      765     6450
      766     6451    2           CURR$BLOCK.EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;

   6451  1 000771   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 000772   000012 236100                    LDQ     10,,PR0
         1 000773   200017 471500                    LDP1    CURR_BLOCK$,,AUTO
         1 000774   100003 756100                    STQ     3,,PR1

      767     6452    2           CURR$WINDOW.OPERAND.EDIT_BLOCK$ = ADDR(NIL);

   6452  1 000775   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000776   000012 756100                    STQ     10,,PR0

      768     6453    2           CURR$BLOCK.EVAL$ = CURR$WINDOW.OPERAND.EVAL$;

   6453  1 000777   000013 236100                    LDQ     11,,PR0
         1 001000   200017 471500                    LDP1    CURR_BLOCK$,,AUTO
         1 001001   100004 756100                    STQ     4,,PR1

      769     6454    2           CURR$WINDOW.OPERAND.EVAL$ = ADDR(NIL);

   6454  1 001002   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001003   000013 756100                    STQ     11,,PR0

      770     6455    2           CALL VDI$PREMOVE_EDIT_BLOCK

   6455  1 001004   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 001005   000000 701000 xent               TSX1    VDI$PREMOVE_EDIT_BLOCK
         1 001006   001360 702000 1                  TSX2    OFREE_FAILED

      771     6456    2             ALTRET (PREMOVE_EDIT_BLOCK_FAILED);
      772     6457
      773     6458    2           DEL_RANGE = %CLEAR;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:76   

   6458  1 001007   000100 100400                    MLR     fill='000'O
         1 001010   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001011   200022 000110                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=72

      774     6459    2           DEL_RANGE.START.KEY (%LVL_LOWER-1) = WINDOW_NODE.DESC.KEY;

   6459  1 001012   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 001013   000100 100500                    MLR     fill='000'O
         1 001014   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         1 001015   200022 000010                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=8

      775     6460    2           DEL_RANGE.START.KEY (%LVL_LOWER) = L2$NODE.DESC.KEY;

   6460  1 001016   200015 471500                    LDP1    L2_NODE$,,AUTO
         1 001017   000100 100500                    MLR     fill='000'O
         1 001020   100004 000010                    ADSC9   4,,PR1                   cn=0,n=8
         1 001021   200024 000010                    ADSC9   DEL_RANGE+2,,AUTO        cn=0,n=8

      776     6461    2           ADDR(DEL_RANGE.START.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =

   6461  1 001022   200025 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 001023   000001 036007                    ADLQ    1,DL
         1 001024   200025 552134                    STBQ    EDIT_BLOCK$,'34'O,AUTO

      777     6462    2             ADDR(DEL_RANGE.START.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# +
      778     6463    2             1;
      779     6464    2           DEL_RANGE.ENDD = DEL_RANGE.START;

   6464  1 001025   000100 100500                    MLR     fill='000'O
         1 001026   200022 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 001027   200033 000044                    ADSC9   EDIT_BLOCK$+6,,AUTO      cn=0,n=36

      780     6465    2           ADDR(DEL_RANGE.ENDD.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =

   6465  1 001030   000032 236000 xsym               LDQ     B_VECTNIL+26
         1 001031   200036 552134                    STBQ    EDIT_BLOCK$+9,'34'O,AUTO
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:77   

      781     6466    2             %MX_CONSEC_RECORDS;
      782     6467    2           CALL VDA$LDELETE (WINDOWS$STREAM, DEL_RANGE)

   6467  1 001032   200022 633500                    EPPR3   DEL_RANGE,,AUTO
         1 001033   200063 453500                    STP3    WBLOCK_LOC+11,,AUTO
         1 001034   000006 236000 xsym               LDQ     VD_6E+6
         1 001035   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 001036   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001037   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001040   000000 701000 xent               TSX1    VDA$LDELETE
         1 001041   001343 702000 1                  TSX2    LDELETE_FAILED

      783     6468    2             ALTRET (LDELETE_FAILED);
      784     6469
      785     6470    2           CALL VDA$FOPEN (CURR$WINDOW.OPERAND.STREAM$->VD$STREAM,

   6470  1 001042   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 001043   000010 471500                    LDP1    8,,PR0
         1 001044   200005 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 001045   000030 036003                    ADLQ    24,DU
         1 001046   000013 235000 2                  LDA     11
         1 001047   200064 757100                    STAQ    WBLOCK_LOC+12,,AUTO
         1 001050   200005 236100                    LDQ     IT_BLOCK_EXPR$,,AUTO
         1 001051   000004 036003                    ADLQ    4,DU
         1 001052   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001053   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 001054   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001055   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001056   000000 701000 xent               TSX1    VDA$FOPEN
         1 001057   001071 702000 1                  TSX2    s:6478

      786     6471    2             IT$BLOCK_EXPR.DOMAINN.FILE_KEY, 0, IT$BLOCK_EXPR.OPTIONS)
      787     6472    3           WHENRETURN DO;

      788     6473    3              OPEN_SUCCEEDED = %TRUE;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:78   
   6473  1 001060   400000 236003                    LDQ     -131072,DU
         1 001061   200044 756100                    STQ     OPEN_SUCCEEDED,,AUTO

      789     6474    3              IF IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_NEW THEN

   6474  1 001062   200005 470500                    LDP0    IT_BLOCK_EXPR$,,AUTO
         1 001063   000032 720100                    LXL0    26,,PR0
         1 001064   000001 100003                    CMPX0   1,DU
         1 001065   001070 601000 1                  TNZ     s:6476

      790     6475    3                 IT$BLOCK_EXPR.OPTIONS.EXIST# = %EX_OLD;

   6475  1 001066   000002 221003                    LDX1    2,DU
         1 001067   000032 441100                    SXL1    26,,PR0

      791     6476    3              END;

   6476  1 001070   001102 710000 1                  TRA     s:6484

      792     6477    3           WHENALTRETURN DO;

      793     6478    3              OPEN_SUCCEEDED = %FALSE;

   6478  1 001071   200044 450100                    STZ     OPEN_SUCCEEDED,,AUTO

      794     6479    4              IF CURR$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   6479  1 001072   200017 470500                    LDP0    CURR_BLOCK$,,AUTO
         1 001073   000003 236100                    LDQ     3,,PR0
         1 001074   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001075   001102 600000 1                  TZE     s:6484

      795     6480    4                 CALL VDG$INFOMSG (%E$INFO_PUSHED_OLD_EDIT_BLOCK);

   6480  1 001076   000021 630400 2                  EPPR0   17
         1 001077   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001100   000000 701000 xent               TSX1    VDG$INFOMSG
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:79   
         1 001101   000000 011000                    NOP     0

      796     6481    4                 END;

      797     6482    3              END;

      798     6483
      799     6484    3           IF OPEN_SUCCEEDED THEN DO;

   6484  1 001102   200044 234100                    SZN     OPEN_SUCCEEDED,,AUTO
         1 001103   001177 605000 1                  TPL     s:6506

      800     6485                   %INCREMENT (INDX=%STG_BLOCK_NIN_EDITBLOCK);

   6486  1 001104   000042 054000 xsym               AOS     VD_6E+34

      801     6488    3              CALL VDG$OALLOC (%CLS_BLOCK_DESC, CURR$WINDOW.OPERAND.EDIT_BLOCK$)

   6488  1 001105   200004 236100                    LDQ     CURR_WINDOW$,,AUTO
         1 001106   000012 036003                    ADLQ    10,DU
         1 001107   000003 235000 2                  LDA     3
         1 001110   200062 757100                    STAQ    WBLOCK_LOC+10,,AUTO
         1 001111   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001112   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001113   000000 701000 xent               TSX1    VDG$OALLOC
         1 001114   001360 702000 1                  TSX2    OFREE_FAILED

      802     6489    3                ALTRET (OALLOC_FAILED);
      803     6490    3              EDIT_BLOCK$ = CURR$WINDOW.OPERAND.EDIT_BLOCK$;

   6490  1 001115   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 001116   000012 236100                    LDQ     10,,PR0
         1 001117   200010 756100                    STQ     EDIT_BLOCK$,,AUTO

      804     6491    3              EDIT$BLOCK.FILE_KEY = IT$BLOCK_EXPR.DOMAINN.FILE_KEY;

   6491  1 001120   200005 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:80   
         1 001121   200010 473500                    LDP3    EDIT_BLOCK$,,AUTO
         1 001122   000100 100500                    MLR     fill='000'O
         1 001123   100004 000010                    ADSC9   4,,PR1                   cn=0,n=8
         1 001124   300001 000010                    ADSC9   1,,PR3                   cn=0,n=8

      805     6492    3              EDIT$BLOCK.RANGE = IT$BLOCK_EXPR.DOMAINN.RANGE;

   6492  1 001125   000100 100500                    MLR     fill='000'O
         1 001126   100006 000110                    ADSC9   6,,PR1                   cn=0,n=72
         1 001127   300003 000110                    ADSC9   3,,PR3                   cn=0,n=72

      806     6493    3              IT$BLOCK_EXPR.DOMAINN = %CLEAR;

   6493  1 001130   000100 100400                    MLR     fill='000'O
         1 001131   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001132   100003 000124                    ADSC9   3,,PR1                   cn=0,n=84

      807     6494    3              EDIT$BLOCK.OPTIONS = IT$BLOCK_EXPR.OPTIONS;

   6494  1 001133   000100 100500                    MLR     fill='000'O
         1 001134   100030 000024                    ADSC9   24,,PR1                  cn=0,n=20
         1 001135   300025 000024                    ADSC9   21,,PR3                  cn=0,n=20

      808     6495
      809     6496    3              CALL VDG$OALLOC (%CLS_EVAL, CURR$WINDOW.OPERAND.EVAL$)

   6496  1 001136   200004 236100                    LDQ     CURR_WINDOW$,,AUTO
         1 001137   000013 036003                    ADLQ    11,DU
         1 001140   000005 235000 2                  LDA     5
         1 001141   200062 757100                    STAQ    WBLOCK_LOC+10,,AUTO
         1 001142   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001143   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001144   000000 701000 xent               TSX1    VDG$OALLOC
         1 001145   001360 702000 1                  TSX2    OFREE_FAILED

      810     6497    3                ALTRET (OALLOC_FAILED);
      811     6498    3              CURR_EVAL$ = CURR$WINDOW.OPERAND.EVAL$;
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:81   

   6498  1 001146   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 001147   000013 236100                    LDQ     11,,PR0
         1 001150   200020 756100                    STQ     CURR_EVAL$,,AUTO

      812     6499    3              CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, CURR$EVAL.ENCLOSING)

   6499  1 001151   000002 036003                    ADLQ    2,DU
         1 001152   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001153   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 001154   000003 036003                    ADLQ    3,DU
         1 001155   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 001156   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001157   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001160   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 001161   001360 702000 1                  TSX2    OFREE_FAILED

      813     6500    3                ALTRET (OCOPY_RANGE_FAILED);
      814     6501    3              CALL VDG$OCOPY_RANGE (EDIT$BLOCK.RANGE, CURR$EVAL.RANGE)

   6501  1 001162   200020 236100                    LDQ     CURR_EVAL$,,AUTO
         1 001163   000024 036003                    ADLQ    20,DU
         1 001164   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001165   200010 236100                    LDQ     EDIT_BLOCK$,,AUTO
         1 001166   000003 036003                    ADLQ    3,DU
         1 001167   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 001170   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001171   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001172   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 001173   001360 702000 1                  TSX2    OFREE_FAILED

      815     6502    3                ALTRET (OCOPY_RANGE_FAILED);
      816     6503    3              CURR$EVAL.STATE# = %EVST_INITIAL;

   6503  1 001174   000001 220003                    LDX0    1,DU
         1 001175   200020 470500                    LDP0    CURR_EVAL$,,AUTO
         1 001176   000070 740100                    STX0    56,,PR0
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:82   

      817     6504    3              END;

      818     6505
      819     6506    2           NEW_CHILD_ALLOCATED = %FALSE;

   6506  1 001177   200045 450100                    STZ     NEW_CHILD_ALLOCATED,,AUTO

      820     6507    3           IF CURR$BLOCK.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

   6507  1 001200   200017 470500                    LDP0    CURR_BLOCK$,,AUTO
         1 001201   000003 236100                    LDQ     3,,PR0
         1 001202   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001203   001216 600000 1                  TZE     s:6513

      821     6508    3              CALL VDG$OALLOC (%CLS_WINDOW_BLOCK, CURR_BLOCK$)

   6508  1 001204   200017 631500                    EPPR1   CURR_BLOCK$,,AUTO
         1 001205   200063 451500                    STP1    WBLOCK_LOC+11,,AUTO
         1 001206   000023 236000 2                  LDQ     19
         1 001207   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 001210   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001211   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001212   000000 701000 xent               TSX1    VDG$OALLOC
         1 001213   001360 702000 1                  TSX2    OFREE_FAILED

      822     6509    3                ALTRET (OALLOC_FAILED);
      823     6510    3              NEW_CHILD_ALLOCATED = %TRUE;

   6510  1 001214   400000 236003                    LDQ     -131072,DU
         1 001215   200045 756100                    STQ     NEW_CHILD_ALLOCATED,,AUTO

      824     6511    3              END;

      825     6512
      826     6513    3           IF CURR$WINDOW.OPERAND.EDIT_BLOCK$ ~= ADDR(NIL) THEN DO;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:83   
   6513  1 001216   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 001217   000012 236100                    LDQ     10,,PR0
         1 001220   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001221   001233 600000 1                  TZE     s:6518

      827     6514    3              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EDIT_BLOCK$->VD$BLOCK_DESC,

   6514  1 001222   000012 471500                    LDP1    10,,PR0
         1 001223   200017 236100                    LDQ     CURR_BLOCK$,,AUTO
         1 001224   000003 036003                    ADLQ    3,DU
         1 001225   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001226   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 001227   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001230   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001231   000000 701000 xent               TSX1    VDG$OCOPY
         1 001232   001360 702000 1                  TSX2    OFREE_FAILED

      828     6515    3                CURR$BLOCK.EDIT_BLOCK$)
      829     6516    3                ALTRET (OCOPY_FAILED);
      830     6517    3              END;

      831     6518    3           IF CURR$WINDOW.OPERAND.EVAL$ ~= ADDR(NIL) THEN DO;

   6518  1 001233   200004 470500                    LDP0    CURR_WINDOW$,,AUTO
         1 001234   000013 236100                    LDQ     11,,PR0
         1 001235   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001236   001250 600000 1                  TZE     s:6524

      832     6519    3              CALL VDG$OCOPY (CURR$WINDOW.OPERAND.EVAL$ -> VD$EVAL,

   6519  1 001237   000013 471500                    LDP1    11,,PR0
         1 001240   200017 236100                    LDQ     CURR_BLOCK$,,AUTO
         1 001241   000004 036003                    ADLQ    4,DU
         1 001242   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001243   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 001244   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001245   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:84   
         1 001246   000000 701000 xent               TSX1    VDG$OCOPY
         1 001247   001360 702000 1                  TSX2    OFREE_FAILED

      833     6520    3                CURR$BLOCK.EVAL$)
      834     6521    3                ALTRET (OCOPY_FAILED);
      835     6522    3              END;

      836     6523
      837     6524    3           IF NEW_CHILD_ALLOCATED THEN DO;

   6524  1 001250   200045 234100                    SZN     NEW_CHILD_ALLOCATED,,AUTO
         1 001251   001327 605000 1                  TPL     s:6544

      838     6525    3              WBLOCK_SPEC = %CLEAR;

   6525  1 001252   000000 235003                    LDA     0,DU
         1 001253   000000 236003                    LDQ     0,DU
         1 001254   200046 757100                    STAQ    WBLOCK_SPEC,,AUTO

      839     6526    3              WBLOCK_SPEC.TYPE# = %SPT_WINDOW_BLOCK;

   6526  1 001255   000007 220003                    LDX0    7,DU
         1 001256   200046 740100                    STX0    WBLOCK_SPEC,,AUTO

      840     6527    3              WBLOCK_SPEC.REP# = %REP_REMOTE;

   6527  1 001257   000002 221003                    LDX1    2,DU
         1 001260   200046 441100                    SXL1    WBLOCK_SPEC,,AUTO

      841     6528    3              WBLOCK_SPEC.V$ = CURR_BLOCK$;

   6528  1 001261   200017 236100                    LDQ     CURR_BLOCK$,,AUTO
         1 001262   200047 756100                    STQ     WBLOCK_SPEC+1,,AUTO

      842     6529    3              WBLOCK_LOC = %CLEAR;

   6529  1 001263   000100 100400                    MLR     fill='000'O
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:85   
         1 001264   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001265   200050 000044                    ADSC9   WBLOCK_LOC,,AUTO         cn=0,n=36

      843     6530    3              WBLOCK_LOC.KEY (%LVL_LOWER-1) = WINDOW_NODE.DESC.KEY;

   6530  1 001266   000000 470400 xsym               LDP0    VD_CURRENT_WINDOW$
         1 001267   000100 100500                    MLR     fill='000'O
         1 001270   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         1 001271   200050 000010                    ADSC9   WBLOCK_LOC,,AUTO         cn=0,n=8

      844     6531    3              WBLOCK_LOC.KEY.TYPE# (%LVL_LOWER) = %KT_NUMBER;

   6531  1 001272   000001 222003                    LDX2    1,DU
         1 001273   200052 742100                    STX2    WBLOCK_LOC+2,,AUTO

      845     6532    3              WBLOCK_LOC.KEY.REP# (%LVL_LOWER) = %REP_LOCAL;

   6532  1 001274   200052 442100                    SXL2    WBLOCK_LOC+2,,AUTO

      846     6533    3              ADDR(WBLOCK_LOC.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.LENGTH# =

   6533  1 001275   003000 236003                    LDQ     1536,DU
         1 001276   200053 552140                    STBQ    WBLOCK_LOC+3,'40'O,AUTO

      847     6534    3                %NB_NUMERIC_KEY;
      848     6535    3              ADDR(WBLOCK_LOC.KEY (%LVL_LOWER)) -> VD$KEY_NUMBER.BYTES# =

   6535  1 001277   000014 236100                    LDQ     12,,PR0
         1 001300   200053 552134                    STBQ    WBLOCK_LOC+3,'34'O,AUTO

      849     6536    3                WINDOW_NODE.COUNT#;     /* Key for new level-2 child */
      850     6537    3              CURR$WINDOW.CURR_INDEX# = WINDOW_NODE.COUNT#;

   6537  1 001301   000014 723100                    LXL3    12,,PR0
         1 001302   200004 471500                    LDP1    CURR_WINDOW$,,AUTO
         1 001303   100014 743100                    STX3    12,,PR1

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:86   
      851     6538    3              CALL VDA$LWRITE (WINDOWS$STREAM, WBLOCK_LOC, WBLOCK_SPEC)

   6538  1 001304   200046 633500                    EPPR3   WBLOCK_SPEC,,AUTO
         1 001305   200064 453500                    STP3    WBLOCK_LOC+12,,AUTO
         1 001306   200050 634500                    EPPR4   WBLOCK_LOC,,AUTO
         1 001307   200063 454500                    STP4    WBLOCK_LOC+11,,AUTO
         1 001310   000006 236000 xsym               LDQ     VD_6E+6
         1 001311   200062 756100                    STQ     WBLOCK_LOC+10,,AUTO
         1 001312   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001313   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001314   000000 701000 xent               TSX1    VDA$LWRITE
         1 001315   001335 702000 1                  TSX2    LWRITE_FAILED

      852     6539    3                ALTRET (LWRITE_FAILED);
      853     6540    3              CALL VDA$PFLUSH (WINDOWS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

   6540  1 001316   000006 470400 xsym               LDP0    VD_6E+6
         1 001317   000001 471500                    LDP1    1,,PR0
         1 001320   000013 236000 2                  LDQ     11
         1 001321   200063 756100                    STQ     WBLOCK_LOC+11,,AUTO
         1 001322   200062 451500                    STP1    WBLOCK_LOC+10,,AUTO
         1 001323   200062 630500                    EPPR0   WBLOCK_LOC+10,,AUTO
         1 001324   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001325   000000 701000 xent               TSX1    VDA$PFLUSH
         1 001326   001360 702000 1                  TSX2    OFREE_FAILED

      854     6541    3                ALTRET (PFLUSH_FAILED);
      855     6542    3              END;

      856     6543
      857     6544    2           IF NOT OPEN_SUCCEEDED THEN

   6544  1 001327   200044 234100                    SZN     OPEN_SUCCEEDED,,AUTO
         1 001330   001333 604000 1                  TMI     s:6546

      858     6545    2              ALTRETURN;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:87   
   6545  1 001331   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 001332   000000 702211                    TSX2  ! 0,X1

      859     6546    2           RETURN;

   6546  1 001333   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 001334   000001 702211                    TSX2  ! 1,X1

      860     6547
      861     6548
      862     6549
      863     6550    2   LWRITE_FAILED:
      864     6551    2           CALL VDG$OFREE (CURR$BLOCK)

   6551  1 001335   200017 630500       LWRITE_FAIL* EPPR0   CURR_BLOCK$,,AUTO
         1 001336   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001337   000000 701000 xent               TSX1    VDG$OFREE
         1 001340   001360 702000 1                  TSX2    OFREE_FAILED

      865     6552    2             ALTRET (OFREE_FAILED);
      866     6553    2           ALTRETURN;

   6553  1 001341   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 001342   000000 702211                    TSX2  ! 0,X1

      867     6554
      868     6555
      869     6556    2   LDELETE_FAILED:
      870     6557                /* Make this a fatal error (which must be first in chain) */
      871     6558    3           IF VD_6E.ERR_TAIL$ ~= VD_6E.ERR_HEAD$ THEN DO;

   6558  1 001343   000032 236000 xsym  LDELETE_FAI* LDQ     VD_6E+26
         1 001344   000031 116000 xsym               CMPQ    VD_6E+25
         1 001345   001356 600000 1                  TZE     s:6562

      872     6559    3              VD$ERR_FIRST = VD$ERR_LAST;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:88   
   6559  1 001346   000032 470400 xsym               LDP0    VD_6E+26
         1 001347   000031 471400 xsym               LDP1    VD_6E+25
         1 001350   000100 100500                    MLR     fill='000'O
         1 001351   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20
         1 001352   100000 000024                    ADSC9   0,,PR1                   cn=0,n=20

      873     6560    3              VD$ERR_FIRST.FLAGLEV# = %FLV_FATAL;

   6560  1 001353   000004 220003                    LDX0    4,DU
         1 001354   000031 470400 xsym               LDP0    VD_6E+25
         1 001355   000003 740100                    STX0    3,,PR0

      874     6561    3              END;

      875     6562    2           ALTRETURN;

   6562  1 001356   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 001357   000000 702211                    TSX2  ! 0,X1

   6558  1 001360                       OFREE_FAILED null
   6558  1 001360                       PREMOVE_EDI* null
   6558  1 001360                       PFLUSH_FAIL* null
   6558  1 001360                       OALLOC_FAIL* null
   6558  1 001360                       OCOPY_RANGE* null
   6558  1 001360                       OCOPY_LOCAT* null
   6558  1 001360                       OCOPY_FAILED null
      876     6563
      877     6564
      878     6565    2   OFREE_FAILED: ;
      879     6566    2   PREMOVE_EDIT_BLOCK_FAILED: ;
      880     6567    2   PFLUSH_FAILED: ;
      881     6568    2   OALLOC_FAILED: ;
      882     6569    2   OCOPY_RANGE_FAILED: ;
      883     6570    2   OCOPY_LOCATION_FAILED: ;
      884     6571    2   OCOPY_FAILED: ;
      885     6572    2           ALTRETURN;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:89   
   6572  1 001360   200014 221300                    LDX1  ! DOMAIN_KEY$+3,,AUTO
         1 001361   000000 702211                    TSX2  ! 0,X1
      886     6573
      887     6574    2   END NEW_EDIT_BLOCK;
      888     6575
      889     6576    1   END VDE$IOPEN;
      890     6577        %EOD;

PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:90   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IOPEN.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:91   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    17-0-0/w PTR         r     1 CURR_BLOCK$               17-0-0/w PTR         r     1 CURR_BLOCK$
    21-0-0/w PTR         r     1 CURR_EVAL$                20-0-0/w PTR         r     1 CURR_EVAL$
     4-0-0/w PTR         r     1 CURR_WINDOW$              22-0-0/w STRC(648)   r     1 DEL_RANGE
    11-0-0/w PTR         r     1 DOMAIN_KEY$               10-0-0/w PTR         r     1 EDIT_BLOCK$
    25-0-0/w PTR         r     1 EDIT_BLOCK$               16-0-0/w SBIN        r     1 INDX
    16-0-0/w SBIN        r     1 INDX                       5-0-0/w PTR         r     1 IT_BLOCK_EXPR$
     6-0-0/w PTR         r     1 IT_SELECT$                15-0-0/w PTR         r     1 L2_NODE$
    15-0-0/w PTR         r     1 L2_NODE$                  20-0-0/w PTR         r     1 NEW_BLOCK$
    45-0-0/w BIT         r     1 NEW_CHILD_ALLOCATED       22-0-0/w PTR         r     1 NEXT_EVAL$
    21-0-0/w PTR         r     1 NEXT_EVAL$                44-0-0/w BIT         r     1 OPEN_SUCCEEDED
     3-0-0/w PTR         r     1 OPERAND$                   7-0-0/w PTR         r     1 TOS_EVAL$
    50-0-0/w STRC(324)   r     1 WBLOCK_LOC                46-0-0/w STRC(72)    r     1 WBLOCK_SPEC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w PTR         r     1 VD_CURRENT_WINDOW$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 CURR$BLOCK                 0-0-0/w STRC(180)   r     1 CURR$BLOCK
     0-0-0/w STRC(2124)  r     1 CURR$EVAL                  0-0-0/w STRC(2124)  r     1 CURR$EVAL
     0-0-0/w STRC(900)   r     1 CURR$WINDOW                0-0-0/w STRC(648)   r     1 DOMAIN$KEY
     0-0-0/w STRC(936)   r     1 EDIT$BLOCK                 0-0-0/w STRC(936)   r     1 EDIT$BLOCK
     0-0-0/w STRC(1116)  r     1 IT$BLOCK_EXPR              0-0-0/w STRC(216)   r     1 IT$SELECT
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:92   
     0-0-0/w STRC(468)   r     1 L2$NODE                    0-0-0/w STRC(468)   r     1 L2$NODE
     0-0-0/w STRC(180)   r     1 NEW$BLOCK                  0-0-0/w STRC(144)   r     1 OPERAND
     0-0-0/w STRC(2124)  r     1 TOS$EVAL                   0-0-0/w STRC(936)   r     1 VD$BLOCK_DESC
     0-0-0/w STRC(936)   r     1 VD$BLOCK_DESC              0-0-0/w STRC(180)   r     1 VD$ERR_FIRST
     0-0-0/w STRC(180)   r     1 VD$ERR_LAST                0-0-0/w STRC(2124)  r     1 VD$EVAL
     0-0-0/w STRC(2124)  r     1 VD$EVAL                    0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w STRC(864)   r     1 VD$STREAM
     0-0-0/w STRC(864)   r     1 VD$STREAM                  0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w STRC(864)   r     1 WINDOWS$STREAM             0-0-0/w STRC(468)   r     1 WINDOW_NODE


   Procedure VDE$IOPEN requires 754 words for executable code.
   Procedure VDE$IOPEN requires 54 words of local(AUTO) storage.
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:93   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:94   
          MINI XREF LISTING

CANT_EDIT_SCRATCH_FAILURE
      3998**LABEL    3800--GOTO
COMMON_FINISH
      3960**LABEL    3806--GOTO
CURR$BLOCK IN PROCEDURE NEW_EDIT_BLOCK
      5642**DCL      6551<>CALL
CURR$BLOCK.EDIT_BLOCK$ IN PROCEDURE NEW_EDIT_BLOCK
      5668**DCL      6441>>CALL     6451<<ASSIGN   6479>>IF       6507>>IF       6514<>CALL
CURR$BLOCK.EVAL$ IN PROCEDURE NEW_EDIT_BLOCK
      5668**DCL      6443>>ASSIGN   6453<<ASSIGN   6519<>CALL
CURR$BLOCK.EDIT_BLOCK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4465**DCL      5279>>CALL     5289<<ASSIGN
CURR$BLOCK.EVAL$ IN PROCEDURE NEXT_PREV_DOMAIN
      4465**DCL      5281>>ASSIGN   5291<<ASSIGN
CURR$EVAL IN PROCEDURE NEW_EDIT_BLOCK
      5679**DCL      6446<>CALL
CURR$EVAL.BLINK$ IN PROCEDURE NEW_EDIT_BLOCK
      5705**DCL      6445>>ASSIGN
CURR$EVAL.ENCLOSING IN PROCEDURE NEW_EDIT_BLOCK
      5716**DCL      6499<>CALL
CURR$EVAL.RANGE IN PROCEDURE NEW_EDIT_BLOCK
      5785**DCL      6501<>CALL
CURR$EVAL.STATE# IN PROCEDURE NEW_EDIT_BLOCK
      5913**DCL      6503<<ASSIGN
CURR$EVAL IN PROCEDURE NEXT_PREV_DOMAIN
      4513**DCL      5284<>CALL
CURR$EVAL.BLINK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4539**DCL      5283>>ASSIGN
CURR$WINDOW.CURR_INDEX#
      3550**DCL      5254>>DOWHILE  5275<<ASSIGN   5275>>ASSIGN   5277<<ASSIGN   5277>>ASSIGN   6434>>DOWHILE
      6537<<ASSIGN
CURR$WINDOW.OPERAND
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:95   
      3546**DCL      3773--ASSIGN
CURR$WINDOW.OPERAND.EDIT_BLOCK$
      3548**DCL      3910>>CALL     5289>>ASSIGN   5290<<ASSIGN   6451>>ASSIGN   6452<<ASSIGN   6488<>CALL
      6490>>ASSIGN   6513>>IF       6514>>CALL
CURR$WINDOW.OPERAND.EVAL$
      3548**DCL      3914>>CALL     5291>>ASSIGN   5292<<ASSIGN   6453>>ASSIGN   6454<<ASSIGN   6496<>CALL
      6498>>ASSIGN   6518>>IF       6519>>CALL
CURR$WINDOW.OPERAND.INTREE$
      3548**DCL      3892>>ASSIGN   3893>>ASSIGN   3894<<ASSIGN
CURR$WINDOW.OPERAND.STREAM$
      3548**DCL      5319>>CALL     6470>>CALL
CURR_BLOCK$ IN PROCEDURE NEW_EDIT_BLOCK
      5423**DCL      5642--IMP-PTR  6439<<ASSIGN   6441>>CALL     6443>>ASSIGN   6451>>ASSIGN   6453>>ASSIGN
      6479>>IF       6507>>IF       6508<>CALL     6514>>CALL     6519>>CALL     6528>>ASSIGN   6551>>CALL
CURR_BLOCK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4332**DCL      4439--IMP-PTR  5263<<ASSIGN   5279>>CALL     5281>>ASSIGN   5289>>ASSIGN   5291>>ASSIGN
CURR_EVAL$ IN PROCEDURE NEW_EDIT_BLOCK
      5424**DCL      5679--IMP-PTR  6443<<ASSIGN   6444>>DOWHILE  6445>>ASSIGN   6446>>CALL     6448<<ASSIGN
      6498<<ASSIGN   6499>>CALL     6501>>CALL     6503>>ASSIGN
CURR_EVAL$ IN PROCEDURE NEXT_PREV_DOMAIN
      4334**DCL      4513--IMP-PTR  5281<<ASSIGN   5282>>DOWHILE  5283>>ASSIGN   5284>>CALL     5286<<ASSIGN
CURR_WINDOW$
      2695**DCL      3507--IMP-PTR  3772<<ASSIGN   3773>>ASSIGN   3887<<ASSIGN   3892>>ASSIGN   3893>>ASSIGN
      3894>>ASSIGN   3910>>CALL     3914>>CALL     5254>>DOWHILE  5275>>ASSIGN   5275>>ASSIGN   5277>>ASSIGN
      5277>>ASSIGN   5289>>ASSIGN   5290>>ASSIGN   5291>>ASSIGN   5292>>ASSIGN   5319>>CALL     6434>>DOWHILE
      6451>>ASSIGN   6452>>ASSIGN   6453>>ASSIGN   6454>>ASSIGN   6470>>CALL     6488>>CALL     6490>>ASSIGN
      6496>>CALL     6498>>ASSIGN   6513>>IF       6514>>CALL     6518>>IF       6519>>CALL     6537>>ASSIGN
DEL_RANGE IN PROCEDURE NEW_EDIT_BLOCK
      5434**DCL      6458<<ASSIGN   6467<>CALL
DEL_RANGE.ENDD IN PROCEDURE NEW_EDIT_BLOCK
      5476**DCL      6464<<ASSIGN
DEL_RANGE.ENDD.KEY IN PROCEDURE NEW_EDIT_BLOCK
      5488**DCL      6465--ASSIGN
DEL_RANGE.START IN PROCEDURE NEW_EDIT_BLOCK
      5448**DCL      6464>>ASSIGN
DEL_RANGE.START.KEY IN PROCEDURE NEW_EDIT_BLOCK
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:96   
      5460**DCL      6459<<ASSIGN   6460<<ASSIGN   6461--ASSIGN   6461--ASSIGN
DOMAIN$KEY.UNIQUE.FNAME.BYTES
      3434**DCL      3797>>IF
DOMAIN$KEY.UNIQUE.FNAME.LENGTH#
      3433**DCL      3797>>IF
DOMAIN_KEY$
      2700**DCL      3405--IMP-PTR  3796<<ASSIGN   3797>>IF       3797>>IF
EDIT$BLOCK
      3250**DCL      3896<>CALL     3910<>CALL
EDIT$BLOCK.FILE_KEY
      3286**DCL      3931<<ASSIGN   5319<>CALL     6491<<ASSIGN
EDIT$BLOCK.OPTIONS
      3369**DCL      3934<<ASSIGN   5319<>CALL     6494<<ASSIGN
EDIT$BLOCK.OPTIONS.EXIST#
      3372**DCL      5322>>IF       5323<<ASSIGN
EDIT$BLOCK.OPTIONS.KEY_INCR
      3383**DCL      3949<<ASSIGN
EDIT$BLOCK.OPTIONS.KEY_INCR.V$
      3385**DCL      3949<>CALL
EDIT$BLOCK.RANGE
      3300**DCL      3932<<ASSIGN   3955<>CALL     3987<>CALL     6492<<ASSIGN   6499<>CALL     6501<>CALL
EDIT$BLOCK.OPTIONS.COMPONENT# IN PROCEDURE UPDATE_OPTIONS
      4202**DCL      4236>>ASSIGN   4238<<ASSIGN
EDIT$BLOCK.OPTIONS.EXIST# IN PROCEDURE UPDATE_OPTIONS
      4203**DCL      4246>>ASSIGN   4248<<ASSIGN
EDIT$BLOCK.OPTIONS.KEY_INCR IN PROCEDURE UPDATE_OPTIONS
      4214**DCL      4251>>ASSIGN
EDIT$BLOCK.OPTIONS.LEVEL# IN PROCEDURE UPDATE_OPTIONS
      4202**DCL      4231>>ASSIGN   4233<<ASSIGN
EDIT$BLOCK.OPTIONS.PROTECT# IN PROCEDURE UPDATE_OPTIONS
      4202**DCL      4241>>ASSIGN   4243<<ASSIGN
EDIT$BLOCK.OPTIONS.STRUCTURE$ IN PROCEDURE UPDATE_OPTIONS
      4202**DCL      4226>>ASSIGN   4228<<ASSIGN
EDIT_BLOCK$
      2699**DCL      3250--IMP-PTR  3913<<ASSIGN   3930<<ASSIGN   3931>>ASSIGN   3932>>ASSIGN   3934>>ASSIGN
      3949>>ASSIGN   3949>>CALL     3955>>CALL     3984<<ASSIGN   3987>>CALL     5314<<ASSIGN   5319>>CALL
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:97   
      5319>>CALL     5322>>IF       5323>>ASSIGN   6490<<ASSIGN   6491>>ASSIGN   6492>>ASSIGN   6494>>ASSIGN
      6499>>CALL     6501>>CALL
EDIT_BLOCK$ IN PROCEDURE UPDATE_OPTIONS
      4070**DCL      4081--IMP-PTR  4223<<ASSIGN   4226>>ASSIGN   4228>>ASSIGN   4231>>ASSIGN   4233>>ASSIGN
      4236>>ASSIGN   4238>>ASSIGN   4241>>ASSIGN   4243>>ASSIGN   4246>>ASSIGN   4248>>ASSIGN   4251>>ASSIGN
INDX IN PROCEDURE NEW_EDIT_BLOCK
      5422**DCL      6433<<ASSIGN   6434>>DOWHILE  6437<<ASSIGN   6437>>ASSIGN
INDX IN PROCEDURE NEXT_PREV_DOMAIN
      4331**DCL      5253<<ASSIGN   5254>>DOWHILE  5257<<ASSIGN   5257>>ASSIGN
IT$BLOCK_EXPR
      2712**DCL      3890<>CALL
IT$BLOCK_EXPR.DOMAINN
      2738**DCL      3776>>IF       3909>>IF       3933<<ASSIGN   5297<<ASSIGN   5341<<ASSIGN   6493<<ASSIGN
IT$BLOCK_EXPR.DOMAINN.FILE_KEY
      2750**DCL      3931>>ASSIGN   6470<>CALL     6491>>ASSIGN
IT$BLOCK_EXPR.DOMAINN.FILE_KEY.V$
      2752**DCL      3796>>ASSIGN
IT$BLOCK_EXPR.DOMAINN.NEXT
      2738**DCL      3784>>IF       3921>>IF       5265>>IF       5274>>IF       5337>>IF
IT$BLOCK_EXPR.DOMAINN.PREVIOUS
      2738**DCL      3784>>IF       3921>>IF
IT$BLOCK_EXPR.DOMAINN.RANGE
      2764**DCL      3932>>ASSIGN   6492>>ASSIGN
IT$BLOCK_EXPR.OPTIONS
      2833**DCL      3934>>ASSIGN   6470<>CALL     6494>>ASSIGN
IT$BLOCK_EXPR.OPTIONS.COMPONENT#
      2835**DCL      4235>>IF       4236<<ASSIGN   4238>>ASSIGN
IT$BLOCK_EXPR.OPTIONS.EXIST#
      2836**DCL      3908<<ASSIGN   4245>>IF       4246<<ASSIGN   4248>>ASSIGN   6474>>IF       6475<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.KEY_INCR
      2847**DCL      3949>>ASSIGN   4250>>IF       4251<<ASSIGN
IT$BLOCK_EXPR.OPTIONS.KEY_INCR.REP#
      2849**DCL      3949>>IF
IT$BLOCK_EXPR.OPTIONS.KEY_INCR.V$
      2849**DCL      3949>>CALL     3949>>CALL
IT$BLOCK_EXPR.OPTIONS.LEVEL#
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:98   
      2835**DCL      4230>>IF       4231<<ASSIGN   4233>>ASSIGN
IT$BLOCK_EXPR.OPTIONS.PROTECT#
      2835**DCL      4240>>IF       4241<<ASSIGN   4243>>ASSIGN
IT$BLOCK_EXPR.OPTIONS.STRUCTURE$
      2835**DCL      4225>>IF       4226<<ASSIGN   4228>>ASSIGN
IT$BLOCK_EXPR.SELECTS$
      2852**DCL      3965>>ASSIGN
IT$SELECT.RPT_ALL
      2888**DCL      3976>>IF
IT$SELECT.RPT_COUNT#
      2888**DCL      3979>>ASSIGN
IT_BLOCK_EXPR$
      2696**DCL      2712--IMP-PTR  3774<<ASSIGN   3776>>IF       3784>>IF       3784>>IF       3796>>ASSIGN
      3893<<ASSIGN   3908>>ASSIGN   3909>>IF       3921>>IF       3921>>IF       3931>>ASSIGN   3932>>ASSIGN
      3933>>ASSIGN   3934>>ASSIGN   3949>>ASSIGN   3949>>IF       3949>>CALL     3949>>CALL     3965>>ASSIGN
      4225>>IF       4226>>ASSIGN   4228>>ASSIGN   4230>>IF       4231>>ASSIGN   4233>>ASSIGN   4235>>IF
      4236>>ASSIGN   4238>>ASSIGN   4240>>IF       4241>>ASSIGN   4243>>ASSIGN   4245>>IF       4246>>ASSIGN
      4248>>ASSIGN   4250>>IF       4251>>ASSIGN   5265>>IF       5274>>IF       5297>>ASSIGN   5337>>IF
      5341>>ASSIGN   6470>>CALL     6470>>CALL     6474>>IF       6475>>ASSIGN   6491>>ASSIGN   6492>>ASSIGN
      6493>>ASSIGN   6494>>ASSIGN
IT_SELECT$
      2697**DCL      2862--IMP-PTR  3965<<ASSIGN   3974>>ASSIGN   3975>>IF       3976>>IF       3979>>ASSIGN
L2$NODE.DESC.KEY IN PROCEDURE NEW_EDIT_BLOCK
      5612**DCL      6460>>ASSIGN
L2$NODE.DESC.SPEC.V$ IN PROCEDURE NEW_EDIT_BLOCK
      5628**DCL      6439>>ASSIGN
L2$NODE.FLINK$ IN PROCEDURE NEW_EDIT_BLOCK
      5575**DCL      6436>>ASSIGN
L2$NODE.BLINK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4372**DCL      5268>>ASSIGN
L2$NODE.DESC.SPEC.V$ IN PROCEDURE NEXT_PREV_DOMAIN
      4425**DCL      5263>>ASSIGN   5271>>ASSIGN
L2$NODE.FLINK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4372**DCL      5256>>ASSIGN   5266>>ASSIGN
L2_NODE$ IN PROCEDURE NEW_EDIT_BLOCK
      5421**DCL      5549--IMP-PTR  6432<<ASSIGN   6434>>DOWHILE  6436<<ASSIGN   6436>>ASSIGN   6439>>ASSIGN
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:99   
      6460>>ASSIGN
L2_NODE$ IN PROCEDURE NEXT_PREV_DOMAIN
      4330**DCL      4346--IMP-PTR  5252<<ASSIGN   5254>>DOWHILE  5256<<ASSIGN   5256>>ASSIGN   5260>>IF
      5263>>ASSIGN   5266<<ASSIGN   5266>>ASSIGN   5268<<ASSIGN   5268>>ASSIGN   5269>>IF       5271>>ASSIGN
LDELETE_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6467--CALLALT
LWRITE_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6551**LABEL    6538--CALLALT
NEW$BLOCK.EDIT_BLOCK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4502**DCL      5299>>IF       5300>>CALL
NEW$BLOCK.EVAL$ IN PROCEDURE NEXT_PREV_DOMAIN
      4502**DCL      5308>>IF       5309>>CALL
NEW_BLOCK$ IN PROCEDURE NEXT_PREV_DOMAIN
      4333**DCL      4476--IMP-PTR  5271<<ASSIGN   5299>>IF       5300>>CALL     5308>>IF       5309>>CALL
NEW_CHILD_ALLOCATED IN PROCEDURE NEW_EDIT_BLOCK
      5496**DCL      6506<<ASSIGN   6510<<ASSIGN   6524>>IF
NEW_EDIT_BLOCK
      5418**PROC     3801--CALL
NEW_EDIT_BLOCK_FAILED
      3998**LABEL    3801--CALLALT
NEXT_EVAL$ IN PROCEDURE NEW_EDIT_BLOCK
      5425**DCL      6445<<ASSIGN   6448>>ASSIGN
NEXT_EVAL$ IN PROCEDURE NEXT_PREV_DOMAIN
      4335**DCL      5283<<ASSIGN   5286>>ASSIGN
NEXT_PREV_DOMAIN
      4327**PROC     3786--CALL     3923--CALL
NEXT_PREV_DOMAIN_FAILED
      3998**LABEL    3786--CALLALT  3923--CALLALT
NO_NEXT_PREV_EDIT_BL_FAILURE IN PROCEDURE NEXT_PREV_DOMAIN
      5337**LABEL    5261--GOTO     5270--GOTO
OALLOC_FAILED
      3998**LABEL    3927--CALLALT  3953--CALLALT  3968--CALLALT
OALLOC_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6488--CALLALT  6496--CALLALT  6508--CALLALT
OCLEAR_RANGE_FAILED
      3998**LABEL    3985--CALLALT  3990--CALLALT
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:100  
OCOPY_FAILED
      3998**LABEL    3910--CALLALT  3914--CALLALT
OCOPY_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6514--CALLALT  6519--CALLALT
OCOPY_FAILED IN PROCEDURE NEXT_PREV_DOMAIN
      5341**LABEL    5300--CALLALT  5309--CALLALT
OCOPY_RANGE_FAILED
      3998**LABEL    3955--CALLALT  3987--CALLALT
OCOPY_RANGE_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6499--CALLALT  6501--CALLALT
OFREE_FAILED
      3998**LABEL    3890--CALLALT  3896--CALLALT  3902--CALLALT
OFREE_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6441--CALLALT  6446--CALLALT  6551--CALLALT
OFREE_FAILED IN PROCEDURE NEXT_PREV_DOMAIN
      5341**LABEL    5279--CALLALT  5284--CALLALT
OPEN_SUCCEEDED IN PROCEDURE NEW_EDIT_BLOCK
      5495**DCL      6473<<ASSIGN   6478<<ASSIGN   6484>>IF       6544>>IF
OPERAND.EDIT_BLOCK$
      2627**DCL      3984>>ASSIGN   4223>>ASSIGN   5300<>CALL     5314>>ASSIGN
OPERAND.EVAL$
      2627**DCL      3966>>ASSIGN   3968<>CALL     3970>>ASSIGN   5309<>CALL
OPERAND.INTREE$
      2627**DCL      3774>>ASSIGN
OPERAND$
      2694**DCL      2623--IMP-PTR  3773<<ASSIGN   3774>>ASSIGN   3888<<ASSIGN   3966>>ASSIGN   3968>>CALL
      3970>>ASSIGN   3984>>ASSIGN   4223>>ASSIGN   5273>>IF       5300>>CALL     5309>>CALL     5314>>ASSIGN
      5317>>IF
PFLUSH_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6540--CALLALT
PREMOVE_EDIT_BLOCK_FAILED IN PROCEDURE NEW_EDIT_BLOCK
      6558**LABEL    6455--CALLALT
PREMOVE_EDIT_BLOCK_FAILED IN PROCEDURE NEXT_PREV_DOMAIN
      5341**LABEL    5293--CALLALT  5326--CALLALT
TOS$EVAL
      2899**DCL      3902<>CALL     3914<>CALL
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:101  
TOS$EVAL.BLINK$
      2925**DCL      3901>>ASSIGN
TOS$EVAL.ENCLOSING
      2936**DCL      3985<>CALL     3987<>CALL
TOS$EVAL.LAST_FOUND_RANGE
      3074**DCL      3990<>CALL
TOS$EVAL.NODE$
      3133**DCL      3974<<ASSIGN
TOS$EVAL.RANGE
      3005**DCL      3955<>CALL
TOS$EVAL.REMAINING#
      3133**DCL      3977<<ASSIGN   3979<<ASSIGN   3982<<ASSIGN
TOS$EVAL.STATE#
      3133**DCL      3960<<ASSIGN   3971<<ASSIGN
TOS_EVAL$
      2698**DCL      2899--IMP-PTR  3901<<ASSIGN   3904>>ASSIGN   3966<<ASSIGN   3967>>IF       3970<<ASSIGN
      3971>>ASSIGN   3974>>ASSIGN   3977>>ASSIGN   3979>>ASSIGN   3982>>ASSIGN   3985>>CALL     3987>>CALL
      3990>>CALL
UPDATE_OPTIONS
      4067**PROC     3780--CALL     3917--CALL     5315--CALL
UPDATE_OPTIONS_FAILED
      3998**LABEL    3780--CALLALT  3917--CALLALT
VD$BLOCK_DESC IN PROCEDURE NEW_EDIT_BLOCK
      5924**DCL      6441<>CALL     6514<>CALL
VD$BLOCK_DESC IN PROCEDURE NEXT_PREV_DOMAIN
      4864**DCL      5279<>CALL     5300<>CALL
VD$ERR_FIRST
      3626**DCL      6559<<ASSIGN
VD$ERR_FIRST.FLAGLEV#
      3668**DCL      6560<<ASSIGN
VD$ERR_LAST
      3573**DCL      6559>>ASSIGN
VD$EVAL IN PROCEDURE NEW_EDIT_BLOCK
      6192**DCL      6519<>CALL
VD$EVAL IN PROCEDURE NEXT_PREV_DOMAIN
      5011**DCL      5309<>CALL
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:102  
VD$KEY_NUMBER.BYTES# IN PROCEDURE NEW_EDIT_BLOCK
      6075**DCL      6461<<ASSIGN   6461>>ASSIGN   6465<<ASSIGN   6535<<ASSIGN
VD$KEY_NUMBER.LENGTH# IN PROCEDURE NEW_EDIT_BLOCK
      6075**DCL      6533<<ASSIGN
VD$PORT
      3679**DCL      6540<>CALL
VD$STREAM IN PROCEDURE NEW_EDIT_BLOCK
      6086**DCL      6470<>CALL
VD$STREAM IN PROCEDURE NEXT_PREV_DOMAIN
      4758**DCL      5319<>CALL
VD$TEXTC_REMOTE
      3463**DCL      3949<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3492**DCL      3494--IMP-SIZ  3949>>CALL
VDA$FOPEN
      2644**DCL-ENT  5319--CALL     6470--CALL
VDA$LDELETE
      2646**DCL-ENT  6467--CALL
VDA$LWRITE
      2645**DCL-ENT  6538--CALL
VDA$PFLUSH
      2647**DCL-ENT  6540--CALL
VDG$ERRMSG
      2650**DCL-ENT  3998--CALL     5305--CALL     5338--CALL     5340--CALL
VDG$INFOMSG
      2651**DCL-ENT  6480--CALL
VDG$OALLOC
      2638**DCL-ENT  3927--CALL     3953--CALL     3968--CALL     6488--CALL     6496--CALL     6508--CALL
VDG$OCLEAR_RANGE
      2641**DCL-ENT  3985--CALL     3990--CALL
VDG$OCOPY
      2640**DCL-ENT  3910--CALL     3914--CALL     3949--CALL     5300--CALL     5309--CALL     6514--CALL
      6519--CALL
VDG$OCOPY_RANGE
      2642**DCL-ENT  3955--CALL     3987--CALL     6499--CALL     6501--CALL
VDG$OFREE
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:103  
      2639**DCL-ENT  3890--CALL     3896--CALL     3902--CALL     5279--CALL     5284--CALL     6441--CALL
      6446--CALL     6551--CALL
VDI$PREMOVE_EDIT_BLOCK
      2648**DCL-ENT  5293--CALL     5326--CALL     6455--CALL
VD_6E.ERR_HEAD$
      2686**DCL      3626--IMP-PTR  6558>>IF       6559>>ASSIGN   6560>>ASSIGN
VD_6E.ERR_TAIL$
      2686**DCL      3573--IMP-PTR  6558>>IF       6559>>ASSIGN
VD_6E.SOURCE.OPERAND
      2681**DCL      3888--ASSIGN   5273--IF       5317--IF
VD_6E.SOURCE.OPERAND.EDIT_BLOCK$
      2683**DCL      3896>>CALL     3898<<ASSIGN   3910<>CALL     3913>>ASSIGN   3927<>CALL     3930>>ASSIGN
VD_6E.SOURCE.OPERAND.EVAL$
      2683**DCL      3900>>DOWHILE  3901>>ASSIGN   3902>>CALL     3904<<ASSIGN   3914<>CALL     3953<>CALL
      3955>>CALL     3960>>ASSIGN
VD_6E.SOURCE.OPERAND.INTREE$
      2683**DCL      3890>>CALL     3892<<ASSIGN
VD_6E.STATS#
      2687**DCL      3778<<ASSIGN   3778>>ASSIGN   6486<<ASSIGN   6486>>ASSIGN
VD_6E.WINDOWS$
      2668**DCL      3144--IMP-PTR  6467>>CALL     6538>>CALL     6540>>CALL
VD_CURRENT_WINDOW$
      2690**DCL      2530--IMP-PTR  3772>>ASSIGN   3887>>ASSIGN   5252>>ASSIGN   6432>>ASSIGN   6459>>ASSIGN
      6530>>ASSIGN   6535>>ASSIGN   6537>>ASSIGN
WBLOCK_LOC IN PROCEDURE NEW_EDIT_BLOCK
      5519**DCL      6529<<ASSIGN   6538<>CALL
WBLOCK_LOC.KEY IN PROCEDURE NEW_EDIT_BLOCK
      5533**DCL      6530<<ASSIGN   6533--ASSIGN   6535--ASSIGN
WBLOCK_LOC.KEY.REP# IN PROCEDURE NEW_EDIT_BLOCK
      5535**DCL      6532<<ASSIGN
WBLOCK_LOC.KEY.TYPE# IN PROCEDURE NEW_EDIT_BLOCK
      5535**DCL      6531<<ASSIGN
WBLOCK_SPEC IN PROCEDURE NEW_EDIT_BLOCK
      5505**DCL      6525<<ASSIGN   6538<>CALL
WBLOCK_SPEC.REP# IN PROCEDURE NEW_EDIT_BLOCK
      5509**DCL      6527<<ASSIGN
PL6.E3A0      #001=VDE$IOPEN File=VDE$INTERPRET.:VDA5TSI                         FRI 07/04/97 11:11 Page:104  
WBLOCK_SPEC.TYPE# IN PROCEDURE NEW_EDIT_BLOCK
      5509**DCL      6526<<ASSIGN
WBLOCK_SPEC.V$ IN PROCEDURE NEW_EDIT_BLOCK
      5509**DCL      6528<<ASSIGN
WINDOWS$STREAM
      3144**DCL      6467<>CALL     6538<>CALL
WINDOWS$STREAM.PORT$
      3170**DCL      6540>>CALL
WINDOW_NODE.COUNT#
      2613**DCL      6535>>ASSIGN   6537>>ASSIGN
WINDOW_NODE.DESC.KEY
      2593**DCL      6459>>ASSIGN   6530>>ASSIGN
WINDOW_NODE.DESC.SPEC.V$
      2609**DCL      3772>>ASSIGN   3887>>ASSIGN
WINDOW_NODE.HEAD$
      2613**DCL      5252>>ASSIGN   6432>>ASSIGN

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:105  
      891        1        /*T***********************************************************/
      892        2        /*T*                                                         */
      893        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      894        4        /*T*                                                         */
      895        5        /*T***********************************************************/
      896        6
      897        7        /*D* NAME:  VDE$IRANGE
      898        8            PARAMETERS:
      899        9                OPERAND - A VD$OPERAND containing the InTree to evaluate:
      900       10                    .STREAM$ must point to a stream which is already
      901       11                        open to the InTree's domain.
      902       12                    .EDIT_BLOCK$ must point to a block descriptor
      903       13                        specifying the domain (EditBlock) for the InTree.
      904       14                    .EVAL$ must point to the top VD$EVAL on
      905       15                        the evaluation stack.  There are three distinct
      906       16                        situations when VDE$IRANGE is called:
      907       17                        1. At the start of a new editing operation (ie, the
      908       18                            first VDE$IRANGE call after a command processor
      909       19                            (VDI$Cxxx) for an editing command has finished executing).
      910       20                            In this case, there should be exactly one VD$EVAL
      911       21                            in the stack, initialized from the first
      912       22                            VD$IT_SELECT node (if any) in the Intree.  This
      913       23                            VD$EVAL's .STATE# must be %EVST_INITIAL, and its
      914       24                            .RANGE.ENDD must specify where to start
      915       25                            relative movement (if the InTree has no absolute operands).
      916       26                                        !! NOTE !!
      917       27                                Relative evaluation begins at the
      918       28                                location specified by .ENDD, not
      919       29                                .START!!
      920       30                            Test cases:
      921       31                            CO x AF REPE SE 'y'
      922       32                              After the 1st substitution, TOS$EVAL.RANGE will cover
      923       33                              the inserted block (copy of x); the search for 'y' should
      924       34                              start from the END of the inserted block.
      925       35                            CO x AF 'y'; CO x AF 'y'
      926       36                              Should behave exactly identical to previous test case.
      927       37                            'y'; TH 'z'; LO L IS THAT
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:106  
      928       38                              Search for 'z' should start at END of match of 'y'.
      929       39                            5 | TH 10           (where "|" is " " or ";" or <CR><CMD>)
      930       40                              After evaluating the "5", TOS$EVAL.RANGE will be an
      931       41        *??* BO 5 TH EO 5?    empty range at BO 5.
      932       42                              Final result should be BO 5 TH EO 10.
      933       43                            5 | TH 'y'
      934       44        *??* TH EO 5? *??*    "5" evaluates to BO 5 TH BO 5; "THRU" just changes
      935       45                              the eval state; search for 'y' should start from
      936       46        *??* EO 5? *??*       BO 5.
      937       47                            5 | RE | TH 'y'
      938       48                              "5 RE" evaluates to BO 5 TH EO 5; "THRU" just changes
      939       49                              the eval state; search for 'y' should start from
      940       50                              EO 5.
      941       51                        2. Successive evaluations after the first for repeated
      942       52                            block expressions.  In this case, the evaluation
      943       53                            stack should reflect the last range found for
      944       54                            each generator or IT_SELECT node; the top
      945       55                            VD$EVAL's .STATE# must be %EVST_INITIAL, and its
      946       56                            .RANGE must specify the last operand found for
      947       57                            the generator.  Relative movement will start at the
      948       58                            location specified by the end of that range.
      949       59                        3. Successive evaluations after the first for a single
      950       60                            editing operation.  This will happen only when
      951       61                            the user enters verb-less block expressions; the
      952       62                            first such evaluation will look just like case
      953       63                            1 above.  On successive evaluations, the top
      954       64                            VD$EVAL's .STATE# and .RANGE will specify where
      955       65                            we left off evaluation:  if .STATE# is still
      956       66                            %EVST_INITIAL, it'll look like case 1; if the
      957       67                            user has already given a THRU or ADJUST keyword,
      958       68                            .STATE# will be %EVST_START or _END, which is
      959       69                            this case, case 3:  pick up evaluation from the
      960       70                            given .STATE# and .RANGE.
      961       71                        Note that cases 1 and 2 have the same entry conditions
      962       72                        and are processed identically; only case 3 is
      963       73                        differentiated, by the initial state being something
      964       74                        other than %EVST_INITIAL.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:107  
      965       75                    .INTREE$ must point to the InTree to evaluate.
      966       76                        There must be an InTree, although it may be entirely
      967       77                        empty (only a VD$IT_BLOCK_EXPR node).
      968       78                SIGNAL - An uninitialized BIT(1) ALIGNED.
      969       79            INPUT:
      970       80            OUTPUT:
      971       81                SIGNAL will contain true or false:
      972       82                    %TRUE indicates that when evaluating InTree we were
      973       83                        able to find a range which lies partially or completely
      974       84                        within the EditBlock.
      975       85                        The top VD$EVAL in the window's .EVAL$ stack
      976       86                        specifies the found range.
      977       87                    %FALSE indicates failure to find a range for the InTree
      978       88                            due to one of the following reasons:
      979       89                        o The generators in the InTree are exhausted;
      980       90                        o An absolute operand specified a block which lies
      981       91                            completely outside the enclosing block;
      982       92                        o A conditional operand could not find a range
      983       93                            within the enclosing block;
      984       94                        o The starting range for evaluation of the next range
      985       95                            was already (at or) outside the enclosing block.
      986       96                            (See DESCRIPTION for caveats on the "at or".)
      987       97                    NOTE - If SIGNAL=%FALSE is returned, the top VD$EVAL
      988       98                        on the window's .EVAL$ stack may be modified, but
      989       99                        its contents will be irrelevant.
      990      100            DESCRIPTION:
      991      101                Look at the object-class of the InTree node pointed-to by the last
      992      102                    VD$EVAL on the evaluation stack:
      993      103                    o None:  there's no InTree, we're done evaluating,
      994      104                        return SIGNAL = %FALSE.
      995      105                    o Anything except IT_SELECT:  pop this VD$EVAL off the
      996      106                        stack; keep popping til we get to an EVAL which
      997      107                        points to an IT_SELECT node which has some
      998      108                        repetitions remaining.  These VD$EVALs that
      999      109                        we're popping are left over from the last evaluation
     1000      110                        of this InTree, from generators other than IT_SELECTs
     1001      111                        or from IT_SELECTs whose repetitions have run out.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:108  
     1002      112        *??*            The only alternatives which survive between successive
     1003      113        *??*            evaluations are those of an IT_SELECT generator.
     1004      114
     1005      115                Loop, evaluating each IT_SELECT node in the InTree.
     1006      116                After evaluating each IT_SELECT node:
     1007      117                Decrement the .REMAINING count.
     1008      118                If the signal is true:
     1009      119                    If this is the last IT_SELECT node in the InTree,
     1010      120                        return with SIGNAL = %TRUE.
     1011      121                    If this isn't the last IT_SELECT node in the InTree,
     1012      122                        push a new VD$EVAL on the stack for the new IT_SELECT
     1013      123                        node:
     1014      124                            new EVAL.RANGE := an empty range at the old
     1015      125                                            tos-VD$EVAL's range start location
     1016      126                            new EVAL.ENCLOSING := old tos-VD$EVAL's range
     1017      127                            new EVAL.STATE := EVST_INITIAL
     1018      128                            new EVAL.REMAINING := new IT_SELECT node's repeat count
     1019      129                        Loop to evaluate the new IT_SELECT node.
     1020      130                If the signal is false, backtrack:
     1021      131                    First, look at the top VD$EVAL on the stack:
     1022      132                        If it's for an IT_SELECT node, forget it:  the first failure
     1023      133                            is failure for all alternatives.
     1024      134                        If it's not for an IT_SELECT node, then failure for one
     1025      135                            alternative doesn't imply anything about the other
     1026      136                            alternatives; if it's .REMAINING > 0, it's Intree node
     1027      137                            can generate more ranges:
     1028      138                            o If it's an OPOR_OR, copy the range and state from the
     1029      139                                previous VD$EVAL on the stack, and begin evaluating
     1030      140                                the IT_OPERAND's second ("right-hand") child.
     1031      141                        If it's an IT_SELECT node or the .REMAINING count is 0, pop
     1032      142                            the VD$EVAL off the stack.
     1033      143                    If we had to pop the stack, see if the new tos-VD$EVAL's
     1034      144                        .REMAINING is > 0; if not, keep popping til we find one whose
     1035      145                        .REMAINING is > 0:  when we do:
     1036      146                        o If it's an IT_SELECT, reset the range to an empty range
     1037      147                            at the current range end location, and reset the
     1038      148                            state to EVST_INITIAL.  Begin evaluating the
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:109  
     1039      149                            IT_SELECT's children again.
     1040      150                        o If it's an OPOR_OR, do as above for OPOR_OR.
     1041      151                    If we keep popping til we empty the stack, return with SIGNAL =
     1042      152                        %FALSE.
     1043      153        */
     1044      154
     1045      155        VDE$IRANGE: PROC (OPERAND, SIGNAL) ALTRET;
     1046      156
     1047      157
     1048      158        %INCLUDE VD_MACROS_M;
     1049     2373        %INCLUDE VD_PERR_C;
     1050     2521
     1051     2522
     1052     2523        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1053     2537    1   DCL SIGNAL BIT(1) ALIGNED;
     1054     2538
     1055     2539
     1056     2540
     1057     2541    1   DCL VDE$IADJUST         ENTRY (3) ALTRET;
     1058     2542    1   DCL VDE$IGUAR_RANGE_IN_RANGE ENTRY (4) ALTRET;
     1059     2543    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     1060     2544    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1061     2545    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1062     2546    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
     1063     2547    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1064     2548    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1065     2549    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1066     2550    1   DCL VDG$ESCREECH        ENTRY (3);
     1067     2551    1   DCL VDG$MEVAL_START_EVAL ENTRY (1);
     1068     2552    1   DCL VDG$MEVAL_FOUND_RANGE ENTRY (1);
     1069     2553
     1070     2554
     1071     2555        %VD$NUMBER (NAME=VD_$$MON_EVAL, STCLASS=SYMREF);
     1072     2600
     1073     2601
     1074     2602
     1075     2603    1   DCL TOS_EVAL$ PTR;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:110  
     1076     2604    1   DCL TEST_EVAL$ PTR;
     1077     2605    1   DCL PREV_EVAL$ PTR;
     1078     2606    1   DCL IT_SELECT$ PTR;
     1079     2607    1   DCL TRUNCATED BIT(1) ALIGNED;
     1080     2608    1   DCL COMPLETELY_OUTSIDE BIT(1) ALIGNED;
     1081     2609    1   DCL RCCL SBIN;
     1082     2610
     1083     2611
     1084     2612        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1085     2857        %VD$EVAL (NAME=TEST$EVAL, STCLASS="BASED(TEST_EVAL$)");
     1086     3102        %VD$EVAL (NAME=PREV$EVAL, STCLASS="BASED(PREV_EVAL$)");
     1087     3347        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
     1088     3384        %VD$OBJECT_HEADER;
     1089     3406        %VD$IT_OPERATOR;
     1090     3443
     1091     3444
     1092     3445
     1093     3446    1           SIGNAL = %TRUE;
     1094     3447    1           TOS_EVAL$ = OPERAND.EVAL$;
     1095     3448
     1096     3449    1           IF VD_$$MON_EVAL.V# > 0 THEN
     1097     3450    1              CALL VDG$MEVAL_START_EVAL (OPERAND);
     1098     3451
     1099     3452                /*
     1100     3453                *  Pop the evaluation stack til we get an IT_SELECT which
     1101     3454                *     has some remaining repetitions.
     1102     3455                */
     1103     3456    1   FIND_TOP_SELECT:
     1104     3457    2           DO WHILE TOS_EVAL$ ~= ADDR(NIL);
     1105     3458    2              IF TOS$EVAL.NODE$ ~= ADDR(NIL) THEN
     1106     3459    2                 IF TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS# = %CLS_IT_SELECT
     1107     3460    2                   AND TOS$EVAL.REMAINING# > 0 THEN
     1108     3461    2                    EXIT FIND_TOP_SELECT;
     1109     3462    2              IF TOS$EVAL.BLINK$ = ADDR(NIL) THEN
     1110     3463    2                 TOS_EVAL$ = ADDR(NIL);  /* Leave 1 EVAL in stack */
     1111     3464    3              ELSE DO;
     1112     3465    3                 OPERAND.EVAL$ = TOS$EVAL.BLINK$;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:111  
     1113     3466    3                 CALL VDG$OFREE (TOS$EVAL)
     1114     3467    3                   ALTRET (OFREE_FAILED);
     1115     3468    3                 TOS_EVAL$ = OPERAND.EVAL$;
     1116     3469    3                 END;
     1117     3470    2              END;
     1118     3471    2           IF TOS_EVAL$ = ADDR(NIL) THEN DO;
     1119     3472    2              SIGNAL = %FALSE;
     1120     3473    2              RETURN;
     1121     3474    2              END;
     1122     3475
     1123     3476
     1124     3477    1   EVAL_SELECTS:
     1125     3478    2           DO UNTIL NOT SIGNAL;
     1126     3479
     1127     3480    2              IF TOS$EVAL.REMAINING# > 0 THEN
     1128     3481    3              DO CASE (TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS#);
     1129     3482    3               CASE (%CLS_IT_SELECT);
     1130     3483    3                 CALL ISELECT (OPERAND, SIGNAL)
     1131     3484    3                   ALTRET (ISELECT_FAILED);
     1132     3485    3               CASE (%CLS_IT_OPERATOR);
     1133     3486                      /*N* CALL VDE$IOPERATOR (OPERAND, SIGNAL) */
     1134     3487                      /*N*   ALTRET (IOPERATOR_FAILED);         */
     1135     3488    3               END;
     1136     3489                   /*
     1137     3490                   *  We may have pushed new VD$EVALs on the stack, for
     1138     3491                   *    other generators:  get the new tos-VD$EVAL.
     1139     3492                   */
     1140     3493    2              TOS_EVAL$ = OPERAND.EVAL$;
     1141     3494
     1142     3495                   /* Success or failure, we're doing one evaluation */
     1143     3496    2              TOS$EVAL.REMAINING# = MAXIMUM(0, TOS$EVAL.REMAINING# - 1);
     1144     3497
     1145     3498    2              IF SIGNAL THEN
     1146     3499    3   SIGNAL_TRUE: DO;
     1147     3500    3                 IF VD_$$MON_EVAL.V# > 0 THEN
     1148     3501    3                    CALL VDG$MEVAL_FOUND_RANGE (TOS$EVAL);
     1149     3502                      /*
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:112  
     1150     3503                      *  Find the IT_SELECT node we're evaluating for.
     1151     3504                      */
     1152     3505    3                 TEST_EVAL$ = TOS_EVAL$;
     1153     3506    3                 IT_SELECT$ = ADDR(NIL);
     1154     3507    4                 DO WHILE IT_SELECT$ = ADDR(NIL);
     1155     3508    5                    DO WHILE TEST$EVAL.NODE$ = ADDR(NIL);
     1156     3509    5                       TEST_EVAL$ = TEST$EVAL.BLINK$;
     1157     3510    5                       END;
     1158     3511    4                    IF TEST$EVAL.NODE$->VD$OBJECT_HEADER.CLASS# =
     1159     3512    4                      %CLS_IT_SELECT THEN
     1160     3513    4                       IT_SELECT$ = TEST$EVAL.NODE$;
     1161     3514    4                    ELSE
     1162     3515    4                       TEST_EVAL$ = TEST$EVAL.BLINK$;
     1163     3516    4                    END;
     1164     3517
     1165     3518                      /* Flink to the next IT_SELECT node */
     1166     3519    3                 IT_SELECT$ = IT$SELECT.FLINK$;
     1167     3520    3                 IF IT_SELECT$ = ADDR(NIL) THEN
     1168     3521    3                    RETURN;        /* Found a range for entire InTree */
     1169     3522
     1170     3523                      /* Push a new VD$EVAL for the new IT_SELECT node */
     1171     3524    3                 PREV_EVAL$ = TOS_EVAL$;
     1172     3525    3                 CALL VDG$OALLOC (%CLS_EVAL, OPERAND.EVAL$)
     1173     3526    3                   ALTRET (OALLOC_FAILED);
     1174     3527    3                 TOS_EVAL$ = OPERAND.EVAL$;
     1175     3528    3                 TOS$EVAL.BLINK$ = PREV_EVAL$;
     1176     3529    3                 CALL VDG$OCOPY_RANGE (PREV$EVAL.RANGE, TOS$EVAL.ENCLOSING)
     1177     3530    3                   ALTRET (OCOPY_RANGE_FAILED);
     1178     3531    3                 CALL VDG$OCOPY_LOCATION (PREV$EVAL.RANGE.START,
     1179     3532    3                   TOS$EVAL.RANGE.START)
     1180     3533    3                   ALTRET (OCOPY_LOCATION_FAILED);
     1181     3534    3                 CALL VDG$OCOPY_LOCATION (PREV$EVAL.RANGE.START,
     1182     3535    3                   TOS$EVAL.RANGE.ENDD)
     1183     3536    3                   ALTRET (OCOPY_LOCATION_FAILED);
     1184     3537    3                 TOS$EVAL.STATE# = %EVST_INITIAL;
     1185     3538    3                 TOS$EVAL.NODE$ = IT_SELECT$;
     1186     3539    3                 IF IT$SELECT.RPT_ALL THEN
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:113  
     1187     3540    3                    TOS$EVAL.REMAINING# = %MX_REPEAT_COUNT;
     1188     3541    3                 ELSE
     1189     3542    3                    TOS$EVAL.REMAINING# = IT$SELECT.RPT_COUNT#;
     1190     3543    3                 END SIGNAL_TRUE;
     1191     3544    2              ELSE
     1192     3545    3   SIGNAL_FALSE: DO;
     1193     3546    3                 IF TOS$EVAL.NODE$ -> VD$OBJECT_HEADER.CLASS# =
     1194     3547    3                   %CLS_IT_SELECT THEN
     1195     3548    3                    TOS$EVAL.REMAINING# = 0;   /* Don't try any more */
     1196     3549                      /*
     1197     3550                      *  Backtrack to a generator with some alternatives left.
     1198     3551                      */
     1199     3552    4                 DO WHILE TOS$EVAL.REMAINING# <= 0
     1200     3553    4                   AND TOS$EVAL.BLINK$ ~= ADDR(NIL);
     1201     3554    4                    OPERAND.EVAL$ = TOS$EVAL.BLINK$;
     1202     3555    4                    CALL VDG$OFREE (TOS$EVAL)
     1203     3556    4                      ALTRET (OFREE_FAILED);
     1204     3557    4                    TOS_EVAL$ = OPERAND.EVAL$;  /* Load new TOS ptr */
     1205     3558    4                    END;
     1206     3559    4                 IF TOS$EVAL.REMAINING# <= 0 THEN DO;
     1207     3560                         /* No more backtracks: done w/InTree */
     1208     3561    4                    SIGNAL = %FALSE;
     1209     3562    4                    RETURN;
     1210     3563    4                    END;
     1211     3564
     1212     3565    4                 DO CASE (TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS#);
     1213     3566    4                  CASE (%CLS_IT_SELECT);
     1214     3567                         /* Start from end of last-found range */
     1215     3568    4                    TOS$EVAL.STATE# = %EVST_INITIAL;
     1216     3569
     1217     3570    4                  CASE (%CLS_IT_OPERATOR);
     1218     3571    4                    PREV_EVAL$ = TOS$EVAL.BLINK$;
     1219     3572    4                    IF PREV_EVAL$ = ADDR(NIL) THEN
     1220     3573    4                       CALL VDG$ESCREECH;
     1221     3574    4                    IF TOS$EVAL.NODE$->VD$IT_OPERATOR.CODE# =
     1222     3575    5                      %OPOR_OR THEN DO;
     1223     3576    5                       CALL VDG$OCLEAR_RANGE (TOS$EVAL.RANGE)
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:114  
     1224     3577    5                         ALTRET (OCLEAR_RANGE_FAILED);
     1225     3578    5                       CALL VDG$OCOPY_RANGE (PREV$EVAL.RANGE,
     1226     3579    5                         TOS$EVAL.RANGE)
     1227     3580    5                         ALTRET (OCOPY_RANGE_FAILED);
     1228     3581    5                       TOS$EVAL.STATE# = PREV$EVAL.STATE#;
     1229     3582    5                       END;
     1230     3583    4                  END;
     1231     3584
     1232     3585    3                 SIGNAL = %TRUE;
     1233     3586    3                 END SIGNAL_FALSE;
     1234     3587    2              END EVAL_SELECTS;
     1235     3588
     1236     3589
     1237     3590    1           RETURN;
     1238     3591
     1239     3592
     1240     3593
     1241     3594    1   OALLOC_FAILED: ;
     1242     3595    1   OFREE_FAILED: ;
     1243     3596    1   ISELECT_FAILED: ;
     1244     3597    1   OCLEAR_LOCATION_FAILED: ;
     1245     3598    1   OCOPY_LOCATION_FAILED: ;
     1246     3599    1   OCLEAR_RANGE_FAILED: ;
     1247     3600    1   OCOPY_RANGE_FAILED: ;
     1248     3601    1           ALTRETURN;
     1249     3602
     1250     3603
     1251     3604                %BOX (TITLE="ISELECT", PAGE=YES);
              3612    1
              3616    1   /***************************************************************************
              3618    1    *                                                                         *
              3622    1            *                                  ISELECT                                *
              3624    1            *                                                                         *
              3626    1           ***************************************************************************/

     1252     3630
     1253     3631        /*I* NAME:  ISELECT
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:115  
     1254     3632            PARAMETERS:
     1255     3633                OPERAND - The VD$OPERAND whose InTree we're evaluating.
     1256     3634                    In OPERAND's EVAL$ (top VD$EVAL on the evaluation stack):
     1257     3635                    o TOS$EVAL.RANGE must specify the initial range for
     1258     3636                        evaluation.  This range must lie completely within
     1259     3637                        the enclosing limits (TOS$EVAL.ENCLOSING).
     1260     3638                    o TOS$EVAL.STATE# must contain the state of evaluation.
     1261     3639                    o TOS$EVAL.NODE$ must point to the IT_SELECT InTree node
     1262     3640                        to evaluate.
     1263     3641                    o This IT_SELECT node must have at least one repetition
     1264     3642                        remaining.
     1265     3643                SIGNAL - An uninitialized BIT(1) ALIGNED.
     1266     3644            INPUT:
     1267     3645            OUTPUT:
     1268     3646                OPERAND may have a new VD$EVAL at the top of it's evaluation
     1269     3647                    stack, if we evaluated any generators.
     1270     3648                TOS$EVAL.STATE# and .RANGE may be modified:  they will contain
     1271     3649                    the final state and range bounds evaluated for this
     1272     3650                    IT_SELECT node.
     1273     3651                TOS$EVAL.LAST_FOUND_RANGE will specify the same range that
     1274     3652                    TOS$EVAL.RANGE specified at entry to this routine.
     1275     3653                TOS$EVAL.REMAINING# may be forced to 0 (when we want to stop any
     1276     3654                    further evaluation of an IT_SELECT (???Operator???) node).
     1277     3655                SIGNAL will contain true or false, as described for VDE$IRANGE.
     1278     3656            DESCRIPTION:
     1279     3657                Clear TOS$EVAL.LAST_FOUND_RANGE to begin with.  If this is a repeated
     1280     3658                    SELECT clause, then copy TOS$EVAL.RANGE to .LAST_FOUND_RANGE,
     1281     3659                    so we can compare any newly-found range with the last one found
     1282     3660                    to be sure we're making forward progress.
     1283     3661                    If this isn't a repeated SELECT clause, we want to make sure that
     1284     3662                    the comparison at the end of ISELECT finds progress:  by
     1285     3663                    definition, a single SELECT represents "progress".
     1286     3664                    ((Test case:  ED FI x:  at entry to ISELECT, TOS$EVAL.RANGE
     1287     3665                    is BOF - EOF, and that's the range found for the SELECT.
     1288     3666                    Even tho it's the same as the "last found range", it should
     1289     3667                    succeed.))
     1290     3668                For each child of the IT_SELECT node:
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:116  
     1291     3669                    Make any state change specified by IT$ADJUST.NEW_STATE#.
     1292     3670                    Call VDE$IADJUST.
     1293     3671                Guarantee that the evaluated range's start bound is
     1294     3672                    located before or equal to its end bound in the domain.
     1295     3673                    If not, switch the start and end bounds.
     1296     3674                If any call to VDE$IADJUST returns a false signal,
     1297     3675                    return immediately.
     1298     3676                Compare the newly-found TOS$EVAL.RANGE with .LAST_FOUND_RANGE:
     1299     3677                    if they're equal, return a false SIGNAL -- and set
     1300     3678                    TOS$EVAL.REMAINING# to 0 to force failure of all alternatives.
     1301     3679                    ((See star 22441, cases 2, 3, and 4 and the case in the star
     1302     3680                    description:
     1303     3681                        REPEAT SE BA SK 1 RE
     1304     3682                        DE L REPE SE RE SE PO 5 TH EO RE
     1305     3683                        CO ST 'A' OV REPE SE RE PO 1 SE '.'
     1306     3684                        EO CURR; CO ST 'X' OV REPE SE BA SK 2 RE SE '.'
     1307     3685                    All these cases need to fail when a REPEAT SELECT finds the same
     1308     3686                    range repeatedly.))
     1309     3687        */
     1310     3688
     1311     3689    1   ISELECT: PROC (OPERAND, SIGNAL) ALTRET;
     1312     3690
     1313     3691        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1314     3705    2   DCL SIGNAL BIT(1) ALIGNED;
     1315     3706
     1316     3707
     1317     3708    2   DCL TOS_EVAL$ PTR;
     1318     3709    2   DCL IT_ADJUST$ PTR;
     1319     3710        %VD$LOCATION (NAME=TEMP_START, STCLASS=AUTO);
     1320     3738
     1321     3739
     1322     3740        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1323     3985        %VD$IT_ADJUST (NAME=IT$ADJUST, STCLASS="BASED(IT_ADJUST$)");
     1324     4022        %VD$IT_SELECT;
     1325     4059
     1326     4060
     1327     4061
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:117  
     1328     4062    2           SIGNAL = %TRUE;
     1329     4063    2           TOS_EVAL$ = OPERAND.EVAL$;
     1330     4064    2           CALL VDG$OCLEAR_RANGE (TOS$EVAL.LAST_FOUND_RANGE)
     1331     4065    2             ALTRET (OCLEAR_RANGE_FAILED);
     1332     4066    2           IF TOS$EVAL.NODE$->VD$IT_SELECT.RPT_ALL
     1333     4067    3             OR TOS$EVAL.NODE$->VD$IT_SELECT.RPT_COUNT# > 1 THEN DO;
     1334     4068    3              CALL VDG$OCOPY_RANGE (TOS$EVAL.RANGE, TOS$EVAL.LAST_FOUND_RANGE)
     1335     4069    3                ALTRET (OCOPY_RANGE_FAILED);
     1336     4070    3              END;
     1337     4071
     1338     4072                /*
     1339     4073                *   Evaluate the SELECT clause
     1340     4074                */
     1341     4075
     1342     4076    2           IT_ADJUST$ = TOS$EVAL.NODE$->VD$IT_SELECT.ADJUSTS$;
     1343     4077
     1344     4078    2   EACH_IT_ADJUST:
     1345     4079    3           DO WHILE IT_ADJUST$ ~= ADDR(NIL)
     1346     4080    3             AND SIGNAL;
     1347     4081
     1348     4082    4              DO CASE (IT$ADJUST.NEW_STATE#);
     1349     4083    4               CASE (0);
     1350     4084    4                 ;     /* Do nothing: no state change */
     1351     4085
     1352     4086    4               CASE (%EVST_START, %EVST_END);
     1353     4087                      /* Collapse range to current FP location */
     1354     4088    5                 DO CASE (TOS$EVAL.STATE#);
     1355     4089    5                  CASE (%EVST_INITIAL, %EVST_START);
     1356     4090    5                    CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.ENDD)
     1357     4091    5                      ALTRET (OCLEAR_LOCATION_FAILED);
     1358     4092    5                    CALL VDG$OCOPY_LOCATION (TOS$EVAL.RANGE.START,
     1359     4093    5                      TOS$EVAL.RANGE.ENDD)
     1360     4094    5                      ALTRET (OCOPY_LOCATION_FAILED);
     1361     4095    5                  CASE (%EVST_END);
     1362     4096    5                    CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.START)
     1363     4097    5                      ALTRET (OCLEAR_LOCATION_FAILED);
     1364     4098    5                    CALL VDG$OCOPY_LOCATION (TOS$EVAL.RANGE.ENDD,
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:118  
     1365     4099    5                      TOS$EVAL.RANGE.START)
     1366     4100    5                      ALTRET (OCOPY_LOCATION_FAILED);
     1367     4101    5                  CASE (ELSE);
     1368     4102    5                    CALL VDG$ESCREECH (TOS$EVAL.STATE#);
     1369     4103    5                  END;
     1370     4104    4                 TOS$EVAL.STATE# = IT$ADJUST.NEW_STATE#;
     1371     4105
     1372     4106    4               CASE (%EVST_TOGGLE);
     1373     4107    4                 IF TOS$EVAL.STATE# = %EVST_END THEN
     1374     4108    4                    TOS$EVAL.STATE# = %EVST_START;
     1375     4109    4                 ELSE
     1376     4110    4                    TOS$EVAL.STATE# = %EVST_END;
     1377     4111
     1378     4112    4               CASE (ELSE);
     1379     4113    4                 CALL VDG$ESCREECH (IT$ADJUST.NEW_STATE#);
     1380     4114    4               END;
     1381     4115
     1382     4116    3              CALL VDE$IADJUST (OPERAND, IT$ADJUST, SIGNAL)
     1383     4117    3                ALTRET (IADJUST_FAILED);
     1384     4118                   /*
     1385     4119                   *  We may have pushed new VD$EVALs on the stack, for
     1386     4120                   *    generators other than SELECT: get the new tos-VD$EVAL.
     1387     4121                   */
     1388     4122    3              TOS_EVAL$ = OPERAND.EVAL$;
     1389     4123
     1390     4124    3              IT_ADJUST$ = IT$ADJUST.FLINK$;
     1391     4125    3              END EACH_IT_ADJUST;
     1392     4126
     1393     4127
     1394     4128    2           CALL VDE$IGUAR_RANGE_IN_RANGE (TOS$EVAL.RANGE,
     1395     4129    2             TOS$EVAL.ENCLOSING, TRUNCATED, COMPLETELY_OUTSIDE)
     1396     4130    2             ALTRET (IGUAR_RANGE_IN_RANGE_FAILED);
     1397     4131    2           IF COMPLETELY_OUTSIDE THEN
     1398     4132    2              SIGNAL = %FALSE;
     1399     4133    2           CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.START,
     1400     4134    2             TOS$EVAL.RANGE.ENDD, RCCL)
     1401     4135    2             ALTRET (COMPARE_LOCS_FAILED);
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:119  
     1402     4136    3           IF RCCL > %RCCL_EQUAL THEN DO;
     1403     4137    3              TEMP_START = TOS$EVAL.RANGE.START;
     1404     4138    3              TOS$EVAL.RANGE.START = TOS$EVAL.RANGE.ENDD;
     1405     4139    3              TOS$EVAL.RANGE.ENDD = TEMP_START;
     1406     4140    4              DO CASE (TOS$EVAL.STATE#);
     1407     4141    4               CASE (%EVST_INITIAL, %EVST_START);
     1408     4142    4                 TOS$EVAL.STATE# = %EVST_END;
     1409     4143    4               CASE (%EVST_END);
     1410     4144    4                 TOS$EVAL.STATE# = %EVST_START;
     1411     4145    4               END;
     1412     4146    3              END;
     1413     4147
     1414     4148    3           IF SIGNAL THEN DO;
     1415     4149                   /* Did we find the same range as last time? */
     1416     4150    3              CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.START,
     1417     4151    3                TOS$EVAL.LAST_FOUND_RANGE.START, RCCL)
     1418     4152    3                ALTRET (COMPARE_LOCS_FAILED);
     1419     4153    4              IF RCCL = %RCCL_EQUAL THEN DO;
     1420     4154    4                 CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.ENDD,
     1421     4155    4                   TOS$EVAL.LAST_FOUND_RANGE.ENDD, RCCL)
     1422     4156    4                   ALTRET (COMPARE_LOCS_FAILED);
     1423     4157    5                 IF RCCL = %RCCL_EQUAL THEN DO;
     1424     4158                         /* Found same range again: fail this and all alternatives */
     1425     4159    5                    SIGNAL = %FALSE;
     1426     4160                         /*N*??* Must we find the VD$EVAL for the IT_SELECT node? *N*/
     1427     4161    5                    TOS$EVAL.REMAINING# = 0;
     1428     4162    5                    END;
     1429     4163    4                 END;
     1430     4164    3              END;
     1431     4165
     1432     4166    2           RETURN;
     1433     4167
     1434     4168
     1435     4169
     1436     4170    2   OCLEAR_RANGE_FAILED: ;
     1437     4171    2   OCOPY_RANGE_FAILED: ;
     1438     4172    2   OCLEAR_LOCATION_FAILED: ;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:120  
     1439     4173    2   OCOPY_LOCATION_FAILED: ;
     1440     4174    2   IADJUST_FAILED: ;
     1441     4175    2   IGUAR_RANGE_IN_RANGE_FAILED: ;
     1442     4176    2   COMPARE_LOCS_FAILED: ;
     1443     4177    2           ALTRETURN;
     1444     4178
     1445     4179    2   END ISELECT;
     1446     4180
     1447     4181    1   END VDE$IRANGE;
     1448     4182        %EOD;

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:121  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IRANGE.

   Procedure VDE$IRANGE requires 492 words for executable code.
   Procedure VDE$IRANGE requires 30 words of local(AUTO) storage.

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:122  

 Object Unit name= VDE$IRANGE                                 File name= VDE$INTERPRET.:VDA5TOU
 UTS= JUL 04 '97 11:11:34.68 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   492    754  VDE$IRANGE
    1  RoData even  none     1      1  VDE$IRANGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  VDE$IRANGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$MEVAL_START_EVAL
         yes           Std       1 VDG$MEVAL_FOUND_RANGE
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OFREE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDG$OCLEAR_RANGE
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       2 VDG$OCOPY_RANGE
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       3 VDG$COMPARE_LOCS
 yes     yes           Std       3 VDE$IADJUST
 yes     yes           Std       4 VDE$IGUAR_RANGE_IN_RANGE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:123  
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_$$MON_EVAL                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:124  


      891        1        /*T***********************************************************/
      892        2        /*T*                                                         */
      893        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      894        4        /*T*                                                         */
      895        5        /*T***********************************************************/
      896        6
      897        7        /*D* NAME:  VDE$IRANGE
      898        8            PARAMETERS:
      899        9                OPERAND - A VD$OPERAND containing the InTree to evaluate:
      900       10                    .STREAM$ must point to a stream which is already
      901       11                        open to the InTree's domain.
      902       12                    .EDIT_BLOCK$ must point to a block descriptor
      903       13                        specifying the domain (EditBlock) for the InTree.
      904       14                    .EVAL$ must point to the top VD$EVAL on
      905       15                        the evaluation stack.  There are three distinct
      906       16                        situations when VDE$IRANGE is called:
      907       17                        1. At the start of a new editing operation (ie, the
      908       18                            first VDE$IRANGE call after a command processor
      909       19                            (VDI$Cxxx) for an editing command has finished executing).
      910       20                            In this case, there should be exactly one VD$EVAL
      911       21                            in the stack, initialized from the first
      912       22                            VD$IT_SELECT node (if any) in the Intree.  This
      913       23                            VD$EVAL's .STATE# must be %EVST_INITIAL, and its
      914       24                            .RANGE.ENDD must specify where to start
      915       25                            relative movement (if the InTree has no absolute operands).
      916       26                                        !! NOTE !!
      917       27                                Relative evaluation begins at the
      918       28                                location specified by .ENDD, not
      919       29                                .START!!
      920       30                            Test cases:
      921       31                            CO x AF REPE SE 'y'
      922       32                              After the 1st substitution, TOS$EVAL.RANGE will cover
      923       33                              the inserted block (copy of x); the search for 'y' should
      924       34                              start from the END of the inserted block.
      925       35                            CO x AF 'y'; CO x AF 'y'
      926       36                              Should behave exactly identical to previous test case.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:125  
      927       37                            'y'; TH 'z'; LO L IS THAT
      928       38                              Search for 'z' should start at END of match of 'y'.
      929       39                            5 | TH 10           (where "|" is " " or ";" or <CR><CMD>)
      930       40                              After evaluating the "5", TOS$EVAL.RANGE will be an
      931       41        *??* BO 5 TH EO 5?    empty range at BO 5.
      932       42                              Final result should be BO 5 TH EO 10.
      933       43                            5 | TH 'y'
      934       44        *??* TH EO 5? *??*    "5" evaluates to BO 5 TH BO 5; "THRU" just changes
      935       45                              the eval state; search for 'y' should start from
      936       46        *??* EO 5? *??*       BO 5.
      937       47                            5 | RE | TH 'y'
      938       48                              "5 RE" evaluates to BO 5 TH EO 5; "THRU" just changes
      939       49                              the eval state; search for 'y' should start from
      940       50                              EO 5.
      941       51                        2. Successive evaluations after the first for repeated
      942       52                            block expressions.  In this case, the evaluation
      943       53                            stack should reflect the last range found for
      944       54                            each generator or IT_SELECT node; the top
      945       55                            VD$EVAL's .STATE# must be %EVST_INITIAL, and its
      946       56                            .RANGE must specify the last operand found for
      947       57                            the generator.  Relative movement will start at the
      948       58                            location specified by the end of that range.
      949       59                        3. Successive evaluations after the first for a single
      950       60                            editing operation.  This will happen only when
      951       61                            the user enters verb-less block expressions; the
      952       62                            first such evaluation will look just like case
      953       63                            1 above.  On successive evaluations, the top
      954       64                            VD$EVAL's .STATE# and .RANGE will specify where
      955       65                            we left off evaluation:  if .STATE# is still
      956       66                            %EVST_INITIAL, it'll look like case 1; if the
      957       67                            user has already given a THRU or ADJUST keyword,
      958       68                            .STATE# will be %EVST_START or _END, which is
      959       69                            this case, case 3:  pick up evaluation from the
      960       70                            given .STATE# and .RANGE.
      961       71                        Note that cases 1 and 2 have the same entry conditions
      962       72                        and are processed identically; only case 3 is
      963       73                        differentiated, by the initial state being something
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:126  
      964       74                        other than %EVST_INITIAL.
      965       75                    .INTREE$ must point to the InTree to evaluate.
      966       76                        There must be an InTree, although it may be entirely
      967       77                        empty (only a VD$IT_BLOCK_EXPR node).
      968       78                SIGNAL - An uninitialized BIT(1) ALIGNED.
      969       79            INPUT:
      970       80            OUTPUT:
      971       81                SIGNAL will contain true or false:
      972       82                    %TRUE indicates that when evaluating InTree we were
      973       83                        able to find a range which lies partially or completely
      974       84                        within the EditBlock.
      975       85                        The top VD$EVAL in the window's .EVAL$ stack
      976       86                        specifies the found range.
      977       87                    %FALSE indicates failure to find a range for the InTree
      978       88                            due to one of the following reasons:
      979       89                        o The generators in the InTree are exhausted;
      980       90                        o An absolute operand specified a block which lies
      981       91                            completely outside the enclosing block;
      982       92                        o A conditional operand could not find a range
      983       93                            within the enclosing block;
      984       94                        o The starting range for evaluation of the next range
      985       95                            was already (at or) outside the enclosing block.
      986       96                            (See DESCRIPTION for caveats on the "at or".)
      987       97                    NOTE - If SIGNAL=%FALSE is returned, the top VD$EVAL
      988       98                        on the window's .EVAL$ stack may be modified, but
      989       99                        its contents will be irrelevant.
      990      100            DESCRIPTION:
      991      101                Look at the object-class of the InTree node pointed-to by the last
      992      102                    VD$EVAL on the evaluation stack:
      993      103                    o None:  there's no InTree, we're done evaluating,
      994      104                        return SIGNAL = %FALSE.
      995      105                    o Anything except IT_SELECT:  pop this VD$EVAL off the
      996      106                        stack; keep popping til we get to an EVAL which
      997      107                        points to an IT_SELECT node which has some
      998      108                        repetitions remaining.  These VD$EVALs that
      999      109                        we're popping are left over from the last evaluation
     1000      110                        of this InTree, from generators other than IT_SELECTs
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:127  
     1001      111                        or from IT_SELECTs whose repetitions have run out.
     1002      112        *??*            The only alternatives which survive between successive
     1003      113        *??*            evaluations are those of an IT_SELECT generator.
     1004      114
     1005      115                Loop, evaluating each IT_SELECT node in the InTree.
     1006      116                After evaluating each IT_SELECT node:
     1007      117                Decrement the .REMAINING count.
     1008      118                If the signal is true:
     1009      119                    If this is the last IT_SELECT node in the InTree,
     1010      120                        return with SIGNAL = %TRUE.
     1011      121                    If this isn't the last IT_SELECT node in the InTree,
     1012      122                        push a new VD$EVAL on the stack for the new IT_SELECT
     1013      123                        node:
     1014      124                            new EVAL.RANGE := an empty range at the old
     1015      125                                            tos-VD$EVAL's range start location
     1016      126                            new EVAL.ENCLOSING := old tos-VD$EVAL's range
     1017      127                            new EVAL.STATE := EVST_INITIAL
     1018      128                            new EVAL.REMAINING := new IT_SELECT node's repeat count
     1019      129                        Loop to evaluate the new IT_SELECT node.
     1020      130                If the signal is false, backtrack:
     1021      131                    First, look at the top VD$EVAL on the stack:
     1022      132                        If it's for an IT_SELECT node, forget it:  the first failure
     1023      133                            is failure for all alternatives.
     1024      134                        If it's not for an IT_SELECT node, then failure for one
     1025      135                            alternative doesn't imply anything about the other
     1026      136                            alternatives; if it's .REMAINING > 0, it's Intree node
     1027      137                            can generate more ranges:
     1028      138                            o If it's an OPOR_OR, copy the range and state from the
     1029      139                                previous VD$EVAL on the stack, and begin evaluating
     1030      140                                the IT_OPERAND's second ("right-hand") child.
     1031      141                        If it's an IT_SELECT node or the .REMAINING count is 0, pop
     1032      142                            the VD$EVAL off the stack.
     1033      143                    If we had to pop the stack, see if the new tos-VD$EVAL's
     1034      144                        .REMAINING is > 0; if not, keep popping til we find one whose
     1035      145                        .REMAINING is > 0:  when we do:
     1036      146                        o If it's an IT_SELECT, reset the range to an empty range
     1037      147                            at the current range end location, and reset the
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:128  
     1038      148                            state to EVST_INITIAL.  Begin evaluating the
     1039      149                            IT_SELECT's children again.
     1040      150                        o If it's an OPOR_OR, do as above for OPOR_OR.
     1041      151                    If we keep popping til we empty the stack, return with SIGNAL =
     1042      152                        %FALSE.
     1043      153        */
     1044      154
     1045      155        VDE$IRANGE: PROC (OPERAND, SIGNAL) ALTRET;

    155  0 000000   000000 700200 xent  VDE$IRANGE   TSX0  ! X66_AUTO_2
         0 000001   000036 000002                    ZERO    30,2

     1046      156
     1047      157
     1048      158        %INCLUDE VD_MACROS_M;
     1049     2373        %INCLUDE VD_PERR_C;
     1050     2521
     1051     2522
     1052     2523        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1053     2537    1   DCL SIGNAL BIT(1) ALIGNED;
     1054     2538
     1055     2539
     1056     2540
     1057     2541    1   DCL VDE$IADJUST         ENTRY (3) ALTRET;
     1058     2542    1   DCL VDE$IGUAR_RANGE_IN_RANGE ENTRY (4) ALTRET;
     1059     2543    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     1060     2544    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1061     2545    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1062     2546    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
     1063     2547    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1064     2548    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1065     2549    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1066     2550    1   DCL VDG$ESCREECH        ENTRY (3);
     1067     2551    1   DCL VDG$MEVAL_START_EVAL ENTRY (1);
     1068     2552    1   DCL VDG$MEVAL_FOUND_RANGE ENTRY (1);
     1069     2553
     1070     2554
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:129  
     1071     2555        %VD$NUMBER (NAME=VD_$$MON_EVAL, STCLASS=SYMREF);
     1072     2600
     1073     2601
     1074     2602
     1075     2603    1   DCL TOS_EVAL$ PTR;
     1076     2604    1   DCL TEST_EVAL$ PTR;
     1077     2605    1   DCL PREV_EVAL$ PTR;
     1078     2606    1   DCL IT_SELECT$ PTR;
     1079     2607    1   DCL TRUNCATED BIT(1) ALIGNED;
     1080     2608    1   DCL COMPLETELY_OUTSIDE BIT(1) ALIGNED;
     1081     2609    1   DCL RCCL SBIN;
     1082     2610
     1083     2611
     1084     2612        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1085     2857        %VD$EVAL (NAME=TEST$EVAL, STCLASS="BASED(TEST_EVAL$)");
     1086     3102        %VD$EVAL (NAME=PREV$EVAL, STCLASS="BASED(PREV_EVAL$)");
     1087     3347        %VD$IT_SELECT (NAME=IT$SELECT, STCLASS="BASED(IT_SELECT$)");
     1088     3384        %VD$OBJECT_HEADER;
     1089     3406        %VD$IT_OPERATOR;
     1090     3443
     1091     3444
     1092     3445
     1093     3446    1           SIGNAL = %TRUE;

   3446  0 000002   400000 236003                    LDQ     -131072,DU
         0 000003   200004 470500                    LDP0    @SIGNAL,,AUTO
         0 000004   000000 756100                    STQ     0,,PR0

     1094     3447    1           TOS_EVAL$ = OPERAND.EVAL$;

   3447  0 000005   200003 471500                    LDP1    @OPERAND,,AUTO
         0 000006   100003 236100                    LDQ     3,,PR1
         0 000007   200005 756100                    STQ     TOS_EVAL$,,AUTO

     1095     3448
     1096     3449    1           IF VD_$$MON_EVAL.V# > 0 THEN

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:130  
   3449  0 000010   000003 235000 xsym               LDA     VD_$$MON_EVAL+3
         0 000011   000016 604400 0                  TMOZ    FIND_TOP_SELECT

     1097     3450    1              CALL VDG$MEVAL_START_EVAL (OPERAND);

   3450  0 000012   200003 630500                    EPPR0   @OPERAND,,AUTO
         0 000013   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000014   000000 701000 xent               TSX1    VDG$MEVAL_START_EVAL
         0 000015   000000 011000                    NOP     0

     1098     3451
     1099     3452                /*
     1100     3453                *  Pop the evaluation stack til we get an IT_SELECT which
     1101     3454                *     has some remaining repetitions.
     1102     3455                */
     1103     3456    1   FIND_TOP_SELECT:
     1104     3457    2           DO WHILE TOS_EVAL$ ~= ADDR(NIL);

   3457  0 000016   000050 710000 0     FIND_TOP_SE* TRA     s:3470

     1105     3458    2              IF TOS$EVAL.NODE$ ~= ADDR(NIL) THEN

   3458  0 000017   200005 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000020   000071 236100                    LDQ     57,,PR0
         0 000021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000022   000031 600000 0                  TZE     s:3462

     1106     3459    2                 IF TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS# = %CLS_IT_SELECT

   3459  0 000023   000071 471500                    LDP1    57,,PR0
         0 000024   100000 220100                    LDX0    0,,PR1
         0 000025   000027 100003                    CMPX0   23,DU
         0 000026   000031 601000 0                  TNZ     s:3462
         0 000027   000072 235100                    LDA     58,,PR0
         0 000030   000053 605400 0                  TPNZ    s:3471

     1107     3460    2                   AND TOS$EVAL.REMAINING# > 0 THEN
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:131  
     1108     3461    2                    EXIT FIND_TOP_SELECT;
     1109     3462    2              IF TOS$EVAL.BLINK$ = ADDR(NIL) THEN

   3462  0 000031   000001 236100                    LDQ     1,,PR0
         0 000032   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000033   000037 601000 0                  TNZ     s:3465

     1110     3463    2                 TOS_EVAL$ = ADDR(NIL);  /* Leave 1 EVAL in stack */

   3463  0 000034   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000035   200005 756100                    STQ     TOS_EVAL$,,AUTO
         0 000036   000050 710000 0                  TRA     s:3470

     1111     3464    3              ELSE DO;

     1112     3465    3                 OPERAND.EVAL$ = TOS$EVAL.BLINK$;

   3465  0 000037   200003 471500                    LDP1    @OPERAND,,AUTO
         0 000040   100003 756100                    STQ     3,,PR1

     1113     3466    3                 CALL VDG$OFREE (TOS$EVAL)

   3466  0 000041   200005 630500                    EPPR0   TOS_EVAL$,,AUTO
         0 000042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000043   000000 701000 xent               TSX1    VDG$OFREE
         0 000044   000402 702000 0                  TSX2    OALLOC_FAILED

     1114     3467    3                   ALTRET (OFREE_FAILED);
     1115     3468    3                 TOS_EVAL$ = OPERAND.EVAL$;

   3468  0 000045   200003 470500                    LDP0    @OPERAND,,AUTO
         0 000046   000003 236100                    LDQ     3,,PR0
         0 000047   200005 756100                    STQ     TOS_EVAL$,,AUTO

     1116     3469    3                 END;

     1117     3470    2              END;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:132  

   3470  0 000050   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000051   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000052   000017 601000 0                  TNZ     s:3458

     1118     3471    2           IF TOS_EVAL$ = ADDR(NIL) THEN DO;

   3471  0 000053   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000054   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000055   000061 601000 0                  TNZ     EVAL_SELECTS

     1119     3472    2              SIGNAL = %FALSE;

   3472  0 000056   200004 470500                    LDP0    @SIGNAL,,AUTO
         0 000057   000000 450100                    STZ     0,,PR0

     1120     3473    2              RETURN;

   3473  0 000060   000000 702200 xent               TSX2  ! X66_ARET

     1121     3474    2              END;
     1122     3475
     1123     3476
     1124     3477    1   EVAL_SELECTS:
     1125     3478    2           DO UNTIL NOT SIGNAL;

   3478  0 000061                       EVAL_SELECTS null
     1126     3479
     1127     3480    2              IF TOS$EVAL.REMAINING# > 0 THEN

   3480  0 000061   200005 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000062   000072 235100                    LDA     58,,PR0
         0 000063   000103 604400 0                  TMOZ    s:3493

     1128     3481    3              DO CASE (TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS#);

   3481  0 000064   000071 471500                    LDP1    57,,PR0
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:133  
         0 000065   100000 236100                    LDQ     0,,PR1
         0 000066   000022 772000                    QRL     18
         0 000067   000027 136007                    SBLQ    23,DL
         0 000070   000001 116007                    CMPQ    1,DL
         0 000071   000073 602006 0                  TNC     s:3481+7,QL
         0 000072   000103 710000 0                  TRA     s:3493
         0 000073   000074 710000 0                  TRA     s:3483

     1129     3482    3               CASE (%CLS_IT_SELECT);

     1130     3483    3                 CALL ISELECT (OPERAND, SIGNAL)

   3483  0 000074   200004 236100                    LDQ     @SIGNAL,,AUTO
         0 000075   200016 756100                    STQ     @OPERAND+1,,AUTO
         0 000076   200003 236100                    LDQ     @OPERAND,,AUTO
         0 000077   200015 756100                    STQ     RCCL+2,,AUTO
         0 000100   000403 701000 0                  TSX1    ISELECT
         0 000101   000402 702000 0                  TSX2    OALLOC_FAILED
         0 000102   000103 710000 0                  TRA     s:3493

     1131     3484    3                   ALTRET (ISELECT_FAILED);
     1132     3485    3               CASE (%CLS_IT_OPERATOR);

     1133     3486                      /*N* CALL VDE$IOPERATOR (OPERAND, SIGNAL) */
     1134     3487                      /*N*   ALTRET (IOPERATOR_FAILED);         */
     1135     3488    3               END;

     1136     3489                   /*
     1137     3490                   *  We may have pushed new VD$EVALs on the stack, for
     1138     3491                   *    other generators:  get the new tos-VD$EVAL.
     1139     3492                   */
     1140     3493    2              TOS_EVAL$ = OPERAND.EVAL$;

   3493  0 000103   200003 470500                    LDP0    @OPERAND,,AUTO
         0 000104   000003 236100                    LDQ     3,,PR0
         0 000105   200005 756100                    STQ     TOS_EVAL$,,AUTO

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:134  
     1141     3494
     1142     3495                   /* Success or failure, we're doing one evaluation */
     1143     3496    2              TOS$EVAL.REMAINING# = MAXIMUM(0, TOS$EVAL.REMAINING# - 1);

   3496  0 000106   200005 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000107   100072 236100                    LDQ     58,,PR1
         0 000110   000001 136007                    SBLQ    1,DL
         0 000111   000000 116003                    CMPQ    0,DU
         0 000112   000114 605000 0                  TPL     s:3496+6
         0 000113   000000 236003                    LDQ     0,DU
         0 000114   100072 756100                    STQ     58,,PR1

     1144     3497
     1145     3498    2              IF SIGNAL THEN

   3498  0 000115   200004 473500                    LDP3    @SIGNAL,,AUTO
         0 000116   300000 234100                    SZN     0,,PR3
         0 000117   000262 605000 0                  TPL     SIGNAL_FALSE

     1146     3499    3   SIGNAL_TRUE: DO;

   3499  0 000120                       SIGNAL_TRUE  null
     1147     3500    3                 IF VD_$$MON_EVAL.V# > 0 THEN

   3500  0 000120   000003 235000 xsym               LDA     VD_$$MON_EVAL+3
         0 000121   000126 604400 0                  TMOZ    s:3505

     1148     3501    3                    CALL VDG$MEVAL_FOUND_RANGE (TOS$EVAL);

   3501  0 000122   200005 630500                    EPPR0   TOS_EVAL$,,AUTO
         0 000123   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000124   000000 701000 xent               TSX1    VDG$MEVAL_FOUND_RANGE
         0 000125   000000 011000                    NOP     0

     1149     3502                      /*
     1150     3503                      *  Find the IT_SELECT node we're evaluating for.
     1151     3504                      */
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:135  
     1152     3505    3                 TEST_EVAL$ = TOS_EVAL$;

   3505  0 000126   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000127   200006 756100                    STQ     TEST_EVAL$,,AUTO

     1153     3506    3                 IT_SELECT$ = ADDR(NIL);

   3506  0 000130   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000131   200010 756100                    STQ     IT_SELECT$,,AUTO

     1154     3507    4                 DO WHILE IT_SELECT$ = ADDR(NIL);

   3507  0 000132   000153 710000 0                  TRA     s:3516

     1155     3508    5                    DO WHILE TEST$EVAL.NODE$ = ADDR(NIL);

   3508  0 000133   000137 710000 0                  TRA     s:3510

     1156     3509    5                       TEST_EVAL$ = TEST$EVAL.BLINK$;

   3509  0 000134   200006 470500                    LDP0    TEST_EVAL$,,AUTO
         0 000135   000001 236100                    LDQ     1,,PR0
         0 000136   200006 756100                    STQ     TEST_EVAL$,,AUTO

     1157     3510    5                       END;

   3510  0 000137   200006 470500                    LDP0    TEST_EVAL$,,AUTO
         0 000140   000071 236100                    LDQ     57,,PR0
         0 000141   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000142   000134 600000 0                  TZE     s:3509

     1158     3511    4                    IF TEST$EVAL.NODE$->VD$OBJECT_HEADER.CLASS# =

   3511  0 000143   000071 471500                    LDP1    57,,PR0
         0 000144   100000 220100                    LDX0    0,,PR1
         0 000145   000027 100003                    CMPX0   23,DU
         0 000146   000151 601000 0                  TNZ     s:3515
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:136  

     1159     3512    4                      %CLS_IT_SELECT THEN
     1160     3513    4                       IT_SELECT$ = TEST$EVAL.NODE$;

   3513  0 000147   200010 756100                    STQ     IT_SELECT$,,AUTO
         0 000150   000153 710000 0                  TRA     s:3516

     1161     3514    4                    ELSE
     1162     3515    4                       TEST_EVAL$ = TEST$EVAL.BLINK$;

   3515  0 000151   000001 236100                    LDQ     1,,PR0
         0 000152   200006 756100                    STQ     TEST_EVAL$,,AUTO

     1163     3516    4                    END;

   3516  0 000153   200010 236100                    LDQ     IT_SELECT$,,AUTO
         0 000154   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000155   000133 600000 0                  TZE     s:3508

     1164     3517
     1165     3518                      /* Flink to the next IT_SELECT node */
     1166     3519    3                 IT_SELECT$ = IT$SELECT.FLINK$;

   3519  0 000156   200010 470500                    LDP0    IT_SELECT$,,AUTO
         0 000157   000002 236100                    LDQ     2,,PR0
         0 000160   200010 756100                    STQ     IT_SELECT$,,AUTO

     1167     3520    3                 IF IT_SELECT$ = ADDR(NIL) THEN

   3520  0 000161   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000162   000164 601000 0                  TNZ     s:3524

     1168     3521    3                    RETURN;        /* Found a range for entire InTree */

   3521  0 000163   000000 702200 xent               TSX2  ! X66_ARET

     1169     3522
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:137  
     1170     3523                      /* Push a new VD$EVAL for the new IT_SELECT node */
     1171     3524    3                 PREV_EVAL$ = TOS_EVAL$;

   3524  0 000164   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000165   200007 756100                    STQ     PREV_EVAL$,,AUTO

     1172     3525    3                 CALL VDG$OALLOC (%CLS_EVAL, OPERAND.EVAL$)

   3525  0 000166   200003 236100                    LDQ     @OPERAND,,AUTO
         0 000167   000003 036003                    ADLQ    3,DU
         0 000170   000000 235000 1                  LDA     0
         0 000171   200032 757100                    STAQ    TEMP_START+9,,AUTO
         0 000172   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000173   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000174   000000 701000 xent               TSX1    VDG$OALLOC
         0 000175   000402 702000 0                  TSX2    OALLOC_FAILED

     1173     3526    3                   ALTRET (OALLOC_FAILED);
     1174     3527    3                 TOS_EVAL$ = OPERAND.EVAL$;

   3527  0 000176   200003 470500                    LDP0    @OPERAND,,AUTO
         0 000177   000003 236100                    LDQ     3,,PR0
         0 000200   200005 756100                    STQ     TOS_EVAL$,,AUTO

     1175     3528    3                 TOS$EVAL.BLINK$ = PREV_EVAL$;

   3528  0 000201   200007 236100                    LDQ     PREV_EVAL$,,AUTO
         0 000202   200005 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000203   100001 756100                    STQ     1,,PR1

     1176     3529    3                 CALL VDG$OCOPY_RANGE (PREV$EVAL.RANGE, TOS$EVAL.ENCLOSING)

   3529  0 000204   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000205   000002 036003                    ADLQ    2,DU
         0 000206   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000207   200007 236100                    LDQ     PREV_EVAL$,,AUTO
         0 000210   000024 036003                    ADLQ    20,DU
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:138  
         0 000211   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000212   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000213   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000214   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         0 000215   000402 702000 0                  TSX2    OALLOC_FAILED

     1177     3530    3                   ALTRET (OCOPY_RANGE_FAILED);
     1178     3531    3                 CALL VDG$OCOPY_LOCATION (PREV$EVAL.RANGE.START,

   3531  0 000216   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000217   000024 036003                    ADLQ    20,DU
         0 000220   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000221   200007 236100                    LDQ     PREV_EVAL$,,AUTO
         0 000222   000024 036003                    ADLQ    20,DU
         0 000223   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000224   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000225   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000226   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000227   000402 702000 0                  TSX2    OALLOC_FAILED

     1179     3532    3                   TOS$EVAL.RANGE.START)
     1180     3533    3                   ALTRET (OCOPY_LOCATION_FAILED);
     1181     3534    3                 CALL VDG$OCOPY_LOCATION (PREV$EVAL.RANGE.START,

   3534  0 000230   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000231   000035 036003                    ADLQ    29,DU
         0 000232   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000233   200007 236100                    LDQ     PREV_EVAL$,,AUTO
         0 000234   000024 036003                    ADLQ    20,DU
         0 000235   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000236   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000237   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000240   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000241   000402 702000 0                  TSX2    OALLOC_FAILED

     1182     3535    3                   TOS$EVAL.RANGE.ENDD)
     1183     3536    3                   ALTRET (OCOPY_LOCATION_FAILED);
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:139  
     1184     3537    3                 TOS$EVAL.STATE# = %EVST_INITIAL;

   3537  0 000242   000001 220003                    LDX0    1,DU
         0 000243   200005 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000244   000070 740100                    STX0    56,,PR0

     1185     3538    3                 TOS$EVAL.NODE$ = IT_SELECT$;

   3538  0 000245   200010 236100                    LDQ     IT_SELECT$,,AUTO
         0 000246   000071 756100                    STQ     57,,PR0

     1186     3539    3                 IF IT$SELECT.RPT_ALL THEN

   3539  0 000247   200010 471500                    LDP1    IT_SELECT$,,AUTO
         0 000250   100003 234100                    SZN     3,,PR1
         0 000251   000255 605000 0                  TPL     s:3542

     1187     3540    3                    TOS$EVAL.REMAINING# = %MX_REPEAT_COUNT;

   3540  0 000252   377777 235007                    LDA     131071,DL
         0 000253   000072 755100                    STA     58,,PR0
         0 000254   000376 710000 0                  TRA     s:3587

     1188     3541    3                 ELSE
     1189     3542    3                    TOS$EVAL.REMAINING# = IT$SELECT.RPT_COUNT#;

   3542  0 000255   100003 236100                    LDQ     3,,PR1
         0 000256   000022 736000                    QLS     18
         0 000257   000022 732000                    QRS     18
         0 000260   000072 756100                    STQ     58,,PR0

     1190     3543    3                 END SIGNAL_TRUE;

   3543  0 000261   000376 710000 0                  TRA     s:3587

     1191     3544    2              ELSE
     1192     3545    3   SIGNAL_FALSE: DO;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:140  

   3545  0 000262                       SIGNAL_FALSE null
     1193     3546    3                 IF TOS$EVAL.NODE$ -> VD$OBJECT_HEADER.CLASS# =

   3546  0 000262   100071 474500                    LDP4    57,,PR1
         0 000263   400000 220100                    LDX0    0,,PR4
         0 000264   000027 100003                    CMPX0   23,DU
         0 000265   000267 601000 0                  TNZ     s:3552

     1194     3547    3                   %CLS_IT_SELECT THEN
     1195     3548    3                    TOS$EVAL.REMAINING# = 0;   /* Don't try any more */

   3548  0 000266   100072 450100                    STZ     58,,PR1

     1196     3549                      /*
     1197     3550                      *  Backtrack to a generator with some alternatives left.
     1198     3551                      */
     1199     3552    4                 DO WHILE TOS$EVAL.REMAINING# <= 0

   3552  0 000267   000303 710000 0                  TRA     s:3558

     1200     3553    4                   AND TOS$EVAL.BLINK$ ~= ADDR(NIL);
     1201     3554    4                    OPERAND.EVAL$ = TOS$EVAL.BLINK$;

   3554  0 000270   200005 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000271   000001 236100                    LDQ     1,,PR0
         0 000272   200003 471500                    LDP1    @OPERAND,,AUTO
         0 000273   100003 756100                    STQ     3,,PR1

     1202     3555    4                    CALL VDG$OFREE (TOS$EVAL)

   3555  0 000274   200005 630500                    EPPR0   TOS_EVAL$,,AUTO
         0 000275   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000276   000000 701000 xent               TSX1    VDG$OFREE
         0 000277   000402 702000 0                  TSX2    OALLOC_FAILED

     1203     3556    4                      ALTRET (OFREE_FAILED);
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:141  
     1204     3557    4                    TOS_EVAL$ = OPERAND.EVAL$;  /* Load new TOS ptr */

   3557  0 000300   200003 470500                    LDP0    @OPERAND,,AUTO
         0 000301   000003 236100                    LDQ     3,,PR0
         0 000302   200005 756100                    STQ     TOS_EVAL$,,AUTO

     1205     3558    4                    END;

   3558  0 000303   200005 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000304   100072 235100                    LDA     58,,PR1
         0 000305   000311 605400 0                  TPNZ    s:3559
         0 000306   100001 236100                    LDQ     1,,PR1
         0 000307   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000310   000270 601000 0                  TNZ     s:3554

     1206     3559    4                 IF TOS$EVAL.REMAINING# <= 0 THEN DO;

   3559  0 000311   000000 115003                    CMPA    0,DU
         0 000312   000316 605400 0                  TPNZ    s:3565

     1207     3560                         /* No more backtracks: done w/InTree */
     1208     3561    4                    SIGNAL = %FALSE;

   3561  0 000313   200004 473500                    LDP3    @SIGNAL,,AUTO
         0 000314   300000 450100                    STZ     0,,PR3

     1209     3562    4                    RETURN;

   3562  0 000315   000000 702200 xent               TSX2  ! X66_ARET

     1210     3563    4                    END;
     1211     3564
     1212     3565    4                 DO CASE (TOS$EVAL.NODE$->VD$OBJECT_HEADER.CLASS#);

   3565  0 000316   100071 473500                    LDP3    57,,PR1
         0 000317   300000 236100                    LDQ     0,,PR3
         0 000320   000022 772000                    QRL     18
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:142  
         0 000321   000026 136007                    SBLQ    22,DL
         0 000322   000002 116007                    CMPQ    2,DL
         0 000323   000325 602006 0                  TNC     s:3565+7,QL
         0 000324   000373 710000 0                  TRA     s:3585
         0 000325   000332 710000 0                  TRA     s:3571
         0 000326   000327 710000 0                  TRA     s:3568

     1213     3566    4                  CASE (%CLS_IT_SELECT);

     1214     3567                         /* Start from end of last-found range */
     1215     3568    4                    TOS$EVAL.STATE# = %EVST_INITIAL;

   3568  0 000327   000001 220003                    LDX0    1,DU
         0 000330   100070 740100                    STX0    56,,PR1
         0 000331   000373 710000 0                  TRA     s:3585

     1216     3569
     1217     3570    4                  CASE (%CLS_IT_OPERATOR);

     1218     3571    4                    PREV_EVAL$ = TOS$EVAL.BLINK$;

   3571  0 000332   100001 236100                    LDQ     1,,PR1
         0 000333   200007 756100                    STQ     PREV_EVAL$,,AUTO

     1219     3572    4                    IF PREV_EVAL$ = ADDR(NIL) THEN

   3572  0 000334   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000335   000341 601000 0                  TNZ     s:3574

     1220     3573    4                       CALL VDG$ESCREECH;

   3573  0 000336   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000337   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000340   000000 011000                    NOP     0

     1221     3574    4                    IF TOS$EVAL.NODE$->VD$IT_OPERATOR.CODE# =

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:143  
   3574  0 000341   200005 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000342   000071 471500                    LDP1    57,,PR0
         0 000343   100003 220100                    LDX0    3,,PR1
         0 000344   000003 100003                    CMPX0   3,DU
         0 000345   000373 601000 0                  TNZ     s:3585

     1222     3575    5                      %OPOR_OR THEN DO;

     1223     3576    5                       CALL VDG$OCLEAR_RANGE (TOS$EVAL.RANGE)

   3576  0 000346   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000347   000024 036003                    ADLQ    20,DU
         0 000350   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000351   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000352   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000353   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         0 000354   000402 702000 0                  TSX2    OALLOC_FAILED

     1224     3577    5                         ALTRET (OCLEAR_RANGE_FAILED);
     1225     3578    5                       CALL VDG$OCOPY_RANGE (PREV$EVAL.RANGE,

   3578  0 000355   200005 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000356   000024 036003                    ADLQ    20,DU
         0 000357   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000360   200007 236100                    LDQ     PREV_EVAL$,,AUTO
         0 000361   000024 036003                    ADLQ    20,DU
         0 000362   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000363   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000364   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000365   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         0 000366   000402 702000 0                  TSX2    OALLOC_FAILED

     1226     3579    5                         TOS$EVAL.RANGE)
     1227     3580    5                         ALTRET (OCOPY_RANGE_FAILED);
     1228     3581    5                       TOS$EVAL.STATE# = PREV$EVAL.STATE#;

   3581  0 000367   200007 470500                    LDP0    PREV_EVAL$,,AUTO
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:144  
         0 000370   000070 220100                    LDX0    56,,PR0
         0 000371   200005 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000372   100070 740100                    STX0    56,,PR1

     1229     3582    5                       END;

     1230     3583    4                  END;

     1231     3584
     1232     3585    3                 SIGNAL = %TRUE;

   3585  0 000373   400000 236003                    LDQ     -131072,DU
         0 000374   200004 470500                    LDP0    @SIGNAL,,AUTO
         0 000375   000000 756100                    STQ     0,,PR0

     1233     3586    3                 END SIGNAL_FALSE;

     1234     3587    2              END EVAL_SELECTS;

   3587  0 000376   200004 470500                    LDP0    @SIGNAL,,AUTO
         0 000377   000000 234100                    SZN     0,,PR0
         0 000400   000061 604000 0                  TMI     EVAL_SELECTS

     1235     3588
     1236     3589
     1237     3590    1           RETURN;

   3590  0 000401   000000 702200 xent               TSX2  ! X66_ARET

   3577  0 000402                       OALLOC_FAIL* null
   3577  0 000402                       OFREE_FAILED null
     1238     3591
     1239     3592
     1240     3593
     1241     3594    1   OALLOC_FAILED: ;
     1242     3595    1   OFREE_FAILED: ;
     1243     3596    1   ISELECT_FAILED: ;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:145  

   3596  0 000402                       ISELECT_FAI* null
   3596  0 000402                       OCLEAR_LOCA* null
   3596  0 000402                       OCOPY_LOCAT* null
   3596  0 000402                       OCLEAR_RANG* null
   3596  0 000402                       OCOPY_RANGE* null
     1244     3597    1   OCLEAR_LOCATION_FAILED: ;
     1245     3598    1   OCOPY_LOCATION_FAILED: ;
     1246     3599    1   OCLEAR_RANGE_FAILED: ;
     1247     3600    1   OCOPY_RANGE_FAILED: ;
     1248     3601    1           ALTRETURN;

   3601  0 000402   000000 702200 xent               TSX2  ! X66_AALT

     1249     3602
     1250     3603
     1251     3604                %BOX (TITLE="ISELECT", PAGE=YES);
              3612    1
              3616    1   /***************************************************************************
              3618    1    *                                                                         *
              3622    1            *                                  ISELECT                               *
              3624    1            *                                                                        *
              3626    1          ***************************************************************************/

     1252     3630
     1253     3631        /*I* NAME:  ISELECT
     1254     3632            PARAMETERS:
     1255     3633                OPERAND - The VD$OPERAND whose InTree we're evaluating.
     1256     3634                    In OPERAND's EVAL$ (top VD$EVAL on the evaluation stack):
     1257     3635                    o TOS$EVAL.RANGE must specify the initial range for
     1258     3636                        evaluation.  This range must lie completely within
     1259     3637                        the enclosing limits (TOS$EVAL.ENCLOSING).
     1260     3638                    o TOS$EVAL.STATE# must contain the state of evaluation.
     1261     3639                    o TOS$EVAL.NODE$ must point to the IT_SELECT InTree node
     1262     3640                        to evaluate.
     1263     3641                    o This IT_SELECT node must have at least one repetition
     1264     3642                        remaining.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:146  
     1265     3643                SIGNAL - An uninitialized BIT(1) ALIGNED.
     1266     3644            INPUT:
     1267     3645            OUTPUT:
     1268     3646                OPERAND may have a new VD$EVAL at the top of it's evaluation
     1269     3647                    stack, if we evaluated any generators.
     1270     3648                TOS$EVAL.STATE# and .RANGE may be modified:  they will contain
     1271     3649                    the final state and range bounds evaluated for this
     1272     3650                    IT_SELECT node.
     1273     3651                TOS$EVAL.LAST_FOUND_RANGE will specify the same range that
     1274     3652                    TOS$EVAL.RANGE specified at entry to this routine.
     1275     3653                TOS$EVAL.REMAINING# may be forced to 0 (when we want to stop any
     1276     3654                    further evaluation of an IT_SELECT (???Operator???) node).
     1277     3655                SIGNAL will contain true or false, as described for VDE$IRANGE.
     1278     3656            DESCRIPTION:
     1279     3657                Clear TOS$EVAL.LAST_FOUND_RANGE to begin with.  If this is a repeated
     1280     3658                    SELECT clause, then copy TOS$EVAL.RANGE to .LAST_FOUND_RANGE,
     1281     3659                    so we can compare any newly-found range with the last one found
     1282     3660                    to be sure we're making forward progress.
     1283     3661                    If this isn't a repeated SELECT clause, we want to make sure that
     1284     3662                    the comparison at the end of ISELECT finds progress:  by
     1285     3663                    definition, a single SELECT represents "progress".
     1286     3664                    ((Test case:  ED FI x:  at entry to ISELECT, TOS$EVAL.RANGE
     1287     3665                    is BOF - EOF, and that's the range found for the SELECT.
     1288     3666                    Even tho it's the same as the "last found range", it should
     1289     3667                    succeed.))
     1290     3668                For each child of the IT_SELECT node:
     1291     3669                    Make any state change specified by IT$ADJUST.NEW_STATE#.
     1292     3670                    Call VDE$IADJUST.
     1293     3671                Guarantee that the evaluated range's start bound is
     1294     3672                    located before or equal to its end bound in the domain.
     1295     3673                    If not, switch the start and end bounds.
     1296     3674                If any call to VDE$IADJUST returns a false signal,
     1297     3675                    return immediately.
     1298     3676                Compare the newly-found TOS$EVAL.RANGE with .LAST_FOUND_RANGE:
     1299     3677                    if they're equal, return a false SIGNAL -- and set
     1300     3678                    TOS$EVAL.REMAINING# to 0 to force failure of all alternatives.
     1301     3679                    ((See star 22441, cases 2, 3, and 4 and the case in the star
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:147  
     1302     3680                    description:
     1303     3681                        REPEAT SE BA SK 1 RE
     1304     3682                        DE L REPE SE RE SE PO 5 TH EO RE
     1305     3683                        CO ST 'A' OV REPE SE RE PO 1 SE '.'
     1306     3684                        EO CURR; CO ST 'X' OV REPE SE BA SK 2 RE SE '.'
     1307     3685                    All these cases need to fail when a REPEAT SELECT finds the same
     1308     3686                    range repeatedly.))
     1309     3687        */
     1310     3688
     1311     3689    1   ISELECT: PROC (OPERAND, SIGNAL) ALTRET;

   3689  0 000403   200014 741300       ISELECT      STX1  ! RCCL+1,,AUTO

     1312     3690
     1313     3691        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1314     3705    2   DCL SIGNAL BIT(1) ALIGNED;
     1315     3706
     1316     3707
     1317     3708    2   DCL TOS_EVAL$ PTR;
     1318     3709    2   DCL IT_ADJUST$ PTR;
     1319     3710        %VD$LOCATION (NAME=TEMP_START, STCLASS=AUTO);
     1320     3738
     1321     3739
     1322     3740        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1323     3985        %VD$IT_ADJUST (NAME=IT$ADJUST, STCLASS="BASED(IT_ADJUST$)");
     1324     4022        %VD$IT_SELECT;
     1325     4059
     1326     4060
     1327     4061
     1328     4062    2           SIGNAL = %TRUE;

   4062  0 000404   400000 236003                    LDQ     -131072,DU
         0 000405   200016 470500                    LDP0    @SIGNAL,,AUTO
         0 000406   000000 756100                    STQ     0,,PR0

     1329     4063    2           TOS_EVAL$ = OPERAND.EVAL$;

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:148  
   4063  0 000407   200015 471500                    LDP1    @OPERAND,,AUTO
         0 000410   100003 236100                    LDQ     3,,PR1
         0 000411   200017 756100                    STQ     TOS_EVAL$,,AUTO

     1330     4064    2           CALL VDG$OCLEAR_RANGE (TOS$EVAL.LAST_FOUND_RANGE)

   4064  0 000412   000046 036003                    ADLQ    38,DU
         0 000413   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000414   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000415   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000416   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         0 000417   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1331     4065    2             ALTRET (OCLEAR_RANGE_FAILED);
     1332     4066    2           IF TOS$EVAL.NODE$->VD$IT_SELECT.RPT_ALL

   4066  0 000420   200017 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000421   000071 471500                    LDP1    57,,PR0
         0 000422   100003 234100                    SZN     3,,PR1
         0 000423   000427 604000 0                  TMI     s:4068
         0 000424   100003 720100                    LXL0    3,,PR1
         0 000425   000001 100003                    CMPX0   1,DU
         0 000426   000441 604400 0                  TMOZ    s:4076

     1333     4067    3             OR TOS$EVAL.NODE$->VD$IT_SELECT.RPT_COUNT# > 1 THEN DO;

     1334     4068    3              CALL VDG$OCOPY_RANGE (TOS$EVAL.RANGE, TOS$EVAL.LAST_FOUND_RANGE)

   4068  0 000427   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000430   000046 036003                    ADLQ    38,DU
         0 000431   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000432   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000433   000024 036003                    ADLQ    20,DU
         0 000434   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000435   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000436   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000437   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:149  
         0 000440   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1335     4069    3                ALTRET (OCOPY_RANGE_FAILED);
     1336     4070    3              END;

     1337     4071
     1338     4072                /*
     1339     4073                *   Evaluate the SELECT clause
     1340     4074                */
     1341     4075
     1342     4076    2           IT_ADJUST$ = TOS$EVAL.NODE$->VD$IT_SELECT.ADJUSTS$;

   4076  0 000441   200017 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000442   000071 471500                    LDP1    57,,PR0
         0 000443   100004 236100                    LDQ     4,,PR1
         0 000444   200020 756100                    STQ     IT_ADJUST$,,AUTO

     1343     4077
     1344     4078    2   EACH_IT_ADJUST:
     1345     4079    3           DO WHILE IT_ADJUST$ ~= ADDR(NIL)

   4079  0 000445   000611 710000 0     EACH_IT_ADJ* TRA     s:4125

     1346     4080    3             AND SIGNAL;
     1347     4081
     1348     4082    4              DO CASE (IT$ADJUST.NEW_STATE#);

   4082  0 000446   200020 470500                    LDP0    IT_ADJUST$,,AUTO
         0 000447   000003 220100                    LDX0    3,,PR0
         0 000450   000005 100003                    CMPX0   5,DU
         0 000451   000453 602010 0                  TNC     s:4082+5,X0
         0 000452   000563 710000 0                  TRA     s:4113
         0 000453   000572 710000 0                  TRA     s:4116
         0 000454   000563 710000 0                  TRA     s:4113
         0 000455   000460 710000 0                  TRA     s:4088
         0 000456   000460 710000 0                  TRA     s:4088
         0 000457   000551 710000 0                  TRA     s:4107
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:150  

     1349     4083    4               CASE (0);

     1350     4084    4                 ;     /* Do nothing: no state change */
     1351     4085
     1352     4086    4               CASE (%EVST_START, %EVST_END);

     1353     4087                      /* Collapse range to current FP location */
     1354     4088    5                 DO CASE (TOS$EVAL.STATE#);

   4088  0 000460   200017 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000461   100070 221100                    LDX1    56,,PR1
         0 000462   000004 101003                    CMPX1   4,DU
         0 000463   000465 602011 0                  TNC     s:4088+5,X1
         0 000464   000535 710000 0                  TRA     s:4102
         0 000465   000535 710000 0                  TRA     s:4102
         0 000466   000471 710000 0                  TRA     s:4090
         0 000467   000471 710000 0                  TRA     s:4090
         0 000470   000513 710000 0                  TRA     s:4096

     1355     4089    5                  CASE (%EVST_INITIAL, %EVST_START);

     1356     4090    5                    CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.ENDD)

   4090  0 000471   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000472   000035 036003                    ADLQ    29,DU
         0 000473   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000474   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000475   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000476   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000477   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1357     4091    5                      ALTRET (OCLEAR_LOCATION_FAILED);
     1358     4092    5                    CALL VDG$OCOPY_LOCATION (TOS$EVAL.RANGE.START,

   4092  0 000500   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000501   000035 036003                    ADLQ    29,DU
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:151  
         0 000502   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000503   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000504   000024 036003                    ADLQ    20,DU
         0 000505   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000506   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000507   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000510   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000511   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED
         0 000512   000544 710000 0                  TRA     s:4104

     1359     4093    5                      TOS$EVAL.RANGE.ENDD)
     1360     4094    5                      ALTRET (OCOPY_LOCATION_FAILED);
     1361     4095    5                  CASE (%EVST_END);

     1362     4096    5                    CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.START)

   4096  0 000513   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000514   000024 036003                    ADLQ    20,DU
         0 000515   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000516   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000517   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000520   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000521   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1363     4097    5                      ALTRET (OCLEAR_LOCATION_FAILED);
     1364     4098    5                    CALL VDG$OCOPY_LOCATION (TOS$EVAL.RANGE.ENDD,

   4098  0 000522   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000523   000024 036003                    ADLQ    20,DU
         0 000524   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000525   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000526   000035 036003                    ADLQ    29,DU
         0 000527   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000530   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000531   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000532   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000533   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:152  
         0 000534   000544 710000 0                  TRA     s:4104

     1365     4099    5                      TOS$EVAL.RANGE.START)
     1366     4100    5                      ALTRET (OCOPY_LOCATION_FAILED);
     1367     4101    5                  CASE (ELSE);

     1368     4102    5                    CALL VDG$ESCREECH (TOS$EVAL.STATE#);

   4102  0 000535   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000536   000070 036003                    ADLQ    56,DU
         0 000537   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000540   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000541   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000542   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000543   000000 011000                    NOP     0

     1369     4103    5                  END;

     1370     4104    4                 TOS$EVAL.STATE# = IT$ADJUST.NEW_STATE#;

   4104  0 000544   200020 470500                    LDP0    IT_ADJUST$,,AUTO
         0 000545   000003 220100                    LDX0    3,,PR0
         0 000546   200017 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000547   100070 740100                    STX0    56,,PR1
         0 000550   000572 710000 0                  TRA     s:4116

     1371     4105
     1372     4106    4               CASE (%EVST_TOGGLE);

     1373     4107    4                 IF TOS$EVAL.STATE# = %EVST_END THEN

   4107  0 000551   200017 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000552   100070 221100                    LDX1    56,,PR1
         0 000553   000003 101003                    CMPX1   3,DU
         0 000554   000560 601000 0                  TNZ     s:4110

     1374     4108    4                    TOS$EVAL.STATE# = %EVST_START;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:153  

   4108  0 000555   000002 222003                    LDX2    2,DU
         0 000556   100070 742100                    STX2    56,,PR1
         0 000557   000572 710000 0                  TRA     s:4116

     1375     4109    4                 ELSE
     1376     4110    4                    TOS$EVAL.STATE# = %EVST_END;

   4110  0 000560   000003 222003                    LDX2    3,DU
         0 000561   100070 742100                    STX2    56,,PR1
         0 000562   000572 710000 0                  TRA     s:4116

     1377     4111
     1378     4112    4               CASE (ELSE);

     1379     4113    4                 CALL VDG$ESCREECH (IT$ADJUST.NEW_STATE#);

   4113  0 000563   200020 236100                    LDQ     IT_ADJUST$,,AUTO
         0 000564   000003 036003                    ADLQ    3,DU
         0 000565   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000566   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000567   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000570   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000571   000000 011000                    NOP     0

     1380     4114    4               END;

     1381     4115
     1382     4116    3              CALL VDE$IADJUST (OPERAND, IT$ADJUST, SIGNAL)

   4116  0 000572   200016 236100                    LDQ     @SIGNAL,,AUTO
         0 000573   200034 756100                    STQ     TEMP_START+11,,AUTO
         0 000574   200020 236100                    LDQ     IT_ADJUST$,,AUTO
         0 000575   200015 235100                    LDA     @OPERAND,,AUTO
         0 000576   200032 757100                    STAQ    TEMP_START+9,,AUTO
         0 000577   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000600   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:154  
         0 000601   000000 701000 xent               TSX1    VDE$IADJUST
         0 000602   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1383     4117    3                ALTRET (IADJUST_FAILED);
     1384     4118                   /*
     1385     4119                   *  We may have pushed new VD$EVALs on the stack, for
     1386     4120                   *    generators other than SELECT: get the new tos-VD$EVAL.
     1387     4121                   */
     1388     4122    3              TOS_EVAL$ = OPERAND.EVAL$;

   4122  0 000603   200015 470500                    LDP0    @OPERAND,,AUTO
         0 000604   000003 236100                    LDQ     3,,PR0
         0 000605   200017 756100                    STQ     TOS_EVAL$,,AUTO

     1389     4123
     1390     4124    3              IT_ADJUST$ = IT$ADJUST.FLINK$;

   4124  0 000606   200020 471500                    LDP1    IT_ADJUST$,,AUTO
         0 000607   100002 236100                    LDQ     2,,PR1
         0 000610   200020 756100                    STQ     IT_ADJUST$,,AUTO

     1391     4125    3              END EACH_IT_ADJUST;

   4125  0 000611   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000612   000616 600000 0                  TZE     s:4128
         0 000613   200016 470500                    LDP0    @SIGNAL,,AUTO
         0 000614   000000 234100                    SZN     0,,PR0
         0 000615   000446 604000 0                  TMI     s:4082

     1392     4126
     1393     4127
     1394     4128    2           CALL VDE$IGUAR_RANGE_IN_RANGE (TOS$EVAL.RANGE,

   4128  0 000616   200012 630500                    EPPR0   COMPLETELY_OUTSIDE,,AUTO
         0 000617   200035 450500                    STP0    TEMP_START+12,,AUTO
         0 000620   200011 631500                    EPPR1   TRUNCATED,,AUTO
         0 000621   200034 451500                    STP1    TEMP_START+11,,AUTO
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:155  
         0 000622   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000623   000002 036003                    ADLQ    2,DU
         0 000624   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000625   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000626   000024 036003                    ADLQ    20,DU
         0 000627   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000630   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000631   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000632   000000 701000 xent               TSX1    VDE$IGUAR_RANGE_IN_RANGE
         0 000633   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1395     4129    2             TOS$EVAL.ENCLOSING, TRUNCATED, COMPLETELY_OUTSIDE)
     1396     4130    2             ALTRET (IGUAR_RANGE_IN_RANGE_FAILED);
     1397     4131    2           IF COMPLETELY_OUTSIDE THEN

   4131  0 000634   200012 234100                    SZN     COMPLETELY_OUTSIDE,,AUTO
         0 000635   000640 605000 0                  TPL     s:4133

     1398     4132    2              SIGNAL = %FALSE;

   4132  0 000636   200016 470500                    LDP0    @SIGNAL,,AUTO
         0 000637   000000 450100                    STZ     0,,PR0

     1399     4133    2           CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.START,

   4133  0 000640   200013 630500                    EPPR0   RCCL,,AUTO
         0 000641   200034 450500                    STP0    TEMP_START+11,,AUTO
         0 000642   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000643   000035 036003                    ADLQ    29,DU
         0 000644   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000645   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000646   000024 036003                    ADLQ    20,DU
         0 000647   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000650   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000651   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000652   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000653   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:156  

     1400     4134    2             TOS$EVAL.RANGE.ENDD, RCCL)
     1401     4135    2             ALTRET (COMPARE_LOCS_FAILED);
     1402     4136    3           IF RCCL > %RCCL_EQUAL THEN DO;

   4136  0 000654   200013 235100                    LDA     RCCL,,AUTO
         0 000655   000705 604400 0                  TMOZ    s:4148

     1403     4137    3              TEMP_START = TOS$EVAL.RANGE.START;

   4137  0 000656   200017 470500                    LDP0    TOS_EVAL$,,AUTO
         0 000657   000100 100500                    MLR     fill='000'O
         0 000660   000024 000044                    ADSC9   20,,PR0                  cn=0,n=36
         0 000661   200021 000044                    ADSC9   TEMP_START,,AUTO         cn=0,n=36

     1404     4138    3              TOS$EVAL.RANGE.START = TOS$EVAL.RANGE.ENDD;

   4138  0 000662   000100 100500                    MLR     fill='000'O
         0 000663   000035 000044                    ADSC9   29,,PR0                  cn=0,n=36
         0 000664   000024 000044                    ADSC9   20,,PR0                  cn=0,n=36

     1405     4139    3              TOS$EVAL.RANGE.ENDD = TEMP_START;

   4139  0 000665   000100 100500                    MLR     fill='000'O
         0 000666   200021 000044                    ADSC9   TEMP_START,,AUTO         cn=0,n=36
         0 000667   000035 000044                    ADSC9   29,,PR0                  cn=0,n=36

     1406     4140    4              DO CASE (TOS$EVAL.STATE#);

   4140  0 000670   000070 220100                    LDX0    56,,PR0
         0 000671   000004 100003                    CMPX0   4,DU
         0 000672   000674 602010 0                  TNC     s:4140+4,X0
         0 000673   000705 710000 0                  TRA     s:4148
         0 000674   000705 710000 0                  TRA     s:4148
         0 000675   000700 710000 0                  TRA     s:4142
         0 000676   000700 710000 0                  TRA     s:4142
         0 000677   000703 710000 0                  TRA     s:4144
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:157  

     1407     4141    4               CASE (%EVST_INITIAL, %EVST_START);

     1408     4142    4                 TOS$EVAL.STATE# = %EVST_END;

   4142  0 000700   000003 221003                    LDX1    3,DU
         0 000701   000070 741100                    STX1    56,,PR0
         0 000702   000705 710000 0                  TRA     s:4148

     1409     4143    4               CASE (%EVST_END);

     1410     4144    4                 TOS$EVAL.STATE# = %EVST_START;

   4144  0 000703   000002 221003                    LDX1    2,DU
         0 000704   000070 741100                    STX1    56,,PR0

     1411     4145    4               END;

     1412     4146    3              END;

     1413     4147
     1414     4148    3           IF SIGNAL THEN DO;

   4148  0 000705   200016 470500                    LDP0    @SIGNAL,,AUTO
         0 000706   000000 234100                    SZN     0,,PR0
         0 000707   000750 605000 0                  TPL     s:4166

     1415     4149                   /* Did we find the same range as last time? */
     1416     4150    3              CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.START,

   4150  0 000710   200013 631500                    EPPR1   RCCL,,AUTO
         0 000711   200034 451500                    STP1    TEMP_START+11,,AUTO
         0 000712   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000713   000046 036003                    ADLQ    38,DU
         0 000714   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000715   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000716   000024 036003                    ADLQ    20,DU
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:158  
         0 000717   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000720   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000721   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000722   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000723   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1417     4151    3                TOS$EVAL.LAST_FOUND_RANGE.START, RCCL)
     1418     4152    3                ALTRET (COMPARE_LOCS_FAILED);
     1419     4153    4              IF RCCL = %RCCL_EQUAL THEN DO;

   4153  0 000724   200013 235100                    LDA     RCCL,,AUTO
         0 000725   000750 601000 0                  TNZ     s:4166

     1420     4154    4                 CALL VDG$COMPARE_LOCS (TOS$EVAL.RANGE.ENDD,

   4154  0 000726   200013 630500                    EPPR0   RCCL,,AUTO
         0 000727   200034 450500                    STP0    TEMP_START+11,,AUTO
         0 000730   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000731   000057 036003                    ADLQ    47,DU
         0 000732   200033 756100                    STQ     TEMP_START+10,,AUTO
         0 000733   200017 236100                    LDQ     TOS_EVAL$,,AUTO
         0 000734   000035 036003                    ADLQ    29,DU
         0 000735   200032 756100                    STQ     TEMP_START+9,,AUTO
         0 000736   200032 630500                    EPPR0   TEMP_START+9,,AUTO
         0 000737   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000740   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000741   000752 702000 0                  TSX2    OCLEAR_RANGE_FAILED

     1421     4155    4                   TOS$EVAL.LAST_FOUND_RANGE.ENDD, RCCL)
     1422     4156    4                   ALTRET (COMPARE_LOCS_FAILED);
     1423     4157    5                 IF RCCL = %RCCL_EQUAL THEN DO;

   4157  0 000742   200013 235100                    LDA     RCCL,,AUTO
         0 000743   000750 601000 0                  TNZ     s:4166

     1424     4158                         /* Found same range again: fail this and all alternatives */
     1425     4159    5                    SIGNAL = %FALSE;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:159  

   4159  0 000744   200016 470500                    LDP0    @SIGNAL,,AUTO
         0 000745   000000 450100                    STZ     0,,PR0

     1426     4160                         /*N*??* Must we find the VD$EVAL for the IT_SELECT node? *N*/
     1427     4161    5                    TOS$EVAL.REMAINING# = 0;

   4161  0 000746   200017 471500                    LDP1    TOS_EVAL$,,AUTO
         0 000747   100072 450100                    STZ     58,,PR1

     1428     4162    5                    END;

     1429     4163    4                 END;

     1430     4164    3              END;

     1431     4165
     1432     4166    2           RETURN;

   4166  0 000750   200014 221300                    LDX1  ! RCCL+1,,AUTO
         0 000751   000001 702211                    TSX2  ! 1,X1

   4156  0 000752                       OCLEAR_RANG* null
   4156  0 000752                       OCOPY_RANGE* null
   4156  0 000752                       OCLEAR_LOCA* null
   4156  0 000752                       OCOPY_LOCAT* null
   4156  0 000752                       IADJUST_FAI* null
   4156  0 000752                       IGUAR_RANGE* null
   4156  0 000752                       COMPARE_LOC* null
     1433     4167
     1434     4168
     1435     4169
     1436     4170    2   OCLEAR_RANGE_FAILED: ;
     1437     4171    2   OCOPY_RANGE_FAILED: ;
     1438     4172    2   OCLEAR_LOCATION_FAILED: ;
     1439     4173    2   OCOPY_LOCATION_FAILED: ;
     1440     4174    2   IADJUST_FAILED: ;
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:160  
     1441     4175    2   IGUAR_RANGE_IN_RANGE_FAILED: ;
     1442     4176    2   COMPARE_LOCS_FAILED: ;
     1443     4177    2           ALTRETURN;

   4177  0 000752   200014 221300                    LDX1  ! RCCL+1,,AUTO
         0 000753   000000 702211                    TSX2  ! 0,X1
     1444     4178
     1445     4179    2   END ISELECT;
     1446     4180
     1447     4181    1   END VDE$IRANGE;
     1448     4182        %EOD;

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:161  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IRANGE.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:162  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @OPERAND                  15-0-0/w PTR         r     1 @OPERAND
     4-0-0/w PTR         r     1 @SIGNAL                   16-0-0/w PTR         r     1 @SIGNAL
    12-0-0/w BIT         r     1 COMPLETELY_OUTSIDE        20-0-0/w PTR         r     1 IT_ADJUST$
    10-0-0/w PTR         r     1 IT_SELECT$                *0-0-0/w STRC(144)   r     1 OPERAND
    *0-0-0/w STRC(144)   r     1 OPERAND                    7-0-0/w PTR         r     1 PREV_EVAL$
    13-0-0/w SBIN        r     1 RCCL                      *0-0-0/w BIT         r     1 SIGNAL
    *0-0-0/w BIT         r     1 SIGNAL                    21-0-0/w STRC(324)   r     1 TEMP_START
     6-0-0/w PTR         r     1 TEST_EVAL$                 5-0-0/w PTR         r     1 TOS_EVAL$
    17-0-0/w PTR         r     1 TOS_EVAL$                 11-0-0/w BIT         r     1 TRUNCATED

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$MON_EVAL

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(216)   r     1 IT$ADJUST                  0-0-0/w STRC(216)   r     1 IT$SELECT
     0-0-0/w STRC(2124)  r     1 PREV$EVAL                  0-0-0/w STRC(2124)  r     1 TEST$EVAL
     0-0-0/w STRC(2124)  r     1 TOS$EVAL                   0-0-0/w STRC(2124)  r     1 TOS$EVAL
     0-0-0/w STRC(216)   r     1 VD$IT_OPERATOR             0-0-0/w STRC(216)   r     1 VD$IT_SELECT
     0-0-0/w STRC        r     1 VD$OBJECT_HEADER

PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:163  

   Procedure VDE$IRANGE requires 492 words for executable code.
   Procedure VDE$IRANGE requires 30 words of local(AUTO) storage.
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:164  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:165  
          MINI XREF LISTING

COMPARE_LOCS_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4133--CALLALT  4150--CALLALT  4154--CALLALT
COMPLETELY_OUTSIDE
      2608**DCL      4128<>CALL     4131>>IF
FIND_TOP_SELECT
      3457**LABEL    3461--EXIT
IADJUST_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4116--CALLALT
IGUAR_RANGE_IN_RANGE_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4128--CALLALT
ISELECT
      3689**PROC     3483--CALL
ISELECT_FAILED
      3596**LABEL    3483--CALLALT
IT$ADJUST IN PROCEDURE ISELECT
      3993**DCL      4116<>CALL
IT$ADJUST.FLINK$ IN PROCEDURE ISELECT
      4019**DCL      4124>>ASSIGN
IT$ADJUST.NEW_STATE# IN PROCEDURE ISELECT
      4019**DCL      4082>>DOCASE   4104>>ASSIGN   4113<>CALL
IT$SELECT.FLINK$
      3381**DCL      3519>>ASSIGN
IT$SELECT.RPT_ALL
      3381**DCL      3539>>IF
IT$SELECT.RPT_COUNT#
      3381**DCL      3542>>ASSIGN
IT_ADJUST$ IN PROCEDURE ISELECT
      3709**DCL      3993--IMP-PTR  4076<<ASSIGN   4079>>DOWHILE  4082>>DOCASE   4104>>ASSIGN   4113>>CALL
      4116>>CALL     4124<<ASSIGN   4124>>ASSIGN
IT_SELECT$
      2606**DCL      3355--IMP-PTR  3506<<ASSIGN   3507>>DOWHILE  3513<<ASSIGN   3519<<ASSIGN   3519>>ASSIGN
      3520>>IF       3538>>ASSIGN   3539>>IF       3542>>ASSIGN
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:166  
OALLOC_FAILED
      3577**LABEL    3525--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4090--CALLALT  4096--CALLALT
OCLEAR_RANGE_FAILED
      3596**LABEL    3576--CALLALT
OCLEAR_RANGE_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4064--CALLALT
OCOPY_LOCATION_FAILED
      3596**LABEL    3531--CALLALT  3534--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4092--CALLALT  4098--CALLALT
OCOPY_RANGE_FAILED
      3596**LABEL    3529--CALLALT  3578--CALLALT
OCOPY_RANGE_FAILED IN PROCEDURE ISELECT
      4156**LABEL    4068--CALLALT
OFREE_FAILED
      3577**LABEL    3466--CALLALT  3555--CALLALT
OPERAND
      2531**DCL       155--PROC     3450<>CALL     3483<>CALL
OPERAND.EVAL$
      2535**DCL      3447>>ASSIGN   3465<<ASSIGN   3468>>ASSIGN   3493>>ASSIGN   3525<>CALL     3527>>ASSIGN
      3554<<ASSIGN   3557>>ASSIGN
OPERAND IN PROCEDURE ISELECT
      3699**DCL      3689--PROC     4116<>CALL
OPERAND.EVAL$ IN PROCEDURE ISELECT
      3703**DCL      4063>>ASSIGN   4122>>ASSIGN
PREV$EVAL.RANGE
      3216**DCL      3529<>CALL     3578<>CALL
PREV$EVAL.RANGE.START
      3228**DCL      3531<>CALL     3534<>CALL
PREV$EVAL.STATE#
      3344**DCL      3581>>ASSIGN
PREV_EVAL$
      2605**DCL      3110--IMP-PTR  3524<<ASSIGN   3528>>ASSIGN   3529>>CALL     3531>>CALL     3534>>CALL
      3571<<ASSIGN   3572>>IF       3578>>CALL     3581>>ASSIGN
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:167  
RCCL
      2609**DCL      4133<>CALL     4136>>IF       4150<>CALL     4153>>IF       4154<>CALL     4157>>IF
SIGNAL
      2537**DCL       155--PROC     3446<<ASSIGN   3472<<ASSIGN   3478>>DOUNTIL  3483<>CALL     3498>>IF
      3561<<ASSIGN   3585<<ASSIGN
SIGNAL IN PROCEDURE ISELECT
      3705**DCL      3689--PROC     4062<<ASSIGN   4079>>DOWHILE  4116<>CALL     4132<<ASSIGN   4148>>IF
      4159<<ASSIGN
TEMP_START IN PROCEDURE ISELECT
      3718**DCL      4137<<ASSIGN   4139>>ASSIGN
TEST$EVAL.BLINK$
      2891**DCL      3509>>ASSIGN   3515>>ASSIGN
TEST$EVAL.NODE$
      3099**DCL      3508>>DOWHILE  3511>>IF       3513>>ASSIGN
TEST_EVAL$
      2604**DCL      2865--IMP-PTR  3505<<ASSIGN   3508>>DOWHILE  3509<<ASSIGN   3509>>ASSIGN   3511>>IF
      3513>>ASSIGN   3515<<ASSIGN   3515>>ASSIGN
TOS$EVAL
      2620**DCL      3466<>CALL     3501<>CALL     3555<>CALL
TOS$EVAL.BLINK$
      2646**DCL      3462>>IF       3465>>ASSIGN   3528<<ASSIGN   3552>>DOWHILE  3554>>ASSIGN   3571>>ASSIGN
TOS$EVAL.ENCLOSING
      2657**DCL      3529<>CALL
TOS$EVAL.NODE$
      2854**DCL      3458>>IF       3459>>IF       3481>>DOCASE   3538<<ASSIGN   3546>>IF       3565>>DOCASE
      3574>>IF
TOS$EVAL.RANGE
      2726**DCL      3576<>CALL     3578<>CALL
TOS$EVAL.RANGE.ENDD
      2766**DCL      3534<>CALL
TOS$EVAL.RANGE.START
      2738**DCL      3531<>CALL
TOS$EVAL.REMAINING#
      2854**DCL      3459>>IF       3480>>IF       3496<<ASSIGN   3496>>ASSIGN   3540<<ASSIGN   3542<<ASSIGN
      3548<<ASSIGN   3552>>DOWHILE  3559>>IF
TOS$EVAL.STATE#
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:168  
      2854**DCL      3537<<ASSIGN   3568<<ASSIGN   3581<<ASSIGN
TOS$EVAL.ENCLOSING IN PROCEDURE ISELECT
      3785**DCL      4128<>CALL
TOS$EVAL.LAST_FOUND_RANGE IN PROCEDURE ISELECT
      3923**DCL      4064<>CALL     4068<>CALL
TOS$EVAL.LAST_FOUND_RANGE.ENDD IN PROCEDURE ISELECT
      3963**DCL      4154<>CALL
TOS$EVAL.LAST_FOUND_RANGE.START IN PROCEDURE ISELECT
      3935**DCL      4150<>CALL
TOS$EVAL.NODE$ IN PROCEDURE ISELECT
      3982**DCL      4066>>IF       4066>>IF       4076>>ASSIGN
TOS$EVAL.RANGE IN PROCEDURE ISELECT
      3854**DCL      4068<>CALL     4128<>CALL
TOS$EVAL.RANGE.ENDD IN PROCEDURE ISELECT
      3894**DCL      4090<>CALL     4092<>CALL     4098<>CALL     4133<>CALL     4138>>ASSIGN   4139<<ASSIGN
      4154<>CALL
TOS$EVAL.RANGE.START IN PROCEDURE ISELECT
      3866**DCL      4092<>CALL     4096<>CALL     4098<>CALL     4133<>CALL     4137>>ASSIGN   4138<<ASSIGN
      4150<>CALL
TOS$EVAL.REMAINING# IN PROCEDURE ISELECT
      3982**DCL      4161<<ASSIGN
TOS$EVAL.STATE# IN PROCEDURE ISELECT
      3982**DCL      4088>>DOCASE   4102<>CALL     4104<<ASSIGN   4107>>IF       4108<<ASSIGN   4110<<ASSIGN
      4140>>DOCASE   4142<<ASSIGN   4144<<ASSIGN
TOS_EVAL$
      2603**DCL      2620--IMP-PTR  3447<<ASSIGN   3457>>DOWHILE  3458>>IF       3459>>IF       3459>>IF
      3462>>IF       3463<<ASSIGN   3465>>ASSIGN   3466>>CALL     3468<<ASSIGN   3471>>IF       3480>>IF
      3481>>DOCASE   3493<<ASSIGN   3496>>ASSIGN   3496>>ASSIGN   3501>>CALL     3505>>ASSIGN   3524>>ASSIGN
      3527<<ASSIGN   3528>>ASSIGN   3529>>CALL     3531>>CALL     3534>>CALL     3537>>ASSIGN   3538>>ASSIGN
      3540>>ASSIGN   3542>>ASSIGN   3546>>IF       3548>>ASSIGN   3552>>DOWHILE  3552>>DOWHILE  3554>>ASSIGN
      3555>>CALL     3557<<ASSIGN   3559>>IF       3565>>DOCASE   3568>>ASSIGN   3571>>ASSIGN   3574>>IF
      3576>>CALL     3578>>CALL     3581>>ASSIGN
TOS_EVAL$ IN PROCEDURE ISELECT
      3708**DCL      3748--IMP-PTR  4063<<ASSIGN   4064>>CALL     4066>>IF       4066>>IF       4068>>CALL
      4068>>CALL     4076>>ASSIGN   4088>>DOCASE   4090>>CALL     4092>>CALL     4092>>CALL     4096>>CALL
      4098>>CALL     4098>>CALL     4102>>CALL     4104>>ASSIGN   4107>>IF       4108>>ASSIGN   4110>>ASSIGN
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:169  
      4122<<ASSIGN   4128>>CALL     4128>>CALL     4133>>CALL     4133>>CALL     4137>>ASSIGN   4138>>ASSIGN
      4138>>ASSIGN   4139>>ASSIGN   4140>>DOCASE   4142>>ASSIGN   4144>>ASSIGN   4150>>CALL     4150>>CALL
      4154>>CALL     4154>>CALL     4161>>ASSIGN
TRUNCATED
      2607**DCL      4128<>CALL
VD$IT_OPERATOR.CODE#
      3440**DCL      3574>>IF
VD$IT_SELECT.ADJUSTS$ IN PROCEDURE ISELECT
      4057**DCL      4076>>ASSIGN
VD$IT_SELECT.RPT_ALL IN PROCEDURE ISELECT
      4056**DCL      4066>>IF
VD$IT_SELECT.RPT_COUNT# IN PROCEDURE ISELECT
      4056**DCL      4066>>IF
VD$OBJECT_HEADER.CLASS#
      3404**DCL      3459>>IF       3481>>DOCASE   3511>>IF       3546>>IF       3565>>DOCASE
VDE$IADJUST
      2541**DCL-ENT  4116--CALL
VDE$IGUAR_RANGE_IN_RANGE
      2542**DCL-ENT  4128--CALL
VDG$COMPARE_LOCS
      2543**DCL-ENT  4133--CALL     4150--CALL     4154--CALL
VDG$ESCREECH
      2550**DCL-ENT  3573--CALL     4102--CALL     4113--CALL
VDG$MEVAL_FOUND_RANGE
      2552**DCL-ENT  3501--CALL
VDG$MEVAL_START_EVAL
      2551**DCL-ENT  3450--CALL
VDG$OALLOC
      2544**DCL-ENT  3525--CALL
VDG$OCLEAR_LOCATION
      2548**DCL-ENT  4090--CALL     4096--CALL
VDG$OCLEAR_RANGE
      2546**DCL-ENT  3576--CALL     4064--CALL
VDG$OCOPY_LOCATION
      2549**DCL-ENT  3531--CALL     3534--CALL     4092--CALL     4098--CALL
VDG$OCOPY_RANGE
PL6.E3A0      #002=VDE$IRANGE File=VDE$INTERPRET.:VDA5TSI                        FRI 07/04/97 11:11 Page:170  
      2547**DCL-ENT  3529--CALL     3578--CALL     4068--CALL
VDG$OFREE
      2545**DCL-ENT  3466--CALL     3555--CALL
VD_$$MON_EVAL.V#
      2597**DCL      3449>>IF       3500>>IF

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:171  
     1449        1        /*T***********************************************************/
     1450        2        /*T*                                                         */
     1451        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1452        4        /*T*                                                         */
     1453        5        /*T***********************************************************/
     1454        6
     1455        7        /*D* NAME:  VDE$IADJUST
     1456        8            PARAMETERS:
     1457        9                OPERAND - VD$OPERAND whose InTree we're evaluating:
     1458       10                    .STREAM$ must point to a stream open to the current
     1459       11                        EditBlock's file.
     1460       12                    .INTREE$ must point to the root node of the InTree being
     1461       13                        evaluated.  Its .OPTIONS must specify the Level and
     1462       14        *N*             Component to use.
     1463       15                    .EDIT_BLOCK$ must point to a block descriptor for
     1464       16                        the current EditBlock.
     1465       17                    .EVAL$ must point to the top VD$EVAL on the evaluation
     1466       18                        stack.  In this VD$EVAL:
     1467       19                        .ENCLOSING must specify the limits on all FilePointer
     1468       20                            movement.
     1469       21                        .RANGE must specify the initial range to move relative
     1470       22                            to.
     1471       23                        .STATE# must specify the current evaluation state.
     1472       24                IT_ADJUST - THRU or ADJUST node whose movement-expr nodes
     1473       25                    nodes are to be evaluated.  It's ok if IT_ADJUST has no
     1474       26                    children.
     1475       27                SIGNAL - An uninitialized BIT(1) ALIGNED.
     1476       28            INPUT:
     1477       29            OUTPUT:
     1478       30                SIGNAL will contain either true or false:
     1479       31                    SIGNAL will contain %TRUE if we were able to find a block
     1480       32                        for the IT_ADJUST node which lies at least partially
     1481       33                        within the enclosing range.
     1482       34                        Also, TOS$EVAL.RANGE has been modified to point to
     1483       35                        this found block.
     1484       36                    SIGNAL will contain %FALSE if we failed to find a range
     1485       37                        for the InTree due to one of the following reasons:
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:172  
     1486       38                        o An absolute operand specified a range which lies
     1487       39                            completely outside the enclosing range.
     1488       40                        o Not any of a relative operand could be
     1489       41                            found inside the enclosing range.
     1490       42                        o A conditional operand could not find a range
     1491       43                            within the enclosing range.
     1492       44                        Also, TOS$EVAL.RANGE may have been modified.
     1493       45                TOS$EVAL.RANGE (that is, .RANGE in the VD$EVAL on top of the
     1494       46                    evaluation stack) will be modified:  either or both of its
     1495       47                    VD$LOCATIONs may be modified as specified by the
     1496       48                    movement_expr nodes.  Which bound is modified to what is
     1497       49                    based on the TOS$EVAL.STATE#,
     1498       50        *??*        IT_ADJUST.NEW_STATE#,
     1499       51                    the .POINT# option of each of IT_ADJUST's children, and
     1500       52                    whether the child is the last child of an IT_ADJUST or not.
     1501       53                    The table below shows which bound of TOS$EVAL.RANGE
     1502       54                    ("str" is the start bound, "end" is the end bound)
     1503       55                    will be set to which point of the specified operand
     1504       56                    ("BO" is the start location of the operand, "EO"
     1505       57                    is the end location of the operand):
     1506       58
     1507       59                                                     Point
     1508       60                                 ---------------------------------------------
     1509       61                                    AO,       AO, not
     1510       62                      STATE      last child  last child     BO          EO
     1511       63                    ----------   ---------   ---------   ---------   ---------
     1512       64                    _INITIAL     str := BO   str := BO   str := BO   str := EO
     1513       65                                 end := EO   end := BO   end := BO   end := EO
     1514       66
     1515       67                    _START       str := BO   str := BO   str := BO   str := EO
     1516       68
     1517       69        *??*        _END, and
     1518       70        *??*         .NEW_STATE#
     1519       71        *??*         ~= _END     end := BO   end := BO   end := BO   end := EO
     1520       72
     1521       73                    _END         end := EO   end := BO   end := BO   end := EO
     1522       74        *??*         and .NEW_STATE# = _END
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:173  
     1523       75
     1524       76                    If IT_ADJUST has no children, TOS$EVAL.RANGE will be
     1525       77                    unchanged (we'll do nothing but return SIGNAL = %TRUE).
     1526       78                TOS$EVAL.REMAINING# may be forced to 0 (when we want to stop any
     1527       79                    further evaluation of an IT_SELECT (???Operator???) node).
     1528       80            DESCRIPTION:
     1529       81                Loop thru the chain of movement-expr nodes:
     1530       82
     1531       83                o For %OPAND_FILE, set TOS$EVAL.RANGE to .ENCLOSING.
     1532       84                    (VDE$IOPEN set the initial TOS$EVAL.ENCLOSING to the
     1533       85                    specified file already, and has already altered the
     1534       86                    EditBlock stack appropriately.)
     1535       87                o For %OPAND_PREVIOUS and %OPAND_NEXT, check to see if they
     1536       88                    are the only operand in the entire block expression:
     1537       89                    If so, set TOS$EVAL.RANGE from TOS$EVAL.RANGE.
     1538       90                    If not, set TOS$EVAL.RANGE to TOS$EVAL.ENCLOSING.
     1539       91                    (VDE$IOPEN set the initial TOS$EVAL.ENCLOSING and .RANGE
     1540       92                    and the EditBlock range from the previous or next EditBlock,
     1541       93                    and has already altered the EditBlock stack appropriately.)
     1542       94                o For %OPAND_LO_NAME, read the name from the Locations file,
     1543       95                    and copy the range from the name's block descriptor to
     1544       96                    TOS$EVAL.RANGE.
     1545       97                o For %OPAND_BLOCK_DESC, copy the range from the
     1546       98                    block descriptor to TOS$EVAL.RANGE.
     1547       99                o For absolute %OPAND_NODE (.KEY ~= %CLEAR), store the key in
     1548      100                    TOS$EVAL.RANGE.  If we need to find the end of the operand
     1549      101                    (ie, STATE = %EVST_INITIAL so we need to set both
     1550      102                    start and end bounds), we must call the Accessor
     1551      103                    find the key of the next record.
     1552      104                o For relative %OPAND_NODE (.KEY=%CLEAR), and for %OPAND_POSITION
     1553      105                    and %OPAND_PATTERN, we must go to the file to find the
     1554      106                    location requested.
     1555      107                    If we don't find a match, set TOS$EVAL.REMAINING# to 0,
     1556      108                    to force us out of a REPEAT SELECT "try the next alternative"
     1557      109                    loop in VDE$IRANGE.
     1558      110
     1559      111                After evaluating each movement_expr node:
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:174  
     1560      112                    Check that the new TOS$EVAL.RANGE bounds lie within
     1561      113                        TOS$EVAL.ENCLOSING; truncate TOS$EVAL.RANGE if necessary.
     1562      114                        If the new TOS$EVAL.RANGE is completely outside the
     1563      115                        TOS$EVAL.ENCLOSING boundaries, we'll force it to specify
     1564      116                        an empty block at the TOS$EVAL.ENCLOSING boundary beyond
     1565      117                        which it lies.
     1566      118                If evaluation of any movement_expr node yields a false SIGNAL,
     1567      119                    stop evaluating the entire chain of movement_expr nodes.
     1568      120
     1569      121                Note that absolute movement is a little different from
     1570      122                relative movement.  For absolute movement, if the requested
     1571      123                operand doesn't exist in the file, then the block resulting
     1572      124                from the movement is an empty block at the specified location.
     1573      125                For relative movement, we always move to the next existing
     1574      126                location in the file (always forward).  We don't want
     1575      127                to do that for absolute movement; specifically, for
     1576      128                record key movement requests, we need to allow the user to
     1577      129                say "CO ... AF 8" when record 8 doesn't exist, and we
     1578      130                must interpret that to be a null block at reckey 8, position
     1579      131                0.
     1580      132
     1581      133                For relative block operands, a 0 SKIP-count is not the same as
     1582      134                no movement.  A 0 SKIP-count specifies the operand (node,
     1583      135                position or pattern) in which the FilePointer currently lies.
     1584      136                For example, "SKIP 0 RECORD" starting from record 5.1,
     1585      137                position 20, yields a range from 5.1 position 0 thru
     1586      138                the start of the next record -- in other words, it
     1587      139                yields the entire record from which we started the
     1588      140                movement.  A 0 SKIP-count disregards the "direction"
     1589      141                of movement; it operates the same whether direction is
     1590      142                BACKWARD or FORWARD.
     1591      143        */
     1592      144
     1593      145        VDE$IADJUST: PROC (OPERAND, IT_ADJUST, SIGNAL) ALTRET;
     1594      146
     1595      147
     1596      148        %INCLUDE VD_MACROS_M;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:175  
     1597     2363        %INCLUDE VD_PERR_C;
     1598     2511
     1599     2512
     1600     2513        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1601     2527        %VD$IT_ADJUST (NAME=IT_ADJUST, STCLASS=PARAM);
     1602     2564    1   DCL SIGNAL BIT(1) ALIGNED;
     1603     2565
     1604     2566
     1605     2567        /*
     1606     2568        *   Flag for VDA$LREAD's fourth parameter:  whether or not to read.
     1607     2569        */
     1608     2570
     1609     2571        %EQU FIND = FALSE;          /* Find the specified node; don't read it */
     1610     2572        %EQU FIND_AND_READ = TRUE;  /* Find node and read it */
     1611     2573
     1612     2574
     1613     2575    1   DCL VDE$PREAD_LO_NAME   ENTRY (3) ALTRET;
     1614     2576    1   DCL VDE$IMOVE_BY_POSITIONS  ENTRY (7) ALTRET;
     1615     2577    1   DCL VDE$IPATTERN        ENTRY (4) ALTRET;
     1616     2578    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     1617     2579    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1618     2580    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1619     2581    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1620     2582    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
     1621     2583    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1622     2584    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1623     2585    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1624     2586    1   DCL VDG$ESCREECH        ENTRY (3);
     1625     2587    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     1626     2588
     1627     2589
     1628     2590
     1629     2591        %VD_6E (STCLASS=SYMREF);
     1630     2627        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1631     2641    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     1632     2642
     1633     2643
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:176  
     1634     2644
     1635     2645    1   DCL LO_NAME$ PTR;
     1636     2646    1   DCL TOS_EVAL$ PTR;
     1637     2647    1   DCL IT_BLOCK_EXPR$ PTR;
     1638     2648    1   DCL TOS_EVAL_BOUND$ PTR;
     1639     2649    1   DCL TOS_EVAL_RELATIVE_TO$ PTR;
     1640     2650    1   DCL IT_MOVEMENT$ PTR;
     1641     2651    1   DCL STREAM$ PTR;
     1642     2652    1   DCL LEVEL UBIN;
     1643     2653    1   DCL FIND_END_BOUND BIT(1) ALIGNED;
     1644     2654    1   DCL REF_BLOCK_DESC$ PTR;
     1645     2655        %VD$RANGE (NAME=FOUND_RANGE, STCLASS=AUTO);
     1646     2724    1   DCL VD_ERR$ PTR;
     1647     2725    1   DCL SUBST_FIELD$ PTR;
     1648     2726
     1649     2727
     1650     2728        %VD$TEXTC (NAME=LO$NAME, STCLASS="BASED(LO_NAME$)");
     1651     2751        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1652     2996        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
     1653     3146        %VD$LOCATION (NAME=TOS$EVAL_BOUND, STCLASS="BASED(TOS_EVAL_BOUND$)");
     1654     3174        %VD$LOCATION (NAME=TOS$EVAL_RELATIVE_TO,
     1655     3175            STCLASS="BASED(TOS_EVAL_RELATIVE_TO$)");
     1656     3203        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_MOVEMENT$)");
     1657     3269        %VD$STREAM (NAME=STREAM, STCLASS="BASED(OPERAND.STREAM$)");
     1658     3375        %VD$BLOCK_DESC (NAME=REF$BLOCK_DESC, STCLASS="BASED(REF_BLOCK_DESC$)");
     1659     3522        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1660     3575        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1661     3620        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1662     3665        %VD$STRING_HEADER;
     1663     3701        %VD$BUFFER_HEADER;
     1664     3737        %VD$IT_SELECT;
     1665     3774        %VD$IT_ADJUST;
     1666     3811        %VD$BUFFER;
     1667     3869        %VD$TEXTC_REMOTE;
     1668     3930        %VD$PORT;
     1669     4028
     1670     4029
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:177  
     1671     4030
     1672     4031    1           SIGNAL = %TRUE;
     1673     4032    1           TOS_EVAL$ = OPERAND.EVAL$;
     1674     4033    1           IT_BLOCK_EXPR$ = OPERAND.INTREE$;
     1675     4034    1           LEVEL = IT$BLOCK_EXPR.OPTIONS.LEVEL#;
     1676     4035    1           IF TOS$EVAL.STATE# ~= %EVST_END THEN
     1677     4036    1              TOS_EVAL_BOUND$ = ADDR(TOS$EVAL.RANGE.START);
     1678     4037    1           ELSE
     1679     4038    1              TOS_EVAL_BOUND$ = ADDR(TOS$EVAL.RANGE.ENDD);
     1680     4039
     1681     4040    1           IT_MOVEMENT$ = IT_ADJUST.MOVEMENTS$;
     1682     4041    1   EACH_MOVEMENT_NODE:
     1683     4042    2           DO WHILE (IT_MOVEMENT$ ~= ADDR(NIL));
     1684     4043    2              IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN
     1685     4044    2                 TOS_EVAL_RELATIVE_TO$ = ADDR(TOS$EVAL.RANGE.START);
     1686     4045    2              ELSE
     1687     4046    2                 TOS_EVAL_RELATIVE_TO$ = ADDR(TOS$EVAL.RANGE.ENDD);
     1688     4047    2              FIND_END_BOUND = %FALSE;
     1689     4048    2              IF IT$OPERAND.OPTIONS.POINT# = %PNT_EO
     1690     4049    2                OR (IT$OPERAND.OPTIONS.POINT# = %PNT_AO
     1691     4050    2                AND IT_MOVEMENT$ = IT_ADJUST.MOVEMENTS_TAIL$
     1692     4051    2                AND TOS$EVAL.STATE# ~= %EVST_START) THEN
     1693     4052        /*??*         AND IT_ADJUST.NEW_STATE# = %EVST_END))) THEN */
     1694     4053    2                 FIND_END_BOUND = %TRUE;
     1695     4054
     1696     4055    2   MOVEMENT_CODE_CASES:
     1697     4056    3              DO CASE (IT$OPERAND.CODE#);
     1698     4057
     1699     4058    3               CASE (%OPAND_FILE);
     1700     4059                      /*
     1701     4060                      *  For %OPAND_FILE, we assume that VDE$IOPEN has already
     1702     4061                      *     setup the new EditBlock for the operand
     1703     4062                      */
     1704     4063    3                 CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.ENCLOSING)
     1705     4064    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1706     4065
     1707     4066
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:178  
     1708     4067    3               CASE (%OPAND_PREVIOUS, %OPAND_NEXT);
     1709     4068                      /*
     1710     4069                      *  For these operands, we assume that VDE$IOPEN has
     1711     4070                      *     already setup the new EditBlock .RANGE from the
     1712     4071                      *     previous/next EditBlock's .RANGE.
     1713     4072                      */
     1714     4073    3                 IF IT$BLOCK_EXPR.SELECTS$ = IT$BLOCK_EXPR.SELECTS_TAIL$
     1715     4074    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$ =
     1716     4075    3                   IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS_TAIL$
     1717     4076    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1718     4077    3                   VD$IT_ADJUST.MOVEMENTS$ =
     1719     4078    3                   IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1720     4079    3                   VD$IT_ADJUST.MOVEMENTS_TAIL$
     1721     4080    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1722     4081    3                   VD$IT_ADJUST.MOVEMENTS$ =
     1723     4082    4                   ADDR(IT$OPERAND) THEN DO;
     1724     4083                         /* This is only operand in entire block expression */
     1725     4084    4                    CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.RANGE)
     1726     4085    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1727     4086    4                    END;
     1728     4087    4                 ELSE DO;
     1729     4088    4                    CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.ENCLOSING)
     1730     4089    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1731     4090    4                    END;
     1732     4091
     1733     4092
     1734     4093    3               CASE (%OPAND_LO_NAME);
     1735     4094                      %GETKEY (KEY=IT$OPERAND.KEY, PTR=LO_NAME$);
     1736     4104    3                 CALL VDE$PREAD_LO_NAME (LO$NAME, REF_BLOCK_DESC$)
     1737     4105    3                   ALTRET (PREAD_LO_NAME_FAILED);
     1738     4106    3                 CALL LOAD_EVAL_FROM_RANGE (REF$BLOCK_DESC.RANGE)
     1739     4107    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1740     4108
     1741     4109
     1742     4110    3               CASE (%OPAND_BLOCK_DESC);
     1743     4111    3                 REF_BLOCK_DESC$ = IT$OPERAND.PARAM$;
     1744     4112    3                 CALL LOAD_EVAL_FROM_RANGE (REF$BLOCK_DESC.RANGE)
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:179  
     1745     4113    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1746     4114
     1747     4115
     1748     4116    3               CASE (%OPAND_NODE);
     1749     4117    4                 IF IT$OPERAND.KEY = %CLEAR THEN DO;
     1750     4118    4                    CALL IREL_NODE
     1751     4119    4                      ALTRET (IREL_NODE_FAILED);
     1752     4120    4                    END;
     1753     4121    4                 ELSE DO;
     1754     4122    4                    CALL IABS_NODE
     1755     4123    4                      ALTRET (IABS_NODE_FAILED);
     1756     4124    4                    END;
     1757     4125
     1758     4126
     1759     4127    3               CASE (%OPAND_POSITION);
     1760     4128    4                 IF IT$OPERAND.KEY = %CLEAR THEN DO;
     1761     4129    4                    CALL IREL_POSITION
     1762     4130    4                      ALTRET (IREL_POSITION_FAILED);
     1763     4131    4                    END;
     1764     4132    4                 ELSE DO;
     1765     4133    4                    CALL IREL_POSITION_N
     1766     4134    4                      ALTRET (IREL_POSITION_N_FAILED);
     1767     4135    4                    END;
     1768     4136
     1769     4137
     1770     4138    3               CASE (%OPAND_PATTERN);
     1771     4139    3                 CALL VDE$IPATTERN (OPERAND, IT$OPERAND, FOUND_RANGE, SIGNAL)
     1772     4140    3                   ALTRET (IPATTERN_FAILED);
     1773     4141    4                 IF SIGNAL THEN DO;
     1774     4142                         /* Note that FOUND_RANGE owns its objects! */
     1775     4143    4                    CALL LOAD_EVAL_FROM_RANGE (FOUND_RANGE)
     1776     4144    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1777     4145    4                    CALL VDG$OCLEAR_RANGE (FOUND_RANGE)
     1778     4146    4                      ALTRET (OCLEAR_RANGE_FAILED);
     1779     4147    4                    END;
     1780     4148
     1781     4149
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:180  
     1782     4150    3               CASE (ELSE);
     1783     4151    3                 CALL VDG$ESCREECH (IT$OPERAND.CODE#);
     1784     4152
     1785     4153    3               END MOVEMENT_CODE_CASES;
     1786     4154
     1787     4155    2              IF NOT SIGNAL THEN
     1788     4156    2                 EXIT EACH_MOVEMENT_NODE;
     1789     4157
     1790     4158    2              IT_MOVEMENT$ = IT$OPERAND.FLINK$;
     1791     4159    2              END EACH_MOVEMENT_NODE;
     1792     4160
     1793     4161
     1794     4162    1           RETURN;
     1795     4163
     1796     4164
     1797     4165
     1798     4166    1   PREAD_LO_NAME_FAILED: ;
     1799     4167    1   LOAD_EVAL_FROM_RANGE_FAILED: ;
     1800     4168    1   IABS_NODE_FAILED: ;
     1801     4169    1   IREL_NODE_FAILED: ;
     1802     4170    1   IREL_POSITION_FAILED: ;
     1803     4171    1   IREL_POSITION_N_FAILED: ;
     1804     4172    1   IPATTERN_FAILED: ;
     1805     4173    1   OCLEAR_RANGE_FAILED: ;
     1806     4174    1   OALLOC_FAILED: ;
     1807     4175    1           ALTRETURN;
     1808     4176
     1809     4177                %BOX (TITLE=IREL_NODE, PAGE=YES);
              4185    1
              4189    1   /***************************************************************************
              4191    1    *                                                                         *
              4195    1            *                                 IREL_NODE                               *
              4197    1            *                                                                         *
              4199    1           ***************************************************************************/

     1810     4203
     1811     4204        /*I* NAME: IREL_NODE
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:181  
     1812     4205            PARAMETERS:
     1813     4206                None.
     1814     4207            INPUT:
     1815     4208                STREAM - VD$STREAM to use; must be open.  It's position at
     1816     4209                    entry is irrelevent and unknown.
     1817     4210                LEVEL - Level to position in.
     1818     4211                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     1819     4212                    of the block operand; if %FALSE, just find the start
     1820     4213                    boundary.
     1821     4214                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     1822     4215                    its .STATE and other info.
     1823     4216                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     1824     4217                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     1825     4218                    location for relative movement.
     1826     4219                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     1827     4220                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
     1828     4221                    of the range to be set.
     1829     4222                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     1830     4223                    .CODE# must be %OPAND_NODE, and its .KEY must be
     1831     4224                    non-%CLEAR.
     1832     4225                IT_ADJUST - Parent of IT$OPERAND.
     1833     4226                IT$BLOCK_EXPR - Root node of InTree.
     1834     4227                OPERAND - VD$OPERAND whose InTree we're evaluating.
     1835     4228            OUTPUT:
     1836     4229                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     1837     4230                    be set as specified by IT$OPERAND.
     1838     4231                SIGNAL will contain %FALSE if we tried to go beyond BOF
     1839     4232                    or EOF while moving; %TRUE otherwise.
     1840     4233                TOS$EVAL.REMAINING# will be set to 0 if we tried to go beyond
     1841     4234                    BOF or EOF while moving.
     1842     4235            DESCRIPTION:
     1843     4236                If TOS$EVAL_RELATIVE_TO specifies any position within the record
     1844     4237                    marked "<in>" below, then the beginning of each record
     1845     4238                    below is labelled with the movement clause necessary to
     1846     4239                    make it the output TOS$EVAL_BOUND location:
     1847     4240
     1848     4241                BO BA SK 1 RE  or  EO BA SK 2 RE  I___________________I
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:182  
     1849     4242        (FO or BA) BO SK 0 RE  or  EO BA SK 1 RE  I_______<in>__________I
     1850     4243           BO SK 1 RE  or  (FO or BA) EO SK 0 RE  I________________I
     1851     4244                      BO SK 2 RE  or  EO SK 1 RE  I__________________I
     1852     4245                            etc.
     1853     4246
     1854     4247                Note that if the TOS$EVAL_RELATIVE_TO record doesn't exist, we will
     1855     4248                    first move to the start of the next existing record (if any).
     1856     4249                    TEST CASE for this:
     1857     4250                        CURR; SHL 1    "or DE CURR REPEAT SE RE SE TH PO 1
     1858     4251                    If we don't force the start-bound of the found-range to
     1859     4252                    be a real location, then the first "record" found in
     1860     4253                    the CURRENT block will be BOF,0 - 2,0.  But the
     1861     4254                    POSITION operand will turn that range into BOF,0 - BOF,1!!!
     1862     4255                    The next call to VDE$IRANGE will find 2,0 - 2,1.  The effect
     1863     4256                    will be to skip the first record, since BOF,0 - BOF,1 is
     1864     4257                    an empty block.
     1865     4258                    SO, we first make TOS$EVAL_BOUND 1,0.  Then REPEAT SE RE
     1866     4259                    finds 1,0 - 2,0 and POSITION 1 finds 1,0 - 1,1.
     1867     4260
     1868     4261                Call the Accessor to move the number of nodes requested (even
     1869     4262                    0), starting from the TOS$EVAL_RELATIVE_TO location.
     1870     4263                    Set the new node keys for the new location.  If we hit BOF or
     1871     4264                    EOF during the move, then set TOS$EVAL_BOUND to BOF or EOF and
     1872     4265                    return SIGNAL = %FALSE, but go ahead and load the TOS$EVAL
     1873     4266                    from the "found range" (BOF-BOF or EOF-EOF).
     1874     4267                    Also reset the TOS$EVAL.REMAINING# to 0, to force us out
     1875     4268                    of a REPEAT SELECT "try the next alternative" loop in
     1876     4269                    VDE$IRANGE.
     1877     4270                If we need to find the end of the node, then call the
     1878     4271                    Accessor to find the next record key.
     1879     4272        */
     1880     4273
     1881     4274    1   IREL_NODE: PROC ALTRET;
     1882     4275
     1883     4276
     1884     4277        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);   /* Doesn't own objects */
     1885     4346        %VD$LOCATION (NAME=OWNS_OBJECTS_LOC, STCLASS=AUTO); /* Owns objects */
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:183  
     1886     4374    2   DCL SKIP_COUNT SBIN;
     1887     4375    2   DCL INITIAL_KEY$ PTR;
     1888     4376    2   DCL STREAM_KEY$ PTR;
     1889     4377
     1890     4378
     1891     4379        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
     1892     4402        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     1893     4425
     1894     4426
     1895     4427
     1896     4428    2           SIGNAL = %TRUE;
     1897     4429    2           NODE_RANGE = %CLEAR;
     1898     4430    2           OWNS_OBJECTS_LOC = %CLEAR;
     1899     4431
     1900     4432    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;
     1901     4433    2           IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN
     1902     4434    2              SKIP_COUNT = - SKIP_COUNT;
     1903     4435
     1904     4436    2           CALL VDA$LREAD (STREAM, TOS$EVAL_RELATIVE_TO, SKIP_COUNT, %FIND)
     1905     4437    2             ALTRET (LREAD_FAILED);
     1906     4438    3           IF STREAM.CURRENT.EOF THEN DO;
     1907     4439    3              SIGNAL = %FALSE;
     1908     4440    3              NODE_RANGE.START.EOF = %TRUE;
     1909     4441    3              NODE_RANGE.ENDD.EOF = %TRUE;
     1910     4442    3              TOS$EVAL.REMAINING# = 0; /* Force exit from REPEAT loop */
     1911     4443    3              END;
     1912     4444    3           ELSE IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN DO;
     1913     4445                      /* Check to see if we hit BOF */
     1914     4446                      %GETKEY (KEY=TOS$EVAL_RELATIVE_TO.KEY, INDX=LEVEL-1,
     1915     4447                      PTR=INITIAL_KEY$);
     1916     4457                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     1917     4458                      PTR=STREAM_KEY$);
     1918     4468    4                 IF STREAM$KEY.BYTES >= INITIAL$KEY.BYTES THEN DO;
     1919     4469    4                    SIGNAL = %FALSE;       /* Hit BOF */
     1920     4470    4                    NODE_RANGE.START.KEY (%LVL_LOWER-1) = VD_KEY_NUMERIC_BOF;
     1921     4471    4                    NODE_RANGE.ENDD = NODE_RANGE.START;
     1922     4472    4                    TOS$EVAL.REMAINING# = 0;   /* Force exit from REPEAT loop */
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:184  
     1923     4473    4                    END;
     1924     4474    3                 END;
     1925     4475
     1926     4476    3           IF SIGNAL THEN DO;
     1927     4477    3              NODE_RANGE.START = STREAM.CURRENT;
     1928     4478
     1929     4479    4              IF FIND_END_BOUND THEN DO;
     1930     4480                      /*
     1931     4481                      *   Must make our own copy of NODE_RANGE.START now,
     1932     4482                      *     'cause call to VDA$LREAD below will change
     1933     4483                      *     STREAM.CURRENT, which is the owner of NODE_RANGE.START's
     1934     4484                      *     current objects.
     1935     4485                      */
     1936     4486    4                 CALL VDG$OCOPY_LOCATION (NODE_RANGE.START, OWNS_OBJECTS_LOC)
     1937     4487    4                   ALTRET (OCOPY_LOCATION_FAILED);
     1938     4488    4                 NODE_RANGE.START = OWNS_OBJECTS_LOC;
     1939     4489    4                 CALL VDA$LREAD (STREAM, , 1, %FIND)
     1940     4490    4                   ALTRET (LREAD_FAILED);
     1941     4491    4                 NODE_RANGE.ENDD = STREAM.CURRENT;
     1942     4492    4                 END;
     1943     4493    3              END;
     1944     4494
     1945     4495    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)
     1946     4496    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1947     4497
     1948     4498    3           IF OWNS_OBJECTS_LOC ~= %CLEAR THEN DO;
     1949     4499    3              CALL VDG$OCLEAR_LOCATION (OWNS_OBJECTS_LOC)
     1950     4500    3                ALTRET (OCLEAR_LOCATION_FAILED);
     1951     4501    3              END;
     1952     4502
     1953     4503    2           RETURN;
     1954     4504
     1955     4505
     1956     4506
     1957     4507    2   LREAD_FAILED: ;
     1958     4508    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     1959     4509    2   OCOPY_LOCATION_FAILED: ;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:185  
     1960     4510    2   OCLEAR_LOCATION_FAILED: ;
     1961     4511    2           ALTRETURN;
     1962     4512
     1963     4513
     1964     4514    2   END IREL_NODE;
     1965     4515
     1966     4516                %BOX (TITLE="IABS_NODE", PAGE=YES);
              4524    2
              4528    2   /***************************************************************************
              4530    2    *                                                                         *
              4534    2            *                                 IABS_NODE                               *
              4536    2            *                                                                         *
              4538    2           ***************************************************************************/

     1967     4542
     1968     4543        /*I* NAME:  IABS_NODE
     1969     4544            PARAMETERS:
     1970     4545                None.
     1971     4546            INPUT:
     1972     4547                STREAM - VD$STREAM to use; must be open.  It's position at
     1973     4548                    entry is irrelevent and unknown.
     1974     4549                LEVEL - Level to position in.
     1975     4550                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     1976     4551                    of the block operand; if %FALSE, just find the start
     1977     4552                    boundary.
     1978     4553                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     1979     4554                    its .STATE and other info.
     1980     4555                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     1981     4556                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary
     1982     4557                    boundary of the range to be set.
     1983     4558                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     1984     4559                    .CODE# must be %OPAND_NODE, and its .KEY must be
     1985     4560                    non-%CLEAR.  If .KEY is a string-key and the file uses numeric
     1986     4561                    keys, then .KEY must contain a decimal number in character form
     1987     4562                    (optionally with a fractional part).  If the file uses numeric
     1988     4563                    keys, .KEY's numeric value must have been multiplied
     1989     4564                    by 1000 so that fractional digits are shifted into the
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:186  
     1990     4565                    integer value.  Note that this is true even for consecutive
     1991     4566                    files, where the keys should not have fractional parts;
     1992     4567                    therefore, this routine must divide consecutive keys by
     1993     4568                    1000 to determine their true value.
     1994     4569                IT_ADJUST - Parent of IT$OPERAND.
     1995     4570                IT$BLOCK_EXPR - Root node of InTree.
     1996     4571                OPERAND - VD$OPERAND whose InTree we're evaluating.
     1997     4572            OUTPUT:
     1998     4573                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     1999     4574                    be set as specified by IT$OPERAND.
     2000     4575            DESCRIPTION:
     2001     4576                Given an absolute %OPAND_NODE movement request, fill
     2002     4577                TOS$EVAL.RANGE with specs of the bounds of the specified
     2003     4578                node.
     2004     4579        */
     2005     4580
     2006     4581    1   IABS_NODE: PROC ALTRET;
     2007     4582
     2008     4583
     2009     4584        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);  /* Doesn't own objects! */
     2010     4653    2   DCL NODE_KEY$ PTR;
     2011     4654        %VD$KEY_NUMBER (NAME=NUMERIC_KEY, STCLASS=AUTO);
     2012     4669    2   DCL POINT_INDEX SBIN;
     2013     4670    2   DCL ORIGINAL_LENGTH SBIN;
     2014     4671    2   DCL SBIN_VALUE SBIN;
     2015     4672        %VD_TEXTC (NAME=FRACT, STCLASS=AUTO, MXNB=%MXNB_EDITKEY_FRACT);
     2016     4813    2   DCL ERR_CODE SBIN;
     2017     4814    2   DCL STREAM_KEY$ PTR;
     2018     4815    2   DCL INDX SBIN;
     2019     4816
     2020     4817
     2021     4818        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
     2022     4841        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2023     4864        %VD$KEY_NUMBER;
     2024     4879        %VD$KEY;
     2025     4893
     2026     4894
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:187  
     2027     4895
     2028     4896                /* First, coerce the key to the appropriate type for the file */
     2029     4897
     2030     4898    2           NUMERIC_KEY = IT$OPERAND.KEY;
     2031     4899    2           NUMERIC_KEY.TYPE# = STREAM.PORT$->VD$PORT.LEVEL.KEY_TYPE# (LEVEL);
     2032     4900    2           IF NUMERIC_KEY.TYPE# ~= IT$OPERAND.KEY.TYPE# THEN
     2033     4901    3           DO CASE (NUMERIC_KEY.TYPE#);
     2034     4902    3            CASE (%KT_NUMBER, %KT_EDITKEY);
     2035     4903    4              IF IT$OPERAND.KEY.TYPE# = %KT_STRING THEN DO;
     2036     4904                      /* Convert a string key containing a decimal number to binary */
     2037     4905                      %GETKEY (KEY=IT$OPERAND.KEY, PTR=NODE_KEY$);
     2038     4915                      /*N* If X$EVAL supported fixed-place decimal, wouldn't have to
     2039     4916                      *N*   worry about finding the decimal point ourselves *N*/
     2040     4917    4                 CALL INDEX (POINT_INDEX, %CHR_PERIOD, NODE$KEY.BYTES);
     2041     4918    4                 ORIGINAL_LENGTH = NODE$KEY.LENGTH#;
     2042     4919    4                 NODE$KEY.LENGTH# = POINT_INDEX;
     2043     4920    4                 CALL X$DEC_CONVERT (NODE_KEY$, SBIN_VALUE)
     2044     4921    4                   ALTRET (DEC_CONVERT_FAILED);
     2045     4922    4                 IF SBIN_VALUE < 0 THEN GOTO ILL_NUMKEY_INTEGER_FAILURE;
     2046     4923    4                 NODE$KEY.LENGTH# = ORIGINAL_LENGTH;
     2047     4924    5                 IF NUMERIC_KEY.TYPE# = %KT_NUMBER THEN DO;
     2048     4925    5                    IF SBIN_VALUE > %MX_CONSEC_RECORDS THEN
     2049     4926    5                       GOTO CONSEC_KEY_TOO_BIG_FAILURE;
     2050     4927    5                    IF ORIGINAL_LENGTH > POINT_INDEX THEN
     2051     4928    5                       GOTO CONSEC_KEY_FRACT_FAILURE;
     2052     4929    5                    NUMERIC_KEY.BYTES# = SBIN_VALUE;
     2053     4930    5                    END;
     2054     4931    4                 ELSE IF SBIN_VALUE < %MX_EDITKEY_INTEGER THEN
     2055     4932    4                       NUMERIC_KEY.BYTES# = SBIN_VALUE * 1000;
     2056     4933    4                    ELSE GOTO ILL_NUMKEY_INTEGER_FAILURE;
     2057     4934    4                 SBIN_VALUE = ORIGINAL_LENGTH - POINT_INDEX -
     2058     4935    4                   %LENGTHC(CHR_PERIOD);
     2059     4936    5                 IF SBIN_VALUE > 0 THEN DO;
     2060     4937    5                    IF SBIN_VALUE > LENGTHC(FRACT.BYTES) THEN
     2061     4938    5                       GOTO ILL_EDITKEY_FRACT_FAILURE;
     2062     4939    5                    FRACT.LENGTH# = LENGTHC(FRACT.BYTES);
     2063     4940    5                    FRACT.BYTES = '000';
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:188  
     2064     4941    5                    SUBSTR(FRACT.BYTES, 0, SBIN_VALUE) =
     2065     4942    5                      SUBSTR(NODE$KEY.BYTES, POINT_INDEX + %LENGTHC(CHR_PERIOD));
     2066     4943    5                    CALL X$DEC_CONVERT (ADDR(FRACT), SBIN_VALUE)
     2067     4944    5                      ALTRET (DEC_CONVERT_FAILED);
     2068     4945    5                    NUMERIC_KEY.BYTES# = NUMERIC_KEY.BYTES# + SBIN_VALUE;
     2069     4946    5                    END;
     2070     4947    4                 END;
     2071     4948    3              ELSE IF NUMERIC_KEY.TYPE# = %KT_EDITKEY THEN
     2072     4949    3                    GOTO ILL_NUMKEY_INTEGER_FAILURE;
     2073     4950    3                 ELSE IF NUMERIC_KEY.BYTES# ~= NUMERIC_KEY.BYTES#/1000 * 1000 THEN
     2074     4951    3                       GOTO CONSEC_KEY_FRACT_FAILURE;
     2075     4952    3                    ELSE NUMERIC_KEY.BYTES# = NUMERIC_KEY.BYTES#/1000;
     2076     4953    3              NODE_KEY$ = ADDR(NIL);
     2077     4954                   %CLEARKEY (KEY=IT$OPERAND.KEY);
     2078     4964    3              NUMERIC_KEY.REP# = %REP_LOCAL;
     2079     4965    3              NUMERIC_KEY.LENGTH# = %NB_NUMERIC_KEY;
     2080     4966    3              IT$OPERAND.KEY = NUMERIC_KEY;
     2081     4967
     2082     4968    3            CASE (%KT_STRING);
     2083     4969        /*N*       Someday, may handle string-keyed files.
     2084     4970        *N*        IF IT$OPERAND.KEY.TYPE# = %KT_NUMBER THEN DO;
     2085     4971        *N*           \* Convert a binary key to a decimal character string *\
     2086     4972        *N*           END;          *N*/
     2087     4973
     2088     4974    3            CASE (ELSE);
     2089     4975    3              CALL VDG$ESCREECH;
     2090     4976    3            END;
     2091     4977
     2092     4978
     2093     4979    2           NODE_RANGE = %CLEAR;
     2094     4980                /* NOTE:  NODE_RANGE never owns any objects itself */
     2095     4981    2           NODE_RANGE.START = TOS$EVAL.RANGE.START;
     2096     4982    2           NODE_RANGE.START.POSITION# = 0;
     2097     4983    2           NODE_RANGE.START.EOF = %FALSE;
     2098     4984    2           NODE_RANGE.START.KEY (LEVEL-1) = IT$OPERAND.KEY;
     2099     4985
     2100     4986                /* Assume key doesn't exist */
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:189  
     2101     4987    2           NODE_RANGE.ENDD = NODE_RANGE.START;
     2102     4988
     2103     4989    2           IF FIND_END_BOUND THEN
     2104     4990    3   FIND_EO_NODE: DO;
     2105     4991                   /* We need to find the end location of the node */
     2106     4992    3              CALL VDA$LREAD (STREAM, NODE_RANGE.START, 0, %FIND)
     2107     4993    3                ALTRET (LREAD_FAILED);
     2108     4994    4              IF NOT STREAM.CURRENT.EOF THEN DO;
     2109     4995                      %GETKEY (KEY=NODE_RANGE.START.KEY, INDX=LEVEL-1,
     2110     4996                      PTR=NODE_KEY$);
     2111     5006                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2112     5007                      PTR=STREAM_KEY$);
     2113     5017    5                 IF NODE$KEY.BYTES = STREAM$KEY.BYTES THEN DO;
     2114     5018                         /* <key> exists:  find key of next existing node */
     2115     5019    5                    CALL VDA$LREAD (STREAM, , 1, %FIND)
     2116     5020    5                      ALTRET (LREAD_FAILED);
     2117     5021    5                    NODE_RANGE.ENDD = STREAM.CURRENT;
     2118     5022    5                    END;
     2119     5023    4                 END;
     2120     5024    3              END FIND_EO_NODE;
     2121     5025
     2122     5026    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)
     2123     5027    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2124     5028
     2125     5029    2           RETURN;
     2126     5030
     2127     5031
     2128     5032
     2129     5033    2   DEC_CONVERT_FAILED:
     2130     5034    2           ERR_CODE = %E$DECIMAL_NOT_LEGAL;
     2131     5035    2           GOTO STRING_KEY_ERROR;
     2132     5036
     2133     5037    2   ILL_NUMKEY_INTEGER_FAILURE:
     2134     5038    2           ERR_CODE = %E$NUMKEY_INTEGER_NOT_LEGAL;
     2135     5039    2           GOTO STRING_KEY_ERROR;
     2136     5040
     2137     5041    2   ILL_EDITKEY_FRACT_FAILURE:
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:190  
     2138     5042    2           ERR_CODE = %E$EDITKEY_FRACT_NOT_LEGAL;
     2139     5043    2           GOTO STRING_KEY_ERROR;
     2140     5044
     2141     5045    2   CONSEC_KEY_FRACT_FAILURE:
     2142     5046    2           ERR_CODE = %E$CONSEC_KEY_FRACT_NOT_LEGAL;
     2143     5047    2           GOTO STRING_KEY_ERROR;
     2144     5048
     2145     5049    2   CONSEC_KEY_TOO_BIG_FAILURE: ;
     2146     5050    2           ERR_CODE = %E$CONSEC_KEY_TOO_BIG;
     2147     5051
     2148     5052    2   STRING_KEY_ERROR:
     2149     5053    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     2150     5054    2             ALTRET (OALLOC_FAILED);
     2151     5055    2           VD$ERR.ERR.CODE# = ERR_CODE;
     2152     5056    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     2153     5057
     2154     5058    2           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     2155     5059    2           INDX = 0;
     2156     5060    3           DO WHILE INDX < %MX_CMD_OBJECTS
     2157     5061    3             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2158     5062    3              INDX = INDX + 1;
     2159     5063    3              END;
     2160     5064    2           IF INDX >= %MX_CMD_OBJECTS THEN
     2161     5065    2              CALL VDG$ESCREECH (INDX);
     2162     5066    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),
     2163     5067    2             (LENGTHC(VD$STRING_HEADER) + LENGTHC(VD$KEY) + %NB_PER_WORD-3) /
     2164     5068    2             %NB_PER_WORD)
     2165     5069    2             ALTRET (OALLOC_FAILED);
     2166     5070    2           SUBST$POINTER.V$ (0) =
     2167     5071    2             ADDR (VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH#);
     2168     5072    2           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
     2169     5073                %COPYKEY (FKEY = IT$OPERAND.KEY,
     2170     5074                TKEY = "SUBST$POINTER.V$ (0) -> VD$KEY");
     2171     5090
     2172     5091
     2173     5092    2   LREAD_FAILED: ;
     2174     5093    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:191  
     2175     5094    2   OALLOC_FAILED: ;
     2176     5095    2           ALTRETURN;
     2177     5096
     2178     5097    2   END IABS_NODE;
     2179     5098
     2180     5099                %BOX (TITLE="IREL_POSITION", PAGE=YES);
              5107    2
              5111    2   /***************************************************************************
              5113    2    *                                                                         *
              5117    2            *                               IREL_POSITION                             *
              5119    2            *                                                                         *
              5121    2           ***************************************************************************/

     2181     5125
     2182     5126        /*I* NAME: IREL_POSITION
     2183     5127            PARAMETERS:
     2184     5128                None.
     2185     5129            INPUT:
     2186     5130                STREAM - VD$STREAM to use; must be open.  It's position at
     2187     5131                    entry is irrelevent and unknown.
     2188     5132                LEVEL - Level to position in.  Must be the lowest level of the
     2189     5133                    file structure.
     2190     5134                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     2191     5135                    of the block operand; if %FALSE, just find the start
     2192     5136                    boundary.
     2193     5137                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2194     5138                    its .STATE and other info.
     2195     5139                TOS$EVAL.ENCLOSING - Enclosing range for this relative operand.
     2196     5140                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     2197     5141                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     2198     5142                    location for relative movement.
     2199     5143                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2200     5144                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
     2201     5145                    of the range to be set.
     2202     5146                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     2203     5147                    .CODE# must be %OPAND_POSITION, and its .KEY must be
     2204     5148                    %CLEAR.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:192  
     2205     5149                IT_ADJUST - Parent of IT$OPERAND.
     2206     5150                IT$BLOCK_EXPR - Root node of InTree.
     2207     5151                OPERAND - VD$OPERAND whose InTree we're evaluating.
     2208     5152            OUTPUT:
     2209     5153                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2210     5154                    be set as specified by IT$OPERAND.
     2211     5155                SIGNAL will contain %FALSE if we tried to go beyond BOF
     2212     5156                    or EOF or TOS$EVAL.ENCLOSING while moving; %TRUE otherwise.
     2213     5157            DESCRIPTION:
     2214     5158                Call VDE$IMOVE_BY_POSITIONS to perform the move, setting
     2215     5159                    NODE_RANGE.START.POSITION# to the found location.  If we
     2216     5160                    need to find the end of the operand, its simply
     2217     5161                    one position to the right of the found position.
     2218     5162                    NOTE:  This is true even if the found position
     2219     5163                        doesn't exist or is the last position of the
     2220     5164                        node.  The effect of this is to never allow
     2221     5165                        a POSITION operand to cover the end-of-record
     2222     5166                        boundary (which it would do if the start of the
     2223     5167                        POSITION operand were on one node and the end
     2224     5168                        of the operand on the next node!).
     2225     5169                If we found the operand successfully, load TOS$EVAL.RANGE
     2226     5170                    from the operand's range.
     2227     5171        */
     2228     5172
     2229     5173    1   IREL_POSITION: PROC ALTRET;
     2230     5174
     2231     5175
     2232     5176        /* NODE_RANGE.START does own objects; but NODE_RANGE.ENDD doesn't!!! */
     2233     5177        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);
     2234     5246    2   DCL SKIP_COUNT SBIN;
     2235     5247    2   DCL MX_RECORDS SBIN;
     2236     5248
     2237     5249
     2238     5250
     2239     5251    2           SIGNAL = %TRUE;
     2240     5252    2           CALL VDG$OCOPY_LOCATION (TOS$EVAL_RELATIVE_TO, NODE_RANGE.START)
     2241     5253    2             ALTRET (OCOPY_LOCATION_FAILED);
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:193  
     2242     5254    2           NODE_RANGE.ENDD = %CLEAR;   /* For now */
     2243     5255    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;
     2244     5256    2           MX_RECORDS = %INFINITY;     /* No limit on # records to skip */
     2245     5257
     2246     5258    2           CALL VDE$IMOVE_BY_POSITIONS (STREAM, NODE_RANGE.START,
     2247     5259    2             TOS$EVAL.ENCLOSING, MX_RECORDS, IT$OPERAND.OPTIONS.DIRECTION#,
     2248     5260    2             SKIP_COUNT, SIGNAL)
     2249     5261    2             ALTRET (IMOVE_BY_POSITIONS_FAILED);
     2250     5262
     2251     5263    3           IF SIGNAL THEN DO;
     2252     5264    4              IF FIND_END_BOUND THEN DO;
     2253     5265    4                 NODE_RANGE.ENDD = NODE_RANGE.START;
     2254     5266    4                 NODE_RANGE.ENDD.POSITION# = NODE_RANGE.ENDD.POSITION# + 1;
     2255     5267    4                 END;
     2256     5268    3              CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)
     2257     5269    3                ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2258     5270    3              END;
     2259     5271
     2260     5272    2           CALL VDG$OCLEAR_LOCATION (NODE_RANGE.START)
     2261     5273    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2262     5274
     2263     5275    2           RETURN;
     2264     5276
     2265     5277
     2266     5278
     2267     5279    2   IMOVE_BY_POSITIONS_FAILED: ;
     2268     5280    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     2269     5281    2   OCOPY_LOCATION_FAILED: ;
     2270     5282    2   OCLEAR_LOCATION_FAILED: ;
     2271     5283    2           ALTRETURN;
     2272     5284
     2273     5285    2   END IREL_POSITION;
     2274     5286
     2275     5287                %BOX (TITLE=IREL_POSITION_N, PAGE=YES);
              5295    2
              5299    2   /***************************************************************************
              5301    2    *                                                                         *
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:194  
              5305    2            *                              IREL_POSITION_N                            *
              5307    2            *                                                                         *
              5309    2           ***************************************************************************/

     2276     5313
     2277     5314        /*I* NAME: IREL_POSITION_N
     2278     5315            PARAMETERS:
     2279     5316                None.
     2280     5317            INPUT:
     2281     5318                STREAM - VD$STREAM to use; must be open.  It's position at
     2282     5319                    entry is irrelevent and unknown.
     2283     5320                LEVEL - Level to position in.
     2284     5321                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     2285     5322                    of the block operand; if %FALSE, just find the start
     2286     5323                    boundary.
     2287     5324                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2288     5325                    its .STATE and other info.
     2289     5326                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     2290     5327                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     2291     5328                    location for relative movement.
     2292     5329                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2293     5330                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
     2294     5331                    of the range to be set.
     2295     5332                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     2296     5333                    .CODE# must be %OPAND_POSITION, and its .KEY must be
     2297     5334                    non-%CLEAR, specifying (as if it were a VD$KEY_NUMBER)
     2298     5335                    the position number, counting from 0.  (Note that the
     2299     5336                    user gave the position # counting from 1; VDE$PARSE
     2300     5337                    translated it to a 0-offset position number.)
     2301     5338                IT_ADJUST - Parent of IT$OPERAND.
     2302     5339                IT$BLOCK_EXPR - Root node of InTree.
     2303     5340                OPERAND - VD$OPERAND whose InTree we're evaluating.
     2304     5341            OUTPUT:
     2305     5342                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2306     5343                    be set as specified by IT$OPERAND.
     2307     5344                SIGNAL will contain %FALSE if we tried to go beyond BOF
     2308     5345                    or EOF while moving; %TRUE otherwise.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:195  
     2309     5346            DESCRIPTION:
     2310     5347                If TOS$EVAL_RELATIVE_TO specifies the record marked "x" below, and
     2311     5348                    IT$OPERAND.KEY specifies the position marked "x" below,
     2312     5349                    then either side of the "|"s below are labelled with the
     2313     5350                    movement clause necessary to make them the output
     2314     5351                    TOS$EVAL_BOUND location:
     2315     5352
     2316     5353                    I__________BO BA SK 1 PO n|_|EO BA SK 1 PO n____________I
     2317     5354                    I__(FO or BA) BO SK 0 PO n|x|EO SK 0 PO n (FO or BA)___I
     2318     5355                    I_____________BO SK 1 PO n|_|EO SK 1 PO n___________I
     2319     5356                    I_____________BO SK 2 PO n|_|EO SK 2 PO n_____________I
     2320     5357                                                  etc.
     2321     5358
     2322     5359                If the SKIP-count is 0, the TOS$EVAL_RELATIVE keys will be
     2323     5360                    unchanged; otherwise, call the Accessor to move
     2324     5361                    the number of nodes necessary, starting from the
     2325     5362                    TOS$EVAL_RELATIVE_TO location.  Set the new node keys
     2326     5363                    for the new location.  If we hit BOF or EOF during
     2327     5364                    the move, then set TOS$EVAL_BOUND to BOF or EOF and
     2328     5365                    return SIGNAL = %FALSE.
     2329     5366                Set the TOS$EVAL_BOUND position to the specified one; if we
     2330     5367                    need to find the end of the operand, simply add one
     2331     5368                    to the position.
     2332     5369                Note that we may point to a position which doesn't exist in
     2333     5370                    the record.  That's fine.
     2334     5371        */
     2335     5372
     2336     5373    1   IREL_POSITION_N: PROC ALTRET;
     2337     5374
     2338     5375
     2339     5376        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);   /* Doesn't own objects */
     2340     5445    2   DCL SKIP_COUNT SBIN;
     2341     5446    2   DCL INITIAL_KEY$ PTR;
     2342     5447    2   DCL STREAM_KEY$ PTR;
     2343     5448
     2344     5449
     2345     5450        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:196  
     2346     5473        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2347     5496        %VD$KEY_NUMBER;
     2348     5511
     2349     5512
     2350     5513
     2351     5514    2           SIGNAL = %TRUE;
     2352     5515    2           NODE_RANGE.START = TOS$EVAL_RELATIVE_TO;
     2353     5516    2           NODE_RANGE.ENDD = %CLEAR;   /* For now */
     2354     5517
     2355     5518    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;
     2356     5519    2           IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN
     2357     5520    2              SKIP_COUNT = - SKIP_COUNT;
     2358     5521
     2359     5522    3           IF SKIP_COUNT ~= 0 THEN DO;
     2360     5523    3              CALL VDA$LREAD (STREAM, NODE_RANGE.START, SKIP_COUNT, %FIND)
     2361     5524    3                ALTRET (LREAD_FAILED);
     2362     5525    3              IF STREAM.CURRENT.EOF THEN
     2363     5526    3                 SIGNAL = %FALSE;
     2364     5527    4              ELSE IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN DO;
     2365     5528                         /* Check to see if we hit BOF */
     2366     5529                         %GETKEY (KEY=NODE_RANGE.START.KEY, INDX=LEVEL-1,
     2367     5530                         PTR=INITIAL_KEY$);
     2368     5540                         %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2369     5541                         PTR=STREAM_KEY$);
     2370     5551    5                    IF STREAM$KEY.BYTES >= INITIAL$KEY.BYTES THEN DO;
     2371     5552    5                       NODE_RANGE.START = %CLEAR;
     2372     5553    5                       SIGNAL = %FALSE;       /* Hit BOF */
     2373     5554    5                       END;
     2374     5555    4                    END;
     2375     5556    3              NODE_RANGE.START = STREAM.CURRENT;
     2376     5557    3              END;
     2377     5558
     2378     5559    2           IF NOT SIGNAL THEN
     2379     5560    2              RETURN;
     2380     5561
     2381     5562    2           NODE_RANGE.START.POSITION# =
     2382     5563    2             ADDR(IT$OPERAND.KEY) -> VD$KEY_NUMBER.BYTES#;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:197  
     2383     5564
     2384     5565    3           IF FIND_END_BOUND THEN DO;
     2385     5566    3              NODE_RANGE.ENDD = NODE_RANGE.START;
     2386     5567    3              NODE_RANGE.ENDD.POSITION# = MINIMUM(%MXNB_DATA,
     2387     5568    3                NODE_RANGE.ENDD.POSITION# + 1);
     2388     5569    3              END;
     2389     5570
     2390     5571    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)
     2391     5572    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2392     5573
     2393     5574    2           RETURN;
     2394     5575
     2395     5576
     2396     5577
     2397     5578    2   LREAD_FAILED: ;
     2398     5579    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     2399     5580    2           ALTRETURN;
     2400     5581
     2401     5582
     2402     5583    2   END IREL_POSITION_N;
     2403     5584
     2404     5585                %BOX (TITLE="LOAD_EVAL_FROM_RANGE", PAGE=YES);
              5593    2
              5597    2   /***************************************************************************
              5599    2    *                                                                         *
              5603    2            *                            LOAD_EVAL_FROM_RANGE                         *
              5605    2            *                                                                         *
              5607    2           ***************************************************************************/

     2405     5611
     2406     5612        /*I* NAME: LOAD_EVAL_FROM_RANGE
     2407     5613            PARAMETERS:
     2408     5614                RANGE - VD$RANGE to set TOS$EVAL.RANGE from.
     2409     5615                                        !! NOTE !!
     2410     5616                        RANGE may be an alias for TOS$EVAL.RANGE, or
     2411     5617                        it may point to objects owned by TOS$EVAL.RANGE.
     2412     5618                        Therefore, at entry, we must make our own copy
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:198  
     2413     5619                        of RANGE before we clear TOS$EVAL.RANGE.
     2414     5620            INPUT:
     2415     5621                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2416     5622                    its .STATE and other info.
     2417     5623                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2418     5624                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary
     2419     5625                    boundary of the range to be set from RANGE.
     2420     5626                IT$OPERAND - VD$IT_OPERAND which we're evaluating.
     2421     5627                IT_ADJUST - Parent of IT$OPERAND.
     2422     5628            OUTPUT:
     2423     5629                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2424     5630                    be set appropriately from RANGE.
     2425     5631            DESCRIPTION:
     2426     5632                Based on TOS$EVAL.STATE#,
     2427     5633        *??*     IT_ADJUST.NEW_STATE#,
     2428     5634                IT$OPERAND's .POINT option, and whether IT$OPERAND
     2429     5635                is the last child of IT_ADJUST --
     2430     5636                set TOS$EVAL_BOUND.  If the state is EVST_INITIAL,
     2431     5637                also set TOS$EVAL.RANGE.ENDD.  See the table at
     2432     5638                the heading of VDE$IADJUST for specifics on who sets
     2433     5639                what and why.
     2434     5640        */
     2435     5641
     2436     5642    1   LOAD_EVAL_FROM_RANGE: PROC (RANGE) ALTRET;
     2437     5643
     2438     5644        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2439     5713
     2440     5714
     2441     5715
     2442     5716        %VD$RANGE (NAME=MY_RANGE, STCLASS=AUTO);
     2443     5785    2   DCL SRC_FOR_BOUND$ PTR;
     2444     5786    2   DCL SRC_FOR_ENDD$ PTR;
     2445     5787
     2446     5788
     2447     5789        %VD$LOCATION (NAME=SRC$FOR_BOUND, STCLASS="BASED(SRC_FOR_BOUND$)");
     2448     5817        %VD$LOCATION (NAME=SRC$FOR_ENDD, STCLASS="BASED(SRC_FOR_ENDD$)");
     2449     5845
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:199  
     2450     5846
     2451     5847
     2452     5848    2           CALL VDG$OCOPY_RANGE (RANGE, MY_RANGE)
     2453     5849    2             ALTRET (OCOPY_RANGE_FAILED);
     2454     5850
     2455     5851    3           IF IT$OPERAND.OPTIONS.POINT# = %PNT_EO THEN DO;
     2456     5852    3              SRC_FOR_BOUND$ = ADDR(MY_RANGE.ENDD);
     2457     5853    3              SRC_FOR_ENDD$ = ADDR(MY_RANGE.ENDD);
     2458     5854    3              END;
     2459     5855    2           ELSE IF IT$OPERAND.OPTIONS.POINT# = %PNT_AO
     2460     5856    3                AND ADDR(IT$OPERAND) = IT_ADJUST.MOVEMENTS_TAIL$ THEN DO;
     2461     5857    3                 IF TOS$EVAL.STATE# = %EVST_END THEN
     2462     5858        /*??*          AND IT_ADJUST.NEW_STATE# = %EVST_END THEN */
     2463     5859    3                    SRC_FOR_BOUND$ = ADDR(MY_RANGE.ENDD);
     2464     5860    3                 ELSE
     2465     5861    3                    SRC_FOR_BOUND$ = ADDR(MY_RANGE.START);
     2466     5862    3                 SRC_FOR_ENDD$ = ADDR(MY_RANGE.ENDD);
     2467     5863    3                 END;
     2468     5864    3              ELSE DO; /* For both %PNT_BO and non-last %PNT_AO */
     2469     5865    3                 SRC_FOR_BOUND$ = ADDR(MY_RANGE.START);
     2470     5866    3                 SRC_FOR_ENDD$ = ADDR(MY_RANGE.START);
     2471     5867    3                 END;
     2472     5868
     2473     5869    2           CALL VDG$OCLEAR_LOCATION (TOS$EVAL_BOUND)
     2474     5870    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2475     5871    2           TOS$EVAL_BOUND = SRC$FOR_BOUND;
     2476     5872
     2477     5873    3           IF TOS$EVAL.STATE# = %EVST_INITIAL THEN DO;
     2478     5874    3              CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.ENDD)
     2479     5875    3                ALTRET (OCLEAR_LOCATION_FAILED);
     2480     5876    4              IF SRC_FOR_BOUND$ = SRC_FOR_ENDD$ THEN DO;
     2481     5877    4                 CALL VDG$OCOPY_LOCATION (SRC$FOR_ENDD, TOS$EVAL.RANGE.ENDD)
     2482     5878    4                   ALTRET (OCOPY_LOCATION_FAILED);
     2483     5879    4                 END;
     2484     5880    3              ELSE
     2485     5881    3                 TOS$EVAL.RANGE.ENDD = SRC$FOR_ENDD;
     2486     5882    3              END;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:200  
     2487     5883    3           ELSE DO;
     2488     5884                   /* Didn't use SRC$FOR_ENDD:  may need to free it */
     2489     5885    4              IF SRC_FOR_BOUND$ ~= SRC_FOR_ENDD$ THEN DO;
     2490     5886    4                 CALL VDG$OCLEAR_LOCATION (SRC$FOR_ENDD)
     2491     5887    4                   ALTRET (OCLEAR_LOCATION_FAILED);
     2492     5888    4                 END;
     2493     5889    3              END;
     2494     5890
     2495     5891    2           RETURN;
     2496     5892
     2497     5893
     2498     5894    2   OCOPY_RANGE_FAILED: ;
     2499     5895    2   OCLEAR_LOCATION_FAILED: ;
     2500     5896    2   OCOPY_LOCATION_FAILED: ;
     2501     5897    2           ALTRETURN;
     2502     5898
     2503     5899    2   END LOAD_EVAL_FROM_RANGE;
     2504     5900
     2505     5901    1   END VDE$IADJUST;
     2506     5902        %EOD;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:201  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IADJUST.

   Procedure VDE$IADJUST requires 962 words for executable code.
   Procedure VDE$IADJUST requires 98 words of local(AUTO) storage.

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:202  

 Object Unit name= VDE$IADJUST                                File name= VDE$INTERPRET.:VDA5TOU
 UTS= JUL 04 '97 11:11:51.84 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  VDE$IADJUST
    1   Proc  even  none   962   1702  VDE$IADJUST
    2  RoData even  none    11     13  VDE$IADJUST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  VDE$IADJUST
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:203  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 VDG$OCLEAR_RANGE
 yes     yes           Std       3 VDE$PREAD_LO_NAME
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       4 VDE$IPATTERN
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 X$DEC_CONVERT
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       7 VDE$IMOVE_BY_POSITIONS
 yes     yes           Std       2 VDG$OCOPY_RANGE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_KEY_NUMERIC_BOF                    VD_CMD_OBJECTS$                       B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:204  


     1449        1        /*T***********************************************************/
     1450        2        /*T*                                                         */
     1451        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1452        4        /*T*                                                         */
     1453        5        /*T***********************************************************/
     1454        6
     1455        7        /*D* NAME:  VDE$IADJUST
     1456        8            PARAMETERS:
     1457        9                OPERAND - VD$OPERAND whose InTree we're evaluating:
     1458       10                    .STREAM$ must point to a stream open to the current
     1459       11                        EditBlock's file.
     1460       12                    .INTREE$ must point to the root node of the InTree being
     1461       13                        evaluated.  Its .OPTIONS must specify the Level and
     1462       14        *N*             Component to use.
     1463       15                    .EDIT_BLOCK$ must point to a block descriptor for
     1464       16                        the current EditBlock.
     1465       17                    .EVAL$ must point to the top VD$EVAL on the evaluation
     1466       18                        stack.  In this VD$EVAL:
     1467       19                        .ENCLOSING must specify the limits on all FilePointer
     1468       20                            movement.
     1469       21                        .RANGE must specify the initial range to move relative
     1470       22                            to.
     1471       23                        .STATE# must specify the current evaluation state.
     1472       24                IT_ADJUST - THRU or ADJUST node whose movement-expr nodes
     1473       25                    nodes are to be evaluated.  It's ok if IT_ADJUST has no
     1474       26                    children.
     1475       27                SIGNAL - An uninitialized BIT(1) ALIGNED.
     1476       28            INPUT:
     1477       29            OUTPUT:
     1478       30                SIGNAL will contain either true or false:
     1479       31                    SIGNAL will contain %TRUE if we were able to find a block
     1480       32                        for the IT_ADJUST node which lies at least partially
     1481       33                        within the enclosing range.
     1482       34                        Also, TOS$EVAL.RANGE has been modified to point to
     1483       35                        this found block.
     1484       36                    SIGNAL will contain %FALSE if we failed to find a range
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:205  
     1485       37                        for the InTree due to one of the following reasons:
     1486       38                        o An absolute operand specified a range which lies
     1487       39                            completely outside the enclosing range.
     1488       40                        o Not any of a relative operand could be
     1489       41                            found inside the enclosing range.
     1490       42                        o A conditional operand could not find a range
     1491       43                            within the enclosing range.
     1492       44                        Also, TOS$EVAL.RANGE may have been modified.
     1493       45                TOS$EVAL.RANGE (that is, .RANGE in the VD$EVAL on top of the
     1494       46                    evaluation stack) will be modified:  either or both of its
     1495       47                    VD$LOCATIONs may be modified as specified by the
     1496       48                    movement_expr nodes.  Which bound is modified to what is
     1497       49                    based on the TOS$EVAL.STATE#,
     1498       50        *??*        IT_ADJUST.NEW_STATE#,
     1499       51                    the .POINT# option of each of IT_ADJUST's children, and
     1500       52                    whether the child is the last child of an IT_ADJUST or not.
     1501       53                    The table below shows which bound of TOS$EVAL.RANGE
     1502       54                    ("str" is the start bound, "end" is the end bound)
     1503       55                    will be set to which point of the specified operand
     1504       56                    ("BO" is the start location of the operand, "EO"
     1505       57                    is the end location of the operand):
     1506       58
     1507       59                                                     Point
     1508       60                                 ---------------------------------------------
     1509       61                                    AO,       AO, not
     1510       62                      STATE      last child  last child     BO          EO
     1511       63                    ----------   ---------   ---------   ---------   ---------
     1512       64                    _INITIAL     str := BO   str := BO   str := BO   str := EO
     1513       65                                 end := EO   end := BO   end := BO   end := EO
     1514       66
     1515       67                    _START       str := BO   str := BO   str := BO   str := EO
     1516       68
     1517       69        *??*        _END, and
     1518       70        *??*         .NEW_STATE#
     1519       71        *??*         ~= _END     end := BO   end := BO   end := BO   end := EO
     1520       72
     1521       73                    _END         end := EO   end := BO   end := BO   end := EO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:206  
     1522       74        *??*         and .NEW_STATE# = _END
     1523       75
     1524       76                    If IT_ADJUST has no children, TOS$EVAL.RANGE will be
     1525       77                    unchanged (we'll do nothing but return SIGNAL = %TRUE).
     1526       78                TOS$EVAL.REMAINING# may be forced to 0 (when we want to stop any
     1527       79                    further evaluation of an IT_SELECT (???Operator???) node).
     1528       80            DESCRIPTION:
     1529       81                Loop thru the chain of movement-expr nodes:
     1530       82
     1531       83                o For %OPAND_FILE, set TOS$EVAL.RANGE to .ENCLOSING.
     1532       84                    (VDE$IOPEN set the initial TOS$EVAL.ENCLOSING to the
     1533       85                    specified file already, and has already altered the
     1534       86                    EditBlock stack appropriately.)
     1535       87                o For %OPAND_PREVIOUS and %OPAND_NEXT, check to see if they
     1536       88                    are the only operand in the entire block expression:
     1537       89                    If so, set TOS$EVAL.RANGE from TOS$EVAL.RANGE.
     1538       90                    If not, set TOS$EVAL.RANGE to TOS$EVAL.ENCLOSING.
     1539       91                    (VDE$IOPEN set the initial TOS$EVAL.ENCLOSING and .RANGE
     1540       92                    and the EditBlock range from the previous or next EditBlock,
     1541       93                    and has already altered the EditBlock stack appropriately.)
     1542       94                o For %OPAND_LO_NAME, read the name from the Locations file,
     1543       95                    and copy the range from the name's block descriptor to
     1544       96                    TOS$EVAL.RANGE.
     1545       97                o For %OPAND_BLOCK_DESC, copy the range from the
     1546       98                    block descriptor to TOS$EVAL.RANGE.
     1547       99                o For absolute %OPAND_NODE (.KEY ~= %CLEAR), store the key in
     1548      100                    TOS$EVAL.RANGE.  If we need to find the end of the operand
     1549      101                    (ie, STATE = %EVST_INITIAL so we need to set both
     1550      102                    start and end bounds), we must call the Accessor
     1551      103                    find the key of the next record.
     1552      104                o For relative %OPAND_NODE (.KEY=%CLEAR), and for %OPAND_POSITION
     1553      105                    and %OPAND_PATTERN, we must go to the file to find the
     1554      106                    location requested.
     1555      107                    If we don't find a match, set TOS$EVAL.REMAINING# to 0,
     1556      108                    to force us out of a REPEAT SELECT "try the next alternative"
     1557      109                    loop in VDE$IRANGE.
     1558      110
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:207  
     1559      111                After evaluating each movement_expr node:
     1560      112                    Check that the new TOS$EVAL.RANGE bounds lie within
     1561      113                        TOS$EVAL.ENCLOSING; truncate TOS$EVAL.RANGE if necessary.
     1562      114                        If the new TOS$EVAL.RANGE is completely outside the
     1563      115                        TOS$EVAL.ENCLOSING boundaries, we'll force it to specify
     1564      116                        an empty block at the TOS$EVAL.ENCLOSING boundary beyond
     1565      117                        which it lies.
     1566      118                If evaluation of any movement_expr node yields a false SIGNAL,
     1567      119                    stop evaluating the entire chain of movement_expr nodes.
     1568      120
     1569      121                Note that absolute movement is a little different from
     1570      122                relative movement.  For absolute movement, if the requested
     1571      123                operand doesn't exist in the file, then the block resulting
     1572      124                from the movement is an empty block at the specified location.
     1573      125                For relative movement, we always move to the next existing
     1574      126                location in the file (always forward).  We don't want
     1575      127                to do that for absolute movement; specifically, for
     1576      128                record key movement requests, we need to allow the user to
     1577      129                say "CO ... AF 8" when record 8 doesn't exist, and we
     1578      130                must interpret that to be a null block at reckey 8, position
     1579      131                0.
     1580      132
     1581      133                For relative block operands, a 0 SKIP-count is not the same as
     1582      134                no movement.  A 0 SKIP-count specifies the operand (node,
     1583      135                position or pattern) in which the FilePointer currently lies.
     1584      136                For example, "SKIP 0 RECORD" starting from record 5.1,
     1585      137                position 20, yields a range from 5.1 position 0 thru
     1586      138                the start of the next record -- in other words, it
     1587      139                yields the entire record from which we started the
     1588      140                movement.  A 0 SKIP-count disregards the "direction"
     1589      141                of movement; it operates the same whether direction is
     1590      142                BACKWARD or FORWARD.
     1591      143        */
     1592      144
     1593      145        VDE$IADJUST: PROC (OPERAND, IT_ADJUST, SIGNAL) ALTRET;

    145  1 000000   000000 700200 xent  VDE$IADJUST  TSX0  ! X66_AUTO_3
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:208  
         1 000001   000142 000003                    ZERO    98,3

     1594      146
     1595      147
     1596      148        %INCLUDE VD_MACROS_M;
     1597     2363        %INCLUDE VD_PERR_C;
     1598     2511
     1599     2512
     1600     2513        %VD$OPERAND (NAME=OPERAND, STCLASS=PARAM);
     1601     2527        %VD$IT_ADJUST (NAME=IT_ADJUST, STCLASS=PARAM);
     1602     2564    1   DCL SIGNAL BIT(1) ALIGNED;
     1603     2565
     1604     2566
     1605     2567        /*
     1606     2568        *   Flag for VDA$LREAD's fourth parameter:  whether or not to read.
     1607     2569        */
     1608     2570
     1609     2571        %EQU FIND = FALSE;          /* Find the specified node; don't read it */
     1610     2572        %EQU FIND_AND_READ = TRUE;  /* Find node and read it */
     1611     2573
     1612     2574
     1613     2575    1   DCL VDE$PREAD_LO_NAME   ENTRY (3) ALTRET;
     1614     2576    1   DCL VDE$IMOVE_BY_POSITIONS  ENTRY (7) ALTRET;
     1615     2577    1   DCL VDE$IPATTERN        ENTRY (4) ALTRET;
     1616     2578    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     1617     2579    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1618     2580    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1619     2581    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1620     2582    1   DCL VDG$OCLEAR_RANGE    ENTRY (1) ALTRET;
     1621     2583    1   DCL VDG$OCOPY_RANGE     ENTRY (2) ALTRET;
     1622     2584    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1623     2585    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1624     2586    1   DCL VDG$ESCREECH        ENTRY (3);
     1625     2587    1   DCL X$DEC_CONVERT       ENTRY (2) ALTRET;
     1626     2588
     1627     2589
     1628     2590
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:209  
     1629     2591        %VD_6E (STCLASS=SYMREF);
     1630     2627        %VD$KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1631     2641    1   DCL VD_CMD_OBJECTS$ (0:%(MX_CMD_OBJECTS-1)) PTR SYMREF;
     1632     2642
     1633     2643
     1634     2644
     1635     2645    1   DCL LO_NAME$ PTR;
     1636     2646    1   DCL TOS_EVAL$ PTR;
     1637     2647    1   DCL IT_BLOCK_EXPR$ PTR;
     1638     2648    1   DCL TOS_EVAL_BOUND$ PTR;
     1639     2649    1   DCL TOS_EVAL_RELATIVE_TO$ PTR;
     1640     2650    1   DCL IT_MOVEMENT$ PTR;
     1641     2651    1   DCL STREAM$ PTR;
     1642     2652    1   DCL LEVEL UBIN;
     1643     2653    1   DCL FIND_END_BOUND BIT(1) ALIGNED;
     1644     2654    1   DCL REF_BLOCK_DESC$ PTR;
     1645     2655        %VD$RANGE (NAME=FOUND_RANGE, STCLASS=AUTO);
     1646     2724    1   DCL VD_ERR$ PTR;
     1647     2725    1   DCL SUBST_FIELD$ PTR;
     1648     2726
     1649     2727
     1650     2728        %VD$TEXTC (NAME=LO$NAME, STCLASS="BASED(LO_NAME$)");
     1651     2751        %VD$EVAL (NAME=TOS$EVAL, STCLASS="BASED(TOS_EVAL$)");
     1652     2996        %VD$IT_BLOCK_EXPR (NAME=IT$BLOCK_EXPR, STCLASS="BASED(IT_BLOCK_EXPR$)");
     1653     3146        %VD$LOCATION (NAME=TOS$EVAL_BOUND, STCLASS="BASED(TOS_EVAL_BOUND$)");
     1654     3174        %VD$LOCATION (NAME=TOS$EVAL_RELATIVE_TO,
     1655     3175            STCLASS="BASED(TOS_EVAL_RELATIVE_TO$)");
     1656     3203        %VD$IT_OPERAND (NAME=IT$OPERAND, STCLASS="BASED(IT_MOVEMENT$)");
     1657     3269        %VD$STREAM (NAME=STREAM, STCLASS="BASED(OPERAND.STREAM$)");
     1658     3375        %VD$BLOCK_DESC (NAME=REF$BLOCK_DESC, STCLASS="BASED(REF_BLOCK_DESC$)");
     1659     3522        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1660     3575        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1661     3620        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1662     3665        %VD$STRING_HEADER;
     1663     3701        %VD$BUFFER_HEADER;
     1664     3737        %VD$IT_SELECT;
     1665     3774        %VD$IT_ADJUST;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:210  
     1666     3811        %VD$BUFFER;
     1667     3869        %VD$TEXTC_REMOTE;
     1668     3930        %VD$PORT;
     1669     4028
     1670     4029
     1671     4030
     1672     4031    1           SIGNAL = %TRUE;

   4031  1 000002   400000 236003                    LDQ     -131072,DU
         1 000003   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 000004   000000 756100                    STQ     0,,PR0

     1673     4032    1           TOS_EVAL$ = OPERAND.EVAL$;

   4032  1 000005   200003 471500                    LDP1    @OPERAND,,AUTO
         1 000006   100003 236100                    LDQ     3,,PR1
         1 000007   200007 756100                    STQ     TOS_EVAL$,,AUTO

     1674     4033    1           IT_BLOCK_EXPR$ = OPERAND.INTREE$;

   4033  1 000010   100001 236100                    LDQ     1,,PR1
         1 000011   200010 756100                    STQ     IT_BLOCK_EXPR$,,AUTO

     1675     4034    1           LEVEL = IT$BLOCK_EXPR.OPTIONS.LEVEL#;

   4034  1 000012   200010 473500                    LDP3    IT_BLOCK_EXPR$,,AUTO
         1 000013   300031 236100                    LDQ     25,,PR3
         1 000014   000022 732000                    QRS     18
         1 000015   200015 756100                    STQ     LEVEL,,AUTO

     1676     4035    1           IF TOS$EVAL.STATE# ~= %EVST_END THEN

   4035  1 000016   200007 474500                    LDP4    TOS_EVAL$,,AUTO
         1 000017   400070 220100                    LDX0    56,,PR4
         1 000020   000003 100003                    CMPX0   3,DU
         1 000021   000026 600000 1                  TZE     s:4038

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:211  
     1677     4036    1              TOS_EVAL_BOUND$ = ADDR(TOS$EVAL.RANGE.START);

   4036  1 000022   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000023   000024 036003                    ADLQ    20,DU
         1 000024   200011 756100                    STQ     TOS_EVAL_BOUND$,,AUTO
         1 000025   000031 710000 1                  TRA     s:4040

     1678     4037    1           ELSE
     1679     4038    1              TOS_EVAL_BOUND$ = ADDR(TOS$EVAL.RANGE.ENDD);

   4038  1 000026   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000027   000035 036003                    ADLQ    29,DU
         1 000030   200011 756100                    STQ     TOS_EVAL_BOUND$,,AUTO

     1680     4039
     1681     4040    1           IT_MOVEMENT$ = IT_ADJUST.MOVEMENTS$;

   4040  1 000031   200004 475500                    LDP5    @IT_ADJUST,,AUTO
         1 000032   500004 236100                    LDQ     4,,PR5
         1 000033   200013 756100                    STQ     IT_MOVEMENT$,,AUTO

     1682     4041    1   EACH_MOVEMENT_NODE:
     1683     4042    2           DO WHILE (IT_MOVEMENT$ ~= ADDR(NIL));

   4042  1 000034   000276 710000 1     EACH_MOVEME* TRA     s:4159

     1684     4043    2              IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN

   4043  1 000035   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 000036   000005 720100                    LXL0    5,,PR0
         1 000037   000002 100003                    CMPX0   2,DU
         1 000040   000045 601000 1                  TNZ     s:4046

     1685     4044    2                 TOS_EVAL_RELATIVE_TO$ = ADDR(TOS$EVAL.RANGE.START);

   4044  1 000041   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000042   000024 036003                    ADLQ    20,DU
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:212  
         1 000043   200012 756100                    STQ     TOS_EVAL_RELATIVE_TO$,,AUTO
         1 000044   000050 710000 1                  TRA     s:4047

     1686     4045    2              ELSE
     1687     4046    2                 TOS_EVAL_RELATIVE_TO$ = ADDR(TOS$EVAL.RANGE.ENDD);

   4046  1 000045   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000046   000035 036003                    ADLQ    29,DU
         1 000047   200012 756100                    STQ     TOS_EVAL_RELATIVE_TO$,,AUTO

     1688     4047    2              FIND_END_BOUND = %FALSE;

   4047  1 000050   200016 450100                    STZ     FIND_END_BOUND,,AUTO

     1689     4048    2              IF IT$OPERAND.OPTIONS.POINT# = %PNT_EO

   4048  1 000051   000005 221100                    LDX1    5,,PR0
         1 000052   000003 101003                    CMPX1   3,DU
         1 000053   000066 600000 1                  TZE     s:4053
         1 000054   000001 101003                    CMPX1   1,DU
         1 000055   000070 601000 1                  TNZ     MOVEMENT_CODE_CASES
         1 000056   200004 471500                    LDP1    @IT_ADJUST,,AUTO
         1 000057   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 000060   100005 116100                    CMPQ    5,,PR1
         1 000061   000070 601000 1                  TNZ     MOVEMENT_CODE_CASES
         1 000062   200007 473500                    LDP3    TOS_EVAL$,,AUTO
         1 000063   300070 222100                    LDX2    56,,PR3
         1 000064   000002 102003                    CMPX2   2,DU
         1 000065   000070 600000 1                  TZE     MOVEMENT_CODE_CASES

     1690     4049    2                OR (IT$OPERAND.OPTIONS.POINT# = %PNT_AO
     1691     4050    2                AND IT_MOVEMENT$ = IT_ADJUST.MOVEMENTS_TAIL$
     1692     4051    2                AND TOS$EVAL.STATE# ~= %EVST_START) THEN
     1693     4052        /*??*         AND IT_ADJUST.NEW_STATE# = %EVST_END))) THEN */
     1694     4053    2                 FIND_END_BOUND = %TRUE;

   4053  1 000066   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:213  
         1 000067   200016 756100                    STQ     FIND_END_BOUND,,AUTO

     1695     4054
     1696     4055    2   MOVEMENT_CODE_CASES:
     1697     4056    3              DO CASE (IT$OPERAND.CODE#);

   4056  1 000070   000003 222100       MOVEMENT_CO* LDX2    3,,PR0
         1 000071   000011 102003                    CMPX2   9,DU
         1 000072   000074 602012 1                  TNC     MOVEMENT_CODE_CASES+4,X2
         1 000073   000261 710000 1                  TRA     s:4151
         1 000074   000261 710000 1                  TRA     s:4151
         1 000075   000105 710000 1                  TRA     s:4063
         1 000076   000145 710000 1                  TRA     s:4101
         1 000077   000113 710000 1                  TRA     s:4073
         1 000100   000113 710000 1                  TRA     s:4073
         1 000101   000175 710000 1                  TRA     s:4111
         1 000102   000204 710000 1                  TRA     s:4117
         1 000103   000216 710000 1                  TRA     s:4128
         1 000104   000230 710000 1                  TRA     s:4139

     1698     4057
     1699     4058    3               CASE (%OPAND_FILE);

     1700     4059                      /*
     1701     4060                      *  For %OPAND_FILE, we assume that VDE$IOPEN has already
     1702     4061                      *     setup the new EditBlock for the operand
     1703     4062                      */
     1704     4063    3                 CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.ENCLOSING)

   4063  1 000105   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000106   000002 036003                    ADLQ    2,DU
         1 000107   200105 756100                    STQ     STREAM_KEY$+3,,AUTO
         1 000110   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000111   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED
         1 000112   000270 710000 1                  TRA     s:4155

     1705     4064    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:214  
     1706     4065
     1707     4066
     1708     4067    3               CASE (%OPAND_PREVIOUS, %OPAND_NEXT);

     1709     4068                      /*
     1710     4069                      *  For these operands, we assume that VDE$IOPEN has
     1711     4070                      *     already setup the new EditBlock .RANGE from the
     1712     4071                      *     previous/next EditBlock's .RANGE.
     1713     4072                      */
     1714     4073    3                 IF IT$BLOCK_EXPR.SELECTS$ = IT$BLOCK_EXPR.SELECTS_TAIL$

   4073  1 000113   200010 471500                    LDP1    IT_BLOCK_EXPR$,,AUTO
         1 000114   100035 236100                    LDQ     29,,PR1
         1 000115   100036 116100                    CMPQ    30,,PR1
         1 000116   000137 601000 1                  TNZ     s:4088
         1 000117   100035 473500                    LDP3    29,,PR1
         1 000120   300004 236100                    LDQ     4,,PR3
         1 000121   300005 116100                    CMPQ    5,,PR3
         1 000122   000137 601000 1                  TNZ     s:4088
         1 000123   300004 474500                    LDP4    4,,PR3
         1 000124   400004 236100                    LDQ     4,,PR4
         1 000125   400005 116100                    CMPQ    5,,PR4
         1 000126   000137 601000 1                  TNZ     s:4088
         1 000127   200013 116100                    CMPQ    IT_MOVEMENT$,,AUTO
         1 000130   000137 601000 1                  TNZ     s:4088

     1715     4074    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$ =
     1716     4075    3                   IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS_TAIL$
     1717     4076    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1718     4077    3                   VD$IT_ADJUST.MOVEMENTS$ =
     1719     4078    3                   IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1720     4079    3                   VD$IT_ADJUST.MOVEMENTS_TAIL$
     1721     4080    3                   AND IT$BLOCK_EXPR.SELECTS$->VD$IT_SELECT.ADJUSTS$->
     1722     4081    3                   VD$IT_ADJUST.MOVEMENTS$ =
     1723     4082    4                   ADDR(IT$OPERAND) THEN DO;

     1724     4083                         /* This is only operand in entire block expression */
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:215  
     1725     4084    4                    CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.RANGE)

   4084  1 000131   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000132   000024 036003                    ADLQ    20,DU
         1 000133   200105 756100                    STQ     STREAM_KEY$+3,,AUTO
         1 000134   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000135   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1726     4085    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1727     4086    4                    END;

   4086  1 000136   000270 710000 1                  TRA     s:4155

     1728     4087    4                 ELSE DO;

     1729     4088    4                    CALL LOAD_EVAL_FROM_RANGE (TOS$EVAL.ENCLOSING)

   4088  1 000137   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 000140   000002 036003                    ADLQ    2,DU
         1 000141   200105 756100                    STQ     STREAM_KEY$+3,,AUTO
         1 000142   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000143   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1730     4089    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1731     4090    4                    END;

   4090  1 000144   000270 710000 1                  TRA     s:4155

     1732     4091
     1733     4092
     1734     4093    3               CASE (%OPAND_LO_NAME);

     1735     4094                      %GETKEY (KEY=IT$OPERAND.KEY, PTR=LO_NAME$);

   4101  1 000145   000006 723100                    LXL3    6,,PR0
         1 000146   000002 103003                    CMPX3   2,DU
         1 000147   000154 601000 1                  TNZ     s:4101+7
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:216  

   4101  1 000150   000007 471500                    LDP1    7,,PR0
         1 000151   100002 633500                    EPPR3   2,,PR1
         1 000152   200006 453500                    STP3    LO_NAME$,,AUTO
         1 000153   000157 710000 1                  TRA     s:4104

   4101  1 000154   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 000155   000007 036003                    ADLQ    7,DU
         1 000156   200006 756100                    STQ     LO_NAME$,,AUTO

     1736     4104    3                 CALL VDE$PREAD_LO_NAME (LO$NAME, REF_BLOCK_DESC$)

   4104  1 000157   200017 631500                    EPPR1   REF_BLOCK_DESC$,,AUTO
         1 000160   200133 451500                    STP1    SRC_FOR_ENDD$+2,,AUTO
         1 000161   200006 236100                    LDQ     LO_NAME$,,AUTO
         1 000162   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 000163   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000164   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000165   000000 701000 xent               TSX1    VDE$PREAD_LO_NAME
         1 000166   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1737     4105    3                   ALTRET (PREAD_LO_NAME_FAILED);
     1738     4106    3                 CALL LOAD_EVAL_FROM_RANGE (REF$BLOCK_DESC.RANGE)

   4106  1 000167   200017 236100                    LDQ     REF_BLOCK_DESC$,,AUTO
         1 000170   000003 036003                    ADLQ    3,DU
         1 000171   200105 756100                    STQ     STREAM_KEY$+3,,AUTO
         1 000172   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000173   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED
         1 000174   000270 710000 1                  TRA     s:4155

     1739     4107    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1740     4108
     1741     4109
     1742     4110    3               CASE (%OPAND_BLOCK_DESC);

     1743     4111    3                 REF_BLOCK_DESC$ = IT$OPERAND.PARAM$;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:217  

   4111  1 000175   000010 236100                    LDQ     8,,PR0
         1 000176   200017 756100                    STQ     REF_BLOCK_DESC$,,AUTO

     1744     4112    3                 CALL LOAD_EVAL_FROM_RANGE (REF$BLOCK_DESC.RANGE)

   4112  1 000177   000003 036003                    ADLQ    3,DU
         1 000200   200105 756100                    STQ     STREAM_KEY$+3,,AUTO
         1 000201   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000202   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED
         1 000203   000270 710000 1                  TRA     s:4155

     1745     4113    3                   ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1746     4114
     1747     4115
     1748     4116    3               CASE (%OPAND_NODE);

     1749     4117    4                 IF IT$OPERAND.KEY = %CLEAR THEN DO;

   4117  1 000204   000000 106500                    CMPC    fill='000'O
         1 000205   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         1 000206   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000207   000213 601000 1                  TNZ     s:4122

     1750     4118    4                    CALL IREL_NODE

   4118  1 000210   000302 701000 1                  TSX1    IREL_NODE
         1 000211   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1751     4119    4                      ALTRET (IREL_NODE_FAILED);
     1752     4120    4                    END;

   4120  1 000212   000270 710000 1                  TRA     s:4155

     1753     4121    4                 ELSE DO;

     1754     4122    4                    CALL IABS_NODE
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:218  

   4122  1 000213   000530 701000 1                  TSX1    IABS_NODE
         1 000214   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1755     4123    4                      ALTRET (IABS_NODE_FAILED);
     1756     4124    4                    END;

   4124  1 000215   000270 710000 1                  TRA     s:4155

     1757     4125
     1758     4126
     1759     4127    3               CASE (%OPAND_POSITION);

     1760     4128    4                 IF IT$OPERAND.KEY = %CLEAR THEN DO;

   4128  1 000216   000000 106500                    CMPC    fill='000'O
         1 000217   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         1 000220   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000221   000225 601000 1                  TNZ     s:4133

     1761     4129    4                    CALL IREL_POSITION

   4129  1 000222   001256 701000 1                  TSX1    IREL_POSITION
         1 000223   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1762     4130    4                      ALTRET (IREL_POSITION_FAILED);
     1763     4131    4                    END;

   4131  1 000224   000270 710000 1                  TRA     s:4155

     1764     4132    4                 ELSE DO;

     1765     4133    4                    CALL IREL_POSITION_N

   4133  1 000225   001362 701000 1                  TSX1    IREL_POSITION_N
         1 000226   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:219  
     1766     4134    4                      ALTRET (IREL_POSITION_N_FAILED);
     1767     4135    4                    END;

   4135  1 000227   000270 710000 1                  TRA     s:4155

     1768     4136
     1769     4137
     1770     4138    3               CASE (%OPAND_PATTERN);

     1771     4139    3                 CALL VDE$IPATTERN (OPERAND, IT$OPERAND, FOUND_RANGE, SIGNAL)

   4139  1 000230   200005 236100                    LDQ     @SIGNAL,,AUTO
         1 000231   200135 756100                    STQ     SRC_FOR_ENDD$+4,,AUTO
         1 000232   200020 631500                    EPPR1   FOUND_RANGE,,AUTO
         1 000233   200134 451500                    STP1    SRC_FOR_ENDD$+3,,AUTO
         1 000234   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 000235   200003 235100                    LDA     @OPERAND,,AUTO
         1 000236   200132 757100                    STAQ    SRC_FOR_ENDD$+1,,AUTO
         1 000237   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000240   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000241   000000 701000 xent               TSX1    VDE$IPATTERN
         1 000242   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1772     4140    3                   ALTRET (IPATTERN_FAILED);
     1773     4141    4                 IF SIGNAL THEN DO;

   4141  1 000243   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 000244   000000 234100                    SZN     0,,PR0
         1 000245   000270 605000 1                  TPL     s:4155

     1774     4142                         /* Note that FOUND_RANGE owns its objects! */
     1775     4143    4                    CALL LOAD_EVAL_FROM_RANGE (FOUND_RANGE)

   4143  1 000246   200020 631500                    EPPR1   FOUND_RANGE,,AUTO
         1 000247   200105 451500                    STP1    STREAM_KEY$+3,,AUTO
         1 000250   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000251   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:220  

     1776     4144    4                      ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1777     4145    4                    CALL VDG$OCLEAR_RANGE (FOUND_RANGE)

   4145  1 000252   200020 630500                    EPPR0   FOUND_RANGE,,AUTO
         1 000253   200132 450500                    STP0    SRC_FOR_ENDD$+1,,AUTO
         1 000254   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000255   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000256   000000 701000 xent               TSX1    VDG$OCLEAR_RANGE
         1 000257   000301 702000 1                  TSX2    PREAD_LO_NAME_FAILED

     1778     4146    4                      ALTRET (OCLEAR_RANGE_FAILED);
     1779     4147    4                    END;

   4147  1 000260   000270 710000 1                  TRA     s:4155

     1780     4148
     1781     4149
     1782     4150    3               CASE (ELSE);

     1783     4151    3                 CALL VDG$ESCREECH (IT$OPERAND.CODE#);

   4151  1 000261   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 000262   000003 036003                    ADLQ    3,DU
         1 000263   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 000264   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000265   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000266   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000267   000000 011000                    NOP     0

     1784     4152
     1785     4153    3               END MOVEMENT_CODE_CASES;

     1786     4154
     1787     4155    2              IF NOT SIGNAL THEN

   4155  1 000270   200005 470500                    LDP0    @SIGNAL,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:221  
         1 000271   000000 234100                    SZN     0,,PR0
         1 000272   000300 605000 1                  TPL     s:4162

     1788     4156    2                 EXIT EACH_MOVEMENT_NODE;
     1789     4157
     1790     4158    2              IT_MOVEMENT$ = IT$OPERAND.FLINK$;

   4158  1 000273   200013 471500                    LDP1    IT_MOVEMENT$,,AUTO
         1 000274   100002 236100                    LDQ     2,,PR1
         1 000275   200013 756100                    STQ     IT_MOVEMENT$,,AUTO

     1791     4159    2              END EACH_MOVEMENT_NODE;

   4159  1 000276   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000277   000035 601000 1                  TNZ     s:4043

     1792     4160
     1793     4161
     1794     4162    1           RETURN;

   4162  1 000300   000000 702200 xent               TSX2  ! X66_ARET

   4162  1 000301                       PREAD_LO_NA* null
   4162  1 000301                       LOAD_EVAL_F* null
   4162  1 000301                       IABS_NODE_F* null
   4162  1 000301                       IREL_NODE_F* null
   4162  1 000301                       IREL_POSITI* null
   4162  1 000301                       IREL_POSITI* null
   4162  1 000301                       IPATTERN_FA* null
   4162  1 000301                       OCLEAR_RANG* null
   4162  1 000301                       OALLOC_FAIL* null
     1795     4163
     1796     4164
     1797     4165
     1798     4166    1   PREAD_LO_NAME_FAILED: ;
     1799     4167    1   LOAD_EVAL_FROM_RANGE_FAILED: ;
     1800     4168    1   IABS_NODE_FAILED: ;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:222  
     1801     4169    1   IREL_NODE_FAILED: ;
     1802     4170    1   IREL_POSITION_FAILED: ;
     1803     4171    1   IREL_POSITION_N_FAILED: ;
     1804     4172    1   IPATTERN_FAILED: ;
     1805     4173    1   OCLEAR_RANGE_FAILED: ;
     1806     4174    1   OALLOC_FAILED: ;
     1807     4175    1           ALTRETURN;

   4175  1 000301   000000 702200 xent               TSX2  ! X66_AALT

     1808     4176
     1809     4177                %BOX (TITLE=IREL_NODE, PAGE=YES);
              4185    1
              4189    1   /***************************************************************************
              4191    1    *                                                                         *
              4195    1            *                                 IREL_NODE                              *
              4197    1            *                                                                        *
              4199    1          ***************************************************************************/

     1810     4203
     1811     4204        /*I* NAME: IREL_NODE
     1812     4205            PARAMETERS:
     1813     4206                None.
     1814     4207            INPUT:
     1815     4208                STREAM - VD$STREAM to use; must be open.  It's position at
     1816     4209                    entry is irrelevent and unknown.
     1817     4210                LEVEL - Level to position in.
     1818     4211                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     1819     4212                    of the block operand; if %FALSE, just find the start
     1820     4213                    boundary.
     1821     4214                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     1822     4215                    its .STATE and other info.
     1823     4216                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     1824     4217                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     1825     4218                    location for relative movement.
     1826     4219                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     1827     4220                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:223  
     1828     4221                    of the range to be set.
     1829     4222                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     1830     4223                    .CODE# must be %OPAND_NODE, and its .KEY must be
     1831     4224                    non-%CLEAR.
     1832     4225                IT_ADJUST - Parent of IT$OPERAND.
     1833     4226                IT$BLOCK_EXPR - Root node of InTree.
     1834     4227                OPERAND - VD$OPERAND whose InTree we're evaluating.
     1835     4228            OUTPUT:
     1836     4229                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     1837     4230                    be set as specified by IT$OPERAND.
     1838     4231                SIGNAL will contain %FALSE if we tried to go beyond BOF
     1839     4232                    or EOF while moving; %TRUE otherwise.
     1840     4233                TOS$EVAL.REMAINING# will be set to 0 if we tried to go beyond
     1841     4234                    BOF or EOF while moving.
     1842     4235            DESCRIPTION:
     1843     4236                If TOS$EVAL_RELATIVE_TO specifies any position within the record
     1844     4237                    marked "<in>" below, then the beginning of each record
     1845     4238                    below is labelled with the movement clause necessary to
     1846     4239                    make it the output TOS$EVAL_BOUND location:
     1847     4240
     1848     4241                BO BA SK 1 RE  or  EO BA SK 2 RE  I___________________I
     1849     4242        (FO or BA) BO SK 0 RE  or  EO BA SK 1 RE  I_______<in>__________I
     1850     4243           BO SK 1 RE  or  (FO or BA) EO SK 0 RE  I________________I
     1851     4244                      BO SK 2 RE  or  EO SK 1 RE  I__________________I
     1852     4245                            etc.
     1853     4246
     1854     4247                Note that if the TOS$EVAL_RELATIVE_TO record doesn't exist, we will
     1855     4248                    first move to the start of the next existing record (if any).
     1856     4249                    TEST CASE for this:
     1857     4250                        CURR; SHL 1    "or DE CURR REPEAT SE RE SE TH PO 1
     1858     4251                    If we don't force the start-bound of the found-range to
     1859     4252                    be a real location, then the first "record" found in
     1860     4253                    the CURRENT block will be BOF,0 - 2,0.  But the
     1861     4254                    POSITION operand will turn that range into BOF,0 - BOF,1!!!
     1862     4255                    The next call to VDE$IRANGE will find 2,0 - 2,1.  The effect
     1863     4256                    will be to skip the first record, since BOF,0 - BOF,1 is
     1864     4257                    an empty block.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:224  
     1865     4258                    SO, we first make TOS$EVAL_BOUND 1,0.  Then REPEAT SE RE
     1866     4259                    finds 1,0 - 2,0 and POSITION 1 finds 1,0 - 1,1.
     1867     4260
     1868     4261                Call the Accessor to move the number of nodes requested (even
     1869     4262                    0), starting from the TOS$EVAL_RELATIVE_TO location.
     1870     4263                    Set the new node keys for the new location.  If we hit BOF or
     1871     4264                    EOF during the move, then set TOS$EVAL_BOUND to BOF or EOF and
     1872     4265                    return SIGNAL = %FALSE, but go ahead and load the TOS$EVAL
     1873     4266                    from the "found range" (BOF-BOF or EOF-EOF).
     1874     4267                    Also reset the TOS$EVAL.REMAINING# to 0, to force us out
     1875     4268                    of a REPEAT SELECT "try the next alternative" loop in
     1876     4269                    VDE$IRANGE.
     1877     4270                If we need to find the end of the node, then call the
     1878     4271                    Accessor to find the next record key.
     1879     4272        */
     1880     4273
     1881     4274    1   IREL_NODE: PROC ALTRET;

   4274  1 000302   200044 741300       IREL_NODE    STX1  ! SUBST_FIELD$+1,,AUTO

     1882     4275
     1883     4276
     1884     4277        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);   /* Doesn't own objects */
     1885     4346        %VD$LOCATION (NAME=OWNS_OBJECTS_LOC, STCLASS=AUTO); /* Owns objects */
     1886     4374    2   DCL SKIP_COUNT SBIN;
     1887     4375    2   DCL INITIAL_KEY$ PTR;
     1888     4376    2   DCL STREAM_KEY$ PTR;
     1889     4377
     1890     4378
     1891     4379        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
     1892     4402        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     1893     4425
     1894     4426
     1895     4427
     1896     4428    2           SIGNAL = %TRUE;

   4428  1 000303   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:225  
         1 000304   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 000305   000000 756100                    STQ     0,,PR0

     1897     4429    2           NODE_RANGE = %CLEAR;

   4429  1 000306   000100 100400                    MLR     fill='000'O
         1 000307   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000310   200045 000110                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=72

     1898     4430    2           OWNS_OBJECTS_LOC = %CLEAR;

   4430  1 000311   000100 100400                    MLR     fill='000'O
         1 000312   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000313   200067 000044                    ADSC9   OWNS_OBJECTS_LOC,,AUTO   cn=0,n=36

     1899     4431
     1900     4432    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;

   4432  1 000314   200013 471500                    LDP1    IT_MOVEMENT$,,AUTO
         1 000315   100004 236100                    LDQ     4,,PR1
         1 000316   000022 736000                    QLS     18
         1 000317   000022 732000                    QRS     18
         1 000320   200100 756100                    STQ     SKIP_COUNT,,AUTO

     1901     4433    2           IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN

   4433  1 000321   100005 720100                    LXL0    5,,PR1
         1 000322   000002 100003                    CMPX0   2,DU
         1 000323   000326 601000 1                  TNZ     s:4436

     1902     4434    2              SKIP_COUNT = - SKIP_COUNT;

   4434  1 000324   200100 335100                    LCA     SKIP_COUNT,,AUTO
         1 000325   200100 755100                    STA     SKIP_COUNT,,AUTO

     1903     4435
     1904     4436    2           CALL VDA$LREAD (STREAM, TOS$EVAL_RELATIVE_TO, SKIP_COUNT, %FIND)
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:226  

   4436  1 000326   200003 473500                    LDP3    @OPERAND,,AUTO
         1 000327   300000 474500                    LDP4    0,,PR3
         1 000330   000000 236000 2                  LDQ     0
         1 000331   200135 756100                    STQ     SRC_FOR_ENDD$+4,,AUTO
         1 000332   200100 635500                    EPPR5   SKIP_COUNT,,AUTO
         1 000333   200134 455500                    STP5    SRC_FOR_ENDD$+3,,AUTO
         1 000334   200012 236100                    LDQ     TOS_EVAL_RELATIVE_TO$,,AUTO
         1 000335   200133 756100                    STQ     SRC_FOR_ENDD$+2,,AUTO
         1 000336   200132 454500                    STP4    SRC_FOR_ENDD$+1,,AUTO
         1 000337   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000340   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000341   000000 701000 xent               TSX1    VDA$LREAD
         1 000342   000526 702000 1                  TSX2    LREAD_FAILED

     1905     4437    2             ALTRET (LREAD_FAILED);
     1906     4438    3           IF STREAM.CURRENT.EOF THEN DO;

   4438  1 000343   200003 470500                    LDP0    @OPERAND,,AUTO
         1 000344   000000 471500                    LDP1    0,,PR0
         1 000345   100016 236100                    LDQ     14,,PR1
         1 000346   400000 316007                    CANQ    -131072,DL
         1 000347   000360 600000 1                  TZE     s:4444

     1907     4439    3              SIGNAL = %FALSE;

   4439  1 000350   200005 473500                    LDP3    @SIGNAL,,AUTO
         1 000351   300000 450100                    STZ     0,,PR3

     1908     4440    3              NODE_RANGE.START.EOF = %TRUE;

   4440  1 000352   400000 236007                    LDQ     -131072,DL
         1 000353   200055 256100                    ORSQ    NODE_RANGE+8,,AUTO

     1909     4441    3              NODE_RANGE.ENDD.EOF = %TRUE;

   4441  1 000354   200066 256100                    ORSQ    NODE_RANGE+17,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:227  

     1910     4442    3              TOS$EVAL.REMAINING# = 0; /* Force exit from REPEAT loop */

   4442  1 000355   200007 471500                    LDP1    TOS_EVAL$,,AUTO
         1 000356   100072 450100                    STZ     58,,PR1

     1911     4443    3              END;

   4443  1 000357   000442 710000 1                  TRA     s:4476

     1912     4444    3           ELSE IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN DO;

   4444  1 000360   200013 473500                    LDP3    IT_MOVEMENT$,,AUTO
         1 000361   300005 720100                    LXL0    5,,PR3
         1 000362   000002 100003                    CMPX0   2,DU
         1 000363   000442 601000 1                  TNZ     s:4476

     1913     4445                      /* Check to see if we hit BOF */
     1914     4446                      %GETKEY (KEY=TOS$EVAL_RELATIVE_TO.KEY, INDX=LEVEL-1,
     1915     4447                      PTR=INITIAL_KEY$);

   4454  1 000364   200015 235100                    LDA     LEVEL,,AUTO
         1 000365   000001 735000                    ALS     1
         1 000366   200012 474500                    LDP4    TOS_EVAL_RELATIVE_TO$,,AUTO
         1 000367   477776 721105                    LXL1    -2,AL,PR4
         1 000370   000002 101003                    CMPX1   2,DU
         1 000371   000376 601000 1                  TNZ     s:4454+10

   4454  1 000372   477777 475505                    LDP5    -1,AL,PR4
         1 000373   500002 636500                    EPPR6   2,,PR5
         1 000374   200101 456500                    STP6    INITIAL_KEY$,,AUTO
         1 000375   000403 710000 1                  TRA     s:4465

   4454  1 000376   200015 236100                    LDQ     LEVEL,,AUTO
         1 000377   000023 736000                    QLS     19
         1 000400   000001 136003                    SBLQ    1,DU
         1 000401   200012 036100                    ADLQ    TOS_EVAL_RELATIVE_TO$,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:228  
         1 000402   200101 756100                    STQ     INITIAL_KEY$,,AUTO

     1916     4457                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     1917     4458                      PTR=STREAM_KEY$);

   4465  1 000403   100004 722105                    LXL2    4,AL,PR1
         1 000404   000002 102003                    CMPX2   2,DU
         1 000405   000412 601000 1                  TNZ     s:4465+7

   4465  1 000406   100005 475505                    LDP5    5,AL,PR1
         1 000407   500002 636500                    EPPR6   2,,PR5
         1 000410   200102 456500                    STP6    STREAM_KEY$,,AUTO
         1 000411   000414 710000 1                  TRA     s:4468

   4465  1 000412   100005 635505                    EPPR5   5,AL,PR1
         1 000413   200102 455500                    STP5    STREAM_KEY$,,AUTO

     1918     4468    4                 IF STREAM$KEY.BYTES >= INITIAL$KEY.BYTES THEN DO;

   4468  1 000414   200102 475500                    LDP5    STREAM_KEY$,,AUTO
         1 000415   500000 236100                    LDQ     0,,PR5
         1 000416   000033 772000                    QRL     27
         1 000417   200101 476500                    LDP6    INITIAL_KEY$,,AUTO
         1 000420   000000 623006                    EAX3    0,QL
         1 000421   600000 236100                    LDQ     0,,PR6
         1 000422   000033 772000                    QRL     27
         1 000423   000000 624006                    EAX4    0,QL
         1 000424   040140 106540                    CMPC    fill='040'O
         1 000425   500000 200013                    ADSC9   0,,PR5                   cn=1,n=*X3
         1 000426   600000 200014                    ADSC9   0,,PR6                   cn=1,n=*X4
         1 000427   000442 602000 1                  TNC     s:4476

     1919     4469    4                    SIGNAL = %FALSE;       /* Hit BOF */

   4469  1 000430   200005 477500                    LDP7    @SIGNAL,,AUTO
         1 000431   700000 450100                    STZ     0,,PR7

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:229  
     1920     4470    4                    NODE_RANGE.START.KEY (%LVL_LOWER-1) = VD_KEY_NUMERIC_BOF;

   4470  1 000432   000100 100400                    MLR     fill='000'O
         1 000433   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 000434   200045 000010                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=8

     1921     4471    4                    NODE_RANGE.ENDD = NODE_RANGE.START;

   4471  1 000435   000100 100500                    MLR     fill='000'O
         1 000436   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36
         1 000437   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     1922     4472    4                    TOS$EVAL.REMAINING# = 0;   /* Force exit from REPEAT loop */

   4472  1 000440   200007 471500                    LDP1    TOS_EVAL$,,AUTO
         1 000441   100072 450100                    STZ     58,,PR1

     1923     4473    4                    END;

     1924     4474    3                 END;

     1925     4475
     1926     4476    3           IF SIGNAL THEN DO;

   4476  1 000442   200005 471500                    LDP1    @SIGNAL,,AUTO
         1 000443   100000 234100                    SZN     0,,PR1
         1 000444   000506 605000 1                  TPL     s:4495

     1927     4477    3              NODE_RANGE.START = STREAM.CURRENT;

   4477  1 000445   000000 473500                    LDP3    0,,PR0
         1 000446   000100 100500                    MLR     fill='000'O
         1 000447   300006 000044                    ADSC9   6,,PR3                   cn=0,n=36
         1 000450   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     1928     4478
     1929     4479    4              IF FIND_END_BOUND THEN DO;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:230  

   4479  1 000451   200016 234100                    SZN     FIND_END_BOUND,,AUTO
         1 000452   000506 605000 1                  TPL     s:4495

     1930     4480                      /*
     1931     4481                      *   Must make our own copy of NODE_RANGE.START now,
     1932     4482                      *     'cause call to VDA$LREAD below will change
     1933     4483                      *     STREAM.CURRENT, which is the owner of NODE_RANGE.START's
     1934     4484                      *     current objects.
     1935     4485                      */
     1936     4486    4                 CALL VDG$OCOPY_LOCATION (NODE_RANGE.START, OWNS_OBJECTS_LOC)

   4486  1 000453   200067 633500                    EPPR3   OWNS_OBJECTS_LOC,,AUTO
         1 000454   200133 453500                    STP3    SRC_FOR_ENDD$+2,,AUTO
         1 000455   200045 634500                    EPPR4   NODE_RANGE,,AUTO
         1 000456   200132 454500                    STP4    SRC_FOR_ENDD$+1,,AUTO
         1 000457   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000460   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000461   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 000462   000526 702000 1                  TSX2    LREAD_FAILED

     1937     4487    4                   ALTRET (OCOPY_LOCATION_FAILED);
     1938     4488    4                 NODE_RANGE.START = OWNS_OBJECTS_LOC;

   4488  1 000463   000100 100500                    MLR     fill='000'O
         1 000464   200067 000044                    ADSC9   OWNS_OBJECTS_LOC,,AUTO   cn=0,n=36
         1 000465   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     1939     4489    4                 CALL VDA$LREAD (STREAM, , 1, %FIND)

   4489  1 000466   200003 470500                    LDP0    @OPERAND,,AUTO
         1 000467   000000 471500                    LDP1    0,,PR0
         1 000470   000002 237000 2                  LDAQ    2
         1 000471   200134 757100                    STAQ    SRC_FOR_ENDD$+3,,AUTO
         1 000472   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000473   200133 756100                    STQ     SRC_FOR_ENDD$+2,,AUTO
         1 000474   200132 451500                    STP1    SRC_FOR_ENDD$+1,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:231  
         1 000475   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000476   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000477   000000 701000 xent               TSX1    VDA$LREAD
         1 000500   000526 702000 1                  TSX2    LREAD_FAILED

     1940     4490    4                   ALTRET (LREAD_FAILED);
     1941     4491    4                 NODE_RANGE.ENDD = STREAM.CURRENT;

   4491  1 000501   200003 470500                    LDP0    @OPERAND,,AUTO
         1 000502   000000 471500                    LDP1    0,,PR0
         1 000503   000100 100500                    MLR     fill='000'O
         1 000504   100006 000044                    ADSC9   6,,PR1                   cn=0,n=36
         1 000505   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     1942     4492    4                 END;

     1943     4493    3              END;

     1944     4494
     1945     4495    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)

   4495  1 000506   200045 631500                    EPPR1   NODE_RANGE,,AUTO
         1 000507   200105 451500                    STP1    STREAM_KEY$+3,,AUTO
         1 000510   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 000511   000526 702000 1                  TSX2    LREAD_FAILED

     1946     4496    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     1947     4497
     1948     4498    3           IF OWNS_OBJECTS_LOC ~= %CLEAR THEN DO;

   4498  1 000512   000000 106500                    CMPC    fill='000'O
         1 000513   200067 000044                    ADSC9   OWNS_OBJECTS_LOC,,AUTO   cn=0,n=36
         1 000514   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000515   000524 600000 1                  TZE     s:4503

     1949     4499    3              CALL VDG$OCLEAR_LOCATION (OWNS_OBJECTS_LOC)

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:232  
   4499  1 000516   200067 630500                    EPPR0   OWNS_OBJECTS_LOC,,AUTO
         1 000517   200132 450500                    STP0    SRC_FOR_ENDD$+1,,AUTO
         1 000520   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000521   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000522   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 000523   000526 702000 1                  TSX2    LREAD_FAILED

     1950     4500    3                ALTRET (OCLEAR_LOCATION_FAILED);
     1951     4501    3              END;

     1952     4502
     1953     4503    2           RETURN;

   4503  1 000524   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000525   000001 702211                    TSX2  ! 1,X1

   4498  1 000526                       LREAD_FAILED null
   4498  1 000526                       LOAD_EVAL_F* null
   4498  1 000526                       OCOPY_LOCAT* null
   4498  1 000526                       OCLEAR_LOCA* null
     1954     4504
     1955     4505
     1956     4506
     1957     4507    2   LREAD_FAILED: ;
     1958     4508    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     1959     4509    2   OCOPY_LOCATION_FAILED: ;
     1960     4510    2   OCLEAR_LOCATION_FAILED: ;
     1961     4511    2           ALTRETURN;

   4511  1 000526   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000527   000000 702211                    TSX2  ! 0,X1

     1962     4512
     1963     4513
     1964     4514    2   END IREL_NODE;
     1965     4515
     1966     4516                %BOX (TITLE="IABS_NODE", PAGE=YES);
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:233  
              4524    2
              4528    2   /***************************************************************************
              4530    2    *                                                                         *
              4534    2            *                                 IABS_NODE                              *
              4536    2            *                                                                        *
              4538    2          ***************************************************************************/

     1967     4542
     1968     4543        /*I* NAME:  IABS_NODE
     1969     4544            PARAMETERS:
     1970     4545                None.
     1971     4546            INPUT:
     1972     4547                STREAM - VD$STREAM to use; must be open.  It's position at
     1973     4548                    entry is irrelevent and unknown.
     1974     4549                LEVEL - Level to position in.
     1975     4550                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     1976     4551                    of the block operand; if %FALSE, just find the start
     1977     4552                    boundary.
     1978     4553                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     1979     4554                    its .STATE and other info.
     1980     4555                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     1981     4556                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary
     1982     4557                    boundary of the range to be set.
     1983     4558                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     1984     4559                    .CODE# must be %OPAND_NODE, and its .KEY must be
     1985     4560                    non-%CLEAR.  If .KEY is a string-key and the file uses numeric
     1986     4561                    keys, then .KEY must contain a decimal number in character form
     1987     4562                    (optionally with a fractional part).  If the file uses numeric
     1988     4563                    keys, .KEY's numeric value must have been multiplied
     1989     4564                    by 1000 so that fractional digits are shifted into the
     1990     4565                    integer value.  Note that this is true even for consecutive
     1991     4566                    files, where the keys should not have fractional parts;
     1992     4567                    therefore, this routine must divide consecutive keys by
     1993     4568                    1000 to determine their true value.
     1994     4569                IT_ADJUST - Parent of IT$OPERAND.
     1995     4570                IT$BLOCK_EXPR - Root node of InTree.
     1996     4571                OPERAND - VD$OPERAND whose InTree we're evaluating.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:234  
     1997     4572            OUTPUT:
     1998     4573                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     1999     4574                    be set as specified by IT$OPERAND.
     2000     4575            DESCRIPTION:
     2001     4576                Given an absolute %OPAND_NODE movement request, fill
     2002     4577                TOS$EVAL.RANGE with specs of the bounds of the specified
     2003     4578                node.
     2004     4579        */
     2005     4580
     2006     4581    1   IABS_NODE: PROC ALTRET;

   4581  1 000530   200044 741300       IABS_NODE    STX1  ! SUBST_FIELD$+1,,AUTO

     2007     4582
     2008     4583
     2009     4584        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);  /* Doesn't own objects! */
     2010     4653    2   DCL NODE_KEY$ PTR;
     2011     4654        %VD$KEY_NUMBER (NAME=NUMERIC_KEY, STCLASS=AUTO);
     2012     4669    2   DCL POINT_INDEX SBIN;
     2013     4670    2   DCL ORIGINAL_LENGTH SBIN;
     2014     4671    2   DCL SBIN_VALUE SBIN;
     2015     4672        %VD_TEXTC (NAME=FRACT, STCLASS=AUTO, MXNB=%MXNB_EDITKEY_FRACT);
     2016     4813    2   DCL ERR_CODE SBIN;
     2017     4814    2   DCL STREAM_KEY$ PTR;
     2018     4815    2   DCL INDX SBIN;
     2019     4816
     2020     4817
     2021     4818        %VD$TEXTC (NAME=NODE$KEY, STCLASS="BASED(NODE_KEY$)");
     2022     4841        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2023     4864        %VD$KEY_NUMBER;
     2024     4879        %VD$KEY;
     2025     4893
     2026     4894
     2027     4895
     2028     4896                /* First, coerce the key to the appropriate type for the file */
     2029     4897
     2030     4898    2           NUMERIC_KEY = IT$OPERAND.KEY;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:235  

   4898  1 000531   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 000532   000100 100500                    MLR     fill='000'O
         1 000533   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         1 000534   200070 000010                    ADSC9   NUMERIC_KEY,,AUTO        cn=0,n=8

     2031     4899    2           NUMERIC_KEY.TYPE# = STREAM.PORT$->VD$PORT.LEVEL.KEY_TYPE# (LEVEL);

   4899  1 000535   200003 471500                    LDP1    @OPERAND,,AUTO
         1 000536   100000 473500                    LDP3    0,,PR1
         1 000537   300001 474500                    LDP4    1,,PR3
         1 000540   200015 236100                    LDQ     LEVEL,,AUTO
         1 000541   000007 402007                    MPY     7,DL
         1 000542   400023 720106                    LXL0    19,QL,PR4
         1 000543   200070 740100                    STX0    NUMERIC_KEY,,AUTO

     2032     4900    2           IF NUMERIC_KEY.TYPE# ~= IT$OPERAND.KEY.TYPE# THEN

   4900  1 000544   000006 100100                    CMPX0   6,,PR0
         1 000545   000767 600000 1                  TZE     s:4979

     2033     4901    3           DO CASE (NUMERIC_KEY.TYPE#);

   4901  1 000546   000004 100003                    CMPX0   4,DU
         1 000547   000551 602010 1                  TNC     s:4901+3,X0
         1 000550   000764 710000 1                  TRA     s:4975
         1 000551   000764 710000 1                  TRA     s:4975
         1 000552   000555 710000 1                  TRA     s:4903
         1 000553   000767 710000 1                  TRA     s:4979
         1 000554   000555 710000 1                  TRA     s:4903

     2034     4902    3            CASE (%KT_NUMBER, %KT_EDITKEY);

     2035     4903    4              IF IT$OPERAND.KEY.TYPE# = %KT_STRING THEN DO;

   4903  1 000555   000006 222100                    LDX2    6,,PR0
         1 000556   000002 102003                    CMPX2   2,DU
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:236  
         1 000557   000715 601000 1                  TNZ     s:4948

     2036     4904                      /* Convert a string key containing a decimal number to binary */
     2037     4905                      %GETKEY (KEY=IT$OPERAND.KEY, PTR=NODE_KEY$);

   4912  1 000560   000006 723100                    LXL3    6,,PR0
         1 000561   000002 103003                    CMPX3   2,DU
         1 000562   000567 601000 1                  TNZ     s:4912+7

   4912  1 000563   000007 475500                    LDP5    7,,PR0
         1 000564   500002 636500                    EPPR6   2,,PR5
         1 000565   200067 456500                    STP6    NODE_KEY$,,AUTO
         1 000566   000572 710000 1                  TRA     s:4917

   4912  1 000567   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 000570   000007 036003                    ADLQ    7,DU
         1 000571   200067 756100                    STQ     NODE_KEY$,,AUTO

     2038     4915                      /*N* If X$EVAL supported fixed-place decimal, wouldn't have to
     2039     4916                      *N*   worry about finding the decimal point ourselves *N*/
     2040     4917    4                 CALL INDEX (POINT_INDEX, %CHR_PERIOD, NODE$KEY.BYTES);

   4917  1 000572   200067 473500                    LDP3    NODE_KEY$,,AUTO
         1 000573   300000 236100                    LDQ     0,,PR3
         1 000574   000033 772000                    QRL     27
         1 000575   000000 622006                    EAX2    0,QL
         1 000576   000000 124540                    SCM     mask='000'O
         1 000577   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         1 000600   000004 000001 2                  ADSC9   4                        cn=0,n=1
         1 000601   200072 000100                    ARG     POINT_INDEX,,AUTO

     2041     4918    4                 ORIGINAL_LENGTH = NODE$KEY.LENGTH#;

   4918  1 000602   200073 756100                    STQ     ORIGINAL_LENGTH,,AUTO

     2042     4919    4                 NODE$KEY.LENGTH# = POINT_INDEX;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:237  
   4919  1 000603   200072 236100                    LDQ     POINT_INDEX,,AUTO
         1 000604   000033 736000                    QLS     27
         1 000605   300000 552140                    STBQ    0,'40'O,PR3

     2043     4920    4                 CALL X$DEC_CONVERT (NODE_KEY$, SBIN_VALUE)

   4920  1 000606   200074 633500                    EPPR3   SBIN_VALUE,,AUTO
         1 000607   200133 453500                    STP3    SRC_FOR_ENDD$+2,,AUTO
         1 000610   200067 634500                    EPPR4   NODE_KEY$,,AUTO
         1 000611   200132 454500                    STP4    SRC_FOR_ENDD$+1,,AUTO
         1 000612   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000613   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000614   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 000615   001123 702000 1                  TSX2    DEC_CONVERT_FAILED

     2044     4921    4                   ALTRET (DEC_CONVERT_FAILED);
     2045     4922    4                 IF SBIN_VALUE < 0 THEN GOTO ILL_NUMKEY_INTEGER_FAILURE;

   4922  1 000616   200074 235100                    LDA     SBIN_VALUE,,AUTO
         1 000617   001126 604000 1                  TMI     ILL_NUMKEY_INTEGER_FAILURE

     2046     4923    4                 NODE$KEY.LENGTH# = ORIGINAL_LENGTH;

   4923  1 000620   200067 470500                    LDP0    NODE_KEY$,,AUTO
         1 000621   200073 236100                    LDQ     ORIGINAL_LENGTH,,AUTO
         1 000622   000033 736000                    QLS     27
         1 000623   000000 552140                    STBQ    0,'40'O,PR0

     2047     4924    5                 IF NUMERIC_KEY.TYPE# = %KT_NUMBER THEN DO;

   4924  1 000624   200070 220100                    LDX0    NUMERIC_KEY,,AUTO
         1 000625   000001 100003                    CMPX0   1,DU
         1 000626   000640 601000 1                  TNZ     s:4931

     2048     4925    5                    IF SBIN_VALUE > %MX_CONSEC_RECORDS THEN

   4925  1 000627   200074 235100                    LDA     SBIN_VALUE,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:238  
         1 000630   000032 115000 xsym               CMPA    B_VECTNIL+26
         1 000631   001137 605400 1                  TPNZ    CONSEC_KEY_TOO_BIG_FAILURE

     2049     4926    5                       GOTO CONSEC_KEY_TOO_BIG_FAILURE;
     2050     4927    5                    IF ORIGINAL_LENGTH > POINT_INDEX THEN

   4927  1 000632   200073 236100                    LDQ     ORIGINAL_LENGTH,,AUTO
         1 000633   200072 116100                    CMPQ    POINT_INDEX,,AUTO
         1 000634   001134 605400 1                  TPNZ    CONSEC_KEY_FRACT_FAILURE

     2051     4928    5                       GOTO CONSEC_KEY_FRACT_FAILURE;
     2052     4929    5                    NUMERIC_KEY.BYTES# = SBIN_VALUE;

   4929  1 000635   200074 236100                    LDQ     SBIN_VALUE,,AUTO
         1 000636   200071 552134                    STBQ    INITIAL_KEY$+1,'34'O,AUTO

     2053     4930    5                    END;

   4930  1 000637   000647 710000 1                  TRA     s:4934

     2054     4931    4                 ELSE IF SBIN_VALUE < %MX_EDITKEY_INTEGER THEN

   4931  1 000640   200074 235100                    LDA     SBIN_VALUE,,AUTO
         1 000641   303237 115007                    CMPA    99999,DL
         1 000642   001126 605000 1                  TPL     ILL_NUMKEY_INTEGER_FAILURE

     2055     4932    4                       NUMERIC_KEY.BYTES# = SBIN_VALUE * 1000;

   4932  1 000643   200074 236100                    LDQ     SBIN_VALUE,,AUTO
         1 000644   001750 402007                    MPY     1000,DL
         1 000645   200071 552134                    STBQ    INITIAL_KEY$+1,'34'O,AUTO
         1 000646   000647 710000 1                  TRA     s:4934

     2056     4933    4                    ELSE GOTO ILL_NUMKEY_INTEGER_FAILURE;
     2057     4934    4                 SBIN_VALUE = ORIGINAL_LENGTH - POINT_INDEX -

   4934  1 000647   200073 236100                    LDQ     ORIGINAL_LENGTH,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:239  
         1 000650   200072 136100                    SBLQ    POINT_INDEX,,AUTO
         1 000651   000001 136007                    SBLQ    1,DL
         1 000652   200074 756100                    STQ     SBIN_VALUE,,AUTO

     2058     4935    4                   %LENGTHC(CHR_PERIOD);
     2059     4936    5                 IF SBIN_VALUE > 0 THEN DO;

   4936  1 000653   000732 604400 1                  TMOZ    s:4953

     2060     4937    5                    IF SBIN_VALUE > LENGTHC(FRACT.BYTES) THEN

   4937  1 000654   000003 116007                    CMPQ    3,DL
         1 000655   001131 605400 1                  TPNZ    ILL_EDITKEY_FRACT_FAILURE

     2061     4938    5                       GOTO ILL_EDITKEY_FRACT_FAILURE;
     2062     4939    5                    FRACT.LENGTH# = LENGTHC(FRACT.BYTES);

   4939  1 000656   003000 236003                    LDQ     1536,DU
         1 000657   200075 552140                    STBQ    FRACT,'40'O,AUTO

     2063     4940    5                    FRACT.BYTES = '000';

   4940  1 000660   000000 236000 0                  LDQ     0
         1 000661   000011 772000                    QRL     9
         1 000662   200075 552134                    STBQ    FRACT,'34'O,AUTO

     2064     4941    5                    SUBSTR(FRACT.BYTES, 0, SBIN_VALUE) =

   4941  1 000663   200067 470500                    LDP0    NODE_KEY$,,AUTO
         1 000664   000000 236100                    LDQ     0,,PR0
         1 000665   000033 772000                    QRL     27
         1 000666   000000 621006                    EAX1    0,QL
         1 000667   200072 136100                    SBLQ    POINT_INDEX,,AUTO
         1 000670   777777 622006                    EAX2    -1,QL
         1 000671   200072 235100                    LDA     POINT_INDEX,,AUTO
         1 000672   200074 723100                    LXL3    SBIN_VALUE,,AUTO
         1 000673   040140 100545                    MLR     fill='040'O
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:240  
         1 000674   000000 400012                    ADSC9   0,A,PR0                  cn=2,n=*X2
         1 000675   200075 200013                    ADSC9   FRACT,,AUTO              cn=1,n=*X3

     2065     4942    5                      SUBSTR(NODE$KEY.BYTES, POINT_INDEX + %LENGTHC(CHR_PERIOD));
     2066     4943    5                    CALL X$DEC_CONVERT (ADDR(FRACT), SBIN_VALUE)

   4943  1 000676   200075 631500                    EPPR1   FRACT,,AUTO
         1 000677   200132 451500                    STP1    SRC_FOR_ENDD$+1,,AUTO
         1 000700   200074 633500                    EPPR3   SBIN_VALUE,,AUTO
         1 000701   200135 453500                    STP3    SRC_FOR_ENDD$+4,,AUTO
         1 000702   200132 634500                    EPPR4   SRC_FOR_ENDD$+1,,AUTO
         1 000703   200134 454500                    STP4    SRC_FOR_ENDD$+3,,AUTO
         1 000704   200134 630500                    EPPR0   SRC_FOR_ENDD$+3,,AUTO
         1 000705   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000706   000000 701000 xent               TSX1    X$DEC_CONVERT
         1 000707   001123 702000 1                  TSX2    DEC_CONVERT_FAILED

     2067     4944    5                      ALTRET (DEC_CONVERT_FAILED);
     2068     4945    5                    NUMERIC_KEY.BYTES# = NUMERIC_KEY.BYTES# + SBIN_VALUE;

   4945  1 000710   200071 236100                    LDQ     INITIAL_KEY$+1,,AUTO
         1 000711   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000712   200074 036100                    ADLQ    SBIN_VALUE,,AUTO
         1 000713   200071 552134                    STBQ    INITIAL_KEY$+1,'34'O,AUTO

     2069     4946    5                    END;

     2070     4947    4                 END;

   4947  1 000714   000732 710000 1                  TRA     s:4953

     2071     4948    3              ELSE IF NUMERIC_KEY.TYPE# = %KT_EDITKEY THEN

   4948  1 000715   000003 100003                    CMPX0   3,DU
         1 000716   001126 600000 1                  TZE     ILL_NUMKEY_INTEGER_FAILURE

     2072     4949    3                    GOTO ILL_NUMKEY_INTEGER_FAILURE;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:241  
     2073     4950    3                 ELSE IF NUMERIC_KEY.BYTES# ~= NUMERIC_KEY.BYTES#/1000 * 1000 THEN

   4950  1 000717   200071 236100                    LDQ     INITIAL_KEY$+1,,AUTO
         1 000720   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000721   001750 506007                    DIV     1000,DL
         1 000722   001750 402007                    MPY     1000,DL
         1 000723   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 000724   200071 236100                    LDQ     INITIAL_KEY$+1,,AUTO
         1 000725   000032 376000 xsym               ANQ     B_VECTNIL+26
         1 000726   200132 116100                    CMPQ    SRC_FOR_ENDD$+1,,AUTO
         1 000727   001134 601000 1                  TNZ     CONSEC_KEY_FRACT_FAILURE

     2074     4951    3                       GOTO CONSEC_KEY_FRACT_FAILURE;
     2075     4952    3                    ELSE NUMERIC_KEY.BYTES# = NUMERIC_KEY.BYTES#/1000;

   4952  1 000730   001750 506007                    DIV     1000,DL
         1 000731   200071 552134                    STBQ    INITIAL_KEY$+1,'34'O,AUTO

     2076     4953    3              NODE_KEY$ = ADDR(NIL);

   4953  1 000732   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000733   200067 756100                    STQ     NODE_KEY$,,AUTO

     2077     4954                   %CLEARKEY (KEY=IT$OPERAND.KEY);

   4961  1 000734   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 000735   000006 720100                    LXL0    6,,PR0
         1 000736   000002 100003                    CMPX0   2,DU
         1 000737   000751 601000 1                  TNZ     s:4962+2

   4961  1 000740   000007 471500                    LDP1    7,,PR0
         1 000741   200132 451500                    STP1    SRC_FOR_ENDD$+1,,AUTO
         1 000742   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 000743   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000744   000000 701000 xent               TSX1    VDG$OFREE
         1 000745   000747 702000 1                  TSX2    s:4962
         1 000746   000751 710000 1                  TRA     s:4962+2
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:242  

   4962  1 000747   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 000750   000000 702211                    TSX2  ! 0,X1

   4962  1 000751   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 000752   000006 450100                    STZ     6,,PR0
         1 000753   000007 450100                    STZ     7,,PR0

     2078     4964    3              NUMERIC_KEY.REP# = %REP_LOCAL;

   4964  1 000754   000001 220003                    LDX0    1,DU
         1 000755   200070 440100                    SXL0    NUMERIC_KEY,,AUTO

     2079     4965    3              NUMERIC_KEY.LENGTH# = %NB_NUMERIC_KEY;

   4965  1 000756   003000 236003                    LDQ     1536,DU
         1 000757   200071 552140                    STBQ    INITIAL_KEY$+1,'40'O,AUTO

     2080     4966    3              IT$OPERAND.KEY = NUMERIC_KEY;

   4966  1 000760   200070 237100                    LDAQ    NUMERIC_KEY,,AUTO
         1 000761   000006 755100                    STA     6,,PR0
         1 000762   000007 756100                    STQ     7,,PR0
         1 000763   000767 710000 1                  TRA     s:4979

     2081     4967
     2082     4968    3            CASE (%KT_STRING);

     2083     4969        /*N*       Someday, may handle string-keyed files.
     2084     4970        *N*        IF IT$OPERAND.KEY.TYPE# = %KT_NUMBER THEN DO;
     2085     4971        *N*           \* Convert a binary key to a decimal character string *\
     2086     4972        *N*           END;          *N*/
     2087     4973
     2088     4974    3            CASE (ELSE);

     2089     4975    3              CALL VDG$ESCREECH;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:243  
   4975  1 000764   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000765   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000766   000000 011000                    NOP     0

     2090     4976    3            END;

     2091     4977
     2092     4978
     2093     4979    2           NODE_RANGE = %CLEAR;

   4979  1 000767   000100 100400                    MLR     fill='000'O
         1 000770   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000771   200045 000110                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=72

     2094     4980                /* NOTE:  NODE_RANGE never owns any objects itself */
     2095     4981    2           NODE_RANGE.START = TOS$EVAL.RANGE.START;

   4981  1 000772   200007 470500                    LDP0    TOS_EVAL$,,AUTO
         1 000773   000100 100500                    MLR     fill='000'O
         1 000774   000024 000044                    ADSC9   20,,PR0                  cn=0,n=36
         1 000775   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     2096     4982    2           NODE_RANGE.START.POSITION# = 0;

   4982  1 000776   000000 220003                    LDX0    0,DU
         1 000777   200055 740100                    STX0    NODE_RANGE+8,,AUTO

     2097     4983    2           NODE_RANGE.START.EOF = %FALSE;

   4983  1 001000   000005 236000 2                  LDQ     5
         1 001001   200055 356100                    ANSQ    NODE_RANGE+8,,AUTO

     2098     4984    2           NODE_RANGE.START.KEY (LEVEL-1) = IT$OPERAND.KEY;

   4984  1 001002   200015 235100                    LDA     LEVEL,,AUTO
         1 001003   000001 735000                    ALS     1
         1 001004   000002 735000                    ALS     2
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:244  
         1 001005   200013 471500                    LDP1    IT_MOVEMENT$,,AUTO
         1 001006   000105 100500                    MLR     fill='000'O
         1 001007   100006 000010                    ADSC9   6,,PR1                   cn=0,n=8
         1 001010   200043 000010                    ADSC9   SUBST_FIELD$,A,AUTO      cn=0,n=8

     2099     4985
     2100     4986                /* Assume key doesn't exist */
     2101     4987    2           NODE_RANGE.ENDD = NODE_RANGE.START;

   4987  1 001011   000100 100500                    MLR     fill='000'O
         1 001012   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36
         1 001013   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2102     4988
     2103     4989    2           IF FIND_END_BOUND THEN

   4989  1 001014   200016 234100                    SZN     FIND_END_BOUND,,AUTO
         1 001015   001115 605000 1                  TPL     s:5026

     2104     4990    3   FIND_EO_NODE: DO;

   4990  1 001016                       FIND_EO_NODE null
     2105     4991                   /* We need to find the end location of the node */
     2106     4992    3              CALL VDA$LREAD (STREAM, NODE_RANGE.START, 0, %FIND)

   4992  1 001016   200003 473500                    LDP3    @OPERAND,,AUTO
         1 001017   300000 474500                    LDP4    0,,PR3
         1 001020   000000 237000 2                  LDAQ    0
         1 001021   200134 757100                    STAQ    SRC_FOR_ENDD$+3,,AUTO
         1 001022   200045 635500                    EPPR5   NODE_RANGE,,AUTO
         1 001023   200133 455500                    STP5    SRC_FOR_ENDD$+2,,AUTO
         1 001024   200132 454500                    STP4    SRC_FOR_ENDD$+1,,AUTO
         1 001025   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001026   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001027   000000 701000 xent               TSX1    VDA$LREAD
         1 001030   001254 702000 1                  TSX2    LREAD_FAILED

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:245  
     2107     4993    3                ALTRET (LREAD_FAILED);
     2108     4994    4              IF NOT STREAM.CURRENT.EOF THEN DO;

   4994  1 001031   200003 470500                    LDP0    @OPERAND,,AUTO
         1 001032   000000 471500                    LDP1    0,,PR0
         1 001033   100016 236100                    LDQ     14,,PR1
         1 001034   400000 316007                    CANQ    -131072,DL
         1 001035   001115 601000 1                  TNZ     s:5026

     2109     4995                      %GETKEY (KEY=NODE_RANGE.START.KEY, INDX=LEVEL-1,
     2110     4996                      PTR=NODE_KEY$);

   5003  1 001036   200015 235100                    LDA     LEVEL,,AUTO
         1 001037   000001 735000                    ALS     1
         1 001040   200043 720105                    LXL0    SUBST_FIELD$,AL,AUTO
         1 001041   000002 100003                    CMPX0   2,DU
         1 001042   001047 601000 1                  TNZ     s:5003+9

   5003  1 001043   200044 473505                    LDP3    SUBST_FIELD$+1,AL,AUTO
         1 001044   300002 634500                    EPPR4   2,,PR3
         1 001045   200067 454500                    STP4    NODE_KEY$,,AUTO
         1 001046   001051 710000 1                  TRA     s:5014

   5003  1 001047   200044 633505                    EPPR3   SUBST_FIELD$+1,AL,AUTO
         1 001050   200067 453500                    STP3    NODE_KEY$,,AUTO

     2111     5006                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2112     5007                      PTR=STREAM_KEY$);

   5014  1 001051   000000 471500                    LDP1    0,,PR0
         1 001052   100004 720105                    LXL0    4,AL,PR1
         1 001053   000002 100003                    CMPX0   2,DU
         1 001054   001061 601000 1                  TNZ     s:5014+8

   5014  1 001055   100005 473505                    LDP3    5,AL,PR1
         1 001056   300002 634500                    EPPR4   2,,PR3
         1 001057   200077 454500                    STP4    STREAM_KEY$,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:246  
         1 001060   001063 710000 1                  TRA     s:5017

   5014  1 001061   100005 633505                    EPPR3   5,AL,PR1
         1 001062   200077 453500                    STP3    STREAM_KEY$,,AUTO

     2113     5017    5                 IF NODE$KEY.BYTES = STREAM$KEY.BYTES THEN DO;

   5017  1 001063   200067 473500                    LDP3    NODE_KEY$,,AUTO
         1 001064   300000 236100                    LDQ     0,,PR3
         1 001065   000033 772000                    QRL     27
         1 001066   200077 474500                    LDP4    STREAM_KEY$,,AUTO
         1 001067   000000 621006                    EAX1    0,QL
         1 001070   400000 236100                    LDQ     0,,PR4
         1 001071   000033 772000                    QRL     27
         1 001072   000000 622006                    EAX2    0,QL
         1 001073   040140 106540                    CMPC    fill='040'O
         1 001074   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         1 001075   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         1 001076   001115 601000 1                  TNZ     s:5026

     2114     5018                         /* <key> exists:  find key of next existing node */
     2115     5019    5                    CALL VDA$LREAD (STREAM, , 1, %FIND)

   5019  1 001077   000002 237000 2                  LDAQ    2
         1 001100   200134 757100                    STAQ    SRC_FOR_ENDD$+3,,AUTO
         1 001101   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 001102   200133 756100                    STQ     SRC_FOR_ENDD$+2,,AUTO
         1 001103   200132 451500                    STP1    SRC_FOR_ENDD$+1,,AUTO
         1 001104   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001105   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001106   000000 701000 xent               TSX1    VDA$LREAD
         1 001107   001254 702000 1                  TSX2    LREAD_FAILED

     2116     5020    5                      ALTRET (LREAD_FAILED);
     2117     5021    5                    NODE_RANGE.ENDD = STREAM.CURRENT;

   5021  1 001110   200003 470500                    LDP0    @OPERAND,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:247  
         1 001111   000000 471500                    LDP1    0,,PR0
         1 001112   000100 100500                    MLR     fill='000'O
         1 001113   100006 000044                    ADSC9   6,,PR1                   cn=0,n=36
         1 001114   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2118     5022    5                    END;

     2119     5023    4                 END;

     2120     5024    3              END FIND_EO_NODE;

     2121     5025
     2122     5026    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)

   5026  1 001115   200045 630500                    EPPR0   NODE_RANGE,,AUTO
         1 001116   200105 450500                    STP0    STREAM_KEY$+3,,AUTO
         1 001117   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 001120   001254 702000 1                  TSX2    LREAD_FAILED

     2123     5027    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2124     5028
     2125     5029    2           RETURN;

   5029  1 001121   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001122   000001 702211                    TSX2  ! 1,X1

     2126     5030
     2127     5031
     2128     5032
     2129     5033    2   DEC_CONVERT_FAILED:
     2130     5034    2           ERR_CODE = %E$DECIMAL_NOT_LEGAL;

   5034  1 001123   000073 235007       DEC_CONVERT* LDA     59,DL
         1 001124   200076 755100                    STA     ERR_CODE,,AUTO

     2131     5035    2           GOTO STRING_KEY_ERROR;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:248  
   5035  1 001125   001141 710000 1                  TRA     STRING_KEY_ERROR

     2132     5036
     2133     5037    2   ILL_NUMKEY_INTEGER_FAILURE:
     2134     5038    2           ERR_CODE = %E$NUMKEY_INTEGER_NOT_LEGAL;

   5038  1 001126   000076 235007       ILL_NUMKEY_* LDA     62,DL
         1 001127   200076 755100                    STA     ERR_CODE,,AUTO

     2135     5039    2           GOTO STRING_KEY_ERROR;

   5039  1 001130   001141 710000 1                  TRA     STRING_KEY_ERROR

     2136     5040
     2137     5041    2   ILL_EDITKEY_FRACT_FAILURE:
     2138     5042    2           ERR_CODE = %E$EDITKEY_FRACT_NOT_LEGAL;

   5042  1 001131   000075 235007       ILL_EDITKEY* LDA     61,DL
         1 001132   200076 755100                    STA     ERR_CODE,,AUTO

     2139     5043    2           GOTO STRING_KEY_ERROR;

   5043  1 001133   001141 710000 1                  TRA     STRING_KEY_ERROR

     2140     5044
     2141     5045    2   CONSEC_KEY_FRACT_FAILURE:
     2142     5046    2           ERR_CODE = %E$CONSEC_KEY_FRACT_NOT_LEGAL;

   5046  1 001134   000074 235007       CONSEC_KEY_* LDA     60,DL
         1 001135   200076 755100                    STA     ERR_CODE,,AUTO

     2143     5047    2           GOTO STRING_KEY_ERROR;

   5047  1 001136   001141 710000 1                  TRA     STRING_KEY_ERROR

   5034  1 001137                       CONSEC_KEY_* null
     2144     5048
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:249  
     2145     5049    2   CONSEC_KEY_TOO_BIG_FAILURE: ;
     2146     5050    2           ERR_CODE = %E$CONSEC_KEY_TOO_BIG;

   5050  1 001137   000425 236007                    LDQ     277,DL
         1 001140   200076 756100                    STQ     ERR_CODE,,AUTO

     2147     5051
     2148     5052    2   STRING_KEY_ERROR:
     2149     5053    2           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   5053  1 001141   200042 630500       STRING_KEY_* EPPR0   VD_ERR$,,AUTO
         1 001142   200133 450500                    STP0    SRC_FOR_ENDD$+2,,AUTO
         1 001143   000006 236000 2                  LDQ     6
         1 001144   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 001145   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001146   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001147   000000 701000 xent               TSX1    VDG$OALLOC
         1 001150   001254 702000 1                  TSX2    LREAD_FAILED

     2150     5054    2             ALTRET (OALLOC_FAILED);
     2151     5055    2           VD$ERR.ERR.CODE# = ERR_CODE;

   5055  1 001151   200042 470500                    LDP0    VD_ERR$,,AUTO
         1 001152   200076 236100                    LDQ     ERR_CODE,,AUTO
         1 001153   000003 736000                    QLS     3
         1 001154   000002 676100                    ERQ     2,,PR0
         1 001155   377770 376007                    ANQ     131064,DL
         1 001156   000002 656100                    ERSQ    2,,PR0

     2152     5056    2           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   5056  1 001157   000003 220003                    LDX0    3,DU
         1 001160   200042 470500                    LDP0    VD_ERR$,,AUTO
         1 001161   000003 740100                    STX0    3,,PR0

     2153     5057
     2154     5058    2           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:250  

   5058  1 001162   200042 236100                    LDQ     VD_ERR$,,AUTO
         1 001163   000005 036003                    ADLQ    5,DU
         1 001164   200043 756100                    STQ     SUBST_FIELD$,,AUTO

     2155     5059    2           INDX = 0;

   5059  1 001165   200100 450100                    STZ     INDX,,AUTO

     2156     5060    3           DO WHILE INDX < %MX_CMD_OBJECTS

   5060  1 001166   001170 710000 1                  TRA     s:5063

     2157     5061    3             AND VD_CMD_OBJECTS$ (INDX) ~= ADDR(NIL);
     2158     5062    3              INDX = INDX + 1;

   5062  1 001167   200100 054100                    AOS     INDX,,AUTO

     2159     5063    3              END;

   5063  1 001170   200100 235100                    LDA     INDX,,AUTO
         1 001171   000062 115007                    CMPA    50,DL
         1 001172   001176 605000 1                  TPL     s:5064
         1 001173   000000 236005 xsym               LDQ     VD_CMD_OBJECTS$,AL
         1 001174   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 001175   001167 601000 1                  TNZ     s:5062

     2160     5064    2           IF INDX >= %MX_CMD_OBJECTS THEN

   5064  1 001176   200100 235100                    LDA     INDX,,AUTO
         1 001177   000062 115007                    CMPA    50,DL
         1 001200   001207 604000 1                  TMI     s:5066

     2161     5065    2              CALL VDG$ESCREECH (INDX);

   5065  1 001201   200100 630500                    EPPR0   INDX,,AUTO
         1 001202   200132 450500                    STP0    SRC_FOR_ENDD$+1,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:251  
         1 001203   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001204   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001205   000000 701000 xent               TSX1    VDG$ESCREECH
         1 001206   000000 011000                    NOP     0

     2162     5066    2           CALL VDG$OALLOC (%CLS_TEXTC_REMOTE, VD_CMD_OBJECTS$ (INDX),

   5066  1 001207   000010 236000 2                  LDQ     8
         1 001210   200134 756100                    STQ     SRC_FOR_ENDD$+3,,AUTO
         1 001211   200100 720100                    LXL0    INDX,,AUTO
         1 001212   000000 630410 xsym               EPPR0   VD_CMD_OBJECTS$,X0
         1 001213   200133 450500                    STP0    SRC_FOR_ENDD$+2,,AUTO
         1 001214   000011 236000 2                  LDQ     9
         1 001215   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 001216   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001217   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 001220   000000 701000 xent               TSX1    VDG$OALLOC
         1 001221   001254 702000 1                  TSX2    LREAD_FAILED

     2163     5067    2             (LENGTHC(VD$STRING_HEADER) + LENGTHC(VD$KEY) + %NB_PER_WORD-3) /
     2164     5068    2             %NB_PER_WORD)
     2165     5069    2             ALTRET (OALLOC_FAILED);
     2166     5070    2           SUBST$POINTER.V$ (0) =

   5070  1 001222   200100 720100                    LXL0    INDX,,AUTO
         1 001223   000000 470410 xsym               LDP0    VD_CMD_OBJECTS$,X0
         1 001224   000002 631500                    EPPR1   2,,PR0
         1 001225   200043 473500                    LDP3    SUBST_FIELD$,,AUTO
         1 001226   300003 451500                    STP1    3,,PR3

     2167     5071    2             ADDR (VD_CMD_OBJECTS$ (INDX) -> VD$TEXTC_REMOTE.LENGTH#);
     2168     5072    2           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   5072  1 001227   000043 220003                    LDX0    35,DU
         1 001230   300000 740100                    STX0    0,,PR3

     2169     5073                %COPYKEY (FKEY = IT$OPERAND.KEY,
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:252  
     2170     5074                TKEY = "SUBST$POINTER.V$ (0) -> VD$KEY");

   5087  1 001231   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 001232   000100 100500                    MLR     fill='000'O
         1 001233   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         1 001234   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

   5087  1 001235   000006 721100                    LXL1    6,,PR0
         1 001236   000002 101003                    CMPX1   2,DU
         1 001237   001254 601000 1                  TNZ     LREAD_FAILED

   5087  1 001240   000007 471500                    LDP1    7,,PR0
         1 001241   300003 474500                    LDP4    3,,PR3
         1 001242   400001 635500                    EPPR5   1,,PR4
         1 001243   200133 455500                    STP5    SRC_FOR_ENDD$+2,,AUTO
         1 001244   200132 451500                    STP1    SRC_FOR_ENDD$+1,,AUTO
         1 001245   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001246   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001247   000000 701000 xent               TSX1    VDG$OCOPY
         1 001250   001252 702000 1                  TSX2    s:5088
         1 001251   001254 710000 1                  TRA     LREAD_FAILED

   5088  1 001252   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001253   000000 702211                    TSX2  ! 0,X1

   5087  1 001254                       LREAD_FAILED null
   5087  1 001254                       LOAD_EVAL_F* null
   5087  1 001254                       OALLOC_FAIL* null
     2171     5090
     2172     5091
     2173     5092    2   LREAD_FAILED: ;
     2174     5093    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     2175     5094    2   OALLOC_FAILED: ;
     2176     5095    2           ALTRETURN;

   5095  1 001254   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001255   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:253  

     2177     5096
     2178     5097    2   END IABS_NODE;
     2179     5098
     2180     5099                %BOX (TITLE="IREL_POSITION", PAGE=YES);
              5107    2
              5111    2   /***************************************************************************
              5113    2    *                                                                         *
              5117    2            *                               IREL_POSITION                            *
              5119    2            *                                                                        *
              5121    2          ***************************************************************************/

     2181     5125
     2182     5126        /*I* NAME: IREL_POSITION
     2183     5127            PARAMETERS:
     2184     5128                None.
     2185     5129            INPUT:
     2186     5130                STREAM - VD$STREAM to use; must be open.  It's position at
     2187     5131                    entry is irrelevent and unknown.
     2188     5132                LEVEL - Level to position in.  Must be the lowest level of the
     2189     5133                    file structure.
     2190     5134                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     2191     5135                    of the block operand; if %FALSE, just find the start
     2192     5136                    boundary.
     2193     5137                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2194     5138                    its .STATE and other info.
     2195     5139                TOS$EVAL.ENCLOSING - Enclosing range for this relative operand.
     2196     5140                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     2197     5141                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     2198     5142                    location for relative movement.
     2199     5143                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2200     5144                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
     2201     5145                    of the range to be set.
     2202     5146                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     2203     5147                    .CODE# must be %OPAND_POSITION, and its .KEY must be
     2204     5148                    %CLEAR.
     2205     5149                IT_ADJUST - Parent of IT$OPERAND.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:254  
     2206     5150                IT$BLOCK_EXPR - Root node of InTree.
     2207     5151                OPERAND - VD$OPERAND whose InTree we're evaluating.
     2208     5152            OUTPUT:
     2209     5153                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2210     5154                    be set as specified by IT$OPERAND.
     2211     5155                SIGNAL will contain %FALSE if we tried to go beyond BOF
     2212     5156                    or EOF or TOS$EVAL.ENCLOSING while moving; %TRUE otherwise.
     2213     5157            DESCRIPTION:
     2214     5158                Call VDE$IMOVE_BY_POSITIONS to perform the move, setting
     2215     5159                    NODE_RANGE.START.POSITION# to the found location.  If we
     2216     5160                    need to find the end of the operand, its simply
     2217     5161                    one position to the right of the found position.
     2218     5162                    NOTE:  This is true even if the found position
     2219     5163                        doesn't exist or is the last position of the
     2220     5164                        node.  The effect of this is to never allow
     2221     5165                        a POSITION operand to cover the end-of-record
     2222     5166                        boundary (which it would do if the start of the
     2223     5167                        POSITION operand were on one node and the end
     2224     5168                        of the operand on the next node!).
     2225     5169                If we found the operand successfully, load TOS$EVAL.RANGE
     2226     5170                    from the operand's range.
     2227     5171        */
     2228     5172
     2229     5173    1   IREL_POSITION: PROC ALTRET;

   5173  1 001256   200044 741300       IREL_POSITI* STX1  ! SUBST_FIELD$+1,,AUTO

     2230     5174
     2231     5175
     2232     5176        /* NODE_RANGE.START does own objects; but NODE_RANGE.ENDD doesn't!!! */
     2233     5177        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);
     2234     5246    2   DCL SKIP_COUNT SBIN;
     2235     5247    2   DCL MX_RECORDS SBIN;
     2236     5248
     2237     5249
     2238     5250
     2239     5251    2           SIGNAL = %TRUE;
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:255  

   5251  1 001257   400000 236003                    LDQ     -131072,DU
         1 001260   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 001261   000000 756100                    STQ     0,,PR0

     2240     5252    2           CALL VDG$OCOPY_LOCATION (TOS$EVAL_RELATIVE_TO, NODE_RANGE.START)

   5252  1 001262   200045 631500                    EPPR1   NODE_RANGE,,AUTO
         1 001263   200133 451500                    STP1    SRC_FOR_ENDD$+2,,AUTO
         1 001264   200012 236100                    LDQ     TOS_EVAL_RELATIVE_TO$,,AUTO
         1 001265   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 001266   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001267   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001270   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001271   001360 702000 1                  TSX2    IMOVE_BY_POSITIONS_FAILED

     2241     5253    2             ALTRET (OCOPY_LOCATION_FAILED);
     2242     5254    2           NODE_RANGE.ENDD = %CLEAR;   /* For now */

   5254  1 001272   000100 100400                    MLR     fill='000'O
         1 001273   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001274   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2243     5255    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;

   5255  1 001275   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 001276   000004 236100                    LDQ     4,,PR0
         1 001277   000022 736000                    QLS     18
         1 001300   000022 732000                    QRS     18
         1 001301   200067 756100                    STQ     SKIP_COUNT,,AUTO

     2244     5256    2           MX_RECORDS = %INFINITY;     /* No limit on # records to skip */

   5256  1 001302   000031 235000 xsym               LDA     B_VECTNIL+25
         1 001303   200070 755100                    STA     MX_RECORDS,,AUTO

     2245     5257
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:256  
     2246     5258    2           CALL VDE$IMOVE_BY_POSITIONS (STREAM, NODE_RANGE.START,

   5258  1 001304   200003 471500                    LDP1    @OPERAND,,AUTO
         1 001305   100000 473500                    LDP3    0,,PR1
         1 001306   200005 236100                    LDQ     @SIGNAL,,AUTO
         1 001307   200140 756100                    STQ     SRC_FOR_ENDD$+7,,AUTO
         1 001310   200067 634500                    EPPR4   SKIP_COUNT,,AUTO
         1 001311   200137 454500                    STP4    SRC_FOR_ENDD$+6,,AUTO
         1 001312   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 001313   000012 036000 2                  ADLQ    10
         1 001314   200136 756100                    STQ     SRC_FOR_ENDD$+5,,AUTO
         1 001315   200070 635500                    EPPR5   MX_RECORDS,,AUTO
         1 001316   200135 455500                    STP5    SRC_FOR_ENDD$+4,,AUTO
         1 001317   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 001320   000002 036003                    ADLQ    2,DU
         1 001321   200134 756100                    STQ     SRC_FOR_ENDD$+3,,AUTO
         1 001322   200045 636500                    EPPR6   NODE_RANGE,,AUTO
         1 001323   200133 456500                    STP6    SRC_FOR_ENDD$+2,,AUTO
         1 001324   200132 453500                    STP3    SRC_FOR_ENDD$+1,,AUTO
         1 001325   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001326   000025 631400 xsym               EPPR1   B_VECTNIL+21
         1 001327   000000 701000 xent               TSX1    VDE$IMOVE_BY_POSITIONS
         1 001330   001360 702000 1                  TSX2    IMOVE_BY_POSITIONS_FAILED

     2247     5259    2             TOS$EVAL.ENCLOSING, MX_RECORDS, IT$OPERAND.OPTIONS.DIRECTION#,
     2248     5260    2             SKIP_COUNT, SIGNAL)
     2249     5261    2             ALTRET (IMOVE_BY_POSITIONS_FAILED);
     2250     5262
     2251     5263    3           IF SIGNAL THEN DO;

   5263  1 001331   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 001332   000000 234100                    SZN     0,,PR0
         1 001333   001350 605000 1                  TPL     s:5272

     2252     5264    4              IF FIND_END_BOUND THEN DO;

   5264  1 001334   200016 234100                    SZN     FIND_END_BOUND,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:257  
         1 001335   001344 605000 1                  TPL     s:5268

     2253     5265    4                 NODE_RANGE.ENDD = NODE_RANGE.START;

   5265  1 001336   000100 100500                    MLR     fill='000'O
         1 001337   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36
         1 001340   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2254     5266    4                 NODE_RANGE.ENDD.POSITION# = NODE_RANGE.ENDD.POSITION# + 1;

   5266  1 001341   200066 220100                    LDX0    NODE_RANGE+17,,AUTO
         1 001342   000001 621010                    EAX1    1,X0
         1 001343   200066 741100                    STX1    NODE_RANGE+17,,AUTO

     2255     5267    4                 END;

     2256     5268    3              CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)

   5268  1 001344   200045 631500                    EPPR1   NODE_RANGE,,AUTO
         1 001345   200105 451500                    STP1    STREAM_KEY$+3,,AUTO
         1 001346   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 001347   001360 702000 1                  TSX2    IMOVE_BY_POSITIONS_FAILED

     2257     5269    3                ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2258     5270    3              END;

     2259     5271
     2260     5272    2           CALL VDG$OCLEAR_LOCATION (NODE_RANGE.START)

   5272  1 001350   200045 630500                    EPPR0   NODE_RANGE,,AUTO
         1 001351   200132 450500                    STP0    SRC_FOR_ENDD$+1,,AUTO
         1 001352   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001353   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001354   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001355   001360 702000 1                  TSX2    IMOVE_BY_POSITIONS_FAILED

     2261     5273    2             ALTRET (OCLEAR_LOCATION_FAILED);
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:258  
     2262     5274
     2263     5275    2           RETURN;

   5275  1 001356   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001357   000001 702211                    TSX2  ! 1,X1

   5272  1 001360                       IMOVE_BY_PO* null
   5272  1 001360                       LOAD_EVAL_F* null
   5272  1 001360                       OCOPY_LOCAT* null
   5272  1 001360                       OCLEAR_LOCA* null
     2264     5276
     2265     5277
     2266     5278
     2267     5279    2   IMOVE_BY_POSITIONS_FAILED: ;
     2268     5280    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     2269     5281    2   OCOPY_LOCATION_FAILED: ;
     2270     5282    2   OCLEAR_LOCATION_FAILED: ;
     2271     5283    2           ALTRETURN;

   5283  1 001360   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001361   000000 702211                    TSX2  ! 0,X1

     2272     5284
     2273     5285    2   END IREL_POSITION;
     2274     5286
     2275     5287                %BOX (TITLE=IREL_POSITION_N, PAGE=YES);
              5295    2
              5299    2   /***************************************************************************
              5301    2    *                                                                         *
              5305    2            *                              IREL_POSITION_N                           *
              5307    2            *                                                                        *
              5309    2          ***************************************************************************/

     2276     5313
     2277     5314        /*I* NAME: IREL_POSITION_N
     2278     5315            PARAMETERS:
     2279     5316                None.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:259  
     2280     5317            INPUT:
     2281     5318                STREAM - VD$STREAM to use; must be open.  It's position at
     2282     5319                    entry is irrelevent and unknown.
     2283     5320                LEVEL - Level to position in.
     2284     5321                FIND_END_BOUND - BIT(1) flag; if %TRUE, find both boundaries
     2285     5322                    of the block operand; if %FALSE, just find the start
     2286     5323                    boundary.
     2287     5324                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2288     5325                    its .STATE and other info.
     2289     5326                TOS$EVAL_RELATIVE_TO - Based VD$LOCATION; must be one of
     2290     5327                    TOS$EVAL.RANGE.START or .ENDD.  This is the initial
     2291     5328                    location for relative movement.
     2292     5329                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2293     5330                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary boundary
     2294     5331                    of the range to be set.
     2295     5332                IT$OPERAND - VD$IT_OPERAND which we are evaluating.  Its
     2296     5333                    .CODE# must be %OPAND_POSITION, and its .KEY must be
     2297     5334                    non-%CLEAR, specifying (as if it were a VD$KEY_NUMBER)
     2298     5335                    the position number, counting from 0.  (Note that the
     2299     5336                    user gave the position # counting from 1; VDE$PARSE
     2300     5337                    translated it to a 0-offset position number.)
     2301     5338                IT_ADJUST - Parent of IT$OPERAND.
     2302     5339                IT$BLOCK_EXPR - Root node of InTree.
     2303     5340                OPERAND - VD$OPERAND whose InTree we're evaluating.
     2304     5341            OUTPUT:
     2305     5342                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2306     5343                    be set as specified by IT$OPERAND.
     2307     5344                SIGNAL will contain %FALSE if we tried to go beyond BOF
     2308     5345                    or EOF while moving; %TRUE otherwise.
     2309     5346            DESCRIPTION:
     2310     5347                If TOS$EVAL_RELATIVE_TO specifies the record marked "x" below, and
     2311     5348                    IT$OPERAND.KEY specifies the position marked "x" below,
     2312     5349                    then either side of the "|"s below are labelled with the
     2313     5350                    movement clause necessary to make them the output
     2314     5351                    TOS$EVAL_BOUND location:
     2315     5352
     2316     5353                    I__________BO BA SK 1 PO n|_|EO BA SK 1 PO n____________I
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:260  
     2317     5354                    I__(FO or BA) BO SK 0 PO n|x|EO SK 0 PO n (FO or BA)___I
     2318     5355                    I_____________BO SK 1 PO n|_|EO SK 1 PO n___________I
     2319     5356                    I_____________BO SK 2 PO n|_|EO SK 2 PO n_____________I
     2320     5357                                                  etc.
     2321     5358
     2322     5359                If the SKIP-count is 0, the TOS$EVAL_RELATIVE keys will be
     2323     5360                    unchanged; otherwise, call the Accessor to move
     2324     5361                    the number of nodes necessary, starting from the
     2325     5362                    TOS$EVAL_RELATIVE_TO location.  Set the new node keys
     2326     5363                    for the new location.  If we hit BOF or EOF during
     2327     5364                    the move, then set TOS$EVAL_BOUND to BOF or EOF and
     2328     5365                    return SIGNAL = %FALSE.
     2329     5366                Set the TOS$EVAL_BOUND position to the specified one; if we
     2330     5367                    need to find the end of the operand, simply add one
     2331     5368                    to the position.
     2332     5369                Note that we may point to a position which doesn't exist in
     2333     5370                    the record.  That's fine.
     2334     5371        */
     2335     5372
     2336     5373    1   IREL_POSITION_N: PROC ALTRET;

   5373  1 001362   200044 741300       IREL_POSITI* STX1  ! SUBST_FIELD$+1,,AUTO

     2337     5374
     2338     5375
     2339     5376        %VD$RANGE (NAME=NODE_RANGE, STCLASS=AUTO);   /* Doesn't own objects */
     2340     5445    2   DCL SKIP_COUNT SBIN;
     2341     5446    2   DCL INITIAL_KEY$ PTR;
     2342     5447    2   DCL STREAM_KEY$ PTR;
     2343     5448
     2344     5449
     2345     5450        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
     2346     5473        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2347     5496        %VD$KEY_NUMBER;
     2348     5511
     2349     5512
     2350     5513
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:261  
     2351     5514    2           SIGNAL = %TRUE;

   5514  1 001363   400000 236003                    LDQ     -131072,DU
         1 001364   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 001365   000000 756100                    STQ     0,,PR0

     2352     5515    2           NODE_RANGE.START = TOS$EVAL_RELATIVE_TO;

   5515  1 001366   200012 471500                    LDP1    TOS_EVAL_RELATIVE_TO$,,AUTO
         1 001367   000100 100500                    MLR     fill='000'O
         1 001370   100000 000044                    ADSC9   0,,PR1                   cn=0,n=36
         1 001371   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     2353     5516    2           NODE_RANGE.ENDD = %CLEAR;   /* For now */

   5516  1 001372   000100 100400                    MLR     fill='000'O
         1 001373   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001374   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2354     5517
     2355     5518    2           SKIP_COUNT = IT$OPERAND.OPTIONS.SKIP#;

   5518  1 001375   200013 473500                    LDP3    IT_MOVEMENT$,,AUTO
         1 001376   300004 236100                    LDQ     4,,PR3
         1 001377   000022 736000                    QLS     18
         1 001400   000022 732000                    QRS     18
         1 001401   200067 756100                    STQ     SKIP_COUNT,,AUTO

     2356     5519    2           IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN

   5519  1 001402   300005 720100                    LXL0    5,,PR3
         1 001403   000002 100003                    CMPX0   2,DU
         1 001404   001407 601000 1                  TNZ     s:5522

     2357     5520    2              SKIP_COUNT = - SKIP_COUNT;

   5520  1 001405   200067 335100                    LCA     SKIP_COUNT,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:262  
         1 001406   200067 755100                    STA     SKIP_COUNT,,AUTO

     2358     5521
     2359     5522    3           IF SKIP_COUNT ~= 0 THEN DO;

   5522  1 001407   200067 235100                    LDA     SKIP_COUNT,,AUTO
         1 001410   001513 600000 1                  TZE     s:5559

     2360     5523    3              CALL VDA$LREAD (STREAM, NODE_RANGE.START, SKIP_COUNT, %FIND)

   5523  1 001411   200003 474500                    LDP4    @OPERAND,,AUTO
         1 001412   400000 475500                    LDP5    0,,PR4
         1 001413   000000 236000 2                  LDQ     0
         1 001414   200135 756100                    STQ     SRC_FOR_ENDD$+4,,AUTO
         1 001415   200067 636500                    EPPR6   SKIP_COUNT,,AUTO
         1 001416   200134 456500                    STP6    SRC_FOR_ENDD$+3,,AUTO
         1 001417   200045 637500                    EPPR7   NODE_RANGE,,AUTO
         1 001420   200133 457500                    STP7    SRC_FOR_ENDD$+2,,AUTO
         1 001421   200132 455500                    STP5    SRC_FOR_ENDD$+1,,AUTO
         1 001422   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001423   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001424   000000 701000 xent               TSX1    VDA$LREAD
         1 001425   001547 702000 1                  TSX2    LREAD_FAILED

     2361     5524    3                ALTRET (LREAD_FAILED);
     2362     5525    3              IF STREAM.CURRENT.EOF THEN

   5525  1 001426   200003 470500                    LDP0    @OPERAND,,AUTO
         1 001427   000000 471500                    LDP1    0,,PR0
         1 001430   100016 236100                    LDQ     14,,PR1
         1 001431   400000 316007                    CANQ    -131072,DL
         1 001432   001436 600000 1                  TZE     s:5527

     2363     5526    3                 SIGNAL = %FALSE;

   5526  1 001433   200005 473500                    LDP3    @SIGNAL,,AUTO
         1 001434   300000 450100                    STZ     0,,PR3
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:263  
         1 001435   001507 710000 1                  TRA     s:5556

     2364     5527    4              ELSE IF IT$OPERAND.OPTIONS.DIRECTION# = %DIR_BACKWARD THEN DO;

   5527  1 001436   200013 473500                    LDP3    IT_MOVEMENT$,,AUTO
         1 001437   300005 720100                    LXL0    5,,PR3
         1 001440   000002 100003                    CMPX0   2,DU
         1 001441   001507 601000 1                  TNZ     s:5556

     2365     5528                         /* Check to see if we hit BOF */
     2366     5529                         %GETKEY (KEY=NODE_RANGE.START.KEY, INDX=LEVEL-1,
     2367     5530                         PTR=INITIAL_KEY$);

   5537  1 001442   200015 235100                    LDA     LEVEL,,AUTO
         1 001443   000001 735000                    ALS     1
         1 001444   200043 721105                    LXL1    SUBST_FIELD$,AL,AUTO
         1 001445   000002 101003                    CMPX1   2,DU
         1 001446   001453 601000 1                  TNZ     s:5537+9

   5537  1 001447   200044 474505                    LDP4    SUBST_FIELD$+1,AL,AUTO
         1 001450   400002 635500                    EPPR5   2,,PR4
         1 001451   200070 455500                    STP5    INITIAL_KEY$,,AUTO
         1 001452   001455 710000 1                  TRA     s:5548

   5537  1 001453   200044 634505                    EPPR4   SUBST_FIELD$+1,AL,AUTO
         1 001454   200070 454500                    STP4    INITIAL_KEY$,,AUTO

     2368     5540                         %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2369     5541                         PTR=STREAM_KEY$);

   5548  1 001455   100004 722105                    LXL2    4,AL,PR1
         1 001456   000002 102003                    CMPX2   2,DU
         1 001457   001464 601000 1                  TNZ     s:5548+7

   5548  1 001460   100005 474505                    LDP4    5,AL,PR1
         1 001461   400002 635500                    EPPR5   2,,PR4
         1 001462   200071 455500                    STP5    STREAM_KEY$,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:264  
         1 001463   001466 710000 1                  TRA     s:5551

   5548  1 001464   100005 634505                    EPPR4   5,AL,PR1
         1 001465   200071 454500                    STP4    STREAM_KEY$,,AUTO

     2370     5551    5                    IF STREAM$KEY.BYTES >= INITIAL$KEY.BYTES THEN DO;

   5551  1 001466   200071 474500                    LDP4    STREAM_KEY$,,AUTO
         1 001467   400000 236100                    LDQ     0,,PR4
         1 001470   000033 772000                    QRL     27
         1 001471   200070 475500                    LDP5    INITIAL_KEY$,,AUTO
         1 001472   000000 623006                    EAX3    0,QL
         1 001473   500000 236100                    LDQ     0,,PR5
         1 001474   000033 772000                    QRL     27
         1 001475   000000 624006                    EAX4    0,QL
         1 001476   040140 106540                    CMPC    fill='040'O
         1 001477   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         1 001500   500000 200014                    ADSC9   0,,PR5                   cn=1,n=*X4
         1 001501   001507 602000 1                  TNC     s:5556

     2371     5552    5                       NODE_RANGE.START = %CLEAR;

   5552  1 001502   000100 100400                    MLR     fill='000'O
         1 001503   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 001504   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     2372     5553    5                       SIGNAL = %FALSE;       /* Hit BOF */

   5553  1 001505   200005 471500                    LDP1    @SIGNAL,,AUTO
         1 001506   100000 450100                    STZ     0,,PR1

     2373     5554    5                       END;

     2374     5555    4                    END;

     2375     5556    3              NODE_RANGE.START = STREAM.CURRENT;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:265  
   5556  1 001507   000000 471500                    LDP1    0,,PR0
         1 001510   000100 100500                    MLR     fill='000'O
         1 001511   100006 000044                    ADSC9   6,,PR1                   cn=0,n=36
         1 001512   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36

     2376     5557    3              END;

     2377     5558
     2378     5559    2           IF NOT SIGNAL THEN

   5559  1 001513   200005 470500                    LDP0    @SIGNAL,,AUTO
         1 001514   000000 234100                    SZN     0,,PR0
         1 001515   001520 604000 1                  TMI     s:5562

     2379     5560    2              RETURN;

   5560  1 001516   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001517   000001 702211                    TSX2  ! 1,X1

     2380     5561
     2381     5562    2           NODE_RANGE.START.POSITION# =

   5562  1 001520   200013 471500                    LDP1    IT_MOVEMENT$,,AUTO
         1 001521   100007 720100                    LXL0    7,,PR1
         1 001522   777777 360003                    ANX0    -1,DU
         1 001523   200055 740100                    STX0    NODE_RANGE+8,,AUTO

     2382     5563    2             ADDR(IT$OPERAND.KEY) -> VD$KEY_NUMBER.BYTES#;
     2383     5564
     2384     5565    3           IF FIND_END_BOUND THEN DO;

   5565  1 001524   200016 234100                    SZN     FIND_END_BOUND,,AUTO
         1 001525   001541 605000 1                  TPL     s:5571

     2385     5566    3              NODE_RANGE.ENDD = NODE_RANGE.START;

   5566  1 001526   000100 100500                    MLR     fill='000'O
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:266  
         1 001527   200045 000044                    ADSC9   NODE_RANGE,,AUTO         cn=0,n=36
         1 001530   200056 000044                    ADSC9   NODE_RANGE+9,,AUTO       cn=0,n=36

     2386     5567    3              NODE_RANGE.ENDD.POSITION# = MINIMUM(%MXNB_DATA,

   5567  1 001531   200066 236100                    LDQ     NODE_RANGE+17,,AUTO
         1 001532   000022 732000                    QRS     18
         1 001533   000001 036007                    ADLQ    1,DL
         1 001534   004000 116007                    CMPQ    2048,DL
         1 001535   001537 604400 1                  TMOZ    s:5567+6
         1 001536   004000 236007                    LDQ     2048,DL
         1 001537   000000 621006                    EAX1    0,QL
         1 001540   200066 741100                    STX1    NODE_RANGE+17,,AUTO

     2387     5568    3                NODE_RANGE.ENDD.POSITION# + 1);
     2388     5569    3              END;

     2389     5570
     2390     5571    2           CALL LOAD_EVAL_FROM_RANGE (NODE_RANGE)

   5571  1 001541   200045 633500                    EPPR3   NODE_RANGE,,AUTO
         1 001542   200105 453500                    STP3    STREAM_KEY$+3,,AUTO
         1 001543   001551 701000 1                  TSX1    LOAD_EVAL_FROM_RANGE
         1 001544   001547 702000 1                  TSX2    LREAD_FAILED

     2391     5572    2             ALTRET (LOAD_EVAL_FROM_RANGE_FAILED);
     2392     5573
     2393     5574    2           RETURN;

   5574  1 001545   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001546   000001 702211                    TSX2  ! 1,X1

   5565  1 001547                       LREAD_FAILED null
   5565  1 001547                       LOAD_EVAL_F* null
     2394     5575
     2395     5576
     2396     5577
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:267  
     2397     5578    2   LREAD_FAILED: ;
     2398     5579    2   LOAD_EVAL_FROM_RANGE_FAILED: ;
     2399     5580    2           ALTRETURN;

   5580  1 001547   200044 221300                    LDX1  ! SUBST_FIELD$+1,,AUTO
         1 001550   000000 702211                    TSX2  ! 0,X1

     2400     5581
     2401     5582
     2402     5583    2   END IREL_POSITION_N;
     2403     5584
     2404     5585                %BOX (TITLE="LOAD_EVAL_FROM_RANGE", PAGE=YES);
              5593    2
              5597    2   /***************************************************************************
              5599    2    *                                                                         *
              5603    2            *                            LOAD_EVAL_FROM_RANGE                        *
              5605    2            *                                                                        *
              5607    2          ***************************************************************************/

     2405     5611
     2406     5612        /*I* NAME: LOAD_EVAL_FROM_RANGE
     2407     5613            PARAMETERS:
     2408     5614                RANGE - VD$RANGE to set TOS$EVAL.RANGE from.
     2409     5615                                        !! NOTE !!
     2410     5616                        RANGE may be an alias for TOS$EVAL.RANGE, or
     2411     5617                        it may point to objects owned by TOS$EVAL.RANGE.
     2412     5618                        Therefore, at entry, we must make our own copy
     2413     5619                        of RANGE before we clear TOS$EVAL.RANGE.
     2414     5620            INPUT:
     2415     5621                TOS$EVAL - VD$EVAL whose .RANGE will be set based on
     2416     5622                    its .STATE and other info.
     2417     5623                TOS$EVAL_BOUND - Based VD$LOCATION; must be one of
     2418     5624                    TOS$EVAL.RANGE.START or .ENDD.  This is the primary
     2419     5625                    boundary of the range to be set from RANGE.
     2420     5626                IT$OPERAND - VD$IT_OPERAND which we're evaluating.
     2421     5627                IT_ADJUST - Parent of IT$OPERAND.
     2422     5628            OUTPUT:
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:268  
     2423     5629                TOS$EVAL_BOUND, and optionally TOS$EVAL.RANGE.ENDD, will
     2424     5630                    be set appropriately from RANGE.
     2425     5631            DESCRIPTION:
     2426     5632                Based on TOS$EVAL.STATE#,
     2427     5633        *??*     IT_ADJUST.NEW_STATE#,
     2428     5634                IT$OPERAND's .POINT option, and whether IT$OPERAND
     2429     5635                is the last child of IT_ADJUST --
     2430     5636                set TOS$EVAL_BOUND.  If the state is EVST_INITIAL,
     2431     5637                also set TOS$EVAL.RANGE.ENDD.  See the table at
     2432     5638                the heading of VDE$IADJUST for specifics on who sets
     2433     5639                what and why.
     2434     5640        */
     2435     5641
     2436     5642    1   LOAD_EVAL_FROM_RANGE: PROC (RANGE) ALTRET;

   5642  1 001551   200104 741300       LOAD_EVAL_F* STX1  ! STREAM_KEY$+2,,AUTO

     2437     5643
     2438     5644        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2439     5713
     2440     5714
     2441     5715
     2442     5716        %VD$RANGE (NAME=MY_RANGE, STCLASS=AUTO);
     2443     5785    2   DCL SRC_FOR_BOUND$ PTR;
     2444     5786    2   DCL SRC_FOR_ENDD$ PTR;
     2445     5787
     2446     5788
     2447     5789        %VD$LOCATION (NAME=SRC$FOR_BOUND, STCLASS="BASED(SRC_FOR_BOUND$)");
     2448     5817        %VD$LOCATION (NAME=SRC$FOR_ENDD, STCLASS="BASED(SRC_FOR_ENDD$)");
     2449     5845
     2450     5846
     2451     5847
     2452     5848    2           CALL VDG$OCOPY_RANGE (RANGE, MY_RANGE)

   5848  1 001552   200106 630500                    EPPR0   MY_RANGE,,AUTO
         1 001553   200133 450500                    STP0    SRC_FOR_ENDD$+2,,AUTO
         1 001554   200105 236100                    LDQ     @RANGE,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:269  
         1 001555   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 001556   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001557   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001560   000000 701000 xent               TSX1    VDG$OCOPY_RANGE
         1 001561   001700 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2453     5849    2             ALTRET (OCOPY_RANGE_FAILED);
     2454     5850
     2455     5851    3           IF IT$OPERAND.OPTIONS.POINT# = %PNT_EO THEN DO;

   5851  1 001562   200013 470500                    LDP0    IT_MOVEMENT$,,AUTO
         1 001563   000005 220100                    LDX0    5,,PR0
         1 001564   000003 100003                    CMPX0   3,DU
         1 001565   001573 601000 1                  TNZ     s:5855

     2456     5852    3              SRC_FOR_BOUND$ = ADDR(MY_RANGE.ENDD);

   5852  1 001566   200117 631500                    EPPR1   MY_RANGE+9,,AUTO
         1 001567   200130 451500                    STP1    SRC_FOR_BOUND$,,AUTO

     2457     5853    3              SRC_FOR_ENDD$ = ADDR(MY_RANGE.ENDD);

   5853  1 001570   200117 633500                    EPPR3   MY_RANGE+9,,AUTO
         1 001571   200131 453500                    STP3    SRC_FOR_ENDD$,,AUTO

     2458     5854    3              END;

   5854  1 001572   001621 710000 1                  TRA     s:5869

     2459     5855    2           ELSE IF IT$OPERAND.OPTIONS.POINT# = %PNT_AO

   5855  1 001573   000001 100003                    CMPX0   1,DU
         1 001574   001615 601000 1                  TNZ     s:5865
         1 001575   200004 471500                    LDP1    @IT_ADJUST,,AUTO
         1 001576   200013 236100                    LDQ     IT_MOVEMENT$,,AUTO
         1 001577   100005 116100                    CMPQ    5,,PR1
         1 001600   001615 601000 1                  TNZ     s:5865
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:270  

     2460     5856    3                AND ADDR(IT$OPERAND) = IT_ADJUST.MOVEMENTS_TAIL$ THEN DO;

     2461     5857    3                 IF TOS$EVAL.STATE# = %EVST_END THEN

   5857  1 001601   200007 473500                    LDP3    TOS_EVAL$,,AUTO
         1 001602   300070 221100                    LDX1    56,,PR3
         1 001603   000003 101003                    CMPX1   3,DU
         1 001604   001610 601000 1                  TNZ     s:5861

     2462     5858        /*??*          AND IT_ADJUST.NEW_STATE# = %EVST_END THEN */
     2463     5859    3                    SRC_FOR_BOUND$ = ADDR(MY_RANGE.ENDD);

   5859  1 001605   200117 634500                    EPPR4   MY_RANGE+9,,AUTO
         1 001606   200130 454500                    STP4    SRC_FOR_BOUND$,,AUTO
         1 001607   001612 710000 1                  TRA     s:5862

     2464     5860    3                 ELSE
     2465     5861    3                    SRC_FOR_BOUND$ = ADDR(MY_RANGE.START);

   5861  1 001610   200106 634500                    EPPR4   MY_RANGE,,AUTO
         1 001611   200130 454500                    STP4    SRC_FOR_BOUND$,,AUTO

     2466     5862    3                 SRC_FOR_ENDD$ = ADDR(MY_RANGE.ENDD);

   5862  1 001612   200117 635500                    EPPR5   MY_RANGE+9,,AUTO
         1 001613   200131 455500                    STP5    SRC_FOR_ENDD$,,AUTO

     2467     5863    3                 END;

   5863  1 001614   001621 710000 1                  TRA     s:5869

     2468     5864    3              ELSE DO; /* For both %PNT_BO and non-last %PNT_AO */

     2469     5865    3                 SRC_FOR_BOUND$ = ADDR(MY_RANGE.START);

   5865  1 001615   200106 631500                    EPPR1   MY_RANGE,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:271  
         1 001616   200130 451500                    STP1    SRC_FOR_BOUND$,,AUTO

     2470     5866    3                 SRC_FOR_ENDD$ = ADDR(MY_RANGE.START);

   5866  1 001617   200106 633500                    EPPR3   MY_RANGE,,AUTO
         1 001620   200131 453500                    STP3    SRC_FOR_ENDD$,,AUTO

     2471     5867    3                 END;

     2472     5868
     2473     5869    2           CALL VDG$OCLEAR_LOCATION (TOS$EVAL_BOUND)

   5869  1 001621   200011 630500                    EPPR0   TOS_EVAL_BOUND$,,AUTO
         1 001622   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001623   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001624   001700 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2474     5870    2             ALTRET (OCLEAR_LOCATION_FAILED);
     2475     5871    2           TOS$EVAL_BOUND = SRC$FOR_BOUND;

   5871  1 001625   200130 470500                    LDP0    SRC_FOR_BOUND$,,AUTO
         1 001626   200011 471500                    LDP1    TOS_EVAL_BOUND$,,AUTO
         1 001627   000100 100500                    MLR     fill='000'O
         1 001630   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
         1 001631   100000 000044                    ADSC9   0,,PR1                   cn=0,n=36

     2476     5872
     2477     5873    3           IF TOS$EVAL.STATE# = %EVST_INITIAL THEN DO;

   5873  1 001632   200007 473500                    LDP3    TOS_EVAL$,,AUTO
         1 001633   300070 220100                    LDX0    56,,PR3
         1 001634   000001 100003                    CMPX0   1,DU
         1 001635   001667 601000 1                  TNZ     s:5885

     2478     5874    3              CALL VDG$OCLEAR_LOCATION (TOS$EVAL.RANGE.ENDD)

   5874  1 001636   200007 236100                    LDQ     TOS_EVAL$,,AUTO
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:272  
         1 001637   000035 036003                    ADLQ    29,DU
         1 001640   200132 756100                    STQ     SRC_FOR_ENDD$+1,,AUTO
         1 001641   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001642   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001643   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001644   001700 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2479     5875    3                ALTRET (OCLEAR_LOCATION_FAILED);
     2480     5876    4              IF SRC_FOR_BOUND$ = SRC_FOR_ENDD$ THEN DO;

   5876  1 001645   200130 236100                    LDQ     SRC_FOR_BOUND$,,AUTO
         1 001646   200131 116100                    CMPQ    SRC_FOR_ENDD$,,AUTO
         1 001647   001661 601000 1                  TNZ     s:5881

     2481     5877    4                 CALL VDG$OCOPY_LOCATION (SRC$FOR_ENDD, TOS$EVAL.RANGE.ENDD)

   5877  1 001650   200007 236100                    LDQ     TOS_EVAL$,,AUTO
         1 001651   000035 036003                    ADLQ    29,DU
         1 001652   200131 235100                    LDA     SRC_FOR_ENDD$,,AUTO
         1 001653   200132 757100                    STAQ    SRC_FOR_ENDD$+1,,AUTO
         1 001654   200132 630500                    EPPR0   SRC_FOR_ENDD$+1,,AUTO
         1 001655   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001656   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001657   001700 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2482     5878    4                   ALTRET (OCOPY_LOCATION_FAILED);
     2483     5879    4                 END;

   5879  1 001660   001676 710000 1                  TRA     s:5891

     2484     5880    3              ELSE
     2485     5881    3                 TOS$EVAL.RANGE.ENDD = SRC$FOR_ENDD;

   5881  1 001661   200131 470500                    LDP0    SRC_FOR_ENDD$,,AUTO
         1 001662   200007 471500                    LDP1    TOS_EVAL$,,AUTO
         1 001663   000100 100500                    MLR     fill='000'O
         1 001664   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:273  
         1 001665   100035 000044                    ADSC9   29,,PR1                  cn=0,n=36

     2486     5882    3              END;

   5882  1 001666   001676 710000 1                  TRA     s:5891

     2487     5883    3           ELSE DO;

     2488     5884                   /* Didn't use SRC$FOR_ENDD:  may need to free it */
     2489     5885    4              IF SRC_FOR_BOUND$ ~= SRC_FOR_ENDD$ THEN DO;

   5885  1 001667   200130 236100                    LDQ     SRC_FOR_BOUND$,,AUTO
         1 001670   200131 116100                    CMPQ    SRC_FOR_ENDD$,,AUTO
         1 001671   001676 600000 1                  TZE     s:5891

     2490     5886    4                 CALL VDG$OCLEAR_LOCATION (SRC$FOR_ENDD)

   5886  1 001672   200131 630500                    EPPR0   SRC_FOR_ENDD$,,AUTO
         1 001673   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001674   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001675   001700 702000 1                  TSX2    OCOPY_RANGE_FAILED

     2491     5887    4                   ALTRET (OCLEAR_LOCATION_FAILED);
     2492     5888    4                 END;

     2493     5889    3              END;

     2494     5890
     2495     5891    2           RETURN;

   5891  1 001676   200104 221300                    LDX1  ! STREAM_KEY$+2,,AUTO
         1 001677   000001 702211                    TSX2  ! 1,X1

   5881  1 001700                       OCOPY_RANGE* null
   5881  1 001700                       OCLEAR_LOCA* null
   5881  1 001700                       OCOPY_LOCAT* null
     2496     5892
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:274  
     2497     5893
     2498     5894    2   OCOPY_RANGE_FAILED: ;
     2499     5895    2   OCLEAR_LOCATION_FAILED: ;
     2500     5896    2   OCOPY_LOCATION_FAILED: ;
     2501     5897    2           ALTRETURN;

   5897  1 001700   200104 221300                    LDX1  ! STREAM_KEY$+2,,AUTO
         1 001701   000000 702211                    TSX2  ! 0,X1
     2502     5898
     2503     5899    2   END LOAD_EVAL_FROM_RANGE;
     2504     5900
     2505     5901    1   END VDE$IADJUST;
     2506     5902        %EOD;

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:275  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IADJUST.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:276  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @IT_ADJUST                 3-0-0/w PTR         r     1 @OPERAND
   105-0-0/w PTR         r     1 @RANGE                     5-0-0/w PTR         r     1 @SIGNAL
    76-0-0/w SBIN        r     1 ERR_CODE                  16-0-0/w BIT         r     1 FIND_END_BOUND
    20-0-0/w STRC(648)   r     1 FOUND_RANGE               75-0-0/c STRC        r     1 FRACT
   100-0-0/w SBIN        r     1 INDX                     101-0-0/w PTR         r     1 INITIAL_KEY$
    70-0-0/w PTR         r     1 INITIAL_KEY$              *0-0-0/w STRC(216)   r     1 IT_ADJUST
    10-0-0/w PTR         r     1 IT_BLOCK_EXPR$            13-0-0/w PTR         r     1 IT_MOVEMENT$
    15-0-0/w UBIN        r     1 LEVEL                      6-0-0/w PTR         r     1 LO_NAME$
    70-0-0/w SBIN        r     1 MX_RECORDS               106-0-0/w STRC(648)   r     1 MY_RANGE
    67-0-0/w PTR         r     1 NODE_KEY$                 45-0-0/w STRC(648)   r     1 NODE_RANGE
    45-0-0/w STRC(648)   r     1 NODE_RANGE                45-0-0/w STRC(648)   r     1 NODE_RANGE
    45-0-0/w STRC(648)   r     1 NODE_RANGE                70-0-0/w STRC(72)    r     1 NUMERIC_KEY
    *0-0-0/w STRC(144)   r     1 OPERAND                   73-0-0/w SBIN        r     1 ORIGINAL_LENGTH
    67-0-0/w STRC(324)   r     1 OWNS_OBJECTS_LOC          72-0-0/w SBIN        r     1 POINT_INDEX
    *0-0-0/w STRC(648)   r     1 RANGE                     17-0-0/w PTR         r     1 REF_BLOCK_DESC$
    74-0-0/w SBIN        r     1 SBIN_VALUE                *0-0-0/w BIT         r     1 SIGNAL
   100-0-0/w SBIN        r     1 SKIP_COUNT                67-0-0/w SBIN        r     1 SKIP_COUNT
    67-0-0/w SBIN        r     1 SKIP_COUNT               130-0-0/w PTR         r     1 SRC_FOR_BOUND$
   131-0-0/w PTR         r     1 SRC_FOR_ENDD$            102-0-0/w PTR         r     1 STREAM_KEY$
    77-0-0/w PTR         r     1 STREAM_KEY$               71-0-0/w PTR         r     1 STREAM_KEY$
    43-0-0/w PTR         r     1 SUBST_FIELD$               7-0-0/w PTR         r     1 TOS_EVAL$
    11-0-0/w PTR         r     1 TOS_EVAL_BOUND$
    12-0-0/w PTR         r     1 TOS_EVAL_RELATIVE_TO$
    42-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:277  
     0-0-0/w PTR         r     1 VD_CMD_OBJECTS$(0:49)
     0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 INITIAL$KEY                0-0-0/w ASTR(9)     r     1 INITIAL$KEY
     0-0-0/w STRC(1116)  r     1 IT$BLOCK_EXPR              0-0-0/w STRC(324)   r     1 IT$OPERAND
     0-0-0/w ASTR(9)     r     1 LO$NAME                    0-0-0/w ASTR(9)     r     1 NODE$KEY
     0-0-0/w STRC(936)   r     1 REF$BLOCK_DESC             0-0-0/w STRC(324)   r     1 SRC$FOR_BOUND
     0-0-0/w STRC(324)   r     1 SRC$FOR_ENDD               0-0-0/w STRC(864)   r     1 STREAM
     0-0-0/w ASTR(9)     r     1 STREAM$KEY                 0-0-0/w ASTR(9)     r     1 STREAM$KEY
     0-0-0/w ASTR(9)     r     1 STREAM$KEY
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w STRC(2124)  r     1 TOS$EVAL                   0-0-0/w STRC(324)   r     1 TOS$EVAL_BOUND
     0-0-0/w STRC(324)   r     1 TOS$EVAL_RELATIVE_TO       0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(180)   r     1 VD$ERR                     0-0-0/w STRC(216)   r     1 VD$IT_ADJUST
     0-0-0/w STRC(216)   r     1 VD$IT_SELECT               0-0-0/w STRC(72)    r     1 VD$KEY
     0-0-0/w STRC(72)    r     1 VD$KEY_NUMBER              0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w STRC(81)    r     1 VD$STRING_HEADER           0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDE$IADJUST requires 962 words for executable code.
   Procedure VDE$IADJUST requires 98 words of local(AUTO) storage.
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:278  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:279  
          MINI XREF LISTING

CONSEC_KEY_FRACT_FAILURE IN PROCEDURE IABS_NODE
      5046**LABEL    4928--GOTO     4951--GOTO
CONSEC_KEY_TOO_BIG_FAILURE IN PROCEDURE IABS_NODE
      5034**LABEL    4926--GOTO
DEC_CONVERT_FAILED IN PROCEDURE IABS_NODE
      5034**LABEL    4920--CALLALT  4943--CALLALT
EACH_MOVEMENT_NODE
      4042**LABEL    4156--EXIT
ERR_CODE IN PROCEDURE IABS_NODE
      4813**DCL      5034<<ASSIGN   5038<<ASSIGN   5042<<ASSIGN   5046<<ASSIGN   5050<<ASSIGN   5055>>ASSIGN
FIND_END_BOUND
      2653**DCL      4047<<ASSIGN   4053<<ASSIGN   4479>>IF       4989>>IF       5264>>IF       5565>>IF
FOUND_RANGE
      2663**DCL      4139<>CALL     4143<>CALL     4145<>CALL
FRACT IN PROCEDURE IABS_NODE
      4806**DCL      4943--CALL
FRACT.BYTES IN PROCEDURE IABS_NODE
      4810**DCL      4937--IF       4939--ASSIGN   4940<<ASSIGN   4941<<ASSIGN
FRACT.LENGTH# IN PROCEDURE IABS_NODE
      4810**DCL      4939<<ASSIGN
IABS_NODE
      4581**PROC     4122--CALL
IABS_NODE_FAILED
      4162**LABEL    4122--CALLALT
ILL_EDITKEY_FRACT_FAILURE IN PROCEDURE IABS_NODE
      5042**LABEL    4938--GOTO
ILL_NUMKEY_INTEGER_FAILURE IN PROCEDURE IABS_NODE
      5038**LABEL    4922--GOTO     4933--GOTO     4949--GOTO
IMOVE_BY_POSITIONS_FAILED IN PROCEDURE IREL_POSITION
      5272**LABEL    5258--CALLALT
INDX IN PROCEDURE IABS_NODE
      4815**DCL      5059<<ASSIGN   5060>>DOWHILE  5060>>DOWHILE  5062<<ASSIGN   5062>>ASSIGN   5064>>IF
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:280  
      5065<>CALL     5066>>CALL     5070>>ASSIGN
INITIAL$KEY.BYTES IN PROCEDURE IREL_NODE
      4397**DCL      4468>>IF
INITIAL$KEY.LENGTH# IN PROCEDURE IREL_NODE
      4395**DCL      4397--IMP-SIZ  4468>>IF
INITIAL$KEY.BYTES IN PROCEDURE IREL_POSITION_N
      5468**DCL      5551>>IF
INITIAL$KEY.LENGTH# IN PROCEDURE IREL_POSITION_N
      5466**DCL      5468--IMP-SIZ  5551>>IF
INITIAL_KEY$ IN PROCEDURE IREL_NODE
      4375**DCL      4387--IMP-PTR  4454<<ASSIGN   4454<<ASSIGN   4468>>IF       4468>>IF
INITIAL_KEY$ IN PROCEDURE IREL_POSITION_N
      5446**DCL      5458--IMP-PTR  5537<<ASSIGN   5537<<ASSIGN   5551>>IF       5551>>IF
IPATTERN_FAILED
      4162**LABEL    4139--CALLALT
IREL_NODE
      4274**PROC     4118--CALL
IREL_NODE_FAILED
      4162**LABEL    4118--CALLALT
IREL_POSITION
      5173**PROC     4129--CALL
IREL_POSITION_FAILED
      4162**LABEL    4129--CALLALT
IREL_POSITION_N
      5373**PROC     4133--CALL
IREL_POSITION_N_FAILED
      4162**LABEL    4133--CALLALT
IT$BLOCK_EXPR.OPTIONS.LEVEL#
      3127**DCL      4034>>ASSIGN
IT$BLOCK_EXPR.SELECTS$
      3144**DCL      4073>>IF       4073>>IF       4073>>IF       4073>>IF       4073>>IF       4073>>IF
IT$BLOCK_EXPR.SELECTS_TAIL$
      3144**DCL      4073>>IF
IT$OPERAND
      3211**DCL      4073--IF       4139<>CALL     5855--IF
IT$OPERAND.CODE#
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:281  
      3237**DCL      4056>>DOCASE   4151<>CALL
IT$OPERAND.FLINK$
      3237**DCL      4158>>ASSIGN
IT$OPERAND.KEY
      3263**DCL      4117>>IF       4128>>IF       4898>>ASSIGN   4962<<ASSIGN   4966<<ASSIGN   4984>>ASSIGN
      5087>>ASSIGN   5562--ASSIGN
IT$OPERAND.KEY.REP#
      3265**DCL      4101>>IF       4912>>IF       4961>>IF       5087>>IF
IT$OPERAND.KEY.TYPE#
      3265**DCL      4900>>IF       4903>>IF
IT$OPERAND.KEY.V$
      3265**DCL      4101>>ASSIGN   4101--ASSIGN   4912>>ASSIGN   4912--ASSIGN   4961>>CALL     4961>>CALL
      5087>>CALL     5087>>CALL
IT$OPERAND.OPTIONS.DIRECTION#
      3250**DCL      4043>>IF       4433>>IF       4444>>IF       5258<>CALL     5519>>IF       5527>>IF
IT$OPERAND.OPTIONS.POINT#
      3250**DCL      4048>>IF       4048>>IF       5851>>IF       5855>>IF
IT$OPERAND.OPTIONS.SKIP#
      3250**DCL      4432>>ASSIGN   5255>>ASSIGN   5518>>ASSIGN
IT$OPERAND.PARAM$
      3267**DCL      4111>>ASSIGN
IT_ADJUST
      2535**DCL       145--PROC
IT_ADJUST.MOVEMENTS$
      2561**DCL      4040>>ASSIGN
IT_ADJUST.MOVEMENTS_TAIL$
      2562**DCL      4048>>IF       5855>>IF
IT_BLOCK_EXPR$
      2647**DCL      3004--IMP-PTR  4033<<ASSIGN   4034>>ASSIGN   4073>>IF       4073>>IF       4073>>IF
      4073>>IF       4073>>IF       4073>>IF       4073>>IF
IT_MOVEMENT$
      2650**DCL      3211--IMP-PTR  4040<<ASSIGN   4042>>DOWHILE  4043>>IF       4048>>IF       4048>>IF
      4048>>IF       4056>>DOCASE   4073>>IF       4101>>IF       4101>>ASSIGN   4101>>ASSIGN   4111>>ASSIGN
      4117>>IF       4128>>IF       4139>>CALL     4151>>CALL     4158<<ASSIGN   4158>>ASSIGN   4432>>ASSIGN
      4433>>IF       4444>>IF       4898>>ASSIGN   4900>>IF       4903>>IF       4912>>IF       4912>>ASSIGN
      4912>>ASSIGN   4961>>IF       4961>>CALL     4961>>CALL     4962>>ASSIGN   4966>>ASSIGN   4984>>ASSIGN
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:282  
      5087>>ASSIGN   5087>>IF       5087>>CALL     5087>>CALL     5255>>ASSIGN   5258>>CALL     5518>>ASSIGN
      5519>>IF       5527>>IF       5562>>ASSIGN   5851>>IF       5855>>IF       5855>>IF
LEVEL
      2652**DCL      4034<<ASSIGN   4454>>IF       4454>>ASSIGN   4454>>ASSIGN   4465>>IF       4465>>ASSIGN
      4465>>ASSIGN   4899>>ASSIGN   4984>>ASSIGN   5003>>IF       5003>>ASSIGN   5003>>ASSIGN   5014>>IF
      5014>>ASSIGN   5014>>ASSIGN   5537>>IF       5537>>ASSIGN   5537>>ASSIGN   5548>>IF       5548>>ASSIGN
      5548>>ASSIGN
LO$NAME
      2736**DCL      4104<>CALL
LO$NAME.LENGTH#
      2744**DCL      2746--IMP-SIZ  4104>>CALL
LOAD_EVAL_FROM_RANGE
      5642**PROC     4063--CALL     4084--CALL     4088--CALL     4106--CALL     4112--CALL     4143--CALL
      4495--CALL     5026--CALL     5268--CALL     5571--CALL
LOAD_EVAL_FROM_RANGE_FAILED
      4162**LABEL    4063--CALLALT  4084--CALLALT  4088--CALLALT  4106--CALLALT  4112--CALLALT  4143--CALLALT
LOAD_EVAL_FROM_RANGE_FAILED IN PROCEDURE IABS_NODE
      5087**LABEL    5026--CALLALT
LOAD_EVAL_FROM_RANGE_FAILED IN PROCEDURE IREL_NODE
      4498**LABEL    4495--CALLALT
LOAD_EVAL_FROM_RANGE_FAILED IN PROCEDURE IREL_POSITION
      5272**LABEL    5268--CALLALT
LOAD_EVAL_FROM_RANGE_FAILED IN PROCEDURE IREL_POSITION_N
      5565**LABEL    5571--CALLALT
LO_NAME$
      2645**DCL      2736--IMP-PTR  4101<<ASSIGN   4101<<ASSIGN   4104>>CALL     4104>>CALL
LREAD_FAILED IN PROCEDURE IABS_NODE
      5087**LABEL    4992--CALLALT  5019--CALLALT
LREAD_FAILED IN PROCEDURE IREL_NODE
      4498**LABEL    4436--CALLALT  4489--CALLALT
LREAD_FAILED IN PROCEDURE IREL_POSITION_N
      5565**LABEL    5523--CALLALT
MX_RECORDS IN PROCEDURE IREL_POSITION
      5247**DCL      5256<<ASSIGN   5258<>CALL
MY_RANGE IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5724**DCL      5848<>CALL
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:283  
MY_RANGE.ENDD IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5766**DCL      5852--ASSIGN   5853--ASSIGN   5859--ASSIGN   5862--ASSIGN
MY_RANGE.START IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5738**DCL      5861--ASSIGN   5865--ASSIGN   5866--ASSIGN
NODE$KEY.BYTES IN PROCEDURE IABS_NODE
      4836**DCL      4917>>CALLBLT  4941>>ASSIGN   5017>>IF
NODE$KEY.LENGTH# IN PROCEDURE IABS_NODE
      4834**DCL      4836--IMP-SIZ  4917>>CALLBLT  4918>>ASSIGN   4919<<ASSIGN   4923<<ASSIGN   4941>>ASSIGN
      5017>>IF
NODE_KEY$ IN PROCEDURE IABS_NODE
      4653**DCL      4826--IMP-PTR  4912<<ASSIGN   4912<<ASSIGN   4917>>CALLBLT  4917>>CALLBLT  4918>>ASSIGN
      4919>>ASSIGN   4920<>CALL     4923>>ASSIGN   4941>>ASSIGN   4941>>ASSIGN   4953<<ASSIGN   5003<<ASSIGN
      5003<<ASSIGN   5017>>IF       5017>>IF
NODE_RANGE IN PROCEDURE IABS_NODE
      4592**DCL      4979<<ASSIGN   5026<>CALL
NODE_RANGE.ENDD IN PROCEDURE IABS_NODE
      4634**DCL      4987<<ASSIGN   5021<<ASSIGN
NODE_RANGE.START IN PROCEDURE IABS_NODE
      4606**DCL      4981<<ASSIGN   4987>>ASSIGN   4992<>CALL
NODE_RANGE.START.EOF IN PROCEDURE IABS_NODE
      4622**DCL      4983<<ASSIGN
NODE_RANGE.START.KEY IN PROCEDURE IABS_NODE
      4618**DCL      4984<<ASSIGN
NODE_RANGE.START.KEY.REP# IN PROCEDURE IABS_NODE
      4620**DCL      5003>>IF
NODE_RANGE.START.KEY.V$ IN PROCEDURE IABS_NODE
      4620**DCL      5003>>ASSIGN   5003--ASSIGN
NODE_RANGE.START.POSITION# IN PROCEDURE IABS_NODE
      4622**DCL      4982<<ASSIGN
NODE_RANGE IN PROCEDURE IREL_NODE
      4285**DCL      4429<<ASSIGN   4495<>CALL
NODE_RANGE.ENDD IN PROCEDURE IREL_NODE
      4327**DCL      4471<<ASSIGN   4491<<ASSIGN
NODE_RANGE.ENDD.EOF IN PROCEDURE IREL_NODE
      4343**DCL      4441<<ASSIGN
NODE_RANGE.START IN PROCEDURE IREL_NODE
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:284  
      4299**DCL      4471>>ASSIGN   4477<<ASSIGN   4486<>CALL     4488<<ASSIGN
NODE_RANGE.START.EOF IN PROCEDURE IREL_NODE
      4315**DCL      4440<<ASSIGN
NODE_RANGE.START.KEY IN PROCEDURE IREL_NODE
      4311**DCL      4470<<ASSIGN
NODE_RANGE IN PROCEDURE IREL_POSITION
      5185**DCL      5268<>CALL
NODE_RANGE.ENDD IN PROCEDURE IREL_POSITION
      5227**DCL      5254<<ASSIGN   5265<<ASSIGN
NODE_RANGE.ENDD.POSITION# IN PROCEDURE IREL_POSITION
      5243**DCL      5266<<ASSIGN   5266>>ASSIGN
NODE_RANGE.START IN PROCEDURE IREL_POSITION
      5199**DCL      5252<>CALL     5258<>CALL     5265>>ASSIGN   5272<>CALL
NODE_RANGE IN PROCEDURE IREL_POSITION_N
      5384**DCL      5571<>CALL
NODE_RANGE.ENDD IN PROCEDURE IREL_POSITION_N
      5426**DCL      5516<<ASSIGN   5566<<ASSIGN
NODE_RANGE.ENDD.POSITION# IN PROCEDURE IREL_POSITION_N
      5442**DCL      5567<<ASSIGN   5567>>ASSIGN
NODE_RANGE.START IN PROCEDURE IREL_POSITION_N
      5398**DCL      5515<<ASSIGN   5523<>CALL     5552<<ASSIGN   5556<<ASSIGN   5566>>ASSIGN
NODE_RANGE.START.KEY.REP# IN PROCEDURE IREL_POSITION_N
      5412**DCL      5537>>IF
NODE_RANGE.START.KEY.V$ IN PROCEDURE IREL_POSITION_N
      5412**DCL      5537>>ASSIGN   5537--ASSIGN
NODE_RANGE.START.POSITION# IN PROCEDURE IREL_POSITION_N
      5414**DCL      5562<<ASSIGN
NUMERIC_KEY IN PROCEDURE IABS_NODE
      4662**DCL      4898<<ASSIGN   4966>>ASSIGN
NUMERIC_KEY.BYTES# IN PROCEDURE IABS_NODE
      4666**DCL      4929<<ASSIGN   4932<<ASSIGN   4945<<ASSIGN   4945>>ASSIGN   4950>>IF       4950>>IF
      4952<<ASSIGN   4952>>ASSIGN
NUMERIC_KEY.LENGTH# IN PROCEDURE IABS_NODE
      4666**DCL      4965<<ASSIGN
NUMERIC_KEY.REP# IN PROCEDURE IABS_NODE
      4666**DCL      4964<<ASSIGN
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:285  
NUMERIC_KEY.TYPE# IN PROCEDURE IABS_NODE
      4666**DCL      4899<<ASSIGN   4900>>IF       4901>>DOCASE   4924>>IF       4948>>IF
OALLOC_FAILED IN PROCEDURE IABS_NODE
      5087**LABEL    5053--CALLALT  5066--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE IREL_NODE
      4498**LABEL    4499--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE IREL_POSITION
      5272**LABEL    5272--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5881**LABEL    5869--CALLALT  5874--CALLALT  5886--CALLALT
OCLEAR_RANGE_FAILED
      4162**LABEL    4145--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE IREL_NODE
      4498**LABEL    4486--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE IREL_POSITION
      5272**LABEL    5252--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5881**LABEL    5877--CALLALT
OCOPY_RANGE_FAILED IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5881**LABEL    5848--CALLALT
OPERAND
      2521**DCL       145--PROC     4139<>CALL
OPERAND.EVAL$
      2525**DCL      4032>>ASSIGN
OPERAND.INTREE$
      2525**DCL      4033>>ASSIGN
OPERAND.STREAM$
      2525**DCL      3277--IMP-PTR  4436>>CALL     4438>>IF       4465>>IF       4465>>ASSIGN   4465>>ASSIGN
      4477>>ASSIGN   4489>>CALL     4491>>ASSIGN   4899>>ASSIGN   4992>>CALL     4994>>IF       5014>>IF
      5014>>ASSIGN   5014>>ASSIGN   5019>>CALL     5021>>ASSIGN   5258>>CALL     5523>>CALL     5525>>IF
      5548>>IF       5548>>ASSIGN   5548>>ASSIGN   5556>>ASSIGN
ORIGINAL_LENGTH IN PROCEDURE IABS_NODE
      4670**DCL      4918<<ASSIGN   4923>>ASSIGN   4927>>IF       4934>>ASSIGN
OWNS_OBJECTS_LOC IN PROCEDURE IREL_NODE
      4354**DCL      4430<<ASSIGN   4486<>CALL     4488>>ASSIGN   4498>>IF       4499<>CALL
POINT_INDEX IN PROCEDURE IABS_NODE
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:286  
      4669**DCL      4917<<CALLBLT  4919>>ASSIGN   4927>>IF       4934>>ASSIGN   4941>>ASSIGN
PREAD_LO_NAME_FAILED
      4162**LABEL    4104--CALLALT
RANGE IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5652**DCL      5642--PROC     5848<>CALL
REF$BLOCK_DESC.RANGE
      3433**DCL      4106<>CALL     4112<>CALL
REF_BLOCK_DESC$
      2654**DCL      3383--IMP-PTR  4104<>CALL     4106>>CALL     4111<<ASSIGN   4112>>CALL
SBIN_VALUE IN PROCEDURE IABS_NODE
      4671**DCL      4920<>CALL     4922>>IF       4925>>IF       4929>>ASSIGN   4931>>IF       4932>>ASSIGN
      4934<<ASSIGN   4936>>IF       4937>>IF       4941>>ASSIGN   4943<>CALL     4945>>ASSIGN
SIGNAL
      2564**DCL       145--PROC     4031<<ASSIGN   4139<>CALL     4141>>IF       4155>>IF       4428<<ASSIGN
      4439<<ASSIGN   4469<<ASSIGN   4476>>IF       5251<<ASSIGN   5258<>CALL     5263>>IF       5514<<ASSIGN
      5526<<ASSIGN   5553<<ASSIGN   5559>>IF
SKIP_COUNT IN PROCEDURE IREL_NODE
      4374**DCL      4432<<ASSIGN   4434<<ASSIGN   4434>>ASSIGN   4436<>CALL
SKIP_COUNT IN PROCEDURE IREL_POSITION
      5246**DCL      5255<<ASSIGN   5258<>CALL
SKIP_COUNT IN PROCEDURE IREL_POSITION_N
      5445**DCL      5518<<ASSIGN   5520<<ASSIGN   5520>>ASSIGN   5522>>IF       5523<>CALL
SRC$FOR_BOUND IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5797**DCL      5871>>ASSIGN
SRC$FOR_ENDD IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5825**DCL      5877<>CALL     5881>>ASSIGN   5886<>CALL
SRC_FOR_BOUND$ IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5785**DCL      5797--IMP-PTR  5852<<ASSIGN   5859<<ASSIGN   5861<<ASSIGN   5865<<ASSIGN   5871>>ASSIGN
      5876>>IF       5885>>IF
SRC_FOR_ENDD$ IN PROCEDURE LOAD_EVAL_FROM_RANGE
      5786**DCL      5825--IMP-PTR  5853<<ASSIGN   5862<<ASSIGN   5866<<ASSIGN   5876>>IF       5877>>CALL
      5881>>ASSIGN   5885>>IF       5886>>CALL
STREAM
      3277**DCL      4436<>CALL     4489<>CALL     4992<>CALL     5019<>CALL     5258<>CALL     5523<>CALL
STREAM.CURRENT
      3328**DCL      4477>>ASSIGN   4491>>ASSIGN   5021>>ASSIGN   5556>>ASSIGN
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:287  
STREAM.CURRENT.EOF
      3344**DCL      4438>>IF       4994>>IF       5525>>IF
STREAM.CURRENT.KEY.REP#
      3342**DCL      4465>>IF       5014>>IF       5548>>IF
STREAM.CURRENT.KEY.V$
      3342**DCL      4465>>ASSIGN   4465--ASSIGN   5014>>ASSIGN   5014--ASSIGN   5548>>ASSIGN   5548--ASSIGN
STREAM.PORT$
      3303**DCL      4899>>ASSIGN
STREAM$KEY.BYTES IN PROCEDURE IABS_NODE
      4859**DCL      5017>>IF
STREAM$KEY.LENGTH# IN PROCEDURE IABS_NODE
      4857**DCL      4859--IMP-SIZ  5017>>IF
STREAM$KEY.BYTES IN PROCEDURE IREL_NODE
      4420**DCL      4468>>IF
STREAM$KEY.LENGTH# IN PROCEDURE IREL_NODE
      4418**DCL      4420--IMP-SIZ  4468>>IF
STREAM$KEY.BYTES IN PROCEDURE IREL_POSITION_N
      5491**DCL      5551>>IF
STREAM$KEY.LENGTH# IN PROCEDURE IREL_POSITION_N
      5489**DCL      5491--IMP-SIZ  5551>>IF
STREAM_KEY$ IN PROCEDURE IABS_NODE
      4814**DCL      4849--IMP-PTR  5014<<ASSIGN   5014<<ASSIGN   5017>>IF       5017>>IF
STREAM_KEY$ IN PROCEDURE IREL_NODE
      4376**DCL      4410--IMP-PTR  4465<<ASSIGN   4465<<ASSIGN   4468>>IF       4468>>IF
STREAM_KEY$ IN PROCEDURE IREL_POSITION_N
      5447**DCL      5481--IMP-PTR  5548<<ASSIGN   5548<<ASSIGN   5551>>IF       5551>>IF
STRING_KEY_ERROR IN PROCEDURE IABS_NODE
      5053**LABEL    5035--GOTO     5039--GOTO     5043--GOTO     5047--GOTO
SUBST$POINTER.OBJECT.CLASS#
      3660**DCL      5072<<ASSIGN
SUBST$POINTER.V$
      3662**DCL      5070<<ASSIGN   5087>>ASSIGN   5087>>CALL
SUBST_FIELD$
      2725**DCL      3583--IMP-PTR  3636--IMP-PTR  5058<<ASSIGN   5070>>ASSIGN   5072>>ASSIGN   5087>>ASSIGN
      5087>>CALL
TOS$EVAL.ENCLOSING
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:288  
      2796**DCL      4063<>CALL     4088<>CALL     5258<>CALL
TOS$EVAL.RANGE
      2865**DCL      4084<>CALL
TOS$EVAL.RANGE.ENDD
      2905**DCL      4038--ASSIGN   4046--ASSIGN   5874<>CALL     5877<>CALL     5881<<ASSIGN
TOS$EVAL.RANGE.START
      2877**DCL      4036--ASSIGN   4044--ASSIGN   4981>>ASSIGN
TOS$EVAL.REMAINING#
      2993**DCL      4442<<ASSIGN   4472<<ASSIGN
TOS$EVAL.STATE#
      2993**DCL      4035>>IF       4048>>IF       5857>>IF       5873>>IF
TOS$EVAL_BOUND
      3154**DCL      5869<>CALL     5871<<ASSIGN
TOS$EVAL_RELATIVE_TO
      3183**DCL      4436<>CALL     5252<>CALL     5515>>ASSIGN
TOS$EVAL_RELATIVE_TO.KEY.REP#
      3199**DCL      4454>>IF
TOS$EVAL_RELATIVE_TO.KEY.V$
      3199**DCL      4454>>ASSIGN   4454--ASSIGN
TOS_EVAL$
      2646**DCL      2759--IMP-PTR  4032<<ASSIGN   4035>>IF       4036>>ASSIGN   4038>>ASSIGN   4044>>ASSIGN
      4046>>ASSIGN   4048>>IF       4063>>CALL     4084>>CALL     4088>>CALL     4442>>ASSIGN   4472>>ASSIGN
      4981>>ASSIGN   5258>>CALL     5857>>IF       5873>>IF       5874>>CALL     5877>>CALL     5881>>ASSIGN
TOS_EVAL_BOUND$
      2648**DCL      3154--IMP-PTR  4036<<ASSIGN   4038<<ASSIGN   5869>>CALL     5871>>ASSIGN
TOS_EVAL_RELATIVE_TO$
      2649**DCL      3183--IMP-PTR  4044<<ASSIGN   4046<<ASSIGN   4436>>CALL     4454>>IF       4454>>ASSIGN
      4454>>ASSIGN   5252>>CALL     5515>>ASSIGN
VD$BUFFER.LENGTH#
      3862**DCL      3864--IMP-SIZ
VD$ERR
      3530**DCL      5058--ASSIGN
VD$ERR.ERR.CODE#
      3569**DCL      5055<<ASSIGN
VD$ERR.FLAGLEV#
      3572**DCL      5056<<ASSIGN
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:289  
VD$IT_ADJUST.MOVEMENTS$
      3808**DCL      4073>>IF       4073>>IF
VD$IT_ADJUST.MOVEMENTS_TAIL$
      3809**DCL      4073>>IF
VD$IT_SELECT.ADJUSTS$
      3772**DCL      4073>>IF       4073>>IF       4073>>IF       4073>>IF
VD$IT_SELECT.ADJUSTS_TAIL$
      3772**DCL      4073>>IF
VD$KEY IN PROCEDURE IABS_NODE
      4887**DCL      5066--CALL     5087<<ASSIGN
VD$KEY.V$ IN PROCEDURE IABS_NODE
      4891**DCL      5087<>CALL
VD$KEY_NUMBER.BYTES# IN PROCEDURE IREL_POSITION_N
      5508**DCL      5562>>ASSIGN
VD$PORT.LEVEL.KEY_TYPE#
      4009**DCL      4899>>ASSIGN
VD$STRING_HEADER
      3673**DCL      5066--CALL
VD$TEXTC_REMOTE
      3894**DCL      4961<>CALL     5087<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3923**DCL      3925--IMP-SIZ  4101--ASSIGN   4454--ASSIGN   4465--ASSIGN   4912--ASSIGN   4961>>CALL
      5003--ASSIGN   5014--ASSIGN   5070--ASSIGN   5087>>CALL     5537--ASSIGN   5548--ASSIGN
VDA$LREAD
      2578**DCL-ENT  4436--CALL     4489--CALL     4992--CALL     5019--CALL     5523--CALL
VDE$IMOVE_BY_POSITIONS
      2576**DCL-ENT  5258--CALL
VDE$IPATTERN
      2577**DCL-ENT  4139--CALL
VDE$PREAD_LO_NAME
      2575**DCL-ENT  4104--CALL
VDG$ESCREECH
      2586**DCL-ENT  4151--CALL     4975--CALL     5065--CALL
VDG$OALLOC
      2579**DCL-ENT  5053--CALL     5066--CALL
VDG$OCLEAR_LOCATION
PL6.E3A0      #003=VDE$IADJUST File=VDE$INTERPRET.:VDA5TSI                       FRI 07/04/97 11:11 Page:290  
      2584**DCL-ENT  4499--CALL     5272--CALL     5869--CALL     5874--CALL     5886--CALL
VDG$OCLEAR_RANGE
      2582**DCL-ENT  4145--CALL
VDG$OCOPY
      2581**DCL-ENT  5087--CALL
VDG$OCOPY_LOCATION
      2585**DCL-ENT  4486--CALL     5252--CALL     5877--CALL
VDG$OCOPY_RANGE
      2583**DCL-ENT  5848--CALL
VDG$OFREE
      2580**DCL-ENT  4961--CALL
VD_CMD_OBJECTS$
      2641**DCL      5060>>DOWHILE  5066<>CALL     5070>>ASSIGN
VD_ERR$
      2724**DCL      3530--IMP-PTR  5053<>CALL     5055>>ASSIGN   5056>>ASSIGN   5058>>ASSIGN
VD_KEY_NUMERIC_BOF
      2635**DCL      4470>>ASSIGN
X$DEC_CONVERT
      2587**DCL-ENT  4920--CALL     4943--CALL

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:291  
     2507        1        /*T***********************************************************/
     2508        2        /*T*                                                         */
     2509        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2510        4        /*T*                                                         */
     2511        5        /*T***********************************************************/
     2512        6        /*D* NAME: VDE$IMOVE_BY_POSITIONS
     2513        7            PARAMETERS:
     2514        8                STREAM - VD$STREAM to use; must be open.  Its file location at
     2515        9                    entry is irrelevent and unknown.
     2516       10                LOC - VD$LOCATION specifying where to begin moving from.
     2517       11                ENCLOSING - Enclosing VD$RANGE for this movement.
     2518       12                MX_RECORDS - Max # records we can read in order to skip
     2519       13                    N_POSITIONS positions.
     2520       14                DIRECTION - UBIN HALF HALIGNED containing a %DIR_ def,
     2521       15                    specifying which direction to move in.
     2522       16                N_POSITIONS - # of positions to move over.
     2523       17                FOUND - Uninitialized BIT(1) ALIGNED.
     2524       18            OUTPUT:
     2525       19                If we could move the requested number of positions and
     2526       20                still remain within the enclosing block:
     2527       21                    FOUND will be set %TRUE.
     2528       22                    LOC will specify the new location in the file after moving
     2529       23                        the requested number of positions.
     2530       24                    MX_RECORDS will be decremented by the number of records we
     2531       25                        read, following the first read of LOC's record.
     2532       26                Else:
     2533       27                    FOUND will be set %FALSE.
     2534       28            DESCRIPTION:
     2535       29                Note that VDE$IMOVE_BY_POSITIONS must read each
     2536       30                    record as it moves N_POSITIONS positions forward or backward.
     2537       31                    But, if the user
     2538       32                    requests moving 10,000 positions but .ENCLOSING is going
     2539       33                    to limit movement to 1 or 2 records, we don't want to
     2540       34                    read the entire file finding the 10,000th position, only
     2541       35                    to find it's out-of-bounds!  Therefore, after each read,
     2542       36                    VDE$IMOVE_BY_POSITIONS checks to see that we're still inside
     2543       37                    .ENCLOSING's bounds and MX_RECORDS's limit.
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:292  
     2544       38
     2545       39                Procedure:
     2546       40                In the loop that follows:
     2547       41                    LOC contains the key of the record we're moving over;
     2548       42                    NB_RECORD contains the length of this record;
     2549       43                    LOC.POSITION# will point to where we are in this record.
     2550       44                Find the first record using the LOC key.  If this
     2551       45                    record doesn't exist or is EOF, use 0 as the record length.
     2552       46                Now loop while we still need to skip positions:
     2553       47                    If the record's length is greater than the number of
     2554       48                        positions left to skip, then we've got the final
     2555       49                        record.  Adjust LOC.POSITION#.
     2556       50                    Otherwise, we can skip this entire record:  subtract
     2557       51                        its length from the number of positions left to
     2558       52                        skip.  Then get the key and length of the next or
     2559       53                        previous record, and set up LOC and NB_RECORD
     2560       54                        to describe this new record.
     2561       55                    End of loop.
     2562       56                If we found the operand successfully, set FOUND.
     2563       57        */
     2564       58
     2565       59        VDE$IMOVE_BY_POSITIONS: PROC (STREAM, LOC, ENCLOSING, MX_RECORDS, DIRECTION,
     2566       60                  N_POSITIONS, FOUND) ALTRET;
     2567       61
     2568       62        %INCLUDE VD_MACROS_M;
     2569     2277
     2570     2278
     2571     2279        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     2572     2385        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
     2573     2413        %VD$RANGE (NAME=ENCLOSING, STCLASS=PARAM);
     2574     2482    1   DCL MX_RECORDS SBIN;
     2575     2483    1   DCL DIRECTION UBIN HALF HALIGNED;
     2576     2484    1   DCL N_POSITIONS SBIN;
     2577     2485    1   DCL FOUND BIT(1) ALIGNED;
     2578     2486
     2579     2487
     2580     2488    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:293  
     2581     2489    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     2582     2490    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2583     2491    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2584     2492
     2585     2493
     2586     2494    1   DCL N_POS SBIN;         /* Local copy of N_POSITIONS, so I can change it */
     2587     2495    1   DCL LEVEL SBIN;
     2588     2496    1   DCL NB_RECORD SBIN;
     2589     2497    1   DCL PORT$ PTR;
     2590     2498    1   DCL INITIAL_KEY$ PTR;
     2591     2499    1   DCL STREAM_KEY$ PTR;
     2592     2500        %VD$KEY (NAME=MY_KEY, STCLASS=AUTO);    /* Does own objects! */
     2593     2514
     2594     2515
     2595     2516        %VD$PORT (NAME=PORT, STCLASS="BASED(PORT$)");
     2596     2614        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
     2597     2637        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2598     2660        %VD$FILE_NODE;
     2599     2753        %VD$BUFFER;
     2600     2811        %VD$TEXTC_REMOTE;
     2601     2872
     2602     2873
     2603     2874
     2604     2875    1           N_POS = N_POSITIONS;    /* So I can change it */
     2605     2876    1           FOUND = %TRUE;
     2606     2877    1           NB_RECORD = 0;
     2607     2878    1           PORT$ = STREAM.PORT$;
     2608     2879                /* LEVEL is # of lowest level in file structure */
     2609     2880    1           LEVEL = PORT.STRUCTURE$->VD$FILE_NODE.COUNT# - 1;
     2610     2881
     2611     2882                /*
     2612     2883                *  Position the StreamPointer to the LOC key (so
     2613     2884                *   relative and sequential reads will work),
     2614     2885                *   and set up the first record in LOC and NB_RECORD.
     2615     2886                */
     2616     2887
     2617     2888    1           CALL VDA$LREAD (STREAM, LOC, 0, %TRUE)
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:294  
     2618     2889    1             ALTRET (LREAD_FAILED);
     2619     2890    2           IF NOT STREAM.CURRENT.EOF THEN DO;
     2620     2891                   %GETKEY (KEY=LOC.KEY, INDX=LEVEL-1, PTR=INITIAL_KEY$);
     2621     2901                   %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2622     2902                   PTR=STREAM_KEY$);
     2623     2912    3              IF INITIAL$KEY.BYTES = STREAM$KEY.BYTES THEN DO;
     2624     2913                      /* Record exists */
     2625     2914    3                 IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN
     2626     2915    3                    NB_RECORD = PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.LENGTH#;
     2627     2916    3                 END;
     2628     2917    2              END;
     2629     2918
     2630     2919    1           IF DIRECTION = %DIR_FORWARD THEN
     2631     2920    1              NB_RECORD = MAXIMUM (NB_RECORD - LOC.POSITION#, 0);
     2632     2921    1           ELSE
     2633     2922    1              NB_RECORD = LOC.POSITION#;
     2634     2923
     2635     2924                /*
     2636     2925                *   In the following loop, LOC specifies our
     2637     2926                *       current location (which the first time thru may be a
     2638     2927                *       non-existent (virtual) location), and NB_RECORD
     2639     2928                *       is the length of the LOC record (which the
     2640     2929                *       first time thru is just the portion of the first
     2641     2930                *       record which lay in the direction we're moving).
     2642     2931                */
     2643     2932
     2644     2933    1   EACH_RECORD:
     2645     2934    2           DO WHILE N_POS > 0;
     2646     2935    2              CALL ONE_BOUND_CHECK (LOC)
     2647     2936    2                ALTRET (ONE_BOUND_CHECK_FAILED);
     2648     2937    2              IF NOT FOUND THEN
     2649     2938    2                 EXIT EACH_RECORD;     /* Exit loop */
     2650     2939
     2651     2940    3              IF N_POS <= NB_RECORD THEN DO;
     2652     2941                      /* AHA!! Don't need to skip beyond this record! */
     2653     2942    3                 IF DIRECTION = %DIR_FORWARD THEN
     2654     2943    3                    LOC.POSITION# = LOC.POSITION# + N_POS;
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:295  
     2655     2944    3                 ELSE
     2656     2945    3                    LOC.POSITION# = LOC.POSITION# - N_POS;
     2657     2946    3                 EXIT EACH_RECORD;     /* Exit loop */
     2658     2947    3                 END;
     2659     2948
     2660     2949                   /* Skip this record */
     2661     2950    2              N_POS = N_POS - NB_RECORD;
     2662     2951    3              IF MX_RECORDS <= 0 THEN DO;
     2663     2952                      /* Can't read anymore records:  hit the limit */
     2664     2953    3                 FOUND = %FALSE;
     2665     2954    3                 EXIT EACH_RECORD;
     2666     2955    3                 END;
     2667     2956    2              MX_RECORDS = MX_RECORDS - 1;
     2668     2957
     2669     2958    3              IF DIRECTION = %DIR_FORWARD THEN DO;
     2670     2959    3                 CALL VDA$LREAD (STREAM, , 1, %TRUE)
     2671     2960    3                   ALTRET (LREAD_FAILED);
     2672     2961    4                 IF STREAM.CURRENT.EOF THEN DO;
     2673     2962    4                    FOUND = %FALSE;
     2674     2963    4                    EXIT EACH_RECORD;    /* Exit loop */
     2675     2964    4                    END;
     2676     2965    3                 END;
     2677     2966    3              ELSE DO;     /* Moving backward */
     2678     2967    3                 CALL VDA$LREAD (STREAM, , -1, %TRUE)
     2679     2968    3                   ALTRET (LREAD_FAILED);
     2680     2969    4                 IF STREAM.CURRENT.EOF THEN DO;
     2681     2970    4                    FOUND = %FALSE;
     2682     2971    4                    EXIT EACH_RECORD;         /* Exit loop */
     2683     2972    4                    END;
     2684     2973                      %GETKEY (KEY=LOC.KEY, INDX=LEVEL-1, PTR=INITIAL_KEY$);
     2685     2983                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2686     2984                      PTR=STREAM_KEY$);
     2687     2994    4                 IF STREAM$KEY >= INITIAL$KEY THEN DO;
     2688     2995                         /*
     2689     2996                         *  If moving backward 1 record gets us a key that
     2690     2997                         *    is >= our initial key, then we hit BOF.
     2691     2998                         */
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:296  
     2692     2999    4                    FOUND = %FALSE;
     2693     3000    4                    EXIT EACH_RECORD;         /* Exit loop */
     2694     3001    4                    END;
     2695     3002    3                 END;
     2696     3003
     2697     3004                   %CLEARKEY (KEY=LOC.KEY, INDX=LEVEL-1);
     2698     3014                   %COPYKEY (FKEY=STREAM.CURRENT.KEY, FINDX=LEVEL-1,
     2699     3015                   TKEY=LOC.KEY, TINDX=LEVEL-1);
     2700     3031    2              IF PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL) THEN
     2701     3032    2                 NB_RECORD = 0;
     2702     3033    2              ELSE
     2703     3034    2                 NB_RECORD = PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.LENGTH#;
     2704     3035
     2705     3036    2              IF DIRECTION = %DIR_FORWARD THEN
     2706     3037    2                 LOC.POSITION# = 0;
     2707     3038    2              ELSE
     2708     3039    2                 LOC.POSITION# = NB_RECORD;
     2709     3040    2              END EACH_RECORD;
     2710     3041
     2711     3042
     2712     3043    1           RETURN;
     2713     3044
     2714     3045
     2715     3046
     2716     3047    1   LREAD_FAILED: ;
     2717     3048    1   ONE_BOUND_CHECK_FAILED: ;
     2718     3049    1           ALTRETURN;
     2719     3050
     2720     3051
     2721     3052                %BOX (TITLE="ONE_BOUND_CHECK");

              3064    1   /***************************************************************************
              3066    1    *                                                                         *
              3070    1            *                              ONE_BOUND_CHECK                            *
              3072    1            *                                                                         *
              3074    1           ***************************************************************************/

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:297  
     2722     3078
     2723     3079    1   ONE_BOUND_CHECK: PROC (LOC) ALTRET;
     2724     3080
     2725     3081        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
     2726     3109
     2727     3110
     2728     3111    2   DCL RCCL SBIN;
     2729     3112
     2730     3113
     2731     3114    2           CALL VDG$COMPARE_LOCS (LOC, ENCLOSING.START, RCCL)
     2732     3115    2             ALTRET (COMPARE_LOCS_FAILED);
     2733     3116    3           IF RCCL < %RCCL_EQUAL THEN DO;
     2734     3117    3              FOUND = %FALSE;
     2735     3118    3              RETURN;
     2736     3119    3              END;
     2737     3120
     2738     3121    2           CALL VDG$COMPARE_LOCS (LOC, ENCLOSING.ENDD, RCCL)
     2739     3122    2             ALTRET (COMPARE_LOCS_FAILED);
     2740     3123    3           IF RCCL >= %RCCL_EQUAL THEN DO;
     2741     3124    3              FOUND = %FALSE;
     2742     3125    3              RETURN;
     2743     3126    3              END;
     2744     3127
     2745     3128    2           RETURN;
     2746     3129
     2747     3130
     2748     3131    2   COMPARE_LOCS_FAILED: ;
     2749     3132    2           ALTRETURN;
     2750     3133
     2751     3134    2   END ONE_BOUND_CHECK;
     2752     3135
     2753     3136    1   END VDE$IMOVE_BY_POSITIONS;
     2754     3137        %EOD;

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:298  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IMOVE_BY_POSITIONS.

   Procedure VDE$IMOVE_BY_POSITIONS requires 338 words for executable code.
   Procedure VDE$IMOVE_BY_POSITIONS requires 26 words of local(AUTO) storage.

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:299  

 Object Unit name= VDE$IMOVE_BY_POSITIONS                     File name= VDE$INTERPRET.:VDA5TOU
 UTS= JUL 04 '97 11:12:22.08 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   338    522  VDE$IMOVE_BY_POSITIONS
    1  RoData even  none     6      6  VDE$IMOVE_BY_POSITIONS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        7  VDE$IMOVE_BY_POSITIONS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VDA$LREAD
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       3 VDG$COMPARE_LOCS
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:300  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:301  


     2507        1        /*T***********************************************************/
     2508        2        /*T*                                                         */
     2509        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2510        4        /*T*                                                         */
     2511        5        /*T***********************************************************/
     2512        6        /*D* NAME: VDE$IMOVE_BY_POSITIONS
     2513        7            PARAMETERS:
     2514        8                STREAM - VD$STREAM to use; must be open.  Its file location at
     2515        9                    entry is irrelevent and unknown.
     2516       10                LOC - VD$LOCATION specifying where to begin moving from.
     2517       11                ENCLOSING - Enclosing VD$RANGE for this movement.
     2518       12                MX_RECORDS - Max # records we can read in order to skip
     2519       13                    N_POSITIONS positions.
     2520       14                DIRECTION - UBIN HALF HALIGNED containing a %DIR_ def,
     2521       15                    specifying which direction to move in.
     2522       16                N_POSITIONS - # of positions to move over.
     2523       17                FOUND - Uninitialized BIT(1) ALIGNED.
     2524       18            OUTPUT:
     2525       19                If we could move the requested number of positions and
     2526       20                still remain within the enclosing block:
     2527       21                    FOUND will be set %TRUE.
     2528       22                    LOC will specify the new location in the file after moving
     2529       23                        the requested number of positions.
     2530       24                    MX_RECORDS will be decremented by the number of records we
     2531       25                        read, following the first read of LOC's record.
     2532       26                Else:
     2533       27                    FOUND will be set %FALSE.
     2534       28            DESCRIPTION:
     2535       29                Note that VDE$IMOVE_BY_POSITIONS must read each
     2536       30                    record as it moves N_POSITIONS positions forward or backward.
     2537       31                    But, if the user
     2538       32                    requests moving 10,000 positions but .ENCLOSING is going
     2539       33                    to limit movement to 1 or 2 records, we don't want to
     2540       34                    read the entire file finding the 10,000th position, only
     2541       35                    to find it's out-of-bounds!  Therefore, after each read,
     2542       36                    VDE$IMOVE_BY_POSITIONS checks to see that we're still inside
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:302  
     2543       37                    .ENCLOSING's bounds and MX_RECORDS's limit.
     2544       38
     2545       39                Procedure:
     2546       40                In the loop that follows:
     2547       41                    LOC contains the key of the record we're moving over;
     2548       42                    NB_RECORD contains the length of this record;
     2549       43                    LOC.POSITION# will point to where we are in this record.
     2550       44                Find the first record using the LOC key.  If this
     2551       45                    record doesn't exist or is EOF, use 0 as the record length.
     2552       46                Now loop while we still need to skip positions:
     2553       47                    If the record's length is greater than the number of
     2554       48                        positions left to skip, then we've got the final
     2555       49                        record.  Adjust LOC.POSITION#.
     2556       50                    Otherwise, we can skip this entire record:  subtract
     2557       51                        its length from the number of positions left to
     2558       52                        skip.  Then get the key and length of the next or
     2559       53                        previous record, and set up LOC and NB_RECORD
     2560       54                        to describe this new record.
     2561       55                    End of loop.
     2562       56                If we found the operand successfully, set FOUND.
     2563       57        */
     2564       58
     2565       59        VDE$IMOVE_BY_POSITIONS: PROC (STREAM, LOC, ENCLOSING, MX_RECORDS, DIRECTION,

     59  0 000000   000000 700200 xent  VDE$IMOVE_B* TSX0  ! X66_AUTO_N
         0 000001   000032 000007                    ZERO    26,7

     2566       60                  N_POSITIONS, FOUND) ALTRET;
     2567       61
     2568       62        %INCLUDE VD_MACROS_M;
     2569     2277
     2570     2278
     2571     2279        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     2572     2385        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
     2573     2413        %VD$RANGE (NAME=ENCLOSING, STCLASS=PARAM);
     2574     2482    1   DCL MX_RECORDS SBIN;
     2575     2483    1   DCL DIRECTION UBIN HALF HALIGNED;
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:303  
     2576     2484    1   DCL N_POSITIONS SBIN;
     2577     2485    1   DCL FOUND BIT(1) ALIGNED;
     2578     2486
     2579     2487
     2580     2488    1   DCL VDA$LREAD           ENTRY (4) ALTRET;
     2581     2489    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     2582     2490    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     2583     2491    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     2584     2492
     2585     2493
     2586     2494    1   DCL N_POS SBIN;         /* Local copy of N_POSITIONS, so I can change it */
     2587     2495    1   DCL LEVEL SBIN;
     2588     2496    1   DCL NB_RECORD SBIN;
     2589     2497    1   DCL PORT$ PTR;
     2590     2498    1   DCL INITIAL_KEY$ PTR;
     2591     2499    1   DCL STREAM_KEY$ PTR;
     2592     2500        %VD$KEY (NAME=MY_KEY, STCLASS=AUTO);    /* Does own objects! */
     2593     2514
     2594     2515
     2595     2516        %VD$PORT (NAME=PORT, STCLASS="BASED(PORT$)");
     2596     2614        %VD$TEXTC (NAME=INITIAL$KEY, STCLASS="BASED(INITIAL_KEY$)");
     2597     2637        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     2598     2660        %VD$FILE_NODE;
     2599     2753        %VD$BUFFER;
     2600     2811        %VD$TEXTC_REMOTE;
     2601     2872
     2602     2873
     2603     2874
     2604     2875    1           N_POS = N_POSITIONS;    /* So I can change it */

   2875  0 000002   200010 470500                    LDP0    @N_POSITIONS,,AUTO
         0 000003   000000 235100                    LDA     0,,PR0
         0 000004   200012 755100                    STA     N_POS,,AUTO

     2605     2876    1           FOUND = %TRUE;

   2876  0 000005   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:304  
         0 000006   200011 471500                    LDP1    @FOUND,,AUTO
         0 000007   100000 756100                    STQ     0,,PR1

     2606     2877    1           NB_RECORD = 0;

   2877  0 000010   200014 450100                    STZ     NB_RECORD,,AUTO

     2607     2878    1           PORT$ = STREAM.PORT$;

   2878  0 000011   200003 473500                    LDP3    @STREAM,,AUTO
         0 000012   300001 236100                    LDQ     1,,PR3
         0 000013   200015 756100                    STQ     PORT$,,AUTO

     2608     2879                /* LEVEL is # of lowest level in file structure */
     2609     2880    1           LEVEL = PORT.STRUCTURE$->VD$FILE_NODE.COUNT# - 1;

   2880  0 000014   200015 474500                    LDP4    PORT$,,AUTO
         0 000015   400006 475500                    LDP5    6,,PR4
         0 000016   500014 235100                    LDA     12,,PR5
         0 000017   000001 135007                    SBLA    1,DL
         0 000020   200013 755100                    STA     LEVEL,,AUTO

     2610     2881
     2611     2882                /*
     2612     2883                *  Position the StreamPointer to the LOC key (so
     2613     2884                *   relative and sequential reads will work),
     2614     2885                *   and set up the first record in LOC and NB_RECORD.
     2615     2886                */
     2616     2887
     2617     2888    1           CALL VDA$LREAD (STREAM, LOC, 0, %TRUE)

   2888  0 000021   000000 237000 1                  LDAQ    0
         0 000022   200030 757100                    STAQ    RCCL+4,,AUTO
         0 000023   200004 236100                    LDQ     @LOC,,AUTO
         0 000024   200003 235100                    LDA     @STREAM,,AUTO
         0 000025   200026 757100                    STAQ    RCCL+2,,AUTO
         0 000026   200026 630500                    EPPR0   RCCL+2,,AUTO
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:305  
         0 000027   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000030   000000 701000 xent               TSX1    VDA$LREAD
         0 000031   000455 702000 0                  TSX2    LREAD_FAILED

     2618     2889    1             ALTRET (LREAD_FAILED);
     2619     2890    2           IF NOT STREAM.CURRENT.EOF THEN DO;

   2890  0 000032   200003 470500                    LDP0    @STREAM,,AUTO
         0 000033   000016 236100                    LDQ     14,,PR0
         0 000034   400000 316007                    CANQ    -131072,DL
         0 000035   000121 601000 0                  TNZ     s:2919

     2620     2891                   %GETKEY (KEY=LOC.KEY, INDX=LEVEL-1, PTR=INITIAL_KEY$);

   2898  0 000036   200013 235100                    LDA     LEVEL,,AUTO
         0 000037   000001 735000                    ALS     1
         0 000040   200004 471500                    LDP1    @LOC,,AUTO
         0 000041   177776 720105                    LXL0    -2,AL,PR1
         0 000042   000002 100003                    CMPX0   2,DU
         0 000043   000050 601000 0                  TNZ     s:2898+10

   2898  0 000044   177777 473505                    LDP3    -1,AL,PR1
         0 000045   300002 634500                    EPPR4   2,,PR3
         0 000046   200016 454500                    STP4    INITIAL_KEY$,,AUTO
         0 000047   000055 710000 0                  TRA     s:2909

   2898  0 000050   200013 236100                    LDQ     LEVEL,,AUTO
         0 000051   000023 736000                    QLS     19
         0 000052   000001 136003                    SBLQ    1,DU
         0 000053   200004 036100                    ADLQ    @LOC,,AUTO
         0 000054   200016 756100                    STQ     INITIAL_KEY$,,AUTO

     2621     2901                   %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2622     2902                   PTR=STREAM_KEY$);

   2909  0 000055   000004 721105                    LXL1    4,AL,PR0
         0 000056   000002 101003                    CMPX1   2,DU
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:306  
         0 000057   000064 601000 0                  TNZ     s:2909+7

   2909  0 000060   000005 473505                    LDP3    5,AL,PR0
         0 000061   300002 634500                    EPPR4   2,,PR3
         0 000062   200017 454500                    STP4    STREAM_KEY$,,AUTO
         0 000063   000071 710000 0                  TRA     s:2912

   2909  0 000064   200013 236100                    LDQ     LEVEL,,AUTO
         0 000065   000023 736000                    QLS     19
         0 000066   000005 036003                    ADLQ    5,DU
         0 000067   200003 036100                    ADLQ    @STREAM,,AUTO
         0 000070   200017 756100                    STQ     STREAM_KEY$,,AUTO

     2623     2912    3              IF INITIAL$KEY.BYTES = STREAM$KEY.BYTES THEN DO;

   2912  0 000071   200016 473500                    LDP3    INITIAL_KEY$,,AUTO
         0 000072   300000 236100                    LDQ     0,,PR3
         0 000073   000033 772000                    QRL     27
         0 000074   200017 474500                    LDP4    STREAM_KEY$,,AUTO
         0 000075   000000 622006                    EAX2    0,QL
         0 000076   400000 236100                    LDQ     0,,PR4
         0 000077   000033 772000                    QRL     27
         0 000100   000000 623006                    EAX3    0,QL
         0 000101   040140 106540                    CMPC    fill='040'O
         0 000102   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
         0 000103   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         0 000104   000121 601000 0                  TNZ     s:2919

     2624     2913                      /* Record exists */
     2625     2914    3                 IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN

   2914  0 000105   200013 236100                    LDQ     LEVEL,,AUTO
         0 000106   000007 402007                    MPY     7,DL
         0 000107   200015 475500                    LDP5    PORT$,,AUTO
         0 000110   500027 236106                    LDQ     23,QL,PR5
         0 000111   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000112   000121 600000 0                  TZE     s:2919
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:307  

     2626     2915    3                    NB_RECORD = PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.LENGTH#;

   2915  0 000113   200013 236100                    LDQ     LEVEL,,AUTO
         0 000114   000007 402007                    MPY     7,DL
         0 000115   500027 476506                    LDP6    23,QL,PR5
         0 000116   600002 236100                    LDQ     2,,PR6
         0 000117   000022 732000                    QRS     18
         0 000120   200014 756100                    STQ     NB_RECORD,,AUTO

     2627     2916    3                 END;

     2628     2917    2              END;

     2629     2918
     2630     2919    1           IF DIRECTION = %DIR_FORWARD THEN

   2919  0 000121   200007 471500                    LDP1    @DIRECTION,,AUTO
         0 000122   000100 101500                    MRL     fill='000'O
         0 000123   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         0 000124   200026 000004                    ADSC9   RCCL+2,,AUTO             cn=0,n=4
         0 000125   200026 236100                    LDQ     RCCL+2,,AUTO
         0 000126   000001 116007                    CMPQ    1,DL
         0 000127   000143 601000 0                  TNZ     s:2922

     2631     2920    1              NB_RECORD = MAXIMUM (NB_RECORD - LOC.POSITION#, 0);

   2920  0 000130   200004 473500                    LDP3    @LOC,,AUTO
         0 000131   300010 236100                    LDQ     8,,PR3
         0 000132   000022 732000                    QRS     18
         0 000133   200026 756100                    STQ     RCCL+2,,AUTO
         0 000134   200014 236100                    LDQ     NB_RECORD,,AUTO
         0 000135   200026 136100                    SBLQ    RCCL+2,,AUTO
         0 000136   000000 116003                    CMPQ    0,DU
         0 000137   000141 605000 0                  TPL     s:2920+9
         0 000140   000000 236003                    LDQ     0,DU
         0 000141   200014 756100                    STQ     NB_RECORD,,AUTO
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:308  
         0 000142   000147 710000 0                  TRA     EACH_RECORD

     2632     2921    1           ELSE
     2633     2922    1              NB_RECORD = LOC.POSITION#;

   2922  0 000143   200004 473500                    LDP3    @LOC,,AUTO
         0 000144   300010 236100                    LDQ     8,,PR3
         0 000145   000022 732000                    QRS     18
         0 000146   200014 756100                    STQ     NB_RECORD,,AUTO

     2634     2923
     2635     2924                /*
     2636     2925                *   In the following loop, LOC specifies our
     2637     2926                *       current location (which the first time thru may be a
     2638     2927                *       non-existent (virtual) location), and NB_RECORD
     2639     2928                *       is the length of the LOC record (which the
     2640     2929                *       first time thru is just the portion of the first
     2641     2930                *       record which lay in the direction we're moving).
     2642     2931                */
     2643     2932
     2644     2933    1   EACH_RECORD:
     2645     2934    2           DO WHILE N_POS > 0;

   2934  0 000147   200012 235100       EACH_RECORD  LDA     N_POS,,AUTO
         0 000150   000454 604400 0                  TMOZ    s:3043

     2646     2935    2              CALL ONE_BOUND_CHECK (LOC)

   2935  0 000151   200004 236100                    LDQ     @LOC,,AUTO
         0 000152   200023 756100                    STQ     STREAM_KEY$+4,,AUTO
         0 000153   000456 701000 0                  TSX1    ONE_BOUND_CHECK
         0 000154   000455 702000 0                  TSX2    LREAD_FAILED

     2647     2936    2                ALTRET (ONE_BOUND_CHECK_FAILED);
     2648     2937    2              IF NOT FOUND THEN

   2937  0 000155   200011 470500                    LDP0    @FOUND,,AUTO
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:309  
         0 000156   000000 234100                    SZN     0,,PR0
         0 000157   000454 605000 0                  TPL     s:3043

     2649     2938    2                 EXIT EACH_RECORD;     /* Exit loop */
     2650     2939
     2651     2940    3              IF N_POS <= NB_RECORD THEN DO;

   2940  0 000160   200012 236100                    LDQ     N_POS,,AUTO
         0 000161   200014 116100                    CMPQ    NB_RECORD,,AUTO
         0 000162   000210 605400 0                  TPNZ    s:2950

     2652     2941                      /* AHA!! Don't need to skip beyond this record! */
     2653     2942    3                 IF DIRECTION = %DIR_FORWARD THEN

   2942  0 000163   200007 471500                    LDP1    @DIRECTION,,AUTO
         0 000164   000100 101500                    MRL     fill='000'O
         0 000165   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         0 000166   200026 000004                    ADSC9   RCCL+2,,AUTO             cn=0,n=4
         0 000167   200026 236100                    LDQ     RCCL+2,,AUTO
         0 000170   000001 116007                    CMPQ    1,DL
         0 000171   000201 601000 0                  TNZ     s:2945

     2654     2943    3                    LOC.POSITION# = LOC.POSITION# + N_POS;

   2943  0 000172   200004 473500                    LDP3    @LOC,,AUTO
         0 000173   300010 236100                    LDQ     8,,PR3
         0 000174   000022 732000                    QRS     18
         0 000175   200012 036100                    ADLQ    N_POS,,AUTO
         0 000176   000000 620006                    EAX0    0,QL
         0 000177   300010 740100                    STX0    8,,PR3
         0 000200   000207 710000 0                  TRA     s:2946

     2655     2944    3                 ELSE
     2656     2945    3                    LOC.POSITION# = LOC.POSITION# - N_POS;

   2945  0 000201   200004 473500                    LDP3    @LOC,,AUTO
         0 000202   300010 236100                    LDQ     8,,PR3
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:310  
         0 000203   000022 732000                    QRS     18
         0 000204   200012 136100                    SBLQ    N_POS,,AUTO
         0 000205   000000 620006                    EAX0    0,QL
         0 000206   300010 740100                    STX0    8,,PR3

     2657     2946    3                 EXIT EACH_RECORD;     /* Exit loop */

   2946  0 000207   000454 710000 0                  TRA     s:3043

     2658     2947    3                 END;
     2659     2948
     2660     2949                   /* Skip this record */
     2661     2950    2              N_POS = N_POS - NB_RECORD;

   2950  0 000210   200014 136100                    SBLQ    NB_RECORD,,AUTO
         0 000211   200012 756100                    STQ     N_POS,,AUTO

     2662     2951    3              IF MX_RECORDS <= 0 THEN DO;

   2951  0 000212   200006 471500                    LDP1    @MX_RECORDS,,AUTO
         0 000213   100000 235100                    LDA     0,,PR1
         0 000214   000217 605400 0                  TPNZ    s:2956

     2663     2952                      /* Can't read anymore records:  hit the limit */
     2664     2953    3                 FOUND = %FALSE;

   2953  0 000215   000000 450100                    STZ     0,,PR0

     2665     2954    3                 EXIT EACH_RECORD;

   2954  0 000216   000454 710000 0                  TRA     s:3043

     2666     2955    3                 END;
     2667     2956    2              MX_RECORDS = MX_RECORDS - 1;

   2956  0 000217   000001 336007                    LCQ     1,DL
         0 000220   100000 056100                    ASQ     0,,PR1
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:311  

     2668     2957
     2669     2958    3              IF DIRECTION = %DIR_FORWARD THEN DO;

   2958  0 000221   200007 473500                    LDP3    @DIRECTION,,AUTO
         0 000222   000100 101500                    MRL     fill='000'O
         0 000223   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         0 000224   200026 000004                    ADSC9   RCCL+2,,AUTO             cn=0,n=4
         0 000225   200026 236100                    LDQ     RCCL+2,,AUTO
         0 000226   000001 116007                    CMPQ    1,DL
         0 000227   000250 601000 0                  TNZ     s:2967

     2670     2959    3                 CALL VDA$LREAD (STREAM, , 1, %TRUE)

   2959  0 000230   000002 237000 1                  LDAQ    2
         0 000231   200030 757100                    STAQ    RCCL+4,,AUTO
         0 000232   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000233   200003 235100                    LDA     @STREAM,,AUTO
         0 000234   200026 757100                    STAQ    RCCL+2,,AUTO
         0 000235   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000236   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000237   000000 701000 xent               TSX1    VDA$LREAD
         0 000240   000455 702000 0                  TSX2    LREAD_FAILED

     2671     2960    3                   ALTRET (LREAD_FAILED);
     2672     2961    4                 IF STREAM.CURRENT.EOF THEN DO;

   2961  0 000241   200003 470500                    LDP0    @STREAM,,AUTO
         0 000242   000016 236100                    LDQ     14,,PR0
         0 000243   400000 316007                    CANQ    -131072,DL
         0 000244   000342 600000 0                  TZE     s:3011

     2673     2962    4                    FOUND = %FALSE;

   2962  0 000245   200011 471500                    LDP1    @FOUND,,AUTO
         0 000246   100000 450100                    STZ     0,,PR1

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:312  
     2674     2963    4                    EXIT EACH_RECORD;    /* Exit loop */

   2963  0 000247   000454 710000 0                  TRA     s:3043

     2675     2964    4                    END;
     2676     2965    3                 END;
     2677     2966    3              ELSE DO;     /* Moving backward */

     2678     2967    3                 CALL VDA$LREAD (STREAM, , -1, %TRUE)

   2967  0 000250   000004 237000 1                  LDAQ    4
         0 000251   200030 757100                    STAQ    RCCL+4,,AUTO
         0 000252   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000253   200003 235100                    LDA     @STREAM,,AUTO
         0 000254   200026 757100                    STAQ    RCCL+2,,AUTO
         0 000255   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000256   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000257   000000 701000 xent               TSX1    VDA$LREAD
         0 000260   000455 702000 0                  TSX2    LREAD_FAILED

     2679     2968    3                   ALTRET (LREAD_FAILED);
     2680     2969    4                 IF STREAM.CURRENT.EOF THEN DO;

   2969  0 000261   200003 470500                    LDP0    @STREAM,,AUTO
         0 000262   000016 236100                    LDQ     14,,PR0
         0 000263   400000 316007                    CANQ    -131072,DL
         0 000264   000270 600000 0                  TZE     s:2980

     2681     2970    4                    FOUND = %FALSE;

   2970  0 000265   200011 471500                    LDP1    @FOUND,,AUTO
         0 000266   100000 450100                    STZ     0,,PR1

     2682     2971    4                    EXIT EACH_RECORD;         /* Exit loop */

   2971  0 000267   000454 710000 0                  TRA     s:3043

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:313  
     2683     2972    4                    END;
     2684     2973                      %GETKEY (KEY=LOC.KEY, INDX=LEVEL-1, PTR=INITIAL_KEY$);

   2980  0 000270   200013 235100                    LDA     LEVEL,,AUTO
         0 000271   000001 735000                    ALS     1
         0 000272   200004 471500                    LDP1    @LOC,,AUTO
         0 000273   177776 720105                    LXL0    -2,AL,PR1
         0 000274   000002 100003                    CMPX0   2,DU
         0 000275   000302 601000 0                  TNZ     s:2980+10

   2980  0 000276   177777 473505                    LDP3    -1,AL,PR1
         0 000277   300002 634500                    EPPR4   2,,PR3
         0 000300   200016 454500                    STP4    INITIAL_KEY$,,AUTO
         0 000301   000307 710000 0                  TRA     s:2991

   2980  0 000302   200013 236100                    LDQ     LEVEL,,AUTO
         0 000303   000023 736000                    QLS     19
         0 000304   000001 136003                    SBLQ    1,DU
         0 000305   200004 036100                    ADLQ    @LOC,,AUTO
         0 000306   200016 756100                    STQ     INITIAL_KEY$,,AUTO

     2685     2983                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=LEVEL-1,
     2686     2984                      PTR=STREAM_KEY$);

   2991  0 000307   000004 721105                    LXL1    4,AL,PR0
         0 000310   000002 101003                    CMPX1   2,DU
         0 000311   000316 601000 0                  TNZ     s:2991+7

   2991  0 000312   000005 473505                    LDP3    5,AL,PR0
         0 000313   300002 634500                    EPPR4   2,,PR3
         0 000314   200017 454500                    STP4    STREAM_KEY$,,AUTO
         0 000315   000323 710000 0                  TRA     s:2994

   2991  0 000316   200013 236100                    LDQ     LEVEL,,AUTO
         0 000317   000023 736000                    QLS     19
         0 000320   000005 036003                    ADLQ    5,DU
         0 000321   200003 036100                    ADLQ    @STREAM,,AUTO
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:314  
         0 000322   200017 756100                    STQ     STREAM_KEY$,,AUTO

     2687     2994    4                 IF STREAM$KEY >= INITIAL$KEY THEN DO;

   2994  0 000323   200017 473500                    LDP3    STREAM_KEY$,,AUTO
         0 000324   300000 236100                    LDQ     0,,PR3
         0 000325   000033 772000                    QRL     27
         0 000326   000001 622006                    EAX2    1,QL
         0 000327   200016 474500                    LDP4    INITIAL_KEY$,,AUTO
         0 000330   400000 236100                    LDQ     0,,PR4
         0 000331   000033 772000                    QRL     27
         0 000332   000001 623006                    EAX3    1,QL
         0 000333   000140 106540                    CMPC    fill='000'O
         0 000334   300000 000012                    ADSC9   0,,PR3                   cn=0,n=*X2
         0 000335   400000 000013                    ADSC9   0,,PR4                   cn=0,n=*X3
         0 000336   000342 602000 0                  TNC     s:3011

     2688     2995                         /*
     2689     2996                         *  If moving backward 1 record gets us a key that
     2690     2997                         *    is >= our initial key, then we hit BOF.
     2691     2998                         */
     2692     2999    4                    FOUND = %FALSE;

   2999  0 000337   200011 475500                    LDP5    @FOUND,,AUTO
         0 000340   500000 450100                    STZ     0,,PR5

     2693     3000    4                    EXIT EACH_RECORD;         /* Exit loop */

   3000  0 000341   000454 710000 0                  TRA     s:3043

     2694     3001    4                    END;
     2695     3002    3                 END;
     2696     3003
     2697     3004                   %CLEARKEY (KEY=LOC.KEY, INDX=LEVEL-1);

   3011  0 000342   200013 235100                    LDA     LEVEL,,AUTO
         0 000343   000001 735000                    ALS     1
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:315  
         0 000344   200004 471500                    LDP1    @LOC,,AUTO
         0 000345   177776 720105                    LXL0    -2,AL,PR1
         0 000346   000002 100003                    CMPX0   2,DU
         0 000347   000360 601000 0                  TNZ     s:3012+1

   3011  0 000350   177777 473505                    LDP3    -1,AL,PR1
         0 000351   200026 453500                    STP3    RCCL+2,,AUTO
         0 000352   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000353   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000354   000000 701000 xent               TSX1    VDG$OFREE
         0 000355   000357 702000 0                  TSX2    s:3012
         0 000356   000360 710000 0                  TRA     s:3012+1

   3012  0 000357   000000 702200 xent               TSX2  ! X66_AALT

   3012  0 000360   200013 235100                    LDA     LEVEL,,AUTO
         0 000361   000001 735000                    ALS     1
         0 000362   200004 470500                    LDP0    @LOC,,AUTO
         0 000363   077776 450105                    STZ     -2,AL,PR0
         0 000364   077777 450105                    STZ     -1,AL,PR0

     2698     3014                   %COPYKEY (FKEY=STREAM.CURRENT.KEY, FINDX=LEVEL-1,
     2699     3015                   TKEY=LOC.KEY, TINDX=LEVEL-1);

   3028  0 000365   200013 236100                    LDQ     LEVEL,,AUTO
         0 000366   000003 736000                    QLS     3
         0 000367   000002 735000                    ALS     2
         0 000370   200003 471500                    LDP1    @STREAM,,AUTO
         0 000371   000105 100506                    MLR     fill='000'O
         0 000372   100004 000010                    ADSC9   4,Q,PR1                  cn=0,n=8
         0 000373   077776 000010                    ADSC9   -2,A,PR0                 cn=0,n=8

   3028  0 000374   200013 235100                    LDA     LEVEL,,AUTO
         0 000375   000001 735000                    ALS     1
         0 000376   100004 720105                    LXL0    4,AL,PR1
         0 000377   000002 100003                    CMPX0   2,DU
         0 000400   000416 601000 0                  TNZ     s:3031
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:316  

   3028  0 000401   100005 473505                    LDP3    5,AL,PR1
         0 000402   200013 236100                    LDQ     LEVEL,,AUTO
         0 000403   000023 736000                    QLS     19
         0 000404   000001 136003                    SBLQ    1,DU
         0 000405   200004 036100                    ADLQ    @LOC,,AUTO
         0 000406   200027 756100                    STQ     RCCL+3,,AUTO
         0 000407   200026 453500                    STP3    RCCL+2,,AUTO
         0 000410   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000411   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000412   000000 701000 xent               TSX1    VDG$OCOPY
         0 000413   000415 702000 0                  TSX2    s:3029
         0 000414   000416 710000 0                  TRA     s:3031

   3029  0 000415   000000 702200 xent               TSX2  ! X66_AALT

     2700     3031    2              IF PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL) THEN

   3031  0 000416   200013 236100                    LDQ     LEVEL,,AUTO
         0 000417   000007 402007                    MPY     7,DL
         0 000420   200015 470500                    LDP0    PORT$,,AUTO
         0 000421   000027 236106                    LDQ     23,QL,PR0
         0 000422   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000423   000426 601000 0                  TNZ     s:3034

     2701     3032    2                 NB_RECORD = 0;

   3032  0 000424   200014 450100                    STZ     NB_RECORD,,AUTO
         0 000425   000434 710000 0                  TRA     s:3036

     2702     3033    2              ELSE
     2703     3034    2                 NB_RECORD = PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER.LENGTH#;

   3034  0 000426   200013 236100                    LDQ     LEVEL,,AUTO
         0 000427   000007 402007                    MPY     7,DL
         0 000430   000027 471506                    LDP1    23,QL,PR0
         0 000431   100002 236100                    LDQ     2,,PR1
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:317  
         0 000432   000022 732000                    QRS     18
         0 000433   200014 756100                    STQ     NB_RECORD,,AUTO

     2704     3035
     2705     3036    2              IF DIRECTION = %DIR_FORWARD THEN

   3036  0 000434   200007 471500                    LDP1    @DIRECTION,,AUTO
         0 000435   000100 101500                    MRL     fill='000'O
         0 000436   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         0 000437   200026 000004                    ADSC9   RCCL+2,,AUTO             cn=0,n=4
         0 000440   200026 236100                    LDQ     RCCL+2,,AUTO
         0 000441   000001 116007                    CMPQ    1,DL
         0 000442   000447 601000 0                  TNZ     s:3039

     2706     3037    2                 LOC.POSITION# = 0;

   3037  0 000443   000000 220003                    LDX0    0,DU
         0 000444   200004 473500                    LDP3    @LOC,,AUTO
         0 000445   300010 740100                    STX0    8,,PR3
         0 000446   000452 710000 0                  TRA     s:3040

     2707     3038    2              ELSE
     2708     3039    2                 LOC.POSITION# = NB_RECORD;

   3039  0 000447   200014 720100                    LXL0    NB_RECORD,,AUTO
         0 000450   200004 473500                    LDP3    @LOC,,AUTO
         0 000451   300010 740100                    STX0    8,,PR3

     2709     3040    2              END EACH_RECORD;

   3040  0 000452   200012 235100                    LDA     N_POS,,AUTO
         0 000453   000151 605400 0                  TPNZ    s:2935

     2710     3041
     2711     3042
     2712     3043    1           RETURN;

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:318  
   3043  0 000454   000000 702200 xent               TSX2  ! X66_ARET

   3031  0 000455                       LREAD_FAILED null
     2713     3044
     2714     3045
     2715     3046
     2716     3047    1   LREAD_FAILED: ;
     2717     3048    1   ONE_BOUND_CHECK_FAILED: ;

   3048  0 000455                       ONE_BOUND_C* null
     2718     3049    1           ALTRETURN;

   3049  0 000455   000000 702200 xent               TSX2  ! X66_AALT

     2719     3050
     2720     3051
     2721     3052                %BOX (TITLE="ONE_BOUND_CHECK");

              3064    1   /***************************************************************************
              3066    1    *                                                                         *
              3070    1            *                              ONE_BOUND_CHECK                           *
              3072    1            *                                                                        *
              3074    1          ***************************************************************************/

     2722     3078
     2723     3079    1   ONE_BOUND_CHECK: PROC (LOC) ALTRET;

   3079  0 000456   200022 741300       ONE_BOUND_C* STX1  ! STREAM_KEY$+3,,AUTO

     2724     3080
     2725     3081        %VD$LOCATION (NAME=LOC, STCLASS=PARAM);
     2726     3109
     2727     3110
     2728     3111    2   DCL RCCL SBIN;
     2729     3112
     2730     3113
     2731     3114    2           CALL VDG$COMPARE_LOCS (LOC, ENCLOSING.START, RCCL)
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:319  

   3114  0 000457   200024 630500                    EPPR0   RCCL,,AUTO
         0 000460   200030 450500                    STP0    RCCL+4,,AUTO
         0 000461   200005 236100                    LDQ     @ENCLOSING,,AUTO
         0 000462   200023 235100                    LDA     @LOC,,AUTO
         0 000463   200026 757100                    STAQ    RCCL+2,,AUTO
         0 000464   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000465   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000466   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000467   000520 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2732     3115    2             ALTRET (COMPARE_LOCS_FAILED);
     2733     3116    3           IF RCCL < %RCCL_EQUAL THEN DO;

   3116  0 000470   200024 235100                    LDA     RCCL,,AUTO
         0 000471   000476 605000 0                  TPL     s:3121

     2734     3117    3              FOUND = %FALSE;

   3117  0 000472   200011 470500                    LDP0    @FOUND,,AUTO
         0 000473   000000 450100                    STZ     0,,PR0

     2735     3118    3              RETURN;

   3118  0 000474   200022 221300                    LDX1  ! STREAM_KEY$+3,,AUTO
         0 000475   000001 702211                    TSX2  ! 1,X1

     2736     3119    3              END;
     2737     3120
     2738     3121    2           CALL VDG$COMPARE_LOCS (LOC, ENCLOSING.ENDD, RCCL)

   3121  0 000476   200024 630500                    EPPR0   RCCL,,AUTO
         0 000477   200030 450500                    STP0    RCCL+4,,AUTO
         0 000500   200005 236100                    LDQ     @ENCLOSING,,AUTO
         0 000501   000011 036003                    ADLQ    9,DU
         0 000502   200023 235100                    LDA     @LOC,,AUTO
         0 000503   200026 757100                    STAQ    RCCL+2,,AUTO
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:320  
         0 000504   200026 630500                    EPPR0   RCCL+2,,AUTO
         0 000505   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000506   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000507   000520 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2739     3122    2             ALTRET (COMPARE_LOCS_FAILED);
     2740     3123    3           IF RCCL >= %RCCL_EQUAL THEN DO;

   3123  0 000510   200024 235100                    LDA     RCCL,,AUTO
         0 000511   000516 604000 0                  TMI     s:3128

     2741     3124    3              FOUND = %FALSE;

   3124  0 000512   200011 470500                    LDP0    @FOUND,,AUTO
         0 000513   000000 450100                    STZ     0,,PR0

     2742     3125    3              RETURN;

   3125  0 000514   200022 221300                    LDX1  ! STREAM_KEY$+3,,AUTO
         0 000515   000001 702211                    TSX2  ! 1,X1

     2743     3126    3              END;
     2744     3127
     2745     3128    2           RETURN;

   3128  0 000516   200022 221300                    LDX1  ! STREAM_KEY$+3,,AUTO
         0 000517   000001 702211                    TSX2  ! 1,X1

   3123  0 000520                       COMPARE_LOC* null
     2746     3129
     2747     3130
     2748     3131    2   COMPARE_LOCS_FAILED: ;
     2749     3132    2           ALTRETURN;

   3132  0 000520   200022 221300                    LDX1  ! STREAM_KEY$+3,,AUTO
         0 000521   000000 702211                    TSX2  ! 0,X1
     2750     3133
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:321  
     2751     3134    2   END ONE_BOUND_CHECK;
     2752     3135
     2753     3136    1   END VDE$IMOVE_BY_POSITIONS;
     2754     3137        %EOD;

PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:322  
--  Include file information  --

   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IMOVE_BY_POSITIONS.
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:323  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @DIRECTION                 5-0-0/w PTR         r     1 @ENCLOSING
    11-0-0/w PTR         r     1 @FOUND                     4-0-0/w PTR         r     1 @LOC
    23-0-0/w PTR         r     1 @LOC                       6-0-0/w PTR         r     1 @MX_RECORDS
    10-0-0/w PTR         r     1 @N_POSITIONS               3-0-0/w PTR         r     1 @STREAM
    *0-0-0/h UBIN(18)    r     1 DIRECTION                 *0-0-0/w STRC(648)   r     1 ENCLOSING
    *0-0-0/w BIT         r     1 FOUND                     16-0-0/w PTR         r     1 INITIAL_KEY$
    13-0-0/w SBIN        r     1 LEVEL                     *0-0-0/w STRC(324)   r     1 LOC
    *0-0-0/w STRC(324)   r     1 LOC                       *0-0-0/w SBIN        r     1 MX_RECORDS
    14-0-0/w SBIN        r     1 NB_RECORD                 12-0-0/w SBIN        r     1 N_POS
    *0-0-0/w SBIN        r     1 N_POSITIONS               15-0-0/w PTR         r     1 PORT$
    24-0-0/w SBIN        r     1 RCCL                      *0-0-0/w STRC(864)   r     1 STREAM
    17-0-0/w PTR         r     1 STREAM_KEY$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 INITIAL$KEY                0-0-0/w STRC(1944)  r     1 PORT
     0-0-0/w ASTR(9)     r     1 STREAM$KEY                 0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDE$IMOVE_BY_POSITIONS requires 338 words for executable code.
   Procedure VDE$IMOVE_BY_POSITIONS requires 26 words of local(AUTO) storage.
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:324  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:325  
          MINI XREF LISTING

COMPARE_LOCS_FAILED IN PROCEDURE ONE_BOUND_CHECK
      3123**LABEL    3114--CALLALT  3121--CALLALT
DIRECTION
      2483**DCL        59--PROC     2919>>IF       2942>>IF       2958>>IF       3036>>IF
EACH_RECORD
      2934**LABEL    2938--EXIT     2946--EXIT     2954--EXIT     2963--EXIT     2971--EXIT     3000--EXIT
ENCLOSING
      2421**DCL        59--PROC
ENCLOSING.ENDD
      2463**DCL      3121<>CALL
ENCLOSING.START
      2435**DCL      3114<>CALL
FOUND
      2485**DCL        59--PROC     2876<<ASSIGN   2937>>IF       2953<<ASSIGN   2962<<ASSIGN   2970<<ASSIGN
      2999<<ASSIGN   3117<<ASSIGN   3124<<ASSIGN
INITIAL$KEY
      2622**DCL      2994>>IF
INITIAL$KEY.BYTES
      2632**DCL      2912>>IF
INITIAL$KEY.LENGTH#
      2630**DCL      2632--IMP-SIZ  2912>>IF       2994>>IF
INITIAL_KEY$
      2498**DCL      2622--IMP-PTR  2898<<ASSIGN   2898<<ASSIGN   2912>>IF       2912>>IF       2980<<ASSIGN
      2980<<ASSIGN   2994>>IF       2994>>IF
LEVEL
      2495**DCL      2880<<ASSIGN   2898>>IF       2898>>ASSIGN   2898>>ASSIGN   2909>>IF       2909>>ASSIGN
      2909>>ASSIGN   2914>>IF       2915>>ASSIGN   2980>>IF       2980>>ASSIGN   2980>>ASSIGN   2991>>IF
      2991>>ASSIGN   2991>>ASSIGN   3011>>IF       3011>>CALL     3011>>CALL     3012>>ASSIGN   3028>>ASSIGN
      3028>>ASSIGN   3028>>IF       3028>>CALL     3028>>CALL     3028>>CALL     3031>>IF       3034>>ASSIGN
LOC
      2393**DCL        59--PROC     2888<>CALL     2935<>CALL
LOC.KEY
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:326  
      2407**DCL      3012<<ASSIGN   3028<<ASSIGN
LOC.KEY.REP#
      2409**DCL      2898>>IF       2980>>IF       3011>>IF
LOC.KEY.V$
      2409**DCL      2898>>ASSIGN   2898--ASSIGN   2980>>ASSIGN   2980--ASSIGN   3011>>CALL     3011>>CALL
      3028<>CALL
LOC.POSITION#
      2411**DCL      2920>>ASSIGN   2922>>ASSIGN   2943<<ASSIGN   2943>>ASSIGN   2945<<ASSIGN   2945>>ASSIGN
      3037<<ASSIGN   3039<<ASSIGN
LOC IN PROCEDURE ONE_BOUND_CHECK
      3089**DCL      3079--PROC     3114<>CALL     3121<>CALL
LREAD_FAILED
      3031**LABEL    2888--CALLALT  2959--CALLALT  2967--CALLALT
MX_RECORDS
      2482**DCL        59--PROC     2951>>IF       2956<<ASSIGN   2956>>ASSIGN
NB_RECORD
      2496**DCL      2877<<ASSIGN   2915<<ASSIGN   2920<<ASSIGN   2920>>ASSIGN   2922<<ASSIGN   2940>>IF
      2950>>ASSIGN   3032<<ASSIGN   3034<<ASSIGN   3039>>ASSIGN
N_POS
      2494**DCL      2875<<ASSIGN   2934>>DOWHILE  2940>>IF       2943>>ASSIGN   2945>>ASSIGN   2950<<ASSIGN
      2950>>ASSIGN
N_POSITIONS
      2484**DCL        59--PROC     2875>>ASSIGN
ONE_BOUND_CHECK
      3079**PROC     2935--CALL
ONE_BOUND_CHECK_FAILED
      3048**LABEL    2935--CALLALT
PORT.LEVEL.DATA$
      2611**DCL      2914>>IF       2915>>ASSIGN   3031>>IF       3034>>ASSIGN
PORT.STRUCTURE$
      2552**DCL      2880>>ASSIGN
PORT$
      2497**DCL      2524--IMP-PTR  2878<<ASSIGN   2880>>ASSIGN   2914>>IF       2915>>ASSIGN   3031>>IF
      3034>>ASSIGN
RCCL IN PROCEDURE ONE_BOUND_CHECK
      3111**DCL      3114<>CALL     3116>>IF       3121<>CALL     3123>>IF
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:327  
STREAM
      2287**DCL        59--PROC     2888<>CALL     2959<>CALL     2967<>CALL
STREAM.CURRENT.EOF
      2354**DCL      2890>>IF       2961>>IF       2969>>IF
STREAM.CURRENT.KEY
      2350**DCL      3028>>ASSIGN
STREAM.CURRENT.KEY.REP#
      2352**DCL      2909>>IF       2991>>IF       3028>>IF
STREAM.CURRENT.KEY.V$
      2352**DCL      2909>>ASSIGN   2909--ASSIGN   2991>>ASSIGN   2991--ASSIGN   3028>>CALL     3028>>CALL
STREAM.PORT$
      2313**DCL      2878>>ASSIGN
STREAM$KEY
      2645**DCL      2994>>IF
STREAM$KEY.BYTES
      2655**DCL      2912>>IF
STREAM$KEY.LENGTH#
      2653**DCL      2655--IMP-SIZ  2912>>IF       2994>>IF
STREAM_KEY$
      2499**DCL      2645--IMP-PTR  2909<<ASSIGN   2909<<ASSIGN   2912>>IF       2912>>IF       2991<<ASSIGN
      2991<<ASSIGN   2994>>IF       2994>>IF
VD$BUFFER.LENGTH#
      2804**DCL      2806--IMP-SIZ  2915>>ASSIGN   3034>>ASSIGN
VD$FILE_NODE.COUNT#
      2751**DCL      2880>>ASSIGN
VD$TEXTC_REMOTE
      2836**DCL      3011<>CALL     3028<>CALL
VD$TEXTC_REMOTE.LENGTH#
      2865**DCL      2867--IMP-SIZ  2898--ASSIGN   2909--ASSIGN   2980--ASSIGN   2991--ASSIGN   3011>>CALL
      3028>>CALL
VDA$LREAD
      2488**DCL-ENT  2888--CALL     2959--CALL     2967--CALL
VDG$COMPARE_LOCS
      2489**DCL-ENT  3114--CALL     3121--CALL
VDG$OCOPY
      2490**DCL-ENT  3028--CALL
PL6.E3A0      #004=VDE$IMOVE_BY_POSITIONS File=VDE$INTERPRET.:VDA5TSI            FRI 07/04/97 11:12 Page:328  
VDG$OFREE
      2491**DCL-ENT  3011--CALL

PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:329  
     2755        1        /*T***********************************************************/
     2756        2        /*T*                                                         */
     2757        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2758        4        /*T*                                                         */
     2759        5        /*T***********************************************************/
     2760        6
     2761        7        /*D* NAME:  VDE$IGUAR_RANGE_IN_RANGE
     2762        8            PARAMETERS:
     2763        9                RANGE - The VD$RANGE to check.
     2764       10                LIMITS - The VD$RANGE to check RANGE against.
     2765       11                TRUNCATED - Uninitialized BIT(1) ALIGNED.
     2766       12                COMPLETELY_OUTSIDE - Uninitialized BIT(1) ALIGNED.
     2767       13            INPUT:
     2768       14                None.
     2769       15            OUTPUT:
     2770       16                RANGE may be modified to be within LIMITS' bounds.
     2771       17                If RANGE must be truncated to lie within LIMITS (that is, if
     2772       18                    some part of RANGE's range lies within LIMITS but not all
     2773       19                    of it), TRUNCATED will be set.
     2774       20                If RANGE specifies a range which lies completely outside
     2775       21                    the LIMITS range, COMPLETELY_OUTSIDE will be set.
     2776       22            DESCRIPTION:
     2777       23                Compare RANGE's bounds against LIMITS's bounds.
     2778       24                If any part (but not all) of the RANGE area lies outside
     2779       25                    LIMITS, then adjust the RANGE bounds so that it lies
     2780       26                    entirely within LIMITS, and return TRUNCATED set.
     2781       27                If all of the RANGE area lies outside LIMITS, then return
     2782       28                    COMPLETELY_OUTSIDE set, without adjusting RANGE.
     2783       29        */
     2784       30
     2785       31        VDE$IGUAR_RANGE_IN_RANGE: PROC (RANGE, LIMITS, TRUNCATED,
     2786       32                  COMPLETELY_OUTSIDE) ALTRET;
     2787       33
     2788       34
     2789       35        %INCLUDE VD_MACROS_M;
     2790     2250        %INCLUDE VD_PERR_C;
     2791     2398
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:330  
     2792     2399
     2793     2400        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2794     2469        %VD$RANGE (NAME=LIMITS, STCLASS=PARAM);
     2795     2538    1   DCL TRUNCATED BIT(1) ALIGNED;
     2796     2539    1   DCL COMPLETELY_OUTSIDE BIT(1) ALIGNED;
     2797     2540
     2798     2541
     2799     2542    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     2800     2543    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     2801     2544    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     2802     2545
     2803     2546
     2804     2547
     2805     2548    1   DCL RCCL SBIN;
     2806     2549
     2807     2550
     2808     2551
     2809     2552    1           TRUNCATED = %FALSE;
     2810     2553    1           COMPLETELY_OUTSIDE = %FALSE;
     2811     2554
     2812     2555    1           CALL VDG$COMPARE_LOCS (RANGE.START, LIMITS.START, RCCL)
     2813     2556    1             ALTRET (COMPARE_LOCS_FAILED);
     2814     2557    2           IF RCCL < %RCCL_EQUAL THEN DO;
     2815     2558    2              CALL VDG$COMPARE_LOCS (RANGE.ENDD, LIMITS.START, RCCL)
     2816     2559    2                ALTRET (COMPARE_LOCS_FAILED);
     2817     2560    3              IF RCCL <= %RCCL_EQUAL THEN DO;
     2818     2561                      /*
     2819     2562                      *  We're completely outside if RANGE.ENDD =< LIMITS.START.
     2820     2563                      *  The "=" part of the test was added for the following
     2821     2564                      *     test case:
     2822     2565                      *         ED 5; ED 4 TH 6
     2823     2566                      *  The evaluation of the "4" was succeeding because
     2824     2567                      *     RANGE was 4,0 - 5,0 and LIMITS was 5,0 - 6,0,
     2825     2568                      *     and RANGE.ENDD = LIMITS.START.  For this case,
     2826     2569                      *     this should be treated as COMPLETELY_OUTSIDE.
     2827     2570                      *  Tentative, tho (as of 10/84); other cases may require
     2828     2571                      *     different behaviour??
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:331  
     2829     2572                      */
     2830     2573    3                 COMPLETELY_OUTSIDE = %TRUE;
     2831     2574    3                 RETURN;
     2832     2575    3                 END;
     2833     2576    2              TRUNCATED = %TRUE;
     2834     2577    2              CALL VDG$OCLEAR_LOCATION (RANGE.START)
     2835     2578    2                ALTRET (OCLEAR_LOCATION_FAILED);
     2836     2579    2              CALL VDG$OCOPY_LOCATION (LIMITS.START, RANGE.START)
     2837     2580    2                ALTRET (OCOPY_LOCATION_FAILED);
     2838     2581    2              END;
     2839     2582
     2840     2583    1           CALL VDG$COMPARE_LOCS (RANGE.ENDD, LIMITS.ENDD, RCCL)
     2841     2584    1             ALTRET (COMPARE_LOCS_FAILED);
     2842     2585    2           IF RCCL > %RCCL_EQUAL THEN DO;
     2843     2586    2              CALL VDG$COMPARE_LOCS (RANGE.START, LIMITS.ENDD, RCCL)
     2844     2587    2                ALTRET (COMPARE_LOCS_FAILED);
     2845     2588    3              IF RCCL >= %RCCL_EQUAL THEN DO;
     2846     2589    3                 COMPLETELY_OUTSIDE = %TRUE;
     2847     2590    3                 RETURN;
     2848     2591    3                 END;
     2849     2592    2              TRUNCATED = %TRUE;
     2850     2593    2              CALL VDG$OCLEAR_LOCATION (RANGE.ENDD)
     2851     2594    2                ALTRET (OCLEAR_LOCATION_FAILED);
     2852     2595    2              CALL VDG$OCOPY_LOCATION (LIMITS.ENDD, RANGE.ENDD)
     2853     2596    2                ALTRET (OCOPY_LOCATION_FAILED);
     2854     2597    2              END;
     2855     2598
     2856     2599    1           RETURN;
     2857     2600
     2858     2601
     2859     2602    1   COMPARE_LOCS_FAILED: ;
     2860     2603    1   OCLEAR_LOCATION_FAILED: ;
     2861     2604    1   OCOPY_LOCATION_FAILED: ;
     2862     2605    1           ALTRETURN;
     2863     2606
     2864     2607    1   END VDE$IGUAR_RANGE_IN_RANGE;

PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:332  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IGUAR_RANGE_IN_RANGE.

   Procedure VDE$IGUAR_RANGE_IN_RANGE requires 100 words for executable code.
   Procedure VDE$IGUAR_RANGE_IN_RANGE requires 12 words of local(AUTO) storage.

    No errors detected in file VDE$INTERPRET.:VDA5TSI    .

PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:333  

 Object Unit name= VDE$IGUAR_RANGE_IN_RANGE                   File name= VDE$INTERPRET.:VDA5TOU
 UTS= JUL 04 '97 11:12:33.12 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   100    144  VDE$IGUAR_RANGE_IN_RANGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDE$IGUAR_RANGE_IN_RANGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VDG$COMPARE_LOCS
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:334  


     2755        1        /*T***********************************************************/
     2756        2        /*T*                                                         */
     2757        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2758        4        /*T*                                                         */
     2759        5        /*T***********************************************************/
     2760        6
     2761        7        /*D* NAME:  VDE$IGUAR_RANGE_IN_RANGE
     2762        8            PARAMETERS:
     2763        9                RANGE - The VD$RANGE to check.
     2764       10                LIMITS - The VD$RANGE to check RANGE against.
     2765       11                TRUNCATED - Uninitialized BIT(1) ALIGNED.
     2766       12                COMPLETELY_OUTSIDE - Uninitialized BIT(1) ALIGNED.
     2767       13            INPUT:
     2768       14                None.
     2769       15            OUTPUT:
     2770       16                RANGE may be modified to be within LIMITS' bounds.
     2771       17                If RANGE must be truncated to lie within LIMITS (that is, if
     2772       18                    some part of RANGE's range lies within LIMITS but not all
     2773       19                    of it), TRUNCATED will be set.
     2774       20                If RANGE specifies a range which lies completely outside
     2775       21                    the LIMITS range, COMPLETELY_OUTSIDE will be set.
     2776       22            DESCRIPTION:
     2777       23                Compare RANGE's bounds against LIMITS's bounds.
     2778       24                If any part (but not all) of the RANGE area lies outside
     2779       25                    LIMITS, then adjust the RANGE bounds so that it lies
     2780       26                    entirely within LIMITS, and return TRUNCATED set.
     2781       27                If all of the RANGE area lies outside LIMITS, then return
     2782       28                    COMPLETELY_OUTSIDE set, without adjusting RANGE.
     2783       29        */
     2784       30
     2785       31        VDE$IGUAR_RANGE_IN_RANGE: PROC (RANGE, LIMITS, TRUNCATED,

     31  0 000000   000000 700200 xent  VDE$IGUAR_R* TSX0  ! X66_AUTO_4
         0 000001   000014 000004                    ZERO    12,4

     2786       32                  COMPLETELY_OUTSIDE) ALTRET;
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:335  
     2787       33
     2788       34
     2789       35        %INCLUDE VD_MACROS_M;
     2790     2250        %INCLUDE VD_PERR_C;
     2791     2398
     2792     2399
     2793     2400        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     2794     2469        %VD$RANGE (NAME=LIMITS, STCLASS=PARAM);
     2795     2538    1   DCL TRUNCATED BIT(1) ALIGNED;
     2796     2539    1   DCL COMPLETELY_OUTSIDE BIT(1) ALIGNED;
     2797     2540
     2798     2541
     2799     2542    1   DCL VDG$COMPARE_LOCS    ENTRY (3) ALTRET;
     2800     2543    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     2801     2544    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     2802     2545
     2803     2546
     2804     2547
     2805     2548    1   DCL RCCL SBIN;
     2806     2549
     2807     2550
     2808     2551
     2809     2552    1           TRUNCATED = %FALSE;

   2552  0 000002   200005 470500                    LDP0    @TRUNCATED,,AUTO
         0 000003   000000 450100                    STZ     0,,PR0

     2810     2553    1           COMPLETELY_OUTSIDE = %FALSE;

   2553  0 000004   200006 471500                    LDP1    @COMPLETELY_OUTSIDE,,AUTO
         0 000005   100000 450100                    STZ     0,,PR1

     2811     2554
     2812     2555    1           CALL VDG$COMPARE_LOCS (RANGE.START, LIMITS.START, RCCL)

   2555  0 000006   200007 633500                    EPPR3   RCCL,,AUTO
         0 000007   200012 453500                    STP3    RCCL+3,,AUTO
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:336  
         0 000010   200004 236100                    LDQ     @LIMITS,,AUTO
         0 000011   200003 235100                    LDA     @RANGE,,AUTO
         0 000012   200010 757100                    STAQ    RCCL+1,,AUTO
         0 000013   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000014   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000015   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000016   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2813     2556    1             ALTRET (COMPARE_LOCS_FAILED);
     2814     2557    2           IF RCCL < %RCCL_EQUAL THEN DO;

   2557  0 000017   200007 235100                    LDA     RCCL,,AUTO
         0 000020   000060 605000 0                  TPL     s:2583

     2815     2558    2              CALL VDG$COMPARE_LOCS (RANGE.ENDD, LIMITS.START, RCCL)

   2558  0 000021   200007 630500                    EPPR0   RCCL,,AUTO
         0 000022   200012 450500                    STP0    RCCL+3,,AUTO
         0 000023   200004 236100                    LDQ     @LIMITS,,AUTO
         0 000024   200011 756100                    STQ     RCCL+2,,AUTO
         0 000025   200003 236100                    LDQ     @RANGE,,AUTO
         0 000026   000011 036003                    ADLQ    9,DU
         0 000027   200010 756100                    STQ     RCCL+1,,AUTO
         0 000030   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000031   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000032   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000033   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2816     2559    2                ALTRET (COMPARE_LOCS_FAILED);
     2817     2560    3              IF RCCL <= %RCCL_EQUAL THEN DO;

   2560  0 000034   200007 235100                    LDA     RCCL,,AUTO
         0 000035   000042 605400 0                  TPNZ    s:2576

     2818     2561                      /*
     2819     2562                      *  We're completely outside if RANGE.ENDD =< LIMITS.START.
     2820     2563                      *  The "=" part of the test was added for the following
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:337  
     2821     2564                      *     test case:
     2822     2565                      *         ED 5; ED 4 TH 6
     2823     2566                      *  The evaluation of the "4" was succeeding because
     2824     2567                      *     RANGE was 4,0 - 5,0 and LIMITS was 5,0 - 6,0,
     2825     2568                      *     and RANGE.ENDD = LIMITS.START.  For this case,
     2826     2569                      *     this should be treated as COMPLETELY_OUTSIDE.
     2827     2570                      *  Tentative, tho (as of 10/84); other cases may require
     2828     2571                      *     different behaviour??
     2829     2572                      */
     2830     2573    3                 COMPLETELY_OUTSIDE = %TRUE;

   2573  0 000036   400000 236003                    LDQ     -131072,DU
         0 000037   200006 470500                    LDP0    @COMPLETELY_OUTSIDE,,AUTO
         0 000040   000000 756100                    STQ     0,,PR0

     2831     2574    3                 RETURN;

   2574  0 000041   000000 702200 xent               TSX2  ! X66_ARET

     2832     2575    3                 END;
     2833     2576    2              TRUNCATED = %TRUE;

   2576  0 000042   400000 236003                    LDQ     -131072,DU
         0 000043   200005 470500                    LDP0    @TRUNCATED,,AUTO
         0 000044   000000 756100                    STQ     0,,PR0

     2834     2577    2              CALL VDG$OCLEAR_LOCATION (RANGE.START)

   2577  0 000045   200003 630500                    EPPR0   @RANGE,,AUTO
         0 000046   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000047   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000050   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2835     2578    2                ALTRET (OCLEAR_LOCATION_FAILED);
     2836     2579    2              CALL VDG$OCOPY_LOCATION (LIMITS.START, RANGE.START)

   2579  0 000051   200003 236100                    LDQ     @RANGE,,AUTO
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:338  
         0 000052   200004 235100                    LDA     @LIMITS,,AUTO
         0 000053   200010 757100                    STAQ    RCCL+1,,AUTO
         0 000054   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000055   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000056   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000057   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2837     2580    2                ALTRET (OCOPY_LOCATION_FAILED);
     2838     2581    2              END;

     2839     2582
     2840     2583    1           CALL VDG$COMPARE_LOCS (RANGE.ENDD, LIMITS.ENDD, RCCL)

   2583  0 000060   200007 630500                    EPPR0   RCCL,,AUTO
         0 000061   200012 450500                    STP0    RCCL+3,,AUTO
         0 000062   200004 236100                    LDQ     @LIMITS,,AUTO
         0 000063   000011 036003                    ADLQ    9,DU
         0 000064   200011 756100                    STQ     RCCL+2,,AUTO
         0 000065   200003 236100                    LDQ     @RANGE,,AUTO
         0 000066   000011 036003                    ADLQ    9,DU
         0 000067   200010 756100                    STQ     RCCL+1,,AUTO
         0 000070   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000071   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000072   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000073   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2841     2584    1             ALTRET (COMPARE_LOCS_FAILED);
     2842     2585    2           IF RCCL > %RCCL_EQUAL THEN DO;

   2585  0 000074   200007 235100                    LDA     RCCL,,AUTO
         0 000075   000142 604400 0                  TMOZ    s:2599

     2843     2586    2              CALL VDG$COMPARE_LOCS (RANGE.START, LIMITS.ENDD, RCCL)

   2586  0 000076   200007 630500                    EPPR0   RCCL,,AUTO
         0 000077   200012 450500                    STP0    RCCL+3,,AUTO
         0 000100   200004 236100                    LDQ     @LIMITS,,AUTO
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:339  
         0 000101   000011 036003                    ADLQ    9,DU
         0 000102   200003 235100                    LDA     @RANGE,,AUTO
         0 000103   200010 757100                    STAQ    RCCL+1,,AUTO
         0 000104   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000105   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000106   000000 701000 xent               TSX1    VDG$COMPARE_LOCS
         0 000107   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2844     2587    2                ALTRET (COMPARE_LOCS_FAILED);
     2845     2588    3              IF RCCL >= %RCCL_EQUAL THEN DO;

   2588  0 000110   200007 235100                    LDA     RCCL,,AUTO
         0 000111   000116 604000 0                  TMI     s:2592

     2846     2589    3                 COMPLETELY_OUTSIDE = %TRUE;

   2589  0 000112   400000 236003                    LDQ     -131072,DU
         0 000113   200006 470500                    LDP0    @COMPLETELY_OUTSIDE,,AUTO
         0 000114   000000 756100                    STQ     0,,PR0

     2847     2590    3                 RETURN;

   2590  0 000115   000000 702200 xent               TSX2  ! X66_ARET

     2848     2591    3                 END;
     2849     2592    2              TRUNCATED = %TRUE;

   2592  0 000116   400000 236003                    LDQ     -131072,DU
         0 000117   200005 470500                    LDP0    @TRUNCATED,,AUTO
         0 000120   000000 756100                    STQ     0,,PR0

     2850     2593    2              CALL VDG$OCLEAR_LOCATION (RANGE.ENDD)

   2593  0 000121   200003 236100                    LDQ     @RANGE,,AUTO
         0 000122   000011 036003                    ADLQ    9,DU
         0 000123   200010 756100                    STQ     RCCL+1,,AUTO
         0 000124   200010 630500                    EPPR0   RCCL+1,,AUTO
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:340  
         0 000125   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000126   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000127   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2851     2594    2                ALTRET (OCLEAR_LOCATION_FAILED);
     2852     2595    2              CALL VDG$OCOPY_LOCATION (LIMITS.ENDD, RANGE.ENDD)

   2595  0 000130   200003 236100                    LDQ     @RANGE,,AUTO
         0 000131   000011 036003                    ADLQ    9,DU
         0 000132   200011 756100                    STQ     RCCL+2,,AUTO
         0 000133   200004 236100                    LDQ     @LIMITS,,AUTO
         0 000134   000011 036003                    ADLQ    9,DU
         0 000135   200010 756100                    STQ     RCCL+1,,AUTO
         0 000136   200010 630500                    EPPR0   RCCL+1,,AUTO
         0 000137   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000140   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000141   000143 702000 0                  TSX2    COMPARE_LOCS_FAILED

     2853     2596    2                ALTRET (OCOPY_LOCATION_FAILED);
     2854     2597    2              END;

     2855     2598
     2856     2599    1           RETURN;

   2599  0 000142   000000 702200 xent               TSX2  ! X66_ARET

   2594  0 000143                       COMPARE_LOC* null
   2594  0 000143                       OCLEAR_LOCA* null
   2594  0 000143                       OCOPY_LOCAT* null
     2857     2600
     2858     2601
     2859     2602    1   COMPARE_LOCS_FAILED: ;
     2860     2603    1   OCLEAR_LOCATION_FAILED: ;
     2861     2604    1   OCOPY_LOCATION_FAILED: ;
     2862     2605    1           ALTRETURN;

   2605  0 000143   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:341  
     2863     2606
     2864     2607    1   END VDE$IGUAR_RANGE_IN_RANGE;

PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:342  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDE$IGUAR_RANGE_IN_RANGE.
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:343  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @COMPLETELY_OUTSIDE        4-0-0/w PTR         r     1 @LIMITS
     3-0-0/w PTR         r     1 @RANGE                     5-0-0/w PTR         r     1 @TRUNCATED
    *0-0-0/w BIT         r     1 COMPLETELY_OUTSIDE        *0-0-0/w STRC(648)   r     1 LIMITS
    *0-0-0/w STRC(648)   r     1 RANGE                      7-0-0/w SBIN        r     1 RCCL
    *0-0-0/w BIT         r     1 TRUNCATED


   Procedure VDE$IGUAR_RANGE_IN_RANGE requires 100 words for executable code.
   Procedure VDE$IGUAR_RANGE_IN_RANGE requires 12 words of local(AUTO) storage.

    No errors detected in file VDE$INTERPRET.:VDA5TSI    .
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:344  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VDE$IGUAR_RANGE_IN_RANGE File=VDE$INTERPRET.:VDA5TSI          FRI 07/04/97 11:12 Page:345  
          MINI XREF LISTING

COMPARE_LOCS_FAILED
      2594**LABEL    2555--CALLALT  2558--CALLALT  2583--CALLALT  2586--CALLALT
COMPLETELY_OUTSIDE
      2539**DCL        31--PROC     2553<<ASSIGN   2573<<ASSIGN   2589<<ASSIGN
LIMITS
      2477**DCL        31--PROC
LIMITS.ENDD
      2519**DCL      2583<>CALL     2586<>CALL     2595<>CALL
LIMITS.START
      2491**DCL      2555<>CALL     2558<>CALL     2579<>CALL
OCLEAR_LOCATION_FAILED
      2594**LABEL    2577--CALLALT  2593--CALLALT
OCOPY_LOCATION_FAILED
      2594**LABEL    2579--CALLALT  2595--CALLALT
RANGE
      2408**DCL        31--PROC
RANGE.ENDD
      2450**DCL      2558<>CALL     2583<>CALL     2593<>CALL     2595<>CALL
RANGE.START
      2422**DCL      2555<>CALL     2577<>CALL     2579<>CALL     2586<>CALL
RCCL
      2548**DCL      2555<>CALL     2557>>IF       2558<>CALL     2560>>IF       2583<>CALL     2585>>IF
      2586<>CALL     2588>>IF
TRUNCATED
      2538**DCL        31--PROC     2552<<ASSIGN   2576<<ASSIGN   2592<<ASSIGN
VDG$COMPARE_LOCS
      2542**DCL-ENT  2555--CALL     2558--CALL     2583--CALL     2586--CALL
VDG$OCLEAR_LOCATION
      2543**DCL-ENT  2577--CALL     2593--CALL
VDG$OCOPY_LOCATION
      2544**DCL-ENT  2579--CALL     2595--CALL
