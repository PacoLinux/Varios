VERSION A05

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:1    
        1        1        /*M* VDA$FILE - Accessor operations at file-level */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$FILE
       12       12            PURPOSE: Accessor operations at file-level.
       13       13            DESCRIPTION:
       14       14                This module contains three external routines:
       15       15                VDA$FOPEN - Will open a stream's file level to a file.
       16       16                VDA$FCLOSE - Will close a stream's file level.
       17       17                VDA$FDETACH - Will detach a stream from its port. If
       18       18                    appropriate, will free the port.
       19       19                VDA$FREKEY - Rekeys an entire edit-keyed file.
       20       20        */
       21       21
       22       22        /*D* NAME: VDA$FOPEN
       23       23            PARAMETERS:
       24       24                STREAM - VD$STREAM to open.  If this stream is currently open,
       25       25                    we'll first close it.  The stream and its attached port
       26       26                    may already be positioned to the file you wish to access
       27       27                    (via a previous call to VDA$FOPEN), or you may use the
       28       28                    positioning parameters ABSOLUTE and RELATIVE in this call.
       29       29                    The port attached to STREAM may or may not be open to the
       30       30                    requested file already.
       31       31                ABSOLUTE - Optional VD$KEY specifying the absolute location
       32       32                    file key) to position to first.  Must point to a remote
       33       33                    VD$FILE_KEY.
       34       34                    Omit ABSOLUTE for relative-only positioning.
       35       35        *N**N**N*   If ABSOLUTE=%CLEAR, we'll position to the first file in the
       36       36        *N**N**N*       the user's file management directory.
       37       37                    If ABSOLUTE's VD$FILE_KEY.DCB is non-0, then this DCB is
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:2    
       38       38                        to be used to access the file.  The DCB should already
       39       39                        be !SET to the file to access.  We'll look for a port
       40       40                        already open to this DCB; if none, we'll build a port
       41       41                        and attach this DCB to it.
       42       42                    Else VD$FILE_KEY must contain either an M$FID'd fid, or an
       43       43                        internal file name (in VD$FILE_KEY.UNIQUE.FNAME).
       44       44                        We'll find and attach the appropriate port.
       45       45
       46       46                    The general form for the name part of predefined and
       47       47                        Scratch file keys is:
       48       48                            x6Edit_<dir>_<file>
       49       49                    where:
       50       50                    "x" is the file storage class of the file.  This is a single char,
       51       51                        and comes from VD$DIR_NODE.FILE_STCLASS (settable by
       52       52                        the user).  It is one of the FSTCL_ values, and
       53       53                        specifies where to look for the file.  If the file
       54       54                        storage class for a directory is FSTCL_MIGRATABLE or
       55       55                        FSTCL_EXTERNAL, then the user can't access any external
       56       56                        file which starts with "x6Edit_<dir>".
       57       57                    <dir> is the directory key:  a DK_ value.  There are
       58       58                        five directories:  History, Names, Scratch, Structures,
       59       59                        and Windows.
       60       60                    _<file> is optional, and makes the entire file name unique
       61       61                        for a specific file within the directory.
       62       62                RELATIVE - Signed number of files to move relative to either
       63       63                    the stream's current file-level position or, if given, ABSOLUTE.
       64       64                    RELATIVE < 0 is not legal.
       65       65                OPTIONS - Optional VD$ACCESS_OPTIONS.  If omitted, the file
       66       66                    isn't opened.  If given, then:
       67       67                    .STRUCTURE$ must point to the level 1 VD$FILE_NODE for
       68       68                        the accessor Structure to use.  The Structure specifies
       69       69                        not only the level structure of the physical file,
       70       70                        but also the organization, Key-type, and Spec-type
       71       71                        of the file.  Note that:
       72       72                        o When opening an existing file, if the user specifies
       73       73                            the External structure, s/he can access any type of
       74       74                            external file.  This is because the External structure
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:3    
       75       75                            doesn't have org or Key-type values in it, so we use
       76       76                            the ones from the actual file.
       77       77                        o When creating a file, the user can use either:
       78       78                            o the External structure, in which case we'll use
       79       79                                default values for org, Key-type, and Spec-type; or
       80       80                            o one of the derivative structures which specify org,
       81       81                                Key-type, and Spec-type (Consec, Names, etc.)
       82       82                        o If the user opens an existing file with a structure
       83       83                            which specifies org, Key-type, or Spec-type, and the
       84       84                            actual file's values differ from those of the structure,
       85       85                            we'll report an error and abort the open.
       86       86                    .EXIST - An EX_ value, specifying the "existence" option
       87       87                        to be applied to the file.
       88       88                    .PROTECT - The "protect" option to be applied to the file:
       89       89                        either %PROTECT (read-only) or %DONT_PROTECT.
       90       90                        Note the rough granularity of this option:  it applies
       91       91                        to all levels of the file structure and to all node
       92       92                        components at the levels.
       93       93                        Basically, this is like a mask of all 1's that we'll
       94       94                        be OR'ing with the protection forced by the Structure,
       95       95                        by file management (for external files), or by the
       96       96                        filenode itself (for internal files).
       97       97            INPUT:
       98       98                VD_ACCESSOR_PRIV - If we're opening/creating an internal file
       99       99                    and we're not doing it on behalf of the user, but
      100      100                    rather are accessing an internally-maintained
      101      101                    file (e.g., Scratch files, etc.), then
      102      102                    VD_ACCESSOR_PRIV must have all bits set (%NAC_ALL_BITS).
      103      103            OUTPUT:
      104      104                PORT.STRUCTURE will be set appropriately.
      105      105                STREAM.FILE_KEY will be set:
      106      106                    If .FILE_KEY is %CLEAR, the requested file doesn't exist,
      107      107                        and there are no files after it in the specified
      108      108                        directory.  This will only happen when RELATIVE > 0.
      109      109                        (When RELATIVE=0, positioning to a non-existent file just
      110      110                        loads the file key into VD$STREAM.FILE_KEY
      111      111                        and leaves the stream closed.)
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:4    
      112      112                    If .FILE_KEY is not %CLEAR, then it specifies the key of
      113      113                        the requested file.  Note that if ABSOLUTE contained
      114      114                        a .DCB# at entry, we'll fill in the fid-part of the
      115      115                        VD$FILE_KEY from the DCB, in both the stream's
      116      116                        VD$FILE_KEY and in ABSOLUTE's VD$FILE_KEY.
      117      117                If OPTIONS is included in the parameters:
      118      118                    The stream will be open to the file, but will remain
      119      119                        "unpositioned" (no lower-level keys in STREAM.CURRENT.
      120      120                        If the file doesn't exist, an error will be returned.
      121      121                    VD$PORT.EXIST and all STREAM.PROTECTs will be set
      122      122                        from the call parameters.  The VD$PORT.LEVEL.ORGs,
      123      123                        VD$PORT.LEVEL.KEY_TYPEs, VD$PORT.LEVEL.SPEC_TYPEs, and
      124      124                        STREAM.PROTECTs will be set based on the specific
      125      125                        file/structure opened and the PROTECT value passed.
      126      126                VD$STREAM.NEXT may be cleared.
      127      127            DESCRIPTION:
      128      128                Load ABSOLUTE's file key into .FILE_KEY and attach
      129      129                    the stream to an appropriate port.
      130      130                If RELATIVE is > 0, skip that many files in the file directory.
      131      131                In the above, if the stream is already open and we need to
      132      132                    position to a different file than the current one, first
      133      133                    close the stream.
      134      134
      135      135                If OPTIONS wasn't passed, return:  we've positioned to the
      136      136                    requested file.
      137      137                If the port is already open to the requested file, then
      138      138                    the request can't specify EXIST=NEW; if so, reject the open.
      139      139                    Also compare the protection options:  if the request says
      140      140                    %DONT_PROTECT for an external file, then we can't use a port
      141      141                    which is already open to a DCB for input-only.
      142      142                If the current key at the file level is of a non-existent
      143      143                    file and EXIST = %EX_NEW or %EX_ANY, then this OPEN call
      144      144                    will create a new file.
      145      145                    Note:  to create a predefined file, EXIST must be %EX_NEW.
      146      146                If the port isn't open yet, open it.  Merge the info from the
      147      147                    Structure into the VD$PORT.
      148      148                Merge the PROTECT parameter with the protect flags for each level
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:5    
      149      149                    of the Structure definition, and if the file is
      150      150                    external, with the open-mode of the DCB, into the VD$STREAM.
      151      151        */
      152      152
      153      153        VDA$FOPEN: PROC (STREAM, ABSOLUTE, RELATIVE, OPTIONS) ALTRET;
      154      154
      155      155        %INCLUDE VD_MACROS_M;
      156     2370        %INCLUDE VD_PERR_C;
      157     2518        %INCLUDE CP_6;
      158     2599        %INCLUDE CP_6_SUBS;
      159     3139        %INCLUDE B_ERRORS_C;
      160     4265        %INCLUDE B$JIT;
      161     4555
      162     4556
      163     4557                %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      164     4663                %VD$KEY (NAME=ABSOLUTE, STCLASS=PARAM);
      165     4677    1   DCL RELATIVE SBIN;
      166     4678        %VD$ACCESS_OPTIONS (NAME=OPTIONS, STCLASS=PARAM);
      167     4707
      168     4708
      169     4709    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
      170     4710    1   DCL VDA$FDETACH         ENTRY (1) ALTRET;
      171     4711    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      172     4712    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      173     4713    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      174     4714    1   DCL VDG$OALLOC_DCB      ENTRY (1) ALTRET;
      175     4715    1   DCL VDG$OFREE_DCB       ENTRY (1) ALTRET;
      176     4716    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
      177     4717    1   DCL VDG$ESCREECH        ENTRY (3);
      178     4718    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      179     4719    1   DCL VDG$MACC_FOPEN      ENTRY (4);
      180     4720    1   DCL VDG$MACC_FOPEN_OPEN ENTRY (2);
      181     4721    1   DCL VDG$MACC_RETURN     ENTRY (1);
      182     4722    1   DCL XSF$LOCCODT         ENTRY (2) ALTRET;
      183     4723
      184     4724
      185     4725
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:6    
      186     4726        %VD_6E (STCLASS=SYMREF);
      187     4762    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      188     4763              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      189     4777        %VD$BUFFER (NAME=VD_$FILETYPE, STCLASS=SYMREF);
      190     4835        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      191     4880        %VD$KEY_NUMBER (NAME=VD_KEY_FIRST_CONSEC_REC, STCLASS=SYMREF);
      192     4895    1   DCL B$TCB$ PTR SYMREF;
      193     4896    1   DCL B$JIT$ PTR SYMREF;
      194     4897
      195     4898
      196     4899
      197     4900    1   DCL LEVEL SBIN;
      198     4901    1   DCL VD_ERR$ PTR;
      199     4902    1   DCL VD_NUMBER$ PTR;
      200     4903
      201     4904
      202     4905        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      203     5003        %VD$FILE_NODE;
      204     5096        %VD$TEXTC_REMOTE;
      205     5157        %VD$FILE_KEY;
      206     5206        %VD$BUFFER;
      207     5264        %VD$BUFFER_HEADER;
      208     5300        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      209     5353        %VD$NUMBER (NAME=VD$NUMBER, DIM="(0:2)", STCLASS="BASED(VD_NUMBER$)");
      210     5398    1   DCL SBIN$WORD SBIN BASED;
      211     5399        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      212     5402        %B$ALT;
      213     5410
      214     5411
      215     5412
      216     5413    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
      217     5414    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
      218     5415    2              ALTRETURN;
      219     5416    2              END;
      220     5417    1           IF VD_$$MON_ACC.V# > 0 THEN
      221     5418    1              CALL VDG$MACC_FOPEN (STREAM, ABSOLUTE, RELATIVE, OPTIONS);
      222     5419
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:7    
      223     5420    1           IF RELATIVE < 0 THEN
      224     5421    1              CALL VDG$ESCREECH (RELATIVE);
      225     5422
      226     5423    1           CALL FILE_LEVEL_LOCATION
      227     5424    1             ALTRET (FILE_LEVEL_LOCATION_FAILED);
      228     5425
      229     5426    2           IF ADDR(OPTIONS) ~= ADDR(NIL) THEN DO;
      230     5427    2              CALL FILE_LEVEL_OPEN
      231     5428    2                ALTRET (FILE_LEVEL_OPEN_FAILED);
      232     5429    2              END;
      233     5430
      234     5431    1           IF VD_$$MON_ACC.V# > 0 THEN
      235     5432    1              CALL VDG$MACC_RETURN (STREAM);
      236     5433    1           RETURN;
      237     5434
      238     5435
      239     5436    1   FILE_LEVEL_LOCATION_FAILED: ;
      240     5437    1   FILE_LEVEL_OPEN_FAILED: ;
      241     5438    1           ALTRETURN;
      242     5439
      243     5440                %BOX (TITLE=FILE_LEVEL_LOCATION, PAGE=YES);
              5448    1
              5452    1   /***************************************************************************
              5454    1    *                                                                         *
              5458    1            *                            FILE_LEVEL_LOCATION                          *
              5460    1            *                                                                         *
              5462    1           ***************************************************************************/

      244     5466
      245     5467        /*I* NAME: FILE_LEVEL_LOCATION
      246     5468            PARAMETERS:
      247     5469                None.
      248     5470            INPUT:
      249     5471                STREAM - The VD$STREAM to use.
      250     5472                ABSOLUTE, RELATIVE - Same as for main routine.
      251     5473                PORT - The VD$PORT attached to STREAM.
      252     5474            OUTPUT:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:8    
      253     5475                STREAM.FILE_KEY will contain the requested file key;
      254     5476                    STREAM will be attached to a port which is also positioned
      255     5477                    to the requested file key.  The stream and port may or
      256     5478                    may not be open to the file, and if open, will be positioned
      257     5479                    to an arbitrary location within the file.
      258     5480                If ABSOLUTE's VD$FILE_KEY.DCB# was non-0 at entry, then
      259     5481                    ABSOLUTE's, STREAM.FILE_KEY's, and PORT.FILE_KEY's
      260     5482                    VD$FILE_ABSOLUTE.UNIQUE, .ASN, .PSN, and .RES will be filled
      261     5483                    in from the dcb.  Also, ABSOLUTE's VD$FILE_KEY.DCB# will be
      262     5484                    zeroed.
      263     5485            DESCRIPTION:
      264     5486                Position the stream to the requested file, and attach it to
      265     5487                an appropriate port:
      266     5488
      267     5489                If RELATIVE=0, the stream may already be positioned to
      268     5490                    ABSOLUTE's file and the port for that file.  If so, return.
      269     5491                If the stream is currently open, close it.  If ABSOLUTE isn't
      270     5492                    %CLEAR, load it into current.
      271     5493                If RELATIVE=0:
      272     5494                    Call FIND_PORT to find/build a port open to ABSOLUTE.
      273     5495                    Return.
      274     5496
      275     5497                So, RELATIVE is > 0:
      276     5498                    If this stream isn't the sole referencer of it's port, or if
      277     5499                        it doesn't have a port, call BUILD_PORT to get
      278     5500                        an unused port.  We need an unused port so we can do
      279     5501                        NXTF opens on it for the relative movement.
      280     5502                    Call FILE_LEVEL_OPEN_NXTF, RELATIVE times.  If we hit the end
      281     5503                        of the directory, clear STREAM.FILE_KEY and return.
      282     5504                        (It's ok to leave a closed port attached.)
      283     5505                    If we find the requested file, call FIND_PORT to see if there
      284     5506                        are any other ports already open to the file.  If so,
      285     5507                        FIND_PORT will detach our current port and reattach us
      286     5508                        to the already-open one.
      287     5509                    Return.
      288     5510        */
      289     5511
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:9    
      290     5512    1   FILE_LEVEL_LOCATION: PROC ALTRET;
      291     5513
      292     5514
      293     5515    2   DCL I SBIN;
      294     5516    2   DCL ABS_KEY$ PTR;
      295     5517    2   DCL CANDIDATE_KEY$ PTR;
      296     5518    2   DCL DO_THE_CALL BIT(1) ALIGNED;
      297     5519
      298     5520
      299     5521        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      300     5544        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CANDIDATE_KEY$)");
      301     5567
      302     5568
      303     5569
      304     5570    3           IF ABSOLUTE = %CLEAR THEN DO;
      305     5571    3              IF RELATIVE = 0 THEN
      306     5572    3                 RETURN;   /* No positioning requested: return */
      307     5573    3              END;
      308     5574    3           ELSE DO;
      309     5575                   %GETKEY (KEY=ABSOLUTE, PTR=ABS_KEY$);
      310     5585
      311     5586    3              IF RELATIVE = 0
      312     5587    4                AND STREAM.FILE_KEY ~= %CLEAR THEN DO;
      313     5588                      %GETKEY (KEY=STREAM.FILE_KEY, PTR=CANDIDATE_KEY$);
      314     5598    5                 IF ABS$KEY.BYTES = CAND$KEY.BYTES THEN DO;
      315     5599                         /* We're already at requested key:  just return */
      316     5600    5                    RETURN;
      317     5601    5                    END;
      318     5602    4                 END;
      319     5603    3              END;
      320     5604
      321     5605    2           IF STREAM.PORT$ ~= ADDR(NIL) THEN
      322     5606    3              IF PORT.EXIST# ~= 0 THEN DO;
      323     5607    3                 CALL VDA$FCLOSE (STREAM)
      324     5608    3                   ALTRET (FCLOSE_FAILED);
      325     5609    3                 END;
      326     5610
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:10   
      327     5611                %CLEARKEY (KEY=STREAM.FILE_KEY);
      328     5621
      329     5622    3           IF RELATIVE = 0 THEN DO;
      330     5623    3              CALL FIND_PORT (ABSOLUTE)
      331     5624    3                ALTRET (FIND_PORT_FAILED);
      332     5625    3              STREAM.FILE_KEY = PORT.FILE_KEY;
      333     5626    4              IF PORT.FILE_KEY.REP# = %REP_REMOTE THEN DO;
      334     5627    4                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,
      335     5628    4                   STREAM.FILE_KEY.V$)
      336     5629    4                   ALTRET (OCOPY_FAILED);
      337     5630    4                 END;
      338     5631    3              END;
      339     5632
      340     5633    2           ELSE
      341     5634    3   REL_MOVES: DO;
      342     5635    3              DO_THE_CALL = %TRUE; /* Assume we need to find an unused port */
      343     5636    4              IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;
      344     5637    4                 IF PORT.REFS# < 2 THEN
      345     5638    4                    DO_THE_CALL = %FALSE;
      346     5639    4                 END;
      347     5640    4              IF DO_THE_CALL THEN DO;
      348     5641    4                 CALL BUILD_PORT (ABSOLUTE)
      349     5642    4                   ALTRET (BUILD_PORT_FAILED);
      350     5643    4                 END;
      351     5644    4              ELSE DO;
      352     5645                      %CLEARKEY (KEY=PORT.FILE_KEY);
      353     5655    4                 PORT.FILE_KEY = ABSOLUTE;
      354     5656    5                 IF ABSOLUTE.REP# = %REP_REMOTE THEN DO;
      355     5657    5                    CALL VDG$OCOPY (ABSOLUTE.V$ -> VD$FILE_KEY,
      356     5658    5                      PORT.FILE_KEY.V$)
      357     5659    5                      ALTRET (OCOPY_FAILED);
      358     5660    5                    END;
      359     5661    4                 END;
      360     5662
      361     5663    3              I = RELATIVE;
      362     5664    4              DO WHILE I > 0 AND PORT.FILE_KEY ~= %CLEAR;
      363     5665        /*N*          CALL FILE_LEVEL_OPEN_NXTF (PORT)                      */
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:11   
      364     5666        /*N*            ALTRET (FILE_LEVEL_OPEN_NXTF_FAILED);               */
      365     5667    4                 I = I - 1;
      366     5668    4                 END;
      367     5669    4              IF PORT.FILE_KEY ~= %CLEAR THEN DO;
      368     5670                      /* Find any other port which may already be open to this file */
      369     5671    4                 CALL FIND_PORT (PORT.FILE_KEY)
      370     5672    4                   ALTRET (FIND_PORT_FAILED);
      371     5673    4                 END;
      372     5674
      373     5675    3              STREAM.FILE_KEY = PORT.FILE_KEY;
      374     5676    4              IF PORT.FILE_KEY.REP# = %REP_REMOTE THEN DO;
      375     5677    4                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,
      376     5678    4                   STREAM.FILE_KEY.V$)
      377     5679    4                   ALTRET (OCOPY_FAILED);
      378     5680    4                 END;
      379     5681    3              END REL_MOVES;
      380     5682
      381     5683    2           RETURN;
      382     5684
      383     5685
      384     5686    2   FCLOSE_FAILED: ;
      385     5687    2   FIND_PORT_FAILED: ;
      386     5688    2   BUILD_PORT_FAILED: ;
      387     5689    2   OCOPY_FAILED: ;
      388     5690        /*N* FILE_LEVEL_OPEN_NXTF_FAILED: ; */
      389     5691    2           ALTRETURN;
      390     5692
      391     5693        %BOX (TITLE=FIND_PORT, PAGE=YES);
              5701    2
              5705    2   /***************************************************************************
              5707    2    *                                                                         *
              5711    2            *                                 FIND_PORT                               *
              5713    2            *                                                                         *
              5715    2           ***************************************************************************/

      392     5719
      393     5720        /*I** NAME: FIND_PORT
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:12   
      394     5721            PARAMETERS:
      395     5722                KEY - VD$KEY for file key to look for.  This must point to
      396     5723                    a remote VD$FILE_KEY.  If VD$FILE_KEY has a non-0 .DCB,
      397     5724                    we'll find a port attached to that DCB.
      398     5725            INPUT:
      399     5726                STREAM - The VD$STREAM to find a port for; we only use STREAM.PORT$.
      400     5727                VD_6E.PORT_HEAD$, .PORT_TAIL$ - Ptrs to head and tail of
      401     5728                    current chain of VD$PORTs.
      402     5729            OUTPUT:
      403     5730                STREAM.PORT$ will point to the port which is open to KEY.  This may
      404     5731                    be a different port than was passed via STREAM.PORT$ at entry;
      405     5732                    if so, the old port's ref count will be decremented (and if
      406     5733                    no other streams ref it, it will be freed), and the new
      407     5734                    port's ref count will be incremented; this reflects the
      408     5735                    detachment of the stream from the old port and the
      409     5736                    reattachment of the stream to the new port.
      410     5737                If KEY's VD$FILE_KEY.DCB# was non-0 at entry, then
      411     5738                    KEY's and PORT.FILE_KEY's VD$FILE_KEY.UNIQUE, .ASN, .PSN,
      412     5739                    and .RES will be filled in from the dcb.  Also, KEY's
      413     5740                    VD$FILE_KEY.DCB# will be zeroed.
      414     5741            DESCRIPTION:
      415     5742                If STREAM.PORT$ is nil, look for any port open to KEY; if none,
      416     5743                    or if KEY's VD$FILE_KEY.DCB# is set, build a new port for KEY.
      417     5744                If STREAM.PORT$ is not nil, look for any port open to KEY, but
      418     5745                    consider STREAM.PORT$->VD$PORT last.  If we find any other
      419     5746                    port already open to KEY, we assume caller wants to detach
      420     5747                    STREAM from PORT$; we'll decrement the port's ref count
      421     5748                    and close and deallocate it if appropriate (ref count = 0).
      422     5749                    If no port, not even STREAM.PORT$, is already open to KEY,
      423     5750                    we'll detach STREAM from it, allocate a new VD$PORT, and
      424     5751                    attach STREAM to the new port.
      425     5752        */
      426     5753
      427     5754    2   FIND_PORT: PROC (KEY) ALTRET;
      428     5755
      429     5756        %VD$KEY (NAME=KEY, STCLASS=PARAM);
      430     5770
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:13   
      431     5771
      432     5772    3   DCL GIVEN_KEY$ PTR;
      433     5773    3   DCL CAND_PORT$ PTR;
      434     5774    3   DCL CAND_KEY$ PTR;
      435     5775
      436     5776
      437     5777        %VD$TEXTC (NAME=GIVEN$KEY, STCLASS="BASED(GIVEN_KEY$)");
      438     5800        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(KEY.V$)");
      439     5849        %VD$PORT (NAME=CAND$PORT, STCLASS="BASED(CAND_PORT$)");
      440     5947        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      441     5970
      442     5971
      443     5972
      444     5973    3           IF KEY.REP# ~= %REP_REMOTE THEN
      445     5974    3              CALL VDG$ESCREECH (KEY.REP#);
      446     5975    3           GIVEN_KEY$ = ADDR(FILE$KEY.LENGTH#);
      447     5976
      448     5977    3           IF FILE$KEY.DCB# = 0 THEN
      449     5978    4   FIND_NAMED_FILE: DO;
      450     5979    4              CAND_PORT$ = VD_6E.PORT_HEAD$;
      451     5980    4   SEARCH_PORTS:
      452     5981    5              DO WHILE CAND_PORT$ ~= ADDR(NIL);
      453     5982    6                 IF CAND_PORT$ ~= STREAM.PORT$ THEN DO;
      454     5983                         %GETKEY (KEY=CAND$PORT.FILE_KEY, PTR=CAND_KEY$);
      455     5993    6                    IF GIVEN$KEY.BYTES = CAND$KEY.BYTES THEN
      456     5994    6                       EXIT SEARCH_PORTS;
      457     5995    6                    CAND_PORT$ = CAND$PORT.FLINK$;
      458     5996    6                    END;
      459     5997    5                 END SEARCH_PORTS;
      460     5998
      461     5999    4              IF CAND_PORT$ ~= ADDR(NIL) THEN
      462     6000    5   FOUND_MATCH: DO;
      463     6001    6                 IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;
      464     6002    6                    CALL VDA$FDETACH (STREAM)
      465     6003    6                      ALTRET (FDETACH_FAILED);
      466     6004    6                    END;
      467     6005    5                 STREAM.PORT$ = CAND_PORT$;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:14   
      468     6006    5                 CAND$PORT.REFS# = CAND$PORT.REFS# + 1;
      469     6007    5                 END FOUND_MATCH;
      470     6008    4              ELSE IF STREAM.PORT$ ~= ADDR(NIL) THEN
      471     6009    5   TEST_ORIGINAL_PORT: DO;
      472     6010                         %GETKEY (KEY=STREAM.PORT$->CAND$PORT.FILE_KEY,
      473     6011                         PTR=CAND_KEY$);
      474     6021    6                    IF GIVEN$KEY.BYTES ~= CAND$KEY.BYTES THEN DO;
      475     6022                            /* Force STREAM.PORT$ to NIL */
      476     6023    6                       CALL VDA$FDETACH (STREAM)
      477     6024    6                         ALTRET (FDETACH_FAILED);
      478     6025    6                       END;
      479     6026    5                    END TEST_ORIGINAL_PORT;
      480     6027    4              END FIND_NAMED_FILE;
      481     6028
      482     6029    3           IF FILE$KEY.DCB# ~= 0
      483     6030    4             OR STREAM.PORT$ = ADDR(NIL) THEN DO;
      484     6031                   /*
      485     6032                   *  Specific DCB requested, or no match found:
      486     6033                   *    build a new port.
      487     6034                   */
      488     6035    4              CALL BUILD_PORT (KEY)
      489     6036    4                ALTRET (BUILD_PORT_FAILED);
      490     6037    4              END;
      491     6038    4           ELSE DO;
      492     6039                   %INCREMENT (INDX=%STG_OPEN_PORT_SHARED);
      493     6042    4              END;
      494     6043
      495     6044    3           RETURN;
      496     6045
      497     6046
      498     6047
      499     6048    3   FDETACH_FAILED: ;
      500     6049    3   BUILD_PORT_FAILED: ;
      501     6050    3           ALTRETURN;
      502     6051
      503     6052    3   END FIND_PORT;
      504     6053
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:15   
      505     6054        %BOX (TITLE=BUILD_PORT, PAGE=YES);
              6062    3
              6066    3   /***************************************************************************
              6068    3    *                                                                         *
              6072    3            *                                 BUILD_PORT                              *
              6074    3            *                                                                         *
              6076    3           ***************************************************************************/

      506     6080
      507     6081        /*I** NAME: BUILD_PORT
      508     6082            PARAMETERS:
      509     6083                KEY - VD$KEY to build port for.  This must point to
      510     6084                    a remote VD$FILE_KEY.  If VD$FILE_KEY has a non-0 .DCB,
      511     6085                    we'll attach the port to that DCB; the VD$FILE_KEY's
      512     6086                    fid parts should match those of the DCB, however,
      513     6087                    they're ignored, and the port's key is built from the
      514     6088                    DCB and JIT.
      515     6089            INPUT:
      516     6090                STREAM - The VD$STREAM to build a port for; we only use STREAM.PORT$.
      517     6091                VD_6E.PORT_HEAD$, .PORT_TAIL$ - Ptrs to head and tail of
      518     6092                    current chain of VD$PORTs.
      519     6093            OUTPUT:
      520     6094                STREAM.PORT$ will point to a new port with file-level key KEY.
      521     6095                    If a port was passed via STREAM.PORT$ at entry,
      522     6096                    that port's ref count will be decremented (and if
      523     6097                    no other streams ref it, it will be freed), and the new
      524     6098                    port's ref count will be incremented; this reflects the
      525     6099                    detachment of the stream from the old port and the
      526     6100                    reattachment of the stream to the new port.
      527     6101            DESCRIPTION:
      528     6102                If STREAM.PORT$ is nil, just allocate a new port for KEY.
      529     6103                If STREAM.PORT$ is not nil, first detach STREAM from PORT$:
      530     6104                    decrement the port's ref count and close and deallocate it
      531     6105                    if appropriate.  Then we'll allocate a new VD$PORT for KEY,
      532     6106                    and attach STREAM to it.
      533     6107        */
      534     6108
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:16   
      535     6109    2   BUILD_PORT: PROC (KEY) ALTRET;
      536     6110
      537     6111        %VD$KEY (NAME=KEY, STCLASS=PARAM);
      538     6125
      539     6126
      540     6127    3   DCL NEW_PORT$ PTR;
      541     6128    3   DCL REQ_DCB$ PTR;
      542     6129    3   DCL FILE_KEY$ PTR;
      543     6130
      544     6131
      545     6132        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
      546     6181        %VD$PORT (NAME=NEW$PORT, STCLASS="BASED(NEW_PORT$)");
      547     6279        %F$DCB (DCBN=REQ$DCB, STCLASS="BASED(REQ_DCB$)");
      548     6336        %VD$TEXTC_REMOTE;
      549     6397
      550     6398
      551     6399
      552     6400    4           IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;
      553     6401    4              CALL VDA$FDETACH (STREAM)
      554     6402    4                ALTRET (FDETACH_FAILED);
      555     6403    4              END;
      556     6404
      557     6405    3           CALL VDG$OALLOC (%CLS_PORT, STREAM.PORT$)
      558     6406    3             ALTRET (OALLOC_FAILED);
      559     6407    3           NEW_PORT$ = STREAM.PORT$;
      560     6408    3           FILE_KEY$ = KEY.V$;
      561     6409
      562     6410    3           NEW$PORT.REFS# = 1;
      563     6411    4           IF FILE$KEY.DCB# ~= 0 THEN DO;
      564     6412    4              NEW$PORT.DCB# = FILE$KEY.DCB#;
      565     6413    4              REQ_DCB$ = DCBADDR(FILE$KEY.DCB#);
      566     6414                   /* Reload VD$FILE_KEY fields from DCB */
      567     6415    4              FILE$KEY.UNIQUE.ACCT = REQ$DCB.ACCT#;
      568     6416    4              FILE$KEY.PSN = REQ$DCB.PSN#;
      569     6417    5              IF FILE$KEY.UNIQUE.ACCT = ' ' THEN DO;
      570     6418    5                 IF REQ$DCB.NAME#.L >= 1
      571     6419    5                   AND SUBSTR(REQ$DCB.NAME#.C, 0, 1) = %CHR_TEMP_FILE THEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:17   
      572     6420    5                    FILE$KEY.UNIQUE.ACCT = B$JIT.ACCN;
      573     6421    5                 ELSE
      574     6422    5                    FILE$KEY.UNIQUE.ACCT = B$JIT.FACCN;
      575     6423    5                 IF (REQ$DCB.PSN# = ' ') THEN
      576     6424    5                    FILE$KEY.PSN = B$JIT.FPSN;
      577     6425    5                 END;
      578     6426    4              FILE$KEY.UNIQUE.FNAME.LENGTH# = REQ$DCB.NAME#.L;
      579     6427    4              FILE$KEY.UNIQUE.FNAME.BYTES =
      580     6428    4                SUBSTR(REQ$DCB.NAME#.C, 0, REQ$DCB.NAME#.L);
      581     6429    4              FILE$KEY.LENGTH# = LENGTHC(FILE$KEY.UNIQUE.ACCT) +
      582     6430    4                LENGTHC(FILE$KEY.UNIQUE.FNAME.LENGTH#) +
      583     6431    4                FILE$KEY.UNIQUE.FNAME.LENGTH#;
      584     6432    4              FILE$KEY.ASN# = REQ$DCB.ASN#;
      585     6433    4              FILE$KEY.RES = REQ$DCB.RES#;
      586     6434    4              FILE$KEY.PASS = REQ$DCB.PASS#;
      587     6435    4              FILE$KEY.DCB# = 0;   /* Zap the DCB ref */
      588     6436    4              END;
      589     6437
      590     6438                %COPYKEY (FKEY=KEY, TKEY=NEW$PORT.FILE_KEY);
      591     6454
      592     6455    3           RETURN;
      593     6456
      594     6457
      595     6458    3   FDETACH_FAILED: ;
      596     6459    3   OALLOC_FAILED: ;
      597     6460    3           ALTRETURN;
      598     6461
      599     6462    3   END BUILD_PORT;
      600     6463
      601     6464
      602     6465    2   END FILE_LEVEL_LOCATION;
      603     6466
      604     6467                %BOX (TITLE=FILE_LEVEL_OPEN, PAGE=YES);
              6475    2
              6479    2   /***************************************************************************
              6481    2    *                                                                         *
              6485    2            *                              FILE_LEVEL_OPEN                            *
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:18   
              6487    2            *                                                                         *
              6489    2           ***************************************************************************/

      605     6493
      606     6494        /*I* NAME: FILE_LEVEL_OPEN
      607     6495            PARAMETERS:
      608     6496                None.
      609     6497            INPUT:
      610     6498                STREAM must be positioned to the file to open.
      611     6499                PORT must be positioned to the internal or external file to
      612     6500                    open.  By positioned, we mean PORT.FILE__KEY
      613     6501                    must contain the file key to open.  The file may or may
      614     6502                    not exist.  .SPEC and .DATA at %LVL_FILE may or may not
      615     6503                    contain info (perhaps from a previous opening of the file).
      616     6504                    PORT may currently be open or closed to the file.
      617     6505                    If closed, PORT may or may not have a DCB attached; if it
      618     6506                    does, then the DCB has already been !SET to the fid to
      619     6507                    open to only if PORT's file-level Key, which must be
      620     6508                    a VD$FILE_KEY, has a non-0 VD$FILE_KEY.DCB#.
      621     6509                OPTIONS must be given; see description for the main routine
      622     6510                    (except it's not optional here).
      623     6511            OUTPUT:
      624     6512                If the PORT is currently closed, we'll open it:
      625     6513                    PORT.DCB# and PORT.LEVEL.INTERNAL$ (%LVL_FILE) will be set
      626     6514                        appropriately.
      627     6515                    PORT.EXIST#, .INTRINSIC_PROTECT, and .STRUCTURE$ will
      628     6516                        be set appropriately.
      629     6517                    PORT.FIT$ will point to a copy of the file's FIT, if any.
      630     6518                    PORT.SPEC and .DATA$ at %LVL_FILE will be set appropriately.
      631     6519                STREAM.PROTECTs at all levels will be set appropriately.
      632     6520            DESCRIPTION:
      633     6521                If PORT is already open, just check for an existence conflict:
      634     6522                    error is user says NEW but PORT already open to file.
      635     6523                If PORT is closed, open it:
      636     6524                    Find it internal or external.  We only look internal if
      637     6525                        the file key matches our template ("x6Edit_<dir>").
      638     6526                        If we don't find it internal:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:19   
      639     6527                            If this is a create open, and the file key matches
      640     6528                                the template, the first char matches the
      641     6529                                directory's FILE_STCLASS, and the first char isn't
      642     6530                                %FSTCL_EXTERNAL, then create the file internal.
      643     6531                            Else open/create the file external.
      644     6532                    Call the appropriate routine to open the file internal or
      645     6533                        external.
      646     6534                Merge info from the Structure and PORT into STREAM.
      647     6535                Check for a protection conflict:  if for some reason we can't
      648     6536                    give the user write access to the file when s/he requests
      649     6537                    it, generate a warning message.
      650     6538        */
      651     6539
      652     6540    1   FILE_LEVEL_OPEN: PROC ALTRET;
      653     6541
      654     6542
      655     6543        /*
      656     6544        *   The following arrays are used when merging the protect flags from
      657     6545        *       the VD$STRUCTURE_LEVEL into the stream.
      658     6546        *   PROTECT_FLAGS_FOR_BOOL uses a bit(1) flag as a subscript:
      659     6547        *       %TRUE yields all 1-bits.
      660     6548        *   PROTECT_FLAGS_FOR_OPTION uses OPTIONS.PROTECT# as a subscript:
      661     6549        *       %PROTECT yields all 1-bits.
      662     6550        */
      663     6551    2   DCL PROTECT_FLAGS_FOR_BOOL (0:1) BIT(%(CO_DATA+1)) CONSTANT
      664     6552    2       INIT (%CLEAR, %CO_ALL_BITS);
      665     6553    2   DCL PROTECT_FLAGS_FOR_OPTION (0:7) BIT(%(CO_DATA+1)) CONSTANT
      666     6554    2       INIT (%CLEAR, %CO_ALL_BITS, %CLEAR*0);
      667     6555
      668     6556
      669     6557
      670     6558    2   DCL DIR_KEY CHAR(%MXNB_FILE_NAME);
      671     6559    2   DCL STRUCTURE_SPEC$ PTR;
      672     6560    2   DCL STRUCTURE_LEVEL_NODE$ PTR;
      673     6561    2   DCL STRUCTURE_LEVEL$ PTR;
      674     6562    2   DCL PORT_KEY$ PTR;
      675     6563    2   DCL PORT_KEY_NAME$ PTR;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:20   
      676     6564    2   DCL DIR_NODE$ PTR;
      677     6565    2   DCL FILE_NODE$ PTR;
      678     6566    2   DCL FILE_NODE_KEY_NAME$ PTR;
      679     6567    2   DCL FILE_STCLASS CHAR(%LENGTHC(FSTCL_INTERNAL));
      680     6568    2   DCL PFN_INDEX SBIN;
      681     6569    2   DCL WHERE_TO_INSERT_NEW_FILE$ PTR;
      682     6570    2   DCL ENTIRE_STRUCTURE_PROTECTED BIT(1) ALIGNED;
      683     6571    2   DCL CONSEC_BY_ACCIDENT BIT(1) ALIGNED;
      684     6572
      685     6573
      686     6574        %VD$FILE_NODE (NAME=STRUCTURE, STCLASS="BASED(OPTIONS.STRUCTURE$)");
      687     6667        %VD$STRUCTURE_SPEC (NAME=STRUCTURE$SPEC, STCLASS="BASED(STRUCTURE_SPEC$)");
      688     6704        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
      689     6705            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
      690     6798        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL, STCLASS="BASED(STRUCTURE_LEVEL$)");
      691     6845        %VD$FILE_KEY (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
      692     6894        %VD$TEXTC (NAME=PORT$KEY_NAME, STCLASS="BASED(PORT_KEY_NAME$)",
      693     6895            ALIGNMENT=CALIGNED);
      694     6918        %VD$DIR_NODE (NAME=DIR$NODE, STCLASS="BASED(DIR_NODE$)");
      695     6956        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
      696     7049        %VD$TEXTC (NAME=FILE$NODE_KEY_NAME, STCLASS="BASED(FILE_NODE_KEY_NAME$)",
      697     7050            ALIGNMENT=CALIGNED);
      698     7073        %VD$FILE_KEY;
      699     7122        %F$DCB;
      700     7179
      701     7180
      702     7181
      703     7182    2           IF STREAM.PORT$ = ADDR(NIL)
      704     7183    2             OR PORT.FILE_KEY = %CLEAR THEN
      705     7184    2              CALL VDG$ESCREECH;
      706     7185
      707     7186    2           IF OPTIONS.PROTECT# = %PROTECT
      708     7187    2             AND OPTIONS.EXIST# = %EX_NEW THEN
      709     7188    2              GOTO PROTECT_CONFLICTS_W_NEW_FAILURE;
      710     7189
      711     7190    2           STRUCTURE_SPEC$ = STRUCTURE.DESC.SPEC.V$;
      712     7191
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:21   
      713     7192    2           IF PORT.EXIST# ~= 0 THEN
      714     7193    3   PORT_ALREADY_OPEN: DO;
      715     7194    3              IF OPTIONS.EXIST# = %EX_NEW THEN
      716     7195    3                 GOTO EXIST_CONFLICT_FAILURE;
      717     7196    3              END PORT_ALREADY_OPEN;
      718     7197
      719     7198    2           ELSE
      720     7199    3   OPEN_THE_PORT: DO;
      721     7200                   /*  Port is currently closed */
      722     7201    3              PORT_KEY$ = PORT.FILE_KEY.V$;
      723     7202    3              PORT_KEY_NAME$ = ADDR(PORT$KEY.UNIQUE.FNAME);
      724     7203
      725     7204                   /*
      726     7205                   *    See if file is internal or external; if internal, find it.
      727     7206                   */
      728     7207    3              FILE_NODE$ = ADDR(NIL);    /* Assume external file */
      729     7208    3              DIR_NODE$ = ADDR(NIL);
      730     7209    3              WHERE_TO_INSERT_NEW_FILE$ = ADDR(NIL);
      731     7210    3              FILE_STCLASS = PORT$KEY_NAME.BYTES;
      732     7211
      733     7212    3              IF PORT$KEY.DCB# = 0
      734     7213    3                AND PORT$KEY.PSN = ' ' AND PORT$KEY.UNIQUE.ACCT = ' '
      735     7214    3                AND FILE_STCLASS ~= %FSTCL_EXTERNAL
      736     7215    3                AND PORT$KEY_NAME.LENGTH# >= LENGTHC(FILE_STCLASS) +
      737     7216    3                %LENGTHC(PFK_CONSTANT)
      738     7217    3                AND SUBSTR(PORT$KEY_NAME.BYTES, LENGTHC(FILE_STCLASS),
      739     7218    3                %LENGTHC(PFK_CONSTANT)) = %PFK_CONSTANT THEN
      740     7219    4   TEST_FOR_INTERNAL: DO;
      741     7220    4                 CALL INDEX (PFN_INDEX, %CHR_UNDERSCORE, PORT$KEY_NAME.BYTES,
      742     7221    4                   LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT));
      743     7222    4                 DIR_KEY = SUBSTR(PORT$KEY_NAME.BYTES,
      744     7223    4                   LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT),
      745     7224    4                   PFN_INDEX - (LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT)));
      746     7225    4                 DIR_NODE$ = VD_6E.WS.INTERNAL_DIR$;
      747     7226    4   FIND_INTERNAL_DIR_NODE:
      748     7227    5                 DO WHILE DIR_NODE$ ~= ADDR(NIL);
      749     7228    5                    IF DIR$NODE.KEY = DIR_KEY
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:22   
      750     7229    6                      AND FILE_STCLASS = DIR$NODE.FILE_STCLASS THEN DO;
      751     7230    6                       FILE_NODE$ = DIR$NODE.HEAD$;
      752     7231    6                       EXIT FIND_INTERNAL_DIR_NODE;
      753     7232    6                       END;
      754     7233    5                    DIR_NODE$ = DIR$NODE.FLINK$;
      755     7234    5                    END FIND_INTERNAL_DIR_NODE;
      756     7235
      757     7236    4   FIND_INTERNAL_FILE_NODE:
      758     7237    5                 DO WHILE FILE_NODE$ ~= ADDR(NIL);
      759     7238    6                    IF FILE$NODE.DESC.KEY ~= %CLEAR THEN DO;
      760     7239    6                       FILE_NODE_KEY_NAME$ = ADDR(FILE$NODE.DESC.KEY.V$ ->
      761     7240    6                         VD$FILE_KEY.UNIQUE.FNAME);
      762     7241    6                       IF FILE$NODE_KEY_NAME.BYTES = PORT$KEY_NAME.BYTES THEN
      763     7242    6                          EXIT FIND_INTERNAL_FILE_NODE;
      764     7243    7                       IF FILE$NODE_KEY_NAME.BYTES < PORT$KEY_NAME.BYTES THEN DO;
      765     7244                            /* File not found, but this is where it would go */
      766     7245    7                          WHERE_TO_INSERT_NEW_FILE$ = FILE_NODE$;
      767     7246    7                          FILE_NODE$ = ADDR(NIL);
      768     7247    7                          EXIT FIND_INTERNAL_FILE_NODE;
      769     7248    7                          END;
      770     7249    6                       END;
      771     7250    5                    FILE_NODE$ = FILE$NODE.FLINK$;
      772     7251    5                    END FIND_INTERNAL_FILE_NODE;
      773     7252    4                 END TEST_FOR_INTERNAL;
      774     7253
      775     7254                /*
      776     7255                *    At this point:
      777     7256                *    If we found the file internally, FILE_NODE$ points to it.
      778     7257                *    If we didn't find it:
      779     7258                *        DIR_NODE$ points to the directory in which it
      780     7259                *            belongs (=NIL if it belongs external);
      781     7260                *        WHERE_TO_INSERT_NEW_FILE$ points to the file
      782     7261                *            before which the file should appear (=NIL if
      783     7262                *            the file should appear at the end of the
      784     7263                *            directory).
      785     7264                *        If this is a create-open, then create
      786     7265                *        the file internal; if not a create-open, then look
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:23   
      787     7266                *        for the file external.
      788     7267                */
      789     7268
      790     7269    3              IF FILE_NODE$ ~= ADDR(NIL)
      791     7270    3                OR (DIR_NODE$ ~= ADDR(NIL)
      792     7271    3                AND (OPTIONS.EXIST# = %EX_NEW
      793     7272    4                OR OPTIONS.EXIST# = %EX_ANY)) THEN DO;
      794     7273    4                 CALL OPEN_THE_PORT_INTERNAL (FILE_NODE$,
      795     7274    4                   WHERE_TO_INSERT_NEW_FILE$, DIR$NODE)
      796     7275    4                   ALTRET (OPEN_THE_PORT_INTERNAL_FAILED);
      797     7276    4                 END;
      798     7277    4              ELSE DO;
      799     7278    4                 CALL OPEN_THE_PORT_EXTERNAL
      800     7279    4                   ALTRET (OPEN_THE_PORT_EXTERNAL_FAILED);
      801     7280    4                 END;
      802     7281    3              END OPEN_THE_PORT;
      803     7282
      804     7283
      805     7284                /*
      806     7285                *  Stream's port is now open.
      807     7286                *  Merge info from Structure and port into stream.
      808     7287                */
      809     7288    2           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$;
      810     7289    2           ENTIRE_STRUCTURE_PROTECTED = %TRUE; /* Assume no holes */
      811     7290    2           CONSEC_BY_ACCIDENT = %FALSE;    /* Assume user knows */
      812     7291    3           DO LEVEL = %LVL_FILE TO STRUCTURE.COUNT# - 1;
      813     7292    3              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;
      814     7293
      815     7294    3              IF PORT.LEVEL.ORG# (LEVEL) = %ORG_CONSEC
      816     7295    3                AND STRUCTURE$LEVEL.ORG# ~= %ORG_CONSEC THEN
      817     7296    3                 CONSEC_BY_ACCIDENT = %TRUE;
      818     7297
      819     7298    3              STREAM.PROTECT (LEVEL) =
      820     7299    3                PROTECT_FLAGS_FOR_BOOL (BITBIN(PORT.INTRINSIC_PROTECT)) |
      821     7300    3                PROTECT_FLAGS_FOR_OPTION (OPTIONS.PROTECT#) |
      822     7301    3                STRUCTURE$LEVEL.PROTECT;
      823     7302    3              IF VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:24   
      824     7303    3                AND VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE) THEN
      825     7304    3                 STREAM.PROTECT (LEVEL) = %CLEAR;
      826     7305
      827     7306    3              IF STRUCTURE$LEVEL.PROTECT ~= %CO_ALL_BITS THEN
      828     7307    3                 ENTIRE_STRUCTURE_PROTECTED = %FALSE;
      829     7308
      830     7309    3              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;
      831     7310    3              END;
      832     7311
      833     7312    2           IF OPTIONS.PROTECT# = %DONT_PROTECT
      834     7313    2             AND (PORT.INTRINSIC_PROTECT OR ENTIRE_STRUCTURE_PROTECTED)
      835     7314    2             AND NOT (PORT.DCB# = 0 AND VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)
      836     7315    3             AND VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE)) THEN DO;
      837     7316    3              CALL SET_ERROR_WARN (%E$CANT_WRITE);
      838     7317    3              IF PORT.DCB#~=0 THEN
      839     7318    3                 IF DCBADDR(PORT.DCB#) -> F$DCB.FUN# = %IN# THEN
      840     7319    3                    VD$ERR.ERR.CODE# = %E$VD_FILEBUSY;
      841     7320    3              CALL VDG$EREPORT_ERROR;
      842     7321    3              CONSEC_BY_ACCIDENT = %FALSE; /* Don't warn twice */
      843     7322    3              END;
      844     7323
      845     7324    2           IF CONSEC_BY_ACCIDENT
      846     7325    3             AND OPTIONS.PROTECT# ~= %PROTECT THEN DO;
      847     7326                   /*
      848     7327                   *   File actually opened is consec, but user requested
      849     7328                   *    it via an org-less Structure, meaning open any
      850     7329                   *    file by that name no matter what org, or a Structure
      851     7330                   *    specifying some other org.  If the user
      852     7331                   *    thinks they can insert or delete records, they're
      853     7332                   *    sadly mistaken:  warn them.
      854     7333                   */
      855     7334    3              CALL SET_ERROR_WARN (%E$CANT_INSERT_DELETE_RECORDS);
      856     7335    3              CALL VDG$EREPORT_ERROR;
      857     7336    3              END;
      858     7337
      859     7338
      860     7339                /*
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:25   
      861     7340                *   Stream open! Finally!
      862     7341                */
      863     7342
      864     7343    2           STREAM.LAST_OP# = %ACCOP_OPEN;
      865     7344
      866     7345    2           IF VD_$$MON_ACC.V# > 0 THEN
      867     7346    2              CALL VDG$MACC_RETURN (STREAM);
      868     7347    2           RETURN;
      869     7348
      870     7349
      871     7350
      872     7351    2   PROTECT_CONFLICTS_W_NEW_FAILURE:
      873     7352    2           CALL SET_ERROR_SERIOUS (%E$PROTECT_CONFLICTS_W_NEW);
      874     7353    2           ALTRETURN;
      875     7354
      876     7355
      877     7356    2   EXIST_CONFLICT_FAILURE:
      878     7357    2           CALL SET_ERROR_SERIOUS (%E$VD_CREATERR);
      879     7358    2           ALTRETURN;
      880     7359
      881     7360
      882     7361    2   OALLOC_FAILED: ;
      883     7362    2   OPEN_THE_PORT_INTERNAL_FAILED: ;
      884     7363    2   OPEN_THE_PORT_EXTERNAL_FAILED: ;
      885     7364    2           ALTRETURN;
      886     7365
      887     7366        %BOX (TITLE=OPEN_THE_PORT_INTERNAL, PAGE=YES);
              7374    2
              7378    2   /***************************************************************************
              7380    2    *                                                                         *
              7384    2            *                           OPEN_THE_PORT_INTERNAL                        *
              7386    2            *                                                                         *
              7388    2           ***************************************************************************/

      888     7392
      889     7393        /*I* NAME: OPEN_THE_PORT_INTERNAL
      890     7394            PARAMETERS:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:26   
      891     7395                FILE_NODE$ - Points to the VD$FILE_NODE at the file level
      892     7396                    of the internal file we're opening to.  For a create
      893     7397                    open, this must be ADDR(NIL).
      894     7398                INSERT_NODE$ - For a create open, points to the VD$FILE_NODE
      895     7399                    in front of which (in the directory) we should insert the
      896     7400                    file being created; if we should insert the new file at
      897     7401                    the end of the directory, and for non-create opens,
      898     7402                    INSERT_NODE$ must be ADDR(NIL).
      899     7403                DIR_NODE - If this is a create-open, DIR_NODE must be the
      900     7404                    node for the directory in which the file belongs.  Ignored
      901     7405                    for non-create opens.
      902     7406            INPUT:
      903     7407                PORT must be the Port to use; it must currently be closed.
      904     7408                OPTIONS must be the options to use.
      905     7409                STRUCTURE$SPEC must be the VD$STRUCTURE_SPEC to use.
      906     7410            OUTPUT:
      907     7411                PORT's DCB, if any, will be detached.
      908     7412                FILE_NODE$ - If this is a create-open, will point to the
      909     7413                    level-0 FileNode created for the file and inserted into
      910     7414                    DIR_NODE's directory.
      911     7415                PORT.LAST_OP, .EXIST, and .INTRINSIC_PROTECT will be
      912     7416                    set appropriately.
      913     7417                PORT.FIT$ will point to a copy of the file's FIT, if any.
      914     7418                PORT.LEVEL.ORGs, .KEY_TYPEs, and .SPEC_TYPEs will be set from the
      915     7419                    Structure and/or the file actually opened.
      916     7420                PORT.LEVEL.SPEC, .DATA$, and .INTERNAL$ at the file level will
      917     7421                    be set appropriately.
      918     7422            DESCRIPTION:
      919     7423                Free any DCB attached to the port.
      920     7424                If this is a create-open, build the level-0 FileNode and
      921     7425                    insert it into the file tree.
      922     7426                Set values in the port based on the file opened.
      923     7427        */
      924     7428
      925     7429    2   OPEN_THE_PORT_INTERNAL: PROC (FILE_NODE$, INSERT_NODE$, DIR_NODE) ALTRET;
      926     7430
      927     7431    3   DCL FILE_NODE$ PTR;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:27   
      928     7432    3   DCL INSERT_NODE$ PTR;
      929     7433        %VD$DIR_NODE (NAME=DIR_NODE, STCLASS=PARAM);
      930     7471
      931     7472
      932     7473
      933     7474        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
      934     7567        %VD$FILE_NODE (NAME=INSERT$NODE, STCLASS="BASED(INSERT_NODE$)");
      935     7660        %VD$FIT;
      936     7696
      937     7697
      938     7698
      939     7699                %INCREMENT (INDX=%STG_OPEN_INT_FILE);
      940     7702
      941     7703    4           IF PORT.DCB# ~= 0 THEN DO;
      942     7704                   /* Free the DCB attached to this port */
      943     7705    4              CALL VDG$OFREE_DCB (PORT.DCB#)
      944     7706    4                ALTRET (OFREE_DCB_FAILED);
      945     7707    4              END;
      946     7708
      947     7709                /*
      948     7710                *   If this is a create-open, build the level-0 FileNode
      949     7711                *       and insert it into the file tree.
      950     7712                */
      951     7713
      952     7714    3           IF FILE_NODE$ = ADDR(NIL) THEN
      953     7715    4   CREATE_INTERNAL_FILE: DO;
      954     7716    4              CALL VDG$OALLOC (%CLS_FILE_NODE, FILE_NODE$)
      955     7717    4                ALTRET (OALLOC_FAILED);
      956     7718    4              FILE$NODE.DESC.KEY = PORT.FILE_KEY;
      957     7719    5              IF FILE$NODE.DESC.KEY.REP# = %REP_REMOTE THEN DO;
      958     7720    5                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,
      959     7721    5                   FILE$NODE.DESC.KEY.V$)
      960     7722    5                   ALTRET (OCOPY_FAILED);
      961     7723    5                 END;
      962     7724                   /* Give user full access to this file */
      963     7725    4              FILE$NODE.ACCESS = %NAC_ALL_BITS;
      964     7726
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:28   
      965     7727                   /* Link FILE$NODE into the file tree */
      966     7728    4              IF INSERT_NODE$ = ADDR(NIL) THEN
      967     7729    4                 FILE$NODE.BLINK$ = DIR_NODE.TAIL$;
      968     7730    4              ELSE
      969     7731    4                 FILE$NODE.BLINK$ = INSERT$NODE.BLINK$;
      970     7732    4              IF FILE$NODE.BLINK$ = ADDR(NIL) THEN
      971     7733    4                 DIR_NODE.HEAD$ = FILE_NODE$;
      972     7734    4              ELSE
      973     7735    4                 FILE$NODE.BLINK$->VD$FILE_NODE.FLINK$ = FILE_NODE$;
      974     7736    4              FILE$NODE.FLINK$ = INSERT_NODE$;
      975     7737    4              IF FILE$NODE.FLINK$ = ADDR(NIL) THEN
      976     7738    4                 DIR_NODE.TAIL$ = FILE_NODE$;
      977     7739    4              ELSE
      978     7740    4                 FILE$NODE.FLINK$->VD$FILE_NODE.BLINK$ = FILE_NODE$;
      979     7741    4              DIR_NODE.COUNT# = DIR_NODE.COUNT# + 1;
      980     7742    4              END CREATE_INTERNAL_FILE;
      981     7743
      982     7744                /* Now we're actually open to the file! Record this fact */
      983     7745    3           PORT.LAST_OP# = %ACCOP_OPEN;
      984     7746    3           PORT.EXIST# = OPTIONS.EXIST#;
      985     7747    3           PORT.LEVEL.INTERNAL$ (%LVL_FILE) = FILE_NODE$;
      986     7748    3           IF (FILE$NODE.ACCESS | VD_ACCESSOR_PRIV) = %CLEAR THEN
      987     7749    3              PORT.INTRINSIC_PROTECT = %TRUE;
      988     7750
      989     7751    3           PORT.LEVEL.SPEC (%LVL_FILE) = FILE$NODE.DESC.SPEC;
      990     7752    4           IF PORT.LEVEL.SPEC.REP# (%LVL_FILE) = %REP_REMOTE THEN DO;
      991     7753    4              CALL VDG$OCOPY (FILE$NODE.DESC.SPEC.V$ -> VD$TEXTC_REMOTE,
      992     7754    4                PORT.LEVEL.SPEC.V$ (%LVL_FILE))
      993     7755    4                ALTRET (OCOPY_FAILED);
      994     7756    4              END;
      995     7757
      996     7758    4           IF FILE$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;
      997     7759    4              CALL VDG$OCOPY (FILE$NODE.DESC.DATA$ -> VD$BUFFER,
      998     7760    4                PORT.LEVEL.DATA$ (%LVL_FILE))
      999     7761    4                ALTRET (OCOPY_FAILED);
     1000     7762    4              END;
     1001     7763
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:29   
     1002     7764                /*
     1003     7765                *  Merge info from STRUCTURE into PORT.
     1004     7766                */
     1005     7767    3           PORT.STRUCTURE$ = OPTIONS.STRUCTURE$;
     1006     7768    4           IF STRUCTURE$SPEC.FIT$ ~= ADDR(NIL) THEN DO;
     1007     7769    4              CALL VDG$OCOPY (STRUCTURE$SPEC.FIT$->VD$FIT, PORT.FIT$)
     1008     7770    4                ALTRET (OCOPY_FAILED);
     1009     7771    4              END;
     1010     7772    3           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$;
     1011     7773    4           DO LEVEL = %LVL_FILE TO STRUCTURE.COUNT# - 1;
     1012     7774    4              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;
     1013     7775    4              PORT.LEVEL.ORG# (LEVEL) = STRUCTURE$LEVEL.ORG#;
     1014     7776    4              PORT.LEVEL.KEY_TYPE# (LEVEL) = STRUCTURE$LEVEL.KEY_TYPE#;
     1015     7777    4              PORT.LEVEL.SPEC_TYPE# (LEVEL) = STRUCTURE$LEVEL.SPEC_TYPE#;
     1016     7778    4              IF PORT.LEVEL.ORG# (LEVEL) = 0 THEN
     1017     7779    4                 PORT.LEVEL.ORG# (LEVEL) = %ORG_KEYED;
     1018     7780    5              IF PORT.LEVEL.KEY_TYPE# (LEVEL) = 0 THEN DO;
     1019     7781    5                 IF LEVEL = %LVL_FILE THEN
     1020     7782    5                    PORT.LEVEL.KEY_TYPE# (LEVEL) = %KT_STRING;
     1021     7783    5                 ELSE
     1022     7784    5                    PORT.LEVEL.KEY_TYPE# (LEVEL) = %KT_NUMBER;
     1023     7785    5                 END;
     1024     7786    4              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;
     1025     7787    4              END;
     1026     7788
     1027     7789    3           RETURN;
     1028     7790
     1029     7791
     1030     7792
     1031     7793    3   OALLOC_FAILED: ;
     1032     7794    3   OFREE_DCB_FAILED: ;
     1033     7795    3   OCOPY_FAILED: ;
     1034     7796    3           ALTRETURN;
     1035     7797
     1036     7798    3   END OPEN_THE_PORT_INTERNAL;
     1037     7799
     1038     7800        %BOX (TITLE=OPEN_THE_PORT_EXTERNAL, PAGE=YES);
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:30   
              7808    3
              7812    3   /***************************************************************************
              7814    3    *                                                                         *
              7818    3            *                           OPEN_THE_PORT_EXTERNAL                        *
              7820    3            *                                                                         *
              7822    3           ***************************************************************************/

     1039     7826
     1040     7827        /*I* NAME: OPEN_THE_PORT_EXTERNAL
     1041     7828            PARAMETERS:
     1042     7829                None.
     1043     7830            INPUT:
     1044     7831                STREAM must be the stream to use.
     1045     7832                PORT is the port to use; it must be closed.
     1046     7833                STRUCTURE$SPEC must be the VD$STRUCTURE_SPEC to use.
     1047     7834            OUTPUT:
     1048     7835                PORT will have a DCB attached.  If no errors are found,
     1049     7836                    the DCB will be open to the file.
     1050     7837                PORT.LAST_OP, .EXIST, and .INTRINSIC_PROTECT will be
     1051     7838                    set appropriately.
     1052     7839                PORT.FIT$ will point to a copy of the file's FIT.
     1053     7840                PORT.LEVEL.ORGs, .KEY_TYPEs, and .SPEC_TYPEs will be set from the
     1054     7841                    Structure and/or the file actually opened (based on info
     1055     7842                    from the monitor).
     1056     7843            DESCRIPTION:
     1057     7844                Attach a DCB to the port.
     1058     7845                Build the M$OPEN FPT, and open the file.
     1059     7846                Check for correct ASN and file organization.
     1060     7847                Set values in the port from the DCB and the file's FIT.
     1061     7848        */
     1062     7849
     1063     7850    2   OPEN_THE_PORT_EXTERNAL: PROC ALTRET;
     1064     7851
     1065     7852        %FPT_OPEN (FPTN=CONST_FPT_OPEN, STCLASS=CONSTANT,
     1066     7853                ACS=DIRECT, CTG=YES, DISP=NAMED);
     1067     7962
     1068     7963
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:31   
     1069     7964        /*
     1070     7965        *   The following tables are used only if OPTIONS.PROTECT# = %FALSE.
     1071     7966        *   These tables use %EX_ definitions as the subscript into the table;
     1072     7967        *       we assume %EX_NEW = 1, %EX_OLD = 2, %EX_ANY = 3.
     1073     7968        */
     1074     7969    3   DCL OPEN_FUNCTION (0:7) UBIN BYTE CALIGNED CONSTANT
     1075     7970    3       INIT(0, %CREATE#, %UPDATE#, %CREATE#, 0*0);
     1076     7971    3   DCL OPEN_EXIST (0:7) UBIN BYTE CALIGNED CONSTANT
     1077     7972    3       INIT(0, %ERROR#, 0, %OLDFILE#, 0*0);
     1078     7973
     1079     7974
     1080     7975        /*
     1081     7976        *   The following tables are accessed using %ORG_ definitions as
     1082     7977        *       the subscript into the table.  We assume
     1083     7978        *       %ORG_CONSEC = 1, %ORG_KEYED = 2, %ORG_INDEXED = 3.
     1084     7979        */
     1085     7980    3   DCL OPEN_ORG (0:7) UBIN BYTE CALIGNED CONSTANT
     1086     7981    3       INIT(%KEYED#,   /* Entry 0 is default: Structure specifies no org */
     1087     7982    3               %CONSEC#, %KEYED#, %INDEXED#, 0*0);
     1088     7983    3   DCL DEFAULT_KEY_TYPES_FOR_ORGS (0:7) UBIN HALF HALIGNED CONSTANT
     1089     7984    3       INIT(0, %KT_NUMBER, %KT_EDITKEY, %KT_STRING, 0*0);
     1090     7985
     1091     7986
     1092     7987        %FPT_PFIL (BOF=YES, STCLASS=STATIC);
     1093     8002
     1094     8003
     1095     8004
     1096     8005    3   DCL PORT_KEY$ PTR;
     1097     8006    3   DCL EXT_DCB$ PTR;
     1098     8007    3   DCL DCB_ORG UBIN BYTE;
     1099     8008    3   DCL PORT_FIT$ PTR;
     1100     8009        %FPT_OPEN (STCLASS=AUTO);
     1101     8118        %VLP_SN (STCLASS=AUTO);
     1102     8131
     1103     8132
     1104     8133        %VD$FILE_KEY (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     1105     8182        %F$DCB (DCBN=EXT$DCB, STCLASS="BASED(EXT_DCB$)");
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:32   
     1106     8239        %VD$FIT (NAME=PORT$FIT, STCLASS="BASED(PORT_FIT$)");
     1107     8275
     1108     8276
     1109     8277
     1110     8278                %INCREMENT (INDX=%STG_OPEN_EXT_FILE);
     1111     8281
     1112     8282                /* Get ptr to VD$STRUCTURE_LEVEL for level %LVL_EXT_REC (=1) */
     1113     8283    3           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$->VD$FILE_NODE.FLINK$;
     1114     8284    3           STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;
     1115     8285
     1116     8286    3           FPT_OPEN = CONST_FPT_OPEN;
     1117     8287    3           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);
     1118     8288
     1119     8289    3           PORT_KEY$ = PORT.FILE_KEY.V$;
     1120     8290
     1121     8291    3           IF PORT$KEY.DCB# = 0 THEN
     1122     8292    4   OPEN_TO_FID: DO;
     1123     8293                   /* First, make sure we have a DCB */
     1124     8294    5              IF PORT.DCB# = 0 THEN DO;
     1125     8295    5                 CALL VDG$OALLOC_DCB (PORT.DCB#)
     1126     8296    5                   ALTRET (OALLOC_DCB_FAILED);
     1127     8297    5                 END;
     1128     8298
     1129     8299                   /* Set the FPT's SCRUB and fid fields */
     1130     8300    4              FPT_OPEN.V.INITZ.SCRUB# = %TRUE;
     1131     8301    4              FPT_OPEN.NAME_ = VECTOR(PORT$KEY.UNIQUE.FNAME);
     1132     8302    4              FPT_OPEN.ACCT_ = VECTOR(PORT$KEY.UNIQUE.ACCT);
     1133     8303    4              FPT_OPEN.V.ASN# = PORT$KEY.ASN#;
     1134     8304    4              FPT_OPEN.V.RES# = PORT$KEY.RES;
     1135     8305    4              VLP_SN = %CLEAR;
     1136     8306    4              VLP_SN.NUM# = 1;
     1137     8307    4              VLP_SN.SN# (0) = PORT$KEY.PSN;
     1138     8308    4              FPT_OPEN.SN_ = VECTOR(VLP_SN);
     1139     8309    4              FPT_OPEN.PASS_ = VECTOR(PORT$KEY.PASS);
     1140     8310
     1141     8311                   /*
     1142     8312                   *  If this is a create open, merge params from the
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:33   
     1143     8313                   *      Structure into the FPT.
     1144     8314                   */
     1145     8315    5              IF OPTIONS.EXIST# ~= %EX_OLD THEN DO;
     1146     8316    6                 IF STRUCTURE$SPEC.FIT$ ~= ADDR(NIL) THEN DO;
     1147     8317    6                    FPT_OPEN.IFPARAM_ =
     1148     8318    6                      VECTOR(STRUCTURE$SPEC.FIT$ -> PORT$FIT.FIT);
     1149     8319    6                    END;
     1150     8320    5                 FPT_OPEN.V.ORG# = OPEN_ORG (STRUCTURE$LEVEL.ORG#);
     1151     8321    5                 FPT_OPEN.V.TYPE# = VD_$FILETYPE.BYTES;
     1152     8322    5                 END;
     1153     8323
     1154     8324                   /*
     1155     8325        *N**N**N*  *   Other FPT_OPEN parameters to consider (these can't be
     1156     8326        *N**N**N*  *      set via IFPARM):
     1157     8327        *N**N**N*  *   COMP - only for create consec|keyed unencrypted disk file
     1158     8328        *N**N**N*  *   EXPIRE - only for create file
     1159     8329        *N**N**N*  *   HDR - only for create UR file
     1160     8330        *N**N**N*  *   LOAD - only for create alternate-indexed file
     1161     8331        *N**N**N*  *   SEED (on FPT_READ/FPT_WRITE) - only for non-indexed
     1162     8332        *N**N**N*  *       non-compressed disk file
     1163     8333        *N**N**N*  *   These values should be set by the user the same way
     1164     8334        *N**N**N*  *       s/he sets/examines [I]FPARAM:  via a forms-mode
     1165     8335        *N**N**N*  *       window.  The value given by the user should probably
     1166     8336        *N**N**N*  *       go into VD$STRUCTURE_LEVEL.
     1167     8337                   */
     1168     8338
     1169     8339    4              END OPEN_TO_FID;
     1170     8340
     1171     8341    4           IF OPTIONS.PROTECT# = %PROTECT THEN DO;
     1172     8342    4              FPT_OPEN.V.FUN# = %IN#;
     1173     8343    4              FPT_OPEN.V.EXIST# = 0;
     1174     8344    4              END;
     1175     8345    4           ELSE DO;
     1176     8346    4              FPT_OPEN.V.FUN# = OPEN_FUNCTION (OPTIONS.EXIST#);
     1177     8347    4              FPT_OPEN.V.EXIST# = OPEN_EXIST (OPTIONS.EXIST#);
     1178     8348    4              END;
     1179     8349
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:34   
     1180     8350
     1181     8351    3           CALL VDG$OALLOC (%CLS_FIT, PORT.FIT$)
     1182     8352    3             ALTRET (OALLOC_FAILED);
     1183     8353    3           FPT_OPEN.FPARAM_ = VECTOR(PORT.FIT$->PORT$FIT.FIT);
     1184     8354    3           FPT_OPEN.V.DCB# = PORT.DCB#;
     1185     8355    3           IF VD_$$MON_ACC.V# > 10 THEN
     1186     8356    3              CALL VDG$MACC_FOPEN_OPEN (FPT_OPEN.V.DCB#, PORT_KEY$);
     1187     8357    3           CALL M$OPEN (FPT_OPEN)
     1188     8358    4           WHENALTRETURN DO;
     1189     8359    4              IF FPT_OPEN.V.FUN# ~= %UPDATE# THEN GOTO OPEN_FAILED;
     1190     8360    4              FPT_OPEN.V.FUN# = %IN#;
     1191     8361    4              CALL M$RETRY;
     1192     8362    4              END;
     1193     8363
     1194     8364                /* Now we're actually open to the file! Record this fact */
     1195     8365    3           PORT.LAST_OP# = %ACCOP_OPEN;
     1196     8366    3           PORT.EXIST# = OPTIONS.EXIST#;
     1197     8367
     1198     8368    3           EXT_DCB$ = DCBADDR(PORT.DCB#);
     1199     8369    3           IF EXT$DCB.ASN# ~= %FILE# THEN
     1200     8370    3              GOTO BAD_FILE_ASN_FAILURE;
     1201     8371    3           IF (NOT EXT$DCB.FFLG.DELR#) OR (NOT EXT$DCB.FFLG.UPD#)
     1202     8372    4             OR (NOT EXT$DCB.FFLG.WNEW#) THEN DO;
     1203     8373    4              PORT.INTRINSIC_PROTECT = %TRUE;
     1204     8374    4              END;
     1205     8375
     1206     8376                /*
     1207     8377                *   Merge info from Structure and the DCB into PORT.
     1208     8378                */
     1209     8379
     1210     8380    3           PORT.STRUCTURE$ = OPTIONS.STRUCTURE$;
     1211     8381
     1212     8382    4           DO CASE (EXT$DCB.ORG#);
     1213     8383    4            CASE (%CONSEC#, %UR#);
     1214     8384    4              DCB_ORG = %ORG_CONSEC;
     1215     8385    5              IF OPTIONS.EXIST# ~= %EX_NEW THEN DO;
     1216     8386                      /* Rewind the file to BOF */
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:35   
     1217     8387    5                 FPT_PFIL.V.DCB# = PORT.DCB#;
     1218     8388    5                 CALL M$PFIL (FPT_PFIL)
     1219     8389    5                   ALTRET (PFIL_FAILED);
     1220     8390                      /* DCB is now positioned at first record */
     1221     8391    5                 PORT.CURRENT.KEY (%LVL_EXT_REC-1) = VD_KEY_FIRST_CONSEC_REC;
     1222     8392    5                 END;
     1223     8393    4            CASE (%KEYED#);
     1224     8394    4              DCB_ORG = %ORG_KEYED;
     1225     8395    4            CASE (%INDEXED#, %IREL#);
     1226     8396    4              DCB_ORG = %ORG_INDEXED;
     1227     8397    4              GOTO BAD_FILE_ORG_FAILURE;   /*N* Remove eventually */
     1228     8398    4            CASE (ELSE);
     1229     8399    4              GOTO BAD_FILE_ORG_FAILURE;
     1230     8400    4            END;
     1231     8401
     1232     8402    3           PORT_FIT$ = PORT.FIT$;
     1233     8403    3           PORT$FIT.CODE2$ = ADDR(PORT$FIT.FIT);
     1234     8404    3           PORT$FIT.CODE3$ = ADDR(PORT$FIT.FIT);
     1235     8405    3           CALL XSF$LOCCODT (PORT$FIT.CODE2$, 2)
     1236     8406    4           WHENALTRETURN DO;
     1237     8407    4              PORT$FIT.CODE2$ = ADDR(NIL);
     1238     8408    4              END;
     1239     8409    3           CALL XSF$LOCCODT (PORT$FIT.CODE3$, 3)
     1240     8410    4           WHENALTRETURN DO;
     1241     8411    4              PORT$FIT.CODE3$ = ADDR(NIL);
     1242     8412    4              END;
     1243     8413
     1244     8414    3           PORT.LEVEL.ORG# (%LVL_EXT_REC) = STRUCTURE$LEVEL.ORG#;
     1245     8415    3           IF STRUCTURE$LEVEL.ORG# = 0 THEN
     1246     8416    3              PORT.LEVEL.ORG# (%LVL_EXT_REC) = DCB_ORG;
     1247     8417    4           ELSE DO;
     1248     8418    4              IF STRUCTURE$LEVEL.ORG# ~= DCB_ORG THEN
     1249     8419    4                 GOTO ORG_CONFLICT_FAILURE;
     1250     8420    4              END;
     1251     8421
     1252     8422    3           PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) = STRUCTURE$LEVEL.KEY_TYPE#;
     1253     8423    3           IF STRUCTURE$LEVEL.KEY_TYPE# = 0 THEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:36   
     1254     8424    3              PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) =
     1255     8425    3                DEFAULT_KEY_TYPES_FOR_ORGS (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     1256     8426    3           IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC
     1257     8427    3             AND PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) ~= %KT_NUMBER THEN
     1258     8428    3              GOTO ORG_KEYTYPE_CONFLICT_FAILURE;
     1259     8429
     1260     8430    3           PORT.LEVEL.SPEC_TYPE# (%LVL_EXT_REC) = STRUCTURE$LEVEL.SPEC_TYPE#;
     1261     8431
     1262     8432    3           RETURN;
     1263     8433
     1264     8434
     1265     8435
     1266     8436    3   OPEN_FAILED:
     1267     8437    3           CALL SET_ERROR_SERIOUS (B$TCB);
     1268     8438    3           ALTRETURN;
     1269     8439
     1270     8440
     1271     8441    3   BAD_FILE_ASN_FAILURE:
     1272     8442    3           CALL SET_ERROR_SERIOUS (%E$FILE_ASN_NOT_ACCESSABLE);
     1273     8443    3           ALTRETURN;
     1274     8444
     1275     8445
     1276     8446    3   PFIL_FAILED:
     1277     8447    3           CALL SET_ERROR_SERIOUS (B$TCB);
     1278     8448    3           ALTRETURN;
     1279     8449
     1280     8450
     1281     8451    3   BAD_FILE_ORG_FAILURE:
     1282     8452    3           CALL SET_ERROR_SERIOUS (%E$FILE_ORG_NOT_ACCESSABLE);
     1283     8453    3           ALTRETURN;
     1284     8454
     1285     8455
     1286     8456    3   ORG_CONFLICT_FAILURE:
     1287     8457    3           CALL SET_ERROR_SERIOUS (%E$ORG_CONFLICT);
     1288     8458    3           ALTRETURN;
     1289     8459
     1290     8460
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:37   
     1291     8461    3   ORG_KEYTYPE_CONFLICT_FAILURE:
     1292     8462    3           CALL SET_ERROR_SERIOUS (%E$ORG_KEYTYPE_CONFLICT);
     1293     8463    3           ALTRETURN;
     1294     8464
     1295     8465
     1296     8466    3   OALLOC_FAILED: ;
     1297     8467    3   OALLOC_DCB_FAILED: ;
     1298     8468    3   OFREE_FAILED: ;
     1299     8469    3   OFREE_DCB_FAILED: ;
     1300     8470    3           ALTRETURN;
     1301     8471
     1302     8472    3   END OPEN_THE_PORT_EXTERNAL;
     1303     8473
     1304     8474    2   END FILE_LEVEL_OPEN;
     1305     8475
     1306     8476        %EJECT;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:38   
     1307     8477    1   SET_ERROR_SERIOUS: PROC (ERR_CODE);
     1308     8478
     1309     8479    2   DCL ERR_CODE SBIN;
     1310     8480    2   DCL T$ PTR;
     1311     8481    2   DCL FLV UBIN;
     1312     8482
     1313     8483    2           FLV = %FLV_SERIOUS;
     1314     8484    2           GOTO COMMON;
     1315     8485
     1316     8486    2   SET_ERROR_WARN: ENTRY (ERR_CODE);
     1317     8487
     1318     8488    2           FLV = %FLV_WARN;
     1319     8489    2   COMMON: ;
     1320     8490    2           CALL VDG$OALLOC (%CLS_ERR, T$)
     1321     8491    2             ALTRET (OALLOC_FAILED);
     1322     8492    2           VD_ERR$ = T$;
     1323     8493    2           IF ADDR(ERR_CODE)~=B$TCB$ THEN
     1324     8494    2              VD$ERR.ERR.CODE# = ERR_CODE;
     1325     8495    2           ELSE IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$CREATERR THEN
     1326     8496    2                 VD$ERR.ERR.CODE# = %E$VD_CREATERR;
     1327     8497    2              ELSE VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;
     1328     8498    2           VD$ERR.FLAGLEV# = FLV;
     1329     8499    2           VD$ERR.DCB# = PORT.DCB#;
     1330     8500    2           VD_NUMBER$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     1331     8501    2           VD$NUMBER.OBJECT.CLASS# (0) = %CLS_ORG;
     1332     8502    2           VD$NUMBER.V# (0) = PORT.LEVEL.ORG# (%LVL_EXT_REC);
     1333     8503    2           VD$NUMBER.OBJECT.CLASS# (1) = %CLS_KEY_TYPE;
     1334     8504    2           VD$NUMBER.V# (1) = PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC);
     1335     8505    2           IF FLV = %FLV_SERIOUS THEN
     1336     8506    2              CALL VDA$FCLOSE (STREAM);   /* Let altret fall thru */
     1337     8507    2   OALLOC_FAILED:;
     1338     8508    2           RETURN;
     1339     8509    2   END SET_ERROR_SERIOUS;
     1340     8510    1   END VDA$FOPEN;
     1341     8511        %EOD;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:39   
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FOPEN.

   Procedure VDA$FOPEN requires 1452 words for executable code.
   Procedure VDA$FOPEN requires 110 words of local(AUTO) storage.

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:40   

 Object Unit name= VDA$FOPEN                                  File name= VDA$FILE.:VDA5TOU
 UTS= JUL 04 '97 11:03:45.44 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     72    110  VDA$FOPEN
    2   Data  even  none     4      4  VDA$FOPEN
    3   Proc  even  none  1452   2654  VDA$FOPEN
    4  RoData even  none    39     47  VDA$FOPEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        4  VDA$FOPEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:41   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
         yes           Std       4 VDG$MACC_FOPEN
         yes           Std       3 VDG$ESCREECH
         yes           Std       1 VDG$MACC_RETURN
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       1 VDA$FDETACH
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       1 VDG$EREPORT_ERROR
 yes     yes           Std       1 VDG$OFREE_DCB
 yes     yes           Std       1 VDG$OALLOC_DCB
         yes           Std       2 VDG$MACC_FOPEN_OPEN
 yes     yes           Std       2 XSF$LOCCODT
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_ACCESSOR_PRIV
     VD_$FILETYPE                          VD_$$MON_ACC                          VD_KEY_FIRST_CONSEC_REC
     B$TCB$                                B$JIT$                                B_VECTNIL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:42   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:43   


        1        1        /*M* VDA$FILE - Accessor operations at file-level */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$FILE
       12       12            PURPOSE: Accessor operations at file-level.
       13       13            DESCRIPTION:
       14       14                This module contains three external routines:
       15       15                VDA$FOPEN - Will open a stream's file level to a file.
       16       16                VDA$FCLOSE - Will close a stream's file level.
       17       17                VDA$FDETACH - Will detach a stream from its port. If
       18       18                    appropriate, will free the port.
       19       19                VDA$FREKEY - Rekeys an entire edit-keyed file.
       20       20        */
       21       21
       22       22        /*D* NAME: VDA$FOPEN
       23       23            PARAMETERS:
       24       24                STREAM - VD$STREAM to open.  If this stream is currently open,
       25       25                    we'll first close it.  The stream and its attached port
       26       26                    may already be positioned to the file you wish to access
       27       27                    (via a previous call to VDA$FOPEN), or you may use the
       28       28                    positioning parameters ABSOLUTE and RELATIVE in this call.
       29       29                    The port attached to STREAM may or may not be open to the
       30       30                    requested file already.
       31       31                ABSOLUTE - Optional VD$KEY specifying the absolute location
       32       32                    file key) to position to first.  Must point to a remote
       33       33                    VD$FILE_KEY.
       34       34                    Omit ABSOLUTE for relative-only positioning.
       35       35        *N**N**N*   If ABSOLUTE=%CLEAR, we'll position to the first file in the
       36       36        *N**N**N*       the user's file management directory.
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:44   
       37       37                    If ABSOLUTE's VD$FILE_KEY.DCB is non-0, then this DCB is
       38       38                        to be used to access the file.  The DCB should already
       39       39                        be !SET to the file to access.  We'll look for a port
       40       40                        already open to this DCB; if none, we'll build a port
       41       41                        and attach this DCB to it.
       42       42                    Else VD$FILE_KEY must contain either an M$FID'd fid, or an
       43       43                        internal file name (in VD$FILE_KEY.UNIQUE.FNAME).
       44       44                        We'll find and attach the appropriate port.
       45       45
       46       46                    The general form for the name part of predefined and
       47       47                        Scratch file keys is:
       48       48                            x6Edit_<dir>_<file>
       49       49                    where:
       50       50                    "x" is the file storage class of the file.  This is a single char,
       51       51                        and comes from VD$DIR_NODE.FILE_STCLASS (settable by
       52       52                        the user).  It is one of the FSTCL_ values, and
       53       53                        specifies where to look for the file.  If the file
       54       54                        storage class for a directory is FSTCL_MIGRATABLE or
       55       55                        FSTCL_EXTERNAL, then the user can't access any external
       56       56                        file which starts with "x6Edit_<dir>".
       57       57                    <dir> is the directory key:  a DK_ value.  There are
       58       58                        five directories:  History, Names, Scratch, Structures,
       59       59                        and Windows.
       60       60                    _<file> is optional, and makes the entire file name unique
       61       61                        for a specific file within the directory.
       62       62                RELATIVE - Signed number of files to move relative to either
       63       63                    the stream's current file-level position or, if given, ABSOLUTE.
       64       64                    RELATIVE < 0 is not legal.
       65       65                OPTIONS - Optional VD$ACCESS_OPTIONS.  If omitted, the file
       66       66                    isn't opened.  If given, then:
       67       67                    .STRUCTURE$ must point to the level 1 VD$FILE_NODE for
       68       68                        the accessor Structure to use.  The Structure specifies
       69       69                        not only the level structure of the physical file,
       70       70                        but also the organization, Key-type, and Spec-type
       71       71                        of the file.  Note that:
       72       72                        o When opening an existing file, if the user specifies
       73       73                            the External structure, s/he can access any type of
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:45   
       74       74                            external file.  This is because the External structure
       75       75                            doesn't have org or Key-type values in it, so we use
       76       76                            the ones from the actual file.
       77       77                        o When creating a file, the user can use either:
       78       78                            o the External structure, in which case we'll use
       79       79                                default values for org, Key-type, and Spec-type; or
       80       80                            o one of the derivative structures which specify org,
       81       81                                Key-type, and Spec-type (Consec, Names, etc.)
       82       82                        o If the user opens an existing file with a structure
       83       83                            which specifies org, Key-type, or Spec-type, and the
       84       84                            actual file's values differ from those of the structure,
       85       85                            we'll report an error and abort the open.
       86       86                    .EXIST - An EX_ value, specifying the "existence" option
       87       87                        to be applied to the file.
       88       88                    .PROTECT - The "protect" option to be applied to the file:
       89       89                        either %PROTECT (read-only) or %DONT_PROTECT.
       90       90                        Note the rough granularity of this option:  it applies
       91       91                        to all levels of the file structure and to all node
       92       92                        components at the levels.
       93       93                        Basically, this is like a mask of all 1's that we'll
       94       94                        be OR'ing with the protection forced by the Structure,
       95       95                        by file management (for external files), or by the
       96       96                        filenode itself (for internal files).
       97       97            INPUT:
       98       98                VD_ACCESSOR_PRIV - If we're opening/creating an internal file
       99       99                    and we're not doing it on behalf of the user, but
      100      100                    rather are accessing an internally-maintained
      101      101                    file (e.g., Scratch files, etc.), then
      102      102                    VD_ACCESSOR_PRIV must have all bits set (%NAC_ALL_BITS).
      103      103            OUTPUT:
      104      104                PORT.STRUCTURE will be set appropriately.
      105      105                STREAM.FILE_KEY will be set:
      106      106                    If .FILE_KEY is %CLEAR, the requested file doesn't exist,
      107      107                        and there are no files after it in the specified
      108      108                        directory.  This will only happen when RELATIVE > 0.
      109      109                        (When RELATIVE=0, positioning to a non-existent file just
      110      110                        loads the file key into VD$STREAM.FILE_KEY
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:46   
      111      111                        and leaves the stream closed.)
      112      112                    If .FILE_KEY is not %CLEAR, then it specifies the key of
      113      113                        the requested file.  Note that if ABSOLUTE contained
      114      114                        a .DCB# at entry, we'll fill in the fid-part of the
      115      115                        VD$FILE_KEY from the DCB, in both the stream's
      116      116                        VD$FILE_KEY and in ABSOLUTE's VD$FILE_KEY.
      117      117                If OPTIONS is included in the parameters:
      118      118                    The stream will be open to the file, but will remain
      119      119                        "unpositioned" (no lower-level keys in STREAM.CURRENT.
      120      120                        If the file doesn't exist, an error will be returned.
      121      121                    VD$PORT.EXIST and all STREAM.PROTECTs will be set
      122      122                        from the call parameters.  The VD$PORT.LEVEL.ORGs,
      123      123                        VD$PORT.LEVEL.KEY_TYPEs, VD$PORT.LEVEL.SPEC_TYPEs, and
      124      124                        STREAM.PROTECTs will be set based on the specific
      125      125                        file/structure opened and the PROTECT value passed.
      126      126                VD$STREAM.NEXT may be cleared.
      127      127            DESCRIPTION:
      128      128                Load ABSOLUTE's file key into .FILE_KEY and attach
      129      129                    the stream to an appropriate port.
      130      130                If RELATIVE is > 0, skip that many files in the file directory.
      131      131                In the above, if the stream is already open and we need to
      132      132                    position to a different file than the current one, first
      133      133                    close the stream.
      134      134
      135      135                If OPTIONS wasn't passed, return:  we've positioned to the
      136      136                    requested file.
      137      137                If the port is already open to the requested file, then
      138      138                    the request can't specify EXIST=NEW; if so, reject the open.
      139      139                    Also compare the protection options:  if the request says
      140      140                    %DONT_PROTECT for an external file, then we can't use a port
      141      141                    which is already open to a DCB for input-only.
      142      142                If the current key at the file level is of a non-existent
      143      143                    file and EXIST = %EX_NEW or %EX_ANY, then this OPEN call
      144      144                    will create a new file.
      145      145                    Note:  to create a predefined file, EXIST must be %EX_NEW.
      146      146                If the port isn't open yet, open it.  Merge the info from the
      147      147                    Structure into the VD$PORT.
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:47   
      148      148                Merge the PROTECT parameter with the protect flags for each level
      149      149                    of the Structure definition, and if the file is
      150      150                    external, with the open-mode of the DCB, into the VD$STREAM.
      151      151        */
      152      152
      153      153        VDA$FOPEN: PROC (STREAM, ABSOLUTE, RELATIVE, OPTIONS) ALTRET;

    153  3 000000   000000 700200 xent  VDA$FOPEN    TSX0  ! X66_AUTO_4
         3 000001   000156 000004                    ZERO    110,4

      154      154
      155      155        %INCLUDE VD_MACROS_M;
      156     2370        %INCLUDE VD_PERR_C;
      157     2518        %INCLUDE CP_6;
      158     2599        %INCLUDE CP_6_SUBS;
      159     3139        %INCLUDE B_ERRORS_C;
      160     4265        %INCLUDE B$JIT;
      161     4555
      162     4556
      163     4557                %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      164     4663                %VD$KEY (NAME=ABSOLUTE, STCLASS=PARAM);
      165     4677    1   DCL RELATIVE SBIN;
      166     4678        %VD$ACCESS_OPTIONS (NAME=OPTIONS, STCLASS=PARAM);
      167     4707
      168     4708
      169     4709    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
      170     4710    1   DCL VDA$FDETACH         ENTRY (1) ALTRET;
      171     4711    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
      172     4712    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      173     4713    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      174     4714    1   DCL VDG$OALLOC_DCB      ENTRY (1) ALTRET;
      175     4715    1   DCL VDG$OFREE_DCB       ENTRY (1) ALTRET;
      176     4716    1   DCL VDG$EREPORT_ERROR   ENTRY (1);
      177     4717    1   DCL VDG$ESCREECH        ENTRY (3);
      178     4718    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      179     4719    1   DCL VDG$MACC_FOPEN      ENTRY (4);
      180     4720    1   DCL VDG$MACC_FOPEN_OPEN ENTRY (2);
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:48   
      181     4721    1   DCL VDG$MACC_RETURN     ENTRY (1);
      182     4722    1   DCL XSF$LOCCODT         ENTRY (2) ALTRET;
      183     4723
      184     4724
      185     4725
      186     4726        %VD_6E (STCLASS=SYMREF);
      187     4762    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      188     4763              %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES);
      189     4777        %VD$BUFFER (NAME=VD_$FILETYPE, STCLASS=SYMREF);
      190     4835        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      191     4880        %VD$KEY_NUMBER (NAME=VD_KEY_FIRST_CONSEC_REC, STCLASS=SYMREF);
      192     4895    1   DCL B$TCB$ PTR SYMREF;
      193     4896    1   DCL B$JIT$ PTR SYMREF;
      194     4897
      195     4898
      196     4899
      197     4900    1   DCL LEVEL SBIN;
      198     4901    1   DCL VD_ERR$ PTR;
      199     4902    1   DCL VD_NUMBER$ PTR;
      200     4903
      201     4904
      202     4905        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      203     5003        %VD$FILE_NODE;
      204     5096        %VD$TEXTC_REMOTE;
      205     5157        %VD$FILE_KEY;
      206     5206        %VD$BUFFER;
      207     5264        %VD$BUFFER_HEADER;
      208     5300        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
      209     5353        %VD$NUMBER (NAME=VD$NUMBER, DIM="(0:2)", STCLASS="BASED(VD_NUMBER$)");
      210     5398    1   DCL SBIN$WORD SBIN BASED;
      211     5399        %B$TCB (NAME=B$TCB, STCLASS="BASED(B$TCB$)");
      212     5402        %B$ALT;
      213     5410
      214     5411
      215     5412
      216     5413    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:49   
   5413  3 000002   000027 220000 xsym               LDX0    VD_6E+23
         3 000003   000003 100003                    CMPX0   3,DU
         3 000004   000012 601000 3                  TNZ     s:5417

      217     5414    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   5414  3 000005   000000 630400 4                  EPPR0   0
         3 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000007   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
         3 000010   000000 011000                    NOP     0

      218     5415    2              ALTRETURN;

   5415  3 000011   000000 702200 xent               TSX2  ! X66_AALT

      219     5416    2              END;
      220     5417    1           IF VD_$$MON_ACC.V# > 0 THEN

   5417  3 000012   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000013   000020 604400 3                  TMOZ    s:5420

      221     5418    1              CALL VDG$MACC_FOPEN (STREAM, ABSOLUTE, RELATIVE, OPTIONS);

   5418  3 000014   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000015   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000016   000000 701000 xent               TSX1    VDG$MACC_FOPEN
         3 000017   000000 011000                    NOP     0

      222     5419
      223     5420    1           IF RELATIVE < 0 THEN

   5420  3 000020   200005 470500                    LDP0    @RELATIVE,,AUTO
         3 000021   000000 235100                    LDA     0,,PR0
         3 000022   000027 605000 3                  TPL     s:5423

      224     5421    1              CALL VDG$ESCREECH (RELATIVE);

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:50   
   5421  3 000023   200005 630500                    EPPR0   @RELATIVE,,AUTO
         3 000024   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000025   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000026   000000 011000                    NOP     0

      225     5422
      226     5423    1           CALL FILE_LEVEL_LOCATION

   5423  3 000027   000046 701000 3                  TSX1    FILE_LEVEL_LOCATION
         3 000030   000045 702000 3                  TSX2    FILE_LEVEL_LOCATION_FAILED

      227     5424    1             ALTRET (FILE_LEVEL_LOCATION_FAILED);
      228     5425
      229     5426    2           IF ADDR(OPTIONS) ~= ADDR(NIL) THEN DO;

   5426  3 000031   200006 236100                    LDQ     @OPTIONS,,AUTO
         3 000032   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000033   000036 600000 3                  TZE     s:5431

      230     5427    2              CALL FILE_LEVEL_OPEN

   5427  3 000034   000727 701000 3                  TSX1    FILE_LEVEL_OPEN
         3 000035   000045 702000 3                  TSX2    FILE_LEVEL_LOCATION_FAILED

      231     5428    2                ALTRET (FILE_LEVEL_OPEN_FAILED);
      232     5429    2              END;

      233     5430
      234     5431    1           IF VD_$$MON_ACC.V# > 0 THEN

   5431  3 000036   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000037   000044 604400 3                  TMOZ    s:5433

      235     5432    1              CALL VDG$MACC_RETURN (STREAM);

   5432  3 000040   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000041   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:51   
         3 000042   000000 701000 xent               TSX1    VDG$MACC_RETURN
         3 000043   000000 011000                    NOP     0

      236     5433    1           RETURN;

   5433  3 000044   000000 702200 xent               TSX2  ! X66_ARET

   5431  3 000045                       FILE_LEVEL_* null
   5431  3 000045                       FILE_LEVEL_* null
      237     5434
      238     5435
      239     5436    1   FILE_LEVEL_LOCATION_FAILED: ;
      240     5437    1   FILE_LEVEL_OPEN_FAILED: ;
      241     5438    1           ALTRETURN;

   5438  3 000045   000000 702200 xent               TSX2  ! X66_AALT

      242     5439
      243     5440                %BOX (TITLE=FILE_LEVEL_LOCATION, PAGE=YES);
              5448    1
              5452    1   /***************************************************************************
              5454    1    *                                                                         *
              5458    1            *                            FILE_LEVEL_LOCATION                         *
              5460    1            *                                                                        *
              5462    1          ***************************************************************************/

      244     5466
      245     5467        /*I* NAME: FILE_LEVEL_LOCATION
      246     5468            PARAMETERS:
      247     5469                None.
      248     5470            INPUT:
      249     5471                STREAM - The VD$STREAM to use.
      250     5472                ABSOLUTE, RELATIVE - Same as for main routine.
      251     5473                PORT - The VD$PORT attached to STREAM.
      252     5474            OUTPUT:
      253     5475                STREAM.FILE_KEY will contain the requested file key;
      254     5476                    STREAM will be attached to a port which is also positioned
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:52   
      255     5477                    to the requested file key.  The stream and port may or
      256     5478                    may not be open to the file, and if open, will be positioned
      257     5479                    to an arbitrary location within the file.
      258     5480                If ABSOLUTE's VD$FILE_KEY.DCB# was non-0 at entry, then
      259     5481                    ABSOLUTE's, STREAM.FILE_KEY's, and PORT.FILE_KEY's
      260     5482                    VD$FILE_ABSOLUTE.UNIQUE, .ASN, .PSN, and .RES will be filled
      261     5483                    in from the dcb.  Also, ABSOLUTE's VD$FILE_KEY.DCB# will be
      262     5484                    zeroed.
      263     5485            DESCRIPTION:
      264     5486                Position the stream to the requested file, and attach it to
      265     5487                an appropriate port:
      266     5488
      267     5489                If RELATIVE=0, the stream may already be positioned to
      268     5490                    ABSOLUTE's file and the port for that file.  If so, return.
      269     5491                If the stream is currently open, close it.  If ABSOLUTE isn't
      270     5492                    %CLEAR, load it into current.
      271     5493                If RELATIVE=0:
      272     5494                    Call FIND_PORT to find/build a port open to ABSOLUTE.
      273     5495                    Return.
      274     5496
      275     5497                So, RELATIVE is > 0:
      276     5498                    If this stream isn't the sole referencer of it's port, or if
      277     5499                        it doesn't have a port, call BUILD_PORT to get
      278     5500                        an unused port.  We need an unused port so we can do
      279     5501                        NXTF opens on it for the relative movement.
      280     5502                    Call FILE_LEVEL_OPEN_NXTF, RELATIVE times.  If we hit the end
      281     5503                        of the directory, clear STREAM.FILE_KEY and return.
      282     5504                        (It's ok to leave a closed port attached.)
      283     5505                    If we find the requested file, call FIND_PORT to see if there
      284     5506                        are any other ports already open to the file.  If so,
      285     5507                        FIND_PORT will detach our current port and reattach us
      286     5508                        to the already-open one.
      287     5509                    Return.
      288     5510        */
      289     5511
      290     5512    1   FILE_LEVEL_LOCATION: PROC ALTRET;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:53   
   5512  3 000046   200012 741300       FILE_LEVEL_* STX1  ! VD_NUMBER$+1,,AUTO

      291     5513
      292     5514
      293     5515    2   DCL I SBIN;
      294     5516    2   DCL ABS_KEY$ PTR;
      295     5517    2   DCL CANDIDATE_KEY$ PTR;
      296     5518    2   DCL DO_THE_CALL BIT(1) ALIGNED;
      297     5519
      298     5520
      299     5521        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      300     5544        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CANDIDATE_KEY$)");
      301     5567
      302     5568
      303     5569
      304     5570    3           IF ABSOLUTE = %CLEAR THEN DO;

   5570  3 000047   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         3 000050   000000 106500                    CMPC    fill='000'O
         3 000051   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 000052   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 000053   000060 601000 3                  TNZ     s:5582

      305     5571    3              IF RELATIVE = 0 THEN

   5571  3 000054   200005 471500                    LDP1    @RELATIVE,,AUTO
         3 000055   100000 235100                    LDA     0,,PR1
         3 000056   000131 601000 3                  TNZ     s:5605

      306     5572    3                 RETURN;   /* No positioning requested: return */

   5572  3 000057   000001 702211                    TSX2  ! 1,X1

      307     5573    3              END;
      308     5574    3           ELSE DO;

      309     5575                   %GETKEY (KEY=ABSOLUTE, PTR=ABS_KEY$);
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:54   

   5582  3 000060   000000 720100                    LXL0    0,,PR0
         3 000061   000002 100003                    CMPX0   2,DU
         3 000062   000067 601000 3                  TNZ     s:5582+7

   5582  3 000063   000001 471500                    LDP1    1,,PR0
         3 000064   100002 633500                    EPPR3   2,,PR1
         3 000065   200014 453500                    STP3    ABS_KEY$,,AUTO
         3 000066   000072 710000 3                  TRA     s:5586

   5582  3 000067   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         3 000070   000001 036003                    ADLQ    1,DU
         3 000071   200014 756100                    STQ     ABS_KEY$,,AUTO

      310     5585
      311     5586    3              IF RELATIVE = 0

   5586  3 000072   200005 471500                    LDP1    @RELATIVE,,AUTO
         3 000073   100000 235100                    LDA     0,,PR1
         3 000074   000131 601000 3                  TNZ     s:5605
         3 000075   200003 473500                    LDP3    @STREAM,,AUTO
         3 000076   000000 106500                    CMPC    fill='000'O
         3 000077   300004 000010                    ADSC9   4,,PR3                   cn=0,n=8
         3 000100   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 000101   000131 600000 3                  TZE     s:5605

      312     5587    4                AND STREAM.FILE_KEY ~= %CLEAR THEN DO;

      313     5588                      %GETKEY (KEY=STREAM.FILE_KEY, PTR=CANDIDATE_KEY$);

   5595  3 000102   300004 722100                    LXL2    4,,PR3
         3 000103   000002 102003                    CMPX2   2,DU
         3 000104   000111 601000 3                  TNZ     s:5595+7

   5595  3 000105   300005 474500                    LDP4    5,,PR3
         3 000106   400002 635500                    EPPR5   2,,PR4
         3 000107   200015 455500                    STP5    CANDIDATE_KEY$,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:55   
         3 000110   000114 710000 3                  TRA     s:5598

   5595  3 000111   200003 236100                    LDQ     @STREAM,,AUTO
         3 000112   000005 036003                    ADLQ    5,DU
         3 000113   200015 756100                    STQ     CANDIDATE_KEY$,,AUTO

      314     5598    5                 IF ABS$KEY.BYTES = CAND$KEY.BYTES THEN DO;

   5598  3 000114   200014 474500                    LDP4    ABS_KEY$,,AUTO
         3 000115   400000 236100                    LDQ     0,,PR4
         3 000116   000033 772000                    QRL     27
         3 000117   200015 475500                    LDP5    CANDIDATE_KEY$,,AUTO
         3 000120   000000 623006                    EAX3    0,QL
         3 000121   500000 236100                    LDQ     0,,PR5
         3 000122   000033 772000                    QRL     27
         3 000123   000000 624006                    EAX4    0,QL
         3 000124   040140 106540                    CMPC    fill='040'O
         3 000125   400000 200013                    ADSC9   0,,PR4                   cn=1,n=*X3
         3 000126   500000 200014                    ADSC9   0,,PR5                   cn=1,n=*X4
         3 000127   000131 601000 3                  TNZ     s:5605

      315     5599                         /* We're already at requested key:  just return */
      316     5600    5                    RETURN;

   5600  3 000130   000001 702211                    TSX2  ! 1,X1

      317     5601    5                    END;
      318     5602    4                 END;
      319     5603    3              END;
      320     5604
      321     5605    2           IF STREAM.PORT$ ~= ADDR(NIL) THEN

   5605  3 000131   200003 473500                    LDP3    @STREAM,,AUTO
         3 000132   300001 236100                    LDQ     1,,PR3
         3 000133   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000134   000144 600000 3                  TZE     s:5618

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:56   
      322     5606    3              IF PORT.EXIST# ~= 0 THEN DO;

   5606  3 000135   300001 474500                    LDP4    1,,PR3
         3 000136   400003 720100                    LXL0    3,,PR4
         3 000137   000144 600000 3                  TZE     s:5618

      323     5607    3                 CALL VDA$FCLOSE (STREAM)

   5607  3 000140   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000141   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000142   000000 701000 xent               TSX1    VDA$FCLOSE
         3 000143   000353 702000 3                  TSX2    FCLOSE_FAILED

      324     5608    3                   ALTRET (FCLOSE_FAILED);
      325     5609    3                 END;

      326     5610
      327     5611                %CLEARKEY (KEY=STREAM.FILE_KEY);

   5618  3 000144   200003 470500                    LDP0    @STREAM,,AUTO
         3 000145   000004 720100                    LXL0    4,,PR0
         3 000146   000002 100003                    CMPX0   2,DU
         3 000147   000161 601000 3                  TNZ     s:5619+2

   5618  3 000150   000005 471500                    LDP1    5,,PR0
         3 000151   200150 451500                    STP1    FLV+1,,AUTO
         3 000152   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000153   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000154   000000 701000 xent               TSX1    VDG$OFREE
         3 000155   000157 702000 3                  TSX2    s:5619
         3 000156   000161 710000 3                  TRA     s:5619+2

   5619  3 000157   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 000160   000000 702211                    TSX2  ! 0,X1

   5619  3 000161   200003 470500                    LDP0    @STREAM,,AUTO
         3 000162   000004 450100                    STZ     4,,PR0
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:57   
         3 000163   000005 450100                    STZ     5,,PR0

      328     5621
      329     5622    3           IF RELATIVE = 0 THEN DO;

   5622  3 000164   200005 471500                    LDP1    @RELATIVE,,AUTO
         3 000165   100000 235100                    LDA     0,,PR1
         3 000166   000215 601000 3                  TNZ     REL_MOVES

      330     5623    3              CALL FIND_PORT (ABSOLUTE)

   5623  3 000167   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         3 000170   200021 756100                    STQ     DO_THE_CALL+3,,AUTO
         3 000171   000355 701000 3                  TSX1    FIND_PORT
         3 000172   000353 702000 3                  TSX2    FCLOSE_FAILED

      331     5624    3                ALTRET (FIND_PORT_FAILED);
      332     5625    3              STREAM.FILE_KEY = PORT.FILE_KEY;

   5625  3 000173   200003 470500                    LDP0    @STREAM,,AUTO
         3 000174   000001 471500                    LDP1    1,,PR0
         3 000175   000100 100500                    MLR     fill='000'O
         3 000176   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000177   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8

      333     5626    4              IF PORT.FILE_KEY.REP# = %REP_REMOTE THEN DO;

   5626  3 000200   100010 720100                    LXL0    8,,PR1
         3 000201   000002 100003                    CMPX0   2,DU
         3 000202   000351 601000 3                  TNZ     s:5683

      334     5627    4                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,

   5627  3 000203   100011 473500                    LDP3    9,,PR1
         3 000204   200003 236100                    LDQ     @STREAM,,AUTO
         3 000205   000005 036003                    ADLQ    5,DU
         3 000206   200151 756100                    STQ     FLV+2,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:58   
         3 000207   200150 453500                    STP3    FLV+1,,AUTO
         3 000210   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000211   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000212   000000 701000 xent               TSX1    VDG$OCOPY
         3 000213   000353 702000 3                  TSX2    FCLOSE_FAILED

      335     5628    4                   STREAM.FILE_KEY.V$)
      336     5629    4                   ALTRET (OCOPY_FAILED);
      337     5630    4                 END;

      338     5631    3              END;

   5631  3 000214   000351 710000 3                  TRA     s:5683

      339     5632
      340     5633    2           ELSE
      341     5634    3   REL_MOVES: DO;

   5634  3 000215                       REL_MOVES    null
      342     5635    3              DO_THE_CALL = %TRUE; /* Assume we need to find an unused port */

   5635  3 000215   400000 236003                    LDQ     -131072,DU
         3 000216   200016 756100                    STQ     DO_THE_CALL,,AUTO

      343     5636    4              IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;

   5636  3 000217   000001 236100                    LDQ     1,,PR0
         3 000220   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000221   000227 600000 3                  TZE     s:5640

      344     5637    4                 IF PORT.REFS# < 2 THEN

   5637  3 000222   000001 473500                    LDP3    1,,PR0
         3 000223   300003 220100                    LDX0    3,,PR3
         3 000224   000002 100003                    CMPX0   2,DU
         3 000225   000227 605000 3                  TPL     s:5640

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:59   
      345     5638    4                    DO_THE_CALL = %FALSE;

   5638  3 000226   200016 450100                    STZ     DO_THE_CALL,,AUTO

      346     5639    4                 END;

      347     5640    4              IF DO_THE_CALL THEN DO;

   5640  3 000227   200016 234100                    SZN     DO_THE_CALL,,AUTO
         3 000230   000236 605000 3                  TPL     s:5652

      348     5641    4                 CALL BUILD_PORT (ABSOLUTE)

   5641  3 000231   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         3 000232   200027 756100                    STQ     PORT_KEY$+1,,AUTO
         3 000233   000543 701000 3                  TSX1    BUILD_PORT
         3 000234   000353 702000 3                  TSX2    FCLOSE_FAILED

      349     5642    4                   ALTRET (BUILD_PORT_FAILED);
      350     5643    4                 END;

   5643  3 000235   000300 710000 3                  TRA     s:5663

      351     5644    4              ELSE DO;

      352     5645                      %CLEARKEY (KEY=PORT.FILE_KEY);

   5652  3 000236   000001 473500                    LDP3    1,,PR0
         3 000237   300010 720100                    LXL0    8,,PR3
         3 000240   000002 100003                    CMPX0   2,DU
         3 000241   000253 601000 3                  TNZ     s:5653+2

   5652  3 000242   300011 474500                    LDP4    9,,PR3
         3 000243   200150 454500                    STP4    FLV+1,,AUTO
         3 000244   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000245   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000246   000000 701000 xent               TSX1    VDG$OFREE
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:60   
         3 000247   000251 702000 3                  TSX2    s:5653
         3 000250   000253 710000 3                  TRA     s:5653+2

   5653  3 000251   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 000252   000000 702211                    TSX2  ! 0,X1

   5653  3 000253   200003 470500                    LDP0    @STREAM,,AUTO
         3 000254   000001 471500                    LDP1    1,,PR0
         3 000255   100010 450100                    STZ     8,,PR1
         3 000256   100011 450100                    STZ     9,,PR1

      353     5655    4                 PORT.FILE_KEY = ABSOLUTE;

   5655  3 000257   000001 471500                    LDP1    1,,PR0
         3 000260   200004 473500                    LDP3    @ABSOLUTE,,AUTO
         3 000261   000100 100500                    MLR     fill='000'O
         3 000262   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         3 000263   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8

      354     5656    5                 IF ABSOLUTE.REP# = %REP_REMOTE THEN DO;

   5656  3 000264   300000 720100                    LXL0    0,,PR3
         3 000265   000002 100003                    CMPX0   2,DU
         3 000266   000300 601000 3                  TNZ     s:5663

      355     5657    5                    CALL VDG$OCOPY (ABSOLUTE.V$ -> VD$FILE_KEY,

   5657  3 000267   300001 471500                    LDP1    1,,PR3
         3 000270   000001 474500                    LDP4    1,,PR0
         3 000271   400011 635500                    EPPR5   9,,PR4
         3 000272   200151 455500                    STP5    FLV+2,,AUTO
         3 000273   200150 451500                    STP1    FLV+1,,AUTO
         3 000274   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000275   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000276   000000 701000 xent               TSX1    VDG$OCOPY
         3 000277   000353 702000 3                  TSX2    FCLOSE_FAILED

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:61   
      356     5658    5                      PORT.FILE_KEY.V$)
      357     5659    5                      ALTRET (OCOPY_FAILED);
      358     5660    5                    END;

      359     5661    4                 END;

      360     5662
      361     5663    3              I = RELATIVE;

   5663  3 000300   200005 470500                    LDP0    @RELATIVE,,AUTO
         3 000301   000000 235100                    LDA     0,,PR0
         3 000302   200013 755100                    STA     I,,AUTO

      362     5664    4              DO WHILE I > 0 AND PORT.FILE_KEY ~= %CLEAR;

   5664  3 000303   000306 710000 3                  TRA     s:5668

      363     5665        /*N*          CALL FILE_LEVEL_OPEN_NXTF (PORT)                      */
      364     5666        /*N*            ALTRET (FILE_LEVEL_OPEN_NXTF_FAILED);               */
      365     5667    4                 I = I - 1;

   5667  3 000304   000001 336007                    LCQ     1,DL
         3 000305   200013 056100                    ASQ     I,,AUTO

      366     5668    4                 END;

   5668  3 000306   200013 235100                    LDA     I,,AUTO
         3 000307   000316 604400 3                  TMOZ    s:5669
         3 000310   200003 470500                    LDP0    @STREAM,,AUTO
         3 000311   000001 471500                    LDP1    1,,PR0
         3 000312   000000 106500                    CMPC    fill='000'O
         3 000313   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000314   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 000315   000304 601000 3                  TNZ     s:5667

      367     5669    4              IF PORT.FILE_KEY ~= %CLEAR THEN DO;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:62   
   5669  3 000316   200003 470500                    LDP0    @STREAM,,AUTO
         3 000317   000001 471500                    LDP1    1,,PR0
         3 000320   000000 106500                    CMPC    fill='000'O
         3 000321   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000322   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 000323   000330 600000 3                  TZE     s:5675

      368     5670                      /* Find any other port which may already be open to this file */
      369     5671    4                 CALL FIND_PORT (PORT.FILE_KEY)

   5671  3 000324   100010 633500                    EPPR3   8,,PR1
         3 000325   200021 453500                    STP3    DO_THE_CALL+3,,AUTO
         3 000326   000355 701000 3                  TSX1    FIND_PORT
         3 000327   000353 702000 3                  TSX2    FCLOSE_FAILED

      370     5672    4                   ALTRET (FIND_PORT_FAILED);
      371     5673    4                 END;

      372     5674
      373     5675    3              STREAM.FILE_KEY = PORT.FILE_KEY;

   5675  3 000330   200003 470500                    LDP0    @STREAM,,AUTO
         3 000331   000001 471500                    LDP1    1,,PR0
         3 000332   000100 100500                    MLR     fill='000'O
         3 000333   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000334   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8

      374     5676    4              IF PORT.FILE_KEY.REP# = %REP_REMOTE THEN DO;

   5676  3 000335   100010 720100                    LXL0    8,,PR1
         3 000336   000002 100003                    CMPX0   2,DU
         3 000337   000351 601000 3                  TNZ     s:5683

      375     5677    4                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,

   5677  3 000340   100011 473500                    LDP3    9,,PR1
         3 000341   200003 236100                    LDQ     @STREAM,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:63   
         3 000342   000005 036003                    ADLQ    5,DU
         3 000343   200151 756100                    STQ     FLV+2,,AUTO
         3 000344   200150 453500                    STP3    FLV+1,,AUTO
         3 000345   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000346   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000347   000000 701000 xent               TSX1    VDG$OCOPY
         3 000350   000353 702000 3                  TSX2    FCLOSE_FAILED

      376     5678    4                   STREAM.FILE_KEY.V$)
      377     5679    4                   ALTRET (OCOPY_FAILED);
      378     5680    4                 END;

      379     5681    3              END REL_MOVES;

      380     5682
      381     5683    2           RETURN;

   5683  3 000351   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 000352   000001 702211                    TSX2  ! 1,X1

   5676  3 000353                       FCLOSE_FAIL* null
   5676  3 000353                       FIND_PORT_F* null
   5676  3 000353                       BUILD_PORT_* null
   5676  3 000353                       OCOPY_FAILED null
      382     5684
      383     5685
      384     5686    2   FCLOSE_FAILED: ;
      385     5687    2   FIND_PORT_FAILED: ;
      386     5688    2   BUILD_PORT_FAILED: ;
      387     5689    2   OCOPY_FAILED: ;
      388     5690        /*N* FILE_LEVEL_OPEN_NXTF_FAILED: ; */
      389     5691    2           ALTRETURN;

   5691  3 000353   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 000354   000000 702211                    TSX2  ! 0,X1

      390     5692
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:64   
      391     5693        %BOX (TITLE=FIND_PORT, PAGE=YES);
              5701    2
              5705    2   /***************************************************************************
              5707    2    *                                                                         *
              5711    2            *                                 FIND_PORT                              *
              5713    2            *                                                                        *
              5715    2          ***************************************************************************/

      392     5719
      393     5720        /*I** NAME: FIND_PORT
      394     5721            PARAMETERS:
      395     5722                KEY - VD$KEY for file key to look for.  This must point to
      396     5723                    a remote VD$FILE_KEY.  If VD$FILE_KEY has a non-0 .DCB,
      397     5724                    we'll find a port attached to that DCB.
      398     5725            INPUT:
      399     5726                STREAM - The VD$STREAM to find a port for; we only use STREAM.PORT$.
      400     5727                VD_6E.PORT_HEAD$, .PORT_TAIL$ - Ptrs to head and tail of
      401     5728                    current chain of VD$PORTs.
      402     5729            OUTPUT:
      403     5730                STREAM.PORT$ will point to the port which is open to KEY.  This may
      404     5731                    be a different port than was passed via STREAM.PORT$ at entry;
      405     5732                    if so, the old port's ref count will be decremented (and if
      406     5733                    no other streams ref it, it will be freed), and the new
      407     5734                    port's ref count will be incremented; this reflects the
      408     5735                    detachment of the stream from the old port and the
      409     5736                    reattachment of the stream to the new port.
      410     5737                If KEY's VD$FILE_KEY.DCB# was non-0 at entry, then
      411     5738                    KEY's and PORT.FILE_KEY's VD$FILE_KEY.UNIQUE, .ASN, .PSN,
      412     5739                    and .RES will be filled in from the dcb.  Also, KEY's
      413     5740                    VD$FILE_KEY.DCB# will be zeroed.
      414     5741            DESCRIPTION:
      415     5742                If STREAM.PORT$ is nil, look for any port open to KEY; if none,
      416     5743                    or if KEY's VD$FILE_KEY.DCB# is set, build a new port for KEY.
      417     5744                If STREAM.PORT$ is not nil, look for any port open to KEY, but
      418     5745                    consider STREAM.PORT$->VD$PORT last.  If we find any other
      419     5746                    port already open to KEY, we assume caller wants to detach
      420     5747                    STREAM from PORT$; we'll decrement the port's ref count
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:65   
      421     5748                    and close and deallocate it if appropriate (ref count = 0).
      422     5749                    If no port, not even STREAM.PORT$, is already open to KEY,
      423     5750                    we'll detach STREAM from it, allocate a new VD$PORT, and
      424     5751                    attach STREAM to the new port.
      425     5752        */
      426     5753
      427     5754    2   FIND_PORT: PROC (KEY) ALTRET;

   5754  3 000355   200020 741300       FIND_PORT    STX1  ! DO_THE_CALL+2,,AUTO

      428     5755
      429     5756        %VD$KEY (NAME=KEY, STCLASS=PARAM);
      430     5770
      431     5771
      432     5772    3   DCL GIVEN_KEY$ PTR;
      433     5773    3   DCL CAND_PORT$ PTR;
      434     5774    3   DCL CAND_KEY$ PTR;
      435     5775
      436     5776
      437     5777        %VD$TEXTC (NAME=GIVEN$KEY, STCLASS="BASED(GIVEN_KEY$)");
      438     5800        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(KEY.V$)");
      439     5849        %VD$PORT (NAME=CAND$PORT, STCLASS="BASED(CAND_PORT$)");
      440     5947        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      441     5970
      442     5971
      443     5972
      444     5973    3           IF KEY.REP# ~= %REP_REMOTE THEN

   5973  3 000356   200021 470500                    LDP0    @KEY,,AUTO
         3 000357   000000 720100                    LXL0    0,,PR0
         3 000360   000002 100003                    CMPX0   2,DU
         3 000361   000371 600000 3                  TZE     s:5975

      445     5974    3              CALL VDG$ESCREECH (KEY.REP#);

   5974  3 000362   200021 236100                    LDQ     @KEY,,AUTO
         3 000363   400000 036007                    ADLQ    -131072,DL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:66   
         3 000364   200150 756100                    STQ     FLV+1,,AUTO
         3 000365   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000366   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000367   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000370   000000 011000                    NOP     0

      446     5975    3           GIVEN_KEY$ = ADDR(FILE$KEY.LENGTH#);

   5975  3 000371   200021 470500                    LDP0    @KEY,,AUTO
         3 000372   000001 471500                    LDP1    1,,PR0
         3 000373   100002 633500                    EPPR3   2,,PR1
         3 000374   200022 453500                    STP3    GIVEN_KEY$,,AUTO

      447     5976
      448     5977    3           IF FILE$KEY.DCB# = 0 THEN

   5977  3 000375   100021 220100                    LDX0    17,,PR1
         3 000376   000521 601000 3                  TNZ     s:6029

      449     5978    4   FIND_NAMED_FILE: DO;

   5978  3 000377                       FIND_NAMED_* null
      450     5979    4              CAND_PORT$ = VD_6E.PORT_HEAD$;

   5979  3 000377   000033 236000 xsym               LDQ     VD_6E+27
         3 000400   200023 756100                    STQ     CAND_PORT$,,AUTO

      451     5980    4   SEARCH_PORTS:
      452     5981    5              DO WHILE CAND_PORT$ ~= ADDR(NIL);

   5981  3 000401   000436 710000 3     SEARCH_PORTS TRA     s:5997

      453     5982    6                 IF CAND_PORT$ ~= STREAM.PORT$ THEN DO;

   5982  3 000402   200003 470500                    LDP0    @STREAM,,AUTO
         3 000403   200023 236100                    LDQ     CAND_PORT$,,AUTO
         3 000404   000001 116100                    CMPQ    1,,PR0
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:67   
         3 000405   000436 600000 3                  TZE     s:5997

      454     5983                         %GETKEY (KEY=CAND$PORT.FILE_KEY, PTR=CAND_KEY$);

   5990  3 000406   200023 471500                    LDP1    CAND_PORT$,,AUTO
         3 000407   100010 720100                    LXL0    8,,PR1
         3 000410   000002 100003                    CMPX0   2,DU
         3 000411   000416 601000 3                  TNZ     s:5990+8

   5990  3 000412   100011 473500                    LDP3    9,,PR1
         3 000413   300002 634500                    EPPR4   2,,PR3
         3 000414   200024 454500                    STP4    CAND_KEY$,,AUTO
         3 000415   000420 710000 3                  TRA     s:5993

   5990  3 000416   000011 036003                    ADLQ    9,DU
         3 000417   200024 756100                    STQ     CAND_KEY$,,AUTO

      455     5993    6                    IF GIVEN$KEY.BYTES = CAND$KEY.BYTES THEN

   5993  3 000420   200022 473500                    LDP3    GIVEN_KEY$,,AUTO
         3 000421   300000 236100                    LDQ     0,,PR3
         3 000422   000033 772000                    QRL     27
         3 000423   200024 474500                    LDP4    CAND_KEY$,,AUTO
         3 000424   000000 621006                    EAX1    0,QL
         3 000425   400000 236100                    LDQ     0,,PR4
         3 000426   000033 772000                    QRL     27
         3 000427   000000 622006                    EAX2    0,QL
         3 000430   040140 106540                    CMPC    fill='040'O
         3 000431   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 000432   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         3 000433   000440 600000 3                  TZE     s:5999

      456     5994    6                       EXIT SEARCH_PORTS;
      457     5995    6                    CAND_PORT$ = CAND$PORT.FLINK$;

   5995  3 000434   100002 236100                    LDQ     2,,PR1
         3 000435   200023 756100                    STQ     CAND_PORT$,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:68   

      458     5996    6                    END;

      459     5997    5                 END SEARCH_PORTS;

   5997  3 000436   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000437   000402 601000 3                  TNZ     s:5982

      460     5998
      461     5999    4              IF CAND_PORT$ ~= ADDR(NIL) THEN

   5999  3 000440   200023 236100                    LDQ     CAND_PORT$,,AUTO
         3 000441   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000442   000463 600000 3                  TZE     s:6008

      462     6000    5   FOUND_MATCH: DO;

   6000  3 000443                       FOUND_MATCH  null
      463     6001    6                 IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;

   6001  3 000443   200003 470500                    LDP0    @STREAM,,AUTO
         3 000444   000001 236100                    LDQ     1,,PR0
         3 000445   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000446   000453 600000 3                  TZE     s:6005

      464     6002    6                    CALL VDA$FDETACH (STREAM)

   6002  3 000447   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000450   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000451   000000 701000 xent               TSX1    VDA$FDETACH
         3 000452   000541 702000 3                  TSX2    FDETACH_FAILED

      465     6003    6                      ALTRET (FDETACH_FAILED);
      466     6004    6                    END;

      467     6005    5                 STREAM.PORT$ = CAND_PORT$;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:69   
   6005  3 000453   200023 236100                    LDQ     CAND_PORT$,,AUTO
         3 000454   200003 470500                    LDP0    @STREAM,,AUTO
         3 000455   000001 756100                    STQ     1,,PR0

      468     6006    5                 CAND$PORT.REFS# = CAND$PORT.REFS# + 1;

   6006  3 000456   200023 471500                    LDP1    CAND_PORT$,,AUTO
         3 000457   100003 220100                    LDX0    3,,PR1
         3 000460   000001 621010                    EAX1    1,X0
         3 000461   100003 741100                    STX1    3,,PR1

      469     6007    5                 END FOUND_MATCH;

   6007  3 000462   000521 710000 3                  TRA     s:6029

      470     6008    4              ELSE IF STREAM.PORT$ ~= ADDR(NIL) THEN

   6008  3 000463   200003 470500                    LDP0    @STREAM,,AUTO
         3 000464   000001 236100                    LDQ     1,,PR0
         3 000465   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000466   000521 600000 3                  TZE     s:6029

      471     6009    5   TEST_ORIGINAL_PORT: DO;

   6009  3 000467                       TEST_ORIGIN* null
      472     6010                         %GETKEY (KEY=STREAM.PORT$->CAND$PORT.FILE_KEY,
      473     6011                         PTR=CAND_KEY$);

   6018  3 000467   000001 471500                    LDP1    1,,PR0
         3 000470   100010 720100                    LXL0    8,,PR1
         3 000471   000002 100003                    CMPX0   2,DU
         3 000472   000477 601000 3                  TNZ     s:6018+4

   6018  3 000473   100011 473500                    LDP3    9,,PR1
         3 000474   300002 634500                    EPPR4   2,,PR3
         3 000475   200024 454500                    STP4    CAND_KEY$,,AUTO
         3 000476   000501 710000 3                  TRA     s:6021
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:70   

   6018  3 000477   100011 633500                    EPPR3   9,,PR1
         3 000500   200024 453500                    STP3    CAND_KEY$,,AUTO

      474     6021    6                    IF GIVEN$KEY.BYTES ~= CAND$KEY.BYTES THEN DO;

   6021  3 000501   200022 473500                    LDP3    GIVEN_KEY$,,AUTO
         3 000502   300000 236100                    LDQ     0,,PR3
         3 000503   000033 772000                    QRL     27
         3 000504   200024 474500                    LDP4    CAND_KEY$,,AUTO
         3 000505   000000 621006                    EAX1    0,QL
         3 000506   400000 236100                    LDQ     0,,PR4
         3 000507   000033 772000                    QRL     27
         3 000510   000000 622006                    EAX2    0,QL
         3 000511   040140 106540                    CMPC    fill='040'O
         3 000512   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 000513   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         3 000514   000521 600000 3                  TZE     s:6029

      475     6022                            /* Force STREAM.PORT$ to NIL */
      476     6023    6                       CALL VDA$FDETACH (STREAM)

   6023  3 000515   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000516   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000517   000000 701000 xent               TSX1    VDA$FDETACH
         3 000520   000541 702000 3                  TSX2    FDETACH_FAILED

      477     6024    6                         ALTRET (FDETACH_FAILED);
      478     6025    6                       END;

      479     6026    5                    END TEST_ORIGINAL_PORT;

      480     6027    4              END FIND_NAMED_FILE;

      481     6028
      482     6029    3           IF FILE$KEY.DCB# ~= 0

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:71   
   6029  3 000521   200021 470500                    LDP0    @KEY,,AUTO
         3 000522   000001 471500                    LDP1    1,,PR0
         3 000523   100021 220100                    LDX0    17,,PR1
         3 000524   000531 601000 3                  TNZ     s:6035
         3 000525   200003 473500                    LDP3    @STREAM,,AUTO
         3 000526   300001 236100                    LDQ     1,,PR3
         3 000527   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000530   000536 601000 3                  TNZ     s:6040

      483     6030    4             OR STREAM.PORT$ = ADDR(NIL) THEN DO;

      484     6031                   /*
      485     6032                   *  Specific DCB requested, or no match found:
      486     6033                   *    build a new port.
      487     6034                   */
      488     6035    4              CALL BUILD_PORT (KEY)

   6035  3 000531   200021 236100                    LDQ     @KEY,,AUTO
         3 000532   200027 756100                    STQ     PORT_KEY$+1,,AUTO
         3 000533   000543 701000 3                  TSX1    BUILD_PORT
         3 000534   000541 702000 3                  TSX2    FDETACH_FAILED

      489     6036    4                ALTRET (BUILD_PORT_FAILED);
      490     6037    4              END;

   6037  3 000535   000537 710000 3                  TRA     s:6044

      491     6038    4           ELSE DO;

      492     6039                   %INCREMENT (INDX=%STG_OPEN_PORT_SHARED);

   6040  3 000536   000075 054000 xsym               AOS     VD_6E+61

      493     6042    4              END;

      494     6043
      495     6044    3           RETURN;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:72   

   6044  3 000537   200020 221300                    LDX1  ! DO_THE_CALL+2,,AUTO
         3 000540   000001 702211                    TSX2  ! 1,X1

   6044  3 000541                       FDETACH_FAI* null
   6044  3 000541                       BUILD_PORT_* null
      496     6045
      497     6046
      498     6047
      499     6048    3   FDETACH_FAILED: ;
      500     6049    3   BUILD_PORT_FAILED: ;
      501     6050    3           ALTRETURN;

   6050  3 000541   200020 221300                    LDX1  ! DO_THE_CALL+2,,AUTO
         3 000542   000000 702211                    TSX2  ! 0,X1

      502     6051
      503     6052    3   END FIND_PORT;
      504     6053
      505     6054        %BOX (TITLE=BUILD_PORT, PAGE=YES);
              6062    3
              6066    3   /***************************************************************************
              6068    3    *                                                                         *
              6072    3            *                                 BUILD_PORT                             *
              6074    3            *                                                                        *
              6076    3          ***************************************************************************/

      506     6080
      507     6081        /*I** NAME: BUILD_PORT
      508     6082            PARAMETERS:
      509     6083                KEY - VD$KEY to build port for.  This must point to
      510     6084                    a remote VD$FILE_KEY.  If VD$FILE_KEY has a non-0 .DCB,
      511     6085                    we'll attach the port to that DCB; the VD$FILE_KEY's
      512     6086                    fid parts should match those of the DCB, however,
      513     6087                    they're ignored, and the port's key is built from the
      514     6088                    DCB and JIT.
      515     6089            INPUT:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:73   
      516     6090                STREAM - The VD$STREAM to build a port for; we only use STREAM.PORT$.
      517     6091                VD_6E.PORT_HEAD$, .PORT_TAIL$ - Ptrs to head and tail of
      518     6092                    current chain of VD$PORTs.
      519     6093            OUTPUT:
      520     6094                STREAM.PORT$ will point to a new port with file-level key KEY.
      521     6095                    If a port was passed via STREAM.PORT$ at entry,
      522     6096                    that port's ref count will be decremented (and if
      523     6097                    no other streams ref it, it will be freed), and the new
      524     6098                    port's ref count will be incremented; this reflects the
      525     6099                    detachment of the stream from the old port and the
      526     6100                    reattachment of the stream to the new port.
      527     6101            DESCRIPTION:
      528     6102                If STREAM.PORT$ is nil, just allocate a new port for KEY.
      529     6103                If STREAM.PORT$ is not nil, first detach STREAM from PORT$:
      530     6104                    decrement the port's ref count and close and deallocate it
      531     6105                    if appropriate.  Then we'll allocate a new VD$PORT for KEY,
      532     6106                    and attach STREAM to it.
      533     6107        */
      534     6108
      535     6109    2   BUILD_PORT: PROC (KEY) ALTRET;

   6109  3 000543   200026 741300       BUILD_PORT   STX1  ! STRUCTURE_LEVEL$+1,,AUTO

      536     6110
      537     6111        %VD$KEY (NAME=KEY, STCLASS=PARAM);
      538     6125
      539     6126
      540     6127    3   DCL NEW_PORT$ PTR;
      541     6128    3   DCL REQ_DCB$ PTR;
      542     6129    3   DCL FILE_KEY$ PTR;
      543     6130
      544     6131
      545     6132        %VD$FILE_KEY (NAME=FILE$KEY, STCLASS="BASED(FILE_KEY$)");
      546     6181        %VD$PORT (NAME=NEW$PORT, STCLASS="BASED(NEW_PORT$)");
      547     6279        %F$DCB (DCBN=REQ$DCB, STCLASS="BASED(REQ_DCB$)");
      548     6336        %VD$TEXTC_REMOTE;
      549     6397
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:74   
      550     6398
      551     6399
      552     6400    4           IF STREAM.PORT$ ~= ADDR(NIL) THEN DO;

   6400  3 000544   200003 470500                    LDP0    @STREAM,,AUTO
         3 000545   000001 236100                    LDQ     1,,PR0
         3 000546   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000547   000554 600000 3                  TZE     s:6405

      553     6401    4              CALL VDA$FDETACH (STREAM)

   6401  3 000550   200003 630500                    EPPR0   @STREAM,,AUTO
         3 000551   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000552   000000 701000 xent               TSX1    VDA$FDETACH
         3 000553   000725 702000 3                  TSX2    FDETACH_FAILED

      554     6402    4                ALTRET (FDETACH_FAILED);
      555     6403    4              END;

      556     6404
      557     6405    3           CALL VDG$OALLOC (%CLS_PORT, STREAM.PORT$)

   6405  3 000554   200003 236100                    LDQ     @STREAM,,AUTO
         3 000555   000001 036003                    ADLQ    1,DU
         3 000556   000002 235000 4                  LDA     2
         3 000557   200150 757100                    STAQ    FLV+1,,AUTO
         3 000560   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000561   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000562   000000 701000 xent               TSX1    VDG$OALLOC
         3 000563   000725 702000 3                  TSX2    FDETACH_FAILED

      558     6406    3             ALTRET (OALLOC_FAILED);
      559     6407    3           NEW_PORT$ = STREAM.PORT$;

   6407  3 000564   200003 470500                    LDP0    @STREAM,,AUTO
         3 000565   000001 236100                    LDQ     1,,PR0
         3 000566   200030 756100                    STQ     NEW_PORT$,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:75   

      560     6408    3           FILE_KEY$ = KEY.V$;

   6408  3 000567   200027 471500                    LDP1    @KEY,,AUTO
         3 000570   100001 236100                    LDQ     1,,PR1
         3 000571   200032 756100                    STQ     FILE_KEY$,,AUTO

      561     6409
      562     6410    3           NEW$PORT.REFS# = 1;

   6410  3 000572   000001 220003                    LDX0    1,DU
         3 000573   200030 473500                    LDP3    NEW_PORT$,,AUTO
         3 000574   300003 740100                    STX0    3,,PR3

      563     6411    4           IF FILE$KEY.DCB# ~= 0 THEN DO;

   6411  3 000575   200032 474500                    LDP4    FILE_KEY$,,AUTO
         3 000576   400021 221100                    LDX1    17,,PR4
         3 000577   000701 600000 3                  TZE     s:6451

      564     6412    4              NEW$PORT.DCB# = FILE$KEY.DCB#;

   6412  3 000600   300004 441100                    SXL1    4,,PR3

      565     6413    4              REQ_DCB$ = DCBADDR(FILE$KEY.DCB#);

   6413  3 000601   000003 475400 4                  LDP5    3
         3 000602   500000 476500                    LDP6    0,,PR5
         3 000603   400021 222100                    LDX2    17,,PR4
         3 000604   600000 236112                    LDQ     0,X2,PR6
         3 000605   200031 756100                    STQ     REQ_DCB$,,AUTO

      566     6414                   /* Reload VD$FILE_KEY fields from DCB */
      567     6415    4              FILE$KEY.UNIQUE.ACCT = REQ$DCB.ACCT#;

   6415  3 000606   200031 477500                    LDP7    REQ_DCB$,,AUTO
         3 000607   040100 100500                    MLR     fill='040'O
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:76   
         3 000610   700020 000010                    ADSC9   16,,PR7                  cn=0,n=8
         3 000611   400002 200010                    ADSC9   2,,PR4                   cn=1,n=8

      568     6416    4              FILE$KEY.PSN = REQ$DCB.PSN#;

   6416  3 000612   040100 100500                    MLR     fill='040'O
         3 000613   700024 000006                    ADSC9   20,,PR7                  cn=0,n=6
         3 000614   400015 400006                    ADSC9   13,,PR4                  cn=2,n=6

      569     6417    5              IF FILE$KEY.UNIQUE.ACCT = ' ' THEN DO;

   6417  3 000615   040000 106500                    CMPC    fill='040'O
         3 000616   400002 200010                    ADSC9   2,,PR4                   cn=1,n=8
         3 000617   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 000620   000647 601000 3                  TNZ     s:6426

      570     6418    5                 IF REQ$DCB.NAME#.L >= 1

   6418  3 000621   700010 236100                    LDQ     8,,PR7
         3 000622   777000 316003                    CANQ    -512,DU
         3 000623   000634 600000 3                  TZE     s:6422
         3 000624   000777 376003                    ANQ     511,DU
         3 000625   000052 116003                    CMPQ    42,DU
         3 000626   000634 601000 3                  TNZ     s:6422

      571     6419    5                   AND SUBSTR(REQ$DCB.NAME#.C, 0, 1) = %CHR_TEMP_FILE THEN
      572     6420    5                    FILE$KEY.UNIQUE.ACCT = B$JIT.ACCN;

   6420  3 000627   000000 470400 xsym               LDP0    B$JIT$
         3 000630   040100 100500                    MLR     fill='040'O
         3 000631   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
         3 000632   400002 200010                    ADSC9   2,,PR4                   cn=1,n=8
         3 000633   000640 710000 3                  TRA     s:6423

      573     6421    5                 ELSE
      574     6422    5                    FILE$KEY.UNIQUE.ACCT = B$JIT.FACCN;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:77   
   6422  3 000634   000000 470400 xsym               LDP0    B$JIT$
         3 000635   040100 100500                    MLR     fill='040'O
         3 000636   000006 000010                    ADSC9   6,,PR0                   cn=0,n=8
         3 000637   400002 200010                    ADSC9   2,,PR4                   cn=1,n=8

      575     6423    5                 IF (REQ$DCB.PSN# = ' ') THEN

   6423  3 000640   040000 106500                    CMPC    fill='040'O
         3 000641   700024 000006                    ADSC9   20,,PR7                  cn=0,n=6
         3 000642   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 000643   000647 601000 3                  TNZ     s:6426

      576     6424    5                    FILE$KEY.PSN = B$JIT.FPSN;

   6424  3 000644   040100 100500                    MLR     fill='040'O
         3 000645   000021 000006                    ADSC9   17,,PR0                  cn=0,n=6
         3 000646   400015 400006                    ADSC9   13,,PR4                  cn=2,n=6

      577     6425    5                 END;

      578     6426    4              FILE$KEY.UNIQUE.FNAME.LENGTH# = REQ$DCB.NAME#.L;

   6426  3 000647   700010 236100                    LDQ     8,,PR7
         3 000650   000011 772000                    QRL     9
         3 000651   400004 552120                    STBQ    4,'20'O,PR4

      579     6427    4              FILE$KEY.UNIQUE.FNAME.BYTES =

   6427  3 000652   700010 236100                    LDQ     8,,PR7
         3 000653   000033 772000                    QRL     27
         3 000654   000000 621006                    EAX1    0,QL
         3 000655   040100 100540                    MLR     fill='040'O
         3 000656   700010 200011                    ADSC9   8,,PR7                   cn=1,n=*X1
         3 000657   400004 400037                    ADSC9   4,,PR4                   cn=2,n=31

      580     6428    4                SUBSTR(REQ$DCB.NAME#.C, 0, REQ$DCB.NAME#.L);
      581     6429    4              FILE$KEY.LENGTH# = LENGTHC(FILE$KEY.UNIQUE.ACCT) +
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:78   

   6429  3 000660   400004 236100                    LDQ     4,,PR4
         3 000661   000022 772000                    QRL     18
         3 000662   000777 376007                    ANQ     511,DL
         3 000663   000011 036007                    ADLQ    9,DL
         3 000664   000033 736000                    QLS     27
         3 000665   400002 552140                    STBQ    2,'40'O,PR4

      582     6430    4                LENGTHC(FILE$KEY.UNIQUE.FNAME.LENGTH#) +
      583     6431    4                FILE$KEY.UNIQUE.FNAME.LENGTH#;
      584     6432    4              FILE$KEY.ASN# = REQ$DCB.ASN#;

   6432  3 000666   700032 236100                    LDQ     26,,PR7
         3 000667   000011 736000                    QLS     9
         3 000670   400014 552120                    STBQ    12,'20'O,PR4

      585     6433    4              FILE$KEY.RES = REQ$DCB.RES#;

   6433  3 000671   040100 100500                    MLR     fill='040'O
         3 000672   700026 000004                    ADSC9   22,,PR7                  cn=0,n=4
         3 000673   400014 400004                    ADSC9   12,,PR4                  cn=2,n=4

      586     6434    4              FILE$KEY.PASS = REQ$DCB.PASS#;

   6434  3 000674   700022 237100                    LDAQ    18,,PR7
         3 000675   400017 755100                    STA     15,,PR4
         3 000676   400020 756100                    STQ     16,,PR4

      587     6435    4              FILE$KEY.DCB# = 0;   /* Zap the DCB ref */

   6435  3 000677   000000 221003                    LDX1    0,DU
         3 000700   400021 741100                    STX1    17,,PR4

      588     6436    4              END;

      589     6437
      590     6438                %COPYKEY (FKEY=KEY, TKEY=NEW$PORT.FILE_KEY);
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:79   

   6451  3 000701   000100 100500                    MLR     fill='000'O
         3 000702   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         3 000703   300010 000010                    ADSC9   8,,PR3                   cn=0,n=8

   6451  3 000704   100000 721100                    LXL1    0,,PR1
         3 000705   000002 101003                    CMPX1   2,DU
         3 000706   000723 601000 3                  TNZ     s:6455

   6451  3 000707   100001 470500                    LDP0    1,,PR1
         3 000710   200030 236100                    LDQ     NEW_PORT$,,AUTO
         3 000711   000011 036003                    ADLQ    9,DU
         3 000712   200151 756100                    STQ     FLV+2,,AUTO
         3 000713   200150 450500                    STP0    FLV+1,,AUTO
         3 000714   200150 630500                    EPPR0   FLV+1,,AUTO
         3 000715   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000716   000000 701000 xent               TSX1    VDG$OCOPY
         3 000717   000721 702000 3                  TSX2    s:6452
         3 000720   000723 710000 3                  TRA     s:6455

   6452  3 000721   200026 221300                    LDX1  ! STRUCTURE_LEVEL$+1,,AUTO
         3 000722   000000 702211                    TSX2  ! 0,X1

      591     6454
      592     6455    3           RETURN;

   6455  3 000723   200026 221300                    LDX1  ! STRUCTURE_LEVEL$+1,,AUTO
         3 000724   000001 702211                    TSX2  ! 1,X1

   6451  3 000725                       FDETACH_FAI* null
   6451  3 000725                       OALLOC_FAIL* null
      593     6456
      594     6457
      595     6458    3   FDETACH_FAILED: ;
      596     6459    3   OALLOC_FAILED: ;
      597     6460    3           ALTRETURN;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:80   
   6460  3 000725   200026 221300                    LDX1  ! STRUCTURE_LEVEL$+1,,AUTO
         3 000726   000000 702211                    TSX2  ! 0,X1

      598     6461
      599     6462    3   END BUILD_PORT;
      600     6463
      601     6464
      602     6465    2   END FILE_LEVEL_LOCATION;
      603     6466
      604     6467                %BOX (TITLE=FILE_LEVEL_OPEN, PAGE=YES);
              6475    2
              6479    2   /***************************************************************************
              6481    2    *                                                                         *
              6485    2            *                              FILE_LEVEL_OPEN                           *
              6487    2            *                                                                        *
              6489    2          ***************************************************************************/

      605     6493
      606     6494        /*I* NAME: FILE_LEVEL_OPEN
      607     6495            PARAMETERS:
      608     6496                None.
      609     6497            INPUT:
      610     6498                STREAM must be positioned to the file to open.
      611     6499                PORT must be positioned to the internal or external file to
      612     6500                    open.  By positioned, we mean PORT.FILE__KEY
      613     6501                    must contain the file key to open.  The file may or may
      614     6502                    not exist.  .SPEC and .DATA at %LVL_FILE may or may not
      615     6503                    contain info (perhaps from a previous opening of the file).
      616     6504                    PORT may currently be open or closed to the file.
      617     6505                    If closed, PORT may or may not have a DCB attached; if it
      618     6506                    does, then the DCB has already been !SET to the fid to
      619     6507                    open to only if PORT's file-level Key, which must be
      620     6508                    a VD$FILE_KEY, has a non-0 VD$FILE_KEY.DCB#.
      621     6509                OPTIONS must be given; see description for the main routine
      622     6510                    (except it's not optional here).
      623     6511            OUTPUT:
      624     6512                If the PORT is currently closed, we'll open it:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:81   
      625     6513                    PORT.DCB# and PORT.LEVEL.INTERNAL$ (%LVL_FILE) will be set
      626     6514                        appropriately.
      627     6515                    PORT.EXIST#, .INTRINSIC_PROTECT, and .STRUCTURE$ will
      628     6516                        be set appropriately.
      629     6517                    PORT.FIT$ will point to a copy of the file's FIT, if any.
      630     6518                    PORT.SPEC and .DATA$ at %LVL_FILE will be set appropriately.
      631     6519                STREAM.PROTECTs at all levels will be set appropriately.
      632     6520            DESCRIPTION:
      633     6521                If PORT is already open, just check for an existence conflict:
      634     6522                    error is user says NEW but PORT already open to file.
      635     6523                If PORT is closed, open it:
      636     6524                    Find it internal or external.  We only look internal if
      637     6525                        the file key matches our template ("x6Edit_<dir>").
      638     6526                        If we don't find it internal:
      639     6527                            If this is a create open, and the file key matches
      640     6528                                the template, the first char matches the
      641     6529                                directory's FILE_STCLASS, and the first char isn't
      642     6530                                %FSTCL_EXTERNAL, then create the file internal.
      643     6531                            Else open/create the file external.
      644     6532                    Call the appropriate routine to open the file internal or
      645     6533                        external.
      646     6534                Merge info from the Structure and PORT into STREAM.
      647     6535                Check for a protection conflict:  if for some reason we can't
      648     6536                    give the user write access to the file when s/he requests
      649     6537                    it, generate a warning message.
      650     6538        */
      651     6539
      652     6540    1   FILE_LEVEL_OPEN: PROC ALTRET;

   6540  3 000727   200012 741300       FILE_LEVEL_* STX1  ! VD_NUMBER$+1,,AUTO

      653     6541
      654     6542
      655     6543        /*
      656     6544        *   The following arrays are used when merging the protect flags from
      657     6545        *       the VD$STRUCTURE_LEVEL into the stream.
      658     6546        *   PROTECT_FLAGS_FOR_BOOL uses a bit(1) flag as a subscript:
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:82   
      659     6547        *       %TRUE yields all 1-bits.
      660     6548        *   PROTECT_FLAGS_FOR_OPTION uses OPTIONS.PROTECT# as a subscript:
      661     6549        *       %PROTECT yields all 1-bits.
      662     6550        */
      663     6551    2   DCL PROTECT_FLAGS_FOR_BOOL (0:1) BIT(%(CO_DATA+1)) CONSTANT
      664     6552    2       INIT (%CLEAR, %CO_ALL_BITS);
      665     6553    2   DCL PROTECT_FLAGS_FOR_OPTION (0:7) BIT(%(CO_DATA+1)) CONSTANT
      666     6554    2       INIT (%CLEAR, %CO_ALL_BITS, %CLEAR*0);
      667     6555
      668     6556
      669     6557
      670     6558    2   DCL DIR_KEY CHAR(%MXNB_FILE_NAME);
      671     6559    2   DCL STRUCTURE_SPEC$ PTR;
      672     6560    2   DCL STRUCTURE_LEVEL_NODE$ PTR;
      673     6561    2   DCL STRUCTURE_LEVEL$ PTR;
      674     6562    2   DCL PORT_KEY$ PTR;
      675     6563    2   DCL PORT_KEY_NAME$ PTR;
      676     6564    2   DCL DIR_NODE$ PTR;
      677     6565    2   DCL FILE_NODE$ PTR;
      678     6566    2   DCL FILE_NODE_KEY_NAME$ PTR;
      679     6567    2   DCL FILE_STCLASS CHAR(%LENGTHC(FSTCL_INTERNAL));
      680     6568    2   DCL PFN_INDEX SBIN;
      681     6569    2   DCL WHERE_TO_INSERT_NEW_FILE$ PTR;
      682     6570    2   DCL ENTIRE_STRUCTURE_PROTECTED BIT(1) ALIGNED;
      683     6571    2   DCL CONSEC_BY_ACCIDENT BIT(1) ALIGNED;
      684     6572
      685     6573
      686     6574        %VD$FILE_NODE (NAME=STRUCTURE, STCLASS="BASED(OPTIONS.STRUCTURE$)");
      687     6667        %VD$STRUCTURE_SPEC (NAME=STRUCTURE$SPEC, STCLASS="BASED(STRUCTURE_SPEC$)");
      688     6704        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
      689     6705            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
      690     6798        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL, STCLASS="BASED(STRUCTURE_LEVEL$)");
      691     6845        %VD$FILE_KEY (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
      692     6894        %VD$TEXTC (NAME=PORT$KEY_NAME, STCLASS="BASED(PORT_KEY_NAME$)",
      693     6895            ALIGNMENT=CALIGNED);
      694     6918        %VD$DIR_NODE (NAME=DIR$NODE, STCLASS="BASED(DIR_NODE$)");
      695     6956        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:83   
      696     7049        %VD$TEXTC (NAME=FILE$NODE_KEY_NAME, STCLASS="BASED(FILE_NODE_KEY_NAME$)",
      697     7050            ALIGNMENT=CALIGNED);
      698     7073        %VD$FILE_KEY;
      699     7122        %F$DCB;
      700     7179
      701     7180
      702     7181
      703     7182    2           IF STREAM.PORT$ = ADDR(NIL)

   7182  3 000730   200003 470500                    LDP0    @STREAM,,AUTO
         3 000731   000001 236100                    LDQ     1,,PR0
         3 000732   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000733   000741 600000 3                  TZE     s:7184
         3 000734   000001 471500                    LDP1    1,,PR0
         3 000735   000000 106500                    CMPC    fill='000'O
         3 000736   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000737   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 000740   000744 601000 3                  TNZ     s:7186

      704     7183    2             OR PORT.FILE_KEY = %CLEAR THEN
      705     7184    2              CALL VDG$ESCREECH;

   7184  3 000741   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000742   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000743   000000 011000                    NOP     0

      706     7185
      707     7186    2           IF OPTIONS.PROTECT# = %PROTECT

   7186  3 000744   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 000745   000002 220100                    LDX0    2,,PR0
         3 000746   000001 100003                    CMPX0   1,DU
         3 000747   000753 601000 3                  TNZ     s:7190
         3 000750   000002 721100                    LXL1    2,,PR0
         3 000751   000001 101003                    CMPX1   1,DU
         3 000752   001442 600000 3                  TZE     PROTECT_CONFLICTS_W_NEW_FAILURE

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:84   
      708     7187    2             AND OPTIONS.EXIST# = %EX_NEW THEN
      709     7188    2              GOTO PROTECT_CONFLICTS_W_NEW_FAILURE;
      710     7189
      711     7190    2           STRUCTURE_SPEC$ = STRUCTURE.DESC.SPEC.V$;

   7190  3 000753   000000 471500                    LDP1    0,,PR0
         3 000754   100007 236100                    LDQ     7,,PR1
         3 000755   200023 756100                    STQ     STRUCTURE_SPEC$,,AUTO

      712     7191
      713     7192    2           IF PORT.EXIST# ~= 0 THEN

   7192  3 000756   200003 473500                    LDP3    @STREAM,,AUTO
         3 000757   300001 474500                    LDP4    1,,PR3
         3 000760   400003 721100                    LXL1    3,,PR4
         3 000761   000766 600000 3                  TZE     OPEN_THE_PORT

      714     7193    3   PORT_ALREADY_OPEN: DO;

   7193  3 000762                       PORT_ALREAD* null
      715     7194    3              IF OPTIONS.EXIST# = %EX_NEW THEN

   7194  3 000762   000002 722100                    LXL2    2,,PR0
         3 000763   000001 102003                    CMPX2   1,DU
         3 000764   001450 600000 3                  TZE     EXIST_CONFLICT_FAILURE

      716     7195    3                 GOTO EXIST_CONFLICT_FAILURE;
      717     7196    3              END PORT_ALREADY_OPEN;

   7196  3 000765   001220 710000 3                  TRA     s:7288

      718     7197
      719     7198    2           ELSE
      720     7199    3   OPEN_THE_PORT: DO;

   7199  3 000766                       OPEN_THE_PO* null
      721     7200                   /*  Port is currently closed */
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:85   
      722     7201    3              PORT_KEY$ = PORT.FILE_KEY.V$;

   7201  3 000766   400011 236100                    LDQ     9,,PR4
         3 000767   200026 756100                    STQ     PORT_KEY$,,AUTO

      723     7202    3              PORT_KEY_NAME$ = ADDR(PORT$KEY.UNIQUE.FNAME);

   7202  3 000770   000004 036000 4                  ADLQ    4
         3 000771   200027 756100                    STQ     PORT_KEY_NAME$,,AUTO

      724     7203
      725     7204                   /*
      726     7205                   *    See if file is internal or external; if internal, find it.
      727     7206                   */
      728     7207    3              FILE_NODE$ = ADDR(NIL);    /* Assume external file */

   7207  3 000772   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000773   200031 756100                    STQ     FILE_NODE$,,AUTO

      729     7208    3              DIR_NODE$ = ADDR(NIL);

   7208  3 000774   200030 756100                    STQ     DIR_NODE$,,AUTO

      730     7209    3              WHERE_TO_INSERT_NEW_FILE$ = ADDR(NIL);

   7209  3 000775   200035 756100                    STQ     WHERE_TO_INSERT_NEW_FILE$,,AUTO

      731     7210    3              FILE_STCLASS = PORT$KEY_NAME.BYTES;

   7210  3 000776   200027 471500                    LDP1    PORT_KEY_NAME$,,AUTO
         3 000777   000100 101500                    MRL     fill='000'O
         3 001000   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001001   200150 000002                    ADSC9   FLV+1,,AUTO              cn=0,n=2
         3 001002   200150 220100                    LDX0    FLV+1,,AUTO
         3 001003   040100 100540                    MLR     fill='040'O
         3 001004   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         3 001005   200033 000001                    ADSC9   FILE_STCLASS,,AUTO       cn=0,n=1
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:86   

      732     7211
      733     7212    3              IF PORT$KEY.DCB# = 0

   7212  3 001006   200026 474500                    LDP4    PORT_KEY$,,AUTO
         3 001007   400021 220100                    LDX0    17,,PR4
         3 001010   001171 601000 3                  TNZ     s:7269
         3 001011   040000 106500                    CMPC    fill='040'O
         3 001012   400015 400006                    ADSC9   13,,PR4                  cn=2,n=6
         3 001013   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001014   001171 601000 3                  TNZ     s:7269
         3 001015   040000 106500                    CMPC    fill='040'O
         3 001016   400002 200010                    ADSC9   2,,PR4                   cn=1,n=8
         3 001017   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001020   001171 601000 3                  TNZ     s:7269
         3 001021   200033 236100                    LDQ     FILE_STCLASS,,AUTO
         3 001022   777000 376003                    ANQ     -512,DU
         3 001023   072000 116003                    CMPQ    29696,DU
         3 001024   001171 600000 3                  TZE     s:7269
         3 001025   000100 101500                    MRL     fill='000'O
         3 001026   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001027   200150 000004                    ADSC9   FLV+1,,AUTO              cn=0,n=4
         3 001030   200150 236100                    LDQ     FLV+1,,AUTO
         3 001031   000007 116007                    CMPQ    7,DL
         3 001032   001171 604000 3                  TMI     s:7269
         3 001033   000100 101500                    MRL     fill='000'O
         3 001034   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001035   200151 000002                    ADSC9   FLV+2,,AUTO              cn=0,n=2
         3 001036   200151 220100                    LDX0    FLV+2,,AUTO
         3 001037   040000 106500                    CMPC    fill='040'O
         3 001040   100000 400006                    ADSC9   0,,PR1                   cn=2,n=6
         3 001041   000106 000006 1                  ADSC9   DEFAULT_KEY_TYPES_FOR_ORGS+4 cn=0,n=6
         3 001042   001171 601000 3                  TNZ     s:7269

      734     7213    3                AND PORT$KEY.PSN = ' ' AND PORT$KEY.UNIQUE.ACCT = ' '
      735     7214    3                AND FILE_STCLASS ~= %FSTCL_EXTERNAL
      736     7215    3                AND PORT$KEY_NAME.LENGTH# >= LENGTHC(FILE_STCLASS) +
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:87   
      737     7216    3                %LENGTHC(PFK_CONSTANT)
      738     7217    3                AND SUBSTR(PORT$KEY_NAME.BYTES, LENGTHC(FILE_STCLASS),
      739     7218    3                %LENGTHC(PFK_CONSTANT)) = %PFK_CONSTANT THEN
      740     7219    4   TEST_FOR_INTERNAL: DO;

   7219  3 001043                       TEST_FOR_IN* null
      741     7220    4                 CALL INDEX (PFN_INDEX, %CHR_UNDERSCORE, PORT$KEY_NAME.BYTES,

   7220  3 001043   000100 101500                    MRL     fill='000'O
         3 001044   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001045   200150 000002                    ADSC9   FLV+1,,AUTO              cn=0,n=2
         3 001046   200150 220100                    LDX0    FLV+1,,AUTO
         3 001047   777771 621010                    EAX1    -7,X0
         3 001050   000000 124540                    SCM     mask='000'O
         3 001051   100002 000011                    ADSC9   2,,PR1                   cn=0,n=*X1
         3 001052   000005 000001 4                  ADSC9   5                        cn=0,n=1
         3 001053   200034 000100                    ARG     PFN_INDEX,,AUTO
         3 001054   000007 236007                    LDQ     7,DL
         3 001055   200034 056100                    ASQ     PFN_INDEX,,AUTO

      742     7221    4                   LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT));
      743     7222    4                 DIR_KEY = SUBSTR(PORT$KEY_NAME.BYTES,

   7222  3 001056   000100 101500                    MRL     fill='000'O
         3 001057   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001060   200150 000002                    ADSC9   FLV+1,,AUTO              cn=0,n=2
         3 001061   200150 220100                    LDX0    FLV+1,,AUTO
         3 001062   200034 721100                    LXL1    PFN_INDEX,,AUTO
         3 001063   777771 622011                    EAX2    -7,X1
         3 001064   040100 100540                    MLR     fill='040'O
         3 001065   100002 000012                    ADSC9   2,,PR1                   cn=0,n=*X2
         3 001066   200013 000037                    ADSC9   DIR_KEY,,AUTO            cn=0,n=31

      744     7223    4                   LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT),
      745     7224    4                   PFN_INDEX - (LENGTHC(FILE_STCLASS) + %LENGTHC(PFK_CONSTANT)));
      746     7225    4                 DIR_NODE$ = VD_6E.WS.INTERNAL_DIR$;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:88   
   7225  3 001067   000017 236000 xsym               LDQ     VD_6E+15
         3 001070   200030 756100                    STQ     DIR_NODE$,,AUTO

      747     7226    4   FIND_INTERNAL_DIR_NODE:
      748     7227    5                 DO WHILE DIR_NODE$ ~= ADDR(NIL);

   7227  3 001071   001110 710000 3     FIND_INTERN* TRA     s:7234

      749     7228    5                    IF DIR$NODE.KEY = DIR_KEY

   7228  3 001072   200030 470500                    LDP0    DIR_NODE$,,AUTO
         3 001073   040100 106500                    CMPC    fill='040'O
         3 001074   000003 000037                    ADSC9   3,,PR0                   cn=0,n=31
         3 001075   200013 000037                    ADSC9   DIR_KEY,,AUTO            cn=0,n=31
         3 001076   001106 601000 3                  TNZ     s:7233
         3 001077   200033 236100                    LDQ     FILE_STCLASS,,AUTO
         3 001100   000013 676100                    ERQ     11,,PR0
         3 001101   777000 376003                    ANQ     -512,DU
         3 001102   001106 601000 3                  TNZ     s:7233

      750     7229    6                      AND FILE_STCLASS = DIR$NODE.FILE_STCLASS THEN DO;

      751     7230    6                       FILE_NODE$ = DIR$NODE.HEAD$;

   7230  3 001103   000015 236100                    LDQ     13,,PR0
         3 001104   200031 756100                    STQ     FILE_NODE$,,AUTO

      752     7231    6                       EXIT FIND_INTERNAL_DIR_NODE;

   7231  3 001105   001112 710000 3                  TRA     FIND_INTERNAL_FILE_NODE

      753     7232    6                       END;
      754     7233    5                    DIR_NODE$ = DIR$NODE.FLINK$;

   7233  3 001106   000002 236100                    LDQ     2,,PR0
         3 001107   200030 756100                    STQ     DIR_NODE$,,AUTO

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:89   
      755     7234    5                    END FIND_INTERNAL_DIR_NODE;

   7234  3 001110   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001111   001072 601000 3                  TNZ     s:7228

      756     7235
      757     7236    4   FIND_INTERNAL_FILE_NODE:
      758     7237    5                 DO WHILE FILE_NODE$ ~= ADDR(NIL);

   7237  3 001112   001166 710000 3     FIND_INTERN* TRA     s:7251

      759     7238    6                    IF FILE$NODE.DESC.KEY ~= %CLEAR THEN DO;

   7238  3 001113   200031 470500                    LDP0    FILE_NODE$,,AUTO
         3 001114   000000 106500                    CMPC    fill='000'O
         3 001115   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         3 001116   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         3 001117   001164 600000 3                  TZE     s:7250

      760     7239    6                       FILE_NODE_KEY_NAME$ = ADDR(FILE$NODE.DESC.KEY.V$ ->

   7239  3 001120   000005 471500                    LDP1    5,,PR0
         3 001121   200150 451500                    STP1    FLV+1,,AUTO
         3 001122   200150 236100                    LDQ     FLV+1,,AUTO
         3 001123   000004 036000 4                  ADLQ    4
         3 001124   200032 756100                    STQ     FILE_NODE_KEY_NAME$,,AUTO

      761     7240    6                         VD$FILE_KEY.UNIQUE.FNAME);
      762     7241    6                       IF FILE$NODE_KEY_NAME.BYTES = PORT$KEY_NAME.BYTES THEN

   7241  3 001125   200032 471500                    LDP1    FILE_NODE_KEY_NAME$,,AUTO
         3 001126   000100 101500                    MRL     fill='000'O
         3 001127   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001130   200150 000002                    ADSC9   FLV+1,,AUTO              cn=0,n=2
         3 001131   200150 220100                    LDX0    FLV+1,,AUTO
         3 001132   200027 473500                    LDP3    PORT_KEY_NAME$,,AUTO
         3 001133   000100 101500                    MRL     fill='000'O
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:90   
         3 001134   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         3 001135   200151 000002                    ADSC9   FLV+2,,AUTO              cn=0,n=2
         3 001136   200151 221100                    LDX1    FLV+2,,AUTO
         3 001137   040140 106540                    CMPC    fill='040'O
         3 001140   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         3 001141   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 001142   001171 600000 3                  TZE     s:7269

      763     7242    6                          EXIT FIND_INTERNAL_FILE_NODE;
      764     7243    7                       IF FILE$NODE_KEY_NAME.BYTES < PORT$KEY_NAME.BYTES THEN DO;

   7243  3 001143   000100 101500                    MRL     fill='000'O
         3 001144   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         3 001145   200150 000002                    ADSC9   FLV+1,,AUTO              cn=0,n=2
         3 001146   200150 220100                    LDX0    FLV+1,,AUTO
         3 001147   000100 101500                    MRL     fill='000'O
         3 001150   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         3 001151   200151 000002                    ADSC9   FLV+2,,AUTO              cn=0,n=2
         3 001152   200151 221100                    LDX1    FLV+2,,AUTO
         3 001153   040140 106540                    CMPC    fill='040'O
         3 001154   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         3 001155   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         3 001156   001164 603000 3                  TRC     s:7250

      765     7244                            /* File not found, but this is where it would go */
      766     7245    7                          WHERE_TO_INSERT_NEW_FILE$ = FILE_NODE$;

   7245  3 001157   200031 236100                    LDQ     FILE_NODE$,,AUTO
         3 001160   200035 756100                    STQ     WHERE_TO_INSERT_NEW_FILE$,,AUTO

      767     7246    7                          FILE_NODE$ = ADDR(NIL);

   7246  3 001161   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001162   200031 756100                    STQ     FILE_NODE$,,AUTO

      768     7247    7                          EXIT FIND_INTERNAL_FILE_NODE;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:91   
   7247  3 001163   001171 710000 3                  TRA     s:7269

      769     7248    7                          END;
      770     7249    6                       END;
      771     7250    5                    FILE_NODE$ = FILE$NODE.FLINK$;

   7250  3 001164   000002 236100                    LDQ     2,,PR0
         3 001165   200031 756100                    STQ     FILE_NODE$,,AUTO

      772     7251    5                    END FIND_INTERNAL_FILE_NODE;

   7251  3 001166   200031 236100                    LDQ     FILE_NODE$,,AUTO
         3 001167   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001170   001113 601000 3                  TNZ     s:7238

      773     7252    4                 END TEST_FOR_INTERNAL;

      774     7253
      775     7254                /*
      776     7255                *    At this point:
      777     7256                *    If we found the file internally, FILE_NODE$ points to it.
      778     7257                *    If we didn't find it:
      779     7258                *        DIR_NODE$ points to the directory in which it
      780     7259                *            belongs (=NIL if it belongs external);
      781     7260                *        WHERE_TO_INSERT_NEW_FILE$ points to the file
      782     7261                *            before which the file should appear (=NIL if
      783     7262                *            the file should appear at the end of the
      784     7263                *            directory).
      785     7264                *        If this is a create-open, then create
      786     7265                *        the file internal; if not a create-open, then look
      787     7266                *        for the file external.
      788     7267                */
      789     7268
      790     7269    3              IF FILE_NODE$ ~= ADDR(NIL)

   7269  3 001171   200031 236100                    LDQ     FILE_NODE$,,AUTO
         3 001172   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:92   
         3 001173   001205 601000 3                  TNZ     s:7273
         3 001174   200030 236100                    LDQ     DIR_NODE$,,AUTO
         3 001175   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001176   001216 600000 3                  TZE     s:7278
         3 001177   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 001200   000002 720100                    LXL0    2,,PR0
         3 001201   000001 100003                    CMPX0   1,DU
         3 001202   001205 600000 3                  TZE     s:7273
         3 001203   000003 100003                    CMPX0   3,DU
         3 001204   001216 601000 3                  TNZ     s:7278

      791     7270    3                OR (DIR_NODE$ ~= ADDR(NIL)
      792     7271    3                AND (OPTIONS.EXIST# = %EX_NEW
      793     7272    4                OR OPTIONS.EXIST# = %EX_ANY)) THEN DO;

      794     7273    4                 CALL OPEN_THE_PORT_INTERNAL (FILE_NODE$,

   7273  3 001205   200030 236100                    LDQ     DIR_NODE$,,AUTO
         3 001206   200043 756100                    STQ     EXT_DCB$+1,,AUTO
         3 001207   200035 630500                    EPPR0   WHERE_TO_INSERT_NEW_FILE$,,AUTO
         3 001210   200042 450500                    STP0    PORT_KEY$+1,,AUTO
         3 001211   200031 631500                    EPPR1   FILE_NODE$,,AUTO
         3 001212   200041 451500                    STP1    CONSEC_BY_ACCIDENT+2,,AUTO
         3 001213   001460 701000 3                  TSX1    OPEN_THE_PORT_INTERNAL
         3 001214   001456 702000 3                  TSX2    OALLOC_FAILED

      795     7274    4                   WHERE_TO_INSERT_NEW_FILE$, DIR$NODE)
      796     7275    4                   ALTRET (OPEN_THE_PORT_INTERNAL_FAILED);
      797     7276    4                 END;

   7276  3 001215   001220 710000 3                  TRA     s:7288

      798     7277    4              ELSE DO;

      799     7278    4                 CALL OPEN_THE_PORT_EXTERNAL

   7278  3 001216   002003 701000 3                  TSX1    OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:93   
         3 001217   001456 702000 3                  TSX2    OALLOC_FAILED

      800     7279    4                   ALTRET (OPEN_THE_PORT_EXTERNAL_FAILED);
      801     7280    4                 END;

      802     7281    3              END OPEN_THE_PORT;

      803     7282
      804     7283
      805     7284                /*
      806     7285                *  Stream's port is now open.
      807     7286                *  Merge info from Structure and port into stream.
      808     7287                */
      809     7288    2           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$;

   7288  3 001220   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 001221   000000 471500                    LDP1    0,,PR0
         3 001222   100012 236100                    LDQ     10,,PR1
         3 001223   200024 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

      810     7289    2           ENTIRE_STRUCTURE_PROTECTED = %TRUE; /* Assume no holes */

   7289  3 001224   400000 236003                    LDQ     -131072,DU
         3 001225   200036 756100                    STQ     ENTIRE_STRUCTURE_PROTECTED,,AUTO

      811     7290    2           CONSEC_BY_ACCIDENT = %FALSE;    /* Assume user knows */

   7290  3 001226   200037 450100                    STZ     CONSEC_BY_ACCIDENT,,AUTO

      812     7291    3           DO LEVEL = %LVL_FILE TO STRUCTURE.COUNT# - 1;

   7291  3 001227   200007 450100                    STZ     LEVEL,,AUTO
         3 001230   001335 710000 3                  TRA     s:7310+1

      813     7292    3              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;

   7292  3 001231   200024 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:94   
         3 001232   000007 236100                    LDQ     7,,PR0
         3 001233   200025 756100                    STQ     STRUCTURE_LEVEL$,,AUTO

      814     7293
      815     7294    3              IF PORT.LEVEL.ORG# (LEVEL) = %ORG_CONSEC

   7294  3 001234   200003 471500                    LDP1    @STREAM,,AUTO
         3 001235   100001 473500                    LDP3    1,,PR1
         3 001236   200007 236100                    LDQ     LEVEL,,AUTO
         3 001237   000007 402007                    MPY     7,DL
         3 001240   300023 220106                    LDX0    19,QL,PR3
         3 001241   000001 100003                    CMPX0   1,DU
         3 001242   001251 601000 3                  TNZ     s:7298
         3 001243   200025 474500                    LDP4    STRUCTURE_LEVEL$,,AUTO
         3 001244   400002 721100                    LXL1    2,,PR4
         3 001245   000001 101003                    CMPX1   1,DU
         3 001246   001251 600000 3                  TZE     s:7298

      816     7295    3                AND STRUCTURE$LEVEL.ORG# ~= %ORG_CONSEC THEN
      817     7296    3                 CONSEC_BY_ACCIDENT = %TRUE;

   7296  3 001247   400000 236003                    LDQ     -131072,DU
         3 001250   200037 756100                    STQ     CONSEC_BY_ACCIDENT,,AUTO

      818     7297
      819     7298    3              STREAM.PROTECT (LEVEL) =

   7298  3 001251   300004 236100                    LDQ     4,,PR3
         3 001252   000043 772000                    QRL     35
         3 001253   200006 474500                    LDP4    @OPTIONS,,AUTO
         3 001254   200150 756100                    STQ     FLV+1,,AUTO
         3 001255   400002 236100                    LDQ     2,,PR4
         3 001256   000020 772000                    QRL     16
         3 001257   000006 376000 4                  ANQ     6
         3 001260   003100 060406                    CSL     bolr='003'O
         3 001261   000001 000004 1                  BDSC    PROTECT_FLAGS_FOR_OPTION,Q by=0,bit=0,n=4
         3 001262   200151 000044                    BDSC    FLV+2,,AUTO              by=0,bit=0,n=36
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:95   
         3 001263   200150 235100                    LDA     FLV+1,,AUTO
         3 001264   000002 735000                    ALS     2
         3 001265   003100 060405                    CSL     bolr='003'O
         3 001266   000000 000004 1                  BDSC    PROTECT_FLAGS_FOR_BOOL,A by=0,bit=0,n=4
         3 001267   200152 000044                    BDSC    FLV+3,,AUTO              by=0,bit=0,n=36
         3 001270   200152 236100                    LDQ     FLV+3,,AUTO
         3 001271   200151 276100                    ORQ     FLV+2,,AUTO
         3 001272   200025 473500                    LDP3    STRUCTURE_LEVEL$,,AUTO
         3 001273   200153 756100                    STQ     FLV+4,,AUTO
         3 001274   300004 236100                    LDQ     4,,PR3
         3 001275   740000 376003                    ANQ     -16384,DU
         3 001276   200154 756100                    STQ     FLV+5,,AUTO
         3 001277   200153 236100                    LDQ     FLV+4,,AUTO
         3 001300   200154 276100                    ORQ     FLV+5,,AUTO
         3 001301   200155 756100                    STQ     FLV+6,,AUTO
         3 001302   200007 235100                    LDA     LEVEL,,AUTO
         3 001303   000002 735000                    ALS     2
         3 001304   001306 605000 3                  TPL     s:7298+29
         3 001305   000044 035003                    ADLA    36,DU
         3 001306   003105 060500                    CSL     bolr='003'O
         3 001307   200155 000044                    BDSC    FLV+6,,AUTO              by=0,bit=0,n=36
         3 001310   100002 400004                    BDSC    2,A,PR1                  by=2,bit=0,n=4

      820     7299    3                PROTECT_FLAGS_FOR_BOOL (BITBIN(PORT.INTRINSIC_PROTECT)) |
      821     7300    3                PROTECT_FLAGS_FOR_OPTION (OPTIONS.PROTECT#) |
      822     7301    3                STRUCTURE$LEVEL.PROTECT;
      823     7302    3              IF VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)

   7302  3 001311   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         3 001312   100000 316003                    CANQ    32768,DU
         3 001313   001325 600000 3                  TZE     s:7306
         3 001314   040000 316003                    CANQ    16384,DU
         3 001315   001325 600000 3                  TZE     s:7306

      824     7303    3                AND VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE) THEN
      825     7304    3                 STREAM.PROTECT (LEVEL) = %CLEAR;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:96   
   7304  3 001316   200007 235100                    LDA     LEVEL,,AUTO
         3 001317   000002 735000                    ALS     2
         3 001320   001322 605000 3                  TPL     s:7304+4
         3 001321   000044 035003                    ADLA    36,DU
         3 001322   003105 060400                    CSL     bolr='003'O
         3 001323   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         3 001324   100002 400004                    BDSC    2,A,PR1                  by=2,bit=0,n=4

      826     7305
      827     7306    3              IF STRUCTURE$LEVEL.PROTECT ~= %CO_ALL_BITS THEN

   7306  3 001325   300004 236100                    LDQ     4,,PR3
         3 001326   740000 376003                    ANQ     -16384,DU
         3 001327   340000 116003                    CMPQ    114688,DU
         3 001330   001332 600000 3                  TZE     s:7309

      828     7307    3                 ENTIRE_STRUCTURE_PROTECTED = %FALSE;

   7307  3 001331   200036 450100                    STZ     ENTIRE_STRUCTURE_PROTECTED,,AUTO

      829     7308
      830     7309    3              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;

   7309  3 001332   000002 236100                    LDQ     2,,PR0
         3 001333   200024 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

      831     7310    3              END;

   7310  3 001334   200007 054100                    AOS     LEVEL,,AUTO
         3 001335   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 001336   000000 471500                    LDP1    0,,PR0
         3 001337   200007 236100                    LDQ     LEVEL,,AUTO
         3 001340   100014 116100                    CMPQ    12,,PR1
         3 001341   001231 604000 3                  TMI     s:7292

      832     7311
      833     7312    2           IF OPTIONS.PROTECT# = %DONT_PROTECT
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:97   

   7312  3 001342   000002 220100                    LDX0    2,,PR0
         3 001343   000002 100003                    CMPX0   2,DU
         3 001344   001412 601000 3                  TNZ     s:7324
         3 001345   200003 473500                    LDP3    @STREAM,,AUTO
         3 001346   300001 474500                    LDP4    1,,PR3
         3 001347   400004 234100                    SZN     4,,PR4
         3 001350   001353 604000 3                  TMI     s:7312+9
         3 001351   200036 234100                    SZN     ENTIRE_STRUCTURE_PROTECTED,,AUTO
         3 001352   001412 605000 3                  TPL     s:7324
         3 001353   400004 721100                    LXL1    4,,PR4
         3 001354   001362 601000 3                  TNZ     s:7316
         3 001355   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         3 001356   100000 316003                    CANQ    32768,DU
         3 001357   001362 600000 3                  TZE     s:7316
         3 001360   040000 316003                    CANQ    16384,DU
         3 001361   001412 601000 3                  TNZ     s:7324

      834     7313    2             AND (PORT.INTRINSIC_PROTECT OR ENTIRE_STRUCTURE_PROTECTED)
      835     7314    2             AND NOT (PORT.DCB# = 0 AND VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)
      836     7315    3             AND VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE)) THEN DO;

      837     7316    3              CALL SET_ERROR_WARN (%E$CANT_WRITE);

   7316  3 001362   000010 236000 4                  LDQ     8
         3 001363   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 001364   002545 701000 3                  TSX1    SET_ERROR_WARN
         3 001365   000000 011000                    NOP     0

      838     7317    3              IF PORT.DCB#~=0 THEN

   7317  3 001366   200003 470500                    LDP0    @STREAM,,AUTO
         3 001367   000001 471500                    LDP1    1,,PR0
         3 001370   100004 720100                    LXL0    4,,PR1
         3 001371   001406 600000 3                  TZE     s:7320

      839     7318    3                 IF DCBADDR(PORT.DCB#) -> F$DCB.FUN# = %IN# THEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:98   

   7318  3 001372   000003 473400 4                  LDP3    3
         3 001373   300000 474500                    LDP4    0,,PR3
         3 001374   400000 475510                    LDP5    0,X0,PR4
         3 001375   500032 236100                    LDQ     26,,PR5
         3 001376   000777 376003                    ANQ     511,DU
         3 001377   000002 116003                    CMPQ    2,DU
         3 001400   001406 601000 3                  TNZ     s:7320

      840     7319    3                    VD$ERR.ERR.CODE# = %E$VD_FILEBUSY;

   7319  3 001401   200010 476500                    LDP6    VD_ERR$,,AUTO
         3 001402   600002 236100                    LDQ     2,,PR6
         3 001403   000011 376000 4                  ANQ     9
         3 001404   004350 276007                    ORQ     2280,DL
         3 001405   600002 756100                    STQ     2,,PR6

      841     7320    3              CALL VDG$EREPORT_ERROR;

   7320  3 001406   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001407   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 001410   000000 011000                    NOP     0

      842     7321    3              CONSEC_BY_ACCIDENT = %FALSE; /* Don't warn twice */

   7321  3 001411   200037 450100                    STZ     CONSEC_BY_ACCIDENT,,AUTO

      843     7322    3              END;

      844     7323
      845     7324    2           IF CONSEC_BY_ACCIDENT

   7324  3 001412   200037 234100                    SZN     CONSEC_BY_ACCIDENT,,AUTO
         3 001413   001427 605000 3                  TPL     s:7343
         3 001414   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 001415   000002 220100                    LDX0    2,,PR0
         3 001416   000001 100003                    CMPX0   1,DU
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:99   
         3 001417   001427 600000 3                  TZE     s:7343

      846     7325    3             AND OPTIONS.PROTECT# ~= %PROTECT THEN DO;

      847     7326                   /*
      848     7327                   *   File actually opened is consec, but user requested
      849     7328                   *    it via an org-less Structure, meaning open any
      850     7329                   *    file by that name no matter what org, or a Structure
      851     7330                   *    specifying some other org.  If the user
      852     7331                   *    thinks they can insert or delete records, they're
      853     7332                   *    sadly mistaken:  warn them.
      854     7333                   */
      855     7334    3              CALL SET_ERROR_WARN (%E$CANT_INSERT_DELETE_RECORDS);

   7334  3 001420   000013 236000 4                  LDQ     11
         3 001421   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 001422   002545 701000 3                  TSX1    SET_ERROR_WARN
         3 001423   000000 011000                    NOP     0

      856     7335    3              CALL VDG$EREPORT_ERROR;

   7335  3 001424   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001425   000000 701000 xent               TSX1    VDG$EREPORT_ERROR
         3 001426   000000 011000                    NOP     0

      857     7336    3              END;

      858     7337
      859     7338
      860     7339                /*
      861     7340                *   Stream open! Finally!
      862     7341                */
      863     7342
      864     7343    2           STREAM.LAST_OP# = %ACCOP_OPEN;

   7343  3 001427   000001 220003                    LDX0    1,DU
         3 001430   200003 470500                    LDP0    @STREAM,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:100  
         3 001431   000002 740100                    STX0    2,,PR0

      865     7344
      866     7345    2           IF VD_$$MON_ACC.V# > 0 THEN

   7345  3 001432   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001433   001440 604400 3                  TMOZ    s:7347

      867     7346    2              CALL VDG$MACC_RETURN (STREAM);

   7346  3 001434   200003 630500                    EPPR0   @STREAM,,AUTO
         3 001435   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001436   000000 701000 xent               TSX1    VDG$MACC_RETURN
         3 001437   000000 011000                    NOP     0

      868     7347    2           RETURN;

   7347  3 001440   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 001441   000001 702211                    TSX2  ! 1,X1

      869     7348
      870     7349
      871     7350
      872     7351    2   PROTECT_CONFLICTS_W_NEW_FAILURE:
      873     7352    2           CALL SET_ERROR_SERIOUS (%E$PROTECT_CONFLICTS_W_NEW);

   7352  3 001442   000015 236000 4     PROTECT_CON* LDQ     13
         3 001443   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 001444   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 001445   000000 011000                    NOP     0

      874     7353    2           ALTRETURN;

   7353  3 001446   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 001447   000000 702211                    TSX2  ! 0,X1

      875     7354
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:101  
      876     7355
      877     7356    2   EXIST_CONFLICT_FAILURE:
      878     7357    2           CALL SET_ERROR_SERIOUS (%E$VD_CREATERR);

   7357  3 001450   000017 236000 4     EXIST_CONFL* LDQ     15
         3 001451   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 001452   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 001453   000000 011000                    NOP     0

      879     7358    2           ALTRETURN;

   7358  3 001454   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 001455   000000 702211                    TSX2  ! 0,X1

   7345  3 001456                       OALLOC_FAIL* null
   7345  3 001456                       OPEN_THE_PO* null
   7345  3 001456                       OPEN_THE_PO* null
      880     7359
      881     7360
      882     7361    2   OALLOC_FAILED: ;
      883     7362    2   OPEN_THE_PORT_INTERNAL_FAILED: ;
      884     7363    2   OPEN_THE_PORT_EXTERNAL_FAILED: ;
      885     7364    2           ALTRETURN;

   7364  3 001456   200012 221300                    LDX1  ! VD_NUMBER$+1,,AUTO
         3 001457   000000 702211                    TSX2  ! 0,X1

      886     7365
      887     7366        %BOX (TITLE=OPEN_THE_PORT_INTERNAL, PAGE=YES);
              7374    2
              7378    2   /***************************************************************************
              7380    2    *                                                                         *
              7384    2            *                           OPEN_THE_PORT_INTERNAL                       *
              7386    2            *                                                                        *
              7388    2          ***************************************************************************/

      888     7392
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:102  
      889     7393        /*I* NAME: OPEN_THE_PORT_INTERNAL
      890     7394            PARAMETERS:
      891     7395                FILE_NODE$ - Points to the VD$FILE_NODE at the file level
      892     7396                    of the internal file we're opening to.  For a create
      893     7397                    open, this must be ADDR(NIL).
      894     7398                INSERT_NODE$ - For a create open, points to the VD$FILE_NODE
      895     7399                    in front of which (in the directory) we should insert the
      896     7400                    file being created; if we should insert the new file at
      897     7401                    the end of the directory, and for non-create opens,
      898     7402                    INSERT_NODE$ must be ADDR(NIL).
      899     7403                DIR_NODE - If this is a create-open, DIR_NODE must be the
      900     7404                    node for the directory in which the file belongs.  Ignored
      901     7405                    for non-create opens.
      902     7406            INPUT:
      903     7407                PORT must be the Port to use; it must currently be closed.
      904     7408                OPTIONS must be the options to use.
      905     7409                STRUCTURE$SPEC must be the VD$STRUCTURE_SPEC to use.
      906     7410            OUTPUT:
      907     7411                PORT's DCB, if any, will be detached.
      908     7412                FILE_NODE$ - If this is a create-open, will point to the
      909     7413                    level-0 FileNode created for the file and inserted into
      910     7414                    DIR_NODE's directory.
      911     7415                PORT.LAST_OP, .EXIST, and .INTRINSIC_PROTECT will be
      912     7416                    set appropriately.
      913     7417                PORT.FIT$ will point to a copy of the file's FIT, if any.
      914     7418                PORT.LEVEL.ORGs, .KEY_TYPEs, and .SPEC_TYPEs will be set from the
      915     7419                    Structure and/or the file actually opened.
      916     7420                PORT.LEVEL.SPEC, .DATA$, and .INTERNAL$ at the file level will
      917     7421                    be set appropriately.
      918     7422            DESCRIPTION:
      919     7423                Free any DCB attached to the port.
      920     7424                If this is a create-open, build the level-0 FileNode and
      921     7425                    insert it into the file tree.
      922     7426                Set values in the port based on the file opened.
      923     7427        */
      924     7428
      925     7429    2   OPEN_THE_PORT_INTERNAL: PROC (FILE_NODE$, INSERT_NODE$, DIR_NODE) ALTRET;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:103  

   7429  3 001460   200040 741300       OPEN_THE_PO* STX1  ! CONSEC_BY_ACCIDENT+1,,AUTO

      926     7430
      927     7431    3   DCL FILE_NODE$ PTR;
      928     7432    3   DCL INSERT_NODE$ PTR;
      929     7433        %VD$DIR_NODE (NAME=DIR_NODE, STCLASS=PARAM);
      930     7471
      931     7472
      932     7473
      933     7474        %VD$FILE_NODE (NAME=FILE$NODE, STCLASS="BASED(FILE_NODE$)");
      934     7567        %VD$FILE_NODE (NAME=INSERT$NODE, STCLASS="BASED(INSERT_NODE$)");
      935     7660        %VD$FIT;
      936     7696
      937     7697
      938     7698
      939     7699                %INCREMENT (INDX=%STG_OPEN_INT_FILE);

   7700  3 001461   000074 054000 xsym               AOS     VD_6E+60

      940     7702
      941     7703    4           IF PORT.DCB# ~= 0 THEN DO;

   7703  3 001462   200003 470500                    LDP0    @STREAM,,AUTO
         3 001463   000001 471500                    LDP1    1,,PR0
         3 001464   100004 720100                    LXL0    4,,PR1
         3 001465   001476 600000 3                  TZE     s:7714

      942     7704                   /* Free the DCB attached to this port */
      943     7705    4              CALL VDG$OFREE_DCB (PORT.DCB#)

   7705  3 001466   200151 451500                    STP1    FLV+2,,AUTO
         3 001467   200151 236100                    LDQ     FLV+2,,AUTO
         3 001470   000020 036000 4                  ADLQ    16
         3 001471   200150 756100                    STQ     FLV+1,,AUTO
         3 001472   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001473   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:104  
         3 001474   000000 701000 xent               TSX1    VDG$OFREE_DCB
         3 001475   002001 702000 3                  TSX2    OALLOC_FAILED

      944     7706    4                ALTRET (OFREE_DCB_FAILED);
      945     7707    4              END;

      946     7708
      947     7709                /*
      948     7710                *   If this is a create-open, build the level-0 FileNode
      949     7711                *       and insert it into the file tree.
      950     7712                */
      951     7713
      952     7714    3           IF FILE_NODE$ = ADDR(NIL) THEN

   7714  3 001476   200041 470500                    LDP0    @FILE_NODE$,,AUTO
         3 001477   000000 236100                    LDQ     0,,PR0
         3 001500   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001501   001611 601000 3                  TNZ     s:7745

      953     7715    4   CREATE_INTERNAL_FILE: DO;

   7715  3 001502                       CREATE_INTE* null
      954     7716    4              CALL VDG$OALLOC (%CLS_FILE_NODE, FILE_NODE$)

   7716  3 001502   200041 236100                    LDQ     @FILE_NODE$,,AUTO
         3 001503   000022 235000 4                  LDA     18
         3 001504   200150 757100                    STAQ    FLV+1,,AUTO
         3 001505   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001506   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001507   000000 701000 xent               TSX1    VDG$OALLOC
         3 001510   002001 702000 3                  TSX2    OALLOC_FAILED

      955     7717    4                ALTRET (OALLOC_FAILED);
      956     7718    4              FILE$NODE.DESC.KEY = PORT.FILE_KEY;

   7718  3 001511   200041 470500                    LDP0    @FILE_NODE$,,AUTO
         3 001512   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:105  
         3 001513   200003 473500                    LDP3    @STREAM,,AUTO
         3 001514   300001 474500                    LDP4    1,,PR3
         3 001515   000100 100500                    MLR     fill='000'O
         3 001516   400010 000010                    ADSC9   8,,PR4                   cn=0,n=8
         3 001517   100004 000010                    ADSC9   4,,PR1                   cn=0,n=8

      957     7719    5              IF FILE$NODE.DESC.KEY.REP# = %REP_REMOTE THEN DO;

   7719  3 001520   000000 471500                    LDP1    0,,PR0
         3 001521   100004 720100                    LXL0    4,,PR1
         3 001522   000002 100003                    CMPX0   2,DU
         3 001523   001535 601000 3                  TNZ     s:7725

      958     7720    5                 CALL VDG$OCOPY (PORT.FILE_KEY.V$ -> VD$FILE_KEY,

   7720  3 001524   300001 474500                    LDP4    1,,PR3
         3 001525   400011 475500                    LDP5    9,,PR4
         3 001526   100005 636500                    EPPR6   5,,PR1
         3 001527   200151 456500                    STP6    FLV+2,,AUTO
         3 001530   200150 455500                    STP5    FLV+1,,AUTO
         3 001531   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001532   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001533   000000 701000 xent               TSX1    VDG$OCOPY
         3 001534   002001 702000 3                  TSX2    OALLOC_FAILED

      959     7721    5                   FILE$NODE.DESC.KEY.V$)
      960     7722    5                   ALTRET (OCOPY_FAILED);
      961     7723    5                 END;

      962     7724                   /* Give user full access to this file */
      963     7725    4              FILE$NODE.ACCESS = %NAC_ALL_BITS;

   7725  3 001535   200041 470500                    LDP0    @FILE_NODE$,,AUTO
         3 001536   000000 471500                    LDP1    0,,PR0
         3 001537   777000 236003                    LDQ     -512,DU
         3 001540   100003 552140                    STBQ    3,'40'O,PR1

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:106  
      964     7726
      965     7727                   /* Link FILE$NODE into the file tree */
      966     7728    4              IF INSERT_NODE$ = ADDR(NIL) THEN

   7728  3 001541   200042 471500                    LDP1    @INSERT_NODE$,,AUTO
         3 001542   100000 236100                    LDQ     0,,PR1
         3 001543   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001544   001552 601000 3                  TNZ     s:7731

      967     7729    4                 FILE$NODE.BLINK$ = DIR_NODE.TAIL$;

   7729  3 001545   000000 473500                    LDP3    0,,PR0
         3 001546   200043 474500                    LDP4    @DIR_NODE,,AUTO
         3 001547   400016 236100                    LDQ     14,,PR4
         3 001550   300001 756100                    STQ     1,,PR3
         3 001551   001556 710000 3                  TRA     s:7732

      968     7730    4              ELSE
      969     7731    4                 FILE$NODE.BLINK$ = INSERT$NODE.BLINK$;

   7731  3 001552   000000 473500                    LDP3    0,,PR0
         3 001553   100000 474500                    LDP4    0,,PR1
         3 001554   400001 236100                    LDQ     1,,PR4
         3 001555   300001 756100                    STQ     1,,PR3

      970     7732    4              IF FILE$NODE.BLINK$ = ADDR(NIL) THEN

   7732  3 001556   000000 473500                    LDP3    0,,PR0
         3 001557   300001 236100                    LDQ     1,,PR3
         3 001560   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001561   001566 601000 3                  TNZ     s:7735

      971     7733    4                 DIR_NODE.HEAD$ = FILE_NODE$;

   7733  3 001562   000000 236100                    LDQ     0,,PR0
         3 001563   200043 474500                    LDP4    @DIR_NODE,,AUTO
         3 001564   400015 756100                    STQ     13,,PR4
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:107  
         3 001565   001571 710000 3                  TRA     s:7736

      972     7734    4              ELSE
      973     7735    4                 FILE$NODE.BLINK$->VD$FILE_NODE.FLINK$ = FILE_NODE$;

   7735  3 001566   300001 474500                    LDP4    1,,PR3
         3 001567   000000 236100                    LDQ     0,,PR0
         3 001570   400002 756100                    STQ     2,,PR4

      974     7736    4              FILE$NODE.FLINK$ = INSERT_NODE$;

   7736  3 001571   000000 473500                    LDP3    0,,PR0
         3 001572   100000 236100                    LDQ     0,,PR1
         3 001573   300002 756100                    STQ     2,,PR3

      975     7737    4              IF FILE$NODE.FLINK$ = ADDR(NIL) THEN

   7737  3 001574   000000 473500                    LDP3    0,,PR0
         3 001575   300002 236100                    LDQ     2,,PR3
         3 001576   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001577   001604 601000 3                  TNZ     s:7740

      976     7738    4                 DIR_NODE.TAIL$ = FILE_NODE$;

   7738  3 001600   000000 236100                    LDQ     0,,PR0
         3 001601   200043 474500                    LDP4    @DIR_NODE,,AUTO
         3 001602   400016 756100                    STQ     14,,PR4
         3 001603   001607 710000 3                  TRA     s:7741

      977     7739    4              ELSE
      978     7740    4                 FILE$NODE.FLINK$->VD$FILE_NODE.BLINK$ = FILE_NODE$;

   7740  3 001604   300002 474500                    LDP4    2,,PR3
         3 001605   000000 236100                    LDQ     0,,PR0
         3 001606   400001 756100                    STQ     1,,PR4

      979     7741    4              DIR_NODE.COUNT# = DIR_NODE.COUNT# + 1;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:108  

   7741  3 001607   200043 473500                    LDP3    @DIR_NODE,,AUTO
         3 001610   300017 054100                    AOS     15,,PR3

      980     7742    4              END CREATE_INTERNAL_FILE;

      981     7743
      982     7744                /* Now we're actually open to the file! Record this fact */
      983     7745    3           PORT.LAST_OP# = %ACCOP_OPEN;

   7745  3 001611   200003 471500                    LDP1    @STREAM,,AUTO
         3 001612   100001 473500                    LDP3    1,,PR1
         3 001613   000001 220003                    LDX0    1,DU
         3 001614   300007 740100                    STX0    7,,PR3

      984     7746    3           PORT.EXIST# = OPTIONS.EXIST#;

   7746  3 001615   100001 473500                    LDP3    1,,PR1
         3 001616   200006 474500                    LDP4    @OPTIONS,,AUTO
         3 001617   400002 721100                    LXL1    2,,PR4
         3 001620   300003 441100                    SXL1    3,,PR3

      985     7747    3           PORT.LEVEL.INTERNAL$ (%LVL_FILE) = FILE_NODE$;

   7747  3 001621   100001 473500                    LDP3    1,,PR1
         3 001622   000000 236100                    LDQ     0,,PR0
         3 001623   300031 756100                    STQ     25,,PR3

      986     7748    3           IF (FILE$NODE.ACCESS | VD_ACCESSOR_PRIV) = %CLEAR THEN

   7748  3 001624   000000 473500                    LDP3    0,,PR0
         3 001625   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         3 001626   777000 376003                    ANQ     -512,DU
         3 001627   200150 756100                    STQ     FLV+1,,AUTO
         3 001630   300003 236100                    LDQ     3,,PR3
         3 001631   777000 376003                    ANQ     -512,DU
         3 001632   200150 276100                    ORQ     FLV+1,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:109  
         3 001633   001637 601000 3                  TNZ     s:7751

      987     7749    3              PORT.INTRINSIC_PROTECT = %TRUE;

   7749  3 001634   100001 473500                    LDP3    1,,PR1
         3 001635   400000 236003                    LDQ     -131072,DU
         3 001636   300004 256100                    ORSQ    4,,PR3

      988     7750
      989     7751    3           PORT.LEVEL.SPEC (%LVL_FILE) = FILE$NODE.DESC.SPEC;

   7751  3 001637   100001 473500                    LDP3    1,,PR1
         3 001640   000000 475500                    LDP5    0,,PR0
         3 001641   000100 100500                    MLR     fill='000'O
         3 001642   500006 000010                    ADSC9   6,,PR5                   cn=0,n=8
         3 001643   300025 000010                    ADSC9   21,,PR3                  cn=0,n=8

      990     7752    4           IF PORT.LEVEL.SPEC.REP# (%LVL_FILE) = %REP_REMOTE THEN DO;

   7752  3 001644   100001 473500                    LDP3    1,,PR1
         3 001645   300025 721100                    LXL1    21,,PR3
         3 001646   000002 101003                    CMPX1   2,DU
         3 001647   001661 601000 3                  TNZ     s:7758

      991     7753    4              CALL VDG$OCOPY (FILE$NODE.DESC.SPEC.V$ -> VD$TEXTC_REMOTE,

   7753  3 001650   000000 475500                    LDP5    0,,PR0
         3 001651   500007 476500                    LDP6    7,,PR5
         3 001652   300026 637500                    EPPR7   22,,PR3
         3 001653   200151 457500                    STP7    FLV+2,,AUTO
         3 001654   200150 456500                    STP6    FLV+1,,AUTO
         3 001655   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001656   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001657   000000 701000 xent               TSX1    VDG$OCOPY
         3 001660   002001 702000 3                  TSX2    OALLOC_FAILED

      992     7754    4                PORT.LEVEL.SPEC.V$ (%LVL_FILE))
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:110  
      993     7755    4                ALTRET (OCOPY_FAILED);
      994     7756    4              END;

      995     7757
      996     7758    4           IF FILE$NODE.DESC.DATA$ ~= ADDR(NIL) THEN DO;

   7758  3 001661   200041 470500                    LDP0    @FILE_NODE$,,AUTO
         3 001662   000000 471500                    LDP1    0,,PR0
         3 001663   100010 236100                    LDQ     8,,PR1
         3 001664   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001665   001700 600000 3                  TZE     s:7767

      997     7759    4              CALL VDG$OCOPY (FILE$NODE.DESC.DATA$ -> VD$BUFFER,

   7759  3 001666   100010 473500                    LDP3    8,,PR1
         3 001667   200003 474500                    LDP4    @STREAM,,AUTO
         3 001670   400001 475500                    LDP5    1,,PR4
         3 001671   500027 636500                    EPPR6   23,,PR5
         3 001672   200151 456500                    STP6    FLV+2,,AUTO
         3 001673   200150 453500                    STP3    FLV+1,,AUTO
         3 001674   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001675   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001676   000000 701000 xent               TSX1    VDG$OCOPY
         3 001677   002001 702000 3                  TSX2    OALLOC_FAILED

      998     7760    4                PORT.LEVEL.DATA$ (%LVL_FILE))
      999     7761    4                ALTRET (OCOPY_FAILED);
     1000     7762    4              END;

     1001     7763
     1002     7764                /*
     1003     7765                *  Merge info from STRUCTURE into PORT.
     1004     7766                */
     1005     7767    3           PORT.STRUCTURE$ = OPTIONS.STRUCTURE$;

   7767  3 001700   200003 470500                    LDP0    @STREAM,,AUTO
         3 001701   000001 471500                    LDP1    1,,PR0
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:111  
         3 001702   200006 473500                    LDP3    @OPTIONS,,AUTO
         3 001703   300000 236100                    LDQ     0,,PR3
         3 001704   100006 756100                    STQ     6,,PR1

     1006     7768    4           IF STRUCTURE$SPEC.FIT$ ~= ADDR(NIL) THEN DO;

   7768  3 001705   200023 471500                    LDP1    STRUCTURE_SPEC$,,AUTO
         3 001706   100004 236100                    LDQ     4,,PR1
         3 001707   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001710   001722 600000 3                  TZE     s:7772

     1007     7769    4              CALL VDG$OCOPY (STRUCTURE$SPEC.FIT$->VD$FIT, PORT.FIT$)

   7769  3 001711   100004 474500                    LDP4    4,,PR1
         3 001712   000001 475500                    LDP5    1,,PR0
         3 001713   500005 636500                    EPPR6   5,,PR5
         3 001714   200151 456500                    STP6    FLV+2,,AUTO
         3 001715   200150 454500                    STP4    FLV+1,,AUTO
         3 001716   200150 630500                    EPPR0   FLV+1,,AUTO
         3 001717   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001720   000000 701000 xent               TSX1    VDG$OCOPY
         3 001721   002001 702000 3                  TSX2    OALLOC_FAILED

     1008     7770    4                ALTRET (OCOPY_FAILED);
     1009     7771    4              END;

     1010     7772    3           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$;

   7772  3 001722   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 001723   000000 471500                    LDP1    0,,PR0
         3 001724   100012 236100                    LDQ     10,,PR1
         3 001725   200024 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1011     7773    4           DO LEVEL = %LVL_FILE TO STRUCTURE.COUNT# - 1;

   7773  3 001726   200007 450100                    STZ     LEVEL,,AUTO
         3 001727   001772 710000 3                  TRA     s:7787+1
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:112  

     1012     7774    4              STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;

   7774  3 001730   200024 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
         3 001731   000007 236100                    LDQ     7,,PR0
         3 001732   200025 756100                    STQ     STRUCTURE_LEVEL$,,AUTO

     1013     7775    4              PORT.LEVEL.ORG# (LEVEL) = STRUCTURE$LEVEL.ORG#;

   7775  3 001733   200003 471500                    LDP1    @STREAM,,AUTO
         3 001734   100001 473500                    LDP3    1,,PR1
         3 001735   200007 236100                    LDQ     LEVEL,,AUTO
         3 001736   000007 402007                    MPY     7,DL
         3 001737   200025 474500                    LDP4    STRUCTURE_LEVEL$,,AUTO
         3 001740   400002 720100                    LXL0    2,,PR4
         3 001741   300023 740106                    STX0    19,QL,PR3

     1014     7776    4              PORT.LEVEL.KEY_TYPE# (LEVEL) = STRUCTURE$LEVEL.KEY_TYPE#;

   7776  3 001742   100001 473500                    LDP3    1,,PR1
         3 001743   400003 220100                    LDX0    3,,PR4
         3 001744   300023 440106                    SXL0    19,QL,PR3

     1015     7777    4              PORT.LEVEL.SPEC_TYPE# (LEVEL) = STRUCTURE$LEVEL.SPEC_TYPE#;

   7777  3 001745   100001 473500                    LDP3    1,,PR1
         3 001746   400003 720100                    LXL0    3,,PR4
         3 001747   300024 740106                    STX0    20,QL,PR3

     1016     7778    4              IF PORT.LEVEL.ORG# (LEVEL) = 0 THEN

   7778  3 001750   100001 473500                    LDP3    1,,PR1
         3 001751   300023 220106                    LDX0    19,QL,PR3
         3 001752   001755 601000 3                  TNZ     s:7780

     1017     7779    4                 PORT.LEVEL.ORG# (LEVEL) = %ORG_KEYED;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:113  
   7779  3 001753   000002 221003                    LDX1    2,DU
         3 001754   300023 741106                    STX1    19,QL,PR3

     1018     7780    5              IF PORT.LEVEL.KEY_TYPE# (LEVEL) = 0 THEN DO;

   7780  3 001755   100001 473500                    LDP3    1,,PR1
         3 001756   300023 720106                    LXL0    19,QL,PR3
         3 001757   001767 601000 3                  TNZ     s:7786

     1019     7781    5                 IF LEVEL = %LVL_FILE THEN

   7781  3 001760   200007 235100                    LDA     LEVEL,,AUTO
         3 001761   001765 601000 3                  TNZ     s:7784

     1020     7782    5                    PORT.LEVEL.KEY_TYPE# (LEVEL) = %KT_STRING;

   7782  3 001762   000002 221003                    LDX1    2,DU
         3 001763   300023 441106                    SXL1    19,QL,PR3
         3 001764   001767 710000 3                  TRA     s:7786

     1021     7783    5                 ELSE
     1022     7784    5                    PORT.LEVEL.KEY_TYPE# (LEVEL) = %KT_NUMBER;

   7784  3 001765   000001 221003                    LDX1    1,DU
         3 001766   300023 441106                    SXL1    19,QL,PR3

     1023     7785    5                 END;

     1024     7786    4              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;

   7786  3 001767   000002 236100                    LDQ     2,,PR0
         3 001770   200024 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1025     7787    4              END;

   7787  3 001771   200007 054100                    AOS     LEVEL,,AUTO
         3 001772   200006 470500                    LDP0    @OPTIONS,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:114  
         3 001773   000000 471500                    LDP1    0,,PR0
         3 001774   200007 236100                    LDQ     LEVEL,,AUTO
         3 001775   100014 116100                    CMPQ    12,,PR1
         3 001776   001730 604000 3                  TMI     s:7774

     1026     7788
     1027     7789    3           RETURN;

   7789  3 001777   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002000   000001 702211                    TSX2  ! 1,X1

   7783  3 002001                       OALLOC_FAIL* null
   7783  3 002001                       OFREE_DCB_F* null
   7783  3 002001                       OCOPY_FAILED null
     1028     7790
     1029     7791
     1030     7792
     1031     7793    3   OALLOC_FAILED: ;
     1032     7794    3   OFREE_DCB_FAILED: ;
     1033     7795    3   OCOPY_FAILED: ;
     1034     7796    3           ALTRETURN;

   7796  3 002001   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002002   000000 702211                    TSX2  ! 0,X1

     1035     7797
     1036     7798    3   END OPEN_THE_PORT_INTERNAL;
     1037     7799
     1038     7800        %BOX (TITLE=OPEN_THE_PORT_EXTERNAL, PAGE=YES);
              7808    3
              7812    3   /***************************************************************************
              7814    3    *                                                                         *
              7818    3            *                           OPEN_THE_PORT_EXTERNAL                       *
              7820    3            *                                                                        *
              7822    3          ***************************************************************************/

     1039     7826
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:115  
     1040     7827        /*I* NAME: OPEN_THE_PORT_EXTERNAL
     1041     7828            PARAMETERS:
     1042     7829                None.
     1043     7830            INPUT:
     1044     7831                STREAM must be the stream to use.
     1045     7832                PORT is the port to use; it must be closed.
     1046     7833                STRUCTURE$SPEC must be the VD$STRUCTURE_SPEC to use.
     1047     7834            OUTPUT:
     1048     7835                PORT will have a DCB attached.  If no errors are found,
     1049     7836                    the DCB will be open to the file.
     1050     7837                PORT.LAST_OP, .EXIST, and .INTRINSIC_PROTECT will be
     1051     7838                    set appropriately.
     1052     7839                PORT.FIT$ will point to a copy of the file's FIT.
     1053     7840                PORT.LEVEL.ORGs, .KEY_TYPEs, and .SPEC_TYPEs will be set from the
     1054     7841                    Structure and/or the file actually opened (based on info
     1055     7842                    from the monitor).
     1056     7843            DESCRIPTION:
     1057     7844                Attach a DCB to the port.
     1058     7845                Build the M$OPEN FPT, and open the file.
     1059     7846                Check for correct ASN and file organization.
     1060     7847                Set values in the port from the DCB and the file's FIT.
     1061     7848        */
     1062     7849
     1063     7850    2   OPEN_THE_PORT_EXTERNAL: PROC ALTRET;

   7850  3 002003   200040 741300       OPEN_THE_PO* STX1  ! CONSEC_BY_ACCIDENT+1,,AUTO

     1064     7851
     1065     7852        %FPT_OPEN (FPTN=CONST_FPT_OPEN, STCLASS=CONSTANT,
     1066     7853                ACS=DIRECT, CTG=YES, DISP=NAMED);
     1067     7962
     1068     7963
     1069     7964        /*
     1070     7965        *   The following tables are used only if OPTIONS.PROTECT# = %FALSE.
     1071     7966        *   These tables use %EX_ definitions as the subscript into the table;
     1072     7967        *       we assume %EX_NEW = 1, %EX_OLD = 2, %EX_ANY = 3.
     1073     7968        */
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:116  
     1074     7969    3   DCL OPEN_FUNCTION (0:7) UBIN BYTE CALIGNED CONSTANT
     1075     7970    3       INIT(0, %CREATE#, %UPDATE#, %CREATE#, 0*0);
     1076     7971    3   DCL OPEN_EXIST (0:7) UBIN BYTE CALIGNED CONSTANT
     1077     7972    3       INIT(0, %ERROR#, 0, %OLDFILE#, 0*0);
     1078     7973
     1079     7974
     1080     7975        /*
     1081     7976        *   The following tables are accessed using %ORG_ definitions as
     1082     7977        *       the subscript into the table.  We assume
     1083     7978        *       %ORG_CONSEC = 1, %ORG_KEYED = 2, %ORG_INDEXED = 3.
     1084     7979        */
     1085     7980    3   DCL OPEN_ORG (0:7) UBIN BYTE CALIGNED CONSTANT
     1086     7981    3       INIT(%KEYED#,   /* Entry 0 is default: Structure specifies no org */
     1087     7982    3               %CONSEC#, %KEYED#, %INDEXED#, 0*0);
     1088     7983    3   DCL DEFAULT_KEY_TYPES_FOR_ORGS (0:7) UBIN HALF HALIGNED CONSTANT
     1089     7984    3       INIT(0, %KT_NUMBER, %KT_EDITKEY, %KT_STRING, 0*0);
     1090     7985
     1091     7986
     1092     7987        %FPT_PFIL (BOF=YES, STCLASS=STATIC);
     1093     8002
     1094     8003
     1095     8004
     1096     8005    3   DCL PORT_KEY$ PTR;
     1097     8006    3   DCL EXT_DCB$ PTR;
     1098     8007    3   DCL DCB_ORG UBIN BYTE;
     1099     8008    3   DCL PORT_FIT$ PTR;
     1100     8009        %FPT_OPEN (STCLASS=AUTO);
     1101     8118        %VLP_SN (STCLASS=AUTO);
     1102     8131
     1103     8132
     1104     8133        %VD$FILE_KEY (NAME=PORT$KEY, STCLASS="BASED(PORT_KEY$)");
     1105     8182        %F$DCB (DCBN=EXT$DCB, STCLASS="BASED(EXT_DCB$)");
     1106     8239        %VD$FIT (NAME=PORT$FIT, STCLASS="BASED(PORT_FIT$)");
     1107     8275
     1108     8276
     1109     8277
     1110     8278                %INCREMENT (INDX=%STG_OPEN_EXT_FILE);
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:117  

   8279  3 002004   000073 054000 xsym               AOS     VD_6E+59

     1111     8281
     1112     8282                /* Get ptr to VD$STRUCTURE_LEVEL for level %LVL_EXT_REC (=1) */
     1113     8283    3           STRUCTURE_LEVEL_NODE$ = STRUCTURE.HEAD$->VD$FILE_NODE.FLINK$;

   8283  3 002005   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 002006   000000 471500                    LDP1    0,,PR0
         3 002007   100012 473500                    LDP3    10,,PR1
         3 002010   300002 236100                    LDQ     2,,PR3
         3 002011   200024 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1114     8284    3           STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;

   8284  3 002012   200024 474500                    LDP4    STRUCTURE_LEVEL_NODE$,,AUTO
         3 002013   400007 236100                    LDQ     7,,PR4
         3 002014   200025 756100                    STQ     STRUCTURE_LEVEL$,,AUTO

     1115     8285
     1116     8286    3           FPT_OPEN = CONST_FPT_OPEN;

   8286  3 002015   000100 100400                    MLR     fill='000'O
         3 002016   000002 000350 1                  ADSC9   CONST_FPT_OPEN           cn=0,n=232
         3 002017   200046 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

     1117     8287    3           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);

   8287  3 002020   000023 235000 4                  LDA     19
         3 002021   200150 452500                    STP2    FLV+1,,AUTO
         3 002022   200150 236100                    LDQ     FLV+1,,AUTO
         3 002023   000112 036003                    ADLQ    74,DU
         3 002024   200046 757100                    STAQ    FPT_OPEN,,AUTO

     1118     8288
     1119     8289    3           PORT_KEY$ = PORT.FILE_KEY.V$;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:118  
   8289  3 002025   200003 471500                    LDP1    @STREAM,,AUTO
         3 002026   100001 473500                    LDP3    1,,PR1
         3 002027   300011 236100                    LDQ     9,,PR3
         3 002030   200041 756100                    STQ     PORT_KEY$,,AUTO

     1120     8290
     1121     8291    3           IF PORT$KEY.DCB# = 0 THEN

   8291  3 002031   200041 473500                    LDP3    PORT_KEY$,,AUTO
         3 002032   300021 220100                    LDX0    17,,PR3
         3 002033   002143 601000 3                  TNZ     s:8341

     1122     8292    4   OPEN_TO_FID: DO;

   8292  3 002034                       OPEN_TO_FID  null
     1123     8293                   /* First, make sure we have a DCB */
     1124     8294    5              IF PORT.DCB# = 0 THEN DO;

   8294  3 002034   100001 475500                    LDP5    1,,PR1
         3 002035   500004 722100                    LXL2    4,,PR5
         3 002036   002047 601000 3                  TNZ     s:8300

     1125     8295    5                 CALL VDG$OALLOC_DCB (PORT.DCB#)

   8295  3 002037   200151 455500                    STP5    FLV+2,,AUTO
         3 002040   200151 236100                    LDQ     FLV+2,,AUTO
         3 002041   000020 036000 4                  ADLQ    16
         3 002042   200150 756100                    STQ     FLV+1,,AUTO
         3 002043   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002044   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002045   000000 701000 xent               TSX1    VDG$OALLOC_DCB
         3 002046   002537 702000 3                  TSX2    OALLOC_FAILED

     1126     8296    5                   ALTRET (OALLOC_DCB_FAILED);
     1127     8297    5                 END;

     1128     8298
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:119  
     1129     8299                   /* Set the FPT's SCRUB and fid fields */
     1130     8300    4              FPT_OPEN.V.INITZ.SCRUB# = %TRUE;

   8300  3 002047   400000 236007                    LDQ     -131072,DL
         3 002050   200112 256100                    ORSQ    FPT_OPEN+36,,AUTO

     1131     8301    4              FPT_OPEN.NAME_ = VECTOR(PORT$KEY.UNIQUE.FNAME);

   8301  3 002051   000024 235000 4                  LDA     20
         3 002052   200041 236100                    LDQ     PORT_KEY$,,AUTO
         3 002053   000004 036000 4                  ADLQ    4
         3 002054   200054 757100                    STAQ    FPT_OPEN+6,,AUTO

     1132     8302    4              FPT_OPEN.ACCT_ = VECTOR(PORT$KEY.UNIQUE.ACCT);

   8302  3 002055   000025 235000 4                  LDA     21
         3 002056   200041 236100                    LDQ     PORT_KEY$,,AUTO
         3 002057   000026 036000 4                  ADLQ    22
         3 002060   200072 757100                    STAQ    FPT_OPEN+20,,AUTO

     1133     8303    4              FPT_OPEN.V.ASN# = PORT$KEY.ASN#;

   8303  3 002061   200041 470500                    LDP0    PORT_KEY$,,AUTO
         3 002062   000014 236100                    LDQ     12,,PR0
         3 002063   000022 772000                    QRL     18
         3 002064   200113 552104                    STBQ    FPT_OPEN+37,'04'O,AUTO

     1134     8304    4              FPT_OPEN.V.RES# = PORT$KEY.RES;

   8304  3 002065   000014 235100                    LDA     12,,PR0
         3 002066   000015 236100                    LDQ     13,,PR0
         3 002067   000022 773000                    LRL     18
         3 002070   000027 376000 xsym               ANQ     B_VECTNIL+23
         3 002071   200116 756100                    STQ     FPT_OPEN+40,,AUTO

     1135     8305    4              VLP_SN = %CLEAR;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:120  
   8305  3 002072   000100 100400                    MLR     fill='000'O
         3 002073   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 002074   200140 000012                    ADSC9   VLP_SN,,AUTO             cn=0,n=10

     1136     8306    4              VLP_SN.NUM# = 1;

   8306  3 002075   000001 235007                    LDA     1,DL
         3 002076   200140 755100                    STA     VLP_SN,,AUTO

     1137     8307    4              VLP_SN.SN# (0) = PORT$KEY.PSN;

   8307  3 002077   040100 100500                    MLR     fill='040'O
         3 002100   000015 400006                    ADSC9   13,,PR0                  cn=2,n=6
         3 002101   200141 000006                    ADSC9   VLP_SN+1,,AUTO           cn=0,n=6

     1138     8308    4              FPT_OPEN.SN_ = VECTOR(VLP_SN);

   8308  3 002102   000027 235000 4                  LDA     23
         3 002103   200150 452500                    STP2    FLV+1,,AUTO
         3 002104   200150 236100                    LDQ     FLV+1,,AUTO
         3 002105   000140 036003                    ADLQ    96,DU
         3 002106   200050 757100                    STAQ    FPT_OPEN+2,,AUTO

     1139     8309    4              FPT_OPEN.PASS_ = VECTOR(PORT$KEY.PASS);

   8309  3 002107   000025 235000 4                  LDA     21
         3 002110   200041 236100                    LDQ     PORT_KEY$,,AUTO
         3 002111   000017 036003                    ADLQ    15,DU
         3 002112   200056 757100                    STAQ    FPT_OPEN+8,,AUTO

     1140     8310
     1141     8311                   /*
     1142     8312                   *  If this is a create open, merge params from the
     1143     8313                   *      Structure into the FPT.
     1144     8314                   */
     1145     8315    5              IF OPTIONS.EXIST# ~= %EX_OLD THEN DO;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:121  
   8315  3 002113   200006 471500                    LDP1    @OPTIONS,,AUTO
         3 002114   100002 720100                    LXL0    2,,PR1
         3 002115   000002 100003                    CMPX0   2,DU
         3 002116   002143 600000 3                  TZE     s:8341

     1146     8316    6                 IF STRUCTURE$SPEC.FIT$ ~= ADDR(NIL) THEN DO;

   8316  3 002117   200023 473500                    LDP3    STRUCTURE_SPEC$,,AUTO
         3 002120   300004 236100                    LDQ     4,,PR3
         3 002121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002122   002131 600000 3                  TZE     s:8320

     1147     8317    6                    FPT_OPEN.IFPARAM_ =

   8317  3 002123   300004 474500                    LDP4    4,,PR3
         3 002124   000030 235000 4                  LDA     24
         3 002125   200150 454500                    STP4    FLV+1,,AUTO
         3 002126   200150 236100                    LDQ     FLV+1,,AUTO
         3 002127   000003 036003                    ADLQ    3,DU
         3 002130   200074 757100                    STAQ    FPT_OPEN+22,,AUTO

     1148     8318    6                      VECTOR(STRUCTURE$SPEC.FIT$ -> PORT$FIT.FIT);
     1149     8319    6                    END;

     1150     8320    5                 FPT_OPEN.V.ORG# = OPEN_ORG (STRUCTURE$LEVEL.ORG#);

   8320  3 002131   200025 474500                    LDP4    STRUCTURE_LEVEL$,,AUTO
         3 002132   400002 236100                    LDQ     2,,PR4
         3 002133   777777 376007                    ANQ     -1,DL
         3 002134   000100 100406                    MLR     fill='000'O
         3 002135   000100 000001 1                  ADSC9   OPEN_ORG,Q               cn=0,n=1
         3 002136   200114 400001                    ADSC9   FPT_OPEN+38,,AUTO        cn=2,n=1

     1151     8321    5                 FPT_OPEN.V.TYPE# = VD_$FILETYPE.BYTES;

   8321  3 002137   000002 220000 xsym               LDX0    VD_$FILETYPE+2
         3 002140   040100 100440                    MLR     fill='040'O
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:122  
         3 002141   000002 400010 xsym               ADSC9   VD_$FILETYPE+2           cn=2,n=*X0
         3 002142   200115 000002                    ADSC9   FPT_OPEN+39,,AUTO        cn=0,n=2

     1152     8322    5                 END;

     1153     8323
     1154     8324                   /*
     1155     8325        *N**N**N*  *   Other FPT_OPEN parameters to consider (these can't be
     1156     8326        *N**N**N*  *      set via IFPARM):
     1157     8327        *N**N**N*  *   COMP - only for create consec|keyed unencrypted disk file
     1158     8328        *N**N**N*  *   EXPIRE - only for create file
     1159     8329        *N**N**N*  *   HDR - only for create UR file
     1160     8330        *N**N**N*  *   LOAD - only for create alternate-indexed file
     1161     8331        *N**N**N*  *   SEED (on FPT_READ/FPT_WRITE) - only for non-indexed
     1162     8332        *N**N**N*  *       non-compressed disk file
     1163     8333        *N**N**N*  *   These values should be set by the user the same way
     1164     8334        *N**N**N*  *       s/he sets/examines [I]FPARAM:  via a forms-mode
     1165     8335        *N**N**N*  *       window.  The value given by the user should probably
     1166     8336        *N**N**N*  *       go into VD$STRUCTURE_LEVEL.
     1167     8337                   */
     1168     8338
     1169     8339    4              END OPEN_TO_FID;

     1170     8340
     1171     8341    4           IF OPTIONS.PROTECT# = %PROTECT THEN DO;

   8341  3 002143   200006 470500                    LDP0    @OPTIONS,,AUTO
         3 002144   000002 220100                    LDX0    2,,PR0
         3 002145   000001 100003                    CMPX0   1,DU
         3 002146   002154 601000 3                  TNZ     s:8346

     1172     8342    4              FPT_OPEN.V.FUN# = %IN#;

   8342  3 002147   002000 236007                    LDQ     1024,DL
         3 002150   200113 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     1173     8343    4              FPT_OPEN.V.EXIST# = 0;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:123  

   8343  3 002151   000031 236000 4                  LDQ     25
         3 002152   200112 356100                    ANSQ    FPT_OPEN+36,,AUTO

     1174     8344    4              END;

   8344  3 002153   002167 710000 3                  TRA     s:8351

     1175     8345    4           ELSE DO;

     1176     8346    4              FPT_OPEN.V.FUN# = OPEN_FUNCTION (OPTIONS.EXIST#);

   8346  3 002154   000002 236100                    LDQ     2,,PR0
         3 002155   777777 376007                    ANQ     -1,DL
         3 002156   000100 100406                    MLR     fill='000'O
         3 002157   000074 000001 1                  ADSC9   OPEN_FUNCTION,Q          cn=0,n=1
         3 002160   200113 400001                    ADSC9   FPT_OPEN+37,,AUTO        cn=2,n=1

     1177     8347    4              FPT_OPEN.V.EXIST# = OPEN_EXIST (OPTIONS.EXIST#);

   8347  3 002161   000002 236100                    LDQ     2,,PR0
         3 002162   777777 376007                    ANQ     -1,DL
         3 002163   000011 402007                    MPY     9,DL
         3 002164   003100 061406                    CSR     bolr='003'O
         3 002165   000076 000011 1                  BDSC    OPEN_EXIST,Q             by=0,bit=0,n=9
         3 002166   200112 600002                    BDSC    FPT_OPEN+36,,AUTO        by=3,bit=0,n=2

     1178     8348    4              END;

     1179     8349
     1180     8350
     1181     8351    3           CALL VDG$OALLOC (%CLS_FIT, PORT.FIT$)

   8351  3 002167   200003 471500                    LDP1    @STREAM,,AUTO
         3 002170   100001 473500                    LDP3    1,,PR1
         3 002171   300005 634500                    EPPR4   5,,PR3
         3 002172   200151 454500                    STP4    FLV+2,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:124  
         3 002173   000033 236000 4                  LDQ     27
         3 002174   200150 756100                    STQ     FLV+1,,AUTO
         3 002175   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002176   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002177   000000 701000 xent               TSX1    VDG$OALLOC
         3 002200   002537 702000 3                  TSX2    OALLOC_FAILED

     1182     8352    3             ALTRET (OALLOC_FAILED);
     1183     8353    3           FPT_OPEN.FPARAM_ = VECTOR(PORT.FIT$->PORT$FIT.FIT);

   8353  3 002201   200003 470500                    LDP0    @STREAM,,AUTO
         3 002202   000001 471500                    LDP1    1,,PR0
         3 002203   100005 473500                    LDP3    5,,PR1
         3 002204   000030 235000 4                  LDA     24
         3 002205   200150 453500                    STP3    FLV+1,,AUTO
         3 002206   200150 236100                    LDQ     FLV+1,,AUTO
         3 002207   000003 036003                    ADLQ    3,DU
         3 002210   200076 757100                    STAQ    FPT_OPEN+24,,AUTO

     1184     8354    3           FPT_OPEN.V.DCB# = PORT.DCB#;

   8354  3 002211   000001 471500                    LDP1    1,,PR0
         3 002212   100004 720100                    LXL0    4,,PR1
         3 002213   200112 740100                    STX0    FPT_OPEN+36,,AUTO

     1185     8355    3           IF VD_$$MON_ACC.V# > 10 THEN

   8355  3 002214   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 002215   000012 115007                    CMPA    10,DL
         3 002216   002227 604400 3                  TMOZ    s:8357

     1186     8356    3              CALL VDG$MACC_FOPEN_OPEN (FPT_OPEN.V.DCB#, PORT_KEY$);

   8356  3 002217   200041 631500                    EPPR1   PORT_KEY$,,AUTO
         3 002220   200151 451500                    STP1    FLV+2,,AUTO
         3 002221   200112 633500                    EPPR3   FPT_OPEN+36,,AUTO
         3 002222   200150 453500                    STP3    FLV+1,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:125  
         3 002223   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002224   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002225   000000 701000 xent               TSX1    VDG$MACC_FOPEN_OPEN
         3 002226   000000 011000                    NOP     0

     1187     8357    3           CALL M$OPEN (FPT_OPEN)

   8357  3 002227   200046 630500                    EPPR0   FPT_OPEN,,AUTO
         3 002230   450000 713400                    CLIMB   alt,open
         3 002231   410400 401760                    pmme    nvectors=18
         3 002232   002234 702000 3                  TSX2    s:8359
         3 002233   002244 710000 3                  TRA     s:8365

     1188     8358    4           WHENALTRETURN DO;

     1189     8359    4              IF FPT_OPEN.V.FUN# ~= %UPDATE# THEN GOTO OPEN_FAILED;

   8359  3 002234   200113 236100                    LDQ     FPT_OPEN+37,,AUTO
         3 002235   777000 376007                    ANQ     -512,DL
         3 002236   001000 116007                    CMPQ    512,DL
         3 002237   002473 601000 3                  TNZ     OPEN_FAILED

     1190     8360    4              FPT_OPEN.V.FUN# = %IN#;

   8360  3 002240   002000 236007                    LDQ     1024,DL
         3 002241   200113 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     1191     8361    4              CALL M$RETRY;

   8361  3 002242   010010 713400                    CLIMB   4104
         3 002243   000000 401760                    pmme    nvectors=0

     1192     8362    4              END;

     1193     8363
     1194     8364                /* Now we're actually open to the file! Record this fact */
     1195     8365    3           PORT.LAST_OP# = %ACCOP_OPEN;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:126  

   8365  3 002244   200003 470500                    LDP0    @STREAM,,AUTO
         3 002245   000001 471500                    LDP1    1,,PR0
         3 002246   000001 220003                    LDX0    1,DU
         3 002247   100007 740100                    STX0    7,,PR1

     1196     8366    3           PORT.EXIST# = OPTIONS.EXIST#;

   8366  3 002250   000001 471500                    LDP1    1,,PR0
         3 002251   200006 473500                    LDP3    @OPTIONS,,AUTO
         3 002252   300002 721100                    LXL1    2,,PR3
         3 002253   100003 441100                    SXL1    3,,PR1

     1197     8367
     1198     8368    3           EXT_DCB$ = DCBADDR(PORT.DCB#);

   8368  3 002254   000001 471500                    LDP1    1,,PR0
         3 002255   000003 474400 4                  LDP4    3
         3 002256   400000 475500                    LDP5    0,,PR4
         3 002257   100004 721100                    LXL1    4,,PR1
         3 002260   500000 236111                    LDQ     0,X1,PR5
         3 002261   200042 756100                    STQ     EXT_DCB$,,AUTO

     1199     8369    3           IF EXT$DCB.ASN# ~= %FILE# THEN

   8369  3 002262   200042 476500                    LDP6    EXT_DCB$,,AUTO
         3 002263   600032 236100                    LDQ     26,,PR6
         3 002264   777000 376007                    ANQ     -512,DL
         3 002265   001000 116007                    CMPQ    512,DL
         3 002266   002501 601000 3                  TNZ     BAD_FILE_ASN_FAILURE

     1200     8370    3              GOTO BAD_FILE_ASN_FAILURE;
     1201     8371    3           IF (NOT EXT$DCB.FFLG.DELR#) OR (NOT EXT$DCB.FFLG.UPD#)

   8371  3 002267   600004 236100                    LDQ     4,,PR6
         3 002270   200000 316003                    CANQ    65536,DU
         3 002271   002276 600000 3                  TZE     s:8373
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:127  
         3 002272   040000 316003                    CANQ    16384,DU
         3 002273   002276 600000 3                  TZE     s:8373
         3 002274   100000 316003                    CANQ    32768,DU
         3 002275   002300 601000 3                  TNZ     s:8380

     1202     8372    4             OR (NOT EXT$DCB.FFLG.WNEW#) THEN DO;

     1203     8373    4              PORT.INTRINSIC_PROTECT = %TRUE;

   8373  3 002276   400000 236003                    LDQ     -131072,DU
         3 002277   100004 256100                    ORSQ    4,,PR1

     1204     8374    4              END;

     1205     8375
     1206     8376                /*
     1207     8377                *   Merge info from Structure and the DCB into PORT.
     1208     8378                */
     1209     8379
     1210     8380    3           PORT.STRUCTURE$ = OPTIONS.STRUCTURE$;

   8380  3 002300   000001 471500                    LDP1    1,,PR0
         3 002301   300000 236100                    LDQ     0,,PR3
         3 002302   100006 756100                    STQ     6,,PR1

     1211     8381
     1212     8382    4           DO CASE (EXT$DCB.ORG#);

   8382  3 002303   600032 236100                    LDQ     26,,PR6
         3 002304   000033 772000                    QRL     27
         3 002305   000016 116007                    CMPQ    14,DL
         3 002306   002310 602006 3                  TNC     s:8382+5,QL
         3 002307   002356 710000 3                  TRA     s:8399
         3 002310   002356 710000 3                  TRA     s:8399
         3 002311   002326 710000 3                  TRA     s:8384
         3 002312   002350 710000 3                  TRA     s:8394
         3 002313   002356 710000 3                  TRA     s:8399
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:128  
         3 002314   002326 710000 3                  TRA     s:8384
         3 002315   002356 710000 3                  TRA     s:8399
         3 002316   002353 710000 3                  TRA     s:8396
         3 002317   002356 710000 3                  TRA     s:8399
         3 002320   002356 710000 3                  TRA     s:8399
         3 002321   002356 710000 3                  TRA     s:8399
         3 002322   002356 710000 3                  TRA     s:8399
         3 002323   002356 710000 3                  TRA     s:8399
         3 002324   002356 710000 3                  TRA     s:8399
         3 002325   002353 710000 3                  TRA     s:8396

     1213     8383    4            CASE (%CONSEC#, %UR#);

     1214     8384    4              DCB_ORG = %ORG_CONSEC;

   8384  3 002326   001000 236003                    LDQ     512,DU
         3 002327   200043 756100                    STQ     DCB_ORG,,AUTO

     1215     8385    5              IF OPTIONS.EXIST# ~= %EX_NEW THEN DO;

   8385  3 002330   300002 721100                    LXL1    2,,PR3
         3 002331   000001 101003                    CMPX1   1,DU
         3 002332   002357 600000 3                  TZE     s:8402

     1216     8386                      /* Rewind the file to BOF */
     1217     8387    5                 FPT_PFIL.V.DCB# = PORT.DCB#;

   8387  3 002333   000001 471500                    LDP1    1,,PR0
         3 002334   100004 722100                    LXL2    4,,PR1
         3 002335   000002 742000 2                  STX2    FPT_PFIL+2

     1218     8388    5                 CALL M$PFIL (FPT_PFIL)

   8388  3 002336   000000 630400 2                  EPPR0   FPT_PFIL
         3 002337   440004 713400                    CLIMB   alt,+16388
         3 002340   400000 401760                    pmme    nvectors=1
         3 002341   002507 702000 3                  TSX2    PFIL_FAILED
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:129  

     1219     8389    5                   ALTRET (PFIL_FAILED);
     1220     8390                      /* DCB is now positioned at first record */
     1221     8391    5                 PORT.CURRENT.KEY (%LVL_EXT_REC-1) = VD_KEY_FIRST_CONSEC_REC;

   8391  3 002342   200003 470500                    LDP0    @STREAM,,AUTO
         3 002343   000001 471500                    LDP1    1,,PR0
         3 002344   000100 100400                    MLR     fill='000'O
         3 002345   000000 000010 xsym               ADSC9   VD_KEY_FIRST_CONSEC_REC  cn=0,n=8
         3 002346   100012 000010                    ADSC9   10,,PR1                  cn=0,n=8

     1222     8392    5                 END;

   8392  3 002347   002357 710000 3                  TRA     s:8402

     1223     8393    4            CASE (%KEYED#);

     1224     8394    4              DCB_ORG = %ORG_KEYED;

   8394  3 002350   002000 236003                    LDQ     1024,DU
         3 002351   200043 756100                    STQ     DCB_ORG,,AUTO
         3 002352   002357 710000 3                  TRA     s:8402

     1225     8395    4            CASE (%INDEXED#, %IREL#);

     1226     8396    4              DCB_ORG = %ORG_INDEXED;

   8396  3 002353   003000 236003                    LDQ     1536,DU
         3 002354   200043 756100                    STQ     DCB_ORG,,AUTO

     1227     8397    4              GOTO BAD_FILE_ORG_FAILURE;   /*N* Remove eventually */

   8397  3 002355   002515 710000 3                  TRA     BAD_FILE_ORG_FAILURE

     1228     8398    4            CASE (ELSE);

     1229     8399    4              GOTO BAD_FILE_ORG_FAILURE;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:130  

   8399  3 002356   002515 710000 3                  TRA     BAD_FILE_ORG_FAILURE

     1230     8400    4            END;

     1231     8401
     1232     8402    3           PORT_FIT$ = PORT.FIT$;

   8402  3 002357   000001 471500                    LDP1    1,,PR0
         3 002360   100005 236100                    LDQ     5,,PR1
         3 002361   200044 756100                    STQ     PORT_FIT$,,AUTO

     1233     8403    3           PORT$FIT.CODE2$ = ADDR(PORT$FIT.FIT);

   8403  3 002362   000003 036003                    ADLQ    3,DU
         3 002363   200044 473500                    LDP3    PORT_FIT$,,AUTO
         3 002364   300001 756100                    STQ     1,,PR3

     1234     8404    3           PORT$FIT.CODE3$ = ADDR(PORT$FIT.FIT);

   8404  3 002365   300002 756100                    STQ     2,,PR3

     1235     8405    3           CALL XSF$LOCCODT (PORT$FIT.CODE2$, 2)

   8405  3 002366   000034 236000 4                  LDQ     28
         3 002367   200151 756100                    STQ     FLV+2,,AUTO
         3 002370   200044 236100                    LDQ     PORT_FIT$,,AUTO
         3 002371   000001 036003                    ADLQ    1,DU
         3 002372   200150 756100                    STQ     FLV+1,,AUTO
         3 002373   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002374   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002375   000000 701000 xent               TSX1    XSF$LOCCODT
         3 002376   002400 702000 3                  TSX2    s:8407
         3 002377   002403 710000 3                  TRA     s:8409

     1236     8406    4           WHENALTRETURN DO;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:131  
     1237     8407    4              PORT$FIT.CODE2$ = ADDR(NIL);

   8407  3 002400   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 002401   200044 470500                    LDP0    PORT_FIT$,,AUTO
         3 002402   000001 756100                    STQ     1,,PR0

     1238     8408    4              END;

     1239     8409    3           CALL XSF$LOCCODT (PORT$FIT.CODE3$, 3)

   8409  3 002403   000035 236000 4                  LDQ     29
         3 002404   200151 756100                    STQ     FLV+2,,AUTO
         3 002405   200044 236100                    LDQ     PORT_FIT$,,AUTO
         3 002406   000002 036003                    ADLQ    2,DU
         3 002407   200150 756100                    STQ     FLV+1,,AUTO
         3 002410   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002411   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002412   000000 701000 xent               TSX1    XSF$LOCCODT
         3 002413   002415 702000 3                  TSX2    s:8411
         3 002414   002420 710000 3                  TRA     s:8414

     1240     8410    4           WHENALTRETURN DO;

     1241     8411    4              PORT$FIT.CODE3$ = ADDR(NIL);

   8411  3 002415   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 002416   200044 470500                    LDP0    PORT_FIT$,,AUTO
         3 002417   000002 756100                    STQ     2,,PR0

     1242     8412    4              END;

     1243     8413
     1244     8414    3           PORT.LEVEL.ORG# (%LVL_EXT_REC) = STRUCTURE$LEVEL.ORG#;

   8414  3 002420   200003 470500                    LDP0    @STREAM,,AUTO
         3 002421   000001 471500                    LDP1    1,,PR0
         3 002422   200025 473500                    LDP3    STRUCTURE_LEVEL$,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:132  
         3 002423   300002 720100                    LXL0    2,,PR3
         3 002424   100032 740100                    STX0    26,,PR1

     1245     8415    3           IF STRUCTURE$LEVEL.ORG# = 0 THEN

   8415  3 002425   300002 720100                    LXL0    2,,PR3
         3 002426   002435 601000 3                  TNZ     s:8418

     1246     8416    3              PORT.LEVEL.ORG# (%LVL_EXT_REC) = DCB_ORG;

   8416  3 002427   000001 471500                    LDP1    1,,PR0
         3 002430   200043 236100                    LDQ     DCB_ORG,,AUTO
         3 002431   000033 772000                    QRL     27
         3 002432   000000 621006                    EAX1    0,QL
         3 002433   100032 741100                    STX1    26,,PR1
         3 002434   002444 710000 3                  TRA     s:8422

     1247     8417    4           ELSE DO;

     1248     8418    4              IF STRUCTURE$LEVEL.ORG# ~= DCB_ORG THEN

   8418  3 002435   200043 236100                    LDQ     DCB_ORG,,AUTO
         3 002436   000033 772000                    QRL     27
         3 002437   200150 756100                    STQ     FLV+1,,AUTO
         3 002440   300002 236100                    LDQ     2,,PR3
         3 002441   777777 376007                    ANQ     -1,DL
         3 002442   200150 116100                    CMPQ    FLV+1,,AUTO
         3 002443   002523 601000 3                  TNZ     ORG_CONFLICT_FAILURE

     1249     8419    4                 GOTO ORG_CONFLICT_FAILURE;
     1250     8420    4              END;

     1251     8421
     1252     8422    3           PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) = STRUCTURE$LEVEL.KEY_TYPE#;

   8422  3 002444   000001 471500                    LDP1    1,,PR0
         3 002445   300003 220100                    LDX0    3,,PR3
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:133  
         3 002446   100032 440100                    SXL0    26,,PR1

     1253     8423    3           IF STRUCTURE$LEVEL.KEY_TYPE# = 0 THEN

   8423  3 002447   300003 220100                    LDX0    3,,PR3
         3 002450   002460 601000 3                  TNZ     s:8426

     1254     8424    3              PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) =

   8424  3 002451   000001 471500                    LDP1    1,,PR0
         3 002452   100032 236100                    LDQ     26,,PR1
         3 002453   000022 772000                    QRL     18
         3 002454   000001 736000                    QLS     1
         3 002455   000100 100406                    MLR     fill='000'O
         3 002456   000102 000002 1                  ADSC9   DEFAULT_KEY_TYPES_FOR_ORGS,Q cn=0,n=2
         3 002457   100032 400002                    ADSC9   26,,PR1                  cn=2,n=2

     1255     8425    3                DEFAULT_KEY_TYPES_FOR_ORGS (PORT.LEVEL.ORG# (%LVL_EXT_REC));
     1256     8426    3           IF PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_CONSEC

   8426  3 002460   000001 471500                    LDP1    1,,PR0
         3 002461   100032 220100                    LDX0    26,,PR1
         3 002462   000001 100003                    CMPX0   1,DU
         3 002463   002467 601000 3                  TNZ     s:8430
         3 002464   100032 721100                    LXL1    26,,PR1
         3 002465   000001 101003                    CMPX1   1,DU
         3 002466   002531 601000 3                  TNZ     ORG_KEYTYPE_CONFLICT_FAILURE

     1257     8427    3             AND PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) ~= %KT_NUMBER THEN
     1258     8428    3              GOTO ORG_KEYTYPE_CONFLICT_FAILURE;
     1259     8429
     1260     8430    3           PORT.LEVEL.SPEC_TYPE# (%LVL_EXT_REC) = STRUCTURE$LEVEL.SPEC_TYPE#;

   8430  3 002467   300003 721100                    LXL1    3,,PR3
         3 002470   100033 741100                    STX1    27,,PR1

     1261     8431
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:134  
     1262     8432    3           RETURN;

   8432  3 002471   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002472   000001 702211                    TSX2  ! 1,X1

     1263     8433
     1264     8434
     1265     8435
     1266     8436    3   OPEN_FAILED:
     1267     8437    3           CALL SET_ERROR_SERIOUS (B$TCB);

   8437  3 002473   000000 236000 xsym  OPEN_FAILED  LDQ     B$TCB$
         3 002474   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002475   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 002476   000000 011000                    NOP     0

     1268     8438    3           ALTRETURN;

   8438  3 002477   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002500   000000 702211                    TSX2  ! 0,X1

     1269     8439
     1270     8440
     1271     8441    3   BAD_FILE_ASN_FAILURE:
     1272     8442    3           CALL SET_ERROR_SERIOUS (%E$FILE_ASN_NOT_ACCESSABLE);

   8442  3 002501   000037 236000 4     BAD_FILE_AS* LDQ     31
         3 002502   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002503   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 002504   000000 011000                    NOP     0

     1273     8443    3           ALTRETURN;

   8443  3 002505   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002506   000000 702211                    TSX2  ! 0,X1

     1274     8444
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:135  
     1275     8445
     1276     8446    3   PFIL_FAILED:
     1277     8447    3           CALL SET_ERROR_SERIOUS (B$TCB);

   8447  3 002507   000000 236000 xsym  PFIL_FAILED  LDQ     B$TCB$
         3 002510   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002511   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 002512   000000 011000                    NOP     0

     1278     8448    3           ALTRETURN;

   8448  3 002513   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002514   000000 702211                    TSX2  ! 0,X1

     1279     8449
     1280     8450
     1281     8451    3   BAD_FILE_ORG_FAILURE:
     1282     8452    3           CALL SET_ERROR_SERIOUS (%E$FILE_ORG_NOT_ACCESSABLE);

   8452  3 002515   000041 236000 4     BAD_FILE_OR* LDQ     33
         3 002516   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002517   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 002520   000000 011000                    NOP     0

     1283     8453    3           ALTRETURN;

   8453  3 002521   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002522   000000 702211                    TSX2  ! 0,X1

     1284     8454
     1285     8455
     1286     8456    3   ORG_CONFLICT_FAILURE:
     1287     8457    3           CALL SET_ERROR_SERIOUS (%E$ORG_CONFLICT);

   8457  3 002523   000043 236000 4     ORG_CONFLIC* LDQ     35
         3 002524   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002525   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:136  
         3 002526   000000 011000                    NOP     0

     1288     8458    3           ALTRETURN;

   8458  3 002527   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002530   000000 702211                    TSX2  ! 0,X1

     1289     8459
     1290     8460
     1291     8461    3   ORG_KEYTYPE_CONFLICT_FAILURE:
     1292     8462    3           CALL SET_ERROR_SERIOUS (%E$ORG_KEYTYPE_CONFLICT);

   8462  3 002531   000045 236000 4     ORG_KEYTYPE* LDQ     37
         3 002532   200145 756100                    STQ     VLP_SN+5,,AUTO
         3 002533   002541 701000 3                  TSX1    SET_ERROR_SERIOUS
         3 002534   000000 011000                    NOP     0

     1293     8463    3           ALTRETURN;

   8463  3 002535   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002536   000000 702211                    TSX2  ! 0,X1

   8457  3 002537                       OALLOC_FAIL* null
   8457  3 002537                       OALLOC_DCB_* null
   8457  3 002537                       OFREE_FAILED null
   8457  3 002537                       OFREE_DCB_F* null
     1294     8464
     1295     8465
     1296     8466    3   OALLOC_FAILED: ;
     1297     8467    3   OALLOC_DCB_FAILED: ;
     1298     8468    3   OFREE_FAILED: ;
     1299     8469    3   OFREE_DCB_FAILED: ;
     1300     8470    3           ALTRETURN;

   8470  3 002537   200040 221300                    LDX1  ! CONSEC_BY_ACCIDENT+1,,AUTO
         3 002540   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:137  
     1301     8471
     1302     8472    3   END OPEN_THE_PORT_EXTERNAL;
     1303     8473
     1304     8474    2   END FILE_LEVEL_OPEN;
     1305     8475
     1306     8476        %EJECT;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:138  
     1307     8477    1   SET_ERROR_SERIOUS: PROC (ERR_CODE);

   8477  3 002541   200144 741300       SET_ERROR_S* STX1  ! VLP_SN+4,,AUTO

     1308     8478
     1309     8479    2   DCL ERR_CODE SBIN;
     1310     8480    2   DCL T$ PTR;
     1311     8481    2   DCL FLV UBIN;
     1312     8482
     1313     8483    2           FLV = %FLV_SERIOUS;

   8483  3 002542   000003 235007                    LDA     3,DL
         3 002543   200147 755100                    STA     FLV,,AUTO

     1314     8484    2           GOTO COMMON;

   8484  3 002544   002550 710000 3                  TRA     COMMON

     1315     8485
     1316     8486    2   SET_ERROR_WARN: ENTRY (ERR_CODE);

   8486  3 002545   200144 741300       SET_ERROR_W* STX1  ! VLP_SN+4,,AUTO

     1317     8487
     1318     8488    2           FLV = %FLV_WARN;

   8488  3 002546   000002 235007                    LDA     2,DL
         3 002547   200147 755100                    STA     FLV,,AUTO

   8488  3 002550                       COMMON       null
     1319     8489    2   COMMON: ;
     1320     8490    2           CALL VDG$OALLOC (%CLS_ERR, T$)

   8490  3 002550   200146 630500                    EPPR0   T$,,AUTO
         3 002551   200151 450500                    STP0    FLV+2,,AUTO
         3 002552   000046 236000 4                  LDQ     38
         3 002553   200150 756100                    STQ     FLV+1,,AUTO
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:139  
         3 002554   200150 630500                    EPPR0   FLV+1,,AUTO
         3 002555   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 002556   000000 701000 xent               TSX1    VDG$OALLOC
         3 002557   002652 702000 3                  TSX2    OALLOC_FAILED

     1321     8491    2             ALTRET (OALLOC_FAILED);
     1322     8492    2           VD_ERR$ = T$;

   8492  3 002560   200146 236100                    LDQ     T$,,AUTO
         3 002561   200010 756100                    STQ     VD_ERR$,,AUTO

     1323     8493    2           IF ADDR(ERR_CODE)~=B$TCB$ THEN

   8493  3 002562   200145 236100                    LDQ     @ERR_CODE,,AUTO
         3 002563   000000 116000 xsym               CMPQ    B$TCB$
         3 002564   002575 600000 3                  TZE     s:8495

     1324     8494    2              VD$ERR.ERR.CODE# = ERR_CODE;

   8494  3 002565   200010 470500                    LDP0    VD_ERR$,,AUTO
         3 002566   200145 471500                    LDP1    @ERR_CODE,,AUTO
         3 002567   100000 236100                    LDQ     0,,PR1
         3 002570   000003 736000                    QLS     3
         3 002571   000002 676100                    ERQ     2,,PR0
         3 002572   377770 376007                    ANQ     131064,DL
         3 002573   000002 656100                    ERSQ    2,,PR0
         3 002574   002614 710000 3                  TRA     s:8498

     1325     8495    2           ELSE IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$CREATERR THEN

   8495  3 002575   000000 470400 xsym               LDP0    B$TCB$
         3 002576   000000 471500                    LDP1    0,,PR0
         3 002577   100102 236100                    LDQ     66,,PR1
         3 002600   377770 376007                    ANQ     131064,DL
         3 002601   001560 116007                    CMPQ    880,DL
         3 002602   002611 601000 3                  TNZ     s:8497

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:140  
     1326     8496    2                 VD$ERR.ERR.CODE# = %E$VD_CREATERR;

   8496  3 002603   200010 473500                    LDP3    VD_ERR$,,AUTO
         3 002604   300002 236100                    LDQ     2,,PR3
         3 002605   000011 376000 4                  ANQ     9
         3 002606   004240 276007                    ORQ     2208,DL
         3 002607   300002 756100                    STQ     2,,PR3
         3 002610   002614 710000 3                  TRA     s:8498

     1327     8497    2              ELSE VD$ERR.ERR = B$TCB.ALT$->B$ALT.ERR;

   8497  3 002611   100102 236100                    LDQ     66,,PR1
         3 002612   200010 473500                    LDP3    VD_ERR$,,AUTO
         3 002613   300002 756100                    STQ     2,,PR3

     1328     8498    2           VD$ERR.FLAGLEV# = FLV;

   8498  3 002614   200147 720100                    LXL0    FLV,,AUTO
         3 002615   200010 470500                    LDP0    VD_ERR$,,AUTO
         3 002616   000003 740100                    STX0    3,,PR0

     1329     8499    2           VD$ERR.DCB# = PORT.DCB#;

   8499  3 002617   200003 471500                    LDP1    @STREAM,,AUTO
         3 002620   100001 473500                    LDP3    1,,PR1
         3 002621   300004 721100                    LXL1    4,,PR3
         3 002622   000004 741100                    STX1    4,,PR0

     1330     8500    2           VD_NUMBER$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   8500  3 002623   200010 236100                    LDQ     VD_ERR$,,AUTO
         3 002624   000005 036003                    ADLQ    5,DU
         3 002625   200011 756100                    STQ     VD_NUMBER$,,AUTO

     1331     8501    2           VD$NUMBER.OBJECT.CLASS# (0) = %CLS_ORG;

   8501  3 002626   000034 222003                    LDX2    28,DU
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:141  
         3 002627   200011 473500                    LDP3    VD_NUMBER$,,AUTO
         3 002630   300000 742100                    STX2    0,,PR3

     1332     8502    2           VD$NUMBER.V# (0) = PORT.LEVEL.ORG# (%LVL_EXT_REC);

   8502  3 002631   100001 474500                    LDP4    1,,PR1
         3 002632   400032 236100                    LDQ     26,,PR4
         3 002633   000022 772000                    QRL     18
         3 002634   300003 756100                    STQ     3,,PR3

     1333     8503    2           VD$NUMBER.OBJECT.CLASS# (1) = %CLS_KEY_TYPE;

   8503  3 002635   000030 221003                    LDX1    24,DU
         3 002636   300004 741100                    STX1    4,,PR3

     1334     8504    2           VD$NUMBER.V# (1) = PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC);

   8504  3 002637   100001 474500                    LDP4    1,,PR1
         3 002640   400032 236100                    LDQ     26,,PR4
         3 002641   777777 376007                    ANQ     -1,DL
         3 002642   300007 756100                    STQ     7,,PR3

     1335     8505    2           IF FLV = %FLV_SERIOUS THEN

   8505  3 002643   200147 235100                    LDA     FLV,,AUTO
         3 002644   000003 115007                    CMPA    3,DL
         3 002645   002652 601000 3                  TNZ     OALLOC_FAILED

     1336     8506    2              CALL VDA$FCLOSE (STREAM);   /* Let altret fall thru */

   8506  3 002646   200003 630500                    EPPR0   @STREAM,,AUTO
         3 002647   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002650   000000 701000 xent               TSX1    VDA$FCLOSE
         3 002651   000000 011000                    NOP     0

   8505  3 002652                       OALLOC_FAIL* null
     1337     8507    2   OALLOC_FAILED:;
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:142  
     1338     8508    2           RETURN;

   8508  3 002652   200144 221300                    LDX1  ! VLP_SN+4,,AUTO
         3 002653   000001 702211                    TSX2  ! 1,X1
     1339     8509    2   END SET_ERROR_SERIOUS;
     1340     8510    1   END VDA$FOPEN;
     1341     8511        %EOD;

PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:143  
--  Include file information  --

   B$JIT.:LIBRARY  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FOPEN.
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:144  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$FOPEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/d STRC(2088)  r     1 CONST_FPT_OPEN
   102-0-0/h UBIN(18)    r     1 DEFAULT_KEY_TYPES_FOR_ORGS(0:7)
    76-0-0/c UBIN(9)     r     1 OPEN_EXIST(0:7)
    74-0-0/c UBIN(9)     r     1 OPEN_FUNCTION(0:7)
   100-0-0/c UBIN(9)     r     1 OPEN_ORG(0:7)
     0-0-0/b BIT (4)     r     1 PROTECT_FLAGS_FOR_BOOL(0:1)
     1-0-0/b BIT (4)     r     1 PROTECT_FLAGS_FOR_OPTION(0:7)

  ****  Section 002  Data  VDA$FOPEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(144)   r     1 FPT_PFIL

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ABSOLUTE                 43-0-0/w PTR         r     1 @DIR_NODE
   145-0-0/w PTR         r     1 @ERR_CODE                 41-0-0/w PTR         r     1 @FILE_NODE$
    42-0-0/w PTR         r     1 @INSERT_NODE$             21-0-0/w PTR         r     1 @KEY
    27-0-0/w PTR         r     1 @KEY                       6-0-0/w PTR         r     1 @OPTIONS
     5-0-0/w PTR         r     1 @RELATIVE                  3-0-0/w PTR         r     1 @STREAM
    *0-0-0/w STRC(72)    r     1 ABSOLUTE                  14-0-0/w PTR         r     1 ABS_KEY$
    15-0-0/w PTR         r     1 CANDIDATE_KEY$            24-0-0/w PTR         r     1 CAND_KEY$
    23-0-0/w PTR         r     1 CAND_PORT$                37-0-0/w BIT         r     1 CONSEC_BY_ACCIDENT
    43-0-0/w UBIN(9)     r     1 DCB_ORG                   13-0-0/c CHAR(31)    r     1 DIR_KEY
    *0-0-0/w STRC(576)   r     1 DIR_NODE                  30-0-0/w PTR         r     1 DIR_NODE$
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:145  
    16-0-0/w BIT         r     1 DO_THE_CALL
    36-0-0/w BIT         r     1 ENTIRE_STRUCTURE_PROTECTED
    *0-0-0/w SBIN        r     1 ERR_CODE                  42-0-0/w PTR         r     1 EXT_DCB$
    32-0-0/w PTR         r     1 FILE_KEY$                 31-0-0/w PTR         r     1 FILE_NODE$
    *0-0-0/w PTR         r     1 FILE_NODE$                32-0-0/w PTR         r     1 FILE_NODE_KEY_NAME$
    33-0-0/c CHAR        r     1 FILE_STCLASS             147-0-0/w UBIN        r     1 FLV
    46-0-0/d STRC(2088)  r     1 FPT_OPEN                  22-0-0/w PTR         r     1 GIVEN_KEY$
    13-0-0/w SBIN        r     1 I                         *0-0-0/w PTR         r     1 INSERT_NODE$
    *0-0-0/w STRC(72)    r     1 KEY                       *0-0-0/w STRC(72)    r     1 KEY
     7-0-0/w SBIN        r     1 LEVEL                     30-0-0/w PTR         r     1 NEW_PORT$
    *0-0-0/w STRC(180)   r     1 OPTIONS                   34-0-0/w SBIN        r     1 PFN_INDEX
    44-0-0/w PTR         r     1 PORT_FIT$                 26-0-0/w PTR         r     1 PORT_KEY$
    41-0-0/w PTR         r     1 PORT_KEY$                 27-0-0/w PTR         r     1 PORT_KEY_NAME$
    *0-0-0/w SBIN        r     1 RELATIVE                  31-0-0/w PTR         r     1 REQ_DCB$
    *0-0-0/w STRC(864)   r     1 STREAM                    25-0-0/w PTR         r     1 STRUCTURE_LEVEL$
    24-0-0/w PTR         r     1 STRUCTURE_LEVEL_NODE$
    23-0-0/w PTR         r     1 STRUCTURE_SPEC$          146-0-0/w PTR         r     1 T$
    10-0-0/w PTR         r     1 VD_ERR$                   11-0-0/w PTR         r     1 VD_NUMBER$
   140-0-0/d STRC(90)    r     1 VLP_SN
    35-0-0/w PTR         r     1 WHERE_TO_INSERT_NEW_FILE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w ASTR(90)    r     1 VD_$FILETYPE
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w STRC(72)    r     1 VD_KEY_FIRST_CONSEC_REC

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 ABS$KEY                    0-0-0/w STRC(2448)  r     1 B$ALT
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:146  
     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w ASTR(9)     r     1 CAND$KEY                   0-0-0/w ASTR(9)     r     1 CAND$KEY
     0-0-0/w STRC(1944)  r     1 CAND$PORT                  0-0-0/w STRC(576)   r     1 DIR$NODE
     0-0-0/d ASTR(3528)  r     1 EXT$DCB                    0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(648)   r     1 FILE$KEY                   0-0-0/w STRC(648)   r     1 FILE$KEY
     0-0-0/w STRC(468)   r     1 FILE$NODE                  0-0-0/w STRC(468)   r     1 FILE$NODE
     0-0-0/c ASTR(9)     r     1 FILE$NODE_KEY_NAME         0-0-0/w ASTR(9)     r     1 GIVEN$KEY
     0-0-0/w STRC(468)   r     1 INSERT$NODE                0-0-0/w STRC(1944)  r     1 NEW$PORT
     0-0-0/w STRC(1944)  r     1 PORT                       0-0-0/w STRC(36972) r     1 PORT$FIT
     0-0-0/w STRC(648)   r     1 PORT$KEY                   0-0-0/w STRC(648)   r     1 PORT$KEY
     0-0-0/c ASTR(9)     r     1 PORT$KEY_NAME              0-0-0/d ASTR(3528)  r     1 REQ$DCB
     0-0-0/w STRC(468)   r     1 STRUCTURE                  0-0-0/w STRC(324)   r     1 STRUCTURE$LEVEL
     0-0-0/w STRC(468)   r     1 STRUCTURE$LEVEL_NODE       0-0-0/w STRC(180)   r     1 STRUCTURE$SPEC
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(648)   r     1 VD$FILE_KEY                0-0-0/w STRC(648)   r     1 VD$FILE_KEY
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(36972) r     1 VD$FIT
     0-0-0/w STRC(144)   r     1 VD$NUMBER(0:2)
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE            0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$FOPEN requires 1452 words for executable code.
   Procedure VDA$FOPEN requires 110 words of local(AUTO) storage.
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:147  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:148  
          MINI XREF LISTING

ABS$KEY.BYTES IN PROCEDURE FILE_LEVEL_LOCATION
      5539**DCL      5598>>IF
ABS$KEY.LENGTH# IN PROCEDURE FILE_LEVEL_LOCATION
      5537**DCL      5539--IMP-SIZ  5598>>IF
ABSOLUTE
      4671**DCL       153--PROC     5418<>CALL     5570>>IF       5623<>CALL     5641<>CALL     5655>>ASSIGN
ABSOLUTE.REP#
      4675**DCL      5582>>IF       5656>>IF
ABSOLUTE.V$
      4675**DCL      5582>>ASSIGN   5582--ASSIGN   5657>>CALL
ABS_KEY$ IN PROCEDURE FILE_LEVEL_LOCATION
      5516**DCL      5529--IMP-PTR  5582<<ASSIGN   5582<<ASSIGN   5598>>IF       5598>>IF
B$ALT.CODE
      5404**DCL      5404--REDEF    5405--REDEF    5405--REDEF
B$ALT.ERR
      5405**DCL      8497>>ASSIGN
B$ALT.ERR.ERR#
      5406**DCL      5406--REDEF    8495>>IF
B$ALT.EVID
      5405**DCL      5405--REDEF    5405--REDEF
B$JIT.ACCN
      4279**DCL      6420>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      4373**DCL      4373--REDEF
B$JIT.ERR.MID
      4280**DCL      4280--REDEF
B$JIT.FACCN
      4279**DCL      6422>>ASSIGN
B$JIT.FPSN
      4360**DCL      6424>>ASSIGN
B$JIT.JRESPEAK
      4441**DCL      4442--REDEF
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:149  
B$JIT.ORIGINATOR_PORT.FROM_CR
      4550**DCL      4550--REDEF    4551--REDEF
B$JIT.PNR
      4454**DCL      4454--REDEF
B$JIT.TSLINE
      4548**DCL      4549--REDEF
B$JIT$
      4896**DCL      4274--IMP-PTR  6420>>ASSIGN   6422>>ASSIGN   6424>>ASSIGN
B$TCB
      5400**DCL      8437<>CALL     8447<>CALL
B$TCB.ALT$
      5400**DCL      8495>>IF       8497>>ASSIGN
B$TCB$
      4895**DCL      5400--IMP-PTR  8437>>CALL     8447>>CALL     8493>>IF       8495>>IF       8497>>ASSIGN
BAD_FILE_ASN_FAILURE IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8442**LABEL    8370--GOTO
BAD_FILE_ORG_FAILURE IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8452**LABEL    8397--GOTO     8399--GOTO
BUILD_PORT IN PROCEDURE FILE_LEVEL_LOCATION
      6109**PROC     5641--CALL     6035--CALL
BUILD_PORT_FAILED IN PROCEDURE FILE_LEVEL_LOCATION
      5676**LABEL    5641--CALLALT
BUILD_PORT_FAILED IN PROCEDURE FIND_PORT
      6044**LABEL    6035--CALLALT
CAND$KEY.BYTES IN PROCEDURE FILE_LEVEL_LOCATION
      5562**DCL      5598>>IF
CAND$KEY.LENGTH# IN PROCEDURE FILE_LEVEL_LOCATION
      5560**DCL      5562--IMP-SIZ  5598>>IF
CAND$KEY.BYTES IN PROCEDURE FIND_PORT
      5965**DCL      5993>>IF       6021>>IF
CAND$KEY.LENGTH# IN PROCEDURE FIND_PORT
      5963**DCL      5965--IMP-SIZ  5993>>IF       6021>>IF
CAND$PORT.FILE_KEY.REP# IN PROCEDURE FIND_PORT
      5898**DCL      5990>>IF       6018>>IF
CAND$PORT.FILE_KEY.V$ IN PROCEDURE FIND_PORT
      5898**DCL      5990>>ASSIGN   5990--ASSIGN   6018>>ASSIGN   6018--ASSIGN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:150  
CAND$PORT.FLINK$ IN PROCEDURE FIND_PORT
      5883**DCL      5995>>ASSIGN
CAND$PORT.REFS# IN PROCEDURE FIND_PORT
      5883**DCL      6006<<ASSIGN   6006>>ASSIGN
CANDIDATE_KEY$ IN PROCEDURE FILE_LEVEL_LOCATION
      5517**DCL      5552--IMP-PTR  5595<<ASSIGN   5595<<ASSIGN   5598>>IF       5598>>IF
CAND_KEY$ IN PROCEDURE FIND_PORT
      5774**DCL      5955--IMP-PTR  5990<<ASSIGN   5990<<ASSIGN   5993>>IF       5993>>IF       6018<<ASSIGN
      6018<<ASSIGN   6021>>IF       6021>>IF
CAND_PORT$ IN PROCEDURE FIND_PORT
      5773**DCL      5857--IMP-PTR  5979<<ASSIGN   5981>>DOWHILE  5982>>IF       5990>>IF       5990>>ASSIGN
      5990>>ASSIGN   5995<<ASSIGN   5995>>ASSIGN   5999>>IF       6005>>ASSIGN   6006>>ASSIGN   6006>>ASSIGN
COMMON IN PROCEDURE SET_ERROR_SERIOUS
      8488**LABEL    8484--GOTO
CONSEC_BY_ACCIDENT IN PROCEDURE FILE_LEVEL_OPEN
      6571**DCL      7290<<ASSIGN   7296<<ASSIGN   7321<<ASSIGN   7324>>IF
CONST_FPT_OPEN IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7918**DCL      8286>>ASSIGN
CONST_FPT_OPEN.ACSVEH_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7920**DCL      7921--REDEF
CONST_FPT_OPEN.ALTKEYS_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7926**DCL      7927--REDEF    7927--REDEF
CONST_FPT_OPEN.HDR_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7925**DCL      7926--REDEF
CONST_FPT_OPEN.TAB_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7924**DCL      7925--REDEF
CONST_FPT_OPEN.UHL_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7918**DCL      7919--REDEF    7919--REDEF
CONST_FPT_OPEN.V IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7927**DCL      7918--DCLINIT
CONST_FPT_OPEN.V.FSN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7958**DCL      7958--REDEF    7958--REDEF
CONST_FPT_OPEN.WSN_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7924**DCL      7924--REDEF
DCB_ORG IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8007**DCL      8384<<ASSIGN   8394<<ASSIGN   8396<<ASSIGN   8416>>ASSIGN   8418>>IF
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:151  
DEFAULT_KEY_TYPES_FOR_ORGS IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7983**DCL      8424>>ASSIGN
DIR$NODE IN PROCEDURE FILE_LEVEL_OPEN
      6926**DCL      7273<>CALL
DIR$NODE.FILE_STCLASS IN PROCEDURE FILE_LEVEL_OPEN
      6953**DCL      7228>>IF
DIR$NODE.FLINK$ IN PROCEDURE FILE_LEVEL_OPEN
      6952**DCL      7233>>ASSIGN
DIR$NODE.HEAD$ IN PROCEDURE FILE_LEVEL_OPEN
      6953**DCL      7230>>ASSIGN
DIR$NODE.KEY IN PROCEDURE FILE_LEVEL_OPEN
      6952**DCL      7228>>IF
DIR_KEY IN PROCEDURE FILE_LEVEL_OPEN
      6558**DCL      7222<<ASSIGN   7228>>IF
DIR_NODE IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7441**DCL      7429--PROC
DIR_NODE.COUNT# IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7468**DCL      7741<<ASSIGN   7741>>ASSIGN
DIR_NODE.HEAD$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7468**DCL      7733<<ASSIGN
DIR_NODE.TAIL$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7468**DCL      7729>>ASSIGN   7738<<ASSIGN
DIR_NODE$ IN PROCEDURE FILE_LEVEL_OPEN
      6564**DCL      6926--IMP-PTR  7208<<ASSIGN   7225<<ASSIGN   7227>>DOWHILE  7228>>IF       7228>>IF
      7230>>ASSIGN   7233<<ASSIGN   7233>>ASSIGN   7269>>IF       7273>>CALL
DO_THE_CALL IN PROCEDURE FILE_LEVEL_LOCATION
      5518**DCL      5635<<ASSIGN   5638<<ASSIGN   5640>>IF
ENTIRE_STRUCTURE_PROTECTED IN PROCEDURE FILE_LEVEL_OPEN
      6570**DCL      7289<<ASSIGN   7307<<ASSIGN   7312>>IF
ERR_CODE IN PROCEDURE SET_ERROR_SERIOUS
      8479**DCL      8477--PROC     8486--ENTRY    8493--IF       8494>>ASSIGN
EXIST_CONFLICT_FAILURE IN PROCEDURE FILE_LEVEL_OPEN
      7357**LABEL    7195--GOTO
EXT$DCB.ACTPOS IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8215**DCL      8215--REDEF
EXT$DCB.ARS# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:152  
      8189**DCL      8189--REDEF
EXT$DCB.ASN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8204**DCL      8369>>IF
EXT$DCB.ATTR IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8208**DCL      8209--REDEF
EXT$DCB.BORROW IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8223**DCL      8223--REDEF    8223--REDEF    8223--REDEF
EXT$DCB.DCBNAME.L IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8237**DCL      8237--IMP-SIZ
EXT$DCB.EOMCHAR# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8193**DCL      8193--REDEF
EXT$DCB.FFLG.DELR# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8194**DCL      8371>>IF
EXT$DCB.FFLG.UPD# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8194**DCL      8371>>IF
EXT$DCB.FFLG.WNEW# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8194**DCL      8371>>IF
EXT$DCB.FLDID IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8218**DCL      8218--REDEF
EXT$DCB.FORM$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8212**DCL      8212--REDEF
EXT$DCB.FSECT IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8228**DCL      8228--REDEF
EXT$DCB.FSN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8205**DCL      8205--REDEF    8205--REDEF    8206--REDEF
EXT$DCB.HEADER$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8211**DCL      8211--REDEF
EXT$DCB.IXTNSIZE# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8209**DCL      8209--REDEF
EXT$DCB.LASTSTA$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8198**DCL      8198--REDEF
EXT$DCB.LVL IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8224**DCL      8224--REDEF
EXT$DCB.NAME#.C IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8199**DCL      8199--REDEF
EXT$DCB.NOEOF IN PROCEDURE OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:153  
      8221**DCL      8221--REDEF
EXT$DCB.NRECS# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8210**DCL      8210--REDEF
EXT$DCB.NRECX IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8229**DCL      8229--REDEF
EXT$DCB.OHDR IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8221**DCL      8221--REDEF
EXT$DCB.ORG# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8204**DCL      8204--REDEF    8382>>DOCASE
EXT$DCB.PRECNO IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8227**DCL      8227--REDEF
EXT$DCB.RCSZ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8233**DCL      8233--REDEF
EXT$DCB.RES# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8200**DCL      8200--REDEF
EXT$DCB.SETX IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8212**DCL      8212--REDEF
EXT$DCB.TAB$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8212**DCL      8212--REDEF
EXT$DCB.TDA IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8226**DCL      8227--REDEF
EXT$DCB.WSN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8200**DCL      8200--REDEF
EXT_DCB$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8006**DCL      8183--IMP-PTR  8368<<ASSIGN   8369>>IF       8371>>IF       8371>>IF       8371>>IF
      8382>>DOCASE
F$DCB.ACTPOS IN PROCEDURE FILE_LEVEL_OPEN
      7155**DCL      7155--REDEF
F$DCB.ARS# IN PROCEDURE FILE_LEVEL_OPEN
      7129**DCL      7129--REDEF
F$DCB.ATTR IN PROCEDURE FILE_LEVEL_OPEN
      7148**DCL      7149--REDEF
F$DCB.BORROW IN PROCEDURE FILE_LEVEL_OPEN
      7163**DCL      7163--REDEF    7163--REDEF    7163--REDEF
F$DCB.DCBNAME.L IN PROCEDURE FILE_LEVEL_OPEN
      7177**DCL      7177--IMP-SIZ
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:154  
F$DCB.EOMCHAR# IN PROCEDURE FILE_LEVEL_OPEN
      7133**DCL      7133--REDEF
F$DCB.FLDID IN PROCEDURE FILE_LEVEL_OPEN
      7158**DCL      7158--REDEF
F$DCB.FORM$ IN PROCEDURE FILE_LEVEL_OPEN
      7152**DCL      7152--REDEF
F$DCB.FSECT IN PROCEDURE FILE_LEVEL_OPEN
      7168**DCL      7168--REDEF
F$DCB.FSN# IN PROCEDURE FILE_LEVEL_OPEN
      7145**DCL      7145--REDEF    7145--REDEF    7146--REDEF
F$DCB.FUN# IN PROCEDURE FILE_LEVEL_OPEN
      7144**DCL      7318>>IF
F$DCB.HEADER$ IN PROCEDURE FILE_LEVEL_OPEN
      7151**DCL      7151--REDEF
F$DCB.IXTNSIZE# IN PROCEDURE FILE_LEVEL_OPEN
      7149**DCL      7149--REDEF
F$DCB.LASTSTA$ IN PROCEDURE FILE_LEVEL_OPEN
      7138**DCL      7138--REDEF
F$DCB.LVL IN PROCEDURE FILE_LEVEL_OPEN
      7164**DCL      7164--REDEF
F$DCB.NAME#.C IN PROCEDURE FILE_LEVEL_OPEN
      7139**DCL      7139--REDEF
F$DCB.NOEOF IN PROCEDURE FILE_LEVEL_OPEN
      7161**DCL      7161--REDEF
F$DCB.NRECS# IN PROCEDURE FILE_LEVEL_OPEN
      7150**DCL      7150--REDEF
F$DCB.NRECX IN PROCEDURE FILE_LEVEL_OPEN
      7169**DCL      7169--REDEF
F$DCB.OHDR IN PROCEDURE FILE_LEVEL_OPEN
      7161**DCL      7161--REDEF
F$DCB.ORG# IN PROCEDURE FILE_LEVEL_OPEN
      7144**DCL      7144--REDEF
F$DCB.PRECNO IN PROCEDURE FILE_LEVEL_OPEN
      7167**DCL      7167--REDEF
F$DCB.RCSZ IN PROCEDURE FILE_LEVEL_OPEN
      7173**DCL      7173--REDEF
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:155  
F$DCB.RES# IN PROCEDURE FILE_LEVEL_OPEN
      7140**DCL      7140--REDEF
F$DCB.SETX IN PROCEDURE FILE_LEVEL_OPEN
      7152**DCL      7152--REDEF
F$DCB.TAB$ IN PROCEDURE FILE_LEVEL_OPEN
      7152**DCL      7152--REDEF
F$DCB.TDA IN PROCEDURE FILE_LEVEL_OPEN
      7166**DCL      7167--REDEF
F$DCB.WSN# IN PROCEDURE FILE_LEVEL_OPEN
      7140**DCL      7140--REDEF
FCLOSE_FAILED IN PROCEDURE FILE_LEVEL_LOCATION
      5676**LABEL    5607--CALLALT
FDETACH_FAILED IN PROCEDURE BUILD_PORT
      6451**LABEL    6401--CALLALT
FDETACH_FAILED IN PROCEDURE FIND_PORT
      6044**LABEL    6002--CALLALT  6023--CALLALT
FILE$KEY.ASN# IN PROCEDURE BUILD_PORT
      6177**DCL      6432<<ASSIGN
FILE$KEY.DCB# IN PROCEDURE BUILD_PORT
      6178**DCL      6411>>IF       6412>>ASSIGN   6413--ASSIGN   6435<<ASSIGN
FILE$KEY.LENGTH# IN PROCEDURE BUILD_PORT
      6175**DCL      6429<<ASSIGN
FILE$KEY.PASS IN PROCEDURE BUILD_PORT
      6178**DCL      6434<<ASSIGN
FILE$KEY.PSN IN PROCEDURE BUILD_PORT
      6178**DCL      6416<<ASSIGN   6424<<ASSIGN
FILE$KEY.RES IN PROCEDURE BUILD_PORT
      6177**DCL      6433<<ASSIGN
FILE$KEY.UNIQUE.ACCT IN PROCEDURE BUILD_PORT
      6176**DCL      6415<<ASSIGN   6417>>IF       6420<<ASSIGN   6422<<ASSIGN   6429--ASSIGN
FILE$KEY.UNIQUE.FNAME.BYTES IN PROCEDURE BUILD_PORT
      6177**DCL      6427<<ASSIGN
FILE$KEY.UNIQUE.FNAME.LENGTH# IN PROCEDURE BUILD_PORT
      6176**DCL      6426<<ASSIGN   6429--ASSIGN   6429>>ASSIGN
FILE$KEY.DCB# IN PROCEDURE FIND_PORT
      5846**DCL      5977>>IF       6029>>IF
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:156  
FILE$KEY.LENGTH# IN PROCEDURE FIND_PORT
      5843**DCL      5975--ASSIGN
FILE$NODE.DESC.KEY IN PROCEDURE FILE_LEVEL_OPEN
      7027**DCL      7238>>IF
FILE$NODE.DESC.KEY.V$ IN PROCEDURE FILE_LEVEL_OPEN
      7029**DCL      7239>>ASSIGN
FILE$NODE.FLINK$ IN PROCEDURE FILE_LEVEL_OPEN
      6990**DCL      7250>>ASSIGN
FILE$NODE.ACCESS IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7520**DCL      7725<<ASSIGN   7748>>IF
FILE$NODE.BLINK$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7508**DCL      7729<<ASSIGN   7731<<ASSIGN   7732>>IF       7735>>ASSIGN
FILE$NODE.DESC.DATA$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7563**DCL      7758>>IF       7759>>CALL     7759>>CALL
FILE$NODE.DESC.KEY IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7545**DCL      7718<<ASSIGN
FILE$NODE.DESC.KEY.REP# IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7547**DCL      7719>>IF
FILE$NODE.DESC.KEY.V$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7547**DCL      7720<>CALL
FILE$NODE.DESC.SPEC IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7559**DCL      7751>>ASSIGN
FILE$NODE.DESC.SPEC.V$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7561**DCL      7753>>CALL     7753>>CALL
FILE$NODE.FLINK$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7508**DCL      7736<<ASSIGN   7737>>IF       7740>>ASSIGN
FILE$NODE_KEY_NAME.BYTES IN PROCEDURE FILE_LEVEL_OPEN
      7068**DCL      7241>>IF       7243>>IF
FILE$NODE_KEY_NAME.LENGTH# IN PROCEDURE FILE_LEVEL_OPEN
      7066**DCL      7068--IMP-SIZ  7241>>IF       7243>>IF
FILE_KEY$ IN PROCEDURE BUILD_PORT
      6129**DCL      6148--IMP-PTR  6408<<ASSIGN   6411>>IF       6412>>ASSIGN   6413>>ASSIGN   6415>>ASSIGN
      6416>>ASSIGN   6417>>IF       6420>>ASSIGN   6422>>ASSIGN   6424>>ASSIGN   6426>>ASSIGN   6427>>ASSIGN
      6429>>ASSIGN   6429>>ASSIGN   6432>>ASSIGN   6433>>ASSIGN   6434>>ASSIGN   6435>>ASSIGN
FILE_LEVEL_LOCATION
      5512**PROC     5423--CALL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:157  
FILE_LEVEL_LOCATION_FAILED
      5431**LABEL    5423--CALLALT
FILE_LEVEL_OPEN
      6540**PROC     5427--CALL
FILE_LEVEL_OPEN_FAILED
      5431**LABEL    5427--CALLALT
FILE_NODE$ IN PROCEDURE FILE_LEVEL_OPEN
      6565**DCL      6964--IMP-PTR  7207<<ASSIGN   7230<<ASSIGN   7237>>DOWHILE  7238>>IF       7239>>ASSIGN
      7245>>ASSIGN   7246<<ASSIGN   7250<<ASSIGN   7250>>ASSIGN   7269>>IF       7273<>CALL
FILE_NODE$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7431**DCL      7429--PROC     7482--IMP-PTR  7714>>IF       7716<>CALL     7718>>ASSIGN   7719>>IF
      7720>>CALL     7725>>ASSIGN   7729>>ASSIGN   7731>>ASSIGN   7732>>IF       7733>>ASSIGN   7735>>ASSIGN
      7735>>ASSIGN   7736>>ASSIGN   7737>>IF       7738>>ASSIGN   7740>>ASSIGN   7740>>ASSIGN   7747>>ASSIGN
      7748>>IF       7751>>ASSIGN   7753>>CALL     7753>>CALL     7758>>IF       7759>>CALL     7759>>CALL
FILE_NODE_KEY_NAME$ IN PROCEDURE FILE_LEVEL_OPEN
      6566**DCL      7058--IMP-PTR  7239<<ASSIGN   7241>>IF       7241>>IF       7243>>IF       7243>>IF
FILE_STCLASS IN PROCEDURE FILE_LEVEL_OPEN
      6567**DCL      7210<<ASSIGN   7212>>IF       7212--IF       7212--IF       7220--CALLBLT  7222--ASSIGN
      7222--ASSIGN   7228>>IF
FIND_INTERNAL_DIR_NODE IN PROCEDURE FILE_LEVEL_OPEN
      7227**LABEL    7231--EXIT
FIND_INTERNAL_FILE_NODE IN PROCEDURE FILE_LEVEL_OPEN
      7237**LABEL    7242--EXIT     7247--EXIT
FIND_PORT IN PROCEDURE FILE_LEVEL_LOCATION
      5754**PROC     5623--CALL     5671--CALL
FIND_PORT_FAILED IN PROCEDURE FILE_LEVEL_LOCATION
      5676**LABEL    5623--CALLALT  5671--CALLALT
FLV IN PROCEDURE SET_ERROR_SERIOUS
      8481**DCL      8483<<ASSIGN   8488<<ASSIGN   8498>>ASSIGN   8505>>IF
FPT_OPEN IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8074**DCL      8286<<ASSIGN   8357<>CALL
FPT_OPEN.ACCT_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8078**DCL      8302<<ASSIGN
FPT_OPEN.ACSVEH_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8076**DCL      8077--REDEF
FPT_OPEN.ALTKEYS_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:158  
      8082**DCL      8083--REDEF    8083--REDEF
FPT_OPEN.FPARAM_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8079**DCL      8353<<ASSIGN
FPT_OPEN.HDR_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8081**DCL      8082--REDEF
FPT_OPEN.IFPARAM_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8079**DCL      8317<<ASSIGN
FPT_OPEN.NAME_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8075**DCL      8301<<ASSIGN
FPT_OPEN.PASS_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8076**DCL      8309<<ASSIGN
FPT_OPEN.SN_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8074**DCL      8308<<ASSIGN
FPT_OPEN.TAB_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8080**DCL      8081--REDEF
FPT_OPEN.UHL_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8074**DCL      8075--REDEF    8075--REDEF
FPT_OPEN.V IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8083**DCL      8287--ASSIGN
FPT_OPEN.V.ASN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8093**DCL      8303<<ASSIGN
FPT_OPEN.V.DCB# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8083**DCL      8354<<ASSIGN   8356<>CALL
FPT_OPEN.V.EXIST# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8087**DCL      8343<<ASSIGN   8347<<ASSIGN
FPT_OPEN.V.FSN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8114**DCL      8114--REDEF    8114--REDEF
FPT_OPEN.V.FUN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8093**DCL      8342<<ASSIGN   8346<<ASSIGN   8359>>IF       8360<<ASSIGN
FPT_OPEN.V.INITZ.SCRUB# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8084**DCL      8300<<ASSIGN
FPT_OPEN.V.ORG# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8094**DCL      8320<<ASSIGN
FPT_OPEN.V.RES# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8098**DCL      8304<<ASSIGN
FPT_OPEN.V.TYPE# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:159  
      8095**DCL      8321<<ASSIGN
FPT_OPEN.V_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8074**DCL      8287<<ASSIGN
FPT_OPEN.WSN_ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8080**DCL      8080--REDEF
FPT_PFIL IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7998**DCL      8388<>CALL
FPT_PFIL.V IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7998**DCL      7998--DCLINIT
FPT_PFIL.V.DCB# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7998**DCL      8387<<ASSIGN
GIVEN$KEY.BYTES IN PROCEDURE FIND_PORT
      5795**DCL      5993>>IF       6021>>IF
GIVEN$KEY.LENGTH# IN PROCEDURE FIND_PORT
      5793**DCL      5795--IMP-SIZ  5993>>IF       6021>>IF
GIVEN_KEY$ IN PROCEDURE FIND_PORT
      5772**DCL      5785--IMP-PTR  5975<<ASSIGN   5993>>IF       5993>>IF       6021>>IF       6021>>IF
I IN PROCEDURE FILE_LEVEL_LOCATION
      5515**DCL      5663<<ASSIGN   5664>>DOWHILE  5667<<ASSIGN   5667>>ASSIGN
INSERT$NODE.BLINK$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7601**DCL      7731>>ASSIGN
INSERT_NODE$ IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7432**DCL      7429--PROC     7575--IMP-PTR  7728>>IF       7731>>ASSIGN   7736>>ASSIGN
KEY IN PROCEDURE BUILD_PORT
      6119**DCL      6109--PROC     6451>>ASSIGN
KEY.REP# IN PROCEDURE BUILD_PORT
      6123**DCL      6451>>IF
KEY.V$ IN PROCEDURE BUILD_PORT
      6123**DCL      6408>>ASSIGN   6451>>CALL     6451>>CALL
KEY IN PROCEDURE FIND_PORT
      5764**DCL      5754--PROC     6035<>CALL
KEY.REP# IN PROCEDURE FIND_PORT
      5768**DCL      5973>>IF       5974<>CALL
KEY.V$ IN PROCEDURE FIND_PORT
      5768**DCL      5816--IMP-PTR  5975>>ASSIGN   5977>>IF       6029>>IF
LEVEL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:160  
      4900**DCL      7291<<DOINDEX  7294>>IF       7298>>ASSIGN   7304>>ASSIGN   7773<<DOINDEX  7775>>ASSIGN
      7776>>ASSIGN   7777>>ASSIGN   7778>>IF       7779>>ASSIGN   7780>>IF       7781>>IF       7782>>ASSIGN
      7784>>ASSIGN
M$OPEN
      2527**DCL-ENT  8357--CALL
M$PFIL
      2529**DCL-ENT  8388--CALL
M$RETRY
      2584**DCL-ENT  8361--CALL
NEW$PORT.DCB# IN PROCEDURE BUILD_PORT
      6216**DCL      6412<<ASSIGN
NEW$PORT.FILE_KEY IN PROCEDURE BUILD_PORT
      6228**DCL      6451<<ASSIGN
NEW$PORT.FILE_KEY.V$ IN PROCEDURE BUILD_PORT
      6230**DCL      6451<>CALL
NEW$PORT.REFS# IN PROCEDURE BUILD_PORT
      6215**DCL      6410<<ASSIGN
NEW_PORT$ IN PROCEDURE BUILD_PORT
      6127**DCL      6189--IMP-PTR  6407<<ASSIGN   6410>>ASSIGN   6412>>ASSIGN   6451>>ASSIGN   6451>>CALL
OALLOC_DCB_FAILED IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8457**LABEL    8295--CALLALT
OALLOC_FAILED IN PROCEDURE BUILD_PORT
      6451**LABEL    6405--CALLALT
OALLOC_FAILED IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8457**LABEL    8351--CALLALT
OALLOC_FAILED IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7783**LABEL    7716--CALLALT
OALLOC_FAILED IN PROCEDURE SET_ERROR_SERIOUS
      8505**LABEL    8490--CALLALT
OCOPY_FAILED IN PROCEDURE FILE_LEVEL_LOCATION
      5676**LABEL    5627--CALLALT  5657--CALLALT  5677--CALLALT
OCOPY_FAILED IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7783**LABEL    7720--CALLALT  7753--CALLALT  7759--CALLALT  7769--CALLALT
OFREE_DCB_FAILED IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7783**LABEL    7705--CALLALT
OPEN_EXIST IN PROCEDURE OPEN_THE_PORT_EXTERNAL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:161  
      7971**DCL      8347>>ASSIGN
OPEN_FAILED IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8437**LABEL    8359--GOTO
OPEN_FUNCTION IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7969**DCL      8346>>ASSIGN
OPEN_ORG IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      7980**DCL      8320>>ASSIGN
OPEN_THE_PORT_EXTERNAL IN PROCEDURE FILE_LEVEL_OPEN
      7850**PROC     7278--CALL
OPEN_THE_PORT_EXTERNAL_FAILED IN PROCEDURE FILE_LEVEL_OPEN
      7345**LABEL    7278--CALLALT
OPEN_THE_PORT_INTERNAL IN PROCEDURE FILE_LEVEL_OPEN
      7429**PROC     7273--CALL
OPEN_THE_PORT_INTERNAL_FAILED IN PROCEDURE FILE_LEVEL_OPEN
      7345**LABEL    7273--CALLALT
OPTIONS
      4686**DCL       153--PROC     5418<>CALL     5426--IF
OPTIONS.EXIST#
      4691**DCL      7186>>IF       7194>>IF       7269>>IF       7269>>IF       7746>>ASSIGN   8315>>IF
      8346>>ASSIGN   8347>>ASSIGN   8366>>ASSIGN   8385>>IF
OPTIONS.PROTECT#
      4690**DCL      7186>>IF       7298>>ASSIGN   7312>>IF       7324>>IF       8341>>IF
OPTIONS.STRUCTURE$
      4690**DCL      6582--IMP-PTR  7190>>ASSIGN   7288>>ASSIGN   7291>>DOINDEX  7767>>ASSIGN   7772>>ASSIGN
      7773>>DOINDEX  8283>>ASSIGN   8380>>ASSIGN
ORG_CONFLICT_FAILURE IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8457**LABEL    8419--GOTO
ORG_KEYTYPE_CONFLICT_FAILURE IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8462**LABEL    8428--GOTO
PFIL_FAILED IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8447**LABEL    8388--CALLALT
PFN_INDEX IN PROCEDURE FILE_LEVEL_OPEN
      6568**DCL      7220<<CALLBLT  7222>>ASSIGN
PORT.CURRENT.KEY
      4978**DCL      8391<<ASSIGN
PORT.DCB#
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:162  
      4940**DCL      7312>>IF       7317>>IF       7318--IF       7703>>IF       7705<>CALL     8294>>IF
      8295<>CALL     8354>>ASSIGN   8368--ASSIGN   8387>>ASSIGN   8499>>ASSIGN
PORT.EXIST#
      4939**DCL      5606>>IF       7192>>IF       7746<<ASSIGN   8366<<ASSIGN
PORT.FILE_KEY
      4952**DCL      5625>>ASSIGN   5653<<ASSIGN   5655<<ASSIGN   5664>>DOWHILE  5669>>IF       5671<>CALL
      5675>>ASSIGN   7182>>IF       7718>>ASSIGN
PORT.FILE_KEY.REP#
      4954**DCL      5626>>IF       5652>>IF       5676>>IF
PORT.FILE_KEY.V$
      4954**DCL      5627>>CALL     5652>>CALL     5652>>CALL     5657<>CALL     5677>>CALL     7201>>ASSIGN
      7720>>CALL     8289>>ASSIGN
PORT.FIT$
      4940**DCL      7769<>CALL     8351<>CALL     8353>>ASSIGN   8402>>ASSIGN
PORT.INTRINSIC_PROTECT
      4939**DCL      7298>>ASSIGN   7312>>IF       7749<<ASSIGN   8373<<ASSIGN
PORT.LAST_OP#
      4941**DCL      7745<<ASSIGN   8365<<ASSIGN
PORT.LEVEL.DATA$
      5000**DCL      7759<>CALL
PORT.LEVEL.INTERNAL$
      5000**DCL      7747<<ASSIGN
PORT.LEVEL.KEY_TYPE#
      4984**DCL      7776<<ASSIGN   7780>>IF       7782<<ASSIGN   7784<<ASSIGN   8422<<ASSIGN   8424<<ASSIGN
      8426>>IF       8504>>ASSIGN
PORT.LEVEL.ORG#
      4984**DCL      7294>>IF       7775<<ASSIGN   7778>>IF       7779<<ASSIGN   8414<<ASSIGN   8416<<ASSIGN
      8424>>ASSIGN   8426>>IF       8502>>ASSIGN
PORT.LEVEL.SPEC
      4996**DCL      7751<<ASSIGN
PORT.LEVEL.SPEC.REP#
      4998**DCL      7752>>IF
PORT.LEVEL.SPEC.V$
      4998**DCL      7753<>CALL
PORT.LEVEL.SPEC_TYPE#
      4984**DCL      7777<<ASSIGN   8430<<ASSIGN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:163  
PORT.REFS#
      4939**DCL      5637>>IF
PORT.STRUCTURE$
      4941**DCL      7767<<ASSIGN   8380<<ASSIGN
PORT$FIT.CODE2$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8273**DCL      8403<<ASSIGN   8405<>CALL     8407<<ASSIGN
PORT$FIT.CODE3$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8273**DCL      8404<<ASSIGN   8409<>CALL     8411<<ASSIGN
PORT$FIT.FIT IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8273**DCL      8317--ASSIGN   8353--ASSIGN   8403--ASSIGN   8404--ASSIGN
PORT$KEY.DCB# IN PROCEDURE FILE_LEVEL_OPEN
      6891**DCL      7212>>IF
PORT$KEY.PSN IN PROCEDURE FILE_LEVEL_OPEN
      6891**DCL      7212>>IF
PORT$KEY.UNIQUE.ACCT IN PROCEDURE FILE_LEVEL_OPEN
      6889**DCL      7212>>IF
PORT$KEY.UNIQUE.FNAME IN PROCEDURE FILE_LEVEL_OPEN
      6889**DCL      7202--ASSIGN
PORT$KEY.ASN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8178**DCL      8303>>ASSIGN
PORT$KEY.DCB# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8179**DCL      8291>>IF
PORT$KEY.PASS IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8179**DCL      8309--ASSIGN
PORT$KEY.PSN IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8179**DCL      8307>>ASSIGN
PORT$KEY.RES IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8178**DCL      8304>>ASSIGN
PORT$KEY.UNIQUE.ACCT IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8177**DCL      8302--ASSIGN
PORT$KEY.UNIQUE.FNAME IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8177**DCL      8301--ASSIGN
PORT$KEY_NAME.BYTES IN PROCEDURE FILE_LEVEL_OPEN
      6913**DCL      7210>>ASSIGN   7212>>IF       7220>>CALLBLT  7222>>ASSIGN   7241>>IF       7243>>IF
PORT$KEY_NAME.LENGTH# IN PROCEDURE FILE_LEVEL_OPEN
      6911**DCL      6913--IMP-SIZ  7210>>ASSIGN   7212>>IF       7212>>IF       7220>>CALLBLT  7222>>ASSIGN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:164  
      7241>>IF       7243>>IF
PORT_FIT$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8008**DCL      8247--IMP-PTR  8402<<ASSIGN   8403>>ASSIGN   8403>>ASSIGN   8404>>ASSIGN   8404>>ASSIGN
      8405>>CALL     8407>>ASSIGN   8409>>CALL     8411>>ASSIGN
PORT_KEY$ IN PROCEDURE FILE_LEVEL_OPEN
      6562**DCL      6861--IMP-PTR  7201<<ASSIGN   7202>>ASSIGN   7212>>IF       7212>>IF       7212>>IF
PORT_KEY$ IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8005**DCL      8149--IMP-PTR  8289<<ASSIGN   8291>>IF       8301>>ASSIGN   8302>>ASSIGN   8303>>ASSIGN
      8304>>ASSIGN   8307>>ASSIGN   8309>>ASSIGN   8356<>CALL
PORT_KEY_NAME$ IN PROCEDURE FILE_LEVEL_OPEN
      6563**DCL      6903--IMP-PTR  7202<<ASSIGN   7210>>ASSIGN   7210>>ASSIGN   7212>>IF       7212>>IF
      7212>>IF       7220>>CALLBLT  7220>>CALLBLT  7222>>ASSIGN   7222>>ASSIGN   7241>>IF       7241>>IF
      7243>>IF       7243>>IF
PROTECT_CONFLICTS_W_NEW_FAILURE IN PROCEDURE FILE_LEVEL_OPEN
      7352**LABEL    7188--GOTO
PROTECT_FLAGS_FOR_BOOL IN PROCEDURE FILE_LEVEL_OPEN
      6551**DCL      7298>>ASSIGN
PROTECT_FLAGS_FOR_OPTION IN PROCEDURE FILE_LEVEL_OPEN
      6553**DCL      7298>>ASSIGN
RELATIVE
      4677**DCL       153--PROC     5418<>CALL     5420>>IF       5421<>CALL     5571>>IF       5586>>IF
      5622>>IF       5663>>ASSIGN
REQ$DCB.ACCT# IN PROCEDURE BUILD_PORT
      6296**DCL      6415>>ASSIGN
REQ$DCB.ACTPOS IN PROCEDURE BUILD_PORT
      6312**DCL      6312--REDEF
REQ$DCB.ARS# IN PROCEDURE BUILD_PORT
      6286**DCL      6286--REDEF
REQ$DCB.ASN# IN PROCEDURE BUILD_PORT
      6301**DCL      6432>>ASSIGN
REQ$DCB.ATTR IN PROCEDURE BUILD_PORT
      6305**DCL      6306--REDEF
REQ$DCB.BORROW IN PROCEDURE BUILD_PORT
      6320**DCL      6320--REDEF    6320--REDEF    6320--REDEF
REQ$DCB.DCBNAME.L IN PROCEDURE BUILD_PORT
      6334**DCL      6334--IMP-SIZ
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:165  
REQ$DCB.EOMCHAR# IN PROCEDURE BUILD_PORT
      6290**DCL      6290--REDEF
REQ$DCB.FLDID IN PROCEDURE BUILD_PORT
      6315**DCL      6315--REDEF
REQ$DCB.FORM$ IN PROCEDURE BUILD_PORT
      6309**DCL      6309--REDEF
REQ$DCB.FSECT IN PROCEDURE BUILD_PORT
      6325**DCL      6325--REDEF
REQ$DCB.FSN# IN PROCEDURE BUILD_PORT
      6302**DCL      6302--REDEF    6302--REDEF    6303--REDEF
REQ$DCB.HEADER$ IN PROCEDURE BUILD_PORT
      6308**DCL      6308--REDEF
REQ$DCB.IXTNSIZE# IN PROCEDURE BUILD_PORT
      6306**DCL      6306--REDEF
REQ$DCB.LASTSTA$ IN PROCEDURE BUILD_PORT
      6295**DCL      6295--REDEF
REQ$DCB.LVL IN PROCEDURE BUILD_PORT
      6321**DCL      6321--REDEF
REQ$DCB.NAME#.C IN PROCEDURE BUILD_PORT
      6296**DCL      6296--REDEF    6418>>IF       6427>>ASSIGN
REQ$DCB.NAME#.L IN PROCEDURE BUILD_PORT
      6296**DCL      6418>>IF       6426>>ASSIGN   6427>>ASSIGN
REQ$DCB.NOEOF IN PROCEDURE BUILD_PORT
      6318**DCL      6318--REDEF
REQ$DCB.NRECS# IN PROCEDURE BUILD_PORT
      6307**DCL      6307--REDEF
REQ$DCB.NRECX IN PROCEDURE BUILD_PORT
      6326**DCL      6326--REDEF
REQ$DCB.OHDR IN PROCEDURE BUILD_PORT
      6318**DCL      6318--REDEF
REQ$DCB.ORG# IN PROCEDURE BUILD_PORT
      6301**DCL      6301--REDEF
REQ$DCB.PASS# IN PROCEDURE BUILD_PORT
      6296**DCL      6434>>ASSIGN
REQ$DCB.PRECNO IN PROCEDURE BUILD_PORT
      6324**DCL      6324--REDEF
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:166  
REQ$DCB.PSN# IN PROCEDURE BUILD_PORT
      6296**DCL      6416>>ASSIGN   6423>>IF
REQ$DCB.RCSZ IN PROCEDURE BUILD_PORT
      6330**DCL      6330--REDEF
REQ$DCB.RES# IN PROCEDURE BUILD_PORT
      6297**DCL      6297--REDEF    6433>>ASSIGN
REQ$DCB.SETX IN PROCEDURE BUILD_PORT
      6309**DCL      6309--REDEF
REQ$DCB.TAB$ IN PROCEDURE BUILD_PORT
      6309**DCL      6309--REDEF
REQ$DCB.TDA IN PROCEDURE BUILD_PORT
      6323**DCL      6324--REDEF
REQ$DCB.WSN# IN PROCEDURE BUILD_PORT
      6297**DCL      6297--REDEF
REQ_DCB$ IN PROCEDURE BUILD_PORT
      6128**DCL      6280--IMP-PTR  6413<<ASSIGN   6415>>ASSIGN   6416>>ASSIGN   6418>>IF       6418>>IF
      6423>>IF       6426>>ASSIGN   6427>>ASSIGN   6427>>ASSIGN   6432>>ASSIGN   6433>>ASSIGN   6434>>ASSIGN
SEARCH_PORTS IN PROCEDURE FIND_PORT
      5981**LABEL    5994--EXIT
SET_ERROR_SERIOUS
      8477**PROC     7352--CALL     7357--CALL     8437--CALL     8442--CALL     8447--CALL     8452--CALL
      8457--CALL     8462--CALL
SET_ERROR_WARN IN PROCEDURE SET_ERROR_SERIOUS
      8486**ENTRY    7316--CALL     7334--CALL
STREAM
      4565**DCL       153--PROC     5418<>CALL     5432<>CALL     5607<>CALL     6002<>CALL     6023<>CALL
      6401<>CALL     7346<>CALL     8506<>CALL
STREAM.FILE_KEY
      4602**DCL      5586>>IF       5619<<ASSIGN   5625<<ASSIGN   5675<<ASSIGN
STREAM.FILE_KEY.REP#
      4604**DCL      5595>>IF       5618>>IF
STREAM.FILE_KEY.V$
      4604**DCL      5595>>ASSIGN   5595--ASSIGN   5618>>CALL     5618>>CALL     5627<>CALL     5677<>CALL
STREAM.LAST_OP#
      4591**DCL      7343<<ASSIGN
STREAM.PORT$
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:167  
      4591**DCL      4913--IMP-PTR  5605>>IF       5606>>IF       5625>>ASSIGN   5626>>IF       5627>>CALL
      5636>>IF       5637>>IF       5652>>IF       5652>>CALL     5652>>CALL     5653>>ASSIGN   5655>>ASSIGN
      5657>>CALL     5664>>DOWHILE  5669>>IF       5671>>CALL     5675>>ASSIGN   5676>>IF       5677>>CALL
      5982>>IF       6001>>IF       6005<<ASSIGN   6008>>IF       6018>>IF       6018>>ASSIGN   6018>>ASSIGN
      6029>>IF       6400>>IF       6405<>CALL     6407>>ASSIGN   7182>>IF       7182>>IF       7192>>IF
      7201>>ASSIGN   7294>>IF       7298>>ASSIGN   7312>>IF       7312>>IF       7317>>IF       7318>>IF
      7703>>IF       7705>>CALL     7718>>ASSIGN   7720>>CALL     7745>>ASSIGN   7746>>ASSIGN   7747>>ASSIGN
      7749>>ASSIGN   7751>>ASSIGN   7752>>IF       7753>>CALL     7759>>CALL     7767>>ASSIGN   7769>>CALL
      7775>>ASSIGN   7776>>ASSIGN   7777>>ASSIGN   7778>>IF       7779>>ASSIGN   7780>>IF       7782>>ASSIGN
      7784>>ASSIGN   8289>>ASSIGN   8294>>IF       8295>>CALL     8351>>CALL     8353>>ASSIGN   8354>>ASSIGN
      8365>>ASSIGN   8366>>ASSIGN   8368>>ASSIGN   8373>>ASSIGN   8380>>ASSIGN   8387>>ASSIGN   8391>>ASSIGN
      8402>>ASSIGN   8414>>ASSIGN   8416>>ASSIGN   8422>>ASSIGN   8424>>ASSIGN   8424>>ASSIGN   8426>>IF
      8426>>IF       8430>>ASSIGN   8499>>ASSIGN   8502>>ASSIGN   8504>>ASSIGN
STREAM.PROTECT
      4591**DCL      7298<<ASSIGN   7304<<ASSIGN
STRUCTURE.COUNT# IN PROCEDURE FILE_LEVEL_OPEN
      6665**DCL      7291>>DOINDEX  7773>>DOINDEX
STRUCTURE.DESC.SPEC.V$ IN PROCEDURE FILE_LEVEL_OPEN
      6661**DCL      7190>>ASSIGN
STRUCTURE.HEAD$ IN PROCEDURE FILE_LEVEL_OPEN
      6665**DCL      7288>>ASSIGN   7772>>ASSIGN   8283>>ASSIGN
STRUCTURE$LEVEL.KEY_TYPE# IN PROCEDURE FILE_LEVEL_OPEN
      6841**DCL      7776>>ASSIGN   8422>>ASSIGN   8423>>IF
STRUCTURE$LEVEL.ORG# IN PROCEDURE FILE_LEVEL_OPEN
      6841**DCL      7294>>IF       7775>>ASSIGN   8320>>ASSIGN   8414>>ASSIGN   8415>>IF       8418>>IF
STRUCTURE$LEVEL.PROTECT IN PROCEDURE FILE_LEVEL_OPEN
      6842**DCL      7298>>ASSIGN   7306>>IF
STRUCTURE$LEVEL.SPEC_TYPE# IN PROCEDURE FILE_LEVEL_OPEN
      6841**DCL      7777>>ASSIGN   8430>>ASSIGN
STRUCTURE$LEVEL_NODE.DESC.SPEC.V$ IN PROCEDURE FILE_LEVEL_OPEN
      6792**DCL      7292>>ASSIGN   7774>>ASSIGN   8284>>ASSIGN
STRUCTURE$LEVEL_NODE.FLINK$ IN PROCEDURE FILE_LEVEL_OPEN
      6739**DCL      7309>>ASSIGN   7786>>ASSIGN
STRUCTURE$SPEC.FIT$ IN PROCEDURE FILE_LEVEL_OPEN
      6701**DCL      7768>>IF       7769>>CALL     8316>>IF       8317>>ASSIGN
STRUCTURE_LEVEL$ IN PROCEDURE FILE_LEVEL_OPEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:168  
      6561**DCL      6814--IMP-PTR  7292<<ASSIGN   7294>>IF       7298>>ASSIGN   7306>>IF       7774<<ASSIGN
      7775>>ASSIGN   7776>>ASSIGN   7777>>ASSIGN   8284<<ASSIGN   8320>>ASSIGN   8414>>ASSIGN   8415>>IF
      8418>>IF       8422>>ASSIGN   8423>>IF       8430>>ASSIGN
STRUCTURE_LEVEL_NODE$ IN PROCEDURE FILE_LEVEL_OPEN
      6560**DCL      6713--IMP-PTR  7288<<ASSIGN   7292>>ASSIGN   7309<<ASSIGN   7309>>ASSIGN   7772<<ASSIGN
      7774>>ASSIGN   7786<<ASSIGN   7786>>ASSIGN   8283<<ASSIGN   8284>>ASSIGN
STRUCTURE_SPEC$ IN PROCEDURE FILE_LEVEL_OPEN
      6559**DCL      6675--IMP-PTR  7190<<ASSIGN   7768>>IF       7769>>CALL     8316>>IF       8317>>ASSIGN
T$ IN PROCEDURE SET_ERROR_SERIOUS
      8480**DCL      8490<>CALL     8492>>ASSIGN
VD$BUFFER
      5231**DCL      7759<>CALL
VD$BUFFER.LENGTH#
      5257**DCL      5259--IMP-SIZ  7759>>CALL
VD$ERR
      5308**DCL      8500--ASSIGN
VD$ERR.DCB#
      5350**DCL      8499<<ASSIGN
VD$ERR.ERR
      5345**DCL      8497<<ASSIGN
VD$ERR.ERR.CODE#
      5347**DCL      7319<<ASSIGN   8494<<ASSIGN   8496<<ASSIGN
VD$ERR.FLAGLEV#
      5350**DCL      8498<<ASSIGN
VD$FILE_KEY
      5173**DCL      5627<>CALL     5657<>CALL     5677<>CALL
VD$FILE_KEY IN PROCEDURE FILE_LEVEL_OPEN
      7089**DCL      7720<>CALL
VD$FILE_KEY.UNIQUE.FNAME IN PROCEDURE FILE_LEVEL_OPEN
      7117**DCL      7239--ASSIGN
VD$FILE_NODE.BLINK$
      5037**DCL      7740<<ASSIGN
VD$FILE_NODE.FLINK$
      5037**DCL      7735<<ASSIGN   8283>>ASSIGN
VD$FIT IN PROCEDURE OPEN_THE_PORT_INTERNAL
      7668**DCL      7769<>CALL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:169  
VD$NUMBER.OBJECT.CLASS#
      5393**DCL      8501<<ASSIGN   8503<<ASSIGN
VD$NUMBER.V#
      5395**DCL      8502<<ASSIGN   8504<<ASSIGN
VD$TEXTC_REMOTE
      5121**DCL      5618<>CALL     5652<>CALL     7753<>CALL
VD$TEXTC_REMOTE.LENGTH#
      5150**DCL      5152--IMP-SIZ  5582--ASSIGN   5595--ASSIGN   5618>>CALL     5652>>CALL     5990--ASSIGN
      6018--ASSIGN   7753>>CALL
VD$TEXTC_REMOTE IN PROCEDURE BUILD_PORT
      6361**DCL      6451<>CALL
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE BUILD_PORT
      6390**DCL      6392--IMP-SIZ  6451>>CALL
VDA$FCLOSE
      4709**DCL-ENT  5607--CALL     8506--CALL
VDA$FDETACH
      4710**DCL-ENT  6002--CALL     6023--CALL     6401--CALL
VDG$EBREAK_ACKNOWLEDGE
      4718**DCL-ENT  5414--CALL
VDG$EREPORT_ERROR
      4716**DCL-ENT  7320--CALL     7335--CALL
VDG$ESCREECH
      4717**DCL-ENT  5421--CALL     5974--CALL     7184--CALL
VDG$MACC_FOPEN
      4719**DCL-ENT  5418--CALL
VDG$MACC_FOPEN_OPEN
      4720**DCL-ENT  8356--CALL
VDG$MACC_RETURN
      4721**DCL-ENT  5432--CALL     7346--CALL
VDG$OALLOC
      4712**DCL-ENT  6405--CALL     7716--CALL     8351--CALL     8490--CALL
VDG$OALLOC_DCB
      4714**DCL-ENT  8295--CALL
VDG$OCOPY
      4711**DCL-ENT  5627--CALL     5657--CALL     5677--CALL     6451--CALL     7720--CALL     7753--CALL
      7759--CALL     7769--CALL
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:170  
VDG$OFREE
      4713**DCL-ENT  5618--CALL     5652--CALL
VDG$OFREE_DCB
      4715**DCL-ENT  7705--CALL
VD_$$MON_ACC.V#
      4877**DCL      5417>>IF       5431>>IF       7345>>IF       8355>>IF
VD_$FILETYPE.BYTES
      4830**DCL      8321>>ASSIGN
VD_$FILETYPE.LENGTH#
      4828**DCL      4830--IMP-SIZ  8321>>ASSIGN
VD_6E.INTERRUPT.STATE#
      4758**DCL      5413>>IF
VD_6E.PORT_HEAD$
      4759**DCL      5979>>ASSIGN
VD_6E.STATS#
      4759**DCL      6040<<ASSIGN   6040>>ASSIGN   7700<<ASSIGN   7700>>ASSIGN   8279<<ASSIGN   8279>>ASSIGN
VD_6E.WS.INTERNAL_DIR$
      4742**DCL      7225>>ASSIGN
VD_ACCESSOR_PRIV
      4762**DCL      7748>>IF
VD_ACCESSOR_PRIV.ACCESS
      4774**DCL      7302>>IF       7302>>IF       7312>>IF       7312>>IF
VD_ERR$
      4901**DCL      5308--IMP-PTR  7319>>ASSIGN   8492<<ASSIGN   8494>>ASSIGN   8496>>ASSIGN   8497>>ASSIGN
      8498>>ASSIGN   8499>>ASSIGN   8500>>ASSIGN
VD_KEY_FIRST_CONSEC_REC
      4888**DCL      8391>>ASSIGN
VD_NUMBER$
      4902**DCL      5361--IMP-PTR  8500<<ASSIGN   8501>>ASSIGN   8502>>ASSIGN   8503>>ASSIGN   8504>>ASSIGN
VLP_SN IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8129**DCL      8305<<ASSIGN   8308--ASSIGN
VLP_SN.NUM# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8129**DCL      8306<<ASSIGN
VLP_SN.SN# IN PROCEDURE OPEN_THE_PORT_EXTERNAL
      8129**DCL      8307<<ASSIGN
WHERE_TO_INSERT_NEW_FILE$ IN PROCEDURE FILE_LEVEL_OPEN
PL6.E3A0      #001=VDA$FOPEN File=VDA$FILE.:VDA5TSI                              FRI 07/04/97 11:03 Page:171  
      6569**DCL      7209<<ASSIGN   7245<<ASSIGN   7273<>CALL
XSF$LOCCODT
      4722**DCL-ENT  8405--CALL     8409--CALL

PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:172  
     1342        1        /*T***********************************************************/
     1343        2        /*T*                                                         */
     1344        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1345        4        /*T*                                                         */
     1346        5        /*T***********************************************************/
     1347        6
     1348        7        /*D* NAME: VDA$FCLOSE
     1349        8            PARAMETERS:
     1350        9                STREAM - VD$STREAM to close.  May be either open or closed;
     1351       10                    if open, may be to either internal or external file.
     1352       11            INPUT:
     1353       12            OUTPUT:
     1354       13                STREAM will be closed.
     1355       14                STREAM will be detached from the port.  If no other streams
     1356       15                    are open to that port, the port will be freed.
     1357       16            DESCRIPTION:
     1358       17                If STREAM has no port attached, return:  we're already closed.
     1359       18                Detach the stream from its port.
     1360       19                If port has no other streams attached, free it.
     1361       20        */
     1362       21
     1363       22        VDA$FCLOSE: PROC (STREAM) ALTRET;
     1364       23
     1365       24        %INCLUDE VD_MACROS_M;
     1366     2239        %INCLUDE VD_PERR_C;
     1367     2387
     1368     2388
     1369     2389        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1370     2495
     1371     2496
     1372     2497    1   DCL VDA$FDETACH         ENTRY (1) ALTRET;
     1373     2498    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1374     2499    1   DCL VDG$OCLEAR_LOCATION  ENTRY (1) ALTRET;
     1375     2500    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1376     2501
     1377     2502
     1378     2503        %VD_6E (STCLASS=SYMREF);
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:173  
     1379     2539    1   DCL DELFID_CMD SBIN SYMREF;
     1380     2540
     1381     2541
     1382     2542
     1383     2543
     1384     2544        %VD$TEXTC_REMOTE;
     1385     2605
     1386     2606
     1387     2607
     1388     2608    1   COMMON: ;
     1389     2609    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
     1390     2610    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
     1391     2611    2              ALTRETURN;
     1392     2612    2              END;
     1393     2613    1           IF STREAM.PORT$ = ADDR(NIL) THEN
     1394     2614    1              RETURN;
     1395     2615
     1396     2616    1           CALL VDA$FDETACH (STREAM);
     1397     2617    1           IF STREAM.PORT$ ~= ADDR(NIL) THEN
     1398     2618    1              ALTRETURN; /* Detach failed to do so. */
     1399     2619
     1400     2620                %CLEARKEY (KEY=STREAM.FILE_KEY);
     1401     2630    1           CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
     1402     2631    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1403     2632    1           CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)
     1404     2633    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1405     2634    1           STREAM.LAST_OP# = 0;
     1406     2635    1           STREAM.PROTECT = %CLEAR;
     1407     2636
     1408     2637    1           RETURN;
     1409     2638
     1410     2639
     1411     2640    1   OCLEAR_LOCATION_FAILED: ;
     1412     2641    1           ALTRETURN;
     1413     2642
     1414     2643    1   VDA$FDELETE: ENTRY (STREAM) ALTRET;
     1415     2644
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:174  
     1416     2645    1           DELFID_CMD = 1; /* Tell Fdetach to delete the file */
     1417     2646    1           GOTO COMMON;
     1418     2647
     1419     2648    1   END VDA$FCLOSE;
     1420     2649        %EOD;

PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:175  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$FCLOSE.

   Procedure VDA$FCLOSE requires 65 words for executable code.
   Procedure VDA$FCLOSE requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:176  

 Object Unit name= VDA$FCLOSE                                 File name= VDA$FILE.:VDA5TOU
 UTS= JUL 04 '97 11:04:46.64 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    65    101  VDA$FCLOSE
    1  RoData even  none     1      1  VDA$FCLOSE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  VDA$FCLOSE
     0     74          yes     yes      Std        1  VDA$FDELETE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       1 VDA$FDETACH
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:177  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 DELFID_CMD                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:178  


     1342        1        /*T***********************************************************/
     1343        2        /*T*                                                         */
     1344        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1345        4        /*T*                                                         */
     1346        5        /*T***********************************************************/
     1347        6
     1348        7        /*D* NAME: VDA$FCLOSE
     1349        8            PARAMETERS:
     1350        9                STREAM - VD$STREAM to close.  May be either open or closed;
     1351       10                    if open, may be to either internal or external file.
     1352       11            INPUT:
     1353       12            OUTPUT:
     1354       13                STREAM will be closed.
     1355       14                STREAM will be detached from the port.  If no other streams
     1356       15                    are open to that port, the port will be freed.
     1357       16            DESCRIPTION:
     1358       17                If STREAM has no port attached, return:  we're already closed.
     1359       18                Detach the stream from its port.
     1360       19                If port has no other streams attached, free it.
     1361       20        */
     1362       21
     1363       22        VDA$FCLOSE: PROC (STREAM) ALTRET;

     22  0 000000   000000 700200 xent  VDA$FCLOSE   TSX0  ! X66_AUTO_1
         0 000001   000006 000001                    ZERO    6,1

     1364       23
     1365       24        %INCLUDE VD_MACROS_M;
     1366     2239        %INCLUDE VD_PERR_C;
     1367     2387
     1368     2388
     1369     2389        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1370     2495
     1371     2496
     1372     2497    1   DCL VDA$FDETACH         ENTRY (1) ALTRET;
     1373     2498    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:179  
     1374     2499    1   DCL VDG$OCLEAR_LOCATION  ENTRY (1) ALTRET;
     1375     2500    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1376     2501
     1377     2502
     1378     2503        %VD_6E (STCLASS=SYMREF);
     1379     2539    1   DCL DELFID_CMD SBIN SYMREF;
     1380     2540
     1381     2541
     1382     2542
     1383     2543
     1384     2544        %VD$TEXTC_REMOTE;

   2569  0 000002                       COMMON       null
     1385     2605
     1386     2606
     1387     2607
     1388     2608    1   COMMON: ;
     1389     2609    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

   2609  0 000002   000027 220000 xsym               LDX0    VD_6E+23
         0 000003   000003 100003                    CMPX0   3,DU
         0 000004   000012 601000 0                  TNZ     s:2613

     1390     2610    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   2610  0 000005   000000 630400 1                  EPPR0   0
         0 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000007   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
         0 000010   000000 011000                    NOP     0

     1391     2611    2              ALTRETURN;

   2611  0 000011   000000 702200 xent               TSX2  ! X66_AALT

     1392     2612    2              END;
     1393     2613    1           IF STREAM.PORT$ = ADDR(NIL) THEN

PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:180  
   2613  0 000012   200003 470500                    LDP0    @STREAM,,AUTO
         0 000013   000001 236100                    LDQ     1,,PR0
         0 000014   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000015   000017 601000 0                  TNZ     s:2616

     1394     2614    1              RETURN;

   2614  0 000016   000000 702200 xent               TSX2  ! X66_ARET

     1395     2615
     1396     2616    1           CALL VDA$FDETACH (STREAM);

   2616  0 000017   200003 630500                    EPPR0   @STREAM,,AUTO
         0 000020   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000021   000000 701000 xent               TSX1    VDA$FDETACH
         0 000022   000000 011000                    NOP     0

     1397     2617    1           IF STREAM.PORT$ ~= ADDR(NIL) THEN

   2617  0 000023   200003 470500                    LDP0    @STREAM,,AUTO
         0 000024   000001 236100                    LDQ     1,,PR0
         0 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000026   000030 600000 0                  TZE     s:2627

     1398     2618    1              ALTRETURN; /* Detach failed to do so. */

   2618  0 000027   000000 702200 xent               TSX2  ! X66_AALT

     1399     2619
     1400     2620                %CLEARKEY (KEY=STREAM.FILE_KEY);

   2627  0 000030   000004 720100                    LXL0    4,,PR0
         0 000031   000002 100003                    CMPX0   2,DU
         0 000032   000043 601000 0                  TNZ     s:2628+1

   2627  0 000033   000005 471500                    LDP1    5,,PR0
         0 000034   200004 451500                    STP1    @STREAM+1,,AUTO
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:181  
         0 000035   200004 630500                    EPPR0   @STREAM+1,,AUTO
         0 000036   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000037   000000 701000 xent               TSX1    VDG$OFREE
         0 000040   000042 702000 0                  TSX2    s:2628
         0 000041   000043 710000 0                  TRA     s:2628+1

   2628  0 000042   000000 702200 xent               TSX2  ! X66_AALT

   2628  0 000043   200003 470500                    LDP0    @STREAM,,AUTO
         0 000044   000004 450100                    STZ     4,,PR0
         0 000045   000005 450100                    STZ     5,,PR0

     1401     2630    1           CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   2630  0 000046   200003 236100                    LDQ     @STREAM,,AUTO
         0 000047   000006 036003                    ADLQ    6,DU
         0 000050   200004 756100                    STQ     @STREAM+1,,AUTO
         0 000051   200004 630500                    EPPR0   @STREAM+1,,AUTO
         0 000052   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000053   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000054   000073 702000 0                  TSX2    OCLEAR_LOCATION_FAILED

     1402     2631    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1403     2632    1           CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)

   2632  0 000055   200003 236100                    LDQ     @STREAM,,AUTO
         0 000056   000017 036003                    ADLQ    15,DU
         0 000057   200004 756100                    STQ     @STREAM+1,,AUTO
         0 000060   200004 630500                    EPPR0   @STREAM+1,,AUTO
         0 000061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000062   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000063   000073 702000 0                  TSX2    OCLEAR_LOCATION_FAILED

     1404     2633    1             ALTRET (OCLEAR_LOCATION_FAILED);
     1405     2634    1           STREAM.LAST_OP# = 0;

   2634  0 000064   000000 220003                    LDX0    0,DU
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:182  
         0 000065   200003 470500                    LDP0    @STREAM,,AUTO
         0 000066   000002 740100                    STX0    2,,PR0

     1406     2635    1           STREAM.PROTECT = %CLEAR;

   2635  0 000067   003100 060400                    CSL     bolr='003'O
         0 000070   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         0 000071   000002 400024                    BDSC    2,,PR0                   by=2,bit=0,n=20

     1407     2636
     1408     2637    1           RETURN;

   2637  0 000072   000000 702200 xent               TSX2  ! X66_ARET

   2635  0 000073                       OCLEAR_LOCA* null
     1409     2638
     1410     2639
     1411     2640    1   OCLEAR_LOCATION_FAILED: ;
     1412     2641    1           ALTRETURN;

   2641  0 000073   000000 702200 xent               TSX2  ! X66_AALT

     1413     2642
     1414     2643    1   VDA$FDELETE: ENTRY (STREAM) ALTRET;

   2643  0 000074   000000 700200 xent  VDA$FDELETE  TSX0  ! X66_AUTO_1
         0 000075   000006 000001                    ZERO    6,1

     1415     2644
     1416     2645    1           DELFID_CMD = 1; /* Tell Fdetach to delete the file */

   2645  0 000076   000001 235007                    LDA     1,DL
         0 000077   000000 755000 xsym               STA     DELFID_CMD

     1417     2646    1           GOTO COMMON;

   2646  0 000100   000002 710000 0                  TRA     COMMON
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:183  
     1418     2647
     1419     2648    1   END VDA$FCLOSE;
     1420     2649        %EOD;

PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:184  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$FCLOSE.
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:185  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @STREAM                   *0-0-0/w STRC(864)   r     1 STREAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 DELFID_CMD                 0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$FCLOSE requires 65 words for executable code.
   Procedure VDA$FCLOSE requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:186  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:187  
          MINI XREF LISTING

COMMON
      2569**LABEL    2646--GOTO
DELFID_CMD
      2539**DCL      2645<<ASSIGN
OCLEAR_LOCATION_FAILED
      2635**LABEL    2630--CALLALT  2632--CALLALT
STREAM
      2397**DCL        22--PROC     2616<>CALL     2643--ENTRY
STREAM.CURRENT
      2448**DCL      2630<>CALL
STREAM.FILE_KEY
      2434**DCL      2628<<ASSIGN
STREAM.FILE_KEY.REP#
      2436**DCL      2627>>IF
STREAM.FILE_KEY.V$
      2436**DCL      2627>>CALL     2627>>CALL
STREAM.LAST_OP#
      2423**DCL      2634<<ASSIGN
STREAM.NEXT
      2476**DCL      2632<>CALL
STREAM.PORT$
      2423**DCL      2613>>IF       2617>>IF
STREAM.PROTECT
      2423**DCL      2635<<ASSIGN
VD$TEXTC_REMOTE
      2569**DCL      2627<>CALL
VD$TEXTC_REMOTE.LENGTH#
      2598**DCL      2600--IMP-SIZ  2627>>CALL
VDA$FDETACH
      2497**DCL-ENT  2616--CALL
VDG$EBREAK_ACKNOWLEDGE
      2500**DCL-ENT  2610--CALL
PL6.E3A0      #002=VDA$FCLOSE File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:04 Page:188  
VDG$OCLEAR_LOCATION
      2499**DCL-ENT  2630--CALL     2632--CALL
VDG$OFREE
      2498**DCL-ENT  2627--CALL
VD_6E.INTERRUPT.STATE#
      2535**DCL      2609>>IF

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:189  
     1421        1        /*T***********************************************************/
     1422        2        /*T*                                                         */
     1423        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1424        4        /*T*                                                         */
     1425        5        /*T***********************************************************/
     1426        6
     1427        7        /*D* NAME: VDA$FDETACH
     1428        8            PARAMETERS:
     1429        9                STREAM - A VD$STREAM; we only use STREAM.PORT$.
     1430       10            INPUT:
     1431       11            OUTPUT:
     1432       12                STREAM.PORT$'s ref count will be decremented, and if
     1433       13                    no other streams ref it, it will be freed.
     1434       14            DESCRIPTION:
     1435       15                Detach STREAM from it's .PORT$: decrement the port's ref count
     1436       16                    and close and deallocate it if appropriate (ref count = 0).
     1437       17        */
     1438       18
     1439       19        VDA$FDETACH: PROC (STREAM) ALTRET;
     1440       20
     1441       21        %INCLUDE VD_MACROS_M;
     1442     2236        %INCLUDE VD_PERR_C;
     1443     2384        %INCLUDE CP_6;
     1444     2465        %INCLUDE CP_6_SUBS;
     1445     3005
     1446     3006
     1447     3007        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1448     3113
     1449     3114
     1450     3115    1   DCL VDG$MONERR                  ENTRY     ALTRET;
     1451     3116    1   DCL VDG$INFOMSG                 ENTRY (4) ALTRET;
     1452     3117    1   DCL VDG$OFREE                   ENTRY (1) ALTRET;
     1453     3118    1   DCL VDG$OALLOC                  ENTRY (3) ALTRET;
     1454     3119    1   DCL VDG$ESCREECH                ENTRY (3);
     1455     3120    1   DCL VDG$MACC_FDETACH_CLOSE ENTRY (1);
     1456     3121
     1457     3122
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:190  
     1458     3123        %VD_6E (STCLASS=SYMREF);
     1459     3159        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1460     3204    1   DCL DELFID_CMD SBIN SYMREF;
     1461     3205
     1462     3206
     1463     3207        %FPT_CLOSE (FPTN=CONST_FPT_CLOSE, STCLASS=CONSTANT, DISP=SAVE);
     1464     3249
     1465     3250
     1466     3251
     1467     3252    1   DCL PORT$ PTR;
     1468     3253        %FPT_CLOSE (STCLASS=AUTO);
     1469     3295
     1470     3296
     1471     3297        %VD$PORT (NAME=PORT, STCLASS="BASED(PORT$)");
     1472     3395        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     1473     3448        %F$DCB;
     1474     3505
     1475     3506
     1476     3507
     1477     3508    1           PORT$ = STREAM.PORT$;
     1478     3509    1           STREAM.PORT$ = ADDR(NIL);
     1479     3510    1           PORT.REFS# = PORT.REFS# - 1;
     1480     3511    2           IF PORT.REFS# <= 0 OR DELFID_CMD > 0 THEN DO;
     1481     3512    3              IF PORT.DCB# ~= 0 THEN DO;
     1482     3513    3                 FPT_CLOSE = CONST_FPT_CLOSE;
     1483     3514    3                 FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V);
     1484     3515    3                 FPT_CLOSE.V.DCB# = PORT.DCB#;
     1485     3516    4                 IF DELFID_CMD > 0 THEN DO;
     1486     3517    4                    FPT_CLOSE.V.DISP# = %SCRATCH#;
     1487     3518    4                    DELFID_CMD = 0;
     1488     3519    4                    END;
     1489     3520    3                 IF NOT DCBADDR(PORT.DCB#) -> F$DCB.FCD# THEN EXIT;
     1490     3521    3                 FPT_CLOSE.V.OPER.RELG# =
     1491     3522    3                   DCBADDR(PORT.DCB#)->F$DCB.FFLG.DELF#;
     1492     3523    3                 PORT.LAST_OP# = %ACCOP_CLOSE; /* In case we altret */
     1493     3524    3                 IF VD_$$MON_ACC.V# > 10 THEN
     1494     3525    3                    CALL VDG$MACC_FDETACH_CLOSE (FPT_CLOSE.V.DCB#);
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:191  
     1495     3526    4                 CALL M$CLOSE (FPT_CLOSE) WHENRETURN DO;
     1496     3527    4                    IF FPT_CLOSE.V.DISP# ~= %SCRATCH# THEN EXIT;
     1497     3528    5                    CALL VDG$INFOMSG (%E$INFO_FILE_DELETED) WHENRETURN DO;
     1498     3529    5                       VD$ERR.DCB# = FPT_CLOSE.V.DCB#;
     1499     3530    5                       END;
     1500     3531    4                    END;
     1501     3532    4                 WHENALTRETURN DO;
     1502     3533    4                    CALL VDG$MONERR;
     1503     3534    4                    END;
     1504     3535    3                 END;
     1505     3536
     1506     3537    2              IF PORT.REFS# <= 0 THEN CALL VDG$OFREE (PORT);
     1507     3538    2              END;
     1508     3539
     1509     3540    1   END VDA$FDETACH;
     1510     3541        %EOD;

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:192  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FDETACH.

   Procedure VDA$FDETACH requires 81 words for executable code.
   Procedure VDA$FDETACH requires 38 words of local(AUTO) storage.

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:193  

 Object Unit name= VDA$FDETACH                                File name= VDA$FILE.:VDA5TOU
 UTS= JUL 04 '97 11:04:52.36 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     30     36  VDA$FDETACH
    2   Proc  even  none    81    121  VDA$FDETACH
    3  RoData even  none     4      4  VDA$FDETACH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  VDA$FDETACH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$MACC_FDETACH_CLOSE
 yes     yes           Std       0 VDG$MONERR
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       4 VDG$INFOMSG
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:194  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_$$MON_ACC
     DELFID_CMD                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:195  


     1421        1        /*T***********************************************************/
     1422        2        /*T*                                                         */
     1423        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1424        4        /*T*                                                         */
     1425        5        /*T***********************************************************/
     1426        6
     1427        7        /*D* NAME: VDA$FDETACH
     1428        8            PARAMETERS:
     1429        9                STREAM - A VD$STREAM; we only use STREAM.PORT$.
     1430       10            INPUT:
     1431       11            OUTPUT:
     1432       12                STREAM.PORT$'s ref count will be decremented, and if
     1433       13                    no other streams ref it, it will be freed.
     1434       14            DESCRIPTION:
     1435       15                Detach STREAM from it's .PORT$: decrement the port's ref count
     1436       16                    and close and deallocate it if appropriate (ref count = 0).
     1437       17        */
     1438       18
     1439       19        VDA$FDETACH: PROC (STREAM) ALTRET;

     19  2 000000   000000 700200 xent  VDA$FDETACH  TSX0  ! X66_AUTO_1
         2 000001   000046 000001                    ZERO    38,1

     1440       20
     1441       21        %INCLUDE VD_MACROS_M;
     1442     2236        %INCLUDE VD_PERR_C;
     1443     2384        %INCLUDE CP_6;
     1444     2465        %INCLUDE CP_6_SUBS;
     1445     3005
     1446     3006
     1447     3007        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1448     3113
     1449     3114
     1450     3115    1   DCL VDG$MONERR                  ENTRY     ALTRET;
     1451     3116    1   DCL VDG$INFOMSG                 ENTRY (4) ALTRET;
     1452     3117    1   DCL VDG$OFREE                   ENTRY (1) ALTRET;
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:196  
     1453     3118    1   DCL VDG$OALLOC                  ENTRY (3) ALTRET;
     1454     3119    1   DCL VDG$ESCREECH                ENTRY (3);
     1455     3120    1   DCL VDG$MACC_FDETACH_CLOSE ENTRY (1);
     1456     3121
     1457     3122
     1458     3123        %VD_6E (STCLASS=SYMREF);
     1459     3159        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1460     3204    1   DCL DELFID_CMD SBIN SYMREF;
     1461     3205
     1462     3206
     1463     3207        %FPT_CLOSE (FPTN=CONST_FPT_CLOSE, STCLASS=CONSTANT, DISP=SAVE);
     1464     3249
     1465     3250
     1466     3251
     1467     3252    1   DCL PORT$ PTR;
     1468     3253        %FPT_CLOSE (STCLASS=AUTO);
     1469     3295
     1470     3296
     1471     3297        %VD$PORT (NAME=PORT, STCLASS="BASED(PORT$)");
     1472     3395        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     1473     3448        %F$DCB;
     1474     3505
     1475     3506
     1476     3507
     1477     3508    1           PORT$ = STREAM.PORT$;

   3508  2 000002   200003 470500                    LDP0    @STREAM,,AUTO
         2 000003   000001 236100                    LDQ     1,,PR0
         2 000004   200004 756100                    STQ     PORT$,,AUTO

     1478     3509    1           STREAM.PORT$ = ADDR(NIL);

   3509  2 000005   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000006   000001 756100                    STQ     1,,PR0

     1479     3510    1           PORT.REFS# = PORT.REFS# - 1;

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:197  
   3510  2 000007   200004 471500                    LDP1    PORT$,,AUTO
         2 000010   100003 220100                    LDX0    3,,PR1
         2 000011   777777 621010                    EAX1    -1,X0
         2 000012   100003 741100                    STX1    3,,PR1

     1480     3511    2           IF PORT.REFS# <= 0 OR DELFID_CMD > 0 THEN DO;

   3511  2 000013   000016 604400 2                  TMOZ    s:3512
         2 000014   000000 235000 xsym               LDA     DELFID_CMD
         2 000015   000120 604400 2                  TMOZ    s:3540

     1481     3512    3              IF PORT.DCB# ~= 0 THEN DO;

   3512  2 000016   100004 720100                    LXL0    4,,PR1
         2 000017   000111 600000 2                  TZE     s:3537

     1482     3513    3                 FPT_CLOSE = CONST_FPT_CLOSE;

   3513  2 000020   000100 100400                    MLR     fill='000'O
         2 000021   000000 000170 1                  ADSC9   CONST_FPT_CLOSE          cn=0,n=120
         2 000022   200006 000170                    ADSC9   FPT_CLOSE,,AUTO          cn=0,n=120

     1483     3514    3                 FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V);

   3514  2 000023   000000 235000 3                  LDA     0
         2 000024   200044 452500                    STP2    FPT_CLOSE+30,,AUTO
         2 000025   200044 236100                    LDQ     FPT_CLOSE+30,,AUTO
         2 000026   000040 036003                    ADLQ    32,DU
         2 000027   200006 757100                    STAQ    FPT_CLOSE,,AUTO

     1484     3515    3                 FPT_CLOSE.V.DCB# = PORT.DCB#;

   3515  2 000030   100004 720100                    LXL0    4,,PR1
         2 000031   200040 740100                    STX0    FPT_CLOSE+26,,AUTO

     1485     3516    4                 IF DELFID_CMD > 0 THEN DO;

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:198  
   3516  2 000032   000000 235000 xsym               LDA     DELFID_CMD
         2 000033   000037 604400 2                  TMOZ    s:3520

     1486     3517    4                    FPT_CLOSE.V.DISP# = %SCRATCH#;

   3517  2 000034   000001 236007                    LDQ     1,DL
         2 000035   200040 552104                    STBQ    FPT_CLOSE+26,'04'O,AUTO

     1487     3518    4                    DELFID_CMD = 0;

   3518  2 000036   000000 450000 xsym               STZ     DELFID_CMD

     1488     3519    4                    END;

     1489     3520    3                 IF NOT DCBADDR(PORT.DCB#) -> F$DCB.FCD# THEN EXIT;

   3520  2 000037   000001 473400 3                  LDP3    1
         2 000040   300000 474500                    LDP4    0,,PR3
         2 000041   100004 720100                    LXL0    4,,PR1
         2 000042   400000 475510                    LDP5    0,X0,PR4
         2 000043   500031 236100                    LDQ     25,,PR5
         2 000044   020000 316007                    CANQ    8192,DL
         2 000045   000111 600000 2                  TZE     s:3537

     1490     3521    3                 FPT_CLOSE.V.OPER.RELG# =

   3521  2 000046   500004 236100                    LDQ     4,,PR5
         2 000047   000017 772000                    QRL     15
         2 000050   200040 676100                    ERQ     FPT_CLOSE+26,,AUTO
         2 000051   200000 376007                    ANQ     65536,DL
         2 000052   200040 656100                    ERSQ    FPT_CLOSE+26,,AUTO

     1491     3522    3                   DCBADDR(PORT.DCB#)->F$DCB.FFLG.DELF#;
     1492     3523    3                 PORT.LAST_OP# = %ACCOP_CLOSE; /* In case we altret */

   3523  2 000053   000003 220003                    LDX0    3,DU
         2 000054   100007 740100                    STX0    7,,PR1
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:199  

     1493     3524    3                 IF VD_$$MON_ACC.V# > 10 THEN

   3524  2 000055   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         2 000056   000012 115007                    CMPA    10,DL
         2 000057   000066 604400 2                  TMOZ    s:3526

     1494     3525    3                    CALL VDG$MACC_FDETACH_CLOSE (FPT_CLOSE.V.DCB#);

   3525  2 000060   200040 635500                    EPPR5   FPT_CLOSE+26,,AUTO
         2 000061   200044 455500                    STP5    FPT_CLOSE+30,,AUTO
         2 000062   200044 630500                    EPPR0   FPT_CLOSE+30,,AUTO
         2 000063   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000064   000000 701000 xent               TSX1    VDG$MACC_FDETACH_CLOSE
         2 000065   000000 011000                    NOP     0

     1495     3526    4                 CALL M$CLOSE (FPT_CLOSE) WHENRETURN DO;

   3526  2 000066   200006 630500                    EPPR0   FPT_CLOSE,,AUTO
         2 000067   450001 713400                    CLIMB   alt,close
         2 000070   406000 401760                    pmme    nvectors=13
         2 000071   000106 702000 2                  TSX2    s:3533

     1496     3527    4                    IF FPT_CLOSE.V.DISP# ~= %SCRATCH# THEN EXIT;

   3527  2 000072   200040 236100                    LDQ     FPT_CLOSE+26,,AUTO
         2 000073   000777 376007                    ANQ     511,DL
         2 000074   000001 116007                    CMPQ    1,DL
         2 000075   000105 601000 2                  TNZ     s:3531

     1497     3528    5                    CALL VDG$INFOMSG (%E$INFO_FILE_DELETED) WHENRETURN DO;

   3528  2 000076   000003 630400 3                  EPPR0   3
         2 000077   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000100   000000 701000 xent               TSX1    VDG$INFOMSG
         2 000101   000105 702000 2                  TSX2    s:3531

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:200  
     1498     3529    5                       VD$ERR.DCB# = FPT_CLOSE.V.DCB#;

   3529  2 000102   200040 220100                    LDX0    FPT_CLOSE+26,,AUTO
         2 000103   000032 470400 xsym               LDP0    VD_6E+26
         2 000104   000004 740100                    STX0    4,,PR0

     1499     3530    5                       END;

     1500     3531    4                    END;

   3531  2 000105   000111 710000 2                  TRA     s:3537

     1501     3532    4                 WHENALTRETURN DO;

     1502     3533    4                    CALL VDG$MONERR;

   3533  2 000106   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000107   000000 701000 xent               TSX1    VDG$MONERR
         2 000110   000000 011000                    NOP     0

     1503     3534    4                    END;

     1504     3535    3                 END;

     1505     3536
     1506     3537    2              IF PORT.REFS# <= 0 THEN CALL VDG$OFREE (PORT);

   3537  2 000111   200004 470500                    LDP0    PORT$,,AUTO
         2 000112   000003 220100                    LDX0    3,,PR0
         2 000113   000120 605400 2                  TPNZ    s:3540

   3537  2 000114   200004 630500                    EPPR0   PORT$,,AUTO
         2 000115   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000116   000000 701000 xent               TSX1    VDG$OFREE
         2 000117   000000 011000                    NOP     0

     1507     3538    2              END;
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:201  

     1508     3539
     1509     3540    1   END VDA$FDETACH;

   3540  2 000120   000000 702200 xent               TSX2  ! X66_ARET
     1510     3541        %EOD;

PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:202  
--  Include file information  --

   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FDETACH.
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:203  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$FDETACH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 CONST_FPT_CLOSE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @STREAM                    6-0-0/d STRC(1080)  r     1 FPT_CLOSE
     4-0-0/w PTR         r     1 PORT$                     *0-0-0/w STRC(864)   r     1 STREAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 DELFID_CMD                 0-0-0/w STRC(144)   r     1 VD_$$MON_ACC
     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(1944)  r     1 PORT
     0-0-0/w STRC(180)   r     1 VD$ERR


   Procedure VDA$FDETACH requires 81 words for executable code.
   Procedure VDA$FDETACH requires 38 words of local(AUTO) storage.
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:204  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:205  
          MINI XREF LISTING

CONST_FPT_CLOSE
      3230**DCL      3513>>ASSIGN
CONST_FPT_CLOSE.SN_
      3230**DCL      3230--REDEF
CONST_FPT_CLOSE.UTL_
      3231**DCL      3231--REDEF
CONST_FPT_CLOSE.V
      3235**DCL      3230--DCLINIT
CONST_FPT_CLOSE.V.EXPIRE#
      3245**DCL      3245--REDEF
CONST_FPT_CLOSE.V.TYPE#
      3243**DCL      3243--REDEF
CONST_FPT_CLOSE.V.XTNSIZE#
      3240**DCL      3240--REDEF    3242--REDEF
DELFID_CMD
      3204**DCL      3511>>IF       3516>>IF       3518<<ASSIGN
F$DCB.ACTPOS
      3481**DCL      3481--REDEF
F$DCB.ARS#
      3455**DCL      3455--REDEF
F$DCB.ATTR
      3474**DCL      3475--REDEF
F$DCB.BORROW
      3489**DCL      3489--REDEF    3489--REDEF    3489--REDEF
F$DCB.DCBNAME.L
      3503**DCL      3503--IMP-SIZ
F$DCB.EOMCHAR#
      3459**DCL      3459--REDEF
F$DCB.FCD#
      3468**DCL      3520>>IF
F$DCB.FFLG.DELF#
      3460**DCL      3521>>ASSIGN
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:206  
F$DCB.FLDID
      3484**DCL      3484--REDEF
F$DCB.FORM$
      3478**DCL      3478--REDEF
F$DCB.FSECT
      3494**DCL      3494--REDEF
F$DCB.FSN#
      3471**DCL      3471--REDEF    3471--REDEF    3472--REDEF
F$DCB.HEADER$
      3477**DCL      3477--REDEF
F$DCB.IXTNSIZE#
      3475**DCL      3475--REDEF
F$DCB.LASTSTA$
      3464**DCL      3464--REDEF
F$DCB.LVL
      3490**DCL      3490--REDEF
F$DCB.NAME#.C
      3465**DCL      3465--REDEF
F$DCB.NOEOF
      3487**DCL      3487--REDEF
F$DCB.NRECS#
      3476**DCL      3476--REDEF
F$DCB.NRECX
      3495**DCL      3495--REDEF
F$DCB.OHDR
      3487**DCL      3487--REDEF
F$DCB.ORG#
      3470**DCL      3470--REDEF
F$DCB.PRECNO
      3493**DCL      3493--REDEF
F$DCB.RCSZ
      3499**DCL      3499--REDEF
F$DCB.RES#
      3466**DCL      3466--REDEF
F$DCB.SETX
      3478**DCL      3478--REDEF
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:207  
F$DCB.TAB$
      3478**DCL      3478--REDEF
F$DCB.TDA
      3492**DCL      3493--REDEF
F$DCB.WSN#
      3466**DCL      3466--REDEF
FPT_CLOSE
      3276**DCL      3513<<ASSIGN   3526<>CALL
FPT_CLOSE.SN_
      3276**DCL      3276--REDEF
FPT_CLOSE.UTL_
      3277**DCL      3277--REDEF
FPT_CLOSE.V
      3281**DCL      3514--ASSIGN
FPT_CLOSE.V.DCB#
      3282**DCL      3515<<ASSIGN   3525<>CALL     3529>>ASSIGN
FPT_CLOSE.V.DISP#
      3285**DCL      3517<<ASSIGN   3527>>IF
FPT_CLOSE.V.EXPIRE#
      3291**DCL      3291--REDEF
FPT_CLOSE.V.OPER.RELG#
      3282**DCL      3521<<ASSIGN
FPT_CLOSE.V.TYPE#
      3289**DCL      3289--REDEF
FPT_CLOSE.V.XTNSIZE#
      3286**DCL      3286--REDEF    3288--REDEF
FPT_CLOSE.V_
      3276**DCL      3514<<ASSIGN
M$CLOSE
      2393**DCL-ENT  3526--CALL
PORT
      3305**DCL      3537<>CALL
PORT.DCB#
      3332**DCL      3512>>IF       3515>>ASSIGN   3520--IF       3521--ASSIGN
PORT.LAST_OP#
      3333**DCL      3523<<ASSIGN
PL6.E3A0      #003=VDA$FDETACH File=VDA$FILE.:VDA5TSI                            FRI 07/04/97 11:04 Page:208  
PORT.REFS#
      3331**DCL      3510<<ASSIGN   3510>>ASSIGN   3511>>IF       3537>>IF
PORT$
      3252**DCL      3305--IMP-PTR  3508<<ASSIGN   3510>>ASSIGN   3510>>ASSIGN   3511>>IF       3512>>IF
      3515>>ASSIGN   3520>>IF       3521>>ASSIGN   3523>>ASSIGN   3537>>IF       3537>>CALL
STREAM
      3015**DCL        19--PROC
STREAM.PORT$
      3041**DCL      3508>>ASSIGN   3509<<ASSIGN
VD$ERR.DCB#
      3445**DCL      3529<<ASSIGN
VDG$INFOMSG
      3116**DCL-ENT  3528--CALL
VDG$MACC_FDETACH_CLOSE
      3120**DCL-ENT  3525--CALL
VDG$MONERR
      3115**DCL-ENT  3533--CALL
VDG$OFREE
      3117**DCL-ENT  3537--CALL
VD_$$MON_ACC.V#
      3201**DCL      3524>>IF
VD_6E.ERR_TAIL$
      3155**DCL      3403--IMP-PTR  3529>>ASSIGN

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:209  
     1511        1        /*T***********************************************************/
     1512        2        /*T*                                                         */
     1513        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1514        4        /*T*                                                         */
     1515        5        /*T***********************************************************/
     1516        6
     1517        7        /*D* NAME: VDA$FREKEY
     1518        8            PARAMETERS:
     1519        9                SRC_STREAM - VD$STREAM for the source operand.  Must be open
     1520       10                    to a file.
     1521       11                DEST_STREAM - VD$STREAM for the destination operand.  Must be
     1522       12                    open to the same file (and therefore same VD$PORT) as SRC_STREAM.
     1523       13                KEY_INCR - VD$KEY specifying the increment to use.  Caller
     1524       14                    must have already checked for 0-value, tried $BY, etc.
     1525       15                    KEY_INCR must not have a 0-value.
     1526       16                HOLE - Optional SBIN indicating how big a hole to leave
     1527       17                    at HOLE_KEY.
     1528       18                HOLE_KEY - VD$KEY_NUMBER present only if HOLE is.
     1529       19            INPUT:
     1530       20                VD_6E.WINDOWS$ - Ptr to VD$STREAM which is open to the Windows
     1531       21                    internal file.
     1532       22            OUTPUT:
     1533       23                SRC_STREAM and DEST_STREAM will still be open to the same
     1534       24                    file, but it will be a new incarnation of the file.
     1535       25                All windows open to the SRC_STREAM/DEST_STREAM's port will
     1536       26                    be VDP$WERASE'd.
     1537       27            DESCRIPTION:
     1538       28                SRC_STREAM and DEST_STREAM must be open to the same port.
     1539       29                Cycle thru the Windows file:  for any window open to a
     1540       30                    stream which is open to this port, call VDP$WERASE
     1541       31                    to erase the window.  This serves several purposes:
     1542       32                    o Speeds up the rekey, 'cause when we call VDA$PFLUSH,
     1543       33                        it'll call VDP$RWRITE, which'll search the Windows
     1544       34                        file for windows open to this file, and try to
     1545       35                        update their screens with the "new" records.  By
     1546       36                        VDP$WERASE'ing first, VDP$RWRITE won't find any
     1547       37                        windows which need updating.
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:210  
     1548       38                    o Good basis for error recovery.  If we get an error
     1549       39                        anytime in this process, we can just clean up the
     1550       40                        port (restore its PORT.DCB#) and altreturn:
     1551       41                        the Presenter will refill the erased windows from
     1552       42                        disk, assuring the user sees exactly the mess we
     1553       43                        left out there.
     1554       44                Build a (chain of) VD$XLATE_LOCATIONS table(s), containing any
     1555       45                    record keys for the file being rekeyed, referenced by the Windows
     1556       46                    or Locations files or the source operand.  This is a "fix-up
     1557       47                    table", which we'll fill in with new record keys as we rekey
     1558       48                    the file, and which we'll use to fix up the record keys in our
     1559       49                    internal files after the rekey operation is done.
     1560       50                Flush the port first, to write any modified records to the file.
     1561       51                Close the port (=source) DCB and reopen it for input using FSA.
     1562       52                Allocate a new DCB, and store its # in the port.
     1563       53                Open the new (=dest) DCB to the same file as the source DCB, with
     1564       54                    FUN=CREATE, EXIST=NEWFILE (can't use FSA for this, 'cause FSA
     1565       55                    can't create keyed files).
     1566       56                Copy all records from the source DCB to the new DCB, writing them
     1567       57                    with keys starting at KEY_INCR and incremented by KEY_INCR.
     1568       58                    As we step thru the file, we're also stepping thru the sorted
     1569       59                    VD$XLATE_LOCATIONS tables.  For all the entries in the xlate tables
     1570       60                    between each existing record in the file, store the record's
     1571       61                    new record key in the entries.  (This handles record keys in the
     1572       62                    xlate tables for both existing and non-existent records.)
     1573       63                Close the source DCB and OFREE it.
     1574       64                Clear the Port location (PORT.CURRENT), to indicate that the
     1575       65                    destination DCB is now positioned at BOF.
     1576       66                Close the destination DCB and reopen it in the mode specified by
     1577       67                    the port.
     1578       68                Call VDG$XLATE_LOCATIONS to fix up all references to record keys in
     1579       69                    the internal files.
     1580       70
     1581       71                                     !!WARNING!!
     1582       72                    Careful attention must be paid to error situtations in
     1583       73                    this routine.  If errors aren't handled correctly, a
     1584       74                    simple error (such as a record longer than %MXNB_DATA)
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:211  
     1585       75                    or even what is normally considered an unrecoverable error
     1586       76                    (such as failure of VDG$OALLOC due to running out of memory)
     1587       77                    can cause all or most of the file being rekeyed to
     1588       78                    disappear.  Not a nice thing to do to the user.
     1589       79
     1590       80                    The code at ABORT_REKEY handles most error recovery
     1591       81                    situations.  Once the destination DCB has been opened,
     1592       82                    any errors should GOTO ABORT_REKEY, until the entire file
     1593       83                    has been copied to the destination DCB.
     1594       84        */
     1595       85
     1596       86        VDA$FREKEY: PROC (SRC_STREAM, DEST_STREAM, KEY_INCR, HOLE, HOLE_KEY) ALTRET;
     1597       87
     1598       88        %INCLUDE VD_MACROS_M;
     1599     2303        %INCLUDE VD_PERR_C;
     1600     2451        %INCLUDE CP_6;
     1601     2532        %INCLUDE CP_6_SUBS;
     1602     3072        %INCLUDE B_ERRORS_C;
     1603     4198        %INCLUDE XS_MACRO_C;
     1604     4242
     1605     4243
     1606     4244        %VD$STREAM (NAME=SRC_STREAM, STCLASS=PARAM);
     1607     4350        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
     1608     4456        %VD$KEY_NUMBER (NAME=KEY_INCR, STCLASS=PARAM);
     1609     4471    1   DCL HOLE SBIN;
     1610     4472        %VD$KEY_NUMBER (NAME=HOLE_KEY, STCLASS=PARAM);
     1611     4487
     1612     4488
     1613     4489    1   DCL VDP$WERASE          ENTRY (1) ALTRET;
     1614     4490    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
     1615     4491    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1616     4492    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
     1617     4493    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
     1618     4494    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1619     4495    1   DCL VDG$OALLOC_DCB      ENTRY (1) ALTRET;
     1620     4496    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1621     4497    1   DCL VDG$OFREE_DCB       ENTRY (1) ALTRET;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:212  
     1622     4498    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1623     4499    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1624     4500    1   DCL VDG$ESCREECH        ENTRY (3);
     1625     4501    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1626     4502    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
     1627     4503    1   DCL VDG$MONERR          ENTRY     ALTRET;
     1628     4504    1   DCL VDG$MACC_FREKEY_CLOSE_ORIG ENTRY (1);
     1629     4505    1   DCL VDG$MACC_FREKEY_OPEN_SRC_XSA ENTRY (2);
     1630     4506    1   DCL VDG$MACC_FREKEY_OPEN_DEST ENTRY (3);
     1631     4507    1   DCL VDG$MACC_FREKEY_PWRITE ENTRY (2);
     1632     4508    1   DCL VDG$MACC_FREKEY_CLOSE_SRC_XSA ENTRY (1);
     1633     4509    1   DCL VDG$MACC_FREKEY_CLOSE_DEST ENTRY (1);
     1634     4510    1   DCL VDG$MACC_FREKEY_REOPEN_DEST ENTRY (1);
     1635     4511    1   DCL VDG$MACC_FREKEY_REOPEN_SRC ENTRY (1);
     1636     4512        %XSA_ENTRIES;
     1637     4516
     1638     4517
     1639     4518        %VD_6E (STCLASS=SYMREF);
     1640     4554        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
     1641     4599        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1642     4644        %VD_KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF,
     1643     4645                    ITYPE=%KT_NUMBER, IREP=%REP_LOCAL);
     1644     4681
     1645     4682
     1646     4683        %FPT_OPEN (FPTN=CONST_FPT_OPEN, STCLASS=CONSTANT,
     1647     4684            ASN=FILE, CTG=NO, DISP=NAMED, ORG=KEYED);
     1648     4793        %FPT_READ (FPTN=CONST_FPT_READ, STCLASS=CONSTANT, KEYR=YES);
     1649     4832        %FPT_CLOSE (FPTN=CONST_FPT_CLOSE, STCLASS=CONSTANT, DISP=SAVE);
     1650     4874        %XSA_PARAM (FPTN=SRC_XSA);
     1651     4904
     1652     4905
     1653     4906
     1654     4907    1   DCL SRC_XSA_DATA$ PTR;
     1655     4908    1   DCL SRC_XSA_KEY$ PTR;
     1656     4909    1   DCL VD_ERR$ PTR;
     1657     4910    1   DCL WINDOWS_L0_NODE$ PTR;
     1658     4911    1   DCL L1_NODE$ PTR;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:213  
     1659     4912    1   DCL WINDOW_SPEC$ PTR;
     1660     4913    1   DCL SRC_DCB UBIN HALF ALIGNED;
     1661     4914    1   DCL SRC_DCB$ PTR;
     1662     4915        %FPT_CLOSE (STCLASS=AUTO);
     1663     4957        %FPT_OPEN (STCLASS=AUTO);
     1664     5066        %VLP_SN (STCLASS=AUTO);
     1665     5079        %FPT_READ (STCLASS=AUTO);
     1666     5118        %VD$TEXTC_NUMBER (NAME=READ_KEY, STCLASS=AUTO);
     1667     5132    1   DCL VD_BUFFER$ PTR;
     1668     5133        %VD$SPEC_LOCAL (NAME=SPEC, STCLASS=AUTO);
     1669     5148    1   DCL EOF BIT(1) ALIGNED;
     1670     5149        %VD$KEY_NUMBER (NAME=ACTUAL_KEY_INCR, STCLASS=AUTO);
     1671     5164        %VD$KEY_NUMBER (NAME=ACTUAL$KEY_INCR REDEF ACTUAL_KEY_INCR, STCLASS=);
     1672     5179    1   DCL HOLE# SBIN;
     1673     5180    1   DCL PORT_KEY$ PTR;
     1674     5181    1   DCL XLATE_LOCATIONS_ROOT$ PTR;
     1675     5182    1   DCL CURR_XLATE_TABLE$ PTR;
     1676     5183    1   DCL CURR_XLATE SBIN;
     1677     5184
     1678     5185
     1679     5186        %VD$PORT (NAME=PORT, STCLASS="BASED(DEST_STREAM.PORT$)");
     1680     5284        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1681     5377        %VD$FILE_NODE (NAME=L1$NODE, STCLASS="BASED(L1_NODE$)");
     1682     5470        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1683     5536        %F$DCB (DCBN=SRC$DCB, STCLASS="BASED(SRC_DCB$)");
     1684     5593        %VD$BUFFER (NAME=SRC$XSA_DATA, STCLASS="BASED(SRC_XSA_DATA$)");
     1685     5651        %VD$BUFFER (NAME=SRC$XSA_KEY, STCLASS="BASED(SRC_XSA_KEY$)");
     1686     5709        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     1687     5767        %VD$XLATE_LOCATIONS (NAME=CURR$XLATE_TABLE,
     1688     5768            STCLASS="BASED(CURR_XLATE_TABLE$)");
     1689     5904        %VD$KEY_NUMBER (NAME=BKEY, STCLASS=BASED);
     1690     5919        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
     1691     5972        %VD$STREAM;
     1692     6078        %VD$PORT;
     1693     6176        %VD$TEXTC_REMOTE;
     1694     6237        %VD$BUFFER_HEADER;
     1695     6273        %VD$FIT;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:214  
     1696     6309        %F$DCB;
     1697     6366
     1698     6367
     1699     6368
     1700     6369    1           SRC_XSA_DATA$ = ADDR(NIL);
     1701     6370    1           SRC_XSA_KEY$ = ADDR(NIL);
     1702     6371    1           VD_ERR$ = VD_6E.ERR_TAIL$;
     1703     6372    1           HOLE# = 0;
     1704     6373    1           IF ADDR(HOLE) ~= ADDR(NIL) THEN HOLE# = HOLE;
     1705     6374
     1706     6375    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
     1707     6376    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
     1708     6377    2              ALTRETURN;
     1709     6378    2              END;
     1710     6379
     1711     6380    1           IF SRC_STREAM.PORT$ ~= DEST_STREAM.PORT$
     1712     6381    1             OR SRC_STREAM.PORT$ = ADDR(NIL)
     1713     6382    2             OR PORT.EXIST# = 0 THEN DO;
     1714     6383    2              CALL VDG$ESCREECH;
     1715     6384    2              GOTO REKEY_FAILED;
     1716     6385    2              END;
     1717     6386
     1718     6387    1           IF DEST_STREAM.PROTECT (%LVL_LOWER) ~= %CLEAR
     1719     6388    1             OR PORT.INTRINSIC_PROTECT
     1720     6389    1             OR PORT.DCB# = 0
     1721     6390    1             OR (PORT.LEVEL.ORG# (%LVL_LOWER) ~= %ORG_KEYED
     1722     6391    1             AND PORT.LEVEL.ORG# (%LVL_LOWER) ~= %ORG_CONSEC)
     1723     6392    2             OR PORT.LEVEL.KEY_TYPE# (%LVL_LOWER) = %KT_STRING THEN DO;
     1724     6393    2   CANT_REKEY_FILE_FAILURE:;
     1725     6394    2              CALL VDG$ERRMSG (%E$CANT_REKEY_FILE) ALTRET (REKEY_FAILED);
     1726     6395    2              VD$ERR.DCB# = PORT.DCB#;
     1727     6396    2              ALTRETURN;
     1728     6397    2              END;
     1729     6398
     1730     6399    1           SRC_DCB = PORT.DCB#;
     1731     6400    1           SRC_DCB$ = DCBADDR(SRC_DCB);
     1732     6401
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:215  
     1733     6402                /* Make sure KEY_INCR increment will fit into key space */
     1734     6403    1           ACTUAL_KEY_INCR = KEY_INCR;
     1735     6404    2           IF ACTUAL_KEY_INCR.BYTES# = 0 THEN DO;
     1736     6405    2              ACTUAL_KEY_INCR.BYTES# = VD_$BY.V#;
     1737     6406    2              ACTUAL_KEY_INCR.LENGTH# = 3;
     1738     6407    2              END;
     1739     6408    1           IF SRC$DCB.NRECS# > 0 THEN
     1740     6409    2           DO WHILE ACTUAL$KEY_INCR.BYTES# >=
     1741     6410    2             %MX_EDITKEY/(SRC$DCB.NRECS#+HOLE#);
     1742     6411    2              ACTUAL$KEY_INCR.BYTES# = ACTUAL$KEY_INCR.BYTES# / 10;
     1743     6412    2              IF ACTUAL$KEY_INCR.BYTES# = 0 THEN
     1744     6413    2                 GOTO CANT_REKEY_FILE_FAILURE;
     1745     6414    2              END;
     1746     6415
     1747     6416    1           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->
     1748     6417    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1749     6418    1           L1_NODE$ = WINDOWS$L0_NODE.HEAD$;
     1750     6419    1   ERASE_WINDOWS:
     1751     6420    2           DO WHILE L1_NODE$ ~= ADDR(NIL);
     1752     6421    2              WINDOW_SPEC$ = L1$NODE.DESC.SPEC.V$;
     1753     6422    2              IF WINDOW_SPEC$ ~= ADDR(NIL) THEN
     1754     6423    2                 IF WINDOW$SPEC.OPERAND.STREAM$ ~= ADDR(NIL) THEN
     1755     6424    2                    IF WINDOW$SPEC.OPERAND.STREAM$->VD$STREAM.PORT$ =
     1756     6425    3                      ADDR(PORT) THEN DO;
     1757     6426    3                       CALL VDP$WERASE (WINDOW$SPEC)
     1758     6427    3                         ALTRET (REKEY_FAILED);
     1759     6428    3                       END;
     1760     6429    2              L1_NODE$ = L1$NODE.FLINK$;
     1761     6430    2              END ERASE_WINDOWS;
     1762     6431
     1763     6432                /*
     1764     6433                *   Build the xlate tables containing all current refs to file.
     1765     6434                *   These record keys must be built in ascending order.
     1766     6435                */
     1767     6436    1           CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, XLATE_LOCATIONS_ROOT$,
     1768     6437    1             SIZEW(CURR$XLATE_TABLE) +
     1769     6438    1             (SIZEW(CURR$XLATE_TABLE.XLATES) * %N_LOCATION_XLATES))
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:216  
     1770     6439    1             ALTRET (REKEY_FAILED);
     1771     6440    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;
     1772     6441                %COPYKEY (FKEY=PORT.FILE_KEY, TKEY=CURR$XLATE_TABLE.FILE_KEY);
     1773     6457    1           CURR$XLATE_TABLE.LEVEL# = %LVL_EXT_REC;
     1774     6458
     1775     6459    1           CALL VDG$XLATE_LOCATIONS (CURR$XLATE_TABLE, %XLATE_BUILD)
     1776     6460    1             ALTRET (REKEY_FAILED);
     1777     6461
     1778     6462
     1779     6463    1           CALL VDA$PFLUSH (PORT)
     1780     6464    1             ALTRET (REKEY_FAILED);
     1781     6465                /*
     1782     6466                *   Clear the Port's level registers:  we'll be switching it to a
     1783     6467                *       different DCB.
     1784     6468                */
     1785     6469                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX="%LVL_LOWER-1");
     1786     6479    2           IF PORT.LEVEL.DATA$ (%LVL_LOWER-1) ~= ADDR(NIL) THEN DO;
     1787     6480    2              CALL VDG$OFREE (PORT.LEVEL.DATA$ (%LVL_LOWER-1) -> VD$BUFFER)
     1788     6481    2                ALTRET (REKEY_FAILED);
     1789     6482    2              PORT.LEVEL.DATA$ (%LVL_LOWER-1) = ADDR(NIL);
     1790     6483    2              END;
     1791     6484
     1792     6485    1           FPT_CLOSE = CONST_FPT_CLOSE;
     1793     6486    1           FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V);
     1794     6487    1           FPT_CLOSE.V.DCB# = SRC_DCB;
     1795     6488    1           IF VD_$$MON_ACC.V# > 10 THEN
     1796     6489    1              CALL VDG$MACC_FREKEY_CLOSE_ORIG (FPT_CLOSE.V.DCB#);
     1797     6490    1           CALL M$CLOSE (FPT_CLOSE)
     1798     6491    1             ALTRET (CLOSE_SRC_FAILED);
     1799     6492
     1800     6493    1           FPT_OPEN = CONST_FPT_OPEN;
     1801     6494    1           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);
     1802     6495    1           FPT_OPEN.V.ACS# = %SEQUEN#;
     1803     6496    1           FPT_OPEN.V.DCB# = SRC_DCB;
     1804     6497    1           FPT_OPEN.V.FUN# = %IN#;
     1805     6498    1           CALL XSA$OPEN (FPT_OPEN, SRC_XSA)
     1806     6499    1             ALTRET (OPEN_SRC_XSA_FAILED);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:217  
     1807     6500    1           IF VD_$$MON_ACC.V# > 10 THEN
     1808     6501    1              CALL VDG$MACC_FREKEY_OPEN_SRC_XSA (FPT_OPEN.V.DCB#, SRC_XSA.ORG);
     1809     6502    2           IF SRC_XSA.ORG ~= 0 THEN DO;
     1810     6503                   /* Allocate data-granule buffer */
     1811     6504    2              CALL VDG$OALLOC (%CLS_BUFFER, SRC_XSA_DATA$,
     1812     6505    2                SIZEW(VD$BUFFER_HEADER) + %NW_FSA_DATA_BUFFER)
     1813     6506    2                ALTRET (REKEY_FAILED);
     1814     6507    2              SRC_XSA.BBUF_.BUF$ = PALIGNW(ADDR(SRC$XSA_DATA.BYTES));
     1815     6508    2              SRC_XSA.BBUF_.BOUND = (%NW_FSA_DATA_BUFFER *
     1816     6509    2                %NB_PER_WORD) - 1;
     1817     6510                   /* Allocate key-granule buffer */
     1818     6511    2              CALL VDG$OALLOC (%CLS_BUFFER, SRC_XSA_KEY$,
     1819     6512    2                SIZEW(VD$BUFFER_HEADER) + %NW_FSA_KEY_BUFFER)
     1820     6513    2                ALTRET (REKEY_FAILED);
     1821     6514    2              SRC_XSA.KBUF_.BUF$ = PALIGNW(ADDR(SRC$XSA_KEY.BYTES));
     1822     6515    2              SRC_XSA.KBUF_.BOUND = (%NW_FSA_KEY_BUFFER *
     1823     6516    2                %NB_PER_WORD) - 1;
     1824     6517    2              END;
     1825     6518
     1826     6519
     1827     6520                /* Switch port to destination DCB */
     1828     6521    1           CALL VDG$OALLOC_DCB (PORT.DCB#)
     1829     6522    1             ALTRET (REKEY_FAILED);
     1830     6523
     1831     6524
     1832     6525        /*      Remember to change the ORG# in the PORT block to
     1833     6526                the ORG of the destination DCB when we switch the port. */
     1834     6527
     1835     6528    1           PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_KEYED;
     1836     6529    1           PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) = %KT_EDITKEY;
     1837     6530
     1838     6531        /*****************************************************************************
     1839     6532        *                                                                            *
     1840     6533        *                               !! WARNING !!                                *
     1841     6534        *              Any errors from here on must GOTO ABORT_REKEY.                *
     1842     6535        *                                                                            *
     1843     6536        *                                                                            */
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:218  
     1844     6537
     1845     6538    1           FPT_OPEN.V.INITZ.SCRUB# = %YES#;
     1846     6539    1           FPT_OPEN.V.ACS# = %DIRECT#;
     1847     6540    1           FPT_OPEN.V.DCB# = PORT.DCB#;
     1848     6541    1           FPT_OPEN.V.FUN# = %CREATE#;
     1849     6542    1           FPT_OPEN.ACCT_ = VECTOR(SRC$DCB.ACCT#);
     1850     6543    1           FPT_OPEN.NAME_ = VECTOR(SRC$DCB.NAME#);
     1851     6544    1           VLP_SN.NUM# = 1;
     1852     6545    1           VLP_SN.SN#(0) = SRC$DCB.PSN#;
     1853     6546    1           FPT_OPEN.SN_ = VECTOR(VLP_SN);
     1854     6547    1           FPT_OPEN.IFPARAM_ = VECTOR(PORT.FIT$->VD$FIT.FIT);
     1855     6548    1           IF VD_$$MON_ACC.V# > 10 THEN
     1856     6549    1              CALL VDG$MACC_FREKEY_OPEN_DEST (FPT_OPEN.V.DCB#,
     1857     6550    1                SRC$DCB.NAME#, SRC$DCB.ACCT#);
     1858     6551    1           CALL M$OPEN (FPT_OPEN)
     1859     6552    2           WHENALTRETURN DO;
     1860     6553    2              CALL VDG$MONERR;
     1861     6554    2              GOTO ABORT_REKEY;
     1862     6555    2              END;
     1863     6556    1           PORT.LAST_OP# = %ACCOP_OPEN;
     1864     6557
     1865     6558                %BOX (TITLE="Copy records to new DCB");

              6570    1   /***************************************************************************
              6572    1    *                                                                         *
              6576    1            *                          Copy records to new DCB                        *
              6578    1            *                                                                         *
              6580    1           ***************************************************************************/

     1866     6584
     1867     6585    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;
     1868     6586    1           CURR_XLATE = 0;
     1869     6587    1           IF ADDR(CURR$XLATE_TABLE.XLATES.OLD_KEY_LO(CURR_XLATE))->BKEY.BYTES# =
     1870     6588    2             VD_KEY_NUMERIC_BOF.BYTES# THEN DO;
     1871     6589                   /* "Virtual" BOF key is always xlated to itself */
     1872     6590    2              CURR$XLATE_TABLE.XLATES.NEW_KEY (CURR_XLATE) = VD_KEY_NUMERIC_BOF;
     1873     6591    2              CURR_XLATE = CURR_XLATE + 1;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:219  
     1874     6592    2              END;
     1875     6593
     1876     6594    1           FPT_READ = CONST_FPT_READ;
     1877     6595    1           FPT_READ.V_ = VECTOR(FPT_READ.V);
     1878     6596    1           FPT_READ.KEY_ = VECTOR(READ_KEY);
     1879     6597    1           FPT_READ.V.DCB# = SRC_DCB;
     1880     6598    1           SPEC = %CLEAR;
     1881     6599    1           SPEC.TYPE# = %SPT_EXT_RECORD;
     1882     6600    1           SPEC.REP# = %REP_LOCAL;
     1883     6601    1           SPEC.LENGTH# = 1;   /* DVBYTE is 1 character */
     1884     6602    1           CALL READ_SRC_RECORD (VD_BUFFER$, SPEC.BYTES, EOF)
     1885     6603    1             ALTRET (ABORT_REKEY);
     1886     6604
     1887     6605    1           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)
     1888     6606    1             ALTRET (ABORT_REKEY);
     1889     6607    1           PORT.CURRENT.KEY(%LVL_EXT_REC-1) = ACTUAL_KEY_INCR;
     1890     6608
     1891     6609    1   COPY_RECORDS:
     1892     6610    2           DO WHILE NOT EOF;
     1893     6611    3              IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
     1894     6612    3                 CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
     1895     6613    3                 GOTO ABORT_REKEY;
     1896     6614    3                 END;
     1897     6615    2              IF VD_$$MON_ACC.V# > 10 THEN
     1898     6616    2                 CALL VDG$MACC_FREKEY_PWRITE (PORT, VD$BUFFER);
     1899     6617    2              CALL VDA$PWRITE (PORT, %LVL_EXT_REC, , VD$BUFFER)
     1900     6618    3              WHENALTRETURN DO;
     1901     6619    3                 CALL VDG$OFREE (VD$BUFFER);   /* Ignore altreturn */
     1902     6620    3                 GOTO ABORT_REKEY;
     1903     6621    3                 END;
     1904     6622                   /*
     1905     6623                   *   When we copy a record to the new (=Port's) file, VDA$PWRITE
     1906     6624                   *       will compare what we write with what's already in the
     1907     6625                   *       Port's registers; if the Port currently holds the first
     1908     6626                   *       record of the file, VDA$PWRITE will find the record we're
     1909     6627                   *       writing equal to the record in the Port and will basically
     1910     6628                   *       ignore the write (won't set .x_MODIFIED).
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:220  
     1911     6629                   *   So, we set the _MODIFIED bit here, to force VDA$PFLUSH to write
     1912     6630                   *       the record out to the file.
     1913     6631                   *   Test case for this:  BO CURR<CR> REKEY<CR> loses first record in
     1914     6632                   *       file.
     1915     6633                   */
     1916     6634    2              PORT.LEVEL.DATA_MODIFIED (%LVL_EXT_REC) = %TRUE;
     1917     6635    2              CALL VDA$PFLUSH (PORT, %TO_PRESENTER)
     1918     6636    2                ALTRET (ABORT_REKEY);
     1919     6637
     1920     6638                   /*
     1921     6639                   *   Search CURR$XLATE_TABLE forward from CURR_XLATE, looking for
     1922     6640                   *       READ_KEY or (one entry shy of) the next higher key.  For each
     1923     6641                   *       xlate entry found, store PORT$KEY.BYTES# in the entry.
     1924     6642                   */
     1925     6643    2   SCAN_XLATE_TABLES:
     1926     6644    3              DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);
     1927     6645    4                 DO WHILE CURR_XLATE < CURR$XLATE_TABLE.N_ENTRIES#;
     1928     6646    4                    IF ADDR(CURR$XLATE_TABLE.XLATES.OLD_KEY_LO(CURR_XLATE)) ->
     1929     6647    4                      BKEY.BYTES# > READ_KEY.BYTES# THEN
     1930     6648    4                       EXIT SCAN_XLATE_TABLES;    /* Done til next record */
     1931     6649    4                    CURR$XLATE_TABLE.XLATES.NEW_KEY(CURR_XLATE) =
     1932     6650    4                      PORT.CURRENT.KEY(%LVL_EXT_REC-1);
     1933     6651    4                    CURR_XLATE = CURR_XLATE + 1;
     1934     6652    4                    END;
     1935     6653    3                 CURR_XLATE_TABLE$ = CURR$XLATE_TABLE.FLINK$;
     1936     6654    3                 CURR_XLATE = 0;
     1937     6655    3                 END SCAN_XLATE_TABLES;
     1938     6656
     1939     6657                   /* Bump to the next key for the destination file */
     1940     6658    2              ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# =
     1941     6659    2                ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# +
     1942     6660    2                ACTUAL$KEY_INCR.BYTES#;
     1943     6661    2              IF HOLE# ~= 0 THEN IF HOLE_KEY.BYTES# = READ_KEY.BYTES# THEN
     1944     6662    2                    ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# =
     1945     6663    2                      ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# +
     1946     6664    2                      HOLE# * ACTUAL$KEY_INCR.BYTES#;
     1947     6665
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:221  
     1948     6666    2              CALL READ_SRC_RECORD (VD_BUFFER$, SPEC.BYTES, EOF)
     1949     6667    2                ALTRET (ABORT_REKEY);
     1950     6668    2              END COPY_RECORDS;
     1951     6669
     1952     6670
     1953     6671                /*
     1954     6672                *  From here on, the entire file has been copied to the destination
     1955     6673                *       DCB; the rekeyed version of the file is safe.
     1956     6674                *  Therefore, any errors from here on shouldn't abort the rekey, but
     1957     6675                *       they shouldn't just altreturn either.  Instead, they should
     1958     6676                *       remember the fact that we saw an error (so we can ALTRETURN
     1959     6677                *       at the end), but continue processing--to close all the DCBs,
     1960     6678                *       clean up the Port and the DCBs, etc.
     1961     6679                */
     1962     6680
     1963     6681                /*
     1964     6682                *   Search CURR$XLATE_TABLE forward from CURR_XLATE til the end of the
     1965     6683                *       last table.  For each of these xlate entries, store
     1966     6684                *       PORT$KEY.BYTES# in the entry.  These are keys beyond the end of
     1967     6685                *       the file; PORT$KEY.BYTES# is one increment beyond the end of
     1968     6686                *       the newly-rekeyed file.
     1969     6687                */
     1970     6688    1   FINISH_XLATE_TABLES:
     1971     6689    2           DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);
     1972     6690    3              DO WHILE CURR_XLATE < CURR$XLATE_TABLE.N_ENTRIES#;
     1973     6691    3                 CURR$XLATE_TABLE.XLATES.NEW_KEY(CURR_XLATE) =
     1974     6692    3                   PORT.CURRENT.KEY(%LVL_EXT_REC-1);
     1975     6693    3                 CURR_XLATE = CURR_XLATE + 1;
     1976     6694    3                 END;
     1977     6695    2              CURR_XLATE_TABLE$ = CURR$XLATE_TABLE.FLINK$;
     1978     6696    2              CURR_XLATE = 0;
     1979     6697    2              END FINISH_XLATE_TABLES;
     1980     6698    1           PORT.CURRENT.EOF = %TRUE;
     1981     6699
     1982     6700                /* Close the source DCB */
     1983     6701
     1984     6702    1           FPT_CLOSE.V.DCB# = SRC_DCB;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:222  
     1985     6703    1           IF VD_$$MON_ACC.V# > 10 THEN
     1986     6704    1              CALL VDG$MACC_FREKEY_CLOSE_SRC_XSA (FPT_CLOSE.V.DCB#);
     1987     6705    1           CALL XSA$CLOSE (FPT_CLOSE, SRC_XSA)
     1988     6706    2           WHENALTRETURN DO;
     1989     6707    2              CALL VDG$MONERR;
     1990     6708    2              END;
     1991     6709
     1992     6710    2           IF SRC_XSA_DATA$ ~= ADDR(NIL) THEN DO;
     1993     6711    2              CALL VDG$OFREE (SRC$XSA_DATA);
     1994     6712    2              END;
     1995     6713    2           IF SRC_XSA_KEY$ ~= ADDR(NIL) THEN DO;
     1996     6714    2              CALL VDG$OFREE (SRC$XSA_KEY);
     1997     6715    2              END;
     1998     6716    1           CALL VDG$OFREE_DCB (SRC_DCB);
     1999     6717
     2000     6718                /* Close the destination DCB with SAVE, then re-open it */
     2001     6719    1           FPT_CLOSE.V.DCB# = PORT.DCB#;
     2002     6720    1           IF VD_$$MON_ACC.V# > 10 THEN
     2003     6721    1              CALL VDG$MACC_FREKEY_CLOSE_DEST (FPT_CLOSE.V.DCB#);
     2004     6722    1           CALL M$CLOSE (FPT_CLOSE)
     2005     6723    2           WHENALTRETURN DO;
     2006     6724    2              CALL VDG$MONERR;
     2007     6725    2              END;
     2008     6726
     2009     6727                /*
     2010     6728                *  After closing the destination DCB, it's positioned at BOF:
     2011     6729                *     clear PORT.CURRENT to indicate DCB's position.
     2012     6730                */
     2013     6731    1           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT);
     2014     6732
     2015     6733    1           FPT_OPEN = CONST_FPT_OPEN;
     2016     6734    1           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);
     2017     6735    1           FPT_OPEN.V.ACS# = %DIRECT#;
     2018     6736    1           FPT_OPEN.V.FUN# = %UPDATE#;
     2019     6737    1           FPT_OPEN.V.DCB# = PORT.DCB#;
     2020     6738    1           IF VD_$$MON_ACC.V# > 10 THEN
     2021     6739    1              CALL VDG$MACC_FREKEY_REOPEN_DEST (FPT_OPEN.V.DCB#);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:223  
     2022     6740    1           CALL M$OPEN (FPT_OPEN)
     2023     6741    2           WHENALTRETURN DO;
     2024     6742    2              CALL VDG$MONERR;
     2025     6743    2              ALTRETURN;
     2026     6744    2              END;
     2027     6745    1           PORT.LAST_OP# = %ACCOP_OPEN;
     2028     6746
     2029     6747                /* Now, fix up all those references to the old keys */
     2030     6748    1           CALL VDG$XLATE_LOCATIONS (XLATE_LOCATIONS_ROOT$ -> CURR$XLATE_TABLE,
     2031     6749    1             %XLATE_LOCATION);
     2032     6750                /* Free the chain of xlate tables */
     2033     6751    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;
     2034     6752    2           DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);
     2035     6753    2              XLATE_LOCATIONS_ROOT$ = CURR$XLATE_TABLE.FLINK$;
     2036     6754    2              CURR$XLATE_TABLE.FLINK$ = ADDR(NIL);
     2037     6755    2              CALL VDG$OFREE (CURR$XLATE_TABLE);
     2038     6756    2              CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;
     2039     6757    2              END;
     2040     6758
     2041     6759
     2042     6760                /* If VD_ERR$ is non-NIL, we had an error but kept on going anyway */
     2043     6761
     2044     6762    1           IF VD_ERR$ ~= VD_6E.ERR_TAIL$ THEN
     2045     6763    1              ALTRETURN;       /* Be sure the error gets reported */
     2046     6764
     2047     6765    1           RETURN;
     2048     6766
     2049     6767
     2050     6768
     2051     6769    1   CLOSE_SRC_FAILED:
     2052     6770    1           CALL VDG$MONERR;
     2053     6771
     2054     6772    1   REKEY_FAILED: ;
     2055     6773    1           ALTRETURN;
     2056     6774
     2057     6775
     2058     6776    1   OPEN_SRC_XSA_FAILED:
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:224  
     2059     6777    1           CALL VDG$MONERR;
     2060     6778    1           PORT.DCB# = 0;  /* So FCLOSE won't try to M$CLOSE the DCB */
     2061     6779    1           CALL VDA$FCLOSE (SRC_STREAM);   /* Let ALTRETURN fall thru */
     2062     6780    1           ALTRETURN;
     2063     6781
     2064     6782
     2065     6783    1   ABORT_REKEY:
     2066     6784                /*
     2067     6785                *  Abort the rekey operation--revert to the original file.
     2068     6786                *  At this point, we assume:
     2069     6787                *       Someone has already built a VD$ERR for an error.
     2070     6788                *       SRC_XSA_DATA$ and _KEY$ are either NIL, meaning we haven't
     2071     6789                *           allocated any buffers for XSA, or they point to the buffers.
     2072     6790                *       SRC_DCB and SRC$DCB refer to the original source DCB.
     2073     6791                *       PORT.DCB# is the destination DCB.
     2074     6792                *  To abort, do the following:
     2075     6793                *     If the dest DCB is open, close it with DISP=RELEASE.
     2076     6794                *     Point the port to the original source DCB.
     2077     6795                *     If the source DCB is open, close it, 'cause it's open for input
     2078     6796                *         only.
     2079     6797                *     If the source DCB is now closed, re-open it for update.
     2080     6798                */
     2081     6799    2           IF DCBADDR(PORT.DCB#)->F$DCB.FCD# THEN DO;
     2082     6800    2              FPT_CLOSE.V.DCB# = PORT.DCB#;
     2083     6801    2              FPT_CLOSE.V.DISP# = %RELEASE#;
     2084     6802    2              IF VD_$$MON_ACC.V# > 10 THEN
     2085     6803    2                 CALL VDG$MACC_FREKEY_CLOSE_DEST (FPT_CLOSE.V.DCB#);
     2086     6804    2              CALL M$CLOSE (FPT_CLOSE)
     2087     6805    3              WHENALTRETURN DO; END;  /* Ignore altreturn */
     2088     6806    2              END;
     2089     6807
     2090     6808    1           CALL VDG$OFREE_DCB (PORT.DCB#); /* Ignore altreturn */
     2091     6809    1           PORT.DCB# = SRC_DCB;
     2092     6810
     2093     6811    2           IF SRC$DCB.FCD# THEN DO;
     2094     6812    2              FPT_CLOSE.V.DCB# = SRC_DCB;
     2095     6813    2              FPT_CLOSE.V.DISP# = %SAVE#;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:225  
     2096     6814    2              IF VD_$$MON_ACC.V# > 10 THEN
     2097     6815    2                 CALL VDG$MACC_FREKEY_CLOSE_SRC_XSA (FPT_CLOSE.V.DCB#);
     2098     6816    2              CALL XSA$CLOSE (FPT_CLOSE, SRC_XSA);
     2099     6817    2              END;
     2100     6818
     2101     6819    2           IF NOT SRC$DCB.FCD# THEN DO;
     2102     6820    2              FPT_OPEN.V.ACS# = %DIRECT#;
     2103     6821    2              FPT_OPEN.V.FUN# = %UPDATE#;
     2104     6822    2              FPT_OPEN.V.DCB# = SRC_DCB;
     2105     6823    2              FPT_OPEN.V.INITZ.SCRUB# = %NO#;
     2106     6824    2              IF VD_$$MON_ACC.V# > 10 THEN
     2107     6825    2                 CALL VDG$MACC_FREKEY_REOPEN_SRC (FPT_OPEN.V.DCB#);
     2108     6826    2              CALL M$OPEN (FPT_OPEN)
     2109     6827    3              WHENALTRETURN DO;
     2110     6828    3                 CALL VDG$MONERR;
     2111     6829    3                 END;
     2112     6830    2              PORT.LAST_OP# = %ACCOP_OPEN;
     2113     6831    2              END;
     2114     6832
     2115     6833    2           IF SRC_XSA_DATA$ ~= ADDR(NIL) THEN DO;
     2116     6834    2              CALL VDG$OFREE (SRC$XSA_DATA);   /* Ignore altret */
     2117     6835    2              END;
     2118     6836    2           IF SRC_XSA_KEY$ ~= ADDR(NIL) THEN DO;
     2119     6837    2              CALL VDG$OFREE (SRC$XSA_KEY);   /* Ignore altret */
     2120     6838    2              END;
     2121     6839    1           ALTRETURN;
     2122     6840        %BOX (TITLE=READ_SRC_RECORD, PAGE=YES);
              6848    1
              6852    1   /***************************************************************************
              6854    1    *                                                                         *
              6858    1            *                              READ_SRC_RECORD                            *
              6860    1            *                                                                         *
              6862    1           ***************************************************************************/

     2123     6866
     2124     6867        /*I* NAME: READ_SRC_RECORD
     2125     6868            PARAMETERS:
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:226  
     2126     6869                VD_BUFFER$ - Uninitialized ptr.
     2127     6870                DVBYTE - Uninitialized UBIN BYTE CALIGNED.
     2128     6871                EOF_FLAG - Uninitialized BIT(1) ALIGNED flag.
     2129     6872            INPUT:
     2130     6873                SRC_XSA - XSA_PARAM structure, open to the source file.
     2131     6874                FPT_READ - Initialized FPT_READ structure.
     2132     6875            OUTPUT:
     2133     6876                VD_BUFFER$ will point to a VD$BUFFER containing the record
     2134     6877                    read--unless EOF_FLAG is set.
     2135     6878                DVBYTE will contain the record's DVBYTE char--unless EOF_FLAG
     2136     6879                    is set.
     2137     6880                EOF_FLAG will be set if we hit EOF.
     2138     6881            DESCRIPTION:
     2139     6882                Keep trying to read a record, allocating larger and larger
     2140     6883                buffers if we get an E$LD error.
     2141     6884                However, if the file is a compressed file, allocate the largest
     2142     6885                buffer possible for the first M$READ, because you can't do
     2143     6886                continued M$READs on a compressed file.
     2144     6887        */
     2145     6888
     2146     6889    1   READ_SRC_RECORD: PROC (VD_BUFFER$, DVBYTE, EOF_FLAG) ALTRET;
     2147     6890
     2148     6891    2   DCL VD_BUFFER$ PTR;
     2149     6892    2   DCL DVBYTE UBIN BYTE CALIGNED;
     2150     6893    2   DCL EOF_FLAG BIT(1) ALIGNED;
     2151     6894
     2152     6895
     2153     6896    2   DCL NB_BUFFER SBIN;
     2154     6897    2   DCL TOTAL_ARS SBIN;
     2155     6898    2   DCL PREV_BUFFER$ PTR;
     2156     6899
     2157     6900
     2158     6901        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2159     6959
     2160     6960
     2161     6961
     2162     6962    2           EOF_FLAG = %FALSE;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:227  
     2163     6963    2           NB_BUFFER = %NB_DFLT_DATA_REC;
     2164     6964    2           IF DCBADDR(FPT_READ.V.DCB#)->F$DCB.COMP# THEN
     2165     6965    2              NB_BUFFER = %MXNB_DATA;
     2166     6966    2           TOTAL_ARS = 0;
     2167     6967    2           VD_BUFFER$ = ADDR(NIL);
     2168     6968    2           PREV_BUFFER$ = ADDR(NIL);
     2169     6969    2           FPT_READ.V.DVBYTE.CONT# = %FALSE;
     2170     6970
     2171     6971    2   GET_COMPLETE_RECORD:
     2172     6972    3           DO WHILE VD_BUFFER$ = ADDR(NIL);
     2173     6973    3              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,
     2174     6974    3                (LENGTHC(VD$BUFFER_HEADER) + NB_BUFFER + %(NB_PER_WORD-1)) /
     2175     6975    3                %NB_PER_WORD)
     2176     6976    3                ALTRET (OALLOC_FAILED);
     2177     6977    3              VD$BUFFER.LENGTH# = NB_BUFFER;
     2178     6978    3              FPT_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);
     2179     6979    4              IF PREV_BUFFER$ ~= ADDR(NIL) THEN DO;
     2180     6980                      /*
     2181     6981                      * Doing a continued read:  copy already-read part of
     2182     6982                      *     record to new buffer, free old buffer.
     2183     6983                      */
     2184     6984    4                 VD$BUFFER.BYTES = PREV_BUFFER$->VD$BUFFER.BYTES;
     2185     6985    4                 FPT_READ.BUF_ = VECTOR(SUBSTR(VD$BUFFER.BYTES,
     2186     6986    4                   PREV_BUFFER$->VD$BUFFER.LENGTH#));
     2187     6987    4                 CALL VDG$OFREE (PREV_BUFFER$->VD$BUFFER)
     2188     6988    4                   ALTRET (OFREE_FAILED);
     2189     6989    4                 PREV_BUFFER$ = ADDR(NIL);
     2190     6990    4                 END;
     2191     6991
     2192     6992    3              CALL XSA$READ (FPT_READ, SRC_XSA)
     2193     6993    4              WHENALTRETURN DO;
     2194     6994    4                 IF SRC_XSA.ERR.CODE ~= %E$LD
     2195     6995    4                   OR NB_BUFFER >= %MXNB_DATA THEN
     2196     6996    4                    GOTO READ_FAILED_HARD;
     2197     6997    4                 FPT_READ.V.DVBYTE.CONT# = %TRUE;
     2198     6998    4                 NB_BUFFER = MINIMUM (NB_BUFFER * 2, %MXNB_DATA);
     2199     6999    4                 TOTAL_ARS = TOTAL_ARS + SRC_XSA.ARS#;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:228  
     2200     7000    4                 VD$BUFFER.LENGTH# = TOTAL_ARS;
     2201     7001    4                 PREV_BUFFER$ = VD_BUFFER$;
     2202     7002    4                 VD_BUFFER$ = ADDR(NIL);
     2203     7003    4                 END;
     2204     7004    3              END GET_COMPLETE_RECORD;
     2205     7005
     2206     7006    2           VD$BUFFER.LENGTH# = TOTAL_ARS + SRC_XSA.ARS#;
     2207     7007    2           DVBYTE = BITBIN(SRC_XSA.DVBYTE);
     2208     7008    2           RETURN;
     2209     7009
     2210     7010
     2211     7011    2   READ_FAILED_HARD:
     2212     7012    2           CALL VDG$OFREE (VD$BUFFER)
     2213     7013    2             ALTRET (OFREE_FAILED);
     2214     7014    2           VD_BUFFER$ = ADDR(NIL);
     2215     7015    3           IF SRC_XSA.ERR.CODE = %E$EOF THEN DO;
     2216     7016    3              EOF_FLAG = %TRUE;
     2217     7017    3              RETURN;
     2218     7018    3              END;
     2219     7019    2           CALL VDG$MONERR;
     2220     7020
     2221     7021
     2222     7022    2   OALLOC_FAILED: ;
     2223     7023    2   OFREE_FAILED: ;
     2224     7024    2           ALTRETURN;
     2225     7025
     2226     7026    2   END READ_SRC_RECORD;
     2227     7027
     2228     7028    1   END VDA$FREKEY;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:229  
--  Include file information  --

   XS_MACRO_C.:LIBRARY  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FREKEY.

   Procedure VDA$FREKEY requires 1028 words for executable code.
   Procedure VDA$FREKEY requires 146 words of local(AUTO) storage.

    No errors detected in file VDA$FILE.:VDA5TSI    .

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:230  

 Object Unit name= VDA$FREKEY                                 File name= VDA$FILE.:VDA5TOU
 UTS= JUL 04 '97 11:05:02.76 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    102    146  VDA$FREKEY
    2   Data  even  none    14     16  VDA$FREKEY
    3   Proc  even  none  1028   2004  VDA$FREKEY
    4  RoData even  none    30     36  VDA$FREKEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        5  VDA$FREKEY
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:231  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDP$WERASE
         yes           Std       1 VDG$MACC_FREKEY_CLOSE_ORIG
         yes           Std       3 VDG$MACC_FREKEY_OPEN_DEST
         yes           Std       2 VDG$MACC_FREKEY_PWRITE
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       0 VDG$MONERR
         yes           Std       1 VDG$MACC_FREKEY_CLOSE_DEST
         yes           Std       1 VDG$MACC_FREKEY_REOPEN_SRC
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       2 XSA$OPEN
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       1 VDG$OALLOC_DCB
 yes     yes           Std       2 XSA$CLOSE
         yes           Std       1 VDG$MACC_FREKEY_REOPEN_DEST
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       1 VDA$FCLOSE
 yes     yes           Std       4 VDA$PWRITE
 yes     yes           Std       2 VDG$XLATE_LOCATIONS
 yes     yes           Std       2 VDA$PFLUSH
         yes           Std       2 VDG$MACC_FREKEY_OPEN_SRC_XSA
         yes           Std       1 VDG$MACC_FREKEY_CLOSE_SRC_XSA
 yes     yes           Std       1 VDG$OFREE_DCB
 yes     yes           Std       2 XSA$READ
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:232  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VD_6E                                 VD_$BY
     VD_$$MON_ACC                          VD_KEY_NUMERIC_BOF                    B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:233  


     1511        1        /*T***********************************************************/
     1512        2        /*T*                                                         */
     1513        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1514        4        /*T*                                                         */
     1515        5        /*T***********************************************************/
     1516        6
     1517        7        /*D* NAME: VDA$FREKEY
     1518        8            PARAMETERS:
     1519        9                SRC_STREAM - VD$STREAM for the source operand.  Must be open
     1520       10                    to a file.
     1521       11                DEST_STREAM - VD$STREAM for the destination operand.  Must be
     1522       12                    open to the same file (and therefore same VD$PORT) as SRC_STREAM.
     1523       13                KEY_INCR - VD$KEY specifying the increment to use.  Caller
     1524       14                    must have already checked for 0-value, tried $BY, etc.
     1525       15                    KEY_INCR must not have a 0-value.
     1526       16                HOLE - Optional SBIN indicating how big a hole to leave
     1527       17                    at HOLE_KEY.
     1528       18                HOLE_KEY - VD$KEY_NUMBER present only if HOLE is.
     1529       19            INPUT:
     1530       20                VD_6E.WINDOWS$ - Ptr to VD$STREAM which is open to the Windows
     1531       21                    internal file.
     1532       22            OUTPUT:
     1533       23                SRC_STREAM and DEST_STREAM will still be open to the same
     1534       24                    file, but it will be a new incarnation of the file.
     1535       25                All windows open to the SRC_STREAM/DEST_STREAM's port will
     1536       26                    be VDP$WERASE'd.
     1537       27            DESCRIPTION:
     1538       28                SRC_STREAM and DEST_STREAM must be open to the same port.
     1539       29                Cycle thru the Windows file:  for any window open to a
     1540       30                    stream which is open to this port, call VDP$WERASE
     1541       31                    to erase the window.  This serves several purposes:
     1542       32                    o Speeds up the rekey, 'cause when we call VDA$PFLUSH,
     1543       33                        it'll call VDP$RWRITE, which'll search the Windows
     1544       34                        file for windows open to this file, and try to
     1545       35                        update their screens with the "new" records.  By
     1546       36                        VDP$WERASE'ing first, VDP$RWRITE won't find any
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:234  
     1547       37                        windows which need updating.
     1548       38                    o Good basis for error recovery.  If we get an error
     1549       39                        anytime in this process, we can just clean up the
     1550       40                        port (restore its PORT.DCB#) and altreturn:
     1551       41                        the Presenter will refill the erased windows from
     1552       42                        disk, assuring the user sees exactly the mess we
     1553       43                        left out there.
     1554       44                Build a (chain of) VD$XLATE_LOCATIONS table(s), containing any
     1555       45                    record keys for the file being rekeyed, referenced by the Windows
     1556       46                    or Locations files or the source operand.  This is a "fix-up
     1557       47                    table", which we'll fill in with new record keys as we rekey
     1558       48                    the file, and which we'll use to fix up the record keys in our
     1559       49                    internal files after the rekey operation is done.
     1560       50                Flush the port first, to write any modified records to the file.
     1561       51                Close the port (=source) DCB and reopen it for input using FSA.
     1562       52                Allocate a new DCB, and store its # in the port.
     1563       53                Open the new (=dest) DCB to the same file as the source DCB, with
     1564       54                    FUN=CREATE, EXIST=NEWFILE (can't use FSA for this, 'cause FSA
     1565       55                    can't create keyed files).
     1566       56                Copy all records from the source DCB to the new DCB, writing them
     1567       57                    with keys starting at KEY_INCR and incremented by KEY_INCR.
     1568       58                    As we step thru the file, we're also stepping thru the sorted
     1569       59                    VD$XLATE_LOCATIONS tables.  For all the entries in the xlate tables
     1570       60                    between each existing record in the file, store the record's
     1571       61                    new record key in the entries.  (This handles record keys in the
     1572       62                    xlate tables for both existing and non-existent records.)
     1573       63                Close the source DCB and OFREE it.
     1574       64                Clear the Port location (PORT.CURRENT), to indicate that the
     1575       65                    destination DCB is now positioned at BOF.
     1576       66                Close the destination DCB and reopen it in the mode specified by
     1577       67                    the port.
     1578       68                Call VDG$XLATE_LOCATIONS to fix up all references to record keys in
     1579       69                    the internal files.
     1580       70
     1581       71                                     !!WARNING!!
     1582       72                    Careful attention must be paid to error situtations in
     1583       73                    this routine.  If errors aren't handled correctly, a
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:235  
     1584       74                    simple error (such as a record longer than %MXNB_DATA)
     1585       75                    or even what is normally considered an unrecoverable error
     1586       76                    (such as failure of VDG$OALLOC due to running out of memory)
     1587       77                    can cause all or most of the file being rekeyed to
     1588       78                    disappear.  Not a nice thing to do to the user.
     1589       79
     1590       80                    The code at ABORT_REKEY handles most error recovery
     1591       81                    situations.  Once the destination DCB has been opened,
     1592       82                    any errors should GOTO ABORT_REKEY, until the entire file
     1593       83                    has been copied to the destination DCB.
     1594       84        */
     1595       85
     1596       86        VDA$FREKEY: PROC (SRC_STREAM, DEST_STREAM, KEY_INCR, HOLE, HOLE_KEY) ALTRET;

     86  3 000000   000000 700200 xent  VDA$FREKEY   TSX0  ! X66_AUTO_5
         3 000001   000222 000005                    ZERO    146,5

     1597       87
     1598       88        %INCLUDE VD_MACROS_M;
     1599     2303        %INCLUDE VD_PERR_C;
     1600     2451        %INCLUDE CP_6;
     1601     2532        %INCLUDE CP_6_SUBS;
     1602     3072        %INCLUDE B_ERRORS_C;
     1603     4198        %INCLUDE XS_MACRO_C;
     1604     4242
     1605     4243
     1606     4244        %VD$STREAM (NAME=SRC_STREAM, STCLASS=PARAM);
     1607     4350        %VD$STREAM (NAME=DEST_STREAM, STCLASS=PARAM);
     1608     4456        %VD$KEY_NUMBER (NAME=KEY_INCR, STCLASS=PARAM);
     1609     4471    1   DCL HOLE SBIN;
     1610     4472        %VD$KEY_NUMBER (NAME=HOLE_KEY, STCLASS=PARAM);
     1611     4487
     1612     4488
     1613     4489    1   DCL VDP$WERASE          ENTRY (1) ALTRET;
     1614     4490    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
     1615     4491    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1616     4492    1   DCL VDA$FCLOSE          ENTRY (1) ALTRET;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:236  
     1617     4493    1   DCL VDG$XLATE_LOCATIONS ENTRY (2) ALTRET;
     1618     4494    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1619     4495    1   DCL VDG$OALLOC_DCB      ENTRY (1) ALTRET;
     1620     4496    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1621     4497    1   DCL VDG$OFREE_DCB       ENTRY (1) ALTRET;
     1622     4498    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1623     4499    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1624     4500    1   DCL VDG$ESCREECH        ENTRY (3);
     1625     4501    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1626     4502    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
     1627     4503    1   DCL VDG$MONERR          ENTRY     ALTRET;
     1628     4504    1   DCL VDG$MACC_FREKEY_CLOSE_ORIG ENTRY (1);
     1629     4505    1   DCL VDG$MACC_FREKEY_OPEN_SRC_XSA ENTRY (2);
     1630     4506    1   DCL VDG$MACC_FREKEY_OPEN_DEST ENTRY (3);
     1631     4507    1   DCL VDG$MACC_FREKEY_PWRITE ENTRY (2);
     1632     4508    1   DCL VDG$MACC_FREKEY_CLOSE_SRC_XSA ENTRY (1);
     1633     4509    1   DCL VDG$MACC_FREKEY_CLOSE_DEST ENTRY (1);
     1634     4510    1   DCL VDG$MACC_FREKEY_REOPEN_DEST ENTRY (1);
     1635     4511    1   DCL VDG$MACC_FREKEY_REOPEN_SRC ENTRY (1);
     1636     4512        %XSA_ENTRIES;
     1637     4516
     1638     4517
     1639     4518        %VD_6E (STCLASS=SYMREF);
     1640     4554        %VD$NUMBER (NAME=VD_$BY, STCLASS=SYMREF);
     1641     4599        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1642     4644        %VD_KEY (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF,
     1643     4645                    ITYPE=%KT_NUMBER, IREP=%REP_LOCAL);
     1644     4681
     1645     4682
     1646     4683        %FPT_OPEN (FPTN=CONST_FPT_OPEN, STCLASS=CONSTANT,
     1647     4684            ASN=FILE, CTG=NO, DISP=NAMED, ORG=KEYED);
     1648     4793        %FPT_READ (FPTN=CONST_FPT_READ, STCLASS=CONSTANT, KEYR=YES);
     1649     4832        %FPT_CLOSE (FPTN=CONST_FPT_CLOSE, STCLASS=CONSTANT, DISP=SAVE);
     1650     4874        %XSA_PARAM (FPTN=SRC_XSA);
     1651     4904
     1652     4905
     1653     4906
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:237  
     1654     4907    1   DCL SRC_XSA_DATA$ PTR;
     1655     4908    1   DCL SRC_XSA_KEY$ PTR;
     1656     4909    1   DCL VD_ERR$ PTR;
     1657     4910    1   DCL WINDOWS_L0_NODE$ PTR;
     1658     4911    1   DCL L1_NODE$ PTR;
     1659     4912    1   DCL WINDOW_SPEC$ PTR;
     1660     4913    1   DCL SRC_DCB UBIN HALF ALIGNED;
     1661     4914    1   DCL SRC_DCB$ PTR;
     1662     4915        %FPT_CLOSE (STCLASS=AUTO);
     1663     4957        %FPT_OPEN (STCLASS=AUTO);
     1664     5066        %VLP_SN (STCLASS=AUTO);
     1665     5079        %FPT_READ (STCLASS=AUTO);
     1666     5118        %VD$TEXTC_NUMBER (NAME=READ_KEY, STCLASS=AUTO);
     1667     5132    1   DCL VD_BUFFER$ PTR;
     1668     5133        %VD$SPEC_LOCAL (NAME=SPEC, STCLASS=AUTO);
     1669     5148    1   DCL EOF BIT(1) ALIGNED;
     1670     5149        %VD$KEY_NUMBER (NAME=ACTUAL_KEY_INCR, STCLASS=AUTO);
     1671     5164        %VD$KEY_NUMBER (NAME=ACTUAL$KEY_INCR REDEF ACTUAL_KEY_INCR, STCLASS=);
     1672     5179    1   DCL HOLE# SBIN;
     1673     5180    1   DCL PORT_KEY$ PTR;
     1674     5181    1   DCL XLATE_LOCATIONS_ROOT$ PTR;
     1675     5182    1   DCL CURR_XLATE_TABLE$ PTR;
     1676     5183    1   DCL CURR_XLATE SBIN;
     1677     5184
     1678     5185
     1679     5186        %VD$PORT (NAME=PORT, STCLASS="BASED(DEST_STREAM.PORT$)");
     1680     5284        %VD$FILE_NODE (NAME=WINDOWS$L0_NODE, STCLASS="BASED(WINDOWS_L0_NODE$)");
     1681     5377        %VD$FILE_NODE (NAME=L1$NODE, STCLASS="BASED(L1_NODE$)");
     1682     5470        %VD$WINDOW_SPEC (NAME=WINDOW$SPEC, STCLASS="BASED(WINDOW_SPEC$)");
     1683     5536        %F$DCB (DCBN=SRC$DCB, STCLASS="BASED(SRC_DCB$)");
     1684     5593        %VD$BUFFER (NAME=SRC$XSA_DATA, STCLASS="BASED(SRC_XSA_DATA$)");
     1685     5651        %VD$BUFFER (NAME=SRC$XSA_KEY, STCLASS="BASED(SRC_XSA_KEY$)");
     1686     5709        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     1687     5767        %VD$XLATE_LOCATIONS (NAME=CURR$XLATE_TABLE,
     1688     5768            STCLASS="BASED(CURR_XLATE_TABLE$)");
     1689     5904        %VD$KEY_NUMBER (NAME=BKEY, STCLASS=BASED);
     1690     5919        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:238  
     1691     5972        %VD$STREAM;
     1692     6078        %VD$PORT;
     1693     6176        %VD$TEXTC_REMOTE;
     1694     6237        %VD$BUFFER_HEADER;
     1695     6273        %VD$FIT;
     1696     6309        %F$DCB;
     1697     6366
     1698     6367
     1699     6368
     1700     6369    1           SRC_XSA_DATA$ = ADDR(NIL);

   6369  3 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000003   200010 756100                    STQ     SRC_XSA_DATA$,,AUTO

     1701     6370    1           SRC_XSA_KEY$ = ADDR(NIL);

   6370  3 000004   200011 756100                    STQ     SRC_XSA_KEY$,,AUTO

     1702     6371    1           VD_ERR$ = VD_6E.ERR_TAIL$;

   6371  3 000005   000032 236000 xsym               LDQ     VD_6E+26
         3 000006   200012 756100                    STQ     VD_ERR$,,AUTO

     1703     6372    1           HOLE# = 0;

   6372  3 000007   200201 450100                    STZ     HOLE#,,AUTO

     1704     6373    1           IF ADDR(HOLE) ~= ADDR(NIL) THEN HOLE# = HOLE;

   6373  3 000010   200006 236100                    LDQ     @HOLE,,AUTO
         3 000011   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000012   000016 600000 3                  TZE     s:6375

   6373  3 000013   200006 470500                    LDP0    @HOLE,,AUTO
         3 000014   000000 235100                    LDA     0,,PR0
         3 000015   200201 755100                    STA     HOLE#,,AUTO

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:239  
     1705     6374
     1706     6375    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

   6375  3 000016   000027 220000 xsym               LDX0    VD_6E+23
         3 000017   000003 100003                    CMPX0   3,DU
         3 000020   000026 601000 3                  TNZ     s:6380

     1707     6376    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   6376  3 000021   000000 630400 4                  EPPR0   0
         3 000022   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000023   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
         3 000024   000000 011000                    NOP     0

     1708     6377    2              ALTRETURN;

   6377  3 000025   000000 702200 xent               TSX2  ! X66_AALT

     1709     6378    2              END;
     1710     6379
     1711     6380    1           IF SRC_STREAM.PORT$ ~= DEST_STREAM.PORT$

   6380  3 000026   200003 470500                    LDP0    @SRC_STREAM,,AUTO
         3 000027   200004 471500                    LDP1    @DEST_STREAM,,AUTO
         3 000030   000001 236100                    LDQ     1,,PR0
         3 000031   100001 116100                    CMPQ    1,,PR1
         3 000032   000040 601000 3                  TNZ     s:6383
         3 000033   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000034   000040 600000 3                  TZE     s:6383
         3 000035   100001 473500                    LDP3    1,,PR1
         3 000036   300003 721100                    LXL1    3,,PR3
         3 000037   000044 601000 3                  TNZ     s:6387

     1712     6381    1             OR SRC_STREAM.PORT$ = ADDR(NIL)
     1713     6382    2             OR PORT.EXIST# = 0 THEN DO;

     1714     6383    2              CALL VDG$ESCREECH;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:240  

   6383  3 000040   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000041   000000 701000 xent               TSX1    VDG$ESCREECH
         3 000042   000000 011000                    NOP     0

     1715     6384    2              GOTO REKEY_FAILED;

   6384  3 000043   001350 710000 3                  TRA     REKEY_FAILED

     1716     6385    2              END;
     1717     6386
     1718     6387    1           IF DEST_STREAM.PROTECT (%LVL_LOWER) ~= %CLEAR

   6387  3 000044   100002 236100                    LDQ     2,,PR1
         3 000045   036000 316007                    CANQ    15360,DL
         3 000046   000063 601000 3                  TNZ     CANT_REKEY_FILE_FAILURE
         3 000047   300004 234100                    SZN     4,,PR3
         3 000050   000063 604000 3                  TMI     CANT_REKEY_FILE_FAILURE
         3 000051   300004 722100                    LXL2    4,,PR3
         3 000052   000063 600000 3                  TZE     CANT_REKEY_FILE_FAILURE
         3 000053   300032 223100                    LDX3    26,,PR3
         3 000054   000002 103003                    CMPX3   2,DU
         3 000055   000060 600000 3                  TZE     s:6387+12
         3 000056   000001 103003                    CMPX3   1,DU
         3 000057   000063 601000 3                  TNZ     CANT_REKEY_FILE_FAILURE
         3 000060   300032 724100                    LXL4    26,,PR3
         3 000061   000002 104003                    CMPX4   2,DU
         3 000062   000075 601000 3                  TNZ     s:6399

     1719     6388    1             OR PORT.INTRINSIC_PROTECT
     1720     6389    1             OR PORT.DCB# = 0
     1721     6390    1             OR (PORT.LEVEL.ORG# (%LVL_LOWER) ~= %ORG_KEYED
     1722     6391    1             AND PORT.LEVEL.ORG# (%LVL_LOWER) ~= %ORG_CONSEC)
     1723     6392    2             OR PORT.LEVEL.KEY_TYPE# (%LVL_LOWER) = %KT_STRING THEN DO;

   6391  3 000063                       CANT_REKEY_* null
     1724     6393    2   CANT_REKEY_FILE_FAILURE:;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:241  
     1725     6394    2              CALL VDG$ERRMSG (%E$CANT_REKEY_FILE) ALTRET (REKEY_FAILED);

   6394  3 000063   000002 630400 4                  EPPR0   2
         3 000064   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000065   000000 701000 xent               TSX1    VDG$ERRMSG
         3 000066   001350 702000 3                  TSX2    REKEY_FAILED

     1726     6395    2              VD$ERR.DCB# = PORT.DCB#;

   6395  3 000067   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000070   000001 471500                    LDP1    1,,PR0
         3 000071   100004 720100                    LXL0    4,,PR1
         3 000072   000032 473400 xsym               LDP3    VD_6E+26
         3 000073   300004 740100                    STX0    4,,PR3

     1727     6396    2              ALTRETURN;

   6396  3 000074   000000 702200 xent               TSX2  ! X66_AALT

     1728     6397    2              END;
     1729     6398
     1730     6399    1           SRC_DCB = PORT.DCB#;

   6399  3 000075   200016 742100                    STX2    SRC_DCB,,AUTO

     1731     6400    1           SRC_DCB$ = DCBADDR(SRC_DCB);

   6400  3 000076   000003 473400 4                  LDP3    3
         3 000077   300000 474500                    LDP4    0,,PR3
         3 000100   400000 236112                    LDQ     0,X2,PR4
         3 000101   200017 756100                    STQ     SRC_DCB$,,AUTO

     1732     6401
     1733     6402                /* Make sure KEY_INCR increment will fit into key space */
     1734     6403    1           ACTUAL_KEY_INCR = KEY_INCR;

   6403  3 000102   200005 475500                    LDP5    @KEY_INCR,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:242  
         3 000103   000100 100500                    MLR     fill='000'O
         3 000104   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
         3 000105   200177 000010                    ADSC9   ACTUAL_KEY_INCR,,AUTO    cn=0,n=8

     1735     6404    2           IF ACTUAL_KEY_INCR.BYTES# = 0 THEN DO;

   6404  3 000106   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 000107   000032 316000 xsym               CANQ    B_VECTNIL+26
         3 000110   000115 601000 3                  TNZ     s:6408

     1736     6405    2              ACTUAL_KEY_INCR.BYTES# = VD_$BY.V#;

   6405  3 000111   000003 236000 xsym               LDQ     VD_$BY+3
         3 000112   200200 552134                    STBQ    ACTUAL_KEY_INCR+1,'34'O,AUTO

     1737     6406    2              ACTUAL_KEY_INCR.LENGTH# = 3;

   6406  3 000113   003000 236003                    LDQ     1536,DU
         3 000114   200200 552140                    STBQ    ACTUAL_KEY_INCR+1,'40'O,AUTO

     1738     6407    2              END;

     1739     6408    1           IF SRC$DCB.NRECS# > 0 THEN

   6408  3 000115   200017 476500                    LDP6    SRC_DCB$,,AUTO
         3 000116   600042 235100                    LDA     34,,PR6
         3 000117   000143 604400 3                  TMOZ    s:6416

     1740     6409    2           DO WHILE ACTUAL$KEY_INCR.BYTES# >=

   6409  3 000120   000130 710000 3                  TRA     s:6414

     1741     6410    2             %MX_EDITKEY/(SRC$DCB.NRECS#+HOLE#);
     1742     6411    2              ACTUAL$KEY_INCR.BYTES# = ACTUAL$KEY_INCR.BYTES# / 10;

   6411  3 000121   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 000122   000032 376000 xsym               ANQ     B_VECTNIL+26
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:243  
         3 000123   000012 506007                    DIV     10,DL
         3 000124   200200 552134                    STBQ    ACTUAL_KEY_INCR+1,'34'O,AUTO

     1743     6412    2              IF ACTUAL$KEY_INCR.BYTES# = 0 THEN

   6412  3 000125   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 000126   000032 316000 xsym               CANQ    B_VECTNIL+26
         3 000127   000063 600000 3                  TZE     CANT_REKEY_FILE_FAILURE

     1744     6413    2                 GOTO CANT_REKEY_FILE_FAILURE;
     1745     6414    2              END;

   6414  3 000130   200017 470500                    LDP0    SRC_DCB$,,AUTO
         3 000131   000042 236100                    LDQ     34,,PR0
         3 000132   200201 036100                    ADLQ    HOLE#,,AUTO
         3 000133   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 000134   000004 236000 4                  LDQ     4
         3 000135   200216 506100                    DIV     PREV_BUFFER$+2,,AUTO
         3 000136   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000137   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 000140   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 000141   200217 116100                    CMPQ    PREV_BUFFER$+3,,AUTO
         3 000142   000121 605000 3                  TPL     s:6411

     1746     6415
     1747     6416    1           WINDOWS_L0_NODE$ = VD_6E.WINDOWS$ -> VD$STREAM.PORT$ ->

   6416  3 000143   000006 470400 xsym               LDP0    VD_6E+6
         3 000144   000001 471500                    LDP1    1,,PR0
         3 000145   100031 236100                    LDQ     25,,PR1
         3 000146   200013 756100                    STQ     WINDOWS_L0_NODE$,,AUTO

     1748     6417    1             VD$PORT.LEVEL.INTERNAL$ (%LVL_FILE);
     1749     6418    1           L1_NODE$ = WINDOWS$L0_NODE.HEAD$;

   6418  3 000147   200013 473500                    LDP3    WINDOWS_L0_NODE$,,AUTO
         3 000150   300012 236100                    LDQ     10,,PR3
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:244  
         3 000151   200014 756100                    STQ     L1_NODE$,,AUTO

     1750     6419    1   ERASE_WINDOWS:
     1751     6420    2           DO WHILE L1_NODE$ ~= ADDR(NIL);

   6420  3 000152   000202 710000 3     ERASE_WINDO* TRA     s:6430

     1752     6421    2              WINDOW_SPEC$ = L1$NODE.DESC.SPEC.V$;

   6421  3 000153   200014 470500                    LDP0    L1_NODE$,,AUTO
         3 000154   000007 236100                    LDQ     7,,PR0
         3 000155   200015 756100                    STQ     WINDOW_SPEC$,,AUTO

     1753     6422    2              IF WINDOW_SPEC$ ~= ADDR(NIL) THEN

   6422  3 000156   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000157   000177 600000 3                  TZE     s:6429

     1754     6423    2                 IF WINDOW$SPEC.OPERAND.STREAM$ ~= ADDR(NIL) THEN

   6423  3 000160   200015 471500                    LDP1    WINDOW_SPEC$,,AUTO
         3 000161   100010 236100                    LDQ     8,,PR1
         3 000162   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000163   000177 600000 3                  TZE     s:6429

     1755     6424    2                    IF WINDOW$SPEC.OPERAND.STREAM$->VD$STREAM.PORT$ =

   6424  3 000164   100010 473500                    LDP3    8,,PR1
         3 000165   200004 474500                    LDP4    @DEST_STREAM,,AUTO
         3 000166   400001 475500                    LDP5    1,,PR4
         3 000167   200216 455500                    STP5    PREV_BUFFER$+2,,AUTO
         3 000170   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000171   300001 116100                    CMPQ    1,,PR3
         3 000172   000177 601000 3                  TNZ     s:6429

     1756     6425    3                      ADDR(PORT) THEN DO;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:245  
     1757     6426    3                       CALL VDP$WERASE (WINDOW$SPEC)

   6426  3 000173   200015 630500                    EPPR0   WINDOW_SPEC$,,AUTO
         3 000174   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000175   000000 701000 xent               TSX1    VDP$WERASE
         3 000176   001350 702000 3                  TSX2    REKEY_FAILED

     1758     6427    3                         ALTRET (REKEY_FAILED);
     1759     6428    3                       END;

     1760     6429    2              L1_NODE$ = L1$NODE.FLINK$;

   6429  3 000177   200014 470500                    LDP0    L1_NODE$,,AUTO
         3 000200   000002 236100                    LDQ     2,,PR0
         3 000201   200014 756100                    STQ     L1_NODE$,,AUTO

     1761     6430    2              END ERASE_WINDOWS;

   6430  3 000202   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000203   000153 601000 3                  TNZ     s:6421

     1762     6431
     1763     6432                /*
     1764     6433                *   Build the xlate tables containing all current refs to file.
     1765     6434                *   These record keys must be built in ascending order.
     1766     6435                */
     1767     6436    1           CALL VDG$OALLOC (%CLS_XLATE_LOCATIONS, XLATE_LOCATIONS_ROOT$,

   6436  3 000204   000007 236000 4                  LDQ     7
         3 000205   200220 756100                    STQ     PREV_BUFFER$+4,,AUTO
         3 000206   200203 630500                    EPPR0   XLATE_LOCATIONS_ROOT$,,AUTO
         3 000207   200217 450500                    STP0    PREV_BUFFER$+3,,AUTO
         3 000210   000010 236000 4                  LDQ     8
         3 000211   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 000212   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000213   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000214   000000 701000 xent               TSX1    VDG$OALLOC
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:246  
         3 000215   001350 702000 3                  TSX2    REKEY_FAILED

     1768     6437    1             SIZEW(CURR$XLATE_TABLE) +
     1769     6438    1             (SIZEW(CURR$XLATE_TABLE.XLATES) * %N_LOCATION_XLATES))
     1770     6439    1             ALTRET (REKEY_FAILED);
     1771     6440    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;

   6440  3 000216   200203 236100                    LDQ     XLATE_LOCATIONS_ROOT$,,AUTO
         3 000217   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     1772     6441                %COPYKEY (FKEY=PORT.FILE_KEY, TKEY=CURR$XLATE_TABLE.FILE_KEY);

   6454  3 000220   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000221   000001 471500                    LDP1    1,,PR0
         3 000222   200204 473500                    LDP3    CURR_XLATE_TABLE$,,AUTO
         3 000223   000100 100500                    MLR     fill='000'O
         3 000224   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8
         3 000225   300003 000010                    ADSC9   3,,PR3                   cn=0,n=8

   6454  3 000226   000001 471500                    LDP1    1,,PR0
         3 000227   100010 720100                    LXL0    8,,PR1
         3 000230   000002 100003                    CMPX0   2,DU
         3 000231   000244 601000 3                  TNZ     s:6457

   6454  3 000232   100011 474500                    LDP4    9,,PR1
         3 000233   000004 036003                    ADLQ    4,DU
         3 000234   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000235   200216 454500                    STP4    PREV_BUFFER$+2,,AUTO
         3 000236   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000237   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000240   000000 701000 xent               TSX1    VDG$OCOPY
         3 000241   000243 702000 3                  TSX2    s:6455
         3 000242   000244 710000 3                  TRA     s:6457

   6455  3 000243   000000 702200 xent               TSX2  ! X66_AALT

     1773     6457    1           CURR$XLATE_TABLE.LEVEL# = %LVL_EXT_REC;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:247  

   6457  3 000244   000001 220003                    LDX0    1,DU
         3 000245   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 000246   000005 740100                    STX0    5,,PR0

     1774     6458
     1775     6459    1           CALL VDG$XLATE_LOCATIONS (CURR$XLATE_TABLE, %XLATE_BUILD)

   6459  3 000247   000011 236000 4                  LDQ     9
         3 000250   200204 235100                    LDA     CURR_XLATE_TABLE$,,AUTO
         3 000251   200216 757100                    STAQ    PREV_BUFFER$+2,,AUTO
         3 000252   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000253   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000254   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         3 000255   001350 702000 3                  TSX2    REKEY_FAILED

     1776     6460    1             ALTRET (REKEY_FAILED);
     1777     6461
     1778     6462
     1779     6463    1           CALL VDA$PFLUSH (PORT)

   6463  3 000256   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000257   000001 471500                    LDP1    1,,PR0
         3 000260   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 000261   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000262   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000263   000000 701000 xent               TSX1    VDA$PFLUSH
         3 000264   001350 702000 3                  TSX2    REKEY_FAILED

     1780     6464    1             ALTRET (REKEY_FAILED);
     1781     6465                /*
     1782     6466                *   Clear the Port's level registers:  we'll be switching it to a
     1783     6467                *       different DCB.
     1784     6468                */
     1785     6469                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX="%LVL_LOWER-1");

   6476  3 000265   200004 470500                    LDP0    @DEST_STREAM,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:248  
         3 000266   000001 471500                    LDP1    1,,PR0
         3 000267   100025 720100                    LXL0    21,,PR1
         3 000270   000002 100003                    CMPX0   2,DU
         3 000271   000302 601000 3                  TNZ     s:6477+1

   6476  3 000272   100026 473500                    LDP3    22,,PR1
         3 000273   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 000274   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000275   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000276   000000 701000 xent               TSX1    VDG$OFREE
         3 000277   000301 702000 3                  TSX2    s:6477
         3 000300   000302 710000 3                  TRA     s:6477+1

   6477  3 000301   000000 702200 xent               TSX2  ! X66_AALT

   6477  3 000302   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000303   000001 471500                    LDP1    1,,PR0
         3 000304   100025 450100                    STZ     21,,PR1
         3 000305   100026 450100                    STZ     22,,PR1

     1786     6479    2           IF PORT.LEVEL.DATA$ (%LVL_LOWER-1) ~= ADDR(NIL) THEN DO;

   6479  3 000306   000001 471500                    LDP1    1,,PR0
         3 000307   100027 236100                    LDQ     23,,PR1
         3 000310   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000311   000324 600000 3                  TZE     s:6485

     1787     6480    2              CALL VDG$OFREE (PORT.LEVEL.DATA$ (%LVL_LOWER-1) -> VD$BUFFER)

   6480  3 000312   100027 473500                    LDP3    23,,PR1
         3 000313   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 000314   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000316   000000 701000 xent               TSX1    VDG$OFREE
         3 000317   001350 702000 3                  TSX2    REKEY_FAILED

     1788     6481    2                ALTRET (REKEY_FAILED);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:249  
     1789     6482    2              PORT.LEVEL.DATA$ (%LVL_LOWER-1) = ADDR(NIL);

   6482  3 000320   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000321   000001 471500                    LDP1    1,,PR0
         3 000322   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000323   100027 756100                    STQ     23,,PR1

     1790     6483    2              END;

     1791     6484
     1792     6485    1           FPT_CLOSE = CONST_FPT_CLOSE;

   6485  3 000324   000100 100400                    MLR     fill='000'O
         3 000325   000110 000170 1                  ADSC9   CONST_FPT_CLOSE          cn=0,n=120
         3 000326   200020 000170                    ADSC9   FPT_CLOSE,,AUTO          cn=0,n=120

     1793     6486    1           FPT_CLOSE.V_ = VECTOR(FPT_CLOSE.V);

   6486  3 000327   000012 235000 4                  LDA     10
         3 000330   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000331   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000332   000052 036003                    ADLQ    42,DU
         3 000333   200020 757100                    STAQ    FPT_CLOSE,,AUTO

     1794     6487    1           FPT_CLOSE.V.DCB# = SRC_DCB;

   6487  3 000334   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 000335   200052 740100                    STX0    FPT_CLOSE+26,,AUTO

     1795     6488    1           IF VD_$$MON_ACC.V# > 10 THEN

   6488  3 000336   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000337   000012 115007                    CMPA    10,DL
         3 000340   000347 604400 3                  TMOZ    s:6490

     1796     6489    1              CALL VDG$MACC_FREKEY_CLOSE_ORIG (FPT_CLOSE.V.DCB#);

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:250  
   6489  3 000341   200052 631500                    EPPR1   FPT_CLOSE+26,,AUTO
         3 000342   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 000343   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000344   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000345   000000 701000 xent               TSX1    VDG$MACC_FREKEY_CLOSE_ORIG
         3 000346   000000 011000                    NOP     0

     1797     6490    1           CALL M$CLOSE (FPT_CLOSE)

   6490  3 000347   200020 630500                    EPPR0   FPT_CLOSE,,AUTO
         3 000350   450001 713400                    CLIMB   alt,close
         3 000351   406000 401760                    pmme    nvectors=13
         3 000352   001345 702000 3                  TSX2    CLOSE_SRC_FAILED

     1798     6491    1             ALTRET (CLOSE_SRC_FAILED);
     1799     6492
     1800     6493    1           FPT_OPEN = CONST_FPT_OPEN;

   6493  3 000353   000100 100400                    MLR     fill='000'O
         3 000354   000000 000350 1                  ADSC9   CONST_FPT_OPEN           cn=0,n=232
         3 000355   200056 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

     1801     6494    1           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);

   6494  3 000356   000013 235000 4                  LDA     11
         3 000357   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000360   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000361   000122 036003                    ADLQ    82,DU
         3 000362   200056 757100                    STAQ    FPT_OPEN,,AUTO

     1802     6495    1           FPT_OPEN.V.ACS# = %SEQUEN#;

   6495  3 000363   000001 236007                    LDQ     1,DL
         3 000364   200124 552104                    STBQ    FPT_OPEN+38,'04'O,AUTO

     1803     6496    1           FPT_OPEN.V.DCB# = SRC_DCB;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:251  
   6496  3 000365   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 000366   200122 740100                    STX0    FPT_OPEN+36,,AUTO

     1804     6497    1           FPT_OPEN.V.FUN# = %IN#;

   6497  3 000367   002000 236007                    LDQ     1024,DL
         3 000370   200123 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     1805     6498    1           CALL XSA$OPEN (FPT_OPEN, SRC_XSA)

   6498  3 000371   000014 236000 4                  LDQ     12
         3 000372   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000373   200056 630500                    EPPR0   FPT_OPEN,,AUTO
         3 000374   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 000375   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000376   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000377   000000 701000 xent               TSX1    XSA$OPEN
         3 000400   001351 702000 3                  TSX2    OPEN_SRC_XSA_FAILED

     1806     6499    1             ALTRET (OPEN_SRC_XSA_FAILED);
     1807     6500    1           IF VD_$$MON_ACC.V# > 10 THEN

   6500  3 000401   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000402   000012 115007                    CMPA    10,DL
         3 000403   000414 604400 3                  TMOZ    s:6502

     1808     6501    1              CALL VDG$MACC_FREKEY_OPEN_SRC_XSA (FPT_OPEN.V.DCB#, SRC_XSA.ORG);

   6501  3 000404   000015 236000 4                  LDQ     13
         3 000405   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000406   200122 630500                    EPPR0   FPT_OPEN+36,,AUTO
         3 000407   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 000410   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000411   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000412   000000 701000 xent               TSX1    VDG$MACC_FREKEY_OPEN_SRC_XSA
         3 000413   000000 011000                    NOP     0

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:252  
     1809     6502    2           IF SRC_XSA.ORG ~= 0 THEN DO;

   6502  3 000414   000014 236000 2                  LDQ     SRC_XSA+12
         3 000415   000777 316003                    CANQ    511,DU
         3 000416   000465 600000 3                  TZE     s:6521

     1810     6503                   /* Allocate data-granule buffer */
     1811     6504    2              CALL VDG$OALLOC (%CLS_BUFFER, SRC_XSA_DATA$,

   6504  3 000417   000017 236000 4                  LDQ     15
         3 000420   200220 756100                    STQ     PREV_BUFFER$+4,,AUTO
         3 000421   200010 630500                    EPPR0   SRC_XSA_DATA$,,AUTO
         3 000422   200217 450500                    STP0    PREV_BUFFER$+3,,AUTO
         3 000423   000020 236000 4                  LDQ     16
         3 000424   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 000425   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000426   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000427   000000 701000 xent               TSX1    VDG$OALLOC
         3 000430   001350 702000 3                  TSX2    REKEY_FAILED

     1812     6505    2                SIZEW(VD$BUFFER_HEADER) + %NW_FSA_DATA_BUFFER)
     1813     6506    2                ALTRET (REKEY_FAILED);
     1814     6507    2              SRC_XSA.BBUF_.BUF$ = PALIGNW(ADDR(SRC$XSA_DATA.BYTES));

   6507  3 000431   200010 236100                    LDQ     SRC_XSA_DATA$,,AUTO
         3 000432   000021 036000 4                  ADLQ    17
         3 000433   770000 036007                    ADLQ    -4096,DL
         3 000434   000022 376000 4                  ANQ     18
         3 000435   000005 756000 2                  STQ     SRC_XSA+5

     1815     6508    2              SRC_XSA.BBUF_.BOUND = (%NW_FSA_DATA_BUFFER *

   6508  3 000436   000004 236000 2                  LDQ     SRC_XSA+4
         3 000437   177777 376007                    ANQ     65535,DL
         3 000440   000023 276000 4                  ORQ     19
         3 000441   000004 756000 2                  STQ     SRC_XSA+4

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:253  
     1816     6509    2                %NB_PER_WORD) - 1;
     1817     6510                   /* Allocate key-granule buffer */
     1818     6511    2              CALL VDG$OALLOC (%CLS_BUFFER, SRC_XSA_KEY$,

   6511  3 000442   000017 236000 4                  LDQ     15
         3 000443   200220 756100                    STQ     PREV_BUFFER$+4,,AUTO
         3 000444   200011 630500                    EPPR0   SRC_XSA_KEY$,,AUTO
         3 000445   200217 450500                    STP0    PREV_BUFFER$+3,,AUTO
         3 000446   000020 236000 4                  LDQ     16
         3 000447   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 000450   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000451   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000452   000000 701000 xent               TSX1    VDG$OALLOC
         3 000453   001350 702000 3                  TSX2    REKEY_FAILED

     1819     6512    2                SIZEW(VD$BUFFER_HEADER) + %NW_FSA_KEY_BUFFER)
     1820     6513    2                ALTRET (REKEY_FAILED);
     1821     6514    2              SRC_XSA.KBUF_.BUF$ = PALIGNW(ADDR(SRC$XSA_KEY.BYTES));

   6514  3 000454   200011 236100                    LDQ     SRC_XSA_KEY$,,AUTO
         3 000455   000021 036000 4                  ADLQ    17
         3 000456   770000 036007                    ADLQ    -4096,DL
         3 000457   000022 376000 4                  ANQ     18
         3 000460   000003 756000 2                  STQ     SRC_XSA+3

     1822     6515    2              SRC_XSA.KBUF_.BOUND = (%NW_FSA_KEY_BUFFER *

   6515  3 000461   000002 236000 2                  LDQ     SRC_XSA+2
         3 000462   177777 376007                    ANQ     65535,DL
         3 000463   000023 276000 4                  ORQ     19
         3 000464   000002 756000 2                  STQ     SRC_XSA+2

     1823     6516    2                %NB_PER_WORD) - 1;
     1824     6517    2              END;

     1825     6518
     1826     6519
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:254  
     1827     6520                /* Switch port to destination DCB */
     1828     6521    1           CALL VDG$OALLOC_DCB (PORT.DCB#)

   6521  3 000465   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000466   000001 471500                    LDP1    1,,PR0
         3 000467   200217 451500                    STP1    PREV_BUFFER$+3,,AUTO
         3 000470   200217 236100                    LDQ     PREV_BUFFER$+3,,AUTO
         3 000471   000024 036000 4                  ADLQ    20
         3 000472   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 000473   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000474   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000475   000000 701000 xent               TSX1    VDG$OALLOC_DCB
         3 000476   001350 702000 3                  TSX2    REKEY_FAILED

     1829     6522    1             ALTRET (REKEY_FAILED);
     1830     6523
     1831     6524
     1832     6525        /*      Remember to change the ORG# in the PORT block to
     1833     6526                the ORG of the destination DCB when we switch the port. */
     1834     6527
     1835     6528    1           PORT.LEVEL.ORG# (%LVL_EXT_REC) = %ORG_KEYED;

   6528  3 000477   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000500   000001 471500                    LDP1    1,,PR0
         3 000501   000002 220003                    LDX0    2,DU
         3 000502   100032 740100                    STX0    26,,PR1

     1836     6529    1           PORT.LEVEL.KEY_TYPE# (%LVL_EXT_REC) = %KT_EDITKEY;

   6529  3 000503   000001 471500                    LDP1    1,,PR0
         3 000504   000003 221003                    LDX1    3,DU
         3 000505   100032 441100                    SXL1    26,,PR1

     1837     6530
     1838     6531        /*****************************************************************************
     1839     6532        *                                                                            *
     1840     6533        *                               !! WARNING !!                                *
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:255  
     1841     6534        *              Any errors from here on must GOTO ABORT_REKEY.                *
     1842     6535        *                                                                            *
     1843     6536        *                                                                            */
     1844     6537
     1845     6538    1           FPT_OPEN.V.INITZ.SCRUB# = %YES#;

   6538  3 000506   400000 236007                    LDQ     -131072,DL
         3 000507   200122 256100                    ORSQ    FPT_OPEN+36,,AUTO

     1846     6539    1           FPT_OPEN.V.ACS# = %DIRECT#;

   6539  3 000510   000002 236007                    LDQ     2,DL
         3 000511   200124 552104                    STBQ    FPT_OPEN+38,'04'O,AUTO

     1847     6540    1           FPT_OPEN.V.DCB# = PORT.DCB#;

   6540  3 000512   000001 471500                    LDP1    1,,PR0
         3 000513   100004 722100                    LXL2    4,,PR1
         3 000514   200122 742100                    STX2    FPT_OPEN+36,,AUTO

     1848     6541    1           FPT_OPEN.V.FUN# = %CREATE#;

   6541  3 000515   003000 236007                    LDQ     1536,DL
         3 000516   200123 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     1849     6542    1           FPT_OPEN.ACCT_ = VECTOR(SRC$DCB.ACCT#);

   6542  3 000517   000025 235000 4                  LDA     21
         3 000520   200017 236100                    LDQ     SRC_DCB$,,AUTO
         3 000521   000020 036003                    ADLQ    16,DU
         3 000522   200102 757100                    STAQ    FPT_OPEN+20,,AUTO

     1850     6543    1           FPT_OPEN.NAME_ = VECTOR(SRC$DCB.NAME#);

   6543  3 000523   000026 235000 4                  LDA     22
         3 000524   200017 236100                    LDQ     SRC_DCB$,,AUTO
         3 000525   000010 036003                    ADLQ    8,DU
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:256  
         3 000526   200064 757100                    STAQ    FPT_OPEN+6,,AUTO

     1851     6544    1           VLP_SN.NUM# = 1;

   6544  3 000527   000001 235007                    LDA     1,DL
         3 000530   200150 755100                    STA     VLP_SN,,AUTO

     1852     6545    1           VLP_SN.SN#(0) = SRC$DCB.PSN#;

   6545  3 000531   200017 471500                    LDP1    SRC_DCB$,,AUTO
         3 000532   040100 100500                    MLR     fill='040'O
         3 000533   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6
         3 000534   200151 000006                    ADSC9   VLP_SN+1,,AUTO           cn=0,n=6

     1853     6546    1           FPT_OPEN.SN_ = VECTOR(VLP_SN);

   6546  3 000535   000012 235000 4                  LDA     10
         3 000536   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000537   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000540   000150 036003                    ADLQ    104,DU
         3 000541   200060 757100                    STAQ    FPT_OPEN+2,,AUTO

     1854     6547    1           FPT_OPEN.IFPARAM_ = VECTOR(PORT.FIT$->VD$FIT.FIT);

   6547  3 000542   000001 473500                    LDP3    1,,PR0
         3 000543   300005 474500                    LDP4    5,,PR3
         3 000544   000027 235000 4                  LDA     23
         3 000545   200216 454500                    STP4    PREV_BUFFER$+2,,AUTO
         3 000546   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000547   000003 036003                    ADLQ    3,DU
         3 000550   200104 757100                    STAQ    FPT_OPEN+22,,AUTO

     1855     6548    1           IF VD_$$MON_ACC.V# > 10 THEN

   6548  3 000551   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000552   000012 115007                    CMPA    10,DL
         3 000553   000570 604400 3                  TMOZ    s:6551
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:257  

     1856     6549    1              CALL VDG$MACC_FREKEY_OPEN_DEST (FPT_OPEN.V.DCB#,

   6549  3 000554   200017 236100                    LDQ     SRC_DCB$,,AUTO
         3 000555   000020 036003                    ADLQ    16,DU
         3 000556   200220 756100                    STQ     PREV_BUFFER$+4,,AUTO
         3 000557   200017 236100                    LDQ     SRC_DCB$,,AUTO
         3 000560   000010 036003                    ADLQ    8,DU
         3 000561   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000562   200122 633500                    EPPR3   FPT_OPEN+36,,AUTO
         3 000563   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 000564   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000565   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000566   000000 701000 xent               TSX1    VDG$MACC_FREKEY_OPEN_DEST
         3 000567   000000 011000                    NOP     0

     1857     6550    1                SRC$DCB.NAME#, SRC$DCB.ACCT#);
     1858     6551    1           CALL M$OPEN (FPT_OPEN)

   6551  3 000570   200056 630500                    EPPR0   FPT_OPEN,,AUTO
         3 000571   450000 713400                    CLIMB   alt,open
         3 000572   410400 401760                    pmme    nvectors=18
         3 000573   000575 702000 3                  TSX2    s:6553
         3 000574   000601 710000 3                  TRA     s:6556

     1859     6552    2           WHENALTRETURN DO;

     1860     6553    2              CALL VDG$MONERR;

   6553  3 000575   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000576   000000 701000 xent               TSX1    VDG$MONERR
         3 000577   000000 011000                    NOP     0

     1861     6554    2              GOTO ABORT_REKEY;

   6554  3 000600   001365 710000 3                  TRA     ABORT_REKEY

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:258  
     1862     6555    2              END;
     1863     6556    1           PORT.LAST_OP# = %ACCOP_OPEN;

   6556  3 000601   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000602   000001 471500                    LDP1    1,,PR0
         3 000603   000001 220003                    LDX0    1,DU
         3 000604   100007 740100                    STX0    7,,PR1

     1864     6557
     1865     6558                %BOX (TITLE="Copy records to new DCB");

              6570    1   /***************************************************************************
              6572    1    *                                                                         *
              6576    1            *                          Copy records to new DCB                       *
              6578    1            *                                                                        *
              6580    1          ***************************************************************************/

     1866     6584
     1867     6585    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;

   6585  3 000605   200203 236100                    LDQ     XLATE_LOCATIONS_ROOT$,,AUTO
         3 000606   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     1868     6586    1           CURR_XLATE = 0;

   6586  3 000607   200205 450100                    STZ     CURR_XLATE,,AUTO

     1869     6587    1           IF ADDR(CURR$XLATE_TABLE.XLATES.OLD_KEY_LO(CURR_XLATE))->BKEY.BYTES# =

   6587  3 000610   200205 235100                    LDA     CURR_XLATE,,AUTO
         3 000611   000003 735000                    ALS     3
         3 000612   200204 471500                    LDP1    CURR_XLATE_TABLE$,,AUTO
         3 000613   100020 236105                    LDQ     16,AL,PR1
         3 000614   000001 676000 xsym               ERQ     VD_KEY_NUMERIC_BOF+1
         3 000615   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 000616   000624 601000 3                  TNZ     s:6594

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:259  
     1870     6588    2             VD_KEY_NUMERIC_BOF.BYTES# THEN DO;

     1871     6589                   /* "Virtual" BOF key is always xlated to itself */
     1872     6590    2              CURR$XLATE_TABLE.XLATES.NEW_KEY (CURR_XLATE) = VD_KEY_NUMERIC_BOF;

   6590  3 000617   000002 735000                    ALS     2
         3 000620   000105 100400                    MLR     fill='000'O
         3 000621   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         3 000622   100024 000010                    ADSC9   20,A,PR1                 cn=0,n=8

     1873     6591    2              CURR_XLATE = CURR_XLATE + 1;

   6591  3 000623   200205 054100                    AOS     CURR_XLATE,,AUTO

     1874     6592    2              END;

     1875     6593
     1876     6594    1           FPT_READ = CONST_FPT_READ;

   6594  3 000624   000100 100400                    MLR     fill='000'O
         3 000625   000072 000070 1                  ADSC9   CONST_FPT_READ           cn=0,n=56
         3 000626   200154 000070                    ADSC9   FPT_READ,,AUTO           cn=0,n=56

     1877     6595    1           FPT_READ.V_ = VECTOR(FPT_READ.V);

   6595  3 000627   000030 235000 4                  LDA     24
         3 000630   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000631   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000632   000164 036003                    ADLQ    116,DU
         3 000633   200154 757100                    STAQ    FPT_READ,,AUTO

     1878     6596    1           FPT_READ.KEY_ = VECTOR(READ_KEY);

   6596  3 000634   777640 235007                    LDA     -96,DL
         3 000635   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000636   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000637   000172 036003                    ADLQ    122,DU
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:260  
         3 000640   200156 757100                    STAQ    FPT_READ+2,,AUTO

     1879     6597    1           FPT_READ.V.DCB# = SRC_DCB;

   6597  3 000641   200016 221100                    LDX1    SRC_DCB,,AUTO
         3 000642   200164 741100                    STX1    FPT_READ+8,,AUTO

     1880     6598    1           SPEC = %CLEAR;

   6598  3 000643   000000 235003                    LDA     0,DU
         3 000644   000000 236003                    LDQ     0,DU
         3 000645   200174 757100                    STAQ    SPEC,,AUTO

     1881     6599    1           SPEC.TYPE# = %SPT_EXT_RECORD;

   6599  3 000646   200174 740100                    STX0    SPEC,,AUTO

     1882     6600    1           SPEC.REP# = %REP_LOCAL;

   6600  3 000647   200174 440100                    SXL0    SPEC,,AUTO

     1883     6601    1           SPEC.LENGTH# = 1;   /* DVBYTE is 1 character */

   6601  3 000650   001000 236003                    LDQ     512,DU
         3 000651   200175 552140                    STBQ    SPEC+1,'40'O,AUTO

     1884     6602    1           CALL READ_SRC_RECORD (VD_BUFFER$, SPEC.BYTES, EOF)

   6602  3 000652   200176 633500                    EPPR3   EOF,,AUTO
         3 000653   200211 453500                    STP3    @DVBYTE+1,,AUTO
         3 000654   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 000655   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 000656   000031 036000 4                  ADLQ    25
         3 000657   200210 756100                    STQ     @VD_BUFFER$+1,,AUTO
         3 000660   200173 634500                    EPPR4   VD_BUFFER$,,AUTO
         3 000661   200207 454500                    STP4    CURR_XLATE+2,,AUTO
         3 000662   001546 701000 3                  TSX1    READ_SRC_RECORD
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:261  
         3 000663   001365 702000 3                  TSX2    ABORT_REKEY

     1885     6603    1             ALTRET (ABORT_REKEY);
     1886     6604
     1887     6605    1           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)

   6605  3 000664   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000665   000001 471500                    LDP1    1,,PR0
         3 000666   100012 633500                    EPPR3   10,,PR1
         3 000667   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 000670   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000671   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000672   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         3 000673   001365 702000 3                  TSX2    ABORT_REKEY

     1888     6606    1             ALTRET (ABORT_REKEY);
     1889     6607    1           PORT.CURRENT.KEY(%LVL_EXT_REC-1) = ACTUAL_KEY_INCR;

   6607  3 000674   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000675   000001 471500                    LDP1    1,,PR0
         3 000676   000100 100500                    MLR     fill='000'O
         3 000677   200177 000010                    ADSC9   ACTUAL_KEY_INCR,,AUTO    cn=0,n=8
         3 000700   100012 000010                    ADSC9   10,,PR1                  cn=0,n=8

     1890     6608
     1891     6609    1   COPY_RECORDS:
     1892     6610    2           DO WHILE NOT EOF;

   6610  3 000701   001072 710000 3     COPY_RECORDS TRA     s:6668

     1893     6611    3              IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

   6611  3 000702   000027 220000 xsym               LDX0    VD_6E+23
         3 000703   000003 100003                    CMPX0   3,DU
         3 000704   000712 601000 3                  TNZ     s:6615

     1894     6612    3                 CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:262  

   6612  3 000705   000000 630400 4                  EPPR0   0
         3 000706   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000707   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
         3 000710   000000 011000                    NOP     0

     1895     6613    3                 GOTO ABORT_REKEY;

   6613  3 000711   001365 710000 3                  TRA     ABORT_REKEY

     1896     6614    3                 END;
     1897     6615    2              IF VD_$$MON_ACC.V# > 10 THEN

   6615  3 000712   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 000713   000012 115007                    CMPA    10,DL
         3 000714   000726 604400 3                  TMOZ    s:6617

     1898     6616    2                 CALL VDG$MACC_FREKEY_PWRITE (PORT, VD$BUFFER);

   6616  3 000715   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000716   000001 471500                    LDP1    1,,PR0
         3 000717   200173 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000720   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000721   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 000722   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000723   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000724   000000 701000 xent               TSX1    VDG$MACC_FREKEY_PWRITE
         3 000725   000000 011000                    NOP     0

     1899     6617    2              CALL VDA$PWRITE (PORT, %LVL_EXT_REC, , VD$BUFFER)

   6617  3 000726   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 000727   000001 471500                    LDP1    1,,PR0
         3 000730   200173 236100                    LDQ     VD_BUFFER$,,AUTO
         3 000731   000001 235000 xsym               LDA     B_VECTNIL+1
         3 000732   200220 757100                    STAQ    PREV_BUFFER$+4,,AUTO
         3 000733   000011 236000 4                  LDQ     9
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:263  
         3 000734   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000735   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 000736   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000737   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000740   000000 701000 xent               TSX1    VDA$PWRITE
         3 000741   000743 702000 3                  TSX2    s:6619
         3 000742   000750 710000 3                  TRA     s:6634

     1900     6618    3              WHENALTRETURN DO;

     1901     6619    3                 CALL VDG$OFREE (VD$BUFFER);   /* Ignore altreturn */

   6619  3 000743   200173 630500                    EPPR0   VD_BUFFER$,,AUTO
         3 000744   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000745   000000 701000 xent               TSX1    VDG$OFREE
         3 000746   000000 011000                    NOP     0

     1902     6620    3                 GOTO ABORT_REKEY;

   6620  3 000747   001365 710000 3                  TRA     ABORT_REKEY

     1903     6621    3                 END;
     1904     6622                   /*
     1905     6623                   *   When we copy a record to the new (=Port's) file, VDA$PWRITE
     1906     6624                   *       will compare what we write with what's already in the
     1907     6625                   *       Port's registers; if the Port currently holds the first
     1908     6626                   *       record of the file, VDA$PWRITE will find the record we're
     1909     6627                   *       writing equal to the record in the Port and will basically
     1910     6628                   *       ignore the write (won't set .x_MODIFIED).
     1911     6629                   *   So, we set the _MODIFIED bit here, to force VDA$PFLUSH to write
     1912     6630                   *       the record out to the file.
     1913     6631                   *   Test case for this:  BO CURR<CR> REKEY<CR> loses first record in
     1914     6632                   *       file.
     1915     6633                   */
     1916     6634    2              PORT.LEVEL.DATA_MODIFIED (%LVL_EXT_REC) = %TRUE;

   6634  3 000750   200004 470500                    LDP0    @DEST_STREAM,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:264  
         3 000751   000001 471500                    LDP1    1,,PR0
         3 000752   200000 236003                    LDQ     65536,DU
         3 000753   100037 256100                    ORSQ    31,,PR1

     1917     6635    2              CALL VDA$PFLUSH (PORT, %TO_PRESENTER)

   6635  3 000754   000001 471500                    LDP1    1,,PR0
         3 000755   000032 236000 4                  LDQ     26
         3 000756   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 000757   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 000760   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 000761   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000762   000000 701000 xent               TSX1    VDA$PFLUSH
         3 000763   001365 702000 3                  TSX2    ABORT_REKEY

     1918     6636    2                ALTRET (ABORT_REKEY);
     1919     6637
     1920     6638                   /*
     1921     6639                   *   Search CURR$XLATE_TABLE forward from CURR_XLATE, looking for
     1922     6640                   *       READ_KEY or (one entry shy of) the next higher key.  For each
     1923     6641                   *       xlate entry found, store PORT$KEY.BYTES# in the entry.
     1924     6642                   */
     1925     6643    2   SCAN_XLATE_TABLES:
     1926     6644    3              DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);

   6644  3 000764   001022 710000 3     SCAN_XLATE_* TRA     s:6655

     1927     6645    4                 DO WHILE CURR_XLATE < CURR$XLATE_TABLE.N_ENTRIES#;

   6645  3 000765   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 000766   000001 236100                    LDQ     1,,PR0
         3 000767   000022 732000                    QRS     18
         3 000770   200205 116100                    CMPQ    CURR_XLATE,,AUTO
         3 000771   001017 604400 3                  TMOZ    s:6653

     1928     6646    4                    IF ADDR(CURR$XLATE_TABLE.XLATES.OLD_KEY_LO(CURR_XLATE)) ->

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:265  
   6646  3 000772   200205 235100                    LDA     CURR_XLATE,,AUTO
         3 000773   000003 735000                    ALS     3
         3 000774   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 000775   000020 236105                    LDQ     16,AL,PR0
         3 000776   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 000777   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001000   200172 236100                    LDQ     READ_KEY,,AUTO
         3 001001   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 001002   200216 116100                    CMPQ    PREV_BUFFER$+2,,AUTO
         3 001003   001025 604000 3                  TMI     s:6658

     1929     6647    4                      BKEY.BYTES# > READ_KEY.BYTES# THEN
     1930     6648    4                       EXIT SCAN_XLATE_TABLES;    /* Done til next record */
     1931     6649    4                    CURR$XLATE_TABLE.XLATES.NEW_KEY(CURR_XLATE) =

   6649  3 001004   200004 471500                    LDP1    @DEST_STREAM,,AUTO
         3 001005   100001 473500                    LDP3    1,,PR1
         3 001006   000002 735000                    ALS     2
         3 001007   000105 100500                    MLR     fill='000'O
         3 001010   300012 000010                    ADSC9   10,,PR3                  cn=0,n=8
         3 001011   000024 000010                    ADSC9   20,A,PR0                 cn=0,n=8

     1932     6650    4                      PORT.CURRENT.KEY(%LVL_EXT_REC-1);
     1933     6651    4                    CURR_XLATE = CURR_XLATE + 1;

   6651  3 001012   200205 054100                    AOS     CURR_XLATE,,AUTO

     1934     6652    4                    END;

   6652  3 001013   000001 236100                    LDQ     1,,PR0
         3 001014   000022 732000                    QRS     18
         3 001015   200205 116100                    CMPQ    CURR_XLATE,,AUTO
         3 001016   000772 605400 3                  TPNZ    s:6646

     1935     6653    3                 CURR_XLATE_TABLE$ = CURR$XLATE_TABLE.FLINK$;

   6653  3 001017   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:266  
         3 001020   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     1936     6654    3                 CURR_XLATE = 0;

   6654  3 001021   200205 450100                    STZ     CURR_XLATE,,AUTO

     1937     6655    3                 END SCAN_XLATE_TABLES;

   6655  3 001022   200204 236100                    LDQ     CURR_XLATE_TABLE$,,AUTO
         3 001023   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001024   000765 601000 3                  TNZ     s:6645

     1938     6656
     1939     6657                   /* Bump to the next key for the destination file */
     1940     6658    2              ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# =

   6658  3 001025   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001026   000001 471500                    LDP1    1,,PR0
         3 001027   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 001030   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 001031   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001032   100013 236100                    LDQ     11,,PR1
         3 001033   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 001034   200216 036100                    ADLQ    PREV_BUFFER$+2,,AUTO
         3 001035   100013 552134                    STBQ    11,'34'O,PR1

     1941     6659    2                ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# +
     1942     6660    2                ACTUAL$KEY_INCR.BYTES#;
     1943     6661    2              IF HOLE# ~= 0 THEN IF HOLE_KEY.BYTES# = READ_KEY.BYTES# THEN

   6661  3 001036   200201 235100                    LDA     HOLE#,,AUTO
         3 001037   001060 600000 3                  TZE     s:6666

   6661  3 001040   200007 471500                    LDP1    @HOLE_KEY,,AUTO
         3 001041   100001 236100                    LDQ     1,,PR1
         3 001042   200172 676100                    ERQ     READ_KEY,,AUTO
         3 001043   000032 376000 xsym               ANQ     B_VECTNIL+26
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:267  
         3 001044   001060 601000 3                  TNZ     s:6666

     1944     6662    2                    ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# =

   6662  3 001045   000001 473500                    LDP3    1,,PR0
         3 001046   200200 236100                    LDQ     ACTUAL_KEY_INCR+1,,AUTO
         3 001047   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 001050   200201 402100                    MPY     HOLE#,,AUTO
         3 001051   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001052   300013 236100                    LDQ     11,,PR3
         3 001053   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 001054   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 001055   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 001056   200217 036100                    ADLQ    PREV_BUFFER$+3,,AUTO
         3 001057   300013 552134                    STBQ    11,'34'O,PR3

     1945     6663    2                      ADDR(PORT.CURRENT.KEY(%LVL_EXT_REC-1))->BKEY.BYTES# +
     1946     6664    2                      HOLE# * ACTUAL$KEY_INCR.BYTES#;
     1947     6665
     1948     6666    2              CALL READ_SRC_RECORD (VD_BUFFER$, SPEC.BYTES, EOF)

   6666  3 001060   200176 631500                    EPPR1   EOF,,AUTO
         3 001061   200211 451500                    STP1    @DVBYTE+1,,AUTO
         3 001062   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 001063   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 001064   000031 036000 4                  ADLQ    25
         3 001065   200210 756100                    STQ     @VD_BUFFER$+1,,AUTO
         3 001066   200173 633500                    EPPR3   VD_BUFFER$,,AUTO
         3 001067   200207 453500                    STP3    CURR_XLATE+2,,AUTO
         3 001070   001546 701000 3                  TSX1    READ_SRC_RECORD
         3 001071   001365 702000 3                  TSX2    ABORT_REKEY

     1949     6667    2                ALTRET (ABORT_REKEY);
     1950     6668    2              END COPY_RECORDS;

   6668  3 001072   200176 234100                    SZN     EOF,,AUTO
         3 001073   000702 605000 3                  TPL     s:6611
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:268  

     1951     6669
     1952     6670
     1953     6671                /*
     1954     6672                *  From here on, the entire file has been copied to the destination
     1955     6673                *       DCB; the rekeyed version of the file is safe.
     1956     6674                *  Therefore, any errors from here on shouldn't abort the rekey, but
     1957     6675                *       they shouldn't just altreturn either.  Instead, they should
     1958     6676                *       remember the fact that we saw an error (so we can ALTRETURN
     1959     6677                *       at the end), but continue processing--to close all the DCBs,
     1960     6678                *       clean up the Port and the DCBs, etc.
     1961     6679                */
     1962     6680
     1963     6681                /*
     1964     6682                *   Search CURR$XLATE_TABLE forward from CURR_XLATE til the end of the
     1965     6683                *       last table.  For each of these xlate entries, store
     1966     6684                *       PORT$KEY.BYTES# in the entry.  These are keys beyond the end of
     1967     6685                *       the file; PORT$KEY.BYTES# is one increment beyond the end of
     1968     6686                *       the newly-rekeyed file.
     1969     6687                */
     1970     6688    1   FINISH_XLATE_TABLES:
     1971     6689    2           DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);

   6689  3 001074   001124 710000 3     FINISH_XLAT* TRA     s:6697

     1972     6690    3              DO WHILE CURR_XLATE < CURR$XLATE_TABLE.N_ENTRIES#;

   6690  3 001075   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 001076   000001 236100                    LDQ     1,,PR0
         3 001077   000022 732000                    QRS     18
         3 001100   200205 116100                    CMPQ    CURR_XLATE,,AUTO
         3 001101   001120 604400 3                  TMOZ    s:6695

     1973     6691    3                 CURR$XLATE_TABLE.XLATES.NEW_KEY(CURR_XLATE) =

   6691  3 001102   200205 235100                    LDA     CURR_XLATE,,AUTO
         3 001103   000003 735000                    ALS     3
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:269  
         3 001104   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001105   000001 471500                    LDP1    1,,PR0
         3 001106   000002 735000                    ALS     2
         3 001107   200204 473500                    LDP3    CURR_XLATE_TABLE$,,AUTO
         3 001110   000105 100500                    MLR     fill='000'O
         3 001111   100012 000010                    ADSC9   10,,PR1                  cn=0,n=8
         3 001112   300024 000010                    ADSC9   20,A,PR3                 cn=0,n=8

     1974     6692    3                   PORT.CURRENT.KEY(%LVL_EXT_REC-1);
     1975     6693    3                 CURR_XLATE = CURR_XLATE + 1;

   6693  3 001113   200205 054100                    AOS     CURR_XLATE,,AUTO

     1976     6694    3                 END;

   6694  3 001114   300001 236100                    LDQ     1,,PR3
         3 001115   000022 732000                    QRS     18
         3 001116   200205 116100                    CMPQ    CURR_XLATE,,AUTO
         3 001117   001102 605400 3                  TPNZ    s:6691

     1977     6695    2              CURR_XLATE_TABLE$ = CURR$XLATE_TABLE.FLINK$;

   6695  3 001120   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 001121   000002 236100                    LDQ     2,,PR0
         3 001122   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     1978     6696    2              CURR_XLATE = 0;

   6696  3 001123   200205 450100                    STZ     CURR_XLATE,,AUTO

     1979     6697    2              END FINISH_XLATE_TABLES;

   6697  3 001124   200204 236100                    LDQ     CURR_XLATE_TABLE$,,AUTO
         3 001125   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001126   001075 601000 3                  TNZ     s:6690

     1980     6698    1           PORT.CURRENT.EOF = %TRUE;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:270  

   6698  3 001127   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001130   000001 471500                    LDP1    1,,PR0
         3 001131   400000 236007                    LDQ     -131072,DL
         3 001132   100022 256100                    ORSQ    18,,PR1

     1981     6699
     1982     6700                /* Close the source DCB */
     1983     6701
     1984     6702    1           FPT_CLOSE.V.DCB# = SRC_DCB;

   6702  3 001133   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 001134   200052 740100                    STX0    FPT_CLOSE+26,,AUTO

     1985     6703    1           IF VD_$$MON_ACC.V# > 10 THEN

   6703  3 001135   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001136   000012 115007                    CMPA    10,DL
         3 001137   001146 604400 3                  TMOZ    s:6705

     1986     6704    1              CALL VDG$MACC_FREKEY_CLOSE_SRC_XSA (FPT_CLOSE.V.DCB#);

   6704  3 001140   200052 631500                    EPPR1   FPT_CLOSE+26,,AUTO
         3 001141   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001142   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001143   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001144   000000 701000 xent               TSX1    VDG$MACC_FREKEY_CLOSE_SRC_XSA
         3 001145   000000 011000                    NOP     0

     1987     6705    1           CALL XSA$CLOSE (FPT_CLOSE, SRC_XSA)

   6705  3 001146   000014 236000 4                  LDQ     12
         3 001147   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 001150   200020 630500                    EPPR0   FPT_CLOSE,,AUTO
         3 001151   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 001152   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001153   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:271  
         3 001154   000000 701000 xent               TSX1    XSA$CLOSE
         3 001155   001157 702000 3                  TSX2    s:6707
         3 001156   001162 710000 3                  TRA     s:6710

     1988     6706    2           WHENALTRETURN DO;

     1989     6707    2              CALL VDG$MONERR;

   6707  3 001157   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001160   000000 701000 xent               TSX1    VDG$MONERR
         3 001161   000000 011000                    NOP     0

     1990     6708    2              END;

     1991     6709
     1992     6710    2           IF SRC_XSA_DATA$ ~= ADDR(NIL) THEN DO;

   6710  3 001162   200010 236100                    LDQ     SRC_XSA_DATA$,,AUTO
         3 001163   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001164   001171 600000 3                  TZE     s:6713

     1993     6711    2              CALL VDG$OFREE (SRC$XSA_DATA);

   6711  3 001165   200010 630500                    EPPR0   SRC_XSA_DATA$,,AUTO
         3 001166   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001167   000000 701000 xent               TSX1    VDG$OFREE
         3 001170   000000 011000                    NOP     0

     1994     6712    2              END;

     1995     6713    2           IF SRC_XSA_KEY$ ~= ADDR(NIL) THEN DO;

   6713  3 001171   200011 236100                    LDQ     SRC_XSA_KEY$,,AUTO
         3 001172   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001173   001200 600000 3                  TZE     s:6716

     1996     6714    2              CALL VDG$OFREE (SRC$XSA_KEY);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:272  

   6714  3 001174   200011 630500                    EPPR0   SRC_XSA_KEY$,,AUTO
         3 001175   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001176   000000 701000 xent               TSX1    VDG$OFREE
         3 001177   000000 011000                    NOP     0

     1997     6715    2              END;

     1998     6716    1           CALL VDG$OFREE_DCB (SRC_DCB);

   6716  3 001200   200016 630500                    EPPR0   SRC_DCB,,AUTO
         3 001201   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 001202   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001203   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001204   000000 701000 xent               TSX1    VDG$OFREE_DCB
         3 001205   000000 011000                    NOP     0

     1999     6717
     2000     6718                /* Close the destination DCB with SAVE, then re-open it */
     2001     6719    1           FPT_CLOSE.V.DCB# = PORT.DCB#;

   6719  3 001206   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001207   000001 471500                    LDP1    1,,PR0
         3 001210   100004 720100                    LXL0    4,,PR1
         3 001211   200052 740100                    STX0    FPT_CLOSE+26,,AUTO

     2002     6720    1           IF VD_$$MON_ACC.V# > 10 THEN

   6720  3 001212   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001213   000012 115007                    CMPA    10,DL
         3 001214   001223 604400 3                  TMOZ    s:6722

     2003     6721    1              CALL VDG$MACC_FREKEY_CLOSE_DEST (FPT_CLOSE.V.DCB#);

   6721  3 001215   200052 631500                    EPPR1   FPT_CLOSE+26,,AUTO
         3 001216   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001217   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:273  
         3 001220   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001221   000000 701000 xent               TSX1    VDG$MACC_FREKEY_CLOSE_DEST
         3 001222   000000 011000                    NOP     0

     2004     6722    1           CALL M$CLOSE (FPT_CLOSE)

   6722  3 001223   200020 630500                    EPPR0   FPT_CLOSE,,AUTO
         3 001224   450001 713400                    CLIMB   alt,close
         3 001225   406000 401760                    pmme    nvectors=13
         3 001226   001230 702000 3                  TSX2    s:6724
         3 001227   001233 710000 3                  TRA     s:6731

     2005     6723    2           WHENALTRETURN DO;

     2006     6724    2              CALL VDG$MONERR;

   6724  3 001230   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001231   000000 701000 xent               TSX1    VDG$MONERR
         3 001232   000000 011000                    NOP     0

     2007     6725    2              END;

     2008     6726
     2009     6727                /*
     2010     6728                *  After closing the destination DCB, it's positioned at BOF:
     2011     6729                *     clear PORT.CURRENT to indicate DCB's position.
     2012     6730                */
     2013     6731    1           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT);

   6731  3 001233   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001234   000001 471500                    LDP1    1,,PR0
         3 001235   100012 633500                    EPPR3   10,,PR1
         3 001236   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 001237   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001240   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001241   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         3 001242   000000 011000                    NOP     0
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:274  

     2014     6732
     2015     6733    1           FPT_OPEN = CONST_FPT_OPEN;

   6733  3 001243   000100 100400                    MLR     fill='000'O
         3 001244   000000 000350 1                  ADSC9   CONST_FPT_OPEN           cn=0,n=232
         3 001245   200056 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

     2016     6734    1           FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);

   6734  3 001246   000013 235000 4                  LDA     11
         3 001247   200216 452500                    STP2    PREV_BUFFER$+2,,AUTO
         3 001250   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 001251   000122 036003                    ADLQ    82,DU
         3 001252   200056 757100                    STAQ    FPT_OPEN,,AUTO

     2017     6735    1           FPT_OPEN.V.ACS# = %DIRECT#;

   6735  3 001253   000002 236007                    LDQ     2,DL
         3 001254   200124 552104                    STBQ    FPT_OPEN+38,'04'O,AUTO

     2018     6736    1           FPT_OPEN.V.FUN# = %UPDATE#;

   6736  3 001255   001000 236007                    LDQ     512,DL
         3 001256   200123 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     2019     6737    1           FPT_OPEN.V.DCB# = PORT.DCB#;

   6737  3 001257   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001260   000001 471500                    LDP1    1,,PR0
         3 001261   100004 720100                    LXL0    4,,PR1
         3 001262   200122 740100                    STX0    FPT_OPEN+36,,AUTO

     2020     6738    1           IF VD_$$MON_ACC.V# > 10 THEN

   6738  3 001263   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001264   000012 115007                    CMPA    10,DL
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:275  
         3 001265   001274 604400 3                  TMOZ    s:6740

     2021     6739    1              CALL VDG$MACC_FREKEY_REOPEN_DEST (FPT_OPEN.V.DCB#);

   6739  3 001266   200122 631500                    EPPR1   FPT_OPEN+36,,AUTO
         3 001267   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001270   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001271   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001272   000000 701000 xent               TSX1    VDG$MACC_FREKEY_REOPEN_DEST
         3 001273   000000 011000                    NOP     0

     2022     6740    1           CALL M$OPEN (FPT_OPEN)

   6740  3 001274   200056 630500                    EPPR0   FPT_OPEN,,AUTO
         3 001275   450000 713400                    CLIMB   alt,open
         3 001276   410400 401760                    pmme    nvectors=18
         3 001277   001301 702000 3                  TSX2    s:6742
         3 001300   001305 710000 3                  TRA     s:6745

     2023     6741    2           WHENALTRETURN DO;

     2024     6742    2              CALL VDG$MONERR;

   6742  3 001301   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001302   000000 701000 xent               TSX1    VDG$MONERR
         3 001303   000000 011000                    NOP     0

     2025     6743    2              ALTRETURN;

   6743  3 001304   000000 702200 xent               TSX2  ! X66_AALT

     2026     6744    2              END;
     2027     6745    1           PORT.LAST_OP# = %ACCOP_OPEN;

   6745  3 001305   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001306   000001 471500                    LDP1    1,,PR0
         3 001307   000001 220003                    LDX0    1,DU
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:276  
         3 001310   100007 740100                    STX0    7,,PR1

     2028     6746
     2029     6747                /* Now, fix up all those references to the old keys */
     2030     6748    1           CALL VDG$XLATE_LOCATIONS (XLATE_LOCATIONS_ROOT$ -> CURR$XLATE_TABLE,

   6748  3 001311   000033 236000 4                  LDQ     27
         3 001312   200203 235100                    LDA     XLATE_LOCATIONS_ROOT$,,AUTO
         3 001313   200216 757100                    STAQ    PREV_BUFFER$+2,,AUTO
         3 001314   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001315   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001316   000000 701000 xent               TSX1    VDG$XLATE_LOCATIONS
         3 001317   000000 011000                    NOP     0

     2031     6749    1             %XLATE_LOCATION);
     2032     6750                /* Free the chain of xlate tables */
     2033     6751    1           CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;

   6751  3 001320   200203 236100                    LDQ     XLATE_LOCATIONS_ROOT$,,AUTO
         3 001321   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     2034     6752    2           DO WHILE CURR_XLATE_TABLE$ ~= ADDR(NIL);

   6752  3 001322   001336 710000 3                  TRA     s:6757

     2035     6753    2              XLATE_LOCATIONS_ROOT$ = CURR$XLATE_TABLE.FLINK$;

   6753  3 001323   200204 470500                    LDP0    CURR_XLATE_TABLE$,,AUTO
         3 001324   000002 236100                    LDQ     2,,PR0
         3 001325   200203 756100                    STQ     XLATE_LOCATIONS_ROOT$,,AUTO

     2036     6754    2              CURR$XLATE_TABLE.FLINK$ = ADDR(NIL);

   6754  3 001326   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001327   000002 756100                    STQ     2,,PR0

     2037     6755    2              CALL VDG$OFREE (CURR$XLATE_TABLE);
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:277  

   6755  3 001330   200204 630500                    EPPR0   CURR_XLATE_TABLE$,,AUTO
         3 001331   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001332   000000 701000 xent               TSX1    VDG$OFREE
         3 001333   000000 011000                    NOP     0

     2038     6756    2              CURR_XLATE_TABLE$ = XLATE_LOCATIONS_ROOT$;

   6756  3 001334   200203 236100                    LDQ     XLATE_LOCATIONS_ROOT$,,AUTO
         3 001335   200204 756100                    STQ     CURR_XLATE_TABLE$,,AUTO

     2039     6757    2              END;

   6757  3 001336   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001337   001323 601000 3                  TNZ     s:6753

     2040     6758
     2041     6759
     2042     6760                /* If VD_ERR$ is non-NIL, we had an error but kept on going anyway */
     2043     6761
     2044     6762    1           IF VD_ERR$ ~= VD_6E.ERR_TAIL$ THEN

   6762  3 001340   200012 236100                    LDQ     VD_ERR$,,AUTO
         3 001341   000032 116000 xsym               CMPQ    VD_6E+26
         3 001342   001344 600000 3                  TZE     s:6765

     2045     6763    1              ALTRETURN;       /* Be sure the error gets reported */

   6763  3 001343   000000 702200 xent               TSX2  ! X66_AALT

     2046     6764
     2047     6765    1           RETURN;

   6765  3 001344   000000 702200 xent               TSX2  ! X66_ARET

     2048     6766
     2049     6767
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:278  
     2050     6768
     2051     6769    1   CLOSE_SRC_FAILED:
     2052     6770    1           CALL VDG$MONERR;

   6770  3 001345   000002 631400 xsym  CLOSE_SRC_F* EPPR1   B_VECTNIL+2
         3 001346   000000 701000 xent               TSX1    VDG$MONERR
         3 001347   000000 011000                    NOP     0

   6762  3 001350                       REKEY_FAILED null
     2053     6771
     2054     6772    1   REKEY_FAILED: ;
     2055     6773    1           ALTRETURN;

   6773  3 001350   000000 702200 xent               TSX2  ! X66_AALT

     2056     6774
     2057     6775
     2058     6776    1   OPEN_SRC_XSA_FAILED:
     2059     6777    1           CALL VDG$MONERR;

   6777  3 001351   000002 631400 xsym  OPEN_SRC_XS* EPPR1   B_VECTNIL+2
         3 001352   000000 701000 xent               TSX1    VDG$MONERR
         3 001353   000000 011000                    NOP     0

     2060     6778    1           PORT.DCB# = 0;  /* So FCLOSE won't try to M$CLOSE the DCB */

   6778  3 001354   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001355   000001 471500                    LDP1    1,,PR0
         3 001356   000000 220003                    LDX0    0,DU
         3 001357   100004 440100                    SXL0    4,,PR1

     2061     6779    1           CALL VDA$FCLOSE (SRC_STREAM);   /* Let ALTRETURN fall thru */

   6779  3 001360   200003 630500                    EPPR0   @SRC_STREAM,,AUTO
         3 001361   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001362   000000 701000 xent               TSX1    VDA$FCLOSE
         3 001363   000000 011000                    NOP     0
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:279  

     2062     6780    1           ALTRETURN;

   6780  3 001364   000000 702200 xent               TSX2  ! X66_AALT

     2063     6781
     2064     6782
     2065     6783    1   ABORT_REKEY:
     2066     6784                /*
     2067     6785                *  Abort the rekey operation--revert to the original file.
     2068     6786                *  At this point, we assume:
     2069     6787                *       Someone has already built a VD$ERR for an error.
     2070     6788                *       SRC_XSA_DATA$ and _KEY$ are either NIL, meaning we haven't
     2071     6789                *           allocated any buffers for XSA, or they point to the buffers.
     2072     6790                *       SRC_DCB and SRC$DCB refer to the original source DCB.
     2073     6791                *       PORT.DCB# is the destination DCB.
     2074     6792                *  To abort, do the following:
     2075     6793                *     If the dest DCB is open, close it with DISP=RELEASE.
     2076     6794                *     Point the port to the original source DCB.
     2077     6795                *     If the source DCB is open, close it, 'cause it's open for input
     2078     6796                *         only.
     2079     6797                *     If the source DCB is now closed, re-open it for update.
     2080     6798                */
     2081     6799    2           IF DCBADDR(PORT.DCB#)->F$DCB.FCD# THEN DO;

   6799  3 001365   200004 470500       ABORT_REKEY  LDP0    @DEST_STREAM,,AUTO
         3 001366   000001 471500                    LDP1    1,,PR0
         3 001367   000003 473400 4                  LDP3    3
         3 001370   300000 474500                    LDP4    0,,PR3
         3 001371   100004 720100                    LXL0    4,,PR1
         3 001372   400000 475510                    LDP5    0,X0,PR4
         3 001373   500031 236100                    LDQ     25,,PR5
         3 001374   020000 316007                    CANQ    8192,DL
         3 001375   001417 600000 3                  TZE     s:6808

     2082     6800    2              FPT_CLOSE.V.DCB# = PORT.DCB#;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:280  
   6800  3 001376   200052 740100                    STX0    FPT_CLOSE+26,,AUTO

     2083     6801    2              FPT_CLOSE.V.DISP# = %RELEASE#;

   6801  3 001377   000001 236007                    LDQ     1,DL
         3 001400   200052 552104                    STBQ    FPT_CLOSE+26,'04'O,AUTO

     2084     6802    2              IF VD_$$MON_ACC.V# > 10 THEN

   6802  3 001401   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001402   000012 115007                    CMPA    10,DL
         3 001403   001412 604400 3                  TMOZ    s:6804

     2085     6803    2                 CALL VDG$MACC_FREKEY_CLOSE_DEST (FPT_CLOSE.V.DCB#);

   6803  3 001404   200052 631500                    EPPR1   FPT_CLOSE+26,,AUTO
         3 001405   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001406   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001407   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001410   000000 701000 xent               TSX1    VDG$MACC_FREKEY_CLOSE_DEST
         3 001411   000000 011000                    NOP     0

     2086     6804    2              CALL M$CLOSE (FPT_CLOSE)

   6804  3 001412   200020 630500                    EPPR0   FPT_CLOSE,,AUTO
         3 001413   450001 713400                    CLIMB   alt,close
         3 001414   406000 401760                    pmme    nvectors=13
         3 001415   001417 702000 3                  TSX2    s:6808
         3 001416   001417 710000 3                  TRA     s:6808

     2087     6805    3              WHENALTRETURN DO; END;  /* Ignore altreturn */

     2088     6806    2              END;

     2089     6807
     2090     6808    1           CALL VDG$OFREE_DCB (PORT.DCB#); /* Ignore altreturn */

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:281  
   6808  3 001417   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001420   000001 471500                    LDP1    1,,PR0
         3 001421   200217 451500                    STP1    PREV_BUFFER$+3,,AUTO
         3 001422   200217 236100                    LDQ     PREV_BUFFER$+3,,AUTO
         3 001423   000024 036000 4                  ADLQ    20
         3 001424   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001425   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001426   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001427   000000 701000 xent               TSX1    VDG$OFREE_DCB
         3 001430   000000 011000                    NOP     0

     2091     6809    1           PORT.DCB# = SRC_DCB;

   6809  3 001431   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001432   000001 471500                    LDP1    1,,PR0
         3 001433   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 001434   100004 440100                    SXL0    4,,PR1

     2092     6810
     2093     6811    2           IF SRC$DCB.FCD# THEN DO;

   6811  3 001435   200017 471500                    LDP1    SRC_DCB$,,AUTO
         3 001436   100031 236100                    LDQ     25,,PR1
         3 001437   020000 316007                    CANQ    8192,DL
         3 001440   001466 600000 3                  TZE     s:6819

     2094     6812    2              FPT_CLOSE.V.DCB# = SRC_DCB;

   6812  3 001441   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 001442   200052 740100                    STX0    FPT_CLOSE+26,,AUTO

     2095     6813    2              FPT_CLOSE.V.DISP# = %SAVE#;

   6813  3 001443   000002 236007                    LDQ     2,DL
         3 001444   200052 552104                    STBQ    FPT_CLOSE+26,'04'O,AUTO

     2096     6814    2              IF VD_$$MON_ACC.V# > 10 THEN
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:282  

   6814  3 001445   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001446   000012 115007                    CMPA    10,DL
         3 001447   001456 604400 3                  TMOZ    s:6816

     2097     6815    2                 CALL VDG$MACC_FREKEY_CLOSE_SRC_XSA (FPT_CLOSE.V.DCB#);

   6815  3 001450   200052 633500                    EPPR3   FPT_CLOSE+26,,AUTO
         3 001451   200216 453500                    STP3    PREV_BUFFER$+2,,AUTO
         3 001452   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001453   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001454   000000 701000 xent               TSX1    VDG$MACC_FREKEY_CLOSE_SRC_XSA
         3 001455   000000 011000                    NOP     0

     2098     6816    2              CALL XSA$CLOSE (FPT_CLOSE, SRC_XSA);

   6816  3 001456   000014 236000 4                  LDQ     12
         3 001457   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 001460   200020 630500                    EPPR0   FPT_CLOSE,,AUTO
         3 001461   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 001462   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001463   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001464   000000 701000 xent               TSX1    XSA$CLOSE
         3 001465   000000 011000                    NOP     0

     2099     6817    2              END;

     2100     6818
     2101     6819    2           IF NOT SRC$DCB.FCD# THEN DO;

   6819  3 001466   200017 470500                    LDP0    SRC_DCB$,,AUTO
         3 001467   000031 236100                    LDQ     25,,PR0
         3 001470   020000 316007                    CANQ    8192,DL
         3 001471   001527 601000 3                  TNZ     s:6833

     2102     6820    2              FPT_OPEN.V.ACS# = %DIRECT#;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:283  
   6820  3 001472   000002 236007                    LDQ     2,DL
         3 001473   200124 552104                    STBQ    FPT_OPEN+38,'04'O,AUTO

     2103     6821    2              FPT_OPEN.V.FUN# = %UPDATE#;

   6821  3 001474   001000 236007                    LDQ     512,DL
         3 001475   200123 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

     2104     6822    2              FPT_OPEN.V.DCB# = SRC_DCB;

   6822  3 001476   200016 220100                    LDX0    SRC_DCB,,AUTO
         3 001477   200122 740100                    STX0    FPT_OPEN+36,,AUTO

     2105     6823    2              FPT_OPEN.V.INITZ.SCRUB# = %NO#;

   6823  3 001500   000034 236000 4                  LDQ     28
         3 001501   200122 356100                    ANSQ    FPT_OPEN+36,,AUTO

     2106     6824    2              IF VD_$$MON_ACC.V# > 10 THEN

   6824  3 001502   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         3 001503   000012 115007                    CMPA    10,DL
         3 001504   001513 604400 3                  TMOZ    s:6826

     2107     6825    2                 CALL VDG$MACC_FREKEY_REOPEN_SRC (FPT_OPEN.V.DCB#);

   6825  3 001505   200122 631500                    EPPR1   FPT_OPEN+36,,AUTO
         3 001506   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001507   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001510   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001511   000000 701000 xent               TSX1    VDG$MACC_FREKEY_REOPEN_SRC
         3 001512   000000 011000                    NOP     0

     2108     6826    2              CALL M$OPEN (FPT_OPEN)

   6826  3 001513   200056 630500                    EPPR0   FPT_OPEN,,AUTO
         3 001514   450000 713400                    CLIMB   alt,open
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:284  
         3 001515   410400 401760                    pmme    nvectors=18
         3 001516   001520 702000 3                  TSX2    s:6828
         3 001517   001523 710000 3                  TRA     s:6830

     2109     6827    3              WHENALTRETURN DO;

     2110     6828    3                 CALL VDG$MONERR;

   6828  3 001520   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001521   000000 701000 xent               TSX1    VDG$MONERR
         3 001522   000000 011000                    NOP     0

     2111     6829    3                 END;

     2112     6830    2              PORT.LAST_OP# = %ACCOP_OPEN;

   6830  3 001523   200004 470500                    LDP0    @DEST_STREAM,,AUTO
         3 001524   000001 471500                    LDP1    1,,PR0
         3 001525   000001 220003                    LDX0    1,DU
         3 001526   100007 740100                    STX0    7,,PR1

     2113     6831    2              END;

     2114     6832
     2115     6833    2           IF SRC_XSA_DATA$ ~= ADDR(NIL) THEN DO;

   6833  3 001527   200010 236100                    LDQ     SRC_XSA_DATA$,,AUTO
         3 001530   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001531   001536 600000 3                  TZE     s:6836

     2116     6834    2              CALL VDG$OFREE (SRC$XSA_DATA);   /* Ignore altret */

   6834  3 001532   200010 630500                    EPPR0   SRC_XSA_DATA$,,AUTO
         3 001533   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001534   000000 701000 xent               TSX1    VDG$OFREE
         3 001535   000000 011000                    NOP     0

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:285  
     2117     6835    2              END;

     2118     6836    2           IF SRC_XSA_KEY$ ~= ADDR(NIL) THEN DO;

   6836  3 001536   200011 236100                    LDQ     SRC_XSA_KEY$,,AUTO
         3 001537   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001540   001545 600000 3                  TZE     s:6839

     2119     6837    2              CALL VDG$OFREE (SRC$XSA_KEY);   /* Ignore altret */

   6837  3 001541   200011 630500                    EPPR0   SRC_XSA_KEY$,,AUTO
         3 001542   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001543   000000 701000 xent               TSX1    VDG$OFREE
         3 001544   000000 011000                    NOP     0

     2120     6838    2              END;

     2121     6839    1           ALTRETURN;

   6839  3 001545   000000 702200 xent               TSX2  ! X66_AALT

     2122     6840        %BOX (TITLE=READ_SRC_RECORD, PAGE=YES);
              6848    1
              6852    1   /***************************************************************************
              6854    1    *                                                                         *
              6858    1            *                              READ_SRC_RECORD                           *
              6860    1            *                                                                        *
              6862    1          ***************************************************************************/

     2123     6866
     2124     6867        /*I* NAME: READ_SRC_RECORD
     2125     6868            PARAMETERS:
     2126     6869                VD_BUFFER$ - Uninitialized ptr.
     2127     6870                DVBYTE - Uninitialized UBIN BYTE CALIGNED.
     2128     6871                EOF_FLAG - Uninitialized BIT(1) ALIGNED flag.
     2129     6872            INPUT:
     2130     6873                SRC_XSA - XSA_PARAM structure, open to the source file.
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:286  
     2131     6874                FPT_READ - Initialized FPT_READ structure.
     2132     6875            OUTPUT:
     2133     6876                VD_BUFFER$ will point to a VD$BUFFER containing the record
     2134     6877                    read--unless EOF_FLAG is set.
     2135     6878                DVBYTE will contain the record's DVBYTE char--unless EOF_FLAG
     2136     6879                    is set.
     2137     6880                EOF_FLAG will be set if we hit EOF.
     2138     6881            DESCRIPTION:
     2139     6882                Keep trying to read a record, allocating larger and larger
     2140     6883                buffers if we get an E$LD error.
     2141     6884                However, if the file is a compressed file, allocate the largest
     2142     6885                buffer possible for the first M$READ, because you can't do
     2143     6886                continued M$READs on a compressed file.
     2144     6887        */
     2145     6888
     2146     6889    1   READ_SRC_RECORD: PROC (VD_BUFFER$, DVBYTE, EOF_FLAG) ALTRET;

   6889  3 001546   200206 741300       READ_SRC_RE* STX1  ! CURR_XLATE+1,,AUTO

     2147     6890
     2148     6891    2   DCL VD_BUFFER$ PTR;
     2149     6892    2   DCL DVBYTE UBIN BYTE CALIGNED;
     2150     6893    2   DCL EOF_FLAG BIT(1) ALIGNED;
     2151     6894
     2152     6895
     2153     6896    2   DCL NB_BUFFER SBIN;
     2154     6897    2   DCL TOTAL_ARS SBIN;
     2155     6898    2   DCL PREV_BUFFER$ PTR;
     2156     6899
     2157     6900
     2158     6901        %VD$BUFFER (NAME=VD$BUFFER, STCLASS="BASED(VD_BUFFER$)");
     2159     6959
     2160     6960
     2161     6961
     2162     6962    2           EOF_FLAG = %FALSE;

   6962  3 001547   200211 470500                    LDP0    @EOF_FLAG,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:287  
         3 001550   000000 450100                    STZ     0,,PR0

     2163     6963    2           NB_BUFFER = %NB_DFLT_DATA_REC;

   6963  3 001551   000400 235007                    LDA     256,DL
         3 001552   200212 755100                    STA     NB_BUFFER,,AUTO

     2164     6964    2           IF DCBADDR(FPT_READ.V.DCB#)->F$DCB.COMP# THEN

   6964  3 001553   000003 471400 4                  LDP1    3
         3 001554   100000 473500                    LDP3    0,,PR1
         3 001555   200164 220100                    LDX0    FPT_READ+8,,AUTO
         3 001556   300000 474510                    LDP4    0,X0,PR3
         3 001557   400031 236100                    LDQ     25,,PR4
         3 001560   000100 316007                    CANQ    64,DL
         3 001561   001564 600000 3                  TZE     s:6966

     2165     6965    2              NB_BUFFER = %MXNB_DATA;

   6965  3 001562   004000 235007                    LDA     2048,DL
         3 001563   200212 755100                    STA     NB_BUFFER,,AUTO

     2166     6966    2           TOTAL_ARS = 0;

   6966  3 001564   200213 450100                    STZ     TOTAL_ARS,,AUTO

     2167     6967    2           VD_BUFFER$ = ADDR(NIL);

   6967  3 001565   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001566   200207 475500                    LDP5    @VD_BUFFER$,,AUTO
         3 001567   500000 756100                    STQ     0,,PR5

     2168     6968    2           PREV_BUFFER$ = ADDR(NIL);

   6968  3 001570   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001571   200214 756100                    STQ     PREV_BUFFER$,,AUTO

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:288  
     2169     6969    2           FPT_READ.V.DVBYTE.CONT# = %FALSE;

   6969  3 001572   000035 236000 4                  LDQ     29
         3 001573   200167 356100                    ANSQ    FPT_READ+11,,AUTO

     2170     6970
     2171     6971    2   GET_COMPLETE_RECORD:
     2172     6972    3           DO WHILE VD_BUFFER$ = ADDR(NIL);

   6972  3 001574   001731 710000 3     GET_COMPLET* TRA     s:7004

     2173     6973    3              CALL VDG$OALLOC (%CLS_BUFFER, VD_BUFFER$,

   6973  3 001575   200212 236100                    LDQ     NB_BUFFER,,AUTO
         3 001576   000015 036007                    ADLQ    13,DL
         3 001577   000004 506007                    DIV     4,DL
         3 001600   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001601   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001602   200221 450500                    STP0    PREV_BUFFER$+5,,AUTO
         3 001603   200207 236100                    LDQ     @VD_BUFFER$,,AUTO
         3 001604   200220 756100                    STQ     PREV_BUFFER$+4,,AUTO
         3 001605   000020 236000 4                  LDQ     16
         3 001606   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 001607   200217 630500                    EPPR0   PREV_BUFFER$+3,,AUTO
         3 001610   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001611   000000 701000 xent               TSX1    VDG$OALLOC
         3 001612   002002 702000 3                  TSX2    OALLOC_FAILED

     2174     6974    3                (LENGTHC(VD$BUFFER_HEADER) + NB_BUFFER + %(NB_PER_WORD-1)) /
     2175     6975    3                %NB_PER_WORD)
     2176     6976    3                ALTRET (OALLOC_FAILED);
     2177     6977    3              VD$BUFFER.LENGTH# = NB_BUFFER;

   6977  3 001613   200207 470500                    LDP0    @VD_BUFFER$,,AUTO
         3 001614   000000 471500                    LDP1    0,,PR0
         3 001615   200212 720100                    LXL0    NB_BUFFER,,AUTO
         3 001616   100002 740100                    STX0    2,,PR1
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:289  

     2178     6978    3              FPT_READ.BUF_ = VECTOR(VD$BUFFER.BYTES);

   6978  3 001617   000000 471500                    LDP1    0,,PR0
         3 001620   100002 221100                    LDX1    2,,PR1
         3 001621   000000 635011                    EAA     0,X1
         3 001622   000002 731000                    ARS     2
         3 001623   000140 135007                    SBLA    96,DL
         3 001624   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001625   200216 236100                    LDQ     PREV_BUFFER$+2,,AUTO
         3 001626   000021 036000 4                  ADLQ    17
         3 001627   200160 757100                    STAQ    FPT_READ+4,,AUTO

     2179     6979    4              IF PREV_BUFFER$ ~= ADDR(NIL) THEN DO;

   6979  3 001630   200214 236100                    LDQ     PREV_BUFFER$,,AUTO
         3 001631   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001632   001666 600000 3                  TZE     s:6992

     2180     6980                      /*
     2181     6981                      * Doing a continued read:  copy already-read part of
     2182     6982                      *     record to new buffer, free old buffer.
     2183     6983                      */
     2184     6984    4                 VD$BUFFER.BYTES = PREV_BUFFER$->VD$BUFFER.BYTES;

   6984  3 001633   000000 471500                    LDP1    0,,PR0
         3 001634   100002 221100                    LDX1    2,,PR1
         3 001635   200214 473500                    LDP3    PREV_BUFFER$,,AUTO
         3 001636   300002 222100                    LDX2    2,,PR3
         3 001637   040140 100540                    MLR     fill='040'O
         3 001640   300002 400012                    ADSC9   2,,PR3                   cn=2,n=*X2
         3 001641   100002 400011                    ADSC9   2,,PR1                   cn=2,n=*X1

     2185     6985    4                 FPT_READ.BUF_ = VECTOR(SUBSTR(VD$BUFFER.BYTES,

   6985  3 001642   000000 471500                    LDP1    0,,PR0
         3 001643   100002 221100                    LDX1    2,,PR1
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:290  
         3 001644   200216 741100                    STX1    PREV_BUFFER$+2,,AUTO
         3 001645   300002 121100                    SBLX1   2,,PR3
         3 001646   300002 236100                    LDQ     2,,PR3
         3 001647   000022 732000                    QRS     18
         3 001650   000000 635011                    EAA     0,X1
         3 001651   000002 771000                    ARL     2
         3 001652   000140 135007                    SBLA    96,DL
         3 001653   000012 036007                    ADLQ    10,DL
         3 001654   100000 500506                    A9BD    0,QL,PR1
         3 001655   200217 451500                    STP1    PREV_BUFFER$+3,,AUTO
         3 001656   200217 236100                    LDQ     PREV_BUFFER$+3,,AUTO
         3 001657   200160 757100                    STAQ    FPT_READ+4,,AUTO

     2186     6986    4                   PREV_BUFFER$->VD$BUFFER.LENGTH#));
     2187     6987    4                 CALL VDG$OFREE (PREV_BUFFER$->VD$BUFFER)

   6987  3 001660   200214 630500                    EPPR0   PREV_BUFFER$,,AUTO
         3 001661   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001662   000000 701000 xent               TSX1    VDG$OFREE
         3 001663   002002 702000 3                  TSX2    OALLOC_FAILED

     2188     6988    4                   ALTRET (OFREE_FAILED);
     2189     6989    4                 PREV_BUFFER$ = ADDR(NIL);

   6989  3 001664   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001665   200214 756100                    STQ     PREV_BUFFER$,,AUTO

     2190     6990    4                 END;

     2191     6991
     2192     6992    3              CALL XSA$READ (FPT_READ, SRC_XSA)

   6992  3 001666   000014 236000 4                  LDQ     12
         3 001667   200217 756100                    STQ     PREV_BUFFER$+3,,AUTO
         3 001670   200154 630500                    EPPR0   FPT_READ,,AUTO
         3 001671   200216 450500                    STP0    PREV_BUFFER$+2,,AUTO
         3 001672   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:291  
         3 001673   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001674   000000 701000 xent               TSX1    XSA$READ
         3 001675   001677 702000 3                  TSX2    s:6994
         3 001676   001731 710000 3                  TRA     s:7004

     2193     6993    4              WHENALTRETURN DO;

     2194     6994    4                 IF SRC_XSA.ERR.CODE ~= %E$LD

   6994  3 001677   000001 236000 2                  LDQ     SRC_XSA+1
         3 001700   377770 376007                    ANQ     131064,DL
         3 001701   000070 116007                    CMPQ    56,DL
         3 001702   001754 601000 3                  TNZ     READ_FAILED_HARD
         3 001703   200212 235100                    LDA     NB_BUFFER,,AUTO
         3 001704   004000 115007                    CMPA    2048,DL
         3 001705   001754 605000 3                  TPL     READ_FAILED_HARD

     2195     6995    4                   OR NB_BUFFER >= %MXNB_DATA THEN
     2196     6996    4                    GOTO READ_FAILED_HARD;
     2197     6997    4                 FPT_READ.V.DVBYTE.CONT# = %TRUE;

   6997  3 001706   001000 236003                    LDQ     512,DU
         3 001707   200167 256100                    ORSQ    FPT_READ+11,,AUTO

     2198     6998    4                 NB_BUFFER = MINIMUM (NB_BUFFER * 2, %MXNB_DATA);

   6998  3 001710   200212 236100                    LDQ     NB_BUFFER,,AUTO
         3 001711   000001 736000                    QLS     1
         3 001712   004000 116007                    CMPQ    2048,DL
         3 001713   001715 604400 3                  TMOZ    s:6998+5
         3 001714   004000 236007                    LDQ     2048,DL
         3 001715   200212 756100                    STQ     NB_BUFFER,,AUTO

     2199     6999    4                 TOTAL_ARS = TOTAL_ARS + SRC_XSA.ARS#;

   6999  3 001716   200213 236100                    LDQ     TOTAL_ARS,,AUTO
         3 001717   000000 036000 2                  ADLQ    SRC_XSA
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:292  
         3 001720   200213 756100                    STQ     TOTAL_ARS,,AUTO

     2200     7000    4                 VD$BUFFER.LENGTH# = TOTAL_ARS;

   7000  3 001721   200207 470500                    LDP0    @VD_BUFFER$,,AUTO
         3 001722   000000 471500                    LDP1    0,,PR0
         3 001723   000000 620006                    EAX0    0,QL
         3 001724   100002 740100                    STX0    2,,PR1

     2201     7001    4                 PREV_BUFFER$ = VD_BUFFER$;

   7001  3 001725   000000 236100                    LDQ     0,,PR0
         3 001726   200214 756100                    STQ     PREV_BUFFER$,,AUTO

     2202     7002    4                 VD_BUFFER$ = ADDR(NIL);

   7002  3 001727   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001730   000000 756100                    STQ     0,,PR0

     2203     7003    4                 END;

     2204     7004    3              END GET_COMPLETE_RECORD;

   7004  3 001731   200207 470500                    LDP0    @VD_BUFFER$,,AUTO
         3 001732   000000 236100                    LDQ     0,,PR0
         3 001733   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001734   001575 600000 3                  TZE     s:6973

     2205     7005
     2206     7006    2           VD$BUFFER.LENGTH# = TOTAL_ARS + SRC_XSA.ARS#;

   7006  3 001735   000000 471500                    LDP1    0,,PR0
         3 001736   200213 236100                    LDQ     TOTAL_ARS,,AUTO
         3 001737   000000 036000 2                  ADLQ    SRC_XSA
         3 001740   000000 620006                    EAX0    0,QL
         3 001741   100002 740100                    STX0    2,,PR1

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:293  
     2207     7007    2           DVBYTE = BITBIN(SRC_XSA.DVBYTE);

   7007  3 001742   000014 236000 2                  LDQ     SRC_XSA+12
         3 001743   000033 772000                    QRL     27
         3 001744   000377 376007                    ANQ     255,DL
         3 001745   200216 756100                    STQ     PREV_BUFFER$+2,,AUTO
         3 001746   200210 471500                    LDP1    @DVBYTE,,AUTO
         3 001747   000100 101500                    MRL     fill='000'O
         3 001750   200216 000004                    ADSC9   PREV_BUFFER$+2,,AUTO     cn=0,n=4
         3 001751   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2208     7008    2           RETURN;

   7008  3 001752   200206 221300                    LDX1  ! CURR_XLATE+1,,AUTO
         3 001753   000001 702211                    TSX2  ! 1,X1

     2209     7009
     2210     7010
     2211     7011    2   READ_FAILED_HARD:
     2212     7012    2           CALL VDG$OFREE (VD$BUFFER)

   7012  3 001754   200207 470500       READ_FAILED* LDP0    @VD_BUFFER$,,AUTO
         3 001755   000000 471500                    LDP1    0,,PR0
         3 001756   200216 451500                    STP1    PREV_BUFFER$+2,,AUTO
         3 001757   200216 630500                    EPPR0   PREV_BUFFER$+2,,AUTO
         3 001760   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001761   000000 701000 xent               TSX1    VDG$OFREE
         3 001762   002002 702000 3                  TSX2    OALLOC_FAILED

     2213     7013    2             ALTRET (OFREE_FAILED);
     2214     7014    2           VD_BUFFER$ = ADDR(NIL);

   7014  3 001763   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001764   200207 470500                    LDP0    @VD_BUFFER$,,AUTO
         3 001765   000000 756100                    STQ     0,,PR0

     2215     7015    3           IF SRC_XSA.ERR.CODE = %E$EOF THEN DO;
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:294  

   7015  3 001766   000001 236000 2                  LDQ     SRC_XSA+1
         3 001767   377770 376007                    ANQ     131064,DL
         3 001770   000060 116007                    CMPQ    48,DL
         3 001771   001777 601000 3                  TNZ     s:7019

     2216     7016    3              EOF_FLAG = %TRUE;

   7016  3 001772   400000 236003                    LDQ     -131072,DU
         3 001773   200211 471500                    LDP1    @EOF_FLAG,,AUTO
         3 001774   100000 756100                    STQ     0,,PR1

     2217     7017    3              RETURN;

   7017  3 001775   200206 221300                    LDX1  ! CURR_XLATE+1,,AUTO
         3 001776   000001 702211                    TSX2  ! 1,X1

     2218     7018    3              END;
     2219     7019    2           CALL VDG$MONERR;

   7019  3 001777   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002000   000000 701000 xent               TSX1    VDG$MONERR
         3 002001   000000 011000                    NOP     0

   7015  3 002002                       OALLOC_FAIL* null
   7015  3 002002                       OFREE_FAILED null
     2220     7020
     2221     7021
     2222     7022    2   OALLOC_FAILED: ;
     2223     7023    2   OFREE_FAILED: ;
     2224     7024    2           ALTRETURN;

   7024  3 002002   200206 221300                    LDX1  ! CURR_XLATE+1,,AUTO
         3 002003   000000 702211                    TSX2  ! 0,X1
     2225     7025
     2226     7026    2   END READ_SRC_RECORD;
     2227     7027
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:295  
     2228     7028    1   END VDA$FREKEY;

PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:296  
--  Include file information  --

   XS_MACRO_C.:LIBRARY  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VDA$FREKEY.
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:297  

 **** Variables and constants ****

  ****  Section 001 RoData VDA$FREKEY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   110-0-0/d STRC(1080)  r     1 CONST_FPT_CLOSE            0-0-0/d STRC(2088)  r     1 CONST_FPT_OPEN
    72-0-0/d STRC(504)   r     1 CONST_FPT_READ

  ****  Section 002  Data  VDA$FREKEY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 SRC_XSA

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DEST_STREAM             210-0-0/w PTR         r     1 @DVBYTE
   211-0-0/w PTR         r     1 @EOF_FLAG                  6-0-0/w PTR         r     1 @HOLE
     7-0-0/w PTR         r     1 @HOLE_KEY                  5-0-0/w PTR         r     1 @KEY_INCR
     3-0-0/w PTR         r     1 @SRC_STREAM              207-0-0/w PTR         r     1 @VD_BUFFER$
   177-0-0/w STRC(72)    r     1 ACTUAL$KEY_INCR          177-0-0/w STRC(72)    r     1 ACTUAL_KEY_INCR
   205-0-0/w SBIN        r     1 CURR_XLATE               204-0-0/w PTR         r     1 CURR_XLATE_TABLE$
    *0-0-0/w STRC(864)   r     1 DEST_STREAM               *0-0-0/c UBIN(9)     r     1 DVBYTE
   176-0-0/w BIT         r     1 EOF                       *0-0-0/w BIT         r     1 EOF_FLAG
    20-0-0/d STRC(1080)  r     1 FPT_CLOSE                 56-0-0/d STRC(2088)  r     1 FPT_OPEN
   154-0-0/d STRC(504)   r     1 FPT_READ                  *0-0-0/w SBIN        r     1 HOLE
   201-0-0/w SBIN        r     1 HOLE#                     *0-0-0/w STRC(72)    r     1 HOLE_KEY
    *0-0-0/w STRC(72)    r     1 KEY_INCR                  14-0-0/w PTR         r     1 L1_NODE$
   212-0-0/w SBIN        r     1 NB_BUFFER                214-0-0/w PTR         r     1 PREV_BUFFER$
   172-0-0/w STRC        r     1 READ_KEY                 174-0-0/w STRC(72)    r     1 SPEC
    16-0-0/w UBIN(18)    r     1 SRC_DCB                   17-0-0/w PTR         r     1 SRC_DCB$
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:298  
    *0-0-0/w STRC(864)   r     1 SRC_STREAM                10-0-0/w PTR         r     1 SRC_XSA_DATA$
    11-0-0/w PTR         r     1 SRC_XSA_KEY$             213-0-0/w SBIN        r     1 TOTAL_ARS
   173-0-0/w PTR         r     1 VD_BUFFER$                *0-0-0/w PTR         r     1 VD_BUFFER$
    12-0-0/w PTR         r     1 VD_ERR$                  150-0-0/d STRC(90)    r     1 VLP_SN
    13-0-0/w PTR         r     1 WINDOWS_L0_NODE$          15-0-0/w PTR         r     1 WINDOW_SPEC$
   203-0-0/w PTR         r     1 XLATE_LOCATIONS_ROOT$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w STRC(144)   r     1 VD_$BY
     0-0-0/w STRC(22644) r     1 VD_6E                      0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 BKEY                       0-0-0/w STRC(828)   r     1 CURR$XLATE_TABLE
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(468)   r     1 L1$NODE
     0-0-0/w STRC(1944)  r     1 PORT                       0-0-0/d ASTR(3528)  r     1 SRC$DCB
     0-0-0/w ASTR(90)    r     1 SRC$XSA_DATA               0-0-0/w ASTR(90)    r     1 SRC$XSA_KEY
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(90)    r     1 VD$BUFFER_HEADER           0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(36972) r     1 VD$FIT                     0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w STRC(864)   r     1 VD$STREAM                  0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE
     0-0-0/w STRC(900)   r     1 WINDOW$SPEC                0-0-0/w STRC(468)   r     1 WINDOWS$L0_NODE


   Procedure VDA$FREKEY requires 1028 words for executable code.
   Procedure VDA$FREKEY requires 146 words of local(AUTO) storage.

    No errors detected in file VDA$FILE.:VDA5TSI    .
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:299  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:300  
          MINI XREF LISTING

ABORT_REKEY
      6799**LABEL    6554--GOTO     6602--CALLALT  6605--CALLALT  6613--GOTO     6620--GOTO     6635--CALLALT
      6666--CALLALT
ACTUAL$KEY_INCR.BYTES#
      5176**DCL      6409>>DOWHILE  6411<<ASSIGN   6411>>ASSIGN   6412>>IF       6658>>ASSIGN   6662>>ASSIGN
ACTUAL_KEY_INCR
      5157**DCL      5172--REDEF    6403<<ASSIGN   6607>>ASSIGN
ACTUAL_KEY_INCR.BYTES#
      5161**DCL      6404>>IF       6405<<ASSIGN
ACTUAL_KEY_INCR.LENGTH#
      5161**DCL      6406<<ASSIGN
BKEY.BYTES#
      5916**DCL      6587>>IF       6646>>IF       6658<<ASSIGN   6658>>ASSIGN   6662<<ASSIGN   6662>>ASSIGN
CANT_REKEY_FILE_FAILURE
      6391**LABEL    6413--GOTO
CLOSE_SRC_FAILED
      6770**LABEL    6490--CALLALT
CONST_FPT_CLOSE
      4855**DCL      6485>>ASSIGN
CONST_FPT_CLOSE.SN_
      4855**DCL      4855--REDEF
CONST_FPT_CLOSE.UTL_
      4856**DCL      4856--REDEF
CONST_FPT_CLOSE.V
      4860**DCL      4855--DCLINIT
CONST_FPT_CLOSE.V.EXPIRE#
      4870**DCL      4870--REDEF
CONST_FPT_CLOSE.V.TYPE#
      4868**DCL      4868--REDEF
CONST_FPT_CLOSE.V.XTNSIZE#
      4865**DCL      4865--REDEF    4867--REDEF
CONST_FPT_OPEN
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:301  
      4749**DCL      6493>>ASSIGN   6733>>ASSIGN
CONST_FPT_OPEN.ACSVEH_
      4751**DCL      4752--REDEF
CONST_FPT_OPEN.ALTKEYS_
      4757**DCL      4758--REDEF    4758--REDEF
CONST_FPT_OPEN.HDR_
      4756**DCL      4757--REDEF
CONST_FPT_OPEN.TAB_
      4755**DCL      4756--REDEF
CONST_FPT_OPEN.UHL_
      4749**DCL      4750--REDEF    4750--REDEF
CONST_FPT_OPEN.V
      4758**DCL      4749--DCLINIT
CONST_FPT_OPEN.V.FSN#
      4789**DCL      4789--REDEF    4789--REDEF
CONST_FPT_OPEN.WSN_
      4755**DCL      4755--REDEF
CONST_FPT_READ
      4810**DCL      6594>>ASSIGN
CONST_FPT_READ.STATION_
      4813**DCL      4814--REDEF
CONST_FPT_READ.V
      4814**DCL      4810--DCLINIT
CONST_FPT_READ.V.DVBYTE.REREAD#
      4825**DCL      4825--REDEF
CONST_FPT_READ.V.INDX#
      4823**DCL      4823--REDEF
CURR$XLATE_TABLE
      5775**DCL      6436--CALL     6459<>CALL     6748<>CALL     6755<>CALL
CURR$XLATE_TABLE.FILE_KEY
      5812**DCL      6454<<ASSIGN
CURR$XLATE_TABLE.FILE_KEY.V$
      5814**DCL      6454<>CALL
CURR$XLATE_TABLE.FLINK$
      5801**DCL      6653>>ASSIGN   6695>>ASSIGN   6753>>ASSIGN   6754<<ASSIGN
CURR$XLATE_TABLE.LEVEL#
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:302  
      5816**DCL      6457<<ASSIGN
CURR$XLATE_TABLE.N_ENTRIES#
      5801**DCL      6645>>DOWHILE  6690>>DOWHILE
CURR$XLATE_TABLE.XLATES
      5856**DCL      6436--CALL
CURR$XLATE_TABLE.XLATES.NEW_KEY
      5897**DCL      6590<<ASSIGN   6649<<ASSIGN   6691<<ASSIGN
CURR$XLATE_TABLE.XLATES.OLD_KEY_LO
      5868**DCL      6587--IF       6646--IF
CURR_XLATE
      5183**DCL      6586<<ASSIGN   6587>>IF       6590>>ASSIGN   6591<<ASSIGN   6591>>ASSIGN   6645>>DOWHILE
      6646>>IF       6649>>ASSIGN   6651<<ASSIGN   6651>>ASSIGN   6654<<ASSIGN   6690>>DOWHILE  6691>>ASSIGN
      6693<<ASSIGN   6693>>ASSIGN   6696<<ASSIGN
CURR_XLATE_TABLE$
      5182**DCL      5775--IMP-PTR  6440<<ASSIGN   6454>>ASSIGN   6454>>CALL     6457>>ASSIGN   6459>>CALL
      6585<<ASSIGN   6587>>IF       6590>>ASSIGN   6644>>DOWHILE  6645>>DOWHILE  6646>>IF       6649>>ASSIGN
      6653<<ASSIGN   6653>>ASSIGN   6689>>DOWHILE  6690>>DOWHILE  6691>>ASSIGN   6695<<ASSIGN   6695>>ASSIGN
      6751<<ASSIGN   6752>>DOWHILE  6753>>ASSIGN   6754>>ASSIGN   6755>>CALL     6756<<ASSIGN
DEST_STREAM
      4358**DCL        86--PROC
DEST_STREAM.PORT$
      4384**DCL      5194--IMP-PTR  6380>>IF       6380>>IF       6387>>IF       6387>>IF       6387>>IF
      6387>>IF       6387>>IF       6395>>ASSIGN   6399>>ASSIGN   6424>>IF       6454>>ASSIGN   6454>>IF
      6454>>CALL     6454>>CALL     6463>>CALL     6476>>IF       6476>>CALL     6476>>CALL     6477>>ASSIGN
      6479>>IF       6480>>CALL     6480>>CALL     6482>>ASSIGN   6521>>CALL     6528>>ASSIGN   6529>>ASSIGN
      6540>>ASSIGN   6547>>ASSIGN   6556>>ASSIGN   6605>>CALL     6607>>ASSIGN   6616>>CALL     6617>>CALL
      6634>>ASSIGN   6635>>CALL     6649>>ASSIGN   6658>>ASSIGN   6658>>ASSIGN   6662>>ASSIGN   6662>>ASSIGN
      6691>>ASSIGN   6698>>ASSIGN   6719>>ASSIGN   6731>>CALL     6737>>ASSIGN   6745>>ASSIGN   6778>>ASSIGN
      6799>>IF       6800>>ASSIGN   6808>>CALL     6809>>ASSIGN   6830>>ASSIGN
DEST_STREAM.PROTECT
      4384**DCL      6387>>IF
DVBYTE IN PROCEDURE READ_SRC_RECORD
      6892**DCL      6889--PROC     7007<<ASSIGN
EOF
      5148**DCL      6602<>CALL     6610>>DOWHILE  6666<>CALL
EOF_FLAG IN PROCEDURE READ_SRC_RECORD
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:303  
      6893**DCL      6889--PROC     6962<<ASSIGN   7016<<ASSIGN
F$DCB.ACTPOS
      6342**DCL      6342--REDEF
F$DCB.ARS#
      6316**DCL      6316--REDEF
F$DCB.ATTR
      6335**DCL      6336--REDEF
F$DCB.BORROW
      6350**DCL      6350--REDEF    6350--REDEF    6350--REDEF
F$DCB.COMP#
      6330**DCL      6964>>IF
F$DCB.DCBNAME.L
      6364**DCL      6364--IMP-SIZ
F$DCB.EOMCHAR#
      6320**DCL      6320--REDEF
F$DCB.FCD#
      6329**DCL      6799>>IF
F$DCB.FLDID
      6345**DCL      6345--REDEF
F$DCB.FORM$
      6339**DCL      6339--REDEF
F$DCB.FSECT
      6355**DCL      6355--REDEF
F$DCB.FSN#
      6332**DCL      6332--REDEF    6332--REDEF    6333--REDEF
F$DCB.HEADER$
      6338**DCL      6338--REDEF
F$DCB.IXTNSIZE#
      6336**DCL      6336--REDEF
F$DCB.LASTSTA$
      6325**DCL      6325--REDEF
F$DCB.LVL
      6351**DCL      6351--REDEF
F$DCB.NAME#.C
      6326**DCL      6326--REDEF
F$DCB.NOEOF
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:304  
      6348**DCL      6348--REDEF
F$DCB.NRECS#
      6337**DCL      6337--REDEF
F$DCB.NRECX
      6356**DCL      6356--REDEF
F$DCB.OHDR
      6348**DCL      6348--REDEF
F$DCB.ORG#
      6331**DCL      6331--REDEF
F$DCB.PRECNO
      6354**DCL      6354--REDEF
F$DCB.RCSZ
      6360**DCL      6360--REDEF
F$DCB.RES#
      6327**DCL      6327--REDEF
F$DCB.SETX
      6339**DCL      6339--REDEF
F$DCB.TAB$
      6339**DCL      6339--REDEF
F$DCB.TDA
      6353**DCL      6354--REDEF
F$DCB.WSN#
      6327**DCL      6327--REDEF
FPT_CLOSE
      4938**DCL      6485<<ASSIGN   6490<>CALL     6705<>CALL     6722<>CALL     6804<>CALL     6816<>CALL
FPT_CLOSE.SN_
      4938**DCL      4938--REDEF
FPT_CLOSE.UTL_
      4939**DCL      4939--REDEF
FPT_CLOSE.V
      4943**DCL      6486--ASSIGN
FPT_CLOSE.V.DCB#
      4944**DCL      6487<<ASSIGN   6489<>CALL     6702<<ASSIGN   6704<>CALL     6719<<ASSIGN   6721<>CALL
      6800<<ASSIGN   6803<>CALL     6812<<ASSIGN   6815<>CALL
FPT_CLOSE.V.DISP#
      4947**DCL      6801<<ASSIGN   6813<<ASSIGN
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:305  
FPT_CLOSE.V.EXPIRE#
      4953**DCL      4953--REDEF
FPT_CLOSE.V.TYPE#
      4951**DCL      4951--REDEF
FPT_CLOSE.V.XTNSIZE#
      4948**DCL      4948--REDEF    4950--REDEF
FPT_CLOSE.V_
      4938**DCL      6486<<ASSIGN
FPT_OPEN
      5022**DCL      6493<<ASSIGN   6498<>CALL     6551<>CALL     6733<<ASSIGN   6740<>CALL     6826<>CALL
FPT_OPEN.ACCT_
      5026**DCL      6542<<ASSIGN
FPT_OPEN.ACSVEH_
      5024**DCL      5025--REDEF
FPT_OPEN.ALTKEYS_
      5030**DCL      5031--REDEF    5031--REDEF
FPT_OPEN.HDR_
      5029**DCL      5030--REDEF
FPT_OPEN.IFPARAM_
      5027**DCL      6547<<ASSIGN
FPT_OPEN.NAME_
      5023**DCL      6543<<ASSIGN
FPT_OPEN.SN_
      5022**DCL      6546<<ASSIGN
FPT_OPEN.TAB_
      5028**DCL      5029--REDEF
FPT_OPEN.UHL_
      5022**DCL      5023--REDEF    5023--REDEF
FPT_OPEN.V
      5031**DCL      6494--ASSIGN   6734--ASSIGN
FPT_OPEN.V.ACS#
      5042**DCL      6495<<ASSIGN   6539<<ASSIGN   6735<<ASSIGN   6820<<ASSIGN
FPT_OPEN.V.DCB#
      5031**DCL      6496<<ASSIGN   6501<>CALL     6540<<ASSIGN   6549<>CALL     6737<<ASSIGN   6739<>CALL
      6822<<ASSIGN   6825<>CALL
FPT_OPEN.V.FSN#
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:306  
      5062**DCL      5062--REDEF    5062--REDEF
FPT_OPEN.V.FUN#
      5041**DCL      6497<<ASSIGN   6541<<ASSIGN   6736<<ASSIGN   6821<<ASSIGN
FPT_OPEN.V.INITZ.SCRUB#
      5032**DCL      6538<<ASSIGN   6823<<ASSIGN
FPT_OPEN.V_
      5022**DCL      6494<<ASSIGN   6734<<ASSIGN
FPT_OPEN.WSN_
      5028**DCL      5028--REDEF
FPT_READ
      5096**DCL      6594<<ASSIGN   6992<>CALL
FPT_READ.BUF_
      5098**DCL      6978<<ASSIGN   6985<<ASSIGN
FPT_READ.KEY_
      5096**DCL      6596<<ASSIGN
FPT_READ.STATION_
      5099**DCL      5100--REDEF
FPT_READ.V
      5100**DCL      6595--ASSIGN
FPT_READ.V.DCB#
      5100**DCL      6597<<ASSIGN   6964--IF
FPT_READ.V.DVBYTE.CONT#
      5113**DCL      6969<<ASSIGN   6997<<ASSIGN
FPT_READ.V.DVBYTE.REREAD#
      5111**DCL      5111--REDEF
FPT_READ.V.INDX#
      5109**DCL      5109--REDEF
FPT_READ.V_
      5096**DCL      6595<<ASSIGN
HOLE
      4471**DCL        86--PROC     6373--IF       6373>>ASSIGN
HOLE#
      5179**DCL      6372<<ASSIGN   6373<<ASSIGN   6409>>DOWHILE  6661>>IF       6662>>ASSIGN
HOLE_KEY
      4480**DCL        86--PROC
HOLE_KEY.BYTES#
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:307  
      4484**DCL      6661>>IF
KEY_INCR
      4464**DCL        86--PROC     6403>>ASSIGN
L1$NODE.DESC.SPEC.V$
      5464**DCL      6421>>ASSIGN
L1$NODE.FLINK$
      5411**DCL      6429>>ASSIGN
L1_NODE$
      4911**DCL      5385--IMP-PTR  6418<<ASSIGN   6420>>DOWHILE  6421>>ASSIGN   6429<<ASSIGN   6429>>ASSIGN
M$CLOSE
      2460**DCL-ENT  6490--CALL     6722--CALL     6804--CALL
M$OPEN
      2460**DCL-ENT  6551--CALL     6740--CALL     6826--CALL
NB_BUFFER IN PROCEDURE READ_SRC_RECORD
      6896**DCL      6963<<ASSIGN   6965<<ASSIGN   6973>>CALL     6977>>ASSIGN   6994>>IF       6998<<ASSIGN
      6998>>ASSIGN
OALLOC_FAILED IN PROCEDURE READ_SRC_RECORD
      7015**LABEL    6973--CALLALT
OFREE_FAILED IN PROCEDURE READ_SRC_RECORD
      7015**LABEL    6987--CALLALT  7012--CALLALT
OPEN_SRC_XSA_FAILED
      6777**LABEL    6498--CALLALT
PORT
      5194**DCL      6424--IF       6463<>CALL     6616<>CALL     6617<>CALL     6635<>CALL
PORT.CURRENT
      5247**DCL      6605<>CALL     6731<>CALL
PORT.CURRENT.EOF
      5263**DCL      6698<<ASSIGN
PORT.CURRENT.KEY
      5259**DCL      6607<<ASSIGN   6649>>ASSIGN   6658--ASSIGN   6658--ASSIGN   6662--ASSIGN   6662--ASSIGN
      6691>>ASSIGN
PORT.DCB#
      5221**DCL      6387>>IF       6395>>ASSIGN   6399>>ASSIGN   6521<>CALL     6540>>ASSIGN   6719>>ASSIGN
      6737>>ASSIGN   6778<<ASSIGN   6799--IF       6800>>ASSIGN   6808<>CALL     6809<<ASSIGN
PORT.EXIST#
      5220**DCL      6380>>IF
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:308  
PORT.FILE_KEY
      5233**DCL      6454>>ASSIGN
PORT.FILE_KEY.REP#
      5235**DCL      6454>>IF
PORT.FILE_KEY.V$
      5235**DCL      6454>>CALL     6454>>CALL
PORT.FIT$
      5221**DCL      6547>>ASSIGN
PORT.INTRINSIC_PROTECT
      5220**DCL      6387>>IF
PORT.LAST_OP#
      5222**DCL      6556<<ASSIGN   6745<<ASSIGN   6830<<ASSIGN
PORT.LEVEL.DATA$
      5281**DCL      6479>>IF       6480>>CALL     6480>>CALL     6482<<ASSIGN
PORT.LEVEL.DATA_MODIFIED
      5281**DCL      6634<<ASSIGN
PORT.LEVEL.KEY_TYPE#
      5265**DCL      6387>>IF       6529<<ASSIGN
PORT.LEVEL.ORG#
      5265**DCL      6387>>IF       6387>>IF       6528<<ASSIGN
PORT.LEVEL.SPEC
      5277**DCL      6477<<ASSIGN
PORT.LEVEL.SPEC.REP#
      5279**DCL      6476>>IF
PORT.LEVEL.SPEC.V$
      5279**DCL      6476>>CALL     6476>>CALL
PREV_BUFFER$ IN PROCEDURE READ_SRC_RECORD
      6898**DCL      6968<<ASSIGN   6979>>IF       6984>>ASSIGN   6984>>ASSIGN   6985>>ASSIGN   6987>>CALL
      6987>>CALL     6989<<ASSIGN   7001<<ASSIGN
READ_FAILED_HARD IN PROCEDURE READ_SRC_RECORD
      7012**LABEL    6996--GOTO
READ_KEY
      5126**DCL      6596--ASSIGN
READ_KEY.BYTES#
      5130**DCL      6646>>IF       6661>>IF
READ_SRC_RECORD
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:309  
      6889**PROC     6602--CALL     6666--CALL
REKEY_FAILED
      6762**LABEL    6384--GOTO     6394--CALLALT  6426--CALLALT  6436--CALLALT  6459--CALLALT  6463--CALLALT
      6480--CALLALT  6504--CALLALT  6511--CALLALT  6521--CALLALT
SCAN_XLATE_TABLES
      6644**LABEL    6648--EXIT
SPEC
      5141**DCL      6598<<ASSIGN
SPEC.BYTES
      5145**DCL      6602<>CALL     6666<>CALL
SPEC.LENGTH#
      5145**DCL      6601<<ASSIGN
SPEC.REP#
      5145**DCL      6600<<ASSIGN
SPEC.TYPE#
      5145**DCL      6599<<ASSIGN
SRC$DCB.ACCT#
      5553**DCL      6542--ASSIGN   6549<>CALL
SRC$DCB.ACTPOS
      5569**DCL      5569--REDEF
SRC$DCB.ARS#
      5543**DCL      5543--REDEF
SRC$DCB.ATTR
      5562**DCL      5563--REDEF
SRC$DCB.BORROW
      5577**DCL      5577--REDEF    5577--REDEF    5577--REDEF
SRC$DCB.DCBNAME.L
      5591**DCL      5591--IMP-SIZ
SRC$DCB.EOMCHAR#
      5547**DCL      5547--REDEF
SRC$DCB.FCD#
      5556**DCL      6811>>IF       6819>>IF
SRC$DCB.FLDID
      5572**DCL      5572--REDEF
SRC$DCB.FORM$
      5566**DCL      5566--REDEF
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:310  
SRC$DCB.FSECT
      5582**DCL      5582--REDEF
SRC$DCB.FSN#
      5559**DCL      5559--REDEF    5559--REDEF    5560--REDEF
SRC$DCB.HEADER$
      5565**DCL      5565--REDEF
SRC$DCB.IXTNSIZE#
      5563**DCL      5563--REDEF
SRC$DCB.LASTSTA$
      5552**DCL      5552--REDEF
SRC$DCB.LVL
      5578**DCL      5578--REDEF
SRC$DCB.NAME#
      5553**DCL      6543--ASSIGN   6549<>CALL
SRC$DCB.NAME#.C
      5553**DCL      5553--REDEF
SRC$DCB.NOEOF
      5575**DCL      5575--REDEF
SRC$DCB.NRECS#
      5564**DCL      5564--REDEF    6408>>IF       6409>>DOWHILE
SRC$DCB.NRECX
      5583**DCL      5583--REDEF
SRC$DCB.OHDR
      5575**DCL      5575--REDEF
SRC$DCB.ORG#
      5558**DCL      5558--REDEF
SRC$DCB.PRECNO
      5581**DCL      5581--REDEF
SRC$DCB.PSN#
      5553**DCL      6545>>ASSIGN
SRC$DCB.RCSZ
      5587**DCL      5587--REDEF
SRC$DCB.RES#
      5554**DCL      5554--REDEF
SRC$DCB.SETX
      5566**DCL      5566--REDEF
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:311  
SRC$DCB.TAB$
      5566**DCL      5566--REDEF
SRC$DCB.TDA
      5580**DCL      5581--REDEF
SRC$DCB.WSN#
      5554**DCL      5554--REDEF
SRC$XSA_DATA
      5618**DCL      6711<>CALL     6834<>CALL
SRC$XSA_DATA.BYTES
      5646**DCL      6507--ASSIGN
SRC$XSA_DATA.LENGTH#
      5644**DCL      5646--IMP-SIZ  6711>>CALL     6834>>CALL
SRC$XSA_KEY
      5676**DCL      6714<>CALL     6837<>CALL
SRC$XSA_KEY.BYTES
      5704**DCL      6514--ASSIGN
SRC$XSA_KEY.LENGTH#
      5702**DCL      5704--IMP-SIZ  6714>>CALL     6837>>CALL
SRC_DCB
      4913**DCL      6399<<ASSIGN   6400--ASSIGN   6487>>ASSIGN   6496>>ASSIGN   6597>>ASSIGN   6702>>ASSIGN
      6716<>CALL     6809>>ASSIGN   6812>>ASSIGN   6822>>ASSIGN
SRC_DCB$
      4914**DCL      5537--IMP-PTR  6400<<ASSIGN   6408>>IF       6409>>DOWHILE  6542>>ASSIGN   6543>>ASSIGN
      6545>>ASSIGN   6549>>CALL     6549>>CALL     6811>>IF       6819>>IF
SRC_STREAM
      4252**DCL        86--PROC     6779<>CALL
SRC_STREAM.PORT$
      4278**DCL      6380>>IF       6380>>IF
SRC_XSA
      4882**DCL      6498<>CALL     6705<>CALL     6816<>CALL     6992<>CALL
SRC_XSA.ARS#
      4886**DCL      6999>>ASSIGN   7006>>ASSIGN
SRC_XSA.BBUF_.BOUND
      4890**DCL      6508<<ASSIGN
SRC_XSA.BBUF_.BUF$
      4891**DCL      6507<<ASSIGN
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:312  
SRC_XSA.DVBYTE
      4895**DCL      7007>>ASSIGN
SRC_XSA.EOMCHAR#
      4898**DCL      4899--REDEF
SRC_XSA.ERR.CODE
      4887**DCL      6994>>IF       7015>>IF
SRC_XSA.KBUF_.BOUND
      4888**DCL      6515<<ASSIGN
SRC_XSA.KBUF_.BUF$
      4889**DCL      6514<<ASSIGN
SRC_XSA.ORG
      4897**DCL      6501<>CALL     6502>>IF
SRC_XSA.SIG1
      4892**DCL      4892--REDEF
SRC_XSA.SIG2
      4892**DCL      4893--REDEF
SRC_XSA_DATA$
      4907**DCL      5618--IMP-PTR  6369<<ASSIGN   6504<>CALL     6507>>ASSIGN   6710>>IF       6711>>CALL
      6711>>CALL     6833>>IF       6834>>CALL     6834>>CALL
SRC_XSA_KEY$
      4908**DCL      5676--IMP-PTR  6370<<ASSIGN   6511<>CALL     6514>>ASSIGN   6713>>IF       6714>>CALL
      6714>>CALL     6836>>IF       6837>>CALL     6837>>CALL
TOTAL_ARS IN PROCEDURE READ_SRC_RECORD
      6897**DCL      6966<<ASSIGN   6999<<ASSIGN   6999>>ASSIGN   7000>>ASSIGN   7006>>ASSIGN
VD$BUFFER
      5734**DCL      6480<>CALL     6616<>CALL     6617<>CALL     6619<>CALL
VD$BUFFER.LENGTH#
      5760**DCL      5762--IMP-SIZ  6480>>CALL     6616>>CALL     6617>>CALL     6619>>CALL
VD$BUFFER IN PROCEDURE READ_SRC_RECORD
      6926**DCL      6987<>CALL     7012<>CALL
VD$BUFFER.BYTES IN PROCEDURE READ_SRC_RECORD
      6954**DCL      6978--ASSIGN   6984<<ASSIGN   6984>>ASSIGN   6985--ASSIGN
VD$BUFFER.LENGTH# IN PROCEDURE READ_SRC_RECORD
      6952**DCL      6954--IMP-SIZ  6977<<ASSIGN   6978>>ASSIGN   6984>>ASSIGN   6984>>ASSIGN   6985>>ASSIGN
      6985>>ASSIGN   6987>>CALL     7000<<ASSIGN   7006<<ASSIGN   7012>>CALL
VD$BUFFER_HEADER
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:313  
      6245**DCL      6504--CALL     6511--CALL     6973--CALL
VD$ERR.DCB#
      5969**DCL      6395<<ASSIGN
VD$FIT.FIT
      6307**DCL      6547--ASSIGN
VD$PORT.LEVEL.INTERNAL$
      6173**DCL      6416>>ASSIGN
VD$STREAM.PORT$
      6006**DCL      6416>>ASSIGN   6424>>IF
VD$TEXTC_REMOTE
      6201**DCL      6454<>CALL     6476<>CALL
VD$TEXTC_REMOTE.LENGTH#
      6230**DCL      6232--IMP-SIZ  6454>>CALL     6476>>CALL
VDA$FCLOSE
      4492**DCL-ENT  6779--CALL
VDA$PFLUSH
      4491**DCL-ENT  6463--CALL     6635--CALL
VDA$PWRITE
      4490**DCL-ENT  6617--CALL
VDG$EBREAK_ACKNOWLEDGE
      4501**DCL-ENT  6376--CALL     6612--CALL
VDG$ERRMSG
      4502**DCL-ENT  6394--CALL
VDG$ESCREECH
      4500**DCL-ENT  6383--CALL
VDG$MACC_FREKEY_CLOSE_DEST
      4509**DCL-ENT  6721--CALL     6803--CALL
VDG$MACC_FREKEY_CLOSE_ORIG
      4504**DCL-ENT  6489--CALL
VDG$MACC_FREKEY_CLOSE_SRC_XSA
      4508**DCL-ENT  6704--CALL     6815--CALL
VDG$MACC_FREKEY_OPEN_DEST
      4506**DCL-ENT  6549--CALL
VDG$MACC_FREKEY_OPEN_SRC_XSA
      4505**DCL-ENT  6501--CALL
VDG$MACC_FREKEY_PWRITE
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:314  
      4507**DCL-ENT  6616--CALL
VDG$MACC_FREKEY_REOPEN_DEST
      4510**DCL-ENT  6739--CALL
VDG$MACC_FREKEY_REOPEN_SRC
      4511**DCL-ENT  6825--CALL
VDG$MONERR
      4503**DCL-ENT  6553--CALL     6707--CALL     6724--CALL     6742--CALL     6770--CALL     6777--CALL
      6828--CALL     7019--CALL
VDG$OALLOC
      4494**DCL-ENT  6436--CALL     6504--CALL     6511--CALL     6973--CALL
VDG$OALLOC_DCB
      4495**DCL-ENT  6521--CALL
VDG$OCLEAR_LOCATION
      4498**DCL-ENT  6605--CALL     6731--CALL
VDG$OCOPY
      4499**DCL-ENT  6454--CALL
VDG$OFREE
      4496**DCL-ENT  6476--CALL     6480--CALL     6619--CALL     6711--CALL     6714--CALL     6755--CALL
      6834--CALL     6837--CALL     6987--CALL     7012--CALL
VDG$OFREE_DCB
      4497**DCL-ENT  6716--CALL     6808--CALL
VDG$XLATE_LOCATIONS
      4493**DCL-ENT  6459--CALL     6748--CALL
VDP$WERASE
      4489**DCL-ENT  6426--CALL
VD_$$MON_ACC.V#
      4641**DCL      6488>>IF       6500>>IF       6548>>IF       6615>>IF       6703>>IF       6720>>IF
      6738>>IF       6802>>IF       6814>>IF       6824>>IF
VD_$BY.V#
      4596**DCL      6405>>ASSIGN
VD_6E.ERR_TAIL$
      4550**DCL      5927--IMP-PTR  6371>>ASSIGN   6395>>ASSIGN   6762>>IF
VD_6E.INTERRUPT.STATE#
      4550**DCL      6375>>IF       6611>>IF
VD_6E.WINDOWS$
      4532**DCL      6416>>ASSIGN
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:315  
VD_BUFFER$
      5132**DCL      5734--IMP-PTR  6602<>CALL     6616>>CALL     6616>>CALL     6617>>CALL     6617>>CALL
      6619>>CALL     6619>>CALL     6666<>CALL
VD_BUFFER$ IN PROCEDURE READ_SRC_RECORD
      6891**DCL      6889--PROC     6926--IMP-PTR  6967<<ASSIGN   6972>>DOWHILE  6973<>CALL     6977>>ASSIGN
      6978>>ASSIGN   6978>>ASSIGN   6984>>ASSIGN   6984>>ASSIGN   6985>>ASSIGN   6985>>ASSIGN   7000>>ASSIGN
      7001>>ASSIGN   7002<<ASSIGN   7006>>ASSIGN   7012>>CALL     7012>>CALL     7014<<ASSIGN
VD_ERR$
      4909**DCL      6371<<ASSIGN   6762>>IF
VD_KEY_NUMERIC_BOF
      4656**DCL      6590>>ASSIGN
VD_KEY_NUMERIC_BOF.BYTES#
      4665**DCL      6587>>IF
VLP_SN
      5077**DCL      6546--ASSIGN
VLP_SN.NUM#
      5077**DCL      6544<<ASSIGN
VLP_SN.SN#
      5077**DCL      6545<<ASSIGN
WINDOW$SPEC
      5478**DCL      6426<>CALL
WINDOW$SPEC.OPERAND.STREAM$
      5519**DCL      6423>>IF       6424>>IF
WINDOWS$L0_NODE.HEAD$
      5375**DCL      6418>>ASSIGN
WINDOWS_L0_NODE$
      4910**DCL      5292--IMP-PTR  6416<<ASSIGN   6418>>ASSIGN
WINDOW_SPEC$
      4912**DCL      5478--IMP-PTR  6421<<ASSIGN   6422>>IF       6423>>IF       6424>>IF       6426>>CALL
XLATE_LOCATIONS_ROOT$
      5181**DCL      6436<>CALL     6440>>ASSIGN   6585>>ASSIGN   6748>>CALL     6751>>ASSIGN   6753<<ASSIGN
      6756>>ASSIGN
XSA$CLOSE
      4513**DCL-ENT  6705--CALL     6816--CALL
XSA$OPEN
      4513**DCL-ENT  6498--CALL
PL6.E3A0      #004=VDA$FREKEY File=VDA$FILE.:VDA5TSI                             FRI 07/04/97 11:05 Page:316  
XSA$READ
      4513**DCL-ENT  6992--CALL
