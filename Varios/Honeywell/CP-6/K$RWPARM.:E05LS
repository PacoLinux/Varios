

14:43 JUL 28 '97 K$RWPARM.:E05SI                                           1    
    1      /*M* K$RWPARM  Macro for structure used to pass information between KI and KC routines */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* MEC,MOC,EXM=20,CLM=20,CRM=80   */
    8
    9
   10                          /*F* NAME: K$RWPARM
   11
   12                          The K$RWPARM macro defines the parameter block used
   13                          by various communication and comgroup modules throughout
   14                          the system.  The K$RWPARM macro generates a different
   15                          structure depending on if the structure is to be used
   16                          on the Fep or on the Host.  The differences will be
   17                          pointed out below.
   18
   19                          On the Host, the K$RWPARM structure is used to pass
   20                          parameters between KI and KC routines.
   21                          The structure is also used to pass message header
   22                          information between the various communication layer
   23                          routines, KIA, KIS, KIT and KIN.
   24
   25                          On the Fep, the K$RWPARM structure is used to pass
   26                          parameters to the KNA routines that concern themselves
   27                          with VDOs: KNA$DECODE_VDO, KNA$BUILD_VDO, KNA$CHECK_VDO,
   28                          KNA$FCNO and KNA$FNCOU.
   29                          Parameters are passed between the various communication
   30                          layers on the FEP in the KN$NETPARM structure.
   31
   32                          The K$RWPARM structure contains the following:
   33                          */
   34
   35
   36      %MACRO K$RWPARM (NAME=RWPARM,STCLASS="",SIZ=0);
   37      %LSET LISTDIR='0'B;
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           2    
   38      %LSET LISTEXP='1'B;
   39      %LSET LISTCOM='0'B;
   40      %LSET LISTSUB='1'B;
   41      %LSET L6=BITBIN(MODE_FEP);
   42      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   43      %IF (SUBSTR(STR,0,6)='STATIC') OR
   44      (SUBSTR(STR,0,8)='CONSTANT') OR
   45      (SUBSTR(STR,0,3)='EXT');
   46      %LSET INIT=CHARTEXT('INIT');
   47      %LSET EINIT=CHARTEXT('');
   48      %ELSE;
   49      %LSET INIT=CHARTEXT('/*');
   50      %LSET EINIT=CHARTEXT('*/');
   51      %ENDIF;
   52
   53
   54      %IF (MODE_FEP);
   55      DCL 1 NAME STCLASS ALIGNED,
   56            2 MSG$ PTR %INIT(ADDR(NIL))%EINIT,
   57            2 MSGC$ REDEF MSG$ CPTR,
   58      %ELSE;
   59      DCL 1 NAME STCLASS DALIGNED,
   60            2 MSG$ PTR %INIT(ADDR(NIL))%EINIT,
   61      %ENDIF;
   62                          /*K* MSG$ -  PTR.
   63                          contains a pointer to the user level data.  In the DCB
   64                          case this is the actual data the user receives or writes.
   65                          */
   66            2 RBLK$ REDEF MSG$ PTR,
   67
   68            2 MSGSZ SBIN WORD %INIT(SIZ)%EINIT,
   69                          /*K* MSGSZ - SBIN WORD.
   70                          contains the messages size pointed to by MSG$.
   71                          */
   72            2 STATION CHAR(8) %INIT(' ')%EINIT,
   73                          /*K* STATION - CHAR(8).
   74                          contains the station name for the read or
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           3    
   75                          write from a comgroup.
   76                          */
   77            2 MSGTYP CHAR(8) %INIT(' ')%EINIT,
   78                          /*K* MSGTYPE - CHAR(8).
   79                          contains the MSGTYP to read for or the message
   80                          type on a write.
   81                          */
   82            2 TYC BIT(%(36-L6*4)) %INIT('0'B)%EINIT,
   83                          /*K* TYC - BIT(36)-host; BIT(32)-fep.
   84                          contains the result of the operation.
   85                          */
   86
   87
   88            2 BLKREC,
   89              3 BLKU# UBIN(%(18-L6*2)) UNAL %INIT(0)%EINIT,
   90      %IF NOT(MODE_FEP);
   91              3 BLK# REDEF BLKU# UNAL, /*used by kqc$get*/
   92                4 * BIT(1) UNAL,
   93                4 T UBIN(8) UNAL,
   94                4 * BIT(1) UNAL,
   95                4 B UBIN(8) UNAL,
   96      %ENDIF;
   97                          /*K* BLKREC.BLKU# - UBIN(18)-host; UBIN(16)-fep.
   98                          contains the block number for a message.
   99                          This is used for symbiont devices.
  100                          */
  101
  102
  103              3 RECU# UBIN(%(18-L6*2)) UNAL %INIT(0)%EINIT,
  104      %IF NOT(MODE_FEP);
  105              3 REC# REDEF RECU# UNAL, /*used by kqc$get*/
  106                4 * BIT(1) UNAL,
  107                4 T UBIN(8) UNAL,
  108                4 * BIT(1),
  109                4 B UBIN(8) UNAL,
  110      %ENDIF;
  111                          /*K* BLKREC.RECU# - UBIN(18)-host; UBIN(16)-fep.
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           4    
  112                          contains the record number for a message.
  113                          This is used for symbiont devices.
  114                          */
  115
  116
  117            2 MARKER REDEF BLKREC BIT(%(36-L6*4)),
  118                          /*K* MARKER - BIT(36)-host; BIT(32)-fep.
  119                          contains the marker to be put into the message or
  120                          the marker received.
  121                          See KN$LDCT.MARKER, KNA$SSN.MARKER, KV$VDOVLP_MRK.ID.
  122                          */
  123            2 DVE CALIGNED,
  124              3 DVBYTE UNAL,
  125                          /*K* DEV.DVBYTE
  126                          contains the DVBYTE for this operation.
  127                          */
  128      %IF NOT(MODE_FEP);
  129                4 * BIT(1) %INIT('0'B)%EINIT,
  130      %ENDIF;
  131                4 BP BIT(1) %INIT('1'B)%EINIT,
  132                4 VFC BIT(1) %INIT('0'B)%EINIT,
  133                4 REREAD REDEF VFC BIT(1),
  134                4 BIN BIT(1) %INIT('0'B)%EINIT,
  135                4 TRANS BIT(1) %INIT('0'B)%EINIT,
  136                4 RRR BIT(1) %INIT('0'B)%EINIT,
  137                4 NODAT BIT(1) %INIT('0'B)%EINIT,
  138                4 DCBHDR BIT(1) %INIT('0'B)%EINIT,
  139                4 CONT BIT(1) %INIT('0'B)%EINIT,
  140
  141
  142              3 EOMCHAR CHAR(1) CALIGNED %INIT(BITASC('501'O))%EINIT,
  143                          /*K* DVE.EOMCHAR - CHAR(1).
  144                          contains the end of message character on a read.
  145                          */
  146              3 VFC REDEF EOMCHAR CHAR(1) CALIGNED,
  147                          /*K* DVE.VFC - CHAR(1).
  148                          contains the VFC character on a write.
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           5    
  149                          */
  150
  151
  152            2 EOFNONE BIT(1) UNAL %INIT('0'B)%EINIT,
  153                          /*K* EOFNONE - BIT(1).
  154                          set to give user an altret if no data pending.
  155                          */
  156            2 READMLT BIT(1) %INIT('0'B)%EINIT,
  157                          /*K* READMLT - BIT(1).
  158                          set to move VDOs directly into the user buffer,
  159                          without decoding them.
  160                          */
  161      %IF NOT(MODE_FEP);
  162            2 CVTDAT BIT(1) UNAL %INIT('0'B)%EINIT, /*used by kia$applc*/
  163            2 * BIT(6) UNAL %INIT('0'B)%EINIT,
  164      %ELSE;
  165            2 EOM_EOR BIT(1) %INIT('0'B)%EINIT,
  166                          /*K* EOM_EOR - BIT(1).
  167                     since DCB.EOMCHAR is only 8 bits in the FEP, this bit indicates
  168                     that its content of DCB.EOMCHAR should be %G_EOM_EOR#.
  169                     */
  170            2 * BIT(5) UNAL %INIT('0'B)%EINIT,
  171      %ENDIF;
  172
  173
  174            2 FC UBIN(%(9-L6*1)) CALIGNED %INIT(0)%EINIT,
  175            2 RSN REDEF FC UBIN BYTE CALIGNED,
  176                          /*K* RSN - UBIN BYTE.
  177                          set by KIA$APPLC and KNA$APE if there is no
  178                          throttling to do the write.  RSN will contain one
  179                          of the following:
  180                          .fif
  181                           } KV_BLKRSN_MAXNMBRCR
  182                           } KV_BLKRSN_MAXNMBBYT
  183                           .fin
  184                           */
  185            2 MSGID UBIN(%(36-L6*4)) ALIGNED %INIT(0)%EINIT,
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           6    
  186                          /*K* MSGID - UBIN WORD.
  187                          contains the comgroup message id.  Assigned by
  188                          the comgroup.
  189                          */
  190            2 MSGIDR REDEF MSGID,
  191
  192
  193      %IF NOT(MODE_FEP);
  194              3 JUNK UBIN(4) UNAL,
  195      %ENDIF;
  196              3 P1 UBIN(8) UNAL,
  197              3 P2 UBIN(8) UNAL,
  198              3 P3 UBIN(8) UNAL,
  199              3 P4 UBIN(8) UNAL,
  200
  201
  202            2 MSGIDXT BIT(%(36-L6*4)) ALIGNED %INIT('0'B)%EINIT,
  203                          /*K* MSGIDXT - BIT(36)-host; BIT(32)-fep.
  204                          contains the comgroup message id extension.
  205                          */
  206            2 IP$ REDEF MSGIDXT PTR,
  207                          /*K* IP$ - PTR.
  208                          On the host, IP$ contains a pointer to the start
  209                          of a msessage in the input circular queue;
  210                          IP$->KI$QMHDR.
  211
  212                          On the fep, IP$ is used to pass the address of
  213                          a VLP_FLDATR to KNA$BUILD_VDO.
  214                          */
  215            2 ERR UBIN(%(36-L6*4)) ALIGNED %INIT(0)%EINIT,
  216                          /*K* ERR - UBIN(36)-host; NA-fep.
  217                          contains the result of the operation.
  218                          See K$RWPARM_ERR_equ in file K_SUBS_C.
  219                          */
  220            2 ERP REDEF ERR, /*used by kcd$cgdev*/
  221              3 * UBIN(%(18-L6*2)) UNAL,
  222              3 P,
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           7    
  223                4 * UBIN(%(9-L6*1)) UNAL,
  224      %IF NOT(MODE_FEP);
  225                4 * BIT(1),
  226      %ENDIF;
  227                4 CODE UBIN(8) UNAL,
  228
  229
  230            2 UHDR$ PTR %INIT(ADDR(NIL))%EINIT,
  231                          /*K* UHDR$ - PTR.
  232                          contains a pointer to the application header.
  233                          The structure for these headers are define in KV$VDO.
  234                          */
  235            2 UHDRSZ UBIN %INIT(0)%EINIT,
  236                          /*K* UHDRSZ - UBIN WORD.
  237                          size of the header pointed to by UHDR$.
  238                          */
  239
  240
  241      %IF NOT(MODE_FEP);  /* for fep calls see KN$NETPARM for these parameters*/
  242            2 LDCT$ PTR %INIT(ADDR(NIL))%EINIT,
  243                          /*K* LDCT$ - PTR.
  244                          contains a pointer to the LDCT.
  245                          */
  246            2 FPT$ PTR %INIT(ADDR(NIL))%EINIT,
  247                          /*K* FPT$ - PTR.
  248                          contains a pointer to the K$FPT_CONNECT_OSI.  Set
  249                          by session prior to calling transport with the
  250                          K_TCONNECT_REQ or K_TCONNECT_RSP function.
  251                          Used only with OSI Session connections.
  252                          */
  253            2 TCTX$ REDEF FPT$ PTR,
  254                          /*K* TCTX$ - PTR.
  255                          contains a pointer to the TCTX.  This is a REDEF of
  256                          FPT$ and is set by transport to contains the address
  257                          of the transport context block prior to calling
  258                          session.  Used only with OSI Session connections.
  259                          */
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           8    
  260            2 FUNCTION SBIN %INIT(0)%EINIT,
  261                          /*K* FUNCTION - SBIN.
  262                          contains the function code for this call.
  263                          See the EQUs for K_function in file K_SUBS_C.
  264                          */
  265            2 FEX SBIN %INIT(0)%EINIT,
  266                          /*K* PARAMER.FEX - SBIN.
  267                          contains a value that represents the other end-point.
  268                          Session and transport assume this value to be the
  269                          node number of the other end-point.  KIQ routines
  270                          assumes this value to be an index into the FEI Context
  271                          table.  Network takes care of switching from node
  272                          number to FEI index on outpound messages and from
  273                          FEI index to node number on inbound messages.
  274                          */
  275            2 SHDR$ PTR %INIT(ADDR(NIL))%EINIT,
  276                          /*K* SHDR - PTR.
  277                          contains a pointer to the session header.
  278                          */
  279            2 SHDRSZ UBIN %INIT(0)%EINIT,
  280                          /*K* SHDRSZ - UBIN WORD.
  281                          contains the size of header pointed to by SHDR$.
  282                          */
  283            2 THDR$ PTR %INIT(ADDR(NIL))%EINIT,
  284                          /*K* THDR$ - PTR.
  285                          contains a pointer to the transport header.
  286                          */
  287            2 THDRSZ UBIN %INIT(0)%EINIT,
  288                          /*K* THDRSZ - UBIN WORD.
  289                          contains the size of header pointed to by THDR$.
  290                          */
  291            2 SSN_CRDT REDEF THDRSZ SBIN,
  292                          /*K* SSN_CRDT - SBIN WORD.
  293                          is a redef of THDRSZ.  Used by OSI Session when
  294                          the function code is K_TCREDIT to pass the credit
  295                           adjustment value.
  296                           */
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           9    
  297            2 NHDR$ PTR %INIT(ADDR(NIL))%EINIT,
  298                          /*K* NHDR - PTR.
  299                          contains a pointer to the network header.
  300                          */
  301            2 NHDRSZ UBIN %INIT(0)%EINIT,
  302                          /*K* NHDRSZ - UBIN WORD.
  303                          contains the size of header pointed to by NHDR$.
  304                          */
  305            2 RECTYPE UBIN %INIT(0)%EINIT, /* Record code                           */
  306            2 TRANS$ PTR %INIT(ADDR(NIL))%EINIT, /* not needed in kn$netparm*/
  307                          /*K* TRANS$ - PTR.
  308                          contains a pointer to translate table.
  309                          */
  310            2 * UBIN HALF UNAL %INIT(0)%EINIT,
  311
  312            2 * UBIN BYTE UNAL %INIT(0)%EINIT,
  313
  314            2 LOCAL_FEP UBIN BYTE UNAL %INIT(0)%EINIT,
  315                          /*K* LOCAL_FEP - UBIN BYTE.
  316                          Contains the node number of the local fep.
  317                          Used by transport.
  318                          */
  319            2 TCTX# UBIN HALF UNAL %INIT(0)%EINIT,
  320                          /*K* TCTX# - UBIN (18).
  321                          contains the index into the transport context
  322                          block pointer array.
  323                          */
  324            2 OSIFLGS CALIGNED,
  325              3 * BIT(9) UNAL %INIT('0'B)%EINIT,
  326
  327            2 QOS UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  328                          /*K* QOS - UBIN BYTE.
  329                          */
  330            2 SRC_ADDR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  331                          /*K* SRC_ADDR$ - PTR.
  332                          Contains a pointer to the source network address. (NSAP)
  333                          Used only with OSI Session connctions.
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           10   
  334                          */
  335            2 DST_ADDR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  336                          /*K* DST_ADDR$ - PTR.
  337                     Contains a pointer to the destination network address. (NSAP)
  338                     Used only with OSI Session connctions.
  339                     */
  340            2 VLP$ PTR %INIT(ADDR(NIL))%EINIT, /* not needed in kn$netparm          */
  341                          /*K* VLP$ - PTR.
  342                          contains a pointer to VLPs for a message.
  343                          */
  344      %ENDIF;
  345
  346
  347            2 MSG_ERRCODE BIT(%(36-l6*4)) %INIT('0'B)%EINIT, /* Error code from message */
  348
  349            2 ORG UBIN BYTE UNAL %INIT(0)%EINIT,
  350            2 STRID REDEF ORG UBIN BYTE UNAL,
  351
  352            2 VDOFLGS CALIGNED,
  353      %IF NOT(MODE_FEP);
  354              3 * BIT(1) UNAL %INIT('0'B)%EINIT,
  355      %ENDIF;
  356              3 DLTSTR BIT(1) UNAL %INIT('0'B)%EINIT,
  357              3 NEWSSN BIT(1) UNAL %INIT('0'B)%EINIT,
  358              3 REDSTR BIT(1) UNAL %INIT('0'B)%EINIT,
  359              3 WAIT BIT(1) UNAL %INIT('0'B)%EINIT,
  360              3 SEND BIT(1) UNAL %INIT('0'B)%EINIT,
  361              3 INCNMBRCR BIT(1) UNAL %INIT('0'B)%EINIT,
  362              3 * BIT(2) UNAL %INIT('0'B)%EINIT,
  363            2 SPARE REDEF VDOFLGS UBIN BYTE CALIGNED,
  364
  365            2 MRKTYP UBIN BYTE UNAL %INIT(0)%EINIT, /* Marker type                  */
  366            2 STR UBIN BYTE UNAL %INIT(1)%EINIT, /* Stream                          */
  367            2 MAXNMBRCR UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  368            2 MAXNMBBYT UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  369            2 MAXRCRBYTSIZ UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  370            2 V$ PTR %INIT(ADDR(NIL))%EINIT,
14:43 JUL 28 '97 K$RWPARM.:E05SI                                           11   
  371            2 KEY$ PTR %INIT(ADDR(NIL))%EINIT,
  372            2 VSZ UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  373            2 FLDID UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  374            2 PRMID REDEF FLDID UBIN(%(18-L6*2)) CALIGNED,
  375
  376            2 ACTPOS UBIN(%(18-L6*2)) UNAL %INIT(0)%EINIT,
  377                          /*K* ACTPOS - UBIN(18)-host; UBIN(16)-fep.
  378                          contains the column number of activation.
  379                          ACTPOS is returned on reads.
  380                          */
  381            2 KEYTYPE UBIN BYTE CALIGNED %INIT(0)%EINIT,
  382            2 NRECS REDEF KEYTYPE UBIN BYTE CALIGNED,
  383
  384            2 KEYSZ UBIN BYTE CALIGNED %INIT(0)%EINIT;
  385      %MEND;

