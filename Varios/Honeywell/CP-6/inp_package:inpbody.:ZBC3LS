

10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          1    
    1      /*M*        zb_input$inp_package:c     */
    2      /*T*/
    3      /*P*        NAME:       zb_input$inp_package:c
    4                  PURPOSE:    This routine feeds a character stream to the user
    5                  DESCRIPTION:These routines serve as an interface to input
    6                              characters from an input stream.  It allows
    7                              the user to choose how the input should be
    8                              read from files or text and it gives the
    9                              data to the user one character at a time.
   10      */
   11      #include    <alloc:h>
   12      #include    <valloc:h>
   13      #include    <system:h>
   14      #include    <inp_types:h>
   15      #include    <errno:h>
   16      #include    <string:h>
   17      #include    <ctype.h>
   18
   19      #ifndef     INP_NPUSHBACK
   20      #define     INP_NPUSHBACK     2
   21      #endif
   22
   23      #ifndef     DEBUG_NUM
   24      int   debug_num = 1;
   25      #define     DEBUG_NUM   debug_num++
   26      #endif
   27
   28      #if         INP_NPUSHBACK <   1
   29      #define     INP_NPUSHBACK     1
   30      #endif
   31
   32      #ifndef     INP_BUFSIZE
   33      #define     INP_BUFSIZE       BUFSIZ
   34      #endif
   35
   36      #if         INP_NPUSHBACK >   INP_BUFSIZE/2
   37      this is ridiculous!  You deserve what you get!!
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          2    
   38      #endif
   39
   40      #ifdef      INP_TYPE
   41      extern      INP_TYPE          INP_VAR;
   42      #endif
   43
   44      #define     PRIVATE
   45
   46      struct      buffer_header {
   47                     struct buffer_header    *next;
   48                     int                     bh_size;   /* buf size    */
   49                     char                    *bh_text;  /* ptr to text */
   50                     char                    *bh_ipp;   /* stacked ipp */
   51      #ifdef      INP_TYPE
   52                     INP_TYPE                bh_i;      /* user defined*/
   53      #endif
   54                     int                     bh_file;   /* file flag   */
   55                     char                    bh_eofreturned; /*eof flag*/
   56                     int                     LS_flag;  /*Listing on/off*/
   57                  };
   58
   59      struct      i_buf {
   60                     struct   i_buf *next;
   61                     char           ib_text[INP_BUFSIZE + INP_NPUSHBACK];
   62                  };
   63
   64
   65      struct      zb_files    zb_fileinfo;
   66
   67      char                                *_ipp = 0;
   68      PRIVATE  struct   buffer_header     *head = 0;
   69      PRIVATE  int                        stdin_flag = 0;
   70      PRIVATE  struct   i_buf             *i_ptr = 0;
   71      int      no_base_file = 1;
   72      char     *base_name = 0;
   73      char     *update_name = 0;
   74
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          3    
   75      /*F*     NAME:       pushbuf
   76               PURPOSE:    Allocate a buffer for each file to be read
   77               DESCRIPTION:This routine allocates a buffer for each file
   78                           to be read so input can be suspended in the
   79                           middle of a buffers input
   80      */
   81      /*D*     NAME:    pushbuf
   82               CALL:    pushbuf()
   83               INPUT:   None
   84               OUTPUT:
   85                        This routine returns a pointer to the buffer
   86                        allocated minus the number of characters that
   87                        the user wants to be able to pushback onto the
   88                        input stream
   89               DESCRIPTION:
   90                  This routine simply allocates a buffer that is to
   91                  contain the input stream of the current file that is
   92                  open. Note that not all of the buffer is given to the
   93                  user. This so that if the user wants to be able to push
   94                  characters back onto the input stream it will still
   95                  work as advertised.
   96      */
   97
   98
   99      PRIVATE char *
  100      pushbuf()
  101      {
  102         register struct   i_buf *ib =
  103         (struct i_buf *) Malloc (sizeof (struct i_buf));
  104
  105         if (!ib) return 0;
  106         ib->next = i_ptr;
  107         i_ptr = ib;
  108
  109      /*    Keep part of the buffer for a good PUSHBACK           */
  110         return &(ib->ib_text[INP_NPUSHBACK-1]);
  111      }
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          4    
  112
  113
  114      /*F*        NAME:       push_bh
  115                  PURPOSE:    Pushes off information when input sources change
  116                  DESCRIPTION:Pushes off information when input sources change
  117                              so that they can be restored when input
  118                              returns to the old input source
  119      */
  120      /*D*        NAME:    push_bh
  121                  CALL:    push_bh()
  122                  INPUT:   None
  123                  OUTPUT:
  124                           This routine returns the top position of the
  125                           stack of input saved information
  126                  DESCRIPTION:
  127                     This routine pushes off all the necessary information
  128                     about the current input source that is being read from.
  129                     This includes:
  130                        The current buffer in use
  131                        The position being read in the current buffer
  132                        User supplied variable
  133                        The size of the current buffer
  134      */
  135
  136      PRIVATE     struct   buffer_header *
  137      push_bh()
  138      {
  139         register struct   buffer_header *bh;
  140
  141         if (bh = head) {
  142            bh->bh_ipp = _ipp;
  143      #ifdef   INP_TYPE
  144            if (bh->bh_file) { bh->bh_i = INP_VAR; }
  145      #endif   INP_TYPE
  146         }
  147
  148         if (!(bh = (struct buffer_header *) Malloc ( sizeof (struct buffer_header)))) return 0;
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          5    
  149         bh->next = head;
  150         bh->bh_eofreturned = 0;
  151         head = bh;
  152         return bh;
  153      }
  154
  155      /*F*        NAME:       pop_bh
  156                  PURPOSE:    Restores information about a previous input source
  157                  DESCRIPTION:Restores information about a previous input source
  158                              that was suspended by the user
  159      */
  160      /*D*        NAME:    pop_bh
  161                  CALL:    pop_bh()
  162                  INPUT:   None
  163                  OUTPUT:
  164                           This routine returns a 1 if there was a information
  165                           to be restored from the stack else it returns a 0
  166                  DESCRIPTION:
  167                     This routine pops off all the information that was
  168                     saved by the routine push_bh().
  169      */
  170
  171      PRIVATE  int
  172      pop_bh()
  173      {
  174         register struct   buffer_header  *bh = head;
  175      #ifdef INP_TYPE
  176         int PopFile = 0;
  177      #endif
  178
  179         if (bh->bh_file) {   /* Unstack a file */
  180            struct   i_buf *ib;
  181
  182            ib = i_ptr->next;
  183            vfree ((char *) i_ptr);
  184            i_ptr = ib;
  185      #ifdef INP_TYPE
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          6    
  186            PopFile = 1;
  187      #endif
  188         }
  189
  190         bh = bh->next;
  191         vfree ((char *) head);
  192         head = bh;
  193
  194         if (!bh) {  /* No more entries   */
  195            head = (struct buffer_header *) 0;
  196            return 0;
  197         }
  198
  199         _ipp = bh->bh_ipp;   /* Restore previous input pointer   */
  200         zb_LS_flag = bh->LS_flag;
  201      #ifdef   INP_TYPE
  202         if (PopFile) { INP_VAR = bh->bh_i; }
  203      #endif   INP_TYPE
  204
  205         return 1;
  206      }
  207
  208
  209      /*F*     NAME:       readblock
  210               PURPOSE:    Read the next record from the current input source
  211               DESCRIPTION:This routine reads the next input source from the
  212                           current input file using the read routine
  213                           that uses XUU services
  214      */
  215      /*D*     NAME:    readblock
  216               CALL:    readblock (buf,n)
  217               INPUT:
  218                        char  buf[] - A pointer to a buffer
  219               OUTPUT:
  220                        char  buf[] - An array that contains the record
  221                                      that was read from the input file
  222                        int   n     - The number of bytes in the current
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          7    
  223                                      record
  224                        This routine returns a 1 on a successful read and
  225                        a 0 on an unsuccessful read (like EOF)
  226               DESCRIPTION:
  227                  This routine calls and gets the next record from the input
  228                  file and puts a '\0' at the end of the record on a
  229                  successful read and returns a 1 else it returns a 0
  230      */
  231
  232      PRIVATE int
  233      readblock (buf,n)
  234      char  buf[];
  235      int   *n;
  236      {
  237
  238         int   ret_val = 0;
  239         char  *result;
  240         char  *errmsg;
  241         zb_fileinfo.bufsize = INP_BUFSIZE;
  242         zb_fileinfo.buffer = buf;
  243         if ((ret_val = ZB_INPUT_READ (&zb_fileinfo)) == 0) {
  244            *n = 0;
  245            return 0;
  246         }
  247         else if (ret_val < 0) {
  248            result = strerror(errno);
  249            errmsg = Malloc (strlen(result));
  250            strcpy (errmsg, result);
  251            zb_listing_error (errmsg, DEBUG_NUM, 0, 8);
  252            Free (errmsg);
  253            *n = 0;
  254            return 0;
  255         }
  256         buf = zb_fileinfo.buffer;
  257         *n = zb_fileinfo.nbytes;
  258         buf[*n] = '\0';
  259         zb_listing_append (DEBUG_NUM,buf);
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          8    
  260         AtBoBF (buf, n);
  261         return   1;
  262      }
  263
  264
  265      /*F*     NAME:       mk_filename
  266               PURPOSE:    This routine concatenates a dir and a filename
  267               DESCRIPTION:This routine concatenates a dir and a filename
  268      */
  269      /*D*     NAME:    mk_filename
  270               CALL:    mk_filename (dir, file, newname)
  271               INPUT:
  272                        char  *dir  - the directory part for newname
  273                        char  *file - the file name part for newname
  274               OUTPUT:
  275                        char **newname - A pointer to the new filename
  276                                         that was created with dir and file
  277               DESCRIPTION:
  278                  This routine creates the next filename that needs to
  279                  be opened by the InsertFile. The variables dir and file
  280                  can come in several different varieties:
  281                     1) file '.' dir
  282                     2) dir (up to '.') file rest of dir
  283                     3) replace ? in dir with file
  284                  If a newname can be created a 1 is returned else a 0
  285      */
  286
  287      PRIVATE int
  288      mk_filename(dir, file, newname)
  289      register char *dir, *file;
  290      char **newname;
  291      {
  292         int dirtype, newlen;
  293         char *p, *strindex();
  294         register char *dst;
  295         char  *q = 0;
  296         int   dirlen = 0;
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          9    
  297         int   fillen = 0;
  298
  299         dirtype = 0, newlen = 2;
  300         dirlen = strlen(dir) + 1;
  301         fillen = strlen(file);
  302         p = memchr(dir, '.', dirlen);
  303         if (p) dirtype = 1;
  304         if (q = memchr(dir, '?', dirlen)) dirtype = 2;
  305
  306         newlen += dirlen + fillen;
  307         dst = Malloc((unsigned) (newlen));
  308         if (!dst) return 0;
  309         *newname = dst;
  310
  311         switch(dirtype)    {
  312
  313         case 0:   /***  file '.' dir   ***/
  314            memcpy(dst, file, fillen);
  315            dst[fillen] = '.';
  316            memcpy(dst+fillen+1, dir, dirlen);
  317            break;
  318
  319         case 1:   /***  dir (up to '.') file (rest of dir)  ***/
  320            newlen = p - dir;
  321            memcpy(dst, dir, newlen);
  322            memcpy(dst+newlen, file, fillen);
  323            memcpy(dst+newlen+fillen, p, dirlen-newlen);
  324            break;
  325
  326         case 2:   /**   Replace '?' in dir with file        ***/
  327            newlen = q - dir;
  328            memcpy(dst, dir, newlen);
  329            memcpy(dst+newlen, file, fillen);
  330            memcpy(dst+newlen+fillen, q+1, dirlen-newlen-1);
  331            break;
  332         }
  333         return 1;
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          10   
  334      }
  335
  336
  337      /*F*     NAME:       InsertFile
  338               PURPOSE:    Suspend current input and start input from a file
  339               DESCRIPTION:Suspend current input and start input from a file
  340                           supplied by the caller
  341      */
  342      /*D*     NAME:    InsertFile
  343               CALL:    InsertFile (filnam, table, result)
  344               INPUT:
  345                        char *filnam   - The name of the file to open
  346                        char *table[]  - A table of directories that are
  347                                         to be searched for filnam
  348               OUTPUT:
  349                        char **result  - Contains the entire filename
  350                                         that was opened (comes from mk_filename)
  351               DESCRIPTION:
  352                  This routine suspends input from the current input source
  353                  and starts input from the file supplied by the user.
  354                  It opens the new file and allocates the buffer needed for
  355                  reading the data from the file. If the file is opened
  356                  ok, the routine returns a 1 else it returns a 0.
  357      */
  358
  359      int
  360      InsertFile (filnam, table, result)
  361      char *filnam;
  362      char *table[];
  363      char **result;
  364      {
  365         char  *newfn = 0;
  366         char  *acctloc = 0;
  367         char  *slashloc = 0;
  368         int   len = 0;
  369
  370         if (!filnam) {
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          11   
  371            if (!OpenSource (IN_BASE, 0, 0))
  372               return 0;
  373            *result = base_name;
  374            return 1;
  375         }
  376         zb_fileinfo.filetype = IN_INCLUDE;
  377         zb_fileinfo.optui = 0;
  378         if (no_base_file) {
  379            zb_fileinfo.key = Malloc (12 * sizeof (char));
  380               zb_listing_input_init (filnam,filnam,(char *) 0,&(zb_fileinfo.nbytes),zb_fileinfo.key);
  381         }
  382         if (!filnam) stdin_flag = 1;
  383         else {
  384            len = strlen(filnam);
  385            slashloc = memchr(filnam, '/', len);
  386            if (slashloc) {           /* check to see if '/' goes to '$'  */
  387               char     *pos = filnam;
  388               if ((!memcmp(pos, "DP", 2)) ||
  389                  (!memcmp(pos, "dp", 2)) ||
  390                  (!memcmp(pos, "LT", 2)) ||
  391                  (!memcmp(pos, "lt", 2))) {
  392                  pos += 2;
  393                  if ((pos == slashloc) || (*pos == '#') ||
  394                     (((pos + 1) <= slashloc) && (isdigit(*pos)) &&
  395                        (isdigit(*(pos + 1))) && ((*(pos + 2) == '#') ||
  396                           (*(pos + 2) == '/')))) {   /* Dont change this
  397                                                         slash */
  398                     slashloc++;
  399                     slashloc = memchr(slashloc, '/', len - (slashloc - filnam - 1));
  400                  }
  401               }
  402               while (slashloc) {
  403                  *slashloc++ = '$';
  404                  slashloc = memchr(slashloc, '/', len - (slashloc - filnam - 1));
  405               }
  406            }
  407            if ((table == 0) || (acctloc = strindex (filnam, '.')) != 0) {
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          12   
  408               /* Do not look in table (yet) */
  409               zb_fileinfo.filename = filnam;
  410               if (!ZB_INPUT_OPEN (&zb_fileinfo)) {
  411                  if (table) {
  412                     *acctloc++ = ':';
  413                     while (acctloc = strchr(acctloc, '.')) {
  414                        *acctloc++ = ':';
  415                     }
  416                     goto look_in_table;
  417                  }
  418                  return 0;
  419               }
  420            }
  421            else {
  422      look_in_table:
  423               while (*table) {
  424                  if (!mk_filename (*table++, filnam, &newfn)) {
  425                     return 0;
  426                  }
  427                  zb_fileinfo.filename = newfn;
  428                  if (ZB_INPUT_OPEN (&zb_fileinfo)) {
  429                     filnam = zb_fileinfo.filename;
  430                     break;
  431                  }
  432                  vfree (newfn);
  433                  newfn = 0;
  434               }
  435            }
  436         }
  437
  438         if (zb_fileinfo.open_flag) {
  439            register struct   buffer_header  *bh = push_bh();
  440
  441            if (!bh) {
  442               if (!stdin_flag) ZB_INPUT_CLOSE (&zb_fileinfo);
  443               return 0;
  444            }
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          13   
  445
  446            if (no_base_file) {
  447               no_base_file = 0;
  448               bh->LS_flag = zb_LS_flag;
  449            }
  450            else {
  451               zb_LS_flag = bh->LS_flag = zb_LS_include_flag;
  452               zb_listing_include (filnam, 0, 0);
  453            }
  454
  455            if (!(_ipp = bh->bh_text = pushbuf()) || !readblock (_ipp,&(bh->bh_size))) {
  456      /* Dont fail here it could have been an empty file */
  457               *_ipp = '\0';
  458            }
  459            bh->bh_file = zb_fileinfo.filetype;
  460            *result = filnam;
  461            return 1;
  462         }
  463         return 0;
  464      }
  465
  466       /*F*    NAME:       InsertText
  467               PURPOSE:    Changes input from current source to a text string
  468               DESCRIPTION:Changes input from current source to a text string that is a user supplied parameter
  469      */
  470      /*D*     NAME:    InsertText
  471               CALL:    InsertText (text,length)
  472               INPUT:
  473                        char *text  - The text that is to be used as the
  474                                      input source
  475                        int  length - The length of the text string
  476               OUTPUT:  None
  477               DESCRIPTION:
  478                  This routine suspends input from the current source
  479                  and makes the new input source a text string. This
  480                  routine returns a 1 if everything worked ok else it
  481                  returns a 0.
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          14   
  482      */
  483      int
  484      InsertText (text,length)
  485      char  *text;
  486      int   length;
  487      {
  488         register struct   buffer_header  *bh = push_bh();
  489
  490         if (!bh) return 0;
  491         bh->LS_flag = 0;
  492         bh->bh_size = length;
  493         _ipp = bh->bh_text = text;
  494         bh->bh_file = IN_TEXT;
  495         return 1;
  496      }
  497
  498
  499      int
  500      OpenSource (filetype, optui, list_update)
  501      int   filetype;
  502      unsigned int   optui;
  503      unsigned int   list_update;
  504      {
  505         base_name = Malloc(132);
  506         update_name = Malloc (132);
  507         no_base_file = 0;
  508         zb_fileinfo.key = Malloc (12 * sizeof(char));
  509         zb_fileinfo.filetype = filetype;
  510         zb_fileinfo.optui = optui;
  511         zb_fileinfo.list_update = list_update;
  512         if (!ZB_GETFILENAME (&filetype, base_name, update_name)) {
  513            base_name = (char *) 0;
  514            update_name = (char *) 0;
  515         }
  516         if (filetype == IN_BASE)
  517            update_name = (char *) 0;
  518         zb_listing_input_init ("funcname", base_name, update_name,
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          15   
  519                                &(zb_fileinfo.nbytes), zb_fileinfo.key);
  520         if (!ZB_INPUT_OPEN (&zb_fileinfo))
  521            goto No_such_file;
  522         if (zb_fileinfo.open_flag) {
  523            register struct   buffer_header  *bh = push_bh();
  524            if (!bh) {
  525               if (!stdin_flag)
  526                  ZB_INPUT_CLOSE (&zb_fileinfo);
  527               goto No_such_file;
  528            }
  529            bh->LS_flag = zb_LS_flag;
  530            if (!(_ipp = bh->bh_text = pushbuf()) ||
  531               (!readblock (_ipp,&bh->bh_size)))      {
  532               *_ipp = '\0';
  533            }
  534            bh->bh_file = zb_fileinfo.filetype;
  535            return 1;
  536         }
  537      No_such_file:
  538         base_name = (char *) 0;
  539         update_name = (char *) 0;
  540         zb_listing_input_init ("funcname",base_name,update_name,&(zb_fileinfo.nbytes),zb_fileinfo.key);
  541         return 0;
  542      }
  543
  544      /*F*     NAME:       loadbuf
  545               PURPOSE:    This routine loads the buffer with the next record from the current input source
  546               DESCRIPTION:This routine loads the buffer with the next record from the current input source
  547      */
  548      /*D*     NAME:    loadbuf
  549               CALL:    loadbuf()
  550               INPUT:   None
  551               OUTPUT:  None
  552               DESCRIPTION:
  553                  This routine is called whenever the defined routine
  554                  loadchar encounters a '\0'. This character either means
  555                  the end of the buffer has been found or there is actually
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          16   
  556                  a '\0' in the input (not likely). If a file is the
  557                  current input source the last INP_PUSHBACK characters must
  558                  be saved off so a good pushback can be implemented.
  559                  Once this is done the next record is read from the
  560                  current file. If this read fails the routine calls
  561                  AtEoIF. And the next time this routine is called it pops
  562                  the last input source that was found.
  563      */
  564      /*  loadbuf() is called if LoadChar meets a '\0' character
  565          which may be the end-of-buffer mark of the current input
  566          buffer.  The '\0' could be genuine although not likely.
  567          Note: this routine is exported due to its occurence in the definition
  568          of LoadChar [input.h], that is defined as a macro.
  569      */
  570      int
  571      loadbuf()
  572      {
  573         register struct buffer_header *bh = head;
  574         static   char buf[INP_NPUSHBACK + 1];
  575         int      FromFile;
  576
  577         if (!bh) {      /* stack exhausted, EOF on sourcefile */
  578            return EOI;
  579         }
  580
  581         if (_ipp < &(bh->bh_text[bh->bh_size])) {
  582                /* a genuine '\0' character has been seen */
  583            return '\0';
  584         }
  585
  586         FromFile = bh->bh_file;
  587
  588         if (FromFile) {
  589      #if INP_NPUSHBACK > 1
  590            register char *so = &(bh->bh_text[bh->bh_size]);
  591            register char *de = bh->bh_text;
  592            register int i = INP_NPUSHBACK - 1;
10:57 AUG 20 '97 zbm$input$inp_package:c.:ZBC3TSI                          17   
  593
  594            while (i-- > 0) {
  595                /* make sure PushBack will work */
  596               *--de = *--so;
  597            }
  598      #endif
  599            if (
  600                readblock(bh->bh_text, &(bh->bh_size))
  601                &&
  602                bh->bh_size > 0
  603                   )  {
  604               _ipp = bh->bh_text;
  605               return *_ipp++;
  606            }
  607         }
  608
  609
  610         if (!bh->bh_eofreturned) {
  611            bh->bh_eofreturned = 1;
  612            _ipp--;
  613            if (FromFile) {
  614               if (AtEoIF()) return EOI;
  615            }
  616            else {
  617               if (AtEoIT()) return EOI;
  618            }
  619         }
  620
  621
  622         if (pop_bh()) {
  623            if (*_ipp) return *_ipp++;
  624            if (zb_fileinfo.level != -1) return loadbuf();
  625         }
  626         _ipp = &buf[INP_NPUSHBACK];
  627         return EOI;
  628      }

