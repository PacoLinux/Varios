/*M* id_x6_xa:c   -- decodes Parameter IDs x6, x7, x8, x9, xA */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc06   (id_x6_xa:c)
        PURPOSE: decoder function for the Parameter IDs x6 to xA
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
#include "MODEST_Cc09"     /* "defines:h" */
 
 
int decode_x6(status,i,position,flag)
int i, position, flag;
char status[];
{
 
  char octet_count, nibble1, nibble2, nibble3, nibble4, c_count;
  int octet, count, length;
 
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
/*  printf ("length = %x\n",length); */
/* length = 27 hex -- the x6 only has 11 bytes + 6 FRU */
/* + 9 bytes of Extent Parameter                       */
 
  if ( length == 39 )
    length = length - 9;
 
  octet_count = '0';
  for ( ; (position+2 <= i) && (length > 1); )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
 
                               /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Addressee No Longer Busy\n");
        if (octet & BIT_1)
          printf("         - Operational Transition\n");
        if (octet & BIT_2)
          printf("         - Ready Transition\n");
        if (octet & BIT_3)
          printf("         - Operation Timeout\n");
        if (octet & BIT_4)
          printf("         - Physical Interface Check\n");
        if (octet & BIT_6)
          printf("         - Environmemtal Error\n");
        if (octet & HEX_05)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_05));
        break;
 
      case OCTET_2:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Data Check (on Raw Data)\n");
        if (octet & BIT_1)
          printf("         - Uncorrectable Data Check\n");
        if (octet & BIT_2)
          printf("         - Fatal Error\n");
        if (octet & BIT_3)
          printf("         - Hardware Write Protected\n");
        if (octet & BIT_5)
          printf("         - Command Failure\n");
        if (octet & HEX_0B)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_0B));
        break;
 
      case OCTET_3:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_3)
          printf("         - Data Overrun\n");
        if (octet & BIT_4)
          printf("         - Reallocation Space Exhausted\n");
        if (octet & BIT_7)
          printf("         - Unexpected Master Status\n");
        if (octet & HEX_E6)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_E6));
        break;
 
      case OCTET_4:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Statistics Log Full\n");
        if (octet & BIT_1)
          printf("         - Defect Directory Full\n");
        if (octet & BIT_3)
          printf("         - Position Lost\n");
        if (octet & HEX_2F)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_2F));
        break;
 
      case OCTET_5:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - IPI Port Enable Failed\n");
        if (octet & BIT_1)
          printf("         - Error Recovery Limit Reached\n");
        if (octet & BIT_3)
          printf("         - Format Table may be corrupted\n");
        if (octet & BIT_4)
          printf("         - Voltage Fault\n");
        if (octet & BIT_5)
          printf("         - Logic Temperature Alert\n");
        if (octet & BIT_7)
          printf("         - Write Transition Fault\n");
        if (octet & HEX_22)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_22));
        break;
 
      case OCTET_6:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Invalid Bus Control\n");
        if (octet & BIT_1)
          printf("         - Invalid Parameter\n");
        if (octet & BIT_3)
          printf("         - Unsupported Bus Control context\n");
        if (octet & BIT_4)
          printf("         - Data Bus Control Late\n");
        if (octet & BIT_5)
          printf("         - Head Offset Fault\n");
        if (octet & BIT_6)
          printf("         - Data Strobe Fault\n");
        if (octet & HEX_21)
          printf("   %x   -- No such code -- Reserved\n",(octet&HEX_21));
        break;
 
      case OCTET_7:
        nibble3 = nibble1;
        nibble4 = nibble2;
        c_count = octet_count;
        break;
 
      case OCTET_8:
        printf(" Octet %c to %c = %c%c%c%c ",
               c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
        printf("  - Drive Ending Status\n");
        drive_end_status(octet);
        break;
 
      case OCTET_9:
        nibble3 = nibble1;
        nibble4 = nibble2;
        c_count = octet_count;
        octet_count = 'A' - 1;
        break;
 
      case OCTET_A:
        printf(" Octet %c to %c = %c%c%c%c ",
               c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
        printf("  - Command Ending Status\n");
/*               octet = ascii_to_dig(nibble1,nibble2);    */
/*               cmd_end_status(octet);     */
        cmd_end_status(nibble3,nibble4,nibble1,nibble2);
        break;
 
      case OCTET_B:
        if (flag != 2)
          printf(" Octet %c = %c%c -- Drive's Status/Error Codes\n",
                 octet_count,nibble1,nibble2);
        else   {
          printf(" Octet %c to 1A are Drive's Status/Error Codes\n",octet_count);
          printf("  = %c%c",nibble1,nibble2);
          for (count=15;(count > 0) && (position+2 < i) && (length >=0);count--)  {
            nibble1 = status[position++];
            nibble2 = status[position++];
            length--;
            printf(" %c%c",nibble1,nibble2);
          }
        }  /*end else*/
        break;
 
      case OCTET_C:
        printf("\n Octet 1B to 1E are FRUs\n");
        printf("  = %c%c",nibble1,nibble2);
        for (count=3;(count > 0) && (position+2 < i) && (length >=0);count--)   {
          nibble1 = status[position++];
          nibble2 = status[position++];
          length--;
          printf(" %c%c",nibble1,nibble2);
        }
        break;
 
      case OCTET_D:
        if (flag != 2)
          printf("\n Octet 1F = %c%c -- Fault Code\n",nibble1,nibble2);
        else   {
          printf("\n Octet 1F to 26 are Faults Code\n",octet_count);
          printf("  = %c%c",nibble1,nibble2);
          for (count=7;(count > 0) && (position+2 < i) && (length >=0);count--)  {
            nibble1 = status[position++];
            nibble2 = status[position++];
            length--;
            printf(" %c%c",nibble1,nibble2);
          }
        }  /*end else*/
        length = -1;      /* to bust out of for loop */
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}   /*end  decode_x6*/
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
 
int decode_x7(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2, nibble3, nibble4, c_count;
  int octet, length;
 
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
                                /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Invalid Packet Length\n");
        if (octet & BIT_1)
          printf("         - Invalid Command Reference Number\n");
        if (octet & BIT_2)
          printf("         - Invalid Slave Address\n");
        if (octet & BIT_3)
          printf("         - Invalid Facility Address\n");
        if (octet & HEX_0C)
          printf("         - No such code - Reserved\n");
        if (octet & BIT_6)
          printf("         - Invalid Opcode\n");
        if (octet & BIT_7)
          printf("         - Invalid Modifier\n");
        break;
 
      case OCTET_2:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_D0)
          printf("   %x  -- No such data -- Reserved\n",(octet&HEX_D0));
        if (octet & BIT_4)
          printf("         - Invalid Parameter\n");
        if (octet & BIT_5)
          printf("         - Missing Parameter\n");
        if (octet & BIT_6)
          printf("         - Reserved Value Not Equal to Zero\n");
        if (octet & BIT_7)
          printf("         - Invalid Combination\n");
        break;
 
      case OCTET_3:
      case OCTET_4:
      case OCTET_6:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_FF)
          printf("   %c%c  -- No such data -- Octet reserved\n",
                 nibble1,nibble2);
        break;
 
      case OCTET_5:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Cylinder or Sector not Reallocated\n");
        if (octet & BIT_1)
          printf("         - High Partial Track\n");
        if (octet & BIT_2)
          printf("         - Attempted to Abort an Abort Command\n");
        if (octet & BIT_3)
          printf("         - Master Sector Defects not added to Defect List\n");
        if (octet & BIT_4)
          printf("         - Drive Reserved to other Port\n");
        if (octet & BIT_5)
          printf("         - Data Transmission Failure\n");
        if (octet & HEX_03)
          printf("   %x  -- No such data --  Reserved\n",(octet&HEX_03));
        break;
 
      case OCTET_7:
        nibble3 = nibble1;
        nibble4 = nibble2;
        c_count = octet_count;
        break;
 
      case OCTET_8:
        printf(" Octet %c to %c = %c%c%c%c  ",
               c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
        printf("  - Physical Cylinder Address\n");
        octet = ascii_to_dig(nibble1,nibble2);
        break;
 
      case OCTET_9:
        printf(" Octet %c = %c%c  ",octet_count,nibble1,nibble2);
        printf("  - Physical Head Number\n");
        octet_count = 'A' - 1;
        break;
 
      case OCTET_A:
        printf(" Octet %c = %c%c  ",octet_count,nibble1,nibble2);
        printf("  - Physical Sector Number\n");
        length = -1;     /* to bust out of for loop */
        break;
    }  /*end switch*/
  }  /*end for loop*/
 
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}  /*end  decode_x7*/
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
 
int decode_x8(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2;
  int octet, length;
 
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
                                 /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Command Aborted\n");
        if (octet & BIT_1)
          printf("         - Command Sequence Terminated\n");
        if (octet & BIT_2)
          printf("         - Unexpected Command from Terminated Sequence\n");
        if (octet & BIT_3)
          printf("         - Command Chain Terminated\n");
        if (octet & BIT_4)
          printf("         - Unexpected Command from Terminated Chain\n");
        if (octet & BIT_5)
          printf("         - Command Order Terminated\n");
        if (octet & BIT_6)
          printf("         - Unexpected Command from Terminated Order\n");
        if (octet & BIT_7)
          printf("   01    - No such code - Reserved\n");
        break;
 
      case OCTET_2:
      case OCTET_3:
      case OCTET_4:
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_FF)
          printf("    %c%c  -- No such data -- Octet reserved\n",
                 nibble1,nibble2);
        break;
 
      case OCTET_5:
        printf(" Octet %x to n - Extended Substatus\n",octet_count);
        printf("          = %c%c",nibble1,nibble2);
        break;
 
      default:
        printf(" %c%c",nibble1,nibble2);
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}   /*end  decode_x8*/
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
int decode_x9(status,i,position,flag)
int i, position, flag;
char status[];
{
  char octet_count, nibble1, nibble2, nibble3, nibble4, c_count;
  int octet, count, length;
 
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
/*  printf ("the parm length = %d\n",length);*/
  octet_count = '0';
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
                  /* octet 5 thru octet 8 data address are left out */
    if ((flag != 2) && (octet_count == '5'))   {
      octet_count = '9';
      length = length - 4;
    }
 
                      /* decode Octet -- case  '#' is equal octet # */
   switch (octet_count)   {
     case OCTET_1:
       printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
       if (octet & BIT_0)
         printf("         - Loggomg Data Appended\n");
       if (octet & BIT_1)
         printf("         - Abort Received - no command\n");
       if (octet & BIT_2)
         printf("         - Abort Received - Status Pending\n");
       if (octet & BIT_3)
         printf("         - Abort Received - Not Operational\n");
       if (octet & BIT_4)
         printf("         - Anticipated Error\n");
       if (octet & BIT_5)
         printf("         - Anticipated Data Error\n");
       if (octet & HEX_03)
         printf("   %x    - No such data - Reserved\n",(octet&HEX_03));
       break;
 
     case OCTET_2:
       printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
       if (octet & BIT_0)
         printf("         - Defect Directory Threshold Exceeded\n");
       if (octet & BIT_1)
         printf("         - Error Retry Performed\n");
       if (octet & BIT_2)
         printf("         - Data Retry Performed\n");
       if (octet & BIT_3)
         printf("         - Motion Retry Performed\n");
       if (octet & BIT_4)
         printf("         - Data Correction Performed\n");
       if (octet & BIT_5)
         printf("         - Soft Error\n");
       if (octet & BIT_6)
         printf("         - Release of Unreserved Addressee\n");
       if (octet & BIT_7)
         printf("         - Request Diagnostic Control Command\n");
       break;
 
     case OCTET_3:
       printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
       if (octet & BIT_0)
         printf("         - Statistic Log Request\n");
       if (octet & BIT_6)
         printf("         - Asynchronous Event Occurence\n");
       if (octet & BIT_7)
         printf("         - Master Terminated\n");
       if (octet & HEX_7C)
         printf("   %x    - No such data - Reserved\n",(octet&HEX_7C));
       break;
 
     case OCTET_4:
       printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
       if (octet & HEX_FF)
         printf("  %c%c   - No such data - Reserved\n",nibble1,nibble2);
       break;
 
     /* Data Address -- octet 5 - 8 */
     case OCTET_5:
       nibble3 = nibble1;
       nibble4 = nibble2;
       c_count = octet_count + 2;
       break;
     case OCTET_6:
       printf(" Octet %c to %c = %c%c%c%c",
              c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
       break;
     case OCTET_7:
       nibble3 = nibble1;
       nibble4 = nibble2;
       break;
     case OCTET_8:
       printf("%c%c%c%c",nibble3,nibble4,nibble1,nibble2);
       printf(" ---- Data Address\n");
       break;
 
     /* Drive Status Code octet 9 - A */
     case OCTET_9:
       printf(" Octet %c = %c%c ",octet_count,nibble1,nibble2);
       printf("   - Drive Ending Status\n");
       octet = ascii_to_dig(nibble1,nibble2);
       drive_end_status(octet);
       octet_count = 'A' - 1;
       break;
 
     case OCTET_A:
       printf(" Octet %c = %c%c ",octet_count,nibble1,nibble2);
       printf("   - Command Ending Status\n");
       cmd_end_status('0','0',nibble1,nibble2);
       break;
 
     /* Octet B - C */
     case OCTET_B:
       printf(" Octet %c to %c = %c%c",octet_count,octet_count+1,nibble1,nibble2);
       break;
     case OCTET_C:
       printf("%c%c -- Count of Additional Soft Error\n",nibble1,nibble2);
       break;
 
     /* Octet D - E */
     case OCTET_D:
       printf(" Octet %c to %c = %c%c",octet_count,octet_count+1,nibble1,nibble2);
       break;
     case OCTET_E:
       printf("%c%c -- Total Number of Retries & ECC Corrections\n",
              nibble1,nibble2);
       break;
 
     case OCTET_F:
       if (flag != 2)
         printf(" Octet %c = %c%c -- Drive's Status/Error Codes\n",
                octet_count,nibble1,nibble2);
       else   {
         printf(" Octet %c to 1E are Drive's Status/Error Codes\n",octet_count);
         printf("  = %c%c",nibble1,nibble2);
         for (count = 15; (count > 0) && (position < i) && (length >=0); count--) {
           nibble1 = status[position++];
           nibble2 = status[position++];
           length--;
           printf(" %c%c",nibble1,nibble2);
         }
       }  /*end else*/
       break;
 
     case OCTET_G:
       printf("\n Octet 20 to 23 are FRUs\n");
       printf("  = %c%c",nibble1,nibble2);
       for (count = 3; (count > 0) && (position < i) && (length > 1); count--)   {
         nibble1 = status[position++];
         nibble2 = status[position++];
         printf(" %c%c",nibble1,nibble2);
       }
       break;
 
     case OCTET_H:
       if (flag != 2)
         printf("\n Octet 24 = %c%c -- Fault Code\n",nibble1,nibble2);
       else   {
         printf("\n Octet 24 to 2B are Faults\n",octet_count);
         printf("  = %c%c",nibble1,nibble2);
         for (count = 7;(count > 0) && (position < i) && (length >=0); count--)  {
           nibble1 = status[position++];
           nibble2 = status[position++];
           length--;
           printf(" %c%c",nibble1,nibble2);
         }
       }  /*end else*/
       length = -1;      /* to bust out of for loop */
       break;
    }  /*end switch*/
  }  /*end for loop*/
 
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return(position);
}   /*end  decode_x9*/
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
int decode_xA(status,i,position)
int i, position;
char status[];
{
  char octet_count, nibble1, nibble2;
  int octet, length;
 
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
                                /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_3)
          printf("         - Response Packet Truncated\n");
        if (octet & HEX_EF)
          printf("   %x    - No such code - Reserved\n",(octet&HEX_EF));
        break;
 
      case OCTET_3:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_5)
          printf("         - Data Length Difference\n");
        if (octet & BIT_6)
          printf("         - Block Not Found\n");
        if (octet & HEX_F9)
          printf("   %x    - No such code - Reserved\n",(octet&HEX_F9));
        break;
 
      case OCTET_2:
      case OCTET_4:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_FF)
          printf("    %c%c   --  No such data -- Octet reserved\n",
                 nibble1,nibble2);
        break;
 
      case OCTET_5:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Other Port Disabled\n");
        if (octet & HEX_7F)
          printf("   %x    - No such code - Reserved\n",(octet&HEX_7F));
        break;
 
      case OCTET_6:
        printf(" Octet %c to Octet n\n",octet_count);
        printf("No such data -- Octet reserved\n");
        printf("  =");
 
      default:
        printf(" %c%c",nibble1,nibble2);
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}   /*end  decode_xA*/
