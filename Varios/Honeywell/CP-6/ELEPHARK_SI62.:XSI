/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
INITIALIZE: PROC  ALTRET;
 
%INCLUDE B$JIT;
%INCLUDE B$USER;
%INCLUDE B_ERRORS_C;
%INCLUDE B_SEGIDS_C;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE CP_6_SUBS;
%INCLUDE SS_SCHED_C;
%EJECT;
/****
*
*  Miscellaneous FPTs
*
****/
 
%FPT_INT     (FPTN                     = FPT_INT,
              UENTRY=UCALLDB );
 
%FPT_MONINFO (FPTN                     = FPT_MONINFO,
              MONINFO=MONINFO,
              MONPTRS=MONPTRS,
              SITEINFO=SITEINFO,
              STCLASS="SYMREF" );
%VLR_MONINFO (FPTN                     = MONINFO,
              STCLASS="SYMREF" );
%VLR_MONPTRS (FPTN                     = MONPTRS,
              STCLASS="SYMREF" );
%VLR_SITEINFO(FPTN                     = SITEINFO,
              STCLASS="SYMREF" );
 
%FPT_PRIV    (FPTN                     = FPT_PRIV,
              PRIV="%( PR_SPCLMM# | PR_EXMM# | PR_MSYS# )",
              AUTH=YES );
 
%FPT_SAD     (FPTN                     = SADTIGR,
              USERSID=%SPCL1SID,
              MONSID=%TIGRSID,
              STCLASS=CONSTANT );
 
%FPT_SAD     (FPTN                     = SADIS,
              USERSID=%SPCL2SID,
              MONSID=%ISSID,
              STCLASS=CONSTANT );
 
%FPT_XCON    (FPTN                     = FPT_XCON,
              UENTRY=UCALLDX );
 
%FPT_WRITE   (FPTN                     = PUT_MSG,
              DCB=M$LO,
              STCLASS="SYMREF" );
 
%FPT_OPEN    (FPTN                     = FPT_OPEN,
              ACS=DIRECT,
              ASN=FILE,
              CTG=YES,
              DCB=F$OUT,
              DISP=NAMED,
              EXIST=OLDFILE,
              FUN=CREATE,
              NAME=NAME_OPEN,
              ORG=KEYED );
%VLP_NAME    (FPTN                     = NAME_OPEN,
              NAME='MEMORYLOG' );
 
%FPT_CLOSE   (FPTN                     = CLOSE_SYMBOL,
              DCB=F$SYMBOL,
              DISP=SAVE );
%EJECT;
/****
*
*  External references
*
****/
 
DCL F$OUT                    DCB;
DCL F$SYMBOL                 DCB;
 
DCL PUT_MESG                 ENTRY(1);
DCL UCALLDB                  ENTRY     ASYNC;
DCL UCALLDX                  ENTRY     ASYNC;
DCL SYMINIT                  ENTRY(1)  ALTRET;
DCL SYMSRCHPTR               ENTRY(2)  ALTRET;
DCL SYMRELDS                 ENTRY     ALTRET;
 
DCL B$JIT$                   PTR       SYMREF;
DCL RQH$                     PTR       SYMREF;
DCL 1 RQH REDEF RQH$,
      2 *                    BIT(24),
      2 SEGID#               BIT(12);
 
/****
*
*  Miscellaneous items
*
****/
 
DCL I_AM_A_GHOST             BIT(1)    SYMREF;
 
DCL SNULL                    UBIN      SYMREF;
 
DCL 1 S_RQH_LIT  CONSTANT,
      2 L                    UBIN(9)   CALIGNED INIT(LENGTHC('S_RQH')),
      2 C                    CHAR(0)   CALIGNED INIT('S_RQH');
 
DCL 1 M_MON_LIT  CONSTANT,
      2 L                    UBIN(9)   CALIGNED INIT(LENGTHC('M:MON.:SYS')),
      2 C                    CHAR(0)   CALIGNED INIT('M:MON.:SYS');
%EJECT;
/****
*
*  Here we go!
*
****/
 
    IF B$JIT$->B$JIT.MODE = %M_GHOST# THEN
        I_AM_A_GHOST= %YES#;
    ELSE
        I_AM_A_GHOST= %NO#;
 
    CALL PUT_MESG('ELEPHARK A00 here\');
 
    CALL M$SPRIV(FPT_PRIV)  WHENALTRETURN DO; /* Try to turn on SPCLMM        */
        IF B$JIT.PRIV.ACTIVE & %PR_SPCLMM#  OR/* Do they at least have SPCLMM */
           B$JIT.PRIV.ACTIVE & %PR_EXMM#    THEN  /* or EXMM?                 */
           ;                                  /* Yep.                         */
        ELSE DO;                              /* Nope, Bad news.              */
           CALL PUT_MESG('** Insufficient privilege (SPCLMM or EXMM)!\');
           GOTO ALT_RETURN;
           END;
        END;
 
    CALL M$SAD(SADTIGR)  ALTRET( SAD_NEWS );
    CALL M$SAD(SADIS)  WHENALTRETURN DO;
SAD_NEWS:
        CALL PUT_MESG('**SAD PMME failed!\');
        GOTO ALT_RETURN;
        END;
 
    CALL M$MONINFO(FPT_MONINFO)  WHENALTRETURN DO;
        CALL PUT_MESG('**MONINFO PMME failed!\');
        GOTO ALT_RETURN;
        END;
 
    CALL SYMINIT(M_MON_LIT);
    CALL SYMSRCHPTR(S_RQH_LIT,RQH$);          /* Get the ADDR of S_RQH        */
    CALL SYMRELDS;
    RQH.SEGID#= SADIS.V.USERSID#;
    CALL M$CLOSE( CLOSE_SYMBOL );
 
    IF SUBSTR(SITEINFO.VERSION#,0,3) < 'C00' THEN
        SNULL= %SS_SNULL-1;
    ELSE
        SNULL= %SS_SNULL;
 
    IF I_AM_A_GHOST THEN
        CALL M$XCON(FPT_XCON);                /* Take exit control            */
    ELSE
        CALL M$INT(FPT_INT);                  /* Take BREAK control           */
 
    FPT_OPEN.V.XTNSIZE#= MAXIMUM(MONINFO.MUAIS#/4,10);
    FPT_OPEN.V.IXTNSIZE#= FPT_OPEN.V.XTNSIZE#;
    CALL M$OPEN( FPT_OPEN )  WHENALTRETURN DO;/* OPEN the LOG file (MEMORYLOG)*/
       CALL PUT_MESG('**Unable to OPEN log file.\');
       CALL M$MERC;
       CALL M$XXX;
       END;
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END INITIALIZE;
%EOD;
/*M* SYMBOL - SYMBOL SEARCH ROUTINES FOR ANLZ */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D*    NAME: SYMSRCH
        CALL: CALL SDSRCH(SYM,OUT$) ALTRET;
        INPUT:   SYM - TEXTC SYMBOL TO FIND.
                 OUT$ - POINTER TO B$SDEF OR B$EDEF BLOCK IS
                        RETURNED IN OUT$.
        DESCRIPTION:
           SDSRCH is called to search for a SYMDEF.  EDSRCH
        is called to search for an ENTDEF.  If the search is
        successful OUT$ points to the B$SDEF or B$EDEF block.  If
        the alternate return is taken the error code is in DA_SYMERR.
                                                                   */
/**/
/**/
/*D*    NAME: SYMINIT
        CALL: CALL SYMINIT(FID) ALTRET;
        INPUT:   FID - RUN UNIT CONTAINING SYMBOLS.
        DESCRIPTION:
           SYMINIT initializes symbol search data to obtain
        SYMDEFs and ENTDEFs from the specified run unit.  If the
        alternate return is taken the error code is in DA_SYMERR.
 
        DA_SYMBOLS_D is the static data module associated with these
        routines.
                                                                   */
/*D*    NAME: SYMSRCHPTR
        CALL: CALL SDSRCHPTR(SYM,OUT$) ALTRET;
        DESCRIPTION:
           This call is the same as SDSRCH
        except the pointer returned in OUT$ is the IS pointer to the
        location of the requested SYMDEF.
                                                                   */
/*D*    NAME: IC2PED
        CALL: CALL IC2PED(IC,OUT$) ALTRET;
        DESCRIPTION:
           IC2PED is called to search for the PRIMARY ENTDEF that
        is closest to IC.  If the search is successful OUT$ points to
        the B$EDEF block. No error code is set if the alternate return
        is taken.
                                                                   */
/*X* DDA */
SYMSRCH: PROC(SYM,OUT$) ALTRET;
DCL 1 SYM,
      2 L UBIN BYTE UNAL,
      2 C CHAR(SYM.L);
DCL OUT$ PTR;
/**/
 
%EQU E$DA_NO_SYMBOLS = 200;
%EQU E$DA_SYM_NOT_FOUND = 201;
 
%INCLUDE B$OBJECT_C;
/**/
/* GLOBAL DATA */
/**/
DCL 1 DA_SYMSEG STATIC SYMDEF,
      2 BOUND UBIN(20) UNAL INIT(0),
      2 FLAGS BIT(16) UNAL INIT('0'B),
      2 P,
        3 CA UBIN(20) UNAL INIT(0),
        3 BA UBIN(4) UNAL INIT(0),
        3 SID,
          4 S UBIN(2) UNAL INIT(0),
          4 D UBIN(10) UNAL INIT(0),
      2 P$ REDEF P PTR;
DCL DA_ENTDEF$ PTR STATIC SYMDEF INIT(ADDR(NIL));
DCL DA_SYMDEF$ PTR STATIC SYMDEF INIT(ADDR(NIL));
DCL DA_DNAME$ PTR STATIC SYMDEF INIT(ADDR(NIL));
DCL 1 DA_SYMERR STATIC SYMDEF,
      2 FCG BIT(18) UNAL,
      2 MON BIT(1) UNAL,
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL DA_DFLTACCT CHAR(8) CONSTANT SYMDEF INIT(':SYS');
DCL 1 DA_SYMBOL STATIC SYMDEF ALIGNED,
      2 L UBIN BYTE UNAL INIT(0),
      2 C CHAR(31) INIT(' ');
/**/
/* LOCAL DATA */
/**/
DCL HIGH SBIN;
DCL LOW SBIN;
DCL MID SBIN;
DCL LASTMID SBIN;
DCL DNAME$ PTR;
DCL IC$ PTR;
DCL IC UBIN BASED(IC$) ALIGNED;
/**/
%B$SDEF (NAME="B$SDEF(0:0)",STCLASS="BASED(DA_SYMDEF$)");
%B$EDEF (NAME="B$EDEF(0:0)",STCLASS="BASED(DA_ENTDEF$)");
%B$DNAME (NAME=DNAME,STCLASS="BASED(DNAME$)");
%B$HEAD (NAME=DA_HEADREC,STCLASS=SYMREF);
%EJECT;
SDSRCH: ENTRY(SYM,OUT$) ALTRET;
        DA_SYMBOL=SYM;
        IF DA_SYMDEF$=ADDR(NIL) THEN
           CALL SETERR(%E$DA_NO_SYMBOLS) ALTRET(ALT);
/*E*    ERROR:   DAS-E$DA_NO_SYMBOLS
        MESSAGE: SYMDEFS/ENTDEFS are not available
                                                                   */
        HIGH=DA_HEADREC.EDRECSIZE/SIZEW(B$SDEF);
        LOW=0;
        MID=0;
        LASTMID=-1;
        DO WHILE(MID~=LASTMID);
           LASTMID=MID;
           MID=(LOW+HIGH)/2;
           DNAME$=PINCRW(DA_DNAME$,B$SDEF.NPOINTER(MID));
           IF DNAME.TEXT<SYM.C THEN LOW=MID;
           ELSE IF DNAME.TEXT>SYM.C THEN HIGH=MID;
              ELSE DO;
                 OUT$=ADDR(B$SDEF(MID));
                 RETURN;
                 END;
           END;
        CALL SETERR(%E$DA_SYM_NOT_FOUND) ALTRET(ALT);
ALT:    ALTRETURN;
/*E*    ERROR:   DAS-E$DA_SYM_NOT_FOUND
        MESSAGE: Symbol %%U1 % not found.
                                                                   */
%EJECT;
IC2PED: ENTRY(SYM,OUT$) ALTRET;
        IF DA_ENTDEF$=ADDR(NIL) THEN
           ALTRETURN;
        IC$=ADDR(SYM);
        HIGH=DA_HEADREC.EPRECSIZE/SIZEW(B$EDEF)-1;
        LOW=262144;
        DO MID=0 TO HIGH;
           IF B$EDEF.PRI(MID) THEN
              IF IC-B$EDEF.ISADDR(MID)>=0 THEN
                 IF IC-B$EDEF.ISADDR(MID)<LOW THEN DO;
                    LOW=IC-B$EDEF.ISADDR(MID);
                    OUT$=ADDR(B$EDEF(MID));
                    IF LOW=0 THEN RETURN;
                    END;
           END;
        IF LOW<262144 THEN RETURN;
        ELSE ALTRETURN;
%EJECT;
/*X* DDA */
SETERR: PROC(CODE) ALTRET;
DCL CODE SBIN;
/**/
        DA_SYMERR='040123000000'O;
        DA_SYMERR.CODE=CODE;
        ALTRETURN;
END SETERR;
END SYMSRCH;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
SYMSRCHPTR: PROC(SYM,OUT$) ALTRET;
DCL SYM UBIN BYTE UNAL;
DCL OUT$ PTR;
/**/
DCL SDSRCH ENTRY(2) ALTRET;
/**/
%INCLUDE B$OBJECT_C;
DCL O$ PTR;
%B$EDEF (NAME=B$EDEF,STCLASS="BASED(O$)");
%B$SDEF (NAME=B$SDEF,STCLASS="BASED(O$)");
DCL 1 B$ISX SYMREF,
      2 *                    BIT(24)   UNAL,
      2 *                    BIT(12)   UNAL;
DCL B$IS$ REDEF B$ISX        PTR;
%EJECT;
SDSRCHPTR: ENTRY(SYM,OUT$) ALTRET;
        CALL SDSRCH(SYM,O$) ALTRET(ALT);
        OUT$=PINCRW(B$IS$,B$SDEF.AD.ISADDR);
        RETURN;
ALT:    ALTRETURN;
END SYMSRCHPTR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
SYMINIT: PROC(FID) ALTRET;
DCL 1 FID,
      2 L UBIN BYTE UNAL,
      2 C CHAR(FID.L);
/**/
%INCLUDE B$OBJECT_C;
%INCLUDE CP_6;
DCL F$SYMBOL DCB;
/**/
/* LOCAL DATA */
/**/
DCL SEGSIZE SBIN;
DCL I SBIN;
DCL CSIZE SBIN;
DCL CBASE CHAR(CSIZE) BASED;
/**/
/* EXTERNAL DATA */
/**/
DCL 1 DA_SYMSEG SYMREF,
      2 BOUND UBIN(20) UNAL,
      2 FLAGS BIT(16) UNAL,
      2 P,
        3 CA UBIN(20) UNAL,
        3 BA UBIN(4) UNAL,
        3 SID,
          4 S UBIN(2) UNAL,
          4 D UBIN(10) UNAL,
      2 P$ REDEF P PTR;
DCL DA_ENTDEF$ PTR SYMREF;
DCL DA_SYMDEF$ PTR SYMREF;
DCL DA_DNAME$ PTR SYMREF;
DCL 1 DA_SYMERR SYMREF,
      2 FCG BIT(18) UNAL,
      2 MON BIT(1) UNAL,
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL DA_DFLTACCT CHAR(8) SYMREF;
DCL 1 DA_SYMBOL SYMREF ALIGNED,
      2 L UBIN BYTE UNAL,
      2 C CHAR(31);
/**/
/* STATIC, CONSTANT, FPTS */
/**/
%VLP_NAME;
%VLP_ACCT;
%VLP_PASS;
%VLP_SN;
%VLP_WSN;
%VLR_FID;
%FPT_OPEN (DCB=F$SYMBOL,
           NAME=VLP_NAME,
           ACCT=VLP_ACCT,
           PASS=VLP_PASS,
           SN=VLP_SN,
           WSN=VLP_WSN,
           FUN=IN);
%FPT_CLOSE (DCB=F$SYMBOL);
%F$DCB;
%FPT_FID (ASN="FPT_OPEN.V.ASN#",
          NAME=VLP_NAME,
          PASS=VLP_PASS,
          ACCT=VLP_ACCT,
          RES="FPT_OPEN.V.RES#",
          RESULTS=VLR_FID,
          WSN=VLP_WSN);
%FPT_GDS (RESULTS=DA_SYMSEG);
DCL B$TCB$ PTR SYMREF;
%B$TCB;
%B$ALT;
%B$HEAD (NAME=DA_HEADREC,STCLASS="STATIC SYMDEF");
%B$RUHEADKEY (NAME=HEADKEY,STCLASS=CONSTANT);
%B$RECORDSUBS;
DCL 1 NRECKEY CONSTANT,
      2 * UBIN BYTE UNAL INIT(5),
      2 * UBIN BYTE UNAL INIT(%TYPDNAM),
      2 * UBIN WORD UNAL INIT(0);
DCL 1 SDEFKEY CONSTANT,
      2 * UBIN BYTE UNAL INIT(5),
      2 * UBIN BYTE UNAL INIT(%TYPSDEF),
      2 * UBIN WORD UNAL INIT(0);
DCL 1 EDEFKEY CONSTANT,
      2 * UBIN BYTE UNAL INIT(5),
      2 * UBIN BYTE UNAL INIT(%TYPEDEF),
      2 * UBIN WORD UNAL INIT(0);
%EJECT;
        FPT_FID.TEXTFID_=VECTOR(FID.C);
        CALL M$FID(FPT_FID) ALTRET(PMMEALT);
        IF NOT VLR_FID.ACCT THEN VLP_ACCT.ACCT#=DA_DFLTACCT;
        IF DCBADDR(DCBNUM(F$SYMBOL))->F$DCB.FCD# THEN
           CALL M$CLOSE(FPT_CLOSE) ALTRET(PMMEALT);
        CALL M$OPEN(FPT_OPEN) ALTRET(PMMEALT);
        CALL READ_KEYED(HEADKEY,VECTOR(DA_HEADREC)) ALTRET(PMMEALT);
        SEGSIZE=DA_HEADREC.NRECSIZE+DA_HEADREC.EPRECSIZE+DA_HEADREC.EDRECSIZE;
        SEGSIZE=SEGSIZE+MOD(SEGSIZE,2);
        I=SEGSIZE-((DA_SYMSEG.BOUND+1)/4);
        IF I>0 THEN DO;
           FPT_GDS.V.SEGSIZE#=I;
           CALL M$GDS(FPT_GDS) ALTRET(PMMEALT);
           END;
        ELSE IF I<0 THEN DO;
              FPT_GDS.V.SEGSIZE#=-I;
              CALL M$FDS(FPT_GDS) ALTRET(PMMEALT);
              END;
        DA_DNAME$=DA_SYMSEG.P$;
        CSIZE=DA_HEADREC.NRECSIZE*4;
        CALL READ_KEYED(NRECKEY,VECTOR(DA_DNAME$->CBASE)) ALTRET(PMMEALT);
        DA_SYMDEF$=PINCRC(DA_DNAME$,CSIZE);
        CSIZE=DA_HEADREC.EDRECSIZE*4;
        CALL READ_KEYED(SDEFKEY,VECTOR(DA_SYMDEF$->CBASE)) ALTRET(PMMEALT);
        DA_ENTDEF$=PINCRC(DA_SYMDEF$,CSIZE);
        CSIZE=DA_HEADREC.EPRECSIZE*4;
        CALL READ_KEYED(EDEFKEY,VECTOR(DA_ENTDEF$->CBASE)) ALTRET(PMMEALT);
        RETURN;
PMMEALT: ;
        DA_SYMERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        ALTRETURN;                            /* Free everything we got!      */
SYMRELDS: ENTRY;
        FPT_GDS.V.SEGSIZE#= 262143;
        CALL M$FDS(FPT_GDS);
        RETURN;
%EJECT;
/*X* DDA */
READ_KEYED: PROC(KEY,BUF) ALTRET;
DCL 1 KEY,
      2 L UBIN BYTE UNAL,
      2 C CHAR(KEY.L);
DCL BUF BIT(72);
%FPT_READ (DCB=F$SYMBOL,KEYS=YES);
/**/
        FPT_READ.BUF_=BUF;
        FPT_READ.KEY_=VECTOR(KEY);
        CALL M$READ(FPT_READ) ALTRET(ALT);
        RETURN;
ALT:    ALTRETURN;
END READ_KEYED;
END SYMINIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DEF_DUMMYS: PROC;
 
DCL B$LOOKUP$                BIT(1) UNAL STATIC SYMDEF;
DCL B$P$                     BIT(1) UNAL STATIC SYMDEF;
DCL P_AUTOSPACE              BIT(1) UNAL STATIC SYMDEF;
DCL P_AUTO_START             BIT(1) UNAL STATIC SYMDEF;
DCL P_LAST_AUTO              BIT(1) UNAL STATIC SYMDEF;
DCL P_MAXPROCS               BIT(1) UNAL STATIC SYMDEF;
DCL P_MAX_LOOKUP             BIT(1) UNAL STATIC SYMDEF;
DCL P_NPROCS                 BIT(1) UNAL STATIC SYMDEF;
DCL P_USED_AUTO              BIT(1) UNAL STATIC SYMDEF;
 
END DEF_DUMMYS;
