/*M* ID$CREATE - Create blockletter data file for ID */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*DMR,THI=0,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,DCI=5,CSU=5,ECU=5,DTI=2*/
/*
IIIIII  DDDDDD      $$     CCCCC   RRRRRR   EEEEEEE   AAAAA   TTTTTTT  EEEEEEE
  II    DD   DD   $$$$$$  CC   CC  RR   RR  EE       AA   AA     TT    EE
  II    DD   DD  $  $$    CC       RR   RR  EE       AA   AA     TT    EE
  II    DD   DD   $$$$$   CC       RRRRRR   EEEEE    AAAAAAA     TT    EEEEE
  II    DD   DD     $$ $  CC       RRRR     EE       AA   AA     TT    EE
  II    DD   DD  $$$$$$   CC   CC  RR RR    EE       AA   AA     TT    EE
IIIIII  DDDDDD      $$     CCCCC   RR  RR   EEEEEEE  AA   AA     TT    EEEEEEE
*/
/*P*     Purpose-
              To create a file containing the descriptions of various
         fonts of blockletters...                         */
/**/
/**/
/*F*     Function -
 
              DCBS used:
                   M$SI      Command input
                   M$DO      Comments and diagnostic output
                   M$EO      Blockletter records out
 
              Files used
                   ID_ID
                                                                */
         %EJECT;
CREATE: PROC MAIN;                      /*CREATE RECORDS TO BE USED BY BLTR */
         %SET CRT_FID='1'B;
         %INCLUDE ID_C1;
         %SUB ERR_MSG#=9;
         %FPT_WRITE(
              FPTN=FILE_WT,
              WAIT=YES,
              DCB=M$EO,
              BIN=YES,
              KEY=KEY
                   );
DCL BA$PRAM BASED SBIN;
DCL I SBIN STATIC ALIGNED;
DCL COL SBIN STATIC ALIGNED;
DCL NN SBIN STATIC ALIGNED;
DCL OUTBUFF CHAR(80) STATIC ALIGNED;
DCL INBUFF(0:79) CHAR(1) STATIC UNAL;
DCL IN_REC REDEF INBUFF CHAR(80);
DCL INJUNK(0:79) REDEF INBUFF UBIN(9) UNAL;
DCL ALL SBIN STATIC ALIGNED INIT(0);
DCL HI SBIN STATIC ALIGNED INIT(37);
DCL NUM SBIN STATIC ALIGNED;
DCL WI SBIN STATIC ALIGNED;
DCL POS SBIN STATIC ALIGNED;
         %EJECT;
WRITE_ERR: PROC(NUMBER);                /* THIS HANDLES THE ERROR MESSAGES */
DCL ERROR SBIN STATIC ALIGNED INIT(0);
DCL NUMBER SBIN;
DCL ERROR_MSG(0:ERR_MSG#) CHAR(80) STATIC INIT(
              'THIS IS JUST TOO MANY ERRORS...',
              'INVAILD OPTION...',
              'VALUE EXCEEDES MAX...',
              'VALUE MUST BE NUMERIC...',
              'VALUE MISSING OR ZERO...',
              'PRAM TOO LONG RIGHTMOST CHARACTERS TRUNCATED...',
              'INVAILD VALUE FOR FLAG PRAM...',
              'ALL PRAMS NOT PRESENT...',
              'NEEDED MEMORY NOT AVALIBLE...',
              'ERROR IN ASCII/OCAL DEF...');
     OUTBUFF=ERROR_MSG(NUMBER);
     CALL M$WRITE(USER_WT);
     ERROR=ERROR+1;
     IF ERROR>20
     THEN
       DO;
            OUTBUFF=ERROR_MSG(0);
            CALL M$WRITE(USER_WT);
            CALL FINN;
          END;
     RETURN;
END WRITE_ERR;
         %EJECT;
START: OUTBUFF='CREATE HERE...';
     CALL M$WRITE(USER_WT);
     CALL M$OPEN(SDCB);
         /*   WE DO THIS FOREVER...    */
     DO WHILE('1'B);
          IN_REC=' ';
          CALL M$READ(USER_RD) ALTRET(BYE);
          DO WHILE ('0'B);
BYE:           CALL FIN;
               CALL FINN;
             END;
          DO I=0 TO TOT#;
               DO COL=0 TO (79-SIZE(I));
                    IF SUBSTR(IN_REC,COL,SIZE(I))=COMTAB(I)
                    THEN
                         CALL FOUND ALTRET(OK);
                  END;
             END;
          IF ALL=1
          THEN
               CALL MATFIX;
          ELSE
               CALL WRITE_ERR(1);
OK:       ;
        END;
         %EJECT;
FOUND: PROC ALTRET;      /* NOW THAT WE HAVE A VALID COMMAND WHERE DO WE GO?? */
     IF I>COMMAND#
     THEN
          IF ALL=0
          THEN
               CALL CHK_PRAMS;
          ELSE
               CALL ANOTHER;
     ELSE
       DO;
            IF ALL=1
            THEN
                 CALL FIN;
            CALL CHK_DEF;
          END;
     ALTRETURN;
END FOUND;
         %EJECT;
CHK_DEF: PROC;                          /* FIND OUT WHAT KIND OF PRAM THIS IS */
     COL=COL+SIZE(I);
     IF PRAM_FLG(I)=1
     THEN
       DO;
            CALL CONCAT(OUTBUFF,COMTAB(I),
                 'IS ALREADY DEFINED, LAST DEF USED...');
            CALL M$WRITE(USER_WT);
          END;
     IF PRAM_MAX(I)<0
     THEN
          CALL STRING;
     ELSE IF PRAM_MAX(I)=0
          THEN
               CALL FLAG;
          ELSE
               CALL NUMS;
     RETURN;
END CHK_DEF;
         %EJECT;
NUMS: PROC;                             /* THIS IS FOR NUMERIC PRAMS */
DCL VALUE SBIN STATIC ALIGNED;
     VALUE=0;
     DO NN=0 TO 4;
          IF INBUFF(COL)=' '
          THEN
            DO;
                 CALL DONE;
                 RETURN;
               END;
          IF INJUNK(COL)>47
          THEN
               IF INJUNK(COL)<58
               THEN
                 DO;
                      CALL CHARBIN(NUM,INBUFF(COL));
                      VALUE=(VALUE*10)+NUM;
                      COL=COL+1;
                    END;
               ELSE
                 DO;
                      CALL WRITE_ERR(3);
                      RETURN;
                    END;
        END;
     CALL WRITE_ERR(2);
     RETURN;
         %EJECT;
DONE: PROC;                        /* CHECK AND SEE IF PRAM VALUE IS VALID */
     IF PRAM_MAX(I)<VALUE
     THEN
       DO;
            CALL WRITE_ERR(2);
            RETURN;
          END;
     PRAM_ADDR$(I)->BA$PRAM=VALUE;
     PRAM_FLG(I)=1;
     RETURN;
END DONE;
END NUMS;
         %EJECT;
STRING: PROC;                           /* THIS IS FOR STRING PRAMS */
DCL STRING$ PTR STATIC ALIGNED;
DCL BA$RING BASED CHAR(LEN);
DCL LEN SBIN STATIC ALIGNED;
     PRAM_MAX(I)=-PRAM_MAX(I);
     IF INBUFF(COL+PRAM_MAX(I))~=' '
     THEN
          CALL WRITE_ERR(5);
     LEN=PRAM_MAX(I);
     PRAM_MAX(I)=-PRAM_MAX(I);
     STRING$=ADDR(INBUFF(COL));
     PRAM_ADDR$(I)->BA$RING=STRING$->BA$RING;
     PRAM_FLG(I)=1;
     RETURN;
END STRING;
         %EJECT;
FLAG: PROC;                             /* THIS IS FOR FLAG PRAMS */
     IF SUBSTR(IN_REC,COL,3)='YES'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=1;
            RETURN;
          END;
     IF SUBSTR(IN_REC,COL,2)='NO'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=0;
            RETURN;
          END;
     CALL WRITE_ERR(6);
     RETURN;
END FLAG;
         %EJECT;
CHK_PRAMS: PROC;                   /* CHECK TO SEE IF ALL PRAMS ARE PRESENT */
     ALL=1;
     DO NN=0 TO COMMAND#;
          ALL=ALL*PRAM_FLG(NN);
        END;
     IF ALL=0
     THEN
       DO;
            CALL WRITE_ERR(7);
            RETURN;
          END;
     LLEN=PRAMS.HEIGHT*PRAMS.WIDTH;
     TLEN=(LLEN*127/9)+COM_SPC*4+1;
     GMEM.V.SEGSIZE#=(TLEN/4)+1;
     CALL M$GDS(GMEM) ALTRET(NOMEM);
     DO WHILE('0'B);
NOMEM:    CALL WRITE_ERR(8);
          CALL FINN;
        END;
     HI=PRAMS.HEIGHT;
     LET$=ADDR(REC_VEC.PTR$->REC.MATRIX(0));
     DO I=0 TO GMEM.V.SEGSIZE#-(COM_SPC+1);
          LET$->BA$PRAM=-1;
          LET$=PINCRW(LET$,1);
        END;
         %EJECT;
ANOTHER: ENTRY;          /* THIS IS WHRE WE COME IN ALL BUT THE FIRST TIME */
     IF HI<PRAMS.HEIGHT
     THEN
          CALL PADD;
     IF SUBSTR(IN_REC,0,5)='ASCII'
     THEN
          CALL ASCII;
     ELSE IF SUBSTR(IN_REC,0,5)='OCTAL'
          THEN
               CALL OCTAL;
          ELSE CALL WRITE_ERR(1);
     RETURN;
END CHK_PRAMS;
         %EJECT;
ASCII: PROC;                  /* THIS GIVES US THE INDEX FOR AN ASCII INPUT */
     INDX=INJUNK(6);
     I=7;
     CALL GOTINDX;
     RETURN;
OCTAL: ENTRY;                 /* THIS GIVES US THE INDEX FOR AN OCTAL INPUT */
     INDX=0;
     DO I=6 TO 8;
          IF INJUNK(I)>47
          THEN
               IF INJUNK(I)<58
               THEN
                 DO;
                      CALL CHARBIN(NUM,INBUFF(I));
                      INDX=INDX*8+NUM;
                    END;
               ELSE
                 DO;
                      CALL WRITE_ERR(9);
                      RETURN;
                    END;
        END;
     I=9;
     CALL GOTINDX;
     RETURN;
         %EJECT;
GOTINDX: PROC;                     /* LETS GET SOME POINTERS FOR THE INDEX */
     IF INBUFF(I)~=')'
     THEN
       DO;
            CALL WRITE_ERR(9);
            RETURN;
          END;
     LET$=ADDR(REC_VEC.PTR$->REC.MATRIX(0));
     LET$=PINCRB(LET$,INDX*LLEN);
     HI=0;
     RETURN;
END GOTINDX;
END ASCII;
         %EJECT;
MATFIX: PROC;                      /* THIS SHOVES THE STUFF INTO THE MATRIX */
     IF HI>(PRAMS.HEIGHT-1)
     THEN
       DO;
            CALL WRITE_ERR(1);
            RETURN;
          END;
     DO WI=0 TO PRAMS.WIDTH-1;
          POS=(HI*PRAMS.WIDTH)+WI;
          IF INJUNK(WI)<33
          THEN
               LET$->MAT$LET(POS)='0'B;
          ELSE
               LET$->MAT$LET(POS)='1'B;
        END;
     HI=HI+1;
     RETURN;
END MATFIX;
PADD: PROC;                   /* THIS PADDES THE MATRIX FOR MISSING LINES */
DCL HIP SBIN STATIC ALIGNED;
     DO HIP=HI TO PRAMS.HEIGHT-1;
          DO WI=0 TO PRAMS.WIDTH-1;
               POS=(HIP*PRAMS.WIDTH)+WI;
               LET$->MAT$LET(POS)='0'B;
             END;
        END;
     HI=HIP;
     RETURN;
END PADD;
         %EJECT;
FIN: PROC;                              /* WRITE THE RECORD  */
         %FPT_FDS(FPTN=FMEM,COMMON=YES,RESULTS=REC_VEC);
     IF ALL=0
     THEN
          CALL FINN;
     REC_VEC.PTR$->REC.PDEPTH=PRAMS.PDEPTH;
     REC_VEC.PTR$->REC.PWIDTH=PRAMS.PWIDTH;
     REC_VEC.PTR$->REC.ICSH=PRAMS.ICSH;
     REC_VEC.PTR$->REC.ICSV=PRAMS.ICSV;
     REC_VEC.PTR$->REC.HEIGHT=PRAMS.HEIGHT;
     REC_VEC.PTR$->REC.WIDTH=PRAMS.WIDTH;
     REC_VEC.PTR$->REC.STRIKES=PRAMS.STRIKES;
     REC_VEC.PTR$->REC.BS=PRAMS.BS;
     REC_VEC.PTR$->REC.LPI=PRAMS.LPI;
     REC_VEC.PTR$->REC.USECHAR=PRAMS.USECHAR;
     REC_VEC.PTR$->REC.CSET=PRAMS.CSET;
     FILE_WT.BUF_=REC_VEC;
     CALL M$WRITE(FILE_WT);
     FMEM.V.SEGSIZE#=GMEM.V.SEGSIZE#;
     CALL M$FDS(FMEM);
     REC_VEC=VECTOR(NIL);
     DO NN=0 TO COMMAND#;
          PRAM_FLG(NN)=0;
        END;
     ALL=0;
     RETURN;
END FIN;
FINN: PROC;                             /* LETS GET OUT OF HERE */
     OUTBUFF='ALL DONE...';
     CALL M$WRITE(USER_WT);
     CALL M$CLOSE(CLOSE);
     CALL M$CLOSE(SCLOSE);
     CALL M$EXIT;
END FINN;
END CREATE;
