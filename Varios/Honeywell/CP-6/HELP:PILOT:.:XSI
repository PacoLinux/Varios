PILOT:  A graphics package that allows the user to create
         complex pictures via a simple programming language.
 
        ***NOTE***
 
        This version of PILOT only runs on TEKTRONIX type terminals.
 
        Type HELP (PILOT.X) OVERVIEW for more information.
 
HELP file for PILOT
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
Command: !
Does:    Stop current iteration (used after a break)
Command: !!
Does:    At break: clear stack, return to user (aborts any pending
            operations)
Command: #
Does:    Iterate next command by value in following variable
Command: $
Does:    Push accumulator value into following variable
Command: %
Does:    Push value of following variable into accumulator
Command: +
Does:    Increments accumulator
Command: -
Does:    Decrements accumulator
Command: ;
Does:    Put direction into accumulator.
Command: =
Does:    Defines the following string as a macro command
Command: ?
Does:    Do something based on a 50/50 random chance variable.
Example:
 
         ?(100F)('HALT')
 
           {flip the "coin", heads move forward 100, tails: HALT)
Command: @
Does:    Zeroes accumulator
Command: A
Does:    Iterate next command by number in accumulator (0-9999)
Command: B
Does:    Ring the bell on the terminal
'BOX' is a system command that causes the view surface on the terminal
      to be outlined with a box.
Command: C
Does:    Clears the screen
02/23/83
Installed at LADC.
'CLIP' is a system command that specifies that the turtle is not to be
       allowed off the screen. If the turtle tries to leave the screen it
       is forced back to the edge. This is the default mode of operation.
CHANGES
Command: D
Does:    put pen Down.
'DEBUG' is a system command that instructs PILOT to enter DEBUG mode.
        The screen is cleared and a file is saved for use with EDIT.
        The name of the file to edit is *PILOT_SAVE_FILE.
Command: E
Does:    Edge test E<then><else>
Examples:
 
         E('AT THE EDGE' 'HALT') (F)
 
           { if at edge say so and stop, else move forward }
QUIT
Command: F
Does:    Move turtle forward one pixel
'GRAPHICS' is a system command that causes the PILOT to enter graphics
           mode of operation.
Command: H
Does:    Send turtle Home
'HALT' is a system command that can be used to stop the execution of a
function with program control. Exactly the same function as !! reply to
the "break" key.
Known Problems:
 
  This is the very first applications language written for CP6 using
device independent graphics. There are some problems in the language
that are known to exist (as well as some unknown ones I am sure).
 
  The known problems are in the area of system commands that do not
work properly or are as of yet unimplemented at this time. The system
commands that should be avoided are:
 
  STIMER  TTIMER  ROTATE  COLOR
 
 
  Other than the commands already stated to avoid, the PILOT language
works very well for a first release experimental graphics package.
 
Command: L
Does:    Turn turtle left n-degrees, 45 by default, changed by:
              'ROTATE' system command
'LOAD' is a system command that causes the symbol table of PILOT to be
       loaded with the contents of a specified file.
Examples:
 
   'LOAD' '$PILOT_ROM'  { load a file called $PILOT_ROM in this account }
   'LOAD' 'TEST_FILE'
Command: Point turtle north
Does:    Point turtle north
'OUTPUT' is a system command that causes a specified character string
         or function name/variable to printed or displayed. in text.
Examples:
 
  'OUTPUT' 'HELLO THERE'
  'HELLO THERE'            { if string is itself not a system command
                           { user does not have to specify 'OUTPUT' first}
  'OUTPUT' Z               { output function/variable Z }
  'OUTPUT' #Z              { output only the variable Z }
  'OUTPUT' =Z              { output only the function Z }
OVERVIEW
 
The PILOT graphics package allows the user to create pictures
by moving a "turtle" around the screen. The user moves the turtle
around on the screen and at the discretion of the user, the
turtle leaves tracks of where it has been.
 
The turtle draws on the screen by leaving tracks. Although PILOT commands
are simple, the commands are sufficiently powerful to draw complex
pictures. The PILOT package allows nested and recursive commands,
and allows the user to define his own commands.
 
Available sub-topics:
 
DOMAIN, DRAWING, CONTROL, BREAK, BNF, PILOT_COMMANDS, ITERATION,
BINDING, SYSTEM_COMMANDS, RESIDENT_DEFINITIONS, USER_DEFINED_COMMANDS,
and INVOKING_MACROS.
 
To view these subtopoics type !HELP (PILOT.X) OVERVIEW sub-topic-name
 
Alternately type ? or ?? to get the subtopics.
The PILOT domain consists of a fixed visible region 100 x 100
drawing surface. The turtle is defined by the current cursor position.
The turtle may then move to any adjacent pixels based upon the turtles
orientation: North, South, East, West and 45 degree medians thereof.
The turtle can also SENSE whether he has been here before and whether
or not he is at the edge of the screen.
DRAWING
 
Drawing pictures is accomplished by moving the turtle around the
screen and leaving tracks behind. There are 4 basic commands for
drawing:
 
  U         Pen up
  D         Pen down (the default)
 
CONTROL
 
The turtle is controlled by the following 5 commands:
 
  C          Clear the screen
  H          Send turtle HOME
  N          Face turtle North
  R          Rotate turtle Right 45 degrees
  L          Rotate turtle Left 45 degrees
  F          Move the turtle 1 pixel.
 
BREAK_CONTROL
 
During the execution of the PILOT program, if the Break key is depressed
PILOT will suspend the current execution of the program and prompt
the user for input. After the carriage return is depressed the input
is evaluated and executed. When this new input's execution is ex-
hausted, the interrupted execution is begun.
 
There are 2 specific commands for interrupting the modification of the
interrupted commands. If the user inputs ! after the break prompt, the
current iteration is terminated, and control returns to the interrupted
program.
 
If !! is input on the break prompt, the stack is cleared and all current
and pending graphics is halted. Control immediately returns to the user.
 
BNF Of PILOT
 
The following is an informal Backus-Nauer representation of the PILOT
language:
 
<command>::= <name>
  <name> ::= single keystroke
<test>::= <name> (<then>) (<else>)
  The <specifies the test, if true <then> is executed. If false the
      <else> caluse is executed. There are 3 test commands. T,E,?.
      T tests the accumulator. E is the edge test, ? is a random coin
      flipping test.
<iteration>::= <value><clause>
  <value> is a number from 0 to 9999, a variable name or the accumulator.
  <clause> is the entity to be iterated.
<nest>::= <nest_open> <clause>...<clause> <nest_close>
  <nest_open>::= ( or [
  <nest_close>::= ) or ]
  The () nest treats the enclosed clauses as one clause. The accumulator
  is not saved.
  The [] acts exactly like the () nests except upon exit from the nest the
   accumulator is restored to initial value upon entering the nest.
<define>::= <name> [*] <clause>
        ::= <name> #
 
PILOT_COMMANDS
 
  A              Iterate by number in accumulator
  B              Beep the terminal
  C              Clear the screen
  D              Pen down
  E              Edge test E<then><else>
  F              Forward move 1 pixel
  H              Home the turtle
  L              Left 45 degrees
  N              Point turtle North
  R              Turn right 45 degrees
  T              Test accumulator for non-zero T<then><else>
  U              Pen up
  V              This varaible can be used as a user variable and it
                      also is used in conjunction with the STIMER
                      system command. When STIMER is invoked whatever
                      PILOT commands are contained in this variable
                      is executed. See STIMER for more information on
                      executing concurrent asynchronous commands.
                      Effectively, V can be used as an asyncronous
                      code path.
  W              Wait 1 second
  _              No operation
  !              Stop current iteration
  !!             At break: clear stack, unwind. Normal: two ! in succession.
  #              Iterate by value in variable following #
  $              Push value of accumulator into variable
  %              Push value of variable into accumulator
  (              Bind clauses as unit, no save of accumulator on exit
  @              Zero  accumulator
  ;              Put direction into accumulator
                     (0=N,1=E,2=S,3=4)
  +              Increment accumulator
  -              Decrement accumulator
  <number>       Iterate command by number
  =              Define a user command
  [              Bind clauses as unit, save and restore accumulator on exit
  ^              Increment current iteration count
  {              Comment start
  }              End comment
 
Commands are interpreted and executed immediately. If the terminal has
not been initialized with the device independent graphics core the
portion of the command that is not graphic (ie computational) is done,
and the graphics portion is ignored.
 
The following is an example of commands being executed:
 
     ++++HCN
     UFFFFFRFFFF
     BBBBWWWWW
 
Line 1 adds 4 to the accumulator, homes turtle, clears screen, points
       turtle north.
Line 2 picks up the pen, moves forward 4, turns right (45degrees) and
       moves forward 4.
Line 3 Beeps 4 times and then suspends (waits) 4 seconds.
 
See ITERATION, USER_COMMANDS, SYSTEM_COMMANDS for more information on
moving in the turtle world.
 
ITERATION
 
Iteration is accomplished by actually specifying an iteration count
in decimal (0-9999) or the accumulator A or some variable before the
command to be executed. The following examples show how to do all the
forms of iteration.
 
      AB
      10B
      #BB
 
Line 1 beeps accumulator times.
Line 2 Beeps 10 times
Line 3 Beeps user variable #B times.
 
Variables, other than the Accumulator are always preceeded by the #
command.
 
BINDING
 
Binding of commands in PILOT is accomplished with the () [] nesters.
Command(s) that are bound inside the nesters are executed as a unit.
That means that iteration counts specified preceeding the nester causes
the bound commands to be executed as one command.
 
The () nesters differ from [] in a very special way.
 
The parenthetical nesters do not save the contents of the accumulator.
If commands bound inside the parentheses change the accumulator, then
the accumulator is permanently changed upon termination of the nested
commands.
 
The brackets on the other hand preserve the accumulator upon entry into
the nest and restore the accumulator to its old value upon exit. This means
that the accumulator can be used inside the nest without affecting the
accumulator value used externally to the nest.
 
SYSTEM_COMMANDS
 
There are a number of system commands to the PILOT package. These commands
affect the internal operation of the package, save and restore programs,
and supply some very simple debugging capablities. The system commands
supplied are:
 
'GRAPHICS' or 'GRAPH'            Enter graphics mode
'TEXT'                           Leave graphics mode.
'DEBUG'                          Leave graphics mode for debugging
'INPUT'                          Read a line from user, then execute.
                                     User will be prompted with: 'input:'
'OUTPUT' <variable>|'string'     Write a line from a var or specific string.
                                     When OUTPUTing a varaible or function
                                     it is possible to get both or only
                                     the value of the function OR variable.
                                     To output the function A only use:
 
                                        'OUTPUT' =A
 
                                     To output the variable B use:
 
                                        'OUTPUT' #B
 
                                     To output both function and variable
                                     for C use:
 
                                         'OUTPUT' C
'READ' #<variable>               Read an integer from user, store in var.
                                     User will be prompted for input.
'ROTATE' <integer>|<var>         Set rotatinal value (45 degrees default)
'CLIP'                           Vectors leaving viewing surface are clipped
'WRAP'                           Wrap vectors that leave viewing surface
'REFLECT'                        Reflect the vectors when they reach edge
'PIXELS' n                       Surface size (square, 100 default)
'BOX'                            Outlines the drawing surface
'COLOR' '<color>'                Sets pen color to <color>
                                    Supported colors are:
                                        BROWN, BLACK, RED, ORANGE,
                                        YELLOW, GREEN, BLUE, VIOLET,
                                        GREY, WHITE
'LOAD' '<file-name>'             Load workspace from file
'SAVE' '<file-name>'             Save workspace to file
'STIMER' n                       Sets the asynchronous interval timer to
                                     "n" seconds. The user has control of
                                     PILOT until N seconds elapse. At n the
                                     PILOT package saves what the current
                                     command being executed is doing and
                                     executes whatever commands have
                                     been set up in variable V.
'TTIMER' [#var]                  Tests the interval timer. If a variable
                                     is specified the unelapsed time in
                                     seconds is stored  at the locatoion.
                                     If no variable is specified the
                                     interval set by STIMER is cancelled.
'HALT'                           This suspends execution and returns control
                                       to the user. Like !! on break input.
'QUIT' or 'END'                  Exits PILOT
 
RESIDENT_DEFINITIONS
 
PILOT will attempt to load a sample program file called $PILOT_ROM in
the users current account. This sample program will display the CP6 logo.
If the file does not exist, the user is notified and control is passed
to the user.
 
USER_DEFINED_COMMANDS, MACROS
 
The user can specify his own commands with the = macro definition
command. Whatever input is given is accepted, no syntax checking
is supplied at macro definition time. Execution errors are of course
caught and flagged.
 
Below are some example macro definitions:
 
=A 4(2R(4(19F2R))
=B 8(8(19FR)R)
=C 120(AF2R+)R)
=D 40((8AFR))+)
=E 40(AFR+)
=F HCN@
=G 'GRAPHICS' *F
 
In the above examples the macors do the following:
 
   A        Draws 4 squares, with common corner
   B        Stained glass window
   C        Spiral
   D        Octagon #1
   E        Octagon #2
   F        Home cursor, Clear screen, North, Zero accumulator
   G        Enter Graphics mode, do F.
 
See INVOKING_MACROS for explanation on how to invoke user commands.
 
INVOKING_MACROS
 
User commands are invoked in the following manner:
 
If the command name is not a reserved word then the name specified
alone is all that is needed.
 
If the command name is also the name of a PILOT command, the user command
must be preceded by the * command. For example, if function B is defined
as the following macro:
 
   =B 8(8(10FR)R)
 
To use the user defined function the name must be specified as *B
otherwise the system "beep" command is issued.
 
00008
00005
00004
00003
00001
00002
00012
00007
00011
00006
00010
00009
00011
Dwain Nell, LADC
'PIXELS' is a system command that specifies how big the view surface is
         to be in square units.
Examples:
 
   'PIXELS' 100          { 100x100 surface, default }
   'PIXELS' 1000         { 1000x1000 surface        }
'QUIT' and 'END' are system commands that cause a graceful terminationn
                 of the PILOT package.
Command: R
Does:    Turns turtle right n-degrees (45 by default, change with the
               'ROTATE' system command)
'READ' is a system command that causes an integer to be read from the
       user and stored into a specified variable.
Example:
 
   'READ' #Z               { read an integer from user, store in #Z }
'REFLECT' is a system command that specifies if the turtle hits the edge
          of the screen it is to be reflected back onto the screen at
          a complimentary number of degrees.
Command: S
Does:    Sense color in front of turtle
Below are some sample PILOT functions you can type in and execute.
 
=A 4(2R(4(19F2R))
=B 8(8(19FR)R)
=C 120(AF2R+)R)
=D 40((8AFR))+)
=E 40(AFR+)
=F HCN@
=G 'GRAPHICS' *F
 
In the above examples the macors do the following:
 
   A        Draws 4 squares, with common corner
   B        Stained glass window
   C        Spiral
   D        Octagon #1
   E        Octagon #2
   F        Home cursor, Clear screen, North, Zero accumulator
   G        Enter Graphics mode, do F.
 
'SAVE' is a system command that saves the current contents of the symbol
       table { functions only } as an edit file.
Command: T
Does:    Test accumulator for non-zero, T<then><else>
Example:
 
       T('accumulator > 0') ('accumulator = 0)
 
          { tell what accumulator is, zero or >zero }
'TEXT' is a system command that ends the graphics mode of operation of
       the PILOT package.
Command: U
Does:    Pick pen Up
Command: W
Does:    Wait 1 second (suspend program)
'WRAP' is a system command that specifies that the turtle is to "wrap"
       around the screen if it goes off the edge.
PILOT.X
AID=GRAPHICS
AID=EDUCATIONAL
DEMO
TOOL=PILOT
A graphics package that allows the user to create complex pictures via a
simple programming language.
Command: ^
Does:    Increments current ineration count
Command: _
Does:    No-op
CHANGES
Command: {
Does:    Any text between { } is treated as comments
