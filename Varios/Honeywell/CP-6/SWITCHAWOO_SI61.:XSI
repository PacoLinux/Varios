/*M*  SWITCHAWOO - Generates GOOSE !SWITCH keyins  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
/*
      SWITCHAWOO finds all waiting output for the specified
         device type at the specified WSN, then generates
         a !SWITCH keyin for GOOSE if the size is greater
         than the specified size.
 
      SWITCHAWOO was created from code extracts from WOODPECKER.X
 
              John Joseph, LADC, Jan 1985.
 
                                                             */
%EJECT;
SWITCHAWOO: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE XU_MACRO_C;
 
%B$TCB;
%B$ALT;
%B$EXCFR;
     %FPT_EXIT      (FPTN=EXIT_CC1,
                         STEPCC=1);
     %FPT_TIME      (FPTN=GET_UTS,
                         SOURCE=CLOCK,
                         TSTAMP=NOW_IS);
     %FPT_TIME      (FPTN=CONVERT_UTS,
                         SOURCE=UTS,
                         TSTAMP=NOW_IS,
                         DEST=EXT,
                         DAY=DAY3,
                         TIME=TIME5,
                         DATE=DATE10);
     %FPT_WRITE     (DCB = M$LO,
                         BUF = DETAIL_BUF);
     %FPT_CLOSE     (DCB=M$LO,
                         DISP=SAVE);
     %FPT_JOBSTATS  (FPTN=FPT_STATS,
                         STCLASS=STATIC,
                         CRITERIA = VLP_CRITERIA,
                         ORDER=SRCH,
                         OUTPUT=YES,
                         RESULTS=VLR_JO);
          %VLP_CRITERIA  (ACCT = '        ');
     %FPT_PRIV      (FPTN=FPT_PRIV_DISPJOB,
                         AUTH=NO,
                         PRIV=%PR_DISPJOB#);
     %VLR_JOBSTATS_OSRCH (FPTN=VLR_JO,
                         NFIL = 1000);
     %VLA_JOBSTATS_OSRCH (FPTN=VLA_JO,
                         STCLASS="BASED(OUT$)");
     %PARSE$SYM     (NAME = PAR$SYM);
     %PARSE$OUT     (NAME = PAR$OUT);
     %P_PCB         (NAME = WOO_PCB,
                         W = PARSE_AREA,
                         WSZ = 100);
%EJECT;
DCL X$PARSE ENTRY (1) ALTRET;
DCL 1 PARSE_AREA (0:99) STATIC SYMDEF,
         2 * UBIN WORD;
DCL BIG_NODES UBIN WORD SYMREF;
DCL BLK$ PTR;
DCL 1 OUTPUT STATIC,
         2 * CHAR(22) CALIGNED INIT('"SWITCHAWOO" KEYIN AT '),
         2 TIME_OUT CHAR(5) CALIGNED  INIT('XX:XX'),
         2 * CHAR(14) CALIGNED INIT(' USING !SWITO '),
         2 SYSID CHAR (6) CALIGNED INIT('XXXXXX'),
         2 * CHAR(1) CALIGNED INIT('-'),
         2 NUMBER CHAR(2) CALIGNED INIT('XX'),
         2 * CHAR (5) CALIGNED INIT(' TO @'),
         2 OUTWSN CHAR(8) CALIGNED INIT('XXXXXXXX'),
         2 * CHAR(17) CALIGNED INIT(' ');
DCL 1 DETAIL_LINE REDEF OUTPUT CHAR (80);
DCL 1 B$JIT$ PTR SYMREF;
DCL OUT$ PTR;
DCL PRINT_COUNT UBIN STATIC;
DCL I SBIN;
DCL GRANULE_COUNT SBIN STATIC SYMDEF;
DCL SAVE_OUTWSN CHAR(8) STATIC SYMDEF;
DCL DAY3 CHAR(3) STATIC;
DCL DATE10 CHAR(10) STATIC;
DCL TIME5 CHAR(5) STATIC;
DCL NOW_IS UBIN WORD STATIC;
DCL M$LO DCB;
DCL DETAIL_BUF CHAR (80) STATIC;
DCL FOUND_SOME BIT (1) STATIC INIT ('0'B);
DCL 1 B$TCB$ PTR SYMREF;
DCL NIX UBIN WORD WALIGNED STATIC;
%EJECT;
PEEK_O_WOO: PROC;
     WOO_PCB.TEXT$=ADDR(B$JIT.CCBUF);
     WOO_PCB.NCHARS=B$JIT.CCARS;
     WOO_PCB.ROOT$=ADDR(BIG_NODES);
     CALL X$PARSE (WOO_PCB)
     WHENALTRETURN
     DO;
          CALL M$XXX;
        END;
 
     DO I=0 TO WOO_PCB.OUT$ -> PAR$OUT.NSUBLKS - 1;
 
          DO CASE (WOO_PCB.OUT$ -> PAR$OUT.SUBLK$(I) ->
               PAR$OUT.CODE);
 
          CASE (0);
                                        /* CMD LINE FID */
 
          CASE(1);
                                        /* DEVTYP */
             VLP_CRITERIA.DEVTYP# = WOO_PCB.OUT$ -> PAR$OUT.SUBLK$(I) ->
                  PAR$SYM.TEXT;
 
          CASE(2);
                                        /* INWSN */
             VLP_CRITERIA.WSN# = WOO_PCB.OUT$ -> PAR$OUT.SUBLK$(I) ->
                  PAR$SYM.TEXT;
 
          CASE(3);
                                        /* OUTWSN */
             SAVE_OUTWSN = WOO_PCB.OUT$ -> PAR$OUT.SUBLK$(I) ->
                  PAR$SYM.TEXT;
             OUTPUT.OUTWSN = SAVE_OUTWSN;
 
          CASE(4);
                                        /* SIZE */
             CALL CHARBIN ( GRANULE_COUNT, WOO_PCB.OUT$ ->
                  PAR$OUT.SUBLK$(I) -> PAR$SYM.TEXT);
 
          END;                          /* DO CASE */
        END;                            /* DO I */
     CALL M$JOBSTATS (FPT_STATS) ALTRET (OUT_ALTRET);
PRINT_OUTS: ;
     OUT$=ADDR (VLR_JO.F);
     DO PRINT_COUNT=1 TO VLR_JO.FOUND;
          CALL BINCHAR (OUTPUT.SYSID,VLA_JO.SYSID);
          CALL BINCHAR (OUTPUT.NUMBER,VLA_JO.NUM);
          NIX = 0;
          IF VLA_JO.GRANS < GRANULE_COUNT
          THEN
               GOTO SKIP_THIS_ONE;
          DO CASE (VLA_JO.PRIO);
          CASE (%FP_MFW#);
             GOTO SKIP_THIS_ONE;
          CASE (%FP_HOLD#);
             GOTO SKIP_THIS_ONE;
          CASE (%FP_SPILLED#);
             GOTO SKIP_THIS_ONE;
          CASE (ELSE);
             IF VLA_JO.DEVNAME ~= '  '
             THEN
                  GOTO SKIP_THIS_ONE;   /* ALREADY PRINTING */
          END;                          /* END CASE                           */
          FOUND_SOME = '1'B;
          DETAIL_BUF=DETAIL_LINE;
          CALL M$WRITE (FPT_WRITE);
SKIP_THIS_ONE: ;
          OUT$=PINCRC (OUT$,SIZEC (VLR_JO.F (0) ) );
        END;
     IF FOUND_SOME
     THEN
          RETURN;
NO_OUTPUT: ;
     DETAIL_BUF='...None found';
     CALL M$WRITE (FPT_WRITE);
     CALL M$EXIT (EXIT_CC1);
OUT_ALTRET: ;
     IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE=%E$NOTFND
     THEN
          GOTO NO_OUTPUT;
     VLR_JO.FOUND=1000;
     GOTO PRINT_OUTS;
END PEEK_O_WOO;
     CALL M$TIME (GET_UTS);
     NOW_IS=NOW_IS+(100*60*2);          /* ADD TWO MINUTES */
     CALL M$TIME (CONVERT_UTS)
     WHENALTRETURN
     DO;
          CALL M$MERC;
        END;
     OUTPUT.TIME_OUT = TIME5;
     CALL M$SPRIV (FPT_PRIV_DISPJOB);
     CALL PEEK_O_WOO;
     CALL M$CLOSE (FPT_CLOSE)
     WHENALTRETURN
     DO;
        END;
     CALL M$EXIT;
END SWITCHAWOO;
