/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ERROUT:  PROC (ERRCODE, DCB#, FLAGLEV, POINTER, HOW, STEPCC);
/*
         ERROUT (ERRPRNT) does an M$ERRMSG with an optional
         exit call, both specifying the error code passed.
 
         Arguments:
 
           ERRCODE -- A VLP_ERRCODE structure indicating the error
                      message to be printed.
 
           DCB#    -- UBIN word, specifying the DCB on which the error
                      occurred; this is passed to M$ERRMSG.
                      (Optional; zero is used if DCB# is not passed.)
 
           FLAGLEV -- UBIN word, specifies the flag level (0-4),
                      indicating how many asterisks are to precede the
                      error code. (Optional; zero is assumed if FLAGLEV
                      is not passed.)
 
           POINTER -- UBIN word, specifies the column in which M$ERRMSG
                      is to print the error "finger".  (Optional; zero
                      is assumed if POINTER is not passed.)
 
           HOW     -- UBIN word, indicates which exit call is to be
                      used, as:
 
                        0  --> M$EXIT
                        1  --> M$ERR
                        2  --> M$XXX
 
                      (Optional; zero is assumed if HOW is not passed.)
 
           STEPCC  -- UBIN word, indicates a value to be used as
                      STEPCC for the exit call specified; may only
                      be used if HOW is specified.  (Optional; the
                      default for the desired exit call is used if
                      STEPCC is not passed.)
 
         An alternate entry, ERRPRNT, is provided if no program
         exit is desired; the parameters are the same as for ERROUT,
         except that HOW and STEPCC may not be specified.
 
         Andrew E. Birner,  15 Feb,'83
 
*/
%EJECT;
 
         /*  Argument declarations  */
 
       DCL ERRCODE BIT(36) ALIGNED;
       DCL DCB# UBIN;
       DCL FLAGLEV UBIN;
       DCL POINTER UBIN;
       DCL HOW UBIN;
       DCL STEPCC UBIN;
 
         /*  Error message and exit stuff  */
 
       DCL M$LO DCB;
       DCL M$DO DCB;
 
       %CP6$ENTS;
 
       %FPT_ERRMSG (CODE=VLP_ERRCODE, OUTDCB1=M$DO, OUTDCB2=M$LO,
                    BUF=ERR_BUF, VFC='a');
       DCL ERR_BUF (0:5) CHAR(120) STATIC INIT (' '*0);
       %VLP_ERRCODE;
 
       %FPT_EXIT (CODE=VLP_ERRCODE);
 
         /*  Misc variables and preprocessor stuff . . .  */
 
       %SET EXIT = 0;
       %SET ERR  = 1;
       %SET XXX  = 2;
 
       DCL EXIT_FLAG BIT(1);
       DCL STEPCC_PASSED BIT(1);
 
       DCL FIRST_IN BIT(1) STATIC INIT ('1'B);
       DCL M$LM$ PTR;
       %F$DCB;
 
%EJECT;
 
         /*  Entry and error message stuff:  */
 
START:
       EXIT_FLAG = '1'B;
       GOTO SKIP_ENTRY;
 
ERRPRNT:
       ENTRY (ERRCODE, DCB#, FLAGLEV, POINTER);
       EXIT_FLAG = '0'B;
 
SKIP_ENTRY:
       IF  FIRST_IN  THEN DO;
         FIRST_IN = '0'B;
         M$LM$ = DCBADDR(2); /* M$LM */
         FPT_ERRMSG.FILENAME_ = VECTOR (M$LM$->F$DCB.NAME#);
         FPT_ERRMSG.FILEACCT_ = VECTOR (M$LM$->F$DCB.ACCT#);
         FPT_ERRMSG.FILEPASS_ = VECTOR (M$LM$->F$DCB.PASS#);
       END;
 
       VLP_ERRCODE = ERRCODE;
 
       IF ADDR(DCB#) ~= ADDR(NIL) THEN DO;
         FPT_ERRMSG.V.DCB# = DCB#;
        END; ELSE DO;
         FPT_ERRMSG.V.DCB# = 0;
       END;
 
       IF ADDR(FLAGLEV) ~= ADDR(NIL) THEN DO;
         FPT_ERRMSG.V.FLAGLEV# = FLAGLEV;
        END; ELSE DO;
         FPT_ERRMSG.V.FLAGLEV# = 0;
       END;
 
       IF ADDR(POINTER) ~= ADDR(NIL) THEN DO;
         FPT_ERRMSG.V.POINTER# = POINTER;
        END; ELSE DO;
         FPT_ERRMSG.V.POINTER# = 0;
       END;
 
       CALL M$ERRMSG (FPT_ERRMSG);
 
%EJECT;
 
         /*  Figure out what (if any) kind of exit call we want:  */
 
       IF ~EXIT_FLAG THEN DO;
         RETURN;
        END; ELSE DO;
         VLP_ERRCODE.SEV = 1;
 
         IF ADDR(STEPCC) = ADDR(NIL) THEN DO;
           STEPCC_PASSED = '0'B;
          END; ELSE DO;
           STEPCC_PASSED = '1'B;
         END;
 
         IF ADDR(HOW) = ADDR(NIL) THEN DO;
           IF STEPCC_PASSED THEN DO;
             FPT_EXIT.V.STEPCC# = 511;
             FPT_EXIT.CODE_ = VECTOR(NIL);
             CALL M$XXX (FPT_EXIT);
            END; ELSE DO;
             FPT_EXIT.V.STEPCC# = 0;
             CALL M$EXIT (FPT_EXIT);
           END;
          END; ELSE DO CASE HOW;
 
           CASE (%EXIT);
             IF STEPCC_PASSED THEN DO;
               FPT_EXIT.V.STEPCC# = STEPCC;
              END; ELSE DO;
               FPT_EXIT.V.STEPCC# = 0;
             END;
             CALL M$EXIT (FPT_EXIT);
 
           CASE (%ERR);
             IF STEPCC_PASSED THEN DO;
               FPT_EXIT.V.STEPCC# = STEPCC;
              END; ELSE DO;
               FPT_EXIT.V.STEPCC# = 4;
             END;
             CALL M$ERR (FPT_EXIT);
 
           CASE (%XXX);
             IF STEPCC_PASSED THEN DO;
               FPT_EXIT.V.STEPCC# = STEPCC;
              END; ELSE DO;
               FPT_EXIT.V.STEPCC# = 6;
             END;
             CALL M$XXX (FPT_EXIT);
 
         END;
 
       END;
 
       END ERROUT;
