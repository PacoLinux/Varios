VERSION E05

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:1    
        1        1        /*M* GTD$MDC_HNDLR     Front End T&D COLTS Message and I/O Handler */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        GTD$MDC_HNDLR
       12       12              AUTHOR:      R. D. Vogler
       13       13              PURPOSE:     Colts Message Handler and I/O Handler
       14       14              DESCRIPTION: This module handles Colts intercomputer messages
       15       15                           (ICM's) between the FEP and the Host, and also
       16       16                           performs necessary I/O on behalf of the Colts
       17       17                           test pages.
       18       18              REFERENCE:   CP-6 Release C01
       19       19              LAST UPDATE: 02/06/85
       20       20        */
       21       21        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:2    
       22       22        /*F*  NAME:        GTD$MDC_HNDLR
       23       23              PURPOSE:     Handle COLTS ICM's and test I/O's
       24       24              DESCRIPTION: This procedure is entered as a consequence of
       25       25                           downline-loading this module into the front-end
       26       26                           processor(FEP).  This routine opens a path to
       27       27                           host COLTS, processes incoming COLTS messages
       28       28                           (ICM's), performs specified test I/O's, and sends
       29       29                           the test results back to host COLTS.  As the
       30       30                           result of an ALTRET on either M$READ or M$WRITE,
       31       31                           this procedure does an orderly cleanup and
       32       32                           exits.
       33       33        */
       34       34        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:3    
       35       35        /*D*  NAME:        GTD$MDC_HNDLR
       36       36              INTERFACE:   This routine calls the following:
       37       37                            M$OPEN
       38       38                            M$READ
       39       39                            PROCESS_ICM
       40       40                            M$WRITE
       41       41                            WRAP_UP
       42       42                            M$CLOSE
       43       43                            M$EXIT
       44       44        */
       45       45        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:4    
       46       46        GTD$MDC_HNDLR: PROC MAIN;
       47       47
       48       48        /*   INCLUDE FILES   */
       49       49        %INCLUDE GT_MACROS_M;
       50      132        %INCLUDE GT_CMN_E;
       51      238        %INCLUDE GH_IOFNC_E;
       52      307        %INCLUDE GH_HARDWARE_M;
       53      405        %INCLUDE LCP_6;
       54     4684        %INCLUDE G_JIT_M;
       55     4949        %G$JIT_E;
       56     5011
       57     5012        /*   MACROS   */
       58     5013        %Y_CLTICM (STCLASS = "BASED (ICM$)");
       59     5058        %GH_IO (FPTN  = GT_IO, STCLASS =  STATIC);
       60     5074        %GH_IOLD (FPTN = GT_IOLD, STCLASS = STATIC);
       61     5089        %VLR_GCHAN (FPTN = CHAN_DATA);
       62     5108
       63     5109        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:5    
       64     5110        /*   FPT'S   */
       65     5111        %FPT_OPEN  (FPTN    = OPEN_COLTS,
       66     5112                    DCB     = M$COLTD,
       67     5113                    ORG     = CONSEC,
       68     5114                    RES     ='HO');
       69     5142
       70     5143        %FPT_READ  (FPTN    = GET_ICM,
       71     5144                    DCB     = M$COLTD,
       72     5145                    BUF     = ICMDATA,
       73     5146                    WAIT    = YES);
       74     5172
       75     5173        %FPT_WRITE (FPTN    = SEND_ICM,
       76     5174                    BP      = YES,
       77     5175                    DCB     = M$COLTD,
       78     5176                    BUF     = ICMDATA);
       79     5200
       80     5201        %FPT_WAIT  (FPTN    = WAIT_IO,
       81     5202                    UNITS   = SECS_DELAY);
       82     5226
       83     5227        %FPT_CLOSE (FPTN    = END_COLTS,
       84     5228                    DCB     = M$COLTD);
       85     5248
       86     5249        %FPT_GCHAN (FPTN       = GET_CHAN,
       87     5250                    GCHAN      = CHAN_DATA,
       88     5251                    DIAG       = YES,
       89     5252                    CONTROLLER = NO);
       90     5275
       91     5276        %FPT_RCHAN (FPTN       = RELEASE_CHAN,
       92     5277                    CONTROLLER = NO);
       93     5298
       94     5299        %FPT_SPRIV (FPTN = ACTIVATE_PRIV,
       95     5300                    AUTH = YES,
       96     5301                    PRIV = MSYS_PRIV);
       97     5324
       98     5325        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:6    
       99     5326        /*   DCL'S   */
      100     5327    1      DCL 1 Y_FLAGS STATIC ALIGNED,
      101     5328    1            2 NOSUCHTST BIT(1) UNAL INIT('0'B),
      102     5329    1            2 CKRDY BIT(1) UNAL INIT('0'B),
      103     5330    1            2 NOATE BIT(1) UNAL INIT('0'B),
      104     5331    1            2 * BIT(5) UNAL INIT('0'B);
      105     5332
      106     5333    1      DCL Y_TCOUNT UBIN BYTE STATIC UNAL INIT(0);
      107     5334
      108     5335    1      DCL 1 Y_TENTRY(0:7) STATIC ALIGNED,
      109     5336    1            2 CHN,
      110     5337    1              3 C BIT(10) UNAL INIT('0'B*8),
      111     5338    1              3 F BIT(6) UNAL INIT('0'B*8),
      112     5339    1            2 RFU UBIN BYTE UNAL INIT(0*8),
      113     5340    1            2 TYP UBIN BYTE UNAL INIT(0*8);
      114     5341
      115     5342    1      DCL ICM$ PTR STATIC INIT(ADDR(NIL));
      116     5343
      117     5344    1      DCL SECS_DELAY UBIN(16) STATIC INIT(1);
      118     5345
      119     5346    1      DCL M$COLTD DCB;
      120     5347
      121     5348    1      DCL GHH$IOLD ENTRY(1) ALTRET ;
      122     5349    1      DCL GHH$IO_IN ENTRY(1) ALTRET ;
      123     5350
      124     5351    1      DCL ICMDATA CHAR(512) STATIC ALIGNED INIT(' ');
      125     5352
      126     5353    1      DCL MSYS_PRIV BIT (32) STATIC ALIGNED INIT ('0'B);
      127     5354
      128     5355        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:7    
      129     5356
      130     5357        /*   THIS IS THE TOP-LEVEL CODING FOR THIS PROCEDURE   */
      131     5358
      132     5359        /* Note that it does M$READ(with WAIT) and M$WRITE(no WAIT) */
      133     5360
      134     5361    1      MSYS_PRIV = %G_PR_TND#;
      135     5362    1      CALL M$SPRIV (ACTIVATE_PRIV) ALTRET (SOLONG);
      136     5363    1      CALL M$SYS ALTRET (SOLONG);
      137     5364
      138     5365    1      CALL M$OPEN (OPEN_COLTS) ALTRET (SOLONG);
      139     5366
      140     5367    1      ICM$ = ADDR (ICMDATA);
      141     5368
      142     5369    2      DO WHILE (%G_YES#);
      143     5370    2         VBOUND(GET_ICM.BUF_) = 511;
      144     5371    2         CALL M$READ (GET_ICM) ALTRET (BEGONE);
      145     5372    2         CALL PROCESS_ICM;
      146     5373    2         VBOUND(SEND_ICM.BUF_) = 2 * Y_CLTICM.T1.R1.ICMWDS - 1;
      147     5374    2         CALL M$WRITE (SEND_ICM) ALTRET (BEGONE);
      148     5375    2      END;
      149     5376
      150     5377    1   BEGONE:
      151     5378    1      CALL WRAP_UP;
      152     5379    1      CALL M$CLOSE (END_COLTS);
      153     5380
      154     5381    1   SOLONG:
      155     5382    1      CALL M$EXIT;
      156     5383
      157     5384        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:8    
      158     5385        /*I*  NAME:        PROCESS_ICM
      159     5386              PURPOSE:     Process all COLTS ICM's
      160     5387              CALL:        CALL PROCESS_ICM;
      161     5388                           Never altreturns.
      162     5389              INTERFACE:   This routine calls the following:
      163     5390                            Y$CKSUM
      164     5391                            START_TEST
      165     5392                            EXECUTE_TEST
      166     5393                            TERMINATE_TEST
      167     5394              DATA:        This routine analyzes and modifies the data
      168     5395                           in the ICM buffer using the pointer ICM$.
      169     5396              DESCRIPTION: This procedure validates the checksum of the
      170     5397                           incoming ICM data, decodes and executes the
      171     5398                           ICM command, collects the test results and
      172     5399                           formats them into the outgoing ICM reply data.
      173     5400        */
      174     5401        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:9    
      175     5402    1   PROCESS_ICM: PROC;
      176     5403
      177     5404    2      DCL CKS BIT(16) ALIGNED;
      178     5405
      179     5406    2      CALL Y$CKSUM (CKS);
      180     5407
      181     5408    2      IF Y_CLTICM.T1.R1.ICMCKS ~= CKS
      182     5409    3      THEN DO;
      183     5410    3              Y_CLTICM.T1.IFLAGS.BADCKS = %G_ON#;
      184     5411    3              Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;
      185     5412    3           END;
      186     5413    3      ELSE DO;
      187     5414    4              DO CASE (Y_CLTICM.T1.R1.ICMCOM);
      188     5415
      189     5416    4                 CASE (%Y#STARTT);
      190     5417    4                    CALL START_TEST;
      191     5418
      192     5419    4                 CASE (%Y#EXECUT);
      193     5420    4                    CALL EXECUTE_TEST;
      194     5421
      195     5422    4                 CASE (%Y#TERMNT);
      196     5423    4                    CALL TERMINATE_TEST;
      197     5424
      198     5425    4                 CASE (ELSE);
      199     5426    4                    Y_CLTICM.T1.IFLAGS.BADCOM = %G_ON#;
      200     5427    4                    Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;
      201     5428    4              END;
      202     5429    3           END;
      203     5430
      204     5431    2      CALL Y$CKSUM (CKS);
      205     5432
      206     5433    2      Y_CLTICM.T1.R1.ICMCKS = CKS;
      207     5434
      208     5435    2      RETURN;
      209     5436
      210     5437        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:10   
      211     5438        /*I*  NAME:        Y$CKSUM
      212     5439              PURPOSE:     Compute checksum for COLTS ICM
      213     5440              CALL:        CALL Y$CKSUM (CS);
      214     5441                           Does not altreturn.
      215     5442              PARAMETERS:  CS is an OUTPUT parameter containing the
      216     5443                           computed checksum of the ICM data.
      217     5444              INTERFACE:   None.
      218     5445              DATA:        Examines data in ICM buffer using pointer ICM$.
      219     5446              DESCRIPTION: Computes checksum by successively exclusive-or'ing
      220     5447                           the words in the ICM data buffer, starting with
      221     5448                           word 3 of the ICM.
      222     5449        */
      223     5450        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:11   
      224     5451    2   Y$CKSUM: PROC (CS);
      225     5452
      226     5453    3      DCL ITEM UBIN BYTE;
      227     5454    3      DCL CS BIT(16) ALIGNED;
      228     5455
      229     5456    3      CS = '0'B;
      230     5457
      231     5458    3      IF Y_CLTICM.T1.R1.ICMWDS > 9
      232     5459    3      THEN
      233     5460
      234     5461    4           DO ITEM = 0 TO Y_CLTICM.T1.R1.ICMWDS - 4;
      235     5462    4              CS = CS \ Y_CLTICM.T2.ICMTXT (ITEM);
      236     5463    4           END;
      237     5464
      238     5465    3      RETURN;
      239     5466
      240     5467    3   END Y$CKSUM;
      241     5468
      242     5469        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:12   
      243     5470        /*I*  NAME:        START_TEST
      244     5471              PURPOSE:     Allocate resources for COLTS testing
      245     5472              CALL:        CALL START_TEST;
      246     5473                           Does not altreturn.
      247     5474              INTERFACE:   This routine calls the following:
      248     5475                            Y$GETLIN
      249     5476                            Y$ALLOC
      250     5477              DATA:        Uses data in ICM buffer (pointer ICM$).
      251     5478              DESCRIPTION: Places entry in Active Test Table and allocates
      252     5479                           channel/device for COLTS testing.
      253     5480        */
      254     5481        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:13   
      255     5482    2   START_TEST: PROC;
      256     5483
      257     5484    3      DCL CHAD BIT(16) ALIGNED;
      258     5485
      259     5486    3      CHAD = Y_CLTICM.T1.R1.CHNLNR;
      260     5487
      261     5488    3      CALL Y$GETLIN WHENRETURN
      262     5489    4           DO;
      263     5490    4              CALL Y$ALLOC;
      264     5491    4           END;
      265     5492
      266     5493    3      IF Y_CLTICM.T1.IFLAGS.DVBUSY = %G_OFF#
      267     5494    3      THEN
      268     5495    3         Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;
      269     5496    3      ELSE
      270     5497    4           DO;
      271     5498    4              Y_CLTICM.T1.R1.ICMRPY = %Y#ALLOCN;
      272     5499    4              IF Y_FLAGS.NOATE
      273     5500    4              THEN
      274     5501    4                 Y_FLAGS.NOATE = %G_OFF#;
      275     5502    4              ELSE
      276     5503    5                   DO;
      277     5504    5                      Y_TENTRY(Y_CLTICM.T1.R1.TSTIND) = '0'B;
      278     5505    5                      Y_TCOUNT = Y_TCOUNT - 1;
      279     5506    5                   END;
      280     5507    4           END;
      281     5508
      282     5509    3      RETURN;
      283     5510
      284     5511        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:14   
      285     5512        /*I*  NAME:        Y$GETLIN
      286     5513              PURPOSE:     Put entry in Active Test Table
      287     5514              CALL:        CALL Y$GETLIN ALTRET;
      288     5515                           This routine altreturns if the table is full.
      289     5516              INTERFACE:   None.
      290     5517              DATA:        Uses data in ICM buffer (pointer ICM$).
      291     5518              DESCRIPTION: This routine places the channel number and
      292     5519                           test type code of the requested test in the
      293     5520                           next available entry in the Active Test Table.
      294     5521                           The table can hold a maximum of 8 entries.
      295     5522        */
      296     5523        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:15   
      297     5524    3   Y$GETLIN: PROC ALTRET;
      298     5525
      299     5526    4      DCL ITEM UBIN BYTE;
      300     5527
      301     5528    4      IF Y_TCOUNT < 8
      302     5529    5      THEN DO ITEM = 0 TO 7;
      303     5530
      304     5531    5              IF Y_TENTRY(ITEM) = '0'B
      305     5532    6              THEN DO;
      306     5533    6                      Y_CLTICM.T1.R1.TSTIND = ITEM;
      307     5534    6                      Y_TENTRY.CHN(ITEM) = CHAD;
      308     5535    6                      Y_TENTRY.TYP(ITEM) = Y_CLTICM.T1.TSTYPE;
      309     5536    6                      Y_TCOUNT = Y_TCOUNT + 1;
      310     5537    6                      RETURN;
      311     5538    6                   END;
      312     5539
      313     5540    5           END;
      314     5541
      315     5542    4      Y_FLAGS.NOATE = %G_ON#;
      316     5543    4      Y_CLTICM.T1.IFLAGS.DVBUSY = %G_ON#;
      317     5544    4      ALTRETURN;
      318     5545
      319     5546    4   END Y$GETLIN;
      320     5547
      321     5548        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:16   
      322     5549        /*I*  NAME:        Y$ALLOC
      323     5550              PURPOSE:     Allocate channel or device to COLTS for testing
      324     5551              CALL:        CALL Y$ALLOC;
      325     5552                           Does not altreturn.
      326     5553              INTERFACE:   This routine calls the following:
      327     5554                            M$GCHAN
      328     5555              DATA:        Uses data in ICM buffer (pointer ICM$).
      329     5556              DESCRIPTION: This routine obtains a channel or device for
      330     5557                           testing.
      331     5558        */
      332     5559        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:17   
      333     5560    3   Y$ALLOC: PROC;
      334     5561
      335     5562    4      GET_CHAN.V.CHANNEL = Y_CLTICM.T1.R1.CHAN;
      336     5563
      337     5564    4      CALL M$GCHAN (GET_CHAN)
      338     5565    5      WHENALTRETURN DO;
      339     5566    5              Y_CLTICM.T1.IFLAGS.DVBUSY = %G_ON#;
      340     5567    5           END;
      341     5568
      342     5569    4      RETURN;
      343     5570
      344     5571    4   END Y$ALLOC;
      345     5572
      346     5573    3   END START_TEST;
      347     5574
      348     5575        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:18   
      349     5576        /*I*  NAME:        EXECUTE_TEST
      350     5577              PURPOSE:     Execute test I/O per ICM
      351     5578              CALL:        CALL EXECUTE_TEST;
      352     5579                           Does not altreturn.
      353     5580              INTERFACE:   This routine calls the following:
      354     5581                            Y$IOSXD
      355     5582              DATA:        Uses data in ICM buffer (pointer ICM$).
      356     5583              DESCRIPTION: Interprets ICM function code and calls
      357     5584                           corresponding routine to execute appropriate
      358     5585                           test I/O.
      359     5586        */
      360     5587        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:19   
      361     5588    2   EXECUTE_TEST: PROC;
      362     5589
      363     5590    4      DO CASE (Y_CLTICM.T1.EXTCFG);
      364     5591
      365     5592    4         CASE (%Y#IOSXD);
      366     5593    4            CALL Y$IOSXD;
      367     5594
      368     5595    4         CASE (ELSE);
      369     5596    4            Y_CLTICM.T1.IFLAGS.BADCOM = %G_ON#;
      370     5597    4            Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;
      371     5598
      372     5599    4      END;
      373     5600
      374     5601    3      RETURN;
      375     5602
      376     5603        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:20   
      377     5604        /*I*  NAME:        Y$IOSXD
      378     5605              PURPOSE:     Execute a string of I/O commands
      379     5606              CALL:        CALL Y$IOSXD;
      380     5607                           Does not altreturn.
      381     5608              INTERFACE:   This routine calls the following:
      382     5609                            Y$XIODAT
      383     5610              DATA:        Uses data in ICM buffer (pointer ICM$).
      384     5611              DESCRIPTION: Sequentially executes a string of I/O
      385     5612                           instructions which it obtains from the
      386     5613                           ICM.
      387     5614        */
      388     5615        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:21   
      389     5616    3   Y$IOSXD: PROC;
      390     5617
      391     5618    4      DCL STAT BIT(16) ALIGNED;
      392     5619    4      DCL INX UBIN WORD;
      393     5620    4      DCL NUMIO UBIN WORD;
      394     5621    4      DCL DP$ PTR;
      395     5622    4      DCL BO UBIN WORD;
      396     5623    4      DCL ITEM UBIN WORD;
      397     5624    4      DCL CON UBIN WORD;
      398     5625    4      DCL 1 CHN ALIGNED,
      399     5626    4            2 CH UBIN(10) UNAL,
      400     5627    4            2 FC UBIN(6) UNAL;
      401     5628    4      DCL CHN_CH UBIN(10) ALIGNED;
      402     5629    4      DCL CHN_FC UBIN(6) ALIGNED;
      403     5630
      404     5631    4      INX = %GT_STRDATOFS#;
      405     5632    4      STAT = '0'B;
      406     5633    4      NUMIO = Y_CLTICM.T1.TSTDAT(3);
      407     5634
      408     5635    4      CALL Y$XIODAT ALTRET (PLOP);
      409     5636
      410     5637    4      Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;
      411     5638
      412     5639    4   PLOP:
      413     5640    4      RETURN;
      414     5641
      415     5642        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:22   
      416     5643        /*I*  NAME:        Y$XIODAT
      417     5644              PURPOSE:     Execute I/O instructions
      418     5645              CALL:        CALL Y$XIODAT ALTRET;
      419     5646                           Altreturns if an I/O error occurs.
      420     5647              INTERFACE:   This routine calls the following:
      421     5648                            Y$IOLD
      422     5649                            M$WAIT
      423     5650                            Y$STATUS
      424     5651                            Y$DOIO
      425     5652                            Y$CKSTAT
      426     5653              DATA:        Uses data in ICM buffer (pointer ICM$).
      427     5654              DESCRIPTION: Obtains each I/O command in turn from ICM
      428     5655                           data, determines type of I/O required, and
      429     5656                           then executes that I/O command.
      430     5657        */
      431     5658        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:23   
      432     5659    4   Y$XIODAT: PROC ALTRET;
      433     5660
      434     5661    6      DO ITEM = 0 TO 2*(NUMIO - 1) BY 2;
      435     5662    6         CON = Y_CLTICM.T2.TEXT(INX + ITEM);
      436     5663    6         CHN = Y_CLTICM.T2.ICMTXT(INX + ITEM + 1);
      437     5664    6         CHN_CH = CHN.CH;
      438     5665    6         CHN_FC = CHN.FC;
      439     5666
      440     5667    6         IF CHN.FC = %GH#IO_IOLD
      441     5668    6         THEN
      442     5669    7              DO;
      443     5670    7                 DP$ = PINCRW(ICM$, NUMIO * 2);
      444     5671    7                 BO = %GT_ICMDATOFF#;
      445     5672    7                 CALL Y$IOLD(CHN_CH, DP$, BO, CON) ALTRET(GOOP);
      446     5673    7                 CALL M$WAIT(WAIT_IO);
      447     5674    7              END;
      448     5675    6         ELSE
      449     5676    6            IF CHN.FC = %GH#IO_INPSTT
      450     5677    6            THEN
      451     5678    7                 DO;
      452     5679    7                    CALL M$WAIT(WAIT_IO);
      453     5680    7                    CALL Y$STATUS(CHN_CH, STAT) ALTRET(GOOP);
      454     5681    7                 END;
      455     5682    6            ELSE
      456     5683    7                 DO;
      457     5684    7                    CALL Y$DOIO(CHN_CH, CHN_FC, CON) ALTRET(GOOP);
      458     5685    7                    CALL M$WAIT(WAIT_IO);
      459     5686    7                    IF CHN.FC = %GH#IO_INPCNF OR CHN.FC = %GT_RDSCRATCH#
      460     5687    7                    THEN
      461     5688    7                       Y_CLTICM.T2.TEXT(9) = CON;
      462     5689    7                 END;
      463     5690    6      END;
      464     5691
      465     5692    5      IF Y_FLAGS.CKRDY
      466     5693    5      THEN
      467     5694    6           DO;
      468     5695    6              Y_FLAGS.CKRDY = %G_OFF#;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:24   
      469     5696    6              CALL Y$CKSTAT(CHN_CH, STAT) ALTRET(GOOP);
      470     5697    6           END;
      471     5698
      472     5699    5      RETURN;
      473     5700
      474     5701    5   GOOP:
      475     5702    5      ALTRETURN;
      476     5703
      477     5704    5   END Y$XIODAT;
      478     5705
      479     5706    4   END Y$IOSXD;
      480     5707
      481     5708        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:25   
      482     5709        /*I*  NAME:        Y$STATUS
      483     5710              PURPOSE:     Obtain and save status word
      484     5711              CALL:        CALL Y$STATUS (CH, STAT) ALTRET;
      485     5712                           Altreturns if an I/O error occurs.
      486     5713              PARAMETERS:  CH is an INPUT parameter containing the
      487     5714                           channel address.
      488     5715                           STAT is an output parameter containing the
      489     5716                           status.
      490     5717              INTERFACE:   This routine calls the following:
      491     5718                            Y$DOIO
      492     5719                            Y$SAVSTT
      493     5720              DATA:        Saves status in ICM buffer (pointer ICM$).
      494     5721              DESCRIPTION: Executes I/O to obtain status word per
      495     5722                           given channel address and saves status
      496     5723                           in reply ICM.
      497     5724        */
      498     5725        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:26   
      499     5726    3   Y$STATUS: PROC (CH, STAT) ALTRET;
      500     5727
      501     5728    4      DCL STAT BIT(16) ALIGNED;
      502     5729    4      DCL 1 CH ALIGNED,
      503     5730    4            2 M UBIN(9) UNAL,
      504     5731    4            2 X BIT(1) UNAL;
      505     5732    4      DCL FC UBIN(6) ALIGNED;
      506     5733
      507     5734    4      STAT = '0'B;
      508     5735    4      FC = %GH#IO_INPSTT;
      509     5736
      510     5737    4      CALL Y$DOIO (CH, FC, STAT) WHENALTRETURN
      511     5738    5           DO;
      512     5739    5              CALL Y$SAVSTT;
      513     5740    5              ALTRETURN;
      514     5741    5           END;
      515     5742
      516     5743    4      CALL Y$SAVSTT;
      517     5744
      518     5745    4      RETURN;
      519     5746
      520     5747        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:27   
      521     5748        /*I*  NAME:        Y$SAVSTT
      522     5749              PURPOSE:     Save status word
      523     5750              CALL:        CALL Y$SAVSTT;
      524     5751                           Does not altreturn.
      525     5752              INTERFACE:   None.
      526     5753              DATA:        ICM buffer (pointer ICM$).
      527     5754              DESCRIPTION: Determines location in ICM buffer
      528     5755                           to save status, and saves it there.
      529     5756                           An output status is saved in word 13 of
      530     5757                           the ICM.  An input status is saved in
      531     5758                           word 12.
      532     5759        */
      533     5760        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:28   
      534     5761    4   Y$SAVSTT: PROC;
      535     5762
      536     5763    5      IF CH.X
      537     5764    5      THEN
      538     5765    5         Y_CLTICM.T2.ICMTXT(10) = STAT;
      539     5766    5      ELSE
      540     5767    5         Y_CLTICM.T2.ICMTXT(9) = STAT;
      541     5768
      542     5769    5      RETURN;
      543     5770
      544     5771    5   END Y$SAVSTT;
      545     5772
      546     5773    4   END Y$STATUS;
      547     5774
      548     5775        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:29   
      549     5776        /*I*  NAME:        Y$CKSTAT
      550     5777              PURPOSE:     Check for valid status
      551     5778              CALL:        CALL Y$CKSTAT (CH, STAT) ALTRET;
      552     5779                           Altreturns if an I/O error occurs or
      553     5780                           if timer runout occurs before a valid
      554     5781                           status.
      555     5782              PARAMETERS:  CH is an INPUT parameter containing the
      556     5783                           pertinent channel address.
      557     5784                           STAT is an input and output parameter
      558     5785                           containing the status.
      559     5786              INTERFACE:   This routine calls the following:
      560     5787                            M$WAIT
      561     5788                            Y$STATUS
      562     5789                            Y$IOER
      563     5790              DATA:        ICM buffer (pointer ICM$).
      564     5791              DESCRIPTION: Checks status word in the FPT for device
      565     5792                           ready.  If status is not ready, routine
      566     5793                           then waits a short time and issues a new
      567     5794                           status request.  This status is then
      568     5795                           checked for ready.  Cycle continues until
      569     5796                           either a valid status is obtained or a
      570     5797                           timeout occurs.
      571     5798        */
      572     5799        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:30   
      573     5800    3   Y$CKSTAT: PROC (CH, STAT) ALTRET;
      574     5801
      575     5802    4      DCL ITEM UBIN WORD;
      576     5803    4      DCL STAT BIT(16) ALIGNED;
      577     5804    4      DCL CH UBIN(10) ALIGNED;
      578     5805    4      DCL FC UBIN(6) ALIGNED;
      579     5806
      580     5807    5      DO ITEM = 1 TO 9;
      581     5808
      582     5809    5         IF (STAT & %GT_DVCRDYSTT#)
      583     5810    5         THEN
      584     5811    5            RETURN;
      585     5812    5         ELSE
      586     5813    6              DO;
      587     5814    6                 CALL M$WAIT (WAIT_IO);
      588     5815    6                 CALL Y$STATUS (CH, STAT) ALTRET (BOP);
      589     5816    6              END;
      590     5817
      591     5818    5      END;
      592     5819    4      RETURN;
      593     5820
      594     5821    4   BOP:
      595     5822    4      ALTRETURN;
      596     5823
      597     5824    4   END Y$CKSTAT;
      598     5825
      599     5826        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:31   
      600     5827        /*I*  NAME:        Y$IOLD
      601     5828              PURPOSE:     Perform IOLD per input parameters
      602     5829              CALL:        CALL Y$IOLD (CH, DP$, BOFS, BSIZ) ALTRET;
      603     5830                           Altreturns if an I/O error occurs.
      604     5831              PARAMETERS:  CH is an INPUT parameter containing the channel
      605     5832                           address.
      606     5833                           DP$ is an INPUT parameter containing a pointer
      607     5834                           to the data buffer.
      608     5835                           BOFS is an INPUT parameter containing the offset
      609     5836                           in bytes to the data buffer pointer.
      610     5837                           BSIZ is an INPUT parameter containing the size
      611     5838                           of the data in bytes.
      612     5839              INTERFACE:   This routine calls the following:
      613     5840                            GHH$IOLD
      614     5841                            Y$IOER
      615     5842              DATA:        Sets up GT_IOLD FPT. Uses ICM buffer (pointer
      616     5843                           ICM$).
      617     5844              DESCRIPTION: Places channel, function code, size(bytes),
      618     5845                           offset(bytes), and buffer pointer into the
      619     5846                           GT_IOLD FPT.  Then it executes IOLD using
      620     5847                           the GHH$IOLD routine.
      621     5848        */
      622     5849        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:32   
      623     5850    3   Y$IOLD: PROC (CH, DP$, BOFS, BSIZ) ALTRET;
      624     5851
      625     5852    4      DCL CH UBIN(10) ALIGNED;
      626     5853    4      DCL FC UBIN(6) ALIGNED;
      627     5854    4      DCL DP$ PTR;
      628     5855    4      DCL BOFS UBIN WORD;
      629     5856    4      DCL BSIZ UBIN WORD;
      630     5857
      631     5858    4      FC = GT_IOLD.FNC;
      632     5859
      633     5860    4      GT_IOLD.CHN = CH;
      634     5861    4      GT_IOLD.BYTX = BOFS;
      635     5862    4      GT_IOLD.BUFSIZE = BSIZ;
      636     5863    4      GT_IOLD.BUF$ = DP$;
      637     5864
      638     5865    4      CALL GHH$IOLD (GT_IOLD) WHENALTRETURN
      639     5866    5           DO;
      640     5867    5              Y_CLTICM.T1.IFLAGS.IONAK = %G_ON#;
      641     5868    5              CALL Y$IOER (FC);
      642     5869    5              ALTRETURN;
      643     5870    5           END;
      644     5871
      645     5872    4      RETURN;
      646     5873
      647     5874    4   END Y$IOLD;
      648     5875
      649     5876        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:33   
      650     5877        /*I*  NAME:        Y$DOIO
      651     5878              PURPOSE:     Perform IO per input parameters
      652     5879              CALL:        CALL Y$DOIO (CH, FC, CON) ALTRET;
      653     5880                           Altreturns if an I/O error occurs.
      654     5881              PARAMETERS:  CH is an INPUT parameter containing the
      655     5882                           channel address.
      656     5883                           FC is an INPUT parameter containing the
      657     5884                           function code.
      658     5885                           CON is an INPUT or OUTPUT parameter containing
      659     5886                           a control word.
      660     5887              INTERFACE:   This routine calls the following:
      661     5888                            GHH$IO_IN
      662     5889                            Y$IOER
      663     5890              DATA:        Sets up GT_IO FPT. Uses ICM buffer (pointer ICM$).
      664     5891              DESCRIPTION: Places channel address, function code, and
      665     5892                           control word into the GT_IO FPT.  Then it
      666     5893                           executes the I/O using the GHH$IO_IN
      667     5894                           routine.
      668     5895        */
      669     5896        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:34   
      670     5897    3   Y$DOIO: PROC (CH, FC, CON) ALTRET;
      671     5898
      672     5899    4      DCL CH UBIN(10) ALIGNED;
      673     5900    4      DCL FC UBIN(6) ALIGNED;
      674     5901    4      DCL CON UBIN WORD;
      675     5902
      676     5903    4      GT_IO.CAS.FNC = FC;
      677     5904    4      GT_IO.RANGE = CON;
      678     5905    4      GT_IO.CAS.CHN = CH;
      679     5906
      680     5907    4      CALL GHH$IO_IN (GT_IO) WHENALTRETURN
      681     5908    5           DO;
      682     5909    5              Y_CLTICM.T1.IFLAGS.IONAK = %G_ON#;
      683     5910    5              CALL Y$IOER (FC);
      684     5911    5              ALTRETURN;
      685     5912    5           END;
      686     5913
      687     5914    4      CON = GT_IO.RANGE;
      688     5915
      689     5916    4      RETURN;
      690     5917
      691     5918    4   END Y$DOIO;
      692     5919
      693     5920        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:35   
      694     5921        /*I*  NAME:        Y$IOER
      695     5922              PURPOSE:     Process common error data on bad IO returns
      696     5923              CALL:        CALL Y$IOER (FC);
      697     5924                           Does not altreturn.
      698     5925              PARAMETERS:  FC is an input parameter containing the
      699     5926                           function code.
      700     5927              INTERFACE:   None.
      701     5928              DATA:        Uses data in ICM buffer (pointer ICM$).
      702     5929              DESCRIPTION: Places common IO error data in ICM.
      703     5930        */
      704     5931        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:36   
      705     5932    3   Y$IOER: PROC (FC);
      706     5933
      707     5934    4      DCL FC UBIN(6) ALIGNED;
      708     5935
      709     5936    4      Y_CLTICM.T1.TSTDAT(0) = FC;
      710     5937    4      Y_CLTICM.T1.R1.ICMRPY = %Y#NORESP;
      711     5938
      712     5939    4      RETURN;
      713     5940
      714     5941    4   END Y$IOER;
      715     5942
      716     5943    3   END EXECUTE_TEST;
      717     5944
      718     5945        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:37   
      719     5946        /*I*  NAME:        TERMINATE_TEST
      720     5947              PURPOSE:     Terminate specified FEP COLTS test
      721     5948              CALL:        CALL TERMINATE_TEST;
      722     5949                           Does not altreturn.
      723     5950              INTERFACE:   This routine calls the following:
      724     5951                            Y$TRMTST
      725     5952              DATA:        Uses data in ICM buffer (pointer ICM$).
      726     5953              DESCRIPTION: Extracts the channel number and test
      727     5954                           number from the ICM data and then calls
      728     5955                           Y$TRMTST to terminate this test.
      729     5956                           Places proper reply code in ICM data.
      730     5957        */
      731     5958        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:38   
      732     5959    2   TERMINATE_TEST: PROC ALTRET;
      733     5960
      734     5961    3      DCL TNUM UBIN BYTE ALIGNED;
      735     5962    3      DCL CHAD BIT(16) ALIGNED;
      736     5963
      737     5964    3      TNUM = Y_CLTICM.T1.R1.TSTIND;
      738     5965    3      CHAD = Y_CLTICM.T1.R1.CHNLNR;
      739     5966
      740     5967    3      CALL Y$TRMTST (TNUM,CHAD);
      741     5968
      742     5969    3      IF Y_FLAGS.NOSUCHTST = %G_OFF#
      743     5970    3      THEN
      744     5971    3         Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;
      745     5972
      746     5973    4      ELSE DO;
      747     5974    4              Y_CLTICM.T1.IFLAGS.NOTEST = %G_ON#;
      748     5975    4              Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;
      749     5976    4              Y_FLAGS.NOSUCHTST = %G_OFF#;
      750     5977    4           END;
      751     5978
      752     5979    3      RETURN;
      753     5980
      754     5981    3   END TERMINATE_TEST;
      755     5982
      756     5983    2   END PROCESS_ICM;
      757     5984
      758     5985        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:39   
      759     5986        /*I*  NAME:        WRAP_UP
      760     5987              PURPOSE:     Terminate all FEP COLTS tests
      761     5988              CALL:        CALL WRAP_UP;
      762     5989                           Does not altreturn.
      763     5990              INTERFACE:   This routine calls the following:
      764     5991                            Y$TRMTST
      765     5992              DATA:        Uses data in Active Test Table.
      766     5993              DESCRIPTION: This routine successively extracts channel
      767     5994                           number and test number information on each
      768     5995                           active test from the Active Test Table.
      769     5996                           It successively calls Y$TRMTST to terminate
      770     5997                           each active test.
      771     5998        */
      772     5999        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:40   
      773     6000    1   WRAP_UP: PROC ALTRET;
      774     6001
      775     6002    2      DCL TNUM UBIN BYTE ALIGNED;
      776     6003    2      DCL CHAD BIT(16) ALIGNED;
      777     6004
      778     6005    2      IF Y_TCOUNT > 0
      779     6006    3      THEN DO TNUM = 0 TO 7;
      780     6007
      781     6008    3              IF Y_TENTRY (TNUM)
      782     6009    4              THEN DO;
      783     6010    4                      CHAD = Y_TENTRY.CHN(TNUM);
      784     6011    4                      CALL Y$TRMTST (TNUM,CHAD);
      785     6012    4                      IF Y_TCOUNT = 0 THEN RETURN;
      786     6013    4                   END;
      787     6014
      788     6015    3           END;
      789     6016
      790     6017    2      RETURN;
      791     6018
      792     6019    2   END WRAP_UP;
      793     6020
      794     6021        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:41   
      795     6022        /*I*  NAME:        Y$TRMTST
      796     6023              PURPOSE:     Terminate specified FEP COLTS test
      797     6024              CALL:        CALL Y$TRMTST (TNUM, CHAD);
      798     6025                           Does not altreturn.
      799     6026              PARAMETERS:  TNUM is an INPUT parameter containing the index
      800     6027                           number to the test's entry in the Active Test
      801     6028                           Table.
      802     6029                           CHAD is an INPUT parameter containing the channel
      803     6030                           address for the test.
      804     6031              INTERFACE:   This routine calls the following:
      805     6032                            M$RCHAN
      806     6033              DATA:        Operates on Active Test Table.
      807     6034              DESCRIPTION: This routine clears the entry for the specified
      808     6035                           test in the Active Test Table, and releases
      809     6036                           the channel from COLTS control.
      810     6037                           The routine also sets a flag if there is an
      811     6038                           altreturn from M$RCHAN.
      812     6039        */
      813     6040        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:42   
      814     6041    1   Y$TRMTST: PROC (TNUM,CHAD) ALTRET;
      815     6042
      816     6043    2      DCL TNUM UBIN BYTE ALIGNED;
      817     6044    2      DCL CHAD UBIN(16) ALIGNED;
      818     6045
      819     6046    2      Y_TENTRY(TNUM) = '0'B;
      820     6047
      821     6048    2      Y_TCOUNT = Y_TCOUNT - 1;
      822     6049
      823     6050    2      Y_FLAGS.NOSUCHTST = %G_OFF#;
      824     6051
      825     6052    2      RELEASE_CHAN.V.CHANNEL = CHAD;
      826     6053
      827     6054    2      CALL M$RCHAN (RELEASE_CHAN)
      828     6055    3      WHENALTRETURN DO;
      829     6056    3              Y_FLAGS.NOSUCHTST = %G_ON#;
      830     6057    3           END;
      831     6058
      832     6059    2      RETURN;
      833     6060
      834     6061    2   END Y$TRMTST;
      835     6062
      836     6063    1   END GTD$MDC_HNDLR;
      837     6064
      838     6065        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:43   

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:44   
--  Include file information  --

   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   GH_IOFNC_E.:E05TOU  is referenced.
   GT_CMN_E.:E05TOU  is referenced.
   GT_MACROS_M.:E05TOU  is referenced.
      No diagnostics issued in procedure GTD$MDC_HNDLR.

   Procedure GTD$MDC_HNDLR requires 1097 words for executable code.
   Procedure GTD$MDC_HNDLR requires 55 words of local(AUTO) storage.

    No errors detected in file GTD$MDC_HNDLR.:E05TSI    .

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:45   

 Object Unit name= GTD$MDC_HNDLR                              File name= GTD$MDC_HNDLR.:E05TOU
 UTS= JUL 29 '97 22:12:35.40 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none   430    1AE  GTD$MDC_HNDLR
    1   DCB   even  none     0      0  M$COLTD
    2  RoData even  UTS      4      4  GTD$MDC_HNDLR
    3   Proc  even  none  1097    449  GTD$MDC_HNDLR
    4  RoData even  none     5      5  GTD$MDC_HNDLR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Main       0  GTD$MDC_HNDLR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GHH$IOLD
 yes     yes           Std       1 GHH$IO_IN
                       nStd      0 X6A_MAUTO
                       nStd      0 X6A_MARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$COLTD                          r    G$ROS$
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:46   


        1        1        /*M* GTD$MDC_HNDLR     Front End T&D COLTS Message and I/O Handler */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        GTD$MDC_HNDLR
       12       12              AUTHOR:      R. D. Vogler
       13       13              PURPOSE:     Colts Message Handler and I/O Handler
       14       14              DESCRIPTION: This module handles Colts intercomputer messages
       15       15                           (ICM's) between the FEP and the Host, and also
       16       16                           performs necessary I/O on behalf of the Colts
       17       17                           test pages.
       18       18              REFERENCE:   CP-6 Release C01
       19       19              LAST UPDATE: 02/06/85
       20       20        */
       21       21        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:47   
       22       22        /*F*  NAME:        GTD$MDC_HNDLR
       23       23              PURPOSE:     Handle COLTS ICM's and test I/O's
       24       24              DESCRIPTION: This procedure is entered as a consequence of
       25       25                           downline-loading this module into the front-end
       26       26                           processor(FEP).  This routine opens a path to
       27       27                           host COLTS, processes incoming COLTS messages
       28       28                           (ICM's), performs specified test I/O's, and sends
       29       29                           the test results back to host COLTS.  As the
       30       30                           result of an ALTRET on either M$READ or M$WRITE,
       31       31                           this procedure does an orderly cleanup and
       32       32                           exits.
       33       33        */
       34       34        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:48   
       35       35        /*D*  NAME:        GTD$MDC_HNDLR
       36       36              INTERFACE:   This routine calls the following:
       37       37                            M$OPEN
       38       38                            M$READ
       39       39                            PROCESS_ICM
       40       40                            M$WRITE
       41       41                            WRAP_UP
       42       42                            M$CLOSE
       43       43                            M$EXIT
       44       44        */
       45       45        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:49   
       46       46        GTD$MDC_HNDLR: PROC MAIN;

     46   3 000000  D380 0000 0000  xent GTD$MDC_HNDLR   LNJ,B5   X6A_MAUTO
          3 000003       0037 0000                       DC       55,0

       47       47
       48       48        /*   INCLUDE FILES   */
       49       49        %INCLUDE GT_MACROS_M;
       50      132        %INCLUDE GT_CMN_E;
       51      238        %INCLUDE GH_IOFNC_E;
       52      307        %INCLUDE GH_HARDWARE_M;
       53      405        %INCLUDE LCP_6;
       54     4684        %INCLUDE G_JIT_M;
       55     4949        %G$JIT_E;
       56     5011
       57     5012        /*   MACROS   */
       58     5013        %Y_CLTICM (STCLASS = "BASED (ICM$)");
       59     5058        %GH_IO (FPTN  = GT_IO, STCLASS =  STATIC);
       60     5074        %GH_IOLD (FPTN = GT_IOLD, STCLASS = STATIC);
       61     5089        %VLR_GCHAN (FPTN = CHAN_DATA);
       62     5108
       63     5109        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:50   
       64     5110        /*   FPT'S   */
       65     5111        %FPT_OPEN  (FPTN    = OPEN_COLTS,
       66     5112                    DCB     = M$COLTD,
       67     5113                    ORG     = CONSEC,
       68     5114                    RES     ='HO');
       69     5142
       70     5143        %FPT_READ  (FPTN    = GET_ICM,
       71     5144                    DCB     = M$COLTD,
       72     5145                    BUF     = ICMDATA,
       73     5146                    WAIT    = YES);
       74     5172
       75     5173        %FPT_WRITE (FPTN    = SEND_ICM,
       76     5174                    BP      = YES,
       77     5175                    DCB     = M$COLTD,
       78     5176                    BUF     = ICMDATA);
       79     5200
       80     5201        %FPT_WAIT  (FPTN    = WAIT_IO,
       81     5202                    UNITS   = SECS_DELAY);
       82     5226
       83     5227        %FPT_CLOSE (FPTN    = END_COLTS,
       84     5228                    DCB     = M$COLTD);
       85     5248
       86     5249        %FPT_GCHAN (FPTN       = GET_CHAN,
       87     5250                    GCHAN      = CHAN_DATA,
       88     5251                    DIAG       = YES,
       89     5252                    CONTROLLER = NO);
       90     5275
       91     5276        %FPT_RCHAN (FPTN       = RELEASE_CHAN,
       92     5277                    CONTROLLER = NO);
       93     5298
       94     5299        %FPT_SPRIV (FPTN = ACTIVATE_PRIV,
       95     5300                    AUTH = YES,
       96     5301                    PRIV = MSYS_PRIV);
       97     5324
       98     5325        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:51   
       99     5326        /*   DCL'S   */
      100     5327    1      DCL 1 Y_FLAGS STATIC ALIGNED,
      101     5328    1            2 NOSUCHTST BIT(1) UNAL INIT('0'B),
      102     5329    1            2 CKRDY BIT(1) UNAL INIT('0'B),
      103     5330    1            2 NOATE BIT(1) UNAL INIT('0'B),
      104     5331    1            2 * BIT(5) UNAL INIT('0'B);
      105     5332
      106     5333    1      DCL Y_TCOUNT UBIN BYTE STATIC UNAL INIT(0);
      107     5334
      108     5335    1      DCL 1 Y_TENTRY(0:7) STATIC ALIGNED,
      109     5336    1            2 CHN,
      110     5337    1              3 C BIT(10) UNAL INIT('0'B*8),
      111     5338    1              3 F BIT(6) UNAL INIT('0'B*8),
      112     5339    1            2 RFU UBIN BYTE UNAL INIT(0*8),
      113     5340    1            2 TYP UBIN BYTE UNAL INIT(0*8);
      114     5341
      115     5342    1      DCL ICM$ PTR STATIC INIT(ADDR(NIL));
      116     5343
      117     5344    1      DCL SECS_DELAY UBIN(16) STATIC INIT(1);
      118     5345
      119     5346    1      DCL M$COLTD DCB;
      120     5347
      121     5348    1      DCL GHH$IOLD ENTRY(1) ALTRET ;
      122     5349    1      DCL GHH$IO_IN ENTRY(1) ALTRET ;
      123     5350
      124     5351    1      DCL ICMDATA CHAR(512) STATIC ALIGNED INIT(' ');
      125     5352
      126     5353    1      DCL MSYS_PRIV BIT (32) STATIC ALIGNED INIT ('0'B);
      127     5354
      128     5355        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:52   
      129     5356
      130     5357        /*   THIS IS THE TOP-LEVEL CODING FOR THIS PROCEDURE   */
      131     5358
      132     5359        /* Note that it does M$READ(with WAIT) and M$WRITE(no WAIT) */
      133     5360
      134     5361    1      MSYS_PRIV = %G_PR_TND#;

   5361   3 000005  8C80 0000 0000  02                   LDI      0
          3 000008  8D00 0000 01AC  00                   SDI      MSYS_PRIV

      135     5362    1      CALL M$SPRIV (ACTIVATE_PRIV) ALTRET (SOLONG);

   5362   3 00000B  BB80 0000 008D  00                   LAB,B3   ACTIVATE_PRIV
          3 00000E  B870 0CD0                            LDR,R3   3280,IMO
          3 000010  0001                                 MCL
          3 000011       003E                            DC       s:5382,PREL

      136     5363    1      CALL M$SYS ALTRET (SOLONG);

   5363   3 000012  3C43                                 LDV,R3   67
          3 000013  0001                                 MCL
          3 000014       003B                            DC       s:5382,PREL

      137     5364
      138     5365    1      CALL M$OPEN (OPEN_COLTS) ALTRET (SOLONG);

   5365   3 000015  BB80 0000 000F  00                   LAB,B3   OPEN_COLTS
          3 000018  B870 3540                            LDR,R3   13632,IMO
          3 00001A  0001                                 MCL
          3 00001B       0034                            DC       s:5382,PREL

      139     5366
      140     5367    1      ICM$ = ADDR (ICMDATA);

   5367   3 00001C  EB80 0000 00AC  00                   LAB,B6   ICMDATA
          3 00001F  EF80 0000 00A9  00                   STB,B6   ICM$

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:53   
      141     5368
      142     5369    2      DO WHILE (%G_YES#);

      143     5370    2         VBOUND(GET_ICM.BUF_) = 511;

   5370   3 000022  E870 01FF                            LDR,R6   511,IMO
          3 000024  EF00 0000 0044  00                   STR,R6   GET_ICM+6

      144     5371    2         CALL M$READ (GET_ICM) ALTRET (BEGONE);

   5371   3 000027  BB80 0000 003E  00                   LAB,B3   GET_ICM
          3 00002A  B870 1542                            LDR,R3   5442,IMO
          3 00002C  0001                                 MCL
          3 00002D       0018                            DC       s:5378,PREL

      145     5372    2         CALL PROCESS_ICM;

   5372   3 00002E  E3C0 0026                            LNJ,B6   s:0,PREL
          3 000030       0001                            DC       s:5373,PREL

      146     5373    2         VBOUND(SEND_ICM.BUF_) = 2 * Y_CLTICM.T1.R1.ICMWDS - 1;

   5373   3 000031  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000034  E846 0003                            LDR,R6   3,B6
          3 000036  6001                                 SOL,R6   1
          3 000037  E570 01FE                            AND,R6   510,IMO
          3 000039  6EFF                                 ADV,R6   -1
          3 00003A  EF00 0000 0056  00                   STR,R6   SEND_ICM+6

      147     5374    2         CALL M$WRITE (SEND_ICM) ALTRET (BEGONE);

   5374   3 00003D  BB80 0000 0050  00                   LAB,B3   SEND_ICM
          3 000040  B870 1543                            LDR,R3   5443,IMO
          3 000042  0001                                 MCL
          3 000043       0002                            DC       s:5378,PREL

      148     5375    2      END;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:54   

   5375   3 000044  0FDE                                 B        s:5370,SPREL

      149     5376
      150     5377    1   BEGONE:
      151     5378    1      CALL WRAP_UP;

   5378   3 000045  E3C0 038A            BEGONE          LNJ,B6   s:0,PREL
          3 000047       0001                            DC       s:5379,PREL

      152     5379    1      CALL M$CLOSE (END_COLTS);

   5379   3 000048  BB80 0000 006C  00                   LAB,B3   END_COLTS
          3 00004B  B870 1541                            LDR,R3   5441,IMO
          3 00004D  0001                                 MCL
          3 00004E       0000                            DC       s:5379+6,PREL

      153     5380
      154     5381    1   SOLONG:
      155     5382    1      CALL M$EXIT;

   5382   3 00004F  B870 0080            SOLONG          LDR,R3   128,IMO
          3 000051  0001                                 MCL
          3 000052       0000                            DC       s:5382+3,PREL
          3 000053  0F81 03F2                            B        s:6063,PREL

      156     5383
      157     5384        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:55   
      158     5385        /*I*  NAME:        PROCESS_ICM
      159     5386              PURPOSE:     Process all COLTS ICM's
      160     5387              CALL:        CALL PROCESS_ICM;
      161     5388                           Never altreturns.
      162     5389              INTERFACE:   This routine calls the following:
      163     5390                            Y$CKSUM
      164     5391                            START_TEST
      165     5392                            EXECUTE_TEST
      166     5393                            TERMINATE_TEST
      167     5394              DATA:        This routine analyzes and modifies the data
      168     5395                           in the ICM buffer using the pointer ICM$.
      169     5396              DESCRIPTION: This procedure validates the checksum of the
      170     5397                           incoming ICM data, decodes and executes the
      171     5398                           ICM command, collects the test results and
      172     5399                           formats them into the outgoing ICM reply data.
      173     5400        */
      174     5401        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:56   
      175     5402    1   PROCESS_ICM: PROC;

   5402   3 000055  EFC7 0004            PROCESS_ICM     STB,B6   +4,AUTO

      176     5403
      177     5404    2      DCL CKS BIT(16) ALIGNED;
      178     5405
      179     5406    2      CALL Y$CKSUM (CKS);

   5406   3 000057  DBC7 0006                            LAB,B5   CKS,AUTO
          3 000059  DFC7 000A                            STB,B5   CHAD+3,AUTO
          3 00005B  E3C0 004D                            LNJ,B6   s:0,PREL
          3 00005D       0001                            DC       s:5408,PREL

      180     5407
      181     5408    2      IF Y_CLTICM.T1.R1.ICMCKS ~= CKS

   5408   3 00005E  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000061  E846 0002                            LDR,R6   2,B6
          3 000063  E947 0006                            CMR,R6   CKS,AUTO
          3 000065  0901 000A                            BE       s:5414,PREL

      182     5409    3      THEN DO;

      183     5410    3              Y_CLTICM.T1.IFLAGS.BADCKS = %G_ON#;

   5410   3 000067  8946 0008                            LBT,'0080'X       8,B6
   5410   3 000069       0080

      184     5411    3              Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;

   5411   3 00006A  5C22                                 LDV,R5   34
          3 00006B  DAC6 0004                            SRM,R5,'00FF'X    4,B6
          3 00006D       00FF

      185     5412    3           END;

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:57   
   5412   3 00006E  0F81 0028                            B        s:5431,PREL

      186     5413    3      ELSE DO;

      187     5414    4              DO CASE (Y_CLTICM.T1.R1.ICMCOM);

   5414   3 000070  B2C6 0004                            LLH,R3   4,B6
          3 000072  3D06                                 CMV,R3   6
          3 000073  0281 001C                            BGE      s:5426,PREL
          3 000075  A830 0000 007B  03                   LDR,R2   s:5414+11,R3
          3 000078  83A0 0000 0081  03                   JMP      s:5417,R2
          3 00007B       000F                            DC       s:5426,PREL
          3 00007C       000F                            DC       s:5426,PREL
          3 00007D       000F                            DC       s:5426,PREL
          3 00007E       0000                            DC       s:5417,PREL
          3 00007F       0005                            DC       s:5420,PREL
          3 000080       000A                            DC       s:5423,PREL

      188     5415
      189     5416    4                 CASE (%Y#STARTT);

      190     5417    4                    CALL START_TEST;

   5417   3 000081  E3C0 005A                            LNJ,B6   s:0,PREL
          3 000083       0001                            DC       s:5417+3,PREL
          3 000084  0F81 0012                            B        s:5431,PREL

      191     5418
      192     5419    4                 CASE (%Y#EXECUT);

      193     5420    4                    CALL EXECUTE_TEST;

   5420   3 000086  E3C0 0109                            LNJ,B6   s:0,PREL
          3 000088       0001                            DC       s:5420+3,PREL
          3 000089  0F81 000D                            B        s:5431,PREL

      194     5421
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:58   
      195     5422    4                 CASE (%Y#TERMNT);

      196     5423    4                    CALL TERMINATE_TEST;

   5423   3 00008B  E3C0 030C                            LNJ,B6   s:0,PREL
          3 00008D       0001                            DC       s:5423+3,PREL
          3 00008E  0F81 0008                            B        s:5431,PREL

      197     5424
      198     5425    4                 CASE (ELSE);

      199     5426    4                    Y_CLTICM.T1.IFLAGS.BADCOM = %G_ON#;

   5426   3 000090  8946 0008                            LBT,'0040'X       8,B6
   5426   3 000092       0040

      200     5427    4                    Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;

   5427   3 000093  5C22                                 LDV,R5   34
          3 000094  DAC6 0004                            SRM,R5,'00FF'X    4,B6
          3 000096       00FF

      201     5428    4              END;

      202     5429    3           END;

      203     5430
      204     5431    2      CALL Y$CKSUM (CKS);

   5431   3 000097  EBC7 0006                            LAB,B6   CKS,AUTO
          3 000099  EFC7 000A                            STB,B6   CHAD+3,AUTO
          3 00009B  E3C0 000D                            LNJ,B6   s:0,PREL
          3 00009D       0001                            DC       s:5433,PREL

      205     5432
      206     5433    2      Y_CLTICM.T1.R1.ICMCKS = CKS;

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:59   
   5433   3 00009E  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0000A1  E847 0006                            LDR,R6   CKS,AUTO
          3 0000A3  EF46 0002                            STR,R6   2,B6

      207     5434
      208     5435    2      RETURN;

   5435   3 0000A5  ECC7 0004                            LDB,B6   +4,AUTO
          3 0000A7  C3C6 0001                            LNJ,B4   1,B6

      209     5436
      210     5437        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:60   
      211     5438        /*I*  NAME:        Y$CKSUM
      212     5439              PURPOSE:     Compute checksum for COLTS ICM
      213     5440              CALL:        CALL Y$CKSUM (CS);
      214     5441                           Does not altreturn.
      215     5442              PARAMETERS:  CS is an OUTPUT parameter containing the
      216     5443                           computed checksum of the ICM data.
      217     5444              INTERFACE:   None.
      218     5445              DATA:        Examines data in ICM buffer using pointer ICM$.
      219     5446              DESCRIPTION: Computes checksum by successively exclusive-or'ing
      220     5447                           the words in the ICM data buffer, starting with
      221     5448                           word 3 of the ICM.
      222     5449        */
      223     5450        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:61   
      224     5451    2   Y$CKSUM: PROC (CS);

   5451   3 0000A9  EFC7 0008            Y$CKSUM         STB,B6   CHAD+1,AUTO

      225     5452
      226     5453    3      DCL ITEM UBIN BYTE;
      227     5454    3      DCL CS BIT(16) ALIGNED;
      228     5455
      229     5456    3      CS = '0'B;

   5456   3 0000AB  DCC7 000A                            LDB,B5   @CS,AUTO
          3 0000AD  8705                                 CL       ,B5

      230     5457
      231     5458    3      IF Y_CLTICM.T1.R1.ICMWDS > 9

   5458   3 0000AE  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0000B1  E846 0003                            LDR,R6   3,B6
          3 0000B3  E570 00FF                            AND,R6   255,IMO
          3 0000B5  6D09                                 CMV,R6   9
          3 0000B6  0381 0021                            BLE      s:5465,PREL

      232     5459    3      THEN
      233     5460
      234     5461    4           DO ITEM = 0 TO Y_CLTICM.T1.R1.ICMWDS - 4;

   5461   3 0000B8  87C7 000C                            CLH      ITEM,AUTO
          3 0000BA  0F81 0011                            B        s:5463+5,PREL

      235     5462    4              CS = CS \ Y_CLTICM.T2.ICMTXT (ITEM);

   5462   3 0000BC  ECC7 000A                            LDB,B6   @CS,AUTO
          3 0000BE  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 0000C1  B2C7 000C                            LLH,R3   ITEM,AUTO
          3 0000C3  3E03                                 ADV,R3   3
          3 0000C4  E806                                 LDR,R6   ,B6
          3 0000C5  E635                                 XOR,R6   ,B5,R3
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:62   
          3 0000C6  EF06                                 STR,R6   ,B6

      236     5463    4           END;

   5463   3 0000C7  D2C7 000C                            LLH,R5   ITEM,AUTO
          3 0000C9  5E01                                 ADV,R5   1
          3 0000CA  D7C7 000C                            STH,R5   ITEM,AUTO
          3 0000CC  E2C7 000C                            LLH,R6   ITEM,AUTO
          3 0000CE  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0000D1  D846 0003                            LDR,R5   3,B6
          3 0000D3  D570 00FF                            AND,R5   255,IMO
          3 0000D5  5EFC                                 ADV,R5   -4
          3 0000D6  E955                                 CMR,R6   R5
          3 0000D7  0AE5                                 BALE     s:5462,SPREL

      237     5464
      238     5465    3      RETURN;

   5465   3 0000D8  ECC7 0008                            LDB,B6   CHAD+1,AUTO
          3 0000DA  C3C6 0001                            LNJ,B4   1,B6

      239     5466
      240     5467    3   END Y$CKSUM;
      241     5468
      242     5469        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:63   
      243     5470        /*I*  NAME:        START_TEST
      244     5471              PURPOSE:     Allocate resources for COLTS testing
      245     5472              CALL:        CALL START_TEST;
      246     5473                           Does not altreturn.
      247     5474              INTERFACE:   This routine calls the following:
      248     5475                            Y$GETLIN
      249     5476                            Y$ALLOC
      250     5477              DATA:        Uses data in ICM buffer (pointer ICM$).
      251     5478              DESCRIPTION: Places entry in Active Test Table and allocates
      252     5479                           channel/device for COLTS testing.
      253     5480        */
      254     5481        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:64   
      255     5482    2   START_TEST: PROC;

   5482   3 0000DC  EFC7 0008            START_TEST      STB,B6   CHAD+1,AUTO

      256     5483
      257     5484    3      DCL CHAD BIT(16) ALIGNED;
      258     5485
      259     5486    3      CHAD = Y_CLTICM.T1.R1.CHNLNR;

   5486   3 0000DE  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 0000E1  E845 0005                            LDR,R6   5,B5
          3 0000E3  EF47 000A                            STR,R6   CHAD,AUTO

      260     5487
      261     5488    3      CALL Y$GETLIN WHENRETURN

   5488   3 0000E5  E3C0 003C                            LNJ,B6   s:0,PREL
          3 0000E7       0004                            DC       s:5493,PREL

      262     5489    4           DO;

      263     5490    4              CALL Y$ALLOC;

   5490   3 0000E8  E3C0 008A                            LNJ,B6   s:0,PREL
          3 0000EA       0001                            DC       s:5493,PREL

      264     5491    4           END;

      265     5492
      266     5493    3      IF Y_CLTICM.T1.IFLAGS.DVBUSY = %G_OFF#

   5493   3 0000EB  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0000EE  82C6 0008                            LB,'0010'X        8,B6
          3 0000F0       0010
          3 0000F1  0501 0007                            BBT      s:5498,PREL

      267     5494    3      THEN
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:65   
      268     5495    3         Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;

   5495   3 0000F3  6C21                                 LDV,R6   33
          3 0000F4  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          3 0000F6       00FF
          3 0000F7  0F81 0026                            B        s:5509,PREL

      269     5496    3      ELSE
      270     5497    4           DO;

      271     5498    4              Y_CLTICM.T1.R1.ICMRPY = %Y#ALLOCN;

   5498   3 0000F9  6C29                                 LDV,R6   41
          3 0000FA  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          3 0000FC       00FF

      272     5499    4              IF Y_FLAGS.NOATE

   5499   3 0000FD  8280 0000 0097  00                   LB,'2000'X        Y_FLAGS
   5499   3 000100       2000
          3 000101  0581 0007                            BBF      s:5504,PREL

      273     5500    4              THEN
      274     5501    4                 Y_FLAGS.NOATE = %G_OFF#;

   5501   3 000103  8800 0000 0097  00                   LBF,'2000'X       Y_FLAGS
   5501   3 000106       2000
          3 000107  0F81 0016                            B        s:5509,PREL

      275     5502    4              ELSE
      276     5503    5                   DO;

      277     5504    5                      Y_TENTRY(Y_CLTICM.T1.R1.TSTIND) = '0'B;

   5504   3 000109  B2C6 0003                            LLH,R3   3,B6
          3 00010B  BF47 0036                            STR,R3   @FC+2,AUTO
          3 00010D  3001                                 SOL,R3   1
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:66   
          3 00010E  8730 0000 0099  00                   CL       Y_TENTRY,R3
          3 000111  B847 0036                            LDR,R3   @FC+2,AUTO
          3 000113  3001                                 SOL,R3   1
          3 000114  8730 0000 009A  00                   CL       Y_TENTRY+1,R3

      278     5505    5                      Y_TCOUNT = Y_TCOUNT - 1;

   5505   3 000117  D280 0000 0098  00                   LLH,R5   Y_TCOUNT
          3 00011A  5EFF                                 ADV,R5   -1
          3 00011B  D780 0000 0098  00                   STH,R5   Y_TCOUNT

      279     5506    5                   END;

      280     5507    4           END;

      281     5508
      282     5509    3      RETURN;

   5509   3 00011E  ECC7 0008                            LDB,B6   CHAD+1,AUTO
          3 000120  C3C6 0001                            LNJ,B4   1,B6

      283     5510
      284     5511        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:67   
      285     5512        /*I*  NAME:        Y$GETLIN
      286     5513              PURPOSE:     Put entry in Active Test Table
      287     5514              CALL:        CALL Y$GETLIN ALTRET;
      288     5515                           This routine altreturns if the table is full.
      289     5516              INTERFACE:   None.
      290     5517              DATA:        Uses data in ICM buffer (pointer ICM$).
      291     5518              DESCRIPTION: This routine places the channel number and
      292     5519                           test type code of the requested test in the
      293     5520                           next available entry in the Active Test Table.
      294     5521                           The table can hold a maximum of 8 entries.
      295     5522        */
      296     5523        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:68   
      297     5524    3   Y$GETLIN: PROC ALTRET;

   5524   3 000122  EFC7 000C            Y$GETLIN        STB,B6   ITEM,AUTO

      298     5525
      299     5526    4      DCL ITEM UBIN BYTE;
      300     5527
      301     5528    4      IF Y_TCOUNT < 8

   5528   3 000124  E280 0000 0098  00                   LLH,R6   Y_TCOUNT
          3 000127  6D08                                 CMV,R6   8
          3 000128  0281 003C                            BGE      s:5542,PREL

      302     5529    5      THEN DO ITEM = 0 TO 7;

   5529   3 00012A  87C7 000E                            CLH      ITEM,AUTO

      303     5530
      304     5531    5              IF Y_TENTRY(ITEM) = '0'B

   5531   3 00012C  EB80 0000 0000  00                   LAB,B6   GT_IO
          3 00012F  B2C7 000E                            LLH,R3   ITEM,AUTO
          3 000131  3002                                 SOL,R3   2
          3 000132  DB80 0000 0000  04                   LAB,B5   0
          3 000135  5C01                                 LDV,R5   1
          3 000136  0022                                 ACM      ;
          3 000137       4436 0099                                ALPHANUM(153,B6,R3,,4,FILL),;
          3 000139       4005 0000                                ALPHANUM(0,B5,,R5,FILL)
          3 00013B  5301 0020                            CBNE     s:5540,PREL

      305     5532    6              THEN DO;

      306     5533    6                      Y_CLTICM.T1.R1.TSTIND = ITEM;

   5533   3 00013D  E2C7 000E                            LLH,R6   ITEM,AUTO
          3 00013F  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000142  E7C6 0003                            STH,R6   3,B6
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:69   

      307     5534    6                      Y_TENTRY.CHN(ITEM) = CHAD;

   5534   3 000144  A856                                 LDR,R2   R6
          3 000145  2001                                 SOL,R2   1
          3 000146  C847 000A                            LDR,R4   CHAD,AUTO
          3 000148  CF20 0000 0099  00                   STR,R4   Y_TENTRY,R2

      308     5535    6                      Y_TENTRY.TYP(ITEM) = Y_CLTICM.T1.TSTYPE;

   5535   3 00014B  92C6 0008                            LLH,R1   8,B6
          3 00014D  3E01                                 ADV,R3   1
          3 00014E  97B0 0000 009A  00                   STH,R1   Y_TENTRY+1,R3

      309     5536    6                      Y_TCOUNT = Y_TCOUNT + 1;

   5536   3 000151  E280 0000 0098  00                   LLH,R6   Y_TCOUNT
          3 000154  6E01                                 ADV,R6   1
          3 000155  E780 0000 0098  00                   STH,R6   Y_TCOUNT

      310     5537    6                      RETURN;

   5537   3 000158  ECC7 000C                            LDB,B6   ITEM,AUTO
          3 00015A  C3C6 0001                            LNJ,B4   1,B6

      311     5538    6                   END;
      312     5539
      313     5540    5           END;

   5540   3 00015C  E2C7 000E                            LLH,R6   ITEM,AUTO
          3 00015E  6E01                                 ADV,R6   1
          3 00015F  E7C7 000E                            STH,R6   ITEM,AUTO
          3 000161  E2C7 000E                            LLH,R6   ITEM,AUTO
          3 000163  6D07                                 CMV,R6   7
          3 000164  03C8                                 BLE      s:5531,SPREL

      314     5541
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:70   
      315     5542    4      Y_FLAGS.NOATE = %G_ON#;

   5542   3 000165  8900 0000 0097  00                   LBT,'2000'X       Y_FLAGS
   5542   3 000168       2000

      316     5543    4      Y_CLTICM.T1.IFLAGS.DVBUSY = %G_ON#;

   5543   3 000169  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 00016C  8946 0008                            LBT,'0010'X       8,B6
          3 00016E       0010

      317     5544    4      ALTRETURN;

   5544   3 00016F  ECC7 000C                            LDB,B6   ITEM,AUTO
          3 000171  B806                                 LDR,R3   ,B6
          3 000172  C3B6                                 LNJ,B4   ,B6,R3

      318     5545
      319     5546    4   END Y$GETLIN;
      320     5547
      321     5548        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:71   
      322     5549        /*I*  NAME:        Y$ALLOC
      323     5550              PURPOSE:     Allocate channel or device to COLTS for testing
      324     5551              CALL:        CALL Y$ALLOC;
      325     5552                           Does not altreturn.
      326     5553              INTERFACE:   This routine calls the following:
      327     5554                            M$GCHAN
      328     5555              DATA:        Uses data in ICM buffer (pointer ICM$).
      329     5556              DESCRIPTION: This routine obtains a channel or device for
      330     5557                           testing.
      331     5558        */
      332     5559        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:72   
      333     5560    3   Y$ALLOC: PROC;

   5560   3 000173  EFC7 000C            Y$ALLOC         STB,B6   ITEM,AUTO

      334     5561
      335     5562    4      GET_CHAN.V.CHANNEL = Y_CLTICM.T1.R1.CHAN;

   5562   3 000175  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 000178  E845 0005                            LDR,R6   5,B5
          3 00017A  EF00 0000 0082  00                   STR,R6   GET_CHAN+6

      336     5563
      337     5564    4      CALL M$GCHAN (GET_CHAN)

   5564   3 00017D  BB80 0000 007C  00                   LAB,B3   GET_CHAN
          3 000180  B870 0993                            LDR,R3   2451,IMO
          3 000182  0001                                 MCL
          3 000183       0003                            DC       s:5566,PREL
          3 000184  0F81 0007                            B        s:5569,PREL

      338     5565    5      WHENALTRETURN DO;

      339     5566    5              Y_CLTICM.T1.IFLAGS.DVBUSY = %G_ON#;

   5566   3 000186  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000189  8946 0008                            LBT,'0010'X       8,B6
          3 00018B       0010

      340     5567    5           END;

      341     5568
      342     5569    4      RETURN;

   5569   3 00018C  ECC7 000C                            LDB,B6   ITEM,AUTO
          3 00018E  C3C6 0001                            LNJ,B4   1,B6

      343     5570
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:73   
      344     5571    4   END Y$ALLOC;
      345     5572
      346     5573    3   END START_TEST;
      347     5574
      348     5575        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:74   
      349     5576        /*I*  NAME:        EXECUTE_TEST
      350     5577              PURPOSE:     Execute test I/O per ICM
      351     5578              CALL:        CALL EXECUTE_TEST;
      352     5579                           Does not altreturn.
      353     5580              INTERFACE:   This routine calls the following:
      354     5581                            Y$IOSXD
      355     5582              DATA:        Uses data in ICM buffer (pointer ICM$).
      356     5583              DESCRIPTION: Interprets ICM function code and calls
      357     5584                           corresponding routine to execute appropriate
      358     5585                           test I/O.
      359     5586        */
      360     5587        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:75   
      361     5588    2   EXECUTE_TEST: PROC;

   5588   3 000190  EFC7 0008            EXECUTE_TEST    STB,B6   CHAD+1,AUTO

      362     5589
      363     5590    4      DO CASE (Y_CLTICM.T1.EXTCFG);

   5590   3 000192  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 000195  B845 0007                            LDR,R3   7,B5
          3 000197  3EF3                                 ADV,R3   -13
          3 000198  3D01                                 CMV,R3   1
          3 000199  0281 000D                            BGE      s:5596,PREL
          3 00019B  A830 0000 01A1  03                   LDR,R2   s:5590+15,R3
          3 00019E  83A0 0000 01A2  03                   JMP      s:5593,R2
          3 0001A1       0000                            DC       s:5593,PREL

      364     5591
      365     5592    4         CASE (%Y#IOSXD);

      366     5593    4            CALL Y$IOSXD;

   5593   3 0001A2  E3C0 000F                            LNJ,B6   s:0,PREL
          3 0001A4       0001                            DC       s:5593+3,PREL
          3 0001A5  0F81 0008                            B        s:5601,PREL

      367     5594
      368     5595    4         CASE (ELSE);

      369     5596    4            Y_CLTICM.T1.IFLAGS.BADCOM = %G_ON#;

   5596   3 0001A7  8945 0008                            LBT,'0040'X       8,B5
   5596   3 0001A9       0040

      370     5597    4            Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;

   5597   3 0001AA  6C22                                 LDV,R6   34
          3 0001AB  EAC5 0004                            SRM,R6,'00FF'X    4,B5
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:76   
          3 0001AD       00FF

      371     5598
      372     5599    4      END;

      373     5600
      374     5601    3      RETURN;

   5601   3 0001AE  ECC7 0008                            LDB,B6   CHAD+1,AUTO
          3 0001B0  C3C6 0001                            LNJ,B4   1,B6

      375     5602
      376     5603        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:77   
      377     5604        /*I*  NAME:        Y$IOSXD
      378     5605              PURPOSE:     Execute a string of I/O commands
      379     5606              CALL:        CALL Y$IOSXD;
      380     5607                           Does not altreturn.
      381     5608              INTERFACE:   This routine calls the following:
      382     5609                            Y$XIODAT
      383     5610              DATA:        Uses data in ICM buffer (pointer ICM$).
      384     5611              DESCRIPTION: Sequentially executes a string of I/O
      385     5612                           instructions which it obtains from the
      386     5613                           ICM.
      387     5614        */
      388     5615        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:78   
      389     5616    3   Y$IOSXD: PROC;

   5616   3 0001B2  EFC7 000A            Y$IOSXD         STB,B6   CHAD,AUTO

      390     5617
      391     5618    4      DCL STAT BIT(16) ALIGNED;
      392     5619    4      DCL INX UBIN WORD;
      393     5620    4      DCL NUMIO UBIN WORD;
      394     5621    4      DCL DP$ PTR;
      395     5622    4      DCL BO UBIN WORD;
      396     5623    4      DCL ITEM UBIN WORD;
      397     5624    4      DCL CON UBIN WORD;
      398     5625    4      DCL 1 CHN ALIGNED,
      399     5626    4            2 CH UBIN(10) UNAL,
      400     5627    4            2 FC UBIN(6) UNAL;
      401     5628    4      DCL CHN_CH UBIN(10) ALIGNED;
      402     5629    4      DCL CHN_FC UBIN(6) ALIGNED;
      403     5630
      404     5631    4      INX = %GT_STRDATOFS#;

   5631   3 0001B4  6C0B                                 LDV,R6   11
          3 0001B5  EF47 000D                            STR,R6   INX,AUTO

      405     5632    4      STAT = '0'B;

   5632   3 0001B7  8747 000C                            CL       STAT,AUTO

      406     5633    4      NUMIO = Y_CLTICM.T1.TSTDAT(3);

   5633   3 0001B9  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 0001BC  D845 000B                            LDR,R5   11,B5
          3 0001BE  D570 00FF                            AND,R5   255,IMO
          3 0001C0  DF47 000E                            STR,R5   NUMIO,AUTO

      407     5634
      408     5635    4      CALL Y$XIODAT ALTRET (PLOP);

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:79   
   5635   3 0001C2  E3C0 000D                            LNJ,B6   s:0,PREL
          3 0001C4       0008                            DC       s:5640,PREL

      409     5636
      410     5637    4      Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;

   5637   3 0001C5  6C21                                 LDV,R6   33
          3 0001C6  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0001C9  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          3 0001CB       00FF

      411     5638
      412     5639    4   PLOP:
      413     5640    4      RETURN;

   5640   3 0001CC  ECC7 000A            PLOP            LDB,B6   CHAD,AUTO
          3 0001CE  C3C6 0001                            LNJ,B4   1,B6

      414     5641
      415     5642        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:80   
      416     5643        /*I*  NAME:        Y$XIODAT
      417     5644              PURPOSE:     Execute I/O instructions
      418     5645              CALL:        CALL Y$XIODAT ALTRET;
      419     5646                           Altreturns if an I/O error occurs.
      420     5647              INTERFACE:   This routine calls the following:
      421     5648                            Y$IOLD
      422     5649                            M$WAIT
      423     5650                            Y$STATUS
      424     5651                            Y$DOIO
      425     5652                            Y$CKSTAT
      426     5653              DATA:        Uses data in ICM buffer (pointer ICM$).
      427     5654              DESCRIPTION: Obtains each I/O command in turn from ICM
      428     5655                           data, determines type of I/O required, and
      429     5656                           then executes that I/O command.
      430     5657        */
      431     5658        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:81   
      432     5659    4   Y$XIODAT: PROC ALTRET;

   5659   3 0001D0  EFC7 0018            Y$XIODAT        STB,B6   CHN_FC+2,AUTO

      433     5660
      434     5661    6      DO ITEM = 0 TO 2*(NUMIO - 1) BY 2;

   5661   3 0001D2  8747 0012                            CL       ITEM,AUTO
          3 0001D4  0F81 0095                            B        s:5690+5,PREL

      435     5662    6         CON = Y_CLTICM.T2.TEXT(INX + ITEM);

   5662   3 0001D6  E847 000D                            LDR,R6   INX,AUTO
          3 0001D8  EA47 0012                            ADD,R6   ITEM,AUTO
          3 0001DA  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0001DD  B856                                 LDR,R3   R6
          3 0001DE  3E03                                 ADV,R3   3
          3 0001DF  E836                                 LDR,R6   ,B6,R3
          3 0001E0  EF47 0013                            STR,R6   CON,AUTO

      436     5663    6         CHN = Y_CLTICM.T2.ICMTXT(INX + ITEM + 1);

   5663   3 0001E2  D847 000D                            LDR,R5   INX,AUTO
          3 0001E4  DA47 0012                            ADD,R5   ITEM,AUTO
          3 0001E6  B855                                 LDR,R3   R5
          3 0001E7  3E04                                 ADV,R3   4
          3 0001E8  D836                                 LDR,R5   ,B6,R3
          3 0001E9  DF47 0014                            STR,R5   CHN,AUTO

      437     5664    6         CHN_CH = CHN.CH;

   5664   3 0001EB  C847 0014                            LDR,R4   CHN,AUTO
          3 0001ED  4046                                 SOR,R4   6
          3 0001EE  4006                                 SOL,R4   6
          3 0001EF  CF47 0015                            STR,R4   CHN_CH,AUTO

      438     5665    6         CHN_FC = CHN.FC;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:82   

   5665   3 0001F1  C847 0014                            LDR,R4   CHN,AUTO
          3 0001F3  C570 003F                            AND,R4   63,IMO
          3 0001F5  400A                                 SOL,R4   10
          3 0001F6  CF47 0016                            STR,R4   CHN_FC,AUTO

      439     5666
      440     5667    6         IF CHN.FC = %GH#IO_IOLD

   5667   3 0001F8  C847 0014                            LDR,R4   CHN,AUTO
          3 0001FA  C570 003F                            AND,R4   63,IMO
          3 0001FC  4D09                                 CMV,R4   9
          3 0001FD  0981 0029                            BNE      s:5676,PREL

      441     5668    6         THEN
      442     5669    7              DO;

      443     5670    7                 DP$ = PINCRW(ICM$, NUMIO * 2);

   5670   3 0001FF  F847 000E                            LDR,R7   NUMIO,AUTO
          3 000201  6C00                                 LDV,R6   0
          3 000202  7081                                 DOL,R7   1
          3 000203  8400 0000 00A9  00                   AID      ICM$
          3 000206  8D47 000F                            SDI      DP$,AUTO

      444     5671    7                 BO = %GT_ICMDATOFF#;

   5671   3 000208  3C1C                                 LDV,R3   28
          3 000209  BF47 0011                            STR,R3   BO,AUTO

      445     5672    7                 CALL Y$IOLD(CHN_CH, DP$, BO, CON) ALTRET(GOOP);

   5672   3 00020B  DBC7 0013                            LAB,B5   CON,AUTO
          3 00020D  DFC7 0022                            STB,B5   @BOFS+2,AUTO
          3 00020F  CBC7 0011                            LAB,B4   BO,AUTO
          3 000211  CFC7 0020                            STB,B4   @DP$+2,AUTO
          3 000213  BBC7 000F                            LAB,B3   DP$,AUTO
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:83   
          3 000215  BFC7 001E                            STB,B3   @CH+2,AUTO
          3 000217  ABC7 0015                            LAB,B2   CHN_CH,AUTO
          3 000219  AFC7 001C                            STB,B2   CHN_FC+6,AUTO
          3 00021B  E3C0 00E9                            LNJ,B6   s:0,PREL
          3 00021D       0070                            DC       s:5702,PREL

      446     5673    7                 CALL M$WAIT(WAIT_IO);

   5673   3 00021E  BB80 0000 0062  00                   LAB,B3   WAIT_IO
          3 000221  B870 0CC5                            LDR,R3   3269,IMO
          3 000223  0001                                 MCL
          3 000224       0000                            DC       s:5673+6,PREL

      447     5674    7              END;

   5674   3 000225  0F81 003F                            B        s:5690,PREL

      448     5675    6         ELSE
      449     5676    6            IF CHN.FC = %GH#IO_INPSTT

   5676   3 000227  4D18                                 CMV,R4   24
          3 000228  0981 0015                            BNE      s:5684,PREL

      450     5677    6            THEN
      451     5678    7                 DO;

      452     5679    7                    CALL M$WAIT(WAIT_IO);

   5679   3 00022A  BB80 0000 0062  00                   LAB,B3   WAIT_IO
          3 00022D  B870 0CC5                            LDR,R3   3269,IMO
          3 00022F  0001                                 MCL
          3 000230       0000                            DC       s:5679+6,PREL

      453     5680    7                    CALL Y$STATUS(CHN_CH, STAT) ALTRET(GOOP);

   5680   3 000231  EBC7 000C                            LAB,B6   STAT,AUTO
          3 000233  EFC7 0026                            STB,B6   FC+2,AUTO
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:84   
          3 000235  DBC7 0015                            LAB,B5   CHN_CH,AUTO
          3 000237  DFC7 0024                            STB,B5   @BSIZ+2,AUTO
          3 000239  E3C0 0057                            LNJ,B6   s:0,PREL
          3 00023B       0052                            DC       s:5702,PREL

      454     5681    7                 END;

   5681   3 00023C  0F81 0028                            B        s:5690,PREL

      455     5682    6            ELSE
      456     5683    7                 DO;

      457     5684    7                    CALL Y$DOIO(CHN_CH, CHN_FC, CON) ALTRET(GOOP);

   5684   3 00023E  DBC7 0013                            LAB,B5   CON,AUTO
          3 000240  DFC7 0030                            STB,B5   @FC+2,AUTO
          3 000242  CBC7 0016                            LAB,B4   CHN_FC,AUTO
          3 000244  CFC7 002E                            STB,B4   @CH+2,AUTO
          3 000246  BBC7 0015                            LAB,B3   CHN_CH,AUTO
          3 000248  BFC7 002C                            STB,B3   FC+4,AUTO
          3 00024A  E3C0 00FD                            LNJ,B6   s:0,PREL
          3 00024C       0041                            DC       s:5702,PREL

      458     5685    7                    CALL M$WAIT(WAIT_IO);

   5685   3 00024D  BB80 0000 0062  00                   LAB,B3   WAIT_IO
          3 000250  B870 0CC5                            LDR,R3   3269,IMO
          3 000252  0001                                 MCL
          3 000253       0000                            DC       s:5685+6,PREL

      459     5686    7                    IF CHN.FC = %GH#IO_INPCNF OR CHN.FC = %GT_RDSCRATCH#

   5686   3 000254  E847 0014                            LDR,R6   CHN,AUTO
          3 000256  E570 003F                            AND,R6   63,IMO
          3 000258  6D10                                 CMV,R6   16
          3 000259  0901 0004                            BE       s:5688,PREL
          3 00025B  6D3E                                 CMV,R6   62
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:85   
          3 00025C  0981 0008                            BNE      s:5690,PREL

      460     5687    7                    THEN
      461     5688    7                       Y_CLTICM.T2.TEXT(9) = CON;

   5688   3 00025E  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000261  D847 0013                            LDR,R5   CON,AUTO
          3 000263  DF46 000C                            STR,R5   12,B6

      462     5689    7                 END;

      463     5690    6      END;

   5690   3 000265  E847 0012                            LDR,R6   ITEM,AUTO
          3 000267  6E02                                 ADV,R6   2
          3 000268  EF47 0012                            STR,R6   ITEM,AUTO
          3 00026A  E847 000E                            LDR,R6   NUMIO,AUTO
          3 00026C  6001                                 SOL,R6   1
          3 00026D  6EFE                                 ADV,R6   -2
          3 00026E  6801 0005                            BLZ,R6   s:5692,PREL
          3 000270  E947 0012                            CMR,R6   ITEM,AUTO
          3 000272  0281 FF63                            BGE      s:5662,PREL

      464     5691
      465     5692    5      IF Y_FLAGS.CKRDY

   5692   3 000274  8280 0000 0097  00                   LB,'4000'X        Y_FLAGS
   5692   3 000277       4000
          3 000278  0581 0010                            BBF      s:5699,PREL

      466     5693    5      THEN
      467     5694    6           DO;

      468     5695    6              Y_FLAGS.CKRDY = %G_OFF#;

   5695   3 00027A  8800 0000 0097  00                   LBF,'4000'X       Y_FLAGS
   5695   3 00027D       4000
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:86   

      469     5696    6              CALL Y$CKSTAT(CHN_CH, STAT) ALTRET(GOOP);

   5696   3 00027E  EBC7 000C                            LAB,B6   STAT,AUTO
          3 000280  EFC7 001E                            STB,B6   @CH+2,AUTO
          3 000282  DBC7 0015                            LAB,B5   CHN_CH,AUTO
          3 000284  DFC7 001C                            STB,B5   CHN_FC+6,AUTO
          3 000286  E3C0 004E                            LNJ,B6   s:0,PREL
          3 000288       0005                            DC       s:5702,PREL

      470     5697    6           END;

      471     5698
      472     5699    5      RETURN;

   5699   3 000289  ECC7 0018                            LDB,B6   CHN_FC+2,AUTO
          3 00028B  C3C6 0001                            LNJ,B4   1,B6

      473     5700
      474     5701    5   GOOP:
      475     5702    5      ALTRETURN;

   5702   3 00028D  ECC7 0018            GOOP            LDB,B6   CHN_FC+2,AUTO
          3 00028F  B806                                 LDR,R3   ,B6
          3 000290  C3B6                                 LNJ,B4   ,B6,R3

      476     5703
      477     5704    5   END Y$XIODAT;
      478     5705
      479     5706    4   END Y$IOSXD;
      480     5707
      481     5708        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:87   
      482     5709        /*I*  NAME:        Y$STATUS
      483     5710              PURPOSE:     Obtain and save status word
      484     5711              CALL:        CALL Y$STATUS (CH, STAT) ALTRET;
      485     5712                           Altreturns if an I/O error occurs.
      486     5713              PARAMETERS:  CH is an INPUT parameter containing the
      487     5714                           channel address.
      488     5715                           STAT is an output parameter containing the
      489     5716                           status.
      490     5717              INTERFACE:   This routine calls the following:
      491     5718                            Y$DOIO
      492     5719                            Y$SAVSTT
      493     5720              DATA:        Saves status in ICM buffer (pointer ICM$).
      494     5721              DESCRIPTION: Executes I/O to obtain status word per
      495     5722                           given channel address and saves status
      496     5723                           in reply ICM.
      497     5724        */
      498     5725        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:88   
      499     5726    3   Y$STATUS: PROC (CH, STAT) ALTRET;

   5726   3 000291  EFC7 0022            Y$STATUS        STB,B6   @BOFS+2,AUTO

      500     5727
      501     5728    4      DCL STAT BIT(16) ALIGNED;
      502     5729    4      DCL 1 CH ALIGNED,
      503     5730    4            2 M UBIN(9) UNAL,
      504     5731    4            2 X BIT(1) UNAL;
      505     5732    4      DCL FC UBIN(6) ALIGNED;
      506     5733
      507     5734    4      STAT = '0'B;

   5734   3 000293  DCC7 0026                            LDB,B5   @STAT,AUTO
          3 000295  8705                                 CL       ,B5

      508     5735    4      FC = %GH#IO_INPSTT;

   5735   3 000296  E870 6000                            LDR,R6   24576,IMO
          3 000298  EF47 0028                            STR,R6   FC,AUTO

      509     5736
      510     5737    4      CALL Y$DOIO (CH, FC, STAT) WHENALTRETURN

   5737   3 00029A  DFC7 0030                            STB,B5   @FC+2,AUTO
          3 00029C  EBC7 0028                            LAB,B6   FC,AUTO
          3 00029E  EFC7 002E                            STB,B6   @CH+2,AUTO
          3 0002A0  CCC7 0024                            LDB,B4   @CH,AUTO
          3 0002A2  CFC7 002C                            STB,B4   FC+4,AUTO
          3 0002A4  E3C0 00A3                            LNJ,B6   s:0,PREL
          3 0002A6       0003                            DC       s:5739,PREL
          3 0002A7  0F81 0008                            B        s:5743,PREL

      511     5738    5           DO;

      512     5739    5              CALL Y$SAVSTT;

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:89   
   5739   3 0002A9  E3C0 000D                            LNJ,B6   s:0,PREL
          3 0002AB       0001                            DC       s:5740,PREL

      513     5740    5              ALTRETURN;

   5740   3 0002AC  ECC7 0022                            LDB,B6   @BOFS+2,AUTO
          3 0002AE  B806                                 LDR,R3   ,B6
          3 0002AF  C3B6                                 LNJ,B4   ,B6,R3

      514     5741    5           END;
      515     5742
      516     5743    4      CALL Y$SAVSTT;

   5743   3 0002B0  E3C0 0006                            LNJ,B6   s:0,PREL
          3 0002B2       0001                            DC       s:5745,PREL

      517     5744
      518     5745    4      RETURN;

   5745   3 0002B3  ECC7 0022                            LDB,B6   @BOFS+2,AUTO
          3 0002B5  C3C6 0001                            LNJ,B4   1,B6

      519     5746
      520     5747        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:90   
      521     5748        /*I*  NAME:        Y$SAVSTT
      522     5749              PURPOSE:     Save status word
      523     5750              CALL:        CALL Y$SAVSTT;
      524     5751                           Does not altreturn.
      525     5752              INTERFACE:   None.
      526     5753              DATA:        ICM buffer (pointer ICM$).
      527     5754              DESCRIPTION: Determines location in ICM buffer
      528     5755                           to save status, and saves it there.
      529     5756                           An output status is saved in word 13 of
      530     5757                           the ICM.  An input status is saved in
      531     5758                           word 12.
      532     5759        */
      533     5760        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:91   
      534     5761    4   Y$SAVSTT: PROC;

   5761   3 0002B7  EFC7 002A            Y$SAVSTT        STB,B6   FC+2,AUTO

      535     5762
      536     5763    5      IF CH.X

   5763   3 0002B9  DCC7 0024                            LDB,B5   @CH,AUTO
          3 0002BB  8285                                 LB,'0040'X        ,B5
          3 0002BC       0040
          3 0002BD  0581 000B                            BBF      s:5767,PREL

      537     5764    5      THEN
      538     5765    5         Y_CLTICM.T2.ICMTXT(10) = STAT;

   5765   3 0002BF  CC80 0000 00A9  00                   LDB,B4   ICM$
          3 0002C2  BCC7 0026                            LDB,B3   @STAT,AUTO
          3 0002C4  E803                                 LDR,R6   ,B3
          3 0002C5  EF44 000D                            STR,R6   13,B4
          3 0002C7  0F81 0009                            B        s:5769,PREL

      539     5766    5      ELSE
      540     5767    5         Y_CLTICM.T2.ICMTXT(9) = STAT;

   5767   3 0002C9  CC80 0000 00A9  00                   LDB,B4   ICM$
          3 0002CC  BCC7 0026                            LDB,B3   @STAT,AUTO
          3 0002CE  E803                                 LDR,R6   ,B3
          3 0002CF  EF44 000C                            STR,R6   12,B4

      541     5768
      542     5769    5      RETURN;

   5769   3 0002D1  ECC7 002A                            LDB,B6   FC+2,AUTO
          3 0002D3  C3C6 0001                            LNJ,B4   1,B6

      543     5770
      544     5771    5   END Y$SAVSTT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:92   
      545     5772
      546     5773    4   END Y$STATUS;
      547     5774
      548     5775        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:93   
      549     5776        /*I*  NAME:        Y$CKSTAT
      550     5777              PURPOSE:     Check for valid status
      551     5778              CALL:        CALL Y$CKSTAT (CH, STAT) ALTRET;
      552     5779                           Altreturns if an I/O error occurs or
      553     5780                           if timer runout occurs before a valid
      554     5781                           status.
      555     5782              PARAMETERS:  CH is an INPUT parameter containing the
      556     5783                           pertinent channel address.
      557     5784                           STAT is an input and output parameter
      558     5785                           containing the status.
      559     5786              INTERFACE:   This routine calls the following:
      560     5787                            M$WAIT
      561     5788                            Y$STATUS
      562     5789                            Y$IOER
      563     5790              DATA:        ICM buffer (pointer ICM$).
      564     5791              DESCRIPTION: Checks status word in the FPT for device
      565     5792                           ready.  If status is not ready, routine
      566     5793                           then waits a short time and issues a new
      567     5794                           status request.  This status is then
      568     5795                           checked for ready.  Cycle continues until
      569     5796                           either a valid status is obtained or a
      570     5797                           timeout occurs.
      571     5798        */
      572     5799        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:94   
      573     5800    3   Y$CKSTAT: PROC (CH, STAT) ALTRET;

   5800   3 0002D5  EFC7 001A            Y$CKSTAT        STB,B6   CHN_FC+4,AUTO

      574     5801
      575     5802    4      DCL ITEM UBIN WORD;
      576     5803    4      DCL STAT BIT(16) ALIGNED;
      577     5804    4      DCL CH UBIN(10) ALIGNED;
      578     5805    4      DCL FC UBIN(6) ALIGNED;
      579     5806
      580     5807    5      DO ITEM = 1 TO 9;

   5807   3 0002D7  6C01                                 LDV,R6   1
          3 0002D8  EF47 0020                            STR,R6   ITEM,AUTO

      581     5808
      582     5809    5         IF (STAT & %GT_DVCRDYSTT#)

   5809   3 0002DA  ECC7 001E                            LDB,B6   @STAT,AUTO
          3 0002DC  E806                                 LDR,R6   ,B6
          3 0002DD  E570 8000                            AND,R6   -32768,IMO
          3 0002DF  6901 0005                            BEZ,R6   s:5814,PREL

      583     5810    5         THEN
      584     5811    5            RETURN;

   5811   3 0002E1  ECC7 001A                            LDB,B6   CHN_FC+4,AUTO
          3 0002E3  C3C6 0001                            LNJ,B4   1,B6

      585     5812    5         ELSE
      586     5813    6              DO;

      587     5814    6                 CALL M$WAIT (WAIT_IO);

   5814   3 0002E5  BB80 0000 0062  00                   LAB,B3   WAIT_IO
          3 0002E8  B870 0CC5                            LDR,R3   3269,IMO
          3 0002EA  0001                                 MCL
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:95   
          3 0002EB       0000                            DC       s:5814+6,PREL

      588     5815    6                 CALL Y$STATUS (CH, STAT) ALTRET (BOP);

   5815   3 0002EC  ECC7 001E                            LDB,B6   @STAT,AUTO
          3 0002EE  EFC7 0026                            STB,B6   @STAT,AUTO
          3 0002F0  DCC7 001C                            LDB,B5   @CH,AUTO
          3 0002F2  DFC7 0024                            STB,B5   @CH,AUTO
          3 0002F4  E3C0 FF9C                            LNJ,B6   s:0,PREL
          3 0002F6       000B                            DC       s:5822,PREL

      589     5816    6              END;

      590     5817
      591     5818    5      END;

   5818   3 0002F7  8AC7 0020                            INC      ITEM,AUTO
          3 0002F9  E847 0020                            LDR,R6   ITEM,AUTO
          3 0002FB  6D09                                 CMV,R6   9
          3 0002FC  03DE                                 BLE      s:5809,SPREL

      592     5819    4      RETURN;

   5819   3 0002FD  ECC7 001A                            LDB,B6   CHN_FC+4,AUTO
          3 0002FF  C3C6 0001                            LNJ,B4   1,B6

      593     5820
      594     5821    4   BOP:
      595     5822    4      ALTRETURN;

   5822   3 000301  ECC7 001A            BOP             LDB,B6   CHN_FC+4,AUTO
          3 000303  B806                                 LDR,R3   ,B6
          3 000304  C3B6                                 LNJ,B4   ,B6,R3

      596     5823
      597     5824    4   END Y$CKSTAT;
      598     5825
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:96   
      599     5826        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:97   
      600     5827        /*I*  NAME:        Y$IOLD
      601     5828              PURPOSE:     Perform IOLD per input parameters
      602     5829              CALL:        CALL Y$IOLD (CH, DP$, BOFS, BSIZ) ALTRET;
      603     5830                           Altreturns if an I/O error occurs.
      604     5831              PARAMETERS:  CH is an INPUT parameter containing the channel
      605     5832                           address.
      606     5833                           DP$ is an INPUT parameter containing a pointer
      607     5834                           to the data buffer.
      608     5835                           BOFS is an INPUT parameter containing the offset
      609     5836                           in bytes to the data buffer pointer.
      610     5837                           BSIZ is an INPUT parameter containing the size
      611     5838                           of the data in bytes.
      612     5839              INTERFACE:   This routine calls the following:
      613     5840                            GHH$IOLD
      614     5841                            Y$IOER
      615     5842              DATA:        Sets up GT_IOLD FPT. Uses ICM buffer (pointer
      616     5843                           ICM$).
      617     5844              DESCRIPTION: Places channel, function code, size(bytes),
      618     5845                           offset(bytes), and buffer pointer into the
      619     5846                           GT_IOLD FPT.  Then it executes IOLD using
      620     5847                           the GHH$IOLD routine.
      621     5848        */
      622     5849        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:98   
      623     5850    3   Y$IOLD: PROC (CH, DP$, BOFS, BSIZ) ALTRET;

   5850   3 000305  EFC7 001A            Y$IOLD          STB,B6   CHN_FC+4,AUTO

      624     5851
      625     5852    4      DCL CH UBIN(10) ALIGNED;
      626     5853    4      DCL FC UBIN(6) ALIGNED;
      627     5854    4      DCL DP$ PTR;
      628     5855    4      DCL BOFS UBIN WORD;
      629     5856    4      DCL BSIZ UBIN WORD;
      630     5857
      631     5858    4      FC = GT_IOLD.FNC;

   5858   3 000307  E800 0000 0002  00                   LDR,R6   GT_IOLD
          3 00030A  E570 003F                            AND,R6   63,IMO
          3 00030C  600A                                 SOL,R6   10
          3 00030D  EF47 0024                            STR,R6   FC,AUTO

      632     5859
      633     5860    4      GT_IOLD.CHN = CH;

   5860   3 00030F  DCC7 001C                            LDB,B5   @CH,AUTO
          3 000311  E805                                 LDR,R6   ,B5
          3 000312  EA80 0000 0002  00                   SRM,R6,'FFC0'X    GT_IOLD
          3 000315       FFC0

      634     5861    4      GT_IOLD.BYTX = BOFS;

   5861   3 000316  CCC7 0020                            LDB,B4   @BOFS,AUTO
          3 000318  E804                                 LDR,R6   ,B4
          3 000319  EF00 0000 0005  00                   STR,R6   GT_IOLD+3

      635     5862    4      GT_IOLD.BUFSIZE = BSIZ;

   5862   3 00031C  BCC7 0022                            LDB,B3   @BSIZ,AUTO
          3 00031E  D803                                 LDR,R5   ,B3
          3 00031F  DF00 0000 0006  00                   STR,R5   GT_IOLD+4
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:99   

      636     5863    4      GT_IOLD.BUF$ = DP$;

   5863   3 000322  ACC7 001E                            LDB,B2   @DP$,AUTO
          3 000324  9C82                                 LDB,B1   ,B2
          3 000325  9F80 0000 0003  00                   STB,B1   GT_IOLD+1

      637     5864
      638     5865    4      CALL GHH$IOLD (GT_IOLD) WHENALTRETURN

   5865   3 000328  BB80 0000 0001  04                   LAB,B3   +1
          3 00032B  CBF0 0100                            LAB,B4   256,IMO
          3 00032D  E380 0000 0000  xent                 LNJ,B6   GHH$IOLD
          3 000330       0003                            DC       s:5867,PREL
          3 000331  0F81 0012                            B        s:5872,PREL

      639     5866    5           DO;

      640     5867    5              Y_CLTICM.T1.IFLAGS.IONAK = %G_ON#;

   5867   3 000333  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 000336  8946 0008                            LBT,'0001'X       8,B6
          3 000338       0001

      641     5868    5              CALL Y$IOER (FC);

   5868   3 000339  DBC7 0024                            LAB,B5   FC,AUTO
          3 00033B  DFC7 0034                            STB,B5   @CON+4,AUTO
          3 00033D  E3C0 0047                            LNJ,B6   s:0,PREL
          3 00033F       0001                            DC       s:5869,PREL

      642     5869    5              ALTRETURN;

   5869   3 000340  ECC7 001A                            LDB,B6   CHN_FC+4,AUTO
          3 000342  B806                                 LDR,R3   ,B6
          3 000343  C3B6                                 LNJ,B4   ,B6,R3

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:100  
      643     5870    5           END;
      644     5871
      645     5872    4      RETURN;

   5872   3 000344  ECC7 001A                            LDB,B6   CHN_FC+4,AUTO
          3 000346  C3C6 0001                            LNJ,B4   1,B6

      646     5873
      647     5874    4   END Y$IOLD;
      648     5875
      649     5876        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:101  
      650     5877        /*I*  NAME:        Y$DOIO
      651     5878              PURPOSE:     Perform IO per input parameters
      652     5879              CALL:        CALL Y$DOIO (CH, FC, CON) ALTRET;
      653     5880                           Altreturns if an I/O error occurs.
      654     5881              PARAMETERS:  CH is an INPUT parameter containing the
      655     5882                           channel address.
      656     5883                           FC is an INPUT parameter containing the
      657     5884                           function code.
      658     5885                           CON is an INPUT or OUTPUT parameter containing
      659     5886                           a control word.
      660     5887              INTERFACE:   This routine calls the following:
      661     5888                            GHH$IO_IN
      662     5889                            Y$IOER
      663     5890              DATA:        Sets up GT_IO FPT. Uses ICM buffer (pointer ICM$).
      664     5891              DESCRIPTION: Places channel address, function code, and
      665     5892                           control word into the GT_IO FPT.  Then it
      666     5893                           executes the I/O using the GHH$IO_IN
      667     5894                           routine.
      668     5895        */
      669     5896        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:102  
      670     5897    3   Y$DOIO: PROC (CH, FC, CON) ALTRET;

   5897   3 000348  EFC7 002A            Y$DOIO          STB,B6   FC+2,AUTO

      671     5898
      672     5899    4      DCL CH UBIN(10) ALIGNED;
      673     5900    4      DCL FC UBIN(6) ALIGNED;
      674     5901    4      DCL CON UBIN WORD;
      675     5902
      676     5903    4      GT_IO.CAS.FNC = FC;

   5903   3 00034A  DCC7 002E                            LDB,B5   @FC,AUTO
          3 00034C  E805                                 LDR,R6   ,B5
          3 00034D  604A                                 SOR,R6   10
          3 00034E  EA80 0000 0000  00                   SRM,R6,'003F'X    GT_IO
          3 000351       003F

      677     5904    4      GT_IO.RANGE = CON;

   5904   3 000352  CCC7 0030                            LDB,B4   @CON,AUTO
          3 000354  E804                                 LDR,R6   ,B4
          3 000355  EF00 0000 0001  00                   STR,R6   GT_IO+1

      678     5905    4      GT_IO.CAS.CHN = CH;

   5905   3 000358  BCC7 002C                            LDB,B3   @CH,AUTO
          3 00035A  D803                                 LDR,R5   ,B3
          3 00035B  DA80 0000 0000  00                   SRM,R5,'FFC0'X    GT_IO
          3 00035E       FFC0

      679     5906
      680     5907    4      CALL GHH$IO_IN (GT_IO) WHENALTRETURN

   5907   3 00035F  BB80 0000 0003  04                   LAB,B3   +3
          3 000362  CBF0 0100                            LAB,B4   256,IMO
          3 000364  E380 0000 0000  xent                 LNJ,B6   GHH$IO_IN
          3 000367       0003                            DC       s:5909,PREL
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:103  
          3 000368  0F81 0012                            B        s:5914,PREL

      681     5908    5           DO;

      682     5909    5              Y_CLTICM.T1.IFLAGS.IONAK = %G_ON#;

   5909   3 00036A  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 00036D  8946 0008                            LBT,'0001'X       8,B6
          3 00036F       0001

      683     5910    5              CALL Y$IOER (FC);

   5910   3 000370  DCC7 002E                            LDB,B5   @FC,AUTO
          3 000372  DFC7 0034                            STB,B5   @CON+4,AUTO
          3 000374  E3C0 0010                            LNJ,B6   s:0,PREL
          3 000376       0001                            DC       s:5911,PREL

      684     5911    5              ALTRETURN;

   5911   3 000377  ECC7 002A                            LDB,B6   FC+2,AUTO
          3 000379  B806                                 LDR,R3   ,B6
          3 00037A  C3B6                                 LNJ,B4   ,B6,R3

      685     5912    5           END;
      686     5913
      687     5914    4      CON = GT_IO.RANGE;

   5914   3 00037B  ECC7 0030                            LDB,B6   @CON,AUTO
          3 00037D  E800 0000 0001  00                   LDR,R6   GT_IO+1
          3 000380  EF06                                 STR,R6   ,B6

      688     5915
      689     5916    4      RETURN;

   5916   3 000381  ECC7 002A                            LDB,B6   FC+2,AUTO
          3 000383  C3C6 0001                            LNJ,B4   1,B6

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:104  
      690     5917
      691     5918    4   END Y$DOIO;
      692     5919
      693     5920        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:105  
      694     5921        /*I*  NAME:        Y$IOER
      695     5922              PURPOSE:     Process common error data on bad IO returns
      696     5923              CALL:        CALL Y$IOER (FC);
      697     5924                           Does not altreturn.
      698     5925              PARAMETERS:  FC is an input parameter containing the
      699     5926                           function code.
      700     5927              INTERFACE:   None.
      701     5928              DATA:        Uses data in ICM buffer (pointer ICM$).
      702     5929              DESCRIPTION: Places common IO error data in ICM.
      703     5930        */
      704     5931        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:106  
      705     5932    3   Y$IOER: PROC (FC);

   5932   3 000385  EFC7 0032            Y$IOER          STB,B6   @CON+2,AUTO

      706     5933
      707     5934    4      DCL FC UBIN(6) ALIGNED;
      708     5935
      709     5936    4      Y_CLTICM.T1.TSTDAT(0) = FC;

   5936   3 000387  DCC7 0034                            LDB,B5   @FC,AUTO
          3 000389  E805                                 LDR,R6   ,B5
          3 00038A  604A                                 SOR,R6   10
          3 00038B  CC80 0000 00A9  00                   LDB,B4   ICM$
          3 00038E  E7C4 000A                            STH,R6   10,B4

      710     5937    4      Y_CLTICM.T1.R1.ICMRPY = %Y#NORESP;

   5937   3 000390  6C26                                 LDV,R6   38
          3 000391  EAC4 0004                            SRM,R6,'00FF'X    4,B4
          3 000393       00FF

      711     5938
      712     5939    4      RETURN;

   5939   3 000394  ECC7 0032                            LDB,B6   @CON+2,AUTO
          3 000396  C3C6 0001                            LNJ,B4   1,B6

      713     5940
      714     5941    4   END Y$IOER;
      715     5942
      716     5943    3   END EXECUTE_TEST;
      717     5944
      718     5945        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:107  
      719     5946        /*I*  NAME:        TERMINATE_TEST
      720     5947              PURPOSE:     Terminate specified FEP COLTS test
      721     5948              CALL:        CALL TERMINATE_TEST;
      722     5949                           Does not altreturn.
      723     5950              INTERFACE:   This routine calls the following:
      724     5951                            Y$TRMTST
      725     5952              DATA:        Uses data in ICM buffer (pointer ICM$).
      726     5953              DESCRIPTION: Extracts the channel number and test
      727     5954                           number from the ICM data and then calls
      728     5955                           Y$TRMTST to terminate this test.
      729     5956                           Places proper reply code in ICM data.
      730     5957        */
      731     5958        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:108  
      732     5959    2   TERMINATE_TEST: PROC ALTRET;

   5959   3 000398  EFC7 0008            TERMINATE_TEST  STB,B6   CHAD+1,AUTO

      733     5960
      734     5961    3      DCL TNUM UBIN BYTE ALIGNED;
      735     5962    3      DCL CHAD BIT(16) ALIGNED;
      736     5963
      737     5964    3      TNUM = Y_CLTICM.T1.R1.TSTIND;

   5964   3 00039A  DC80 0000 00A9  00                   LDB,B5   ICM$
          3 00039D  E2C5 0003                            LLH,R6   3,B5
          3 00039F  E7C7 000A                            STH,R6   TNUM,AUTO

      738     5965    3      CHAD = Y_CLTICM.T1.R1.CHNLNR;

   5965   3 0003A1  E845 0005                            LDR,R6   5,B5
          3 0003A3  EF47 000B                            STR,R6   CHAD,AUTO

      739     5966
      740     5967    3      CALL Y$TRMTST (TNUM,CHAD);

   5967   3 0003A5  CBC7 000B                            LAB,B4   CHAD,AUTO
          3 0003A7  CFC7 0010                            STB,B4   DP$+1,AUTO
          3 0003A9  BBC7 000A                            LAB,B3   TNUM,AUTO
          3 0003AB  BFC7 000E                            STB,B3   NUMIO,AUTO
          3 0003AD  E3C0 0065                            LNJ,B6   s:0,PREL
          3 0003AF       0001                            DC       s:5969,PREL

      741     5968
      742     5969    3      IF Y_FLAGS.NOSUCHTST = %G_OFF#

   5969   3 0003B0  8980 0000 0097  00                   CMZ      Y_FLAGS
          3 0003B3  0801 000A                            BAL      s:5974,PREL

      743     5970    3      THEN
      744     5971    3         Y_CLTICM.T1.R1.ICMRPY = %Y#OPCOMP;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:109  

   5971   3 0003B5  6C21                                 LDV,R6   33
          3 0003B6  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0003B9  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          3 0003BB       00FF
          3 0003BC  0F81 000F                            B        s:5979,PREL

      745     5972
      746     5973    4      ELSE DO;

      747     5974    4              Y_CLTICM.T1.IFLAGS.NOTEST = %G_ON#;

   5974   3 0003BE  EC80 0000 00A9  00                   LDB,B6   ICM$
          3 0003C1  8946 0008                            LBT,'0020'X       8,B6
          3 0003C3       0020

      748     5975    4              Y_CLTICM.T1.R1.ICMRPY = %Y#INVICM;

   5975   3 0003C4  6C22                                 LDV,R6   34
          3 0003C5  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          3 0003C7       00FF

      749     5976    4              Y_FLAGS.NOSUCHTST = %G_OFF#;

   5976   3 0003C8  8800 0000 0097  00                   LBF,'8000'X       Y_FLAGS
   5976   3 0003CB       8000

      750     5977    4           END;

      751     5978
      752     5979    3      RETURN;

   5979   3 0003CC  ECC7 0008                            LDB,B6   CHAD+1,AUTO
          3 0003CE  C3C6 0001                            LNJ,B4   1,B6

      753     5980
      754     5981    3   END TERMINATE_TEST;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:110  
      755     5982
      756     5983    2   END PROCESS_ICM;
      757     5984
      758     5985        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:111  
      759     5986        /*I*  NAME:        WRAP_UP
      760     5987              PURPOSE:     Terminate all FEP COLTS tests
      761     5988              CALL:        CALL WRAP_UP;
      762     5989                           Does not altreturn.
      763     5990              INTERFACE:   This routine calls the following:
      764     5991                            Y$TRMTST
      765     5992              DATA:        Uses data in Active Test Table.
      766     5993              DESCRIPTION: This routine successively extracts channel
      767     5994                           number and test number information on each
      768     5995                           active test from the Active Test Table.
      769     5996                           It successively calls Y$TRMTST to terminate
      770     5997                           each active test.
      771     5998        */
      772     5999        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:112  
      773     6000    1   WRAP_UP: PROC ALTRET;

   6000   3 0003D0  EFC7 0004            WRAP_UP         STB,B6   +4,AUTO

      774     6001
      775     6002    2      DCL TNUM UBIN BYTE ALIGNED;
      776     6003    2      DCL CHAD BIT(16) ALIGNED;
      777     6004
      778     6005    2      IF Y_TCOUNT > 0

   6005   3 0003D2  E280 0000 0098  00                   LLH,R6   Y_TCOUNT
          3 0003D5  6901 0039                            BEZ,R6   s:6017,PREL

      779     6006    3      THEN DO TNUM = 0 TO 7;

   6006   3 0003D7  87C7 0006                            CLH      TNUM,AUTO

      780     6007
      781     6008    3              IF Y_TENTRY (TNUM)

   6008   3 0003D9  EB80 0000 0000  00                   LAB,B6   GT_IO
          3 0003DC  B2C7 0006                            LLH,R3   TNUM,AUTO
          3 0003DE  3002                                 SOL,R3   2
          3 0003DF  DB80 0000 0000  04                   LAB,B5   0
          3 0003E2  5C01                                 LDV,R5   1
          3 0003E3  0022                                 ACM      ;
          3 0003E4       4436 0099                                ALPHANUM(153,B6,R3,,4,FILL),;
          3 0003E6       4005 0000                                ALPHANUM(0,B5,,R5,FILL)
          3 0003E8  5381 001D                            CBE      s:6015,PREL

      782     6009    4              THEN DO;

      783     6010    4                      CHAD = Y_TENTRY.CHN(TNUM);

   6010   3 0003EA  A2C7 0006                            LLH,R2   TNUM,AUTO
          3 0003EC  2001                                 SOL,R2   1
          3 0003ED  E820 0000 0099  00                   LDR,R6   Y_TENTRY,R2
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:113  
          3 0003F0  EF47 0007                            STR,R6   CHAD,AUTO

      784     6011    4                      CALL Y$TRMTST (TNUM,CHAD);

   6011   3 0003F2  EBC7 0007                            LAB,B6   CHAD,AUTO
          3 0003F4  EFC7 0010                            STB,B6   DP$+1,AUTO
          3 0003F6  DBC7 0006                            LAB,B5   TNUM,AUTO
          3 0003F8  DFC7 000E                            STB,B5   NUMIO,AUTO
          3 0003FA  E3C0 0018                            LNJ,B6   s:0,PREL
          3 0003FC       0001                            DC       s:6012,PREL

      785     6012    4                      IF Y_TCOUNT = 0 THEN RETURN;

   6012   3 0003FD  E280 0000 0098  00                   LLH,R6   Y_TCOUNT
          3 000400  6981 0005                            BNEZ,R6  s:6015,PREL

   6012   3 000402  ECC7 0004                            LDB,B6   +4,AUTO
          3 000404  C3C6 0001                            LNJ,B4   1,B6

      786     6013    4                   END;
      787     6014
      788     6015    3           END;

   6015   3 000406  E2C7 0006                            LLH,R6   TNUM,AUTO
          3 000408  6E01                                 ADV,R6   1
          3 000409  E7C7 0006                            STH,R6   TNUM,AUTO
          3 00040B  E2C7 0006                            LLH,R6   TNUM,AUTO
          3 00040D  6D07                                 CMV,R6   7
          3 00040E  03CB                                 BLE      s:6008,SPREL

      789     6016
      790     6017    2      RETURN;

   6017   3 00040F  ECC7 0004                            LDB,B6   +4,AUTO
          3 000411  C3C6 0001                            LNJ,B4   1,B6

      791     6018
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:114  
      792     6019    2   END WRAP_UP;
      793     6020
      794     6021        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:115  
      795     6022        /*I*  NAME:        Y$TRMTST
      796     6023              PURPOSE:     Terminate specified FEP COLTS test
      797     6024              CALL:        CALL Y$TRMTST (TNUM, CHAD);
      798     6025                           Does not altreturn.
      799     6026              PARAMETERS:  TNUM is an INPUT parameter containing the index
      800     6027                           number to the test's entry in the Active Test
      801     6028                           Table.
      802     6029                           CHAD is an INPUT parameter containing the channel
      803     6030                           address for the test.
      804     6031              INTERFACE:   This routine calls the following:
      805     6032                            M$RCHAN
      806     6033              DATA:        Operates on Active Test Table.
      807     6034              DESCRIPTION: This routine clears the entry for the specified
      808     6035                           test in the Active Test Table, and releases
      809     6036                           the channel from COLTS control.
      810     6037                           The routine also sets a flag if there is an
      811     6038                           altreturn from M$RCHAN.
      812     6039        */
      813     6040        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:116  
      814     6041    1   Y$TRMTST: PROC (TNUM,CHAD) ALTRET;

   6041   3 000413  EFC7 000C            Y$TRMTST        STB,B6   STAT,AUTO

      815     6042
      816     6043    2      DCL TNUM UBIN BYTE ALIGNED;
      817     6044    2      DCL CHAD UBIN(16) ALIGNED;
      818     6045
      819     6046    2      Y_TENTRY(TNUM) = '0'B;

   6046   3 000415  DCC7 000E                            LDB,B5   @TNUM,AUTO
          3 000417  B285                                 LLH,R3   ,B5
          3 000418  BF47 0036                            STR,R3   @FC+2,AUTO
          3 00041A  3001                                 SOL,R3   1
          3 00041B  8730 0000 0099  00                   CL       Y_TENTRY,R3
          3 00041E  B847 0036                            LDR,R3   @FC+2,AUTO
          3 000420  3001                                 SOL,R3   1
          3 000421  8730 0000 009A  00                   CL       Y_TENTRY+1,R3

      820     6047
      821     6048    2      Y_TCOUNT = Y_TCOUNT - 1;

   6048   3 000424  E280 0000 0098  00                   LLH,R6   Y_TCOUNT
          3 000427  6EFF                                 ADV,R6   -1
          3 000428  E780 0000 0098  00                   STH,R6   Y_TCOUNT

      822     6049
      823     6050    2      Y_FLAGS.NOSUCHTST = %G_OFF#;

   6050   3 00042B  8800 0000 0097  00                   LBF,'8000'X       Y_FLAGS
   6050   3 00042E       8000

      824     6051
      825     6052    2      RELEASE_CHAN.V.CHANNEL = CHAD;

   6052   3 00042F  CCC7 0010                            LDB,B4   @CHAD,AUTO
          3 000431  E804                                 LDR,R6   ,B4
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:117  
          3 000432  EF00 0000 008A  00                   STR,R6   RELEASE_CHAN+3

      826     6053
      827     6054    2      CALL M$RCHAN (RELEASE_CHAN)

   6054   3 000435  BB80 0000 0087  00                   LAB,B3   RELEASE_CHAN
          3 000438  B870 0594                            LDR,R3   1428,IMO
          3 00043A  0001                                 MCL
          3 00043B       0003                            DC       s:6056,PREL
          3 00043C  0F81 0005                            B        s:6059,PREL

      828     6055    3      WHENALTRETURN DO;

      829     6056    3              Y_FLAGS.NOSUCHTST = %G_ON#;

   6056   3 00043E  8900 0000 0097  00                   LBT,'8000'X       Y_FLAGS
   6056   3 000441       8000

      830     6057    3           END;

      831     6058
      832     6059    2      RETURN;

   6059   3 000442  ECC7 000C                            LDB,B6   STAT,AUTO
          3 000444  C3C6 0001                            LNJ,B4   1,B6

      833     6060
      834     6061    2   END Y$TRMTST;
      835     6062
      836     6063    1   END GTD$MDC_HNDLR;

   6063   3 000446  C380 0000 0000  xent                 LNJ,B4   X6A_MARET
      837     6064
      838     6065        %EJECT;
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:118  

PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:119  
--  Include file information  --

   G_JIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   GH_IOFNC_E.:E05TOU  is referenced.
   GT_CMN_E.:E05TOU  is referenced.
   GT_MACROS_M.:E05TOU  is referenced.
      No diagnostics issued in procedure GTD$MDC_HNDLR.
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:120  

 **** Variables and constants ****

  ****  Section 000  Data  GTD$MDC_HNDLR

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    8D-0-0/w STRC(160)   r     1 ACTIVATE_PRIV              7-0-0/w STRC(128)   r     1 CHAN_DATA
    6C-0-0/w STRC(256)   r     1 END_COLTS                 7C-0-0/w STRC(176)   r     1 GET_CHAN
    3E-0-0/w STRC(288)   r     1 GET_ICM                    0-0-0/w STRC(32)    r     1 GT_IO
     2-0-0/w STRC(80)    r     1 GT_IOLD                   A9-0-0/w PTR         r     1 ICM$
    AC-0-0/w CHAR(512)   r     1 ICMDATA                  1AC-0-0/w BIT (32)    r     1 MSYS_PRIV
     F-0-0/w STRC(752)   r     1 OPEN_COLTS                87-0-0/w STRC(96)    r     1 RELEASE_CHAN
    AB-0-0/w UBIN(16)    r     1 SECS_DELAY                50-0-0/w STRC(288)   r     1 SEND_ICM
    62-0-0/w STRC(160)   r     1 WAIT_IO                   97-0-0/w STRC(8)     r     1 Y_FLAGS
    98-0-0/b UBIN(8)     r     1 Y_TCOUNT
    99-0-0/w STRC(32)    r     1 Y_TENTRY(0:7)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    20-0-0/w PTR         r     1 @BOFS                     22-0-0/w PTR         r     1 @BSIZ
    24-0-0/w PTR         r     1 @CH                       1C-0-0/w PTR         r     1 @CH
    1C-0-0/w PTR         r     1 @CH                       2C-0-0/w PTR         r     1 @CH
    10-0-0/w PTR         r     1 @CHAD                     30-0-0/w PTR         r     1 @CON
     A-0-0/w PTR         r     1 @CS                       1E-0-0/w PTR         r     1 @DP$
    2E-0-0/w PTR         r     1 @FC                       34-0-0/w PTR         r     1 @FC
    26-0-0/w PTR         r     1 @STAT                     1E-0-0/w PTR         r     1 @STAT
     E-0-0/w PTR         r     1 @TNUM                     11-0-0/w UBIN(16)    r     1 BO
    *0-0-0/w UBIN(16)    r     1 BOFS                      *0-0-0/w UBIN(16)    r     1 BSIZ
    *0-0-0/w STRC(10)    r     1 CH                        *0-0-0/w UBIN(10)    r     1 CH
    *0-0-0/w UBIN(10)    r     1 CH                        *0-0-0/w UBIN(10)    r     1 CH
     A-0-0/w BIT (16)    r     1 CHAD                       B-0-0/w BIT (16)    r     1 CHAD
     7-0-0/w BIT (16)    r     1 CHAD                      *0-0-0/w UBIN(16)    r     1 CHAD
    14-0-0/w STRC(16)    r     1 CHN                       15-0-0/w UBIN(10)    r     1 CHN_CH
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:121  
    16-0-0/w UBIN(6)     r     1 CHN_FC                     6-0-0/w BIT (16)    r     1 CKS
    13-0-0/w UBIN(16)    r     1 CON                       *0-0-0/w UBIN(16)    r     1 CON
    *0-0-0/w BIT (16)    r     1 CS                         F-0-0/w PTR         r     1 DP$
    *0-0-0/w PTR         r     1 DP$                       28-0-0/w UBIN(6)     r     1 FC
    24-0-0/w UBIN(6)     r     1 FC                        *0-0-0/w UBIN(6)     r     1 FC
    *0-0-0/w UBIN(6)     r     1 FC                         D-0-0/w UBIN(16)    r     1 INX
     C-0-0/w UBIN(8)     r     1 ITEM                       E-0-0/w UBIN(8)     r     1 ITEM
    12-0-0/w UBIN(16)    r     1 ITEM                      20-0-0/w UBIN(16)    r     1 ITEM
     E-0-0/w UBIN(16)    r     1 NUMIO                      C-0-0/w BIT (16)    r     1 STAT
    *0-0-0/w BIT (16)    r     1 STAT                      *0-0-0/w BIT (16)    r     1 STAT
     A-0-0/w UBIN(8)     r     1 TNUM                       6-0-0/w UBIN(8)     r     1 TNUM
    *0-0-0/w UBIN(8)     r     1 TNUM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$COLTD                    0-0-0/w STRC(4096)  r     1 Y_CLTICM


   Procedure GTD$MDC_HNDLR requires 1097 words for executable code.
   Procedure GTD$MDC_HNDLR requires 55 words of local(AUTO) storage.

    No errors detected in file GTD$MDC_HNDLR.:E05TSI    .
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:122  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:123  
          MINI XREF LISTING

ACTIVATE_PRIV
      5314**DCL      5362<>CALL
ACTIVATE_PRIV.V
      5316**DCL      5316--DCLINIT
BEGONE
      5378**LABEL    5371--CALLALT  5374--CALLALT
BO IN PROCEDURE Y$IOSXD
      5622**DCL      5671<<ASSIGN   5672<>CALL
BOFS IN PROCEDURE Y$IOLD
      5855**DCL      5850--PROC     5861>>ASSIGN
BOP IN PROCEDURE Y$CKSTAT
      5822**LABEL    5815--CALLALT
BSIZ IN PROCEDURE Y$IOLD
      5856**DCL      5850--PROC     5862>>ASSIGN
CH IN PROCEDURE Y$CKSTAT
      5804**DCL      5800--PROC     5815<>CALL
CH IN PROCEDURE Y$DOIO
      5899**DCL      5897--PROC     5905>>ASSIGN
CH IN PROCEDURE Y$IOLD
      5852**DCL      5850--PROC     5860>>ASSIGN
CH IN PROCEDURE Y$STATUS
      5729**DCL      5726--PROC     5737<>CALL
CH.X IN PROCEDURE Y$STATUS
      5731**DCL      5763>>IF
CHAD IN PROCEDURE START_TEST
      5484**DCL      5486<<ASSIGN   5534>>ASSIGN
CHAD IN PROCEDURE TERMINATE_TEST
      5962**DCL      5965<<ASSIGN   5967<>CALL
CHAD IN PROCEDURE WRAP_UP
      6003**DCL      6010<<ASSIGN   6011<>CALL
CHAD IN PROCEDURE Y$TRMTST
      6044**DCL      6041--PROC     6052>>ASSIGN
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:124  
CHAN_DATA
      5103**DCL      5268--DCLINIT
CHN IN PROCEDURE Y$IOSXD
      5625**DCL      5663<<ASSIGN
CHN.CH IN PROCEDURE Y$IOSXD
      5626**DCL      5664>>ASSIGN
CHN.FC IN PROCEDURE Y$IOSXD
      5627**DCL      5665>>ASSIGN   5667>>IF       5676>>IF       5686>>IF       5686>>IF
CHN_CH IN PROCEDURE Y$IOSXD
      5628**DCL      5664<<ASSIGN   5672<>CALL     5680<>CALL     5684<>CALL     5696<>CALL
CHN_FC IN PROCEDURE Y$IOSXD
      5629**DCL      5665<<ASSIGN   5684<>CALL
CKS IN PROCEDURE PROCESS_ICM
      5404**DCL      5406<>CALL     5408>>IF       5431<>CALL     5433>>ASSIGN
CON IN PROCEDURE Y$DOIO
      5901**DCL      5897--PROC     5904>>ASSIGN   5914<<ASSIGN
CON IN PROCEDURE Y$IOSXD
      5624**DCL      5662<<ASSIGN   5672<>CALL     5684<>CALL     5688>>ASSIGN
CS IN PROCEDURE Y$CKSUM
      5454**DCL      5451--PROC     5456<<ASSIGN   5462<<ASSIGN   5462>>ASSIGN
DP$ IN PROCEDURE Y$IOLD
      5854**DCL      5850--PROC     5863>>ASSIGN
DP$ IN PROCEDURE Y$IOSXD
      5621**DCL      5670<<ASSIGN   5672<>CALL
END_COLTS
      5241**DCL      5379<>CALL
END_COLTS.V
      5246**DCL      5243--DCLINIT
EXECUTE_TEST IN PROCEDURE PROCESS_ICM
      5588**PROC     5420--CALL
FC IN PROCEDURE Y$DOIO
      5900**DCL      5897--PROC     5903>>ASSIGN   5910<>CALL
FC IN PROCEDURE Y$IOER
      5934**DCL      5932--PROC     5936>>ASSIGN
FC IN PROCEDURE Y$IOLD
      5853**DCL      5858<<ASSIGN   5868<>CALL
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:125  
FC IN PROCEDURE Y$STATUS
      5732**DCL      5735<<ASSIGN   5737<>CALL
GET_CHAN
      5266**DCL      5564<>CALL
GET_CHAN.V
      5270**DCL      5268--DCLINIT
GET_CHAN.V.CHANNEL
      5270**DCL      5562<<ASSIGN
GET_ICM
      5159**DCL      5371<>CALL
GET_ICM.BUF_
      5161**DCL      5370<<ASSIGN
GET_ICM.V
      5164**DCL      5161--DCLINIT
GHH$IOLD
      5348**DCL-ENT  5865--CALL
GHH$IO_IN
      5349**DCL-ENT  5907--CALL
GOOP IN PROCEDURE Y$XIODAT
      5702**LABEL    5672--CALLALT  5680--CALLALT  5684--CALLALT  5696--CALLALT
GT_IO
      5069**DCL      5907<>CALL
GT_IO.CAS.CHN
      5069**DCL      5069--REDEF    5905<<ASSIGN
GT_IO.CAS.FNC
      5070**DCL      5903<<ASSIGN
GT_IO.DAS
      5070**DCL      5071--REDEF    5072--REDEF
GT_IO.RANGE
      5071**DCL      5904<<ASSIGN   5914>>ASSIGN
GT_IOLD
      5085**DCL      5865<>CALL
GT_IOLD.BUF$
      5086**DCL      5863<<ASSIGN
GT_IOLD.BUFSIZE
      5087**DCL      5862<<ASSIGN
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:126  
GT_IOLD.BYTX
      5086**DCL      5861<<ASSIGN
GT_IOLD.CHN
      5085**DCL      5085--REDEF    5860<<ASSIGN
GT_IOLD.FNC
      5086**DCL      5858>>ASSIGN
ICM$
      5342**DCL      5022--IMP-PTR  5367<<ASSIGN   5373>>ASSIGN   5408>>IF       5410>>ASSIGN   5411>>ASSIGN
      5414>>DOCASE   5426>>ASSIGN   5427>>ASSIGN   5433>>ASSIGN   5458>>IF       5461>>DOINDEX  5462>>ASSIGN
      5486>>ASSIGN   5493>>IF       5495>>ASSIGN   5498>>ASSIGN   5504>>ASSIGN   5533>>ASSIGN   5535>>ASSIGN
      5543>>ASSIGN   5562>>ASSIGN   5566>>ASSIGN   5590>>DOCASE   5596>>ASSIGN   5597>>ASSIGN   5633>>ASSIGN
      5637>>ASSIGN   5662>>ASSIGN   5663>>ASSIGN   5670>>ASSIGN   5688>>ASSIGN   5765>>ASSIGN   5767>>ASSIGN
      5867>>ASSIGN   5909>>ASSIGN   5936>>ASSIGN   5937>>ASSIGN   5964>>ASSIGN   5965>>ASSIGN   5971>>ASSIGN
      5974>>ASSIGN   5975>>ASSIGN
ICMDATA
      5351**DCL      5161--DCLINIT  5191--DCLINIT  5367--ASSIGN
INX IN PROCEDURE Y$IOSXD
      5619**DCL      5631<<ASSIGN   5662>>ASSIGN   5663>>ASSIGN
ITEM IN PROCEDURE Y$CKSTAT
      5802**DCL      5807<<DOINDEX
ITEM IN PROCEDURE Y$CKSUM
      5453**DCL      5461<<DOINDEX  5462>>ASSIGN
ITEM IN PROCEDURE Y$GETLIN
      5526**DCL      5529<<DOINDEX  5531>>IF       5533>>ASSIGN   5534>>ASSIGN   5535>>ASSIGN
ITEM IN PROCEDURE Y$IOSXD
      5623**DCL      5661<<DOINDEX  5662>>ASSIGN   5663>>ASSIGN
M$CLOSE
      4665**DCL-ENT  5379--CALL
M$EXIT
      4643**DCL-ENT  5382--CALL
M$GCHAN
      4677**DCL-ENT  5564--CALL
M$OPEN
      4665**DCL-ENT  5365--CALL
M$RCHAN
      4678**DCL-ENT  6054--CALL
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:127  
M$READ
      4665**DCL-ENT  5371--CALL
M$SPRIV
      4654**DCL-ENT  5362--CALL
M$SYS
      4640**DCL-ENT  5363--CALL
M$WAIT
      4649**DCL-ENT  5673--CALL     5679--CALL     5685--CALL     5814--CALL
M$WRITE
      4666**DCL-ENT  5374--CALL
MSYS_PRIV
      5353**DCL      5316--DCLINIT  5361<<ASSIGN
NUMIO IN PROCEDURE Y$IOSXD
      5620**DCL      5633<<ASSIGN   5661>>DOINDEX  5670>>ASSIGN
OPEN_COLTS
      5127**DCL      5365<>CALL
OPEN_COLTS.V
      5135**DCL      5129--DCLINIT
PLOP IN PROCEDURE Y$IOSXD
      5640**LABEL    5635--CALLALT
PROCESS_ICM
      5402**PROC     5372--CALL
RELEASE_CHAN
      5291**DCL      6054<>CALL
RELEASE_CHAN.V
      5295**DCL      5293--DCLINIT
RELEASE_CHAN.V.CHANNEL
      5295**DCL      6052<<ASSIGN
SECS_DELAY
      5344**DCL      5218--DCLINIT
SEND_ICM
      5189**DCL      5374<>CALL
SEND_ICM.BUF_
      5191**DCL      5373<<ASSIGN
SEND_ICM.V
      5194**DCL      5191--DCLINIT
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:128  
SOLONG
      5382**LABEL    5362--CALLALT  5363--CALLALT  5365--CALLALT
START_TEST IN PROCEDURE PROCESS_ICM
      5482**PROC     5417--CALL
STAT IN PROCEDURE Y$CKSTAT
      5803**DCL      5800--PROC     5809>>IF       5815<>CALL
STAT IN PROCEDURE Y$IOSXD
      5618**DCL      5632<<ASSIGN   5680<>CALL     5696<>CALL
STAT IN PROCEDURE Y$STATUS
      5728**DCL      5726--PROC     5734<<ASSIGN   5737<>CALL     5765>>ASSIGN   5767>>ASSIGN
TERMINATE_TEST IN PROCEDURE PROCESS_ICM
      5959**PROC     5423--CALL
TNUM IN PROCEDURE TERMINATE_TEST
      5961**DCL      5964<<ASSIGN   5967<>CALL
TNUM IN PROCEDURE WRAP_UP
      6002**DCL      6006<<DOINDEX  6008>>IF       6010>>ASSIGN   6011<>CALL
TNUM IN PROCEDURE Y$TRMTST
      6043**DCL      6041--PROC     6046>>ASSIGN
WAIT_IO
      5215**DCL      5673<>CALL     5679<>CALL     5685<>CALL     5814<>CALL
WAIT_IO.V
      5219**DCL      5218--DCLINIT
WRAP_UP
      6000**PROC     5378--CALL
Y$ALLOC IN PROCEDURE START_TEST
      5560**PROC     5490--CALL
Y$CKSTAT IN PROCEDURE EXECUTE_TEST
      5800**PROC     5696--CALL
Y$CKSUM IN PROCEDURE PROCESS_ICM
      5451**PROC     5406--CALL     5431--CALL
Y$DOIO IN PROCEDURE EXECUTE_TEST
      5897**PROC     5684--CALL     5737--CALL
Y$GETLIN IN PROCEDURE START_TEST
      5524**PROC     5488--CALL
Y$IOER IN PROCEDURE EXECUTE_TEST
      5932**PROC     5868--CALL     5910--CALL
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:129  
Y$IOLD IN PROCEDURE EXECUTE_TEST
      5850**PROC     5672--CALL
Y$IOSXD IN PROCEDURE EXECUTE_TEST
      5616**PROC     5593--CALL
Y$SAVSTT IN PROCEDURE Y$STATUS
      5761**PROC     5739--CALL     5743--CALL
Y$STATUS IN PROCEDURE EXECUTE_TEST
      5726**PROC     5680--CALL     5815--CALL
Y$TRMTST
      6041**PROC     5967--CALL     6011--CALL
Y$XIODAT IN PROCEDURE Y$IOSXD
      5659**PROC     5635--CALL
Y_CLTICM.T1
      5026**DCL      5053--REDEF
Y_CLTICM.T1.DISCID
      5027**DCL      5029--REDEF
Y_CLTICM.T1.EXTCFG
      5040**DCL      5590>>DOCASE
Y_CLTICM.T1.IFLAGS.BADCKS
      5043**DCL      5410<<ASSIGN
Y_CLTICM.T1.IFLAGS.BADCOM
      5044**DCL      5426<<ASSIGN   5596<<ASSIGN
Y_CLTICM.T1.IFLAGS.DVBUSY
      5046**DCL      5493>>IF       5543<<ASSIGN   5566<<ASSIGN
Y_CLTICM.T1.IFLAGS.IONAK
      5050**DCL      5867<<ASSIGN   5909<<ASSIGN
Y_CLTICM.T1.IFLAGS.NOTEST
      5045**DCL      5974<<ASSIGN
Y_CLTICM.T1.R1.CHAN
      5038**DCL      5562>>ASSIGN
Y_CLTICM.T1.R1.CHNLNR
      5035**DCL      5038--REDEF    5486>>ASSIGN   5965>>ASSIGN
Y_CLTICM.T1.R1.ICMCKS
      5030**DCL      5408>>IF       5433<<ASSIGN
Y_CLTICM.T1.R1.ICMCOM
      5033**DCL      5414>>DOCASE
PL6.E3A0      #001=GTD$MDC_HNDLR File=GTD$MDC_HNDLR.:E05TSI                      TUE 07/29/97 22:12 Page:130  
Y_CLTICM.T1.R1.ICMRPY
      5034**DCL      5411<<ASSIGN   5427<<ASSIGN   5495<<ASSIGN   5498<<ASSIGN   5597<<ASSIGN   5637<<ASSIGN
      5937<<ASSIGN   5971<<ASSIGN   5975<<ASSIGN
Y_CLTICM.T1.R1.ICMWDS
      5032**DCL      5373>>ASSIGN   5458>>IF       5461>>DOINDEX
Y_CLTICM.T1.R1.TSTIND
      5031**DCL      5504>>ASSIGN   5533<<ASSIGN   5964>>ASSIGN
Y_CLTICM.T1.TSTDAT
      5052**DCL      5633>>ASSIGN   5936<<ASSIGN
Y_CLTICM.T1.TSTYPE
      5041**DCL      5535>>ASSIGN
Y_CLTICM.T2.ICMTXT
      5055**DCL      5056--REDEF    5462>>ASSIGN   5663>>ASSIGN   5765<<ASSIGN   5767<<ASSIGN
Y_CLTICM.T2.TEXT
      5056**DCL      5662>>ASSIGN   5688<<ASSIGN
Y_FLAGS.CKRDY
      5329**DCL      5692>>IF       5695<<ASSIGN
Y_FLAGS.NOATE
      5330**DCL      5499>>IF       5501<<ASSIGN   5542<<ASSIGN
Y_FLAGS.NOSUCHTST
      5328**DCL      5969>>IF       5976<<ASSIGN   6050<<ASSIGN   6056<<ASSIGN
Y_TCOUNT
      5333**DCL      5505<<ASSIGN   5505>>ASSIGN   5528>>IF       5536<<ASSIGN   5536>>ASSIGN   6005>>IF
      6012>>IF       6048<<ASSIGN   6048>>ASSIGN
Y_TENTRY
      5335**DCL      5504<<ASSIGN   5531>>IF       6008>>IF       6046<<ASSIGN
Y_TENTRY.CHN
      5336**DCL      5534<<ASSIGN   6010>>ASSIGN
Y_TENTRY.TYP
      5340**DCL      5535<<ASSIGN
