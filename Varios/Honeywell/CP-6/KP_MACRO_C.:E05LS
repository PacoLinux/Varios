

14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         1    
    1      /*M* KP_MACRO_C Most of the MACROs for PIGETTE.                               */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /**/
    8      /*  KP_ENTRIES  is used to generate ENTRY DCLS for various routines           */
    9      /*  called throughout PIGETTE.                                                */
   10      /**/
   11      %MACRO KP_ENTRIES (OMIT=NIL);
   12      %IF TEXTCHAR(OMIT)~='KPB$BREAK';
   13          DCL KPB$BREAK ENTRY ASYNC;
   14          %ENDIF;
   15      %IF TEXTCHAR(OMIT)~='KPB$BUILD';
   16          DCL KPB$BUILD ENTRY(1);
   17          %ENDIF;
   18      %IF TEXTCHAR(OMIT)~='KPC$COPY';
   19          DCL KPC$COPY ENTRY(1);
   20          %ENDIF;
   21      %IF TEXTCHAR(OMIT)~='KPC$CHECK';
   22          DCL KPC$CHECK ENTRY(1);
   23          %ENDIF;
   24      %IF TEXTCHAR(OMIT)~='KPD$UNDUMP';
   25          DCL KPD$UNDUMP ENTRY(1);
   26          %ENDIF;
   27      %IF TEXTCHAR(OMIT)~='KPD$DISK_TYPE';
   28          DCL KPD$DISK_TYPE ENTRY(2);
   29          %ENDIF;
   30      %IF TEXTCHAR(OMIT)~='KPE$CHECK_ERR';
   31          DCL KPE$CHECK_ERR ENTRY(1) ALTRET;
   32          %ENDIF;
   33      %IF TEXTCHAR(OMIT)~='KPE$ERROR';
   34          DCL KPE$ERROR ENTRY(1) ALTRET;
   35          %ENDIF;
   36      %IF TEXTCHAR(OMIT)~='KPE$ERR_SPLIT';
   37          DCL KPE$ERR_SPLIT ENTRY(1);
14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         2    
   38          %ENDIF;
   39      %IF TEXTCHAR(OMIT)~='KPE$ERR_TEXT';
   40          DCL KPE$ERR_TEXT ENTRY ALTRET;
   41          %ENDIF;
   42      %IF TEXTCHAR(OMIT)~='KPF$FORMAT';
   43          DCL KPF$FORMAT ENTRY(3);
   44          %ENDIF;
   45      %IF TEXTCHAR(OMIT)~='KPI$IO_SVC';
   46          DCL KPI$IO_SVC ENTRY(1) ALTRET;
   47          %ENDIF;
   48      %IF TEXTCHAR(OMIT)~='KPL$LIST';
   49          DCL KPL$LIST ENTRY(1);
   50          %ENDIF;
   51      %IF TEXTCHAR(OMIT)~='KPP$PARSE';
   52          DCL KPP$PARSE ENTRY;
   53          %ENDIF;
   54      %IF TEXTCHAR(OMIT)~='KPS$SLURP';
   55          DCL KPS$SLURP ENTRY(1) ALTRET;
   56          %ENDIF;
   57      %IF TEXTCHAR(OMIT)~='KPT$TERM_MSG';
   58          DCL KPT$TERM_MSG ENTRY(1);
   59          %ENDIF;
   60      %IF TEXTCHAR(OMIT)~='KPU$CLONE';
   61          DCL KPU$CLONE ENTRY(1);
   62          %ENDIF;
   63      %IF TEXTCHAR(OMIT)~='KPU$FEP_AND_DRIVE';
   64          DCL KPU$FEP_AND_DRIVE ENTRY(3) ALTRET;
   65          %ENDIF;
   66      %IF TEXTCHAR(OMIT)~='KPU$GETVSEC';
   67          DCL KPU$GETVSEC ENTRY(5) ALTRET;
   68          DCL KPU$PUTVSEC ENTRY(5) ALTRET;
   69          %ENDIF;
   70      %IF TEXTCHAR(OMIT)~='KPU$OPTIONS';
   71          DCL KPU$OPTIONS ENTRY(2) ALTRET;
   72          %ENDIF;
   73      %IF TEXTCHAR(OMIT)~='KPU$RANGE';
   74          DCL KPU$RANGE ENTRY(3) ALTRET;
14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         3    
   75          %ENDIF;
   76      %IF TEXTCHAR(OMIT)~='KPV$VINIT';
   77          DCL KPV$VINIT ENTRY(1);
   78          %ENDIF;
   79      %IF TEXTCHAR(OMIT)~='KPX$CLOSE';
   80          DCL KPX$CLOSE ENTRY(2) ALTRET;
   81          %ENDIF;
   82      %IF TEXTCHAR(OMIT)~='KPX$GETSEC';
   83          DCL KPX$GETSEC ENTRY(7) ALTRET;
   84          %ENDIF;
   85      %IF TEXTCHAR(OMIT)~='KPX$OPEN';
   86          DCL KPX$OPEN ENTRY(2) ALTRET;
   87          %ENDIF;
   88      %IF TEXTCHAR(OMIT)~='KPX$PACK';
   89          DCL KPX$PACK ENTRY(3);
   90          DCL KPX$UNPACK ENTRY(3);
   91          %ENDIF;
   92      %IF TEXTCHAR(OMIT)~='KPX$PUTSEC';
   93          DCL KPX$PUTSEC ENTRY(7) ALTRET;
   94          %ENDIF;
   95      %IF TEXTCHAR(OMIT)~='KPE$ERRMSG';
   96          DCL KPE$ERRMSG ENTRY(1) ALTRET;
   97          %ENDIF;
   98      %IF TEXTCHAR(OMIT)~='KPU$READ_BLOCK';
   99          DCL KPU$READ_BLOCK ENTRY(5) ALTRET;
  100          DCL KPU$WRITE_BLOCK ENTRY(5) ALTRET;
  101          %ENDIF;
  102      %IF TEXTCHAR(OMIT)~='KPU$DISK2VSEC';
  103          DCL KPU$DISK2VSEC ENTRY(5);
  104          DCL KPU$VSEC2DISK ENTRY(5);
  105          %ENDIF;
  106      %IF TEXTCHAR(OMIT)~='KPU$USE';
  107          DCL KPU$USE ENTRY(1) ALTRET;
  108          %ENDIF;
  109      %IF TEXTCHAR(OMIT)~='KPC$CERTIFY';
  110          DCL KPC$CERTIFY ENTRY(1);
  111          DCL KPC$CERTDRV ENTRY(1);
14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         4    
  112          %ENDIF;
  113      %IF TEXTCHAR(OMIT)~='KPU$SECURITY';
  114          DCL KPU$SECURITY ENTRY(1) ALTRET;
  115          %ENDIF;
  116      %MEND;
  117      /**/
  118      /*  KP_OPTIONS builds a structure that contains all the options you           */
  119      /*  can specify to PIGETTE.                                                   */
  120      /**/
  121      %MACRO KP_OPTIONS(FPTN = KP_OPTIONS,
  122                        TRACK_LO=0,
  123                        TRACK_HI=0,
  124                        SECTOR_LO=0,
  125                        SECTOR_HI=0,
  126                        SIDE_LO=0,
  127                        SIDE_HI=0,
  128                        ANNOUNCE_LIMIT=0,
  129                        WARN_CODE=0,
  130                        USER_WAIT=0,
  131                        SECTOR_SIZE=0,
  132                        IOTYPE=0,
  133                        STCLASS = CONSTANT);
  134      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  135      %IF (STR='STA') OR (STR='CON');
  136        %LSET INIT=CHARTEXT('INIT');
  137        %LSET EINIT=CHARTEXT('');
  138      %ELSE;
  139        %LSET INIT=CHARTEXT('/*');
  140        %LSET EINIT=CHARTEXT('*/');
  141        %ENDIF;
  142      %IF SECTOR_SIZE=128;
  143        %LSET SSIZE_CODE=0;
  144      %ELSE;
  145        %LSET SSIZE_CODE=1;
  146        %ENDIF;
  147          DCL 1 FPTN STCLASS,
  148                2 %CHARTEXT('TRACK_LO') SBIN WORD %INIT(TRACK_LO)%EINIT,
14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         5    
  149                2 %CHARTEXT('TRACK_HI') SBIN WORD %INIT(TRACK_HI)%EINIT,
  150                2 %CHARTEXT('SECTOR_LO') SBIN WORD %INIT(SECTOR_LO)%EINIT,
  151                2 %CHARTEXT('SECTOR_HI') SBIN WORD %INIT(SECTOR_HI)%EINIT,
  152                2 %CHARTEXT('SIDE_LO') SBIN WORD %INIT(SIDE_LO)%EINIT,
  153                2 %CHARTEXT('SIDE_HI') SBIN WORD %INIT(SIDE_HI)%EINIT,
  154                2 %CHARTEXT('ANNOUNCE_LIMIT') SBIN WORD %INIT(ANNOUNCE_LIMIT)%EINIT,
  155                2 %CHARTEXT('USER_WAIT') SBIN WORD %INIT(USER_WAIT)%EINIT,
  156                2 %CHARTEXT('SECTOR_SIZE') SBIN WORD %INIT(SECTOR_SIZE)%EINIT,
  157                2 %CHARTEXT('SSIZE_CODE') SBIN WORD %INIT(%SSIZE_CODE)%EINIT,
  158                2 %CHARTEXT('WARN_CODE') SBIN WORD %INIT(%WARN_CODE)%EINIT,
  159                                              /* 0=ALL=DEFAULT                      */
  160                                              /* 1=DISK ONLY                        */
  161                                              /* 2=VIRTUAL ONLY                     */
  162                                              /* 3=NONE                             */
  163                2 %CHARTEXT('IOTYPE') SBIN WORD %INIT(%IOTYPE)%EINIT,
  164                2 * SBIN WORD %INIT(0)%EINIT;
  165      %MEND;
  166      /**/
  167      /*  KP_DISKID builds a structure that contains identifying information        */
  168      /*  to go on boot diskettes.                                                  */
  169      /*                                                                            */
  170      /*  NOTE:  This structure must be essentially byte-oriented since it will     */
  171      /*  be stored on a diskette with 8-bit bytes.                                 */
  172      /*                                                                            */
  173      /*  This structure must be EXACTLY 256 bytes long!                            */
  174      /**/
  175      %EQU KP_REVISION_LEVEL# = 2;            /* BOOT DISKETTE REVISION LEVEL       */
  176      %MACRO KP_DISKID(FPTN = KP_DISKID,
  177                       STCLASS = AUTO);
  178          DCL 1 FPTN STCLASS,
  179                2 VERITY CHAR(10) CALIGNED,
  180                2 BUILD_TIME CHAR(11) CALIGNED,
  181                2 BUILD_DATE CHAR(8) CALIGNED,
  182                2 BUILD_DAY CHAR(3) CALIGNED,
  183                2 DESTINATION_NODE CHAR(8) CALIGNED,
  184                2 REVISION_LEVEL UBIN(9) CALIGNED,
  185                2 PATCH_WEEK CHAR(4) CALIGNED,
14:51 JUL 28 '97 KP_MACRO_C.:E05SI                                         6    
  186                2 SYS_VERSION CHAR(6) CALIGNED,
  187                2 SITE_ID CHAR(197) CALIGNED;
  188      %MEND;
  189      /**/
  190      /*  KP_DISKDIR builds a structure that contains the disk directory             */
  191      /*  to go on boot diskettes.                                                  */
  192      /*                                                                            */
  193      /*  NOTE:  This structure must be essentially byte-oriented since it will     */
  194      /*  be stored on a diskette with 8-bit bytes.                                 */
  195      /*                                                                            */
  196      /*  This structure must be EXACTLY 256 bytes long!                            */
  197      /**/
  198      %MACRO KP_DISKDIR(FPTN = KP_DISKDIR,
  199                        STCLASS = AUTO);
  200          DCL 1 FPTN STCLASS,
  201                2 DUMP_VSEC  CALIGNED,        /* Dump location IF THERE IS ONE      */
  202                  3 HOB UBIN BYTE CALIGNED,
  203                  3 LOB UBIN BYTE CALIGNED,
  204                2 FREE_VSEC  CALIGNED,        /* First place a dump cound go        */
  205                  3 HOB UBIN BYTE CALIGNED,
  206                  3 LOB UBIN BYTE CALIGNED,
  207                2 * CHAR(252) CALIGNED;
  208      %MEND;

