

14:55 JUL 28 '97 KV$VDP.:E05SI                                             1    
    1      /*M* KV$VDP Virtual device protocol/CP-6 presentation protocol */
    2      /*T***********************************************************/

14:55 JUL 28 '97 KV$VDP.:E05SI                                             2    
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %EJECT;
    8      %MACRO KV_VDP_INT;
    9      %LSET LISTDIR = '0'B;
   10      %LSET LISTCOM = '0'B;
   11      %SET Y#VDP_VDO_FNC = 0;
   12      %SET Y#1 = CONCAT('FFFFFFFF'X,'FFFFFFFF'X);
   13      %SET Y#0 = CONCAT('00000000'X,'00000000'X);
   14      %SET Y#MSK_VD_ORG_ALL = SUBBIT(Y#1,0,KV#VD_ORG_HI);
   15      %SET Y#MSK_VD_ORG_FORM = CONCAT(SUBBIT(Y#0,0,KV#VD_ORG_FORM-1),'1'B);
   16      %SET Y#MSK_VD_ORG_TERMINAL = CONCAT(SUBBIT(Y#0,0,KV#VD_ORG_TERMINAL-1),'1'B);
   17      %SET Y#MSK_VD_ORG_UR = CONCAT(SUBBIT(Y#0,0,KV#VD_ORG_UR-1),'1'B);
   18      %SET Y#MSK_VD_ORG_SE = CONCAT(SUBBIT(Y#0,0,KV#VD_ORG_SE-1),'1'B);
   19      %SET Y#MSK_VD_ORG_X364 = CONCAT(SUBBIT(Y#0,0,KV#VD_ORG_X364-1),'1'B);
   20      %MEND;
   21      %EJECT;

14:55 JUL 28 '97 KV$VDP.:E05SI                                             3    
   22      %MACRO KV$VDP_VDO (NAME = KV$VDP_VDO,
   23      LVL = 1,
   24      LAST = ";",
   25      STCLASS = BASED,
   26      DCLARY (YES = '1'B, NO = '0'B) = '1'B,
   27      FLWCTR (YES = '1'B, NO = '0'B) = '0'B,
   28      LGLRED (YES = '1'B, NO = '0'B) = '0'B,
   29      LGLDSC (YES = '1'B, NO = '0'B) = '0'B,
   30      SETSTR (YES = '1'B, NO = '0'B) = '0'B,
   31      RSTSTR (YES = '1'B, NO = '0'B) = '0'B,
   32      PSTSTR (YES = '1'B, NO = '0'B) = '0'B,
   33      NXT__1 (YES = '1'B, NO = '0'B) = '0'B,
   34      NXT__2 (YES = '1'B, NO = '0'B) = '0'B,
   35      NXT__3 (YES = '1'B, NO = '0'B) = '0'B,
   36      RUTACK (YES = '1'B, NO = '0'B) = '0'B,
   37      FNC = ,
   38      LGLVD_ORG (ALL = Y#MSK_VD_ORG_ALL,
   39                 FORM = Y#MSK_VD_ORG_FORM,
   40                 TERMINAL = Y#MSK_VD_ORG_TERMINAL,
   41                 SE = "%(Y#MSK_VD_ORG_SE)",
   42                 X364 = "%(Y#MSK_VD_ORG_X364)",
   43                 UR = Y#MSK_VD_ORG_UR) = '0'B);
   44      %LSET LISTDIR = '0'B;
   45      %LSET LISTEXP = '1'B;
   46      %LSET LISTCOM = '0'B;
   47      %LSET LISTSUB = '1'B;
   48      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   49      %IF (STR = 'STA') OR (STR = 'CON') OR (STR = 'EXT');
   50      /*
   51      We're generating code (as opposed to referencing via SYMREF or BASED).
   52      */
   53      %LSET INIT = CHARTEXT(' INIT');
   54      %LSET ENIT = CHARTEXT('');
   55      %ELSE;
   56      /*
   57      We're not generating code (we're probably SYMREFing or BASED).
   58      */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             4    
   59      %LSET INIT = CHARTEXT('/*');
   60      %LSET ENIT = CHARTEXT('*/');
   61      %ENDIF;
   62      %LSET VDOSTRSIZ = 0;
   63      /*
   64      Begin the actual data declaration.
   65      */
   66      %IF LVL = 1;
   67      DCL 1 NAME WALIGNED STCLASS,
   68      %ELSE;
   69      %IF LENGTHC(TEXTCHAR(FNC)) > 10;
   70      /*
   71      We have been passed a FNC name.
   72      We're not at level 1, use FNC minus the fixed leading portion
   73      of the FNC name as the name of this group.
   74      */
   75      %LSET VDOSTRSIZ = SUBSTR(TEXTCHAR(FNC),11);
   76      %(LVL) %CHARTEXT(VDOSTRSIZ) WALIGNED,
   77      /*
   78      The corresponding KV$VDO structure name is derived by stripping
   79      the leading KV_VDO_FNC_ off the front, and stripping any trailing
   80      _IMD, _RQS, _RSP, _SET off the end.
   81      */
   82      %IF LENGTHC(VDOSTRSIZ)>4;
   83       %LSET SFX = SUBSTR(VDOSTRSIZ,LENGTHC(VDOSTRSIZ)-4);
   84       %IF (SFX = '_IMD') OR (SFX = '_RQS') OR (SFX = '_RSP') OR (SFX = '_SET');
   85        %LSET VDOSTRSIZ = SUBSTR(VDOSTRSIZ,0,LENGTHC(VDOSTRSIZ)-4);
   86       %ENDIF;
   87      %ENDIF;
   88      %IF SUBSTR(VDOSTRSIZ,0,3)='DUM';
   89       %LSET VDOSTRSIZ = 0;
   90      %ELSE;
   91       %LSET VDOSTRSIZ = CHARTEXT(CONCAT('SIZEW(KV$VDO_',VDOSTRSIZ,')'));
   92      %ENDIF;
   93      %ERROR (FNC ~= Y#VDP_VDO_FNC,
   94        'ERROR:  Unexpected FNC.  Entry declaration must be in ascending FNC order');
   95      %SET Y#VDP_VDO_FNC = Y#VDP_VDO_FNC + 1;
14:55 JUL 28 '97 KV$VDP.:E05SI                                             5    
   96      %ELSE;
   97      %(LVL) NAME WALIGNED,
   98      %ENDIF;
   99      %ENDIF;
  100      %(LVL+1) LGLVD_ORG_BIT BIT(%(KV#VD_ORG_HI)) UNAL %INIT(%LGLVD_ORG)%ENIT,
  101      %IF DCLARY = '1'B;
  102      %(LVL+1) %CHARTEXT('LGLVD_ORG')(0:%(KV#VD_ORG_HI-1)) REDEF LGLVD_ORG_BIT BIT(1) UNAL,
  103      %ENDIF;
  104      /*K* LGLVD_ORG = bit array, indexed by KV_VD_ORG_..., that indicates
  105      this FNC is legal for that ORG.
  106      */
  107      %(LVL+1) %CHARTEXT('FLWCTR') BIT(1) %INIT(FLWCTR)%ENIT UNAL,
  108      /*K* FLWCTR = {YES | NO}  YES indicates this message is subject
  109      to presentation layer flow control.
  110      */
  111      /*K* LGLRED = {YES|NO} message is permitted during a read.
  112      */
  113      %(LVL+1) %CHARTEXT('LGLRED') BIT(1) %INIT(LGLRED)%ENIT,
  114      /*K* LGLDSC = {YES|NO} message is permitted pending a disconnect.
  115      */
  116      %(LVL+1) %CHARTEXT('LGLDSC') BIT(1) %INIT(LGLDSC)%ENIT,
  117      /*K* SETSTR = {YES|NO} message needs to have its stream context available.
  118      */
  119      %(LVL+1) %CHARTEXT('SETSTR') BIT(1) %INIT(SETSTR)%ENIT,
  120      /*K* RSTSTR = {YES|NO} stream context should be restored after processing.
  121      */
  122      %(LVL+1) %CHARTEXT('RSTSTR') BIT(1) %INIT(RSTSTR)%ENIT,
  123      /*K* PSTSTR = {YES|NO} IO might happen, so move the cursor too.
  124      */
  125      %(LVL+1) %CHARTEXT('PSTSTR') BIT(1) %INIT(PSTSTR)%ENIT,
  126      /*K* RUTACK = {YES|NO} Route ENDACK markers through the output stream.
  127      */
  128      %(LVL+1) %CHARTEXT('RUTACK') BIT(1) %INIT(RUTACK)%ENIT,
  129      /*K* NXT__1 = {YES|NO} available for expansion.
  130      */
  131      %(LVL+1) %CHARTEXT('NXT__1') BIT(1) %INIT(NXT__1)%ENIT,
  132      %(LVL+1) * BIT(%(24-8-KV#VD_ORG_HI)) %INIT('0'B)%ENIT,
14:55 JUL 28 '97 KV$VDP.:E05SI                                             6    
  133      %(LVL+1) WRDSIZ UBIN BYTE %INIT(%VDOSTRSIZ)%ENIT CALIGNED LAST
  134      /*K* WRDSIZ = word size (SIZEW) of the KV$VDO_ structure used
  135      for this FNC.
  136      */
  137      %MEND;
  138      %EJECT;

14:55 JUL 28 '97 KV$VDP.:E05SI                                             7    
  139      %MACRO KV_VDP_ALL (FCG = KV_, STCLASS = SYMREF READONLY);
  140      %KV_VDP_INT;
  141      %KV_VDP_VDO_ALL (FCG = FCG, STCLASS = STCLASS);
  142      %MEND;
  143      %EJECT;

14:55 JUL 28 '97 KV$VDP.:E05SI                                             8    
  144      %MACRO KV_VDP_VDO_ALL (FCG = KV_, STCLASS = SYMREF READONLY);
  145      %LSET LISTDIR = '0'B;
  146      %LSET LISTEXP = '1'B;
  147      %LSET LISTCOM = '0'B;
  148      %LSET LISTSUB = '1'B;
  149      %LSET KV_VDO_FNC_DUM0 = 0;
  150      %LSET KV_VDO_FNC_DUM1 = 1;
  151      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  152      %IF (STR = 'STA') OR (STR = 'CON') OR (STR = 'EXT');
  153      DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(FCG),'VDP_VDO')) WALIGNED STCLASS,
  154
  155      /* DUM0 - Dummy entry number 0 */
  156
  157      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DUM0,
  158        LVL = 2, STCLASS = STCLASS, LAST = ","); /* DUM0 */
  159
  160      /* DUM1 - Dummy entry number 1 */
  161
  162      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DUM1,
  163        LVL = 2, STCLASS = STCLASS, LAST = ","); /* DUM1 */
  164
  165      /* BLKDAT - Block data */
  166
  167      %KV$VDP_VDO (FNC = %KV_VDO_FNC_BLKDAT,
  168        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* BLKDAT */
  169        FLWCTR = NO,   /* BLKDAT */
  170        LGLRED = YES,  /* BLKDAT */
  171        LGLDSC = YES,  /* BLKDAT */
  172        SETSTR = NO,   /* BLKDAT */
  173        RSTSTR = NO,   /* BLKDAT */
  174        PSTSTR = NO,   /* BLKDAT */
  175        RUTACK = NO,   /* BLKDAT */
  176        LGLVD_ORG = ALL);  /* BLKDAT */
  177
  178      /* CLSSSN_RQS - Close session request */
  179
  180      %KV$VDP_VDO (FNC = %KV_VDO_FNC_CLSSSN_RQS,
14:55 JUL 28 '97 KV$VDP.:E05SI                                             9    
  181        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* CLSSSN_RQS */
  182        FLWCTR = NO,   /* CLSSSN_RQS */
  183        LGLRED = YES,  /* CLSSSN_RQS */
  184        LGLDSC = YES,  /* CLSSSN_RQS */
  185        SETSTR = NO,   /* CLSSSN_RQS */
  186        RSTSTR = NO,   /* CLSSSN_RQS */
  187        PSTSTR = NO,   /* CLSSSN_RQS */
  188        RUTACK = NO,   /* CLSSSN_RQS */
  189        LGLVD_ORG = ALL);  /* CLSSSN_RQS */
  190
  191      /* CLSSSN_RSP - Close session response */
  192
  193      %KV$VDP_VDO (FNC = %KV_VDO_FNC_CLSSSN_RSP,
  194        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* CLSSSN_RSP */
  195        FLWCTR = NO,   /* CLSSSN_RSP */
  196        LGLRED = YES,  /* CLSSSN_RSP */
  197        LGLDSC = YES,  /* CLSSSN_RSP */
  198        SETSTR = NO,   /* CLSSSN_RSP */
  199        RSTSTR = NO,   /* CLSSSN_RSP */
  200        PSTSTR = NO,   /* CLSSSN_RSP */
  201        RUTACK = NO,   /* CLSSSN_RSP */
  202        LGLVD_ORG = ALL);  /* CLSSSN_RSP */
  203
  204      /* DAT - Data */
  205
  206      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DAT,
  207        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DAT */
  208        FLWCTR = YES,  /* DAT */
  209        LGLRED = NO,   /* DAT */
  210        LGLDSC = YES,  /* DAT */
  211        SETSTR = YES,  /* DAT */
  212        RSTSTR = NO,   /* DAT */
  213        PSTSTR = YES,  /* DAT */
  214        RUTACK = YES,  /* DAT */
  215        LGLVD_ORG = ALL);  /* DAT */
  216
  217      /* DAT_IMD - Data, immediate */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             10   
  218
  219      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DAT_IMD,
  220        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DAT_IMD */
  221        FLWCTR = NO,   /* DAT_IMD */
  222        LGLRED = YES,  /* DAT_IMD */
  223        LGLDSC = YES,  /* DAT_IMD */
  224        SETSTR = YES,  /* DAT_IMD */
  225        RSTSTR = YES,  /* DAT_IMD */
  226        PSTSTR = YES,  /* DAT_IMD */
  227        RUTACK = NO,   /* DAT_IMD */
  228        LGLVD_ORG = UR);  /* DAT_IMD */
  229
  230      /* DCLFLD - Declare field */
  231
  232      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DCLFLD,
  233        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DCLFLD */
  234        FLWCTR = YES,  /* DCLFLD */
  235        LGLRED = NO,   /* DCLFLD */
  236        LGLDSC = YES,  /* DCLFLD */
  237        SETSTR = YES,  /* DCLFLD */
  238        RSTSTR = YES,  /* DCLFLD */
  239        PSTSTR = NO,   /* DCLFLD */
  240        RUTACK = NO,   /* DCLFLD */
  241        LGLVD_ORG = FORM);  /* DCLFLD */
  242
  243      /* DCLSTR - Declare stream */
  244
  245      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DCLSTR,
  246        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DCLSTR */
  247        FLWCTR = YES,  /* DCLSTR */
  248        LGLRED = NO,   /* DCLSTR */
  249        LGLDSC = YES,  /* DCLSTR */
  250        SETSTR = YES,  /* DCLSTR */
  251        RSTSTR = YES,  /* DCLSTR */
  252        PSTSTR = NO,   /* DCLSTR */
  253        RUTACK = NO,   /* DCLSTR */
  254        LGLVD_ORG = ALL);  /* DCLSTR */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             11   
  255
  256      /* DLT - Delete */
  257
  258      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DLT,
  259        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DLT */
  260        FLWCTR = YES,  /* DLT */
  261        LGLRED = YES,  /* DLT */
  262        LGLDSC = YES,  /* DLT */
  263        SETSTR = YES,  /* DLT */
  264        RSTSTR = YES,  /* DLT */
  265        PSTSTR = YES,  /* DLT */
  266        RUTACK = NO,   /* DLT */
  267        LGLVD_ORG = ALL);  /* DLT */
  268
  269      /* DSC_RQS - Disconnect request */
  270
  271      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DSC_RQS,
  272        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DSC_RQS */
  273        FLWCTR = NO,   /* DSC_RQS */
  274        LGLRED = YES,  /* DSC_RQS */
  275        LGLDSC = YES,  /* DSC_RQS */
  276        SETSTR = NO,   /* DSC_RQS */
  277        RSTSTR = NO,   /* DSC_RQS */
  278        PSTSTR = NO,   /* DSC_RQS */
  279        RUTACK = NO,   /* DSC_RQS */
  280        LGLVD_ORG = ALL);  /* DSC_RQS */
  281
  282      /* DSC_RSP - Disconnect response */
  283
  284      %KV$VDP_VDO (FNC = %KV_VDO_FNC_DSC_RSP,
  285        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DSC_RSP */
  286        FLWCTR = NO,   /* DSC_RSP */
  287        LGLRED = NO,   /* DSC_RSP */
  288        LGLDSC = YES,  /* DSC_RSP */
  289        SETSTR = NO,   /* DSC_RSP */
  290        RSTSTR = NO,   /* DSC_RSP */
  291        PSTSTR = NO,   /* DSC_RSP */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             12   
  292        RUTACK = NO,   /* DSC_RSP */
  293        LGLVD_ORG = ALL);  /* DSC_RSP */
  294
  295      /* ERS - Erase */
  296
  297      %KV$VDP_VDO (FNC = %KV_VDO_FNC_ERS,
  298        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* ERS */
  299        FLWCTR = YES,  /* ERS */
  300        LGLRED = NO,   /* ERS */
  301        LGLDSC = YES,  /* ERS */
  302        SETSTR = YES,  /* ERS */
  303        RSTSTR = YES,  /* ERS */
  304        PSTSTR = YES,  /* ERS */
  305        RUTACK = NO,   /* ERS */
  306        LGLVD_ORG = FORM);  /* ERS */
  307
  308      /* EVT - Event */
  309
  310      %KV$VDP_VDO (FNC = %KV_VDO_FNC_EVT,
  311        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* EVT */
  312        FLWCTR = YES,  /* EVT */
  313        LGLRED = NO,   /* EVT */
  314        LGLDSC = NO,   /* EVT */
  315        SETSTR = NO,   /* EVT */
  316        RSTSTR = NO,   /* EVT */
  317        PSTSTR = NO,   /* EVT */
  318        RUTACK = NO,   /* EVT */
  319        LGLVD_ORG = ALL);  /* EVT */
  320
  321      /* HVPS - Horizontal/vertical position, short */
  322
  323      %KV$VDP_VDO (FNC = %KV_VDO_FNC_HVPS,
  324        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* HVPS */
  325        FLWCTR = YES,  /* HVPS */
  326        LGLRED = NO,   /* HVPS */
  327        LGLDSC = YES,  /* HVPS */
  328        SETSTR = YES,  /* HVPS */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             13   
  329        RSTSTR = YES,  /* HVPS */
  330        PSTSTR = NO,   /* HVPS */
  331        RUTACK = NO,   /* HVPS */
  332        LGLVD_ORG = FORM);  /* HVPS */
  333
  334      /* NOP - No-operation */
  335
  336      %KV$VDP_VDO (FNC = %KV_VDO_FNC_NOP,
  337        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* NOP */
  338        FLWCTR = NO,   /* NOP */
  339        LGLRED = YES,  /* NOP */
  340        LGLDSC = YES,  /* NOP */
  341        SETSTR = NO,   /* NOP */
  342        RSTSTR = NO,   /* NOP */
  343        PSTSTR = NO,   /* NOP */
  344        RUTACK = NO,   /* NOP */
  345        LGLVD_ORG = ALL);  /* NOP */
  346
  347      /* OPNSSN_RQS - Open session request */
  348
  349      %KV$VDP_VDO (FNC = %KV_VDO_FNC_OPNSSN_RQS,
  350        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* OPNSSN_RQS */
  351        FLWCTR = NO,   /* OPNSSN_RQS */
  352        LGLRED = NO,   /* OPNSSN_RQS */
  353        LGLDSC = YES,  /* OPNSSN_RQS */
  354        SETSTR = NO,   /* OPNSSN_RQS */
  355        RSTSTR = NO,   /* OPNSSN_RQS */
  356        PSTSTR = NO,   /* OPNSSN_RQS */
  357        RUTACK = NO,   /* OPNSSN_RQS */
  358        LGLVD_ORG = ALL);  /* OPNSSN_RQS */
  359
  360      /* OPNSSN_RSP - Open session response */
  361
  362      %KV$VDP_VDO (FNC = %KV_VDO_FNC_OPNSSN_RSP,
  363        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* OPNSSN_RSP */
  364        FLWCTR = NO,   /* OPNSSN_RSP */
  365        LGLRED = NO,   /* OPNSSN_RSP */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             14   
  366        LGLDSC = YES,  /* OPNSSN_RSP */
  367        SETSTR = NO,   /* OPNSSN_RSP */
  368        RSTSTR = NO,   /* OPNSSN_RSP */
  369        PSTSTR = NO,   /* OPNSSN_RSP */
  370        RUTACK = NO,   /* OPNSSN_RSP */
  371        LGLVD_ORG = ALL);  /* OPNSSN_RSP */
  372
  373      /* PRM_RSP - Parameter response */
  374
  375      %KV$VDP_VDO (FNC = %KV_VDO_FNC_PRM_RSP,
  376        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* PRM_RSP */
  377        FLWCTR = NO,   /* PRM_RSP */
  378        LGLRED = YES,  /* PRM_RSP */
  379        LGLDSC = YES,  /* PRM_RSP */
  380        SETSTR = NO,   /* PRM_RSP */
  381        RSTSTR = NO,   /* PRM_RSP */
  382        PSTSTR = NO,   /* PRM_RSP */
  383        RUTACK = NO,   /* PRM_RSP */
  384        LGLVD_ORG = ALL);  /* PRM_RSP */
  385
  386      /* PRM_SET - Parameter set */
  387
  388      %KV$VDP_VDO (FNC = %KV_VDO_FNC_PRM_SET,
  389        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* PRM_SET */
  390        FLWCTR = YES,  /* PRM_SET */
  391        LGLRED = NO,   /* PRM_SET */
  392        LGLDSC = YES,  /* PRM_SET */
  393        SETSTR = YES,  /* PRM_SET */
  394        RSTSTR = YES,  /* PRM_SET */
  395        PSTSTR = NO,   /* PRM_SET */
  396        RUTACK = NO,   /* PRM_SET */
  397        LGLVD_ORG = ALL);  /* PRM_SET */
  398
  399      /* RLSFLD - Release field */
  400
  401      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RLSFLD,
  402        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RLSFLD */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             15   
  403        FLWCTR = YES,  /* RLSFLD */
  404        LGLRED = NO,   /* RLSFLD */
  405        LGLDSC = YES,  /* RLSFLD */
  406        SETSTR = YES,  /* RLSFLD */
  407        RSTSTR = YES,  /* RLSFLD */
  408        PSTSTR = NO,   /* RLSFLD */
  409        RUTACK = NO,   /* RLSFLD */
  410        LGLVD_ORG = FORM);  /* RLSFLD */
  411
  412      /* RMS - Reset mode, short */
  413
  414      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RMS,
  415        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RMS */
  416        FLWCTR = YES,  /* RMS */
  417        LGLRED = YES,  /* RMS */
  418        LGLDSC = YES,  /* RMS */
  419        SETSTR = YES,  /* RMS */
  420        RSTSTR = YES,  /* RMS */
  421        PSTSTR = YES,  /* RMS */
  422        RUTACK = NO,   /* RMS */
  423        LGLVD_ORG = FORM);  /* RMS */
  424
  425      /* RQSDAT - Request data */
  426
  427      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RQSDAT,
  428        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RQSDAT */
  429        FLWCTR = NO,   /* RQSDAT */
  430        LGLRED = NO,   /* RQSDAT */
  431        LGLDSC = YES,  /* RQSDAT */
  432        SETSTR = YES,  /* RQSDAT */
  433        RSTSTR = NO,   /* RQSDAT */
  434        PSTSTR = YES,  /* RQSDAT */
  435        RUTACK = NO,   /* RQSDAT */
  436        LGLVD_ORG = ALL);  /* RQSDAT */
  437
  438      /* RQSPRM - Request parameters */
  439
14:55 JUL 28 '97 KV$VDP.:E05SI                                             16   
  440      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RQSPRM,
  441        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RQSPRM */
  442        FLWCTR = NO,   /* RQSPRM */
  443        LGLRED = NO,   /* RQSPRM */
  444        LGLDSC = YES,  /* RQSPRM */
  445        SETSTR = YES,  /* RQSPRM */
  446        RSTSTR = YES,  /* RQSPRM */
  447        PSTSTR = NO,   /* RQSPRM */
  448        RUTACK = NO,   /* RQSPRM */
  449        LGLVD_ORG = ALL);  /* RQSPRM */
  450
  451      /* RQSSTT - Request status */
  452
  453      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RQSSTT,
  454        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RQSSTT */
  455        FLWCTR = NO,   /* RQSSTT */
  456        LGLRED = YES,  /* RQSSTT */
  457        LGLDSC = YES,  /* RQSSTT */
  458        SETSTR = NO,   /* RQSSTT */
  459        RSTSTR = NO,   /* RQSSTT */
  460        PSTSTR = NO,   /* RQSSTT */
  461        RUTACK = NO,   /* RQSSTT */
  462        LGLVD_ORG = ALL);  /* RQSSTT */
  463
  464      /* SLCFLD - Select field */
  465
  466      %KV$VDP_VDO (FNC = %KV_VDO_FNC_SLCFLD,
  467        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* SLCFLD */
  468        FLWCTR = YES,  /* SLCFLD */
  469        LGLRED = NO,   /* SLCFLD */
  470        LGLDSC = YES,  /* SLCFLD */
  471        SETSTR = YES,  /* SLCFLD */
  472        RSTSTR = YES,  /* SLCFLD */
  473        PSTSTR = NO,   /* SLCFLD */
  474        RUTACK = NO,   /* SLCFLD */
  475        LGLVD_ORG = FORM);  /* SLCFLD */
  476
14:55 JUL 28 '97 KV$VDP.:E05SI                                             17   
  477      /* SLCGRPRND - Select graphic rendition */
  478
  479      %KV$VDP_VDO (FNC = %KV_VDO_FNC_SLCGRPRND,
  480        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* SLCGRPRND */
  481        FLWCTR = YES,  /* SLCGRPRND */
  482        LGLRED = NO,   /* SLCGRPRND */
  483        LGLDSC = YES,  /* SLCGRPRND */
  484        SETSTR = YES,  /* SLCGRPRND */
  485        RSTSTR = YES,  /* SLCGRPRND */
  486        PSTSTR = NO,   /* SLCGRPRND */
  487        RUTACK = NO,   /* SLCGRPRND */
  488        LGLVD_ORG = FORM);  /* SLCGRPRND */
  489
  490      /* SLCQLF - Select qualification */
  491
  492      %KV$VDP_VDO (FNC = %KV_VDO_FNC_SLCQLF,
  493        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* SLCQLF */
  494        FLWCTR = YES,  /* SLCQLF */
  495        LGLRED = NO,   /* SLCQLF */
  496        LGLDSC = YES,  /* SLCQLF */
  497        SETSTR = YES,  /* SLCQLF */
  498        RSTSTR = YES,  /* SLCQLF */
  499        PSTSTR = NO,   /* SLCQLF */
  500        RUTACK = NO,   /* SLCQLF */
  501        LGLVD_ORG = FORM);  /* SLCQLF */
  502
  503      /* SMS - Set mode, short */
  504
  505      %KV$VDP_VDO (FNC = %KV_VDO_FNC_SMS,
  506        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* SMS */
  507        FLWCTR = YES,  /* SMS */
  508        LGLRED = YES,  /* SMS */
  509        LGLDSC = YES,  /* SMS */
  510        SETSTR = YES,  /* SMS */
  511        RSTSTR = YES,  /* SMS */
  512        PSTSTR = YES,  /* SMS */
  513        RUTACK = NO,   /* SMS */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             18   
  514        LGLVD_ORG = FORM);  /* SMS */
  515
  516      /* STT - Status */
  517
  518      %KV$VDP_VDO (FNC = %KV_VDO_FNC_STT,
  519        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* STT */
  520        FLWCTR = NO,   /* STT */
  521        LGLRED = YES,  /* STT */
  522        LGLDSC = YES,  /* STT */
  523        SETSTR = NO,   /* STT */
  524        RSTSTR = NO,   /* STT */
  525        PSTSTR = NO,   /* STT */
  526        RUTACK = NO,   /* STT */
  527        LGLVD_ORG = ALL);  /* STT */
  528
  529      /* UPDRELDVC - Update real device */
  530
  531      %KV$VDP_VDO (FNC = %KV_VDO_FNC_UPDRELDVC,
  532        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* UPDRELDVC */
  533        FLWCTR = YES,  /* UPDRELDVC */
  534        LGLRED = NO,   /* UPDRELDVC */
  535        LGLDSC = YES,  /* UPDRELDVC */
  536        SETSTR = YES,  /* UPDRELDVC */
  537        RSTSTR = NO,   /* UPDRELDVC */
  538        PSTSTR = YES,  /* UPDRELDVC */
  539        RUTACK = NO,   /* UPDRELDVC */
  540        LGLVD_ORG = ALL);  /* UPDRELDVC */
  541
  542      /* MRK - Marker */
  543
  544      %KV$VDP_VDO (FNC = %KV_VDO_FNC_MRK,
  545        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* MRK */
  546        FLWCTR = NO,   /* MRK */
  547        LGLRED = YES,  /* MRK */
  548        LGLDSC = YES,  /* MRK */
  549        SETSTR = NO,   /* MRK */
  550        RSTSTR = NO,   /* MRK */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             19   
  551        PSTSTR = NO,   /* MRK */
  552        RUTACK = NO,   /* MRK */
  553        LGLVD_ORG = ALL);  /* MRK */
  554
  555      /* RQSMRK - Request marker */
  556
  557      %KV$VDP_VDO (FNC = %KV_VDO_FNC_RQSMRK,
  558        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* RQSMRK */
  559        FLWCTR = YES,  /* RQSMRK */
  560        LGLRED = YES,  /* RQSMRK */
  561        LGLDSC = YES,  /* RQSMRK */
  562        SETSTR = YES,  /* RQSMRK */
  563        RSTSTR = YES,  /* RQSMRK */
  564        PSTSTR = NO,   /* RQSMRK */
  565        RUTACK = NO,   /* RQSMRK */
  566        LGLVD_ORG = ALL);  /* RQSMRK */
  567
  568      /* OPNSTR - Open stream */
  569
  570      %KV$VDP_VDO (FNC = %KV_VDO_FNC_OPNSTR,
  571        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* OPNSTR */
  572        FLWCTR = YES,  /* OPNSTR */
  573        LGLRED = NO,   /* OPNSTR */
  574        LGLDSC = YES,  /* OPNSTR */
  575        SETSTR = YES,  /* OPNSTR */
  576        RSTSTR = YES,  /* OPNSTR */
  577        PSTSTR = NO,   /* OPNSTR */
  578        RUTACK = NO,   /* OPNSTR */
  579        LGLVD_ORG = ALL);  /* OPNSTR */
  580
  581      /* CLSSTR - Close stream */
  582
  583      %KV$VDP_VDO (FNC = %KV_VDO_FNC_CLSSTR,
  584        LVL = 2, STCLASS = STCLASS, LAST = ";",  /* CLSSTR */
  585        FLWCTR = YES,  /* CLSSTR */
  586        LGLRED = NO,   /* CLSSTR */
  587        LGLDSC = YES,  /* CLSSTR */
14:55 JUL 28 '97 KV$VDP.:E05SI                                             20   
  588        SETSTR = YES,   /* CLSSTR */
  589        RSTSTR = YES,  /* CLSSTR */
  590        PSTSTR = NO,    /* CLSSTR */
  591        RUTACK = NO,    /* CLSSTR */
  592        LGLVD_ORG = ALL);  /* CLSSTR */
  593
  594      %ELSE;
  595      /*
  596      We're not generating code.  Declare an array of KV$VDP_VDOs,
  597      without the array declarations within individual KV$VDP_VDOs.
  598      */
  599
  600      DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(FCG),'VDP_VDO')) (0:%KV_VDO_FNC_HI) WALIGNED STCLASS,
  601      %KV$VDP_VDO (FNC = ,
  602        LVL = 2, STCLASS = NO_INITS, LAST = ";", DCLARY = NO);  /* array */
  603      %ENDIF;
  604      %MEND;

