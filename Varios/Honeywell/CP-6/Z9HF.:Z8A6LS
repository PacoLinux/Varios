VERSION A06

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:1    
        1        1        /*M* Z9HF -- OBJ table management routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z9HF
        9        9             PURPOSE:
       10       10                   This module contains routines for managing the OBJ
       11       11                   table.  The OBJ table is stored in a different segment
       12       12                   from other tables so that all the space for the table
       13       13                   can be freed in the event that memory is exhausted.  At
       14       14                   this point the OBJ table will be written to a file, and
       15       15                   a paging mechanism will then be used to reference the table.
       16       16
       17       17                   Why page only the OBJ?  Because the OBJ is referenced
       18       18                   sequentially; most of the other tables (all others?)
       19       19                   are referenced in a random manner.
       20       20             DESCRIPTION:
       21       21                   This module contains all the routines used in
       22       22                   obtaining space for the OBJ table, and for paging
       23       23                   the OBJ table when memory is used up.
       24       24        */
       25       25
       26       26        Z9HF$WRITE_OBJ_PAGE:PROC (PAGE$);
       27       27        /*F*
       28       28             NAME: Z9HF$WRITE_OBJ_PAGE
       29       29             PURPOSE:
       30       30                   Write a page to the OBJ file.
       31       31             DESCRIPTION:
       32       32                   Call M$WRITE to output the page pointed to by PAGE$
       33       33                   to the file described by the M$OBJFILE dcb.
       34       34        */
       35       35        /*D*
       36       36             NAME: Z9HF$WRITE_OBJ_PAGE
       37       37             CALL:
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:2    
       38       38                   CALL Z9HF$WRITE_OBJ_PAGE(PAGE$)
       39       39             PARAMETERS:
       40       40                   PAGE$ - Pointer to the page to be written to the obj file.
       41       41             INPUT:
       42       42                  None.
       43       43             OUTPUT:
       44       44                   Page to the OBJ file.
       45       45             SCRATCH:
       46       46                  None.
       47       47             DESCRIPTION:
       48       48                   This procedure writes a page (of %PAGE_SIZE) to
       49       49                   the M$OBJFILE.  The file is assumed to have been opened.
       50       50        */
       51       51
       52       52    1   DCL PAGE$ PTR;
       53       53
       54       54
       55       55        %INCLUDE Z8A_SYS_FILE;
       56     6330
       57     6331        %SET PHASE = 0;
       58     6332        %INCLUDE Z8A_DEFC;
       59     6400        %INCLUDE Z8A_SUPP_MAC;
       60     8800        %INCLUDE Z8A_COMCOM;
       61     9450        %INCLUDE B_ERRORS_C;
       62    10576        %SET INCLUDE_ENT_DEFS = '0'B;
       63    10577        %INCLUDE Z8A_OBJ;
       64    11074        %INCLUDE Z9A_SUPP_MAC;
       65    11363
       66    11364
       67    11365        %DCBPTR;
       68    11389    1   DCL M$OBJFILE DCB;
       69    11390
       70    11391    1   DCL 1 OUTPAGE BASED (PAGE$)  ALIGNED,
       71    11392    1         2 * (0:%(PAGE_SIZE-2)) UBIN WORD UNAL,
       72    11393    1         2 NEXT PTR;
       73    11394    1   DCL Z9AE$ISSUE_SYSTEM_ERROR   ENTRY(2);
       74    11395
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:3    
       75    11396        %B$TCB;
       76    11399        %B$ALT;
       77    11407    1   DCL  B$TCB$     PTR SYMREF;
       78    11408
       79    11409        %FPT_WRITE(FPTN=WRTOBJ,
       80    11410                   STCLASS=STATIC,
       81    11411                   DCB=%M$OBJFILE);
       82    11442
       83    11443
       84    11444    1   WRTOBJ.BUF_ = VECTOR(OUTPAGE);
       85    11445
       86    11446    1   CALL M$WRITE( WRTOBJ ) WHENALTRETURN             /*#29930*/
       87    11447    2     DO;
       88    11448    2       CALL Z9AE$ISSUE_SYSTEM_ERROR( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
       89    11449    2                                     ADDR(NIL) );
       90    11450    2     END;
       91    11451
       92    11452
       93    11453
       94    11454    1   END;
       95    11455        %EOD;

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:4    
--  Include file information  --

   Z9A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E04  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$WRITE_OBJ_PAGE.

   Procedure Z9HF$WRITE_OBJ_PAGE requires 26 words for executable code.
   Procedure Z9HF$WRITE_OBJ_PAGE requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:5    

 Object Unit name= Z9HF$WRITE_OBJ_PAGE                        File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 13:56:17.20 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none     1      1  OBJ$
    3  LblCom even  none     1      1  PAGING_OBJ
    4  LblCom even  none     1      1  OBJ_PAGE_COUNT
    5  LblCom even  none     1      1  OBJ_FINISHED
    6  LblCom even  none     1      1  OBJ_SEG_SIZE
    7  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    8  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    9  LblCom even  none     5      5  OBJ_
   10   DCB   even  none     0      0  M$OBJFILE
   11   Data  even  none    12     14  Z9HF$WRITE_OBJ_PAGE
   12   Proc  even  none    26     32  Z9HF$WRITE_OBJ_PAGE
   13  RoData even  none     3      3  Z9HF$WRITE_OBJ_PAGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  Z9HF$WRITE_OBJ_PAGE
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:6    

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 Z9AE$ISSUE_SYSTEM_ERROR
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  COMCOM                           r    OBJ_STEP
     Z9A8$M$ES$                            Z9A8$M$SI$                            Z9A8$M$UI$
     Z9A8$M$SO$                            Z9A8$M$OU$                            Z9A8$M$LO$
     Z9A8$M$ME$                            Z9A8$M$DO$                            Z9A8$M$OBJFILE$
     Z9A8$M$ES#                            Z9A8$M$SI#                            Z9A8$M$UI#
     Z9A8$M$SO#                            Z9A8$M$OU#                            Z9A8$M$LO#
     Z9A8$M$ME#                            Z9A8$M$DO#                            Z9A8$M$OBJFILE#
     M$OBJFILE                             B$TCB$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:7    


        1        1        /*M* Z9HF -- OBJ table management routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Z9HF
        9        9             PURPOSE:
       10       10                   This module contains routines for managing the OBJ
       11       11                   table.  The OBJ table is stored in a different segment
       12       12                   from other tables so that all the space for the table
       13       13                   can be freed in the event that memory is exhausted.  At
       14       14                   this point the OBJ table will be written to a file, and
       15       15                   a paging mechanism will then be used to reference the table.
       16       16
       17       17                   Why page only the OBJ?  Because the OBJ is referenced
       18       18                   sequentially; most of the other tables (all others?)
       19       19                   are referenced in a random manner.
       20       20             DESCRIPTION:
       21       21                   This module contains all the routines used in
       22       22                   obtaining space for the OBJ table, and for paging
       23       23                   the OBJ table when memory is used up.
       24       24        */
       25       25
       26       26        Z9HF$WRITE_OBJ_PAGE:PROC (PAGE$);

     26 12 000000   000000 700200 xent  Z9HF$WRITE_* TSX0  ! X66_AUTO_1
        12 000001   000010 000001                    ZERO    8,1

       27       27        /*F*
       28       28             NAME: Z9HF$WRITE_OBJ_PAGE
       29       29             PURPOSE:
       30       30                   Write a page to the OBJ file.
       31       31             DESCRIPTION:
       32       32                   Call M$WRITE to output the page pointed to by PAGE$
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:8    
       33       33                   to the file described by the M$OBJFILE dcb.
       34       34        */
       35       35        /*D*
       36       36             NAME: Z9HF$WRITE_OBJ_PAGE
       37       37             CALL:
       38       38                   CALL Z9HF$WRITE_OBJ_PAGE(PAGE$)
       39       39             PARAMETERS:
       40       40                   PAGE$ - Pointer to the page to be written to the obj file.
       41       41             INPUT:
       42       42                  None.
       43       43             OUTPUT:
       44       44                   Page to the OBJ file.
       45       45             SCRATCH:
       46       46                  None.
       47       47             DESCRIPTION:
       48       48                   This procedure writes a page (of %PAGE_SIZE) to
       49       49                   the M$OBJFILE.  The file is assumed to have been opened.
       50       50        */
       51       51
       52       52    1   DCL PAGE$ PTR;
       53       53
       54       54
       55       55        %INCLUDE Z8A_SYS_FILE;
       56     6330
       57     6331        %SET PHASE = 0;
       58     6332        %INCLUDE Z8A_DEFC;
       59     6400        %INCLUDE Z8A_SUPP_MAC;
       60     8800        %INCLUDE Z8A_COMCOM;
       61     9450        %INCLUDE B_ERRORS_C;
       62    10576        %SET INCLUDE_ENT_DEFS = '0'B;
       63    10577        %INCLUDE Z8A_OBJ;
       64    11074        %INCLUDE Z9A_SUPP_MAC;
       65    11363
       66    11364
       67    11365        %DCBPTR;
       68    11389    1   DCL M$OBJFILE DCB;
       69    11390
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:9    
       70    11391    1   DCL 1 OUTPAGE BASED (PAGE$)  ALIGNED,
       71    11392    1         2 * (0:%(PAGE_SIZE-2)) UBIN WORD UNAL,
       72    11393    1         2 NEXT PTR;
       73    11394    1   DCL Z9AE$ISSUE_SYSTEM_ERROR   ENTRY(2);
       74    11395
       75    11396        %B$TCB;
       76    11399        %B$ALT;
       77    11407    1   DCL  B$TCB$     PTR SYMREF;
       78    11408
       79    11409        %FPT_WRITE(FPTN=WRTOBJ,
       80    11410                   STCLASS=STATIC,
       81    11411                   DCB=%M$OBJFILE);
       82    11442
       83    11443
       84    11444    1   WRTOBJ.BUF_ = VECTOR(OUTPAGE);

  11444 12 000002   200003 470500                    LDP0    @PAGE$,,AUTO
        12 000003   000000 471500                    LDP1    0,,PR0
        12 000004   000000 235000 13                 LDA     0
        12 000005   200004 451500                    STP1    @PAGE$+1,,AUTO
        12 000006   200004 236100                    LDQ     @PAGE$+1,,AUTO
        12 000007   000004 757000 11                 STAQ    WRTOBJ+4

       85    11445
       86    11446    1   CALL M$WRITE( WRTOBJ ) WHENALTRETURN             /*#29930*/

  11446 12 000010   000000 630400 11                 EPPR0   WRTOBJ
        12 000011   440001 713400                    CLIMB   alt,write
        12 000012   401400 401760                    pmme    nvectors=4
        12 000013   000015 702000 12                 TSX2    s:11448
        12 000014   000031 710000 12                 TRA     s:11454

       87    11447    2     DO;

       88    11448    2       CALL Z9AE$ISSUE_SYSTEM_ERROR( B$TCB$->B$TCB.ALT$->B$ALT.ERR,

  11448 12 000015   000000 470400 xsym               LDP0    B$TCB$
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:10   
        12 000016   000000 471500                    LDP1    0,,PR0
        12 000017   000001 236000 13                 LDQ     1
        12 000020   200004 756100                    STQ     @PAGE$+1,,AUTO
        12 000021   200004 633500                    EPPR3   @PAGE$+1,,AUTO
        12 000022   200007 453500                    STP3    @PAGE$+4,,AUTO
        12 000023   100102 634500                    EPPR4   66,,PR1
        12 000024   200006 454500                    STP4    @PAGE$+3,,AUTO
        12 000025   200006 630500                    EPPR0   @PAGE$+3,,AUTO
        12 000026   000002 631400 13                 EPPR1   2
        12 000027   000000 701000 xent               TSX1    Z9AE$ISSUE_SYSTEM_ERROR
        12 000030   000000 011000                    NOP     0

       89    11449    2                                     ADDR(NIL) );
       90    11450    2     END;

       91    11451
       92    11452
       93    11453
       94    11454    1   END;

  11454 12 000031   000000 702200 xent               TSX2  ! X66_ARET
       95    11455        %EOD;

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:11   
--  Include file information  --

   Z9A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E04  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$WRITE_OBJ_PAGE.
PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:12   

 **** Variables and constants ****

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 003 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 PAGING_OBJ

  ****  Section 004 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 005 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:13   
  ****  Section 006 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_SEG_SIZE

  ****  Section 007 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_TOP_NEW_SEG

  ****  Section 008 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_LAST_REGULAR_PAGE

  ****  Section 009 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 OBJ_

  ****  Section 011  Data  Z9HF$WRITE_OBJ_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 WRTOBJ

  ****  Auto variables  ****

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:14   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PAGE$                    *0-0-0/w PTR         r     1 PAGE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(13248)       1 COMCOM
     0-0-0/w UBIN              1 OBJ_STEP(0:4)
     0-0-0/w UBIN              1 Z9A8$M$DO#                 0-0-0/w PTR               1 Z9A8$M$DO$
     0-0-0/w UBIN              1 Z9A8$M$ES#                 0-0-0/w PTR               1 Z9A8$M$ES$
     0-0-0/w UBIN              1 Z9A8$M$LO#                 0-0-0/w PTR               1 Z9A8$M$LO$
     0-0-0/w UBIN              1 Z9A8$M$ME#                 0-0-0/w PTR               1 Z9A8$M$ME$
     0-0-0/w UBIN              1 Z9A8$M$OBJFILE#            0-0-0/w PTR               1 Z9A8$M$OBJFILE$
     0-0-0/w UBIN              1 Z9A8$M$OU#                 0-0-0/w PTR               1 Z9A8$M$OU$
     0-0-0/w UBIN              1 Z9A8$M$SI#                 0-0-0/w PTR               1 Z9A8$M$SI$
     0-0-0/w UBIN              1 Z9A8$M$SO#                 0-0-0/w PTR               1 Z9A8$M$SO$
     0-0-0/w UBIN              1 Z9A8$M$UI#                 0-0-0/w PTR               1 Z9A8$M$UI$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0N  NULL        r     1 M$OBJFILE                  0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC              1 OBJ                        0-0-0/w STRC(72)          1 OBJ_LAB
     0-0-0/w STRC(108)         1 OBJ_LINE                   0-0-0/w STRC(72)          1 OBJ_ORG
     0-0-0/w STRC(72)          1 OBJ_SCOPE                  0-0-0/w STRC(144)         1 OBJ_WORD
     0-0-0/w STRC(36864) r     1 OUTPAGE                    0-0-0/w STRC(36864)       1 PAGE

PL6.E3A0      #001=Z9HF$WRITE_OBJ_PAGE File=Z9HF.:Z8A6TSI                        SAT 08/09/97 13:56 Page:15   

   Procedure Z9HF$WRITE_OBJ_PAGE requires 26 words for executable code.
   Procedure Z9HF$WRITE_OBJ_PAGE requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:16   
       96        1        /*T***********************************************************/
       97        2        /*T*                                                         */
       98        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       99        4        /*T*                                                         */
      100        5        /*T***********************************************************/
      101        6        Z9HF$READ_OBJ_PAGE:PROC ALTRET ;
      102        7        /*F*
      103        8             NAME: Z9HF$READ_OBJ_PAGE
      104        9             PURPOSE:
      105       10                   Read a page from the M$OBJFILE.
      106       11             DESCRIPTION:
      107       12                   Call M$READ to get the next page from the OBJ file.
      108       13        */
      109       14        /*D*
      110       15             NAME: Z9HF$READ_OBJ_PAGE
      111       16             CALL:
      112       17                   CALL Z9HF$READ_OBJ_PAGE;
      113       18             INPUT:
      114       19                   The OBJ file.
      115       20             OUTPUT:
      116       21                  None.
      117       22             DESCRIPTION:
      118       23                   Read the next Page from the obj file, assumed to
      119       24                   be open input, into the buffer for the OBJ table.
      120       25                   The buffer is the page pointed to by OBJ_.FIRST.
      121       26        */
      122       27
      123       28    1   DCL PAGE$ PTR;
      124       29
      125       30        %INCLUDE Z8A_SYS_FILE;
      126     6305
      127     6306
      128     6307        %SET PHASE = 0;
      129     6308        %INCLUDE Z8A_DEFC;
      130     6376        %INCLUDE Z8A_SUPP_MAC;
      131     8776        %INCLUDE Z8A_COMCOM;
      132     9426        %SET INCLUDE_ENT_DEFS = '0'B;
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:17   
      133     9427        %INCLUDE Z8A_OBJ;
      134     9924        %INCLUDE B_ERRORS_C;
      135    11050
      136    11051    1   DCL M$OBJFILE DCB;
      137    11052
      138    11053    1   DCL 1 INPAGE BASED (PAGE$)  ALIGNED,
      139    11054    1         2 * (0:%(PAGE_SIZE-2)) UBIN WORD UNAL,
      140    11055    1         2 NEXT PTR;
      141    11056
      142    11057        %FPT_READ(FPTN=RDOBJ,
      143    11058                   STCLASS=STATIC,
      144    11059                   DCB=%M$OBJFILE);
      145    11098
      146    11099    1   PAGE$ = OBJ_.FIRST;
      147    11100
      148    11101    1   INPAGE = '0'B;
      149    11102
      150    11103    1   RDOBJ.BUF_ = VECTOR(INPAGE);
      151    11104
      152    11105    1   CALL M$READ( RDOBJ )
      153    11106    2       WHENALTRETURN DO;
      154    11107    2         ALTRETURN;
      155    11108    2       END;
      156    11109
      157    11110    1   END;
      158    11111        %EOD;

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:18   
--  Include file information  --

   B_ERRORS_C.:LIB_E04  is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$READ_OBJ_PAGE.

   Procedure Z9HF$READ_OBJ_PAGE requires 18 words for executable code.
   Procedure Z9HF$READ_OBJ_PAGE requires 4 words of local(AUTO) storage.

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:19   

 Object Unit name= Z9HF$READ_OBJ_PAGE                         File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 13:57:25.96 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none     1      1  OBJ$
    3  LblCom even  none     1      1  PAGING_OBJ
    4  LblCom even  none     1      1  OBJ_PAGE_COUNT
    5  LblCom even  none     1      1  OBJ_FINISHED
    6  LblCom even  none     1      1  OBJ_SEG_SIZE
    7  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    8  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    9  LblCom even  none     5      5  OBJ_
   10   DCB   even  none     0      0  M$OBJFILE
   11   Data  even  none    14     16  Z9HF$READ_OBJ_PAGE
   12   Proc  even  none    18     22  Z9HF$READ_OBJ_PAGE
   13  RoData even  none     2      2  Z9HF$READ_OBJ_PAGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        0  Z9HF$READ_OBJ_PAGE
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:20   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  COMCOM                           r    OBJ_STEP
     M$OBJFILE

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:21   


       96        1        /*T***********************************************************/
       97        2        /*T*                                                         */
       98        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       99        4        /*T*                                                         */
      100        5        /*T***********************************************************/
      101        6        Z9HF$READ_OBJ_PAGE:PROC ALTRET ;

      6 12 000000   000000 700200 xent  Z9HF$READ_O* TSX0  ! X66_AUTO_0
        12 000001   000004 000000                    ZERO    4,0

      102        7        /*F*
      103        8             NAME: Z9HF$READ_OBJ_PAGE
      104        9             PURPOSE:
      105       10                   Read a page from the M$OBJFILE.
      106       11             DESCRIPTION:
      107       12                   Call M$READ to get the next page from the OBJ file.
      108       13        */
      109       14        /*D*
      110       15             NAME: Z9HF$READ_OBJ_PAGE
      111       16             CALL:
      112       17                   CALL Z9HF$READ_OBJ_PAGE;
      113       18             INPUT:
      114       19                   The OBJ file.
      115       20             OUTPUT:
      116       21                  None.
      117       22             DESCRIPTION:
      118       23                   Read the next Page from the obj file, assumed to
      119       24                   be open input, into the buffer for the OBJ table.
      120       25                   The buffer is the page pointed to by OBJ_.FIRST.
      121       26        */
      122       27
      123       28    1   DCL PAGE$ PTR;
      124       29
      125       30        %INCLUDE Z8A_SYS_FILE;
      126     6305
      127     6306
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:22   
      128     6307        %SET PHASE = 0;
      129     6308        %INCLUDE Z8A_DEFC;
      130     6376        %INCLUDE Z8A_SUPP_MAC;
      131     8776        %INCLUDE Z8A_COMCOM;
      132     9426        %SET INCLUDE_ENT_DEFS = '0'B;
      133     9427        %INCLUDE Z8A_OBJ;
      134     9924        %INCLUDE B_ERRORS_C;
      135    11050
      136    11051    1   DCL M$OBJFILE DCB;
      137    11052
      138    11053    1   DCL 1 INPAGE BASED (PAGE$)  ALIGNED,
      139    11054    1         2 * (0:%(PAGE_SIZE-2)) UBIN WORD UNAL,
      140    11055    1         2 NEXT PTR;
      141    11056
      142    11057        %FPT_READ(FPTN=RDOBJ,
      143    11058                   STCLASS=STATIC,
      144    11059                   DCB=%M$OBJFILE);
      145    11098
      146    11099    1   PAGE$ = OBJ_.FIRST;

  11099 12 000002   000001 236000 9                  LDQ     OBJ_+1
        12 000003   200003 756100                    STQ     PAGE$,,AUTO

      147    11100
      148    11101    1   INPAGE = '0'B;

  11101 12 000004   200003 470500                    LDP0    PAGE$,,AUTO
        12 000005   010000 220003                    LDX0    4096,DU
        12 000006   000140 100400                    MLR     fill='000'O
        12 000007   000000 000001 13                 ADSC9   0                        cn=0,n=1
        12 000010   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      149    11102
      150    11103    1   RDOBJ.BUF_ = VECTOR(INPAGE);

  11103 12 000011   000001 235000 13                 LDA     1
        12 000012   000004 757000 11                 STAQ    RDOBJ+4
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:23   

      151    11104
      152    11105    1   CALL M$READ( RDOBJ )

  11105 12 000013   000000 630400 11                 EPPR0   RDOBJ
        12 000014   440000 713400                    CLIMB   alt,read
        12 000015   401400 401760                    pmme    nvectors=4
        12 000016   000020 702000 12                 TSX2    s:11107
        12 000017   000021 710000 12                 TRA     s:11110

      153    11106    2       WHENALTRETURN DO;

      154    11107    2         ALTRETURN;

  11107 12 000020   000000 702200 xent               TSX2  ! X66_AALT

      155    11108    2       END;
      156    11109
      157    11110    1   END;

  11110 12 000021   000000 702200 xent               TSX2  ! X66_ARET
      158    11111        %EOD;

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:24   
--  Include file information  --

   B_ERRORS_C.:LIB_E04  is referenced.
   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$READ_OBJ_PAGE.
PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:25   

 **** Variables and constants ****

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 003 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 PAGING_OBJ

  ****  Section 004 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 005 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:26   
  ****  Section 006 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_SEG_SIZE

  ****  Section 007 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_TOP_NEW_SEG

  ****  Section 008 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_LAST_REGULAR_PAGE

  ****  Section 009 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Section 011  Data  Z9HF$READ_OBJ_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 RDOBJ

  ****  Auto variables  ****

PL6.E3A0      #002=Z9HF$READ_OBJ_PAGE File=Z9HF.:Z8A6TSI                         SAT 08/09/97 13:57 Page:27   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 PAGE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248)       1 COMCOM
     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(36864) r     1 INPAGE                     0-0-0N  NULL        r     1 M$OBJFILE
     0-0-0N  NULL        r     1 M$UC                       0-0-0/w STRC              1 OBJ
     0-0-0/w STRC(72)          1 OBJ_LAB                    0-0-0/w STRC(108)         1 OBJ_LINE
     0-0-0/w STRC(72)          1 OBJ_ORG                    0-0-0/w STRC(72)          1 OBJ_SCOPE
     0-0-0/w STRC(144)         1 OBJ_WORD                   0-0-0/w STRC(36864)       1 PAGE


   Procedure Z9HF$READ_OBJ_PAGE requires 18 words for executable code.
   Procedure Z9HF$READ_OBJ_PAGE requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:28   
      159        1        /*T***********************************************************/
      160        2        /*T*                                                         */
      161        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      162        4        /*T*                                                         */
      163        5        /*T***********************************************************/
      164        6        Z9HF$OPEN_OBJ_OUTPUT:PROC;
      165        7        /*F*
      166        8             NAME: Z9HF$OPEN_OBJ_OUTPUT
      167        9             PURPOSE:
      168       10                   Open the OBJ file for writing.  This must be called before
      169       11                   the first call to Z9HF$WRITE_OBJ_PAGE.
      170       12             DESCRIPTION:
      171       13                   Call M$OPEN to prepare the obj file for writing.
      172       14        */
      173       15        /*D*
      174       16             NAME: Z9HF$OPEN_OBJ_OUTPUT
      175       17             CALL:
      176       18                   CALL Z9HF$OPEN_OBJ_OUTPUT;
      177       19             DESCRIPTION:
      178       20                   Call M$OPEN to initialize the M$OBJFILE dcb and to
      179       21                   prepare the OBJ file for writing.  The OBJ file
      180       22                   will be called '*1'.
      181       23        */
      182       24
      183       25        %INCLUDE Z8A_SYS_FILE;
      184     6300        %INCLUDE B_ERRORS_C;
      185     7426
      186     7427        %B$TCB;
      187     7430        %B$ALT;
      188     7438    1   DCL B$TCB$        PTR  SYMREF;
      189     7439    1   DCL Z9AE$ISSUE_SYSTEM_ERROR   ENTRY(2);
      190     7440
      191     7441    1   DCL M$OBJFILE DCB;
      192     7442
      193     7443        %FPT_OPEN(FPTN=OPOBJOUT,
      194     7444                  STCLASS=CONSTANT,
      195     7445                  DCB=%M$OBJFILE,
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:29   
      196     7446                  FUN=CREATE,
      197     7447                  ASN=FILE,
      198     7448                  ORG=CONSEC);
      199     7557
      200     7558        %FPT_PFIL(FPTN=OBJ_POSITION, DCB=%M$OBJFILE, BOF=YES);
      201     7573
      202     7574
      203     7575    1   CALL M$OPEN( OPOBJOUT ) WHENALTRETURN
      204     7576    2     DO;
      205     7577    2       CALL Z9AE$ISSUE_SYSTEM_ERROR(B$TCB$->B$TCB.ALT$->B$ALT.ERR,ADDR(NIL));
      206     7578    2     END;
      207     7579
      208     7580    1   RETURN;
      209     7581        %EJECT;
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:30   
      210     7582
      211     7583        /*F*
      212     7584             NAME: Z9HF$OPEN_OBJ_INPUT
      213     7585             PURPOSE:
      214     7586                   Prepare the OBJ file for reading.
      215     7587             DESCRIPTION:
      216     7588                   Call M$OPEN to set up the OBJ file for reading.
      217     7589        */
      218     7590        /*D*
      219     7591             NAME: Z9HF$OPEN_OBJ_INPUT
      220     7592             CALL:
      221     7593                   CALL Z9HF$OPEN_OBJ_INPUT
      222     7594             DESCRIPTION:
      223     7595                   Call M$OPEN to prepare the OBJ file for reading.
      224     7596        */
      225     7597    1   Z9HF$OPEN_OBJ_INPUT:  ENTRY;
      226     7598
      227     7599    1   CALL M$PFIL(OBJ_POSITION)  WHENALTRETURN
      228     7600    2     DO;
      229     7601    2       CALL Z9AE$ISSUE_SYSTEM_ERROR(B$TCB$->B$TCB.ALT$->B$ALT.ERR,ADDR(NIL));
      230     7602    2     END;
      231     7603
      232     7604    1   RETURN;
      233     7605        %EJECT;
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:31   
      234     7606    1   Z9HF$CLOSE_OBJ:  ENTRY;
      235     7607
      236     7608
      237     7609
      238     7610    1   RETURN;
      239     7611    1   END;
      240     7612        %EOD;

PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:32   
--  Include file information  --

   B_ERRORS_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$OPEN_OBJ_OUTPUT.

   Procedure Z9HF$OPEN_OBJ_OUTPUT requires 43 words for executable code.
   Procedure Z9HF$OPEN_OBJ_OUTPUT requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:33   

 Object Unit name= Z9HF$OPEN_OBJ_OUTPUT                       File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 13:58:28.12 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$OBJFILE
    2  RoData even  UTS     58     72  Z9HF$OPEN_OBJ_OUTPUT
    3   Data  even  none     4      4  Z9HF$OPEN_OBJ_OUTPUT
    4   Proc  even  none    43     53  Z9HF$OPEN_OBJ_OUTPUT
    5  RoData even  none     2      2  Z9HF$OPEN_OBJ_OUTPUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        0  Z9HF$OPEN_OBJ_OUTPUT
     4     24                  yes      Std        0  Z9HF$OPEN_OBJ_INPUT
     4     50                  yes      Std        0  Z9HF$CLOSE_OBJ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 Z9AE$ISSUE_SYSTEM_ERROR
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:34   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                M$OBJFILE

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:35   


      159        1        /*T***********************************************************/
      160        2        /*T*                                                         */
      161        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      162        4        /*T*                                                         */
      163        5        /*T***********************************************************/
      164        6        Z9HF$OPEN_OBJ_OUTPUT:PROC;

      6  4 000000   000000 700200 xent  Z9HF$OPEN_O* TSX0  ! X66_AUTO_0
         4 000001   000010 000000                    ZERO    8,0

      165        7        /*F*
      166        8             NAME: Z9HF$OPEN_OBJ_OUTPUT
      167        9             PURPOSE:
      168       10                   Open the OBJ file for writing.  This must be called before
      169       11                   the first call to Z9HF$WRITE_OBJ_PAGE.
      170       12             DESCRIPTION:
      171       13                   Call M$OPEN to prepare the obj file for writing.
      172       14        */
      173       15        /*D*
      174       16             NAME: Z9HF$OPEN_OBJ_OUTPUT
      175       17             CALL:
      176       18                   CALL Z9HF$OPEN_OBJ_OUTPUT;
      177       19             DESCRIPTION:
      178       20                   Call M$OPEN to initialize the M$OBJFILE dcb and to
      179       21                   prepare the OBJ file for writing.  The OBJ file
      180       22                   will be called '*1'.
      181       23        */
      182       24
      183       25        %INCLUDE Z8A_SYS_FILE;
      184     6300        %INCLUDE B_ERRORS_C;
      185     7426
      186     7427        %B$TCB;
      187     7430        %B$ALT;
      188     7438    1   DCL B$TCB$        PTR  SYMREF;
      189     7439    1   DCL Z9AE$ISSUE_SYSTEM_ERROR   ENTRY(2);
      190     7440
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:36   
      191     7441    1   DCL M$OBJFILE DCB;
      192     7442
      193     7443        %FPT_OPEN(FPTN=OPOBJOUT,
      194     7444                  STCLASS=CONSTANT,
      195     7445                  DCB=%M$OBJFILE,
      196     7446                  FUN=CREATE,
      197     7447                  ASN=FILE,
      198     7448                  ORG=CONSEC);
      199     7557
      200     7558        %FPT_PFIL(FPTN=OBJ_POSITION, DCB=%M$OBJFILE, BOF=YES);
      201     7573
      202     7574
      203     7575    1   CALL M$OPEN( OPOBJOUT ) WHENALTRETURN

   7575  4 000002   000000 630400 2                  EPPR0   OPOBJOUT
         4 000003   450000 713400                    CLIMB   alt,open
         4 000004   410400 401760                    pmme    nvectors=18
         4 000005   000007 702000 4                  TSX2    s:7577
         4 000006   000023 710000 4                  TRA     s:7580

      204     7576    2     DO;

      205     7577    2       CALL Z9AE$ISSUE_SYSTEM_ERROR(B$TCB$->B$TCB.ALT$->B$ALT.ERR,ADDR(NIL));

   7577  4 000007   000000 470400 xsym               LDP0    B$TCB$
         4 000010   000000 471500                    LDP1    0,,PR0
         4 000011   000000 236000 5                  LDQ     0
         4 000012   200004 756100                    STQ     4,,AUTO
         4 000013   200004 633500                    EPPR3   4,,AUTO
         4 000014   200007 453500                    STP3    7,,AUTO
         4 000015   100102 634500                    EPPR4   66,,PR1
         4 000016   200006 454500                    STP4    6,,AUTO
         4 000017   200006 630500                    EPPR0   6,,AUTO
         4 000020   000001 631400 5                  EPPR1   1
         4 000021   000000 701000 xent               TSX1    Z9AE$ISSUE_SYSTEM_ERROR
         4 000022   000000 011000                    NOP     0

PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:37   
      206     7578    2     END;

      207     7579
      208     7580    1   RETURN;

   7580  4 000023   000000 702200 xent               TSX2  ! X66_ARET

      209     7581        %EJECT;
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:38   
      210     7582
      211     7583        /*F*
      212     7584             NAME: Z9HF$OPEN_OBJ_INPUT
      213     7585             PURPOSE:
      214     7586                   Prepare the OBJ file for reading.
      215     7587             DESCRIPTION:
      216     7588                   Call M$OPEN to set up the OBJ file for reading.
      217     7589        */
      218     7590        /*D*
      219     7591             NAME: Z9HF$OPEN_OBJ_INPUT
      220     7592             CALL:
      221     7593                   CALL Z9HF$OPEN_OBJ_INPUT
      222     7594             DESCRIPTION:
      223     7595                   Call M$OPEN to prepare the OBJ file for reading.
      224     7596        */
      225     7597    1   Z9HF$OPEN_OBJ_INPUT:  ENTRY;

   7597  4 000024   000000 700200 xent  Z9HF$OPEN_O* TSX0  ! X66_AUTO_0
         4 000025   000010 000000                    ZERO    8,0

      226     7598
      227     7599    1   CALL M$PFIL(OBJ_POSITION)  WHENALTRETURN

   7599  4 000026   000000 630400 3                  EPPR0   OBJ_POSITION
         4 000027   440004 713400                    CLIMB   alt,+16388
         4 000030   400000 401760                    pmme    nvectors=1
         4 000031   000033 702000 4                  TSX2    s:7601
         4 000032   000047 710000 4                  TRA     s:7604

      228     7600    2     DO;

      229     7601    2       CALL Z9AE$ISSUE_SYSTEM_ERROR(B$TCB$->B$TCB.ALT$->B$ALT.ERR,ADDR(NIL));

   7601  4 000033   000000 470400 xsym               LDP0    B$TCB$
         4 000034   000000 471500                    LDP1    0,,PR0
         4 000035   000000 236000 5                  LDQ     0
         4 000036   200004 756100                    STQ     4,,AUTO
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:39   
         4 000037   200004 633500                    EPPR3   4,,AUTO
         4 000040   200007 453500                    STP3    7,,AUTO
         4 000041   100102 634500                    EPPR4   66,,PR1
         4 000042   200006 454500                    STP4    6,,AUTO
         4 000043   200006 630500                    EPPR0   6,,AUTO
         4 000044   000001 631400 5                  EPPR1   1
         4 000045   000000 701000 xent               TSX1    Z9AE$ISSUE_SYSTEM_ERROR
         4 000046   000000 011000                    NOP     0

      230     7602    2     END;

      231     7603
      232     7604    1   RETURN;

   7604  4 000047   000000 702200 xent               TSX2  ! X66_ARET

      233     7605        %EJECT;
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:40   
      234     7606    1   Z9HF$CLOSE_OBJ:  ENTRY;

   7606  4 000050   000000 700200 xent  Z9HF$CLOSE_* TSX0  ! X66_AUTO_0
         4 000051   000010 000000                    ZERO    8,0

      235     7607
      236     7608
      237     7609
      238     7610    1   RETURN;

   7610  4 000052   000000 702200 xent               TSX2  ! X66_ARET
      239     7611    1   END;
      240     7612        %EOD;

PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:41   
--  Include file information  --

   B_ERRORS_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
      No diagnostics issued in procedure Z9HF$OPEN_OBJ_OUTPUT.
PL6.E3A0      #003=Z9HF$OPEN_OBJ_OUTPUT File=Z9HF.:Z8A6TSI                       SAT 08/09/97 13:58 Page:42   

 **** Variables and constants ****

  ****  Section 002 RoData Z9HF$OPEN_OBJ_OUTPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2088)  r     1 OPOBJOUT

  ****  Section 003  Data  Z9HF$OPEN_OBJ_OUTPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(144)   r     1 OBJ_POSITION

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0N  NULL        r     1 M$OBJFILE                  0-0-0N  NULL        r     1 M$UC


   Procedure Z9HF$OPEN_OBJ_OUTPUT requires 43 words for executable code.
   Procedure Z9HF$OPEN_OBJ_OUTPUT requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:43   
      241        1        /*T***********************************************************/
      242        2        /*T*                                                         */
      243        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      244        4        /*T*                                                         */
      245        5        /*T***********************************************************/
      246        6        Z9HF$OBJ_DUMP:PROC ALTRET;
      247        7        /*F*
      248        8             NAME: Z9HF$OBJ_DUMP
      249        9             PURPOSE:
      250       10                   This procedure is called when memory is exhausted to write
      251       11                   the existing obj table in memory out to a file, and to
      252       12                   free the memory used by the obj table.
      253       13             DESCRIPTION:
      254       14                   This procedure will step through the OBJ pages in
      255       15                   memory and write them out to the obj file, then
      256       16                   it will free all but one page of memory used by
      257       17                   the obj. The remaining page will be used as the
      258       18                   obj buffer.
      259       19        */
      260       20        /*D*
      261       21             NAME: Z9HF$OBJ_DUMP
      262       22             CALL:
      263       23                   CALL Z9HF$OBJ_DUMP;
      264       24             DESCRIPTION:
      265       25                   This procedure will call Z9HF$OPEN_OBJ_OUTPUT, then
      266       26                   step through the obj file and write each page out to
      267       27                   the OBJ file. It will then Call Z9HF$FREE_OBJ to return
      268       28                   all but one page of the memory used by the OBJ table.
      269       29                   The remaining one page will be used as a buffer for
      270       30                   obj paging.
      271       31        */
      272       32
      273       33
      274       34        %EQU PHASE = 0;
      275       35        %INCLUDE Z8A_DEFC;
      276      103        %INCLUDE Z8A_SUPP_MAC;
      277     2503        %INCLUDE Z8A_OBJ;
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:44   
      278     3000
      279     3001
      280     3002
      281     3003    1   DCL PAGE$ PTR;
      282     3004    1   DCL NEXT_PAGE$ PTR;
      283     3005
      284     3006
      285     3007    1   IF PAGING_OBJ OR (OBJ_.SIZE <= 1) THEN
      286     3008    1     ALTRETURN;
      287     3009
      288     3010
      289     3011    1   CALL Z9HF$OPEN_OBJ_OUTPUT;
      290     3012
      291     3013    1   PAGE$ = OBJ_.TOP;
      292     3014
      293     3015    2   DO WHILE PAGE$ ~= ADDR(NIL);
      294     3016    2       CALL Z9HF$WRITE_OBJ_PAGE(PAGE$);
      295     3017    2       PAGE$ = PAGE$ -> PAGE.NEXT;
      296     3018    2   END;
      297     3019
      298     3020    1   CALL Z9HF$FREE_OBJ;
      299     3021
      300     3022    1   PAGING_OBJ = TRUE;
      301     3023
      302     3024
      303     3025    1   END;
      304     3026        %EOD;

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:45   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$OBJ_DUMP.

   Procedure Z9HF$OBJ_DUMP requires 31 words for executable code.
   Procedure Z9HF$OBJ_DUMP requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:46   

 Object Unit name= Z9HF$OBJ_DUMP                              File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 13:59:16.60 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  OBJ$
    2  LblCom even  none     1      1  PAGING_OBJ
    3  LblCom even  none     1      1  OBJ_PAGE_COUNT
    4  LblCom even  none     1      1  OBJ_FINISHED
    5  LblCom even  none     1      1  OBJ_SEG_SIZE
    6  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    7  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    8  LblCom even  none     5      5  OBJ_
    9   Proc  even  none    31     37  Z9HF$OBJ_DUMP
   10  RoData even  none     3      3  Z9HF$OBJ_DUMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     9      0   yes    yes     yes      Std        0  Z9HF$OBJ_DUMP
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:47   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 Z9HF$OPEN_OBJ_OUTPUT
         yes           Std       1 Z9HF$WRITE_OBJ_PAGE
         yes           Std       0 Z9HF$FREE_OBJ
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    OBJ_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:48   


      241        1        /*T***********************************************************/
      242        2        /*T*                                                         */
      243        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      244        4        /*T*                                                         */
      245        5        /*T***********************************************************/
      246        6        Z9HF$OBJ_DUMP:PROC ALTRET;

      6  9 000000   000000 700200 xent  Z9HF$OBJ_DU* TSX0  ! X66_AUTO_0
         9 000001   000010 000000                    ZERO    8,0

      247        7        /*F*
      248        8             NAME: Z9HF$OBJ_DUMP
      249        9             PURPOSE:
      250       10                   This procedure is called when memory is exhausted to write
      251       11                   the existing obj table in memory out to a file, and to
      252       12                   free the memory used by the obj table.
      253       13             DESCRIPTION:
      254       14                   This procedure will step through the OBJ pages in
      255       15                   memory and write them out to the obj file, then
      256       16                   it will free all but one page of memory used by
      257       17                   the obj. The remaining page will be used as the
      258       18                   obj buffer.
      259       19        */
      260       20        /*D*
      261       21             NAME: Z9HF$OBJ_DUMP
      262       22             CALL:
      263       23                   CALL Z9HF$OBJ_DUMP;
      264       24             DESCRIPTION:
      265       25                   This procedure will call Z9HF$OPEN_OBJ_OUTPUT, then
      266       26                   step through the obj file and write each page out to
      267       27                   the OBJ file. It will then Call Z9HF$FREE_OBJ to return
      268       28                   all but one page of the memory used by the OBJ table.
      269       29                   The remaining one page will be used as a buffer for
      270       30                   obj paging.
      271       31        */
      272       32
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:49   
      273       33
      274       34        %EQU PHASE = 0;
      275       35        %INCLUDE Z8A_DEFC;
      276      103        %INCLUDE Z8A_SUPP_MAC;
      277     2503        %INCLUDE Z8A_OBJ;
      278     3000
      279     3001
      280     3002
      281     3003    1   DCL PAGE$ PTR;
      282     3004    1   DCL NEXT_PAGE$ PTR;
      283     3005
      284     3006
      285     3007    1   IF PAGING_OBJ OR (OBJ_.SIZE <= 1) THEN

   3007  9 000002   000000 234000 2                  SZN     PAGING_OBJ
         9 000003   000007 604000 9                  TMI     s:3008
         9 000004   000004 235000 8                  LDA     OBJ_+4
         9 000005   000001 115007                    CMPA    1,DL
         9 000006   000010 605400 9                  TPNZ    s:3011

      286     3008    1     ALTRETURN;

   3008  9 000007   000000 702200 xent               TSX2  ! X66_AALT

      287     3009
      288     3010
      289     3011    1   CALL Z9HF$OPEN_OBJ_OUTPUT;

   3011  9 000010   000000 631400 10                 EPPR1   0
         9 000011   000000 701000 xent               TSX1    Z9HF$OPEN_OBJ_OUTPUT
         9 000012   000000 011000                    NOP     0

      290     3012
      291     3013    1   PAGE$ = OBJ_.TOP;

   3013  9 000013   000000 236000 8                  LDQ     OBJ_
         9 000014   200003 756100                    STQ     PAGE$,,AUTO
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:50   

      292     3014
      293     3015    2   DO WHILE PAGE$ ~= ADDR(NIL);

   3015  9 000015   000027 710000 9                  TRA     s:3018

      294     3016    2       CALL Z9HF$WRITE_OBJ_PAGE(PAGE$);

   3016  9 000016   200003 630500                    EPPR0   PAGE$,,AUTO
         9 000017   200006 450500                    STP0    NEXT_PAGE$+2,,AUTO
         9 000020   200006 630500                    EPPR0   NEXT_PAGE$+2,,AUTO
         9 000021   000001 631400 10                 EPPR1   1
         9 000022   000000 701000 xent               TSX1    Z9HF$WRITE_OBJ_PAGE
         9 000023   000000 011000                    NOP     0

      295     3017    2       PAGE$ = PAGE$ -> PAGE.NEXT;

   3017  9 000024   200003 470500                    LDP0    PAGE$,,AUTO
         9 000025   001777 236100                    LDQ     1023,,PR0
         9 000026   200003 756100                    STQ     PAGE$,,AUTO

      296     3018    2   END;

   3018  9 000027   000002 116000 10                 CMPQ    2
         9 000030   000016 601000 9                  TNZ     s:3016

      297     3019
      298     3020    1   CALL Z9HF$FREE_OBJ;

   3020  9 000031   000000 631400 10                 EPPR1   0
         9 000032   000000 701000 xent               TSX1    Z9HF$FREE_OBJ
         9 000033   000000 011000                    NOP     0

      299     3021
      300     3022    1   PAGING_OBJ = TRUE;

   3022  9 000034   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:51   
         9 000035   000000 756000 2                  STQ     PAGING_OBJ

      301     3023
      302     3024
      303     3025    1   END;

   3025  9 000036   000000 702200 xent               TSX2  ! X66_ARET
      304     3026        %EOD;

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:52   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$OBJ_DUMP.
PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:53   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 002 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT         r     1 PAGING_OBJ

  ****  Section 003 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 004 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:54   
  ****  Section 005 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_SEG_SIZE

  ****  Section 006 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_TOP_NEW_SEG

  ****  Section 007 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 OBJ_LAST_REGULAR_PAGE

  ****  Section 008 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR               1 NEXT_PAGE$                 3-0-0/w PTR         r     1 PAGE$

  ****  SYMREF variables  ****

PL6.E3A0      #004=Z9HF$OBJ_DUMP File=Z9HF.:Z8A6TSI                              SAT 08/09/97 13:59 Page:55   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC              1 OBJ                        0-0-0/w STRC(72)          1 OBJ_LAB
     0-0-0/w STRC(108)         1 OBJ_LINE                   0-0-0/w STRC(72)          1 OBJ_ORG
     0-0-0/w STRC(72)          1 OBJ_SCOPE                  0-0-0/w STRC(144)         1 OBJ_WORD
     0-0-0/w STRC(36864) r     1 PAGE


   Procedure Z9HF$OBJ_DUMP requires 31 words for executable code.
   Procedure Z9HF$OBJ_DUMP requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:56   
      305        1        /*T***********************************************************/
      306        2        /*T*                                                         */
      307        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      308        4        /*T*                                                         */
      309        5        /*T***********************************************************/
      310        6        Z9HF$GET_OBJ_PAGE: PROC ;
      311        7        /*F*
      312        8             NAME: Z9HF$GET_OBJ_PAGE
      313        9             PURPOSE:
      314       10                   Obtain a new page for the obj table.
      315       11             DESCRIPTION:
      316       12                   Get a new OBJ page. The new page may come from the
      317       13                   free space list for the obj, or we may have to call
      318       14                   the operating system to expand the obj segment. If
      319       15                   in paging mode then all we have to do is initialize
      320       16                   the page buffer pointed to by OBJ_.FIRST.
      321       17        */
      322       18        /*D*
      323       19             NAME: Z9HF$GET_OBJ_PAGE
      324       20             CALL:
      325       21                   CALL Z9HF$GET_OBJ_PAGE;
      326       22             DESCRIPTION:
      327       23                   The idea here is to set up the OBJ_ structure so
      328       24                   that it looks like we have a fresh page. If there
      329       25                   are no pages in the free page list (pointed to
      330       26                   by FREE_OBJ_PAGES) then we have to call the
      331       27                   system for more memory in the OBJ SEGMENT. If
      332       28                   we are in paging mode then all that needs to be
      333       29                   done is to initialize the OBJ_ structure to
      334       30                   look like we have a new page; it will really be
      335       31                   pointing to the page buffer. If the call to the
      336       32                   system for more memory fails then we will call
      337       33                   Z9HF$OBJ_DUMP to put us in the paging mode.
      338       34        */
      339       35
      340       36        %EQU PHASE = 0;
      341       37        %INCLUDE Z8A_DEFC;
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:57   
      342      105        %INCLUDE Z8A_SUPP_MAC;
      343     2505        %INCLUDE Z8A_COMCOM;
      344     3155        %INCLUDE Z8A_SYS_FILE;
      345     9430        %SET INCLUDE_ENT_DEFS = FALSE;
      346     9431        %INCLUDE Z8A_OBJ;
      347     9928
      348     9929    1   DCL PTR$ PTR;
      349     9930    1   DCL FREE$ PTR;
      350     9931    1   DCL NEXT$ PTR;
      351     9932    1   DCL FREE_OBJ_PAGES PTR STATIC INIT(ADDR(NIL)); /* Points to a list of
      352     9933                                           free OBJ pages */
      353     9934    1   DCL I SBIN WORD;
      354     9935
      355     9936    1   DCL Z8AR$RESERVER ENTRY (1);
      356     9937    1   DCL Z9AT$TERMINATOR ENTRY;
      357     9938    1   DCL Z9AL$WRITE_TERMINAL ENTRY;
      358     9939    1   DCL Z9HF$OBJ_DUMP ENTRY ALTRET;
      359     9940    1   DCL Z9HF$OPEN_OBJ_OUTPUT ENTRY;
      360     9941    1   DCL OBUF CHAR(120) EXT;
      361     9942
      362     9943    1   DCL 1 CLEAR DALIGNED BASED,
      363     9944    1         2 PAGE(0:%(PAGE_SIZE - 1)) BIT(36) UNAL;
      364     9945
      365     9946
      366     9947        %FPT_GDS(RESULTS=OBJ_VECT,FREE=YES,SEGSIZE=%BLOCK_SIZE);
      367     9963        %VLR_GDS(FPTN=OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      368     9991        %VLR_GDS(FPTN=PREV_OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      369    10019
      370    10020
      371    10021    1   IF COMCOM.OB.VIRTUAL THEN
      372    10022    2     DO;
      373    10023    2       CALL Z8AR$RESERVER (ADDR(OBJ_));
      374    10024    2       RETURN;
      375    10025    2     END;
      376    10026
      377    10027    1   OBJ_.SIZE = OBJ_.SIZE + 1;
      378    10028
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:58   
      379    10029    1   IF PAGING_OBJ THEN
      380    10030    1     PTR$ = OBJ_.FIRST;
      381    10031    1   ELSE
      382    10032    2     DO;
      383    10033                 /* If we're not paging the OBJ, i.e writing it out to a
      384    10034                    file, obtain a page to be added to list of OBJ pages.
      385    10035                    If we haven't already obtained a new OBJ segment, try
      386    10036                    to get the page from the common free page list.  We
      387    10037                    don't want to mix pages from two segments, but it's
      388    10038                    ok for the OBJ to start with pages from one segment,
      389    10039                    and to end with pages from another.  If no common free
      390    10040                    pages, then get pages from a new OBJ segment.  This
      391    10041                    segment can then be returned to the system if we
      392    10042                    go into a paging mode.
      393    10043                  */
      394    10044    2       IF (COMCOM.FREE$ ~= ADDR(NIL)) AND (OBJ_TOP_NEW_SEG = ADDR(NIL)) THEN
      395    10045    3         DO;
      396    10046    3           PTR$ = COMCOM.FREE$;
      397    10047
      398    10048    3           COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;
      399    10049    3           PTR$ -> CLEAR.PAGE = '0'B;
      400    10050
      401    10051    3           IF OBJ_.TOP = ADDR(NIL) THEN
      402    10052    3             OBJ_.TOP = PTR$;
      403    10053    3           ELSE
      404    10054    4             DO;
      405    10055    4               OBJ_.FIRST -> PAGE.NEXT = PTR$;
      406    10056    4               PINCRW(OBJ_.FIRST, OBJ_.BOTTOM) -> CONT.NEXT = PTR$;
      407    10057    4             END;
      408    10058    3         END;
      409    10059    2       ELSE IF FREE_OBJ_PAGES ~= ADDR(NIL) THEN
      410    10060    3         DO;
      411    10061    3           PTR$ = FREE_OBJ_PAGES;
      412    10062    3           FREE_OBJ_PAGES = FREE_OBJ_PAGES -> PAGE.NEXT;
      413    10063    3           OBJ_.FIRST -> PAGE.NEXT = PTR$;
      414    10064    3           PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;
      415    10065    3         END;
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:59   
      416    10066    2       ELSE
      417    10067    3         DO;
      418    10068    3          CALL M$GDS(FPT_GDS)
      419    10069    4             WHENRETURN DO;
      420    10070    4               OBJ_SEG_SIZE = OBJ_SEG_SIZE + %PAGES_PER_BLOCK;
      421    10071
      422    10072    4               COMCOM.IL_SPACE(0) = COMCOM.IL_SPACE(0) + %BLOCK_SIZE;
      423    10073
      424    10074    4               IF OBJ_SEG_SIZE = %PAGES_PER_BLOCK THEN
      425    10075    5                 DO;
      426    10076    5                   PTR$ = OBJ_VECT.VECT.PTR$;
      427    10077    5                   OBJ_TOP_NEW_SEG = PTR$;
      428    10078    5                   OBJ_LAST_REGULAR_PAGE = OBJ_.FIRST;
      429    10079
      430    10080    5                   IF OBJ_.TOP = ADDR(NIL) THEN
      431    10081    5                     OBJ_.TOP = PTR$;
      432    10082    6                   ELSE DO ;
      433    10083    6                     PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;
      434    10084    6                     OBJ_.FIRST -> PAGE.NEXT = PTR$ ;
      435    10085    6                   END ;
      436    10086    5                 END;
      437    10087    4               ELSE
      438    10088    5                 DO;
      439    10089    5                   PTR$ = PINCRC (PREV_OBJ_VECT.VECT.PTR$,
      440    10090    5                                  PREV_OBJ_VECT.VECT.W1.VSIZE# + 1);
      441    10091    5                   PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;
      442    10092    5                   OBJ_.FIRST -> PAGE.NEXT = PTR$ ;
      443    10093    5                 END;
      444    10094
      445    10095                    /* Add the new pages to the free list */
      446    10096    4               FREE$ = PINCRW (PTR$, %PAGE_SIZE);
      447    10097    4               FREE_OBJ_PAGES = FREE$;
      448    10098
      449    10099    5               DO I = 1 TO %(PAGES_PER_BLOCK - 2);
      450    10100    5                 NEXT$ = PINCRW (FREE$, %PAGE_SIZE);
      451    10101    5                 FREE$ -> PAGE.NEXT = NEXT$;
      452    10102    5                 FREE$ = NEXT$;
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:60   
      453    10103    5               END;
      454    10104
      455    10105    4               FREE$ -> PAGE.NEXT = ADDR(NIL);
      456    10106
      457    10107    4               PREV_OBJ_VECT.VECT = OBJ_VECT.VECT;
      458    10108    4             END;
      459    10109
      460    10110    4             WHENALTRETURN DO;
      461    10111    5               IF OBJ_SEG_SIZE = 0 THEN DO;
      462    10112                      /* This case has occurred in GCOS. In CP-6 it is very
      463    10113                         unlikely but it CAN happen. */
      464    10114    6                 IF OBJ_.TOP = ADDR (NIL) THEN DO;
      465    10115    6                   CALL Z9HF$OPEN_OBJ_OUTPUT;
      466    10116    6                   PAGING_OBJ = TRUE;
      467    10117    6                 END;
      468    10118    5                 ELSE
      469    10119    5                   OBJ_LAST_REGULAR_PAGE = OBJ_.FIRST;
      470    10120                      /*
      471    10121                      OBJ_VECT.LOGSIZE# = %PAGE_SIZE;
      472    10122                      OBJ_VECT.REALSIZE# = %PAGE_SIZE;
      473    10123                      */   /* Above statements needed only in GCOS version */
      474    10124    5                 FPT_GDS.V.SEGSIZE# = %PAGE_SIZE;
      475    10125                      /* First request for OBJ space has been denied. Try getting
      476    10126                         only 1K; hopefully at least that is available. */
      477    10127                      /* FPT_GDS.V.WIRE# = TRUE; */ /* In GCOS, wire it */
      478    10128    5                 CALL M$GDS (FPT_GDS) ALTRET (NO_OBJ_TABLE);
      479    10129    5                 OBJ_SEG_SIZE = 1;
      480    10130    5                 COMCOM.IL_SPACE (0) = COMCOM.IL_SPACE (0) + 1;
      481    10131    5                 PTR$ = OBJ_VECT.VECT.PTR$;
      482    10132    5                 OBJ_TOP_NEW_SEG = PTR$;
      483    10133
      484    10134    5                 IF OBJ_.TOP = ADDR (NIL) THEN
      485    10135    5                   OBJ_.TOP = PTR$;
      486    10136    5                 ELSE
      487    10137    5                   CALL Z9HF$OBJ_DUMP ALTRET (NO_OBJ_TABLE);
      488    10138    5               END;
      489    10139    5               ELSE DO;
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:61   
      490    10140    5                 CALL Z9HF$OBJ_DUMP ALTRET(NO_OBJ_TABLE);
      491    10141    5                 PTR$ = OBJ_.FIRST;
      492    10142    5               END;
      493    10143    4             END;
      494    10144    3         END;
      495    10145    2     END;
      496    10146
      497    10147
      498    10148
      499    10149
      500    10150    1   OBJ_.FIRST = PTR$;
      501    10151    1   PTR$ -> CLEAR.PAGE = '0'B;
      502    10152    1   PTR$ -> PAGE.NEXT = ADDR(NIL);
      503    10153    1   OBJ_.BOTTOM = 0;
      504    10154    1   OBJ_.FLOOR = %(PAGE_SIZE - 1);
      505    10155
      506    10156    1   RETURN;
      507    10157
      508    10158    1   NO_OBJ_TABLE:
      509    10159    1     OBUF = 'Not enough memory to compile; up MEM or use VIRTUAL opt.';
      510    10160    1     CALL Z9AL$WRITE_TERMINAL;
      511    10161    1     CALL M$ERR;
      512    10162    1     RETURN;
      513    10163
      514    10164    1   END Z9HF$GET_OBJ_PAGE;
      515    10165        %EOD;

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:62   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$GET_OBJ_PAGE.

   Procedure Z9HF$GET_OBJ_PAGE requires 183 words for executable code.
   Procedure Z9HF$GET_OBJ_PAGE requires 10 words of local(AUTO) storage.

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:63   

 Object Unit name= Z9HF$GET_OBJ_PAGE                          File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 13:59:33.92 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1   DCB   even  none     0      0  M$UC
    2  LblCom even  none     1      1  OBJ$
    3  LblCom even  none     1      1  PAGING_OBJ
    4  LblCom even  none     1      1  OBJ_PAGE_COUNT
    5  LblCom even  none     1      1  OBJ_FINISHED
    6  LblCom even  none     1      1  OBJ_SEG_SIZE
    7  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    8  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    9  LblCom even  none     5      5  OBJ_
   10   Data  even  none    16     20  Z9HF$GET_OBJ_PAGE
   11  LblCom even  none    30     36  OBUF
   12  RoData even  UTS     14     16  Z9HF$GET_OBJ_PAGE
   13   Proc  even  none   183    267  Z9HF$GET_OBJ_PAGE
   14  RoData even  none     4      4  Z9HF$GET_OBJ_PAGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        0  Z9HF$GET_OBJ_PAGE
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:64   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8AR$RESERVER
         yes           Std       0 Z9HF$OPEN_OBJ_OUTPUT
 yes     yes           Std       0 Z9HF$OBJ_DUMP
         yes           Std       0 Z9AL$WRITE_TERMINAL
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                                M$UC                             r    OBJ_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:65   


      305        1        /*T***********************************************************/
      306        2        /*T*                                                         */
      307        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      308        4        /*T*                                                         */
      309        5        /*T***********************************************************/
      310        6        Z9HF$GET_OBJ_PAGE: PROC ;

      6 13 000000   000000 700200 xent  Z9HF$GET_OB* TSX0  ! X66_AUTO_0
        13 000001   000012 000000                    ZERO    10,0

      311        7        /*F*
      312        8             NAME: Z9HF$GET_OBJ_PAGE
      313        9             PURPOSE:
      314       10                   Obtain a new page for the obj table.
      315       11             DESCRIPTION:
      316       12                   Get a new OBJ page. The new page may come from the
      317       13                   free space list for the obj, or we may have to call
      318       14                   the operating system to expand the obj segment. If
      319       15                   in paging mode then all we have to do is initialize
      320       16                   the page buffer pointed to by OBJ_.FIRST.
      321       17        */
      322       18        /*D*
      323       19             NAME: Z9HF$GET_OBJ_PAGE
      324       20             CALL:
      325       21                   CALL Z9HF$GET_OBJ_PAGE;
      326       22             DESCRIPTION:
      327       23                   The idea here is to set up the OBJ_ structure so
      328       24                   that it looks like we have a fresh page. If there
      329       25                   are no pages in the free page list (pointed to
      330       26                   by FREE_OBJ_PAGES) then we have to call the
      331       27                   system for more memory in the OBJ SEGMENT. If
      332       28                   we are in paging mode then all that needs to be
      333       29                   done is to initialize the OBJ_ structure to
      334       30                   look like we have a new page; it will really be
      335       31                   pointing to the page buffer. If the call to the
      336       32                   system for more memory fails then we will call
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:66   
      337       33                   Z9HF$OBJ_DUMP to put us in the paging mode.
      338       34        */
      339       35
      340       36        %EQU PHASE = 0;
      341       37        %INCLUDE Z8A_DEFC;
      342      105        %INCLUDE Z8A_SUPP_MAC;
      343     2505        %INCLUDE Z8A_COMCOM;
      344     3155        %INCLUDE Z8A_SYS_FILE;
      345     9430        %SET INCLUDE_ENT_DEFS = FALSE;
      346     9431        %INCLUDE Z8A_OBJ;
      347     9928
      348     9929    1   DCL PTR$ PTR;
      349     9930    1   DCL FREE$ PTR;
      350     9931    1   DCL NEXT$ PTR;
      351     9932    1   DCL FREE_OBJ_PAGES PTR STATIC INIT(ADDR(NIL)); /* Points to a list of
      352     9933                                           free OBJ pages */
      353     9934    1   DCL I SBIN WORD;
      354     9935
      355     9936    1   DCL Z8AR$RESERVER ENTRY (1);
      356     9937    1   DCL Z9AT$TERMINATOR ENTRY;
      357     9938    1   DCL Z9AL$WRITE_TERMINAL ENTRY;
      358     9939    1   DCL Z9HF$OBJ_DUMP ENTRY ALTRET;
      359     9940    1   DCL Z9HF$OPEN_OBJ_OUTPUT ENTRY;
      360     9941    1   DCL OBUF CHAR(120) EXT;
      361     9942
      362     9943    1   DCL 1 CLEAR DALIGNED BASED,
      363     9944    1         2 PAGE(0:%(PAGE_SIZE - 1)) BIT(36) UNAL;
      364     9945
      365     9946
      366     9947        %FPT_GDS(RESULTS=OBJ_VECT,FREE=YES,SEGSIZE=%BLOCK_SIZE);
      367     9963        %VLR_GDS(FPTN=OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      368     9991        %VLR_GDS(FPTN=PREV_OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      369    10019
      370    10020
      371    10021    1   IF COMCOM.OB.VIRTUAL THEN

  10021 13 000002   000110 234000 xsym               SZN     COMCOM+72
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:67   
        13 000003   000015 605000 13                 TPL     s:10027

      372    10022    2     DO;

      373    10023    2       CALL Z8AR$RESERVER (ADDR(OBJ_));

  10023 13 000004   000001 236000 14                 LDQ     1
        13 000005   200010 756100                    STQ     I+2,,AUTO
        13 000006   200010 630500                    EPPR0   I+2,,AUTO
        13 000007   200011 450500                    STP0    I+3,,AUTO
        13 000010   200011 630500                    EPPR0   I+3,,AUTO
        13 000011   000000 631400 14                 EPPR1   0
        13 000012   000000 701000 xent               TSX1    Z8AR$RESERVER
        13 000013   000000 011000                    NOP     0

      374    10024    2       RETURN;

  10024 13 000014   000000 702200 xent               TSX2  ! X66_ARET

      375    10025    2     END;
      376    10026
      377    10027    1   OBJ_.SIZE = OBJ_.SIZE + 1;

  10027 13 000015   000004 054000 9                  AOS     OBJ_+4

      378    10028
      379    10029    1   IF PAGING_OBJ THEN

  10029 13 000016   000000 234000 3                  SZN     PAGING_OBJ
        13 000017   000023 605000 13                 TPL     s:10044

      380    10030    1     PTR$ = OBJ_.FIRST;

  10030 13 000020   000001 236000 9                  LDQ     OBJ_+1
        13 000021   200003 756100                    STQ     PTR$,,AUTO
        13 000022   000241 710000 13                 TRA     s:10150

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:68   
      381    10031    1   ELSE
      382    10032    2     DO;

      383    10033                 /* If we're not paging the OBJ, i.e writing it out to a
      384    10034                    file, obtain a page to be added to list of OBJ pages.
      385    10035                    If we haven't already obtained a new OBJ segment, try
      386    10036                    to get the page from the common free page list.  We
      387    10037                    don't want to mix pages from two segments, but it's
      388    10038                    ok for the OBJ to start with pages from one segment,
      389    10039                    and to end with pages from another.  If no common free
      390    10040                    pages, then get pages from a new OBJ segment.  This
      391    10041                    segment can then be returned to the system if we
      392    10042                    go into a paging mode.
      393    10043                  */
      394    10044    2       IF (COMCOM.FREE$ ~= ADDR(NIL)) AND (OBJ_TOP_NEW_SEG = ADDR(NIL)) THEN

  10044 13 000023   000425 236000 xsym               LDQ     COMCOM+277
        13 000024   000002 116000 14                 CMPQ    2
        13 000025   000057 600000 13                 TZE     s:10059
        13 000026   000000 236000 7                  LDQ     OBJ_TOP_NEW_SEG
        13 000027   000002 116000 14                 CMPQ    2
        13 000030   000057 601000 13                 TNZ     s:10059

      395    10045    3         DO;

      396    10046    3           PTR$ = COMCOM.FREE$;

  10046 13 000031   000425 236000 xsym               LDQ     COMCOM+277
        13 000032   200003 756100                    STQ     PTR$,,AUTO

      397    10047
      398    10048    3           COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;

  10048 13 000033   000425 470400 xsym               LDP0    COMCOM+277
        13 000034   001777 236100                    LDQ     1023,,PR0
        13 000035   000425 756000 xsym               STQ     COMCOM+277

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:69   
      399    10049    3           PTR$ -> CLEAR.PAGE = '0'B;

  10049 13 000036   200003 470500                    LDP0    PTR$,,AUTO
        13 000037   010000 220003                    LDX0    4096,DU
        13 000040   000140 100400                    MLR     fill='000'O
        13 000041   000003 000001 14                 ADSC9   3                        cn=0,n=1
        13 000042   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      400    10050
      401    10051    3           IF OBJ_.TOP = ADDR(NIL) THEN

  10051 13 000043   000000 236000 9                  LDQ     OBJ_
        13 000044   000002 116000 14                 CMPQ    2
        13 000045   000051 601000 13                 TNZ     s:10055

      402    10052    3             OBJ_.TOP = PTR$;

  10052 13 000046   200003 236100                    LDQ     PTR$,,AUTO
        13 000047   000000 756000 9                  STQ     OBJ_
        13 000050   000241 710000 13                 TRA     s:10150

      403    10053    3           ELSE
      404    10054    4             DO;

      405    10055    4               OBJ_.FIRST -> PAGE.NEXT = PTR$;

  10055 13 000051   200003 236100                    LDQ     PTR$,,AUTO
        13 000052   000001 471400 9                  LDP1    OBJ_+1
        13 000053   101777 756100                    STQ     1023,,PR1

      406    10056    4               PINCRW(OBJ_.FIRST, OBJ_.BOTTOM) -> CONT.NEXT = PTR$;

  10056 13 000054   000002 721000 9                  LXL1    OBJ_+2
        13 000055   100001 756111                    STQ     1,X1,PR1

      407    10057    4             END;

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:70   
      408    10058    3         END;

  10058 13 000056   000241 710000 13                 TRA     s:10150

      409    10059    2       ELSE IF FREE_OBJ_PAGES ~= ADDR(NIL) THEN

  10059 13 000057   000000 236000 10                 LDQ     FREE_OBJ_PAGES
        13 000060   000002 116000 14                 CMPQ    2
        13 000061   000074 600000 13                 TZE     s:10068

      410    10060    3         DO;

      411    10061    3           PTR$ = FREE_OBJ_PAGES;

  10061 13 000062   200003 756100                    STQ     PTR$,,AUTO

      412    10062    3           FREE_OBJ_PAGES = FREE_OBJ_PAGES -> PAGE.NEXT;

  10062 13 000063   000000 470400 10                 LDP0    FREE_OBJ_PAGES
        13 000064   001777 236100                    LDQ     1023,,PR0
        13 000065   000000 756000 10                 STQ     FREE_OBJ_PAGES

      413    10063    3           OBJ_.FIRST -> PAGE.NEXT = PTR$;

  10063 13 000066   200003 236100                    LDQ     PTR$,,AUTO
        13 000067   000001 470400 9                  LDP0    OBJ_+1
        13 000070   001777 756100                    STQ     1023,,PR0

      414    10064    3           PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;

  10064 13 000071   000002 720000 9                  LXL0    OBJ_+2
        13 000072   000001 756110                    STQ     1,X0,PR0

      415    10065    3         END;

  10065 13 000073   000241 710000 13                 TRA     s:10150

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:71   
      416    10066    2       ELSE
      417    10067    3         DO;

      418    10068    3          CALL M$GDS(FPT_GDS)

  10068 13 000074   000002 630400 10                 EPPR0   FPT_GDS
        13 000075   430001 713400                    CLIMB   alt,gds
        13 000076   400400 401760                    pmme    nvectors=2
        13 000077   000171 702000 13                 TSX2    s:10111

      419    10069    4             WHENRETURN DO;

      420    10070    4               OBJ_SEG_SIZE = OBJ_SEG_SIZE + %PAGES_PER_BLOCK;

  10070 13 000100   000010 236007                    LDQ     8,DL
        13 000101   000000 056000 6                  ASQ     OBJ_SEG_SIZE

      421    10071
      422    10072    4               COMCOM.IL_SPACE(0) = COMCOM.IL_SPACE(0) + %BLOCK_SIZE;

  10072 13 000102   020000 236007                    LDQ     8192,DL
        13 000103   000324 056000 xsym               ASQ     COMCOM+212

      423    10073
      424    10074    4               IF OBJ_SEG_SIZE = %PAGES_PER_BLOCK THEN

  10074 13 000104   000000 235000 6                  LDA     OBJ_SEG_SIZE
        13 000105   000010 115007                    CMPA    8,DL
        13 000106   000131 601000 13                 TNZ     s:10089

      425    10075    5                 DO;

      426    10076    5                   PTR$ = OBJ_VECT.VECT.PTR$;

  10076 13 000107   000011 236000 10                 LDQ     OBJ_VECT+1
        13 000110   200003 756100                    STQ     PTR$,,AUTO

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:72   
      427    10077    5                   OBJ_TOP_NEW_SEG = PTR$;

  10077 13 000111   000000 756000 7                  STQ     OBJ_TOP_NEW_SEG

      428    10078    5                   OBJ_LAST_REGULAR_PAGE = OBJ_.FIRST;

  10078 13 000112   000001 236000 9                  LDQ     OBJ_+1
        13 000113   000000 756000 8                  STQ     OBJ_LAST_REGULAR_PAGE

      429    10079
      430    10080    5                   IF OBJ_.TOP = ADDR(NIL) THEN

  10080 13 000114   000000 236000 9                  LDQ     OBJ_
        13 000115   000002 116000 14                 CMPQ    2
        13 000116   000122 601000 13                 TNZ     s:10083

      431    10081    5                     OBJ_.TOP = PTR$;

  10081 13 000117   200003 236100                    LDQ     PTR$,,AUTO
        13 000120   000000 756000 9                  STQ     OBJ_
        13 000121   000144 710000 13                 TRA     s:10096

      432    10082    6                   ELSE DO ;

      433    10083    6                     PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;

  10083 13 000122   200003 236100                    LDQ     PTR$,,AUTO
        13 000123   000001 470400 9                  LDP0    OBJ_+1
        13 000124   000002 720000 9                  LXL0    OBJ_+2
        13 000125   000001 756110                    STQ     1,X0,PR0

      434    10084    6                     OBJ_.FIRST -> PAGE.NEXT = PTR$ ;

  10084 13 000126   000001 470400 9                  LDP0    OBJ_+1
        13 000127   001777 756100                    STQ     1023,,PR0

      435    10085    6                   END ;
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:73   

      436    10086    5                 END;

  10086 13 000130   000144 710000 13                 TRA     s:10096

      437    10087    4               ELSE
      438    10088    5                 DO;

      439    10089    5                   PTR$ = PINCRC (PREV_OBJ_VECT.VECT.PTR$,

  10089 13 000131   000014 236000 10                 LDQ     PREV_OBJ_VECT
        13 000132   000020 772000                    QRL     16
        13 000133   000020 736000                    QLS     16
        13 000134   200000 036007                    ADLQ    65536,DL
        13 000135   000015 036000 10                 ADLQ    PREV_OBJ_VECT+1
        13 000136   200003 756100                    STQ     PTR$,,AUTO

      440    10090    5                                  PREV_OBJ_VECT.VECT.W1.VSIZE# + 1);
      441    10091    5                   PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) -> CONT.NEXT = PTR$;

  10091 13 000137   000001 470400 9                  LDP0    OBJ_+1
        13 000140   000002 720000 9                  LXL0    OBJ_+2
        13 000141   000001 756110                    STQ     1,X0,PR0

      442    10092    5                   OBJ_.FIRST -> PAGE.NEXT = PTR$ ;

  10092 13 000142   000001 470400 9                  LDP0    OBJ_+1
        13 000143   001777 756100                    STQ     1023,,PR0

      443    10093    5                 END;

      444    10094
      445    10095                    /* Add the new pages to the free list */
      446    10096    4               FREE$ = PINCRW (PTR$, %PAGE_SIZE);

  10096 13 000144   002000 036003                    ADLQ    1024,DU
        13 000145   200004 756100                    STQ     FREE$,,AUTO
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:74   

      447    10097    4               FREE_OBJ_PAGES = FREE$;

  10097 13 000146   000000 756000 10                 STQ     FREE_OBJ_PAGES

      448    10098
      449    10099    5               DO I = 1 TO %(PAGES_PER_BLOCK - 2);

  10099 13 000147   000001 235007                    LDA     1,DL
        13 000150   200006 755100                    STA     I,,AUTO

      450    10100    5                 NEXT$ = PINCRW (FREE$, %PAGE_SIZE);

  10100 13 000151   200004 236100                    LDQ     FREE$,,AUTO
        13 000152   002000 036003                    ADLQ    1024,DU
        13 000153   200005 756100                    STQ     NEXT$,,AUTO

      451    10101    5                 FREE$ -> PAGE.NEXT = NEXT$;

  10101 13 000154   200004 470500                    LDP0    FREE$,,AUTO
        13 000155   001777 756100                    STQ     1023,,PR0

      452    10102    5                 FREE$ = NEXT$;

  10102 13 000156   200004 756100                    STQ     FREE$,,AUTO

      453    10103    5               END;

  10103 13 000157   200006 054100                    AOS     I,,AUTO
        13 000160   200006 235100                    LDA     I,,AUTO
        13 000161   000006 115007                    CMPA    6,DL
        13 000162   000151 604400 13                 TMOZ    s:10100

      454    10104
      455    10105    4               FREE$ -> PAGE.NEXT = ADDR(NIL);

  10105 13 000163   000002 236000 14                 LDQ     2
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:75   
        13 000164   200004 470500                    LDP0    FREE$,,AUTO
        13 000165   001777 756100                    STQ     1023,,PR0

      456    10106
      457    10107    4               PREV_OBJ_VECT.VECT = OBJ_VECT.VECT;

  10107 13 000166   000010 237000 10                 LDAQ    OBJ_VECT
        13 000167   000014 757000 10                 STAQ    PREV_OBJ_VECT

      458    10108    4             END;

  10108 13 000170   000241 710000 13                 TRA     s:10150

      459    10109
      460    10110    4             WHENALTRETURN DO;

      461    10111    5               IF OBJ_SEG_SIZE = 0 THEN DO;

  10111 13 000171   000000 235000 6                  LDA     OBJ_SEG_SIZE
        13 000172   000234 601000 13                 TNZ     s:10140

      462    10112                      /* This case has occurred in GCOS. In CP-6 it is very
      463    10113                         unlikely but it CAN happen. */
      464    10114    6                 IF OBJ_.TOP = ADDR (NIL) THEN DO;

  10114 13 000173   000000 236000 9                  LDQ     OBJ_
        13 000174   000002 116000 14                 CMPQ    2
        13 000175   000204 601000 13                 TNZ     s:10119

      465    10115    6                   CALL Z9HF$OPEN_OBJ_OUTPUT;

  10115 13 000176   000003 631400 14                 EPPR1   3
        13 000177   000000 701000 xent               TSX1    Z9HF$OPEN_OBJ_OUTPUT
        13 000200   000000 011000                    NOP     0

      466    10116    6                   PAGING_OBJ = TRUE;

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:76   
  10116 13 000201   400000 236003                    LDQ     -131072,DU
        13 000202   000000 756000 3                  STQ     PAGING_OBJ

      467    10117    6                 END;

  10117 13 000203   000206 710000 13                 TRA     s:10124

      468    10118    5                 ELSE
      469    10119    5                   OBJ_LAST_REGULAR_PAGE = OBJ_.FIRST;

  10119 13 000204   000001 236000 9                  LDQ     OBJ_+1
        13 000205   000000 756000 8                  STQ     OBJ_LAST_REGULAR_PAGE

      470    10120                      /*
      471    10121                      OBJ_VECT.LOGSIZE# = %PAGE_SIZE;
      472    10122                      OBJ_VECT.REALSIZE# = %PAGE_SIZE;
      473    10123                      */   /* Above statements needed only in GCOS version */
      474    10124    5                 FPT_GDS.V.SEGSIZE# = %PAGE_SIZE;

  10124 13 000206   002000 220003                    LDX0    1024,DU
        13 000207   000006 440000 10                 SXL0    FPT_GDS+4

      475    10125                      /* First request for OBJ space has been denied. Try getting
      476    10126                         only 1K; hopefully at least that is available. */
      477    10127                      /* FPT_GDS.V.WIRE# = TRUE; */ /* In GCOS, wire it */
      478    10128    5                 CALL M$GDS (FPT_GDS) ALTRET (NO_OBJ_TABLE);

  10128 13 000210   000002 630400 10                 EPPR0   FPT_GDS
        13 000211   430001 713400                    CLIMB   alt,gds
        13 000212   400400 401760                    pmme    nvectors=2
        13 000213   000256 702000 13                 TSX2    NO_OBJ_TABLE

      479    10129    5                 OBJ_SEG_SIZE = 1;

  10129 13 000214   000001 235007                    LDA     1,DL
        13 000215   000000 755000 6                  STA     OBJ_SEG_SIZE

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:77   
      480    10130    5                 COMCOM.IL_SPACE (0) = COMCOM.IL_SPACE (0) + 1;

  10130 13 000216   000324 054000 xsym               AOS     COMCOM+212

      481    10131    5                 PTR$ = OBJ_VECT.VECT.PTR$;

  10131 13 000217   000011 236000 10                 LDQ     OBJ_VECT+1
        13 000220   200003 756100                    STQ     PTR$,,AUTO

      482    10132    5                 OBJ_TOP_NEW_SEG = PTR$;

  10132 13 000221   000000 756000 7                  STQ     OBJ_TOP_NEW_SEG

      483    10133
      484    10134    5                 IF OBJ_.TOP = ADDR (NIL) THEN

  10134 13 000222   000000 236000 9                  LDQ     OBJ_
        13 000223   000002 116000 14                 CMPQ    2
        13 000224   000230 601000 13                 TNZ     s:10137

      485    10135    5                   OBJ_.TOP = PTR$;

  10135 13 000225   200003 236100                    LDQ     PTR$,,AUTO
        13 000226   000000 756000 9                  STQ     OBJ_
        13 000227   000241 710000 13                 TRA     s:10150

      486    10136    5                 ELSE
      487    10137    5                   CALL Z9HF$OBJ_DUMP ALTRET (NO_OBJ_TABLE);

  10137 13 000230   000003 631400 14                 EPPR1   3
        13 000231   000000 701000 xent               TSX1    Z9HF$OBJ_DUMP
        13 000232   000256 702000 13                 TSX2    NO_OBJ_TABLE

      488    10138    5               END;

  10138 13 000233   000241 710000 13                 TRA     s:10150

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:78   
      489    10139    5               ELSE DO;

      490    10140    5                 CALL Z9HF$OBJ_DUMP ALTRET(NO_OBJ_TABLE);

  10140 13 000234   000003 631400 14                 EPPR1   3
        13 000235   000000 701000 xent               TSX1    Z9HF$OBJ_DUMP
        13 000236   000256 702000 13                 TSX2    NO_OBJ_TABLE

      491    10141    5                 PTR$ = OBJ_.FIRST;

  10141 13 000237   000001 236000 9                  LDQ     OBJ_+1
        13 000240   200003 756100                    STQ     PTR$,,AUTO

      492    10142    5               END;

      493    10143    4             END;

      494    10144    3         END;

      495    10145    2     END;

      496    10146
      497    10147
      498    10148
      499    10149
      500    10150    1   OBJ_.FIRST = PTR$;

  10150 13 000241   200003 236100                    LDQ     PTR$,,AUTO
        13 000242   000001 756000 9                  STQ     OBJ_+1

      501    10151    1   PTR$ -> CLEAR.PAGE = '0'B;

  10151 13 000243   200003 470500                    LDP0    PTR$,,AUTO
        13 000244   010000 220003                    LDX0    4096,DU
        13 000245   000140 100400                    MLR     fill='000'O
        13 000246   000003 000001 14                 ADSC9   3                        cn=0,n=1
        13 000247   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:79   

      502    10152    1   PTR$ -> PAGE.NEXT = ADDR(NIL);

  10152 13 000250   000002 236000 14                 LDQ     2
        13 000251   001777 756100                    STQ     1023,,PR0

      503    10153    1   OBJ_.BOTTOM = 0;

  10153 13 000252   000002 450000 9                  STZ     OBJ_+2

      504    10154    1   OBJ_.FLOOR = %(PAGE_SIZE - 1);

  10154 13 000253   001777 235007                    LDA     1023,DL
        13 000254   000003 755000 9                  STA     OBJ_+3

      505    10155
      506    10156    1   RETURN;

  10156 13 000255   000000 702200 xent               TSX2  ! X66_ARET

      507    10157
      508    10158    1   NO_OBJ_TABLE:
      509    10159    1     OBUF = 'Not enough memory to compile; up MEM or use VIRTUAL opt.';

  10159 13 000256   040000 100400       NO_OBJ_TABLE MLR     fill='040'O
        13 000257   000000 000070 12                 ADSC9   0                        cn=0,n=56
        13 000260   000000 000170 11                 ADSC9   OBUF                     cn=0,n=120

      510    10160    1     CALL Z9AL$WRITE_TERMINAL;

  10160 13 000261   000003 631400 14                 EPPR1   3
        13 000262   000000 701000 xent               TSX1    Z9AL$WRITE_TERMINAL
        13 000263   000000 011000                    NOP     0

      511    10161    1     CALL M$ERR;

  10161 13 000264   000002 713400                    CLIMB   err
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:80   
        13 000265   000000 401760                    pmme    nvectors=0

      512    10162    1     RETURN;

  10162 13 000266   000000 702200 xent               TSX2  ! X66_ARET
      513    10163
      514    10164    1   END Z9HF$GET_OBJ_PAGE;
      515    10165        %EOD;

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:81   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$GET_OBJ_PAGE.
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:82   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 003 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT         r     1 PAGING_OBJ

  ****  Section 004 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 005 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:83   
  ****  Section 006 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 OBJ_SEG_SIZE

  ****  Section 007 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ_TOP_NEW_SEG

  ****  Section 008 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ_LAST_REGULAR_PAGE

  ****  Section 009 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Section 010  Data  Z9HF$GET_OBJ_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/d STRC(216)   r     1 FPT_GDS                    0-0-0/w PTR         r     1 FREE_OBJ_PAGES
    10-0-0/d STRC(144)   r     1 OBJ_VECT                  14-0-0/d STRC(144)   r     1 PREV_OBJ_VECT

  ****  Section 011 LblCom OBUF
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:84   

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(120)   r     1 OBUF

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 FREE$                      6-0-0/w SBIN        r     1 I
     5-0-0/w PTR         r     1 NEXT$                      3-0-0/w PTR         r     1 PTR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM
     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/d STRC(36864) r     1 CLEAR
     0-0-0/w STRC(72)    r     1 CONT                       0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC              1 OBJ                        0-0-0/w STRC(72)          1 OBJ_LAB
     0-0-0/w STRC(108)         1 OBJ_LINE                   0-0-0/w STRC(72)          1 OBJ_ORG
     0-0-0/w STRC(72)          1 OBJ_SCOPE                  0-0-0/w STRC(144)         1 OBJ_WORD
     0-0-0/w STRC(36864) r     1 PAGE


   Procedure Z9HF$GET_OBJ_PAGE requires 183 words for executable code.
PL6.E3A0      #005=Z9HF$GET_OBJ_PAGE File=Z9HF.:Z8A6TSI                          SAT 08/09/97 13:59 Page:85   
   Procedure Z9HF$GET_OBJ_PAGE requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:86   
      516        1        /*T***********************************************************/
      517        2        /*T*                                                         */
      518        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      519        4        /*T*                                                         */
      520        5        /*T***********************************************************/
      521        6        Z9HF$FREE_OBJ: PROC;
      522        7        /*F*
      523        8             NAME: Z9HF$FREE_OBJ
      524        9             PURPOSE:
      525       10                   Return the OBJ segment to the system, but save one page
      526       11                   to be used as a page buffer.
      527       12             DESCRIPTION:
      528       13                   Call M$FDS to free all but one page of the OBJ segment.
      529       14        */
      530       15        /*D*
      531       16             NAME: Z9AR$FREE_OBJ
      532       17             CALL:
      533       18                   CALL Z9HF$FREE_OBJ;
      534       19             DESCRIPTION:
      535       20                   Call M$FDS to free all but one page of the OBJ table
      536       21                   segment. Remember that the OBJ has a segment all to
      537       22                   itself.  This was done because CP6 does not allow
      538       23                   us to return arbitrary pages to the system, but
      539       24                   we need to be able to return the space used by
      540       25                   the OBJ table. The page not returned will be
      541       26                   used as a page buffer.
      542       27        */
      543       28
      544       29        %EQU PHASE = 0;
      545       30        %INCLUDE Z8A_DEFC;
      546       98        %INCLUDE Z8A_SUPP_MAC;
      547     2498        %INCLUDE Z8A_COMCOM;
      548     3148        %INCLUDE Z8A_SYS_FILE;
      549     9423        %SET INCLUDE_ENT_DEFS = FALSE;
      550     9424        %INCLUDE Z8A_OBJ;
      551     9921
      552     9922
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:87   
      553     9923
      554     9924        %FPT_FDS(RESULTS = OBJ_VECT,
      555     9925                 STCLASS = STATIC);
      556     9940
      557     9941        %VLR_GDS(FPTN=OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      558     9969
      559     9970    1   IF (OBJ_.TOP ~= ADDR(NIL))
      560     9971    1      AND (OBJ_.TOP ~= OBJ_TOP_NEW_SEG) THEN
      561     9972    2     DO;
      562     9973              /* Free up pages used from regular page space. */
      563     9974    2       OBJ_LAST_REGULAR_PAGE -> PAGE.NEXT = COMCOM.FREE$;
      564     9975    2       COMCOM.FREE$ = OBJ_.TOP;
      565     9976    2     END;
      566     9977
      567     9978    1   IF OBJ_TOP_NEW_SEG ~= ADDR(NIL) THEN /* OBJ segment has been created. */
      568     9979    2     DO;
      569     9980    2       OBJ_VECT.VECT.PTR$ = OBJ_TOP_NEW_SEG;
      570     9981
      571     9982    2       FPT_FDS.V.SEGSIZE# = %PAGE_SIZE * (OBJ_SEG_SIZE - 1);
      572     9983
      573     9984    2       IF OBJ_SEG_SIZE > 1 THEN
      574     9985    2         CALL M$FDS(FPT_FDS);
      575     9986
      576     9987    2       OBJ_.FIRST = OBJ_VECT.VECT.PTR$;
      577     9988    2       OBJ_.TOP   = OBJ_VECT.VECT.PTR$ ;
      578     9989    2       OBJ_TOP_NEW_SEG = OBJ_VECT.VECT.PTR$;
      579     9990    2     END;
      580     9991    1   ELSE
      581     9992    2     DO;
      582     9993    2       OBJ_.FIRST = COMCOM.FREE$;
      583     9994    2       COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;
      584     9995    2     END;
      585     9996
      586     9997
      587     9998    1   END Z9HF$FREE_OBJ;

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:88   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$FREE_OBJ.

   Procedure Z9HF$FREE_OBJ requires 37 words for executable code.
   Procedure Z9HF$FREE_OBJ requires 4 words of local(AUTO) storage.

    No errors detected in file Z9HF.:Z8A6TSI    .

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:89   

 Object Unit name= Z9HF$FREE_OBJ                              File name= Z9HF.:Z8A6TOU
 UTS= AUG 09 '97 14:00:46.12 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1   DCB   even  none     0      0  M$UC
    2  LblCom even  none     1      1  OBJ$
    3  LblCom even  none     1      1  PAGING_OBJ
    4  LblCom even  none     1      1  OBJ_PAGE_COUNT
    5  LblCom even  none     1      1  OBJ_FINISHED
    6  LblCom even  none     1      1  OBJ_SEG_SIZE
    7  LblCom even  none     1      1  OBJ_TOP_NEW_SEG
    8  LblCom even  none     1      1  OBJ_LAST_REGULAR_PAGE
    9  LblCom even  none     5      5  OBJ_
   10   Data  even  none    10     12  Z9HF$FREE_OBJ
   11   Proc  even  none    37     45  Z9HF$FREE_OBJ
   12  RoData even  none     1      1  Z9HF$FREE_OBJ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        0  Z9HF$FREE_OBJ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:90   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                                M$UC                             r    OBJ_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:91   


      516        1        /*T***********************************************************/
      517        2        /*T*                                                         */
      518        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      519        4        /*T*                                                         */
      520        5        /*T***********************************************************/
      521        6        Z9HF$FREE_OBJ: PROC;

      6 11 000000   000000 700200 xent  Z9HF$FREE_O* TSX0  ! X66_AUTO_0
        11 000001   000004 000000                    ZERO    4,0

      522        7        /*F*
      523        8             NAME: Z9HF$FREE_OBJ
      524        9             PURPOSE:
      525       10                   Return the OBJ segment to the system, but save one page
      526       11                   to be used as a page buffer.
      527       12             DESCRIPTION:
      528       13                   Call M$FDS to free all but one page of the OBJ segment.
      529       14        */
      530       15        /*D*
      531       16             NAME: Z9AR$FREE_OBJ
      532       17             CALL:
      533       18                   CALL Z9HF$FREE_OBJ;
      534       19             DESCRIPTION:
      535       20                   Call M$FDS to free all but one page of the OBJ table
      536       21                   segment. Remember that the OBJ has a segment all to
      537       22                   itself.  This was done because CP6 does not allow
      538       23                   us to return arbitrary pages to the system, but
      539       24                   we need to be able to return the space used by
      540       25                   the OBJ table. The page not returned will be
      541       26                   used as a page buffer.
      542       27        */
      543       28
      544       29        %EQU PHASE = 0;
      545       30        %INCLUDE Z8A_DEFC;
      546       98        %INCLUDE Z8A_SUPP_MAC;
      547     2498        %INCLUDE Z8A_COMCOM;
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:92   
      548     3148        %INCLUDE Z8A_SYS_FILE;
      549     9423        %SET INCLUDE_ENT_DEFS = FALSE;
      550     9424        %INCLUDE Z8A_OBJ;
      551     9921
      552     9922
      553     9923
      554     9924        %FPT_FDS(RESULTS = OBJ_VECT,
      555     9925                 STCLASS = STATIC);
      556     9940
      557     9941        %VLR_GDS(FPTN=OBJ_VECT,LOGSIZE=253952,REALSIZE=4096);
      558     9969
      559     9970    1   IF (OBJ_.TOP ~= ADDR(NIL))

   9970 11 000002   000000 236000 9                  LDQ     OBJ_
        11 000003   000000 116000 12                 CMPQ    0
        11 000004   000014 600000 11                 TZE     s:9978
        11 000005   000000 116000 7                  CMPQ    OBJ_TOP_NEW_SEG
        11 000006   000014 600000 11                 TZE     s:9978

      560     9971    1      AND (OBJ_.TOP ~= OBJ_TOP_NEW_SEG) THEN
      561     9972    2     DO;

      562     9973              /* Free up pages used from regular page space. */
      563     9974    2       OBJ_LAST_REGULAR_PAGE -> PAGE.NEXT = COMCOM.FREE$;

   9974 11 000007   000425 236000 xsym               LDQ     COMCOM+277
        11 000010   000000 470400 8                  LDP0    OBJ_LAST_REGULAR_PAGE
        11 000011   001777 756100                    STQ     1023,,PR0

      564     9975    2       COMCOM.FREE$ = OBJ_.TOP;

   9975 11 000012   000000 236000 9                  LDQ     OBJ_
        11 000013   000425 756000 xsym               STQ     COMCOM+277

      565     9976    2     END;

      566     9977
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:93   
      567     9978    1   IF OBJ_TOP_NEW_SEG ~= ADDR(NIL) THEN /* OBJ segment has been created. */

   9978 11 000014   000000 236000 7                  LDQ     OBJ_TOP_NEW_SEG
        11 000015   000000 116000 12                 CMPQ    0
        11 000016   000037 600000 11                 TZE     s:9993

      568     9979    2     DO;

      569     9980    2       OBJ_VECT.VECT.PTR$ = OBJ_TOP_NEW_SEG;

   9980 11 000017   000007 756000 10                 STQ     OBJ_VECT+1

      570     9981
      571     9982    2       FPT_FDS.V.SEGSIZE# = %PAGE_SIZE * (OBJ_SEG_SIZE - 1);

   9982 11 000020   000000 235000 6                  LDA     OBJ_SEG_SIZE
        11 000021   000012 735000                    ALS     10
        11 000022   776000 620005                    EAX0    -1024,AL
        11 000023   000004 440000 10                 SXL0    FPT_FDS+4

      572     9983
      573     9984    2       IF OBJ_SEG_SIZE > 1 THEN

   9984 11 000024   000000 235000 6                  LDA     OBJ_SEG_SIZE
        11 000025   000001 115007                    CMPA    1,DL
        11 000026   000032 604400 11                 TMOZ    s:9987

      574     9985    2         CALL M$FDS(FPT_FDS);

   9985 11 000027   000000 630400 10                 EPPR0   FPT_FDS
        11 000030   030002 713400                    CLIMB   fds
        11 000031   400400 401760                    pmme    nvectors=2

      575     9986
      576     9987    2       OBJ_.FIRST = OBJ_VECT.VECT.PTR$;

   9987 11 000032   000007 236000 10                 LDQ     OBJ_VECT+1
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:94   
        11 000033   000001 756000 9                  STQ     OBJ_+1

      577     9988    2       OBJ_.TOP   = OBJ_VECT.VECT.PTR$ ;

   9988 11 000034   000000 756000 9                  STQ     OBJ_

      578     9989    2       OBJ_TOP_NEW_SEG = OBJ_VECT.VECT.PTR$;

   9989 11 000035   000000 756000 7                  STQ     OBJ_TOP_NEW_SEG

      579     9990    2     END;

   9990 11 000036   000044 710000 11                 TRA     s:9998

      580     9991    1   ELSE
      581     9992    2     DO;

      582     9993    2       OBJ_.FIRST = COMCOM.FREE$;

   9993 11 000037   000425 236000 xsym               LDQ     COMCOM+277
        11 000040   000001 756000 9                  STQ     OBJ_+1

      583     9994    2       COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;

   9994 11 000041   000425 470400 xsym               LDP0    COMCOM+277
        11 000042   001777 236100                    LDQ     1023,,PR0
        11 000043   000425 756000 xsym               STQ     COMCOM+277

      584     9995    2     END;

      585     9996
      586     9997
      587     9998    1   END Z9HF$FREE_OBJ;

   9998 11 000044   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:95   
--  Include file information  --

   Z8A_OBJ.:Z8A6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9HF$FREE_OBJ.
PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:96   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom OBJ$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ$

  ****  Section 003 LblCom PAGING_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 PAGING_OBJ

  ****  Section 004 LblCom OBJ_PAGE_COUNT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 OBJ_PAGE_COUNT

  ****  Section 005 LblCom OBJ_FINISHED

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT               1 OBJ_FINISHED

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:97   
  ****  Section 006 LblCom OBJ_SEG_SIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 OBJ_SEG_SIZE

  ****  Section 007 LblCom OBJ_TOP_NEW_SEG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ_TOP_NEW_SEG

  ****  Section 008 LblCom OBJ_LAST_REGULAR_PAGE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 OBJ_LAST_REGULAR_PAGE

  ****  Section 009 LblCom OBJ_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 OBJ_

  ****  Section 010  Data  Z9HF$FREE_OBJ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_FDS                    6-0-0/d STRC(144)   r     1 OBJ_VECT

  ****  SYMREF variables  ****

PL6.E3A0      #006=Z9HF$FREE_OBJ File=Z9HF.:Z8A6TSI                              SAT 08/09/97 14:00 Page:98   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM
     0-0-0/w UBIN              1 OBJ_STEP(0:4)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0N  NULL        r     1 M$UC                       0-0-0/w STRC              1 OBJ
     0-0-0/w STRC(72)          1 OBJ_LAB                    0-0-0/w STRC(108)         1 OBJ_LINE
     0-0-0/w STRC(72)          1 OBJ_ORG                    0-0-0/w STRC(72)          1 OBJ_SCOPE
     0-0-0/w STRC(144)         1 OBJ_WORD                   0-0-0/w STRC(36864) r     1 PAGE


   Procedure Z9HF$FREE_OBJ requires 37 words for executable code.
   Procedure Z9HF$FREE_OBJ requires 4 words of local(AUTO) storage.

    No errors detected in file Z9HF.:Z8A6TSI    .
