

rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_defvar:c     -- Define "automatic" variables  */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #ifndef IN_DERIVE
A        9         9             #include   <stdlib.h>
A       10        10             #include   <stdio.h>
A       11        11             #include   <string.h>
A       12        12             #include   "MAKE_Cc13"
A       13        13             #include   "MAKE_Cc14"
A       14        14
A       15        15             struct  derive_list {
A       16        16    1          struct   dependancy  *dl_depend;
A       17        17    1          int                   dl_index;
A       18        18    1          int                   dl_early;
A       19        19    1          timetype              dl_modtime;
A       20        20    1          };
A       21        21
A       22        22             extern struct  derive_list   *dl;
A       23        23             extern int                    dl_size;
A       24        24             extern int                    dl_i;
A       25        25
A       26        26             char       *alloc_text();
A       27        27             #define DL_ALLOC 10
A       28        28             #endif
A       29        29
A       30        30             timetype   file_modtime();
A       31        31             void       rsstrcat();
A       32        32
A       33        33
A       34        34
A       35        35
A       36        36             /*F*    NAME:       build_changed_list( struct sym_target *tg )
A       37        37                     PURPOSE:    To create the value of the $? variable.
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38                     DESCRIPTION:
A       39        39                        This function is called when the actions to build a target
A       40        40                        reference the $? variable and its status is not completed.
A       41        41
A       42        42                        The value of this variable is the list of target file names
A       43        43                        representing the targets that are depending upon the
A       44        44                        current step and whose last modification dates are more
A       45        45                        recent than the time of the current target.
A       46        46
A       47        47                        There may be many possible paths that would cause this
A       48        48                        target to be generated, however, the value of this variable
A       49        49                        reflects the first such path discovered by MAKE.
A       50        50             */
A       51        51
A       52        52
A       53        53             static  int   rs_strsz = 0;
A       54        54             static  int   rs_strps = 0;
A       55        55             static  char *rs_str   = 0;
A       56        56
A       57        57             void
A       58        58             build_changed_list(tg)
A       59        59               struct sym_target *tg;
A       60        60             {
A       61        61    1          struct target_action *a;
A       62        62    1          struct sym_target    *tgroot  = tg;
A       63        63    1          struct dependancy   *d;
A       64        64    1          int                   i       = 0, j;
A       65        65    1          int                   dl_stop = dl_i;
A       66        66    1          timetype              tg_modt = file_modtime(tg->tg_fid);
A       67        67    1
A       68        68    1          if (tg_modt == END_OF_TIME) tg_modt = BEGINNING_OF_TIME;
A       69        69    1          rs_strsz = rs_strps = 0;
A       70        70    1          rs_str   = 0;
A       71        71    1        start:
A       72        72    1          d = tg->tg_depend;
A       73        73    1          i = 0;
A       74        74    1          while (d)   {
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75    2             for (; i < d->dp_num ; i++)   {
A       76        76    3                struct sym_target *t = d->dp_list[i];
A       77        77    3                if (t->tg_status == STATUS_WAITING || tg_modt < tg->tg_modtime) {
A       78        78    4                   for ( j=dl_stop; j<dl_i ; j++ )
A       79        79    4                      if (t == dl[j].dl_depend->dp_target)
A       80        80    4                         break;
A       81        81    4                   if (j < dl_i || tgroot == t) goto resume;
A       82        82    4                   dl_push(d, i, BEGINNING_OF_TIME, BEGINNING_OF_TIME);
A       83        83    4                   tg = t;
A       84        84    4                   goto start;
A       85        85    4                   }
A       86        86    3        resume: ;
A       87        87    3                }
A       88        88    2             d = d->dp_tgdepend, i = 0;
A       89        89    2             }
A       90        90    1          if (tg->tg_status == STATUS_WAITING || tg_modt<tg->tg_modtime) {
A       91        91    2             if (tg->tg_fid && dl_i > dl_stop)
A       92        92    2                rsstrcat( tg->tg_fid+1, tg->tg_fid[0] );
A       93        93    2             }
A       94        94    1          a = tg->tg_action;
A       95        95    1          if (a && a->ta_tginput) {
A       96        96    2             struct sym_target *t = a->ta_tginput;
A       97        97    2             if (t->tg_fid  && (tg_modt < file_modtime(t->tg_fid ) || t->tg_new))
A       98        98    2                rsstrcat( t->tg_fid+1,  t->tg_fid[0]);
A       99        99    2             if (t->tg_ufid && tg_modt < file_modtime(t->tg_ufid) && !t->tg_new)
A      100       100    2                rsstrcat( t->tg_ufid+1, t->tg_ufid[0]);
A      101       101    2             }
A      102       102    1
A      103       103    1          if (dl_i > dl_stop)  {
A      104       104    2             dl_pop(&d, &i, &j, &j);
A      105       105    2             tg = d->dp_target;
A      106       106    2             goto resume;
A      107       107    2             }
A      108       108    1
A      109       109    1          if (rs_strps > 0) {
A      110       110    2             savemoney(rs_str);
A      111       111    2             tgroot->tg_action->ta_chngvar = alloc_text(rs_strps+1, rs_str);
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112    2             free(rs_str);
A      113       113    2             rs_str = 0;
A      114       114    2             rs_strps = rs_strsz = 0;
A      115       115    2             }
A      116       116    1          else tgroot->tg_action->ta_chngvar = "";
A      117       117    1          return;
A      118       118    1        }
A      119       119
A      120       120             dl_push( d, i, es, mt)
A      121       121               struct   dependancy *d;
A      122       122               int                  i;
A      123       123               timetype             es;
A      124       124               timetype             mt;
A      125       125             {
A      126       126    1          if (dl_i >= dl_size) {
A      127       127    2             int k = (dl_size += DL_ALLOC) * sizeof(struct derive_list);
A      128       128    2             dl = (struct derive_list *) realloc(dl, k);
A      129       129    2             if (!dl) crash("Out of Memory: Derive_Target\n");
A      130       130    2             }
A      131       131    1          dl[dl_i].dl_depend   =  d;
A      132       132    1          dl[dl_i].dl_index    =  i;
A      133       133    1          dl[dl_i].dl_early    =  es;
A      134       134    1          dl[dl_i].dl_modtime  =  mt;
A      135       135    1          dl_i++;
A      136       136    1        }
A      137       137
A      138       138             dl_pop(d, i, es, mt)
A      139       139               struct   dependancy **d;
A      140       140               int                  *i;
A      141       141               timetype             *es;
A      142       142               timetype             *mt;
A      143       143             {
A      144       144    1          dl_i--;
A      145       145    1          *d  = dl[dl_i].dl_depend;
A      146       146    1          *i  = dl[dl_i].dl_index;
A      147       147    1          *es = dl[dl_i].dl_early;
A      148       148    1          *mt = dl[dl_i].dl_modtime;
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=5  
A      149       149    1        }
A      150       150
A      151       151
A      152       152             timetype
A      153       153             file_modtime( fid )
A      154       154               char  *fid;
A      155       155             {
A      156       156    1          FILE  *f = fopen( fid+1, "r");
A      157       157    1          timetype rs = (f)? f->_mod_time : END_OF_TIME;
A      158       158    1          if (f) fclose(f);
A      159       159    1          return rs;
A      160       160    1        }
A      161       161
A      162       162             void
A      163       163             rsstrcat( st, sz)
A      164       164               char     *st;
A      165       165               int       sz;
A      166       166             {
A      167       167    1          char     *sub = (sz && rs_str) ? strstr(rs_str, st) : 0;
A      168       168    1          if (sz == 0) return;
A      169       169    1
A      170       170    1          while (sub) {     /* Don't add name if its already there!   */
A      171       171    2             if ((sub[sz]==' ' || sub[sz]=='\000')  &&  sub[-1] == '\177')
A      172       172    2                return;
A      173       173    2             sub = strstr(sub+1, st);
A      174       174    2             }
A      175       175    1
A      176       176    1          if (rs_strsz <= (rs_strps + 3 + sz))   {  /* Extend string  */
A      177       177    2             rs_strsz = (1025 + rs_strps + sz) / 1024 * 1024;
A      178       178    2             rs_str   = (char *) realloc(rs_str, rs_strsz);
A      179       179    2             if (!rs_str) crash("Out of memory: Building $?\n");
A      180       180    2             }
A      181       181    1          if (rs_strps)  rs_str[rs_strps++] = ' ';
A      182       182    1          rs_str[rs_strps++] = '\177';
A      183       183    1          memcpy(rs_str+rs_strps, st, sz);
A      184       184    1          rs_strps += sz;
A      185       185    1          rs_str[rs_strps] = 0;
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=6  
A      186       186    1          return;
A      187       187    1        }
A      188       188
A      189       189
A      190       190
A      191       191
A      192       192             /*F*    NAME:       build_predecessor_list( struct sym_target *tg )
A      193       193                     PURPOSE:    To create the value of the $! variable.
A      194       194                     DESCRIPTION:
A      195       195                        This function is called when the actions to build a target
A      196       196                        reference the $! variable and its status is not completed.
A      197       197
A      198       198                        The value of this variable is the list of target file names
A      199       199                        representing the targets that are depending upon the
A      200       200                        current step.
A      201       201
A      202       202                        There may be many possible paths that would cause this
A      203       203                        target to be generated, however, the value of this variable
A      204       204                        reflects the first such path discovered by MAKE.
A      205       205             */
A      206       206
A      207       207             build_predecessor_list(tg)
A      208       208               struct sym_target *tg;
A      209       209             {
A      210       210    1          struct target_action *a = tg->tg_action;
A      211       211    1          char   *c, *p;
A      212       212    1          int     n = dl_i;
A      213       213    1          int     sz = 0;
A      214       214    1
A      215       215    1          while (n > 0)  {
A      216       216    2             struct sym_target *t = dl[--n].dl_depend->dp_target;
A      217       217    2             if (t->tg_fid)   {
A      218       218    3                if (t->tg_ufid)
A      219       219    3                   sz += t->tg_fid[0] + t->tg_ufid[0] + 3;
A      220       220    3                else sz += t->tg_fid[0] + 1;
A      221       221    3                }
A      222       222    2             else sz += t->tg_len + 1;
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=7  
A      223       223    2             }
A      224       224    1
A      225       225    1          if (sz <= 0) {
A      226       226    2             a->ta_predvar = "";
A      227       227    2             return;
A      228       228    2             }
A      229       229    1          n = dl_i;
A      230       230    1          sz += (n > 0) ? n : 0;
A      231       231    1          a->ta_predvar = c = alloc_text(1+sz);
A      232       232    1
A      233       233    1          while (n > 0)  {
A      234       234    2             struct sym_target *t = dl[--n].dl_depend->dp_target;
A      235       235    2             if (t->tg_fid)   {
A      236       236    3                if (t->tg_ufid)  {
A      237       237    4                   *c++ = 0177;
A      238       238    4                   memcpy(c, t->tg_fid+1, (sz = t->tg_fid[0])), c += sz;
A      239       239    4                   *c++ = ',';
A      240       240    4                   p    = t->tg_ufid + 1;
A      241       241    4                   sz   = t->tg_ufid[0];
A      242       242    4                   }
A      243       243    3                else {
A      244       244    4                   p    = t->tg_fid + 1;
A      245       245    4                   sz   = t->tg_fid[0];
A      246       246    4                   }
A      247       247    3                }
A      248       248    2             else {
A      249       249    3                p = t->tg_text;
A      250       250    3                sz = t->tg_len;
A      251       251    3                }
A      252       252    2             *c++ = 0177;
A      253       253    2             memcpy(c, p, sz), c+= sz;
A      254       254    2             if (n) *c++ = ' ';
A      255       255    2             }
A      256       256    1          *c = 0;
A      257       257    1          savemoney(a->ta_predvar);
A      258       258    1        }
A      259       259
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=8  
A      260       260
A      261       261
A      262       262
A      263       263             /*F*    NAME:       build_dependent_list( struct sym_target *tg )
A      264       264                     PURPOSE:    To create the value of the $^ variable.
A      265       265                     DESCRIPTION:
A      266       266                        This function is called when the actions to build a target
A      267       267                        reference the $^ variable and its status is not completed.
A      268       268
A      269       269                        The value of this variable is the list of target file names
A      270       270                        representing the targets that are dependents of the
A      271       271                        target file.
A      272       272
A      273       273             */
A      274       274
A      275       275             build_dependent_list(tg)
A      276       276               struct sym_target *tg;
A      277       277             {
A      278       278    1          struct target_action *a = tg->tg_action;
A      279       279    1          struct dependancy *d = tg->tg_depend;
A      280       280    1          char   *c, *p;
A      281       281    1          int     i, n=0;
A      282       282    1          int     sz = 0;
A      283       283    1
A      284       284    1          while (d)  {
A      285       285    2             for (i=0 ; i<d->dp_num ; i++) {
A      286       286    3                struct sym_target *t = d->dp_list[i];
A      287       287    3                if (t->tg_fid)   {
A      288       288    4                   if (t->tg_ufid)
A      289       289    4                      sz += t->tg_fid[0] + t->tg_ufid[0] + 3;
A      290       290    4                   else sz += t->tg_fid[0] + 1;
A      291       291    4                   }
A      292       292    3                else sz += t->tg_len + 1;
A      293       293    3                n++;
A      294       294    3                }     /* End of for   loop */
A      295       295    2             d = d->dp_tgdepend;
A      296       296    2             }        /* End of while loop */
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=9  
A      297       297    1
A      298       298    1          if (sz <= 0) {
A      299       299    2             a->ta_dpndvar = "";
A      300       300    2             return;
A      301       301    2             }
A      302       302    1          d = tg->tg_depend;
A      303       303    1          sz += (n > 0) ? n : 0;
A      304       304    1          a->ta_dpndvar = c = alloc_text(1+sz);
A      305       305    1
A      306       306    1          while (d)  {
A      307       307    2             for (i=0 ; i<d->dp_num ; i++) {
A      308       308    3                struct sym_target *t = d->dp_list[i];
A      309       309    3                if (t->tg_fid)   {
A      310       310    4                   if (t->tg_ufid)  {
A      311       311    5                      *c++ = 0177;
A      312       312    5                      memcpy(c, t->tg_fid+1, (sz = t->tg_fid[0])), c += sz;
A      313       313    5                      *c++ = ',';
A      314       314    5                      p    = t->tg_ufid + 1;
A      315       315    5                      sz   = t->tg_ufid[0];
A      316       316    5                      }     /* end of ui   fid */
A      317       317    4                   else {
A      318       318    5                      p    = t->tg_fid + 1;
A      319       319    5                      sz   = t->tg_fid[0];
A      320       320    5                      }     /* end of else fid */
A      321       321    4                   }        /* end of      fid */
A      322       322    3                else {
A      323       323    4                   p = t->tg_text;
A      324       324    4                   sz = t->tg_len;
A      325       325    4                   }        /* end of no   fid */
A      326       326    3                *c++ = 0177;
A      327       327    3                memcpy(c, p, sz), c+= sz;
A      328       328    3                if (--n) *c++ = ' ';
A      329       329    3                }     /* End of for   loop */
A      330       330    2             d = d->dp_tgdepend;
A      331       331    2             }        /* End of while loop */
A      332       332    1          *c = 0;
A      333       333    1          savemoney(a->ta_dpndvar);
rCC.C03    File=MAKE_SIc03.:XSI                                                      Thu Nov 20 1997  Page=10 
A      334       334    1        }
A      335       335
A      336       336
A      337       337
A      338       338             savemoney(st)
A      339       339               char  *st;
A      340       340             {
A      341       341    1          int   i = strlen(st);
A      342       342    1          char *c;
A      343       343    1
A      344       344    1          while (c = memchr(st, '$', i))
A      345       345    1             *c = 128;
A      346       346    1        }
A      347       347
A      348       348
A      349       349
A      350       350             restoremoney(st)
A      351       351               char  *st;
A      352       352             {
A      353       353    1          int   i = strlen(st);
A      354       354    1          char *c;
A      355       355    1
A      356       356    1          while (c = memchr(st, 128, i))
A      357       357    1             *c = '$';
A      358       358    1        }
A---  Include file information  ---
A
A   stdlib:h.:LIBRARY. is referenced
A   stdio:h.:LIBRARY. is referenced
A   string:h.:LIBRARY. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   MAKE_Cc14.:XSI. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc03.:XSI
