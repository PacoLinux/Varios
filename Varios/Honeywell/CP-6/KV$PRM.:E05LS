

14:54 JUL 28 '97 KV$PRM.:E05SI                                             1    
    1      /*M* KV$PRM_PRM VDH parameter structure structures */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* Structure describing the ABSGRPRND parameters. */
    9
   10      /* ID.  Identifies which abstract graphic rendition is being */
   11      /* defined.  Values are KV_ABSGRPRND_... */
   12
   13      %MACRO KV$PRM_ABSGRPRND(NAME = KV$PRM_ABSGRPRND, LVL = 1, LAST = ";", STCLASS = BASED);
   14      %LSET LISTDIR = '0'B;
   15      %LSET LISTEXP = '1'B;
   16      %LSET LISTCOM = '0'B;
   17      %LSET LISTSUB = '1'B;
   18      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   19      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
   20      %LSET INIT = CHARTEXT('INIT');
   21      %LSET ENIT = CHARTEXT('');
   22      %ELSE;
   23      %LSET INIT = CHARTEXT('/*');
   24      %LSET ENIT = CHARTEXT('*/');
   25      %ENDIF;
   26      %IF LVL = 1;
   27      DCL 1 NAME STCLASS ALIGNED,
   28      %ENDIF;
   29            %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
   30            %(LVL+1) ID UBIN(7) UNAL %INIT(0)%ENIT,
   31            %(LVL+1) * BIT(8) %INIT(0)%ENIT,
   32
   33      /* Graphic rendition.  ABS and ID are not used - only the */
   34      /* real graphic rendition items are used. */
   35
   36      %LSET LVL1 = LVL+1;
   37      %KV$GRPRND (NAME=GRPRND, LVL=LVL1, STCLASS=STCLASS, LAST =",");
14:54 JUL 28 '97 KV$PRM.:E05SI                                             2    
   38            %(LVL+1) GRPRND_BYT REDEF GRPRND UBIN BYTE CALIGNED LAST
   39      %MEND;
   40      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             3    
   41      /*F* NAME: KV$PRM_DADR VIRTUAL DEVICE HANDLER STRUCTURE: DADR */
   42
   43      /* Structure describing the DADR parameters. */
   44
   45      %MACRO KV$PRM_DADR(NAME = KV$PRM_DADR, LVL = 1, LAST = ";", STCLASS = BASED);
   46      %LSET LISTDIR = '0'B;
   47      %LSET LISTEXP = '1'B;
   48      %LSET LISTCOM = '0'B;
   49      %LSET LISTSUB = '1'B;
   50      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   51      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
   52      %LSET INIT = CHARTEXT('INIT');
   53      %LSET ENIT = CHARTEXT('');
   54      %ELSE;
   55      %LSET INIT = CHARTEXT('/*');
   56      %LSET ENIT = CHARTEXT('*/');
   57      %ENDIF;
   58      %IF LVL = 1;
   59      DCL 1 NAME STCLASS ALIGNED,
   60      %ENDIF;
   61            %(LVL+1) DEVNUM UBIN BYTE CALIGNED %INIT(255)%ENIT,
   62
   63      /*         DEVNUM CONTAINS THE DEVICE NUMBER FOR A */
   64      /*         STREAM.  FOR A HASP STREAM, THE VALUE IS THE */
   65      /*         RCB CODE FOR THE STREAM.  FOR A HASP OPERATOR */
   66      /*         CONSOLE, IT IS THE RCB FOR THE OUTPUT CONSOLE STREAM. */
   67
   68            %(LVL+1) SDNUM UBIN BYTE CALIGNED %INIT(255)%ENIT,
   69
   70      /*         SDNUM CONTAINS A SECONDARY DEVICE NUMBER FOR */
   71      /*         A STREAM.  THE ONLY EXPECTED USE IS THE SPECIFICATION */
   72      /*         OF THE RCB CODE FOR OPERATOR CONSOLE INPUT ON A */
   73      /*         HASP TERMINAL. */
   74
   75            %(LVL+1) DEVCTL BIT(16) %INIT('FFFF'X)%ENIT LAST
   76
   77      /*         DEVCTL CONTAINS THE SUSPEND BIT MASK FOR A */
14:54 JUL 28 '97 KV$PRM.:E05SI                                             4    
   78      /*         STREAM ON A HASP TERMINAL. */
   79
   80      %MEND;
   81      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             5    
   82      /*F* NAME: KV$PRM_EOM - End-of-message parameters structure. */
   83
   84      /* 'End of message (activation, timeout)' parameter structure. */
   85
   86
   87      %MACRO KV$PRM_EOM(NAME = KV$PRM_EOM, LAST = ";", STCLASS = BASED);
   88      %LSET LISTDIR = '0'B;
   89      %LSET LISTEXP = '1'B;
   90      %LSET LISTCOM = '0'B;
   91      %LSET LISTSUB = '1'B;
   92      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   93      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
   94      %LSET INIT = CHARTEXT('INIT');
   95      %LSET ENIT = CHARTEXT('');
   96      %ELSE;
   97      %LSET ENIT = CHARTEXT('*/');
   98      %LSET INIT = CHARTEXT('/*');
   99      %ENDIF;
  100      DCL 1 NAME STCLASS ALIGNED,
  101            2 DMN UBIN(8) UNAL %INIT(1)%ENIT,
  102
  103            2 * BIT(8) %INIT('0'B)%ENIT,
  104            2 SUPPHALT BIT(1) %INIT('0'B)%ENIT,
  105
  106      /* SUPPRESS HALT.  DISABLE ALL USER HALTS, BUT ALLOW DEVICE HALTS. */
  107
  108            2 * BIT(5) UNAL %INIT('0'B)%ENIT,
  109
  110            2 UTYPE UBIN(2) UNAL %INIT(1)%ENIT,
  111
  112      /* UTYPE = MIL10/SEC/MIN. Specifies whether the */
  113      /* units of TIMEOUT are 10 milliseconds, seconds or minutes. */
  114
  115            2 TIMEOUT UBIN BYTE %INIT(255)%ENIT CALIGNED,
  116
  117      /* TIMEOUT = VALUE-DEC(1-255). */
  118      /* Specifies a timeout period to be used on subsequent */
14:54 JUL 28 '97 KV$PRM.:E05SI                                             6    
  119      /* M$READs to the terminal.  If an M$READ is not */
  120      /* completed within this time period after it is issued, */
  121      /* and prompted for, it is terminated with a Timed-out */
  122      /* completion type.  The units for TIMEOUT are specified */
  123      /* by UTYPE above.  Zero says no timeout. */
  124
  125            2 TABLE(0:15) UBIN %INIT(0*0)%ENIT LAST
  126
  127      /* Each byte represents */
  128      /* one column of the ASCII table.  If the binary representation */
  129      /* of the byte has bit(n) on (where n is the position of */
  130      /* a character (0-7) in the column) the indicated character */
  131      /* will cause end-of-message (activation). */
  132
  133      %MEND;
  134      /*F* NAME:  KV$PRM_DCLINPFNC - declare input function.
  135      */
  136      %MACRO KV$PRM_DCLINPFNC(NAME = KV$PRM_DCLINPFNC, LVL = 1, LAST = ";", STCLASS = BASED);
  137      %LSET LISTDIR = '0'B;
  138      %LSET LISTEXP = '1'B;
  139      %LSET LISTCOM = '0'B;
  140      %LSET LISTSUB = '1'B;
  141      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  142      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  143      %LSET INIT = CHARTEXT(' INIT');
  144      %LSET ENIT = CHARTEXT('');
  145      %ELSE;
  146      %LSET INIT = CHARTEXT('/*');
  147      %LSET ENIT = CHARTEXT('*/');
  148      %ENDIF;
  149      %IF LVL = 1;
  150      %IF MODE_FEP = '1'B;
  151      DCL 1 NAME ALIGNED STCLASS,  /* L6/DPS-6 */
  152      %ELSE;
  153      DCL 1 NAME HALIGNED STCLASS,  /* L66/DPS-8 */
  154      %ENDIF;
  155      %ELSE;
14:54 JUL 28 '97 KV$PRM.:E05SI                                             7    
  156      %(LVL) NAME,
  157      %ENDIF;
  158      /*
  159      Type of IMP entry.  Value is KV_PRM_IMP_TYP_DCLINPFNC.
  160      */
  161            %(LVL+1) TYP UBIN BYTE CALIGNED %INIT(0)%ENIT,
  162            %(LVL+1) * UBIN BYTE CALIGNED %INIT(0)%ENIT, /* FILLER, ALIGN */
  163      /*
  164      Length of this entry, including any input operators following this
  165      structure.
  166      */
  167      %IF (MODE_FEP = '1'B);
  168            %(LVL+1) LNG UBIN WORD ALIGNED %INIT(0)%ENIT,
  169      %ELSE;
  170            %(LVL+1) LNG,
  171                %(LVL+2) BYT1 UBIN BYTE UNAL %INIT(0)%ENIT,
  172                %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  173                %(LVL+2) BYT2 UBIN(8) UNAL %INIT(0)%ENIT,
  174      %ENDIF;
  175
  176      /* Introducer 1 token.  The (first) character that */
  177      /* introduces escape sequences. */
  178
  179            %(LVL+1) INT1_TKN UBIN BYTE CALIGNED %INIT(0)%ENIT,
  180
  181      /* Introducer %(LVL+1) token.  The second character that */
  182      /* introduces escape sequences, if there is a second introducer. */
  183
  184            %(LVL+1) INT2_TKN UBIN BYTE CALIGNED %INIT(0)%ENIT,
  185
  186      /* ID token.  Identifies which input function is being invoked.  This is */
  187      /* the last character in the input string that invokes an input */
  188      /* function. */
  189
  190            %(LVL+1) ID_TKN UBIN BYTE CALIGNED %INIT(0)%ENIT,
  191      %IF MODE_FEP = '0'B;
  192      %(LVL+1) * BIT(3) %INIT('0'B)%ENIT UNAL,
14:54 JUL 28 '97 KV$PRM.:E05SI                                             8    
  193      %ELSE;
  194      %(LVL+1) * BIT(2) %INIT('0'B)%ENIT UNAL,
  195      %ENDIF;
  196
  197      /* INT1 token type.  Specifies just what INT1_TKN expresses. */
  198      /* Values are: */
  199
  200      /*    KV_INPFNCTKNTYP_CHR (character) */
  201      /*    KV_INPFNCTKNTYP_FNCKEY (function key) */
  202
  203            %(LVL+1) INT1_TKNTYP UBIN(3) UNAL %INIT(0)%ENIT,
  204
  205      /* INT2 token type.  Specifies just what INT2_TKN expresses. */
  206      /* Values are: */
  207
  208      /*    KV_INPFNCTKNTYP_NON (none) */
  209      /*    KV_INPFNCTKNTYP_CHR (character) */
  210
  211            %(LVL+1) INT2_TKNTYP UBIN(3) UNAL %INIT(0)%ENIT,
  212      %IF MODE_FEP = '0'B;
  213      %(LVL+1) * BIT(2) %INIT('0'B)%ENIT UNAL,
  214      %ELSE;
  215      %(LVL+1) * BIT(1) %INIT('0'B)%ENIT UNAL,
  216      %ENDIF;
  217
  218      /* ID token type.  Specifies how the ID (ID_TKN) is expressed. */
  219      /* Values are: */
  220
  221      /*    KV_INPFNCTKNTYP_CHR (character) */
  222      /*    KV_INPFNCTKNTYP_FNCKEY (function key) */
  223      /*    KV_INPFNCTKNTYP_SHFFNCKEY (shifted function key) */
  224      /*    KV_INPFNCTKNTYP_CTR (control code) */
  225
  226            %(LVL+1) ID_TKNTYP UBIN(3) UNAL %INIT(0)%ENIT,
  227
  228      /* Input function type.  Identifies this as being a primary */
  229      /* escape, special character, etc. */
14:54 JUL 28 '97 KV$PRM.:E05SI                                             9    
  230      /* Values are KV_INPFNCTYP_... */
  231
  232            %(LVL+1) INPFNCTYP UBIN(4) UNAL %INIT(0)%ENIT LAST
  233      %MEND;
  234      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             10   
  235      /*F* NAME: KV$PRM_PROMPT - VIRTUAL DEVICE HANDLER STRUCTURE: PROMPT   */
  236
  237      /* Structure describing the PROMPT parameter. */
  238      %MACRO KV$PRM_PROMPT (NAME=KV$PRM_PROMPT, LVL=1, LAST=";", STCLASS=BASED);
  239      %LSET LISTDIR = '0'B;
  240      %LSET LISTEXP = '1'B;
  241      %LSET LISTCOM = '0'B;
  242      %LSET LISTSUB = '1'B;
  243      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  244      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  245      %LSET INIT = CHARTEXT('INIT');
  246      %LSET ENIT = CHARTEXT('');
  247      %ELSE;
  248      %LSET INIT = CHARTEXT('/*');
  249      %LSET ENIT = CHARTEXT('*/');
  250      %ENDIF;
  251      %IF LVL = 1;
  252      DCL 1 NAME STCLASS ALIGNED,
  253      %ELSE;
  254            %(LVL) NAME,
  255      %ENDIF;
  256              %(LVL+1) DMN UBIN(8) UNAL %INIT(1)%ENIT,
  257
  258      /* DOMAIN */
  259
  260              %(LVL+1) DVBYTE,
  261
  262                %(LVL+2) * UBIN(3) UNAL %INIT(0)%ENIT,
  263
  264                %(LVL+2) TRANS BIT(1) %INIT('0'B)%ENIT,
  265
  266      /* TRANS = YES, NO. YES specifies that the prompt */
  267      /* string is to be sent untranslated to the terminal */
  268
  269                %(LVL+2) * UBIN(4) UNAL %INIT(0)%ENIT,
  270
  271              %(LVL+1) VFC CHAR(1) %INIT(ASCBIT('1E'X))%ENIT,
14:54 JUL 28 '97 KV$PRM.:E05SI                                             11   
  272
  273      /* VFC CHARACTER FOR PROMPT STRING */
  274
  275              %(LVL+1) TXT(0:0) REDEF VFC CHAR(1) LAST
  276      %MEND;
  277      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             12   
  278      /*F* NAME:  KV$PRM_RLSINPFNC - release input function.
  279      */
  280      %MACRO KV$PRM_RLSINPFNC(NAME = KV$PRM_RLSINPFNC, LVL = 1, LAST = ";", STCLASS = BASED);
  281      %LSET LISTDIR = '0'B;
  282      %LSET LISTEXP = '1'B;
  283      %LSET LISTCOM = '0'B;
  284      %LSET LISTSUB = '1'B;
  285      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  286      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  287      %LSET INIT = CHARTEXT(' INIT');
  288      %LSET ENIT = CHARTEXT('');
  289      %ELSE;
  290      %LSET INIT = CHARTEXT('/*');
  291      %LSET ENIT = CHARTEXT('*/');
  292      %ENDIF;
  293      %IF LVL = 1;
  294      %IF MODE_FEP = '1'B;
  295      DCL 1 NAME ALIGNED STCLASS,  /* L6/DPS-6 */
  296      %ELSE;
  297      DCL 1 NAME HALIGNED STCLASS,  /* L66/DPS-8 */
  298      %ENDIF;
  299      %ELSE;
  300      %(LVL) NAME,
  301      %ENDIF;
  302      /*
  303      Type of IMP entry.  Value is KV_PRM_IMP_TYP_RLSINPFNC.
  304      */
  305            %(LVL+1) TYP UBIN BYTE CALIGNED %INIT(0)%ENIT,
  306      /*
  307      Length of this entry.
  308      */
  309            %(LVL+1) LNG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  310
  311      /* ID.  Identifies which input function is being invoked.  This is */
  312      /* the last character in the input string that invokes an input */
  313      /* function. */
  314
14:54 JUL 28 '97 KV$PRM.:E05SI                                             13   
  315            %(LVL+1) ID_TKN UBIN BYTE CALIGNED %INIT(0)%ENIT,
  316      %IF MODE_FEP = '0'B;
  317      %(LVL+1) * BIT(1) %INIT('0'B)%ENIT UNAL,
  318      %ENDIF;
  319
  320      /* ID type.  Specifies how the ID is expressed. */
  321      /* Values are: */
  322
  323      /*    KV_INPFNCTKNTYP_CHR (character) */
  324      /*    KV_INPFNCTKNTYP_FNCKEY (function key) */
  325      /*    KV_INPFNCTKNTYP_NON (none; release all of this INPFNCTYP) */
  326      /*    KV_INPFNCTKNTYP_SHFFNCKEY (shifted function key) */
  327      /*    KV_INPFNCTKNTYP_CTR (control code) */
  328
  329            %(LVL+1) ID_TKNTYP UBIN(3) UNAL %INIT(0)%ENIT,
  330
  331      /* Input function type.  Identifies this as being a primary */
  332      /* escape, special character, etc. */
  333      /* Values are KV_INPFNCTYP_... */
  334
  335            %(LVL+1) INPFNCTYP UBIN(4) UNAL %INIT(0)%ENIT,
  336
  337      /* All input function types.  INPFNCTYP shouldn't be honored, */
  338      /* but instead all input functions of all input function types */
  339      /* should be released.  This is a delete-everything operation. */
  340
  341            %(LVL+1) ALLINPFNCTYP BIT(1) %INIT('0'B)%ENIT LAST
  342      %MEND;
  343      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             14   
  344      /*F* NAME: KV_PRM_INPFNC_E -
  345      Macro defining constants used for KV$PRM_DCLINPFNC and KV$PRM_RLSINPFNC.
  346      */
  347      %MACRO KV_PRM_INPFNC_E;
  348      /*
  349      Type codes for structures passed as IMP parameters.
  350      */
  351      %EQU KV_PRM_IMP_TYP_DCLINPFNC = 4;
  352      %EQU KV_PRM_IMP_TYP_RLSINPFNC = 10;
  353
  354      /* Input function token types.  Specify what is expressed in ID_TKN, etc., */
  355      /* whether it is a character value, function key number, etc. */
  356
  357      %EQU KV_INPFNCTKNTYP_LOW = 0;
  358
  359      /* Token is a character value. */
  360
  361      %EQU KV_INPFNCTKNTYP_CHR = 0;
  362
  363      /* Token is a control code.  This includes break, does not include */
  364      /* ASCII CR. */
  365
  366      %EQU KV_INPFNCTKNTYP_CTR = 1;
  367
  368      /* Token is a function key number.  (3270 PF keys map to this.) */
  369
  370      %EQU KV_INPFNCTKNTYP_FNCKEY = 2;
  371
  372      /* None. Token is not present.  Used for INT2_TKN. */
  373
  374      %EQU KV_INPFNCTKNTYP_NON = 3;
  375
  376      %EQU KV_INPFNCTKNTYP_HI = 3;
  377      %MEND;
  378      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             15   
  379      /*F* NAME: KV$PRM_SINPUT VIRTUAL DEVICE HANDLER STRUCTURE: SINPUT */
  380
  381      /* Structure describing the SINPUT parameter structure. */
  382
  383      %MACRO KV$PRM_SINPUT (NAME=KV$PRM_SINPUT, LVL=1, LAST=";", STCLASS=BASED);
  384      %LSET LISTDIR = '0'B;
  385      %LSET LISTEXP = '1'B;
  386      %LSET LISTCOM = '0'B;
  387      %LSET LISTSUB = '1'B;
  388      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  389      %IF (STR = 'STA')OR(STR = 'CON')OR(STR = 'EXT');
  390      %LSET INIT = CHARTEXT('INIT');
  391      %LSET ENIT = CHARTEXT('');
  392      %ELSE;
  393      %LSET INIT = CHARTEXT('/*');
  394      %LSET ENIT = CHARTEXT('*/');
  395      %ENDIF;
  396      %IF LVL = 1;
  397      DCL 1 NAME STCLASS ALIGNED,
  398      %ELSE;
  399            %(LVL) NAME,
  400      %ENDIF;
  401      /* DOMAIN */
  402
  403              %(LVL+1) DMN UBIN(8) UNAL %INIT(1)%ENIT,
  404
  405              %(LVL+1) * BIT(8) %INIT('0'B)%ENIT,
  406
  407      /* Position - if non-zero, where to put the cursor on reread or recall */
  408
  409              %(LVL+1) POSITION UBIN %INIT(0)%ENIT,
  410
  411              %(LVL+1) TXT(0:0) CHAR(1) %INIT(' ')%ENIT LAST
  412      %MEND;
  413      %EJECT;

14:54 JUL 28 '97 KV$PRM.:E05SI                                             16   
  414      /*F* NAME: KV$PRM_EDTCTL VIRTUAL DEVICE HANDLER STRUCTURE: EDTCTL */
  415
  416      /* Structure describing the EDTCTL parameter structure. */
  417
  418      %MACRO KV$PRM_EDTCTL (NAME=KV$PRM_EDTCTL, STCLASS=BASED);
  419      %LSET LISTDIR = '0'B;
  420      %VLP_EDTCTL (FPTN=NAME, STCLASS=STCLASS);
  421      %MEND;
  422      /*F* NAME: KV$PRM_LINEATTR VIRTUAL DEVICE HANDLER STRUCTURE: LINEATTR */
  423
  424      /* Structure describing the LINEATTR parameter structure. */
  425
  426      %MACRO KV$PRM_LINEATTR (NAME=KV$PRM_LINEATTR, STCLASS=BASED);
  427      %LSET LISTDIR = '0'B;
  428      %VLP_LINEATTR (FPTN=NAME, STCLASS=STCLASS);
  429      %MEND;
  430      /*F* NAME: KV$PRM_PLATEN VIRTUAL DEVICE HANDLER STRUCTURE: PLATEN */
  431
  432      /* Structure describing the PLATEN parameter structure. */
  433
  434      %MACRO KV$PRM_PLATEN (NAME=KV$PRM_PLATEN, STCLASS=BASED);
  435      %LSET LISTDIR = '0'B;
  436      %VLP_PLATEN (FPTN=NAME, STCLASS=STCLASS);
  437      %MEND;
  438      /*F* NAME: KV$PRM_TRMCTL VIRTUAL DEVICE HANDLER STRUCTURE: TRMCTL */
  439
  440      /* Structure describing the TRMCTL parameter structure. */
  441
  442      %MACRO KV$PRM_TRMCTL (NAME=KV$PRM_TRMCTL, STCLASS=BASED);
  443      %LSET LISTDIR = '0'B;
  444      %VLP_TRMCTL (FPTN=NAME, STCLASS=STCLASS);
  445      %MEND;
  446      /*F* NAME: KV$PRM_TRMATTR VIRTUAL DEVICE HANDLER STRUCTURE: TRMATTR */
  447
  448      /* Structure describing the TRMATTR parameter structure. */
  449
  450      %MACRO KV$PRM_TRMATTR (NAME=KV$PRM_TRMATTR, STCLASS=BASED);
14:54 JUL 28 '97 KV$PRM.:E05SI                                             17   
  451      %LSET LISTDIR = '0'B;
  452      %VLP_TRMATTR (FPTN=NAME, STCLASS=STCLASS);
  453      %MEND;
  454      /*F* NAME: KV$PRM_WINDOW VIRTUAL DEVICE HANDLER STRUCTURE: WINDOW */
  455
  456      /* Structure describing the WINDOW parameter structure. */
  457
  458      %MACRO KV$PRM_WINDOW (NAME=KV$PRM_WINDOW, STCLASS=BASED);
  459      %LSET LISTDIR = '0'B;
  460      %VLP_WINDOW (FPTN=NAME, STCLASS=STCLASS);
  461      %MEND;

