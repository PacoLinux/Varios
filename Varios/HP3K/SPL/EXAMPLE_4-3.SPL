Input/Output
=============

INTEGER CALCULATOR
.,453
ANS = 453
*,5
ANS = 2265
-,22
ANS = 2243
1,20
ANS : 112
1.2
ANS = 56
-, 42
ANS = 14
#,46
ENTRY ERROR
.,46
ANS = 46
-,535
ANS = -489
T


LISTING
========


BEGIN 	<<EXAMPLE 4-3. INTEGER CALCULATOR>>
COMMENT:
		INTEGER CALCULATOR - SINGLE ACCUMULATOR
		INTEGER ARITHMETIC OPERATIONS MAY BE PERFORMED BY ENTERING
		AN OPERATOR CHARACTER FOLLOWED BY AN INIEGER NUMBER. THE OPERATOR
		CHARACTERS ARE:
					. LOAD ACCUMULATOR
					+ ADD
					- SUBTRACT
					* MULTIPLY
					/ DIVIDE
					T TERMINATE
		NO CHECK IS MADE FOR ARIIHMETIC OVERFLOW CONDITIONS.
		NOTE: "INPUT AND "OUTPUT" ARE DUMMY PROCEDURES WHICH SIMULATE
		INPUT, OUTPUT, AND CONVERSION - THEY ARE NOT PART OF SPL/3000;
BYTE ARRAY MSG(0:17):= "INTEGER CALCULATOR":
BYTE ARRAY ERR(0:10):=" ENTRY ERROR";
BYTE ARRAY ANSW(0:5):="ANS = ";
BYTE ASC;
INTEGER ACCUM:=0,
		OPERAND:=0,
		INDEX;
LABEL FUNCTION,
	EXIT;
<<END OF DECLARATIONS>>
		OUTPUT (MSG)	<<PRINT HEADING MESSAGE>>
FUNCTION:
		INPUT(ASC: OPERAND);	<<READ OPERATOR AND VALUE>>
		IF ASC="T" THEN GOTO EXIT:	<<TERMINATE>>
		IF %52<=ASC<=%57 THEN 	<<VALID OPERATOR>>
							INDEX:=ASC-%52
						ELSE	<<INVALID OPERATOR>>
							BEGIN
								OUTPUT(ERR);	<<ERROR>>
								GOTO FUNCTION:	<<RESTART>>
						END:
		CASE INDEX OF	<<INDEX BY OPERATION>>
			BEGIN
				ACCUM:=ACCUM*OPERAND;	<< * FOR MULTIPLY>>
				ACCUM:=ACCUM+OPERAND;	<< + FOR ADD>>
				<<NULL STATEMENT>>;		<< , NO OPERATION>>
				ACCUM:=ACCUM-OPERAND;	<< - FOR SUBTRACT>>
				ACCUM:= OPERAND:		<< . FOR LOAD ACCUMULATOR>>
				ACCUM: ACCUM/OPERAND: 	<< / FOR DIVIDE>>
			END;
		OUTPUT (ANSW,ACCUM);	<<PRINT LABEL AND ACCUMULATOR>>
		GOTO FUNCTION;	<<RESTART>>
EXIT: END	<<INTEGER CALCULATOR>>.



