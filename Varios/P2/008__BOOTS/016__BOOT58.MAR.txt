		.TITLE BOOT58 - Bootstrap command processor
		.IDENT		'V04-000'
;
;****************************************************************************
;*                                                                          *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY                                 *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.                  *
;*  ALL RIGHTS RESERVED.                                                    *
;*                                                                          * 
;*  THIS  SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED  *
;*  ONLY  IN  ACCORDANCE WITH  THE  TERMS  OF   SUCH LICENSE  AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE  OR  ANY  OTHER  *
;*  COPYES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE  TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS   HEREBY  *
;*  TRANSFERED.                                                             *
;*                                                                          * 
;*  THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMINMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.                                                            *
;*                                                                          * 
;*  DIGITAL ASSUMES NO RESPONSIBITITY FOR THE USE  OR  RELIABILITY  OF ITS  *
;*  SOFTWARE ON EQUIPMENT WICH IS NOT SUPPLIED  BY DIGITAL.                 *                                                                                                                                     
;*                                                                          * 
;****************************************************************************
;
; FACILITY: 
;
;		Boostrap command processing module 
;
; ENVIRONMENT:
;
;		Runs at IPL31, kernel mode, memory management is OFF, IS=1
;		(running on interrupt stack), and code must be PIC.
;
; ABSTRACT: 
;
;		This module gains control from the boot block 0 code. The module 
;		processes commands entered interactively from the console 
;		terminal, or commands contained in command procedure files on 
;		the boot device.
;
; Author: 
;
;		Carol Peters		22 March 1979
;
; Modified by:
;
;		V03-003 ACG0392 		Bill Matthews 		9-Jul-84 	
;			Tie off SYS$FILESCAN for TPARSE use
;
;		V03-002 KTA3085 		Bill Matthews 		9-Jul-84 	
;		
;			Add generalized alternate console terminal support
;
;		V03-001 ACG0392 		David N. Cutler 	29-Dec-83 
;
;			Add support for OVSS as the console terminal on Microvax 1.
;
;
;--

			.SBTTL Declarations

;
; Macros
;

			$DSCDEF 							; String descriptor definitions
			$PRDEF 							; Processor registers
			$RPBDEF 							; RPB definitions
			$SSDEF 							; Status code definitions
			$TPADEF							; TPARSE field definitions
;
; Macro to print messages to terminal
;  
 
			.MACRO		MSG,STR
			BSBW		BOO$FACMSG
			.ASCIZ		\'STR'\
			.ENDM		MSG

;
; Equated symbols:
;


			CAR_RETURN			= 13			; ASCI! carriage return code.
			FORM_FEED			= 12 			; ASCII form feed code.
			VERTICAL_TAB		= 11			; ASCI! vertical tab.
			LINE_FEED			= 10			; ASCII lineteed code
			NULL				= 0				; ASCII null character code.

			SADEBUG			= 1				; Include XDELTA in image.
			SAENVIRON			= 1				; Operating standalone.
			TSDEBUG			= 0				; Include DEBUG in image.

			_VIELD CMDO, <-					; Command details bit defs.
					<LOADCMD,,M>,_			; Load command.
					<STARTCMD,,M>,_			; Start command.
					<EXAMCMD,,M>,_			; Examine command.
					<DEPOSITCMD,,M>,_		; Deposit command.
					<HELPCMD,,M>,_			; Help command.
					<BOOTCMD,,M>,_			; Boot command.
					<CMDFILCMD,,M>,_			; Indirect command file.
					<INDIRECT,,M>,_			; Processing indirect file.
					<PHYSICAL,,M>,_			; Physical address.
					<GENERAL,,M>,_			; General register.
					<INTERNAL,,M>,_			; Internal processor register.
					<LONG,,M>,_				; Longword length field.
					<WORD,,M>,_				; Word length field.
					<BYTE,,M>,-				; Byte length field.
					<NULLDEV,,M>,_			; Null boot device.
					<UNATTEND,,M>,_			; Unattended DEFBO0
					>
 
			RPB$V_NODEFBOO	=	RPB$V_MPM	; Reuse this bit as no MA750 exists.
			RPB$M_NODEFBOO	=	RPB$M_MPM

			NUM_OF_CMDS		= 7
			MAX_PROC_REG		= ^X3F

			SAVED_R0			= 0
			SAVED_R1			= 1
			SAVED_R2			= 2
			SAVED_R3			= 3
			SAVED_R4			= 4
			SAVED_R5			= 5
			SAVED_R6			= 6
			SAVED_R7			= 7
			SAVED_R8			= 8
			SAVED_R9			= 9
			SAVED_R10			= 10
			SAVED_R11			= 11
			SAVED_AP			= 12
			SAVED_FP			= 13
			SAVED_SP			= 14
			SAVED_PC			= 15

;
; BOOT58 resides in the upper quarter of the 64k bytes of good memory 
; available during bootstrap operations. The BOOT58 location allows
; VMB to be loaded at <base of memory + ^X200> as usual, and also
; permits the diagnostic supervisor to be loaded at
; <base of memory + ^XE000>. If BOOT58 grows in size, it may be
; necessary to lower its address.
;

			BOOT58_OFFSETT		= ^XC000		; Offset of BOOT58 from start
												; of good memory.

;
;	Own storage.
;

	





























