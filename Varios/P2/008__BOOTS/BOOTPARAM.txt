	.TITLE BOOTPARAM SYSBOOT parameter block definition
	.IDENT ‘V04-000’
;
;****************************************************************************
;*                                                                          *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY                                 *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.                  *
;*  ALL RIGHTS RESERVED.                                                    *
;*                                                                          * 
;*  THIS  SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED  *
;*  ONLY  IN  ACCORDANCE WITH  THE  TERMS  OF   SUCH LICENSE  AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE  OR  ANY  OTHER  *
;*  COPYES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE  TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS   HEREBY  *
;*  TRANSFERED.                                                             *
;*                                                                          * 
;*  THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMINMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.                                                            *
;*                                                                          * 
;*  DIGITAL ASSUMES NO RESPONSIBITITY FOR THE USE  OR  RELIABILITY  OF ITS  *
;*  SOFTWARE ON EQUIPMENT WICH IS NOT SUPPLIED  BY DIGITAL.                 *                                                                                                                                     
;*                                                                          * 
;****************************************************************************
;

;++
;
; Facility:		System bootstrapping and initialization
;
; Abstract:		Define interface between SYSBOOT and INIT for passing
;			bootstrap parameters.
;
; Environment:	This module is linked against SYSBOOT and against INIT; it
;			shares both of their environments.
;
; Author:	TRUDY MATTHEWS.		CREATION DATE:	07-Jan-1981
;
; ModifiED BY:
;
;	V03-006 MMD0245			Meg Dumont		27_Feb-1984		10:44
;			Add support fot $MTACCESS intalation specific accesibility
;			routine
;
;
; Equated Symbols:
;

		.SBTTL parameters

;++
;
;
;
;
;
;
;
;
;
;--

;
; Put the data in a psect contigous to INIT’s Z$INIT000 psect, so init can
; define a symbol unique to SYS.EXEfor the base of this module,
;
		.PSECT  Z$INIT0001,LONG
BOO$A_BOOPARAM::						; Define base of module.

;
; Describe where SYSBOOT has loaded the various drivers and loadable code














;
; Include files:
;
	$ACFDEF
	$IODEF	
	$IPLDEF 
	$LCKDEF
	$PRCPOLDEF					; Define process poller mailbox offsets
	$SBDEF 
	$SSDEF					; System status definitions
	$SYSGMSGDEF					; Sysgen messages

;
; Equated Symbols
;
WRTATNFLG = <IO$_SETMODE!IO$M_WRTATTN>
READFLG   = <IO$_READVBLK!IO$M_NOW>

SERVER = 0 	; Offsets into process info block
DEVICE = 16
DRIVER = 18
SPPB   = 27

;
; Macros
;
		.MACRO	PRCINFO	SERVER,DEVICE,DRIVER		; Builds process info table

		.PSECT 	INFO_BLOCK						; Actual data area

$SERVERNAME$ = .
		.ASCII  /                /				; Reserve room for all 16 chars
$NAMEND$ = .
. = $SERVERNAME$
		.ASCII  /SERVER/
. = $NAMEND$
		.ASCII  /DEVICE/
		.ASCIC  /DRIVER/
		.LONG   0

		.PSECT  INFO_PTR

		.LONG   $SERVERNAME$

		.ENDM
;
; Own Storage
;
		.PSECT  INFO_PTR
PROC_INFO:
		PRCINFO MSCP$DISK,DU,DUDRIVER			; Build the process info table
		PRCINFO MSCP$TAPE,MU,TUDRIVER

		.PSECT  INFO_PTR
		.LONG   0
		.BLKL   4

		.PSECT  INFO_BLOCK
		.BLKB   <SPPB+4>+4					; Patch area for data

		.PSECT  NONPAGED_DATA,NOEXE,WRT
FULL_NAME:			.BLKB   22					; Storage area for cluster dev name
DEVNAME:			.BLKB    5					; Storage area for short dev name

EXIT_BLOCK:			.LONG   0
				.LONG   EXIT_HANDLER
				.LONG	   1
			 	.LONG   EXIT_STATUS
EXIT_STATUS:		.NLKL   1

KARGLST:			.LONG   SPPBARG
SPPBARG:			.LONG   0

MSGBUFSIZ:			.LONG   PRCPOL$C_SIZ
MSGBUF:			.LBLK   PRCPOL$C_SIZ

MBXCHAN:			.WORD   0
STATUS_BLOCK:		.BLKL   2
		
		.PSECT	PAGED_CODE,EXE,WRT
PURGE_LIMITS:
		.LONG		O
		.LONG		^X7FFFFFFF

		
		.SBTTL	CONFIGURE - Configure devices

;++
;
;  PURPOSE
;
;  INPUT
;
;  OUTPUT
;
;  FUNCTIONAL DESCRIPTION
;
;
;
;
;—-

		.ENTRY BOO$CONFIGURE, ^M<R2,R3,R4>

;
;  Create mailbox used to comunicate with process poller
;
		$CREMBX_S		prmflg   = #1,-
					chan     = MBXCHAN,-
					promsk   = #^XFF00
		BLBC	   R0,10$
;
;  Declare exit handler to be used when image exits
;
		$DCLEXH_S		desblk   = EXIT_BLOCK
		BLBC	   R0,10$
;
;  Now request polling on all processes
;
		$CMKRNL_S		REQ_POLL,(AP)
		BLBC	   R0,10$
;
;  We are finished requesting polling. Now set a write attenttion AST
;  and hibernate while waiting for responses from the poller.
;  (We assume that at least one call to SC$POLL_MBX was successful).
;
		$QIO_S  chan	= MBXCHAN,-
			  func	= #WRTATNFLG,-
			  p1		= FOUND_PROC,-
			  p2		= PROC_INFO
		BLBC	  R0,10$

		$PURGWS_S inadr	= PURGE_LIMITS	; minimize system resources
		$HIBER_S
		RET

;
;  An error occured on the create mailbox, when calling the process
;  poller, or when issuing the QIO.  Send out the error message and terminate.
;  The exit handler (if declared at this point) will clean up.
;
10$:		MOVL		#SYSG$_CONFIGERR,R0
		BSBW		PUTERROR
		$EXIT_S
		RET
;
;  Request polling on all processes we want to know about
;
REQ_POLL:			.WORD	0

		SETIFL	#IPL$_ASTDEL
		MOVZWL	MBXCHAN,R3
		MOVAB		PROC_INFO,R4
		MOVL		(R4)+,R2

10$:		MOVL		R3,R0
		JSB		SCS$POLL_MBX
;
; R1 contains address of SPPB - need later to cancel polling
; R2 is preserved and points to process info block
;
		BLBC		R0,20$			
		MOVL		R1,SPPB(R2)			; Save SPPB
		MOVL		(R4)+,R2			; Get next process name
		BNEQ		10$				; If NEQ, poll for it
		MOVZBL	#SS$:NORMAL,R0		; Indicate success

20$:
		SETIPL	#0				; Lower IPL
		RET						; Return error to caller

		
		.SBTTL 	FOUND_PROC - A process has been found by the poller
;++
















;- -

		,ENTRY FOUND_PROC, ^M<R2,R3,R4,R5,R6>

;
; Before doing anything else, we requeue the write attention AST request
;

	$QUIO_S	chan		= MBXCHAN,-
			func		= #WRTATNFLG,-
			p1		= FOUND_PROC,-
			p2		= PROC_INFO
	BLBC		R0,30$

;
; Now, read mailbox messages until there are none left
;
10$:	$QUIO_S	chan		= MBXCHAN,-
			func		= #READFLG,-
			iosb		= STATUS_BLOCK,-
			p1		= MSGBUF,-
			p2		= MSGBUFSIZ
	BLBC		R0,40$
	MOVAB		STATUS_BLOCK,R4
	CMPW		(R4),#SS$_ENDOFFILE
	BEQL		20$
	BLBC		(R4),40$
	BSBW		PROCESS_MSG
	BRB		10$
20$:	RET

;
;  An error has occurred when trying to requeue the write attention AST.
;  Have the image exit.
;
30$:
	MOVL		#SYSG$_CONFIGERR,R0
	BSBW		PUTERROR
	$EXIT_S
	RET

;
;
;
;
40$:
	MOVL		#SYSG$_CONFIGERR,R0
	BSBW		PUTERROR
	RET

		.SBTL		PROCESS_MSG - Do the work of configuring the device

;++














;--

PROCESS_MSG:
		PUSHR		#^M<R2,R3,R4,R5,R6>		; Save registers touched here
		CALLS		#0,BOO$CONRESET

;
;
;
;
		MOVAB		MSGBUF,R6
		MOVAB		PROC_INFO,R4

10$:		MOVL		(R4)+,R5				; Get next entry
		BEQL		20$
		CMPC3		#16,SERVER(R5),PRCPOL$B_PRCNAM(R6)		; Compare
		BNEQ		10$

;
;
;
;
		MNEGL		#1,BOO$GL_CONADP
		CLRL		BOO$GL_CONCUNIT
		CLRL		BOO$GL_CONAUNIT
		MOVQ		PRCPOL$L_SYSIDL(R6),BOO$GQ_CONSYSID
		MOVAB		DRIVER(R5),BOO$GL_CONDRV
		MOVAB		PRCPOL$T_NODNAM(R3),R2
		PUSHR		#^M<R5>
		MOVAB		DEVICE(R5),R5
		BSBB		BLDNAME
		POPR		#^M<R5>

;
;
;
;
		CALLS		#0,BOO$CONNECT
		BLBS		R0,15$
		$CMKRNL_S	ROUTIN	= 30$
		BLBC		R0,25$

;
;  All done
;
15$:		POPR		#^M<R2,R3,R4,R5,R6>		; Restore register touched here
		RSB

;
;  There was no process name match - we got a spurious mailbox message
;
20$:
		MOVL		#sysg$_configerr,r0
25$:		BSBW		PUTERROR
		POPR		#^M<R2,R3,R4,R5,R6>
		RSB

;
;  There was an error connecting the device - CONNECT already let the
;  world know.
;
30$:
		.WORD		0
		MOVAB		PRCPOL$L_SYSIDL(R6),R2		; Get system ID
		MOVL		SPPB(R5),R1
		MOVZBL	#1,R0
		SETIPL	#IPL$_SCS
		JSB		G^SCS$POLL_MODE
		SETIPL	#IPL$_ASTDEL
		BLBS		R0,35$
		MOVL		#SYSG$_CANTPOLL,R0
35$:		RET

		.SBTTL	BLDNAME
;++















;--

BLDNAME:
		PUSHR		#^M<R0,R1,R2,R3,R4,R5>	
		MOVAB		FULL_NAME,R3
		MOVAB		(R3)+,G^FULL_NAME_PTR	
		ASSUME	ST$T_NODENAME+16,EQ,SB$L_DDB
		MOVZBL	(R2)+,R4
		PUSHR		#^M<R2,R4,R5>
		MOVC3		R4,(R2),(R3)
		POPR		#^M<R2,R4,R5>

		MOVB		#^A/$/,(R3)+
		MOVW		(R5),(R3)
		MOVB		#^A/A/,2(R3)
		ADDB3		#4,R4,FULL_NAME
		MOVL		(R3),DEVNAME+1
		MOVB		#3,DEVNAME
		MOVAB		DEVNAME,BOO$GL_CONDEV
		POPR		#^M<R0,R1,R2,R3,R4,R5>

		RSB


		.SBTTL 	EXIT_HANDLER

;++







;—
		
		.ENTRY	EXIT_HANDLER, ^M<R2,R3,R4>

		MOVAB		PROC_INFO,R3

10B:		MOVL		(R3)+,R4
		BEQL		20$
		MOVL		SPPB(R4),SPPBARG
		BEQL		10$
		$CMKRNL_S	routin=CANCEL_POLL,-
				arglst=KARGLST
		CLRL		SPBB(R4)
		BRB		10$

20B:		$DELMBX_S	chan=MBXCHAN
		$CMEXEC_S	routin=DQLOCKS
		MOVZWL	#SS$_NORMAL,R=
		RET

;
;  Kernel mode routine running at IPL$_ASTDEL wich cancels the polling mailbox
;
		.ENTRY	CANCEL_POLL,^M<R2>

		SETIPL	#IPL$_ASTDEL
		MOVL		4(AP),R1
		JSB		SCS$CANCEL_MBX
		SETIPL	#0
		RET
;
;  Exec mode routine do dequeue all locks held
;
		.ENTRY	DQLOCKS,^M<>

		$DEQ_S	lkid		= #0,-
				flags		= #LCK$M_DEQALL
		RET

		.END





































