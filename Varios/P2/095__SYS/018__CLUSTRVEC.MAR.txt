		.IF		NDF,PRMSW
		.TITLE	CLUSTRVEC - Cluster Loadable Code Vectors
		.IFF
		.TITLE	CLUSTRLOA - Cluster Loadable Code
		.ENDC
		.IDENT	'V04-000'
		
;
;*******************************************************************************
;*
;


















;*******************************************************************************
;

;++
;
; FACILITY:			Executive, system services and fork level code
;
; ABSTRACT:
;		This module contains the entry point vectors used to implement
;		VMS cluster funtions as well as the table used to hook up those
;		vectors to the actual routines. This module is assembled in tho
;		different ways. If PRMSW is defined the resultant module (CLUSTRLOA)
;		is linked with the acttual Loadable routines. If PRMSW is undefined,
;		the resultant module (CLUSTRVEC) is linked with SYS.EXE.
;
; ENVIRONMENT:	Kernel mode, fork level
;
;--
;
; AUTHOR; Steve Beckhardt,		CREATION DATE: 6-Jan-1983
;
; MODIFIED BY:
;
;
;
;
;
;








































































;

		.SBTTL DECLARATIONS
;
; INCLUDE FILES;
;

;
; MACROS:
;

		.IF		DF,PRMSW
		$DYNDEF						; Data structure names
		.IF TRUE_FALSE
		$SLVDEF						; Loadable vector definitions

;
; EQUATED SYMBOLS:
;

;
; VECTOR LIST
;

		IF _TRUE					; For inclusion with loadable code
		
		.PSECT	___999,4			; Octaword alignment
		
PATCH_BEGIN:
		.BLKB	256					; Patch space
PATCH_END:

CLULOA_END:							; End of loadable code

		.PSECT	$$$000,4
		
CLULOA_START:
		SLVTAB	END		=		CLULOA_END, -
				INITRTN	=		CLULOA_INIT, -
				SUBTYP	=		DYN$C_LC_CLS, -
				FACILITY=		<CLUSTER>
				
		.IF FALSE						; For inclusion with SYS.EXE
		.PSECT	$$$500,LONG
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		LOADVEC	CLU$GL_ADDR,1,,CLULOA_START	; Cluster code load address
		LOADVEC	LCK$SND_CVTREQ
		LOADVEC	LCK$SND_LOCKREQ
		LOADVEC	LCK$SND_GRANTED
		LOADVEC	LCK$SND_DEQGR
		LOADVEC	LCK$SND_DEQCV
		LOADVEC	LCK$SND_DEQWT
		LOADVEC	LCK$SND_BLKING
		LOADVEC	LCK$SND_RMVDIR
		LOADVEC	LCK$SND_TIMESTAMP_RQST
		LOADVEC	LCK$SND_SRCHDLCK
		LOADVEC	LCK$SND_DLCFKFND
		LOADVEC	LCK$SND_REDO_SRCH
		LOADVEC	LCK$CVT_ID_IO_LKB
		LOADVEC	CNX$ALLOC_CDRP
		LOADVEC	CNX$ALLOC_CDRP_ONLY
		LOADVEC CNX$ALLOC_WARMCDRP
		LOADVEC CNX$ALLOC_WARMCDRP_CSB
		LOADVEC CNX$DEALL_MSG_BUF_CSB
		LOADVEC CNX$DEALL_WARMCDRP_CSB
		LOADVEC CNX$INIT_CDRP
		LOADVEC CNX$SEND_MNT_MSGS
		LOADVEC CNX$SEND_MSG
		LOADVEC CNX$SEND_MSG_CSB
		LOADVEC CNX$SEND_MSG_RESP
		LOADVEC CNX$SEND_MSG_RSPID
		LOADVEC CNX$BLOCK_XFER
		LOADVEC CNX$BLOCK_XFER_IRP
		LOADVEC CNX$PARTNER_INIT_CSB
		LOADVEC CNX$BLOCK_READ
		LOADVEC CNX$BLOCK_READ_IRP
		LOADVEC CNX$BLOCK_WRITE
		LOADVEC CNX$BLOCK_WRITE_IRP
		LOADVEC CNX$PARTNER_FINISH
		LOADVEC CNX$PARTNER_RESPOND
		LOADVEC CNX$CHANGE_QUORUM
		LOADVEC CNX$SHUTDOWN
		LOADVEC CNX$POWER_FAIL,,CLU_RSB
		LOADVEC CNX$DISK_CHANGE
		LOADVEC CNX$BUGCHECK_CLUSTER
		LOADVEC EXE$ALLOC_CSD
		LOADVEC EXE$DEALLOC_CSD
		LOADVEC EXE$CSP_CRDCST
		LOADVEC EXE$CSP_CALL
		LOADVEC EXE$CSP_COMMAND
		LOADVEC EXE$CSP_BRKTHRU
		LOADVEC LKI$SND_STDREQ
		LOADVEC LKI$SND_BLKING
		LOADVEC LKI$SND_BLKBY
		LOADVEC LKI$SND_LOCKS
		
		.IF TRUE							; End of vector list
		.LONG	-1
		
CLULOAD_INIT:								; Initialization code
		BSBW	CNX$INIT					; Do initialization
		BSBW	CNX$QUORUM_INIT				; Perform quorum file initialization
		BLBC	R0,20$						; Branch on error
		BSBW	CSP$INIT					; Do load CSP code initialization
		
		; If the $ENQ and $DEQ system services (module SYSENQDEQ) are linked
		; with this (for debugging purposes) then hook up the system service
		; vectors to point these routines.
		; NOTE: The SYSGEN parameter SYSPAGING MUST be set to 0 for this
		; to. work.
		
		.WEAK	EXE$$ENQ,EXE$$DEQ
		
		TSTL	#EXE$$ENQ					; Is loadable $ENQ service present?
		BEQL	10$							; Not linked with this module
		JSB		G^INI$WRITABLE				; Make system writable
		MOVW	B^30$,G^EXE$ENQ+2			; Move JMP @#to start of resident
		MOVW	B^30$,G^EXE$DEQ+2			; services
		MOVAB	W^EXE$$ENQ+2,G^EXE$ENQ+4	; Move addresses of loadable services
		MOVAB	W^EXE$$DEQ+2,G^EXE$DEQ+4	; to complete JMP @# instructions
		JSB		G^INI$RDONLY				; Make system readonly again
		
10$:	MOVAB	G^EXE$GL_NONPAGED+4,R3		; Adress of non-paged pool listhead
		MOVAB	W^CLULOA_START,R0			; Adress of block to deallocate
		MOVZWL	#CLULOA_INIEND-CLULOA_START,R1	; Length of block to deallocate
		SUBW3	R1,8(R0),W^CLULOA_INIEND+8		; Ccompute new length
		BRW		DEALLOCATE					; Deallocate this piece of memory
		
20$:	RSB									; Return

30$:	JMP		G^EXE$ENQ					; ABsolute jump instruction

; Descriptor for patch space available in this module
; Note that this space is deallocated when the code is loaded
;
CNX$PATCH::
		.WORD	PATCH_END-PATCH_BEGIN
		.WORD	0
		.LONG	PATCH_BEGIN
		
		.PSECT $$$010,4						; Octaword alignment
		
; When initialization is complete and the initialization code is
; deleted, this block is left at the head of the remaining code.
;
		.ALIGN	4
CLULOA_INIEND:								; End of initialization code
		SLVTAB	END		=		CLULOA_END, -
				SUBTYP	=		DYN$C_LC_CLS, -
				FACILITY=		<CLUSTER>
				
				
DEALLOCTE:
		JSB		G^EXE$DEALLOCATE			; Free initialization code
		MOVZWL	S^#SS$_NORMAL,R0			; Set success status
		RSB
		
		.ENDC
				
		.END
		
		
		