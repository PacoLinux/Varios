PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26
TABLE OF CONTENTS

     7-    1	**** PRSFND VERSION M0120 ****
     8-   49	.WPARS - WILD CARD UIC PARSE
    10-  102	.FNDNX - FIND THE NEXT FILE
    11-  201	.NXDIR - FIND NEXT WILD CARD DIRECTORY
    12-  323	.WLDVC - CHECK FOR WILD CARDS WITH DEFAULT VERSION
    13-  350	USEFUL SUBROUTINES
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 7


      1						.TITLE	PRSFND M0120, PARSE, FIND, ETC.
						.SBTTL	**** PRSFND VERSION M0120 ****
						.IDENT	/M0120/
      2					; ALTERED:
      3					; E. H. MARISON	27-FEB-77 13:42 (TAKE <*> AND <*,*>)
      4					; ANDREW C. GOLDSTEIN  13-FEB-78  19:25
      5					; ALTERED THURSDAY 22-AUG-74 12:10
      6					;
      7					; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD MASS.
      8					; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD MASS.
      9
     10					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
     11					; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     12					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     13					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     14
     15					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     16					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     17					; EQUIPMENT CORPORATION.
     18
     19					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY
     20					; OF ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     21					;
     22					; PETER H. LIPMAN 12-JUNE 73
     23					;
     24						.MCALL	NBOF$L,IOERR$,FILIO$
     25	000000					NBOF$L			;DEFINE FNB OFFSETS LOCALLY
     26	000000					IOERR$			;DEFINE I/O ERROR CODES LOCALLY
     27	000000					FILIO$			;DEFINE THE I/O FUNCTION CODES LOCALLY
     28					;
     29						.MCALL	CALL,RETURN,FDBDF$,FDAT$A,FDOP$A,FCSBT$
     30					;
     31	000000					FCSBT$	DEF$L
     32	000000					FLDSOF			;DEFINE FILE DESCRIPTOR OFFSETS
     33					;
     34		000400 				NB.SD1=400		;WILD CARD IN PROJECT #
     35		001000 				NB.SD2=1000		;WILD CARD IN PROGRAMMER #
     36		001400 				NB.SDI=NB.SD1!NB.SD2	;WILD CARD IN DIRECTORY
     37					;
     38					; SCRATCH STORAGE FOR WILD UIC LOGIC CONSISTS
     39					; OF A FILE NAME BLOCK FOLLOWED BY THE FOLLOWING EXTRA WORDS
     40		000036 				N.WNM1=S.FNB		;2 WORDS FOR RAD50 NON WILD CARD
     41									;PROJECT OR PROGRAMMER NAME
     42		000042 				N.WNM2=N.WNM1+4		;5 WORDS OF STRING STORAGE FOR
     43									;ASCII FORM OF CURRENT DIRECTORY NAME
     44		000054 				S.WUIC=S.FNB+14.	;NO. OF BYTES IN SCRATCH AREA
     45					;
     46		015172 				DIRTYP=<'D-100>*50*50+<<'I-100>*50>+<'R-100> ;.RAD50 DIR
     47		140116 				MFDNAM=<'0-22>*50*50+<<'0-22>*50>+<'0-22> ;.RAD50 000
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 8
.WPARS - WILD CARD UIC PARSE

     49						.SBTTL	.WPARS - WILD CARD UIC PARSE
     50					;
     51	000000					PURE.I
     52					;+
     53					; WILD CARD UIC PARSE
     54					; CALLING SEQUENCE:
     55					;	CALL	.WPARS
     56					; INPUTS:
     57					;	R0=FDB
     58					;	R1=FILE NAME BLOCK ADDRESS
     59					;	R2=FILE DESCRIPTOR POINTER
     60					;	R3=DEFAULT FILE NAME BLOCK
     61					;	R4=ADDR OF SCRATCH AREA FOR WILD UIC LOGIC
     62					; OUTPUTS:
     63					;	C=0 IF SUCCESSFUL, C=1 IF ERROR
     64					;	ALL REGISTERS PRESERVED
     65					; OPERATION:
     66					;	PERFORMS A NORMAL CALL TO .PARSE, AND IF A BAD DIRECTORY
     67					; INDICATION IS RETURNED, ATTEMPTS TO PARSE AND SET UP FOR WILD UIC'S
     68					; IF A SUCCESSFUL INDICATION IS RETURNED, THE DIRECTORY ID
     69					; IS SET UP POINTING AT THE FIRST DIRECTORY TO BE USED
     70					;-
     71	000000	012764 	000050 	000020 	.WPARS::MOV	#NB.SNM!NB.SVR,N.STAT(R4)
     72	000006					CALL	.PARSE
     73	000012	103056 				BCC	60$		;BRANCH IF PARSE SUCCESSFUL
     74	000014	122760 	177714 	000000G		CMPB	#IE.BDI,F.ERR(R0) ;BAD DIRECTORY NAME?
     75	000022	001051 				BNE	58$		;BRANCH IF NO, REPORT ERROR
     76					; SEE IF WILD CARD DIRECTORY NAME
     77	000024	005762 	000004 			TST	N.DIRD(R2)	;IF NULL DIRECTORY DESCRIPTOR
     78	000030	001446 				BEQ	58$		;THEN REPORT ERROR
     79	000032					CALL	PRSDIR
     80	000036	103444 				BCS	60$		;BRANCH IF BAD DIRECTORY SYNTAX
     81	000040	032764 	001400 	000020 		BIT	#NB.SDI,N.STAT(R4)
     82	000046	001437 				BEQ	58$		;BRANCH IF NO WILD UIC'S
     83					; IT'S A WILD CARD DIRECTORY NAME
     84	000050	012764 	015172 	000014 		MOV	#DIRTYP,N.FTYP(R4) ;FILE TYPE "DIR"
     85	000056	005064 	000022 			CLR	N.NEXT(R4)
     86	000062	012764 	177777 	000024 		MOV	#-1,N.DID(R4)	;DOING FIND'S IN MFD
     87	000070	012764 	177777 	000026 		MOV	#-1,N.DID+2(R4)
     88	000076	005064 	000030 			CLR	N.DID+4(R4)
     89	000102	016164 	000032 	000032 		MOV	N.DVNM(R1),N.DVNM(R4)
     90	000110	016164 	000034 	000034 		MOV	N.UNIT(R1),N.UNIT(R4)
     91	000116					CALL	.NXDIR		;SET UP TO USE THE NEXT DIRECTORY
     92	000122	103412 				BCS	60$
     93	000124					CALL	.PARSE
     94	000130	016446 	000020 			MOV	N.STAT(R4),-(SP)
     95	000134	042716 	176377 			BIC	#^C<NB.SDI>,@SP
     96	000140	052661 	000020 			BIS	(SP)+,N.STAT(R1) ;SET WILD DIR BITS IN FNB STATUS
     97	000144					RETURN
     98	000146	000261 			58$:	SEC
     99	000150				60$:	RETURN
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 10
.FNDNX - FIND THE NEXT FILE

    102						.SBTTL	.FNDNX - FIND THE NEXT FILE
    103					;+
    104					; FIND THE NEXT FILE IN THIS (OR NEXT) DIRECTORY
    105					; CALLING SEQUENCE:
    106					;	CALL	.FNDNX
    107					; INPUTS:
    108					;	R0=FDB ADDRESS
    109					;	R1=FILE NAME BLOCK ADDRESS
    110					;	R2=ADDRESS OF SCRATCH BLOCK FOR UIC WILD CARD LOGIC
    111					; OUPUTS:
    112					;	C=0 IF SUCCESSFUL, C=1 IF FAILURE
    113					;	ALL REGISTERS PRESERVED
    114					; OPERATION:
    115					;	FINDS THE NEXT FILE IN THE CURRENT DIRECTORY (EVEN IF
    116					; WILD CARD NAME, TYPE AND DEFAULT VERSION).  OPTIONALLY WILL
    117					; CROSS TO THE NEXT WILD CARD DIRECTORY IF R2 NON ZERO (AND
    118					; IF WILD CARD UIC'S ARE PRESENT).
    119					;-
    120						.ENABL	LSB
    121
    122	000152	032761 	020000 	000020 	.FNDNX::BIT	#NB.NXD,N.STAT(R1) ; CHECK IF "NEXT DIRECTORY" FLAG IS ON
    123	000160	001107 				BNE	90$		; YES - FORCE NEXT DIRECTORY
    124	000162	005767 	000000C			TST	TDRFDB+F.FNB+N.DID ; SEE IF SCRATCH DIRECTORY IS IN USE
    125	000166	001007 				BNE	FNDNX1		; BRANCH IF YES
    126	000170					CALL	.FIND
    127	000174	103074 				BCC	FNDNX2		; BRANCH IF OK
    128	000176	126027 	000000G	177777 		CMPB	F.ERR(R0),#IE.BAD ; CHECK FOR WILD CARD, DEFAULT VERSION
    129									; NOT SUPPORTED (OLD SYSTEM)
    130	000204	001070 				BNE	FNDNX2		; BRANCH IF ANYTHING ELSE
    131					;
    132					; HANDLE THE SPECIAL CASE OF WILD CARD FIND OF NEWEST OR OLDEST VERSION
    133	000206	005761 	000022 		FNDNX1:	TST	N.NEXT(R1)	;FIRST FILE IN CLASS?
    134	000212	001003 				BNE	10$		;BRANCH IF NOT
    135	000214					CALL	TDRINI		;YES, INIT TEMP DIRECTORY
    136	000220	103444 				BCS	40$		;BRANCH IF FAILED
    137	000222	016146 	000016 		10$:	MOV	N.FVER(R1),-(SP)
    138	000226	016146 	000020 		20$:	MOV	N.STAT(R1),-(SP)
    139	000232	052761 	000010 	000020 		BIS	#NB.SVR,N.STAT(R1) ;FIND ANY VERSION FIRST
    140	000240					CALL	.FIND
    141	000244	103441 				BCS	60$		;BRANCH IF NO MORE FILES
    142	000246	016146 	000022 			MOV	N.NEXT(R1),-(SP)
    143	000252	005061 	000020 			CLR	N.STAT(R1)
    144	000256	005061 	000022 			CLR	N.NEXT(R1)
    145	000262	016661 	000004 	000016 		MOV	4(SP),N.FVER(R1) ;SAVED FILE VERSION (0 OR -1)
    146	000270					CALL	.FIND		;FIND NEWEST (OR OLDEST)
    147	000274	103422 				BCS	50$		;BRANCH IF FAILED (SHOULDN'T HAPPEN)
    148	000276					CALL	TDRENT		;HAVE WE ALREADY FOUND THIS ONE
    149	000302	012661 	000022 			MOV	(SP)+,N.NEXT(R1)
    150	000306	012661 	000020 			MOV	(SP)+,N.STAT(R1)
    151	000312	103402 				BCS	30$
    152	000314	005726 				TST	(SP)+		;POP THE SAVED VERSION
    153	000316	000455 				BR	FNDNX3
    154					; IF DUPLICATE ERROR, WE'VE SEEN THIS FILE BEFORE, DON'T "FIND" IT AGAIN
    155	000320	122767 	177707 	000000C	30$:	CMPB	#IE.DUP,TDRFDB+F.ERR
    156	000326	001737 				BEQ	20$		;GO FIND ANOTHER
    157	000330	005726 				TST	(SP)+
    158					;
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 10-1
.FNDNX - FIND THE NEXT FILE

    159					; ERROR FROM INIT OR ENTER IN TMP DIRECTORY
    160	000332	116760 	000000C	000000G	40$:	MOVB	TDRFDB+F.ERR,F.ERR(R0)
    161	000340	000411 				BR	80$
    162					;
    163					; COULDN'T FIND NEWEST OR OLDEST VERSION - CAN'T THINK OF A REASON
    164	000342	012661 	000022 		50$:	MOV	(SP)+,N.NEXT(R1)
    165	000346	000402 				BR	70$
    166					;
    167					; FAILED TO FIND NEXT FILE IN CLASS, ALL DONE
    168	000350				60$:	CALL	TDRDEL		;DELETE THE TEMP DIRECTORY
    169	000354	012661 	000020 		70$:	MOV	(SP)+,N.STAT(R1)
    170	000360	012661 	000016 			MOV	(SP)+,N.FVER(R1)
    171	000364	000261 			80$:	SEC
    172	000366	103031 			FNDNX2:	BCC	FNDNX3
    173	000370	122760 	177746 	000000G		CMPB	#IE.NSF,F.ERR(R0) ;IF "NO SUCH FILE"
    174	000376	001023 				BNE	100$		;BRANCH IF NOT
    175	000400	005702 			90$:	TST	R2		;ALLOWED TO CROSS DIRECTORIES?
    176	000402	001421 				BEQ	100$		;BRANCH IF NOT
    177	000404	032761 	001400 	000020 		BIT	#NB.SDI,N.STAT(R1) ;ANY WILD UIC'S
    178	000412	001415 				BEQ	100$		;BRANCH IF NOT
    179	000414	010346 				MOV	R3,-(SP)
    180	000416	010446 				MOV	R4,-(SP)
    181	000420	010204 				MOV	R2,R4
    182	000422	016002 	000000G			MOV	F.DSPT(R0),R2
    183	000426	016003 	000000G			MOV	F.DFNB(R0),R3
    184	000432					CALL	.NXDIR
    185	000436	010402 				MOV	R4,R2
    186	000440	012604 				MOV	(SP)+,R4
    187	000442	012603 				MOV	(SP)+,R3
    188	000444	103242 				BCC	.FNDNX		;IF FOUND NEW DIRECTORY, FIND NEXT FILE
    189	000446	000261 			100$:	SEC
    190	000450	000412 				BR	110$
    191	000452	005761 	000022 		FNDNX3:	TST	N.NEXT(R1)	; SEE IF THERE ARE NAME LEVEL WILD CARDS
    192	000456	001007 				BNE	110$		; BRANCH IF YES
    193	000460	032761 	001400 	000020 		BIT	#NB.SDI,N.STAT(R1) ; CHECK FOR WILD CARD UIC
    194	000466	001403 				BEQ	110$		; BRANCH IF NOT
    195	000470	052761 	020000 	000020 		BIS	#NB.NXD,N.STAT(R1) ; FORCE NEW DIRECTORY ON NEXT FIND
    196									; IN CASE OF WILD UIC, SINGLE NAME
    197	000476				110$:	RETURN
    198
    199						.DSABL	LSB
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 11
.NXDIR - FIND NEXT WILD CARD DIRECTORY

    201						.SBTTL	.NXDIR - FIND NEXT WILD CARD DIRECTORY
    202					;+
    203					; SET UP FOR NEXT WILD CARD DIRECTORY
    204					; CALLING SEQUENCE:
    205					;	CALL	.NXDIR
    206					; INPUTS:
    207					;	R0=FDB ADDRESS
    208					;	R1=FILE NAME BLOCK ADDRESS
    209					;	R2=FILE DESCRIPTOR POINTER
    210					;	R3=DEFAULT FILE NAME BLOCK
    211					;	R4=ADDR OF SCRATCH AREA FOR WILD UIC LOGIC
    212					; OUTPUTS:
    213					;	C=0 IF SUCCESSFUL, C=1 IF FAILED
    214					;	ALL REGISTERS PRESERVED
    215					; OPERATION:
    216					;	FINDS THE NEXT DIRECTORY THAT MEETS THE WILD CARD CRITERIA
    217					; IF ONLY THE PROJECT # WAS WILD, THEN THE PROG NAMES MUST MATCH
    218					; AND VICE-VERSA.  DIRECTORY NAMES OF MORE THAN 6 CHARS WILL NOT
    219					; SATISFY THE MATCH, AND LIKEWISE, ANY NAME BEGINNING WITH 000
    220					; (RAD50) WILL ALSO NOT MATCH.  THIS MEANS THE MFD WILL
    221					; NOT BE FOUND.
    222					;	WHEN A DIRECTORY IS FOUND, IT'S ID IS PLACED
    223					; IN THE DIRECTORY ID SLOT IN THE FILE NAME BLOCK.
    224					; ALSO THE DIRECTORY STRING IS GENERATED AND POINTED TO BY F.DSPT
    225					; IF PRESENT, OR THE DIRECTORY ID IS PUT INTO THE
    226					; DEFAULT NAME BLOCK IF IT IS PRESENT.
    227					;-
    228	000500	042761 	020000 	000020 	.NXDIR::BIC	#NB.NXD,N.STAT(R1) ;CLEAR DIRECTORY CROSSING FLAG
    229	000506	032764 	001400 	000020 		BIT	#NB.SDI,N.STAT(R4) ;WILD CARD UIC'S?
    230	000514	001564 				BEQ	90$		;BRANCH IF NO
    231	000516					CALL	$SAVAL
    232	000522	010146 			10$:	MOV	R1,-(SP)
    233	000524	010401 				MOV	R4,R1
    234	000526					CALL	.FIND		;FIND THE NEXT DIRECTORY
    235	000532	012601 				MOV	(SP)+,R1
    236	000534	103560 				BCS	100$
    237					; FOUND ONE, SEE IF IT MATCHE OUR REQUIREMENTS
    238	000536	022764 	140116 	000006 		CMP	#MFDNAM,N.FNAM(R4) ;DON'T ALLOW MFD
    239	000544	001766 				BEQ	10$
    240					; MATCH PROJ OR PROG NAME IF NECESSARY
    241	000546	032764 	000400 	000020 		BIT	#NB.SD1,N.STAT(R4) ;WILD CARD PROJ #?
    242	000554	001004 				BNE	20$		;BRANCH IF YES
    243	000556	026464 	000036 	000006 		CMP	N.WNM1(R4),N.FNAM(R4)
    244	000564	001356 				BNE	10$		;BRANCH IF PROJ NAMES DISAGREE
    245	000566	032764 	001000 	000020 	20$:	BIT	#NB.SD2,N.STAT(R4) ;WILD CARD PROGRAMMER #?
    246	000574	001007 				BNE	30$		;BRANCH IF YES
    247	000576	026464 	000040 	000010 		CMP	N.WNM1+2(R4),N.FNAM+2(R4)
    248	000604	001346 				BNE	10$		;BRANCH IF PROG NAMES DISAGREE
    249	000606	005764 	000012 			TST	N.FNAM+4(R4)	;NO 7-9 CHAR NAMES
    250	000612	001343 				BNE	10$
    251					; THIS DIRECTORY IS JUST FINE, SET UP THE FILE NAME BLOCK DIRECTORY ID
    252					; AND ALSO SET THE DIR NAME POINTER IN F.DSPT IF PRESENT
    253					; OR THE DIRECTORY ID IN F.DFNB IF F.DSPT IS 0
    254	000614	016461 	000000 	000024 	30$:	MOV	N.FID(R4),N.DID(R1)
    255	000622	016461 	000002 	000026 		MOV	N.FID+2(R4),N.DID+2(R1)
    256	000630	016461 	000004 	000030 		MOV	N.FID+4(R4),N.DID+4(R1)
    257	000636	005061 	000022 			CLR	N.NEXT(R1)	;START AT BEGINNING OF DIRECTORY
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 11-1
.NXDIR - FIND NEXT WILD CARD DIRECTORY

    258					; SET UP STRING WITH DIRECTORY NAME, AND POINT TO IT FROM
    259					; THE FILE DESCRIPTOR POINTER
    260	000642	010205 				MOV	R2,R5		;SAVE THE FILE DECRIPTOR POINTER
    261	000644	001474 				BEQ	80$		;SKIP THIS IF NULL POINTER
    262	000646	010400 				MOV	R4,R0
    263					;
    264					; ATTEMPT TO CONVERT DIRECTORY NAME INTO DIRECTORY STRING; CHECK IF FIRST
    265					; CHARACTER IS ALPHABETIC.
    266					;
    267	000650	062700 	000042 			ADD	#N.WNM2,R0	;R0=ADDRESS OF STRING AREA
    268	000654	016401 	000006 			MOV	N.FNAM(R4),R1	;R1=1ST RAD50 FILE NAME WORD
    269	000660	010003 				MOV	R0,R3		; SAVE START OF STRING
    270	000662	112720 	000133 			MOVB	#'[,(R0)+	; START TO CONSTRUCT DIRECTORY STRING
    271	000666					CALL	$C5TA		; FIRST 3 CHARACTERS
    272	000672	126327 	000001 	000101 		CMPB	1(R3),#'A	; SEE IF STRING IS ALPHABETIC
    273	000700	103426 				BLO	60$		; BRANCH IF NOT - USE PPN FORMAT
    274	000702	016401 	000010 			MOV	N.FNAM+2(R4),R1	; CONTINUE CONVERTING NAME
    275	000706					CALL	$C5TA
    276	000712	016401 	000012 			MOV	N.FNAM+4(R4),R1
    277	000716					CALL	$C5TA
    278	000722	124027 	000040 		40$:	CMPB	-(R0),#40	; BACK UP OVER TRAILING SPACES
    279	000726	001775 				BEQ	40$
    280	000730	010001 				MOV	R0,R1
    281	000732	160301 				SUB	R3,R1		; COMPUTE LENGTH SO FAR (SHORT ONE CHAR)
    282	000734	020127 	000011 			CMP	R1,#9.		; IF NAME IS 9 CHARACTERS LONG, WE MUST
    283	000740	002001 				BGE	50$		; PUNT THE LAST CHARACTER BECAUSE OF BUFFER LENGTH
    284	000742	005200 				INC	R0		; ELSE GET BACK LAST CHAR
    285	000744	112720 	000135 		50$:	MOVB	#'],(R0)+	; END OF DIRECTORY STRING
    286	000750	010002 				MOV	R0,R2		; SHUFFLE REGISTERS FOR CODE BELOW
    287	000752	010300 				MOV	R3,R0
    288	000754	000422 				BR	70$
    289					;
    290					; FIRST CHARACTER OF DIRECTORY STRING IS NUMERIC. CONVERT TO PPN FORMAT.
    291					;
    292	000756	010300 			60$:	MOV	R3,R0		; RESTORE BUFFER ADDRESS
    293	000760	016401 	000006 			MOV	N.FNAM(R4),R1	; GET FIRST WORD OF NAME AGAIN
    294	000764					CALL	C5TB		;CONVERT RAD50 TO BINARY IN R1
    295	000770	010146 				MOV	R1,-(SP)	;SAVE PROJECT #
    296	000772	016401 	000010 			MOV	N.FNAM+2(R4),R1
    297	000776					CALL	C5TB		;CONVERT 2ND RAD50 WORD
    298	001002	005003 				CLR	R3
    299	001004	152603 				BISB	(SP)+,R3	;PROJECT #
    300	001006	000303 				SWAB	R3
    301	001010	150103 				BISB	R1,R3		;R3 =.BYTE PROG#,PROJ#
    302	001012	010002 				MOV	R0,R2		;R2=SCRATCH AREA STRING ADR
    303	001014	005004 				CLR	R4
    304	001016					CALL	.PPASC		;PPN TO ASCII STRING
    305
    306	001022	010065 	000006 		70$:	MOV	R0,N.DIRD+2(R5)	;R5=F.DSPT, STORE STRING ADDRESS
    307	001026	160002 				SUB	R0,R2		;CALCULATE DIRECTORY STRING SIZE
    308	001030	010265 	000004 			MOV	R2,N.DIRD(R5)	;AND STORE IT IN F.DSPT
    309	001034	000420 				BR	100$
    310					;
    311					; SET DIRECTORY ID IN DEFAULT NAME BLOCK, SINCE THERE
    312					; WAS NO FILE DESCRIPTOR POINTER TO PUT A STRING IN
    313	001036	005703 			80$:	TST	R3		;ANY DEFAULT FILE NAME BLOCK?
    314	001040	001416 				BEQ	100$		;BRANCH IF NO
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 11-2
.NXDIR - FIND NEXT WILD CARD DIRECTORY

    315	001042	016463 	000000 	000024 		MOV	N.FID(R4),N.DID(R3)
    316	001050	016463 	000002 	000026 		MOV	N.FID+2(R4),N.DID+2(R3)
    317	001056	016463 	000004 	000030 		MOV	N.FID+4(R4),N.DID+4(R3)
    318	001064					RETURN
    319	001066	112760 	177746 	000000G	90$:	MOVB	#IE.NSF,F.ERR(R0)
    320	001074	000261 				SEC
    321	001076				100$:	RETURN
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 12
.WLDVC - CHECK FOR WILD CARDS WITH DEFAULT VERSION

    323						.SBTTL	.WLDVC - CHECK FOR WILD CARDS WITH DEFAULT VERSION
    324					;
    325					;+
    326					; CHECK IF DEFAULT VERSION WITH WILD CARD NAME OR TYPE
    327					; CALLING SEQUENCE:
    328					;	CALL	.WLDVC
    329					; INPUTS:
    330					;	R0=FDB ADDRESS
    331					;	R1=FILE NAME BLOCK
    332					; OUTPUTS:
    333					;	C=1 IF WILD NAME OR TYPE, AND DEFAULT VERSION
    334					;	C=0 IF NOT
    335					;	ALL REGISTERS PRESERVED
    336					;-
    337	001100	032761 	000060 	000020 	.WLDVC::BIT	#NB.SNM!NB.STP,N.STAT(R1)
    338	001106	001415 				BEQ	10$
    339	001110	032761 	000010 	000020 		BIT	#NB.SVR,N.STAT(R1) ;REQUIRE WILD VERSION
    340	001116	001011 				BNE	10$
    341	001120	005761 	000016 			TST	N.FVER(R1)	;OR EXPLICIT VERSION
    342	001124	001404 				BEQ	5$
    343	001126	022761 	177777 	000016 		CMP	#-1,N.FVER(R1)
    344	001134	001002 				BNE	10$
    345	001136	000261 			5$:	SEC
    346	001140					RETURN
    347	001142	000241 			10$:	CLC
    348	001144					RETURN
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 13
USEFUL SUBROUTINES

    350						.SBTTL	USEFUL SUBROUTINES
    351					;
    352					;+
    353					; PARSE THE DIRECTORY STRING, ALLOWING WILD CARD UIC'S
    354					; CALLING SEQUENCE:
    355					;	CALL	PRSDIR
    356					; INPUTS:
    357					;	R0=FDB
    358					;	R1=FILE NAME BLOCK
    359					;	R2=FILE DESCRIPTOR POINTER
    360					;	R3=DEFAULT FILE NAME BLOCK
    361					;	R4=SCRATCH AREA TO BE INITIALIZED WITH WILD CARD
    362					;		UIC INFORMATION
    363					; OUTPUTS:
    364					;	C=0 IF OK, C=1 IF BAD SYNTAX IN DIRECTORY STRING
    365					;	ALL REGISTERS PRESERVED
    366					; OPERATION:
    367					;	SETS UP THE STATUS WORD (N.STAT) IN THE FNB OF THE
    368					; SCRATCH AREA WITH THE APPROPRIATE WILD CARD UIC BITS, AND STORES
    369					; THE EXPLICIT PROJECT NAME (RAD50) AND PROGRAMER NAME
    370					; IN N.WNM1, N.WNM1+2 (R4).
    371					;-
    372	001146				PRSDIR:	CALL	$SAVAL
    373	001152	010446 				MOV	R4,-(SP)
    374	001154	010401 				MOV	R4,R1
    375	001156	062701 	000036 			ADD	#N.WNM1,R1
    376	001162					CALL	PRSUI1
    377	001166	012604 				MOV	(SP)+,R4
    378	001170	103437 				BCS	40$
    379	001172	014301 				MOV	-(R3),R1	;R1=PROJECT #
    380	001174	010400 				MOV	R4,R0
    381	001176	062700 	000042 			ADD	#N.WNM2,R0	;SCRATCH STRING ADDRESS
    382	001202					CALL	CDRNM		;CONVERT NUMBER TO RAD50  (1 WORD)
    383	001206	010123 				MOV	R1,(R3)+	;STORE RAD50 BACK IN N.WNM1(R4)
    384	001210	103006 				BCC	10$
    385					; NUMBER WAS TOO BIG, WAS IT -1, IF SO, SET WILD BIT
    386	001212	022701 	177777 			CMP	#-1,R1
    387	001216	001024 				BNE	40$		;OTHERWISE SYNTAX ERROR
    388	001220	052764 	000400 	000020 		BIS	#NB.SD1,N.STAT(R4) ;SET WILD PROJECT #
    389	001226	011301 			10$:	MOV	@R3,R1		;R1=PROGRAMMER #
    390	001230	010400 				MOV	R4,R0
    391	001232	062700 	000042 			ADD	#N.WNM2,R0
    392	001236					CALL	CDRNM
    393	001242	010113 				MOV	R1,@R3		;STORE RAD50
    394	001244	103006 				BCC	20$
    395	001246	022701 	177777 			CMP	#-1,R1
    396	001252	001006 				BNE	40$		;BRANCH IF SYNTAX ERROR
    397	001254	052764 	001000 	000020 		BIS	#NB.SD2,N.STAT(R4) ;SET WILD CARD PROGRAMMER #
    398	001262	000241 			20$:	CLC
    399	001264					RETURN
    400	001266	005726 			30$:	TST	(SP)+
    401	001270	000261 			40$:	SEC
    402	001272					RETURN
    403					;
    404					;+
    405					; PARSE UIC STRING INTO BINARY PROJ AND PROG NUMBERS (2 WORDS)
    406					; CALLING SEQUENCE:
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 13-1
USEFUL SUBROUTINES

    407					;	CALL	.PRSUI
    408					; INPUTS:
    409					;	R1=ADDRESS OF 2 WORD BLOCK TO STORE PPN
    410					;	R2=FILE DESCRIPTOR POINTER
    411					; OUTPUTS:
    412					;	C=0 OK, C=1 IF SUNTAX ERROR
    413					;	ALL REGISTERS PRESERVED
    414					;	@R1 = PROJECT # OR -1 IF *
    415					;	2(R1) = PROGRAMMER # OR -1 IF *
    416					; ALTERNATE ENTRY:
    417					;	CALL	PRSUI1
    418					; INPUTS:
    419					;	SAME
    420					; OUTPUTS:
    421					;	SAME EXCEPT REGISTERS NOT PRESERVED
    422					;	R3= ADDRESS OF PROGRAMMER # (2ND WORD)
    423					;	R0 PRESERVED, R2,R4,R5 ALTERED
    424					;-
    425	001274				.PRSUI::
    426	001274	004567 	000000G			JSR	R5,.SAVR1
    427	001300	010103 			PRSUI1:	MOV	R1,R3		;R3=ADR TO RETURN PROJECT #
    428	001302	016201 	000004 			MOV	N.DIRD(R2),R1	;R1=SIZE OF DIRECTORY STRING
    429	001306	016202 	000006 			MOV	N.DIRD+2(R2),R2	;R2=ADDRESS OF DIRECOTRY STRING
    430					;
    431					; CHANGE < TO [ AND > TO ]
    432					;
    433	001312	010146 				MOV	R1,-(SP)	; SAVE SIZE AND ADDR
    434	001314	010246 				MOV	R2,-(SP)
    435	001316	122712 	000074 			CMPB	#'<,(R2)	; MUST START WITH [ OR <
    436	001322	001012 				BNE	20$
    437	001324	112712 	000133 			MOVB	#'[,(R2)	; CHANGE < TO [
    438	001330	122722 	000076 		10$:	CMPB	#'>,(R2)+	; FIND   >
    439	001334	001003 				BNE	15$
    440	001336	112742 	000135 			MOVB	#'],-(R2)	; CHANGE TO ]
    441	001342	000402 				BR	20$		; AND CONTINUE
    442	001344	005301 			15$:	DEC R1			; COUNT CHAR AND LOOP
    443	001346	001370 				BNE	10$
    444	001350	012602 			20$:	MOV	(SP)+,R2	; RESTORE ADDR AND SIZE
    445	001352	012601 				MOV	(SP)+,R1
    446	001354	122722 	000133 			CMPB	#'[,(R2)+	;REQUIRE LEADING "["
    447	001360	001023 				BNE	70$
    448	001362	005301 				DEC	R1		;COUNT THE "["
    449	001364	122712 	000052 			CMPB	#'*,(R2)	;CHECK FOR STRING OF "[*]"
    450	001370	001004 				BNE	50$
    451	001372	122762 	000135 	000001 		CMPB	#'],1(R2)
    452	001400	001415 				BEQ	80$		;YES - ALTERNATE FORM OF WILD DIRECTORY
    453	001402	012704 	000054 		50$:	MOV	#',,R4		;R4=TERMINATOR CHARACTER
    454	001406					CALL	SCNCVT		;CONVERT PROJECT #
    455	001412	103405 				BCS	60$		;BRANCH IF BAD SYNTAX
    456	001414	005723 				TST	(R3)+		;R3= ADDRESS TO STORE PROG #
    457	001416	012704 	000135 			MOV	#'],R4		;R4=TERMINATING CHAR
    458	001422					CALL	SCNCVT		;CONVERT PROGRAMMER #
    459	001426				60$:	RETURN
    460					;
    461	001430	000261 			70$:	SEC
    462	001432					RETURN
    463					;
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 13-2
USEFUL SUBROUTINES

    464					; HANDLE "[*]" FORM OF WILD CARD DIRECTORY
    465					;
    466	001434	012713 	177777 		80$:	MOV	#-1,(R3)	;SET WILD CARD CODE FOR UIC
    467	001440	012313 				MOV	(R3)+,(R3)
    468	001442	000241 				CLC
    469	001444					RETURN
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 14
USEFUL SUBROUTINES

    471					;+
    472					; SCAN ASCII STRING UNTIL FIND TERMINATING CHAR
    473					; CONVERT TO NUMBER OR -1 IF WILD CARD, RETURN @R3
    474					; CALLING SEQUENCE:
    475					;	CALL	SCNCVT
    476					; INPUTS:
    477					;	R1 = STRING SIZE
    478					;	R2 = STRING ADDRESS
    479					;	R3 = ADDRESS TO RETURN VALUE
    480					;	R4 = TERMINATING CHARACTER TO MATCH
    481					; OUTPUTS:
    482					;	C=0 IF OK, C=1 IF SYNTAX ERROR
    483					;	R1,R2 UPDATED TO REFLECT CHARACTERS SCANNED
    484					;	R4,R5 ALTERED
    485					;	R0,R3 PRESERVED
    486					;-
    487	001446	010205 			SCNCVT:	MOV	R2,R5		;SAVE STARTING CHARACTER ADDRESS
    488	001450	120422 			10$:	CMPB	R4,(R2)+
    489	001452	001404 				BEQ	20$		;BRANCH IF THIS IS THE TERMINATOR
    490	001454					SOB	R1,10$
    491	001460	000261 				SEC			;RAN OUT OF CHARACTER, BAD SYNTAX
    492	001462					RETURN
    493	001464	005301 			20$:	DEC	R1		;COUNT TERMINATOR
    494	001466	122715 	000052 			CMPB	#'*,@R5		;WILD CARD?
    495	001472	001004 				BNE	30$		;BRANCH IF NO
    496	001474	012713 	177777 			MOV	#-1,@R3
    497	001500	000241 				CLC
    498	001502					RETURN
    499	001504	010204 			30$:	MOV	R2,R4
    500	001506	160504 				SUB	R5,R4
    501	001510	005304 				DEC	R4		;R4 = SIZE OF NUMERIC STRING
    502	001512					CALL	.ODCVT
    503	001516					RETURN
    504					;
    505					;+
    506					; CONVERT PROJECT OR PROGRAMMER NUMBER IN R1 TO 3 CHAR RAD50 NAME
    507					;	RETURNED IN R1
    508					; CALLING SEQUENCE:
    509					;	CALL	CDRNM
    510					; INPUTS:
    511					;	R0=STRING ADDRESS TO STORE CHARS IN (SCRATCH)
    512					;	R1=NUMBER TO CONVERT
    513					; OUTPUTS:
    514					;	C=0 IF CONVERTED, C=1 IF HIGH BYTE OF R1 NON ZERO
    515					;	R1=RAD50 CONVERSION OF NUMBER
    516					;	R0,R2 ALTERED
    517					;	R3-R5 PRESERVED
    518					;-
    519	001520	032701 	177400 		CDRNM:	BIT	#177400,R1
    520	001524	001402 				BEQ	20$		;BRANCH IF NO HIGH ORDER BITS SET
    521	001526	000261 				SEC
    522	001530					RETURN
    523	001532	010702 			20$:	MOV	PC,R2		;R2 NON 0, DON'T SUPPRESS LEAD 0'S
    524	001534					CALL	$CBOMG		;CONVERT BINARY TO OCTAL MAGNITUDE
    525	001540	162700 	000003 			SUB	#3,R0		;R0 POINTS AT LAST 3 CHARS
    526	001544					CALL	$CAT5		;CONVERT ASCII TO RAD50
    527	001550	000241 				CLC
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 14-1
USEFUL SUBROUTINES

    528	001552					RETURN
    529					;
    530					;+
    531					; CONVERT RAD50 NUMBER IN R1 TO BINARY VALUE IN R1
    532					; CALLING SEQUENCE:
    533					;	CALL	C5TB
    534					; INPUTS:
    535					;	R0=STRING ADDRESS (SCRATCH)
    536					;	R1=RAD50 VALUE TO CONVERT
    537					; OUTPUTS:
    538					;	R1=BINARY VALUE
    539					;	R0,R3-R5 PRESERVED
    540					;	R2 ALTERED
    541					;-
    542	001554	010046 			C5TB:	MOV	R0,-(SP)
    543	001556					CALL	$C5TA		;CONVERT RAD50 TO ASCII
    544	001562	105010 				CLRB	@R0
    545	001564	162700 	000003 			SUB	#3,R0
    546	001570					CALL	$COTB		;CONVERT OCTAL STRING TO BINARY
    547	001574	012600 				MOV	(SP)+,R0
    548	001576					RETURN
    549					;
    550					;
    551		000001 				.END
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 14-2
SYMBOL TABLE

AB.CDT  000105   	FF.POE= 000002   	IE.IFC= 177776   	IO.DAC= 010000   	N.DVNM= 000032
AB.CHU  000064   	FF.RWD= 000001   	IE.IFU= 177747   	IO.DEL= 012400   	N.FID = 000000
AB.EXP  000122   	FF.RWF= 000006   	IE.ILL= 177726   	IO.DET= 002000   	N.FLID= 000016
AB.FNU  000000   	FF.SPC= 000004   	IE.ISQ= 177703   	IO.ENA= 006000   	N.FNAM= 000006
AB.FP   000062   	FNDNX1  000206R     002	IE.LCK= 177745   	IO.EXT= 011400   	N.FNMD= 000010
AB.FSQ  000002   	FNDNX2  000366R     002	IE.MOD= 177753   	IO.FNA= 004400   	N.FTYP= 000014
AB.GC   000061   	FNDNX3  000452R     002	IE.NBF= 177731   	IO.KIL= 000012   	N.FVER= 000016
AB.NAM  000006   	FO.APD= 000106   	IE.NBK= 177727   	IO.LOV= 001010   	N.NEXT= 000022
AB.PC   000060   	FO.MFY= 000002   	IE.NDR= 177670   	IO.LTK= 000050   	N.SPEC= 000014
AB.RDT  000070   	FO.RD = 000001   	IE.NFI= 177704   	IO.RAT= 013000   	N.STAT= 000020
AB.REV  000066   	FO.UPD= 000006   	IE.NFW= 177673   	IO.RDN= 000022   	N.UNIT= 000034
AB.UAT  000020   	FO.WRT= 000016   	IE.NLK= 177661   	IO.RLB= 001000   	N.WNM1= 000036
CDRNM   001520R     002	F.DFNB= ****** GX	IE.NLN= 177733   	IO.RNA= 005400   	N.WNM2= 000042
CH.AND= 000001   	F.DSPT= ****** GX	IE.NNC= 177663   	IO.RTK= 000060   	PRSDIR  001146R     002
C5TB    001554R     002	F.ERR = ****** GX	IE.NNL= 177662   	IO.RVB= 010400   	PRSUI1  001300R     002
DIRTYP= 015172   	F.FNB = ****** GX	IE.NNN= 177674   	IO.SET= 000030   	R$$DPB= 000001
FA.APD= 000100   	IE.ABO= 177761   	IE.NOD= 177751   	IO.ULK= 005000   	R$$DYM= 000001
FA.CRE= 000010   	IE.ALC= 177654   	IE.NSF= 177746   	IO.UNL= 000042   	R$$EIS= 000000
FA.DLK= 001000   	IE.ALN= 177736   	IE.NST= 177660   	IO.WAT= 013400   	R$$11M= 000001
FA.ENB= 100000   	IE.AST= 177660   	IE.OFL= 177677   	IO.WLB= 000400   	R.FIX = 000001
FA.EXC= 002000   	IE.BAD= 177777   	IE.ONP= 177773   	IO.WVB= 011000   	R.SEQ = 000003
FA.EXT= 000004   	IE.BBE= 177710   	IE.OVR= 177756   	IQ.Q  = 000002   	R.VAR = 000002
FA.NSP= 000100   	IE.BCC= 177676   	IE.PES= 177655   	IQ.S  = 000004   	SCNCVT  001446R     002
FA.POS= 010000   	IE.BDI= 177714   	IE.PRI= 177760   	IQ.UMD= 000004   	S.APPD= 000010
FA.RD = 000001   	IE.BDR= 177716   	IE.RAC= 177724   	IQ.X  = 000001   	S.FIDS= 000014
FA.RWD= 004000   	IE.BDV= 177711   	IE.RAT= 177723   	IS.BV = 000005   	S.FNAM= 000006
FA.SEQ= 040000   	IE.BHD= 177700   	IE.RBG= 177730   	IS.CC = 001401   	S.FNB = 000036
FA.SHR= 000040   	IE.BLB= 177672   	IE.RCN= 177722   	IS.CR = 006401   	S.FNBW= 000017
FA.TMP= 000020   	IE.BLK= 177754   	IE.RER= 177740   	IS.EOT= 002001   	S.FNTY= 000004
FA.WCK= 020000   	IE.BNM= 177712   	IE.RNM= 177715   	IS.ESC= 015401   	S.FTYP= 000002
FA.WRT= 000002   	IE.BTF= 177664   	IE.RSU= 177757   	IS.ESQ= 115401   	S.NFEN= 000020
FD.BLK= 000010   	IE.BTP= 177725   	IE.SNC= 177735   	IS.PES= 100001   	S.WUIC= 000054
FD.CCL= 000002   	IE.BVR= 177701   	IE.SPC= 177772   	IS.PND= 000000   	TDRDEL= ****** GX
FD.COM= 020000   	IE.BYT= 177755   	IE.SQC= 177734   	IS.RDD= 000002   	TDRENT= ****** GX
FD.CR = 000002   	IE.CKS= 177742   	IE.SRE= 177762   	IS.SUC= 000001   	TDRFDB= ****** GX
FD.DIR= 000010   	IE.CLO= 177732   	IE.STK= 177706   	IS.TAB= 004401   	TDRINI= ****** GX
FD.FTN= 000001   	IE.CNR= 177667   	IE.TMM= 177671   	IS.TMO= 000002   	$CAT5 = ****** GX
FD.F11= 040000   	IE.CON= 177752   	IE.TMO= 177666   	MFDNAM= 140116   	$CBOMG= ****** GX
FD.INS= 000010   	IE.DAA= 177770   	IE.ULK= 177653   	NB.DEV= 000200   	$COTB = ****** GX
FD.ISP= 002000   	IE.DAO= 177763   	IE.VER= 177774   	NB.DIR= 000100   	$C5TA = ****** GX
FD.MNT= 100000   	IE.DFU= 177750   	IE.WAC= 177743   	NB.NAM= 000004   	$SAVAL= ****** GX
FD.OSP= 004000   	IE.DNA= 177771   	IE.WAT= 177741   	NB.NXD= 020000   	$$MSG = 000000
FD.PLC= 000004   	IE.DNR= 177775   	IE.WCK= 177652   	NB.SDI= 001400   	.FIND = ****** GX
FD.PRN= 000004   	IE.DUN= 177767   	IE.WER= 177737   	NB.SD1= 000400   	.FNDNX  000152RG    002
FD.PSE= 010000   	IE.DUP= 177707   	IE.WLK= 177764   	NB.SD2= 001000   	.NXDIR  000500RG    002
FD.RAH= 000001   	IE.EOF= 177766   	IE.2DV= 177720   	NB.SNM= 000040   	.ODCVT= ****** GX
FD.RAN= 000002   	IE.EOT= 177702   	IO.ACE= 007400   	NB.STP= 000020   	.PARSE= ****** GX
FD.REC= 000001   	IE.EOV= 177765   	IO.ACR= 006400   	NB.SVR= 000010   	.PPASC= ****** GX
FD.RWM= 000001   	IE.EXP= 177665   	IO.ACW= 007000   	NB.TYP= 000002   	.PRSUI  001274RG    002
FD.SDI= 000020   	IE.FEX= 177717   	IO.APC= 014000   	NB.VER= 000001   	.SAVR1= ****** GX
FD.SQD= 000040   	IE.FHE= 177705   	IO.APV= 014010   	NB.WLV= 010000   	.WLDVC  001100RG    002
FD.TTY= 000004   	IE.FLN= 177657   	IO.ATT= 001400   	N.DEVD= 000000   	.WPARS  000000RG    002
FD.WBH= 000002   	IE.FOP= 177713   	IO.CLN= 003400   	N.DID = 000024   	...GBL= 000000
FF.CHR= 000005   	IE.HFU= 177744   	IO.CRE= 012000   	N.DIRD= 000004   	...TPC= 000036
FF.NV = 000003   	IE.IES= 177656

. ABS.	000131	   000
PRSFND M0120, PARSE, FIND, ETC.	MACRO M1110  22-AUG-78 01:26  PAGE 14-3
SYMBOL TABLE

      	000000	   001
PURE$I	001600	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  6028 WORDS  ( 24 PAGES)
DYNAMIC MEMORY:  6996 WORDS  ( 26 PAGES)
ELAPSED TIME:  00:00:31
OBJ$:PRSFND,LIS$:PRSFND/-SP=SRC$:PIPMAC,PRSFND
