RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      44  DECLARATIONS
   (3)      66  RM$CACHE ROUTINE
   (4)     311  GET BUFFER ROUTINE
   (4)     415  WAIT_BDB AND RM$WAKE_THREAD ROUTINES
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   1
011                                                                                                                              (1)

                                     0000     1 	$BEGIN RM0CACHE,011,$RMS23,<IO CACHE ROUTINE>
                                     0000     2 
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT  (C)  1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY
                                     0000     9 ; ON A SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH
                                     0000    10 ; THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS
                                     0000    11 ; SOFTWARE, OR ANY OTHER COPIES THEREOF, MAY NOT BE
                                     0000    12 ; PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    13 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO
                                     0000    14 ; THESE LICENSE TERMS. TITLE TO AND OWNERSHIP OF THE
                                     0000    15 ; SOFTWARE SHALL AT ALL TIMES REMAIN IN DIGITAL EQUIPMENT CORPORATION.
                                     0000    16 ;
                                     0000    17 ; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE
                                     0000    18 ; WITHOUT NOTICE AND SHOULD NOT BE CONSTRUED AS A
                                     0000    19 ; COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
                                     0000    20 ;
                                     0000    21 ; DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY
                                     0000    22 ; FOR THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
                                     0000    23 ; WHICH IS NOT SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
                                     0000    24 ;
                                     0000    25 ;++
                                     0000    26 ; FACILITY: RMS32
                                     0000    27 ;
                                     0000    28 ; ABSTRACT:
                                     0000    29 ; THIS MODULE PROVIDES A BLOCK CACHE AND ACCESS CONTROL
                                     0000    30 ; TO THE BUCKETS OF THE RELATIVE AND INDEXED FILE ORGANIZATIONS
                                     0000    31 ;
                                     0000    32 ; ENVIRONMENT:
                                     0000    33 ;		STAR PROCESSOR RUNNING STARTLET EXEC.
                                     0000    34 ;
                                     0000    35 ; E.H. MARISON	15-SEP-77
                                     0000    36 ;
                                     0000    37 ; MODIFIED BY:
                                     0000    38 ;
                                     0000    39 ;	L F LAVERDURE,      10-AUG-78  13:53	; BSBW TO JSB FOR RELEASE
                                     0000    40 ;	L F LAVERDURE,   5-MAY-78  16:54
                                     0000    41 ; 01	-
                                     0000    42 ;--
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   2
011             DECLARATIONS                                                                                                     (2)

                                     0000    44 	.SBTTL	DECLARATIONS
                                     0000    45 ;
                                     0000    46 ; INCLUDE FILES:
                                     0000    47 ;
                                     0000    48 
                                     0000    49 	$RLSDEF
                                     0000    50 	$CSHDEF
                                     0000    51 	$IRBDEF
                                     0000    52 	$IFBDEF
                                     0000    53 	$BDBDEF
                                     0000    54 	$RMSDEF
                                     0000    55 	.LIST MEB
                                     0000    56 ;
                                     0000    57 ; MACROS:
                                     0000    58 ;
                                     0000    59 ;
                                     0000    60 ; EQUATED SYMBOLS:
                                     0000    61 ;
                                     0000    62 ;
                                     0000    63 ; OWN STORAGE:
                                     0000    64 ;
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   3
011             RM$CACHE ROUTINE                                                                                                 (3)

                                     0000    66 	.SBTTL	RM$CACHE ROUTINE
                                     0000    67 
                                     0000    68 ;++
                                     0000    69 ; FUNCTIONAL DESCRIPTIONS:
                                     0000    70 ;
                                     0000    71 ;    1.	 OBTAINS ACCESS TO REQUESTED BLOCK/BUCKET AND WAITS
                                     0000    72 ;	 FOR THE ACCESS UNLESS CSH$V_NOWAIT OR CSH$V_READAHEAD
                                     0000    73 ;	 IS SET IN THE CONTROL FLAGS.
                                     0000    74 ;
                                     0000    75 ;    2.	 OBTAINS A BUFFER FOR THE BLOCK UNLESS CSH$V_NOBUFFER
                                     0000    76 ;	 IS SET IN THE CONTROL FLAGS.
                                     0000    77 ;
                                     0000    78 ;    3.	 IF THERE IS A BUFFER READ THE BLOCK INTO IT IF
                                     0000    79 ;	 REQUIRED, AND THE CSH$V_NOREAD BIT IS OFF IN THE
                                     0000    80 ;	 CONTROL FLAGS.
                                     0000    81 ;
                                     0000    82 ;    4.	 WAITS FOR IO COMPLETION IF THE CSH$V_READAHEAD BIT
                                     0000    83 ;	 IS OFF IN THE CONTROL FLAGS.
                                     0000    84 ;
                                     0000    85 ;    5.	 IF THE CSH$V_READAHEAD BIT IS SET THEN THE ACCESS TO
                                     0000    86 ;	 THE BLOCK IS RELEASED AND CONTROL IS RETURNED.
                                     0000    87 ;	 (NOTE: NOT IMPLEMENTED)
                                     0000    88 ;
                                     0000    89 ;    6.	IF THE CSH$V_LOCK BIT IS SET IN THE FLAGS THEN
                                     0000    90 ;	 EXCLUSIVE ACCESS TO THE BLOCK IS OBTAINED.
                                     0000    91 ;
                                     0000    92 ; CALLING SEQUENCE:
                                     0000    93 ;		BSBW	RM$CACHE
                                     0000    94 ;		BSBW	RM$CACHEC
                                     0000    95 ;
                                     0000    96 ;
                                     0000    97 ; INPUT PARAMETERS:
                                     0000    98 ;
                                     0000    99 ;	R11	IMPURE AREA ADDRESS
                                     0000   100 ;	R10	IFAB (SHARED IFAB) ADDRESS
                                     0000   101 ;	R9	IRAB/IFAB ADDRESS
                                     0000   102 ;	R8	RAB/FAB ADDRESS
                                     0000   103 ;	R3	CACHE CONTROL FLAGS
                                     0000   104 ;	R2	TRANSFER/BUFFER SIZE IN BYTES
                                     0000   105 ;	R1	REQUESTED VBN
                                     0000   106 ;
                                     0000   107 ;	RM$CACHEC CALL ONLY
                                     0000   108 ;	ALL INPUTS AS FOR RM$CACHE EXCEPT AS FOLLOWS:
                                     0000   109 ;	R9 IRAB ADDRESS ONLY
                                     0000   110 ;	IRB$L_CURBDB(R9) = ADDR OF BDB TO CHECK FIRST
                                     0000   111 ;
                                     0000   112 ; OUTPUT PARAMETERS:
                                     0000   113 ;
                                     0000   114 ;	R0	INTERNAL RMS STATUS CODE
                                     0000   115 ;	R4	BDB ADDRESS
                                     0000   116 ;	R5	BUFFER ADDRESS UNLESS A NOBUFFER OR READAHEAD CALL
                                     0000   117 ;		IN WHICH CASE R5 IS UNCHANGED.
                                     0000   118 ;	R1,R2,R3,AP DESTROYED
                                     0000   119 ;
                                     0000   120 ; ****	BDB AND BUFFER NOT ACCESSED ON ERRORS
                                     0000   121 ;
                                     0000   122 ; COMPLETION CODES:
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   4
011             RM$CACHE ROUTINE                                                                                                 (3)

                                     0000   123 ;
                                     0000   124 ;	STANDARD INTERNAL RMS, INCLUDING:
                                     0000   125 ;
                                     0000   126 ;		SUC	NORMAL SUCCESS
                                     0000   127 ;		RLK	BLOCK WAS ACCESSED OR LOCKED AND NOWAIT
                                     0000   128 ;		DME	COULD NOT GET A BUFFER
                                     0000   129 ;		VARIOUS ERRORS WRITING A DEFERRED WRITE BUFFER OR READING
                                     0000   130 ;		IN THE NEW BUFFER.
                                     0000   131 ;
                                     0000   132 ; SIDE EFFECTS:
                                     0000   133 ; MAY HAVE SWITCHED TO RUNNING AT AST LEVEL
                                     0000   134 ;
                                     0000   135 ;--
                                     0000   136 
                                     0000   137 	.ENABL	LSB
                                     0000   138 RM$CACHEC::
            54         20 A9     D0  0000   139 	MOVL	IRB$L_CURBDB(R9),R4	; GET CURRENT BDB
                          06     13  0004   140 	BEQL	RM$CACHE		; BRANCH IF NONE
         18 A4            51     D1  0006   141 	CMPL	R1,BDB$L_VBN(R4)	; IS THIS THE VBN WANTED
                          23     13  000A   142 	BEQL	25$			; BRANCH IF YES
                                     000C   143 RM$CACHE::
                          51     D5  000C   144 	TSTL	R1			; IS THIS A VBN 0 CALL?
                          63     13  000E   145 	BEQL	50$			; BRANCH IF YES
                                     0010   146 ;
                                     0010   147 ; SETUP TO SCAN THE BDB CHAIN FOR A MATCH ON VBN
                                     0010   148 ;
            50            59     D0  0010   149 	MOVL	R9,R0			;ASSUME IFAB CALL
                                     0013   150 	ASSUME	<IFB$C_BID&^X1> EQ 1
                                     0013   151 	ASSUME	<IRB$C_BID&^X1> EQ 0
                                     0013   152 	ASSUME	IFB$B_BID EQ IRB$B_BID
            03         08 A9     E8  0013   153 	BLBS	IFB$B_BID(R9),10$	;WERE WE RIGHT
            50            69     D0  0017   154 	MOVL	IRB$L_IFAB_LNK(R9),R0	;NO - GET IFAB ADDR
            50         30 A0     DE  001A   155 10$:	MOVAL	IFB$L_BDB_FLNK(R0),R0	;GET LIST HEAD ADDR
            54            50     D0  001E   156 	MOVL	R0,R4			;AND COPY TO R4
                                     0021   157 ;
                                     0021   158 ; SCAN BDB CHAIN FOR A MATCH
                                     0021   159 ;
                                     0021   160 	ASSUME	BDB$L_FLINK EQ 0
            54            64     D0  0021   161 20$:	MOVL	(R4),R4			;GET NEXT ENTRY IN CHAIN
            50            54     D1  0024   162 	CMPL	R4,R0			;AT END
                          4A     13  0027   163 	BEQL	50$			;BRANCH IF YES
         18 A4            51     D1  0029   164 	CMPL	R1,BDB$L_VBN(R4)	;VBN MATCH
                          F2     12  002D   165 	BNEQ	20$			;BRANCH IF NO
                                     002F   166 ;
                                     002F   167 ; VBN IS IN CACHE MAKE SURE CALL IS CONSISTENT WITH BDB
                                     002F   168 ;
            50         0C A4     D0  002F   169 25$:	MOVL	BDB$L_OWN(R4),R0	;IS BDB LOCKED
                          16     13  0033   170 	BEQL	35$			;BRANCH IF NO
                                     0035   171 					;IT IS THEREFORE ONLY ONE ACCESSOR
            59            50     D1  0035   172 	CMPL	R0,R9			;IS THIS THE OWNER
                          0E     13  0038   173 	BEQL	30$			;YES - CONTINUE
            53            01     E0  003A   174 	BBS	#CSH$V_NOWAIT,R3,49$	;DOES HE WISH TO WAIT?
                          32         003D       
                          52     DD  003E   175 	PUSHL	R2			;YES - SAVE XFER SIZE
                          0143   30  0040   176 	BSBW	WAIT_BDB		;WAIT FOR IT
            52            8E     D0  0043   177 	MOVL	(SP)+,R2		;RESTORE SIZE
                          03     11  0046   178 	BRB	35$			;AND GO ACCESS BDB (USE COUNT IS CORRECT)
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   5
011             RM$CACHE ROUTINE                                                                                                 (3)

                       0B A4     94  0048   179 30$:	CLRB	BDB$B_USECNT(R4)	;RESET USE COUNT
            50         10 A4     3C  004B   180 35$:	MOVZWL	BDB$W_NUMB(R4),R0	;GET CURRENT #BYTES IN USE
                          08     13  004F   181 	BEQL	40$			;BRANCH IF NONE (IT'S A LOCK BDB ONLY)
            52            50     B1  0051   182 	CMPW	R0,R2			;MAKE SURE REQUEST IS
                                     0054   183 					;WITHIN THE # OF BYTES USED
                          18     1F  0054   184 	BLSSU	47$			;BRANCH IF NOT
            52            50     D0  0056   185 	MOVL	R0,R2			;CHANGE XFER SIZE TO CUR SIZ
                       0B A4     95  0059   186 40$:	TSTB	BDB$B_USECNT(R4)	;IS BDB ACCESSED
                          1F     13  005C   187 	BEQL	60$			;BRANCH IF NO
                                     005E   188 ;
                                     005E   189 ; USE COUNT IS NON-ZERO BUT BDB IS NOT LOCKED.
                                     005E   190 ; THEREFORE; IF READAHEAD SAY SUCCESS AND EXIT
                                     005E   191 ; IF LOCK NOT REQUESTED THEN BUMP USE COUNT AND CONTINUE
                                     005E   192 ; IF LOCK REQUESTED AND WILL WAIT THEN WAIT OTHERWISE
                                     005E   193 ; REPORT RECORD LOCK ERROR AND EXIT.
                                     005E   194 ;
            53            03     E0  005E   195 	BBS	#CSH$V_READAHEAD,R3,SUC_EXIT ;DONE IF READAHEAD
                          7B         0061       
                                     0062   196 	ASSUME	CSH$V_LOCK EQ 0
            23            53     E9  0062   197 	BLBC	R3,70$			;BUMP USE COUNT IF NO LOCK
            53            01     E0  0065   198 	BBS	#CSH$V_NOWAIT,R3,49$	;BRANCH IF USER WON'T WAIT
                          07         0068       
                          011A   30  0069   199 	BSBW	WAIT_BDB		;YES - WAIT FOR BDB
                                     006C   200 					;TAKE OWNERSHIP AND
                          16     11  006C   201 	BRB	65$			;GO BUMP USE COUNT
                                     006E   202 ;
                          71     11  006E   203 47$:	BRB	BUG_XFER_SIZE		;OUT OF RANGE BRANCH BRANCH
                                     0070   204 ;
                          0080   31  0070   205 49$:	BRW	ERRRLK			; GO GIVE LOCK ERROR
                                     0073   206 ;
                                     0073   207 ;
                                     0073   208 ; VBN IS NOT IN CACHE - SO GO ALLOCATE A BDB AND
                                     0073   209 ; BUFFER FOR IT.  PLEASE NOTE THAT BDB ACCESS CHECKS NOT NEEDED
                                     0073   210 ; SINCE AN ACCESSED VBN MUST BE IN THE CACHE.
                                     0073   211 ;
                          0083   30  0073   212 50$:	BSBW	GET_BUFFER		;GET BDB AND BUFFER
            67            50     E9  0076   213 	BLBC	R0,EXIT			;SORRY GET OUT
         18 A4            51     D0  0079   214 	MOVL	R1,BDB$L_VBN(R4)	;SET VBN IN BDB
         10 A4            52     B0  007D   215 60$:	MOVW	R2,BDB$W_NUMB(R4)	;SET # OF BYTES USED
                                     0081   216 	ASSUME	CSH$V_LOCK EQ 0
            04            53     E9  0081   217 	BLBC	R3,70$			;LOCK REQUIRED
         0C A4            59     D0  0084   218 65$:	MOVL	R9,BDB$L_OWN(R4)	;YES - NOTE OWNER
                       0B A4     96  0088   219 70$:	INCB	BDB$B_USECNT(R4)	;BUMP USE COUNT
                                     008B   220 ;
                                     008B   221 ; MAKE SURE WE HAVE A BUFFER UNLESS CSH$V_NOBUFFER IS SET
                                     008B   222 ;
            53            04     E0  008B   223 	BBS	#CSH$V_NOBUFFER,R3,80$	;NEED A BUFFER
                          2C         008E       
                                     008F   224 					;YES - IS CURRENT BIG
                       12 A4     B5  008F   225 	TSTW	BDB$W_SIZE(R4)		;ENOUGH (IT IS IF NOT 0!)
                          27     12  0092   226 	BNEQ	80$			;BRANCH IF NOT 0
                          54     DD  0094   227 	PUSHL	R4			;SAVE BDB
                          61     10  0096   228 	BSBB	GET_BUFFER		;GET BUFFER OF R2 SIZE
            51            54     D0  0098   229 	MOVL	R4,R1			;ASSUME WE GOT ONE
            54            8E     D0  009B   230 	MOVL	(SP)+,R4		;RESTORE BDB
            55            50     E9  009E   231 	BLBC	R0,ERRXIT		;SORRY TOO BAD
         14 A4         14 A1     D0  00A1   232 	MOVL	BDB$L_ADDR(R1),BDB$L_ADDR(R4) 	  ;SWAP BUFFER INFO
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   6
011             RM$CACHE ROUTINE                                                                                                 (3)

         12 A4         12 A1     B0  00A6   233 	MOVW	BDB$W_SIZE(R1),BDB$W_SIZE(R4)
         0A A1            07     E5  00AB   234 	BBCC	#BDB$V_LKDINWS,BDB$B_FLGS(R1),75$ ;BRANCH IF BUFFER NOT LOCKED
                          05         00AF       
                                     00B0   235 						  ;  IN WORKING SET & CLEAR FLAG
         0A A4         80 8F     88  00B0   236 	BISB2	#BDB$M_LKDINWS,BDB$B_FLGS(R4)	  ;COPY FLAG WITH BUFFER
                       14 A1     D4  00B5   237 75$:	CLRL	BDB$L_ADDR(R1)			  ;NOTE NO BUFFER
                       12 A1     B4  00B8   238 	CLRW	BDB$W_SIZE(R1)			  ;FOR THIS BDB
                                     00BB   239 80$:
                                     00BB   240 ;
                                     00BB   241 ; **** CHECK HERE FOR SHARED FILE AND
                                     00BB   242 ; **** PERFORM SYSTEM WIDE ACCESS IF FILE IS SHARED
                                     00BB   243 ;
                                     00BB   244 	.DSABL	LSB
                                     00BB   245 READ_CHECKS:
                                     00BB   246 ;
                                     00BB   247 ; DO WE NEED TO READ THE BLOCK?
                                     00BB   248 ;
            53            04     E0  00BB   249 	BBS	#CSH$V_NOBUFFER,R3,SUC_EXIT	; EXIT IF NO BUFFER CALL
                          1E         00BE       
            53            02     E0  00BF   250 	BBS	#CSH$V_NOREAD,R3,20$		; BRANCH IF NO READ REQUIRED
                          16         00C2       
            53            03     E0  00C3   251 	BBS	#CSH$V_READAHEAD,R3,READ_AHEAD	;IF READ AHEAD BRANCH
                          1E         00C6       
                                     00C7   252 ;
                                     00C7   253 ; MUST RETURN TO USER WITH BUFFER VALID IF SUCCESSFUL
                                     00C7   254 ;
         0A A4            02     E1  00C7   255 	BBC	#BDB$V_IOP,BDB$B_FLGS(R4),10$	;STALL IF IO IN PROGRESS
                          03         00CB       
                          00B7   30  00CC   256 	BSBW	WAIT_BDB
                                     00CF   257 	ASSUME	BDB$V_VAL EQ 0
            06         0A A4     E8  00CF   258 10$:	BLBS	BDB$B_FLGS(R4),20$		;BRANCH IF BUFFER VALID
                          FF2A'  30  00D3   259 	BSBW	RM$RDBUFWT			;READ IN BLOCK(S) AND WAIT
            1D            50     E9  00D6   260 	BLBC	R0,ERRXIT				;GET OUT IF ERRORS
                                     00D9   261 20$:						;RETURN TO CALLER
            55         14 A4     D0  00D9   262 	MOVL	BDB$L_ADDR(R4),R5		;WITH R5 = BUFFER ADDRESS
                                     00DD   263 ;
                                     00DD   264 ; SUCCESSFUL CACHE EXIT
                                     00DD   265 ;
                                     00DD   266 SUC_EXIT:
                                     00DD   267 	RMSSUC					;NOTE SUCCESS AND
            50            01     D0  00DD       		MOVL	#1,R0
                                 05  00E0   268 EXIT:	RSB					;RETURN TO CALLER
                                     00E1   269 ;
                                     00E1   270 ; RMS BUG - REQUESTING A TRANSFER SIZE WHICH IS GREATER THAN
                                     00E1   271 ; THE CURRENT NON-ZERO IN USE BYTE COUNT FOR THE BDB.
                                     00E1   272 ;
                                     00E1   273 BUG_XFER_SIZE:
                                     00E1   274 	RMSPBUG	FTL$_XFERSIZE
                                     00E1       	.SAVE
                                 0000006C       	.PSECT	$ABS$,ABS
                           00000000  006C       	.=0
                                 000000E1       	.RESTORE
                                     00E1       	.SAVE
                                 0000006C       	.PSECT	$ABS$,ABS
                           00000000  006C       	.=0
                                 000000E1       	.RESTORE
                          FF1C'  30  00E1       		BSBW	RM$BUG
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   7
011             RM$CACHE ROUTINE                                                                                                 (3)

                                 ED  00E4       		.BYTE	FTL$_XFERSIZE
                                     00E5   275 ;
                                     00E5   276 ; READ AHEAD
                                     00E5   277 ;
                                     00E5   278 READ_AHEAD:
                                     00E5   279 ;
                                     00E5   280 ; MUST RETURN TO USER WITHOUT WAITING FOR IO
                                     00E5   281 ;
         0A A4            02     E0  00E5   282 	BBS	#BDB$V_IOP,BDB$B_FLGS(R4),10$ ;BRANCH IF IO IN PROGRESS
                          04         00E9       
                                     00EA   283 	ASSUME	BDB$V_VAL EQ 0
            00         0A A4     E8  00EA   284 	BLBS	BDB$B_FLGS(R4),10$	;IF VALID NO NEED TO READ
                                     00EE   285 ;
                                     00EE   286 ; FOR NOW READ AHEAD IS NOT IMPLEMENTED SO DON'T ISSUE READ
                                     00EE   287 ;
                                     00EE   288 10$:
                                     00EE   289 ;
                                     00EE   290 ; RELEASE ACCESS ON BDB
                                     00EE   291 ;
                          53     D4  00EE   292 	CLRL	R3			;RELEASE CTRL FLGS = 0
                          FF0D'  31  00F0   293 	BRW	RM$RELEASE		;RELEASE ACCESS ON BDB
                                     00F3   294 					;AND RETURN TO CALLER
                                     00F3   295 ;
                                     00F3   296 ; ERROR EXIT HANDLERS
                                     00F3   297 ;
                                     00F3   298 ERRRLK:	$PSECT_BR	L$RMS23
                          FF0A'  31  00F3       		BRW	L$RMS230
                                     00F6       		.SAVE
                                 00000000       		.PSECT	L$RMS23,GBL,NOWRT
                                     0000       L$RMS230:
                                     0000   299 	RMSERR	RLK			;RECORD LOCK ERROR
            50       82AA 8F     3C  0000       		MOVZWL	#<RMS$_RLK&^XFFFF>,R0
                                 05  0005   300 	RSB				; RETURN TO CALLER
                                     0006   301 	$PSECT_RESTORE
                                 000000F6       		.RESTORE
                                     00F6   302 ;
                                     00F6   303 ERRXIT:	$PSECT_BR L$RMS23		;ERROR EXIT -- CODE IN R0
                          FF0D'  31  00F6       		BRW	L$RMS231
                                     00F9       		.SAVE
                                 00000006       		.PSECT	L$RMS23,GBL,NOWRT
                                     0006       L$RMS231:
                          01     BB  0006   304 	PUSHR	#^M<R0>			;SAVE STATUS
                          53     D4  0008   305 	CLRL	R3			;RELEASE CTRL FLGS  = 0
                 00000000'EF     16  000A   306 	JSB	RM$RELEASE		;RELEASE ACCESS TO BDB
                          01     BA  0010   307 	POPR	#^M<R0>			;RESTORE STATUS AND
                                 05  0012   308 	RSB				; RETURN TO CALLER
                                     0013   309 	$PSECT_RESTORE
                                 000000F9       		.RESTORE
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   8
011             GET BUFFER ROUTINE                                                                                               (4)

                                     00F9   311 		.SBTTL	GET BUFFER ROUTINE
                                     00F9   312 ;++
                                     00F9   313 ; GET A FREE BDB (AND BUFFER) FROM THE BDB CHAIN
                                     00F9   314 ; AND WRITE OUT ITS CONTENTS IF NECESSARY
                                     00F9   315 ;
                                     00F9   316 ; CALLING SEQUENCE:
                                     00F9   317 ;	BSBW	GET_BUFFER
                                     00F9   318 ;	BSBW	RM$GET_BUFFER (GLOBAL ENTRY POINT)
                                     00F9   319 ;
                                     00F9   320 ; INPUT PARAMETETS:
                                     00F9   321 ;	R9	IRAB/IFAB ADDRESS
                                     00F9   322 ;	R3	CACHE CONTROL FLAGS
                                     00F9   323 ;	R2	MINIMUM BUFFER SIZE
                                     00F9   324 ;
                                     00F9   325 ; OUTPUT PARAMETERS:
                                     00F9   326 ;
                                     00F9   327 ;	R0	INTERNAL RMS STATUS (RM$_SUC, RM$_DME, OR ERROR FROM RM$SEQWTBD)
                                     00F9   328 ;	R4	BDB ADDRESS IF R0 = RM$_SUC
                                     00F9   329 ;	AP	DESTROYED
                                     00F9   330 ;--
                                     00F9   331 RM$GET_BUFFER::
                                     00F9   332 GET_BUFFER:
            50            59     D0  00F9   333 	MOVL	R9,R0			;ASSUME IFAB CALL
                                     00FC   334 	ASSUME	<IFB$C_BID&^X1> EQ 1
                                     00FC   335 	ASSUME	<IRB$C_BID&^X1> EQ 0
                                     00FC   336 	ASSUME	IFB$B_BID EQ IRB$B_BID
            03         08 A9     E8  00FC   337 	BLBS	IFB$B_BID(R9),10$	;WERE WE RIGHT
            50            69     D0  0100   338 	MOVL	IRB$L_IFAB_LNK(R9),R0	;NO GET IFAB ADDR
                                     0103   339 10$:
                                     0103   340 ;
                                     0103   341 ; IF THE FILE IS BEING SHARED BETWEEN STREAMS (IE MSE=1)
                                     0103   342 ; THEN WE CAN'T DO LOCATE MODE. SETUP BDB FLAGS VAULE ON STACK
                                     0103   343 ;
                          00     DD  0103   344 	PUSHL	#0			;ASSUME LOCATE MODE OK
            60            31     E1  0105   345 	BBC	#IFB$V_MSE,(R0),15$	;BRANCH IF MULTI-STREAMS ARE DISABLED
                          04         0108       
                                     0109   346 	SSB	#BDB$V_NOLOCATE,(SP)	;FLAG NO LOCATE MODE
            6E            04     E2  0109       		BBSS	#BDB$V_NOLOCATE,(SP),30000$
                          00         010C       
                                     010D       30000$:
            50         30 A0     DE  010D   347 15$:	MOVAL	IFB$L_BDB_FLNK(R0),R0	;GET LIST HEAD ADDR AND
            54            50     D0  0111   348 	MOVL	R0,R4			;COPY TO R4
                          5C     D4  0114   349 	CLRL	AP			;INIT BDB ADDR FOR SCAN
                                     0116   350 ;
                                     0116   351 ; SCAN BDB CHAIN FOR AN AVAILABLE BDB WHICH MEETS THE CALLERS
                                     0116   352 ; CACHE CONTROL FLAGS AND SIZE REQUIREMENTS
                                     0116   353 ;
                                     0116   354 ; IF THIS IS A NO BUFFER CALL ONLY TAKE BDB'S WITH NO BUFFER
                                     0116   355 ; ASSOCIATED WITH IT.  A BDB CAN NOT BE TAKEN IF ITS USE COUNT
                                     0116   356 ; IS NON-ZERO, OR STREAMS ARE WAITING, OR IO IS IN PROGRESS.
                                     0116   357 ; IF A BDB IS VALID THEN IT WILL BE SKIPPED OVER UNLESS NO
                                     0116   358 ; OTHER BDB CAN BE FOUND,  IN WHICH CASE IT IS TAKEN.  THE
                                     0116   359 ; BDB CHAIN IS SEARCHED IN THE BACKWARD DIRECTION SINCE
                                     0116   360 ; BDB'S WHICH HAVE BEEN DECLARED TO HAVE HIGH PERMANENCE
                                     0116   361 ; FACTOR HAVE BEEN LINKED AT THE FRONT OF THE CHAIN.
                                     0116   362 ;
                                     0116   363 	ASSUME	BDB$L_BLINK EQ 4
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page   9
011             GET BUFFER ROUTINE                                                                                               (4)

            54         04 A4     D0  0116   364 20$:	MOVL	4(R4),R4		;GET NEXT BDB IN CHAIN
            50            54     D1  011A   365 	CMPL	R4,R0			;AT END OF LIST
                          1C     13  011D   366 	BEQL	30$			;BRANCH IF YES-EXIT
                       0B A4     95  011F   367 	TSTB	BDB$B_USECNT(R4)	;IS BDB ACCESSED
                          F2     12  0122   368 	BNEQ	20$			;BRANCH IF YES
         12 A4            52     B1  0124   369 	CMPW	R2,BDB$W_SIZE(R4)	;IS ITS BUFFER BIG ENOUGH
                          EC     1A  0128   370 	BGTRU	20$			;BRANCH IF NO
         0A A4            24     93  012A   371 	BITB	#BDB$M_IOP!BDB$M_WFO,BDB$B_FLGS(R4)
                          E6     12  012E   372 	BNEQ	20$			;BRANCH IF IOP OR THREAD WAITING
            53            04     E0  0130   373 	BBS	#CSH$V_NOBUFFER,R3,60$	;BRANCH IF A NO BUFFER CALL
                          4B         0133       
                                     0134   374 	ASSUME	BDB$V_VAL EQ 0
            34         0A A4     E8  0134   375 	BLBS	BDB$B_FLGS(R4),50$	;BRANCH IF BUFFER IS VALID
            5C            54     D0  0138   376 25$:	MOVL	R4,AP			;THIS IS THE ONE TO USE
                                     013B   377 30$:					;GET_BUFFER EXIT REF TAG
            54            5C     D0  013B   378 	MOVL	AP,R4			;GET BDB (IF ANY)
                          25     13  013E   379 	BEQL	45$			;BRANCH IF NONE
                                     0140   380 ;
                                     0140   381 ; IF BUFFER IS DIRTY THEN WRITE IT OUT
                                     0140   382 ;
         0A A4            01     E1  0140   383 	BBC	#BDB$V_DRT,BDB$B_FLGS(R4),35$ ;BRANCH IF NOT DIRTY
                          0A         0144       
                          0E     BB  0145   384 	PUSHR	#^M<R1,R2,R3>		;SAVE R1, SIZE AND FLAGS
                          FEB6'  30  0147   385 	BSBW	RM$SEQWTBD		;WRITE OUT BUFFER
                          0E     BA  014A   386 	POPR	#^M<R1,R2,R3>		;RESTORE R1, SIZE AND FLAGS
            12            50     E9  014C   387 	BLBC	R0,40$			;IF ERRORS EXIT
         0A A4         7F 8F     8A  014F   388 35$:	BICB2	#^C<BDB$M_LKDINWS>,BDB$B_FLGS(R4) ; CLEAR ALL BUT LOCKED IN WORKING SET
         0A A4            6E     88  0154   389 	BISB2	(SP),BDB$B_FLGS(R4)	;INIT BDB FLAGS
                       18 A4     D4  0158   390 	CLRL	BDB$L_VBN(R4)		; VBN
                       10 A4     B4  015B   391 	CLRW	BDB$W_NUMB(R4)		; AND # BYTE IN USE
                                     015E   392 	RMSSUC				;NOTE SUCCESS
            50            01     D0  015E       		MOVL	#1,R0
            5E            04     C0  0161   393 40$:	ADDL2	#4,SP			;POP BDB FLAGS VALUE OFF STACK
                                 05  0164   394 	RSB				;RETURN
                                     0165   395 
                                     0165   396 45$:	RMSERR	DME			;NOTE FAILURE
            50       84D4 8F     3C  0165       		MOVZWL	#<RMS$_DME&^XFFFF>,R0
                          F5     11  016A   397 	BRB	40$			;AND GET OUT
                                     016C   398 ;
                                     016C   399 ; BUFFER IS VALID ONLY NOTE IF:
                                     016C   400 ;	1. NO OTHER BDB HAS BEEN SEEN
                                     016C   401 ;	2. THIS BDB DOES NOT HAVE PERMANENCE AND LAST ONE DID
                                     016C   402 ;
                          5C     D5  016C   403 50$:	TSTL	AP			;BDB SEEN?
                          0A     13  016E   404 	BEQL	55$			;BRANCH IF NO
         0A A4            03     E0  0170   405 	BBS	#BDB$V_PRM,BDB$B_FLGS(R4),20$ ; BRANCH IF BDB HAS PERMANENCE
                          A1         0174       
         0A AC            03     E1  0175   406 	BBC	#BDB$V_PRM,BDB$B_FLGS(AP),20$ ; BRANCH IF LAST BDB DOES NOT HAVE PRM
                          9C         0179       
            5C            54     D0  017A   407 55$:	MOVL	R4,AP			; NOTE BDB
                          97     11  017D   408 	BRB	20$			; CONTINUE SCAN
                                     017F   409 ;
                                     017F   410 ; NO BUFFER CALL ONLY TAKE IF BUFFER SIZE IS ZERO
                                     017F   411 ;
                       12 A4     B5  017F   412 60$:	TSTW	BDB$W_SIZE(R4)		;ANY BUFFER
                          B4     13  0182   413 	BEQL	25$			;BRANCH IF NO AND EXIT
                          90     11  0184   414 	BRB	20$			;OTHERWISE CONTINUE SCAN
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  10
011             WAIT_BDB AND RM$WAKE_THREAD ROUTINES                                                                             (4)

                                     0186   415 	.SBTTL WAIT_BDB AND RM$WAKE_THREAD ROUTINES
                                     0186   416 ;++
                                     0186   417 ; WAIT FOR ACCESS TO BDB
                                     0186   418 ;
                                     0186   419 ; CALLING SEQUENCE:
                                     0186   420 ;
                                     0186   421 ;	BSBW	WAIT_BDB OR RM$WAIT_BDB
                                     0186   422 ;
                                     0186   423 ; INPUT PARAMETERS:
                                     0186   424 ;
                                     0186   425 ;	R11,R10,R9,R8 - SAME AS RM$CACHE
                                     0186   426 ;	R4 - BDB ADDRESS TO WAIT FOR
                                     0186   427 ;	R3 - CACHE FLAGS (ONLY CSH$V_LOCK)
                                     0186   428 ;
                                     0186   429 ; OUTPUT PARAMETERS:
                                     0186   430 ;
                                     0186   431 ;	R0,R1,R2 ,AP - DESTROYED
                                     0186   432 ;	BDB CAN BE ACCESSED BY STREAM
                                     0186   433 ;
                                     0186   434 ;--
                                     0186   435 RM$WAIT_BDB::
                                     0186   436 WAIT_BDB:
                                     0186   437 ;
                                     0186   438 ; PLACE THREAD AT END OF BDB WAIT LIST (IE R9) WE USE THE
                                     0186   439 ; INTERNAL STRUCTURES (IRAB/IFAB) IO STATUS BLOCK FOR NODE
                                     0186   440 ; WHICH HAS BEEN SUB FIELD DEFINED TO " BWB " BUCKET
                                     0186   441 ; WAIT BLOCK.
                                     0186   442 ;
                                     0186   443 	ASSUME	IRB$L_BWB EQ IFB$L_BWB
                       0C A9     D4  0186   444 	CLRL	IRB$L_BWB(R9)		;NOTE THIS AS END OF LIST
            50         1C A4     D0  0189   445 	MOVL	BDB$L_WAIT(R4),R0	;GET FIRST ENTRY
                          06     12  018D   446 	BNEQ	10$
         1C A4            59     D0  018F   447 	MOVL	R9,BDB$L_WAIT(R4)	;THIS IS THE FIRST ONE. NOTE AT HEAD
                          0F     11  0193   448 	BRB	30$			;OF LIST AND GO STALL
                                     0195   449 	ASSUME	IRB$L_BWB EQ IFB$L_BWB
                                     0195   450 ;
            51         0C A0     D0  0195   451 10$:	MOVL	IRB$L_BWB(R0),R1	;AT END OF LIST
                          05     13  0199   452 	BEQL	20$			;BRANCH IF YES
            50            51     D0  019B   453 	MOVL	R1,R0			;GO GET NEXT ENTRY
                          F5     11  019E   454 	BRB	10$			;LOOP BACK
                                     01A0   455 ;
         0C A0            59     D0  01A0   456 20$:	MOVL	R9,IRB$L_BWB(R0)	;PLACE AT END OF WAIT LIST
                                     01A4   457 30$:	SSB	#BDB$V_WFO,BDB$B_FLGS(R4) ;NOTE THREAD WAITING
         0A A4            05     E2  01A4       		BBSS	#BDB$V_WFO,BDB$B_FLGS(R4),30001$
                          00         01A8       
                                     01A9       30001$:
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  11
011             WAIT_BDB AND RM$WAKE_THREAD ROUTINES                                                                             (4)

                                     01A9   459 ;
                                     01A9   460 ; **** IF FILE SHARE MUST BE WAITING ON A BCB ****
                                     01A9   461 ; **** MUST NOTE PROCESS ID ETC. IN BWB ****
                                     01A9   462 ;
                          53     DD  01A9   463 SLEEP:	PUSHL	R3			;SAVE R3
                          FE52'  30  01AB   464 	BSBW	RM$STALL		;STALL THREAD
            53            8E     D0  01AE   465 	MOVL	(SP)+,R3		;RESTORE R3
                                     01B1   466 	CSB	#BDB$V_AST_DCL,BDB$B_FLGS(R4) ; NOTE AST DELIVERED
         0A A4            06     E5  01B1       		BBCC	#BDB$V_AST_DCL,BDB$B_FLGS(R4),30002$
                          00         01B5       
                                     01B6       30002$:
                                     01B6   467 ;
                                     01B6   468 ; IF NO LOCK REQUESTED THEN BRING UP THE NEXT THREAD AND WAKE IT UP
                                     01B6   469 ; IF LOCK REQUESTED AND USECNT = 0 BRING UP NEXT THREAD BUT DON'T
                                     01B6   470 ; WAKE IT. IF USECNT <> 0 GO BACK TO SLEEP IUNLESS THIS IS THE OWNER
                                     01B6   471 ; IN WHICH CASE TREAT AS IF USECNT = 0 (IE WAITING FOR IOP).
                                     01B6   472 ;
                                     01B6   473 	ASSUME	CSH$V_LOCK EQ 0
            18            53     E9  01B6   474 	BLBC	R3,WAKE_NEXT		; BRANCH IF NO LOCK REQUESTED
                       0B A4     95  01B9   475 	TSTB	BDB$B_USECNT(R4)	; USE COUNT = 0
                          06     13  01BC   476 	BEQL	GETNXT			; BRANCH IF YES
            59         0C A4     D1  01BE   477 	CMPL	BDB$L_OWN(R4),R9	; IS THS THE OWNER
                          E5     12  01C2   478 	BNEQ	SLEEP			; BRANCH IF NO
                                     01C4   479 ;
                                     01C4   480 ; BRING UP NEXT THREAD AND IF NONE CLEAR
                                     01C4   481 ; THE WAIT FOR BDB FLAG
                                     01C4   482 ;
                                     01C4   483 	ASSUME	IRB$L_BWB EQ IFB$L_BWB
         1C A4         0C A9     D0  01C4   484 GETNXT:	MOVL	IRB$L_BWB(R9),BDB$L_WAIT(R4)
                          05     12  01C9   485 	BNEQ	RETURN
                                     01CB   486 CLEAR_WFO:				; REF TAG
                                     01CB   487 	CSB	#BDB$V_WFO,BDB$B_FLGS(R4)
         0A A4            05     E5  01CB       		BBCC	#BDB$V_WFO,BDB$B_FLGS(R4),30003$
                          00         01CF       
                                     01D0       30003$:
                                 05  01D0   488 RETURN:	RSB
                                     01D1   489 
                                     01D1   490 
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  12
011             WAIT_BDB AND RM$WAKE_THREAD ROUTINES                                                                             (4)

                                     01D1   492 ;++
                                     01D1   493 ; WAKE UP THREAD WAITING FOR BDB
                                     01D1   494 ;
                                     01D1   495 ; CALLING SEQUENCE:
                                     01D1   496 ;
                                     01D1   497 ;	BSBW	RM$WAKE_THREAD
                                     01D1   498 ;
                                     01D1   499 ; INPUT PARAMETERS:
                                     01D1   500 ;		R4 - BDB ADDRESS TO WAKE UP NEXT THREAD FOR
                                     01D1   501 ;
                                     01D1   502 ; OUTPUT PARAMETERS:
                                     01D1   503 ;		R0,R1,R2 ARE DESTROYED
                                     01D1   504 ;		NEXT THREAD WAKE REQUEST ISSUED IF THERE WAS ONE
                                     01D1   505 ;		AND IF THERE WAS THEN BDB$V_AST_DCL BIT IS SET
                                     01D1   506 ;
                                     01D1   507 ; ALTERNATE INTERNAL ENTRY:
                                     01D1   508 ;
                                     01D1   509 ; CALLING SEQUENCE:
                                     01D1   510 ;	BRB	WAKE_NEXT
                                     01D1   511 ;
                                     01D1   512 ; INPUT PARAMETERS:
                                     01D1   513 ;		R11,R10,R9,R8 SAME AS RM$CACHE
                                     01D1   514 ;		R4 SAME AS RM$WAKE_THREAD
                                     01D1   515 ;
                                     01D1   516 ; OUTPUT PARAMETERS:
                                     01D1   517 ;		R0,R1,R2 DESTROYED
                                     01D1   518 ;		NEXT THREAD BROUGHT UP
                                     01D1   519 ;		IF NONE THEN BDB$V_WFO IS CLEARED IN BDB$V_FLGS
                                     01D1   520 ;		OTHERWISE, WAKE REQUEST IS MADE FOR THREAD
                                     01D1   521 ;
                                     01D1   522 ;--
                                     01D1   523 
                                     01D1   524 WAKE_NEXT:
                                     01D1   525 	ASSUME	IRB$L_BWB EQ IFB$L_BWB
         1C A4         0C A9     D0  01D1   526 	MOVL	IRB$L_BWB(R9),BDB$L_WAIT(R4) ; BRING UP NEXT THREAD
                                     01D6   527 RM$WAKE_THREAD::
            52         1C A4     D0  01D6   528 	MOVL	BDB$L_WAIT(R4),R2	; GET STRUCTURE ADDRESS FOR THREAD
                          EF     13  01DA   529 	BEQL	CLEAR_WFO		; BRANCH IF NONE
         0A A4            06     E2  01DC   530 	BBSS	#BDB$V_AST_DCL,BDB$B_FLGS(R4),10$ ; IF AST_DCL THEN JUST RETURN
                          14         01E0       
                                     01E1   531 	$DCLAST_S ASTADR=RM$STALLAST,-	; DECLEAR AST FOR THREAD
                                     01E1   532 		ASTPRM=R2
                          00     DD  01E1       		PUSHL	#0
                          52     DD  01E3       		PUSHL	R2
                 00000000'EF     DF  01E5       		PUSHAL	RM$STALLAST
   00000000'GF            03     FB  01EB       		CALLS	#3,G^SYS$DCLAST
            01            50     E9  01F2   533 	BLBC	R0,20$			; BRANCH IF FAIL
                                 05  01F5   534 10$:	RSB				; RETURN
                                     01F6   535 ;
                                     01F6   536 ; AST CAN'T BE DECLARED !!!!
                                     01F6   537 ;
                                     01F6   538 20$:	RMSPBUG	FTL$_CANTDOAST
                          FE07'  30  01F6       		BSBW	RM$BUG
                                 F7  01F9       		.BYTE	FTL$_CANTDOAST
                                     01FA   539 ;
                                     01FA   540 	.END
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (4)

$$.PSECT_EP    = 00000002            ERRRLK           000000F3 R     02   IFB$K_BLN_IDX    00000060            
$$RMSTEST      = 0000001A            ERRXIT           000000F6 R     02   IFB$K_BLN_REL    00000060            
$$RMS_PBUGCHK  = 00000010            EXIT             000000E0 R     02   IFB$K_BLN_SEQ    0000005C            
$$RMS_TBUGCHK  = 00000008            FTL$_ASBALLFAIL= FFFFFFF9            IFB$K_FHAEND     00000050            
$$RMS_UMODE    = 00000004            FTL$_BADASTPRM = FFFFFFF8            IFB$L_ARGLST     00000018            
BDB$B_BID        00000008            FTL$_BADBDB    = FFFFFFFA            IFB$L_ASBADDR    00000014            
BDB$B_BLN        00000009            FTL$_BADBUFSIZ = FFFFFFF3            IFB$L_AS_DEV     00000054            
BDB$B_FLGS       0000000A            FTL$_BADIFAB   = FFFFFFFD            IFB$L_BDB_BLNK   00000034            
BDB$B_POST_CCTL  00000023            FTL$_BADLEVEL  = FFFFFFE6            IFB$L_BDB_FLNK   00000030            
BDB$B_PRE_CCTL   00000022            FTL$_BADORGCASE= FFFFFFFB            IFB$L_BKPBITS    00000004            
BDB$B_REL_VBN    00000020            FTL$_CANTDOAST = FFFFFFF7            IFB$L_BWB        0000000C            
BDB$B_USECNT     0000000B            FTL$_DEALLERR  = FFFFFFEF            IFB$L_DVBN       00000058            
BDB$B_VAL_VBNS   00000021            FTL$_GTCHNFAIL = FFFFFFFC            IFB$L_EBK        00000044            
BDB$C_BID      = 0000000C            FTL$_IORNDN    = FFFFFFEE            IFB$L_FRB_PTR    00000028            
BDB$C_BLN        00000028            FTL$_LOCKFAILED= FFFFFFE7            IFB$L_FWA_BDB    00000050            
BDB$K_BLN        00000028            FTL$_NOASB     = FFFFFFF5            IFB$L_HBK        00000040            
BDB$L_ADDR       00000014            FTL$_NODIDORFID= FFFFFFEB            IFB$L_IDX_PTR    00000054            
BDB$L_BLINK      00000004            FTL$_NOLOCKBDB = FFFFFFE9            IFB$L_IOS        0000000C            
BDB$L_CURBUFADR  00000024            FTL$_NONETWORK = FFFFFFE8            IFB$L_IOS4       00000010            
BDB$L_FLINK      00000000            FTL$_NONXTBDB  = FFFFFFF4            IFB$L_IRAB_LNK   0000001C            
BDB$L_IOSB       00000020            FTL$_NOSTRUCT  = FFFFFFF6            IFB$L_LAST_FAB   00000024            
BDB$L_OWN        0000000C            FTL$_NOTLOCKED = FFFFFFEC            IFB$L_LOCK_BDB   00000050            
BDB$L_VBN        00000018            FTL$_RELEASFAIL= FFFFFFEA            IFB$L_MRN        00000054            
BDB$L_WAIT       0000001C            FTL$_SETPRTFAIL= FFFFFFFF            IFB$L_NRP_LNK    00000050            
BDB$L_WK1        00000020            FTL$_STKTOOBIG = FFFFFFFE            IFB$L_NWA_PTR    00000028            
BDB$M_AST_DCL  = 00000040            FTL$_XFERSIZE  = FFFFFFED            IFB$L_PRIM_DEV   00000000            
BDB$M_DRT      = 00000002            GBL...         = 00000000            IFB$L_RLB_LNK    0000002C            
BDB$M_IOP      = 00000004            GETNXT           000001C4 R     02   IFB$L_RNS_LEN    00000050            
BDB$M_LKDINWS  = 00000080            GET_BUFFER       000000F9 R     02   IFB$M_BIO      = 00000020            
BDB$M_NOLOCATE = 00000010            IFB$B_AMAX       00000059            IFB$M_BRO      = 00000040            
BDB$M_PRM      = 00000008            IFB$B_AVBN       00000058            IFB$M_DEL      = 00000004            
BDB$M_VAL      = 00000001            IFB$B_BID        00000008            IFB$M_EXE      = 00000080            
BDB$M_WFO      = 00000020            IFB$B_BKS        0000004A            IFB$M_GET      = 00000002            
BDB$V_AST_DCL  = 00000006            IFB$B_BLN        00000009            IFB$M_PUT      = 00000001            
BDB$V_DRT      = 00000001            IFB$B_EFN        0000000B            IFB$M_TRN      = 00000010            
BDB$V_IOP      = 00000002            IFB$B_EXTRABUF   0000005D            IFB$M_UPD      = 00000008            
BDB$V_LKDINWS  = 00000007            IFB$B_FAC        00000022            IFB$S_ORG      = 00000004            
BDB$V_NOLOCATE = 00000004            IFB$B_FSZ        0000004B            IFB$S_RFM      = 00000004            
BDB$V_PRM      = 00000003            IFB$B_KBUFSZ     0000005C            IFB$V_ACCESSED = 00000025            
BDB$V_VAL      = 00000000            IFB$B_MODE       0000000A            IFB$V_ANSI_D   = 00000026            
BDB$V_WFO      = 00000005            IFB$B_NUM_KEYS   0000005A            IFB$V_ASYNC    = 00000023            
BDB$W_NUMB       00000010            IFB$B_ORGCASE    00000023            IFB$V_ASYNCWAIT= 00000024            
BDB$W_SIZE       00000012            IFB$B_RAT        0000003D            IFB$V_BIO      = 00000005            
BIT...         = 00000000            IFB$B_RFMORG     0000003C            IFB$V_BRO      = 00000006            
BUG$_BADDFLTDIR= 00000001            IFB$B_UBUFSZ     0000005B            IFB$V_BUSY     = 00000020            
BUG_XFER_SIZE    000000E1 R     02   IFB$C_BID      = 0000000B            IFB$V_CREATE   = 00000032            
CLEAR_WFO        000001CB R     02   IFB$C_BLN        00000060            IFB$V_DAP      = 0000003E            
CSH$M_LOCK     = 00000001            IFB$C_BLN_IDX    00000060            IFB$V_DAP_OPEN = 0000003D            
CSH$M_NOBUFFER = 00000010            IFB$C_BLN_REL    00000060            IFB$V_DEL      = 00000002            
CSH$M_NOREAD   = 00000004            IFB$C_BLN_SEQ    0000005C            IFB$V_DFW      = 0000002C            
CSH$M_NOWAIT   = 00000002            IFB$C_DIR      = 00000003            IFB$V_DLT      = 0000002B            
CSH$M_READAHEAD= 00000008            IFB$C_FHAEND     00000050            IFB$V_DMO      = 00000028            
CSH$V_LOCK     = 00000000            IFB$C_IDX      = 00000002            IFB$V_EOF      = 00000021            
CSH$V_NOBUFFER = 00000004            IFB$C_MAXORG   = 00000002            IFB$V_EXE      = 00000007            
CSH$V_NOREAD   = 00000002            IFB$C_REL      = 00000001            IFB$V_GET      = 00000001            
CSH$V_NOWAIT   = 00000001            IFB$C_SEQ      = 00000000            IFB$V_MSE      = 00000031            
CSH$V_READAHEAD= 00000003            IFB$K_BLN        00000060            IFB$V_NORECLK  = 00000033            
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  14
SYMBOL TABLE                                                                                                                     (4)

IFB$V_NSP      = 0000003F            IRB$L_ASBADDR    00000014            IRB$W_RP_OFF     00000038            
IFB$V_NWA      = 0000003C            IRB$L_BKPBITS    00000004            IRB$W_RTOTLSZ    00000046            
IFB$V_ORG      = 00000004            IRB$L_BWB        0000000C            IRB$W_SAVE_POS   00000052            
IFB$V_PPF_IMAGE= 00000022            IRB$L_CURBDB     00000020            L$RMS230         00000000 R     04   
IFB$V_PPF_INPUT= 0000002E            IRB$L_CURVBN     00000030            L$RMS231         00000006 R     04   
IFB$V_PUT      = 00000000            IRB$L_IFAB_LNK   00000000            READ_AHEAD       000000E5 R     02   
IFB$V_RFM      = 00000000            IRB$L_IOS        0000000C            READ_CHECKS      000000BB R     02   
IFB$V_RWC      = 00000027            IRB$L_IOS4       00000010            RETURN           000001D0 R     02   
IFB$V_RW_ATTR  = 00000034            IRB$L_IRAB_LNK   0000001C            RLS$M_KEEP_ACC = 00000008            
IFB$V_SCF      = 0000002A            IRB$L_KEYBUF     00000048            RLS$M_KEEP_LOCK= 00000004            
IFB$V_SPL      = 00000029            IRB$L_LAST_RAB   00000024            RLS$M_RETURN   = 00000001            
IFB$V_SQO      = 0000002D            IRB$L_LOCK_BDB   0000005C            RLS$M_WRT_THRU = 00000002            
IFB$V_TEF      = 00000036            IRB$L_NRP        0000002C            RLS$V_KEEP_ACC = 00000003            
IFB$V_TMP      = 00000035            IRB$L_NRP_OFF    00000030            RLS$V_KEEP_LOCK= 00000002            
IFB$V_TRN      = 00000004            IRB$L_NRP_VBN    0000002C            RLS$V_RETURN   = 00000000            
IFB$V_UPD      = 00000003            IRB$L_NXTBDB     00000028            RLS$V_WRT_THRU = 00000001            
IFB$V_WRTACC   = 00000030            IRB$L_OWNER_ID   0000003C            RM$BUG           ********   X   02   
IFB$W_ASDEVBSIZ  0000005A            IRB$L_RFA_VBN    00000054            RM$CACHE         0000000C RG    02   
IFB$W_BKS_BYTES  0000005C            IRB$L_RLB_ADDR   00000044            RM$CACHEC        00000000 RG    02   
IFB$W_BKS_RECS   0000005E            IRB$L_RP         00000034            RM$GET_BUFFER    000000F9 RG    02   
IFB$W_CHNL       00000020            IRB$L_RP_OFF     00000038            RM$RDBUFWT       ********   X   02   
IFB$W_DEQ        0000004E            IRB$L_RP_VBN     00000034            RM$RELEASE       ********   X   02   
IFB$W_DEVBUFSIZ  00000038            IRB$L_RRV_VBN    0000004C            RM$SEQWTBD       ********   X   02   
IFB$W_EBK0       00000044            IRB$L_TEMP0      00000044            RM$STALL         ********   X   02   
IFB$W_EBK2       00000046            IRB$L_TEMP1      00000048            RM$STALLAST      ********   X   02   
IFB$W_FFB        00000048            IRB$V_ASYNC    = 00000023            RM$WAIT_BDB      00000186 RG    02   
IFB$W_IOS2       0000000E            IRB$V_ASYNCWAIT= 00000024            RM$WAKE_THREAD   000001D6 RG    02   
IFB$W_LRL        0000003E            IRB$V_BIO_LAST = 00000027            RMS$V_STVSTATUS= 0000000E            
IFB$W_MRS        0000004C            IRB$V_BRO_SW   = 00000028            RMS$_ABO       = 000183EC            
IFB$W_RTDEQ      0000003A            IRB$V_BUSY     = 00000020            RMS$_ACC       = 0001C002            
IRB$B_BCNT       00000040            IRB$V_DAP_CONN = 0000003E            RMS$_ACT       = 0001825A            
IRB$B_BID        00000008            IRB$V_DAP_FMODE= 0000003F            RMS$_AID       = 000183F4            
IRB$B_BLN        00000009            IRB$V_DUP      = 0000002C            RMS$_ALN       = 000183FC            
IRB$B_EFN        0000000B            IRB$V_EOF      = 00000021            RMS$_ALQ       = 00018404            
IRB$B_KEYSZ      00000051            IRB$V_FIND     = 00000029            RMS$_ANI       = 0001840C            
IRB$B_MBC        00000041            IRB$V_FIND_LAST= 00000025            RMS$_AOP       = 00018414            
IRB$B_MODE       0000000A            IRB$V_IDX_ERR  = 00000031            RMS$_ATR       = 0001C0CC            
IRB$B_NRP_ID     00000030            IRB$V_LOCKABOVE= 00000002            RMS$_ATW       = 0001C0D4            
IRB$B_NRP_KREF   00000031            IRB$V_NEW_IDX  = 00000003            RMS$_BKS       = 0001841C            
IRB$B_NVBNS      00000048            IRB$V_POSINSERT= 00000000            RMS$_BKZ       = 00018424            
IRB$B_POST_CCTL  00000045            IRB$V_PPF_EOF  = 0000002E            RMS$_BLN       = 0001842C            
IRB$B_PPF_ISI    0000003E            IRB$V_PPF_FNDSV= 00000030            RMS$_BOF       = 00018198            
IRB$B_PRE_CCTL   00000044            IRB$V_PPF_IMAGE= 00000022            RMS$_BUG       = 00018434            
IRB$B_RFA_ID     00000058            IRB$V_PPF_SKIP = 0000002F            RMS$_BUG_DAP   = 00018444            
IRB$B_RP_ID      00000038            IRB$V_PUTS_LAST= 00000026            RMS$_BUG_DDI   = 0001843C            
IRB$B_RP_KREF    00000039            IRB$V_RAHWBH   = 0000002A            RMS$_BUG_XX2   = 0001844C            
IRB$B_RRV_ID     00000050            IRB$V_SKIP_NEXT= 0000002B            RMS$_BUG_XX3   = 00018454            
IRB$B_SRCHFLAGS  00000043            IRB$V_SRCHGT   = 00000001            RMS$_BUG_XX4   = 0001845C            
IRB$B_STOPLEVEL  00000042            IRB$V_UNLOCK_RP= 0000002D            RMS$_BUG_XX5   = 00018464            
IRB$C_BID      = 0000000A            IRB$V_WRITE    = 00000029            RMS$_BUG_XX6   = 0001846C            
IRB$C_BLN_IDX    0000006C            IRB$W_CSIZ       00000042            RMS$_BUG_XX7   = 00018474            
IRB$C_BLN_REL    00000048            IRB$W_DUP_POS    00000032            RMS$_BUG_XX8   = 0001847C            
IRB$C_BLN_SEQ    0000004C            IRB$W_IOS2       0000000E            RMS$_BUG_XX9   = 00018484            
IRB$K_BLN_IDX    0000006C            IRB$W_NRP_OFF    00000030            RMS$_CAA       = 0001848C            
IRB$K_BLN_REL    00000048            IRB$W_OWN_ID     0000003C            RMS$_CCF       = 0001C0DC            
IRB$K_BLN_SEQ    0000004C            IRB$W_OWN_ISI    0000003E            RMS$_CCR       = 00018494            
IRB$L_ARGLST     00000018            IRB$W_ROVHDSZ    00000044            RMS$_CDA       = 0001C0E4            
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  15
SYMBOL TABLE                                                                                                                     (4)

RMS$_CHG       = 0001849C            RMS$_KSZ       = 000185A4            RMS$_RTB       = 000181A8            
RMS$_CHK       = 000184A4            RMS$_LAN       = 000185AC            RMS$_SEQ       = 000186AC            
RMS$_CHN       = 0001C0EC            RMS$_LBL       = 000185B4            RMS$_SHR       = 000186B4            
RMS$_COD       = 000184AC            RMS$_LNE       = 000185BC            RMS$_SIZ       = 000186BC            
RMS$_CONTROLC  = 00010651            RMS$_LOC       = 000185C4            RMS$_SPL       = 0001C042            
RMS$_CONTROLO  = 00010609            RMS$_MBC       = 00018734            RMS$_SQO       = 000186C4            
RMS$_CONTROLY  = 00010611            RMS$_MKD       = 0001C032            RMS$_STALL     = 00018001            
RMS$_CRE       = 0001C00A            RMS$_MRN       = 000185CC            RMS$_STK       = 000186CC            
RMS$_CREATED   = 00010619            RMS$_MRS       = 000185D4            RMS$_SUC       = 00010001            
RMS$_CUR       = 000184B4            RMS$_NAM       = 000185DC            RMS$_SUP       = 000182D2            
RMS$_DAC       = 0001C012            RMS$_NEF       = 000185E4            RMS$_SUPERSEDE = 00010631            
RMS$_DAN       = 000184BC            RMS$_NET       = 0001874C            RMS$_SYN       = 000186D4            
RMS$_DEL       = 00018262            RMS$_NID       = 000185EC            RMS$_SYS       = 0001C10C            
RMS$_DEV       = 000184C4            RMS$_NMF       = 000182CA            RMS$_TEMP1     = 0001826A            
RMS$_DIR       = 000184CC            RMS$_NOD       = 000185F4            RMS$_TEMP2     = 0001868C            
RMS$_DME       = 000184D4            RMS$_NORMAL    = 00010001            RMS$_TMO       = 000181B0            
RMS$_DNA       = 000184DC            RMS$_NPK       = 000185FC            RMS$_TRE       = 000186DC            
RMS$_DNF       = 0001C04A            RMS$_OK_ALK    = 00018039            RMS$_TYP       = 000186E4            
RMS$_DNR       = 00018272            RMS$_OK_DEL    = 00018041            RMS$_UBF       = 000186EC            
RMS$_DPE       = 0001C03A            RMS$_OK_DUP    = 00018011            RMS$_USZ       = 000186F4            
RMS$_DTP       = 000184E4            RMS$_OK_IDX    = 00018019            RMS$_VER       = 000186FC            
RMS$_DUP       = 000184EC            RMS$_OK_LIM    = 00018051            RMS$_VOL       = 00018704            
RMS$_DVI       = 000184F4            RMS$_OK_RLK    = 00018021            RMS$_WBE       = 0001C12C            
RMS$_ENT       = 0001C01A            RMS$_OK_RNF    = 00018049            RMS$_WER       = 0001C114            
RMS$_ENV       = 00018724            RMS$_OK_RRV    = 00018029            RMS$_WLD       = 00018744            
RMS$_EOF       = 0001827A            RMS$_ORD       = 00018604            RMS$_WLK       = 000182BA            
RMS$_ESA       = 000184FC            RMS$_ORG       = 0001860C            RMS$_WPL       = 0001C11C            
RMS$_ESL       = 00018714            RMS$_PBF       = 00018614            RMS$_WSF       = 0001871C            
RMS$_ESS       = 00018504            RMS$_PENDING   = 00018009            RMS$_XAB       = 0001870C            
RMS$_EXP       = 000182C2            RMS$_PLG       = 0001861C            SLEEP            000001A9 R     02   
RMS$_EXT       = 0001C022            RMS$_PLV       = 0001872C            SUC_EXIT         000000DD R     02   
RMS$_FAB       = 0001850C            RMS$_POS       = 00018624            SYS$DCLAST       ********   X   02   
RMS$_FAC       = 00018514            RMS$_PRM       = 0001862C            WAIT_BDB         00000186 R     02   
RMS$_FEX       = 00018282            RMS$_PRV       = 0001829A            WAKE_NEXT        000001D1 R     02   
RMS$_FLG       = 0001851C            RMS$_QUO       = 00018634            
RMS$_FLK       = 0001828A            RMS$_RAB       = 0001863C            
RMS$_FNA       = 00018524            RMS$_RAC       = 00018644            
RMS$_FND       = 0001C02A            RMS$_RAT       = 0001864C            
RMS$_FNF       = 00018292            RMS$_RBF       = 00018654            
RMS$_FNM       = 0001852C            RMS$_RER       = 0001C0F4            
RMS$_FOP       = 0001853C            RMS$_REX       = 000182A2            
RMS$_FSZ       = 00018534            RMS$_RFA       = 0001865C            
RMS$_FUL       = 00018544            RMS$_RFM       = 00018664            
RMS$_IAL       = 0001854C            RMS$_RHB       = 0001866C            
RMS$_IAN       = 00018554            RMS$_RLF       = 00018674            
RMS$_IBF       = 00018754            RMS$_RLK       = 000182AA            
RMS$_IDX       = 0001855C            RMS$_RMV       = 0001C0FC            
RMS$_IFA       = 0001C124            RMS$_RNF       = 000182B2            
RMS$_IFI       = 00018564            RMS$_RNL       = 000181A0            
RMS$_IMX       = 0001856C            RMS$_ROP       = 0001867C            
RMS$_IOP       = 00018574            RMS$_RPL       = 0001C104            
RMS$_IRC       = 0001857C            RMS$_RRV       = 00018684            
RMS$_ISI       = 00018584            RMS$_RSA       = 000182DA            
RMS$_KBF       = 0001858C            RMS$_RSL       = 0001873C            
RMS$_KEY       = 00018594            RMS$_RSS       = 00018694            
RMS$_KFF       = 00018031            RMS$_RST       = 0001869C            
RMS$_KRF       = 0001859C            RMS$_RSZ       = 000186A4            
RM0CACHE        IO CACHE ROUTINE                                 21-AUG-1978 21:16:24   VAX-11 MACRO X0.3-11               Page  16
PROGRAM SECTION SYNOPSIS                                                                                                         (4)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$RMS23           000001FA      02     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  
$ABS$            0000006C      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
L$RMS23          00000013      04     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
11692. BYTES LEFT IN FREE MEMORY POOL.
2354. BYTES OF RECLAIMED MEMORY.
OBJ$:RM0CACHE,LIS$:RM0CACHE/-SP=EXECML$/ML,LIB$:R/ML,SRC$:RM0CACHE
27 MLB DIR RDS - 931 GETS TO DEFINE 30 MACROS. 68 INTER. FILE WRITES. 
