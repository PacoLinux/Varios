RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)      44  DECLARATIONS
   (1)      71  RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG 
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   1
015                                                                                                                              (1)

                                     0000     1 	$BEGIN	RM1PUTBLD,015,$RMS1,<SEQ. ORG. PUT TO BLOCK DEVICE>
                                     0000     2 ;
                                     0000     3 ; COPYRIGHT (C) 1977
                                     0000     4 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     5 ;
                                     0000     6 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     7 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000     8 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000     9 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    10 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    11 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    12 ; REMAIN IN DEC.
                                     0000    13 ;
                                     0000    14 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    15 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    16 ; CORPORATION.
                                     0000    17 ;
                                     0000    18 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    19 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    20 ;
                                     0000    21 ;++
                                     0000    22 ; FACILITY: RMS32
                                     0000    23 ;
                                     0000    24 ; ABSTRACT:
                                     0000    25 ;		THIS ROUTINE IS CALLED BY RM1PUT TO HANDLE THE
                                     0000    26 ;		BLOCKING OF RECORDS REQUIRED WHEN DOING $PUTS TO 
                                     0000    27 ;		A BLOCK DEVICE.
                                     0000    28 ;
                                     0000    29 ; ENVIRONMENT:
                                     0000    30 ;		STAR PROCESSOR RUNNING STARLET EXEC.
                                     0000    31 ;
                                     0000    32 ; AUTHOR: L F LAVERDURE,	 CREATION DATE: 25-MAR-77
                                     0000    33 ;
                                     0000    34 ; MODIFIED BY:
                                     0000    35 ;
                                     0000    36 ;	L F LAVERDURE,      14-AUG-78  17:10	;FIX LAST BLOCK WRITE FOR NFS MT
                                     0000    37 ;	L F LAVERDURE,      7-AUG-78  16:33
                                     0000    38 ;	R A NEWELL,      3-AUG-78  17:31
                                     0000    39 ;	R A NEWELL,      26-JUL-78  16:30
                                     0000    40 ;	L F LAVERDURE,   6-JUL-78  17:10
                                     0000    41 ; 01	- 
                                     0000    42 ;--
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   2
015             DECLARATIONS                                                                                                     (1)

                                     0000    44 	.SBTTL	DECLARATIONS
                                     0000    45 ;
                                     0000    46 ; INCLUDE FILES:
                                     0000    47 ;
                                     0000    48 
                                     0000    49 ;
                                     0000    50 ; MACROS:
                                     0000    51 	$IFBDEF
                                     0000    52 	$DEVDEF
                                     0000    53 	$IRBDEF
                                     0000    54 	$RABDEF
                                     0000    55 	$FABDEF
                                     0000    56 	$IMPDEF
                                     0000    57 	$BDBDEF
                                     0000    58 	$RMSDEF
                                     0000    59 	.LIST MEB
                                     0000    60 ;
                                     0000    61 
                                     0000    62 ;
                                     0000    63 ; EQUATED SYMBOLS:
                                     0000    64 ;
                                     0000    65 
                                     0000    66 ;
                                     0000    67 ; OWN STORAGE:
                                     0000    68 ;
                                     0000    69 
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   3
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0000    71 	.SBTTL RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG PUT TO FILES DEVICE
                                     0000    72 ;++
                                     0000    73 ; FUNCTIONAL DESCRIPTION:
                                     0000    74 ;
                                     0000    75 ;	THIS MODULE PERFORMS THE $PUT RECORD PROCESSING FOR
                                     0000    76 ;	THE SEQUENTIAL FILE ORGANIZATION TO A FILES-ORIENTED 
                                     0000    77 ;	(I.E., BLOCKED) DEVICE, PERFORMING THE REQUIRED RECORD
                                     0000    78 ;	BLOCKING.
                                     0000    79 ;
                                     0000    80 ; CALLING SEQUENCE:
                                     0000    81 ;
                                     0000    82 ;	BSBW	RM$PUT_BLK_DEV
                                     0000    83 ;
                                     0000    84 ; INPUT PARAMETERS:
                                     0000    85 ;
                                     0000    86 ;	R11	IMPURE AREA ADDR
                                     0000    87 ;	R10	IFAB ADDR
                                     0000    88 ;	R9	IRAB ADDR
                                     0000    89 ;	R8	RAB ADDR
                                     0000    90 ;	R6	RECORD DATA LENGTH IN BYTES
                                     0000    91 ;	R5	RECORD ADDRESS
                                     0000    92 ;
                                     0000    93 ; IMPLICIT INPUTS:
                                     0000    94 ;
                                     0000    95 ;	SEQUENTIAL ORG TEMP.
                                     0000    96 ;		IRB$W_ROVHDSZ:	RECORD OVERHEAD SIZE IN BYTES
                                     0000    97 ;		IRB$W_RTOTLSZ:	TOTAL RECORD LENGTH INCLUDING
                                     0000    98 ;				OVERHEAD BYTES
                                     0000    99 ;	FIRST BLOCK OF USER BUFFER PROBED
                                     0000   100 ;	RECORD SIZE CHECKED FOR VALIDITY
                                     0000   101 ;
                                     0000   102 ; OUTPUT PARAMETERS:
                                     0000   103 ;
                                     0000   104 ;	R0	STATUS CODE
                                     0000   105 ;	R1-R7	DESTROYED
                                     0000   106 ;
                                     0000   107 ; IMPLICIT OUTPUTS:
                                     0000   108 ;
                                     0000   109 ;	RAB$W_RFA
                                     0000   110 ;	UPDATES IRAB AND BDB(S) AS PER THE PUT
                                     0000   111 ;
                                     0000   112 ; COMPLETION CODES:
                                     0000   113 ;
                                     0000   114 ;	STANDARD RMS
                                     0000   115 ;
                                     0000   116 ; SIDE EFFECTS:
                                     0000   117 ;
                                     0000   118 ;	NONE
                                     0000   119 ;
                                     0000   120 ;--
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   4
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0000   122 ;
                                     0000   123 ;  ENTRY POINT FOR THE SEQUENTIAL PUT TO BLOCK DEVICE ROUTINE
                                     0000   124 ;
                                     0000   125 RM$PUT_BLK_DEV::
                                     0000   126 	$TSTPT	PUTBLD
                 00000200'9F     D6  0000       		INCL	@#PIO$GL_FMLH+512+TPT$L_PUTBLD
                                     0006   127 ;
                                     0006   128 ;  THE FOLLOWING CODE CAUSES THE CURRENT BUFFER TO BE SET UP CORRECTLY
                                     0006   129 ;  DEPENDENT UPON WHETHER THE CORRESPONDING BLOCK MUST BE READ OR NOT.
                                     0006   130 ;
                          53     D4  0006   131 	CLRL	R3				; INDICATE READ REQUIRED
                       30 A9     B5  0008   132 	TSTW	IRB$W_NRP_OFF(R9)		; CHECK FOR NON-ZERO OFFSET
                          02     12  000B   133 	BNEQ	20$				; AND BRANCH IF SO
                          53     D6  000D   134 10$:	INCL	R3				; ZERO OFFSET - FLAG NO READ REQUIRED
                          FFEE'  30  000F   135 20$:	BSBW	RM$GETBLKNRP			; GET THE BLOCK
            21            50     E9  0012   136 	BLBC	R0,ZERO_RFA_BR			; BRANCH IF NOT SUCCESSFUL
                                     0015   137 ;
                                     0015   138 ; CURRENT REGISTER CONTENTS:
                                     0015   139 ;
                                     0015   140 ;	R8-R11	SAME AS UPON ENTRY
                                     0015   141 ;	R7	END OF BLOCK ADDR + 1
                                     0015   142 ;	R6	DATA RECORD SIZE
                                     0015   143 ;	R5	DATA RECORD ADDR
                                     0015   144 ;	R4	BDB ADDR
                                     0015   145 ;	R1	ADDR OF BLOCK BUFFER
                                     0015   146 ;
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   5
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0015   148 ;
                                     0015   149 ; MAKE R1 INTO ADDR OF LOCATION TO BUILD THE RECORD
                                     0015   150 ;
                                     0015   151 PUT00:
            51         30 A9     C0  0015   152 	ADDL2	IRB$L_NRP_OFF(R9),R1		; MAKE INTO ADDRESS
                                     0019   153 ;
                                     0019   154 ; SET RP FROM NRP
                                     0019   155 ;
         34 A9         2C A9     7D  0019   156 	MOVQ	IRB$L_NRP_VBN(R9),IRB$L_RP_VBN(R9)
                                     001E   157 ;
                                     001E   158 ; COMPUTE # BYTES LEFT IN BLOCK AND CHECK FOR FIT
                                     001E   159 ; IF RECORDS NOT ALLOWED TO CROSS BLOCK BOUNDARIES
                                     001E   160 ;
            57            51     C3  001E   161 	SUBL3	R1,R7,R0			; COMPUTE # BYTES REMAINING
                          50         0021       
         3D AA            03     E1  0022   162 	BBC	#FAB$V_BLK,IFB$B_RAT(R10),BUILD	; BRANCH IF NO BOUNDARY RESTRICTIONS
                          12         0026       
            50         46 A9     B1  0027   163 	CMPW	IRB$W_RTOTLSZ(R9),R0		; DOES RECORD FIT?
                          0C     1B  002B   164 	BLEQU	BUILD				; BRANCH IF YES
                          00CE   30  002D   165 	BSBW	RM$PADBLK1			; PAD OUT BLOCK IF NECC.
                          00C5   30  0030   166 	BSBW	CHNGBF				; GET NEXT BLOCK
            DF            50     E8  0033   167 	BLBS	R0,PUT00			; AND CONTINUE IF OK.
                                     0036   168 ZERO_RFA_BR:
                          0086   31  0036   169 	BRW	ZERO_RFA			; GET OUT ON ERROR
                                     0039   170 ;
                                     0039   171 ; BUILD RECORD STARTING AT THE ADDRESS NOTED IN R3
                                     0039   172 ;
                       44 A9     B5  0039   173 BUILD:	TSTW	IRB$W_ROVHDSZ(R9)		; ANY OVERHEAD SIZE?
                          15     13  003C   174 	BEQL	MOVREC				; BRANCH IF NONE
                                     003E   175 ;
                                     003E   176 ; REC FORMAT IS EITHER VAR OR VFC.
                                     003E   177 ; MUST WRITE OUT SIZE FIELD.
                                     003E   178 ; THERE WILL BE ROOM FOR IT IN THE CURRENT BLOCK
                                     003E   179 ; AS THIS WAS CHECKED BY LAST PUT.
                                     003E   180 ;
            6A            26     E1  003E   181 	BBC	#IFB$V_ANSI_D,(R10),SETSIZ	; BRANCH IF NOT ANSI
                          03         0041       
                                     0042   182 ;
                                     0042   183 ; SIZE FIELD IS ANSI_D FORMAT, I.E., 4-DECIMAL ASCII BYTES
                                     0042   184 ;
                                     0042   185 	$PSECT_BR	$RMS1ANSID
                          FFBB'  31  0042       		BRW	$RMS1ANSID0
                                     0045       		.SAVE
                                 00000000       		.PSECT	$RMS1ANSID,GBL,NOWRT
                                     0000       $RMS1ANSID0:
                          03     10  0000   186 	BSBB	ANSIZE				; STORE SIZE IN BUFFER
                          0045'  31  0002   187 	BRW	CHKVFC				; AND CONTINUE
            50            03     D0  0005   188 ANSIZE:	MOVL	#3,R0				; COUNTER FOR 4 DIGITS
            52         46 A9     3C  0008   189 	MOVZWL	IRB$W_RTOTLSZ(R9),R2		; GET TOTAL RECORD SIZE
                          53     D4  000C   190 	CLRL	R3				; ZERO EXTEND  "
            52            0A     7B  000E   191 10$:	EDIV	#10,R2,R2,AP			; DIVIDE OUT NEXT DIGIT
            5C            52         0011       
            5C            30     81  0013   192 	ADDB3	#^A/0/,AP,(R1)[R0]		; CONVERT TO ASCII AND STORE
                          6140       0016       
            F3            50     F4  0018   193 	SOBGEQ	R0,10$				; CONTINUE IF MORE
            51            04     C0  001B   194 	ADDL2	#4,R1				; MOVE PAST LENGTH FIELD
                                 05  001E   195 	RSB
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   6
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     001F   196 	$PSECT_RESTORE
                                 00000045       		.RESTORE
                                     0045   197 ;
                                     0045   198 ;
                                     0045   199 ; STORE BINARY SIZE FIELD
                                     0045   200 ;
         46 A9            02     A3  0045   201 SETSIZ:	SUBW3	#2,IRB$W_RTOTLSZ(R9),(R1)+	; STORE SIZE OF DATA + RHB
                          81         0049       
                                     004A   202 ;
                                     004A   203 ; IF VFC FORMAT STORE RECORD HEADER DATA
                                     004A   204 ;
            03         3C AA     91  004A   205 CHKVFC:	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC	; IS IT VFC?
                          03     12  004E   206 	BNEQ	MOVREC				; BRANCH IF NOT
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   7
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0050   208 ;
                                     0050   209 ;  PROCESS VFC RECORD HEADER
                                     0050   210 ;
                                     0050   211 	$PSECT_CALL	$RMS1VFC
                          FFAD'  30  0050       		BSBW	$RMS1VFC1
                                     0053       		.SAVE
                                 00000000       		.PSECT	$RMS1VFC,GBL,NOWRT
                                     0000       $RMS1VFC1:
            7E            55     7D  0000   212 	MOVQ	R5,-(SP)			; SAVE RECORD ADDR & SIZE
            56         4B AA     9A  0003   213 	MOVZBL	IFB$B_FSZ(R10),R6		; GET HEADER LENGTH
         3D AA            02     E1  0007   214 	BBC	#FAB$V_PRN,IFB$B_RAT(R10),RHBADR ;BRANCH IF NOT PRINT FILE
                          64         000B       
                                     000C   215 	ASSUME	IMP$W_RMSSTATUS EQ 0
                                     000C   216 	ASSUME	IMP$V_IIOS EQ 0
            61            6B     E8  000C   217 	BLBS	(R11),RHBADR			;BRANCH IF IMAGE IO SEG.
                                     000F   218 ;
                                     000F   219 ;  THIS IS A PROCESS-PERMANENT 'PRINT' FILE.
                                     000F   220 ;  USE THE CONNECT-SET RAT FROM ISI AND CONVERT THE SPECIFIED
                                     000F   221 ;  CARRIAGE CONTROL TO PRINT FILE FORMAT AND STORE IN RHB
                                     000F   222 ;
                                     000F   223 
                           00000016  000F   224 	OFF=<RAB$W_ISI*8>+RAB$V_PPF_RAT	;DEFINE OFFSET TO ISI RAT
                                     000F   225 
            68            18     E0  000F   226 	BBS	#FAB$V_PRN+OFF,(R8),RHBADR	;BRANCH IF 'PRN'
                          5D         0012       
            68            17     E0  0013   227 	BBS	#FAB$V_CR+OFF,(R8),1$		;BRANCH IF 'CR'
                          25         0016       
            68            16     E1  0017   228 	BBC	#FAB$V_FTN+OFF,(R8),ZERO_RHB	;BRANCH IF NOT 'FTN'
                          2A         001A       
                                     001B   229 ;
                                     001B   230 ;  FORTRAN CARRIAGE CONTROL
                                     001B   231 ;  INTERPRET FORTRAN CARRIAGE CONTROL BYTE IN RECORD AND CONVERT TO PRN FORMAT
                                     001B   232 ;
                       04 AE     D5  001B   233 	TSTL	4(SP)				;ZERO LENGTH RECORD?
                          1C     13  001E   234 	BEQL	1$				;BRANCH IF YES (LF-REC-CR)
                       04 AE     D7  0020   235 	DECL	4(SP)				;DECR SIZE OF RECORD
                       FE A1     B7  0023   236 	DECW	-2(R1)				;DECR SIZE OF RECORD IN BUFFER
            6A            26     E1  0026   237 	BBC	#IFB$V_ANSI_D,(R10),10$		; BRANCH IF NOT ANSI MAGTAPE
                          08         0029       
                       46 A9     B7  002A   238 	DECW	IRB$W_RTOTLSZ(R9)		; DECREMENT TOTAL RECORD SIZE
                          71     D5  002D   239 	TSTL	-(R1)				; BACK UP TO LENGTH FIELD
                          FFD3'  30  002F   240 	BSBW	ANSIZE				; STORE ADJUSTED RECORD LENGTH
            50            65     90  0032   241 10$:	MOVB	(R5),R0				;GET FORTRAN BYTE
                          6E     D6  0035   242 	INCL	(SP)				;AND INCR REC ADDR
                          FFC6'  30  0037   243 	BSBW	RM$MAPFTN			;MAP FORTRAN TO PRE/POST FORMAT
                          05     11  003A   244 	BRB	2$
                                     003C   245 ;
                                     003C   246 ;  LF - RECORD - CR CARRIAGE CONTROL REQUIRED
                                     003C   247 ;
            52       8D01 8F     B0  003C   248 1$:	MOVW	#1+<<128+13>@8>,R2		;LF-REC-CR IN PRE/POST
                                     0041   249 ;
         0C A8            52     B0  0041   250 2$:	MOVW	R2,RAB$L_STV(R8)		;COPY CARRIAGE CTL TO STV AREA
                                     0045   251 ;
                                     0045   252 ; NO RECORD HEADER SPECIFIED SO ZERO IT
                                     0045   253 ;
                                     0045   254 ZERO_RHB:
                          56     DD  0045   255 	PUSHL	R6				; SAVE RHB SIZE
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   8
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0047   256 ZERO_RHB1:
            55         0C A8     DE  0047   257 	MOVAL	RAB$L_STV(R8),R5		; GET ADDRESS OF 4 ZERO BYTES
            04            56     D1  004B   258 	CMPL	R6,#4				; RHB > 4 BYTES?
                          03     1B  004E   259 	BLEQU	SETVFC				; BRANCH IF NOT
            56            04     D0  0050   260 	MOVL	#4,R6				; JUST MOVE 4 BYTES THIS TIME
            6E            56     C2  0053   261 SETVFC:	SUBL2	R6,(SP)				; ADJUST REMAINING COUNT
                          0069'  30  0056   262 	BSBW	BLDREC				; MOVE THE ZEROES
            08            50     E9  0059   263 	BLBC	R0,30$				; BRANCH ON ERROR
                       0C A8     D4  005C   264 	CLRL	RAB$L_STV(R8)			; RE-ZERO STV
            56            6E     D0  005F   265 	MOVL	(SP),R6				; GET REMAINING COUNT
                          E3     12  0062   266 	BNEQ	ZERO_RHB1			; AND CONTINUE IF NOT DONE
                          8E     D5  0064   267 30$:	TSTL	(SP)+				; POP TEMPORARY COUNT
                          17     11  0066   268 	BRB	CHKERR
                                     0068   269 ;
                                     0068   270 ;  HANDLE BAD RECORD HEADER BUFFER
                                     0068   271 ;
                                     0068   272 ERRRHB:	RMSERR	RHB				; CHANGE ERROR CODE
            50       866C 8F     3C  0068       		MOVZWL	#<RMS$_RHB&^XFFFF>,R0
                                     006D   273 ZERO_RFA_BR1:
                          004F'  31  006D   274 	BRW	ZERO_RFA			; & GET OUT
                                     0070   275 ;
                                     0070   276 ;  GET ADDRESS OF RECORD HEADER BUFFER AND PROCESS IT
                                     0070   277 ;
            55         2C A8     D0  0070   278 RHBADR:	MOVL	RAB$L_RHB(R8),R5		; GET ADDRESS
                          CF     13  0074   279 	BEQL	ZERO_RHB			; BRANCH IF NONE
                                     0076   280 	IFNORD	R6,(R5),ERRRHB			; PROBE IT
            56            00     0C  0076       		PROBER	#0,R6,(R5)
                          65         0079       
                          EC     13  007A       		BEQL	ERRRHB
                                     007C   281 ;
                                     007C   282 ; MOVE THE FIXED HEADER AND REPROBE USER BUFFER
                                     007C   283 ;
                          0043'  30  007C   284 	BSBW	BLDREC				; JUST LIKE NORMAL RECORD
            55            8E     7D  007F   285 CHKERR:	MOVQ	(SP)+,R5			; RESTORE USER BUFFER REGS
            E8            50     E9  0082   286 	BLBC	R0,ZERO_RFA_BR1			; GET OUT ON ERROR
                          FF78'  30  0085   287 	BSBW	RM$PROBEREAD			; REPROBE IT
            E2            50     E9  0088   288 	BLBC	R0,ZERO_RFA_BR1
                                     008B   289 	$PSECT_RETURN
                                 05  008B       		RSB
                                 00000053       		.RESTORE
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page   9
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0053   291 ;
                                     0053   292 ; NOW MOVE THE DATA RECORD
                                     0053   293 ;
                          6D     10  0053   294 MOVREC:	BSBB	BLDREC				; GO MOVE IT
            67            50     E9  0055   295 	BLBC	R0,ZERO_RFA			; GET OUT ON ERROR
                                     0058   296 ;
                                     0058   297 ; PUT OPERATION NOW COMPLETE.
                                     0058   298 ; CALCULATE NEW VALUE FOR NRP.
                                     0058   299 ;
                                     0058   300 ; ROUND UP TO WORD BOUNDARY UNLESS ANSI D
                                     0058   301 ;
            6A            26     E0  0058   302 	BBS	#IFB$V_ANSI_D,(R10),10$		; BRANCH IF ANSI D
                          05         005B       
                          51     D6  005C   303 	INCL	R1				; ROUND UP
            51            01     CA  005E   304 	BICL2	#1,R1				; ROUND UP
            54         20 A9     D0  0061   305 10$:	MOVL	IRB$L_CURBDB(R9),R4		; GET CURRENT BDB
            51         24 A4     C3  0065   306 	SUBL3	BDB$L_CURBUFADR(R4),R1,IRB$L_NRP_OFF(R9); SAVE OFFSET IN NRP
                       30 A9         0069       
            57            51     C3  006B   307 	SUBL3	R1,R7,R0			; SET R0 TO # OF BYTES REMAINING IN BLOCK
                          50         006E       
                          18     13  006F   308 	BEQL	BLK_FULL			; AND BRANCH IF FULL
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  10
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     0071   310 ;
                                     0071   311 ; MAKE SURE THERE IS SUFFICIENT ROOM IN BLOCK FOR
                                     0071   312 ; ANSI D BYTE COUNT OR ENTIRE FIXED LENGTH RECORD IF
                                     0071   313 ; RECORDS NOT ALLOWED TO CROSS BLOCK BOUNDARIES
                                     0071   314 ;
         3D AA            03     E1  0071   315 	BBC	#FAB$V_BLK,IFB$B_RAT(R10),PUT01	; BRANCH IF NO BOUNDARY RESTRICTION
                          2B         0075       
            01         3C AA     91  0076   316 	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX	; FIXED FORMAT?
                          07     13  007A   317 	BEQL	FIXRFM				; BRANCH IF YES
            6A            26     E1  007C   318 	BBC	#IFB$V_ANSI_D,(R10),PUT01	; BRANCH IF NOT ANSI
                          21         007F       
                                     0080   319 						; AS THERE IS AT LEAST
                                     0080   320 						; THE REQUIRED WORD LEFT
                                     0080   321 	$PSECT_BR	$RMS1ANSID
                          FF9C'  31  0080       		BRW	$RMS1ANSID2
                                     0083       		.SAVE
                                 0000001F       		.PSECT	$RMS1ANSID,GBL,NOWRT
                                     001F       $RMS1ANSID2:
            04            50     D1  001F   322 	CMPL	R0,#4				; ANSI D REQUIRES 4 BYTES MIN.
                          03     19  0022   323 	BLSS	10$				; BRANCH IF PAD REQUIRED
                          007A'  31  0024   324 	BRW	PUT01				; A.O.K.
                                     0027   325 10$:
                          00D4'  30  0027   326 	BSBW	RM$PADBLK1			; PAD OUT BUFFER
                          005C'  31  002A   327 	BRW	BLK_FULL
                                     002D   328 	$PSECT_RESTORE
                                 00000083       		.RESTORE
                                     0083   329 ;
                                     0083   330 ; MAKE SURE THERE IS ROOM FOR FIXED LENGTH RECORD
                                     0083   331 ;
         3E AA            50     B1  0083   332 FIXRFM:	CMPW	R0,IFB$W_LRL(R10)
                          18     1E  0087   333 	BGEQU	PUT01				; BRANCH IF SUFFICIENT ROOM
                                     0089   334 ;
                                     0089   335 ; THIS BLOCK IS FULL OR AT LEAST THE NEXT RECORD CAN'T POSSIBLY
                                     0089   336 ; FIT IN IT, SO CHANGE TO NEXT BLOCK
                                     0089   337 ;
                                     0089   338 BLK_FULL:
            6A            1C     E0  0089   339 	BBS	#DEV$V_RND,IFB$L_PRIM_DEV(R10),10$	; BRANCH IF DISK
                          07         008C       
                          69     10  008D   340 	BSBB	CHNGBF				; WRITE THE BUFFER
            0F            50     E8  008F   341 	BLBS	R0,PUT01			; CONTINUE IF OK
                          2B     11  0092   342 	BRB	ZERO_RFA			; PROCESS ERROR
                       2C A9     D6  0094   343 10$:	INCL	IRB$L_NRP_VBN(R9)		; BUMP VBN
                       30 A9     B4  0097   344 	CLRW	IRB$W_NRP_OFF(R9)		; AND ZERO OFFSET
                       20 A4     96  009A   345 	INCB	BDB$B_REL_VBN(R4)		; INCREMENT RELATIVE VBN
         0A A4            01     8A  009D   346 	BICB2	#BDB$M_VAL,BDB$B_FLGS(R4)	; MAKE INVALID
                                     00A1   347 ;
                                     00A1   348 ; UPDATE EOF DATA IN IFAB
                                     00A1   349 ;
                                     00A1   350 	ASSUME	IFB$W_FFB EQ IFB$L_EBK+4
                                     00A1   351 	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
         2C A9            06     28  00A1   352 PUT01:	MOVC	#6,IRB$L_NRP_VBN(R9),IFB$L_EBK(R10)
                       44 AA         00A5       
                                     00A7   353 	SSB	#IFB$V_RW_ATTR,(R10)		; FLAG REWRITE OF ATTR. NEEDED
            6A            34     E2  00A7       		BBSS	#IFB$V_RW_ATTR,(R10),30000$
                          00         00AA       
                                     00AB       30000$:
                                     00AB   354 ;
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  11
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (1)

                                     00AB   355 ; UPDATE LARGEST RECORD IN FILE
                                     00AB   356 ;
         3E AA         22 A8     B1  00AB   357 	CMPW	RAB$W_RSZ(R8),IFB$W_LRL(R10)	; NEW LARGEST?
                          05     1B  00B0   358 	BLEQU	10$				; BRANCH IF NOT
         3E AA         22 A8     B0  00B2   359 	MOVW	RAB$W_RSZ(R8),IFB$W_LRL(R10)	; YES - SAVE SIZE
                                     00B7   360 ;
                                     00B7   361 ; RETURN RFA TO USER AND EXIT
                                     00B7   362 ;
                                     00B7   363 10$:	ASSUME	IRB$W_RP_OFF EQ IRB$L_RP_VBN+4
         10 A8         34 A9     7D  00B7   364 	MOVQ	IRB$L_RP_VBN(R9),RAB$W_RFA(R8)
                          FF41'  31  00BC   365 	BRW	RM$EXSUC			; EXIT WITH SUCCESS
                                     00BF   366 ;
                                     00BF   367 ; ERROR DURING PUT - ZERO RFA AND EXIT
                                     00BF   368 ;
                                     00BF   369 ZERO_RFA:
                                     00BF   370 	$PSECT_BR	L$RMS1
                          FF3E'  31  00BF       		BRW	L$RMS13
                                     00C2       		.SAVE
                                 00000000       		.PSECT	L$RMS1,GBL,NOWRT
                                     0000       L$RMS13:
                       10 A8     D4  0000   371 	CLRL	RAB$W_RFA(R8)
                       14 A8     B4  0003   372 	CLRW	RAB$W_RFA+4(R8)
                          FFF7'  31  0006   373 	BRW	RM$EXRMS
                                     0009   374 	$PSECT_RESTORE
                                 000000C2       		.RESTORE
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  12
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (3)

                                     00C2   376 
                                     00C2   377 ;++
                                     00C2   378 ; BUILD RECORD SUBROUTINE
                                     00C2   379 ;
                                     00C2   380 ; FUNCTIONAL DESCRIPTION:
                                     00C2   381 ;
                                     00C2   382 ; THIS SUBROUTINE MOVES A RECORD FROM THE USER RECORD BUFFER
                                     00C2   383 ; TO THE RMS I/O BUFFER, CROSSING BLOCK BOUNDARIES AS NEEDED.
                                     00C2   384 ;
                                     00C2   385 ; CALLING SEQUENCE:
                                     00C2   386 ;
                                     00C2   387 ;	BSBW	BLDREC
                                     00C2   388 ;
                                     00C2   389 ; INPUT PARAMETERS:
                                     00C2   390 ;
                                     00C2   391 ;	R11	IMPURE AREA ADDRESS
                                     00C2   392 ;	R10	IFAB ADDRESS
                                     00C2   393 ;	R9	IRAB ADDRESS
                                     00C2   394 ;	R8	RAB ADDRESS
                                     00C2   395 ;	R7	END OF BLOCK ADDRESS + 1
                                     00C2   396 ;	R6	# OF BYTES IN RECORD
                                     00C2   397 ;	R5	ADDRESS OF RECORD (SOURCE)
                                     00C2   398 ;	R1	ADDRESS IN RMS I/O BUFFER (DESTINATION)
                                     00C2   399 ;
                                     00C2   400 ; IMPLICIT INPUTS:
                                     00C2   401 ;
                                     00C2   402 ;	THE CONTENTS OF THE VARIOUS STRUCTURES,
                                     00C2   403 ;	IN PARTICULAR, IRB$L_CURBDB.
                                     00C2   404 ;
                                     00C2   405 ; OUTPUT PARAMETERS:
                                     00C2   406 ;
                                     00C2   407 ;	R1	ADDRESS OF BYTE FOLLOWING THE MOVED RECORD
                                     00C2   408 ;		IN RMS I/O BUFFER
                                     00C2   409 ;	R0	STATUS CODE
                                     00C2   410 ;	R2-R6	DESTROYED
                                     00C2   411 ;
                                     00C2   412 ; IMPLICIT OUTPUTS:
                                     00C2   413 ;
                                     00C2   414 ;	BDB$B_FLGS - MARKED DIRTY
                                     00C2   415 ;	IRB$L_CURBDB - UPDATED IF BLOCK BOUNDARY CROSSED
                                     00C2   416 ;
                                     00C2   417 ;	IRB$L_NRP_VBN - UPDATED IF BLOCK BOUNDARY CROSSED
                                     00C2   418 ;	IRB$W_NRP_OFF - UPDATED IF BLOCK BOUNDARY CROSSED
                                     00C2   419 ;
                                     00C2   420 ; COMPLETION CODES:
                                     00C2   421 ;
                                     00C2   422 ;	STANDARD RMS.
                                     00C2   423 ;
                                     00C2   424 ; SIDE EFFECTS:
                                     00C2   425 ;
                                     00C2   426 ;	IF I/O STALL OCCURS WILL HAVE CHANGED TO
                                     00C2   427 ;	RUNNING AT AST LEVEL; REPROBING ANY NON-RAB
                                     00C2   428 ;	USER ADDRESS WILL BE REQUIRED.
                                     00C2   429 ;--
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  13
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (3)

                                     00C2   431 BLDREC:	
            57            51     C3  00C2   432 	SUBL3	R1,R7,R0		; GET # BYTES LEFT IN BUFFER
                          50         00C5       
            56            50     D1  00C6   433 	CMPL	R0,R6			; < RECORD SIZE?
                          03     1B  00C9   434 	BLEQU	20$			; BRANCH IF SO
            50            56     D0  00CB   435 	MOVL	R6,R0			; NO - JUST USE BUFFER SIZE
            56            50     C2  00CE   436 20$:	SUBL2	R0,R6			; ADJUST REMAINING COUNT
            65            50     28  00D1   437 	MOVC3	R0,(R5),(R1)		; MOVE (PARTIAL) RECORD TO BUFFER
                          61         00D4       
            54         20 A9     D0  00D5   438 	MOVL	IRB$L_CURBDB(R9),R4	; GET CURRENT BDB
         0A A4            03     88  00D9   439 	BISB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4)	; SAY VALID & DIRTY
                          56     D5  00DD   440 	TSTL	R6			; DONE?
                          10     13  00DF   441 	BEQL	40$			; BRANCH IF YES
                          51     DD  00E1   442 	PUSHL	R1			; SAVE SOURCE ADDR
                          13     10  00E3   443 	BSBB	CHNGBF			; MOVE TO NEXT BUFFER
                          20     BA  00E5   444 	POPR	#^M<R5>			; RESTORE SOURCE ADDR
            0D            50     E9  00E7   445 	BLBC	R0,50$			; GET OUT ON ERROR
                          FF13'  30  00EA   446 	BSBW	RM$PROBEREAD		; REPROBE USER BUFFER
            D2            50     E8  00ED   447 	BLBS	R0,BLDREC		; AND GO AGAIN IF NO ERROR
                                 05  00F0   448 	RSB
                                     00F1   449 ;
                                     00F1   450 ; MOVE TO BUFFER IS COMPLETE
                                     00F1   451 ;
            51            53     D0  00F1   452 40$:	MOVL	R3,R1			; NEXT BYTE POINTER TO CORRECT REG.
                                     00F4   453 	RMSSUC				; INDICATE SUCCESS
            50            01     D0  00F4       		MOVL	#1,R0
                                 05  00F7   454 50$:	RSB
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  14
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (3)

                                     00F8   456 ;++
                                     00F8   457 ; CHANGE BUFFER/BLOCK SUBROUTINE
                                     00F8   458 ;
                                     00F8   459 ; CALLS RM$NXTBLK1 SUBROUTINE WITH R3 SET TO DO NO READ
                                     00F8   460 ; ALL OTHER INPUTS AND OUTPUTS SAME AS FOR RM$NXTBLK1
                                     00F8   461 ;
                                     00F8   462 ;--
            53            01     D0  00F8   463 CHNGBF:	MOVL	#1,R3			; FLAG NO READ REQUIRED
                          FF02'  31  00FB   464 	BRW	RM$NXTBLK1		; CALL & RETURN FROM NEXT BLOCK ROUTINE
                                     00FE   465 ;
                                     00FE   466 ;++
                                     00FE   467 ; PAD OUT BUFFER SUBROUTINE
                                     00FE   468 ;
                                     00FE   469 ; INPUTS:
                                     00FE   470 ;	R1	ADDRESS IN BUFFER TO START PADDING
                                     00FE   471 ;	R0	# BYTES LEFT IN BLOCK
                                     00FE   472 ;	R4	BDB ADDRESS
                                     00FE   473 ;	R10	IFAB ADDRESS
                                     00FE   474 ;
                                     00FE   475 ; OUTPUTS:
                                     00FE   476 ;
                                     00FE   477 ;	BLOCK PADDED, IF NEEDED, AND MARKED DIRTY
                                     00FE   478 ;	R0-R3	DESTROYED
                                     00FE   479 ;--
                                     00FE   480 RM$PADBLK1::
            01         3C AA     91  00FE   481 	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX	; FIXED FORMAT?
                          0B     13  0102   482 	BEQL	PADXIT				; BRANCH IF YES (NO PADDING)
                                     0104   483 ;
                                     0104   484 ;  ALTERNATE ENTRY POINT FOR USE WHEN IT IS KNOWN THAT RECORD FORMAT IS NOT FIXED
                                     0104   485 ;
                                     0104   486 RM$PADBLK1ALT::
            6A            26     E0  0104   487 	BBS	#IFB$V_ANSI_D,(R10),PADANS	; BRANCH IF ANSI D
                          08         0107       
                                     0108   488 ;
                                     0108   489 ; VAR OF VFC RECORD FORMAT AND NOT ANSI.
                                     0108   490 ; JUST PUT A -1 IN WORD POINTED AT BY R1.
                                     0108   491 ;
            61            01     AE  0108   492 	MNEGW	#1,(R1)			; END BLOCK FLAG
                                     010B   493 ;
                                     010B   494 ; FLAG BLOCK DIRTY AND RETURN
                                     010B   495 ;
         0A A4            03     88  010B   496 PADIRT:	BISB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4)
                                 05  010F   497 PADXIT:	RSB
                                     0110   498 ;
                                     0110   499 ; ANSI D RECORD - PAD WITH '^'
                                     0110   500 ;
                                     0110   501 PADANS:	$PSECT_CALL $RMS1ANSID
                          FF1A'  30  0110       		BSBW	$RMS1ANSID4
                                     0113       		.SAVE
                                 0000002D       		.PSECT	$RMS1ANSID,GBL,NOWRT
                                     002D       $RMS1ANSID4:
                          30     BB  002D   502 	PUSHR	#^M<R4,R5>		; SAVE REGS
            6E            00     2C  002F   503 	MOVC5	#0,(SP),#^A/^/,R0,(R1)	; PAD IT
            50         5E 8F         0032       
                          61         0035       
                          30     BA  0036   504 	POPR	#^M<R4,R5>		; RESTORE REGS
                                     0038   505 	$PSECT_RETURN
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  15
015             RM$PUT_BLK_DEV  -  ROUTINE TO PERFORM SEQ. ORG                                                                   (3)

                                 05  0038       		RSB
                                 00000113       		.RESTORE
                          F6     11  0113   506 	BRB	PADIRT	
                                     0115   507 	.END
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (3)

$$.PSECT_EP    = 00000005            DEV$M_CCL      = 00000002            FAB$B_RAT        0000001E            
$$RMSTEST      = 0000001A            DEV$M_DIR      = 00000008            FAB$B_RFM        0000001F            
$$RMS_PBUGCHK  = 00000010            DEV$M_DMT      = 00200000            FAB$B_RTV        0000001C            
$$RMS_TBUGCHK  = 00000008            DEV$M_ELG      = 00400000            FAB$B_SHR        00000017            
$$RMS_UMODE    = 00000004            DEV$M_FOD      = 00004000            FAB$C_BID      = 00000003            
$RMS1ANSID0      00000000 R     04   DEV$M_FOR      = 01000000            FAB$C_BLN        00000050            
$RMS1ANSID2      0000001F R     04   DEV$M_GEN      = 00020000            FAB$C_FIX      = 00000001            
$RMS1ANSID4      0000002D R     04   DEV$M_IDV      = 04000000            FAB$C_HSH      = 00000030            
$RMS1VFC1        00000000 R     05   DEV$M_MBX      = 00100000            FAB$C_IDX      = 00000020            
ANSIZE           00000005 R     04   DEV$M_MNT      = 00080000            FAB$C_MAXRFM   = 00000003            
BDB$B_BID        00000008            DEV$M_NET      = 00002000            FAB$C_REL      = 00000010            
BDB$B_BLN        00000009            DEV$M_ODV      = 08000000            FAB$C_RFM_DFLT = 00000002            
BDB$B_FLGS       0000000A            DEV$M_RCK      = 40000000            FAB$C_SEQ      = 00000000            
BDB$B_POST_CCTL  00000023            DEV$M_REC      = 00000001            FAB$C_UDF      = 00000000            
BDB$B_PRE_CCTL   00000022            DEV$M_RND      = 10000000            FAB$C_VAR      = 00000002            
BDB$B_REL_VBN    00000020            DEV$M_RTM      = 20000000            FAB$C_VFC      = 00000003            
BDB$B_USECNT     0000000B            DEV$M_SDI      = 00000010            FAB$K_BLN        00000050            
BDB$B_VAL_VBNS   00000021            DEV$M_SHR      = 00010000            FAB$L_ALQ        00000010            
BDB$C_BID      = 0000000C            DEV$M_SPL      = 00000040            FAB$L_CTX        00000018            
BDB$C_BLN        00000028            DEV$M_SQD      = 00000020            FAB$L_DEV        00000040            
BDB$K_BLN        00000028            DEV$M_SWL      = 02000000            FAB$L_DNA        00000030            
BDB$L_ADDR       00000014            DEV$M_TRM      = 00000004            FAB$L_FNA        0000002C            
BDB$L_BLINK      00000004            DEV$M_WCK      = 80000000            FAB$L_FOP        00000004            
BDB$L_CURBUFADR  00000024            DEV$V_ALL      = 00000017            FAB$L_JNL        00000020            
BDB$L_FLINK      00000000            DEV$V_AVL      = 00000012            FAB$L_MRN        00000038            
BDB$L_IOSB       00000020            DEV$V_CCL      = 00000001            FAB$L_NAM        00000028            
BDB$L_OWN        0000000C            DEV$V_DIR      = 00000003            FAB$L_SDC        00000044            
BDB$L_VBN        00000018            DEV$V_DMT      = 00000015            FAB$L_STS        00000008            
BDB$L_WAIT       0000001C            DEV$V_ELG      = 00000016            FAB$L_STV        0000000C            
BDB$L_WK1        00000020            DEV$V_FOD      = 0000000E            FAB$L_XAB        00000024            
BDB$M_AST_DCL  = 00000040            DEV$V_FOR      = 00000018            FAB$M_BIO      = 00000020            
BDB$M_DRT      = 00000002            DEV$V_GEN      = 00000011            FAB$M_BLK      = 00000008            
BDB$M_IOP      = 00000004            DEV$V_IDV      = 0000001A            FAB$M_BRO      = 00000040            
BDB$M_LKDINWS  = 00000080            DEV$V_MBX      = 00000014            FAB$M_CBT      = 00200000            
BDB$M_NOLOCATE = 00000010            DEV$V_MNT      = 00000013            FAB$M_CIF      = 02000000            
BDB$M_PRM      = 00000008            DEV$V_NET      = 0000000D            FAB$M_CR       = 00000002            
BDB$M_VAL      = 00000001            DEV$V_ODV      = 0000001B            FAB$M_CTG      = 00100000            
BDB$M_WFO      = 00000020            DEV$V_RCK      = 0000001E            FAB$M_DEL      = 00000004            
BDB$V_AST_DCL  = 00000006            DEV$V_REC      = 00000000            FAB$M_DFW      = 00000020            
BDB$V_DRT      = 00000001            DEV$V_RND      = 0000001C            FAB$M_DLT      = 00008000            
BDB$V_IOP      = 00000002            DEV$V_RTM      = 0000001D            FAB$M_DMO      = 00001000            
BDB$V_LKDINWS  = 00000007            DEV$V_SDI      = 00000004            FAB$M_ESC      = 08000000            
BDB$V_NOLOCATE = 00000004            DEV$V_SHR      = 00000010            FAB$M_EXE      = 00000080            
BDB$V_PRM      = 00000003            DEV$V_SPL      = 00000006            FAB$M_FTN      = 00000001            
BDB$V_VAL      = 00000000            DEV$V_SQD      = 00000005            FAB$M_GET      = 00000002            
BDB$V_WFO      = 00000005            DEV$V_SWL      = 00000019            FAB$M_INP      = 00080000            
BDB$W_NUMB       00000010            DEV$V_TRM      = 00000002            FAB$M_JNL      = 00400000            
BDB$W_SIZE       00000012            DEV$V_WCK      = 0000001F            FAB$M_KFO      = 40000000            
BIT...         = 0001C134            ERRRHB           00000068 R     05   FAB$M_MSE      = 00000010            
BLDREC           000000C2 R     02   FAB$B_BID        00000000            FAB$M_MXV      = 00000002            
BLK_FULL         00000089 R     02   FAB$B_BKS        0000003E            FAB$M_NAM      = 01000000            
BUILD            00000039 R     02   FAB$B_BLN        00000001            FAB$M_NEF      = 00000400            
CHKERR           0000007F R     05   FAB$B_DNS        00000035            FAB$M_NFS      = 00010000            
CHKVFC           0000004A R     02   FAB$B_FAC        00000016            FAB$M_NIL      = 00000020            
CHNGBF           000000F8 R     02   FAB$B_FNS        00000034            FAB$M_OFP      = 20000000            
DEV$M_ALL      = 00800000            FAB$B_FSZ        0000003F            FAB$M_POS      = 00000100            
DEV$M_AVL      = 00040000            FAB$B_ORG        0000001D            FAB$M_PPF      = 00040000            
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  17
SYMBOL TABLE                                                                                                                     (3)

FAB$M_PPF_IND  = 00004000            FAB$V_PUT      = 00000000            IFB$K_BLN_SEQ    0000005C            
FAB$M_PPF_RAT  = 00003FC0            FAB$V_RCK      = 00000017            IFB$K_FHAEND     00000050            
FAB$M_PRN      = 00000004            FAB$V_RWC      = 0000000B            IFB$L_ARGLST     00000018            
FAB$M_PUT      = 00000001            FAB$V_RWO      = 00000007            IFB$L_ASBADDR    00000014            
FAB$M_RCK      = 00800000            FAB$V_SCF      = 0000000E            IFB$L_AS_DEV     00000054            
FAB$M_RWC      = 00000800            FAB$V_SHRDEL   = 00000002            IFB$L_BDB_BLNK   00000034            
FAB$M_RWO      = 00000080            FAB$V_SHRGET   = 00000001            IFB$L_BDB_FLNK   00000030            
FAB$M_SCF      = 00004000            FAB$V_SHRPUT   = 00000000            IFB$L_BKPBITS    00000004            
FAB$M_SHRDEL   = 00000004            FAB$V_SHRUPD   = 00000003            IFB$L_BWB        0000000C            
FAB$M_SHRGET   = 00000002            FAB$V_SPL      = 0000000D            IFB$L_DVBN       00000058            
FAB$M_SHRPUT   = 00000001            FAB$V_SQO      = 00000006            IFB$L_EBK        00000044            
FAB$M_SHRUPD   = 00000008            FAB$V_SUP      = 00000002            IFB$L_FRB_PTR    00000028            
FAB$M_SPL      = 00002000            FAB$V_TEF      = 0000001C            IFB$L_FWA_BDB    00000050            
FAB$M_SQO      = 00000040            FAB$V_TMD      = 00000004            IFB$L_HBK        00000040            
FAB$M_SUP      = 00000004            FAB$V_TMP      = 00000003            IFB$L_IDX_PTR    00000054            
FAB$M_TEF      = 10000000            FAB$V_TRN      = 00000004            IFB$L_IOS        0000000C            
FAB$M_TMD      = 00000010            FAB$V_UFM      = 0000001A            IFB$L_IOS4       00000010            
FAB$M_TMP      = 00000008            FAB$V_UFO      = 00000011            IFB$L_IRAB_LNK   0000001C            
FAB$M_TRN      = 00000010            FAB$V_UPD      = 00000003            IFB$L_LAST_FAB   00000024            
FAB$M_UFM      = 04000000            FAB$V_UPI      = 00000006            IFB$L_LOCK_BDB   00000050            
FAB$M_UFO      = 00020000            FAB$V_WCK      = 00000009            IFB$L_MRN        00000054            
FAB$M_UPD      = 00000008            FAB$W_BLS        0000003C            IFB$L_NRP_LNK    00000050            
FAB$M_UPI      = 00000040            FAB$W_DEQ        00000014            IFB$L_NWA_PTR    00000028            
FAB$M_WCK      = 00000200            FAB$W_IFI        00000002            IFB$L_PRIM_DEV   00000000            
FAB$S_ORG      = 00000004            FAB$W_MRS        00000036            IFB$L_RLB_LNK    0000002C            
FAB$S_PPF_RAT  = 00000008            FIXRFM           00000083 R     02   IFB$L_RNS_LEN    00000050            
FAB$V_BIO      = 00000005            GBL...         = 00000000            IFB$M_BIO      = 00000020            
FAB$V_BLK      = 00000003            IFB$B_AMAX       00000059            IFB$M_BRO      = 00000040            
FAB$V_BRO      = 00000006            IFB$B_AVBN       00000058            IFB$M_DEL      = 00000004            
FAB$V_CBT      = 00000015            IFB$B_BID        00000008            IFB$M_EXE      = 00000080            
FAB$V_CIF      = 00000019            IFB$B_BKS        0000004A            IFB$M_GET      = 00000002            
FAB$V_CR       = 00000001            IFB$B_BLN        00000009            IFB$M_PUT      = 00000001            
FAB$V_CTG      = 00000014            IFB$B_EFN        0000000B            IFB$M_TRN      = 00000010            
FAB$V_DEL      = 00000002            IFB$B_EXTRABUF   0000005D            IFB$M_UPD      = 00000008            
FAB$V_DFW      = 00000005            IFB$B_FAC        00000022            IFB$S_ORG      = 00000004            
FAB$V_DLT      = 0000000F            IFB$B_FSZ        0000004B            IFB$S_RFM      = 00000004            
FAB$V_DMO      = 0000000C            IFB$B_KBUFSZ     0000005C            IFB$V_ACCESSED = 00000025            
FAB$V_ESC      = 0000001B            IFB$B_MODE       0000000A            IFB$V_ANSI_D   = 00000026            
FAB$V_EXE      = 00000007            IFB$B_NUM_KEYS   0000005A            IFB$V_ASYNC    = 00000023            
FAB$V_FTN      = 00000000            IFB$B_ORGCASE    00000023            IFB$V_ASYNCWAIT= 00000024            
FAB$V_GET      = 00000001            IFB$B_RAT        0000003D            IFB$V_BIO      = 00000005            
FAB$V_INP      = 00000013            IFB$B_RFMORG     0000003C            IFB$V_BRO      = 00000006            
FAB$V_JNL      = 00000016            IFB$B_UBUFSZ     0000005B            IFB$V_BUSY     = 00000020            
FAB$V_KFO      = 0000001E            IFB$C_BID      = 0000000B            IFB$V_CREATE   = 00000032            
FAB$V_MSE      = 00000004            IFB$C_BLN        00000060            IFB$V_DAP      = 0000003E            
FAB$V_MXV      = 00000001            IFB$C_BLN_IDX    00000060            IFB$V_DAP_OPEN = 0000003D            
FAB$V_NAM      = 00000018            IFB$C_BLN_REL    00000060            IFB$V_DEL      = 00000002            
FAB$V_NEF      = 0000000A            IFB$C_BLN_SEQ    0000005C            IFB$V_DFW      = 0000002C            
FAB$V_NFS      = 00000010            IFB$C_DIR      = 00000003            IFB$V_DLT      = 0000002B            
FAB$V_NIL      = 00000005            IFB$C_FHAEND     00000050            IFB$V_DMO      = 00000028            
FAB$V_OFP      = 0000001D            IFB$C_IDX      = 00000002            IFB$V_EOF      = 00000021            
FAB$V_ORG      = 00000004            IFB$C_MAXORG   = 00000002            IFB$V_EXE      = 00000007            
FAB$V_POS      = 00000008            IFB$C_REL      = 00000001            IFB$V_GET      = 00000001            
FAB$V_PPF      = 00000012            IFB$C_SEQ      = 00000000            IFB$V_MSE      = 00000031            
FAB$V_PPF_IND  = 0000000E            IFB$K_BLN        00000060            IFB$V_NORECLK  = 00000033            
FAB$V_PPF_RAT  = 00000006            IFB$K_BLN_IDX    00000060            IFB$V_NSP      = 0000003F            
FAB$V_PRN      = 00000002            IFB$K_BLN_REL    00000060            IFB$V_NWA      = 0000003C            
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  18
SYMBOL TABLE                                                                                                                     (3)

IFB$V_ORG      = 00000004            IRB$B_KEYSZ      00000051            IRB$V_FIND     = 00000029            
IFB$V_PPF_IMAGE= 00000022            IRB$B_MBC        00000041            IRB$V_FIND_LAST= 00000025            
IFB$V_PPF_INPUT= 0000002E            IRB$B_MODE       0000000A            IRB$V_IDX_ERR  = 00000031            
IFB$V_PUT      = 00000000            IRB$B_NRP_ID     00000030            IRB$V_LOCKABOVE= 00000002            
IFB$V_RFM      = 00000000            IRB$B_NRP_KREF   00000031            IRB$V_NEW_IDX  = 00000003            
IFB$V_RWC      = 00000027            IRB$B_NVBNS      00000048            IRB$V_POSINSERT= 00000000            
IFB$V_RW_ATTR  = 00000034            IRB$B_POST_CCTL  00000045            IRB$V_PPF_EOF  = 0000002E            
IFB$V_SCF      = 0000002A            IRB$B_PPF_ISI    0000003E            IRB$V_PPF_FNDSV= 00000030            
IFB$V_SPL      = 00000029            IRB$B_PRE_CCTL   00000044            IRB$V_PPF_IMAGE= 00000022            
IFB$V_SQO      = 0000002D            IRB$B_RFA_ID     00000058            IRB$V_PPF_SKIP = 0000002F            
IFB$V_TEF      = 00000036            IRB$B_RP_ID      00000038            IRB$V_PUTS_LAST= 00000026            
IFB$V_TMP      = 00000035            IRB$B_RP_KREF    00000039            IRB$V_RAHWBH   = 0000002A            
IFB$V_TRN      = 00000004            IRB$B_RRV_ID     00000050            IRB$V_SKIP_NEXT= 0000002B            
IFB$V_UPD      = 00000003            IRB$B_SRCHFLAGS  00000043            IRB$V_SRCHGT   = 00000001            
IFB$V_WRTACC   = 00000030            IRB$B_STOPLEVEL  00000042            IRB$V_UNLOCK_RP= 0000002D            
IFB$W_ASDEVBSIZ  0000005A            IRB$C_BID      = 0000000A            IRB$V_WRITE    = 00000029            
IFB$W_BKS_BYTES  0000005C            IRB$C_BLN_IDX    0000006C            IRB$W_CSIZ       00000042            
IFB$W_BKS_RECS   0000005E            IRB$C_BLN_REL    00000048            IRB$W_DUP_POS    00000032            
IFB$W_CHNL       00000020            IRB$C_BLN_SEQ    0000004C            IRB$W_IOS2       0000000E            
IFB$W_DEQ        0000004E            IRB$K_BLN_IDX    0000006C            IRB$W_NRP_OFF    00000030            
IFB$W_DEVBUFSIZ  00000038            IRB$K_BLN_REL    00000048            IRB$W_OWN_ID     0000003C            
IFB$W_EBK0       00000044            IRB$K_BLN_SEQ    0000004C            IRB$W_OWN_ISI    0000003E            
IFB$W_EBK2       00000046            IRB$L_ARGLST     00000018            IRB$W_ROVHDSZ    00000044            
IFB$W_FFB        00000048            IRB$L_ASBADDR    00000014            IRB$W_RP_OFF     00000038            
IFB$W_IOS2       0000000E            IRB$L_BKPBITS    00000004            IRB$W_RTOTLSZ    00000046            
IFB$W_LRL        0000003E            IRB$L_BWB        0000000C            IRB$W_SAVE_POS   00000052            
IFB$W_MRS        0000004C            IRB$L_CURBDB     00000020            L$RMS13          00000000 R     06   
IFB$W_RTDEQ      0000003A            IRB$L_CURVBN     00000030            MOVREC           00000053 R     02   
IMP$B_PROT       00000002            IRB$L_IFAB_LNK   00000000            OFF            = 00000016            
IMP$C_ASYEFN   = 0000001E            IRB$L_IOS        0000000C            PADANS           00000110 R     02   
IMP$C_ASYQIOEFN= 0000001F            IRB$L_IOS4       00000010            PADIRT           0000010B R     02   
IMP$C_ENTPERSEG= 0000000F            IRB$L_IRAB_LNK   0000001C            PADXIT           0000010F R     02   
IMP$C_IOREFN   = 0000001E            IRB$L_KEYBUF     00000048            PIO$GL_FMLH      ********   X   02   
IMP$C_MBXEFN   = 0000001A            IRB$L_LAST_RAB   00000024            PUT00            00000015 R     02   
IMP$C_NPIOFILES= 0000000C            IRB$L_LOCK_BDB   0000005C            PUT01            000000A1 R     02   
IMP$C_SYNCEFN  = 0000001B            IRB$L_NRP        0000002C            RAB$B_BID        00000000            
IMP$L_FREEPGLH   0000000C            IRB$L_NRP_OFF    00000030            RAB$B_BLN        00000001            
IMP$L_IFABTBL    00000018            IRB$L_NRP_VBN    0000002C            RAB$B_KRF        00000035            
IMP$L_IFBTBLINK  00000024            IRB$L_NXTBDB     00000028            RAB$B_KSZ        00000034            
IMP$L_IOSEGADDR  00000004            IRB$L_OWNER_ID   0000003C            RAB$B_MBC        00000037            
IMP$L_IOSEGLEN   00000008            IRB$L_RFA_VBN    00000054            RAB$B_MBF        00000036            
IMP$L_IRABTBL    0000001C            IRB$L_RLB_ADDR   00000044            RAB$B_PSZ        00000034            
IMP$L_IRBTBLINK  00000064            IRB$L_RP         00000034            RAB$B_RAC        0000001E            
IMP$L_SAVED_SP   00000014            IRB$L_RP_OFF     00000038            RAB$B_ROP1       00000005            
IMP$V_AST      = 00000001            IRB$L_RP_VBN     00000034            RAB$B_ROP2       00000006            
IMP$V_IIOS     = 00000000            IRB$L_RRV_VBN    0000004C            RAB$B_ROP3       00000007            
IMP$V_IORUNDOWN= 00000004            IRB$L_TEMP0      00000044            RAB$B_TMO        0000001F            
IMP$V_NOP0BUFS = 00000005            IRB$L_TEMP1      00000048            RAB$C_BID      = 00000001            
IMP$V_TEMP1    = 00000002            IRB$V_ASYNC    = 00000023            RAB$C_BLN        00000044            
IMP$V_TEMP2    = 00000003            IRB$V_ASYNCWAIT= 00000024            RAB$C_KEY      = 00000001            
IMP$W_ENTPERSEG  00000020            IRB$V_BIO_LAST = 00000027            RAB$C_RFA      = 00000002            
IMP$W_NUM_IFABS  00000022            IRB$V_BRO_SW   = 00000028            RAB$C_SEQ      = 00000000            
IMP$W_RMSSTATUS  00000000            IRB$V_BUSY     = 00000020            RAB$K_BLN        00000044            
IRB$B_BCNT       00000040            IRB$V_DAP_CONN = 0000003E            RAB$L_BKT        00000038            
IRB$B_BID        00000008            IRB$V_DAP_FMODE= 0000003F            RAB$L_CTX        00000018            
IRB$B_BLN        00000009            IRB$V_DUP      = 0000002C            RAB$L_DCT        00000038            
IRB$B_EFN        0000000B            IRB$V_EOF      = 00000021            RAB$L_FAB        0000003C            
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                     (3)

RAB$L_KBF        00000030            RAB$V_PTA      = 0000001D            RMS$_CHK       = 000184A4            
RAB$L_PBF        00000030            RAB$V_RAH      = 00000009            RMS$_CHN       = 0001C0EC            
RAB$L_RBF        00000028            RAB$V_RLK      = 00000013            RMS$_COD       = 000184AC            
RAB$L_RFA0       00000010            RAB$V_RNE      = 00000018            RMS$_CONTROLC  = 00010651            
RAB$L_RHB        0000002C            RAB$V_RNF      = 0000001B            RMS$_CONTROLO  = 00010609            
RAB$L_ROP        00000004            RAB$V_TMO      = 00000019            RMS$_CONTROLY  = 00010611            
RAB$L_STS        00000008            RAB$V_TPT      = 00000001            RMS$_CRE       = 0001C00A            
RAB$L_STV        0000000C            RAB$V_UIF      = 00000004            RMS$_CREATED   = 00010619            
RAB$L_UBF        00000024            RAB$V_ULK      = 00000012            RMS$_CUR       = 000184B4            
RAB$M_ASY      = 00000001            RAB$V_WAT      = 00000011            RMS$_DAC       = 0001C012            
RAB$M_BIO      = 00000800            RAB$V_WBH      = 0000000A            RMS$_DAN       = 000184BC            
RAB$M_CCO      = 80000000            RAB$W_ISI        00000002            RMS$_DEL       = 00018262            
RAB$M_CVT      = 04000000            RAB$W_RFA        00000010            RMS$_DEV       = 000184C4            
RAB$M_EOF      = 00000100            RAB$W_RFA4       00000014            RMS$_DIR       = 000184CC            
RAB$M_FDL      = 00000040            RAB$W_RSZ        00000022            RMS$_DME       = 000184D4            
RAB$M_HSH      = 00000080            RAB$W_USZ        00000020            RMS$_DNA       = 000184DC            
RAB$M_KGE      = 00200000            RHBADR           00000070 R     05   RMS$_DNF       = 0001C04A            
RAB$M_KGT      = 00400000            RM$EXRMS         ********   X   06   RMS$_DNR       = 00018272            
RAB$M_LIM      = 00004000            RM$EXSUC         ********   X   02   RMS$_DPE       = 0001C03A            
RAB$M_LOA      = 00002000            RM$GETBLKNRP     ********   X   02   RMS$_DTP       = 000184E4            
RAB$M_LOC      = 00010000            RM$MAPFTN        ********   X   05   RMS$_DUP       = 000184EC            
RAB$M_MAS      = 00000020            RM$NXTBLK1       ********   X   02   RMS$_DVI       = 000184F4            
RAB$M_NLK      = 00100000            RM$PADBLK1       000000FE RG    02   RMS$_ENT       = 0001C01A            
RAB$M_NXR      = 00800000            RM$PADBLK1ALT    00000104 RG    02   RMS$_ENV       = 00018724            
RAB$M_PMT      = 40000000            RM$PROBEREAD     ********   X   05   RMS$_EOF       = 0001827A            
RAB$M_PPF_IND  = 00004000            RM$PUT_BLK_DEV   00000000 RG    02   RMS$_ESA       = 000184FC            
RAB$M_PPF_RAT  = 00003FC0            RMS$V_STVSTATUS= 0000000E            RMS$_ESL       = 00018714            
RAB$M_PTA      = 20000000            RMS$_ABO       = 000183EC            RMS$_ESS       = 00018504            
RAB$M_RAH      = 00000200            RMS$_ACC       = 0001C002            RMS$_EXP       = 000182C2            
RAB$M_RLK      = 00080000            RMS$_ACT       = 0001825A            RMS$_EXT       = 0001C022            
RAB$M_RNE      = 01000000            RMS$_AID       = 000183F4            RMS$_FAB       = 0001850C            
RAB$M_RNF      = 08000000            RMS$_ALN       = 000183FC            RMS$_FAC       = 00018514            
RAB$M_TMO      = 02000000            RMS$_ALQ       = 00018404            RMS$_FEX       = 00018282            
RAB$M_TPT      = 00000002            RMS$_ANI       = 0001840C            RMS$_FLG       = 0001851C            
RAB$M_UIF      = 00000010            RMS$_AOP       = 00018414            RMS$_FLK       = 0001828A            
RAB$M_ULK      = 00040000            RMS$_ATR       = 0001C0CC            RMS$_FNA       = 00018524            
RAB$M_WAT      = 00020000            RMS$_ATW       = 0001C0D4            RMS$_FND       = 0001C02A            
RAB$M_WBH      = 00000400            RMS$_BKS       = 0001841C            RMS$_FNF       = 00018292            
RAB$S_PPF_RAT  = 00000008            RMS$_BKZ       = 00018424            RMS$_FNM       = 0001852C            
RAB$V_ASY      = 00000000            RMS$_BLN       = 0001842C            RMS$_FOP       = 0001853C            
RAB$V_BIO      = 0000000B            RMS$_BOF       = 00018198            RMS$_FSZ       = 00018534            
RAB$V_CCO      = 0000001F            RMS$_BUG       = 00018434            RMS$_FUL       = 00018544            
RAB$V_CVT      = 0000001A            RMS$_BUG_DAP   = 00018444            RMS$_IAL       = 0001854C            
RAB$V_EOF      = 00000008            RMS$_BUG_DDI   = 0001843C            RMS$_IAN       = 00018554            
RAB$V_FDL      = 00000006            RMS$_BUG_XX2   = 0001844C            RMS$_IBF       = 00018754            
RAB$V_HSH      = 00000007            RMS$_BUG_XX3   = 00018454            RMS$_IDX       = 0001855C            
RAB$V_KGE      = 00000015            RMS$_BUG_XX4   = 0001845C            RMS$_IFA       = 0001C124            
RAB$V_KGT      = 00000016            RMS$_BUG_XX5   = 00018464            RMS$_IFI       = 00018564            
RAB$V_LIM      = 0000000E            RMS$_BUG_XX6   = 0001846C            RMS$_IMX       = 0001856C            
RAB$V_LOA      = 0000000D            RMS$_BUG_XX7   = 00018474            RMS$_IOP       = 00018574            
RAB$V_LOC      = 00000010            RMS$_BUG_XX8   = 0001847C            RMS$_IRC       = 0001857C            
RAB$V_MAS      = 00000005            RMS$_BUG_XX9   = 00018484            RMS$_ISI       = 00018584            
RAB$V_NLK      = 00000014            RMS$_CAA       = 0001848C            RMS$_KBF       = 0001858C            
RAB$V_NXR      = 00000017            RMS$_CCF       = 0001C0DC            RMS$_KEY       = 00018594            
RAB$V_PMT      = 0000001E            RMS$_CCR       = 00018494            RMS$_KFF       = 00018031            
RAB$V_PPF_IND  = 0000000E            RMS$_CDA       = 0001C0E4            RMS$_KRF       = 0001859C            
RAB$V_PPF_RAT  = 00000006            RMS$_CHG       = 0001849C            RMS$_KSZ       = 000185A4            
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  20
SYMBOL TABLE                                                                                                                     (3)

RMS$_LAN       = 000185AC            RMS$_SEQ       = 000186AC            
RMS$_LBL       = 000185B4            RMS$_SHR       = 000186B4            
RMS$_LNE       = 000185BC            RMS$_SIZ       = 000186BC            
RMS$_LOC       = 000185C4            RMS$_SPL       = 0001C042            
RMS$_MBC       = 00018734            RMS$_SQO       = 000186C4            
RMS$_MKD       = 0001C032            RMS$_STALL     = 00018001            
RMS$_MRN       = 000185CC            RMS$_STK       = 000186CC            
RMS$_MRS       = 000185D4            RMS$_SUC       = 00010001            
RMS$_NAM       = 000185DC            RMS$_SUP       = 000182D2            
RMS$_NEF       = 000185E4            RMS$_SUPERSEDE = 00010631            
RMS$_NET       = 0001874C            RMS$_SYN       = 000186D4            
RMS$_NID       = 000185EC            RMS$_SYS       = 0001C10C            
RMS$_NMF       = 000182CA            RMS$_TEMP1     = 0001826A            
RMS$_NOD       = 000185F4            RMS$_TEMP2     = 0001868C            
RMS$_NORMAL    = 00010001            RMS$_TMO       = 000181B0            
RMS$_NPK       = 000185FC            RMS$_TRE       = 000186DC            
RMS$_OK_ALK    = 00018039            RMS$_TYP       = 000186E4            
RMS$_OK_DEL    = 00018041            RMS$_UBF       = 000186EC            
RMS$_OK_DUP    = 00018011            RMS$_USZ       = 000186F4            
RMS$_OK_IDX    = 00018019            RMS$_VER       = 000186FC            
RMS$_OK_LIM    = 00018051            RMS$_VOL       = 00018704            
RMS$_OK_RLK    = 00018021            RMS$_WBE       = 0001C12C            
RMS$_OK_RNF    = 00018049            RMS$_WER       = 0001C114            
RMS$_OK_RRV    = 00018029            RMS$_WLD       = 00018744            
RMS$_ORD       = 00018604            RMS$_WLK       = 000182BA            
RMS$_ORG       = 0001860C            RMS$_WPL       = 0001C11C            
RMS$_PBF       = 00018614            RMS$_WSF       = 0001871C            
RMS$_PENDING   = 00018009            RMS$_XAB       = 0001870C            
RMS$_PLG       = 0001861C            SETSIZ           00000045 R     02   
RMS$_PLV       = 0001872C            SETVFC           00000053 R     05   
RMS$_POS       = 00018624            TPT$L_PUTBLD     ********   X   02   
RMS$_PRM       = 0001862C            ZERO_RFA         000000BF R     02   
RMS$_PRV       = 0001829A            ZERO_RFA_BR      00000036 R     02   
RMS$_QUO       = 00018634            ZERO_RFA_BR1     0000006D R     05   
RMS$_RAB       = 0001863C            ZERO_RHB         00000045 R     05   
RMS$_RAC       = 00018644            ZERO_RHB1        00000047 R     05   
RMS$_RAT       = 0001864C            
RMS$_RBF       = 00018654            
RMS$_RER       = 0001C0F4            
RMS$_REX       = 000182A2            
RMS$_RFA       = 0001865C            
RMS$_RFM       = 00018664            
RMS$_RHB       = 0001866C            
RMS$_RLF       = 00018674            
RMS$_RLK       = 000182AA            
RMS$_RMV       = 0001C0FC            
RMS$_RNF       = 000182B2            
RMS$_RNL       = 000181A0            
RMS$_ROP       = 0001867C            
RMS$_RPL       = 0001C104            
RMS$_RRV       = 00018684            
RMS$_RSA       = 000182DA            
RMS$_RSL       = 0001873C            
RMS$_RSS       = 00018694            
RMS$_RST       = 0001869C            
RMS$_RSZ       = 000186A4            
RMS$_RTB       = 000181A8            
RM1PUTBLD       SEQ. ORG. PUT TO BLOCK DEVICE                    21-AUG-1978 21:45:10   VAX-11 MACRO X0.3-11               Page  21
PROGRAM SECTION SYNOPSIS                                                                                                         (3)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$RMS1            00000115      02     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  
$ABS$            0000006C      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$RMS1ANSID       00000039      04     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  
$RMS1VFC         0000008C      05     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  
L$RMS1           00000009      06     NOPIC   USR   CON   REL   GBL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
6456. BYTES LEFT IN FREE MEMORY POOL.
2236. BYTES OF RECLAIMED MEMORY.
OBJ$:RM1PUTBLD,LIS$:RM1PUTBLD/-SP=EXECML$/ML,LIB$:R/ML,SRC$:RM1PUTBLD
32 MLB DIR RDS - 1203 GETS TO DEFINE 30 MACROS. 94 INTER. FILE WRITES. 
