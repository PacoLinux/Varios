FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 1   
CONPRO.FOR   	/TR:BLOCKS/WR

        C	REVISION HISTORY:
        C		23-03-77	CP	IF OUTPUTTING TO TMP FILE, JUST OUTPUT
        C					EACH LINE UNTIL THE END OF THE CONSTANT
        C					DEFINITION, THEN RETURN.
        C
        C		04-04-77	TC	SPLIT LABEL 120 INTO 121 AND 122
        C					WHICH ALLOWS LOOPING BACK TO TWO
        C					ALTERNATE POINTS (65 AND 70)
         
0001    	SUBROUTINE PCONST
         
        C	THIS ROUTINE IS CALLED WHEN A LINE HAS BEEN RECOGNIZED
        C	AS A CONSTANT DEFINITION. THE IMPLICIT ARGUMENT
        C	INPTR IS THE OFFSET TO THE NEXT CHARACTER IN THE INPUT LINE.
         
        C	PCONST FIRST DETERMINES WHETHER THIS IS A SINGLE CONSTANT
        C	DEFINITION OR A LIST OF CONSTANT DEFINITIONS. IF A SINGLE
        C	CONSTANT IS BEING DEFINED, THE ROUTINE PSCONS IS CALLED TO
        C	PROCESS THE DEFINITION. 
         
        C	OTHERWISE, PCONST COLLECTS THE CONSTANT PREFIX NAME, THE
        C	TAG, THE BASE, AND THE INCREMENT FOR THE LIST. THEN IT
        C	COLLECTS A CONSTANT DEFINITION AT A TIME. EACH CONSTANT
        C	DEFINITION CAN HAVE A NAME AND A VALUE. VALUES CAN
        C	BE ARBITRARILY COMPLEX EXPRESSIONS. EACH CONSTANT IS
        C	PROCESSED AND OUTPUT.
         
        C	WHEN A SINGLE LEADING RIGHT ANGLE BRACKET IS RECOGNIZED AFTER
        C	A NUMBER OF CONSTANT DEFINITIONS IN A LIST, THE PROCESSING
        C	OF THE CONSTANT LIST IS COMPLETE.
         
0002    	INCLUDE 'SRC$:MDL.CMN/NOLIST'
         
0016    	INTEGER PTR, CLNCON
         
         
        C	THE CONSTANT CAN BE DEFINED WITH A "C" OR A "K". THEY
        C	ARE SEMANTICALLY EQUIVALENT DEFINITIONS, BUT THE DEFAULT TAG
        C	NAMES ARE DEPENDENT ON THE FIRST TOKEN IN THE LINE,
        C	NAMELY "C" OR "K".
         
0017    	TAGNAM (3) = TOKSTG (2)
         
        C	SEE WHETHER THE NEXT TOKEN IS THE NAME OF A CONSTANT OR
        C	A LEFT ANGLE BRACKET. THE LATTER INDICATES THAT THIS IS
        C	THE BEGINNING OF A CONSTANT DEFINITION LIST.
         
0018    	CALL GETTOK
0019    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
0020    300	FORMAT (' ',90A1)
0021    	IF (DEBUG) TYPE 310, TOKTYP
0022    310	FORMAT (' TOKTYP IS ',I3)
0023    	IF (TOKTYP .EQ. LANGLE) GOTO 10
0024    	IF (TMPOUT) GOTO 160
0025    	CALL PSCONS
0026    	RETURN
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 2   
CONPRO.FOR   	/TR:BLOCKS/WR

         
        C	THIS IS THE DEFINITION OF A CONSTANT LIST. COLLECT THE
        C	PARAMETERS FOR THE LIST. FIRST INITIALIZE SOME VARIABLES.
         
0027    10	IF (.NOT. TMPOUT) GOTO 15
0028    	CALL OUT2LN
0029    	GOTO 70
         
0030    15	CALL MOVSTG (TAGNAM, CONTAG)
0031    	CALL MOVSTG (PRENAM, CONPRE)
0032    	MRBASE (1) = 1
0033    	MRBASE (2) = '0'
0034    	CALL MOVSTG (MRBASE, BLBASE)
0035    	MRINCR (1) = 1
0036    	MRINCR (2) = '1'
0037    	CALL MOVSTG (MRINCR, BLINCR)
         
        C	LOOK FOR A PREFIX ARGUMENT. IF PRESENT, THIS PREFIX REPLACES
        C	THE $STRUCT PREFIX FOR THE DURATION OF THE CONSTANT LIST.
         
0038    	CALL GETTOK
0039    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
0040    	IF (TOKTYP .NE. ALPHA) GOTO 20
0041    	CALL MOVSTG (TOKSTG, CONPRE)
0042    	CALL GETTOK
0043    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
         
        C	NAME, IF ANY, IS SAVED. LOOK FOR A TAG FIELD. IF ABSENT,
        C	THE DEFAULT TAG FIELD IS '$C_' OR '$K_' AS STORED EARLIER AT
        C	THE START OF THIS ROUTINE. ANY ALPHA STRING FOUND AS
        C	THE SECOND ARGUMENT REPLACES THE DEFAULT TAG.
         
0044    20	IF (DEBUG) TYPE 310, TOKTYP
0045    	IF (TOKTYP .NE. COMMA) GOTO 50
0046    	CALL GETTOK
0047    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
0048    	IF (TOKTYP .NE. ALPHA) GOTO 30
0049    	CALL MOVSTG (TOKSTG, CONTAG)
0050    	CALL GETTOK
0051    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
         
        C	TAG NAME IS SAVED. SEE IF A BASE ARGUMENT IS SPECIFIED.
        C	BASE ARGUMENT CAN BE AN EXPRESSION.
         
0052    30	IF (DEBUG) TYPE 310, TOKTYP
0053    	IF (TOKTYP .NE. COMMA) GOTO 50
0054    	PTR = INPTR
0055    	IF (DEBUG) TYPE 520, PTR, INBUF (INPTR)
0056    	CALL GETEXP (INPTR)
0057    	IF (DEBUG) TYPE 530, INPTR, INBUF (INPTR)
0058    	IF (INBUF (INPTR) .EQ. ',') GOTO 45
0059    	IF ((INBUF (INPTR) .EQ. ' ') .OR.
        	1	(INBUF (INPTR) .EQ. '	') .OR.
        	2	(INBUF (INPTR) .EQ. EOL) .OR.
        	3	(INBUF (INPTR) .EQ. ';')) GOTO 60
0060    	INBUF (PTR - 1) = INPTR - PTR + 1
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 3   
CONPRO.FOR   	/TR:BLOCKS/WR

0061    	CALL MOVSTG (INBUF (PTR - 1), CVALUE)
0062    	CALL CVTEXP (CVALUE, BLBASE, MRBASE)
         
        C	BASE EXPRESSION, IF ANY, IS SAVED. NOW RETRIEVE
        C	THE INCREMENT ARGUMENT. THIS CAN ALSO BE AN EXPRESSION.
         
0063    	INPTR = NEXTNB (INPTR)
0064    	IF (INBUF (INPTR) .NE. ',') GOTO 50
0065    45	PTR = INPTR + 1
0066    	INPTR = INPTR + 1
0067    	IF (DEBUG) TYPE 520, PTR, INBUF (INPTR)
0068    	CALL GETEXP (INPTR)
0069    	IF (DEBUG) TYPE 530, INPTR, INBUF (INPTR)
0070    	IF ((INBUF (INPTR) .EQ. ',') .OR.
        	1	(INBUF (INPTR) .EQ. ' ') .OR. 
        	2	(INBUF (INPTR) .EQ. '	') .OR.
        	3	(INBUF (INPTR) .EQ. EOL) .OR.
        	4	(INBUF (INPTR) .EQ. ';')) GOTO 60
0071    	INBUF (PTR - 1) = INPTR - PTR + 1
0072    	CALL MOVSTG (INBUF (PTR - 1), CVALUE)
0073    	CALL CVTEXP (CVALUE, BLINCR, MRINCR)
0074    	GOTO 60
         
        C	THE OFFSET INTO THE INPUT BUFFER IS SLIGHTLY OFF BECAUSE
        C	SOME OPTIONAL TRAILING ARGUMENTS WERE OMITTED. BACK UP
        C	THE INPUT LINE OFFSET TO THE CORRECT SPOT.
         
0075    50	INPTR = LASTNB (INPTR - 2)
         
        C	ARGUMENTS ARE ALL COLLECTED. NOW OUTPUT LINES TO BLISS AND
        C	MARS.
         
0076    60	IF (DEBUG) TYPE 400, PTR, INBUF (INPTR)
0077    400	FORMAT (' COMMENT STARTS AT ',I3,' CHAR IS ',A1)
0078    	LINTYP = CONST
0079    	CALL MDOUTL (INPTR)
0080    	CALL BDOUTL (INPTR)
         
        C	EACH CONSTANT NAME DEFINITION WITHIN A LIST STARTS WITH A COMMA
         
0081    65	CLNCON = 0
0082    	CONEXP = .FALSE.
         
        C	NOW COLLECT THE CONSTANT NAME DEFINITIONS ONE AT A TIME UNTIL
        C	THE END OF THE LIST IS REACHED.
         
0083    70	CALL GETLIN
0084    	IF (ENDFIL) RETURN
         
        C	GET A TOKEN AND SEE WHETHER IT IS A RIGHT ANGLE BRACKET
        C	OR AN ALPHA STRING. THE FORMER MEANS THAT THE CONSTANT
        C	LIST IS FINISHED. THE LATTER MEANS THAT THIS IS ANOTHER
        C	CONSTANT NAME DEFINITION.
         
0085    	IF ((.NOT. ENDEXP) .AND. (CONEXP)) GOTO 77
0086    	CALL GETTOK
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 4   
CONPRO.FOR   	/TR:BLOCKS/WR

0087    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
0088    	IF (DEBUG) TYPE 310, TOKTYP
0089    	IF (TOKTYP .EQ. RANGLE) GOTO 150
0090    	IF (TMPOUT) GOTO 140
0091    	IF ((TOKTYP .EQ. EOL) .OR. (TOKTYP .EQ. SEMI)) GOTO 110
0092    77	LINTYP = CONSTN
         
        C	THIS IS THE DECLARATION OF A CONSTANT NAME.
        C	NOW INITIALIZE SOME VARIABLES.
         
0093    80	IF (TMPOUT) GOTO 140
0094    	ENDEXP = .FALSE.
0095    	CVALUE (1) = 0
0096    	BVALUE (1) = 0
0097    	MVALUE (1) = 0
0098    	FLDNAM (1) = 0
         
0099    	IF (CONEXP) GOTO 86
0100    	IF (TOKTYP .NE. ALPHA) GOTO 220
         
        C	THIS IS A NAME TO DEFINE. SAVE IT.
         
0101    	CALL MOVSTG (TOKSTG, FLDNAM)
0102    	CALL GETTOK
0103    	IF (DEBUG) TYPE 300, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
         
        C	NOW SEE IF THERE IS A VALUE FIELD.
         
0104    	IF (DEBUG) TYPE 310, TOKTYP
0105    	IF (TOKTYP .NE. COMMA) GOTO 90
0106    	GOTO 89
         
        C	IF YOU GET HERE, THIS IS A CONTINUATION LINE FROM AN
        C	EXPRESSION. SKIP OVER THE BLANKS AND TABS BEFORE TRYING
        C	TO GET THE EXPRESSION.
         
0107    86	DO 87 INPTR = 2, INBUF (1) + 1
0108    	IF ((INBUF (INPTR) .NE. ' ') .AND.
        	1	(INBUF (INPTR) .NE. '	')) GOTO 89
0109    87	CONTINUE
         
        C	ARRIVAL HERE IS AN ERROR
         
0110    	GOTO 230
         
        C	THE NAME HAS BEEN SAVED. THE NEXT ARGUMENT IS AN OPTIONAL
        C	EXPRESSION. IF IT IS OF ZERO LENGTH, THE ARGUMENT DEFAULTS
        C	TO THE VALUE OF ONE. SAVE THE LINE POINTER TO CHECK FOR ZERO
        C	LENGTH LATER.
         
0111    89	PTR = INPTR
0112    	IF (DEBUG) TYPE 520, PTR, INBUF (INPTR)
0113    520	FORMAT (' EXPRESSION STARTS AT OFFSET ',I3,' CHAR IS ',A1)
0114    	CALL GETEXP (INPTR)
0115    	IF (DEBUG) TYPE 530, INPTR, INBUF (INPTR)
0116    530	FORMAT (' EXPRESSION STOPS AT OFFSET ',I3,' CHAR IS ',A1)
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 5   
CONPRO.FOR   	/TR:BLOCKS/WR

0117    	IF ((INBUF (INPTR) .EQ. ',') .OR.
        	1	(INBUF (INPTR) .EQ. ' ') .OR.
        	2	(INBUF (INPTR) .EQ. '	') .OR.
        	3	(INBUF (INPTR) .EQ. ';') .OR.
        	4	(INBUF (INPTR) .EQ. EOL)) GOTO 95
0118    	IF (INBUF (INPTR) .EQ. '-') CONEXP = .TRUE.
0119    	IF ((INBUF (INPTR) .NE. '-') .AND.
        	1	(CONEXP)) ENDEXP = .TRUE.
         
        C	AN EXPRESSION WAS FOUND, COMPUTE ITS LENGTH.
         
0120    	IF (DEBUG) TYPE 540, PTR, INPTR
0121    540	FORMAT (' START IS ',I3,' END IS 'I3)
0122    	INBUF (PTR - 1) = INPTR - PTR + 1
0123    	IF (DEBUG) TYPE 550, INBUF (PTR - 1)
0124    550	FORMAT (' COUNT IS ',I3)
0125    	IF (DEBUG) TYPE 300, (INBUF (I), I = PTR, INBUF (PTR - 1) + 1)
         
        C	NOW SAVE THE EXPRESSION STRING AND CONVERT IT TO MARS AND
        C	BLISS.
         
0126    	CALL MOVSTG (INBUF (PTR - 1), CVALUE)
0127    	CALL CVTEXP (CVALUE, BVALUE, MVALUE)
         
        C	THE EXPRESSION IS PROCESSED.
        C	SAVE THE REST OF THE LINE AND GO LOOK FOR ANOTHER
        C	CONSTANT DEFINITION.
         
0128    	GOTO 95
         
        C	THE OFFSET INTO THE INPUT LINE IS OFF BY A FEW CHARACTERS BECAUSE
        C	THE EXPRESSION ARGUMENT WAS OMITTED. BACK UP TO THE CORRECT
        C	POSITION.
         
0129    90	INPTR = LASTNB (INPTR - 2)
         
        C	COMMA WAS GIVEN AFTER NAME, BUT NO EXPRESSION WAS GIVEN.
        C	ADJUST INPTR.
         
0130    95	INBUF (INPTR) = INBUF (1) - INPTR + 1
0131    100	CALL GETREM (INPTR)
0132    	IF ((CLNCON .LT. 10) .OR. (CONEXP)) GOTO 121
         
        C	10 CONSTANT NAMES HAVE BEEN DEFINED. CLOSE OUT THIS
        C	CONSTANT DEFINITION LIST, AND START ANOTHER.
         
0133    	CALL OUTCNL
0134    	GOTO 122
         
        C	THIS IS A BLANK OR COMMENT ONLY LINE.
        C	OUTPUT IT AND GO BACK FOR ANOTHER.
         
0135    110	CALL OUTBCL
0136    	GOTO 70
         
        C	OUTPUT THE CURRENT LINE THEN GO GET ANOTHER.
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 6   
CONPRO.FOR   	/TR:BLOCKS/WR

         
0137    121	CALL MDOUTL(PTR)
0138    	CALL BDOUTL(PTR)
0139    	CLNCON = CLNCON+1
0140    	IF (ENDEXP) CONEXP = .FALSE.
0141    	GOTO 70
         
0142    122	CALL MDOUTL(PTR)
0143    	CALL BDOUTL(PTR)
0144    	CLNCON = CLNCON+1
0145    	IF (ENDEXP) CONEXP = .FALSE.
0146    	GOTO 65
         
0147    140	CALL OUT2LN
0148    	GOTO 70
         
        C	OUTPUT THE FINAL CLOSING OF THE CONSTANT DEFINITION LIST.
         
0149    150	IF (TMPOUT) GOTO 160
0150    	LINTYP = CONSTE
0151    	CALL MDOUTL (INPTR)
0152    	CALL BDOUTL (INPTR)
0153    	RETURN
         
0154    160	CALL OUT2LN
0155    	RETURN
         
        C	ERROR REPORTING
         
0156    200	TYPE 2000
0157    2000	FORMAT (' INVALID BASE ARGUMENT IN CONSTANT LIST')
0158    	RETURN
         
0159    210	TYPE 2100
0160    2100	FORMAT (' INVALID INCREMENT ARGUMENT IN CONSTANT LIST')
0161    	RETURN
         
0162    220	TYPE 2200
0163    2200	FORMAT (' INVALID NAME IN CONSTANT DEFINITION')
0164    	RETURN
         
0165    230	TYPE 2300
0166    2300	FORMAT (' INVALID CONTINUED EXPRESSION IN CONSTANT LIST')
0167    	RETURN
         
0168    	END
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 7   
CONPRO.FOR   	/TR:BLOCKS/WR

PROGRAM SECTIONS

NUMBER	 NAME	    SIZE		ATTRIBUTES

  1	$CODE1	004504  1186		RW,I,CON,LCL
  3	$IDATA	000720   232		RW,D,CON,LCL
  4	$VARS	000006     3		RW,D,CON,LCL
  5	$TEMPS	000002     1		RW,D,CON,LCL
  6	LOG	000036    15		RW,D,OVR,GBL
  7	STGS	001064   282		RW,D,OVR,GBL
  8	MORSTG	000004     2		RW,D,OVR,GBL
  9	CHECKS	000002     1		RW,D,OVR,GBL
 10	PARSE	004160  1080		RW,D,OVR,GBL
 11	FILES	001214   326		RW,D,OVR,GBL
 12	SPCHR	000006     3		RW,D,OVR,GBL
 13	LUNS	000014     6		RW,D,OVR,GBL


ENTRY POINTS

 NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS   

 PCONST	      1-000000


VARIABLES

 NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS   

 BLANK	I*2  12-000000	 BLBITS	I*2  10-001022	 BLFOFS	I*2  10-001462	 BLI	I*2  13-000002	 BLIPTR	I*2  11-001212
 BLKOUT	L*2   6-000022	 BOFSET	I*2  10-000452	 CBASE	I*2  10-000554	 CINCR	I*2  10-000556	 CLNCON	I*2   4-000002
 CONEXP	L*2   6-000026	 DEBUG	I*2   9-000000	 ENDEXP	L*2   6-000024	 ENDFIL	L*2   6-000000	 EOLCH	I*2  12-000004
 ERR	I*2  13-000010	 ERROR	L*2   6-000002	 ERROUT	L*2   6-000016	 FLDLAS	L*2   6-000020	 FOFSET	I*2  10-000442
 FSIGN	I*2  10-000266	 FSIZ	I*2  10-000264	 I	I*2   4-000004	 INP	I*2  13-000000	 INPLIN	I*2  11-000246
 INPTR	I*2  11-000244	 LASLIN	I*2  10-002434	 LFDSIZ	I*2  10-001026	 LINTYP	I*2  10-000446	 LPTR	I*2  10-001030
 LSBSIZ	I*2  10-001024	 MAR	I*2  13-000004	 MARPTR	I*2  11-000630	 MNGCNT	I*2  10-004156	 NEGCNT	I*2  10-004154
 OBBITS	I*2  10-001464	 OFSIZ	I*2  10-001456	 OUNSIZ	I*2  10-001460	 POSOFF	L*2   6-000030	 PTR	I*2   4-000000
 SMASK	L*2   6-000014	 SOFSET	I*2  10-000440	 STGEQL	L*2   6-000004	 STROK	L*2   6-000006	 TAB	I*2  12-000002
 TMP	I*2  13-000006	 TMPIN	L*2   6-000034	 TMPOUT	L*2   6-000032	 TOKTYP	I*2  10-000120	 TTY	I*2  13-000012
 UNDOK	L*2   6-000010	 UNISIZ	I*2  10-000262	 VMASK	L*2   6-000012	 VOFSET	I*2  10-000444	 VSIZ	I*2  10-000450


ARRAYS

 NAME   TYPE  ADDRESS	    SIZE 	DIMENSIONS

 AMASK	I*2   7-000332	000004     2	(2)
 ASIGN	I*2   7-000626	000004     2	(2)
 BLBASE	I*2  10-002436	000242    81	(81)
 BLIBUF	I*2  11-000632	000360   120	(120)
 BLINCR	I*2  10-003142	000242    81	(81)
 BLSSIZ	I*2   7-000576	000024    10	(10)
 BVALUE	I*2  10-001730	000242    81	(81)
 BYTSIZ	I*2   7-000352	000024    10	(10)
 COMGBL	I*2   7-000664	000014     6	(6)
 COMMAS	I*2   7-000304	000004     2	(2)
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 8   
CONPRO.FOR   	/TR:BLOCKS/WR

 CONBAS	I*2   7-000422	000024    10	(10)
 CONINC	I*2   7-000446	000024    10	(10)
 CONPRE	I*2  10-000454	000040    16	(16)
 CONTAG	I*2  10-000514	000040    16	(16)
 CONTEX	I*2  10-003646	000306    99	(9,11)
 CPAREN	I*2   7-000726	000004     2	(2)
 CPRCOM	I*2   7-000720	000006     3	(3)
 CVALUE	I*2  10-000560	000242    81	(81)
 DEFEND	I*2   7-000114	000024    10	(10)
 DEFINI	I*2   7-000042	000024    10	(10)
 DOLBIT	I*2   7-000736	000032    13	(13)
 DOLBYT	I*2   7-000770	000034    14	(14)
 DOLDEF	I*2   7-000066	000014     6	(6)
 DOLFLD	I*2   7-001024	000030    12	(12)
 DOLGBL	I*2   7-000026	000014     6	(6)
 DOLVLD	I*2   7-000220	000022     9	(9)
 DOTBLK	I*2   7-000336	000014     6	(6)
 DOTEQS	I*2   7-000102	000012     5	(5)
 DOTMAC	I*2   7-000000	000026    11	(11)
 ENDMAC	I*2   7-000140	000022     9	(9)
 EQULST	I*2   7-000262	000022     9	(9)
 EQUTAB	I*2   7-000402	000014     6	(6)
 EXCLSP	I*2   7-000176	000016     7	(7)
 EXPCLO	I*2   7-001060	000004     2	(2)
 EXPOPN	I*2   7-001054	000004     2	(2)
 FLDNAM	I*2  10-000270	000110    36	(36)
 HYPHEN	I*2   7-000660	000004     2	(2)
 INBUF	I*2  11-000000	000244    82	(82)
 LANHYP	I*2   7-000310	000006     3	(3)
 LITTAB	I*2   7-000472	000022     9	(9)
 MACTAB	I*2   7-000532	000020     8	(8)
 MARBUF	I*2  11-000250	000360   120	(120)
 MRBASE	I*2  10-002700	000242    81	(81)
 MRINCR	I*2  10-003404	000242    81	(81)
 MVALUE	I*2  10-001466	000242    81	(81)
 NEGSGN	I*2   8-000000	000004     2	(2)
 OASIGN	I*2   7-000732	000004     2	(2)
 OFFSET	I*2   7-000552	000024    10	(10)
 ONESHF	I*2   7-000642	000006     3	(3)
 OPAREN	I*2   7-000416	000004     2	(2)
 OSBNAM	I*2  10-001316	000040    16	(16)
 OTGNAM	I*2  10-001356	000040    16	(16)
 OUNTYP	I*2  10-001416	000040    16	(16)
 PCTSEM	I*2   7-000632	000010     4	(4)
 PRENAM	I*2  10-000122	000040    16	(16)
 RANHYP	I*2   7-000324	000006     3	(3)
 RSTLIN	I*2  10-001032	000264    90	(90)
 SEMSPC	I*2   7-000524	000006     3	(3)
 SPCSTG	I*2   7-000376	000004     2	(2)
 SPHYSP	I*2   7-000650	000010     4	(4)
 STRSTG	I*2  10-000222	000040    16	(16)
 SUFDEF	I*2   7-000162	000010     4	(4)
 SUFNAM	I*2  10-000162	000040    16	(16)
 TABEQS	I*2   7-000514	000010     4	(4)
 TABLAN	I*2   7-000316	000006     3	(3)
 TABOPR	I*2   7-000712	000006     3	(3)
FORTRAN IV-PLUS V02-51D		03:02:50    22-AUG-78		PAGE 9   
CONPRO.FOR   	/TR:BLOCKS/WR

 TABPRN	I*2   7-000700	000012     5	(5)
 TABRAN	I*2   7-000254	000006     3	(3)
 TABSTG	I*2   7-000214	000004     2	(2)
 TAGNAM	I*2  10-000400	000040    16	(16)
 TMPVAL	I*2  10-002172	000242    81	(81)
 TOKSTG	I*2  10-000000	000120    40	(40)
 UNITYP	I*2   7-000172	000004     2	(2)
 ZEROSG	I*2   7-000622	000004     2	(2)
 ZRLAHY	I*2   7-000242	000012     5	(5)


LABELS

 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	

 10	 1-000242	 15	 1-000272	 20	 1-000642	 30	 1-001174	 45	 1-001612
 50	 1-002140	 60	 1-002202	 65	 1-002314	 70	 1-002332	 77	 1-002624
 80	    **   	 86	 1-003124	 87	    **   	 89	 1-003220	 90	 1-004016
 95	 1-004060	 100	    **   	 110	 1-004154	 121	 1-004176	 122	 1-004246
 140	 1-004316	 150	 1-004340	 160	 1-004404	 200	    **   	 210	    **   
 220	 1-004424	 230	 1-004454	 300'	 3-000000	 310'	 3-000006	 400'	 3-000026
 520'	 3-000074	 530'	 3-000154	 540'	 3-000232	 550'	 3-000266	 2000'	 3-000306
 2100'	 3-000360	 2200'	 3-000440	 2300'	 3-000510


FUNCTIONS AND SUBROUTINES REFERENCED

 BDOUTL	 CVTEXP	 GETEXP	 GETLIN	 GETREM	 GETTOK	 LASTNB	 MDOUTL	 MOVSTG	 NEXTNB	 OUTBCL	 OUTCNL	 OUT2LN	 PSCONS


TOTAL SPACE ALLOCATED = 014202  3137

NO FPP INSTRUCTIONS GENERATED
FORTRAN IV-PLUS V02-51D		03:04:04    22-AUG-78		PAGE 10  
CONPRO.FOR   	/TR:BLOCKS/WR

         
0001    	SUBROUTINE PSCONS
         
        C	THIS ROUTINE PROCESSES A SINGLE CONSTANT DEFINITION THAT
        C	IS NOT PART OF A LIST. THE CONSTANT DEFINITION HAS TWO
        C	ARGUMENTS, BOTH OF WHICH ARE REQUIRED -- THE NAME AND THE
        C	VALUE. THE VALUE IS AN ARBITRARILY COMPLICATED EXPRESSION.
         
0002    	INCLUDE 'SRC$:MDL.CMN/NOLIST'
         
0016    	INTEGER PTR
         
        C	INITIALIZE THE LINE TYPE. REMEMBER THAT THE TAG NAME WAS
        C	INITIALIZED IN THE ROUTINE PCONST, WHICH CALLED THIS ROUTINE.
         
0017    	LINTYP = SCONST
         
        C	NOW LOOK AT THE TYPE OF TOKEN THAT HAS BEEN FOUND BY THE
        C	CALLING ROUTINE, PCONST.
         
0018    	IF (DEBUG) TYPE 500, (TOKSTG (I), I = 2, TOKSTG (1) + 1)
0019    500	FORMAT (' ',90A1)
0020    	IF (DEBUG) TYPE 510, TOKTYP
0021    510	FORMAT (' TOKTYP IS ',I3)
0022    	IF (TOKTYP .NE. ALPHA) GOTO 100
0023    	CALL MOVSTG (TOKSTG, FLDNAM)
0024    	CALL GETTOK
0025    	IF (DEBUG) TYPE 510, TOKTYP
0026    	IF (TOKTYP .NE. COMMA) GOTO 110
         
        C	THE NAME HAS BEEN SAVED. THE NEXT ARGUMENT IS AN EXPRESSION.
        C	THE OFFSET TO THE BEGINNING OF THE EXPRESSION IS SAVED
        C	TO LATER DETERMINE WHETHER THE EXPRESSION IS OF NON-ZERO
        C	LENGTH.
         
0027    	PTR = INPTR
0028    	IF (DEBUG) TYPE 330, PTR, INBUF (INPTR)
0029    330	FORMAT (' EXPRESSION STARTS AT OFFSET ',I3,' CHAR IS ',A1)
0030    	CALL GETEXP (INPTR)
0031    	IF (DEBUG) TYPE 340, INPTR, INBUF (INPTR)
0032    340	FORMAT (' EXPRESSION STOPS AT OFFSET ',I3,' CHAR IS ',A1)
0033    	IF (INBUF (INPTR) .EQ. ',') GOTO 110
         
        C	AN EXPRESSION WAS FOUND. COMPUTE THE LENGTH OF THE EXPRESSION.
         
0034    	INBUF (PTR - 1) = INPTR - PTR + 1
0035    	IF (DEBUG) TYPE 500, (INBUF (I), I = PTR, INBUF (PTR - 1) + 1)
         
        C	NOW SAVE THE EXPRESSION STRING AND CONVERT IT TO MARS
        C	AND BLISS.
         
0036    	CALL MOVSTG (INBUF (PTR - 1), CVALUE)
0037    	CALL CVTEXP (CVALUE, BVALUE, MVALUE)
0038    	INPTR = INPTR + 1
         
        C	THE EXPRESSION IS PROCESSED. NOW OUTPUT THE DEFINITION
FORTRAN IV-PLUS V02-51D		03:04:04    22-AUG-78		PAGE 11  
CONPRO.FOR   	/TR:BLOCKS/WR

        C	TO THE MARS AND BLISS TRANSLATED OUTPUT FILES.
         
0039    	CALL MDOUTL (INPTR)
0040    	CALL BDOUTL (INPTR)
0041    	RETURN
         
        C	ERROR REPORTING
         
0042    100	TYPE 1000 
0043    1000	FORMAT (' NAME MISSING IN CONSTANT DEFINITION')
0044    	RETURN
         
0045    110	TYPE 1100
0046    1100	FORMAT (' EXPRESSION MISSING IN CONSTANT DEFINITION')
0047    	RETURN
0048    	END
FORTRAN IV-PLUS V02-51D		03:04:04    22-AUG-78		PAGE 12  
CONPRO.FOR   	/TR:BLOCKS/WR

PROGRAM SECTIONS

NUMBER	 NAME	    SIZE		ATTRIBUTES

  1	$CODE1	000764   250		RW,I,CON,LCL
  3	$IDATA	000344   114		RW,D,CON,LCL
  4	$VARS	000004     2		RW,D,CON,LCL
  5	$TEMPS	000002     1		RW,D,CON,LCL
  6	LOG	000036    15		RW,D,OVR,GBL
  7	STGS	001064   282		RW,D,OVR,GBL
  8	MORSTG	000004     2		RW,D,OVR,GBL
  9	CHECKS	000002     1		RW,D,OVR,GBL
 10	PARSE	004160  1080		RW,D,OVR,GBL
 11	FILES	001214   326		RW,D,OVR,GBL
 12	SPCHR	000006     3		RW,D,OVR,GBL
 13	LUNS	000014     6		RW,D,OVR,GBL


ENTRY POINTS

 NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS   

 PSCONS	      1-000000


VARIABLES

 NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS    NAME   TYPE  ADDRESS   

 BLANK	I*2  12-000000	 BLBITS	I*2  10-001022	 BLFOFS	I*2  10-001462	 BLI	I*2  13-000002	 BLIPTR	I*2  11-001212
 BLKOUT	L*2   6-000022	 BOFSET	I*2  10-000452	 CBASE	I*2  10-000554	 CINCR	I*2  10-000556	 CONEXP	L*2   6-000026
 DEBUG	I*2   9-000000	 ENDEXP	L*2   6-000024	 ENDFIL	L*2   6-000000	 EOLCH	I*2  12-000004	 ERR	I*2  13-000010
 ERROR	L*2   6-000002	 ERROUT	L*2   6-000016	 FLDLAS	L*2   6-000020	 FOFSET	I*2  10-000442	 FSIGN	I*2  10-000266
 FSIZ	I*2  10-000264	 I	I*2   4-000002	 INP	I*2  13-000000	 INPLIN	I*2  11-000246	 INPTR	I*2  11-000244
 LASLIN	I*2  10-002434	 LFDSIZ	I*2  10-001026	 LINTYP	I*2  10-000446	 LPTR	I*2  10-001030	 LSBSIZ	I*2  10-001024
 MAR	I*2  13-000004	 MARPTR	I*2  11-000630	 MNGCNT	I*2  10-004156	 NEGCNT	I*2  10-004154	 OBBITS	I*2  10-001464
 OFSIZ	I*2  10-001456	 OUNSIZ	I*2  10-001460	 POSOFF	L*2   6-000030	 PTR	I*2   4-000000	 SMASK	L*2   6-000014
 SOFSET	I*2  10-000440	 STGEQL	L*2   6-000004	 STROK	L*2   6-000006	 TAB	I*2  12-000002	 TMP	I*2  13-000006
 TMPIN	L*2   6-000034	 TMPOUT	L*2   6-000032	 TOKTYP	I*2  10-000120	 TTY	I*2  13-000012	 UNDOK	L*2   6-000010
 UNISIZ	I*2  10-000262	 VMASK	L*2   6-000012	 VOFSET	I*2  10-000444	 VSIZ	I*2  10-000450


ARRAYS

 NAME   TYPE  ADDRESS	    SIZE 	DIMENSIONS

 AMASK	I*2   7-000332	000004     2	(2)
 ASIGN	I*2   7-000626	000004     2	(2)
 BLBASE	I*2  10-002436	000242    81	(81)
 BLIBUF	I*2  11-000632	000360   120	(120)
 BLINCR	I*2  10-003142	000242    81	(81)
 BLSSIZ	I*2   7-000576	000024    10	(10)
 BVALUE	I*2  10-001730	000242    81	(81)
 BYTSIZ	I*2   7-000352	000024    10	(10)
 COMGBL	I*2   7-000664	000014     6	(6)
 COMMAS	I*2   7-000304	000004     2	(2)
FORTRAN IV-PLUS V02-51D		03:04:04    22-AUG-78		PAGE 13  
CONPRO.FOR   	/TR:BLOCKS/WR

 CONBAS	I*2   7-000422	000024    10	(10)
 CONINC	I*2   7-000446	000024    10	(10)
 CONPRE	I*2  10-000454	000040    16	(16)
 CONTAG	I*2  10-000514	000040    16	(16)
 CONTEX	I*2  10-003646	000306    99	(9,11)
 CPAREN	I*2   7-000726	000004     2	(2)
 CPRCOM	I*2   7-000720	000006     3	(3)
 CVALUE	I*2  10-000560	000242    81	(81)
 DEFEND	I*2   7-000114	000024    10	(10)
 DEFINI	I*2   7-000042	000024    10	(10)
 DOLBIT	I*2   7-000736	000032    13	(13)
 DOLBYT	I*2   7-000770	000034    14	(14)
 DOLDEF	I*2   7-000066	000014     6	(6)
 DOLFLD	I*2   7-001024	000030    12	(12)
 DOLGBL	I*2   7-000026	000014     6	(6)
 DOLVLD	I*2   7-000220	000022     9	(9)
 DOTBLK	I*2   7-000336	000014     6	(6)
 DOTEQS	I*2   7-000102	000012     5	(5)
 DOTMAC	I*2   7-000000	000026    11	(11)
 ENDMAC	I*2   7-000140	000022     9	(9)
 EQULST	I*2   7-000262	000022     9	(9)
 EQUTAB	I*2   7-000402	000014     6	(6)
 EXCLSP	I*2   7-000176	000016     7	(7)
 EXPCLO	I*2   7-001060	000004     2	(2)
 EXPOPN	I*2   7-001054	000004     2	(2)
 FLDNAM	I*2  10-000270	000110    36	(36)
 HYPHEN	I*2   7-000660	000004     2	(2)
 INBUF	I*2  11-000000	000244    82	(82)
 LANHYP	I*2   7-000310	000006     3	(3)
 LITTAB	I*2   7-000472	000022     9	(9)
 MACTAB	I*2   7-000532	000020     8	(8)
 MARBUF	I*2  11-000250	000360   120	(120)
 MRBASE	I*2  10-002700	000242    81	(81)
 MRINCR	I*2  10-003404	000242    81	(81)
 MVALUE	I*2  10-001466	000242    81	(81)
 NEGSGN	I*2   8-000000	000004     2	(2)
 OASIGN	I*2   7-000732	000004     2	(2)
 OFFSET	I*2   7-000552	000024    10	(10)
 ONESHF	I*2   7-000642	000006     3	(3)
 OPAREN	I*2   7-000416	000004     2	(2)
 OSBNAM	I*2  10-001316	000040    16	(16)
 OTGNAM	I*2  10-001356	000040    16	(16)
 OUNTYP	I*2  10-001416	000040    16	(16)
 PCTSEM	I*2   7-000632	000010     4	(4)
 PRENAM	I*2  10-000122	000040    16	(16)
 RANHYP	I*2   7-000324	000006     3	(3)
 RSTLIN	I*2  10-001032	000264    90	(90)
 SEMSPC	I*2   7-000524	000006     3	(3)
 SPCSTG	I*2   7-000376	000004     2	(2)
 SPHYSP	I*2   7-000650	000010     4	(4)
 STRSTG	I*2  10-000222	000040    16	(16)
 SUFDEF	I*2   7-000162	000010     4	(4)
 SUFNAM	I*2  10-000162	000040    16	(16)
 TABEQS	I*2   7-000514	000010     4	(4)
 TABLAN	I*2   7-000316	000006     3	(3)
 TABOPR	I*2   7-000712	000006     3	(3)
FORTRAN IV-PLUS V02-51D		03:04:04    22-AUG-78		PAGE 14  
CONPRO.FOR   	/TR:BLOCKS/WR

 TABPRN	I*2   7-000700	000012     5	(5)
 TABRAN	I*2   7-000254	000006     3	(3)
 TABSTG	I*2   7-000214	000004     2	(2)
 TAGNAM	I*2  10-000400	000040    16	(16)
 TMPVAL	I*2  10-002172	000242    81	(81)
 TOKSTG	I*2  10-000000	000120    40	(40)
 UNITYP	I*2   7-000172	000004     2	(2)
 ZEROSG	I*2   7-000622	000004     2	(2)
 ZRLAHY	I*2   7-000242	000012     5	(5)


LABELS

 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	 LABEL   ADDRESS 	

 100	 1-000704	 110	 1-000734	 330'	 3-000026	 340'	 3-000106	 500'	 3-000000
 510'	 3-000006	 1000'	 3-000164	 1100'	 3-000234


FUNCTIONS AND SUBROUTINES REFERENCED

 BDOUTL	 CVTEXP	 GETEXP	 GETTOK	 MDOUTL	 MOVSTG


TOTAL SPACE ALLOCATED = 010104  2082

NO FPP INSTRUCTIONS GENERATED

OBJ$:CONPRO,LIS$:CONPRO/-SP=SRC$:CONPRO.FOR
