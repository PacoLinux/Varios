IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)      49  CANCEL I/O ON CHANNEL
   (1)      83  DELETE MAILBOX
   (1)     152  FILL DIAGNOSTIC BUFFER
   (1)     184  RELEASE I/O CHANNEL
   (1)     239  REQUEST I/O CHANNEL
   (1)     297  I/O REQUEST COMPLETION PROCESSING
   (1)     346  INITIATE I/O FUNCTION ON DEVICE
   (1)     389  RELEASE BUFFERED DATAPATH
   (1)     430  REQUEST BUFFERED DATAPATH
   (1)     470  RELEASE UNIBUS MAP REGISTERS
   (1)     523  REQUEST UNIBUS MAP REGISTERS
   (1)     558  LOCAL SUBROUTINE ALTER MAP REGISTER BITMAP
   (1)     574  LOCAL SUBROUTINE SEARCH MAP REGISTER BITMAP AND
   (1)     609  WAITFOR INTERRUPT OR TIMEOUT AND KEEP CHANNEL
   (1)     643  WAITFOR INTERRUPT OR TIMEOUT AND RELEASE CHANNE
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	IOSUBNPAG - NONPAGED I/O RELATED SUBROUTINES
                                     0000     2 	.IDENT	/01/
                                     0000     3  
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000    10 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    13 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; D. N. CUTLER 13-JUN-76
                                     0000    24 ;
                                     0000    25 ; MODIFIED BY R.HEINEN 29-SEPT-76
                                     0000    26 ;
                                     0000    27 ;	CHANGE PARAMETERS TO WAIT FOR INTERRUPTS.
                                     0000    28 ;
                                     0000    29 ; NONPAGED I/O RELATED SUBROUTINES
                                     0000    30 ;
                                     0000    31 ; MACRO LIBRARY CALLS
                                     0000    32 ;
                                     0000    33  
                                     0000    34 	$ADPDEF				;DEFINE ADP OFFSETS
                                     0000    35 	$CADEF				;DEFINE CONDITIONAL ASSEMBLY PARAMETERS
                                     0000    36 	$CRBDEF				;DEFINE CRB OFFSETS
                                     0000    37 	$DDBDEF				;DEFINE DDB OFFSETS
                                     0000    38 	$DDTDEF				;DEFINE DDT OFFSETS
                                     0000    39 	$EMBDEF				;DEFINE EMB OFFSETS
                                     0000    40 	$IDBDEF				;DEFINE IDB OFFSETS
                                     0000    41 	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
                                     0000    42 	$IRPDEF				;DEFINE IRP OFFSETS
                                     0000    43 	$LOGDEF				;DEFINE LOGICAL NAME BLOCK OFFSETS
                                     0000    44 	$PCBDEF				;DEFINE PCB OFFSETS
                                     0000    45 	$PRDEF				;DEFINE PROCESSOR REGISTERS
                                     0000    46 	$UCBDEF				;DEFINE UCB OFFSETS
                                     0000    47 	$VECDEF				;DEFINE CRB VECTOR OFFSETS
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   2
01              CANCEL I/O ON CHANNEL                                                                                            (1)

                                     0000    49 	.SBTTL	CANCEL I/O ON CHANNEL
                                     0000    50 ;+
                                     0000    51 ; IOC$CANCELIO - CANCEL I/O ON CHANNEL
                                     0000    52 ;
                                     0000    53 ; THIS ROUTINE IS A DEVICE INDEPENDENT CANCEL I/O ROUTINE THAT CONDITIONALLY
                                     0000    54 ; MARKS THE UCB SUCH THAT THE CURRENT I/O REQUEST WILL BE CANCELED IF CONDITIONS
                                     0000    55 ; WARRANT SUCH A ACTION.
                                     0000    56 ;
                                     0000    57 ; INPUTS:
                                     0000    58 ;
                                     0000    59 ;	R2 = NEGATIVE OF THE CHANNEL NUMBER.
                                     0000    60 ;	R3 = CURRENT IO PACKET.
                                     0000    61 ;	R4 = PCB ADDRESS.
                                     0000    62 ;	R5 = UCB ADDRESS.
                                     0000    63 ;
                                     0000    64 ; OUTPUTS:
                                     0000    65 ;
                                     0000    66 ;	IF THE DEVICE IS BUSY, THE REQUEST IS FOR THE CURRENT PROCESS, AND
                                     0000    67 ;	THE I/O WAS ISSUED FROM THE DESIGNATED CHANNEL, THEN THE CANCEL I/O
                                     0000    68 ;	BIT IS SET IN THE CORRESPONDING UCB.
                                     0000    69 ;
                                     0000    70 ;	R2, R3, R4, AND R5 ARE PRESERVED ACROSS CALL.
                                     0000    71 ;-
                                     0000    72  
                                 00000000    73 	.PSECT	WIONONPAGED
                                     0000    74 IOC$CANCELIO::				;CANCEL I/O ON CHANNEL
         58 A5            08     E1  0000    75 	BBC	#UCB$V_BSY,UCB$W_STS(R5),10$ ;IF CLR, DEVICE NOT BUSY
                          11         0004       
         60 A4         0C A3     D1  0005    76 	CMPL	IRP$L_PID(R3),PCB$L_PID(R4) ;PROCESS ID MATCH?
                          0A     12  000A    77 	BNEQ	10$			;IF NEQ NO
         28 A3            52     B1  000C    78 	CMPW	R2,IRP$W_CHAN(R3)	;CHANNEL NUMBER MATCH
                          04     12  0010    79 	BNEQ	10$			;IF NEQ NO
         58 A5            08     A8  0012    80 	BISW	#UCB$M_CANCEL,UCB$W_STS(R5) ;SET CANCEL PENDING
                                 05  0016    81 10$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   3
01              DELETE MAILBOX                                                                                                   (1)

                                     0017    83 	.SBTTL	DELETE MAILBOX
                                     0017    84 ;+
                                     0017    85 ; IOC$DELMBX - DELETE MAILBOX
                                     0017    86 ;
                                     0017    87 ; THIS ROUTINE IS CALLED TO CHECK IF A DEVICE IS A MAILBOX AND WHETHER
                                     0017    88 ; IT IS MARKED FOR DELETION.
                                     0017    89 ;
                                     0017    90 ; INPUTS:
                                     0017    91 ;
                                     0017    92 ;	R4 = CURRENT PROCESS PCB ADDRESS.
                                     0017    93 ;	R5 = UCB ADDRESS OF MAILBOX TO DELETE.
                                     0017    94 ;
                                     0017    95 ;	I/O DATA BASED LOCKED AND AT AST DELIVERY LEVEL.
                                     0017    96 ;
                                     0017    97 ; OUTPUTS:
                                     0017    98 ;
                                     0017    99 ;	IF THE DEVICE IS A MAILBOX, ITS REFERENCE COUNT IS ZERO, AND IT
                                     0017   100 ;	IS MARKED FOR DELETE, THEN THE SPECIFIED UCB IS REMOVED FROM THE
                                     0017   101 ;	MAILBOX UCB LIST AND DEALLOCATED. IF A LOGICAL NAME IS ASSOCIATED
                                     0017   102 ;	WITH THE MAILBOX, THEN IT IS ALSO DELETED. THE PROCESS BUFFERED
                                     0017   103 ;	I/O QUOTA IS UPDATED.
                                     0017   104 ;-
                                     0017   105  
                                     0017   106 IOC$DELMBX::				;DELETE MAILBOX
            50         24 A5     D0  0017   107 	MOVL	UCB$L_DDB(R5),R0	;GET ADDRESS OF DDB
            50         D8 A0     9E  001B   108 	MOVAB	DDB$L_UCB-UCB$L_LINK(R0),R0 ;GET ADDRESS OF FIRST UCB LINK
         34 A5            00'    E1  001F   109 	BBC	S^#DEV$V_MBX,UCB$L_DEVCHAR(R5),70$ ;IF CLR, DEVICE NOT MAILBOX
                          78         0023       
                       50 A5     B5  0024   110 	TSTW	UCB$W_REFC(R5)		;REFERENCE COUNT ZERO?
                          73     12  0027   111 	BNEQ	70$			;IF NEQ NO
         5A A5            01     E1  0029   112 	BBC	#UCB$V_DELMBX,UCB$W_DEVSTS(R5),70$ ;IF CLR, NO DELETE
                          6E         002D       
            51            50     D0  002E   113 10$:	MOVL	R0,R1			;SAVE ADDRESS OF LAST UCB
            50         2C A1     D0  0031   114 	MOVL	UCB$L_LINK(R1),R0	;GET ADDRESS OF NEXT UCB
            55            50     D1  0035   115 	CMPL	R0,R5			;UCB ADDRESS MATCH?
                          F4     12  0038   116 	BNEQ	10$			;IF NEQ NO
         2C A1         2C A5     D0  003A   117 	MOVL	UCB$L_LINK(R5),UCB$L_LINK(R1) ;REMOVE UCB FROM UCB LIST
            52         20 A5     D0  003F   118 	MOVL	UCB$L_CRB(R5),R2	;GET ADDRESS OF CRB
                       0C A2     B7  0043   119 	DECW	CRB$W_REFC(R2)		;DECREMENT REFERENCE COUNT
            52         64 A5     D0  0046   120 	MOVL	UCB$L_LOGADR(R5),R2	;GET ADDRESS OF LOGICAL NAME ENTRY
                          15     13  004A   121 	BEQL	20$			;IF EQL NONE
            53         0B A2     9A  004C   122 	MOVZBL	LOG$B_TABLE(R2),R3	;GET LOGICAL NAME TABLE NUMBER
                          FFAD'  30  0050   123 	BSBW	LOG$LOCKW		;LOCK NAME TABLE FOR WRITE
            50            62     0F  0053   124 	REMQUE	LOG$L_LTFL(R2),R0	;REMOVE LOGICAL NAME ENTRY FROM TABLE
                          53     DD  0056   125 	PUSHL	R3			;SAVE LOGICAL NAME TABLE NUMBER
                          FFA5'  30  0058   126 	BSBW	EXE$DEAPAGED		;DEALLOCATE LOGICAL NAME BLOCK
                          53   8ED0  005B   127 	POPL	R3			;RETRIEVE LOGICAL NAME TABLE NUMBER
                          FF9F'  30  005E   128 	BSBW	LOG$UNLOCK		;UNLOCK NAME TABLE
         5A A5            00     E0  0061   129 20$:	BBS	#UCB$V_PRMMBX,UCB$W_DEVSTS(R5),40$ ;IF SET, PERMANENT MAILBOX
                          26         0065       
            51         5C A5     3C  0066   130 	MOVZWL	UCB$L_CPID(R5),R1	;GET PROCESS INDEX
                                     006A   131 	DSBINT	#IPL$_SYNCH		;SYNCHRONIZE ACCESS TO SYSTEM DATA BASE
            51   00000000'EF41   D0  0070   132 	MOVL	L^SCH$AL_PCB[R1],R1	;GET ADDRESS OF PROCESS PCB
         5C A5         60 A1     D1  0078   133 	CMPL	PCB$L_PID(R1),UCB$L_CPID(R5) ;PROCESS ID MATCH?
                          0A     12  007D   134 	BNEQ	30$			;IF NEQ NO
         68 A1         4A A5     A0  007F   135 	ADDW	UCB$W_CHARGE(R5),PCB$W_BYTLM(R1) ;UPDATE BYTE COUNT LIMIT
         42 A1         4A A5     A0  0084   136 	ADDW	UCB$W_CHARGE(R5),PCB$W_BYTCNT(R1) ;UPDATE BYTE COUNT QUOTA
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   4
01              DELETE MAILBOX                                                                                                   (1)

                                     0089   137 30$:	ENBINT				;ENABLE INTERRUPTS
                                     008C   138  
                                     008C   139 ;
                                     008C   140 ; CLEAN UP MAILBOX MESSAGES
                                     008C   141 ; THERE ARE NO OUTSTANDING I/O OPERATIONS.
                                     008C   142 ;
                                     008C   143  
            50         00 B5     0F  008C   144 40$:	REMQUE	@(R5),R0		;FETCH MESSAGE BLOCK
                          04     1D  0090   145 	BVS	50$			;IF VS THEN NONE
                          05     10  0092   146 	BSBB	60$			;DEALLOCATE MESSAGE BLOCK
                          F6     11  0094   147 	BRB	40$			;CONTINUE UNTIL EXHAUSTED
            50            55     D0  0096   148 50$:	MOVL	R5,R0			;SET ADDRESS OF BLOCK TO RELEASE
                          FF64'  30  0099   149 60$:	BSBW	EXE$DEANONPAGED		;DEALLOCATE MAILBOX UCB AND RETURN
                                 05  009C   150 70$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   5
01              FILL DIAGNOSTIC BUFFER                                                                                           (1)

                                     009D   152 	.SBTTL	FILL DIAGNOSTIC BUFFER
                                     009D   153 ;+
                                     009D   154 ; IOC$DIAGBUFILL - FILL DIAGNOSTIC BUFFER
                                     009D   155 ;
                                     009D   156 ; THIS ROUTINE IS CALLED AT THE END OF AN I/O OPERATION, BUT BEFORE RELEASING
                                     009D   157 ; THE I/O CHANNEL, TO FILL THE FINAL DEVICE PARAMETERS INTO AN INTERNAL DIAG-
                                     009D   158 ; NOSTIC BUFFER IF ONE IS SPECIFIED.
                                     009D   159 ;
                                     009D   160 ; INPUTS:
                                     009D   161 ;
                                     009D   162 ;	R4 = ADDRESS OF DEVICE CSR REGISTER.
                                     009D   163 ;	R5 = DEVICE UNIT UCB ADDRESS.
                                     009D   164 ;
                                     009D   165 ; OUTPUTS:
                                     009D   166 ;
                                     009D   167 ;	IF A DIAGNOSTIC BUFFER WAS SPECIFIED IN THE ORIGINAL REQUEST, THEN
                                     009D   168 ;	THE COMPLETION TIME, FINAL ERROR COUNTERS, AND DEVICE REGISTERS ARE
                                     009D   169 ;	FILLED INTO THE DIAGNOSTIC BUFFER.
                                     009D   170 ;-
                                     009D   171  
                                     009D   172 IOC$DIAGBUFILL::			;FILL DIAGNOSTIC BUFFER
            53         4C A5     D0  009D   173 	MOVL	UCB$L_IRP(R5),R3	;GET ADDRESS OF I/O PACKET
         2A A3            07     E1  00A1   174 	BBC	#IRP$V_DIAGBUF,IRP$W_STS(R3),10$ ;IF CLR, NO DIAGNOSTIC BUFFER
                          1D         00A5       
            50         44 B3     D0  00A6   175 	MOVL	@IRP$L_DIAGBUF(R3),R0	;GET ADDRESS OF INTERNAL BUFFER DATA AREA
            50            08     C0  00AA   176 	ADDL	#8,R0			;POINT PAST START TIME
            80   00000000'EF     7D  00AD   177 	MOVQ	EXE$GQ_SYSTIME,(R0)+	;INSERT COMPLETION TIME
            80         70 A5     3C  00B4   178 	MOVZWL	UCB$B_ERTCNT(R5),(R0)+	;INSERT FINAL ERROR COUNTERS
            52         24 A5     D0  00B8   179 	MOVL	UCB$L_DDB(R5),R2	;GET ADDRESS OF DDB
            52         0C A2     D0  00BC   180 	MOVL	DDB$L_DDT(R2),R2	;GET ADDRESS OF DDT
                       10 B2     16  00C0   181 	JSB	@DDT$L_REGDUMP(R2)	;CALL DEVICE REGISTER DUMP ROUTINE
                                 05  00C3   182 10$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   6
01              RELEASE I/O CHANNEL                                                                                              (1)

                                     00C4   184 	.SBTTL	RELEASE I/O CHANNEL
                                     00C4   185 ;+
                                     00C4   186 ; IOC$RELCHAN - RELEASE ALL I/O CHANNELS
                                     00C4   187 ; IOC$RELSCHAN - RELEASE SECONDARY I/O CHANNEL
                                     00C4   188 ;
                                     00C4   189 ; THIS ROUTINE IS CALLED AT THE END OF AN I/O OPERATION TO RELEASE ALL
                                     00C4   190 ; CHANNELS THE I/O WAS BEING PERFORMED ON.
                                     00C4   191 ;
                                     00C4   192 ; INPUTS:
                                     00C4   193 ;
                                     00C4   194 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     00C4   195 ;
                                     00C4   196 ; OUTPUTS:
                                     00C4   197 ;
                                     00C4   198 ;	THE CHANNELS ARE RELEASED AND AN ATTEMPT IS MADE TO REMOVE THE NEXT
                                     00C4   199 ;	WAITING DRIVER PROCESS FROM EACH CHANNEL QUEUE. IF A DRIVER PROCESS
                                     00C4   200 ;	IS WAITING, THEN THE CHANNEL IS ASSIGNED TO THAT DRIVER PROCESS AND
                                     00C4   201 ;	IT IS CALLED VIA A JSB TO ITS CHANNEL WAIT RETURN ADDRESS. WHEN THE
                                     00C4   202 ;	CALLED DRIVER PROCESS RETURNS, A RETURN IS MADE TO THE DRIVER PROCESS
                                     00C4   203 ;	THAT RELEASED THE CHANNEL. IF THERE IS NO DRIVER PROCESS WAITING FOR
                                     00C4   204 ;	THE CHANNEL, THEN THE CHANNEL STATUS IS SET TO IDLE.
                                     00C4   205 ;
                                     00C4   206 ;	R3 AND R4 ARE PRESERVED ACROSS CALL.
                                     00C4   207 ;-
                                     00C4   208  
                                     00C4   209 	.ENABL	LSB
                                     00C4   210 IOC$RELSCHAN::				;RELEASE SECONDARY I/O CHANNEL
            50         20 A5     D0  00C4   211 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            50         10 A0     D0  00C8   212 	MOVL	CRB$L_LINK(R0),R0	;GET ADDRESS OF SECONARY CRB
                          10     11  00CC   213 	BRB	20$			;
                                     00CE   214 IOC$RELCHAN::				;RELEASE I/O CHANNEL
            50         20 A5     D0  00CE   215 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            50         10 A0     D0  00D2   216 	MOVL	CRB$L_LINK(R0),R0	;GET ADDRESS OF SECONDARY CRB
                          02     13  00D6   217 	BEQL	10$			;IF EQL NONE
                          04     10  00D8   218 	BSBB	20$			;RELEASE SECONDARY CHANNEL
            50         20 A5     D0  00DA   219 10$:	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
         0E A0            00     E1  00DE   220 20$:	BBC	#CRB$V_BSY,CRB$B_MASK(R0),30$ ;IF CLR, THEN CHANNEL NOT BUSY
                          25         00E2       
            51         1C A0     D0  00E3   221 	MOVL	CRB$L_INTD+VEC$L_IDB(R0),R1 ;GET ADDRESS OF IDB
         04 A1            55     D1  00E7   222 	CMPL	R5,IDB$L_OWNER(R1)	;DRIVER PROCESS OWN CHANNEL?
                          1B     12  00EB   223 	BNEQ	30$			;IF NEQ NO
            52         00 B0     0F  00ED   224 	REMQUE	@CRB$L_WQFL(R0),R2	;GET ADDRESS OF NEXT DRIVER FORK BLOCK
                          16     1D  00F1   225 	BVS	40$			;IF VS NO DRIVER PROCESS WAITING
                          38     BB  00F3   226 	PUSHR	#^M<R3,R4,R5>		;SAVE CONTEXT OF CURRENT DRIVER PROCESS
            55            52     D0  00F5   227 	MOVL	R2,R5			;COPY ADDRESS OF DRIVER PROCESS FORK BLOCK
            53         10 A5     D0  00F8   228 	MOVL	UCB$L_FR3(R5),R3	;LOAD WAITING DRIVER PROCESS CONTEXT
            54            61     D0  00FC   229 	MOVL	IDB$L_CSR(R1),R4	;SET ASSIGNED CHANNEL CSR ADDRESS
         04 A1            55     D0  00FF   230 	MOVL	R5,IDB$L_OWNER(R1)	;SET ADDRESS OF OWNER PROCESS UCB
                       0C B5     16  0103   231 	JSB	@UCB$L_FPC(R5)		;CALL DRIVER AT CHANNEL WAIT RETURN ADDRESS
                          38     BA  0106   232 	POPR	#^M<R3,R4,R5>		;RESTORE PREVIOUS DRIVER PROCESS CONTEXT
                                 05  0108   233 30$:	RSB				;
                       04 A1     D4  0109   234 40$:	CLRL	IDB$L_OWNER(R1)		;CLEAR OWNER UNIT UCB ADDRESS
         0E A0            01     8A  010C   235 	BICB	#CRB$M_BSY,CRB$B_MASK(R0) ;CLEAR CHANNEL BUSY
                                 05  0110   236 	RSB				;
                                     0111   237 	.DSABL	LSB
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   7
01              REQUEST I/O CHANNEL                                                                                              (1)

                                     0111   239 	.SBTTL	REQUEST I/O CHANNEL
                                     0111   240 ;+
                                     0111   241 ; IOC$REQPCHANH - REQUEST PRIMARY I/O CHANNEL HIGH PRIORITY
                                     0111   242 ; IOC$REQSCHANH - REQUEST SECONDARY I/O CHANNEL HIGH PRIORITY
                                     0111   243 ; IOC$REQPCHANL - REQUEST PRIMARY I/O CHANNEL LOW PRIORITY
                                     0111   244 ; IOC$REQSCHANL - REQUEST SECONDARY I/O CHANNEL LOW PRIORITY
                                     0111   245 ;
                                     0111   246 ; THESE ROUTINES ARE CALLED TO REQUEST AN I/O CHANNEL TO PERFORM AN I/O
                                     0111   247 ; OPERATION ON.
                                     0111   248 ;
                                     0111   249 ; INPUTS:
                                     0111   250 ;
                                     0111   251 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     0111   252 ;	04(SP) = RETURN ADDRESS OF CALLER'S CALLER.
                                     0111   253 ;
                                     0111   254 ; OUTPUTS:
                                     0111   255 ;
                                     0111   256 ;	IF THE SPECIFIED I/O CHANNEL IS IDLE, THEN IT IS IMMEDIATELY
                                     0111   257 ;	ASSIGNED TO THE CURRENT DRIVER PROCESS. ELSE THE DRIVER PROCESS
                                     0111   258 ;	CONTEXT IS SAVED IN ITS FORK BLOCK, THE FORK BLOCK IS INSERTED
                                     0111   259 ;	IN THE CHANNEL WAIT QUEUE, AND A RETURN TO THE DRIVER PROCESS'
                                     0111   260 ;	CALLER IS EXECUTED.
                                     0111   261 ;
                                     0111   262 ;	WHEN THE CHANNEL IS ASSIGNED, THE CSR ADDRESS OF THE ASSIGNED
                                     0111   263 ;	CONTROLLER IS RETURNED TO THE CALLER IN REGISTER R4.
                                     0111   264 ;
                                     0111   265 ;	R3 IS PRESERVED ACROSS CALL.
                                     0111   266 ;-
                                     0111   267  
                                     0111   268 	.ENABL	LSB
                                     0111   269 IOC$REQSCHANH::				;REQUEST SECONDARY I/O CHANNEL HIGH PRIORITY
            50         20 A5     D0  0111   270 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            50         10 A0     D0  0115   271 	MOVL	CRB$L_LINK(R0),R0	;GET ADDRESS OF SECONDARY CRB
                          0E     11  0119   272 	BRB	10$			;
                                     011B   273 IOC$REQSCHANL::				;REQUEST SECONDARY I/O CHANNEL LOW PRIORITY
            50         20 A5     D0  011B   274 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            50         10 A0     D0  011F   275 	MOVL	CRB$L_LINK(R0),R0	;GET ADDRESS OF SECONDARY CRB
                          0D     11  0123   276 	BRB	20$			;
                                     0125   277 IOC$REQPCHANH::				;REQUEST PRIMARY I/O CHANNEL HIGH PRIORITY
            50         20 A5     D0  0125   278 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            52            50     D0  0129   279 10$:	MOVL	R0,R2			;SET ADDDRESS OF WAIT QUEUE LISTHEAD
                          08     11  012C   280 	BRB	30$			;
                                     012E   281 IOC$REQPCHANL::				;REQUEST PRIMARY I/O CHANNEL LOW PRIORITY
            50         20 A5     D0  012E   282 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF PRIMARY CRB
            52         04 A0     D0  0132   283 20$:	MOVL	CRB$L_WQBL(R0),R2	;GET ADDRESS OF LAST ENTRY IN QUEUE
            51         1C A0     D0  0136   284 30$:	MOVL	CRB$L_INTD+VEC$L_IDB(R0),R1 ;GET ADDRESS OF IDB
         0E A0            00     E2  013A   285 	BBSS	#CRB$V_BSY,CRB$B_MASK(R0),40$ ;IF SET, THEN CHANNEL BUSY
                          08         013E       
            54            61     D0  013F   286 	MOVL	IDB$L_CSR(R1),R4	;SET ASSIGNED CHANNEL CSR ADDRESS
         04 A1            55     D0  0142   287 	MOVL	R5,IDB$L_OWNER(R1)	;SET OWNER UCB ADDRESS
                                 05  0146   288 	RSB				;
         10 A5            53     D0  0147   289 40$:	MOVL	R3,UCB$L_FR3(R5)	;SAVE R3 IN FORK BLOCK
                       0C A5   8ED0  014B   290 	POPL	UCB$L_FPC(R5)		;SAVE CHANNEL WAIT RETURN ADDRESS
            62            65     0E  014F   291 	INSQUE	UCB$L_FQFL(R5),CRB$L_WQFL(R2) ;INSERT DRIVER PROCESS IN CHANNEL WAIT QUEUE
         04 A1            55     D1  0152   292 	CMPL	R5,IDB$L_OWNER(R1)	;CURRENT DRIVER PROCESS OWNER?
                          3F     13  0156   293 	BEQL	RELEASE			;IF EQL YES - RELEASE CHANNELS
                                 05  0158   294 	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   8
01              REQUEST I/O CHANNEL                                                                                              (1)

                                     0159   295 	.DSABL	LSB
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page   9
01              I/O REQUEST COMPLETION PROCESSING                                                                                (1)

                                     0159   297 	.SBTTL	I/O REQUEST COMPLETION PROCESSING
                                     0159   298 ;+
                                     0159   299 ; IOC$REQCOM - I/O REQUEST COMPLETE
                                     0159   300 ;
                                     0159   301 ; THIS ROUTINE IS ENTERED WHEN AN I/O OPERATION IS COMPLETED ON A
                                     0159   302 ; DEVICE UNIT. THE FINAL I/O STATUS IS STORED IN THE ASSOCIATED I/O
                                     0159   303 ; PACKET AND THE PACKET IS INSERTED IN THE I/O FINISH QUEUE FOR
                                     0159   304 ; I/O POST PROCESSING. DEVICE UNIT BUSY IS CLEARED AND AN ATTEMPT
                                     0159   305 ; IS MADE TO START ANOTHER I/O REQUEST ON THE DEVICE UNIT.
                                     0159   306 ;
                                     0159   307 ; INPUTS:
                                     0159   308 ;
                                     0159   309 ;	R0 = FIRST LONGWORD OF I/O STATUS.
                                     0159   310 ;	R1 = SECOND LONGWORD OF I/O STATUS.
                                     0159   311 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     0159   312 ;
                                     0159   313 ; OUTPUTS:
                                     0159   314 ;
                                     0159   315 ;	THE I/O PACKET IS INSERTED IN THE I/O POST PROCESSING QUEUE
                                     0159   316 ;	AND DEVICE UNIT BUSY IS CLEARED. A SOFTWARE INTERRUPT IS
                                     0159   317 ;	REQUESTED TO INITIATE I/O POST PROCESSING.
                                     0159   318 ;-
                                     0159   319  
                                     0159   320 IOC$REQCOM::				;I/O DONE PROCESSING
            53         4C A5     D0  0159   321 	MOVL	UCB$L_IRP(R5),R3	;GET ADDRESS OF I/O PACKET
         34 A3            50     7D  015D   322 	MOVQ	R0,IRP$L_MEDIA(R3)	;STORE FINAL I/O STATUS
                       60 A5     D6  0161   323 	INCL	UCB$L_OPCNT(R5)		;INCREMENT OPERATIONS COMPLETED
                                     0164   324  
                                     0164   325 	.IF DF	CA$_MEASURE_IOT
                                     0164   326  
                          FE99'  30  0164   327 	BSBW	PMS$END_IO		;INSERT END OF I/O TRANSACTION MESSAGE
                                     0167   328  
                                     0167   329 	.ENDC
                                     0167   330  
       0000'DF            63     0E  0167   331 	INSQUE	(R3),@W^IOC$GL_PSBL	;INSERT PACKET IN POST PROCESS QUEUE
                          03     12  016C   332 	BNEQ	10$			;IF NEQ NOT FIRST ENTRY IN QUEUE
                                     016E   333 	SOFTINT	#IPL$_IOPOST		;INITIATE SOFTWARE INTERRUPT
         58 A5            02     E5  0171   334 10$:	BBCC	#UCB$V_ERLOGIP,UCB$W_STS(R5),20$ ;IF CLR, ERROR LOG NOT IN PROGRESS
                          15         0175       
            52         78 A5     D0  0176   335 	MOVL	UCB$L_EMB(R5),R2	;GET ADDRESS OF ERROR MESSAGE BUFFER
         10 A2         5A A5     B0  017A   336 	MOVW	UCB$W_DEVSTS(R5),EMB$W_DV_DEVSTS(R2) ;INSERT FINAL DEVICE STATUS
         06 A2         70 A5     B0  017F   337 	MOVW	UCB$B_ERTCNT(R5),EMB$B_DV_ERTCNT(R2) ;INSERT FINAL ERROR COUNTERS
         08 A2            50     7D  0184   338 	MOVQ	R0,EMB$Q_DV_IOSB(R2)	;INSERT FINAL I/O STATUS
                          FE75'  30  0188   339 	BSBW	ERL$RELEASEMB		;RELEASE ERROR MESSAGE BUFFER
            53         40 B5     0F  018B   340 20$:	REMQUE	@UCB$L_IOQFL(R5),R3	;REMOVE I/O PACKET FROM DEVICE UNIT QUEUE
                          09     1C  018F   341 	BVC	IOC$INITIATE		;IF VC INITIATE NEXT FUNCTION
         58 A5       0100 8F     AA  0191   342 	BICW	#UCB$M_BSY,UCB$W_STS(R5) ;CLEAR UNIT BUSY
                                     0197   343 RELEASE:				;RELEASE ALL CHANNELS
                          FF34   31  0197   344 	BRW	IOC$RELCHAN		;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  10
01              INITIATE I/O FUNCTION ON DEVICE                                                                                  (1)

                                     019A   346 	.SBTTL	INITIATE I/O FUNCTION ON DEVICE
                                     019A   347 ;+
                                     019A   348 ; IOC$INITIATE - INITIATE NEXT FUNCTION ON DEVICE
                                     019A   349 ;
                                     019A   350 ; THIS ROUTINE IS CALLED TO INITIATE THE NEXT FUNCTION ON A DEVICE BY CLEARING
                                     019A   351 ; STATUS BITS, SETTING THE OPERATION START TIME IF A DIAGNOSTIC BUFFER IS
                                     019A   352 ; SPECIFIED, AND CALLING THE DRIVER AT ITS START I/O ENTRY POINT.
                                     019A   353 ;
                                     019A   354 ; INPUTS:
                                     019A   355 ;
                                     019A   356 ;	R3 = ADDRESS OF I/O REQUEST PACKET.
                                     019A   357 ;	R5 = DEVICE UNIT UCB ADDRESS.
                                     019A   358 ;
                                     019A   359 ; OUTPUTS:
                                     019A   360 ;
                                     019A   361 ;	CANCEL I/O, POWERFAIL, AND TIME OUT STATUS BITS ARE CLEARED, THE
                                     019A   362 ;	CURRENT SYSTEM TIME IS FILLED INTO THE INTERNAL DIAGNOSTIC BUFFER
                                     019A   363 ;	IF ONE IS SPECIFIED, AND THE DRIVER IS CALLED AT ITS START I/O ENTRY
                                     019A   364 ;	POINT.
                                     019A   365 ;-
                                     019A   366  
                                     019A   367 IOC$INITIATE::				;INITIATE I/O FUNCTION
         4C A5            53     D0  019A   368 	MOVL	R3,UCB$L_IRP(R5)	;SAVE I/O PACKET ADDRESS
                                     019E   369  
                                     019E   370 	.IF DF	CA$_MEASURE_IOT
                                     019E   371  
                          FE5F'  30  019E   372 	BSBW	PMS$START_IO		;INSERT START OF I/O TRANSACTION MESSAGE
                                     01A1   373  
                                     01A1   374 	.ENDC
                                     01A1   375  
         68 A5         2C A3     7D  01A1   376 	MOVQ	IRP$L_SVAPTE(R3),UCB$L_SVAPTE(R5) ;COPY TRANSFER PARAMETERS
         58 A5       0068 8F     AA  01A6   377 	BICW	#UCB$M_CANCEL!-		;CLEAR CANCEL I/O,
                                     01AC   378 		UCB$M_POWER!-		;POWERFAIL, AND
                                     01AC   379 		UCB$M_TIMOUT,UCB$W_STS(R5) ;TIMEOUT STATUS BITS
         2A A3            07     E1  01AC   380 	BBC	#IRP$V_DIAGBUF,IRP$W_STS(R3),10$ ;IF CLR, NO DIAGNOSTIC BUFFER
                          0B         01B0       
            50         44 B3     D0  01B1   381 	MOVL	@IRP$L_DIAGBUF(R3),R0	;GET ADDRESS OF DIAGNOSTIC BUFFER DATA AREA
            60   00000000'EF     7D  01B5   382 	MOVQ	EXE$GQ_SYSTIME,(R0)	;INSERT I/O OPERATION START TIME
            50         24 A5     D0  01BC   383 10$:	MOVL	UCB$L_DDB(R5),R0	;GET ADDRESS OF DEVICE DATA BLOCK
            50         0C A0     D0  01C0   384 	MOVL	DDB$L_DDT(R0),R0	;GET ADDRESS OF DRIVER DISPATCH TABLE
         58 A5            0B     E2  01C4   385 	BBSS	#UCB$V_VALID,UCB$W_STS(R5),20$ ; FORCE VOLUME VALID
                          00         01C8       
                                     01C9   386 20$:					;
                       00 B0     17  01C9   387 	JMP	@DDT$L_START(R0)	;START I/O OPERATION
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  11
01              RELEASE BUFFERED DATAPATH                                                                                        (1)

                                     01CC   389 	.SBTTL	RELEASE BUFFERED DATAPATH
                                     01CC   390 ;+
                                     01CC   391 ; IOC$RELDATAP - RELEASE BUFFERED DATAPATH
                                     01CC   392 ;
                                     01CC   393 ; THIS ROUTINE IS CALLED AT THE END OF AN I/O OPERATION TO RELEASE A UNIBUS
                                     01CC   394 ; ADAPTER BUFFERED DATAPATH.
                                     01CC   395 ;
                                     01CC   396 ; INPUTS:
                                     01CC   397 ;
                                     01CC   398 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     01CC   399 ;
                                     01CC   400 ; OUTPUTS:
                                     01CC   401 ;
                                     01CC   402 ;	IF THE BUFFERED DATAPATH IS PERMANENTLY ASSIGNED TO THE ASSOCIATED
                                     01CC   403 ;	I/O CHANNEL, THEN CONTROL IS IMMEDIATELY RETURNED TO THE CALLER.
                                     01CC   404 ;	ELSE THE BUFFERED DATAPATH IS RELEASED AND AN ATTEMPT IS MADE TO
                                     01CC   405 ;	REMOVE THE NEXT WAITING DRIVER PROCESS FROM THE DATAPATH WAIT QUEUE.
                                     01CC   406 ;	IF A DRIVER PROCESS IS WAITING, THEN THE BUFFERED DATAPATH IS
                                     01CC   407 ;	ASSIGNED TO THE ASSOCIATED I/O CHANNEL AND THE DRIVER IS CALLED
                                     01CC   408 ;	VIA A JSB TO ITS BUFFERED DATAPATH WAIT RETURN ADDRESS.
                                     01CC   409 ;-
                                     01CC   410  
                                     01CC   411 IOC$RELDATAP::				;RELEASE BUFFERED DATAPATH
            50         20 A5     D0  01CC   412 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF CRB
            51         28 A0     D0  01D0   413 	MOVL	CRB$L_INTD+VEC$L_ADP(R0),R1 ;GET ADDRESS OF ADP
            52         27 A0     98  01D4   414 	CVTBL	CRB$L_INTD+VEC$B_DATAPATH(R0),R2 ;GET DATAPATH NUMBER
                          1C     19  01D8   415 	BLSS	10$			;IF LSS PERMANENT ASSIGNMENT
            50         0C B1     0F  01DA   416 	REMQUE	@ADP$L_DPQFL(R1),R0	;GET ADDRESS OF NEXT DRIVER FORK BLOCK
                          17     1D  01DE   417 	BVS	20$			;IF VS NO DRIVER PROCESS WAITING
                          38     BB  01E0   418 	PUSHR	#^M<R3,R4,R5>		;SAVE CONTEXT OF CURRENT DRIVER PROCESS
            55            50     D0  01E2   419 	MOVL	R0,R5			;COPY ADDRESS OF DRIVER PROCESS FORK BLOCK
            51         20 A5     D0  01E5   420 	MOVL	UCB$L_CRB(R5),R1	;GET ADDRESS OF CRB
         27 A1            52     90  01E9   421 	MOVB	R2,CRB$L_INTD+VEC$B_DATAPATH(R1) ;SET DATAPATH NUMBER
            53         10 A5     7D  01ED   422 	MOVQ	UCB$L_FR3(R5),R3	;RESTORE DRIVER PROCESS CONTEXT
                       0C B5     16  01F1   423 	JSB	@UCB$L_FPC(R5)		;CALL DRIVER AT DATAPATH WAIT RETURN ADDRESS
                          38     BA  01F4   424 	POPR	#^M<R3,R4,R5>		;RESTORE PREVIOUS DRIVER PROCESS CONTEXT
                                 05  01F6   425 10$:	RSB				;
         1C A1            52     E3  01F7   426 20$:	BBCS	R2,ADP$W_DPBITMAP(R1),10$ ;SET DATAPATH BIT AND EXIT
                          FA         01FB       
                                     01FC   427 	BUG_CHECK INCONSTATE		;INCONSISTENT STATE
                                 05  0200   428 	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  12
01              REQUEST BUFFERED DATAPATH                                                                                        (1)

                                     0201   430 	.SBTTL	REQUEST BUFFERED DATAPATH
                                     0201   431 ;+
                                     0201   432 ; IOC$REQDATAP - REQUEST BUFFERED DATAPATH
                                     0201   433 ;
                                     0201   434 ; THIS ROUTINE IS CALLED TO REQUEST A UNIBUS ADAPTER BUFFERED DATAPATH TO
                                     0201   435 ; PERFORM AN I/O OPERATION ON.
                                     0201   436 ;
                                     0201   437 ; INPUTS:
                                     0201   438 ;
                                     0201   439 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     0201   440 ;	04(SP) = RETURN ADDRESS OF CALLER'S CALLER.
                                     0201   441 ;
                                     0201   442 ;	IT IS ASSUMED THAT THE CALLER OWNS THE I/O CHANNEL ON WHICH THE
                                     0201   443 ;	TRANSFER IS TO OCCUR.
                                     0201   444 ;
                                     0201   445 ; OUTPUTS:
                                     0201   446 ;
                                     0201   447 ;	IF A BUFFERED DATAPATH HAS BEEN PERMANENTLY ASSIGNED TO THE ASSOCIATED
                                     0201   448 ;	I/O CHANNEL, THEN CONTROL IS IMMEDIATELY RETURNED TO THE CALLER.
                                     0201   449 ;	ELSE AN ATTEMPT IS MADE TO FIND A FREE BUFFERED DATAPATH. IF A FREE
                                     0201   450 ;	BUFFERED DATAPATH IS FOUND, THEN ITS NUMBER IS STORED IN THE ASSO-
                                     0201   451 ;	CIATED CHANNEL REQUEST BLOCK AND CONTROL IS RETURNED TO THE CALLER.
                                     0201   452 ;	ELSE THE DRIVER PROCESS CONTEXT IS SAVED IN ITS FORK BLOCK, THE FORK
                                     0201   453 ;	BLOCK IS INSERTED IN THE BUFFERED DATAPATH WAIT QUEUE, AND A RETURN
                                     0201   454 ;	TO THE DRIVER PROCESS' CALLER IS EXECUTED.
                                     0201   455 ;-
                                     0201   456  
                                     0201   457 IOC$REQDATAP::				;REQUEST BUFFERED DATAPATH
            50         20 A5     D0  0201   458 	MOVL	UCB$L_CRB(R5),R0	;GET ADDRESS OF CRB
         27 A0            07     E0  0205   459 	BBS	#VEC$V_PATHLOCK,CRB$L_INTD+VEC$B_DATAPATH(R0),20$ ;IF SET, PERMANENT
                          21         0209       
            51         28 A0     D0  020A   460 	MOVL	CRB$L_INTD+VEC$L_ADP(R0),R1 ;GET ADDRESS OF ADP
            10            00     EA  020E   461 	FFS	#0,#ADP$C_NUMDATAP,ADP$W_DPBITMAP(R1),R2 ;SEARCH FOR FREE DATAPATH
            52         1C A1         0211       
                          09     13  0214   462 	BEQL	10$			;IF EQL NONE FOUND
         27 A0            52     90  0216   463 	MOVB	R2,CRB$L_INTD+VEC$B_DATAPATH(R0) ;STORE ASSIGNED DATAPATH NUMBER
         1C A1            52     E4  021A   464 	BBSC	R2,ADP$W_DPBITMAP(R1),20$ ;CLEAR DATAPATH BIT AND EXIT
                          0C         021E       
         10 A5            53     7D  021F   465 10$:	MOVQ	R3,UCB$L_FR3(R5)	;SAVE DRIVER PROCESS CONTEXT
                       0C A5   8ED0  0223   466 	POPL	UCB$L_FPC(R5)		;SAVE DATAPATH WAIT RETURN ADDRESS
         10 B1            65     0E  0227   467 	INSQUE	UCB$L_FQFL(R5),@ADP$L_DPQBL(R1) ;INSERT DRIVER PROCESS IN DATAPATH WAIT QUEU
                                 05  022B   468 20$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  13
01              RELEASE UNIBUS MAP REGISTERS                                                                                     (1)

                                     022C   470 	.SBTTL	RELEASE UNIBUS MAP REGISTERS
                                     022C   471 ;+
                                     022C   472 ; IOC$RELMAPREG - RELEASE UNIBUS MAP REGISTERS
                                     022C   473 ;
                                     022C   474 ; THIS ROUTINE IS CALLED TO RELEASE UNIBUS MAP REGISTERS THAT WERE PREVIOUSLY
                                     022C   475 ; ASSIGNED FOR AN I/O TRANSFER.
                                     022C   476 ;
                                     022C   477 ; INPUTS:
                                     022C   478 ;
                                     022C   479 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     022C   480 ;
                                     022C   481 ;	IT IS ASSUMED THAT THE CALLER STILL OWNS THE I/O CHANNEL ON WHICH
                                     022C   482 ;	THE TRANSFER TOOK PLACE.
                                     022C   483 ;
                                     022C   484 ; OUTPUTS:
                                     022C   485 ;
                                     022C   486 ;	IF THE MAPPING REGISTERS HAVE BEEN PERMANENTLY ASSIGNED TO THE ASSO-
                                     022C   487 ;	CIATED I/O CHANNEL, THEN CONTROL IS IMMEDIATELY RETURNED TO THE CALLER.
                                     022C   488 ;	ELSE THE MAPPING REGISTERS ARE RELEASED AND AN ATTEMPT IS MADE TO
                                     022C   489 ;	REMOVE THE NEXT DRIVER PROCESS FROM THE MAP REGISTER WAIT QUEUE. IF
                                     022C   490 ;	A DRIVER PROCESS IS WAITING, THEN IT IS REMOVED FROM THE MAP REGISTER
                                     022C   491 ;	WAIT QUEUE AND AN ATTEMPT IS MADE TO ASSIGN THE REQUESTED NUMBER OF
                                     022C   492 ;	CONTIGUOUS MAP REGISTERS TO THE TRANSFER. IF THE ALLOCATION IS SUCCESS-
                                     022C   493 ;	FUL, THEN THE DRIVER IS CALLED VIA A JSB TO ITS MAP REGISTER WAIT
                                     022C   494 ;	RETURN ADDRESS. WHEN THE DRIVER RETURNS ANOTHER ATTEMPT WILL BE MADE
                                     022C   495 ;	TO ALLOCATE MAP REGISTERS TO THE NEXT DRIVER PROCESS IN THE MAP REGISTER
                                     022C   496 ;	WAIT QUEUE. THE PROCESS OF ATTEMPTING TO ALLOCATE REGISTERS TO WAIT-
                                     022C   497 ;	ING DRIVER PROCESSES IS CONTINUED UNTIL EITHER THERE ARE NO DRIVER
                                     022C   498 ;	PROCESSES WAITING OR AN ALLOCATION FAILURE OCCURS. IN THE CASE OF
                                     022C   499 ;	AN ALLOCATION FAILURE THE DRIVER PROCESS IS REINSERTED AT THE FRONT
                                     022C   500 ;	OF THE MAP REGISTER WAIT QUEUE.
                                     022C   501 ;-
                                     022C   502  
                                     022C   503 IOC$RELMAPREG::				;RELEASE UNIBUS MAP REGISTERS
            51         20 A5     D0  022C   504 	MOVL	UCB$L_CRB(R5),R1	;GET ADDRESS OF CRB
         24 A1            0F     E0  0230   505 	BBS	#VEC$V_MAPLOCK,CRB$L_INTD+VEC$W_MAPREG(R1),40$ ;IF SET, PERMANENT
                          30         0234       
                     0078 8F     BB  0235   506 	PUSHR	#^M<R3,R4,R5,R6>	;SAVE REGISTERS
            52         28 A1     D0  0239   507 	MOVL	CRB$L_INTD+VEC$L_ADP(R1),R2 ;GET ADDRESS OF ADP
            56            52     D0  023D   508 	MOVL	R2,R6			;SAVE ADDRESS OF ADP
            54         24 A1     3C  0240   509 	MOVZWL	CRB$L_INTD+VEC$W_MAPREG(R1),R4 ;GET STARTING MAP REGISTER NUMBER
            50            00     D2  0244   510 	MCOML	#0,R0			;SET ALTER PATTERN
                          2F     10  0247   511 	BSBB	ALTERMAP		;ALTER MAP REGISTER BITMAP
            55         14 B6     0F  0249   512 10$:	REMQUE	@ADP$L_MRQFL(R6),R5	;GET ADDRESS OF NEXT DRIVER FORK BLOCK
                          12     1D  024D   513 	BVS	30$			;IF VS NO DRIVER PROCESS WAITING
                          45     10  024F   514 	BSBB	SEARCHMAP		;SEARCH MAP REGISTER BITMAP AND ALLOCATE
            09            50     E9  0251   515 	BLBC	R0,20$			;IF LBC ALLOCATION FAILURE
            53         10 A5     7D  0254   516 	MOVQ	UCB$L_FR3(R5),R3	;RESTORE DRIVE PROCESS CONTEXT
                       0C B5     16  0258   517 	JSB	@UCB$L_FPC(R5)		;CALL DRIVER AT MAP REGISTER WAIT RETURN ADDRESS
                          EC     11  025B   518 	BRB	10$			;
         14 A6            65     0E  025D   519 20$:	INSQUE	UCB$L_FQFL(R5),ADP$L_MRQFL(R6) ;REINSERT DRIVER PROCESS AT FRONT OF QUEU
                     0078 8F     BA  0261   520 30$:	POPR	#^M<R3,R4,R5,R6>	;RESTORE REGISTERS
                                 05  0265   521 40$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  14
01              REQUEST UNIBUS MAP REGISTERS                                                                                     (1)

                                     0266   523 	.SBTTL	REQUEST UNIBUS MAP REGISTERS
                                     0266   524 ;+
                                     0266   525 ; IOC$REQMAPREG - REQUEST UNIBUS MAP REGISTERS
                                     0266   526 ;
                                     0266   527 ; THIS ROUTINE IS CALLED TO REQUEST UNIBUS MAP REGISTERS TO PERFORM AN
                                     0266   528 ; I/O TRANSFER.
                                     0266   529 ;
                                     0266   530 ; INPUTS:
                                     0266   531 ;
                                     0266   532 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     0266   533 ;	04(SP) = RETURN ADDRESS OF CALLER'S CALLER.
                                     0266   534 ;
                                     0266   535 ;	IT IS ASSUMED THAT THE CALLER OWNS THE I/O CHANNEL ON WHICH THE
                                     0266   536 ;	TRANSFER IS TO OCCUR ON.
                                     0266   537 ;
                                     0266   538 ; OUTPUTS:
                                     0266   539 ;
                                     0266   540 ;	IF MAP REGISTERS HAVE BEEN PERMANENTLY ASSIGNED TO THE ASSOCIATED
                                     0266   541 ;	I/O CHANNEL, THEN CONTROL IS IMMEDIATELY RETURNED TO THE CALLER.
                                     0266   542 ;	ELSE AN ATTEMPT IS MADE TO ALLOCATE THE REQUESTED NUMBER OF MAP REG-
                                     0266   543 ;	ISTERS. IF SUFFICIENT CONTIGUOUS MAP REGISTERS ARE FOUND, THEN THEY
                                     0266   544 ;	ARE ASSIGNED TO THE ASSOCIATED I/O CHANNEL AND CONTROL IS RETURNED
                                     0266   545 ;	TO THE CALLER. ELSE THE DRIVER PROCESS CONTEXT IS SAVED IN ITS FORK
                                     0266   546 ;	BLOCK, THE FORK BLOCK IS INSERTED IN THE MAP REGISTER WAIT QUEUE,
                                     0266   547 ;	AND A RETURN TO THE DRIVER PROCESS' CALLER IS EXECUTED.
                                     0266   548 ;-
                                     0266   549  
                                     0266   550 IOC$REQMAPREG::				;REQUEST UNIBUS MAP REGISTERS
                          2E     10  0266   551 	BSBB	SEARCHMAP		;SEARCH MAP REGISTER BITMAP AND ALLOCATE
            0C            50     E8  0268   552 	BLBS	R0,10$			;IF LBS SUCCESSFUL ALLOCATION
         10 A5            53     7D  026B   553 	MOVQ	R3,UCB$L_FR3(R5)	;SAVE DRIVER PROCESS CONTEXT
                       0C A5   8ED0  026F   554 	POPL	UCB$L_FPC(R5)		;SAVE MAP REGISTER WAIT RETURN ADDRESS
         18 B2            65     0E  0273   555 	INSQUE	UCB$L_FQFL(R5),@ADP$L_MRQBL(R2) ;INSERT PROCESS IN MAP REGISTER WAIT QUEUE
                                 05  0277   556 10$:	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  15
01              LOCAL SUBROUTINE ALTER MAP REGISTER BITMAP                                                                       (1)

                                     0278   558 	.SBTTL	LOCAL SUBROUTINE ALTER MAP REGISTER BITMAP
                                     0278   559 ;
                                     0278   560 ; ALTER MAP REGISTER BITMAP
                                     0278   561 ;
                                     0278   562  
                                     0278   563 ALTERMAP:				;ALTER MAP REGISTER BIT MAP
            53         26 A1     9A  0278   564 	MOVZBL	CRB$L_INTD+VEC$B_NUMREG(R1),R3 ;GET NUMBER OF BITS TO ALTER
            53            20     D1  027C   565 10$:	CMPL	#32,R3			;MORE THAN LONGWORD LEFT?
                          0E     18  027F   566 	BGEQ	20$			;IF GEQ NO
            54            50     F0  0281   567 	INSV	R0,R4,#32,ADP$W_MRBITMAP(R2) ;ALTER BITMAP WITH SUPPLIED PATTERN
         1E A2            20         0284       
            54            20     C0  0287   568 	ADDL	#32,R4			;UPDATE STARTING BIT POSITION
            53            20     C2  028A   569 	SUBL	#32,R3			;REDUCE NUMBER OF BITS TO ALTER
                          ED     11  028D   570 	BRB	10$			;
            54            50     F0  028F   571 20$:	INSV	R0,R4,R3,ADP$W_MRBITMAP(R2) ;ALTER BITMAP WITH SUPPLIED PATTERN
         1E A2            53         0292       
                                 05  0295   572 	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  16
01              LOCAL SUBROUTINE SEARCH MAP REGISTER BITMAP AND                                                                  (1)

                                     0296   574 	.SBTTL	LOCAL SUBROUTINE SEARCH MAP REGISTER BITMAP AND ALLOCATE MAP REGISTERS
                                     0296   575 ;
                                     0296   576 ; SEARCH MAP REGISTER BITMAP AND ALLOCATE MAP REGISTERS
                                     0296   577 ;
                                     0296   578  
                                     0296   579 SEARCHMAP:				;SEARCH MAP REGISTER BITMAP AND ALLOCATE MAP REGISTERS
                          38     BB  0296   580 	PUSHR	#^M<R3,R4,R5>		;SAVE REGISTERS
                          50     D4  0298   581 	CLRL	R0			;ASSUME ALLOCATION FAILURE
            51         20 A5     D0  029A   582 	MOVL	UCB$L_CRB(R5),R1	;GET ADDRESS OF CRB
            52         28 A1     D0  029E   583 	MOVL	CRB$L_INTD+VEC$L_ADP(R1),R2 ;GET ADDRESS OF ADP
         24 A1            0F     E0  02A2   584 	BBS	#VEC$V_MAPLOCK,CRB$L_INTD+VEC$W_MAPREG(R1),40$ ;IF SET, PERMANENT
                          4C         02A6       
            53         6E A5     3C  02A7   585 	MOVZWL	UCB$W_BCNT(R5),R3	;GET TRANSFER BYTE COUNT
            54         6C A5     3C  02AB   586 	MOVZWL	UCB$W_BOFF(R5),R4	;GET BYTE OFFSET IN PAGE
            53       03FF C344   9E  02AF   587 	MOVAB	^X3FF(R3)[R4],R3	;CALCULATE HIGHEST RELATIVE BYTE AND ROUND
            53         F7 8F     78  02B5   588 	ASHL	#-9,R3,R3		;CALCULATE NUMBER OF MAP REGISTERS REQUIRED
                          53         02B9       
         26 A1            53     90  02BA   589 	MOVB	R3,CRB$L_INTD+VEC$B_NUMREG(R1) ;SET NUMBER OF MAP REGISTERS ALLOCATED
                          54     D4  02BE   590 	CLRL	R4			;CLEAR STARTING BIT POSITION
            54            53     C1  02C0   591 10$:	ADDL3	R3,R4,R5		;CALCULATE HIGHEST BIT IN REQUIRED SCAN
                          55         02C3       
       01F0 8F            55     B1  02C4   592 	CMPW	R5,#496			;BEYOND END OF ALLOCATION BITMAP?
                          2A     14  02C9   593 	BGTR	50$			;IF GTR YES
            20            54     EA  02CB   594 	FFS	R4,#32,ADP$W_MRBITMAP(R2),R4 ;FIND A SET BIT
            54         1E A2         02CE       
                          ED     13  02D1   595 	BEQL	10$			;IF EQL BIT NOT FOUND
            54            53     C1  02D3   596 	ADDL3	R3,R4,R5		;CALCULATE HIGH BIT FOR SUCCESSFUL ALLOCATION
                          55         02D6       
         24 A1            54     B0  02D7   597 	MOVW	R4,CRB$L_INTD+VEC$W_MAPREG(R1) ;SAVE STARTING BIT NUMBER
            20            54     EB  02DB   598 20$:	FFC	R4,#32,ADP$W_MRBITMAP(R2),R4 ;FIND A CLEAR BIT
            54         1E A2         02DE       
            55            54     D1  02E1   599 	CMPL	R4,R5			;ENOUGH SET BITS SCANNED OVER?
                          07     18  02E4   600 	BGEQ	30$			;IF GEQ YES
         1E A2            54     E0  02E6   601 	BBS	R4,ADP$W_MRBITMAP(R2),20$ ;IF SET, CONTINUE SCAN
                          F0         02EA       
                          D3     11  02EB   602 	BRB	10$			;
            54         24 A1     3C  02ED   603 30$:	MOVZWL	CRB$L_INTD+VEC$W_MAPREG(R1),R4 ;RETRIEVE STARTING MAP REGISTER
                          85     10  02F1   604 	BSBB	ALTERMAP		;ALTER MAP REGISTER BITMAP
                          50     D6  02F3   605 40$:	INCL	R0			;SET SUCCESS INDICATOR
                          38     BA  02F5   606 50$:	POPR	#^M<R3,R4,R5>		;RESTORE REGISTERS
                                 05  02F7   607 	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  17
01              WAITFOR INTERRUPT OR TIMEOUT AND KEEP CHANNEL                                                                    (1)

                                     02F8   609 	.SBTTL	WAITFOR INTERRUPT OR TIMEOUT AND KEEP CHANNEL
                                     02F8   610 ;+
                                     02F8   611 ; IOC$WFIKPCH - WAITFOR INTERRUPT OR TIMEOUT AND KEEP CHANNEL
                                     02F8   612 ;
                                     02F8   613 ; THIS ROUTINE IS CALLED TO SOFTWARE ENABLE INTERRUPTS AND TIMEOUT ON
                                     02F8   614 ; A DEVICE UNIT AND TO KEEP THE CHANNEL. THIS ROUTINE CAN BE CALLED AT 
                                     02F8   615 ; EITHER FORK OR DEVICE INTERRUPT LEVEL.
                                     02F8   616 ;
                                     02F8   617 ; INPUTS:
                                     02F8   618 ;
                                     02F8   619 ;	00(SP) = RETURN ADDRESS OF CALLER.
                                     02F8   620 ;	04(SP) = TIMEOUT VALUE IN SECONDS.
                                     02F8   621 ;	08(SP) = IPL TO LOWER TO AFTER SETTING WAIT.
                                     02F8   622 ;	12(SP) = RETURN ADDRESS OF CALLER'S CALLER.
                                     02F8   623 ;
                                     02F8   624 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     02F8   625 ;
                                     02F8   626 ; OUTPUTS:
                                     02F8   627 ;
                                     02F8   628 ;	THE TIMEOUT VALUE IS COMPUTED AND STORED IN DUE TIME, REGISTERS R3 AND
                                     02F8   629 ;	R4 ALONG WITH THE RETURN PC ARE SAVED IN THE FORK BLOCK, INTERRUPTS AND
                                     02F8   630 ;	TIMEOUT ARE ENABLED, AND A RETURN TO THE CALLER'S CALLER IS EXECUTED.
                                     02F8   631 ;-
                                     02F8   632  
                                     02F8   633 IOC$WFIKPCH::				;WAITFOR INTERRUPT/TIMEOUT AND KEEP CHANNEL
            6E            02     C0  02F8   634 	ADDL	#2,(SP)			;CALCULATE OFFSET TO NORMAL RETURN
         10 A5            53     7D  02FB   635 	MOVQ	R3,UCB$L_FR3(R5)	;SAVE REGISTERS R3 AND R4
                       0C A5   8ED0  02FF   636 	POPL	UCB$L_FPC(R5)		;SAVE INTERRUPT RETURN ADDRESS
         58 A5            03     A8  0303   637 	BISW	#UCB$M_INT!UCB$M_TIM,UCB$W_STS(R5) ;ENABLE INTERRUPT AND TIMEOUT
       0000'CF            8E     C1  0307   638 	ADDL3	(SP)+,W^EXE$GL_ABSTIM,UCB$L_DUETIM(R5) ;SET TIMEOUT TIME
                       5C A5         030C       
         58 A5       0040 8F     AA  030E   639 	BICW	#UCB$M_TIMOUT,UCB$W_STS(R5) ;CLEAR UNIT TIMED OUT
                                     0314   640 	ENBINT				;ENABLE INTERRUPTS
                                 05  0317   641 	RSB				;
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  18
01              WAITFOR INTERRUPT OR TIMEOUT AND RELEASE CHANNE                                                                  (1)

                                     0318   643 	.SBTTL	WAITFOR INTERRUPT OR TIMEOUT AND RELEASE CHANNEL
                                     0318   644 ;+
                                     0318   645 ; IOC$WFIRLCH - WAITFOR INTERRUPT OR TIMEOUT AND RELEASE CHANNEL
                                     0318   646 ;
                                     0318   647 ; THIS ROUTINE IS CALLED TO SOFTWARE ENABLE INTERRUPTS AND TIMEOUT ON A DEVICE
                                     0318   648 ; UNIT AND TO RELEASE THE CHANNEL. THIS ROUTINE CAN ONLY BE CALLED AT FORK LEVEL.
                                     0318   649 ;
                                     0318   650 ; INPUTS:
                                     0318   651 ;
                                     0318   652 ;	00(SP) = RETURN ADDRESS OF CALLER.
                                     0318   653 ;	04(SP) = TIMEOUT VALUE IN SECONDS.
                                     0318   654 ;	08(SP) = IPL TO LOWER TO AFTER SETTING WAIT.
                                     0318   655 ;	12(SP) = RETURN ADDRESS OF CALLER'S CALLER.
                                     0318   656 ;
                                     0318   657 ;	R5 = UCB ADDRESS OF DEVICE UNIT.
                                     0318   658 ;
                                     0318   659 ; OUTPUTS:
                                     0318   660 ;
                                     0318   661 ;	THE TIMEOUT VALUE IS COMPUTED AND STORED IN DUE TIME, REGISTERS R3 AND
                                     0318   662 ;	R4 ALONG WITH THE RETURN PC ARE SAVED IN THE FORK BLOCK, INTERRUPTS AND
                                     0318   663 ;	TIMEOUT ARE ENABLED, THE CHANNEL IS RELEASED, AND A RETURN TO THE CALLER'S
                                     0318   664 ;	CALLER IS EXECUTED.
                                     0318   665 ;-
                                     0318   666  
                                     0318   667 IOC$WFIRLCH::				;WAITFOR INTERRUPT/TIMEOUT AND RELEASE CHANNEL
            6E            02     C0  0318   668 	ADDL	#2,(SP)			;CALCULATE OFFSET TO NORMAL RETURN
         10 A5            53     7D  031B   669 	MOVQ	R3,UCB$L_FR3(R5)	;SAVE REGISTERS R3 AND R4
                       0C A5   8ED0  031F   670 	POPL	UCB$L_FPC(R5)		;SAVE INTERRUPT RETURN ADDRESS
         58 A5            03     A8  0323   671 	BISW	#UCB$M_INT!UCB$M_TIM,UCB$W_STS(R5) ;ENABLE INTERRUPT AND TIMEOUT
       0000'CF            8E     C1  0327   672 	ADDL3	(SP)+,W^EXE$GL_ABSTIM,UCB$L_DUETIM(R5) ;SET TIMEOUT TIME
                       5C A5         032C       
         58 A5       0040 8F     AA  032E   673 	BICW	#UCB$M_TIMOUT,UCB$W_STS(R5) ;CLEAR UNIT TIMED OUT
                                     0334   674 	ENBINT				;ENABLE INTERRUPTS
                          FD94   31  0337   675 	BRW	IOC$RELCHAN		;RELEASE ALL CHANNELS AND RETURN TO CALLER
                                     033A   676  
                                     033A   677 	.END
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                     (1)

ADP$B_TYPE       0000000A            EMB$B_DV_SLAVE   0000003C            EMB$L_CR_FP      00000058            
ADP$C_NUMDATAP = 00000010            EMB$B_DV_TYPE    00000013            EMB$L_CR_ICCS    00000090            
ADP$L_DPQBL      00000010            EMB$B_SS_MSGTXT  00000012            EMB$L_CR_ICR     00000094            
ADP$L_DPQFL      0000000C            EMB$B_VALID      00000003            EMB$L_CR_ISP     00000020            
ADP$L_INTD       0000005C            EMB$C_BC_LENGTH  0000006E            EMB$L_CR_KSP     00000010            
ADP$L_LINK       00000004            EMB$C_BE       = 00000004            EMB$L_CR_P0BR    00000068            
ADP$L_MRQBL      00000018            EMB$C_CR_LENGTH  000000FA            EMB$L_CR_P0LR    0000006C            
ADP$L_MRQFL      00000014            EMB$C_CS       = 00000020            EMB$L_CR_P1BR    00000070            
ADP$L_UBACSR     00000000            EMB$C_DE       = 00000001            EMB$L_CR_P1LR    00000074            
ADP$W_DPBITMAP   0000001C            EMB$C_DT       = 00000096            EMB$L_CR_PC      00000060            
ADP$W_MRBITMAP   0000001E            EMB$C_LENGTH     00000004            EMB$L_CR_PCBB    00000080            
ADP$W_SIZE       00000008            EMB$C_OM       = 00000028            EMB$L_CR_PSL     00000064            
ALTERMAP         00000278 R     03   EMB$C_SS       = 00000027            EMB$L_CR_R0      00000024            
BIT...         = 00000008            EMB$C_SS_LENGTH  00000012            EMB$L_CR_R1      00000028            
BUG$_INCONSTATE  ********   X   03   EMB$C_TS       = 00000026            EMB$L_CR_R10     0000004C            
CA$_MEASURE    = 00000002            EMB$C_TS_LENGTH  00000010            EMB$L_CR_R11     00000050            
CA$_MEASURE_IOT= 00000004            EMB$C_UI       = 00000061            EMB$L_CR_R2      0000002C            
CA$_SIMULATOR  = 00000001            EMB$C_VD       = 00000041            EMB$L_CR_R3      00000030            
CRB$B_MASK       0000000E            EMB$C_VM       = 00000040            EMB$L_CR_R4      00000034            
CRB$B_TT_ATTN    00000004            EMB$C_WS       = 00000024            EMB$L_CR_R5      00000038            
CRB$B_TT_EXPEC   00000005            EMB$K_BC_LENGTH  0000006E            EMB$L_CR_R6      0000003C            
CRB$B_TYPE       0000000A            EMB$K_CR       = 00000025            EMB$L_CR_R7      00000040            
CRB$C_LENGTH     00000028            EMB$K_CR_LENGTH  000000FA            EMB$L_CR_R8      00000044            
CRB$K_LENGTH     00000028            EMB$K_LENGTH     00000004            EMB$L_CR_R9      00000048            
CRB$L_INTD       00000014            EMB$K_MC       = 00000002            EMB$L_CR_SBIER   000000AC            
CRB$L_LINK       00000010            EMB$K_SBC      = 00000028            EMB$L_CR_SBIFS   000000A0            
CRB$L_TT_DIAL    00000000            EMB$K_SS_LENGTH  00000012            EMB$L_CR_SBIMT   000000A8            
CRB$L_WQBL       00000004            EMB$K_TS_LENGTH  00000010            EMB$L_CR_SBIS    000000B4            
CRB$L_WQFL       00000000            EMB$K_UBC      = 00000080            EMB$L_CR_SBISC   000000A4            
CRB$M_BSY      = 00000001            EMB$L_BC_AP      00000054            EMB$L_CR_SBITA   000000B0            
CRB$V_BSY      = 00000000            EMB$L_BC_CODE    00000068            EMB$L_CR_SBR     00000078            
CRB$W_REFC       0000000C            EMB$L_BC_ESP     00000014            EMB$L_CR_SCBB    00000084            
CRB$W_SIZE       00000008            EMB$L_BC_FP      00000058            EMB$L_CR_SISR    0000008C            
DDB$B_ACPCLASS   00000013            EMB$L_BC_ISP     00000020            EMB$L_CR_SLR     0000007C            
DDB$B_TYPE       0000000A            EMB$L_BC_KSP     00000010            EMB$L_CR_SP      0000005C            
DDB$C_LENGTH     00000014            EMB$L_BC_PC      00000060            EMB$L_CR_SSP     00000018            
DDB$K_LENGTH     00000014            EMB$L_BC_PSL     00000064            EMB$L_CR_TODR    00000098            
DDB$L_ACPD       00000010            EMB$L_BC_R0      00000024            EMB$L_CR_USP     0000001C            
DDB$L_DDT        0000000C            EMB$L_BC_R1      00000028            EMB$L_DV_CHAR    00000038            
DDB$L_LINK       00000000            EMB$L_BC_R10     0000004C            EMB$L_DV_ERRSEQ  0000001C            
DDB$L_UCB        00000004            EMB$L_BC_R11     00000050            EMB$L_DV_MEDIA   00000028            
DDB$T_NAME       00000014            EMB$L_BC_R2      0000002C            EMB$L_DV_OPCNT   00000030            
DDB$W_SIZE       00000008            EMB$L_BC_R3      00000030            EMB$L_DV_OWNUIC  00000034            
DDT$L_CANCEL     0000000C            EMB$L_BC_R4      00000034            EMB$L_DV_REGSAV  00000050            
DDT$L_FDT        00000008            EMB$L_BC_R5      00000038            EMB$L_DV_RQPID   00000020            
DDT$L_INIT       00000018            EMB$L_BC_R6      0000003C            EMB$Q_BC_TIME    00000006            
DDT$L_REGDUMP    00000010            EMB$L_BC_R7      00000040            EMB$Q_CR_TIME    00000006            
DDT$L_START      00000000            EMB$L_BC_R8      00000044            EMB$Q_DV_ERTIME  00000014            
DDT$L_UNSOLINT   00000004            EMB$L_BC_R9      00000048            EMB$Q_DV_IOSB    00000008            
DDT$W_DIAGBUF    00000014            EMB$L_BC_SP      0000005C            EMB$Q_SS_TIME    00000006            
DDT$W_ERRORBUF   00000016            EMB$L_BC_SSP     00000018            EMB$Q_TS_TIME    00000006            
DEV$V_MBX        ********   X   03   EMB$L_BC_USP     0000001C            EMB$T_DV_NAME    00000040            
EMB$B_BC_PCB     0000006E            EMB$L_CR_ACCS    0000009C            EMB$W_BC_ENTRY   00000004            
EMB$B_BUFIND     00000002            EMB$L_CR_AP      00000054            EMB$W_BC_ERRSEQ  0000000E            
EMB$B_DV_CLASS   00000012            EMB$L_CR_ASTLVL  00000088            EMB$W_BC_PCBSZ   0000006C            
EMB$B_DV_ERTCNT  00000006            EMB$L_CR_CODE    000000F4            EMB$W_CR_ENTRY   00000004            
EMB$B_DV_ERTMAX  00000007            EMB$L_CR_ESP     00000014            EMB$W_CR_ERRSEQ  0000000E            
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  20
SYMBOL TABLE                                                                                                                     (1)

EMB$W_CR_PCBSZ   000000F8            IRP$B_EFN        00000022            LOG$B_AMOD       0000000E            
EMB$W_DV_BCNT    00000026            IRP$B_PRI        00000023            LOG$B_TABLE      0000000B            
EMB$W_DV_BOFF    00000024            IRP$B_RMOD       0000000B            LOG$B_TYPE       0000000A            
EMB$W_DV_DEVSTS  00000010            IRP$B_TYPE       0000000A            LOG$C_GROUP    = 00000001            
EMB$W_DV_ENTRY   00000004            IRP$C_LENGTH     0000004C            LOG$C_LENGTH     00000014            
EMB$W_DV_ERRCNT  0000002E            IRP$K_LENGTH     0000004C            LOG$C_NAMLENGTH= 00000040            
EMB$W_DV_FUNC    0000003E            IRP$L_AST        00000010            LOG$C_PROCESS  = 00000002            
EMB$W_DV_UNIT    0000002C            IRP$L_ASTPRM     00000014            LOG$C_SYSTEM   = 00000000            
EMB$W_SIZE       00000000            IRP$L_DIAGBUF    00000044            LOG$K_LENGTH     00000014            
EMB$W_SS_ENTRY   00000004            IRP$L_IOQBL      00000004            LOG$LOCKW        ********   X   03   
EMB$W_SS_ERRSEQ  0000000E            IRP$L_IOQFL      00000000            LOG$L_LTBL       00000004            
EMB$W_SS_MSGSZ   00000010            IRP$L_IOSB       00000024            LOG$L_LTFL       00000000            
EMB$W_TS_ENTRY   00000004            IRP$L_IOST1      00000034            LOG$L_MBXUCB     00000010            
EMB$W_TS_ERRSEQ  0000000E            IRP$L_IOST2      00000038            LOG$T_NAME       00000014            
ERL$RELEASEMB    ********   X   03   IRP$L_MEDIA      00000034            LOG$UNLOCK       ********   X   03   
EXE$DEANONPAGED  ********   X   03   IRP$L_PID        0000000C            LOG$W_GROUP      0000000C            
EXE$DEAPAGED     ********   X   03   IRP$L_SEGVBN     00000040            LOG$W_SIZE       00000008            
EXE$GL_ABSTIM    ********   X   03   IRP$L_SEQNUM     00000048            PCB$B_ASTACT     0000000C            
EXE$GQ_SYSTIME   ********   X   03   IRP$L_SVAPTE     0000002C            PCB$B_ASTEN      0000000D            
GBL...         = 00000000            IRP$L_TT_TERM    00000038            PCB$B_PRI        0000000B            
IDB$B_TYPE       0000000A            IRP$L_UCB        0000001C            PCB$B_PRIB       00000033            
IDB$B_UNITS      0000000B            IRP$L_WIND       00000018            PCB$B_TYPE       0000000A            
IDB$C_LENGTH     00000014            IRP$M_BUFIO    = 00000001            PCB$B_WEFC       00000032            
IDB$K_LENGTH     00000014            IRP$M_CHAINED  = 00000020            PCB$C_LENGTH     0000007C            
IDB$L_ADP        0000000C            IRP$M_COMPLX   = 00000008            PCB$K_LENGTH     0000007C            
IDB$L_CSR        00000000            IRP$M_DIAGBUF  = 00000080            PCB$L_ASTQBL     00000014            
IDB$L_OWNER      00000004            IRP$M_FUNC     = 00000002            PCB$L_ASTQFL     00000010            
IDB$L_UCBLST     00000010            IRP$M_PAGIO    = 00000004            PCB$L_EFC2P      00000058            
IDB$W_SIZE       00000008            IRP$M_PHYSIO   = 00000100            PCB$L_EFC3P      0000005C            
IOC$CANCELIO     00000000 RG    03   IRP$M_PRIVIO   = 00000200            PCB$L_EFCS       00000050            
IOC$DELMBX       00000017 RG    03   IRP$M_SWAPIO   = 00000040            PCB$L_EFCU       00000054            
IOC$DIAGBUFILL   0000009D RG    03   IRP$M_VIRTUAL  = 00000010            PCB$L_EFWM       0000004C            
IOC$GL_PSBL      ********   X   03   IRP$S_FCODE    = 00000006            PCB$L_OWNER      0000001C            
IOC$INITIATE     0000019A RG    03   IRP$S_FMOD     = 0000000A            PCB$L_PHD        00000064            
IOC$RELCHAN      000000CE RG    03   IRP$S_MODE     = 00000002            PCB$L_PHYPCB     00000018            
IOC$RELDATAP     000001CC RG    03   IRP$V_BUFIO    = 00000000            PCB$L_PID        00000060            
IOC$RELMAPREG    0000022C RG    03   IRP$V_CHAINED  = 00000005            PCB$L_PQB        0000004C            
IOC$RELSCHAN     000000C4 RG    03   IRP$V_COMPLX   = 00000003            PCB$L_SQBL       00000004            
IOC$REQCOM       00000159 RG    03   IRP$V_DIAGBUF  = 00000007            PCB$L_SQFL       00000000            
IOC$REQDATAP     00000201 RG    03   IRP$V_FCODE    = 00000000            PCB$L_STS        00000028            
IOC$REQMAPREG    00000266 RG    03   IRP$V_FMOD     = 00000006            PCB$L_UIC        00000020            
IOC$REQPCHANH    00000125 RG    03   IRP$V_FUNC     = 00000001            PCB$L_WSSWP      00000024            
IOC$REQPCHANL    0000012E RG    03   IRP$V_MODE     = 00000000            PCB$L_WTIME      0000002C            
IOC$REQSCHANH    00000111 RG    03   IRP$V_PAGIO    = 00000002            PCB$T_LNAME      0000006C            
IOC$REQSCHANL    0000011B RG    03   IRP$V_PHYSIO   = 00000008            PCB$V_ASTPEN   = 00000011            
IOC$WFIKPCH      000002F8 RG    03   IRP$V_PRIVIO   = 00000009            PCB$V_BATCH    = 0000000E            
IOC$WFIRLCH      00000318 RG    03   IRP$V_SWAPIO   = 00000006            PCB$V_DELPEN   = 00000001            
IPL$_ASTDEL    = 00000002            IRP$V_VIRTUAL  = 00000004            PCB$V_FORCPEN  = 00000002            
IPL$_HWCLK     = 00000018            IRP$W_ABCNT      0000003C            PCB$V_HIBER    = 00000013            
IPL$_IOPOST    = 00000004            IRP$W_BCNT       00000032            PCB$V_INQUAN   = 00000003            
IPL$_MAILBOX   = 0000000B            IRP$W_BOFF       00000030            PCB$V_LOGIN    = 00000014            
IPL$_POWER     = 0000001F            IRP$W_CHAN       00000028            PCB$V_NOACNT   = 0000000F            
IPL$_QUEUEAST  = 00000006            IRP$W_FUNC       00000020            PCB$V_PHDRES   = 00000012            
IPL$_SCHED     = 00000003            IRP$W_OBCNT      0000003E            PCB$V_PSWAPM   = 00000004            
IPL$_SYNCH     = 00000007            IRP$W_SIZE       00000008            PCB$V_RES      = 00000000            
IPL$_TIMER     = 00000007            IRP$W_STS        0000002A            PCB$V_RESPEN   = 00000005            
IRP$B_CARCON     00000038            IRP$W_TT_PRMPT   0000003C            PCB$V_SSFEXC   = 00000006            
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  21
SYMBOL TABLE                                                                                                                     (1)

PCB$V_SSFEXCE  = 00000007            PR$_SIRR       = 00000014            UCB$L_FIRST      00000014            
PCB$V_SSFEXCS  = 00000008            PR$_SISR       = 00000015            UCB$L_FPC        0000000C            
PCB$V_SSFEXCU  = 00000009            PR$_SLR        = 0000000D            UCB$L_FQBL       00000004            
PCB$V_SSRWAIT  = 0000000A            PR$_SSP        = 00000002            UCB$L_FQFL       00000000            
PCB$V_SUSPEN   = 0000000B            PR$_TBIA       = 00000039            UCB$L_FR3        00000010            
PCB$V_SWPVBN   = 00000010            PR$_TBIS       = 0000003A            UCB$L_FR4        00000014            
PCB$V_WAKEPEN  = 0000000C            PR$_TODR       = 0000001B            UCB$L_IOQBL      00000044            
PCB$V_WALL     = 0000000D            PR$_TXCS       = 00000022            UCB$L_IOQFL      00000040            
PCB$W_APTCNT     00000034            PR$_TXDB       = 00000023            UCB$L_IRP        0000004C            
PCB$W_ASTCNT     0000003C            PR$_USP        = 00000003            UCB$L_LINK       0000002C            
PCB$W_BIOCNT     0000003E            PR$_WCSA       = 0000002C            UCB$L_LOGADR     00000064            
PCB$W_BIOLM      00000040            PR$_WCSD       = 0000002D            UCB$L_MAXBLOCK   00000080            
PCB$W_BYTCNT     00000042            RELEASE          00000197 R     03   UCB$L_MEDIA      00000088            
PCB$W_BYTLM      00000068            SCH$AL_PCB       ********   X   03   UCB$L_NT_DATSSB  00000074            
PCB$W_DIOCNT     00000044            SEARCHMAP        00000296 R     03   UCB$L_NT_INTSSB  00000078            
PCB$W_DIOLM      00000046            UCB$B_AMOD       00000053            UCB$L_OPCNT      00000060            
PCB$W_FILCNT     00000048            UCB$B_CEX        00000077            UCB$L_OWNUIC     0000001C            
PCB$W_GPGCNT     00000038            UCB$B_CM1        0000004A            UCB$L_PID        00000028            
PCB$W_GRP        00000022            UCB$B_CM2        0000004B            UCB$L_RQBL       00000004            
PCB$W_MEM        00000020            UCB$B_DEVCLASS   00000038            UCB$L_RQFL       00000000            
PCB$W_MTXCNT     0000000E            UCB$B_DEVTYPE    00000039            UCB$L_SVAPTE     00000068            
PCB$W_PPGCNT     0000003A            UCB$B_DIPL       00000052            UCB$L_SVPN       00000064            
PCB$W_PRCCNT     0000006A            UCB$B_DX_SCTCNT  FFFFFFFE            UCB$L_TTCHAR     0000003C            
PCB$W_SIZE       00000008            UCB$B_DX_SPARE   FFFFFFFF            UCB$L_VCB        00000030            
PCB$W_STATE      00000030            UCB$B_ERTCNT     00000070            UCB$M_BSY      = 00000100            
PCB$W_TMBU       00000036            UCB$B_ERTMAX     00000071            UCB$M_CANCEL   = 00000008            
PCB$W_TQCNT      0000004A            UCB$B_ESCAPE     0000004B            UCB$M_DEADMO   = 00000400            
PMS$END_IO       ********   X   03   UCB$B_FEX        00000076            UCB$M_DELMBX   = 00000002            
PMS$START_IO     ********   X   03   UCB$B_FIPL       0000000B            UCB$M_DIAGBUF  = 00000002            
PR$_ACCR       = 00000029            UCB$B_LOCSRV     0000003C            UCB$M_DX_WRITE = 00000008            
PR$_ACCS       = 00000028            UCB$B_OFFNDX     00000090            UCB$M_ECC      = 00000001            
PR$_ASTLVL     = 00000013            UCB$B_OFFRTC     00000091            UCB$M_ERLOGIP  = 00000004            
PR$_ESP        = 00000001            UCB$B_REMSRV     0000003D            UCB$M_INT      = 00000002            
PR$_ICCS       = 00000018            UCB$B_SECTORS    0000003C            UCB$M_INTTYPE  = 00000080            
PR$_ICR        = 0000001A            UCB$B_SLAVE      00000074            UCB$M_JOB      = 00000001            
PR$_IPL        = 00000012            UCB$B_SPR        00000075            UCB$M_MOUNTING = 00000200            
PR$_ISP        = 00000004            UCB$B_STATE      00000052            UCB$M_NOCNVRT  = 00000004            
PR$_KSP        = 00000000            UCB$B_TRACKS     0000003D            UCB$M_NT_BFROVF= 00000004            
PR$_MAPEN      = 00000038            UCB$B_TYPE       0000000A            UCB$M_NT_BREAK = 00000020            
PR$_NICR       = 00000019            UCB$B_VERTSZ     0000003F            UCB$M_NT_NAME  = 00000010            
PR$_P0BR       = 00000008            UCB$C_LENGTH     00000074            UCB$M_NT_NONTR = 00000040            
PR$_P0LR       = 00000009            UCB$C_LOGLNK   = 00000001            UCB$M_NT_SDP   = 00000008            
PR$_P1BR       = 0000000A            UCB$K_LENGTH     00000074            UCB$M_ONLINE   = 00000010            
PR$_P1LR       = 0000000B            UCB$L_AMB        00000054            UCB$M_POWER    = 00000020            
PR$_PCBB       = 00000010            UCB$L_ASTQBL     00000010            UCB$M_PRMMBX   = 00000001            
PR$_RXCS       = 00000020            UCB$L_ASTQFL     0000000C            UCB$M_TIM      = 00000001            
PR$_RXDB       = 00000021            UCB$L_CPID       0000005C            UCB$M_TIMOUT   = 00000040            
PR$_SBIER      = 00000034            UCB$L_CRB        00000020            UCB$M_TT_NOTIF = 00000004            
PR$_SBIFS      = 00000030            UCB$L_DDB        00000024            UCB$M_TT_TIMO  = 00000002            
PR$_SBIMT      = 00000033            UCB$L_DEVCHAR    00000034            UCB$M_VALID    = 00000800            
PR$_SBIQC      = 00000036            UCB$L_DEVDEPEND  0000003C            UCB$S_LNKPRI   = 00000002            
PR$_SBIS       = 00000031            UCB$L_DPC        0000007C            UCB$S_LTYPE    = 00000002            
PR$_SBISC      = 00000032            UCB$L_DUETIM     0000005C            UCB$T_PARTNER    0000000C            
PR$_SBITA      = 00000035            UCB$L_DX_BFPNT   FFFFFFF4            UCB$V_BACKP    = 00000005            
PR$_SBR        = 0000000C            UCB$L_DX_BUF     FFFFFFF0            UCB$V_BSY      = 00000008            
PR$_SCBB       = 00000011            UCB$L_DX_RXDB    FFFFFFF8            UCB$V_CANCEL   = 00000003            
PR$_SID        = 0000003E            UCB$L_EMB        00000078            UCB$V_DEADMO   = 0000000A            
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  22
SYMBOL TABLE                                                                                                                     (1)

UCB$V_DELMBX   = 00000001            VEC$B_NUMREG     00000012            
UCB$V_DIAGBUF  = 00000001            VEC$L_ADP        00000014            
UCB$V_DX_WRITE = 00000003            VEC$L_IDB        00000008            
UCB$V_ECC      = 00000000            VEC$L_INITIAL    0000000C            
UCB$V_ERLOGIP  = 00000002            VEC$L_TT_DISC    00000020            
UCB$V_INT      = 00000001            VEC$L_TT_ILINE   00000018            
UCB$V_INTTYPE  = 00000007            VEC$L_TT_STRTIO  0000001C            
UCB$V_JOB      = 00000000            VEC$M_MAPLOCK  = 00008000            
UCB$V_LNKPRI   = 00000006            VEC$M_PATHLOCK = 00000080            
UCB$V_LTYPE    = 00000000            VEC$Q_DISPATCH   00000000            
UCB$V_MOUNTING = 00000009            VEC$S_DATAPATH = 00000007            
UCB$V_MSGACK   = 00000004            VEC$S_MAPREG   = 0000000F            
UCB$V_MSGFLO   = 00000003            VEC$V_DATAPATH = 00000000            
UCB$V_NOCNVRT  = 00000002            VEC$V_MAPLOCK  = 0000000F            
UCB$V_NT_BFROVF= 00000002            VEC$V_MAPREG   = 00000000            
UCB$V_NT_BREAK = 00000005            VEC$V_PATHLOCK = 00000007            
UCB$V_NT_NAME  = 00000004            VEC$W_MAPREG     00000010            
UCB$V_NT_NONTR = 00000006            
UCB$V_NT_SDP   = 00000003            
UCB$V_ONLINE   = 00000004            
UCB$V_POWER    = 00000005            
UCB$V_PRMMBX   = 00000000            
UCB$V_SEGFLO   = 00000002            
UCB$V_TIM      = 00000000            
UCB$V_TIMOUT   = 00000006            
UCB$V_TT_NOTIF = 00000002            
UCB$V_TT_TIMO  = 00000001            
UCB$V_VALID    = 0000000B            
UCB$W_BCNT       0000006E            
UCB$W_BCR        00000092            
UCB$W_BOFF       0000006C            
UCB$W_BUFQUO     00000018            
UCB$W_BYTESTOGO  0000003E            
UCB$W_CHARGE     0000004A            
UCB$W_CYLINDERS  0000003E            
UCB$W_DA         00000088            
UCB$W_DC         0000008A            
UCB$W_DEVBUFSIZ  0000003A            
UCB$W_DEVSTS     0000005A            
UCB$W_DSTADDR    00000018            
UCB$W_DX_BCR     FFFFFFFC            
UCB$W_EC1        0000008C            
UCB$W_EC2        0000008E            
UCB$W_ERRCNT     00000072            
UCB$W_FUNC       00000084            
UCB$W_MB_SEED    FFFFFFFC            
UCB$W_MSGCNT     00000016            
UCB$W_MSGMAX     00000014            
UCB$W_NT_CHAN    0000007C            
UCB$W_OFFSET     00000086            
UCB$W_REFC       00000050            
UCB$W_SIZE       00000008            
UCB$W_SRCADDR    0000001A            
UCB$W_STS        00000058            
UCB$W_UNIT       00000048            
UCB$W_VPROT      0000001A            
VEC$B_DATAPATH   00000013            
IOSUBNPAG       - NONPAGED I/O RELATED SUBROUTINES               22-AUG-1978 00:13:47   VAX-11 MACRO X0.3-11               Page  23
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFF      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
WIONONPAGED      0000033A      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
7730. BYTES LEFT IN FREE MEMORY POOL.
4790. BYTES OF RECLAIMED MEMORY.
OBJ$:IOSUBNPAG,LIS$:IOSUBNPAG/-SP=LIB$:LIB/ML,SRC$:IOSUBNPAG
11 MLB DIR RDS - 1050 GETS TO DEFINE 27 MACROS. 62 INTER. FILE WRITES. 
