
; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE INIBAD (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'X0005A'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  INIT Utility Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module contains the routines that do the bad block processing.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  10-Nov-1977  19:21
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 3-Jan-1978  22:48
;	0047	!   X0002 - Change name of checksum routine
;	0048	!
;	0049	!   Andrew C. Goldstein, 22-Jan-1978  19:45
;	0050	!   X0003 - Bug in checksum call in GET_SOFTBAD
;	0051	!
;	0052	!   Andrew C. Goldstein, 14-Jun-78  18:12
;	0053	!   X0004 - Add bad block data not found message
;	0054	!
;	0055	!   Andrew C. Goldstein, 1-Aug-78  17:27

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 1-1
; Digital Equipment Corporation
;
;	0056	!   X0005 - Change in DEC STD 144 (ignore high bits of track & cylinder)
;	0057	!
;	0058	!**
;	0059	
;	0060	
;	0061	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0062	REQUIRE 'SRC$:INIDEF.B32';
;	0324	REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';
;	0384	
;	0385	
;	0386	FORWARD ROUTINE
;	0387		INIT_BADBLOCKS	: NOVALUE,	! main level bad block processing
;	0388		GET_FACTBAD	: NOVALUE,	! process factory bad block data
;	0389		GET_SOFTBAD	: NOVALUE,	! process bad block scan program data
;	0390		GET_USERBAD	: NOVALUE,	! process user specified data
;	0391		MARK_BAD	: NOVALUE;	! enter bad block in allocation table

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 2
; Digital Equipment Corporation
;
;	0392	GLOBAL ROUTINE INIT_BADBLOCKS : NOVALUE =
;	0393	
;	0394	!++
;	0395	!
;	0396	! FUNCTIONAL DESCRIPTION:
;	0397	!
;	0398	!	This is the main bad block processing routine. It calls the software
;	0399	!	data, factory data, and manually entered bad block routines as
;	0400	!	is appropriate.
;	0401	!
;	0402	!
;	0403	! CALLING SEQUENCE:
;	0404	!	INIT_BADBLOCKS ()
;	0405	!
;	0406	! INPUT PARAMETERS:
;	0407	!	NONE
;	0408	!
;	0409	! IMPLICIT INPUTS:
;	0410	!	parser data base
;	0411	!	data base in INIT_DISK
;	0412	!
;	0413	! OUTPUT PARAMETERS:
;	0414	!	NONE
;	0415	!
;	0416	! IMPLICIT OUTPUTS:
;	0417	!	bad block area in allocation table
;	0418	!
;	0419	! ROUTINE VALUE:
;	0420	!	NONE
;	0421	!
;	0422	! SIDE EFFECTS:
;	0423	!	disk bad block data read
;	0424	!
;	0425	!--
;	0426	
;	0427	BEGIN
;	0428	
;	0429	EXTERNAL
;	0430		INIT_OPTIONS	: BITVECTOR,	! command options
;	0431		DEVICE_TABLE	: BBLOCKVECTOR [,DVT_LENGTH],
;	0432						! device data table
;	0433		DEV_INDEX;			! table index of this device
;	0434	
;	0435	
;	0436	! Establish whether the volume has factory bad block data or not and
;	0437	! call the appropriate routine. Then, if user data has been entered,
;	0438	! call the routine to process it.
;	0439	!
;	0440	
;	0441	IF .DEVICE_TABLE[.DEV_INDEX, DVT_FACTBAD]
;	0442	THEN
;	0443	    GET_FACTBAD ()
;	0444	ELSE
;	0445	    GET_SOFTBAD ();
;	0446	

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 2-1
; Digital Equipment Corporation
;
;	0447	IF .INIT_OPTIONS[OPT_BADBLOCKS]
;	0448	THEN GET_USERBAD ();
;	0449	
;	0450	END;					! end of routine INIT_BADBLOCKS


							    .TITLE  INIBAD
							    .IDENT  \X0005A\

							    .GLOBL  INIT_OPTIONS, DEVICE_TABLE, DEV_INDEX

							    .PSECT  $CODE$,NOWRT,2

					 0000 00000 	    .ENTRY  INIT_BADBLOCKS, Save nothing			      ; 0392
	   50	  0000G  CF	       04  78 00002 	    ASHL    #4, DEV_INDEX, R0					      ; 0441
	   07	  0000GCF40	       01  E1 00008 	    BBC     #1, DEVICE_TABLE+4[R0], 1$				      ;
		  0000V  CF	       00  FB 0000F 	    CALLS   #0, GET_FACTBAD					      ; 0443
				       05  11 00014 	    BRB     2$							      ; 0441
		  0000V  CF	       00  FB 00016 1$:     CALLS   #0, GET_SOFTBAD					      ; 0445
	   05	  0000G  CF	       01  E1 0001B 2$:     BBC     #1, INIT_OPTIONS+1, 3$				      ; 0447
		  0000V  CF	       00  FB 00021 	    CALLS   #0, GET_USERBAD					      ; 0448
					   04 00026 3$:     RET     							      ; 0392

; Routine Size:  39 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 3
; Digital Equipment Corporation
;
;	0451	ROUTINE GET_FACTBAD : NOVALUE =
;	0452	
;	0453	!++
;	0454	!
;	0455	! FUNCTIONAL DESCRIPTION:
;	0456	!
;	0457	!	This routine processes the factory bad block data found on the last
;	0458	!	track of the disk.
;	0459	!
;	0460	!
;	0461	! CALLING SEQUENCE:
;	0462	!	GET_FACTBAD ()
;	0463	!
;	0464	! INPUT PARAMETERS:
;	0465	!	NONE
;	0466	!
;	0467	! IMPLICIT INPUTS:
;	0468	!	device table in INIT_DISK
;	0469	!
;	0470	! OUTPUT PARAMETERS:
;	0471	!	NONE
;	0472	!
;	0473	! IMPLICIT OUTPUTS:
;	0474	!	allocation table in INIT_DISK
;	0475	!
;	0476	! ROUTINE VALUE:
;	0477	!	NONE
;	0478	!
;	0479	! SIDE EFFECTS:
;	0480	!	disk blocks read
;	0481	!
;	0482	!--
;	0483	
;	0484	BEGIN
;	0485	
;	0486	MACRO					! format of physical block number
;	0487		PBN_SECTOR	= 0, 0, 8, 0%,	! sector number
;	0488		PBN_TRACK	= 1, 0, 8, 0%,	! track number
;	0489		PBN_CYLINDER	= 2, 0, 16, 0%;	! cylinder number
;	0490	
;	0491	LABEL
;	0492		SEARCH_TRACK;			! main loop to search last track of disk
;	0493	
;	0494	LOCAL
;	0495		LBN,				! LBN to mark bad
;	0496		FIRST_TIME,			! first time through flag
;	0497		STATUS,				! return status
;	0498		P		: REF BBLOCK,	! pointer into bad block descriptors
;	0499		DEV_TABLE	: REF BBLOCK,	! pointer to device table entry in use
;	0500		PHYS_BLOCK	: BBLOCK [4];	! current physical block number
;	0501	
;	0502	EXTERNAL
;	0503		INIT_OPTIONS	: BITVECTOR,	! command options
;	0504		DEVICE_TABLE	: BBLOCKVECTOR [,DVT_LENGTH],
;	0505						! device data table

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 3-1
; Digital Equipment Corporation
;
;	0506		DEV_INDEX,			! table index of device in use
;	0507		BUFFER		: BBLOCK;	! I/O buffer
;	0508	
;	0509	EXTERNAL ROUTINE
;	0510		READ_PHYSICAL;			! read block by physical address
;	0511	
;	0512	
;	0513	! First mark the entire last track of the disk bad to prevent its use.
;	0514	!
;	0515	
;	0516	DEV_TABLE = DEVICE_TABLE[.DEV_INDEX, DVT_ORIGIN];
;	0517	
;	0518	LBN = .DEV_TABLE[DVT_VOLSIZE] - .DEV_TABLE[DVT_SECTORS]/.DEV_TABLE[DVT_BLOCKFACT];
;	0519	MARK_BAD (.DEV_TABLE[DVT_SECTORS]/.DEV_TABLE[DVT_BLOCKFACT], .LBN);
;	0520	
;	0521	! Now, if automatic bad block processing is not inhibited, find a good
;	0522	! block on the last track and process the bad block list in it. Do this
;	0523	! twice, once on the first good block and once on the first good block
;	0524	! after sector 10 (if not redundant) to get both factory and software
;	0525	! detected bad block data.
;	0526	!
;	0527	
;	0528	IF NOT .INIT_OPTIONS[OPT_VERIFIED] THEN RETURN;
;	0529	
;	0530	FIRST_TIME = 1;
;	0531	PHYS_BLOCK[PBN_CYLINDER] = .DEV_TABLE[DVT_CYLINDERS] - 1;
;	0532	PHYS_BLOCK[PBN_TRACK] = .DEV_TABLE[DVT_TRACKS] - 1;
;	0533	PHYS_BLOCK[PBN_SECTOR] = 0;
;	0534	
;	0535	SEARCH_TRACK: BEGIN
;	0536	WHILE 1 DO
;	0537	    BEGIN
;	0538	
;	0539	    WHILE 1 DO
;	0540		BEGIN
;	0541		STATUS = READ_PHYSICAL (.PHYS_BLOCK, BUFFER);
;	0542		IF .STATUS THEN EXITLOOP;
;	0543		IF .STATUS NEQ SS$_PARITY
;	0544		THEN ERR_EXIT (.STATUS);
;	0545	
;	0546		PHYS_BLOCK[PBN_SECTOR] = .PHYS_BLOCK[PBN_SECTOR]
;	0547					+ 2*.DEV_TABLE[DVT_BLOCKFACT];
;	0548		IF .PHYS_BLOCK[PBN_SECTOR] GEQ .DEV_TABLE[DVT_SECTORS]
;	0549		THEN LEAVE SEARCH_TRACK;
;	0550		END;				! end of block search loop
;	0551	
;	0552	! We have a good bad block list. Process its entries.
;	0553	!
;	0554	
;	0555	    IF .BUFFER[BBD$W_FLAGS] NEQ 0
;	0556	    THEN ERR_EXIT (INIT$_DIAGPACK);
;	0557	
;	0558	    P = BUFFER + BBD$C_DESCRIPT;
;	0559	    DO
;	0560		BEGIN

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 3-2
; Digital Equipment Corporation
;
;	0561		IF .P[BBD$V_CYLINDER] EQL 32767
;	0562		THEN EXITLOOP;
;	0563		LBN = ((.P[BBD$V_CYLINDER] * .DEV_TABLE[DVT_TRACKS]
;	0564		      + .P[BBD$V_TRACK]) * .DEV_TABLE[DVT_SECTORS]
;	0565		      + .P[BBD$V_SECTOR]) / .DEV_TABLE[DVT_BLOCKFACT];
;	0566		MARK_BAD (1, .LBN);
;	0567		P = .P + BBD$C_ENTRY;
;	0568		END
;	0569	    UNTIL .P GEQA BUFFER+512;
;	0570	
;	0571	! If we are not yet into the user data, position to it and try again.
;	0572	!
;	0573	
;	0574	    FIRST_TIME = 0;
;	0575	    IF .PHYS_BLOCK[PBN_SECTOR] GEQ 10 THEN EXITLOOP;
;	0576	    PHYS_BLOCK[PBN_SECTOR] = 10;
;	0577	    END;				! end of outer loop
;	0578	END;					! end of block SEARCH_TRACK
;	0579	
;	0580	! If we found no good data at all, complain.
;	0581	!
;	0582	
;	0583	IF .FIRST_TIME
;	0584	THEN ERR_EXIT (INIT$_FACTBAD);
;	0585	
;	0586	END;					! end of routine GET_FACTBAD



							    .GLOBL  BUFFER, READ_PHYSICAL

					 08FC 00027 GET_FACTBAD:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R11				      ; 0451
		         5B 00000000G  00  9E 00029 	    MOVAB   LIB$STOP, R11					      ;
		         5E	       04  C2 00030 	    SUBL2   #4, SP						      ;
	   50	  0000G  CF	       04  78 00033 	    ASHL    #4, DEV_INDEX, R0					      ; 0516
		         52	0000GCF40  9E 00039 	    MOVAB   DEVICE_TABLE[R0], DEV_TABLE				      ;
		         50	       62  9A 0003F 	    MOVZBL  (DEV_TABLE), R0					      ; 0518
		         51	  05   A2  9A 00042 	    MOVZBL  5(DEV_TABLE), R1					      ;
		         50	       51  C6 00046 	    DIVL2   R1, R0						      ;
	   55	    08   A2	       50  C3 00049 	    SUBL3   R0, 8(DEV_TABLE), LBN				      ;
				       55  DD 0004E 	    PUSHL   LBN							      ; 0519
		         50	       62  9A 00050 	    MOVZBL  (DEV_TABLE), R0					      ;
		         51	  05   A2  9A 00053 	    MOVZBL  5(DEV_TABLE), R1					      ;
	   7E	         50	       51  C7 00057 	    DIVL3   R1, R0, -(SP)					      ;
		  0000V  CF	       02  FB 0005B 	    CALLS   #2, MARK_BAD					      ;
	   01	  0000G  CF	       06  E0 00060 	    BBS     #6, INIT_OPTIONS, 1$				      ; 0528
					   04 00066 	    RET     							      ;
		         56	       01  D0 00067 1$:     MOVL    #1, FIRST_TIME					      ; 0530
      02   AE	    02   A2	       01  A3 0006A 	    SUBW3   #1, 2(DEV_TABLE), PHYS_BLOCK+2			      ; 0531
      01   AE	    01   A2	       01  83 00070 	    SUBB3   #1, 1(DEV_TABLE), PHYS_BLOCK+1			      ; 0532
				       6E  94 00076 	    CLRB    PHYS_BLOCK						      ; 0533
				0000G  CF  9F 00078 2$:     PUSHAB  BUFFER						      ; 0541
				  04   AE  DD 0007C 	    PUSHL   PHYS_BLOCK						      ;
		  0000G  CF	       02  FB 0007F 	    CALLS   #2, READ_PHYSICAL					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 3-3
; Digital Equipment Corporation
;
		         54	       50  D0 00084 	    MOVL    R0, STATUS						      ;
		         23	       54  E8 00087 	    BLBS    STATUS, 4$						      ; 0542
	      000001F4   8F	       54  D1 0008A 	    CMPL    STATUS, #500					      ; 0543
				       05  13 00091 	    BEQL    3$							      ;
				       54  DD 00093 	    PUSHL   STATUS						      ; 0544
		         6B	       01  FB 00095 	    CALLS   #1, LIB$STOP					      ;
		         51	       6E  9A 00098 3$:     MOVZBL  PHYS_BLOCK, R1					      ; 0546
		         50	  05   A2  9A 0009B 	    MOVZBL  5(DEV_TABLE), R0					      ; 0547
		         57	     6140  3E 0009F 	    MOVAW   (R1)[R0], R7					      ;
		         6E	       57  90 000A3 	    MOVB    R7, PHYS_BLOCK					      ;
		         62	       6E  91 000A6 	    CMPB    PHYS_BLOCK, (DEV_TABLE)				      ; 0548
				       CD  1F 000A9 	    BLSSU   2$							      ;
				       6C  11 000AB 	    BRB     8$							      ; 0549
				0000G  CF  B5 000AD 4$:     TSTW    BUFFER+6						      ; 0555
				       09  13 000B1 	    BEQL    5$							      ;
			    007580A4   8F  DD 000B3 	    PUSHL   #7700644						      ; 0556
		         6B	       01  FB 000B9 	    CALLS   #1, LIB$STOP					      ;
		         53	0000G  CF  9E 000BC 5$:     MOVAB   BUFFER+8, P						      ; 0558
	   63	         0F	       00  ED 000C1 6$:     CMPZV   #0, #15, (P), #32767				      ; 0561
			    00007FFF   8F     000C5									      ;
				       40  13 000CA 	    BEQL    7$							      ;
	   63	         0F	       00  EF 000CC 	    EXTZV   #0, #15, (P), R0					      ; 0563
				       50     000D0									      ;
		         51	  01   A2  9A 000D1 	    MOVZBL  1(DEV_TABLE), R1					      ;
		         50	       51  C4 000D5 	    MULL2   R1, R0						      ;
      03   A3	         07	       00  EF 000D8 	    EXTZV   #0, #7, 3(P), R7					      ;
				       57     000DD									      ;
		         50	       57  C0 000DE 	    ADDL2   R7, R0						      ;
		         51	       62  9A 000E1 	    MOVZBL  (DEV_TABLE), R1					      ; 0564
		         50	       51  C4 000E4 	    MULL2   R1, R0						      ;
		         57	  02   A3  9A 000E7 	    MOVZBL  2(P), R7						      ; 0563
		         50	       57  C0 000EB 	    ADDL2   R7, R0						      ;
		         55	  05   A2  9A 000EE 	    MOVZBL  5(DEV_TABLE), LBN					      ; 0565
	   55	         50	       55  C7 000F2 	    DIVL3   LBN, R0, LBN					      ;
				       55  DD 000F6 	    PUSHL   LBN							      ; 0566
				       01  DD 000F8 	    PUSHL   #1							      ;
		  0000V  CF	       02  FB 000FA 	    CALLS   #2, MARK_BAD					      ;
		         53	       04  C0 000FF 	    ADDL2   #4, P						      ; 0567
		         50	0000G  CF  9E 00102 	    MOVAB   BUFFER+512, R0					      ; 0569
		         50	       53  D1 00107 	    CMPL    P, R0						      ;
				       B5  1F 0010A 	    BLSSU   6$							      ;
				       56  D4 0010C 7$:     CLRL    FIRST_TIME						      ; 0574
		         0A	       6E  91 0010E 	    CMPB    PHYS_BLOCK, #10					      ; 0575
				       06  1E 00111 	    BGEQU   8$							      ;
		         6E	       0A  90 00113 	    MOVB    #10, PHYS_BLOCK					      ; 0576
				     FF5F  31 00116 	    BRW     2$							      ; 0536
		         09	       56  E9 00119 8$:     BLBC    FIRST_TIME, 9$					      ; 0583
			    007580AC   8F  DD 0011C 	    PUSHL   #7700652						      ; 0584
		         6B	       01  FB 00122 	    CALLS   #1, LIB$STOP					      ;
					   04 00125 9$:     RET     							      ; 0451

; Routine Size:  255 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 4
; Digital Equipment Corporation
;
;	0587	ROUTINE GET_SOFTBAD : NOVALUE =
;	0588	
;	0589	!++
;	0590	!
;	0591	! FUNCTIONAL DESCRIPTION:
;	0592	!
;	0593	!	This routine processes the data left by the bad block scan program
;	0594	!	somewhere near the end of the disk.
;	0595	!
;	0596	!
;	0597	! CALLING SEQUENCE:
;	0598	!	GET_SOFTBAD ()
;	0599	!
;	0600	! INPUT PARAMETERS:
;	0601	!	NONE
;	0602	!
;	0603	! IMPLICIT INPUTS:
;	0604	!	device table in INIT_DISK
;	0605	!
;	0606	! OUTPUT PARAMETERS:
;	0607	!	NONE
;	0608	!
;	0609	! IMPLICIT OUTPUTS:
;	0610	!	allocation table in INIT_DISK
;	0611	!
;	0612	! ROUTINE VALUE:
;	0613	!	NONE
;	0614	!
;	0615	! SIDE EFFECTS:
;	0616	!	disk blocks read
;	0617	!
;	0618	!--
;	0619	
;	0620	BEGIN
;	0621	
;	0622	LOCAL
;	0623		LBN,				! LBN to mark bad
;	0624		STATUS,				! return status
;	0625		P		: REF BBLOCK;	! pointer into bad block map
;	0626	
;	0627	EXTERNAL
;	0628		INIT_OPTIONS	: BITVECTOR, 	! command options
;	0629		DEVICE_TABLE	: BBLOCKVECTOR [,DVT_LENGTH],
;	0630						! device data table
;	0631		DEV_INDEX,			! table index of device in use
;	0632		BUFFER		: BBLOCK;	! I/O buffer
;	0633	
;	0634	EXTERNAL ROUTINE
;	0635		READ_BLOCK,			! read block by LBN
;	0636		CHECKSUM2;			! compute block checksum
;	0637	
;	0638	
;	0639	! If automatic bad block processing is disabled, just mark the last block
;	0640	! of the volume bad.
;	0641	!

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 4-1
; Digital Equipment Corporation
;
;	0642	
;	0643	LBN = .DEVICE_TABLE[.DEV_INDEX, DVT_VOLSIZE];
;	0644	IF NOT .INIT_OPTIONS[OPT_VERIFIED]
;	0645	THEN
;	0646	    BEGIN
;	0647	    MARK_BAD (1, .DEVICE_TABLE[.DEV_INDEX, DVT_VOLSIZE] - 1);
;	0648	    RETURN;
;	0649	    END;
;	0650	
;	0651	! Scan from the end of the volume forward to find the bad block data.
;	0652	! If none is found, output a warning and proceed.
;	0653	!
;	0654	
;	0655	IF
;	0656	BEGIN
;	0657	DECR J FROM 32 TO 1 DO
;	0658	    BEGIN
;	0659	    LBN = .LBN - 1;
;	0660	    STATUS = READ_BLOCK (.LBN, BUFFER);
;	0661	
;	0662	    IF .STATUS
;	0663	    THEN
;	0664		BEGIN
;	0665		IF  CHECKSUM2 (BUFFER, $BYTEOFFSET (BBM$W_CHECKSUM))
;	0666		AND .BUFFER[BBM$B_COUNTSIZE] EQL 1
;	0667		AND .BUFFER[BBM$B_LBNSIZE] EQL 3
;	0668		AND .BUFFER[BBM$B_INUSE] LEQ (512 - BBM$C_POINTERS - 2) / 2
;	0669		THEN EXITLOOP 0;
;	0670		END
;	0671	    ELSE IF .STATUS NEQ SS$_PARITY
;	0672	    THEN ERR_EXIT (.STATUS);
;	0673	    END
;	0674	END
;	0675	THEN
;	0676	    BEGIN
;	0677	    ERR_MESSAGE (INIT$_NOBADDATA);
;	0678	    MARK_BAD (1, .DEVICE_TABLE[.DEV_INDEX, DVT_VOLSIZE] - 1);
;	0679	    RETURN;
;	0680	    END;
;	0681	
;	0682	! Found a good bad block descriptor. Enter it in the bad block map and
;	0683	! then process its contents.
;	0684	!
;	0685	
;	0686	MARK_BAD (.DEVICE_TABLE[.DEV_INDEX, DVT_VOLSIZE] - .LBN, .LBN);
;	0687	
;	0688	P = BUFFER + BBM$C_POINTERS;
;	0689	DECR J FROM .BUFFER[BBM$B_INUSE]/2 TO 1 DO
;	0690	    BEGIN
;	0691	    LBN = .P[BBM$W_LOWLBN];
;	0692	    LBN<16,8> = .P[BBM$B_HIGHLBN];
;	0693	    MARK_BAD (.P[BBM$B_COUNT]+1, .LBN);
;	0694	    P = .P + 4;
;	0695	    END;
;	0696	

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 4-2
; Digital Equipment Corporation
;
;	0697	END;					! end of routine GET_SOFTBAD



							    .GLOBL  READ_BLOCK, CHECKSUM2

					 0F1C 00126 GET_SOFTBAD:
							    .WORD   Save R2,R3,R4,R8,R9,R10,R11				      ; 0587
		         58	0000G  CF  9E 00128 	    MOVAB   DEV_INDEX, R8					      ;
		         59	0000V  CF  9E 0012D 	    MOVAB   MARK_BAD, R9					      ;
		         5A	0000G  CF  9E 00132 	    MOVAB   DEVICE_TABLE+8, R10					      ;
		         5B	0000G  CF  9E 00137 	    MOVAB   BUFFER, R11						      ;
	   50	         68	       04  78 0013C 	    ASHL    #4, DEV_INDEX, R0					      ; 0643
				     6A40  9F 00140 	    PUSHAB  DEVICE_TABLE+8[R0]					      ;
		         54	       9E  D0 00143 	    MOVL    @(SP)+, LBN						      ;
	   5D	  0000G  CF	       06  E1 00146 	    BBC     #6, INIT_OPTIONS, 4$				      ; 0644
		         53	       20  D0 0014C 	    MOVL    #32, J						      ; 0657
				       54  D7 0014F 1$:     DECL    LBN							      ; 0659
				0810   8F  BB 00151 	    PUSHR   #^M<R4,R11>						      ; 0660
		  0000G  CF	       02  FB 00155 	    CALLS   #2, READ_BLOCK					      ;
		         52	       50  D0 0015A 	    MOVL    R0, STATUS						      ;
		         23	       52  E9 0015D 	    BLBC    STATUS, 2$						      ; 0662
		         7E	01FE   8F  3C 00160 	    MOVZWL  #510, -(SP)						      ; 0665
				       5B  DD 00165 	    PUSHL   R11							      ;
		  0000G  CF	       02  FB 00167 	    CALLS   #2, CHECKSUM2					      ;
		         26	       50  E9 0016C 	    BLBC    R0, 3$						      ;
		         01	       6B  91 0016F 	    CMPB    BUFFER, #1						      ; 0666
				       21  12 00172 	    BNEQ    3$							      ;
		         03	  01   AB  91 00174 	    CMPB    BUFFER+1, #3					      ; 0667
				       1B  12 00178 	    BNEQ    3$							      ;
		    FD   8F	  02   AB  91 0017A 	    CMPB    BUFFER+2, #253					      ; 0668
				       14  1A 0017F 	    BGTRU   3$							      ;
				       33  11 00181 	    BRB     5$							      ; 0669
	      000001F4   8F	       52  D1 00183 2$:     CMPL    STATUS, #500					      ; 0671
				       09  13 0018A 	    BEQL    3$							      ;
				       52  DD 0018C 	    PUSHL   STATUS						      ; 0672
	      00000000G  00	       01  FB 0018E 	    CALLS   #1, LIB$STOP					      ;
		         B7	       53  F5 00195 3$:     SOBGTR  J, 1$						      ; 0657
			    00759008   8F  DD 00198 	    PUSHL   #7704584						      ; 0677
	      00000000G  00	       01  FB 0019E 	    CALLS   #1, LIB$SIGNAL					      ;
	   50	         68	       04  78 001A5 	    ASHL    #4, DEV_INDEX, R0					      ; 0678
				     6A40  9F 001A9 4$:     PUSHAB  DEVICE_TABLE+8[R0]					      ;
	   7E	         9E	       01  C3 001AC 	    SUBL3   #1, @(SP)+, -(SP)					      ;
				       01  DD 001B0 	    PUSHL   #1							      ;
		         69	       02  FB 001B2 	    CALLS   #2, MARK_BAD					      ;
					   04 001B5 	    RET     							      ; 0679
				       54  DD 001B6 5$:     PUSHL   LBN							      ; 0686
	   50	         68	       04  78 001B8 	    ASHL    #4, DEV_INDEX, R0					      ;
				     6A40  9F 001BC 	    PUSHAB  DEVICE_TABLE+8[R0]					      ;
	   7E	         9E	       54  C3 001BF 	    SUBL3   LBN, @(SP)+, -(SP)					      ;
		         69	       02  FB 001C3 	    CALLS   #2, MARK_BAD					      ;
		         52	  04   AB  9E 001C6 	    MOVAB   BUFFER+4, P						      ; 0688
		         53	  02   AB  9A 001CA 	    MOVZBL  BUFFER+2, R3					      ; 0689
		         53	       02  C6 001CE 	    DIVL2   #2, R3						      ;
				       53  D6 001D1 	    INCL    J							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 4-3
; Digital Equipment Corporation
;
				       17  11 001D3 	    BRB     7$							      ;
		         54	  02   A2  3C 001D5 6$:     MOVZWL  2(P), LBN						      ; 0691
	   08	         10	       62  F0 001D9 	    INSV    (P), #16, #8, LBN					      ; 0692
				       54     001DD									      ;
				       54  DD 001DE 	    PUSHL   LBN							      ; 0693
		         7E	  01   A2  9A 001E0 	    MOVZBL  1(P), -(SP)						      ;
				       6E  D6 001E4 	    INCL    (SP)						      ;
		         69	       02  FB 001E6 	    CALLS   #2, MARK_BAD					      ;
		         52	       04  C0 001E9 	    ADDL2   #4, P						      ; 0694
		         E6	       53  F5 001EC 7$:     SOBGTR  J, 6$						      ; 0689
					   04 001EF 	    RET     							      ; 0587

; Routine Size:  202 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 5
; Digital Equipment Corporation
;
;	0698	ROUTINE GET_USERBAD : NOVALUE =
;	0699	
;	0700	!++
;	0701	!
;	0702	! FUNCTIONAL DESCRIPTION:
;	0703	!
;	0704	!	This routine processes the bad block data entered by the user in the
;	0705	!	command line.
;	0706	!
;	0707	!
;	0708	! CALLING SEQUENCE:
;	0709	!	GET_USERBAD ()
;	0710	!
;	0711	! INPUT PARAMETERS:
;	0712	!	NONE
;	0713	!
;	0714	! IMPLICIT INPUTS:
;	0715	!	device table in INIT_DISK
;	0716	!	parser output database
;	0717	!
;	0718	! OUTPUT PARAMETERS:
;	0719	!	NONE
;	0720	!
;	0721	! IMPLICIT OUTPUTS:
;	0722	!	allocation table in INIT_DISK
;	0723	!
;	0724	! ROUTINE VALUE:
;	0725	!	NONE
;	0726	!
;	0727	! SIDE EFFECTS:
;	0728	!	disk blocks read
;	0729	!
;	0730	!--
;	0731	
;	0732	BEGIN
;	0733	
;	0734	LOCAL
;	0735		LBN;				! LBN to mark bad
;	0736	
;	0737	EXTERNAL
;	0738		DEVICE_TABLE	: BBLOCKVECTOR [,DVT_LENGTH],
;	0739						! device data table
;	0740		DEV_INDEX,			! table index of device in use
;	0741		BADBLOCK_TABLE	: BBLOCKVECTOR [,BAD_LENGTH],
;	0742						! user entered bad block table
;	0743		BADBLOCK_COUNT;			! count of entries
;	0744	
;	0745	
;	0746	! Pick up each entry in the bad block table. If it was entered in
;	0747	! sector - track - cylinder form, convert it to LBN. Enter it in the
;	0748	! allocation table.
;	0749	!
;	0750	
;	0751	INCR J FROM 0 TO .BADBLOCK_COUNT-1 DO
;	0752	    BEGIN

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 5-1
; Digital Equipment Corporation
;
;	0753	    IF .BADBLOCK_TABLE[.J, BAD_STC_FORM]
;	0754	    THEN
;	0755		LBN = ((.BADBLOCK_TABLE[.J, BAD_CYLINDER] * .DEVICE_TABLE[.DEV_INDEX, DVT_TRACKS]
;	0756		      + .BADBLOCK_TABLE[.J, BAD_TRACK]) * .DEVICE_TABLE[.DEV_INDEX, DVT_SECTORS]
;	0757		      + .BADBLOCK_TABLE[.J, BAD_SECTOR]) / .DEVICE_TABLE[.DEV_INDEX, DVT_BLOCKFACT]
;	0758	    ELSE
;	0759		LBN = .BADBLOCK_TABLE[.J, BAD_LBN];
;	0760	    MARK_BAD (.BADBLOCK_TABLE[.J, BAD_COUNT], .LBN);
;	0761	    END;
;	0762	
;	0763	END;					! end of routine GET_USERBAD



							    .GLOBL  BADBLOCK_TABLE, BADBLOCK_COUNT

					 087C 001F0 GET_USERBAD:
							    .WORD   Save R2,R3,R4,R5,R6,R11				      ; 0698
		         5B	0000G  CF  9E 001F2 	    MOVAB   BADBLOCK_TABLE, R11					      ;
		         54	0000G  CF  D0 001F7 	    MOVL    BADBLOCK_COUNT, R4					      ; 0751
		         52	       01  CE 001FC 	    MNEGL   #1, J						      ;
				       59  11 001FF 	    BRB     4$							      ;
				  06 AB42  7F 00201 1$:     PUSHAQ  BADBLOCK_TABLE+6[J]					      ; 0753
		         3E	       9E  E9 00205 	    BLBC    @(SP)+, 2$						      ;
	   50	  0000G  CF	       04  78 00208 	    ASHL    #4, DEV_INDEX, R0					      ; 0755
				  02 AB42  7F 0020E 	    PUSHAQ  BADBLOCK_TABLE+2[J]					      ;
		         51	       9E  3C 00212 	    MOVZWL  @(SP)+, R1						      ;
		         55	0000GCF40  9A 00215 	    MOVZBL  DEVICE_TABLE+1[R0], R5				      ;
		         51	       55  C4 0021B 	    MULL2   R5, R1						      ;
				  01 AB42  7F 0021E 	    PUSHAQ  BADBLOCK_TABLE+1[J]					      ;
		         56	       9E  9A 00222 	    MOVZBL  @(SP)+, R6						      ;
		         51	       56  C0 00225 	    ADDL2   R6, R1						      ;
		         55	0000GCF40  9A 00228 	    MOVZBL  DEVICE_TABLE[R0], R5				      ; 0756
		         51	       55  C4 0022E 	    MULL2   R5, R1						      ;
				     6B42  7F 00231 	    PUSHAQ  BADBLOCK_TABLE[J]					      ; 0755
		         56	       9E  9A 00234 	    MOVZBL  @(SP)+, R6						      ;
		         51	       56  C0 00237 	    ADDL2   R6, R1						      ;
		         53	0000GCF40  9A 0023A 	    MOVZBL  DEVICE_TABLE+5[R0], LBN				      ; 0757
	   53	         51	       53  C7 00240 	    DIVL3   LBN, R1, LBN					      ;
				       06  11 00244 	    BRB     3$							      ; 0753
				     6B42  7F 00246 2$:     PUSHAQ  BADBLOCK_TABLE[J]					      ; 0759
		         53	       9E  D0 00249 	    MOVL    @(SP)+, LBN						      ;
				       53  DD 0024C 3$:     PUSHL   LBN							      ; 0760
				  04 AB42  7F 0024E 	    PUSHAQ  BADBLOCK_TABLE+4[J]					      ;
		         7E	       9E  3C 00252 	    MOVZWL  @(SP)+, -(SP)					      ;
		  0000V  CF	       02  FB 00255 	    CALLS   #2, MARK_BAD					      ;
	   A3	         52	       54  F2 0025A 4$:     AOBLSS  R4, J, 1$						      ; 0751
					   04 0025E 	    RET     							      ; 0698

; Routine Size:  111 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 6
; Digital Equipment Corporation
;
;	0764	ROUTINE MARK_BAD (BLOCK_COUNT, START_LBN) : NOVALUE =
;	0765	
;	0766	!++
;	0767	!
;	0768	! FUNCTIONAL DESCRIPTION:
;	0769	!
;	0770	!	This routine enters the indicated block(s) into the bad block part
;	0771	!	of the allocation table. The table is maintained in reverse order
;	0772	!	by LBN, and adjacent or overlapping areas are merged. Reverse order
;	0773	!	is used to make the bad block data appear at the front of the volume's
;	0774	!	bad block file.
;	0775	!
;	0776	!
;	0777	! CALLING SEQUENCE:
;	0778	!	MARK_BAD (ARG1, ARG2)
;	0779	!
;	0780	! INPUT PARAMETERS:
;	0781	!	ARG1: count of blocks to mark bad
;	0782	!	ARG2: start LBN of blocks
;	0783	!
;	0784	! IMPLICIT INPUTS:
;	0785	!	allocation table
;	0786	!
;	0787	! OUTPUT PARAMETERS:
;	0788	!	NONE
;	0789	!
;	0790	! IMPLICIT OUTPUTS:
;	0791	!	NONE
;	0792	!
;	0793	! ROUTINE VALUE:
;	0794	!	NONE
;	0795	!
;	0796	! SIDE EFFECTS:
;	0797	!	allocation table altered
;	0798	!
;	0799	!--
;	0800	
;	0801	BEGIN
;	0802	
;	0803	LOCAL
;	0804		LBN,				! start LBN of new bad cluster
;	0805		COUNT,				! block count of new bad cluster
;	0806		J,				! index into bad block allocation table
;	0807		C;				! merge loop counter
;	0808	
;	0809	EXTERNAL
;	0810		CLUSTER,			! volume cluster factor
;	0811		VOLUME_SIZE,			! volume size rounded to next cluster
;	0812		BADBLOCK_TOTAL,			! count of bad areas so far
;	0813		BADBLOCK_LBN	: VECTOR,	! bad block LBN table
;	0814		BADBLOCK_CNT	: VECTOR;	! bad block count table
;	0815	
;	0816	EXTERNAL LITERAL
;	0817		BADBLOCK_MAX	: UNSIGNED (16); ! length of bad block table
;	0818	

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 6-1
; Digital Equipment Corporation
;
;	0819	
;	0820	! Round the start LBN and count out to the cluster boundaries surrounding
;	0821	! the bad area.
;	0822	!
;	0823	
;	0824	IF .BADBLOCK_TOTAL GEQ BADBLOCK_MAX
;	0825	THEN ERR_EXIT (INIT$_MAXBAD);
;	0826	
;	0827	LBN = .START_LBN / .CLUSTER * .CLUSTER;
;	0828	COUNT = (.START_LBN + .BLOCK_COUNT + .CLUSTER - 1) / .CLUSTER * .CLUSTER - .LBN;
;	0829	
;	0830	IF .LBN GEQU .VOLUME_SIZE
;	0831	THEN ERR_EXIT (INIT$_BADRANGE);
;	0832	
;	0833	! Search the allocation table until an entry is found with a start LBN lower
;	0834	! than the new LBN. Shuffle the table down at this point and insert the
;	0835	! new entry.
;	0836	!
;	0837	
;	0838	J = 0;
;	0839	UNTIL .J GEQ .BADBLOCK_TOTAL DO
;	0840	    BEGIN
;	0841	    IF .BADBLOCK_LBN[.J] LSSU .LBN THEN EXITLOOP;
;	0842	    J = .J + 1;
;	0843	    END;
;	0844	
;	0845	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J], BADBLOCK_LBN[.J+1]);
;	0846	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J], BADBLOCK_CNT[.J+1]);
;	0847	BADBLOCK_TOTAL = .BADBLOCK_TOTAL + 1;
;	0848	BADBLOCK_CNT[.J] = .COUNT;
;	0849	BADBLOCK_LBN[.J] = .LBN;
;	0850	
;	0851	! Now check for adjacencies and merge if they exist. Start with the previous
;	0852	! table entry and compare pairs.
;	0853	!
;	0854	
;	0855	IF .J NEQ 0 THEN J = .J-1;
;	0856	C = 0;
;	0857	
;	0858	UNTIL .J+1 GEQ .BADBLOCK_TOTAL DO
;	0859	    BEGIN
;	0860	    IF .BADBLOCK_LBN[.J] LEQ .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1]
;	0861	    THEN
;	0862		BEGIN
;	0863		BADBLOCK_CNT[.J+1] = MAXU (.BADBLOCK_LBN[.J] + .BADBLOCK_CNT[.J],
;	0864					   .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1])
;	0865				   - .BADBLOCK_LBN[.J+1];
;	0866		BADBLOCK_TOTAL = .BADBLOCK_TOTAL - 1;
;	0867		CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J+1], BADBLOCK_LBN[.J]);
;	0868		CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J+1], BADBLOCK_CNT[.J]);
;	0869		BADBLOCK_CNT[.BADBLOCK_TOTAL] = 0;
;	0870		END
;	0871	
;	0872	    ELSE
;	0873		BEGIN

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 6-2
; Digital Equipment Corporation
;
;	0874		J = .J + 1;
;	0875		C = .C + 1;
;	0876		IF .C GEQ 2 THEN EXITLOOP
;	0877		END;
;	0878	    END;				! end of merge loop
;	0879	
;	0880	END;					! end of routine MARK_BAD



							    .GLOBL  CLUSTER, VOLUME_SIZE, BADBLOCK_TOTAL, BADBLOCK_LBN
							    .GLOBL  BADBLOCK_CNT, BADBLOCK_MAX

					 0FFC 0025F MARK_BAD:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11		      ; 0764
		         5B	0000G  CF  9E 00261 	    MOVAB   BADBLOCK_LBN, R11					      ;
	      00000000G  8F	0000G  CF  D1 00266 	    CMPL    BADBLOCK_TOTAL, #BADBLOCK_MAX			      ; 0824
				       0D  19 0026F 	    BLSS    1$							      ;
			    007580BC   8F  DD 00271 	    PUSHL   #7700668						      ; 0825
	      00000000G  00	       01  FB 00277 	    CALLS   #1, LIB$STOP					      ;
		         51	0000G  CF  D0 0027E 1$:     MOVL    CLUSTER, R1						      ; 0827
	   50	    08   AC	       51  C7 00283 	    DIVL3   R1, START_LBN, R0					      ;
	   58	         50	       51  C5 00288 	    MULL3   R1, R0, LBN						      ;
	   50	    08   AC	  04   AC  C1 0028C 	    ADDL3   BLOCK_COUNT, START_LBN, R0				      ; 0828
		         50	  FF A140  9E 00292 	    MOVAB   -1(R1)[R0], R0					      ;
		         50	       51  C6 00297 	    DIVL2   R1, R0						      ;
		         50	       51  C4 0029A 	    MULL2   R1, R0						      ;
	   59	         50	       58  C3 0029D 	    SUBL3   LBN, R0, COUNT					      ;
		  0000G  CF	       58  D1 002A1 	    CMPL    LBN, VOLUME_SIZE					      ; 0830
				       0D  1F 002A6 	    BLSSU   2$							      ;
			    00758094   8F  DD 002A8 	    PUSHL   #7700628						      ; 0831
	      00000000G  00	       01  FB 002AE 	    CALLS   #1, LIB$STOP					      ;
				       56  D4 002B5 2$:     CLRL    J							      ; 0838
		  0000G  CF	       56  D1 002B7 3$:     CMPL    J, BADBLOCK_TOTAL					      ; 0839
				       0A  18 002BC 	    BGEQ    4$							      ;
		         58	     6B46  D1 002BE 	    CMPL    BADBLOCK_LBN[J], LBN				      ; 0841
				       04  1F 002C2 	    BLSSU   4$							      ;
				       56  D6 002C4 	    INCL    J							      ; 0842
				       EF  11 002C6 	    BRB     3$							      ; 0839
	   57	  0000G  CF	       56  C3 002C8 4$:     SUBL3   J, BADBLOCK_TOTAL, R7				      ; 0845
		         57	       04  C4 002CE 	    MULL2   #4, R7						      ;
				  04 AB46  DF 002D1 	    PUSHAL  BADBLOCK_LBN+4[J]					      ;
				     6B46  DF 002D5 	    PUSHAL  BADBLOCK_LBN[J]					      ;
	   9E	         9E	       57  28 002D8 	    MOVC3   R7, @(SP)+, @(SP)+					      ;
				0000GCF46  DF 002DC 	    PUSHAL  BADBLOCK_CNT+4[J]					      ; 0846
				0000GCF46  DF 002E1 	    PUSHAL  BADBLOCK_CNT[J]					      ;
	   9E	         9E	       57  28 002E6 	    MOVC3   R7, @(SP)+, @(SP)+					      ;
				0000G  CF  D6 002EA 	    INCL    BADBLOCK_TOTAL					      ; 0847
		  0000GCF46	       59  D0 002EE 	    MOVL    COUNT, BADBLOCK_CNT[J]				      ; 0848
		       6B46	       58  D0 002F4 	    MOVL    LBN, BADBLOCK_LBN[J]				      ; 0849
				       56  D5 002F8 	    TSTL    J							      ; 0855
				       02  13 002FA 	    BEQL    5$							      ;
				       56  D7 002FC 	    DECL    J							      ;
				       5A  D4 002FE 5$:     CLRL    C							      ; 0856
	   50	         56	       01  C1 00300 6$:     ADDL3   #1, J, R0						      ; 0858

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 6-3
; Digital Equipment Corporation
;
		  0000G  CF	       50  D1 00304 	    CMPL    R0, BADBLOCK_TOTAL					      ;
				       59  18 00309 	    BGEQ    9$							      ;
		         59	0000GCF40  DE 0030B 	    MOVAL   BADBLOCK_CNT[R0], R9				      ; 0860
	   52	       6B40	       69  C1 00311 	    ADDL3   (R9), BADBLOCK_LBN[R0], R2				      ;
		         52	     6B46  D1 00316 	    CMPL    BADBLOCK_LBN[J], R2					      ;
				       3F  14 0031A 	    BGTR    8$							      ;
	   51	       6B46	0000GCF46  C1 0031C 	    ADDL3   BADBLOCK_CNT[J], BADBLOCK_LBN[J], R1		      ; 0863
		         52	       51  D1 00324 	    CMPL    R1, R2						      ;
				       03  1E 00327 	    BGEQU   7$							      ;
		         51	       52  D0 00329 	    MOVL    R2, R1						      ;
	   69	         51	     6B40  C3 0032C 7$:     SUBL3   BADBLOCK_LBN[R0], R1, (R9)				      ; 0865
				0000G  CF  D7 00331 	    DECL    BADBLOCK_TOTAL					      ; 0866
		         57	0000G  CF  D0 00335 	    MOVL    BADBLOCK_TOTAL, R7					      ; 0867
	   58	         57	       56  C3 0033A 	    SUBL3   J, R7, R8						      ;
		         58	       04  C4 0033E 	    MULL2   #4, R8						      ;
				     6B46  DF 00341 	    PUSHAL  BADBLOCK_LBN[J]					      ;
				     6B40  DF 00344 	    PUSHAL  BADBLOCK_LBN[R0]					      ;
	   9E	         9E	       58  28 00347 	    MOVC3   R8, @(SP)+, @(SP)+					      ;
				0000GCF46  DF 0034B 	    PUSHAL  BADBLOCK_CNT[J]					      ; 0868
	   9E	         69	       58  28 00350 	    MOVC3   R8, (R9), @(SP)+					      ;
				0000GCF47  D4 00354 	    CLRL    BADBLOCK_CNT[R7]					      ; 0869
				       A5  11 00359 	    BRB     6$							      ; 0860
				       56  D6 0035B 8$:     INCL    J							      ; 0874
				       5A  D6 0035D 	    INCL    C							      ; 0875
		         02	       5A  D1 0035F 	    CMPL    C, #2						      ; 0876
				       9C  19 00362 	    BLSS    6$							      ;
					   04 00364 9$:     RET     							      ; 0764

; Routine Size:  262 bytes


;	0881	
;	0882	END
;	0883	ELUDOM




							    .GLOBL  LIB$SIGNAL, LIB$STOP

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   869  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        19         0       226

; Bliss-32 7.352	Saturday 22-AUG-1978 00:18:35	DBB3:[INIT.SRC]INIBAD.B32;10					Page 6-4
; Digital Equipment Corporation
;





; Size:		869 code + 0 data bytes
; Run Time:	00:24.7
; Elapsed Time:	01:09.4
; Memory Used:	311 pages
; Compilation Complete
