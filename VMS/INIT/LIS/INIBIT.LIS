
; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE INIBIT (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'X0004'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  INIT Utility Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine initializes the contents of the volume storage bitmap.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Nov-1977  14:37
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 3-Jan-1978  22:49
;	0047	!   X0002 - Change name of checksum routine
;	0048	!
;	0049	!   Andrew C. Goldstein, 17-Jan-1978  16:44
;	0050	!   X0003 - Write structure level and block size in storage control block
;	0051	!
;	0052	!   Andrew C. Goldstein, 7-Jun-78  17:11
;	0053	!   X0004 - Add structure level 1
;	0054	!
;	0055	!**

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 1-1
; Digital Equipment Corporation
;
;	0056	
;	0057	
;	0058	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0059	REQUIRE 'SRC$:INIDEF.B32';
;	0321	REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2
; Digital Equipment Corporation
;
;	0381	GLOBAL ROUTINE INIT_BITMAP : NOVALUE =
;	0382	
;	0383	!++
;	0384	!
;	0385	! FUNCTIONAL DESCRIPTION:
;	0386	!
;	0387	!	This routine initializes the contents of the volume storage bitmap.
;	0388	!
;	0389	!
;	0390	! CALLING SEQUENCE:
;	0391	!	INIT_BITMAP ()
;	0392	!
;	0393	! INPUT PARAMETERS:
;	0394	!	NONE
;	0395	!
;	0396	! IMPLICIT INPUTS:
;	0397	!	device data table
;	0398	!	allocation table
;	0399	!
;	0400	! OUTPUT PARAMETERS:
;	0401	!	NONE
;	0402	!
;	0403	! IMPLICIT OUTPUTS:
;	0404	!	NONE
;	0405	!
;	0406	! ROUTINE VALUE:
;	0407	!	NONE
;	0408	!
;	0409	! SIDE EFFECTS:
;	0410	!	storage bitmap file written
;	0411	!
;	0412	!--
;	0413	
;	0414	BEGIN
;	0415	
;	0416	BUILTIN
;	0417		ROT;
;	0418	
;	0419	LOCAL
;	0420		BLOCK_COUNT,			! number of blocks in storage map
;	0421		MAP_LBN,			! LBN of current bitmap block
;	0422		PREV_LBN,			! start LBN + 1 of last entry processed
;	0423		NEXT_LBN,			! start LBN of current allocation table entry
;	0424		INDEX,				! table index of current entry
;	0425		BIT_COUNT,			! number of bits to clear in storage map
;	0426		MAP_VBN,			! relative block in storage map to use
;	0427		BIT_POS;			! bit position of start of area
;	0428	
;	0429	EXTERNAL
;	0430		INIT_OPTIONS	: BITVECTOR,	! command option flags
;	0431		ALLOC_TABLE_CNT	: VECTOR,	! allocation block count table
;	0432		ALLOC_TABLE_LBN	: VECTOR,	! allocation LBN table
;	0433		VOLEND_CNT,			! volume end allocation table entry - count
;	0434		VOLEND_LBN,			! volume end allocation table entry - LBN
;	0435		BITMAP_CNT,			! block count of storage map file

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-1
; Digital Equipment Corporation
;
;	0436		BITMAP_LBN,			! starting LBN of storage map file
;	0437		VOLUME_SIZE,			! size of volume rounded to next cluster
;	0438		CLUSTER,			! volume cluster factor
;	0439		BUFFER		: BBLOCK,	! I/O buffer
;	0440		DEVICE_TABLE	: BBLOCKVECTOR [,DVT_LENGTH],
;	0441						! device data table
;	0442		DEV_INDEX;			! table index of this device
;	0443	
;	0444	EXTERNAL LITERAL
;	0445		ALLOC_MAX	: UNSIGNED (16); ! total number of entries in allocation table
;	0446	
;	0447	EXTERNAL ROUTINE
;	0448		CHECKSUM2,			! compute block checksum
;	0449		WRITE_BLOCK;			! write block on volume
;	0450	
;	0451	
;	0452	! First make up an allocation pointer to represent the space from the end
;	0453	! of the volume to the next 4096 cluster boundary (being the end of the
;	0454	! storage map block).
;	0455	!
;	0456	
;	0457	VOLEND_CNT = (4096 - (.VOLUME_SIZE / .CLUSTER) MOD 4096) * .CLUSTER;
;	0458	VOLEND_LBN = .VOLUME_SIZE;
;	0459	
;	0460	! Build the storage control block and write it out.
;	0461	!
;	0462	
;	0463	CH$FILL (0, 512, BUFFER);
;	0464	
;	0465	IF .INIT_OPTIONS[OPT_STRUCTURE1]
;	0466	THEN
;	0467	    BEGIN
;	0468	    MAP BUFFER : VECTOR;
;	0469	    BLOCK_COUNT = .BITMAP_CNT - 1;
;	0470	    IF .BLOCK_COUNT GTRU 126
;	0471	    THEN BLOCK_COUNT = 0;
;	0472	
;	0473	    (BUFFER+3)<0,8> = .BLOCK_COUNT;
;	0474	    INCR J FROM 0 TO .BLOCK_COUNT - 1
;	0475	    DO BUFFER[.J+1] = 4096;
;	0476	    BUFFER[.BLOCK_COUNT+1] = ROT (.VOLUME_SIZE, 16);
;	0477	    END
;	0478	
;	0479	ELSE
;	0480	    BEGIN
;	0481	    BUFFER[SCB$W_STRUCLEV]	= SCB$C_LEVEL2 + 1;
;	0482	    BUFFER[SCB$W_CLUSTER]	= .CLUSTER;
;	0483	    BUFFER[SCB$L_VOLSIZE]	= .DEVICE_TABLE[.DEV_INDEX, DVT_VOLSIZE];
;	0484	    BUFFER[SCB$L_BLKSIZE]	= .DEVICE_TABLE[.DEV_INDEX, DVT_BLOCKFACT];
;	0485	    BUFFER[SCB$L_SECTORS]	= .DEVICE_TABLE[.DEV_INDEX, DVT_SECTORS];
;	0486	    BUFFER[SCB$L_TRACKS]	= .DEVICE_TABLE[.DEV_INDEX, DVT_TRACKS];
;	0487	    BUFFER[SCB$L_CYLINDER]	= .DEVICE_TABLE[.DEV_INDEX, DVT_CYLINDERS];
;	0488	
;	0489	    CHECKSUM2 (BUFFER, $BYTEOFFSET (SCB$W_CHECKSUM));
;	0490	    END;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-2
; Digital Equipment Corporation
;
;	0491	
;	0492	WRITE_BLOCK (.BITMAP_LBN, BUFFER);
;	0493	
;	0494	! Now write the contents of the bitmap, marking off the areas listed in the
;	0495	! allocation table. To save disk thrashing, we process the table entries
;	0496	! in LBN order.
;	0497	!
;	0498	
;	0499	MAP_LBN = .BITMAP_LBN + 1;
;	0500	CH$FILL (-1, 512, BUFFER);
;	0501	PREV_LBN = 0;
;	0502	WHILE 1 DO
;	0503	    BEGIN
;	0504	
;	0505	! Search the allocation table for the lowest LBN which is greater than the
;	0506	! one previously processed.
;	0507	!
;	0508	
;	0509	    NEXT_LBN = -1;
;	0510	    INCR J FROM 0 TO ALLOC_MAX-1 DO
;	0511		BEGIN
;	0512		IF  .ALLOC_TABLE_LBN[.J] GEQU .PREV_LBN
;	0513		AND .ALLOC_TABLE_LBN[.J] LSSU .NEXT_LBN
;	0514		THEN
;	0515		    BEGIN
;	0516		    NEXT_LBN = .ALLOC_TABLE_LBN[.J];
;	0517		    INDEX = .J;
;	0518		    END;
;	0519		END;
;	0520	    IF .NEXT_LBN EQL -1 THEN EXITLOOP;	! done all entries
;	0521	    PREV_LBN = .NEXT_LBN + 1;
;	0522	
;	0523	! For this group of blocks, compute the bit count and block and bit offset
;	0524	! from the current block in the storage map.
;	0525	!
;	0526	
;	0527	    BIT_COUNT = .ALLOC_TABLE_CNT[.INDEX] / .CLUSTER;
;	0528	    BIT_POS = .NEXT_LBN / .CLUSTER - (.MAP_LBN - .BITMAP_LBN - 1) * 4096;
;	0529	! Now mark off the blocks represented by the allocated entry. This is coded
;	0530	! one bit at a time to keep the code simple; the areas are not large enough
;	0531	! in general to warrant more intelligent code. If the bit position points
;	0532	! off the end of the current block, pass blocks until its doesn't.
;	0533	!
;	0534	
;	0535	    DECR J FROM .BIT_COUNT TO 1 DO
;	0536		BEGIN
;	0537		MAP BUFFER : BITVECTOR;
;	0538	
;	0539		UNTIL .BIT_POS LSSU 4096 DO
;	0540		    BEGIN
;	0541		    WRITE_BLOCK(.MAP_LBN, BUFFER);
;	0542		    CH$FILL (-1, 512, BUFFER);
;	0543		    MAP_LBN = .MAP_LBN + 1;
;	0544		    BIT_POS = .BIT_POS - 4096;
;	0545		    END;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-3
; Digital Equipment Corporation
;
;	0546	
;	0547		BUFFER[.BIT_POS] = 0;
;	0548		BIT_POS = .BIT_POS + 1;
;	0549		END;
;	0550	
;	0551	    END;				! end of allocation scan loop
;	0552	
;	0553	! Finally flush the last buffer and zero any additional blocks present
;	0554	! in the storage map due to cluster roundup.
;	0555	!
;	0556	
;	0557	WRITE_BLOCK (.MAP_LBN, BUFFER);
;	0558	MAP_LBN = .MAP_LBN + 1;
;	0559	CH$FILL (0, 512, BUFFER);
;	0560	
;	0561	UNTIL .MAP_LBN GEQU .BITMAP_LBN + .BITMAP_CNT DO
;	0562	    BEGIN
;	0563	    WRITE_BLOCK (.MAP_LBN, BUFFER);
;	0564	    MAP_LBN = .MAP_LBN + 1;
;	0565	    END;
;	0566	
;	0567	END;					! end of routine INIT_BITMAP


							    .TITLE  INIBIT
							    .IDENT  \X0004\

							    .GLOBL  INIT_OPTIONS, ALLOC_TABLE_CNT, ALLOC_TABLE_LBN
							    .GLOBL  VOLEND_CNT, VOLEND_LBN, BITMAP_CNT, BITMAP_LBN
							    .GLOBL  VOLUME_SIZE, CLUSTER, BUFFER, DEVICE_TABLE, DEV_INDEX
							    .GLOBL  ALLOC_MAX, CHECKSUM2, WRITE_BLOCK

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  INIT_BITMAP, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0381
		         5E	       04  C2 00002 	    SUBL2   #4, SP						      ;
		         57	0000G  CF  D0 00005 	    MOVL    VOLUME_SIZE, R7					      ; 0457
		         56	0000G  CF  D0 0000A 	    MOVL    CLUSTER, R6						      ;
	   50	         57	       56  C7 0000F 	    DIVL3   R6, R7, R0						      ;
	   00	         50	       01  7A 00013 	    EMUL    #1, R0, #0, -(SP)					      ;
				       7E     00017									      ;
	   50	         8E 00001000   8F  7B 00018 	    EDIV    #4096, (SP)+, R0, R0				      ;
				       50     00020									      ;
		         50	F000   C0  9E 00021 	    MOVAB   -4096(R0), R0					      ;
		         50	       56  C4 00026 	    MULL2   R6, R0						      ;
		  0000G  CF	       50  CE 00029 	    MNEGL   R0, VOLEND_CNT					      ;
		  0000G  CF	       57  D0 0002E 	    MOVL    R7, VOLEND_LBN					      ; 0458
	   00	         6E	       00  2C 00033 	    MOVC5   #0, (SP), #0, #512, BUFFER				      ; 0463
		  0000G  CF	0200   8F     00037									      ;
	   30	  0000G  CF	       07  E1 0003D 	    BBC     #7, INIT_OPTIONS+3, 4$				      ; 0465
	   50	  0000G  CF	       01  C3 00043 	    SUBL3   #1, BITMAP_CNT, BLOCK_COUNT				      ; 0469
	      0000007E   8F	       50  D1 00049 	    CMPL    BLOCK_COUNT, #126					      ; 0470
				       02  1B 00050 	    BLEQU   1$							      ;
				       50  D4 00052 	    CLRL    BLOCK_COUNT						      ; 0471
		  0000G  CF	       50  90 00054 1$:     MOVB    BLOCK_COUNT, BUFFER+3				      ; 0473

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-4
; Digital Equipment Corporation
;
		         51	       01  CE 00059 	    MNEGL   #1, J						      ; 0474
				       08  11 0005C 	    BRB     3$							      ;
		  0000GCF41	1000   8F  3C 0005E 2$:     MOVZWL  #4096, BUFFER+4[J]					      ; 0475
	   F4	         51	       50  F2 00066 3$:     AOBLSS  BLOCK_COUNT, J, 2$					      ; 0474
    0000GCF40	         57	       10  9C 0006A 	    ROTL    #16, R7, BUFFER+4[BLOCK_COUNT]			      ; 0476
				       4C  11 00071 	    BRB     5$							      ; 0465
		  0000G  CF	0201   8F  B0 00073 4$:     MOVW    #513, BUFFER					      ; 0481
		  0000G  CF	       56  B0 0007A 	    MOVW    R6, BUFFER+2					      ; 0482
	   50	  0000G  CF	       04  78 0007F 	    ASHL    #4, DEV_INDEX, R0					      ; 0483
				0000GCF40  9F 00085 	    PUSHAB  DEVICE_TABLE+8[R0]					      ;
		  0000G  CF	       9E  D0 0008A 	    MOVL    @(SP)+, BUFFER+4					      ;
		  0000G  CF	0000GCF40  9A 0008F 	    MOVZBL  DEVICE_TABLE+5[R0], BUFFER+8			      ; 0484
		  0000G  CF	0000GCF40  9A 00097 	    MOVZBL  DEVICE_TABLE[R0], BUFFER+12				      ; 0485
		  0000G  CF	0000GCF40  9A 0009F 	    MOVZBL  DEVICE_TABLE+1[R0], BUFFER+16			      ; 0486
				0000GCF40  9F 000A7 	    PUSHAB  DEVICE_TABLE+2[R0]					      ; 0487
		  0000G  CF	       9E  3C 000AC 	    MOVZWL  @(SP)+, BUFFER+20					      ;
		         7E	01FE   8F  3C 000B1 	    MOVZWL  #510, -(SP)						      ; 0489
				0000G  CF  9F 000B6 	    PUSHAB  BUFFER						      ;
		  0000G  CF	       02  FB 000BA 	    CALLS   #2, CHECKSUM2					      ;
				0000G  CF  9F 000BF 5$:     PUSHAB  BUFFER						      ; 0492
				0000G  CF  DD 000C3 	    PUSHL   BITMAP_LBN						      ;
		  0000G  CF	       02  FB 000C7 	    CALLS   #2, WRITE_BLOCK					      ;
	   57	  0000G  CF	       01  C1 000CC 	    ADDL3   #1, BITMAP_LBN, MAP_LBN				      ; 0499
      FF   8F	         6E	       00  2C 000D2 	    MOVC5   #0, (SP), #-1, #512, BUFFER				      ; 0500
		  0000G  CF	0200   8F     000D7									      ;
				       5B  D4 000DD 	    CLRL    PREV_LBN						      ; 0501
		         59	       01  CE 000DF 6$:     MNEGL   #1, NEXT_LBN					      ; 0509
		         50	       01  CE 000E2 	    MNEGL   #1, J						      ; 0510
				       16  11 000E5 	    BRB     8$							      ;
		         51	0000GCF40  D0 000E7 7$:     MOVL    ALLOC_TABLE_LBN[J], R1				      ; 0512
		         5B	       51  D1 000ED 	    CMPL    R1, PREV_LBN					      ;
				       0B  1F 000F0 	    BLSSU   8$							      ;
		         59	       51  D1 000F2 	    CMPL    R1, NEXT_LBN					      ; 0513
				       06  1E 000F5 	    BGEQU   8$							      ;
		         59	       51  D0 000F7 	    MOVL    R1, NEXT_LBN					      ; 0516
		         56	       50  D0 000FA 	    MOVL    J, INDEX						      ; 0517
	   E2	         50 00000000G  8F  F3 000FD 8$:     AOBLEQ  #ALLOC_MAX-1, J, 7$					      ; 0510
	      FFFFFFFF   8F	       59  D1 00105 	    CMPL    NEXT_LBN, #-1					      ; 0520
				       61  13 0010C 	    BEQL    13$							      ;
	   5B	         59	       01  C1 0010E 	    ADDL3   #1, NEXT_LBN, PREV_LBN				      ; 0521
	   6E	  0000GCF46	0000G  CF  C7 00112 	    DIVL3   CLUSTER, ALLOC_TABLE_CNT[INDEX], BIT_COUNT		      ; 0527
	   51	         59	0000G  CF  C7 0011B 	    DIVL3   CLUSTER, NEXT_LBN, R1				      ; 0528
	   50	         57	0000G  CF  C3 00121 	    SUBL3   BITMAP_LBN, MAP_LBN, R0				      ;
	   50	         50	       0C  78 00127 	    ASHL    #12, R0, R0						      ; 0000
		         51	       50  C2 0012B 	    SUBL2   R0, R1						      ; 0528
		         5A	1000   C1  9E 0012E 	    MOVAB   4096(R1), BIT_POS					      ;
	   58	         6E	       01  C1 00133 	    ADDL3   #1, BIT_COUNT, J					      ; 0535
				       30  11 00137 	    BRB     12$							      ;
	      00001000   8F	       5A  D1 00139 9$:     CMPL    BIT_POS, #4096					      ; 0539
				       1F  1F 00140 	    BLSSU   10$							      ;
				0000G  CF  9F 00142 	    PUSHAB  BUFFER						      ; 0381
				       57  DD 00146 	    PUSHL   MAP_LBN						      ; 0541
		  0000G  CF	       02  FB 00148 	    CALLS   #2, WRITE_BLOCK					      ;
      FF   8F	         6E	       00  2C 0014D 	    MOVC5   #0, (SP), #-1, #512, BUFFER				      ; 0542
		  0000G  CF	0200   8F     00152									      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-5
; Digital Equipment Corporation
;
				       57  D6 00158 	    INCL    MAP_LBN						      ; 0543
		         5A	F000   CA  9E 0015A 	    MOVAB   -4096(R10), BIT_POS					      ; 0544
				       D8  11 0015F 	    BRB     9$							      ; 0539
	   00	  0000G  CF	       5A  E5 00161 10$:    BBCC    BIT_POS, BUFFER, 11$				      ; 0547
				       5A  D6 00167 11$:    INCL    BIT_POS						      ; 0548
		         CD	       58  F5 00169 12$:    SOBGTR  J, 9$						      ; 0535
				     FF70  31 0016C 	    BRW     6$							      ; 0502
				0000G  CF  9F 0016F 13$:    PUSHAB  BUFFER						      ; 0557
				       57  DD 00173 	    PUSHL   MAP_LBN						      ;
		  0000G  CF	       02  FB 00175 	    CALLS   #2, WRITE_BLOCK					      ;
				       57  D6 0017A 	    INCL    MAP_LBN						      ; 0558
	   00	         6E	       00  2C 0017C 	    MOVC5   #0, (SP), #0, #512, BUFFER				      ; 0559
		  0000G  CF	0200   8F     00180									      ;
	   50	  0000G  CF	0000G  CF  C1 00186 14$:    ADDL3   BITMAP_CNT, BITMAP_LBN, R0				      ; 0561
		         50	       57  D1 0018E 	    CMPL    MAP_LBN, R0						      ;
				       0F  1E 00191 	    BGEQU   15$							      ;
				0000G  CF  9F 00193 	    PUSHAB  BUFFER						      ; 0563
				       57  DD 00197 	    PUSHL   MAP_LBN						      ;
		  0000G  CF	       02  FB 00199 	    CALLS   #2, WRITE_BLOCK					      ;
				       57  D6 0019E 	    INCL    MAP_LBN						      ; 0564
				       E4  11 001A0 	    BRB     14$							      ; 0561
					   04 001A2 15$:    RET     							      ; 0381

; Routine Size:  419 bytes


;	0568	
;	0569	END
;	0570	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   419  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        13         0       226






; Bliss-32 7.352	Saturday 22-AUG-1978 00:19:46	DBB3:[INIT.SRC]INIBIT.B32;12					Page 2-6
; Digital Equipment Corporation
;
; Size:		419 code + 0 data bytes
; Run Time:	00:14.6
; Elapsed Time:	00:39.1
; Memory Used:	326 pages
; Compilation Complete
