
                22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 1   
					OBJANAL.FOR.16      

        C
        C
        C	OBJANAL  --  MAIN DRIVER FOR OBJECT ANALYZER
        C
        C
        C
        C	COPYRIGHT (C) 1976,1977,1978
        C	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
        C
        C	THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
        C	SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
        C	SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
        C	OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
        C	AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
        C	AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
        C	OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
        C
        C	THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
        C	NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
        C	EQUIPMENT CORPORATION.
        C
        C	DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
        C	SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
        C
        C
        C	T.J. PORTER 	  01-AUG-76
        C
        C
        C	THIS IS THE MAIN DRIVER FOR THE OBJECT MODULE ANALYZER.
        C	IT PROCESSES THE COMMAND LINE, OPENS THE FILES, DOES THE INPUT,
        C	AND DRIVES THE REMAINING SUBROUTINES.
        C
        C
        C  MODIFICATIONS:
        C
        C NO.		DATE		PROGRAMMER		PURPOSE
        C --		----		----------		-------
        C
        C 01		15-AUG-76	K.D. MORSE		INSERT COMMAND LINE USAGE.
        C							OMIT USER QUEUES.
        C							INCLUDE SWITCHES FOR OUTPUT.
        C 02		20-AUG-76	K.D. MORSE		OMIT PRMODE CHECKS
        C							AND TYPE VS WRITES.
        C 03		25-AUG-76	K.D. MORSE		INCLUDE LINKER STACK
        C							CHECKS, ISTACK IN COMMON.
        C 04		01-SEP-76	K.D. MORSE		ADD SWITCH FOR ANALYSING
        C							ONLY ONE TYPE OF RECORD,
        C							AND NO EOM OR EOF REPORTING.
        C 05		05-SEP-76	K.D. MORSE		INCLUDE SUB-HEADER RECORD
        C							ERRORS, SUBCNT,PROCRC,
        C							TITLRC,COPYRC IN COMMON.
        C 06		07-SEP-76	K.D. MORSE		INCLUDE NEW ERRORS ROUTINE.
        C 07		10-SEP-76	K.D. MORSE		CHANGE VERSION TO 3.1.
        C 08		07-JAN-77	K.D. MORSE		ATTACH TERMINAL.
        C 09		07-JAN-77	K.D. MORSE		FIX /TX BUG
        C 10		24-JAN-77	K.D. MORSE		FIX BUG ON COUNT

                22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 2   
					OBJANAL.FOR.16      

        C							OF SUBHEADERS IN
        C							CONCATENATED OBJ.
        C							MODULES WITHOUT /EO
        C 11		8-AUG-77	K.D. MORSE		CHANGE TO NEW GETCML.
        C							ADD ERRCOD PARAMETER.
        C							CHANGE SWITCH TABLE.
        C 12		13-SEP-77	K.D. MORSE		CHANGE AMAX0 TO MAX0
        C							IN VARIABLE FORMATS.
        C 13		15-SEP-77	K.D. MORSE		CHANGE TO NATIVE MODE.
        C 14		2-FEB-78	K.D. MORSE		PROCESS TYPE 5 RECORDS
        C							LIKE TYPES 2 AND 4.
        C 15		21-MAR-78	K.D. MORSE		ADD CODE TO PROCESS
        C							TBT AND DBG RECORDS
        C							FROM SWITCHES.
        C 16		22-MAR-78	K.D. MORSE		WRITE TO LUN 6 NOT 5
        C							ELSE BATCH JOBS FAIL.
        C 17		08-MAY-78	K.D. MORSE		LINK OPTION SPECIFI-
        C							CATION RECORD (LNK)
        C							IS RECORD TYPE 6.
        C 18		09-MAY-78	K.D. MORSE		ADD TIRCNT TO COMMON.
        C
        C
        C
        C
        C
        C  VARIABLES:
        C
        C	CLSLNG--LENGTH OF ASCII STRING "CLOSE"
        C	CLSTYP--ASCII STRING "CLOSE"
        C	IDFLNG--LENGTH OF THE DEFAULT INPUT FILENAME
        C	ILUN--LOGICAL UNIT NUMBER FOR OPENING INPUT FILE CHANNEL
        C	INMLNG--LENGTH OF THE INPUT FILE SPECIFICATION
        C	INPDEF--ARRAY SPECIFYING ASCII DEFAULT INPUT FILENAME
        C	INPNAM--INPUT FILE SPECIFICATION
        C	INPTYP--ARRAY SPECIFYING FILE TYPE "INPUT"
        C	ISWTCH--VALUE OF SWITCHES SPECIFIED WITH INPUT FILE SPECIFICATION
        C	ITYLNG--LENGTH OF THE STRING SPECIFYING THE FILE TYPE "INPUT"
        C	LENGTH--LENGTH OF INPUT LINE
        C	NTYPE--ARRAY FOR FILE TYPE IN ERROR
        C	ODFLNG--LENGTH OF THE DEFAULT OUTPUT FILENAME
        C	OLUN--LOGICAL UNIT NUMBER FOR OPENING OUTPUT FILE CHANNEL
        C	ONMLNG--LENGTH OF THE OUTPUT FILE SPECIFICATION
        C	OPNLNG--LENGTH OF ASCII STRING "OPEN"
        C	OPNTYP--ASCII STRING "OPEN"
        C	OSTAT--STATUS OF TYPE OF CLOSE FOR OUTPUT FILE CHANNEL
        C	OTYLNG--LENGTH OF THE STRING SPECIFYING THE FILE TYPE "OUTPUT"
        C	OTYPE--TYPE OF OPEN FOR OUTPUT FILE (0=INPUT, 1=OUTPUT)
        C	OUTDEF--ARRAY SPECIFYING ASCII DEFAULT OUTPUT FILENAME
        C	OUTNAM--OUTPUT FILE SPECIFICATION
        C	OUTTYP--ARRAY SPECIFYING FILE TYPE "OUTPUT"
        C	RECORD--I/O BUFFER
        C	RECSIZ--NUMBER OF CHARACTERS IN AN I/O BUFFER
        C	TYPLNG--LENGTH OF ASCII STRING FOR TYPE OF FILE IN ERROR
        C
        C
        C

                22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 3   
					OBJANAL.FOR.16      

0001    	SUBROUTINE MAIN(DUMMY,CLIBAK)
         
         
0002    	BYTE INIPRS,ENDPRS,CLIWRK,OUTDSC,INPDSC
0003    	INTEGER ONMLNG,INMLNG,ODFLNG,OTYLNG,TYPLNG,ERRTYP(9),ERRCOD
0004    	INTEGER OLUN,OSTAT,OPNLNG,CLSLNG,CLIBAK,SETDEF
0005    	INTEGER PROCRC,TITLRC,COPYRC,TIRCNT
0006    	INTEGER RECSIZ,OTYPE,ITYPE,SWITCH(9),ALLSWT
0007    	BYTE NTYPE(10),OUTTYP(6),INPTYP(5),OPNTYP(4),CLSTYP(5)
0008    	BYTE OUTNAM,INPNAM
        C
        C	THE NEXT DECLARATION DIMENSIONS THE DEFAULT FILENAMES.  THESE VALUES
        C	SHOULD BE CHANGED ACCORDING TO THE NUMBER OF ASCII CHARACTERS
        C	SPECIFIED IN THE DEFAULT NAMES.
        C
0009    	BYTE INPDEF(4),OUTDEF(4)
        C
        C
0010    	LOGICAL*1	DUMPIT
        C
0011    	INTEGER*4	OBJ,ANL
        C
0012    	INTEGER	RECLNG,RECNUM,PSCNT,PSRGSD,PSRTIR,PRMODE
0013    	INTEGER ERRCNT,WRTERR,SUBCNT
        C
0014    	BYTE RECORD(512),RECTYP,MHD,EOM,LSTREC
0015    	BYTE ICON(3),YES,NO
0016    	BYTE DATIME(18),ITIME(8)
        C
0017    	COMMON	RECORD,RECLNG,RECNUM,LSTREC,DUMPIT,PSCNT,PSRGSD,PSRTIR
0018    	COMMON	MXRLNG,PRMODE,ERRCNT,WRTERR,SUBCNT,ISTACK
0019    	COMMON	PROCRC,TITLRC,COPYRC,TIRCNT
        C
0020    	COMMON	/NAMES/ CLIWRK(128),INIPRS(28),ENDPRS(28),INPDSC(197)
0021    	COMMON /NAMES/ OUTDSC(28)
0022    	COMMON	/NAMES/ ONMLNG,OUTNAM(128),INMLNG,INPNAM(128)
        C
0023    	EQUIVALENCE	(RECTYP,RECORD(1))
0024    	EQUIVALENCE	(ITIME(1),DATIME(11))
        C
0025    	DATA	MHD,EOM/0,3/,MAXLNG/512/
0026    	DATA	YES,NO/'Y','N'/
        C
0027    	DATA OUTTYP/'O','U','T','P','U','T'/,OTYLNG/6/
0028    	DATA INPTYP/'I','N','P','U','T'/,ITYLNG/5/
0029    	DATA OPNTYP/'O','P','E','N'/,OPNLNG/4/
0030    	DATA CLSTYP/'C','L','O','S','E'/,CLSLNG/5/
        C
        C
        C	THE NEXT THREE DATA STATEMENTS REPRESENT THE DEFAULT FILENAMES.
        C	AND THEIR LENGTHS.  THESE DEFAULTS MAY CONSIST OF FILENAME AND/OR
        C	FILE TYPE.  THE TYPE MUST CONSIST OF FOUR CHARACTERS IF SPECIFIED.
        C	THE LENGTHS SHOULD BE SET TO SPECIFY THE NUMBER OF CHARACTERS IN
        C	THE STRING.
        C
0031    	DATA OUTDEF/'.','A','N','L'/,ODFLNG/4/

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 4   
					OBJANAL.FOR.16      

0032    	DATA INPDEF/'.','O','B','J'/,IDFLNG/4/
        C
0033    	DATA SWITCH/1,2,4,8,16,32,64,128,256/,ALLSWT/63/	!++01 SWITCH VALUES
0034    	DATA	MAXNAM/128/
0035    	DATA ERRTYP/-1,-2,-3,-4,-5,-6,-7,-8,-9/ !++06 ERROR CODES
0036    	DATA RECSIZ/512/,OTYPE/1/,ITYPE/0/
        C
        C
0037    40	FORMAT(Q,255A1,255A1,2A1)
0038    50	FORMAT(/' ********** RECORD ',I3,' IS ILLEGAL - ZERO LENGTH')
0039    60	FORMAT(/' ?????????? DO YOU WISH TO CONTINUE THIS FILE? (Y OR N) '$)
0040    70	FORMAT(3A1)
0041    80	FORMAT(' ?????????? COME ON NOW - YES OR NO?  '$)
0042    110	FORMAT(/' ********** RECORD',I4,' IS RESERVED TYPE',I4,' ',28('*'))
0043    120	FORMAT(T10'RECORD CONTENT (BYTES IN HEX) FOLLOWS:'/)
0044    130	FORMAT(/' ********** RECORD ',I3,' SEEMS TOO(> ',I3,') LONG ',I5,
             1' BYTES')
0045    140	FORMAT(' ********** FILE "',<INMLNG>A1,'" DOES NOT END WITH EOM.')
0046    150	FORMAT(/' >>>>>>>>>> END OF FILE "',<INMLNG>A1,'" CONTAINING '
        	1,I4,' RECORD(S) ',<MAX0(1,19-INMLNG)>('<')) !++01 ADD MAX CHECK
0047    190	FORMAT(' **********',I3,' PSECT(S) DEFINED - GSD REFERENCES',
        	1' PSECT NUMBER ',I3)
0048    200	FORMAT(' **********',I3,' PSECT(S) DEFINED - TIR REFERENCES'
        	1,' PSECT NUMBER ',I3)
0049    210	FORMAT(' ********** NO P-SECTIONS DEFINED IN MODULE')
0050    220	FORMAT(T10'MODULE DEFINES ',I3,' P-SECTION(S)')
0051    250	FORMAT(' ********** FILE ALSO CONTAINS',I6,' DETECTED ERROR(S)')
0052    260	FORMAT(' ********************************************************'
        	1,'****************'/' **************** NATIVE OBJECT MODULE ANALYZ'
        	2,'ER VERSION 4.00 ************'/' '
        	3,'**************************  ANALYSIS OF FILE  '
        	4,'**************************'/' '
        	5,<MAX0(1,(70-INMLNG)/2)>('*'),' ',<INMLNG>A1,' '
        	6,<MAX0(1,(70-INMLNG)/2)>('*')/
        	7,<25>('*'),' ',9A1,' ',9A1,' ',<26>('*')/
        	8' ***************************************************************'
        	9,'*********'/)		!++01 ADD MAX CHECK AND ++07 CHANGE VERSION
0053    270	FORMAT(' >>>>>>>>>> COMPLETED ANALYSIS IS IN FILE "',<ONMLNG>A1
        	1,'"')
0054    280	FORMAT(T13'AND',I5,' OBJECT MODULE(S)')
0055    290	FORMAT(/' >>>>>>>>>> RECORD',I4,' IS LINKER COMMAND TYPE',I4
        	1,' RECORD ',15('<'))
0056    300	FORMAT(/' >>>>>>>>>> RECORD',I4,' IS IGNORED TYPE',I4,
        	1' RECORD ',22('<'))
0057    310	FORMAT(/' >>>>>>>>>> RECORD',I4,' IS CUSTOMER/CSS TYPE',
        	1I4,' RECORD ',17('<'))
0058    340	FORMAT(/' ********* ERROR--',I4,' EXTRA SUB-HEADER RECORDS',
        	1' SPECIFIED')
0059    350	FORMAT(/' ********* ERROR--',I4,' BYTES WERE NOT PLACED ON THE '
        	1,' LINKER''S STACK'/T19,'BUT WERE REMOVED FROM IT.')
0060    360	FORMAT(/' ********* ERROR--',I4,' BYTES WERE LEFT ON THE LINK'
        	1,'ER''S STACK.')
0061    9481	FORMAT(' ANL -- ERROR--UNABLE TO SPOOL FILE AS TELETYPE OUTPUT'
        	1,' WAS REQUESTED')

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 5   
					OBJANAL.FOR.16      

        C
        C
        C	INITIALIZE ALL PARAMETERS THAT MAY BE USED AS ERROR RETURN CODES.
        C
        C
0062    400	ONMLNG=0
0063    	INMLNG=0
0064    	ILUN=1
0065    	OLUN=2
        C
        C	INITIALIZE PARSE OF COMMAND LINE.
        C
0066    	ERRCOD=CLIBAK(INIPRS,CLIWRK)
0067    	IF (.NOT. ERRCOD) GOTO 9500
        C
        C	PARSE INPUT FILE NAME.
        C
0068    	ERRCOD=CLIBAK(INPDSC,CLIWRK,ISWTCH)
0069    	IF (.NOT. ERRCOD) GOTO 9530
        C
        C	PARSE OUTPUT FILE NAME.
        C
0070    	ERRCOD=CLIBAK(OUTDSC,CLIWRK,ISWTCH)
0071    	IF (.NOT. ERRCOD) GOTO 9520
        C
        C	FINALIZE COMMAND LINE PARSE.
        C
0072    	ERRCOD=CLIBAK(ENDPRS,CLIWRK)
0073    	IF (.NOT. ERRCOD) GOTO 9510
        C
        C	GET THE RESULTANT FILE NAME AFTER AN RMS OPEN FOR INPUT FILE.
        C
0074    	ERRCOD=SETDEF(INPNAM,INMLNG,MAXNAM,INPDEF,IDFLNG,ITYPE)
0075    	IF (.NOT. ERRCOD) GOTO 9555
        C
        C	GET THE RESULTANT FILE NAME AFTER AND RMS OPEN FOR OUTPUT FILE.
        C
0076    	ERRCOD=SETDEF(OUTNAM,ONMLNG,MAXNAM,OUTDEF,ODFLNG,OTYPE)
0077    	IF (.NOT. ERRCOD) GOTO 9550
0078    	IF ((ISWTCH.AND.SWITCH(7)) .EQ. SWITCH(7)) PRMODE=0
0079    	IF ((ISWTCH.AND.SWITCH(7)) .NE. SWITCH(7)) PRMODE=1
0080    	OPEN(UNIT=1,NAME=INPNAM,ERR=9560,CARRIAGECONTROL='NONE',
        	1 TYPE='OLD',READONLY,RECORDSIZE=512)
        C
        C---->		IF WE ARE IN LINE PRINTER MODE OPEN AN OUTPUT
        C		FILE.  USE LUN 2.
        C
0081    	OPEN(UNIT=2,NAME=OUTNAM,ERR=9600,TYPE='OLD')
        C
0082    	CALL DATE(DATIME)
0083    	CALL TIME(ITIME)
        C
0084    	WRITE(2,260,ERR=9740) (INPNAM(I) , I = 1,INMLNG),DATIME
0085    	GOTO 595
        C
        C

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 6   
					OBJANAL.FOR.16      

        C---->		NOW INITIALIZE ALL PARAMETERS
        C
0086    595	ERRCNT = 0
0087    	LSTREC = EOM
0088    	RECNUM = 1
0089    	PSCNT  =  -1
0090    	PSRGSD  =  -1
0091    	PSRTIR  =  -1
0092    	MXRLNG  =  MAXLNG
0093    	WRTERR	=  0
0094    	MODCNT  =  0
0095    	SUBCNT  =  0			!++05 SUB-HEADER EXTRA RECORD COUNTER
0096    	ISTACK  =  0			!++03 STACK COUNTER
0097    	PROCRC  =  0			!++05 LANG. PROC. SUB-HDR COUNTER
0098    	TITLRC  =  0			!++05 TITLE TEXT SUB-HDR COUNTER
0099    	TIRCNT	=  0			!++18 COUNT OF TIR, DBG, & TBT RECORDS
0100    	COPYRC  =  0			!++05 COPYRIGHT SUB-HDR COUNTER
        C
        C---->		NOW LET'S READ A RECORD FROM INPUT FILE
        C
        C
0101    600	READ(1,40,END=6100,ERR=9680)RECLNG,(RECORD(I),I=1,RECLNG)
0102    	DUMPIT = .FALSE.
        C
        C---->		DETERMINE IF WE CAN PROCEED WITH THIS
        C		RECORD - AND DISPATCH IF SO
        C
0103    	IF (RECLNG .LE. 0) GO TO 5000
0104    	IF (RECLNG .LE. MXRLNG) GO TO 700
        C
        C---->		RECORD EXCEEDS ALLOWABLE LENGTH
        C
0105    	ERRCNT = ERRCNT + 1
0106    690		WRITE(2,130,ERR=9740) RECNUM,MXRLNG,RECLNG
        C
0107    700	IF ((ISWTCH.AND.ALLSWT).EQ.0) GOTO 710	!++04 IF ANALYZE ALL RECORDS, BRANCH
0108    	ITYP=RECTYP + 1			!++04 SET SUBSCRIPT
0109    	IF ((ISWTCH.AND.SWITCH(ITYP)) .NE. SWITCH(ITYP)) GOTO 1320 !++10 ANALYZE THIS?
0110    710	GO TO (1000,1100,1200,1300,1200,1200) RECTYP + 1
        C
0111    	ITYP = RECTYP .AND. 255
0112    	IF( ITYP .GT. 10 ) GO TO 740
0113    		WRITE(2,290,ERR=9740) RECNUM,ITYP		! IGNORE LINK OPTION RECORDS FOR NOW
0114    		GO TO 900
        C
0115    740	IF( ITYP .GT. 100 ) GO TO 780
0116    		ERRCNT = ERRCNT + 1
0117    		WRITE(2,110,ERR=9740) RECNUM,ITYP
0118    		GO TO 900
        C
0119    780	IF( ITYP .GT. 200 ) GO TO 820
0120    		WRITE(2,300,ERR=9740) RECNUM,ITYP
0121    		GO TO 900
        C
0122    820		WRITE(2,310,ERR=9740) RECNUM,ITYP
0123    		GO TO 900

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 7   
					OBJANAL.FOR.16      

        C
0124    900	DUMPIT = .TRUE.
0125    	GO TO 1600
        C
        C
        C
        C---->		RECORD TYPE DISPATCH TABLE
        C
        C
0126    1000		CALL MHDANL
0127    		IF (RECORD(2).EQ.0)MODCNT = MODCNT + 1
0128    		GO TO 1320
        C
0129    1100		CALL GSDANL
0130    		GO TO 1320
        C
0131    1200		CALL TIRANL
0132    		TIRCNT = TIRCNT + 1
0133    		GO TO 1320
        C
        C---->	LINK OPTION SPECIFICATION RECORD (LNK)
        C		( NOT USED FOR RELEASE 1)
        C
        C1250		CALL LNKANL
        C		GO TO 1320
        C
0134    1300		CALL EOMANL
0135    1320	IF (RECTYP.NE.EOM) GOTO 1500		! ++08 FIX BUG
0136    	IF ((ISWTCH.AND.ALLSWT).NE.0) GOTO 1490	!++04 OMIT SUMMARY ON PARTIAL ANALYSIS
        C
        C---->		SINCE THIS IS END OF MODULE CHECK THAT NO
        C			P-SECTIONS THAT ARE UNDEFINED IN
        C			THE GSD WERE REFERENCED BY SYMBOLS
        C			OR RELOCATIONS.
        C
0137    		IF(PSRGSD .LE. PSCNT) GO TO 1350
0138    			ERRCNT = ERRCNT + 1
0139    			WRITE(2,190,ERR=9740) PSCNT+1,PSRGSD
0140    1350		IF(PSRTIR .LE. PSCNT) GO TO 1370
0141    			ERRCNT = ERRCNT + 1
0142    			WRITE(2,200,ERR=9740) PSCNT+1,PSRTIR
0143    1370		IF(PSCNT)1375,1400,1400
0144    1375			ERRCNT = ERRCNT + 1
0145    			WRITE(2,210,ERR=9740)
0146    1400		WRITE(2,220,ERR=9740) PSCNT+1
0147    1430		CONTINUE
        C
        C---->	CHECK FOR EXTRANEOUS SUBHEADER RECORDS.
        C
0148    	IF (SUBCNT.EQ.0) GOTO 1460	!++05 CHECK SUB-HDR COUNTER
0149    	WRITE(2,340,ERR=9740)SUBCNT	!++05 ERROR IF NON-ZERO
        C
        C---->		CHECK THE LINKER'S STACK.
        C
0150    1460	IF (ISTACK) 1470,1490,1480	!++04 CHECK STACK OVER OR UNDER
0151    1470	WRITE(2,350,ERR=9740)-ISTACK	!++04 ERROR, TOO MUCH REMOVED

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 8   
					OBJANAL.FOR.16      

0152    	GOTO 1486			!++04 CONTINUE
0153    1480	WRITE(2,360,ERR=9740)ISTACK	!++04 ERROR, TOO MUCH LEFT ON
0154    1486	ERRCNT=ERRCNT + 1		!++04 ONE MORE ERROR
0155    1490		PSCNT = -1
0156    		PSRGSD = -1
0157    		PSRTIR = -1
0158    		MXRLNG = MAXLNG
0159    		SUBCNT = 0		!++05 RESET EXTRA # OF SUB-HDRS
0160    		PROCRC = 0		!++04 RESET EXTRA LANG. PROC. SUB-HDRS
0161    		TITLRC = 0		!++05 RESET EXTRA TITLE TEXT SUB-HDRS
0162    		COPYRC = 0		!++05 RESET EXTRA COPYRIGHT SUB-HDRS
0163    		ISTACK = 0		!++04 RESET STACK COUNTER
0164    		TIRCNT = 0		! RESET COUNT OF TIR'S
        C
0165    1500	IF(WRTERR .NE. 0) GO TO 9740
0166    	LSTREC = RECTYP
        C
        C---->		DUMP RECORD IF SUBROUTINE
        C			SAID SO
        C
0167    1600	IF (DUMPIT) GO TO 5950
0168    	GO TO 5990
        C
        C---->		RECORD LENGTH IS ZERO
        C
0169    5000	WRITE(2,50,ERR=9740) RECNUM
0170    	ERRCNT = ERRCNT + 1
0171    	GO TO 5990
        C
        C---->		DUMP THE RECORD CONTENTS
        C
0172    5950	WRITE(2,120,ERR=9740)
0173    	CALL HEXDMP(RECORD,1,RECLNG,PRMODE)
        C
        C---->		NOW INCREMENT RECORD NUMBER AND ASK IF
        C		TO CONTINUE IF WE ARE IN TERMINAL RECORD BY RECORD MODE
        C
0174    5990	RECNUM=RECNUM+1
0175    5995	IF ((ISWTCH.AND.ALLSWT).NE.0) GOTO 600
0176    	IF (PRMODE) 5997,5997,600
0177    5997	WRITE(2,60,ERR=9740)
0178    6000	READ(2,70,ERR=9680)ICON
0179    	IF(ICON(1) .EQ. YES) GO TO 600
0180    	IF(ICON(1) .EQ. NO) GO TO 7000
0181    	WRITE(2,80,ERR=9740)
0182    	GO TO 6000
        C
        C---->		END OF FILE DETECTED, IF LAST RECORD
        C		NOT EOM - SAY SO
        C
0183    6100	IF(LSTREC .EQ. EOM) GO TO 6150
0184    		ERRCNT = ERRCNT + 1
0185    		WRITE(2,140,ERR=9740) (INPNAM(I), I=1,INMLNG)
        C
        C---->		NOW OUTPUT THE MODULE COUNT, ERROR COUNT THEN
        C			IF AND ONLY IF THE LAST RECORD WAS 

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 9   
					OBJANAL.FOR.16      

        C			NOT EOM DO THE P-SECTION SUMMARY
        C
0186    6150	WRITE(2,150,ERR=9740) (INPNAM(I), I=1,INMLNG), RECNUM-1
0187    	IF ((ISWTCH .AND. ALLSWT) .NE.0) GOTO 7000
0188    	WRITE(2,280,ERR=9740) MODCNT
0189    	IF ( ERRCNT .EQ. 0 ) GO TO 6250
0190    	WRITE(2,250,ERR=9740) ERRCNT
        C
0191    6250	IF((LSTREC .EQ. EOM) .AND. (PRMODE .NE. 0)) GO TO 6325
0192    	IF( LSTREC .EQ. EOM ) GO TO 6330
0193    	IF(PSRGSD .LE. PSCNT) GO TO 6270
0194    		ERRCNT = ERRCNT + 1
0195    		WRITE(2,190,ERR=9740) PSCNT+1,PSRGSD
0196    6270	IF(PSRTIR .LE. PSCNT) GO TO 6280
0197    		ERRCNT = ERRCNT + 1
0198    		WRITE(2,200,ERR=9740) PSCNT+1,PSRTIR
0199    6280	IF(PSCNT)6290,6300,6300
0200    6290		ERRCNT = ERRCNT + 1
0201    		WRITE(2,210,ERR=9740)
0202    6300	WRITE(2,220,ERR=9740) PSCNT+1
0203    	IF (PRMODE.EQ.0) GOTO 6330
0204    6325	WRITE(6,270,ERR=9740) (OUTNAM(I) , I = 1,ONMLNG)
0205    	WRITE(6,250,ERR=9740) ERRCNT
0206    6330	CONTINUE
        C
        C---->		FINISHED WITH THAT FILE - ANOTHER?
        C
0207    7000	CLOSE(UNIT=1,ERR=9620)
0208    7020	CLOSE(UNIT=2,ERR=9660)
0209    	GOTO 10000
        C
        C++06 NEW ERROR RETURNS AND ERROR HANDLING STARTS HERE
        C
        C---->		ERROR MESSAGES
        C
        C
        C
        C
        C
        C--->		MACRO ROUTINE ERRORS
        C
        C
        C
        C---->		INITIALIZE COMMAND LINE PARSE ERROR
        C
0210    9500	CALL ERRORS(ERRTYP(1),ERRCOD,OUTDEF(2),NOBYTE,NOINTG,NOBYTE,
        	1NOINTG,NOBYTE)
0211    	GOTO 10000
        C
        C
        C---->		END COMMAND LINE PARSE ERROR
        C
        C
0212    9510	CALL ERRORS(ERRTYP(2),ERRCOD,OUTDEF(2),NOBYTE,NOINTG,NOBYTE,
        	1NOINTG,NOBYTE)
0213    	GOTO 10000

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 10  
					OBJANAL.FOR.16      

        C
        C
        C---->		COMMAND LINE ERROR WHILE REQUESTING OUTPUT FILE
        C
0214    9520	CALL ERRORS(ERRTYP(3),ERRCOD,OUTDEF(2),OUTTYP,OTYLNG,NOBYTE,
        	1NOINTG,NOBYTE)
0215    	GOTO 10000
        C
        C---->		COMMAND LINE ERROR WHILE REQUESTING INPUT FILE
        C
0216    9530	CALL ERRORS(ERRTYP(3),ERRCOD,OUTDEF(2),INPTYP,ITYLNG,NOBYTE,
        	1NOINTG,NOBYTE)
0217    	GOTO 10000
        C
        C---->		DEFAULT FILE NAMES AND RESULTANT NAMES ERRORS
        C
        C
        C---->		OUTPUT FILE
        C
0218    9550	CALL ERRORS(ERRTYP(4),ERRCOD,OUTDEF(2),OUTNAM,ONMLNG,NOBYTE,
        	1NOINTG,NOBYTE)
0219    	GOTO 10000
        C
        C---->		INPUT FILE
        C
0220    9555	CALL ERRORS(ERRTYP(4),ERRCOD,OUTDEF(2),INPNAM,INMLNG,NOBYTE,
        	1NOINTG,NOBYTE)
0221    	GOTO 10000
        C
        C
        C---->		OPEN FILE ERRORS
        C
        C
        C---->		FOR INPUT FILE
        C
0222    9560	ERRCOD=-7
0223    9570	CALL ERRORS(ERRTYP(5),ERRCOD,OUTDEF(2),INPTYP,ITYLNG,INPNAM,
        	1INMLNG,RECORD(1))
0224    	GOTO 7020
        C
        C---->		FOR OUTPUT FILE
        C
0225    9600	ERRCOD=-7
0226    9650	CALL ERRORS(ERRTYP(1),ERRCOD,OUTDEF(2),OUTTYP,OTYLNG,OUTNAM,
        	1ONMLNG,RECORD(1))
0227    	GOTO 10000
        C
        C
        C---->		CLOSE ERRORS
        C
        C
        C
        C---->		ON INPUT FILE
        C
0228    9620	ERRCOD=-8
0229    9630	CALL ERRORS(ERRTYP(6),ERRCOD,OUTDEF(2),INPNAM,INMLNG,NOBYTE,

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 11  
					OBJANAL.FOR.16      

        	1NOINTG,NOBYTE)
0230    	GOTO 7020
        C
        C---->		ON OUTPUT FILE
        C
0231    9660	IF (PRMODE .EQ. 0) ERRCOD=-7
0232    	IF (PRMODE .EQ. 1) ERRCOD=-8
0233    9670	CALL ERRORS(ERRTYP(6),ERRCOD,OUTDEF(2),OUTNAM,ONMLNG,NOBYTE,
        	1NOINTG,NOBYTE)
0234    	GOTO 10000
        C
        C
        C---->		READ/WRITE ERRORS
        C
        C
        C
        C---->		ON INPUT FILE
        C
0235    9680	ERRCOD=-7
0236    	CALL ERRORS(ERRTYP(7),ERRCOD,OUTDEF(2),INPNAM,INMLNG,RECORD,
        	1LENINP,NOBYTE)
0237    	GOTO 5995
        C
        C---->		ON OUTPUT FILE
        C
0238    9740	ERRCOD=-6
0239    	CALL ERRORS(ERRTYP(7),ERRCOD,OUTDEF(2),OUTNAM,ONMLNG,RECORD,
        	1LENINP,NOBYTE)
0240    	GOTO 7000
        C
        C++06 ERROR RETURN CHANGES END HERE
        C
0241    10000	CALL EXIT
0242    	END

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 12  
					OBJANAL.FOR.16      

PROGRAM SECTIONS

    Name                 Bytes   Attributes

  0 $CODE                 2470   PIC CON REL LCL   SHR   EXE   RD NOWRT LONG
  1 $PDATA                1660   PIC CON REL LCL   SHR NOEXE   RD NOWRT LONG
  2 $LOCAL                 852   PIC CON REL LCL NOSHR NOEXE   RD   WRT LONG
  3 $BLANK                 544   PIC OVR REL GBL   SHR NOEXE   RD   WRT LONG
  4 NAMES                  669   PIC OVR REL GBL   SHR NOEXE   RD   WRT LONG


ENTRY POINTS

    Address  Type Name           

  0-00000000      MAIN           


VARIABLES

    Address  Type Name               Address  Type Name               Address  Type Name               Address  Type Name           

  2-0000007A  I*2 ALLSWT           2-00000098  I*4 ANL              2-00000072  I*2 CLSLNG           3-0000021C  I*2 COPYRC         
 AP-00000004@ R*4 DUMMY            3-00000205  L*1 DUMPIT           2-00000060  L*1 EOM              3-00000210  I*2 ERRCNT         
  2-0000006A  I*2 ERRCOD           2-00000088  I*2 I                2-00000080  I*2 IDFLNG           2-00000084  I*2 ILUN           
  4-0000021B  I*2 INMLNG           3-00000216  I*2 ISTACK           2-00000086  I*2 ISWTCH           2-0000007E  I*2 ITYLNG         
  2-0000008C  I*2 ITYP             2-00000078  I*2 ITYPE            2-00000092  I*2 LENINP           3-00000204  L*1 LSTREC         
  2-0000007C  I*2 MAXLNG           2-00000082  I*2 MAXNAM           2-0000005F  L*1 MHD              2-0000008A  I*2 MODCNT         
  3-0000020C  I*2 MXRLNG           2-00000062  L*1 NO               2-0000008E  I*2 NOBYTE           2-00000090  I*2 NOINTG         
  2-00000094  I*4 OBJ              2-00000064  I*2 ODFLNG           2-0000006C  I*2 OLUN             4-00000199  I*2 ONMLNG         
  2-00000070  I*2 OPNLNG           2-0000006E  I*2 OSTAT            2-00000066  I*2 OTYLNG           2-00000076  I*2 OTYPE          
  3-0000020E  I*2 PRMODE           3-00000218  I*2 PROCRC           3-00000206  I*2 PSCNT            3-00000208  I*2 PSRGSD         
  3-0000020A  I*2 PSRTIR           3-00000200  I*2 RECLNG           3-00000202  I*2 RECNUM           2-00000074  I*2 RECSIZ         
  3-00000000  L*1 RECTYP           3-00000214  I*2 SUBCNT           3-0000021E  I*2 TIRCNT           3-0000021A  I*2 TITLRC         
  2-00000068  I*2 TYPLNG           3-00000212  I*2 WRTERR           2-00000061  L*1 YES            


ARRAYS

    Address  Type Name		       Bytes  Dimensions

  4-00000000  L*1 CLIWRK                 128  (128)
  2-0000004F  L*1 CLSTYP                   5  (5)
  2-00000000  L*1 DATIME                  18  (18)
  4-0000009C  L*1 ENDPRS                  28  (28)
  2-00000012  I*2 ERRTYP                  18  (9)
  2-0000005C  L*1 ICON                     3  (3)
  4-00000080  L*1 INIPRS                  28  (28)
  2-00000054  L*1 INPDEF                   4  (4)
  4-000000B8  L*1 INPDSC                 197  (197)
  4-0000021D  L*1 INPNAM                 128  (128)
  2-00000046  L*1 INPTYP                   5  (5)
  2-0000000A  L*1 ITIME                    8  (8)
  2-00000036  L*1 NTYPE                   10  (10)
  2-0000004B  L*1 OPNTYP                   4  (4)
  2-00000058  L*1 OUTDEF                   4  (4)

MAIN            22-Aug-1978 02:33:36	VAX-11 FORTRAN IV-PLUS V1.0-2      Page 13  
					OBJANAL.FOR.16      

  4-0000017D  L*1 OUTDSC                  28  (28)
  4-0000019B  L*1 OUTNAM                 128  (128)
  2-00000040  L*1 OUTTYP                   6  (6)
  3-00000000  L*1 RECORD                 512  (512)
  2-00000024  I*2 SWITCH                  18  (9)


LABELS

    Address   Label       Address   Label       Address   Label       Address   Label       Address   Label       Address   Label   

  1-00000004  40'       1-00000014  50'       1-00000048  60'       1-00000085  70'       1-0000008A  80'       1-000000B4  110'    
  1-000000EC  120'      1-00000118  130'      1-00000155  140'      1-0000018B  150'      1-000001D8  190'      1-0000021E  200'    
  1-00000264  210'      1-00000292  220'      1-000002B7  250'      1-000002EE  260'      1-00000478  270'      1-000004B0  280'    
  1-000004CD  290'      1-00000512  300'      1-00000550  310'      1-00000593  340'      1-000005D2  350'      1-00000639  360'    
      **      400       0-00000117  595       0-00000161  600           **      690       0-00000206  700       0-0000022D  710     
  0-00000283  740       0-000002C0  780       0-000002F9  820       0-0000032A  900       0-00000334  1000      0-00000348  1100    
  0-00000351  1200      0-00000360  1300      0-00000367  1320      0-000003C3  1350      0-00000405  1370          **      1375    
  0-00000429  1400          **      1430      0-0000047E  1460          **      1470      0-000004B1  1480      0-000004D6  1486    
  0-000004DA  1490      0-0000050E  1500      0-00000524  1600      0-0000052E  5000      0-0000055D  5950      0-00000580  5990    
  0-00000586  5995          **      5997      0-000005B5  6000      0-00000609  6100      0-0000065D  6150      0-000006FD  6250    
  0-00000759  6270      0-0000079B  6280          **      6290      0-000007BF  6300      0-000007EF  6325      0-0000084B  6330    
  0-0000084B  7000      0-00000857  7020          **      9481'     0-00000866  9500      0-00000872  9510      0-0000087E  9520    
  0-0000088A  9530      0-00000896  9550      0-000008A1  9555      0-000008AC  9560          **      9570      0-000008BB  9600    
  0-000008CA  9620          **      9630          **      9650      0-000008DA  9660          **      9670      0-000008FE  9680    
  0-0000090E  9740      0-0000091E  10000   


FUNCTIONS AND SUBROUTINES REFERENCED

EOMANL            ERRORS            FOR$CLOSE         FOR$DATE          FOR$EXIT          FOR$OPEN          FOR$TIME       
GSDANL            HEXDMP            MHDANL            SETDEF            TIRANL         


Total Space Allocated = 6195 Bytes


COMPILER OPTIONS

/CHECK=(NOBOUNDS,OVERFLOW)
/DEBUG=(NOSYMBOLS,TRACEBACK)
/OPTIMIZE  /WARNINGS  /NOI4  /NOD_LINES  
